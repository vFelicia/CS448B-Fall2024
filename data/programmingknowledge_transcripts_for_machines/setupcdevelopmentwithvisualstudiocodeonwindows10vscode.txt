hey guys in this video I'm going to show you how you can set up the C++ development environment on your Visual Studio code editor on your Windows 10 operating system I'm going to show you how to do it with mingw compiler and debugger we are not going to use any MSV C or Microsoft related compiler okay so I already have installed the Visual Studio code editor so if you don't have it it's really easy to install it so just go to the Visual Studio code website and then download and install it it's free of course and it's open source now the next thing we need is the min GW compiler so I'm going to show you how you can download it you just need to search for min G W here and the first link which will appear here will be from mingw dot org and when you open that website it's going to show you this kind of website we just need to go to the downloads tab here so just click on the Downloads tab and once you click on the Downloads tab you will be redirected to the sourceforge.net website which hosts the mingw Exe file and then we are going to just click on this green button which says mingw get setup dot exe file so I'm going to just click on this so now I can see the download has been started and already finished so I'm going to click on this mingw get setup dot exe file and I'm going to minimize the browser and now you can see the mingw installer manager setup tool has been started so first of all we will just say install and this is the default location where mingw will be installed so I don't want to change it so I will leave it as default and say continue and then it's going to start the download of the Installer itself and then it's going to ask us to install some packages so I'm going to wait for some time until this download is finished so once this step is complete we will see this continue button is activated so I'm going to click on this continuum button which is going to just start the mingw installation manager okay and it's going to show us these options you can see here it's going to show us these options and these options are mint you have root developer tool mingw 32 base and then GCC and GCC 14 GCC for G + + which is for C++ and other mingw related packages so so what I'm going to do is I'm going to right click on every package and I'm going to say mark for installations so one by one I'm going to just say mark for installation for all the packages and once you are done with this marking for the check boxes you go to the installation on the left hand top side and then just say apply changes ok so just say apply changes which is going to start the installation of all these packages ok so this may take some time so you can see it's asking us to proceed so it says ok to proceed we will say apply we're going to just start the installation of all these packages so now all the mingw packages are installed and i can see this message which says all changes were applied successfully you may now close the dialog so I'm going to just close this dialog and you can see everything is green in my case so I'm going to just close this Installer also and just for checking I will just open my folder explorer and here in the C directory I'm going to just check where the mingw directory is there or not so you can see mingw directory is created for us right so I'm going to just go inside this directory and I'm going to go inside bin folder in this me min GW directory and I'm going to copy this path and I'm going to add it to my environment variable so just copy this path up to bin and then right click on your Start button here and then just search for system so just click on system here and once this system window opens you just need to go to advanced system settings and then environment variables and then just choose the path environment variable in system variables and then either double click on it or just click Add it and then we are going to add a new variable and then just paste this path which is C colon backslash mingw backslash R bin right and I'm going to just click OK and then ok and then ok and I'm going to close this window and then I'm going to minimize this folder also now the next step is to check whether mingw is working so I'm going to just open my command prompt so right click on your windows button once again and then just click command prompt and in here we are going to check the version of g plus plus so just write G plus plus minus minus version and then press Enter which is going to give you the version of C++ in our case we have installed GCC version six point three point zero minus one ok basically it's six point three point zero so G plus plus is working fine on our Windows operating system that means we can set our visual studio code for developing C++ right so I'm going to open the Visual Studio code and then if you're not aware of these options I'm going to go through them briefly so this is to open a folder so here when you click on this Explorer you will be able to open a folder for example I have already created a CPP folder on my desktop so I'm going to open it everything develop in Visual Studio code is inside a folder so you need to open some folder inside that you need to create your files right now the next is the search button so if you have some code and if you want to search for some particular words or sentence or code you can search from here and even replace it and then next option is for the source control so Visual Studio code have native support for git so if you want to have a source control you can use this button and then you have a debugger button so we are going to see shortly how you can use it and the last option is for extensions so you can you know install extensions for some languages for example we want to install that official extension for C and C++ from Microsoft so just search for C++ here and hopefully the first option or first extension which will appear here will be for c /c plus plus so i'm going to click on this extension and you will be able to see the details about this on the righthand side right and you can see about 5.8 million extensions have already been downloaded and it's from microsoft so you just need to click on this install button it's going to install this extension and once this extension is installed you just need to reload your Visual Studio code so just click on this reload so I have just clicked on the reload button and my Visual Studio code has been reloaded so you can see this extension has been installed and now I can see the uninstall option for this extension so now I have the C and C++ extension so let's create a code so inside this CPU folder I'm going to create a new main dot CPP file and once this file is created I'm going to write some code here so I'm going to add some code so I'm going to just write include iostream and let me make this font size a little bit bigger so you can see this and now I'm going to just add int main method and I'm going to just create a really basic program here so STD C out and then let's print hello world and then I'm going to just say STD and line okay and I'm going to save this file and you can see on this include iostream I see this green squiggly line okay so when I hover over this green squiggly line it says intrude add detected please update your intrude path okay so what you need to do is you just need to click on this bulb here so just click anywhere on this line which shows the squiggly line and then click on this bulb you see here and then just click Edit include path setting okay so just click on this option which says edit include path settings and once you do this you will see a folder created here which is called dot vs code and the new file is created here which is C underscore C++ properties dot Jason and here all the include paths which are the default include paths for every oh s for example Mac OS and then when you scroll down there will be the option for Linux and in our case the option for the windows is valid for us right so this is the option for Windows and you can see the include path is right now its workspace route so here what we need to add is we need to add the include path for the iostream or all the c++ include paths right so how we can do it just open your mingw once again so mingw folder where you have installed it and then here go to lib and then go to GCC and then go to Minji W 32 and then whatever version you have installed and then here you will see the library for the c++ right so I will just copy up to this part and then I will just write the comma here under windows so I'm working in the windows so under browse and then path I will just give a comma here and then press ENTER and then in double quotes so I will just paste this path here let me maximize this Visual Studio code so we will see it better now in here it will show some error because windows path we have to give like double backslashes so we just need to add the double backslash is everywhere you have this backslash here okay so double backslashes and now we need to include the part for the c++ so inside this six point three point zero there is an include directory and inside the include bar directory you have this C++ directory where all the include files for C++ is there right so you just need to add include backslash C++ also so here just add this also backslash include and then backslash c plus plus this part you need to include I will add this path in the description also so you can directly copy and paste it in your C CBP property JSON file so once you have included this C CPP properties JSON file you can close it by the way if you don't know how to create this CCP CPP file from this squiggly line you can just press ctrl shift P and here you just need to search for C backslash CPP added configuration and then it will open the same file now you are not still ready to compile your C Plus was program because you need to create two more files one is task dot Jason and another is launch dot chase and for launching your debugger so let's create task dot JSON file first of all so just press ctrl shift P once again and here search for tasks and then choose this option which says configure tasks ok so choose the third option which says configure task and then you just need to create the task dot JSON file so this option will appear here you just need to click on this option which says create tasks or JSON file from template so once you click this option you will see some default option you just need to click others for C++ so you just need to click this option which says other and it's going to create the task dot JSON file and here you will see the basic configuration for task first is for labeling your tasks second is the type of command you want to give third is the command itself so in our case we are going to give this command which is G plus plus and even you can add the complete command for example G for debugging options and then your file name which is main dot CPP in my case right so you can give this kind of command or otherwise you have the option to give the args so you just need to give double quotes here and just write args and then inside this square bracket you can add your options for for example first option is G for the debugging option and second is the file name so main dot CPP right now there is one more thing you need to do here is you need to add which kind of task is it so it's a build task so we will add one more option here which is a group option so just write group or just write G and you will see the intellisense group here so click on this and it's going to add this here automatically so kind is built for us so because it's a build option for us so kind is build and is default true so everything is good for us so just save your task tour JSON file and now you can just press control shift B to build your program so just press control shift B and then it's going to start the task force you can see it's executing task which is g plus plus minus G main dot cpp right and you will see a here your output file is also created which is a dot exe if you don't give the option oh it's going to just create this default executable file which is a dot exe now how to run this a dot exe so what you can do here is you can just open a new terminal here so you can just click on this plus button which is going to open the new terminal you can see PowerShell is open or your default terminal will be open and then you just need to run a dot exe file ok so it's going to open inside your default folder inside your project folder so you don't need to change the directory you just need to run this a dot exe command here and then press Enter which is just going to print hello world here so we have successfully built and run on our code here right now let's see how we can debug our C++ code so for debugging but what we need to do is we need to go on this debugging option so just click on this debug option which is this button and then once you are inside this debugging option you just need to click on this green button which says start debugging so just click on this button and now it's going to just ask us which type of debugging we want to do so we want to do the C++ gdb debugging because we are working with mingw which is gdb so just click on this option which says C++ gdb for /ll DB okay so I'm going to click on this option which is going to create a launch dot JSON file inside your vs code directory which is created ok so now there are three files which we have created one is C C++ property of JSON file second is talks dot JSON file and for debugging you just need to create this with one which is launch dot JSON file now in here we just need to give the debugging path which is the path to our mingw gdb exe file so I'm once again going to go to the folder Explorer and then open the mingw directory and inside the mingw directory I'm going to just click on bin directory and when you scroll down a little you will be able to find this gdb option here right which is the one we want ok so just copy this path and then up to bin just copy this part up to bin and then just paste it here in front of my debugger path ok and then don't forget to add this extra backslash here and once again just add extra backslash and then write gdb dot exe ok which is the debugger for us now there is one more thing we can do here is we can add the prelaunch tasks here so I'm going to go here and I'm going to just give the double quotes here and then just search for prelaunch tasks which is going to build our code first and then start the debugging right and this is important for us so just write the name of the task which you have created which is inside your task dot Jason so inside the chest drop this on the able of this task is echo okay so I'm going to just copy this label whatever label you have defined here you just need to copy this label and then you just need to add it in front of prelaunch tasks okay so it's going to run this build task first of all and then it's going to start the debugging and one more thing you need to do here is you just need to call your exe file whatever Exe file you want to debug you just need to give the path to that exe file so you just need to add dollar and then in curly brackets so workspace folder backslash whatever is the exe name in your case so in my case the exe file name is a dot exe so I'm just adding this one otherwise whatever is your exe file name you just need to give the path to that okay so let's start the debugging once again and I'm going to just press on this button which is going to first of all execute the tasks you can see executing tasks g plus plus minus G main dot cpp and once this build is complete is going to launch our program and you can see our window was open and closed immediately once this debugging has been started right because what we have done is we haven't added any breakpoint here so the debugging started and then closed it again okay and for just pausing this window you can also add on windows specially you can just write system inside the brackets Ujjain can just write pause and then you can just start debugging once again just click on this debugging button and now you can see the execution has been stopped on this breakpoint we have set here so when you want to go on the next line you can just just click on this option which says step over he's going to step over this line and you will be able to see in the terminal also this hollow world print and then to close the debugging you just need to click stop button here okay let's say I will add some integers here so in X is equal to 10 and then in Y is equal to 20 here okay and I'm going to add the breakpoint on these two variables once again and let's start the debugging again so I'm going to click on this button which is going to start the debugging which is going to first build our program and then it's going to start the debugging so first of all it stops on this breakpoint and you can see the labels are also you know assigned here so first of all there is some garbage value assigned to X and y because there is nothing assigned here and when we step over you can see the value of x change to 10 and when we step over the value of Y also changed to 20 which we have assigned here okay so this is how you can do the debugging for the C++ on your Visual Studio code editor so I hope you've enjoyed this video please rate comment subscribe and bye for now