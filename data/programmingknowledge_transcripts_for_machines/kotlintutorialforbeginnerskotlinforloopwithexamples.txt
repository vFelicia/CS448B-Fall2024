in this video we are going to study about the loops in kotlin so before studying the loops the first question that should arise is why are the loops used or why should we use the loop so when i have to print the numbers from 1 to 10 or i have to print a variable that is i and increase the variable after each print statement so what i can do is i can write a variable that is equals to 1 okay and then i can write a print statement to print i and then i can increase the i okay and i can repeat the same block of code again and again to execute the statement okay so if i said if i said i have to print all the natural numbers from 1 to 10 so firstly i have to repeat the particular block of code again and again and i cannot know where to stop or i have to pers manually count the number of iterations so uh like i have here you written the code and it prints all the natural numbers from one to five so this is a redundant quote and uh it requires a lot a lot of um a lot of like i have to count the the number of iterations and it is a redundant code so what could we do to make it less redundant and uh short code and organized code so we can use loops instead of repeating the same block of code again and again so what is a loop a loop is something repeating itself okay so when you listen to song you put them on loop so what it does it it repeats the song after the song is completed okay so there are three types of looping loops in kotlin for loop while loop and do while loop so let's say we want to print all the natural numbers from 1 to 10 okay so firstly we can see what is the syntax for for loop so the syntax is 4 and here is the condition and then the loop starts okay and then the code ends and between this there is a particular code sequence that got that gets repeated in each iteration okay so we use the keyword for and then we introduced some parameters that uh checks the the condition and increase the iterator and initialize the iterator okay and then at the end we close the curly braces and the code inside the curly braces gets repeated at each iteration okay so let's say we want to print all the natural numbers from 1 to 10 ok so we know that loop repeats a particular code sequence now we also need something to count from 1 to 10 hence a counter is needed that must be incremented incremented at each iteration okay so uh as we have already discussed the syntax for for loop let's go ahead and make a code to print all the natural numbers from 1 to 10 okay so i'll write for now remember we have learned about the ins in in statement in kotlin so i will introduce the iterator here okay so for the iterator must like if it not if it is not initialized outside the for loop it is okay so i'll i'll initialize i here and use the in operator okay so i in now 1 to 10 okay as i mentioned if i have to for particular condition one to ten i use the inoperator and the two dots okay so for i in one to ten okay and then i have to just go ahead and print i okay so when i run this function or on this particular block of code i can see that it prints all the natural numbers from one to ten okay so uh there are some points that i would like to point out like for in the for loop there is no need to initialize the iterator as i already mentioned and there is no need to increase the operator in for loop okay so you can see that i haven't have not write the i plus plus here okay because when i write i plus plus here we can show we can see that there is a error and it shows that well cannot be reassigned so whenever i enter in the for loop i vary value i is created and it is assigned the particular number that that the loop is given going on okay so it is a value not a variable in for loop the i although its value changes after each iteration but it is a value not a variable okay so the default increment of an iterator is ah one so as you uh might have seen that iterator after each iteration increase by one not by two naught by three so whatever i have to print all the odd numbers in 1 to 20 so then i have to iterate i in 1 to 20 and i have to also increase the iterator by 2 so for increasing the iterator by 2 we need to use the step function so i'll just write here step 2 now what the step function does is it increases the iterator by 2 so when i go ahead and run this function we can see that after each iteration the iterator increases by 2 and hence prints all the odd numbers from 1 to 20. okay now whatever i have to print all the natural numbers from 10 to 1 not from 1 to 10 so you might think that i can write here 10.1 okay so when i go ahead and run this function you can see that it just exits it just exits with code 0 okay why why why it happens because at the particular point when it enters the for loop it is assigned the it is checked that if it is in ten or ten to one okay it must be greater than or equal to 10 and less than or equal to 1 so there is no integer that is greater than equal to 10 or less than equal to 1 okay and i would like to mention one thing also whenever i define anything like this okay i just mentioned it 11. so whenever i defined anything like this the by default um value assigned to i is the first value here okay so in this case the by default value assigned to i is 10. now uh getting back to our original question that what if i have to print all the statements from 10 tool so i will use the down 2 function so for out i in instead of the two dots i'll use down two and one so in this we can see that the i should be less than equals to 10 and greater than equals to 1 so now when i go ahead and print this we can see that it prints all the natural numbers from 10 to 1 so that is about the down to function okay so in the next video we will see about the wide and the dual loops in cotton this is all for this video thank you