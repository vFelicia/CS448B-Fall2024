so basically we had uh first i'll start my server it is server and then let's wait for the server to get started so yes server is running let's fix this page so basically we had a photo here in last tutorial i took a small task to how to align this incentive so basically so since you can see that this is a flex box so align flex box to center is justify content you have basically a few types of justify content that is center flex and the end would move to move this end start will keep it as starting then basically there are a few things space around space between so space evenly so you can opt for any so basically the best one you can choose for is center okay and so basically you have to center and then you can see that this is in center so let's click on inspect and let's check yeah it's even it's here it's center so this is a flex class so let's we will give this a style is equal to justify content center so let's refresh this now we have perfectly moved to this so this was a good good thing to know about and now let's move to let's create a model so basically uh this is our like project directory so i have opened this in terminal so that it gives you clear view so i could do the same thing in the vs code terminal but that's why i've opened a terminal here to like to have a good overview so now we are going to perform something let's create rails generate generate model article okay or let's keep it as post there is generate a model so post is something you uh like uh like you define something of post which has a like a tight bill so that is a string and it has a text so that is a uh you can say like this is title string and you have a description description so basically that is of text data type so let's run this and now you can see that it has created a model and now we can do rails db so basically model is like creating a table in your database now we want to uh permanently move to this uh table so we want this to like migrate this into database so we had created a model which defines that we are going to create something with a title string and description text now let's create rails db migrate and then you can see that this should be created permanently in the database so here it says this has been created created table post and the descriptions we have already mentioned what we are going to create so okay before you perform a few operations with the like uh this table or model which i say so basically so you can interact with this inside rails console okay so please drive rails console and then you have interactive rails shell to work with then you can interact with this uh this inside the rails console so let's type post but it will it shall throw an error because it says for call post.connection to establish a connection okay so that's why i did this post dot connection so this so we have made a connection so it like it throws out a good amount of things so we shall ignore this okay and okay i have missed all of my cursor yes so we can type uh clear this you can type uh you can type control l control l control plus l so this would clear out okay so okay control plus l and now this will clear out and now you have now let's take a post make post a is equal to post okay so basically it defines uh a so id is an integer title is string description of the text created act as a date time updated at a date time okay so let's skip a dot title is equal to hello okay okay undefined okay okay okay so uh i'll tell you what's the issue with this uh see so basically uh we need to call the constructor so you can for a second ignore this so we will call a is equal to post dot new okay now you see we get a post id is nil title is name description is created additional update addresses but that time what i was doing i was doing a is equal to post which eventually meant a is equal to post which is a is equal to both so which is by default meant this that post and which was returning this okay so this is the class first is a class now a which i have created is going to post.new is is the object of that class or you can say the instance of that class now post is a class and a a is equal to post.new is the object of that class because we have called the new as a constructor so let's define a and let's do a dot title is equal to hello and a dot description is equal to word okay now we type a so we have title is equal to hello and description is good world now to save this inside our database we should call a dot save so it says which means it has been saved in our database and let's call a against it says id one title is hello world description is world and this is the created ad and updated things which is throwing and one thing you can see it also gives out the sql query insert into post and title description created update values should be this is this and this so this is how it creates that into database let's create another one uh let's first call post as a class so it's not necessary to call it everything but i'm showing you again now let's call b is equal to post dot new let's call b so this is a post this has been either we can say ruby okay and b dot description this is equal to rails simple let's call b again and it says this and let's call b dot save then it shall clear save this inside your database okay now we have two posts one is this and another this so to access all the posts you could call post.all simply okay so it gives all the posts you have so this is so and one with the id one and another is with the id here you can see this is the id2 and this is id one so both the posts we get uh then we can call post dot find find is like i'll show you post dot find one let's find the post with the id one it so it finds us for us for that now we can see in the similar way called post dot find two this you could also call host dot vr okay there's some issue with my command line okay post dot where id is equal to one so where and what's the difference between the find and post uh find and where so this is this is another way of doing the same thing but find has a limit one okay so so we have learned about like how to create now let's move to how to like let's do something uh something new uh let's make post dot find post dot find so let's make first now let's change this title to title is equal to ruby uh ruby new okay so we have b and that's b dot description is equal to rails new and let's see so we do b dot save so this is our update operation okay so say update post see update both set title is the description this and these are the value uh we could also do post dot find to and destroy so basically this forms a delete operation so we have learned how to like perform all the four thread operations that discrete update and delete on the rails console so now we are going to implement this same thing with the ui so thank you everyone for watching this i'll catch you in the next tutorial thank you