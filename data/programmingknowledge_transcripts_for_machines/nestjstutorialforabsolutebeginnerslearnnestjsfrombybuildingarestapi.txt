hey guys welcome back in this video we will talk about nest js so nest js framework is increasingly becoming popular among developers who want to build scalable serverside applications so those of you who don't know what nest js is you can go to this website which is nest js.com and according to this website ness js is a progressive node.js framework for building efficient reliable and scalable server side applications so nest js fully supports typescript and in the background it uses node.js framework and express so what we are going to do is we are going to learn how we can use nest js to build our rest application although nest js supports many different protocols but for start we are going to build a rest application using nest js now nest js have a very extensive and very good documentation so if you are thinking about starting nest chess you can click on the documentation tab and you will be able to see tons of good documentation so under the documentation you can see what nest js can do and what are the technologies it supports so you can see under the techniques it can support authentication database configuration validation caching so many things it can support also it can support graphql websockets micro services like redis mqtt rabbit and q kafka also it has the support for open api swagger ui and many other good stuff also if you can want to see how popular nest js is you can go to the github page for nest js and you can see as of today it has more than 31 000 stars so it's becoming really popular so let's talk about the prerequisites of learning nest js so knowledge of typescript and javascript will be very important for learning nest js if you have the experience of angular it will be a plus because it uses techniques which are already used in angular for example now because we are going to be building a restful api it's good to have a rest uh client such as postmen uh in order to test your arrest application also make sure you have the latest version of node.js installed on your operating system so once you have all these uh tools we are good to go and let's get started so what we are going to do we are going to just open our terminal and we are going to install some nest js packages so what i did is i created a directory so i am going to just go in that directory which is called work so the first step is to install nest js cli globally in order to create our nest js project with this cli tool so we are going to just give this command which is npmi hyphen g and then just write at the rate nest js forward slash cli and in my case because i want to install this globally i i need the sudo privileges also in your case it might not be necessary so i will just press enter and give my max password and now this cli is installed on my operating system so once this nest cli is installed we are ready to create our first project so in order to create a new nest project what you need to do is you just need to give this command nest because we have installed nest jscli uh globally this nest command is going to work and then write new and the name of your project so we are going to create a project called car manager so i'm going to give this name you can give any name for your nest js project and then press enter and it's going to create a new sjs project for you now first step here it's going to ask you which package manager you want to use npm or yarn so i'm going to just use npm for this so i'm going to just press enter which is going to create our project using this npm package manager so now you can see our nest js project is created and you can see it gives us hint also that we can cd into this directory and then we can just run our project using npm run start so what we are going to do i'm going to just do ls you can see this project is created inside this directory so i'm going to go inside this directory and then i'm going to open this project using visual studio code you can open this project with any other editor or ide of your choice i'm going to use visual studio code here so i'm going to just open this project using visual studio code and let me open the terminal also inside visual studio code now let's discuss about the nest js project structure so you will be able to see this package dot json where under script you will be able to see uh all these commands so we can start our web application using npm start which is going to essentially run nest start in order to start our application and you can see we can test our application using npm test under the hood it's going to use just for running our test you can also see how you can run different commands for running different kind of tests and coverages and running your application in different environment for example development or debug or production mode you can also run lint for linting your application files now let's talk about the source folder where our code is there so we are going to start with the main dot ts which is the main entry point of your nest js application so here you can see it's very simple it's going to just import this nest factory from the core nets js package and you just need to pass your app module which is there inside this app.module.ts file we are going to just see what's there in a bit but you just need to import this uh app module and you just need to pass this app module as as parameter in the create method and then you can just start your application on the port for example by default it's going to start on the port 3000 but you can change this port also so app.listen and it listens on the port 3000 by default so now we are going to go inside the module.ts folder so app.module.ts which we have imported inside our main.ts so this app.module.ts file is going to contain the implementation of application root module now there are three important building blocks of a nest js application and these are called controllers providers and modules so three building blocks controllers providers and modules and you will be able to see one file for each component you will have the controller.ts file you will have the module.ts file and you will have the service.ts file so services are also called providers in nest js module.ts is going to contain the implementation of your application's root module and then app.controller.ts is going to contain the implementation of a basic nesjs controller with just one route so by default it's going to just uh listen on this get route and it's going to just uh return you hello world so controllers are used to just define your end points so it will be a main interface for your application so you can define endpoints into the controllers now the app.service app.service.ts file is going to contain the implementation for your endpoint for example so for example some rest request comes into your application it's going to just go here and then this controller in this controller you can see there is an instance of app service and whatever you want to return as a response for that rest request you can just provide the implementation of your response inside the service so let's go inside the service here we just define the implementation about your service methods right now also you will be able to see for example when you go to the app.modules.ts this kind of annotation here so these are called the decorators so if you are familiar with the angular you might have seen these kind of decorator decorators right so because we are in the module uh decorator here we just provided at the raid module and then inside the module you can provide the imports controllers and providers so provider essentially are the services right so we have imported the app.service and app.controller here and here we provide the mapping of all the controllers you have inside your application and all the providers you have in your application and sometimes you need to import different kind of uh files in your nest js and those imports we are going to do here so we are going to see uh more about imports in uh the later part of our uh application right so uh as i said you have services modules and controllers also you have the app.controller.spec.ts file so this will be uh your unit test file so here you can write your unit tests okay and you can also define for example service dot spec dot ts file for testing your services and for your integration test you have this test folder so here you can run your integration test and in next js it is called endtoend test okay so here you can test your whole application using just and under the hood it uses super test for your integration tests so now let's run our application you just need to write an npm start here which is going to run our application and once you see this message which says nest application successfully started you can go to your browser and then just write localhost uh colon 3000 it's and it's going to return hello world right you might be wondering uh this is our typescript project so we haven't transpiled our typescript into the javascript code and how it's running uh directly using npm start in the background nest js is going to take care of transpiling and then running your application directly using npm start if you want to just explicitly build your project you can give this command npm run build it's going to transpile your tribescript files into javascript but if you directly use npm start also it's going to transpile directly your files and it's going to run your project for example i'm going to just stop this application i'm going to go to the service dot ts file and here we have the get hello world which is returning this hello world to us i'm going to just add hello world from me and then i'm going to just restart our application it's going to directly transpile our typescript code and it's going to start our application on the port 3000 so let's refresh this page now it says hello world from me so this is how you can create your first nest js application till now we have seen how we can create our first nest js project and we have seen a broad overview of our nest js project now we want to add some end points to our rest api so what my plan is let me show you uh the api uh documentation which i want to implement so our api name will be car manager api which will be able to add a car or read all the car information or read full data of an individual car or it's going to delete a car or it's going to update a single car and these are the routes or endpoints which i have defined so we are going to define a get cars route and then we are going to define post car get car by id put car by id and delete car by id so this is what we are going to do and by the way you can also create this kind of swagger documentation using your nest js framework but this is not the part of this demonstration i just created this swagger documentation separately for this demonstration but i'm not going to show you how you can create this using nest js so let's get started so because we have already downloaded the nest js cli we are going to use the nest jscli to create our module service and controller so uh the good thing about nest cli is we can create our module or service or controller or it can do many other things automatically so you don't need to write your modules or classes or typescript files uh from the scratch right so what we are going to do is we are going to generate a module a controller and the service for the car so as you can see these were the files which are automatically generated for us we are going to remove all these files once we have generated our car module controller and service and we are going to use that because we don't want to just send hello world for example and this route is not even required in our api right so process of creating the module controller and service is really simple using nest cli you just need to write nest and then you just need to give this flag g or you can just write generate here in the short form you can just write g and then you write what you want to create right so for example first of all we are going to create a module so i'm going to just write module here and then give the name of your module so we are going to create a car module so i'm going to just write car here okay so nest generate and the name of the component you want to generate and then the actual component name which you want to generate just press enter which is going to create a new module for you so when nest js create a module or controller or a service it's going to create a folder with the same name which you have given here so we have created the car module and inside this uh we have this car.module.ts file right now as i already mentioned uh this at the rate module is the decorator if you want to create this car module from the scratch you can simply create this without using this uh cli also you just need to add this module decorator on top of your module class name and this module is present in the nest js common package right so just write nest g controller and the name of your controller and then press enter and it's going to create a new controller for you so here you can see this controller is created for us and you can see for the controller you need to add this decorator controller and then you need to add the route which you want to add to your controller so we want this subroute which is car as you can see all our our route have car car car car we are going to create the get car route also we are not going to create extra cars module or controller uh i decided that we are going to just create a car uh route here not cars right so keep this in mind uh and now we are going to create a new service for our car so here you just need to write service so nest g service car and it's going to create a new car service for you okay so we have generated the module controller and the service ts files also two extra files are created for the unit test car.service.spec.ts which is the unit test file for the service dot ts file and you also have this card.controller.spec.ts this is the unit test file for your car.controller.ts file right so now you will also observe that in your main modules when you go to the main module you will see here that under the imports element there is a new mapping which is added here which is cars module and this code is also auto generated right so if you are creating your controller or module or your service manually without this command line you just need to add your module which you have created and you just need to import it under your main app.module.ts file right and now what i'm going to do is i'm going to remove the controller and provider which is the main app controller and main app service provider because we don't want this we just want the car module car controller and car service right so i can just remove this controller from here and this provider from here and remove these imports now let's go to the car dot t so i'm going to go to the car.module.ts here and you will see that inside this module we have imported the car service and the car controller okay so these files are also automatically generated and we have added the decorator here as i mentioned earlier and then under controller we are going to add all the controllers in our case we only have one controller which is car controller and under provider we are going to add all the uh services right so we only have car service right now and we are going to just export this module and this is the same module which we are importing in the app.module.ts file which is this one right also we don't need this main app.service file because we have removed uh this dependency so i can just right click and delete this service file also we can delete this controller also right so i'm going to right click and delete the controller for the main app and then app.controller.spec.ts file also i'm going to remove right so now we only have the car controller car module and car service and unit test files for that and we have this app.module.ts where we are just importing our car module and in the main.ts we are just importing our main module and we are just starting our application on the port 3000. so now what i'm going to do is i'm going to just clear this terminal and i'm going to just transpile my typescript file to see if everything is working correctly or not so i'm going to just write npm run build here and once all the files are built successfully and if i don't see any error we can move forward so as you can see there is no error in transpilation so we can move forward so what we are going to do is we are going to start from the controller here so let's create uh some of the end points in this controller so the first thing which we need to add to the controller is the service so we are going to inject the service which is the car service into our car controller so i'm going to just create a constructor here and inside this constructor we are going to just inject our service which is the car service so first let me just import the car service in car controller so i'm going to just write import and then i'm going to just import the card service which we have already generated right so just write dot forward slash and then car dot service right so once we have imported this car service you just need to add the car service name also here and because we have provided the same name here car service right so we are importing this inside our controller and now we are going to just inject this service instance in the constructor and now we are going to just inject this car service instance into our controller constructor right so i'm going to just name it as car service and also i'm going to remove this space from here so once again i'm going to go to my card.service.ts file and you can see in the service we have included this at the rate injectable decorator so whenever you create a car a service or any service manually you need to add this at the rate injectable decorator on top of your service right and that makes your service injectable and that's how nest js is going to recognize that this service is injectable so we can inject this service inside the constructor of the controller right now we are going to create some of the endpoint methods for our car controller so the first method will be get cars let's say so i'm going to just make this method a sync method and let's say that method name will be get cards and in the body of this method we are going to just call our service instance for now so card service this dot car service and we are going to create different methods uh later in the car service also and we are going to name this method same which will be car get cars so this method we are going to create in a moment in the service and also because this is an async await method so you can uh just write return here if you uh are not returning anything then you can also just write return without our bait here i'm sure you know uh this concept from before also right and then we are going to provide a new decorator and this decorator name will be get so at the rate get here you just need to add get here and you just need to import get uh from your nest just common package also so you can see get is here and we are adding this get decorator here and you just need to add these parentheses here and inside these parentheses you can provide any uh sub route so if you want to get the car by id you can just write id here or whatever routes you want to add here right so for now we just want to uh add the get method so when you just add this empty a get method this means that uh you are just calling the get method on this car route right so let's add this get cars in your service file also so i'm going to go to car.service.ts file and here i'm going to add the public method which will be a sync await method and i'm going to name it as get cards and in the body what i want to do is i want to return something for now i'm going to return empty object from here now we also need uh some kind of uh mock data for the cards so i'm going to create a new file here and i'm going to name this file as cars dot mock dot ts file okay so here in this mock file what i want to do is i want to return some kind of dummy car object array right so i'm going to just export const cars is equal to then some kind of dummy data which i already have so i want to add one object to my array which will be already available so this array will be a mock array which is going to return this one object which is already present here and the other object we are going to uh add dynamically to our array when some request comes right so what we have done till now we have added this get cars into our service and into our controller right and we are just calling or returning the get cars method from the car service inside your controller also inside this get cars method so inside the cars dot service we are going to import our mock also so let's import our mock which we have created which have the name cars here and we are going to import it from the mock file which we have created and now we can use this cars object which is our mock data inside our car service so i'm going to just write private and then cars here which will be equal to this cars which and then we can return this uh dot cars uh from the get cars method right so now we have uh just uh finished first endpoint and we can test our endpoint by just running npm start command once your application is running i'm going to just open my postman and then i will just write http colon forward slash localhost 1000 which is the port on which our application is running and then i'm going to just give this endpoint which is car here so essentially we are just sending get car uh request to our application let's uh send this data and you can see it sends us this kind of data which is sent using this get cars method which is there inside your service and we are just returning the mock which we have just created which is uh this one right and first of all this request reaches to your controller and it sees that your base route is car here and here we haven't added any sub route so that means we are just responding to the car get car request using this get cars method in this video we are going to add other end points like delete car by id get car by id and put car by id and also we are going to create a post method so what i'm going to do is i'm going to go to my car.service.ts file and here i'm going to create some methods so these are the method which i'm going to implement so i'm going to implement postcard for the post method i'm going to create a method called get car by id so if the user have the id of a particular car object then he will be able to get that data related to that id user will be able to delete a single car using the id of the car and also user will be able to put some data put means update the data if he have the id of the car element okay so there is no implementation there so i have added all these method inside the dot service dot ts file now uh i think for now the async is kind of overkill for now because we are not returning any uh promises uh here so i'm going to just remove this async from here so it's going to look like this and when we will require a sync await then we will add those async await methods right so for the post method what we want to do uh when the user sends some car related data for example he sends the brand color and the model and even the id then we just want to add this data to our cache which we have here which is cards right so in the post method what i want to do is i want to add cars element to my already existing cars array so this is by default our cars array object and i want to add some element like this uh into my cards array here right later maybe we will add mongodb functionality but for now uh i want to keep everything simple so what i'm going to do here is i'm going to just push the car object which is this one we are also going to define the data type of this car object in a few minutes but what here we can do we can just write this dot cars and if you uh already are familiar with the arrays in javascript or typescript you can use a push method and using this you can add data into your array okay and once you have pushed this data you can also return this data now for the get car by id method what we require is some kind of id so as you have seen here in this car object i have defined the id brand color and model right so let's say id is a number instead of this kind of string so it will be easier and let's start with the default id1 and we are going to add more elements to our are using this id and we'll be able to get the elements by id also right so now we know that id will be a number so i'm going to just define the data type here which will be our number and then we want to get the car by id so we have to first of all find the car by id so i'm going to just define const variable which is called car and then what we are going to do is we are going to find the car inside our array which we have here which is cars array so i'm going to just write this dot cars dot find and what we want to find we want to find the id right so i'm going to just write car and then we want to find the id when we call the find the method over an array we are going to get each and every element using this car element and then we can call car dot id so i'm going to just write car dot id and if this car dot id will be equal to the id which we are going to pass then we know that it's our car now here i can see this red squiggly line which says replace car with uh parentheses car so the nest just already have this es lint uh installed and this uh linter is suggesting us to just enclose this car inside the brackets right so now once we get the car by id we are going to just return this car right so we can just uh write return car and then it will just return the car object you can see this like this now of course you can add uh different kind of error handling so for example if you don't find any car inside this car array you can throw some kind of error but that logic we are going to uh add a little bit later for example or let's add that logic right now so let's say if we don't find any car inside our cars array what we want to do we want to throw a new error so i'm going to just write through new and then error so now in nest js there are different kind of errors which are defined in the nest common package so we are going to add one such uh error class which is http error error for example or http extension it's called okay so we are going to add this http extension and we are going to throw this http extension and you can see when you hover over this http extension you can just send the error string and also the status number so because we are throwing this error for the not found so we can just add not found here and then the status code will be 404 if you are aware with the http status codes right now let's move to the delete by id method so here also this logic will be same because we want to just find the car by its id so this logic we can keep it as same and it's going to be a number so we can define the data type of the id also and the return value of this delete car by id first we need to delete this car object from our array right so i can just write this dot cars and then we can use the splice method for example so just call this splice method and we want to first of all know the index right so if you want to splice some index from a car array what you can do here is instead of using this find you can just use find index method which is going to give you the index if this id is found inside an array so instead of the object you will get an index so i'm going to just write index here instead of the car and if there is uh no index so if the index is equal to let's say 1 then we are going to throw an error in this case right and if the index is present there we are going to splice that index uh from our cars array okay and then we are going to simply return our cards okay so i'm going to just write this dot cars which will be the array after the deletion of the object if we find the id uh there now for the put car what i want to do is i want to let's say i want to delete a single element from the object which i found out right so let's say i have this uh object and let's say i just want to update the brand if i find this id using the id of this object okay i don't want to uh edit the whole object i just want to add it or update the single element from an array right so how i can do this so as i have shown you this kind of swagger documentation as i go inside the put car i will just send the id of the car and in the query parameters i'm going to pass the property name and property value right so i want to pass property name and property value so property name will be in our case for example a brand color or model and the property value will be for example bmw or gold or the model value here right so we will also learn how to use the properties right so what i want to do here is we want to of course get the id which will be a number and then i want to uh use the property name and property value so we want to pass here property name which will be a string and also the property value for example and for simplicity i'm going to make it like camel case so property value and property name this will also be the string so for this what we are going to do we are going to once again find our element by id so we can use this this code again for finding the element inside an array by id so we are going to find the index of the element and if the index is not found then we are going to throw uh the error otherwise we want to edit that value so how we can edit that value because we already have cars so what we can do this dot cars and we are going to edit the car for that index so i'm going to just add the square bracket and i'm going to get the value of the element at that index and then i'm going to add it the value so we can use once again this square bracket and this will be the property name and we want to just uh replace the value by the value of which we are providing in the query request right and then once this value is edited we can just return the cars array once again okay so we have added the business logic inside our service.ts file now we are going to go to the car.controller.ts file and here we are going to add the end points which we want to add so i'm going to add all these empty methods here let me just also remove the async from here and i'm going to just make it public method so now let me add all those decorators here first of all for the post car i'm going to add post decorator and you can see it's automatically added in my imports right so if you don't uh see this just add it into your import also for get car by id i will just simply use the get decorator for delete i'm going to use the delete decorator and for the put request i'm going to use the put decorator right so you can see all these uh decorators are automatically imported in my case using visual studio code ide but if they are not automatically added you need to add those imports right now we also need to add all these uh parentheses here so let's add all these parentheses and then let's first of all implement this post method so inside this post method we don't have any sub route we just want to add the cars in the body so there is a decorator called at the rate body using which we can access the body of the post request so just write uh body here and you can see this body is also added in my imports and then this body will be the car right now if you want to add the type for this car you want to add this kind of type which have id brand color and model right so you can either define a simple type using typescript or in nest js they have a concept of dtos dto stands for data transfer object and dto is an object that defines how data will be sent over the network so we can define a dto file for example so let's define this dto dot ts file so this file name can be car dot dto for example so i'm going to just write car dot dto dot ts and inside this car car.dto.ts what we want to define we want to define the type of the car so we can just write export class and class will be the car class or car dto and then inside the car class we can define readonly id we can also define the type of id which is number then we will define read only brand and the type will be the string so once we have this kind of dto we can import this uh dto class you can also say this will be a car dto so you know that this is the dto and not the normal class and let me fix all the linting errors so let's name it car d2 instead of car right so now let's import this car d2 inside our controller so let's add this import and then we can just use this car d2 as the type of our car okay and then we just need to simply call our service which is our car service and then we have the post car method which takes this uh car as a parameter so we just need to do that and we need to just uh return this value right so just write return here and we are good to go now as i can see here this body is giving me some kind of error and it says you need to add these parentheses so let me add those parentheses here in order to access the body correctly so this method is done now we need to move to the get car by id method so here we are going to add this route and we want to access the id right so it's similar to using express so whenever you want to access a parameter you can use colon and then the name of the parameter right so it will be like car colon id so let me show you this request real quick it will be like this car forward slash car forward slash a colon id and you can access the value of id using this controller so let me go back to my implementation and here to access the parameters you can use a decorator called param and you will see this decorator is also added in my imports and don't forget to add this parenthesis and how you can access the parameter so our parameter name will be id so you can just give this a quote and then we can access the parameter by its name which is id in our case and then the name of our variable will be id and let's say it will be a number right so it will be a number and we just need to simply return the value from our services so i'm going to just write return this dot card service dot get car by id and then we are going to just pass our id here right so once we have this get car by id method implemented we can move to the delete car by id method and we want to pass the similar kind of param here because we want to delete the car by id right so here also we want to access the parameter so once again we can use the same kind of arguments here and then we can just return the value of delete car by id method from the service right so car service dot delete car by id and we just need to pass our id to our method in the inside the service now we will move to the put method so also we will be passing the id as the parameter in our put method if you have seen this request body so we are going to pass the id and in the query we want to pass the parameter name or property name and property value right so this will be the parameter which is uh the id and now in order to access the query you need to add a decorator called query so how simple this is so you can just uh add the decorator query and then you can define your query parameters so let's say uh this will be the query variable name and now what we are going to do we are going to just return the value which is this dot service dot put car by id where we pass our id and we want to get the property name and property id right so i can just define const property name query dot uh the property name which we want to pass so let's say property name which we want to pass is a property underscore name from the query params so this will be the property uh value and let's extract this value from our query parameter which will be value right and we are going to pass this so this will be value and we are going to pass this as the second parameter and the third parameter of this method will be property value so now we have implemented all our methods and we just need to test them if they are actually working or not so let's test them one by one so i'm going to just write npm start so our api has started successfully so i'm going to go to my postman and here first of all i'm going to get the list of all the cars which is going to return us this kind of object which is the mock object which we have already defined now let's uh do the post requests so let me just add one more request here and this will be a post request and the route will be car in the body what we want to pass we want to pass the json value right so we are going to pass the json value and in the body i want to pass this uh kind of object so let's uh pass this kind of object from here and let's change the value so let's say id will be 2 the brand will be vw the color will be red and the model will be let's say polo okay and let's uh do this request but this is the post request right so we just need to change the uh method here not here but we need to change the method here in our second tab so the body will be this body and let's uh do this request so send and it says 201 created that's okay and once we have posted our second element we can just get all the list of all the cars using get cars so i'm going to just send once again cars and we are going to see that now we have two elements inside our array first one was already there and this one we have uh added right now we are going to test our put method first of all so i'm going to just uh use the similar url uh but we also want to pass the id of the card so let's say i want to add it the id 2 so you see here it's id2 or let's say we just want to change the color of this vw car okay so i will just give the id which is a 2 here and in the parameter value let me just change the method to put and we want to just add the query which will be the parameter value or property value so property underscore name will be the color and the property value will be so property value will be from red we want to change it to let's say blue right so right now we have the vw which is red in color and we want to change this value to uh blue right so this will be the whole query with the query parameters and let's uh do this uh query or let's send this and let's send this request so i'm going to send this request and it says 404 so why this is happening we need to check it so i think the problem in our code is because we are not returning our result using promises that's why it's giving us this problem so i'm going to return the values from get car by id delete car by id and put car by id using the promises so let's do that so i'm going to just return the promise from the get car by id and the type to start with we can use any here and later you can add more specific type here and then what i'm going to do is first of all i will declare a const here and i want to check whether or the id is a number or not or and if it's not a number then i'm going to just convert it so cost car id is equal to number id and now we are going to pass this car id here right and then let's return the promise so return new promise and then we are going to add the resolve a value here and then using the arrow function we are going to return the code which we have written here so let's do that and then we can just use resolved to resolve this car object okay you can also add a return here and colon here okay so let's do the same for our delete car by id and put carbide id so let me add these return types here and here and also i'm going to add this code which will be same for both of them and then i'm going to just close this here and bracket here and also let's and also let's fix all these uh indentation problems and this car id now will come here and this car id in delete carbide will come here and also we need to resolve it right so we need to send the result using the resolve so let's do this here and also inside the putcar id function okay so now because our functions are returning promises inside our controller we can use async await also right so i'm going to go to the car.controller.ts file and here i can just write a sync also i can add this async here and i can add this async here okay if you want to be more uh specific you can also uh create a constant here and then write await and then return your value for example i can just write const result is equal to await and then i can return this value from here which will also be fine so i will just leave it like this because i think it's also going to work let's see and check if it works or not so i think uh that's all we want to do here i will just restart my app once again and i will go to uh my postman request so get cars is working let's post new car with id2 and now we can see we have two uh cars here and we want to add it this car which have the id 2 and we want to change the color to blue till now it's red right so let's do this and now you can see it's going to return this result and the color of this car is changed to the blue color also if you want what you can do because right now it's returning this service dot ts file we are just returning all the cards so instead of returning all the cars you can simply return the car property which you have changed so like this okay so let's run the app once again and let's see if it works so i will just go to my postman again i will just add this car by id once again and then when i send this request it's all only going to return us the element or the object which it has changed and we have changed specifically this value okay so this is working uh we also need to check uh if the get car by id and delete car by id is working or not so let's let's delete uh this car which have the id 2 so i'm going to just write delete and i think we don't need to um add any other uh parameters here right let's do the get request first and then we can do the delete so i'm going to just send this request and it's giving us the right response here you can also use one id one we have id one and two right so it's going to give us this value by id also if i want to delete the value so i will just use the same request let's say i want to delete the car by id 2 and i will use the method delete here and then i will just send this request and it gives us this result which is which means that it has deleted the element with the id2 and now we only have one uh car element inside our array so when you uh give the get all cars request it's going to only return us one car because the other car we have already deleted you can also change this response to something else you can do something like this that when the car is deleted you just send no response and you can also change the status codes here also so our basic api code is working now now in this video we are going to discuss about how we can add the mongodb support to our nest js api so we are going to start with the installation of the required packages so i'm going to just write npm i hyphen hyphen save and then you need to add these two packages which is nest js forward slash mongoose and the mongoose package itself so mongoose okay and then press enter now once you are done with the installation of the packages we are going to go to the main app.module.ts so this is the app.module.ts and here we are going to first of all import some packages from the nest mongoose package and which module we want here we want to import the mongoose module from the nest js mongoose package okay and once you have this you can use this mongoose module in order to connect to your mongodb database so here you can see under modules we have imported already our car module which we have created previously and now we can also add the support for the mongoose module so just copy this mongoose module dot in mongoose module you have a few methods so we are going to use this method which is called for root which is going to take your mongodb uri as an argument so if you are familiar with mongoose or mongodb we can connect to our database using this uri so here as the uri i'm going to just write mongodb and then colon forward slash forward slash local host because i will be using my uh mongodb which is running on my local host and then the name of your database so let's name our database as a car manager okay also you can add some of the options which mongoose takes at the time of the connection but we are going to add these later if we require them okay now what i uh i'm using is i'm using the docker instance of mongodb you can install mongodb locally or if you are running a mongodb on a server uh you can provide the uri of that server also right so for now i will be using the docker to use on my mac machine and the command for this is docker run hyphen p this is the port mapping of on which we are going to listen using the local host and this will be the location where we are going to save our data in our local machine using the docker right so let's run this you can also write the hyphen d here to run this mongodb container in the detached mode but i will run it as a separate instance so you can see it's running and now i'm going to open a new terminal and i will just write docker ps here and you can see this uh mongodb instance is already running so i'm going to just write docker exact hyphen i t and the name of the container or container id also you can give and then space bash so using this command we are just opening the bash terminal inside the container right now i can just give the command in order to connect to my mongodb and here i can just say show dbs and it's going to show me the list of all the databases so right now it has these three databases which are created by default and when we are going to run our app it's going to create this uh database also okay so now we have our database connection now we are going to create the schema for our mongodb so for that i can create a separate file inside this car directory or i will create a folder let's say and i will name it as schemas and inside the schemas folder i will add all my schemas so the first schema will be car dot schema.ts for example and here i will first of all import the mongoose package so import asterix as mongoose from mongoose right so because we want to create the db uh schema using mongoose we will import this package and then we are going to just create the schema so i'm going to just write export then const and then the name of my schema will be let's say car and we are going to create a new schema so i'm going to just write new mongoose dot schema and then we are going to add our schema inside these parentheses so i'm going to just add these curly brackets and then we can add our schema here so what we have in our schema so in our schema we have we can see the dto so we are going to use the same attributes inside our schema so we can just copy and paste them here and for now i'm going to remove this read only attribute from here and because it's a json object we need to replace this semicolon by the commas right we can also fix all the auto fixable problems and this will be capital number because we are creating the uh db schema using mongoose right so you will use these uh data types now i can also add the car interface which i will use for the mongodb model or mongoose model so let's uh create the interfaces folder inside our car directory so i'm going to just write interfaces and then press enter which is going to just create this interfaces folder and inside the interfaces folder i'm going to just write car dot interface dot ts here i'm going to import the documents from the mongoose package so let's add a mongoose package and then we will add this document from mongoose and then i'm going to create an interface called icar for example so let's name it as i car which will extend so extends from document and here we can add the interface types which are id brand color and model same as our dto okay so once we have our interface and schema we can go to our servicescar.services.ts file and we are not going to uh use this logic anymore we will add the mongodb logic but first of all we need to add our schema and our interface right so let's add those things so i'm going to just import so first of all i'm going to import the model from the mongoose package and then i'm going to import the nest js mongoose package right so let me just add this next js mongoose package and from here i'm going to import the inject model okay and the next thing we want to import is the interface which we have created so i'm going to just import that interface and this will be the car interface and what we need to uh import icar and also let's import the dto because we are going to use that dto so let's import that which is called car dto and we need to import the car dto from there now in the constructor of our service so let's first of all delete all this logic which we have created in the previous video when we have seen how we can add the logic uh for all these uh method which are put car by id delete car by id post and then get cards right so let's remove all the logic from here and also we don't need this car's mock data so we can just remove that also so first of all we are going to add the constructor here and in the constructor in order to import the mongodb model which we have created using the schema we need to just add this decorator which is inject model and then inside these brackets we need to give the schema name which is car in our case i think so we are going to just write car here and then we are going to just write private read only the name of our model will be car model for example and the type of this uh model will be the model which we have imported from the mongoose and then we can just write the i car here okay and also we need to add these curly brackets so this is how you can inject this car model inside your service and then we can implement car get cars method logic using this model so i'm going to just write const curves for example and then we can just write this dot car model which we have just injected and then we can use a different methods so we want to find out all the cars so we can just write find and then we can just write exact and it's going to give us the list of all the cars and then we can just return this card so let's return this now of course you can again add the error handling here so here if the car is not found so if there is no cars and then also we can check if the first element is there inside our cars array otherwise it's not an array right so we can just check that and if we don't find this then we need to throw an error so we can just write through new uh http exception right and we can just uh give the first argument which is uh not found and the second argument will be 404 which is the status code right so this is uh how you can also add the error handling for your get cars now in the post car method what we want to do we want to post the or save our car object so here we are going to just write const car is equal to uh await because uh we are using mongoose uh using async await so we need to add a sync here and then a weight here and then this dot car model dot uh whatever object we want to pass here so we want to pass the car so we have created the new car object and now we just need to save this data so i can just write return uh car dot save and this is going to save this data and here as an argument we can just write a new car because the name here is conflicting right so i'm going to just write new car here and then pass this uh parameter here so this conflict can be solved also i forgot to add a sink away here in the get car so i'm going to just add that and then it's going to work now for the get car by id also we are going to use this kind of code so let's uh copy this code from here and also add a sink here and instead of using find we will just use a finder one method we just need to change find to find one because we want to find on the basis of the id so using this curly bracket i will just use id here and it's going to find the data based on this id because we are just searching for only one data so it will not be an array so we can use other logic for that which is like this if there is no car found then we can throw an error otherwise we will return the result you can use the same code for delete car by id we just need to add a sync here and instead of find one you use delete one delete one right how do we know that the car is deleted we know this by using car dot delete count so car dot delete count if this delete count is equal to zero that means our data is not deleted then we can throw the not found error otherwise we can return the car right and the last method will be once again put carb id so a sink here once again we can use the same logic we just need to change this method here so let's use this uh logic instead of using find one we will just use find one and update method so just write find one and update and we want to find the result by id which is ok and the second argument here will be what we want to update so we want to update a single property inside that object right so based upon the property name we will be able to change it so i'm going to just add this curly bracket and then i'm going to add the square bracket and based upon the property name i want to change the value from here let me fix all the eslint errors and now we have all the methods also if you want to add the type to your car parameter here to the postcard argument you can add the type to your car right also we can add the promise type here also so i'm going to just write promise and the type here will be car dto but it will be an array of card dto right and in the get cards by id we are returning only the car dto which is the same single uh result right so in car get cars we are returning the array of car dto type and in the get car by id we are returning a car same you can do for a delete car by id and you can do the same for the put car by id now there is one last step which is remaining which we want to do in the car.module.ts file so go to the car.module.ts file and here we are going to import some nest packages and we are going to first of all import the nest js mongoose and from the nesgus mongoose we want to import a module called mongoose module and also we need to import our schema right so we will just go to our schemas and import our mongodb schema from there so car schema and then we can just import this and and now we can import our mongodb schema inside our car module so you can just add imports and using this square bracket you can add the mongoose module and mongoose module and then inside mongoose module you need to use the for feature method and then as the parameter for this for feature we need to add the parameters as an array so the first uh element here will be the name say name is a car in our case and the second argument here will be the schema so schema is the schema which we have imported which is card schema and also add the comma here and we can just resolve all eslint problems hopefully it's going to work so let's run our code and let's see if everything works or not so i'm going to just write npm start and let's see if it works or not right now our app is started we can go to our client also and see if there is any database created or not so right now till now until the start of the app there is nothing created here so let's uh use our postman to post something so i'm going to just post one other car with the id 2 and brand color and model let's send this request and you can see that now we have added this into our database and we also get the result with the id and hyphen hyphen v also so now this data is added to our database we can check it so once again i will just write show dbs now i can see that this database is created so i can use use car managers and then we can just write show collections to see all the collections we only have one collection which is cars which is okay and then we can write db dot our collection name which is cars dot find which is going to show you all the uh elements of your collection right so you can see there is one data which is added to our database which is the brand vw color red and model polo which we have added using this uh post request let's add one more element with id one let's say brand will be bmw and the color will be something and the model will be bmw x and now i'm going to just send this request and you can see it's also added and now i can just use this find and now we can see there are two documents inside our mongodb collection so the put method is working let's uh see if get cars method is going to work so it's going to give us a list of all the cars and it works you can see we are getting the list of all the cards now we want to use the get car by id so i want to uh send this request which is for the car with the id id1 and it's going to give me the result that's working let's query for the car with the id2 it also works now i want to do some put method so let's say i want to change the property name color in the car id 2 with the blue color right now the car id to have the color red right so let's send this request and you can see it's working or not working so still the color is red and we can also query here and here the color is changed to blue okay so this edit is working but somehow the result here is red because we are just sending let's go to the service because we are just sending our car which is found right so you can see our method name here is find one so it's going to find the document by id so it has found the document by id and return us the document which will be changed and then it will update the property okay so this is also working as expected right so inside our database its uh color is blue which is okay and let's use the delete method to delete this document so i want to delete the document with the id 2 let's send this request and you can see deleted count is equal to 1 that means it's deleted and that means when we go and query our database you can see we have only one document here okay so delete is also working this one little annoying thing which is you can see when we query for our data the default id which is created is also coming and this hyphen hyphen v is also coming so let's say we want to filter out these two things because for us these four elements are important and this is the unwanted data which is coming from the mongodb right so for this we can create the projections so in the car service go at the top and then we are going to just write const car projection and then is equal to curly bracket and here we can just add whatever projection we want so we want to filter out hyphen hyphen v so we can just write hyphen f and v false also we want to filter out the id so underscore id and then it will be also false okay so this is our projection and this projection we can add to the get cards methods here as the second argument so we are going to just add a blank curly bracket here and as the second argument of the find we can add this projection also in the get cards by id we can add as the second argument the scars projection or this projection is going to filter out the underscore underscore v and underscore id from your result so let's uh run our app once again i'm going to stop and rerun it and once it's going to run we will see if our projection is working or not so it's running now let's get all the data so previously as you can see we were getting underscore underscore id and underscore hyphen v let's send this again now we have only the data which we want because we have added the filter for that using projections right so i think that's it for this video i hope you enjoyed this video and i will see you in the next video