hey everyone today we're gonna talk about another General function of a character in a video game if you have a player in the video game you might need to add the jump function you might need your player to jump so that's what we are going to program today let me discuss first what we will do in the program we will have this rectangle made by the draw module then we would use the key module to move the rectangle up down left and right and we will have one more key that we would use to jump ladaki B spacebar so let's code all this I'll import Pi game I'll write and pour it by game I'll initialize it then I'll set up the screen I'll write screen equals spygame dot display dot set mode and the screen size is 500 comma 500 I'll given the caption I'll write Pi game dot display dot set caption and let the caption be jump then I'll do my while loop I'll write while true for events in pie game dot event dot get if events DOT type equals spygame dot quit then I'll call the quit function by pi game and I'll quit I will also set up my screen with some color right screen dot fill this is a lighter shade of green and then I'll update this I'll write 5game.display.update and I'm done with the basic frame structure now I would need to set up the basic variables that I would use in the program so one would be the size height width and the initial position of the rectangle I would move around so you can use the right class or you can initialize the parameters just by taking variables and so I've used the right class I'll write my rect equals spygame Dot rect let the initial position be 200 comma 200 and the size the width V10 and height B20 you can even take a larger rectangle then I'll do I'll have the speed variable let it be five the amount of distance the rectangle travels at once and I'll have this jump variable which would be a Boolean I'll set it up to false so that I can know when the object has to jump or not you'll get the use of it later in the code then you have this jumpsuit variable which is equal to 10 I'll put this equal to 10 this is the jump speed amount of distance a travel travels at once when you jump or you will click the space bar so we will use this later in the code now inside this while loop I will Define the movement of the rectangle drawn I'll write keys equals spygame dot key dot get pressed so here's the Boolean sequence as we have discussed a lot of times by now it stores the states of the keys on the keyboard as true or false if the key is pressed its state is true now accordingly I will check in which direction the object should move this is exactly the same thing as we did uh in moving an object so try to write this piece of code yourself it would help you practice I'll check for uh the left Arrow key if the left Arrow key is pressed I'll write if keys in square brackets by game dot k left so this is how we access the state of the left Arrow key and my underscore rec.x so this is the x coordinate of my rectangle the object is greater than zero then I will decrease the x coordinate of the rectangles by speed units so I'll write my rect dot X I have access to x coordinate minus equals speed okay I hope you remember if you need to go towards left side then we decrease the exponent now for the right arrow key I'll write if keys pygame dot k right I have accessed the writer okay and my rectangle dot X is less than 500 minus direct dot width DOTA blue would access your width this is just for keeping the rectangle complete rectangle within the boundaries I will increase the x coordinate by speed units so I'll write my erect dot X plus equals speed fine now check for the up key so I'll write F if Keys Pi game Dot K underscore up is greater than zero I'll access the y coordinate now since I am talking about vertical motion I'll write my erect dot y minus equals speed okay this is the normal motion of the rectangle okay I also need to talk about the down key if Keys Pi came dot k down and my react dot y the y coordinate is less than 500 minus my red dot h since we are talking about the vertical motion I have accessed the height not the width here my rec.y plus equal speed since we are moving downwards okay okay fine so this was something we had already done but now we'll move on to the jump function part so I'll write if jump equals false I'll check if jump is equals to false this is the initial condition right now and then I'll check if keys and basically I have pressed the space bar I'll write if Keys Pi Kim dot k underscore space I'll access this state of the space bar if it has been pressed I'll make jump equals to true now okay I'll reassign its value so if you actually analyze what would happen when the rectangle jumps it would cover a lot of distance vertically above more than it normally covers when we press an arrow key so I'll put this in the else condition let me write it first if jump C is greater than equal to minus 10 I'll check if the object is back at this place my rect.y minus equals jump C into absolute jump C into 0.5 jumps C minus equals 1. so let me explain now uh you should get that if the rectangle is jumping we will decrease the y coordinate just like the up Arrow key but by a larger value so that value is product of jump C into absolute jump C and 0.5 and after each decrement of y coordinate I will recommend the jump C by 1. jumpstick keeps the count how many times the there would be this kind of y coordinate decrement now you can think once the jump C value decreases and reaches zero you need the wreck to come back to its original position but for that we will increment the same that you decremented to the y coordinate so here is the role of this absolute function since jump C is negative if you don't use the absolute function you will end up decrementing more and the rectangle will not come back to its original position so all this will basically run a loop till the jump C becomes minus 10. as you went up 10 times you need to come back the same amount of times okay now else I will write jump C equals 10. I'll reassign jump C and jump equals false so every assigned these two variables just in case you click on the space bar again the space bar is pressed again the values are reassigned okay now I'll fill the screen with some color and I'll draw the rectangle now that would be moving around so I'll write Pi game dot draw dot rate screen and I'll given some color let it be purple and my rec.x myrec dot y direct.w on my vect.its okay so these were the parameters x y w and H with the parameters of the rectangle I would draw okay now this is it for this program let's run this and see if the rectangle jumps so here's the rectangle I made and I'll press the space bar first okay so rectangle jumps very well and the forward backward and down and above keys were fine left right up and down Keys work fine now you can even combine the two keys if you press the space bar and the left or right arrow key the there is a combined motion you can see like this it's a kind of a parabolic motion okay so yeah this was it for the program and I hope you understood whatever was done thank you