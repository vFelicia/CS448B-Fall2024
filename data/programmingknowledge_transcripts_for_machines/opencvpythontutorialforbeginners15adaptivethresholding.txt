hey guys welcome to the next video on open CV tutorial for beginners using Python in the last video we have seen how we can perform simple threshold nsync item using various threshold link needs so we have used Treach binary threshold is fresh trunk fresh 20 tries to 0 inverse so these were all the simple threshold in technique now in these thresholding techniques we were setting a global value of our threshold so in this example for example here the global value of threshold is 50 here 200 here 127 so we were setting in simple threshold link the global value and this means that it is same for all the pixels in the image now in this video we are going to learn how to use adoptive threshold in the adoptive threshold amad where the threshold value is calculated for the smaller region so the threshold is not global for every pixel but it's calculated for a smaller region and therefore there will be different threshold value for different regions now why do we need this type of adoptive thresholding so using simple thresholding might not be a good idea in all the conditions so there might be conditions where the image has different lighting conditions in different regions and in those cases where the lighting conditions in the images varies from point to point in those cases we might want to use adoptive threshold in adoptive threshold 'uncle Q lates the threshold for a smaller region of images so we get different threshold ik bail use for different regions of the same image and as a result adoptive thresholding gives us better results for images with varying illumination so let me show you the problem with simple threshold n't illumination at different regions so I have this image called pseudo cou dot PNG which I'm loading using I'm read method and then I'm just showing this image using I'm show method and then let's use the simple thresholding technique which is tresh binary for this and we have set the global threshold value of 127 here and then we will see the result after this threshold is applied to the image so I'm going to run this program and let's see what happens so this is our original image and then this is the result which we got so on in the result you can see when we apply a same global threshold value some of the region of this image is black and other region of this image is visible right so because the image have different illumination value at different regions that's why we see half of the image which have the good illumination and we don't see half of the image which doesn't have the better illumination so in that case it's the better idea to use adaptive thresholding so let's see how we can use adaptive thresholding so here what I'm going to do is I'm going to declare a variable called th2 and then we use a CV dot adoptive threshold so this is the method which we are going to use for performing adopting Thresh holding and this takes few arguments so first is the source so our source is the image variable now the second parameter here is the max value so the max value is the non zero value assigned to the pixels for which the condition is satisfied so in our case the maximum value which we can provide to a pixel is 255 and we cannot go more than that right now the third parameter here is the adoptive method so this adoptive method is going to decide how the trash holding value is calculated and there are two types of adoptive methods which we can use so the first method is called CB 2 dot adoptive thrash mean C so what is the meaning of this adoptive thrash mean underscore C so using this method the threshold value is the mean of the neighborhood area and here is the documentation of these two methods so adoptive thrash means C gives us the threshold value using this function and this is going to give us the mean of the block size multiplied by block size neighborhood of X comma Y minus C which is the constant and the second adoptive threshold type is this one which is adoptive trash Gaussian underscore C and in this adoptive threshold in the threshold value is the weighted sum of neighborhood values where weights are the Gaussian window so let's use the first adoptive method which is the adoptive trash mean underscore C now the next parameter here is the threshold type so the threshold type which we are going to use is the trash binary which we have also seen in the last video also and then the next value is the block size so block size decides the size of the neighborhood area so here we are going to give the block size 11 and the next parameter here is the value of C so we have seen that we need to give the value of C also when we use the adoptive thresh mean see and adoptive thresh gaussian see so this is the value of c which we are going to give and c is just a constant which is subtracted from the mean in the case of this adopted thresh mean method or the weighted mean in the case of gaussian adoptive threshold okay so constant we are going to give here is two and now what we are going to do is we are going to just load this image which we got after applying this adaptive thresholding and let's just comment the other window so we will just see the original image and the adaptive thresholding result I am going to run this code and you can see the original image here and the result of adoptive thresholding which looks much better than the simple threshold link technique so let's uncomment this also so I'm going to uncomment this so we will see all the three result at the same time so this is the original image and you can see the simple thresholding gives us this value using the global threshold of 127 and adoptive thresholding gives us this value or this image which is much more readable than the simple thresholding technique image so this is how you can use adoptive trash mean see method in a same way we are going to use the other adaptive thresholding technique which is called adoptive trash Gaussian C so instead of this we are going to use adoptive thresh gaussian c and then all the parameters we are going to leave as same and let's load the result of this type of thresholding which is stored in th 3 so let's run this code and let's see what happens so we have already seen this image which is the simple thresholding this is the result of the adoptive thresholding mean see and this is the result of adaptive thresholding Gaussian underscore C so both of the result looks good because the adoptive threshold again goreism calculates the thresholding value for different regions so the trash holding value is not global for each and every pixel of the image and we have seen the two adoptive methods which are available in adoptive thresholding so in this way you can use adaptive thresholding in open CV using Python I hope you have enjoyed this video and I will see you in the next video you