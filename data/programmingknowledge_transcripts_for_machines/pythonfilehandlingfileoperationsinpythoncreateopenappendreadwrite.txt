in this video I'm going to show you how you can create a text file in Python and write in it so let's get started so to start with we use a built in function which is open and it takes two argument first is the name of the file which we want to create or read so let's say I want to just create a file which is demo dot txt in the same folder in which I am working in so you can see I am working in my file handling project and there is only one file there which is test dot P Y and this demo dot txt file will be created in the same folder now the second argument which we want to give here is the mode so there are several types of modes which we can use with this open function to work with the files so let me show you the list of some of these modes so you can see on the left hand side I have listed the modes so you can use the R or R plus or W or W plus or a or B now R is used to read from the file and if you don't provide any mode to this function then the default mode is the read mode now if you want to write to a file you use this write mode with a keyword W so we are going to use this W keyword in order to write to the file so let's use this W keyword here and then this open function returns a file object so let's store this file object into a variable now generally we call this file object a file handler and using this file handler we can work with the file on which we are working on so this file handler will be used to work on this file which we want to create now in the next line I will just use this file handler and then I can call some methods here you can see there is a list of methods I can call on this file handler which is returned by this open function so to write into a file I can use the write function and here inside the write function you can provide any text whatever you want to write to the file so let's say I just want to write this line of string to my text file which I am creating so I can just paste this text here and then after writing to a file when you are finished working with the file you use once again this a fetch and then call a method called close on it now what does this close function do so this close function is used to close the file and immediately free up any system resources used by your file handler which is F H and it's a good practice to use this whenever you are done with the handling of your file so always remember to use this close function after you are done with the handling of your file so this is a good practice but I would say you must call this function and that's it so this W mode if the file demo dot txt doesn't exist it's going to create the file and then it's going to write this text into the file so W mode is responsible for creating the file also and if the file already exists it will overwrite the previous string by the string which you are writing using this write function so let me just run this code and you will keep eye on this project because this file will be created inside this project so I'm going to right click and then run this test file and you will see as soon as I run this test file there is one more file created here which demo dot txt and when I click on this file you can see the same text appears here which we have written using the write function now if you want to provide the line breaks you can provide them using backslash N and I'm going to once again run the code so remember when the file doesn't exist the W mode is going to create the file and if the file already exists which it does now then it's going to overwrite it so I'm going to run the program once again and see the content of this demo dot txt and you can see this string is split into two lines which is done by this backslash n so let me just split the screen so you will see the demo in the real time so on the right hand side I have my demo dot txt file and on the left hand side I have this code on which I am working on so let's write something else in this file so instead of writing this big line of text into the file what I want to do now is I want to use a for loop to print 10 lines into this demo dot txt file so I'm going to use for loop for that and I'm going to just write for I in range and let's say the range is 10 and then we will call our write function using this FH file handler and then what I want to write here is let's say this is line number modulus D and I will just replace this mod D with the line number and then I will just provide the line break after that and in the previous videos we have already seen that when you use this modulo symbol and then give some value here for example I then this mod D will be replaced by this I right so let's run the code and let's see what happens now so I am going to run this code and now you will see that this code prints this is line number zero this is line number one because the range starts from zero so in order to print the line number from one what we can do here is we can use this parenthesis here let me just move this to the side so inside the parenthesis we can use I plus 1 so we can add one every time this value of I is printed so it will start from wanna so let's run the code once again and you can see now it prints this is line number one line number 2 3 4 up to 10 now you might have already observed that whenever I run the code this demo dot txt file is overwritten every time when I run this code so the older text is overwritten by the new text now in order to avoid the overwriting of the text what we can do is we can use a special mode which is a here and a stands for append and this append mode is used to append the text to the file so let's replace this W mode with the a mode now okay and you can see this is the previous content of the demo dot txt file and now when I run the code you will see the previous content is staying there and the new content is appended to the same file so a we use to append to the existing content of the file now let me go to the list of modes once again and you will see there is a special mode W plus also which means if you want to read and write at the same time you use this W plus mode and this mode is going to create a new file if the file doesn't exist otherwise a file already exists it's going to overwrite to the file which already exists also you see a special mode B here which is used for the binary files such as images or other binary files this R and R plus mode we will see in the next video and I'm going to show you how to read from the file using these modes in Python in the next video so let's go to our code once again and in the videos in which I have shown you how to use exception handling I told you we can use try with the finally keyword so try and we can enclose this for loop inside the try block and let's do this and then in the finally we can add the closing of this file and what does this finally do if you remember this finally block is always called in the case exception is thrown by this code or if exception is not thrown so this F H dot close is definitely will be called whenever we use this finally keyword in order to call the F H dot close function so you can either use this kind of code in order to work with your file handler and then use this close function with this file handler at the end of the handling of the file otherwise items provide the shorter form of writing the same type of notation and this notation is you use a keyword width and then you call open function and you can provide the same type of argument here for example demo dot txt and append and then you use as keyword and then you write the name of the file handler for example F H as you have done here and then you provide this colon and inside this width statement you work with your code for example we work with the file writing with this for loop so this whole code including the try and finally blow is equivalent to this kind of code which is the shorter form of writing the same code so this width statement is going to always call this closed method with your file handler when you are done with the handling of your file so you don't need to explicitly call this try finally block in order to work with your file this is enough to work with the file so either use this notation or this notation both are equivalent to each other now the last thing which I want to show here is let me just use the width statement in order to work with this demo dot txt file is for example you don't want to create this demo dot txt file into the current project instead you want to create this file into some folder on your computer so let's say I want to create this file inside this folder which is inside my C directory so I can just copy this whole part from here and then I can just paste this part with the backslash here and the important thing to note here is on Windows you always need to use the double backslashes in order to provide the file path okay so use these double backslashes to provide the file path so see inside the C directory I have this files folder and inside the file folder right now you can see this is empty and now when I run this code let me just change the mode to W which is for write mode and I'm going to run the code and as soon as I run the code this demo dot txt file is created here and you can also see the content of the file on the right side which is this is line 1 up to this is line number 10 so this is how you can create a text file and write into it using Python now in this video I'm going to show you how you can read the content of a text file using Python now if you remember in the last video I have two told you that you can use this open function to open any text file and this open function takes 2 arguments first is the part of the file with the exact name of the file so because this demo dot txt file is in the current folder in which I am working in that's why I haven't provided any exact part I can just give the file name here but if you have the full path then you can provide for example C colon backslash and then whatever is the folder name and then the file name so either you can provide the exact path of this file with the file name or you can provide the file name if this file is present in the same directory in which your Python script is there now the second argument which this open function takes is the mode of opening this file so we have seen in the last video when we write W here or here that means we want to write or append to the file now in order to read from the file this mode here should be R which is the read mode in the last video we have seen this table in which we have seen that we can use this R or R + mode in order to read the file or if you want to read and write at the same time you can use this R + mode now if you see here I have also written here that R is the default mode so when I don't give any argument here as the second argument which is for the mode then also the default mode is the read mode so let's see how we can read this file which is demo dot txt file and the content of file is shown here so in order to read the file you'll use the file handler and then use the function for example read which is used to read the whole file now in order to print the content of the file you need to use this print function so this FH dot read provide the string and then using this print function we can print that string so let's run the code and let's see what happens so you can see it prints the whole content of the file now let me minimize this window once again now let's say if you provide some file path which doesn't exist so this file aim doesn't exist in the current folder and when I try to read this file let's see what happens so it's going to throw an error and this error says that no such file or directory so if you try to open a file which doesn't exist it will throw an error so you need to give the exact name of the file in order to read it now here we can also be more specific and we can also say that this is our read mode in which I want to open this file and once again when I run the code it's going to read the content of this file now let's say I just want to read the first word of first line here so let's say I want to just read the first four character of this line one then I can just write four here which will read the first four character of the line one now if we just want to read the first two words of this line one then you can see the number of character here for for this and then there is a space so five character and then I ask is two character more so 5 + 2 7 so when we write 7 here then it's going to read the first two word of this line 1 now let's say I want to read the whole line so instead of some words or some characters I want to read the whole line then I can use a function called read line and this read line function is going to read the first line of the text which is present in my file so I'm going to just run the code and you can see it reads the first line of my text file now if you to read the next line then you need to use this read line function once again and when I run the code once again it's going to print the second line and so on so if you want to print the three lines then you use this function three times now let's say you want to read some characters of the line one then you can once again write the number of character which you want to read and then run the code and it will print the first four character of the first line and you will observe that when I use this read line function once again the string starts from the ending of the first line so in the first line we have just used the first four characters of the first line now pointer will be set to the end of this first four characters so when you use the read line function once again it's going to start where the first line has ended so first line has ended at the end of the fourth character and then it's going to read the space and then all the line characters which are there so in the second read line statement it has printed this kind of text which is after the first four characters and in the third read line because we haven't provided any argument here so it has printed the whole line here so let me minimize this now let's say you want to read all the lines of this file in the form of the list so you want to read the 10 lines of this file in the form of list you can use a function called dot read lines so here you just need to write dot read lines and this function is going to give you the list of every line in that text so let me run the code first of all and you can see this is the list which starts from a square bracket and the first element of the list is the first line with the backslash n which is the line break comma the second element of the list is the second line of the text which we are reading from here so now we know that this read lines function returns the list so we can also call some index of this list so let's say I just want to read the fifth line of this text then I can just write index four because index starts from zero right so let me run the code once again and it prints this line which is at the line five now let's say I want to read the last line I can just say nine and it's going to print the line number ten of your text file let me minimize this once again now let's say you want to read all the lines of this text one by one and do some operations on each and every line one by one so you can use a for loop for that to iterate over the lines one by one so for let's say line in your FH which is the file handler and then you can print the line one by one so you can call this variable which is line here and now let's run the code it's going to iterate over this text line by line and every line is printed one by one using this print line statement so let's say you want to count the number of characters in every line you can use this function which is le n function which is used to count the length of a string and when I run this code now it's just going to print the number of characters in every line now once again let's say you want to count the number of words in every line so we can use a function on this line variable which is a function called split so line dot split which is going to split your line on the basis of character you provide as an argument here so let's say I want to split the line on the basis of a space so let me run the code once again and now you will see that it's going to give me the list of each and every word of every so this is the first element of the first list and then the second element third element and fourth element and the fifth element so if you want to count the number of words in every line then once again we can enclose this code in to a function called le n okay so this length is going to give you the length of this list and when I run the code once again it's going to print the number of words in every line of this text file so if you want to count the number of words in every line you can split the words using the space and then using this le n function you can just find the length of the list which is returned by this split function or if you want to just see the list of words in every line then you can just use this function without the Eliane function and it's going to give you the list of each and every word of every line of your text file and of course to make things easier you can also use this with notation which I have also told you in the last video so you can write with and then this open function and in the open function you give these two argument which is the name of the file and the mode and then you can use as a fetch for example and then you can execute whatever code you want to execute using this file handler for example once again I want to read the content of the file once again so using this width statement you don't need to use this FS dot close function because this width function is going to take care of closing of this handler by itself so this whole code is equivalent to the code which you write whenever you use the try finally block with this code also so this is also possible so let me just remove this code and let's run the code once again it's going to give me the same result as we have seen earlier so in this way you can read the text files in Python in this video I'm going to show you how to handle Jason values in Python so first of all what is Jason so Jason is a text format which stands for JavaScript object notation and Jason is a syntax which is used for storing and exchanging data now if you want to know more about Jason what is Jason and how to create Jason's and what value you can store in Jason then I have created a whole video about that so you can watch that video and understand more about Jason so let's get started with this tutorial and let's see how we can use Jason in Python so to use Jason in Python you use inbuilt package which is called Jason so you need to import this inbuilt package which is Jason now let's say I have a Python dictionary so let me create a dictionary in Python which have and let's say so this is our dictionary in Python so in order to convert this dictionary into Jason you use this Jason keyword which we have imported here and then call a method called dumps so this dumps method we can call here to convert some Python values to a Jason value and we will pass this dictionary variable a here and in order to print the value of Jason we can use this print method so I'm going to enclose this json dot dumps method inside our print function now let's run this code and you will see that this jason dot dumps function has converted your dictionary into our jason value so this is our json text format now the next question which can arise here is what datatypes this dumps function takes as an argument so it takes a dictionary we already know now but what are the other data types which we can pass as an argument to this dumps function so it turns out that you can provide majority of your collections and your data types as an argument to this dumps function so you can provide dictionary here list tupple string int float or a boolean value any value you can provide here I think sets you cannot provide as an argument here but other than sets you can provide any other format as an argument to this dumps methods so let me show you how you can provide all these values into this Jason dot dumps function so here in the first print statement I have provided the dictionary in the second print statement I have provided the list in the third we have provided couple in the fourth statement we have provided the string and then the integer and then float values and then we have provided the two boolean values false and true and at last we have provided this none keyword to this dumps function so let's run the code and let's see what happens so everything runs fine so that means you can convert from this JSON dumps function a dictionary or a list or a tuple or a string or a decimal or a float or a boolean value into adjacent value and all these are valid JSON values now let me go once again to this dictionary method and here also as the JSON values you can provide any type of values which I have shown here so you can use inside this dictionary for example another dictionary so I can just write so we can also provide a topper layer so let's run this code and it's totally valid so you can see our dictionary is now converted to a Jason value now this dumps function also takes few other parameters also so we can also provide a parameter called indent here so you need to write indent is equal to and then after that you can write some number here so if you want to give the indent of four to each and every element of your Jason then you can right indent is equal to four and let me run the code once again and now you can see this jason is printed into a pretty format and the indentation here indentation means this indentation is four spaces for each and every element of your jason so if you want to print your jason into a pretty format then you can just right indent is equal to and the number of indents you want to give so let's say i want to provide just two indents here and let me run the code once again and you will see now this only have the two indents for every element of this jason also you can provide a parameter called separators and as the separators let's say first value i want to provide here is a dot value and the space here and the second value i want to provide here is this equals to symbol so what this separators argument does is it will replace your commas with this dot notation and your colons with this equals two notation and when i run the code you can see now the colon is replaced by the equals two symbol and comma is replaced by this dot symbol so you can use separators like this also but I will not prefer to use these kind of notation the original notation is the one which I prefer to use which is with commas and these colons one more thing you can use here is the sort keys so you can just write sort keys here and you right through here it's going to sort your Jason according to their alphabetical order so you can see right now your keys are assembled in non alphabetical order so they are assemble in random manner but when you give sort keys is equal to true here and I'm going to run the code you can see H comes first then the marks and then the name and then the object so now your keys are assembled or sorted in the alphabetical order when you use this kind of notation now let's try to save this Jason value into a JSON file so in the last video I have shown you you can use this width statement and then you can use open function and we can provide file name here for example demo dot Jason so jason file always have the extension dot jason and the second value we will provide here is the mode so we want to write to the file so that's why we have used w here as fh and then using this fh we can write to this file which we have created so we can pass this json dot dumps function here and now your dictionary a will be converted into a jason and then this jason will be saved into this demo dot JSON file you can see here i'm working inside this file handling project and here I only have dot py file and when I run this code you will see there is one more file which will be created here which is demo dot Jason so I can open this file here and here you will see all our Jason values are saved in this demo dot Jason file so we have provided these values into the demo dot JSON file let me just split the screen so you will be able to see it correctly so we have provided a name here so name is here age is here marks is here and then the object is here and also the pass is also here so this is how you can write your Jason values into a file now let's see how we can read the Jason values from a file so I'm going to remove this dictionary from here and instead of using this write mode I'm going to just use read mode which we use to read it from the file and the file we already have so let's say we want to read all this data which we have written into this file and now instead of using this line I need to use a fetch dot read function here and to print the content what we have read from this file we can use the print function so I'm going to enclose this ifetch dot read into the print function and let's run the code first of all and when I run this code you can see it friends all the content of this jason now one thing which you need to observe here is this efetch not read function is going to give you a string value so to confirm that we can just write type here and we will just see the type of this efetch dot read function and I'm going to run the code let's see what's the answer so you can see this read replies you in the form of string so in order to convert the string into some possible format you use our function called jason dot loads so i'm going to save this string in true let's say a variable jason underscore str this is the variable name and we will assign whatever we read from the file into this variable and now what we can do here is we can convert the string into a jason value using a method called json dot loads so let me create a variable once again so jason value is the variable name and then I can use this JSON keyword which we have imported dot loads functions so just use the loads function and then pass the string as an argument of this loads function so this loads function takes a string and converts a into adjacent values so now let's print the type of the Jason values I'm going to just write print type and then we use the Jason value argument here and then once again run the code and you will see now the Jason value data type is the dictionary so because now it's a dictionary we can parse some values from it so let's say from this Jason value dictionary we want to get the name so name here we have stored is max so we can just give the key here name and then run the code it's going to give us the value associated with the name which is max so this jason got loads function we use to convert from a jason or a string value into a Python dictionary so this is how you can handle Jason values in Python I hope you have enjoyed this video and I will see you in the next video