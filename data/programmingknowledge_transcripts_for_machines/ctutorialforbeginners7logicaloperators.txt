hey guys welcome to programming knowledge in this video we will be talking about logical operators the previous video we load a program to validate the age the user does right so we are giving a condition like if it's checked whether it's a positive number or not and if it's a positive numbers we were are then checking whether it's too great or not if it was too great we were telling something like your age is not valid and if it was okay if it was in the range then we wait checking whether his 18 years or younger we were considering that the age was valid or else we are telling that it was a North Valley age right here if you observe this condition and this condition good together so if a number is positive and if a number is too great then it's not a valid number or if we look at the larger scope here you can combine these three statements if a number is positive and it's too great or if a number is negative then it's not valid age or else it's going to be valid so the way you group these conditions are by using logical operators so these are just like the color connecting words are used in the English statement so here if I talk about the condition when the age is not going to be valid let me write it down here and number as a valid is or a number is not a valid eight if it is positive and if it is to grade or the number is negative so this was the condition right so if a number is positive and to grade so these two conditions go together or the number is negative then the age is not value so this was the condition if we write it down in this manner it is much easier to write it down than this group of Nestor different density so the way to achieve these things to evaluate these conditions and to drawing the result of these two Cadiz results are joined red you need to take whether the number is positive and whether it's too great and you need to combine these two results and you are going to get a result also you are going to check whether the number is negative or not what if it's positive you need to check whether it's never too or not and then you are going to check these two conditions if one of them is true then we're going to say it is not valid so this is basically the function of logical operators so there are three logical operators in C++ or in any language these are same as the logical gates and physics you might have come across it so these are and you have an all and a not so not simple you might have there did while I was talking about the relational operators are was talking about this operator right so this one stands for not equal to so this exclamation stands for the not so this is not and for all we are going to put two vertical bars which are which you will see on top of the entity and here for an you have two ampersands the very important point to note here is that you need to use two ampersand symbols for hand and two vertical parts for all because a single version also exists so it in C++ there is also an operator which is this one which is single hand and a single or so these are actually big words operators we need not dig deep into these operators because they deal with a binary representation of the data but just like your information I am telling these things we will talk about that in a later video for now we don't need these bitwise operators or bit manipulators we are only going to need the logical operators which are just going to tell the relation between two conditions so and this basically if 2 or any kind any number of condition if all are true then the result is true so and this basically if all the conditions are true then it's going to be true and for all you have if any one of the condition is true right if any one of the condition is true then the result is going to be true that is a specialty of all so you if you have n number of conditions even if one condition value gets through true then the result is going to be true and four and if n number of conditions are there all in number of condition should be satisfied then only you are going to get the true value or else you're going to get false so this is the basically the end and our operator Nord is just it's going to turn the value so notice it is going to change true to false and vice versa so the function of naught is just the change true to false and false to true all takes n number of conditions and if any one of the condition is true then the result is true and for and it is going to check all n number of conditions and if any one of them is false then the result is false every condition should be true that only an is going to give you a true so that is basically the logical operators so here another thing is that if you're writing a logical operator let's say some condition1 and condition2 that's how you represent and for all it is the same thing if condition 1 or condition 2 and not basically doesn't need two conditions just going to reverse the condition so first you put an exclamation mark and you put the condition so here if you are using an and operator if this condition evaluates to true this first condition then only it's going to check the second condition so even if the second condition is true if the first condition is false it is not going to check the second condition at all it's not going to perform anything over here so this thing with always it is going to check every condition and here if this one is true it is not going to check other condition so the condition for or is that if any one of the mr. right so you if it forms any one of the is true then it's going to evaluate it as true and this whole condition becomes a truth condition so this part is going to be executed that is with the odd so those are the kinda those are the logical operators let's take a quick example we are going to deal with the same example we took yesterday so here on that it will take the edge so enter your age and I'm going to take that inside a variable so in THC in age and here I am going to agitate the edge so if if age is greater than zero and ages greater than 102 right so this was the condition we gave a study or 101 from that so let's stick with 102 now and if this condition if this age is greater than 0 and the H is greater than 1 0 2 so this condition is basically not required because if it is carried along 0 then only it's going to be greater than right I am just going to take out this particular condition so if the age is greater than 102 or if the age is less than 0 right so if an ages greater than 100 something like 100 and 102 something like that or if the age is less than 0 what we are going to say you have not entered a valid age right and Oren's we are just going to perform the check so if age is greater than or equal to 18 we're just ah let me tell you over here I forgot yesterday we were talking about the block right so here if you are only one statement executes then you know need not use a block so here I have only one statement X is good this is going to be the same thing as this one here if I put a block inside this and then put X your statement it's going to be the same thing but block is generally used to hold two or more statements if I'm going to use only one statement I don't need a block so I can just put this statement beside the if condition itself so this is also valid but if you write any other statement over here so let's say statement to if I write something over here this is actually not considered a part of this if statement unless and until I have a block something like this so here inside this block whatever light inside this block all the statements belong to this else statement but here since I have not put in block over here so this particular statements goes to the if this statement stays to the else part only unless and until I specify another block and mentioned these two things over here so if I put these two things over here now these two have become a part of this if statement and this whole if statement becomes a part of the else statement and here I'll put only one statement that is why I don't need a block and here if any age is greater than or equal to 18 I am going to say that you are eligible so whatever is equal to word something like that or else we are going to say sorry you are not Elizabeth coming that so this is the program we have written this is going to do the same thing which we had done in the previous video but see how small the program now looks so if you consider taking out these braces then it's going to look much much smaller because you have only one statement at the code inside the if block but because it many people tend to forget putting these braces for multiple statements also it is always advisable to put the braces for even one condition but generally I don't do that I just if there's only one condition I put it beside the condition itself for a one statement instakills I put it without the condition itself it's something you either way it's going to work so the here now let us execute it we are going to get the same output so here it's going to ask for the age so enter your age let's say one so here it says sorry you are not eligible and that's it we have created the same program but here it's a much smaller program than the previous program so that's all for this video in the next video we'll be talking about switch case statement