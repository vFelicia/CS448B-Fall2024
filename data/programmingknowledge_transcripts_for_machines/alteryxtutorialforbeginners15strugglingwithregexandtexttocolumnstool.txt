hello everyone welcome to altrex videos in this video we are going to talk about a tool that is known as the regex tool in ultrix so regex is basically stands for regular expressions and that helps us to find for particular values in the uh table okay so here is a few uh small setup that i have done for the rejects tool this is how a rejects tool looks and it is a part of the parse tab in the ultrix so here is the rejects tool that's present it is used to leverage the regular expression syntax to pass match or replace the data so for the regex tool first of all the data must be present so i have taken a data that is the consumer segment data from the output excel sheets that we have already prepared in the previous videos in case you have not watched the videos i would recommend you to watch them to better understand what we are doing over here so once i have taken the data from the input data tool then let me just delete it once the next thing is to go to this parts tab and grab this regex tool over here okay now what we are going to do is connect these anchors like this and in the regex tools configuration we have the first option that is the configure the column to pass so here you can just select the column which we want to parse so what i'm gonna do is i'm just going to go with the customer name column that i want to parse next is in format to convert option we have to add the regular expression so here is the perl5 rejects syntax that has been followed by this regular expressions in case you do not know about the regular expressions and want to read about it then how can you go with it you can simply just go to google and here you can just search for regex alteryx reject stool altricks are basically regexaltrix so if you just uh search for it you would get the first link that is help.ultrex.com that would give you the official altrix documentation for this tool and in this official documentation you will find this link that is perl regular expression syntax you can just click on this link and here is all the information that you need to know about the regular expressions before working on them like everything that um every syntax of regex that is being used is uh shown over here okay so you can take your time and read it understand it well and then come back to this video so let me just quickly show you that how these regular expressions are going to work here what we have is the plus sign which is the button that is used to access the common regular expressions that we may need while creating the expression so if you just click on this plus icon we would be seeing these operations like if you want to match for a single character you want to match for zero or more characters or one or more characters you want to measure the start of the word end of the word beginning with line ended line and so on these are all the regular expression syntax that have been given to you next is the case insensitive option just a second here is this case in sensitive option which is checked by default that means um the searches that would be happening through regular expression would not distinguish between the upper case and the lowercase letters right next we have is the output where we have the output method which is used uh when parsing to configure the related properties like what you want to do once the expressions have been matched so we have four methods that are available the first one is replace so it means that we want to replace the expression that we have searched with a second expression now where you want to find the second expression that is in the replacement text you can enter the replacement text uh that we want the original expression to be replaced with again we have this plus that would uh allow you to actually find the entire text or just the particular character to be replaced okay the common regular expressions again that are needed and then we have the copy unmatched text to output if you want to copy it to the output as well that also you can do otherwise you can just remove it next option that we have in this output is the tokenize method that is used to split the incoming data using a regular expression it works in similar to the next tool that we have is the texture columns tool so we would be working more with the texture columns tool so i'm not going to explain everything over here and it has um some options like if you just select it tokenize method then you can see we have different options like a split to columns option like you want to split a single column of data at each instance to the specified delimiter into the multiple columns and what would be the extra behavior or the behavior of the extra columns like you want to drop them with the warning you want to drop them without warning or you want to show an error before dropping the columns then there is this output root name which is actually the original name of the column that we are going to use and if you want to split a single column of data at each instance of the specified delimiter into multiple rows then this option needs to be checked third method we have is the parse method uh it is used to separate the expression into new columns and set the name type size and expression for the new columns a new column is created in the output columns table with the its name its particular data type its size and the expression which is automatically populated so you can just specify name type and size last but not the least we have is the match option that is used to append a column containing a number that is one if the expression is matched and zero if it did not match now um column id column name for match status that means a new column would be created so what would be the name of the column that you can specify over here by default it is taken as order id underscore matched right um and there is this option of error if not match so if the expression is not matched and you want to generate some kind of an error that it would generate by checking on this option or by unchecking it okay so let's just see uh the practical application of this regular expression but before that let me just get a look of how the data is looking so here it is we are using the customer name in the customer name field we have um different customer names starting with different letters right so let's just go to the regular expression field and i wanted to start with any single character should be z okay and uh i just want a match column to be there that there should be a column uh that should be name underscore matched that if it is matched it should show me one otherwise it should show me a zero and click on run now wait for a few seconds till it's been run here now we can see that we are getting this name matched option where the results are false there should be some true results in order to get that what we are going to do is grab the browse tool over here and in this browse tool let's just run it once again run the workflow now in the browse tool uh we are going to go with the last record that is the name matched record so all are false that means uh there were no records that had z in them right so let me just append my query just modify my query a little bit and here get a instead of set run it so here what we have done is added a and in this case uh check the option of error if not matched so if there is no matching in the first record itself then the error would be there so let me just turn it so this is what we are getting as the error because the first letter was not a that is why it didn't match the expression and the error was there and it has finished its running in just 1.4 seconds okay uh so this is how the regular expressions work now let us move on to the next tool that we have and that is the text to columns tool so let me just create a new workflow and in this workflow what i'm gonna do is just copy paste this input data okay so let's just copy it and paste it and grab this text to columns tool over here so it would give me the um freedom to just you know uh split the columns like we have the order id column in which hyphen can act as a delimiter so i want to split this column so let's just go to this tool select order id column the delimiter specified needs to be hyphen the number of columns that needs to be created is three and uh leave if there are any extra columns then leave it in the last column and output root name is going to be order id right let's just click on run and now what we can see is a total of 24 fields so here what we are getting order id 1 order id 2 and order id 3 since there were only three things so three have been shown over here in case there were multiple uh hyphens like let me just decrease the number of columns to 2 and click on run then what would happen is we would be getting order id 1 and in the last column the combination of both of them like order id 2 and 3 with a hyphen is present over here if you want to rename the column you can just rename it simply uh using the tools that we have seen in the past so um any kind of a renaming that you want to perform that you can do so that's all for this video in which we looked about the digix tool and the takes two columns tool in the parse tab of the altrix that's all for this video thanks for watching