hey guys welcome to the next video on Jenkins to troll for beginners in this video we will see what is a Jenkins pipeline and how to use pipelines in Jenkins so first of all what is a Jenkins pipeline so a Jenkins pipeline is a suit of plugins which supports implementing and integrating continuous delivery pipelines in Jenkins now to explain this I will reopen this diagram which I have shown you in the introduction of Jenkins so every change which you make in your software so for example you are a developer and you make the changes in the software and you push those changes into your code repository in our case for example we will take that kit repository right now the job of Jenkins here is to build your code in a reliable manner and then you may be having a different kind of testing for example unit testing or integration testing or different kind of testing so the job of Jenkins is to test your code and then at last deploy your code and even transfer this code into artifact repository and if you want to know more about Jenkins pipeline the documentation on the Jenkins website about pipeline is the best so just search for Jenkins pipeline and then you will be able to see this URL which is Jenkins dot IO 4 slash dog forward slash pipeline just click on this link and then you will be able to get all the details about pipeline on this page and when you scroll down you will be able to see this section which says what is a Jenkins pipeline and then if you want to learn more about pipelines then you can read this section so in simple words a pipeline is a script which gives Jenkins a series of jobs to do in a pipeline like manner and if you read this line the definition of Jenkins pipeline is written into a text file called a Jenkins file okay so we will create a Jenkins file in our repository or Jenkins allows us to write Jenkins file directly into the configuration of our Jenkins job and there are two ways of writing this Jenkins script which is declarative and scripted pipeline and you will be able to get more details about declarative script and scripted pipeline syntax here on this page itself so when you scroll down you will be able to see this flow diagram of Jenkins and when you scroll down more you will be able to see this section it says declarative pipeline fundamentals and in this video I'm going to show you exactly this so how to use declarative pipeline in Jenkins so in declarative pipeline syntax the pipeline block define all the work done throughout the entire pipeline so this is the simple syntax which allows us to define different stages and then inside the stages you can define different steps and all this starts with this keyword pipeline and then this is a groovy sandbox syntax so if you are familiar with that then it will be more helpful so you use the keyword pipeline and then in these curly brackets you use agent any and this means execute this pipeline or any of its stages on any available agent so every detail about the script you will be able to find here so for example there is a section called stages and inside the stages you can define different stage so for example there is a stage for build here there is a stage for test here and there is a stagefour deploy here right so we will be using this syntax into our Jenkins job now let's take a real use case which we can implement on our Jenkins job so if you remember we have created a maven project in the last videos and I have pushed this code on to the github repository so let's say we want to test this maven app and then we want to compile this maven app and we want to package this maven app using this Jenkins pipeline how we can do this using Jenkins let's see so I'm going to go to the Jenkins homepage and I'm going to create a new item here and this new item will be for example pipe line demo for example and in here you will choose this section it says pipe line okay so give the name of your Jenkins job and choose the pipe line section from here and then click OK which is going to create your chenkin job and then in the general you can provide any description about your project I'm going to skip all this and then here we are going to say our job is a github project so we are going to just click on this check box and then we can just copy this URL and then paste it here so this is a project URL and I'm going to scroll down we are going to skip this section for now which is build triggers you can define any triggers you want later but the most important section here is the pipeline section which we are going to use so in the definition you will be able to see two options here one is pipeline script another is pipeline script from SCM so we are going to see the first option first of all which is pipeline script and this enables us to define the script here in this section if you choose the pipeline script from SCM then you can define a Jenkins file in your project itself so I have already defined this Jenkins file in my project but for now I'm not going to use this Jenkins file this Jenkins file I'm going to show how to use this Jenkins trial from your github repository in the next video so for this video let's say this file doesn't exist so we are going to create this pipeline script here in our champions job configuration itself so for doing things faster I'm going to just copy this syntax which is given on the Jenkins documentation page so I'm going to just copy this and I'm going to paste everything here so the basic syntax is pipe line and then these curly brackets and you write agent any and I'm going to make this little bit bigger so you can see this in a better way and then you write stages and inside the straight is you define your stages for example so let me just change this script and now so instead of build what I want to do is I want to clone my gate repository so I'm going to just say clone repo here which is going to clone the github repository and inside the steps section you can define any shell script commands here so for example here you will write SH keyword before executing your command and this SH means your shell if you are running this Jenkins on Windows then you will write b8t here which is the batch come on ok so right now we are on Linux so we will use SH but if you are on Windows you can write dat here ok so SH and then in the double quotes what we are going to do is we are going to clone our git repository so the command for that is get clone and then the URL of your gate repository so I'm going to just click on this green button copy this URL from here and then paste it here so this is going to clone the repository now in the next step what we are going to do is we are going to clean our project using the maven clean command so I'm going to just write SH and then maven clean command is MVN clean and then you need to give the part of your project because when you clone your agate project there will be a directory which is clone which is my app and the parts you can give here using this flag minus F and then the directory name which is my app in our case so the command is ambient clean minus F and then the part of this directory which is clone this is the relative part that's why I haven't written the whole part here if you want to write the whole part or if you want to know the whole part I'm going to show you how to see the whole path also but just write this command here so this is going to clean our project now we are going to test our project now we are going to run the test on this project so for that we can just write SH and then we when we can just write MV n test minus F and then the path of your repository which is my app in our case and then to deploy I'm going to use the maven package command so SH and in the double quote I'm going to just write MV n package space minus f' and then my app which is the part of this directory okay so in the first stage we are cloning this repository and cleaning it so let's just write and clean okay so clone repo and clean it and in the second stage we are going to run the test so we have written this command and in the third step we are going to deploy our project and I'm going to use this command for that which is me package and I'm going to repeat once again so if you are on Windows this Sh keyword will be replaced by BA T keyword okay so because I'm on Linux I'm using SH command and now I'm going to just save my configuration and once my configuration is saved I'm going to just build my job using this button which says built now and now the build will start you can see Bill has been started let me just minimize this and you will be able to see your builder stages here so this view will show you which stage is executed right now so the clone and cleaning is done so first step is successful because we are seeing the green box here and now you can see at the end of this step this step was successful and the second step was successful which was the test so the cleaning and the test was successful but our deploy command have failed and let's see what is the reason for that so for finding out the reason I'm going to just click on this build history and then I'm going to go to the console output and you can see this is the directory where this project is cloned so I'm going to open a new terminal and I'm going to just write CD and this part and when I do LS here you can see there is my app directory which is cloned here and then we have run the clean command which was successful you can see build was successful and then we ran the maven test command which was also successful you can see all the tests were run and Bill was successful but at the package stage some problem occurred and you can see directly here the mistake which I have made intentionally here so you can see the command was mbn package and the part and the part is false here so you can see my minus a P 1p is missing from this command so let's correct our mistake and then we will run our job once again so I'm going to go to the configuration once again and then we will correct our mistake which is correcting the spelling of the myapp part and we are going to save this configuration once again and I'm going to run the build once again and then you will be able to see the second build and now you can see this build has failed miserably so let's see the reason behind this why this bill failed so I'm going to just go to this build and then I'm going to go to the console output and then you can see the clone and then I can see this message which says fatal destination part my app already exists and is not empty directory so in our first build when we have cloned our project this directory was created and because this directory is already there the cloning once again will fail because this directory already exists so for this clone command to be successful we need to remove this directory and then once again clone it from the github repository so we are going to go to the configuration once again so I'm going to go to the configuration and then I'm going to go to the pipeline script once again I'm going to just maximize it and in the first step before the cloning what we can do here is we can just write SH and then we can just write RM which is the remove command and then I'm going to just add these flag RM minus RF which is going to recursively force the removal of all the files and then I'm going to give the name of my directory which is my app in our case so this command is going to remove this directory and then run the clone command so once again the cloning will take place and then this my app will be freshly created or freshly cloned into your Jenkins directory so let's save our configuration and let's build the job once again so I'm going to just press on build now and I'm going to minimize this browser once again and now I can see the build number here third build and then till now are cleaning and cloning is successful and now this test stage is also successful and now deploy stage is running and hopefully it will also be successful so once you see all the stages green here that means your Jenkins build is successful and you can see the time which it took to execute every stage so for the cloning and cleaning stage it took 6 second for testing stage it took a second and for the packaged stage it took 8 second as well now if you want to see more logs of every stage for example I want to see the loss of this stage I can hover over it and I can click on the log button here and you will see all the laws related to this stage so if you want to see the test logs then you can just click here and you all the log related to the test stage which is similar to view console output ok so this console output is showing every log from every stage but if you want to see the individual log from every stage then you can see it from here ok and then you will have the good overview of your Jenkins pipeline because you we'll see what happened in every stage which stage is failing and if some stage is failing what are the laws showing here and based upon these logs you will be able to you know take some steps whatever stage is failing you can directly view that log and then you can take some steps and fix it so at last you will be able to see all the stages green that means your project is successfully build tested and deployed so this is how you can use Jenkins pipeline using your Jenkins job configuration now in the next video I'm going to show you how you can add this Jenkins file to your maven repository for example or any other repository and then how to use this jenkins file from your github into your Jenkins job so stay tuned and please rate comment subscribe and bye for now