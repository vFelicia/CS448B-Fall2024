hello guys welcome to Java fix tutorial for beginners using SQLite database in this video series I will start with creating a Java effects project and I'm going to connect it with SQLite database and then further we will move towards creating a login page using SQLite in JavaFX and how we can insert delete or update data in SQLite database using Java effects and in the later videos we will also see how we can use SQLite and jar effects controls like buttons or text text boxes or tree view or list view or combo box with SQLite database now in this first video I will start with creating a new SQLite database and we will download a SQLite jar which is required to connect to SQLite database using JavaFX okay so let's get started now there are many ways of creating SQLite database on your Windows operating system or on Linux or Mac OS what I like is I would like to have a plugin in my Firefox browser which allows me to create a SQLite database using SQLite manager which it provides so what I'm going to do is I'm going to open my Firefox browser and I will click on this button on the right and I will just click this addons button and in here I will search for SQLite and it's going to show you all the result and we are interested in this first result which says SQLite manager ok so just click install and it's going to download and install this SQLite manager and it's going to say restart your web browser so I'm going to restart my Firefox web browser and once it's restarted SQLite is added to your Firefox browser now how to search for this Escalade manager so now once again go to this open menu and you can see here Escalade manager is added to your options here ok now if you don't find this Escalade manager here you may need to go to customize and in here you will find this Escalade manager and then you just need to drag and drop this into your open menu so for example this is Escalade manager you can just drag and drop this in here ok and then you will be able to see this Escalade manager ok so once everything is finished you just go to this open menu and open this Escalade manager now for the first time when you open this SQLite manager it's going to look something like this so to create a new SQLite database you can just go to database at the top and you can just say create database or otherwise you can go to this icon and select this icon and it's going to prompt you to create a new database now for example we are going to create a database called employee DB ok and click OK and it's going to ask you to save this database at some specified location so just select some location which you can remember and just say create folder and now your SQLite database will be created so you can see my SQLite database is shown at the top here and when you go to the location where you have saved your database it'll look something like this so my database name with the extension of SQLite now it's not necessary that your SQLite database must have this extension SQLite it can have the extension dot DB or some other extension but in the case of SQLite manager it creates the database with this extension which is s collide ok so now we are going to create a table inside this SQLite database so just go to this table category and there your database name and then right click and just click this option which says create table and in here first of all we are going to give the name to our table for example employee ok and in this employee table I'm going to create some columns for example first is ID second is name third is surname fourth is age and we are going to create two extra fields for username and password ok so just write username and the next field is password okay and then give the data type to all of them first ID is an integer type the name is text type surname is text age is integer username is text and password is text ok and in here you can choose your primary key from here so let's say our primary key is ID and in here you can choose if you want your ID to be auto incremented or not so let's say yes we want that it should increment with every insert and you can choose if you want to allow the null or not and if you want to allow the unique or not so I will leave them as default and I will just say ok and it's going to create this table inside the database just click yes and now you can see employee database is created and you have these columns inside your database right so just select your table and go to browse and search option here and now we are going to insert some values in this table so just click this option which says add and now let's add some values for example the ID name is for example Toms name is something and age for example 22 and user name for now let's say it's deaths and password is also test for now ok and click OK and click OK and it's going to add this first row inside your table ok so now you have one database and inside your database you have this employee table with one row of data now second step to connect your SQLite database with your Java effects application is to have a SQLite JDBC jar file so just go to your browser once again and search for SQLite JDBC jar ok and search for this and the first option which will appear here will be from bit bucket dot org slash X serial slash Escalade JDBC so just select this first option from here and it's going to give you these option and we are interested in the latest release which is at the top so just select this SQLite JDBC and whatever the latest version is and download this jar file and save it somewhere so I have saved this jar file at the same place as my database so I know that this is a jar file I need to use ok so now we have all the required things to create our Java effects project using SQLite database in the last video I've shown you how to create your SQLite database and how you can download this SQLite JDBC jar to add to your project now in this video I'm going to show you how you can create your first Java effects project and connect it with SQLite database so let's get started I'm going to use Eclipse IDE for this tutorial series but you can use either NetBeans or IntelliJ for the same purpose also ok so let's create our first Java FX project so I'm going to go to file new others and in here I will choose the JavaFX project and click Next and in here I'm going to give the name to my JavaFX project we are going to create a login app so I will name it as login app ok and click finish and our project is created and it contains the application package and this mean dot Java class and application dot CSS class what we are going to do in this project is we will try to follow the MVC pattern or Model View controller pattern which is a standard in making you eyes and for that we are going to create a controller class model class and for example login dot F XML file so right click on your application package and we are going to add a new F XML file so go to others and choose from here and the JavaFX category a new F XML document and click Next and we are going to name it as login ok so login dot F XML and click finish and this login dot F XML is added to your project now we are going to add some classes right click on your application package once again and add loss and this class we are going to name it as for example SQLite connection and this class we are going to use to prepare a connection for SQLite with our project ok now we are going to go to our login dot F XML file and right click here and go to source and in here go to the last option which says generate controller and it's going to create a controller class for us and its name is login controller ok and I'm going to click OK and it's going to create this login controller the Java class for us now we are going to create the model class so right click on your application package once again create a new class and this time we are going to name it as log in model class okay and click finish so these are the classes we are going to require to create our project we have login controller dot Java class login model or Java class main dot Java class SQLite connection dot Java class and login dot F XML file which we have recently created ok now the first thing what I'm going to do is I'm going to go to my main dot Java class and what it's doing it's doing nothing but creating a scene and it's adding the scene to our stage and it's going to display the stage now we want to launch our login dot F XML file from here so instead of using this border pane root is equal to new bada pane I'm going to add this line of code which launches this login dot F XML file when we run our project and fix the import so click on this bulb and import parent and once again click on this bulb and import F XML loader so now we have included this line of code which launches our login dot F XML file which is this file which we have created and just remove this 400 and 400 from the scene constructor because it provides the default size and we don't want to provide the default size we want the size of our login dot F XML file right so this is our code in main dot Java file now next what we are going to do is we are going to go to our SQLite connection dot Java file and in here we are going to create public static methods so just write public static method and what it's going to do is it's going to return data type called connection and we are going to name our function as for example connector and we are going to import this library called Java dot SQL dot Astrix okay so import this and now we are going to write some code inside this connector method so just add our try/catch block first and inside this trycatch block we are going to add these three lines okay the first line of this code is class dot for name and inside the brackets you need to pass this constant string which is constant and you need to exactly right the same constant lines so just right o RG dot sqlite dot JDBC okay and the case should be same and what this for name function does it returns the class object associated with the class or interface which is given as a string argument so we are going to call this JDBC class in order to connect to the SQLite database right now create an instance of connection right so just write connection give the name to your connection object is equal to driver manager dot get connection and inside the brackets just pass this string which is JDBC SQLite your database name now this database name you can give in two ways first way is to just copy the part where your database is present for example this is the path where my SQLite database is present which I have created in the last video and I'm going to just add this part in here okay so our part looks something like this which is in C folder and just add these double /f instead of single forward slash so that this error will be gone so the first way is to directly give the part of your SQLite file and then it's going to connect to this database using this path okay otherwise if you want to add this database to your project what you can do here is you can delete the path and just leave the name of your database which is employed DB dot SQLite in my case and then go to the location where this database is present and then drag and drop this database inside your login project okay so it should be the login project not inside the source folder not inside the application package you need to drop this under your project okay and click copy and it's going to add this database inside your project so just remember it's not inside the source it's inside our project folder okay now what if this line of code does is it searches for the database which we have provided here in the parent folder inside your project and if it's found then it's okay otherwise it's going to create this database with this name inside your project folder okay so it's better to have your own database inside the folder now one more thing we are going to do here is we are going to return in the catch block null because if this method throws then we are going to return null here okay so this is the code which we will write in the SQLite connection method which contain only one method which we use to connect to the database now next step is to go to your login model dot Java class so go to this class which I have created for the model so go to this login model dot Java class and in here we are going to create a constructor first and at the top we are going to create an object for this connection okay so just copy this connection from here and go to your login model and at the top create an instance of connection and inside this login model dot Java class also we are going to import this class called Java dot SQL dot Astrix okay and now your error will be gone related to this connection now inside your constructor take this connection object and then call the SQLite connection class so just call this connection class and then call this method which we have created which is connector and just close it now if you see this function which we have created in the SQLite connection class which is connector it's going to give you null if this code throws right so we need to handle this null situation also in this constructor for the model so just say if our connection is equal to null then what we are going to do we are going to just exit our application because if the connection is not successful it's no use to run our application right so now we are going to create one more method and I'm going to name it as is DB connected and it's going to return a boolean value so just return a boolean from here and inside this method what we are going to do is we are going to take this connection object and we are going to call a method called is closed on it and what this is closed method does is it's going to give you a boolean value so it's checking that whether your connection is closed and if it's closed is going to give you the true value otherwise if the connection is successful it's going to give you the false value and we need to add this code inside a trycatch blocks so just add a trycatch block around this code so it's not going to give you the error okay so in here we are just going to return this connection is closed and we are going to check the negative condition so if the connection is not close then we are connected otherwise we are going to return false so these are the two method we are to require in the login model dot Java class now let's go to our login controller dot Java class and in here first of all we are going to implement the initialize able interface and it's going to ask you to implement a method which is initialized so just implement this method from here and inside this class first of all what we are going to do is we are going to create an instance of login model class so just write public login model and give the name to your object which is login model itself is equal to new login model ok so we have created an instance of login model ok now what we are going to do is we are going to create a label here so just add this line of code which is at the rate F XML and then in the next line just add this variable called is connected which is of label type and which is private inside this log in controller class and just import this label from JavaFX scene control ok now go to your initialize method and take this login model and then write if and inside this if condition just call this login model dot is DB connected method and this is the method which we have created in the login model right so if the DB is connected then we will show in this label that our database is connected so just write is connected dot set text and then you can just write here connected else we are going to display in the label that our connection is not successful so you can just write not connected so this will be the code for your login controller class now we can move to the login F XML file so right click on your login dot F XML file and open it with scene builder and once this scene builder is open just click on the anchor pane here and first of all we are going to give some width to this anchor pane so just go to layout and in here just give the profit is equal to 300 and pref height is equal to 300 also and press enter and it's going to give you this kind of frame here now next what we are going to do here is we are going to go to the controls section here and we are going to take a label and just resize your label and go to the properties and we are going to change the font size of it so go to this property called font here and change the font to for example 18 okay and I'm going to just remove this text on the label and I'm going to say that this is our status okay so text is status here and we can change the color also for example red now select your label and go to the code section here so go to this category called code for your label and as a FX ID we need to give the same ID which we have given in here in the controller class so our label name is is connected we are going to give the same name in here as a FX ID okay now one last thing which is remaining here is connecting our controller from this F XML file so go on the left hand side and click this option called controller and from here you can choose your controller which is application dot login controller okay and then save everything in the scene builder so save everything and go to your Eclipse IDE and right click on your project and refresh everything now one last and most important thing which is remaining here is to add the SQLite JDBC jar file which we have downloaded in the last video which is this file right so to add this jar file what we need to do is we need to go to this section which says JRE system library ok so inside your project you will find this JRE system library and right click on it and then go to build path and then click configure build path and in here we are going to just click this option which says add external jars and then search for this jar file ok so wherever you have saved this jar file which we have downloaded in the last video just select this SQLite JDBC jar file and then open and what it's going to do is it's going to add this SQLite JDBC jar file into your libraries and click OK ok now let's run our application and now it says connected ok so our code is working successfully now go to your SQLite connection dot Java class in which we have written our SQLite connection and in the catch block you can just write this out and you can print the exception here why we are doing this because let's say we have provided some location for this database which doesn't exist ok so this is the location of the database which doesn't exist because our data base is in the main folder and not in the image folder right and save your code and run it and you can see this image slash employee B dot SQLite does not exist in C folder ok so if you give the wrong path it's going to throw the error and it will be printed using this system dot out print line code ok because what we are doing here inside our model constructor that we are exiting from our code and if your SQLite class throws then it will be exited and you will never know what happened okay otherwise you can also add a message here so you can print message under this if condition before exiting that the connection is not successful right so once again the part is wrong and you run your code and you can see here it's printing connection not successful so you know it's throwing and you are seeing the error here so let's change the database path to the actual path of the database and run it once again and now it runs successfully okay now one more thing I want to show you here is when you rightclick your project and go to the properties you will find in resources the path to your project in the location just copy this location and open the location of your project in the folder Explorer so this is the location where my project is and you can see employee DB dot SQLite is there okay now let's say that we change the name of the employee be for example employee DB one okay and let's see what happens so save your code and run it and you can see here it's still saying us connected but the DB name is changed so what happened here so what happened here you can go to your project once again and you can see that there is a new database created with the name employ DB 1 dot SQLite right so this is going to create a new database if it doesn't find the disturb ace it creates the new database in your project folder and then it tries to connect it and that's why your connection is successful but you are never going to you know query this database because you don't have any table here you can see the size is zero but our original database size is 96 KB because we have created in the last do a table inside this database so just remember this thing also if the database name is wrong then it's going to create a new database with the wrong name for you in the same folder okay so just provide the exact name for your database here in the last video we have written some code to connect our JavaFX app to SQLite database and we have created some classes for our login page which were login controller dot Java login model or Java SQLite connection dot Java and login dot F XML right now we are going to complete this login functionality in this video so first of all what we are going to do is we are going to open our login dot F XML file so right click on it and open with scene builder I have already opened it and in here we are going to add some controls so that we can check the username and password against our database values ok so what I'm going to do is I'm going to add some controls here so first control will be our text field which will be for the username and the next control will be a password field which will be for the password and I'm also going to add a button here so just add this button now select your both text fields and the button and we are going to go to the properties and in here we are going to change the font of these text field and the buttons and we are going to make it 18 okay and now we will give some prompt text to the user named text so select your user name text field which is the top one and then go to the property here and in the prompt text property you can just write user name okay and it's going to show here as a prompt text and the same we will do for the password feels so just right a prom text for example password okay and press enter and next what we are going to do here is we are going to select our user name text field and go to the code category and we are going to define the ID for the username text field so for example I will just write txt user name okay and same we will do for the password so the ID here will be txt password and I will just select my button and I'm going to change its text to login so just write login on the button text here so our design is complete so you can save our F XML file by going to the file and just click save here or just hit ctrl s for saving your file and then go to your Eclipse IDE and refresh your project and you can see all these text fields and IDs are added to your login dot F XML file now what we are going to do next is we are going to go to our login model dot Java class right and in here we are going to create a new method and this method we are going to name it as is login method and it's going to return a boolean value also so just write public boolean is login and as a argument we are going to pass two arguments here for checking username and password so just write string user and the second argument will be string Pass okay and just close this method here and now what we are going to do is we are going to add our try catch block and just above our try catch block what we are going to do is we are going to define some variables okay so first variable will be the prepared statement variable and you can name it prepared statement itself and the second variable will be the result set okay so just declare this variable called result set and name the object as same and now we are going to declare a string variable and we are going to name it as query because we are going to prepare our squarey and assign it to this query variable okay and in here we are going to write some query to query the database so what we want to write here we want to select username and password from our table right so we can write select Asterix from our table name and if you remember we have created this database in the last video and just open this database from your project where you have defined your database inside your project so just open it from there and you can see we have this employee table inside our database so just call this database inside this query and then we will add our where clause here so just write where your username column name so our username column name is username and password column is password here okay so we are going to use these column names just write user name is equal to question mark and password is equal to question mark also okay so what this query is basically doing is it's querying your database and squaring your table employee and it's searching for the username and password whatever we provide from these argument user and password right now go inside your try block and take your prepared statement and we are going to create a prepared statement from the connection so just use equals and then if you remember in the last video we have defined this connection object so take this connection object and then call a method called preparedstatement which takes a string argument which is our query so just pass our query variable here and then close the code and then once again take your prepared statement and then call a method called set string and it takes two argument also one is the parameter index and other is the value so parameter index is for the username and password and here index start from one so the index for username will be one and index for password will be two okay so just write one and then we will pass this string variable which we are taking from the argument as a first argument in a same way just copy the same code and as a second index we are going to pass this password okay and now we are going to take this result set object and paste it here and then just write your prepared statement dot execute query okay and now you can take this result set to see what is the result inside it so you can just write if result set dot next and then you can just go inside the if statement and you can return true from here okay now what this result set is doing so once your prepared statement is prepared and then it executes this query with these values so user will be replaced here at the place of this question mark password will be replaced here at the place of this question mark and then your query is executed and your result will be saved here now if it returns any result using this next method on results that we will find if it is returning any result or not okay so if we have a result more than one it's going to go inside this if condition and then we know that our username and password is correct okay otherwise what we are going to do is we are going to just write else and then we are going to return false here and in the catch block also we are going to return false if some exception occurs we want to show that username and password is not correct now finally when you have written your code it's a good practice to close your prepared statement and result set so just add a finally statement here so if you know with try and catch you can also write this finally statement which is always executed if you have any exception or if you don't even have any exception this line of code inside this finally is always executed so take your prepared statement object and then call a closed method on it and same we will do for the result set so just use result set dot close now if you can see here this prepared statement dot closed and results at dot close is giving us this error so what this error is first of all we need to initialize this prepared statement with null and also the result set with null and then just click this bulb here and then use the first option which says add through declaration is going to add this option before your method which is throws exception okay and then this error will be gone so now our is login method inside our login model is complete so let's go to the login controller dot Java class and in here we are going to define two text fields so let's declare the text field so I'm going to just copy and paste something like this and in here we will just add a text field from here and for the second text field also we are going to add this text field so this text field we are going to assign the same name as we have assigned in the effects ml file so select your user name text field and take the name which you have assigned as a effects ID in the code section and then paste in front of the first text field variable and then take your password FX ID which you have defined here and paste it in front of this second text field now let's define a method in which we are going to check this username and password so it's going to be a public void login method for example so just write login and it's going to take this action event method so just add action event and then event as an argument and then close this method and inside this method what we are going to do is we are going to take the text from our text username and text password and we are going to check this so just call if and then using your login model object which we have created in the last video inside the controller just take login model and call the method which we have just created which is is a login method right and in here it takes username and password so we can use these text field so just use text a user name dot get text and second text field text password dot get text okay and then close your if statement and it's going to show you this error so we need to enclose this in our try catch block and we'll be gone and then if this is login method returns us the true value we can set to the labels so we have declared in the last example a label variable we are going to use the same label and then in here we are going to set some text here for example username and password is correct else we are going to set the different methods so just write else and we are going to take same label and this time we will just say that username and password is not correct so just write is not correct and in the catch block also you can just paste the same code which you have written in the else condition okay so if it throws some error then we can also display user name and password is not correct now one last thing which is remaining here is you need to connect this method to the button click event so just copy this method name go to your F XML file select your button and then go to the code and in here in the on action category just select this login method and save your code and then go to your project and then refresh your project and then let's run our project so our app is running now so let's give some random username and password and let's check what message it shows so just click login and it says username and password is not correct and now let's give the correct username and password and correct user name and password in our database table is test and test you see username is equal to test and password is equal to test so when we give username is equal to test and the password is equal to test and when we click login now it says username and password is correct okay so what this app is doing it's basically querying your database table and it matches these values against your table values and if these values are correct it's going to show us user name and password is correct otherwise in the case when we give the random value and click login it's going to give us login is fail or user name and password is not correct till now we have seen how to connect our Java flex application with SQLite database and how we can create this login frame using SQLite and our JavaFX application right and whenever somebody gives his username and password and click login button it says username is correct or not okay now in this video we will see how we can open a new window whenever this login is successful okay so on the successful login we want to open a new window for example it could be for the user of window right so let's get started now see how we can do this so till now we have created this login controller login model and SQLite connection dot Java class and login dot F XML file now first of all we are going to create one more F XML file and this F XML file we are going to name it as for example user so user of the successful username and password this will be the user you know user page okay so just name it as user and just click finish and right click on your user dot F XML file go to source and in here generate controller and just click OK so now we have user dot F XML file and use a dot controller dot Java file write the model for this we are going to create in the next video because in this video we just want to open this user F XML file and we are also going to see how we can transfer the user data from one frame to another okay so for example we want to display the username on the you know user F XML file whenever user logs in so let's see how we can do it now first of all what we are going to do is we are going to go to our user controller dot Java class and in here first of all we will just implement the initialize able write and then add the unimplemented methods and then we are going to create a label here and this label will be for the username for example okay so just right at the rate FX ml and then private label for example user lb l for user label okay and add the imports for the label and now we are going to create one more function here and this will be public void once again and this will take one argument which will be a string and we will say its user now whenever the user logs in I want to show his name on the label of this other of XML file which we are going to open so we will just take this label and then we will call a method called set text here and then we will just set this user from here okay so this is our controller code now what I'm going to do is I'm going to open my user dot F XML file and then open with scene builder and in here we have the anchor pin let's delete this anchor pin and just add some new container here we can take a border pins for example okay so just take this border pin and drag and drop and border pain has these six component top left center right and bottom it's I think five right now in here in the border pain what I'm going to do is I'm going to add a label so just search for the label control here and I'm going to add it in the middle for example okay well let's add on the for example top right and then in here I'm going to change the name of this label so I will just take the same name which I have given here and then go to code and then in the effects ID just paste this ID here okay and save it and once again go to the property and here instead of label I want to just say user welcomes for example okay now the next thing is to connect this app XML file with our user controller dot Java class right so go to controller here and then choose your application dot user controller and now save you're good okay and after saving just refresh your project and now we will go to the login controller dot Java class and in the last video we have written a code and we have created this function and in this function we are testing whether the username and password are correct and if the username and password are correct then we were printing the username and password is correct on the label on login frame right so in here what I'm going to do is if the username and password is correct which is this if condition then I'm going to go inside the safe condition and in here I'm going to write the code to open this new user dot F XML file so what we need to do here you can go to the main dot Java file and from here you can just copy this code we will use this code more or less as it is but we are going to change something here so just copy this code from here from Maine dot Java and go to the login dot controller dot Java class and in here what we are going to do is first of all we will add stage so just add stage here stage and the name of the stage for example we will take this name right primary stage is equal to new stage ok now the next thing we want to do here is we want to just take this F XML loader and we will create a new instance of this effects ml loader so just write FX ml loader loader is equal to new effects ml loader and then take this loader and instead of this FX ml loader just paste it here ok so what we are doing we are just creating an instance of loader first and then calling the load method onin and instead of login not FX ml we will just call user dot effects ml because it's the name of our effects ml file right just import the stage here and now what we are going to do is instead of using parent we will use pane here so just change parent to pain okay and then import pain and then what we are going to do is we will go to the end of this load function here just before this last bracket you just add a dot and then add open stream from here and then you can now once again see it's showing the error and this is due to it can throw an exception so we need to catch it so just click this bulb here and then you can add a catch Clause to the surrounding try ok because we already have the try catch we just need to add this more one more catch block here so just click ad catch Clause to surrounding try and now the error will go okay now on the next line of Declaration of this pain what we are going to do is we are going to declare our user controller class okay so just call user controller and name it has use a controller for example is equal to and then what we are going to do is first of all we will in the bracket we will call our user controller so we are going to cast the user controller first so just call user controller and then after this bracket what we are going to do is we will take our loader and just paste our loader here and then we will call a method called get controller okay so just add this method which says get controller okay and now we have the instance of our user controller class right which is this one and it has this method which we have created let's change the name I forgot to change the name of this method so this method name we can say get user for example okay and just save it and then go to your login controller dot Java class and in here just copy your user controller object from here and on the next line you can just call this get user function okay and as an argument it takes the string so we want to display the user name from here so user name we can get from this text box which was for the user name so just take text user name dot get text just copy this code from here and just paste here as an argument for get user okay so now I think our code is complete so we can save everything and run our code and now we are going to give the user name and the password which was test and test as we have seen in the last video and then just click login and it's going to open this new no and you can see the name test is appeared on the label right this is due to because we have provided username test here if we if the username was different here for example some name then that name will be displayed here and you can also add a label here which says welcome whatever the user name for example test okay so in this way you can open a new window when your login is successful and then you can display the user name on this label of the new window in this video we will see how we can hide our first window when we open the second window so for example we have our login window here and when I log in and log in is successful is going to open the second window but the first window which is the login window is not hidden so I want to hide this and then open this and we will also see how can we create a sign out button so that when we press this sign out button is going to open our login window once again so let's get started first of all what I'm going to do is I'm going to go to my user controller dot Java class which I have created in the last video okay this is the user window once user logs in then this is the controller for the user dot F XML file right now in here I'm going to create a method for the button click event okay so I will name my method as for example sign out method okay so sign out okay and it takes one argument which is action event so just add action event and give the name to your event here and then what it does it's going to just open the last window right but first of all we need to hide our login window so go to your login controller dot java class and this is the method which we are using on the successful login and password right and we are opening from here the new window which is user window using this code so go inside this method and inside this if condition just above the Declaration of your stage what we are going to do here is just write node and this is Java effects scene node okay so this will show the error so first of all import this Java FX dot scene dot node okay so just imports Java FX dot scene dot node and now in close this node inside these brackets and then call this argument called event here and then call get source and then once again and close this code inside the brackets here and then call a method called dot get seen so just call this get seen here and then call a method called a get window here and then you have your window so you can hide it so you can call a method called hide here okay so this is the code to hide your stage okay and now let's run our code and let's see if this login window is hidden using this code or not so I'm going to save everything and run my code and I'm going to give my username test and password test and I will click login and now you can see this login window is hidden right now we want to do the same for the user window right so we want to create a button which we can click and we can go to the login window so for that we have created this user controller dot Java and in here we have the sign out method which I have created just a moment ago so in here what I'm going to do is I'm going to my login controller Java class and I will copy all this code from here right so this is the same code which I'm going to use to you know open the login window ok so just use this code from node to the end of your stage show ok so copy it and now go to your user controller and go to your sign out method and paste it there and it's going to show this error we want to remove this user controller you know declaration from here because we are not passing any you know parameter from one window to another so just remove this user controller definition here and we will also remove this call of the function which was get user which we have created in the last video so now this is your code okay now in here we want to call the login dot F XML file from the user right so just call a login dot F XML file and this code throws some error so you need to enclose your code inside a trycatch block so just add a trycatch block here and inside your try catch block just enclose this code so so just paste it here okay and your error will go okay so just write this code here and now one thing remains is we need to add a button to our user dot F XML file so just open your user dot F XML file using scene builder and once your user dot F XML file is open first of all what we are going to do is because it's a border pain which we have used in the last video and in the last video if you remember we added this label so what we are going to do first here is we will right click on our label from here and then we will wrap it in the H box so just go wrap in and then choose hbox okay so it's going to wrap your label in a horizontal box and now take a button and place it inside your horizontal box here okay and now what we are going to do is we are going to name our button as for example sign out right and then go to code here and in here on action we are going to give the sign out method which we have created right this is the sign out method which we have created now save your code and then go to your Eclipse IDE and then refresh your project once again so refresh it and now you are ready to go so just run your project and it opens my login window so I will give my username and password for example test and test and when I click login it opens my user window and login window is hidden and when I click Sign Out it opens my login window and user window is hidden right so in this way you can create a sign out button and hide one bin window when you open the second window so I hope you have enjoyed this video please rate comment subscribe and