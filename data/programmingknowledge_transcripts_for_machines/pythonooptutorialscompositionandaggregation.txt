in this video I'm going to show you what is composition and how to use class composition in Python so to start with I have two classes here one is an employee class and other is the salary class now in the salary class I have this init method which takes two argument P and bonus and it sets these two arguments to the member variables of this class also I have a method called annual salary which is used to calculate the salary now in the employee class I have this constructor which takes four arguments which is name age P and bonus now what do you think can we apply inheritance here the answer is no because there is no is our relationship between salary and employee so employee is not a salary and salary is not an employee but somehow I want to delegate the responsibility of calculating the employee salary to the salary class because calculating salary is in itself is a big task I have just simplified this class in the form of just calculating the annual salary but the employee can have his own taxes or he has taken some leaves or many factors affects the salary of an employee so this salary calculation let's say we want to delegate to the salary class but whose salary is this this salary is the employees salary so we know that we cannot use inheritance here but we can use a concept called composition here and the composition means that we are just delegating some responsibilities from one class to the another class so how to delegate this responsibility we can just create one more variable here for example self dot obj underscore salary which is the salary object we are going to create using the salary class okay and this salary class takes two parameters one is pay and other is bonus which we are already providing using the employee init method so I'm going to just pass this pay comma the bonus into the salary class so we are instantiating the salary class inside the employee class so here one class which is an employee class acts like a container of the other class which acts like a Content okay so salary class is the content and the employee class is the container of this salary class now in order to calculate the total salary we can define one more method here and I'm going to just say total underscore celery and then what we are going to do is we are going to call our object salary member variable because this gives us the object of the salary so I'm going to just call object salary and we can call this method from the salary class which gives us the annual salary and now I'm going to just create the object of this employ class so let me just write EMP is equal to employee which takes four parameter first is a name second is the age third is the piece so let's say P is 15,000 and the bonus is 10,000 and now I just want to print the total salary of this employee so I can just write print and then EMP object dot the total salary which is total salary method and you can see here this total salary is returning let me just use the return keyword also because we are returning this annual salary from the salary class using this total salary method so let's run the code once again and let's see what happens and you can see annual salary is printed and this annual salary is calculated using the salary so what this employee class has done it has delegated some responsibilities to the other class which is the salary class which gives us the annual salary of an employee and this here is called composition now one interesting thing which you will notice here is we are not instantiating salary here we are just instantiate the salary inside an employee class so as soon as you delete an instance of an employee the salary class instance will be automatically deleted so whenever you want to delegate some responsibilities of one class to the another class it's called composition one more example of composition can be a book class and a chapter class so a chapter is not a book and book is not a chapter but we can delegate some responsibilities from a book class to the chapter class so this is how you can use composition in Python now in composition the relationship between the classes which have some Association is represented by a keyword part of so salary is the part of employee so the key word we use in composition is part of now let's see how we can use aggregation instead of composition between these two classes so let's say I will not use this salary class inside the employee class but what I'm going to do is I'm going to pass an instance of celery here so I'm going to just write celery and this will be the object of celery class which I'm going to pass in the init method of the employee class so let's create an object of the salary so I'm going to just write salary here is equal to the salary class and we will instantiate the salary class by these two argument which have given in the last video to the employee class so I'm going to just copy these two arguments and paste it here and I'm going to remove this comma here so now what we are doing here is we are first of all instantiating the salary class and now the salary class we can pass to the constructor of the employee class and this is the object which we have passed using the salary class object and then I'm going to take the salary class object and I'm going to assign the salary class object to the member variable of the employee class which is obj underscore salary now because we are passing the salary object that means this member variable is the salary member object and we can call any public method from the salary class using this member variable now so let's run the code and let's see what happens and we get the same result as we have seen in the last video in the composition example so what we have done differently here so instead of using this salary class inside the employee class we have first created an instance of the salary class and then we have passed this instance to the employee constructor which can be used inside the employee class and this type of relationship is called aggregation now let's see what are the special properties of the aggregation the first property is the relationship between the associated classes in aggregation is defined by the keyword has a so employee has a salary because now we are first of all creating the salary object and then passing it to the employee so now we are not directly using salary inside the employee class the second property of aggregation is the associated classes have unidirectional Association so we are just passing salary object to the employee class we are not passing employee object to the salary class so it's a unidirectional Association only salary can be passed to employee not the other way around and the third property of aggregation is we have created the salary object and the employee object so both these objects are independent of each other so if one object dies the other survived so both the object are able to survive individually so these are the three properties of aggregation now let's see the difference between the composition and the aggregation so I'm going to split the screen so I'm going to just right click on this tab and I will say split vertically and here I'm going to open the example of the composition so on the right hand side I have the example of composition and on the left hand side I have the example of aggregation let me just maximize this so you can see it and now let's discuss about the differences between the composition and aggregation so the relationship in composition is defined by a keyword called part of so salary is the part of employee in aggregation there is no part of relationship but the relationship is defined by the keyword called has a so now in aggregation we are defining the instance of salary and then passing it to the employee class and salary is not the part of the employee class we are just passing it to the employee class so aggregation we use has our relationship and in composition we use part of relationship the second difference is when you delete the employee object the salary object will be automatically be deleted so salary object is dependent on the employee class but in aggregation the salary object and the employee object are individually independent so they can survive individually if one object dies then it doesn't matter that the other object dies because we have created object individually now in composition both salary and employee are interdependent on each other but in aggregation the relationship is unidirectional so the association between the employee and the salary object is unidirectional we can only pass the salary to the employee class but we cannot pass the employee object to the salary class so these are the three major differences between composition and the aggregation I hope you have learned something new this time and I will see you in the next video