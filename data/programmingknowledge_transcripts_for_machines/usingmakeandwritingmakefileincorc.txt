hello guys in this video I'm going to show you how you can create and make make files in C or C++ in this test case I'm using C++ uh to show you the demonstration on make files but the same rule you can apply in C programming also okay so to start with I have four files which are in C++ I have a main do CPP function 1. CPP function 2. CPP and functions. H so the main do CPP let me show you what I have in the main.cpp so I'm executing the function one and function two in my main.cpp and the dependency is functions. Edge which have the Declaration of both function one and function two okay so it doesn't matter whatever you program you have you just need to make the make file this is your requirement for example so why first of all we can you why should we use make file ideally when uh we have this make file and it's in the folder sample we can just go to this uh sample folder and we can just give this command g++ main.cpp function 1. CPP function 2. CPP and we want to make the executable file called hello and when we give this uh command it will create us this executable file right this is a simple GCC uh command but for example you have 50 or 100 header files and CPP files you cannot write all the CPP file name and header file names and all the dependency and whatever you need it becomes tedious to compile your program if you have to do it with your hands so that's why we use make file so make file we use to uh reduce use the compilation uh time and uh because whatever files are already uh compiled and they are not changed the make file detects them and the make file doesn't execute the re already compiled file it only uh executes the files which need compilations right or which have been changed so that's why so let's make a simple MI file I have uh in the same folder I will create a simple make file I will right click and create a new document empty document and I will name it as make file and just uh see here make file how I have spelled this make file with the capital M so it is the common convention to start make file with capital M then all the letters are small so just write this and I'm going to open this make file here okay and in here I can write a Target so I will write for example all and then I will press enter and I will just copy the same command which I have used to compile my program and paste it here but common convention in this uh execution of command and Target this is a target you need to give a tab in order to execute the command so after the target you need to give this tab to detect that it's a command okay and I will save this make file here okay and by default when you write this command make here it will detects the first Target and it will execute the first Target so for example if you have uh two Targets compile and I don't have anything in compile for example then by default it will execute all because it's the first Target and not compile right and so let me show you the demonstration first so I'm in the sample file and for example I have already created my make file and I will write here make it will detect that first Target is all and it will execute this command so I will enter and you see here first command is executed and my executable file is made okay and for example your compile your your command is in the second target which is compile then how you can uh compile this or how you can give the make file command you just need to give make and then compile because we need to execute the second Target and by default it detects the first Target right so this will also produce the same result once you execute it you see here it executed the same Command right so this is about the commands Okay and in make file you can also give command by this hash so you can give this target will compile all the files Okay so like this you can provide commands to remember what or to see that what this target is made for so you can give command starting with this hash sign okay but we can uh see that this this is doing the same thing this is executing the same command in here I have just copied and pasted this command and makes file can do more than that so for example I will give you the other example I will just delete this uh all the code I have written and I will just write this make file commands so I will explain you what I have written here first of all here let me explain you from from here first so I have created three objects because I have three CPP files right and so the this is a target main. o function 1. o and function 2.0 is the Target and the dependency so whatever you write after this colon and with the space it's the dependency it's called the dependency so main. o has the dependency main.cpp which we have in our program right main. CPP this here so and when when you call main. O it will execute this command g++ minus C minus c stand for compile and it will compile main.cpp and it will check first whether it fulfills the dependency or or requirement of main.cpp so it should have main. CPP first because it depends upon uh our Command depends upon this okay so this is called dependency this is called Target and this is called command okay in the same way I have created the object of function one and function two which have the dependency function two has dependency function 2. CPP and I'm executing the function 2. CPP here and function 1. CPP here okay and the clean command I have given to to clean all the object file and to clean or remove all uh the executable file so when I uh execute make clean it should remove all these object file and the uh executable file it has made now we come to this part hello and what this is doing is it is executing all our object files which we have created right so it has the dependency main. o function. o and function 2.o which we have created here okay and then it will execute or the command g++ so it will execute main. o function 1.0 function 2.o and we are creating the executable file hello from it right and then we call this target in our all target so when we write make all then our program is executed executed so it will go here first and it will see that we have to make this and the dependency of this is these three files then it will execute these three and then it will execute this command and create this executable file right so let's save this and Let's uh compile it so I will write make all if you write make all then also it will go to this first Target because this first Target name is make all or you can give uh the command make also because it will by default go to the first Target right so right now I will show you this by make all and press enter and you see here first it has gone to compile main. CPP so it goes here because all depends upon hello and hello depends upon main. O So main. o will be compiled first or main. o will be executed first and it depends upon main. CPP so this will be compiled first right then our function one will be compiled and then our function 2. CPP will be compiled and then it will create the result and it will show us the result now I have shown I want to show you what this clean does right so it's just a remove command of uh this object file star object or hello which is our executable file name right so I just want I just want to show the four folder and see here what happens when I execute make clean so when I execute make clean see here when I have executed make all it has created main. o function 2. o and function 1. o right because uh we have our dependency in here and when I click or when I type make clean and press enter it will clean all our program and it will remove all the object file and executable file from here and once again when I make all when I give this command it creates object file and executable file once again right but still you can further improve this uh by declaring objects so how can we do this so let's make uh this make file more modular so I will just remove all this first or let's Let It Be There we will comment it and I will just paste this code here and just remove this okay so in make file we can declare variables also and variables are declared like this so I will say the comment declare the variable and variable you can name it uh according to you but uh make file has some conventions so just uh I will show you where you can can read about make file because make file is a very broad topic and I'm showing you just a basic things okay so you can declare uh variables like this cc is g++ so this is our uh comp type of uh compiler we are using and we we can set the variables so this is uh a variable and this is a variable and so in this we are telling uh that which types CC will come the variable CC will contain which type of compiler we are using we can change it uh to GCC also if you are if you have a c program and in C flag we are giving the option which type of compiler option we want to give so minus C is for compilation minus wall is for giving the warning so if you declare this kind of variable then you don't need to change for example we are using this CC here so whenever you want to change this g++ you don't need to change g++ here here here here you just change this variable CC here to GCC and and this will be implemented here so that's why we declare variables so we have CC variable and C flag variables and this program or this code is the same as old uh which I have already mentioned and how you can call these variables here by giving this dollar sign and in the bracket just call the variable right so what I have done is I have just replaced g++ with this one right so let's see if I can show you the last code so you can see here in the last uh code which I have mentioned you g++ is here and I have only replaced this g++ with dollar and bracket and this I'm calling this c c variable here in a same way I'm calling wherever I have minus C I have included one more options minus wall and this will also have uh had become tedious if you have to include this uh warning command to every function and by declaring variable it has become really easy you just need to add this warning command here and it will be executed here also so you can call variables like this dollar and in the bracket you need to give the call to your variabl so I have replaced this like this and this will also execute the same command same uh uh same type of uh compilation but this has made our compilation more modular and this will come handy when you have hundreds of files right and I will save this make file and once again when I to make all so it says nothing to be made because I haven't changed anything in my main main. CPP or any of the files so suppose for example I just change my main.cpp only one file and I will say just print some some message here my double quotes that this is whatever any message and this is just to show you that when I change this only one file then what happens okay so once again I have saved this main file and I have changed it changed this file only and I haven't changed function. or function 1. CPP or function 2. CPP or and earlier what was happening only all the three files were compiling right and now I have changed the main file and I've have executed this make all I will execute this command once again and you see here only one F only one uh command is executed which is main.cpp and because we haven't changed function 1. CPP and function 2. CPP the state of uh those two files will remain same and whatever file we have changed only this command will be executed so this will make our compilation faster okay so that's why we can use make files also so this is some of the basics I have shown you uh how to uh use make file and how you can create make files but make file is a big topic and you uh need to read uh to create very module make files uh so where you can read about make files just go to gnu.org and so www. gnu.org just go to this site and this is in here in the search just search for make file and press enter and you can see this second option GN you make and all the documentation of make file and make you can find it here okay so whenever you have time just give uh some time to read uh about make file and you will learn how to make very good make files from here okay so I hope you have enjoyed this video please rate comment and subscribe and bye for now