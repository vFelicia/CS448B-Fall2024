hey guys welcome back in this video we will talk about nest js so ness js framework is increasingly becoming popular among developers who want to build scalable serverside applications so those of you who don't know what nest js is you can go to this website which is nestjs.com and according to this website ness js is a progressive node.js framework for building efficient reliable and scalable serverside applications so nest js fully supports typescript and in the background it uses node.js framework and express so what we are going to do is we are going to learn how we can use nest js to build uh rest application although ness js supports many different protocols but for start we are going to build a rest application using nest js now nest js have a very extensive and very good documentation so if you are thinking about starting nest chess you can click on the documentation tab and you will be able to see tons of good documentation so under the documentation you can see uh what nest js can do and what are the technologies it supports so you can see under the techniques it can support authentication database configuration validation caching so many things it can support also it can support graphql websockets microservices like redis mqtt rabbit mq kafka also it has the support for open api swagger ui and many other good stuff also if you can want to see how popular nest js is you can go to the github page for nest js and you can see as of today it has more than 31 000 stars so it's becoming really popular so let's talk about the prerequisites of learning nest js so knowledge of typescript and javascript will be very important for learning sjs if you have the experience of angular it will be a plus because it uses techniques which are already used in angular for example now because we are going to be building a restful api it's good to have a rest uh client such as postmen uh in order to test your arrest application also make sure you have the latest version of node.js installed on your operating system so once you have all these uh tools we are good to go and let's get started so what we are going to do we are going to just open our terminal and we are going to install some nest js packages so what i did is i created a directory so i am going to just go in that directory which is called work so the first step is to install nest js cli globally in order to create our nest js project with this cli tool so we are going to just give this command which is npmi hyphen g and then just write at the rate nest js forward slash cli and in my case because i want to install this globally i i need the sudo privileges also in your case it might not be necessary so i will just press enter and give my max password and now this cli is installed on my operating system so once this nest cli is installed we are ready to create our first project so in order to create a new nest project what you need to do is you just need to give this command nest because we have installed nest jscli globally this nest command is going to work and then write new and the name of your project so we are going to create a project called car manager so i'm going to give this name you can give any name for your nest js project and then press enter and it's going to create a new nesjs project for you now first step here it's going to ask you which package manager you want to use npm or yarn so i'm going to just use npm for this so i'm going to just press enter which is going to create our project using this npm package manager so now you can see our nest js project is created and you can see it gives us hint also that we can cd into this directory and then we can just run our project using npm run start so what we are going to do i'm going to just do ls you can see this project is created inside this directory so i'm going to go inside this directory and then i'm going to open this project using visual studio code you can open this project with any other editor or ide of your choice i'm going to use visual studio code here so i'm going to just open this project using visual studio code and let me open the terminal also inside visual studio code now let's discuss about the nest js project structure so you will be able to see this package dot json where under script you will be able to see uh all these commands so we can start our application using npm start which is going to essentially run nest start in order to start our application and you can see we can test our application using npm test under the hood it's going to use just for running our test you can also see how you can run different commands for running different kind of tests and coverages and running your application in different environment for example development or debug or production mode you can also run lint for linting your application files now let's talk about the source folder where our code is there so we are going to start with the main dot ts which is the main entry point of your nest js application so here you can see it's very simple it's going to just import this nest factory from the core nets js package and you just need to pass your app module which is there inside this app.module.ts file we are going to just see what's there in a bit but you just need to import this uh app module and you just need to pass this app module as as parameter in the create method and then you can just start your application on the port for example by default it's going to start on the port 3000 but you can change this port also so app.listen and it listens on the port 3000 by default so now we are going to go inside the module.ts folder so app.module.ts which we have imported inside our main.ts so this app.module.ts file is going to contain the implementation of application root module now there are three important building blocks of a nest js application and these are called controllers providers and modules so three building blocks controllers providers and modules and you will be able to see one file for each component you will have the controller.ts file you will have the module.ts file and you will have the service.ts file so services are also called providers in nest js module.ts is going to contain the implementation of your applications root module and then app dot controller dot ts is going to contain the implementation of a basic nest js controller with just one route so by default it's going to just listen on this get route and it's going to just return you hello world so controllers are used to just define your end points so it will be a main interface for your application so you can define endpoints into the controllers now the app.service app.service.ts file is going to contain the implementation for your endpoint for example so for example some rest request comes into your application it's going to uh just go here and then this controller in this controller you can see there is an instance of app service and whatever you want to return as a response for that rest request you can just provide the implementation of your response inside the service so let's go inside the service here we just define the implementation about your service methods right now also you will be able to see for example when you go to the app.modules.ts this kind of uh annotation here so these are called the decorators so if you are familiar with the angular you might have seen these kind of decorator decorators right so because we are in the module uh decorator here we just provided at the raid module and then inside the module you can provide the imports controllers and providers so provider essentially are the services right so we have imported the app.service and app.controller here and here we provide the mapping of all the controllers you have inside your application and all the providers you have in your application and sometimes you need to import different kind of files in your nest js and those imports we are going to do here so we are going to see more about imports in the later part of our application right so uh as i said you have services modules and controllers also you have the app.controller.spec.ts file so this will be uh your unit test file so here you can write your unit tests okay and you can also define for example service dot spec dot ts file for testing your services and for your integration test you have this test folder so here you can run your integration test and in next js it is called endtoend test okay so here you can test your whole application using uh jest and under the hood it uses super test for your integration tests so now let's run our application you just need to write an npm start here which is going to run our application and once you see this message which says nest application successfully started you can go to your browser and then just write localhost colon 3000 and it's going to return hello world right you might be wondering uh this is our typescript project so we haven't transpiled our typescript into the javascript code and how it's running directly using npm start in the background nestjs is going to take care of transpiling and then running your application directly using npm start if you want to just explicitly build your project you can give this command npm run build it's going to transpile your tribe script files into uh javascript but if you directly use npm start also it's going to transpile directly your files and it's going to run your project for example i'm going to just stop this application i'm going to go to the service dot ts file and here we have the get hello world which is returning this hello world to us i'm going to just add hello world from me and then i'm going to just restart our application it's going to directly transpile our typescript code and it's going to start our application on the port 3000 so let's refresh this page now it says hello world from me so this is how you can create your first nest js application in the next video we are going to see what we are going to be implementing we are going to be implementing a rest api so we are going to see how we can create our own rest api using nest js i hope you enjoyed this video and i will see you in the next video