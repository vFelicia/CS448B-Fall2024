Welcome to our first video on numpy lecture Series this is gonna be an introductory video so let's get started so what is numpy numpy is a library for the Python programming language it's stands for numerical python it was created by Travis oliphan in 2005. it supports large multidimensional arrays and mathematical functions to operate on these Aries now the million dollar question is why use numpy when we are able to process arrays with the help of python lists this is because python lists do serve the purpose of arrays but they are too slow to process numpy aims to provide an array object that is more faster than traditional python lists Aries are very frequently used in data science with speech and resources are very important if we have a slow array then it will affect the speed of the program and also increase the time in which the program is executed some of you must be wondering what is data science data science is the branch of computer science that deals with storing using and in analyzing data and deriving information from it now let's move on to our next question why are numpy arrays faster than this let us look at the basic definition of an array anari is a collection of homogeneous data types that are stored in contiguous memory locations this is the definition that we are learning since kindergarten so we all know that Aries are implemented with the help of lists in Python now a python list is a collection of data types stored is in noncontiguous locations so fetching R elements from noncontiguous location takes more time this is the reason why python lists are slower and numpy Aries are about 50 times faster than pythonless let's look at the other benefits of numpy it supports efficient manipulations and operations on highlevel mathematical functions and multidimensional arrays it contains functions related to linear algebra random number capabilities see random number is very important in numpy for creating random distribution plots we will get into it later on it also supports functions related to Fourier transforms or transformations it provides tools for integrating C and C plus plus code Etc in Python and numpy is used mostly for scientific computing now let's move forward to the actual coding part first of all let me teach you how to install numpy on your system here I'm using a Macbook and I have my web installer package already installed so I'm just going to write babe install numpy and hit enter button so I have numpy already installed on on my system so it's showing requirement already satisfied but in your system it will process for some time and download the essential modules now let me just get started with python on three and hit enter button now I need to import numpy so for that I'm going to write import numpy as NP and hit enter now we don't get an output here this is because there is nothing to display or there is no such command now I'm going to create an array ARR equal to NP dot array and I'm going to pass a python list that is one two three four five so I have passed a list you can give any value that doesn't matter now I've successfully created an array now I want to print this array for that I need to write print bracket ARR and hit enter so we have successfully created and displayed an array now some of You Must Be Wondering Why did we import numpy or numpy SNP now let's see if we import it directly without giving it a nickname or a pseudo name so I'll just go back to Python 3 Type Python 3 and hit enter and now I'll import numpy by writing import numpy hitting enter and then creating an array again that is ARR or array name equals to numpy dot array and passing a python list to it so now I'm gonna print this array by writing print bracket ARR and hit enter now you can do this way or or you can do it the other way it doesn't matter but in large program you may need a pseudo name or a nickname or a reference so that while writing last fragments of code you can reduce hello welcome back to our course on numpy today we are gonna learn about ndimensional Aries so let's get started so our first and foremost question is what is ND array so according to numpy.org I'm Andy array is a usually fixed sized monthly dimensional container of items of the same type and size the number of dimensions and items in an array is defined by its shape which is a tuple of n nonnegative integers that specify the sizes of each Dimension the type of items in the array is specified by a separate data type object called as TType one of which is associated with each ND array so this is more of a complicated definition so in simpler words we know that numpy is mostly used to work with Aries the array object is numpy is called as ndra we create a numpy ND Ira object by using the array function so the thing is ND array is nothing but just n dimensional array like one dimension two Dimension three dimension let me just type python 3 and hit enter now I'm going to import numpy so import numpy as NP and hit enter now I'm going to create an array that is ARR or Avenue NP dot array and we are going to pass a python list here I'm taking the values one two three but you can take any value you want to so I have created an array I have passed a python list now I'm going to print it so I'm going to write print aaroni or ARR and now I'm going to hit enter so I got my array now let us print the type of array so I have told you earlier that that array object in numpy is indiary now let's verify it by printing the type so print type and array name so we can see that we got output as numpy dot ND array now type function is a builtin python function that tells us the type of the object passed to it like in previous code it shows that ARR or array name is numpy dot ND array type now some of you must be wondering why do I always pass python lists as input so uh in general to create an ND array we can pass a list double or any array like object into the array method it will be converted to ndra so now I'm going to show you an example where I'm going to pass a python Tuple so life is going as usual let me just write import numpy as NP and hit enter now array name is equal to numpy dot array but this time I'm going to pass a tuple so now I'm I'm going to print so you can see that it is in a list format but when I print the type and pass array name it shows numpy dot in the array now let's talk more about arrays so generally we have an ndimensional array where n can take the values 0 1 2 3 up to n so let's start with Zero Dimensional arrays so Zero Dimensional arrays are nothing but scalars for example the numbers 1 2 3 4 each of them represent a scalar or a Zero Dimensional array now an array that has Zero Dimensional arrays as its elements is called as a unidimensional or one the array for example I write bracket and inside I gives the values 1 to 3 4 so one dimensional array has Zero Dimensional arrays as its elements similarly a twodimensional array has one dimensional arrays as its elements a threedimensional array has 2D arrays or matrices as its elements an ndimensional arrays have n minus one dimensional R is as its elements so twodimensional arrays are called as second order tensors threedimensional arrays are called as third order tensors and generally an N dimensional array is called as nth author tensor but the most basic and most common arrays that we use in our daily life are one dimensional artists higher dimensional arrays find more relevance in fields such as machine learning and artificial intelligence now let's Implement these arrays so guys I have opened my terminal now I'm just going to type Python 3 and hit enter I'm going to import numpy as NP hit enter and then I'm going to write arr0 is equal to NP dot array in in bracket this time I'm not going to pass a list I'm going to pass a scale because this is a Zero Dimensional array now I'm going to print err or zero and hit enter so I got the result as 21 note that this is a scalar and not in list or we can say it is not in list format now I'm going to create a onedimensional array ARR one is equal to num P or NP dot r a and this time I'm going to pass a list now I'm going to hit enter so array has been created now I'm going to print it so I'm going to right print ARR 1 close the bracket and hit enter now let's move on to a 2d array so I'm going to write ARR to is equal to NP dot array please note that this time I'm going to pass one dimensional arrays as it's element so I'm going to write square bracket square bracket again and one two three four sorry you can't take anything one two five and comma and I have to pass one more list because basically its elements are one dimensional app is now let me just hit enter and print twodimensional array sorry I have to print error off to not the evaluate index 2. so please take care you can also make this mistake so now print it added successfully so let us now create a threedimensional array which is third order tensor so AR out of three is equal to NP dot array and this time we are going to pass two dimensional arrays as its elements so square bracket square bracket and one more square bracket and pass the elements so I have passed one 2D array now I'm going to pass one more so this threedimensional array has two twodimensional arrays at its elements so 3D array has been created now we have to print it by using print and in bracket we have to write ARR of 3 and hit enter so we have successfully printed a 3D array now we have seen how to create a onedimensional array a twodimensional array and a threedimensional array now I'm giving you an assignment create a fourdimensional array you have to follow the same procedure you just need to pass 3D arrays assets elements in today's lecture we covered and dimensional arrays ndra use of type function one dimensional array Zero Dimensional array two dimensional array three dimensional array how to create them and we have also given you an assignment that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned for next lecture bye hi guys welcome back to our course on numpy in our last lecture we covered ndimensional arrays and today we are gonna learn about array indexing so let's get started so the first question that arises in our mind is what is array indexing so our indexing is nothing but accessing an array element now how can we access an array element the answer is pretty simple by referring to its index number indexes start from 0 the first element is stored at the index 0 the second element is stored at index 1. and so on that end element is stored as index n minus 1. now let's see how can we do indexing in arrays of different dimension so let's first access array element for a 1D array so we just simply need to write print array name and we have to write the index that is a in 2D array it will be print a comma B because we have two parameters row and column similarly in a 3D array which is a third order tensor we need to pass three parameters and in general in an ND array or n dimensional array we have to pass n parameters as array index to print or access the element now let's move on to the coding part so I have opened my terminal let me just write python3 and hit enter now import numpy as NP hit enter and now I'm gonna create a 1D array so let's start with 1D array so ARR or array name one is equal to NP dot array and I'm gonna pass a python list to it so let it be 2 comma 3 comma 1 comma 5 comma 3 comma 2 comma six and hit enter so we have successfully created a 1D array now let's print an element or axis an element so I'm gonna exist element at index 0 but I made an error instead of passing Error 1 I passed ARR which is not defined so I'm gonna do it again print arr1 of 0 and the last element ARR one six so element at first index is 2 and the element at 6 index is six so I can also perform algebraic operations while printing let me just show you so I'm gonna write print err one index five into ARR one and index Let It Be 2 so it will show the multiplication of elements as Deeds to index so element at index 5 is 2 and element at index 2 is 1 should it display the result to similarly we can perform subtraction so arr1 element at index 3 minus element at index one sorry I made an error again let me just correct it so the answer is 2. so let's move on to a 2d array let me just create a 2d array so I'm gonna write arr2 is equal to NP dot array and this time I'm gonna pass 1D array as its elements so let it be 1 comma 2 comma 3 dot comma 4 bracket close five comma six comma seven comma bracket use so I'm gonna print the second element in first in second row so guys am I doing it right I have done it wrong please try to be careful because this is the wrong index I want to access some other element but I have passed some other index now this index 0 comma 1 it represents the first the second element and first row and not the second element in second row so please be careful because you can also do these kind of mistakes and I'm trying to help you Rectify those mistakes so the element that I have actually printed was it was the first element no it was not the first element it was the second element in first row so guys please try to be careful this is the most common mistake that we do while indexing I'm showing you this because I have seen a lot of people making these kind of mistakes even in engineering second air and third year this is a very common mistake so please try to be more careful and write the indexes correctly so second element in second row so I'm gonna pass one one this time and it is six now should we move on to a 3D array let's move on to a 3D array so I'm just gonna create a 3D array come on guys I'm just joking I'm not gonna create a 3D array instead I'm gonna give you an assignment that is create a 3D array yourself we have discussed how to create a 3D array and now you have to create a 3D array and access the first element in 3D array so in today's lecture we covered array indexing indexing in 1D array indexing into the array and I also give you an assignment to do indexing in a 3D array that's all for today this video is brought to you by programming knowledge please like comment share subscribe for updates and stay tuned with us for more lectures bye hi guys welcome back to our course on numpy in our last lecture we covered our indexing and today we are gonna learn about negative indexing and the use of Endive method so let's get started so first of all what is negative indexing so negative indexing in negative indexing we use negative indexes to access array elements from the end let's take an example that we need to print or access the last element of the second row in the given array so index number for elements for second row will be like 1 comma n minus 1 when we are using positive indexing and where we want to access the nth element from the beginning but in case of negative indexing the index number for the second row will be like 1 comma minus n where we want to access the nth element from the last now please note the difference in positive indexing we are accessing nth element from the beginning and we are giving the value 1 comma n minus 1 but here we want to access the nth element from the last so we are giving the values 1 comma minus n now let's do negative indexing for this array so here by positive indexing the index of the last element of second row will be 1 comma 4 as is it is the fifth element from the beginning and in general for nth element from the beginning the index number will be row count minus 1 comma n minus 1. and if we do negative indexing the index will be 1 comma minus 1 as it is the first element from the last or the nth element from the last so in general for nth element from the last the index number will be row count minus 1 comma minus n now so let's open them let me just write Python 3 and hit enter now import numpy as NP hit enter let's create a 2d array first so I'm gonna create a 2d array so I'm gonna write arr2 is equal to NP dot array and now since we know that the elements of a 2d array are 1D array so I'm gonna pass to list as its element so let the list element will be one two three four and two four three one close the brackets and hit enter so we have successfully created a 2d array now let's print so I'm gonna write print the second element sorry the second row and the last element so it's gonna be ARR or array name one comma minus 1. because positive indexes start from 0 and negative indexes start from 1 so the second row and last element is 1. now let's print the array so we have printed the array and you can see that the second row and last element is 1. now some of you might be wondering can we pass both the values in negative indexes yes we can so for the last row it will be minus 1 and for the last element it will be minus 1. so second row and last element when we have passed both the values as negative is same it's one now let's print the second row and the second last element so I've written the command and now I'm gonna hit enter so as you can see that the second row and the second last element is three now let's do it again by changing the row value now we are gonna print the first row and the second last element so I've written the command and hit enter so the result is 2. as you can see from the array now I'm gonna do it again but this time I'm gonna give negative values so the result is again two this was all about negative array indexing so now I'm gonna give you an assignment that is create a 1D array and access its last element now yeah you have to use positive indexing as well as negative indexing while doing this assignment so now let's move on to our next topic for today that is use of enzyme method so and I method Returns the number of dimensions in an array the syntax is print bracket array name dot ending or first we can store the result in a or any variable like a is equal to rename dot enzyme and then we can print a so let's see an example so I've opened my terminal I'm gonna write python3 and hit enter I'm gonna import numpy as NP hit enter now I'm gonna create arrays so first R is AR 0 is equal to NP dot array bracket I have passed the value 32 and this is a Zero Dimensional array or a scalar now I'm gonna create a 1D array so now I'm gonna create a 2d array so I've created a 2d array now let's move on to the use of ndi method so I'm just gonna write print arr0 dot enzyme so it's gonna give me 0 because it's a zero D array similarly to check the dimension of the 1D array I'm gonna write arr1 Dot N dime so it shows result 1. and in the same way when we do it for 2D array it's gonna print the result as 2. so by the use of n die method you can get the dimension for any array it will display the result as the number of Dimensions present in that particular array now the assignment for you is to print the number of dimension for the fourth dimensional array that you created as your the path of your previous assignment so this was all about the use of enzyme function or enzyme method hi guys welcome back to our course on numpy today we are gonna cover array slicing so let's get started so first of all what is array slicing slicing means taking elements from one given index to another index here instead of passing an array index we pass a slice so the syntax is that we pass a starting element and an ending element that is denoted by start and end respectively we can also Define the number of steps we want to take while slicing so we can pass either two parameters start and end or we can pass three parameters that are start and understood so now the question arises what if I ignore or don't pass these three parameters if we don't pass start it is taken as zero if we don't pass end it is taken as the length of array in that Dimension and if we don't pass step it is taken one by default now we can also slice the array using negative indexes so this is a brief introduction to array slicing now let's move on to the coding part so guys let me just import numpy as NP and hit enter now I'm gonna write array name or ARR is equal to NP dot array and now I'm gonna pass a python list to it Let It Be One comma 2 comma three comma five and hit enter now let's slice elements from index one to index 5. sorry here we have indexes from the 0 to 4. that is size 1 so if I pass we're gonna slice elements from index 1 to index four and I'm gonna write print array name err and I'm gonna get start as one and and ask for that is the last index and I'm gonna press enter so it displayed two three and four so there's a very important observation to make here so what is that observation we can observe that it has included the value or the element at index one but it has not included the element at index 4 so it's not gonna include the value at index 4. so indexing will always neglect the element which is present at end or the parameter that is given so in general when we write array start call it n it will ignore the element at the ending index and it's going to include element at the start index so please keep this in mind because in questions related to Output we can make this kind of sillimistic so it's good to be careful so start will be included in the result while end won't be included in the result now let's see what happens when we don't pass start so I'm gonna write print ARR so array has been printed now I'm gonna give it a slice so I'm gonna print ARR I'm not gonna pass start this time so start is empty and I'm gonna give end as the third index so it should print one two and three as you can see the result is 1 2 and 3. now let's see what happens when we don't pass end so let me just write print array name or ARR and I'm gonna pass start S2 and I'm not gonna pass any end let me just hit enter so at second index the value is 3 and since we have not passed an end it will take the size of R in that Dimension that is 5 as end so it's gonna print 3 4 and 5 minus 1 the valued fourth index so it print 3 4 and 5. so here in above examples we did not pass the step size so by default it is taken as 1 as we already discussed now let's do or let's pass step size I'm gonna create a new array that is err1 is equal to NP dot array and I'm gonna pass a list of a bigger size the current list was short in price so if I increase the step size there will be less elements so to exhibit or to display the method of slicing using sip size I have created a new array and I've printed the existing array as well as the newly created array now let's pass step size and do the slicing so for the first array I'm gonna give the start as zero and I'm gonna give end as four and let the step size be equal to 2. so the value at zeroth index is one and at Fourth index is 5 so it should print the elements one and three sorry there was a mistake in the syntax so it shows the in invalid index or sorry invalid syntax so let me just Rectify it and do it again so this time I'm gonna write print ARR um print error one again and let me just write the command again so I'm gonna write ARR 0 4 and 2. so the result is 1 and 3. now let's do it for the second array so the start was 0 and the end was eight so it displayed one three five and seven as theoretically expected now we have an observation to make here if we observe carefully the command that we have written have returned every other element from index 0 to 4 sorry from the index 0 to 4 for the first array and every other element from index 0 to 8 in the second nappy so now let's move on and print every other element in the whole array so let's see how to return or print every other element in the whole array or entire array so I'm gonna write print every name I'm not gonna pass the start or end I'm just gonna pass step size that is 2. I'm gonna close the bracket and hit enter so it has returned every other element in entire array now similarly return every other element in the second array so it shows 1 3 5 7 and 9. so we have returned every other element in the array now let's slice a 2d array so I'm gonna write arr2 equal to NP dot array and I'm gonna pass 2 1D arrays as its elements let them be 1 comma 2 comma 3 comma 4 and the other one the array will be 1 5 6 7 and 8. sorry this mistaken parenthesis so let me just do it again I've created a 2d array now let me print it so I've printed array now I'm gonna slice so so I'm gonna slice element or elements from index 1 2 index for and of course the index 4 will not be included and in second row so I'm gonna write print ARR or array name and I'm gonna give please be careful here we have to pass the first row and instead of column value we are gonna pass the slice so please be careful so I've passed sorry there was a mistake let me just correct it and and hit enter sorry the array name was written incorrectly so let me just change it to arr2 so it has given us the corresponding values that are 6 and 7. now similarly we can pass the row value as a slice and give some column value or we can do both path to row value as a slice on the column value as a slice so similarly we can slice a 3D array and in general we can slice an N dimensional array so there's an assignment for you take create and slice a 3D array now some of You Must Be Wondering dot can we slice and array using negative indexes are red negative indexes the answer is we can do it for sure so surely we can so I'm just gonna print the existing array and now I'm gonna slice it using negative indexes so first of all we need the values of the indexes to slice so let's slice from index minus 3 to index minus 1. so let me just write the command that is print ARR 3 comma minus 1. sorry I need to pass the slice instead of these values so this kind of Mystic is very common please be careful because you have to pass the slice and not the index so I have passes slice and it has shown with the result 8 and hi guys welcome back to our course on numpy in today's lecture we are going to study the data types in numpy so let's get started let's first take a look at the default data types in Python the integer float Boolean string and complex integer represents numbers like 1 2 3 minus 1 minus 2 minus three float represents real numbers Boolean represent true or false value and string represents text while complex represent complex number which has real as well as imaginary part let's move on to data types in numpy numpy has some additional data types and are represented using alphabets low case I stands for integer lowercase U stands for unsigned integer lowercase b stands for Boolean lowercase f stands for float low Case C stands for complex float Locus m stands for time Delta uppercase m stands for date time o stands for object uppercase s represents string and V represents chunk of memory or void now let's move forward to another topic that is how to check the data type of an array so numpy array object has a property called T type that Returns the type of array the syntax is print and in bracket we have to give array name dot T type and this command or this line or this thing will return as the data type of the array that we have passed now let's move on to the coding path and implement this so I have opened my terminal and I'll write Python 3 and hit enter now I'm gonna import numpy as NP and create an array ARR is equal to NP dot array and now I'm gonna pass a list to it but this time the less contains string characters and not integers so let the elements be pen banana you can take anything or chalk so close the brackets and hit enter now I've created an array now we are gonna print the data type so I'm gonna write print and in Brackets I'm gonna write I rename or ARR dot d type and hit enter so I have obtained the result as U6 please note that here U stands for Unicode string so now let's take one more example now I'm gonna create one more array and it's gonna be an array of integers so arr1 is equal to NP dot array and now I'm gonna pass an integer list to it so let the elements be one two three four close brackets and hit enter so I'm gonna print arr1 dot d type so the result is int 64. please know that end refers to integer so data type is integer 64. now let's move on and see how can we create an array with a specified data type so click to create an array with a specified data type we need to pass an optional argument while creating the array that is D type so the syntax is going to be array name is equal to NP dot array and we have to pass list and we have to add a comma and we have to pass Theta type as the required data type now let's take an example so let me just zoom the terminal now I'm gonna write python3 hit enter import numpy as NP hit enter now I'm gonna create an array but this time I'm going to specify the data type so let's create an array with data type 4 byte integer so I'm gonna write ARR or array name is equals to NP dot array and this time we are going to pass a list but we are also gonna specify the data type so I have to specify the data type as int or in this case we can use I also or I4 so 4 bytes um I hit enter so I'm gonna print array and I'm going to print its data type so print ARR Dot D type so you can see it's int 32. so 4 bytes means 32 bits now let's take one more example so let's create an array with d type or data type string so I'm gonna write ARR 1 or whatever the array name is is equal to NP dot array and I'm gonna pass a list to it but this time I'm gonna specify the T type or data type as s that represents string I made an error there's some problem in brackets I have added an extra right bracket so let me just Rectify it so let me just print the array print ARR I have to print the error one so print arr1 hit enter and you can see the result as a list of strings and when we print the D type or data type it shows S1 that is string N1 bye so now let's see what happens when a data type cannot be converted when you have a mixed kind of list that is it contains integers alphabets or it's in a mixed form and this problem in conversion so let me just give an example era 2 is equal to NP dot array and I'm gonna pass a character in list and other elements as integers and I'm gonna specify the data type as I that represents end so it says unmatched there's some problem in Brackets let me just correct it and do it again so it shows invalid literal for end with base 10. so this is the problem that arises when a data type cannot be converted hi guys welcome back to our course on numpy in our last lecture we covered data types and how to create an array with a specified data type so today we are going to cover the as type method so let's get started so we know how to create an array with a specified data type now the question arises how to convert data type on existing arrays the answer is the best way to change the data type of an existing array is to make a copy of the array with the as type method the ask type method returns a new data frame where the data types have been changed to a specified data type or in simpler words we can see that as type function creates a copy of the array and a laws U to specify the data type as the parameter please note that we can specify the data type using short notations like I for integer f for float or by using the data types directly like int for integer float for float Etc now let's see an example so let's change the data type from flow to integer by using I parameter value so let me just write Python 3 hit enter I'm gonna import numpy as NP now I'm going to create an array so I'm going to write NP dot array and I'm gonna pass a list so this is a list of float floating Point numbers so it gave me an error because I made a mistake I need to insert comma so let me hit enter I've created an array now let me use the ask type method to create a new array so new a new array name is equal to ARR dot as type and in bracket I'm gonna specify the data type so it's I here and your has been created now let's display so I'm gonna write print ARR hit enter this was our original array let's display the data type of the existing array or the old array it's showing float 64. now let's print the new array and print the data type of the new array so I'm gonna write print new dot d tag so it's showing n32 now let's move on to next example change data type from floor to integer by using end parameter value so last time we use I this time we are going to use end so I'm gonna write python 3. and hit enter I'm gonna import numpy I'm going to import numpy as NP now I'm gonna create an array so err or R Dynamics equal to np.ra and I'm gonna pass a list to it a list of floating Point numbers I made a mistake I need to go back to rectify it and I have to add brackets so I passed the list and I have created an array now let's create a new array using aspect method so new equal to array name dot as type and I'm going to specify the data type as int last time we used I in commas so I'm gonna print array and I'm gonna print the data type of original array so it's load 64 and I'm gonna print the new array and it's data type so the result is in 64. let's move on to another example change data type from integer to Boolean now if the data is or the data element is 0 it will return false and if it is greater than 0 it will return 1 or true so I'm gonna import numpy again as NP and hit enter I'm gonna create an array of integers so I'm gonna write NP dot array and I'm gonna pass a list to it and don't forget to add brackets so now I'm gonna hit enter array has been created now let's print the array and print its data type so it's in 64. now let me print no sorry now let me create a new array using as type method so new equal to Arab dot as type and and type I'm going to specify Boolean so it's bull or B Double L for Boolean so the new array is true false true false true these are Boolean values so I'm gonna print the data type of the new array as well so it is B Double L or Boolean so in today's lecture we covered the use of as type method and we looked at hi guys welcome back to our course on numpy in our last lecture we covered the as type method in numpy and today we are gonna learn about the difference between copy and view in numpy so let's get started so it is copy versus view so copy creates a new array it's a new array and view is just a view of the original array don't worry you'll understand it when we get into the code copy owns the data and view does not own the data those who have read database management system they might be acquainted with the term View so the changes made to copy will not affect the original array but the changes made to view will affect the original array so copy is just a new array which is a copy of the present array and view is just the same array with different name the changes made to view will affect the original array now let's move on to the code I've opened my terminal now I'm gonna write Python 3 and hit enter now I'm gonna import numpy as NP and hit enter now I'm gonna create an array with array name err is equal to NP dot array and I'm gonna pass a python list hit enter now add it has been created successfully so now I'm gonna write X is equal to ARR or array name Dot View and brackets and hit enter so I've created a view I'm gonna print the original array as well as I'm gonna print The View so print X so they both are the same now let's observe what happens let's now make changes to original array and see whether they are reflected to view so ARR zero is equal to 34. now we have initialized the zeroth index as 34. now I'm gonna print array as well as view to observe the difference see the array has been updated and the view has been updated so the changes in original array can affect View so we can see that view is affected by the changes made to the original array now let's move forward and make a copy so now I'm going to create a copy so why our copy name so copy name or Y is equal to ARR Dot copy and now I'm gonna write brackets and hit enter now a copy has been created now let's print the copy so it is same as the array now let's see what happens if we make changes in original array and their corresponding changes to copy and view so let's make changes one more time so I'm gonna write ARR or array name and initialize the second index as 243 so I've made changes to original RN now let's see whether these changes are reflected to view and copy so now I'm gonna print view see it has been updated now let's see what happens to the copy now we can observe that we have made changes to the original array and our view which is denoted by X has been updated or affected by the changes made in original array but the copy Remains the Same it has not been updated to the copy Y is not affected by changes while view X is affected now let's move on to our next topic that is how to check if Ari owns its data so this is basically a method of checking where the a given element is a copy or it's a view so we know that copies owns data and view does not own data but how to check this so every numpy array has an attribute base that returns none if the array owns the data otherwise the base attribute Returns the original object now let's take an example and understand it through a code so I'm gonna write Python 3 and hit enter now I am gonna import numpy as NP now I'm gonna tweet an array ARR is equal to NP dot array and pass the list to it so I've created an array now I'm gonna create a view as well as a copy so for view X is equal to array name dot view or ar Dot View and for copy Y is equal to arrename.copy or ARR dot copy now let's use base so I'm gonna write print x dot base so it Returns the original array because this is a view X is a view so it Returns the original array while y returns none because it's a copy so x dot base returns us the original array because it's a view hi guys welcome back to our course on numpy in our last lecture we covered the difference between copy and View and today we are gonna learn about the array shape so let's get started so the first question is what is array shape in numpy so the shape of Abby represents the number of elements present in each dimension now the next question arises in our mind is how to get the shape of an array so we can use the array attribute called shape to get the shape of an array so the result is a tuple which each index having the number of respective elements now let's move on to the code so let me just write python3 and hit enter now I'm gonna import numpy as NP and hit enter so now let's start with a Zero Dimensional array a Zero Dimensional array is a scalar so I'm gonna write ARR 0 or array name is equal to NP dot array and in bracket I'm gonna write a scalar this time I'm not gonna pass a double so now I'm gonna print err 0 sorry I need to rectify it arr0 and hit enter so I got the scalar as result now I'm gonna print arr0 dot shape so it returns me an NT double so it doesn't have any Dimension so it is a 0d array so now let's move on to 1D array so I'm gonna create a 1D array first so array name arr1 is equal to NP dot array and this time I'm gonna pass a tuple so the values from one to nine constitute the Tuple now I'm gonna print the array and I'm gonna print its shape since it is a 1D array it has one dimension and the number of elements in that Dimension is nine so now let's move on to a twodimensional array so first I'm going to create a 2d array so ARR of 2 or RN name is equal to NP dot array this time I'm gonna pass 2 1D arrays because we know that in a 2d array or Matrix the elements are 1D arrays so I've passed the elements now let me print ARR to and now I'm gonna print its shape so print ARR to dot shape so it has two Dimension the number of elements in First Dimension R2 and in second dimensional four it is other way of saying that number of rows are 2 and number of columns are four now moving on to a 3D array let's create a 3D array so the elements of a 3D array are 2D arrays so we have to create a 3D array accordingly so I've created a 3D array now I'm gonna print array and I'm gonna print the shape of the array so print err or 3 Dot shape so it's showing me list object has no attribute shape so let me just do it again there's an error so it's an attribute error so let me just create a 3D array again so let's try again this is the basic thing when you fail you have to try again just don't give up so here are three that's the image arr3 new or three new so here are three new is equal to NP dot r a and now I'm gonna pass two Diaries so I've created a 3D array a new 3D array from scratch again and now I'm gonna print error 3 new dot shape now I'm gonna hit enter so this has three dimension and the number of elements in respective Dimension are 2 2 and 3. so this is the optimized or the exact or the correct output now I have got an assignment for you you have to create a 4D array and you have to print and you have to print the shape of that 4D array you can also create a 4D array using ndi method as we discussed so in today's lecture we covered array shape hi guys welcome back to our course on numpy in our last video we covered shape of a numpy array and today we are gonna learn about the use of free shape method so let's get started so reshaping numpy Aries so we know that shape of an array is the number of elements present in each Dimension so reshaping refers to changing the shape of an array so what is actually achieved by reshaping that is addition or removal of Dimension and changing the number of elements in each Dimension so let's move on to the code let me just write python3 and hit enter now I'm gonna write import numpy as NP I'm gonna hit enter now reshape from 1D to 2D so we have to change the shape of an array from one dimension to two Dimension so I'm gonna write firstly we have to create an array to use the reshape method so I'm going to create an array so array name is equal to numpy or NP dot array and I have to pass a list so this is a list of 12 elements so I'm gonna close the bracket and hit enter so I've created a 1D array now to convert the 1D array to sorry I have to convert the one the array with 12 elements into a 2d array so I'm gonna write new array or new array name is equal to current array name ARR Dot V shape I'm gonna specify the parameters so into e array we have two parameters that is row count and column count so now I'm gonna print the current array as well as the new array so you can see that I got a new array with four rows and three columns so we have four rows with three elements each or we can say that we have a new 2D array with four rows and three columns so let's reshape from 1D to 3D so we are going to to reshape from 1D array to a 3D array or three dimensional array so I'm gonna write new array name is equal to current array name or arr.v shape and I have to specify three parameters here so let them be 2 3 and 2 so that the product is 12. so now I'm gonna print the current array as well as the new array so you can't see the result we have a 3D array with two elements and each element is a 2d array consisting of three rows and two columns now we have an important observation to make here do you guys observe anything yes there's a very important observation here so the product of the parameters that we have passed and the elements in the number of elements that we have is same so the product of parameters is equal to the number of elements in one the array or in general so this is a very important thing so we have to take care of this thing in our mind while reshaping the arrays now the question is can we reshape into any shape so the answer is no we can't do that so we can't reshape into any shape that we want to they there are some constraints so let's see an example so let me just create an array so errat or array name is equal to NP dot array and I'm gonna pass a list so let the number of elements be eight now I have created an array it has eight elements now what are the possible combinations of parameters that I can pass so let's see we can make a 2d array with four rows and two columns we can make a 2d array are if we create an array with eight rows it's just gonna be a 1D array because the thing will remain the same so eight rows and it just it's gonna be a skew so let it be two rows and four columns so we can make an array with two rows and four columns or four rows and two columns but we can't make a 2d array with three rows and four columns because that would require 3 into 4 that is 12 elements so that would require 3 multiplied by 4 that is equal to 12 elements but we have only eight elements so now let me just create new arrays so firstly creating a 2d array with four rows and two columns so let the new RN name be ARR new the RR mu is equal to ARR Dot preshape and I'm gonna pass 4 comma 2. now I'm gonna print the new array sorry the name is new so let me hit enter so we got a new array with four rows and two columns now let's make a 2d array with two rows and four columns so I'm gonna write error new is equal to reshape Dot sorry error.v shape 2 comma four I'm gonna print the new array so we have got a new array that is two dimensional with two rows and four columns now let's try to create a 2d array with three rows and four columns so this time I'm gonna pass three comma 4. so sorry I pass 3 comma 3 but still it cannot reshape because the size 8 can't be reshaped into size nine so it gives an error hi guys welcome back to our course on numpy in last video we started the reshape method and today we are gonna continue it so let's get started now let's see whether vshape method returns a copy or it returns a view let me open my terminal so I'm gonna import numpy as NP gonna hit enter now let me create an array so add a name is equal to NP dot array and I'm gonna pass a list to it as usual I'm gonna hit enter so array has been created I'm gonna print add a name or ar Dot reshape I'm gonna give the parameters and I'm gonna add an attribute base to it which is used to check whether it's a copy or it's a view so it gave me an error because the array cannot be converted because size is 9 and the shape is eight so I change it to 3 comma 3 and I have written another command print add a name dot V shape and parameters are three and three and added the attribute base to it and I got the result as the original array and not none so since I got the result as the original array this is a view this is not a copy now you might be wondering what if dimensions are unknown so we are allowed to have one unknown Dimension it means that we don't have to specify an exact number for one of the dimension in v shape method instead we pass 1 and numpy calculates the dimension for us so we know that number of elements is equal to product of the parameters so if we have two parameters the calculation will be number of element divided by the remaining parameters now let's see an example through code so I have opened my terminal once again I'm gonna write python3 hit enter and I'm gonna import numpy as NP so I'm gonna create an array again so array name is equal to NP dot array and I'm gonna pass a python list to it so numpy array has been created successfully now I'm gonna write new array name or new ARR equal to current array name or ar dot reshape and I'm gonna pass two comma 2 and minus 1 so this parameter will be calculated automatically let's see how so I'm gonna print ARR that is original array and new array that is print bracket new ARR so this is the new array now I'm gonna print the shape of the new array and hit enter after closing the brackets sorry I have added an extra pair of bracket let me just correct it so I'm gonna write the command again so the answer is 2 comma two comma Dot comma two so the numpy has automatically calculated third parameter now let's move on to the next topic that is flattening the arrays so what is flattening flattening array means converting a multidimensional array into a 1D array we use reshape and in bracket minus one method to do it so the syntax is array name dot V shape and in bracket we have to pass 1 let's see an example so I've opened my terminal I'm I'm gonna import numpy as NP let me create a 2d array for flattening so arr2 is equal to NP dot array and I'm gonna pass 2 1D arrays as the elements of a 2d array so I have created a 2d array now I'm gonna paint the sorry the array name is arr2 so let me correct it and press the original array and now I'm gonna print the shape of the original array so it is 2 comma 4 that is two elements in First Dimension and four elements in the second dimension so two rows and four columns so now I'm going to reshape it and now I'm gonna print the new array so you can see I've got a 1D array or a flattened array I'm gonna print its shape as well so you can see that that the shape is eight elements in First Dimension hi guys welcome back to our course on numpy in our last lecture we covered vshape method and today we are gonna cover another method under shape manipulation that is the transpose method so let's get started so what is transpose transpose is an operator which flips a matrix over its diagonal it switches the row and the column indexes of the Matrix thereby producing another Matrix some of you must be acquainted with the transpose method so let's see an example so let me just write python3 hit enter now I'm gonna import numpy as NP and hit enter so let's create a 2d or two dimensional array first to find its transpose so let the rnm be arr2 and error 2 or rnm is equal to num Pi dot array and I'm gonna pass 2 1D arrays as elements of a 2d array good morning sorry I made a mistake I have imported numpy as in p so I need to correct it so please take care of the name and the pseudo name or alias so I've created a 2d array now I'm gonna write the command to find its transpose so array name or arr2 will be equal to sorry here I have to write another command that is NP dot transpose and I have to pass the array name that is error2 now let me hit enter so this is the transpose and let me print the original array so that you can see the difference so this is the original array and what we printed previously was the transpose so we can see that original array and its transpose can be obtained by interchanging the rows and columns in a 2d Matrix now let's move on to another question this is a mixed problem on vshape method and transpose first we need to create a 1D array then we need to reshape it to a 2d array and then we need to find the transpose of the two dimensional array so let's go to the solution let me just write python3 and hit enter now I'm gonna import numpy as NP and hit enter now I'm gonna create a 1D array so let's create a 1D array first so let me just write every name this time I'm taking array name as ARR so ARR is equal to NP dot array and I'm gonna pass a python list to it so let the number of elements B 8. now let's reshape this 1D array or this array to a 2d array so I'm gonna write X is equal to ARR dot reshape or rename dot reshape and I'm gonna pass the parameters that is the number of rows and the number of columns I want in my 2D array so I've created a reshaped this into a 2d array now let's print the original array the reshaped array or array after reshaping and the transpose and the transpose so let me just write print ARR or print original array I'm going to write arrs so original array has been printed I'm gonna print the array after reshaping so this time it's gonna be X so the format in which it is displayed it's a little different let me just print X simply so that you can see the whole array at one place or whole Matrix at one place I'm gonna print the transpose so I'm gonna write NP dot transpose so X it's not X it's in P dot transpose and I'm gonna pass X as a parameter so you can see the transpose has been displayed now we can see the original array the array after reshaping and the transpose of the reshaped array so we have fulfilled all the requirements of the question hi guys welcome back to our course on numpy in our last lecture we covered the transpose method under sheep manipulation and today we are gonna learn about the flat and the flattened method under shape manipulation so let's get started so our first question is what is flattening so flattening an array means converting a multidimensional array into 1D array as earlier discussed we can use the reship method by passing 1 as a parameter to flatten an array but we have other methods as well so one of the methods is flat this function returns a 1D iterated over the array or in simpler words it will return the element corresponding to the index in flattened array and the other method is flatten method this function returns an array collapse into one dimension or it returns a 1D array now let's see some examples so let me just open my terminal so let me write python3 hit enter now I'm gonna import numpy as NP and hit enter so I have to create an array first so let the RNA be a so a is equal to NP dot r a and I'm gonna create a 2d array because of 1dr is already flattened and the elements of a 2d array are one the arrays so I'm gonna pass 2 1D arrays as the elements of this 2D array so I've past elements and hit enter now I'm gonna print the original array so you can see the array has been displayed now let me use the flat method first so now let's use the flat method so print after using the flat method or the flat function so we are going to print a DOT flat and we are gonna pass an index so this function will return us the value at index 5 in the flattened array now you can see the value at index 5 in the flattened array is fixed so the value at the index 5 after flattened array is 6 and it has been displayed so the flat function returns 1D operator over the array now let's print the original array and the flattened array to verify our answer so I'm gonna write print array sorry I made a mistake array name is a so I have to write print a now let me print the flattened array using reshape method first so print a DOT V shape I'm gonna pass minus 1 to it so the flattened array has been displayed and you can see that the value at the fifth index in the flattened array is 6. now let's discuss one more way of flattening the array that is the flattened method so now let's look at an entire method of flattening the array are a method of flattening the entire area there is a little average so this is a method of flattening the entire array so I have to write print so let me print the original array first so print original array let me just write print and pass the array name to print the original array so the original array has been displayed now we have to flatten it using the flatten method so I'm going to write print and I have to use the method or the function flatten so I'm gonna write flattened array and now I'm gonna write a command as a continuation of this so a DOT flatten so flattened array has been displayed so this flattened array is 1 comma 2 comma 3 comma 4 comma 5 comma six comma 7 and comma 8 in one dimension so we have got our flat and array using flatten method so in today's lecture we covered flattening flatten method and flat method under shape manipulation that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and please stay tuned with us for more lectures on this series hi guys welcome back to our course on numpy in our last video we covered the flat and the flattened methods under shape manipulation and today we are gonna learn about the concatenate method so let's get started so the first and foremost question is what is concatenation or concatenation so concatenation refers to a group of things linked together or occurring together in a way that produces a particular result or effect and in the context of programming it refers to the operation of joining two entities now these entities can be arrays strings or anything so here we are going to deal with concatenation of two Aries or merging of two arrays so the general Syntax for concatenation is numpy dot concatenate or concatenate and we have to pass the list of arrays we want to merge and the corresponding axis now you must be wondering what is Axis so axis plural are defined for arrays with more than one dimension a twodimensional array has two corresponding axes the first running vertically downwards across row or the axis 0 and the second running horizontally across columns or axis one likewise a 3D array has three axis a 4D array has four axis and so on so now let's move on to the code let me just open my terminal so let me just write python 3. and hit enter now I'm gonna import numpy as NP hit enter now let's concatenate or join two one dimensional RVs so first of all we are going to concatenate or merge or join to 1D arrays so let's create to 1D arrays first so I'm gonna write arr1 is equal to NP dot array and I'm gonna pass a python list to it now I'm gonna create the second array in a similar manner so I have created to 1dras now let me print the result after concatenation of these two arrays so I'm gonna write NP dot concatenate and I'm gonna pass first ra or Error 1 and the second array or ARR to close the bracket and hit enter there was a bracket missing I have to add an extra set of brackets so it gave me an average let me just add an extra pair of brackets and hit enter now we can see the result of the merger of these two arrays now we can see that these arrays have been concatenated so we can see that the arrays have been merged concatenated or joined now let's move on and try to concatenate 2D arrays first of all we have to create two two dimensional arrays so I'm gonna write rr2 1 is equal to num Pi or NP dot array and I'm gonna pass to 1D arrays as elements of two dimensional arrays let me now create the second two dimensional array in a similar manner so let the element be four five six and seven eight nine for the second array of created to 1D arrays before concatenating 2D arrays let's first try to understand the concept of axis so I'm gonna concatenate the 1D arrays again but this time will have an observation to make so I have to concatenate the 1D arrays again so now I'm gonna print the result see I've concatenated the one the address again so by default the concatenation is done along the axis zero so by default the concatenation is along the axis 0. so you must be wondering why did not I pass an axis value when I concatenate it these 1D arrays now let's try to pass value of access so now let's concatenate along axis 1. so I'm gonna give the value of axis equals to 1. so it is given axis 1 is out of bounds or array of Dimension 1 this is because axis 0 is only present in case of a 1D array for X is 1 we have to move to 2dra now let's concatenate are two dimensional arrays so I'm gonna give add it to 1 and add it to 2. I'm gonna hit enter now now I'm gonna print the result or ARR new so this is the result of concatenation of 2D arrays along the axis 0. so this can be concatenated about axis 0 1 and none so an array of Dimension n can be concatenated along n number of axis starting from 0 1 and so on including none now I'm gonna display the result after concatenation along axis 1. so this is the result so in today's lecture we covered the concatenation method under shape manipulation that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and please stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last video we covered array concatenation under shape manipulation and today we are going to learn about the sort method which is used for sorting arrays in numpy so let's get started so first of all what is sorting so sorting refers to the action of putting elements in an ordered sequence an audit sequence is any sequence it can be numeric or alphabetical the order can be ascending or descending now the question is how to sort the numpy ndra has a function or method called as sort that will sort of specified array now let's move on to the code so let me write Python 3 and hit enter I'm gonna import numpy as NP and hit enter now let's sort the array alphabetically first so I need to create an array first for sorting purpose so let it be ARR and the command is error is equal to NP dot R A and I have to pass a python list so let the elements be banana almond or anything you like so the third element is chocolate because I like chocolate so I have closed the brackets and I fit into so I has been created successfully now let's thought so I'm gonna write print and then bracket I'm gonna write NP dot sort and I'm going to pass the array name that is ARR and close the brackets so we have displayed the sorted array so we got the result as the sorted Ari now let's move on let's sort a Boolean array so Boolean values are either true or false so we have to create a Boolean array first so arrb or Boolean array is equal to NP dot r a I made a mistake let me just correct it so this time we are going to pass either true or false values so let it be false false true and close the brackets and hit enter now let's display the sorted array so print NP dot sort and I'm gonna pass the array name or arrp and hit enter so I've got the sorted array but the thing is here the array I have passed and the sorted array appeared to be the same so we can't conclude anything because what we passed an input we got at output so here we got the sorted array but it appears to be same as original array so we can't determine whether it is sorted or not so there's no way of determining because input is same as output so how can we determine whether it's actually sorted or not so let me do some changes in the Boolean array and sort it again so I'm gonna add some true false values randomly to the array so I've added some values and changed to array and I've sorted array so now we can see that the false values are displayed first and two values are displayed at the last this is an important observation so now we can observe that in a sorted Boolean array false values will be displayed before the True Values so this is an important conclusion please take care because this may be asked in an output question in your examination so let's move on to two dimensional array now let's sort a twodimensional array so we have to create a 2d array first so arr2 is equal to NP dot array and this time we are creating a 2d array so we have to pass 2 1D arrays as its elements so let the add elements be three to one for the first 1D array and Let It Be 4 8. 2 for the second 1D array which is an element of 2D array now I'm gonna print NP dot sort and I'm going to pass the array name so I have got the result at the sorted array now we can observe that both the individual elements of the 2D array have been sorted or we can say both the 1D arrays that or which are the elements of 2D array have been sorted so in today's lecture we covered the thought method for sorting the arrays and we sorted 1D array and a 2d array that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and please stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last video we covered the Sorting and today we are gonna learn about iteration so let's get started so first of all what is the meaning of iteration iteration means going through the elements one by one we can use the basic for Loop for of the Python for iteration so iteration on a 1D array will go through each element or scalar one by one now let's move on to the coding path so let me just write Python 3 hit enter now I'm gonna import numpy as NP hit enter now iteration or iterate on the elements of a 1D array so this is the example where we gonna iterate a 1D array so let me create a 1D array first so I've created a 1D array now I'm gonna iterate it using for Loop so for X in array name or err and now I'm gonna write print X and hit enter twice so the elements of on the array have been displayed so this is the result we can see that when we will it wait on a 1D array it will go through all elements one by one so we can say that when will it wait on a 1D array it will go through all the elements one by one where individual elements are scalars this is a very important observation that we are actually going through the elements of the array in this case the elements are scalars so the scalars have been displayed now let's iterate on 2D arrays so we are gonna create a 2d array first so array name or arr2 is equal to NP dot array and now I'm gonna pass to 1D arrays to it because elements of a 2d array are 1D arrays so I have passed now I'm gonna hit enter so array has been created now I'm gonna use four for X in add a name or error 2 and I'm gonna print X so you can see that list to list have been displaced and not the scalars so some of you must be expecting the scalars as a result but we got the answer as to list which are the original elements of R to the array so we can see that when we iterate on a 2d array it will go through elements of 2D array when sorry which are not scalars so elements of a 2d array are not scalars but one Dr is so in this case 1D RS will be displayed so some of you might be expecting scalars but we got a different result now let's move on to 3D arrays so so in similar manner I need to create a 3D array first so I'll write array name sorry I've already imported so I don't need to write import so I have to write array name is equal to NP dot array and this time we are gonna create a 3D array so always remember to create a 3D array we have to pass 2D arrays as elements so I've passed 2D RS and there are two win numbers so let me just scroll the brackets and hit enter so error has been created now to write the for Loop so for X in ARR or array name I have to print X and hit enter twice so we can see that we got the result as 2 D arrays so we can say that when we iterate on a 3D array it will go through all the elements so it will go through all the elements one by one so it will go through all the elements of a 3D array which are 2D angles and not the scalar so in this case also we got the result as the elements of 3D arrays which are 2D arrays and not the scalars so there's an assignment for you so what you have to do is you have to iterate on the 4D array that you have created as a part of your previous assignment so we'll continue our discussion on iteration in the next lecture so today we started with the basics of iteration in numpy that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we covered the basics of iteration and today we are gonna continue with this topic so let's get started so iteration down to the scalers so to return the actual values the scalars we have to iterate the arrays in each dimension now let's see how so let me just write Python 3 hit enter and import numpy as NP as usual so let's have a quick recap so in our last video we saw that when we iterate on so if we iterate on a 1D array it goes through each element or each scalar element so it goes through each scalar element one by one similarly when we iterate on a one sorry a 2d array it goes through each 1D array element one by one so because the elements of a 2d array are one Dr is so it goes through each one drf one by one so similarly when we iterate on a 3D array it goes through each 2D array element so it goes through each 2D array element one by one so we are going to generalize it so in general we can see that if we iterate honor or on an ndimensional or ND array so if we treat on an ndra it will go through n minus 1. dimensions one by one so this is the generalized result now the question is how to iterate down to the scales so how to iterate down to the scalars how to achieve this thing so we have a goal and we need to achieve it so how to do it so one of the many ways so see whenever we have a problem we have a lot of ways of tackling it so one of the method that we can use here is using nested loops so we are going to use nested faults here so first example is it rate on each element on each scalar element of a 2d array or a twodimensional array so now let's create a 2d array first so so elements of 2D array are one Dr is so I've passed them and hit enter and has been created now I'm going to write the for Loop so for xn array name or ARR and nested Loop for y in this time we are not going to write in ARR or RNA we are going to write in x and we are going to write print y now we can see that each scalar element of the 2D array has been displayed so we are successful in iterating down to the or down to scalars now let's move on to iteration down to scalars in three dimensional arrays so similarly let's iterate down to scalars in a 3D array so we have to create a 3D array first and keep in mind that elements of an ndr array are n minus 1 D Alice so elements of a 3D arrays are 3 minus 1 equals to 2D arrays so we are going to pass 2D arrays as elements so you can take any random values close the brackets and hit enter so array has been created now we have to write the four Loops or nested Loops so for X in rnm or ER for y in x and for V in y and now I have to write print Z in case in place of print y as we did in 2D arrays so we can see that each scalar element of 3D array have been displayed so we are successful in iterating down to scalars in a 3D array now I got an assignment for you so it wait down to scalars in the 4D array that you have created as a part of your previous assignment so you have to iterate down to scalars in a 4D array so in today's lecture we covered how to iterate down to scalars in higher dimensional arrays that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture on this series thank you hi guys welcome back to our course on numpy in our last lecture we covered the method of iterating down to scalars in higher dimensional arrays using nested loops and today we are going to learn about the ND eater method so let's get started so first of all what is ndator Method so the function indicator is a helping function it solves the basic issues that we faced in iteration so in basic for Loops if we have ND array or n dimensional array iterating through each scalar element would require n Loops which can be difficult to write for arrays with very high dimensionality so what we are gonna do is use ndator method so let me just write python3 hit enter I'm gonna import numpy as NP so iterate all the elements or all the scalars or iterate down to the scalars in a 2d array so this is an example that we are going to you do using ND iter method our function so let first of all let's create a 2d array so you know the procedure how to do it we have done it almost 50 times or more I guess so create a 2d array the elements of a 2d array are 1D arrays so pass them close the brackets and hit enter so array has been created successfully now I have to use one for loops with ND iter method or ND heater function so for xn NP dot indicator and I am going to pass the array name so I have written the command and now I'm going to write the print function so print X and hit enter twice so I got the result as scalars so the result is scalars and we didn't need to use nested for Loops so we iterated down to scalars with help of one or only one for Loop and 1 and the heater function so now the question is why is ND eater function more convenient so you can say that why or you can ask that why should we use ND interfunction rather than using nested Loops because all of us are habitual of using nested Loops while iteration so ND inter function is convenient because we don't need to use nested loops but you might have a counter argument that you are comfortable with using nested Loops but then my response would be you can use nested Loop for 3D array for Dra 5D array but the array is off thousand dimensions let us consider that we have an area of 1000 Dimension then you need to write 1000 for Loops to iterate down to scalars in an array of 1000 or array with thousand dimensionality so ndated function is convenient because we don't need to use nested Loops here so in general if we have an ND array we need to use l Loops to iterate down to scalars so if n is of order 100 or 1000 it will increase loc or line of control or code it will increase the line of code and effort of the programmer so you need to write a lot of commands or lines in your code if you want to iterate down to scalars in an array of very high dimensionality so we can say that and the heater function is more convenient so now let's iterate down to scalars in a 3D array so let's iterate down to scalars in a 3D array using ND eater function so the process is same we need to create a 3D array first so elements of a 3D array are 2D arrays so I need to pass those you can choose any random values that you want to choose so just passed parameters and close the brackets and hit enter now you have created a 3D array now we have to write for Loops so for X in p dot NDT and we are going to pass the array name or ARR now we are going to write print X and hit enter twice so we got the desired result so I can say that we are successful in iterating down to scalars in a 3D array now I have an assignment for you so what you have to do is you have to iterate down to scalars in a 4D array or four dimensional array that you have created as a part of your previous assignment so you have to create a 4D array and use editor method to iterate down to scalars now let's move on to next topic which is iterating with different step size using indicator method so in last examples we had this step sizes one so let's change the step size and look at a different example so the question is iterate in a 2d array with help of ndated function and with step size 2 so I have to create the array first so follow the standard procedure so I've created the array now I have to write the function sorry I have to write the for Loop and I have to use n data function so for X in NP Dot and theater and F to pass array and in Array inside the square brackets I have to pass only the step size so it's going to be 2. I need to use square brackets so let's close the brackets and hit enter oh sorry by mistake I used an extra closing bracket this let me just remove it and hit the enter again so so I have written the for Loop now to write print X so I got the result so we have iterated down to scalers in a 2d array with step size 2. so the result is we iterated this 2D array down to scalars with step size 2 and using ND eater method so now I have one more assignment for you so the assignment is iterate down to scalars in the 4D array that you have created as a part of your previous assignment and you have to change the step size to 3. so in this lecture we studied about the use of editor method so that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture on numpy thank you hi guys welcome back to our course on numpy in our last lecture we continued with our discussion on iteration in numpy arrays and we demonstrated the use of and the iter method today we are going to start with searching and look at the where method so what is searching searching is the action of assessing a specified element from the array so here in this lecture we are going to use the where method to search in a numpy array so let me just write Python 3 hit enter now I'm gonna import numpy as NP so in this lecture we are going to demonstrate the use of where method for searching so let me just create an array first so array name or ARR is equal to NP dot r a and I'm going to pass a python list to it so I can write any random elements while creating the list and I need to close the brackets and hit enter make sure that your parentheses are balanced now I'm gonna create a variable X and I'm going to store the index in it so X is equal to NP dot where and I'm gonna pass the condition so where ARR is equal to 2 so this will return the indices where the value at index is 2 so we can see that the indexes or indices where the values 2 are 1 6 and 8. so this means that the value 2 is present at multiple indices which are 1 6 and 8. now let's move on to the next example now we are going to search for a value which is not present in the array so let me just give the value 10 which is not present in the array I have stored the result and I'm gonna print it so we can observe that I got the result as an empty fit or emptiness indicating that the value 10 is not present in the array so this results or it returns an empty list this means that the value 10 was not found or it's not present in the array now let's look at some more examples so one more example so we have to find so find the indexes where the values stored or values are odd so now we are going to write X is equal to NP Dot where and we are going to pass add a name or ARR mod of 2 not equal to zero so this is the condition for the odd elements that when they are divided by 2 the remainder is not 0. so we are going to print the original array and now we are going to print the indexes where the values are odd so at index 0 that is 1 R2 that is 3 at 4 that is 5 so these are the indexes where the values are odd now next example is find the indices where values are even now we have to replicate the same thing we just need to change the condition for all elements the condition is add a name mod of 2 not equal to 0 but here in case of even elements the condition will be array name or ARR mod of 2 equal to equal to 0. now I have displayed the original array and now I'll display the indexes containing even values so the even values are present at index 1 3 5 6 and 8. so in this lecture we started with searching in numpy arrays and we covered or demonstrated the use of wear method that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on number in our previous lecture we started our discussion on searching in numpy arrays and I demands created the use of where method in today's lecture we are going to cover the search sorted method for searching in numpy arrays so let's get started so Source sorted method performs binary search in an array it Returns the index at which specified values should be present in order to maintain the order so the thing is it assumes the array to be sorted so let's move on to the coding path let me just write python3 hit enter so here we are going to use search sorted method so search sorted method performs binary search on the array so we need assorted array so binary search is always performed on a sorted array so we need to sorted array just we like we do in binary search so array name is equal to sorry first after import numpy import numpy as NP hit enter now let's create an array in which the elements are present in ascending order or in other words an array which is already sorted so let me just create an array name or ARR is equal to NP Dot array and I have to pass a sorted python let's do it so let the elements be 1 to 10 close the brackets and hit enter now let's find the index at which value seven is present so I have to create a variable to store the value so it can't be ARR it has to be some other thing so X is equal to NP dot so it's sorted and I'm going to pass the array name and the value so I have to print X so the result is 6 it indicates that the value 7 is present at the index 6. now let's search for a value that is not present in the array so I have to write X is equal to NP Dot so it's sorted you have to pass the add a name as well as sorry the array name is error so I have to change it to ARR so I've passed 12 which is not evaluate the index so I'm going to print X so the result is 10 which is a little ambiguous because there is no index then and there is no value 12. let's try one more time so I'm going to write 130 this time and I'm going to print X again so again I got the result is 10 which is the number of elements present in Array and its little ambiguous because there is no index then we have indexes from 1 to 9. so I think when there is a value which is not present in the array it gives the number of elements present in the array as to the result and not the index or empty list so let's search from the right side so in previous example the indexes were counted from the left now let's count indexes from right now let's create a new array and elements are 3 4 5 and 6. so I'm going to write X is equal to NP Dot so it's sorted this time I'm going to pass the array name the element to be searched and also the side so the side is right so hit enter and I'm going to print X so the result is 2 but note that this is not the negative indexing from right because generally we prefer to do negative indexing from right so one thing that we need to observe is here the element is present at index to if we do positive indexing from right that is we conceded 6 at the root index 5 at first index and 4 at second index and so on now let's search for multiple values so till now we searched one value at a time but now we are going to search for multiple values at once so let's print the array first so R is three four five six and I'm going to write X is equal to NP dot so sorted and I'm going to pass the array name ARR and I'm going to pass the list of values for searching so I've passed the list of values and I'm going to print X so it denotes that the values 4 and 5 are present at the indexes 1 and 2. one thing to note here is here instead of returning a single index it returns a list of indices corresponding to the values or the search values or we can say that the values entered now let's move on to the next example which is in the form of a question so the question is for an array given as 1 comma 3 comma 2 comma one five comma 32 comma 53 comma 21 comma 67 we need to search the location of element or element 2 using search sorted method so this is the question now let's move on to the solution first of all the important thing to note here is that since the array is not sorted we have to sort it first because if we use the search sorted method it performs the binary search and for the bind research we need a sorted array so since the array is not sorted we need to sort it after creating and then search sorted method so these are the steps to approach the solution so first of all we have to create the array so add a name it's X this time so X is equal to NP dot array and I have to pass the list of elements given in the question so I've passed the list of elements and I have created the array successfully now second step is to sort the array using the sort method as already discussed in previous lectures so if you are not acquainted with it please go through the previous lecture another thing to note here is that I have not sorted it I just displayed the result after sorting I have to sort and store the result if I don't do that and directly use the search sorted method I will get ambiguous results or error so let's see what if I just sorted and display the result but not actually store the sorted result so after printing u i get the result as 1 but 2 is present at the location 2. and 3 so the result is wrong so the correct way to do is I have to store the result of the sorted array so there is a mistake here there were no changes made to original array so what I have observed is many students just display the result of after sorting and not don't actually make the changes to the original array or store it in another variable so this is a very common mistake please take care of this while doing any project or during your exam so now I have stored the result in a variable y and now I'm going to use the search sorted method again so I'm going to print the value of U so it returns me the index to because 2 is present at the index it is the desired result so in today's lecture we covered the search sorted method for searching in a numpy array that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and please stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we started about the search sorted method to search in a numpy array and today we are going to begin our new topic that is filtering of Aries and this lecture will cover two methods of filtering first one is using Boolean index list and the other one is by the use of filter function so let's get started so what is cell train getting some elements out of an existing array and creating a new array out of them is called as filtering in numpy we can filter an array using Boolean index list a Boolean list is a list of elements corresponding to indexes in the array we can also filter an array using the filter function if the value at the index is true that element is contained in the filtered array and if it is fault that element is excluded from the filtered array now let's move on to the code so I'm going to write Python 3 hit enter I'm going to import numpy as NP hit enter now let us first look at what we are going to do so filter so filter is used to extract values from a sequence under certain conditions so if the condition is fulfilled the value will be extracted and if it's not fulfilled the value won't be extracted so first we are going to create a Boolean array so let the elements be true false true false now let's create a sequence from which we have to extract the elements so this is a python array consisting of Boolean values now let's create a nump by sequence or numpy array to add a name is equal to NP dot array let me pass values so I'm gonna pass four values because I have four Boolean values in my original array but I made a mistake I named both the arrays as same so I need to change one of it so if I don't change and continue with the same names it will give me an error so I need to change so I'm gonna change it so lit the Boolean RS name be arrp denoting that it's a Boolean array now I'm going to do the action of filtering by writing the command new denotes the filtered array is equal to array name and in square brackets I'm gonna pass the Boolean array now I'm gonna print the new array so print new so I got the result as two elements corresponding to the True Values and excluding the elements corresponding to the false values so we observe that in the above example so the example will return 411 and 21 because the values in the array corresponding to so corresponding to that indexes in the Boolean array were true so only 411 and 221 were filtered because the Boolean values corresponding to these elements were true let's look at another example now so in this example we'll create a filter now let's define a new sequence or declare a new sequence so let it be integers from 1 to 10 so I have created a sequence now I'm going to use the filter method to create a filter and not use the Boolean list directly so I'm going to write list and this time I have to pass sorry I also need to write filter method so I have made a small error let me just Rectify my mistake so I've made a mistake and I have to correct it so let me just go back and write filter so I have to create a list so list and in list I have to write filter and filter I have to pass two sequences the Lambda function will generate a sequence a sequence which will contain Boolean values and the other sequence will be our original sequence so we got the result as 2 4 6 8 and then and we observe that this filter which we have created filters out the even elements from the array now let's create or let's create a filter to filter out the odd elements from the array so the procedure will be same we just need to change the condition in the Lambda function those who are not acquainted with Lambda function please refer to our python playlist so we just need to change the condition to not equal to 0 and we obtained the odd elements so we have filtered out the odd elements from the given sequence so that's how we filter array using the filter function of filter method so we demonstrated the use of Boolean index list and filter method for filtering an array that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture on numpy thank you hi guys welcome back to our course on numpy in our previous lecture we started our discussion on filtering of numpy arrays and we discussed two methods of filtering arrays that is using Boolean index list and filter method today we are going to look at another method that is the direct method so let's get started so filtering is a quite common task in numpy so there is an easy method to do it we can directly substitute the array instead of the iterable variable in our condition and it works just fine it will be clear when we look at some examples so let's move on to the code let me just write python3 and hit enter now I'm gonna import numpy as NP and hit enter now let's create a filter directly so creating filter directly from the array that's what we are gonna do so to create a filter we need an array first so let's create an array first to filter out the values from the array so we have to write array name or ARR or array or whatever you want I'm gonna avoid using array completely so I'm gonna write ARR is equal to NP dot array and I'm gonna pass a list to it so I have passed the list as you can see so I've created an array so here we won't use a Boolean index less so in previous lecture we filtered using Boolean index list and filter methods but here we won't use a Boolean index list will you do it directly because it's the direct approach now let's proceed to creating the filter or creating the filtered array so first we have to create a filter and then we can create a filter array so this is the filter so filter is equal to array name greater than 42 so it will filter all the elements which are greater than 42 and new array is used to store this result of the filter so note that filter actually filters a new array is actually storing the result of the filter so I'm gonna paint the new added here you can see that it's an empty list because there's no value which is greater than 42. now let's change the value and so it's now three so it will filter out all the elements which are greater than 3. so I've created a filter I've stored the result in a new array and I have printed the new arrays so all the elements greater than three were printed now you can see that I did not use a Boolean list directly in this example but let's understand what is actually happening at the back end so we need to observe we need to understand so please try to understand this clearly so I was saying that we did not use a Boolean index list directly but we still have a Boolean index list here it is not direct it's not visible to us but it is still present so let's see how so when we so when we execute it the command that is filtered is equal to array name or ER created in three it kind of creates a Boolean index list so the list is present but it is not visible to us so let me just print the result of this filter directly instead of storing the result in a new array so if I print filter I get a Boolean index list so a Boolean index list is present here but it's not visible to us and it's working in the back end so there is a Boolean index list but we did not create it explicitly we have not created a Boolean list directly as we did in the previous example so we can say that this is a direct method now let's see one more example so our objective in this example is to sort the even elements from the add a directly so we have to sort even element from the array and we have to follow the direct approach now I'm gonna write the command for the filter so filter is equal to array name mod of 2 equal to equal to 0 because this is the condition to sort the even elements from the array now I'm gonna store the result in a new array and I'm gonna print the new array I made a little mistake here instead of giving the proper brackets I gave the square brackets so I have to rectify it and write it again so all the even elements have been displayed so we got the even values in the array or original array so similarly we can do it for the odd elements or the odd values so in today's lecture we covered the direct approach for filtering the array that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next video thank you hi guys welcome back to our course on numpy in our previous lecture we started our discussion on filtering of numpy arrays and we discussed two methods of filtering arrays that is using Boolean index list and filter method today we are going to look at another method that is the direct method so let's get started so filtering is a quite common task in numpy so there is an easy method to do it we can directly substitute the array instead of the iterable variable in our condition and it works just fine it will be clear when we look at some examples so let's move on to the code let me just write python3 and hit enter now I'm gonna import numpy as NP and hit enter now let's create a filter directly so creating filter directly from the array that's what we are gonna do so to create a filter we need an array first so let's create an array first to filter out the values from the array so we have to write array name or ARR or array or whatever you want I'm gonna avoid using array completely so I'm gonna write ARR is equal to NP dot array and I'm gonna pass a list to it so I have passed the list as you can see so I've created an array so here we won't use a Boolean index less so in previous lecture we filtered using Boolean index list and filter methods but here we won't use a Boolean index list will you do it directly because it's the direct approach now let's proceed to creating the filter or creating the filtered array so first we have to create a filter and then we can create a filter array so this is the filter so filter is equal to array name greater than 42 so it will filter all the elements which are greater than 42 and new array is used to store this result of the filter so note that filter actually filters a new array is actually storing the result of the filter so I'm gonna paint the new added here you can see that it's an empty list because there's no value which is greater than 42. now let's change the value and so it's now three so it will filter out all the elements which are greater than 3. so I've created a filter I've stored the result in a new array and I have printed the new arrays so all the elements greater than three were printed now you can see that I did not use a Boolean list directly in this example but let's understand what is actually happening at the back end so we need to observe we need to understand so please try to understand this clearly so I was saying that we did not use a Boolean index list directly but we still have a Boolean index list here it is not direct it's not visible to us but it is still present so let's see how so when we so when we execute it the command that is filtered is equal to array name or error greater than three it kind of creates a Boolean index list so the list is present but it is not visible to us so let me just print the result of this filter directly instead of storing the result in a new array so if I print filter I get a Boolean index list so a Boolean index list is present here but it's not visible to us and it's working in the back end so there is a Boolean index list but we did not create it explicitly we have not created a Boolean list directly as we did in the previous example so we can say that this is a direct method now let's see one more example so our objective in this example is to sort the even elements from the add a directly so we have to sort even element from the array and we have to follow the direct approach now I'm gonna write the command for the filter so filter is equal to array name mod of 2 equal to equal to 0 because this is the condition to sort the even elements from the array now I'm gonna store the result in a new array and I'm gonna print the new array I made a little mistake here instead of giving the proper brackets I gave the square brackets so I have to rectify it and write it again so all the even elements have been displayed so we got the even values in the array or original array so similarly we can do it for the odd elements or the odd values so in today's lecture we covered the direct approach for filtering the array that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next video thank you hi guys welcome back to our course on numpy in our previous lecture we covered the direct method for filtering of numpy Aries and today we are going to do some more examples on array filtering so let's get started so we covered three methods of array filtering so far that is using Boolean index list the filter method and the direct method we also filtered the even and odd elements of a sequence using filter method and direct method now let's see how can we filter the even and odd elements of a sequence using the Boolean index list because in previous examples we used to specify the Boolean index list beforehand but now we are going to create Boolean index list using append method that is first of all we'll create an empty Boolean list and then we'll insert the element as true or false according to a certain given condition so let's move on to the coding path so I'm going to open my terminal write python3 and hit enter now I'm going to import numpy as NP and hit enter so let's create a filter Adi that will only return even values from the original array or original sequence so first of all we need to create an array and then we are going to create a filter array that will return only even values from that array so I've created an array I'm gonna hit enter now I'm going to create an empty filter first so the filter is empty it does not contain any Boolean value initially now I'll create a for Loop and if the element is divisible by 2 that is the mod is equal to equal to 0 then I'm gonna append True Value in the filtered array so if it's even the corresponding element in the filtered array will be true and if it is odd the corresponding value in the filter array will be false so we did not initially specify the value in the filter but we are appending the values based on certain conditions now I'm gonna store the values in the new array so I have stored the values in a new array it is giving me an error because of the wrong brackets I need to use a square bracket here so peace please keep these things in your mind while executing your code otherwise you will get an error like me so I need to change the brackets that I did and I'm gonna print the new array now so print new it is giving me all the even values in the array so we got the result as even elements let's understand what actually happened so this thing appears quite complicated when we observe it for the first time because you might be wondering why create an empty filter first and then insert the true or false values in it we do it because we don't know beforehand that what values are we gonna get so sometimes we have to take the array as input from the user so that's the case now what actually happened is the filter stored the Boolean values that were assigned with the help of loop or that would append it to the filter array so the array filter is nothing but a Boolean index list which was used to iterate which was used to filter the even elements from the array with the help of iteration and using a for Loop now for odd elements we need to follow the same procedure we just need to change the selection condition that is add a name or err or mod of 2 not equal to 0 in this case we have to append true so I have to change the condition so in case of not equal to 0 I have to in case of not equal to 0 I have to store true or also I can do is in case of equal to equal to 0 I can append false and otherwise I can append true else filter dot append true so you can follow any of the two approaches that I have suggested so now I'm going to store the result in a new array and so it is giving me an error exactly it should give me an error because there are now 20 values in the filter because 10 were the initial values from the previous example and 10 values are from this example so filter has 20 values which is why we are getting an error message so please be careful because you might do the same mistake now the error is that filter already contains some values and we added values to it so what you can do is that you can create a new filter and then you can store the result in a new array so I'm giving you the this thing as an assignment create a new array a new filter a new array instead of using the same code so this is your assignment so an assignment is to create a filter for filtering odd values or or elements from the same array which we used in this example now we have one more assignment for you so the second assignment is to create a filter for filtering the elements from the array in the given example so filtered elements from array in given example or in this video lecture which are greater then four so in this video we discussed some examples based on filtering using Boolean index list that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we did some examples on array filtering and today we are going to study how to calculate mean median mode and standard deviation using numpy methods so let's get started so as you must be knowing mean median and mode are the measures of central location of data and standard deviation gives us the extent of deviation of the data about the central location these measures are of utmost important while analyzing any data so let's get started with the coding part let me open my terminal so I'm going to write Python 3 hit enter now I'm going to import numpy as NP so first of all let's talk about or let's take a look at the measures of central location so as you must have studied in statistics at some level about the majors of central location so there are three main majors of central location they are mean median and mode as we know the mean refers to the average value of the data similarly the median refers to the middle value of the data so median divides the data sets into two equal parts and finally the mode refers to the most common value it is also known as the most repeated value of the data sets now let's calculate the measures of central location using numpy methods for that we need to create an array first so let's create an array and calculate all three measures of central location for that particular array so I'm going to create an array with name X so X is equal to NP dot array and I'm going to pass a python list so this is our data so it can contain any random values but make sure that it had some repeated values so we calculate the mode otherwise it will be a multimodal data set now let's start with calculation of mean so let's first calculate mean and we are going to use the standard formula so what is the standard formula standard formula is the one that you use like you calculate the sum and you divide by the number of samples or number of observations so this is not a numpy method it is the general formula that we use or we are using since fourth or fifth grades so we need to find the sum of all the samples or all the values and we have to divide by the number of values or the number of samples so let me just add all the values and divide it by the number of values so what is the number of L is one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen so I have total 15 values or 15 samples so I have to divide by 15. so divided by 15 close the bracket and hit enter so this is the mean that is 3.5333333 and so on now let's use the mean method which is the method of numpy so I just need to write print in P dot mean and I have to pass the array name we can see that we obtain the same result in both the cases so I don't need to add all the values and divide it by the number of values because if we have a very large data set it will be difficult so it's easier to use the standard method offered by numpy let's calculate median now which is the middle value so to calculate the median we should have a sorted array now the question arises that why do we need a sorted array so if you are in a state to recall the method you followed in your primary school that we just need to sort the array in US sorted order whether ascending or descending and we just need to circle out the middle value so you need to count from beginning and count from back and the value where you meet by taking unit step at a time so that value will be the median and in case you get two values it will be the average of those two values so here I have obtained the array in a sorted order using the sort method of numpy now the middle value as you can clearly see is three so median of this data is 3. now let's use the median method for that I just need to write print NP dot median and I need to pass the array name so as you can see that the answer is 3. so now let's calculate or move on to mode thank you so let me just obtain the sorted array again as you can clearly see in the sorted array 2 is repeated five times so it is the most repeated value so mod of this data set or data is to now let's use the mod method now the procedure is same print NP dot mode and pass X but you got an error this time so here's the catch numpy does not offer any method to calculate mode so there is no inbuilt method in numpy to calculate mode so you must be wondering how to calculate more than I'll get back to that topic in a while first of all let's explicitly mention this error because there's a very high probability that you will make the same mistake and get the same error while calculating the majors of central location because other central location measures can be calculated by numpy methods but for this you need a scipy method called as mode so I got an error because mod is not an attribute of numpy it's an attribute of PSI Pi or Scientific Python we'll discuss this library in detail later on we will create a separate playlist for scifi for now just look at what I'm going to write and copy paste the same thing in your command prompt or your terminal or whatever ID you are using to implement this code so from PSI Pi import stats so stats is a module of PSI pi so print stats dot mod x so the result is 2 and the count is 5. this shows that the mod of the given data is to and it has occurred five times so it shows the mod as well as the count of that mod count just refers to the number of time a particular value occurs so don't be worried for now just copy paste the same thing if you are not able to understand it's not a big deal we are going to explain it in detail later on now let's move on to calculation of standard deviation standard deviation is a measure of deviation dispersion how much the data deviates from the central value in this case it's going to be mean because you can calculate standard deviation around mean median as well as node but this inbuilt method is only for mean because most important measure of standard deviation is standard deviation about mean so I just need to write print NP dot STD and I need to pass the array name and I got the result and this is the most important thing to note that it gives the standard deviation about mean now I have an assignment for you calculate the standard deviation using the correct formula so this time you don't need to use this inbuilt method you just do it using the standard procedure that you follow in probability and statistics and peace match both these values they will be same but I want you to calculate it manually so that you can verify the result and you need to check whether the theoretical value coincides with the calculated value so in today's lecture we covered the measures of central location that is mean median and mod and we also demonstrated the use of STD method for calculation of standard deviation that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we covered the measures of central location as well as we calculated the standard deviation and in today's lecture I am going to explain and demonstrate the use of a range and Lin space methods of numpy so let's get started let me open my terminal so first of all I'm going to write python3 and hit enter so what is a range method that's going to be our first topic so numpy e range is one of the array creation routines in Python our equation routine is just a method to create an array so a range method is one of the array creation routines or array creation methods based on numerical ranges it creates an instance of ND array with evenly spaced values so it creates an instance of ND array with evenly spaced values and Returns the reference to that array in simpler words because I know that complicated definitions are a little difficult to understand so in very simple words or in beginners or true Keys words it returns a list of integers between the start and stop parameters so it returns a list of integers between the start and stop parameters or values including the start value but excluding the stop value or the end value so it's pretty simple now it's a method to create an array so that array will contain a list of values which will be evenly spaced and they will be between a start and a stop value so let me just write array is equal to NP dot arrange and pass a start value and a stock value sorry I have not imported num by as in p first so it's giving me an error let me just import an do the same thing again so array is equal to NP dot arrange and I need to pass 0 and 11 as start and stop value and I need to print the array so you can see that I pass 0 and 11 so I got all the integers between 0 and 10. and not 11 so 11 is not included so this returns us numbers from 1 to 10 and one thing to note is that 11 is not included so that's an important observation and an important thing to keep in mind while working with events method if you might have observed erange method is very similar to the python range method so if you are not acquainted with the range method please refer to our playlist on python another important attribute of the Aries method is the step size we can also specify the step size so let me just specify this step size as 2 now I am printing the array again and now I got only the even values so note that this returns us the even values or the even numbers from 0 to 11. so whenever there's a question that create an array of even numbers between a starting and an ending value you can always use a range method and specify the step size as 2. so we can specify whatever step size we require now let's move on to the Lin space method so we discussed the arrange method which is very similar to the range method in Python and now we are going to move to Lin space method and see what is the difference between a range method and the Lin space method so the Lin space method returns evenly spaced points or elements between a start value and an end value so it returns evenly space points or elements between a start value and a stop value but an important thing to note here is that they don't need to be integers so arrange method always returns us integers but Lin space meth third will return us evenly spaced values or evenly spaced point but they will not be integers so the syntax is numpy alleys or NP dot Lin space we need to pass start stop and the number of elements or the number of points that we need or required so note that the difference between the Lin space and E range is that Lin space does not necessarily return integer values this is a very important point to emphasize that's why I am repeating it multiple times so that it gets into your head directly so don't confuse Lin space with earrange method because it returns integer values only so now I'm going to demonstrate the use of length space method so you need to follow the syntax as described earlier so the start is 0 and this 5. and number of values required are 10. so it gives me 10 values another important observation here is that it Returns the start value as well as the end value yes so that's another difference between lens space and erange Method because erange method excludes the end value while the Lin space method includes the end value now the next example is obtained 100 points between 0 and 1 which are evenly spaced so this time I need to specify the start as 0 the end as 1 and the number of values required as 100 now I have printed the list so it gives me 100 values between 0 and 1. and it includes one that's the difference now I have an assignment for you obtained 50 evenly spaced values between 6 and 9 using Lin space method so that's your assignment I hope you complete it so in today's lecture we started about a range and lens space methods of numpy and I demonstrated the use of both that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we studied about the a range and length space methods of numpy and today we are going to see how to create an array containing all values as zeros or ones and also how to create identity mattresses in numpy so let's get started so I've opened my terminal I'm going to write Python 3 hit enter and I also I'm going to import numpy as NP so our first job is to create a 1D array with all elements as zeros so creating a 1D array of all zeros or an array in which all the elements are 0. so the syntax is array name is equal to numpy Alias or NP Dot zeros and I need to pass the number of values so number of elements or number of values is going to be the parameter in this case now let's create an actual array by following the syntax so array name is equal to NP dot zeros and I'm going to pass 5 as the number of values and I'm going to print this array so I got the result as an array containing five zeros now let's create a 2d array or a matrix in which all the values are zeros foreign I need to pass a tuple to this method that is rows and columns in last case I only passed the number of elements but in 2D array we have rows as well as columns so we need to pass a tuple containing number of rows and number of columns so we need double brackets here because it's a tuple we are passing a tuple and not a scalar so the syntax is same with slight change so I have created a 2d array of all zeros containing three rows and four columns now let's create a 1D array of all ones or an array in which all the values are 1. so syntax is same as zeros but we need to replace the word zeros by ones so syntax is same as the previous example we just need to replace the word zeros by once it's same as we do in physics like we replace and one and M2 by q1 and Q2 and the formula changes from Newton's law of gravitation to Coulomb's law with different constants of cos but it's a slight change so please take a joke and let's move on so I need to write array name is equal to np.1 and I need to pass 5 because I'm creating an array of ones which contains five ones or in which the value 1 occurs five time and the only value present is 1. now let's create a 2d array of all ones so syntax is same we need to pass a tuple this time with number of rows and number of columns that we want so I have specified that I need an array of all ones a 2d array of all ones with three rows and four columns so I got the relevant or the required result now let's see that how can we create identity matrices so for those who don't know what is an identity mattress so it is a special type of mattress in which the diagonal elements are 1 and rest of the elements are 0 and by diagonal I mean the main diagonal which starts from top of left side and ends at the bottom of right side because there are two diagonals but there is only one main diagonal in a matrix so we can use the I method to create the identity Matrix and in this case we have one parameter that is the order of Matrix because an identity Matrix will always be a square Matrix so it returns a matrix and not a vector so syntax is NP dot I and I need to specify order and order is 5 in this case so in today's lecture we studied how to create an array with all values as ones or zeros and also demonstrated the method to create an identity Matrix that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we studied how to create an array of all zeros and ones identity mattresses and today we are going to get acquainted to random module in numpy and it's related methods so let's get started so first of all what are random numbers so Random means something which can't be predicted with help of logic it does not necessarily mean getting a different number every time or a different value every time numpy offers the module random to work with random numbers now let's try to understand the difference between true random and pseudorandom we all know that computers execute programs and programs are a set of instructions with definite meaning so programs are used to implement some algorithms to solve specific problems so there must be an algorithm to generate a random number now the question arises if some algorithm or program is used to generate a random number the random number generated with the help of algorithm can be predicted so it's not true random because as per the definition of the random number we can't predict random number with any kind of logic so we can say that the random numbers generated by algorithms on our computers are not true randoms they are referred to as pseudorandoms or false so whenever we work with randoms in our programs we work with pseudorandoms now let's move on to the coding part so let me write Python 3 hit enter now let's generate a random number with type float and by using Rand method so we are going to generate a random number which will be of the type float and we'll do it with the help of Rand method of the random module of numpy so I'm going to import numpy S and P and write x equal to random Dot Rand and hit enter so here one thing to note is that it gives us an error because we have not imported the random module directly from numpy so we need to use numpy Alias with random and Rand so I am going to write NP dot random dot Rand method and I'm going to print X now so I got a random number so note that this returns a random number between 0 to 1 and it's of the type float So Random Number of the type float between 0 and 1. so now I'm going to show you another method to import random directly so now let's import random directly so we don't need to use NP in this case we don't need an alias we can just write random dot Rand directly so for that we have to import the random module directly from numpy so in this case I'm going to write from numpy import random so from numpy import random so now I can directly use random dot Rand method and I don't need to write NP Dot random.rand so directly write random dot brand and print the value of variable in which you have stored the result so I got the random number so note that the values are different so the values in both the cases are different because they are working with random numbers and it absolutely makes sense to get a different value each time we are calling the function so we are getting different values and they are correct so there's an assignment for you generate a random number between 0 and 100 sorry it is 0 and 1 I have just missed the decimal and it should be of type float so today's lecture was an introduction to the random module and use of Rand function in numpy that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we started with the random module in Python and I demonstrated the use of rant method of random module to generate a random number today we are going to cover brand method in detail so let's get started let me just write python3 hit enter now I'm going to import numpy as NP and let's start our discussion on plant function or the run method so the run method returns random number or numbers or I can say that random sample or samples of type float between 0 and 1. so it returns random samples of type float between 0 and 1. so samples are taken from a uniform distribution this is a very important point so it returns random samples of type float between 0 and 1 and samples are taken from a uniform distribution we have a lot of distribution of different kinds and this Rand function takes samples from a uniform distribution so the syntax is x equal to NP dot random dot brand as discussed in the previous lecture now we have to print X to get a random number between 0 and 1. so now what if we want more than one sample so this example generated one random number now what if I want an array of random numbers between 0 and 1. and the samples which belong to a uniform distribution so the syntax is NP dot random dot Rand and I need to specify the number of samples so now let's generate five random numbers of type float between 0 and 1. so the syntax is X is equal to NP dot random dot rant and I need to pass 5 as parameter denoting that we are going to generate five random numbers so I got the result so we get a list as a result now let's generate a 2d array or a matrix with the help of Rand method and all the values of that Matrix will range between 0 and 1. they will be random and they will be the samples of a uniform distribution now I just need to write x equal to NP dot random dot Rand and I need to pass rows as well as columns and I need to print X so I got the result as a Square Matrix because I have passed equal number of rows and columns but you can pass different parameters like less value of row and more value of column or vice versa so we got a matrix as a result with five rows and five columns so now there is an assignment for you create a matrix with the help of Rand method of two rows and one column so in today's lecture we covered the rant method of the random module in detail that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the rant n method and today we are going to cover the rant n method of the random module of the numpy and we'll try to understand what is the difference between the rant method and the Rand and Method so let's get started so let me just write Python 3 and hit enter now I am going to import numpy as NP and hit enter so I've imported the numpy library now the numpy Dot random Dot Rand in method here we have not imported the random module directly so we will use numpy or NP dot random dot friend in as the whole syntax so it creates an array of specified shape and fills it with values or numbers as per the standard normal distribution so it creates an array of the specified shape and fills it with the values as per the standard normal distribution now if you recall in case of the Rand method it fills the array with values as per the standard uniform distribution this is a very important difference between the Rand and the rant in method so one important thing to note is that it fills the array with random floats sampled from univariate normal or we can say gaussian so the rat and Method take samples from a normal or gaussian distribution and mean of that gaussian or normal distribution is 0 and the variance is 1 will cover the uniform and normal distribution later on this is just a brief intro now note that normal distribution is a distribution which is continuous in nature we have a lot of different kinds of distributions in statistics like uniform distribution normal distribution poisson distribution relics distribution Etc so normal distribution is a kind of continuous distribution and it has a probability density function as opposed to the discrete distributions which have a corresponding probability Mass function now an important thing to note is that if we provide no argument in this brand in method then it will return a randomly generated float which will be sampled from the distribution or we can say from the normal or gaussian distribution so this is a very important thing to note so if we provide no argument then a single float randomly sampled from the distribution is returned so please keep a note of that now we'll start with the code and first of all I'm going to pass no argument so I'll write X is equal to NP dot random Dot Rand in and I'm going to pass known parameter and I am going to print the value of x so I got one random number which is a sampled from a normal distribution which is centered around zero with mean 0 and variance 1. now I'll create a 1D array so I need to pass one parameter and I need to print the value of x so this is the result so as a result we got a 1D array or I can say that a row vector so the result is a row vector or a 1D array similarly if I want to create a 2d array I need to pass two parameter that is the row count as well as the column count so now let's create it to the array or a matrix so I need to follow the same syntax I just need to give two parameters this time so let it be four and three I'll print so I got a matrix with four rows and three columns so the result is a 2D array or I can say a matrix now let's create a 3D array so the syntax will be same I just need to pass three parameters this time because a 3D array has three dimensions so I need to follow the same syntax I just need to give three parameters and I'll print the value of x again so you can see that I have got a 3D array as a result so result is a 3D array or I can say that a third order tensor because if you recall in higher dimension end order array is referred to as nth order answer now I've got an assignment for you create a 4D array randomly using the Rand n method and print it so in today's lecture we covered the use of Rand and method of the random module of numpy that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the rant n method and today we are going to learn about the rant end method of the random module of numpy so let's get started so let me just write python3 and hit enter now I'm going to import numpy so I'm going to import numpy as NP hit enter so today we are gonna discuss about the round end method so round end stands for random integer and it is an inbuilt function offered by the random module of numpy so it's an inbuilt function like Rand and brand n and it's also a function of the random module of numpy so you know that the random module gives access to various useful functions so the module random gives access to various useful functions and one of them is Rand and which is able to Generate random integer numbers so the rant and Rand in functions generated float values but this function generates random numbers and they are of type int now let's move on to the syntax so the syntax is you have to write NP or numpy dot random dot Rand int and you have to pass the start to stop value so you have to give a range within which you want to get a random integer so this is the syntax and also note that both the start and stop values must be integers so the start stop values indicating the range must be integer values otherwise you will get an error while executing the statements so now let's just write X is equal to NP dot random Dot Rand int so dot Rand int and pass to start as well as the stop value and now I'm going to print the value of this randomly generated integer so it's 8 in this case you may get a different value because we are working with random numbers now let's move on to some more examples so next example is generate a random number between minus 10 and minus 1 and it should be of the type integer so I'm gonna write X is equal to NP dot random dot run in and I'm going to pass the start as minus 10 and the stop as minus 1. now I'm going to print the value of x and it comes out to be 3 so I have generated a random number of type integer between minus 10 and minus 1. now let's see what happens when we pass noninteger values so x equal to NP Dot random dot Rand IND and I'm going to pass noninteger values let's see what happens ideally it should give us an error so I'm going to pass the float values and I'm going to print the value of x now so I'm going to write print X and hit enter now you guys must be wondering that we got a result but we should get an error so this is because there might be an update I guess now we can use compatible data types as start and stop values now let's try using noncompatible data types like string or character values so I'm going to pass character values this time or string values so it gave me an error so invalid literal for INT with base 10 so this is an noncompatible data type so note that we got an error with noncompatible data type and in the previous versions if you try float values also you will get an error because now there might be an update but in previous version it gave us an error now there's an assignment for you generate a random number between minus 5 and Let It Be 4 and 4 using rant end method so in today's lecture we covered the rant end or the random integer method of random module of numpy that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the rant end method and today we are going to do some more examples based on the methods offered by the random module of numpa so let's get started so let me just write python3 hit enter now I'm going to import numpy as NP and hit enter now today's topic is some more examples on the methods offered by the random module of numpy so we'll try to do some mixed examples so first question is create a 1D numpy random array and sort it so we have to create a 1D numpy random array and we need to sort it so let's move on to the solution first of all let's create the array let the RN name be a so a is equal to NP dot random dot Rand and let the number of elements be six now let's print the sorted array so I have to write print and in bracket I have to pass NP dot sort and in sort I have to pass e so this is the sorted array you can see that it has been sorted according to the ascending order so if we got the sorted array and we use Rand method to create a random numpy array or we can say we use the Rand method of the random module of numpy to generate a random array and we used the sort method of numpy to sort the array so this was a mixed example now let's move on to the next problem so next problem is problem number two create a 2d Matrix of dimensions 2 cross 3 that means two rows and three columns so create a 2d array or a matrix with Dimension 2 comma 3 that contains six random numbers between two and six so let's move on to the solution so I have to write array name or ARR is equal to NP dot random Dot Rand this time I need an array that contains integer values and I have to pass the start stop as two and six and I have to pass the dimensions of array as a tuple so that is 2 comma 3. Now I'm going to print this array so you can see that I got a 2d array with Dimensions 2 comma 3 or 2 rows and three columns and it contains random numbers or random integers between 2 and 6. so here we constructed a 2d array or Matrix with help of Rand int method now let's move on to our third example or third problem so problem number third is use numpy random number function to generate at least 1000 numbers between the range of 1 2 1 lakh or hundred thousand and after generating we need to perform some operations so we have to generate an array of thousand numbers and the range is 1 to 1 lakh or hundred thousand and we need to perform some operations on it so let's move on to solution so first of all let's create the required array so I'm going to write ARR is equal to NP Dot random dot Rand int and I am going to pass start stop and the number of elements so in this case it's 1000 so size is 1000. now the first operation is or I can say that the first part of the question is to sort these elements so I have created an array with random integer numbers from 1 to 100 000 and now I need to sort these elements and store them in a new array so the new array name or ARR new is equal to NP dot sort and I'm going to pass the RNA now I'm going to print the original array first so you can see that it contains randomly distributed numbers and I'm going to print the new array now so it is sorted I'll scroll so that you can see clearly the first one was there randomly arranged numbers and second one is the sorted array now the second part is to determine the maximum and minimum element so part 2 is to determine the maximum and minimum element from this array so we need to write Min element or mean Le whatever variable name you want to give and that is equal to NP dot Min and we need to pass the array name and similarly for the max just replace the Min by Max and I'm going to print these values now so print Min Ellie as well as print Max early so the minimum element is 268 and the maximum element is 999.05 you may get different values as we are working with random numbers now the third part of the question is to determine the average or we can say the mean so for that I have to write err mean or whatever variable name is equal to NP dot mean and I have to pass the array name that is err or now I'll print it so the mean of all the values is around 50 252 .304 and now fourth part of the question is an assignment for you that is find the mod the median and standard deviation for this data contained in the array so in today's lecture we solved some questions based on the methods offered by the random module of numpy that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thanks hi guys welcome back to our course on numpy in our previous lecture we solved some examples based on the methods offered by the random module of numpy and today we are going to take a look at random permutations so let's get started today we are going to execute our code in the Jupiter notebook I'll teach you how to set up jupyter notebook in the next lecture so let's start with today's topic so a random permutation refers to an arrangement of elements for example take an array with the values 4 3 2 1 so it is a random permutation of one two three four and vice versa so just with a sequence we can make several different arrangements or combinations so they are called as permutations so a lot of other permutations are possible as well but the numpy methods which we are going to study today they give only one permutation on passing the sequence so we get only one random permutation on passing a sequence or an array so a lot of permutation are possible that can be calculated using the formula npx but here we'll get only one random permutation by using methods of numpy random module So numpy Random module has two methods to find out the random permutation the first method is the shuffle method so for that I need to create an array first so I've created an array and now to get a permutation I need to write NP dot random dot Shuffle and I have to pass the array name now I'm going to print the shuffled array first to get a permutation so it gave me an error because I have not imported numpy so let me just import numpy as NP first and let me run this cell again now let me just print the array after shuffling so I got the result as four two one three five which is a permutation of one two three four five also note that this Shuffle method makes changes to the original array so if I write print in P dot random dot Shuffle and I pass the array name I'll get no result or the result as none now the second method is using the permutation method so now let's create an array again the same array we created the same array again because it has been shuffled so now I created the array again and I use the method permutation so I need to write NP dot random dot permutation and I need to pass the array name as ARR so I got another permutation of one two three four five now let me print the original array as well so I'll print array name or ARR and I'll hit enter or run this cell by shift plus enter now I got the original array as well as you can see the array after permutation now shuffled array makes changes to the original array while the permutation method does not make changes to the original array please note this this is a very important observation to make also note that if you want changes in original array you need to use the shuffle method and if you don't want any changes in the original array you need to use the permutation method because you need to choose according to the situation that you are in now there's an assignment for you create an array using rant end method so create an array using the Run Inc method of the random module of numpy sort that array using sort method and the third objective is to find the random permutation for that Adi or distorted array so in today's lecture we covered random permutations and the shuffle and permutation method to obtain a random permutation that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with also next lecture thank you hi guys welcome back to our course on um bye in our previous lecture we covered random permutations and today I am going to teach you how to install Anaconda get started with the Jupiter notebook and how to install C bone and matplotlip libraries so let's get started so I'm sharing my screen I'm going to Safari so you can go to your browser and you can search Anaconda so it's showing the name of website as I had already installed so you can see the first search result as the name of the website now this is the website or the official website for installing the Anaconda package so this is the website and you can click the download since I'm using a Mac so I'll install it for Mac if you are using some different operating system it will show you the package corresponding to that particular operating system now it's downloading so it's of around 620 MB for Mac OS users it may vary according to whatever operating system you are using since I have already installed I am canceling the download but you need to complete the download so there's one other method to download Anaconda if you are using a Mac with and you have Homebrew support so go to home brew and search Anaconda so you will get a command to install Anaconda so just copy it open your terminal so I'm going to open my terminal and just paste the command and hit enter so paste the command and hit enter now it's taking a little bit time here the running View Auto update so it has updated and it's showing cast Anaconda is already installed because I have already installed Anaconda so it's already installed now let's move on to installation of libraries that are c bond and matplotlib you can install these libraries using pip installer package or anaconda so here I'll be installing them using pip installer package first so I need to write pip install c bond to install c bond so it shows requirement already satisfied because it's already installed in my system now similarly for matplotlib I have to write pip install matplotlib so it will show requirement already satisfied again because I have already satisfied these libraries now let's see how to install them using Anaconda so if you want to use Anaconda for installing these libraries so you need to write the command conda installed C bone and the process will take some time so there is some background process going on so there will be some processing so it shows done so it's asking for a permission to install new packages since I have already installed so I won't be proceeding with this but since you are installing it for the first time you have to proceed with why so you need to proceed with y and similarly you need to install matplotlib using the command conda install matplotlink so the process is similar you just need to replace c bond with matplotlib so the command will be conda installed matplotlib let me clear the screen now let's open the Anaconda Navigator so open the Anaconda Navigator and close the terminal so I've opened the Anaconda Navigator and it's showing a lot of options but we have to select the notebook and click launch so it will take a minute or 30 seconds and it will open in your browser don't worry this process is offline it doesn't require internet connection so just create a new folder wherever you want to store your code so I've created a new Untitled folder for that so I'll just open this folder by clicking on it so it shows the notebook list is empty and I'm going to create a new notebook now now this is a cell so in this cell I am going to import numpy as NP I'm also going to import c bond as SNS and import matplotlib dot Pi plot as PLT and I am going to hit shift and enter to run this cell so it gave me no error so we have successfully imported these libraries you can also rename the notebook by clicking on the name that is Untitled so I'm changing it to my first notebook so now there is an assignment for you so assignment is that you need to practice some of the problems that we already discussed in the previous lectures in Jupiter notebook because if you practice more you'll get acquainted with this quickly so practice some of the codes we have discussed in previous lectures in Jupiter notebook so in today's lecture I demonstrated how to install Anaconda and also how to install c bond and matplotlip libraries using pip installer package as well as Anaconda we also created our first Jupiter notebook that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thanks hi guys welcome back to our course on numpy in our last lecture I explain you how to install cbond matplotlip and get started with the jupyter notebook and today I am going to teach you the normal distribution so let's get started so as per Wikipedia normal distribution also known as gaussian Gauss or LaPlace Gauss distribution is a type of continuous probability distributions for a real valued random variable the general form of its PDF or probability density function is given by f of x is equal to 1 by Sigma into under root 2 pi multiplied by e daised to the power minus 1 by 2 x minus mu by Sigma whole Square here f of x is the probability density function mu is the mean of the distribution and sigma is the standard deviation now let's look at the plots so these are the normal thoughts for different mean and for different standard deviation values so one General observation is the distribution will always be centered around the mean so in this blue curve the mean is zero so centered around 0 same for red and yellow but the green is centered around 2 and you can see that they are dispersed differently now let's take a look at the CDF curves so these are the CDs curves so three curves intersect at zero because they have mean as 0 and 1 is passing through minus 2 because the mean is minus two so this was a CDS curve now let's move on to the coding or plotting part so generate a random normal distribution of size 3 into 3 with so we have parameters here so the parameters are mean and standard deviation so here mean is 1 and standard deviation is 2. so from numpy import random so from numpy import random and proceed further so X is equal to random dot normal and we will specify the parameters that is location is equal to one K is equal to 2 and size is equal to whatever is the size of the distribution so location means the mean what the value around which the distribution is centered so this is the returned array and the elements are the samples taken from a normal distribution now let's visualize the normal distribution visualization is a very important aspect because here we are dealing with c bond numpy as well as plot lip so a combination of these three libraries helps us in visualization the math plot ping matplotlip being the grandfather of the visualization libraries so now let's visualize import matplotlab as sorry matplotlip dot Pi plot as PLT and import c bond as SNS now SNS Dot this plot and we are going to pass an array which contains samples taken from a normal distribution so random.normal and size is equal to so let the size be 1000 and hist is equals to false so we have taken the hist as false because normal distribution is a continuous distribution so we are just concerned with the KDE plot so here I'm using jupyter notebook so I taught you how to install all the libraries and get started with the jupyter notebook if you have skipped that lecture I advise you to go back and watch it again so here I'm using the jupyter notebook but if you are using any other platform then you have to write PLT dot show and here sometimes in jupyter notebook we also use percent map plot lib inline explicitly for jupyter Notebook also please note that normal distribution has a belt shaped curve so in today's lecture we covered the normal distribution the PDF and CDF of a normal distribution and their plot and we created an array with values from a normal distribution and at the last we visualized the shape of a normal distribution curve that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the normal distribution and today we are going to take a look at the binomial distribution its PDF curve and how to plot the PDF for a binomial distribution using numpy cbond unmapped plot clip so let's get started so what is binomial distribution so binomial distribution is a discrete distribution it describes the outcome of binary scenarios example toss of a coin that is head or tail weaning or losing passing or failing Etc it has three parameters and the number of Trials P the probability of success and queue the probability against success so its probability Mass function is given by P of X is equal to K that is probability that our variable takes on the value K is equal to nck P raised part K into 1 minus P whole raised to power n minus k so this is the probability Mass function because it's a discrete distribution now let's see how a binomial distribution looks like so in first case n equals to 10 the probability of success is 0.5 that is 1 by 2 so in this case the distribution is nearly symmetrical about X is equal to 5. so for p is equal to 0.5 that is probability of success is half then the distribution will always be symmetrical now let's take a look at the second case where value of n is fault and the value of p is not equal to 0.5 in this case the distribution will not be symmetrical it will be a symmetrical now let's take a look at the last case in this case the value of P not 0.5 but it still looks symmetrical because here the value of n is very very large also note that it just looks symmetrical it is not symmetrical it will only be symmetrical if p is equal to 0.5 or half now let's move on to the coding path so let me just rename it to binomial and we are good to go so here we have three important parameters also note that the parameters for different distributions will be different so you have to memorize all of them in order to be able to plot all the distributions so the parameters are in denoting the number of Trials P denoting the probability of success or the probability of trial and size that is the shape of the array returned so these are the parameters now given 12 trials for a coin toss so coin toss is a binary scenario and there are 12 trials that is n is equal to 12 and the probability of trial or probability of success will be 0.5 because in a fair time cost head and tail have equal probabilities so we have to generate 10 data points that is we have to take 10 samples from a binomial distribution where n is equal to 12 and P is equal to 0.5 so after analyzing the problem we can say that here and is equal to 10 p is equal to 0.5 and size is equal to 10 because we have to generate 10 data points I'm sorry I made an error n is not 10 here n is equal to 12. so let me just rectify the error so n is equal to 12 and size is equal to 10. now let's move forward let's create a new cell so now I'm going to write from numpy import random and now I'm going to write X is equal to random dots binomial and I'm going to pass the parameters so n is equal to 10 p is equal to 0.5 and the size is equal to 10. so we'll get 10 samples from a binomial distribution as a result so these are the 10 samples now we have obtained samples from a binomial distribution now let's move on to visualization of a binomial distribution so let's visualize now so I'm going to write so let's first initialize the parameters so let's n is equal to 10 p is equal to 0.5 and the size p let it be 10 000. so these are the parameters with which we are going to plot a binomial distribution so I'm going to write from numpy import random and import matplotlib dot Pi plot as PLT and import c bond as SNS now sns.displot random Dot binomial and we have to pass the parameters here sorry this is a different kind of cell so let me just clear this thing so let me just write import sorry what was I writing I just forgot so it was sns.displot and pass the parameters So Random dot binomial and we have to pass the parameters so n is equal to 10 p is equal to 0.5 and size is equal to 10 000. and we have to specify the hist as true because this is a discrete distribution and we are concerned with the histogram and we can specify the KDE as false because we don't need kernel density estimation that is important in case of a continuous distribution the last cell was a text cell so just let me copy paste and hit enter so I got the plot for a binomial distribution and this is the plot you can see that it is almost symmetrical it is not almost symmetrical it is definitely symmetrical because the probability of success is 0.5 and whenever p is equal to 0.5 the shape will be symmetrical so in today's lecture I covered by normal distribution and its shape that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the binomial distribution and in today's lecture we are going to cover the uniform distribution so let's get started so first of all what is a uniform distribution so it is a continuous distribution and according to Wikipedia in probability Theory and statistics The Continuous uniform distribution or a rectangular distribution is a family of symmetric probability distributions the distribution describes an experiment where there is an arbitrary outcome that lies between 13 pounds that are A and B and PDF is given by 1 by B minus a for all X belonging to a till B and 0 otherwise now let's take a look at the PDF so this is the PDF and it's zero for any value less than a and greater than b and it is only defined between A and B including both the values that is a and b now let's move on to the CDF or the cumulative distribution function so here it's like a transfer curve and it has a slope from A to B so this is the cumulative distribution function now let's move on to the coding part let me just change the name to uniform and now I'm going to mention the important parameters of a uniform distribution also note that in uniform distribution the probabilities are generally equal the uniform distributions can be either continuous or discrete and in discrete uniform distribution the probabilities are same but in continuous distribution the scenario is different we deal with three important parameters here that is lower bound that is denoted by a and has the default value 0 B the upper bound having the default value 1 so B has the default value 1 on the third parameter is the size that is the shape of the returned array so size is the shape of the returned array now let me create a new cell and first of all let's draw out some samples from a uniform distribution so create a 3 cross 3 or 3 into 3 that is three rows and three column Matrix consisting of values which are samples taken from a uniform distribution or in short I can say that create a 3 cross 3 uniform distribution sample I tried to add comments here but it is not working so let me just clear all this and just write it simply as a single line company so create a three cross three uniform distribution sample now let's move on to the next cell add from numpy I'm going to import random so from num by import random and X is equal to random Dot uniform now we have to pass the parameters that is size and print so this is a 2d array and the elements of this 2D array are samples taken from a uniform distribution now let's move on to the visualization path so let's visualize uniform distribution so now I'm going to import random from the numpy module by writing from numpy import random import matplotlib dot pipe dot as PLT import c bond as SNS and now I write SNS dot this plot and I will pass the parameters So Random Dot uniform and I have to pass the parameters such as size is equal to thousand so I have specified the size as 1000 you can specify a different size and I'm specifying the hist as false because this is a continuous uniform distribution so it's not a perfect rectangular PDF as scene but this is the actual thing that was theoretical now let's try to see the histogram as well so it's in shape of a box so that is much closer but we are only concerned with the boundary and not the failed portion so it's not true for a hist it is true for a KDE but it's not the perfect shape here so that's all for today in today's lecture we covered a uniform distribution its PDF the CDF as well as we visualized the uniform distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the uniform distribution and in this lecture we are going to cover the poisson distribution so let's get started so first of all poisson distribution is a discrete distribution it estimates how many times an event can happen in a specified time for example if we get three hits on continuously tossing a coin what is the probability of getting four heads that is one example of python distribution and its probability Mass function is given by Lambda raised to part k e raised to power minus K divided by K factorial with Lambda is the expected rate of occurrences now let's look at the PDF of a poisson distribution so here we have three different PDFs for three different poisson distributions for different values of Lambda we note that the peakedness of the distribution depends on the value of Lambda let's say the value of Lambda more will be the peakedness now poisson distribution is a discrete distribution it has two parameters Lam that is rate or the no number of occurrences and size or the shape of the returned array now let's write some code first of all we will create an array which will contain samples taken from a poisson distribution so let's generate a random 1 cross 10 distribution for occurrence so we are going to generate a random 1 cross 10 distribution for Lambda is equal to 3. so from numpy import random so X is equal to random Dot poisson and we are going to pass Lam or Lambda is equal to 3 and 5 is equal to 10. because it's 1D array so we don't write size equal to 1 comma 3 in Brackets so we directly write 10 so this array contains samples which are taken from a poisson distribution now let's move on to the visualization part so visualization of poisson distribution now I'm going to write first let's import so from numpy import random import matplotlib dot Pi plot as PLT import c bond as SNS now I'm going to write percent map plot lip in line and now I'm going to write SNS DOT test plot so SNS DOT test plot random dot POI sorry it's yeah poisson so Random Dot poisson and I'm going to pass the Lambda value add the size so let the size be thousand and Lambda is equal to 3 and KDE is equal to false because this is a discrete distribution and sorry I've written my plot lip instead of path plot lab so let me just correct it so this is the plot so that's s how a poisson distribution looks like now let's see what's the difference between poisson and normal distribution or difference between normal and poisson distribution so first of all normal distribution is a continuous distribution and poisson distribution is a discrete distribution normal distribution is used when we are predicting something on a continuous range while poisson distribution is used when we are concerned with an event and intervals of time let's see the plots in one frame so sns.disk plot and random dot normal so let the location with 50 that is mean is 50. scale is equal to 7 and the size is equal to 1000. now let me draw or plot a corresponding poisson distribution also so sns.displot random Dot poisson and I'm going to pass the parameters so let the lamb or Lambda is equal to 50 the size be 1000 and also let me label it so that we can see the difference so label is equal to normal for the normal distribution and table is equal to poisson for the poisson distribution and let me hit shift enter so now you can see the difference between the two so in today's lecture we covered the poisson distribution its PDF and its visualization we also differentiated between a poisson distribution and a normal distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button and stay tuned with us for more lectures thank you hi guys welcome back to our course on numpy in our previous lecture we covered poisson distribution and today we are going to cover exponential distribution so let's get started so first of all exponential distribution is used for describing time till next event example failure success Etc the PDF is given by Lambda e raised to power minus Lambda X and the CDF is given by 1 minus E raised to power minus Lambda X here Lambda denotes the rate or the inverse scale and Lambda should be greater than 0. now let's take a look at the PDF and CDF curves so this figure shows us the PDF curve and this figure shows us the CDF curve for different values of Lambda now let's move on to the coding part so exponential distribution is used to describe the time till next event as already discussed it has two parameters that is scaled that is inverse of freight and with default value 1 at size that is the shape of the returned array now let's first draw out samples from an exponential distribution and store it in an array so let's draw out a sample for exponential distribution with scale is equal to 2.5 and 2 into 2 size that is 2 cross 2 size so we have to draw out samples from exponential distribution and store it in an 2D array with size 2 cross 2 so I'm going to import random from numpy so from numpy import random and x equal to random dot exponential and I'm going to pass the scale that is our first parameter and I have to pass the second parameter that is size so size equal to two cro 2 comma 2 denoting two cross to size and now I'm going to print X so this is a 2d array with four values which are sampled from an exponential distribution now let's visualize the exponential distribution so visualization of exponential distribution now I'm going to again import random from numpy so from num by import random import matplotlib dot Pi plot as PLT and finally import c bond as SNS now I'm going to write SNS dot disk plot and I'm going to write random Dot exponential and I'm going to pass the parameters that is the value of Lambda and size let's just pass size here and Lambda will attain its default value and mention the hist as false because this is a continuous distribution so this is the PDF that is probability density function curve for an exponential distribution now let's try to understand the relation between exponential and poisson distribution so poisson distribution denotes number of let me just move to the next line so poisson distribution denotes number of occurrences of an event number of occurrences of an event in a time period where as exponential distribution or exponential deals with the time between the events so in today's lecture we covered the exponential distribution and visualize the PDF of the exponential distribution further we try to understand the relation between the poisson distribution and exponential distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we covered exponential distribution and today we are going to cover logistic distribution so let's get started so logistic distribution so first of all what is logistics distribution so logistic distribution is used to describe growth it's a logistic distribution describes the growth and it is a very very important distribution because if you are acquainted with machine learning you must have heard of the term logistic regression so it's a very important Concept in machine learning data science so this distribution is very very important and it will be explained in detail once we move on to machine learning and data science so logistic distribution is used to describe growth it is a very very important distribution and it is used extensively in logistic regression neural networks Etc and mathematical description will be given later on I mean in the future courses on data science and machine learning so today we are just going to visualize it and out samples from logistic distribution so let me just create a new cell so first of all let's discuss the parameters so it has three parameters the lock or the location or the mean the place where we have a peak like in the previous lectures we used to call it mean only but here we are using lock or which denotes the location or location of the peak and default value for mean or lock is zero and the second parameter is scale it denotes standard deviation and what is standard deviation or what does standard deviation denote it denotes the flatness or the peakedness or the deviation from mean Central uh value we have a central value and standard deviation tells us how much our data deviates from that Central value or the measure of central location which is mean in this case we have other measures for central location that is mod median but we prefer mean over others so let's draw out samples from a logistic distribution so let's draw out three cross three samples from logistic distribution and we need some parameters so let the mean be one and standard deviation B 3. so we are going to write X is equal to random Dot logistic and in bracket we are going to pass the parameters that is lock or location is equal to 1 which denotes that the mean as 1 and scale is equal to 3 that means standard deviation is 3 and let the size be 2 comma 3. sorry 3 comma 3 because we want to have a 3 into 3 array so I forgot to import random so let's write a line for that from so from numpy import ant now let's execute and we got this array which has three rows and three columns and all the elements of this array are samples taken from a logistic distribution of mean one and standard deviation 3. now let's try to visualize the logistic distribution to see how the shape looks like so from numpy import random and in next line from sorry here we'll directly import matplotlib dot Pi plot as PLT and import c bond as SNS now we'll write SNS DOT test plot and we will pass random dot logistic and in bracket we'll write the parameters that is lock or location or mean the scale and the size but here we are not gonna pass let it acquire the default values so we are only going to pass size that is 100 and hist is equal to false because this is going to be a continuous distribution now let's execute so this is the pictorial form of the distribution or we can say the graphical form of logistic distribution so logistic distribution looks similar to normal distribution as you can see that this shape is also like Bell so it the curve is also Bell shape but you can see some difference in the Tails of the distribution so if you look around the values minus 6 to minus 10 the shape is little bit different than we had in the normal distribution so it has more area under tails so in today's lecture we covered the logistic distribution and we visualized logistic distribution along with comparison with normal distribution that's all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us hi guys welcome back to our course on numpy in our last lecture we covered logistic distribution and today we are going to cover the multinomial distribution so let's get started let me just rename The Notebook to multinomial so I've renamed the notebook and let me just zoom in or maximize so let's get started with multinomial distribution so what is a multinomial distribution so in simple words we can say that multinomial distribution is just a generalization of binomial distribution so in binomial distribution we dealt with two events but in multinomial distribution we are dealing with multiple events so in simple words binomial distribution gives us information about two scenarios where by means two and multinomial distribution gives us information about multiple scenarios or multiple events so multiple so this is the case where we have two scenarios and we generalize it for n scenarios so example of binomial is toss of a coin that we have discussed earlier that either head or tail so two events but in multinomial we have multiple events like occurrence of one occurrence of two occurrence of three or occurrence of six on toss of a dive so example of multinormal distribution is ruling of a die so multinomial distribution has three parameters will not be going into details about multinomial distribution because it's not concerned with subject matter at hand but will have a general idea so multinomial distribution has three parameters that is n or number of outcomes P valves or the probabilities of the outcomes that is list of probabilities of outcomes so first we have number of outcomes then we have list of probabilities of outcomes and third we have the shape of the returned array that is common almost for every distribution whenever we try to sample something because after sampling we'll return something right the size the number of elements returned so the mathematics that is PDF or CDF will be discussed in future lectures today we'll emphasize on visualization of multinomial distribution and draw out conclusions if any so let's draw out samples first so let's draw out a sample let's take the rolling die experiment for this sampling so let X is equal to random Dot multinomial now we have to pass the number of outcomes that is 6 the P valves or probabilities of outcomes here in a role of a die the probability is 1 by 6 for each in every number so each and every number has equal probability of occurring this may not be the case for some biased experiments so you keep that in mind here we have each probability value is equal to 1 by 6 and we need to import a random from numpy so from numpy import random so X so this is the ra returned please so there is a very important observation to make the shape of return array is not one it is not a single element but I didn't specify any size so by default it should give me one that's what I thought or that's what you must have thought but it has returned an array with six elements so an important point is that multinomial samples will not produce a single value they will produce one value for each be Val so keep this in mind they will not produce a single value they will produce one value for each corresponding probability value also note that since multinomial distribution is an extension or we can say that generalization of binomial distribution so its shape or it the shape of its PDF will be same as the shape of PDF of a binomial distribution so we will not plot a multinomial distribution today that is for you to do that will be your homework or assignment task so as a home assignment plot a multinomial distribution so in today's lecture we covered the multinomial distribution and observe the similarities between a binomial distribution and a multinomial distribution we also gave you an assignment that is visualization of multinomial distribution that is all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we covered the multinomial distribution and today we are going to learn the chisquare distribution so let's get started so let me just rename the notebook to chisquare so what is a chisquare distribution or what is the significance of a chisquare distribution like the multinomial distribution is used in multinomial scenarios the logistic distribution is applicable to various machine learning algorithms in a similar manner the chisquare distribution is used to verify a hypothesis so it is used in hypothesis verification it is more of a statistical concept and we'll discuss it later on when we cover the essential mathematics for machine learning and data science in that course we'll be dealing with chisquare distribution so for now you need to remember that it has two important parameters first is DF that means the degree of freedom and other one is the size or the shape of the returned array now let's insert a new cell and let's draw out samples from a chisquare distribution so draw out a sample for a Chi Squared distribution with degree of freedom because we always need parameters while we extract the samples so let the degree of Freedom be 3 and size B 3 into 3 this is the size which denotes the shape of the returned array now from numpy import random and X is equal to random dot Chi Squared and will pass the parameter status degree of Freedom or DF is equal to 3 and size is equal to 3 comma 3 now let's print X so this is a 2d array but all the individual values of this 2D array are samples taken from a chisquare distribution now let's move on to the visualization of Chi Squared Distribution so let's visualize a chisquare distribution so we need to write from numpy import random import matplotlib dot Pi plot as PLT import fee Bond as SNS now we are going to write sns.displot and we are going to pass random dot Chi Square on Within brackets will pass the degree of Freedom Let It Be 1 and the size p so let the size be 1000. now will specify hist as false because this is also a continuous distribution so we don't need to visualize the histogram we just need the KDE path the KDE path also is not a very precise measure of the PDF but it helps us to visualize the PDF so we have visualized chisquare distribution so it has a longer tail on one side and a very short tail on the other side so in today's lecture we covered chisquare distribution we took out some samples from a chisquare distribution and at the end we visualized a chisquare distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered the chi Square distribution and today we are going to cover a relics distribution so let's get started so let me just rename my notebook to relics distribution or really so first of all what is a relics distribution so Radix distribution is used mainly in signal process so the main application of this distribution is in Signal processing we'll discussed it in detail in future lectures so this lecture is the idea only will not go into mathematical part or complex definitions just remember that Radix distribution is used mainly in Signal process we will discuss the PDF later on so it has two important parameters this is what we need to focus on the first parameter being the scale the scale here means the standard deviation which decides how much the data is dispersed or how flat is the distribution or how flat this distribution will be add the default value of scale or standard deviation is 1 .0 so here scale means standard deviation which describes the flatness of the distribution and the default value will be 1. and the second important parameter is size it denotes the shape of the returned array now let's draw out samples from a relix distribution so draw out a sample for a relics distribution now we can have two parameters here the first being scale and the second being size so let the scale be 3 and the size B 3 cross 3 as usual so let's insert a new cell so from numpy import random and X is equal to random Dot relics and let me just pass this deal and the size now let's print X to see so X is a 2d array it has nine individual values that are samples taken from a relix distribution now let's move on to the visualization of freelix distribution so from numpy import random import matplotlib dot Pi plot as PLT import c bond as SNS and sns.dis plot pass NP Dot sorry we don't need NP here we just need random dot relics and pass the value of size and scale will acquire the default value 1 and we don't need a hist so specify it as false so there is a slight error somewhere sorry there's mistake in the spelling of Felix so make sure you don't spell it incorrectly otherwise it will give an error and it will take a lot of time to fix it I'm quite used to errors so it takes me lesser time but it will take you a lot of time if you make such errors also note that unit standard deviation and 2 degree of Freedom or two degrees of freedom a relics distribution is equal to Chi Square distribution so this is the relation between a relics distribution and chisquare distribution so in today's lecture we covered a Felix distribution we drew out some samples from a relics distribution we visualized it and we try to understand the similarities between a relief distribution and a chisquare distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered prelix distribution and today we are going to cover our last distribution that is Pareto distribution so let's get started first of all let me change the name of notebook to Pareto and let me maximize the screen so a distribution following parvedo's law is called asparatus distribution so this is the simplest definition which absolutely makes no sense because it's not much of description so what you actually need to remember is what is pareto's law so don't just write that distribution following pareto's law is called as pareto's distribution you have to mention this 80 20 distribution thing so what is 80 20 distribution or what is 80 20 law its figure out let's see so 80 20 distribution or 80 20 log operators law means that 20 factors can cause 80 percent outcomes so this is the important statement that is 20 factors costs eighty percent outcomes and I hope that some of you must have heard of a rule or a proverb or something like this that is 20 hard work can bring 80 percent results so back in school some of the students used to say that to bring 80 percent marks we need to study only 20 percent syllabus so that is not true you have to study 80 syllabus for 80 marks at least so but in general in life in general you need 20 hard work to get 80 results so here we have two important parameters the first being the she parameter and second being the size of the returned array are the shape of the returned array now we'll insert a new cell and we'll try to draw some samples from a pareto's distribution so let's draw out samples from burritos distribution so we need to specify some parameters so let the shape B3 that means e is equal to 3 and that's the size B 3 cross 3 that means the shape of returned array will be 3 cross 3 it will have three rows and three columns so from num Pi import random X is equal to random Dot Pareto and will pass is equal to 3 and size is equal to 3 comma 3 and we'll print the value of x so X is a 3 cross 3 Matrix which contains some values that are sampled from a pareto's distribution now let's visualize the distribution so from numpy import random import tip dot Pi plot as PLT import c bond as SNS and sns.displot and in Brackets random dot Pareto and will pass a is equal to 2 and size is equal to 1000 and since pareto's distribution is a disk free distribution we need KDE as false so this is how shape of a pareto's distribution looks like hence we have visualized pareto's distribution or we can say that pareto's distribution have been visualized so in today's lecture we covered potatoes distribution and we visualized the shape of a pareto's distribution that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we concluded our discussion on distributions and today we are going to start with universal functions so let's get started let me just rename my notebook first so let the name be you funk so what is a ufunk so ufunk basically stands for Universal functions are you functions in plural means Universal functions so what are these Universal functions or you functions so these are the numpy functions that act on or that operate on ND array objects so these are some predefined functions which can readily be used when we are working with numpy and why are the used they facilitate vaporization and broadcasting among other important Concepts so you Fung's or Universal functions are used to implement vectorization they provide Broadcasting and additional methods so this is basically the reason behind using ufunks or Universal functions so at times we have to perform some basic operations so you funds help us perform these operations without explicitly creating a new functions so you functions can also take additional parameters like where D type and out now let's try to understand with an example that why do we need a U func or a universal function so let's consider that we need to add elements off to list so here we have to add elements of two less and store the result in a new list so there are two ways to do it without you func and with you so without you fun or Universal function we can do it by zip method now X is equal to 1 2 3 4 5 P the first list and Y is equal to 4 2 3 4 and 5 be the second list now we need a third list which is or which contains the sum of individual elements of these tools so without ufunk we can do it by zip method and we need to declare an empty list first and then we'll iterate so for I comma G in zip X comma y Z dot append I plus G Now display Z so there is an error because I have not commented out that portion so let me just comment it out and run it again now you can see that lists Z contains the sum of individual elements of X and Y so 4 plus 1 5 2 plus 2 4 and so on now numpy has a universal function to do the same task that is ADD so we can perform the same operation using the U Funk or Universal function add so we just need to write V is equal to NP dot at X comma y so sorry I have not imported numpy because in earlier example I didn't use so just let me import numpy as NP and run it again now it will not give an error so this result is same in both the cases but lines of code in second one are lesser as compared to lines of code and first example so this is a method of Performing sum without iterating over the arrays or the list or we can see that without iterating over individual elements also it's worth noting that there are several kinds of universal functions or Q funks available which help us perform different operations and we'll discuss all of them one by one in future classes in today's lecture I introduce you to the concept of universal functions or you functions that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we started our discussion on universal functions and today we'll learn how to create a universal function so let's get started so let me just create a new notebook and rename it so let the name be creating a ufunk a universal function now will first learn how to create a universal function or U func because it may happen that you want to call a function for performing some operation again and again but it's not available so to create a ufunc we need to define a function and then we need to save it to the numpy ufunc library using another function so first we have to create a function and then we need to add it to the numpy using another method that is from PI func method so please try to remember to create a ufunk we need to declare and Define a function first then we need to add it to the numpy ufunk library with the from P func or from PI func method also note that the from PI func method takes some parameters so from PI function method X the following arguments or parameters first one being the function or the name of the function so the first parameter will be the name of the function that you want to add to the numpy youfunk library the second parameter is inputs the number of the inputs that your function will have and third parameter is the number of outputs so we have to pass three important arguments that is the function name the number of inputs and the number of outputs now let's move on to an example so we'll create our own Universal function which will take 2 arguments X and Y and it will return X raised to power y as output also note that X and Y need not to be numbers or integers they can be an array of integers so first step is to create a function so I created a function that is my func and it takes two arguments X and Y and I am returning X asterisk asterisk Y which means X raised to power y and now we'll save this function to the num by ufunk Library using from PI func method so my func is equal to NP Dot from PI func and I'll pass function name that is my func the number of inputs that is 2 and the number of output starts 1. and I'll execute let's do one more thing let's print the value returned by the function side by side so let's print my func and let the input B and array so we have to give two inputs that is two arrays there's an import error because of improper indentation so let's just correct the indentation the return is not correctly indented again so let me just fix it now let's run so 1 raised to power 3 and 2 raised to power 4. so this is the result now our function got saved in the num by ufunk library and we can call it in future programs so in today's lecture we discussed how to create your own Universal function or you func that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our last lecture we covered how to create a universal function and today we will discuss some Universal functions related to simple arithmetic operations so let's get started let me just create a new notebook and rename it so let the name be simple arithmetic so today we'll discuss some Universal functions which help us perform basic mathematical arithmetic operations such as addition subtraction Division and multiplication so we can use arithmetic operators directly between numpy arrays so let's first discuss the addition of numpy arrays let me just comment it so the function add and brackets to pass the parameters sums the content of two arrays and stores the result in a third array or a new array or we can say that it returns a new array so for addition we have the function add now let's demonstrate the addition of 2 less using the add function so import them by as NP and first of all create two arrays let their names be arr1 and arr2 so we already know how to create numpy arrays we have discussed it a million times by now so we have written the code for creating two arrays and now we'll create a new array which will contain the sum of individual elements of array 1 and array 2. so for that we have to write new array is equal to NP dot at and pass the array names I got an error because of a wrong name so we got the result as an array which contains some of individual elements of the two arrays now let's move on to subtraction so we have ADD function for addition similarly we have the subtract function for subtraction so the subtract function subtracts two arrays and the result is written as a new array so we just need to write new array Let It Be new array 1 is equal to NP Dot subtract and pass the parameters as Error 1 and error 2. Now display and we got the result as an array of all minus tense because all of the elements differ by 10 and elements of array 2 are greater than elements of array 1. now let's move on to multiplication so for multiplication we use the multiply function so multiplication is done and answer is returned as a new array so the procedure will be same we'll just need to replace add or subtract Pi multiply so new array name is equal to NP dot multiply and in Brackets we'll pass the parameters so new r a new array name is equal to NB dot multiply and in Brackets Error 1 and arr2 are passed as arguments and I will display so this result is wrong because I have to write new arr2 so let me just correct it so this is probably me figuring it out that what mistake I've done while I was recording the video but it's the wrong so now corrected it and I got the correct result at last we are going to discuss division so the procedure of division will be the same we just need to replace multiply by divide this time so division is performed by use of divide function division is done and answer is returned as a new array so it divides the corresponding array elements and Returns the result as a new array now let's demonstrate division of two num by arrays with help of an example so new array name or new arr3 is equal to NP dot divide and will pass two arrays that is Error 1 and arr2 now let's display the result so new arr3 in my case I'm using notebook so it's directly displaying the output part you need to write print if you want display the output now let's see what if some elements are zero what will happen do we get an error or not so let's see what happens if we have a Zero Entry so let everyone be a less containing only 0 and array to be a less containing only two now let's divide so ARR 8 or any new array name is equal to NP dot divide and arr1 comma sorry we I have to write comma here not the Divide sign I'm used to it because in division we use divide side so let me just change it comma so it gave me the result as 0 because 0 divided by 2 is 0. now let's see the result of 2 divided by 0. so I am interchanging so it gave me divide by added or divide by 0 error so in today's lecture we discuss some Universal functions related to basic mathematical operations that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in today's lecture we'll continue our discussion on some Universal functions to perform simple arithmetic operations so let's get started let me just change the notebook name to simple arithmetic part 2. so first of all we'll discuss the power function so the power function Rises the value from first array to the power of values of the second array and result is written in form of a new array so in our daytoday life we need to perform some operations related to squaring cubing or any X raised to power y so we can solve such problems with the help of power function so power function Rises the value from first array to the power of values of the second array and result is written as a new array now let's demonstrate the use of power function with the help of an example so import numpy SNP and first of all we need to create two arrays so I have created two arrays now I'll write new array name is equal to NP dot power and pass the names of two lists now I'll print this new array and the result is the elements of array 1 raised to part the elements of array a list two so one raised to the power 2 is 1 2 raised to power 2 is 4 3 raised to the power 2 is 9 and so on and the second problem is how to get the remainder of any division so to get a remainder of any division we can use two functions the first being the mod function and the second being the remainder function so we can say that both mod and remainder functions are used to return the remainder and how does it operate the remainder of values in first array correspond to the value in second so it will return the remainder of values in first array corresponding to values in second when division is performed now let's try to understand through an example so let's write new array name is equal to NP dot mod and pass the array names and let's print this new array so new arr1 and it gave us the result so 1 divided by 2 gives the remainder 1 2 divided by 2 give the remainder 0 3 divided by 2 gives the remainder 1 and 4 divided by 2 give the remainder 0 so this is how the mod function works so remainder function is similar now let's write new array is equal to NP dot remainder and pass the array names so we should get the same result so let's see yes the result is same in both the cases demonstrating that both mod function and remainder function are used to return the remainders now let's discuss the functions to get the question and the mod so the function div mod returns both the question and the mod and it returns two arrays the first contains quotient and the second contains mod so div mod function takes two parameters and it returns two outputs first one being the equation and the second one being mod s demonstrate the use of div mod function the new array name is equal to NP Dot divmod and will pass the array names that are array 1 and array2 or arr1 and arr2 now we have the result as two arrays the first one being two equations and the second one being the mod values now let's move on to the last topic or last function which is to get the absolute values to get the absolute values we can use two functions the first one being absolute and the second one being abs you might have heard of ads function before in some programming language so we can use adds or absolute both to fit the job now let's debunk straight the use of adds an absolute function so err or array name is equal to NP dot array and let me pass a list containing some negative elements because we need to get absolute value which will be same for positive but different for negative so new array is equal to NP dot apps and array name now I'll print the new array and it gave me positive values by using absolute also it will give me the same result so in today's lecture we concluded our discussion on universal functions for performing basic mathematical arithmetic operations that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in our previous lecture we covered some Universal functions to perform basic arithmetic operations and today we are going to cover some Universal function which help us to round float or decimal values so let's get started let me change the notebook name to rounding so in numpy there are five functions which help us round decimal values so there are primarily five ways of rounding off they are truncation fix rounding floor and ceiling you must be knowing the difference between these five methods these methods are also discussed in AP mathematics so let's first discuss the trunk and fix method so run and fix function I used to remove the decimals and return number closest so it Returns the closest number for example if it's 2.1 it will return 2 and if it's 2.9 it will return 3. so we can say that the trunk and fixed function I used to return the closest integer number now let's demonstrate the use of Grant in fixed method so let's write ARR is equal to NP dot trunk and will pass a list containing float values so it should give us minus 2 and 3 and the result is as expected now let's demonstrate the use of fixed function so I'll write NP dot fix and I'll pass a list of float values so I should get the result as minus 2 and 8. so result is same as expected so I hope you understand the difference between trunk and fixed method now let's move forward with rounding and the use of a round function so the around function increments the preceding digit or decimal by 1. so it increments the preceding digit or decimal by one if we take an example if the number is 3.166666 then it should round it to 3.17 yeah also we need to pass an additional parameter that is number of decimal digit that we want to round two for example we just want to display two digit after decimal or one digit or three digit output table the number of digits that you want after the decimal point now I'll demonstrate the use of rounding with a round function so I'll write import numpy as NP and new array name is equal to NP dot around and I'll pass two parameters the number as well as the number of digits after decimal Let It Be 2. so I'll get the result as 3.17 I should get the result as 3.17 let's see what do we get so the result is 3.17 as expected now let's move on to the floor function and ceiling function now it's for you to figure out that what's the difference between floor function and thieving function although it will be clear once we see an example so the floor function rounds of decimal to nearest lower integer so we'll get the nearest lower integer in this case so let's demonstrate the use of floor function so array name is equal to NP dot floor and will pass a list containing decimal values or float values so we'll display the result and the result is minus 3 and 3 because these are the nearest lower integer and lastly the seal function or the ceiling function as shown in mathematics so the Seal of 3.166 is 4 but the floor of 3.166 is 3. this is the difference between the floor function and the seal function now let's see an example so I'm gonna import numpy as NP and I'll write ARR is equal to NP dot field and I'll pass a list of float or decimal values so it's giving me as minus 3 and four sorry I made a mistake the Seal of 3.166 will be 4 and the floor will also be 4. but it is different for 3.667 for that value the field will be 4 but the floor will be three point a 3.0 or 3. so sorry made a mistake and I should not execute this block so I'll just try to undo it so in today's lecture we covered different Universal functions in numpy which help us round decimal or float values that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you hi guys welcome back to our course on numpy in today's lecture we are going to take a look at some Universal functions which help us perform logarithmic operations so let's get started let me just change the notebook name to logs so it's done so numpy has functions to perform log at the base 2 10 and E so there are direct functions available to perform these logs that is the base to the base 10 and the base e lock at base e is also called as natural log and then we'll discuss a general way to take log at any base so then there is a general way to take log at anyways first of all we'll start with log at the base 2. so log at the base 2. so first of all I'll import number as NP and I'll write ARR is equal to NP dot a range 1 comma 11. it will return me a list of numbers from 1 to 10. so this e range method or function returns array if you recall we have discussed it earlier in many lectures so I'll just print in P Dot log 2 and Arena so it will perform log at the base 2 for all the values in this array so you can see that log 2 to the base 1 will be 0 Log 2 to the base 2 will be 1 and so on we know that this is locked to the base 2 because for 2 it gives us 1 because 2 raised to power one is two Now log at the base 10 so we just need to replace log 2 by log 10. so NP DOT log 10 and then we have to pass the array name so it should give us 1 at 10 yes the result is as expected because log 10 to the base 10 will be 1 so in this way we know that our answer is correct now let us take log at the base e so log to the base e or popularly known as natural log so we just need to replace log 10 or log 2 by simply log and it gives us the log at the base E for every element of the array now if you see clearly it gives around 1 for 3 because the value of e is two point something and it's closer to 3 so log 3 base e will be closer to 1 so value of is 2.718 so log 3 to the base e will give us a value very closer to 1. now we'll see a general way to perform log at any base so this is not using numpy Universal function we'll do it by using function log from math library of python so I'll just import from math import log import numpy as NP and NP log is equal to NP Dot from p func log and 2 comma 1. and I'll print this NB log for 100 comma 15. so we have created a sort of new Universal function if you see the pattern here if you don't see the pattern here compare it with the video where we created a universal function from scratch and stored it in the numpy ufunk library so in today's lecture we covered some Universal functions related with logarithmic operations that will be all for today this video is brought to you by programming knowledge please like comment share subscribe and hit the Bell button for updates and stay tuned with us for next lecture thank you