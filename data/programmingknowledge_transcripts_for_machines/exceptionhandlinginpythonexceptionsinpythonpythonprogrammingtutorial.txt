in this video we will learn how to use exception handling in Python so first of all what are exceptions so an exception is an event which occurs during the execution of a program that disrupts the normal flow of the program so basically exception is an unexpected event which disrupts the normal flow of the program so let me show you some examples of exceptions which may occur during the execution of a program so to start with I'm going to open the PyCharm Python consoles and then I'm going to maximize this pycharm Python control and let me also just clear this terminal so we will start from the top so let's say we have a number and we divide this number by 0 and when we press ENTER it's going to give us this exception which says zero division error so this 0 division error is an exception when you divide anything by 0 in python let me show you some more examples so let's say I want to add a number and a string let's say 10 plus 10 but this 10 is an integer and this 10 is a string and when I run the command it says type error unsupported operand types for INT and string so we cannot add a number and a string in Python so this type error is another kind of exception let's say I'm going to just use a variable name a b c which i haven't declared till now and when i press enter it's going to once again give me this exception which says name error named ABC is not defined which is true because we haven't defined the name ABC but we are calling this variable which we haven't defined so we get this exception which says name error next let define a variable and I'm going to assign some couple values here one in two and now what I want to do is I want to call some methods so you can see some methods are available for this double now let's call some random method using this double variable it will give us an error which says attribute error double object has no attribute whatever attribute I have provided here so this attribute is not present in the tupple object also when you call a method let me call some other method which is not there and once again when I press ENTER once again I get this error which says attribute error because this function is not present in the tupple object so these are all exceptions in Python attribute error or name error or type error or zero division error all are exceptions in Python now if you want to see more exceptions you can use the help inbuilt method and then you can write builtins and then press ENTER it gives me the name error once again because I need to first of all import this builtin module so import builtins and I'm going to once again use help and inside the parentheses builtin and then press Enter which is going to give me this kind of output and when I go at the top of this output so let me just scroll at the top and here you will see under the classes there is an object class and under the object class there is a base exception class and under the base exception comes the exception class and under the exception there is a big list of exceptions which you can see here so zero division error we have already seen or when you scroll down name error we have already seen so all the exceptions which Python may throw are all listed here so if you want to see the list of all the exceptions you can just give this method which is help builtin but before that you need to import this builtin module and then it's going to show you this kind of output and you will also be able to see all these exceptions in Python now let me show you a real life example of exceptions in Python so what I'm going to do is I'm going to define some variables here so first variable is result and I'm going to initialize it with the value none and then I'm going to declare two variables let's say a which takes an input and we want to ask the user to provide some numbers so let's say number one using the variable a and in the same way I'm going to going to declare a variable B which also asked the user to provide a second number but you already know that this input will return the string so we can just convert this string into a float let's say so I'm going to just cast the output output of this input string to a float value and then what I want to do is I want to save the division of the two numbers a and B into the result so a divided by B I want to save it into the result and then at last I would just want to print the value of the result now let's run this program so rightclick run the filename and then let me provide some numbers here so 5 and 6 and press ENTER it's going to give me the result which is the division of these two numbers let me run the program once again and this time I will provide 10 and the second number is equal to 0 here and we know that when we divide some number y 0 we get this exception which says zero division error and you will also observe that as soon as this error is thrown so this error comes from this line line 5 so when you click on this line it shows us that this error is coming from this line which is the division of these two numbers and as soon as this exception occurs all the code which we want to execute after that will not be executed so we were printing this result here but it's not printed let me print something else here so I'm going to just say end and once again I'm going to run the program and I'm going to provide the same inputs here and you can see neither this statement is printed nor the end is printed so whenever an exception occurs Pythian stops whatever it is doing so in our case whenever this exception is thrown at this line both these statements will not be executed and why these two lines of code will not be executed because we haven't handled this exception so Python allows us to handle the exception which we are not doing right now that's why it stops everything whenever this exception occurs so how to handle these types of exceptions so you can handle these type of exceptions using a try accept keyword so just write try and then under the try you write whatever you want to test and then you write accept keyword here so just write accept and then under the accept you write some code which you perform when the exception is thrown so I'm going to just say this error which is float division error okay so this is what I'm going to print and don't forget to put colon in front of accept and try so let me run the code and let me give the same condition so 10 and second is 0 and this time you will see that this exception is not thrown and the result is also printed and the end line is also printed you can see here and also this line is executed which comes from the accept statement which says float division error so whenever you use try accept notation first of all code under a tribe will be evaluated and if it throws some exception then whatever code you write under the accept will be executed and then all the other statements will be executed whatever comes after this try accept code so this time no error is thrown and we have handled this error and you can see clearly it says that flow division by zero which means it comes to the except condition so now we are handling this error which is zero division error now in other condition when this error is not thrown so we will just give some valid value ten and five so no zero division error will be thrown and when I press enter you will see that result will be printed and and will be printed by these two lines but no except statement will be printed so this statement is not executed because this code has not thrown any error because there is no error occurred now as I have shown you that all the exceptions are under exception class so we can also write here exception and then we can just write this notation exception as e and this will show us more details of the error okay so I'm going to just write here error is equal to and then I'm going to just print whatever the content of e is and once again when I run the code and I will give the number with the zero here and you will see it prints this error which says float division by zero so this is printed using this iki word which shows us the correct error I have also shown you that this exception is the base class of zero division error for example when I will try to know the type of this error e and when I run the code once again and we provide this input once again you will see that this error is of type 0 division error so we know that this exception is thrown from this class so instead of writing this generic exception class we can also use this 0 division error here and now whenever this specific error is thrown then only this will be printed here so let me run the code once again and let me give this input here and you will see once again this line of code is printed using this statement and that means zero division error is caught by this line of code and then the statement under that is printed now let's say this line of code throws some other kind of error other than zero division error so let me just remove this typecasting or float here that means it's going to throw us some other kind of error which is not zero division error and let me run the code now and I will provide two numbers here once again and you will see that now this error is different which is type error which says unsupported type string and float so why is this happening we are catching the exception using this except keyword but we are only catching the zero division exception we are not catching that type error exception that's why our program is stopped and these two lines of code is not executed so you need to either use the base class of the exception which is this one exception and when you run the code and when you write these input it will be handle and you can see this time type error is caught it's not a zero division error but the type error which comes because the type which we have provided here is string and we are dividing string by a float value which throws this error so if you want to catch all the exceptions you use this base class but it's not good practice you need to have information about your exceptions so I'm going to once again write this zero exception error here and what I can do more here is I can add one more except statement here and this time instead of zero division error I can say catch also type error okay so I'm going to just write type error and here zero division error so we know from where this error is coming and when I run the code once again and when I give the inputs you will see that this error is coming from this line of code so this accept statement is catching your exception which is type error now when I just add this typecast of float once again and when I run the code once again and when I provide ten and zero once again you will see this error is caught by the other accept statement which is this statement which is used to catch the zero division error so you can also provide multiple accept statement in order to catch multiple exceptions in Python we will talk about else and finally statement with this try accept statement now to start with at the end of this try accept statement we can also use the else statement so you can just write else and for now I will just print here for example underscore underscore else underscore underscore and also we can use a keyword called finally with our try accept statement and here also I am going to just print underscore underscore finally underscore underscore so what does this else and finally statement do let's see by running our program so I'm going to run the program and now I'm going to give some valid input so that our program will not throw any errors so I'm going to just divide 10 by 5 and then press ENTER and you will see what is printed here so first of all else is printed then finally is printed and then the result is printed using this print statement and then at the end this and string is printed so in this scenario there was no exception thrown by the code that's why none of these exception statements are printed so you can use L statement whenever your code does not throw any exception so whenever your code doesn't throw any exception else statement will be executed but when this finally statement is executed so let me give you one more scenario and then we will discuss about the finally statement and this time I'm going to intentionally write 0 here which is going to throw the exception and I'm going to press ENTER and you can see 0 division error is thrown which is caught here and this statement is printed first and then this finally keyword is printed using this statement and at the end these two lines of code are executed so once again let's talk about the else statement you can see whenever your code throws an exception then this else statement will not be executed the else statement will only be executed whenever your code doesn't throw any exception but what's with finally statement so we have seen in the case of exception this finally is printed and in the case of no exception also this finally is printed so this finally statement is guaranteed to be executed whether exception occurs or it does not occurs so the only code which is guaranteed to be executed in all these lines is the finally statement finally statement is always executed whether your code throws any error or it does through any error now in which cases you might want to use this finally statement so sometimes whenever you use files you need to close these files after opening them whether the exception occurs or not it is mandatory to close your files and in those cases you can use this finally statement the next example is for example you are using any database and you are opening that database right and for some reason your connection is lost with your database then the exception is thrown and in the final statement you can reconnect to your database using the reconnect code of the database so in finally statement you would want to execute that code which you think that have to be executed whether error happens or does not happens so in all those scenarios you can use the finally statement now the next question arises is whether we can use this else and the finally statement without the accept statement the answer is you can already see here no so you cannot use this else statement without the accept statement so you have to use accept in order to use this else statement but when I remove the accept and else statements you can see there is no error now so you can use the try and finally without the use of accept or the else statement because the code under finally will always be executed whether your code throws any error or not so it's independent of this accept statement or the else statement so this is how you can use else and finally statements with the try and accept key words now in this video I am going to show you how to raise an exception in Python now an exception is similar to through an error or exception in the languages like Java or C++ so Python allows us to use a keyword called raise and that raised statement or keyword allows the programmer to force a specific exception to occur so let's get started and let's see this raised statement with an example so to start with I have created a class called coffee cup which have a init method which takes one argument which is the temperature and I'm just initializing the value of temperature using this init method and this coffee cup class also have one more method which is called drink coffee and inside this drink coffee method I have some conditions so if the temperature is greater than 85 then I print coffee is too hot if the temperature is less than 65 then I print coffee is too cold and if the temperature is between 65 and 85 then I print that coffee is okay and here I have created an instance of coffee cup class with an argument which is 75 to start with and I'm just calling this method drink coffee from this object so let's run the code and let's see what happens so because this 75 is neither satisfying this condition nor this condition so the answer which is printed here is coffee okay to drink now when I provide for example 101 temperature value here and when I run the code once again it will say coffee too hot if I say coffee temperature is 10 it says coffee too cold now in these two situations when the coffee is too hot or the coffee is too cold I can also throw an exception and show the user some kind of message so instead of printing that coffee is too hot I can use our keyword called raise and then I can use any class of exception so we can use the exception class or any subclass of exception and you can see this exception class comes in this built in module so I'm going to just use this exception which is the base class and same I'm going to do here when the coffee is cold and I'm going to comment these two print statements and now when I run the code it throws an exception without any error so it throws an exception and after that the execution of program stops so right now temperature is 10 which satisfies this condition so this exception is thrown and that's why we see this exception so in Python we can throw an exception using this keyword race and this exception class or any subclass of this exception class now in the last video also I have shown you how to see all the subclasses which are under the exception class to see them you can just open your Python console and in the Python Python console you just need to import militants and then press enter and now you use a method called help and inside the help method you use this keyword builtins and then press Enter which is going to give you a big list here and when you scroll up at the top you will see classes here and under the classes you will see base exception and we have used this class which is exception you can see here so to raise an exception you can use this exception class or any subclass under this exception so you can use automatic error or you can use reads or division error buffer error whatever error is appropriate for your exception you can use from this list so right now I have just used the exception class which is the base class to throw an exception here instead of exception I can also use for example exception called value error which is also the subclass of this exception class and now when I run the code it will show me the value error so this is the one way of throwing an exception in Python now with these exceptions you can also pass an argument inside the parentheses so you can write exception and then in the parentheses you can write the message whatever you want to show when this exception is thrown so here I can just write coffee is too hot and for the another exception I'm going to just say coffee too cold and when I run the code because it's a value exception which comes from this statement it shows the value error exception and then the message which we want to show so we are just showing coffee too cold so here it also prints the same message which we have given as the first argument of this exception error class so you can either raise an exception with the base class exception or the subclass of the base class exception for example value error and you can also give an optional argument here which is the message which will be displayed at the time when this exception is thrown so this is how you can raise or throw an exception in Python now in this video I'm going to show you how you can create your custom exception classes and use them to raise exception in Python so let's get started so I'm going to create a custom exception class here so let me create a class and I'm going to name it as coffee too hot exception and to create your own custom exception class you need to inherit from the exception class so you just need to provide exception as the superclass here inside the parentheses and then after the colon you can just define the init method to provide the message so it takes one argument for example MSG which stands for our message and now what we need to do is we need to pass this message to the constructor of this exception class and how to do that you can do that using the super function so you can use super and then call the init function here which means we are calling the init method of this exception class using this super function and we just need to pass the message which comes as an argument of your custom exception class to the super class which is the exception class and that's your custom exception class now I can pass this class instead of this base exception class similarly to create the coffee too cold class I can once again write coffee too cold here and instead of using the subclass of exception I can give here my own custom exception class so let's run this program and let's see what happens so because right now the temperature which we have provided here is 10 which means this falls in this condition which says coffee too cold so we are seeing this exception which says coffee too cold and then it's going to show us this message which says coffee too cold now we have made this exception class explanatory enough so that we don't require this coffee too cold message instead of this coffee too cold message we can give some more information for the user for example we can write here coffee temperature and then we can provide the information of the coffee temperature which the user has provided so self dot underscore underscore temperature and same we can provide in the coffee too hot exception message one more thing which we need to do here is we need to convert this temperature into a string so we can use this mastered STR to convert from the integer or the float value to the string value so this is just the typecasting from the integer to the string and now we are going to run our program and see what's the result here so you can see now the result says coffee too cold exception and then it shows the temperature which is provided by the user let's say this temperature we change from ten to hundred and once again run the code now it's going to say coffee too hot and it's going to display the temperature of coffee which is hundred here so let's rewind what we have learned about creating our own custom exception class so in order to create your own custom exception class you need to inherit from this exception base class or the superclass and then you can create any custom class with any name and for passing the message which you provide as the first argument of your exception you can just create an init method which takes this message and pass it to the init method of your superclass which is the exception class so this is how you can create your own custom exception classes and use them to raise the exception in Python I hope you have enjoyed this video and I will see you in the next video