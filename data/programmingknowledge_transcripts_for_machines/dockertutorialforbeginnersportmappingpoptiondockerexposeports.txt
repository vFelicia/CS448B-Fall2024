hey guys welcome to the next video on docker tutorial for beginners in this video we are going to see how we can do port mapping between your docker container and your host machine so let's say you have some kind of server and that server listens on some particular port so you need to expose your port from your docker container so the outer world will be able to interact with your server so in this video we are going to take an example of a node js server the same concepts you can apply on any other kind of server it can be a nginx server it can be a python flask or a django server or any other kind of server so let's start with our example of dockerizing our node.js web app so what i'm going to do is i'm going to just create a new directory for me so i'm going to just write mkdir d4 and then i'm going to go inside that d4 directory and here i'm going to create a new node js app so for initializing my app i'm going to just write npm init and then hyphen y and then press enter which is going to create a package.json file inside my d4 folder now for this node.js server i will be using express so i need to install express locally for this app so if you already know something about node.js or npm you can easily install the npm package using npm ins tall and the package name in our case it's express which is a very popular node.js package or npm package so i'm going to just write express here and then i'm going to give this save flag here so it's going to be installed inside my directory and this express will be added a as the dependency in my package.json file so let me press enter which is going to install this express package in my directory you can see this new directory is created which is node modules and this new dependency is added in my package.json which is express so now let's create our server.js file so if you can see in our package.json file the main entry point right now is the index.js you can change it to uh server.js and let's create this uh server.js file server.js here and then press enter which is going to create this server.js file so we are going to write a very simple node.js code which is going to use express and it's going to just print hello world whenever somebody uh will make a get request to this server so i'm going to just uh copying and pasting this code because this code is available everywhere and it's very simple so what i have done i have just imported this express and then i have created these two variables one is the port variable which will be exposed via a browser or via the rest request and then we have the host here which is basically the local host and we have one get request here so whenever somebody makes a get request to the server we are going to just send hello world so very simple uh node.js server code and we are going to run this code let me clear this terminal so i'm going to just write node and the name of my server file which is server.js and when i just run this server.js using node.js it's running like this and it's printing on which host and ports it's running so let's open our browser and we are going to just open this url which is 0.0.0.0 uh colon the port number on which we have started this node.js server and i i'm going to just press enter and it just prints hello world which is the expected result right so now we want to dockerize our node.js server so let's see how we can dockerize our node.js server so for that i'm going to just close this app or stop this app and now i'm going to create a new docker file so let's just create this docker file by just uh giving this command which is docker file now i'm going to go inside my docker file and here inside my docker file i'm going to use the node base image so when you go to the docker hub there is an official base image for node.js and that's what we are going to use so i am going to just write from and the base image will be node and the version of node we are going to use is version 12. so you can use the latest tag also here which is going to give you the latest version now in the next step i'm going to define the working directory using the work their keyword and we are going to uh define this work there in the user forward slash src for slash app folder and now this should be work data right so like this okay so we have defined our working directory inside this working directory we are going to uh copy our code and then we are going to do all the stuff now uh let's copy all the files which are there in our current folder to this docker image so we are going to use the copy keyword to copy uh all the files but first of all we need to copy the package.json to the container so that we will be able to run the npm install command and npm install command what it does it just installs all the dependencies into uh our container right so let's first of all copy the package dot json file so we are going to copy uh the package log dot json file and package dot json file so these two files are responsible for all the dependencies to this uh directory right so now we have copied the package json files so next step is to install all the dependencies using npm install so you can just give this command run npm ins tall now if you are working in the production environment this command can be little bit different let me just write this in the form of comment so you can just write run and pm ci and then you can give this only production flag production okay so if you are working in the production environment you can give this command if you are working in the development environment then you can just do uh this command so npm install will install all the dependencies and in our case there is only one dependency which is express right so via this npm install this express npm package will be installed in our docker image now in the next step once uh all the dependencies will be installed we are going to just copy all the files which are there in our server code so we only have this one file which is server.js but let's say you have many modules and many files inside your node.js projects so i'm going to just write copy and then i'm going to copy all the files and folders which are there in the current directory okay now next step is important and this step is we are going to expose our port so i'm going to just write expose and we are going to expose the port which uh we are using in our server so we are using uh port 8080 in our server so we are going to expose this port this means that we want to expose port 8080 into our docker container so this exposed keyword means that we want to expose port 8080 from our container to the outside world for example to our host machine and this expose is a way of documenting so it's not going to publish your port at runtime it's just a way of documenting in your docker file that you intend to expose this port 8080 in your docker container so exposing port using this exposed keyword is a way of documenting which port are used but it does not actually map or open any port we are going to open and map the port using the docker run command and we are going to use a different flag for publishing our port or opening or mapping our port later when we uh just build and run our our dockercon now the next step here will be to run our node.js application and we all know uh that we just need cmd and then inside our square brackets we will just write npm and then we are going to just give this comma and then we are going to give the name of our server.js file so this will be server dot js now here one interesting point to note here is when we are going to copy uh all the files and folders from our current directory to the docker image you can see i have used dot dot that means it's going to copy node modules also into your docker image and we have already installed our uh node packages using this npm install so this is going to overwrite uh this node modules folder from your image right so to avoid copying your node modules uh into your docker image you can create a docker ignore file so this docker ignore file is going to prevent your local node modules or your debug logs from being copied into your docker image so let's uh just create this docker ignore file so to create this docker ignore file you can just write touch dot docker ignore in the same format which i have used so this format is recognized by docker and whatever you write inside this docker ignore a file so let's create this docker ignore file first of all so we have created this docker ignore file and we want to exclude the npm modules and npm debug.log file from copying into our image so this means that we have added npm modules and the npm debug log file uh which will be excluded when we are going to copy the files from our local container to the docker image okay so this will avoid the overwriting of our npm modules now we are done and we can build our image so let me clear this terminal so now let's build our image by giving the docker build command so i'm going to just write sudo docker build hyphen t and then the image name so let's say i'm going to just give the name node underscore test colon the tag you can give any tag to your image so let's say i'm going to give 1.0.0 or tag to my image and then the context and then press enter which is going to just build this image and in few seconds this image will be created so let me clear this terminal once again and let's list out all the images so sudo docker images and when you see here our docker image is created with the tag 1.0.0 15 seconds ago okay so now we are going to run our container so to run our container we can just use a sudo docker run so as i told you we want to expose this port 8080 so that the server can listen to the request from the outside the container right so in order to map uh the port we use the flag which is called hyphen p which is also called publish and hyphen p is a way of mapping a host port to a running container port so this is our running container port and let's say we want to map this port which is running inside the container to our local host machine and we want to let's say give the port 3000 in our localhost machine and which is going to be mapped to port 8080 so if you specify this expose the port and if you specify this publish flag to map the ports then the service in the container is accessible from anywhere even outside the docker so this means that we want to expose port 8080 from our container to the port 3000 inside our host machine and now let's give the name of our image which we want to run which is node underscore test colon 1.0 okay and let's uh run this docker container and this gives me error and the error is obvious because instead of using npm i should have used node okay because we have started our server using node command not npm npm we used just for installing our packages and managing our packages right so let's rebuild our image once again and once our image is rebuilt we are going to just run our container so now our container is running and we can see the same output now we might be confused or you might be confused that we are exposing uh the port 8080 and when we uh go uh on this url on our browser so let's go to this url on our browser and let's see if it works or not so it's not going to work because we have mapped the port 8080 to the port 3000 on our local machine so this is the port on the container on your docker container and this is the port which uh it will listen on your local machine so we want to listen on port 3000 on our uh host machine so instead of port 8080 you can give port 3000 and it's going to print hello world right this is how this port mapping work so this will be the port uh which will be available on your local host and this is the port you have exposed inside your docker container so let me just stop this container so i'm going to go to the next terminal and i'm going to just write sudo docker ps to list out all the running containers and this container is running so i'm going to just use the container id from here just copy the container id and then sudo and then the container id which is going to stop this container now this container is stopped and you can see uh in this terminal also that we are out of the container right so now let's say let me just uh clear this terminal and now let's say we want to map to the port 8080 itself on our host machine also from our docker container so this is the port on the docker container and we want to map this port to the same port on our host machine if it's available then it's going to run fine so let's run this command and now this time when you go to the browser on port 3000 obviously you will not get anything because we have mapped uh the port 8080 to our host machine now and now when you give port 8080 it's going to give you hello world if you want to run this server in the detached mode as i have told you you can use hyphen d so that this node.js will run in the detached mode that means it will run in the background so this is how you can expose the http port you can also expose the tcp port and the udp port from your docker container so let me uh just stop this container so i'm going to just stop this container first of all and let me show you how you can expose the udp and the tcp ports so let's say you are running uh application and in this application you are doing some tcp communication or the udp communication so for mapping the tcp port and the udp port you can use the flag hyphen p and then you can use this kind of notation so the port which you want to expose from your container let's say i'm just exposing port 80 and forward slash tcp so in case you want to expose the tcp port you just need to uh write forward slash tcp after the port which you want to expose from your container and this will be the port you want to expose to the host machine so this port will be available on your host machine from this port to your container so this is the mapping right for udp you just write forward slash udp right so the flag is hyphen p you just need to write forward slash tcp or forward slash udp to expose the udp or the tcp flag you can expose multiple ports also by using this hyphen p flag so it's not that you just can use only one hyphen p flag you can use multiple hyphen p flags to expose multiple ports from your container to the host machine so this is how port mapping works in a docker i hope you haven't understood this concept and i hope you enjoyed this video and i will see you in the next video