hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we are going to try to understand how we can find out the corners inside an image using a method called harris corner detection now first of all what are corners so corners are the region in the image with large variation in intensity in all the direction now this Harris corner detector was first introduced by Chris Harris and Mike Stefan's in their paper in 1988 now detecting corners using Harris corner detector contains three main steps so the first step is to determine which windows produces very large variation in intensity when we move in the X direction and the y direction now what are windows here so windows in this case means that let's say we want to just find out this corner here so windows will be your small box here and then you check for the intensity when you move in the vertical direction and also in the horizontal direction so you check for the change or large variation in the intensity when you move in the X direction and when you move in the Y direction in the second step with each such window which we found a score R is computed so this R value which is computed is going to give us the estimate or give us an idea about where this corner is located depending upon the value of R and in the third step after applying a threshold to this score the important corners are selected and marked so let me explain you all these steps one by one what do I mean by detecting the windows and calculating the value of ours let's see step by step so as I said in the first step we determine which windows produces very large variation in the intensity in the X direction and in the Y direction so let's say a window or a Center is located at the position X comma Y and let's say the intensity of the pixel at this location is I X comma Y so if this window is slightly shifted to a new location and let's say this displacement is u comma V then the intensity of the pixel at this location will be X plus U and Y plus B because our displacement is u comma V so we are just adding it to the x value and the y value and hence the difference between the shifted intensity and the original intensity will be the difference in the intensities of the windows shift so for a corner this difference will be very large and that's how we detect the corners using this Harris corner detection method now as you can see here this value will be given in the ii u comma V format so we have to maximize this function for the corner detection and this we can achieve by applying a Taylor expansion to this equation which is given here and by using some mathematical steps so I'm not going to go deep into the mathematical steps but after applying the Taylor expansion you will get this kind of approximate value where M is equal to this value and here in this equation IX and iy are the image derivatives in the X and y direction respectively so this can be easily found out using the CV dot Sobel method in open CB now comes the second step and in this step we find out or calculate the score for R so this R is equal to this value and M we have already seen how we can get this M value in the first step right so in this equation Det M is equal to lamda 1 multiplied by lambda 2 and trace M is equal to lambda 1 plus lambda 2 where lambda 1 and lambda 2 are the eigen values of M so again if you want to go into the details you can refer to some book or you can go to the Wikipedia page to learn more about this equation so once we got the value of R then based upon the value of R we can make some decision and this we can do in the third step so if the value of R is very small that means the value of lambda 1 and lambda 2 are also very small and we can conclude that the region is a flat region and not the corner if the value of R is less than 0 that means lambda 1 is very large in comparison to lambda 2 or vice versa and that means it's an edge and not the corner and if the value of R is large which happens when lambda 1 and lambda 2 are large and this means that this region is a corner so if the value of R is very large that means the region is a corner and that's how Harris corner detector detects if it's a corner or a edge or a flat area so this was the theory about Harris corner detector let's see how we can use this Harris corner detection concept inside OpenCV using our Python code so I have this script already written here so just import cb2 and numpy and then we are reading this image called cross board underscore image dot PNG using i'm read method and after we read this image I'm just showing the original image so we have the original image and the output at the end to compare now in the next step I'm converting this image into a grayscale image to get the better results and because this see v2 dot Corner Harris method takes the grayscale image in the float32 format that's why we need to convert our image into float32 format so that's why we are using numpy dot float32 to convert this image into floatingpoint values because our corner harris method which we are going to use in the next step is going to take this kind of value and not the value which comes directly from the conversion of this image to the grayscale image so this step is necessary for the harris corner method and in the next step we are just applying the CB 2 dot corner harris method which takes few arguments first is our image in the floating point so this we have passed and the second parameter here is called the block size so here I have given the value 2 here so block size means the window in the first step so we have seen we have to define the window right so for example we define this block size 2 that means neighborhood size is equal to 2 that means for each pixel value block size multiplied by block size that means 2 by 2 neighborhood is considered the next parameter here is called the K size and it's the aperture parameter for the Sobel operation and then we have the next parameter here and this next parameter is called the K which is the Harris detector free parameter in the equation so after applying this Harris Corner method to our image we get this destination image and to get the better result we need to dilate this result so we apply CB 2 dot dilate method on our image which we get using the Harris corner so this image are marked to the dilated corners and then in the next step we are reverting back to the original image with optimal threshold value and we are just just marking all our corners with this color so basically we want to mark all the corners with the red color here and in the next step we are just showing our result in the I am show window and at last we are destroying all the windows so let's run this code and let's see what happens when we run this code and we will see the results so you can see this is the original image which have so many corners and all the corners are detected and it's marked with this red color here so this is how you can find out and mark all the corners using Harris corner detection in OpenCV I hope you have enjoyed this video and I will see you in the next video you