hey what's going on guys welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're gonna talk about loops in c programming so sometimes it is necessary for the program to execute the statement several times and c loops executes the block of commands in a specified number of times until a condition is met so in this video tutorial you will learn about all the looping statements of c programming and along with their use so as you can see computer is the most suitable machine to perform repetitive tasks and it can tirelessly do attach tens of thousands of times okay and basically like every programming language has this particular feature to instruct to do such repetitive tasks with the help of certain form statements so that's why we have this loops and then of course guys in C the C programming language supports like three types of loops so we're going to discuss first while loops eight so we have while loops we have dowhile and of course we also have the four loops okay so we're going to dissect each type of loop so that we could you know better understand how it works and how we can use these loops in in a certain situation so basically guys when we say look I'm just going to show you a simple flowchart so we have a V R a simple flow a flow chart that describes the nature of loop or loops in general so we have like start and then we can declare a counter or a variable counter and then our program will try to evaluate the condition and then if the condition is you know returns true it could execute statements and then increment the counter and then again evaluate the condition if the like for example increment counter is equal or you know greater than something and then execute statements increment counter and then evaluate condition and lastly if the condition is met then it will stop the execution of that particular loop so basically guys a look is just you know doing our executing repetitive statements inside our C program so there are like control statements we have statements that we can use so we have break we can have like continue and then of course we have the goto statement that we have discussed previously in our video tutorial series okay so aside as I've said we will discuss first the while loops in c programming okay so see while loops statement allows to repeatedly run the same block of code until the condition is met and of course when loop is the most basic loop in C programming and while while loop has one condition and it contains four it executes as long as the condition is true and then the condition of the loop is tested before the body of the loop is executed so the syntax for our while loop is like this so we have the keyword while and then a condition so like a test expression and then if this condition is like true then it will try to execute the statements inside this particular wine loop okay now we have like we can have a very simple application for this so for example we will try to implement this wait so we can declare like a variable so int n plus 1 and then x plus 5 and then of course we can declare the while loop for our program like this and then open and close parentheses and then we can say n is less than or equal to x okay so we have to add the curly braces for that and then inside this curly braces these are the statements that will be executed if this particular condition is true okay so it will try to Train like C while loops and then we can add the percent or yeah percent D which is the format specifier for our in variable and then we can display the end okay and then of course we can we can increment the VAR the value of n by using the increment that we have discussed before which is n plus plus so basically this is just you know basically saying N equals n plus 1 okay I think we have already discussed that the end pass pass increment in our video previous videos okay now we have set the value N equals to 1 okay and then we have set the number of times the loop should be executed so that's basically 5 there should be 5 execution and then we added the while statement and then check the condition if n is less than or equal to x then execute this statements right so we can try to check this build and run our application and try to see the output of our program and I'm going to you know slowly explain to you what happens in this particular program so you can see the output right here see while loops one see while loops two and then three four and five and after five it no longer executed because it you know ended the look okay so I'm going to explain to you how we got this output so first thing as I've said we declare and equals to 1 so in this condition 1 is less than or equal to 5 which is the value of x so basically and of course it is true that 1 is less than or equal to 5 so that's why it executed this particular statement see while loops and then it displays the value 1 right here okay and then it increment the value n so now the n becomes 2 and then it will go here in our condition once again so 2 is less than or equal to 5 so that's true because obviously 2 is less than or equal to 5 so that it executes this statement right here see while loops and then the value of our n which is 2 again it incremented the end variable so the end now becomes 3 so after that 1 we will go back here in the condition is 3 equals or I mean less than or equal to 5 so that's true because 3 is equal to or I mean less than to 5 so that's why it printed the output right here see while loops and then the value of our end equals to three and now after that it incremented another time the end and the end becomes four now and it go back to the condition is 4 less than 5 so basically 4 is less than 5 obviously so that's why it printed out there see while loops and then for the value of rn and again incremented added 1 to the end variable and then the end now becomes 5 and then go back here in the condition is 5 less than or equal to 5 so if we return true again because 5 is equal to 5 so it printed out see while loops and then the value of our n which is 5 now it incrementally ball becomes 6 and it will go directly here in our condition is 6 less than or equal to 5 so it returns false because 6 is not less than or not even equal to 5 that's why it ended the loop and it never executed the this particular statement right here once again because 6 is that less than or equal to 5 which is the value of our times variable so I think that's that's all there is to it guys for this tutorial and I hope it is clear and like if you have questions regarding this please let me know in the comment section below and in the next video guys we're going to discuss the another version loop which has the do whine loops so again guys thank you for watching and see you in the next video