hey guys welcome to the next video on redis tutorial for beginners and in this video we will learn what are sets and how to use sets in redis so first of all what are sets so reddish sets are an unordered collection of unique strings right so by unique I mean whatever values set contains they are all unique so no repetition is allowed here okay and they are unordered uh uh you know list so they are not ordered and they are unique so let's uh see how we can use sets in uh practice so I have already started my ready server and on my CLI first of all let me uh just clear all the keys which I already have so I will just say keys and I have only one uh key which I'm going to flush all and now let's create a set okay so to create a set you can just use S for set and then add okay so s add and then give any name any name to a key so for example my set is a key here and then you can add members here one or many okay so for example I want to have a set of numbers so let me say this is my first set so I will name it set one my set one and let's say I add here 1 2 3 4 for example okay and I just uh press enter which is going to create a set and add these four numbers now here I have provided four different numbers right so they are all unique and to view uh the members of a set you just do s members okay so s members and the key name my key name is my set 1 and you can view all the members of the set right now for example in this set I want to add one more value so I just say s add and then my set one and I want to add three here right and I already know that here I already have three in my set and I want to uh you know add one more uh three to the set which is not allowed right so it's going to give me zero in return that means this three is not added to the set because three is already there okay we can just prove with this by using S members uh and then the set name so you can see set is not changed the values in the set remain same because uh they must be unique okay on the other hand when I do s set one 5 which is a new member in the set I can just uh verify this so you can see this time it's added and you can verify it with this value if you get one here that means the number is added to the set and if you get zero here that means number is not added to the set right now for example if I want to know how many uh values are there in the set so how many members are there in the set so I can just do s card and then the name of the set my set one okay my set one and I can see there are five members in the set okay now uh let me create one more set so I have my set one let me clear the terminal first and now I will create uh set two so set add or S add my set two here okay and let me add some more numbers here this time I will uh add for example 5 8 7 6 4 and 9 in this set okay and then press enter and I can view this set by S members here and the key name as set two and you can see these are the member of second set right now if you have multiple sets you can subtract one set from other using S diff okay so you can use S diff and this s diff command Returns the members of the set resulting from the difference between the first set and all other successive sets so this is the difference uh so I will just add my set one as my first set and then I will just uh give the second set as my set 2 okay and then press enter and it's going to give me the difference between these two set let me show you the values of uh the set one also so we can verify so you can see in the set one we have value 1 to five and then in the set two we have values 4 5 6 7 8 9 so from SD it's going to give you the values which which are there in the set one but they are not there in the set two okay so these values these three values are not there in the set two right but uh four and five are there in the Set uh two so they are discarded so SD is going to give you the difference that means whatever values are there in set one and not there in set two now if you want to uh know know the S diff and save it into the third set for example then you can do that also so you can just write SD and then store and then the destination so I'm going to save the difference in a new set so for example my set three right and then uh the difference between these two sets so my set one and my set two so these three values will be saved in the new set which is my set 3 okay press enter and then you can see by S members my set 3 you can see all these values are saved in the set three which is the difference between my set one and my set two now you can do the union also Union of uh the set so for example I want to do Union I can just write s Union and the set name so my set one and my set two okay so I wanted to do the union of set one and set two and then press enter and it's going to give you uh these values so Union means whatever values which are there in the first set also and second set also the combination of that unique value right so all the unique value which are there in the first set and second set set so uh these value were in the first set and these value which are unique in the second set so this is the combination of s Union okay and same you can do for storing so you can just write s Union store here so just write s Union store and I'm going to store it in set 4 for example so my set 4 the union of of set one and set two right press enter and Union is saved I can do s member my set 4 and you can see now it has 1 to9 which is the union of set one and set two okay so in order to store use S Union store now if I want to remove some members from a set I can do s REM for removing a a value from a set or member from a set and for for example I want to remove uh some member from set 4 and I want to remove for example 9 okay and then press enter it's going to remove nine from the set four and I can do s members one once again and you can see 9 is not there anymore okay you can remove multiple values for example 8 7 6 and so on and these will be removed so now I have only up to five values because 876 are removed now for example I want to remove a random value from the set so I don't want to uh remove a specific value but I want to remove a random value so for example I can do s pop here to remove a random value from a set so my set 4 for example and for example I want to remove only one value from here right so I can just uh press enter it says three so it has removed three from this set okay so let's do s member S4 and you can see three is no more there in the set four okay so it has picked a random value from the set and removed it okay I can give for example s poop uh my set 4 for example I want to remove two random values so I can just do that and now it has removed four and one from the set and now my set is only of two values or two members two and five okay so s poop is to remove the random value from the set now let me clear this terminal and let me just print uh the values of set one and set two once again so set one has 1 to 5 and set two have 4 to 9 now there is a command called s inter and S inter command gets the element of a set after the intersection of all the specified set okay so it's going to give you the intersection of uh all the specified set so just do s enter for example my Set uh one and my set two and then press enter and it's going to give you the intersection intersection means uh these values are there in both the sets so these are the intersection of both the sets so four and five are there in set one and set two so it's going to give you those value only and as we have seen in the case of s diff and S Union you can do uh for example s inter store so you can store the intersection into a new uh set so s inter store and for example I want to save this in set five and then press enter and then I can just see the content of set five which is four and five which is correct now the last command I want to show here is s move command so s move and this command is used to uh you know transfer or move value or member from one set to the another set right so for example I want to move one from my set one to my set two okay so I want to move this value to the set two so what I can do so first of all the source source is my set one and I want to uh move it to the destination which is my set two and I want to transfer the value one member one right so press enter it says one that means the operation is successful so let let me see the S member or members of set two and now you can see one is moved to the set two earlier one was not there in the set two but now we have one in the Set uh two and let's see the contents of set one also so you can see one is no longer there in set one because it's moved from set one to set two so these are some of the most frequently used command in redis sets I hope you enjoyed this video please R comment and subscribe and bye for now