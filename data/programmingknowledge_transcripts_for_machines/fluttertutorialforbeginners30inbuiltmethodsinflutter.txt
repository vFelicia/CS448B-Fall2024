welcome to programming knowledge so in this video we are going to discuss about of inbuilt function in flutter which is set state okay so what set state does is it informs flutter that the internal state of application has changed and probably we should rebuild the current interface means the current screen that the user is seeing which means that whenever we call the set state function this build method is executed once again okay so we will see what happens when we don't use set state and how set state comes to the rescue okay so first of all i'll remove that list i'll remove the entire body we don't need it over here okay and now i'll add our body a simple text in the center the child is a text the text is count okay so let's create a count variable over here that is zero now i'll increase the size so that it is visible so i'll add the style parameter it takes a text style widget okay and then over there we have font size okay so i can make the font size 20 now let's format it save it and you can see we can see a 0 in the center okay so now what i am basically trying to do is whenever i click on this button instead of printing fab pressed the counter should increment okay so this is exactly same as the starting project that we get when we create a flutter app okay so for that the simple process would be uh we can keep this print statement okay so the simple method would be we can write count plus plus now let's save this so now if i click on this button the counter should increment so let's see and you can see the print statement is executing but this count statement is not executing and that and i can say that by seeing in the counter over here it is still zero okay so now uh what happened over here was that we the incrementing operation was done but that was that is happening internally and it is not reflected on the screen okay so this is when we use set state now what happened over here was that the value of count changed internally but the interface has no response to it so to give so to get a so to get a expected response on the screen we can use the set state method so what i'll basically do is i'll simply use a write a set state over here so now another thing we can use this set state only when we use a stateful widget if we try using set state in a stateless widget probably it will not work and give you some errors okay so now over here what will happen that as soon as the value of count will be changed the set state method will be called and that means as i told you just now that the build method will be called and since the build method will be executed again this center will be executed again and then over here the new value of count can be seen okay so now let's try running this okay so now if i click on plus you can see the value is changing over here okay so that means we are getting the expected response okay so this is this is the place when we use set state okay now if you want you can keep this function inside set state also okay so it hardly cause changes anything but the general convention is to keep it inside set state the factors which actually change the state of the application should be kept inside the set state method okay so now let's save this again and then again it should work fine okay so you can see this was about set state it is a very important function and it will help you in a lot of places okay so the next method that we are going to discuss about uh it is not a discussion but rather an overview so the next method that we will see is the init state okay so it is a similar to uh like onstart that we have in android if anyone is coming from android background so what it basically does is it it is generally used for initializing some controllers and parameters some global keys that we have in flutter okay so you might not be knowing what is a controller what is a global key in flutter but we will come to that later okay so to initialize such things we have a inbuilt function called init state okay and then over here it always have has a statement called a super dot in its state so now this is super comes from the concept of oops a concept of inheritance so what basically is happening over here is that init state is already a method that is existing somewhere inside the flutter code okay and over here if we write super dot init state that means we are overriding that init state method in our init state method and that is the same reason we have a at the rate override over here okay so now in this init state first of all we have reference to the actual init state which is inside the flutter code that function will be executed and then after that all the initialization that we want to do okay so over here only we deal with the shared preferences checking if a user has logged in previously like we have the remember me feature all those stuffs work within its state okay so then the next method that i am going to discuss about is the dispose method so it is similar to uh on stop method if you are coming from an android background okay so what it basically does is it it is used for closing all the existing things means uh disposing all the controllers disposing all the global keys again we will discuss about controllers and global keys later but since we are initializing them it is kind of understood that it is necessary to dispose them as well okay so for the same reason we have this dispose method over here and now the trick part is that over here we after this super statement we write all the code but in dispose we write all the code before the super statement and the reason is that when this method is called this page this my home app means like this class will stop completely okay so i hope you understood about the three methods init state dispose and set state okay and you can always refer to the documentation for a detailed explanation and better understanding thank you