so first of all what is redis so reddis is an opensource BSD licensed Advanced inmemory key Value Store where keys can contain data structures such as strings hashes lists sets and sortage sets so it's an inmemory key value store with persistence that means RIS can be used as a database or a caching layer or a message broker now I already said that it's BSD licensed that means it's open source now redis is written in C and it's nosql database now what is nosql nosql is an informal Loosely defined term for nonrelational structured data storage systems like mongod DB mcash cou DB or Cassandra so following in the footsteps of uh other nosql databases such as cassendra couch DB or mongodb radis allows the user to store vast amount of data without the limits of relational databases so in nosql databases data can be stored in nonrelational way now what does the name Radice mean redis stands for remote directory server it is often referred to as a data structure server since the keys can contain strings hashes lists sets and sorted sets so because the keys can contains these type of different data structures it's often referred as a data structure server right so the name come from remote directory server now what is radis used for so as I already mentioned that it's an advanced key Value Store that can function as a nosql database or as a memory cache store to improve performance when serving data that is stored in system memory and also it can be used as a message broker so it can be used in place of caching systems such as mam cached now you must be wondering how to interact with radis so redis can be installed on a server and it can be interacted with uh command line tool or command line interface which is called radis CLI so using this radis CLI we can interact with our redis server now this redis client can be used on any machine and then when we open this redis client which is a command line client uh the first line will look like this so redis then this kind of angle bracket this we will see in the coming videos how to install redis and how we can use redis now let's talk about some of the history about redis so in early 2009 a developer called salvator Sanfilippo he was an Italian developer by the way started the redis project at that time he was working on a realtime web analytics solution and found that myell could not provide the necessary performance so in June 200 redis was deployed in production for a website called log.com which was a realtime web analytics website then in March 2010 a company called VMware hired s philipo to work fulltime on reddis although Reddit remains as BSD licensed subsequently VMware hired some of the other developers who also contributed majorly to assist assist on the project so this was a brief introduction about radis and from the next video we will see how we can install redis and how to use redis hey guys in this video I'm going to show you how you can download and install and use redis on your Ubuntu operating system so let's get started so first of all what is redis so redis is an opensource inmemory data structure store which is also used as uh cash or a message broker uh in various applications right so it's basically a key value uh pair database mostly I use it as a caching layer in my applications uh you can also use it as a message broker so let's see how we can install redis so when you go to your favorite browser and search for install redis uh the first link which you will see here will be from redis doio and here you can see the title installing red is so just click on that title and then you have this install reddis on Linux uh link here so I'm going to click on this link and you have uh the procedure on how you can install reddis on your Ubuntu operating system so if you want to use uh apt install to install redis then this these are the commands if you are installing redis on a Docker container you might need need this uh prequest it to uh install reddis uh because in some containers you have some minimal distributions right I generally prefer the second option which which is installing redis using the snap package manager right so the command is easy snap already comes with the newest version of open 2 so you can just give the single command and reddis will be installed so I'm going to copy this pseudo snap installed redis and then open my terminal so to open the terminal I can just press control alt t on my open to operating system and it opens the terminal or you can go to the application and click on Terminal and it's going to open the terminal just paste the command which is sud sudo snap install redis press enter and give your ubuntu's password which you use to log to your Ubuntu operating system and then press enter which is going to start the installation of redis on your open 2 operating system it will be finished really fast so redis is installed on on your W operating system so once redis is installed using the snap command you can enable redis using snap uh itself right so just write pseudo snap enable and then redice it's going to enable the redis service right now in order to start the redish using snap you can just write uh pseudo snap start and it's going to start redis right so you can see uh redis has been started right if you want to stop it you can use uh stop command if you want to restart redish you can just use uh restart command and it's going to restart the redis service using snap right so these are few commands you can use to enable and start redis using snap because we have installed redis using snap on our open2 operating system right so once uh redis Service uh is running you can also check the status also by using this command pseudo snap Services right so just give Pudo snap Services it's going to show you all the statuses of all the services uh which have you have installed using snap right so redis server is already here and it's enabled and its current status is active right now how to connect to the redis server so in order to connect to the redis server you have this command generally if you have installed the redis using apt install you would use uh radis hyphen CLI right but if you have installed radis using snap this command will not work so you can see this command is not recognized because you need to use redis do CLI if you have installed redis using snap right so just write redis do CLI and you are connected to your local Red This Server right I can just press contrl C in order to come out of uh this CLI if you want to uh give the same name or if you want to use same name right uh like uh redis hyphen CLI you can create an alas for redis do CLI right so just write U pseudo snap alas then the name of our rist CLI is radius. CLI and then just right redis hyphen CLI and then press enter so the ls is created and now you can use uh redis hyphen CLI to connect to your uh redis server and use it like this okay so this is how uh you can uh use redis on your obuntu operating system if you are not happy with the alas you can also unalias it by just uh giving this command on Alas and then give this uh give this redish hyphen CLI and it's going to unal it right so let me just uh use redis CLI and then when you give your ping command it's going to in turn give you the pong output this is how you know that red is uh is working fine right as I said redis is a key value uh pair database for example so you can set uh a value for any key by using the set command so just write set and then the name of your key let's say the name of the key is test and the value is my value for example right so just write my value and then press enter so we have created a key called test and its value is my value right in order to get the value of uh test key just write get and the name of the key which is test and it's going to give you the value for that key right you can just write exit to exit out of your uh redish CLI and from now on you can um just uh use redis CLI to interact with your redish server on your UB 2 operating system so this is how you can download install and use redis on your UB 2 operating system I hope you enjoyed this video and I will see you in the next video hey guys welcome to the next video on red tutorial for beginners in the last few videos we have seen how we can download and install redis now further videos I will be making on my Linux operating system that is my Ubuntu operating system because more frequently or most frequently This redis Server is installed on a Linux machine and it's used from a Linux machine so it's will be more appropriate to go further with this Linux operating system but all the command which I'm will be using on this Linux operating system using the command line are applicable on on the Windows terminal also and the Mac terminal also so the command will not change and you just need to start the redis server and reddis CLI on your Windows or Mac OS and then follow these uh instruction which I'm giving on my ubu operating system so if you are on Windows or Mac you just need to follow the same uh steps you just need to open two terminals on your operating system it can be Mac or uh it can be uh your windows and of course the Linux and on one terminal you just need to start the redis server so I'm going to just start the reddis server here and on the other one you just need to start the redis CLI okay so looks simple right the same step you need to do on your windows or your Mac okay so once our server is running we can uh minimize this and start working to interact with this server using the redis CLI okay now let's start with the data types which are there in redis and then we will see how we can use one of the data type which is string so basically there are five data types which we can use in redis and as I already told you that redis is a key value storage so the key is a printable ask key right and it can be up to 512 megabyte so it can take a really big uh key for example and it should be a printable ask key and then we can see the data types of values so the values Can Be Strings and then uh the containers of strings so they can be hashes or lists or sets or sorted sets right so the key are printable as Keys we can uh use printable ask keys for keys and for values we can use strings hashes lists sets and sorted sets right and this uh reddish string can be up to 500 12 megabyte okay now let's start with the Practical example example so we will start with the basics and we will try to set some values and get some values so for example I have set some values already to this uh reddish uh server so what I will do is to get all the keys which are set you just need to write keys and then the pattern which uh is estx here so estx is is a wild card and it's going to uh search all the keys which are saved in your database and then give you the result so for example I have set two keys which is name and name two and uh it has given me both the keys which I have saved right so in order to uh see all the keys which are saved in your redest database you just need to write keys and S right now as I already uh told you that to set some uh value as a string you just need to use set and then a key for example in this case I'm going to write name three because name and name one is already set so I'm going to just set the third key which is name three and then I'm going to give some name right and then press enter and then once again I will just write Keys ASX and now I can see there are three keys stored in my database right so set is to set a string value and as you have already guessed from my previous videos I've shown you this command which is get command and whatever key uh you will write here it will give you the value of that key which is Mark in this case right in the same way you can do name two get name two and it's going to give you the value of name two okay so get and set we are already clear now there is a delete command Dell okay so using a dell and uh the key name we can delete some key value pair so for example I want to delete name uh two for now and then I will just press enter it's going to give give me the number of uh Keys affected and in this case there is only one key with the name to and now when I just do this command which is Keys estx now it just gives me two values which is name and name three and because name two key is already deleted so I will not see this uh name two again right in the same way for for example I want to delete uh name three key then also I can do dell and then name three and then press enter and I can see the result one key affected and then now only one key left which is name okay so uh this is how you can delete some value right now let's set uh these names once again so for example name Tom and once again do the get for example get name now you will uh see that the key value of name is overwritten with the name Tom so previously the value of name was Mark you can see here and now it's Tom so whenever you set uh the value of previously uh set key then whatever value you will give for this key will be overwritten right so value will be overwritten for that key now for example if we want to delete all the values which are stored in our redist database then we can use flush all command so for example I will set some more values uh to see this example for example name two is equal to John and then I'm going to give name 3 is equal to Max so now we have three names so we can uh just give keys and Asis to see that so we have three keys stored right now for example I want to delete all these Keys then I can give flush all so just write flush all command and then it's going to delete all the values so it says okay and then once again when we give keys estx then you can see empty list or set so all the values are deleted using flush all commands so these are some of the most frequently used uh commands which we can use with the strings in the next video also we will see some of the more commands which we can use with the string values hey guys welcome to the next video on RD tutorial for beginners in the last video we have seen how we can use some of the command with the string values now in this video also we will see some more command which we can use with the string values in radis so let's get started first of all I will show you uh one command which is valid in Linux terminal also which is the clear command so when you do uh clear it's going to clear your terminal right so you can see when I have given the clear command is going to clear the terminal and basically what it does is it just give some of the some space uh in between your uh last command which you have executed and this uh after this clear okay so now uh you can see this terminal is totally empty now right and now we can uh start uh executing some of the other command so right now our uh database is totally empty I think so we can check it with keys estx and now let's set some uh values and this time uh we can uh use a command which is called the set ex okay and this set ex is the command uh which we can use with second so you just need to write set ex and this means set the value with the expiry of the key okay and then for example I just give the key and then I need to give some seconds so you can see the next option I need to give here is the number of seconds I want uh this uh key to live in my reddish database and after that it will be automatically deleted so for example 10 second I want to give here and then I want to give the value of it for example Max okay now uh when I just uh press enter it's going to say okay and when I just get name it's there right and then there is a command called TTL and then you can use uh the key with this and it says two and what is this two so TTL is the command uh for time to live so it will check uh for how much time or how long it's uh this key is going to live okay and it says 2 seconds okay so this is time to live and then the key and then uh it returns us uh 2 second because 8 8 second has already passed after after giving this command and once again for example I will just say get name and it's no longer there right because we have just set uh 10c expiry on this key so after 10 second it will be automatically deleted right for example I will just give a 50c expiry for example here so 50 Max and then I will just give a TTL and then name and then you can see it shows 44 second once again 40 second and then it will show you the seconds uh for which this key is going to to live okay and after 36 second it will be deleted right so these are two more command which you can use with the string right now let's set one more value for example Set uh name 2 and name two is equal to Tom okay and uh now uh we can uh for example uh overwrite this value so I told you whenever you write something like this set name name two and some other name for example John then it'll overwrite the value of name two for example I take name two as my key and give some other value it will overwrite but if you don't know uh if uh name two is there and if you don't want to overwrite uh name two then you can use this command called set NX and this set NX first of all check if the this key is available or not and if this key is not available then only it's going to uh you know create this key otherwise it's going to just ignore right so let's uh give this command and it says zero zero because uh no key is affected due to this command that means uh when we do get uh name two we can see this name is not overwritten because this command is used or will be successful when this key is not available in the database right if it's available then it's going to just ignore and if it's not available then it's going to create a new value for example I will just give a set n x 3 and this value is not available uh there so I will just give some other name and it says integer one that means one value is affected and then I will just do keys estx to see the values and and I can see name two is there and name three is there that means this was successful right and I can also get the value from uh get name three also and I can see that value is there let let me clear this uh terminal now if you want to know the length of the value stored in the key then you can just use St Str l n command okay and then the key name for example name two and it's going to give you the length of uh that key that means for example I do get name two here you can see it's a three character word and that's the length of uh this value right and that's the result result here okay now for example if we want to set multiple values with the same command we use M set so just use M set and then the key and the value for example this time I want to uh uh insert some numers so I will just say num one and I will uh just give 50 here and then after a space I will just write num two and then I will say 60 here here num three and for example 70 and so on right and then press enter and it says okay and then when I say keys keys estx it's going to give me name three and name two which were already there and then num one and num two because here you can see I have given the same key two times right so num one was there num two and num two I have given two times let's see the value inside the num two so num 2 get num 2 and let's see the value inside it so the value inside is is the last set value so whatever is the last uh set value uh you will set for this key it will show you that uh value here right so once again for example I will uh just give mset M set and then num three here and then give the value of for example 60 here and then once again do the key estx it's going to give me name three name num three num two name two and num one right so right now I have two names and three numbers inside my database now if you want to set the expiry in millisecond there is a command called P set X and then it takes uh the value in millisecond you can see in the intellisense also right so I'm not going to set any value uh here but I just wanted to show you this command also exist uh which will take the value of seconds in milliseconds right so this is p set X okay now there is a one more command which is called decr and in NCR uh which we use to increment and decrement the value of some key so for example I want to increment the value of uh key num one so let's see the value first of all so value of num one is right now 50 and then we can just write uh d c num one and then press enter and now the value becomes 4 49 right it will give you the result and when you give get num one it's going to give you the value 49 so it this decr command will decrement the value by one and if you do I NCR command to the num one for example once again the value will become uh 50 so incr and D ECR is to decrease and increase the value by one okay let me clear this ter terminal once again now there is one more command to uh increment or decrement the value by some number and this is for example uh I and C are by so I andc by and the key name for example num one once again and I want to increment the value of num one Pi 5 so earlier it was 50 right and then it's going to become 55 because I have incremented the value by five in the same way I can do decr by and on the same number num one and for example I want to reduce the value by 30 right and then press enter and now it becomes 25 so get num one and the result or the value inside it is 25 now the last command I want to show here is the append end command so let me uh just uh set one more value for example set and then uh the key name for example I will name it as my key okay and the value here I want to set is hello okay and then press enter and then get uh my key it's hello right now there is a append command so I can just use a p p and d append and as the name suggest I can append something to the key right so I want to append uh to my key so I will just write the key name and whatever string you want to append here so for example in double quotes I will just give a space here and then I will just write World here okay and then press enter and you can see uh the number of characters I think for the new value right so once again get my key and it's going to give me hello world so space world is appended to the my key right so append is used to append a string so these are some of the other command which you can use with the string values hey guys welcome to the next video on reddis tutorial for beginners in the last two videos we have talked about string values in red R now in this video I'm going to show you how you can use hashes as values in radius now first of all what are hashes hashes are map between the string fields and string values hence they are perfect data type for representation of objects in red is every hash can store up to 4 billion field value pairs now you may ask that I have talked about key value Val pairs but what are these field value pairs right so let me show you a slide and then you will be able to understand in a better way so this uh was the slide similar kind of slide I have shown you in the string uh data type also right so in the hashes we are talking about hashes now so in the case of hashes the keys are same which are printable ask key you can see here but in the case of string we were using string uh array here right and that string array was about 512 megabyte right now in the case of of hashes we use this kind of map of field value right so field is this one and value is this one okay in the cases of string it was like a like only a string value right so I will give you an example for example I want to store uh students uh database or students uh uh info data then what I can do here is I can uh say student one as a key so student one as a key and then for example student has what uh attribute student has for example name soame age in which class he is so here uh field can be name and then for example name is equal to mark value one can be Mark right age is the field two for example in this case and then uh for example 15 is the value to here right surname can be field three here and then whatever the surname of the student uh it will be value three right so uh for every student we can uh just provide this kind of map for his uh information so this is how uh hash data type as value work in redis right now let's take a practical example and then we will be able to understand this concept so I'm going to just start the reddish CLI and let me see what are the keys there so I'm going to just write Keys pattern and these are all the keys so I'm going to flush all so let me uh flush all here so all the keys will be deleted and now I'm going to clear this uh CLI and let's start with the hashes right so as we have seen in the case of uh strings we can just use this set command to set a key value pair now in the case of hashes we can use hm set to set a key field value uh pair right so for example we were talking about uh student information database right so just write hmet H stands for hashes here mset we have already seen in the case of strings also right so just write hm set and then uh for example ST1 for student one and then for example I will just write name is equal to Max right and then I can also give the second field value pair right so for example his age is equal to 15 and then uh for example class in which class he is so he is in for example eighth class okay this is just an example so this is students one information let me just give this minus here so we will be able to understand properly and then when I press enter is going to say okay and to get this uh value there are two ways of getting so you can just say h get and the key name for example Stu minus one is the key name and you can give the field name whatever field you want to uh get or you can just uh say get uh key name and here get we have already seen in the case of uh strings also and you just need to add a h before it and then the student key name it says error because we just need to give the field name also so what field we want to get so we want to get for example name of student one it says Max here right now if you want to get all the information about student one you can just say h get all okay and here you can just just give the student one key name and it's going to give you all the You Know Field value uh information about the student one so for example name max age 15 Class 8 okay so let's add one more student for example so once again this command H hm set student uh two and then the name for example Tom age is 12 for example and class is 7 okay press enter and once again you can get the information about the student 2 using Stu minus 2 right so let me clear the terminal so in this way you can um just uh set the hash value and get the hash value right now uh there is one more command for uh for example H exists and this will uh tell you if the field inside this hash sets exists or not so just write H exists and then the key name for example St minus one and then uh for example I am searching for surname okay and surname field does not exist in student one info right and then I press enter it says integer zero so there is no information about uh the surname of student one right in the case of name this name exists right name field exist in this uh student one uh hash set so when I just give this value then it says integer one that means it exists so zero it doesn't exist one it exist right now uh for example I want to delete a value what I can do I can just say HD L and it says uh first of all I need to give the key name so ST1 and I want to delete for example class from it so I'll just write class and then I can just press enter right and then I I can just to H get all and the student one key and now you can see class doesn't exist here anymore right for example I want to uh set once again the same value I can uh just write hm set and then the same student Stu 1 and then Class 8 okay and then press enter it says okay and once again again H get all student one and now once again the class is added here okay so you can add uh and delete uh the values from this uh hash like this so for deleting you use H Dell and then once again for setting you just add this field value pair now there is one more command called H set NX so H set n x so this this command is used for setting the field value if the field doesn't exist so if the field doesn't exist this command will be successful and if the field exist this command will not be successful so for example I will just say ST1 name so name field already exists right and I will just uh give some other name to the student one right and and it says zero so this command is not successful because this command will be successful only in the case of the field not available right so if I do the same command and I know that surname is not there so I will just write surname and some surname and then press enter it returns uh integer one that means it has created this field value inside this student uh set right so once again when I do get all ST1 now this student one also have surname information now as in the case of uh string we were using keys right so we were writing Keys ASX right same you can use for example H Keys here and then the key name for example uh whatever key you want to give here ST1 and it gives all the fields in that hash so by field I mean the name and for example age class and surname only the field not the value of those fields so it will only return the fields of that key whatever we provide here now as in the case of string values we were having DCR decrement or incr for incrementing the value so the same is available in the case of hashes also so for example I want to increase uh the age of some student by some number I can do that so just write H and then I Inc by and then the key name St minus1 for example and the field name is age I want to increment his age and then right now the age is 15 for example and I want to increase the age by two and then press enter and then once again when I do Edge get all S1 now you can see the age becomes 17 right so in order to increment the value you just write h i and C are by and the key and the field which which you want to increment now if you want to know all the values of a particular key then we can just write at Wells and then the key name ST1 it will just give you the values of that field value pair right so right now it's not giving name or age or class or surname it's only giving the values of them which is Max and then 178 and the surname value right so H vals is for Value okay now if you want to know the length of uh some hash for example I will just give this command hle n and then the ST1 the key name minus one it'll return you uh the number of fields in that hash okay so press enter and it returns four so I know that student one key has four number of field name age class and surname so I uh can just verify that with that okay so four field so it will return number four now uh the last command I want to show here is hm get so let me clear the terminal and then I just want to write hm get and it will give you the result whatever Fields you want so for for example for ST1 ST1 uh for example I just want to know the name of uh that student I I don't want any other information about that in student but only the name then it will give me the name right and for example I just want to know the name and age even though the student hash contains surname and class also but I just want to know the name and age it will just give me the name and age when I use hm get then the key name and the field name I want to see so the field name I want to see right now is name and age so I just give name and age and it will give me the result of those field only so in this way you can use hashes in redis hey guys welcome to the next video on reddis tutorial for beginners in this video we will learn how to use redis lists so first of all what are redish lists so redest lists are simply lists of strings sorted by their insertion order right so as I already said that a redice list is simply a list of string which are sorted by their insert order so a list would have a head on the top and tail on the bottom right now in this list we can insert any element from the top also and from the bottom also right right so a element can be inserted to a list from the top or from the bottom now sometimes you see lists in a horizontal way right not in a vertical way but on a horizontal way right now if you see a list in a horizontal way your head will be on the left hand side right so your head will be on the left hand side and your tail will be on the right hand side right so Radice have some command for example L push L push means the left push that means we want to push an element from the head right left and head are same in the case of uh list so this is how reddish lists work it's simply a list with the insertion order now let's see how we can use lists in reddis so I'm going to start a terminal I have already started my reddish server so I'm going to just start the redish CLI here and then press enter and I want to show you one more redis command which is a reddis CLI command and I thought this would be interesting to you so I'm going to open our next terminal and here also I will just give a redis c C command and I will give an argument here so I will just give monitor command here okay so monitor so reddish CLI Monitor and what this monitor is going to do is it's going to monitor all the commands which you are executing from your CLI so for example let me give a keys estx command here right and now you can see it's uh showing us that we have have uh given this command keys ASX at this time this is a a time stamp at which this command is given okay so this is the time stamp at which this command is given and this is the command which we have given right so let's uh do flush all here and then press enter and you can see this flush all command is uh printed here so this is kind of for monitor right so this is going to monitor what are the command you are giving to your redis server okay so let's start with the redis list so first of all uh how we can create a reddis list so you can create a redis list by just uh giving this command you just need to give L push right so L push means left push that means we want to insert an element from the top right from the head okay and then we just need to give uh any uh key here for example key here I'm going to give num for numbers right and the first key I want to insert here will be for example one okay so first number right you can even uh insert multiple values here for this key for for this list for example 2 3 and four okay and then press enter and these four uh elements are inserted to the list in uh this order right now to see all the values in the list you use l range command so just use l range and then the name of the key for example number in our case and then you give the uh you know start and stop value for the range now reddest list index start from zero so for example starting value we can give zero here and let's say we want to just see uh the values in the list from 0 to 10 okay and then press enter and it shows us these values from 4 3 2 and one right so because we were pushing the values from the top we have pushed one first right so it will be pushed from the top one and then we have pushed two so the Top Value will become two now when we push two here and that's why it's our reverse order of numbers right so first uh we have pushed one and then we have pushed two at the top and then we have pushed three at the top and at the last we have pushed four at the top so that's why the number four is at the top of the list and number one is at the bottom of the list right now if we want to push uh number five on the top we can just do uh L push here so just do L push and the key name and then for example I will do number five here right and then press enter and once again I will do L range you can see five is at the top now if you want to remove the value from from the top you give the L pop command Okay so L pop command is going to remove the value from the left hand side left hand side means from the top okay so lpap pop is going to pop the value from the top and in this case our key is numb and you can see it has popped five from the top that means our uh list is now up to four okay so let's give the same command L range 0 to 10 and now our list is 1 2 3 4 because we have removed five from the top okay let me clear the terminal and uh then I'm going to show you one more command so let's start with the L range so we have right now four elements in the list now there is a r push command and R Pop command also okay so when you do R push that means right push that means means from the bottom you are pushing some numbers right so from the bottom for example I want to push uh the value five here okay first of all I just need to give the key a name and then From The Bottom I want to push the number five and then press enter and I will do L range on again you can see uh this value goes at the bottom five goes at the bottom because we have R push we have used this command R push R push push means from the bottom P push from the bottom right from the right hand side of the list okay that's why this five goes at the bottom okay once again let's uh do this R push and let's push six at the bottom and once again do L range like and you can see in the list you have the six at the bottom so in red is this list is sorted by the insertion order right if you push from the right it will go at the bottom and if you push from the left it will go at the top and for uh left push you use l push and for right push you use R push now as we have seen in the case of lpop L poop is going to pop the value from the top R poop is going to pop the value from the bottom so just give our pop here and then the key name and it's going to pop six from the list which is from the bottom right let's do lrange command once again and now you can see six is gone from the list in the same way let's do our pop once again and now five is gone from the list so once again let's do L range and now we have a list of four numbers right let me clear the terminal here now let's give lrange command once again and now there is a command called L Len okay this means left length and name of the key for example it's going to give you the length of the list in our case this length is equal to the number of element in the list okay so L Len is for knowing the length of the list now for example if you want to get some value at some index you just do L index command okay and then the name of the key and the index so index start from zero so 0 1 2 3 okay so for example we want to uh get number two here at index 3 so we will just say index three okay and it's going to give you the number one because index starts from zero so 0o 1 2 and three so index 3 is the value one here okay let's do index zero here and it's going to give us the value four now there is one more command called L set so you can use l set and the key name and then you can give the index at which you want to insert a value right so for example I want to insert the value at the very top so the very top is the index zero right and then the value itself so I want to insert the value at the zeroth index and the value is five and then when I just press enter it says okay and when I do L range you can see at the top at the zeroth index this value four is replaced by value five right so the size of the list Remains the Same but the value is replaced at the zero index and now the new value is five here now let me push some more values here so L push you can do R push also wherever you want so uh L push num and for example I want to push uh number six here and then number seven and number eight here okay and let's do L range and you can see all the values are here right now sometimes you don't know the range or the length of your list so for example you just to uh 0 to three here and it's going to just give you uh 0 to three values right now if you don't know the length of your uh list you can give L range and then 0 to minus one so let's give this command and you can see it gives all the elements in the list so when you do L range the key name 0 to minus one is going to give you all the element in the list right this was giving the values from 0 to 10th index so if our list is of length 20 this is going to give you only 10 values 0 to 10 right but this is going to give you all the 20 values if you your list length is 20 now let me clear this uh terminal and let's go to the next command so the next command is L push X and that means L push if the key exists okay so the left push if the key exists so we know that uh we have created a list with the key uh num right so let's do first of all this L range right and then we will give this L push X okay and this means that insert to this list for example uh this key exist already so insert to the list if this key already exist which you are providing here okay and this is the left push so we want to push one more value to the top so let's push nine at the top and because this key num exists this command is successful right so let's do L range once again and this key is inserted at the top let's say we do L push X for a key which doesn't exist for example let's say we have a key for subjects so let's say the key is sub here and we want to push some keys for example uh once again one 2 3 4 5 okay but this key doesn't exist right and then when we press enter it returns zero because this command is not successful because this command checks whether this key exist or not and if this key exists then it's it's pushing these values on the top right but because this key doesn't exist this command fails and there is no uh list will be created now the next command I want to show here is L insert before or after so you just do L insert here and then the key name for example num here and you have the option before or after so before after are the keyword for example I use the keyword uh before here so I'm going to just write before and the pivot name pivot name is this element okay so I want to insert the value before two for example okay so let me uh write two here and the value is this time for example 55 okay so L insert the key name and you can use this keyword before or after here and then uh the pivot and then the value and once again I do press enter and you can see now the list size is nine and when I do L range 0 to minus one you can see this uh 55 is inserted before two right before two is the index from the left right because we have done the L insert okay so before two is inserted 55 right you can do after also so for example I want to insert after three okay let's insert after four so after five we want to insert insert the value four you can see uh after five there is three right so after five there is a value three and we want to insert four value four here and now our list is of size 10 and you can see now after five comes four okay and above three comes four okay so this L insert is used to insert the value before or after some value so these are some of the frequently used command with redis list hey guys welcome to the next video on redis tutorial for beginners and in this video we will learn what are sets and how to use sets in redice so first of all what are sets so reddish sets are an unordered collection of unique strings right so by unique I mean whatever values set contains they are all unique so no repetition is allowed here okay and they are unordered uh uh you know list so they are not ordered and they are unique so let's uh see how we can use sets in uh practice so I have already started my red server and on my CLI first of all let me uh just clear all the keys which I already have so so I will just say keys and I have only one uh key which I'm going to flush all and now let's create a set okay so to create a set you can just use S for set and then add okay so s add and then give any a name any name to a key so for example my set is a key here and then you can add members here one or many okay so for example I want to have a set of numbers so let me say this is my first set so I will name it set one my set one and let's say I add here 1 2 3 4 for example okay and I just uh press enter which is going to create a set and add these four numbers now here I have provided four different numbers right so they are all unique and to view uh the members of a set you just do s members okay so s members and the key name my key name is my set one and you can view all the members of the set right now for example in this set I want to add one more value so I just say s add and then my set one and I want to add three here right and I already know that here I already have three in my set and I want to uh you know add one more uh three to the set which is not allowed right so it's going to give me zero in return that means this three is not added to the set because three is already there okay we can just prove with this by using S members uh and then the set name so you can see set is not changed the values in the set remains same because uh they must be unique okay on the other hand when I do s set 5 which is a new member in the set I can just uh verify this so you can see this time it's added and you can verify it with this value if you get one here that means the number is added to the set and if you get zero here that means number is not added to the set right now for example if I want to know how many uh values are there in the set so how many members are there in the set so I can just do s card and then the name of the set my set one okay my set one and I can see there are five members in the set okay now uh let me create one more set so I have my set one let me clear the terminal first and now I will create a set two so set add or S add my set two here okay and let me add some more numbers here this time I will add for example 5 8 7 6 4 and 9 in this set okay and then press enter and I can view this set by S members here and the key name s set two and you can see these are the member of second set right now if you have multiple sets you can substract one set from other using SD okay so you can use SD and this s diff command Returns the members of the set resulting from the difference between the first set and all other successive sets so this is the difference uh so I will just add my set one as my first set and then I will just uh give the second set as my set two okay and then press enter and it's going to give me the difference between these two set let me show you the values of uh the set one also so we can verify so you can see in the set one we have value 1 to 5 and then in the set two we have values 4 5 6 7 8 9 so from SD it's going to give you the values which are there in the set one but they are not there in the set two okay so these values these three values are not there in the set two right but uh four and five are there in the Set uh two so they are discarded so SD is going to give you the difference that means whatever values are there in set set one and not there in set two now if you want to uh know the SD and save it into the third set for example then you can do that also so you can just write s diff and then store and then the destination so I'm going to save the difference in a new set so for example my set three right and then uh the difference between these two sets so my set one and my set two so these three values will be saved in the new set which is my set 3 okay press enter and then you can see by S members my set 3 you can see all these values are saved in the set three which is the difference between my set 1 and my set 2 now you can do the union also Union of uh the set so for example I want to do Union I can just write s Union and the set name so my set one and my set two okay so I wanted to do the union of set one and set two and then press enter and it's going to give you uh these values so Union means whatever values which are there in the first set also and second set also the combination of that unique value right so all the unique value which are there in the first set and second set so uh these value were in the first set and these value which are unique in the second set so this is the combination of s Union okay and same you can do for storing so you can just write s Union store here so just write s Union store and I'm going to store it in set 4 for example so my set 4 the union of set one and set two right press enter and Union is saved I can do s member my set 4 and you can see now it has 1 to9 which is the union of set one and set two okay so in order to store use S Union store now if I want to remove some members from a set I can do s REM for removing uh a value from a set or member from a set and for for example I want to remove uh some member from set 4 and I want to remove for example nine okay and then press enter it's going to remove nine from the set four and I can do s members one once again and you can see nine is not there anymore okay you can remove multiple values for example 8 7 6 and so on and these will be removed so now I have only up to five values because 8 76 are removed now for example I want to remove a random value from the set so I don't want to uh remove a specific value but I want to remove a random value so for example I can do s pop here to remove a random value from a set so my set 4 for example and for example I want to remove move only one value from here right so I can just uh press enter it says three so it has removed three from this set okay so let's do s member S4 and you can see three is no more there in the set four okay so it has picked a random value from this set and removed it okay I can give for example as poop uh my set 4 for for example I want to remove two random values so I can just do that and now it has removed four and one from the set and now my set is only of two values or two members 2 and five okay so s poop is to remove the random value from the set now let me clear this terminal and let me just print uh the values of set one and set 2 one once again so set one has 1 to 5 and set two have 4 to9 now there is a command called s inter and S inter command gets the element of a set after the intersection of all the specified set okay so it's going to give you the intersection of uh all the specified set so just do s enter for example my Set uh one and my set two and then press enter and it's going to give you the intersection intersection means uh these values are there in both the set so these are the intersection of both the sets so four and five are there in set one and set two so it's going to give you those value only and as we have seen in the case of s diff and S Union you can do uh for example as inter store so you can can store the intersection into a new uh set so s inter store and for example I want to save this in set five and then press enter and then I can just see the content of set five which is four and five which is correct now the last command I want to show here is s move command so s move and this command is used to uh you know transfer or move value or member from one set to to the another set right so for example I want to move one from my set one to my set two okay so I want to move this value to the set two so what I can do so first of all the source source is my set one and I want to uh move it to the destination which is my set two and I want to transfer the value one member one right so press enter it says one that means the operation is successful so let me see the S member or members of set two and now you can see one is moved to the set two earlier one was not there in the set two but now we have one in the Set uh two and let's see the contents of set one also so you can see one is no longer there in set one because it's moved from set one to set two so these are some of the most frequently used command in redis sets hey guys welcome to the next video on redis tutorial for beginners and in this video we will learn how we can use sorted sets in redis so first of all what are sorted sets so redish sorted sets are similar to The reddish sets with a unique feature that their members can be sorted now every member of a sorted set is associated with a score and based on this score their members can be sorted right so you can see in this diagram uh the redis key will remain the same as other uh patterns but here you can see uh a score here so you can define a score for example uh I will Define a score 100 and then the value associated with the score so the value associated with the score is value two and this is our member of a set and there is a new feature in the sorted set which is this score right so you can define a score and with this score you can define a member or a value associated with it and then on the basis of that we can sort the members of our set right so let's see in Practical how it works so I'm going to open my reddish CLI so the First Command we are going to learn here is Zed ad and the Z ad is used to create a set if it doesn't exist or add a member to this uh set if it already exists right so every command in sorted set will start with this character Zed and then whatever its function is the function name for example right so Zed add and then the key name for example my set one and the score so score is one and the value associated with it so value for example you want to associate it with the score one is a right in a similar way we can uh Define multiple score members here so score and the value associated with it two and B for example three is the third score and the value we want to associate with it is C and then they need not be in order so score can be five now and the value can be D here right or any other value right and then press enter and you can see four members are inserted in the sorted set now to get the members of ass sorted set you use Zed and then range command Okay as we have seen in the sets also and then what is your key name for example my set one and then starting value and the end value as we have seen in the case of sets also so in the case of sets we have seen that 0 and minus1 are going to give all the values in the set right so press enter and you can see here uh all the values are printed here now you can see here the values are printed not the you know scores associated with them right so for example I once again write Zed add and then uh set one my set one and then for example I can just give score 100 here and then the value is e here right and then press enter and once again I will just give Z range my set one and then you can see all the values here or all the members here but these are not the scores these are just the uh order ordered number now if you want to know how many number of members are there in our set we can use Zed card here okay and the key name for example my set one and then press enter and I can see that there are five members in my sorted set right now in order to get the count of members in the sorted set with the scores within the given range we use Zed count okay and then uh the key name so my set one and the minimum and the maximum uh score value here so for example I want to get uh one to three here okay and then press enter and then it's going to count the number of values between this range right so for example I will just write 1 125 here and values are four because in between score one and score five there are four values including those scores now I can just write 1 to 50 here or 55 and still it's going to give us four values number of values because the last score we have Associated here is 100 so so when we write here 101 here and then press enter Then only it's going to give us five values and let's see we can give 99 here still it gives the four values so the Zed count is going to take the score values and then depending upon the score values it's going to give you the number of values uh in between these scores now let me clear the terminal and uh to remove any member from a set you use zedem and then the key name my set and the member so the member here will be the member value so not the score but the member so for example I want to remove the member B so I can just give the value of uh member B and then press enter and and once again I will just give this Zed range command and now it's giving the same answer because I haven't given the right key name so I must give uh ZM myet one here right and then it gives integer one that means the command is successful and once again the range and now you can see the value is removed from here now if you want to determine the index of a member in a sorted set you use Zed rank here so just give Z rank command and then my set one and the member name so for example D here and then press enter and it's going to give you the index of uh this D right so the index starts from zero so 0 1 2 right for example I want to see the index of uh e here and it's going to give me the index three and for example for member number a the index is zero now there is a zed rev rank command also so you can just write Zed rev rank here and this is the reverse rank right so uh the rank will be sorted according to the score so highest score is the zero Index right and then uh the lowest score is the maximum index okay so for example my set one and then the member name for example e is the rank zero here right because index of e is the highest rank rank is uh 100 for E right and it's the biggest rank that means the index for it will be zero because we are uh printing the reverse rank here okay for example you want to see the index of a it will be three because it's it's in reverse order now the last command I'm going to show you here is zcore command okay and then I can give the key name and the member name so for example I give the member a and then press enter is going to give me the score value of uh this member right so for example I want to see the score of uh member e and press enter it's going to give me 100 because score associated with e was 100 right and for example this value doesn't exist in our sorted set for example I just added or given the random value here and then press enter it's going to return the nil value which doesn't exist okay now let me clear the terminal let me show one more command to you so for example I just want to print the range of my set 1 0 to minus one and this is a CDE e and I want to add one more value here so I will just add uh Zed add and I want to add this value to my set one and add the score one and I want to add for example a a a a five times and then press enter and and it returns me one that means the value for this score is now set to a a a a instead of a for example right so let me do Z range once again and you can see here the new uh value is added here which is a a a a right and if you remember the score of a was also one right so let me give the same command now which is Zed score and this time I want to just see the score of of uh a which is one and then I want to see the score of a a a a which is also one so it's totally fine if you give a same score to multiple values right so for example I want to give one more value to this score for example bbbb and then press enter and once again the range I want to see this value is added and then I want to see see the score score of bbbb so bbbb and you can see the score is still one okay so it's totally fine to have uh one score for multiple values now what happens to the rank here so for example red rank for my Set uh one so my set one and then bbbb and the index here is two so so this is how uh sorted set works now there is one more command which is Zed range by score and then you can give the key name and then the score value minimum score for example one and then the maximum score for example I I'm going to give here two right and then press enter and I get here three values because uh there are three values associated ated with the score one and I think there was no score for two right so no value was associated with two so let's see 1 2 4 for example and now I can see these values and C also so if you want to get values by the range of scores then you can use Z range by score okay so this is how you can use sorted sets in redis there are some more commands which are associated with sorted set you can just uh search for them and then practice them but these are some of the most frequently used command with the sorted sets hey guys welcome to the next video on red tutorial for beginners in this video we will learn how to use redis publish subscribe so redis publish subscribe implements the messaging system where sender is called the publisher and the receiver is called the subscriber right now in red is a client can subscribe to any number of channels so let me give you an example and let me show you how you can use radis publish subscribe so you can see I have opened three redish CLI terminals in three different terminals right so this is is ready CLI first terminal second terminal and third terminal now first of all I am going to subscribe to a channel so I can just write subscribe here and then it takes a channel name right and I can give any uh channel name for example redis or any other channel name so for example my channel and I can subscribe to this Channel okay so the name depends upon you right so for example I subscribe to the channel called redis and I just uh press enter so now this is or this terminal is subscribed to this Channel right now from the second CLI when I publish some message to this channel so let me publish something so to publish a message you can just use a keyword publish as we have seen in subscribe so to subscribe you use a keyword subscribe and then a channel name for publishing you use a keyword publish and the channel name on which you want to publish right so I want to publish on the reddish Channel and then your uh message for example hi right and I press enter and you can see on the subscriber uh it gets the same message so first of all uh it will uh just show you uh what kind of uh message is coming so it's a message and then on what channel it's coming and what is the message itself right now if you want to send a big message you can just uh enclose your message inside these double codes so for example hello world here and then press enter then it's received here okay now it's possible to subscribe to uh any number of channels right so you can see I'm subscribed to uh redis from one channel now I can uh just copy the same command in the next terminal here and then I'm sub subscribed to this channel so now there are two subscriber subscribed to one red channel so this is the channel and I'm subscribed to that channel right so there are two subscriber for the channel name reddis and when I just send uh hello world again for example now it is received by both the subscribers right so you can can see hello world is received here and hello world is received here okay so this is how uh publish subscribe method work in redis now when you are doing uh or using redis in the programming then uh uh it's really important or it's really useful so for example uh recently I created some kind of API where I wanted to listen for any event for Save in reddish so whatever is saved whenever some command comes and uh something is saved in redis I wanted to subscribe to that save event right and I have used this uh publish subscribe uh method from redis in that API and it worked fine so it's kind of listening to the trigger for example for uh saving the data or some delete deletion of data you can subscribe and then you will get uh this message on the next side which is subscribing and based on that uh subscription you can trigger some event okay now let me just uh close this CLI and once again uh open the ca once again and let me clear the terminal once again and there is command called P subscribe so you can do p subscribe and then it takes the pattern so for example I can just write R and then estx R estx here means any uh publisher when it's published on the channel name which start with r it will receive that message so for example uh I publishing uh this publish redis because this pattern matches this pattern so estx is some kind of a wild card here so uh it's whatever so for example I'm subscribing to R srix and I'm just publishing the same message again and you can see uh it's receiving that message because it's uh just matching the pattern whatever publisher publishes on the pattern which matches RS Trix for example R and whatever comes after R uh this is matching that pattern so it will receive that uh message for example I can uh just do something like this so I publish on uh RX for example this also matches this pattern right because we just want to uh match the first uh letter of that uh Channel and whatever comes after that it will be matched automatically so this is kind of a pattern matching in Radice so P subscribe is used to pattern matching and whatever uh publisher uh Channel matches that pattern it will be uh receiving that message so you can see this is receiving that message but this CLI is not receiving so because we have subscribed to a concrete uh channel here which is not a pattern so whenever we uh just give the redish channel itself then only it will receive the message and this automatically receives the message because here we are just matching the pattern okay so in this way you can use publish subscribe in redis I hope you have enjoyed this video