hello everyone welcome to programming knowledge i again welcome your programming knowledge today we are going to start with some uh continue with some more basic data structures in build data structures and ruby so let's start with so let's create a string a and type it as hello world now simply we can print the string onto the console by using put s a so you can first you can type ruby ds dot rb and this would run the program and it says hello world perfectly fine you could also initialize the string using the string inbuilt class string dot news hello world okay now instead of a i'm printing i am printing b and now i clear this and i'll say put sb and it says hello dot hello world and i like it's the same output as the previous one so hello world hello world are perfectly fine now i can type put s a is equal to b if they both are equal so it should return true so it returns true so it return perfectly fine so it returns perfectly fine true is the correct answer for this now you could also type put as a dot length so let's see the output of this so it turns out to be 11 good yeah now you could also do a dot size you can and the both of them turn 11. so the both of them work with the same thing so now you can you can also type a dot uh one thing i i'll show you there is a method and now uh just for a second you can comment both of them okay i'll comment out and i'll make an array c and this is an array one two three and i'll put a c dot include include uh what does it include what i want to check does it include two okay so i'll it returns true okay so yes it includes two the same way you can do it for strings also so you can do this both same way you can do it for strings also so i'll do a dot include this character so it should return true the same it turns for this a also so the include method is used for both strings and arrays now uh since i don't need this okay so i'll remove this yeah so now what i can do uh you want to increase the access the first character you can please say a of zero so this would give you the particular index so i'm showing you this gives me first character now to access the last character you can do either a dot length minus 1 so this would also work perfectly fine okay it does stay it gives you the last character but you could also use negative slicing and string uh string like in ruby there is a negative slicing which returns you from the end okay minus one is the last one minus two minus three minus four you keep on going like this okay so i'll show you oh it also gives the last character so this is all two ways you can manipulate strings in ruby uh now one we are left with some another command such as some basic is a dot up case okay and a dot uh put s a dot down case first i'll do one by one now a dot up case returns upper string and a dot down case returns the lower case so by default it was lower okay now i'll do a dot down a dot up case and i'll do put s a so here you might see sorry so now here you see that i did a dot up case but then put s a then turned out to be the one in the upper upper capital letters so for that you need to do you put an explanation mark which is all uh now this would what it will do this it will now do the inbuilt operation within that string so see the output of this now it converts the default a to up case as well okay so so this is good so now we can move to hash maps so hash maps is like grades is equal to new okay now you can do grades of n is equal to a plus and grades of nine is equal to a and grades of eight is equal to b now let's put s grades so here is the hash map for the 10 is a plus 9 is a and 8 is b now let's put as grades of n okay uh this should give us a plus perfectly fine so this is how we can you use it but what if i do grades of seven so rates of seven is not defined and when i run this it gives me nothing so to avoid that you can use dates for default if it is not default i'll do improve okay now this would turn out to be improved now i'll run this again and it says improve okay so this is how i can set the default value okay now i can uh use uh this is good now i comment this out a is dot new and b is equal to hash dot mu now a of 0 is equal to 1 just assigning some random values or let this be a b of 0 is also a okay yeah now i'll do put s i'll put s a and put s b so initialize constant b uh like line number 15 okay let me check what's the issue so uh like there was some like it was like i might have not saved the file uh like uh a is regular dot new b is going to hide dot new a of zero zero a and b of zero a when i put s a and b okay so basically when i put s a n input is b so both of the same are equal both of the hash maps are equal so i can also compare them using an equal to operator so this gives out the output true okay now now we could also like now it's perfectly fine now let's move to this this hashtag as well now i can do put s great start length so this would give me the same like okay i had to uncomment this sorry yeah so now i'll put great short length it's three and i'll do great sort size it would also return me three now i can do put s great dot to underscore a and and it should may return like this as a string oh sorry it converts this to an array so this is also fine so this is how you can do it and one thing because i converted this uh this to an array okay so i told you uh you could also if you want to see in other way around you could do this you can store this inside a variable x and you can print x okay so this is how we can do it okay so this is how you convert into an array and one uh one small exercise we can have right now uh you could also do this as well put a s grade dot has underscore value so this worked as like i told you the one like we had in uh like string that is include so it does it has a value 10 as a key okay so okay let's uh okay so this is returning false this is our value sorry so this is how you can do it so 10 is not a value it is a key so for that you can run this true okay so this is how you can do it for key and value so by mistake i had like so like dated for uh as key and it has value so you can understand book here value so let's move to a very small size since we covered strings and hash map in this string is equal to hello world so let's create a program to crown the frequency so first creates a frequency as a hash map frequency is equal to hash frequency is equal to hash dot new so this would maintain the frequency by initially the frequency should be frequency dot default is equal to zero now we do a s dot e kind of scope care we'll make a do and i have the value okay okay i have the value then frequency dot val plus equal to equal to 1 and i can end this loop and simply put as frequency now let me clear this loop and run this so here i have got all the frequency of the particular graph so thank you everyone for watching this so it was a simple exercise make sure you uh do this else it will throw error this will throw error because you need to initialize frequency of default to zero else it will throw arrow because uh either you can also put a tricast statement if statement it inside this but this is a better way of doing it so thank you everyone for watching this so uh i hope to see you again in the next thank you