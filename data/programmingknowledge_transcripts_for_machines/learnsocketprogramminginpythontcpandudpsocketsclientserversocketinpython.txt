hello everyone welcome to programming knowledge I am going to start a lecture series on python socket programming well some of you might be wondering about what are you going to learn here well if you learned programming you must have wondered okay we know programming but what to do with it what's its practical implementation of after all no one is going to give you an stack or cues and will ask you to pop it post it right real world problems that are solved by programming are different and complicated well in this lecture series you will come across some awesome practical implementation of python socket programming let's discuss course outline we start with the basic of networking which include code networking concept like IP addresses TCP UDP HTTP protocols email protocols like SMTP file transfer protocol FTP and Internet Protocol the best part of this lecture series is that here we only not cover the basics Theory but we also see how to work with these protocols in Python one point here is to note that we are considering the viewer have some understanding of computer network and all of these protocols here in this lecture series we will not cover the indepth theory of computer networking but we cover some key concept of networking such that you are all able to follow the tutorial easily after the understanding of basic of networking we will see the socket programming in this topic we will see basics of socket and then we will cover working with TCP and UDP socket for writing low level applications thereafter we will look at writing client and server program for socket based communication no here is the requirement for the lecture series in this lecture series I am using window operating system but all these are also applicable for Linux or Ubuntu in this lecture series I am using python 3. for the coding or implementation purposes and of course all the implementation or coding part of the video require internet connections so make sure all these are satisfied before starting this lecture series okay okay let's so let's get started with something you are likely to be familiar with that is IP addresses they are typically look like this they are actually a single 32bit number but though they are usually written just like the number shown here they are written in the form of four decimal number that are separated by dots the number are sometimes called octet or bytes because each one represent 8 bit of the 32bit number such each octet can only take value from 0 to 225 okay so valid IP address ranges from 0.0.0.0 to 255 to 55 255 250. this way of writing IP address is called dot decimal notation okay basically IP address performed two main function IP address uniquely address each devices that is connected to a network and it helps the traffic to be rooted between the network you may have noticed that the network connected devices that you use have IP address assigned to them the important point to note here is that each IP address that is assigned to a network device is unique and node 2 devices can share an IP address okay you can find out what IP address have been assigned to your computer by writing just ipconfig slash all on window if you want a same on Linux system then just type ipaddr okay IP address can be assigned to a device by a network administrator in one of two ways statistically where the device operating system is manually configured with the IP address or dynamically where the device operating system is configured by using the DHCP protocol that is Dynamic host configuration protocol when using DHCP as soon as the device first connect to a network it is automatically allocate an address by a dscp server from a predefined pool some network devices such as home broadband router provide a DHCP server service otherwise here dscp server must be set up by a network administrator DHCP is widely deployed and it is particularly useful for Network where different devices May frequently connect and disconnect such networks are like public WiFi hotspot mobile networks Etc basically the internet is a huge the internet is a huge IP network and every device that send data over it is assigned an IP address the IP address space is managed by an organization called Iana that is internet assigned number Authority i a n a decide the global allocation of IP address ranges and assign block of address to rirs Regional internet registries address block to countries and organization there are some special IP address ranges Iana has defined that ranges is called private addresses this range will never be assigned to any organization and as such these are available for anyone to use for their Network the private ranges are here as follows 10.0.02 10.255 to 55 to 55. 172.16 to 0 0 to 172.31.255.255. as 192.168.0.02 192.168.255.255. you may be thinking that if anybody can use them then wouldn't that mean that device on the internet will end up using the same address thereby breaking the IP's unique address property yeah if you are thinking like that then that is a good question and this problem has been avoided by forwarding traffic from private addresses from rooted over the public network okay wherever in wherever in network using private addresses needs to communicate with public internet a technique called Network address translation is used which essentially makes the traffic from the private Network appear to be coming from a single valid public internet addresses and this effectively hide the private addresses from the internet now we will start with the socket series in this socket series we will cover the background of socket programming socket API overview and after that we will start working with TCP and UDP sockets as we know python provides a good coverage on the low level Network King interface so you can assume that python has a socket module that gives you the necessary functionality to work with socket interface if you have ever done socket programming in any other language like C C plus plus Java then of course you will love the python socket module because it is very easy in this lecture series we will explore the socket module by creating a diverse range of python size scripts okay so Network programming in any programming language begins with socket as we all know so the question comes in mind what is socket so if we Define in a simple word not in a very technical the so in simple word it Network socket is a virtual endpoint where entities can perform interprocess communication let's take an example to understand it clearly for example one process sitting in a computer okay exchange data with another process sitting on the same or another computer we typically label the first process we have already cover the process and the ports how it communicate in the previous lecture when I am discussing TCP and UDP so we typically label the first process which initiate the communication as the client it is very important point which initiate the communication is referred to as a client and later on as a server okay so python has a quite an easy way to start with socket interface in order to understand this better let's see the big picture first let's see a following diagram in this diagram if flow of client server interaction is shown let's understand it very deeply this will give you an idea of how to use socket API so in the interaction between typical client and a server the server processes has to work a bit more means there is a confusion that only client have to work mode but the reality is the server has to work more than a client we will see how so let's see here after creating a socket object first let's see Server part so when we create a socket object the server process binds that socket to a particular IP address and port so this is much like a telephone connection with an extension number so in a corporate office after a new employee has been allocated with his desk phone usually he or C will be assigned to a new extension number so if anybody makes a phone call to this employee the connection can be established using his phone number and extension number okay same thing is like IP address and port so after the successful binding the server process will start listening for a new client connection okay no for a valid client session the process can accept the request of the client process at this point we can say that the connection between client and the server has been established okay this is a very important point when the connection between client and the server will be established okay then the client or server enters into request response Loop the client process sends data to the server process and the server process says the data and returned a response to the client when the client processes finishes it exceed by closing down the connection okay at that moment the server process probably goes back to the listening state okay the L have interaction between client and server is very simplified representation of actual reality it is only for understanding purpose in practice any production server processes process any production server process has multiple thread or sub process to handle concurrent connection from thousands of client over respective virtual channels so it is very very simple simplified diagram to start with okay so in this lecture we have covered some beautiful point about what is Socket how we visualize the socket and we have also seen a diagram which you which is helps you to clarify the socket API overview which you clarify the socket how socket API works but as I have said earlier that this diagram is very simplified version of the actual client server interaction this is for the understanding purpose till now we have completed the basic of sockets and we have also seen that what is socket and we have seen simple uh interaction diagram between client and server using socket that is we have seen a socket API how socket API works now today we are going to start working with TCP socket so creating a socket object in Python is very straightforward I think you all know that you just need to import the socket module and call the socket class so open up your ID ID I am using pi charm here or even you may use another ID which you means love to use so if you want to import or import all the things from the socket module then just write from socket import Star or you can simply import import socket okay now let's create TCP socket for creating TCP socket um you have to write s is equal to socket dot socket and here the class this class takes plenty of parameter okay so the important one I am using here if you want you can refer to the documentation of socket so some important parameters are first one is Socket family the socket family is the domain of socket the example of the domain of socket is like AFI net approximately 90 percent of the Circuit of the internet fall under this category okay and there is also one family's AF Unix which is uh sometimes used as well in Python 3 you can also create a Bluetooth socket yeah this is very interesting point you have to just write AF underscore Bluetooth now the second parameter is socket type depending on your need you have to provide the socket type socket type is what you want to work for if if you want to work for TCP socket then you have to provide sock underscore stream and if you want to work with UDP socket then you have to provide here type is equal to sock underscore D gram okay now there is third parameter but it is also not very important but this specifies the variation of protocol within a socket family and type okay usually we left it as zero okay now for many reason means uh there are various reason which leads to socket operation unsuccessful for example if we take an example if you don't have permission to access a particular Port as a normal user then you are not able to bind to a socket right so this is why it is a good idea to do proper error handling when creating a socket or doing some Network bound communication okay so let's try to connect a client socket to a server process with proper error handling again I am repeating here I am using TCP client socket so here A type is Socket underscore stream okay so let's start as I said just import socket and I am also importing one module which is sys module which is system module in Python no let's start with Drive and try we have to write a reference variable I am taking as a sock is equal to socket dot socket and in that we have already discussed the parameters here I am using socket dot AF underscore init if you want to use Unix then it is up to you and I am that's I am making a TCP client socket that's why I am providing socket dot sock underscore history no if the socket is not able to created then what we will do then we will use accept Block in accept block just write socket dot error as err or and here just I am printing uh socket is failed to create and the reason is uh error the reason is stored is in err so we are printing also that if accept block will not execute it then the socket is created right so also I am predicting that let's socket created now I have to reach to the server process so I have to provide Target host and Target Port number as I have already discussed that telephone number and extension both are required so here Target host let's take a input by a user so Target underscore host is equal to input of let's say enter the target host name to connect Target Port is equal to input of enter the Target Port number okay now again I am defining in a drive lock and accept block it is a very good programming practice so try to do like this only it will create it will make your program very effective so in try block just try to connect to the Target host and since Target hose is is in string so I am providing directly like that and Target Port have to be integer so I have to convert it into integer so in Python you have typecasting is just like intent uh in that I have to provide the string right and after that uh let's print that socket connected and also print Target host in which it is connected and uh and also the port number let's print it out okay now after connection let's close it also sock dot shutdown okay here I am providing two now if it is not gets connected then print uh fail to connect and also provide Target host and Target Port that this is the target which we are not able to connect right and also we are able to um print the reason so in accept Justified socket dot error as err and printed it because after printing error it will show you why it is why what error has happened so let's run this code yeah and now enter the target host name so I am connecting to www.python.org Let's suppose and obviously Target Port is 80 it is standard so yeah it is showing socket connected to www.python.org on port number 80. but however if socket creation has failed for some reason such as invalid if you provide invalid DNS an output similar to the um so output is very similar but socket will be created but it is not able to connect right so let's uh if you provide invalid DNS if you provide invalid host the suppose www.abc dot invalid and the port number let's say 80. so here you see that it is failed to connect on port number this and the reason is reason here is important name or service are not known so I think that you are able to understand how to use socket interface of python to connect to a client to connect to a server process using a TCP client socket in the previous lecture we have seen that how to use socket module and also we have written the TCP client program to connect to the server process now in this lecture we are going to see the TCP client server interaction using socket module of python in the previous to previous lecture we have seen the client server interaction diagram in detail and in that diagram we have understood that the server process needs to carry out a bit of extrovert right so what extrovert work so it needs to bind to socket address and also listen for incoming connections now let's write code to understand it clearly let's start with writing TCP server program which sends the data to the client and also receive data from the client so open your ID I am using pycharm here so we are going to write TCP server program here so let's start as you all know that we have to first import the socket module so import socket now let's create a socket object so Let's uh server underscore socket is equal to socket dot socket and here we have to pass the required parameters as we have seen in the previous video also the first parameter is AF underscore init and second one is sock underscore stream as we have seen also that AF underscore init referred to address family of ipv4 and sock underscore stream means connection oriented TCP protocol right now let's see interaction diagram to visualize it clearly as you see here that server first bind the socket to a specific IP and port so that it can listen to incoming request on that type people and port so to do this thing server has a bind method which bind it to a specific IP and port and server has a listen method which puts the server into the listen mode so first let's bind it so server underscore socket dot bind here we have to pass the server address so server address as we have seen that server addresses IP address as well as port number so I am using localhost here that's why I am passing 127.0.0.1 and port number as we have seen in the previous videos that Port should be an integer and ranging from 1 to 65535 right and also zero is reserved so let's suppose I am using port number one two three four five which is in the range of this range okay now Let's uh listen now server started to listening after binding so server underscore socket Dot listen here listen takes a backlog parameter so suppose I am passing file so 5 here means that five connection are keep waiting if the server is busy and if a sixth socket try to connect then the server then the connection is refused okay now at last we make a while loop and start to accept all incoming connection so I am you I am writing uh why uh of infinite look so while true here I am printing uh server waiting for connection now as we have seen in the interaction diagram now we have to accept so in Python socket module there is an accept method the acceptor method initiate a connection with the client as we have seen so uh here the accept method basically return to thin it written a new socket object representing the connection and Tuple holding the address of the client so let's uh client underscore socket comma address is equal to server underscore socket dot accept so here the object will we go into the client underscore socket and the address will go under a DDR address right so let's print this address so let's print client connected from addr let's write another info infinite while loop to get the data and send the data to the client so while true let's receive the data by the client using rdcv method of the Python socket module this method will receive at most 1024 bytes so data is equal to client underscore socket Dot Rec we receive and one zero two four it takes at most one zero to four now if data is not received or if data is end we have to break so if all the data is received then we have to break this while loop so let's break it and also we are printing that uh data so and also we have to uh you all know that we have to decode this into utf8 string right so print receive from client data dot decode and we have to convert decoding D decode into utf8 now let's send data to the client also so here I am putting this send operation send method into the try and accept block so if it is not able to send then it will or if we do a keyword interrupt then it will exited so try uh client socket dot send uh here the string will not be sent here the is the type of the here the type is bytes not a string so we have to convert the string into byte in utf8 so bytes suppose I am sending the message hey client so hey client and we have to convert into a decode into U at tf8 so let's do that or accept if keyword is interrupt keyword interrupted then print exited by the user okay now at the end we have to close the connection between server and client so let's climb the client underscore saw kit Dot close and server underscore socket Dot close okay so let's run this code now as you see here it is showing server is waiting for the connection in this video we have seen that how to write TCP server program which sends the data to the client as well as receive the data from the client so in the previous video we have seen the TCP server program and now in this lecture let's write TCP client program such that we are able to see the interaction between client and server we are going to write the program according to the interaction diagram which we have seen previously by doing this it will give you a clear picture in terms of theoretical as well as practical knowledge so let's look at a diagram again I have also followed this diagram to write the server program as well so as you see here first we will create socket object and then we will connect to the server using IP address and port number and then we will send and receives the data between client and server so let's begin open your ID to start coding I am using pycharm to do coding so as we now all know that we have to import the socket module so let's import import socket and then we make a socket object as we have seen previously like I am defining reference variable as client underscore socket is equal to and let's create object socket dot socket and in same here I am passing the argument like socket Dot AF undergoes underscore init which is belongs to ipv4 family and socket dot sock underscore stream which is a TCP which signifies the TCP protocol right now now we have to connect to the Local Host on port number one two three four five so this port number as we have seen in the previous lecture we have taken the port number as one two three four five in the server program right so here we have to provide the same port number on which the server program is running Okay so client underscore socket dot connect as we have we know already that now it takes a tuple of Port IP address as well as port number so here I am connecting to the Local Host that's why I am passing IP address as 127.0.0.1 and the port number one two three four five now now let's try to send the data to the server and also receive some data from the server so I am defining a variable named payload and I am assigning a message payload is just a message so I am just assigning payload as his server so we are going to write the send message method and try and accept block so let's write try and here we have to write in a infinite Loop so as we have seen in a interaction diagram we go repeatedly in a receive and send method so while true now as we already know in a previous lecture that we have to use send method to send any payload or message so basically send method in Python socket module takes argument up payload or message which is in a utf8 string format so let's write client underscore socket dot send and you have to pass a payload dot encode into utf8s ring so you have to pass a utf8 okay and now again let's receive the data as well from the server using receive method we have seen also this method in the previous video so data is equal to client sock underscore socket dot receive means rdcv and we have to here remember we have to pass here the buffer size right so it takes at most one zero to four so let's pass it and let's print the data so print Str data so again let's play little bit with this program so let's take a user input also to make a more interactive so let's take a user input to send the data to the server as well so Let's uh mode is equal to input of 1 to send more data to the server and if users say yes then we will we will take our input and if you say no then we will break so if uh more dot uh lowered just uh convert into lower so more dot lower is equal to equal to y or yes then payload is equal to just take a input into the payload so or else break and in accept block let's take a keyword input to break to get out of it and let's print that exited by the user and as we have seen that in an interaction diagram we have to also close so client underscore socket Dot close right so let's run this program okay as we have already just see we have already written the program of the server so when you run the program of the server so it is writing server waiting for the response right now waiting for a connection so now let's run the client program so here as you see that it says hey client that means that it receives the data from a server so as you see in a server program I am sending the data hey client to the client and if you see the server then you get here that received from the client Haze server right as you see here thank you and if you go into uh client part then it is also saying want to send more data to the server if you say yes yes I want to send then it says enter payload so suppose I am writing my name let's suppose Mohan so if you run it then again it comes hey client and want to send more data and if you see the server then you get okay received from the so as you see here the interaction between uh client as well as server it is in a local machine both the program is running in a local machine that's why I'm using the user uses this uh local IP address but you can do this and also you are able to play with this program so try this program and experiment with this program we are going to work on UDP socket before going to the coding part let's understood the client server interaction diagram of UDP socket as we have seen in the basic of networking tag UDP is connectionless protocol right that is the client does not form a connection with the server like in TCP and instead just it sends a datagram and the server did not accept a connection and it just waits for data grab to arrive and datagram contains the address of sender which the server used to send the data to the correct client we also know that UTP does not check for error in the exchanged diagram right so that's why it gives that is why it gives very fast communication now as you see in the interaction diagram it is very similar to TCP but there are various major changes in UDP after creating a socket object in UDP after creating a socket object the server process bind that socket to a particular IP address and port number after successful winding the server process will start waiting until datagram packet arrive from client in TCP we have seen the concept of listen and accept which makes the TCP connection oriented protocol but in UDP there is no such thing that's why it is a connectionless protocol now after binding the client server enters into the request response and finite Loop when the client process finishes it exits from the exit by closing down the connection and at that moment the server process probably goes back to the waiting state I am again repeating here that the this interaction diagram is a very simplified representation of the actual reality in practice any production server processor has multiple threads or sub processes to handle concurrent connection from thousands of client over respective virtual channels now let's jump to the coding part I am using pycharm IDE for coding let's create UDP server first as we all now know that first we have to import the socket module now let's create socket object so socket sock is equal to socket dot socket here we have to pass an argument to argument in this the first argument we all know is socket dot AF underscore init which belongs to ipv for family and the second argument we have to pass here is Socket dot sock underscore D Raw here means that the connection lists UDP protocol as we have seen in the interaction diagram we now have to bind the socket with IP address and port number so there is a method called bind as we have seen already here in bind we have to pass to our one Tuple and the Tuple consisting of IP address and port number here again as an in previous lecture I am providing localhost and port number is nothing but 127.0.0.1 and port number let's suppose one two three four five okay now let's write in finite Loop for sending and receiving data so while true for sending the data usually to send the data using UDP protocol we use rdcv from method of socket module so rdcv from returns to thin that is data as well as address that is very important Point here so let's write first the data comma address is equal to Sock Dot rdcv from now in TCP here why we are not using rdcv method which we have used in TCP because in TCP once the connection gets established the address information does not change right but in another another hand in UDP UDP is a connectionless protocol so here we have to also receive the address so that we want to send the data back so that's why in racv from there are two things data as well as address but in recb method we only have data part because the connection is established here the connection is not established if you want to send back the data to the correct client we want address as well right and in rdcv from we have to pass an integer and this integer represent the number of byte you want to accept so here we are trying to provide Enough by to cover the entire message because we have seen in the background of networking that the packet of UDP message should be equal to the message the message size of the UDP should be equal to the packet side right so here we are trying to provide enough uh bytes so let's I am providing here let's say 4096 bytes now let's say we have to also send the data to the client so let's define messages hello IM udb server here there are also one important point is here we use send to Method here for the UDP the logic is same why we are using another method because we have to send the data to a particular address and in UDP there is no connection established that's why we have to specifically provide the address so that's why there is another method sent to so let's write sock dot send to its take to argument one is message and another one is address and also let's print the data that we have received from the client from that is received from let's print the data print data okay now and also the masses should be in bytes here it is in a string but we have to send the message should be invite so let's convert into bytes so bytes of hello okay and also we have to encode this message right so dot in code in utf8 history okay no now let's write a simple client program which is able to interact with this server program all things are similar somewhat similar so I am copying from the server program up to this part right now I want to send a message to the server so let's define a message hello UDP server again we know to send message here we have to provide we have to use send to Method so client underscore socket dot send to and we have to encode the message as we all know into utf8 and we have to forward this we have to send the message into the localhost the address so I am providing 127.0.0.1 and the port number is one two three four five right and also if the server send so we have to receive that so data comma address is equal to client underscore socket dot receive from and also here I'm providing 4096. and let's say print server says and again print the data so print Str data and after that we have to close the connection now let's run the code so first we will run the code of the server and now let's run the code of the client as you see here it says hello I am a UDP server and now if we go to the server output we will see it prints hello UDP server so in this lecture we have seen the message successfully receive and send between the server and the client and we also able to get a knowledge about how UDP socket works till now we have completed up to working with UDP socket today we will going to see handling with handling multiple connection between client and server we have worked with TCP and UDP client server program in the previous lecture the this uh client server program have many limitations like as we have seen that server only serves one client and then exit right and the same limitation is of client also and also there is an one additional problem in the previous client server program that when the client call method which res dot we have seen receive method then it is possible that the receive method will only return one byte that is as we have seen that we are passing argument one zero two four right so as we have seen uh one zero to four is the buffer size argument which is the maximum amount of data to be received at once that means it does not means that the receive method will return exactly one zero to forward it is a maximum amount of white right and also send also behave this way OK the same way send method send Returns the number of bytes sent which may be less than the size of data passed in so it means that we are responsible for checking this and calling send as many as time as needed to send all the data so if we summarize the then we have two problem at this point the first one is how do we handle multiple client connections correct concurrently and the second one is uh that we need to call send and receive until all the data is sent or received right so in this lecture we are going to deal with these problems so what can we do to solve this problem so to solve the problem of concurrency there are many approaches as we all know that the traditional choice is to use thread to deal concurrency right and the mode recently a popular approach is to use asynchronous IO okay it is uh made basically inter introduced as a standard library in Python 3.4 to deal with concurrency let's see the traditional method first that is we will see the handling multiple connect connections using thread module in Python I hope you all know about threading we will going to write code of multithreading server which can work with multiple clients so we will write the code of one multithreaded server and two client in this set of lectures so let's start coding open your IDE firstly I am going to write the server program multi 3D server program and I am using pycharm form coding okay so as we all know now that first we have to import the socket module of python so import socket and also here we have to import another module that is thread library for multithreading so all right from underscore thread import Star so I have imported all the method now let's create a socket object using socket method of socket Library so server socket is equal to socket dot socket right let's declare host and port on which we need to communicate with client so let's declare some variable so host is equal to let's say I am going to connect uh 127 that is local machine that 127.0.0.1 and Port say which is in the range uh we already know so let's say one two three three yeah and also we have to declare one more variable that is a thread count which tracks the number of thread running we will see what this variable is used let's first declare so thread count is equal to zero okay now let's bind the host and port to the socket server we created ever in the program so if it binds successfully then it start waiting for the client otherwise it just returned the error that occurred while establishing a connection we have seen this in the previous lecture so I hope you are all able to understand this concept very easily so try and we are going to write in the try and accept block right so try server socket dot bind host comma port and except we will print error if any error occurred so accept socket Dot error as e print that error E and now let's start listening so server socket Dot listen and here we have seen that we have to pass some argument so let's say five and here let's say I am printing here waiting for connections okay now here we need to support handling multiple clients or thread at the same time simultaneously so for that we need to create a function that handles requit from Individual client by a thread right so let's define a new function named client let's say client underscore thread which connect to each individual current client on different addresses given by the server all right so in this function we are going to use receive function to get data from each client independently and then we will simply return the reply to the particular client with the same message right with a string connected says hello I am server in the beginning right so let's write this function we have already seen the use of receive method and send method in the previous lecture so so to do write this function we have to receive to do this uh reply and send this event send we have to you we have to take a argument a connection object right so such that it is able to send and receive the data from the client so let's define in such a way like this so Define client underscore thread and here I have to accept an object so connection and now let's say I'm going to send so connection dot send and suppose I am going to send a welcome to the server to the client so Str dot encode and message is welcome to the server now uh now let's uh start uh and finite Loop in that infinite Loop we are going to uh receiver data from a client in this infinite Loop so data is equal to connection dot or rdcv method here I am passing 2048 this is the maximum byte which it can receive and let's say I have to also reply to that client so reply is equal to hello IM server and then I am passing the same hello M server and data dot which I have received the data I am again forwarding it again sending that data so Plus data dot decode and we have already seen this and we have to decode into utf8 string format now if not data then we have to break this infinite Loop so if not data break and we have to send this reply to the servers through sorry to the client so connection Dot and here we are using send all function which try to send all the reply or to the client so connection dot send all Str dot encode here I am passing reply and and lastly we have to close the connection so connection Dot close these things we have already seen in the previous lecture so if you are facing any problem here how I have done all this thing so please refer to the previous lecture and again come to this video and we're going to start from here so now we have to now accept the client socket connection right so since run server runs all the time which means that we don't want to make that our server got stopped right so for that we need to use again the infinite while loop to make it run server endlessly until we manually stop the server so let's write a infinite Loop while true here I am accepting the connection so client comma address as we already know that accept method gives to returns two things that is a client object and address and address contains uh i p address as well as port number so let's also print it out so print connected to address 0 that is IP address and address one which is port number so I have to convert into string so Str address 1 okay now here there is a difference so here I have to call start new thread function right to generate a new thread here we have to pass that function which we have defined that threaded client and that client object which we have to pass in that function okay right so we have a client object as well as a function which we have to generate a new thread so let's pass it and after generating new thread we have to increment the increment the thread count so thread count plus is equal to 1. and here we are printing the thread count how many thread is running so let's print it also so print thread number plus Str thread count right and right yeah and after that we have to just close this connection of the server socket so server socket Dot close right so now we have completed the multithreaded server socket so program so in the previous lecture we had seen the code of multithreaded server which accept or handle multiple clients simultaneously now in this video we are going to see client program and we will also see the interaction between multithreaded server and the two clients so when multiple clients can connect to the server and each time a client connect to a corresponding thread which is created for handling client requests so let's write the source code for the client side so that the client can connect to the multithreaded server so open up your ID and I am using pycharm here for coding firstly as we all know that we have to import socket module of python so let's import socket now let's create client socket object so client socket is equal to socket dot socket right now what we need is to assign same host and port number to the client as we defined in the server right if otherwise it will not able to make the connection between server and the client as we have already seen in the previous to previous lectures so let's copy from there so let's copy from the server so host is as we know host is a 127.0.0.1 and Port is let's say one two three three which is in the valid range now we want to set up a connection right so we use connect method of python socket Library we have already seen that connect method establishes a connection with the server using host and the port number right so let's uh and we know that this always we in a try and catch block try and accept block sorry so try client socket dot connect and here we have to pass the Tuple so host comma Port okay and if it is not able to connect then it will print an error so accept socket dot error as e print Str of e and also yeah here we I am writing a print waiting for connection okay here so now what we want is to make sure that client keeps running as the server is running right so for that we need to use a infinite while loop huh so let's say while true and also let's provide input option to the client so that it can send data back to the server and along with this we also use receive function to receive the data from the server side right so let's put all these things into this infinite Loop so let's input is equal to input let's say say something right I am taking an input from the user and let's send this so client socket dot send and here we have to encode Str dot encode here I have to pass input right and also let's take a response from the server so response is equal to client socket dot receive here I am passing maximum brightness 1024 and also I am printing the response here so print response 30 code utf8 right and also let's remember that remember that uh from the server side we are passing welcome to the server so let's also print out outside of the infinite look so that we are also able to print that message also so let's print it here response is equal to client socket dot receive one zero two four maximum byte right and here let's say print response dot decode utf8 yeah so yeah now the code is completed so let's run the code so firstly we have to run the server and as you see here that let's let's run the code right and let's run the code and firstly we have to run the server code so let's run it so after running server code let's see as you see here that it says print waiting for connection now now let's run the client code yeah client code runs successfully as you see here the output we are getting is waiting for new connection okay and yeah welcome to the server and it is saying say something again let's see the server output again so as you see here it is saying that connected to this specified IP address and port and here says you see that it prints thread count is equal to one so yeah first client is successfully connected to the server now let's again come back to the client output and here I am giving input as hello server so yeah so we get the output as hello I am server hello server so yeah it is working fine and we are successfully interacting with the multithreaded server so let's see it's support multipliant or not so again I am making one more client I am not going to write the whole code again just copying the code of the client and this client and paste it in another another file so let's run so let's do this okay yeah so let's run this second client so yeah so let's see the output of the server again so as you see here that throughout thread count becomes 2 right so connection it means that connection gets stabbed with the second client also here you see connected to and this this IP address and port number so yeah server is able to interact with the multiple client so we have successfully designed the multiple threaded server as well as multi clients two clients so I hope you all enjoyed the lecture series of python socket programming and your level to understand this lecture so thank you very much guys thank you