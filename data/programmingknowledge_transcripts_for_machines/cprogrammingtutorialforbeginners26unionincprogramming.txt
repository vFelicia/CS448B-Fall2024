hey what's up guys welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're gonna learn how to use unions inside our C program so from the previous tutorial we learn how to define and use structure and then we also implemented different methods or different functions that we could use whenever we are working with structure right so at this point in time we will be learning how to use Union also so basically Union and structure is almost the same but there's a significant difference that we will discuss later on so the thing about strap is or the thing about structure is that we can store different data types in different memory location but when we say Union we can store different data types in the same memory location so that being said if we try to define Union a Union is a special data type available in C that will allow us to store different data types in this in the same memory location so you can define a Union with many members but only one member can contain a value at any given time that's because we store the data inside the same memory location so in other words all the members of the Union share the same memory location that's why every time we set a value to a particular member of the Union other values will be over will be erased and then replaced with the new value of a particular member so define a Union you must use the Union statement so from the previous tutorial we use truck for this structure but in the case of defining a Union we will define a Union by using the Union statement in the same way as you while defining the structure and the Union statement defines a new data type with more than one member for your program so basically it looks like this but instead of a strap you're gonna use Union okay so that's Union and then of course the name of your Union for example data right there and then you have to add open and close curly braces that signifies that all the variable inside these curly braces is a member of the Union data okay and then of course you can define the members here so the same thing with our structure so that being said we can say here in I okay and then we could also float F and that's a for example char STR and basically for example to learn for this is like 10 okay so let me show you first how this particular Union works so the Union tag is optional actually and each member definition is a normal variable definition so such as I or int i or flow F or any other valid variable definition and at the end of the union's definition before the finals and Colin you can specify one or more Union variables but it's but it is optional so you can also say here the name of your Union is like data okay so you can refer to this data and then you can now you now have the access to the members of your you by using this reference okay now a variable of data pipe can store integer float or string of characters so it means a single variable and then same memory allocation can be used to store multiple types of data so you can use any builtin or insert defined data types inside a union based on your requirement so it depends on you so the memory occupied by the Union will be large enough to hold the largest member of the Union so for example in this particular code data type will occupy 20 by or I mean 10 bytes of memory space because this is the maximum space which can be occupied by a character string now we can display the values of this Union it's a very sample we try to display all the I mean any value coming from this Union so at first we could you know refer to the members by using this reference so data that and then we could say here I then we could initialize this value into for example five like that and then we could print the value of I so here we can say the value of I yes and then of course we need to have the format specifier for our I okay so D and then we could add also the new line and then comma and then of course data that I okay and then semicolon so let's try to run our program so basically let's hope that we won't have problems so build in run program and as you can see here the value of I is five so we were able to set the value of our data I member and initialize it to five now take a look at this for example we set the value of float into a something into some value for example data that F equals two for example let's say 22 or maybe like 8 okay and then we could try to maybe add eight point five here just to make sure that it is time like float value so we set the value of our F into eight point five so we could you know build and run our application and as you can see here we're getting the value of I is something like this okay so the value of I is something like this that's because the value has been you know corrupted when we try to set the member F into something like eight point five and as you can probably remember that the members of the Union shared the same memory location so that's why if we try to change the value of a certain member then it will override the value of the other member so that's why it's somehow corrupted our value of I here and we're getting this random number like this but the purpose of using Union actually is to have a some sort of a value at a certain point of time so for example if we want to make use of the Union we could try to display the value of AI right here after the initialization so the value of IAS and then we're getting the value of AI member here and then also if we wanted you know display the value of the float F value or remember from this Union then we could what we could do here is change this into F that's the formal specifier for a float value and then we could say here the we want to display the member F from the data Union so we could actually get the correct value right after this so let's try to run this so build and run our application and as you can see here the that we're getting the value of our I is 5 so let's change this instead of I this is member F and this is member high because this is a member of this union so let's build and run our application and we're getting this output the value of member I is equal to 5 and then the value of member F is equal to 8 point 5 so that's basically the correct value that we're getting or we're setting here in our main function ok so I think that's all there is to it for this tutorial and a sort as a sort of summary or review we have learned how to use Union inside our C program and then we learn that we can store different data types in the same memory location by using this Union keyword and then store different variables with different data types and yeah we also set and initialize the value of the members of our Union and then also display the values individually right here in our C program so again that's all there is to it guys and if you have questions please let us know in the comment section below and thank you again for watching and see you in the next video