now in this video I'm going to talk to you about loops that's the most basic type of loop in C++ so let's see how we can declare for loop and how we can use poly so for the declaration of for loop the declaration syntax looks like this so what you do is you'd write for and just give these two parentheses and this for takes three parameter first is the initialization and then it is separated by semicolon second is the condition and third is the increment okay and in this curly braces you provide the code you want to execute according to the condition we just met in the loop so let's take an example I'm going to declare a loop so I will write here for and I will give these two brackets and I when you give these two curly braces which is the basic syntax of POD now I'm going to declare the initialization for so for example I will take integer int I is equal to 1 then I will separate it by semicolon then I will give the condition so for example I want to give the condition loop till my condition reaches 10 for example so I is less than or equal to 10 okay and then the third condition is the increment so I will give semicolon once again and I will you get should say I plus plus so this means that we are increment I buy one this is just like saying that I is equal to I plus one okay so this is this and this is same so it'd be our incrementing I by one every time it sees the condition oh it's less than ten still it increase the I by one now we will output our variable I so I will say C out I and once again en DL okay now I will build the program and let's see what happens I'll run the program and you see what happens here is it's looping so it goes to the for loop and it initializes I is equal to 1 and if it goes into the execution of for loop and in it prints 1 and once again it goes back to for loop and increment it by 1 right so what's happening I is equal to 1 it prints it it increments it by one goes to the loop once again now this time I is equal to 2 and it sees condition which is less than 10 2 is less than 10 then it prints 2 once again an increment I by 1 which is I is equal to 3 goes to the conditions condition once again and it sees yes I is equal to 3 is less than 10 so it prints 3 once again and this loop happens until 10 is printed and then it goes to the loop once again and sees ok now I is equal to 11 which is not fulfilling this condition I is less than or equal to 10 so I am NOT going to print this and I am going to break the for loop and I'm going to go out of the loop and return 0 so this is printing this these values of I one by one until this condition is met okay now there is one more thing you can do with the the for loop is to decrement the value it's not necessary that you need to increment the value every time and it's also not necessary to in crete increase the value by one you can increase the value by two or you can initialize the value by something else so let's see let's initialize I by some other value for example six and I will say the condition would be I is less than or equal to 60 for example and I will increase this I by five so I will write I plus equal to 5 that means increment the value of I by 5 and assign it to I okay so once again when I build my program and run it you can see it's showing me 6 for the first time and increase this 6 by 5 so 6 plus 5 is 11 and then it sees the condition okay 11 is less than 60 so I'm going to increase it 5 once again then 16 is less than 60 so I am going to increase it by PI 1 again so in this way you can initialize your I by any value and you can increment this I by any value and you can give any condition which can be equal to equal to or which can be less than or greater than or whatever value the second thing is you can decrement the value of I also so let me show you this example also so for example I initialize I is equal to 10 and I want that I should print until I is greater than or equal to 1 equal to 1 okay and I will decree in 2 I by 1 every time so I will say and this is just like I is equal to I minus 1 ok just like I I is it is just like you the value of I by money right so now what will happen let's see let's build the program and run it and you can see this time I start from 10 because we initialize the value of I as 10 so it prints then and it goes to Lu once again and it sees ok I is equal to 9 this time because we minus 10 by 1 which is 9 so I is equal to 9 which is still greater than or equal to 1 so I will print it once again 9 and once again this loop will happen and happen until one is reached and the condition will be false then right so in this way you can use for loop in 3 plus plus so I am going to explain you something about increment operator and assignment operator so let's get started first of all I will explain you how assignment operation works so let's take an example and I will declare an integer X this is equal to 25 and I'm going to print it very simple stop Thanks okay now for example I want to add to this value at some more value to this value I have shown you that you can do it like this X is equal to X plus 5 for example and what did you do is 3 take the value of x and add 5 to it and place it into X once again right so let's filled it and run it and it will show us 30 but the more efficient way to do this is because you are using X 2 times you can just reduce this by writing it something like this okay so X plus is equal to 5 which will just serve the same purpose as before if you add 5 to our variable which is X and then save it into the same variable once again I will run the program and answer the same and you can do this assignment operation with multiplication subtraction division or you can take a modular so I will show you one by one first of all so what it will do is he'll take X and subtract 5 from it and we'll show the result we'll save that it will in this X and show the result here right so run the program until it shows 20 same is with Co dot or multiplication you just give f6 it will multiply applied 25 by 5 just run the program and you see 125 and you can do it with the division also but remember it doesn't show the remainder only the multiplication value or multiple values right so in this case it will show 5 because we don't have any remainder but if you divide 25.4 still let's see what it gives us six and it doesn't show us the remainder in order to show the remainder you need to give this module sign and then it will just show you the remainder it is one right so it shows the remainder one now this is about assignment operation now I have also told you about increment operation in the for loop tutorial so for example you want to increment one or add one to the variable X then you can do it like this X plus plus and what you'll do it will add one to our variable X and print it here right now let me show you a phenomena of how you can use this in two different ways so what I'm going to do is I'm just going to copy this and paste it here once again and what I'm going to do is I will increment X by o1 here just delete this and then I will show the value of X right and both I'm printing let's see what happens and you see what's happening here is it's even though we are increasing the value of x by one but it's showing 25 first and then 26 so this phenomena is happening because we are adding this plus plus after our X okay so what will happen is it will your C++ code will print the value of X first and then add one to it and then when you print X to the second time that will show the ID addition values of 26 it will show here but for example you want to add 1 or add this one before showing the value what what you need to do is you just need to add this plus plus before this X now it will what it will do is it will add one to X first and then print this value and this will be the same so let's see what happens now just close our program and build it on it and you can see now this is 26 26 so it takes the value of X increment it and then prints it so this is the difference between this prefix of plus plus and trailing plus plus right just remember if you want to intrument the value first add these pluses in the front and if you want to increment the value after showing the value then you just add it after plus plus same rule will be true for so when you do this X X my X minus here and when you run the program it will still show you the value 25 because the subtraction is not happened here but it it's happened after the execution of this so in the next line then you can see 24 in the next line and when you add this minus minus in front then your when you is subtracted first so 1 is subtracted from the X and then it prints 24 and then 24 so this is all about all the basics about assignment operator and increment operator no I'm going to show you how to use while you in C++ so while loop is other kind of few other than for loop in which I have already shown you in the last videos so let's see how we can use while loop so the syntax of while loop is while and you give this curly or parentheses and then you give these curly braces okay this is the syntax of while loop and what this while loop does is it moves around the condition until and unless the condition is met so let me show you an example I will take integer called X is equal to 1 for example and I will say while X is less than or equal to 5 then print some value so I will stay C out and X and line and now when I run this program and see what happens so when I run this program you can see there are so many values printing one after another so this is because our while loop is executing so because we have given this condition that X should be less than and equal to so while this condition is true X will be printed otherwise X will not be printed so let's give some logical logic to this while loop so I will say thanks' plus plus so that increment the value of x by 1 so once again when you compile and run the program that will print two three four five six right because what it's doing is it's going in because we initialize X by one it will go to the loop and it sees X is less than one and then it increases or increments the value of x by 1 which is 1 plus 1 F 2 so it's it prints 2 here using this statement and once again loops around this loop and C is 2 is still less than or equal to 5 and then it increments the value by 1 and it prints it and once again it loops around and it checks the condition and once and again when it sees that X the value of x at time of 6 is less than or equal to this is not this condition is not fulfilled then it goes out of the loop and returns 0 so this is how you can use by loop let me show you a better example than this so let's say you have number some number we declare my number F number is equal to 0 because I initialized this number by 0 you know the twentyminute any car values and I will also declare a third variable called sum okay and that also I initialize by 0 now I want to input I want that in user should input the value so I will say C out input any value and I will find this line and then I will say see in so I will wait for the user to enter the value and this scene will be stored in the variable number okay then I want to add all the numbers so I will say sum is equal to sum plus number okay so what it will do is it will give or it will take the value and make the sum of these numbers unless and until I don't I mean this obey this condition which is X is equal to a less than five right so I will say this condition and I will print the sum here I will say the sum the sum is equal to and once again sum which is our variable name okay so this loop will ask five times to enter the values and once this values are entered by the user then it will take the sum of the values and it will print it here or otherwise you can show this sum outside the loop so that you have the sum only once but no not five or six times let's try and run this program once again and it says input any value I will enter ten once again it's asking me input any value twenty once again 30 40 and 50 and press ENTER and it says me the sum is 150 right this should be equal to that's why it's showing us a plus sign here but this should be ideally equal to so in this way you can take the sum of the values using while loop okay or otherwise if you want while you two never end you can give some condition which will never be fulfilled for example you can just write something like this while one so this while one generally programmers use it to make an infinite you just compile the program and run it and it says please enter any values and we keep on entering values and you never end because this one or whine one is never ending you so I will never go out of this loop okay so I will keep on entering the value and it will never end so if you want to make infinite loop just make it like this otherwise just make a loop which helps when some condition and loop can exit when that condition is met okay now in this video I'm going to show you how to use dowhile loop in c++ so what is the basic difference between while loop and dowhile loop the basic difference between two while loop and while loop is while loop if the condition is false and if the condition is not met it will not execute but the dowhile loop it will execute the at least once even if the condition is not true so let me show you the demonstration this is the code I have written in the last video there's a simple code in which I have X is equal to one number equal to zero ends sum is equal to zero I have an inch like three variables and in the while loop I am checking whether the value of x is less than or equal to five and if it's less than or equal to five I ask the user to enter some number and I make the sum of these number and once the condition is fulfilled and user has entered the value 5 times in the wine loop then I print the sum so if you don't remember you see the last video it's very simple so let's say I want to convert this into the dowhile loop so for example let's take an example of while loop first so what this is doing is when the condition is true it's printing a message but the if condition is not true for example X is less than 1 which is not true X is equal to 1 so which is not less than 1 this will not pray execute the best code will not be executed and the sum will remain 0 because we have initialized the sum as 0 so let's build it and run the program and you see the sum is 0 and this is never executed right now for example if we write the same code with dowhile loop what is the syntax of dowhile loop is just cut this while loop from here and paste it after this curly braces and just try to do above this is the syntax of qi loop and do not forget to give this semicolon here so this is the simple syntax of dowhile loop okay so now even if the condition is false our program is will be executed once because it says do this while this condition is met so it will be executed once and then the program will check ok this condition will not met so once again it will not be you or it will not execute the same so let's run the program once again or the program once again and run it and you see the program is executed in put any value with your fist so it goes inside the loop and I give any value 56 and press Enter so it gives me the sum 56 right so that means the program is executed at least one even if the condition is not really true so this is the basic difference between dowhile loop so I hope you have enjoyed this video please rate comment and subscribe and bye for now