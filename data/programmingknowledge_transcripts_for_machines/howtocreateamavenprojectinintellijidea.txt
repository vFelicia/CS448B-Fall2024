hello and welcome back to the new video of the maven tutorial Series so till now we have covered the theoretical section of these uh cache course and now from this video onwards we will uh be actually doing some coding uh stuff inside our IDE and as I told you uh these today today's IDE comes with the inbuilt uh Maven implementation Maven support so you can use any of the IDE like the IntelliJ IDE vs code IDE but if you ask me I would prefer you IntelliJ IDEA because it is uh developed by jet Brands which is one of the popular company and I personally like IntelliJ IDEA if if I am doing some uh stuff related projects using Java okay so uh I would also suggest you to download the IntelliJ IDEA if you are following me and if you are if you want to follow this course okay so I'm assuming that you are you have already downloaded IntelliJ IDEA if not let me just quickly give you uh over you how you can download it just come here and write download IntelliJ IDEA if you hit enter first link comes from jetband itself just click on it and you will get to the IntelliJ IDEA download page uh now according to your operating system you can choose anywhere either Windows Mac OS Linux and I am currently now I am using Windows 11 that's why I will click on Windows and there are two editions of this IDE one is Ultimate one and one is Community Edition uh so I will download the Community Edition because it is the free one and open source also and but the ultimate one is the you get more features and 30day trial trial also so if you want you can download but it is paid I want you can compare all these uh features that you get in a paid one and a free one also so go ahead and click on download exe file or zip file whatever you want it will start download it is around 700 MB uh it depends upon your download speed it will get downloaded and just go ahead and click next next your IDE will get installed in your system okay I will doing cancel because I have downloaded already okay so assuming that you have downloaded this idea and if you if you want to follow along this code let's get let's go in our IDE and create our first Maven project okay all right let's go so I will come into my IDE first time if you are opening this you will see one window like this and there are no project here because since I work working along Java so there are some Java budgets also in kotlin budgets also so ignore this one you just click on uh projects tab click on new project and you just have to name your project right so I will write my first mavin app I'll adjust my first Maven okay so uh select the location uh wherever you want to store this project so I generate paper I will just go ahead into my desktop I will create one folder name as maven and inside that I will store my project okay you can choose anywhere anywhere you want uh so the language of this development is Java build system is a maven remember build system to say selected as Maven uh and because we are working with Maven itself and we need jdk so here uh whatever jdks which are installed in your system it will show all those jdk over here select whatever jdk you want I will go with the latest one 19 and if if there is no jdk listed over here you can just go ahead and download the jdk and if there is any jdk downloaded install downloaded and installed in your PC already just go ahead and add jdk folder and give the path to the IntelliJ IDEA where your jdk resides okay I will just go with 19 add sample code Okay add one settings uh I don't need anything okay and I will just hit create all right it is working like let it finish it will download the plugins which are required for the maven project to run it is downloading here you can see the background task I will show you waiting for Maven import completion and I'm having plugins will get downloaded Okay so but if you are running this first time it will take time some time let it be uh by the time I will give you the IDE over you if you are using first time uh so this is how the IntelliJ IDEA looks like uh here you have the project tab where all those uh directories are listed over here in a such a beautiful manner you can switch a switch between this idea Java or and here's our main file main domain.java file where uh our Java code is written just a simple hello world which is given by IntelliJ IDEA itself just to quick start our the development process and here is a project tab you can hide and unite is so that you can get the more view of this your file and after that uh one more is one more thing is here you can see Maven Maven tab is there if you click on it it will show you all those life cycles uh and the life cycles I hope you watched the previous video where we have discussed all those like uh build life cycles clean validate compile test and I have given you the theoretical knowledge of that these all these life cycles also you can come and I will show you how to use this tab also uh but first I guess yeah it's over and plugins also here you can see clean compiler deploy install jar all this plugins are also there we will have separate plugins video okay now uh I guess the processing is done yeah our project is ready to go and what we have done uh is we have created our first project now we have to understand the dependencies okay so I hope you watched the previous video uh where I discuss about how to add these dependencies and how dependent dependencies looks like what are the types of dependencies okay so let's go and create our first dependencies so if you recall uh I have told you that to create independencies how to manage the dependencies or you have one file called palm.xml okay so this is our Maven project you can see we have one pom.xml file just double click on it it will open that form.xml file so since this is a file extension is dot XML so extreme XML files contains the tags okay so these are the tags so so the parent tag is the project one so under which all these uh tags are written so our parent tag is Project under which model version is there uh this is XML scheme namespace schemas which are written on in the web itself if you go go on this site you can found all the schemas and group ID is there artifact ID for our project artifact ID is the project name itself and version is given by the intelligida itself okay and some properties of our project all right this is the file which is generated by the integration idea and given to us so now if I want to create some dependencies in my project how can I add dependencies over here okay so you see uh you just have to wait a second okay so now if you want to create some dependencies inside this so there are many ways to create the differential one way is straightforward you can you just go here and write dependencies so it will create the dependencies tag and uh after that uh and one thing uh we have the dependencies as our parent tag inside which all those dependencies reside is here as you can see dependencies is the parent tag under which dependency tag is there so we have to write the dependency type okay we write dependence C okay and uh the thing because I love Italian idea is this it will automatically give me the group ID and artifact ID that I want to enter so let's enter uh let's create the spring framework uh dependency for our project I will write at a artifact ID as spring slash spring sprayng spring slash code okay uh Let It Be uh the version where you use this okay I am getting error dependency okay fine uh so you see this is the one way you can create the dependencies you you just you just need to go ahead and write start writing in this uh like if I write J unit uh that is one word uh dependencies uh wait wait let me clear this out so that it is get that we are writing this for the first time okay J junit dependency this is our this is over there yes so I have I have already added junit dependency in my project okay so this is the one way you can add the dependencies but here you have to uh know the name of that artifact uh article ID means the dependency name to be precise and again the rest rest of the things is easy it will automatically ship the cursor to the group ID and come to the version and it would automatically add the scope here you can see I have not written the scope tag into it has automatically added the scope telling that uh that please use this junit dependencies for my project uh when to use in the test phase because J unit is the testing uh a related Library Auto Tool okay so here you can see we have created one dependencies so now I will give you one another way how you can add the dependencies right so if you go to the uh this code if you go into generate and it will if you go to the manage a dependency template uh okay so it will give you the dependency template I don't know the template I just need uh wait a second manage dependencies okay so nothing to show I guess we do it okay so add dependency button is there if you click on it uh it will show you the this tab so our project name is there my first Maven and only stable and now here here you can see the search button is search bar is there you can search any framework that you want in your project over here you just need to write spring if you want to use spring in your project and one more thing uh these all implementation are done by the ID IntelliJ IDEA you don't have to worry about it you just go ahead and search the dependency name and again if you want to search any dependencies uh you just need to go and go to the maven Repository repository here you can see all these dependencies you can see uh any dependencies that you want to search you just go here and light spring okay and hit search Spring contact spring core all the dependencies will come and these uh IntelliJ IDEA is integrated this functionality inside their IDE so that you can come here and write the spring and get that spring if you want the spring uh you can again you can select the scope of this I Integrity has given me the scope to compile so I will set it as compile and again you have version you if you you want to use the previous version you can go ahead and use previous version also I will go with the latest one or the IntelliJ IDEA that uh provided me and if I want this spring I have selected the version I am good to go and I will just click on ADD so after I click on add this dependencies you can see these two tags are being added inside my uh palm.xml file okay so now uh if this is the two way by which you can add the dependencies right so if I go into inside my Maven and if I go inside my life cycle and I will just click on install okay it will run my uh maving command and you can see it it's giving me the error I guess could not find the artifact okay so J unit uh is not found I have to use that okay okay okay wait a minute so I will just remove this dependencies I guess right Let It Be layer okay so it doesn't find my dependency of that junit okay I will click on install again now you can see there is no folder right it will here you can see process finished with exit code 1 our build failure why so I'm getting the errors oh okay okay okay wait a minute guys okay to rerun the maven using okay okay for more information wait a minute guys I will be back dependencies so that doesn't work for that let me just add one more dependencies so that you can uh get what I'm trying to tell you J unit I will add the dependency of the J unit itself uh let me go ahead and add okay it's getting added okay so okay fine now uh you can see uh inside my this root folder uh previously there are two two or two folders okay life cycle and plugin only but as soon as I create this J unit dependencies and and my reload and I reload my Maven project it will it has created one more folder named dependencies inside which uh junit dependencies there okay so you can see as I as I added J unit dependencies over here you can see j18 dependencies also added my memory deposit direct folder directory structure and if I uh now if I go ahead and insert my life cycle and click on install uh it should go ahead and get this dependency and install it and yes build success Target project is also created a Target folder is also created we'll see what is Target we have a separate video on this uh what are the classes and how the this actual works we'll see but for this video I hope you got some idea about this form.xml file how to add dependencies now one more thing if you want to delete the dependency if you are just going inside this dependencies tab and uh in future you want to delete this dependencies you no more required J unit inside your project you just go ahead and come here J unit you click on the junit uh you you come over three three dots and you have the remove you can remove and as soon as you click on this you just have to come here and load mapping changes it will reload your project and see all the any dependencies got added or removed if this dependency as soon as I load my project that dependencies folder is gone because no more dependencies are required for our project okay as soon as you add no dependencies new dependencies folder will get created over here so I hope you got some idea how to add or manage the dependencies inside the IntelliJ IDEA and what is form.xml file and we'll continue this project we'll create one Java project and uh I'll see you in one live demonstration of when by creating one project using Maven okay so thank you for watching this video and I will see you in the next one