hey guys welcome to this course on node.js tutorial for beginners and in this video i'm going to give you a brief introduction about node.js so why we use node.js what is node.js what are its advantages and why node.js is so popular these days for building backend server side applications so let's start with an introduction about node.js so node.js is an open source crossplatform serverside javascript framework which you can use to develop backend applications or commandline applications and there are many other uses of node.js so node.js was created by a developer called rian dell in 2009 and the development and maintenance of node.js was sponsored by a company called joint who was an employer of rhian dell now node.js is mit licensed so as i said it's a crossplatform open source application which you can use and node.js is based on google v8 engine this we will see in detail what is v8 engine and why v8 engine was used for the node.js development now nodejs is available on variety of platforms like windows linux and mac os and other type of operating systems so you can develop node.js application on any kind of operating system but if i talk about my experience 95 to 98 of node.js applications run on linux or linux based operating systems so this is the real world scenario but for learning you can use any operating system of your choice so the goal of node.js is to provide an easy way to build scalable network programs on server side now in its initial days node.js was adopted by some big companies like paypal linkedin yahoo walmart and uber and these companies found out that if they compare uh node.js with ruby on rails which was very popular at that time they were able to cut their servers from 30 to 3 and they were able to run their node.js applications 20x faster in some scenarios when we compare it to ruby on rails applications and also most of the frontend development was already done in javascript so these companies were able to combine their frontend and backend team because they were able to create frontend and backend applications using the same programming language and because of that fullstack development was possible using the same language for the frontend applications and the backend applications similar advantages were found out when we compare node.js with the java applications which were also very popular at that time and still are popular so now we have some basic understanding of node.js and now let's talk a little bit more about node.js as a framework so node.js is an asynchronous io framework this also we will see in the latest slides what is synchronous versus asynchronous application now the core of node.js is written in c plus plus on top of the v8 engine so node.js is written in c c plus plus and javascript and basically it lets you to run javascript code without a browser before node.js it was only possible to run javascript on the browser now you might ask a question why riandel chose javascript over any other language right there are so many languages but why javascript was chosen and also you might say that javascript is very well integrated with browsers so browser features like dome tree is a part of javascript language but it's not so these kind of browser features are provided by the environment they run on that is browser and these features are not the part of javascript so if we remove all the browser features from javascript we still have a javascript language in which functions are the first class citizens which means that you can pass function around like other variables right also javascript have event model which you might have seen on the front end so this event model is used for the things like on click in the browser so what we need is a tool on which javascript can run on accept for the browser on your native computer and that's where google's v8 engine comes into picture right so node js uses google's v8 javascript engine which is also used by google chrome so v8 basically transforms your javascript code into efficient machine code for your platform and this v8 engine on which your node.js program is going to run it's going to take care of all the memory management and garbage collection for your node.js application so in simple words if you take google's v8 javascript engine and some javascript code you will be able to run your javascript code without the browser so it's very important to note here is node.js is not a web only framework and also node.js is not a programming language node.js is just a javascript framework which runs on your v8 now if you don't know you can google about this uh what are the javascript engines used by famous browsers so for example firefox uses spider monkey safari uses javascript core which is also called as nitro microsoft edge uses chakra javascript engine similarly chrome uses v8 engine so every major browser has its own javascript engine right so node.js uses v8 javascript engine now there is a very interesting question which might arise here which is unfortunately we won't be able to read files from the system or open network connection using javascript only code right so basically you will have no i o or system calls at all when you just use javascript so this is where node.js comes into picture so node.js basically provides three things node.js provides the binding to the native system it runs on it provides the event loop and it provides the tread pool with all these three components we get a platform that supports nonblocking io through asynchronous programming which gives us significantly good performance over a traditional architecture so in this picture you can see the level of abstraction of node.js so on top comes the node.js standard library which is written in javascript and this node.js standard library uses node bindings which are written in c or c plus plus which runs on top of your v8 engine which uses tread pool and event loop so in case if you want to write your own binding for your node.js application node.js provides you this capability so you can directly use c plus to bind your javascript code so you can write your node bindings in c or c plus plus and use it with the node standard library so let's talk about why we use node.js so as i said node.js is nonblocking io so in most of the software systems when you make a system call for example you want to access a file on a disk or for example you want to query a database these calls are blocking this means that program execution will stop and wait for a call to finish and return the result now in case of node node takes a very different approach by serving all request from one single thread so the program code running on this thread is still executed synchronously but every time a system call takes place it will be delegated to the event loop which we talked about right so node.js is single threaded but it has a very powerful concept of event loop that means our main process will not be put to sleep and will continue serving other requests and as soon as the previous system call is complete the event loop will execute a callback function which was passed at the time of this system call so this callback is going to deal with the result returned now don't be intimidated about all these terminology i'm just talking about the architecture of node.js and if you don't even care about this architecture don't worry learning node.js is not very complicated if you do it properly now node.js supports thousands of modules so we talked about the node.js bindings so the community of node.js is very strong so the community member regularly writes these node.js bindings for your node.js standard library so whatever your use case is the possibility is there is a module which is already available for you to use directly and you don't need to write any binding for your standard node library the other advantage is you can use node.js on your windows linux or mac operating system so development becomes very easy and there is one language for your front end and the back end right so you don't have to learn any other language if you just want to stick with javascript for your frontend and the backend you can just use node.js in the backend and in the frontend you can use any other javascript framework and last but not the least node.js has a very active community so for example whatever use case you are thinking about the chances are there is a module already existing for that use case which is developed by the community now let's talk a little bit about nonblocking versus blocking code so as i said whenever you make a system call if you use any other language what it's going to do so here you can see the blocking code example so for example for a blocking i o and for your synchronous programming code your thread is going to wait for the result to come right so if you are reading the file it's going to read the file and then it's going to give the result and then it's going to continue uh inside the tread right but when you use a framework like node.js which is asynchronous and nonblocking i o the main thread don't wait during the i o operation i o means input output operation like reading a file or doing a query inside a database right it goes through with the execution of the code and once the file is read or the i o operation is finished there is something called a callback function which is called which is passed at the time of making this i o call and it becomes possible due to event loop which runs inside your v8 engine so this was an introduction about node.js now if you are a little bit intimidated with the explanation which i gave you don't worry just wait for the next coming videos in which i'm going to sequentially guide you step by step right from the starting in which we are going to see how you can install node.js and how you can write your first program in node.js and then how we can move forward from there so i hope you have liked this video and enjoyed the explanation i will see you in the next video