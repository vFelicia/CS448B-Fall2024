hey guys welcome to the video on numpy tutorial for beginners so first of all what is numpy so numpy is the fundamental package needed for scientific computing with python it is an open source library which contains a powerful and dimensional array object which we will see in the later videos and it also contains basic linear algebra functions basic Fourier transform functions sophisticated random number capabilities and also this library contains tools for integrating with the languages like C and C++ code now this library also contains advanced array slicing methods to select array elements and it also have several convenient array reshaping methods so in other words we can say that numpy is a Python library for array oriented computing besides it's obvious scientific uses numpy can also be used as an efficient multidimensional container for generic data now as I said numpy has a powerful N dimensional array object this object is an N dimensional array of homogeneous data types with many operations being performed in compiled code for performance so this library gives better performance when you use it with array oriented computing now there are several important differences between numpy arrays and the Python standard sequences like lists or tuples which we are going to see in the next video also number arrays have a fixed size modifying the size means creating a new array in numpy additionally numpy arrays must be of the same data type but this can include python object also now the next question you may ask is numpy is suited for what kind of applications so numpy can be used for many applications including image processing signal processing linear algebra and multiple other functionality is included in numpy so it can be used for several other functionalities so it is also said that number is the foundation of the Python scientific stick now you may also ask why do we need numpy so we already have sequences in python such as lists or tuples or many other sequences to handle data with the standard Python library so why do we actually need an umpire so the answer is Python does numerical computations slowly in comparison to numpy so whenever you want to do matrix computation for example you have a matrix of thousand Cross thousand and you want to multiply this matrix then python triple loop takes more than ten minutes in comparison to numpy which only takes around 0.3 seconds so whenever you want to do matrix computation or n dimensional array computation numpy library is more efficient than even the Python standard library and that's why it is used so this was a brief introduction about numpy now how can be installed numpy on our Windows operating system or Mac operating system or Linux operating system so right now I am working on a Windows operating system but the procedure for installing numpy will be the same for Mac or Linux operating system so the basic thing which you need to install numpy library is PIP so if you have pip you will be able to easily install numpy now on Windows whenever you have installed Python on your Windows operating system pip was already installed on your Windows operating system with the installation of Python on other operating systems like Mac and Linux you can install pip and then install numpy using pip now those of you who don't know what is pip pip is a package management system which is used to install and manage software packages written in Python so let's install number using pepper so I'm going to give this command pip and then install and then whatever package you want to install so for example I want to install numpy so I will write number here so pip install numpy and then press Enter which is going to install numpy on my Windows operating system so now you can see the process of installing of numpy library is started by pip so you can see now numpy is installed on my Windows operating system so now I can just go into the Python interpreter so I will just write Python and then press Enter which will allow me to use the numpy library so I'm going to just write import numpy as NP and then press Enter which is going to give me no error if you give this command on your Python interpreter without installing numpy this import is going to give you some kind of error now let me give you a very basic example of converting a normal list into a number I array so let me just create a normal list I'm going to name it as n list which stands for normal list and then I'm going to assign some value to this list so let's add some value here let's say one two three four five and six so there are six elements inside our list and then I'm going to press ENTER now in order to convert this list into the numpy array I'm going to just create one more variable I'm going to say it is a NP array and then I'm going to convert this list into an array so I'm going to use this NP keyboard dot array and then as an argument I'm going to pass my list into this array function so n list is the name of the list and then press Enter and now when I see the content of an array it's going to give me the number array now I can also use print method in order to print the content of NP array so let's do that and you can see it's going to print the content of numpy array now one thing to notice here is that these elements inside this array does not contain comma between these elements because it's a special array which is called ND array and num pies main object is the homogeneous multidimensional array called ND array and this is that kind of array so this was the very basic example of num by now if you have installed anaconda package on your Windows operating system or Mac operating system or Linux operating system you don't need pip to install numpy you can directly import numpy inside your Jupiter notebook or Spyder IDE and start using it now if you want to use numpy on pycharm let me show you how to use numpy on your pycharm i so this is the pycharm IDE and here I have created a blank project which is called numpy samples now in order to add numpy to your project what you need to do is you need to just click on this file option on your PyCharm IDE and then you just need to go to the settings and once the settings window opens what you need to do is you need to go to the project colon whatever is the name of your project so go under project and whatever is the name of your project and then click on project interpreter so I have already clicked on this project interpreter and here you can see pip is there and setup tools is there so here on the right hand side you will see this plus symbol so you just need to click on this plus symbol and once you click on this plus symbol its just search for numpy here so I'm going to search for numpy and then you will be able to see this numpy here and the version which will be installed on your PI chum IDE so on the right hand side you will see the description about numpy and whatever version which will be installed so at the time of making this video one point sixteen point zero will be available for pycharm so I'm going to just click on install package this is going to install the numpy package for this project on your pycharm ide and once you see this green bar here which says package numpy installed successfully you can close this window and then click OK here and now you can create a python file so let me create a very simple python file and inside this python file what i'm going to do is i'm going to just write import numpy as NP and then let's create a list so I'm going to name my list as L is equal to let's add just two elements one comma to here and then in order to convert this list into a number list we just need to use NP dot array and then pass our list to this array function and then you will be able to print the content of NP array using the print function so I'm going to just write and P list inside the print function and let's run this script by just right clicking and just selecting the run whatever file name you have and you will be able to see the output here in that terminal below so this is how you can install numpy on your PyCharm ide so you can use pycharm IDE or anaconda distribution or even you can use your plain terminal in order to develop your numpy script now to go ahead I will be using the pycharm ide but you are free to use any other ide or the editor so in the pycharm ide what i'm going to do first is I'm going to just open the Python console by clicking on this symbol which says python console and i'm going to maximize this console because we will be using this python console for this lesson so we have already added the numpy library to our project and we can import the numpy library to the python console also so I'm going to just write import numpy as NP and then what we are going to do in this video is we are going to try to compare the Python list to the numpy array and we will see the similarities or the difference between the numpy array and the Python list so to start with I'm going to declare a Python list and let's assign some values to the list let's say 1 2 3 and I'm going to declare the numpy array and I'm going to name it as an A and we are going to just say NP dot array and we will pass the list content to the array function so we have numpy array and the Python list and they contain same number of elements now what is the basic operation we perform with the list or an array we iterate over the list and the array so we are going to iterate over the list first of all so for I in L and we are going to print the value of I and let's see what happens when we iterate over the list so a result is expected it's going to print the content of the list and same we will do with our numpy array which is to iterate over this array and the result is same as the list so we can iterate over the numpy array or the Python list using a for loop so at this point these two things look similar now let's try to add some elements to the list and the number array so first of all in order to add something to the list let's say I'm going to declare the variable L 1 and I'm going to add something to the list and this we can do with the concatenation operator so let's say we want to add 4 to our list and then transfer the result into L 1 and when we see the content of L 1 you will be able to see that 4 is added or appended to the list now there is one more way in which you can append an element to the list and that is by using the append function so let's say I want to append 5 to this list L 1 I can do that and see the content of the list so now our list contains 1 2 3 4 5 so 5 elements let's try to do the same with the numpy array so I'm going to just use the and a 1 and then I'm going to try to concatenate the an a with some elements so let's try to add four to the number array and I'm going to just see the content of any one and you can see this is not the expected result so in case of numpy array when we use this plus operator it will do the vector addition so basically what we are doing is we are adding four to eat and every element of the array so as we already know that the content of the numpy array was one two three and when we add four to each element it becomes five six and seven and that is the result you are seeing here so in this way numpy array and list behave little bit differently now let's try to use the append method on the numpy array so I'm going to just write any dot append and we will try to append let's say eight to our list and then press ENTER and it's going to give us error because this append method is not even there inside the numpy array so at this point it looks like that lists are winning over the number array but as soon as we try to do the vector addition or matrix operations we will see the differences between the number array and the Python list so as I told you in the last video that generally we use numpy to do operation on the n dimensional array so for example if you want to do the vector addition of let's say numpy array to itself what we can do here is I'm going to declare one more variable and a two and then we can do na plus and a and it's going to give us the vector addition of these two arrays so I'm going to just see the content of n a2 and you can see it has given us the vector addition of any plus na which is 1 plus 1 is equal to 2 2 plus 2 is equal to 4 and 3 plus 3 is equal to 6 now in case of Lists as you have already seen that when we perform the concatenation operator it's going to just append to itself so let's try to do that also so I'm going to declare the hell to variable and I'm going to just do the concatenation of L plus L and when we try to see the content of L 2 it's just the appending of those two lists but it's not the vector addition so if you want to perform the vector addition on the list what we can do is we can just define L 3 variable and we will assign the empty list here and then we will iterate over the list using the for loop so for I in L and then we are going to just say L 3 dot append and we are going to append I plus I which is this variable to the list three or L three variable and then when we see the content of L 3 you will see the expected result which is 2 4 6 which is the vector addition of L plus L now let's try to multiply a scalar with the vector so we have an umpire array and I will just multiply it by 2 so I'm going to just write 2 Astrix and a and then press ENTER and I can see the error because n a should be in capital so once again I'm going to just write 2 multiplied by n a and then press ENTER and it's going to give us the multiplication of a scalar which is 2 with the vector which is numpy array the similar operation when we perform on the list let's try to do that so 2 multiplied by L and then press Enter you can see the result is the repetition of L multiplied by whatever scalar you right here so L is just repeated two times in case of multiplication so in case you want to do the scalar multiplication with the vector once again you need to iterate over the list and you need to multiply each and every element of the list by two as we have done with the vector addition let's try something else so let's say we want to find out the power of something so I'm going to just say an A and then we already know that when we use SS tricks it means any to the power whatever we write here so any to the power two and what we get here is the squared result of every element so one four nine here and when we do the same thing with the list it's going to give us some errors so let's see what error we get and you can see this operation is not supported so we can not perform this kind of power operation on our list so if you want to perform this power operation on the list you need to use the for loop once again and in that way numpy arrays are a little bit easier to use and you just need to use the operation whatever you want to perform and this operation will be performed on each and every element of the list now you can imagine if you want to perform the similar operation vector addition or addition of scaler and the vector or the power operation to each and every element of matrix which is a twodimensional array then how difficult it will be to perform on a list and how easy it is to perform on numpy array so if you want to square each and every element of the list you can just write 4i in L and then what you can do is you can just square each and every element of the list so I'm going to just write print here and then I'm going to just say I multiplied by I and it's going to give us the square result of each and every element of the list which is 1 4 9 and you can just obtain this result to a new list which will give you the similar result as we have seen in the case of numpy array now let's say you want to perform the square root on each and every element you can use s qrt function and then pass your an umpire array variable to it it's going to give you the square root of each and every element you can also find out the log of each and every element so you can just say log and then pass the numpy array here and you will find out the log of each and every element you can even find the exponential of each and every element using the exp function and then passing the numpy array to it and you can see it has given us the exponential of each and every element so here we have seen some similarities and some differences between the Python lists and numpy arrays but this doesn't mean that numpy array are better or Python lists are not better both have their importance sometimes you need a Python list and other times you need numpy arrays usually you can treat a Python list as an array but you can treat numpy array as a vector that means you can perform the vector operation on the numpy array and as we have already seen to do operations on every element of the list we need to use the for loop and in case of numpy array we can do it in much easier way loops are slower than numpy array operations that's why also we use number arrays so at the end I will just say that if you want to perform these kind of mathematical operations on a list or an array numpy is not just more efficient it is more convenient to use because you get a lot of vector and matrix operations for free which sometimes allows us to avoid unnecessary work which is required in the case of Python list in this video we will see some of the basic operations which are related to numpy arrays so let's get started I have already imported numpy into this Python console and now I'm going to create few numpy arrays so first of all let's create the first numpy array and this array will be the 1 dimensional array and this will contain 3 elements 1 2 3 pretty simple we are going to create the second numpy array and this time this array is going to take two dimensions so first of all inside the square bracket I'm going to add one more square bracket and here I'm going to just write 1 comma 2 now as we have talked in the last video that numpy array is somewhat similar to Python list in terms of iterating over them so this means they have some index so we can just fetch an element of an array using its index so let's say I want to get the first element which is one from the array a then I can just write a square bracket 0 which will give me the element at 0th index so working with this one dimensional array is simple we can just give the index here and we give you the element related to it but when it comes to twodimensional array what we can do so similar to the list when we just want to fetch the 0th element of the list it's going to give us this result which is the first element of the array which is this list 1 comma 2 now let's say you want to get this element which is 1 which is at first row and first column then what you can do here is you can add one more index which means we want to get the element at the first row and the first column and it's going to give us one similarly you can give any other index and it's going to give you the element related to it and you need to notice one thing here is because the index starts from 0 so when we give 1 comma 1 here it's going to give us 4 now there is a function called matrix also in the numpy which we can use instead of array which is going to give us the multidimensional array so I'm going to just show you how you can create the matrix using numpy so you can just write and p dot matrix and here you can give the same type of elements let's just copy this array and then paste it here and when I print the content of M it's going to give us the same result as we get in the case of array now in the numpy documentation it is recommended that we use arrays so we will not bother much about the matrix but I just wanted to show you that there is a method called matrix which you can use to create matrix or multidimensional array now there is one more notation which you can use to get the similar kind of result for getting some value of some position and this time what I'm going to do is I'm going to use B and then let's say I want to get the element at 0 index right so I'm going to just write 0 comma 0 and notice here I have used two square brackets but there is a shorter notation which is 0 comma 0 which appears more like matrix operation so when I do this it's going to give me 1 which is the same result as we have seen here in the case of indexes similarly when I do B 1 comma 1 it's going to give us the result for now as I said numpy array behaves similar to the numpy matrix that means we can perform the matrix operations on the numpy array also so what I'm going to do is I'm going to just say B dot T which is going to give us the transpose of this matrix so let's print out the content of the numpy array B also so the original content of the numpy array b was this one and after transposing the result is this one now there is a property called shape which we can use to get the dimension of the numpy array so let's say I'm going to just write B dot shape here and then press ENTER and it's going to give us result which is 3 comma 2 so this array is having three rows and two columns one row to row and three row and number of column is one and two now let's say we want to transfer the transpose of B into a new variable so I'm going to just write B dot T and assign it to C and now we want to see the shape of this C numpy array it's going to give us this result which is 2 comma 3 which means that now C array contains 2 rows and 3 columns now when I have created these two arrays a and B I told that a is the 1 dimensional array and B is 2 dimensional array and there is a property also to verify this and it's going to give us the dimension number of a particular and the array and this property is called ending so I'm going to just use B dot and them and then press ENTER and it says that dimension number of B is 2 which means it's a 2 dimensional array and when I do the same operation with the array 1 then it's going to give us 1 which means that this a array have the dimension number of 1 which is one dimensional array now there is a property called a size so I'm going to just write B dot size and this property size is going to give us the number of all the element present in the array so this array B contains 6 element 1 2 3 4 5 6 that's why it gives us results 6 similar operation when we do on the array a then it's going to give us 3 because it only contains 3 elements total now there is one more property which is called d type it's going to give us the data type of an array so I'm going to just write a dot dtype and it's going to give us d type is equal to int 32 also in the case of B it's going to give us int 32 so let's print out the type of the array B and it's going to also give us in 32 that means each and every element of this array is of data type integer now in order to create the array with the floating values what we can do here is so I'm going to just declare one more variable D and then I'm going to create one more array and this time I want to create the array with the floating values so what you can do here is as you may expect that you can provide the floating values here 1.2 and then I'm going to press Enter and when I just want to know the data type of this D it's going to give us this result which is float64 or there is one more way of creating an array with floating points which is NP dot array and then what you can do is let's say we just provide one and two here and you want to convert the array of integer into the array of floats then what you can do here is you can provide comma and provide one more argument which is the type and then provide the value of it so n P dot float64 and then press ENTER and once you see the content of this array E it's going to give us this kind of notation one point two point and this means the array contains float64 values so this we can confirm from the data type of E and you can see it contains elements of type float 64 now there is one more property of numpy array which we can use here is item size so this is a property and it's going to give us the size of each and every element of this array so because this RAB contains integers and we all know that integer takes four bytes and that's what it's showing here in case an array contains floating value let's say this e which contains floating values let's see the item size of this array e it's going to give us the result 8 which means that the size of each element in the array in byte is 8 now there are some basic function available for the numpy array so let me print out the content of B once again so this is our B numpy array and let's say we want to find out the minimum of all the elements present inside this array so we can use this method a dot min which is going to give us the minimum value and to get the maximum value you can just write a dot max function and it's going to give us the maximum of the array a now similarly we can find the minimum of the array B also so min function which is going to give us the minimum value present inside the array B and to get the maximum value you can just write B dot max it's going to give us the maximum value present inside this array which is 6 which is this one if you want to get the sum of elements you can use the sum function so a dot sum which is going to give us the sum of the array a and B dot sum which is going to give us the sum of the array B now let's say you want to find out the sum of a particular axis so when you see vertically this is the axis 0 and when you see the array horizontally this is the axis once so let's say we want to find out the sum of matrix B and we want to find out the sum of X s0 so I'm going to just write X s is equal to 0 here and then press ENTER and you can see it gives us 9 and 12 so from where does this 9 and 12 come from one plus three is equal to four and four plus five is equal to nine so this is the sum of these three elements and similarly twelve is the sum of these three elements and because we have said that we want the sum of X s is equal to zero which is the vertical sum of the array elements now in case when I write here X is 2 equal to 1 it's going to give us this result which is the sum in horizontal way which is called the axis 1 so 1 plus 2 is equal to 3 3 plus 4 is equal to 7 and 5 plus 6 is equal to 11 so this is called the axis 1 and when you see vertically it's called the axis 0 so these are some of the basic properties and methods related to numpy arrays in this video I'm going to show you how you can use numpy to create some specific array and also we will see how we can reshape or numpy array and some of the properties related to shaping your arrays so first of all let me show you the first method and this method is and B dot zeroes and if you have guessed correctly this method we use to initialize a specific array with some dimension so we are going to give some dimension here as an argument so let's say 2 by 3 and this is going to give us an array of specific dimension and all the values inside this array are zeros so all the values or elements which this array contains are all zeros there is one more method which is called NP dot once here you can give the same type of argument let's say three by two and it this is going to give you an array all initialized with the value one so you can see all the values here are one now if you want to initialize the value with some data type you can also use let's say NP dot once and you can provide an extra argument here which is called D type is equal to so just write the type is equal to and whatever data type you want to give here you can provide here so let's say n P dot in 16 and this D type argument is going to make sure that this one is of this data type now there is one more method which is called NP dot empty so this method you can use to provide some shape let's give three by three and this empty method is used to create uninitialized data so the content is undefined and once again I'm going to give the same command it's going to give us the array of these dimensions and here also you can provide the D type let me give the list here you can also give the list instead of this tuple and then as an extra argument you can provide that D type is equal to NP dot into 16 and then plus enter and you can see now it's going to initialize these values with the random integers once again when you give the list without this argument D type and I'm going to just provide some dimensions here in the form of list it's going to once again gave us this dimension with all ones but always remember that empty unlike zero does not set the array values to zero and this means that this may therefore be marginally faster now the next method I want to show here is the arrange method to create an array of particular so here you can provide some range let's say we want to provide the range from one to five and then press Enter now this arrange acts similar to the range method in Python so it's going to create this array but it's going to exclude this five this is the property of range also you can also provide the interval in which you want to see this array so you can just say I want to see this array in the interval of 0.5 then you will get the array in the interval of 0.5 or in the steps of 0.5 now there is one more method which is called NP dot linspace and this method is used to create an array by specifying the range and the number of elements so first of all we are going to provide the range so once again I'm going to provide the range between 1 to 5 and then press ENTER so you can see in the result it returns the evenly spaced number over the specified interval and in our case this interval is 1 to 5 and we got 50 values which are evenly spaced values you can also provide an extra argument in this function and this is the number of samples you want to generate the default sample is 50 as you have seen here this is the default sample so if you don't provide any number here it will generate that evenly spaced array of sample 50 but if you want to provide your specific number let's say we want to just generate an array of 10 values then we can provide this third parameter here and now you will just get the array of 10 evenlyspaced values once again if you provide here 5 it's going to give you only 5 evenly spaced value which is 1 2 3 4 5 if you want to create an array of random numbers you can use NP dot not random and provide your dimensions here and what you will get in return is an array of random numbers which are in between 0 & 1 now let me show you how you can reshape an array so I'm going to create an array of zeros so let me just assign this result to our variable let's say this is C variable so first of all let's see the content of this array C and now I want to reshape this array so there is a method called r dot reshape which you can use to change the dimension of this array so earlier this array was of dimension 2 by 3 and now I want to change the dimension to 3 by 2 let's say so now once you do this the array dimension will be changed to 3 by 2 which means 3 rows and 2 columns you can also change it to let's say 6 by 1 so I'm going to just say 6 by 1 and this is going to give you an array of 6 by 1 but you need to make sure that all these reshaping dimension conforms to the original dimension so for example you just give dimension which is not conformed by the original array let's say 7 here and you will get this error which says cannot reshape array of size 6 into the shape 7 7 by 1 let me give you one more example so this time I'm going to create a new variable D and this time I'm going to use ones method so this is once method and I want to create an array of let's say 1 by 9 and then press Enter which is going to give me an array of 1 by 9 and all the values here are ones now when I use a reshape method on this D array so let's use this reshape method and let's give the dimension let's say I want to give here the dimension of 3 by one and then press ENTER you will see this array will be reshaped to three by three array so why this is happening so because we have provided the second parameter as minus one which means that it will be determined based on the actual condition automatically so this array was containing nine element and this means that your matrix will be resized to three by three matrix so now you can see when you see the content inside D you can see the original array never changes you cannot change the size or shape of the original array you can just reshape it and then assign it to our new variable so when you do this I'm going to just reshape it and then assign it to a new variable E and then see the content of E now once again let me create an array of all zero of dimension three by one let's say and there is a method called V steak and H steak so V steak is used to stake multiple arrays in vertical direction and one thing to notice here is the dimension so the dimension of an array must be matched so here you can see e which is of the dimension 3 by 3 and we have a new array F which have the dimension 3 by 1 so let me just create one more variable let's say it's G variable and then I can use NP dot V stack and I can provide as an argument both the arrays so I have the array E and I have the array F and it gives us error because this I need to give in that topple so the error says it takes one positional argument but I have provided two because this I need to give inside at a plural list so these argument I will provide as a tuple and then press ENTER and now you will see this error this error says all the in put array dimension except for that concatenation access must match exactly so because this is the 3 by 3 array and we want to add the new array vertically which is not possible because in the 3 by 3 matrix you cannot add the matrix of 3 by 1 if this matrix is of 1 by 3 then this is possible so let's create the array of 1 by 3 so this should be 1 by 3 not 3 by 1 so I'm going to reshape it once again or let's just change the dimension it should be 1 by 3 in order to use the V stake with the array of 3 by 3 so now once again we will see the content of H so now we can once again use this V steak method and this time I'm going to pass H here instead of F which is of dimension 1 by 3 and then press ENTER and this time I don't get any error and once again when I see the content of G it's going to give us the combination of the matrix E and H so this method V steak can be used to stake multiple arrays in vertical direction there is one more method which is at stake which you can use to stake multiple arrays in horizontal direction and there our F array will work so now when I create one more variable I and I will use the H steak method and here I will provide as an argument the array E which is of dimension 3 by 3 and the array F which is of dimension 3 by 1 not 1 by 3 not like this but it's of dimension 1 by 3 so it's like this right and then press ENTER and I will see the content of I and now you will see these two arrays are staked horizontally now if you give the array of wrong dimensions here so for example I gave H here instead of F which is like this and then press Enter it's going to once again give me an error which says all the input array dimension except for the concatenation axis must match exactly and at last I want to show you two more method and they are edge split which is called horizontal split and V split which is called vertical split and I want to split this array in the horizontal format so what I'm going to do here is I'm going to use the method H split and here I can first of all give the name of the array which is G in my case and then I can give the number of splits so for example I want to split this array in three different arrays then I can provide this number three here and then press Enter and now you can see the result so this result contains three different arrays 1 2 & 3 now let's say I want to split this array I which looks like this in the vertical direction so I want to just separate this this and this in three different arrays so I can use once again and P dot V split method and first argument is the name of the array and second argument is the number of arrays you want so when I press ENTER it's going to give me three different array which are split in vertical direction so that's it for this video I hope you have learned something new this time and I will see you in the next video