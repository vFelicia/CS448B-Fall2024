hey guys welcome to this video on how to be a good programmer now before going forward with this video I want to make a disclaimer and that disclaimer is that all the things which I'm going to show you or tell you in this video are totally based upon my software development professional experience I've worked full time as a software developer and all the things which I'm going to tell you in this video according to me are important to become a good software developer and by no means I want to claim that I'm a perfect software developer I feel nobody is a perfect software developer but everybody can improve and if you have some suggestions based upon your professional experience as a software developer you can give them in the comment section so without further ado let's get started the first thing I want to say here is your knowledge is your portfolio so you need to invest regularly in your knowledge portfolio so let me give you an example and this example I want to give you about a smart investor who want to invest in the share market so knowledge is something like investing in the share market now an investment in knowledge always pays the best interest according to me now what are the traits of a smart investor a smart investor invest regularly he diversifies his portfolio he manages his risk between the highrisk shares and the low risk CS and time to time he reviews his portfolio in the same way a good software developer learns at least one new language every year and why I am saying this because whatever your core language is in which you are working professionally might not be the perfect choice in the future because technology nowadays is changing very fast new Technologies comes every one or two years and old technologies takes the backseat but what stays is your fundamental knowledge now if you learn some new language every year let's say you are a C++ developer which is an objectoriented language and if you learn every year a new language let's say you learn Ayten or Scala or any other new language these languages are multiparadigm programming languages so you get to learn about functional programming you get to learn about procedures data structures in different languages that broadens your knowledge about software development so try to learn at least one language every year the second suggestion I want to give here is read a technical or nontechnical book every quarter everybody knows that reading books is a good habit so I don't want to add anything to it I just want to suggest that reading books helps a lot it helps in writing it helps in gathering your thoughts it helps to broaden your knowledge so try to read at least one technical or nontechnical book every quarter if possible the next suggestion is take classes about whatever you want to learn now nobody is an expert of all the software languages there are exports of their domains and their software languages or some technologies and they have the professional knowledge to teach you and I will recommend to try to learn from them there are many resources which you can refer to which I'm going to show you in the next slide which you can use to take classes and broaden your knowledge the next suggestion I want to give here is try to participate in local user groups or events there are many software development events going on all the years relay to all the sorts of technologies which are prevailing nowadays so you can search for those events online and attend them and that will broaden your mind and knowledge also because there are all sorts of speakers and they are experts in their domains which gives talks in these kind of events and that will help you immensely and the last suggestion which I want to give you in this slide is experiment with different environments so let's say you want to become a Java developer or you are a Java developer which is a crossplatform programming language which means it can work on any operating system be it Windows or Mac operating system or all types of Linux operating systems so try to learn at least if you have Windows try to learn Linux operating system if you can't afford Mac OS try to learn at least Windows and Linux why I'm saying this is because Linux is opensource most of the distribution of Linux are opensource so you can install Linux for free and experiment with it if you don't have a spare PC or computer you can also use some kind of virtual software for example VirtualBox or VMware Player workstation to install different kind of operating systems and experiment with them and try to develop the language of your expertise in those environments because right now your work may be only limited to the Windows operating system but in future you might get a project in which you might have to deploy your java code on Mac OS let's say or a Linux operating system now let's talk about the tools and techniques which I feel are essential in your software development career and all that software techniques and tools which I am showing here I use them on every a basis and these tools and techniques you will need regardless of the programming language in which you are developing so nowadays you no longer can say that I am an expert in one particular language and I don't need to learn anything else so nowadays in modern software development you need to learn some tools and techniques in order to work in bigger teams so let's see these tools and techniques one by one so the first tool you need to learn is any version control tool it might be any version control tool like git or subversion or any other version control tool because nowadays you cannot develop in teams without version controlling your software in addition you can also learn version control management systems like github or bitbucket with your version control tool the second tool I want to recommend here is a text editor of your choice so there are many text editor available nowadays it can be a whim or Visual Studio code or atom or sublime or Emacs any text editor try to develop your language or programming language in those text editor if possible because for example when you work with integrated development environment or IDE it hides many details from you so whenever you are using an IDE you might not have a total control on your code or your software but if you are using a simple text editor which is also very powerful for example if you are using vim or Visual Studio code which doesn't hide much from you so you have the total control on your software and secondly if you are an expert of some text editor that programming language doesn't matter whatever language you want to develop you can develop any programming language in the text editor so you might not need any particular IDE specialized in that language if you just have a text editor you will be good to go in hostile environments the next thing which I will recommend you to learn is the terminal commands so try to learn the terminal commands to compile your code or deploy your code or do anything with your code with the help of commands so for example if you want to deploy your code on a server where you might not find any fancy graphical user interface you should have the knowledge of terminal commands to compile your code test your code deploy your code and send it to the production using the command line and this will give you a confidence that you don't need any special tool in order to work with the programming language in which you are working in the next suggestion I want to give here is to learn to debug so it's the fact that you cannot avoid bugs in your software and I feel that nobody can write a software which doesn't have any bug so every software might face some kind of bug in its lifecycle so try to learn to debug the code in which you are working in and if possible try to debug your software on the terminal using the command line that will give you immense confidence in writing and debugging your software the next suggestion I will give you is to learn any continuous integration software continuous integration software helps you to test your code compile your code deploy your code so it helps you to handle all the life cycles or all the important steps of your software and nowadays there are many continuous integration software available the most popular which I use personally is Jenkins but there are some modern CI tools like Travis CI or gate lab CI which you can also use as a continuous integration tool for your software the next suggestion is try to learn the design patterns so there is a set of design patterns which are standard and which are language agnostic which you can learn and many R times in your software development career you will face some situation where a design pattern can help or implemented directly to your software so they are standard patterns and they are created by exports so you might get help from these design patterns the next suggestion is try to learn UML diagrams so for example you want to show some control flow or software design or software architecture to your colleague or to your team lead or to anyone you can use UML diagram to create or design those software architecture diagrams or class diagram there are many kind of diagrams which you can draw using the UML diagrams so try to learn UML diagrams how to draw them and make use of them the next suggestion is try to write test whatever programming language you are using there are standard libraries available to write unit tests or integration tests or system tests in those languages using those libraries so try to write tests for your software before delivering it to the client the next suggestion is try to learn agile methodologies and try to learn agile project management tool for example JIRA which I use in my professional software development career which is I think the most popular tool for agile project management and if you don't know what is agile just search on google what is agile and you will get to know more about what is agile and what is JIRA the next suggestion is build project from scratch so whatever programming language you are working in try to write some kind of project personally or professionally from scratch so you will be able to experience all the nuances or granule details about the software development in that particular language now there are some suggestions which I haven't included in this slide but I want to give you and those suggestions are try to peer review or code review your code so whenever you write a code and you feel that this is the perfect code but an expert can give you suggestions what you can improve in your code so try to give your code to an expert for the review and he will be able to improve your code and code quality and the last suggestion is don't shy away from the hard work this is the fact that you cannot avoid hard work in your software development career so these are some of the tools and techniques which I use regularly in my software development career professionally now let's talk about some learning resources which you can use in order to get better in your chosen software development domain so here I have listed some of the websites and resources which you can use to learn programming languages and get better in software development now at last I want to give you some tips which will make you a better software developer so the first tip is provide options and don't make lame excuses so whenever you are provided some tasks from your team or from your project lead try to give some suggestions or options don't say straight away that this can't be done I have in my software development career never faced the problem which I couldn't solve I just need to work harder in order to solve these problems but there is no problem which I faced and I couldn't solve so if you feel it's difficult to solve this problem try to read more about this problem or think more about this problem and you will get some idea to solve this problem maybe also you can discuss with your colleagues for the suggestions and at the end you will be able to solve that problem or the task the next tip is make quality a requirement issue as I said whenever you write a software you need to write the unit test for them or integration test for them so try to check the quality of your code by code reviews the next step is don't repeat yourself so try to write the code in which you don't repeat yourself so you don't have to write some function multiple times and try to write this code in such a way that you write a function or a functionality which you can reuse in different places in your software code the next step is reversibility so in my software development career I have never seen a decision which is a final decision so that changes are bound to come in your software so try to write the software which you can easily reverse or change the next and the last tip which I have already told you is use the power of command shell the benefit of graphical user interface is what you see is what you get but the disadvantage of graphical user interface is what you see is all you get so you will not get any extra knowledge or the detailed and knowledge whenever you are using the graphical user interface when you use a command shell or terminal you have full control or you will have full control over your software whatever you are doing and in the most hostile conditions also you will be able to work your way with your software using command terminal or command shell so try to learn the power of command shell so these are the tips and suggestions which I wanted to give you in order to become a better software developer once again all these suggestions are based upon my professional experience as a software developer and if you have some extra suggestions please write them in the comments so please keep watching these videos I will see you in the next video