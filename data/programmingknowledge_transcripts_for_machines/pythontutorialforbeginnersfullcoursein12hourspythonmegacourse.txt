hey guys welcome to this course on python programming for beginners so why learn python because using python you can build almost anything python can be used for web development game development computer vision robotics graphical user interface development and also python is the number one language of choice for machine learning data science and artificial intelligence so the goal of this course is to provide you the working knowledge of python programming we will start with the basics starting from the installation of python on your operating system and then we will learn all the basic concepts in python programming like variables data types operators control statements loops strings functions and also python collections like lists tuples sets and dictionaries then we will move to the object oriented programming concepts in python so in this section we will start with what is object oriented programming what are classes and objects and then we will cover the concepts like encapsulation inheritance polymorphism abstraction and access specifiers also we will see some advanced object oriented programming topics like abstract classes and compositions next we will see how we can handle exceptions using python programming then we will move towards some advanced topics like python iterators generators decorators and also we will cover some functional programming concepts using python i will also cover how you can debug your python code and also we will see how to use pip which is a python package management system to install and manage your software packages written in python next we will see multithreading in python also we will see pi test framework which is one of the most popular unit testing framework for python now if you want to see the whole list of topics which will be covered in this video course then you can see the description of this video and you will be able to see all the topics which will be covered in this video so what are you waiting for let's get started in this video i'm going to give you a brief introduction about python so let's get started so first of all what is python so python is a high level dynamically typed programming language python support multiple programming paradigms including object oriented imperative functional and procedural styles now python is a interpreted language so what do we mean by interpreted to understand this we need to understand the difference between the compiled languages and the interpreted languages so some languages like c c plus plus java are all translated by running the source code through our tool called compiler this compilation of source code results in a very efficient byte code that can be executed any number of times now interpreted languages like python in contrast must be parsed interpreted and executed each time the program is run thereby greatly adding the cost of running the program so a compiled language takes the entire program as a single input and converts it into machine code or byte code which is stored in a file called a binary file on the other hand interpreted languages like python takes the single instruction as single input and execute that instruction now compile languages run faster because compilation is done before the execution on the other hand interpreted programs run slower because compilation and execution takes place simultaneously in case of python even though it's a interpreted language but it's really fast now python supports dynamic data types and to understand this we need to understand the difference between statically typed programming languages and dynamically typed programming languages so at statically typed programming languages do the type checking at the compiled time as opposed to the real time and dynamically typed programming languages do type checking at run time as opposed to compile time so let's say you declare a variable x is equal to 9 in python python will do its type checking at runtime whether it's an integer or a string or a double value all will be done at the runtime now python is independent from platforms that means it's a cross platform programming language that means you can run your python code on windows linux mac or on any other unix operating system now python focuses on faster development time so python code has a very natural style to it which makes it easy to read and understand thanks to the lack of semicolons and braces so we don't use semicolons or braces in python that means faster development time especially when you are doing some prototyping work python is a highly readable language and has a clean visual layout so if a developer writes a very efficient python program it's like reading english language now python have high level internal object data types and have automatic memory management and at last python is free and open source that means you don't need to pay anything to start learning python now let's talk about some history about python so python was conceived in late 1980s and its implementation began in december 1989 by a developer called guido fan rossum in netherlands as a successor of a programming language called abc now guido fan rossum worked at google from 2005 to december 2012 where he spent half of his time in the development of python programming language and nowadays fan rusim is working in a company called dropbox and from where this python name come from russom chose the name python since he was a big fan of monty python's flying circus so python was first publicly released in february 1991 and python.org which is the official website of python was released in the time period between 1996 and 1997. in the year 2001 python software foundation was created and fan brewsim remained the principal author of python his continuing central role in python development is reflected in the title given to him by python community which is benevolent director of life now what is a benevolent director of life this is a title given to small number of open source software development leaders typically the project founders who retain the final say in the dispute or arguments within the community so why learn python because python is fun to use scripting language and as i said python is a multiparadigm programming language which supports object oriented imperative functional programming and procedural styles that means it's highly recommended for the educational purpose so majority of educational institutes use python as the first language which they teach to their students and why it's the first choice of educational institutes because it's very easy to learn and it runs on any platform now python is very powerful scalable and easy to maintain programming language which enables high productivity and it has lots and lots of inbuilt libraries which our developer can use python is also used as a glue language which acts as a interactive front end for the languages like c and c plus plus so when you develop in python it reduces the development time it reduces the code length it is easy to learn and use as a developer it is easy to understand codes it is easy to do team projects in python and it's really easy to extend to other languages if you are using python so where can you use python so because python is a general purpose programming language it is used in many web development framework for example django and flask recently became very popular for web development now python is also widely used in scientific computing data mining and machine learning and continued growth and demand for machine learning developers may be driving the popularity of python now as i said python is used as a scripting language that means if you are doing prototyping it's really efficient to use python python is also used in the development of graphical user interfaces embedded applications gaming and devops tools and at last as i said because python is really easy to learn it's used for educational purposes as the first programming language for teaching programming now the question arises which version of python should you learn python 3 or python 2. so i would recommend python 3 since it's more modern and it is a more popular option at this point of time so i will be teaching this course in python 3. so this was a brief introduction about python from the next video i'm going to show you how to install python and how to use python as a programming language in this video i'm going to show you how to install python 3 on your windows 10 operating system so let's get started so first of all open your favorite browser on your windows 10 operating system and then search for python and the first link which will appear here will be from python.org so we are going to click on that link and once this python.org website is open you just need to scroll down a little until you see this downloads section and you can see at the time of making this video python 3.7.0 is the latest version of python available so we are going to click on this link which says python 3.7.0 and you will be redirected to this page which says python 3.7.0 and now i'm going to scroll down until i see the files here and you will see there are various kinds of installer available here we are going to install the python using the executable installer so we are going to choose this option which says windows x86 hyphen 64 executable installer and now i will wait for this executable to be downloaded and once this executable is downloaded you just need to click on this exe file and i'm going to minimize the browser here so you can see python's 3.7.0 setup window has been started and on the first window you will see two options here one is install now and other is customize installation so what we are going to choose is this option which says customize installation because when you choose this install now option python will be installed at this part which i don't want to use you can see it's a long path which i don't want to remember so i will use this option which says customize installation and i will also check this option which says add python 3.7 to path so now let's click on customize installation and next you will see this optional feature window and you can see there are some optional feature which this python installer will install for example documentation pip it will install which is a python package manager idle ide python test suit and other feature it's going to install so i'm going to leave everything as default and then i'm going to click next and now this next window will open which says advanced option here i'm going to check this option which says install for all users and i'm going to leave other check boxes as checked and then you will see this section here which says customize install location so i want to install python on my c directory so what i'm going to do is i'm going to open the windows explorer and i'm going to go to the c directory here and once the c directory is open i'm going to right click here and i'm going to create a new directory and i'm going to name this directory as python and then i'm going to press enter and this path i'm going to give here in the customize install location so i'm going to just give this part which says see colon slash python and then backslash python 3 7 3 7 here means that we are going to install 3.7 version of python so now python will be installed at this location on my computer and then i'm going to click on the install button here and then you will see the installation will start and it will be finished in a few seconds so just wait for the installation to complete and after some time i can see this message which says setup was successful so i'm going to click on this close button which is going to close this installer so now in order to check whether python is installed on our windows operating system or not we are going to search for python here and you will see few options here one is this python 3.7 terminal other is idle ide so first of all we are going to click on this option which says python 3.7 64bit which is going to open this kind of terminal so this is a python terminal and here we can for example print something so i am going to just write print and in the parenthesis and in between the double quotes i can just write hello world and then press enter which is going to in return print hello world that means python 3.7 terminal is working so i'm going to close this terminal now and once again i'm going to search for python here and this time i'm going to select this option which says idle okay so just select this option which says idle and in the parenthesis python 3.7 64bit so this idle is an ide which comes with python installation at the time of installation we have chosen this option to install idle that's why we can see this option here and also this is an interactive shell so you can once again write a print and inside the parenthesis you can just write for example once again hello world and then press enter and it's going to give you this kind of output here so now python interactive shell is working and idle ide is also working so i'm going to close this idle ide and now i want to check whether python is working using my command prompt or not so i'm going to right click on this windows button and then i'm going to click on command prompt and here i'm going to first of all write python and then press enter and you can see this python option is working now even on your command prompt right so here also you can just write print and inside the parenthesis you can just print hello world and then press enter and it prints hello world in return so now we have successfully installed python on our windows 10 operating system in this video i'm going to show you how to use mathematical operators and how to do basic math in python so first of all we will open the idle ide so just search for python once again i have shown you this method in the last video also so just search for the python once again and in the last video i have shown you how to install a python and with the python installation this idle is also installed right so we are going to open this idle ide now some of you who are familiar with python and have some experience with python may think that why am i using this python idle ide because there are many better ides and editors available for the development of python so don't worry i'm going to show you everything how to install other ides which are preferred in the development of python step by step but for now we will start with this idle ide so the first thing which i want to do here is i want to increase the font size first of all in the idle ide because this may be not visible to some of you you can change the font size by just changing this number and i'm going to change it to for example 18 and bold so we will be able to see our fonts in a better way so now everything is set so let's get started with the programming so let's start with the basic math operations so let's say i want to add something so i can just write number plus which is a operator and the other number and then press enter and you will get the result of this expression now let's try the subtraction so let's say i want to subtract 60 minus 50 and then press enter and it gives the result let's do the negative subtraction so i'm going to just write 60 plus 50 and then press enter and it's going to return me the negative value now let's do the division so for example i want to divide 50 by 3 i'm going to press enter and you can see it gives me a float value or a decimal value and if you are familiar with other languages like java or c plus plus this may appear a little bit strange to you because when you do the same operation in java or c plus plus with this division operator you will get the different answer which is 16 and not these decimal float value so if you want to just get an integer value and not the decimal value out of the division then you can write this expression which is 50 double forward slash 3 okay and then press enter and now you get 16 which is a whole number or an integer this type of division is also called the floor division in which you get the whole number as the answer and the decimal value is truncated out of your answer so if you want to get the exact value out of the division in decimal values also then you can use this expression which is single forward slash operator and if you want to do the flow division then use these two forward slash symbols now it's also possible to divide two decimal values so decimal values in python and most of the other languages are called the float values so here instead of 50 i can just write 50.0 divided by 3.0 which is also valid or i can write 50.0 divided by 10 and then press enter which gives me 5.0 and when i write the integer which is 50 divided by 10 it will also give me this value which is 5.0 now let's try some multiplication so if you want to do multiplication in python you use a number and then this asterisk symbol and then second number and then press enter and this is going to multiply these two numbers so this is the multiplication operator which we can use to multiply two numbers now this is what we are doing here is for example uh multiplying two numbers or dividing two numbers or addition of two numbers or subtraction of two numbers in python it's called expression okay so 50 multiplied by 10 is an expression and i have already told you that these are symbols for multiplication or division are called operators now the number on which you are doing these mathematical operations are called operands so 50 here is an operand 10 here is an operand or 3 here is operand and 50 here is operand now here 50 and 10 are also called literals because they are constant values so what we have learned till now this is an expression this is an expression or 50 divided by 3 is an expression the number on which you operate on are called operands and these symbols which you can use to multiply divide add or subtract are called operators and these numbers are also called literals when they are constants now let's try some modulo operations so for example i'm going to just write 10 modulus 3 here what it's going to give us is the remainder of the division of these two values so 3 multiplied by 3 is 9 which leaves the remainder 1 and that's the result we are getting okay let's try it once again so for example i will divide 21 divided by 5 it will give me the answer 4.2 but when i do 21 modulo 5 and then press enter it's going to give me the remainder of the division of two values now there is an another interesting operator which is called exponent operator which you can use for the exponent values so for example i want to get the result of 2 to the power 5. how can i do it so i can just write 2 and then double as 6 and then 5 which means 2 to the power 5 and then when i press enter it's going to give me 32 or i can just write to 10 and then i can just write double asterisks and then for example 10 once again and then press enter it's going to give me the result of 10 to the power 10. now it's also possible to do these mathematical operations on more than one number so for example i can write 5 plus 5 plus 6 plus 9 and it will give me the result of the addition of these four numbers and it's also possible to use different type of operator in one expression so i can write 5 plus 9 minus 6 multiplied by 10 for example and it's going to give me the result of this expression now there is one question which may arise here is for example once again i'm going to do 5 plus 9 minus 6 multiplied by 10 and divided by 20 and press enter here it's going to give me this value but how this value is calculated what operation is executed first is the multiplication is done first or is the division done first or the addition took place first or the subtraction took place first so i have this table and here you can see the precedence of these operators so in this table highest precedence is at top and lowest is at bottom that means parenthesis have the highest priority and then the exponents have the priority and then the multiplication and division operators have the same priority here and at last the subtraction and addition have the same priority but whenever you use these operators which are in the same box in a same expression then whatever operator you use on the left have the highest priority and whatever operator you use on the right have the lower priority so in this table parenthesis have the highest priority and the addition and the subtraction have the lowest priority and for example if you use multiplication and division in the same expression then the priority is decided which operator is appearing on the left so if the operator is appearing on the left it has the highest priority then the operator which are on the right side so let's take an example of that so for example so first the addition of these two number will happen and then the division of these two numbers will happen because parentheses have the highest priority and then the result of these two numbers will be multiplied by 6 because multiplication have the highest priority out of these two operators which are minus and multiply so multiplication operator have the highest priority and at the end the subtraction of the result will take place so let's press enter and let's see what's the result so the result here is 11 and how we get this result here so 5 plus 9 is 14. and the division of these two number is 1 by 2 so 6 will be divided by 2 which is 3 and then at last 3 will be subtracted from this result which is 14 which will give you 11. once again for example you use 60 multiplied by 20 divided by 30 and then press enter it will give you 40 but in which order this calculation will happen first of all this multiplication will take place because in the table we have seen that multiplication operator and division operator have the same priority and that's why the priority will be decided from left to right now if you want to learn the order of precedence between the operators then you can use this keyword which is p e m d a s p stands for parentheses e stands for exponents m stands for multiplication d stands for division a stands for addition and s stands for subtraction okay so you can either remember this name which is pemdas or you can use this sentence which i have written here so please excuse my dear aunt sally and you need to remember the first letter of each word here and the first letter of every word for example p here stands for parenthesis is here stands for exponent m and d here stands for multiplication and division a and s here stands for addition and subtraction so for remembering you can either use this sentence or you can remember this keyword in this video we will talk about python variables and types so first of all what is a variable so according to wikipedia in computer programming a variable is a storage location paired with an associated symbolic name also known as variable name or identifier which contains some known or unknown quantity of information referred to as value now in simple words a variable is a named place in the memory where a programmer can store data and later retrieve this data using the variable name now the programmer get to choose the name of this variable which is declared and programmer can change the content of this variable in the later statements so let's see how we can define a variable in python so you can define a variable using any name for example you can give my int as a name and then using an assignment operator which is this equal to symbol you can assign some value to this variable for example 9 and when i press enter this value 9 is assigned to this variable which is my int and now on i can just get the value of this variable using the variable name so when i write my int and then press enter it gives me the value which is assigned to this variable now as i told you in the first introduction video of this course that python is completely object oriented and it's not statically typed so you do not need to declare the variables before using them or you do not need to declare the type of the variable and further every variable in python is an object so if you have learned some other languages like c c plus plus java or other statically typed languages you may have observed that before writing the variable name they give the type of the variable for example in other languages for defining integer they have to first define the data type of that variable and then they define the variable name and then they assign any value to it but in python you don't need to define this data type here and whenever you define a variable you need to assign some value to it so that python will be able to understand the type of data you want to store in this variable so this type of notation when i press enter here it's going to give me error which says invalid syntax because this type of variable declaration is not allowed in python now there are some rules which you need to follow in order to declare a variable in python and these rules are a variable must start with a letter or underscore okay so you cannot start the variable name with a number or some unknown symbol the second rule is a variable must consist of letters numbers and underscores and no other special symbol and the third rule is variables are case sensitive so let me show you the demo of all the rules which are related to declaration of variables in python so let's say we have defined this variable myint i cannot get the value of my end when i write for example my with capital letter and then int here and it's going to give me an error because variables in python are case sensitive so this variable name is different from this variable name now as i told you you can define a variable starting with the letter it's totally valid so let's define this variable age is equal to 10 which is valid you can also define a variable with the combination of letters and the numbers and it's also totally valid but a variable name cannot start with a number so when you write something like this and assign some value to it it's going to give you an error which is a syntax error so a variable name cannot start with a number a variable name can start with underscore and it's totally valid but apart from underscore when you use some special character for example hash age is equal to 10 it's not valid so whenever you try to get the value of age it's not going to give you the value which is stored inside this variable also you cannot use any other special symbol between the variable names so for example i can write h dot 22 here is equal to 22 which is not a valid syntax because we have used this dot symbol in between the variable declaration so these are some of the ground rule in order to declare a variable in python now apart from that there are some reserved words in python which also you cannot use in order to declare a variable for example these are some of the words which you cannot use in order to declare a variable for example and del for is raise you cannot use to declare a variable so let's say i'm going to go to idle once again and i declare a variable called for is equal to 10 it's not valid it says it's a invalid syntax because for is a reserved word in python so now we have learned some rule about declaring the variables so let's declare some variables in python so first of all i'm going to declare an integer variable which takes an integer and then i'm going to declare a float variable which takes a decimal value and then i can also declare in python a complex value for example my complex is equal to 1 j and then press enter and it's also totally valid where j in this value is the imaginary part of this complex number now you can also use e to indicate the power of something so for example i declare a variable my num and you can write this notation like this so 10 to the power 10 is totally valid okay and when you try to access this value of my num it's going to give you the value of 10 to the power 10. you can also write the capital e here so when i write my num is equal to 10 capital e 10 and then press enter and i try to access the value which is stored in this variable you can see it gives me the same result now in order to declare a string variable for example my string i can use double quotations for example i want to write some name here it's totally valid so i'm going to just get the value which i stored inside this my string variable and it gives me this name max i can also use single quotation in order to assign a string to the variable so i will use now single quotation and this time i just change the name to tom it's also totally valid so when i write my string once again it gives me the value tom now you may have noticed one more thing here is reassignment of the variable is possible so first i have assigned the value max to this variable my string and then i have reassigned some other value tom to the same variable my string so reassignment is possible so for example let's say what i'm going to do is i'm going to take my float variable and then what i'm going to do is i want to assign in this variable the value which is stored in my int variable so i'm going to just write my int here and then press enter and let's see what is the value inside my float now and you can see it gives us the value 10 but you may ask that we have declared this variable name as myfloat so we are expecting the float value inside this myfloat variable name but it's giving me the value 10 so in order to convert integer value into a float value you can use typecasting so i can just write my float here is equal to then you write a keyword float here and then inside the parentheses you can write the name of the variable which is myint and then when i access the value of my float here it's going to give me 10.0 which is a float value so in order to convert integers into float you can use this keyword float here now if you want to convert a float value into an integer you can just write for example my int is equal to int and then inside the parenthesis you can write the variable name for example my float here and then press enter and then i can see the value which is stored inside this mind variable and it's an integer now let me show you one last thing which is to find out the type of any variables so you use a keyword called type and in the parenthesis you use the variable name for example my int and then press enter and it will give me the type of the value which is stored inside this variable so you can see integer is stored inside this variable myint once again type and then parenthesis and now i want to know the type which is stored in the my float variable and you can see it will give me float as an answer so we know that in my float variable float value is stored once again we will see what value is stored in this mynum which is an exponent value right so i'm going to just write type and then i'm going to just write my num now and then press enter and it gives me a float value and at last i want to see what type is stored in this my string variable so i can just write my string here and then press enter and you can see the value which we get here is str which stands for string that means in my string string value is stored now it's totally possible to use the operators with variables so i want to add the value stored in my int plus my float here and this will give me 20 because my int have the value 10 and my float have the value 10.10 so the result is 20.0 here so this is how you can use variables and types in python in this video we will see how to use print function in order to print output on the console in various different ways and i'm also going to show you how to take user input using python so we have already seen that in python we can use this print function in order to print something and we have already printed hello world at the time of installation right and when i press enter it's going to print hello world on the console now some of you might wonder what is this print so print is a in built function in python so python has a number of inbuilt function and print is one of them so here print is a function and then inside the parenthesis what you give here is called a parameter or an argument okay so hello world is an argument which is a string argument right so let's try to give in this print an integer argument let's say i just provide 25 here and it will print this number once again let's say i'm going to write print and then i want to execute some expression 50 multiplied by 60 and then press enter print function is also able to do this now let's say i want to output some more complex formatted string so let's say i want to print on the console 50 multiplied by 10 is equal to 60. how can i do this so let's see how we can do it so i can write print here and then inside these double quotes you can write your string for example 50 multiplied by 10 and then in print function you can give multiple arguments using this comma separator so here i can just write 50 multiplied by 10 and let me put equals symbol here inside this string and then press enter and now it prints 50 multiplied by 10 equals 500 and you can also provide more than one argument to this print function so for example i can just write hello here and then in the second argument i will just provide the space between hello and world and in the third argument i will just say world here and this print function will concatenate all these string values and give you the output in this format now let's say you want to also provide this value here which is 50 and 10 instead of string you want to provide some value which you take from a variable so for example you declare a variable x is equal to 50 here and then y is equal to 10 and you want to use these two variables instead of this static string so how you can achieve this you can achieve this in various different ways so let me show you the first way so i can write print and then in the double quotes this is your string so whenever you use this double quotes and whenever you write something in between this double quotes it becomes a string so after this string i will provide a dot here and wait for some seconds and as soon as you do this you will be able to see various different hints here which are provided so these are all the inbuilt methods which you can use with the string so you can use find method you can use format method so for now we are going to use this format method with string so you can just click on this format method so let's say i will provide x as the first argument y as the second argument and i want to see the output of x multiplied by y in the third argument now how you can print the value of x y and the multiplication of x y using this blank string so it turns out that you can use these curly brackets inside this string and you can give some index here so index starts from 0. so this index is index 0 and then i'm going to provide space and then this asterisk symbol to provide this kind of format so we want to achieve this format here right so just write 0 in the curly bracket space asterix and once again curly bracket and this time we are going to provide the index 1 and the result will be transferred to index 2. why because here the index starts from 0 so x will be transferred to the index 0 y will be transferred to the index 1 and the multiplication of x and y will be transferred to index 2 here so let me press enter here and you can see it prints the string which we desire now once again i'm going to write this print function and once again i'm going to give this parenthesis and you can see the hint here so i want to use this scp keyword now inside the string so how can i use this so i will just close this parenthesis and once again i want to print hello world so i will just write hello and then i'm going to provide the comma and inside the double quotes i'm going to just write world here and then in the last argument you can provide this keyword scp is equal to and inside the double quotes you can provide some separator to separate the hello from world so i want to just give this string to separate hello from world and now i'm going to press enter and you can see this string is separating the keyword hello from the world now in python you can also use c style string formatting to create a new formatted string so let me show you how we can do it so i'm going to declare a variable called name and i'm going to assign some value to it for example max here and then press enter and now i'm going to just write print function and in the parenthesis i want to just greet this name so i can just write double quotes hello here and then if you are familiar with c style string formatting then you may know this modulo s symbol which is used to print strings right and then after this double quote you just need to provide once again this modulo symbol and then you need to provide the variable name which you want to replace instead of this modulo s so in our case we want to replace this modulo s by name variable and i'm going to press enter and you can see it prints hello max now let's say i also have the age of this person so the age is let's say 22 and once again i'm going to use this print function and inside the parenthesis i want to say hello to the name including the age so i can just write hello and then modulo s here and then i'm going to print the age of this person i can just write r u modulo d which is used to print the integer values and then i'm going to just write years old and after the double quotes i can just write modulo and this time i cannot simply provide this name argument like this i must provide the name in the form of a tuple and what is a tuple a tuple is a fixed size list and we are going to see in the future videos how to use tuples but for now just remember that a table is a fixed size list okay so inside these parentheses once again i can provide first of all the name and then as a second value in the tuple i can provide the age variable and now i'm going to press enter and now you can see it prints hello max are you 22 years old so this is how also you can use these c styled string formatting in python i want to give you one more example of float here so i can just write for example this person's marks so i'm going to just write marks is equal to and let's say i want to provide these marks in the floating point so i can give this modulo f here and then after this modulo i can just give the mark so 92.5 and then press enter and you can see it prints the marks now one more little thing which we can do here is we can limit the number of decimal values which we want to see after this point so we can write the same printf function and same argument and in order to limit the number of digits after the decimal you just need to write after f dot and some number for example 2. oops i don't want to see this output i wanted to see the output after the decimal value so once again i think this should be this point should be before f so i just need to write dot and 2 before f i think and then press enter and now it limits the number of digits after this decimal point now the last thing i want to show here is how you can allow the user to provide some input so for example i will declare a variable called value and then i can use equals and then i'm going to use a inbuilt function which is called input so input is also an inbuilt function which allows you to take user input so here i can just write as the first argument and then i will provide this colon here and that's it you just need to press enter here and now you can see this terminal is asking us the same question which we have written here so let's say i just provide 50 here and then press enter then what's going to happen is this 50 is going to be assigned to this variable which is value so now when you just use this value variable you can see this 50 is assigned to this value variable you will also see that this 50 is a string and not a number right because it's enclosed in single quotes so how you can assign 50 to this value using the user input so what we can do here is once again i'm going to use this value variable and what we can do here is we can type cast the output of input so you can just write int and then here inside the parenthesis you can just write and now when i press enter and provide 50 and then press enter and see the value now it's an integer right so you can typecast the output of this input function which provides us the string and this int method is going to convert the string into an integer and then give us the result instead of this int you can also use a float keyword here so let me show you uh this example also so i'm going to just copy this and paste it here and instead of using the int i'm going to just write float here okay and then press enter and i'm going to provide this time 100 here and then press enter and then i'm going to just print the value of the value variable and now it prints the answer in floating points so this is how you can use print function to print the output on the console and input function to take the input from the user in this video we will discuss about builtin functions and modules in python so the python interpreter has a number of builtin functions modules and type that are always available that means you can use them at any time and we have already used some of the builtin functions in python so first of all we have used the print builtin function we have already used the input builtin function we have already used the int which is used to type cast a float or a string into an integer right we have already used a builtin function called float which is used to convert an integer to a float value or a string to a float value now python has a list of these inbuilt function and you can find this list by going to the python.org website and then clicking on that docs section and you can choose the version you have installed so we have installed the latest version which is 3.7.0 and you can even choose your language which are available here now when you click on this link which says library references you will be able to see this page which says python standard library and then when you scroll down here you will be able to see the introduction about python and the second section here is about builtin functions so i'm going to click on this builtin function link and here you will be able to see all the builtin functions in python so this is the list of all the builtin functions which you can use in python and if you want to know more about these functions for example i want to know what this max function does i can click on this function and then you can get the help about this function so what this function does and how it can be used in python all the information is given here now let's go to the terminal and let's see how we can use some of these builtin functions so first of all how you can list out all these builtin functions and types in python there is a builtin function to list out all the builtin functions and types which is dir and then double underscore and then you write build ins and then once again double underscore and then close the parenthesis and then press enter and it's going to give you the list of all the builtins available in python so for example from this list we have already used this function called float print and then we have already used this function int and input also so let's use some more functions so in the previous videos i have shown you how to calculate the power of a number so you use these double asterisks in order to calculate the power of any number and you can see you get the power of 2 to the power 10. now python also have a builtin function called pow here you can give as a first argument the number and as the second argument you can provide the number which you want to use as a power and when i press enter it gives me the same result let's use some other built in function for example l e n l e n you can use to find out the length of any string so i can write l e n and inside the parenthesis i can just write any string here for example hello and it will give me the length of the string so this string hello have five letters inside it that's why it's giving me length five now there is a builtin function called help using which you can get some help about any function so i can write help here and inside the parenthesis i can just write the function name so for example i want to know what this max function does so i can just write max here and then press enter so it gives me the signature of max so how it's used and then it will provide me some description about the function so what it does so you can see here it returns the biggest item right so i can just write max here and inside the parenthesis i can give the list of items here for example 1 2 8 9 4 and 5 and when i press enter it's going to give me the maximum value out of this list so you can use this help builtin function in order to know more about all the other builtin functions now till now we have talked about the builtin functions which are available in python now let's talk about some of the builtin modules which are available in python now what is a module i'm going to describe in the later videos but for now let's see how to import a builtin module in python and how to use them so there is a builtin module called math and to import it you just use a keyword called import and then the module name for example math and press enter and it's going to import this module into our interpreter now you can use this math keyword and then you can write dot and wait for some seconds and you can see it gives me all the list which are available inside this math module so let's say i want to find out the square root of any number i can use a function called sqrt here and then this gives me the square root of a number so for example i want to find out the square root of 100 and then press enter it gives me the answer 10. now once again as i said you can use a builtin function called help in order to know the signature of this function so i can just write math dot sq rt and then press enter and it's going to give me some help about this function so you can see it returns the square root of x and the signature looks like this now if you want to print all the methods and types available inside this builtin module you can once again use this builtin function dir and then in the parenthesis write the name of the module so this time we will write math here and then press enter and it gives me the list of all the available functions available inside this math module and you can see all these functions which are available inside this module so you can just use a cos function from here pi function from here radians or tan function from here so this is how you can use builtin functions and modules in python in this video i'm going to show you how you can write your first python script in the form of dot py file and execute it but not just by idle but i'm going to show you various different ways you can execute this python file which you will create so let's get started so first of all i'm going to show you how you can create your python file using idle so first of all open your idle ide and just go to file here and you will be able to see this option here which says new file and then you will be able to see this kind of window opens which is a python file editor now first of all we are going to save this file so let's save this file you can save this file at any directory or any path wherever you want so for this first file i'm going to name it as hello dot py so dot p y is the python extension and hello is the name of our file so i'm going to save this file first of all and you can see it's saved at my desired location so in this file let's write some python code so let's say i want to create a program in which i will ask the user to input three numbers and as the output i want the maximum out of these three numbers which is inputted by the user so how can i do this so as we have already seen you can define a variable in python like this so i'm going to define a variable x is equal to and we also know that there is a inbuilt function in python called input to take the user input and then in the double quotes so we are going to ask the user that he needs to enter the first number so enter first number and in a similar way i am going to ask the user to enter the second number and the third number let me change the variable name here so instead of x this variable will be y and the last variable will be z and this is the third number and this is the second number but when i write the input like this this may give us some problem the problem is input function gives us a string and we need to convert the string into a integer or a float so let's convert this number into a float value so you can use another inbuilt function which is float and then this string will be converted to float so i'm going to do the same for other two numbers now in order to get the maximum numbers out of these three numbers we have seen there is a inbuilt function in python which is called max and we are going to use this max function but first of all we need to print something so we will just write the max value is and then we can calculate the maximum value and print it from here so we can use this comma and then we can use this inbuilt function which is max and then we will just pass these three values which is x y and z so will this program work let's see so first of all before doing anything you need to once again save this file okay so right now you can see there is a little asterisk symbol here in front of my file which means my file is not saved so you need to first of all save your file and then you will see this asterisk is gone that means our file is saved so let's run our code so if you want to run this python file using your idle ide you just need to click on the run button here and then choose the third option which says run module so i'm going to click on run module and after some time you will be able to see this output printed on the idle ide so it says enter the first number which we have written in our code you can see this line is executed first of all so we will enter some number i'm going to just write 50 here and then press enter and then it asks us to provide the second number so let's say this number is 90 and now we need to give the third number so i'm going to just give 1 0 1 here and then press enter and it says the max value is 1 0 1 which is correct but in real world you will not have this idle ide installed everywhere so how can i run my hello dot py file so i'm going to minimize this idle ide for now and i'm going to go to the location where i have saved this hello dot py file okay so just go to the location where you have saved your hello dot py file and now you just need to double click on this hello dot py file so i'm going to just double click on this hello dot py file and you can see as soon as i double click on hello dot py it opens this program in our terminal okay so once again i'm going to close this terminal and i'm going to double click on my hello dot py file and it opens our program in our terminal so once again i'm going to give three inputs here let's say one one zero enter 55 enter 200 and enter as soon as you press enter this window disappears so why this window disappears because after the execution of your program this terminal immediately closes so we need to provide something in our program in order to avoid the closing of this terminal and how we can do this we can do this using our input method which is a inbuilt method right and here we can just type press any key to exit so what will happen here is after printing the result your terminal will wait for the user input and once the input is given by the user then only the terminal will exit so let's test our program once again but before this don't forget to save this program so i'm going to just save my program and then i'm going to open the folder where i have saved this hello dot py file and once again i'm going to double click on this hello dot py and i'm going to give three numbers here and then i'm going to press enter and it prints 99 which is the maximum out of three numbers and at last it asks us to press any key so i'm going to press any key for example z and then press enter and this terminal disappears so now the question is how does this python file is executed without compiling this file so the answer of this question i have already given in the introduction video and the answer is python is a interpreted language and not the compiled language so what happens in normal languages like java c plus plus c you have a source code and this source code you need to compile in order to convert this source code into an executable file for example you have a hello.java file you need to compile this java file in order to convert it into a hello dot class file which is a executable file and when you run this hello dot class file hello world or whatever program you have written will be executed now in the case of python because it's a interpreted file you just need to create this hello dot py file and you just need to run it you don't need to compile this file and that is the difference between interpreted languages like python and the compiled language like java c plus plus or c now there is one more way using which you can run your python file and that is by using your command prompt so i'm going to open my command prompt i'm going to right click on this windows icon and then i'm going to open this command prompt from here so make sure that this command prompt is able to understand this python command so first of all type python on your command prompt and then press enter and if it shows you this output like python and the version of python then python is working on your command prompt so this command prompt is windows command prompt and not the python shell which we have installed so this is our windows command prompt right now let me make this terminal little bit bigger so we will be able to see what i'm typing so i'm going to change the font size to let's say 24 here so now we will be able to see what's happening you can just write quit and then these two parentheses and then press enter and you will come out of this command prompt so you need to come out of your command prompt in order to execute your python file now in here what you need to do is you need to copy the path of your python file so i'm going to right click here and then go to the properties and then in the securities i'm going to just copy full path of this python file up to dot python okay so i have copied full path of this python file and now what i need to do is i need to just write python here okay so just write python and then paste the path which you have copied so i'm going to just paste the path which i have copied and then press enter and you can see our program is executed so i'm going to just give quickly three numbers and it gives us the maximum of these three numbers now i will just type any letter here and then press enter and i will come out of this terminal there is one more way of executing your file and this is you need to just give this command which is cd and then your directory path so up to your directory you just need to copy this path from here okay so you just need to copy this path and then after cd you just need to give space and then paste this path without your hello dot py file okay so i haven't given the hello dot py file name here and now press enter which will change your directory to your python directory so now we are inside our python directory from here you can directly give python and the name of your file which is hello dot py and then press enter and once again the program opens so we can just give three inputs here and the result is shown once again i'm going to just type any key or any letter here with for example r and then press enter and now i'm out of this program so this is how you can run your python script on any terminal you don't need any ide or any other special software in order to run your python script you can run it on your terminal or directly click on the python file till now we have been using idle ide in order to develop our python code now the reason behind why i was showing to code in python using idle in the first few videos because i wanted that you get familiar first with python interpreter so now whenever you want to test some functionality in python you don't need to open any ide or any editor you can just open your terminal and then test that functionality until you wanted to test something terminal or python interpreter was okay but when you want to develop a big project using python we need to use some kind of ide ide stands for integrated development environment in order to develop such kind of projects so in this video i'm going to show you how to install pycharm on your windows 10 operating system which is the most popular ide today used by developers to develop python code so let's get started and let's see how we can install pycharm on our windows 10 operating system so open your favorite browser and search for pycharm and the first link which will appear here will be from jetbrains.com forward slash pycharm so jetbrains is the company behind this ide and this company which is jetbrains is famous for making very good ides so jetbrains has also created some other ides like android studio intellij idea webstorm and many other ides which are popular between developers nowadays so we are going to just click on this link so now we are inside this jetbrains.com website and here you will be able to see this logo pie charm and you will be able to see this download button here so i'm going to click on this button which says download now and then you will be redirected to this page which is for downloading pycharm so here you can select your platform whether you are working on windows or mac or linux and what we want to download is we want to download the community version of pycharm this community version you can see is free and open source so you can download and install it with no cost if you want to download the professional version then you need to pay some money to jetbrains in order to use it and as soon as you click on download button this download of pycharm community version dot exe file will start so i will wait for this file to be downloaded so now this exe file is downloaded on my windows operating system so i'm going to double click on this exe file and i'm going to minimize the browser and now you can see pycharm setup wizard has been started so here you just need to click next and this is the location where pycharm will be installed on your system so it will be installed inside your c directory then program files jet brains and then there will be a directory created which will be called pycharm community edition whatever version you have downloaded so i'm going to click next now on this next window you will see two options one is to create a shortcut so we are going to choose this option which says 64bit launcher now the second option here is create associations and i'm not going to check this checkbox because i don't want that on my computer every dot py file to be associated with the pycharm so i will leave this unchecked and the next option here is download and install the jre x 86 by jetbrains there is no harm in this so i'm going to check this box and i'm going to click next and now i'm going to click on the install button so this is going to start installing pycharm on my windows 10 operating system so i need to wait for some time until this installation is finished so now the installation of pycharm community edition is finished on my windows 10 operating system and you can also see there is a pycharm shortcut which is created on my desktop now i will check this checkbox which will start the pycharm ide and i'm going to click finish which is going to launch the pi charm ide now for the first time when pycharm starts it will ask you this question whether you want to import any settings from the previous installation of pycharm we don't have any previously installed pycharm so we are going to just leave this as default which says do not import setting and then click ok and then you will see this license terms and conditions window if you agree with all these license terms and conditions then just click accept and one more window appears here which is for data sharing so i'm going to just say don't send and now you can see pycharm ide has been launched so for the first time it will ask you which ui theme you want to use you want to use the darcula which is the dark theme or the intellij theme which is the light theme so i'm going to choose this light theme which is intellij theme and then i'm going to just click on next and on this next window you will see some featured plugin so for now i'm not going to install any of the plugin i'm going to just say start using pycharm which is going to start the pycharm so now pycharm ide has been started so let's create a new project here so i'm going to click on new project and now we need to give the title of this project and pycharm will ask you where you want to save this project so i'm going to just give the name to my project so let's name our project as hello world and then i'm going to just click on create button which is going to create our python project so now you can see pycharm ide has been started so you can see the first thing you will see here is tip of the day i'm going to just close this tip of the day and i'm going to maximize my ide window and you can see our project is shown on the left hand side so let's create a python file and we are going to just run some code using this python file so we need to just right click on our project and then click on new and then choose a python file from here and now we just need to give the name to our python file for example hello without any extension so you don't need to provide any extension when you choose this option which says python file and now click ok and now you can see on the left hand side that this file is created which is hello dot py this dot py extension is added by pi charm for us and now on this editor for example let's print hello world once again so i'm going to just print the hello world you already know how to print hello world right and once you have written your code you just need to save your code by pressing ctrl s and now you can just right click on your file and choose this option which says run hello so i'm going to just click on this option which says run hello and you can see this output is printed on this run window so this is how you can install pycharm on your windows 10 operating system in this video we will talk about using strings in python but before that i want to show you something and that is how to comment your code in python or how to write a comment in python so for example i have this line of code which is used to print hello world on terminal now for some reason i don't want to execute this line of code then i can convert this statement into a comment and how do i do this you can just add an asterisk in front of your code and this makes your statement a comment a comment means that now this line of code will not be executed by python so let's run our code and let's see what happens so you can see now it doesn't print hello world because now this is a comment now generally we use comments in order to provide some information about some functionality or what we'd want to do with our code so let me remove this line and because it's a python strings video we can just write after this hash symbol python strings right and this means that this is a comment and this line will not be executed by the python interpreter now there is one more way of giving a comment in python which is by writing the double quotes three times and this is also a comment so when you write for example python strings this is also a comment so this will also not be executed by python interpreter so what is the difference between this hash comment and the comment with these three double quotes so it turns out that using these double quotes you can write multiple line comments so for example i want to write a multiple line comment let's say i want to write python string tutorial i can write this multiple line comment using these triple double quotes so let's get started and let's see how we can use strings in python so i'm going to declare a variable and this variable i'm going to assign hello world here right and to print this hello world we can just write print and inside the parenthesis we can use this x variable and when we run the code it runs so we already know how to use this kind of string in python the second way of creating a string is you can use the single quotes instead of double quotes and this is also a valid string so this will also work so let me just print this also which is hello world using single quotes and when i am going to run this it's going to give me the result let me remove this spaces between the print and these parentheses so let's say you want to add a single quote into this hello world string so let's say i want to just write hello single quote s hellos world so this is totally possible in python so whenever you surround your string using double quotes you can just add the single quote without any problem but when you do the same with this string this will give you a problem because now python thinks that your string starts from here and ends at this place just after hello and this will be seen as some kind of garbage by python so in order to use these single quotes inside the string which uses single code you use a escape character and the escape character in python is backslash okay so when you add a backslash in front of a character python interpreter knows that it's a escape character so this will be treated as a valid string so let me just print the result and you can see it prints the same result now now let's say i want to use a double quote in this string which uses double quote already so i'm going to just give a double quote here and the same problem arises which we have seen in the string with single quote so to escape this you can also use backslash and the problem will be gone let's run the program and it gives us this hello world with double quotes so you can print this double quote using this escape character which is backslash now let's say you want to print a string with a backslash itself so i can add a backslash here and i want to add a backslash here and let's save the code and let's run it and let's see if it runs or not so it turns out that you can use this kind of notation in python also when you use double backslashes here and here let's see what happens so when we run the code it will give us the same result because one backslash is a escape character and other backslash is the part of the string so it will print the same result so you can use this for escaping this character or you can remove this the result will be same so now let me edit these two strings and i'm going to use hello here with the capital h and i'm also going to assign hello to the y variable with a small edge here now python provides us some inbuilt functions which you can use with strings so this is a string right so you can use some methods related to strings on the x and y variable so let's see what are these methods so after the x i can just press dot and you can see so many suggestions is given to us by pi charm and this is called intellisense which is provided by pi charm to us and intellisense means that whenever you type something pycharm will try to suggest you some supporting code for whatever you are typing so let's use some method which are suggested to us so i'm going to use this capitalize method so let's use this capitalize method with the x and y variable and let's see what happens so i'm going to run the code and you can see now the upper string is printed same but the lower string is printed with a capital h in front of it so this capitalize method capitalizes the first letter of the string now let's see what are some of the other method which we can use so there is a method called upper and also there is a method called dot lower so let me just rewrite this hello in all capitals and let's run the code now and you can see in the result the upper method has converted our string into all upper letters and the lower method has converted our string into all lower letters now in python everything is an object so using these square bracket you can extract each and every letter based upon their index so for example i write index 0 here and in the y i am going to use the same square bracket and i am going to write 1 here which is the index 1 and let me run the code and it prints the first character of the string because it's at index zero and here you can see the second character of the string which is at index one so always remember indexes starts from zero not from one now in python you can also get the sub string out of a string so here inside these square brackets i can just write that i want a substring out of this complete string first three letters of this string so i can just start from zero and i can just say i just want to stop at three that means we will get i think the first three character of the string also let me add some spaces into the second string here and in python there is a method called strip so i'm going to just use this trip method and let's run the code first of all and let's see what happens so you can see first of all this print has printed first tree letter of this string so you can see this notation means that we are telling python to give a substring starting from 0 until 2 until the index 2 okay and we are saying that we want to stop at index 2 that's why we write 3 here now if you want to just print hell we can write here 0 to 4 and then we can run the code and then we get hell if you want to get only e l l you can write 1 to 4 here and then it will give you e l l out of this string and this is how you can strip your string so strip means the spaces from the start and end will be stripped off this string now let me show some other method related to the strings so first method i want to show here is there is a method called is lower and then there is a method called is upper and then there is a method called dot replace which is used to replace some character inside the string so let's say i want to replace capital h by let's say j and the last method i want to show is how to split the string but that we will see in a moment so let's run this code and the first result says false because this string is not lower when we write all letters in lowercase then only it will give us true otherwise this method is lower will give us false now let's rerun the code and now it gives us true because now every letter in the string is lower second method gave us true because we were checking whether every letter in this string is capital or not the next method replace is used to replace the character if it's there in your string and replace it with this character if this character is found in your string so this capital h is not present in our string right so let's just add this capital h into our string and let's see what's the result so now the capital h is replaced by capital j here in the result the next method which you can use with the string is a split method so you can write y dot split and this is used to split your string using any character so i'm going to once again write hello comma world here and i want to split this string using this character which is comma so i can just write using single quote these comma and once i run the code you can see it gives us an array of two members one is hello and other is world with a space right because we have splitted our string using this character that's why the space is here right so that's why you can see this space here also in the second element of this array so there are number of methods which are associated with string which you can use and for knowing all these method you just need to write your variable which contains a string and then just write dot and you will be able to see the suggestions which you can use with the strings so you can use the title method for example or you can use the translate method or you can use all these method which are available here okay so just see all these suggestions and see what you can use from these method also if you don't have any variable in which you have assigned your string you can directly take your string for example hello and then you can just write dot after this hello and once again you will see all these suggestions because this hello is also a string let me show you one last thing which you can use with string very quickly so you can write print here and then if you want to print this hello for example 10 times how will you do this so you can just write for example x comma x comma x this is how you can do this let's say you want to print this hello hundred times how you can do this so there is a trick in python which you can use and this is using these asterisks you can print the string multiple times so for example i want to print this hello 10 times i can just write my string variable name asterix the number of time i want to iterate this string so let me run the code and you can see now this hello is printed 10 times let me provide the space here so there will be a space between the two hellos right let us say i want to print hello hundred times then i can just write hundred here and then run the code and it will print this hello hundred times on the terminal so this is how you can use strings in python in this video we will talk about the boolean values comparison operators and the logical operators in python so first of all what is a boolean value so in python boolean values are two constant objects which are true and false now for this demonstration i will be using a python interpreter and in pycharm you can open the python interpreter by going down at the bottom and you will be able to see this option which says python console so just click on this python console option which is going to open the python console and you can move this bar up and down in order to expand your console right so let me just clear this console so we will start from the top so in order to clear this console you can right click and then just say clear all and it's going to clear the console and let me resize this console up to the top and let me just minimize this section also so as i said boolean in python are two constants objects which are true and false so how you write true and false in python you write true with a capital t and press enter this is a true value and false you write with a capital false this is a false value now if you write true with small t this is not recognized by python also when you write false with small f this is also not recognized by python now generally we use boolean values in order to find out the result of some condition now let's say you have two numbers and you want to find out which number is greater out of these two numbers you can use a comparison operator to compare these two numbers and the result will be shown as a boolean value now the next question arises what is a comparison operator so in python these are some of the comparison operators you can use so you can use this double equals to check the equality between two values you have this not equal operator with this exclamation mark and equals which you can use to check the nonequality between two values there is a greater than operator and there is a less than operator and also there is a greater than equals operator and the less than equals operator now examples of each of these operators i have given here so how to use these operators as i said if you have two values let's say two integers x and y to compare these two integers whether they are equal or not you write on the left hand side first variable and on the left hand side second variable and in between you use the comparison operator it can be equal to operator or nonequality operator or greater than or less than or greater than equals or less than equals operator so let's see how we can use these operators in real python environment so let's say i want to check whether 10 is greater than 9 or not and when i press enter it's going to give me true because 10 is greater than 9. now once again let's check if 10 is less than 9 or not and it will give me a false value which is also a boolean result also we can check equality between two values so we can just write hundred is equal to 100 or not and it will give us true once again we can check if 100 is equal to 99 it will give us false in a same way you can also check for the nonequality so for nonequality you use this exclamation mark equals and then press enter it will say true because 100 is not equal to 99 the same operation you can also perform with some variable so let's say i have a variable called x whose value is 20 and i have a variable called y and i assign 30 to it and let's say i want to check whether the value in the x is greater than or equal to the value which is there in y then i can write this kind of a statement and when i press enter it's going to give me false because 30 is not greater than or equal to x so let's assign a value which is 30 into our variable x and now let's check whether x and now let's check whether x is less than or equal to y or not and when i press enter it's going to give me true because we know that x which is 30 is not less than y but it's equal to y and this condition is true now you can also compare two strings using these operators so let's say i have a string called hello and i want to check whether the hello value is equal to some other value for example hello in double quotes or not and it will return me true that means whether you write hello in single quote or hello in double quote both these values are same in python now also we have seen in the last video where we have seen how to use strings that whenever for example i write a string i can use this dot operator in order to call some functions related to strings so some of these functions returns a boolean value so for example we can check whether this hello all letters are in uppercase or not and once i press enter it says false or i can check whether in this hello all letters are in lowercase or not this will give me true or i can test whether in this hello string all letters are alphabet or not this is going to give me true because all letters are alphabets now if i check whether in the string whether there is a alpha numeric value or not i can use this method which says is al num and this will check whether in my string there is a alphanumeric value or not now the next question you may ask is for example i want to evaluate two conditions at the same time let's say i want to evaluate whether 10 is greater than 9 and i want to evaluate whether 20 is less than 15 or not so how can i evaluate these two conditions at the same time so for those type of comparison we use that logical operators and there are three logical operators which we can use in python an end operator an or operator and a not operator so this and operator you can use to evaluate two conditions and it will return true only if both conditions are true okay so let's say you have two conditions x condition and y condition then if you use this and operator then in order to get true out of these two conditions both conditions have to be true in the case of r it will return true if one of these conditions is true so whether x is true or y is true it doesn't matter but if only one condition is true this will give us true value and the not operator will return the opposite of what we have so if some condition returns us true then when we use not operator then not operator will make this false so let's try all these three operators in python so i said i can use an end operator to check whether this value is true as well as this value is true or not so when i press enter it returns us false because even though the first condition is true which is 10 is greater than 9 but the second condition is not true right so in case of end both condition should be true in order to get the true result once again when i use the same conditions and instead of end i use the or operator it will return me true because one of these conditions is true which is 10 is greater than 9 even though the other condition is false now let's say we make both conditions true and we use r and when we press enter it's going to still returns us true so the minimum requirement of or is there should be at least one condition which evaluates to true now let's see how we can use the not operator so i can write not and then i can check whether 10 is greater than 9 or not and when i press enter it returns us false because we know that 10 is greater than 9 and not makes it false so it returns us false once again if we check whether 10 is less than 9 or not it's going to return us true because 10 is not less than 9 and this condition will return false and not will make it opposite which is true so in this way you can use boolean values comparison operators and logical operators in python in this video we will learn how to use if else statements in python so first of all what is a if statement so a if statement is used to execute a statement or a block of code if and only if a condition is fulfilled so first of all let's see the syntax of if statement so let's say i declare a variable called x whose value is 100 and then i'm going to check whether the value in x is equal to 100 or not so i can use this keyword if and then if you have seen the last video in which i have shown you how to use comparison operators and logical operators then you will know that for equality we use a double equal symbol and then i'm going to just check it against hundred now after the condition you need to give this colon in order to tell python that this condition is finished and you need to press enter and you will see that there is a indent given to our code and you can see this cursor is here which is four spaces away from this start or one tab away from the start and here i can just for example print the value of x so i can just say x is equal to and then after the comma x and let me save this code and run this code and you can see on the run window here x is equal to 100 is printed because this condition which we are checking using the if statement is true which means whatever code or statement or block of code you will write under if it will be printed let's say this condition is not fulfilled so i'm going to just say that x is not equal to 100 which is a false condition and when i run the code now it doesn't print anything because this condition is not fulfilled and that's why this statement is not executed now let's talk about the indentation little bit so indentation in python is the way of marking a block of code so you can see i have given four spaces indentation here so one two three four or if you are using pie charm when you press enter after an if condition you will see that automatically this cursor is pointing here which is four spaces away from the starting point so this means that whatever you write after these four spaces or a tab is the part of this if statement now if you are familiar with c or c plus plus this indent acts like a curly bracket in c or c plus plus so in python you don't use the curly bracket to define a block of code you use indentation to define a block of code so i can write this statement like this also so i'm going to just say x is equal to and in the next line i can just give one more print function and i will print x from the next line and you can see here also i have given indentation after this starting point and this means that these two lines are the part of this if statement so let me change the value of x is equal to 99 and when i run the code it will print x is equal to and in the next line it prints 99 using this line of code so you may ask what happens when i will write this print function here and let's say we want to print finish here okay and let me run the code and let's see what happens so it prints finish now let me just change this condition and i'm going to just say 100 here and let's see what happens now so now only finish is printed because this line of code is not the part of if condition only statement which you write after four spaces will be the part of the if condition like this line and this line of code but if you don't give any indentation here that means that this line of code is not the part of the if statement now let's take another scenario and this time i want to check whether the value of x is a positive value or a negative value so i will start from here and i will give one more if statement here and i will just check whether x is greater than 0 or not and then give this colon to indicate python that i have finished this condition and then if it's greater than 0 then i'm going to print that x is positive now if x is not positive and if it has a negative value i need to somehow print that x is a negative value and for this you use a else statement so here you can write else and once again you need to give the colon here and then under this else statement once again you provide four spaces or a tab indent and you can once again write print and this time we can write x is negative this means whenever this condition is false and if and only if this condition is false then only the else part will be executed so whatever code or block of code you write under else that will be executed if and only if the condition here is false so seeing the value of x which is 100 which is obviously greater than 0 it's going to print that x is a positive value now when i change the value of x is equal to minus 100 here and once again i execute the code first of all it prints that x is minus 100 here because first of all this condition is checked and obviously minus 100 is not equal to 100 so this condition is true so these two lines of code are executed because this condition is true and here because this condition is false that's why this statement is not printed and the execution of code goes to the else condition and then this line of code will be executed which is x is negative and you can see here and this line of code is independent of both these if statements and that's why it will be printed always now as we have seen from our last video that we can provide multiple conditions using a logical operators so we can here also write that if x is not equal to 100 or if the value of x is less than 0 let's write here x is less than 0 then only we want to print this statement so once again when we run the code in this case both the conditions are true that's why this is printed if we write here that x should be greater than zero then also this will be executed because one of the condition is true and because in the case of r we only need to satisfy one condition out of multiple conditions in the case of end when i write end here and run the code now you can see this is not executed because one condition is true here and other is false and in the case of end we need to satisfy both the conditions and then only these two statements will be executed or this block of code will be executed so this is how you can use if else statements in python now in this video i'm going to show you how to use lf statement with if else statements and how to use nested if statements in python so let's get started so what i'm going to do is i'm going to declare a variable and i'm going to ask the user to enter some name so i'm going to just write enter a name here and when the user enters this name i want to compare this name with some predefined names so in the last video we have already seen how to use if statement so i can just write name is equal to and i can compare it with some name so let's compare it with a name called max here and i will give this colon here and once the name matches uh this name i'm going to print a name so i'm going to just write name entered is and whatever the name provided by the user so i will just use this name variable here this we have already seen in the last video now in python you can also use a l if statement and the signature of ls if statement is you can just write lf here and then you can provide some other condition which returns boolean so i can once again here write if the name matches some other name for example leo and once again i'm going to just print the name entered by the user and this lf condition i can use any number of time after the if let me match this name to some other different names for example roy and the last name will be ali so if the name matches max this statement will be executed if the name matches leo this statement will be executed if the name matches roy this statement will be executed and if the name matches ali this statement will be executed now if the name entered by the user does not matches any of these names then we can use a else statement so we can just write else here and we can just print a message here so the name entered is invalid so this message will be printed when the name entered by the user does not match any of the name i am checking here so let's run the code and let's see what happens so now my code is running and i'm going to give the name a max here for example and then press enter and it prints this message which says the name entered is max using this statement now once again when i run the program and this name matches let's say some other name ali and then when i press enter it prints the name entered is ali which means this statement is executed and let me run the program once again and when i give some random string here it prints the name entered is invalid now let's say the name entered by the user is max and this condition evaluates to true then this statement will be executed and the other conditions which we have given using lf statement will not be evaluated so let's say we will write max here also so this condition and this condition is same right checking for the same name and when i run the program and when i write max here only one statement is printed which is this one so we can see when this condition returns true only one statement is executed and none of the other conditions are even evaluated now the important thing to note here is you cannot start with a l if statement you need to start with the if statement so you need to write a if statement and check the condition first and then only you will be able to write l if condition now it's possible to use multiple if condition and then this lf will become the part of this if condition and this will be the separate if condition so when i run the code once again and when i write max here it's going to print two statements one is using this and other is using this because this if condition and this if condition are two different if conditions and once you use l if so i'm going to use alif here then this alif is the part of this if condition so this is how you can use if statement with lf statement and else statement now let's see how to use the nested if statement so i'm going to declare a variable called x and the value i will assign to x is 10 and then i'm going to write an if condition and here i'm going to just evaluate where the x is less than 0 and when x is less than 0 i'm going to just print that x is negative else if the value is not less than zero so i'm going to just write else then i'm going to just print x is positive now let's say i also want to evaluate if the x value is a even number or an odd number if the x value is positive so under the else i can once again write if and then we can just evaluate this condition that if x modulo 2 is equal to 0 which means that when x modulo 2 returns a 0 that means it's a even number so we can print x is even otherwise in the else condition i can just write else x is odd so in this if condition i'm checking if the value of x is less than 0 or not and if this condition is not satisfied then i'm checking whether x is up even number or x is an odd number so if you remember indentation here is very important so this if condition falls under the else condition right so this if condition and this else is the part of the else statement so because we have provided this four space indent here whatever code you write with this indent is a block of code and what we are essentially doing here is we are nesting one if else condition inside the other if else condition you can also reverse this condition checking and you can also say if x is greater than or equal to zero then the value of x is positive otherwise the value of x is negative and this statement you can write under the if condition also and this is also our nested if else statement and let me run this program and you can see x is a positive value because x is equal to 10 and x is a even value so once this condition is true this statement will be printed and whatever if condition is there inside the parent if statement that will also be executed and this condition is checked first of all and obviously this condition is true in this case when x is equal to 10 because when you do x modulo 2 it's going to give us the remainder 0 and that's why x is a even value and that's why it's printing x is even here so it's totally possible to use one if else statement inside the other if else statement and this type of if else statement are called nested if else statement in this video i'm going to show you how to use lists in python so first of all what are lists so list in python is a kind of collection which allows us to put many values in a single variable you can also say that list is an ordered set of values so let's define a list so i'm going to just say x is equal to and you can define a list inside these square brackets and inside the list you provide some values so for example i'm going to provide the values 3 comma 5 comma 4 comma 9 comma 7 comma 10. so this is how you can create a list in python and when i press enter it's going to create a list and when i just use x to get the list it's going to provide me all the values in the list now these values which are inside the list are called elements so 3 is an element or 5 is an element or all these values in this list are all called elements and all these elements are ordered by their index now index as i already said in the previous videos also always starts from zero so we can fetch the value which is at index 0 using this square bracket once again with the variable name and then when i write index 0 it's going to give me the element which is saved at index 0. so looking at this list 3 is at index 0 5 is at index 1 4 is at index 2 and so on so let's say i want to get the value which is at index 4 0 1 2 3 4 so i'm going to just write x square bracket 4 and it is going to give me 7 which is saved at index 4. now it's not necessary that list must contain all the same data type elements so for example i can also declare a variable called y and in this i can save some name for example max i can save integer let's say 1 i can save a decimal value let's say 15.5 i can save other list inside this list using these square brackets for example three comma two so one list can contain different type of data types with any number of elements so when i press enter and this time i want to get the value which is at index zero it's going to give me max and once i want to get the value which is saved at index 3 then it's going to give me this list which i have saved at index 3. now when you try to access the index which is not there so i'm going to just write y and then i'm going to say hundred and this value is not present in this list at this index so i'm going to press enter and it's going to give me the error which says list index out of range now if you want to get the length of the list you can use the inbuilt function in python which is len and then your list name so for example i want to find out the length of list x it's going to give me 6 it's going to give me 6 because you can see here this list contains 6 elements or i want to get the length of the second list which is y and it's going to give us four because this list contain four elements now it's also possible to insert and remove elements from the list so for example i'm going to use x which has six element till now and i'm going to insert the seventh element so i can use a method called insert and you can see this method takes an index and the object name so i'm going to choose this and the index at which i want to insert the value is at index 2 and the value i want to insert is some string for example tom and i'm going to press enter and i'm going to print the values inside the x list then you can see now this list has 7 elements and tom is inserted at the index 2 because we have inserted this value at the index 2. in a similar way you can remove something from a list also so to remove something you can use your variable name for example x dot remove and the value you want to remove so for example once again i want to remove this name which i have inserted at index 2 and once again when i print the value of x it's going to give me these values now let's say the list contains two element which are exactly the same so i am going to insert one more element at index 1 and this element will be 3 for example and now my list contain double 3 here and if i want to remove this 3 so i am going to just call this remove function once again and i will say three here and then press enter you can see only one three is removed from this list so you can see these three are at index zero and index one so this value is removed which is at index 0 and this will remain in this list so if a list contains duplicate values it's going to remove the value from the left and also remove is going to remove only one object which is found first in the list now if you try to remove the element which is not there in the list so i'm going to remove something which is not even there in this list then it's going to give us this error which says that this is a value error and it cannot remove this value from the list now there is one more function with the list which is a pop method and this we can use to remove the values from the last so you can see our list was previously having 6 elements and 10 was the last element and when you use this function which is pop it's going to pop this 10 from the list and now let's see the content of the list so now this list contain only five element and the last element is now removed once again when you use this pop method it's going to remove the seven and now our list only contains four elements now let's say you want to delete the whole list so i'm going to declare a list and this list will contain a few values and then i will press enter and you can see the values of list and now i can use a function called del and then the name of the list and this function is going to delete this list so i'm going to just press enter and then once again try to access the values inside this variable and now it says the name z is not defined because delete function has deleted this list now once again i'm going to create this list z and now there is a function called clear which is used to remove all the values from the list so i'm going to just press enter and then try to access the value of z and you can see this list is now empty because we have used the clear function which is used to empty the list let me show you a few more functions related to list so let's say i can use x and the values inside x are 3 5 4 9 and i can use a function called sort to sort all these integer values inside the list and once i press enter now now you can see all the values are sorted and you can see all the values are sorted in ascending order you can also use this method x dot reverse and it's going to reverse all the values so once i use the reverse function and then when i try to get all the values inside the list you can see all the values are now reversed there is also a function called append and here you can append anything to your list so i want to append 10 to my list and when i try to access this list you can see at last this 10 is appended in my list also if you want to copy one list into another you can use let's say i'm going to declare a variable called s here and i want to copy all the values from x list i can use x dot copy and this is going to copy all the content of my x list into this new variable called s so you can see all the values are copied into the variable s so let me append something into my list once again so i'm going to append the 10 once again and now my list looks like this and there is a function called count using which you can count the number of element which are there in the list so i want to find how many number of ten are there in the list is going to return me two and once again i want to count how many threes are there in the list it's going to return me one let's say i want to count how many hundreds are there in my list it's going to return 0. so this is how you can use lists in python you can also use the list name and then dot and see all the methods which are available related to list here and you can use these method which you see here in this video we are going to see how to use tuples in python so first of all what are tuples so tuples are very similar to lists that is they are used to store the collection of elements in a single variable but there is a very important difference between them and that difference is tuples are immutable immutable means once tuples are created they cannot be changed or the content in them cannot be changed so lets see how we can declare a tuple so i am going to declare a variable called x and i am going to assign some values to it now in case of list we have seen we used the square brackets in the case of tuples we use these parentheses in order to store the list of elements so i can just write 1 5 3 4 and 8 for example and then press enter and it's going to create a tuple now in order to print the tuple you can use x and it's going to print this tuple now as i said tuples are similar to lists in some ways and that means you can call a tuple element by a index in tuple so all the tuple elements are arranged by their index and when you want to for example get the first element here you give the index 0 and then press enter and it's going to give you the value which is saved at index 0. let's get the value which is saved at index 4 and am going to press enter and you can see it gives 8 which is saved at index 4. now when i try to give a index which is not there for example 100 it is going to give us error which says index error tuple index out of range now as i said tuples are immutable that is you cannot change the content of a tuple if they are initialized once so let's try to test this so i'm going to just assign the value at index 0 which is let's say 2 and i'm going to press enter and you can see it says type error tuple object does not support item assignment that is you cannot assign any other value to a tuple element if they are once initialized now that also means that you cannot use some of the functions which you used with lists in the tuples for example you cannot remove any element you cannot append any element you cannot change any element so for example when i write x here and then press dot you can see there are few methods which are available with the tuple and most important is this count method so let us try to use this count method and i want to know how many number of eight which are there in this tuple and it will give me 1 because 8 is only present once in this tuple if 8 is present twice in this tuple here you will see the result 2. now in order to get the length of the tuple you can use the in build function which is len and then the tuple name and then press enter and it's going to give you the length of the tuple now in the previous video i have told you that you can save multiple data type values in lists let's see if we can do the same with tuples or not so i am going to give the parenthesis i am going to give the first value as integer second value as a string third value as for example the decimal value and i am going to press enter and i am going to get the value of y and you can see its totally possible to save multiple data type values in our tuple so now i have declared two tuples one is x and other is y so let's print x and y once again very quickly and now what we want to do is we want to use a concatenation operators so as i said tuples are immutable but let me define a third tuple here and i want to add x tuple and y tuple here and i want to assign the value to z is it possible let's check so i am going to just once again see the contents in the z variable and you can see when you use this plus operator or concatenation operator it is going to join these two tuple and create a new tuple with the combination of the values of both these tuples now there is one interesting thing which you can do with a tuple which is you can declare a variable and let me define a tuple with only one element and i am going to just give hi here and then after this element i am going to provide comma here so this is important i have provided this comma and i haven't provided the second element in the tuple and i can use an asterisk here and i can use some value here so let's say i have provided five here and i'm going to press enter and then i am going to see the values inside this a variable and now you can see a high string is saved five times in a variable in the form of a tuple so you can once again get this value at index 2 for example and it is going to give you the value which is stored at index 2 which is high itself you can also use a inbuilt function called max here to get the maximum value out of a tuple so max and i have provided x tuple here and you will be able to see it will give us the maximum value stored in that tuple and you can see here 8 is the maximum value which is there inside the tuple we can also get the minimum value using min function and it's going to give you the minimum value which is stored inside the tuple and also you can use our del function to delete a tuple so let's say i want to delete this tuple which is z here so i can just write the name of the tuple after the e l and space and then press enter and now once again when i try to get the value of z it is going to give me error which says name z is not defined so in order to delete the tuple you can use that del function so this is how you can use tuples in python in this video we are going to learn how to use sets in python so first of all what are sets so a set is an unordered collection with no duplicate elements and no indexing so let's see how we can use sets in python so you can declare a variable and then is equal to and you define the elements in set in a curly bracket so you can define multiple values here for example 1 comma 2 comma 5 comma 4 comma 7 comma 9 but keep in mind that set cannot have duplicate values so each value in set must be a unique value so for example what happens when we define a set with some duplicate values so i'm going to just declare this set and press enter here and this set is created now whenever i try to access the values inside the set a then it's going to give me this set and you can see the 2 which was a duplicate which we have defined here is removed from this set so a set always have unique values and if you define a set with duplicate values it's going to remove the duplicate values and only save the unique values in the set so let's see some of the methods related to sets and the first method is as always l e n method and you can find the length of a set using this l e n method and the name of the set which returns the length of a set you can also use a add function so a dot add to add a element in a set so i want to add 10 for example into my set i can use this and then press enter and once again when i try to get the values inside the set a you can see 10 is added to this set but this 10 will only be added if it's already not there in the set if it's already there in the set nothing will happen so let's try to add once again 10 to this set which already have a set and once again you will see that nothing happens inside the set because 10 was already there now if you want to add multiple values in a set you can use a update method so you can call this method which is update and then inside the curly brackets you need to provide these multiple values so let's add some values into this set so i'm going to add 15 18 17 let's say and 14 okay and then press enter and now i will see the values inside the set and you can see all these values are added to the set you can also remove the values from the set so i can use a method called remove and let's say i want to remove 18 from the set i can just give the element and then press enter and once again i will try to access the set and you can see 18 is removed from this set now there is a method called discard also so let's see how we can use this method discard works similar to remove method so for example i want to remove this 17 from my set i can write 17 here and it works fine right so when i try to access the value of a 17 is removed so what is the difference between a discard method and a remove method so our remove method whenever you use a remove method and you try to remove an element which is not there in the set for example i will try to remove 100 which is not there in the set it's going to throw an exception and it says key error 100. now if you try to do the same thing using a discard method so i'm going to use a dot discard here and try to discard 100 from the set which is not there in the set it's not going to give me any error and that's the difference between this card and remove so remove throws an error when a element is not there but this card doesn't throw any error it's not going to do anything if the value is not there in the set now there is a pop method also you can use with uh set so i'm i can use this pop method and then press enter and what it's going to do is it's going to remove any random element from your set so it's not necessary that is going to remove the element from the left hand side or the right hand side it will remove any random element from the set also for example i will declare a set of names let's say and if you want to clear the set you can use a clear method so i can use this clear method in order to empty this set so now when i try to access the values inside the set you can see it's an empty set with no values if you want to delete a set you can use a del function and then the name of your set and then press enter and once you delete it when you try to access it it's going to give you an error that name is not defined now you can also create a set using a set constructor so instead of these curly brackets you can write set and in the double parenthesis so you need to provide the double parenthesis here in order to create a set using the set constructor so this is also going to create this set called name and when i try to access the values inside the set name you can see it has created this set of names also you can convert a list into a set so let me define a variable called z and then i can use a set constructor and inside these parentheses i can use the square brackets which we use generally with lists and then you can define your list here and then press enter and this list will be converted to a set and you can see the result here now similar to the mathematical set operations like union intersection difference symmetric difference you can also use these mathematical operations related to set on the python sets also so let's see how we can use this mathematical set operations on our python sets so let me once again define a set i have already one set which is a which contains these values for example and i will define a set b with some other set of values so i'm going to define a set with for example so that is the content of the set b okay so now i have two sets and on these two sets i want to perform some set operations which are also used in mathematics so you can find out the union of two sets using a operator called or okay so when i write a and this pipe symbol which is called r b it's going to give me the union of these two sets and what is the union so union of two sets contain all the elements that are there in the set a or in the set b so or here is important right so i'm going to press enter and you can see it's going to give me the union of a and b that means this set contains all the elements that are there in set a or in set b also i can use a method called union instead of this or operator so i can use a variable dot union there is a method called union and then you can write b here and then press enter which is going to give you the same answer okay so you can either use this union method or this or operator now let's see how we can find out the intersection between two sets so in order to find out the intersection you use a and this operator end and then your next set which is b here so what is an intersection of two sets so intersection of two sets contains all the elements that are there in both the set that means set a and set b okay so when i press enter you can see it gives me two elements inside the set and these two elements are there both in the a set and the b set that's why we get only two values because these two values are there in set a and set b also again you can use a method called intersection so a intersection and then b which is going to give me the same answer so either you can use this method or you can use this operator now let's find out the difference between two sets so what is a difference between two set a difference of two sets contains all the elements that are in a but not in b okay so you can find out the difference by this minus operator here so when you write a minus b you will be able to get the difference between these two sets and this result will contain all the elements that are in a but not in b you can also use b minus a and then is going to give you other result because this time it's going to give you a set which contains all the elements that are there in b and not in a so difference between set a minus b is totally different from b minus a and also you can use a difference method so a then you can call a difference method b and it's going to give you the same kind of answer you can see here and also you can call b dot difference a and it's going to give you the another answer of b minus a now you can also find out the symmetric difference between two sets and what is the symmetric difference between two sets a symmetric difference between two sets contains all the elements that are either in set a but not in set b or they are there in set b but not in set a so this is the symmetric difference and you can find out the symmetric difference using this cap symbol and then b so a cap b i don't know what is the exact name of this symbol you can find out by yourself and when you do this it's going to give you the symmetric difference between a and b and whenever you find out the symmetric difference then when you do for example b this cap symbol a it's going to give you the same answer because symmetric difference give you same answer whether you give a cap b or b cap a the answer will be always same also you can use a method symmetric difference so you can use this method called symmetric difference b and it's going to give you the same kind of result now one last thing i want to show here is sets are not indexed or ordered so whenever you want to find out for example a and the value at index 0 it's going to give you an error because there are no indexes in a set and they are not ordered by any index so sets are unordered collection of values now if you want to find out what all other methods you can use with sets you can create a set and then write the name of your set and then press dot here and you will be able to see this is the list of all the methods which you can use with the sets also if you want to list out all the methods which you can use with sets you can use this inbuilt function dir and then you can provide any set name here which is your variable name and then press enter and once again it's going to print the list of all the method which you can use with the sets so this is how you can use sets in python in this video i'm going to show you how to use dictionaries in python so first of all what are dictionaries so dictionaries in python are like associative lists or a map now you can think of dictionary as a list of pairs so let me show you how to define a dictionary so you can define any variable name and to define a dictionary first of all you use these curly brackets and inside these curly brackets you provide a list of key value pairs so let's provide the list of key value pairs so first key is name and the name is max the second key is for example age and the age of max is let's say 14 and we can also write here in which year he was born so we can just write here and he was born in 2000 for example and i'm going to press enter here and once again i'm going to just access the values inside this dictionary which is d and you can see our dictionary is created now so as i said dictionary is a list of key value pairs and all these values which you see here before this colon are called keys so name is a key here here is a key here and age is a key here and whatever values you see after the colon are called values so max is a value 2004 is a value and 14 is a value and you can access the values from a dictionary based upon their keys so for example i have this dictionary d i can use the square bracket and the key name for example i want to get the name value i can just give the name key here and then press enter and it's going to return me the associated value related to key name in the same way you can use other keys also for example age and i'm going to press enter and it's going to give me 14 which is the value so age is a key here and 14 is the value now what type of data types you can store in a dictionary so as key you can define any data type so let me define a new dictionary here and i'm going to give these curly brackets and as i said you can define a string value as key also you can define a number as a key for example 15 colon 15. let's try the float values so i'm going to just write 15.1 colon 15.1 this is also allowed in dictionary so you can use string values you can use integer values you can use decimal values as key and also let's try the boolean values so you can use the boolean values also as keys and you can use a tuple also as a key so i'm going to just give a tuple 2 comma 3 and then i'm going to assign a value of 5 to this key and as values also you can use string values or decimal values or integer values or boolean values or any kind of collection you can use as a value so i'm going to press enter here and now to access let's say we want to access the value for this key which is this tuple so i'm going to just enter this tuple inside these square brackets and it's going to return me 5 or i can just provide inside the square bracket true here and then press enter and it's going to return me the value which is associated with it which is true itself or i can just write here 15 it's going to return me 15 in turn because 15 is associated with this value which is also 15. now what happens when a key is not there and we try to access it so i'm going to just access hundred from this e dictionary it's going to give us error that this key is not present in the dictionary you can also use the len method to find out the number of items in the dictionary and you can see it says five items are there in the dictionary e and we can count this item so this is one item two item three item four item and the fifth item is here or in other words you can also say that ali and function is going to return you the number of key value pairs which are stored in a dictionary you can also use for example i'm going to use my d dictionary now and you can also use a method called get and then you can give the key name here in the parenthesis so let's say i want to get the value associated with the name key i can get it like this and it's going to give me the value associated with the name key you can also add a new key so this d dictionary you can see there are right now three key value pairs and i can add one more key value pair so to add a key value pair you need to just write d and in the square bracket you just need to give the name of the new key so i'm going to just write so name here which is the name of the new key in the dictionary d and then you need to give the value associated with that key so when i press enter and once again when i try to access the values inside the dictionary now you can see that surname is added to your dictionary now if you want to remove any key value pair from a list then you can use d dot pop method and then the name of the key which you want to remove let's say we want to remove the surname once again which we have added and you can just press enter and now you can just print the values inside d now you can see the surname key value pair is removed you can also use a clear function so let's see what's there in the e dictionary so these are the values inside e dictionary i can use e dot clear to clear the values inside the e dictionary so once again when i try to access e it will give me the empty dictionary also you can delete the dictionary using del function and the name of the dictionary and when i press enter and when i try to access this dictionary e once again it's going to say that this name is not defined you can also update the values in a dictionary so this is my dictionary and i want to update the name for example so i can use the dictionary name and then the key here for example name and the new name i want to associate with this key is let's say a new name here and when i try to access this dictionary once again you can see the name is changed you can also use a method called update to update this key value pair so once again i want to change the key value pair which is name so i can give this curly bracket and then give the key value pair which i want to change so name and the new name will be max once again and once again when i try to access the dictionary it will give me this dictionary and you can see the name is updated now now there is a function in dictionary called keys which is used to list out all the keys of that dictionary so you can see it will list out all the keys of the particular dictionary there is also a function called values which will list out all the values of that dictionary if you want to list out all the key value pairs you can use the function called items here and it will give you the key value pair list now the last function i want to show here is let me list out the content of the dictionary first of all so there is one more function which you can use here is which is pop item and you don't need to give any argument with this pop item when you press enter it's going to remove the last key value pair which you have added or updated so here we have updated this name key value pair that's why this is removed and now when you try to see the content of the dictionary this name key value pair is removed so this is how you can use dictionaries in python in this video we will talk about the slice function in python and also we will talk about how to use negative numbers with index in python so let's get started so first of all i'm going to declare a list so now we have three variables first is a list second is a tuple and third is a string now there is a function called slice which you can use with your list tuples and strings to slice something out of your collection so to use this slice i'm going to declare a variable and then i'm going to use this function which is slice and you can provide some parameters in the parenthesis here so the first parameter you can provide here is for example start the second parameter you can provide here is the end and the third parameter you can provide here is the step so let's say i want to get out of this list the numbers from 0 to 4 so as a first argument we can define our number 0 which is the first index and at the end index we can define 5 and then i'm going to press enter and once again i'm going to use my list variable and pass this x variable which contains the slice object which is returned by this function here and then press enter and you can see here it gives me the values from 0 to 4 so the first argument in the slice function is the index from where you want to start the next parameter is the index of the element before which you want to stop okay so if you want to stop at four you provide the index five if you want to stop at index five you will you will provide the stop value as six okay so it will be always one more than what you want now there is a short notation for achieving the same also and for that you can use your list and inside the square bracket you can provide the start value and the end value and then press enter and it's going to give you the answer but instead of comma i need to provide the colon here and then it will give me the answer okay so here you can use colon to give the start value and the end value and also an optional value which you can give as a third parameter which we will see in a moment okay so this is the short notation of creating slice in python so as i said this is the start value and this is the end value plus one okay so let me show you something i have a list here and you can see here i have written you have the variable a it can be a list it can be a tuple or it can be a string and inside the square brackets you give the start value and the end value separated by this colon symbol and what it's going to give you is the items from start to end minus 1 okay so whatever end value you will give here you will get the value n minus 1 you can also use this notation so start colon and without giving the end value and also reverse is possible so you can give only the end value and not the start value and also this notation is possible so we will see one by one how to use all these notations so first of all i will give once again i will use the tuple now and this time i'm going to just give the start value let's say i want to start from 4 here and then colon and then press enter and it's going to give me the result from index 4 until the end of this tuple once again let me give the end value so instead of using this value before colon this time i will give the value after the colon and i will leave the start value blank and here let's say i just want to go before 6 so i'm going to press enter and you can see it will give me the result from 0 to 5 that is end value minus 1 right so until 5 and also you can give this kind of notation so this time i'm going to use the string variable and you can use colon without giving the start and end value and when i press enter it's going to give me the whole string let's say with this string i want to provide the start and end value let's say 0 to 5 and then press enter it's going to give me a string from 0 to 4. so this slice functionality you can use with the tuples lists and also with the string or essentially whatever collection which have the indexes you can use this kind of slides notation with those kind of collections now in addition with the start and end value you can also give the step values so let me just print the value of a once again and you can see the values inside the a and let's say i want to get out of this list 0 2 4 6 8 okay so essentially i want the every second value from the list so what i can do here is i can give the variable name and then start to end so from zero to index nine and the third argument here you can give is the step so let's say i want to get the every second value so i can give two here and then press enter and it returns me 0 2 4 6 8. now let's say i want to get every third value so i can write 3 here and it's going to give me 0 3 6. okay in a similar manner if i want to get the every fourth value i can write 4 here and then press enter it gives me 0 4 8. also if you don't want to give this range from start to end you can leave the start and add in the value as blank and then press enter and it's going to give you the same result now in python you can use indexes with the negative numbers also so let me explain what i mean by negative number index so let's say i have a string called python it have these character p y t h o n you already know that you can access the p character or p letter using the index 0 and the y letter using the index 1 and the t letter using the index 2 so this is the positive index right you can also use the negative index which starts from the right hand side so it starts from n and the index you can give here is from minus one so the last index here will be minus one then minus two minus three minus 4 minus 5 and minus 6 here so let's use these kind of indexes and let's see how we can use them so we have this string here and let's say i want to get this value which is 9 which is the last letter of the string so i can use c and here inside the square bracket i can give minus 1 and then press enter and it's going to give me the last letter of the string if i give minus 2 here it will give me the second last letter okay so the negative index starts from the right hand side and it goes from minus 1 till the end of the string now let's use this negative number index with the list which we have so we have this a list and we can use a and then we can give a colon colon 1 which is going to give you all the numbers in the reverse order in the list so our list was starting from 0 to 9 it will give us 9 to 0 in the reverse order now let's say if you want to get the first two item in the reverse order so this is when you use this minus 1 as the third parameter it will give you everything in the reverse order okay so minus 1 as the step value is used to give everything in the reverse order so when you give for example one here and leave the end parameter empty it's going to give you you can see one zero so as you can see our list starts from zero one it's going to give us the reverse order values so it's going to give us one zeros because here we have given one and it's the end value for this reverse string because we have used the minus one here let's take some more examples so instead of this start value i can give minus three here and then press enter and you can see it gives us eight and nine which are the last two items of the list in the reverse format okay because our index in reverse starts from minus one minus two minus three and we we are skipping the minus three option because we have seen that we just take the end minus one right so minus one minus two and these will be given to us in the reverse order because we have used minus one here now you can also give for example minus 3 as the start value so i'm going to give the minus 3 as the start value and then press enter and it's going to give us 0 to 7 right so 0 to 7 except 8 and 9 in the reverse order so because 3 this time is the start value and end value is until thus so because 3 this time is the start value so we go from minus 1 minus 2 minus 3 so minus 3 is this index and this is the start value so we get 0 to 7 in the reverse order so this is how you can use slice function and negative values with indexes in python in this video i'm going to show you how to use loops in python and we will start with the while loop so first of all what is a loop so a loop allows us to repeat over some block of code again and again until and unless some condition is met now let's see how to use while loop in python so let's say i'm going to declare a variable called i and i'm going to initialize it with the value 0 and to use a while loop you use this keyword and then you provide some condition so let's say i want to check whether the value inside the i variable is less than 5 or not okay and as in the case of if also we have seen we provide after the condition this colon symbol and then in the next line we write the code which we want to perform again and again until this while loop condition is true so let's say we want to just print something and we will print that the value of i is and then we will print the value of i like this also i want to change the value of i with every step so i will change the value of i using this expression which is i plus equals one this essentially mean that we want to just add one every time whenever this code is executed also we can say that we want to perform this operation i is equal to i plus 1 so this statement is similar to this statement let me provide some spaces here now in here also you will observe that i have provided some indentation here and indentation means that these two lines of code is the part of while loop okay so when i want to write something outside the while loop i will start from here with no indentation and let's say i want to just print that we are finished and now let me run the code and let's see what's the result and you will see here first of all this string is executed which is the value of i is and then the value of i is printed which is 0 1 2 3 and 4. so as you can see here that we have initialized i is equal to 2 so the initial value of i is 0. now when we come to this code and when this condition is checked here the value of i is 0 which is less than 5 that means this condition is true and that means that these two lines of code which are under while loop will be executed so this line is executed where value of i is printed which is i is equal to 0 and this line of code increments the value of i by 1 so when this line of code is executed now the value of i becomes 1 because previously it was 0 and once again this program flow grows to the starting to evaluate this condition and this time the value of i is 1 which is less than 5 and the condition is true once again and again this line is of code is executed and this line of code is executed and the value of i is incremented by 1 once again and the value of i becomes 2 here and this will happen again and again until the value of i becomes 5 and when the value of i becomes 5 this condition will be false and that means this code will not be executed this code will only be executed when the while loop condition is true and then at last this line of code is printed which is finished while loop now let me give you one more example of while loop and i will start from the top once again and this time i will declare a variable called num and i will initialize this value by zero and also i will declare a variable called sum and initial value of sum is also zero now here first of all i will ask the user to enter a number so i'm going to just write and also i will ask the user if he or she wants to exit from the loop he can enter zeros and then in the next line i will start with my while loop and i will give the condition if the number so if the number i'm going to write number is not equals to 0 we want to perform some operations and what operation we want to perform we want to ask the user to provide any number and we will transfer this number into the variable num so here i will first of all write input and then i will ask the user to provide the number and when the user provides the number i want to convert it to a float value so i will just type cast this input to a float value and then this number will be assigned to the variable num now here don't forget to give the colon and in the next line what i will do is i will just use my sum variable and i will just add the number value to the sum so i can just write sum is equal to sum plus num and this means that initially the value of sum will be 0 and then this number will be added to the sum and until this loop runs we will get the sum of all the numbers which is entered by the user and at last i'm going to just print the value of sum so now what do you think will happen so in this condition we are evaluating that num should not be equal to 0 and then only this code will be executed and we have provided the initial value of number is equal to 0 so this condition will never be met and this statement will never be executed so we need to provide the initial value of num is equal to 1 and then whenever the user provides the value this 1 will be overwritten by the value which is provided by the user so this time when we run the code you can see first of all the program asks us to provide a number so i will provide 100 here and then press enter and you can see the sum is printed which is equal to 100 once again we will provide some number and then press enter and now you can see sum is equal to 150 once again we will provide one number and then press enter and now the sum is one zero five zero now let's say we provide a number is equal to zero and then press enter you can see that our while loop is finished because 0 is not equal to 0 that means a false condition and then the flow of program comes out of the loop and then the other while loop will be executed which is this while loop and that's why this output is printed we can also write that sum is equal to so we know that this is the sum so sum equals and then after the comma we will print the value of sum and once again when we execute the code and once i want to exit from the code i can use 0 to exit so 0 and then press enter and i come out of this loop now python also supports the else statement to be associated with the loop statement so what i mean by the else statement to be associated with the loop statement is that i can use after the end of this while loop condition i can use here else and after the colon i can provide some code which i want to execute once this loop is finished okay so i can write here that i want to print for example finished sum so let me run the code once again and i will quickly provide some numbers here and which will provide the sum and when i provide 0 here then we come out of the loop and you can see this finished some string is printed using this else so once your program comes out of the loop this else statement will be executed similarly we can go down and here also instead of writing this finished while loop we can also give else statement here so i'm going to just write else and after the colon here i need to provide the indentations so four space indentation one twos three four and everything will be okay and once i run the code and first of all i will provide zero here to see if this is executed and you can see this else condition is called once your while loop is finished now also you can provide some condition here which is always true so for example i can write true here and this means that while loop evaluates to true every time and this means that this statement will be executed forever so this is also possible but you need to think carefully what do you want to do do you want to execute this code infinitely or do you want at some time that this condition will be false so this is how you can use while loops in python in this video we are going to see how to use for loops in python so first of all what are for loops so a for loop is used to iterate over a sequence and that sequence can be a list or a tuple or a dictionary or a set or a string so for that i'm going to declare some variables and the first variable is a which is a list second variable is b which is a tuple third is c which is a set fourth is a string and fifth variable is e which is a dictionary now before seeing the syntax of for loop i'm going to show you how to use in operator in python because it's used in for loop so i'm going to first of all use print and then i'm going to use 0 and then use in operator and then i'm going to use this first variable which is a which is a list right and let's see what happens when i try to run this code so it prints true so in operator will give you true or false depending upon whether this value is present in your sequence or not so for example when i write hundred here which is not present in the list it's going to return us false so this you can use with the tuple also let me just use it with tuple and let's use one here and i'm going to run the program and it prints true once again also we can use in operator with strings so i can write d here but for that i need to convert this one into a string so now when i run the code it will give me true now let's see how to use a for loop in python so for loop as i said we can use with some sequence so let's use it with a which is a list so i can write x in a and a is a list in this case and then i can just print the value of x and let's see what happens first of all when we just write this kind of a for loop so we are going to run the program and what it does is it prints the values from 0 to 5 which is the element present inside the list so for loop is going to iterate over your list one by one and this in operator is going to check whether this value is there in your sequence or not in this case in our list or not so first of all when for loop start it will transfer the first value which is 0 into x and then it checks whether x is in this list a or not and then it's going to print the value of x which is 0. and once again program sequence goes here and once again the next value is transferred to x which is 1 and once again this condition is validated if 1 is in this list a or not and then the value of x is printed which is 1 and this iteration goes on and on until 5 is reached which is the last value in the list so 5 is printed and after that there is nothing inside x and then the program flow comes out of this loop you can also use this for loop with the tuple also so let's try it with tuple and let's see what happens and it's going to print the same values also with the set let's see what happens so i'm going to run the program once again and it prints 0 to 5 once again because these are the content of the set also once again let's try to use this for loop with the string and let's see what happens and it's going to print out the content of this string which is 0 1 2 3 4 5 and it prints them one by one now with the dictionary we use this for loop in a little bit different way so for example i will write the variable name which is a dictionary and then let's say i want to just print all the keys inside this dictionary then i can write e dot keys and then we have all the keys using this function and when i run the code it's going to print all the keys inside your dictionary also when you use the function called dot values it's going to print out all the values inside your dictionary you can see max and the age 20. now let's say you want to print out all the key value pairs which are there in your dictionary you can use a function called items and this is going to give you keys and values right so i can just write key comma value here and then i can print the value of key first of all key and let's provide some space here and then let's print out the variable value here okay and when i run the code it's going to give you first of all key and then the value once again key and then the value so in order to print out the keys and values from a dictionary you can use this kind of notation now you can also use a function called range so let me show you how to use this function which is range which returns us the values starting from zero so there is a function called range here and in here you can provide a number and this range is going to return the number starting from 0 to 5. so whatever number you write here the range rate will be returned from 0 until that number accept whatever number you write here okay so let me just try to print out the values which is there in the x and when i try to print this it's going to return me from 0 to 5 and you can see here 6 is not printed because the range will give us the value except that value which you write here you can also provide the start value here so let's say i want to start from 2 and i want to go until 5 i can write something like this and now you can see now it start printing from 2 to 5. also you can give a third parameter here which is a step parameter so i can give 3 here for example and let's say i want to write 30 here and let's run the code and now what is going to return is it starts from 2 because we have given the start value 2 here and it's going to go until 29 because we have given 30 value here right and this is the step so every third value will be printed after 2 here so 5 will be printed then 8 then 11 14 17 20 23 26 and 29 every third value right if you write here two then we will increment in the step of two so this is how you can use range function with your for loop also as i said in the last video you can use else statement with your loops so i can also write else here and then after the colon in the next line i can print something or i can execute some statement so for now i will just print finished and then i'm going to run the code and once the loop is finished you can see this else statement is executed which prints finished so else statement will be executed once your for loop is finished so in this way you can use for loops in python in this video i'm going to show you how you can use break and continue keywords with your python loops so to start with i have here two loops one is a for loop and other is a while loop now this for loop takes a list and then print every element out of this list using this print function in a similar way while loop evaluates the value of i if it's less than 5 then it's going to print the value of i and then increment the value of i by one now this is all normal and we have already seen this kind of code now you can use a break keyword with your loops in order to terminate the execution of loop immediately so let's see how we can use break keyword first and then we will see how to use continue keyword so here i'm going to give a condition inside my for loop and i'm going to just evaluate whether x is equal to 3 or not and if x is equal to 3 i'm going to use this break keyword in a same way i'm going to use this if condition inside my while loop also but instead this time i'm going to evaluate i is equal to 3 and if i is equal to 3 then i'm going to use this break inside this if condition so let's run the code and let's see what happens and you can see in the for loop it has only printed 0 1 2. even though this for loop is supposed to print from 0 to 5 it has printed until 2 from 0 because as soon as this x value becomes 3 and we call break here the loop is terminated immediately and our program will come out of the loop immediately as soon as this break keyword is called in the case of this while loop also as soon as this i value becomes 3 we are calling the break keyword and as soon as this break keyword is called our loop is broken and the execution of code will come out of this loop so until 2 everything was ok but as soon as the value becomes 3 this break is called and then we come out of the loop let me just print a line here in order to separate these two loops so we know that from where one is starting right so i'm going to once again run the code and you can see for loop prints from 0 to 2 and also while loop prints from 0 to 2. if you uh change the value here for example here you want to evaluate xz is equal to 2 or not and here you want to evaluate if x is equal to 4 or not and then you break out of the loop and once again when i run the code you can see the for loop runs only 2 iteration for 0 and 1 and as soon as the value of x becomes 2 we call the break keyword and we come out of this loop and in the case of while loop as soon as this value of i becomes 4 we come out of the loop so the value from 0 to 3 is printed now let's see how we can use a continue keyword instead of this break keyword so instead of this break keyword i will use a keyword called continue here and also in the while loop also i'm going to use this keyword called continue and i'm going to run the program and let's see what happens so now when you see here so you can see here for loop starts from printing 0 1 and as soon as the value of x becomes 2 this condition is met and this continue is called and as soon as this continue keyword is called everything whatever code comes after this continue keyword will be skipped and your program execution goes once again to a for loop for the next value so you can see in case where x is equal to 2 and continue is called this statement is not executed because as soon as we execute continue in our loop then that iteration is skipped and all the code after the continue will not be executed okay so we go to the next iteration so that's why 2 is not printed because this was skipped in case of 2 and then directly 3 is printed and then 4 and 5 is printed in case of while loop also as soon as the value of i becomes 4 you can see 4 is not printed here you can also change this value to 2 and then i'm going to run the program once again and you can see while loop prints 0 1 and y it prints 0 and 1 so because as soon as the value of i becomes 2 this continue keyword is called and after that this iteration is skipped and also because this iteration is skipped these two lines of code are not executed and because this line of code is not executed that's why the value of i is not incremented and the value of i always remains 2 and that's why this becomes our infinite loop right so instead of increment the value of i at the last line we can increment the value of i just after this condition check whether i is less than 5 or not and then we run the code now you can see it prints 1 3 4 and 5. so now what's happening here is initially the value of i is equal to 0 and this condition is evaluated and then we first increment the value by one and that's why it starts with the printing of one by using this print function and as soon as i is equal to two this continue is called and that's why here 2 is not printed because as soon as the value of i becomes 2 this continue is called and every code or every statement after the continue will be skipped for that iteration that's why 2 is not printed here so in this way you can use break and continue keywords with loop in this video i'm going to show you what is a function in python and how to use functions in python so first of all what is a function so a function is a group of statements within a program that performs a specific task now functions can be of two types one is builtin function and other is user defined function builtin function we have already seen that print is a builtin function or for example input is a builtin function or for example min is a builtin function and so on now usually function does one task at a time so you can see this print function only prints something whatever input you give here it's going to print it input function takes some input from the user min function finds out the minimum out of some values so a particular function do one task at a time now let's see how we can define a function so to define a function you use a keyword def and then you give the name of the function so name of function and after the name of the function you give these parentheses and you provide number of arguments or parameters so for example arg1 comma arg2 comma arg 3 and so on so you can give any number of arguments to your function now after this ending parenthesis you give this colon and then under this function signature you write some statements which you want to execute when this function is called so for example if you want to print something you can print something or if you want to calculate something for example the product of two or three variables or a sum of two or three variables you can do under this function declaration so let's take an example or function and let's see how we can define our real life function so i'm going to define a very simple function which is going to add two values so i'm going to name it as a sum and for example it takes two values one is let's say arg1 and other is arg2 and then after the colon i want to add these two values so i can just write print here and then i can write arg1 plus r2 so this is a very simple function which takes two arguments and then add these two arguments and print them so this is how you declare a user defined function now after declaring a function you need to also call this function so in order to call the function you just use the name of the function and then you provide the arguments which is required by the function so our function requires two argument right now arg1 and r2 so we are going to provide these two values let's say i want to provide 15 as the argument 1 and i will provide 60 as the second value now let's run the code and let's see what happens so when we run the code you can see our function prints 75 which is the sum of these two values which we have provided as an argument to this function now also if you remember this plus operator you can also use to concatenate two strings so i can use this sum function and this time i'm going to provide for example hello as the first parameter and then world as the second parameter and then i'm going to run the program and it's going to print hello world in addition we can provide to float numbers here for example i will provide 15.647 and the second argument i'm going to provide is 80.258 and this is also allowed so i'm going to just run this code and it gives us the sum of these two values so this function sum is doing one single task which is to add two values whether it's a string or it's a number or it's a float value now you may also observe that when i provide for example as a first argument i will provide a string and as a second argument i will provide a number here will this work let's see so it's going to give us an error and this error says can't convert into object to string implicitly so this is a problem so to solve this problem we can provide here a simple condition and we are going to check the type of both the arguments so if type arg 1 is not equal to type arg2 this should be arg arg1 not agr1 so let me just change this here and if the type of arg1 is not equal to r2 we are going to just use this keyword which is return so this return keyword is used to return something so you can return for example 0 here or any string here and when you write this return function without any value here it's going to return nothing but as soon as this return keyword is called nothing after that will be executed so even though you are returning nothing from here then also this statement will not be executed so whenever return is executed after that all the statements which are under the return will not be executed also we can print a message here that please give the args of same type okay and let's run the code now and you can see now it prints this message which says please give args of same type so if these arguments are not of same type whether it's a integer or a string or a float value if the user provides first argument which is a string type and the second argument which is a integer type then this condition will be true and this statement will be executed which is going to print this message and then return is called and after this whatever statements are there will not be executed so now as i said you can also return some values from a function and here when you don't give any values after this return keyword it's not going to return anything but let's return the addition of two arguments using our return keyword so i'm going to use this return keyword here which is going to return the addition of these two values using this sum function so now what will happen is let's run the code once again and you can see this sum is executed this sum is executed this sum is executed but the result is not printed so in order to get the result out of this function when it returns something we need to save this return value in a variable so let's save this value into a variable and then you can use this variable to print the value of the sum so i can do something like this also you can directly and close this sum function inside a print function and then also it's going to print the sum of these two strings so either you can assign the result of this sum function which is returning the result into a variable or you can use directly this print function to get the result and print it so i'm going to use print with other two functions also so first print and the second print here and let's run the code once again and now you can see what happens so first of all it prints 75 which is the addition of these two numbers which is returned by this sum function into a variable a and we are printing the sum using this print function here in the next result it prints hello world because this sum function now returns the concatenation of these two strings similarly this sum function is going to return the sum of these two float values and in the last result because the type of hello is not equal to the type of 15 then this message is printed because this condition is true in the last case and then return will be called and when this return is called we were printing whatever is returned from the sum function and you can see at last none is printed because at last this sum function is returning nothing because the type of these two arguments is not same so we were returning without any value and that's why none is printed here now there are few things to note here okay so the first thing is you can define a function using def keyword and then the name of the function and under these parentheses you provide the argument so these two are called arguments so this is argument one and this is an argument two also you can use alternatively the name parameters for these two arguments so this is a parameter 1 and this is the parameter 2. now it's possible to return from a function like you can return the addition of two values or it's also possible to return nothing from a function so when you use return without a value it's not going to return anything now when you use this function somewhere it's called calling a function now at last let's discuss about some of the benefits of using functions so the first benefit is function makes your code simpler because if you don't use function to execute this kind of code then you need to write this code again and again whenever you want to use this functionality at different places the second advantage is function makes your code reusable so the same code is used to add to integer values to concatenate two string values to add two float values and it's also used to give the error if you provide the arguments of different types so that means you write the code once and use it multiple times and that results in faster development of the code so if you use a function you can develop your code much faster than if you don't use a function and the last but not the least advantage is when you declare functions you can test and debug your code in a better way so this is how you can declare and use functions in python in the last video we have seen how to declare functions and how to use functions in python in this video also we will discuss some more properties which are related to functions in python so let's get started so to start with i have a function called student which takes two arguments one is name and other is age and inside the function we just simply print the value of name and age using the print function and when we call this function with the name and age it's going to print this kind of output now python allows us to set the default value of the arguments so after this name you can put equals to symbol and then put the default value whatever you want to set for the name for example if somebody doesn't provide any name then you can just say unknown name similarly we can set the default age here let's say default age is 0 if somebody doesn't provide any age with the student function then the default value will be 0. now instead of using this student function like this let's say i don't provide any argument to this student function and let's run the code and you can see if i don't provide any argument to this student function the default values are taken so the default values are used when you want to make sure that every argument in your function should have some value now let's say i just provide a name here and don't provide the age and let's run the program and now you can see the name is overwritten by the argument what we have provided here right so default value will be this one if no argument is provided similarly if we give the value of age and now we run the program the default age is replaced by the age which is provided using the arguments so this is how you can use default values with the arguments of the function so let me just remove these default values and i'm going to give you the next example which is variable length arguments so let's say with the name and age i want to provide the list of scores which this student has scored for different subjects so as a third argument i'm going to provide a argument called marks and somehow i want to provide a list of marks which is scored by this student and let me print the value of marks using this print function also now in python you can use asterix in front of your argument and this means that you can provide multiple arguments when you use this kind of notation so let's just provide for example we already provided the name and age here and let's provide different marks scored by the student so i can provide 95 for first subject then 70 for second subject then 80 for next subject then 50 for next subject and let's say we don't know how many subjects the student has taken we just have only the information about these four subjects which he has taken so we can provide the four values here and then let's run the code and now you can see name is tom age is 22 and the value of marks is shown as a tuple okay so whenever you provide this asterisk in front of an argument you can provide the values for that argument using normal arguments as you provide for normal argument so first two variables are associated with name and age and all the other variables which you provide here will be assigned to this marks variable because it has this asterisk in front of it so now you can also use a for loop in order to iterate over tuple so x in marks for example and then you can print every value or you can access every value inside this tuple and let me comment this print function and let's run the code once again and you can see for loop has printed all these marks which are there inside the list now if you want to use this type of variable length argument then i will suggest you to use this argument as the last argument of your function so that it will be clearer to the reader of the function that whatever you provide at the end will be the part of this last argument now you may ask that we have provided these marks for this student but for which subject these marks are given to the student now in python you can also use double as tricks in front of your function argument and this means that now you can provide the key value pairs as a marks arguments so instead of using 95 i can also say that 95 is scored in english let's say and then 70 is scored in math and then let's say 80 is scored in physics and the 50 marks is code in biology so now when you use these double asterisks in front of your function argument you can provide these kind of key value pairs which are separated by this equal to symbol and how you can access these values so let's run the code and let's see what happens and now you can see only keys are printed and not the values of these subjects are printed so let's first uncomment this print function and let's see what type of value we are getting so whenever you use these double asterisks the values are given to you in the form of a dictionary okay so if you use single asterisks the values are given to you in the form of tuple but whenever you use these double asterisks and whenever you try to access this variable then this variable will be of type dictionary and you already know how to print the values of dictionary so you can just write marks dot items here and then here you can just write key comma value and then you can print the value of key and value so i'm going to just print key first of all and then i'm going to just give a space here and then i'm going to print the value right and now when we run the code it will give me first of all the key for example english math physics or biology and the value which is 95 70 80 or 50. now before starting our object oriented programming journey in python let's discuss about what is the difference between the procedural programming and the object oriented programming so you will have the better idea why we use object oriented programming now traditional programming languages such as c or pascal were called procedural programming languages or structural programming languages where the basic unit was functions now programming in these type of procedural languages involves choosing a data structure and then designing the algorithm and then translating that algorithm into a code so if this sounds little bit confusing let me try to explain it with an example so let's say you have been given a task to create a program for a passenger who wants to travel from one place to the another place using a cab service so if we think from the point of view of procedural programming what we do in the procedural programming is we create some global data structure which holds the data so here for example we create some kind of data structure which can hold the data for example in case of a cab service which cab service is it or which type of cab is it and at what location this cab is standing all these kind of data we store in a data structure in our global environment now after storing the data we design an algorithm so let's see what kind of algorithm we can develop in the procedural programming language for our cab booking service so this is a pseudo code which i have written so first of all the passenger will open the app from which he can book a cab and then he will book the cab and once the cab is booked he will wait for the cab and then once cab arrives he will sit in the cab and then he will reach to his or her destination and at the end he will pay the fare of the cab and this is the pseudo code of that algorithm and then we will translate this algorithm into actual code in procedural programming language now in these type of procedural programming languages we concentrate on creating the functions and the major drawback of using these functions is that data and operations on the data are separated that means we need a methodology to send this data to these functions so here we need to send this data which we have saved globally into these functions and these functions take this data either as argument or as a global variable and then perform some actions on this data and give you some result now these kind of functions are passive what do i mean by passive here that is these kind of function cannot hold any information inside them so once you give the data they are able to give you the result back after performing some operations but they cannot save or hold the state or the data so that if you want to use that data in some other place in your code then it will be very difficult using these kind of functions which you use in procedural programming now let's look at the object oriented approach of doing things so in object oriented programming languages like c plus plus or java or python the basic unit is class now if we take the same example of a passenger who wants to travel from one place to another using a cab service using object oriented programming thinking which depends upon the creation of object we can create different kind of object for example for a cab we can create a class called cab and then we can create a class for cab driver and the third class we can create for a passenger okay so a class you can create for any real life object it can be a car it can be a motorbike it can be a book or employee or a person so object oriented programming allows us to create object so first of all what is a class so a class refers to a blueprint in which we can have data and methods okay so for example for our cab class what attributes this cab class can have for example a cab service which cab service we want to take what is the make of the cab it is it a toyota or a bmw or a volkswagen cab at which location this cab is right now what is the number plate of that cab so the passenger can recognize this cab so all these things which i have written here are called data because they can hold some kind of data number plate has number plate data location have geolocation data make have the make data cab service can have data like uber or any other cab service and the other thing which a class can have are called method so earlier we have seen that we can create functions and when these functions you use inside a class they are called method okay so functions inside a class are called method now the data inside this object or class is called attributes or the member variables which can hold some data and using this class we can create object of the cab class which means we can create different object using a same class and how to create object using classes we will see in the next video in the real life example so don't worry if you don't understand how these things works i will give you a real life example so you will be able to understand in a better way now what is an object an object is a software unit that combines data and methods okay so we have this data here and then we have the methods inside the class and object is able to combined both of them which is data with the methods now these objects for example a cab object and the passenger object can exchange the data between them also so data is interchangeable between for example the passenger object and a cab object so let's rewind once again what we have learned about object oriented programming so the basic unit in object oriented programming is a class and a class refers to a blueprint which can have the data and methods now using a class we can create objects and what is an object object is an instance of a class and each object can have its own data and method and an object is able to store the state of some kind so at which location this cab is right now so this is a state and an object is able to store that state now in procedural programming if you remember there is no relation between the data and the method right we need to provide the data to the method which are separate entities in the procedural programming language now these data members are called attributes or member variables and these functions which you define inside a class are called methods and what are some of the key differences between procedural programming language and object oriented programming language the first is the unit in procedural programming languages function and on the other hand in objectoriented programming the unit is class the second is the procedural programming concentrate on creating functions while objectoriented programming starts from isolating classes and then they can have data and methods inside it in procedural programming language the data and the functions are separate and in object oriented programming language data and methods are not separate they are the part of a single object of a class now if all this seems to be little confusing to you don't worry you are not alone and i will try to solve this confusion in the next video in which i will tell you how to create the classes and how to use classes in python in this video i am going to show you how you can create your first class in python now if you haven't seen my last video in which i have discussed what is object oriented programming and what are classes i will highly recommend you to watch that video because this will be a continuation of that video so let's create a class in python so for that i will create a new project so let's create a new project in pycharm so just click on file here and then click on new project and then the project name i'm going to give here is oops and then i will just click on create and i will choose this option which says open in current window and also this option which is added to currently opened project which is going to create this project in this window itself which is already open so now you can see we have our empty project here and inside this project let's create a python file so right click on the project and then new and then we are going to create a new file and let's create a class called car so i'm going to name the file name as car because we are going to create the car class now in order to create a class in python you use a keyword class and then you give the name to your class so the class name in our case is car and then you give this colon and for example i write here a keyword called pass now when you write this keyword after the declaration of a class this means that it is a empty class you can also use this pass keyword to create an empty method so this keyword pass is used to create an empty class or an empty method now here after the class declaration let's see how we can create an instance of a class so it's really easy to create an instance of a class so let's create a first object and i'm going to name it as ford which is a car brand and then you use your car class name and use these parentheses here okay so this here ford is an object or you can also say it's an instance of the class car in a similar way we can create multiple objects for example honda is another car brand and you can create the honda object using this class car once again you can create a new object for example audi and then you can once again use this car class to create this object so what we have done till now we have created three object from the class car now in the previous video i have told you that you can associate some data with your object so let's associate some data so for example ford we can associate uh attribute called speed right so we can assign the speed for example 200 here for honda we can assign speed let's say 220 and for audi we can assign the speed let's say 250 so speed here is called the attribute and whenever you create an empty class using this pass keyword you can add these attributes on the fly so you can see we have added these attribute after the declaration of the class and after the creation of the objects let's add some more attribute to these instances or the object so a car can have the color so i'm going to just write color and the food has let's say the red color and let me just copy and paste here and let's say the honda have the blue color and we have the audi of black color so once again color is an attribute here now if you want to print these attribute you can use this print method and then for example we want to print the speed off ford and the color of ford then we can do it like this and let's run the code so in order to run this code first of all when you create a new project and the new python file you need to right click on this file and then click on run the file name whatever is your file name my file name was car so you can see now the result is printed here first is the speed and second is the color of an instance ford similarly you can print the color and speed of honda and audi objects also now if you want to change some attribute it's also possible so let's say i want to change the speed of ford object so i'm going to use ford dot speed once again and this time i want to assign 300 speed to this attribute let's say we also want to change the color of the ford object so i'm going to just use four dot color and this time i want to use the color blue here and let's once again we will try to print the color and speed of the object ford and now you can see this result so before the speed was 200 and the new speed is 300 for the object ford and before the color was red and the new color is blue for this object ford now if you have followed the last video this speed and color is the data so speed and color are the variables which holds some data inside them but still we haven't added any behavior or methods to our class car and that we will do in the next video now let's create a new class because understanding classes in any language is difficult so let me give you another example so this time i'm going to create a new python class and i'm going to name this python class as a rectangle and then press ok which is going to create this class and to create a class you already know you use the keyword and the name of the class and then the colon and we will also make this class an empty class using this pass keyword and in order to create an instance i'm going to just write rect 1 which is the first object using the rectangle class and then i'm going to create rect 2 which is the second object using this rectangle class and now what are the attributes which we can relate to the rectangle a rectangle have a width and the height so let's add the width and height so let me use the first object and let's say height is 20 for the rectangle 1 and then we are going to use the second object and once again we are going to add the height for the second rectangle let's say the height of second rectangle is 30. similarly we can add the width to the rectangle so width is equal to let's say it's 40 and rect 2 object have the width let's say 10. so what we have done here we have created a rectangle class and then we have created two instances of the rectangle class rect one and rect two which are also called objects and then we have added some attributes to our objects which are height and width now let's say you want to calculate the area of these two rectangles i can use the print method and then what is the area of the rectangle it's the multiplication of the height and the width right so i can use this rectangle one object and then i can call the height and width of this object and this will give me the area of the rectangle 1 using this multiplication operator similarly i will do the same for the object 2 here and let's run the code and if you remember what we need to do if we create a new python file we need to right click on the file and then click on run right so once the file is running you can choose from here which file you want to run but at least once you need to right click on the file and just click on run whatever file name you have so you can see the area of rectangle 1 is 800 and the area of rectangle 2 is 300. so this is how you can create a very simple class in python in this video i'm going to show you how to use init method in python and how to use a keyword called self in python so i will continue with the class which i have created in the last video and this was the class which we have created and we have used this special keyword pass there and pass we were using to create an empty class now i'm going to remove this pass and i'm going to add a method called init here so i'm going to just write def and then underscore underscore init and then press enter and you can see this init method is created here so this is like a normal method with double underscore in front and back of this init keyword and you will also see the self keyword is already added as the first argument of this method now this init method serves as a constructor for the class so usually it is used to initialize some attributes or some functions because this is the first method which will be called when you create an instance of a class so here we are creating an instance of a class and this init method will be the first method which will be called when this object or instance will be created so let's check what i'm saying so let's say i want to print inside this init method that the underscore underscore init underscore underscore is called and let me run this code so i will change this to car and then run this code and now when i see this result you will see this line is called three times because we have created three instance from the same class okay so every time this instance is created this print is called and that's why this line is printed three times and everything else will be printed after that whatever we were printing for example speed or color of the car will be printed after that now one important thing to notice here is i said init serves as a constructor it's not a constructor although it would be tempting to call this init method as a constructor actually it's not a constructor but it behaves like a constructor because init is the closest thing we are going to get in python to a constructor because it is the first method which is called whenever an instance is created now if you are familiar with other object oriented programming languages like java and c plus plus there is a destructor also in those kind of languages with classes now python doesn't have any destructor because python has an automatic garbage collections so you don't need a destructor in python because python will take care of anything which should be taken care of now as i said usually init method is used to initialize something so instead of initializing the value of speed and initializing the value of color let me just comment this code first of all so i'm going to select whatever i want to comment and then i can press ctrl forward slash to comment all the line you can also go to code and then use this option which says comment with line comment and you can see the shortcut for that control plus forward slash okay so this is going to comment your lines of code and now i want to use the speed as the initialization value so after the self keyword i can give the next parameter which is speed here and then the third parameter is the color here and now to print the value of speed and color i can use once again print and then first of all i'm going to print the speed and then i'm going to print the color attribute and as soon as you do this and when you try to run this program it will give you an error so let me run the program and it will give me the error it says init missing to required positional argument which is speed and color okay so once you create an init method and provide any arguments other than self self is automatically provided by python whenever you create an instance of a class but other than self when you write for example speed and color arguments here you need to provide those argument at the initialization of your class so here first we will give the speed inside these parentheses for example 200 and then the color for example red here okay same we need to do for the other two instantiation of the car class so let me do it for the second instance and also for the third instance and now let's run the code once again and let's see what happens so now you can see everything works fine and no error is given to us and you will also see because this print is called first you can see the speed is printed first and then the color and then this line is printed after that and that means we will get the speed color and this line three times for every instance with different values whatever values you have provided for the instantiation of your car class now usually you provide these arguments because you want to initialize the value of speed so let's try to access the value of the ford object speed and color so let me just uncomment this code and let's run this code and it will give us an error you can see this says that car object has no attribute called speed right so what is the error because we have provided these attribute speed and color but we haven't assigned these values to any attribute inside this car class earlier what we have done is we have assigned the speed value to a speed attribute and the color value to the color attribute but we have already commented those codes so how can we assign the speed and color to the car object so it turns out that you can use the self keyword and then using the self keyword you can assign the value to the current object so self is essentially the current object okay it's similar to using this in c plus plus or java if you're familiar with those two languages so you use self dot and then the name of the attribute for example speed in our case is equal to whatever argument you provide for speed so we have provided the same argument which is speed is itself once again i can use self to set the value of color here so self.color is equal to color let me remove this semicolon because it's not required and now when i run this code you will see that there is no error now so because we have now used the self keyword to set the attributes of speed and color so we can easily access the values of the speed and color using any object of the car class so let me once again minimize this so now let's talk about the self keyword here so whenever you create a class the first argument of every method you need to provide this keyword yourself now it's not necessary to provide this same keyword which itself but it's a convention to write this self as the first parameter the first parameter can be for example abc it doesn't matter but you need to use this abc here also as self and it will be totally fine but it's a convention that we use the self keyword in order to indicate that this is the current object so every method you will create you need to give this self keyword as the first argument of your method inside a class now you may also observe that here when i am initializing this class instance i'm not providing any self keyword so even though in the init method i have provided three arguments i'm only providing two arguments here so it turns out that you don't need to provide the first argument which is self it will be automatically be provided to your class so you just need to give the next argument whatever argument you give after the cell so we have given speed and color after the self argument so we just need to provide those arguments after whatever you use after this keyword called self so let's do the same thing with our second class which is the rectangle class and here also we have created this empty class so let's remove this pass keyword and instead of this pass keyword we will use this init method which is def underscore underscore init underscore underscore and here after the self we will provide the height as the second argument and the width as the third argument okay and then we are going to initialize the attributes height and width using this self keyword so self dot height is equal to height self dot width is equal to width okay so this is how you can initialize your attribute using this init method and now when you do this you don't need to initialize these values like this you can directly initialize this height and width using these parentheses let me provide these values let's say 20 and 60 for the first rectangle and let's say 50 and 40 for the second rectangle and when we run this code let me just change the file here and then run the code and you will see it will print the area once again here so this init method is used to initialize your attributes or whatever you want to initialize at the start of your class you will do all those initializations inside this init method so this is how you can use init method and self keyword in python in this video also we will discuss more about init method and the self keyword so let's get started so here i have a very simple class called hello and in this class i have a method called init and i'm just instantiating this class and creating an object out of this hello class now the first question which may arise is what if i don't want to use this self keyword you can see directly that there is a red squiggly line appears here which means an error and this we can also see when we run the program so when we run the program it's going to give us this error which says init takes zero arguments but given one now you may ask why it's saying that we have given one argument to the initialization of this hello class so as i said in the last video that self is automatically passed when you initialize a class and that's why it says that one argument is given but init takes zero argument because here we haven't given any argument inside these parentheses so self is absolutely important so you need to give the self now the second question you may ask is can i create multiple init method inside a class so let's see if it's possible or not so here i'm going to give this pass keyword which means that this init method is an empty method and let me create a second init method and this time i want to add one more parameter here let's say name okay so we have provided two init methods here and let's see what happens so this is the instantiation of class where i haven't given any argument to this instantiation so i'm going to run the program and what it says it says init missing one required positional argument which is name so it turns out that it's not possible to provide multiple init methods in your python class if you provide multiple init method in your python class the init method which you define at last will be considered as the main init method and other will be overwritten okay so whatever init method you define at last that signature of init method will be valid and all the other init method which you will create will be overwritten by the last init method okay so let's provide the argument name here so i'm going to just provide one argument here and then run this code and it works perfectly fine okay let me just reverse this order so instead of using this init at the top i will use the init which doesn't take any parameter at the bottom now okay and we provide this argument and let's run the code and now once again we get the error which says init takes one positional argument but two were provided so one positional argument means that this init only takes the self argument and nothing else but here self is provided automatically but we are providing an extra parameter here which is not required and that means this in it which we have defined later is valid and this previous init is not valid so always remember it's not allowed to use multiple init method in the python class but if you do this the last init method will be a valid init method and all the other init method will be the invalid init method now one more question you may ask here what if i want to create both kind of instances one which takes no argument here and other which takes one argument or multiple arguments here so the answer is in my previous video in which i have shown you how to provide default value to your arguments so let's say i provide a default value to my argument here now i will create two instances of the same class one takes no argument and other takes one argument and when i run this code no error appears here okay so if you want to create a init method with multiple parameters you can either use this default value for your init method parameters or what you can do here is you can use this parameter which takes a tuple so in the previous video we have seen that we can provide an argument with asterisks in front of it and this means that we can provide multiple parameters to our method here and when we run the code it's also valid we can also provide multiple parameters here and it will also be totally valid so i am going to run the program once again and you can see it's totally valid so if you want to provide multiple parameters to your init method you can use this kind of notation or you can provide the default value to your parameter or the last thing you can use is you can use for example this type of argument which takes the keyword so kw args here okay and this also we have seen whenever you use this kind of notation that means you want to provide the dictionary right key value pair so let me provide some kind of key value pair let's say name is equal to some kind of name here and then let me run the code and it's totally valid it doesn't give us any error so even though multiple init methods are not allowed in python you can use these type of notations in order to give variable length argument in your init method now let me just remove all the parameters from here and this instantiation from here also and let's take the next question so let's say i want to remove this pass keyword from here and here i want to initialize some values so self dot name is equal to let's say we will provide some name so i'm going to provide a argument called name and self.name is equal to name here and then let's say self dot age here and we provide some value which is not taken from the argument but we provide some static value here is it allowed yes it's totally allowed right so if you want to provide some default value for your attribute you can absolutely provide that without even passing it as an argument so it's not necessary that all the attribute values you need to provide from this argument list you can provide any default or static value here which is not coming as an argument so i hope that clarifies some more details about this init method in this video we will learn how to use encapsulation in python encapsulation is one of the most important principle in object oriented programming so let's get started i will be using this car class and the rectangle class which we have been using in the previous videos also and let me remove these print statements because we don't want them right now now let's say we want to change the value of speed so if you want to change the value of speed you can simply take your object for example ford dot your attribute name for example speed and then you can directly change it for example 300 and when i run the program it's going to print the new speed which is 300 initially we have set the speed to 200 in here we can also put let's say the speed as string which is very stupid but will it work it works you can see here and this can break the function in which the speed is used so therefore it is very important that we protect our data and only give the access to our data to the other users so encapsulation is particularly important when you want to give your code to some other people because they might want to change your code so let's see how we can encapsulate our code so to encapsulate our code we create functions so let's create a first function which is to set the value of speed so i'm going to just say set underscore speed and inside the parentheses it's going to take self as the first argument which is the default and second is the value of speed so so i can say value here right and then once we have the value of speed we can just call self dot speed is equal to value similarly we can create a get method for the speed so right now we have created the set method to set the speed and now we are going to create a get method to get the speed and in order to get the speed we don't need to pass any argument we just need to return this speed which is already set so we can just write return and then self dot speed so we have created two functions set and get these are also called setter and getter for the attribute which is speed in our case so let's use these functions instead of this kind of setting of data so first of all i'm going to call this ford object dot set speed method out of this object and then i'm going to pass the new speed using this set method now in order to get the speed i can write instead of this forward dot speed i can just write the 4 dot get speed which is going to give me the speed of this forward object so i'm going to run the code and you can see it prints the speed which we have set using the set method but still will this protect your data let's see so i'm going to once again try to use ford dot speed and then i will try to set the new value of speed will it be a problem no so you can see when i try to get the speed the new speed is set and we want to prevent this kind of setting of data using this equals to symbol so we need to somehow make our attribute private now if you are familiar with other object oriented programming languages like java or c plus plus they use the keywords like public private or protected in order to mark their attributes or the member variables as the private or public or protected but python doesn't have any of these keywords so how we can make our data private so let me give you first of all an example so i'm going to go to this class which is hello and here i'm going to set some values so first value is for example self dot a is equal to 10 second value is self dot underscore b is equal to 20 and the third value is self dot underscore underscore c is equal to 30 so we have created three member variables in this hello class one is a second is underscore b and the c is with two underscores in front of it and let's try to access all these three values so i'm going to just use the print method and then the hello object dot a and similarly i will use this print to get the value of dot underscore b and also dot underscore underscore c and let's try to run this program and let's see what happens and you can see here the first value which is printed here is 10 which is the value inside the a variable so this code was executed successfully now we can see here that 20 is also printed that means this code is also executed successfully but at the time of underscore underscore c when we want to use this underscore underscore c outside the class it says hello object has no attribute called underscore underscore c and this is the point so underscore underscore you can use to make your attribute private okay so this is a convention there is no keywords like private in python that's why python uses this kind of convention in which whenever you use double underscores it makes your data private when you use single underscore that also means that it's a private variable but this is only a convention nothing stops you to change the value of underscore b or accessing the value of underscore b okay so if you truly want to make your data private then use double underscore in front of your variable when you use single underscore that means it's a partially private variable and it's only a convention okay so let's go to our car class once again and now we know that we can add double underscore in front of our variable name so we have two variables here one is speed so let's add double list underscore in front of speed and also let's add double underscore in front of this color variable to make both of them private so i'm going to change this value of speed in getter and setter also and now let's try to access this value using this ford object which is underscore underscore speed now let's try to run our program so i'm going to change the file and then run our program and you will see that it's going to give us an error and this error says the car object has no attribute called color because this variable color is private now also you will observe that the value of the speed is 300 which is set by this set function even though we have set the speed again to 400 using this underscore underscore speed but this speed is not changed right so we cannot change the speed using this underscore underscore variable because now it's a private variable and that means we cannot change the value using this variable we need to use this set function in order to change the value of the speed also if you want to use this underscore underscore color here and let's run the code this will also give you an error because this underscore underscore color is private so either you can remove this code or you can create the setter and get a method for the color also so let's create the setter and get a method for the color and now we can access the value of color using the get color method right so instead of this get speed we can just write 4 dot get color and it's going to give us the value of color and now you can see that there is no error and the speed here is 300 which we have set using the set speed method and the color is red which is the color we have given using this argument in the constructor and this type of restricting your data access using functions is called encapsulation let's do the same thing with our rectangle class also and let's create the setter and get a method inside the rectangle class so you already know we can use this define and then we can first of all set for example set the height first of all and then we can give the value of height here and then self dot height is equal to height right and don't forget you need to give double underscore in front of your attributes in order to make them private so i'm going to do just that and let's create the get height method also so now we have created the setter and getter for the height and let's do the same for the width also so now you have made the height and width as private and we have created setter and getter for the height and width and now in order to calculate the area we can define one more method here which is the area method so let's create the area method here and this area method is not going to take any argument we are just going to return the multiplication of the height so self dot height multiplied by self dot underscore underscore width okay which will give us the area of this rectangle and we can call this area method instead of using this kind of notation so rect 1 dot area and rect 2 dot area also let's run the code by changing the file name here and run this code and you can see the area is printed now so this is how you can use encapsulation in python in the last video we have seen how to use encapsulation in python and we have also seen how we can declare private member variables in python to declare a private member variable we use double underscore in front of your variable name and this variable becomes private but the question is what exactly is a private member variable so a private member variable is private to the class that means you can use this private member variable inside the class but as soon as you use it or access it outside the class it will give you an error so you cannot access a private member variable outside a class and the example we have already seen so here you can see i try to access this private member variable outside the class and when i run the code it says that there is no underscore underscore c attribute for this hello object why because whenever you create an instance and if the member variable is private this private member variable is invisible to your object so you cannot access the private member variable outside the class but can we use this private member variable inside the class let's see so i'm going to declare one more method here and i'm going to name it as public underscore method and this doesn't take any argument but what we have learned about the methods in a class that even though you don't pass any argument to the method you have to provide at least one argument which is the self argument and what is self self is the current object so let me just print something here quickly for example public here so can we use this private member variable inside this method let's see so i'm going to just write self dot underscore underscore c and then i'm going to run this code and let me comment this line because this was giving us an error and instead we can use this public method so i can use an instance of hello which is hello dot public method and let's run the code now and you can see there is no error that means you can use your private member variables inside the class or any method of the class now the other question is what is a public member variable like a here so a is a public member variable because it doesn't contain any underscore underscore in front of it and that means you can use this public member variable inside the class as well as outside the class so if i want to use this public member variable inside the class also i can just use self.a and then run the code and it's totally fine it doesn't give us any error let's print the value of those two member variables and once again run the code and it will print the value of a and c and then this message which we are printing here which is public here now the next question is how we can define a private method in the class so let's see how we can define a private method you already know most probably which is by using double underscore in front of your method name so for example underscore underscore private underscore method and then i'm going to just print something inside this method let's say private so this is a private method and how you can define a private method using these double underscore in front of the name of your private method and the restriction will be the same on the private methods also so let's try to access this private method outside the class so i have this hello instance and when i press dot here you will see there is no suggestion for this private method because pycharm already know that this is a private method so it doesn't show this method in the suggestion when you use this object outside the class but let's try the brute force and let's try to use this method outside the class and when i run this code you will see once again you will get an error which says hello object has no attribute underscore underscore private method so private methods also you cannot use outside the class but inside the class absolutely you can use your private methods so how to use your private methods inside the class so you can use your private method inside the class using once again a self keyword so you write self dot and then your method name for example private method and that's how you can call your private method inside the class using self so any method you want to call inside a class you do it once again using this self keyword as you do with your member variable and once again when i run the code now it prints private using this statement and this statement is executed when we call this private method from here so i hope this video will clarify some more doubts about the private member variables and private methods in python in this video we will talk about python inheritance so first of all what is inheritance in python so classes in python can be extended creating new classes which retains the characteristics of a base class and this process is known as inheritance now in simple words the idea behind the inheritance is that a new class can borrow the behaviors and methods from the another class now the inheritance involves two types of classes one is a super class and other is a sub class now the sub class inherit members of the super class on top of which it can add its own members for example any other member methods or variables so here subclass is the one who is doing the borrowing of the members and the superclass is one from which subclasses borrows these kind of member methods and variables now if this inheritance sounds to be a little bit confusing to you let me give you an example so i said in inheritance there are two type of classes one is a super class and other is a subclass now in this example i have taken polygon as a super class and two classes rectangle and triangle as the subclasses now if you see carefully what is the relationship between rectangle and polygon and triangle and polygon so rectangle is a polygon right and a triangle is also a polygon that means the rectangle can inherit some properties from the polygon class also triangle can inherit some properties from the polygon class and the relationship between the superclass and the subclass is defined by a relationship called is our relationship so rectangle is a polygon and triangle is a polygon also that means that rectangle and triangle can inherit from the polygon class so in inheritance the subclasses have uh is our relationship with the super classes so let me give you one more example so as a super class you can take an animal class and then as subclasses you can create a dog class cat class red class because all of them are animals so dog is an animal cat is an animal rat is an animal so always remember when you use inheritance there is a is our relationship between superclass and the subclass now let's take our real life example and let me try to explain you this concept with some code so i'm going to create a new project in my pycharm ide and this i'm going to name it as inheritance and i will choose this option open in current window and also this option which says add to the current opened project which is going to create the project in the same window so now this project is created so i'm going to go inside this project and i'm going to create a new python file here and i'm going to name this file as polygon because we are going to create a polygon class and inside this polygon dot py file let's first create a class called polygon and inside this polygon class what are the attributes which we want to add here so rectangle and triangle what are the common things which they both have they both have the width and the height so we are going to first of all create a variable called width and we will initialize it by a value none the none keyword is used whenever you want to assign nothing to your variables right in the same way i'm going to use height and i'm going to assign none to that also now what i'm going to do is i'm going to create a method here so let me define a method using def and i'm going to use this method to set the values of width and heights and this method is going to take two argument one is the width and the other is the height right now if you remember in the last video i have shown you how to make your variable private so you use double underscore in front of your variables to make them private so i'm going to add this double underscore in front of width and height that means these two variables are private now using the set values method i'm going to just set the values of the height and width so self dot underscore underscore width is equal to width and self dot underscore underscore height is equal to height so this is the polygon class which we have created and it's a super class in our case right and now let's define two subclasses one is a rectangle and other is a triangle so let's define other class called rectangle and inside this rectangle i'm going to define one method let's say this method is a area method and this area method is going to give us the area of the rectangle and what is the area of the rectangle the area of the rectangle is the multiplication of the width and the height similarly i'm going to define a triangle class also so let me define the triangle class here and let's say this triangle class also have this method which is area now what is the area of a triangle the area of the triangle is the multiplication of width and height divided by two so we are going to divide the multiplication of width and height by two this is the area of the triangle so now we have defined three different classes and we are saying that polygon is the superclass and rectangle and triangle is our subclasses now how we can inherit the properties of the super class which is polygon into our subclasses which is rectangle and triangle so in order to inherit from one class to another you use this parenthesis and inside the parenthesis you write the name of your super class and that means your rectangle is inheriting from the polygon class similarly when we write this parenthesis and the polygon class here that means triangle is inheriting from the polygon class now when a sub class inherits from a super class the super class member variables and methods are accessible also using the sub class also so let me give you an example so i'm going to create the instance of rectangle first of all so let me just write rectangle so this is the rectangle instance and let's create a triangle instance also and now once we have triangle and rectangle instance let's use this rectangle instance and when you write dot here you can see intellisense says that area is available for this object and set value is available for this object so when you use set value you can see we haven't defined the set value method inside the rectangle but because we are inheriting from the polygon class into our rectangle class all the members of the polygon class are available using the rectangle object also and what this method takes it takes the width and height so we are going to provide the width and let's say height 50 and 40 and once again we are going to use the triangle object and we use the set values and this time also let's say i'm going to provide the same values here and what does this set value method is doing it's just setting the values of width and height inside the polygon class now in order to calculate the area we can call the area method from the rectangle and the triangle class so let's just do that and i'm going to do this inside a print method and i'm going to just call the rectangle object dot area which doesn't take any argument and the same i'm going to do for the triangle object also so triangle dot area so what do you think will happen now so let's run the code and let's see what will happen so i'm going to right click on this file and i'm going to just choose run a polygon and it's going to run the program and you will see it gives us an error and what is the error the rectangle object has no attribute rectangle underscore underscore width that means because this width and height are private member variables of the polygon class they are not accessible from the subclass which is the rectangle class and the triangle class so you cannot inherit the private members from the super class into the subclass so what is the solution here so what we can do here is we can create the getter methods for the width and the height so i'm going to do exactly that so let's define a method called def get underscore width and it's going to take no argument and it's going to return the value of the width so using self we can access the value of underscore underscore width in a same way we can define a method called get underscore height here and it's also not going to take any argument but we are going to return the value of the height here so self dot underscore underscore high so now we have created the getter methods for the width and height and these getter methods are the public members why they are public because we haven't used the double underscore in front of these two methods and these two methods now we can use in place of these private member variables which we were trying to inherit in the subclass using the super class so instead of underscore underscore width we can write self dot get width and also here instead of underscore underscore height we can use get height similarly we will do the same for the triangle class so get width and the get height dot get height now let's run the program again and let's see what happens and now when i run the code it gives me the area of rectangle using this print line statement and then it's going to give me the area of triangle which is exactly the half using this line of statement so let me once again minimize this and let's recap what we have learned so we have created a super class and two sub classes super class is polygon and sub classes are rectangle and triangle and in order to inherit from the super class you just use parentheses and the name of your super class and that means in our example rectangle is inheriting from the polygon class next what we have learned is all the public member variables or the methods are accessible from the subclass from the super class so set value method and getvalue method is accessible because they are public methods but underscore underscore width and underscore underscore height are not accessible because they are the private member variables so you cannot inherit the private member variables into your sub classes now we have seen this example in which we have created two instance of the classes one is rectangle object from the rectangle class and the other is triangle object from the triangle class and first of all we have used the set method which is coming from the polygon class it's not the part of the rectangle or the triangle class to set the values of width and height and then we have just called the area method from these two classes in order to give us the area so this set method is used to set the value so it has set the value of width and height and using this get method get width and get height this value is returned and this value is returned into the sub classes and then the multiplication of these two values gives us the area here and the multiplication of these values divided by 2 gives the area of the triangle here so this is how you can use inheritance in python hey guys welcome to the next video on python tutorial for beginners in this video we will discuss how to create modules in python now in the previous videos i have already discussed briefly about builtin modules and how to import a builtin module you use an import keyword and then you use the name of the builtin module in python builtin means this module is already present in python so we can use these builtin module in order to perform some functionality so for example this math module helps us to perform some mathematical operations now first of all what is a module so it turns out that a module is nothing but a python file now to prove my point let me just hover over this math module and just press ctrl and then hover over it so right now i'm pressing ctrl and i'm hovering my mouse over this math on the pycharm ide and now i'm going to click it and when i click it you will see this module is nothing but a file right and inside this module we have a number of functions which we can use for example a cos function or a tan function or many different functions which we can use from this math module so a module is nothing but a python file now if a module is nothing but a python file why don't we create a module and it turns out that python allows us to create our own modules so let's create our own modules and let me show you how you can create your own module and right now you can see in my project there is only one file which is hello dot py and it's empty right now now to create a module i'm going to just create a new file so right click and then new python file and this module i'm going to name it as my functions and then press ok and this file is created so now i have two files in my project one is my functions and other is hello dot py so let's say i want to create some functions inside this my functions dot py file so let's create some function i'm going to very quickly create some very basic functions which you already know in python so so let's say add function which returns the addition of two numbers and also let's create let's say multiply functions so multiply and this is going to just give the product of two numbers so let's say this is our module and it has two functions now somehow i need to use these two functions from my functions dot py file into this hello dot py file now as you can see these two files are in the same directory right so i can import this my functions file using import and then the name of the file which is my functions and that's it so in order to import a module you just write a keyword called import and then you just write the name of the file without the extension py okay so you don't need to provide any extension here and then i can use this function so let's say i want to print my function which is the file name so whatever file name you give here you need to use the file name here dot you will see all the functions in the file are now visible in the other file which is hello dot py so let's use this add function and i'm going to just give two parameters here and also let's use the multiplier functions from the my functions files so the file name and the method name or the function name and let's give two parameters here also and that's it so it's that simple to create your own modules and import them into other files in python now when i run this program it's going to give me the addition and the product of these two arguments which i have provided here now let's say your my functions file is in some other directory so let me create a directory so i'm going to right click here and then i'm going to create a directory and i'm going to name it as dir and then click ok and now i'm going to move this my functions dot py file into the new directory so i'm going to just right click and cut from here this file and i'm going to just paste this file into the dir directory okay so let me just click ok here and as soon as i do this you will see here pycharm is intelligent enough to refactor this code and now it has given us the correct import okay so if this my functions file is in some directory then you use this type of notation so you write from and then your directory name and then import keyword and then your file name so you can see this is the directory name and this is the file name so i use from directory name import file name and when i run the code once again it's going to give me the same answer now there is one more way of writing the same notation and that is using the import so use import keyword and then write the name of your directory dot the name of your file so directory dot the file name and then you use this name in place of your my function name okay and once again when you run the code it runs fine now sometimes you might feel that this is a long name and python have the solution for it also so it turns out that you can rename your file using a keyword called as so after the import so import directory name dot file name as and then you can provide your name for example my functions i will just name it as mf okay and now i can use this mf name instead of this big name and this will also work fine so either you can import from your file which is inside the directory using this notation or you can use this notation you can also write as in front of this notation also so from directory name import file name as whatever name you want to give here and this you can use to call your function using this dot notation now this was the easy stuff and i have just written here the two functions and then imported these two functions into the other file but what if if i have multiple classes i haven't shown you how to import files which have classes in them so let's see how to import the python files which have classes inside them so i'm going to close these two files and in the last video i have shown you how to use inheritance in python and we have created this class polygon and two other classes which is triangle and the rectangle class and this might be right now the perfect candidate to import into some other file so i'm going to create two more file one is the rectangle file so i'm going to just right click and create a python file and i'm going to name it as rectangle and i'm going to create one more file with the name of triangle so right click new python file and the name is triangle.py and let me create the fourth file which i'm going to name it as main and this will be our main file in which we will import all these classes so in my polygon class i will just leave this polygon class and i will just transfer this rectangle class into the rectangle dot py file and this triangle class into triangle dot py file and also this was the instantiation of the rectangle and triangle class which we have done so i will transfer this code into our main dot py file okay so now we have a polygon dot py file in which we have the polygon class and then we have the rectangle class inside rectangle.py and also we have the triangle class into the triangle.py file and rest of the code we have inside the main dot py now when you go to the rectangle dot py you will see that it's inheriting from the polygon class that means we need to import polygon class into the rectangle dot py file so how to import it you can use from and then the file name which is polygon and then use import keyword and use the name of the class which is polygon and you will see that this error is gone and same we will do inside the triangle dot py file in order to import the polygon class into the triangle dot py file so this is the file name so from file name import the class name now when i go to the polygon class we don't need to import anything here because it's a super class and there is no import needed here let's go to the main dot py file and here you will see red squiggly line under rectangle and triangle class because we haven't imported this triangle dot py and the rectangle dot py into our main dot python file so the procedure is same from your file name which is first of all rectangle import the name of the class which is rectangle same we will do for the triangle class so from the triangle file name triangle.py and then import and then the name of the triangle class and you will see as soon as you do this the error is gone so now there is no red squiggly line under any of the code so now let's run the code so i'm going to just go to the main.py file and i'm going to right click on this main.py file and i'm going to just click on run main which is going to run the program and it's going to print the result which is the area of rectangle and the area of the triangle so in this way you can import the py file which have classes inside them so this is how you create your own modules in python and import them into other python files in this video we will talk about multiple inheritance in python so first of all what is multiple inheritance so the ability of a class to inherit from more than one class is called multiple inheritance and in python a class can inherit from more than one class so let's see an example which shows us how to inherit from multiple classes now i will be using this example which i have already shown you in the video where i have shown you inheritance in python so there is a class called polygon which is a super class and the other two classes are triangle class and the rectangle class which are the sub classes and these two classes are inheriting from the polygon class and i have also one more python file which is main dot py and in this main dot py i'm just importing these two rectangle and triangle class and creating an instance out of them and then setting the value of width and height and then we are printing the area of the rectangle and the triangle so if you haven't seen the last two videos just watch those videos because i will be using the same code in order to show you how to use multiple inheritance so let's get started so what i'm going to do is i'm going to create a new python file here and i'm going to name my file as a shape and i'm going to use this shape dot py to create a class called shape so let me create a class quickly and i'm going to name it as shape and this method i'm going to define a private variable called color and i'm going to initialize it with the value none and then i'm going to define the setter and getter for this color attribute so let's define those so now we have defined the setter and getter for this color attribute now if you remember what i told you about inheritance and that is whenever you want to do inheritance between a superclass and a subclass there is a is a relationship between the subclass and the super class so rectangle is a shape and triangle is also a shape so that means we can also use this shape class as the super class in rectangle and the triangle classes so let's use the shape class into the rectangle and triangle class as the super glass so first of all i'm going to import this shape class from the shape file so let's import this and same i will do in the triangle class also and now how to inherit from multiple classes into our subclasses so we have already inherited from the polygon class and in order to add one more class here you just need a comma separator and the name of your class so this is how you inherit from multiple classes you just use the parenthesis and then the name of your classes separated by the comma that means the triangle class is inheriting from the polygon class as well as the shape class the same we will do in the rectangle class i will just provide the comma here and then i will just write shape here and now i will go to the main dot py file and once you do the multiple inheritance that means all the public methods of the shape class is available in the sub classes which are triangle and the rectangle so i can use this kind of notation first of all i'm going to use rectangle class to call the method called set color so i'm going to set color from here and let's say the rectangle color is red and then i'm going to use the triangle object to call the set color method once again and the color i want to provide here is let's say blue okay and in order to get those two color values we can once again write print the instance name which is rectangle dot get color and same we will do for the triangle object also so print triangle dot get color and that's it so now all the public method of the shape class is also available in our rectangle and the triangle classes and we can use all the public methods of this shape class into the subclasses and let's run the code and let's see what happens so the code is running and you can see it prints red and blue using these two statements so this is how you can do multiple inheritance in python in this video i'm going to show you how you can use a builtin function called super in your python classes so let's get started so to start with i have two classes here one is the parent class and other is the child class and here parent class acts like a super class and the child class acts like a sub class which is inheriting from the parent class now both these classes have this init function and you already know what does this init function do it is the first function which is called when an instance of a class is created and here i'm just creating the object from the child class now what do you think will happen will this constructor will be called or this constructor will be called because we are inheriting from the parent class into the child class so let's find out so i'm going to run this code and it prints child in it that means this statement under the child class init method is executed and this method is not executed now in some cases you might want to pass some parameters also into your super class for example i'm just going to give this example let's say i want to pass a argument called name here and then i will just print the value of name how can i call this init function using this child class instance so it turns out that there is a function called super in python that allows us to refer to the super class implicitly now this super function is a builtin function which returns a proxy object that allows you to refer to your super class so let's try to use this super function so you just use the keyword super and then give these parentheses because this is a function and then this super function will return the proxy object of the super class that means i can use this dot operator to call the init method from the super class so this notation means super dot init means we are calling the init method from the parent class and that means we can pass the name from here so let's just pass this name i'm going to just write max here and now i'm going to run this code and now you will see that child init is printed using this statement first of all and then using the super function the init method of the parent class is called and then this name is passed here and it prints parent init and the name whatever name we have provided here so this super function allows us to refer to the super class now let me show you one more thing which is called the method resolution order and you can find this method resolution order by using your class name so child class name dot underscore underscore mro so just write underscore underscore mro underscore underscore and this statement i'm going to use inside the print function so we can see the result what it returns so i'm going to run the code now and you can see it returns this kind of order so as the name suggests mro stands for method resolution order and this is the order in which the methods are called inside your child class or the parent class and this order means that all the method in the child class will be executed first and then all the method in the parent class will be executed now there are some rules based upon which this order is calculated and these rules are the first rule is the method inside your subclass are always called first and then whatever the method inside the base class they will be called and the second rule is related to multiple inheritance so let me just create the second parent class and i'm going to name it as parent two and here also i'm going to just write parent two here and let me inherit from the parent to also in the child class right and let's run the code once again and now you will see this order so once again child is printed and then the parent and then parent two and then the object so the second thing on which the mro depends upon is the order in which you inherit from the parent class or the super class so in our example we were inheriting from the parent class first of all and then parent two and in the same order this mro also will be decided so all the method in the child class will be executed first and then all the methods inside the parent class whatever you use first here will be executed and then whatever superclass you write after that those method inside the class or superclass will be executed next and then at last this is the base object now let's try to just reverse this order and once again let's run the code and you will see that this order will be reversed so the method resolution order will tell you which class method will be executed first and then the order of all the methods from the super classes now one more interesting thing which you will observe here is this output so i said that this super function is used to refer to the super class and now we have two super classes that means multiple inheritance and you will see here that only one output is printed which is from the init method inside the parent two and this statement is not printed which is inside the init method inside the parent class so how to solve this problem so if you have multiple inheritance then you need to manually call these init function using the class name so let's say i want to call the init function first of all from the parent two class i will use parent two dot init and then you need to give also the self as the first parameter and the second which is the name in the same way you use the second class which is parent dot init function and then first parameter is the self and then you can pass any other name for example tom here and let me run the code and you will see it calls first of all paren2init function and we have passed max here as the name and then it calls the parent one init function with the name tom which is printed here also so this is how you can use super function in python in this video i'm going to show you what is composition and how to use class composition in python so to start with i have two classes here one is an employee class and other is the salary class now in the salary class i have this init method which takes two argument pay and bonus and it sets these two arguments to the member variables of this class also i have a method called annual salary which is used to calculate the salary now in the employee class i have this constructor which takes four arguments which is name age pay and bonus now what do you think can we apply inheritance here the answer is no because there is no is our relationship between salary and employee so employee is not a salary and salary is not an employee but somehow i want to delegate the responsibility of calculating the employee's salary to the salary class because calculating salary is in itself is a big task i have just simplified this class in the form of just calculating the annual salary but the employee can have his own taxes or he has taken some leaves or many factors affects the salary of an employee so this salary calculation let's say we want to delegate to the salary class but whose salary is this this salary is the employee's salary so we know that we cannot use inheritance here but we can use a concept called composition here and the composition means that we are just delegating some responsibility from one class to the another class so how to delegate this responsibility we can just create one more variable here for example self dot obj underscore salary which is the salary object we are going to create using the salary class okay and this salary class takes two parameters one is pay and other is bonus which we are already providing using the employee init method so i'm going to just pass this pay comma the bonus into the salary class so we are instantiating the salary class inside the employee class so here one class which is an employee class acts like a container of the other class which acts like a content okay so salary class is the content and the employee class is the container of this salary class now in order to calculate the total salary we can define one more method here and i'm going to just say total underscore salary and then what we are going to do is we are going to call our object salary member variable because this gives us the object of the salary so i'm going to just call object salary and we can call this method from the celery class which gives us the annual salary and now i'm going to just create the object of this employee class so let me just write emp is equal to employee which takes four parameter first is name second is the age third is the pay so let's say pay is 15 000 and the bonus is 10 000. and now i just want to print the total salary of this employee so i can just write print and then emp object dot the total salary which is total salary method and you can see here this total salary is returning let me just use the return keyword also because we are returning this annual salary from the salary class using this total salary method so let's run the code once again and let's see what happens and you can see annual salary is printed and this annual salary is calculated using the salary class so what this employee class has done it has delegated some responsibility to the other class which is the salary class which gives us the annual salary of an employee and this here is called composition now one interesting thing which you will notice here is we are not instantiating salary here we are just instantiating the salary inside an employee class so as soon as you delete an instance of an employee the salary class instance will be automatically deleted so whenever you want to delegate some responsibility of one class to the another class it's called composition one more example of composition can be a book class and a chapter class so a chapter is not a book and book is not a chapter but we can delegate some responsibility from a book class to the chapter class so this is how you can use composition in python in the last video we have seen how to use composition between classes in python in this video i'm going to show you how to use class aggregation between classes in python now if you haven't watched my last video in which i have shown you how to use class composition in python i will highly recommend you to watch that video because i will be using the same code to demonstrate how aggregation works in python so in the last video we have created two classes one is an employee class and other is the salary class and then we have used the celery class inside the employee class and we have seen how composition works in python so employee class is delegating some part of its responsibility to the salary class and that is called the composition now in composition the relationship between the classes which have some association is represented by a keyword part of so salary is the part of employee so the keyword we use in composition is part of now let's see how we can use aggregation instead of composition between these two classes so let's say i will not use this salary class inside the employee class but what i'm going to do is i'm going to pass an instance of salary here so i'm going to just write celery and this will be the object of celery class which i'm going to pass in the init method of the employee class so let's create an object of the salary so i'm going to just write salary here is equal to the celery class and we will instantiate the celery class by these two argument which we have given in the last video to the employee class so i'm going to just copy these two arguments and paste it here and i'm going to remove this comma here so now what we are doing here is we are first of all instantiating the salary class and now the salary class we can pass to the constructor of the employee class and this is the object which we have passed using the salary class object and then i'm going to take the salary class object and i'm going to assign the salary class object to the member variable of the employee class which is obj underscore salary now because we are passing the salary object that means this member variable is the salary member object and we can call any public method from the salary class using this member variable now so let's run the code and let's see what happens and we get the same result as we have seen in the last video in the composition example so what we have done differently here so instead of using the salary class inside the employee class we have first created an instance of the salary class and then we have passed this instance to the employee constructor which can be used inside the employee class and this type of relationship is called aggregation now let's see what are the special properties of the aggregation the first property is the relationship between the associated classes in aggregation is defined by the keyword has ah so employee has a salary because now we are first of all creating the salary object and then passing it to the employee so now we are not directly using salary inside the employee class the second property of aggregation is the associated classes have unidirectional association so we are just passing salary object to the employee class we are not passing employee object to the salary class so it's a unidirectional association only salary can be passed to employee not the other way around and the third property of aggregation is we have created the salary object and the employee object so both these objects are independent of each other so if one object dies the other survive so both the object are able to survive individually so these are the three properties of aggregation now let's see the difference between the composition and the aggregation so i'm going to split the screen so i'm going to just right click on this tab and i will say split vertically and here i'm going to open the example of the composition so on the right hand side i have the example of composition and on the left hand side i have the example of aggregation let me just maximize this so you can see it and now let's discuss about the differences between the composition and aggregation so the relationship in composition is defined by a keyword called part of so salary is the part of employee in aggregation there is no part of relationship but the relationship is defined by the keyword called has a so now in aggregation we are defining the instance of salary and then passing it to the employee class and salary is not the part of the employee class we are just passing it to the employee class so aggregation we use has our relationship and in composition we use part of relationship the second difference is when you delete the employee object the salary object will be automatically be deleted so salary object is dependent on the employee class but in aggregation the salary object and the employee object are individually independent so they can survive individually if one object dies then it doesn't matter that the other object dies because we have created these object individually now in composition both salary and employee are interdependent on each other but in aggregation the relationship is unidirectional so the association between the employee and the salary object is unidirectional we can only pass the salary to the employee class but we cannot pass the employee object to the salary class so these are the three major differences between composition and the aggregation in this video we will talk about creating abstract classes in python so let's get started so to start with i have here two classes one is a shape class another is a square class in shape class i have two empty methods one is area and other is parameter and i'm using shape as a super class and square as a subclass and square class is inheriting from the shape class now in this example i want to do two things one is i don't want to allow the other users to create an instance of a shape class because shape class acts like a template for the square class so i don't want to allow those users to create an instance of this shape class so let's see right now if we can create an instance of this shape class or not so i'm going to just write shape is equal to shape and when i run the code my code runs fine that means right now i'm able to create an instance of the shape class which i don't want the second thing is i want to make sure that both these methods which are there inside the shape class are implemented inside the square class so i want to make sure that whoever is using the shape class he or she must implement these two methods inside the subclass so how can i achieve these two things now it turns out that abstract classes are just made for that so how to create an abstract class in python the fact is python on its own doesn't provide any abstract class but don't worry there is a builtin module in python which we can use to create an abstract class so let's import this builtin module first so i'm going to just write from abc import capital abc comma abstract method so these are the two things we need to import from this module now this module abc stands for abstract base classes and this allows us to create the abstract classes so how we can create an abstract class using this abc module so what we need to do here is we need to inherit from the abc module into the shape class okay so shape class is inheriting from the abc module now once this shape class inherit from the abc module the second thing what we need to do here is we need to add a decorator here and how to add a decorator we just need to use at the rate and then the name of this abstract method which is like this and let me use this abstract method decorator on top of this parameter method also so what this abstract method decorator does is it makes these two methods abstract and what is an abstract method an abstract method is a method which you must implement in the sub class so when you run the code now it will give us this error which says can't instantiate abstract class shape with the abstract method so once you create any of your class method as abstract then your class becomes the abstract class and then you cannot instantiate this class like this so our first goal is achieved that we cannot instantiate this shape class now because this class is now an abstract class and how to create an abstract class you just need to import the abc module and then you just need to add this decorator on top of your method and if you do this even with one method in your class then your class becomes abstract so now we have removed the instantiation of this shape class but now when i try to instantiate this square object from the square class let's see what happens so this square class takes one argument which is the side of the square and let me run this code and once again it gives us an error and this error says can't instantiate abstract class square with abstract methods so that means that whenever you inherit from a class which is an abstract class and if this class contain any abstract methods then the sub class have to implement the methods which are abstract so this method area is an abstract method and this method parameter is also an abstract method that means we have to provide the implementation of these two method inside our sub class so i'm going to provide the implementation of area first of all into the subclass and area i'm going to just return as the multiplication of the sides right so self dot underscore underscore side multiplied by itself so self dot underscore underscore side and let's say for now i will remove this abstract decorator from the parameter method and let's run the code once again and you can see it runs fine so there is no error when we instantiate this class when we implement all the abstract method into your subclass so right now there is only one abstract method which is area into the shape class which we need to implement in the subclass and that we have done so we'd see no error here now let's add this decorator abstract method on top of this parameter method also and once again when i run the code it will give me once again this error it's going to give me the same error which says can't instantiate the abstract class square with the abstract method perimeter so we also need now to implement this method also so let's just implement this parameter method inside the subclass once again and what is the perimeter it's four times the size of your square so self dot underscore underscore size and now we have implemented both of them and once again when we run the code it runs fine let's also try to print the area and parameter of the square so i am going to just use this object to call the area method and in the next line i am going to just use print to once again call this object and this time i will call the perimeter method and let's run the code once again and it prints the area of the square and the perimeter of this square so let's rewind what we have learned till now so in python you can define an abstract class by importing this module and this abstract method and this abc stands for abstract based classes and you need to inherit from this abc into the class which you want to make abstract the second thing which you need to do is you need to provide this decorator at the rate abstract method on top of at least one of the methods inside your abstract class that makes your class abstract and what are the properties of the abstract class you cannot instantiate an abstract class so you cannot create an object of this abstract class and you need to implement all the abstract method into the sub class which is inheriting the abstract class so this abstract class acts like just a template for other classes which wants to inherit from this shape class so this is how you can use abstract classes in python in this video we will learn how to use exception handling in python so first of all what are exceptions so an exception is an event which occurs during the execution of a program that disrupts the normal flow of the program so basically exception is an unexpected event which disrupts the normal flow of the program so let me show you some examples of exceptions which may occur during the execution of a program so to start with i'm going to open the pie charm python consoles and then i'm going to maximize this pycharm python control and let me also just clear this terminal so we will start from the top so let's say we have a number and we divide this number by zero and when we press enter it's going to give us this exception which says zero division error so this zero division error is an exception when you divide anything by zero in python let me show you some more examples so let's say i want to add a number and a string let's say 10 plus 10 but this 10 is an integer and this 10 is a string and when i run the command it says type error unsupported types for int and string so we cannot add a number and a string in python so this type error is another kind of exception let's say i'm going to just use a variable name a b c which i haven't declared till now and when i press enter it's going to once again give me this exception which says name errors name abc is not defined which is true because we haven't defined the name abc but we are calling this variable which we haven't defined so we get this exception which says name error next let me define a variable and i'm going to assign some double values here one and two and now what i want to do is i want to call some method so you can see some methods are available for this tuple now let's call some random method using this double variable it'll give us an error which says attribute error tuple object has no attribute whatever attribute i have provided here so this attribute is not present in the tuple object also when you call a method let me call some other method which is not there and once again when i press enter once again i get this error which says attribute error because this function is not present in the tuple object so these are all exceptions in python attribute error or name error or type error or zero division error all are exceptions in python now if you want to see more exceptions you can use the help inbuilt method and then you can write builtins and then press enter it gives me the name error once again because i need to first of all import this builtin module so import builtins and i'm going to once again use help and inside the parentheses built in and then press enter which is going to give me this kind of output and when i go at the top of this output so let me just scroll at the top and here you will see under the classes there is an object class and under the object class there is a base exception class and under the base exception comes the exception class and under the exception there is a big list of exceptions which you can see here so zero division error we have already seen or when you scroll down name error we have already seen so all the exceptions which python may throw are all listed here so if you want to see the list of all the exceptions you can just give this method which is help built in but before that you need to import this builtin module and then it's going to show you this kind of output and you will also be able to see all these exceptions in python now let me show you a real life example of exceptions in python so what i'm going to do is i'm going to define some variables here so first variable is result and i'm going to initialize it with the value none and then i'm going to declare two variables let's say a which takes an input and we want to ask the user to provide some numbers so let's say number one using the variable a and in the same way i'm going to declare a variable b which also asks the user to provide a second number but you already know that this input will return the string so we can just convert this string into a float let's say so i'm going to just cast the output of this input string to a float value and then what i want to do is i want to save the division of the two numbers a and b into the result so a divided by b i want to save it into the result and then at last i would just want to print the value of the result let's run this program so right click run the file name and then let me provide some numbers here so 5 and 6 and press enter it's going to give me the result which is the division of these two numbers let me run the program once again and this time i will provide 10 and the second number is equal to 0 here and we know that when we divide some number by 0 we get this exception which says 0 division error and you will also observe that as soon as this error is thrown so this error comes from this line line five so when you click on this line it shows us that this error is coming from this line which is the division of these two numbers and as soon as this exception occurs all the code which we want to execute after that will not be executed so we were printing this result here but it's not printed let me print something else here so i'm going to just say end and once again i'm going to run the program i'm going to provide the same inputs here and you can see neither this statement is printed nor the end is printed so whenever an exception occurs python stops whatever it is doing so in our case whenever this exception is thrown at this line both these statements will not be executed and why these two lines of code will not be executed because we haven't handled this exception so python allows us to handle the exception which we are not doing right now that's why it stops everything whenever this exception occurs so how to handle these types of exceptions so you can handle these type of exceptions using a try accept keyword so just write try and then under the try you write whatever you want to test and then you write accept keyword here so just write accept and then under the accept you write some code which you perform when the exception is thrown so i'm going to just say this error which is float division error okay so this is what i'm going to print and don't forget to put colon in front of accept and try so let me run the code and let me give the same condition so 10 and second is 0 and this time you will see that this exception is not thrown and the result is also printed and the end line is also printed you can see here and also this line is executed which comes from the accept statement which says float division error so whenever you use try accept notation first of all your code under a try will be evaluated and if it throws some exception then whatever code you write under the accept will be executed and then all the other statements will be executed whatever comes after this try accept code so this time no error is thrown and we have handled this error and you can see clearly it says that float division by zero which means it comes to the accept condition so now we are handling this error which is 0 division error now in other condition when this error is not thrown so we will just give some valid value 10 and 5 so no zero division error will be thrown and when i press enter you will see that result will be printed and and will be printed by these two lines but no except statement will be printed so this statement is not executed because this code has not thrown any error because there is no error occurred now as i have shown you that all the exceptions are under exception class so we can also write here exception and then we can just write this notation exception as e and this will show us more details of the error okay so i'm going to just write here error is equal to and then i'm going to just print whatever the content of e is and once again when i run the code and i will give the number with the zero here and you will see it prints this error which says float division by zero so this is printed using this e keyword which shows us the correct error i have also shown you that this exception is the base class of zero division error so for example when i will try to know the type of this error e and when i run the code once again and let me provide this input once again you will see that this error is of type 0 division error so we know that this exception is thrown from this class so instead of writing this generic exception class we can also use this zero division error here and now whenever this specific error is thrown then only this will be printed here so let me run the code once again and let me give this input here and you will see once again this line of code is printed using this statement and that means zero division error is caught by this line of code and then the statement under that is printed now let's say this line of code throws some other kind of error other than zero division error so let me just remove this type casting of float here that means it's going to throw us some other kind of error which is not zero division error and let me run the code now and i will provide two numbers here once again and you will see that now this error is different which is type error which says unsupported type string and float so why is this happening we are catching the exception using this accept keyword but we are only catching the zero division exception we are not catching the type error exception that's why our program is stopped and these two lines of code is not executed so you need to either use the base class of the exception which is this one exception and when you run the code and when you write these input it will be handle and you can see this time type error is caught it's not a zero division error but the type error which comes because the type which we have provided here is string and we are dividing string by a float value which throws this error so if you want to catch all the exceptions you use this base class but it's not a good practice you need to have information about your exceptions so i'm going to once again write this zero exception error here and what i can do more here is i can add one more accept statement here and this time instead of zero division error i can say catch also type error okay so i'm going to just write type error and here zero division error so we know from where this error is coming and when i run the code once again and when i give the inputs you will see that this error is coming from this line of code so this accept statement is catching your exception which is type error now when i just add this typecast of float once again and when i run the code once again and when i provide 10 and 0 once again you will see this error is caught by the other accept statement which is this statement which is used to catch the zero division error so you can also provide multiple accept statement in order to catch multiple exceptions in python so this is how you can do exception handling in python there is more to exception handling which i will cover in the next video in the last video we have seen how to use exception handling in python and we have seen how to use this try accept statement in order to catch the exceptions now in this video also we will talk more about exception handling in python and we will talk about else and finally statement with this try accept statement so i will be using the same code which i have used in the last video so i will highly recommend you to watch the last video if you haven't seen that now to start with at the end of this try accept statement we can also use the else statement so you can just write else and for now i will just print here for example underscore underscore else underscore underscore and also we can use a keyword called finally with our try accept statement and here also i'm going to just print underscore underscore finally underscore underscore so what does this else and finally statement do let's see by running our program so i'm going to run the program and now i'm going to give some valid input so that our program will not throw any errors so i'm going to just divide 10 by 5 and then press enter and you will see what is printed here so first of all else is printed then finally is printed and then the result is printed using this print statement and then at the end this and string is printed so in this scenario there was no exception thrown by the code that's why none of these exception statements are printed so you can use else statement whenever your code does not throw any exception so whenever your code doesn't throw any exception else statement will be executed but when this finally statement is executed so let me give you one more scenario and then we will discuss about the final statement and this time i'm going to intentionally write 0 here which is going to throw the exception and i'm going to press enter and you can see zero division error is thrown which is caught here and this statement is printed first and then this finally keyword is printed using this statement and at the end these two lines of code are executed so once again let's talk about the else statement you can see whenever your code throws an exception then this else statement will not be executed the else statement will only be executed whenever your code doesn't throw any exception but what's with finally statement so we have seen in the case of exception this finally is printed and in the case of no exception also this finally is printed so this finally statement is guaranteed to be executed whether exception occurs or does not occurs so the only code which is guaranteed to be executed in all these lines is the finally statement finally statement is always executed whether your code throws any error or it doesn't throw any error now in which cases you might want to use this finally statement so sometimes whenever you use files you need to close these files after opening them whether the exception occurs or not it is mandatory to close your files and in those cases you can use this finally statement the next example is for example you are using any database and you are opening that database right and for some reason your connection is lost with your database then the exception is thrown and in the final statement you can reconnect to your database using the reconnect code of the database so in final statement you would want to execute that code which you think that have to be executed whether error happens or does not happens so in all those scenarios you can use the finally statement now the next question arises is whether we can use this else and the final statement without the accept statement the answer is you can already see here no so you cannot use this else statement without the accept statement so you have to use accept in order to use this else statement but when i remove the accept and the else statements you can see there is no error now so you can use the try and finally without the use of accept or the else statement because the code under finally will always be executed whether your code throws any error or not so it's independent of this accept statement or the else statement so this is how you can use else and finally statements with the try and accept keywords now in this video i'm going to show you how to raise an exception in python now raising an exception is similar to through an error or exception in the languages like java or c plus plus so python allows us to use a keyword called raise and that raise statement or keyword allows the programmer to force a specific exception to occur so let's get started and let's see this raise statement with an example so to start with i have created a class called coffee cup which have a init method which takes one argument which is the temperature and i'm just initializing the value of temperature using this init method and this coffee cup class also have one more method which is called drink coffee and inside this drink coffee method i have some conditions so if the temperature is greater than 85 then i print coffee is too hot if the temperature is less than 65 then i print coffee is too cold and if the temperature is between 65 and 85 then i print that coffee is okay and here i have created an instance of coffee cup class with an argument which is 75 to start with and i'm just calling this method drink coffee from this object so let's run the code and let's see what happens so because the 75 is neither satisfying this condition nor this condition so the answer which is printed here is coffee okay to drink now when i provide for example 101 temperature value here and when i run the code once again it will say coffee too hot if i say coffee temperature is 10 it says coffee too cold now in these two situations when the coffee is too hot or the coffee is too cold i can also throw an exception and show the user some kind of message so instead of printing that coffee is too hot i can use a keyword called raise and then i can use any class of exception so we can use the exception class or any sub class of exception and you can see this exception class comes in this builtin module so i'm going to just use this exception which is the base class and same i'm going to do here when the coffee is cold and i'm going to comment these two print statements and now when i run the code it throws an exception without any error so it throws an exception and after that the execution of program stops so right now temperature is 10 which satisfies this condition so this exception is thrown and that's why we see this exception so in python we can throw an exception using this keyword raise and this exception class or any subclass of this exception class now in the last video also i have shown you how to see all the sub classes which are under the exception class to see them you can just open your python console and in the python python console you just need to import builtins and then press enter and now you use a method called help and inside the help method you use this keyword builtins and then press enter which is going to give you a big list here and when you scroll up at the top you will see classes here and under the classes you will see base exception and we have used this class which is exception you can see here so to raise an exception you can use this exception class or any sub class under this exception so you can use arithmetic error or you can use resource division error buffer error whatever error is appropriate for your exception you can use from this list so right now i have just used the exception class which is the base class to throw an exception here instead of exception i can also use for example uh exception called value error which is also the sub class of this exception class and now when i run the code it will show me the value error so this is the one way of throwing an exception in python now with these exceptions you can also pass an argument inside the parenthesis so you can write exception and then in the parenthesis you can write the message whatever you want to show when this exception is thrown so here i can just write coffee is too hot and for the another exception i'm going to just say coffee too cold and when i run the code because it's a value exception which comes from this statement it shows the value error exception and then the message which we want to show so we are just showing coffee to cold so here it also prints the same message which we have given as the first argument of this exception error class so you can either raise an exception with the base class exception or the sub class of the base class exception for example value error and you can also give an optional argument here which is the message which will be displayed at the time when this exception is thrown so this is how you can raise or throw an exception in python in the last video we have seen how to raise an exception in python using this raise keyword and we have seen how to raise an exception using the base class which is exception or the subclasses of this exception class for example the value error or any other error which is the subclass of this exception now in this video i'm going to show you how you can create your custom exception classes and use them to raise exception in python so let's get started so i'm going to create a custom exception class here so let me create a class and i'm going to name it as coffee to hot exception and to create your own custom exception class you need to inherit from the exception class so you just need to provide exception as the superclassia inside the parentheses and then after the colon you can just define the init method to provide the message so it takes one argument for example msg which stands for message and now what we need to do is we need to pass this message to the constructor of this exception class and how to do that you can do that using the super function so you can use super and then call the init function here which means we are calling the init method of this exception class using this super function and we just need to pass the message which comes as an argument of your custom exception class to the super class which is the exception class and that's your custom exception class now i can pass this class instead of this base exception class similarly to create the coffee to cold class i can once again write coffee to cold here and instead of using this subclass of exception i can give here my own custom exception class so let's run this program and let's see what happens so because right now the temperature which we have provided here is 10 which means this falls in this condition which says coffee too cold so we are seeing this exception which says coffee too cold and then it's going to show us this message which says coffee too cold now we have made this exception class explanatory enough so that we don't require this coffee too cold message instead of this coffee too cold message we can give some more information for the user for example we can write here coffee temperature and then we can provide the information of the coffee temperature which the user has provided so self dot underscore underscore temperature and same we can provide in the coffee to hot exception message one more thing which we need to do here is we need to convert this temperature into a string so we can use this mesh third str to convert from the integer or the float value to the string value so this is just the type casting from the integer to the string and now we are going to run our program and see what's the result here so you can see now the result says coffee to cold exception and then it shows the temperature which is provided by the user let's say just temperature we change from 10 to 100 and once again run the code now it's going to say coffee too hot and it's going to display the temperature of coffee which is hundred here so let's rewind what we have learned about creating our own custom exception class so in order to create your own custom exception class you need to inherit from this exception base class or the super class and then you can create any custom class with any name and for passing the message which you provide as the first argument of your exception you can just create an init method which takes this message and pass it to the init method of your super class which is the exception class so this is how you can create your own custom exception classes and use them to raise the exception in python in this video we will talk about this special keyword which is underscore underscore name underscore underscore and we will see in which situations we use this keyword and why do we use this special if statement which is name is equal to underscore underscore main underscore underscore so let's get started so to start with you can see i have two files here one is mymath.py and other is test.py both the files are in the same directory in my project so now what i will do here is i will define a very simple method which is add which takes two argument a and b and it's going to return the sum of a and b so we have already seen how to create these kind of simple functions and now what i'm going to do is i'm going to use this print function to call this add function and here i'm going to just give two numbers here so nothing special about this code now what i'm going to do next is i'm going to import this file which is my math dot py file into the test dot py and now i'm going to just use print and then i'm going to use this module name which is my math to call this function which is there inside this mymath.py file and then i'm going to provide two values here once again into this add function so let's say 7 and 6. now let me run this test dot py file first in which i am importing this my math dot py file so right click and then run test which is going to run this program and what you will see here is it prints 26 which is the sum of 10 and 16 which is printed using this print statement and then you will see 13 which is printed using this print statement which is the sum of these two numbers which we have provided in test dot py now i have a simple question is this a correct response because i just want to call the add method from mymath.py file into the test dot py and i don't want to print any result which is coming from this print statement because i just want to use my math mymath.py as a module and we just want to use the functions inside this mymath.py file not any special code which is written here so that's where we use this special condition which is if underscore underscore name underscore underscore is equal to underscore underscore main underscore underscore and under this condition we use whatever code we want to execute and this name is a special builtin keyword in python whose value is equal to either the module name which is my math or its value is equal to underscore underscore main underscore underscore so under what condition the value of underscore underscore name becomes the module name and in what condition underscore underscore name underscore underscore contains this value which is mean so whenever you run this mymath.py file as the main python file so whenever i run this file which is my math dot py file then the value of name becomes this which is underscore underscore main underscore underscore let's print the value of this variable and then we will see how this value changes in different conditions so once again i'm going to run this code and you will see the value of this special variable becomes underscore underscore main underscore underscore so whenever you will run this mymath.py as the main file then only the value of this special keyword underscore underscore name underscore underscore becomes this main value now if i import this my math module into some other file for example test dot py and then use the functions from this module then let's see what happens so i'm going to just right click on the test dot py now and then i'm going to run it and you will see the value of this underscore underscore name underscore underscore is now is equal to the name of your module okay so my module name is mymath.py so here it just prints the module name and you will also see that because we have provided this condition this statement is not executed and only the statement which we have written here is executed because this condition checks for the name value which checks whether we are running this mymath.py file as the main file or we are importing this file into the other file and we are just using the functions inside that module so this condition is similar to for example main method in the c plus or the java programming language and what does the main method do in those two languages the main function is the main entry point of your program so this condition is performing the same operation we can run these two files using the terminal also so in python you can just click on this option which says terminal which opens the terminal in your pycharm ide in the same folder in which you are currently working in and then i can use this python command to call this mymath.py file first of all so i'm going to just use mymath.py which is going to run this math dot py and you can see if we run this mymath.py as the main file then the value of this special keyword name becomes main otherwise when we are going to run this test dot py file in which we are just importing this mymath.pi file and then when i press enter you will see that now the value of this name variable becomes the name of your module which is my math so in this way you can use this special condition in python in this video i'm going to show you how you can create a text file in python and write in it so let's get started so to start with we use a builtin function which is open and it takes two argument first is the name of the file which we want to create or read so let's say i want to just create a file which is demo dot txt in the same folder in which i am working in so you can see i'm working in my file handling project and there is only one file there which is test dot py and this demo dot txt file will be created in the same folder now the second argument which we want to give here is the mode so there are several types of modes which we can use with this open function to work with the files so let me show you the list of some of these modes so you can see on the left hand side i have listed the modes so you can use the r or r plus or w or w plus or a or b now r is used to read from the file and if you don't provide any mode to this function then the default mode is the read mode now if you want to write to a file you use this write mode with a keyword w so we are going to use this w keyword in order to write to the file so let's use this w keyword here and then this open function returns a file object so let's store this file object into a variable now generally we call this file object a file handler and using this file handler we can work with the file on which we are working on so this file handler will be used to work on this file which we want to create now in the next line i will just use this file handler and then i can call some methods here you can see there is a list of methods i can call on this file handler which is returned by this open function so to write into a file i can use the write function and here inside the write function you can provide any text whatever you want to write to the file so let's say i just want to write this line of string to my text file which i'm creating so i can just paste this text here and then after writing to a file when you are finished working with the file you use once again this fh and then call a method called close on it now what does this close function do so this close function is used to close the file and immediately free up any system resources used by your file handler which is fh and it's a good practice to use this whenever you are done with the handling of your file so always remember to use this close function after you are done with the handling of your file so this is a good practice but i would say you must call this function and that's it so this w mode if the file demo dot text doesn't exist it's going to create the file and then it's going to write this text into the file so wmod is responsible for creating the file also and if the file already exists it will overwrite the previous string by the string which you are writing using this write function so let me just run this code and you will keep eye on this project because this file will be created inside this project so i'm going to right click and then run this test file and you will see as soon as i run this test file there is one more file created here which is demo dot txt and when i click on this file you can see the same text appears here which we have written using the write function now if you want to provide the line breaks you can provide them using backslash n and i'm going to once again run the code so remember when the file doesn't exist the w mode is going to create the file and if the file already exists which it does now then it's going to overwrite it so i'm going to run the program once again and see the content of this demo.txt and you can see this string is split into two lines which is done by this backslash n so let me just split the screen so you will see the demo in the real time so on the right hand side i have my demo.txt file and on the left hand side i have this code on which i'm working on so let's write something else in this file so instead of writing this big line of text into the file what i want to do now is i want to use a for loop to print 10 lines into this demo.txt file so i'm going to use a for loop for that and i'm going to just write for i in range and let's say the range is 10 and then we will call our write function using this fh file handler and then what i want to write here is let's say this is line number modulus d and i will just replace this mod d with the line number and then i will just provide the line break after that and in the previous videos we have already seen that when you use this modulo symbol and then give some value here for example i then this mod d will be replaced by this i right so let's run the code and let's see what happens now so i'm going to run this code and now you will see that this code prints this is line number zero this is line number one because the range starts from zero so in order to print the line number from one what we can do here is we can use this parenthesis here let me just move this to the side so inside the parenthesis we can use i plus one so we can add one every time this value of i is printed so it will start from one so let's run the code once again and you can see now it prints this is line number one line number two three four up to ten now you might have already observed that whenever i run the code this demo dot txt file is overwritten every time when i run this code so the old text is overwritten by the new text now in order to avoid the overwriting of the text what we can do is we can use a special mode which is a here and a stands for append and this append mode is used to append the text to the file so let's replace this w mode with the a mode now okay and you can see this is the previous content of the demo.txt file and now when i run the code you will see the previous content is staying there and the new content is appended to the same file so a we use to append to the existing content of the file now let me go to the list of modes once again and you will see there is a special mode w plus also which means if you want to read and write at the same time you use this w plus mode and this mode is going to create a new file if the file doesn't exist otherwise if file already exists it's going to overwrite to the file which already exists also you will see a special mode b here which is used for the binary file such as images or other binary files this r and r plus mode we will see in the next video and i'm going to show you how to read from the file using these modes in python in the next video so let's go to our code once again and in the videos in which i have shown you how to use exception handling i told you we can use try with the finally keyword so try and we can enclose this for loop inside the try block and let's do this and then in the finally we can add the closing of this file and what does this finally do if you remember this finally block is always called in the case exception is thrown by this code or if exception is not thrown so this fh dot close is definitely will be called whenever we use this finally keyword in order to call the fh dot close function so you can either use this kind of code in order to work with your file handler and then use this close function with this file handler at the end of the handling of the file otherwise pythons provide the shorter form of writing the same type of notation and this notation is you use a keyword with and then you call open function and you can provide the same type of arguments here for example demo.txt and append and then you use as keyword and then you write the name of the file handler for example fh as you have done here and then you provide this colon and inside this with statement you work with your code for example we work with the file writing with this for loop so this whole code including the try and finally block is equivalent to this kind of code which is the shorter form of writing the same code so this with statement is going to always call this close method with your file handler when you are done with the handling of your file so you don't need to explicitly call this try finally block in order to work with your file this is enough to work with the file so either use this notation or this notation both are equivalent to each other now the last thing which i want to show here is let me just use the with statement in order to work with this demo.txt file is for example you don't want to create this demo.txt file into the current project instead you want to create this file into some folder on your computer so let's say i want to create this file inside this folder which is inside my c directory so i can just copy this whole path from here and then i can just paste this path with the backslash here and the important thing to note here is on windows you always need to use the double bag slashes in order to provide the file path okay so use these double backslashes to provide the file path so see inside the c directory i have these files folder and inside the file folder right now you can see this is empty and now when i run this code let me just change the mode to w which is for write mode and i'm going to run the code and as soon as i run the code this demo.txt file is created here and you can also see the content of the file on the right side which is this is line 1 up to this is line number 10. so this is how you can create a text file and write into it using python in the last video we have seen how to create a file in python and how to write content in that file in python now in this video i am going to show you how you can read the content of a text file using python now if you remember in the last video i have told you that you can use this open function to open any text file and this open function takes two argument first is the path of the file with the exact name of the file so because this demo.txt file is in the current folder in which i'm working in that's why i haven't provided any exact path i can just give the file name here but if you have the full path then you can provide for example c colon backslash and then whatever is the folder name and then the file name so either you can provide the exact path of this file with the file name or you can provide the file name if this file is present in the same directory in which your python script is there now the second argument which this open function takes is the mode of opening this file so we have seen in the last video when we write w here or a here that means we want to write or append to the file now in order to read from the file this mode here should be r which is the read mode in the last video we have seen this table in which we have seen that we can use this r or r plus mode in order to read the file or if you want to read and write at the same time you can use this r plus mode now if you see here i have also written here that r is the default mode so when i don't give any argument here as the second argument which is for the mode then also the default mode is the read mode so let's see how we can read this file which is demo.txt file and the content of file is shown here so in order to read the file you use the file handler and then use the function for example read which is used to read the whole file now in order to print the content of the file you need to use this print function so this fh dot read will provide the string and then using this print function we can print that string so let's run the code and let's see what happens so you can see it prints the whole content of the file now let me minimize this window once again now let's say if you provide some file path which doesn't exist so this file name doesn't exist in the current folder and when i try to read this file let's see what happens so it's going to throw an error and this error says that no such file or directory so if you try to open a file which doesn't exist it will throw an error so you need to give the exact name of the file in order to read it now here we can also be more specific and we can also say that this is a read mode in which i want to open this file and once again when i run the code is going to read the content of this file now let us say i just want to read the first word of first line here so let's say i want to just read the first four character of this line one then i can just write four here which will read the first four character of the line one now if we just want to read the first two words of this line one then you can see the number of character here four for this and then there is a space so five character and then i as is two character more so five plus two seven so when we write seven here then it's going to read the first two word of this line one now let's say i want to read the whole line so instead of some words or some characters i want to read the whole line then i can use a function called read line and this readline function is going to read the first line of the text which is present in my file so i'm going to just run the code and you can see it reads the first line of my text file now if you want to read the next line then you need to use this readline function once again and when i run the code once again it's going to print the second line and so on so if you want to print the three lines then you use this function three times now let's say you want to read some characters of the line one then you can once again write the number of character which you want to read and then run the code and it will print the first four character of the first line and you will observe that when i use this readline function once again the string starts from the ending of the first line so in the first line we have just used the first four characters of the first line now pointer will be set to the end of this first four characters so when you use the read line function once again it's going to start where the first line has ended so first line has ended at the end of the fourth character and then it's going to read the space and then all the line characters which are there so in the second read line statement it has printed this kind of text which is after the first four characters and in the third read line because we haven't provided any argument here so it has printed the whole line here so let me minimize this now let's say you want to read all the lines of this file in the form of the list so you want to read the 10 lines of this file in the form of list you can use a function called dot read lines so here you just need to write dot read lines and this function is going to give you the list of every line in the text so let me run the code first of all and you can see this is the list which starts from a square bracket and the first element of the list is the first line with the backslash n which is the line break comma the second element of the list is the second line of the text which we are reading from here so now we know that this read lines function returns the list so we can also call some index of this list so let's say i just want to read the fifth line of this text then i can just write index 4 because index starts from 0 right so let me run the code once again and it prints this line which is at the line 5. now let's say i want to read the last line i can just say 9 and it's going to print the line number 10 of your text file let me minimize this once again now let's say you want to read all the lines of this text one by one and do some operations on each and every line one by one so you can use a for loop for that to iterate over the lines one by one so for let's say line in your fh which is the file handler and then you can print the line one by one so you can call this variable which is line here and now let's run the code and it's going to iterate over this text line by line and every line is printed one by one using this print line statement so let's say you want to count the number of characters in every line you can use this function which is l e n function which is used to count the length of a string and when i run this code now it's just going to print the number of characters in every line now once again let's say you want to count the number of words in every line so we can use a function on this line variable which is a function called split so line dot split which is going to split your line on the basis of character you provide as an argument here so let's say i want to split the line on the basis of a space so let me run the code once again and now you will see that it's going to give me the list of each and every word of every line so this is the first element of the first list and then the second element third element and fourth element and the fifth element so if you want to count the number of words in every line then once again we can enclose this code into a function called len okay so this length is going to give you the length of this list and when i run the code once again it's going to print the number of words in every line of this text file so if you want to count the number of words in every line you can split the words using the space and then using this l e n function you can just find the length of the list which is returned by this split function or if you want to just see the list of words in every line then you can just use this function without the len function and it's going to give you the list of each and every word of every line of your text file and of course to make things easier you can also use this with notation which i've also told you in the last video so you can write with and then this open function and in the open function you give these two argument which is the name of the file and the mode and then you can use as fh for example and then you can execute whatever code you want to execute using this file handler for example once again i want to read the content of the file once again so using this with statement you don't need to use this fh.close function because this width function is going to take care of closing of this handler by itself so this whole code is equivalent to the code which you write whenever you use the try finally block with this code also so this is also possible so let me just remove this code and let's run the code once again it's going to give me the same result as we have seen earlier so in this way you can read the text files in python in this video i'm going to show you how to handle json values in python so first of all what is json so json is a text format which stands for javascript object notation and json is a syntax which is used for storing and exchanging data now if you want to know more about json what is json and how to create jsons and what value you can store in json then i have created a whole video about that so you can watch that video and understand more about json so let's get started with this tutorial and let's see how we can use json in python so to use json in python you use a in build package which is called json so you need to import this inbuilt package which is json now let's say i have a python dictionary so let me create a dictionary in python which have let's say so this is a dictionary in python so in order to convert this dictionary into json you use this json keyword which we have imported here and then call a method called dumps so this dumps method we can call here to convert some python values to a json value and we will pass this dictionary variable a here and in order to print the value of json we can use this print method so i'm going to enclose this json dot dumps method inside our print function now let's run this code and you will see that this json dot dumps function has converted your dictionary into a json value so this is a json text format now the next question which can arise here is what data types this dumps function takes as an argument so it takes a dictionary we already know now but what are the other data types which we can pass as an argument to this dumps function so it turns out that you can provide majority of your collections and your data types as an argument to this dumps function so you can provide dictionary here list tuple string int float or a boolean value any value you can provide here i think sets you cannot provide as an argument here but other than sets you can provide any other format as an argument to this dumbs methods so let me show you how you can provide all these values into this json.dumps function so here in the first print statement i have provided the dictionary in the second print statement i have provided the list in the third we have provided tuple in the fourth statement we have provided the string and then the integer and then float values and then we have provided the two boolean values false and true and at last we have provided this none keyword to this dumbs function so let's run the code and let's see what happens so everything runs fine so that means you can convert from this json.dumbs function a dictionary or a list or a tuple or a string or a decimal or a float or a boolean value into a json value and all these are valid json values now let me go once again to this dictionary method and here also as the json values you can provide any type of values which i have shown here so you can use inside this dictionary for example another dictionary so i can just write so we can also provide a tuple here so let's run this code and it's totally valid so you can see our dictionary is now converted to a json value now this dumps function also takes few other parameters also so we can also provide a parameter called indent here so you need to write indent is equal to and then after that you can write some number here so if you want to give the indent of 4 to each and every element of your json then you can write indent is equal to 4 and let me run the code once again and now you can see this json is printed into a pretty format and the indentation here indentation means this indentation is four spaces for each and every element of your json so if you want to print your json into a pretty format then you can just write indent is equal to and the number of indents you want to give so let us say i want to provide just two indents here and let me run the code once again and you will see now this only have the two indents for every element of this json also you can provide a parameter called separators and as the separators let's say first value i want to provide here is a dot value and the space here and the second value i want to provide here is this equals to symbol so what this separators argument does is it will replace your commas with this dot notation and your colons with this equals to notation and when i run the code you can see now the colon is replaced by the equals to symbol and the comma is replaced by this dot symbol so you can use separators like this also but i will not prefer to use these kind of notation the original notation is the one which i prefer to use which is with commas and these colons one more thing you can use here is the sort keys so you can just write sort keys here and whenever you write true here it's going to sort your json according to their alphabetical orders so you can see right now your keys are assembled in nonalphabetical order so they are assembled in a random manner but when you give sort keys is equal to true here and i am going to run the code you can see age comes first then the marks and then the name and then the object so now your keys are assembled or sorted in the alphabetical order when you use this kind of notation now let's try to save this json value into a json file so in the last video i have shown you you can use this with statement and then you can use open function and we can provide a file name here for example demo dot json so json file always have the extension dot json and the second value we will provide here is the mode so we want to write to the file so that's why we have used w here as fh and then using this fh we can write to this file which we have created so we can pass this json.dumps function here and now your dictionary a will be converted into a json and then this json will be saved into this demo.json file you can see here i'm working inside this file handling project and here i only have dot py file and when i run this code you will see there is one more file which will be created here which is demo.json so i can open this file here and here you will see all our json values are saved in this demo.json file so we have provided these values into the demo.json file let me just split the screen so you will be able to see it correctly so we have provided a name here so name is here age is here marks is here and then the object is here and also the pass is also here so this is how you can write your json values into a file now let's see how we can read the json values from a file so i'm going to remove this dictionary from here and instead of using this write mode i'm going to just use read mode which we used to read from the file and the file we already have so let's say we want to read all this data which we have written into this file and now instead of using this line i need to use fh dot read function here and to print the content what we have read from this file we can use the print function so i'm going to enclose this fh dot read into the print function and let's run the code first of all and when i run this code you can see it prints all the content of this json now one thing which you need to observe here is this fh dot read function is going to give you a string value so to confirm that we can just write type here and we will just see the type of this fh dot read function and i'm going to run the code let's see what's the answer so you can see this read replies you in the form of string so in order to convert the string into some possible format you use a function called json.loads so i'm going to save this string into uh let's say a variable json underscore str this is the variable name and we will assign whatever we read from the file into this variable and now what we can do here is we can convert the string into a json value using a method called json.loads so let me create a variable once again so json value is the variable name and then i can use this json keyword which we have imported dot loads function so just use the loads function and then pass the string as an argument of this loads function so this loads function takes a string and converts it into a json value so now let's print the type of the json values i'm going to just write print type and then we use the json value argument here and then once again run the code and you will see now the json value data type is the dictionary so because now it's a dictionary we can pass some values from it so let's say from this json value dictionary we want to get the name so name here we have stored is max so we can just give the key here name and then run the code it's going to give us the value associated with the name which is max so this json.loads function we use to convert from a json or a string value into a python dictionary so this is how you can handle json values in python in this video i'm going to show you what are iterators in python and how to use iterators in python and at the end i'm also going to show you how you can create your custom iterator class in python so let's get started and let's see first of all what is an iterator but before that we need to understand what is iteration so what is iteration an act of going over a collection is called iteration now what kind of collections we are talking about we have already seen some kind of collections like lists tuples dictionaries sets and other kind of collections and till now what we have seen is we can use a for loop to iterate over a collection so till now what we have learned is for example i'm going to declare a collection which is list in this case and i'm going to just add some values inside the list and once i declare the list i can iterate over this list using a for loop so let's say for i in the collection name and then you can just write print here to print each and every value of this collection a so this for loop iterate over each and every element in the collection and then print the value using this print statement now let's talk about the iterators so what is an iterator iterator is an object which can be used to iterate over our collection now this iterator object has two special methods first is underscore underscore iter underscore underscore and second is underscore underscore next underscore underscore so iterators have these two special methods one is eater and this iter method is going to get you the iterator and the next method is going to give you the next value using this iterator now collections like lists or dictionary or tuple are all iteratable collections that means we can iterate over them and all these collection objects have a special method called eater which is used to get the iterator from these collections so let me show you first of all these two methods inside a collection so when you use dir inbuilt function and give any collection as an argument here and when i press enter you will see a list of functions here and when i scroll little bit right here you will see a special function which is iter so all these collections like lists or dictionary or tuple have this iter method and we can call this itr method to get the object of the iterator and we can call this underscore underscore iter method using a special method called iter without underscore in front and back of it so let me just show you what i'm saying so i'm going to declare a variable id which stands for iterator and then i'm going to use a special method called iter without underscore and this iter method is used to get the iterator so i can just pass my collection here as an argument and this iterator method is going to give me the iterator object of this collection which i was talking about which is underscore underscore iter underscore underscore so let me just press enter and now we have the iterator object and this iterator object we can use to call all the values in the collection so let's once again print the values of our a list and this has these six values and now i can use a special method called next here to get the first value of this collection so i'm going to just pass the i t which is the iterator which we have got from this iter method and then press enter and you will see it will print the first value of your list now once again when you call this next using this i t variable is going to give you the next value of the list and when you call it again and again it's going to iterate over your list and give you the values of the list one by one so let's get all the values so this is the second last value which is nine and then at last it's going to print the last value which is seven now at this point iterator has iterated over all these six values after that when you call this next method once again over this it variable then it's going to give you this exception which says stop iteration so when your iterator is exhausted then it's going to give you the exception which is stop iteration now as i said the collections like list dictionary or tuple have this iteratable object that means we can use the for loop to iterate over these collections so for loop uses the same iterator mechanism to iterate over all these elements of the collection now many times in your programming development career you will have to write a class in order to iterate over some kind of collection so let me show you how you can create your custom iterator class so let me minimize this python console in the pycharm ide and i will just comment these two methods so as i said an iterator always have these two special methods one is underscore underscore iter underscore underscore and the second is underscore underscore next underscore underscore so in order to create your own iterator class you need to implement both these methods so let's create an iterator class and i'm going to just name my class as list iterator class and in this list iterator class first of all i'm going to define uh init method and this init method is going to take any type of list or any type of collection which is iteratable and then inside this init method i'm going to just call a self to create a member variable here and i'm going to name my member variable as dot underscore underscore list and i'm going to just pass the value of a let's name this a as list also so we will be clear so list is equal to list the second member variable which i want to create here is the index variable so the second variable is the index variable which is the index of the list or the collection and let's give the initial value of this index now as i said in order to create an iterator class you need to implement these two methods which are underscore underscore iter method first of all and in this method we are just going to return the value of self so this underscore underscore iter method is going to give you the iterator and let's also implement the method which is underscore underscore next now in this next method first of all when this next method is called what we want to do is we want to increase the value of index so let's call our index member variable and let's increase the value of index by one and the next thing which we want to do here is we want to send the value at this index so we can just return so let me call return first of all and then self dot your list name whatever is your list and then inside these square brackets we call the index which we have incremented by one so self dot underscore underscore index so this statement is going to give you the current value at this index right now and that's basically it so i'm going to just say my list is equal to list iterator and this list iterator takes an argument which is a collection right so let me create a list collection and i'm going to name my list as a and here i'm going to provide some values inside the list so let's say we have these six values inside the list and now we can just pass this list as an argument of our list iterator so once we have this list iterator object we can call our iter method in order to get the iterator object which is this one so let me create one more variable which is i t and then i'm going to call this iter method and i'm going to pass my my list object as an argument of this iter method so now i have the iterator object of this list using this list iterator class and now i can use the print methods let me call a print method and then i can call the next method to iterate over the list using the i t variable so let's run this code once again and you will see it's going to print the first value of the list which is one let's print it two more times and let's run the code once again and you can see it's going to give you the next two values of the list so now we know that this next is going to call every time the next value from this list so let's print all the values of the list using this next method and you can see it prints all the values of this list now when i want to go beyond this after the list iterator is exhausted and let's run the code you will see it's going to give me this error which says list index out of range but this is not the problem of the iterator is the problem of the list now what i have shown you when i have shown you the example of this list iterator in the python console whenever your iterator is exhausted it throws the stop iteration error or exception so let's raise the same kind of stop iteration exception using our class also so i will go to the next method of my class and here i can give a condition and this condition checks whether the value of index so self dot underscore underscore index is greater than or equal to the length of your list so length and the list name is self dot underscore underscore list and when this condition is true we are going to raise an exception so let's use the raise keyword and the exception which we want to raise here is the top iteration exception so let's throw this exception or raise this exception and what this condition is basically going to do is until the last index which is for example in this list the last index is five so under until the last index everything will be okay but as soon as this index becomes 6 which is the length of your list also so the length of the list which have 6 element is 6 but index will go up to five because the index starts from zero so as soon as this index becomes is equal to the length which means the iterator has been exhausted we can also write double equals to here as soon as the value of index becomes the length of the list we can throw this exception so let's run this code once again and you can see we have used this next method seven times so at the last print statement it's going to give us the error so first of all let me remove the last statement and let's run the code it's going to run fine so you can see everything is fine but as soon as i call this last next method and i know that my iterator is exhausted and when i run the code once again it's going to raise an exception which is stop iteration now one more thing which i said which you can use with your iterators is the for loop so let's try to use this for loop and i'm going to just write for i in your iterator which is i t which we have got using this iter method and let me comment this code also and now i can print each and every element inside the list a so i'm going to just write print i here and let me remove this code from here so you can see the list also and this for loop also and i'm going to run this code once again and you can see this for loop has iterated over our list which we have provided as an argument of this list iterator class and you can see all the values inside the list have been printed using this for loop so in this way you can create your own iterator class in python in the last video we have seen how to use iterators in python now in this video we are going to learn how to use generators in python so first of all what are generators so generators are the simple way of creating iterators now simply put a generator is a function that returns the iterator object on which we can iterate upon so let me give you an example of generators and then we will see why it's a simple way of creating iterators so what i'm going to do is i'm going to create a simple function my func and inside this function i will use a special keyword called yield instead of return now after this keyword yield let's say i want to return some values so i'm going to write first of all a and then once again i'm going to use yield and i'm going to use b here and once again i'm going to use this keyword yield and again i'm going to return c here so if your function contains at least one yield keyword then this function is called a generator function so how this yield keyword is different from the return so in the case of return the statement is immediately terminated entirely so after return you cannot do anything inside a function because after using this return keyword the statement is terminated entirely but the yield statement pauses the function and saving the state of that function so let me demonstrate what i said so i'm going to create a variable x and i'm going to just assign the value of my function to this variable x now on this x i can use a next function so as i said whenever you use at least one yield keyword inside your function it becomes a generator and i also said when you use a generator it returns the iterator object so this myfunc generator function returns the iterator object which we are saving inside the x variable and we can provide this x variable which is a iterator object as an argument of this next function which is going to give you the first value which you use with the yield keyword so let me just run the code so right click and then run the file and you will see it's going to give you the first value which you use with the yield keyword now after that let's say we use this next function two more times then it's going to give you the next value and once again when you use the next function it's going to give you the next value so it's like using the iterator on which you can use the next function but it's much simpler to use because you just need to use this yield keyword instead of implementing the iter method and the next method inside your class which we have done in the last video now after using next three times because we only have used this yield three time let's use the next function fourth time because now in the fourth time your iterator is already exhausted and let's see what happens so you will see it's going to give you this exception which says stop iteration which we have already seen in the case of iterators also which i have shown you in the last video so generators are similar to iterators but they are more simple to use and create so you don't need to throw any exception the generator will take care of throwing this exception by itself so what is the difference between iterators and generators so as we have seen in the last video that in order to create an iterator class we need to implement two methods which are iter method and the next method so if you haven't seen the last video i will recommend you to watch that last video in which i have shown you how to create the iterator class so whenever you need to implement the iterators they are more lengthy and sometimes counter intuitive now in the case of generators the methods like iter and next are automatically implemented so this generator which we have implemented here will return the iterator object on which we can iterate upon so now what's the role of this yield keyword so whatever value you will write after the yield keyword it's going to return that value and immediately after that it's going to save the status of your function so that means for example whenever we call this next function for the first time with this x value then it's going to return the first value which you use with the yield keyword as soon as you do that your function is going to save the status of this iterator that means the iterator is at a and then whenever you call the next method once again your generator is going to remember that last time it has returned the first value and now it's the time to return the next value and this will go on and on until you use this yield keyword so let me give you one more example let's say i will declare a variable n and the initial value of n is one and then i'm going to just yield this value n for the first time and also above the yield keyword i'm going to print the value of n so i'm going to just give this string and after this string i'm going to just print the value of n same print statement i'm going to use before the other yield keywords also and before using this n keyword with other yields statements i'm going to increase the value of n by 1 every time so before the next yield i'm going to increase the value of 1 once again and before the last yield also i'm going to increase the value of n once again so we have used yield three times and every time we are increasing the value of n and let's use the same initialization of my func and also i will use this print statement three times and when i will do this i'm going to run the program and you will see what happens let me use this next function only once and when i run the code it prints the print statement using this print statement and then gives you the value of n which is one at the first yield then we have increased the value of n by one so now the value becomes two so when we call the next method once again it's going to give you the value of n and also it's going to print the next print statement so let me just move this below this expression so we will see the increment here also and similar we will do with the third yield statement so when i use this next third time is going to print the third value so basically your yield keyword is saving the status after it returns the value associated with it and it resumes the status whenever you use the next next function now let me show you one more thing and that is how you can use this yield keyword with the for loop so let's say i will create a for loop and i will say for i in some range and let's say this range is up to 5 and after this i want to print the value of i for example so here i will print the value of i and then what i'm going to do is inside this for loop i'm going to return the value of i so now we don't need this n variable so every time from the for loop i'm just returning the value of i in each iteration and let's see what happens so let me use this next function only once and you will see it's going to first print the value of i which is 5 here which is little bit strange i thought i have written here range here but it was something else so let's rewrite range function here inside this we have provided 5 as the range and once again when we run the code it's going to print the value of i which is 0. now every time you use this next function it's going to give you the next value of i which is 0 1 2 until the 5. so let me just run this code once again and you will see it's going to give you the value until this for loop is valid and as soon as you go outside the range it's going to give you this exception which is stop iteration exception so everything in generator is working similar to the iterators which we have seen in the last video so how about we recreate the class which we have written in the last video when i have shown you the iterators example which is list iterator class so i'm going to write a similar code to iterate over this list of numbers so what i want to do is i want to rewrite this code using the generators so let me just split this editor so you will see iterators and generators side by side so i'm going to close this from here so on the left hand side we have a generators file and on the right hand side we have the iterators file so let me just remove this code from here and what i'm going to do is i'm going to create a new function and i'm going to name it as list iterator function with the smaller l and smaller i so this function takes a list as we have seen in the case of list iterators which was taking a list as the argument so here also we are going to give this argument which is list and inside this function what i'm going to do is i'm going to use a simple for loop for i in and i will iterate over the list which we have provided as an argument so we will iterate over this list using the for loop and then we are going to yield the value of i every time when we iterate over this list using this for loop and that's it so it's that simple to recreate the whole class of iterators using this generator so the biggest advantage here when we create the generator is we don't need to implement this iter method or this next method and we also don't need to raise this exception from our function or a class whenever we create the generator the generator function will take care of this top exception by itself so the only thing which remains now is we just need to create a list so we will use the same list as we have used with the list iterator class and instead of this class i will just replace it with this list iterator function and you don't need to do anything so you don't need to use this iter method to get the iterator object this function is going to return the iterator object by itself so now we just need to call the print function and the next function and inside the next function we just need to pass this variable which we have got from this generator function which we have created and when we run this code so i'm going to right click and run this code once again it's going to give you the first value of the list which is one and when you do this several time let's say we call this function six times which is the length of your list also is going to iterate over your list and print each and every value which we have inside the list now if you use this value seventh time that means our iterator is exhausted it's going to automatically throw the stop iteration error so we don't need to create or raise this top error by ourself generator function will take care of it by itself now as we have seen in the last video also we can use a for loop with the iterators so you can also write for x in your my list variable and then you can print the value of x every time and this is going to give you the same result and you can see it gives us the same result which is all the elements of your list which you have provided here so now this whole list class is performing the same operation as this small piece of code which we call generators so let's discuss the advantages of using generators first we have already seen that generators are easy to implement second is generators are more efficient if you want to perform the same logic with the normal function so let's say you want to perform the same functionality which is to iterate over the list of these numbers and let's say this list is big enough let's say this list length is 1 million then if you are using the normal function your normal function has to store all the one million values inside that list variable and that's not very memory efficient but whenever you use this kind of generators they are more memory efficient because they are not going to store one million values in the variable your generator function is going to work on the values one by one so let's say you want to stream some data let's say you want to stream a video and you don't know the length of the video then in those cases the generators are much efficient because they will work upon your stream in steps it's not going to wait for your stream to come entirely and then work upon it so generators are good to work with streams also so these are the few advantages of using generators in python so that's how you use and create generators in python in this video i'm going to show you how you can pass the command line arguments to your python script so to start with i have a script called myparser.py and in order to pass the command line arguments to this dot py file first of all we need to import a builtin module which is called arg parse module now using this arg parse module we can parse the parameters which is passed using the command line to this script so let's see how we can parse those parameters so first of all i'm going to declare a variable called parser and then i'm going to use this arg parse keyword which we have imported and there is a special class here which is called argument parser which we are going to use now this argument parcel class takes an optional parameter which is the description which we will see little bit later so the first step is to initialize your parser the second step is to add the parameters which you want to parse so this we will see in a bit but let's see the next step which is actually parsing the arguments which is passed using the command line so let me declare one more variable which will be our arguments which we want to parse and then we will use this parser variable which we have created and call the method called parse arg so now once you have used this method pass args with this parser variable then you will have all your arguments into this odds variable so let's run this script and let's see what happens when we run this script so in order to open the terminal in pycharm you can just click on this option which says terminal and this is going to open the terminal in the pie charm ide now it depends in which project you are working in so if you see some other location which is opened using this terminal you just need to provide the path where your project is so i'm going to right click on my file and then i'm going to copy the path of this file so right click and copy path and i will just do cd and i will paste this path which i have copied and i will remove the name of the file because i just want to cd to the directory in which i'm working in so now i'm in the directory in which this myparser.py file is present now in order to run this python script i can use this python keyword and then the name of my file which is my parser dot py file now whenever you import the arg pass module and you initialize this module there is a special help parameter which is available so you can write minus h here and then press enter and you will see that this help parameter is automatically present whenever you import this arg pass module and initialize it so this is one way of running your script you can also run your script on your windows or linux terminal the process is same so you need to cd to the directory in which you are working in so i'm going to once again copy the path and paste it here and once i'm in this directory i will just write python and the name of the script which is my parser and then hyphen h which is for help and it's going to give me the same kind of result so you can run your python script either on the windows command prompt or in the pie charm the choice is totally yours so i'm going to use this pie charm terminal so let me minimize this terminal for now now as i said you can pass some argument here in the argument parser class so the argument which you can provide here is that description which is the description you want to give whenever somebody runs this script so this is going to be the description whenever you run your file on the terminal so i'm going to once again run this python file and you can see the description is printed here now now how to pass the command line arguments so you can pass two kinds of arguments as the command line arguments one are called positional arguments and other are called optional arguments so first of all we will see how to pass the positional arguments so in order to pass the positional argument you use your parser variable and then call a method called add argument here and first of all inside the add argument you give the name of your argument for example i want the user to provide two numbers and i want to perform some mathematical operations on these two numbers so i can store these two numbers into some variables and these variables i can define here so the first variable name i want to provide here is num1 and then as the second argument you provide the help parameter so in the help what you do is you provide some help about the argument which you want to receive from the user in a same way i can provide the number 2 argument and i can just change the name of the argument 2 and the help description of argument two now the third parameter or argument which i want to provide using command line is the operation so let's say we want that user should provide some kind of mathematical operations to work with so in the help i can just write provide operator so these are the three arguments which i want the user to provide now once these three arguments are provided by the users these three arguments will be parsed using this function and then all these three argument list will be assigned to this args variable so we can just print the value of this arg variable and let's see what is the content inside the args so i'm going to open the terminal once again so after the python keyword and the name of your script you provide the first number which is let's say 84 the second number let's say it's 41 and the operator so let's say i want to provide the operator plus to add these two numbers and then i'm going to press enter and you will see this print statement is going to print the value of number 1 which is 84 the value of number 2 which is 41 and the value of operation which is plus here you will also observe that all these three numbers are present in the form of string so in order to work on these numbers we need to convert these numbers first into a float value or the integer value and then only we will be able to work on these numbers so how we can provide the type of these two numbers so that our script understands that these are the numbers and not the strings so the way in which you provide the type of the argument is using the type keyword here and then you provide whatever type you want for your argument or the parameter so here i have written type is equal to float and in the second argument also i have written type is equal to float and by default the type is string so if you don't provide any type it's a string so now we have provided a type to our first two numbers and let's run the script once again so now you will see that these values are no longer string values but now they are some float values also whenever you run the script with minus h keyword which is the help keyword it's going to show that these are the positional arguments which is required by the script which is number one number two and operation and also we can use minus h as the help and also it's going to give us the description of this script which we have provided here so now we can perform some mathematical operations on the arguments so let's perform some mathematical operations on the arguments so we can extract these argument using the args keyword and then calling the name of the variable which we have provided so args dot number one is going to give you the value of number one so what i want to do here is i want to know the operation first of all so args dot operation and if this operation is equal to plus then i will just add these two numbers so i'm going to just say args dot num 1 plus args dot num 2. now after adding these two numbers i need to save these numbers into a variable so let's create a variable called result here and i will initialize this result by none so initial value of result is none and then we will assign the addition of the two numbers to the result parameter and then at the end we will just print the value of the result and the same i will do for the other operations also so let's define some more operations second operation i want to provide here is the subtraction third operation i want to provide here is the multiplication and let's say fourth argument i want to provide here is the power of operation so here i can use a inbuilt function which is p o w and then i will just pass the first number as the first parameter so args dot num one and the second number as the second parameter so now let's run the script once again and let's see what happens when we run this script once again so i'm going to provide the same parameters 84 41 and operation plus here and then press enter and you will see the result here is the addition of these two numbers because our plus condition is mat for the operation and then it's going to just add these two numbers and print the result we can make this result little bit more sensible by just saying this is our result so i'm going to just say result colon and then provide the comma here and once again let's run the same script with the minus operation this time so i'm going to provide the minus operation now and then press enter and it's going to still give me the addition this is strange because i think i have done some mistake here which is i haven't provided or changed these operators from here so in the case of minus i need to provide the hyphen here and in the case of multiplication i need to provide the s tricks here so let's run the code or script once again with minus and now you will see as a result you will see the subtraction of these two numbers let's run this script with pow and then press enter it's going to give me the power of operation of these two numbers so this is how you can provide the positional parameters now as the name suggests these are the positional parameters that means every parameter have its own position and this position is defined by the declaration here so the first position is for the number one second position is for number two and the third position is for this operation parameter so if you change the position for example i will provide the plus operator first and then these two numbers this will give me an error and it will say that i was expecting a number as the first argument but you have provided some string parameter here also if you don't provide any parameter so i'm going to just say first two numbers i will provide but operations i haven't defined then also it's going to give me an error and this will say that operation is not defined because we haven't defined any operation here so it's going to give us an error so there is one way of solving this error which is by providing the default value and in order to provide the default value you use the keyword default and then provide the value of it so let's say by default the operation is plus always and when i run this code once again it's going to still give me this error because these are the positional arguments we cannot change the position of this argument and we cannot provide the optional values here and that's where the optional parameters comes in so using these optional parameters you can provide the optional values so let me show you how you can provide the optional parameters so the way you provide the optional parameters is by simply adding double hyphen symbol in front of your parameters so i have provided double hyphen symbol in front of each and every argument which is provided to the script and let's go to the terminal once again and this time we need to provide the name of the parameter which is hyphen hyphen num 1 space the value of it for example 80 and then we need to provide the second number which is hyphen hyphen num 2 and then after the space the value of number 2 and let's say i don't want to provide the operation now and when i press enter here it's still going to give me the result which is plus because now we have the default value of operation which is plus and if i don't provide the value using these command line arguments then the default value of this operation will be taken which is plus if we provide any argument here so hyphen hyphen let's say operation and we will provide the value of operation let's say minus here that is going to give us the subtraction of these two values so whatever argument you will provide here the default value is overwritten by that value so this is how you can use the optional parameters and in order to use the optional parameters you also need to give the name of your optional parameters now whenever you use the optional parameters it depends upon you at which position you want to use these optional parameters so i can use for example num one at first position operation at the second position let's say operation is multiply now and then i will provide the num2 at the third position it doesn't matter now because the position is irrelevant here because we are providing the name of the variable and then the value so value will be passed using the name variable and not by the position now there is one more notation which you can use with these optional parameters and this is the short form of whatever parameter name you want to give so let's say i want to give n as the number one and let's say i want to give i as number two and for operation i want to provide this letter o so this is the short form of these three values so n is for number one i is for number two and o is for operation and also in front of each and every letter here we need to provide a single hyphen so either you can provide this kind of notation with uh explanatory keyword and double hyphen or a single letter and a single hyphen in front of it so now in order to use this kind of notation what i can do here is first of all let me call python and the name of my script and let's say first of all we call the help and you will see this help shows this letter also which is minus h or help and for our parameters we have minus n or the number one minus i or number two or minus o or operation so the way we provide these shorthand notation is we just need to write the name of the notation which is minus n for number one let's provide the value of number one and minus i for number two so you use this equal to symbol in between the value and your shorthand notation not the space so this time i'm using the equals to symbol so i equals 70 and the value of minus o is equal to let's say plus this time and then press enter and it's going to give you the addition of these two numbers so for this shorthand notation you use the equal to symbol not the space in between the name and the value so this is how you can provide the command line arguments to your python script in this video i'm going to show you how to use lambda functions in python in addition i'm going to show you how to use lambda functions with functions like map reduce and filter so let's get started so as we all know that python is a multiparadigm language and it also supports functional programming and the lambda functions falls into functional programming paradigm so what are lambda functions and how to use lambda functions so lambda functions in python are also called anonymous functions because they don't have any name sometimes they are also called one line functions because they can be written in a single line of code so let's see how we can define a lambda function so as you can see here i have three normal function defined here one is the double functions which doubles whatever arguments you provide here second is a simple addition function and third function is the function which takes three arguments and provide the product of the three arguments which are provided so let's see how we can convert these three functions into the lambda functions so the first function which we have is the double function so i'm going to once again write double as a variable and then i can use a special keyword called lambda to create a lambda function so as you can see here this double takes one argument which is x so to provide an argument in the lambda function you just write the name of the argument and then after the colon you write the body of the function so in our case this double function have this body which is return x multiplied by 2. so in lambda function if you want to return some value you don't need to use this return keyword you can directly write x multiplied by 2 here so this lambda function is equivalent to this double function which is a normal function so this double function takes one argument which is x which we are providing here and it returns the multiplication of x by 2 which we are writing after the colon now let's write the add function using lambda function so i'm going to once again declare a variable called add and once again use lambda and this time this add takes two arguments so i can provide multiple arguments in lambda functions by comma as you do with the normal functions so i will provide two arguments and then after the colon you just write whatever you want to return so we want to return x plus y so we can simply write x plus y here and that's it so in a single line we can define the lambda function now the third function we want to provide here is the product function so i will declare a variable product and this time i just need to provide three arguments using the comma separator and after the colon i just provide the multiplication of these three values which is x multiplied by y multiplied by z so all these three normal functions is equivalent to these lambda functions so i'm going to just comment these three functions out by pressing ctrl and forward slash and now let's see how to use these lambda functions so you create a lambda function and then assign the result into some variable and then you use these variable as you use the normal functions so i'm going to just use print to call the double variable and then using the parentheses i just provide the argument which this lambda function takes so this lambda function takes one argument which is x so i can provide the value of x here so let's say i want to provide 10 as the value of x same i will do with the add function and the product function so add a function takes two argument and the product function takes three argument so i can simply write these functions like this like a normal function and then i can just run my script and you will see it's going to give us the same result as the normal function gives us so the first is the double of 10 second is the addition of these two numbers and third is the product of these three numbers now you might ask a question that these functions which we have defined normally we can also define these function in a single line because there is not much logic inside these functions so we can declare these functions like this and they are also the single line functions so why do we use lambda functions so the lambda functions are generally used with the functions which takes function as an argument or returns function as the result so in functional programming functions are the first class citizens that means we can pass the functions as the normal argument so as you can see here we have passed some static or constant value as an argument here but we can also pass the functions as in arguments and in addition you can also return a function from a function so instead of this multiplication you can create a function and return from a function and that's where these lambda functions are useful so let me give you some examples of where you can use lambda functions so as i said you can use lambda functions with the functions like filter reduce and map so let me illustrate how these functions work so i'm going to declare a list of some numbers so now i have created a list which have these six elements now let's see how to use a map function with a lambda function so there is a inbuilt function called map in python which takes two argument one is a function and second is an iteratable variable and we all know that collections like lists or tuples or the dictionaries are all iteratable collections so we can use map keyword and then here we can define a lambda function so let's say i want to double each and every element of this list so i can define a function which takes one argument x and then we are going to return the double of this value so this is the function which we have passed to this map function because the first argument which map expects is the function the second is the iteratable collection so we are going to pass this list as the second value let me define let's say my list here so it will be more clearer so i'm going to just pass this my list as the second variable so what this map function is going to do is it's going to apply this lambda function to each and every element of this list which is basically going to double the value of each and every element of the list now let's assign the result of this map function into a variable so i'm going to assign the result into some variable and then i'm going to print the result first of all so this variable contains the map function so let's see first of all what is the result and then i'm going to show you how to get the result which we are expecting so you can see here whenever you want to print the value of map it's going to just give you this kind of result so how we can get the list out of this map value in order to get the list out of this map value you need to cast this value into a list and how to convert this value into a list you use a list function and then pass the result of the map function as an argument of this list function let's run the program once again and you will see now that the result is a list and in the result every element of the list is doubled so basically what this map function has done is it has applied this function to each and every value of the list and this function just doubles each and every value of the list now you might say that this is a very simple function which we are applying to the list so let's make things little bit complex and let's say now i have two lists one is my list one and other is my list two and this other list contains some other set of elements so let me just change the values which this second list contains and let's say using this map function i want to add each and every element of these two lists and create a third list with the addition of let's say 2 and 1 and 5 and 4 8 and 7 10 and 8 like this so how can i create a map function to achieve this so let's say this is a variable b and here inside the lambda function we give the second argument which is y so it takes two argument and then it adds the value of x and y so we can do like this and then as the second argument we are passing the first list and also as the third argument you can pass the second list here so now what this map function is going to do is it's going to take the first element of the first list and the first element of the second list and then it's going to apply this function to the first elements of both these list which is to add these two numbers so let's see what is the result which we get using this map function so i'm going to just convert the answer or the result into a list and then i'm going to just pass this b variable as an argument of this list and then we are just printing the result so let's run the code and let's see what happens so you can see we get the list which adds the value of these two lists and creates a new list so you can see 2 plus 1 is 3 here 5 plus 4 is 9 then 8 plus 7 is 15 and so on so this is how you can use lambda functions with map function now let's see how to use a filter function so i'm going to use this special function which is called filter and this filter functions takes two argument but what is special about this filter function is it takes a function as the first argument which gives us a boolean result so instead of adding two numbers and returning this filter function is expecting a function which gives us the boolean result so let me minimize this so let's say we want to filter the even values from this list so how we can achieve this using the filter function so as i said this takes a function as the first argument so you can use lambda and how to find out the even values you pass an argument and then you return x modulo 2 is equal to 0 so this x modulo 2 is going to give us 0 whenever the number is even otherwise is going to give us 1. so this is the first argument and the second argument we can pass here is for example the first list here and now i'm going to assign the result into a variable and let's print the value of c now using the list function so list and as an argument i'm going to pass c here let's run the code and let's see what's the result and you can see you just get the even values filtered out from this first list which is 2 8 and 10. now let me give you one more example of filter so let's say you want to filter out from the second list which values are greater than 5 so all the values which are greater than 5 we want to filter out so we will pass x as an argument and let's say this is the d variable so this lambda function takes x as an argument it's going to return true so let me just write the syntax here so it's going to return true if the value of x is greater than 5 else it's going to return the false so else we can just write false here so if you want to write if an else condition inside a lambda function you write something like this so this is the syntax of if and else so if the value of x is greater than 5 it's going to return true otherwise it's going to return false so let's run this code and let's see what happens let me just replace the c by d and i'm going to run this file and you will see the result here so in this list you will see 8 10 and 9 are greater than 5 that's why we got this result if we write here greater than and equal to and once again run the code it's going to give us four values including five here so this is how you can use filter function with the lambda functions now let's see how we can use one more function which is called the reduce function so in order to use the reduce function we need to import a special module which is fung tool so let's import this module and this module is called func tools so we are going to write from punk tool import reduce so what we are basically saying is we need a reduce function from this fung tool module and now you can use a reduce function so i'm going to declare a variable e and then i can use this reduce function which also takes two argument one is the function and other is the iteratable collection so let's define a function first of all which is the lambda function and this lambda function is going to take let's say two values x and y and what it's going to return is the sum of x plus y here now as the second argument i'm going to pass my list variable here so what reduce function does is it takes first to element of the list and then apply the function which you have written here which is going to add first to element and then it's going to store the result in x variable and take next element into the y variable so 7 plus y is going to give us whatever result and once again it's going to apply the result and then going to add the next number to the result so let's see what result we get using this reduce function so i'm going to once again use print and then we can directly print the value of the reduce function which is e so let's run this code once again and you will see this result which is 37 now 37 is the sum of all these elements inside this my list so let me explain you once again what this reduce function is doing so first of all because we are passing two arguments here in the lambda function it's going to take first two element of your collection which is two and five and then apply this code or statement to these two elements which is 2 plus 5 and we will get 7 as the result now once again it's going to take 7 as the first argument which is the sum of these two numbers and 8 as the second argument which is y here and then apply this logic once again 2 7 and 8 which gives us 15 and once again this 15 will be passed as x and 10 will be passed as y and once again the addition of 15 and 10 will happen which will make it 25 and so on so this is how you can use lambda functions in python and this is how you can use lambda functions with map filter and reduce functions in this video i'm going to show you how to use nested functions and closures in python so let's get started so we will start with the nested functions so in python we can define the nested function that means we can define a function inside a function so let me give you this example and in this example this function which is the outer function takes some text or message as the argument and i have defined one more function inside the outer function and i named it as inner function which prints the value of the text which we have passed in the outer function and we are just calling the inner function in the outer function scope so this function is declared locally inside the outer function and we are just calling this inner function inside this outer function now in other words we can also say that this outer function is an enclosing function and this inner function is the local function of this outer function and now when i call this outer function and let me run the code it is going to just print the value which we have passed as an argument so we have just passed this text argument which is once again passed to print statement of inner function and because we are calling this inner function inside this enclosing function it prints the value using this statement so when you declare one function inside the another function it's called the nesting of functions let me give you one more example of the nested function and i have defined this pop function which is our outer function or enclosing function and here i have defined a function called get last item which is our inner function or the local function to the pop function now this pop function takes a list as an argument and we have defined a local function inside this pop function and what this local function get last item does is whenever you pass a list as an argument to this local function it's going to find out the last element of the list and return the last value of this list so here this is the last index of the list and then it's going to return the last item of the list which is passed as an argument now you may already know that you can call a function called remove on your list which is used to remove some item from the list so i'm just calling remove function on the list and as an argument of the list i'm passing the function which finds out the last element of the list so this is going to give us the last element of the list and this last element will be removed from the list and at last i'm simply returning the list which is passed as an argument to the pop function so let's say this is the list on which we are working on which have five elements and we are calling pop function on this list again and again three times so let me run the code and let's see what happens so you can see when first pop is called it's going to remove the last element which is six from the list and then whenever the second pop is called it's going to remove the four and whenever the third pop method is called it's going to remove the three and so on so this is how you can use nested functions in python now let's talk about the closures so i'm going to use the same nested function example which i have shown you earlier so this is the nested function now in order to convert this nested function into a closure what we need to do here is we need to return the inner function without the parentheses so the thing to note here is we don't need to return this inner function with the parentheses we need to return this inner function without any parentheses and this is the simplest example of the closure so what is a closure so a closure is a function whose return value depends on the value of one or more variable which are declared outside the function so in this example this text variable is declared outside the inner function and the value of this inner function depends on this text variable which is declared outside this inner function and that makes it a closure and closure have a special property that this closure function object remembers the value in the enclosing scope even if they are not present in the memory so i will explain you that but let me just show you how to use this outer function which now uses the closure so i'm going to declare a variable a which means because this outer function is returning the inner function that means a contains now the inner function so we can use this a as the function so in order to use this a as the function we can just call this a using the parentheses because this function doesn't take any argument so we are not passing any argument here but we will just call it as a function because this outer function is just returning the inner function so let's run the code and let's see what happens when we run this code so you can see it prints hello which is printed using this print statement whenever we call this a function so if i just call this a function without the print method also it's going to print the hello because here we are just using the print to print the text which is passed using the outer function now as i said closure is a function object that remembers the value in the enclosing scope even if they are not present in the memory so our enclosing scope is the outer function so even if we delete the outer function after declaring the statement and if the a contains this inner function and now let's say i'm going to just delete the outer function so this statement is going to delete the outer function and let me call this outer function once again after the deletion of this function that means it's going to throw us an error which will say that this function is already deleted so we cannot call this function and now let's see the magic of the closure so even if we deleted the outer function and we cannot call the outer function but before deleting we have created a variable which contains the value of inner function and now i'm just calling the inner function with these parentheses and let's see what happens so i'm going to just run this code and it's going to print hello even after we have deleted the outer function so this means that this variable a is storing some kind of state of inner function even if the outer function is deleted and that is the magic of the closures so a closure function is able to remember the values which are declared outside the function also so this is our closure function and it's able to remember the value which are declared which is text outside the function and that's the beauty of closures now let me give you one more example of the closure so we will be able to understand it in a better way so here i have defined a function called nth power and i pass one argument here which is an exponent and inside this nth power function i have defined a local function which also takes one argument and then what it returns is is the power of whatever argument we pass here and this exponent is coming from the outer scope which is as an argument of the outer function which is nth power so base is coming from the inner local function and the exponent is coming from the outer scope and we are just returning this power of which is a local function without any parenthesis once again so this is very important you return the function without the parentheses now i can declare some variable first of all i'm going to declare a variable called square and then we will call this nth power function and we will just pass the value 2 so now this exponent becomes 2 here which is also passed to the inner function or the local function so here the value of 2 is saved that means whenever we call the square function it's going to give us the square of whatever number we are going to pass as an argument to this square so let's try it once and let's see what happens so i'm going to just print and then call the square function which takes an argument and i'm going to first of all find out the square of 2 and i'm going to run this program and you can see it's going to give us the square of this 2 because now the square function is going to give us the square of the number which we will pass as an argument here so this 2 is passed to the inner function because this nth power gives us the inner function because it returns the inner function so now this 2 which we are passing in the square is passed as the base of this inner function and that's why we are getting the square of the number which we pass here so let's find out the square of some more numbers so i'm going to just pass 3 4 and 5 here and i'm going to run the code once again and you will see that it's going to give us the square of 2 3 4 and 5. so once again we have seen that the closure function is remembering the value which is declared outside the scope which is exponent now whenever i use this function once again so let me declare one more variable and this time i want to declare a cube here and once again i'm going to use the nth power to find out the cube of numbers so now this 3 is passed as an exponent here and this exponent is going to be passed inside the inner function so exponent value is 3 here that's why we are going to get the cube of the number which we are passing as the base argument of this inner function so now this is the inner function and we can once again call the print to call the cube method this should be cube not cure so cube and then we can find out the cube of 2 and let's find out the cube of 3 4 and 5 also so let's run the code once again and now you will see here the cube of the numbers are printed whatever numbers we are passing as an argument of this cube function so in a way this cube or the square variable is holding the status of the inner function and that's something we have also seen in the case of classes the classes are able to remember the state of the variables and the methods which are declared inside the classes so closures are sometimes used in place of the classes which only have usually one method inside them because this one method we can already define in the closure also and it's able to remember the state so closures can be used in place of the classes which have fewer method generally one method inside them the closures are also used heavily in the case of decorators in python so decorators we are going to learn in the next video and i'm going to show you why decorator use closures and how to use closures with the decorators and the third advantage of closures are they are sometimes more efficient than the normal functions so the closures are sometimes also used for the code efficiency and the faster working off code so this is how you can use closures in python in this video i'm going to show you what are decorators in python and also i'm going to show you how to use decorators in python but before starting with this video i will suggest you to watch the last two videos in which i have talked about the basics of functional programming in python so let's get started with the decorators so first of all what are decorators so decorators wraps a function and modify its behavior in one way or the another without changing the source code of the actual function so let's see in practice how to declare and use decorators so first of all what i'm going to do is i'm going to define a very simple method and i'm going to name it as a say hello for example which doesn't take any argument and it just prints hello world let's say now let's say i want to decorate this function say hello and i want to print some kind of string before and after the printing of hello world without changing the code of the function so here we can declare the decorators so i'm going to declare a decoration function for this and i'm going to name it as decorator underscore func and this decorator function is going to take one argument and this argument will be a function now we have seen in the last video that we can return a function from a function or we can pass the function as an argument of another function so inside this function i'm going to declare one more function and i'm going to name it as wrapper function which takes no argument and inside this wrapper function what i want to do is i want to call a function which is passed as an argument of the decorator function and then at last i just want to return this function so i'm going to just call return and i'm going to return the wrapper function without the parentheses so in the case of closures we have seen that we can return the inner function without the parentheses and that makes them the closures now let's say we are going to pass this say hello function as an argument of this decorator function and this function will be called here so in order to print something before and after this string hello world we can print something here also so here we can just write let's say we want to print x and we want to print this x 20 times let's say so we can just write this kind of notation and after the execution of function i want to print let's say y 20 times so this is the simplest form of decorator which takes function as an argument now in order to call this say hello function with the decorator i'm going to declare one variable and i'm going to name it as hello and then i'm going to call the decorator function and i told you that this decorator function takes the function as an argument so we can pass the say hello function as an argument to this decorator function which will be passed here and it will be called here now in the last video in case of closures we have seen that because this decorator function is returning the inner function that means this variable will contain the inner function so we can call this hello with these parentheses and because this wrapper function doesn't take any argument so we can call it like this and let's run the code and let's see what happens so when we run the code you can see before the hello world string we have printed x 20 times and after the hello world we have printed y 20 times so this is a simple form of decorator and this is how you can use decorators in python but python also provides the simple way of declaring this kind of notation so instead of using this line of code i am going to comment this line of code and also this line of code because instead of doing this you can use this kind of notation so just above your function in which you want to apply the decorator you use at the rate symbol and then the name of the decorator which you want to apply to the function and this notation above the function is equivalent to this kind of notation and now we can directly use this function say hello without the use of these two lines of code so let me run the code once again and let's see what happens and the result is the same so this is how the decorator works so let's go through the definition once again so decorators wraps the function and modify its behavior in one way or another without changing the actual code of the function so this decorator have changed the behavior of this function without even changing the actual code of this function now one question which may arise here is can we use more than one decorator with the same function so let's try to declare two decorator functions so we are going to declare two decorator functions and this decorator function i'm going to name it as decorator x and the second function i'm going to name it as decorator y so the first decorator function is going to decorate your function with the x value and the second decorator is going to decorate your function with the value y so we are going to replace this by y now here above your function you can use the decorator x and then also you can use the decorator y above it so i'm going to just write at the rate decorator y and this notation is perfectly fine so you can use one or more decorators with a single function so let me run the code and let's see what happens i'm going to run this code and you can see what happens so first of all the y decorator has wrapped the function with y's and then after that comes the x decorator which have decorated the function with x values and then your actual string is printed which is hello world now one thing to note here is the order of the decorator in which they are used so now we will try to just exchange the places of the decorator x and y and now let's run the code and let's see what happens so before it was printing y first and then the x when this decorator was used at the top and then the x decorator was used and now when we run the code the opposite of that will happen now if you want to see the equivalent notation of this using decorators so i'm going to just comment these decorators from here and let's try to use this kind of notation with our decorators so i'm going to just uncomment this code and this time what i'm going to do is i'm going to use this decorator x with the say hello and i'm going to enclose this notation inside that decorator y so i can use this kind of notation which is equivalent to this kind of notation also so i'm going to run the code and you can see because decorator y is the outermost decorator here it's going to just print the value of y and then we have the decorator x which is going to print the value of x and then our actual string if we exchange the places of decorator x and decorator y then the order of the printing will also change so now this was the very basic decorator example so let me remove this example and let me give you one more example so instead of using this function let me give you one more example so i am going to declare a function called divide which is going to take two arguments let's say x and y and what it's going to do is it's going to return the value of the division of x divided by y and let me remove these decorators from here so in the last say hello example our say hello function was not taking any argument and now we are giving our divide function two arguments that means we need to change the wrapper function here also so i'm going to name my decorator as decorator divide which takes a function and i'm going to change the wrapper function and now this wrapper function is going to take two values which is the value of x and y you can also write a and b it doesn't matter it just takes two values and instead of this kind of notation let me print the values of a and b first of all so inside this print function i'm going to just write divide and then we are going to pass the value of a comma and comma b so we are going to print the value of a and b and then we are going to check if the value of b is 0 or not so i'm going to just say if b is equal to 0 then we are going to print the message that division with 0 is not allowed and also we are going to return immediately from this function otherwise if the value of b is not equal to 0 then we are going to return the division of a by b so once again without changing the actual function which is divide we have changed the behavior of this function which is divide using this decorator function and the last thing which we need to do here is to call our decorator function above our normal divide function and now i can use this divide function normally so i am going to just use this divide function inside the print and i'm going to pass two values here let's say 15 and five and let's run the code and it's going to print first of all this line which is printed using this statement which says divide a and b which is divide 15 and 5 and then because the value of b is not equal to 0 that means this value is returned with the result 3 which is the division of 15 by 5. now let's change the value of b and we are going to just give 0 as the value of b or y here and i'm going to run the program once again and now you can see that this statement is printed which says division with 0 is not allowed and because this function is not returning anything or you can return 0 from here it doesn't matter and i'm going to run the code it prints 0 here so this is how you can use decorators with the function which takes some arguments and return some values now let me give you one more realworld example which we can use with decorators so instead of our divide function now let's say what i want to do is i want to declare a function i'm going to just name it as my func which takes one argument a number so this will be a number and then this function calculates the sum of the number from 1 to the number which we provide here so let's say we provide 10 here so this function is going to give us the sum of the first 10 numbers and now i'm going to declare a variable called sum which i initialize it with 0 and in the next line i'm going to use for i in some range and this range will be the number which is provided plus 1 because range starts from 0 and not from 1 that's why i'm adding 1 here in the range if i want to calculate the sum of first 10 numbers let's say and if i provide 10 here then range will give you until 9 that's why i'm adding 1 here and then inside this for loop i'm going to just do sum plus equals i and at last i'm going to just return the value of the sum now till now we have seen how to create decorator functions for the functions which takes no argument or for the function which takes some argument and we want to use these argument inside the wrapper function but at times you need to write a decorator function which will be a generic decorator function which means the decorator function which i'm going to create here will be used with not only this function but the other function which can take this argument on multiple number of argument or no argument so let's see how we can write a generic decorator function so let's say i want to measure the timing of this function how much time this function takes in order to execute this code and timings we can measure with any function so it doesn't matter that we need to use this function to calculate the timing you can also use the decorator function which i'm going to create with the other functions also to measure the timing of those functions so because it's a timing decorator so i'm going to name it as timing and it takes once again the function as an argument and because we don't know which argument the function is going to take right now this function takes one argument but it doesn't matter you need to measure the time of the function which takes one argument or two argument or three argument or no argument so that's why in that case we can use this kind of notation astrix args here and then comma double less tricks kw args here and these two arguments makes your wrapper function independent of the number of argument which will be provided with this function and in order to calculate the timing of the function we need to import a module so let's import a module so i'm going to just write from time import time so there is an inbuilt time function which we can use to get the time and now under this wrapper what i'm going to do is i'm going to just declare a variable called start and i'm going to save the value of current time here so whenever you call this time with the parenthesis it's going to give you the current time now in the next line what i want to do is i want to just create a new variable which i will call it as result and i am going to assign the result of this function so let's call this function with the variables which we have provided into the wrapper function so because we don't know which argument comes with this function so we are going to just pass these argument as it is into the function argument which is passed as an argument of your decorator let's provide the indent here so this will be satisfied and then in the next line we are going to just print the time elapsed so i'm going to just say elapsed time and then this curly bracket and you already know we can call a format method on the string and here as an argument we just want to give the result of the start time and the end time so let's declare the end time also after the function execution is completed we are going to measure the current time once again and then we are going to just say and the time which is stored in the end variable minus the start time and it's going to give us the time elapsed in the execution of this function and at last because this function or the other function can also return some value at last we are going to return the result which we have calculated so i'm going to just write return this result so this is the generic timing function which you can use with any function whichever you like so i'm going to just decorate my function using at the rate the timing decorator and then i'm going to call this my function inside the print method so print my function and let's say i want to calculate the sum of first 20 000 values and i'm going to run the code and here in the result you will see 0.0 in the elapsed time because this value is very small and elapsed time is approximately equal to zero for the smaller values because we are just iterating over the smaller value but the sum is the exact sum so let's increase this value by two zeros and let's also print the value of start time and end time here so i'm going to just print the value of the end time and the start time so we know that what is the starting time and what is the ending time and i'm going to run the program once again and now you will be able to see that this is the starting time and this is the ending time and you will be able to see some time elapsed in the execution of this function and when i increase one zero here so you will be able to see two seconds is taken now for the calculation of the sum of this number so you can use this timing decorator in order to calculate the time of execution of any other function other than this also so this is how you can use decorators in python in this video we will talk about operator overloading in python now you might already know that everything is an object in python so when i want to know the type of this number 2 it's going to show this kind of output and this means that 2 is an object of the class end now when i once again want to know the type of let's say 2.0 it's an object of class float when i want to do the same operation with the string this string is an object of class string so everything is an object in python now have you ever wondered that when you do two plus two it's going to give us the addition of two numbers and when i add two strings let's say two and then i'm going to use the same operator which is plus operator with the other string it's going to give me the concatenation of these two string values so the same operator plus is working differently with different type of objects the same you might have observed with the multiplication operator which is this asterisk so when i use this asterisk or multiplication operator with a string and let's say i write three here it's going to print this given string three times but the same operator when i will use with the two numbers it's going to give me the different behavior which is the multiplication of these two numbers so the same operator astrix is functioning differently with different kind of data or in other words we can say that this asterix operator or this plus operator are overloaded for different kind of objects so whenever this plus operator is used with two numbers it's going to give us the sum of these two numbers and whenever this operator is used with the string it's going to give us the concatenation of these two strings so both these operators are overloaded for handling different kind of data so this is the overloading of the builtin operators now we might also think that if this is possible can we overload the operators by our custom classes so let me create a class and i'm going to name it as the number class which is going to take one argument so let me define a constructor here so underscore underscore init underscore underscore and this is going to take one argument which is the number and i'm going to just write self dot num is equal to num so this is the simple class which we have created and now i'm going to create two instance of the same class so number and i'm going to give the number one let's say here and then i'm going to create a second object of this class and this time i'm going to give the number two here so is it possible that we can use let's say and one plus and two so let's try this and it's going to give us this error which says unsupported operand type for plus number and number so because python doesn't know how to use this plus operator with your class objects it's going to give us this error which is unsupported operand type and whatever is the operator you are using so it turns out that we can overload these kind of operators in python by implementing some inbuilt methods in our class so we already know that whenever we want to implement a constructor in python we use this init method so i'm going to create a very simple class and i'm going to name it as a and this will be a blank class so this is a very simple class in python and when i use our dir function which is a builtin function with this class let's see what happens so i'm going to just press enter and it's going to print some methods here which are inbuilt method so here not all methods are visible so i'm going to assign this value of dir a to a variable a and then we will see in the right hand side in this inspector here and this is the a variable and you will see the list of all the inbuilt methods which are associated or which you can implement them so for example we have implemented the init method in order to have the functionality similar to constructor but there are other methods here too so there is a str method or le method which is less than method or n e method which is not equal to method and many other methods which we can implement here in our class so now i have given enough theory to you and let's try to see with an example how to overload an operator in python so here i have created a class which i call circle and this takes one argument which is the radius of the circle and i have created the setter and getter method for this radius variable and in the third method i'm just calculating the area of the circle using the radius and i have also used a inbuilt module which is math in order to get the value of pi so using this expression i'm just calculating the area of the circle now i have created two objects of this class with two different radiuses so in the first object i have given the radius 2 and in the second object i have given the radius 3 and from the theory which we have learned till now we already know that this expression will not work with these two objects so when i run this code it's going to give me the error which says unsupported operand error so now we are going to overload this plus operator in this circle class now in order to overload a particular operator let's say plus you need to implement a associated method in your class so with this plus operator there is a special method which we need to implement in our class and i have given the list of all the methods which is associated with the operators so with the plus operator you need to implement this special method which is underscore underscore add underscore underscore in order to overload minus you use this method in order to overload the multiplication you use this method so here is the operator which we want to overload and here i have given the method name which you need to implement in your class in order to overload this operator in python so there is this list which you can use with all these operators so you can overload the mathematical operators in python you can also overload the bitwise operators in python like and or or bit wise right shift or bitwise left shift and also you can overload the comparison operators in python using these associated methods with these operators so now we want to overload this plus operator so we will implement this add method into our class so let's implement this add method into our class and implementing this method is really simple you just need to define a special method which is underscore underscore add underscore underscore and this add method is going to take two arguments one is self you already know and the other is the object of the other instance so the second argument is the object of the circle class and now inside this method i'm going to just return first of all i will just use this circle as the constructor and what i want to do i want to add let's say the radius of the two objects which are provided one is the self object and other is the object which is provided using this argument so i'm going to just say self dot underscore underscore radius plus the circle object radius so let's use the circle object and then dot and then underscore underscore radius so basically i'm adding the radius of the two objects one is this circle object and other is the radius of the self which is the current class so as soon as you implement this method add using these two arguments then this operation is going to work in python so because we have overloaded the plus operator using this add method now this operation is going to work so let me just assign the addition of these two objects into a third variable and this variable i'm going to name it as c3 and using this c3 let's say i want to print the radius of the circle so i'm going to just use the print method and then i'm going to use the c3 object and i'm going to call a get radius method from this object and let's print the radius of c1 and c2 also so here i'm going to just write c1 and here i'm going to just write c2 so we are printing the radius of all these three objects and i'm going to run the program now and you can see here the radius of the first object is 2 because we have provided 2 as an argument here the second is 3 because we have provided 3 as an argument here and because we have created this third object using the overloading of this plus operator where we were just adding the radius of both the objects that's why we got 5 years so 2 plus 3 is equal to 5 and this addition we have done using this expression so we have added the radius of the current class and the object which is passed using this argument so this is how you can overload the operators in python by implementing the associated methods which are available in python so let's say now we want to overload the less than and the greater than operator so for the less than operator we use this lt method and for the greater than operator we use this method called gt so let's implement these two method inside our classes so i'm going to just copy this add method two times and first of all i'm going to replace this by lt which is less than and the second method i'm going to replace by gt which is greater than and we want to see if the radius of the circle is greater than the second radius which is provided using this object or not so first is less than so we are going to provide this operator and second is greater than so we are going to provide the other operator which is greater than operator and now this less than and greater than function is going to give us the boolean value if this radius is less than this radius then it's going to return us true otherwise it's going to return us the false so i already have the two instance of two classes and if i want to compare these two classes i can just write c1 and i will use thus less than operator here and then c2 and also i'm going to use the greater than operator here and let's run the code and let's see what happens so now it's going to give us this value which is the constructor of the circle so how can we get the boolean value you just need to remove this constructor from here so you just need to remove the name of the class and now i'm going to run the code once again and now you will see true and false so we were checking if c1 radius is less than c2 and it gives us true and once again we were checking if c1 radius is greater than c2 and it has given false to us also we can check the third object for example c3 here if c3 is greater than c2 or not and most probably it's going to give us true and it's correct here so you can see it's that simple to overload any operator in python using these builtin methods so you just need to find out the associated method related to that operator and then you just need to implement that method related to that operator in addition you can also implement some other methods which are available with the class so once again when i'm going to print the dir with any of the object let's say c1 and i'm going to run this program and you can see the list of the functions which you can implement inside your class so add is already there but you can also implement this dish method or dir method or any of these methods which are available here so repr method or str method any method you can implement inside your class in order to avail the functionality associated with that method so at last let's try to implement one of the method which are associated with the class so let's say we want to implement this method which is the str method so i'm going to just minimize this and i'm going to just copy this function and once again paste here and instead of greater than i am going to just implement now the str method now this str method only takes one argument which is self so i am going to just remove the second argument and here in the return value i can just return some string for example so i can just say circle area and i'm going to return the area of the circle so i'm going to use this concatenation operator and then i'm going to convert the area into the string and then i'm going to just use self dot area which is going to give us the area of that circle so once you have implemented this str method in your class you can simply use it like this dir method so i can just write str and then the name of your object which you have created and let's run the code and let's see what happens so i'm going to just see the result now and it prints circle area and it's going to print the area of the circle i just need to provide equals to symbol here so we will be able to see it in a prettier way so you can see the area of the circle is printed similarly you can print the area of the other two circle which is circle two and circle three and let's run the code once again it's going to print us the area of all these circles so this is how you can use operator overloading in python in this video we will talk about a command line tool which is called pdb which we use to debug our python script now pdb stands for python debugger and it is already installed whenever you install python on your operating system so you don't need to install pdb separately if you have python installed it will work on your terminal now you might wonder why i'm using pdb if i already have the pie charm ide and i can debug my code on the pycharm ide now in real life situations most probably you will run your python script on some kind of a server now generally on these servers you don't have the luxury of using an ide you will have to use the terminal in order to debug your python script and that's why i wanted to show you how to debug your python script using the command line tool which is pdb now to start with i have this simple python script which asks the user to input two numbers and these numbers will be saved in these two variables which is x and y now we are using a function called add to add these two values and then we are just transferring the result into this z variable and we are just printing the value of z now in order to open the terminal in the pycharm ide you just need to click on this option which says terminal and if you don't want to use this terminal you can also use a windows command prompt or linux terminal or if you are working on mac os you can also work on the mac terminal so what you need to do is you just need to copy the path of your file where you are working and then you just need to cd to the directory in which you are working in so i'm going to adjust cd to the directory in which my python script is there and then the command will be same to run and use pdb on your terminal so you can use the windows command prompt or this terminal which is available in the pycharm or any other terminal which is available on your operating system so i'm going to use this terminal which is available in the pi charm now i'm going to move this terminal to the right hand side so we will be able to see the code and the command terminal at the same time now in order to run your script you already know that you just need to give this command which is python and the name of your script in my case the name of my script is debugging dot py so i'm going to just press enter and then it's asked me to provide the first number i'm going to provide the first number and then i'm going to provide the second number which is going to give me the sum of these two numbers so here it prints 3 3 four which is not the addition of these two numbers now some of you might already know what is the problem with this code and how to solve it but we will use the debugger to find out what is the problem and how to solve this problem so that whenever we enter two numbers it's going to give us the proper sum of these two numbers and not the other answer now in order to start the debugging on your python script you can provide this command so you can give python hyphen m pdb and the name of your script so my script name is debugging dot py and then i'm going to press enter and now you will be able to see this kind of interface and you will be able to see pdb printed here and there is a cursor blinking here and this python debugger which is python pdb starts from the first line of code which you have on your script so we are on this line which is this line in our script which is the declaration of this add function now the first thing you need to know in order to work with this pdb interface is the help command so you can give this help command here or you can give the h keyword which means the help command so i'm going to give the full help keyword here and then press enter which is going to give us the list of each and every command which you can use with the pdb so these are all the commands which you can use with pdb the most important command which we will be using frequently is the next command or shortcut of the next is n or we will be using the step command or the s keyword for the step command otherwise we will be using the c keyword or the continue command these are the three most frequently used command to work with the pdb now you can see you can type help and the name of the command in order to know more about that command so i'm going to just write help here and the name of the command let's say i want to just know more about the next command so the next command continue execution until the next line in the current function is reached or it returns so in this way you can get the help about each and every command which you have here now once again we are going to find out at which position pdb is right now we already know that pdb is on this line but there is a command called where or you can also write w to find out where right now your pdb is so i'm going to just write where and it's going to show on which line your pdb is currently standing so now i'm going to give the end keyword you can also give the next command here and i'm going to press enter and it's going to go to the next line which is this line which is the if name is equal to main so now we are on this line right once again when i press enter it's going to execute the last executed command so we have executed last this next command so if you press enter directly without entering any command it's going to execute the last executed command so now we are on this line which is this one which takes the input from the user and you will also be able to see on which line this code is so this line is at the seventh line now once again i'm going to press help here and then press enter and now i want to use this continue command so this continue command is used to continue the execution of your script from the point where you are right now so we are right now at this line which is line number seven and if i press c or if i type continue which is this keyword and i press enter then my program is going to execute and it will ask me the first number so i'm going to provide the first number let's say 2 and then i'm going to provide the second number which is 3 and then when i press enter it's going to execute the program and it's going to print the result which is 23 in this case which is wrong and after the script is finished the pdb is going to restart the execution from the top so you can see this line the program is finished and will be restarted so once your program is finished the pdb is going to restart it from the starting point from where it has started so i'm going to quickly provide the n command for next and once again next and i'm going to once again press next and provide the number which is three this time so now we are on this line which is the line number eight which is this line so the execution of this line is finished now there is a print command in pdb so you can just write print and the name of the variable so i'm going to just write x here because this line is already finished and it's going to give me the value of x so when i press enter it's going to print 3 which is the value of x once again i'm going to press the n command or the next command and then i'm going to provide the second number which is 4 this time and i'm going to print the value of the y now so till now nothing seems to be wrong with this code so let me just press h for the help once again and we are going to see the list of commands once again and now i want to use this command which is what is so i'm going to just write what is and the name of the variable which is x okay so earlier we have printed the value of x which is three and now i'm writing what is x so we want to know what type of value is inside x so i'm going to just press enter now and once you do that you will see that x is an instance of class string and we wanted to enter the number right so now we know what is the problem so because input function is going to return the string value and this add function is just concatenate these two string values and it's not adding the two numbers so what is command is going to give you the information about the variable or the function but we will continue our debugging so you can see here right now we are on this line which is this line so now i want to go inside the add function in order to inspect if it's working fine or not so we are on this line where add function is called so i can use this command which is the step command or i can use the shortcut which is s in order to step into the function where we are right now so i'm going to just type step here and then press enter and you will see we are here on the declaration of add function once again and if we type n or next once again we will go to the next line of this function which is this line which we use to add the value of x and y so this command step or this letter s can be used to step into your function or step into your class if you are using class it's going to step into or inside that function so now i'm going to just press n to go to the next line and this is the return sum line and now we already know what's the problem so we can press c or continue in order to continue the execution of this program so i'm going to press c and then press enter which is going to continue the execution of the program and it has printed the result and also it has restarted the pdb once again from the starting of the script so now let's correct this code and in order to convert the input into int or the float you can just type cast the string to int using this end function so i'm going to just use this in function in front of both the input values so now we know that our script is most probably going to run fine so let's try to set the breakpoint at this line because both the values will be available at this point and we will know the values of x and y at this point so we will be able to see the type of both the values so first of all what is a break point so when you set a breakpoint at some line the program is going to stop exactly at this line so generally we have seen that if you start the pdb it's going to start from the beginning of your script but if you set the breakpoint the execution will only stop at the line where you have set the breakpoint so once again i'm going to press h to get the help and i will see which command can i use to set the breakpoint so there is this command called break which i can use to set the breakpoint so let me get the help about the break and it's going to give us the description about the break command so you can use the break keyword or the b letter in order to set the break point so you can see it takes these arguments so in order to set the breakpoint you just need to write break and then the line number on which you want to set the breakpoint so let's say i want to set the breakpoint on the line number nine so i can just write break and then 9 and then press enter which is going to set the breakpoint on line number 9. now i can give the continue command in order to continue the execution of the script and now when i press continue it's going to first ask for these two values so i'm going to quickly give the value of first number and the second number and then when i press enter it's going to stop at this line where we have set the break point right so right now we are on this line which is line number nine and now i can give this command which is what is x and once again it says that the type of this x is string so what might be the problem the problem is after changing our script we haven't restarted the pdb we haven't exited the pdb and restarted the pdb so this script is not loaded after we have edited the code right so in order to quit the pdb you give the quit command or the q letter so just press q and then press enter which will allow you to come out of pdb and let me run that debugging once again so you can once again give this command python hyphen m pdb debugging dot py and then press enter which is going to restart the debugging and now this script is loaded once again with the correct code which is end so now let me just put the break point on the line number 10 which is this line and now i'm going to press c to continue and i'm going to give these two numbers let's say and you can see the program is halted on the line on which we have set the break point on so once again i'm going to give the what is command and the name of the variable which is x and then press enter and now you will see the type of x is now int and we have solved the problem so we can simply press c to continue and see the result and you can see it prints the result which is eight which is the addition of three and five so our debugging was successful and we are now seeing the expected result which we wanted to see so this is how you can use pdb to debug your python script now there are few more ways of using pdb with your python script so let's see those other ways in which we can use the command pdb with our python script so i'm going to press q in order to exit out of the debugging so the second way of using pdb is to import the pdb inside your script so i can just import the pdb library inside our script and then in order to set the breakpoint i can use pdb dot set trace so this will set the break point on the next line after this line so i'm going to just clear the terminal by right clicking and then pressing clear buffer and once again to start the debugging i just need to give this python command and the name of my script so once you have this import inside your script and you have this code inside your script you don't need to give the pdb command you just need to run your script normally with the python command so my program execution is here which is running the program normally so i'm going to just script the value of x and y which is three and four and it's going to stop the execution at this line which is just after the set trace code okay so because we have set the breakpoint on this line using this line of code it's going to stop at this point and once again i'm going to use for example what is command and i want to see the value of x and it's going to show us the type of x which is in so this is the other way of using pdb in your script some people also like to use pdb directly at the point where they want to set the breakpoint and the benefit of using this type of code is if you are using any linting tool it's going to warn you on the same line so the developer will know that he needs to remove this line because linting will fail because there is a semicolon here and we are using two line of code in the same line so it's going to give us the warning and that's how the developer will know that he needs to remove this line so he is going to remove this line after the script is working fine so this was the second way i'm going to quit out of the pdb once again and let me show you the last way of debugging your code with the pdb command so i'm going to clear the terminal and now i'm going to just give this python command which is going to open the python shell and here you just need to import the script which you are working with so i'm working with the debugging script and then import the pdb and once you have imported your script and the pdb module you can just use pdb in order to start the debugging of your script so pdb dot run and under the brackets or under these parentheses you just need to give the name of your script so my script name is debuggings and then you need to provide at which point you need to start the debugging so let me enclose this code inside a new function so let me define a new function and i'm going to name it as main and this is going to be my main function and inside the main function i'm going to execute all this script and i'm going to just call this main function inside this if condition and here on the python shell i can just write debugging dot the function which i want to call so i'm going to just call the main function and then i'm going to press enter and once again it shows me that debugging doesn't have this main method because after saving i haven't restarted the pdb once again so let me just quit once again quickly and let me just quickly close this terminal and restart this terminal and once again i'm going to give the python command which is going to start the python shell and i'm going to import the pdb and the script once again and now i can just give the pdb dot run command and then give the name of the script on which i want to work on which is debugging and then i'm going to call the main method inside the debugging and then press enter and once again give the n command which is for the next which is going to start the debugging of your code so this is how you can use the pdb command in order to debug your python script in the last video we have seen how to debug our python script using python debugger or pdb now in this video i'm going to show you how you can debug your python script using pycharm ide so to start with i have this python script which takes two user input both numbers and i have created this add function which just add these two numbers and return the sum and using this print function i'm just printing the sum of these two numbers now let's run this code normally without any debugging and i'm going to just give two numbers here 44 and 55 it's going to give me this kind of output which is wrong because the sum of 44 and 55 is not obviously 4 4 5 5. now some of you might already know the problem with this code but let's debug it with the help of the python debugger so in order to start the debugging in pycharm ide you just need to click this icon which looks like a bug and when you hover over it it will say debug so i'm going to click on this debug button which is going to start the debugging of my program so you can see here this debugging window is opened and this debugging window have two sections one is console section and other is debugger section so right now we are in the console section where we can provide the user inputs and see the output of our python script just like the normal output now there is also a debugger window where you will be able to analyze the variables and all the frames of your program so i'm going to go to the console window and here i'm going to provide the first number and the second number and i'm going to press enter and it prints the sum of these two numbers which is not correct but our python script is finished executing now in order to debug this python script we need to set the breakpoint at which the execution of the program will stop and we will go step by step after this point so i'm going to set the break point at this line which is line number 13 at which my main function is called and then click on this line where you want to set the set point and you will be able to see this red circle logo which means that we have set the breakpoint at this point so let's start the debugging once again and you will see because we have set the breakpoint here the program execution is stopped at the line number 13 and how you know that the execution is stopped at line number 13 you will be able to see under frames this line which is highlighted and you can see the line number is 13 so at this point the program execution is on the line number 13. also you will be able to see these kind of icon on top of this window so the first icon here is the step over icon which you can click to step over your code the second icon is step into icon using which you can step inside your function or a class on which you are currently on the third icon is step into my code so generally if you use this option which is step into and your program contains some inbuilt or builtin functions then it's going to go into those builtin function and this other option which says step into my code is going to only step inside your code and not into the builtin functions or the classes there are few more icons here one is four step into and other is step out which we are going to see later also under this variables section you will be able to see the values of your variables so first of all i'm going to click this button which says step over you can also press f8 to step over so i'm going to click this button and because my program asked the user to provide some input i will go to the console and provide those inputs so i'm going to just give 33 as the first number and 55 as the second number and then once again i'm going to press enter which is going to print the output and we come out of the debugging so now you know that this breakpoint is not helping us so we are going to remove this breakpoint and we are going to set our breakpoint here on the line number nine so here we will be able to see the values inside the variable x and y so that we know what's the problem inside our code so let me start the debugging once again and once again i'm going to give these two inputs 33 and 44 let's say and then you can see our program execution is stopped at this breakpoint and you will be able to see the values of your x variable and the y variable now immediately you will see that this x value is the string and also this y value is the string and whenever we use this plus operator with two strings it's going to give us the concatenation of those two strings also in the variables you will be able to see the list of variables and the type of those variables and the values inside those variables so you can see x has string type and the value is 33 and y has also the type string and the value is 44. now i told you that you can use this button to step into your code so i'm going to click on this button which says step into my code which is going to step inside this function so our program execution was on this line this was the break point we have set and when i clicked this step into my code it has stepped into the function add if i would have pressed the step over button then my program execution will go to the next line and not inside this add function so because i have pressed this button which says step into my code that's why it goes inside the function so here also you will be able to see the values of your x variable and y variable and also you will be able to see the value of the sum when you just click the step over button and here you will be able to see the value of sum which is three three four four which is the concatenation of these two numbers so immediately you will know that you are not adding these two numbers you are just concatenating two strings which gives you this kind of result so once you have pointed out the problem in your code we are going to stop our debugging so there is this red button here which is a square button i'm going to click on this which is going to stop that debugging now in order to fix this code i can just type cast this input which is a string into the integer and with the second variable also i'm going to do the same and now let's start the debugging once again and once again i'm going to give the two numbers 33 and 44 and press enter and the program execution will stop at the breakpoint and now you will be able to see the values here which is 33 and 44 and under variables you will be able to see the type of these two numbers which is now end so both are int values i'm going to step over now so last time we have stepped into the function which is the add function this time i'm going to just press the step over button which is going to not go inside the add function but just step over to the next line and you will be able to see the value of z here which is 77 which is the correct sum of these two numbers so this is how you can use pi charm to debug your python script in this video we will talk about a special tool called python pip so we are going to see what is python pip and how to use python pip so let's get started so first of all what is python pip so pip is a command line tool for installing and managing python packages which are generally found on a special index called python package index now if you want to know more about python package index you can visit on a website called pipe.orgpypi.org and you will be able to get more information about python package index on this website so what is python package index python package index or pi pi is a repository of software for python programming language now pi pi helps you to find and install software developed and shared by the python community you can get more details about pi pi by clicking on this link or this link which are shown on the home page of pi pi and you can see at the time of making this video there are almost more than 150 000 project available on this index and if you want to search for any special project you can search it using this search text box so let's see how we can use python pip using command line so generally whenever you have installed python on your windows or any other operating system pip will be installed with the same installation of python so if you have installed python 3.4 or above most probably the python pip will be already installed on your operating system now to check which version of pip is installed on your system you can give this command python hyphen hyphen version and then press enter and it's going to show you the version of pip installed on your system so you can see pip 10.0.1 is installed on my windows operating system and the python version which it supports is 3.7 now the first thing which you need to know about this tool called pip is how to use this tool so to know more about this tool you can give this command python hyphen hyphen help and it's going to show you the commands which you can use with this command line tool so here you can see the usage you give the pip command and then one of these command either install download uninstall list show and all these other commands in order to install a package or uninstall a package or get to know more about a particular package also there are some general options here which you can read so for example if you want to get help you give these options or if you want to print the verbose output you can use these options and if you want to know the version you can use these option and all these other options are available with this command line tool which is pip so let me clear this command prompt with the command called cls and i'm going to first of all go into the python shell using python command and in here i'm going to import a special package called flask and i'm trying to see if it's already there or not so i'm going to press enter and it's going to show me this error which says module not found error so this module flask is not right now recognized by my python interpreter so let me just exit from this interpreter by just pressing exit and now i'm going to just give cls so in order to know more about a particular package you give this command python search and the name of the package so in my case i want to just search for a package called flask and i'm going to press enter and it's going to give me a big list of package which are related to flask so because flask is a popular package on python package index that's why you can see so many options for the flask package so i'm going to once again clear the terminal and i'm going to install this package which is flask so in order to install the package you give this command pip install and the name of the package and then press enter and it's going to start downloading this package so now you can see this package is successfully installed on my system and you can see the version which is installed is flask 1.0.2 now in order to know more about a particular package which you have already installed you can give this command so in order to know more about the package which you have already installed you give pip show and the package name and when i give this command you can see the name of the package is flask the version which is installed is 1.0.2 and there is a brief summary of this package also which is available here and the home page for this project is also available here who is the author and all the other details about this package which you may find useful are given here using this command which is pip show and the package name now after installing a package i'm going to verify if this package is available using the python shell or not and once again i'm going to try to import this package which is flask and then press enter and you will be able to see now i don't see any error so if you don't see any error this means that this package is successfully installed and in future you will be able to import this package to use it on any of your python script which you create after installing this package so let me once again exit from the python shell and let me clear the command prompt once again now in order to list out all the packages which are installed on your system you can give this command which is pip list which is going to print the list of all the packages which is already installed on your system now in order to uninstall any package you just need to give this command pip uninstall and the name of the package for example i want to uninstall this package which we have installed which is flask and i'm going to press enter and you can see it says uninstalling flask and it will ask you whether you want to proceed or not so you just need to press y in order to proceed and once you press y it's going to just uninstall that package from your system and at the end you will see this message which says successfully uninstalled and the package name which you have uninstalled you can once again give this command pip list and now you can see flask is no more in the list of installed packages so this is how you can use python pip in order to install and manage your python packages in the last video i have shown you how you can install and manage your packages using python pip now in this video i'm going to show you how you can install and manage your pip packages using pycharm ide so here i have a very simple opencv python script which i used to load this image which is pythonlogo.png file now in order to run this script i need to import this package which is called cv2 and this package is available on python package index so let me just open the pi pi dot org website and let me search for opencv here and when i search for opencv you will be able to see multiple opencv related packages but the one i want to install is this one which is opencv hyphen python so i'm going to click on this package to see more details about this package so you can see the latest version of this package at the time of making this video is 3.4.3.18 and in order to install this package with pip you just need to run this command which is pip install opencv hyphen python now in order to import this opencv hyphen python on your pycharm ide what you need to do is just create your project and write your code and then go to the file and then go to the settings so just choose the settings option here and once the settings option is open you will be able to see different categories here you need to choose this category which says project colon the name of your project and then click on project interpreter now by default some packages are already available here which is pip and setup tools and we want to install a special package which is opencv hyphen python so in order to add this package you just need to click on this plus button so i'm going to click on this plus button and you will be able to see this search bar here so here you just need to search for the package you are looking for so i have just entered opencv hyphen python here and the first option which is available here i have just selected it and you can see this is the same package which we have seen on the python package index website so let's match this once again so here you can see the latest version is 3.4.3.18 and here also the latest version is the same and the description is also same so wrapper package for opencv python bindings and here also the description is same so this is the package we want to install if you want to see the github repository also i'm going to just scroll here and then i'm going to open the github page from the pi pi website for this opencv hyphen python and this github url is also same which we are seeing on the pie charm ide so now we know that we need to install this package which is opencv hyphen python so we just need to click on this button which says install package which is going to install this package for your project and after some time you will be able to see this message which says package opencv hyphen python installed successfully so i'm going to just close this window and after closing this window you will be able to see that this opencv is now visible in your project interpreter and now we are going to click once again ok and once you click ok you will be able to see here at the bottom some processes are running which is the process of importing this library into your project and after some time you will see that this red squiggly line for the error has disappeared from the import cv line so now we will be able to run this code so let's run this code and let's verify if everything is working fine so i'm going to just right click and then click on run the project name on the file name and it has opened the picture which i want to open which is this python logo picture so this is how you can install and manage your pip packages using pycharm ide in this video we will talk about global variables local variables and nonlocal variables so let's get started so to start with i have a very simple function which is func and here it has one print statement which is printing the value of x but you can see here x is not defined locally inside the function instead i have declared x outside the function and i am just assigning the value to x just before calling the function here so what do you think will happen so let's run the code and let's see what happens so because this x is declared globally and it's in the global scope so first of all your function will search for the value of x inside the function in the local scope and if it doesn't find the value x inside the local scope it's going to see outside the local scope in the global scope for the value of x and we have defined this value of x outside the function in the global scope so this print statement will take the value of x from the global scope and that's why it's printing global using this print statement now let's modify this function little bit so i'm going to define a local x inside the function and i'm going to assign a new string to it so let's say this is a local value so i am going to assign the string to the x so now we have x variable inside the local scope of the function and also we have another x variable outside the function in the global scope so what do you think now will happen so let's run the code and let's see what happens so you can see here it's going to print local because the variable will take the local value or local value have more priority than the global value so whatever variable is declared nearer to the use of this variable that variable value will be used and that's why the local is printed because it's declared nearer to the use of this x which is inside the local scope of this function now let's print the value of x outside the function so in the global scope i want to print the value of x once again and let's run the code and let's see what happens so this local is printed using this print statement and the global is printed using the print statement which is outside the function so right now things are easy to understand when you declare this value x outside a function in the global scope and call the value of x using print then it's going to print the global and whenever you use the variable inside the function in the local scope it's going to print the local variable value which is local to the function so this means variable x which you have declared inside the function is the local variable and this variable x which you have declared outside the function is the global variable now let's make things little bit interesting and i want to just print the value of x before even assigning the value local to it so right now i want to do something like this so until this print statement i haven't declared the value of x locally so using this print statement the value of x is supposed to be taken from the global variable which is this variable and then once we have declared the value of x locally then this print statement is going to print the value of x using the local variable but when we run the code it's going to give us the error and it's going to say that this is unbound local error which is local variable x referenced before the assignment so right now what we are trying to do is we are trying to mix the global and the local variables and python is not able to understand whether x is a local variable or x is a global variable so to solve this problem we need to state explicitly that this x which we want to call using this print statement is the global value right so x here we want to take from the global value so to state that we can use a keyword called global and then the variable name so by writing this kind of expression we are telling python that x is declared globally outside the function and we want to take the value of x globally so using this statement we are just stating that use the value of x using the global scope now when we run the code it's going to run fine so now you can see it has printed global here so let me just change this print statement so we will be able to understand what's happening really here so i'm going to just assign some number to the print statement let's say this is number one print statement and then this is number two print statement and this is number three print statement so we are going to know which value is printed using which print statement so i'm going to run the code once again and now you can see first print statement which is this one is going to print global because until here the value of x is taken from the global scope so it's going to print the value of x which is global which is defined here now you can see here we are reassigning the value of x and we are just saying that now we want to assign local to this x variable but still this variable is the global variable because we have explicitly stated here that take the value of x from the global variable so this global variable value will be reassigned and now this global variable value is local because we have reassigned the new value inside the global variable x and in the third print statement because we have already changed the value of x here now the new value of x will be local and it will be accessible from the global scope also so this also prints local so once again when you use this expression you are telling your local function that use the value of x from the global scope so now whenever you reassign some other value to x this is not the local declaration you are just reassigning the value to the global variable which is x here okay so once you have changed the value of x to local it will stay there that's why here also it has printed the value of x is equal to local now let's talk about the nonlocal variables so nonlocal variables behave almost similar to global variables but they have some differences so let's say i will define instead of saying that this is a global variable i'm going to say that this is a nonlocal variable and when i run the code it's going to complain and this is going to say that this is a syntax error and no binding for nonlocal variable is found so nonlocal variable bindings you can only do inside the nested function so generally you use nonlocal variables inside the nested function you cannot use this nonlocal keyword instead of the global keyword so let's see how we can use the nonlocal variables inside the nested function so what i'm going to do here is let's say i'm going to define the value and let's say this time i want to just use the value of x as numbers so here i'm going to assign x is equal to 20 so this x is in the global scope and i'm assigning 20 to it and then i'm going to once again inside the function i'm going to declare a local x and i'm going to assign 50 to it and then i'm going to define one more function inside this function and i'm going to name it as let's say inner function and let me just add the def keyword and then inside this inner function what i am going to do is i am going to define a nonlocal variable once again x and then what i am going to do is i am going to reassign the value of x is equal to hundred so what i have done i have declared this x global variable and assigned 20 to it and inside the function also i have declared one local x variable and i have assigned 50 to it and inside the inner function of this function i have defined a nonlocal variable which is x and i have assigned the value 100 to it so now what we are going to do here is we are going to call this inner function inside our outer function which is the func function okay so this is the inner function and we are calling this inner function inside this function which we have declared so now what do you think will happen so let's run the code and let's see what happens so this first print statement which is this one it's going to print 50 because until now before calling the inner function the value of x will be taken from the local scope because we haven't stated here explicitly that x is a global variable so the value of x will be taken from the local scope right so we haven't written here that value of x is a global variable x value right so that's why the value of x will be taken from the local scope and that's why it's printing 50 here using the first print statement now here we have called the inner function that means the value of nonlocal variable is assigned to 100 and once again we are calling the value of x so here inside the inner function we have defined the nonlocal variable that means it's not a global variable so it's not changing the value of the global variable or it's not using x from the global scope but this x will be taken from the local scope so this x will be overwritten by 100 values this is the new value we are assigning to our local variable which is x right so that's why it's just giving us 100 using this print statement so this nonlocal keyword you generally define inside the nested functions to state that we want to take the value of x from the local scope of the outer function not the global scope so this x is essentially this x which is defined inside this function and we are just reassigning the value of x to hundred and that's why it's printing hundred here and also you can see this print statement which is printing the value of global x which is this one that's why it's printing 20. so because we are not using this global x inside the functions because we have just used the local variable x inside the function and then we have reassigned the value of 100 to this local variable this x is not going to change and that's why it's printing 20 here now let's see what will happen when we change this keyword nonlocal to global and once again i'm going to run the code so now let's go to the function and here we have defined the local x which is different from the global scope so until here the value of x will be taken from the local scope so this print statement because we haven't called the inner function before this so the value of x will be taken from the local scope so here it's going to print 50. now after this print statement we are just calling the inner function and inside this inner function we are just saying that take the value of x from the global scope not the local scope so using this expression we are saying that take the value of x from the global scope so this value will not be affected by this reassignment because now we are changing the value of the global x and not the local x so that's why when you call this print statement the value of x will be taken from the local scope so using this print statement when you call x it's going to take the local value of x because this inner function has no effect on this value of the local x and that's why it's printing 50 once again using this print statements so this x value will come from the local x and not from the global x and the last print statement is going to print hundred because this is the global x we are talking about and we have already changed the value of globalx 200 using this expression that's why it's printing 100 here so there is our difference between nonlocal and the global variables if you write here nonlocal then here this value will be treated as the local variable so here we are changing the value of the local variable of x if you declare this as the global variable then we are changing this value which is in the global scope so this is how you can use global variables local variables and nonlocal variables in python i hope you've enjoyed this video i will see you in the next video hey guys welcome to this video on python unit testing tutorial for beginners using pi test so first of all what is unit testing so according to wikipedia unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit to use or not so in unit testing we perform the lowest level of testing that is individual units of software are tested that means units like functions subroutines and classes are tested to verify if they are giving the desired result or not now let's discuss why should we unit test our code so when you write unit tests they reduces bug in the new features and existing features so let's say if you are writing a new feature in your code unit tests can help you to reduce the bugs which may appears during the execution of your code now if you write good unit tests this serves as a good documentation for the person who is using your code so because in unit test we are actually using the functions or the classes and testing them so if the person who wants to use your code he reads the test he will be able to understand how to use your code also when you write test for your code it reduces the cost of the change in the production so if some code goes to production without testing and you find the bug in the production stage then it's much costlier than fixing your code when you are developing your code next unit test helps in faster debugging and faster development of your program also because you have the idea of what should be the desired result that means you can develop your code in a manner which is perfect for your tests and at last but not the least unit test helps us to better design our program now let's talk about the unit testing frameworks which are available in python so i have listed here three top most unit testing frameworks which we can use to write our unit tests so first module is unit test module and this unit test module is present in your python standard library so you don't need to install any extra module in order to use this unit test module the next module is the nose module which is not there in the standard library but it's simpler to use than the unit test framework and at last you can use the pi test framework which is not in the python standard library but it's one of the most popular unit testing framework for python so we are going to use pi test for the unit testing of our python code so let's see how we can install pi test package on our operating system on which we are working on so you can install pi test using pip so we are going to just write pip install pi test and then press enter which is going to install this pi test package on our operating system so you can see pi test is now installed on my operating system so i'm going to give cls command to clear the terminal and then first of all i can give this pi test command and then hyphen h in order to get the help about pi test so just press enter which is going to give you all the flags or the commands which you can use with the pi test so the usage is given here you just need to use the pi test keyword and then you can give the options which are listed below and you can give the file or directory name or the list of files or directories so for example the general options are given here so when you give this flag minus k or hyphen k it's going to match the substring or the regular expression which you provide after this flag and when you use hyphen m this means that it's going to test the functions which have the name assigned directly to them that means only run the test which have a given mark expression so i'm going to try to show you all these options one by one but let's see how we can write the test to use them using pi test so in here i have a python script called math underscore func dot py file and inside this script i have two functions one is a simple add function which adds two values and other is the product function which returns the value of the multiplication of two values now in order to write the unit test for these functions i can create a new file so let me create a new python file and i'm going to name it as test underscore math underscore func so i have added this extra prefix here which is test underscore in front of the name of my file which is math func so i'm going to just create this file so this test underscore prefix which i have added in front of my python script name will help pi test to recognize that this is the file in which the unit testing functions are written so it's going to go to that file and here we can first of all import the math func python script and then we can define the test functions so the test function you can define simply as you define any other function in your python script so you write def and then just start the test name with the test prefix so test underscore and then whatever name you want to give to your test so first of all i want to test the add function here so i'm going to just write test underscore add and this function is not going to take any parameter and inside this function i can provide some assertion for my functions so i can use a special keyword which is assert and then you can call your function in your python script so mathfunc dot add function and here as an argument i'm going to provide two numbers let's say 7 and 3 which is going to give us the result 10 so we are going to just check whether this function is returning 10 or not and this is called assertion assertion means you want to assert that the function is returning the desired result so we are expecting the result 10 when we provide 7 and 3 as an argument to this add function you can also provide multiple asserts here so let's say i just want to provide for example 7 here you can see that y is equal to 2 is the default value of y so here in the assert i can only give one argument and the value of second argument which is y will be taken from the default value which is two so seven plus two is nine so we can just say whenever you provide seven here it's going to give us nine once again whenever you provide five here it's going to give us seven so in this way you can provide multiple asserts inside your function whatever you think will come as an expected result of your function so i'm going to define the second function which is test product and once again i'm going to pass no argument here and once again i can just use this assert keyword and then the name of my library which is math func dot the function this time we are going to test the product function and let's say we just want to check the product of 5 and 5 and the expected result will be 25 in a same way whenever you provide here for example only one argument the default value of y is two right so when we provide only one argument which is 5 here we will be expecting 10 here in a similar way when i provide let's say 7 here we are expecting the result 14 here so once we have written our unit tests let's try to run these tests using pi test so first of all i need to go to the directory where this test script is there so i'm going to just copy the path and then go to the terminal and i'm going to cd to this path which i have copied and let me just remove the script name from here and then press enter so now i'm in the folder where my math func dot py is there and test underscore math underscore func dot py file is there so in order to run your unit test file you just need to give this command pi test and the name of your test file which is test underscore math underscore func dot py in my case and then i'm going to press enter and you can see it's going to give me two passed in whatever time it took to execute these two tests so because we have written two tests here for two functions it's going to show us this result which is two passed let's say we are going to expect some unexpected value so here we have written some wrong value which we are expecting and now when we run our test it's going to fail you can see one passed and one failed and pi test will also give you the information about the assertion failure so the assertion failure is happened at this assertion where you are just testing 10 is equal to 18 which is wrong here so once again we are going to correct this also let's say some developer has changed the function which you are testing so instead of returning the addition now i'm going to return the subtraction which is going to break that test now so i'm going to run the test once again and once again it's going to give you the error and this time it's going to show us that the result is 4 but we are expecting 10 as the result and that's why it's failing so once again i'm going to just fix my code and then once again i'm going to run my test and once again the text will pass so let me just clear the terminal using cls command and you can also give a flag called minus v which stands for verbose in order to get the more detailed result so i'm going to press enter and you can see it's going to give us this flag passed or failed in front of your tests and both tests are right now passing that's why it's written passed in green here let's break the test once again so i'm going to just say minus here and once again run the code and now it will say this test is passing but the test add is failing due to this assertion so i'm going to once again fix the code and come to the terminal once again i'm going to just clear the terminal and you can also run your test using this command so you just need to write pi dot test without giving any name in front of this pi dot test and then press enter which is going to automatically recognize the test file because we have given the special prefix here test underscore this is how your pi test will recognize that this is the testing file so it's going to just run the test inside that file and once again you can see it runs and two tests are passing you can also give the verbose flag here which is going to give you the more information about your tests now let's say we are going to remove this prefix from our test so let's say we just write tes underscore add so there is no test prefix in front of your function and once again i'm going to give the same command and you will see only one test is recognized which is test underscore product and this is because we haven't provided that test prefix in front of the function so in order to recognize this function as a unit test you need to give the test keyword as the prefix of your unit test function also whenever you change the name of your test file so let's say i'm going to refactor the name and i'm going to just remove the t from test and then once again i'm going to press refactor which is going to change the name of this test file and now this test file name is tes underscore math underscore func and once again i'm going to try to run my test and it's going to say no test run in this much amount of time so again whenever you don't give the test keyword in front of your file name then pi test will not be able to recognize that this is your unit testing file let's go to the terminal and i'm going to just give the cls command in order to clear the terminal and let's give the second command now which we have used for running the test which is the pi test command and the name of the file so now my file name is tes underscore math underscore py and now i'm going to press enter and you will see now it's going to recognize because we are specifically giving the file name in which our tests are there so if you want to run your test inside some file which doesn't have the test prefix in front of it you can just use pi test command and then give the name of the file and pi test is going to recognize that this is the file in which your unit tests are there and it will run all the unit test in this file so so in the last video we have written two test functions for our add and product functions which were able to test those functions using these numbers now additionally i have added two more test functions here and these two test functions i have added to test the strings with the add function and the product function so using this plus operator we can also add two strings right so i have added the string test for the add function and the product function here now the first thing i want to show here is you can add any comparison operator here so it's not necessary that you need to use this equal to operator here you can also write for example greater than operator or greater than equals to operator or the less than operator or less than equals to operator or not equals to operator so you can use all these comparison operator with your assert statement additionally you can use this is keyword to test whether something is something so using this is keyword i am testing here that the result which i got using this add function over the strings is it a string or not so using this type i'm just finding out the type of the result and i'm checking if this result is a string or not you can also use in operator or not in operator so using this not in keyword we are checking whether the string is inside our result or not so this string or let's say this string is not inside our result so this assert is going to pass because this string is not present in our result additionally you can also use this in keyword and you can check whether some string is inside your result or not so i can also write hello in result which will check if this keyword is inside our result or not now the next thing which i want to show here is let's say you just want to run one test from here which is test add and you don't want to run any other test how you can do it using command line so you can just write pi test command and the name of your test file which is test underscore math underscore func in my case and then you can add double colon here and then give the name of your test so let's say i just want to run the test ad so i'm going to just run this test and you can see it's going to only run the first test let me just add minus v here which is going to show which test has passed and you can see this test has been passed which is test add and let me just clear the terminal now the next option which i want to show here is hyphen k so once again i'm going to just write pi test here and we will once again add the hyphen v for verbose and you can use a special option which is hyphen k and then you can give any expression which you want to match using this hyphen k option so let's say we only want to run the add test so we have to add test one is test underscore add and other is test underscore add underscore string so i just want to run the test for the add function so here inside the double quotes i can just write add and then press enter and it's going to run the test which contains add keyword or add string so you can see it ran test underscore ad and test underscore add underscore string you can also use or operator here so let's say you want to run the test which contains add or which contains string keyword and when i'm going to run the test it's going to run all those tests which contains either add or the string keyword so there are three tests which fulfills this condition and all those three tests are performed and other tests will be deselected so you can see four item and one item is deselected here also you can use the and instead of or so i'm going to just write end and then press enter and it's going to run only those tests which contains add and string both so there is only one test name which contains add and string both which is this one so only this will be executed and the other three test will be deselected let me once again clear the terminal now the next option which i want to show here is the hyphen m option so once again i'm going to just write here hyphen m and after this hyphen m you can provide any mark expression so let me go to my code and here i just need to import the pi test first of all so let me import pi test and here you will see that it's showing me the squiggly line because of my ide which is pie charm so because i have installed pi test using pip on the command line which is not recognized by my pycharm ide that's why it's showing me this squiggly line but i'm running my test using command line so this will work so don't worry about this squiggly line the import will work and after that what i can do here is i can add a decorator so i can just write pi test dot mark dot any expression which you want to give here so this test add and test product is for the numbers so we can write number here and also we can add the same decorator for the test product and for the other two tests we can just write that these tests are for the strings so this expression is upon u so you can give any expression here which you want to match later using hyphen m option so i'm going to also add this decorator over the other string function also so we have two markers now one is number and other is the string so now after hyphen m you can give the mark expression name so let's say i'm going to just write number here and then press enter and it's going to run all the tests which have the mark number which is the test add and test product now let's run the test which have the mark string so i'm going to just write string and then press enter and it's showing me 4d selected because i forgot this s after the string so let me just add this s and then press enter again and you can see it runs only those tests which have string mark on top of them so this is the string and this is the string mark so those two tests were executed and other to test were deselected let me just clear the terminal once again now the next option which i want to show here is hyphen x option so once again i'm going to just write pi test hyphen v and then hyphen x now this hyphen x means exist first so whenever first failure occurs in your test the pi test will exit from the execution of your test so let's just add some failure assertion here so i'm going to add the failure here so let's say i'm just checking the failed assertion here just to check whether this hyphen x works or not so i'm going to just press enter now and you can see first test was run which was passed but the other test failed so it has shown us the stack trace of the failed test and after that the text execution was stopped so after two tests because the failure occurred the other two tests which was supposed to be executed are not executed because of this hyphen x option so as soon as the first failure occurs your test will exit now let's say you don't want to see this tech trace after the failure of your test so this is all the information which is given to you about what assertion has failed or not so let's say we don't want to see this so how to just skip that stack trace you can add hyphen hyphen tb is equal to no and this is going to disable the stack trace and then press enter and you can see now this text trace is not printed only the success or the failure will be printed but not the stack trace let me clear the terminal once again and this time i want to show one more option which is max fail so here you can just write hyphen hyphen max fail option and then give the number in front of it after the equals 2 symbol so let's say we just write max fail 2 here then it's going to wait for the maximum number of failure and then it will exit so let me just run this test so you can see all four tests has been executed because maximum failure we were expecting is two that's why all four were executed because there was only one failure let's say i just make it one so now the value of max fail is one and then i press enter and you will see after the first failure it's going to exit because we have provided max fail one and this is the number of failures which we are expecting after that your test will be exited so let me just clear the terminal once again and let me show you one more option so this time i want to show you the skip option so let's say i just remove all these markers from here and and now i want to add a mark which is skip so just add this decorator on top of your test which is at the rate test dot mark dot skip and then inside the parenthesis you can give the reason for the skip so here you can just write reason equals and whatever reason you want to give here so i'm going to just write do not run number add test okay so this is the reason which will be printed and when i will just execute my test once again with hyphen v you can see this first test is kept so it's not executed it's skipped and all the other three tests were executed let me just fix this second test so it's going to pass and once again let me just run this test and you can see all other tests were passed and the first test is skipped because we have added this skip decorator on top of the test add function also there is a skip if option available so here instead of skip you can just write skip if so this skip if is going to check for some condition so let's say i'm going to import the sys module here which is going to give me the information about the python version i'm running and then as a first argument i can first of all give some condition so i'm going to just write sis dot version info which is going to give me the version of python available and i'm going to check if this version is less than let's say 3.3 then i want to skip this test so i'm going to once again let me clear the terminal and once again run the test and i see some failure here which is here i added dot instead of comma so you need to separate this major and minor version using comma so this means 3.3 python version and once again i'm going to run the test and then press enter and now you can see all four tests were executed because this condition was not met now let's say i want to just give the opposite condition of that which means i want to skip if i have the python version greater than 3.3 which i have i have the python version 3.7 let's check it using python command so i'm going to just write python hyphen hyphen version and then press enter and you can see i have 3.7.0 version and let's run the test once again and now you can see this test is skipped because this condition is met now the next option i want to show here is hyphen s options so let me just make this condition like this so this test will not be skipped and the next option we are going to see is the hyphen s option so let me clear the terminal and let's see which option i'm talking about which is hyphen s and this option you can use to print any output which you want to print using let's say print function so let's say i want to add a print statement here so i'm going to just add print and then let's say i want to just print the addition of 7 and 3 and for just knowing whether this print statement has been executed i'm going to add this string here so we know that this print statement has been executed so now when i execute my pi test without the hyphen s option first you will see there is no print statement which is executed now if i just add hyphen s here which will allow this print statement to be executed and now you will see that this print statement has been executed and this line is printed using this print statement so if you want to print all the print statements then use hyphen s option or you can also use the option which is hyphen hyphen capture is equal to no and then press enter which is also going to do the same so either you can use hyphen s or you can use hyphen hyphen capture is equal to no so let me clear this terminal one last time and the last option which i want to show here is the hyphen q option which is the quiet mode so let me just execute this pi test once again and you can see all this information is printed and when i add minus q here which is the quiet mode you can see no information is printed here about the test which test is passed only the important information is printed which is for test passed in this much amount of seconds if i remove the hyphen v here from here you will see all the other output is gone and only four passed in whatever amount of seconds is printed so this is the quiet mode which will not print unnecessary information it's going to just show you how many tests passed and how many tests failed so this is how you can use some options with pi test command in this video i'm going to show you how to use a special decorator which is parameterize so here i have on the left hand side a simple function which is add and on the right hand side i have written the test for this function and i have written three test function for the add function the first test function here test the add function using the integer values the second test function i have written for the string values and the third test function i have written for the float values which i provide to the add function now one thing which you will notice here is i'm using the same add function three times here in all these three tests and there has to be a better way in which we just need to call this add function only once now you can say that why we need three functions i can just write three assert into the same function and i can just remove these two other test functions this is okay but still i have to call this add function three times to test it with numbers strings and the float values and in those type of situations you can use a special decorator which is parameterized in which you need to call our same function to test it with the different type of values so here i have imported this pi test module and then above my test function i will just call pi test first of all then dot mark dot parameterize so we are testing this add function which takes two arguments so here in the parameterize we just need to give the name of these two arguments you can just say that these two arguments will be x comma y because i have given x comma y here so i can just write into the single quotes x and then single quotes y which will be the name of these two arguments so this name depends upon you you can say this is num1 and the y is let's say num 2 or you can say this is arg1 or arg2 so these arguments names are user defined names you can give any names which you want to pass to your function so the number one variable name will be passed as the first argument and the number two variable name will be passed as the second argument now once again when you look closely to this assert you will see the variable values here are first argument second argument and the result so the same three values you need to give here so number one number two and the result so i'm going to just say that the third argument is result here and then as the fourth argument you give the iteratable list so the fourth argument will be a iteratable list where you can provide the values of argument 1 argument 2 and the result so inside this list we are going to give this argument 1 2 and the result values using a tuple so here in the first test i have given seven and three and the result is ten we can give the same values here so seven comma three and the result we are expecting is ten so the 7 will be passed to the number 1 argument 3 will be passed to the number 2 argument and 10 will be passed to the result in a same way we can define multiple tuple values here so the second test is for the string value so the first argument is hello second argument is world and the expected value is this one which is result and the third test case or test scenario is 10.5 for the floating values comma 25.5 and the expected value is 36. now once you have defined this parameterized decorator you don't need to call this add function multiple times what you need is you just need to define the same variable names which you have defined here in the parameterize so the first argument will be num1 the second argument will be num2 and the third argument will be the result and then you just need to pass these values to the add function so the first number is the first argument the num2 is the second argument and the result is the third argument now what's going to happen when you run the test is this list which you have given here will be iterated over by your parameterized function and these values one by one will be assigned to number one number two and the result and the same value will be passed here as the first argument and the second argument and as the result for this assert statement and one last thing which i'm doing wrong here is i think you need to give these arguments name as the string separated by commas so you just need to give this string separated by these commas so the first argument of this parameterize a string in which you define the arguments which are taken by your function to test so num1 and num2 and the result and these arguments are separated by commas and all these values are inside the string so this thing you need to keep in mind that this is a one argument string and inside the string you define those values separated by comma so let's run the code and let's see what happens so you can see now that three tests were run and this first test was with the value 7 and 3 and the expected result was 10 and it passed second you will also see which arguments were passed so in the second test hello and world were passed and the expected result was hello world and in the third test case 10.5 and 25.5 was passed as the arguments and the expected result was 36. so by using this parameterized decorator you can just use or call your function which you want to test once and then pass different type of parameters into it using this parameterized decorator so that hey guys welcome to the next video on python unit testing tutorial for beginners using pi test in this video i'm going to show you how to use fixtures with pi test so let's get started so to start with on the left hand side i have this student db class now as you can see here in the init method i'm just initializing a member variable which is data is equal to none and then it has two methods one is connect method and other is get data method now this connect method takes one argument which is data file now if you can see on the right hand side i have written two tests for this student db and i have first of all imported this class and then i have initialized this class student db and then i'm calling the connect method here now in the connect method argument i'm giving this data.json as an argument so let me show you what this data.json contains so this data.json contains the data of the student so it has this element called students which contains this array which contains different data about different students so right now i have two student data here one is id one scot pass and other is id two mark and fail so using this connect method i'm just opening this data.json file and then i'm just loading this json file as the dictionary so as you can see here i'm using the json module which i have imported at the top and whenever i call json.load it's going to convert this json.file into the dictionary and then i have this method called getdata which takes one argument which is the name of the student now this name i'm going to search in the dictionary which i got using the connect method and if this name which is provided as an argument is contained in the students data then i'm going to just return this student dictionary so once again as you can see here i'm just importing the student dot db class and then i'm just initializing the student db and then i'm just calling the method called connect and in the connect method i'm giving the data.json as an argument which is this file which contains the student data and in the next step i'm just calling the get data method from the studentdb class and i'm giving the name of the students here so you can see the name of the student is caught that's why i'm giving scott here and in the next test i'm giving the mark name which is the second name here and then using these assert statement i'm just checking whether this id which i got using the scot data is equal to the id which is there in the json file or not same assert i have written for the student's name and the student's result and similar test i have written for the second name or second student which is mark now as you have already seen to make things simpler i have just used this json file as the database file but in real life situations you might be having some other databases like mysql or postgresql or mongodb or any other database and you might want to test your database so the same approach you can use whenever you are trying to use the real database so let's first of all run these tests and let's see what's the result here so i'm going to just run these tests and you can see both tests passed here now let's talk about the problems with these two test cases now you might have already guessed that we are repeating ourselves so we are initializing this database twice for the two tests but let's say we have thousands and thousands of tests then you have to initialize this database thousand times so the first problem is the code repetition the second problem is whenever you want to initialize your database for example thousand time these initializations are resource intensive so they will be costlier to your system on which you are running these test cases because they are consuming your resources so what can be the solution here so you can use two type of solutions in these type of cases the first approach is by using the setup and tear down methods now the setup and teardown method falls into the category of classic x unit style setup if you are familiar with other testing frameworks like unit test or nose these methods might be familiar to you so first of all we will see how to solve this problem using the setup and tear down methods and then we will see how to solve this problem using pi test fixtures so we already know the problem so to solve this there is a method called a setup and the teardown module method so i'm going to just write setup underscore module and this takes one argument which is module and then here inside this method you can initialize your resources so let me define a global db variable and i'm going to initialize it with none and then i'm going to just use this initialization inside this setup module so whenever you write the setup module as it is then pi test is going to understand that this is a setup method and it's going to execute this code before executing your tests so what i have done is i have defined the global db variable that means i need to indicate inside the setup method that this is the global variable and that means now inside this db we have our database instance so we don't need this initialization in these two test cases now and now we can use this db instance to call the get data method to get the data about particular student so this is the setup module method there is also a tear down method which we can define here so just write def teardown underscore module and then inside the parenthesis you give the module as an argument and inside this tear down module you can close your connections or free your resources whatever you want to do after your test you can do in the tear down module so i don't have any close method inside this database class so let me create some dummy close method here so i'm going to just say def close and then i'm going to just use pass here so it's just a blank method and let me just provide the parentheses here so let's say we want to use this close method to free our resources or close the connection with the database you can do this by just calling this method so db dot close and this is going to free your resources and let's just uh print something here so we know that these two methods are called so here i'm going to just say that this is a setup method and then inside the teardown module method we are going to just replace this setup by teardown so we know that when this setup method is called and when this teardown method is called so once again this setup module and teardown module will be recognized automatically by your pi test and then this code will be called at the starting of your pi test and this code will be called at the end after all your tests have been passed or failed then this teardown module test will be called so let's run the test once again and you will be able to see that this setup method is called first and after the execution of the tests this teardown method is called and we can recognize it by using this print statement now if you haven't already recognized i have used this minus s or hyphen s option to allow the print method to execute this print statements so if you want to allow your print statements to be printed on the console you need to use this hyphen s flag to be more clear i'm going to just remove the hyphen b from here so it will be more clear so you can see its setup is called first and then you will see two dots here which means two tests has been executed and at the end this tear down method has been called to free any of the resources which you might want to free or close the connection with the database so this is called the setup and teardown method now let's talk about the python fixtures so instead of using the setup and teardown methods pi test allows us to write the python fixtures which will automatically be called at the starting and the end of your test so instead of writing all this code what i can do here is i have first of all imported this pi test and then i'm going to define a method which i will call db because as you can see here all these tests are just using the db instance so we want to somehow pass this db instance to our tests and then i'm going to provide these parentheses and inside this method i want to do the same so i will just call this setup code here and let me just remove all this code from here and at the end what i want to do here is i want to just return this db instance which i got from the student tb class i don't need this global declaration here because there is no global variable and for now let's just comment this code so to declare a fixture you just need to add this decorator at the top of your method which is pi test dot fixture and now what i want to do here is i want to pass this db instance as an argument of both these test cases so now what will happen is pi test will recognize that this is your fixture and then whatever you return from your fixture will be passed using this argument to your test cases so let's run our test and let's see what will happen when we run those tests so you can see both these tests has been passed but you will also observe one more thing and this is that this setup is called twice which is a problem as we have discussed we don't want to call this setup twice we just want to call the setup at the beginning of our tests so how to solve this problem so to solve this problem we can tell pi test that this is a module wide fixture so we just want to call this fixture once at the starting so to do this we just need to write scope is equal to and then just write module here and then we are going to just run our test once again let's see what happens so now you can see the setup is called only once and that's what we wanted right we just wanted to call this setup at the beginning of our test and not at the beginning of each of the test now let's see how we can add the tear down functionality so i'm going to just use this code after this return and then i'm going to uncomment this code and then let's remove this commented code and to call this teardown code which is written here at the end of your test what you can do here is you can replace this return by yield so when your test will start it's going to execute the code until yield and at the end of your test this code will be executed so let's see what will happen when we run the code once again so let's just call the pi test once again and you can see setup has been called and at the end of your tests tear down has been called so let me just clear the terminal and let's run this pi test command once again without hyphen v verbose so we will be more clear and you can see first of all setup has been called and then your test has been executed which are indicated by these two dots and after your tests this tear down code has been executed so this is how you can use fixtures and setup and tear down methods with your pi test test cases hey guys welcome to the next video on python unit testing tutorial for beginners using pi test now in this video i'm going to show you how you can run your tests which you have written using pi test inside your pi charm ide so till now we have been running our tests which we have written using pi test on the command prompt or the terminal but using pycharm ide also we can run these tests inside the pycharm ide so let's see how we can run those tests which we have written using pi test using the pycharm ide so as you can see here on the left hand side i have a class and on the right hand side i have written some tests which are related to this class now i want to run these tests which i have written here using the pi test inside the pycharm ide so for doing this what i need to do is first of all i need to install pi test package inside the pi charm ide so you can see here when i try to import pi test inside the pycharm ide first of all it will give me this red squiggly line which means that pycharm is not recognizing this pie test package till now so let's first of all install this package so just click on file and then click on settings and then go to the section which says project and then your project name so project colon project name so i'm going to click on this and then go to the project interpreter now as you can see here there are some packages which are already here and we want to install a new package which is pi test so i'm going to click on this install or this plus icon here and then i will just search for pi test and the first option you will see here is pi test and you can see this will be the version which will be installed on our pycharm ide so what i'm going to do is i'm going to just click on this button let me just move it little bit above so you can see this button so i'm going to click on this install package button which is going to install pi test package inside my pycharm ide and once this pi test package is installed you will see this message which says package pi test installed successfully with the green highlighted text that means pi test is installed so you can close this window so i'm going to close this window and you will be able to see the spy test now is added to your project interpreter so now when i click on ok and i will wait for some time till this process is has been finished and then after some time you will see this red squiggly line under this pie test is gone so now our pycharm ide recognizes this pie test package and now we want to tell the pycharm ide that we want to run the pi tests so for doing that once again i will click on file and then go to the settings and then this time i will go to the tools so just click on tools option and when you scroll down you will be able to see this option which says python integrated tools so just click on this and on the right hand side you will be able to see under testing that default test runner by default is unit tests so we need to change this to pi test okay so just change this default test runner to pi test and then apply and then click ok which is going to tell pycharm ide that we want to run the pi tests now as soon as you are finished with the setting of pi test on your pycharm ide what you can do now is you can right click on the file where you want to run pi test so this is my test underscore math underscore func dot py file where all my tests are there so just right click on this file and then you will be able to see this option which says run pi test in the file you want to run the pi test so just click on this option which says run pi test in the file and as soon as you do this you will be able to see this window which is for the pi test and you will be able to see all the tests which have been passed on the left hand side and the terminal output on the right hand side so let me just maximize this window here and on the right hand side you will be able to see the output so we have run the test on this file and because i have some output which is a print output as you can see here print statement here which is responsible for printing this line and also i have this print statement for teardown so this teardown is printed using this print statement also you will be able to see two dots here which means we have two tests inside this file which ran successfully so let's add this verbose flag inside our pi test using pycharm ide so once you ran your pi test using pycharm ide you will be able to see this drop down menu here which says pi test in whatever file you are running your pi test on and just click on this file you will be able to see this added configuration option right away after first run of your test so just click on this option which says added configuration and then you can add the arguments which are additional arguments like verbose or hyphen s or whatever option you want to provide here using this additional arguments option so let's say i want to provide this hyphen v option which is for verbose and then i will say apply and then i will say ok and then i'm going to run the test once again either clicking on this button or right away from this button so let me click on this button and once you ran your test you will be able to see the verbose output on the right hand side let me just remove these print statements because they are just not looking good on the tests so i'm going to just remove the setup and tear down print statements from here and i'm going to run the tests once again and then you will be able to see the correct verbose output here now if you want to see all these tests which are passed or failed on the left hand side using these green or red circles then you can click on this green circle at the top here so once click on this green circle and you will be able to see the list of all tests which are there inside your file so this is the script name which is test underscore math underscore func and these are the two tests which are there inside this test script so you can see the first test is test code data which is this one and the second test is test mark data which is the second test here you can also run these tests individually so you can right click and then you can just say run test which is going to run only one test which you want to run so once you run this only one test you will be able to see on the top that only this test has been running so in order to run the whole python script for the test you can once again select this option which is pi test in whatever test script you have so just choose that and then run it once again it will run your all the tests once again and you will be able to see all the tests here so in order to run individual tests you can just right click and then run those tests but remember that you need to change this option again from here also if you want to run the test by just hovering over the test so this is the test let's say i want to run only this test so you can just hover over this test and then right click and then just click on this option run pi test for this test which is going to run only that test so once again i'm going to select this option for the whole file which is going to run all the tests once again for the pi test using pycharm ide so this is how you can run your tests which you have written using pi test using pycharm ide i hope you have enjoyed this video and i will see you in the next video hey guys welcome to the python thread tutorial for beginners so first of all what is a thread so a thread is an individual and separate unit of execution that is the part of a process now what is a process a process is simply a running program so for example if you run a browser it's a process if you run a video game it's a process now inside this process multiple threads can work together to accomplish a common goal and threads allows the program to run in parallel that is the single most important benefit of using threads so let me give you an example so when you play a video game it has to handle few tasks for example it has to handle the graphics and the user interface and if you are playing the multiplayer game it has to handle the networking and all those things it has to handle in parallel because it has to remain responsive at all the times so how does this video game handles those parallel tasks the simple answer is threads it can assign one thread for graphics one thread for user interface and other thread for networking so by using threads the video game can always remain responsive and it can run the task in a parallel way now let me explain threads using this diagram so you can see this whole blue box here is a process and the threads exist inside this process so in this process you can see three threads now inside those threads you can see there is a code and local variable so a thread is a light weight process that exists inside the process also a thread is a sequence of control flow the difference between the thread and the process is that the tread exists entirely inside the process and share its resources so let's say inside this gray box we have the global variables the each tread will be able to share those global variables and in addition each thread can have its own local variables and its own control flow to work with those local and global variables now a single process may have multiple threads of execution and as i already said that threads are useful when an application wants to perform many concurrent tasks on a shared data now let me give you one more example so think about a browser it has to handle the landing pages or the animations or if you want to open multiple website on different tabs and you want to run video in one tab and if you want to do another task in other tab most of the time the browser always remains responsive and the browser can handle multiple tasks at the same time so it uses threads to always remain responsive now there are two different kinds of threads one is a kernel thread and other is a user space thread or a user thread now kernel threads are the part of operating system while user space threads are not implemented in kernel the user space threads can be seen as an extension of function concepts in programming languages now each process have at least one thread and that is the main thread so if you don't even create a thread inside a process it has at least one thread and that is process itself now let's talk about the advantages of using threading so the first advantage is multithreaded programs can run faster on computer systems with multiple cpus because these threads can be truly concurrent on multiple cpu computer systems the second advantage is the program can remain responsive to input at all the times this is true both for single and multiple cpu computer systems now the third advantage is threading allows to do something else while a thread is waiting for a i o task or any other task to complete so it always remains responsive the next advantage is some programs are easy to express using concurrency which leads to elegant solution and as a result they are easier to maintain and debug so some programs or some processes are inherently concurrent in nature and the next advantage is threads of process can share the memory of global variable so as i have already shown you in the diagram previously that multiple threads can share the memory of the global variables at the same time so if a global variable is changed in one thread this change is valid for all the threads a thread can have local variables also as we have seen in the diagram now let's talk about some of the issues or challenges you will face while programming threads for a program the first challenge is the scheduling so to execute a threaded program it must rapidly switch between threads so a program should be able to switch between threads efficiently and conveniently the second issue or challenge is the resource sharing so as i told you that multiple threads can share the same memory of the global variables so since threads share this memory and other resources it must be careful because operation performed in one thread could cause problem in another thread the next challenge you could face is of synchronizing of the threads so threads often need to coordinate their actions and as a software developer you may have heard about race condition of threads which means the outcome depends on the order of thread execution and often for synchronization we use locking primitives now that was the general description about threads now let's talk about the threads in python so in python a thread is an object like any other object that can hold data this object can also be used to run with methods the object also can be stored in the data structures and this object can also be passed as a parameters to the methods also in python a thread can also be executed as a process and during the lifetime of a thread it can have various states now in python there are two modules which supports the usage of threads and these two modules are thread module and threading module now there is one thing to note here is that the tread module has been considered as deprecated for quite a long time so often users are encouraged to use the threading module instead of the thread module so if you will see in python 3 the thread module is directly not available but indirectly you can use underscore thread to use the tread module and this is to remain backward compatible with the previous versions of the python now the difference between the thread module and the threading module is that the thread module tweets the tread as the function while the module threading is implemented in an object oriented way so in the next videos i will show you how to use these two modules in python to create threads and handle threads in python in the last video i have given you a brief introduction about threads and threads in python in this video we will discuss about a module called thread module now if you remember in the last video i have told you that thread module is considered as deprecated in python 3 but if we want to use thread module in python 3 we can still use thread module using a module called underscore thread and this is for backward compatibility so i just want to give you a brief demo about thread module in python 3 so you will have some idea about thread module in python 3. so let's get started so first of all in order to use thread module you need to import it and then generally you will write thread but in order to use the thread module in python 3 you need to use the underscore thread here okay so thread module is not directly available but it's available using this underscore thread module and for printing and giving some delay to our functions we are going to import a module called time now using thread module it's possible to use functions in separate threads so we are going to create a function and then we are going to execute this function in separate threads so let's define our functions and i'm going to name my function as print underscore epoch and if you don't know what is epoch epoch is the start of january 1st 1970 and we are going to try to print the number of seconds from epoch till now and inside this function we are going to provide two arguments first is the name of your thread so i'm going to just write name of thread and the second argument we are going to give is the delay okay so this is your custom function you can provide any name here and any number of arguments here and now inside this function first of all i'm going to create a counter so i'm going to just write count and i'm going to initialize this count with 0. now inside this function what i'm going to do is i'm going to loop around and inside the loop i'm going to provide some delay so we will be able to see the thread execution so let me just provide the while loop here and we are going to just check whether this count is less than three and inside this while loop we are going to sleep for some time using that time module so i'm going to just write time dot sleep and we are going to just pass this delay argument inside this sleep function so i'm going to just write delay here which will be the delay in seconds so for example if i provide the delay of one then our while loop will sleep for one second now after this we are going to increment our counter so i'm going to just write count and then plus equals one which is going to increment the value of counter by one now after this in order to see whether our thread is working or not we are going to print something so let's print something using the print function so what we want to print so let's say we want to print the name of the thread whatever name we will provide for the thread and then i'm going to just give some indicator here let's say this is some line and then we are going to print the time since epoch so in order to print time since epoch we will use this time module and then we just need to use the time function inside the time module so using this print function we will know which thread is executed and at what time it's executed so now we have our function and now this function we want to execute inside the thread so in order to execute this function inside the thread first of all i'm going to use this thread module and there is a special function inside this thread module which is called a start new thread function so i'm going to use that function so let's just call this function which is start underscore new underscore thread now if you hover over this function and when i press control on windows or command on mac and then i hover over this function you will be able to see the signature for this function so this function takes three arguments first argument is the function which we want to execute inside the thread second argument is args which we provide to our function as tuples so second argument we need to provide as tuple and inside this tuple we will provide the number of argument which we want to provide to our function and third argument is the kw args option and this kw arg is an optional dictionary for the keyword arguments so let's provide the function name first of all and our function name which we want to execute is print underscore epoch and you need to remember that you need to provide this function name without any parentheses okay so just provide the function name as the first argument second is the number of arguments so we have provided two arguments for this print epoch function so we need to give these two argument in the form of tuple so first argument let's say is the name of the thread so we are going to just say that this is the thread one which will be the name of this thread and the second argument is the delay in seconds so let's say i want to provide one second delay in the while loop so it will sleep for one second this delay we are providing in order to see the thread execution because thread execution is so fast that it will be difficult to see the execution of threads without this delay now i told you that the third argument is the optional argument so we will not provide the third argument to this start new thread so this statement is going to create a new thread and it's going to execute this function inside this new thread so till now we only have one thread so let's create the second thread and to create the second thread you need to repeat this function which is start new thread and then you need to give the name to your thread so i'm going to give the name thread 2 and let's just change the delay so here i'm going to provide the delay of 3 second to the thread 2 so now we have created two threads and this function will be executed in both the threads so let's see if this code works or not so i'm going to just run this script and you will see as soon as i run the script it exits without printing anything and this is because thread takes some time to be created and we need to wait for the thread creation so we need to provide some mechanism to wait for the thread creation and this weight we can provide in two ways one is we can just provide the blank input function which waits for the input so using this input function we will wait for some time until these threads are created and now we will see if this works or not so let's run this script once again and let's see what happens so you can see now you will be able to see these print statements and you will see that first of all thread one is executed and then thread one is executed once again because we have provided only one second delay between the loop inside this thread so thread one will be executed faster than thread two so first of all thread one is executed and the epoch time is printed and once again this thread one is executed because the delay time is less and then thread two is executed and the epoch time is printed here and then thread one is executed once again and at the end you will see that thread two is executed two times because you can see that here we have the counter limit which is less than three so let's try to increase this limit to five and let's see how many times this print statement is printed so let's run the program once again and let's see what happens so once again this thread one is executed two times and then thread two and then thread one is executed three times once again and then thread two comes and you can see rest of the threads are executed then so here you can see thread one is executed one two three four five times and thread two is executed also five times so in this way you can start multiple threads and execute different functions inside those threads now i told you there is another way of waiting and this is by providing the while loop so i'm going to just provide while one and inside this while loop i'm going to wait forever so i'm going to just say pass and this is an infinite loop which is like waiting so i'm going to just close this script first of all and then run the script once again and then you will see the same effect which you have seen in the case of input function also now here one more thing to consider is the return of this function so if this function which you want to execute inside the thread returns successfully the thread will silently exit but when your function terminate unexpectedly then unhandle exception will be thrown and the strike trace of that exception will be printed on the terminal so if this function throws then stack trace will be printed and this will be an unhandled exception so in order to avoid this unhandled exception you can also provide the try catch block here so here you can provide try and then i'm going to provide some space here and here also and after this code i'm going to just write accept and inside the accept you can provide any error so you can print that this is an error so inside this print function you can just write that this is an error or anything which you want to write inside this accept block you can write using the print function or whatever you want to do in order to handle this exception you can do inside the accept block so let's run this script once again and let's change the delay here so i'm going to provide the delay of two seconds and here i'm going to provide the delay of let's say four seconds and let's run the script once again and this script runs and you can see after two seconds the thread one print statement is executed and then after four second thread two print statement is executed and this thread execution you will be able to see in those intervals so this is how you can use thread module in python 3. in the last video we have seen how to use thread module in python now in this video i'm going to show you how to use threading module in python and i'm going to give you some introduction about threading module how to create threads using threading modules and how to use threading module now threading module is more powerful and it has more higher level support for creating threads in python so let's see how to use threading module in python so in order to use threading module first of all we need to import it so i'm going to just import threading module and once threading module is imported we will be able to use threading module the second module which i'm going to import here is the time module which we have also seen in the last video because we are going to create the same function and we are going to use this function using the threading module which we have seen in the last video now i'm going to create the same method which i have created in the last video also which is print epoch so i'm going to just copy this method in order to save time and then i'm going to just paste it here so now we have our function which we want to call using the threading module and we want to create some threads using this threading module and call this function inside those threads so first of all i'm going to write this condition which is for the main method which is if name is equal to underscore underscore main underscore underscore and under this condition what i'm going to do is i'm going to create two variables let's say first variable name is t1 for thread 1 and then i'm going to call the threading module to create a thread now inside this threading module there is a class called thread which we will use to create threads so just call a thread class here and constructor of this class takes several argument when you hover over here inside the parenthesis you will see the signature of this thread class so it can take the target it can take the name of the thread and arguments also it can take in the form of tuple and it can also take the keyword argument in the form of dictionary so for our purpose we need to call the function which is print epoch so we need to provide a target so in order to provide the target we are going to just write target equals and the name of the function so the name of the function is print epoch which we are going to call and this you need to give without the parenthesis so just remove the parentheses in front of this method when you use it as the argument in front of target the second argument which we want to give here is the arguments which this function takes so this argument we can give using the args parameter so i'm going to just write args equals and then in the form of tuple i'm going to give the name of the thread and the delay to the thread so let's give the name to the thread let's say this is thread one and the delay which we want to give here is one so this statement is going to create one thread and let me create one more thread in order to create multiple threads and instead of t1 i'm going to change the name to t2 so we have t1 variable and t2 variable and in the args i'm going to change the name of the thread which is thread 2 and let's say i want to give this delay of 2 second to the function using the thread 2. so now we have two variables t1 and t2 which is an instance of the thread class now using t1 and t2 we can call a method called start in order to start the thread so i'm going to just call t1 variable and then call a method called start which is going to start the thread t1 similarly i'm going to call the instance t2 and i'm going to call the method start on this instance t2 also so start method we use to start the threads now if you remember in the last video when we have created the thread using the thread module we have given this condition which is the infinite loop and this infinite loop we have used to wait until the execution of thread is completed now in the threading module which is the new module this facility is available using a method called join so on t1 instance i can call a method called join and on t2 instance also i can call a method called join and this join method waits until thread 1 and thread 2 is completed it's execution and then at the end we can print something let's say we are going to print that everything is done so i'm going to print done here so let's rewind what we have done inside this script we have imported threading module and time module and then we have created the function which we want to call using the threads now in order to create the thread using threading module we need to call the class called thread inside the threading module now this class constructor takes several arguments and right now we have given two arguments to this thread constructor which is the target which takes the name of the function which we want to execute using this thread and second argument we have given here is the args which is the argument which we want to give to the function which we want to execute same we have done for the thread 2 also now the start method on these instances is going to start the thread for t1 and t2 and the join method we have used to wait until thread 1 and thread 2 is completed their execution so let's run this script and let's see what happens so i'm going to right click and then run the threading example python script and you can see straight away that this output is printed here similar output we have seen in the case of thread module also so in this output thread one is printed and the epoch time is printed and then thread two is printed which is printed using the thread two so this output is printed using the thread one and thread two output is printed using the thread two and because we have given different intervals for thread one and thread two that's why we can see that thread one is printed and then thread two and then thread one is printed two times and then thread two is printed and then thread one is printed once again two times and then rest of the thread two outputs are printed now let's take one more example and what we are going to do in this example is we are going to create two different functions and we are going to try to call these two functions using these two threads so the first function i'm going to create here is the print underscore cube which is going to print the value of cube of the number which we will provide as the argument to this function so i'm going to just write print here and then using this print statement i'm going to print the value of cube of the number so here i'm going to just write cube and then i'm going to provide these curly brackets and then i'm going to call the format method after this string so let's call the format method which we use in order to format a string now inside the string we want the cube of the number so we will just multiply this number three times so num asterix num asterix num which is going to print the cube of the number once again let me just uh copy this function and then i'm going to create one more function and this time i'm going to name my function as print square so i'm going to just write print square here and then i'm going to just write square is equal to and here i'm going to just print the square of the number now in this statement where we have created t1 and t2 instances the target we can change which is the name of the function so now our target is print cube and print square without the parenthesis we need to give the name of these function so print cube and print square and arguments have also changed so earlier print epoch used to take two argument and now we just want to give one argument to the function and let's say it's two and also the print q function takes one argument and let's say it's two also now let's run this uh script and let's see what happens so you will see that there is an exception here which is some kind of a weird exception which says that exception in thread two and this exception is this print square argument after asterisk must be iteratable right so the problem here is we need to give a comma here which tells this uh parenthesis that this is a tuple value okay that's why it's giving the exception so if your function takes one argument then you need to give the value of that argument and then give the comma so that it's able to understand that it's a tuple and then once again when you run this script you will see the value of cube is printed which is eight and square is printed which is four so this cube value is printed using tread one and square value is printed using the thread two so in this way you can also call a multiple function using multiple thread instances using threading module so this was a brief introduction about threading module in the last video we have seen how to use threading module to create threads in python now in this video also we are going to see how to create threads using threading module but we are going to see in this video how to sub class from the thread class which is available inside the threading module and then create threads out of that class instance so to start with i have the same method which is print a poc which i want to call inside the thread so now here after this method what i want to do is i want to create a class so i'm going to create a class and the name of the class i'm going to give the name as my thread for example and one thing we need to do here is we need to sub class from the thread class from the threading module so we are going to just call first of all threading dot thread so we are subclassing from the thread class now inside this my class first of all we are going to define the init method so let's uh define this init method and in this init method we are going to pass two arguments same as this print epoch function so first argument will be the name of the thread and the second argument will be the delay so let's provide these two arguments first is the name and second is the delay now after this inside this init method we need to call the parents init method which is threading.thread.init so we are going to just call threading dot thread dot underscore underscore init method which is going to call the parent init method which is threading dot thread right now once you have done that we can just simply define some local member variable for the name so first of all self dot name is equal to name and self dot delay is equal to delay so now once we have our member variables what we need to do next is we need to override a method called run which is available inside the thread class in a threading module so i'm going to just define a run method and we are going to overwrite this so first of all what does this one method do so the run method is the entry point for the thread now in the previous video if you remember we have called the start method on the thread class right so the start method starts the thread by calling this run method so under the hood start method calls this run method so if we override this one method that means when we call the start method from the thread class this run method is going to be called so now we can do some logging here so what i'm going to do is i'm going to print first of all start thread and then i'm going to print end thread now between the start thread and and thread logging i'm going to call the print apoc function and this print epoc function is going to take two arguments which is name so i'm going to just pass the self dot name which we have assigned to the member variable and second is the self dot delay so once again when we call the start method on the instance of this my thread class this run method is going to be called by the start method automatically because we are subclassing from the threading dot thread class now once we have our run method and we have created the init method we can create some instances of my class so i'm going to create some instances for example t1 is equal to my thread and then we are going to pass those two argument first is the name so let's say the name is thread one and the delay we want to provide here is let's say one second because this delay is going to go to the print epoch method which is this one right once again we are going to create the second instance let's say t2 and once again we are going to call the my thread class which we have subclassed from the thread class and once again we are going to give these two argument first is the thread so this time i'm going to name it as thread 2 and the delay i'm going to give here is 2 second let's say and now after the instance is created we can call the start method and the join method on these two instances so let me just call t1 dot start and then we are going to call the t2 dot start and once we have the start which is going to start the threads we are going to just call the join method and by now you already know what this join method do which is to wait for the thread to be completed so i'm going to just call the join method on key2 also and let's run this script and let's see what happens so i'm going to run the script and you can see first of all start thread has been called which is from the logging of this print method and then thread 1 is printed and the epoch time is printed and then thread 2 is printed and the epoch time is printed because we have given the one second delay for the thread one so thread one will be iterated faster than thread two because we have provided the delay of two seconds for thread two and one second for thread one as soon as the thread ends we can see this print statement which is end thread and after the end of the thread two we can see this print statement which is and thread two we can also print here so let's print some more things here so we can print the name of the thread so i'm going to just write self dot name and we are going to do the same for the end thread also so i'm going to just print here also self dot name so we will know which thread is starting and which thread is ending once again i'm going to run the program and now you can see start thread thread one so thread one is started and then thread two is started and you can see first of all thread one is ended and at last thread two is ended so this is how you can sub class from the thread class which is available inside the threading module now inside this threading module there are some special methods which we are going to see now so the first method is so let me just go after this start of the threads so here what i'm going to do is first of all i'm going to use the print function and inside this print function i'm going to call the threading module and there are some special methods for example first of all we are going to see what is the active count of threads so what are the number of threads which are there inside this program this is going to print the number of threads now the second method which i'm going to show you is the threading first of all let me just call the threading dot we are going to call the current thread so this is going to print the current thread which is active right now and third method which i want to show here is threading dot enumerate and this enumerate method is going to enumerate the number of threads which are active so let's run this program once again and let's see what happens so i'm going to just run this program and first of all you will see 3 is printed using this print statement which is threading dot active count so active count is going to give you the number of threads and you already know that we have created two threads and one main thread is already available so total number of threads are three here which is printed now the current thread here this print statement prints this output which is the main thread so right now at the time of this print statement main thread is active now this enumerate method as i said is going to enumerate over all the threads which are available so main thread is available and then we have created thread one which is this one this is the name of the thread one and then when i scroll here you can see thread two is available so total three threads are available main thread thread one and thread two so these method you can use to just find out how many threads are there what is the current thread thread and you can also enumerate over all the threads there is one more method so i'm going to call this method here and i'm going to print it inside the print function and this time i'm going to use the instances so t1 dot and there is a method available here which is get name which comes from the thread class and because we are subclassing from the thread class this and because we are subclassing from the thread class this get name is available inside the my thread class also and same we are going to do here also so print and then t2 dot get name so this is going to give you the name of the thread by default so i'm going to just run this script once again and you can see this is going to print thread 1 and this is going to print thread 2. now you might wonder why this name is thread 1 and thread 2 because this get name method is going to give the value of self.name which we have assigned using this name argument so this name is overwritten in the subclass which is my thread class and that's why it's giving us thread 1 and thread 2 name which we have provided if we change this name let's say t 1 and t2 and once again we run the code you can see the name also changes to t1 and t2 so this is how you can sub class from the thread class which is available inside the threading module and we have also seen some of the method which are available inside the threading module which are useful to us in this video we will see how thread synchronization works in the case of multitrading in python and we will talk about how to use locks in the case of thread synchronization so first of all what is thread synchronization so thread synchronization is defined as the mechanism which ensures that whenever two or more threads are executed in parallel or concurrently and if they are sharing the same resource in that case all the tread should not work simultaneously or parallelly on the same resource so let me explain the thread synchronization problem with the diagram so in this diagram you can see there are three threads and all these threads are sharing the same resource it can be a global variable for example so as long as all these threads are accessing this shared resource one by one not at the same time everything will work fine but the problem arises when two or more threads try to access the same global variable or shared resource at a particular time and this kind of situation is called the race condition so a race condition occurs when two or more threads can access the same shared data and they try to change the value of this same shared data at the same time and whenever this kind of race condition occurs the value of the variables may be unpredictable because if two threads are working on the same global variable at the same time you will never know which thread has worked on this variable so the result is the unpredictable value of a variable now let me explain this problem with an example so i have this sample code in which in the first line i'm importing threading module and in the second line i'm just declaring a global variable now i have two functions here one is thread task and other is main task now inside this thread task function i want to increment the value of x every time by 1 so this is the code for this and i want to increment this value by 1 10 times so that's why i have used this for loop in the range 0 to 9 so it's going to increment the value of x 10 times inside this loop now because this x is a global variable i have just added this global keyword in front of x so our function knows that this x is not a local variable it's a global variable so this function is simple enough it just increments the value of x 10 times inside the loop and this x is this global variable which we have declared outside this function now in the main task what i'm doing is i'm creating two instances using the threading module with the help of thread class this we have already seen in the last video how to create threads using threading module so nothing new in this i have created two instances t1 and t2 and i'm passing the target is equal to the function name which is this function which is thread task so both the threads will call the same function try task and then i'm just starting both the threads with the help of start function and then i'm just using the join methods on both of the instances now here inside our main if condition i'm just calling our main task in which our threads are created and executed and then at last i want to print the value of x when all the thread execution has been completed so let's run this script and let's see what happens so you can see here the result here is 20 which is expected because we are incrementing the value of x 10 times using two threads so the value of x will be incremented 10 times by 31 and 10 times by 32 and as a result the value of x becomes 20 but as soon as i increment the value of this range let's say this is 10 000 and i want to just execute this program once again there is no problem until now we can just run this program again and again we will not see this problem because we are incrementing the value of x ten thousand times with a single thread so we have two threads and the result is twenty thousand which is absolutely fine now let's increment the value of range once again two hundred 000 and now i want to show you the problem so as soon as you do this you can see that the thread synchronization problem occurs so here you can see the result is not 200 000 which we were expecting because for such large value the scenario of thread synchronization is happening so the two threads try to work on the same variable at the same time and as a result the value of x is unpredictable so this thread synchronization problem you will see when you try to work on a same variable multiple number of times so in this case we have a hundred thousand iterations and both the threads try to iterate over the same variable using two threads and the result is unpredictable let's try to execute this once again so you can see the result is always different every time i execute this program because the result is unpredictable so how to solve this problem so one way of solving this problem is by using the locks so first of all let me just change this program and try to use locks in this python script so to use locks what you can do is you can declare a local variable here for example lock is equal to threading dot class called lock so this is going to give you an instance of lock now this lock class have two method one is acquire and other is release now acquire method is used to lock and release method is used to release the lock so let me just complete this script and then i will explain what does these functions do so what i'm going to do is i'm going to pass this lock instance as an argument of the thread task function so i'm going to just write args is equal to and then we will just pass our lock instance as an argument of this tread task same we will do for the second thread and because we have passed this argument we need to add this argument here also so i'm going to just pass the lock instance as an argument of this function and now at last what we are going to do is just before we change the value of the global or the shared data we use this lock variable and call the method called acquires and just after you finished changing the resource or the shared data you use a method called lock dot release so once again we have passed this lock instance which we got from this lock class as an argument of this function so this is the lock instance and there are two main method inside this log class which are acquire and release this acquire method you use to acquire the lock this lock can be blocking or nonblocking so this acquire method takes one argument which is true or false by default the value of argument is true which means that this acquire is blocking by default so what does this lock dot acquire will do it locks the axis of the shared variable in our case this is x and at this time only one thread can work on this variable whatever thread have the access to this function at a particular time so until and unless one thread execution is completed on this variable after that this lock is released that means that the other thread can work on this variable using the lock once again so whenever second thread wants to try to access this variable it will just lock the access to this variable first of all and then work on this variable whatever you want to do you want to increment the value or change the value of x and then release the lock and releasing means that we once again want to allow the other thread to work on this shared resource so this mechanism will allow only one thread to access this shared resource at a particular time so the thread synchronization problem will not occur so now let's just run the program once again and let's see what's the result so you can see this problem and this problem is coming most likely because of this problem because we haven't provided args as the tuple so we need to provide this arg as a tuple so always remember whenever you want to pass any argument using this args keyword you need to pass them as tuple so once again i'm going to just try to run this program and you can see the result is whatever we expected so because we are incrementing the value of x hundred thousand times and there are two threads which are working on the same variable so we get the 200 000 result which is expected now let me run this program again and again and you can see every time now we get the expected result which is 200 000 so this is how you can solve the thread synchronization problem using locks so this is how you can use locks to synchronize your threads in python i hope you have enjoyed this video and i will see you in the next video