we will see some of the objectoriented aspects of Java and first of all we will see what are classes and how we can declare classes in Java and how we can use classes in Java so first of all what is a class you may have noticed that whenever we have created our first program it was a class and inside this class we were calling this main method so every Java project has at least one class and one main method and class is basically a data structure or type in side which you can define some variables which are called member variables and methods which are called member methods and the most important property of classes are you can create instance or object from class so you can maintain different states of a class using these instances or objects so let's see how we can define a class which will be a new class and how we can use it with our main laws which is my class so for example we want to make some student data structure and for that we will make a class so just go to your project if you are using eclipse and go to the package you have made we have made a lesson one package at the starting of this video series go to that package inside which you will be having a class my class in my case just go to the package right click the same package and go to new and create a new class and this class name we will name it as student okay and leave everything as default and click finish and now we have this student class inside our lesson 1 package so we have two classes now my class is the first class which we were working on and the second class is called student dot Java and this is the second class we have created now now this class can have its member variables and methods so for example what can be the traits of the student student can have his ID so ID is integer values I declare a variable called ID student can have name so I declare a variable called name and student can have age his age so I have declare student age okay so this is basically you have created a class and it can have member variables it can also have member methods that we will see in a moment but let's consider this is a basic student class which contains three variables ID name and age okay now to call this class in your main method in my my class you can just create an instance of or object of the class so how you can do it you can just call the same name student last name just copy this name here and then give the name to your instance so as we have we give any name to our variables for example age name or something here also you can give the name to the students variable okay so for example the name is mark we are making the data structure for mark is equal to new student okay and this basically we have created an instance of student class which we named as Mark so this is Mark instance so mark here mark here is called object okay or some people also call it as instance okay instance so mark is here called the object or instance and this object we can use to you know assign values to the member variables of the student class for example marks ID is so whenever you call this instance called mark and whenever you use this dot separator it will give you the options which is provided by eclipse to you so the student class contain age ID and name so we will choose ID student ID is equal to for example one mark is our first student and in the same way you can call mark dot name should be mark dot name is equal to name is mark we already know and the age so mark dot age is equal to and he is fifteenyearold for example so what we have done is we have created an instance of student class and we name it as Mark and then to this instance we have created or we have assigned some values and these values we can you know access these values with the same name small dot ID mild or name man aid so you can just right sis Oh control shift and then you can just right mark dot name is a so you use plus or concatenation operator is and then plus and then mark dot age so we will print mark is whatever his age is years old okay years old okay and when we run this program it will print mark is 15 years old okay in a similar way we can create different instances of our classes and so what we can do is we I will just copy the same mark student class and we will create a new object called this time we call it Tom okay so here tom is the second instance of the student class okay and his ID is to name is Tom itself and the age is for example 14 okay so in here we can once again make the copy of this print line method and this time we will just replace mark by Tom and now you can see it prints Tom is 14 years old and is there something wrong here yeah here we haven't changed this instance name here okay once again we will run the program and it says mark is 15 years old and Tom is 14 years old okay so you using a class we can define different object and we can define these object values of object member variable values which are independent of each other so this instance values which are ID'd toms ID Tom's name and Tom's age is independent of marks ID marks name and marks age okay so this is a very important property of object that it can store its own state and it's independent of the other instance right now in you know in Java programming or programming in general we never use or this kind of usage direct usage of variables are discouraged and why it's discouraged because any other person or whoever is whoever is using your code can modify these values so we use some you know some methods or some functions which can get or set these values okay so what I mean by getting and setting these values is I can go to this class called student and in here I can just use I can just go to the source tab and in here I can go to so we will go to the source and just go to generate getters and setters here and here we can see operation is not applicable in current plus okay and in here we will just use this and click once again getters and setters so just click one variable name or variable then only this will work so go to source once again and create getters and setters and in here select all so we are basically making getter and setter method for every value because we don't want to use or we don't want to access these variables directly we just create getters and setters for all of them and whenever we click OK you can see here Java has created us these kettles and setters for all these values ok and what this is basically doing is it has we whenever we want to you know assign some value to the ID we will use set ID method and whenever we want to get the value of ID we will use get method and this is called encapsulation of a variable and this is important because we don't want to give access to our variables to some other user which is unknown to us right and so now what we are going to do is we have generated these getters and setters in between our variables so we can just cut these values and paste it here and these cutters and setters we have generated for all the values right so now when we want to assign some value to the mark instance instead of this mark dot ID we will just use mark dot set ID was set ID and then we can give any ID to to mark and this value assignment is we are not going to use in the same way we will use marks dot set name and this name we will gave to mark and in the same way we'll assign age to mark so mark dot set age okay age is 15 right and in the same way we will do something with Tom's instance also so tom dot said ID tom dot set name so tom dot set name we will assign this name to Tom and Tom dot set age same thing here so basically what we have done we have used instead of direct assignment we are assigning values using these skaters and setters and this protects your data from corrupting if you somebody wants to corrupt or you're not or something like this okay and to get these value you just call mark dot get name and mark dot get age okay and same we will do with our Tom instance and whenever we run the program result will be same but this is more preferred while you are accessing or assigning the values to the member variables so this is how classes works in Java how to use a class constructor and what is a class constructor so first of all we will start our tutorial by making a new class so I will go to my package and I will rightclick and go to new and I will create a class and I will name my class as cube by this cube class I'm going to you know get or I'm going to calculate the volume of a cube using different length breadth and height so I'm going to declare three variables in length and breadth and in height so that I can calculate the volume using all these three variables and then I will declare method which will return int and I will name it as get cube volume and this will take nothing else parameter and what this method will do is I'm going to just return the length of the product of length into breadth multiplied by height okay so this is the volume of the cube right length into breadth into height okay and this was get cube volume right so I have declared this class now I'm going to initialize an instance of the class so I will create a cube and I will name my cube instance as cube 1 is equal to new cube right and this cube with the round bracket is called the constructor of your cube clause and the most basic property of constructor is even if you don't define a constructor Java will create a default constructor for you whenever you create a class so we haven't created this kind destructor method explicitly anywhere here in our class but this is default constructor which is provided by Java from us and we can also define a constructor for us and the constructor name is always same as exactly the same as that last name so for defining a constructor you can just write cube and it for default constructor I'm not going to pass any values right now but it can take values okay or parameters so here you can provide parameters as you can do it with the method but the most important property of constructor is it has the same name as class and it never returns any value so constructor never returns any value so you cannot return like this in constructor okay now what I'm going to do is this constructor let me print something so 6o and I'm going to print we are in constructor okay and in our main class in our main method we have just defined the instance of this cube class and nothing else and when we run the program it prints we are in constructor that means whenever you create an instance of a class the first method which is called or which is initialized is the constructor of the class okay so you can define a constructor and if you want to initialize something you can do it with the constructor because it's the first method which will be executed right so constructors are generally used to initialize values in a class so what I'm going to do is I'm going to initialize some value like length is equal to ten variable web breadth is equal to for example 20 and variable height is equal to 30 for example okay so this is the default constructor we have defined and in here we have defined the value of length breadth and height so that if user even don't initialize this length breadth and height we are going to initialize or Java will initialize this value for us using this default constructor so now what we can do is we have initialized the instance of the constructor and using this constructor we can print or we can call get queue volume method okay so not here but here cube which is the instance of this cube class dot get cube volume and this will return us the product of 10 into 20 in 200 which we have initialized these values as right now you can provide multiple constructors of constructor overloading to the class so you can provide this constructor which we can consider as default constructor and in here we are going to provide 3 parameter int L comma int B comma int H okay and this parameter will pass to our bread and height okay so this is called constructor overloading so we can define two constructor at the same time both with different pair of arguments and this we will call it as default constructor and whenever you want to provide some values by yourself you can use this constructor right so what we are going to do is we are going to define second instance of cube class cube cube which is second instance is equal to new cube right and now we can just call the same method gap cube volume but using cube to instance and here we will define length breadth and height for example 20 comma 20 comma 20 okay so Java is intelligent enough to understand that this constructor is this one and whenever you don't provide any argument whenever you hover over your constructor and just control click it it will go to the default constructor here right so now when we run the program one will give us the product of these values 10 into 20 into 30 with just 6,000 and other will give us the value of our product of these value 20 into 20 into 20 which is 8,000 so we can define multiple constructor with different arguments as we require with our class ok so this is all about constructor I think and once again I am going to review what our constructor constructor are the member method in a class which the same name as your class exactly the same constructor never returns any value constructor can take parameter or they cannot I mean you can it's totally on you if you want to provide any parameter to a constructor or not you can define multiple constructor and use them with the class so I have defined constructor with no parameter so I can define it like this and I have defined a constructor with three parameter length breadth and height so I can define it by like this okay in this video we will learn about method overloading in the last videos I have shown you how to use a method now method overloading is same as declaring method but the main thing is you can define different method with the same name so two method you can define with the same name which can perform two different you know different logic so for example I want to add two values and I want to declare some method for this so I will declare a function called public static and it will return integer value and I will name it as ad okay and what it's going to do is it's going to add two values okay and it will return these two values and then I will pass in a comma int B as the parameters and I will return the sum of these two values right a plus B and I can call it in here right but in realworld programming the situation may occur that you want to add not only to integer values you may want to add to double values or decimal values or you may want to add to strings because Plus you can be used as a concatenation operators also so what you can do in Java is you can define the method to different method with the same name but for example different parameters and different values ok so you can define add something like this or you can define add something like this and this is called method overloading whenever you define different method with the same name which performs some different logic but they have I mean the same name they can perform mostly a same logic but you know data type you want to use them or parameter you want to pass them can be different and whenever you will call these method for example something like this you want to add two values you can just call add to integer 1 comma 36 so it will by default Java knows that whenever you pass two integers here in a method you are calling this method because you are passing two integers in a same way whenever you pass to a double values for example 5 point something and 40 point something than your Java program knows that you are calling this video so Java is intelligent enough to deduce your method by your initialization of the method in the same way you can pass whenever you want to pass two names for example hello and second parameter as world then also it you know it can know that you are calling this function because it takes string values and whenever you run the program it will give you different result then so in the first case this ad is calling this function in the second case this ad function is calling this function and in the third case this ad is calling this function so the method overloading or the basic logic of method overloading is you can define different method with the same name to perform different operations okay but logically they will be doing some same kind of work and in this video we will see what does the static keyword do in a class so in the last videos which I have been showing you you may have seen the usage of this keyword static with some member method or member variables of a class and you may be curious what is the meaning of this this is not you know just we are putting like this it has some meaning so the meaning behind the static keyword is whenever you declare your member as static the static member belongs to the class instance instead of some specific instance of a class so let me give you an example and then we will see it once again so I have a class called hollow and which contains two method one is a static method and other is a non static method static method means I have added static keyword to this and this method is not doing much it's just taking string as an argument and it's returning this string in whatever we pass back and the same method we are using here it has a different name which is do something else and this does not have any static keyword in it okay so whenever we declare the instance of a class for example hello hello is equal to new hello the static member is shared by so whenever you create an instance you can create many instance so for example hello hello one hello to the static member method will be shared by every instance okay and the static member only belongs to the class not to the instance so it will not belong to the instance of a class but it will only belong to the class itself so if you want to do something like this say dot do something which is a static method and we want to pass some message hi YouTube for example it it will work and it will work fine but it will give some warning here and the warning is the static method do something from the type hello should not be exact accessed in static way okay so you cannot access or you can access this but it's a wrong way of accessing this method which is declared as static method so for accessing your static method whatever you define as static you can access this method directly from a class like hello dot do something and this is the right way and once you do this you're warning message will be gone okay but a nonstatic method when you try to access so this hello is my class name dot do something is not something else is not available in this class right so this method is not available on cannot be accessed directly with the class name but whenever you add a static before your method name or variable name it's accessed from the class itself so do something is exist from the class and do something else which is not a static method cannot be accessed by directly by this class you can you see there is no do something else but this nonstatic method is available through the instance of a class ok so basically the nonstatic methods are available or can be accessed using the instance of a class and the static method should be accessed using the class itself not the instance ok so this is the correct way of using a static class or static method and this is the correct way of using nonstatic method you can even declare some variable as take for example public static int age for example and then whenever you want to access by this instance you can just for example hello dot dot age whenever you want to assign some value to the age let's see what happens so it's okay right now but it's once again showing that warning that the static field hello it should be accessed statically right once again we define a different instance of this class hello hello 1 and we assign some different value here for example 20 or 50 right and we will print hello age once again so safes oh and we will print this hello age here and we will print this hello age here also with this instance okay and for now let's comment this these two and when we run the program it gives you the same I mean the answer but it's preferred because it's a instance or not the instance but it's the X member of the class you need to use it like this not by instance but using the class itself okay so whenever you want to declare a variable or method static just access them using a class and whenever you are using nonstatic method or variable access them with the instance of a class now in this video I'm going to give one more example so this meaning of static will be more clear to you so for example I have a class called student and in this class I have two member variables one is the name of the student which is a string and one is the age of the student which is an integer and I have made the getter and setter functions of this class variables okay so if you don't know how to make it make these getter and setter function they can be made automatically so just go to your class and go to source and then source you will be able to see here generate getter and setter and in here just select all and click OK and your Keter and setter method for age and name will be generated automatically by eclipse for you ok so now what I want to do is I will declare a static member variable which will be int and this variable name I will say is the number of students okay and whose value is I will initialize it as 0 ok and I want to keep the record of number of students and I will make it as or I will declare this as static so that it can be shared by all the instances okay still stick so it's a static member okay and now I'm going to define our constructor which is same as the name of your class student and here whenever this constructor is called I want to increase the value of number of student by one so whenever somebody makes or initialize student class I want to increase the value by one so that we can keep the track of number of students right and for this we are going to make a function to get the value of number of student okay so we are going to make a public function public int and I will say get number of students and this basically is going to return the number of student which is this variable right so number of students return okay so whenever we call this function let's define this function also as static function so that we don't need to call it by any instance we can call it by the class itself okay now we go to the main class and in here we are going to define some instances of this student class student for example mark is equal to new student and once again student tom is equal to new student right and now we are going to call our get number of students because whenever this constructor is called we are increasing the number of student by one right so now we will just write seis all control shift and in here we will call the student class itself because it's a static member function this missive so we can directly call it with that class itself we don't need to use any instance right you can use instance but it's not necessary okay and when we run the program you see the answer is two right so it's shared by your instances so this member variable can be shared by your instances and two you know verify this we can call these this member function using instances also okay so for example when we add mark instance and when we call this get number of student by Tom instance then what is the value of the the number of students right so run the program and it says first time when we add first student its value is one that's right because when we added the first student the number of student will be one and when we added second student the number student will be 2 so this member variable which was static was shared by both the instances and also this can be called by the class itself right so this is the very basic and important property of static member that it can be shared by the instances also and you can call it using your class itself in this video we will see what are access modifiers and how we can use access modifiers in Java so you may have seen the use of public whenever I define some class or some method in a class and this public or private or this can be protected these are called access modifier and what access modifier mean is it basically allows you to you know access this method or whatever class in a package depending upon the keyword or access modifier we can access it inside the class or inside our package or inside whatever inside our project so how we can grant the access and what keyword means what we will see now okay so basically we have three kinds of access modifier one is called public other is called protected and third one is called private and if you don't give any access modifier for example I haven't given any access modifier to this string name and integer age this will be visible or we can use these variable inside the package and inside the class so because my class which is this one and student class are in the same package I can use these inside here so let me delete these we don't need them anymore so my class and student class are in the same package here in lesson 1 we have my class and student class right so if you provide no access modifier public private or protected they are visible in the class itself and the package so package inside the package we have this class also so we can define I an instance of the class for example student s tu is equal to new student right new student ok and whenever we want to access this s tu dot and this name is available name and age both are available in this class also right because my class which is this class and this class student class are in the same package ok so basically this is what we are doing here or we mean here ok and name should be some string so something like this right and when we compile the program we will not get any error right so whenever we give public access modifier before any variables for example I give public before my name and the age variable it's very visible everywhere in your class in your package in your sub class sub classes we will see when we see how inheritance work in Java and basically if you define a variable as public its visible as everywhere right but it's a good practice to you know not give or not give access to your variables to you know outside your package or even outside your class okay so the good practice is always declare your member variable as private or protected and the basic logic behind this is you don't want that your variable should be affected by any other user okay so you give in direct access to your variable using getter and setter functions okay so whenever you add this private access modifier before your your variable name it's only accessible through your class itself so outside your class outside the student class you cannot access if this member variable is private right so now whenever I try to run the program I will get an error and the error will be I will go to the error and it says the field student name is not visible it's not visible because we have declared this name as a private member of the class and whenever we declare private member of the class it only is very visible inside the class and not in the package not in the subclass not anywhere else okay so there is other keyword called protected which we will see when we learn about inheritance and other things but protected also restricts the visibility of your variable in the class itself package and subclass okay so right now we are not going to discuss more about protected because this protected we will use whenever we are going to learn inheritance and polymorphism right so right now just remember this table or memorize this table whenever you declare your variable as public it's visible everywhere in your class package subclass or anywhere if you declare your variable as private it's only with them in your class and nowhere else okay and means no here and Y means yes here okay and it's a good practice to make your variable private so that anybody else should not have the direct access to your variable and now so we cannot access this name directly from here so how we can allow the user to you know set the name of the student it's easy by using setter and getter function so go inside your class just click anywhere inside your class and then go to source and click generate getter and setter ok generate getter and setter and Java will automatically generate getter and setter for you whatever you check you know if you want to get a want getter and setter for name if you want getter and setter for age you can check both of these so I select all like this I can deselect all and for now I'm selecting all and click OK and it's created four methods for me one first one is get name which just returns the value of name so indirectly we are accessing the value of name but not directly right and set name allows you to set the name but not directly but using the copy use right and in the same way we have define the getter and setter for the Aged and by the way if you are wondering what is this keyword mean here so whenever you see this name and this name is similar and whenever you define any variable inside a function for this name this name will be preferred so whenever you want to do something like this Java may get confused this name is this name itself or this name which you define in the class this keyword this keywords tells Java that it's a member of the class which is this one so this indicates class itself so this means whatever class we are in okay so student dot name which is this variable not this variable right so basically you need to use or you can use this of a keyword here whenever you have two variable with the same name and you want to differentiate between them this dot whatever is the member of the class which is this one and the variable which doesn't have this is the local variables like so this the name here is the local variable this one and this name which is preceded by this is the member variable this one so this is what this means this means that last itself student dot name indirectly you can say instead of this you can just imagine it like student dot name okay but this keyboard indicates the class itself and now if you want to set the name what you can do is instead of directly setting the name you can just write two dot set name and then you can set name like this okay and whenever you want to get the name you can just do something like this instance of a class dot get name okay so this will allow you the access to this variable name but indirectly okay so just remember this table if you can memorize public grants you access to everywhere private grants you access only in the class itself and it's always the better practice to make your variables private unless and until you have the strong reason to make them you know public and used getter and setter to access these member variables okay and the meaning of this is the class itself so if you add this keyword before any variable it means the member of the class and whenever you don't have this here then it means it's a local variable so you can avoid conflicts between two similar variable names in this video we will see what does final keyword do in Java so for example I have a class called hello and I define a variable public final int number and I have added final to the variable declaration what does this final declaration do in front of any variable declaration or in front of class declaration or even in front of method declaration they have different meaning whenever you add it with the variable or a method or a class so let's see what does this keyboard mean so that final keyword has numerous way to use when we use final keyword with a class this class cannot be subclassed when you use final with a method this method cannot be overridden by a subclass and when you use final with a variable it can only be initialized once okay so first of all we will see this point that if you declare a variable as final it can only be initialized once okay so I have declared a member variable which is public final int number and what here written it can only be initialized once right so for example I declare a constructor with the same name and I'm going to initialize this value in my constructor so number is equal to 10 okay so we I have initialized it only once right now I will create an instance of this class in my main method hello is equal to or hello a chi l is equal to new hello and what I'm going to do is I'm trying I will try to assign the value to this number hello dot number once again right so for example 20 okay and when I run the program or compile the program it gives me error and the error says the final field hello dot number cannot be assigned right so once I assign this variable which is final then I cannot initialize it once again okay so if i comment this this will compile perfectly fine so it has compiled perfectly fine but if I try to reinitialize or reassign a value to a final variable then it's not allowed so generally you whatever of value of whatever variable you want to declare it as a constant you can add final keyboard keyboard before this okay now the first point the final class cannot be subclassed when we will learn about inheritance we will also learn about what is sub classing and what the sub classing means is you can have the properties of one class into another class by the means of inheritance so for example I have the student class which whose property I want to use it or property or member variables or member method inside my hello class I can use it like extends and then student class not this one but student not this but this student right and this is totally fine if you write extend student this means that we are inheriting from student class to hello class and this inheritance we will learn in the further video but I want to show you what this final keyboard mean right and when we compile the program it will give us the error and what is their final cannot be initialized let's comment this and then once again compile the program and it compiles totally fine right because student class is not final right so if you add this final keyword before the Declaration of a class for example I will write public class student instead of public law student I write public final class student final class student so I have made this class as final right so if I made this class as final now see what happens it shows whenever I compile the program it will show error and what is the error here the type hello cannot subclass the final class student okay so whenever you declare a class as final you cannot subtract it from it yeah okay so you cannot extend from that class okay and the point in the middle that the final method cannot be overridden by the subclass this we will learn when we learn how to use inheritance and how to use overriding in class okay so just remember these three key key sentences and you will be good to go and in this video we will see what is class inheritance in Java and how to use class inheritance in Java so classes in Java can be extended and how they can be extended by creating new classes which can retain the character sticks of the base class and base class I mean here is the class from which we are inheriting now understand it fully I have a little diagram to explain now for example I want to make a class which can calculate the area of some shapes so it can be rectangle square circle or triangle or anything right so I can make a class called polygon because they share rectangle and triangle shares a similar property and what is this property they both have width and height right so I can define two variables in my polygon class and I can set these width and height of these value in this polygon class using a method set value and in this rectangle or and triangles laws I can create two methods which can calculate the area of triangle and area of rectangle so the common properties which they both share which is height and width we can not we don't need to define it in separate places in rectangle also and triangle also we can define them at the single place and we can use them using the inheritance property and how you can know that these shapes or whatever classes you are going to make shares inheritance property so if the classes you are making have is a relationship is our means what I mean to say it is is our relationship like this so rectangle is a polygon right and triangle is a prop polygon so this share is a property in between them so this relationship whenever some class inherits from some other class the share is a property or in a relationship so rectangle is a polygon and triangle is a polygon right so let's go towards the code part of it so what we are going to do is we are going to make three classes so we will go to the package one class first class we are going to make and I recall as as Poli gone right and I will I'm going to make two more classes one is rectangle and one is triangle so I will say this is rectangle plus and I'm going to make one more class which is going to be the triangle triangle okay now in my polygon class I have what property in common both rectangle and triangle can have width and height so I will define two variable which will be protected and why they are protected I have shown you and I have shown you what is the meaning of access modifier so protected and then in height and in the same way I will declare one more variable which will also be protected which will be weight okay and I will define a method which will be public and which will return the area so for example we will return area in double right and so this in here let's try to set the values off width and height for rectangle and triangle okay so this will be wide set values and in here we will define int a comma int B and whatever user will pass the value of a we will just say height is equal to e and width is equal to width is equal to B okay so by this method we are going to set the values okay now in my rectangle class how we can inherit from this polygon class we can inherit from polygon class in my rectangle class by using keyword extends okay just use the keyword extend and then use the class from which you are extending okay so rectangle class is inheriting from your polygon class and polygon class is in here it's called derived class and rectangle class here is a class which is deriving right so this can be called base class and this can be called the cloud class which is deriving okay in the same way I will extend in the triangle class also from polygon because polygon is my base class from which I am inheriting and now in my rectangle class I'm just going to calculate the area noun 1 whenever or if you are inheriting from a base loss to the right class then all its protected members and public members are accessible in your derived class okay so these member height and width and set values are accessed can be accessed by this rectangle class because we are extending from it okay if this was these variables and this methods watch private then we can not you know use them in other classes but because they are protected and public protected and public method can be used in subclasses so this is a subclass and this is a big plus so we can just define a method public and this will be the area so double area and what this method is going to do it will just return the area so return height into width and which height and which width we are talking about here because we haven't declared width and height inside this class in this rectangle class right but whenever you hover over and click on this height you will go to the height in polygon class okay so this height in polygon class is accessible in this rectangle class also okay and bit also from polygon class is acceptable in the rectangle class also okay in a similar way the area of the triangle is half so height into width divided by 2 right so we will just divide it by two okay so we have everything we have the area of triangle we have area of rectangle and we are setting these value by this polygon class now what we can do in our main method we can use or we can create the instance of rectangle class so rectangle are easy for rectangle new rectangle and we are going to create the instance of our triangle class also so triangle TR t RI is equal to new triangle and then for calculating the area we first need to set the value so we will set the value of the first rectangle so we will use instance of rectangle class dot set because we are inheriting from the polygons loss in rectangle class this set value method is also accessible in the rectangle class via its instance okay that's why we can access set when you method wire this rectangle instance for example we have done in the same way we can access set value method from our triangle and this for example is also seen then now we just need to call the area so we can just write this from rectangle class we can call its area method top area and in the same way we can call the area and now when we run the program we will get the answer first is the area of rectangle and second is the area of practice we can just modify this Plus right in the same way an area of rectangle and triangle are displayed like radial rectangle is 100 which is 10 into 10 into and any of triangle a is equal to 10 into 10 divided by 2 right so once again whenever we use inheritance all the property of the best loss in our J's polygon class is available in your derived class our case these are rectangle and triangle slots so all the method which are protected or public are accessible inside our rectangle or triangle okay so you can use the method inside polygon class if you derive it in rectangle in class you can use this height and width we have derived it here using this technique because we are extending from so in this way you can extend the property of polygon class to the rectangle class and same is for tracking class and in this video we will discuss what is polymorphism in Java and how we can use polymorphism in Java by an example so what is polymorphism polymorphism is the ability of an object to have different form so polymorphism literally means the word polymorphism means having different forms and whenever you define an object class object I should say and its property or its quality of having many forms is called polymorphism and how we can make our classes polymorphism or how you can define an object which follows polymorphism I'm going to give an example so I have four classes define one is called the danc'd loss which will be my base class okay so there is a bank class which is my base class and this contains three or a one method and this method just gives the rate of interest so I defined this method as get interest rate and because it sort of base class I return I'm returning zero as an interest rate okay I also have defined Bank underscore ABC class Bank underscore de F class and Bank underscore XYZ class okay so if you don't know how to make a class just right click new and go to class in here gave the name of the class so this is how I have created these classes okay so one is called bang class which will be my main class second class is called banked underscore ABC which extends from bang class because Bangkok class is our base loss and Bank ABC is our derived class and this also contains the same method and but this returns the rate of interest or this Bank has the rate of interest is equal to five percent for example okay Bank d EF which also extends from bang class have the rate of interest 6% so I have defined a method here which returns six simply okay and Bank class XYZ which is also extending from Bank so this is a derived class and this is a base class also have the same method get interest rate and the interest rate in this Bank is 10% so I have the same method in all the four classes yet interest rate and the only difference between these dysfunction is the rate of interest banks Bank itself has zero Bank ABC has 5% interest rate manga here has 6% interest rate and Bang XYZ has 10% interest rate now there is a property in Java called polymorphism by which you can define the reference or you can point the reference to a base class to any object of the derived class so what I mean by that is so when reference object or reference of parent class points to the object of the subclass it's called a casting and this is the basic you know extract of polymorphism so our we will define the reference of our bang class so we will just define bank b1 is equal to or Bank ABC is equal to so this is the reference of bank last which will point to the object of bank ABC which is a child class right like this and this is what we call polymorphism when our object can have different form so here the object of bang class is having the form of Bank ABC right so the reference of bang class is pointing to the object of Bank ABC plus in the same way we can define different objects so here we can define Bank d e f and here also Bank d e f and Bank X Y Z and Bank x y e okay so and let's see if it has the same name or not yeah and Bank XYZ it should be underscore right okay so we have defined three references of Bank class itself which points to the subclasses or an object of subclasses reference ABC points to the object of a Bank ABC class reference de F points to the reference or object of de F class and reference XY their coins to the object of XYZ class and I can call all these method get' interest rate from all these references right so I can just write this for control shift and in the same way I will do it three times and first time I will take ABC as my object and I will just call get interest rate and in the second statement I will paste de F dot get interest rate and third time I will paste XY that as my instance and I will call get interest rate okay and when I crunch up rogram I get five six and ten so this type of reference defining reference from the object of subclasses is called polymorphism and all the you know member function are available through this reference so this get instant interest rate are available in here in this class also in this class also in this class also and this Bank ABC gives us five percent interest rates which returns five Bank de F gives us six percent interest rate so it returns ten and Bank XYZ gives us ten percent interest rate so it returns stem but the interesting thing here here is all are the object of Bank yeah all or all references are pointing to different objects but all objects are from Bank class right and in this video we will see what is method overriding and how it's different from method overloading so in the last video I have shown you how and what is polymorphism and how we can use it right so we have defined a superclass which we call it as Bank and it was having one method called get interest rate which returns the interest rate of the bank okay and we have defined a subclass which we call it as Bank ABC which extends from Bank class and let's say for now it doesn't have anything so it doesn't have any implementation and now whenever we create the instance or the object of class ABC using the reference of Bank ABC or using the reference of Bank last we our superclass then what happens let's see so it returns you zero right because here in the superclass it has the method get' interest rate and which returns zero and here there is no implementation of cat interest rate right so whenever we define a reference which points to the object of the subclass within our case this is Bank ABC and when we call this get interest rate function it refers to this function which is in the superclass right now for example we introduced a function which has the same name and the same return type and same number of arguments as in black bass or superclass ok so I have the same implementation in my subclass also the only difference is it's returning 5 and our superclass was returning zero interest okay and now earlier the the interest rate returns was zero and now when we run the program it returns five and this phenomena is called a method overriding and method overriding is nothing but the changing of the implementation of the method okay so earlier the method which we were using for getting the interest was this one get interest rate from the base class but as soon as we introduced a new method in a subclass which is same and it's returning different you know interest rate and we define the object of the subclass as a reference then you see it's returning five right so your base glass or your object will always take the latest or the most recent method which is defined so this is the most recent method and it happened it's happening at the runtime that's why it's returning five so this is called method overriding now there are some rules for method overriding the rule of method overriding is you must have same number of arguments same name and same return data type for overriding a method so for example this kitten get interest method was returning integer and it doesn't take any argument in here also we have to whenever we want to override the method which was there in the superclass we have to define the integer return type and with no argument if you do it something like this and for example this thing this will be called method overloading and this will not be called method overriding so this takes us to what is the difference between method overloading and method overriding right so generally method over loading we use in a same class right so in this if we want to do it we can do it something like this and we can return in ABC something like this okay and this to method are called the method overloading so this method is overloading of a previous method right so this generally happens in the same class and whenever you do the method overloading this return type can be different the arguments can be different but the only same thing here is the method name so in method overloading only method name should be same but you can change the return type or number of argument also but in the method overriding you cannot change the return type or the number of argument okay so this is the main difference between method overloading and method overriding I hope you have understood the basic concept of map method overriding and what is the difference between method overloading and method overriding and in this video we will see what is an abstract class and why and where we will use abstract classes in Java so what is an abstract class an abstract class is a class which cannot be instantiated so for example if you make some class as an abstract class you cannot make an object of this class and what is the reason behind this is for example I have been showing you this Bank class in the last two videos for showing the polymorphism example so I have the superclass called base a Bank which is my super class which contains a method and I have a subclass which extends from my super class which is inheriting the super class and it also contains a method okay which is get interest rate now a bank is abstract in a bay that Bank is a general term or we can say Bank itself is very abstract word because we cannot you know deduce which Bank we are talking about from this class bank but we have Bank ABC which have some name and this can you know give you some interest rates or whatever other facilities which can be related to the bank right so in a way this bank class is serving as an abstract for other classes so it's just facilitating to the other classes it's method on member variables okay so for example we don't want this class to be instantiate that we just want that this class should be used by the other classes to have its functionality for example we can add some more function to the abstract bank and we can add those method or when e be can use those method using the inheritance property in our subclasses okay so Bank is a very abstract class and these kind of class sometimes we don't want the other user to make and you know make the instance of this class because whenever you make the instance of the class the interest rate here for example we are returning zero which means no interest right so whenever we make an instance of this class like this and when we run the program it gives us zero which doesn't really mean anything right so if we define this class and abstract so how to define a class and as an abstract class you just need to write abstract keyword before your class so this keyword when you add to a class it makes your class abstract and abs as soon as you add this keyword to your superclass which is a bank you see here this object creation is not possible anymore because this is the basic property of EFT abstract class that you cannot create any object from the abstract class but you can create a reference from its subclasses okay so you can create a reference which points to the sub classes because Bank ABC is not an abstract class so you can use this Bank ABC like this okay and this error will be gone okay so you can make an reference which points to the class which is not abstract but indirectly this Bank class is an abstract class which cannot be instantiated or we cannot make an object so indirectly we are restricting the access to this class from other users now we don't even have or we not only have a fractal assets but we also have xx abstract methods and abstract method whenever you define a method as abstract this method should be implemented by the subclasses which is inheriting the class okay so there are two conditions to make a method abstract one is the method wherever it's present so this method is present in my bank los this class should be abstract to make this method abstract so we can make this method abstract and whenever you make an a method abstract you don't need its instantiation or definition so but the most basic condition is the class in which this abstract method is present this should be also abstract so should be abstract then only you can make a method abstract and whenever you make an method abstract you need to give the implementation of this method in your sub classes because Bank class is our superclass and Bank ABC is inheriting from our superclass we need to give the implementation of all the abstract method which are present in our abstract class so we need to give the definition of this method in here so whatever classes which are inheriting from this you need to give the definition here here and here for example I just comment this in the this method Bank ABC method which is extending from the bang class then this class will give the error that the type Bank ABC must implement the inherited abstract method right so you cannot compile a program if you don't implement the effect method in the subclass okay so if you make any method abstract you need to implement it in your subclasses if you are inheriting from this loss so this is how abstract classes and abstract method works the other thing is you may encounter a keyword called concrete and the concrete class is literally or almost opposite to the abstract class so if the abstract class cannot be instantiated the concrete class can be instantiated and so this class which is inheriting the effect last week haven't added abstract keyword here but we don't even need to give concrete keyword in order to make it concrete you just need to you know you don't need to give anything you just need to give public or a private or whatever class you want to declare and this makes your class app concrete so if you don't add abstract keyword before class its concrete because it's it can be instantiated and if you add a keyword effect before a class it makes the class abstract which cannot be instantiated so I hope you have understood the basic concept of abstract and concrete classes and in this video you will see what are interfaces and how we can use interfaces in Java so an interface is same as an abstract class as abstract class cannot be instantiated and instead interface also cannot be incident an instantiated so for making an interface for example we have been seeing this example from our last videos and we have a bang class which is our superclass and when we define this class as an abstract class this bang class cannot be instantiated we have seen in the last video now in place of doing so many things like declaring abstract public class we can just use a keyword called public interface and then it makes your interface something like this and all the method inside an interface are abstract by nature okay so you don't need to add a keyword abstract in any member method of the interface like this all the method or all the members of the interface are abstract by nature so in the last video we have seen if the methods are abstract then we need to implement this in the subclass in which we are inheriting right now let's start from the beginning so I'm going to delete all the classes which I made earlier and then I'm going to make an interface okay so in Eclipse you can make interface by just going to the package in which your main loss is or main method is and just rightclick it and you can just go to new and click interface here and you can give the name to your interface for example we will give the name to our interface as Bank as we have given in the last video to our abstract superclass okay so this is the basic definition of interface and whatever method you define inside the interface like get interest rate it's automatically abstract by nature okay so whenever you want to inherit from the interface so interface only can be implemented not can be extended so when we define a class for example we will define a new class for Bank interface and this class we will name it as Bank ABC for example and we want to inherit from the interface this interface because this is an interface there is no class keyword in here in the bank interface right so you cannot extend from a interface in a class you need to implement the interface so you need to use the keyword implement implements something like this okay and then you can implement your bank interface and you will be good to go now because we have this get interface or get interest rate method inside our interface we need to define or give the definition of this get interest rate in our subclass also because all the methods inside our interface are abstract by nature right so you need to give definition something like this and wait on some interest rate and then your definition will be okay now it says you cannot reduce the visibility let's say by because this should be public by nature so we just need to add public keyword and then it's okay so whenever you want to inherit from the interface use the keyword implement rather than extends okay and whenever you want to inherit from the interface to an interface you can use the keyword extent so just bear in mind whenever you to class you have two classes class and class and both are you know you want to inherit one class from another then you use extends okay if you have interface as a base class and you have class as sub class you need to use implement implement and if you have two interfaces interfaces and interfaces interface and interface then you can use extend okay so simple rule is if the both subclass and superclass our classes or interface themselves both are same you use extend and if the super classes interface and subclass is your class then you use implement keyword here okay so this is how you can use interface or and interfaces are abstract by nature so they also cannot be instantiated so if you want to instantiate Bank Bank something like this is equal to new Bank it's not possible because it's just an interface and in interfaces are abstract by nature okay so this is how we can use interface in Java I hope you have enjoyed this video please rate comment and subscribe and bye for now