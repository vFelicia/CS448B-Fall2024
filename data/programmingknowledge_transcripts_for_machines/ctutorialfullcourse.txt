hey guys welcome to programming knowledge in this video we will be looking at some basic concepts of computer programming and we will also be installing tools to help us code in C plus plus this video is going to be the first video in the tutorial series on CPS Plus for beginners let's get started the first thing we need to address before learning how to program is what is programming so programming is basically a way to instruct the computer to perform specific tasks and by specific tasks I mean those tasks which you typical human will find it difficult to perform within a limited time frame so these tasks are generally a huge scientific computation for monitoring minor changes in the data but we can make the computer perform any tasks of our choice by programming it to do so so we need a way to communicate with the computer right we need to communicate with the computer to make it perform the task so we do that by using special languages known as programming languages so you might have heard of famous programming languages like C C plus plus Java python so there are tons of languages out there and in this tutorial series we will be exploring CPS Plus the next question comes is why learn programming so the first obvious reason is that computers are extremely fast if you know how to utilize the power of computer programming you can do wonders with it for a typical computer of today's time an addition of two numbers which could be as big as a billion is just going to take a nanosecond so just imagine how fast a computer is it can perform billions of additions in one second that that's the power of computers and it is extremely fast in performing the task next thing is that computers are cheap so nowadays any electronic Gadget which is released in our Market comes with embedded CPU so everything is basically a computer in itself you are you have microcontrollers also so you can basically turn anything I mean any electronic Gadget into a Computing device and you can make it perform the task next thing is that computers can work 24 7. so if you are a beginner of task you can without any worries delegate it to a computer and then computer is going to finish the task for you and keep it ready so next question which comes is why out of all the languages should we learn C plus plus so C plus plus is very close to the hardware by learning C plus plus we can actually relate the concept to the hardware programming so uh it's really a plus point for beginners who are willing to take out application development directly from scratch next thing is that C plus plus gives a clear understanding of object oriented programming for beginners we will discuss about object oriented programming at a later stage but for no we can understand object oriented programming is um essential competitive programming concept with C plus plus will make it easier to understand next thing is that C plus plus has a huge fan base if you have a Hindi query there are tons of people out there who help you with it next thing it is used in application and system programming as I told so if you are a software engineer you can choose your career between application and System Program next thing is that it teaches you the difference between compiler Linker loader and other programming Concepts this is the main reason C plus plus is recommended for a beginner I do agree that python is much easier to learn and it can perform way more tasks than C plus plus but in C plus plus we will be dealing with everything from scratch even though there are libraries there is a way to actually Implement each and every concept from scratch by using that methodology we can actually learn everything to the core if you are a person who is interested in the core concept and the origin of every algorithm or any other concept C plus plus is the best language for you next thing is that it is widely used in application CPS plus can be found in any many applications like games animations web browsers you have databases and compilers operating systems run on C plus plus C plus plus has a white scope next thing is that it is extremely fast so if you have an idea of competitive programming it is basically a competition where our programming skills are tested within a limited time frame and uh there are there is a constraint so at that point many programmers use C plus plus so 99 percent use C plus plus has their language in computer programming because C plus plus is extremely fast in passing the data and working with the data so if you're a person who needs immediate results you press this language for you these are some of the reasons for the learning CPS Plus so now we'll start by installing the tools which will require to code in C plus plus so first thing we require is a software which can make the computer understand our CPS Plus Code that software is called a compiler so there is a difference between interpreter and compiler we will be talking about that in a later video but for now we can understand compiler as a software which can convert C plus plus code into binary code so that the computer can understand so some of the available C plus compilers are Apple export export is an IDE comes with an integrated C plus plus compiler you have Del C plus plus C language plus if you're on Linux you have the gno C plus plus preinstalled wizard in any distribution of Linux you can type GPS plus minus minus version and you'll see the version of the compiler which came with your distribution and if Windows you can directly go to control panel you can go to the programs programs and features and here if you scroll down you will see something called Microsoft Visual CPS plus so this is actually a c plus compiler provided by the Microsoft itself if you if you are a gamer and if you have installed any heavy game before you might have noticed that the game asks you to install the latest version of visual C plus plus or update the Microsoft Visual CPS plus component in your computer that is because as I told you C plus plus is used for building games and then those games require the latest version of the C plus plus compiler to be installed in a computer so Microsoft Visual C plus plus as both a platform and a compiler and if to use it we need Microsoft products you cannot directly use this visual C plus plus compiler uh these are open source compilers okay some of these the Min GW SQL and gnu are all open source compiler next thing we need is an IDE from what an IDE is basically ID is an integrated development environment so if we go by the definition of Wikipedia it says an integrated in development environment is a software application that provides comprehensive facilities to computer programmers so basically what it means is that IDE is a tool which is going to help you write your program you can actually write your programs in notepad also for actually for writing C plus plus codes you just need a compiler and you can even use your notepad to write C plus plus code so what you need to do is just type your code in and then you save it with a DOT CPP extension so C plus files Global extension dot CPP and then the when you run it through the compiler the binary file will be generated and the computer is going to execute it but why we need an ID is ID is know what our code is IDs know our language so while coding what we need to do is we need to concentrate more on the logic than the syntax and semantics of the language we need to concentrate on the logic and the grammar so IDs are great tool because they have a feature of correcting the grammatical mistakes you make the syntactical errors which we call technically those errors are identified by the IDE and ID is actually sometimes the corrected some ID is corrected basically and some ideas ask you to correct it before compilation itself so that's a great feature in idea and it also contains many other features like it provides you a debugging environment we will look at debugging when we are testing our application the best I leave for Microsoft is visual studio so you might have heard about this Visual Studio is the best ID you can find on for Windows development you also get it with game development and many Visual Studio is a best idea for Microsoft it's also available for Mac but xcode is better for Mac so visual studio you can actually download it because you can download the community version display but this uh this ID is actually a heavy software it is going to take about 10 GB of space so if if you are running low on computer specs you need to consider other IDs there are a couple of other IDs as well their famous IDs like Eclipse neck bins Etc but for a beginner I would recommend code blocks as your ID so code blocks is a lightweight ID you can go you can search code blocks on your favorite browser open the first link which is codeblocks.org so this is the website here for code block this is a open source ID and it is really a lightweight idea you can make intermediate projects in code blocks you can use it for heavy projects but for learning the language and working on intermediate level projects code blocks works the best for you and it is not even bigger it just takes about 500 MB of space in our tutorial series we'll be using the code blocks ID you can download the source code or download the binary source code is for the people who are in Linux environment if you are familiar with Linux you will be finding yourself compiling everything from scratch for that the source code is also provided but uh if you just need a straightforward installation you can go to the download the binary list here you will find different files for different platforms so in Windows I'm here and then you'll find it for Linux and the Mac as well you can download your version and here we need to understand something so core blocks is just an ID okay the IDE software is only going to be installed we need a compiler as it will compiler is first required generally we can compile our code and we can ID we can only write the code you can download any of these compilers out here you have segment or Dev C plus plus or main GW but the thing is it is going to be a bit complicated once you download the compiler you need to actually integrate it with the I integrated development environment that is IDE then only our code will be compiled and run by the ID for that you can actually go go to a favorite browser and then type for sigvin or you can even install main GW the problem here is that once you download the compiler you need to add it to the path this is a complicated process and for a beginner I'm I would not recommend adding adding compilers to the path and then integrating it with IDE so what I recommend is just directly download this file which says code block 17.1 to Min GW setup.dxe what this is is code blocks provides a inbuilt ngw compiler along with the environment this setup will contain the imagew compiler and then by installing itself you install the compiler also in the environment so the compiler is not said to work in the path I mean the compiler won't work in a whole computer but it will only work in the environment in which code blocks is installed so once you download this setup file you will be having a compiler but that compiler will work only in the code blocks environment so so that is actually recommended for a beginner but if you like to explore more we'll have a separate video on how to download addition external compilers and Link it with our ID so visual studio doesn't need a linking because it directly uses the Microsoft Visual C plus compiler other compilers we need to integrate it with the ID so for now we are directly going to download this one you can choose any of these mirrors I'm going to go with fossil so once you are in fossil you need to wait for few seconds to download get started and you need to start the download so I'm going to pause the video till it gets downloaded okay guys so my download is completed so I'm going to close it I'm going to open the downloads folder and in the programs I'm going to find the code block setup file so this is a very straightforward installation in Windows you just have to click next and then you need to agree the terms and conditions I'll leave it as it is we need all these plugins and uh you can actually change the destination folder I'm going to leave it uh as default I'm just going to click on install so this extraction process is going to take about a minute and once it's ready we can launch our code box ID so it is basically extracting the files and the compiler so the compiler comes with the idea itself so you can just click on yes and then it's going to open and we can close this wizard we can just click finish and finish over here and here uh it says that a compilation detoxes the dnu GCC compiler that is the mean GW compiler you need to just click on this and then click ok now that is inside the code block so it just comes with it so you can once you hover over the most you can see the path of the minty W compile it's inside the code blocks environment So eventually okay so uh you can just click OK and this is the interface of code block for now we are just going to go create a simple application just click on create a new project go to the console application so all these are different kinds of applications we can develop with C plus plus but uh for now we are going to just go with console application so you can just click on go and then we can skip this page we need to select the language so just select C plus plus click next and then we need to give a project title so I'm just going to say cpp1 and then uh the folder to create project 10 I'm going to browse it I'm just going to put it in my desktop you can choose any location of your choice and then just click ok so here uh the file name will be created so the dot CBP extension stands for code blocks per project file that file is directly accessed by the code blocks IDE and inside that you will find a sources folder in which your CPP file will be there CPAP is the C plus file and you see BP is a code block style you can just click on next and then you can leave everything as it is it is just a compiler configuration and then you are ready to code so here in the left hand side you can see in the workspace uh you have CPP and then inside that you have subfolder known as sources you can just click on us and he inside that you will find a main.cpp file so if you double click it you will have the basic program over here so this program just prints hello world to the console okay if you want to run it you can just press F9 or this button over here which says build and run if you just click on this it is going to build the application it is going to run it and here on the console we see hello good so congratulations guys we just compiled our first C plus plus program so as I told you these are some of the lines provided by the compile weather IDE so it just returns it with the return code and then there's the execution time it just took 0.022 seconds to execute this code and uh these are some of the features of the ID so what we wrote is just District you can uh you can actually Tinker on with that you can actually change this line you can make it as a welcome welcome to programming knowledge welcome to programming language in this video we'll discuss about computers do and what are the differences between them for a recap this is the program provided by the code blocks IDE I just change the default hello world statement to this statement and then once you press this button or the F9 button you are going to execute this call and the console is going to pop which is going to print welcome the programming knowledge on both the world statement you typed inside the double code and then it is going to return the execution time and all these things let us see what is actually happening in the background foreign language Assembly Language machine language is a fundamental language of the computers process computer is not able to understand any other language than the machine language all programs are converted into machine language before they can be executed and machine language is just a series that represents low and high voltage language but the difference is that assembly languages use symbolic population represent the machine operation code both the Assembly Language in the machine language are all more similar to C but the only difference is that Assembly Language are built available kind of machine language on High level languages let's look at an example so this is a single program to do a mathematical computation definition to understand is that the computation which is going to be performed as B into H by 2 that is the contents of B is going to be multiplied with the content of H and then the result is going to be divided by 2 and that is the value we are going to get of what happens in the background is that polished a memory location with the size of memory required for this particular object is loaded into the memory and then the guidance of B are transferred into the location Army same thing happens with R2 then multiply the contents of R1 and R2 are multiplied and then the result is stored back in R1 next step and here divides the patterns of R1 by the number two and then the result is given back in our query location which is requesting the computation all this temporary memory locations which have been created and then unloaded from the memory so this is what happens background of this simple computation so in case of our hello world program here all the welcome to programming knowledge this one what happens is that first link is established between the console and our program and then there's a process which will generate machine code from this particular code and then that is going to be executed and what we see as a result is this statement on our function so there's a lot of problems going behind let's see what a compiler is so as I told you compiler is a piece of software that translates the high level language to the Machine level the compiler basically takes the source code and then it converts it into the executable code this type is known as a reprocessing step and then the executable code which is the zeros and one or sometimes assembly code are converted into the machine code which is purely 0 seconds and then this code is executed by the machine so compilation step consists of two steps reprocessing and the processing so a compiler takes a lot of free processing time it is going to go through the whole of your program it is going to be reach at every statement it is on the errors and then it is going to ask you to correct the errors it is again going to register your program and then it is going to finally generate the executable reports in your program at a later stage so once it's loaded into the compiler it is going to generate the lower level code that is the object code so what an interpreter is interpreter is same as a component there is not much difference the only thing is that in interpreter the preprocessing step is faster than the case of compiling in interpreter The Interpreter is going to go through each and every line of the core it is going to execute that particular plan in a virtual environment and then once you television error it is going to stop right there around the interpretation process continues from that particular point to the end that's why The Interpreter is faster at 3 processing and then it doesn't generate an object file object files are generated in the runtime itself that is why the processing type is Big because while executing the same program multiple times every time at every education an object will need to be generated on the runtime unlike the case of compiler and only one object file is generated at the first time compilation and the same object is used to run the program that's why if we see this if we change anything here if I make welcome programming knowledge as the default hello world hello world and if I just run this program I am just going to get welcome to programming knowledge why did this happen because the object file is the same in this case in case of an interpreter that is going to change if you directly change this code here and then run the program you are going to get where hello world inclusion welcome to programming knowledge always it is going to work on the previously generated object file so once we create this build and run the vehicle is built and run button we are going to get a logo here and now again if you click on this button we just press run you will get hello because the object file has been replaced now and then because if we make any changes now if we just type hello here and then again type again click on run it is just going to say hello that's how a optin file works and it is not Hardware dependent so if you are checking the efficiency of a program we need to check the runtime of the program not the compilation because if in a computer with higher specifications mobile time will be much faster than a computer with lower specification but the Run type of both the program is going to be same foreign first takes the code line by line and then it is going to execute it in a virtual environment immediately then but look at the result and only that particular line is correct it is going to go for the compilation next in object code is generated and compiler layers in interpreter is not generated it is generated during the runtime itself the thing which is the most important thing is that the runtime of combined languages are much faster than interpreted diabetes this is because compile over makes only one obj file only one object code which is used to compile it again and again is generated in the runtime and that is going to be executed we are comparing the performance of C plus plus and python python is an interpreted language C plus plus will perform much faster than python because of the obj file in which it is going to save on the disk python is not going to save the obj file and it is going to generate the obj file every time it is executed so that is the difference between interpreter and compiler in this video we'll be looking at this template code which code blocks had provided us while creating a project and also we will be learning how to perform simple output in C plus plus let's get started so the first line here says hash include IO stream Ash include is known as a preprocessor directive so hash include is used to load files which are already present in the compiler Q plus plus compiler comes with many files which are which have predefined functions to help us code with so higher stream is one of them and by using this preprocessor directive by using hash include we are actually invoking this file from the compiler so without this file you cannot perform any input or output in CPS plus there are many other header files we will be coming across in the run but for now let us explore IO stream IO stream contains all the functions which we need to perform console input or output so IO stream basically stands for input and output Stream So by name itself we can say every every function we need for performing input or output is present in IO stream next with this line it says using namespace STD so STD is known as a scope hope we can understand like a region so every function inside this IO stream Works only in a certain region so for now we are not going to deal with any other course rather than the standard scope but just for information there other scope also that we will be learning when we are already good in C plus plus that comes at an advanced stage but for now we can see uh only use the standard scope standard scope is nothing but the console so if if I just remove this line you will be seeing that this all these functions go out of the scope so now if I build and run this by hitting F9 so now you can see that it shows an error what does the error say it says that 3 out was not declared in the scope this just means that this line or this particular function cannot be executed because it is out of the scope scope is nothing but the standard scope the way we Define standard scope is by using the scope resolution operation cooperation is nothing but this just write the scope and then the function and in between the scope and the function you just specify the scope by putting two columns so this is how you specify the scope so if I now execute it uh yeah I'm getting another error because this ended this angle is also uh from the io stream so it does not have that uh scope so I need to provide the scope for this also now if I build and run this I will be getting the output so here you can see welcome to programming knowledge so that is the importance of scope then why do we need using namespace also well you cannot do this for every statement right it is going to be lot of it is going to take a lot of time to actually do this and sometimes we may also forget to do this so suppose I am writing 10 coed statements this is a sealed statement here there's nothing but the output statement this one what I'm printing onto the console is known as coord statement so this statement if I writing 10 times I need to specify the scope 10 times so every time I use this function or not on only this function you if I use any function from this IO stream Library I need to actually specify this particular standard scope that is why to avoid that C plus plus provides a way to globalize that by using the namespace statement so by writing using namespace STD you are actually globalizing the statement and it is going to take care of any other standard so you if you don't write the standard it is automatically taken care of by the compiler because it just encountered this line this line just means that wherever standard scope needs to be used you just use it that is what this line means so the next line says Ink Main is actually a function every program has a main function main is like a triggering function so every program has this without main there is no program because all the execution starts only from the main function so suppose you write a 100 file program or even say thousand file program they may contain n number of functions but there is only one main function and that main function cannot be replaced and without this main function this program is not going to run so if I simply just type a capital M over here well C plus plus is case sensitive so capital M mean and a small M main are different so now if I try to build and run this I will be getting an error it says undefined reference to this win main at the rate 16 this is actually something which is inside the compare it is a compiler issue that is because it did not encounter the main function so only if you write the main function you are going to execute it so so bursting any scene plus plus program looks for is this for this function it needs to be Main and with a small M and it should be empty you can actually put void over here so all that also doesn't matter but just it just makes it look complex so it's best to leave it empty so if you put like this and then it has to be int the reason we'll be looking at it later and the meaning of this end and this return 0 will be understanding only when we are dealing with functions so for now we can ignore them so just remember that you need to write in any other main doesn't work so suppose if I put while or some in let's say float main all these are not going to work only in plane is going to work and for now you can actually remove this return 0. so without this also the program is going to run and it's going to give you uh there is a lot of significance for the return statement and we will be discussing about that when we are discussing functions so this as I told you is the coat statement just stands for the console output so CH stands for console output and whatever you write here goes to the screen and this operator is known as the stream operator stream operators are very important you will be looking at it while we are dealing with other streams also like file stream or something like that but for now while we are using the io stream that is the console stream we need to have these two functions in a pair so the this is a this is the stream function that is the co then this is the stream operator and this is the stream operand uh this is a statement but technically in computer programming this is called a string string is nothing but a collection of character it is called a string so that is a data type we'll be talking about that in the next video so for now this is what the program was and yeah I forgot to tell you this one uh this is actually appending another function in the same here so see how it actually operates on only one operand so if you want to operate on multiple operands you need to separate that with this stream operator so you see this is a string and this is a function angle is actually a function so uh the way it works is it is going to first do the it is going to first operate on this and then it is going to encounter this and then it is like adding another third statement that's it so if I just put a semicolon here and then put a c out over here it is going to work the same way just that it is not to get you confused these are two separate Church statements if you are wanting to put multiple statements in a single statement then that is how this is how you do it you just put a operator in between and then put the next operand over here and this semicolon is very important no matter which is a semicolon over here also semicolon is known as a Terminator so in C plus plus you can write multiple commands in the same line so Terminator what it does is it is going to separate each and every command so that the compiler knows what comment execute after executing the previous command so that is why we use a Terminator it is very important so if we remove this it is going to result to an error because it doesn't terminate and it says expected the semicolon before this particular end of a statement before this one that is why we put a semicolon and this curly pressure just signify the body of the main so whatever code you write you are going to write between these two braces for some time until we are we get familiar with functions so once we are familiar with functions we will be writing multiple functions and we will be invoking the functions within this main method we will be looking at that later but for now let us talk about the output so we all know how to put output right this is how we put output we just put them inside the two double quotes well this is a string uh we can also put numbers also so for numbers you can either put it as a stream so you can put something like this right and then execute it you will be getting Phi over there or integers are separate in programming so even if you put a file like this you are directly going to see file in the console so here you can see and now comes the major difference if I put 5 plus 5 over here and then executed I will be getting 10 over here that is the value of 5 plus 5 but if I just enclose it within a code uh within a double code what will I get I'll just get the same thing I'll just get 5 plus 5 because this is treated as a constitution what this double quote means is that whatever you put inside this double quotes is just going to be replicated as it is on the screen and if you don't put a double quote it has to be either memory location or some operand so memory location or variable will be looking at the next video while we are discussing input but for now and output we need we need to bother about memory location let's just talk about the integer part of it so if I just put uh let's say let's try another one let's put something like this 5 plus 5. let us try this one these are two different strings and now you know used a plus operator between these things so what we expect is actually 10 but let us now execute this and look at that it says invalid operands of types const care and constant what this means is you cannot add two constant characters or constant string or const care in this square bracket is square bracket is actually called an IA okay so we will be looking all of these things when we are discussing data types but for now we can uh you can understand that you cannot add two strings you can only add two numbers so if I just put 5 plus 5 I'm going to get the answer so here so this is same with real numbers also you can even put 0.5 plus uh 1.5 so that makes it two so here you will be getting 2.2 over here so and you can even work with decimals also even if I put 1.45 you're going to get the answer so you will be getting 1.95 so that is the major difference between strings and numbers so if you are working with numbers you can directly add them you can multiply you can double multiply here is the star symbol which you will be finding on the 8 on number eight on your keyboard so that is a multiply symbol and then divide as the normal forward slide symbol so this is the divide and multiply and there is another one also there is another operator that is called the modular operator what this does is it gives sorry it gives the remainder of the two numbers right so what what it means is if you just put 5 modulo 2 what this does is it gives a reminder so if you divide 5 with 2 what is the remainder you are going to get you are going to get one because uh well it is uh 2 into 2 plus 1 which makes it 5 right so this is the operation so that is why so 2 goes two times in 5 and then one is the remainder that is why you are getting one so you can verify that you can do that by simply putting 2 in uh well you can directly put 5 mod 2 right you're going to get one over here so if I just run this here you can see one there are many other operators will be looking at them later when these are the uh this is how you can perform output in CPS plus well there are other things also like instead of using this we have something called Escape sequences let me talk about them quickly it is escape sequences what these are is basically there are some keyboard tools which we cannot perform during runtime right so suppose we wanted to perform a backspace during the runtime it is not possible I am talking about the runtime so suppose I wanted to hello world over here suppose and then I wanted to perform a backspace for this extra space I have provided over here I cannot do that in the runtime right now I can do anything I can even put this I can change this character I can do anything but what about during the run time for that there are some special keystrokes that are actually treated as Escape sequences so the way we Define a script sequences are you actually put a backslash and then a special character so here there will be a special character and then this is going to actually give you a special meaning so this is going to execute that particular keystroke so there's there are some of the Escape sequences like slash a it's going to bring you a bill so you might have noticed that there will be a notification Bell that will come and then there is a slash B which is for backspace and then slash T and slash n we'll be using these things more often blast is for a horizontal tab and then slashing is for a new line wait we did see this one somewhere right this one so ndel is actually a function this is actually a significant difference between using slash and an Intel so I'm just going to delete these things let us first try slash in so first slash a I'm going to run this so you might have heard that uh song right that Bell song that is the function of Slash a so let us look at slash T that is just it's going to put it down so let me put a tab between hello and world so if I put slash D over here and then execute it here you will be seeing hello and then this space and then a word so this is what the function of Slash D and then slash n is what going to do the same thing what this function does it is just going to put the contents in the next line so if I just execute it there will be a new line so hello and then a new line and then the word so that is the function of Slash n in this video we'll be looking more about the Escape sequences which we have talked about in the previous video and we will be learning how to perform input in C plus plus so before getting started with the input let's talk more about the Escape sequences so the Escape sequences which I talked about in the previous video are slash a slash B 12 slash T and then once again slash d slash n okay there are actually many other Escape sequences also you do have a slash V but all these things we won't be using much flash is for a vertical tab we won't use that much but you can always go up into the internet and then check for the list of Escape sequences there so what do we need Escape sequences for is it just to perform these actions or do they have other purpose also so let us say I wanted to print something like this so let us say I wanted to print uh Escape sequences uh let me just put it without a brace so that this this is what this is the exact sentence I will be needing on the screen right so just try to print this Escape sequences start with a slash and uh have a character and have a uh let's say single code single or have a single character in them something like this I wanted to print this particular statement as it is onto the console you might think it's very easy right just cut it uh well I'm just going to cut it and then put it in pair of double quotes and then paste it over there and then let's just run it it says it's an error why it is expecting a semicolon before single well keto I have a semicolon right what's the problem with this well the problem is when you are putting a backslash in the in a string it is going to consider a backslash and the subsequent character as a escape sequence itself and here once you put a double quote over here it it means that this is a separate string and then this is a separate string and this is actually something in between right so it doesn't have any meaning at all so what we actually wanted was we wanted this double code to appear onto the screen right but we cannot do that we have a way yes we do that is by using Escape sequences so here I am wanted a backslash to appear right so how do we make a backslash up your backslatch itself is a Escape character when the worker wonders you put another backslash so this what it means is it means that this is a escape sequence and it this particular escape sequence just means that you need to put backslash on screen so that that is why your you you were getting an error back then and now you will be getting a backslash perfectly as you wanted it and here instead of this course you actually put a backslash before the code right so what they says is if you put a Escape Port over here if you put a code as a skip sequence it means that this code is not a part of this code which is actually uh indicating the start or end of a string but it's Escape character itself and it needs to be printed onto the screen that is what means if you use a code with it escape sequence so the same thing goes over here also if I just put the backslash it is going to go away this is now entirely highlighted in blue that just means that this and this entire thing is now a string and now if I execute it I'll be getting the output so here you can see Escape sequences start with the backslash and have a single character in them and single is enclosed within double quotes now exactly what we wanted so that is the importance of Escape sequences so there are many other so there are many places where you will be needing them so something like you wanted to enclose something using double quotes or you wanted to put a backslash over in some some place or suppose you wanted backslash n to appear but you can't directly print like this right you know what this is backslash n is actually a new line so if you put something like this and if you try to execute it you will be getting something like this thing sequences start with a and then a new line and then a space and then have a single character in them so that becomes a problem how do we do that same thing you just put double backslashes and then so now this actually this backslash and this backslash n are now different this backslash only corresponds to this backslash and then this n is now is greater as a separate character so now if I run this you will be getting your output so escape sequence will start with the backslash and you just got what you wanted and have a single character in them so this is how you use Escape sequences in your strength now let's talk about the input before not talking about input let us talk about something called data types the people that is done here data types why do we need to know about this well you can't just take input right you need to store the input at some place so that you can use it at a later stage so where we store the data is actually defined by the memory location and how will allocate memory that depends on the type of data we are going to get so we need to know what kind of data we need to we are going to get as an input so that we can store that data so what kind of data can we get we can either get numbers or characters right we can't get anything else well we do have other types of data also something like you have graphs or you have images videos but all that are ultimately broken down into it into numbers only that's a different story we are not going to talk about that at this stage but for now we can say that data is fundamentally consists of only numbers and characters we can't get anything else other than that so the way we data types are broken down is to satisfy either numbers or characters so in numbers what do we have we have integers or we do have real numbers so real numbers are nothing but decimals fraction all these things so the way we take integer cells by end so in this data type which is for integers so this is the data type and this is what it means so integers it's going to take so anything any integer is going to say minus 12 or 20 or 20 000 all these are integers only so can it take anything can you take even Infinity well no integer do have a range value and that ranges so let me write it separately here that ranges from minus 2 power 31 2 2 power 31 minus 1. well it's not 2 into 31 it's 2 power 31 minus 1. so this is the range of the integers it is going to take up to this big numbers so you do have something called short and unsigned signed ends all these things we will be talking about that at a later stage for now this is the range of integers so you can store as small as minus 2 power 31 and as big as 2.31 2 power 31 is nothing but it's around 4 billion so that is the number you can store in so what if we need a bigger number than 4 billion let's say 6 billion or 8 billion for that we do have a solution we are going to use long so long as another data type so long is actually a type modifier it is not a data type long you can use it within so this makes it this actually makes it pretty readable so it's just nothing but a big integer so what it does is it's going to store bigger numbers than int so this will take about eight bites just this is going to take only four bytes so this is whole bytes of memory we'll be looking at how this 4 bytes right now there's such a way to check how how much memory this takes so this is going to take eight bytes of memory and its range is uh approximately up to 64 2.64 approximately it goes up to this so this is a huge number right you won't practically need much bigger than this 2 or 64 is very big you've got 32 itself is Big right 2.31 2.32 they almost go up to 4 billion so you don't need bigger numbers than that but uh in case you need you have long integers same goes to the real numbers also if you are working with smaller decimals or realtime decimals which are not so big you have float which is for decimal numbers so you got minus two or sorry 0.2 or you got something like 0.0003 or all these things so 12.0 also if you just put a point zero it becomes a load and these are all floats and then if you want bigger floats you do have double double is for bigger float bigger floats this again is for 8 bytes and this is the range of double so in C plus plus if you if you did not specify the data type if it is if just a number if it's just an integer it is always going to default to integer only and uh if it is a decimal number it is always going to default to double so what I did here is just added a comment so comments are those statements are not executed by the compiler I'll be showing a demo shortly so for regarding data types these are the data types for storing numbers and for characters you don't need much you would have only two types of character inputs that is you'll get only one character or you get a collection of characters so for one character you have cat but if for one character and for multiple characters you have strings so strings is actually more than just collection of characters there is much more to talk about strings we'll be doing that at a later video so now uh for characters the way we Define characters is by using single quotes so you have if you put anything inside a single code something like a or if you put B over here or exclamation mark anything inside a single code but only one character strictly only one character you cannot put multiple characters inside a single that will cause an error and the fun fact is if you put something like this this will also become even though one is integer if you put it inside a single code it becomes a character the same goes with decimals also you cannot put decimals inside single quotes because it contains more than one character right so even if you put 1.0 something like that one is a character this period is a character and then 0 is also a character so you cannot put more than one character inside string so that will come under string so strings how do we Define like we did here so using double quotes string is just a collection of characters collection collection of characters that's it and it is going to be n plus within double quotes so anything you put inside even if you put even if you don't put anything inside double quotes this is also a string this is called a null string we'll talk about null and all these things at a later stage but for now just for your information purpose I'm just telling about the null string and you do even if you put something like this this is going to be a string it is just a space and even one one character also it is going to be considered assisting so this is also a string and now you can put something like 1.0 or 1.00 2 all these are now considered as strings the way you represent data is very very important if you just take numbers if you just put one it is going to be end if you put 1.0 it is going to be double remember that here if if you put if you do not specify the data type it is going to be defaulted to double only in C plus plus and if you want to floor if you want the data type to be float you can just add an F over there so if you just put F over here it is going to be float the same goes here also if you want this one to be considered as long you just put an L over there so this is considered as long and how do you define a character put like this this is going to be a care and if you put it like this this is going to be a string so see how how how differently it is interpreted if we type the data in a different way so this is the importance of data test here anything we get from the character is categorized only into these data type so we don't have to worry about any other data whatever we type is just going to be a subset of all all of these things now now let us work on some real input we forgot to mention about the comments so let us know well we can actually show the comment over here only so suppose I want this data but this is something for you to understand right so these are not part of C plus plus command these are something I typed right so these don't make any sense in C plus plus but I don't want to delete it because I'll be using it to explain to you guys so how can I do that without and also run this program without actually going into an error I cannot write another another program and use a separate file right I don't want to do that I can but I don't want to do that well for that we have something called comments I need this data but I don't want the computer to execute it so what I do is I'm going to hide this data from the compiler so the way we do that is by using these clients as comments so comments are actually used to uh explain some lines of code and also they are generally used to actually debug the program so if you are developing a big program and you don't want some of the lines to execute and you directly want to see what is the result of two or three lines you can actually comment on the other lines and you can see the result that is going to be very useful when you're testing your program so for that comments are there so there are two types of commands one is the single line comment which I did over here so this is just going to comment on this entire line so whatever I'll write after this pair of forward slashes is considered a comment comment so all these are commented out and then if I need to commit at multiple lines the way I do that is by putting a forward slash and putting a star over there so you can see all these are grayed out now and the thing is it is completely graying out my program so even this thing is grayed out and now if I try to execute I will be getting another it says that this unterminated comment is here that is this one see this one has been started but it is not terminated at any point so I want to terminate my comment over this length because these are these are the lines I don't want the compiler to exhibit right so to terminate I'm just going to do the reverse software I'm going to put a star and then slash so this is actually going to comment out all these lines these lines change my program code these are not going to be executed by the compiler so now I can run my program without any issues and I'm going to get the output so that is the importance of comments we will be commenting out many things at a later stage when we are working with bigger programs comments are very important so now let us write some useful code let us now write a program to add two numbers so it is always wise to actually put a comment on what you are doing and also put some authorization so you can put something like I did it on on it for now I'm just going to write the name of the program what I'm going to do is I am going to write a program for add two numbers it is always advised to put comments before your program code you don't have to put it over there only I am just putting it there you can put it anywhere you like I I even you I can put it inside here also I can put comments anywhere I like now let us write a program to add two numbers so first thing is I need to ask the user to enter because obviously we need to ask the user something generally is going to know what your program Ming so let us say enter the first number simple enter the first number and now how do we uh now we need to create a memory location I told you right we need to create a memory location to actually store our input the way we do that is we need to First specify what kind of data we are going to get what we can because it's a number it is actually going to be um Floats or doubles right we can we can add any number but for Simplicity purpose I'm just going to go with int you can actually go forwards or doubles also uh it is completely up to you I'm just going to go with paint or in this tutorial so I'm just going to type int and then I need to name the location we need to give some meaningful name so this is also known as a variable declaration uh we are just creating a variable to store something so this can be understood as a mathematical function right so we are just going to put x equal to 5 it just means the variable access storing the value 5 but in computer this is what is happening you if you are declaring a variable it is it means that you are actually creating a memory block and then assigning a name to that so it's just like an alias for the memory block so here I'm just going to name it num1 just to keep it simple and here you can I you can do two things you can either specify the value which is going to go inside the memory location or else you can even uh keep that so here since I don't know what is going to go inside this location I'm just going to skip it and enter a semicolon this means that this command is terminated so I'll executing this command the compiler will know that it has to just print a memory location and now how do you get the input it is just the reverse of it you guys should try it if it is C orb it is going to be C in and then if it is this side this is going to be on the opposite side well this is how we take input and then in where do we need to store the input we need to store it in this location so just write num1 and then put a semicolon so we got our input inside number same thing we need to do for the next number also it's going to copy paste that and here instead of first number I'm just going to write second number and then instead of num2 I'm just going to store uh sorry instead of number I'm going to store it in num2 location and now I'm I need the sum of these two numbers right so remember that I can directly put numbers so you can directly show the sum like this so you can write sum is and this one and then what was that num1 plus num2 you can directly put like this but this actually makes it little bit confusing and it is always advised to keep your code very very understandable so if somebody is reading your code they should understand what is going on so this is not always a best practice unless you are in into competitive programming you need to consider all memory and all those things but uh we are now learning so it is always advice to use as many variables we want so for storing the sum I'm just going to go with an integer so because if we add two integers you are only going to get an integer right well I'm not talking about the Border cases where you go with very big numbers like 2 power 32 plus 2 power 32 that is obviously going to go out of the range of integers but I'm just talking about normal cases so I'm just going to store it inside this location sum and what it is going to store it is going to store the value of num1 plus num2 and then I am going to invoke the sum over here so remember in the previous video I told that memory locations and numbers can be accessed without this double quotes that is why I put some without double quote and now if I executed here we have our first program of audition this is our first useful program it is not just printing something on the discrete it is actually doing something for us so here I am going to enter the first number it is 12 um second number let's say something like 24 and then if I enter it the sum is 36 perfect 12 plus 24 is 36 we got our answer yeah I forgot to mention the way we check size of the data type is by an operator called size of so how we do that we just put size and then put an off and inside the brackets you are going to name your data type you can either put the data type or you can put the data itself so if I just put one over here and let me put an angle so that you don't get that compiler statements so here you are going to get four why because one is an integer as I told you it's just going to be treated as an integer only and if I just put 1.0 as I told you it is going to be defaulted to double that is why the size is 8 and now if I put 1.0 f it is going to be plus a float and you will be getting only four bytes so that is how size of works and now if I just put a character it is going to take only one byte so if I just put like this you are going to save one over here and then even for a null character that is I'm not putting any character these are just two codes side by side even if I run this I will be good I'll be getting an error it says empty character constant that cannot be done another thing is if you just put one character in the inside double quotes let's see what happens in single code this written one right so what will happen in the double quote well as she told you this thing is nothing but a collection of characters so maybe it will be the count of the characters right so something like hello if I just put hello then this is actually five characters right h e l l o makes five characters so the side should be five right but you'll be surprised that the size will be six so that is why I told you strings are something more than just collection of characters there is something called a concept of terminating character or a null character we'll be talking about that in the when we are discussing strings so that's all for this video in the next video we'll be talking about strings and how to use them in our program so till then I I would like you to actually meddle around with the code I would like you to do as many errors as possible and try to read these errors the errors are very very important so you just try to do something like this and then compile you know that this is going to result in an error but what is important is this message because every time it is not going to give you a perfect message for General or something if I have something like this if I just forgot the semicolon over here and then put something like uh let's say hi over here and then put a semicolon and if I try to compile it it is going to show an error in this line it says in line number eight it is expected uh it expected a semicolon before c out statement but there is a semicolon statement where is the error it is actually in the previous line I forgot to put the semicolon in this line so that is why you make as many errors as possible and try to understand these lines these are very very important it is going to help you to write better code you you won't find yourself trying to figure out where the error happened in this video we'll be talking about ASCII or American Standard code for information exchange so what is this this is basically a number which is associated with every character let me give you an example the previous video we wrote a program for adding two numbers right so same thing we are going to repeat over here so let's say enter foreign and I'm going to create a memory location and take an input inside that location let's say a right so instead of A1 I'm just going to name it a and same thing is going to happen enter second number okay let me give a space over here so that looks nice and in b c n b and In Sum equal to a plus b and we are going to just say the sum is and the sum right we wrote this program in the previous video right so we you all know what it is going to do it is just going to ask for two numbers we are going to input that and it is going to process those two numbers it's going to add those two numbers and then it's going to store the value inside this memory location that is sum and then here the memory location is invoked and the value inside that memory location is going to be displayed onto the screen here now what if I just change this end to some other data let's say care and here also let us see here now let us run and check this out so here it did not show any error and it is working perfectly so now if I just save one over here enter first number that is 1 and the second number two and now the sum is going to be something different so you might think it's going to throw an error because we are trying to add two characters but as you told you characters are actually a form of integers only computer stores character in form of integers so this addition is completely valid and the value of the sum is going to store which is actually the sum of the ASCII values of those characters so one whose ASCII value of 49 then 2 whole is asking value of 50 so once you press enter you are going to get the sum as 99 that is 49 plus 50 that is 99 right that is why I told you that representing data in different forms is very important so if you write one like this it is going to be let me write it separately somewhere in the bottom so if I just type 1 this is an integer and if I I put it like this this is a character so that is why I told you the way you represent data is very important so instead of size that is four bytes and one one byte so that is also there but here this integer is actually processed as one only so it is processed as well and this thing it is processed as 49 so this is the number it is going to process when you just say a character one right so every character in your keyboard has a high speed value so to look at that just go into your favorite browser and check for ask you over there and here you might see many links so just click any of them so they are going to give you a table of ASCII values so this is the ASCII value and this is actually the decimal and this is the hexadecimal representation you don't need to bother over the hexadecimal representation what is important is this decimal representation and the symbol associated with it so you can see the knowledge associated with ASCII value is 0 and there are many other characters so 13 is actually the carriage return that is the enter key and 27 is a Escape key so here you can see 27 is the Escape key so what is important is our numbers and characters so those ASCII ranges are only very important to us we will be using them interchangeably while dealing with data right so mostly data consists of only numbers and characters that is why we need to remember the range of numbers and characters as Q values so here number starts from 48 so here you can see 48 is 0 so it starts from 0 and goes up to 57 that is 9 so this is the range of ASCII values so 48 to 57 that is the range of numbers and capital A starts from 65 and goes up to 90 90 is Captain said likewise small a starts at 97 and then it goes up to 122 so 122 is small Z so these are the ranges so let me write that down here so let me put a comment so this multiline comment so 0 starts at 48 and 1 is 49 in likewise right okay I'll put underscore here same way capital A is 65 capital B is 66 likewise and small a is 97 small B is 98 and it goes on so these are some of the important aspiranges we will be dealing with this while we are working with the conditions and all those things we will be looking at that in a later video but these are some of the ASCII values which will be using very frequently so it is better that you remember the starting value because the other values you can directly derive from the first value so 0 is 48 capital is 65 and all a is 97 so these are some of the values uh that would be very helpful if you remember these steps so now you know how to predict the output right so let us try with some other characters Also let's just put this as a character only so instead of end I'm just calling it a scare now if I try to build and run this so here it is asking for the first number let's say some random character I'm just putting this question mark and this apostrophe so let us look at the table so question mark As 39 is the apostrophe and 63 is question mark So 63 plus 39 so now if I just put it the sum is f that is over here 102 right so that is how ASCII version just work so they were just like numbers just that the character is associated with a special number and you need to know the number to actually correctly predict the output so sometimes human basis out right so sometimes you may put a character and try to add two character and see absurd answers those are not upset just that your logic is wrong so here if I just put an intent character sometimes this happens so if I just put a hint over here and Cat over here and then try to build and run this so first I'll put one and then put an A so now the output is going to be B Because 65 plus 1 that is 66 and the character value of 66 is B so you can check that from this table so here you can see capital B is 66. right so ask device are just like numbers so you're just going to operate them as you are going to operate on numbers so you can put uh you can add one or you can multiply it so into two that is also possible so this is only character so let's just make character and then once I try to run this here it is 1 and 2 so here the sum is B Because 48 into 2 that is sorry 49 into 2 that is small B right that is 98 so here you can check that out so 40 49 into 2 that is 98 so 98 is B so you can do that you can divide those things in this video we will be looking at conditional statements so what are conditional statements what are conditions basically conditions are those set of rules which Define a particular procedure to be followed so what do I mean by that let's take an example suppose you want to sort out all those files which you created yesterday from the C drive or from the desktop so the way we do that is we take all the files we look at the date when it was created and then if it matches yesterday's date we put that inside separate folder or else you leave it or you put it inside another folder that doesn't matter so our only focus is we are putting those files which were created yesterday into a separate folder so when you're checking whether the date matches or not you are actually performing a conditional operation so that is what conditional operators or conditional statements do so conditional operators work like if something is there and you need follow some procedure or else you need to follow some other procedure which may or may not be defined if it is not defined you need need not do anything if it is defined you need to follow that procedure so it is like if something then you do something so do procedure one suppose and then else what you need to do do is do a procedure to or you can leave it right this does not need to be defined so this is not important what is important is this condition this condition if that something is satisfied then only you need to do procedure one or else you need not do anything or you need to do some other set of statements which are defined so that is how conditional statement work and the same goes with C plus plus also so the way you define condition statement is you put an if and then inside a pair of parenthesis you put a conditional statement and here you have a block so this block is different from this block here I'm writing it so this is if block so this executes only when that condition is satisfied and then if this condition fails in our example suppose some other file came up which was created one year ago so what you need to do you need not do anything or else if you want you can put it inside another block that is up to you so do that as else if that condition fails you have another block you need to follow this particular procedure so this set of statements or this set of rules execute only when this rule is true or this conditional statements evaluate to true or else it follows this else block so the way you define conditions is by using operators called relational operator relational operator is just give the relation between two operands so these are same as the mathematical relations you have a greater than you have a less than you have a greater than or equal to less than or equal to and then you have an is equal to this is is equal to so do not get confused with a single equal to sign we use so by declaring variables I told that in k equal to 10 means a holds the value of 10. so this single equal to operator is known as the assignment operator and this double equal to is the is equal to operator so the difference is when you tell a equal to 10 and a equal to equal to 10 this means that assign the value 10 to 8 so this is what this statement means and this statement means compare a and 10 and check its equality so this is what it means so this double equal to means that you you will take the value of a you will take 10 you compare it and if they both are equal then you say it's true or else you you tell that it's false so this single equal to Operator just means that you put this 10 inside this memory location a that's what it means here under Point node is 10 equal to a is an error so here even though it mathematically both the statements are same then equal to a cannot be processed because the computer always wants the left hand side to be Memory location whatever the right hand side is it can be a memory location it can be a constant value it can be anything so whatever it is it has to go into the left hand memory location by using this operator which is the assignment operator and this double equal to operator can work either way so even if you put n equal to equal to a this is the same meaning it takes 10 it takes a value of 8 Compares it and if they are equal it's going going to tell yes what else it's going to tell no so these are the operators and you have another operator this is double equal to which is is equal to and then you have a not equal to not is basically this exclamation mark over here this is not equal to so these are the operators you use to check the conditions so let us look at a quick program let us make some program let's say uh to check whether the person is eligible to let's say drive a vehicle or not so for the legal age for driving Vehicles is 18 years so let's check whether a person is eligible to drive the vehicle around or else put an oath or not whether is an eligible voter or not we can do that so let's start by writing the input statement so first we ask the name enter the name is going to enter the name you know name is going to be a string so string name I don't know the name that's why I'm going to leave it blank and I'm going to take in the name over here so CN name and now I'm going to take the age of that person so let's say uh CR enter okay enter your age or here now I'm going to take the edges here so let us mention that also over here in in years something like that so I'm going to get the age in years number of years is going to be in integer so I'm just going to took an INT age and then I'm going to get the age also good but now I need to check in condition so what is going to be the condition I want to tell that the user can drive the vehicle or put the oat only if it's above 18 years of age so baby do a test you put an if and then inside this pair of brackets you put the condition the conditioners if his age is greater than or equal to 18 or not we are going to check that and then if his age is greater than 18 then you put the statement right let's say you are eligible to Vote or Private Car something like that right this eligible if it's greater than or equal to 8 in his eligible else you can just print sorry okay sorry you are not eligible something like that what we have done we have just taken the name we have taken the age your complete the age and we are checking whether the age is greater than or equal to 18 or not so if he is greater than or equal to 18 or if it's a major you are going to tell that he is eligible to vote or drive a car or any vehicle or else you are going to say that you are not eligible so that's how you do that let's try and execute this program so here let's say enter the name something like John and enter your age 12 so here it says sorry or not eligible let me put a new line after this health statement so that you don't get confused with the compiler's output and here so let's say some other name um uh let's say Harry and uh enter your age he is going to be 21 so here you can see you are eligible to vote or drive a car right so this is a simple program we have written so here you can also do another check right so suppose the person who is using a program is a notify wants to I'll check the validity of your program suppose you want to do something like he wants to put negative integers or something so age is always positive right the way you do that is first you check whether the age is positive or not so the way you do that is if age is greater than zero if it is a positive number then only check it so all these statements go inside this right if the his particular age is legal then only you can check that right if he is providing some negative number you cannot check that so here I'm just going to indent distance so that looks nice uh you also try to indent your program so that you can understand what you are writing so this if is this uh from this block to this block this is another if this is else inside this if block so all these statements are inside this statement or else you see um Shield please enter a valid age right so it is not valid minus Pi is not a valid age right so you take only positive integers as ages and you are checking whether that age is 18 or not so if it is equal to or greater than 18 your your saying that you are eligible to watch a driving card or else you are telling that you are not eligible so here now you can execute and try out this program it is better to execute after every uh condition you write right because when you are writing a bigger program it is it will be a good practice to actually check when you are putting a condition so that validates your program even more faster and you will be able to easily debug your program so here let's say enter the name let's think of some other name let's say Jack and enter the age let's try the hunting not you know let's type minus 120 and enter so here it says please enter a validate so you can have many checks like that so you can have also maybe he's going to enter some weird is a thousand years or two thousand years you can check that also the age should be less than 1000 or less than two thousand something like that for that we are going to need another set of operators which I will be talking in the next video but you can do that inside this if also so I can check over here also if age is less than let's say what's the maximum 800 right so let's say one or five or one or two maximum one or two so if it is less than one or two then only you need to execute these statements so Ctrl X and it goes inside this and let me intend this properly right so if H is pleasure Mark to this or else you are again going to say the same thing so just Ctrl C and then over here inside this if you're putting is this else so that is how simple conditional statements are you are just going to play with conditions so here I am checking if it is a positive number and here I am checking whether it's too big if it is too big I am telling that please enter a valid age and if it's too small also I'm telling that please enter valid age and here if it lies between the range of 1 to 101 because 102 is the maximum wage so I put less than 102 which goes up to 101 and greater than zero starts from one so from 1 to 101 it's going to check and if that age is greater than or equal to 18 it's it's going to say that you are eligible to vote or else it's going to say if you are not eligible so that is how you perform a conditional check so this statements which are written inside and if so I have written a if inside if so this if is the main F inside this I have written this and inside this I have written this if else statement so this concept is actually known as us let me write somewhere over here okay on the top I'll write this is known as Mr if so nested conditional statements so this is what this is called as now if I enter a bigger value than a hundred and one let's say 105 or 200 so that will say you are not uh you're not entering a valid age and even if I enter some negative numbers also your it's going to tell that you're not entering a value range so that is how you play with conditional statements you try writing a program which will segregate whether a number is order even or not I know this is a very simple program you will find it in the internet but just try it on your own so let me give you a hint and even number um then divided by 2 gives remainder 0. and that's it we'll need another condition so this is the only condition you're going to give you are going to take a number and then you are going to determine whether it's an even number on or an odd number and this is the hint so if an even number is divided by 2 it it will given remainder as 0 and then if it is an odd number it's going to be some other remainder remainder is going to be one so you can try that you can try writing that program in this video we will be talking about logical operators in the previous video we wrote a program to validate the age the user enters right so we are giving a condition like if it's check whether it's a positive number or not and if it's a positive number we were again checking whether it's too great or not if it was too great uh we were telling something like your age is not valid and if it was okay if it was in a Range then we were checking whether he's 18 years or younger we were considering that the age was valid or else we are telling that it was a North valid age right Here If You observe this condition and this condition go together so if a number is positive and if a number is too great then it's not a valid number or if you look at the larger scope here you can combine these three two statements if a number is positive and it's too great or if a number is negative then it's not validate or else it's going to be valid so the way you group these conditions are by using logical operators these are just like the cut connecting words are used in the English statement so here if I talk about the condition when the age is not going to be valid let me write it down here and number is a valid age or a number is not a valid age if it is positive and if it is too great or the number is negative so this was the condition right so if a number is positive and too great so these two conditions go together or the number is negative then the age is not valid so this was the condition if you write it down in this manner it is much easier to write it down than these group of Master different else statements so the way to achieve these things to validate these conditions and to join the result of these two these results are joined right you need to check whether the number is positive and whether it's too great and you need to combine these two results and you are going to get a result also you are going to check whether the number is negative or not what if it's not positive you need to check whether it's negative or not and then you are going to check these two conditions if one of them is true then you are going to say it is not valid so this is basically the function of logical operators so there are three logical operators in C plus plus or in any language these are same as The Logical gates in physics you might have come across it so these are and you have an r and a not so not symbol you might have guessed it while I was talking about the relational operators I was talking about this operator right so if this one stands for not equal to so this exclamation stands for or not so this is not and for R we are going to put two vertical bars which are which you will see on on top of the enter key and here for and you have two ampersands the very important point to note here is that you need to use two Ampersand symbols for and two vertical bars for R because a single version also exists so in C plus plus there is also an uh operator which is this one which is a single and a single or so these are actually bitwise operators we need to dig deep into these operators because they deal with a binary representation of the data but just for your information I'm telling these things we will talk about that in a later video for now we don't need these bitwise operators or bit manipulators we are only going to need the logical operators which are just going to tell the relation between two conditions so and this basically if two or any kind any number of condition if all are true then the result is true so and this basically uh if all the conditions are true then it's going to be true and for R you have if any one of the condition is true right if any one of the condition is true then the result is going to be true that is the specialty of all so you if you have any number of conditions even if one condition validates should true then the result is going to be true and for and if n number of conditions are there all the number of conditions should be satisfied then only you are going to get the true value or else you are going to get false so this is the basically the and and our operator not is just it's going to turn the value so not is it is going to uh change true to false and vice versa so the function of not is just to change true to false and false to true or text n number of conditions and if any one of the condition is true then the result is true and for and it is going to check all n number of conditions and if any one of them is false then the result is false every condition should be true then only and is going to give you a true so that is basically The Logical operators so here another thing is that if you are writing a logical operator let's say some condition one and condition two that's how you represent and for all it is the same thing if condition 1 or condition 2 and not basically doesn't need two conditions just going to reverse the condition so first you put an exclamation mark and you put the condition so here if you are using an and operator if this condition evaluates to true this first condition then only it's going to check the second condition so even if the second condition is true who is the first condition is false it is not going to check the second condition at all it is not going to perform anything over here so the thing with r is it is going to check every every condition and here if this one is true it is not going to check other condition so in the condition for R is that if any one of them is true right so you if it forms any one of the condition is true then it's going to evaluate it as true and this whole condition becomes a true condition so this part is going to be executed that is with the all so those are the condition those are The Logical operators let's take a quick example we are going to deal with the same example we took yesterday so here I'm directly going to take the 8 so enter your age and I'm going to take that inside a variable so end 8C in H and here I'm going to validate the age so if if age is greater than 0 and H is greater than 102 right so this was the condition we gave yesterday or 101 something like that so let's stick with 102 now and if this condition if this age is greater than 0 and the H is greater than 1 0 2 so this condition is basically not required because if it is greater than 0 then only it's going to be greater than 102 right so I'm just going to take out this particular condition so if the age is greater than 102 or if the age is less than zero right so if an age is greater than 100 something like 101 102 something like that or if the age is less than zero what we are going to say you have not entered uh a valid age right and or else we are just going to perform the check so if age is greater than or equal to 18 which is ah let me tell you over here I forgot yesterday we were talking about the block right so here if you have only one statement execute then you know need not use a block so here I have only one statement X good this is going to be the same thing as uh this one here if I put a block inside this and then put the C out statement it's going to be the same thing but block is totally used to hold two or more statements if I am going to use only one statement I don't need a block so I can just directly put the statement beside the if conditioner itself so this is also valid but if you write any other statement over here so let's say statement two if I write something over here this is actually not considered a part of this if statement unless and until I have a block something like this so here inside this block whatever right inside this block all the statements belong to this else statement but here since I have not put in Block over here this particular statements goes to the if this statement stays to the else part only unless and until I specify another block and mention these two things over here so if I put these two things over here now these two have become a part of this if statement and this whole if statement becomes a part of the else statement and here I have put only one statement that is why I don't need a block and here if an age is greater than or equal to 18 I am going to say that you are eligible so whatever for eligible to watch something like that or else we are going to see uh sorry you are not eligible something so this is the program we have written this is going to do the same thing which we had done in the previous video but see how small the program now looks so if you consider taking out these braces then it's going to look much much smaller because uh you have only one statement execute inside the if block but because it many people tend to forget putting these braces for multiple statements also it is always advisable to put the braces for even one condition but generally I don't do that I just if there's only one condition I put it beside the condition itself so if one statement execute I put it beside the condition itself it's up to you either way it's going to work so the here now let us execute it we are going to get the same output so here it's going to ask for the age so enter your age let's say 12 so here it says sorry you are not eligible and that's it we have created the same program but here it's a much smaller program than the previous program in this video we'll be talking about switch case statements so before talking about the switch case statement I would like to talk about the if else if else ladder so that is nothing very simple implementation of the if else ladder itself so let me give an example suppose you have a little commit it down here you have a question like the McQ kind of thing so you have a question and you have four options uh like this and you have a choice so I just say you your choice sorry your choice and here the user can enter whatever number he wants and you can check whether his answer is correct or not so you just check whether the choice whether the choice is one or else you again go for another check you check whether the choice is who or not right and if it is not two you go and check for another set of conditions so if Choi is equal to 3 you have something to do uh or else again you check whether his choice is four or not so if Chi is equal to 4 and if none of these are two then you say uh that it is an invalid option so you do something like this right so this is the kind of implementation where you are not using the if else if else ladder so here you are using the if else ladder so how do I make and make it as an if else if else ladder so what is else if basically it is the same implementation just that it is using a rule that the else statement always goes with the inner Motif so let me write it down here it's a very important rule so the rule is always the else statement goes with the innermost if so this is a rule you need to remember always this is always true that the L statement goes with the innermost F so if if you write some a program like if and then you have a else for that sorry else for that and you have and if you have another if and you have an else so the hierarchy of this particular program is derision if condition and for that you have an else condition so these three statements belong to this else condition so let me write it down neatly so if you have an if condition like this and suppose this phase the else is there right so inside this else actually so even if you write something like if if and else so what is going to happen is these three statements go with this L statement and this is if and this else are what are the actual if and else the actual contrary part that is this one so if Choice equal to 1 or else you going to perform any of these operations right or else you are not even going to look at them if charge equal to 1 you won't consider these options so here again so Here If You observe there are two ifs right so this if is evaluated so this L this LS always will go with the inner Motif so what is the innermost step right so here if I have a condition 1 and here if I have condition 2 condition 1 is evaluated and condition 2 is also evaluated and only if the condition 2 fails so if this fails then this else is activated right so this else always goes with this particular if not the condition 2 1 but always with the innermost step so this is your rule that is what is used while uh using the if lcfl slider the thing you do is you don't actually put the braces but you just put a word like else if so that has the same meaning instead of this braces you are just minimizing it so it increases the readability so here if I put else if and here also the same thing so this if I just remove this and this is goes here and you have final Edge so you see I did not add any word just that the same program the same braces I just removed the braces so now the program is much more readable right so if Choice equal to 1 or else if charge equal to 2 or else if charge is equal to 3 or will shift charge equal to 4 or else if none of these are true it's an invalid option that is the use of L shift so now let us talk about the switch case statement so switch key statements are not always used for all kinds of comparison they are actually a kind of alternative for the conditional statements but they are always not used switch cases are used only when we need to compare the equality of two operands so let me write it on here which cases okay sorry switch cases only compare equality so you cannot compare whether something is greater than or less than equal to or something like that you can just compare whether they are equal to or not equal to so the way you define switch case statement is for same thing I am going to do so let us write a complete program we will understand like that so let me put this here um so let us ask by asking something so see out or not you can add any kind of input for of your choice so just I'm just saying enter your choice and I'm going to uh put my choices one down the other so I'll start with number one and again another one so let's say two and you have three and you have four and you have new line and here I'll just put enter your choice so let me give another new line so that we can differentiate between our choice and the question so now our choice is going to be an end so in choice and see how sorry see in choice so I got a chance now in the previous case how we did that we just checked whether the choice is one or two or three you can do that actually if else if else if else if and else so Suppose there are 10 conditions you have nine L shapes and one if and then you have an else part where it is none of the choices so that's how it works in case of switch case it becomes much more easier so the way you do that is you just switch sorry spelling of songs which you put your variable in there so what is your variable in its choice right so sweet choice you have a brace and here you are just going to Define your cases so you have a case and then this is just like comparing charge equal to some number so I just say short case one and then you need to do something so let's just print uh you chose one something like that and then the most important thing in switch case is that you need to do something called break so we'll talk about this keyword this break is a keyword we'll talk about that in the next video but for now you just remember after every case after performing every statement for a case you need to break out of that case I generally do that without the basis but you can even put a brace over here so this is also correct but I generally don't use a brace it's okay if even if you don't so this is the same thing we are going to do for every case so case one case two case three case four that's all right so we have only four choices and then uh let me first do that afterwards we'll look at the other condition so you have you chose two you chose three you chose four now let's suppose you did not choose any or not any one of them now what is going to happen is you are going to use something called the default case so the way you do like this you put a default and then you just print um the invalid whatever the exception you wanted to print so invalid Choice something like that so that is how you use switch case it is very easy to read and this is mostly used in case of such menu based program so you have menus or you want to choose something or something like that so generally we use which cases because they are much easier to implement than the if well so you need to write if else again and again and again so this one is much more easier than writing the if else if else ladder so you can even compare strings you can compare characters so characters are nothing but integers and you can compare Boolean values also you cannot compare something relational right so you cannot compare whether it's some in some range or not if you want to compare that you need to go with the efl statement or else which case is going to work for you so let us quickly execute this program so F9 so here it's asking enter your choice let me just put 2 and enter so here it says you chose to so let us now look at what will happen if I just remove this break so let me just remove these three bricks right now once I try to execute it just see what happens now it's again asking for my choice now if I enter something like let's have one what it should print it should print you choose one right it was working in the previous time so now if I just put enter it says you chose one you chose two you chose three you chose four why did that happen because of the break statement so now if I don't have the break statement what is going to happen is it is going to evaluate from this order only it is going to from top to bottom so now if first it takes the first case and then if this phase it goes to the second one if this case it goes to the third one and whenever it finds a match it is just going to drop down just like that so the break prevents the drop down if you don't have a break it is going to fit everything in that order so if I just remove this break also and suppose I tried to execute this again so now here if I uh put some case like let's say some arbitrary number so three so here here if I press 3 now observe that there is no break right so it is going to go from 3 4 and invalid charge there's no break in between so it's just going to drop down to the whole switch statement so just press enter it's going to say you chose three you chose four and then invalid choice so that is why you need to put the break statement so that's all for the switch case in this video we'll be looking at Loops so what are Loops let's take an example so here I have sample program uh this does nothing but just taking name and age of a person and then print it onto the console so what if you ask you to take the date of 10 people so what you will do is you either execute it 10 times or you just copy the whole thing and then paste it 10 times and just change the name like the name one name to name three and so on so that those are two ways so what happens when the user decides how many number of times you need to ask him so what if in the runtime I am the user and I and I tell you that I want to store the data of let's say 100 people and you just wrote the program for 10 people so at that time your program fails right so to counter such type of situations and the counter such redundant code so you are not doing anything practically useful right you're just copying and pasting the whole code again and again so to counter those type of limitations we have something called Loops so today we are going to look at for loops so for loops work like a counter based Loop so you have a counter you have starting value and then you have an ending value so the loop goes from the starting value to the ending value that's all for Loop works so the syntax is you write for and then you have a starting value of a counter and then you put a semicolon and in between you put a condition so this condition is actually the loop condition so what happens is the counter is actually checked with a condition before going ahead so for every time the counter value is checked is compared with some value so that it stays true so this condition should straight through for the whole Loop to execute if it fails the loop is going to break and then the control goes over to the next statement which is also of the loop so for the loop to execute this condition it needs to be true and the way you grow this starting energy you cannot stay over there right so if you just put the starting condition in the loop this is also a for Loop only but what happens is there is no growth condition right so the starting value stays the same and this condition also is always true so this Loop will be going on forever so that type of loop is called an infinite Loop so the easiest way to create an infinite Loop is you just put two semicolons this becomes an infinite Loop so because there is no starting value there is no condition so this becomes any value what you do is you just Define some value over here so this makes it as an infinite Loop so infinite Loops are bad you don't want your program to keep executing the same set of statements again and again and again the user gets bored right so you want to end it after a certain number of times so what you do is you put a counter and then you put a condition and you put an increment value so you increment the counter or you you basically increase the value of the counter so that at some point this condition becomes false and the loop breaks so that's what you are going to do so let me write a small for Loop over here so what we're going to do is fall and then for the counter variable I'm going to initialize it inside this so there is something called scope so what happens is I can even do it like this also I can put an i over here and I put I equal to 0 something like that that also works but what happens is this particular I will be used in the whole program I mean in the whole scope of the main so we'll talk about scope in a separate video for now it is best to use counters inside the loops itself because once the loop end the counter gets out of the scope and it is deleted automatically from the memory so it's best to use counters as a local variable we'll talk about what are local variables Global variables when you are talking about scope we'll definitely do that in in another video so for now we are just going to write for I equal to 0 so that is the starting value and I want to execute it 10 times right so for how for 10 times I am going to check so let me start from one that becomes easier so many times you will be starting your your counter from zero there's a reason for that that you will understand when we are dealing with arrays or something generally computers counting starts from zero so for now we'll start from one and then suppose we want to go till 10. so when will the condition fail when we go for a number we are growing this number right so let me not write the condition right now I'll just put the growth rate so I equal to 1 so I will just do an i plus plus I talked about this increment operator right so what this does is it just increments the value of I from by one unit so if it is 1 it becomes 2 and then it becomes 3 and so on so now this I will go on increment it will go till the range of uh the integer that is sum 2 power 32 something like that and then it again Cycles back it again goes to minus two per something so this Loop won't end at all because there's no ending condition for this so to end this loop I want to execute it 10 times so that condition will fail only if I becomes greater than 10 so till the value of I is less than or equal to 10 execute the slope once it is greater just break out of it so here you put a brace so this braces as I told you signify a block of commands so this block represents the for Block inside just whatever you write is going to be executed these many number of times it depends on this condition in this set of conditions so here instead of writing all this I'm just going to put the number itself so let's just put an i over there because uh you don't want the whole set of statements getting confused so let's just put I over here and then I'll just put a new line so endl and a semicolon so let's now execute this F9 so here if you see you have all the numbers from 1 to 10. so that is because of this so what if I put less than 10 less than 10 is when it goes to 10 it's going to break right so now you know the output it's going to come till nine so F9 so here you have numbers from 1 to 9. um what happens if I remove this condition as I told you you will be going into an infinite Loop so what it feels like it it feels like something like this so you can see it's just going on increasing it went to four thousand five thousand six thousand it won't stop it's just going on just printing the numbers just because I don't have a stopping condition it doesn't know where to stop it's just going on going on it goes up to that whatever that value is it's 2 go into 10 power 9 or something and then it's eventually going to cycle back and this process will continue it's we're never going to stop so to stop such a loop you can either directly close this or press Ctrl C it's going to stop so those are used for Loop and C plus plus uh there are other type of usages as well so instead of putting the counter here as I told you you can put it over here so if entire equal to 0 and then here I will just put a semicolon and then I'll just put the condition over here and then I plus plus so what this will do is it is automatically understood that I am using is my counter and once it goes up to 10 it's going to stop so it's just going to give me the same output it's going to give me 1 to 10. and what if I you cannot remove this condition because once you remove this condition uh the loop is going to be infinite and one other thing you can do is you can put this thing inside here so this also does the same thing only thing is that this statement becomes this uh statement of the loop these statements are executed in an order so what happens is first this statement is executed let me number them down so first this statement is executed then this statement is executed so all these statements whatever is inside the block then this statement is executed let me number it as 3 and then it is checked over here so this check is performed at the last so once if it is true it is going to again go there and again this condition this statement will execute then this check will happen and then again if it is true this Loop will continue that's how it goes another thing you can do is you can actually omit the condition also there is a way to actually stop the look without the condition also what you do is you just put two blank semicolons and then to stop I will write if that particular eye is greater than or equal to 10 so or sorry greater than 10 because once it is greater than 10 I mean once the I goes to the value of 11 the look should stop right so what you do is you just break remember this break we use in switch case statements that's the same break this is actually a jump statement so this is how it is used for breaking out of an infinite Loop for braiding breaking out of a loop at a particular point of time so we will be talking about these jump statements in our next video so this is how break works you can you also have continue so that we will be talking about in the next video and now I will just increment the value so here this is the same exact Loop so if you just execute it you will be getting the output so here you have one to ten numbers so here I see because I have 0 over here so I'll just change it to 1 here you have numbers from 1 to 11. now why did this happen that's because I checked after printing this so that's a logical mistake that's not the fault of the loop I just forgot to put it before printing it so once it goes to the value of 11 it should break right so if it is less than uh sorry if it is less than or equal to 10 then only I should print so first I need to check if it is not greater than 10 if it is less than or equal to 10 then only I need to print so this Loop will execute expected in this video we'll be looking at while loops and also we'll be learning how to work on patterns so by patterns I mean we'll be printing some text in some fancy way like we'll be making shapes like squares or rectangles so we will be taking those shapes from the internet and we'll try to replicate the same onto our console so first let's look at while Loops in the previous video we saw four Loops right so the only difference between for Loop and while loop is the condition so in while loop the condition is must in for Loop if you skip the condition it goes as an infinite Loop but in while loop you cannot skip the condition the way you write a while loop is you put while and inside a pair of parentheses you define the condition and then you have a body where the body is defined by the two early presses and inside the body whatever statements you write belong to the while loop again if you want to execute only one condition you can skip this braces and you can directly write the statement beside this Loop so now how do you make an infinite Loop if the condition is so much whether you can put a condition which always stays true so something like 1 equal to 1 so this condition will always stay true and this will become an infinite Loop or you can either use the Boolean true that is t r u e the word true or you can use directly integers also so this is a possible only languages like C C plus plus Python and all so in Java integers and booleans are separate so you need to be sure whether the particular programming language supports integers as booleans so in C plus plus integers are supported as booleans so 0 is considered to be Boolean false and any other number except 0 is true so you can click any number from the integer range but generally people tend to use one as true because uh 0 and 1 make the binary numbers so generally people use one as true zero is false but you can basically use any number X Sub 0 for making it as true so let me give you an example over here so let me put some number so minus 120 which is not 0 and if I try to print some message like welcome to program knowledge and let me put an end line after that statement so now if I try to execute it if I print F9 so here you see it's going as an infinite Loop so you can put any number over here but if I put 0 and try to execute it you will see that nothing happened because 0 is false so this whole Loop is not executed so to make it execute a finite number of times what you do is you put a value over here something like int let's say steps equal to 10 or you can start the steps from one you can go either way you can go from bottom top or from top to bottom you can do it either way and inside the condition let us print it 10 times so while step is less than or equal to 10 that is while uh this particular value stays less than or equal to 10 that is I wanted to print 10 times and then I'll increase the value of tips every time so steps plus plus or you can either do steps equal to steps plus one so both are same you are going to do either of them so now this will increase the value of the steps one by one so I will be getting this uh message 10 times so here you can see the message has been printed 10 times you can do this either other way also so that is basically a common approach used by competitive programmer so I think competitive programming the number of test cases are defined so they will tell the number of test cases like they'll be telling that I will be asking 10 queries and your program needs to answer those 10 queries so generally people tend to use that so let's say this is the 10 queries so what I will do is I'll just write step minus minus so here this operation is getting performed right over here and since this is an integer which is not 0 it is going to be considered as true so this a shortcut kind of thing so this will also make the loop Run 10 times so generally while Loops are used at places where you don't know how many times the loop needs to be executed so generally people use this kind of statements to run the loop till the condition stays true or you can do it with a for Loop also you put an infinite Loop and then break out of the loop when time come so either way you can do it so that's all for while Loops let's not talk about the patterns so let me go into my browser and search for some patterns let's say see programming pattern uh let's go to images let's pick up some simple ones first so here you have this half pyramid so the way it goes is one one two one two three one two three four one two three four five so first let us replace these numbers which just starts so first we'll be making this particular triangle with all stars over there so you have one star two stars three stars four stars five stars and this will continue up to how many hour rows the user wants so this is the first row second row third row fourth row fifth row so now let us try to code this one so let me just uh put what we are going to do here so we don't need this let me put a multiline comment and we'll be printing something like this we will have one and then two stars three stars four stars and then five stars so first we will try to print this and then the user can decide how many stars he wants to put it so now if you consider this one what we will be doing is first we will be talking about this one so Here If You observe we are going for first row we are going to print only one star for the second row we are going to print two stars for the third row of these stars and so on so here the way you identify the row and the column there you need to identify a relation between the row and the column so here relation between the rows and the columns here so columns is basically the number of stars the relation is that the number of stars in every row is equal to the row number itself so the way you do that is we are we we will be using nested Loop so the nested Loops are nothing but a loop inside loop so let me show you as an example so here let's first take the number of rows so let me call the variable as row itself so intro equal to let's say 1 and then flow is less than or equal to five let's first make it for five rows and then we will extend it for n rows row is less than or equal to Phi and then rho plus plus so now you know that this particular Loop is going to run n times so whatever is there inside this block it's going to run for n times so now what I'm going to do is I'm going to run another loop inside this Loop so now I have the loop right so now I will be printing one line two line three line so just consider this as every separate line so now I need to determine how many stars I want to print so those number of stars are going to depend on the row number right so I'll print another I'll give another loop so for INT let's say Stars equal to let's start from 1 and then the number of starts is going to be the row number right so star is less than or equal to rho right so if if we are in the third row we are going to print one two and three right so less than or equal to row and then you are going to give Stars plus plus or Stars equal to Star Plus One whatever is convenient for you then what we are going to do is inside this particular Loop we are going to print the Stars right so see out uh we need to print the star and you know you don't need the space or any new line right so the number of stars will be printed one beside the other so what this will happen when the first row is one you will start from one and then we will check the condition one is less than or equal to one that is true so it will print one star again this this will get activated so one will become two now and this condition will be checked so 2 is not less than or equal to one so because the row is one so this particular Loop will break and then it will go to the next row so before going to the next row let us just print and end the line so that we get to the next line so now what is happening when this particular first iteration is finished it will just go to the next line and then the row will become 2 because of this condition so 2 is less than or equal to 5 that condition is checked and then here it will start from one so one is less than or equal to two one star is printed again it will go so 2 is less than or equal to 2 so again another star is printed and then this condition will be make it three so three is not less than or equal to 2 so this particular Loop is broken and it will go to the next line so if you just execute it you will be getting your output so here you have one star two stars three stars four stars five star for n Stars you are just going to ask the user so that's pretty simple right so you can just ask enter how many rows you want something like that so the end user will enter so in let's say number of rules and then see in number of rows so here I have number of rows so here what will happen for rho 1 to row five now I'll just print number of rows now let's execute this program it's asking how many rows you want I want 10 rows so if I just print it so here I have row 10 where there are 10 Stars so this is what is a basic pattern thing now we'll extend the pattern we'll extend the difficulty so let us try to print this one so what is happening over here you are getting one one two one two three something like that right so why is that happening that is because of this particular Loop right as I told you the number of stars which are getting printed in each row is because of this inner for Loop so outer for Loop just manages the row so this particular rows which is one two three four five these rows are managed by the author follow and then the content inside each row like just one two and three so these contents are printed by the inner for Loop so for printing these things what we need to do here we just need to print instead of star we just have to print starts over here because stars is directly an integer so we're directly printing the integers we don't have to do anything so first the stars is one so it will print one then it will print two or two point three let's look at that I want five rows so here you have the outputs right so one one two one two three one two three four one two three four five like just the number of iterations were just printed that is why it came like that so let me close this so let's try the second one now so it is going from five to one it is just a reverse of it so what we need to do is we need to go from a five to one so what we are going to do we are going to start the row at five right so let's start it 25 or let's make it generic let's just print the number of rows over here and row is greater than or equal to 1 that is I'm going from five to one uh well the first Loop doesn't make any difference because from one to five or five to one there are only five iterations so these are acetone for number of rows so inside the rows you need to manage the content right so because of this statement I wrote Because if it was something like five four three two one the inner loop should start from the highest number right so since it is one two three four five I am starting from one so if it was five or three to one this particular Loop would have started from five because uh it just the value which is getting printed over here only depends on this particular inner for Loop so here uh this Remains the Same and now if I just try to execute it I am getting an error what is that okay it is not star it is Stars and F9 so enter how many rows you want I want five rows so here you have that output you have one two three four five one two three four one two three one two one so this is how you print basic patterns let's take one difficult one um let's say this one right so this one is you can try out this one this is nothing but just printing spaces till the next number so suppose this is the second row so you have no space over here and then you got the third row so there are two spaces and then fourth row so you have three spaces on the fifth row you don't have anything for the last row you are just going to print all the numbers as it is so you can try this one and this one is a similar one as this one so we'll be talking about this one so here what is happening is there is a space actually so what you do is for any kind of pattern you're just going to divide it into a matrix kind of fitting so if we just put a matrix or whatever managed you can divide these things into rows and columns so if you just put rows and columns you will be seeing that this first row there are uh let's say step now one two three four spaces right so after four spaces the number is getting printed that is if there are five rows so there are one two three four five rows right so the if there are five rows what is happening is after five rows for every five rows uh there are n minus one uh spaces uh before the first element right so if n is pi you have four spaces before the first element and then the number of spaces are decreasing so n minus two spaces that is four three spaces for the second element two spaces for the first element one space for the uh fourth element and then zero spaces for The Fifth Element so Fifth Element is directly starting from the edge so let's first uh manage the spaces so here uh we won't be requiring this so okay we need the a two Loops but this one this particular logic will change so what will happen is Let's uh first deal with the spaces so let me name it as spaces so now when I have um the first row my spaces should be four right so I need to start from the highest number that is I need to start from the number of rows and this row number uh it it could be either way so I prefer going from the please to the highest so lowest num less than number of rows and then row plus plus so for the spaces what we are going to do is let me clear this down here for the first row we have four spaces that is for taking ns5 that is number of rows as five we are going to take uh five rows as our example so we will be printing the same thing and then you can extend it so what is going to happen is for for number of rows you are going to give number of rows minus one spaces so if it is pyros you are going to give four spaces for the first element if it was seven rows you would have given six spaces for the first element something like that so now let us print this thing what we are going to do is for number of rows we need to run a loop from one to number of rows minus one so here when space is equal to 1 and then spaces is less than or equal to uh number of rows minus 1 and then spaces plus plus and then since I have only one statement I'm just going to write it over here I'll just print a space without a new line because once it's a new line it's going to go to the next line we don't want that to happen we are just dealing with the values right now and then after printing this what do we need to print as the number so here we are just starting with the row number and then we are going till the ah so we are going till this middle value right so we are just going like one two three and then three four five and then four five six seven basically what is happening is the first and last values are a bit uh similar and then this middle value is just the progression of this so for every row this particular value that is the maximum value these elements go up to and then decrease will depend on the row number so here if you see for the first row uh I'm not going any further for the second row I'm just going one and one number further for the third row I am going two numbers further for the fourth row I am going three numbers further but fifth one I am going four numbers so five plus four nine four plus three seven three plus two is five two plus one is three and then one plus zero is one that's why I'm staying here so for that we again need a loop so for uh let's call it something else now uh let's say the number right so for end number equal to let's start from the row number because it's starting from the row number right so the first row is for starting from one second row starting from two something like that so for low number equal to the row number and where should it go it should go till row minus one right so number is less than or equal to rho minus 1 and then again number plus plus and then here since I have only one statement I'm not using that Curly braces so see out what number right so till where did we do we did till here right so we did not print these statements so we did not print any of these statements we just printed this particular triangle in this fashion so we just have a space and then one then space and then two numbers space then three numbers something like that so now to deal with this numbers we need to print these numbers also right we cannot just omit this so we need to start from this particular number and go till there so how do I know what is this number we don't know that right we we know that it is rho minus 1 so if it is sorry it is rho plus rho minus 1 what I am saying is this particular highest number till where it gets to is rho plus rho minus 1. so this particular equation you can get that right it's just from observation that let's take this row this is the fourth row so that is row equal to 4 4 plus 4 minus 1 that is 3 so 4 plus 3 that is seven so this is the highest number we will get so from there we need to go till there go right so for first row we are not going to go anywhere so row plus rho minus 1 is just one so we need to go from 1 to the highest number uh sorry 1 to the row number which is one so we don't have to print anything over here so we are already at one so we just break out of the loop so here what we'll do we'll we'll be at 3 and then from 3 we need to go to the row number so from 3 we need to go to 2 so we need to print this particular two and then again for from fry we need to go to 3 from 7 we need to go to four so just we are just subtracting 1 1 over here so we'll like write that Loop uh we'll call it back number something like that so let's say um that second triangle let's just call it second triangle uh let's start it from that highest number what is that highest number uh let's start it from highest number minus one because uh you don't have to print that highest number again right so if we are at 3 you need to start from two we are going in this fashion we don't have to print the Spy again right so we have already printed this 13579 already we just need to print these lines so how do we do that we just start from uh as I told you the equation for that rho plus rho minus 1 and minus 1. right so this is this so if you can uh actually simplify it it comes as 2 into rho minus 2 so you can write that also or 2 into rho minus 1 that is also correct so you can directly write it as 2 into row minus 1 or uh I'll leave it just like that so that you understand so this row into rho minus 1 is actually the highest number we'll get to at every row so rho into rho minus 1 and then the second triangle goes up to that particular row number right so greater than or equal to rho and then second triangle minus minus and since I'm writing only one statement I don't have to use that Loop or that braces so I'm just going to print that second triangle element whatever it is and then I am going to go to the next line so these three Loops inside this particular Loop uh is just makes a complex kind of a loop but it isn't complex if we just break this down so let me comment it down here these are for the spaces or for the starting spaces and these are for the starting 10 numbers right for every row they are if you take the nth row there are n numbers right so here for the first row there are only one number and then for second row your two numbers third row your three numbers so I'm talking about this particular triangle so this uh let me just call it the N numbers or n row numbers something like that and this will make the last n minus 1 numbers so here if you see for the first row you have only one uh for the second row you have only one element for the third row you have two elements I'm talking about this particular triangle now so this should give us the expected output let's run and see this uh so till where did he go he went up to five right so he he took five rows let's type with five rows and uh okay something is wrong over here we did not get the output tax expected so what happened um yeah so here what happened is I just took rho minus 1 so this particular look never ran what I should have taken is I had taken this particular expression so that's a mistake I did so it is not row minus 1 it is rho plus rho minus 1 and then now if you execute it you will be getting the output okay I did not close this so 5 and then uh here you have the output so it is one two three two three four five four three five four five six seven six five four now uh the numbers are correct but if you see the placement is wrong that is we messed up the spaces so let's see where we messed it up when the row is one it will go from number of rows minus one to one so now what is happening is if the row is one only then this condition is satisfied what about the next row and the next row so this should be number of rows minus rho and then spaces should be greater than or equal to one what I did is if number of rows is 5 and I'm in the first row so 5 minus 1 is 4 I'll be going from 4 to 1 and if I go from if I go to the next row that is second row so 5 minus 2 that is 3 I'll be going from 3 to 1 that makes it three spaces so like when it will continue so now we should be getting our expected output if I just put 5 yes so here you can see the exact same output we got over here so so this one we made one two three two three four five four three so there's a space between the numbers we can do that very easily what we are going to do is we are just going to add a space between over here and uh over here also whenever we are printing the numbers we are just going to add one space over here and if we execute this 5 so here you are going to get the output as expected so here you are having the same thing so one two three two three four five four three so now this one looks better than this that is because of the num spacing over here since I gave spaces over here I need to give two spaces over here for every uh thing so now what I mean is since uh there's a space between the numbers also so for every row suppose I'm going for the first row I should give 2 into those number of spaces so Suppose there are four spaces in between I I if I give eight spaces it will have been better so let me show that uh there's only one slide modification to make it look like that what we need to do is instead of number of rows minus row I am going to just go from 2 into this particular value number of rows minus low and now if execute it let's say 5 so here you are getting that particular equilateral triangle kind of a thing so here if you see so what I meant was in the last uh when the last time when we did not have a space between these numbers what was happening was uh since there are no spaces it was looking good but once we have spacers we are having a space between every number right so we need to increase the number of spaces over here also so I just made it two times so that it looks exactly like this so you can try these ones also this is tested uh implementation of this what is that is for every row you're just omitting the middle numbers you're going from the one to that particular the highest number of the true that is the row number and you are just omitting the in between numbers on this one also so and uh for complex patterns such as this one so this solid diamond or you can try this one also that is this number printing so one one two one two three one two three four so this one is just a implementation of these two triangles so what we did was this particular triangle is first printed so like one one two three one two three four something like that and then this whole Loop is just inverted again so you need to break the problem down into simpler so simpler problem so here if you you see this particular Diamond you can break it down into this particular triangle that is the upper triangle and then lower triangle if you just see it you will be able to understand you will be able to differentiate between those two shapes so you need to break down the complex shapes into simpler ones and simpler ones you pretty much can try all these shapes so these are just implementations so you can try it just like this so these are the number of so this is how you work with pattern so again for a review this particular first for Loop that is the outer for Loop let me write it down here um or let me go so outer for Loop controls number of lines or rows so the number of lines or rows are controlled by this outer for Loop and the content is always controlled by the inner for Loop or Loops it depends like in this one it took three Loops for controlling the data but uh if uh it was a simpler Loop such as the first one it was only one Loop so whatever it is the inner or Loops always control the data and the outer loop will control the row or the number of lines so here if you will need to actually kind of form a relation between the row number and the data so every time there will be a relation so that is why it's called a patent every time there is a relation between the row and data you need to identify that particular one and you need to work up on your logic to form such patterns in this video we'll be looking at do while loop and also the jump statements in C plus let's get started in the previous video we looked at for loops and while Loops right so let me just write down their basic structure so you have a counter you have a condition and then you have a growth rate of for the counter so that this particular condition becomes false at some point of time right and for while loop you define the condition inside a pair of parenthesis and then you have the body of the loop where you define the growth rate of that particular cut counter right so now if You observe if this particular condition is false at the beginning itself this whole Loop is not going to run right so what I'm talking about is if I declare some variable like enter equal to 0 and in place of this condition if I give I is less than 0 and this growth can be anything so let's say I equal to I plus 10 something like that so now if you see the starting value of I is 0 so once this condition is checked it is false so this whole Loop is not going to execute itself so if I write something like uh this is the for Loop statement so this whole statement is not going to be executed at all let me just add a new line also so this is the escape sequence of the new line so now the same will happen with the while loop also so if I just say in J equal to 0 let me just write down the same set of conditions so J is less than 0 and the growth will be J equal to J Plus 10. right and let me write on that particular statement so see out let me just copy this thing foreign and this one will be the while loop statement so if I execute this particular program I won't be getting anything so now if I just try to execute it you will be seeing that I have a blank output right I don't have anything over here so what if I want to execute this particular statement on what is a particular set of statements inside the loop at least once right so sometimes you are given a menu and then you are asked to choose something from that right so you uh you have something like this you have choose your option and then you have first one second one third one and uh so on so this will continue and then you will be given a choice where you can enter your choice so in programs like this these are called menu driven programs these are called menu driven programs and in programs like this what happens is you need to execute this whole set of operations at least once if I directly press 3 over here let's say 3 means exit right so you have some functions in one and two and three is equal so if I press three I should exit out of the program but for that to happen this whole set of code should execute at least once right so in this kind of loop that doesn't happen it will directly stop uh when this particular condition is false so in the beginning itself if the condition is false it is going to break out of the loop so in uh such kind of situations what we are going to do is we are going to use the do while loop well you can do that with these Loops also by using the jump statements but since I have not talked about the jump statements till now I'll be talking about them shortly so now we will be using the do while loop do a loop is relatively easier to use than jump statements so what we are going to do is you are going to write do and inside this you will be defining the body of the loop so this is actually a loop right so here inside you will be defining the loops body and then you will write while and then the condition right so what happens here is first you check the condition and execute the statements in these Loops right in this Loop what happens is first you execute the statements and then check for the condition that is the only difference between these four and while loops and this do while loop uh let us execute this particular same program so let's take int k equal to 0 and the same condition which is case less than 0 and let me just copy on this particular statement inside the loops body right and this is the do value now if I execute this particular program you will be seeing that this has executed once this is the doway look what happened is before checking for case less than 0 it first executed whatever is there inside this and then it went for this particular condition check which it turned out to be false that's why it broke out of the loop so in places where you need to execute the loop at least once in such cases where you have this kind of menu kind of thing you you are going to use the do while loop it is going to be very useful and very easy to use so let us quickly write a small menu driven program I will show you what I'm talking about uh so this one is going to be a menu driven program for uh choosing between addition and subtraction so let's say I'll do and then inside this I'm going to ask for your choice so uh choose one for addition and two for subtraction and I'll be getting a number so in Choice let's call it and then C in choice and then now I can switch the choices as I told you so I can use either switch case or if else I will go tape files because I have only two numbers to compare so if Choice equal to 1 then what you are going to do is you are going to ask for two numbers so enter number one and I'll get a number in n1c in N1 and the same thing goes for number two also and 2 and 2 and over here number two uh well we can actually put this thing outside because for both addition and subtraction since we are dealing with only two numbers I'm just going to put these things outside because it really doesn't matter whether the choice is one or two right we are anyway going to ask for the two numbers for age of addition or for subtraction only thing is the which is going to changes our print statement so I'm just putting it outside the conditions over here and then if charge equal to 1 what we need to print is we need to print the addition or the sum so since I have only one statement I'm going to skip those curly basis and then uh the sum is we can directly print the sum or you can even store it inside one of the variables and then print it I'm not going to do that and the same goes for the difference also right so if Choice equal to 2 then you print the difference so difference is N1 minus N2 and over here charge equal to 2 and you can use else if over here so instead of checking if you put two if what will happen is it will first check for this and again check for this but if you put an else if what will happen is if this condition is satisfied it won't check for this one so or if you have a hierarchy of conditions so if you have 10 conditions if the second one is satisfied it will directly skip to the next iteration so what what happens over here is if you put all ifs or all 10 ifs even if the second condition is satisfied this is going to check for all the 10 conditions so else if it's a better choice when you have two distinct choices right so now after printing this what we are going to do is we are going to ask for the user whether he wants to continue or not so do you want to continue foreign so now once you take the character what will happen is it will be limited to the scope so if I write something like care let's say can and then scan stands for Content I cannot use the word continue because it's a keyword I will be talking about that shortly let's just say Khan means continue right so now if I just taken Khan what will happen is this particular variable will be limited only to this scope the highlighted braces which you are seeing here so if you want uh to compare that that is not possible right because the while which we are riding is outside this one right so while we write outside this body of the loop so we need this variable to be accessible outside the body of the loop so we don't want to access it outside everything else right we don't want to uh access this variable outside everything so what we are going to do is we are just going to put this Con over here inside the main function so what will happen is it will be limited to this main function but since we are not dealing with other functions we are just uh using this particular one as a function variable that is it belongs to this particular function and then it can be accessed from anywhere in the function since this y also is inside the function it can access this continue variable now if you return it over here it could not have access to it so now we are going to do it until he says no or till he keeps saying yes both are equivalent statement you can do either con is not equal to s or you can say or sorry con is not equal to no till then you need to continue or else you need to continue till he keeps saying this so both of them are right you can do either one of them and now if I execute this so he's asking for the choice I'm going to say one enter number 1 12 12 so the sum is 24. I want to continue yes if I put 2 and then 12 12 so the difference is 0 and now if I press n it is going to stop so now you see uh how the do I look can be used so in if you are using the four or while loop that is also possible but it's quite clumsy to implement uh as compared to this particular do while loop so now let's talk about the jump statements I clear this we don't need this so the first jump statement we are going to look at is continue so what continue does is it will skip a particular iteration so let me show you an example so for entire equal to 1 is less than less than or equal to 10 and I plus plus and inside this loop I am going to print something let's say let's just print type right and then a new line also now you know the output right it's just going to print all the numbers from 1 to 10. so now what I need is I don't want the value of Phi to be printed in the output I want all the numbers except 5 so one way you can do is you can do something like if I is not equal to 5 then you print all these things so this is also one of the ways to get the output what I actually uh said so here you can see all the numbers are getting printed except file but in some scenarios where uh what we need to do is when instead of writing everything in an if else Loop we can directly skip the statements if that number is not 5 right sorry if the number is 5 we what the mean is if I have some set of statements over here so let's say um we have this one uh statement one and then I have another statement over here so statement two uh let me add a new line over here so that you can differentiate so after every uh I there is going to be a statement one in statement though but if I want that all to be executed only when I is not equal to Phi what I need to do is I need to put everything inside a particular inside the body of if Loop right so I need to do something like this and then here so inside this body of the if loop I am going to get all these statements printed only if the number is not fine the easier way to do is what we can do is we can skip those statements right so if I is 5 we can skip those treatments so the way you skip the statements is this stage as it is but once I equal to 5 what I am going to do is I'm just going to hit continue so what this will do is if I is equal to 5 it won't care about the next statements it won't care about any other statements inside it is just going to skip the iteration and go over to the next one so this is true with every Loop so even if you have the continue inside the if and then you have some statement over here let's say uh continue is triggered something like this so this statement won't be executed at all the once the continue is encountered it is directly going to skip everything and just going to the next iteration so now if I execute this you will be getting the same output okay I did not put this yeah now if you see I have one two three four and then Phi did not print anything at all and then six seven eight nine ten right so that is the use of continuous statement it's just going to skip the statements once it's not required so every statement is skip so next thing we are going to learn about is break break is almost same like continue what it does is just going to break or continue it's just going to skip the iteration it is just a break is going to completely skip the loop itself so once break is encountered it's just going to come outside the loop so if I write something like um the loop has executed this is outside the loop right so this particular statement is outside the loop and now if I execute it you will be seeing that all the statements are printed only up to five once Phi is encoded it has directly broken out of the loop and then it says loop as executed so that is the use of break statements so you you have encountered the break already right and switch case so this is what happens once a case is satisfied you are just going to break out of the whole switch case if you don't break out what is going to happen is it's going to follow all the statements which are associated with every switch case below that order so the next statement we're going to learn is about the go to statement so what go to is it's basically a connecting kind of a thing so you have a label so let's call something like let's call it label and then you have a set of statements inside this label so you have C out uh hello and then see how so you have these two statements right uh let me just add a space over here so these two statements are going to be printed side by side I don't have a new line over here so now what will happen is I want to execute these statements again and again when I press something so remember the do value we can do the same thing with the go to statement also it's not exactly a loop but it can act like a loop so let's say I have some variable over here let's call it int I so I so I'm going to take in I and then if I is equal to let's say some number let's say 12 or 7 something like this so if I use this particular number I want the whole thing to be executed again right so what I will do is go to this particular label what this does is it will directly switch the control from here to directly over here it will directly go from here to here or you can go from here to bottom also it can go from this particular place to any place in the whole program or in the whole function you can uh directly skip all the statements you can either go backwards or even forwards it completely depends upon your program but here what will happen is till I press some other number except seven this whole statements are going to be repeated again and again so once I press enter you are saying welcome to programming knowledge I press 9 enter so here you see it stopped now if I press 7 it's going to continue again and again so let's say 7 enter you see the same set of statements have executed seven seven till I press seven it's going to repeat and then if I press something else it's going to stop so that is about the go to statement and then you have another statement called exit statement so what exit does is it directly breaks the whole program your program is going to end but it's not a function directly so you need to have another header file to execute it so that header file is known as the standard Library header file so it is stdlib which stands for sandal library but it's a c header file so it's a name and C plus plus is cstrb so you need to type cstdlib so this is a header file and inside this you have the exit function so let's say I want to exit right after this one so I'll just press in exit one means exit with an error and Exit 0 means it's just going to exit without any error so let me show that if I execute this you can see it just ended with return 0 that is the exit code which I passed over here so it went on without any errors but now if I press one and exit so here you can see process returned one that is the exit code so one main sum error right so here you can see it's terminated with a status one that is red color it means that it Terminator are normally from this video on which we'll be looking at functions in C plus plus so till now we have been using only one function right that is this particular main function whatever we have been writing we have been writing inside this function and then we have been executing it so from now onwards we will be understanding how to work with multiple such functions and how you make your program much more efficient and readable so first things first what is a function so if you remember your basic math classes you have come across something like y equal to sine X or Y equal to X Cube x squared so all these things are functions right so if you look at the mathematical definition of a function what it says is it will take in a set of numbers and then it will map every element in that set with exactly one element in the other set so if that is confusing what it basically means is it it can take n number of things inside this uh definition that is if I am defining a function as y equal to some f so inside this I can take as many elements as possible but the Y is going to be only one value so it can only compute something it can work on the mathematical operations and then it will give you exactly one single output for y so if you look over here so y equal to sine X there is a series of sine X right so it will it will be something like 1 minus 1 1 factorial something like that so that computation is done on this particular X and then that only one value which is in the range of minus one to one right so minus one to one inclusive that particular value is written to Y so if you take an x square it is going to take some number X and then it is going to do some computation that is it is going to multiply itself and then it will return back your y so this is again only a single number so again if you take the equation of a line let's say y equal to MX plus C where m is the slope so here again I can define y and two or three different ways also so one first base let me write it down here first way is that it can it is going to take only one input that is y equal to f of x so where uh let's say f of x is going to return MX plus c and the other way is you can say y equal to F of let's say G of M comma X where it's going to take in the value of M and X where C is already defined inside the function and it's going to return you MX plus C right the other way is y equal to H of let's say m comma X comma C I'm going to take all the values and I'm just going to compute that so that is why where uh sorry over here it is G of X and H of this particular sorry this is M comma x h of M comma X comma C is going to be MX plus C so uh don't worry if it is really mathematical what I am trying to say is it is it can take multiple inputs but it is going to give you exactly one output so in this case it's going to give you exactly one number right that that is the y coordinate of this particular line if you're given the x coordinate it's going to give you the y coordinate or vice versa you can and Define it the other way too so that is exactly how functions work in programming also so let me write it down here in programming a function can take multiple inputs but it can give you only one single output input is basically it could be 0 as well as n number of input you can either give it something or it can perform independently also that will depend upon the function you are writing so enough of the definition of the function now let us look at why do we need functions so here I have a basic program we don't need this I'm just going to delete this and here we have a basic program to add two numbers right so what if I say that I want to ask the user for you know adding these two numbers let's say some 10 times at first you would say you need to copy and paste this thing 10 times now as you are well versed with loops what you are going to do is you will be putting these things inside the loop but if you look at this this is about let's say it's a nine liner code right so if you make a loop the loops body will contain nine lines of code so let's just imagine it's not such a simple program of adding two numbers it's something more than that and what if you are going to solve a particular problem which say which contains let's say 100 lines of code so if you're giving that code to me I won't understand what you're doing right so at the first glance I won't understand what you are doing and then I need to spend some time and then I need to understand everything I need to understand how you are using the variable bills and all and then I will be able to develop on that and the second thing is you will be writing a lot of redundant codes let me put this inside a loop next menu so let's say is less than 10 and I plus plus and this is a loop body right so it starts from here and uh ends over here so here this things are getting reinitialized again and again and again highly inefficient and then this particular competition is going on so basically this looks clumsy and it decreases the readability and then it will drastically increase the redundancy of the code so by using functions what you will be doing is you will be asking these 10 lines to be executed in a separate kind of environment where once the job is done you will return back to this particular environment so it's not exactly an environment but it's actually switching your control to some other thing right so it's like working in a team so instead of doing everything by yourself you will ask your team member to do something else for you right so that is how you use functions over here so let's now talk about how to work with functions how to define functions in CPS plus so in this video we will be just looking at one definition of a function the subsequent videos will be exploring more on these so a very basic implementation of function is that it won't take any inputs and then it won't give any output right so that is a very basic implementation of function so how you represent number of inputs and number of outputs and how you define a function as in this way so first thing is you write the return type of the function so what is a return type return type is basically what data it is going to give out after performing the job so if in case it's not giving anything you have a data type for that also right so remember from the data type video it is void so if you don't have anything to return you are just going to mention it as world and if you have anything to return you are going to put it as it so here now if you have a question why this particular main function is end if we execute this code you will be getting some code over there right so if you remember let me just quickly execute this code if I build and run this so let's say 12 12 and then 24 okay I'm executing this for 12 times 10 times let me just remove this particular Loop and then this one also I'll equal so here if you see it it returned with some code right that is zero so that is from this particular main function so that is why you were first writing return zero remember when the code block gave you the template code it had this return 0 over here so in case some anomaly happens while execution it will give different return codes that is 1 or something like that so those codes mean that your program did not end correctly if it successfully reached return 0 it means that your code run successfully and then 0 means no errors so that is why we uh use this written zero so even if we omit it from this particular main function it it does not matter because main is designed to return 0 when it's successfully executed for our functions we need to definitely return something if we put some other variable type I mean the return type except void so if you write something like int let's say add or float add or whatever it is if you write some other data type over here you need to return a data of that particular type to the function which is calling it right so that will be looking later so first we will understand how to work with functions which takes zero inputs and then zero outputs so let me write it over here it takes zero inputs and then oh zero input and zero outputs right so output I mean the returns so it it is going to give some output I'm just going to put everything inside the function so it is going to give you some output output as something on the screen return is something where you get back something right so like y equal to f of x you are going to get some value of y right so I'm what I'm doing here is I'm just calling f of x I'm not giving any y to that so I won't get any value back but I will get the job done over here so here for zero inputs I need to put y because I'm not going sorry for zero returns I need to put void because I'm not going to give out anything to the function and then for inputs I'm just going to leave it blank right so you need to put the parenthesis this parenthesis is exactly the same thing as your mathematical parenthesis inside that course all the arguments you are going to pass in through arguments or the inputs you are going to pass through the particular function for which you need a particular output right so I'm not going to pass in any input for now and then the way you Define function is you put this block right so notice that I'm writing the function outside this main function because this is a separate function and this becomes another function so if you can write inside this particular main function also but that is a bit clumsier and it has its own problems we will be talking about that at a later stage so for now we are going to write all our functions outside the main function right so you need to give a meaningful name to the function right so I forgot to mention about this this is the function name so you need to give some name which says what the function is doing you can't just give something like let's say x y z so something like that so you you yourself won't understand what you are going to do with that particular function so you need to give some value name so that you understand what that function is doing and it has some meaning related to what it's actually doing right so now what I'm going to do is I'm going to just cut everything from here and then put it inside this right so what it means is if I call add all this function all these statements are going to get executed right so how do we call that function we don't have any output right so I can't call something like y equal to add right because I'm not giving any return types I'm just uh putting it as white void means once the job is done it will go come back over here without returning anything returning this it's just going to give you some value right so it's not going to do that it is just going to continue with the flow so I'm not going to mention anything over here but just call add and then put a semicolon over here so notice this is the this is called the definition of the function so that is uh let me write it over here function definition and this one is called the function call right let us look at the execution it's going to do the same exact thing it is going to ask for two numbers and then it's going to return with the output so now if you look at the main function it's much more readable right you understand that you are actually adding two numbers so if we just look at this particular code it will be easier for you to understand as well as debug let's say you are writing a very big program where a particular part had a mistake and then instead of tracing the whole program you could actually trace the only this particular part of the program right suppose let's say I did not write the logic properly I put minus over here and once I execute I will get to know that instead of adding it is actually subtracting so I'll come back over here I'll just change this particular thing and then the job is done it is error free right so that is why we use functions and this particular approach is actually called procedural programming so what we are doing is we are dividing um our particular problem into procedures so procedures are nothing but functions and then we are actually solving everything on its own and then we are actually combining everything and then giving out the result so that is what procedure programming is and that is how we use functions in C plus plus so now if I just remove this particular thing and then put it over here right after the main function now what will happen is if I try to execute it you will be seeing that I have an error so what is that it says add was not declared in the scope what it means is that this particular ad it doesn't know that there is something called add in the particular program because add is defined by us right it is not a property of the compiler it doesn't know what address we actually mentioned that we are going to use something called add and add means you need to do all these things right so actually tells something like that you can either Define the functions before the main so that is as I executed right now another thing is that you have something called the Prototype process function so what a prototype message you put the return type of the functions and then the function name and then inside a pair of pencils the parameters list whatever you are going to use as the parameters for the vertical function and then you put a semicolon so it's just like uh popping this particular thing and then pasting it over here so one thing is that is of parameters you don't have to write the variable names to but since I have not discussed about the parameters I will be discussing about them in the next video so at that time we will be seeing that in the Prototype of a function we don't have to actually put in the variable names too we just have to put in the data type so for now we are not going to have any inputs right so we're just going to put this over here and then put a semicolon over here so what this does is it is called the Prototype and it will tell the compiler that hey I have a function called add so whenever you have an ad over here you need to refer to this particular add function so whenever I have uh something called add over here I need to refer back to this particular function which is actually the body of that function the definition of that function so whenever ad is called you need to execute all the statements line by line if I now execute it I will be getting an error free program so I can write something and then I'll be getting the output in the previous video we saw how to create an independent function right so this add function right here this is an independent function all it means is it is not going to take any inputs and it is not going to return you anything it just performs the task which it has to do when called that's it so in this video we will learn how to create dependent functions most of the time we'll be using dependent functions we will be using these kinds of functions also but these are very rare we will mostly use dependent functions we just pass it some parameters we ask the function to do something and then get back the value which we intended to so uh how to make this particular function dependent that is I need to pass in some parameters over here let's say 2 comma 3 and then it should only add these two numbers it should not ask the user to enter two numbers and then only work on those two numbers I want to work on these two numbers which I passed in as parameters so how do we get these two numbers inside this function so the way we do that is we Define the parameters the way we Define parameters is we first put the data type of the parameter and then the name right so in this case uh the data type would be end and then the name of the parameter let's just say num1 right and then we have another integer so if you do like this like you declare variables sometimes you do this right so int a comma B well this is going to work only if you are declaring variables here you are not declaring variables here you are specifying the parameters right so while specifying the parameters it is compulsory that every parameter be mentioned along with its data type so you need to mention the data type of the second parameter also even though both the parameters belong to the same data type you cannot omit the data type of the second because it's just a continuation of the variable declaration now what we are going to do is we got the two numbers inside this and we don't need any of this right I'm just going to take out these things and then here instead of a plus pu those two numbers are number and num2 so you take num1 over here and then num2 over here and then it is just going to print out the sum so let us execute this and see so 2 plus 3 is 5 so we should be getting the sum is 5 as our output so here you can see the submissive right so another thing you can do is if you want to save this particular value that is if I want to add these two numbers and then keep the result there is no way to keep the result right well C contains the result of num1 plus num2 but C is not accessible outside this function right and is one function and then main is another function well if you want to access this particular variable you need to make it Global that is you want you have to put it outside all the functions and then access it if you remove this then now C is accessible over here you could just say CLC over here and then if you executed here you can see it has printed the value of C but what happens is we don't prefer this kind of global variables the reason is that when whenever the program is getting executed everything is inside the ram that is the random access memory so once variables are out of scope they are automatically deleted and then again created whenever the time comes you need to free up the memory so that other tasks can go on right you cannot just keep this particular variable in the memory all the time so if it is compulsory that you need to keep it then you can but if there are other ways to do that without occupying that particular memory you need not do this because it takes up memory right so the way we do that is we return this particular value back to the calling function so what is written how do you return something to the calling function well the way you do that is you just need to put the return statement over here so you just say return C now instead of creating a global variable like I did before you don't have to actually create something and put it in a memory once you have executed it you can just return that particular value over here so that is the main objective of this add function right you need to take in two numbers add it and you are going to get one integer unit just return it so if I say something like a equal to or let's say sum equal to add 2 comma 3 uh what to expect is these two numbers are added on the sum is coming to this particular variable that is sum right so here if I return it I'll be getting a problem so if I now execute it uh you will see that I have got a problem it says Okay C is not that's because I have written over here uh now let's again run it so here you can see that it says return statement with a value in a function containing void right returning void so as I told you before if you are not returning anything then only you need to use the void keyword or else you have to specify the data type what you are going to return so since I'm returning something I need to specify the data type and in my case it's going to be it because if you add two integers it's going to be integer right so I'm just going to return that particular integer and then here I need to capture that value so let's say In Sum equal to 2 comma 3 and then now I can do this thing inside the main function also so here I will just paste it and sumness in my case sum right now if I execute it we'll be getting the output as the sum S5 so another thing is what if we want to make one of the variable optional so let's say I have another field Also let's say in num3 this is another parameter so here if I just omit that parameter I'll be getting an error so here you can see that too few arguments to this function that is because I have specified three arguments and then here I'm giving only two arguments so what you need to do is if you are having an optional variable you can just put a default value over there so for addition if the default value is 0 if you add those three numbers there's no there's not going to be any difference right so if you just put 0 over here and then I don't pass anything so it will just do six plus two so let me just add the number over here so so num3 also so I'm just going to store c equal to num1 plus num2 plus num3 and then I'm going going to return C so now if I execute it you will won't be getting any error and you will be getting the sum perfectly and if I want to use that variable I don't have to do anything I just pass the number and I will be getting the output so 9 8 is 17 so here you can this sum is 17. so that's how you use default parameters and regarding the Prototype so what is a prototype it is just mentioning the compiler that I do have a function like that in case you did not write the functions definition before calling it so whatever means I have already called this function over here so if I write the definition after calling it I need to specify it or it says that this particular function does not exist so to do that the for the Prototype as I told you you can directly copy paste this thing so Ctrl C and Ctrl V and then put a semicolon this is going to work but what you can do is in case of parameters function you don't have to write the variable names also so you can just skip these things well it's going to work with the variable names also but uh you don't have to put them and you should not pull default values over here so that is there in the function definition in the Prototype you just need to define the structure of the function and you don't have to put the default values and all you just need to put what the function is and what it's going to take and now if I execute it I won't be getting that any error and I will be getting the output so that's how you use dependent functions in C plus plus in the next video we will talk about recursion and different types of passing arguments so here I just pass some numbers right so these are direct numbers so what if I want to pass some variables also so let's say a equal to 2 well in this particular case you can just pass it over here it is going to work well it's int a equal to 2 it is going to work but actually there is a meaning for passing like this there are two methods of passing variables that is passing by value and passing by reference in this video we'll be looking at different methods to call functions in C plus plus so now the question is why do we need different methods to call functions why calling function simply like this won't work always so to answer that question let us take another problem so let's say this time we need to write a function to swap the values of two numbers so what I mean is if I now print a and then B like this what I will be getting as my output is to comma 8 right because a value of a is 2 and value of piece 8. now what you want to do is I want to call a function so let's call that function something let's say uh swap nums so I want to call this vapnams function by passing in a and b i and then here if I then print this particular A and B's value what I should be getting is I should be getting 8 comma 2 that is a is holding the value of B now and then B should be holding the value of a now so let us first try to solve this without a function so to do that first of all we need a temporary variable because once we overwrite a value uh it's gone right so I want to preserve both the values so that I can reassign them so let's say uh pin temp will hold the value of a and then I'm going to reassign the value of a to B and then now since I need the value of a it is already stored in temp the previous value of a so that I can just put it inside the B right so now if I now execute this particular code I will be getting my desired output so now a has become 8 and then B has become 2. now what if I want to Define this as a function so since we are not returning anything it's going to be void right and then uh those two parameters remain the same the name of the function is web nums so swap underscore nums and then this is the logic which goes inside that so control X and then return goes away and then here we have that particular logic so now if I now call this particular function and then try to execute this particular code you will be surprised that nothing happened over here it still is to commit a s value did not change neither did B's so now why did that happen that is because this A and B are not the same ones as this A and B these two are different variables actually even though the name of the variable is same but this particular variable which I have defined over here all the set of variables these belongs to this particular function that is the swap nums function and these two variables belong to this main function so I cannot use this particular variable here or this particular variable here so if if I try to print the values inside this that is uh if I print out a and b inside this particular function it will be swapped over here that is these two A and B are actually so I am not this A and B so to differentiate that let me just put a function over here so that we can differentiate the output of our function from the main and then I will even add an end line over here now if I execute this code so here you can see that in inside the function A and B got swapped correctly that uh a got the value of 8 and then B got the value of 2 but I'll check the function in the main function it did not happen so how do we solve that particular problem well to change these numbers directly or one way is that we can declare declare this as Global variables that is outside all the functions so that this will be always present in the memory but that is as I told in the previous video it is completely uh waste of memory so another way is to do that is we can directly change this particular variable by referencing it that is by going into the address of that variable every variable has addressed in the memory right we are just creating a location inside the memory and then renaming it to A and B over here so if we can access the address of this A and B we can go to that particular address and then change that particular value so in that way we won't be actually copying down this values inside new values over here and then working on those new values that is what is happening over here right once we pass in two numbers what is happening is these two variables are dynamically created in a member query and then these values are getting copied inside these values and whatever happens inside the functions happens on this particular local variables so variables which are actually called from the main function are not going to be affected by this function so whatever you do inside this function that remains local to those two variables only or those set of variables so to actually access the address of a location we need to understand a particular operator called the address operator or the reference operator or the Ampersand operator they are called in different ways so what it is is you just need to put an ampersand over here to access a address of a particular variable so now if I just execute it what you will be seeing is the address of that particular variable so here you can see 0x CD whatever it is that is the hexadecimal address of this particular variable that is a now B will have another address so if I now put B over here let me just close this and then if I now execute it so here you will be seeing 0 x 6 D whatever it is it is another address right both are at different locations so now what we are going to do is instead of passing the values inside this we are going to pass the address over here so that it knows that it needs to work on those addresses only so here instead of declaring variables like int a and then end B what I'm going to do is I am going to specify that we are going to get the address of a and b or any variable you can put X and Y over here it doesn't matter what what it specifically means is that you are going to get variables address and you need to work on that particular address only you don't have to create a new variable that's what this particular and means you can put any name over here it doesn't matter so now what happens is if I now call the uh function and then here if I just put this particular uh line over here so let me just replace this line and then uh let's say main right now if I now execute this particular code you will be seeing that in the function it got swapped and now in the main function also it got swept now a is holding the value of 8 and then B is holding the value of 2. so this is why we need different methods to call functions and basically there are only two methods to call functions one which we do always that is simply passing the values and then the other one is by passing the address so those are the two methods to call functions and they are actually named in that way only so one is called by value in which you just call using the normal method that is you just pass in the values over here and then the values get copied and then you get all the output which you required so this particular method is used only when you don't really care about changing the values in the main method or whatever it is the main particular value which are going to pass inside the function if you don't don't want to change that particular value but only want to do some computation with that value such uh functions are better to use that is called by value functions and when you want to change the value what you do is called by a reference so reference means address and the way you call by reference is in this way so you need to pass the ampersion symbol to specify that you are going to work with the address of that particular variable and not with the value of that variable so it knows that it doesn't have to create another variable and then copy that function but what it will do is it will directly go to that address and then carry out all the operations which is specified right so now instead of putting B and B over here I can even put B you can use combinations it totally depends upon the work of the particular function so since I had to change both the variables that is why I had to put and in both the variables if I want to change only a and not B now if you execute this function you will be seeing that a has changed to 8 and then B remains 8 inside the main function that is because I did not pass in b as an address but I passed in b as a value so that is how calling functions in different methods work and those two methods are called by value and call by reference in this video we will be looking at the equation so what is Recreation well the recursion is nothing but a method which we use to solve problems where if you manage to break that particular problem down into a set of simpler problems what you will observe is that those set of simpler problems are nothing but a simplified version or you can say miniature version of the main problem itself so let's take an example to understand it better so recursion so let's say we want to write a function called sum of N which will return us let's say the sum of natural numbers up to n so what you need is 1 plus 2 plus 3 uh up to n so this is the value which we intend to return When sum of N is called now there are different methods to solve this problem one is a pretty naive approach so method one is nothing but by using looping right so everybody is familiar with this kind of approach what we have is we have some variable to handle the overall sum and then we will loop from the starting value till the ending value that is from 1 to n and while going through each value we'll just add that value to the overall sum and in the end we'll just return the value of sum so this is one of the method to solve this particular problem and the other method is by using a concept of mathematics called arithmetic progression or AP well I'm not going to go into the details of arithmetic progression that's a very beautiful concept and I encourage you to look that up in the internet but for now what we are interested in is how we can get the sum of N terms in an arithmetic progression or in AP well uh the formula for getting sum of N terms in an AP is n by 2 times 2 into a plus n minus 1 times D so this is the formula for getting the sum of N terms in an AP again I'm not going to go into the details of this formula you can again go and look that up now a is nothing but the first term of the series so in here the first term is nothing but 1 so 2 into 1 and then D is nothing but the dormant difference between two consecutive terms in the series so we need to constitute the terms you can take and then you can see that the difference is one so we can just substitute it over here and if you solve this if you simplify this you will be getting this particular result n into n plus 1 over 2 so this is the result we will be getting after simplifying this equation now if you just plug in the value of N and you can just return this particular value you don't have to loop around and then keep another variable and all this stuff this is the most efficient way to solve this particular problem now we'll be looking at another approach to solve this particular problem no let me just clear this thing let's say we want to calculate the sum of uh some number let's say 10 so sum of 10. now what is sum of 10 it is nothing but 1 plus 2 plus 3 all the way up to 10. now we can also write this as 10 plus 9 plus 8 plus all the way up to one I just reverse this particular order now if You observe what if you upload this particular value what is this this is nothing but sum of 9 because sum of then when it goes from 10 to 1 sum of 9 should go from 9 to 1 so this is nothing but 10 less sum of 9 now again if You observe this particular value this is nothing but sum of 8 so this is nothing but 10 plus 9 plus sum of 8 so in a nutshell if you want to uh just generalize this you can say that sum of N is nothing but n plus sum of N minus 1. right and now this particular relation If You observe you are broken down this particular problem into a set of simpler problems and this problem is nothing but a simplified version of this problem so this is what is called recursion now before trying to code this thing we need to understand that recursion should have a limit now if you reach 1 so what will happen is it will try to find the sum of uh one and then here when it goes it will try to find the sum of 0 and it will go on up to negative Infinity right it will just go on and then once it reaches a stage where it has reached the extreme of the integer range or any data type you have kept over here it's going to stop and then it's going to throw you an error so the question should always have a limit so that limit is called as the recursion limit and it is really important that you should mention a requestion limit when you are using a recursive function the trigger shouldn't call or what you are doing is here you are just calling that function again right so this call should end somewhere so that somewhere is nothing but the recursion limit so now in this particular problem when you reach one you don't have to again call this particular value right because you have reached a saturation stage where sum of 1 is nothing but one so once you reach one you can just return one over there so the recursion limit for this particular problem is nothing but one so now let us code this so the return type is end and then the function's name is sum and then you have variable called n and here we what we need to return is return n plus sum of N minus 1 as I've just discussed before and before that we need to check whether we have reached a recursion limit or not so what is the recursion limit if n equal to 1 then what we need to do we just need to return one or else we need to return this so else written n plus sum of N minus 1 so that's all now we can just test this function C out sum of 10 and once you run this you will be getting 55 Sr output so that is the correct value of sum of N and that's how Recreation works now this is a very bad example to actually explain recursion because recursion is not generally used where it is not needed so the question actually takes up lots of memory so Here If You observe if I just call it with a value 10 it is going to again call this particular function with the value 9 and again 8 again 7 and so on so every time it calls a new value of n is created so what is happening is effectively if you calculate the space of a space required for running this particular problem uh so for n equal to 10 it is taking 4 into 10 bytes right 4 is nothing but 4 bytes which is the size of an integer and then 10 is because it's getting called 10 times so this is effectively 40 bytes of memory right and if you take the first case let me write this this is the third case right this is by using recursion now first case if You observe just by using looping what we are doing is we have three variables that is sum n and then I so it is nothing but 3 into 4 which is 12 bytes now that has drastically reduce the num size right and then if you now look at 2 it is nothing but only four bytes of memory because we are not having any extra variable we are just using n and then we are just plugging it into an equation to get the result so this is the most effective way and this is a better way and this is the worst way to solve this problem but since this particular approach is easier to understand I had taken this example mostly requestion is used where you can't figure out a generalized looping solution to solve a particular problem so that particular example includes uh something like finding let's say paternal ancestor of a guy so let's just take a family tree example well no just search for family trees in the internet and then uh let's take an example let's say okay this one so this one is like a tree so here you can see that uh this is let's say uh Tom and then Tom has a mother and a father and his father again has a father and mother and mother again as a father and mother and again that hierarchy continues now if you want to find the paternal ancestor of the storm what you need to do is I need to find the father or father or father or father that's what you need to find right now to find that what we can do is we can just reduce this problem to just look at this particular generation that is only one generation if you take this one generation what we need to do is we just need to move to the father so let's say we need to move to left side of this particular hierarchy because right side is Mother Let's just assume like that for now right side is always mother and then left side is always father so here if we just take this particular generation we need to move to the left side and again if you just break this problem down here if you take this particular generation we again need to move the left and this particular generation we again need to move to left and once we have reached a stage where uh that particular guy doesn't have a father then he's the ancestor right so this fellow let's say John is the ancestor of Kim so though in such cases the question will be useful so that's all for recreation in this video we'll be looking at a race so till now we have been working with programs where we already knew the number of inputs right so we knew the space required for our programs to work and all the stuff so let's consider a program where we don't know how many inputs we need to store so something like this this is a code snippet which is basically taking in record let's say Student Records so every student has a name and age and then the user gets to enter how many records he wants to enter and then we are going to take in the records now if you run this program uh you can see that the program doesn't crash right so if I say I want to enter three records it's going to take in three records so A1 B2 C3 so you can see that the records are taken successfully but if you look at this more closely you see that those records are not getting saved anywhere right those things are just getting overwritten every time now there is no way that we know how many records the user is going to enter right it completely depends on the user so how are we actually going to store all the records we can only store the last record in this way but all the previous records are getting lost right so how can we store all the data so that no data is lost and also we don't limit the number of records and the user gets to enter as many records as you want so it turns out that you cannot Define the number of variables or not the space you want at runtime but you can define a collection of space in one time so let me illustrate to you what I mean so let's say the user wants to enter some number of Records let's say uh five records so if you consider this white space as the computer's memory so what will be effectively doing is we will be creating collections of variables so we have two variables over here right so we have one name and then you have an age right so what you will be doing is instead of creating different variables like name one name two and so on we'll be creating a collection of variables something like this and then inside this collection what we will be doing is we will be separating this collection I mean we'll be creating partitions inside this collection so let's say the user wants to enter file record so what we do is we create a collection and then make five partitions into it so you have five partitions over here so all of them are obviously they are of the same size and then age also you will be giving five partitions so like this right so now what happens is once the user gets to enter the records you will be entering into that particular area which is assigned for every particular record so let's say for the first record you entered the data into the first box and then for the second record you enter it into the second partition so the third because you enter it in the third partition so and so on so this particular kind of process you will continue so that you can enter all the records and then you can also access this records by just accessing the partitions right so this is how arrays work well Iris literally mean collection of objects and that is what it means in programming too so what you are basically doing is instead of creating any number of variables you will just create this memory space which is capable of holding any number of variables and then create partitions into it so once you create partitions you can add data into it and then it you can retrieve it you can perform operations on it just like variables so basically you can think of array as a collection of variables but it's not actually a collection of variables it's just a collection of memory so if you take this particular array if you take the size of this particular array you will see that it is nothing but the number of elements inside it so in this case 5 into the size of each element it inside this so the size of each integer is four bytes so the size of this particular array is going to be 20 bytes so you can see that array is nothing but just a collection of memory or you can say collection of variables and then you can add and retrieve it as you like so let's see how to implement this particular ideology in programming so to implement an array what you need to do is you need to declare an array so how do we declare an array and see questions we don't have to do anything we just need to put square brackets so that this particular variable is addressed as an array by the compiler and then inside this particular brackets you need to specify the number of items the array should be capable of holding so in our case we are going to get the number of Records right so if you give n request you are going to have n names and N edges so the size of our array is nothing but the number of Records right so what you do is you just mention the size inside the square brackets so for the ah2 you are going to do the same thing so age records and then over here what we'll be doing is instead of name we will be accessing the partition now how do we access the partition of an array so for accessing the ith partition or the ith segment of the na or you can say the ith variable which is stored inside the collection you need to access it as the name of the array so array name and then inside pair of square brackets you need to specify the index where this particular index is nothing but I minus 1 so let's say you want to access the first partition of the array so for the first partition you need to give index as I minus 1 which is equal to zero so for the second one you need to give the index of 1 and so on so for the nth partition you will be effectively giving n minus 1 as your index so that is why if you remember I generally start Loops from 0 because it it becomes easier to work with arrays if you are working with Loops which are starting from zero because of this particular rule because the index of an array starts from 0 so I don't have to subtract one from the counter every time I can directly in Access the Partition by just calling the counter now to access this particular partition you don't have to do anything you just need to put the square bracket over here and then access the partition so since I am using a counter over here I'm directly going to access it by the counter and the same thing over here too okay now how do I retrieve it while retrieving also follows the same rule so you need to pass the arrays name and then the index which is nothing but I minus 1 if you want to access the ith partition so let's say we ask the user to retrieve some record let's say which record or do you want three and then the user enters your code so let's say nth record so he wants to retrieve the nth record so we'll be getting the nth record as our input and then what you need to do is you just need to access the nth record as n minus 1 is the same Rule and then for the name and then that goes same for the H2 so we just need to access it by n minus 1. and then if you run it so let me just put the N line over here so here you can see that if I enter some records let's say A1 B2 C3 and then if I want to retrieve the second record you see that the name is B and then the age is two so that's how arrays work that's a recap arrays are nothing but a collection of memory or you can say collection of variables where you can store and retrieve variables as you wish so now what all variations can you do with an array well it turns out that you not only can store collection of variables but you can store collections of collections too so that is basically the dimensions of an area so Dimension basically means collection of collections so basically if I'm saying that an array is one dimension so if I say that array is one dimension it basically means this thing that it it holds the collection now if I see that an array is two dimensional then what it means it it holds a collection of collections so how do we Define this we just put another pair of square brackets over here and then Define the second dimension so this is nothing but a matrix if you have to so if you are familiar with matrices you have some array of numbers right so one two three four four eight nine so if You observe this this whole thing is a collection and three such collections form this particular Matrix so how can you define this you can just Define this acid 3 cross 3 array right so if you say this particular thing as a matrix so let's say this this Matrix M which is equal to this thing so if this particular Matrix is this one then it is nothing but a three cross three Matrix right and the way it is defined in the memory is you have this particular collection where inside each collection you have three items so one two three is one collection four five six is another collection and then seven eight nine is another collection and all three form the overall collection so this is how your variable mat is actually defined in the memory well you don't have to always take in input inside an array from the user you can even Define the inputs so how do we Define it well to Define inputs you just need to put a pair of curly brushes and then Define your data so let me just clear this and we'll take some generic examples so let's say our array is a three cross three array so let's just Define that Matrix which we talked about so how do we Define the first we find an overall collection and inside this collection there are going to be three collections so one collection is one two three and then you have the second collection as four five six and then the third collection as seven eight nine so this overall makes three by three Matrix so if you want to access it you can access it using Loops so for end I equal to 0 I is less than three I plus plus and then you need to run another loop for accessing the inner collection so for n j equal to 0 J is less than 3 J plus plus you can just show that element so a of I comma J right let's just give a space over here and then a new line of flow so that it looks like a matrix now if I run this so I forgot to put a come over here yeah so here you can see how 3 cross 3 Matrix is defined well you can have collections of collections of collection so that is basically a three dimensional array you can go up to any dimension in a little small limit you can have as many collections of Collections and it completely depends upon your problem so mostly we tend to use this kind of collection which is the Matrix and then the single dimensional array which is nothing but just a collection of data well another point to note that is these collections cannot contain mixed data that is you cannot have both integers and strings in one array so in an array what happens is that particular array will contain data or will contain a collection of data of only that particular data type you cannot change the data type or you cannot have mixed data inside one particular collection so that's how you work with aeration C plus plus you can also pass in arrays to a function but always Aries will be passed as a reference not accept value so if you create a function over here let's say in funk um which just takes in the array so int a and then you need not Define the dimensions if it's just a single Dimension you can just leave it as a square bridge and if it is multidimensional then you need to define the last dimension of battery so let's say you are passing a threedimensional array so then you need to Define the last Dimension which is a third dimension compulsively you cannot omit this Dimension and if you are passing this particular array which is a two dimensional array you need to pass the second dimension which is three you can leave this or you can Define this it really doesn't matter but if you are passing some array which is not single dimensional then you need to pass the last dimension of that particular array so now let us just Define this function let's say uh we don't have to do anything we just uh print the first element of the array so a is 0 0 this is the first element and then what we'll do is we will change that element so we'll change a 0 0 equal to 5. right and then uh I'll just return uh some things let's say it will skip this return we'll just make this void so this avoid function right now if we call this function so if I just say func and then passion a and then we when printing the first element after running this particular function so let's just put n lens over here so that we can differentiate between the output so one over here and then one over here and now if I run this particular program you will see that the value of array 0 0 was 1 which is nothing but this particular element and then if I change that value over here I could change it over here too so in the main thing also it changed so that explains that arrays are not passed by value but they are passed by reference so arrays don't get copied when you pass them to a function but that changed in the memory itself so what you are essentially doing is you're just passing a pointer we will be discussing pointer at a later stage but uh what pointers basically mean is they are nothing but those are variables which carry addresses we will discuss more about pointers at the latest age but for now this is how we use arrays and C plus plus in this video we'll be making our first programming project which is essentially going to be a console based tictactoe game so in case you're not familiar with the game let me just quickly walk you through the game the game has a 3 costly port and two players who play alternatively so the objectives of the players is that they need to fill one of the roles or columns or the diagonals with their marker so if I just start the game with a computer you can see that we are playing alternatively and our goal is to just fill up one of the rows or columns or diagonals with our marker so here if you see the computer has managed to fill the row with its marker so it gets to win the game so we are going to implement this game on the console and well we won't be implementing such a sophisticated system where the computer can play although I will be giving the intuition required for building such a system towards the end but what we will be implementing is a two player game so if you go over here and then change this mode to play against a friend you can see that you make both the moves by yourself so we'll be implementing this but I will also be giving you the intuition required to implement a system which can and think and then make moves towards the end all right so let's get started so first uh create a new project naming Tic Tac Toe so the project title is Tick type 2 and let me just save it in my desktop and then click next finish so now we have our project with our source file all right so let me just uh make the text a little bit bigger now we'll start off by creating the board so there are different ways to implement this board you can think of this as an array of nine elements and then three of them are stacked together as a row or you can even think of this as a three cross three Matrix well I will be implementing this particular board as a three cross three Matrix because we can understand rows and columns better by looking at the indexes rather than the slots but you're free to implement it as a 1D array also that is uh by creating nine elements and then stacking three three vertically all right so I have managed to draw this implementation over here so what will be essentially building is a three cross three array like this and then these are the indexes and since we cannot uh detect Mouse clicks on our console we will be numbering our slots so let's say the user wants to enter his marker over here so the user can press 5 and then we will remove this five and then put marker over here let's say x so the 5 goes and then we put X over here so that's how we are going to implement it but there are other libraries which I encourage you to look up which support Mouse clicks on consoles too so in case you are interested to implement such a system where you can click on the area and then your marker appear so you can check out those libraries well discussing those libraries are well beyond the scope of this course so we are not going to do that so for now we will be implementing this particular system right so let's start off by creating the bowl which is a twodimensional character id so let's call this Arias board and then this is going to be two dimensional and every Dimension will have three three elements so this is a three cross three board let me just put it over here so even if you don't put it doesn't matter I'm just putting it so that uh we be clear with our implementation so let me just name the slot so one two three and then four five six seven eight nine so notice that I am numbering the slots as characters because if you put characters over there it will take it as an ASCII value I'm sure you know this right now let us quickly make a function to draw the board so let's say avoid the draw board and what this function is going to do is that it is going to draw the board neatly for us so something like this so uh these two vertical lines and then these two horizontal lines separate the rows and columns will be drawing that over here so you can use a loop but since there are only nine elements let's just hard code it so uh both 0 0 let us give a space before about 0 0 so that it doesn't get squashed up to the left all right both zero zero and then we have a space vertical line and then board a zero one space vertical line and then board zero two and then we have the next line because we just completed the row what we did is we just printed this row with these two vertical bars now we need to put a horizontal bar so uh let us just put that see how the horizontal wire is just going to be lines this is all completely designing you can do it as you want right and these steps continue for the next two rows two so Ctrl c b b and for the last row we don't need the horizontal lines and here you just need to change the road number so this becomes 2 this becomes one one over here two and two so now if we call this particular function let's just remove this and call drop board now if you run this we will be getting our boot so uh well the horizontal lines become extra how many characters are these three characters or more so let's just remove those three characters foreign so this board looks much better right so we have our Port ready now uh how do we put data inside this board so let's make another function to do that let's say void place marker which is going to take a slot number right because the user is going to enter the slot number now it asks us to convert the slot number into the row and column number right if you are using a onedimensional array that is pretty easy you just need to do slot minus one to answer insert that into the particular position right so suppose you want to insert it into this particular position and if you are using a one dimensional array this is the fourth position right because array indexes start from 0 so 0 1 2 3 4 and you just need to do slot minus one but since we are using a two dimensional array we need to find out a way by which we can convert this slot number into a row and column number so what we can do to find the row number is that we can use an observation that all the rows start from a number which is just one greater than the previous multiple of three so if You observe over here one is nothing but 0 times 3 plus 1 4 is 1 times 3 plus 1 and then 7 is 2 times 3 plus 1. so what you can do is you can get the row number by dividing the slot number by 3 but then again if the slot number itself is a multiple of three then you need to subtract one from the slot number that is if you take example of 6 so if you do six over three it is 2 right but we need it in slot number one so we need to subtract one from that so what I mean is if this particular slot foreign that is if the slot is a multiple of 3 then slot equal to slot over 3 so this is this and then minus 1 so this will give us the slot number else slot is directly slot over 3. so this should give us the particular row number sorry let us take a variable just at least changing the slot so if slot percentile 3 is 0 then rho is going to be this particular value or else rho is going to be this value now let us just see whether our row works correctly or not and let us just call it with Place marker let's say 8 right now if you run this you should be getting 2 which is correct right because 8 is in row number two now to get the column number you can do something similar to that so to observe the columns these are nothing but reminders which you get after dividing by three right so you can do the same thing so let's take another variable to store the column and column is nothing but slot modulus 3 so this should give us the reminder so if you look over here let me just pull up that image now if you say three then our row is going to be 3 over 3 and since 3 is a multiple of 3 so it is going to be 3 over 3 minus 1 which is equal to 0 and then um our column is going to be 3 modulus 3 which is going to be 0 but that is not our column we need two so what essentially we need to do is if it is a multiple of 3 if the slot is a multiple of 3 we need to put it in the end or else that particular logic will work all right over here what you need to do is if at this particular slot is again a multiple of three then our column is going to be two all right or every time when the value is a multiple of 3 you are going to put that in the last column and then you can divide this slot number by 3 and then get the reminder that is going to be your column number get the reminder and then subtract one from that that is because we are not considering the multiples of three right we are leaving the multiples of three so we need to subtract one let's say four so four divided by 3 you get a reminder one and then one minus zero is zero which is the column number of four okay so this is how you get the column number so uh let me let us just quickly uh rewrite this with uh fewer conditions so row is going to be uh this particular value right irrespective of whether slot is going to be a multiple of 3 or not if it is multiple of 3 we can just subtract 1 from this value so a slot modulus 3 is equal to 0 then rho becomes rho minus 1 and then column becomes 2 right this is only when the slot which you're giving is a multiple of three or else or let us Define the column before using it or else what happens is columns become slot modulus 3 minus one so first we perform slot modulus 3 and then we subtract one from that all right so this is how we can get the row and column from our slot number if you know check out the row and it will come over here and then column and then let us call with a so we should be getting 2 comma 1 which is what we got right because 8 is in the second row First Column we can try it with some multiple of three let's say nine and then try to run this we should be getting 2 comma minus one now why did that happen well that is because we are trying to modify the column even after it is getting modified over here right we are modifying the column when slot modulus 3 is equal to 0 and then again we are modifying it over here so we need to put it in the else part all right now it should work fine now let us just close this and try again uh if I press F9 so here you can see it gave us 2 comma 2 which is correct so now we know that our Logic for getting the row and column is correct so we can proceed by putting our marker into the board so how do we track which Market to put so let us create a global variable for tracking a marker let's say current marker and let us set this to some value or else we'll set it while we are asking we will set it while we are asking the user to choose the marker right and we will also have a current layer right so we need to even track the current layer to check which player is playing right so we have one marker and one player now what we are going to do is we need to just put Board of this particular row and then this particular column is going to be the current marker so now we have successfully placed it let's place a marker over here and then try to draw the board I'll we'll draw a board over here too so draw board uh and then we'll put a new line so that we don't get converted between the two boats so let's uh just uh say that current marker is X for now and if we try to run this you will be seeing that in place of nine now there is an X right so now we know that this particular function works we can place our marker on the board now let us make a function to determine who won the game right so let's call this function win or winner something like this and we will put the data type to care I will just explain why we are putting the data type to care right now so this this is not going to take anything this is going to work on the global board variable which is this which is an array right so what we're going to do is we are going to check all the rows the columns and the diagonals and see whether those have the same value of marker right so in case there are numbers they are going to be different so nobody won and in case they have this excess or Os stacked up horizontally vertically or diagonally it means that that particular layer 1 right so now since we are getting the winner we can either put it true or false to determine whether the game is one or not but to determine who won the game we need to again check whether that particular marker is an X or o right so what we are going to do in this function is instead of checking twice we will directly return the marker of the winner so by marker we can identify which player one and then we can congratulate him or her right that is pretty easy now so to do that let us quickly run a for Loop so in time equal to 0 I is less than 3 I plus plus and inside this we are going to check for rows first so uh if this particular Board of I and then 0 is equal to board i1 and board i1 is equal to board I2 then return the current marker right because uh we are going to check whether the player wins immediately after he places the marker so if this particular condition is satisfied then it means that one of the rules has been occupied by this current player so he's the winner and you can also check for the columns in the same Loop so what you need to do for the columns is the same thing but just the eyes get shifted to the second dimension so since I am checking the rows I am just putting I in the First Dimension for columns what we need to do is we need to remove the eye and place it over here so let me just cut and paste it and this goes over here and this goes over here so now we have successfully checked whether uh the rows or columns are filled for diagonals you can just hard code it since there are only two diagonals so if Board of zero zero is equal to board of 1 1 and board of 1 1 is equal to code of one two so what we are doing is we are essentially checking whether this value is equal to this value and then this value equal to this value if these two conditions are true it means that these three values are equal and it means that the player has one so if these three if this condition turns out true then the current layer as one current player or Mark oh since I'm using the player as a integer I need to return in not CAD so over here it is not current marker but current player you can return either of them right you can return current marker or current player it just depends upon you right so now we need to check this condition for the second diagonal so this goes and then for the second diagonal so coordinates are 0 2 1 1 and 2 0 so 0 2 one man Remains the Same and one one is equal to two zero then you return the current player right so now what if nobody won so you need to return something so what will return is we'll just return 0 0 means nobody won and if it is either one or two it means that player one is one or player 2 S1 so now we have the winner uh let's just create a arbitrary board and then check who won right so uh let's uh place these markers right place marker at nine eight and seven so it means that X is one so nine seven and then Place marker at eight and our current player is going to be one right now if you run this okay the spelling is wrong current player and if I try to run this so here you can see I have placed three x's over here now if I try to call this function which is uh winner and try to print the data over here so you can see that it has outputted one one is the current player who I just put three x's in a row so it works for row let's just check for column column is um let's say zero sorry one and then four and seven so this is the first column and we'll run this so it has returned one again and let's check for the diagonal so that is 159 so now you see that doesn't work for diagonal that is because we messed up the logic somewhere let's take that out oh it is not one two it is 2 2 over this right so that's a small mistake I made oh now if you again run this this should work now so here you can see it has outputted one and let's keep some arbitrary uh Place let's say 169 so this shouldn't result in a win so this should give us 0 which it gives so now we can say that our winner function is pretty much validated and it works right so now let us quickly make the interface we need so let's call this interface game all right and in this let us Define our current player and marker so we will give a choice for the player one to choose a smart girl and player to automatically gets the other marker so what we are basically trying to do is if the player the first player has a choice of playing X or an O right so that's what we're going to do so uh player one uh let's say choose your marker now you can come up with your own sentences over here it doesn't really matter so this will enter our current marker all right or uh let's just keep a player one marker uh let's create a character which says marker marker of player one so we are going to get this particular marker so marker here one now our current player is going to be one and then the current marker is going to be the marker which appear when choose right now if You observe this game right they can be at most nine moves for this game to end up in a tie right so in case somebody wins it's going to be less than 9 moves but if it is going for a tie it's going to be 9 most important so what you can do is you can run a loop till nine moves so enter equal to zero I is less than nine and then I plus plus and inside this what you need to do is let's first draw the board or what we can do is we can First Take input from the user and then draw a good so for the first time let us just draw the board outside Loop and then for the subsequent moves we'll draw the board after the slot is entered so we'll ask the player to enter the slot so see how it's clear and then which player is that current player current players um let's say turn so enter your slot now we are going to get a slot so in slot C in slot and you know what to do you just need to place the marker so Place marker in this particular slot and then we will draw the board to draw board so now if we run this particular board we'll just call the function game to play a game right so we'll just remove all this and then just say game over here so now if you run this what you will be uh getting is player one choose a marker is going to be X and then uh it's my turn so let's sit two now you see that the player is not changing that's because we did not write code to change the player and the marker we need to swap the players and markers right because the players and marketers are going to change alternatively and here you can see that the slot has been accepted perfectly and then the X has come in place of two so here you can see that it works and then if I win somewhere it is not going to stop and then it's again going to continue right so this game is never going to stop so we need to fix all these issues so we'll do that one by one first let's take care of the issue where the player and markers are not changing so let's create function quickly which swaps a player in marker so let's avoid uh swap player and uh marker so this is the name of our function so what it does is pretty simple if the current player the current marker is X then change the marker to O current marker becomes o or else you just change the current marker to X and this is just swapping the markers and the same goes with players so if the current player this one then current player becomes 2 or else Uh current player remains one so here we have successfully swapped the player in marker so once uh everything is done what we do is before drawing the board we just swap the player right so swap player and marker and this should do the job now let's test this so if I run this uh let's choose X now it's asking player Once you turn enter your slot let's say one and now player two Stern enter your slot if I enter two you can see that 2 is occupied by an O now so now I we have successfully created a system where the players are changing and the markers are also changing and now we need to take care of the issue that once we are winning it is not stopping right so we need to check whether somebody won or not so over here what we can do is we can create a variable for storing the value which this particular function returns right this winner function returns it's going to return a value in the range of 0 1 2 right it's not going to return any other value so let's just create a variable which shows the winners so let's say uh layer 1 this is the integer value and what we need to do is after placing the marker we need to check whether he won or not so player one equal to this particular winner okay and now here if this particular value which is player one is equal to 1 which means that player one one right so see how the player one one and then let's say congratulations and what you need to do is just break out of the loop because we don't need to continue the game after somebody F1 right so you can just break out of this Loop and over here the same thing goes with player two three right you if player one is equal to 2 then you says uh see out the same message just we need to change the player to and all these things remain the same so Ctrl C and Ctrl V and over here instead of one we just need to put two so in case nobody won it either means that the game can go on or if it has reached 9 moves it means that it's a tie right automatically if you're playing for nine moves and you make the ninth move and still nobody wins it's going to be a tie so what you need is if this particular winner condition which is player one is equal to 0 after completing this game then we need to say that nobody wins or let's say uh that is a tie game right so uh what this will do is if in case nobody wins even after nine moves and this comes out of the loop it will then say that it is a tie game right so suppose player one one and then it broke out of the loop then if you just put this particular thing without this if condition what will happen is it will print both the messages at once right so it will say player one one and then again it will say that that is a tie game we don't want that to happen that's why we have put a if condition to check whether it's a tie or not and then we will say it's versatile again right that will take care of all the issues hopefully so let's just try with o this time and its player once done so let's enter one two three so you can see it's filling alternatively and four five six seven and it says player one one congratulations but uh we cannot see what happened over here that is because we are not drawing the board immediately right so what we'll do is we'll shift this drawboard function before uh this particular winning condition right so what will happen is once I place this marker I will just draw the board so now if I run this uh let's say x and then one two three four five six seven and now you see that player one has one that is because this particular diagonal which I'm highlighting has been filled up by axis so player one one in case you fill it up with o it means that player two S1 and in case you don't fill it up let's take a draw keys uh let's say uh we play for nine moves so x uh let's just quickly put the numbers one two three so in case to draw we need to put five and then four six and eight seven nine right so now you can see that nobody has one even after nine moves so it says that is a tie game and the board is filled up so our game works perfectly for now right so there is a minor bug in this game for what what we did is so let's say I put my marker in the first slot right and now it is player two strand and what I will do is I will again press one so what will happen now is if You observe the X has gone and then o has taken its place it means I've just overwritten it right so we won't we don't want that to happen we don't want to move the markers away from the places so to fix that what we need to do is we need to check whether that slot is empty or not that is if that slot contains some character which is not an integer it means that it is a marker right and we don't want to change the smartphone so what we do is where we are placing the marker here what we need to do is we need to put this only when that particular row and column is not filled up so if that board and column a board of this row and then column is not equal to an X and it is also not equal to an O So Board of uh row and column is not equal to an o then you will be filling it up with this particular marker or else you won't fill it up right so let us return true or false over here and then we'll print the message over there so uh we'll make this Boolean or Bool and over here if this is the case then you first place the marker and then return true saying that this operation was completed successfully or else what you need to do is you return false over here and here once you are placing the marker where did we place it before placing it over here right so let's say Boolean status or you can directly put this in the if statement also right so if this particular condition is true then we don't have to do anything we want to print a message only when it is false so let's put a not over here so if not Place marker of slot that is if this condition is not true then we need to say um something so let's say that slot is occupied Tandon or try another slot so this particular message will print and then we need to decrease I by one that is because we need to uh give the player another chance right we can't just switch the players right there so we just decrease I by one and then we just put continue so that all these statements are skipped and then it goes back to the execution so let us just uh neatly against this indent this code so we print the message we decrease I so that the value of I remains same once continuous encountered right because if it is decreed decreased over here it will go back and it will increase over here so effectively the value of I remains same and it should work now and another thing is let's say the player entered some pretty big slot right let's say 100 or something so we need to take care of that too so if slot is less than nine less than one and if slot is sorry or if slot is greater than 9 we should not accept it so we need to do the same thing just the message changes Ctrl C and then Ctrl V and here you need to share that is an invalid slot right so that slot is invalid and then you try another slot and we just put continue so that the player doesn't change so this should do for us now if you execute this you will be having a functional tictactoe game over here so it's asking player one choose your marker it's going to pay X and now it's player one stone so one two three four five six seven so now player one one that's because of this particular diagonal and let's make player 2 also again so let's try it once again so let's say x again so now it is going to be one two three and then five four and then what is that state now you can see player 2 1 congratulation that is because I have filled up this particular column with OS right so uh in case you wanted to implement AI kind of a thing where the computer place you can do that well uh we are just going to implement a pseudo AI not the original one so this is not going to think much it is just going to randomly place it so in case you want to Generate random slot what you need to do is you need to include another header file called STD lib which is standard Library you can include this one or three stdi Library which is the C plus plus version of this C standard Library so these libraries are nothing but they are from C language so in case you're using it in C plus plus you just add a c over here to indicate that that this is C library right now to Generate random numbers what you have is you have a function called rank which will directly give you a random number right Sprint Rand over here and here you can see it just printed 41 onto the screen now if I execute it again you will see that the same 41 is over here if you close this whole program and then uh rerun it it is going to give you a different number but again uh till you don't remove this whole code from the memory it's going to be the same number again and again and again so to take care of that what you have is something called as a seed so for seeding the random functions reading is basically you will be giving different starting points to that random function to generate different numbers every time you call it so to feed the random number you call the function s Rand and inside this you put some number which constantly keeps changing right so let's say 1 over so let's say 10 over here and then if I try to run this you will be getting some other number let's say 71 over here and if I put some other number let's say 1 over here now and then try to run it you will be getting another number which is 41 but we can't change this again and again right we need a way to change this particular number which will generate different numbers every time so to do that we can use time right so time is constantly changing it is not constant so what you can do is if you pass in time over here as an integer it will give you different random numbers without you having to change this manually so to do that we need to include another header file which is called time right so see time right so same reason why we are using over here it is time.h or C time both the same and you go over here and then what you do is instead of one you just pass in time and then pass in null as a parameter we'll talk about this null when we are discussing pointers but for now just remember this is the syntax and this is how we call the function for time right for getting time as an integer now if we run this you will be getting different uh numbers over here every time so this is 9170 if I execute it again you will be getting some other number 9187 right so to Generate random numbers in a Range we want it in a range right we want random numbers between one and nine so to do that what you can do is you have to use a formula there is no direct way to get random numbers in C plus plus in a particular range but what you can do is you can use a formula which states that if you want random numbers in the range of U to L right which is sorry L to you which is nothing but lower range to Upper range what if you want random numbers in this range what you do is run mod U minus L plus 1 and then the whole thing plus L well this formula does look pretty clumsy I know that but if you try to reduce this you will see that it mathematically means the same that the lowest number will be L and then the highest number will be you right so you just remember this formula to Generate random numbers within a range so in our case what it's going to be is upper range is 10 and then the lower range is one right upper range is not included so value for this notation it is mathematically this which means that the last number is not included but the number till the previous one is included so it becomes 10 minus 1 plus 1 and over here the upper radius one right so now if you do this over here if I try to print this value over here you will be getting numbers which are in the range of one to nine right let us put a semicolon in the end and we don't need this so we'll just remove this so every time we execute we'll be getting some random numbers which is uh in the range of one to nine right so here you can see that it's giving us different numbers in the range of one to nine so now what we can do is we can use this and instead of the second player what we'll do is we'll just uh ask the computer to generate some random slot number and then place our marker over there and then instead of 9 now the loop will run only for four times well just because uh the number of times the loop should run is halved right we are not going to take in inputs for nine times we are going to take it in input for four times so we need to just run it for 9 over 2 times which is 4 that's an integer Division if you want to implement a really sophisticated system like the one which Google uses right this one which can think so if you take this impossible level in this particular game and then try to play with Google you can see that you can never win right it will either end up in a draw or you lose right now there is no other outcome in this particular you cannot win that is for sure so to implement such a system there is an algorithm called as min max algorithm so you can try to study about this min max algorithm so sorry it is min max algorithm right so you have this particular algorithm so what this essentially does is it will take combinations of games right it will play the game with itself and it will score every game so let's say we have an arbitrary game so let us just clear this let's say we have an arbitrary boot so I have an X over here and over here and then another X over here and over here and then the computer is playing X so it has to make the next move so what it will do is it will try out all the possible boxes which are unfilled right and there are different outcomes for that so one of the outcomes is let's say I start off with this board so let's change the color so let's say I put an X over here now there are different ways to put oh I can either put one over here one over here it is up to me right so every possibility will generate a new set of boards which the computer will play itself right in the memory and then it will score its outcomes so let's say in in case it put X over here and then uh for the first case you put over here and then it turns out that after playing such combinations it turns out that if you put X over here you have uh let's say 10 combinations out of which you won five combinations right so this is one of the slots now what what it will do is it will keep the statistics and Again Play it with the next lot which is empty so what we'll do is it will just remove these things and then it will play with let's say this particular column so it will put an X over here and then again repeat the same process it will see all the combinations possible and then let's say in this particular column which I marked with red there are again let's say 10 possible outcomes and then it one or seven of them right and let's say it played over here let's take some other color let's say this one so it played over here and then in this again there are 10 possible outcomes and out of which it could win only two right and you have another possible to over here or in which 10 possible outcomes it could not win any one right it lost all of them so it won zero now what we'll do is it will see all these scores so here it has 70 probability right so if you are winning seven games out of 10 it means you have seventy percent probability of winning and here you have 50 here you have zero percent probability and here you have twenty percent probability so it will check the one with the most probability or the most score so if you take into if you talk in terms of numbers here you have Phi here you have seven zero and two right so it will take the number which is maximum that is this one so it will say that if I put my marker in this particular place I have more chances of winning so it will place it over there so for every move it will calculate all the possibilities and then place the best move and that is how this particular Google is using that particular algorithm to make its decision so that algorithm even though it is called something else it is actually requestion so if you look at the implementation it is basically recursion which is being implemented right so tictactoe if you just search for that you will have many uh different uh resources to check that out so you uh check that from one of these resources so what you will see is it is basically implementing requestion it will just go over the boards and then try to implement and then you have a scoring method so uh I think they have used plus 10 as a score we have used plus one over here right where if we one you just put one over here if you don't win you just put minus one it means that you one and 1 means that you do so and you don't want negative scores right we just want positive scores so this is a bit of complicated stuff if you don't understand uh I don't expect you to understand at this stage but I would definitely recommend you to check that out and try to implement and this one you can try to implement by reducing the number of Loops over here and then creating another function so that the AI chooses what slot to put the marker in so in this video we'll be looking at pointers so now water pointers well as I had mentioned before pointers are variables that store addresses now why do we need a variable to store an address well if you have looked at the address by using the Ampersand symbol let's say we have variable called where and if we want to check the address of this variable then we do an ampersand where so that we get the address and once you run this you will be seeing some hexadecimal value right so this doesn't really make sense and why do we actually need to store these addresses what is the point of that so to answer this question let us take the problem which we were solving while discussing arrays right so the user has some records let's say n records and then the user gets to enter these records and we need to store all these records now let's say the user doesn't really know how many records he has now our program will terminate after taking number of Records right so that number depends on the user if he says he is going to enter 10 records we will create a collection something like this in a memory which will have the capacity to hold only 10 records we cannot increase the number of Records once memory space is defined so how do we solve this kind of a problem where the user is going to enter data and he doesn't know how much data is going to enter but we are expected to store that so to solve this issue what we use is called dynamic memory so what we do to solve this problem is we have a special data type defined and this data type does not belong to any one of the primitive data types right this is not an in float care or something this is a collection of data types combined as one data type we will discuss about how to generate these kind of data types in the upcoming videos but for now let's just focus on how this works so you have a data type like this where one of the data which this data type holds is a pointer now what we do is we will put data or we will generate a data which contains the records and then we will just randomly throw it in a memory so let's say this is one of them and we just randomly put all the data somewhere the memory and to keep a track of the records what we do is we will just keep a track of this particular record or this particular data now what we do is we will just link all these data with the pointers now this pointer will hold the address of this particular data and this will hold the address of the next one and this will hold the address of next one and so on so what I've discussed till now is nothing but an implementation of something called as a linked list right so or more specifically this is called a single linked list so we won't be implementing this particular data type in our programming right now because you don't have the intuition to Define such a data structure which can hold multiple data types we will be discussing about them later but I will definitely show you how to implement a preimplemented data structure called list in C plus plus in this video so first let's discuss about pointers and how to use them and then we'll look at this particular implementation the implementation doesn't really have anything to do with pointers but this is how this particular data type is working in the memory so if you want to implement something like this from scratch you need to understand how pointers work right so let's get back to pointers so to create pointers what we do is we just name the data type of the pointer and then the name of the pointer let's say PTR and then before the pointer we put a star so so the star indicates this this particular variable doesn't hold a value but will hold the address so this is how we declare pointer and we can just store the address of this particular variable over here so you can either do it like this so you can say PTR equal to and where so PTR is the pointer and then and where is going to be the address so you can store the value of and where inside PTR or what you can do is you can even directly do it from here so note that this thing it is not equal to something like start PTR you just did install PTR and then in the next line you did star PTR equal to and where this is incorrect y see in Star PTR is going to be a pointer and a pointer Can Only Hold addresses now star PTR what it does is if you see star before accessing something it means that this values address and then star means it will reference to that address that means you will get the value to this so star Peter is actually the value which is stored inside the address which is pointed by PTR and here you are trying to store an address so this is incorrect so what you do is you either do PTR equal to and where to get the address of wire inside PTR or if you want the value of where inside PTR what you do is star PTR equal to where so you do either of this but not something like start PTR equal to Android that is incorrect right so now if you want to check what we have inside PTR you can just do c out PTR and we will see that yeah that is because I did not put a Ampersand over here now so now you can see that this shows uh okay this these are essentially the same addresses just that it is not separated with a new line so if I separate them with a new line you will see that both the addresses are same so let me just close this and open this again so here you can see the address of where and then the value of PTR are same now if you want the value which is stored inside PTR what you do is you put a star before PTR and you will get back the value so if I run this now so here you can see that 10 is the value which is stored inside PTR now what happens if you if you change the value inside PTR so let's say star PTR equal to 20. now what happens is since this PTR holds the value of this particular variable called where what happens is if we change the value which is inside this particular address it changes everywhere right so if you change it over here this value is going to be overwritten with 20 it will change over there too that is because you are not using a copy but you are directly changing the value inside this particular address now if you try to print the value of where and we don't need this so here you see that the value of where has become 20 now that is because of this particular statement and you can have multiple pointers and pointers to pointers also let's say we have another pointer enter P PTR which is pointed to point here and for defining a pointer to pointer you just put two stars so there so this part means that this is a pointer and the whole part means that this is a pointer to pointer you can essentially have as many pointer to pointer to pointers as you want but for now we will just go with two and uh to access this what you do do is so P PTR is going to be the address of PTR so if you do and PTR you will get the address of PTR inside this pointer to pointer so let's call it something else this is pptr is pretty confusing let's say um pointer PTR so this is pretty good so pointer PTR will have the address of PTR so now if you try to run this what we'll be getting is the address of PTR so this is not the address of this wire but it is the address of PTR so if you try to print this so we'll just print all things at once so that we can compare them see out uh where first and then we have the address of where and where and then we'll put a new line over here so that we can differentiate the output so and and then we have the pointer which is PTR the value of uh PTR and we have the value which is stored inside PTR so star PTR right and we have this pointer PTR we have the star pointer PTR and star star pointer PTR and I forgot the end lines over here so handle handle and and so here you can see the value of where is 20 the address of where is this thing now the value inside PTR is this under value which is inside this particular address is 20. and value inside pointer PTR is this which is nothing but the address of this particular value which is PTR and this is nothing but the value which is inside this address so now this address is a pointer right this address will contain another address which is nothing but this one so essentially if you are doing a star PTR which is to a pointer to pointer it just means that you are accessing the value which is stored inside the value of another thing so star PTR is nothing but this thing which is the address stored in this particular address now star star PTR is nothing but the value which is stored inside the address which is stored inside this particular address so that is basically the hierarchy so if you don't understand let me just put it as a image so that you can understand better we'll just clear these things so now let's say this is PTR which will hold the address of some variable called where so now this is this variable called where which is nothing but a memory location and this will hold the address of this now pointed to PTR what you can do is when you define pointer to PTR as a pointer to pointer like this what it means is that it will hold this particular value it will essentially hold the address of the speed and now the PTR itself will be in some location right so let's say this is the location of PTR and that is the location of where now what happens is this address is stored inside this and you have another thing called pointer to PTR which will store this particular address now once you are accessing the value which is stored inside pointer to PTR that is nothing but this particular value right now the value inside this is nothing but an address which is the address of this bar so that is why we were getting the address of this pointer that is PTR when we are doing star PTR and then when we did star star PTR what happened is it it wanted the value which was pointed by the value which is inside this so that is why it is called pointer to pointer now what is the value inside this that is nothing but this particular value which is PTR so this is PTR and since you have another star it will go to the value which is pointed by this thing what is the value pointed by this thing it is nothing but this value so it will take out this value and then put it on the screen so that is where we were getting 20 when we did star star pointed to PTR now you can even use pointers and functions so let's say we created a function um avoid let's say swap numbers which we did when we were discussing about call by reference and call by values now instead of call by reference so when we're doing call by reference we were doing something like inter in B right so we are passing this Ampersand to mention that we are going to get an address but to get a pointer you can do the same thing you can just put a star over here and the way you swap numbers is we will have an intemp which is going to have the value of the first one so value is accessed by star a and we will change the value of a with b and Then star b equal to 10 and here while calling this particular function what we do is we can just pass the address correctly so let's say in terms a equal to 10 and b equal to 20. now to pass this what we do is we just call swap numbers and percentage and then Ampersand B why this Ampersand that is because this is a pointer and pointer needs addresses not just values and now if you put if you try to print a and b onto the console you will be seeing that they have indeed swapped over here so now the value of a is 20 and then the value of Base 10. so this is another worker on for call by reference where you want to change the actual parameters but we generally don't use such pointers we generally use the call by reference method which was directly passing address over here and then working with the addresses inside the function now what is the relation between a pointer and an array remember that when I told we were passing array to a function we are actually passing a pointer to the array now what does pointer have to do with an array so Ida is nothing but a collection right so this particular collection has a starting point and that starting point is defined by the pointer which is going over there so let's say we create an array uh int a equal to some foreign now let's just say C out a and what you will see is okay we don't need this we'll just remove this now what you will see is this particular address now why did an address come when we are calling an array that is because this first element or if you just say a0 and then put an and over here that is going to be the same thing as this thing so let us just print both of them together so that we can compare so C out a and then a new line and and is zero right so if you run this particular program what you will be getting is these addresses which are essentially the same thing so this particular a which you are referencing here is nothing but a pointer to the first element in the collection so that is the reason when you pass an array to a function it is essentially passing a pointer to the first element and you can increment pointers right so once you increment a pointer let's say some pointer n star PTR is going to be the first element in the array so this is you can do it uh either way you can just pass in a or you can even pass a zero both of them mean the same thing right now if I do PTR plus plus or BTR plus equal to 1 or PTR equal to PTR plus 1 what happens is this will not increment the value over here it will increment the address now the address incrementation totally depends on what data type you are using so if it's an INT it will go forward by four bytes so if it's a float it will to move forward by four by two put your character it will go forward only by one byte so it totally depends on what data type you are using but if you're incrementing a pointer the data doesn't change but the pointers location changes now if you try to print just being pointed by this particular pointer then you will see that it is pointing to two that is because you are just incrementing the pointer from the first element to the second element now you can even run a loop through the pointer so what you can do is uh let's say to access all the elements what we are doing before is we were doing something like this entire equal to 0 and I is less than the length which is 5 I plus plus and here we were doing C out a i and this right so we're doing something like this now let's see the pointer implementation how to do this so we have a pointer so inch r i equal to a and then I will go till the length of this array now how do we determine the length now what we do is I is less than or equal to a plus 5 what you're doing is you're incrementing the pointer over here not the value of array or the array you are just incrementing the pointer which is nothing but this pointer plus 5 is nothing but till here so what you are essentially going to get is the pointer or the address to this particular location and that address you will compare with the address which are right now and if it goes till here it needs to stop so you can directly do I plus plus over here and here you just need to put star I so this is the pointer implementation of getting the elements from an array now if you run this you will be getting the same thing but here you have a weird value now why did that happen that is because this particular value is the value stored in the collection outside the array now every memory location has some default value and this is the value which is stored in the collection which is just beside that we just went one further that is because I have put I is less than or equal to a plus 5 if I had put I is less than a plus 5 then it would have been correct but what happened is since I put is less than or equal to a plus 5 it went to one location further so this is the location which is just beside this collection and that is why the value inside that location got printed and this is some garbage which it doesn't have any meaning it's just there right so now since I changed this if you now execute this you will be getting the same output right so something like this now another very important implementation of pointers is the void pointer now let's say I create a integer pointer style PTR and will have an integer variable let's say I wire equal to 10 and we make the pointer point to this particular eye Wire by giving the address now if I just do PTR then I will be getting the address of this particular i1 right now let's say I create another variable called F1 which is float variable which stores some variable right 3.1415 no if I try to change the location of pointer it won't permit me to do so it says cannot convert float start to install that is because I had implemented the pointer as an integer now to change such locations what we do is we have a void pointer now what void pointer does is it cannot print the value but it can change the location so this particular operation is permitted by void pointer so if I now do PTR and then we will see two different addresses on our screen so these are the two addresses uh it's not separated by new line just just do that and we'll run it again so here you can see there are two different addresses that is this is the address of this particular eye where and this is the address of the float variable now uh the only drawback is that you cannot get back the value so if I do star PTR over here you will see that it will put an error over here it says that void star is not a pointer to object type so if you just want to store the address of different variables or different types of variables you can do that but you cannot get the value to get the value it has to be the same data type as the data you are going to point to so this is how we use pointers in C plus plus now let's just quickly talk about how to implement such a dynamic collection which I just discussed before so in C plus plus you have something called a STL so STL is nothing but standard template Library let me just write it down here standard template Library so what it has is it has previously implemented readymade functions for you so it has functions it has classes and we'll talk about water classes and how to use this particular STL at a later stage we will just discuss uh how to create such Dynamic containers or dynamic collections in our memory just like what we had discussed before so to do that in C plus plus there are two implementations these two implementations totally differ by the use cases one is nothing but a vector and the second one is the list so previously we had discussed about this particular implementation which is called a list right so the one let me just open this paint so uh this is the one which we had just discussed right we have different memory locations randomly put in the memory and then we will connect all these locations with a pointer like this now the difference between this implementation and the one we have over here is that this is called a single linked list as a previously discussed but this implementation which is there in the standard template library or the STL is nothing but a double linked list what a double linked list basically means is that you have links from here to here too so it is just like forward link and a backward link you have links in both directions so let's say this link points to here so you have another link which points from the previous element to the next element like this also so you can go either forward or backward as you wish so this is how the the list data type in STL is defined so this is called a double linked list or a dll for short so if you want to implement such data types in scratch we will discuss about how to do that in the next few videos but for now I had explained how this works to explain the importance of pointers right and the vector is nothing but a dynamic array so what it has is a normal arraylex structure it will store data in continuous memory location just like an array but what it does says it will have some extra spaces implemented so it does some calculations and then creates Extra Spaces for future elements and once the sketch filled it will search for another bigger sized location in the memory and then copy all the elements over here and then destroy this from the movie so all this gets copied over here and then you destroyed this completely so this doesn't exist now and this this becomes our new vector and this will keep changing and this process will go on till you stop inserting elements inside the vector now when to use a list and then when to use a vector so let us talk about that now vectors are used when you don't delete element often so in this implementation let's say we delete some two elements from the middle so let's just change the color and we deleted these two elements and then you have some ton of elements over here let's say you have 500 elements over here and then you have let's say 10 elements over here and let's just say that this is the size now if you want to delete these two elements what you do is you create another memory location somewhere and you copy this you just leave these two elements and then copy all these things again then you destroy this memory location so that's how vectors do it and in list it's pretty simple so let's just clear this now to do is deletion in a list what you do is you directly just remove this link that's it this is gone now what you do is you just create another link directly over here and the other link to in case of double linked list and this will go in the memory so once you're not using it it's gone right it is completely Disturbed from my memory so what you need to do is you just need to change the link so that is how simple it is to delete elements in list so in case you have a problem where you want to delete elements often from the middle that is more important you need to implement less right so if you want to delete elements from the middle or uh you are going to perform frequent deletions then you need to use a list or else Vector is a better choice because in list if you want to go to the third element you need to Traverse all this way right you need to find the first element in the second element and then third element but in case you are using a vector what will happen is it's a continuous memory location like an array so if you want to go to the Third location you just in increment the pointer with 3 and then you will get to the Third location that's how simple it is to access elements in a vector or in Array both are almost same so that's the thing if you are using a vector you need to use it when um you are mostly going to access the data right and you need to use a list if you are going to perform frequent deletions so these are the two points to remember and to implement it it's very simple you just include the list first so let's talk about the list and so to create a list what you do is you just put list and then in pair of such angular braces you put the data type what you want so let's say integer list for now so let's call it l and then to add elements you just say l dot push back push underscore back and then you put the image so let push back let's say 20 and then l dot push back 30. so by doing this you will be pushing back all this element so you have created a list which has three elements which look something like this and then if you want to access the elements it's a pretty clumsy way but this is how you need to do it what you do is you create a pointer for this list and for creating a pointer or such a STL data types you have something called an iterator so to do that what you do is you create an iterator for this list so you put this and then you put two search colons and you type iterator so this is how you create an pointer for this list for any such data type which is inside sdn and to move this you do the same thing so it will start from let's say or let's say just I it is going to start from the beginning so l dot begin begin returns a pointer to the beginning and then it has to go to the end so I is not equal to l dot n you can do that so end will again return a pointer to the ending element and then you can do I plus plus just like all we did with pointers and then to get the data you just do star I and then space so this will return us the data so if we now run this you will be getting the data which you entered so 10 20 30 is the data you will be looking how to implement this thing from scratch afterwards but for now this is how you implement in case you wanted to implement a dynamic list and to implement a dynamic array you need to input vector and Vector almost works like this but you have some feasibility right you can work with this like an array so Vector int let's say with and to add elements you do the same thing Big Dot pushback and then add the elements and to access the elements you do same thing like an array so in time equal to 0 and then I is less than the size which you can get by weight dot size and then I plus plus and you can directly access the elements just like you would do in Array you put a square brace and then put in the index so this is how you can access elements in a vector and this will give you the same result so that's how you use Dynamic containers or dynamic collections in C plus plus and that's how pointers play a very important role in designing such containers we will be talking about how to design our own data types and then go to design such collections at a later stage in this video we'll learn how to create our own data types using structures but before that let's first understand what objectoriented programming is now objectoriented programming or objectoriented programming structure as it's upgraded as oops it's nothing but a way of programming so what we have been doing till now is all procedural programming where you create procedures well procedures are nothing but functions and what we have been doing till now is we have been analyzing a problem we have been breaking down the problem into set of simpler problems solving them and then combining the result to give the output now procedural programming works for almost in every problem but when we want to generalize our Solutions procedure programming won't work so let's take an example let's say I want to create a student registration program now for student registration I Define a name I Define an age I Define IES or let's say vectors when the user doesn't know how many records is going to enter and then I will accept all the records and then save them so that does the student registration process now let's say I want to create a program where it the student registration but also it will give us some additional information let's say it's going to say um who is the highest scorer of the class right now what we do is we do all the same steps required for the student registration or the registration to happen and then we write additional functions so that we can compute the highest score or whatever it is now to overcome this problem or to generalize this particular kind of problem solving methods what we do is we create General objects so objects are nothing but collections of similarly grouped features now Here If You observe student is an object right so student has all these features of registration and then students has marks age name and all the features which are required by student and now what you do is you create such an object or you create a class where all the features are grouped together and then you use that particular class whenever you want so if you remember from our pointers video we have been doing something like hash include Vector where we include our vector class this is a class where you have all the features defined inside this now when you want to use it you just create a variable of the vector so you just say vector and where now what we have done is we have created an object of this particular class it's just like creating a variable or a memory location of this particular data type but in object oriented programming we refer to them as objects and classes now what we do is in case you want to add some item into this you just say vector.pushback so although you have so many methods inside this particular Vector but what you are interested in is just storing so you just say push back and then you just put them number you want to insert inside this so this is how objects work you don't know what is going on over here you just know that if you do pushback it's going to go inside the memory and you're seeing that so there's a whole lot of code implemented behind this but you can understand that this particular function is pretty much complicated to implement and it has been implemented for us you just need to use it so you you have a readymade implementation and you whenever you want to use it you just say dot push and then you can get the function to work so that's how object oriented programming helps us to overcome such redundancy and when we create objects we generally generalize the object so that it can be used for any type of problem where it involves that particular object so that's about object oriented programming now there are some technical terms you need to understand bonus data encapsulation the second one is abstraction or data abstraction and then third one is polymorphism we'll be talking about these things in a great depth at a later stage but for now you can understand encapsulation as combining the features so when you combine all the features which are required by a particular object that is known as encapsulation and abstraction is you show only what is required so here if you see the pushback function is actually an implementation of abstraction so you don't know how this works but what you can do is you can just put in a number and then it goes and sits in the memory and to use such a function it is not required to know how it works so that is abstraction and polymorphism is nothing but able to use the same thing in different ways we'll be talking about this later stage when we are discussing about classes but for now this should do and we'll now get to defining our own data types or as an objectoriented programming we should be calling them as classes well classes and structures are actually different things in C plus plus also they both are literally the same thing so in the implementation of classes and structures you won't find any difference between them but we'll just stick to the Convention of using structures only to Define smaller objects and then use classes to Define somewhat bigger objects why these two things are there but when these two things mean the same thing well C was not an object oriented programming language when C was introduced it did not have this kind of capability to create objects as I've just discussed before so what it had is it had a capability to combine two or three data types and then store it as a collective data type that's what it had and that's what structure was for so when C plus plus was introduced it was made to be object oriented programming language so what they did is they just extended this implementation so that it could hold collections of data types and also it could perform features which I just discussed before you can hold functions related to that particular object or it can undergo inheritance and all those things we'll be discussing about that later that is how structure was designed but when programmers were shifting from C to C plus plus they did not like this idea of using structures in different ways and moreover many objectoriented programming languages which were introduced they had the process known as classes so for that C plus plus introduced another thing called flash but this is just a history it's just a convention but you can use both of them in a similar way in C plus plus right so now let's talk about structures how to use them well do you create a structure you just say strength and then a name of the structure and will call this something let's say student now this is student class or structure you can just call it whatever you want now this particular class that is the student class or student structure this can hold features now what are features does a student have let's say the student is a name a student has an age so end age and what all can a student have let's say marks so let's say a vector in marks now this particular structure or this particular class is just like a data type you can create variables from that so let's say we want to create a student variable you just say student and then let's say S1 now you have created a student if you want to assign a name what you do is dot name and then you assign name so let's say Tony and then to assign an age it's the same way age equal to 10 and then if you want to assign the marks it's just like putting it into a vector so S1 dot marks dot pushback sorry push back 10 and then S1 dot marks Dot pushback 20 and all those things you can almost use it just like you're using but the thing is these variables are dedicated only to this particular student or S1 if you create any other student let's say S2 this is a completely different object and all these things don't work here so if I just say C out S1 dot name you should be getting Tony Asha output that's because s1's name is Tony and now if you change this to S2 you will be seeing that it is blank so as you see here nothing has been printed so that's how objects come handy now if you want to just use the name of the student you can just use the name from here and then you just neglect all these things you don't have to just Define the name Define the age and everything you will have this file somewhere and then whenever you want to do it you just say hash include and then student in double close we will be seeing how to implement this the next video but you can have this in a different file and then you can include this like this and then you don't need all these things you can just say a student S1 S2 and then S1 dot name equal to Tony and this thing will work so that's how you can Define your own data type in structures or as I told you this is nothing but a class and you can have functions associated with it too so let's say I want to create a function which will give me the average marks of this particular student so what we do is I will create a function just like I create normally so avoid average and this doesn't take anything because everything is defined inside and to work on this particular function what I do is I just say In Sum equal to 0 and then calculate the sum first so oriented equal to 0 is less than this marks dot size and now this marks are for the particular student this is not the class marks but it's called this whatever student I'm accessing so that marks will be considered over here and then I plus plus what they do is sum equal to sum plus that marks I and in the end I just returned sum over total now the total is nothing but three total in the sense the total number of marks so marks dot size will give me the total number of marks now here I can just call that function and get the marks so if I just say S1 dot marks Dot pushback something so let's say 10 and then 20 0 marks Dot pushback 40 and now if I call dashman Dot marks sorry sman dot average which is which was a function now this should return us this average okay that's because there's no student file okay what does this say yeah that's because I have put void over here so int and then now if we run this we will be getting 23 as our average marks that's correct because what we have entered is 40 2010 which is 70 and 70 over 3 is 53 so that's correct so that's how you use objects in C plus plus and that's how you create your own data type using structures and here if you see this particular implementation is actually the example of abstraction so here the user actually doesn't know what is the actual computation which is going on behind the screens but he will be getting the average and this is how you implement abstraction and the whole thing is actually encapsulation so here you combined all the features this average is a feature of student and the marks age name all these things these are just features of a student and then you combine all the features so this whole thing is nothing but in capsulation so in the next video we will be understanding how to use classes and when to use classes and structures well you can use them interchangeably there is no restriction on that it's just by Convention as I told you before classes and structures are literally the same thing in C plus plus but it's just that convention matters over here when you're giving your code to somebody else to develop more you need to strictly follow the conventions right in this video we will be looking at classes in C plus plus but before that let's first discuss a small concept which I had missed in the previous video that is how to use pointers when using such Collective data types here if you see we have the student structure which we had defined in our previous video I have just added one single function to print the details of storage and here I have created a student with the name Tony age 10 and then the marks of these things now if you want to create a pointer it's just similar to the way you do for a primitive data type you just put style PTR and then you put PTR equal to the address of the student now if you want to access a particular feature because in primitive data types we did not have features right we just had data so if we did start PTR this was enough but in case of a object we have so many features we have two functions and then we have three variables how do we access these things separately well star won't work here and we have a special operator known as the arrow operator well what this does this basically allows us to access separate features of an object and the way you define our Arrow operator is by using a minus sign and this greater than symbol together so if you combine them that looks like an arrow so that's from where the name comes well if you want to use it you just say PTR that is the name of the pointer the arrow symbol and then the feature you want to access so let's say I want to access the name so if I just put name and then execute this I will be getting a name over here so age also works the same way if I just put age and then try to execute this I'll be getting the age and if I want to access some function let's say the average function I can just do that from here so if I put average and then call that function I'll be getting the average over here so that's how you use pointers the only difference is that instead of star you are now you're going to use this arrow symbol and this is a very important concept as we will see in a minute this is we'll be using a lot when using classes so now let's dive into classes well the way you'd work with classes and structures remain the same so if you want to change this definition to a class definition you just remove the structural keyword and then put class over here so this now becomes a class well the dot operator and then the way you work with pointers this arrow symbol all these things remain the same so you don't have to do anything so now let's do something like then dot print details now if we try to execute this particular function we will be getting an error so let's see what that is it says that this particular name is private well if at all there is any difference between a class and structure that is this thing a structure is public in nature and then class is private well this is not a big deal we can change public to private and private to public we will just talk about that in a minute but what is public and private well in object oriented programming when you are creating objects or when you are creating such Collective data types we don't want everything to be accessed by the outside agent or the user let's say so if we are creating a student data structure and the purpose of this particular data structure or this particular object is just to store the details and then show the details then you don't want the user to manipulate the details right so if I give the access of this marks to the particular user he can manipulate the values inside right so same with the name and age also so if you don't want some of your features to be public in nature that is you don't want some of the features to be accessible by the user you can put them in the private section so how do you put that you just need to put private over here and put a colon over here so in a class everything by default is in this particular definition so if you if you want to make a structure into a class you just need to remove this class and put structure over here now this particular entity is just like a class you will be getting the same error when you executed a class and if you want to create a class into a structure if you want to change a class into a structure what you just need to do is you need to change everything to public now if you change it you will be getting the output just like we got in case of a structure so that's why I told there is no difference between a class instructor although we don't use access specifiers these are called access specifies because they are specifying the access of this features right so we don't use them in structures that's just by convention you can use them there is no restriction on that but we generally don't use them we just use them with glasses so can you have multiple access specifier inside a class well you can so these just Define different features to be either public private so there's one more thing called protected which we won't be seeing in this particular video because uh we'll better understand it when discussing about inheritance but for now we'll just discuss about public and private so as I told you these things become private and I want only the print details function to be public so I'll put public over here so whatever is below private becomes private and whatever is below public becomes public in nature now I can access print details without any issues but I cannot access all these things then how can I actually create an object with these features that is I want the object's name to be Tony H to be 10 and marks to be these things how do we do that if I don't have the access of this variable itself well for that you can Define another function in the public section you can say something like void set detail something like that these are more specifically called Setters these are called Setters but Setters are used only for a single variable so if you want to assign variables at a time when creating the object itself you generally use something called Constructor well Constructor is basically a special function which is used to create the memory when you are creating an object of this type so let's say you are creating an object of this class student you need memory to hold these three variables so Constructor takes care of that particular memory requirement and you don't have to explicitly Define the Constructor although you can and many people use Constructor to assign variables when you are declaring them so in our case we are declaring these variables right which are private in nature so in case you want to declare them while creating you can either use a Setter function or many people just use Constructors for that so the way you define Constructor is it doesn't have a return type so you just need to omit the return type it you should not give any return type and then the name should be the same name as the student so over here you have student as our class name so that should be there and then you will just Define it just like a normal function and here you can pass in parameters and all you have different names for that so if you have a normal constructed definition like this this is called a general Constructor and then if you have parameters inside that let's say string name and then int age so this is called a parameters Constructor there are different names I encourage you to look that up but for now we'll use this particular parameters Constructor and here we will pass in another variable the marks variable and now there is an issue if you see the objects attribute or the object's feature called name is clashing with this particular name well you can change it so that you don't have an issue like this but as I told you when discussing the pointer just now that that's going to play a very important role in classes and that says where this comes into play this is is basically pointer it is called this pointer only so if you just put this you can see that it is bold it indicates that it's a property of the compiler it's a reserved keyword this is basically a pointer which will point to the current object itself so let's say I have 10 students and then I'm working on the seventh student so if I use this pointer then I will be accessing the seven student details not any other student details so this basically points to the current object which is getting used and then we use it just like we did in case of our own pointer so this and then this particular arrow symbol which is called the arrow operator and then the variable name so name equal to name you could say this age equal to age and then this marks equal to Marks well if you don't want to use this particular definition you can always rename this and this won't be a issue but just explain the importance of this particular pointer and this Arrow operator I just took this particular example but you're free to use whatever way is convenient for you many people tend to use this particular definition and here when we are creating you just need to pass in when creating itself so here if you put parenthesis and then pass in your variables so name equal to Tony and then the age is something 10 and then the marks well you need to create another variable for marks or marks and we'll push back all these things inside this particular new variable you don't need s over here because this is an independent variable now we just created a new variable in our memory and here you just need to pass in marks and now if you just remove all these things this should work as expected so if we now run this you will be getting the output just like we got in a case of structures and now you have successfully implemented an object oriented design so something is private something is public you are not giving access to everything and all these are basically features of object oriented programming so now let us see another very important function which is a special function called the destructor well this is not used much but since it's the part of object oriented programming we'll discuss it quickly it's basically the same thing as a Constructor it is defined by the compiler itself it's a default thing it Destructor what it does is it will scrape out the object from the memory so if you are running out of scope so let's say we had defined this object inside an if block so once the block has been executed that variable is out of the scope right so once everything gets out of the scope it's going to be scraped out of the memory so that's when a Destructor is called so if you want the destructor to do something else you can just do that by putting this tight symbol and then you define the destructor with the same name as a class and again you don't put any return type for the destructor and it does not even take any parameters so you cannot pass any parameters to Destructor you cannot call the destructor from anywhere you can just see what it does so if you just call this descriptor let's say uh I'm being scraped something like that you will be seeing this when the object gets out of the scope so um we'll just put something over here if some condition 10 equal to 10 this is going to be true so all these things will be executed and over here we will put something like done we'll put a new line also so that we can differentiate so if you know execute this you will see all this details and then it says I'm being scrapped and then done that is because once the F block has been executed that particular object has been removed after the scope that then it should be ready to be removed or to memory two so just remove that thing from the memory that's why this message is printed and then you have this done which is outside the if block which indicates that this has been scraped before coming over to this statement so that's the use of Destructor if you want to see when the object is getting removed from the memory you can use Destructor we will again talk about this when we are discussing about inheritance but Constructor is mostly used to actually pass in parameters when we are declaring a particular object something like this so now how do most people use classes in C plus plus well mostly people don't use classes in the way we used over here we wrote the class definition and the main function everything in a single file right so people generally don't tend to do that people generally use multiple files in their program so you have one particular file only executing the main program and then you have multiple objects so you don't put all the objects in a single file you create multiple files for holding the objects and then if you want to use this particular class let's say the student class you just include it just like this particular Vector so what you do include and then you put the student over here student dot h that's an extension we'll be seeing how to create this and here instead of angular braces you need to put this coach so this indicates that this is something from this particular directory and not from the compiler so these things are available in the compiler that's why we are putting this angular braces and here you are putting this to indicate that this is from from this particular directory or this particular project so you have two files when declaring such classes so what you do is you have one header file where you declared the skeleton of The Flash and then you have one CPP file which is just like this one which will hold the definition of this class so how do you substrate that so let's say I want a particular function to diff to be defined in a separate file so let's just say this particular function uh called to be defined a different file so how do we do that you just need to put a semicolon over here so this is just like a function prototype which we had discussed and let's assume that this is another file so this class is in some other file you just did something like hash include student.h and then if you want to Define this particular function the way you do that is you just Define this function normally as with this is just a normal function it it doesn't have anything to do with this class You just defined it so let's say uh I'm called and something like that you just Define it like this and then over here to Define that this particular function is specifically designed to display particular class or this function should be available only to this particular class what you do is you just put in this particular class name and then you put two columns over here so this will indicate that this particular function is to be used only with this class that is the student class now you cannot use call directly you need to call it using the student class so if you want to use that so you can say something like s dot called and it will work normally so that's okay we don't have the student.h right now we don't need these things also so if you run this okay there's another type over here okay so here you can see I am called that is from this particular function which we just defined that this called function over here and uh here this is the message from the destructor that is I am being script so that's how we actually use classes but this particular ID which is the code blocks ID provides an easier way to create classes you don't have to Define all these texts that is you don't have to create two files and then put them it will neatly organize everything and give it to you so how do you use that well go to file you go to new and then you create a class over here so you have class name so you just give some name let's say student and then here in place of arguments you just leave it so it has hash Destructor virtual Destructor all these things you don't have to understand all these things right now you can just ignore them but I will understand what all these things are in later videos and now if you just click on create you can see that the new class has been created do you want to add it to the current project if you just say yes and then you just put OK over here and then you will see that in headers you will have an include folder inside which you will have student.h so here if you see it just has the definition it just increase the font size uh here you can see it just has some definition you don't need this this is basically the virtual distractor we'll talk about that later and here you have a Constructor and you have protected and private you don't need protected also as I told you we'll be discussing about that when we are discussing inheritance and you have some special comments over here so what this roughly means is that once a particular class has been included in a memory and if it's again trying to include it you don't do that because we are using two files so let's say I'm using a function from this particular file so when I don't want this particular function to again include it so here you can see hash include student.h so when I'm doing it multiple times I don't want this particular class to be loaded into my memory multiple times so this particular guard block will as it's called This is called a guard block card block what this will do is it will take care of this particular issue it won't allow this class to be included in the memory multiple times now and here you just declare the skeleton so here if you see uh if you want to create this particular class again uh we'll just create a small version of that so it will just have a age let's say in age and in public you will have a Setter function you will just say uh set age or new interest directly use it inside over here so in page you can just say and private I prefer private to be in a beginning but it's up to you the order doesn't matter I just put private in the beginning and then public at the end protected in the middle so that's our I use classes but it doesn't matter you can use it the way you prefer and now you just need to Define this Constructor in the student.cpp file we don't need this virtual Constructor I just deleted that and here you just Define it normally so age is something private but you can access private variables inside a class so you can say something like this age equal to age and here if you want to use this class let us just remove this class because I've already defined it so remove this and if you want to include that student class you just say hash include and then student.h and now all these things work fine well we don't have everything over here so we need to redefine it so let's quickly do that student S10 and if you execute this what do we have here it says yeah because we forgot to put the parameter over here it is int age and see we did not get any error so that's how we generally use classes if you want to create another class go here new and then class and you can create another class so people generally tend to use classes like this you have neatly structured thing over here so you have a main.cpp over here and here the student.cpp goes inside the source file so that you don't get confused so everything the header files which I talked about the student.h or anything class header files are basically class name dot h and all these things go inside this include folder and the definition file which is basically class name dot gpp all those things go inside the source folder and Main file will be outside and you can use that main file to execute the program everything starts from the main file generally name that as main.cpp where the execution starts and we include all our objects like this using this particular syntax that is you pass in the classname.h file using this particular quotes and the guide block which we just talked about this one this basically takes care of multiple allocations of memory of this particular class so that's all about classes in the next video we'll make another one of our projects so our previous project was the tictactoe game well we'll again make another game in the next video because I think games are fun to make and then we can learn a lot from them in this video we'll be making our second programming project which is going to be this the snake game so I'm sure everybody knows how to play this game you have a snake which grows on eating the food and the objective is to grow the snake as long as possible without hitting yourself or hitting one of those so if you do any of those you lose this game well there are different variations of this game some have teleportable walls that is if you go through this wall you end up coming from there and some versions even have obstacles in between them instead of this free space but we're not going to do any of those we are just going to stick to the simple version with four concrete walls and uh empty space in between right so let's get started let's create a new project it's going to be a console application and the language is C plus plus project title let's say snake and these things remain as it is right and now let's first start by defining the board so if you remember from our previous project where we made our detector game we had defined a 2d array or a matrix to hold the board right but here if you see you don't need that why well in the previous game where we made the tictactoe game the board only had nine elements and we were concerned about all the nine elements of the board right so we were concerned about what all the boat contained but here you don't have to actually be concerned about all the elements of the board here the boat just acts as a background the only things you are concerned about are the position of the snake uh the position of the fruit and the position of the wall so other than that you don't need to keep track of other things so here we are just going to print the board just like we print something on the console so let's define a function for that let's say avoid the board and here we are going to draw the board so uh let's first Define the dimensions of the board the width and height so let's say uh the width is going to be somewhere around the 50 characters so since we are working on the console you are going to see everything in terms of characters or this is basically a substitute for pixels if you are familiar with graphics and the height is going to be somewhere around let's say 25 characters now these two things are constant right so the these won't change throughout the project so if you want to make them as constant so you can just say const over here so this keyword will make these things as consonants and now I would like to introduce you the concepts of macros so macros let me write it down here macros these are nothing but one liner code right so let's say you want to Define a function to calculate the square so what you do typically is you write something like this right so in SQ and this will return X into X right so this is how you define a small function but what you can do is instead of defining it as a function you can Define it as a symbol so when I pinch symbol what I mean is if I type that particular symbol then this operation should be performed so that is what a macro does so the way you Define macro is you put hash Define and then you put the symbol so let's say SQ over here and inside this whatever parameters you want to pass without any data type so this is basically a symbol and here you want to define the operations so here uh our operation is X into X so that is basically going to return us the square of a number so here you don't have any assignment operators or written operators all this means is whenever I say SQ of X it should do this particular operation so if you say something like SQ of 5 and here if you run this you should be getting the output as 25. so that's why we use macros and you can do the same with these two variables also so the way you define it as hash Define width is 50 and hash Define height 25 so now whenever I say width I mean 50 and whenever I say height I mean 25 so now we can remove this you don't need this anymore so now the board is going to be two Loops the first Loop or the outer loop is going to control the number of rows so here the number of rows is defined by height right because height is basically how down you go so that is how many rows you have in your board so I is less than the height of the board and I plus plus and inside this you will control the width so enter and let's say J equal to 0 J is less than the width J plus plus and inside this you are going to print something so Here If You observe this board for every row there are two wall pieces right so every row starts with one wall and then ends with one volt so since that default you can subtract 2 here and then put those two characters so you have one ball in the beginning of a row and one wall at the ending of the row and then you go to a new line and inside this basically if the row number is 1 or the row number is height minus 1 that is if you are printing this row or this row then you need to print all walls so here we are just going to print out these hashes or else you need to print out the empty space which is basically this space right so now if you call your board function that should print a board for us so here we have the board now this code looks pretty squished to the left so you can take care of that by adding a couple of tabs and that will Center the board so now let's see how to animate things on the console so if you are familiar with Graphics or even if you have heard about animation you might know that animation is nothing but just fast moving pictures right so here if you want to animate something on the board let's say you have some object on the board then the way your animators you will quickly move the position of that object and it will appear as moving so to move something on the board or to place something on the board you need to know about the coordinate system which the computer uses so let's talk about that quickly so you might have come across this Cartesian coordinate system in your math class right so you have a coordinate system where if you go right the x coordinate increases and if you go vertically upwards your y coordinate increases and this position basically which is the intersection of these two axis this is the origin which is defined by this 0 0 coordinate right so this is the coordinate system you all have come across in your math class now what happens in a computer is this origin is shifted to this top left corner so let me just clear this thing so in a computer your axis are defined as follows so if this is the top left corner of the screen that is this position where I am pointing my cursor that position is basically your zero zero position so this is your origin in a computer and I should go write your x coordinate increases and as you go down your y coordinate increases so basically your yaxis is flipped in case of a computer and X Remains the Same so as you go up your Y is decreasing and as you go left your x coordinate decreases so the coordinate system in a computer is defined you can use this coordinate system to move objects in your screen or even Place objects in your screen so every object is defined by x coordinate and y coordinate so if you put some point here so it has some x coordinate that is how much it has moved from the origin in the horizontal Direction and some y coordinate that is how much it has moved from the vertical direction right so this is how the coordinate system of a computer is defined and we will be using this system to operate on our board right so let's define an arbitrary object somewhere so let's say our int X which is the x coordinate is going to be somewhere around 10 characters and Y is also 10 so that means that this is 10 characters from the left and then 10 characters down so it it will be in some arbitrary position somewhere let's just see where it is so if I here if I print that particular object that is pretty simple to print so if the coordinates match you are going to print that object so how do you do that well I is controlling the height right so height defines how deep you are on the board so that is basically the yaxis so you need to compare I with Y and G okay with X so if you if these two coordinates are equal then you can say that your object is at that particular position and you can print something so let's go with this zero for now so that is going to be our object now if I try to print this code you will be getting your object here so and this is 10 characters from the left and 10 characters towards to bottom but if you see this position is exactly not as Square as expected uh that is because in console the next line has some Gap if you see over here so this Gap is much bigger than this Gap that is why it doesn't end up as a square but if you are using some graphics library then this will work so it will exactly be as a square so it it will end up somewhere over here so this could be the 10 comma 10 point but here since we are working on the console uh the yaxis is much wider or I should say much deeper than the xaxis so uh even when you animate your snake it's going to move faster on the vertical Direction than on the horizontal Direction that's actually not a logical error that's because of the property of console you cannot do anything about that right so if you are using any graph fix library then that problem won't be there so now let's see how to animate this animating is very easy you just need to move the board right so uh let's say I will create an infinite Loop here and inside this we will first call the board and every time this Loop runs we will just increment the x coordinate so when entrance x coordinate from this coordinate system your object is going to move towards the right right so now if you're on this program you should be getting some kind of movement so here you can see that this o is moving towards the right but you cannot actually see it as a movement this is basically it is just printing the board again and again so if you have somewhere to update the board then you can see the movement so one way you can update is you can use your console command so if I pull up my console over here this is basically a Powershell but uh in Windows or if you're using this code blocks in Windows it's going to use the use your CMD as your default console right so in CMD the command for clearing a screen is CLS so if I type something over here under type CLS that thing is cleared right and if you're a Linux the command for clearing is clar and the way you pass in such shell commands or such console commands are you include another Library called cstdlib which stands for C standard Library you might have come across this while making a tictactoe game this is the library which had our random function and we will be using that random function in our code as well right so here to send commands to the console you use system and inside this you write the command so in in my case it is the Windows operating system so I write CLS and in case you're on Linux you need to write clear right so let me just comment this thing if you are in Linux you need to write clear and I forgot the semicolon and now if I run this I should be getting a moment but if you see here it kinds of flickers on my screen right so this board is getting updated but it is annoying to see so uh this you cannot actually control so more technically if you know about the FPS or the refresh rate so you cannot control these things of a console console is not a property of the language or this ID right it is a property of the operating system so you cannot control something from an external source which belongs to the operating system so one way you can take care of this flickering is instead of clearing the screen this is happening because it is doing two processes right first it is clearing the screen and then again it is drawing the board so if you just override the port as we used to do with our normal line so if you remember from our Escape sequences video we had talked about an escape sequence called slash R right so if you write something over here let's say hello world and here if I put slash R and I type something else so ASAS then the first four characters which are these four characters are going to be replaced by the word ASAS so now if I run this I should be seeing as ASO word so that is because HG LL has been refreshed by this that is because this slash R will take the cursor from the end of the line and place it in the beginning but we cannot use the slash R over here that is because we are using multiple lines right so you are printing around let's say 25 lines because the height is 25 so you are printing 25 lines and there is no escape sequence to get your cursor back a line so slash n will move your cursor down a line but you cannot go up a line right so for that I am going to tell you a solution but this is going to work only if you are on windows so let me write it down here this is only for Windows and if your Linux you need to find out Library which tested so basically what we are going to do is we are going to pick up this cursor from the end of the screen and we are going to go all the way up to the origin and place it back so if you do that instead of clearing the screen you are moving the cursor and when you print your data again it's going to be overwritten on the console so it looks like it has been cleared but actually it has been overwritten instead of clearing so this solution what I'm going to give you in this particular video will work only if you are on windows so if you are on Linux you need to find out some Library which will do that for you right so if you are in Windows you need to include a library called Windows starter which will basically allow you to control the cursors position on your console and here what you need to do is instead of system clear you can do set console cursor position and here you need to give some handle which is get STD handle Insider STD output handle so if you don't understand what this means it's okay it's just you can think of it as it's going to pick up the cursor from the end and it's going to put it back on the origin and to put it back on the origin or any specific chord that you need to pass in a coordinate data structure well coordinate is basically a simple data structure which is already defined in Windows dot h and we will be using this so if you're on Linux and you're using some other library to achieve this you need to Define this structure to follow along with this tutorial which is basically a simple structure it does something like paint X and Y so this is the structure which is defined in Windows so I'm not going to Define this again it's there in this Windows dot Edge and that's what we are using over here to send the position to our handle which will basically take the cursor from this position and then put it back to the origin so the origins coordinate are basically 0 0 so you need to pass that in and now if you see you won't have any flickering screen you will have a neat animation going on on your screen so as you can see there is no flickering although you can see that cursor updates somewhere but this is much better right instead of the flickering screen so again this solution is only for Windows user so if you're in Linux you have some other libraries like uh you have n cursors and many other libraries a simple Google search will get you what you want right now let us remove all these things we have now understood how to do animation and here what we're going to do is we are first going to Define our snake so go to file new and Clash and the name of the class is snake and you can remove all these things right it doesn't really matter you don't need Destructor on all these things we'll create if we want to right and here just click OK and in snake.h we have this template code so again I prefer private to be on the top so if you want that you can follow this or if you if you are okay with the structure it has given before you can follow that it doesn't really matter and here first of all we are going to decide what is going to be private and what is going to be public so what are the features that we need our snake to have first of all it will have a position right the position of the head to be precious and next it should have a length to Define how long the snake is and you also need a Direction and you also need a velocity or you can say speed of the snake so how fast it moves so here in case of velocity or speed we are going to talk in terms of number of characters so let me write it down here that is basically it is going to move two characters at a time three characters at a time and so on so in case you are working with some graphics Library that's the same thing you do with pixel so you say three pixels every time more five pixels at a time and since here we are on Console we are going to talk everything in terms of number of characters right so uh here let me Define the private variables first thing is you are having to have a position so it's going to be chord position so again if you are in line if you need to define the structure and uh for using this code you need to include uh windows startage okay so this is because this is a separate field Which snake cut HSS update file so even if you are included in main you need to include it again but you can exclude this over here because once we actually include this file you are going to include all these things it doesn't matter even if you keep it twice because of this guard block as I explained before this guard block what it does is it takes care of multiple initialization so here I have already included windows.h now I when I do hash include uh snake.h it will take care of the fact that I have already included Windows started so I don't need to include it again but here if you want to use these things you need to definitely specify that you are using windows.h or else you cannot use this and will throw you an error right and here you need a length of the snake and you have a velocity so and well and you have a Direction so let's say car Direction and in the public section we need to Define Constructor first and this is going to take a position that is the initial position and initial velocity for our snake so let's define this Constructor and snake.cpp and here we'll be talking specify those things so chord position and end velocity and here you don't have to include Windows attach that is because again you are including snake.h which comes with Windows started so you don't have to include it again and here you need to set the position and velocity so since I'm using the same name for both the variables I need to use this pointer so if you are not using the same name it's okay but if you are using the same name you need to use this pointer and the velocity also goes in the same way and initially the length is going to be 1 that is because you have one head right so without the length cannot be zero because you always have a head for this link so the length is going to be 1 initially and the direction so the direction you can say uh something like none right because the snake is not moving now and we'll have a method to change the direction of the snake so let's say uh change dir which will change the direction it will take some direction to change it and here let's define that method let's void snake change dir a and what you need to do is Direction equal to Dr and basically I'm just setting the direction of a snake and um for moving the snake let's create a move method or move snake well moose basically a defined method in C plus plus so uh it's not preferable to overwrite it you can overwrite it you can define something like this but it's preferable not to overwrite any default method so let's say move snake I'm just not going to take any parameters because it's just going to perform something so avoid the snake move snake and here what you need to do is you need to switch the direction that is basically you need to move the snake in that particular direction so switch Direction and here you need to put different things so in case it is going up then what you need to do refer to this coordinate system you need to decrease the y coordinate so what we're going to do is pause dot capital Y minus equal to the speed so basically if I say that my snake is moving two characters per second or two characters per iteration then I need to subtract those many characters right to move to appear to be moving in that much speed so that is why we are going to subtract the velocity over here or speed you can name it whatever you want and here the break is mandatory and this will be true for all the four directions so let me just copy it down four times and uh it's going to up down left and right right is you need to increase your velocity left test you need to decrease your velocity and um for down you need to increase your velocity on the y coordinate so this will move your snake in your preferred Direction and that should be it so now you have a snake you have initialized it with some initial position and velocity and you have a method to change the direction of a snake and now you even have a method to move the snake and here since we need the position of the snake to draw it on the board you also need a method to get the position so let's say uh or the get post which will return the position of the snake and this is going to be written first and I forgot to mention snake here this will be declared as normal function if I forgot to mention this this basically means that this get pass function is related only to the snake class right I'm sure everybody knows this and here we will quickly Define a prototype for that it's called Uh get pause and done so now you have four methods let's go over it quickly one is a Constructor which will initialize our variables one is a method to change our Direction so change the direction of the snake and one is to move the snake in that particular direction and one is to get the position of the snake or I should say get the current position of this name so now let's use this thing in our main file so you here as I told you you can remove this window startage because it is going to be included with sneak.h and uh here let us first create a snake so snake as all it's a snake and inside this let's say it's going to be initially in the middle of the board so that's basically 50 by 2 and 25 by 2 or you can say bit by 2 and height by 2 that makes more sense right so width over 2 and uh height over 2 that is basically the center of the board and velocity let's say it's going to be one that is one character at a time and here you instead of Y and X you need to capture the position of the snake so call the snake pause you can see equal to um snake dot get position and here instead of Y you need to say snake pause dot Y and instead of J you need to say snake pause dot X so so far so good we have created a snake which is going to be on the middle of the board and which is going to move at a speed of one character at a time and here um let us just clear all these comments and now let's see how to get input so that we can control the snake so you need to move the snake only when you press something right so here how do you capture that keystrokes well you have a library to do that so that is called conio or I should say console input output and here you can just do the following so if you say f k b h i t so kbhit stands for keyboard head so it will be true if you hit a key on your keyboard not necessarily Enter key you can hit any key on your keyboard and this is going to evaluate to true and to capture your key you need to say get so get CH will basically give you the key which are just pressed so we will capture this and instead of capturing this we can switch this so that we don't have to write couple of if statements we can just say switch get ch which will basically give us the key and here you can control it so let's say up so I'm not going to do it for the arrow keys because I don't really remember the ASCII values of the arrow key so if you want arrow keys you need to give the ASCII value so let's say 132 is the highest key value of upper key it is not the case I'm just saying but if 132 is the ASCII value for the up key then you need to do something like this but I'm just going to go with wsd for now so case W then um what you need to do you need to move the snake upwards right so snake dot changed up sorry U and then break and you need to do this for all the four directions so Ctrl c v v v w a s d and uh D is basically go to right s is down and this is left for now this will more snake in our preferred Direction and to move the snake you just call snake dot move snake which will move our snake and now if you run this you will be getting a snake which can move on your command so now you can see that it is not moving because initially we had set the snakes direction to be n right so we did not have any case which will move the position for n so it doesn't move for any iteration and now once I press W you can see that it started moving up a it started moving left s it started moving down and D it started moving to the right so now I can control this little character and keeps moving right so that is how the snake game is defined so once you press a key it will keep moving in that particular direction until you change the direction so this is what we needed and we got a moving character on our board so now let's see how to first uh generate the food and calculate the points and then we will talk about how to increase the snake's length once it reach the food right so now let us just close this and talk about the food so again you need to create another flash for generating the food so it's going to be that's your food and again you don't need the getter Setter or the destructor created yes okay and uh here you have food.h and again I don't need these things so here the private section what we're going to do is we are going to have a position of the food right so that is mandatory you you cannot have any object without a position right so for the position you again need to include windows so windows dotage and it's going to be called boss and uh you do need a velocity well you don't need anything else you don't need velocity you don't need any uh direction for that put it's just going to be a point where if you go over to that point and then eat that food you are just going to generate another phone so basically you don't need anything else and uh in the public section the public section we have a Constructor basically well you don't have to pass anything to the Constructor it's basically going to initialize this position with some random value but if you see this game always this food starts at this position if you want something like that then you need to Define a initial starting position so as we did uh for our snakes you need to do something like that but we are going to go with random initialization right from the beginning itself so again for random function to work you need to include free STD lib and uh we are going to define a function called gen this is basically going to generate output and this is going to be avoid and we also need uh function to return as a position so it's going to be get us so this will return our position so let's define these functions inside this what we're going to do is just generate for hit first time it's just going to generate the food once you create it and uh for generating the food sorry snake sorry food junk food and uh what this is going to do is it's just going to generate two different random numbers in the in some range so if you remember the formula for generating a random numbers in the real that is U2 L it was basically Tran mod U minus L plus 1 so U minus L plus 1 plus l so this was the formula for generating a random number in a Range so here our upper limit is going to be for the x axis is going to be width and the lower limit is zero right so uh here you just need to say ran mod and then U minus L plus 1 plus l so uh for uh us the U is basically with minus the lower limit now lower limit if you keep zero then the food will have a chance of getting generated on the walls of support so you don't want that to happen so it's going to be 1 and plus one so these two cancel out so you just need to say run mode width and then plus L which is 1. again for uh the y axis the upper limit is going to be height and the lower limit is again going to be one so this will generate a random position for our food which will be on the board and for getting position it's very simple you just need to say for the food good position so we did not Define that well we did quad grid position and here you need to say return first so this will return the position of the current foot and that's it for food so you need to include that also over here um in our main file so here we need to say hash include food.h and here we don't need cstdl application again because we have defined it inside this food.net so that gets included automatically and uh here we need to create a food object So Below the snake let's create a food so it's going to be food and uh as a Constructor doesn't need anything so you can just put it like this and here we need to check whether the snake has eaten the food or not so for that what you can do is you can have a function inside the snake which will check whether its coordinates have matched the coordinates of food or not so what you can do is you can insert the snake.h you can Define another function called Boolean let's say eaten this will basically say whether the food has been eaten by a snake or not so you can just pass in some coordinates inside this that is the coordinates of the food so coordinate food such a food cost and we'll Define it inside snake.cpp it's basically um bull snake eaten and uh this will return true if the coordinates match so if I say uh if would cost well I did not capture it over here so it's called could pause and if put pause dot X is equal to pause dot X and uh that is basically if for the position of the head and position of the food are equal then it means that the food has been eaten by the snake so then you need to return to else you just return false so this means that uh if you eat the food it will return true and if it didn't eat the different Falls and in main you can use that over here so if you can say snake dot E10 and you can get the fourth equation so food Dot um get pause and this will give you the position of the food which you can pass into the snake and if the snake has eaten then you need to generate another first so you can say full dot gen foot and you also need to increase the length so you you can say snake dot length well lunch is a private variable so let's say snake dot grow and we will Define a function to grow the snake so you can see void Pro and we Define it as void s snake grow which is length plus plus and this should grow our snake and that should be it so now you have the logic for eating a food and then growing the snake well we are not going to see the snake grow but it is just going to grow in numbers we won't be seeing that visually we'll see how to deal with showing that visually right and here we forgot to draw the food so here you need to put that I'll say for our I is equal to 4 pause dot y and J is equal to put pause dot X well I did not capture that so called equal to good pass then for food the let's say the star right the star works well now if you run this it says that uh width and height were not declared in the scope now that is because in food.h we did not Define the width and height right we had defined it in the main.cpp so you need to copy these two lines here so Ctrl C and put it inside put dot h that is because we are using those two right we are not uh we did not Define it in full dot X that is why it must give me an error and now if you run this that is because this is a capital Y and um here you have the snake and the food so here you can see the food so if I eat that food it's going to generate another food in some random position so you can see that generated over there and uh here we did not write the logic for Collision so we'll take care of that afterwards well it's going to be in the same places that is because we did not seed the random function so if you uh have seen the previous video where we made the tictactoe game you know what is serious well to see the random function what we are going to do here is we are just going to say in the main function so to see the random function what we are going to do is Hash include C time and here in the main function we will see s and time no okay so now when you run it you will have a snake and foot and this put will be generated once you eat it so here I eat that food now you can see that another one has been generated and then another one has been generated so we did not write the Collision project so if you go through the wall you will come you won't come back and that will take you now so to do that what we are going to do is we are going to write another function so it's going to save Full collided and its property of the snake so snake collided and then this is going to just return true or false so this is going to return true if our position of X is less than let's say one so that is because at the zeroth position you have the wall right so if it is less than one you mean it means that you have crossed the position of one and your cross the wall and uh in case your X is really greater than height that means the width then it means that the air cross the other wall also and similarly for the Y you need to say it is less than one or position dot Y is greater than the height then you need to return true it means that you have collided with a wall or else you return false over here so uh we forgot to define the Prototype so here it is going to be boole collided and in main function instead of true we are just going to maintain a variable called game over which will track whether the game is over or not so in the beginning game over is false and while true you will change it to while game over or while not game over you need to run all these things and if the snake collided so if the snare collided then you will just say game over equal to true and this will stop excreting the loop right now if you run this we got an error does it say again the width and height are not defined in snake dot h so you need to copy those two things from here and put it over here right now if you run this you don't have any errors hopefully and here you can see that the snake moves and if I go and hit the wall it ended the process so now the game ends successfully once I hit the wall and we have taken care of the food also so uh I think that the video has become long enough it has been an hour so the next video we'll see how to increase the snake's length and show it visually well we are including the snake's length over here but we are not showing the increase in its body right so we are just moving ahead and we are eating the food the previous video we were making our second project which was a snake game and and we made quite a progress right so let's see what we have made we have made this board and then we have updated the port without causing any flickering and that's a great Improvement and we also animated this character which can eat the food and we have also written the logic for the food to appear at different random locations right in this video we'll complete this game body for the snake well you know that the snake is growing while eating the food but it's just growing in numbers right we're not throwing it visually so we will be showing that and also before that let's fix some logical errors which are made right so let's see what are those errors so let's just try one of the other pops up I'm telling unlucky but just to save the time I'm just ending this game here and let's first talk about the most obvious logical unit so in the definition of food what we have said is once a food is created I want a random location on the board which will be the location where our food is placed right that's what we said when we are calling this generate food function inside the Constructor right but what is happening here if you run this program again and again so let's run just once again so here you will be seeing that the first code is over here and if I close that run that again you will be seeing that the second time also the food is over there but the consequent foods are getting randomized so if you see the second food is somewhere over there and we start this game again and try to eat that you see that the second food has been generated at some random location right the first one was somewhere over there so to fix this well you can go over there literally an iron it is actually not what we wanted right it's basically what I did not want but if you wanted that the first should be generated like that you can go ahead with this and keep this portion but since we wanted to generate the food at a random position right from the beginning what we are doing wrong is here first we are generating the food object and then we are setting the random function right so if we were introduced to the random function and the seeding function uh back in the tictactoe video right so if you remember the seeding function is a kind of controller to the random number generator well the random number generator will generate some random number it will do some calculation give you a number when the program is loaded onto the memory right so if you want a different random number what you need to do is you need to close everything and then open it again well we don't want to do that right we want random numbers right when we are in the memory so what we do is we change the seed so seed is like a starting point of the algorithm and what we do is we see it with some number every time we want to generate a new number so what is the thing which is changing constantly when time is changing constantly so what we do is we just take the time which will take the time machine integer and then make the random number generator start from that particular type that is why you get different numbers after shading it but what is happening here is we are calling the random function before seeing it right for the first time from the next time onwards once the foot is written the logic is over here right which is after the seeding function that is why you are getting randomized locations for the consequent foods but not for the first one so to fix that it is very simple what you can do is you can get rid of the Constructor but I don't know why I Define this Constructor basically when we Define a Constructor what we actually see is we need the Constructor to do something which the default Constructor which are compiler will construct for this class can't do right but what the default Constructor does it will basically create the memory required for this particular class right for loading this class onto the memory you need some amount of memory which is calculated by The Constructor well we wanted the Constructor to do something extra that is called this function on the creation and it did not work out as we expected that is why we can just get rid of the Constructor and then call the function manually well if you want to keep the working of the program just like before then you can skip the step as it told you it's just preference right I prefer that the uh would be generated at a random location right from the starting so you can go there and after shading the function what we can do is we can now call the generate food method so this is the one line which we wanted to skip by using the Constructor which was actually worthless right so creating a Constructor was no good and at least for this kind of a game where we want the first element to be randomized so it basically get rid of the Constructor and that will solve the issue now if you run this you will be getting the foods at different locations so one is being generated over here close that open that again well if the other one has been generated and this is the problem actually which I wanted to show you in the beginning right well uh when I was eating the food I actually knew that at some point this will happen that if we won't see any food on the pool that is a major logical issue with this program which we made in the previous video and we'll be fixing that right now so here if you see there is no food on the boat but actually it has been generated we'll see why that happens okay so close that and now we fix the most obviously now let's go on to the issue which we just saw that the foot is not getting generated well what we're doing in the general food method but here we are saying that we want some random number in the range of 1 to width minus one why we told that uh one the first character is basically reserved for the First wall and the last character is reserved for the last one so basically you want numbers from 1 to width minus one leaving those two campus it sounds reasonable right but if you work on the path it is going to tell you a totally different story so let's see what the math is let me pull up my paint over here and now let's first talk about one of these so width or height both of them are going to go with the same logic so uh we can talk about only one of them right right so here uh let's say I draw the height so what is the height height was something like 25 right so the whole thing is actually 25 characters right and what we are saying we are saying that the first character and the last character are decision for the balls so from a computer's perspective what are these numbers going to be the computer starts counting from zero right so 25 characters is basically 0 to 24 for a computer and what we are saying is we are saying that this 0 and this 24 is not required in a Range so basically we want numbers from 1 to 23 we don't point zero we don't want the last character which is 24 right so this range becomes 1 to 23 well to get a number in the state what you can do is plug it into the formula so what is the formula for the random number generation it is if you want a number from sorry n that is the lower limit to U which is after limit and lower limit is included and upper limit is not included right so you will be getting some numbers till U minus 1 so if you want numbers in this range that is early inclusive and you not inclusive you won't get the U then the formula is you need to plug in Rand mod it was U minus L plus 1 plus L right so this is the formula you can plug it into this folder you can even see logically but basically both of them are going to give you the same result and we'll just use the formula for Simplicity purposes over here modulus just what it becomes let me just write it as R this is basically the random function R naught and U is over here 24 right because we want 23 to be included right and in this formula this particular U is not included in this random number generation so we'll just increase this by one number that is 24 and that will become 24 minus L plus 1 so that is 1 plus 1 lower limit is 1 which is included that's why we don't have to do anything to it and plus one so what this becomes is R naught 22 plus 1 and what is 22 it is basically 25 minus 3. right so this is the number which we wanted to generate actually but what we did is we basically went by our intuition and messed up the logic right so to correct this what we need to do is using this particular formula this becomes minus 3 and this will become plus three and the same will go with height also we talked about time same thing will go with the width also so if you draw a similar kind of analogy you will be seeing that the same logic will work for the width also right so let me just clear that and here it is minus 3 and this is plus 1 right now this will fix The Disappearance of the food and there is another major flaw in our looping right so where are we looping we are looping over here right the board where we are displaying there is a major flow in that and believe me if you have been able to identify that particular error you are going to be a great programmer right so let's see what the error is it is basically lying within the inner loop what we're doing well for the outer loop it is pretty straightforward we are going from I equal to 0 to I equal to height which is basically how the computer sees numbers from 0 to n minus 1 and for the fifth we are doing something different right so what we're doing here we are saying that we are going from 0 to width minus 2 and we had a reason that these two characters which are basically the walls are constant for all the rows so instead of including them inside the loop why not just exclude them and run the loop only for the width minus two number of characters so that's what we did and that sounded reasonable but here is the problem what happens is let's say my uh generated x axis which is basically the width is going to be sub 28 right sorry what is the maximum age is 50 right and what you can do if this is 50 the maximum number you can generate leaving 0 and 49 is 48 right so this is the maximum number you can generate and let's say that that is our x coordinate that is the value of our width now what happens here well if you're saying here J is running from 0 2 with minus 2 what is bit minus 2 it is basically 48 and it's not reaching 40 it is just going till 48 which means going till 47 only right now if you see this you don't have a way to actually display this coordinate and just loop at all because it is out of bonds of this particular Loop this Loop will run only till 47 and you are asking it to show something which is on the 48th coordinate which is not possible by this Loop right so how do we fix this well we can draw an analogy over here so if you draw the coordinates into J's perspective and the W specific two w is basically the original width of our port for say this when w 0 J is not only defined why is that well let me just clear this thing so that we can see it clearly but this is the leftmost corner of our board and this is 25 right 25 characters or 25 pixels and here what we are doing is we are saying this is our character the width character and we are saying that the inner loop should run from 0 to 47 and we are including another character and the total makes it 58 0 to 47 is 48 characters plus 1 plus 150 and this is the other one now what is happening is let's say my coordinate is zero right right then the x coordinate is 0 it basically means this particular position where the wall is there right but what is happening here our zero is starting from one step to the right because of this particular grouping and this particular character before so what is happening our Loop which is starting is starting one step towards the right and that is why we are missing out our coordinate so what happens is if J is sorry if W which is our original x axis is 0 J is not returned defined it is not there at all right when does J equal to 0 start to 1 and so on this will continue when Vector equal to 48 J equal to 47 as we just saw and with this 49 it is not presented right so this is the reason why we were not getting anything on the board not this is not the complete result the actual reason was because we were we were a generation and here this is another one of the major reasons why we both be getting even after fixing the random number that is because if you create any food at the extreme positions that won't be visible to you at all right so to fix this what we can do is while comparing the coordinates we need to add one purchase right so if zero pressure zero RG 4900 right if you don't want these two things because we are not going to generate food at those two things they have walls they have reserved for walls so in this range 1 to 48 what you need to do you need to compare only these things right you need to compare only uh these things and to compare that what we can do is we can add 1 to the J before comparing it with the X constitute so to fix this what we're going to do here is when we need the canvas let me just clear this and here uh in place of K it's going to be J Plus 1. and that should hopefully fix all the logical errors which are made so save that run that again and here we have our first word if you eat that the second food is getting generated and hopefully it should not stop generating it should be generating till we play this game and it should stay within the range of port and it should be visible to the player right so well if you say this is visible and trust me it's going to work and there are no uh kind of mistakes in this program and this is completely fixed now well we'll fix one more thing that is if I go to this particular wall I will crash before actually crashing so if you see this I have not crashed the phone but it's in that I have crashed this one that means I need to go inside the one so to fix that I mean it's the coordinate issue and also a placement of most with let's first fix a comment if you go there Snake dot Collide it I will have already fiction basically what we did was we had put something like this right position dot X is less than one and question X is greater than width minus one so going by the same logic with minus 1 is going to be 49 because width is 50 so with minus 1 is going to be 49 so what you want you want something greater than 48 not 49 so it's going to be with minus 2 and that should fix the issue and for the other wall which I just showed you there for the rightmost what is happening is we are first drawing the board we are moving we are actually changing the direction of the stick we are moving this need and then we are actually this movement is movement is not shown to the user this moment should actually happen after this Collision sectional so you what you can do is you can just move this to the end or you can even move it doesn't matter basically the port should be updated after the snake goes not before the snake moves that is what is happening over version the code is actually getting updated before the snake moves so that is why you have not seen whether the snake has been collided or not so you can just move this thing to the end or move this thing to start basically they both mean the same thing right go for the next Loop the starting point is going to the end of this move so they mean the same thing so you now this should fix that issue that you're not seeing the snake colliding and now you should see that a snake actually collides with a wall before editing this game right so it went inside the wall and the game ended and now everything is pretty much fixed and now let's proceed to making the Snake Game a real sneaking what is that we need to include the snake's body we are just growing the snake which is basically just increasing the length right so here you can see it's just increasing the length so how can we store the snake's body well what is your body it's just a collection of body parts and that collection must have triggered something inside you well they are going to use something like an array which is a collection a vector which is also a collection which was seen in the pointless video and the other thing is list right so these are three options available to us as of now I'm going to use one of this now let's unless what we need to use over here needs to have a fixed size while defining and uh how do we know the fixed size of the snake well if a player like me is going to play he's probably going to get defeated in let's say fire 10 points at all but because I'm a very bad player and maybe a probe player comes in and he can make a score as big as 1000 or 10 000 right well you cannot restrict the players or you cannot estimate the player's capacity by just uh keeping a fixed number what if the player is better than what you thought he should be right so here what you can do is well in this particular board you can actually fix it to some big number so let's say uh foreign height is 25 right so the maximum number of characters possible is this thing 50 times 25 out of which you are using the borders so that is the only number of characters so if you make the snake as because that after that there is no possibility of meeting because the snake has to collide right because the maximum free space has been used has to connect with one of one of us and the game well that is a very cheap way you don't have to do that and by Define it with Graphics we generally what we do is we'll take off such limitations right so that is why you have such a tiny portable walls and all to take care of this issue but uh for this particular game uh we won't be talking about the teleportable ones well in the end I will show you how to create and here basically the array is a very bad option because you are restricting a player's capacity and if you talk about vectors well it is dynamic but again it is going to take up some extra space while defining so if you remember how Vector is first Define some amount of space and once it gets filled up it will Define a bigger space and then copy all the elements to this and get rid of this particular space so this one could be used just could work but again there is some extra space which is getting wasted so basically the best option here is going to be less so if you remember from our video on the pointers will be first discussed when to use vectors versus 20 useless you saw that list can be used whenever you have a data structure where you won't be accessing the middle elements more frequently you are just going to access the first and last language that is the case here also right you are not going to access the middle Elements which is basically these body parts we are not quite access it we are just only concerned about the head which is on the front of the data sector and then 10 right so we will talk about how to uh actually manage the hydrogen tile in a short while but for now the head is at the beginning and the tail is at the end and they are only bothered about basically when we want to check the position we need to continue the middle element also but we can just do it and Progressive Loop right so basically it doesn't make any difference and we can't actually harvest the advantage of being able to pick some random element from in between well in a vector we can do that very simply because it is a continuous collection but in a list you if you remember it was something like this right your point you have pointed to something and then you have another pointer which points to this and so on right so if you want to pick this thing you need to travel all this way but then I vector or in an array you can just pick that up using the index it is basically the starting position plus the number of steps you need to travel so in this case a list would be the best thing to implement but to keep this tutorial simple I am using vectors for this particular demonstration so I would totally encourage you to go with list not with vectors as we are going to see in this video I am just showing you with vectors because it's easier to relate than this right but once you are comfortable by implementing this particular project in a vector please go on to try it with a list list is the most preferred option for such games where you don't have to control the capacity of the user right Vector is not going to control but basically the extra space is Generation right we don't want that so please try it with the list and let's now move on to the logic of creating the body you need to just clear that and how do we Define the body well it's really simple so let's say I have two body parts basically a tail and the head I have this head over here and the snake has to move to the right so what can I do well what if I just remove this tail and then put another head over here and make this as a tail so for tail let's just say this x mark over here that we know City now if you see that the sneakers put one step to the right right and if I do that again so I take out this tail I include the head and I made this head as the tail now let's take a smooth again and let's say we are eating the food at some location so we'll start with an angle snake so this is the snake we have and the food it is going to eat this particular food so it has eaten in the next iteration what I will do is I won't take off this tail right I will keep this day and this is what happened right so I add the head I won't remove the tape but I'll make this head as a thing right so now you have two tails and one head and that basically looks like the snake has grown right from two body parts it has grown to three body parts and that's what we want right so this is the logic we are going to implement and we are going to do that in factors again list is the most preferred option please try it with a list not with a vector after you are comfortable basically right so let's just go to our snake.h and quickly create a body definition so we need Vector obviously so hash include Vector which are going to do it to the list you know right as include list and uh well since Vector is a standard scope element you need to specify the scope so using namespace HTT like we did in the main function and here you can just say vector body sorry vector and what is the data type it's going to be coordinated basically so chord and then body and this defines the body of the vector now there are few changes we need to make what is that first of all we need to include the head to the body eventually create a new snake so in this snake called Constructor what we're going to do we are just going to say body dot pushback which is basically pushing back the elements inside a vector and what we need to push back we need to push back to position which is basically the position of the head of the snake right we can just body not push back that particular position and while moving the snake following that logic which we just discussed what we are going to do is first we are pushing the head of the snake to the end of the list or end of the vector so how we do that 4D dot pushback the new position which has been updated after all these things a new position and now what we'll do is if the body's size is greater than the length of the snake what is the length of the snake that is the thing we are growing when the snake is actually eating a food right so that is the thing we are manipulating over here so this length integer if the body is size which is basically a number of elements in the vector is greater than the length then what you do you just take out the element from the body so how do you do that you just say body Dot and if you're actually confused with what function you need to use the best thing I would suggest is not just memorize the function but just use the resources so you can just go to your web and then search something like CTP vectors documentation and you'll get a lot of resources and C plus plus.com is the best one among them well I feel that this is the best one where you can find short descriptions of all the functions right and here you should be a function like pop back what does it say it says it removes the last element in the vector effectively reducing the container size by one but we actually don't watch this and well why is that if you see but technically the tail should be at the end of the body but if you look at the structure what we are doing is we are actually pushing back the head one step to the right right so this is what pushback does so basically our head is over here and your tail is over here and what we need to do we need to remove the first element so how can we remove that you can just check out the functions over here but to save the time I'm just going to show you the function which is basically clear or Aries right so you will find this one this is basically going to remove from the vector either a single element or a range of elements right so here we just need to remove a single element at a position is not an integer it's a pointer so here you can see it says the definitions iterator position and iterator first and iterated last well you can go with any of this uh the only difference is that it has a concentrator with we don't have to know at this stage of it you can you can just go and search what these two things are basically they'll be the same thing and how to use that you can see an example over here it says dot erase my Vector dot begin plus five so plus 5 is basically going five steps away from the first element which is specifically the Sixth Element and that's uh how would you use this arrays function has also shown an example to delete a range well we are not quite interested in anything we just want to erase a single element which is going to be our first element because our first element is the tail and what we can do we can just change my Vector dot begin plus 0 that you stay at the first element or you can just omit the zero and just say my Vector dot begin that is going to erase the first element so let's Implement that what we are going to say we are going to say body dot erase and what we're going to erase we are going to erase the first table which we can get by Body dot pick and this is the pointer for the first right first position right so this will basically erase the first element from our list and well before proceeding let's first see whether this is working or not and we need to create another function will let us keep this function for now and then create another function just in case something goes wrong so vector and it is going to be coordinated you need a coordinate Vector to be written well basically you are going to return the snake's body so snake and then let's say get body and inside this we can say written body and in the snake.h you can just create that function definition which is basically vector chord oh sorry what is that dead body right so now we have update for this next definition now we'll just update the board and what we need we first need a Victor to capture the snake's body so Vector go on let's say snake body equal to snake dot get body and inside this what we are going to do well just remove this Edge and we'll place this afterwards what we're going to do is inside the edge we are first going to Loop through the snake's body and see whether any coordinate matches or not so what we can do is we can just say s body part which will stay false in the beginning right we'll change that in the loop now what we can say is for in well ijs your steps of k equal to zero um K is less than our body which is net body dot size and K plus plus what we are going to do here is inside this Loop we will say if I coordinate which is basically going to control the y coordinate is equal to the snake body of the kth index dot X sorry dot y and J plus 1 well remember that's the logic we were missing up equal to snake body dot sorry snake body of that particular index Dot X if these things match up then what we need to do you need to display a body part so let's just go with the small o for now this is our body part and this body part becomes true equal to true and what else well we don't want to run this still right because at at an instant a particular body part can stay only at a particular location so if that location is occupied it is pretty obvious that any other body part you want to occupy the location so you can safely break out of this Loop you can end this Loop and at the end what you can see is a empty space you know the empty area right and here another thing is here we are going to report it outside but remember body includes the head right so what you can do is we can just say body dot size minus one which will basically leave what the last element and now this should work and let's try to implement this so F9 and here you can see that the snake has grown so the other foot is over here so we will ID that and the third foot is over here well you can see that the snake is growing right so here you have four body parts of the snake and now if I eat that here now you have five right so now we have a working snake game right so now you have a working snake game and this works pretty fine right so now the you can see that the animation also works pretty fine the body part ship to follow the head and so on right so this concludes our game well I promise you that uh we'll be seeing how to uh create a teleportable wall and before that if you want to show us code that is also pretty simple what you do is you just say here end score I will just keep it Global so that you can use it on the port function also so here you can just say end score which is going to be 0 in the beginning and well you can just set this to zero in case you want to say play again something like that what you can do is instead of main you can just say game and this is going to provide game because I'm not going to do that you can do that right so if if I I want to play again you can ask a question do you want to play again or not something like that and if I press yes then you can call this function again and then you can set this thing as zero so core equal to 0 before the beginning option you give and here what you can do is you can just say score plus plus very simple and if you want to give 10 points or something like that you can just do that score or equal to score plus 10 or any shorthands of Windows code plus equal to 10 or something like that you can do that over here and here before starting to print out the port what we can do is we can just say C out our score so score is our score current score and just add couple of new lines so it looks neat and that should take care well I have one return function over here that is this full oh sorry the snake pause which is actually getting the position of the head and we are also getting a position of the body right and we did not Define the Collision of the snake right so we'll do that those things first of all let's just see whether this thing works or not so now you have this particular snake and I ate that the square is 10 now I hit that score is 20. I hate that score is 30 and so on so it's working pretty fine right so you can close that and to take care of the Collision when you might have figured it out by now what we need to do well what you need to do here is you need to say else and you need to check whether it collided or not how do I check that well you don't need else you can directly check it inside a loop and then return it so what you do is for paint I equal to 0 I is less than the body dot size well it's inside the snake so I don't have to call that I can just say length minus 1 because I don't want the head and it's going to be I plus plus right and what we need to check if our snakes have head is basically pause right so if POS dot X is equal to any of this need body will it is not straight body is just body body of I dot X and the y coordinate is also same constant Y is equal to bodies I not y if these two things match up just say return to yes you collided if these two things don't satisfy the rent just say return false so they should take care of the Collision so let's just try that out for F9 to build and compile this and here you have this snake and the foot and let's first go for our first food we have grown and the score has also increased and the second foot but it's going to take a while if I go like that let's just go in one body part every time right so what I can do is I'll just write a equivalent well how can I Collide well I'm going left now right so if I just press right I'm just going to collide with my neck so basically I collided and now you can see that the process has stopped basically all Collision algorithm is working so that basically ends this game and if you want to make it teleport all it's really simple what you need to do is I I am sure many of you must have figured it out right now well you just need to play with the coordinates so here if you see in the snake mostly what you do is if you want to change the location of the state you will just say here if this particular thing if position dot X is greater than the width minus 2. then what you do you just say position dot x equal to zero so simple and again what we do if you say if position dot y or sorry position dot X is less than 1 then what you do you just say position dot x equal to the width minus 3 sorry about that it for random function we need to use with minus a because uh for generating the random numbers in that range so it's basically with minus two and this will make the side walls teleportable so if you just save that and now if you run this you should be going through the sidewall and coming from the other one and now if I go through my sidewall I should be appearing from the other wall so you can see that it has been kind of teleportation now if I eat that our table also follow our uh steps right so if you go from there you appear from there right so it works good please so that is how you make daily portable walls and uh once you get to know about file handling basically how to write files what you can do is you can even have a high score option so you can write down a particular high score on the file so let's say I opened this game right now and I scored about 10 points and you scored about 1000 points so that's pretty reasonable I'm not a very good player but yeah so you scored about 1000 points and that is a high score right so here if you run this program again that high score gets lost so instead of just writing it on the memory for that particular kind of run what you can do is you can have a file where you can write on all your high scores and then whenever you load this game you load it along with the file so inside that file you have all the high score relation if you want you can just have names also so some games provide that right so you have the name under the high school so other than that you can design everything and we'll come back to just while discussing files issue because traditionally what we do is we just write Files about students and all this stuff but we'll come back here and we'll try to work on this game more and trying to create a file and again this is the totally working game and if you want to implement this and if you're comfortable with implementing this with this kind of a vector well I have made some related functions like this is completely sorry this one is completely unnecessary because I'm getting the head along with the body so you can take care of that and again I will advise you not to use a vector user list and here if you uh want to include another teleportable wall there is a this one you can do that again with a similar kind of logic for y axis right so you make basically all four four of the walls teleportable so when I I had actually implemented this game in Python and if you use a graphics Library you will be getting results like that so if you go to our python one so here I have my game well it is basically written in two files one has the classes and one has the script and it has various images so what I have is the snake in part so here you can see body horizontal so whenever that snake is breaking that particular direction you show that image and now when you can run this thing right over here you can see this game this is what you can make with a graphics Library well this is pretty fast but this is what you can make with a graphics library and you can see how smooth it is and it doesn't have any uh kind of issues like moving down faster in the vertical Direction moving small in the horizontal Direction it has kind of same speed because you can control it right you can basically control the number of pixels and all and if you see it is teleportable on both sides if I go from the bottom it up from coming from the top and if I go from the sides I end up coming from there so this is how you can Implement your games and this is basically the same logic which I've implemented except that I have some additional functions handling the graphics of the screen right nothing more than that it is basically the same exact logic which we'll talk about in his console but when you use a graphics Library you get results like that so once you're comfortable when programming this particular game on the console I will advise you to uh look up some graphics Library which is available in C plus plus there are many so see what you're comfortable with and try to implement such games on Graphics even the tictactoe game can be implemented on the graphics Network and that really looks good instead of the concerned right so well basically what we are learning here is how to think and console is the best way or the best platform to actually put down your ideas in a very fast way well if I want to do the same thing in a graphics Library it will take a really long time I need to ensure has a graphics Library I need to do a lot of things before getting all these things right so if you're coming up with an idea I'd rather recommend you not to go to a graphics library but first think and then put up a dirty kind of working prototype on your control and then you can beautify it on the graphics Library so that's it for this particular video hope you enjoyed this and I encourage you to build up your own game by changing the loss and then by you know making it faster on the X and slower on the y or something like that I didn't do that I just went with a very simple approach but I'm sure you can do that in this video we will be talking about inheritance with inheritance in C plus plus or any programming language it is no different from what we know about DNA items right so what do we know about inheritance a predecessor shares some of his properties with his successor so say a father has a green eye and maybe the sun will also have a green eye because of inheritance of genes right so that is what we know about inheritance when in programming tool there is no difference in the concept if there is a parent class and there are child classes which inherit some properties from the parent class that is what inheritance means in programming and we will see how to do that in C plus plus now why do we need inheritance well say I have a class so here I have an animal class so I have some properties in the private section and I have some properties in the public section and now I want to create 10 animals well it's pretty easy right so since we know but at least what we can do is we'll just say animals or animal 810 we have created 10 animals now let's say I want to create 10 tigers and 10 dogs also and all they all have these similar properties but the only difference is that a tiger will also have another method called Roar with this White Road which will print roaring on the control and similarly a dog will have bark right so how do we do that well if you think you're copying the clashes and then creating two different classes for tiger and dog and then creating two different arrays in a similar way they're not wrong it will work but in efficient way would be to inherit the properties from this animal molecular well if you see tiger and dog both are animals right so both have a species name both have an age both eat both sleep but the only difference is that a tiger Roars and the dog parks so if you can take advantage of all these properties from one class and add whatever extra features you want to add then that solves the problem of creating a separate nucleus right so what I mean is say I have a clash tiger and then I have some method like public World role and then this is just going to print out drawing on the console now say I want this tiger to have all the properties of an animal it should have a species name it should have some age and then it should eat it should sleep and all those things so you can just copy it down by an efficient way would be to inherit them and how do we inherit something well we'll just put this onion over here and then good public animal when we will talk about what this means right so for now this is how we can inherit the properties of an animal and now if you create a tiger you will have the properties of the animal as well as the tiger so I can do T dot e which is basically defined in this animal class it is not defined in this tiger clutch and I can also do T dot row that is also valid and now if I run that well string does not name a type yeah that's because I did not use using names with a studio above close that and now here you can see eating and closing so eating is from this thing from the animal class and drawing is from the tiger penis well if you want to create a dog it is very similar you can just do Clash talk and then public animal and here you can just shape public World Park which says button on the console then right so now if you run this well editor create a dog object so you can do that completely dog D and D dot eight data Park the question is right so you can say d dot Pi when after done this you will get similar results you will see eating and then biting so that is the advantage of the inheritance you can take advantage of all the features which are defined in the parent class or you have something called the base because there are different names for this so there's in some language it's called super Dash and then it's also called as a base class it's called the parent class and there are many names and then this one also has similar news so this is called a child class and then this is called an inherited class or something like that right so basically we'll just stick with parent child because that fits to analogy and uh that's how inheritance Works in C plus well it's that simple and now we'll just talk about these things and uh we'll also see how to take full advantage of inheritance in later videos because it's not a one video topic inheritance is very vast and then there are many advantages of inheritance so we'll see what these things are in this video we'll see how to do basic inheritance in this video and then we'll see how to do multiple inheritance and all those kinds of complex stuff in later videos right so first of all talking about this this will specify where to inherit and this class will specify from from there to inherit so this is to where and this is from there so let me just write it down this will specify where a tiger do I have to inherit and the other one will from there do I have to inhale so these are the things we are specifying what we are saying is you create a class title which will inherit all the properties which it can generate well there are some restrictions we'll talk about that but this statement this particular line means that create a class title which will inherit whatever it can generate from this class which is animal and put everything in the public section so that is what it means so public means it doesn't mean that everything is going to inherit is going to go into the public it means that whatever it inherits just inherit as a structure so if you see here you have private and public right so when you are inherited it as a public inheritance what you're doing is you are just maintaining the structure so a private anyway doesn't get inherited so if you have anything else that is going to give into that section and public things will go into the public section well you can do to drive it here too so you can do something like private what this will mean is it doesn't maintain the structure it will just put everything inside the private section so all everything it indones go to go to these methods are not not accessible from here so now if you run this okay I inherited in the tiger class so let's just make dog as private and now if I try to run this I will be getting it error why because I have made it private inheritance that means whatever I can generate I will put everything in the private section so something like this will be created inside the memory and these two things will go inside here the private doesn't fit indicated foreign to that particular class what gets inherited is public and protected so remember protected from all video on classes well we talked about protected very briefly over there because we told that protected is better understood in linear regions so we'll talk about that now well protected is basically when you have something which you don't want to share with objects but you want them to be inherited so something like this I don't want species and age to be accessed from objects of this class if I create an an email object I don't want the species and age to be accessed from that object but I want those things to be inherited so at that point of time I will make these two things as protected members so protected means I cannot access with an object but I can inherit them so so what I can do here is instead of private so let me just I can just protect it here so don't do it and now actually these two things go inside tiger and dog so if I do something like public here well I as I told you it maintains the structure right so if I do public here and then I'll just create another method right so avoid set the page which will basically set the heat so you so each and then this age you can see here age is actually coming here which is basically not defined in this tiger class but it got inherited from this protected class sorry this animal class so if I do this H equal to H it is going to work and uh what we can do here is T Dot Sony T dot set each to something like 10 and then we can also retrieve it so let's say in get H great damage and if we try to print that each so if I do c out T dot h sorry T dot get H and if I look in the console you will be seeing 10 which we have set here and that age is actually derived from this animal class right and now if I try to create something like animal or even tiger if I do Tiger DOT H I won't be able to access it so if I do T dot a is equal to 10 I'll be getting an error so it says if you look in the debug console it says that in animal age is protected so that means that I cannot change that it is like a private member to the objects but it's like a public member for the internet so that that's what protected means so this is for the private so this I did not change this method this is for the private team for protected it means that it can be inherited by cannot be accessed by objects public means that it can be accessed with objects as well as it can be inherited into other classes so that's all about basic inheritance in C plus so again as a recap this will specify where to inherit so if I do protect it here what is going to happen if I do protect it here everything is going to go inside the protected function so why do we want to do that so let's say I want to create another thing like uh for now let's say tired baby it's the baby of this tiger so if I want to inherit something from this I can do something like this public tiger which is completely allowed now what is happening something from here is going to get in his written inside the tiger and something from Tiger is going to get inherited inside this class which is called tiger baby and that is how inheritance works and that's how it boosts your programming in this video we will be looking at the different types of inheritances we can perform in C plus before beginning I would like to kind of put a note here that whatever we are going to discuss today are not to be taken as the only things available for you right so these types of inheritances or Frameworks as I call them these are to be used only to model your program so there are many kinds of problems which cannot be directly solved using the four or five types of inheritances we are going to discuss today so you need to kind of model the problem and use a combination of one or two and maybe sometimes even all four types of inheritances and then create one and actually that is mentioned as an inheritance a type of inheritance for you so the point is you need not remember all these things but as a computer programmer you are supposed to know that these things exist these Frameworks exist these are nothing but just to help you model your program and not to be used directly but to be used along with proper planning and then uh you know kind of modeling of your problem so The Inheritance problem has been there for decades and it's not completely solved even now there's no kind of hard and fast rule to say that this particular inheritance model will do better than that or for this particular problem only this model will work there's nothing like that you can try with different models of inheritances you can try to combine one or two types and then come up with your own custom type and all those things so these are just like a starting point for uh modeling your problems right so with that let's get started so here I have pulled up a website which which is student tonight.com so what we are going to do from this website is we're just going to refer the names from here and then the images so here they have beautifully provided kind of images here to visualize how The Inheritance would look like and then we will Implement that in code and we'll use the same notation here as here you can see they have used a as a superclass basically which is the parent class and B is the subclass which is the child class so we'll use the same naming in our code too so that you can relate with this right so let's get into it one by one so the first type of inheritance is single inheritance which I'm sure everybody is familiar by now so we have been doing this in the past video which is nothing but you have one single parent and one single child so to implement it quickly let's just create a pen a Class A and um we'll keep this simple we'll just have a Constructor and Destructor right so to create a Constructor you just put a function definition just like that without any return type and then um inside this you can pass in parameters but for now I'm just keeping it empty so here we'll just say once connecting a right we'll see in a moment why we are defining this concept is right so we again needed Destructor so for Destructor what you need to do is put a tied symbol T and Define the Constructor as it is but here the only difference between a Constructor and Destructor is that Destructor is meant only to destroy the object right it is only meant for distracting the object when it gets out of the scope so it doesn't take any arguments so you cannot pass anything here unlike in Constructor you could do something like int a in a Constructor it is allowed but in Destructor it is not right this is just to kind of debug your program when your object is getting out of the scope and all right so here we'll just see and that makes a now let's create another class simulator to this class B so copy that paste that and we just need to replace it so replace all a with b and you need to match case from the cursor right so replace that you don't need to replace these things you need to replace these things well now we have another class ready now to inherit a inside D I hope you remember that you just need to put a colon and then the access specifier where you want to inherit inside P will keep it public and you are going to specify which class you are going to inherit from which is a in our case so a right so here we have a single inheritance as shown in this picture right so you have one parent class which is getting inherited into a child class so here you can see parent classes a and a is getting inherited inside B so now if you create an object of Class B so if I say b obj obj stands for object so and run this thing so well I did not put any new lines here so just put that so that we can differentiate the output and you know kind of run through what it actually means right so putting the new line you have this output and let's break it down right so first you have constructing a and then constructing P so if You observe here we are not constructing a at all right but why is this statement coming this statement should only come when I create an object of a right and here I am again distracting a which I did not even create so what is happening here will object creation is called instantiation right so it's called something called instantiation so what it means is you're going to create a virtual object it doesn't actually exist it's actually not a physical object it doesn't exist in a memory what it means is since I am inheriting from a for a computer inheritance means you need something from a inside Class B and everything is not defined inside Class B so in our case there's nothing special about A and B right so a just has a Constructor and Destructor and B also has a Constructor and Destructor and practically there's nothing to inherit from a but for a computer it doesn't look at those things it just knows that it needs to inherit from a inside D so assuming that a has something which B doesn't it first creates the a kind of instance of an class instead of the parent class which on in our case is a and then it will pass on those properties to class B that is why in the console when you are creating an object B you're seeing constructing a first here that is because since a is the parent class it it assumes that there is something important inside the parent class which is not there in the child class so that is why you are inheriting right the main purpose of inheritance that is why the compiler is built to do that so first it will construct a then it will construct B and while destructing it will destruct in the reverse orders right so construction happens from A to B that is parent child and destruction happens from B to a that is child to parent and this will continue for any level of inheritance we will just see what levels are right so this is basically just simple inheritance or the single level inheritance in C plus plus right now let's move on you have multiple inheritance multiple inheritance basically means that you have multiple parents for a single so here it has demonstrated the two but there you can have as you have mentioned here you have classes which can inherit from more than two classes also it totally depends upon your problem now to do that it's almost similar you just need to take this out you need to duplicate this class B so take this copy that and replace this thing so you need to replace B with C so replace yes yes yes yes yes yes and uh well you can do this manually now I have a class C and also an object of Class C and to inherit multiple classes what you need to do is just put a comma right so if you just a this is just single level inheritance basically what it means is a is the parent C is the child and c as a child is inheriting everything from parent a right that is that and for B you just put a comma and then put the access specifier I'm just going to keep it public here you can do protected or private as your problem but for now let's just keep it simple we'll just use public for all our inheritances right so public a public B now you have multilevel inheritance sorry multiple inheritance right and now if you run this you have this kind of output now the thing to be noted here is it's almost similar right so first a is constructed B is constructed then C is constructed C is basically the actual class which you are working upon and then the destruction is just the reverse order of conception the thing to be noted here is if you change the order of inheritance over here it will be affecting the order of creation also so here I am first inheriting a then inheriting B it reads from left to right so basically first I'm inheriting a then I'm inheriting B now if I change this order if I make this B and if I change this as a and now if I run this that order will be swapped there too so if you see here first it has constructed B that is because it is appearing here first and then a is constructed then C and basically this order is just reversed while destruction right so destruction follows that same procedure the in the order construction happens destruction happens in the reverse order right so that is about multiple inheritance disorder matters and you can have as many classes as you want inside uh this particular class you can inherit from multiple parent classes right so if you had more financial class so say public some tea and private e all this is possible basically it will just construct the classes in this order first B will be constructed a will be constructed D will be constructed e will be constructed then C will be constructed right so that is about multiple inheritance now we can move on just take out this website and here you have something called hierarchical inheritance so in multiple inheritance you had multiple parents in hierarchical you have multiple children so that is the difference between multiple and hierarchical you have one single parent and that single parent is inherited by multiple children so we have already worked upon one of the examples on this particular hierarchical inheritance structure that is when we are discussing about the animal class so if you remember we had a class animal and both classes like the tiger class and the dog class inherited from the animal class so that was an example of hierarchical inheritance so to do that here we can just put something a and public a so here you can see that a is the parent Class B and C both are children of a so both are inheriting a so this is basically an example of hierarchical inheritance and uh it's basically if you just create an object of C it's just going to look like simple inheritance or single identity because uh if you just remove this B from here what you have you just have a parent class and then you have Charizards which is inheriting from the parent class which is nothing but an example of single level inheritance so basically it works in the same way so now it will output something similar to single level it just seek the parent class constructed the child class and the destruction is a reverse order right so that is about hierarchical inheritance and now the other thing is multilevel inheritance now the difference between multilevel and multiple inheritance is that in multiple you have multiple parents but in multilevel you have a tree kind of structure so a multilevel basically is kind of uh more generally used inheritance framework because um this basically transes from a more generic class to a more specific class so what I mean by that so let's say um an example for a general class could be animal so animal is more generic I could mean any animal by just saying animal right so if I have class animal and then I want to be somewhat more specific so I mean I'll just increase my specificity level and let's say I have a class doc so now I'm inheriting from animal inside dog so here uh if you see that chart here you have a which is animal and then B could be dog so now I am inheriting the properties of animal inside class dog and if I want to be even more specific like uh choose some breed of dog for example so that could be C so basically you are moving from a more generic class of objects to a more specific class of objects so that is why multilevel inheritance is basically uh used mostly but as I told you it doesn't have to be it totally depends upon your problem right so let's quickly implement this so the way you implement is you have a b is inheriting from a then C will inherit from P so this is multiple right multilevel is you have two or more parents and the child will inherit from them and in multilevel you have a kind a tree kind of structure right so now if you run this you will get a similar output for what you saw in multiple basically the order matters here so first the parent is constructed then the b b is basically the child of a then C which is nothing but a child of B and then the destruction will happen in the reverse order right so that is about multilevel inheritance and then in the end you have something called Hybrid inheritance so Hybrid inheritance is nothing special it's just uh you know it's just a kind of combination of all these kinds of it narratives here is this just said that it's a combination of highlight care and multilevel what I'm saying is it doesn't have to be so this particular framework it it doesn't have to look so neat so here you have two classes just directly inheriting from a and then you have one single class inheriting from B and C also so it it doesn't really have to be in such a clean format it totally depends upon the problem on the way you are going to solve your problem so high radical or sorry the Hybrid inheritance of the virtual inheritance basically means that you are going to create a custom model custom inheritance type by using these four types so the single multiple multilevel and then hierarchy we're just going to use a combination of these types and then create a custom model which may look like this so here if you see if we just close this D part what you have here is hierarchical and then here you have multiple right so that is basically uh the uh gist of Hybrid inheritance and now in Hybrid inheritance I just remembered by looking at this figure actually this figure is an example of a very famous problem called The Diamond problem so it's a very famous problem in inheritance basically the structure looks like a diamond right so here it is basically not drawn in that way open up paint and what you have is you have been in class okay so a for example you have multiple inheritances like this so you have B and then you have C so this example is from here the hierarchical inheritance right so okay we will start yeah so this example is from the hierarchy inheritance where you're a single parent and you have multiple children then what I'm going to do is combine these two children to another kind of child which is d and what is this example from so if we just remove these things don't consider this just consider BC and then you have D it is basically an example of Justin right multiple inheritance so here you have a hierarchical and then here you have multiple and this structure which looks like a diamond is a very famous problem because this doesn't know from where it should inherit so see if you are taking this particular path so from A to B B to D then you know that you just need to inherit a but if you're taking this part because it is also a part of the parent right so C should also be inherited and for C A should also be inherited so the problem is should this inheritance happen because it's already happened right in case of B so if we just search for that you will have a more concrete explanation of that so time and link okay especially it's not a language dependent problem it's a it's it's the problem of multiple inheritance okay so here you you will find a more clearer example basically it says the same thing which I said here so name and age needed only once that is basically the person class should be created only once but if I'm taking this path I should I will be creating this but since the this class which is faculty is also and a parent of ta which also has to be created so should I include the person class again or not so that is the main question and we will be solving that by using something called abstract classes so here you will be uh seeing some examples of that used here the abstract class methods but uh since we did not discuss it till now I'm not going to go into detail right now we'll be going into detail in the next video but this is the problem you can read this uh to get some more insight into this and um that's it for types of inheritance in C plus place in this video we'll solve the diamond problem which we discussed in the previous video so if you remember that I had referred you this particular website where the timing problem is beautifully Illustrated so the diamond problem is you have a base class or a parent class from which multiple classes are getting inherited and then you have another child class which are using the inherited classes as the pairing classes so let's quickly create a program version of this so let's see Class A and um we'll again keep this simple so we'll just we'll just have a Constructor and Destructor as we had in the previous example so you have a and you have a Destructor which is this truck okay destructing a and uh we need to create another class B so create that and we need to change the A to B so the a is going to change into B so replace and we again paste that change document also aim to C now so we press a with c so then and again create another class which is going to be T right so because we need four classes right um let me just quickly show you that picture so this class is being referred to as a you have B and C two more classes which are going to be inheriting from a and then you have another class called C which will inherit from both D and C sorry this class will be called T which is going to inherit from both B and C all right so um this is going to be D so replace that with d and then so now let's make the inheritance as quickly so Class B as I told you is going to inherit from a Class C is also going to inherit from a if you remember this inheritance is nothing but hierarchical inheritance and now we are going to inherit from both B B and C which is nothing but multiple inheritance so public B and public C right and now we'll create an object of D and we'll see what exactly the problem is so d uh say obj and now if you compile this what do you have okay I again forgot to put those new lines keep forgetting that so slash n over here and over here well now if you run this particular program what you have you have constructing a constructing P constructing a constructing C and then constructing D and that makes sense right because we are first inheriting from B and B is inter inverting from a so so first B is going to be created which basically means that a is first going to be created then B and that is going to get inherited into D then you have see which again inherits from a so first a is created and then C is created and then you have created the T right now the problem is if I try to touch a from which path should I go so I mean uh we'll just quickly draw that so go to the paint here and uh we have a you have two classes B and C this and then you have combination of these two classes which is basically the class D so this is T num if I create D in this part or in this path if I start creating that I'm again going to create a indefinitely right so as you saw in that output we had created it two times so here you can see constructing a1s and constructing a the second time so we need to avoid that by because say I want to access some properties of a right and B must have modified the properties of a we don't know right so suppose there's something called X here some variable and B what it did is it made X to 20 and C made X to 30. just take this as an example now at this level it's okay just forget about the D for a moment for this level it's okay there are two separate children and they are doing whatever they want with the inherited properties now the problem comes when D has to access X shoot it follow this point which is x equal to 20 or should it follow this path which says x equal to 30 what it should do so uh to demonstrate that let's just create a kind of public variable just name it X so Index right for now and um here uh well we don't have to do anything we can just try to do something like since it's just public and we are just doing public inheritance we could do something like obj dot x equal to 10. I could do that right this is perfectly normal now if I try to run this but it run this I get an error what is it it says request for member X is ambiguous why is ambiguous that's the same thing I just told it's ambiguous because it doesn't know what to do so even if I try to change it over here or as I explained it in the picture if I try to change it in one of the inherited classes if I just change it in one of the inherited classes so if I just keep it x equal to 30 here and just leave it then also it's going to be a problem because it doesn't know whether to keep it the same or to change it right so this is the main problem which is called The Diamond problem the thing is it doesn't know which path to take should it change X through b or should it change X through C or basically should it change the X over here or not should two copies be created of X which will lead to ambiguity and um well if you don't create X at all then there is no ambiguity right but again why are you inheriting you are inheriting something because you want those properties inside the child right if the parent doesn't have anything useful for the child to inherit there's no point in inheritance at all right so this problem has to be solved and how do you solve that you solve that using something called virtual inheritance so what does that do well if you see here what we're doing we are just creating two copies of a right so what virtual inheritance does is while inheriting into these two classes I'm I'm I know that these two classes are going to be a parent of some other class so now my solution to this is I will keep this virtual that is even if I create even if I create multiple copies they will be pointing to the same object or the same instance which has been created in the memory so while creating a memory map for D say I first create a through b so a has been created once right now if I create it through C since I already have a a will not be created that is what is the advantage of having virtual inheritances so to do that what we do here is instead of directly inheriting a we just do something like virtual public a and we'll talk more about this virtual keyword right for now just keep it like this so you have virtual public a which is basically a virtual inheritance and then you have virtual public a over here now as I told you a will not be recreated again and again so if you have 10 classes like this if you just stop at those classes if I just access B and C there's no problem the problem arises only when I want to go up a level right so I want to directly access the x of a if I had some X of B over here and if I try to access that I won't be having a problem because B is a direct parent or C C is also a direct parent of D but a is basically one level higher right so that is where the problem arises and this is how you solve the problem you just virtually inherit those classes so so now you wouldn't be getting an error and it does run successfully and here you see a has been created then B then without creation of a it has directly created C why is that that's because while creating see it already saw that there exists a copy of a that is why it is not creating a again if it changes order first the a class for c will be created and then B will be created without a now if I change this now if I run this you can see here AC and this a is because of this inheritance and since it's virtual it knows that this should exist only one copy of this particular instance that is why while creating P it will see this statement and then uh look up that memory map and then find out that a has already been inherited so it won't inherit a again and this operation is totally valid so that's how you solve the diamond problem and about this virtual classes this this virtual keyword what it does is it will take care of the fact that there exists only one particular copy that that is what virtual means so uh for something called abstract classes which we are going to discuss in the next video the abstract classes are basically um a kind of base for creating newer classes now the abstract classes are need not be kind of virtual right so see a virtual methods of virtual inheritances these are useful only when you need a single uh kind of copy of the property so say I have a Constructor a over here and if I override this Constructor over here just saying so instead of B if I just say a this is also particularly valid rate so I'm just rewriting that function over here now I can access this a through a method which we'll discuss afterwards right so we can access the methods of the parent class methods or variables or anything of the parent class through a map we we do have a possibility for that now the point of virtual keyword is you shouldn't have multiple copies so basically this is creating multiple copies so through b if I'm accessing a it should be printing constructing B but through a if accessing this particular Constructor it should say constructing a so basically there are two copies of the same function this is called overloading and we'll talk about this in the next video also right so for this particular issue virtual keyword is there which basically means that you can have only one particular copy you cannot have overloading and all and so in abstract classes what you have is if you need only one feature one copy of that particular feature you will make it virtual so that in the inherited class where you have that virtual function inherited you need to Define that function indefinitely inside the class so in Virtual classes what you do is you just create a virtual method and then leave that you don't Define that virtual method so in the inherited class what you do is you inherit that method and then you need to Define that method indefinitely if you don't Define it you will get an error I'll do it so that solves a problem of you know maintaining multiple properties and we generally don't actually want multiple properties of the same thing unless in really rare cases right so in rare cases are you going to you know access the properties of A and B through D so it's very rare that you're going to access this but in case you want to access it this is the solution you need to make it virtual right in this video we'll talk about overloading and overriding in C plus plus so let me just write it down here it's overloading and overriding all right so let's first talk about functions for a moment right so when we learn functions we told that functions are nothing but a piece of code to be executed separately so that your program can be broken down into a set of functions which will do the work and then all the results can be integrated together to solve the problem right so now let's say you want a function which can do multiple things that is not possible right when we Define a function if we are defining a function we need to be sure that we pass the same number of arguments or the same kind of arguments to the function to make it work so let's say I do something like uh in terms add which is going to take in two integers so int a and in p and what it will do it will just return a plus b now I can use this function without any problem and I can even pass integers over here right sorry I can even pass characters over here because as you know characters are nothing but integers behind the scenes they have their ASCII values and when you pass a character as an integer it is considered as the characters ASCII value right so basically I can pass integers and characters and floats too because as you know because of the type casting the floats will be converted to integers and the operation will perform but what about strings I cannot add two strings using this function right so if I use this function I can only I had two numbers or two characters and get back an integer I cannot add two strings using this function it will give me an error right so how do we go about solving problems where you want to solve problems using the same function signature you don't want to write multiple different functions for the same thing but all the functions are actually similar in nature that means that these functions can be grouped together so that's when overloading comes into the picture so what you do is you keep the signature same all right you keep that same but you can alter the parameters over here and redefine the function and when you compile the program the compiler will see the inputs which are giving the parameters and then it will use the suitable function definition for that parameter all right so uh for an example let's quickly write a small program so let's write a function to determine whether something a given input is a palindrome or not all right so if you don't know what a palindrome is palindrome is nothing but anything which can be read the same way from right to left or left to right so if we take a word as Madam so m a d a m if you read it from left to right or right to left it Still Remains the Same right so these kinds of things are called palindromes it is the same with numbers too if I do one zero zero one this is also a palindrome right now our problem is to write a function so that the function can identify palindromes in both strings and numbers all right so this is our task so how do we go about this well uh writing for Strings is pretty easy right so let us first write a definition for that function so let's say Bool because we are going to return it true or false and it's called palindrome and uh it will take a string so let's call it Str for now right and uh to compare palindrome what we need to do is we need to uh well if you think about it the logic is very simple I will uh leave it to you to come up with um different methods to solve this particular problem but for now let's go with the simpler methods right so what we can do is we can just iterate over the strings and go on comparing the first and last character of the string and other way to do this is to reverse a string and then compare it well the first way is more efficient but uh I want to take this opportunity to show you that uh string data type has lots of methods in it and one of the method is a reverse right so basically what we are doing we are just when we are comparing whether our input is a palindrome or not what we are doing is we are checking whether the number or the string even if it is reversed reads the same thing or not right that is if it reads the same thing it's a parallel drug if it doesn't it is not a palindrome so to do that what we can do is this string class or the string data type does have lots of methods with it so if you check for string rivers in C plus plus you do have a function to reverse a string right so basically you you can do it manually as shown here you can use a for Loop or you even have a function to reverse a string all right so once again I'm just searching for that yeah this one so here if you see you can directly reverse this using this kind of a method right so I I'll just copy this thing so that uh I don't have to write it again but basically this is the way you can reverse a string and as I told you the other way would be to just compare the first and last characters and so on right so you compare the zero and the last character one and the last but one character two and the last but two character and so on so if you just compare that that will be more efficient so yeah so we can just copy this and paste it over here so that we get the reverse of the string and what I can do is I can just compare whether the string and reverse are equal or not so if the string is equal to the reverse then uh well I just need to return true else written false so let's quickly try some examples here so see out let's say palindrome of Madam all right and uh yeah did this method won't uh I mean allow you to compare strings with uh different cases right so if I if I do something like Madam this won't be considered as a parent normal right so I'm not taking that H case for now so let's just try to keep this simple but uh you're open to try out all the edge cases and then come up with a very efficient algorithm to find out whether a string is a palindrome or not all right so this the purpose of this video is not to explain you how to get a palindrome but uh it's basically to explain you overloading or overriding which we'll do in a moment all right so for now this is our program and if we run this using Ctrl F9 what does it say palindrome is not declared in the scope okay I have written plain room so Talent room so here you get one right so one is basically true and zero is false so you know that right so now here if I try something else so let's just try the casing one so as I told you this should not be a palindrome compared by this method right so we are not comparing cases here sorry we are comparing different cases here so small m is different from capital M right so this will not be a palindrome to the compiler so it will say it's not a palindrome so you get a 0 over here which is false right so we have written string palindrome but what if I pass in a number over here so something like one zero zero one if I run this I'll be getting an error it says could not convert this from into a string so this this whole thing is nothing but this string all right so to to make this Pro this function work even for string either what I can either do is I can just say palindrome string and then Define an entirely different method for integer palindrome or what you can do is I can just say bull palindrome so notice that the signature is same the return type and the name of the function is same but here I'm just going to say in 10 all right and so here I am keeping the integer and to find the reverse of integer you have a small logic so I'm not going to go through a logic basically what you do is you have a multiple very well we can just copy and paste that logic from here since we're not discussing about palindrome so um let's say in Talent room C plus plus why do I keep writing play in Chrome over here so we yeah so this is what you do so basically uh the same thing is going on over here what what this program does is it will find the reverse of the number using this logic so basically reverse of a number is nothing but you extract every number every number is basically the reminder when you divide that number by 10 the r is nothing but the last digit all right so in mod 10 as I told you over here if I do mod 10 it will basically give me the last number and uh sorry about that and um here what you what you're doing is you're just adding that last number by a multiple of 10. so what basically happens is you have one and when you store it what you do is you just store it as 0 into 10 plus one so basically you first have sum equal to 0 like this sum or anything reverse number anything you can call that it will be 0 and you what you do is 0 into 10 plus 1 and you put it inside the reverse number so basically now this has become 1 right 0 into 10 is 0 plus 1 is 1. now what you do is you divide this by 10 so 1 0 0 1 by 10 which is basically 100 so next again you run this Loop so you do this reverse equal to reverse into 10 plus the last digit so let's call this last digit so this is what you do every time 100 so now what you do 1 into 10 which is 10 plus the last digit is 0 so you get 10 here so this is how you reverse the number so let's quickly write that I thought of copying it but since I explained it it's very simple so in Reverse equal to 0 what you have is while the number exists well we cannot directly use the number so you need to store the number somewhere for later comparison right so we'll just say in Num equal to n we'll store a copy of that and while n that means while the number is not 0 so as I told you in C plus plus the booleans and integers are related right so any number except 0 is true 0 is false so it will run until n becomes zero so till then what you do is we will say in the last digit equal to the number mod 10 this will give you the last digit and what you need to do 2 you need to say reverse equal to the reverse into 10 previous value of reverse into 10 plus the last digit and the number will become one tenth of itself so number equal to number by 10 right so this is what we'll do we'll be doing and let's just print out the reverse for now all right so let's just print out the reverse number so that we are sure that it's working and we'll just return uh something so we just return true for now all right so now if you see if I run this program I did not specify any different name for this right so basically both these functions have the same name but the parameters are different so when a compiler will see this it will see that I'm using an integer so automatically it will understand that I am calling this function all right so if I pass in a string here it will automatically call this function but uh here since we have overloaded this function this process is known as overloading basically all right so overloading is nothing but you just take the same function you don't change any word in that I mean any signature in that so the signature Remains the Same you cannot change this return type but you can change the number of variables and the variables nature itself so I can even add number of variables over here it doesn't matter all right so if I do that and now if I run this if I now compile and run this I will be getting 1 0 0 1 that is the reverse number and then the one so if you're confused let me just add a new line over here and we'll run this again and here you can see the reverse is one zero zero one which is what we required and the true part which came from this statement all right so now since we have the reverse it's pretty straightforward just like this one right so you can just do something like if the number which we saved this one is equal to the reverse number then it's basically a palindrome so written true else return false so you even if you write else it doesn't matter because if this is true it will directly return it so I'm skipping the else part so return false over here and this should do right so now if you run this program what you have is for both strings and integers so I can even pass integers over here and I can even pass strings over here so let's say um all right so this is also a palindrome so let's check whether the spelling is right or not yeah perfect so now if I run this I'll get one over here and if I try to run something else I won't be getting perfect result so if I do that and if I run this I will be getting 0 or even if I pass in numbers over here so if I do that this one so this is not a palindrome if I run this I will be getting zero so yeah this is the use of overloading when you have a same function I mean the same function signature but you want to use it for different kinds of variables and different number of variables this is how you can use the same function to achieve what you want right so here uh the advantage is that we are not maintaining multiple copies of the same function but what we are essentially doing is we are maintaining multiple signatures of the same function so this whole thing is called a signature and the return type and this one this should not change all right so only the parameter list can change so this one will only be maintained separately and these two function definitions will be maintained the advantage is that you don't have to remember or give you know informative big names to different functions so well I I don't have to worry about overlining if I'm doing something like this is for string like this paring drum Str and palindome int if I'm doing something like this I don't even have to worry about overloading but this basically the whole point of overloading is that you can have a single function doing multiple things that is the idea of overloading and when is this useful it is useful when we are doing inheritance and at that time this thing is called overlaiding right so basically these two are the same thing all right overloading or overriding just mean that you are using the same function with different parameter lists and different definitions all right but overriding is used when you're over when you're overloading a function in different classes when you overload a function from a base class inside a child class that is known as overriding and if you overload the same function inside the Base Class itself that is overloading so that is the only difference between overloading and overriding or else both are the same Concepts so to demonstrate overriding you can just use this one so what I can do is I can say class say a for now and this is going to be a public definition so that I can inherit it and uh I can just push all these things inside this a right and yeah take care of the indentation over here and we'll maintain another class B and inside this I'll just pass these things again so public and uh pass it over here right now if I do a public inheritance over here what will happen is as you know this palindrome will get inherited inside here but since I'm doing this it will get overrided all right so this method won't be won't act as a string palindrome checker for class B but it will act as a integer palindrome Checker inside Class B so for object of Class B if you call object.parent room if I do something like uh let's say obj equal sorry b o b j all right this is a new object of Class B and if I do obj dot palindrome all right so if I do this it will only be valid for a integer parent room all right so if I not do that you will be getting 0 over here of course it's not a palindrome but if I do that and run this I'll be getting an error it says it is not a integer so to take care of this issue there's something it is a method to actually use the functions of the super class super class is basically the parent class which I'll talk about in a later video because that is something very important and we will be using that very very much while using abstract classes so basically all this overloading and overriding all these Concepts come into play when we are using abstract classes well this is not limited only to the functions you can even overload the constructors also if you want to so that is the scope of overloading and overriding in the previous video we discussed about overloading and overriding and in this video we'll talk about abstraction all right so first of all why do we need abstraction or what is an abstract class basically well abstract classes are nothing but just a normal class with at least one of the methods as a pure virtual function now what does this mean it means that a pure virtual function is nothing but a function without any definition it's it's just a signature so why do we need an abstract class when we can just inherit we can just create a normal Base Class and do the inheritance like this well when you have a very big Clash or very big networks of classes where you're using multiple methods of inheritances and all these things what happens is you at some point you forget the structure of the class like let's say we take this function as an example you are using the palindrome function and these two methods just let's just suppose that these two methods are not methods of the string but you have written these methods inside this Base Class which is classic and now while inheriting you are just overriding the palindrome class now let's say I want to access the string class from class B because I I'm not going to I don't know that there exists a Class A which is the base class of uh this class B I just know that I created a method from class B because this definition won't be visible to me right so as I told you we'll be writing this Clash definitions into inside different files so when I use that function when I use that class to create an object so what I will be seeing is this thing so from here I cannot make out what is the base class or what is the super class or what is a parent class and all these things right so what I can tell is this function I cannot even tell whether this function overwrite something or not and for me this is a completely new class but inside let's say you're just overriding this function and uh suppose you forget to overwrite these two functions which may be a dependency for right now it is not a dependency at all but let's say that while overriding you do need these two functions not necessary for the palindrome function but for some other function these two functions are begin and RN are written by U inside the base class and they are necessary for the overrided function to perform so in that case you are going to get an error and you need to figure out what happened right so for this this particular problem for for this problem where you forget the structure of the class at some point abstract classes are introduced so abstract classes what they do is they have a tendency to just create function signatures they don't implement the functions they just create function signatures so that that you get the functions you need to write them you need to Define them indefinitely you you can't skip the definition so that kind of function is called a pure virtual function well virtual beat it here off in while discussing the diamond problem right so the virtual keyword what it does is it will take care of the fact that there exists only one instance of a class if multiple instances are coming so a virtual function will also do the same thing a pure virtual function but the only difference is that every time you implement it it will be considered as a new function it won't be considered as something coming from the base class right so let's see how to implement that what you do is you just write the function definition so let's say in test it can be anything right so maintain B for now and what I'm going to do is to make this pure virtual and to make this whole class as an abstract class I'll just do virtual interest equal to 0 and this statement this two extra statements will make this function as a pure virtual function and the whole class as an abstract class now what is the result of this now if I try to run this I will be getting an error what does the error say it's at the creation of the object from class B it says that it cannot declare a variable of an abstract type now what is the abstract type abstract type was a because B does not have any virtual pure virtual functions but still these considered abstract because this thing is getting inherited directly so I need to Define this I am forced to Define this function inside Class B while I'm shipping this class so that I maintain the structure now let's say palindrome depends on this test right so palindrome depends on this test function and it is very necessary for me to if I'm overriding this palindrome function inside the child's class is just very much required to override this test function also inside the inherited class or the child class so in that kind of a situation you maintain virtual classes you maintain pure virtual uh functions and you maintain abstract classes and when you inherit you can just Define the function just like that so it's basically the same definition you just need to say in uh A and B so these things are already there and B and you can do something like um return a plus b okay a simple function now since I've defined this function I'm not going to get that error so now if I've run this it will run smoothly and I'm getting one that is from this palindrome check which we performed in the last video right now the other thing is that what if we want to access the functions the defined functions from the superclass that is the pair interest so now I do have the function for uh the palindrome check for numbers now if we're passing a string here it is not supposed to work because string is something which is getting inherited from parent class so if I do this if I do this I'm not going to get a perfect output I'm going to get an error so to solve that what you can do is to access something from the parent class you just put the parent name and the scope operator so this is this two uh colons are called scope operator and if you combine it with the Base Class you will be getting the output run from the function which is inside the base class now this will run without any errors now if I try to run this I'll be getting one over here that is because of this one right that that's because of this little addition over here which will make it work for the base classes too so now if you try to do this for test so let's say it test and I don't want to so because test will take two numbers right in 1080P now if I try to run this what do I get I get an error and it says undefined reference to this function what it means is that this function does not exist in class A that is because we declared it as a pure virtual function so once you inherited it has to be defined inside the child classes or else the child classes are also going to be considered as abstract classes and once you implement that function inside the child's class they can be used just like that so if I just do object DOT test which will basically call this function from class B which does have a definition for test if I now try to run this code I will be getting the output and it returns 3 which is basically one plus two right so that is about abstraction and pure virtual functions so basically this whole concept will be used only this is required all right this is not a daytoday used concept the abstraction and pure virtual function they are not used generally they are used very rarely when you have a situation where you need to do something like this or else a simple inheritance will do its job or not even in returns a very simple class can also do the job for you so these are highly advanced concepts which you may use or may not use in your whole career but it is always a good thing to know that these exist in case you come across a situation where you need to implement something like this so with that let's in this video and in the next video we'll move away from these class object Concepts and we'll do something exciting we'll learn how to interact with files on our hard drive using the file stream and with that we can also explore more about the vastness of object oriented programming Paradigm well as I told you object oriented programming is a paradigm it's a style it totally depends upon the problem whether you need to use object oriented programming or not this this is not a part of C plus plus but this is a part of programming itself so with that let's uh close the object oriented programming for now let's deviate from that and let's talk more about General programming dealing with files how to read files how to write the files and all these things in this video we'll see how to handle files using C plus plus now what is file handling why do we need to handle files well whenever we are running a program where if we are taking some input from the user or let's say we are even generating something which is really important and we need to store those things like uh let's say in our snake game we when we made that we had no provision to give a high score right because every time you run the game the score starts from zero and there's no way to know what was the highest score made till date using this game right so to counter such problems where you need to store data to a hard disk not in the ram because whatever you're doing in the program in its run time it's everything is getting into the ram right nothing is going to be stored onto the disk but you do need something on the disk so that whenever you uh want the data back whenever you want to read the data back you have a way to read it back you don't have to you know again Ask the user to enter everything or you know Miss out some important things and all those things that is why we actually handle files we write files to store data so that it will be useful in the long term now everything in C plus plus as we know runs on streams so whatever we are doing with the operating system with the hardware everything runs on stream so you're already familiar with one of the stream known as IO stream right input output stream which allows you to access your keyboard and mouse using C plus now for files you have another stream similar to this IO stream which is known as the file stream so what will file stream allow you to do it will allow you to access the hard disk of a computer so that you can write files there so you can write many types of files using file stream which we'll be discussing in a later video but today we will start with something really simple which is nothing but the ASCII files SK files are nothing but what you see every day the dot txt files right so we will be writing ASCII files today using file stream so let's quickly import that hash and include app stream and here in F stream you have a class called f streams right so if stream is a class and there are two other classes so let's quickly talk about them one is known as the ox stream and one is known as the if stream now what is Upstream fstream is nothing but a class it will give you it will allow you to create a file object with which you can read write files right but of stream and if streams are nothing but inherited classes so these are nothing but children of this parent class and the use of them is pretty straight forward over stream is nothing but the output file Stream So you use this whenever you want to write out files and if stream is nothing but the input file stream which you will use when you want to read files even you want to take input from the file right so these are the two classes well these are useful for fasting because in the f f stream what you need to do is you need to provide something known as Flags so let me just write it down here you have something known as flag which you need to provide to the F stream class to read to get a particular functionality of the file so when you want to read in a file you put a particular flag when you want to write out a file you put a particular flag and all those things we'll be talking about that later but today we'll be seeing one of such Flags so basically all these flags start with something like iOS you have two uh colons and then you have a string over here so we'll be talking about this flag today which is IOS app which is nothing but a pending flag and we'll see what append means in a short wheel right so the this is about the classes this is just an overview we'll dig deep into it in the future videos but today we will see how to quickly write a file how to read a file and what are the different ways to read from a file right so let's start with writing out to a file so uh for that what we need to do is create an object of of stream output file Stream So of stream and our object is known going to be file right now to open a file what you can do is you can just say file Dot pin and inside this you can pass in the file's name so I'm just going to do test.txt well this file doesn't exist I'll just explain you in a moment what this does but basically for now you can say that this file doesn't exist on my computer it will be created by this of stream class now you can either use this method the dot open method or what you can do is you can directly call The Constructor so you can just uh you know use this Constructor you can just pass in the name of the file over here and that will do the same job as file.open so this is about opening a file opening is nothing but if if that file exists on your hard drive what will do is it will just load it into the ram so whatever changes you make to that file everything will be affecting the original file in the hard disk and once you close it it will be removed from the ram so that's how of stream works and another important thing is you need to always close the file so once you open a file it's really important that you close the file well this should be in the last technically but I'm just putting this right now so that you guys remember that whenever you need to whenever you open a file you always close the file this is a must right so it won't affect your program much but what it's going to do is it's going to clean up the ram so you don't want your files dangling around the ram right so if you don't if you forget to close this file it will be present in the RAM and it will be removed only when you restart your computer so that is the reason uh it's always better to close a file once you open it and and that's about creating a file or opening a file so if if this file exists if this exists where does this file go it just goes in the same directory as this main file so I have this project saved in my desktop so if I go to my desktop and open that project it's YouTube so here you can see main.cpp and uh well I had created this file before so let me just remove that so here you have main.cpp right so this is the directory where the file is going to come now if I just run this program if I just run this I'll be getting a successful run and if I go there I'll be seeing test dot txt over here so this has been created right now once I run this program and it will be created whenever you run this program basically what happens is even if it exists it will just overwrite every everything in that file so if if I write something over here so if I write something like this is a test save that close that and again run this so let's just run this again go back here open up test and you can see it's blank it's gone right so that is what happens when you open a file I will tell you how to save the previous contents but for now let's just talk about creating a file what happens is even if it exists it will be overwritten and a new file will be created in the same name right and it's just like you're just deleting it and creating it again with the same name and it will be always created in the same directory from where you run the program so since I'm running it from main.cpp so here I am at main.cpp I'm running it from here it's creating in this directory and if you go to bin debug here you will have the exe file right so I've told you how to distribute your programs so this exe file will be created every time you compile your program and if I not double click on this the test.txt will be created in this directory now this is different from this one right so when I run main.cpp it will be created in this directory when I run this debug it will be created in this directory so basically if you don't provide directory what is going to happen is it's just going to create it in the same directory and if you want to create it in some other location so let's say um um let's create it inside this obj so here you have a folder called debug right so I'll create one over here so you'll just need to provide this folders name so all you need to do here is I'll just say obj slash test.txt and if I run this and I'll be getting it over here so obj test.txt right so that's how you create files in different locations and whatever it suggests is that you don't worry much about the locations you just create the files and then move it to wherever you want right that's going to be really easy so that's one way or else you can just create it in the exact location you want and work with them it's up to you but for now this is how you create a file and now let's see how to write to the file where open this in of strip mode right so you can write to this file so how do I write this well how do I write something to the console you do something the like this right so CR this is attached this is how you write to the console and let's say new line and this is on another line This is how you write to the console and if I run this what I will be getting is I will be getting those lines onto my console now the way you write to a file is really simple what you need to do is you just need to remove this C out and place file over here so that's how you write something to the file this operator is all that matters because both of the them are streams right and this is nothing but a stream operator this output stream operator that is why what you can do is you can just use this operator to write something to the file and now I just close this file if I run this I'll be creating a file of the name test.txt inside obj well I did not remove this well basically it will be created inside object you will have these content so if I go here so this is not the file so here you can see it's empty it's inside obj and here you have test which has those contents so this is how you write the file right so this is how simple it is to write to a file you just use the stream operator to write to the file and you must have guessed it reading a file is almost similar so now let's move on to reading files I'll just delete this I don't want my structure of the project to be messed up so just keep this inside the same directory and um now to read from a file what I can do will before going to reading from a file let's talk about appending to file what is appending well if I not change this content will be overwritten right so you just seen that whenever I use of stream our file will be deleted and a new file will be created in its place with the same name right so if I now remove this so let's say I remove this so this is on another line is the only content if I now run this I'll be getting that thing inside this file test.txt which has only one line now how do I add something to this I cannot add something right so if I just remove this and add something else over here so if I just remove this I'll just keep this the word this over here and I run this you you know that it's just going to be overwritten over here everything else would be gone I just have this over here now now how do I tackle this well there is a flag as I told you in the beginning it's the appending fight how to add flag is that you just put a comma in the Constructor or in the open statement so if you are using the function to open it you just do the same thing over here so you just do test.txt put a comma and write whatever I'm going to write here right so here what I'm going to do is add the appending fact so iOS these two colons and then you do app which will enable the file in append mode so what happens is that it is not going to whitewash the file the things are going to remain but whatever I'm going to add now are also going to be written over there now if I do something like this is some new content being added and uh just to differentiate let's skip it on a new line because if you don't keep it on new light just works like shared operator right if we don't keep a new line it's just going to write it beside that so that's the thing so if I just write this save this run this build and run this sorry and now if I go to my test.txt so that that is the file I have been writing to right so if I now open this here you can see that the new content has been added and the old one is being preserved so that is about appending files and now let's talk about reading grammar file well to reading to read from a file it's almost straight forward what you need to do is just remove of stream and replace it to if Stream So if stream is nothing but input file stream and how do you read from the console you do this right so you have variables called string s and you just read from the console like this and to read from a file just replace scene with file and that's going to allow you to read the file and now since I have a string here what is going to happen is it's going to read word by word now if I do c out S I will be getting the first word so what is the first word over here in my file the first word is this right so I'll be getting this over here so by renders I'll be getting this and now if I change this to a character if I do care and now if I run this I'll be getting the First characters which is T right now how do I read the whole file so basically what happens is that whenever you write a file whenever you do file Dot close what's going to happen is that the newly added content after that at the end of the file you have a special character which is not visible known as the end of the file character or the eof so eof is nothing but end of file and this is a character and while this is not reached we can just keep on looping so what we'll do is we'll run a loop and after every time we get a character we'll check whether it is the end of the file character or not once you reach the end of the file character you will just terminate the loop so how do I do that it's really simple I just do well let's just keep a string uh variable on the outside of the loop so that we don't create it every time so here what I'm going to do is while let me just put it on new line while file dot EOS so while file.f while file.of has not been Rich so for that I need to put not so while not file.orf while not file.elf has been reached what I can do is I'll just read the con word inside string and I'll just print out this string on a new line right straight forward now if I don't run this what I'll be getting is I'll be getting all the wet so this this is some new content being added so all these other words in my file so that's how get word by word if I need character by character it's almost the same thing I just change this to KR run this again and I'll be getting every character in my file so this is how you create character by character and if you want to read line by line it's little bit different you don't reach to the end of the file what you will do is you will just read the lines one by one and read till you reach the end of the file so what you do is I'll just show you it's just string s and here what I do is get line from the file inside as and while you can get the line if you don't get the line it's going to return false if you can get the line it's going to return true and I don't need this operator too so I'll just remove that and now if I run this I will be getting the lines so this this is some new content added and then a new line that's because of this one right so here you can see it's just reading line by line so if I want to stop at somewhere so basically what this does is it's it's called a delimiter so what it does is you you have a line right so you have this line and you have this line so how is it stored in the memory you have this special character which you know about right this is the slash n so this is how it's going to be stored so this when this character is reached it will consider this whole sequence as a new line but what if you want to consider this so if I just put this character in between I want to consider this one as an one line and this whole thing as another line so that can also be done using a delimiter so what you do is you just put a delimited like I just put a space over here so that's going to be considered as the delimiter for stopping when uh and considering that whole sequence is a line basically really the default is that slash in because that's what you consider the line right so whatever if if you write something like this and then you move to the next line so when you press enter that slash n is getting added so that is what you consider as a new light but basically if you want to consider something else as a new line this is how you do it and now if you just run this I'll be getting every word that is because after every word I've given a space right so and this is the uh delimiter I've given and if I put something else which is not there so if I put this thing it is not there in my file right so that character is not there anywhere so the whole thing is just going to be considered as a sequence now if I run this here you can see the whole thing has been considered as one single line right so that's how you can read from files you can write to files and it's all about the text file so you can do many operations like you can read uh you can count how many words are there or uh what you can do is you can read the files and see if some data is getting stored over there or some specific word is appearing in that file or not so all these things you can do let's quickly write a small program to do that what you can do is I'll just stream file file Dot close never forget these two things when you open a file you need to close it and let's say we'll just say let's see out enter your name and I'll get a name here so string name C name so this is just like I'm just showing you how you can use the files this is just a simple example and here I will do another thing like see how enter your each and I'll just say in each chain eight and now what I'll do is I have already opened the file right so let me just move this down here I don't want to put this file in the memory right now so once I have all this information entered I'll open the file I will write this information to the file how do I write it I'll just say a name and the name new line it's just like this your operator right um I hope that you're getting the similarity over here and then it's h and the age that's it I'll just do file.close and well I did not give any name to the file so let's say details.txt I'll use this name I'll build and run this I'll be getting audition name it's Tony oh sorry I'll say okay it's too much let's say 12 and enter that I run that program now I go here I have this details.txt I open that and here I have my details so whenever I need this information again I will be having that information and I can just read from this well basically for these kinds of information these are nothing but details right so you have uh name Tony age stuff and something like that so you you can maintain a table like that so will that kind of stuff that this is just to store text Data this is just stored ASCII data there is actually another way another a better way to you know store information like this it's it's nothing like SQL if you are familiar with SQL SQL is nothing but a database language but for now what we can do is we have something called binary files so what you can do is you have to go dot that files where you can write classes now why do we need to write a class well all these things if you want you can just create a class and then you can assign particular variables for that once you have a object of the class you can directly write that object inside the dot that file and you can access them this details thing that's how people do it because it's really easy to access in that way because once you have this one line you need to strip that line you need to you know get that last character and all this thing so that kind of things won't be necessary right so that is the only reason people use dot that files because once you have a class once you read it inside a class you can just do well it's just like you have something like person p and once I read this inside this what I will do is I will just do p dot name I will get the name p dot age I'll get the age and something like that so P dot age will give me the age so that's how people do it and we'll see how to do that hey guys welcome to programming knowledge in this video we'll see how to deal with binary files using C plus plus now binary files are something which are different they are not as simple as ASCII files so uh in the previous video we saw how to deal with ASCII files so basically what are ASCII files ASCII files are nothing but the files which you see right so whatever you can see on your computer using some application or the other so using notepad or using something like this code blocks editor or something if you can see the file if you can read the contents of a file then it's ASCII if you cannot then it's something else and that is binary file right so here if you see this main.cpp I can read this using any notepad or something or they see all these contents right but if I go and open up something so let's say I open up a game so here I have the Watchdogs 2 game open and if I go to this folder I see a lot of files here with extension dot that and Dot fat right so these are all the extensions which are commonly used for binary file so dot bin dot that and all these things so what happens is you cannot read things which are inside this thing right so if I do even if I force to open this using my notepad so if I do something like uh notepad comment.dat so I will be seeing lots of characters but none of them will make any sense to me right so let's just wait for a moment it's going to load everything and here you see there are so many characters which doesn't make any sense so I do have some ASCII characters over here so basically it's a slash three nine something like that so maybe these are some Escape sequences or something but basically the whole file almost 99 of the file is data which you cannot understand so that is why you use binary files you don't use it to you know save your data from from where but basically what happens is this dot for that file or dot bin file whatever they contain objects they do not contain plain data they contain objects so if you remember so if I write something over here so whatever I write here these are all characters right so you know that and now if I write any number over here this is not a number so that's what I wanted to tell here but if I write something over here if I write uh this number inside a DOT txt file it is not stored as a number but it is stored as a character list or you can just call it a string it's just stored as a string it is not a number but I want to store it as a number I want to store it as an actual object how do I do that so that is when binary files come into play right so now in this video we'll just see how to basically read and write a binary file it's a very big topic so we'll be dividing it into videos and in the upcoming video we'll see how to do operations using binary files but in this video we'll just see we'll just understand what binary files are and how to write them how to read from them right so let's start firstly uh reading and writing are almost same you the constructors are almost same right so use over 3 Ministry and all these things the difference comes when you are using the methods and the way you operate the files right so let's see how to do that so of Sim file and I'm using the Constructor to open the file so let's say test dot that so this is basically a common extension for binary file you can use dot pin or something like that and uh yeah one more thing I wanted to mention here is that this extension doesn't matter right so even if you use dot txt it's going to work but basically it is recommended that you use extensions which convey the nature of the file so um what I mean is if I go back here in inside this game folder um yeah let's go to this folder you see lots of these dll files right so if you see this dll files you uh see this gear kind of Icon right so that is basically because the Windows operating system knows that this is a dll file it knows how to interpret that so for dll file it has assigned this kind of Icon so that's why it's showing you for images it has it must have assigned some kind of Icon and for C plus plus it must have assigned some kind of Icon and so on right so basically this file icons are dependent on the type of extension you give it it's not dependent on the data right so that the extension is for the operating system to identify the kind of file and to give it a suitable icon but even if you mess up the extensions it doesn't really matter right because the way the computer is going to store the data is controlled by the data itself and not by the extension so even if you put dot THD for a binary file or dot bin for an ASCII file it doesn't really matter you can still uh you know operate on those two files in their native way right so we'll see that so for now let's go with the recommended way so test dot bin and here if you just leave it like this it's going to be interpreted as an ASCII file as I told you extension doesn't matter but here you need to put it nice I I use binary to interpret this file as a binary file right so this will open this file in binary mode and of course uh it's an output stream mode so I can write to this file and another thing I need to close this so all these things are the same thing which I mentioned in the previous video you open a file you close the file and in between whatever you do that will depend on different file types and ASCII files we saw how to write we just do this the most simplest way to write to ask a file you just do this you write all your data here you just put this operator what it will do is it will direct everything inside this file and it won't store it as a specific object it will store everything as a string so where if I do this this will go and set as a string right now to write an integer let's say we create an integer in P equal to 1023 so this is our integer and I want to write this integer to this test dot pin how do I write this well the way you write it is file dot write so this is a method and here you have two parameters so one is conch CAD type star on this thing and another thing is the stream size so let's see what they are right so basically what happens is in binary files you convert your data into Strings of bytes and the way you do that is you go to the address so if you remember the address is given by and right so this Ampersand symbol will give you the address so and P is my address of P I'll take this address convert it into a character string right so string you can this string is a class but character is a data type so basically what I will do is I'll this is a character Ari which is nothing but the string so basically this is equal to a string right so this is almost equal to a string but string has some additional functionalities it is a class in C plus plus you don't have a string data type in single distance but anyway you just convert this into a character array because it's the primitive data type and you take the pointer of the first element and you give it to the writing object so this this thing it has file pointers inside that and we'll go and see uh we'll explore file pointers in more depth in the upcoming video but for this video you have file pointers which will take the pointer of this first object and in the second thing where in the second argument where you mentioned the stream size so if you remember you had two arguments here right the first one was this thing the second one is basically the stream size which will tell the pointers how many bytes of data to take so here you have a memory right so if I just open up my paint and I have this whole memory so this is all my memory I have in my computer so let's say 16 GB or 32GB whatever it is I have I specify the first so let's say the integer is stored in this 4 bits I know that integer size is four bits let's let's just consider a realistic scenario so I have four bytes over here what I will do is if I do and P sorry What's Happening Here undo so here I have this and P which is this thing which will give me the address of the first point right so this is what the and operator does it will give me the address in hexadecimal format I'll take that give it to the file pointer and say that I from this address read four bytes of data so what we'll do it will take this it will read four bytes of data from here and it will store that data inside the file so that's how it works so if I if I do 10 bytes it will do the four bytes and whatever is remaining it will read from that too and try to store it and it you know it messes up the data right so that's how you store files here you read four bytes you read the size of the object you take the you take an instance of the object read the size and then save this memory thing inside a file so that's how binary files work you directly don't write data you go to the address you take four bytes or whatever the size of the object is you take those things convert it to bytes and then write it store it right so that's what we're going to do here so here what you need to do is first of all get the address so which is given by Ampersand P which will give you the address convert it to a character array and here I need to specify the number of bytes so it's just 4 I can just write 4 or if you are not sure just use the size of operator right so size of P right this will write this thing this one zero two three as a number inside my file known as test dot pin so now let's let me just run this thing I did not get any errors and let me just open up my folder and here you see test.pin and if I now go and look at the properties it is exactly four bytes right so four bytes is because one integer is four bits you know that now if I try to open this if I try to open this using some notepad or something or let's just use notepad here notepad test dot bin enter so here you see some weird character right so this is some character but it's not one zero what did I write 1023 it's not one zero two three right so that is how you write binary files they are files they are written there but you cannot see them they are written as objects if you want to write two numbers that's the same thing if you just write this and I have another integer Q which is one zero two uh let's just keep it a thousand I do the same thing again right c b and instead of p i just write Q right run this it's written I go back here okay why am I closing this again again just open and keep this right so here I have test dot bin go and look at the properties it is 8 bytes because two integers right so that's how you write binary files and for now we are not going to write multiple objects because uh it's a little bit different how you iterate our objects so we'll see that in the next video but for now we'll just stick with one object right so you just write one object run this and it again as you know I'm not using any appending right so I'm not using iOS append so it will just write it from the beginning so if I go and look at it over here it's four bytes no the other thing is um reading from this binary file how do I read this it's really similar just replace this with if stream and take out this definition let's say in let's just keep it in pay for now this is read and these things remain the same so what does this say you read something to this address it is not from this address this time it is to this address and how much should I read I should read this much bytes right so I know it's kind of confusing but uh you need to get used to it while dealing with binary files so basically everything runs on sizes and byte strings so here what you're saying you are giving the address and you are saying read to this address and how much should I read I should read these many bytes right and after that you can just close the file and you can even see what is the thing over here so if I do um you know the value in B is and I just show p and if I do this in the beginning I won't say anything so if I just copy this and ask as soon as I create a variable if I do this oh I'll just do value in P before reading this and value in P after reading s right so if I do this and if I run this program now if I run this so here if you see the value in P before reading is this big number which is completely um you know it is garbage right so it it doesn't have any sense but the value in P after reading is one zero two three which we stored in the file before right so why this happened this is because the you know if you take those four bytes before reading in this location and if you convert it to an integer this is the number you will get so it doesn't have any meaning it's just a number right so yeah that that's all it is and here this one zero two three is after taking the bytes from the file converting it to integer and giving it to this location so that's about reading from binary files and the other figures I mentioned about the extensions right so if I do something like text Dot tht and I put this iOS binary flag and if I try to read something from that so I'll just comment this thing out so I did comment this right and here I just commented this section and if I open a file of that name test.txt and I write something so in P equal to 10 and I write file dot right cash star and P size of P and I close the file under run this program right it ran without any failures and if I go here I will have a test.txt file so if you look at this this is a txt file so it can be opened with notepad but if I try to open this thing using a notepad right so if I try to open this thing using a notepad I'll again see uh well there is a character here which you cannot see but so basically what happens is the computer will try to interpret the data every time you open it but basically sometimes uh you know the character which it interprets is something which you can see and sometimes there are some characters which you cannot see so this is one of the examples where you cannot see the character but there is a character here which has been interpreted right so that is what happens when you you know mess up the file type you can see that the extension here is of a notepad right so if I use dot kxt I'll get this extension but if I use dot bin it doesn't know so it just gives me this kind of extension but if you see here the icon which has been generated is of a notepad right it dot txt file a text file but if I open it it's actually a binary file I cannot see anything over here so that's why I told the extension the file extension doesn't really matter you can you know change the file extension and it's the same thing while reading too so even if I put dot txt over here and I tried to read this as a DOT txt file that will also work so if I just copy the selection uncomment this and I try to run this so here if you see uh the value of Peep before reading is this number which is garbage and the value of P after reading is 10 which I stored just now right so that is the reason for using dot bin dot that or all these things that the only reason is that it is for you that for the operating system to show you the correct file icon right so if you mess up the extension don't worry it will work as long as this thing is there because if you if you take out this it's not going to interpret anything so this will now be interpreted as a ASCII file and if you try reading and writing from this file it will fail because everything is in binary format right so that's about simple reading and writing of binary files in the next video we'll definitely see how to uh do operations on binary files but basically it is not restricted to integers only right so I just wanted to show that so if you just create a class let's just create a quick class now student right and we'll just put everything in public section you have a name sorry age you have a name and let's say you have a roll number and here you create um a Constructor of student and you just put um age name role and uh well because these two variables are same I need to use the this pointer I'm sure you remember that and this this dot name equal to name and that's not true number well I need not use that but still it just looks nice right so it is uniform over here so that does it now if I want to write this thing to a student file what I will do here is I will create an of stream with the name of the file as student let's say student data.tat or dot pin let's go dot bin we already saw that right and here I need to put the flag as binary so iOS binary and after that is done now I need to create a new student so student s and I can just pass in the age rule number and all these things so it's name uh something and roll number which is one let's keep it one and uh to write this thing to this file I just do the same thing which I did before so file that right what do we need to do let us care star it just becomes bihearted right so if you do this couple of times you'll just type it out without much thinking but basically the meaning is the thing which I explained before we are just converting the address into like character array so character and S size of s four characters or a b c d i just close this file Dot close and now I run this thing I get an error what does it say expected this before okay I wrote this as python sorry I need to specify that data type over here right so okay this is good run this again get which is these are considered as pointers why is that okay let's just do that oh yeah that's because this is a pointer right so I totally sorry about this I I I've been coding in other languages lately so I completely lost the touch of three people it's sorry well I'm sure you won't run into these kinds of Errors right so yeah very well it worked here and if you go to that location where you stored the files so here you have student data.pin so here you have 32 bytes basically you just store data like that and now if you try to open this thing so if you now try to open this thing you won't see anything I'm just saying that again and again but basically uh this is to make you familiar with binary file so that you don't you know run into an issue when you don't see anything over there so this is what you see and ABCD is a string that's why you're saying string but other things are all numbers and pipes that's why you are not saying anything you're just seeing this weird characters over here right so that's how you write to binary file you write data into binary file to read it from a binary file you just you know it's the same thing as you did with the integer just that this is nothing but not a common object but it's something which is made by you it's a use a different object so you do that let us find this is if stream let's do that and you can always show these things right so see out s dot name a new line H dot h new line s dot roll number right run this I'll get another error what does it say okay that's because I don't have this kind of thing I don't have this concept I'll just Define an empty Constructor then right you can have as many Constructors as you want just just overloading right so I'm sure you remember that so do that run this and here you have um there are some errors over here but basically has a string is a class that's why I had to use this is not a you know it's not a data type as such right string is something which has been made on top of characters so you need to use characters the string is actually a class we'll I thought we'll talk about this later but after seeing this I think that we need to discuss about the string class uh very soon but basically string is a class it's not a data type so it doesn't work like other data types that's why you're seeing this thing but basically if you use characters if you use character arrays or something like that that will work right so instead of name I'll just do something like cash Star right and here cash star and again you need to use you know string Methods like you have a string class here hash include uh C string so you have this class you need to use this class right to uh copy name and all these things so strings are something it's a whole different topic we'll talk about that it's not as simple as just defining it as a string but basically you have a whole set of operations on the string but if you do that this is how we store data inside a file so that's why you got this 32 bytes and all those things I thought I did not you know uh tell that right now but yeah in the next video we'll discuss about that and also we'll discuss about how to read how to search how to write multiple records and do all these things how to delete things and all these things right so binary files not about uh direct ASCII value writing it's not really simple as just writing something as we did in the previous video it deals with pointers it deals with memory addresses and all these things so if you're not comfortable watch this video you know a couple of times and then try this on your own so that you get familiar with this statement so this statement you need to understand because in the next video when we talk about the file pointers these State this thing is going to be really really important so make sure that you understand this before going on to the next video so hey guys welcome to programming knowledge in this video we will be dealing with a credit operations in C plus so if you are a web developer you might be already familiar with this term current which just stands for create read update until it so these are the operations you do on a database right so now what does this have to do what this database have to do with binary files well if you see in the last video I just talked about how we use binary files right so binary files we write objects inside binary files and what's a database database is nothing but a collection of Records right so how does those two relate so let's say I have a database of employees so they might have a ID name and what else they might have an address phone number etc etc so it's all this information and then you just store it as a tables two three four and so on so ID number one all the information two all the information three all the information all the information and so on so this is what a database would look like and what we're doing in binary files we're doing the same thing we're just making new employees so employee one is basically all this information employee two is all this information and employee towards an object and employs three is an object which has all this information and then we are just writing this object so basically you can think of binary files as nothing but a database right so if we are making a database it should be able to do all this operation it should be able to do credit operations which is nothing but these things create read update and delete and I will update and delete will also include searching a record right so how will you update without searching right so these operations are something which are really important if you are maintaining a database so database you can just if not a very technical database you can just think of database as just a collection of Records that's it right so to do that in this video we'll see how to do these operations on a database and before that we need to know how a binary file stores data right we already know that binary files just stores uh everything in binary format but we need to know how it actually stores right so let's say I have these four records the same thing and it it is not stored in such a neat table format what it does is it just dumps all the data in one single line so you just get one all the data to all the data three all the data for all the return whatever you if you have hundred data you just get all the 100 things in one single line so that's how binary files work and now uh let's say I want to do operations on this third record so I want to update or delete or something or I want to insert a new record in between these two records or something like that if I want to do any operation of that kind I need to First find this record so how am I going to find I need to move to this record right so for that you have something known as file pointers so just write it down here you have five pointers which are getting put so get and put a two pointers well both are exactly the same thing so if you talk about a file pointer it's just like cursor so if you think about this whole thing as a file in the memory this cursor which is blinking over here that is the file pointer and getting put are exactly the same thing like the task may be different but basically the pointer is the same so when you use a get pointer you actually use it when you want to read data and put this when you want to write data and if you are doing both it doesn't really matter whether you use get output it's just for convention right so get uh is used with um if stream why because I have stream just opens a file in read mode and put works with of stream because it opens a file in right mode so these are the two pointers and you have functions to use these pointers right right so you have the stealth function and then a seek function because we just need these two information so we're never working with a cursor what do we need I just want to know where this cluster is linking and I want to move this cursor to some place right so as these two functions are there the variation so tell G is for the get pointer tell P is for the put monitor similarly you have c g is for the get pointer and seek piece for the put pointer and what tell does it will just tell you where the cursoriation C will move the cursor for you so you can just pass in uh like 10 bytes and remove the cursor 10 bytes right so that is all about the file pointers and we'll be using this in code which will be more clarifying for you because these things are something which you need to understand when you are working with binary file so that is why in the previous video told that we need to understand how that read and write statement works the chain text you remember that right so stare star address of object and then size of object now these things are basically interacting with these functions inside right so this this whole thing tells that I need to write this whole array of bytes and this is the crucial thing which tells how many bytes to write so if you say uh if if let's say my file is over here and I use write method what it will do is it will just write down and then it will seek the pointer to let's say 10 bytes forward or whatever the size of the object is so I I am here I write a new object I write everything and then get the cursor and put it over here for the next record to write so that's our file pointers work and we'll see how to use that in a short way so well we have already run create and read so we'll do update and delete in this video and uh just for a boost I just have created a very simple class so I have this employee plus which all the attributes are uh public so I have ID name address and then I have a simple Constructor which does nothing so this is just to initialize an object and this is one useful Constructor to actually create an object without uh assigning one by one right and I have this info method so that I can just see what this object is so what are these things so it will be useful while reading the object right so this is the class and to write this class as I told you in the previous video we could not use string right because when we use string we could not write properly it's because string is a class it's not a data type so what you need to do here is I'll tell you what to do here but we'll talk about strings in a later video but for now the fix is that the first of all let's talk about the reason the reason that that uh writing produced some garbage inside the particular file is because string is a class and you cannot write objects inside objects so what you need to do is you need to change this to something which is primitive so you have primitive data types as uh flow double and you have integer primitive data types right so you can write all these things inside the binary file but you cannot write a class so well you can write a class but the class should consist of primitive data types it should not consist of some other classes right that is not allowed in CPS plus so to do that what you do here is you change this to primitive data types now so what is a string string is nothing but a collection of character so what you can tell is string is nothing but a character array so let's say name is of 30 characters long so this is just like they just name it and if you know SQL this is the same thing as doing something like where care right so you have something called Bearcat which does the same thing you just uh specify the number of uh characters you give and this will create a character field for you this is basically SQL so don't if you don't know about this don't worry but basically the same thing you are going to do over here too the only reason we use string is because when the string class makes it easy to handle uh these operations so I'll just talk about what it is but basically string class will allow you to work with strings really really easily right so that's one thing but for writing you need primitive data type so we're going to use arrays right so address of 50 characters and now I can just say string name and string address and now to actually copy the string inside the character array what I'm going to do here is I am going to include one another the header file which is known as C string so what this has is this has lots of functions dealing with the string operations right which are not included directly so if if you talk about this so if I want to copy this name inside this uh particular array what I have to do is I need to run a loop get one one character and paste one one inside that so that is not required you could just use a function called strcpy which will just copy a string right so strcpy this takes the source sorry this destination which is name and then the source and Source here is a string it's what requires is a const carry it const Caster so you can just cache style is nothing but you can just think of it as an array right so because see when we talked about this when we are talking about the arrays in the in our previous videos which we talked about terrorists we saw that if we declare a pointer to an array it will point to the first element so if you are declaring a pointer it's as good as you are just saying that this is the first element of an array so that's why generally people used pointers to specify the arrays whenever you are dealing with the variable sized arrays because if we don't know the length of the array it's very easy to just show that this is the first element and then go these many buds to get all the limits so that that's how we work generally right so that is one thing and here to get the character representation what we do is you have function called dot C underscore Str what this will do is it will give the C string representation of this string so a literally string is a class so this is an object and there is a method inside the string class which is C underscore Str which will give you an array of these characters so that's how you copy a name uh sorry copy a string in uh primitive data types right so same thing goes with address so address and then you have addl dot C underscore string so that will copy the things and that should do it so now you have successfully changed this thing and you can just try it out so employee a and uh let's say id1 name Tony address NYC and you can go with well um well let's go Captain America now so Steep and then let's see Brooklyn so you have these two objects created and let's just make sure that everything is working fine so yeah there's no address so everything works fine now let's go with the creation part so let's quickly create a function for that avoid create what you need you need an employee object create is nothing but right so it's just create all right this is just call create because we create a new record right so basically it's just you can think of it as writing something inside a file so employee OBC what you do you just open a file in ofc mode do it and let's say details for that how do you open it you open it in binary mode and here what you do after right the same tags the most important one garage star and OBG size of OBG and then you close the file so that should write an object okay so now you can just say create e Grade B and if I just run this I have created this file and you can just go and check in your directory you will have this details.tag file all right now moving on let's go to the read operation well these are the things you already know so it's just going to be quick right so yeah just don't take anything because you're going to read the entire document so just say if stream file which is details.tag iOS binary and you need an object of employee so employee obj and then while you can read so after three cash style and OBG size of OBG you just say obj.info so this is the reason I had this method defined over here right so yeah appetite what to do is just close the file foreign thing I forgot to do is I had to create it in append mode right because once I close the file and once I again open it without the IOS app and it's just going to replace things so I forgot about that so we need to add the IOS app print file because you don't want to just keep on creating new ones and just keep deleting the old ones right so that is one thing so just create these two things it just run again uh well now it would have appended there so I'll just delete this and run this again run it I have created two new employees and then just comment these things out now thank you just do read run this I'll be getting those two things so id1 name Tony address is this id2 and all the information right so we did CR now U and T are remaining so U is basically what you do is you need to update and how do you update you first need to search for something so first of all uh we need to uh make sure that we have a unique identifier for every object so this if you are talking in the language of database this is known as a primary key right so you have a primary key which is unique to identify an object because if you take in this case you have just name it addressed this right so name can be same addresses can be same but the iot cannot be same ID is unique so here the primary key for our class is ID and that's how you choose a primary key primary key should be unique and that goes same with databases and also this one right but here we're just hard coding that ID is what we want right so in update I'm just going to take in the ID which I want to search and then what I want to update so you can update a whole object that's also possible but since uh well I did not try to copy Constructor over here let's just keep it simple the concept Remains the Same right the concept remains exactly the same the only difference being that you you just update a whole object instead of updating a part of the object I'm just going to update the address of the object so I just says string HDR right and here now what I'm going to do here is I want to open the file and read and write mode simultaneously why because once I get to an object I need to first of all I need to search for a particular object which involves reading the object right whichever let's say I have these two records first of all I need to search whether This Record is what I want so let's say I want to update this uh employee 2 and I want to update this address so first of all I need to read through the entire records I have I want to first of all find out whether this thing exists or not and then if this exists what I will do is I'll just go back and record and then overwrite it so that's how it works you know a b c t e five records in a line as I told you what I'll do is first read a check it it's not the thing I want to update right check B it's not the thing I want to update let's say I want to update C I'll read C and check it it's the thing I want update I'll go back update see with the new record so C becomes F and then break out of the loop or even go ahead so it it basically depends on the operation you want to do so let's say I want to update all the addresses of people whose name start with s something like that so that that kind of thing you don't break out of the loop but if you just want to update a unique thing you just do that you just break out of the loop because it's not worth going forward right so that was a quick explanation of how update works so first of all we need a Boolean variable which is false in the beginning right and I will just return this Boolean billable so that we know whether an update Works successfully or not and uh what else you need you need to open a file in both read and write mode simultaneously because as I told you you need to search and then you need to write so this is Extreme details dot that and here you need to pass a file so I use in iOS out and also iOS binary right so I opened this file in both read and write mode and then in the binary flag right and uh other thing is I need a temporary employee object so that I could just put it in the memory and read the information inside the class right now what I do I just do the same thing as reading a file so after tweet size of OPG now inside this what we're going to do here is first of all I need to search right so this is a searching part so if the ID which I'm searching for well if the object which we read with the ID of that object whether it's equal to the ID which you are searching for or not that's what we need to check and that is searching so if it is equal we perform the operation else we don't we just move on right so let's say it it is equal we got the object what we need to do first of all we need to say that we found the object so it is true and then what we do we just update whatever we want to update so here in this case I'm just updating the address so strc p y string copy obj address and then the new address I just specified so HDD r dot C underscore Str en okay so I'll do that and then where do I have to write this I need to rewrite this right I need to open it so now if I just do dot right so if I just do F dot right so same thing cached all objects size of object I could write a macro for this I'm just writing it again and again right so yeah anyway if I just do that what will happen is let's say I wrote A B C D E I want to change e so first I did a checked a check did it B check B red C check C and I want to change C and now if I try to update see what will happen if I just write I'll just override T that's what is going to happen now that's because I have not gone backwards right so what happens here is that I am just overwritting the next record not the record I'm at so I need to go back that record how do I go back remember the file pointers we talked about in the beginning I have them no I deleted those comments but basically I'll just get and put pointers right so what you do is you take the pointer take the put pointer backwards how much backwards first of all get the position where it is so tell tell the position and go back how much how many bytes should I go back just go back those many bytes which this object occupies the size of obj from here you need to go you need to travel that position from the beginning of the file so that will take care of a moment so what will happen is what you are saying in the saline essentially is let's say I am at I'm at this position I'll just say 10g is something minus the size of object so minus here from where from the beginning so from here I'll just go to this much positions right so that is how this seek P works and you just write off that object and here in the end you can just return that object so return phone so that you know that you have found something or not and when you can also break out of this Loop that's also possible you can do that so first we will just read it right we'll first read the initial data I'll just remove these things read the initial data we have these data we'll just change this address so what I'll do is I'll just say update id2 and then address to let's say baker should be I'm just changing the address over here I'll do that run this and it works successfully well it did not show it over here so I'll just do c out that will also work I will get a one or zero right so here I got one that's because this ID exists if I do something with where this ID does not exist I'll get in 0 and I'll show the message to the user that here the ID you're searching for doesn't exist in my database create a new ID something like that so we updated that now what we are going to do is is read again what do I get see that address has been changed and this is not from the upgrade thing right so it has been changed directly inside the file so that's how you update things inside a binary file so the same way you could also object the whole object right but I did not do that here because I need to create another file and I take time but I'll encourage you to try it on your own so instead of string you just have a whole new employee object and here you just instead of copying that you just create a copy Constructor over here so I think you all know what a copy Constructor is and you just need to find a copy Constructor so that this uh IDs get copied and then you just paste and then you just do the same thing you just go back and then write out the new modified object right so that's about application and now comes the deletion which is little bit different so this is delete and again this also involves searching so let's just say pull delete our deleted keyword we'll just keep it adjusted and then you have a ID now what you are going to do here is we will push uh the the process Remains the Same you first search for the object so these things remain the same you just copy and paste this thing instead of f stream you could just say if stream because it's just going to read it all right and uh here I'm just going to search for that file so the whole thing you will just copy and paste well you don't need the whole thing uh the inside is going to change the the if condition is going to change and then just say return form right now how are they going to delete something well we cannot directly delete from a file just like what we do like let's say I want to delete this I just if I just press backspace this this line goes away but this action cannot be performed using C plus plus binary file objects you don't have a delete method inside the object so how do you delete it well the way you delete it is you don't you just create a copy of this whatever database you have the all the records you just create a copy but you don't include the thing which you want to uh Delete right so I will I'll just explain you it again so if I have a b c d e and let's say I want to delete D it's always deleted I create another file called temp so this is all inside our details.tag file so these are the contents or in temp file I want to delete T so I'll just copy a b c e right so if you see here I skip D because that's the thing I wanted to delete and then now I have successfully deleted now what I'll do is I'll delete this file and rename this as details right so if I do that it will look like I have deleted this thing so that's how you delete files in C plus plus delete records in C plus plus and to do that you need another Library which is standard input output because you are going to work with the standard stuff inside the Hard dish you want to rename remove and all those things so those things are available in the standard input output side right so here what I'm going to do here is I'm going to create a new file which is called ofc and then this is a temporary file and this is just going to be some temp DOT type I'll do the same thing iOS binary and here what I will do is if the ID matches what I'm going to do here is I'll just well if the IDT does not match well if the ID measures we don't have to do anything we'll just skip that but if the ID does not match what we'll do here is um well you don't even need this form you don't have to search for this if you think about it you just we are just trying to delete something which does not exist so basically just skip it if it does not exist you're not going to delete anything so yeah you can skip that this phone can be scared it's not required on this return statement too it's not required now if it is not equal what you're going to do you are just going to see it temp dot right that whole thing so same thing you write that that's it that's how you delete a file now you have written that now whatever what you're going to do is just close those both files attempt to close now you just remove details.tag and then you rename attempt to that to details not that said see how simple it is to delete something it's just a work around you don't have a delete method in binary files and this is how you delete it just create a copy without this uh record which you want to delete and then you just rename it and then so if if let's say I want to delete this first of all read that delete ID number one and then read again do that if I just run this thing uh well everything came at once was because there's no new line but yeah if I just comment these two things out because it's already deleted you don't have that so if I just to read you will be seeing that I just have ID number two I don't have ID number one right so that's how you do the credit operations in C plus plus you have create read update and delete delete is something which is kind of different you just create a new file with all the data except the thing you want to delete and updater you write it you read the object you find the object where you want to cheat and then you update it go back a record and then overrated so that's how operation works and it's the only place where you're going to need to use input and output at the same time right and other things are pretty normal the create and read or something which is uh we already know about and this is how you do the credit operations in C plus plus so that's it in this video and in the next video with move forward and then we'll first talk about uh things like static which will make this uh I will ID independent of you know initialization that means I could if I want to I could just save one one so what we'll do is it will just delete all the ones if this this Loop runs it will just delete all the ones right if I just print id1 so I don't want this to happen I want the ID to be generated on its own so how to do that that will see in the next video and also we'll talk a little bit about the strength because slowly we'll understand how to work with the string class so this is one function you learned today and this is one address pack which you learned today C string which basically contains all the functions we need for string so you have lots of functions in that we have strcpy which is for copy you have this compare so CMP is for compare cmpi is for comparing without the case comparison is it doesn't ignore the case of the strings right and then you have all these um functions so HDR cat is for concatenating Strings basically why we use string classes because we want to directly use uh operator so let's have string A and B I could do something like a equal to B using the shrink class but this is not possible when using something like a primitive data type if I use array or something I cannot do this right I need to compare character by character so these things are the reasons why we use string but when you are dealing with something where you want to write into the files or something like that you do have to use the primitive data right hey guys welcome to programming knowledge in the previous video we saw how to do file operations in binary files using C plus plus you can also call it credit operations so we saw that by taking an example of an employee class right so that class hidden ID attribute which we used to identify each employee uniquely and we were performing our operations on that so the problem is that in that particular program the ID was not being generated automatically it was unique because I kept it unique right when we were writing the program we had to keep it unique so that there were no conflicts in that program but what happens is that generally you don't want to do it on a very large scale because you may forget what was the last ID or you may forget something else right so it's best that these kinds of things be automated and how do we automate that thing well you can use a global variable that's a solution but the best solution is to maintain something known as a static variable and that's what we will be talking about now so with static variable is nothing but that variable gets created and will stay until the program's life cycle ends so what do I mean by that let's say I have a function here so this is some function and I have say three variables inside this and I even have some other variables so let's say t e over here now what happens is that this main function is going to run indefinitely right so I'll be creating these two variables on start of this program and let's say I even have some Global variables so let's see um uh G and H are Global variables right so let's these two are the global variables these three are the uh function variables of this particular function called fuency and this two other variables which are there inside the main function now what happens is that once I run this program first these two variables will be created and then because main will run indefinitely these also be created and since I did not call this function these variables won't be created right so now there's some times we do need variables to be created and stay even after their role ends or let's say you want a variable which acts like a global variable but it is not a global variable because it's not useful anywhere else so uh this kinds of requirements usually addresses when you're using recursive functions so let's say I create a function for calculating uh sum of numbers from 1 to n which calculates it recursively so let's quickly make a definition for that so max um well uh we'll just take the maximum element of an array it's not sum of N numbers let's say the maximum element of an array so you could just say Max element which takes an array and uh it takes an index so that it can recursively do that right recursively calculate the maximum element which is present inside the array so now what happens is that let's say I maintain a variable called Max well Max is a keyword so let's say underscore Max which is basically in the beginning it's in uh Min so if you do intman you're basically getting the least value an integer can hold so sorry minus intman is same as Maxwell by the way solve for confusingly on that but basically in Max and Main are the extremes you can store inside an integer right so now I get this maximum element and now let's say I recursively find out the maximum element inside this array by using this index now what happens is that I don't want to create this maximum element again and again so one solution is to keep the global maximum millimeter I could just do anything Max over here and I could start out with this well I could just start off with this overview so I could just say anything Max and every time this function recurses I can just update this maximum element so that I can get this um maximum element inside this array um well it's not going to be matched technically it's going to be in Min because I'm taking the maximum element if you are taking the minimum element it should have been Max so what anyway um well we are going to just follow this logic but the problem here is that this Max is actually accessible by any function and any class which is inside this program right and we don't want that because we're not going to use maths anywhere else except this function so the solution for such kinds of problem is to use something known as static variables and that's what we're going to discuss today so let me just quickly quickly clean this using namespace standard in me right so the way we use static variables inside functions are like this so you say in maximum element of an array and you pass in an index and then instead of declaring it as end you can say static and Max and that's going to be the minimum value right so now what happens is that if this Max has not been initialized it could be initialized with this ink mail which is the minimum value an integer can hold and then subsequently it won't it will be updated well the same variable will be updated even if it recurs through the function so let's say uh we'll just quickly write this function so what's the base case base case is when index is equal to zero right so when index equal to 0 you just update Max so max becomes um well we can just use a tinary operator here so array of 0 is greater than the current Max then Max become side of 0 else is just this right and then you will just return the maximum and then since this is a base case or else what you do is you just do the same operation with the current index so max equal to the array of uh let's say well I took 0 over here so I'll be starting with the last Index right so index n uh or n minus 1 right the array of index is greater than the max then you just say area index or else and Max and then uh what to do is it recurs through the same function so max element of the same array but index minus one and in the end you just return the maximum area so this function is quite clear as a recursive function the only difference being that instead of declaring this Max as a global variable you have declared it kind of inside the function but the variable will be created in the global score but we cannot access it we can only access it inside this function now if you uh just want to test this out you can just create an ID um you can just call it one two three four five and then um well this is quite obvious let's check what 10 over here and then you could just say Max element of this array and start with index 4 or uh well you can just take take out the size from here but since I mentioned index it's just the last Index right I'm going backwards so if I do this run this particular program I'll be getting a maximum test 10 which is correct one so that's how we uh use static variables the main thing is that we don't want to create it as Global that is because we don't want this variable to be accessed by everything but at the same time it should act like a global it should not change right so if I just remove the static well the result is quite obvious because every time this function recurses you will be creating a new Max right so if I just run this you will see that I have been creating a new Max every time and once I reach Pi Max is basically The Fifth Element that's because this at the last iteration what happens is that I'm just reassigning max to inch main so 5 is basically the maximum element possible right so that is something which we don't want we want to store the maximum uh of the previous array elements also so in that cases you just need to make it a static and use it well static variables inside functions are not really exciting we generally use static in case of classes and that's because we don't have to create an object of a class or we don't have to create an instance of a class to use those static members or member functions so let's quickly see how to do that let's take a case of the employee right so let's put everything as public for now right so now what we're going to do here is I'm going to see static int ID and I cannot actually assign it over here I'll be getting an error so if I if I try to do that so let's see employee a great if I try to run that I'll be getting an error that's because I cannot uh initialize a static member right inside the definition of the class I used to do it outside so how do I do that I just need to do something like int employee ID equal to whatever ID you want to start with so let's say I want to start with one right or you can just start with 0 and in the Constructor you can increment this ID so uh we'll create the ID I will keep the Ida private so that uh we don't get into issues or well it doesn't really matter right you can keep it anywhere so for this demonstration I'll just keep it private because we are just going to have this ID a static and no other members for this example right so you can just play around with this but basically the concept Remains the C it's a global variable but not completely Googled it's just it acts like a global variable but only for that scope right so now you have the static ID well it's static unit ID and then in the public section I'm just going to define a Constructor employee right which will Auto increment this ID so that's what we wanted it we don't want to set the idea again and again so I just say ID plus plus right and I can also keep a public variable which is going to be the ID let ID of this current instance so I could just say int and ID notes the difference between these two things this is basically a global ID which will keep incrementing itself but this is going to be the idea of my employee which is using like basically the particular instance which were targeted so there are just to employee ID equal to the ID which we incremented so that actually solves our problem of having to manually increment this IDs right and we also have in uh initialize the static variable now what I can do is I can just create a b c d and if I do let's say B dot employee ID and uh let's say d dot employee ID now if I run this I get 2 and 4. but I do not assign any employee IDs over there right so basically I auto incremented the IDS now every employee I create will be uniquely identified and if you want to see how many employees I created you could just access this video to it right since this is private I would have kept it public will uh generally we don't keep such things as public we don't want to give it access right so uh well you can just do a small function so get count right and get count is basically going to return you the ID so uh it's going to be white or architis return that so they need to get com which is basically return the ID and I could just say here you get come uh sorry I could just say a DOT get com right and I'll just keep a new line here for separation and if I run this I will be getting two four and four that's basically the four uh employees we created right if I create another one I'll be getting five there so if I just say a b c d e and uh well I need to stop this run it again now here you can see two four and five which is basically the number of Empires but this isn't very intuitive right you're just saying a DOT get coin a DOT get con doesn't mean anything get count is basically for the employee class not for the object not for a particularly right so the way we can do that is we can also make this function as static so how do we do that we just say static create get count and now what you can do here is instead of accessing it to a you can just do employee and then the scope resolution operator and get con now what this means is that how many employee Optics have I created you just get me the count of that and this is more intuitive than actually calling get conflicted right so generally when whenever we want to use static variables or whenever we want to use static variables you generally put it as static functions because they belong to the Flash not the function sorry not the instance right so if you see get com there is actually a function which belongs to employee class not to a or not to P or not to D predictively so now if I run this I'll be getting the same output so 2 4 and number of employees I have created this five and you could use it uh in the other way if you wanted to so I could just see uh let's say B dot get com so this will also work right if you you could access static variables directly but it's this is not generally recommended as as this is not very intuitive right so that's about static variables uh in the next video we'll do something exciting we'll talk about genetics right we'll talk about templates and how we can make generic functions so that we don't have to overwrite them again so if you remember about the vector right so if I do hash include vector and here if I do something like vector and then I need to put int over here so this kind of thing that's basically because I have only one vector class but I can use it for any data type I want so if I wanted for string I could just do string over here so we'll see how to do this thing for our own class and that's all for this video so in the next video we'll see how to do all these things and it's going to be really exciting from now on right so yeah that's all for this video thanks for watching happy coding