so hello guys in this video tutorial series we will be making an endless runner game for android devices using unity engine this series will be completely beginner friendly so if you haven't done any game development before then also you can follow along we will cover each and everything in this series from downloading and installing unity to exporting our project to android devices so first of all to download unity engine open up your browser and search unity download unity hub so click on this first link which is unity3d.com slash get unity slash download so on this page you can find a download button to download unity hub you can also download unity directly but unity hub will help us to manage our projects and other ui versions very easily which i will show you in a moment so click on this download unity hub button and download unity hub after that install unity hub i have already downloaded and installed it that's why i'm not going to do it again so it is as simple as downloading and installing any other software so it should be pretty straightforward so download unity hub after downloading unity hub it will look like this your projects feed would be empty because you would have not created any projects so we will quickly talk about some tabs so here it is a learn tab so here there are there are lots of tutorials which you can watch from unity and this is a community forums and blogs and here it is installs so here we can download different unity versions currently i have downloaded 2019.4.20 f1 lts this lts means long term support so whenever we download any version it is recommended to download lts version so that we don't face any difficulties in future we will download a new version in a moment but first of all we have to do some necessary things so first of all we have to generate a license so click on this settings button and then here you can click on license management i have already activated a personal license but you you would not have this so you have to login in your unity account to generate license so click on login so it will prompt you to the so here you can sign in with your email and password if you haven't created unity id yet so click click here create one and you can create it easily it is as simple as creating a any gmail account so once i will login then i then we will continue so i have logged into my unity account so from here we can click on activate new license here we can choose either unity personal or unity pro for this series the personal would be more than enough if you are running any enterprise or big companies which is making more than 100 000 per year then you have to take subscription of unity but for in our case it is fine to download unity personnel and from here it will ask for these two options so just click on this i don't use unity in a professional capacity or if you use it for a professional capacity then click on this first option and click on done i have already activated my account so that's why i am not going to do it again but you have to just click on done and your license will be created so after doing that you would be able to download new unity versions so here click on install step and from here we can add new unity versions so click on add button here and it will ask you to download any of these versions so these are official releases and these are alpha releases and early versions of unity which are in testing mode so it is recommending us to download this lts version which is long term support version so we will click on next and from here if you have not installed any ide on your computer then click on this will download microsoft visual studio community edition 2019 you can also use vs code with unity but for this series we will use visual studio so go ahead and download this click on this checkbox and we will be making this game for android so we need to install android build support so expand this and make sure you have selected this check boxes android sdk and ndk tools and open jdk so it your selection should look like this so if you are done then you can hit on next and it will ask us for accepting terms and condition so go ahead and read these terms and conditions and click on next and you will you will be able to download it will take some time to download this unity version on your computer after downloading this we will be able to create new projects i have i have already this version 2019.4.20 f1 which is fine because our game is not very complicated so the version will not matter that much so you can download any version so now we will click click on project step and from here we will create a new project so click on new and then it will ask us to create either 2d or 3d or there are many other options like universal render pipeline which is not the topic of this video so we will be making a 2d game so click on 2d and from here we can name our project so this this will be an endless runner game so go ahead and name you can name it whatever you want i will name it endless android and you can save your project anywhere i am going to save it in f drive and in unity projects 3d folder actually you can save it anywhere you want so go ahead and click on create so it will create a new project so in this video we will talk about different tabs in unity engine and we will get familiar with the editor so since we are developing our game for android then we have to change this aspect ratio so click on this game window this game window is a preview window for our game so whenever we hit this play button then our game will be played in this window so we will be developing this game in portrait mode so click on this free aspect and change it to 1920 by 1080 portrait so it will change itself from free aspect to portrait mode but when you click on this you will not get these many options because our current project is on a pc platform so you have to convert platform from pc to android so to convert the platform we have to first of all click on file and click on build settings then you will have this icon on this pc mac and linux standalone option so go ahead and click on android and hit switch platform here you will get switch platform button like this so click on android and hit switch platform so your platform will be switched from pc to android and then you will get these options for different aspect ratios so it will take some time to switch platforms so once you have switched the platform then turn it into a portrait mode so let's talk about different tabs so first of all it is a scene view so in the scene view we can add different game objects so everything in unity is game object so just like here it is main camera so it is also a game object which contains some transform properties like position rotation scale and every green object contains some components so for this game object main camera it has camera camera component we can add different components by clicking on add component unity has many components so this was a c view in which we can add our game objects uh it is then next comes our game view so i have already talked about it so the in this in the game view we can preview our game so whenever we hit play button then this will preview our game we can see the game being played here so next comes our hierarchy so in the in the hierarchy we can see the different game objects that we have created currently it has main camera and we can see as many game objects as we create here so like if i right click here and create an empty game object so i i will click on create empty so we can see that it is added in hierarchy next up is our project step here so in the project step there is an assets folder so in this assets folder we can keep our scenes scripts animation prefabs and etc so it will be more manageable for a bigger games so whenever our projects gets bigger we will be able to manage it efficiently so we will create some folders right now so that we can manage our project so click on this asset folder and right click and create then folder and we will name it prefabs prefabs so what are prefabs in unity so prefabs are like you have to create the prefabs only once and then you can use it as many time as you want and whenever you want to change the game objects that are prefabs then you have to only change the original prefab that you have here it is a little bit confusing but we will see it in upcoming videos so next up we will create another folder for scripts so create scripts folder in which we will add our scripts so next is our console tab so in the console we can see if our script has any error or warning it will be displayed here so we will be able to see and debug it so this was a brief instead of introduction uh and i forgot about this tab this is an inspector tab so in which we can see the properties of the game object so our game object let's click on main camera so main camera has some properties and components like transform camera component and audio listener so this camera component has some properties so these components and properties are displayed in this inspector view inspector tab so this was a quick introduction of the tabs in unity so to create our player we will right click on hierarchy and uh okay so first of all we will create our sprite for the player so go ahead and click on assets folder right click and create a new folder and call it sprites inside that right click and then create sprites and then square and let's keep the name as square now click on this sprite and change its sprite mode to single from polygon and hit on apply then we can drag and drop this square sprite in our scene view so drag and drop this into our scene and we will rename this to player so to rename any game object in unity we can hit f2 so hit f2 and rename it to player so now we can change its color by changing the color value color property in the sprite renderer component of our player sprite so click on this color and you can give it any color you want i will give it slightly darker color so now we will create a ground so click on this player and press ctrl d so it will duplicate our player and rename it so press f2 and rename it to crown now we will change the position of our ground so first of all we will change the scale so y scale y scale should be 5 and x scale would be 20 and then go on to the same view and click on this move tool here there are different tools in unity like hand tool move tool rotate and scale in this are for ui rectangle tool so click on this move tool and press ctrl hold ctrl and drag our ground slightly below so now we can see that our ground is below the player so now click on the ground and we can change the color of ground also so click on this color and change its color from white to something oranges you can color it anything you want so now we will change the main camera color so which is this background color so to change this background color from blue to anything you want you have to click on this background and you can change it from here so let's make it white and we will change the ground color to it like this you can color it anything you want so we have now created our player and our round so in this video we will add jump functionality for our player so first of all we have to add colliders to our player and ground colliders we we add collider so that we can detect collisions between our player and ground and between our player and obstacles so click on this player and here in this inspector tab click on add component and search for box collider and click on this box collider 2d to add box collider 2d to our player next up we will also add box collateral to our ground so in the same view we can also see colliders so click on add component and hit box collider 2d so we can see this green line this green border is our box collider so for the player to detect ground we have to also add another collider so click on add component and click on box collider 2d so for this second collider click on same view and zoom in a little bit so that we can save our player and click on this edit collider button now you can edit the boundaries of our collider so click on this bottom edge and drag it little bit further so we are doing this to detect ground check so if our player is standing on ground then we will be able to retrieve the boolean value that it is grounded and if it is not on ground that means the player is currently in jump state then we will get is grounded to false so to detect the equalizer we have to make this second collider which is a little bit bigger then the first one we have to make it is trigger so whenever we make a collider it is triggered then we can we can retrieve the information of the game object that it hits so we will make it as is is trigger so now we will add some tags to our crown and our player so basically tags are used to identify the game object in our script so click on this ground and here uh in the tag uh click on this untapped and click on add tag and we will add a new tag so click on this plus icon and name it as ground and hit on save so now once again click on ground and change it from contact to numb now do the same for the player but this time we don't have to create a new tag because unity already has a player tag so click on this layer tag to edit so after adding player tag to the player we can create our movement script so click on the scripts folder and right click then create a new c sharp script and name it player movement and hit enter so the scripting language for unity is c sharp so we will write our game logic in this language now double click on this player moment script so if you have installed visual studio while installing unity then it will open up our script in visual studio but if you are using any other ide then it will open up this solution in that id if you have configured it with unity so we will quickly talk about these two functions which are void start and void update so void start is called uh at the beginning of our game so it is called only once and this wide update is called per frame means if you are if your game is running at 60 fps then it will be called uh 60 times per second so we will quickly make some variables for our player moment script first variable is private so private it will be a boolean so bull and is grounded so this is grounded variable will help us to determine whether our player is standing on ground or not so whenever our game starts our is grounded variable would be false by default and now we can create another variable for our players jump force so create private no this time we will make it public so that we can change its value from inspector so make private float jump force and we will add the jump force value from inspector so save this script and go into unity and now we can add this script to our player so click on player and add player movement script to the player now we can see that our jump force variable is visible here because we have made it public and our is grounded variable is private that's why it's not appearing here so whenever we make any variable private it is not visible in the inspector we can also add serializable field serializable field serialize field to make it visible in our inspector now you can see first of all we have to save the script and now our is grounded variable is also visible in our inspector so whenever you want to make any variable private and you also want to uh make it visible in the inspector then you have to add this serialize field so now we will add this we will add a rigid body component to our player so we can use unity's physics engine so what will it do is whenever we add a physics rigid body 2d component rigid body 2d so our player will be affected by gravity so right now if i hit play then you can see that our player will fall down like this so now we are using the unity's physics engine so click on this constraint and phrase rotation on z axis so our player does not our player will not be able to rotate on the z axis so now we can start creating our jump functionality so the unity has some functions for detecting collide collisions so make a private one trigger enter 2d so it will be called whenever our player will enter any uh our player will collide with any game object so whenever our player collides with any game object then we will check if if our our player here it is a collision so we will copy it and paste it our collision dot compare tag so if our player collides with ground with the game object with ground tag then we will make is grounded is equals to true and same as this we will create another function called on trigger exist exit so private void ontrigger accept 2d copy this if statement and paste it here we can make this is grounded variable false whenever our player exit from the whenever our player exists from our ground so make it false now we are able to detect the ground check so in the update function we will check for input so let's make an if statement and say in if input dot get mouse button down and in the brackets 0 and and we will also check for ground so if is grounded so what it want to say is that if the player presses uh right left mouse button and end is grounded so if both are true then and then this is if statement will be executed so uh this get mouse button down 0 also works with touch input so whenever we tap on this screen it will also take it as true so whenever this is done then we will add some force some upward force to our player so for that we have to get our players rigid body so let's make a private variable private rigid body 2d and name it as player so to get our players rigid for a 2d component we will go in start function and we will say player is equals to get component and the component we want to get is rigid body 2d and we will close this statement with semicolon so this statement will uh get our rigid body to the component from player and it will assign it to this player variable so now we can add an upward force to our player so type in player dot add force and it will take an argument as vector 2 so make a new vector 2 so vector 2 has two two values which is x and y so we don't want to add any force in x axis so uh make it 0 and for y axis we will add jump force into we will multiply it with some scale factor so let's say 100 so it will add this force in yaxis so our player movement script is uh completed so save it and go into the unity now click on player and add jump force value here so we will start with 5 and let's hit play so whenever we hit our left mouse button then it will jump it will also work with a touch input so currently it is a bit high so we will make it three and hit play now okay let's make it 4. so we can see that currently whenever player is standing on ground then our is grounded variable is true and as as soon as i press the left mouse button it will jump and our is grounded variable will be false so now you can see it is false and whenever it touches the ground then it will be true so this was a jump functionality for our player so we have created player movement in this video so in this video we will create obstacles for our game so to create obstacle click on sprites folder and drag and drop the square sprite into the hierarchy so now we can see that our uh square sprite which is our obstacle so let's rename it to obstacle so it is above our player that's why we cannot see it so click on the player sorry click on the obstacle and drag it to the right of the player and we can also change its color so click on obstacle and then change its color from white to something red you can you can give it any color you want so now we can change the scale of the obstacle so make it 5 on the y axis and now that we have created our obstacle uh we can also add a box collider today to our obstacle so let's add the box called electrode and make it as is trigger so that we can detect the collisions with our player so now we can make our obstacle as a prefab so we can click on our prefab folder but before that click on the obstacle and reset its transform so click right click on transform and hit reset so it will set its position to 0 0 0 and it will also reset its scale so click on a yaxis scale and change it to 5 once again so now click on this obstacle and drag and drop it into our prefabs folder so let's drag and drop it so now we can see that this obstacle has become has become blue so that means that it is now a prefab so now that we have created our obstacle we can delete it because we have created a prefab out of it so now we can create a spawner to spawn our obstacle so before we create our spawner let's create a uh obstacle script so right click and create a c subscript and name it as obstacle so obstacle and hit enter then open it up in visual studio so let's double click it and open it up in visual studio so now we will make some variables so now we will create some variables so we will create a speed variable for our of our obstacle so create public float speed and we will change its value from the inspector so now in the update method we can modify our obstacles position so to access the position we can write transform dot position so so that we can modify the position at each frame so write transform.position and we will make it equals to 3 so let's make it equal to vector 3 dot left so that we can move our obstacle from right to left that means towards our player so let's make it vector 3 dot left and we can multiply this with our speed variable so let's multiply it with our speed variable and we can also multiply it with time dot delta time in fact we have to multiply it with time dot delta time so that we can make our game frame rate independent uh that means if our game is running at 60 fps then also our speed our speed would be constant and if our frame if our frame rate is higher than that then also our speed uh will be constant so it uh the frame rate will not affect our speed that's why we are multiplying our uh speed with time dot delta time so now we have to add plus sign in front of this equal so that we increment our position obstacles position to the speed variable each frame so after doing that we can save this script and go to the unity editor and now if we hit play so first of all let's drag let's add the script to our obstacle prefab so add component and search for obstacle and add it and for now we will uh make speed as 4 so let's type in 4 and then if we hit play then we can see that our obstacle will move from right to left but we can draw a dragon drop our obstacle and move it to the right and a little bit downwards so now if we hit on play so now we can see that our obstacle is moving from right to left so so that now we have created the obstacle we can create the spawner to spawn our obstacle at random height so to create a spawner we will right click in the hierarchy and create an empty game object and we will rename it to spawner so rename it to spawner and hit enter so now we will drag it to the right of the player so we will try we will make its y position to zero and zero position to zero and now we can create a script for it so create a new c subscript and call it spawner and hit enter and click on this spawner and drag and drop this script to it and now double click on spawner script to open it in visual studio now to instantiate our obstacle we need a reference so we will make a public game object because our obstacle is of type game object so we will name it as obstacle now we also need a minimum height and maximum height for our obstacle so let's create a public variable so that we can modify it in inspector so public float mean height and we will copy it so let's copy it and paste it and then we will change it to max height so for the min height for the max height we will say let's first add our first add our min height so we will default it to minus 3.5 f and for the max height we will say minus 5f so for the max height we will say minus 5f but here here we can see that our max height would be minus 3.5 f and mean height would be minus 5 because they have minus sign in front of them so in the update method we can make a timer to check to check the time intervals between each spawn so let's create a public variable so we will create a public variable so create public float public float and we will name it time to spawn so create time to spawn and we will default it to 1.5 seconds so after 1.5 seconds it will spawn a new obstacle so now create another variable as private float timer so that we can keep track of the timer so we will check in our update method that if our timer is greater than time to spawn then we will instantiate our obstacle so we will create a new game object and we will name it as new obstacle so we will name it as a new obstacle and now we will make it equal to instantiate and in the parenthesis we will say obstacle so it will instantiate the obstacle which is our obstacle prefab and after instantiating the new obstacle we can modify its position so we will say new object dot transform so the transform dot position is equals to transform dot position that means the position of this spawner and we will also add a new vector 3 so type in new vector 3 and we don't want to modify its x value so make it as 0 and we will make the y value between randomize between two numbers which is uh mean height and max height so that we can get a random height for our obstacle so let's pass in min height and max height and for the z we can pass in zero and now we also need to destroy this new obstacle after some time so we can do this by typing destroy the destroy is inbuilt method in unity so type in destroy then pass in the game object that we want to destroy so new obstacle and the time after which we want to destroy that so let's say 10 seconds so after doing all of this we can reset our timer to zero so now we can reset our timer to zero now we can save this script and so now go back to unity and we can save the script and click on this spawner and we can see that there is an obstacle field so drag and drop the obstacle prefab into that field and now we can hit play so it will spawn the obstacle at random height but it no it is not spawning so let's see what is the error so let's go to the vs visual studio code and let's find out what is happening so here after the if statement we we have to add one line which is time timer equals to timer plus equals to time dot delta time because we need to increment our timer uh on each frame so we will increment it by time dot delta time so now if we go back to unity and hit play then we can see that now our obstacles are spawning at random height but they are spawning in front of the ground right now so we can see that they are spawning in front of the ground that they are not spawning in front of the ground but they are rendering in front of the ground so now to make the obstacle spawn behind the ground we have to change the ordering layer of our ground so let's click on the obstacle no let's click on the ground and change its order in layer to 1 from 0 so let's change it to 1 so that it renders above everything else so now if we hit play then we will be able to see that our obstacles are now spawning behind the ground so as you can see they are spawning behind the ground so in this video we have added our obstacle hello guys so now our obstacles are spawning at random height so when we hit play then we can see that our obstacles are spawning at random height and we can jump by clicking the left mouse button so currently the player is going through these obstacles so we don't want this we want that whenever our player collides with these obstacles then the game should be over so to manage the game over and pause game functionality we will create a game game manager object so right click and create an empty game object and we will rename it to game manager so rename it to game manager now we will create a game manager script for this game object so right click and create a new sharp script and name it as game manager now double click on it so now we will create a public variable for detecting the game over so so now we will write public static tool and we will name it as is game over so whenever our game is over then this variable will be true and at any other time this variable would be false so whenever our game starts this game over variable should be false so let's say is game over to false and now we can go into the obstacle script and here we can make a on trigger enter 2d method which is inbuilt method for detecting collisions in unity so type in ontrigger enter 2d and we will say if collision which is this variable this one so dot compare tag and we will say player player so what it want to say is that whenever our obstacle collides with any game object and if that game object contains this tag player then it will execute this if statement so we will write is game over to true so we can't directly access we have to write game manager which is the script that we just created dot is game over to true we can access this is chemo over variable like this because we have made it static in the game manager script so we can access this variable by writing the script name and dot then the variable name if that variable is static then here we will print a message so let's say debug.log and we will pass in the message that we want to print so we will say game over and now we can save this script and go back to the unity now we have to assign this script to the game manager so drag and drop the game manager script to the game manager game object and now when we save this project so hit ctrl s and if we hit play now we can see whenever our player collides with the obstacle the message will appear in the console that game is over so in the next video we will create a game over screen so that we can pause the game whenever the player collides with the obstacle and then we will ask the player if he wants to restart the game or if he wants to quit so thank you for watching this video so now we can see that whenever our player collides with any obstacle then we have this game over message in the console so now we will create a game over screen so whenever our player collides with the obstacle then the game will be freezed and our play our game over screen will appear so to create that screen we need to click on hierarchy and create a new ui element and we will create a panel so it will automatically create canvas and event system so to render any ui element in unity we need canvas click on this panel and rename it to game over panel so let's rename it to game over panel now we will right click on this game over panel and create a new ui element and we will this time create a button and we will rename this button to retry now we can see that our canvas is quite big bigger than our main camera so to fix that click on canvas and change its render mode from screen space overlay to screen space camera and click on this pixel perfect and as a render camera drag and drop our main camera into this slot and now you can see that our canvas is same as our main camera so now we will also change its ui scale mode so click on this ui scale mode and change it from constant pixel size to scale with screen size and we will give the reference resolution as 1920 by 1080 so let's say 19 20 by 1080 so we will click on this match parameter and we will make it as 0.5 so it will scale the ui elements according to the screen size now we will click on this text and we will rename it to retry now click on this red try button and change its width to let's say 600 by 400 or let's say 600 by 200 now drag and drag this retry button slightly upward we can see that our ui elements are rendering behind this layer and everything else so to fix this click on the canvas and change its ordering layer to one now click on this text and we can change its font size so let's make it 100 and now click on this best fit we can also make it bold and we will change its color so now we can also add shadow to this text so click on add component and add a shadow and we can set this effect distance now we can also give this shadow to this button and play with the effect distance to get the desired result now we will duplicate this retry button so press ctrl d and we will rename it to main now we will also change the text to main and we will drag this main button slightly below now we can go to the obstacle script and we will comment this debug.log line and now whenever our game is over then we will freeze our game so we will say time dot time scale is equals to zero so it will freeze our game now we can go to the game manager script and we will create a variable for our game over screen so create public game object and then game over screen game over screen so at the start of our game our game over screen would not be visible so let's say game was screen dot set active and pass in false now we will check for the game over in the update method so if this game over so when our game is over then we will copy this statement and we will paste it here and we will say game over screen dot set active to true and also whenever our game starts we will reset the time scale to 1 so let's say time dot time scale is equals to 1. now we will also make a separate function for retry so let's make a new function public void and name it as retry now we will use unity scene management and to use that we need to add the name space at the top of the script so write using unity engine dot scene management and now whenever we press the retry button we can say scene management scene manager dot set active scene sorry we will say scene manager dot load scene to load the scene and we will pass in scene manager dot get active scene so it will get the current scene and we will get its name so now it will restart our scene and our game over screen will now become false so let's go back to the unity and here we can change the canvas reference resolution to 1080 by 1920 1080 by 1920 because it is portrait mode now we can drag and drop our game over panel to this game over screen field and now we can see that whenever we hit play then when we collide with the obstacle then the game will be freezed and our game over screen will appear now currently these buttons are not working so to make them work we need to click on this retry button and we will click on this on click list and we will hit this plus icon and in this slot we will drag our game manager game object and we will select retry function from the game manager script so whenever we click on this retry it will execute that function currently it will give us an error because we haven't added this scene to our project yet click on the file and build setting then click on scenes and add our sample scene to that to this window and now ctrl s to save and now when we hit play we can see that whenever we collide with the obstacle it brings up the game over screen and when we click on this retry it will restart the game so we can see that now currently this main menu button is not working but we will make it work hello guys so in the previous video we have created the game over screen so currently you can disable this game over panel like this now before we create the scoring system we will change some settings in this spawner so for the time to spawn i have assigned 1.8 and for main height minus 4 and for max height minus 2.2 you can play around with these values if you want but these are the values that i am going to use in this game so now to make this scoring system we will first make the ui for our score so right click on the canvas and create new ui element and this time create a text and we will rename it to score now click on this icon here and click here top center to anchor it on to the top center of our canvas now we will change its width and height so select this rect tool now we can change its width so we will make it as the width of the canvas and for the height we will type in 300 or let's make it 200 now move this score text to the upper side of our canvas and we will write score by default change it to bold and for the font size we will go with let's say 80 now click on this alignment and align it horizontally and vertically to the center now click on this best fit now we will change its color to red we will give it an outline so type in outline now we will also give it a shadow and change the effect distance now we have created our ui for displaying this score so now go to the game manager script and we will make a public variable to refer to reference the score text so make a public text so if your if it doesn't suggest you this text then you have to include this name space here using unity engine dot ui so we will name our variable as score text score txt and we will also make another variable which is private float and score so it will keep track of our score so now at the beginning of our game our score would be zero so make it zero now in the update method we will increment our score variable so let's increment it by time dot delta time so time dot delta time now in the update method we will also change the score text so let's write score text dot text so we are accessing the text property of our score text component uh so let's go to the unity and click on this score text and we can say see that we are accessing this text property of this text component here so now we will make it equal to score plus our score variable so we are adding a string and if load so now let's save this script and go back to the unity and now we have to assign this score text to our game manager so let's drag and drop this score text to the game manager's score text field now hit play button and you will see that our score is increasing but it is displaying the float value so we have to convert this float into an integer so let's get back to the script and we will here type cast this score variable which is float into integer so let's type cast it from score from float to integer now save this script and go back to the unity now if we hit play then we can see that now it only displays the integer values so that's it for this video we have implemented the scoring system for our game so in this video we are going to create a pause menu so we are going to duplicate the game over screen to create our pause menu screen because it's quite similar so to first of all to create the pause menu we have to create a pause button so let's duplicate this retry button so press ctrl d to duplicate and drag it uh outside of this uh game over panel so now you can see let's rename it to pause and we will also rename its text so we will use this or kind of symbol for this pause button you can find this uh key on on the backward slash on the keyboard so after that we will resize this button so let's make it 100 by 100 and we will also align it to left and now we will go into the scene view double click on the pause and we will resize this text boundaries so that it can fit well okay and we will also disable the shadow for the text now you can see it's it is looking like a pause button so now click on this move tool and we will actually let's just type in the values so click on the pause button and for the position x we will say 90 and for the position y we will say minus 90 so it will be positioned at the left left side of our screen so now that we have created the pause button we can go into the game manager script now we also have to create the reference for our button so let's make a public okay so since it's a button then we will call it by the on click event so let's make a public function public white pause game and here we will say that time dot time scale is equals to 0 because we want to pause the game and we will also create a public variable for our pause menu public game object then pause menu and at the start of our game we will say pause menu dot set active set active to false and whenever we pause our game then we will say let's just copy this so copy and we will paste it here and we will say pause menu dot set active to true and we will also create two more functions so let's create a public void resume resume game so in this function we will first of all disable the pause menu screen so let's make it false now after setting it to false we have to also make this time dot time scale equal to one so let's make it one time dot time scale equal to one so whenever whenever we press the resume button our game will be resumed from the pause state so we will also create a quit function let's make a public void quit game for now there will be only two buttons in our pause menu so for the quit button we have to just type in application dot quit and whenever we press the quit button it will quit our game now we have created all the necessary functions for our pause menu now we have to create this pause menu ui so let's get back to the unity editor now we will duplicate this game over panel so press ctrl d and we will rename it to pause menu now make it active we forgot to save this script so let's save it now we will also change the text on these two buttons first of all let's rename this retry button to resume and this main button to quit and change the text to resume and quit to quit now we will make this squid button a little bit smaller so let's make it 500 and we'll also adjust its shadow okay so now you can also change the background color of our pause menu panel okay so now we will assign the functions to the buttons now click on this pause button and here the game game manager object is already assigned so let's go to the game manager script and choose the pause game function now for the pause menu click on this resume button and we will choose resume game function for the quit we will add the on click event and drag and drop the game manager object and select quit game function now our pause menu is ready so we have to also assign this pause menu to the game manager object game object so let's drag and drop this and we will also disable this by default now save and now we can click on the play button and let's click on this pause so you can see that our game is paused now if we click on this quit button nothing will happen because we are in the editor mode so whenever we export our game to android device then we will be able to quit our game now let's click on the resume so it will resume hello guys so in this video we are going to create a main menu for our game in the previous video we have created this pause menu so that whenever we click on this pause button our game will be paused and we can resume or quit now we will create a main menu so that whenever we start the game the main menu will be shown first and then we can choose to play the game or quit currently we will implement only two functionalities quit and play but later on we can add high score and options so to create a main menu we have to create a new scene currently we have this sample scene you can also rename this to level or game whatever you want but we will create a new scene so let's create a new scene and we will name it as main menu now double click on it to open now we want to change the background color of this main menu so click on this background property and change it to something white you can make it like whatever you want we will also create a button here so let's go into the ui and then button it will automatically create the canvas and event system we have already talked about these two so we will choose screen space camera as our render mode and we will drag and drop our main camera and here we will click on this pixel perfect so for the ui scale mode we will go with scale with screen size so it will scale our canvas according to the screen resolution so we have to provide this reference resolution so let's say 1920 by 1080 then because we are in portrait mode then we have to give 1080 by 1920 and here we will say 0.5 now we will rename this button to play so let's rename it to play we will make it little bit bigger let's go with 300 by let's go with 400 by 200 okay now we will also change the text on the button so let's make it let's play we will choose the font style as our bold and let's increase the font size we can make it 200 and we can also click on this best fit so it will fit our text according to the size of this button now it is already centered we will also change its color if you want but let's change it to completely black now we will also give it a shadow and let's adjust this effect distance now you can also change the effect color of the shadow but this looks quite well now we will also give the shadow to our button and change the effect distance okay so now we will also reposition our button let's click on the button and okay so let's click on this move tool and drag it a little bit upward okay this is good now we will duplicate this button so let's press ctrl d and we will rename this to quit and we will also change the text on the button quit and let's reposition it okay so we have only selected the text you have to select this whole quit button okay so if we want to give a title to our game then we need to hold display and quit button slightly below so let's select them by holding shift and we will drag them downwards we can add the title if we want and we can also add high score now we will make this quit button little bit smaller okay so it's looking quite good now you can also add a title by just right clicking on canvas and adding a simple text element so we will call it as our first game or you can call it whatever you want and we will increase its size it is currently not visible because the text box is quite small let's click on this rect tool and we can expand this and we will also reposition our title so now click on this text and we will annoy align it to center both horizontally and vertically now you can see that it's looking quite good we can also change its color let's click on this best fit i can also change its color then we can also give it a shadow like this you can also increase the font size okay let's name it as endless runner okay that is good now that we have created the main ui of our main menu then we can save it and we have to also add this main menu scene to our build settings click on build settings and drag and drop this main menu to our build setting this scene list so now we can create a main menu script so click on the script folder right click create a new sharp script and call it as main menu double click on it to open it up individual studio now we are going to use unity's ui so using add this namespace using unity engine dot ui okay so we can we are also we are also going to use the scene management so let's include that as well unity engine dot scene management in fact we are we will not be using this ui unity engine dot ui namespace but we we are going to use this unity engine dot scene management so let's create some functions for our buttons let's create a public void play again and here we can say scene manager dot load scene and here we can pass in the name of our scene so in this we have to copy the scene name click on this sample scene click on f2 ctrl c and then we can paste this scene name here you can also rename this sample scene to label or something like that and for the quit button which is quite simple public let's just copy it from our game manager script we have already created this quit button functionality here so let's copy it okay now we have created the main manuscript so let's get back to the unity and we can assign this main manuscript to our canvas so let's assign it now click on this button ctrl press ctrl and you can select both of them at the same time and we will add this on click event and drag and drop the canvas so for the play button we will choose the play function play game function and for the quit button we will choose quick but quit game function now our setup is ready so we can hit play the squid button will not work in the editor but once we export our game to android it will quit our game whenever we click on this let's click on play now we have to also assign our main menu a main menu button function that can redirect us to main menu whenever we lose the game so let's add that functionality also let's get back to the game manager script and here we will create a new function so let's create a public void name menu and here we will say scene manager dot load scene and we'll give it the name of our main menu scene which is main menu you have to type in the correct name otherwise it will not work so let's copy it from here paste it okay so it is done now save this script and go back to the unity and now we can go to the sample scene and in the pause menu we have a resume and quit button but in the game over panel we have this main button so let's add a on click event and drag and drop the game manager game object and select main menu function and it is done so now let's hit play and we can see that we can now go back to the main menu and we can play our game hello guys so in the previous video we have created this main menu in our game now in this video we are going to create some sound effects for our game like jump and hurt so for this we are going to use a software called bfxr which is used to make 8bit sounds now to download this software open up your browser and search for bfxr download and click on this first link and from here we can download it either for windows or mac so click on windows and it will automatically download these you can install it as you install any other software it is pretty straightforward i have already downloaded and installed it so you can install it and after installing double click on it to open it up now you will see this kind of interface when you open this program there are various buttons there are some prebuilt sounds that we get out of the box which is pickup coin laser explosion power etc we can also create a randomized sound by clicking on this randomize button and we can also we can also modify these properties for each sound apparently we are on this jump sound so we for the you can uh explore this software more but for our game we just need two sounds which is which are jump and hurt so we will use this prebuilt sounds now to create a new sound we just have to click on this button of the jump or heart or whichever you want to create currently the jump sound is already created but i will create it anyways so click on this jump button to create jump sound and you can click on this play to play the sound and you can preview it and you can also change the properties of this sound now i will delete delete this jump to and i will use this first one and i will also create uh now first of all we will export this created sound effect now to export any sound effect we have to click on this export wave now we will export it on our desktop so click on save you can see that our sound is exported now we will also create a heart sound for our game so let's click on this hit or heart you can preview this and modify it as always you can also choose different synths from here like triangle tangent or sine but i will use this default one so i will cancel this jump and export the heart sound so click on export wave and we will save it on the desktop now we can close this program you can of course explore this more if you want but it is the two these two sounds are enough for our game you can also create some other sounds if you want so after creating these sounds go back to the unity editor and here in the assets folder we will create a new folder for keeping our sounds so let's name it as sounds and in here let's drag and drop these two sounds so select these two and drag them into the unity editor and in the sounds folder it will import it now you can preview it from here also by clicking on this play button now we have to go into this sample scene you can rename this scene but i have not renamed it you can rename it to level one or something like that but for now it is okay so we will uh we are here in our main emcee so we will drag and drop these two sounds into our scene so shift and drag and drop these two and it will create two game objects and they will contain this audio source component and as the audio clip it will be our sound itself now these two are created on the position 0 zero zero which is totally fine you can put it anywhere you want and uh these components are these compare this component which is audio source is responsible for uh this uh playing this sound now our main camera already has a audio listener so which is used to listen the sound in our scene produced by the audio source now once we have created these two sounds to game objects then we will go to our player movement script and we will reference it so let's make a public variable so public audio source and you will name it as jump sound now let's save it and after that click on the player it is compiling so click on the player and you can see that the player movement script has this jump sound field so drag and drop the jump game object into this slot so now we will play this jump sound whenever our player jumps and we have to do few settings here we will see to select these two sound so select these two and take this play on awake so they will not play whenever our scene starts but they will play whenever we call them from our script so make sure that this play on awake is not selected for both of them now we will also give a tag to our obstacle so let's create a tag as o b s d you can create a tag with whichever name you want but i will create this stack with obst name now we will assign it to the obstacle return we want to play this sound whenever our player jumps so in the player movement script we will play whenever we tap on the screen so let's symptom sound.play now it will play the jump sound whenever our player jumps or we tap on the screen so now we want to play this jump hurt sound whenever our player collides with the obstacle so let's first of all reference this right sound so probably audio source with sound now we want to play if the collided object is uh obstacle so copy this if statement and paste it here and we will say equalizer dot compare tag to obs then we want to play this sound sound but it will not play the sound currently because we are making time dot time scale equal to zero in the obstacle script here so we will not make it 0 so comment it now we can go back to the game manager script and here we can say that if the then we want to increase the score and now we will also make the obstacle speed to zero so to do this we will say if game manager because it is a static variable so we can access it from here also game manager dot is game over so if the game is not over then and then we want to increase the position of the obstacle so we will increment it whenever the game is not over now after that it will work so let's save this and go back to unity now we can click on this player and drag and drop this hit sound to this it's it's sound field now click on play and now it will play the sound whenever it collides with the obstacle now we can say we can see that the spawner is spawning the obstacles so we will also check here if the game is over or not so let's check if game manager dot include is north sign in front of it so we want to spawn the obstacle if the game is not over past it here save this script and now we can see that it will not spawn the obstacle if the game is over our sounds are working perfectly hello guys in the previous video we have created the sound effects for our game and in this video we are going to create a high score system for our game we are going to use uh unity's player flash for this it is an easy way to store the data on our device locally so we will first of all create the ui for high score so let's go into the main menu and expand this canvas object and in here duplicate this title text and we will rename it to high score so let's say name it now after that we will also reposition it to the bottom of the screen somewhere around here let's change the text to high score click on this best fit and let's also resize the text area to make it in one line and after that let's go into the main manuscript to reference this high school text create a variable public text i score txt and after that save this script and let's go back into the unity and wait for it to compile and after that click on the canvas and drag and drop the high score into the high score txt grid and now let's go into the game manager script and here when we are setting the score we will say player press dot set int you can also set float and string we will give it a string which is a key to access this which is high score and we will set it to the current score and the score is currently float so let's type cast it to integer now we want to change the high score only if the score is less than the high score so let's say if our score is less than i'm sorry it is greater than player price dot get it and we will get this particular key which we have created which is high score and we will also pass in the default value as 0 so whenever our score is greater than the previous high score it will reset the high score key to that score now save this script and in the main manuscript we will say that high score text dot text is equals to is equals to player facts let's say player press dot get integer and we will get that key which we have created which is high score and we will also pass in the default value as zero and we also need to convert this into a string so let's say to string okay so now in the game manager script we have to also type cast the code to integer because it is currently float okay so save the script and go back to the unity and let's play the game we can see that our high score is 0 but we want to also display the high score in front of the actual high score let me simplify it so we will add a high score string in front of the actual high score okay so that's it let's save it and go back to the unity now let's play the game now you can see that it is currently displaying high score as zero let's play the game and okay let's try again okay so now it is 4 so it will display s4 and you can reset the player press by going into the edit and clear all player player preps and click on yes to delete all the player flaps and it will reset the data in the player tracks hello guys so in the previous video we have created the high school system for our game and in this video we are going to export our game to the android platform first of all we have to change some settings so click on the file and go into the build settings after that click on the player settings and in here we can change the company name currently it is default company you can also change it to whatever you want you can also change the name of the game and uh we can also change the version so every time you update the game you may want to increase this and let's uh select the icon for our game and i will select this knob icon which is a default one so you can also make your own custom icon obviously you will make your own icon for your game you can set it there now in the resolution and presentation uh make the default orientation as portrait so our game will be played in the portrait mode only and we are not going to publish this game so these settings are currently okay after that make sure you have installed the android build support while installing the and click on the build and you can save this apk wherever you want currently we are saving it into the desktop and in the new folder so save it and it will take some time to build the project make sure you have an active internet connection because it will require the internet connection to build our project so it may take some more time for you so please wait while it is building for now the this series this beginner series is completed we may add some extra things in the future like double jump functionality and simple store system etc but for now it is completed as a beginner series now let's wait for the gradle build to complete and after that you can see that our app is in the new folder and you can install this app into your android device and you can play it on your own device okay so that was it for this video thank you for watching this video