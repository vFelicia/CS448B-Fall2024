hello everyone this is varsha and welcome to programming knowledge so in today's tutorial we will understand what is the difference between git kraken and github now uh in the previous tutorial i explained about the get kraken i also showed some of the installation process about git cracking and there were a lot of comments asking that is there any difference between the git kraken and github so today i'll be explaining you the difference between both these terms also we will categorize some of the git commands so that it's easier to learn also we're going to learn the new git command that is the git diff command and how is it used and what is it all about we're going to learn that so let's get started so the first thing comes is what is the difference between the get kraken and github see basically github and gitgracon both are different they are not the same and github can be classified as a tool like it is a code collaboration tool and also it has the version control now i have explained what is version control before in the previous tutorials if you haven't seen those tutorials you can go back and see those tutorials also a code collaboration means you can collaborate your code on github whereas git kraken it is a source code management it manages your source code it shows the pictorial representation about the get pull the get push command so basically it manages the source code it shows the git commands the issues the push commands and everything in a pictorial form so that is what git crack in it and github is open source but get kraken is not open source it's not free github is free you can host your websites for free whereas on git tracking you cannot and yes of course there are a lot of companies which use github that is the netflix udemy and many other thousand leading companies use github whereas git kraken is used in companies like apple google microsoft amazon these are some of the leading companies which use the get kraken developer tools so this is the basic difference about the git cracking and github okay so to summarize first thing to control your code you can use git there are other methods also to control your code but we can use kit now to host your code you can use github you can use gitlab you can use bitbucket now we choose github now to get a git gui so that you can work easily now what happens here we write the git commands like git push and get pull commands whereas if you want to push your uh project just by one single click you use the gui that is the graphical user interface for that you have the get kraken and the github desktop okay so mostly github is mostly used and it is the most used tool by many of the users so we're going to use the github now understanding the git diff command so before that let's categorize some of the git commands that we have learned previously into different categories so that it's easier for us to learn now to know the categorization what i did is simply just go on no unite.com and here i have given the entire categorization of all the git commands i will attach the link in the description box below so this is the git commands over here so if you click on git commands and here you can see the different git commands see as long we go on learning some of the commands i will keep updating this sheet but for now i have given the git configuration commas there are some of the two git configuration commands that is mostly used i have done those git configuration commands i have explained about it in the previous tutorial you can have a look at that also we're going to see what are the day to work commands what is the starting a project commands what are the different types of commands so that it's easier for us to learn once we differentiate these commands we categorize so once we categorize these commands it's way easier for us to understand that which command is used where like your day to work commands is that when you are a software developer in a company you frequently use git status command because you want to know what is the status of the working directory at that point of time so these are some of the commands that day to work commands which you should know as a fresher as well as as an experienced person so these are some of the commands that i have categorized apart from this also i have given some of the common interview questions that is basically asked in many of the interviews if you're a pressure i have given some basic interview questions which you should know even as a fresher so these are some of the questions and these questions are of course not the only questions i'll keep updating these uh questions more uh these questions are divided into basic intermediary and hard questions so if you're a pressure go for the basic one and if you want me to discuss all the answers of these questions please write down in the comment section that uh discuss the answers of these questions also or you can search it or internet anywhere you will find it and these questions are very common and they are mostly asked in many of the interviews and it's also basic requirement see if you are really good at git github and handling those projects and version control system it is always an advantageous part for you in interviews so i have designed a basic interview questions and these questions are very basic i will keep updating the sheet as we learn new commands about git so these are the different com questions that is based on the commands that we have learned till now like we have six six videos till now and these are the commands that were used in all the videos and these are the questions on those commands so if you have any doubts regarding any of the questions you can comment down so that i can answer you and i will definitely reach you out i will attach both these links in the description box below and it will be way easier for you so uh today as i showed you those git commands first we're going to go with the day to work commands we know what is git status is we know what is get add command if you don't know you can go back to the previous tutorial and watch it you know what is git comment now we don't know what is git diff and what is this git diff stage what is this git diff head so we're going to understand this git diff command more properly in the coming videos okay so uh now this is the github repository uh that i have created that is a test repo repository that i have created already over here in my github account now what i'll do is i'll go on my f drive and i have created a folder i've named it as git repo here i will just right click and you have an option of open hyper here now if you don't know what hyper is and why i have installed this i have explained everything about the hyper in the previous tutorial you can go and check it out there and if you're facing any installation problems you can reach me out on the comment sections first thing is that we're going to create a file so how do we create a file we write touch file one dot txt and there you have created a file over here in your git repo folder okay so after creating a file what is this command that we write we have done this many times in the previous tutorial that is git status to another status of the working directory so here it says it's not a git repository for now so here once we have created a file we have seen it's a git status is not a git repository we need to turn it to a git repository for that we write git init and here it says that initialize git empty repository it's it has initialized the git empty repository over here and here if i write gate status again i can see there are untracked files over here so to turn it to track what i do is git add and here i will add all the files to track and then let's see it's git status and here it sees that the files are tracked okay so still now there were no information in the file that we have created this is the file that we have created and there is no information away okay nothing we have written so let's use the git diff command now you must be thinking what is this diff command okay now let me tell you diff command is basically is basically used to track the difference it is used to track the difference between the working directory and the staging area the dip command is basically used to drag the differences between all the changes made on a file that is the difference between the working directory and the staging area okay so this is what dip command is used for it is used to track the changes so how it is going to track the changes we're going to see that so for now uh understand that here this is the git wrapper folder that we have and the file one is the file that we have created and there is no such information over here in the file one so now what happens if i write git diff and file one dot txt what it says it says nothing okay now if i write something for example if i write hello my name is varsha and i will save this now if i write git div file one dot txt and i press enter there you see i have some of the entries over here i have so i have got something written over here that is the diff get a file one dot txt b file one dot txt and some of the index numbers and minus minus plus and a lot of numbers and everything over here what is all this we're going to learn what is all this okay so this was the entire different statements that we got after running the git diff command the first thing so the first thing we saw was the git div a demo.txt bdemo.txt this demo is the file name here you can it will it can be file1 dot txt or a dot txt or b dot txt or anything okay the demo is the file name so here it's written a demo.txt and b demo.txt what is this a and b over here and what are these index numbers we're going to learn all this so the first command is that diff get a demo.txt and b demo.txt a is basically the source the source area that is the staging area b is the destination that is the working directory as i said the diff command is used to track the difference between the changes made on a file that is the difference between the working directory and the staging area so there needs to be a staging area as well as the working directory right so that is the reason why here it is written a that is the source the source file that is the staging area b that is the destination file the working directory now if you don't know what a staging area in the working directory i had explained that in the previous tutorial go back to those tutorials and please watch it out but still i'll tell you uh what is this working directory the working directory is where your file is so if i write git add command it goes to the staging area so we are going to know the difference between these files what is the difference between the files whatever data we have given over here in the file it is there in the staging area or it is not there in the staging area this is what we're going to learn today so git div a demo dot txt that is the source the staging area b that is the destination the working directory now the second statement that we could see is that index and there were some numbers over here okay there were a lot of numbers now since i said git diff commanders you should track the difference there needs to be a source file that is a staging and the destination file right for that there needs to be some address or some index number fetching out that source files and the destination files like in c plus plus we have pointers that stores the address of some variable right similarly over here we have hash files we have hash of file contents these are some hash values that are used that is used to store the file content so basically the first hash value that we have that stores the file content from source or staging area and the second hash value that we are having this hash value stores the file content from the destination area that is the uh that is the working directory coming to the third one what is this number now see 100 is the file type here we have the dot txt type okay we had created file1.txt now if we have with a python file we have a html5 we have different different files for different files we have different file modes so for txt 100 is used now after txt this after this 100 we have 644 now these are basically the file permissions that are given over here now you must be thinking what is this file permissions now see i would like to share a document to you i have seen this document where we have the linux file permissions over given over here i will if you want i will give the uh link in the description box below so basically these are the permissions now when you have a file when you having a file obviously you are in a company you want some rights given to a employer who is at the middle level and some of the uh and some of the permissions given to the employee was at the lower level like for example if you are the owner of a particular file you can read write execute you can update the file delete the file whereas someone who's in a group of like middle level who's in a senior manager or something and there you can give permissions like you can only update you cannot delete the file whereas with someone at the lower uh level they can only read the data they cannot write the data or update the data or delete the file so these are different file permissions that you can give as a user to different different group of people so here there are basically three groups that is the user group and all okay so the user is basically the owner group are the group of people like managers there are some higher level people all grouped together and all means basically their group of managers and also the employees so here these are three basic groups so for three basics group we give three numbers okay so what are these numbers that if you have seen it was written six four four yeah it's written six four four so you heard it written six four four so what is this basically this six means wait let me tell you six means read and write so basically the user the owner is having the read and write operation now coming to 4 and 4 what is this 4 and 4 4 basically means only read that is all the users and all the group of people who are at the senior level also the users who are at the lower level are having the permission to only read the data they cannot write the data or execute the data or anything there are no permissions given except they read the data so this is a permission file so this is a permission table that i can see over here and these are different symbols that is basically used to represent them for execute we write x for we write w for execute plus right we write w x so these are different symbols i will give the link in the description box so that's easier for you to understand okay so now the third command was there was some three dashes and a demo dot txt now you know now if you know what is this demo dot txt right this demo.txt is the source file that is a staging area file now why is this minus minus over here now see basically this means that i will show that representation of this this is the working directory or the destination file that is the b demo dot txt and this is a staging area here i had written hello i am varsha did i write a command git add after it no right i did not add so i did not add it to the staging area so this is the difference between the two files and this is what it is showing that hello i am varsha that is there in the working directory but it is not added in the staging area so here when it says minus minus a it says there are some source files that is missing okay whereas when it says b demo.txt that means some new lines are added in the destination file but it is not there in the staging area this is what this basic command means that minus minus a demo.txt that demo is the file name whereas this minus minus means there are some files are missing whereas plus plus means new lines are added in the destination file and it is not there in the staging area this is what the difference is between the minus and the plus over here now after this you had seen some numbers that is the minus 0 and plus 1. so basically this minus 0 says that in the source file there are no lines are present whereas in the destination file there is one line added and what is that one line that is hello my name is russia now before this line you can see there is a plus sign this means that some lines are added to the destination file or the working directory now if there is minus over here that means some lines are removed from the destination files and if there is nothing there is a simple space over there that means some files are these files are unchanged there is no uh lines added and there are no lines removed from it so this is is what is the basic meaning of the five lines that you could see now going to the pictorial representation is that we had a working directory which said that uh hello i am varsha whereas in the staging area there was whereas in the staging area it was not added because i did not write git add over here so this basic pictorial representation of it now you can try this out and you if you have any doubts about this you can always reach me out on the comment section i will definitely answer you out this is all for this video now and we're going to learn about the different diff commands uh in the next video thank you