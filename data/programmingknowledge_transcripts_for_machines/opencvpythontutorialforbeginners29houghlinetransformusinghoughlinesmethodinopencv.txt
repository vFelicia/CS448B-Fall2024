hey guys welcome with the next video on open CV tutorial for beginners using Python in the last video we have seen a brief Tori introduction about half line transform so I have told you that open CV implements two kind of half line transforms one is a standard half line transform using half lines method and the second is the probabilistic half line transform using half lines capital P method so we are going to use the half line method in this video and see how we can use this half line method to detect the lines inside an image using half transform now I also told you that there are four steps associated with half transform so the first step was the edge detection step using any edge detection method preferably canny edge detection the second step is the mapping of edge points to the half space and store these edge point to an accumulator the third step was the interpretation of accumulator to yield lines of infinite length and the fourth step was the conversion of these lines to the finite lines so let's say we have this image of this Sudoku dot PNG and you can see all these lines here which we want to detects so this is a line and this is the line so all these lines we want to detect using the half line tour and transformed so I have already written this code so I am going to go step by step to explain how this code works so in the first step you just need to import the normal c v2 and the numpy as NP then here I am just reading this image using I am read method and the next step I'm converting this image into a grayscale image and storing it into this variable which is great because for Kenny edge detection it's preferred to have grayscale images rather than your normal colored images now in the next step we are applying the Kenny edge detection method on this grayscale image so here this cb2 dot kenny method takes these arguments 1st argument is the image 2nd and 3rd argument is the first threshold and the second threshold so I'm giving the first threshold as 50 and the second threshold here as 150 and the 4th argument here and giving aperture size is equal to 3 now in the next step I'm using this half lines method this is the normal Hough transform method which is implemented in OpenCV now this half line method takes few argument the first argument is the image so we are just just passing this edge detected image to the first argument of this half lines method the second argument here is the row value this row value is the distance resolution of the accumulator in pixels normally it's taken as 1 the third value is the theta value which is the angle resolution of accumulator in radians so for that we are just using numpy so NP dot pi divided by 180 so this is also typical in this method and the next argument here is the accumulator threshold parameter so what does this mean it's a threshold so only those lines are returned that get enough wood that means that those lines will be returned which have threshold greater than this value so starting value I have taken here as 200 as threshold so now this half lines method is going to to return the output vector of lines now I have explained you how polar coordinate works for the Hough transform in the last video so these lines will be in the polar coordinate so each line is represented by two or three element vectors either Rho and theta or Rho theta and words so as you can see this is the output vector of lines so I'm going to iterate over each and every line vector and what it gives is the first element of this line is going to give you these two values row comma theta it's going to give you row comma theta or row comma theta comma boat right so right now I'm using just two parameters here Rho comma theta so Rho is the distance from the coordinate zero comma zero which is the topleft corner of the image and the theta is the line rotation angle in radians so all this Rho and theta I have explained you in the last video and we have seen how we can represent these Rho and theta values in the half space so first of all what we are going to do is once we get the Rho and theta value is we are going to just get the COS theta value and the sine theta value because we want to convert these polar coordinates into the normal Cartesian coordinates for the line method because this line method as you can imagine takes these coordinates right which are the Cartesian coordinates so this is the point 1 parameter and this is the point 2 parameter so x1 y1 and x2 y2 so first of all we are just getting the COS theta value and theta here is this theta so cos theta we are just to a and the sine theta value we are just assigning to B and we are just multiplying this a to the row so this will give us the x0 value and the by zero value when you multiply B by row so this Row is this row value so this X 0 and y 0 is going to give you the origin which is 0 comma 0 or topleft corner of the image but we want the lines not the topleft corner of the image so how we can get these x1 and y1 coordinate and x2 and y2 coordinate this is given in this equation so once you get your x0 and y0 value you can get the value of x1 and y1 coordinate using this equation so you just need to typecast everything into integer so this equation x1 value stores the rounded off value of the row as I have shown here so they say RA represent row so row multiplied by cos theta cos theta we have already taken in the a variable so we are essentially here multiplying the row multiplied by cos theta minus thousand multiplied by sine theta sine theta value is the value of the B right so x0 plus thousand multiplied by minus B here okay y1 we get using this equation so y1 is equal to int in the bracket y0 plus thousand multiplied by a which is essentially this equation which is row multiplied by sine theta plus thousand multiplied by cos theta so these two values are going to give you the first coordinates and similarly we are going to get the x2 and y2 coordinate using these two equations so here everything is same just this is new right so in this equation you just need to replace a plus by minus and you get the x2 Lu same you have to do in the case of y2 so in this equation if you just replace this plus by minus you will get the y2 value and we have already seen how to use the CB dot line method it takes a few argument as you can see here first is the image so image is our original image second is the x1 and y1 coordinate which is the first point comma the second point so as you already know that a line is a collection of point so you need at least two point to create a line right so this is the coordinate of the first point and this is the coordinates of the second point the next argument here is the color so color I have taken simply zero comma zero comma 255 and the last parameter here is the thickness of the line which I have taken to here and the next line of code you already know I think so after this line we come out of the loop and we are just plotting all the lines using this loop on the original image and once we get all these lines on the original image we are just showing it using I am show method and at the last we are just destroying our window once we are done with the image so let's run this code and let's see what happens so I'm going to run this code and you can see all these lines are plotted here let's see the canny edge detected image also so I'm going to just after the canny edge detection I'm going to once again add this I'm show method to show the canny edge detected image also so you can see here this is the canny edge detected image all the edges are detected and based upon all these lines which are detected here these lines are drawn but the problem here is these lines are of infinite length so there is no end to this line this these lines just go from the start or the corner of the image to the other corner of the image so you can see they start from here and go to the next corner they don't just stop here so in this half transform you see that even for the line with two argument it takes a lot of computation and we don't even get the correct result so this problem can be solved using the other method which is implemented using this half line P method which is the probabilistic half line transform which I'm going to show you in the next video so how we can get the better result using half line P method we are going to see in the next video so we are going to apply the half line P method on the same image and we will compare the result so that's it for this video I am going to see you in the next video you