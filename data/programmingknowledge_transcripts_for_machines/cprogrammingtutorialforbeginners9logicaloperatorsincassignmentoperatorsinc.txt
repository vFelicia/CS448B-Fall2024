hey what's up lace welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're gonna discuss about the logical operators and of course the assignment operators so previously we have discussed this relational operators so we have like six relational operators the equal or checking if value is equal to some value also and then not equal we have also greater than less than and then we also have greater than or equal to and we also have less than or equal to some value so this is quite useful guys if you are using the control statement in C say for example if statement and then you want to check if a certain value is equal or not equal to some value so for example if variable X is equal equal to 2 so basically we're just checking if this particular variable or the value of this X is equal to 2 or we can reverse that we can check if this particular viable variable it's not equal to 2 and of course you can use other operation or operators like greater than less than or we could also double check for greater than or equal to or less than or equal to so basically guys this operators is like just checking the relationship or if the certain value is greater than another value or it is equal to another value okay now let's move on to the next one which is the assignment operators so basically guess there are a lot of assignment operators in C programming language ok so the first one will be the equal sign ok this is one of the most common assignment operators in C programming so for example you want to assign so as I've said guys this is for assignment operators assignment operators okay so basically this is useful if you want to set a value to a variable okay so for example X and then if you want to make this like five or the value of X is equal to five you can do that by using this particular assignment operator equal symbol okay that's easy and the second one is plus equal so we have this also plus equal and then it basically means guys that it increments the value and then assign it to the de variable okay so if I simply want to make this like X and then plus equal to two so basically let's try this we can remove this code right here we can use the increment then assign so basically like we set a value for x we set it to five and then we can have it like X plus and then equals to three and then we can use the printf function and we can display the result further salsa for example did value yes the format specifier and then of course the comma and then the X variable okay and then semicolon at the end of this line save this and then compile and build or build and run our application so basically as you can see here the value is 8 so this is the doing of the plus equals two so big basically what it means that it add three to the variable X and then of course it the result of that is assigned to variable X also okay so this is basically just incrementing the value of our via variable and of course we also have the X minus equals to first of all 1 okay so basically it is the complete opposite of this one because this is for incrementing and this is for bickerman okay and of course we do have other operators for this particular topic which is the assignment operators we also have X for example x or x equal to two you can also do that and basically the division also okay you can do also the modular part modulo symbol and then equal and then so for someone too and there are others for example % 4 I mean X and then and and symbol and equal symbol and then of course the value that you want to assign so this is basically bit bitwise and assign assignment so we're not gonna use that for now so basically our currently concerned as this operations we can have the increment the first one is equal and then of course the increment decrement and then multiplied multiplication then assign and we also have divide in a sign we also have modulo and assign so that's basically how the assignment operators work so the last thing that we want to discuss here is all about the logical operators so logical operators provides three mechanism that we can test more than one condition to make a particular decision so these are the end and symbol so meaning it is logical and logical and and let me show you that later on what this means logical end and of course we also have this bar bar and this is logical operator or logical or and then of course we have the negation or not symbol okay so logical or and then this is end and of course logical not okay so let me show you how this works this three logical operators now let's try to use the logical operators so for example the first one the logical and operator so we have your variable X which is set to eight or the value is eight and then we can check if this particular value is or the for the particular value variable X is greater than 5 so we can do that by using the if statement and then X is it less than or greater than five so if X is greater than 5 then we can display something in our in our screen or output something so we can do printf and of course the value is greater than greater than 5 right so we could build and run this and see the output of our program and of course it's a general display the value is greater than fine okay so what if the value is for okay so obviously there will be no output because this the condition right here turns to be false because the actual value of x is now 4 so no statement has been executed for this particular program now we can use logical operators and in this particular scenario so for example you want to check that the value of X should be greater than 5 but less than 10 okay so we could check if the variable X is greater than 5 but less than 10 and we can do that by using the logical and operator so double ampersand and X and then less than 10 okay we could do that and of course if we try to run this still there is no output because the value of x is 4 so we can try 6 here build and run our application so the value is greater than 5 and we should add here that the value is less than 10 okay build and run our application so the value is greater than 5 and it is less than 10 now what if it is 11 so obviously it's going to display nothing in our screen because the conditions of this particular statements is not met ok so that's how you can use the logical and operator and of course when we say and basically it means that it should be the both of the statement or both of this condition should be true in order for this statement to be executed okay and you can also use the logical operator or in this particular scenario so it doesn't matter if the X is greater than 5 or X is less than 10 it should you know execute the statement that we have here okay so for example you run this okay so we have the values greater than 5 and less than 10 and we can try like 20 or maybe use the value 20 in our X so let's try this save and then build and run okay and as you can see we still have or we still get the output the value is greater than 5 and less than 10 that's because this particular statement here returns true so it doesn't matter if this particular statement here is false so as long as there is a true returns either of this statement so there should be statement printed or executed inside this particular if statement okay so I think that's all there is to it guys for this tutorial and in the next video we're going to discuss deeper with this particular if statement and of course if you want to learn more about C programming you can try to watch our video tutorial series in C for beginners so see you guys in the next video and thank you for watching