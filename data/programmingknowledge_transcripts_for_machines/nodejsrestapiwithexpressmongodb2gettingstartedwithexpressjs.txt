hey guys in this video we are going to create a server using Express library right now I have created the file app torches and I'm going to initializing him into my folder using NPM any tests way because explosives library is going to install from in him so now we are going to install NPM we haven't installed expenses level NPM using NPM install and saving destice self and expressed in the meantime we are going to create a cost let's say Express and acquiring the module Express and also an app Const which is going to use Express as a function and app is going to listen to a port number let's say 3000 so that's it the server has been created and you can see that Express library is also pink installed here so for convenience I'm going to start the syllable using a node 1 and the file it is no add one app touch yes and now we are going to see what how this expressive works well Express uses a concept called middleware well each request is going to go through the middleware and response is going to set through from it so it uses a set of middlewares so now we are going to see how it's been done let's so let's say app is using a function that's just a used function and its uses a request handler for this the step two arguments necessarily that is request response and the next is a next function which is used for sending the next middle voice to sending the function to sending the request to the next middleware so how it's being used we can see through by creating a new request and next and now if i console here that let's say first middleware first middleware and let's say here console.log second middleware second middleware and if I run this file you will see this that this only file will be done this only middle available a run this will not run so for executing after this me deliver to this the next function is used but let's see what will happen right now so let's NPM start this file not one is starting the file and let's say localhost 3,000 and right now there is no response is being sent so it's like the same river hand handling the response so that is the first middle of a first middleware so if I write next here you will see that if i refresh the auto restart and what more you will see that if I again localhost 3000 you will see the first second middleware is being ranked that means this middleware then after this malware but if I select the page like slash product page this will also go to this middleware and if I select / software this will also go to this middleware so for selecting a specific pace we are going to use the route concept here so before request before a callback function there is a route options is being here used so if I let's type ad product here and here it's less because it's going to be on home page and we are going to remove the next because it's not going to be executed after this believer to this so no let's response back to it HTML tag let's say here a form tag so now I'm going to create a form tag which takes input let's have a type let's call text and also a name that's called title and this is wrong because we are we are going to use inverted and also say inverted and now also a button is being used here and it's submit button and also we are going to send back this result using the action to product product base which is a method post so if this will run then it will go to the product route so we are going to create a new road let's call it AB dot u is product which takes request/response and next and it's a callback function and it will redirect to sorry it will response back with a redirection to a slash space and also we are going to response back with h1 tag like hello from Express Cheers now if I save this file and if I go to the localhost 3,000 page it will say local hello from X places and if I go to the add product add product page it will show the form tag and if I type books and it's submit it will go redirect to the experts J's file now what's the response sent back with the form Tech well it's supposed paste and it will send to the product page product route so if I see what's the requests getting to it'll get into the body so that can be seen through the twisted body but it will not give the correct answer that the correct solution that is required here so if I seek add product here and go to the books type books here you will see that it gives undefined well the response is being sent to through a JSON format so we are going to use another functionality that is given by Express status Express dot URL encoded with extended true now if I type this and and if I go to the head product page and if I type box right now you can see that it gives the consult or requested pardhu fine we can also send file through the response so let's create files HTML files so let's save views we are going to create the views folder in which there will be a product piece let's say product dot chest pass or dot HTML and another one is swap taught HTML and so had created two files that is product dot HTML and so up put HTML the same way you can create into your own laptop or desktop so the functionality who's being quaint used here like we are going to remove the response thought sent metal and we're going to respond start sent file so how it's being used here for using this we are going to use the core module it is part here and we are going to get from part and this is used to part dot join is going to join the directory but that is where is the product of HTML set so we are the turn name that we have used is going to give the directory name or the full part of the expressed demo and we are going to the views folder and it's going to select the product dot HTML page and for this bit for this middleware we are going to send the file we're going to send file using part toward join and using the third name and go to the views and selecting the stop dot HTML file so now if I now if I run this file we are going to see if I go to localhost 3000 and select add product is going to go to the add product page and if I type again books here you will see that it is going to redirect to the localhost 3000 and say the title is the book but you can see that if all the functionality is going to the in the one file it's going to get very lengthy so Express provides and another module or a function that's called routers which is used as a mini Express for the folder for functionality so if I creative like folder like router because this because we know that this is used for the product phase and this is used for a homepage so we are going to create a folder for this or a file that is that all the functionality will be reside on that file and this when this functionality will be decided on one file so let's say here like say product dot Cheers and here also you file shop tour Cheers so for requiring the router concern we are going to import the Express module for the Express module to require we are going to express and for requiring the router let's say the name will be router and we are going to use Express dot router for this this will not be changed this is fixed so now if I cut this lines from here and paste into this file and let's say and let's also change the name up to the router also this one to the router now if I module use module dot exports and export a router file from here and also for the app we are going to cut from here and paste into the table dot s jjs file and also require the same functions same libraries like expressed and also requiring that outer from Express using Express dot router also changing the name app to the router and also exporting this one the file explorer module dot exports and we are going to require from here so let's say Const product router is going to get required from dot slash router slash product and also const so router from requiring the file from dot slash router and soap and after that we are going to use the router here AB dot use product router and also the soap router and all the files are being saved and now if I run again look at those 3000 it will give the same thing and if I type again books it will give the books so this is the basic of Express chase and it will come very handy in the next video so thank you