hey guys welcome to the next video on open CV tutorial for beginners using Python in the last video we have seen how to use standard Hough transform using half lines method in open CV now in this video we are going to see how to use probabilistic half line transform using a method called Hough lines capital P method in open CB so let's go to our editor and this was the code we have written last time and we have used half lines method for detecting lines inside this image which was the Sudoku image so let's run this example really fast to see what was the result which we got last time so this was the result which we got last time and the problem with this result is you can see these lines just go from one end to the other end and in this kind of Hough transform you will be able to see that even for the lines which have a two argument it takes a lot of computation so in open CV there is also a method called half lines capital P which stands for probabilistic half lines transform and this probabilistic half line transform is an optimization of the normal Hough transform which we have seen in the last video so let me close this example and let's open the example which we are going to see in this video and you can see in this example we have used this Hough lines capital P method so when we use this half lines capital P method it doesn't take all the points into consideration instead it takes only the random subset of the points which is sufficient for the line detection so let's go through this code from the top to the end so as you can see I have imported these two packages cb2 and numpy as NP and then I'm reading this image so Doku using i'm reed method and then i'm converting this image to the grayscale image using CVT color method in cb2 now the next step is to find out the edges of the images this we have also seen in the last video so until here everything is same so once we got the edge detected image using Kenny edge detection instead of using the half lines method we are now using this half lines capital P method and it takes few arguments the first argument is your edge detected image the second argument is the Rho which is the distance resolution of the accumulator in pixels the third argument is the theta value which we have taken n P dot pi divided by 180 which is the angle resolution of the accumulator in radians the next value is the threshold so right now we have taken this threshold as 100 and this threshold is the accumulator threshold parameter which means that only those lines are returned that get enough word that means greater than the threshold value the extra 2 AG argument here are a little bit different from the half lines method so you can see all these arguments are almost same these four arguments but there are two extra arguments here or parameter here which we need to provide so the first parameter here is the min line length and this we have taken hundred so this min line length is the minimum length of the line which means that line segments shorter than this length which is hundred in our case will be rejected the next argument is the maximum line gap and it is the maximum allowed gap between the line segments to treat them as a single line so these are the two extra argument we have taken and this half lines capital P method is going to return again the output vector of the lines but the difference between this return value from half line P method and the half line method is you can see here this line at index 0 is going to directly give you the values of x1 y1 and x2 y2 which are the two points which we will be able to join and we will be able to draw the line using CB 2 dot line method in the last video I have shown you that you have to do so much calculation in order to find this x1 y1 and x2 y2 and this probabilistic 1/2 line transform method is going to do our job easy and it's going to directly give us these four values so you don't need to do anything you just need to pass these x1 y1 and x2 y2 value to the CB 2 dot line method so CB 2 dot line method is going to take the first argument which is the image and then the second argument is the point 1 coordinate which is x1 and y1 which we got from the line variable at index 0 and the third parameter here is the point two which are the coordinate of the point two which is here x2 and y2 the next argument here is the color which we have taken right now 0 comma 255 5 comma 0 and the last parameter here is the thickness of the line so we have taken 2 here and the next three line are going to just show this image first of all all these lines which we found out are drawn on the image this image which is the original and then we are just showing this image after drawing all the lines which we got using half lines P method on the original image and then we are just loading this image using this I'm show method and then after we are done we are just destroying all the windows so let's see what result we get after this script is run so I'm going to run the script and this is the canny edge detected image and this is the image you got when you apply this half lines P method on your canny edge detected image so you can see these lines are no longer going to the end to end these are more you know accurately detecting all the lines which are there in this Doku image you can see some lines are broken here so that's why these lines are not even you know drawn because they are not even detected by any edge detection so this one or this one are not detected by canny edge detection so that's why these lines are not drawn so let me show you these results side by side so this was the result which we got after applying the hoff line transform method which is Huff lines on our Kenney edge detected image and you can see all these lines here and this is the result which we got after applying Huff lines P method which is the probabilistic Hough align transform so these two methods are available in open CV to detect these lines in an image now let's go back to our script and here instead of this image which is the pseudo cou dot PNG image I have one more image which is called Road dot jpg and this is the image which contains a road and inside Road we have some lane lines so you can see this result now here which is the road and these are the lane lines which are detected using this half lines P method so in case of lane line detection you can use this half line P method but you need to decide your ROI or region of interest because you can see some lines are detected here here here and here so you just need to you know define your line of interest region and you will be able to detect all the lines or lane lines on the road so maybe in the next video we are going to see how we can detect these Lane lines on the road accurately without these noises which we are seeing here on the other part of the image so we just need to detect these Lane lines and nothing more and we will do the same on our video so on the video in which these lane lines are there and we just need to continuously detect these lane lines so in the case of let's say selfdriving car you need to detect these lane lines we are going to see how to detect these lane lines so that's it for this video I will see you in the next video you