hey what's up guys welcome to another video in which we are going to learn about multiple inheritance in Python Programming so guys previously we have seen the single linear returns but in this video we are going to check the multiple inheritance in Python so a class can be derived from more than one superclass in Python basically this is called multiple inheritance so basically the derived class will be having the multiple super classes in this case so for example a class pad is derived from Super classes that is mammal and a winged animal so basically this mammal and winged animal will be treated as the parent classes and this bad class will be the subclass of the child class which can be derived from both of these super classes over here so it makes sense because bat is a mammal as well as it is a winged animal so let us check this with the help of the example code now in the vs code so over here first of all we will create a class that is called as mammal over here and inside the mammal what we will do is we will Define the function and we will simply say mammal underscore info so this particular function it is going to take one parameter at itself which is the object itself and basically we are going to Simply print the statement that we are inside mammal function so as you can see we are simply printing we are inside meml function in order to identify that the control flow has come over here inside the mammal info function and then again we will have another parent class over here that is wind animal so we say wind animal over here and this time what we will do is again we will have the function but over here we will say Wing underscore info so this particular method belongs to the winged animal over here and then again it is going to take the parameter as the cells and then again I am simply going to copy this print statement over here and paste this inside the wind info and we will say we are inside winged animal function so we say we are inside wind animal function now guys we have created two classes over here which will be treated as the parent classes now we will be defining a third class that will be the child class of both these classes so basically we will have the class that is called as bat over here and how do we mention the multiple super classes whenever we are defining the subclasses over here so basically inside the parenthesis we will have both these classes separated by a comma so first of all we will have the mammal class over here followed by comma and then again we will have the winged animal class over here in the same way you can have any number of classes separated by commas over here in order to achieve multiple inheritance and then after this we will have the colon and then again we will have another method which will belong to this bad class over here so over here we will have the pad underscore info method and then which will take the self SD parameter and then we have the colon over here again we will have the print statement we will say are inside bad function so it says we are inside pad function now guys inside this bad class we have this bad info function and apart from this we also have this mammal info and wind info functions since both these functions are derived from these classes that is mammal and winged animal over here so we can access all these functions from the object that we create for the bad class so let us come out of these classes and what we will do is let's say I provide the object that is bad one it is equal to bad over here so we have created the object of this bad class in this case and then when we provide the bad one object followed by dot as you can see we are getting all the three functions as the suggestions by the vs code over here that's because all the three functions are accessible by this bad one object over here so first of all we will say bad info and Then followed by open and close parenthesis and then again we will say bad one dot let's call mammal info in this case so we have manual info as well as the third function that is bad 1 followed by Dot and then we have the wind info over here and then open and close parenthesis so all these three statements will be printed one at a time based on the functions that is being called by the control flow so let me just save this file now and try running this code in order to confirm the same so as you can see first of all we have called the bad info so we are inside pad function is being displayed and then again we are inside mammal function is being displayed that's because mammal info is being called the second time and third function is being called that is winged info and we are getting we are inside winged animal function so guys in this way we have also achieved multiple inheritance over here in case the functions that you want to use are present in the multiple classes as you can see over here you can have multiple classes being inherited by the derived class which we also call it as a subclass over here and this paired class is acting as a subclass and both these classes that are mammal and winged animal are acting as the parent classes now guys let us move another task over here what do you mean by Method resolution order in Python that is mro so if two super classes have the same method name and the derived class calls that method then python uses the mro to search for the right method to call so guys over here we have seen how multiple inheritance can be achieved but what if the method names in both the super classes that is in the mammal class and the winged animal class are same so what we will do is instead of this mammal info we will keep it as display over here and instead of wind info again we will call it as display so basically this time what is happening over here is both these classes that is mammal class and wind animal classes are having the same method name that is display and what we are doing we are creating the subclass that is bad and inheriting both these classes that is mammal and winged animal over here and this time both these display methods are getting inherited by this bad function now which method will be called when we use the object of this bad method let us check that so basically I'll have to remove these lines of code since these functions are no longer present but instead of that what we will do is we will say pair to 1 followed by Dot and then we have another function that is display so we have only one function that's because the name of these functions are same in both the parent classes and Then followed by open and close parenthesis so guys over here inside the pad function we have the bad info which will be called by using the pad1 object and then the next time what we are doing is we are using the bad one object in order to call the display method now which display method will be executed out of these two let us check that with the help of execution so I'll just save this file now and try running this code now so as you can see we are getting we are inside bad function which is this statement that is getting printed that is obvious that's because we have called the bad info function over here and next time when we call the display method it is saying we are inside a mammal function so guys basically this print statement was executed which proves that the display method of the mammal class is being called over here why so that's because when we are creating the child class the first parent class is being given the highest priority over here so first the control flow will check whether this display method is it present in the first parent class if not then it will go to the second parent class over here inside the mammal class it is finding that the display function is present and that is what is getting printed over here so it is the leftmost class that will be used in order to call the method which is present in multiple parent classes over here so what if we provide when the animal as the first class so what we will do is I'll just remove this mammal class from here on the left hand side we will provide wind animal and Then followed by comma and then on the right hand side we provide mammal so over here again we have just changed the order in which the inheritance is being done over here both these classes are still the parent classes of this child class that is bad class now let us check which statement will be printed when we call the display method over here so let me just save this file now and try running this code as you can see we are getting we are inside winged animal function so guys basically this winged animal function that is display function was called and we are getting this statement that is we are inside wind animal function that's because this time we have provided winged animal as the leftmost class and the control flow found this particular display method inside the winged animal class over here which is the parent class of the bat class so guys this is very important as far as method resolution order is concerned the leftmost class is being given the highest priority as far as the same names of the methods are concerned so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is multilevel inheritance in Python Programming so stay tuned