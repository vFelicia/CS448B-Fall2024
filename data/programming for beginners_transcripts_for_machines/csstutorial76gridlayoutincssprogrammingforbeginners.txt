so now we will see grid layout in CSS so guys basically the CSS grid layout module offers a grid based layout system with the help of rows and columns which makes it very easy to design the web pages without having to use the float and the position CSS properties that we had seen previously so guys we will check with the help of examples how you can easily design the web pages with the help of the grid layout using CSS so guys first of all we will understand understand the concepts of rows and columns in the grid layout in CSS so over here on the browser let us move to the sketch pad first of all so guys what is the meaning of grid layout in CSS so basically we have the concept of rows and columns as far as the grid layout is concerned so basically the horizontal lines as you can see this is one row over here and then we have the second row in this case so this is the second row that we have included and so on there can be multiple rows in the grid layout over here so guys let us label these rows in this case so let me add the text over here so basically we have Row one over here so basically this is Row one and then guys similarly we have row two and Row three as well so these are the three rows that we have included in our grid layout now guys similarly we have the columns as well that can be defined as far as the grid layout is concerned so basically the vertical lines that are going from top to bottom these are the columns that can be defined inside the the grid layout so let us have three columns over here so as you can see these are the column 1 2 and then three respectively so guys basically the grid items are aligned in such a way that they will be present in the row and the column format over here and then guys we also have some more properties such as column Gap so over here you can see that there is a gap over here in this case so this is nothing but it is a column Gap that we can Define with the help of CSS properties that we are going to see and also there's a gap between the row over here between Row one and row two and then between row two and Row three so Guys these are nothing but the row gaps and the column gaps that we are going to Define by default there will be no gaps between the rows and columns but we can include them with the help of CSS properties so guys this is the basic understanding as far as the grid layout in the CSS is concerned so guys let us check some of the examples now basically we can Define the container as a grid layout with the help of the display CSS property so guys let us move to the vs code over here and simply we are going to define the diff tag with the class container and inside this container we are going to have multiple grid items so guys let us say we have the diff tag with the class item over here and the first item is having the number one so guys similarly we are going to have multiple items in this case so guys as you can see we have the D text with the numbers from 1 to 9 let me just save this file now and try reloading this page on the browser browser to see how it looks like so as you can see these are nothing but the diff tags that are getting displayed from 1 to 9 and since by default the diff tags are having the display equal to block that is why all the numbers are getting displayed on the new line over here guys let us provide certain CSS properties now in order to make a grid layout out of this container over here so guys basically we have this class container in this case and then what we will say is display it is equal to grid this time so that we can make a grid layout out of it now guys apart from this we will also have certain background color so that we can identify the background of the container as well as the items over here and then we will also have certain padding that we can provide so padding is equal to 20 pixels in this case let me just save this file now and try reloading this page once again on the browser so as you can see we have the background color for the grid container over here now guys by default the grid layout is having just one column over here let us provide certain CSS properties to this diff tags as well which is present inside the container so over here we will provide container class and then followed by the space character and Then followed by the diff tag which means whatever diff tags are present inside the container will have these CSS properties that we are going to Define so guys first of all let us have certain background color over here so let's say we provide the background color of yellow in this case and also we will provide the padding of 10 pixels over here let me just save this file now and try reloading this page one again on the browser so as you can see we have the yellow background color for all the diff tags inside this container grid layout and all the diff tags currently are displayed on the new lines over here now guys let us say we want to arrange all these items into three rows and three columns just like how we have designed the layout over here so what we can do is inside the container class in this case we have the CSS property that is grid template columns and then guys inside this grid template columns CSS property we can Define how many number of columns we want inside our grid layout so guys by default it is just having one column over here and we are supposed to provide the width of all the columns which are separated by the space character so guys let's say we want the width to be set automatically by the browser so simply we can provide the auto keyword now this means only one column will be present so let me just save this file now to show how it looks like and reload this page on the browser as you can see there is no change right now that's because we are telling the grid layout to have only one column over here in order to have multiple columns we need to provide the space character and provide the second parameter as well you can provide any width in terms of pixels or any other length measurement over here we are setting it as Auto in this case so basically this is the two column grid layout since we have provided Auto keyword twice over here let me just save this file now and try reloading this page once again on the browser so now if you can see the first div element that is having one is displayed over here and then we have the second column in this case now guys in order to identify these two columns over here let us provide certain colum Gap like we have seen in our design these are nothing but the column gaps in between the columns so how we can do that so again over here we can provide the column Gap CSS property so as you can see this is the column Gap CSS property and let's say we want to provide the cap of 20 pixels over here let me just save this file now and try reloading this page once again on the browser so as you can see we have provided the column gap of 20 pixels in this case and that is helping us in order to segregate The Columns over here similarly we can divide the rows as well so in this case we can also provide the row Gap CSS property so this is the property that we can use and we can provide 20 pixels over here so let me just save this file now and try reloading this page so as you can see in between the rows we are getting the gaps over here and this is how we can create the grid layout and also provide the column Gap and the row Gap over here now guys apart from this if you want to increase the number of columns then what you have to do is simply inside the grid template columns you can provide the third parameter which means another column will be added over here and the existing data will be adjusted accordingly so let me just save this file now and try reloading this page once again on the browser so as you can see now we are having the three columns and the three rows grid layout over here as per our requirement and this is the same design that we had drawn over here on the sketch pad so guys in this way you can have the grid layout with the help of the display equal to grid and then using the grid template columns CSS property and also providing the column Gap and the row Gap over here now guys we can also provide certain other properties let's say if we want to Sender this text inside the div element that is the child element inside the container so what we can do is simply we can provide the text align it is equal to Center over here let me just reload this page so as you can see all the text are now aligned at the center of the diff tag we can also have the fourth column over here so what we will do is let's say we want the fourth column to be small let's say we want the width of the fourth column to be 20 pixels over here so simply after the space character instead of providing the auto key word will provide the 20 pixels as the width of the fourth column over here let me just save this file now and try reloading this page once again on the browser so as you can see the fourth column is now added and it is only having 20 pixels as the width of that particular column and the other columns are taking the remaining space automatically that's because we have provided the auto keyword over here let's say we want the second column to have the width of 100 pixels so simply instead of having the auto keyword we we will provide the length as 100 pixels over here let me increase the width of fourth column to 40 pixels as well since it is very small right now and now when we reload the page as you can see now this is 100 pixels wide and then this is 40 pixels wide over here and the first and the third column are automatically taking the width as per the keyword that we have provided inside the grid template columns over here so guys in this way you can Define the different CSS properties as far as grid layout is concerned so far we have seen how we can and use the grid value for the display CSS property we have also seen how we can Define the grid layout with the help of grid template columns which will Define the number of columns over here and then apart from this we have also seen the column Gap and the row Gap in this case now guys there is a shorthand method that you can use for the column Gap and the row Gap over here so instead of having 20 pixels for both the CSS properties simply you can provide the Gap CSS property over here so guys first of all you need to provide the row Gap in this case so let's say we provide 20 pixels as the row Gap and this time let us say we want to increase the column Gap so we provide 30 pixels as column Gap so guys first of all the first parameter that is taken by the Gap CSS property is the row Gap over here and the second parameter is the column Gap let me just save this file now and try reloading this page you will notice that the row Gap will be same but the column Gap will be increased now so when we reload this page as you can see this column Gap is 30 pixel wide and the row Gap is 20 pixels wide over here so guys you can provide the required gap between the items of the grid layout as per your requirements apart from this let us now understand what is the meaning of the grid lines now guys since we have provided all these elements inside the grid layout all these diff tags are called as the grid items over here and then guys on the extreme left there's a grid line in this case so if I show you back again in the sketch pad so before is column 1 there is a virtual vertical line over here which is line one in this case and then between column 1 and column 2 there is a second line over here and then we have the third line in this case and then there is a fourth line over here similarly we have the lines for the rows as well so over here we have the virtual line before Row one and then between Row one and row two we have the second line and so on there are lines in this case that we can use over here now guys how we can use these lines I I will show you with the help of the other CSS properties over here so basically we have something called as grid column start and then grid column end so guys let's say as per your requirement over here on the user interface you want the first number to occupy two columns over here so guys currently it is occupying just one column that is the first column in this case but let's say if you want to increase the width in such a way that it should occupy two columns over here that is First Column and second column so we can simply use the grid column start and grid column and CSS properties so guys let us check that as well so over here what we will do is for the first element over here we will provide the ID that is one in this case and we are going to use this ID in the style. CSS file so over here we will Define the ID that is one with the help of the hash character and then we are going to use the grid column start over here so guys basically we have the grid column start and it should start from the first line over here so guys this is the significance of understanding the grid lines basically this item should start from the grid line one over here and it should end in this case after the second column which means the grid line two is present over here between the column 1 and column 2 and the grid line three is present over here between column 2 and column 3 so we are supposed to provide the numbers from 1 up to three over here so basically the grid column start will start from the number one and the grid column end should have the value of three over here so that the first item should occupy the space between the column 1 and column two in this case so guys when we provide the end as three let me just save this file now and try reloading this page once again on the browser you will notice that now the first element is taking the span of two columns that is the First Column and the second column and the other div elements are adjusted accordingly and all of them are taking just one column so guys this is the way way you can use the grid column start and grid column and CSS property in order to make the HTML element occupy multiple number of columns over here we also have the shorthand method for this so simply we can have the grid column in this case so guys let's say we provide grid column CSS property and over here we provide the column start as one and then followed by the forward slash and then simply we can provide the grid column and parameter value that is three over here let me just save this file now and try reloading this page once again on the browser as you can see it is now taking the space of two columns that is first and second now guys let us say we want to increase the width up to three columns over here so simply we need to provide the grid line number four over here let me just save this file now and try reloading this page once again on the browser so as you can see the first element is now taking the space of three columns that is first second and third by using the grid line numbers from 1 up to four over here so so guys this is the second line and then we have the third vertical line followed by the fourth vertical line apart from this instead of providing the line numbers for the grid column CSS property you can also provide the span keyword and then we can number the number of columns to be used in order to make the div element occupy those many number of columns so guys when we provide this pen so let's say we want this particular item to occupy only two columns over here so simply we provide span keyword followed by two columns in this case case let me just save this file now and try reloading this page once again on the browser so as you can see the first element is now occupying the space of two columns over here so guys similarly you can use the grid row start and grid row end as well and apart from that you can also use the grid row CSS property as the shorthand method so guys let us check that as well let's say if you want the First Column to have the two number of rows over here which means it will occupy two rows in this case so what we can do is simply we can provide the grid row over here so this is the CSS property that we are providing and then it is going from the first grid line up to Second and then the third grid line in this case so guys simply we can provide one followed by forward slash and then three over here so that it takes two number of rows as far as the first element is concerned let me just save this file now and try reloading this page once again on the browser as you can see now it is taking two number of rows as far as as the vertical spacing is concerned we can also provide the span keyword over here but this time we have to provide the number two instead of three since we are providing the span keyword let me just save this file now and try reloading this page as you can see it is taking two rows over here if you want it to occupy three rows so simply we can provide span three in this case let me just reload this page as you can see now it is taking the three rows as far as the vertical spacing is concerned so guys in this way you can easily use the the grid column or the grid row CSS properties based on your project requirement now guys apart from this we also have some other properties that is justify content over here so similar to how we have seen in the flex layout model the justify content will help us in order to align the items as far as horizontal alignment is concerned so guys let us check justify content with the help of example over here so inside the container class what we will do is let's say we have the justify content CSS property over here and we want all the elements to be present at the center of the container so simply we can provide the center value over here let me just save this file now and try reloading this page once again on the browser as you can see all the elements are now at the center of the container which is having the background color that is aqua so guys in this way you can simply use the justify content as well if you want a certain space to be in between all the elements as far as horizontal alignment is concerned you can provide the space between value as well so let me just save this file now and try reloading this page so as you can see in between all the elements there are equal spaces and then we have other values as well we can also provide space evenly over here so as you can see there's even spaces on the left and the right of all the div elements as far as horizontal spacing is concerned apart from this we also have the vertical spacing that you can use based on the Align content CSS property so let us check that as well so when we provide align content CSS property let's say we want all the elements to be at the center as far as vertical alignment is concerned so we provide the center value let me just reload this page once again on the browser so all the elements are currently at the center as far as vertical alignment is concerned we can provide some other values as well so let's say we provide the start value and reload this page so as you can see there is no change right now so what we will do is let us increase the height of this div container over here so simply we will provide the height value and then let's say we provide 300 pixels as the value of the container height so as you can see the height has been increased now and since we have provided align content at the start all the diff tags are at the start as far as the vertical alignment is concerned which means they are at the top of the container let's say we want them to be at the center of the container so simply we can provide the center value let me just reload this page as you can see now the div elements are present at the center of this div container as far as the vertical alignment is concerned and let us get them all at the end of the container which means at the bottom of the container so when we reload this page as you can see all of them are at the bottom which means they are aligned at the bottom of this particular container tag so guys in this way you can simply use the justify content and the Align content over here in order to align the items inside the grid layout now guys apart from this we have something called as grid area as well which is a shorthand method in order to use the grid row and the grid column over here so guys let us check the example of this as well so what we will do is simply I'm going to remove the grid row and the grid column that we had used previously for the first diff tag over here let me just reload this page once again on the browser also we will remove the height of the container over here so as you can see this is the container which is having the diff text inside the grid layout and then guys apart from this we will also make the width of all the columns as Auto in this case so let me just remove this 100 pixels and make it as Auto over here and also the 40 pixels as Auto in this case so that all the columns are now having the equal width over here now guys apart from this we will also remove the justify and the Align content in this case so that all the diff tags take up the available space on the left and the right as well so as you can see this is a simple grid layout inside the container now guys by using the grid area we can Define the grid row and the grid column start and the end CSS property so guys let us check that as well so what we will do is for the first element let us say we want this element to have two number of rows and two number of columns so basically this much area must be occupied by the first row so simply we can provide the grid area shorthand CSS property over here and the first value that is expected inside the grid area is the grid start row so in this case we have the start row as one and then followed by the forward slash and then it is expecting the grid column start which is again the First Column over here so again we provide one over here apart from this we have the slash character and then it is expecting the grid row end which means it should end at the third line over here as far as the row line is concerned so this is the first line second line and then this is the third line over here so simply we can provide three in this case followed by the sled and then we can provide the column line as well which is in this case we want the first element to be over here so basically this is first second and the third line as far as the column line is concerned so we have the grid column end as well let me just save this file now and try reloading this page once again on the browser so as you can see the first element is now taking the space of two rows and two columns respectively so guys in this way you can easily use the grid area as well now guys apart from this this grid area will be useful in order to order the elements also so basically let's say we want this fifth column to be present at this particular position where the element two is present so what we can do is first of all for the element five we are going to define the ID that is five over here so simply we have defined the ID of five and then what we will do is simply we will provide hash character and then the ID that is five over here and we are supposed to Define the grid area in this case so that we can order the elements inside the grid layout so guys it is not necessary that whatever sequence that you have provided inside the HTML elements with that same sequence all the items must be displayed but you can order them based on your project requirements over here so we want this particular Fifth Element to be present at this second position with the help of the CSS property that is grid area in this case so guys what we have to do is we need to identify the row line and the column line for this particular position so the row line is starting from the one and it is ending at two over here so let us Define that first of all so we start from the row line that is one over here and then we have to end it at second row line in this case and then guys we also have to provide the column start and the column end so this is column line one and then followed by column line two over here and then we have three in this case so we should start from the column line three and then end to to the column line four over here so when we say three that is the column start and Then followed by four as the fourth parameter over here so guys this is the grid area that we have defined so using this we can get the Fifth Element at this particular position since we have provided the grid area CSS property so let me just save this file now and try reloading this page once again on the browser as you can see this Fifth Element is now getting displayed at this position and then all the elements have adjusted accordingly based on the grid layout so guys in this way you can easily use the grid area CSS property as well so that you can order the HTML elements based on your project requirements inside the grid layout so Guys these are some of the CSS properties that you can use as far as the grid layout and CSS is concerned comment in the comment section below whether you have learned something out of this video please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we going to talk about is an exercise on grid layout in CSS in order to make the sidebar and the content so stay tuned