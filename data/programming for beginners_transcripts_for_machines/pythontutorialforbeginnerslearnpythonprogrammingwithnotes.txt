in the next few hours we are going to learn a lot about the Python programming language with the help of the examples and python programs as well while you're watching this video please make sure that you pause this video and practice on your own so that on different inputs you get different output and that is how you are going to learn about the Python programming language you can also watch my other Python tutorial and Python program videos which are available for free on YouTube the link to those playlist I have given in the description section below and we are going to cover all the basics about the Python programming language so let's get started Python tutorial for beginners so if you're completely new to programming languages and want to start with the Python programming language then this video series is for you and it doesn't matter even if you have learned the other programming languages such as Java C C++ and if you're going to learn the Python language for the first time you can watch these video so that we can get started from the completely beginner level and we reach up to the intermediate and expert level as we go through the different concepts of the Python programming language so guys first of all we are going to check the environment setup using the Python language and we are going to use the VSS code as the editor now over here vs stands for visual studio and we are going to use the visual studio code editor in order to write our python programs apart from this vs code setup we are also going to see how do we write the first python code and execute it so guys basically I have written down the steps to install the vs code editor and python interpreter over here so first of all we are going to install VSS code using this link that I have already provided in the description section so when you hit this URL in the browser this is the page that is going to open from where you can easily download the visual studio code it depends on your operating system which installer you want to download you can also download for Windows Mac OS and Linux systems over here so it depends on your operating system once you have downloaded this and installed the vs code on your machine machine the next step is to install python extension in VSS code so guys once you have installed the visual studio code this is the get started page that you will see in the visual studio code ID so over here first of all you are supposed to install the python extension so on the left hand side as you can see there is an extensions button over here on which you can click and then this particular section will open so over here in the search bar you are supposed to type python so once you type python there will be list of extensions that will be available for you so guys this is the extension that you have to install over here so as you can see python intellisense file lens and this is a description that you can see on the right hand side so since I have already installed this python extension on this Visual Studio code I am getting this uninstall button but you will be getting the install button over here if you have not already installed this particular extension guys this python extension helps us in order to write the python programs very efficiently it allows us to have the code completion feature along with this we can also run the python code and have the output from within the visual studio code itself so guys it is very important extension if you are going to Learn Python and want to write the python programs now guys coming to the next step we have to install the python interpretor using this link that I have already provided in the description so once you open this URL in the browser over here this is the page that will open for you and this is the official website of the Python programming language from where you can download the latest version for Windows over here since my machine is Windows I will be downloading this Python and the latest version is 3.11.1 it might so happen that you are watching this video in the future for which the latest version might be something else so you can download the latest version of the Python interpretor from here apart from this you can also get the links to the installer if you're using some other operating system over here so guys once you have installed python on your machine you can quickly open command prompt so over here in the command prompt you can simply type py followed by double hyphen characters and then you provide version and then when you press enter as you can see python 3.11.1 this is the version of python that is already installed on my machine you might have some separate version but the command will be same in order to check whether the python is successfully installed on your machine now guys after successful installation what you have to do is the last step is to connect this python interpreter in vs code so we select the python interpreter in VSS code so over here you have to come on the settings on the bottom left and then over here you can see the command pallet you can also have the shortcut key as Control Plus shift plus P if you're using the keyboard keys and then when you click on this on the search bar you have to type Python and then colon and then we have select interpreter so as you can see this is the option and when you click on this as you can see this python 3.1.1 is getting displayed over over here which you are supposed to select in order to select the python interpretor now guys what we are doing over here is we are connecting this python interpretor with this Visual Studio code so that whenever we write the python code our program gets executed successfully on the vs code itself now guys it might so happen that you don't get this option that's because you have installed python after installing vs code so you can simply restart this vs code in order to get this option over here and once you select thist option you are ready in order to write the python programs in the vs code IDE so guys just by using these four steps of installation you can quickly get started in order to write the python programs in the vs code and all the steps have been documented in this official documentation of the visual Studio website so you can check the content of this documentation as well the link I have given in the description already now guys we are going to write the first code in Python so what we are going to do is we are just going to close these tabs over over here and we are going to open this Explorer over here it is saying no folder opened initially so what you can do is you can create the folder initially in order to organize all your python programs so basically I'm going to just create a new folder over here and I'm going to say python so this is the name of the folder and then I'll select this folder over here so as you can see a new folder that is python has been created now you can write python programs inside this python folder you can have any other folder in any of the directories it depends on you where you want to store the python codes that you will be writing from now on so what we will be doing is as you can see this is the icon it says new file so we will be clicking on this new file and let's say I provide the name of the Python program as python followed by underscore and then we have code followed by dot we have py so guys this is very important that after typing the name of the file we have to append it with py this is the extension of the pyth Python program and this extension will help the vs code in order to interpret that this is the python code and it should execute this code using the python interpretor so guys I'm going to press enter over here and once we press enter this python code. py it is going to open automatically over here now simply we can print some content in our Python program as the first code in Python so over here we have something called as print statement as you can see once we type print it is auto suggesting us what are the different keywords that we can use so so when we press enter over here this print gets selected automatically now inside the open and close parenthesis what we are supposed to do is we can type one particular statement that is the name of the YouTube channel that is programming for beginners which you should definitely subscribe so this is a string that is a statement that we have given over here and this is the very simple Python program that we can write and what this will do is it will simply print this content that is programming for beginners on the console so guys over here you have to come on file and then you can click on save or else you can use the control+ S on the keyboard in order to save the file which I'm going to do in the upcoming videos as well so first of all you save this file and simply you have to come on this top right corner over here you can see this run python file button over here so when you click on this run python file the terminal will open and it will execute this file that is python code. py that we have simply created over here and as you can see programming for beginners string is getting printed so guys in this way we have written the very first code in the python and using the print statement we have printed the programming for beginners we can print any other statement over here as well so let's say I'll provide this as a statement and then when we save this file and try running this code once again as you can see this is a statement is getting printed over here on the terminal so guys this is the way we can easily set up our python interpreter along with the editor that is Visual Studio code you you can use any other editor that you want such as you can simply use the notepad file as well but you will not get such strong features which are provided by the visual studio code in the notepad file apart from that you can also use notepad++ or we have a very popular ID that is py charm and apart from that we have many other editors that you can use but vs code is one of the lightweight editors that you can use when you are writing the python programs python keywords and identifiers so guys keywords are nothing but these are the reserved words in Python so basically these are the words that we cannot use as the identifiers now what are identifiers these are nothing but these are the names that are given to variables functions classes and many other objects that we are going to see in the upcoming videos as well so guys for examples as you can see over here the examples for keywords are true and then we have false if condition else condition LF so Guys these are certain keywords that you must be aware if you have already learned some other programming language and if not then you don't have to worry but we are going to learn about these keywords in the upcoming videos as well you just need to know that these are certain keywords which cannot be used anywhere else apart from their own functionalities so guys over here in order to make it more easy for you I have the list of all the python keywords over here as you can see false none true and many other keywords are present that have specific functionality as far as Python programming languages is concerned and you cannot use them apart from their own functionality where they are supposed to be used now apart from this what are the examples of the identifiers as you can see message this is a particular name that we have given to a string another example is language which can Define another language such as a Korean language or the Hindi language English language or Spanish or French language or any other language which can be defined using this variable we also have other identifier such as number count so so this is nothing but these are certain names that are given to a particular variable so we should not mix up between the keywords and identifiers whenever we are writing the python programs so guys let us check this with the help of some examples over here so as you can see in this ID we have the output of the previous example that we have executed so simply we can type CLS that is the command in order to clear the content of the terminal over here when we press enter the entire terminal is cleared and then what we will do is as you can see previously we had written a print statement and inside this we had given the content that this is a statement what we can do is this value can be assigned to another variable which is called as the identifier so I will just remove this line over here and before this what I will do is let's say I provide Str Str as the identifier name followed by equal to and then in between the double codes I'm supposed to provide the string that is this is a statement that we had printed over here using the print statement and then what we we can do is in this print inside the open and close parenthesis over here we can simply provide this s Str which is the identifier so guys what exactly is happening over here is we have provided the content that we want to print and we have stored that content in a particular identifier so this is called a identifier over here that is St Str which is nothing but a name over here which is given to this particular value and we can simply provide this name that is Str Str over here and when we save this file and try running this code now so as you can see this is a statement is getting printed so it doesn't matter what content is provided over here we can provide some other statement as well like programming for beginners which is the name of the YouTube channel which you should definitely subscribe if you have not subscribed it already so when we save this file and try running this code as you can see programming for beginners is getting printed now so it depends on what value is being stored in this particular variable which is also called as identifier we can give any name to this ident Iden ify let's say instead of St Str we can simply give statement as the name of this variable but we have to change it in the print statement as well so I'll just copy the statement variable and paste this over here so guys this is nothing but identifier it is also called as a variable since we are storing some particular value inside this variable I click on Save and when I run this code once again again it is printing the same content that is programming for beginners so guys this is one example of identifier and in similar way we can have any other name to the identifier and along with that we are supposed to provide the value now apart from that can we use the keywords as the variable names so let us check this so let's say if I provide if keyword over here so instead of this statement over here I provide if and then let's say if I print this if so what will happen let me just save this file and try running this code so as you can see it is providing the syntax error that is invalid syntax and we can see if equal to so over here it is pointing out so as I've already told you we cannot use keywords as the identifier since they have their own meaning as far as python programs are concerned so we need to avoid the keywords being used as the identifiers and we should give some other names apart from all these keywords that are being displayed over here which we are going to learn in the upcoming videos as well guys it will only come with practice that you will come to know that which are the python keywords and which you are not supposed to use as the identifiers so don't need to worry you just stick with me till the end of this video series and we are going to learn a lot about the python programs now there are certain rules while naming the identifiers so as you can see identifiers cannot be a keyword which we have just proved by providing the if keyword over here and then apart from that identifiers are case sensitive so Guys these are two different identifiers let's say I provide Str Str over here which is one identifier we can simply print this using the print statement over here and then let's say we have another it identifier as St Str so over here we can have a different statement so let's say I simply provide the string over here so what will happen is if I save this file entery running this code now it is saying programming for beginners but Str Str and Str Str both the identifiers are same the only difference is these characters are uppercase characters whereas this s Str has lowercase characters but when we provide this Str Str over here in the print statement let me just save this file enter I running this code as you can see this time string is getting printed that's because we have saved the string in this particular identify that is capital Str Str so guys this proves that identifiers are case sensitive and you have to take caution while you are naming your identifiers over here apart from that it can have a sequence of letters and digits as well however it must begin with a letter or a underscore the first letter of an identifier cannot be a digit so basically we are supposed to start with the letter or it can also be a underscore over here and then white spaces are not allowed and apart from that we cannot use special symbols like exclamation mark at the rate hashtag and dollar sign and so on so there are certain special characters which cannot be used while you're naming your identifiers so python variables constants and literals so guys what are python variables so in programming a variable is a container that is a storage area to hold data so as we have seen previously a number is a variable and we can provide the value that is 10 so previously we had seen a string variable in which we had stored some statement whereas we can also have the integer values being stored in the variables so over here if we move to our Visual Studio code so we can simply type number that is the variable name which can be assigned a value so equal to 10 so this is nothing but an integer value being assigned to a variable which is named as a number we can also have the string so let's say programming for beginners so we have programming for beginers s see string over here which can be assigned to a variable and the variable name can be given as Str Str or it can be also given as message or any other name that you want to give while writing your Python program so Guys these are nothing but variables which can be used later on in the program basically their functionality is to store some values so in this case number is storing the value that is 10 and this Str Str variable is storing the value that is programming for beginner string now guys it is very important to note that python is a type in referred language so you don't have to explicitly Define the variable type it automatically knows that 10 is an integer and declares the number variable as the integer so guys basically it depends on the value that we are providing so just because you are typing number as the name of the variable it doesn't mean that it has to be necessarily having the integer value you can also have the string value as well so when I copy this and paste this over here the number will have programming for beginners but guys this doesn't make any sense over here but programmatically this is also possible that's because we don't have to provide any data type over here in the python programs so whatever the value is data type will be given to that particular variable based on the value that is being provided to the variable this is very important Point as far as python programs are concerned in other programming languages such as Java or C++ we have a very strict data type that needs to be provided before we provide our variable names over here and guys this is also one of the advantages of using the Python program it allows us to write the code quickly compared to other programming languages now guys moving forward what is the python constant so basically a constant is a special type of variable whose value cannot be changed so for example as you can see the pi value is 3.14 so over here guys before defining the constant variable what we can do is if we simply print this variable over here that is print followed by number that is being given inside the parenthesis I'll save this file and try running this code now so as you can see programming for beginners is getting printed that's because the value is given as programming for beginners let's say I provide the integer that is 20 over here and then when I save this file enter I running this code now the number should have the value that is 20 and that is what should be printed so as you can see when we run this code 20 is getting printed over here so whatever value is being stored and whichever variable we want to print the content of that variable will be printed now coming to the constants that we have just defined so in Python let's say if you provide pi equal to 3.14 over here so instead of this number we provide Pi it is equal to 3.14 I'll just remove this line of code and then simply I'll provide pi over here so what will happen is it will display this value that is 3.14 I'll save this file and try running this code now as you can see 3.14 is getting printed but guys what is the use of this constant basically we are saying that Pi is constant over here that's because us using this nomenclature that is the constant variable must have all the characters as the upper case so this can Define that it is a constant over here but is it actually a constant no in this case since again we can use pi over here and we can provide some other values as well such as 5.15 over here so when I save this file Ander try running this code now it is saying now that Pi is having 5.15 which is the latest value so guys there is no concept of python constants over here right now but what we can do is we can save this value in some other file so let's say I create another file over here and name it as constant followed by the extension that is py over here when we press enter we can simply provide this statement that is pi equal to 3.14 I just copy this and paste this over here so we have provided pi equal to 3.14 now what we can do is coming to this python code what we can do is we can use the import keyword now guys this import keyword is used in order to import some other python files into this file so that we can use the content of that other python files over here so we are going to import this constant. py in our python code program so import we can say constant over here so when we type constant as you can see constant is getting Auto suggested over here that's the very important feature of the intellisense which is included in the python extension that we had installed so we provide constant over here and what we have to do is while printing we can simply provide this constant over here that is constant followed by Dot and then as you can see Pi is getting Auto suggested that's because we had defined pi over here so we simply have to provide Pi so what will happen is it will print the value of the pi so when we save this file and try running this code now once again it says module constant has no attribute Pi so guys that may be because we have not saved this file that is constant let me come over here and save this file over here once again and I'll go to this python code and then run this file once again so as you can see now 3.14 is getting displayed so guys if you want to use some constant values you can have a separate file that is constant. py in which you can store all the constant variables let's say we have another variable over here that is St Str and then we provide string s the value so this Str Str can also be treated as a constant for which the values never change while we are executing the code I'll save this file over here and let's say if I want to print the string as well so I'll copy this line of code paste this over here and instead of Pi we will provide Str Str now so we provide constant. pi and constant. St strr also so when we save this file and try running this code now we get both the things that is 3.14 we get the string value as well so if you want to use the constants in Python you can have a separate file all of the constants can be defined over there and then you can import that constant file and use the various variables that you have defined as constant in order to write your python programs so guys moving forward over here what are python literals literals are representations of fixed values in a program they can be numbers characters or strings etc for example hello world is one of the literal then 12 is another literal 23.0 and then C character true false Etc so guys literals are nothing but these values so basically this value it is a literal this particular name that we have given is the identifier or also called as variable but in this case it is a constant now this variable becomes constant when the value cannot be changed but we can change this anytime in this code but not over here an identifier can be a constant when we don't want to change its value anytime in our Python program and again the string value inside the double codes it is a literal python data types in which numeric string list tle set are included so Guys these are the different data types that we can see in this this video and the upcoming videos as well so basically in computer programming data types specify the type of data that can be stored inside a variable so for example number it is equal to 24 so 24 value belongs to the numeric data type and this is the integer value inside the numeric data type we have many other data types such as integer value then we have float value as well in which there is a decimal point we have a complex value as well in which as you can see this expression that is 1 + 2J this is a complex expression so all these are having numeric data types over here so number over here is a numeric data type or the integer as you can see 24 is the value if it was 24.5 then we would say that number variable is of float data type so guys let us check this with the help of example what we can do is we can simply copy these lines of code over here I'll copy this and we'll paste this over here now what we will do is this constant. py that we had created previously I'll just remove from our python folder over here since it is no longer needed and we will simply keep python code. py where we are going to write all the programs over here so guys over here I'll simply replace the content of this file by this content I'll save this file and over here in the terminal I'll simply clear the screen so as you can see num one it is defined as five which is the integer that is being assigned to num one so the data type over here will be the integer data type and using this print statement what we are doing is we are using using this num one and then followed by comma is of type which means num one will be printed that is five will be printed and then we will have is of type string being printed and then type this is another method that is being used in order to get the type of a variable so as you can see this is the syntax that first we provide type and Then followed by open and close parenthesis and over here inside this we have num one that is the variable name guys similarly we have provided num 2 as 2.0 and the same thing we are doing that is we are finding the type over here and then in the num three as well we are getting the type of this num three variable let me just save this file enter running this code now so as you can see five is of type class in so this is of the integer data type 2.0 since it is having the decimal over here it is saying it is of type float over here and 1 + 2 J it is of type complex over here so these are all numeric data types and inside the numeric data type y these are described as integer float and complex values now apart from this guys we have other data types as well such as string that we had seen previously we have list as well tle and set so guys let us check this one at a time so over here what we will do is simply I'll provide Str Str and then I provide the Str Str value as programming for beginners so what we will do over here is we want to find the type of this Str Str variable so what we can do is we can simp simply have the print statement followed by open and close parenthesis and we can simply have the type function so guys as you can see type is being Auto suggested over here we will select this and inside the open and close parenthesis we will use this variable so I'll just copy this and paste this over here that is Str Str and then when we save this file and try running this code now as you can see class that is St Str is getting printed over here we can also have some string value over here that is first of all we are going to type St Str that is the value of this s Str and Then followed by comma and then we can simply have is of type inside the single Cotes over here guys it is very important that whenever you want to type certain characters we should either have it inside the single quotes or double codes as we have seen over here and then when we save this file and running this code it will show us the data type of this string with the most sensible statement so as you can see programming for beginners this is the string value that we have given and then is of type now this is of type we have provided over here and then this type function that is Str Str it is returning the type of this Str Str variable which is class Str Str over here so this is of string data type now guys this Str Str over here it stands for string and not the name of this variable if I provide here something else then it will be more sensible so let's say if I provide statement over here as the name I'll copy this and paste this over here and when we run this code once again so as you can see it says class St Str is of type class St Str so since we have not replaced this St Str with the statement that is why we are not getting it properly I'll run this code once again now so as you can see programming for beginners which is the value of this statement variable over here and then is of type and then we have class Str Str over here now apart from this we have other data types as well such as list which can be defined as the square brackets so what we have to do is let's say I provide list one as the name of the variable and then equal to now guys list is nothing but it is a data type that have collection of elements so over here let's say we have collection of strings so let's say we have collection of fruits over here so the first fruit is Apple followed by comma and then again we have double quotes and then we have mango so all the elements are being separated using the comma over here as you can see and then let's say we have banana over here as the third fruit so what we can do is we can simply have print statement over here and then we can have type of this list one so I'll say list one over here when we save this file and TR running this code now as you can see class list is getting printed so this is of data type that is list over here similarly we have tle and set as well which we are going to see in the upcoming videos what are the different contents of these data types and how do we use them and when do we use them so guys for now you just need to remember that whatever value that we provide to a particular variable automatically that data type will will be assigned to that particular variable python type conversion basically we are going to learn about converting data types of variables so type conversion is the process of converting data of one type to another so for example converting string data to integer so guys it can so happen that you have got a number in the form of a string and before you add it to another number you need to convert that string data type to the integer data type so how do we do that by using the python type conversion so basically there are two types of type conversion in the python the implicit conversion which is automatically done so this is automatic type conversion so basically when this automatic type conversion happens is whenever you are converting from a data type that is of small size to the larger size let's say integer data type it takes four bbes as the memory but the float it takes 8 bytes as the memory so what will happen is over here whenever you are are going to add integer along with the float the result will be stored in the float itself that's because you are going from the integer that is having the lower size to the float data type which is having the larger size over here so guys in that case automatic type conversion happens in order to avoid the data loss and there is another type of conversion that is explicit conversion in which you have to convert the data types manually so this is also called manual type conversion so guys over here what you have to do is you have to type cast from one data type to another so we will check that with the help of examples as well so first of all we will check the implicit conversion so as you can see this is the example that is example one we have the integer number is 123 but the float number is 1.23 so this float number is having decimal but this integer number is not having decimal and then the new number which is going to add both the numbers that is integer number and the float number but guys this is the integer and this is the float so what should be the result let us check this with the help of our python code execution so I'll just copy these lines of code over here and then I'll paste this over here guys what I will do is I'll simply hide this section which is the Explorer section because we are going to write all the programs in the same file over here so when we save this file and then when we try running this code nothing will happen guys that's because what we have done is we have initialized the integer number we have initialized the float number as well and what we are doing is we are just adding both the numbers and we are assigning the result in the new number but we are not printing anything so we are supposed to print something over here what we will do is we will print and first of all what do we print let us say we want to find the type of this variable that is new number so we can simply provide type function and then inside this we will provide the new number over here that is the name of the variable and then what we will be doing is we will print the value of this new number so we will simply have another print statement and we will say new number over here so first of all we will get the type so that we will come to know what data type is being assigned to this new number that's because we are adding an integer number and the float number together so let me just save this file and try running this code now so as you can see class float so this proves that float is being stored over here in the new number that's because when we add an integer and the float number the highest data type that is the float number will be assigned to this result number that is the new number over here so that is why type of new number is being displayed as flow and what will be the result of this addition 123 + 1.23 it is giving us the result as 12423 which is being displayed by using this line of code over here wherein we are printing this new number variable the value of this new number will be displayed now guys coming to next example as you can see example two we have the number string but this is of the string data type why so because we have provided this number inside the single codes over here here as I have told you whenever we are providing the single quote or the double quote the value inside those quotes are treated as the string and then we have another variable that is num integer and this is the simple number so this number is going to be treated as an integer but what happens when we add both these numbers over here that is new integer since this is the integer type so nothing will happen over here but num string so basically this is of the string data type and we cannot add a string to the integer we are using the plus operator in order to add the two numbers over here since num integer is a number over here so guys let us check what happens I'll just copy these lines of code and paste this over here and what we will do is we will simply print the value of this Num Sum so over here we have num underscore sum over here that is the result variable let me just save this file and try running this code now so as you can see it is giving us some error Num Sum It is equal to so this expression is being printed over here and we are getting the message as type error unsupported operand type for plus that is integer and string so what it is saying is this plus operator it is having unsupported operants now what are the unsupported operants the first operant is integer which it is showing over here as int and the second one is Str Str which is string over here so guys what we are supposed to do is we are supposed to convert the string to the integer this num integer is already of the integer data type but this num string is not of the integer data type and that is why we are getting this error so guys how do we convert this num string to the integer data type we simply have to provide this variable that is num string inside the open and close parenthesis and before this parenthesis we simply have to provide the data type to which we need to convert this num string to that is the integer so we simply provide int that is the integer data type so as you can see this is the format we have first enclosed this variable that is num string inside the open and close par parenthesis and then we have provide int before this open parenthesis over here and this is how this num string will be converted to the integer data type so the value will be 12 over here and this num integer is having the value as 23 which is again the integer and the sum will be stored in this num suum so let me just save this file ENT running this code now so as you can see 35 is being displayed over here because 23 + 12 is 35 and that is what we are getting over here so guys this is the manual type conversion so whenever we are coming from a data type that is having the high memory to a low memory such as the string to the integer we are supposed to do a manual type conversion and that is what we have done over here so Guys these were the two examples as far as automatic and manual type conversions are concerned which are also called implicit and explicit conversion wherever possible python will automatically convert the data types of the variables but wherever it is not possible it will give you the warning at least or else it will give you the error while you are running your Python program so basic input and output in Python Programming so guys in this tutorial we will learn simple ways to display output to the users and take input from users in Python with the help of examples now guys as we have seen previously in Python we can simply use the print function to print the output so let us check this with the help of example over here so I simply want to print a statement so let's say I want to print programming for beginners that is the name of this YouTube channel Channel which you should definitely subscribe if you have not subscribed it yet so once we provide the string inside the double codes we can simply save this file and try running this code now so on the terminal we will be able to see this string getting printed that is programming for beginners I have missed out an O character over here so this is the correct string so programming for beginners is the string that we want to print and that is what we have got over here in the terminal now guys even with this print function over here this is a function and it takes certain parameter so parameters are nothing but certain values that you can provide to the function so as you can see the actual syntax of the print function accepts five parameters so basically we have only provided one parameter over here this can be treated as a parameter that is the value that we want to print now apart from this we also have other parameters as well so object is the parameter which is nothing but the value to be printed apart from that we have separator then we have end parameter file and then flush parameter so these are the five parameters and these are the descriptions of each and every parameter so over here the separator which is an optional parameter since we have not provided any separator over here it allows us to separate multiple objects inside print so let's say after this string I want to provide another number over here so let's say 1 2 3 4 is the number that I want to provide now I want these objects that is one is programming for beginners which is a string and another object that is a number to be separated using commas so what we we will do is after providing comma we will use the SCP that is another parameter as you can see vs code is providing us the auto completion feature over here so we just need to select that and then we need to provide single codes and inside this we provide comma followed by the space character so guys what will happen is all the objects will be separated by using this comma and the space character over here it depends on your requirement how many objects you want to provide inside this print statement so let me just save this file try running this code now so as you can see programming for beginners and then we have this comma followed by the space character and then we have this 1 2 3 4 object being printed over here we can have another object so let's say I provide another string that is another statement over here so let me just save this file Ander try running this code now so we are getting an error invalid syntax perhaps you forgot a comma so basically after providing each and every object we have to separate it using the comma over here and then let me just save this file ENT I running this code now so as you can see programming for beginners followed by comma and then we have space characters and then we have 1 2 3 4 again we have comma and then space character and then we have another statement so guys in this way we can use the separator parameter as well in order to separate the different objects inside the print function now going to next parameter which is end over here which is again optional by default it is the Slash and character in which case the control flow goes to the next line Whenever there is another object that is getting printed over here so as you can see it allows us to add specific values like new line or tab character so guys let's say we have this print function over here I'll just remove this part of the line over here and let's say I have another print function in which case I am providing another statement so let's say we have another statement over here so guys what will happen is by default this end parameter is having the Slash and character which means the control flow should go to the new line Whenever there is a next print state statement that is encountered so let me just save this file and try running this code now so as you can see programming for beginner string is getting printed in first line and on the second line another statement is getting printed now what if we want both these statements to be printed on the same line but they are present in the different print function so what we will have to do is in the first print function I will provide a comma over here and then we have the end parameter so as you can see this end parameter we have to select and then inside the double course I'll simply provide the full stop followed by the space character so guys what is happening over here is after the string is getting printed at the end of the line we are providing this full stop and then followed by the space character and then whenever there is a next string that is encountered by the control flow it will get printed on the same line so let me just save this file and try running this code now so as you can see programming for beginners and then we have a full stop and then we have the space character as well and then we have another statement that is getting printed so guys we can also use this end parameter if we want multiple print functions to be used but all the objects need to be printed on the same line the other two parameters are file which is again optional where the values are printed so basically by default the values are printed on the screen and that is why its default value is system. STD out which means it should print on the screen you can also provide some file path over here so that the content can be written in the file apart from that we also have the flush which is again an optional parameter it is a Boolean specifying if the output is flushed or buffered so by default it is having the false value so Guys these two parameters you can practice on your own as a homework for you apart from that guys it is very important that how do you take input from the user in Python Programming so basically while programming we might want to take the input from the user in Python we can use the input function so as you can see we have a variable over here or we can say ident identifier it is equal to we have used the input function so guys this input function it will take a parameter which will be kind of a label which will be printed on the screen for the user as a instruction so we are asking the user to enter a number and the number that will be entered by the user will be stored in this numb variable over here so guys let us check this with the help of example now I'll just remove these lines of code so what we have to do is let's say we provide the number variable it is equal to we have to use the input function as you can see this is the function that is being suggested by the VSS code over here and then using the open and close parenthesis inside this we have to provide a string inside the double codes so we can simply provide enter a number now this is a instruction to the user to enter the number now guys what we can do is we can print this number now we can easily print this by using a string so let's say we provide the string over here that is entered number is and Then followed by by colon and then after this object we have to provide a comma and then we can provide the number variable to be printed so we have provided the number variable over here let me just save this file andent try running this code now so as you can see it is asking the user over here to enter a number so what I will provide is simply I will provide 10 as the number and then when I press enter as you can see entered number is 10 so this string is getting printed along with the number that is being entered by the user now guys it is very important important to note that whenever we are using this input function the input that is taken by the user will be of the type string over here so if we print the type of this number variable over here let me just do that so we simply provide data type of number colon and then what we have to do is after comma we have to use the type function and inside this function we have to provide the number variable let me just save this file enter I running this code now enter a number so let's say I provide 10 as the number as you can see enter number is 10 and after this data type of number it is class string so this is of string data type so whatever input is being taken from the user it will be stored as a string so what we have to do is we have to convert it into a number now since this is a string we cannot add another number to this particular number so let's say if we try to add some another number over here so we simply do number + 5 over here let me just save this file enter I running this code now so when we provide 10 as the number when I press enter as you can see it says can only concatenate string not end that's because we are trying to concatenate a string with a number over here that is the integer so what we have to do is we have to convert this input into an integer so we can simply provide int over here and then the entire input function needs to be inclosed within the open and close parenthesis so guys this we had seen previously as well this is the explicit type type conversion over here which is the manual type conversion in which we are converting the string data type to the integer data type and now we will have the integer over here which can simply be added with another integer so let me just save this file and try running this code now so as you can see enter a number this time let's say I provide 15 as the number and then when I press enter as you can see entered number is so what is happening is this number that is 15 was taken and then five was added to this number and that is why 15 + 5 is 20 and this number is getting printed over here and you can see this data type of number now it is of the type integer that's because we have used the type conversion over here so guys this is the way you can take input from the user make sure that whenever you're using the input function the data that is being entered by the user is of the type string and you need to convert it into the appropriate data type before you can use the other operators arithmetic operators in Python Programming so guys arithmetic operators I used to perform mathematical operations like addition subtraction multiplication and many other operations which can be done using the integers or the numbers in Python so guys for example let's say we provide the print function over here and inside this function we provide 5 + 6 as the parameter so what will happen is the plus operator is being used over here in order to add these two numbers that is five and six and the result that is 11 will be printed so let us quickly check this with the help of example over here so what we will do is we will use the print function and inside this parenthesis we will simply provide 5 + 6 over here and when we just save this file and try running this code now so as you can see 11 is getting printed so guys what we have done over here is we have simply used the plus operator in order to add two numbers we can also do this by using the variables as well so let's say we provide numb one it is equal to 10 and let's say we provide num two it is equal to 20 and then let's say I I provide sum it is equal to num 1 plus num 2 over here so guys basically once again we have used this plus operator in order to add two numbers that is num one and num two for which the values are 10 and 20 respectively and the result will be stored in this sum and when we provide this sum inside the print statement we will get that result so let me just save this file and try running this code now so as you can see 30 is getting printed that is a sum of 10 + 20 over here so guys this is one of the arithmetic operator that is plus is being used in order to add the two numbers apart from this addition we have other operators as well as you can see subtraction we have in which the two numbers can be subtracted so over here 4 2 it is equal to 2 so over here minus operator is being used we have multiplication as well in which multiply operator is used in order to multiply two numbers we have division as well in order to divide the two numbers so as you can see 4 divided by 2 it is equal to 2 so we are getting the quotient over here and we have the modular operator as well which can be used by using this person operator so guys what happens is 5 person 2 what this will do is it will divide the number on the left hand side that is five by the number on right hand side that is 2 so 5 / 2 it will give us the quotient as two but the remainder will be one and we will be getting the remainder of this operation that is one over here and similarly we have power operator as well so as we can see four and then 2 * multiplication symbol over here which is the power symbol and then two which means 4 * 4 will be done which is equal to 16 so basically this is nothing but the square of the number in this case it is the square of this number that is four so guys let us check all these operators with the help of examples over here so what we will do is first of all we will print and add two numbers so let's say we provide 10 as first number and 20 as the second number so this is the addition of two numbers let's say we want want to subtract two numbers over here and the two numbers are let's say 20 and then minus what we do is we will minus 15 over here let's say the third expression is multiplication so I will simply provide five as the number multiplied by seven as another number the next operator is the Divide operator so let's say I provide the print statement over here and we provide 50 as one number divided by 10 as another number and then we have another print statement let's say we want to find the remainder after dividing two numbers so let's say 40 is one number and then we provide percentage sign and then we provide 15 as the second number and then the last operator that is the power operator I simply provide five s the number and then two times multiplication over here which means power and then I provide two is the second number so guys let me just save this file and try running this code we will check the results of all these operations over here so as you can see the first print statement that is 10 + 20 it is providing us 30 as the result and this is the correct result over here 20 15 should be 5 and that is what we are getting over here as 5 and then 5 * 7 it is equal to 35 and we are getting 35 over here then 50 divided 10 should give us the quotient that is 5 and we are getting 5.0 over here and then 40% 15 which means 40 is divided by 15 and then what is the remainder is getting returned to this print function and 10 is getting returned why 40 ID 15 the quotient will be 2 that is 15 * 2 is 30 but the remaining number will be 10 which will be the remainder and that is what we are getting over here as the 10 as the remainder and then 5 power 2 which means 5 * 5 is done over here and 5 * 5 is 25 and that is what we are getting over here so Guys these are certain arithmetic operators that you can use which include addition subtraction multiplication division and then finding the remainder of the two numbers by dividing them them and then we can also find the power of the number so guys you can use them based on your requirements assignment operators in Python Programming so guys the assignment operators are used to assign values to variables so as you can see in this example the number variable is assigned the value that is five so this is the assignment operator that is equal to over here apart from that we have other operators as well so as you can see this is the assignment operator that is used in order to assign some value to a particular variable we also have addition assignment in which we use the plus operator first followed by the equal to symbol so guys what exactly happens over here is let's say if we provide this expression over here that is a and Then followed by plus symbol and then equal to operator and Then followed by this value that is 1 so this is nothing but it is the expression that is a equal to a + 1 so basically 1 is getting added to this variable that is a and then it is getting stored in the same variable that is a so guys let us check the this with the help of example over here so first of all I will provide the number variable and we will provide a value that is five over here so this is a simple assignment operator we can simply use the print function in order to print this number so when we provide number as the parameter to this print function and when we just save this file and try running this code now so as you can see on the terminal five is getting printed that is the value of this number now let's say we want to add 10 to this number so we can do this in two ways so first of all we can simply use the plus operator that we had seen previously so number equal to number followed by plus operator and then 10 so guys this is one of the arithmetic operators that we had seen previously that is used in order to add two numbers so number + 10 in this case it will be 5 + 10 that is 15 and 15 will get assigned to this number and it will be printed by using this line of code over here let me just save this file and try running this code now so as you can see 15 is getting printed now guys there is another way in order to add this 10 to this number so we will simply remove this part of the code over here and then what we have to do is we have to provide number followed by plus operator and then equal to operator and then the number that we want to add to this number that is 10 so guys what is happening over here is this is the shorthand method for the same expression that we had written previously so it is equal to number equal to number + 10 so guys this is the expression that is work looking over here behind the scenes and 10 is getting added to this number and the result is getting stored in this number variable itself let me just save this file and try running this code now so as you can see 15 is getting printed over here guys this is nothing but a comment that we have provided I can just remove this part over here and let's say I want to add 15 now so we provide 15 as the number so 5 + 15 should be 20 let me just save this file and try running this code now so as you can see 20 is getting printed and this is how we can use one of the assignment operators in order to add two numbers let us move to another assignment operator we have the subtraction assignment as well in which case we have to use minus operator followed by equal to symbol in which case this expression will get computed that is a it is equal to a minus 3 in this case when we provide a minus operator followed by equal to operator and then 3 similarly we have multiplication assignment in which multiply and equal to are used in combination we have division assignment as well in which case divide and equal to is used remainder assignment in which case this percent sign is used along with the equal to symbol and exponent assignment as well in which case the two times multiplication symbol is used and then equal to operator is used in order to compute the power of the numbers so guys let us check the remaining assignment operators with the help of examples over here so what we have to do is the number variable is already five and to this number we can simply change the assignment operators so so let's say I want to subtract some number over here so what we will do is number then minus equal to operator let's say I want to remove two from this number so it is nothing but 5 2 in which case the answer should be three so let me just save this file and try running this code now so as you can see three is getting printed if I want to multiply this number so I'll simply replace this minus by multiplication symbol and let's say I provide four over here as the number so this should be 5 * 4 let us check what will be the result so 5 * 4 is 20 in this case let's say I want to use the Divide operator so we can simply use the divide and then equal to symbol and let's say I provide the number over here as three so let me just save this file and try running this code now so 5 divided by 3 will give us 1.66 as the result and that is what we are getting over here now guys similarly let's say I want to find the remainder while we divide five by three over here so we simply have to replace this divide Operator by the person operator over here and let me just save this file ENT running this code now so 5 / 3 the quotient will be 1 in this case and the remainder will be two in case we don't want the decimal output over here so two is the remainder and that is what we are getting over here and the last operator that is the exponent operator over here so we simply provide the multiplication symbol two times and then equal to operator and then let's say we provide two over here so this is nothing but 5 * 5 that is the square of the number that is five let me just save this file and try running this code now so it is 25 over here if you provide this as three so what will happen is five will be multiplied by the same number that is five three times over here so let me just save this file and running this code now so as you can see 5 multiplied by 5 is 25 and then 25 multiplied by 5 again will give us 125 as the result and guys this is how we can use the assignment operators based on our requirements as the shorthand methods in order to carry out the mathematical operations on the numbers comparison operators in Python Programming so guys the comparison operators compare two values or the variables and return a Boolean result that can be a true or a false value so let's say for example as you can see we have two variables over here that is a is equal to 3 and b is equal to 5 so when we print this statement and inside this we have a comparison operator that is greater than operator over here that is a greater than b so what is happening behind the scenes is there is a check whether this variable that is a is it greater than b so if we see 3 is not greater than 5 over here in which case the return value will be false over here but in case when the value of a is greater than b then this particular expression that a is greater than b will return us True Value so guys let us check this with the help of example over here so let's say we have the variable a it is equal to 3 and the variable B it is equal to 5 and then when we we have this comparison operator over here we use the print statement we say a greater than b so guys this particular operator is the greater than symbol over here which can be treated as the comparison operator in order to compare the two variables or the two numbers as well so let me just save this file and try running this code now so as you can see we are getting false as the result that's because the value of a is three and the value of B is 5 in which case a is not greater than b and that is why we are getting false over here guys similarly we have other comparison operators as well as you can see we have is equal to so basically 3 equal to equal to 5 no in this case because both these numbers are not equal so that is why this expression will give us the result as false over here similarly we have not equal to in which case it will give us true that's because the two numbers are not equal so we use the exclamation mark followed by the equal operator in order to check the not equal to expression and then we have the greater than sign as we have seen just now greater than symbol similarly we have less than symbol over here so this less than symbol will give us true over here that's because 3 is less than 5 and we also have greater than or equal to so guys basically what happens is let's say if the value of a and b both are three so basically is three greater than three no in this case so false will be returned but when we provide greater than or equal to which means we are checking that the two variables should be at least equal or greater than so in that case when both the values are three so 3 greater than or equal to three will give us true in this case similarly we will have less than or equal to symbol as the less than symbol and equal to symbol combination so guys let us check all these with the help of examples over here so we have checked the greater than symbol over here let us check the less than symbol so we will simply provide print a less than b over here which should return us true in this case that's because the value of of a is actually less than the value of B over here let me just save this file and try running this code now so as you can see first expression is false that's because a greater than b no in this case but is a less than b yes in this case and that is why we are getting true over here let us check some more comparison operators over here we provide the print statement is a equal to B over here and then let us provide another operator that is a not equal to B in this case and then we have another operator that is a less than or equal to B and then we have another operator that is a greater than or equal to B in this case so guys we have provided all the comparison operators over here let me just save this file and try running this code now so as you can see these are the results over here so the first result is false that's because a is not greater than b a is less than b yes in this case so that is why we are getting true over here is a equal to B no in this case because 3 is not equal to 5 so we are getting false as the result then is a not equal to B yes both numbers are not equal and that is why we are getting true over here is a less than or equal to B so is 3 less than or equal to B yes in this case so that is why we are getting true and is a greater than or equal to B no in this case and that is why we are getting false over here now guys let us see what happens when B is also equal to a so we have provided both the values as three over here let me just save this file and try running this code now as you can see we are getting the results over here so the first result is false that's because is a greater than b no in this case they are equal and then the second result is also false is a less than b no in this case both are false over here so Guys these are false that's because we are not checking whether they are equal or not but in the last two operators as you can see over here the last two results are true that's because we have included the equal to symbol so a less than or equal to B yes in this case that's because a is equal to B and is a greater than or equal to B yes in this case since a is actually equal to B so both these operators will return us true whereas both these operators will return us false whenever both the numbers that we are comparing have the same value now guys apart from this the third operator that is a is equal to B yes in this case and that is why we are getting true over here and is a not equal to B no in this case since A and B both are equal so this will return as false and that is what we are getting over here so Guys these are certain comparison operators that you will be using in the upcoming videos as well when we are going to check the if else statement and we will also be using the V loop as well in which case we have to use these comparison operators to go inside the loop or else to come out of the loop logical operators in Python Programming so guys The Logical operators are used to check whether an expression is true or false so they are used in decision making so as you can see for example let's say the value of variable that is a is equal to 5 and the value of B variable is 6 over here and we have the print statement over here and there are two conditions that we are checking first of all whether a is greater than two so in this case the return will be true over here that's because the value of a that is five is actually greater than two over here and then as you can see this end keyword this is nothing but this is one of the logical operators it is being used in order to check the multiple conditions and the second condition that is being checked over here is whether B is greater than or equal to 6 so in this case since B is equal to 6 so yes in this case it is also true so basically since both the Expressions over here that is the second expression and the first expression is true and because this end logical wants all the Expressions to be true the return for the entire expression will be true over here so as you can see these are certain logical operators over here first of all we have the end operator which means A and B it is true only if both the the oper that is a and b are true over here similarly we have r as well so as you can see A or B in this case only one oper needs to be true that is only one condition needs to be true over here so this will be true if at least one of the operant is true and then we also have the not operator in which case we can use it as not a so it will be true if the operant is false and it will be false when operant is true over here so guys let us check all this with the help of examples over here so let's say we have the variable that is a is equal to 5 and B it is equal to 6 over here so we simply have the print statement and let's say we provide the condition that is a is it greater than two over here and we also have another condition so using the end logical operator over here we can combine multiple conditions so next time we will be checking whether B is greater than or equal to 6 so guys in this case both these conditions that is a greater than two will return as true and then B is greater than or equal to 6 will also return as true so this entire expression will be true over here so let me just save this file and try running this code now so as you can see true is getting returned over here now what if one of the conditions is false over here so what we have to do is let's say I provide a less than two in which case this particular expression will become false so let me just save this file and try running this code now so as you can see false is getting return that's because one of the Expressions while using the end logical operator is false over here and according to rules all the Expressions while using the end logical operator must be true in order to return the true as the result now guys if we check the same conditions that is both these conditions by using the or logical operator so we simply have to provide or over here and let me just save this file and try running this code now so as you can see true is getting returned that's because the second expression over here is true and the first expression over here is false so anyway the or logical operator wants one of the conditions to be true and that is why we are getting the true as the result over here what if we make the second condition false over here so let me just change this expression to B less than 6 over here let me just save this file and try running this code now so as you can see false is getting returned that's because is a less than 2 no in this case so false is getting returned over here and is B less than 6 over here no in this case it is equal to 6 so this expression is also false so the entire expression is false and that is the only combination where the or logical operator will return us the false result now guys when do we use this not operator over here so let's say I have just a simple expression so over here I will provide is a less than 4 over here so in this case is a less than 4 no so it should return false so let us save this file and try running this code now so it is returning false over here but what if we want the opposite of this result so if the result of any of the expression is false we want to print true but if the result result of any expression is true we want to return it as false so what we have to do is we simply have to provide not logical operator and the expression needs to be provided within the parenthesis over here as we can see so let me just save this file now so since it was returning false by using the not logical operator it should now return true so let me just run this code once again so it is returning true over here similarly if let's say this particular expression turns out to be true so we will get false as the result so let's say I provide a greater than 4 so is a for which the value is five over here is it greater than four yes in this case so this will return as true but since we are using the not logical operator it will return this True Result to false and it will be printed so let me just save this file and try running this code now so as you can see false is getting returned over here and it is being printed so Guys these are certain logical operators that we will be using in the upcoming videos as well when we are going to use the if else statement apart from that we will be also using the while loops and other control statements as well where we are going to use these logical operators so guys practice on your own so that on different inputs you get different outputs bitwise operators in Python Programming so guys The bitwise Operators act on operant as if they were strings of binary digits so they operate bit by bit hence this is the name that is the bitwise operator so first of all let us understand what are the binary numbers so over here for example as you can see the number one is being represented in the binary form as 0 and 1 now before this the number zero it will be represented as 0 0 that means the binary form can only have two types of digits that is either 0 or 1 so 0 can be represented as all numbers being zero then one can be represented as the rightmost number can become one and the left number is zero over here now for the number two what will happen is this number that is one over here on the right hand side it will go go on the left hand side so this zero has become one over here and this one will become zero and that is what we can see over here that is 1 0 it is the binary form of the number that is two and then the next time this zero will be converted to one so you can see 1 one is the binary representation of the number three and so on the other numbers are also being displayed over here in the form of binary representation now guys as the name suggest The bitwise Operators operate on these kinds of numbers over here so let's say x it is equal to 10 which is an integer over here it will be represented as this number in the binary form and why it is equal to 4 which is represented as this number in the binary form over here it is represented as 1 0 as you can see over here and on the left hand side we can prefix any number of zeros that we want so basically what are the different types of bitwise operator as you can see we have end over here so bitwise end what this will do is if we do x and y basically all these dig digits that is first zero over here it will be kind of multiplied with the first digit of this number over here so it will be zero in this case so first four digits will be zero because all the digits in both the numbers are zero now over here this one it will be multiplied by zero over here and that is why we will get zero over here in this case and then this zero will be multiplied by one over here so again we will get zero and since the other two numbers are already zero over here we will get zero so this is how the bitwise end operator will work it will simply multiply the binary digits of the number now what happens in the bitwise or it will be the addition of those binary numbers over here so as you can see we have 1 0 1 0 so 1 + 0 the result will be 1 over here and that is what is being displayed as you can see now 0 + 1 will be again 1 over here then 1 + 0 again it will be 1 over here and the next number that is 0 and 0 it will be zero over here now guys what if one is encountered on the left hand side and on the right hand side as well so since since binary numbers can only be represented by two digits that is 0 and 1 so 1 + 1 will be 1 in this case and guys similarly we will see what will be the result of the other bitwise operators so let us move to the vs code now over here let us say x it is equal to 10 and let's say y it is equal to 4 over here and now let us print all the results of the bitwise operations over here so we will simply have the print function and then we will say x and then bitwise end operator followed by y over here similarly we will have other operators that is bitwise or and then we have bitwise not bitwise XR bitwise right shift and then we have left shift so over here I'll simply copy and paste this line of code over here now one by one I will change the operator over here it will be bitwise or so we use this symbol over here and for bitwise not we have to use only one variable over here so we will be using X in this case and this is the bitwise not over here for bitwise or we use the rais to symbol over here so X ra to Y and then for right shift and left shift we have to use the greater than symbol and then some particular number to Define how many times we want to shift the digit so let's say we want to shift two times over here and then the left shift as well we want to shift two times over here so Guys these are certain bitwise operators as you can see so let me just save this file and try running this code to see the results of all these bitwise operators so as you can see we are getting the results over here so for first of all it is displaying zero that's because we have seen the result over here which was all zero numbers and that is why we are getting the numerical number as zero over here in the next case that is bitwise or we are getting this number which is represented as 14 in the decimal form so that is what we are getting that is 14 over here now not of X so basically not of X it is 11 over here and that is what we are getting that is1 and then X xor Y so over here the result is 14 and that is what we are getting that is 14 over here guys all these results are in decimal format if you try converting these decimal format numbers into binary numbers you will get all these results that are being displayed inside the parenthesis over here the pit wise right shift number so basically we are reducing the number so from 10 the number is being reduced to two over here as you can see this is the binary format and the same thing is being displayed as the result over here that is two and then when we shift on the left hand side we are increasing the number so basically we are getting the result as 40 from 10 so as you can see This is 40 over here now guys in the right shift what happens is we are prefixing more zeros on the left hand side so basically this 1 Z will go to the right hand side and only this 1 Z will remain as you can see over here this one Z is remaining whereas when we do left shift after this 1 0 1 0 two more zeros will be appended and that is what we can see over here that is one Z and then after this one Zer and these two zeros were appended on the right and that is why the number has increase so Guys these bitwise operators are very important when you learn about mathematics and mathematical problems to be solved and as far as competitive programming is concerned many problems can be solved by using these bitwise operators so membership operators in Python Programming so guys in Python in and not in these are some of the membership operators over here and they are used to test whether a value or a variable is a found in a sequence now what is a sequence it can be of any data type it can be a string or or else it can be a list as well it can be a tle it can be a set or a dictionary so guys we are going to check this with the help of examples over here as you can see the operator so first operator is n this is one of the keywords that can be used and it belongs to a membership operator so it will be true if the value or the variable on the left hand side is found in the sequence and on the other side that is the opposite of n is not in over here and it will be true if the value or a variable on the left hand side height is not found in the sequence so guys basically these membership operators can be used in order to check whether a particular value is present in a particular variable or not so let us check this with the help of examples now so let's say over here I have a very simple string that is Str Str it is equal to programming for beginners which is the name of this YouTube channel which you should definitely subscribe if you have not done so so guys let's say if I want to find this capital P whether it is present or not inside this string so over here so what we will do is we will simply have the print function and inside the parenthesis we will have the single Cotes and I will say capital P over here and we will use the membership operator that is in over here as you can see vs code is suggesting us this in keyword over here which is the membership operator now what we will do is on the right hand side of this in keyword we will have the sequence that is Str Str which is the string object so what we are asking the program is to find whether this P character is it present in this St are string or not so in keyword is being used so let me just save this file and try running this code now if it is present then it will return true or else it will return false over here so I'm running this code over here as you can see true is being displayed that's because we have found P right at the start of the string now what if I change this character to a small P so over here I'm changing this character to a small case P character over here and guys this is K sensitive so if small p is not found in the entire string then it will be false so let me just save this file enter I running this code now so as you can see false is getting displayed that's because we don't have a small p over here in this entire string but we have the uppercase P character at the start of the string so guys this is the functionality of the in operator over here now as you can see in has returned us the false result over here which means this small case character that is p it is not present inside the string what if we reverse this that means what if we use the reverse of this membership operator we will simply do not n over here that means we are checking whether this small p is it not present in the string yes it is not present and it should return us the True Result so let me just save this file and try running this code now so as you can see we are getting true over here so guys in and not in membership operators both are opposite to each other if one operator is returning true in one of the conditions so the other operator will return us the false result in the same condition now this example we have taken as far as a string is concerned as I have told you we can also use list tle sets and dictionary as well so let us take another example with the list guys in the upcoming videos we are going to learn more about these objects for now you just need to know that what is the syntax of a list if we are defining a particular set of elements so over here let's say I want to have the list of fruits so I will just name the variable as fruits over here and then on the right hand side the way that we Define the list is by using the open and close square brackets over here so as you can see this list is getting getting suggested over here and that is what we are going to Define now inside this open and close square brackets we are going to have the list of strings having the name of the fruits so let's say we have the double coat first and then we will say mango and then the second fruit let's say we have apple and then the third fruit let's say we have banana and then let's say we have the fourth fruit is orange over here so Guys these are certain fruits that we have defined in our list and the name of the variable is fruits over here now inside this fruits list we need to check whether there is a particular fruit that is present or not so I'll just remove this part inside the print statement over here and let's say I want to find whether inside this list the banana fruit is present or not so we will simply have banana and then after that we will simply have in and then followed by we will simply put fruits that is the variable name over here so guys this is the list on the right hand side of this in operator and on the left hand side we are providing one value which needs to be found whether it is present inside the fruits variable or not so let me just save this file and try running this code now so as you can see true is getting returned that's because this banana fruit is actually present in the fruit list over here now let us say we provide some another fruit over here let's say we want to find whether pineapple is present in the fruits list or not so we have provided pineapple over here let me just save this file and try running this code now so it is saying false as we can see we have not defined pineapple in our list of fruits and that is why we are getting false over here and if we change the operator that is from in to not in over here so let's say I provide not in and we use the same value that is pineapple let me just save this file enter I running this code now so it will be the opposite of false so as you can see true is getting displayed now that's because pineapple is actually not present in the list of roots that we have defined if else statement in Python Programming so guys in computer programming we use the if statement to run a block of code only when a c certain condition is met so for example as you can see assigning grades that is a b c based on the marks obtained by a student so basically over here in this case we will be using the if condition now what can be the conditions we can say that if the percentage of the student is above 90% so assign grade A in the same way if the percentage is above 75% then assign Grade B and if the percentage is above 65% but less than 75% then assign grade C so during such conditions we have to use the if else statement over here now similarly in Python there are three forms of if else statement so we are going to check all these forms of statements one at a time with the help of examples the first part is the if statement in which case we are going to Simply have the if statement over here along with the condition and the block of code the next form will be if L statement in which case we will also have the else block over here and the third form of the IFL statement will be first we will be having the if statement and Then followed by the AL if statement in which case we have another condition over here and then finally we have the else statement over here so let us check all this with the help of examples in the vs code so over here let's say we have the value of x it is equal to 10 now what we have to do is we have to provide the if condition over here so as you can see when we type if keyword over here vs code is suggesting us that we can use this if keyword so we are going to use this and then we are supposed to have some condition so we can say x greater than 5 over here so guys this is one of the comparison operators that we have already seen previously it will check whether this left hand side variable is it greater than the value that is present on the right hand side so guys this is one of the conditions that we are going to check and then followed by a colon over here so guys this is the format in which we provide the if condition and if this condition that is whether X is greater than 5 if it is true then we want to come inside this and there will be the block of code we need to have certain statements over here so we will say print and we can simply put the string that is X is greater than 5 over here since that is the condition that we have checked so this is the very simple code that we can have with the if condition over here let me just save this file and try running this code now so as you can see it is displaying X is greater than 5 now guys this is just one statement that we have provided inside the if condition we we can also have multiple lines of code inside this block over here after the if condition so we simply have to press enter and provide the another print statement and let's say we will simply put we have checked X so we have a very G statement over here that is we have checked X over here let me just save this file and try running this code now so as you can see X is greater than 5 this thing is getting printed and this statement that is we have checked X is also getting printed so all the lines of code that is present inside the block after this condition that we have provided in the if statement will be executed only when this condition that is X greater than 5 is true now what if this condition is not true so let's say I provide X less than 5 over here in which case this condition will become false so what will happen is the control flow will not go inside this block and it will not print these statements over here let us verify this I will just save this file and try running this code now so as you can see nothing is getting printed over here that's because these lines of code are not getting executed because this condition was false now how do we verify that we have to come out of this block so basically we have indented this code that is there are some space characters over here in this line that is why these lines of code over here are treated to be present inside the block after this condition we have to come out of that block over here so we simply press enter and then we press backspace so that the cursor is aligned to this if condition over here now we can simply provide another print statement and I will simply say outside if statement so over here we say outside if statement now guys this line of code it will confirm that the control flow has come out of the if block over here so let me just save this file now and try running this code so as you can see we are getting outside if statement that's because X less than five condition was false and that is why these two lines of code were not printed and then the control flow came out of the if condition and then this line that is outside if statement was printed so guys it is very important that you follow this indentation as far as your python programs are concerned you might get incorrect output if you don't follow such indentations properly now let us move to another form of if statement so over here the second form is we provide the else part as well so the first part we have already seen that is using the if statement let us now use the else statement as well so over here what we will do is first of all we will check whether X X is greater than 5 and then we will print that is X is greater than 5 over here now what if X is not greater than 5 that means it is less than or equal to 5 so we have to define the lse part over here so first of all we have to remove this indentation part so I'll just press on backspace and then we provide the else keyword as you can see vs code is suggesting us this else keyword over here we will use this and then followed by colon and then we can go inside this block of code and similarly we will have another statement in this case we will say X is not greater than 5 so we are checking whether X is greater than 5 and we will say x is greater than 5 if this condition is true and if this is not true then it will go in the lse part and it will say X is not greater than five and after this part of code gets executed the control flow will come over here and it will print this statement that is outside if statement over here so let me just save this file enter I running this code now so as you can see it says X is greater than 5 so over here since the value of x it is 10 it is printing X is greater than 5 after this x greater than 5 condition is true and then after that we are getting outside if statement so the control flow did not go inside this else part that's because it went inside this if part and this line of code was executed so guys the control flow can only go inside one block of code if this condition is true then it will come out it will not go inside the else part and if this condition becomes false then it will go over here in the else part and execute that line of code so let us check that second scenario now what if X is not greater than 5 so we will change the value of x and let us say the X values is 2 now so in this case is X greater than 5 no in this case so this line of code that is X is not greater than 5 should get printed let me just save this file andent I running this code now so as you can see X is not greater than five this line of code is getting printed that's because the condition was false and the control Flow came in the lse part and it executed this line of code after this outside if statement got printed over here as you can see on the console so guys this is one of the examples of the if else statement that we can use guys there will be many instances where you will be using this if else statement in your actual programs so make sure that you practice on your own now after this let us see another part that is we have the L if as well so guys let us take this example over here that is of grading system so if the percentage is greater than than 90 we have to assign the grade that is a If the percentage is greater than 75 but less than 90 then we will say the grade is B and if the percentage is greater than 65 but less than 75 then we have to put the grade as C so guys let us move to the code over here let us clear all these lines of code and over here we will simply have the percentage variable and let's say we have 95 as the percentage initially and then we have another variable that is grade let's say it is equal to D initially so we have this character that is D over here now what we have to do is we have to provide the if condition and the first condition is whether the percentage is above 90 so over here we will say inside the if condition first of all whether this percentage is it above 90 over here so we will simply have percentage greater than 90 and if this is true then we have to provide colon and then we have to make the value of this grade as a so grade it is equal to a over here inside the single codes now we have another condition that is if the percentage is greater than 75 but if it is less than or equal to 90 then it should be B so what we have to do is we can use the L If part over here so we have L if keyword so as you can see vs code is suggesting us this L if keyword over here followed by we have to check whether this percentage again is it greater than 75 so over here if it is greater than 75 then we have to come in this block of code and then after this again we have to assign the value to this grade variable and this time the value will be B over here so we will assign the value to grade as B and then after this we will again have the L If part over here and we need to check whether the percentage is greater than 65 or not and then in that case we have to provide C so over here we will say l if percentage it is greater than 65 in this case and then if this is true then we have to provide the grade value as C over here and then guys we can also have the else part over here and we can simply provide that the grade in the lse part it can be D over here in case the percentage is less than 65 so we can have gr as D and then finally we will have the print statement over here so we have the print function and we will simply provide the grade value so the grade is and then we have comma and then the grade variable over here so guys over here as you can see initially the percentage is 95 so it should go inside the first if statement so let let me just save this file now and try running this code so as you can see we are getting some error over here at the else part so over here we have forgot to provide the colon after the else part so it is very important that we provide the colon after any of these keywords that we have used and the conditions that we have used so let me just save this file and try running this code now so as you can see the grade is a that's because the percentage value is 95 and in this case percentage is greater than 90 and that is why the grade is being assigned as the value as a Now what is the percentage value is not greater than 90 so let's say we provide the percentage value as 85 so in this case the control flow will come over here it will check whether percentage greater than 90 no in this case then it will go inside the L If part so is percentage greater than 75 yes in this case so this line of code that is grade equal to B will get executed and then the control flow will come directly out of the if else statement and it will print the grade over here let me just save this file and try running this code now so as you can see the grade is being assigned the value as B so grade is B is getting printed over here similarly let's say we provide the percentage value as 70 so this time this condition that is percentage greater than 65 will get executed because the previous conditions are already false in this case so let me just save this file and try running this code now so grade must be C so as you can see the grade is C over here and what if the percentage is less than 65 so let's say we provide the percentage of 60 so finally the lse part that is grade equal to T will get executed so let me just save this file and try running this code now so now in this case the grid is D so in this way we can easily use the IFL statement we can also use the L if keyword in order to check the intermediate conditions over here for Loop in Python Programming so guys in computer programming Loops are used to repeat a block of code so let's say for example if we want to show a message 10 times we don't have to print that 10 number of times over here we can simply use the Loop in order to repeat the same message again and again 10 times so in Python the fall Loop is used to run a block of code for a certain number of times so in this example we have considered 10 we can have any number of iterations so basically it is used to iterate over any sequences such as list tle string Etc so guys this is the syntax of the Fall Loop in Python Programming so first of all we have the for keyword followed by a particular value or a variable and then we have the in keyword which is a kind of a membership operator that we have seen previously and then we have the sequence now this sequence can be anything it can be a list tle or any other sequence over here so let us check this with the help of examples now so over here what we will do is let's say we have the variable name as X and we have the list of numbers over here so in order to define the list we have the open and close square brackets and we have the list of numbers let's say we have one followed by two and then we have three 4 and then five so we have the top five numbers over here inside this list that is defined in the variable X now what we want to do is we want to print all these numbers one at a time on the separate lines so we can simply use the for Loop over here so for and what we will do is let's say we provide value as the variable name and then we provide the in keyword which is the membership operator and after this on the right hand side of the in keyword we are supposed to have the sequence so the sequence in this case is the variable that is X over here so this is the format of the Fall Loop whenever we are going to iterate through a list or a sequence now inside this we can have the block of code over here so we simply want to print all the values so we have the print function and we can simply provide this value that is variable so guys what is happening behind the scenes is this x that is the list of all the numbers one at a time the number is being assigned to this variable that is value so first of all one will get assigned to value and this value Val that is one will get printed and then the control flow will go back again in the sequence that is X it will check whether there is a next element or not so two will get printed and then again three and then four and then five and then after this when the control flow comes over here it sees that there is no other element after this Fifth Element so the control flow will come out of this fall Loop and then the other lines of code after this fall Loop will get printed so guys let me just save this file enter I running this code now so as you can see all the numbers are getting printed over here on the terminal that is 1 2 3 4 5 now guys let's say we want all these numbers to be printed on the same line so previously we had seen that we have certain parameters in the print function that will help us in order to print the values in a specific way so over here we have one of the parameters that is end over here so we provide end and this parameter helps us in order to separate the different elements that we want to print so what we are going to do is I'm going to separate all the the numbers using the comma character so I have provided the comma character over here so all the numbers that were printed on the different lines will get printed on the same line now so let me just save this file and try running this code now so as you can see 1 2 3 4 5 is getting printed we are getting this additional comma over here at the end that's because after the last value is getting printed the comma is appended after that last value so guys this is one of the ways in which we can use the fall Loop in order to carry out our operations now guys there is another important thing that you must know in Python the fall loop with python range can also be used so in Python a range is a series of values between two numeric intervals we use the Python's builtin function that is range to define a range of values so let's say we want to define the top 10 numbers over here we can simply use the range function instead of defining them one at a time like how we have defined in this list so basically in order to have the top 10 numbers we have to manually Define it as 1 to 10/ over here but we can also get rid of this part we can have the range method over here so as you can see when we type range vs code is suggesting us this function that is range over here and we simply have to provide a number over here so let's say we provide 10 as the number so what is happening is the list of 10 numbers over here is getting assigned to the variable that is X over here starting from the number zero up to the number that is 9 so over here we will be seeing all the numbers starting from zero up to 9 over here the last number that is 10 is excluded from the list so if we Simply Save this file enter running this code now we will get these numbers that is 0 1 2 3 4 5 6 7 8 9 so 10 numbers are getting displayed over here that's because we have provided 10 inside the range buil in method what if we provide 20 over here so 0 to 19 numbers will be displayed so let me just save this file and TR running this code now so as you can see 0 to 19 is getting displayed so guys let's say if someone had told you write a python program in order to print top 20 numbers starting from the number 0 up to 19 so instead of having the print statements 20 number of times and writing each and every number inside the print statement we can simply have the range method over here and we can use the fall Loop in order to iterate through the list that we have already defined over here and that is how we simplify the problem that is given to us and write the Python program now guys there is another variation over here python fall loop with the else part so after this fall Loop we can also have the else part that will mandatorily get executed after we reach the end of this sequence that we have provided in the fall Loop so what we will do is we will simply come out of this block of code and we will have the else part over here and we will simply print outside fall Loop over here so we have outside fall Loop so guys what will happen is after the control flow comes out of this fall Loop the control flow will go inside this lse part and it will execute this line of code and print outside fall loop on the console now guys this print statement will be printed on the same line that's because we have provided the end part over here and there is a comma over here so you can expect the string to be present on this same line over here so let me just save this file enter I running this code now so as you can see 0 to 19 that is all the numbers are getting printed and then the last line that is outside fall Loop is getting printed over here so in case you want want to print something or carry out certain operations after the execution of the Fall Loop you can have the else part as well and it will carry out the operations over here after the end of this sequence is reached so guys this is the main functionality of the Fall Loop that is in order to iterate through the sequence we can also have the sequence of list of strings as well we can also have tle or dictionary as well so guys it depends on your requirements as to what exactly you want to find out through the python programs while loop in Python Programming so guys previously we have seen how the fall Loop works in the Python Programming now the python y Loop is used to run a specific code until a certain condition is met so basically in the fall Loop there was no such condition that we had provided but it was iterating through a list that we had provided in the form of a variable but over here this is the synex of the while loop first of all we have the while keyword over here and then we have a certain condition and if this condition is true then only the control flow will go inside the body of the while loop and then again the control flow will come over here it will check the condition again and if the condition is true once again it will again go inside the body of this while loop so guys again and again the control flow will come inside the while loop until and unless the condition becomes false so when this condition becomes false the control flow will come out of this while loop and that is how the while loop is going to work in the Python Programming so guys let us check this with the help of examples now so let's say we want to to print the first five numbers that is 1 to five so over here initially we can have the variable that is I it is equal to 1 and the second variable that is J it is equal to 5 so this is the starting point that is I equal to 1 and the ending point is J is equal to 5 so basically we can have a while loop over here we will simply have the while keyword and the condition that we have to give is whether I is less than or equal to J and up to that condition we want to print the value of I so basically it is I less than or equal to J over here so if this condition is true we want to print the value of I which will be one initially so basically I want to print this number that is I over here now guys what exactly is happening over here is I's value is 1 initially J value is five initially so is I less than or equal to J in the first instance yes in this case so I will be printed which is equal to 1 so again it will go inside the Y Loop and it will check whether the one is less than or equal to 5 yes in this case so guys we are not changing any of the values that is I or J over here so this will be infinite Loop because again and again the condition will be true and the number that is I which is equal to 1 will get printed indefinitely so what we have to do is we have to increment the value of I because after one we want to print the value that is two over here so what we will do is we will simply add 1 to I so I it is equal to I + 1 we can also use the Shand method that is I + equal to 1 over here so what will happen now is I's value is updated to I + 1 which will be two now so is 2 less than or equal to 5 yes in this case and then again two will get printed and then I will again get incremented over here so the I's value will be three next time I's value will be four and then again I's value will be five and then ultimately when I's value is 6 this condition will become false that's because 6 is not less than or equal to 5 and the control flow will come out of the while loop so guys let me just save this file and try running this code now so as you can see all the numbers that is 1 2 3 4 5 is getting printed after the I's value is five over here five is getting printed now I's value becomes 6 over here that's because 5 + 1 will be 6 and is 6 less than or equal to 5 because the J's value is five over here in this case so no the condition becomes false and the control flow comes out of the while loop now what if we want to print all these numbers on the same line so simply inside the print statement we can have the comma and then we can have the end operator and then let's say we want to separate all the numbers with the space characters so inside the double codes we have provided the space character over here so let me just save this file and try running this code now so as you can see 1 2 3 4 5 is getting printed over here we can have any numbers over here let's say I is starting from 11 and let's say we want J is equal to 20 so in this case 11 to 20 should get printed let me just save this file ENT are running this code now so as you can see 11 12 13 14 and up to 20 numbers are getting printed over here so guys this is the main functionality of the Y Loop it is going to have a certain condition and if this condition is true the block of code inside the while loop will get executed and once the condition becomes false control flow comes out of the while loop now guys we can also use the lse part with the while loop so over here as you can see python while loop with the lse part so a while Loop can have an optional else block as well the else part is executed after the condition in the while loop evaluates to false so basically after this while loop we can also have the else part which is optional so we can have the else part over here what we will do is we will simply have the print statement that is outside the while loop so we have the print function and we will say outside while loop over here so let me just save this file inter I running this code now so as you can see 11 12 13 up to 20 numbers are getting printed and then on the same line the outside while loop the statement that we have provided in the else part is getting printed so this is the functionality of the else part after the Y Loop it is optional if you want to have we can have it or else we don't need to have it but guys the important thing is inside the while loop we can provide a particular condition and the control flow will go again and again inside the while loop until the condition is true once a condition becomes false the control flow will come out of the V Loop now guys what you should use whether you should use the python for Loop or python V Loop over here so guys basically they are used based on the specific requirements so as you can see fall Loop is usually used when the number of iterations is known so as we had seen previously in the fall Loop we provide a particular sequence and iterate through that sequence by giving one value at a time to a variable and we use that variable inside the block of the Fall Loop but in the while loop there is a condition so while loop is is usually used when the number of iterations are unknown so we don't know the number of iterations we don't have the sequence of elements or the list of numbers through which we want to iterate so basically we provide the condition in the while loop So based on these requirements you can choose whether you want to use the while loop or you want to use the fall Loop but guys it is very important that you practice both these Loops the implementation of these Loops are very important as far as Python Programming is concerned so break and continue keywords in Python Programming so guys these are two important keywords in Python Loops that is break keyword and the continue keywords basically these are used in the loops in order to carry out certain operations so the breake statement is used in order to terminate the loop immediately when it is encountered so whenever we are executing certain code inside the for or the while loop if there is certain condition we can use the break statement in order to come out of the loop and then on the contrary we have the continue statement as well so the continue Contin statement is used to skip the current iteration of the loop and control flow of the program goes to the next iteration so guys let us check both of these keywords with the help of examples over here so let's say first of all we will be using the fall Loop in order to print the top 10 numbers that is 0 to 9 so let's say we have 4 x and then we have the in membership operator and then we have the range builtin method in order to print the numbers so let's say we have the range of 10 numbers over here after the colon let's say we want to print all these numbers so what we will do is we will simply put print X and in order to get all the numbers on the same line I'm going to put end parameter over here and just have the space character over here so let me just save this file and try running this code now so as you can see we are getting the top 10 numbers that is 0 1 2 3 up to 9 over here but guys let's say now there is a requirement that before printing this six number we want to come out of the loop and and we only want to print from 0 to 5 and if we are required to keep this false statement as it is what we have to do is once we encounter the number six inside the fall Loop we have to come out of the Fall Loop so how that can be done basically we will have the if statement over here so inside this fall Loop we are having the if statement over here and we are going to check whether this x value is it equal to six over here so this is the relational operator that is equal to equal to we are trying to check whether this X variable is it equal to 6 and if it is equal to 6 then we can simply come out of the loop by using the break statement so after the colon over here we will simply put the break keyword so once we put this code over here that is if xal to 6 we are putting the break statement the control flow will come out of the loop when the x value is equal to 6 so let me just save this file and try running this code now to see what happens so as you can see 0 1 2 3 and then up to five numbers are getting getting printed and once a control flow comes over here next time the value of x will become 6 and it will check whether X is equal to 6 yes in this case and since this condition is true the control flow goes inside the if statement and this break statement is encountered which makes the control flow come out of this fall Loop over here now similar operation is being carried out when we use the while loop as well so let's say I is equal to 1 over here and let's say we want to print the first 10 numbers once again so what we will do is we will say while we can simply put I less than or equal to 10 over here and then after the colon we can simply have the print function over here and we will print the value of I and then let's say I provide the end parameter as the space character over here so that all the numbers that is the value of I is printed on the same line so let me just save this file and try running this code now so we have entered the infinite Loop over here I have just interrupted the printing of the numbers the mistake that we have done is we have not incremented the value of I over here so what we will do is simply we will increment the value of I by I + 1 over here let me just save this file and try running this code now once again so as you can see 1 to 10 numbers are getting printed now again let's say we want to print only the numbers from 1 to 7 so when the number eight is encountered we want to come out of the while loop instead of printing the 8 9 10 numbers so we can simply put the if condition over here if I is equal to 8 then what we have to do is we have have to use the break statement over here so let me just save this file and try running this code now in this case the top seven number should get printed and after 8 is encountered the control flow should come out of this while loop over here so I'm running this code now so as you can see 1 to 7 is getting printed over here so guys this is the main functionality of the break keyword let us now understand how continue works as you can see the continue statement is used in order to skip the iteration of the loop and the control flow of the program goes to the next iteration let let us understand this with the help of example over here we will take the same example that is for I in and then the range that is 0 to 9 over here so over here we will provide the number 10 inside the range builtin function so what we will do is we will simply print the value of I over here and then we will end it with the space character let me just run this code once so I'll just run this code over here as you can see 0 to 9 is getting printed now guys let's say I don't want this number five over here that is being printed Ed in the range 0 to 9 so what we can do is simply I will put a condition over here if this I's value equal to five then what we have to do is we don't want to print that number right so after this colon we can simply put the continue keyword so guys what will happen is once the I's value is five the control flow comes inside the if condition and the control flow will encounter this continue keyword so what exactly will happen is instead of going to the next statement over here the control flow directly goes back again to the fall Loop and goes to the next number so next time the I value will be six and this time since this condition will be false it will print this number that is six over here so in short what is happening is when the value of I is five it will not get printed over here with the help of this print statement so let us check this so I'll save this file and try running this code now so as you can see we are getting 0 1 2 3 4 and then there is no number five but after four we have six directly and and then we have 7 8 9 so guys in this way continue keyword works so let's say if I only want to print the even numbers so what will happen is let's say I don't want the odd numbers so how do we check that in the if condition we can simply put I person 2 is it equal to 1 over here because every odd number if it is divided by two it will give us the remainder as one and that is what we are checking so all the odd numbers will not be printed but only even numbers will be printed so let me just save this file andent try running this code now so as you can see only even numbers between 0 to 9 is getting printed that is 0 2 4 6 and then 8 and guys this is the functionality of the continue keyword that is in order to make the control flow go back to the fall Loop for the next iteration and guys that is the main functionality of the continue keyword in order to skip the current iteration and go back to the next iteration inside the loop now guys similarly you can use the continue keyword with the while loop as well so that code I'll leave up to you so that you can practice on your own in order to learn more about it pass statement in Python Programming so guys in Python Programming the past statement is a null statement which can be used as a placeholder for future code so basically let's say you have a certain function or you have something else like you can have a while loop or the if condition as well and you want to implement the logic inside this Loop or the if condition later on in the future so you can use the past statement in this case so so as you can see suppose we have a loop or a function that is not implemented yet but we want to implement it in the future in such cases we can use the past statement but now you will ask me we can also put the commment inside this block that is inside the fall Loop or the if condition as well so why do we use the past statement so guys let us understand this with the help of example so first of all we will understand the past statement over here so let's say we have the I's value as one over here and then we have the if condition so inside the if condition what we are doing is we are just checking whether I is less than or equal to 10 and then we have a colon and let's say we have the print statement over here and then we say yes less than 10 so we put yes less than 10 over here and then what we will do is we will have another print statement and I will say outside if statement so guys this is a very simple code first of all we have initialized the variable I to the value equal to 1 and then we have the if condition I is less than or equal to 10 and we are Simply Having the print statement over here and then after this if condition we have printed that we have come outside the if loow let me just save this file and try running this code now so it says yes less than 10 and it also says yes outside the if statement now let's say I have some plan in order to implement some logic over here but I don't have the exact logic right now so something else will be repl placing this line of code over here so let's say I simply put a command and say that to be implemented in future so we have the statement over here that is to be implemented in future now remember guys this is a command that using the hash character over here we are putting the commment inside the if statement so let me just save this file and try running this code before running this code you can already see that with this print function we are getting the red underline but still we will go and run this code now so as you can see line six print outside if statement so expected and intended block after if statement on line three so basically the root cause is over here that is inside the if condition so what it is saying is inside the if condition we have not provided any block of code that is there is no logic inside the if condition that we have provided previously we had simply provided the print function which works already but this thing is not working so what we can simply do is instead of providing the comment we can simply provide the pass statement so guys what happens with the pass statement is The Interpreter understands that there is no block of code right now inside the if condition and it needs to be ignored for now as far as execution of the code is concerned but with the comment the code doesn't understand such comment and basically it throws the error and that is what we have got previously so let me just save this file now and try running this code hopefully we should not get this error now so I'm just running this code once again so as you can see outside if statement is getting executed and basically this pass statement has helped us in order to make the control flow understand that there is no logic that is being implemented inside this if condition for now but in the future we will be implementing such logic and for now you can just ignore it and pass to the upcoming lines of code over here so guys this is the main functionality of the past statement you can use it whenever you have the requirement of implementing some logic in the future inside the if condition or the fall Loop or Y Loop or even in the defined functions as well which we are going to see in the upcoming videos functions in Python Programming so guys we will learn about the python function and the function expressions with the help of examples so basically a function is a block of code that performs a specific task so it can be any task that you want to implement based on your requirements but it is the block of code that you can put inside the function and that block of code will have your for implementation of the logic now suppose you need to create a program to create a circle and color it so there are two task over here that is first of all in order to create a circle and the second thing is to color it so you can create two functions to solve this problem that is the first function will be to create a circle and that will be one function and another function will be to create a color over here so basically what we have done is we have divided a complex problem into smaller chunks which makes it easier to understand the program and reuse the functions as well so there are two types of functions so first of all we have already seen some standard Library functions as well one of the example is the print statement that is the print function so these are builin functions in Python that are available to use so let us check some examples of standard Library functions over here so previously we have seen the print statement so this is nothing but one of the builtin functions which take multiple parameters so one of the parameters is the value so when we are providing programming for beginners the string which is the name of the YouTube channel as well which you should definitely subscribe so this is the string that we have provided to the print function and this string is being passed to the print builtin method and behind the scenes this print function is having some sort of code that will help us in order to print the statement on the terminal so when we save this file and try running this code now basically this programming for beginners is getting printed what we have done we have just called that function and the implementation is behind the scenes so this is one example of a builtin function similarly we have another builin function that is range which helps us in order to have the list of numbers from zero up to the number that we have provided so let's say we provide the number 10 so it will provide us all the numbers before 10 starting from zero so this is another builin function so similarly we have other standard Library functions as well now you can also have the user defined functions so in case your requirement is not fulfilled by using one of the standard functions that is being provided by python you can have your own user defined functions also so we can create our own functions based on our requirements and this is the syntax that is first of all we have this keyword that is DF which means Define and then we have the function name so this function name will be the name of the function like this range is the name of the function then the print function the print name is the function name over there so similarly we can have our own function name and after that we have the list of arguments we can have any number of arguments over here inside that we will have the function body where our implementation code will be present and then we can also have the optional return statement which means it will return some value so over here as you can see this is the example we have the defined keyword and Then followed by the greed function over here so it is not taking any arguments for now it is simply printing some statement that is inside inside greed function now how do we call this function simply we use the function name that is greed followed by open and close parenthesis and then we call the print function and we say outside function so guys let us check this with the help of example over here so simply we will have the defined keyword so DF and let's say we have sum and then underscore numbers so basically what we are doing over here is we will be adding two numbers so over here we have the open and close parenthesis and then after that we have a colon and let's say we have the number a it is equal to 10 and then we have number B it is equal to 20 we want to print the sum of these numbers so we simply provide print function inside this and we say A + B and then we can also have the string over here let's say we have sum of A and B and then we have colon and then after this we have comma and then we have a plus b over here so guys this is the function that we have already defined we have two numbers that is a is equal to 10 and B is equal to 20 now if we Simply Save this file and try running this code we will not get anything so as you can see there is no print statement which is helping us in order to print something on the terminal why so because this code is present inside a function which is not called yet so we need to call this function that is some numbers so how do we call it by simply calling the name so we simply have to provide some numbers over here and then open and close parenthesis and that's it we have simply called this function which will make the control flow go to this particular function over here and inside it will go it will check that a value is 10 B value is 20 and it will print sum of A and B it will carry out this operation that is a plus b so let me just save this file and try running this code now so as you can see sum of A and B it is equal to 30 and that is how we can simply provide the function now guys why do we write this function just to add two numbers so let's say you have a scenario you have a it is equal to 10 and then we have B it is equal to 20 and you want to print the sum so you can simply provide print a + b so you will get the answer as 30 now with the same requirement you have another requirement as well in the same code that is with this particular addition you want to add more two numers so what you will do is you will simply copy and paste these lines of code once again that is the three lines of code over here but this time the age value is something else so let's say we have something like 50 and then 60 over here so what will happen is with this print statement it will print the sum of these two numbers now let's say there is another requirement in which case all the sum needs to be printed at once and you have two more numbers so you will again copy these lines of code and then again paste this over here and then let's say the numbers are 100 and then 200 over here that is B is 200 so let me just save this file and TR running this code now so what is happening is all the sum is getting printed once that is 30 110 and 300 but let's say similarly if you have 10 sets of A and B values in this way and you want to print all the sum of those numb so what you will do so your code will become little bit complicated and it will be little bit lengthy as well so in order to avoid this what you can do is you can simply have the function and inside the function you can have those variables and have the sum of those variables so in order to achieve your task that is have the sum of multiple numbers over here in one screen and using the function fun what you can simply do is you can pass these values that is 10 20 50 60 and 120 while calling the function that is some number so I'll just remove these lines of code now over here and what we will do is I will simply provide the parameters that is the arguments over here that is a and Then followed by comma and then we have B now these A and B are not required because the values will come whenever this function is being called so I'll just remove these lines of code over here you will simply have one print statement inside the function and the sum of A and B it is A + B so this sum will get printed over here while calling the function you're supposed to provide the A and B value so what we will simply do is I will simply call this some numbers over here and I will provide the values of A and B so what we had provided we had provided 10 and 20 and then again we had the requirement that is to add the other two numbers which were 50 and 60 so again I will just copy paste the sum numbers function and provide the different values this time and then again I will copy and paste this once again with some different values so 100 and 200 so as you can see our code has become little bit cleaner instead of having three lines of code in order to add two numbers every time for which our code has also become lengthy we have a very short code and it is very clean as well it is very readable as well so let me just save this file now and try running this code so as you can see we are getting sum of A and B it is 30 sum of A and B it is 110 and sum of A and B it is equal to 300 you can also customize your function in order to have the values of A and B over here so we can simply say over here we have the double quotes and then we have comma and then we have a over here and then we have double codes and then we have and keyword double codes and then B value and then comma and then double quotes over here before the colar so as you can see A and B values can also be printed so let me just save this file and try running this code now so as you can see 10 and 20 were passed first time so it is saying sum of 10 20 is 30 then sum of 50 and 60 it is 110 and then sum of 100 and 200 is 300 you can call this function any number of times with different values in order to get the different sum over here I'll say 200 + 300 again and then let's say I provide 400 and 500 over here let me just save this file and try running this code all the sums are getting printed Ed and our code is also very clean over here so guys this is the main functionality of using python functions you can simply have the defined keyword followed by the function name and then this arguments list is optional over here you can pass it or if you don't want to pass it there is no need to pass so as you can see over here python function arguments this we have already covered that is in order to pass the argument now one last thing is return statement so because we have not checked any return statement over here so return is nothing but it will return some value so let's say instead of having the print statement over here we want the print statement outside the function so what we can simply do is we can simply return the expression that is a plus b so we can have the return keyword over here so it will say return A+ B so simply whatever value were being passed over here that is 10 and 20 it will return the sum that is 10 + 20 it is equal to 30 to this code and over here we should have something in order to catch that value so I'll just remove these lines of code for now and then let's say in order to catch the value I provide the sum variable so this sum variable is assigned the value that is being returned from the sum numbers over here which is equal to the sum of these two numbers and then simply we can have the print statement in order to print the sum value so some variable can be printed so let me just save this file andent I running this code now so as you can see 30 is getting printed that's because we have passed 10 and 20 over here also to make it more short what we can do is instead of storing the value inside this variable we can simply have the print statement and inside the print statement we can simply call the sum numbers function so as you can see we have the print statement inside this we are calling the sum numbers 10 and 20 so it will return 10 + 20 it is equal to 30 so let me just save this file enter I running this code now so 30 is being printed let's say I change the numbers to 20 and 50 over here so 20 + 50 should be 70 let me just run this code so 70 is getting printed and based on the requirement you can format the print function that is you can have any statements being printed over here along with the sum of the numbers so guys this is one of the examples of how you can Define the functions and use them you can have any other logic inside the functions that you want to implement based on your requirements so guys practice on your own so that on different inputs you get different output function arguments in Python Programming so guys in computer programming a function argument is a value that is accepted by a function which we have already seen in the previous video as well now the function argument with default values so in Python we can provide default values to function arguments so we use the equal operator to provide default values and this is a syntax that is DF keyword we use followed by add numbers that is the function name and then we assign some default values to the variables so guys let us check this with the help of examples so over here previously we had seen that the some numbers function that we had used in order to add two numbers it was having two parameters so over here A and B were the parameters and we were simply printing the sum of these two numbers that is A+ B inside the print function and then we were simply calling this function over here so some numbers so let's say we have two numbers as 10 and 20 so I'll just save this file and try running this code now so guys this is a very simple method that is some numbers which takes two arguments A and B it is just adding those two numbers and printing them and the function is being called over here the result is being displayed that is 30 based on the value that we pass now guys there is another important thing this function argument can also have the default values so let's say if we don't provide these values that is a and b over here so what happens in this case so let me save this file ENT I running this code now as you can see it says some numbers missing two required positional arguments that is a and b so guys there is an error that's because the program is expecting us to provide the these two values that is a and b which we have not provided while calling the function so let's say in your requirement you want to call the function but sometimes there will not be any value while calling that function so what you can do is you can provide some default values to this A and B so how do you do that you can simply provide the default values over here when you are defining this function so over here we have a it is equal to 10 and let's say B is equal to 20 so these are nothing but some default values that we have provided so let's say next time whenever there is a su numbers function that is being called without any value of a and b so these values will be used that is a is equal to 10 and B is equal to 20 and a + b sum will be returned so let me just save this file now and try running this code so as you can see 30 is being returned over here now let's say you provide one argument that is a value you have but B value you don't have so what you will do is simply you will provide a it is equal to 5050 so let's say you want A's value as 50 but you don't have B value so B value will be automatically taken from here that is B is equal to 20 we save this file and try running this code now so as you can see 70 is getting printed that's because A's value you have provided which is 50 which replaces this default value that is 10 so this time a is 50 and B was already 20 and it is not being provided over here so B's value will be considered as 20 and the sum will be displayed over here so guys this is the way that the default value vales in the arguments work now guys there is another thing that is python keyword argument in keyword arguments the arguments are assigned based on the name of the arguments so for example first name and then last name so guys we will continue with the same example over here let's say we have the arguments As A and B we will just remove these default values over here now what we will do is while printing the sum we will also print the value of a and b so over here we will have the statement that is sum of and then we have a is equal to then we will provide a value and then we have comma once again and then let's say we have double quotes and we have emphas character over here and B is equal to then we should have the B value as well and then we have the equal to operator over here and then we have a + b so guys what exactly we are doing is sum of a equal to we are printing the value of a and b is equal to we are printing the value of B and then equal = to a + b so this is nothing but we are formatting the string so it will have the statement over here that is sum of a is equal to 10 and B is equal to 20 equal to 10 + 20 which is equal to 30 so we have just formatted the string over here so that we can get the value of a and b that is being passed so what we can do is simply let's say I provide 10 and 30 over here which will be assigned to A and B over here in this case so let me just save this file and try running this code now as you can see sum of a is equal to 10 so this first parameter that is 10 was being assigned to this variable that is a and then next time we have and B is equal to 30 so this value that is 30 was assigned to this variable that is B over here and that is why B is equal to 30 and then we have equal to 40 which is the sum of both these numbers now guys let's say we want to Interchange these values we want to display the a value is 30 and B value as 10 over here so what we can do is simply we can keep this 10 and 30 in the same sequence but we can assign it by using the variable name so over here B is equal to 30 so what we are doing exactly is this variable name that is B we are using that variable name while calling that function and we are assigning that values so B value will be 10 in this case and then we say a is equal to 30 so basically what we have done is we have interchanged the values we have kept the sequence of values over here but the variable will be having different values first B will be assigned the value that is 10 over here and then a will be assigned the value as 30 in this case so let me just save this file and try running this code now so as you can see sum of a is equal to 30 so a was assigned the value as 30 and B is equal to 10 so B was assigned the value as 10 and the sum will be 40 in this case so if you don't want to follow the sequence in which it is present inside the function definition the arguments values you can provide their names over here and provide the values to the variable names so guys this is another way in order to pass the arguments now there is another thing that is python function with arbitrary arguments so sometimes we do not know in advance a number of arguments that will be passed into a function to handle this kind of situation we can use the arbitrary arguments and then this is the syntax that is we use the star character over here so let's say in this case we just have two parameters over here but let's say if we have more than two parameters and we don't know what is the number of parameters that will be present so what we can simply do is we can simply have the star character over here and then we can have the variable names over here numbers is the arguments that we are providing and then what we will do is let's say we want to provide the sum of all the numbers so sum it is equal to zero in this case and then we will go with the help of for Loop so for X in numbers so basically this is kind of a list over here that we are providing and we are going to iterate all the numbers inside the list and then we have colon and then we can have sum it is equal to sum + x and then after this we can have the print statement so we can simply put sum of all numbers colon and then we can simply have the sum variable name now guys in the same way we can call this function that is sum numbers and we can have any number of arguments now this time so basically this T Numbers will help us in order to have any number of arguments so let's say we simply provide the number one and let me save this file and and try running this code now you can see sum of all numbers it is equal to one because one was the only number that we have provided I'll simply copy and paste this line of code and let's say I provide top five numbers so 1 2 3 4 5 so this time we are having five arguments now so first time it was just one argument this time it is five arguments so basically the number of arguments is dynamic we don't know how many number of arguments will be coming over here in this function in this case we can use this star character along with the argument name so let me just save this file Ander I running this code now as you can see the first line it is saying sum of all numbers it is one the next line is sum of all numbers it is 15 so 1 + 2 is 3 + 3 is 6 + 4 is 10 and then + 5 it is 15 over here let's say we have another line of code we call the sum numbers once again we provide 10 + 20 + 100 this time so only three numbers let me just save this file and try running this code now this time the sum of all numbers it is equal to 130 so basically 10 + 20 is 30 + 100 it is equal to 130 so guys this is another way you can provide only one argument along with the star if you are not sure how many number of arguments can be passed while calling this function so recursion function in Python Programming so guys in Python we know that a function can call other functions as well it is even possible for the function to call itself and when the function call itself it's called recursive function so basically these type of construct are termed as recursive functions whenever a function calls itself from inside its body so for example the factorial of a number is the product of all the integers from one up to that number so if you see the example the factorial of 6 which is denoted as 6 and then exclamation mark it is equal to 1 * 2 * 3 * 4 * 5 * 6 which is equal to 720 and this is is the factorial of the number that is six so guys we can find the factorial of any number by using the recursive function so let us understand how recursive functions work with the help of example over here so let's say we have the factorial function in this case so factorial is the name and then let's say if we provide the variable name as X over here so what we will do is we will simply have to provide the condition over here that is if x is equal to 1 we have to return one in this case so guys always remember that whenever we are having the recursive function we need to have the end point we need to have a limit on which we need to return some basic number over here so this is the limit in this case that is when the value of x is equal to 1 that is at the lowest level the function needs to return the value which is one and then if it is not one then we can call that function once again now how do we call that function we simply use the x value that is the current x value and then we multiply that number with the factorial of x 1 so this time we provide x 1 in this case and one more thing that we can do in order to return this result is we can have the return keyword so guys we will understand this function in detail now before which we will just call this function over here that is factorial and let's say I provide the number that is six that we have already seen for which the factorial of 6 must be 720 and what we will do is since this factorial function is returning this value that is return X multiplied by this recursive function we will catch the value in the result so result it is equal to factorial of six and we will simply have the print statement saying that factorial is and then colon and then we can simply provide result variable over here so let me just save this file and try running this code guys no need to worry over here I will make you understand each and every line of code over here and how it works so just stick with me till the end of this video so as you can see factorial is 720 so this is the result so we have got the correct result over here now let us understand the working of this recursive function so what exactly is happening over here is we have defined the function that is factorial in this case now result is the variable name for which we will get the value from this factorial function that we have called so basically the control statement comes over here factorial of 6 so the control statement will go to the definition of this function so x value is six right now so what we will do is we will understand over here one step at a time so right now X it is equal to 6 in this case so is x value equal to 1 no in this case so the control flow will come over here and it will check this expression that is x * factorial of x 1 so this expression we will put over here that is 6 which is the value of x multiplied by factorial of x 1 so x value is 6 so X 1 will be equal to 5 in this case now what will happen is now factorial of five is being called over here so what is the factorial of five the control flow will go back again to this function and that is why we call it as recursive because from the body of this function we are calling the function itself now this time x value is five so is x equal to 1 no in this case so this time again this expression will be called so x value will be five in this case and multiplied by factorial of x 1 which will be 4 so again next time what will happen is 5 * factorial of 4 will be called now what is the factorial of four so again the control flow will come over here it will check whether X is equal to 1 no in this case so again this expression will be computed so this time it will be X is equal 4 * the factorial of 4 1 which is 3 right now and then again now x value is 3 so again it will be 3 multiplied by factorial of 2 in this case and then the last statement that is 2 multi by factorial of 1 in this case now when the factorial of one is being called what will happen is factorial of X which will be factorial of 1 in this case so X is equal to 1 yes in this case so it will return true and the control flow will not go over here to carry out the computation of this expression so return one will return to the factorial of one function so in this case factorial of 1 will become 1 over here now 2 * 1 is equal to 2 and this result will be returned to this function that was called so 2 * 1 is 2 so 2 will be returned over here 3 * 2 is 6 so factorial of 3 will become 6 and 6 will be returned over here 6 * 4 is 24 so factorial of 4 will have 24 as the result and then 24 * by 5 which is equal to 120 and that value will be returned to this function called that is 120 and then 120 * 6 will be 720 which is the last expression that was computed and that is what we will get over here that is the result will be 720 in this case and that is what we got 720 over here now guys similarly we have seen that the factorial of 4 is equal to 24 so this result we can get simply by calling the factorial function with the value four as the argument so let me just save this file enter I running this code so as you can see factorial is 24 similarly we can get the factorial of 3 which is equal to 6 so we can simply put three over here and then let me just save this file and try running this code so factorial is six in this case and guys that is how the recursive function works this is just one example that is in order to find the factorial we can have any kind of implementation code based on your requirements provided the requirement can be fulfilled by using the recursive functions if we see one more example let's say we want to find the factorial of the number that is 10 let me just run this code once again so it says 3628 and that is what we get as the factorial of 10 comment in the comment section below whether this result is correct or not so guys please practice on your own so that on different inputs you get different output and that is how you are going to learn more about Python Programming so guys there are certain advantages and disadvantages of recursive function as you can see recursive functions make the code look clean and elegant so we have made the code very clean and elegant over here a complex task can be broken down into simpler sub problems using recursion so we can have any number that is 100 or 200 and get the factorial of that number just by using these lines of code over here and then sequence generation is easier with recursion than using some nested iteration now what are the disadvantages sometimes the logic behind recursion is hard to follow through so basically as you have seen as I have told you that there must be some end point that you need to provide so basically this is the end point in this factorial function based on your requirements there must be some end point up to which you need to re restrict the call of the function from its body itself so that condition you need to identify based on the requirement and recursive calls are expensive they are inefficient as they take up a lot of memory and time and the recursive functions are hard to debug so guys basically these are certain disadvantages so it depends on your requirements what exactly you want to implement and accordingly you can use the recursive functions Anonymous or Lambda function in Python Programming so guys in Python an anonymous or Lambda function is a special type of function without the function name so we use the Lambda keyword instead of DF that is defined to create a Lambda function so as you can see this is the syntax previously we had used the DF keyword in order to create the normal functions but this time we are going to use the keyword that is Lambda along with the arguments which are optional over here and then followed by a colon and then we have the expression so this is one of the examples of the Lambda function over here we have the Lambda keyword followed by the colon over here and then we have the expression that is we are printing the hello world string and this entire function that is the anonymous function which is not having any name over here is being assigned to a variable that is greed and then this GRE needs to be called as you can see call the Lambda over here along with the open and close parenthesis so when we have this line of code over here this Lambda function will be called and hello world will be printed on the screen so guys let us check this with the help of example example over here so what we will do is simply we will have the Lambda keyword first of all and Then followed by a colon and then let's say we want to print the name of this YouTube channel that is programming for beginners which you should definitely subscribe if you have not done so so we have programming for beginners over here so this is a Lambda function or the anonymous function without having any name and then let's say we assign it to a variable and we can simply provide the variable name as Str Str and then we have the equal to operator over here now what we have to do is simply we need to call this s Str variable so over here on the new line we will have S Str followed by open and close parenthesis and this is the way that we call the anonymous function so let me just save this file and try running this code now so as you can see programming for beginners is getting printed over here and this is one of the simple examples as far as Anonymous function or Lambda function is concerned in Python Programming now guys very important thing what if you have certain arguments which you want to print so this is kind of a static function which is having a fixed string that you want to print but let's say you want to provide some string over here while calling the function so in case let's say we have this argument as this is a string that we want to print so this Str Str that is the Lambda function is being called but this value needs to be caught by this Lambda function over here so what we can simply do is we can take this argument after this Lambda keyword as we have seen in this syntax after the Lambda keyword we have the list of arguments that we can take and use them in the form of Expressions over here so what we will do is let's say I provide Lambda and Then followed by X so this x variable will have this value whatever we pass while we are calling this Str Str function that is the anonymous function so this x we can use in our expression inside this Lambda function so let's say I provide a label over here string past and then for followed by colon and then I have comma and Then followed by this x variable which is being passed so this is a string it is one of the arguments that we are passing to the Lambda expression and the X variable will be assigned this value and it will be printed by using this print statement so let me just save this file and try running this code now so as you can see string passed this label is getting printed and then the value of x which was passed from this calling of the Lambda function over here that is this is a string and the same thing is getting printed over here so guys this is the way that we can pass arguments or parameters to our Lambda or Anonymous functions over here now guys there is another variation can we have the multiple arguments let's say we have two or more numbers for which we need to find the sum of those numbers can we find the sum of those numbers by using the Lambda function so let us quickly check this with the help of examples over here so what we will do is again we will Define the Lambda function over here so we have Lambda keyword and this time we will take two numbers so let's say the two numbers are stored in these variables that is X and Y and Then followed by a colon and then what we can do is simply we can print the sum of these two numbers so we put x + y over here so this is the expression print x + y and over here in the Lambda we have defined the two variables over here now what we can do is we can assign it to another variable so let's say we have addore numbers as the variable name so we have addcore numbers and then Lambda keyword followed by these two two variables that is X and Y and then print x + y over here so what we can simply do is we can call this add numbers and provide the two numbers that we want to add so we just use this add numbers over here and then let's say the two numbers that we provide is 10 and 20 so we are expecting the sum that is 10 + 20 to be displayed by using this expression over here so let me just save this file enter I running this code now so as you can see we are getting some syntax error Lambda expression parameters cannot not be parenthesized so what we can do is we can simply remove these parenthesis that we have provided so when we are providing multiple arguments in the Lambda function we need not have to provide the parenthesis we can separate them using the commas over here so let me just save this file and try running this code so as you can see 30 is getting displayed we can format the string and have some label as well so what we can do is we have the double codes over here and we say sum of numbers and then colon and then comma x + y so let me just save this file and try running this code now as you can see sum of numbers that is 30 is getting displayed another way that we can print the sum of these numbers is just by returning the sum of these numbers and printing them over here outside the Lambda function so while returning any of the Expressions we need not have to have the return keyword we can simply have the expression over here so as you can see the two numbers were passed that is 10 and 20 it will be taken by this Lambda function in the form of X and Y X + Y will be computed and then it will be returned to this function which was called by using the add numbers now we can simply print this so we can have the print function over here and inside the print function we call the add numbers with these two numbers let's say this time we provide some other numbers that is 100 and let's say 150 so the sum should be 100 + 150 which should be 250 over here let me just save this file and try running this code now so as you can see 250 is getting printed and again we can have some labels over here in order to Define exactly what this function is doing so guys practice on your own so that on different inputs you get different output this Lambda function becomes very important which is also called Anonymous function when you don't want to define the function explicitly and you have very less number of operations to be carried out by using this Anonymous function so variable scope in Python Programming so guys in Python we can declare variables in three different Scopes so these are local scope Global scope and a nonlocal scope so we will check all these Scopes one by one with the help of exam examples so first of all what are local variables so when we declare the variables inside a function these variables will have a local scope that is within the function only we cannot access them outside the function so let us check this with the help of examples now over here so let's say we have a function over here by using the DF keyword we Define the function that is ADD and then after the open and close parenthesis we have a colon over here and let's say we have two variables that is a it is equal to 10 and then we have B it is equal to 20 and then we just want to print the sum of these two numbers so we will simply do print of a + b over here and then we can simply call this function by using the function name that is ADD followed by open and close parenthesis so let me just save this file andent try running this code now so as you can see 30 that is a sum of 10 and 20 is getting displayed now guys let us say I want to access these variables that is a and b which is defined in this function that is ADD so can we do that from outside this function that we have defined so let us check that so let us say I want to print the value of a over here so when we provide print followed by the variable name that is a so let me just save this file and try running this code to see what happens so as you can see we are getting some error name error name a is not defined so guys because we have defined the variables that is a and b inside the function that is ADD we can only access them within this function and not outside of this function and that is what we call it as a local scope now if the same thing that is print a if we just remove from here and we print over here that is within the function and then we need to call that function so that the control flow goes inside that function and print both these statements now this time we are accessing the value of a from within that function so we should be able to access that variable so let me just save this file and try running this code now so as you can see we are not getting any error first of all we are printing the value of a that is 10 as you can see 10 is getting displayed and then print a plus b so 30 is getting displayed which is the sum of those two variables so guys this is the local scope which means the variable that is defined within the function can only be accessed from that function itself now guys let us move to another scope as you can see we have Global variables as well so a variable declared outside of the function or in a global scope is known as a global variable so this means that a Global variable can be accessed inside or outside of a function so what this means so basically let's say when we have this a is equal to 10 outside of this function so I'll just remove this line of code over here and before this function is defined we assign the variable that is a so when we use a particular variable outside of this function this variable is called as a global variable so this variable can be used from within the function also and outside of the function also so we have the same function that is ADD over here and then B value it is equal to 20 so we have the print and then what I will do is I will say inside function so that we can identify that this statement is from within the function itself so inside function and then we will print the value of a and then print a plus b that is the sum of these two numbers will be displayed over here and then what I will do is I will again copy this line of code and paste this over here and then I'll say outside function function so we have outside function over here so first of all this line of code that is outside function and then the value of a will get printed and then add will be called and then what will happen is inside function and value of a will be printed and then a plus b will get printed over here so let me just save this file and try running this code now as you can see outside function the value is 10 since we have provided the global variable over here and from within that function itself we can access the value of a again and that is what we are getting inside function it is equal to 10 and then 30 is the sum of these two numbers that is A+ B so guys this is the way that we can use the global variables so in case you want to use the same variable in the multiple functions in the same program you can Define that variable as a global variable which is also called as a global scope now guys moving to another scope over here that is the nonlocal variables so nonlocal variables are used in nested functions whose local scope is not defined find which means that the variable can be neither in the local nor the global scope so guys let us check this with the help of examples now over here so in this case in order to use the nonlocal scope we will have to use the nested function so I'll just remove all these lines of code over here and what we will do is let's say inside this function that is ADD which is the outer function I'll just name it as the outer over here so that it becomes little easy in order to identify the functions so let's say we have the variable a for which the value is 10 over here now let's say we have a nested function which means a function that is present inside another function is called a nested function and we'll name this function as the inner so that we can identify that this is the inner function now what we can do is we can have the variable once again that is a over here but this time we will be using the nonlocal keyword so as you can see there is a keyword called nonlocal which we can use in order to assign a value to the variable and this also identifies that this variable is a nonlocal variable now let's say we assign some other value over here to a so let's say a it is equal to 20 in this case and what we will do is let's say we want to print this value of a now how we will print this is we will say inner and Then followed by colon and then we will say a so this means that we are printing the value of a from the inner function by using this label and then we will come out of this function and what we will do is we will be in the outer function right now so currently we are in the outer function and we will simp call this inner function so we can simply call the inner function over here and then after that let's say we want to print this value of a once again so I'll just copy this line and then paste this over here over here I'll just put the label as outer so guys this is the program that we have return we just have the outer function over here we have the variable that is 10 and then we have the inner function inside this we have Define the nonlocal variable that is a and then a is being assigned the value of 20 again we are printing the value of a over here by using the inner label and then we are calling this inner function from the outer function itself and then we are printing the value of a by using the outer label over here now the last thing that we have to do is we have to call this outer function because we have not call this yet so over here we will say outer and then we have this open and close parenthesis so let me just save this file enter running this code now so as you can see inner is being assigned the value as 20 and that is what we had done over here so when inner was called over here the nonlocal variable that is a it makes the value as 20 and then this inner it is equal to 20 is getting displayed now guys what is happening is when we are using this nonlocal keyword this means that we are telling python that this variable needs to be seen as a nonlocal variable which means it is equal to this variable as well so when we are doing a is equal to 20 so this value of a will become 20 and this value of a will also become 20 over here and that is why for this inner we are getting 20 and for outer also if you see on the second line the value is 20 right now so this assignment of a is equal to 20 is being treated as a nonlocal assignment and the values of the variable a wherever it is being assigned will be changed to the value that is 20 in this case so guys this is very important concept whenever we are using the nonlocal variable what if we simply have the local variable and we don't Define this in this way so let's say I'll just comment out this line of code over here that is nonlocal a now this time A's value that is 20 right now is being treated as a local variable inside the inner function and outside the inner function that is in the outer function the a value is currently 10 over here so let us check what will be the output I'll just save this file and try running this code now so as you can see inner it is equal to 20 and right now outer it becomes 10 that's because we have not used the nonlocal keyword over here within within the nested function that is the inner function that we had defined so guys this is very important concept if you want to change the values of all the variable that is in the outer function as well as in the inner function we can use the nonlocal keyword while assigning the value to the variable and then all the values for that variable will be updated so guys this is the functionality of the nonlocal variable and I hope you have understood the functionalities of the different variable Scopes in Python that is local variables Global variables and nonlocal variables Global keyword in Python Programming so guys in Python the global keyword allows us to modify the variable outside of the current scope so it is used to create a global variable and make changes to the variable in a local context so guys let us check this with the help of example now over here so let's say we have a global variable that is a and the value is equal to 10 so let's say we have a function over here and the function name is ADD so what we will do is so let's say we have a variable B for which the value is equal to 20 and we want to print the sum of these two numbers that is a and b a is the global variable and B is the local variable for this function that is ADD so we can simply print a + b over here and then what we can do is we can simply call this function that is ADD followed by open and close parenthesis so let me just save this file and try running this code now so as you can see 30 is getting displayed we are using the global variable we are using the local variable and we are adding both the variables over here now guys let us say I want to change the value of a to some other value so what I will do is let's say I come inside this function and I do a it is equal to 30 so what we have done over here is This Global variable that is a for which the value was 10 I have just updated the value to 30 over here and B value I'll keep it same that is 20 and I want to print the sum of these two numbers I have called this function that is ADD so let me just save this file and try running this code now so as you can see 50 is getting displayed so we have assigned some other value to a that is 30 over here now guys let us say what we do is I'll just increment the value of a by 10 so over here a it is equal to a + 10 over here so this expression we are using so what happens in this case let me just save this file and try running this code now so as you can see we are getting some error over here Unbound local error cannot access local variable a where it is not associated with a value so basically what is happening over here is local preference is given first so over here a is equal to a + 10 it is trying to find out the expression that is a + 10 but it doesn't have any local instance of the variable a and that is why we are getting this error that cannot access local variable a where it is not associated with a value so what we can do in this case is we can tell the python interpreter that we already have defined the variable a for which the value is 10 already and that 10 value is supposed to be taken when we are Computing this expression that is a + 10 so how do we do that before this line of code over here we use the global keyword So This Global keyword followed by the variable a so this tells the python interpretor that the variable a needs to be treated as a global variable and this time a + 10 in this case the A's value will be taken as 10 and 10 + 10 which is 20 will be assigned to this a variable so let let me just save this file now and try running this code so as you can see we are not getting any error now and we are getting the sum of two numbers that is 40 over here how because the a value is 10 and 10 + 10 is equal to 20 so 20 is being assigned to this variable that is A and B's value is also 20 so 20 + 20 will become 40 over here which is getting printed so guys this is the way that we can use the global keyword in order to tell the python interpretor that this variable needs to be treated as a global variable for which we have already defined it over here as the global scope now guys there is another variation over here that is global keyword in nested functions so we already have a example over here so I'll just copy this example and paste this in our VSS code editor so we'll copy this and paste this over here so what exactly we are doing over here is we are having the outer function for which the number is equal to 20 and then we have a nested function that is the inner function over here and we are saying that a global keyword is there for which the variable is num and then num it is equal = to 25 now this means that we are declaring the num variable as a global variable over here for which the value will be 25 right now so what is happening is print before calling in a function this num value will get printed but as I've told you the local preference is first so what should happen so we will check which value will get printed over here before calling the inner function and then the inner function will be called during which the global num for which num is equal to 25 will get assigned over here and then print after calling inner function and then we will print the num value once again and then after this we are calling the outer function so that all these print statements can get executed and then after that outside both function we will again print the value of this numb variable so let me just save this file and try running this code now so as you can see before calling in a function so where we are over here that is before calling in a function the value of num it is equal to 20 in this case how so basically this num value that is 20 it was assigned over here in the outer function and then the control statement went over here before going inside the inner function because it was not called yet so before calling inner function num value is 20 that is what we had assigned over here now inner function was called and then we have after calling in a function the value of this variable was printed once again so after calling in a function it is again 20 why so because guys over here we have provided the global keyword so this means that we are creating another variable for which the scope is global and not local in this case and then the num variable over here for which the value is 25 this num variable is created with the global scope and not the local scope so basically right now as far as local scope is concerned within this outer function it is still 20 over here and that is what we are getting the value of num variable s 20 even after calling the inner function and then what happens is outside the outer function when we come once again so outside both the function now the num value will be what 25 that's because we had defined a global variable over here for which the num value was taken as 25 and that is what we are getting outside both function it is equal to 25 so guys it is little bit complex to understand for the very first time but with practice you will understand what are the different concepts as far as this Global keyword is concerned and where to use them modules in Python Programming so guys as our program grows bigger it may contain many lines of code so instead of putting everything in a single file as we have done so far we can use modules to separate codes in separate files as per their functionality so basically we can separate the codes and we can create separate files based on the functionality of the file that we are going to create so this will make our code organized and easier to maintain now a module is a file that contains code to perform a specific task so like let's say if we want to add two numbers we can have a function inside another file and we can call it as a module so a module may contain variables functions classes and many other things so as you can see over here for example there's a python module that is addition what we have done is we have defined a function over here so we have the add that is the function name which takes two parameters A and B so a plus b which is the sum of these two variables will be stored in the result variable and this result variable is returned with the help of this return statement so guys this is one of the functions which can be present inside one module which is created as a separate file so guys let us check this with the help of example how we can create the module so basically when we go over here in the Explorer as we have seen previously we were using python unor code file in order to create all our programs but what if we want to create another file and have a function inside that file so we can come over here we can create a new file and let's say we want to name it as addition and Then followed by dot py which is the extension of the Python programming language so as you can see we have created this addition. py which is another python file over here so what we will do is let's say we have a function over here so Define add which takes two parameters that is a and b and then after colon what we will do is we will have the result variable which will have the addition of these two numbers that is a and b which will be passed over here and then we are going to return this result so so return result so basically this function is going to take two values that is in the form of a and b and return the sum of these two values now this code is being written in another file that is addition. py so how do we call it from the main file that is python code over here so what I will do is first of all we are going to save this file over here and switch back to our main file over here that is Python code. py and what I will do is over here we are going to import this module so this python file that we have created right now this is kind of a module so how do we import that module we are going to use the import keyword followed by the name of that module so the name of the module is the file name itself so we are going to provide addition so as you can see vs code is providing us this addition value over here which is part of the autocomplete feature of this editor so we are going to select this now what we can do is we can call this add function since we have already imported this module over here so simply what we will have to do is we are going to use this module name that is addition followed by Dot and then as you can see we have this add method and there will be many other methods that will be present which will come by default whenever we are going to create new python files in this way so basically we are interested in using this add method so when we select this and then we have to provide the two values so what we will do is we will say 10 comma 20 now guys what is happening is this add function it is going to take two values that we have already passed and it is going to return the result so we are supposed to take that result in another variable over here so let's say we provide sum as the variable name which is going to take the return from this add function over here which will be the sum of these two numbers and then we can simply print the value of the sum variable so over here we will say sum of numbers followed by colon and then comma we have the sum variable name so guys let me just save this file now and try running this code so as you can see sum of numbers it is 30 right now so basically what we have done is we have created a module which is the user defined module over here and then we have created a new function inside that module which is going to take two values in the form of a and b and it is going to return the sum of these two values and then what we have done is we have imported that module that is addition and called the function that is the add function which is going to take two values as we had defined in the addition module and the sum will be stored in this sum variable over here and we have printed that sum variable so this is the classic example of a user defined module over here guys similarly there are multiple modules which are built in inside the Python programming language so as you can see there are certain important notes over here python has tons of standard modules so for now we have just seen the user defined module right now we are also going to take the example of a standard module now the standard modules can be imported the same way as we import our user defined modules so let us take the example of a standard module in this case we we will take the example with the math Library module so what we will do is we will remove these lines of code over here and then we can simply import the math Library so as you can see over here once we put the M character as you can see these all are modules that are built in inside the Python programming language we are interested in this math Library over here so when we import math and then we can use the math Library over here and then followed by dot we can see many other functions and variables that are already present the thing that we are interested in is the pi value so as you can see we can get the pi value which is approximately equal to 3.14 and the same thing we can get from the math library and by using the pi variable over here so what we can do is let's say we provide the variable name as value and math. Pi is the value that we want to store in this value variable and we can simply provide the print statement and then we can say pi value is followed by colon and then we can simply put the value that is the variable name so guys what is exactly happening over here is we are importing the math Library which is the builtin Library over here which is a builtin module inside the Python programming language and then inside that we have certain variables and functions as well one of the variables is pi which is having a value and that value we are getting by using this math. Pi statement and then we are assigning it to this user defined variable that is value and the same thing we are printing over here with this particular string that is pi value is followed by colon and then the value variable over here let me just save this file and try running this code now so as you can see pi value is we can see this 3.141592 and so on it is a huge number after the decimal point so guys this is another way in order to use the standard modules that are already present in the Python programming language next we are going to see how do we use the python import with renaming so far we have imported the libraries and used the names of those libraries or modules along with the function name or the variable name but what we can do is we can rename these libraries while importing them so after this import math we have to use the S keyword followed by m so guys this is nothing but it is a shorthand method that we can use in order to name this library right now so instead of typing this math Library over here we can simply use the M character over here because that is what we have defined that is import math as M so we can use M everywhere wherever we are going to use the math so let me just save this file now and try running this code we will see the same output that is pi value is 3.1415 and so on so guys the idea over here is you need not have to type the entire name of the module in this case whenever you are going to refer to a particular method or a function or a variable inside the module but you can use that simple one character or the two characters that you have used while importing the module now guys there is another way python from and and then import statement so over here what we can do is let's say if we only want to use the pi variable in this case so exactly what we are doing is we are importing all the methods that is the functions as well as the variables but let's say if we only want the pi variable so what we can simply do is we can use the from and then we can use the module name that is math and then we can simply import the variable so import and pi over here so as you can see we can use this statement as well that is from followed by the module name and then import and then what exactly we want to import we can just mention that and then after this we can simply use the pi variable name in order to assign it to another variable name or over here we can simply put pi as well so we can simply put Pi in the print statement also so let me just save this file and try running this code as you can see we are getting the same output that is pi value is so and so so basically in order to get the specific variable or the method we can use this statement that is by using the from followed by the module name and then we have the import keyword and then the name of that specific variable or the method now guys one last thing as far as python modules are concerned there is a builin function that is D which is directory it is a builtin function in Python in order to get all the variables and the function names inside the module so let's say I provide import math over here so we have import math and then what we can do is we can simply get the directory in this case we simply have to provide the DI function and Then followed by open and close parenthesis and let's say we provide the math Library over here inside the DI function so let me just save this file and running this code now so guys nothing is happening over here that's because we have not provided the print statement so probably we'll provide the print statement and enclose the statement inside the print function let me just save this file and try running this code now as you can see we are getting the list of all the methods and the variables that are present inside the math Library so guys this is a very huge list over here as you can see we have A1 then a12 A1 Ed and then so on we are getting all the method names we are also getting the variables as you can see we are having pi over here and so on guys similarly what we can do is let's say I import this Edition module which is a userdefined module that we have already seen so I import this Edition module and inside of this math I provide this addition module name so let me save this file so one of the methods that is present is add over here so this should be listed now so I'll just run this code now over here so as you can see add method is getting displayed apart from that there are many other builtin variable names that are present which gets generated whenever we create new modules over here so guys this di function can be very useful in order to check which are the different variables and functions are present inside that module that we have already defined or if it is a builtin module that is provided by the Python programming language packages in pyth Python Programming so guys a package is a container that contains various functions to perform specific task so for example let's say the math package that we had seen previously it includes the square root function to perform the square root of a number and this math package we had imported previously as well so while working on big projects we have to deal with large amount of code and writing everything together in the same file will make our code look messy and we also want our code to be readable so we cannot refer that so instead we can separate our code into multiple files by keeping the related code together inside the packages so let us check what a package model structure in Python Programming looks like so over here as you can see we have a package that is game at the outside and in order to make the python interpreter understand that this is a package we need to have a file with this name that is underscore underscore followed by in it and then 2 * underscore followed by do PI so this is the file that that will tell the python interpreter to treat this game as one of the packages and then inside that we can have more sub packages so as you can see we have a sub package called sound inside which there are different sounds that can be present we have another sub package that is image and then we have another sub package that is level and in all these sub packages we have this underscore underscore in it followed by two * underscore and then dot Pi these files must be present in order to make the python interpreter understand that these are the sub packages inside the main package that is game so guys let us check this with the help of examples how we can create the packages and how we can use them in our projects so basically this is our main code that is python code over here what I will do is I will come out of this and I'll create a new folder so let's say I create the game folder over here and inside this folder what we have to do is we will be creating these sub packages over here but before creating the sub packages let us create this file that is the init file which will tell the pyth python interpreter that this is a package so we will come over here we say new file and then 2 * underscore we have n it and then underscore dop so this is one of the files over here which will tell the python interpretor that this is a package and we will keep the file as blank over here for now and we will come to this game and then again we will create another folder this time it is going to be the sound package so we have sound package over here and inside this we will again create a file that is the in file so we have init file over here so we will keep this init file as it is for now so we have created game and then inside that we have a sub package that is sound let us create a file inside the sound package so what we will do is inside this we will create a new file over here and then we will say load. py and inside this file let's say we Define the function that is load and then we have a colon over here so what we will do is we will simply have the print state statement and we will say inside sound package and load function so guys this will tell us that we are inside the sound package and inside the load function over here now guys let us say we want to create another sub package that is level and we want to create the start python file over here so what we will have to do is we again come to this game and then we create another folder and then we have this level subpackage and inside this package again we will create the init file so we have this init do py over here we will keep this file blank for now and then what we will do is over here inside the level we will create another new file and we will say start. py so this is another python file and what we can do is we can Define the function that is start followed by open and close parenthesis and then we can simply have the print function so guys what I'm going to do is I'm just going to copy and paste this print statement from here so we print and paste this over here and I'll say inside level package and start function guys we will just rename this function name as start followed by underscore function so that we come to know that this is the function that we are calling same thing we are going to do with the load as well so underscore function over here so guys pretty much we have created some good packages over here the outer package is the game and then we have two packages that is level and sound each of those sub packages are having the init file over here and then they are having their own functions that is start and load. py so now we will come out of this package that is outside the game package and we already have our main file that is python undor code so what we have to do is let's say we want to call those functions that is start. py and over here that is low. py so what we have to do is first of all we need to import the packages so while importing what we can do is import followed by game as as you can see this game is coming now this is the autocomplete feature of the VSS code which is very good so we can use this game followed by dot as you can see both the sub packages that we had created are also being suggested over here so what we can do is let's say we provide level over here followed by Dot and then as you can see start that is the python file name that is start. py is getting suggested so we will use this so this is the way that we can import one of the files inside the existing packages so over here we have created the user defined packages and the user defined files which are having the user defined functions as well and those functions we are going to call now we can simply provide the print function and Then followed by again we will use the package name followed by Dot and then the subpackage name that is level followed by Dot and then the start that is the name of the Python file followed by dot as you can see we are getting the start function as the suggestion so we will use this and then after the start function we have the open and close parenthesis since it is the function over here so let me just save this file and try running this code to see what will be the output as you can see inside level package and start function so this is a string that we had provided in our start function over here that is inside level package and start function let's say we want to call this load function over here so what we can do is again we will have the print statement and Then followed by in the same way we are going to call the load function so game followed by we need to get the s sound sub package so over here we are not getting the sound subpackage that's because we have not imported the sound yet so again we are going to have another import and then we have G followed by dot this time we are going to import the sound sub package followed by Dot and then we have load so now this time once we provide dot as you can see sound is getting Auto suggested over here so sound followed by dot we have load and then load function over here open and close parenthesis let me just save this file and try running this code now as you can see inside level package and start function and again inside sound package and load function is getting printed because that is the content that we had provided over here so guys this is the way that we can import different packages and the files inside those packages and call those functions as well now guys previously I have shown you what is the shorthand method so instead of typing everything that is packages and sub packages over here we can simply use the Shand method over here while importing the library so after this we have the space character followed by the as keyword and then let's say I provide the name as the level and over here I provide the name as sound so what we can do is simply we can use the level and sound over here so let's say I provide level followed by Dot and then we have start function and over here once again this entire thing can be replaced and we can provide sound because that is the name that we have given to this package and the library hierarchy that we have imported so let me just save this file and try running this code pretty much the output will be same that is those two strings are getting printed over here once again as you can see but this is the shorthand method that we can use so guys this is the way that you can organize your code into different packages and write different methods as well inside those packages and the python files hopefully you have got enough knowledge about the packages in order to create your next big project as far as Python programming language is concerned numbers type conversion and Mathematics in Python programming so guys in Python the number data types are used to store the numeric values so python supports integers floating Point numbers and complex numbers which we are going to see with the help of examples as well so they are defined as int float and complex classes in Python so as you can see this int is a data type which holds the signed integers of nonlimited length and then we have float as well which holds the floating decimal points and its accurate up to 15 decimal places so in case you want the 15 decimal places for a number you can use the float class in the Python Programming and also we have the complex data type which holds the complex numbers so guys let us check this with the help of examples now over here so let's say I want to print the simple integer so over here I will simply say num one it is equal to 10 and then inside the print function we can simply provide num one so let me just save this file and try running this code now so as you can see 10 is getting displayed similar we can have the float and complex data type as well so I'll just copy paste these lines of code over here I'll put num two it is equal to 5.76 and then over here we will print num 2 as the variable name and then let's say we have num 3 in which case let's say we have the complex number that is 3 + 2 J so this is the format in which we provide the complex number in Python and then we provide the num3 as the variable name over here so let me just save this file and try running this code now so as you can see we are getting the integer over here then we have 5.76 and then we have 3 + 2 J all these numbers are getting printed now in order to see what is the data type of each and every number variable that we have provided we can simply provide the type function over here and enclose the variable name so as you can see this type function will help us in order to find the data type of the variable so num one is the variable and we have enclosed it within the type function and and then similarly we will say type and then num two will be enclosed over here and then let's say we want to find the type of this that is num three variable as well so we provide the type function so instead of printing the values we will be printing the data types of all these variables now so let me just save this file and try running this code now so as you can see in the sequence we are getting all the data types the first number that is num one it is of integer data type since we have stored the integer value the next we have the float that's because we have stored the float value and then we have the complex data type so in this way we can easily use the type function in order to find the data type of any variable in Python Programming now guys over here let us understand the number system so basically the numbers that we have seen so far are of the decimal that is base 10 number system but in computer programming we need to work with binary that is base 2 then we also have hexadecimal that is base 16 and octal that is base 8 number system systs as well so how do we work with these number systems can we represent them in the Python Programming yes we can so as you can see the binary numbers can be represented by using the Zer B prefix the b letter can be lowercase or uppercase character similarly we have the octal that is the base 8 number so we can have the prefix that is 0 and O and Then followed by hexadecimal which is having the prefix that is 0x so guys let us check this with the help of examples now over here let's say we want to have a number which is of of a binary data type so let's say we have num one and then let's say we want to represent the number eight with the help of its binary representation so we have 1,000 which is the binary representation but this is a simple base 10 number that we have provided in order to make this as a binary number we have to provide the prefix that is 0 B so as you can see 0 B is the prefix and then next time when we print this number so over here we can simply print this number so let me just save this file enter running this code now so as you can see we are getting eight instead of 1,000 so 1,000 is the binary representation of the number eight and when we provide the z b which means it tells the python interpreter to treat this as the binary representation and print this number that is num one in the base 10 format over here similarly we can have the octal numbers and the hexadecimal numbers as well so let's say in the octal numbers what we do is instead of 0 B we provide 0 o and then let's say we just provide 10 as the number over here let me just save this file and try running this code now so octal number that is 10 it is being represented as the number eight in the decimal format and that is what we are getting over here what will be the octal number that is 15 in this case so let me just save this file and try running this code now as you can see 13 we are getting which is of the decimal format similarly let's say we want to represent the hexad decimal number so let us see what will be the Bas stand number for this hexadecimal number that is 0x15 so let me just save this file and try running this code so as you can see 21 is the decimal number now let's say we want to print 15 as the decimal number but we want to represent it as the hexadecimal number so we have something called as F over here the numbers it is going from 0 to 9 and then a to F characters as far as hexadecimal representations are concerned so let me just save this file and try running this code now so as you can see 15 is getting printed over here so if you are familiar with the number systems then you must be knowing about what are the different values when we say hexadecimal octal and binary numbers over here and if you're not familiar then no need to worry about it it is just the formats in which the numbers are being stored and are being represented now very important topic the type conversion in Python so basically in Programming type conversion is the process of converting one type of number into another so in some cases we might want the float number to be converted to the integer number or the integer number to be converted to a complex number and so on based on the requirements so operations like addition subtraction convert integers to float implicitly so it is very important to note that whenever you are going from the integer to the float number it will be done automatically that's because float is taking extra memory compared to the integers so whenever you are going from a lower memory data type to the higher memory data type it will be done automatically but the same is not applicable when you go from a higher data type to the lower data type that's because there is some kind of a loss of data in that case so let us see how the integer gets automatically converted to the float value as you can see over here we have the print statement which is taking one operant that is the integer on the left hand side and a float number on the right hand side so let me just copy this line of code and we will print this over here so let me just save this file enter I running this code so what exactly is happening over here is this is a float number that is 2.0 and this is the integer number but an integer and a float number cannot be added so basic basically implicitly this integer is being converted to 1.0 behind the scenes and then that 1.0 is being added to 2.0 and after that we get the result as 3.0 similarly let's say if we have 2.45 over here so the result should be 3.45 in this case after this integer is being converted to the float number so let me just save this file and try running this code now as you can see 3.45 is getting displayed and this is how the implicit it type conversion happens in Python Programming now what is the explicit type conversion so we can also use builtin functions like integer that is as you can see this is the int function name followed by the open and close parenthesis that will help us to convert any complex number or the float number to the integer it can also help us in order to convert the string to the integer as well we also have the float and then we also have the complex function to convert between types explicitly so let's say we only only want the integer format to be displayed over here that is the sum should be in the integer format so what we will do is for this 2.45 we have to explicitly convert this to the integer the left hand side is already integer we want to convert the right hand side to the integer so before this number we have to provide the int function name and then the number needs to be enclosed within the open and close parenthesis so this is the way that we can explicitly convert a data type to another data type so two 2.45 that is the float number will get converted to the integer number over here so in this case there will be a loss of data the 45 will be removed and only two will be considered over here so 2 + 1 the three should be the sum of this addition operation so let me just save this file and try running this code now so as you can see three is getting displayed so since there is a loss of data over here since we are going from a higher memory data type to the lower memory data type that is why we are required to Prov the explicit data conversion functions guys similarly you can convert the string data type as well so let's say we have string it is equal to 12 and what we want to do is let's say I want to add 10 to this particular string so string is represented in this format that is it needs to be enclosed between the double coaches or the single coach over here so what I want to do is let's say I want to add 10 to this particular string so I just say 10 plus Str Str over here so what we are doing exactly is this is the integer and this is a string data type we we are trying to add both these things over here so let me just save this file and try running this code so it says type error unsupported operant that is Type S for plus integer and string so we cannot add an integer with a string over here so we need to convert this string to the integer so similarly we can use the int function that we have seen just now and enclose this string variable inside the open and close parenthesis and that is how the string will get converted to the integer after which we can add it to other integers as well so let me just save this file now and try running this code so as you can see 22 is the result 10 + 12 which is 22 and that is what we are getting in the form of integer so in this way you can convert the data types to another data types as well by using such kind of functions now let us talk about python mathematics so python offers the math module to carry out different mathematics like trigonometry logarithms probability and statistics Etc so for example I have certain lines of code over here what I will do is I'll simply copy and paste these lines of code since I'm a little bit lazy in order to type the entire code so basically this is very important we use the import keyword which we have already seen previously in order to import a particular module in Python programming language and then math is the name of the module now by using this module that is a library we can use the various variables and the functions that are present inside this math module so we have Pi variable we have the cost that belongs to the trigonometry functions then we have exponent as well log 10 sin Edge and we also have the factorial function for which we have already return returned the code in the previous video so there is a builtin function in order to find the factorial of a number over here as well so let me just save this file and running this code now so as you can see we are getting all the results over here first of all we are getting the pi value which is 3.14 and then cost of math Pi it is giving us Min 1 and then 22,26 which is the exponent of 10 and then log 10 it is equal to 3. 0 then we are getting sin edge of 1 it is equal to 1.17 and factorial of 6 we are getting 720 can you guess what is the factorial of the number four so try to find out what is the factorial of four by using the Python programming language on your own as a homework for you and comment in the comment section below what will be the answer of the factorial 4 random module in Python Programming so guys python offers the random module to Generate random numbers or to pick a random item from an iterator so we are going to check this with the help of examples now over here so first of all we are supposed to import the random module in this way and then as you can see we are printing a random range over here we are using the random module followed by the dot operator and then we are using the Rand range function in order to find the random range over here so let us move to the vs code over here in order to check the examples so first of all we will be importing the random module so we have import followed by random over here next let's say I want to print the random range so what we will do is we will have the print function and inside that we will be using the random module that we have just imported followed by Dot and as you can see vs code is suggesting us many other variables and the method names as well that we can use so we are going to say random range over here and the range it should be between 10 and 20 so we provide 10 comma 20 s the range so let me just save this file now and try running this code so as you you can see we are getting 12 over here which is the part of this random range that is 10 and 20 let's say we want the number to be between 100 and 200 over here so let me save this file and try running this code now after making changes as you can see we are getting the 178 similarly let's say if you want to throw the dice and only numbers that are present on the dice is between 1 to six so you can use this random range function inside the random module and provide 1 comma 6s the number in order to get the number so as as you can see we are getting four over here next time when we run this and then we are getting two over here so you can use this function in order to develop your next game as far as throwing a dice is concerned now similarly we can also have the list as you can see we have the list one and then we have five characters over here let's say out of these characters we want to select one of the characters so you can use the choice function inside the random module so let us check this with the help of example now over here so let's say we have the list of the programming languages so we name it as the list one as the variable name and then what are the programming languages so one is Python and then let's say we have Java as another programming language then let's say we have C++ and then let's say we have Swift as another programming language so these are certain programming languages now let's say out of all these four values we want to select one of the values randomly so what we can do is we can have the print function and then we can use this random module name followed by Dot and then we have the choice function name and inside this function we have to provide the list variable so we provide list one over here so basically we are passing this list one to this Choice function and asking the choice function to select one of the values from this list of values so let me just save this file and try running this code now so as you can see we are getting the Swift value as the random value if we run this code once again we will get some different value so as you can see we are getting Java this time then we run again we are getting python this time and then if we run again we are again getting Java so every time we will get a different value whenever we are using this particular function now let's say we want to print this list so what we will do is I'll just remove this part of the print statement and I'll simply provide a list one that is the variable name for that list let me just save this file enter I running this code now so as you can see we are getting this list of values now before this what we can do is we are saying original list over here as the label so we say original list now exactly what we want to do is we want to shuffle this list let's say this sequence of data that we have inside the list we want to shuffle it so what we can do is simply we can use the random module name over here followed by Dot and it also has something called as Shuffle function so this will help us in order to shuffle all the values of this list that we provide so Shuffle followed by inside the open and close parenthesis we provide the list one variable name and then after that what we can do is we can simply print this list content once again and then we can simply put shuffled list over here instead of original list so before shuffling we are printing the original list over here which will print the values in this sequence and then after shuffling it will print the shuffled list over here where the values will be shuffled in this case so let me just save this file and try running this code now as you can see original list we are getting python Java C++ and Swift and then shuffled list it is Java Swift C++ and then python so we have just shuffled the list the values were completely shuffled inside the list and were printed on the screen now guys let's say very randomly you want to generate some kind of element so what you can do is simply have the print statement over here and simply use the random module in this case so I'll just remove this part of this line and then we can have the random followed by dot we have something called as random function over here this line of code will generate any element over here so let me just save this file and try running this code so as you can see we are getting a float number 0.104 and so on and then let me just run this code once again as you can see we are getting another number over here and then let me just run this code 0.99 so this line of code is helping us in order to generate the random numbers over here in this case so guys this is the way that you can use random module over here in this case in order to randomly generate some numbers or randomly Shuffle the value values inside the list that is present list in Python Programming so guys a list is a collection of similar or different types of data so for example suppose we need to record the age of five students so instead of creating five separate variables we can simply create a list so as you can see this is the way that we create the list first of all on the left hand side we have the variable name and then on the right hand side inside the open and close square brackets we have the list of elements which are separated using the commas so I'll just copy this line of code over here and then let us move to the vs code and paste this so as you can see on the left hand side it is the variable name of the list and on the right hand side we have the age of all the students over here and simply we can print the list by using the print function after this we can provide the variable name that is list so let me just save this file enter I running this code now as you can see we are getting the list of all the elements in the sequence that we had provided over here it is very important that all these elements are separated using the commas over here now guys the list can have the same kind of elements that is this one is having the list of integers data type only but we can also have the string as well in between so let's say we have a string called John over here in between this list of elements so this is also possible it will not throw any error while we are running this code so let me just save this file andent I running this code now as you can see we are getting the list of all all the values 17 18 and then we are getting John and then 19 and then 14 so this is a kind of a heterogeneous list whereas when we have the same kind of data type in the list then it is called the homogeneous list now how do we access the python list element so basically this is one way in order to access the list but what if we want to access only a single element by using this print statement we have accessed all the elements over here but in case we want to access a particular element from this list then what we can do is in Python each item in a list is associated with a number so the number is known as a list index so basically all these numbers that is the elements of the list that are present inside the list so these are associated with the indexes which starts from zero so the 17 number is at the zeroth index 18 number is at the first index and so on this is at the second index third index and then so on so basically these elements can be accessed using these indices so as you can see we can access elements of an array using the index number now how do we access them so what we can do is we simply come over here I'll simply change this to the number 15 that was there previously and what we have to do is let's say I want to access this element that is the fourth element so what will be the index so this is zeroth index then we have one and then two and then three so this is the third index so we can access by using the variable name followed by open and close square brackets and inside those brackets we have to provide the index number that is three in this case which represents this number that is 19 so let me save this file and try running this code now as you can see we are just getting 19 over here previously we were getting the entire list when we don't provide this index number I'll save this file so as you can see all the values are getting printed but when we provide the index number let's say I want to print 18 this time which is at the index one after this index which is zero so I provide list of one over here save this file and run this code so as you can see 18 is getting displayed and this is how it is one way in order to access a particular single element inside this list by using the index number now it is also possible that we provide the negative index in Python so python allows negative indexing for its sequences the index of minus one refers to the last item minus 2 to the second last item and so on so for now we know that the zero index is the first element over here and then the first index is the second element but what about the last element let's say we don't know the length of the list like how many elements are present inside the list and we want to get the last element over here so since the first element is at the zero index the previous index that is before zero which is minus1 it will point to the last index of this list that is 14 over here so what if we simply do list of minus one in this case so I'll just provide minus1 in this case let me save this file inter running this code as you can see we are getting 14 so basically the minus1 index will point to the last element of the list in this case let's say we want to get the second last element so in this case we will simply provide min2 so after minus1 we are having min2 which will be the previous element of the last element so let me just save this file and try running this code now so as you can see 19 is getting displayed now and this is the way that we can also use the negative indexing as far as accessing the last elements of the list list are concerned now there is another concept of slicing in Python list so in Python it is possible to access a section of items from the list using the slicing operator which is nothing but a colon not just a single item so let's say we want to access the second and third elements inside the list so we have to use the slicing operator in this case now what is the slicing operator while providing the indices inside the open and close brackets we have to provide the indices and separate them using using the colon so what is the index of the second element it is one over here since the first element is having the zeroth index we don't want that we want to start from the first index and then we also want the second index so this time we have to provide the next number that is at the third index now so after this one that is the first index we have to provide colon and then we provide three over here so three is not included in this case please remember that whenever you are providing the ending index that element will not be included whenever you are using the slicing operator over here so the elements that will be considered in this case will be at the index one and at the index 2 which means 18 and 15 so let me save this file and try running this code now as you can see we are getting 18 and 15 only let's say you want to get all the elements starting from this 18 so this index is 18 right now and there is no end index that you want to specify over here so we simply have to remove this three and then we can simply specify one followed by the col so this will make python interpretor to consider all the elements after the first element including the first element itself so let me just save this file now and try running this code so as you can see we are getting all the elements that is 18 15 19 and 14 starting from the first index over here so guys this is the way that we can use slicing in the python list also in order to consider all the list elements over here we need not have to specify any of the indexes if we simply provide the colon over here all the elements will be con considered let me just save this file and try running this code now so as you can see all the elements are getting considered but this thing is kind of a redundant over here that's because if we simply provide the variable name that is list still all the elements will be considered so if we run this code once again so all the elements are being considered over here only when you want to consider the subset of this list you have to use the slicing inside the python list now let us move to the next concept how do we add the elements to a python list so there are two ways to add the elements in the python list the first way is to use the upend function which will help us in order to add a single item in the list and the second way is to use the extend function in order to add another list to the already existing list so let us check this with the help of examples now over here let's say we already have this list of values inside the list variable and now we want to add more elements so what we will do is we will say list followed by Dot and then we have something called as append so this is a function which will take a single element and it will add to the end of this list so let's say I want to provide 25 as the age of another student so let me just save this file now and try running this code so as you can see this element that is 25 it is already added at the end of the list now and in this way we can use the upend function to add more elements inside the list now let's say we have another list over here let's say I provide a list one and the numbers I provide is 1A 2 comma 3 over here so three elements are there and we want to add all these elements to the original list that is list variable so what we can do is we can use the extend function in this case so we have to use this list variable which is the original list variable followed by Dot and then we have the extend function and inside the parenthesis we have to provide this argument that is list one which is another variable having the list of elements and now if we print this list it will have the updated list of values so let me just save this file and try running this code now so as you can see after this 14 1 2 3 elements are also getting added over here since we have used the extend function in this case let us move to another section can we change the list items so basically the python list are mutable meaning list are changeable and we can change items of a list by assigning new values using equal to operator so what I will do over here is I'll just remove these lines of code so I'll simply provide the original list over here so we will say original list followed by colon and then we will print the list so let me just save this file and try running this code now we have the original list over here I'll just spell this correctly so we have the original list 17 18 15 19 and then 14 now let's say at the third position that is 15 we want to change this element to 10 now this is being referred to the second index over here so this is zero index then one and then second index so what we have to do is simply we have to provide list followed by inside the square brackets we will provide the index number number that is two and then equal to the new value that is 10 that we want to replace it with and then again what we will do is I'll simply copy this line of code and paste this over here and then we will say updated list and let me just save this file now and try running this code so basically as you can see original list it is having 15 at the third position over here that is at the second index and the updated list is having the number 10 at the same second index over here and this is the way that we can update the list elements so since python list are mutable we can change the elements of the list as well now removing an element from the list so there are two ways either we can use the D function or else we can use the remove function as well so let's say over here we have the original list now so I'll just remove these lines of code and then we can use the deel function and Then followed by list and let's say I want to remove this fourth element that is at the index three which is 19 so I'll just provide list of three in this case and then what I will do is I will print the updated list once again so I'll just change this to updated list so basically we are using the de method over here and deleting the third index inside this list so let me just save this file and try running this code now so as you can see we are getting the updated list as 17 18 15 and 14 this element that is 19 it was removed already now instead of this we can also use the remove method so in that case we have to use the variable name first in the deel method that is the delete method we simply used the function name and provided the element from the list in order to remove from that list but over here we have to provide the variable name followed by Dot and then we can simply use the remove function and Then followed by the position so which position we want to remove so let's say I want to remove this element that is 18 over here so in this case we have to provide the value of the element that is present inside the list so in this case we provide 18 in the previous example that we have taken using the D method we used the index number of the element that is present inside the list but in this case we have to use the value in order to remove it so I'll just save this file and try running this code now as you can see 18 was present in the original list but in the updated list we don't have 18 it is 17 15 19 and 14 and in this way we can remove the elements from the list as well now very important operation how do we iterate through a list so basically we can use the for Loop to iterate over the elements of a list so till now what we have seen is we have just used the list that is the variable name in order to print the elements of those list now if you notice we are getting the square brackets over here open and close square brackets within which all the elements are getting printed but let's say we don't want those square brackets and one by one we want to print all the elements at a time so what we can simply do is use the for Loop and we have seen in the previous videos as well the syntax of the Fall Loop we have to use the for keyword followed by let's say a temporary variable name that is item followed by the in keyword and then we have to provide the sequence at is list and then after that we have the colon and then we can have the print statement over here now in the print statement if we only provide one item that is item in this case so every time all the elements will be printed on the separate lines over here so let us just try this code so we'll just save this file and try running this code now as you can see 17 18 15 19 14 all the elements are getting printed on the separate lines what if we want all the elements to be present on the same line so what we can do is after providing comma over here we have the end parameter inside the print function and this end parameter we can have the comma as the character by which we can separate all the elements so by default this is slashing character which means the next element will be printed on the next line but if we specify this in this way all the elements will be printed on the same line so let me just save this file now and try running this code so as you can see all the elements are getting printed on the same line in the same sequence that is present inside this list so in this way we can iterate through all the elements inside the list that are present by using the fall Loop over here now another important thing how do we find the list so we have something called as python list length so in Python we use the Ln function to find the number of elements present in a list so we can have any number of elements inside the list over here so there is no limit on the number of elements that we are supposed to have in inside the python list so in case if we want to find the number of elements inside the list we can simply use the length function so we can simply print this and then we can have Ln which is a function and then we can provide the variable name of the list inside this Len function over here so it will return us the count of the elements inside the list so let me just save this file and try running this code now as you can see five that is the count of the number of elements inside the list is present over here if we provide some more elements over here let's say I have provided five more elements inside the list let me just save this file now and try running this code so we are getting the updated count that is 10 so 10 is the number of elements set are present inside the list and that is how we can easily find the length of the list in this case by using the Ln function over here so Guys these were certain operations as far as list variable is concerned please make sure that you practice on your own and as a homework for you there is something called as a sort function which can help you in order to sort all the elements inside the list so you can practice on your own as a homework for you in order to sort the elements inside the python list and print on your own tle in Python Programming so guys a tupple in Python is similar to a list basically the difference between the two is that we cannot change the elements of a tle once it is assigned whereas we can change the elements of a list so previously in the examples of the list that we have seen we were able to change the elements inside the list but the same thing cannot not be done with the elements that are present inside the Tuple so how do we create a tupple a tupple is created by placing all the items that is elements inside the parenthesis so we have this open and close parenthesis whereas in the list we were using open and close square brackets now these are supposed to be separated by commas over here the parenthesis are optional however it is a good practice to use them so a tle can have any number of items and they may be of different types that is integer float list string Etc so guys let us check this with the help of example now over here as you can see we have my tle which is the name of the variable that we have given and 1 2 3 these are the elements that is present inside the Tuple if you notice we have this open and close parenthesis inside of the square brackets and that is the difference between the list and the tle over here so let us move to the vs code and simply we will provide tle one as the variable name over here equal to followed by open and close parenthesis and let's say we Define five elements 1 to five over here so this is nothing but we have defined the tle and we can simply print this tle by using the variable name tle one over here so let me just save this file and try running this code now as you can see we are getting all the elements that is 1 2 3 4 5 and in this way we have easily created and printed the tle elements over here now guys an important thing over here let's say you want to create a python tupple with only one element so in this case what happens is let's say if you provide where one that is variable one over here and you provide double Cotes that is hello with this open and close parenthesis in this case this will be considered as a string whereas in the variable two what you do is after this hello you provide a comma so in this case it will be considered as a tle so this is very important thing if you want to create a tupple with just a one element you have to use the comma after providing that element over here let us check this with the help of examples now over here let's say I provide where one in this case and then open and close parenthesis and then let's say we have hello over here and then I'll just copy this line of code and paste this and I'll simply provide comma after this element so what we will do is I'll just name this variable name as where two so let us now confirm the data types of both the variables so we will say print and then inside this we will use a type function in order to find the data type of where one so we provide where one over here and I'll simply copy and paste this line of code and we provide where to over here so let me just save this file now and try running this code so as you can see first one it is showing us that it is a string and the second thing is showing us that it is a tuple now in case if we simply remove this comma from this tle so what happens so let me just save this file and try running this code once again as you can see it has become string now both are strings right now if we provide comma over here and comma over here as well so both the variables will be turned to the topple data type so guys this is very important if you want to have only one element inside the Tuple make sure that that element is followed by a comma over here in order to make that data type as a tle now guys moving to next section how do we access the python tupple elements so there are multiple ways in order to access the elements over here first of all is indexing so this we have already seen previously by using the index number we can access the elements of the tle so let's say we have tupple one over here and we have five elements 1 2 3 4 5 so how do we access these elements by using the indexes so we simply have to provide the doule one that is the variable name and Then followed by open and close square brackets this time and let's say we want to print the element that is three over here every time remember guys that the index it starts from zero so this first element that is number one it is at the index zero and then the second element that is number two it is at the index one and then the the third element that is number three it is at the index two over here so we provide the number that is two which is the index number in this case so this will tell the python interpretor to access the element that is at the index number two for this variable that is tle one so over here what will happen is the index number zero is this and then index number one is this and then we have index number two which is three over here and this element should be printed so let me just save this file and try running this code now so as you can see three is getting printed similarly let's say if you want to print this number two which is at the index one in this case so we have to provide one inside this open and close square brackets so let me save this file and try running this code now so two is getting printed this time so guys this is one way in order to access the elements by using the indexing we also have something called as negative indexing so let's say if you don't know the number of elements that are present inside the Tuple whereas there is a way in order to find the length of the the tle but in case you want to access the last element of this Tuple over here so you already know that the first element is at the index zero so let me just print that so over here we provide tle one followed by the index number that is zero in this case I'll save this file and try running this code so one is getting printed now let's say you want to print the last element but you don't know at which index it is so we have something called as negative indexing in which case before the zero index the index that is minus one it will point to the last element of this tle that is five over here so when we provide minus one in this case this element that is five should get printed so let me save this file and try running this code now so five is getting printed similarly if you want to get the second last element of this tle you can simply provide minus two over here so when we provide minus two and run this code so four is getting displayed which is the second last element so this is like a cycle over here when you use the negative indexing the last elements of this tle will start getting printed over here and then guys you can also use the slicing functionality as we have already seen with the list so basically let's say if you want to print the subset of this tle between 2 to 4 so what you can do is what is the index of this element that is two it is zero and then one so at the first Index this two is present so we will provide one over here followed by a colon and then what is the index of the element that we want that is four so the index is it is 0 1 2 and then this index is three but we don't want to specify three because this is excluded so the next index which is four we have to specify that index which will be not included in our slicing operator so when we provide four over here always remember that this index on the left hand side will be considered but this index will not be considered the fourth index will not be considered but before this that is the third index will be considered while printing the statement so let me just save this file and try running this code now so as you can see 2 3 and four is getting printed the last index that is four which is having the element five this will not be considered because it is not included in the slicing operator so these are some of the ways that you can use in order to access the python tupple elements over here now python tupple methods there are two methods only that is count and index over here what is count so basically in order to get the number of occurrences of a particular element you can use the count method so over here while using the count function we have to use the variable name followed by Dot and then as you can see count and index these are the only two methods the other methods such as appending or removing or deleting the elements are not present that's because as I've already told you the tle inside python are not mutable which means we cannot change the elements once they are assigned over here so when we provide count we have to provide one of the elements inside that tle so let's say we want to find the occurrence of the element that is two over here in this case that means how many times this number two is occurring so let me save this file now and try running this code so as you can see the count is one over here that's because only one occurrence of number two is present let's say I provide some more occurrences over here so I provide the number two two times over here so the total count becomes three in this case over here we have two and then two more twos are present so basically the total count is three let me just run this code once again so number of twos that are present over here inside the topple is three and that is what we are getting over here and this is the main functionality of the count function now the another function that is index so if you want to get the index of a particular element you can use the index function so after this dot we have something called as index and then inside the open and close parenthesis we have to provide the element for which we want to find the index so let's say I want to find the index of this element that is number five over here so it is four basically let me just save this file and try running this code and confirm so as you can see four that is the index of this element is getting printed over here so Guys these functions you can use based on your requirements as far as tupple is concerned now one very important thing iterating through a tupple in Python so we can use the for Loop to iterate over the elements of a tupple so basically we have seen this in the previous video as well so far we have printed the elements of the tupple by using the variable name in this way so let me just save this file now and try running this code as you can see all the elements are getting printed but there is a problem over here we are getting this open and close parenthesis also while printing these elements what if we only want to print single element at a time so we can simply use the for Loop and iterate through all the elements over here inside the tle so we use the for keyword followed by let's say the temporary variable as the item and then we have the in keyword and then the name of the variable that is the sequence which is tle one in this case and then we simply have to print this item that is item variable now what will happen is all the items will be printed on separate lines over here because by default the end parameter of this print function is having the slend character so let me just save this file and try running this code now as you can see all the elements are getting printed on the new line what if we want all the elements to be present on the same line separated by comma over here so we simply have to provide comma and then there is something called as end parameter for this print function so we use that and inside the double codes we provide the comma over here which will be kind of a separate for all those Elements which will be printed on the terminal so let me just save this file now and try running this code so as you can see all the elements now are getting printed on the same line and they are separated with a comma if you want a space character after comma that can also be done you provide comma followed by the space character let me just save this file now and try running this code so all the elements are separated with a comma character and then a space character additionally for a better readability so guys this is another way you can use the for Loop in order to iterate through all the elements of the Tuple now let us understand what are the different advantages of a tupple over list in Python so we generally use tuples for heterogeneous that is different data types and list for homogeneous which means similar data types so in a tle you can have the different data types as well so basically the tupple is being used for that purpose only and we cannot change the elements inside the tupple so since tuples are immutable which means you cannot change a data inside the tupple once they are assigned iterating through a tupple is faster than with a list so behind the scenes what is happening is the program already knows that the tupple elements will not be changed and for this reason the tupple is little bit faster compared to the list so there is a slight performance boost over here now tles that contain immutable elements can be used as a key for a dictionary as well with a list this is not possible so inside a dictionary as you must be knowing there are key value Pairs and the elements of the tle can be considered as keys for the dictionary if you have data that doesn't change implementing it as a tle will guarantee that it remains right protected so nobody can change the elements of a tle if you want some data to be fixed whenever you are implementing the list of elements that should be present in a sequence and that must not be changed so Guys these are certain advantages of a tle over a list in Python Programming string in py Pyon programming so guys in computer programming a string is a sequence of characters so for example as you can see this hello word it is the string which is the sequence of characters that is h e l o so this is a string containing the sequence of these characters and we call it as a string now we use the single quotes or double quotes to represent a string in Python so basically whenever we are defining a string we use the sequence of characters which are supposed to be enclosed Within These double codes or else we can use the single codes as well so as you can see for example Str Str that is the variable name that we have taken over here followed by the equal to operator we have the string that is programming for beginners which is the name of the YouTube channel which you should definitely subscribe and this is enclosed within the two double codes over here so let us check this with the help of example now we have Str Str it is equal to inside the double codes we can provide our string that is programming for beginners over here and then simply we can print the string by using the print function so we have print followed by open and close parenthesis and then we provide this St variable name let me just save this file now and try running this code as you can see programming for beginners is getting printed now now what are the different operations how do we access string characters in Python so let's say if I only want to print this character that is p over here how can we do that so one way in order to do that is by using the indexing which means we can use the index number basically the indexes that we have seen in the list and tle in the previous videos are also applicable over here for Strings as well so this letter that is p can be accessed by using the index number which starts from zero so this is the zeroth index number which defines this P character the next character that is R it is at the first index number and then the next character is at the second index number and so on so we can simply use the variable name and then inside the open and close square brackets we can provide the index number so over here after the variable name inside the open and close square brackets as you can see we provide the index number that is zero which will point to this character that is p over here so let me just save this file and try running this code now as you can see p is getting printed over here now let's say we want this o to be printed so what is the index number for this so the first one is zero index and then we have first index over here and then this o is at the second index number so we provide number two that is inside the open and close square brackets let me just save this file now and try running this code so as you can see o is getting printed and in this way if you want to access a single character from the string you can use the index number in order to access them now there is another variation we can also use the negative indexing which means the negative index numbers can also be used in order to access the last elements of the string so let's say if you want want to access the last element first element is having the index number zero and the previous index number that is before the number zero we have minus one in the number system so minus1 will refer to the last element inside this sequence of characters which is s over here so when we provide minus one in this case inside the open and close brackets so let me just save this file and try running this code as you can see s is getting printed so minus one is pointing to this character that is s what will be the second last character it will be minus two in this case so when we provide minus two save this file enter I running this code so as you can see this R is getting printed over here and in this way we have the negative indexing Concept in Python Programming now there is another way we can use the slicing operator in order to print the subset of the sequence of characters so let's say if we only want this programming word to be printed instead of programming for beginners that is the entire string so what we can do is so we have to mention the indices in order to print these characters only so it starts from zero and then we have 1 2 3 4 5 6 7 8 9 10 and then we have to take extra index number that is 11th as well because that last index number is not included whenever we are using the slicing operator so the indexes will be between 0 to 11 in this case so how do we provide that range we provide zero first that is the left left hand side index followed by the colon and then we provide 11 that is the second index up to which all the characters must be taken and printed over here so as you can see this is the slicing of the sequence of characters let me just save this file enter I running this code now as you can see programming is getting printed over here let's say we want to include the characters up to F so we have to provide the index up to O over here so basically this was the 11th index and then we have 12th and then 13 so over here what we can do is we can simply provide 13 in this case so let me save this file now and try running this code so as you can see programming word is getting considered and then after that we have the space and then f is also considered which is at the 12th index there is another way we can do this instead of providing this zero index we can just remove this so by default it will take from the start of the string that is all the characters starting from the zero index over here so let me just save this file and try running this code now so as you can see again we are getting the same output that that is programming up to the F character over here what if we want from this o character which is at the 13th position up to the last position so what we can do is we can simply provide the 13th index number which will start the string from this particular character and Then followed by colon and there is no need to provide the last index because we want all the characters to be included so this is the slicing operator for us we have the 13 index number and then colon over here let me just save this file now and try running this code so as you can see after after F we are getting o r over here and then we have the space character and then we have the beginners as well so this is the way that we can use the slicing in Python in order to get the substring from the entire string that we have already defined now guys very important python strings are immutable so in Python strings are immutable that means the characters of a string cannot be changed so let's say this first character that is p if we want to change that character so what we will do is we will provide Str Str and Then followed by zero and then in instead of this P character let's say I want to provide the character Q over here and then let me just print this string once again so we will simply print the string let me just save this file and try running this code now as you can see we are getting the type error string object does not support item assignment so we cannot change any of the characters over here but there is another way to do this what we can do is simply we can copy this entire string value and paste this over here and then again instead of P we can provide Q over here but this time we have to remove this index number so this is possible because we are providing the reassignment of the string variable so let us check this we'll save this file and try running this code now as you can see we are getting Q over here and all the other characters are same so basically by immutable we mean that we cannot change a particular Single Character inside the string by using the index number for that particular character but in case if you want to reassign the entire string that can be done by using such reassignments operator now guys there is another important functionality in Python multiline strings are allowed so basically we can also create a multiline string in Python so for this we use the triple double codes or triple single codes over here so what we will do is let's say I'll just remove these lines of code and then I'll say Str Str it is equal to three * double codes over here we will use and then I will say this is first line and then on the next line we will say this is another line so this is basically the multiline string that we have defined so how do we print this simply by using the normal way that is print function followed by the name of the string that is Str Str variable let me just save this file and try running this code as you can see the format in which we have return return the string that is the three double codes were there over here followed by on the next line we were having this is first line and then this is another line and then we were having another double codes over over here so these double codes followed by space characters and then between those space characters this is another line if we don't want these space characters soon after the double codes are being mentioned we have to provide the strings over here so the start of the double codes at the same line we are having this is first line and this is another line and then we have the three double codes on that same line so let me save this file now and try running this code so basically this is the format so whatever format we follow in this three double codes so three single codes the same format will be followed while printing those lines on the terminal now what are the python string operations basically you can compare two strings with the equal to operator over here as you can see so let's say we have two strings over here string one it is equal to let's say we have John and then string two it is equal to let's say we have the name Peter over here so we have Peter so what we will do is simply we will print Str str1 it is equal to Str str2 so this is nothing but we are comparing two strings by using the equal to equal to operator which we have done previously as well while we were using the relational operators in order to compare two numbers we can compare two strings in the same way as well it will either return true or false based on whether they are equal or not so let me just save this file and try running this code now as you can see we are getting false that's because the names are different so what if we make the names same so I'll just copy this value and paste this over here now both the strings are same St str1 and Str str2 both are having the value that is John so let me just run this code now as we can see we are getting true over here that's because both the strings are same in this case now there is another operation how do we join the two or more strings so we can do so by using the plus operator so let's say we go back over here once again we provide the string to as Peter and we want to join both the strings so in this case instead of equal to equal to what we will do is we will specify the string one that is St str1 and then plus operator and then followed by St str2 in this case so let me just save this file now and try running this code as you can see we are getting John Peter over here continuously there is no space character so either we can provide a space character over here or else we can have the space character inside the print function as well so we can have the double codes inside which we can have the space character and then again we have to use the plus operator in order to join these strings so let me just save this file now and try running this code so as you can see we are getting John Peter and then there is a space character in between so we can join multiple strings as well by using the plus operator over here the same plus operator will be used in order to add two numbers if these variables are numbers but in our case these variables are strings and that is why it is being used in order to join the two strings in this case now how do we iterate through a python string so basically we can iterate through a string by using the fall Loop so let us check this with the help of example now let's say we have string one over here we provide four follow followed by S which is the temporary variable and then we have the in keyword followed by Str str1 I'll just make this as item so that it is more user friendly in order to understand so basically Str str1 which is having the sequence of characters one character at a time will be assigned to this item variable and the control flow will go inside this fall Loop now inside this we can simply have the item being printed so when we provide item over here inside the print function and when we save this file enter IUN this code as you can see all the characters that is j o h n these are getting printed on separate lines how do we get them on the same line so what we can do is we can provide the end operator equal to we can simply provide the double codes and we don't have to provide anything over here if we want to separate all the characters with a comma we can provide comma over here as well so let me save this file and try running this code as you can see John is getting printed but all the characters are getting separated using the comma we can simply remove this comma over here I'll save this file and try running this code now as you can see we are getting John over here so since we have provided this end parameter with nothing but simply double codes we are getting all the characters or else when we don't provide this parameter by default the end parameter is having the Slash and character due to which all the items will be printed on the new lines there is another important thing how do we find the python string length so basically we can use the Len method to find the length of the string so let's say we have programming for beginner string over here so I'll just type programming for beginners and we want to find the length of the string that means how many characters are present inside the string so we can simply use the Len function that is the length function in order to print the count of the characters inside the string so we can have the L and function followed by inside the open and close parenthesis we have the variable name that is s Str over here so let me save this file and try running this code code so it is saying object of type type has no lens so basically we have provided Str Str over here instead we have to provide St Str one which is the variable name so that was the mistake so let me just save this file now and try running this code as you can see 25 we are getting that is the number of characters that are present inside the string let's say I add some more characters over here I provide 1 two which means I have added two more characters inside the string so that should be 27 in this case so when we just save this file now and try running this code we get 27 as the count which is the updated count of number of characters inside the string and that is how this length function will work in order to return you one particular integer which is the count of the number of characters inside the string now guys there is another important thing string membership test so basically this we have already seen we can test if a substring exist within a string or not using the keyword in so we have already used the fall loop as well and in the membership operator we have used the in keyword in order to find a particular letter is present or not inside the string so that you can take as a homework for you so that you can practice on your own you can find out whether the character X is present inside the string or not and if it is present then you should display true and if it is not present then you should display false comment in the comment section below what is the output of your program while using this membership operator that is in now guys very important thing there is something called as Escape sequences in Python now the escape sequence is used to escape some of the characters present inside a string so what we have done over here is while providing the string we are enclosing it using the double Cotes but what if the double quotes is a part of this string let's say I want to provide a double quotes over here before beginners so as you can see after providing the double codes we are getting a red underline over here which means there is some issue so what we can do is in order to avoid this issue and to make this as a part of this string we have to use the Escape character which means we have to use a back slash character over here just before the special character so this is the way that we use the Escape character we use the back slash character over here once and then followed by our special character which is causing the issue and in this case this double quat will be the part of the string now so let me just save this file and try running this code currently we are getting the length of the string what we will do is I'll just remove this length function so that we can print the value of the string so I'll just save this file and try running this code as you can the programming for and then we are getting the double codes over here which is the part of the string and then we have the beginners over here so this is the way in case you want to escape certain characters or special characters we can use the back slash which is known as the Escape character in Python Programming now guys there is another way in order to print the string by using the python string formatting so as you can see for example let's say we have the name that is John and we have age it is equal to 25 so one way that we can print both that is name and age is by using the multiple objects inside the print statement so let us check this so we have name over here which is John right now and then let's say we have age it is equal to 25 and we want to print both that is name and age within one print function so what we will do is we will say name is followed by comma and then we provide name and then again comma and then we have double codes and then we provide end age is followed by comma and then we have age over here so what we have done is this string will be printed that is name is followed by this name value will be taken from this variable that's because we have provided it outside the double quotes over here and after providing this comma and then again there is a comma and then we have a normal string label that is end ages and then we are specifying the age so this is one way in order to print both that is name and age in the same print statement so let me just save this file now and try running this code so as you can see name is John and age is 25 over here but guys this can be confusing since we have to use multiple commas over here as well as multiple double quotes as well so there is another way in order to print the same string so what we can do is again we can have the print function but this time what we will do is in the open and close parenthesis we provide the F character followed by single codes over here so inside the single codes we can provide the variable name that is name and age as well so in this case if we want to get the value of this name variable we have to enclose it within the curly braces so these are the curly braces as you can see we have the open and close curly braces and inside this we provide name over here so if we do it in this way we provide the F character and then inside the single codes inside the curly braces we have the name over here it will print the value that is Shan so let me just save this file and try running this code code as you can see John is getting printed which is the value of this name variable now we want to print the entire string that is we also want the labels so before this name that we have provided we can simply provide the string that is name is and Then followed by open and close braces and inside the braces it will be name variable name and then we can simply provide end age is followed by open and close braces and then we can provide the age variable name so so guys this is the format we have the F character and inside the single codes as you can see we have provided the string label that his name is and Then followed by open and close curly braces inside which we provide our variable name and Then followed by end ages or any other string label that you want to Define and then we can have the variable name that is age over here inside the open and close curly braces so let me just save this file now and try running this code as you can see we have the perfect string that we wanted that his name is John and age is 25 so this is another way we can use the python string formatting by using this F character inside the print function in order to print the string in the way that we want to print so Guys these are certain things as far as strings are concerned in Python programming language sets in Python Programming so guys a set is a collection of a unique data which means that the elements in a set cannot be duplicate elements so over here you can easily create a set in the python basically in Python weate create the sets by placing all the elements inside the curly braces separated by comma so guys previously we have seen that for the list we are using the open and close square brackets for the tle we use the open and close parenthesis and over here for sets we are using the open and close curly braces so we will check this with the help of examples as well a set can have any number of items and they may be of different types so as you can see it can be of the integer float tle or string data type or any other data type but a set cannot have mutable elements like list sets or dictionaries as its elements so guys this is very important you cannot have another list set or a dictionary which we are going to see in the upcoming videos over here we cannot have these kinds of data types inside a particular set now let us check the creation of set with the help of example now over here so let's say I provide set one as the variable name and then we provide the equal to symbol followed by the open and close curly bra bra es so inside these braces we have to provide the elements of the set so let's say we have the set of integers we have 1 2 3 4 and then five so guys we have five elements over here 1 to five which are the elements of this set and simply we can print all these elements inside the set by using the print function over here and then we can say set elements R and then colon and then we can have set one that is the variable name so guys let me just save this file and try running this code now so as you can see we are getting set elements are we are getting all the elements that is 1 2 3 4 five and guys this is the way that we can create a set in the Python Programming now guys it is very important that we cannot have the duplicate items in this set so let's say I provide some more numbers over here which are already present in this set so let's say two and three are already present I provide this 2 and three once again so when we do this so right now we have seven number of elements but let me just save this file now and try running this code to see how many elements get printed so as you can see only five elements are getting printed so those two elements at is 2 and three will not be considered once again while printing them because we cannot have duplicate elements we can only have the unique elements inside the set and guys this is the main functionality of having the set data structure in Python Programming So based on your requirements if you don't want the duplicate elements to be present you can use the set data structure in the Python program programming language now guys how do we create an empty set in the python so basically creating an empty set is a bit tricky so empty curly braces if we use then it will make a empty dictionary in Python so basically when we create a dictionary we again use the curly braces so let us check this with the help of example now over here what happens if we create the empty set so let's say we provide set one it is equal to open and close curly braces as you can see we have not provided any element and this is the empty set but let me just print the type of this variable over here so we will simply use the type function and then provide the set one as the variable name so guys what will be the type of this set one variable so let me just save this file now and try running this code as you can see it is saying that class it is a dictionary data type so this set one variable is of the data type dictionary by default when we provide the open and close curly braces how do we make it as a empty set data type so what what we have to do is instead of using the open and close curly braces we have to use the set function so there is something called a set function over here as you can see vs code is suggesting us so this set function followed by the open and close parenthesis will help us to create a new empty set over here so let me just save this file now and try running this code over here what we are trying to do is again we are trying to print the type of this set one but this time it should be of the set data type so let me just run this code now so as you can see we are getting the set data type over here previously we were getting the dictionary so in order to have the empty set in Python Programming we can use the set function over here now very important question how do we add the set items in Python so basically sets are mutable which means we can add and remove items from the set however since they are unordered indexing has no meaning so guys basically if you must have noticed there is no one order in which the set items were printed previously so let us check this once again over here we provide set one it is equal to and let's say we provide some elements that is three 2 4 1 5 and then let me just print this set one over here so we provide set one inside the print function let me just run this code as you can see we are getting 1 2 3 4 5 this is not of the same order in which we have provided these elements inside the set so we cannot use index numbers over here as well in order to access these elements one at a time since the way in which the elements inside the set are printed are not in a particular order now guys how do we add new elements to this set so basically we cannot access or change an element of a set using the indexing or slicing but we can use the add method to add an item to a set so let us say I want to add another element over here so basically what we will do is we will say initial set and then col and then we provide set one and then let's say we provide set one dot we have something called as ADD over here as you can see this is a function that we can use in order to add elements inside the set so let's say we provide 10 as the number to be added to this particular set that is set one and then again we want to print that set one so I'll just copy this and paste this over here and then we have updated set over here so we have updated set and then set one being printed so let me just save this file and try running this code now so as you can see initial set it is 1 2 3 4 5 and then after adding this element we are getting the updated set as 1 2 3 4 5 and then the last element that is 10 over here which is being added by using the add method and this is the way that we can add the elements inside the set remember that the order in which they are added will not be followed while printing them so you cannot rely on the order in which the set elements will be printed on Console now guys another important thing how do we remove an element from the set so we can use the discard method to remove the specified element from a set so let us say after adding this we want to remove the element that is three from this set so what we can do is we can provide set one and then followed by Dot and then we can have discard method in order to remove the element we need to provide the element which needs to be removed so over here we provide the number three which will be removed from the set one and then again let me just copy this line of code and paste this over here so that we can print the updated set after removing so over here we say updated set after removing three and then let me just save this file and try running this code now so as you can see we are getting 1 2 4 5 and then 10 so the element three is being removed after using the discard method over here and guys this is the way that we can remove the elements from the set now guys there is another way in order to to access the elements inside the set we can iterate over a set in Python by using the fall Loop so this can be easily done by using the fall Loop over here so what I will do is I'll just clear these lines of code and then we will say for and then item in set one so this is the syntax that we use while using the fall Loop and then we can have the print statement over here guys notice that till now we were printing the elements of the set by using the set one variable and that is why we were getting getting the starting and the ending open and close curly braces over here but this time let's say we don't want those but we want only those numbers that is the elements inside the set to be printed so we can easily use the for Loop and iterate through each and every item inside the set and this is the way that we can do so we provide the print statement over here and inside the item variable one at a time all the elements will be printed over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 now all these numbers are on a different line what we can do is we can use the end parameter of the print function so over here we provide the end parameter and then we simply provide the space character so that all the items are separated by the space characters over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 which are the elements of this set if you want all these numbers to be separated by commas what will we can do is inside of the space character we can provide the comma and let me just save this file and try running this code once again as you can see we are getting 1 2 3 4 5 and all the elements are being separated using the comma character now guys how do we find the number of set elements so we can use the Len method that is the length method to find the number of elements that is present inside the set so what we can do is simply we can provide the print statement over here and we can simply say that length of set is and then colon and then we can simply use the alen method and then inside this method we can provide the set one that is the variable name so let me just save this file now and try running this code so as we can see length of set is five so basically since five elements are present over here we are getting the length as five what if we provide some more elements let's say I provide 6 7 and let's say I provide some more duplicate elements over here that is 1 2 and then three so over here there are total 10 elements out of which three elements are duplicate so what is the exact length of the set so let me just save this file now and try running this code so as you can see length of set is seven so even though we are having 10 items inside the set but out of those 10 items three items are duplicate items so those duplicate items will not be considered it will be considered only once and that is why we are getting the length of this set s 7even now guys very important thing about the set operations we can carry out different set operations in Python Programming one is Union of two sets which can be done by using the union method or this or symbol over here we can also have the set intersection which can be implemented by using the intersection method and then we also have the difference between the two sets which means we can use the difference method or the minus symbol over here so guys let us check all these operations one at a time so over here what we will do is we will have two sets over here we will say set one it is is equal to 1 2 and then 3 and then let's say we have set two it is equal to 3 4 and then 5 now guys let's say we want to find the Union first so what we will do is we will say Union and then we will simply say set one followed by Dot and then we have the union method followed by the parameter needs to be set two over here because that is the another set that we want to find the union of similarly we will do the intersection and difference as well so I'll just copy and paste these lines of code over here we will say intersection in this case and then we will simply change the union method to intersection over here and then over here we will say difference so difference and then instead of this Union we will say difference so guys basically what we are doing over here is these are all the set operations the union will find all the elements that are present in set one and set two and all the elements will be unique in the intersection part we will get all the elements that are common in both the sets which means three in this case and then in the difference we will find all the elements that are present in set one but not present in set two so guys let me just save this file now and try running this code to see what will be the results of all these operations so as you can see the union is giving us one 2 3 4 5 which means all the elements that are present in set one and set 2 so we are having 1 2 3 in set one and then in set two the three is already printed and then it is printing four and five as well in intersection we are getting only three that's because the element three is the only element which is common in both the sets for the difference operation we are getting only one and two that's because these are the only two elements which are present in set one but not present in set two so Guys these are certain set operations that can be implemented with Python Programming apart from this there are multiple builtin methods that you can use as far as sets are concerned so when we provide the variable name that is set one followed by dot as you can see these are all the methods that can be used based on your requirements dictionary in Python Programming so guys the python dictionary is an ordered collection of items it stores elements in the form of key value pairs so basically on the left hand side we have a key and on the right hand side we have the value and such key value pairs are known as dictionary in Python programming now guys the keys are unique identifiers that are associated with each value so basically we cannot have duplicate keys in a dictionary whereas we can have the duplicate values in the dictionary so as you can see for example over here on left hand side we are having the keys on right hand side we are having the values so Nepal Italy and England these are certain Keys over here and they are capital that is Katmandu Rome and then London these are the values on the right hand side so how do we create a in Python we can have any variable name in this case and after the equal to symbol inside the open and close curly braces we are having the key value pairs so since this is a string we are enclosing it within the double codes over here and then after the key that is Nepal we are providing a colon in this case followed by the value which is again inside the double codes and then separated by commas we have more key value pairs over here so guys this is the way that we can create the dictionary so guys let us check this with the help of examples now over here so let us say we have dict1 that is the variable name followed by equal to and then let's say we provide the same data over here so I'll just copy and paste this line so we have copied the same key value pairs over here now simply we can print this key value P by using the print function and Then followed by dict1 which is the variable name so let me just save this file and try running this code now as you can see we are getting all the key value pirs over here being printed on the console so guys this is the way that we can create the dictionary along with the key value P that we want to store inside the dictionary now how do we add elements to a python dictionary so we can add the elements to a dictionary using the name of the dictionary with open and close square brackets so guys over here what we will do is we will say initial dictionary so this label we have added so that we can identify that this is the initial dictionary now what we will do is we will add one more key value pair inside the same dictionary so what we have to do is we have to use this variable name that is dict1 followed by open and close square brackets and inside this we have to provide the key so let's say the key over here we provide India is the key and then the capital of India it is Delhi so over here the value that we have to provide is Delhi in this case so what we have done is we have provided the variable name and Then followed by the open and close square bracket and inside those brackets we have to provide the key in this case it is a string and then we have equal to followed by the value for this key which is again another string and then guys what we will do is let's say we want to print this entire dictionary once again so we will print this and over here we will say updated dictionary and then again dict1 so let me just save this file and try running this code now so as you can see we have the updated dictionary as we have Nepal Italy England and then the last element that we have added just now is the key that is India and Delhi that is the capital of India as the value so guys this is the way that we can add elements inside the dictionary in the form of key value pairs now guys how do we change the value of a dictionary so we can again use the open and close square brackets in order to change the value associated with a particular key so guys let us check this with the help of example now so over here what we will do is let's say we have added this key value pair that is for India we have the capital that is Delhi but now let us say instead of having the capital as the value we can provide any city as the value for this country so what we can do is again we can provide the variable name that is dict1 and then for this key that is India we want to update the value so let's say this time the value that we provide is Mumbai which is a very popular city in India so we provide Mumbai over here and then again we are printing this dictionary once again so let me just save this file now and try running this code so as you can see the updated dictionary first time it is showing India that is Delhi and then the second time that is updated dictionary it is showing India and this time the value it is Mumbai in this case so guys this is the way the same way is used in order to add the key value pair and in order to update the key value pair as well we have to make sure that whatever key we want to update it is K sensitive if let's say I provide the small I over here so in this this case it will add a key value pair since this India is not matching with this India that's because over here we are having the capital I and over here we are having the small I so let me save this file now and try running this code this time we are getting the five key value pairs in this case so India Delhi and then we have the small I and then Mumbai so guys make sure that whenever you are updating the key value pairs the key of the dictionary must exactly match with the existing keys that are present in the dictionary now guys how do we access the elements from the dictionary so in Python we use the keys to access their corresponding values so let us check this with the help of examples now over here so let's say we have these three key value pairs as the original dictionary now we only want to print the value of this particular key that is Nepal over here so what we will do is we will simply have the print statement and then we will say dict1 that is the variable name followed by open and close square brackets and we simply provide this key that is Nepal over here so inside the double codes we provide Nepal over here so let me just save this file and try running this code now so as you can see we are getting the value of this key that is Nepal similarly if we provide Italy as the key so I'll just replace Nepal by Italy over here so as you can see we are getting the value as Rome because the value for this key that is Italy is Rome over here so in this way we can easily access the values of the keys that we want to print now guys how do we remove the elements from the dictionary so so we use the D statement to remove an element from the dictionary so what we will do is let's say I want to print the original dictionary over here so we will say original dictionary and then colon and then we say dict1 now guys what we will do is let's say I want to delete this key value pair that is Nepal and kand so we will use delete and Then followed by dict1 and then open and close square brackets and inside this we have the double codes and we simply provide the key over here that is Nepal so this statement will help us in order to delete this particular key that is Nepal and Katmandu over here so let me just print this dictionary once again so over here we have updated dictionary and then let me just save this file now and try running this code so as you can see original dictionary we are getting all the three key value pairs that is Nepal Italy and England over here along with their values but the updated dictionary it is giving us only two key value pairs that is Italy that is Rome and for England we are getting London so over here this key value pair that is for Nepal we are having the Katmandu value this was removed because of this particular statement that we have used in order to remove the Nepal key and its value as well now guys as far as dictionary membership test is concerned we can test if a key is in a dictionary or not using the keyword in so in keyword is used in order to check the membership test so note that the membership test is only for the keys and not for the values so guys let's say over here I'll just remove these lines of code so for this original dictionary we want to find whether the key Italy is present inside the dictionary or not so we will say print and then we can simply say Italy and then we use the in keyword followed by dict1 so guys what exactly we are doing is we are checking whether this string it is present in dict1 or not so let me just save this file and try running this code so as you can see it is showing us true over here that's because the key Italy is present inside the dictionary but the same thing is not applicable when we provide one of the values inside the dictionary so let's say we provide Rome as the value over here so Rome in dict1 so let me just save this file and try running this code so as you can see it is showing us false that's because Rome is the value and it is not one of the keys that are present inside the dictionary so guys we can also use the in keyword in order to check whether a particular key is present inside the dictionary and it is only applicable for the list of keys over here now guys we can also iterate through the dictionary by using the fall Loop over here so what we can do is simply we can use the for Loop in order to print all the key value pairs so over here we have the for keyword followed by let's say we provide the key variable name and then we provide the in key keyword and Then followed by the variable name that is dict1 and then colon so what we will do is we will simply have the print statement and then let's say we want to print the key value p in the particular format so we will say key in this case and Then followed by comma and then let's say we provide Arrow over here and then after this we provide the value so how do we access the value we provide the dict1 that is the variable name and then inside the open and close square brackets we provide the key in this case so guys basically what is happening over here is all the keys that are present inside this variable one at a time it will be assigned to this key and this key we are printing on the left hand side and then we are having the hyphen and the arrow symbol and then using this key variable we are getting the value from this dictionary in this case so guys let me just save this file now and try running this code so as you can see we are getting Nepal so Katmandu is the value then for the key Italy we are getting Rome as the value and for England we are getting the London as the value so guys this is the way that we can use the fall Loop in order to iterate through all the key value pairs inside the dictionary file reading in Python Programming so guys a file is a container in computer storage devices used for storing data so when we want to read from a file we need to open it first when we are done it needs to be closed so that the resources that are tied with the file are read so guys we are going to check this with the help of example how we can open the file in order to read the content of the file and then after that we can close the file as well so basically in Python a file operation takes place in the following order first of all we have to open the file then the next thing is we read the file content and then after reading the file content we close the file so basically the first operation that is opening the file we can use the open method to open a file so as you can see for example over here we are providing the variable name on the left hand side and then on the right hand side we have the open function and then we have the path of the file where the file is stored and then by default it is opened in the read mode we can also use the second parameter and provide the character that is R for reading the file and in order to write into the file we use W as the character over here in this case and then guys after this we can read the file in Python by using the read method so basically this variable that we had used on the left hand side we can use the same variable over here in order to call the function that is read and this will help us in order to read the content into the variable that is read content and then in order to close the file we can simply use the close method so guys let us check all this with the help of example now over here so let's say we have the variable name that is file one and then followed by equal to and then we use the function name that is open in order to open the file and then inside the open and close parenthesis we are going to have the path of the file that we want to open so guys over here I have the test file for which I have written some content over here so we have these four lines inside the test file so what we can do is so guys we have to copy the entire path of this directory this is very important in whichever directory your file is you have to copy the entire path of that directory and paste this into your code so that your code can access that directory and the file that you want to read so basically over here inside the double codes we have to provide the directory path and Then followed by the name of the file that we want to read so over here I'll just copy the name of the file that is the test file and paste this over here followed by txt now guys it is very important that while you're copying the directory path you will be getting this back slashes over here so you have to provide another back slash since this one back slash is acting as the Escape character so you have to provide two back slashes over here every time that you are providing the directory path so I'll just provide extra back slashes over here at every instance in this directory path so guys this is our entire path over here followed by the test file that is the file name and then the extension that is txt now guys the second step is to read this file so the first step is completed that we have opened the file now the next step is to read the content so we will say read uncore content as the variable able name followed by equal to we use this file one variable that we have used in order to open the file followed by Dot and then we have the read method so this method will help us in order to read the content into this read content variable and then guys simply we can print the read content variable so over here we can say read content so let me just save this file now and try running this code so as you can see we are getting all the four lines that are present inside the test file so if I open the test file over here once again it says this is a test line in a test file so the same line is printed over here on the console this is a test line in a test file similarly we have the other three lines it is this is another test line then we have this is third line and then this is fourth line in test file so all those lines that are present inside the test file are being printed over here on the console so guys this is one of the easiest way that you can open the file in a particular directory read the content by using the read function and then you can print the content of the file by using the print function now guys after these operations are completed what you have to do is you have to close the file which is very important so as you can see when we are done with performing operations on the file we need to properly close the file now closing a file will free up the resources that were tied with the file it is done using the close method in Python so basically after printing the content what we can do is simply we can provide file one followed by Dot and then we can have the close method being called so let me just save this file now and before running this code we will have another print function over here and we will print the statement that is file is closed in order to confirm that the control flow has reached the final statement over here in our code so let me just save this file now and try running this code so as you can see all the four lines are being printed over here from the file once again and then we also getting file is closed being printed over here and in this way we have already closed the file by using the close function as well so guys this is the way you can read the content of the file just by using these four lines of code we can easily read the entire content of any of the file that we want to read based on our requirements with open syntax to read the file in Python Programming so guys in Python we can use the with open syntax to automatically close the file and as you can see in this example we have the syntax that is first of all we have the with keyword followed by the open function and then we have the path of the file along with the file name and then the second parameter is the read mode of the file and then we have the as keyword over here followed by the variable name and then after this colon we can read the content by using the read method and then we can simply Print it Now guys the advantage of using this with open syntax in order to read the content of the file is is that it automatically closes the file so previously we had seen that by using these four lines of code we can simply open the file read the content and print the content over here and this fourth line over here that is close method was used in order to close the file that we had opened but this is not required if we are using the with open syntax so let us check this with the help of example now over here I'll just clear these lines of code and simply we will provide the with keyword first followed by open function and then we have the open and close parenthesis and inside this we have to provide the path of the file that we want to read so we are going to read the same file that we had used previously that is the test file so first of all we have to provide the directory path so over here I'll just copy the directory path over here and paste this over here and then we have the file name to be red so I'll just copy this file name and paste this over here followed by txt now guys it is very important that we have the double slash characters in order to avoid any of the issues that might occur due to the Escape characters so over here I'm just providing the double back slash characters at every instance inside the directory path and then after this this is the first parameter which is the path of the file that we want to read and the second parameter that we have is the mode in which we want to open the file so we provide R in this case so this means that we are opening the file in the read mode and then guys after this after this open function we have the S keyword and Then followed by the variable name so let's say we provide file one in this case now this file one that is the variable name can be used in order to read the content of the file so after this colon we can go to the next line and then we can have another variable that is read content in this case followed by equal to and then we can have file one followed by Dot and then we have the read method so guys this line of code is responsible in order to read the content of the file and store the content inside the read content variable name and then guys we can simply have the print function in order to print the content of the file so guys this is the way that we can use the with open syntax along with this we are using the read method in order to read the content and printing the content over here now it is very important to note that we need not have to provide this line of statement that is file 1 do close in this case that's because when we are using the with open syntax the file will be automatically closed after the read operation is completed so I'll just remove this line of code since it is not required so guys let me just save this file now and try running this code so as you can see we are getting all the content of the file that is all the four lines over here that is present inside the test file so we are getting this is a test line in a test file and then we are having the this is another test line so whatever content is there we are getting it over here inside our program let me just remove these third and fourth line over here and then I'll just save this file now inside the test file and then what we will do is we will run this code once again this time we should only get the starting two lines that's because we have removed the third and fourth line from the test file so I'll just save this file and try running this code now so as you can see we are getting this is a test line in a test file and the second line this is another test line so only two lines over here are getting printed so guys this is the way that we can can use the with open syntax in order to read the content of the file print it on the console or do whatever based on the requirements of your project now it is important to note that we need not have to close the file explicitly after carrying out the operations with the file that we have opened so file writing in Python Programming so guys in Python a file operation takes place in the following order so basically first of all we have to open the file then secondly we can write into the file that we we have opened and the last step is to close the file so these are the operations in this order in which we have to follow while writing the content into the file now there are two things we need to remember while writing to a file so first of all if we try to open a file that doesn't exist so a new file will be created in this case so guys we are going to check this with the help of example as well and in the second case if a file already exist then its content is erased and new content is added to the file again so Guys these are the two important things that you should know while writing into the file if the file is not already present then a new file will be created and if the file is already present then the existing content will be removed and the new content will be added into the file so guys the first operation is opening the file over here in which case we can use the open method to open the file and this is the example we have the variable on the left hand side and then we have the open method followed by the name of the file over here along with the entire path if it is present in some other directory and Then followed by the second parameter that is W which stands for the right mode so guys let us check this with the help of example now over here so what we will do is we will say file one which is the variable name followed by equal to and then we have the open method in this case so we have to provide the name of the file along with the directory path inside the parenthesis and the double quotes over here so what we will do is we are going to use use this directory over here in order to create a new file and write the content into the file so guys over here there are only two files that is Python tutorial and test file we are going to create a third file that is output.txt in which we are going to write the content by using the code over here so basically I'm going to paste the entire directory path and in order to avoid any errors I'll just use the double back slashes over here since these are the Escape characters so we provide the double back slashes and then at the end we have to provide the name of the file so I'll simply provide output.txt in this case and then guys the second parameter needs to be the writing mode so over here inside the double Cotes we can say w which means we are opening the file in the right mode in this case now guys we have completed the first step now what is the next step writing into the file so basically writing in a file in a python so after we open a file we use the write method to write the content in the file and this is the way as you can see in this example we have the variable name that is file one followed by Dot and then we have the write method and then the content that we want to write into the file so guys basically what we will do is on the second line over here we will say file one followed by Dot and then we have the write method this write method can be used in order to write the content into the file and it takes certain parameters the parameters will be the string or the integer numbers that you want to print or store inside the file so guys let's say I want to provide this is first line in output file so guys this is the content that we want to write into the file and this is the way that we can use the write function in order to write the content into the file and it takes the parameter as the string which we want to store inside the file now after writing what we have to do is we have to close the file so when we are done with performance operations on the file we need to properly close the file closing a file will free up the resources that were tied with the file it is done using the close method in Python so as you can see in this example we have file 1. close so over here we can simply provide file 1 do close in this case and then open and close parenthesis it doesn't take any parameters over here so guys let me just save this file now before running this code I'll show you the directory once again we have only two files over here that is Python tutorial and test file we are going to have a third file over here that is the output.txt that will be created after execution of this code so before running this code what I will do is I'll have the print statement so that we get the confirmation that the code is executed so we will say file created successfully so this is the statement that will be printed after all the lines of code are executed so guys let me just save this file now and try running this code so as you can see we are getting file created successfully and if we go inside the directory now as you can see we are getting the third file over here that is the output in this case so if we open this file as you can see this is first line in output file and this is what we have printed by using our program this is first line in output file the same statement is being printed over here it is being stored in our output file and guys this is the way that we have created a new new file by using the python codee in a particular directory that we wanted and also return the content into the file by using the two methods that is first of all we have used the open function in order to open the file in the right mode and then we have used the write function in order to write the content into the file now guys let us say we have another scenario in the same file we want to update the first line to this is first line and I'll just remove this in output file cont content over here so we have the short message that is this is first line and then what I will do is we have another statement so again we will have the file 1. write and then we can say this is second line in this case so guys we are having the two lines over here now and this will act as a kind of update now that's because we already have this output.txt file in this directory and now what we are doing is simply we are opening it once again and these lines will be stored in the file and guys remember that while you are opening the existing file what we already saw is the content is erased and the new content is added to the file so basically these two lines will be printed inside the output.txt file and now what we will do is for this print function we will say file updated successfully so guys let me just save this file now before running this code I'll show you that file once again over here we have the output file I'll just open this file we are having this is first line in a output put file so let me just close this now and what we will do is we will run this code so as you can see file updated successfully we are getting this message we'll go to the directory to check what is the content so as you can see both the statements are getting printed over here this is first line and Then followed by this is second line now guys what happened is both the lines have continued on the same line but we can have them on the separate lines as well so what we can do is in our code we can simply provide the slashing character the end of the first line over here so that the control flow goes to the next line while printing this statement that is this is second line so guys let me just save this file and try running this code now once again so it says file updated successfully we come back over here in the directory we open the output file now as you can see this is first line and then we have on the other line This is second line over here so guys in this way we can easily write the content in the file we can also have the multiple lines of content being stor St in the file that we opened by using the Python programming language guys this concept of reading and writing the files are very important as far as your project requirements are concerned so please make sure that you practice on your own so that on different inputs you get different output apart from this can we use the with open syntax in order to write a file so you can try this as a homework for you you can watch my previous video as well in which I have explained you how we can use the with open syntax in order to read the file and in which cas case we don't have to close the file that's because it is automatically handled by this with open Syntax for us so please treat this as a homework for you and comment in the comment section below whether you were able to use the with open syntax in order to write into the file directory and file management in Python Programming so guys a directory is a collection of files and subdirectories so basically a directory inside another directory is known as a subd directory over here and python has the OS module to that provides us with many useful methods to work with directories and files as well so this we are going to check with the help of examples as well it is very important to note that over here we have a very important module that is OS so this package we are going to import in the python code so first of all we are going to check how do we get the current directory in Python by using the get CWD method inside this OS module so let us move to the vs code over here so the very first thing that we have to do is we have to import the OS module so once we have imported the OS module we can simply print the current working directory so over here we have the print statement followed by inside the parenthesis we will use this OS followed by Dot and then we have the get CWD that is the method in order to get the current working directory over here so let me just save this file now and try running this code it will print the current working directory as you can see it is inside the C drive followed by the users and then we have the user folder followed by the python so this is the directory in which this particular code is present as you can see over here we can see the entire PA that is users user and then Python and inside this python folder we have this file that is python undor code so this is the very simple method in order to get the current working directory in Python programming language now let us move to another task now how do we change the directory in the python so we have something called as CHD R this is another method followed by we have to provide the path as the parameter to this particular function so what we will do is let us say we have this particular directory over here I'm going to copy this and we are going to change the current working directory to this particular directory path that we have just copied so what we will do is before this line of code which gets us the current working directory we will change the current working directory over here so again we are going to use the OS module name followed by Dot and then we we have something called a CH HD iir so as you can see this is the method that we can use and then inside this we have to provide the path of the directory to which we want to change the directory so basically I'm going to paste this and this is the path that we are going to change the directory to so let me just save this file now and try running this code so as you can see we are getting some error over here uni code Escape codec can't decode bites in position 2 three so what we have to do is we have to escape these back slashes over here so I'm providing another back slash character over here on all the instances of the back slash characters so let me just save this file now and try running this code so as you can see after changing the directory I'm once again getting the current working directory over here by calling this get CWD method and then you can see this that is the entire path that we have changed the directory to that path is getting printed on the console right now so guys this is the way that we can easily change a directory to any directory that we want now let us move to another task over here how do we list the directories and files in Python so what we are going to do is let us list all the subd directories and the files that are present in a particular directory so I'm going to move one stage back over here so as you can see inside the languages we have datart Java and python so we want to list down all the sub directories over here so how do we do that we have something called as list di method that will help us in order to list all the directories and the files so over here in the vs code what I will do is I'll go one step behind so we are going to remove this python we have to go up to the languages part and then after this what we will do is we will simply print the directory list so over here we have OS followed by Dot and then we have list directory so as you can see we have used the chdir method in order to change a directory and inside that directory I want to list all the subdirectories over here and this should be followed by the open and close parenthesis because this is a function so let me just save this file now and try running this code so as you can see we are getting do Java and then python so Guys these are the subfolders that are present inside this directory that is do Java and python let us move one step behind once again over here we can see programming for beginers and there are multiple sub directories and files as well so what we can do is over here I'll just move one step back I'll just remove these languages part over here and then let me just save this file now and try running this code as you can see we are getting all the files and sub directories we have description python. txt then description. txt then these are the subdirectories without any extensions over here then we have thumbnails 1 thumbnails 1. PPT which is a PowerPoint presentation we have videos and then the YouTube channel as well which are subd directories next let us move to another task so over here as you can see making a new directory in Python so how we can do that by using the mkdir method so basically this is another method inside the OS module so in order to make a new directory what we will do is again we will go to our original directory path over here I'll just copy this and paste this over here inside the code so we'll just paste this over here in order to change the directory and I'll just Escape these back slashes so we just need to provide another back/ character in order to escape them so we have escaped all the instances of the back/ characters over here so basically first of all we are changing the directory and inside this directory now after this folder over here that is python which is having just three files over here we are going to create a subd directory so basically in our code what we will do is over here instead of print statement we have the OS followed by Dot and then we have mkd so this method is being suggested by the vs code and over here inside the parenthesis it is going to take the parameter which is going to be the name of the subd directory so we are going to provide the name as the test so let me just save this file now and try running this code so over here nothing is being displayed over here that's because we have not provided any of the print statements but over here if we come to our directory as you can see it has created a new subdirectory that is test over here which is going to be an empty subd directory so it doesn't have any directory or files over here so basically this is the way that we can create the subd directories now let us move to another task over here how do we rename a directory or a file so basically we can use the rame method that is the rename function inside the OS module and provide the first parameter as the old name which is the existing name and the second parameter is the new name that we want to rename it to so let us move to the vs code over here what we will do is we have already created the directory so I'll just remove this line of code and then we will say OS followed by Dot and then we have something called as rename method so this method takes two parameters the first parameter is the name of the directory or the file that we want to change the name of so let us say I just copy this directory name that is test over here and then I'll just paste this over here so we have test and then let's say we want to rename it to test one so I'll just provide test one over here so this test should be renamed to test one and then as a confirmation I'll just provide the print statement and then we will say rename successful and then let me just save this file now and try running this code as you can see rename successful is already printed over here if we go to our directory as you can see test one is being displayed over here so the directory name which was named as test previously has been renamed to test one over here so guys this is the way that we can rename a particular directory in the same way we can rename the file names as well now let us move to another task over here how do we remove a directory or a file in Python so we can simply use the rmd method in order to remove the directory and remove method in order to remove the the file name so this method that is remov in order to delete the file I'll leave it up to you as a homework for you so that you can practice on your own and comment in the comment section below whether you were successfully able to delete the file in this example we are going to remove the directory that we have just created so we are going to remove this test One Directory so what we have to do is I'll just remove this line of code and then we will say OS followed by Dot and then we have rmdir method and then inside this it takes the param as the name of the subd directory that we want to remove so we will say test one over here and then as a confirmation we will say delete successful so let me just save this file now enter running this code as you can see delete successful is printed and when we move to the directory as you can see the test one directory that we had created is no longer existing right now so basically we have successfully deleted the directory in the same way you can delete the files as well by using the remove method which is the homework for you so guys practice on your own so that on different inputs you get different outputs we have seen a lot of functions that is present inside the OS module apart from this you can also provide the OS module over here followed by Dot and you can see there are many other methods that we have not covered but you can practice on your own so that based on the requirements you can use them in order to accomplish your task exceptions in Python Programming so guys an exception is an unexpected event that occurs during the program execution so let's say for example if we have this divide by zero variable and then we do the assignment in such a way that we divide this number that is five by 0 then we get divide by Z exception that's because this is a runtime exception and we cannot divide any number by zero so the above code causes an exception as it is not possible to divide a number by zero errors that occur at run time after passing the syntax test are called exceptions or logical errors so guys basically there will be many exceptions that you will come across when you are going to write python programs and these exceptions are going to be the runtime exceptions after passing the syntax test that we have already seen in our vs code editor so basically these exceptions occur when we try to open a file for reading that does not exist that is file not found error so basically this is one of the exceptions in the Python programming language in which case if let's say you are trying to open a file which is not present in the directory then we will have file not found error over here then if we try to divide a number by zero then we will get zero division error and then again if we try to import a module that does not exist then we are going to get the import error and so on so basically there are many builtin exceptions that we can see by using this print statement inside the directory we have this locals and then we specify this builtins in order to get the list of exceptions that is already built in in the Python programming language so this we are going to check with the help of example as well what we are going to do is we are going to see how the exception occurs in the Python program so over here let's say we have the variable that is number over here and we have the number that is 5 divided by 0 so in this case we are dividing a number by 0o syntactically this is correct over here vs code will not throw any error but during the run time we will get the error which we call it as the exception so over here when we print this number so we say value of number is followed by colon and then let's say we provide this number variable so let me just save this file now and try running this code so as you can see we are getting this zero division error division by zero which is not possible we cannot divide any number by zero now let me show you another exception let's say we are going to open a file in this particular directory and the file name is test one which doesn't occur inside this directory so let me just copy this directory part and we will open that file which is test one which is not present so over here we provide the variable name as file one it is equal to we say open and then with this we have the parameter that is the directory path we have just copied over here we will just Escape these back slash characters so that we don't get any error over here for the backs slashes and then at the end what we are going to do is after this we are going to provide test 1.txt now this file name as I have showed you over here it is not present test one is not present over here so we are trying to open that by using this test 1.txt file name so now what we will do is simply we will save this file enter are running this code now so as you can see file not found error is being displayed no such file or directory and then this file name is being mentioned over here what if we provide the correct file name let's say I provide this test file as the name of the file so I'll just copy this file name and paste this over here at the end instead of test one so I'll just paste this over here and then let me just save this file now and try running this code so now as you can see nothing happens we are not printing anything but there is no exception that is being printed over here on the terminal that's because this particular file name is actually present and hence there is no file not found error that is being displayed over here like how we have seen previously with the test 1.txt file so Guys these are certain exceptions that might occur when you are going to work with the python projects and such exeptions are inevitable we cannot avoid them but we can handle them so we are going to see exception handling in the upcoming videos as well how we are going to handle them but it is very important for you to know that these exceptions might occur when you're going to work with the Python programming language now guys let us see the list of all the builtin exceptions that are present inside the Python programming language so I'll just copy this line of code and then we'll paste this over here so as you can see this is a print statement and inside this we have the DI fun function and inside that we also have the locals function and then we provide the builtin attribute over here so let me just save this file now and try running this code as you can see we have got the list of all the exceptions that are present inside the Python programming language so there are multiple errors that might occur which includes arithmetic error then we have assertion error attribute error base exception so there are many errors that you can see over here file not found error this is one of the exceptions that we have just checked and then we also have this zero division error which we just saw when we divide any number by zero so guys there are multiple exceptions that might occur which are already built in inside the Python programming language and you can practice on your own to see which exception occurs on which particular input exception handling with try accept blog so guys basically it is important to handle exceptions that we have already seen in Python we use the try accept Block in order to handle the exception and this is the syntax in order to handle the exceptions in Python so basically first of all we have the try keyword followed by the colon and then we have the code that may cause the exception for example we can have a number being divided by zero in which case Zero division error might occur which is the exception and not only the zero division exception but if any exception that occurs inside this Tri block we can have the accept block just following this dry Block in order to catch that exception so basically in inside this accept block we have the code in order to run when the exception occurs so guys this we are going to check with the help of examples now so over here in the vs code what we will do is let's say we want to divide a number by zero so we want to provide that code inside the tri block so we have this TR keyword followed by the colon and then over here what we will do is we will say number variable it is equal to 10 / 0 so guys if we try to run this code over over here 10 ided 0 for which the zero division error will occur which is one of the exceptions in the Python Programming so what we have to do is we have to catch that exception inside the accept blog so over here what we have to do is we have to provide the accept keyword followed by the colon and then we can have the code in order to handle that exception so over here we can simply provide the print statement and then we can say number cannot be divided by 0 Z over here so guys this is the code that we are going to execute if the number is getting divided by 0o and the zero division error is occurring so let me just save this file now and try running this code so as you can see number cannot be divided by zero this line of statement is getting executed over here and this is the line that is getting printed now guys what would have happened if we don't have this try and accept block so let us just comment out these blocks over here so instead of this we are just having number it is equal to 10/ by 0 and then let me just comment out this line as well so number is equal to 10 / 0 only this line of code is there let me just save this file and try running this code as you can see we are getting zero division error division by zero and this is the exception that we are getting on the terminal so over here since we have not properly handled this exception this is the way that we are getting the output but we can have the proper output in this way like we can have a particular statement being printed by using this try and accept block so over here we have just provided the try block and after this we have provided the accept block as well we have provided a beautiful statement that is a user friendly statement which says number cannot be divided by zero and when we just save this file and try running this code now it says number cannot be divided by zero if the exception is occurring over here inside the tri block now guys let's say if there is no exception occurring inside the tri block so still the print statement will be executed let us just check that so over here instead of 10 / 0 we will say 10 / 2 in which case the answer will be 5 and that will be stored in this number variable and there is no exception that is occurring over here on this line of code so let me just save this file now what we will do is as a confirmation we will come out of this try and accept blocks and over here we will say end of code so we can just confirm that this is the line that is getting executed at the end of the code so when here let me just save this file and tryy running this code now as you can see end of code is getting displayed now that is because there is no zero division error that is occurring inside the tri block that is because we have changed the expression from 10 / 0 to 10 / 2 now guys there is another thing that you can do catching the specific exceptions in Python so as you can see this is the example over here we have the tri block and then let's say we have the variable name as even numbers and this is the python list as you can see we have 2 4 6 8 which is the list of numbers all are even numbers and what we are trying to do is we are going to print the even numbers with the index five over here but guys as you can see this is the index zero then we have index one then we have index 2 and then three so three is the final index the total length of the list is four and three is the final index that we can access but we are trying to access the index that is five so basically we should get the index out of bound error over here but we can also specify the different exceptions that we have seen so far so basically while providing the except keyword we can provide the zero division error over here which will say denominator cannot be zero and then we also have the accept keyword followed by the index error so in this case since we are having the multiple except logs it depends on the control flow the control flow will check that which type of exception is occurring and based on that exception it will try to match that exception is this exception related to to zero division error no in this case so is it matching with the index error yes since it is related to the index that we are trying to access which is not possible so it will print this statement that is index out of bound so let us check this block of code over here I'll just copy this and paste this in the VSS code since I'm little bit lazy in order to type all this code once again so over here let me just save this file and try running this code now as you can see it says index out of bound that's because the exception that is matching in inside this Tri block is the index error and this is the print statement that we are supposed to print if there is an index error that is occurring now guys let's say you want to print this denominator cannot be zero statement so what we have to do is we have to make sure that inside the tri block there is a divide by Z expression so what we will do is over here I'll just remove these lines of code and we will simply say number it is equal to 10 / 0 so in this case divide by 0 expression is is occuring and that is why we will get the zero division error and in this case we should get this statement that is denominator cannot be zero so let me just save this file now and try running this code as you can see denominator cannot be zero statement is getting printed so guys it depends on you you can have the specific exceptions being specified over here and each exception will be handled differently this is just a print statement that we have included over here you can have any code inside these accept blocks that you want to use based on your requirements of the project but guys remember that whatever matching exceptions that is occurring inside the tri block the control flow will try to match with those exceptions one at a time and once it matches with a particular accept block it will try to execute those lines of code inside that block now guys let us move to another task over here python try with lse claw so basically in some situations we might want to run a certain block of code if the code block inside try runs without any errors so for for these cases you can use the optional else keyword with the try statement so guys what happens is sometimes there will be no errors that are occurring over here I'll just remove these lines of code so I'll just keep one except block over here and I'll just remove this exception as well that is zero division error so what we are doing over here is denominator cannot be zero I'll just save this file and try running this code so this denominator cannot be zero is getting printed over here but guys what if this denominator is not zero let's see if I provide the denominator as two so in this case this statement will not get printed that's because there is no exception that is occurring and if there is no exception occurring no code in the accept block over here will get executed but what if we want to execute some line of code so over here we can simply provide the else part so basically what happens is let's say inside the tri block if we don't have any exception that is occurring so no block of code that is inside the except block will get executed uted but let's say in the end if we have this else block so whatever code we provide over here it will get executed only when there is no exception that is occurring over here inside the tri block so over here what we will do is we will say print we will simply say inside L block so guys this is the code let me just save this file now and try running this code as you can see there is no denominator cannot be zero that is getting printed but over here we are getting inside lse block that's because since there is no EX ception that is occurring the control flow is not going inside the except block but it sees that we have the else block over here so it executes those lines of code inside the lse block now guys what if there is an exception that is occurring so let's say if we provide this as 10 / by 0 as the expression so let me just save this file now this line should get printed over here but whether this lse part will get executed let us check that so let me just run this code once again as you can see denominator cannot be zero is getting printed but the code in the lse part is not getting printed that's because since the exception has occurred we are getting into the accept block but not into the else block so guys this is very important in case the accept block is not getting executed we can have the else Block in order to execute some lines of code that you want to execute let us move to another task over here we have something called as python try finally so guys this is another important concept as far as exception handling in Python is concerned so basically in Python the finally block is always executed no matter whether there is an exception or not so the finally block is optional and for each Tri block there can be only one finally block so guys what we will do is basically the understanding behind the finally block is irrespective of whether there is an exception that is occurring or not the code in the finally block will be executed so here we will simply have the finally keyword followed by the colon and then we will say inside finally blog so over here we will simply have double codes and inside this we will say inside finally block so guys first of all we will check when there is an exception that is occurring this line of code will get printed and we will not go inside the lse part but the control flow will go inside this finally block over here so let me just save this file now and try running this code so as you can see denominator cannot be zero which is this line of statement which is getting printed and then it is not going in the lse part but it is going in the finally part so it says inside finally block so over here exception has occurred and the control flow is going in the finally block now let us say there is no exception that is occurring we say 10 / 5 over here so let me just save this file now enter I running this code it says inside lse block so basically there is no exception that is occurring so the control flow is not going inside this except block but it is going inside the else block so over here as I have told you if the control flow doesn't go inside the accept block and if there is a else block basically this line of code will get executed and then at the end we have the finally block which is getting executed as you can see inside finally block so irrespective whether there is an exception that is occurring or not inside the tri block the finally block will be executed every time now guys where this thing is important basically let's say if you have the database connection or if you have file opened so you can close that file or close that database connection inside the finally block over here after carrying out your operations in the tri block which might have certain exceptions that might occur during the run time so guys during such instances the finally block becomes very important in order to execute those lines of code irrespective whether there was an exception that has occurred inside the tri block or not custom exceptions in Python Programming so guys in Python we can Define custom exceptions by creating a new class that is derived DED from the builin exception class so guys that we are going to check with the help of examples as well as you can see this is the syntax we have the class keyword followed by the space character and then we have the name of the exception that we want to create which is going to be the user defin exception and this is the way that we inherit another class inside the parenthesis after the user defined name we have the exception class name so guys whatever attributes and behaviors that are present inside the exception will get inherited to this custom error user defined exception over here and then we can have a statement over here inside this custom error as to why this error is being raised over here and then followed by the pass keyword and then guys we can have our own code that is the try and accept block and then inside the try block based on the conditions we can raise this custom error based on our requirements and once it is raised it will be handled by using the accept keyword over here followed by the custom error exception and then we can can have the block of code in order to handle the exception so guys let us check this with the help of example now over here first of all we are going to have the user Define exception so over here let's say we have the class and the exception that we are going to have is let's say we are having the voting application and we have to check whether a particular person is having the age that is greater than 18 if the age is less than 18 and the person is not eligible to vote then we are going to call this particular exception that we are going to fine so we are going to Simply name the exception as the age error over here so we have age error and then it should inherit the exception class so over here we are going to say exception and Then followed by colon and then we can simply say raise when person age is less than 18 so if the person age is less than 18 he or she is not eligible to vote and this is the exception that is going to be raised so over here we are going to to have the pass statement and now guys what we will do is we will have our lines of code over here inside the tri block so over here we will ask the user in order to enter the age so over here we will have age variable it is equal to we are going to take the input from the user and it says enter age and then we have colon and then what we will do is we will check if this age is less than 18 so we will simply say if age is less than 18 followed by colon if the entered age is less than 18 we have to raise this age error exception so I'll just copy this and paste this over here first of all we have to use the raise keyword followed by the age error over here so basically if age is less than 18 then we have to raise the age error and then what we can do is we can catch that error over here inside the accept block so accept block followed by the age error over here and then we have the colon and then we can simply say say print and over here person is not eligible to vote so guys this is a statement that is going to be printed when the age is less than 18 but what if the age is not less than 18 and if it is greater than 18 so the person is eligible to vote so what we will do is we can have the else part over here which will get executed when this exception is not occurring inside the Trib blog so over here we can simply provide the print statement and we will say person is eligible to vote now guys this statement we can also have inside the tri block as well we can also have after this if statement we can have the else part and the same print statement over here so it depends on you how you want to structure your code this is another way in order to provide the else part and this will be executed only when there is no exception that is occurring inside the tri block and then optionally you can also have the finally block as well which will help you to execute certain lines of code irrespective whether the exception has occurred inside the triy block or not so guys let me just save this file now and try running this code now so it says enter age so let's say we provide the age is 23 over here and then when we press enter it says less than not supported between instances of Str Str and int so guys by default whenever we take any input from the user it takes the input as the string so basically this age data type is string right now we want to convert it to the integer so we can simply convert this string into integer over here we can provide the int and inside the parenthesis we can take the entire input over here so guys let me just save this file now and try running this code once again we will provide the age as 23 and when we press enter it says person is eligible to vote so basically what we have done over here is we have converted the string data type to the integer data type by enclosing this entire input by the in and now let us run this code once again now so that we can catch this exception when the AG is less than 18 so guys let's say when the age is 17 over here in which case the age is less than 18 right now when we press enter it says person is not eligible to vote so what has happened over here is since the age was less than 18 the raise age error has helped us in order to throw this exception that is the age error and what has happened is the control flow has come over here to this accept block and it printed this line of code that is person is not eligible to vote so that is the same string that is getting printed over here person is not eligible to vote and previously it was printing this statement that is person is eligible to vote when the age was greater than or equal to 18 now guys when the age is 18 Again the person will be eligible to vote that's because the condition that we have given over here in order to raise the error is age less than 18 so let us check that once again over here when we run this code once again when we say 18 as the age it says person is eligible ible to vote so the person will be not eligible to vote only when the age is less than 18 and not equal to 18 so guys this is the way that we can create our own user defined custom exception over here and call that Exception by using the raise keyword inside the tri block and catch that exception using the accept block over here and handle it accordingly based on our requirements object oriented programming in Python so guys we are going to check the classes and objects with the help of example python is a versatile programming language that supports various programming Styles including objectoriented programming through the use of objects and classes which we are going to see with the help of examples as well now an object is any entity that has attributes and behaviors so for example a parrot is an object and it has multiple attributes as you can see there are multiple attributes that can be present which is name then we have age color and so on apart from that it also has certain Behavior such as whether it can dance or not so dancing is one of the behavior whether it can sing or not so singing is another Behavior now I'm not sure whether a parrot can really dance or not but these are certain behaviors that we can consider in order to understand classes and objects now guys similarly a class is a blueprint for that object so basically these objects are having the attributes and behaviors and the values will be stored in these objects but the blueprint will be present inside the class so basically this class can be treated as a template which has certain attributes and behaviors being defined over here and we can create multiple objects related to that class so we are going to check with the help of example how do we create a class parrot with the attributes as name and age so let us move to the vs code over here the very first thing that we have to create is the class so basically we have to provide the class keyword followed by the name of the class so let's say the parrot is the name of the class over here and then we have a colon and then we can have different attributes so one of the attributes is name over here we will assign it with a empty string and then we have age as well we will assign it as zero over here as the initial value now Guys these are the two attributes that we have defined for this class that is pared now we can create different objects out of this class now this class is acting as a blueprint or we can say as a template in order to create multiple objects so we will come out of this class and what we will do is we will create the objects for this class so let's say we have parot one followed by equal to operator and then we can simply provide the name of the class that is parot followed by the open and close parenthesis so this is the way that we can initialize an object for this class that is parad and then we can use this object in order to initialize these attributes that is name and age so over here what we will do is we will use this parot one object followed by Dot and as you can see we are getting getting this name and age being Auto suggested by the vs code that's because we have already defined these attributes inside this blueprint that is class parrot so over here we are going to provide the name as the name of the parrot one object so let's say we provide the name as blue over here and then let's say we also want to provide the age of this parrot object so again we will provide parrot one followed by Dot and then we have the age attribute let's say it is 2 years old so we have two as the parr's age now guys let's say we want to create another object with another name and age so again we will copy these lines of code and paste this over here what I will do is instead of parot 1 we will say parot 2 because this is another object so this is the second object that we are creating by using this parrot class and over here again we will say parot 2. name and parrot 2. AG so let's say the name of the parot two is Vu and its age is five over here so 5 years so guys over here we have we have created two objects for this class that is parot similarly we can create any number of objects that we want it's very important to note that while creating the objects we provide this variable name on the left hand side and on the right hand side we provide the name of the class followed by the open and close parenthesis and then we can call the different attributes of that class in order to initialize them now guys after these objects are being initialized with their names and age we can simply print them on the console so what we can do is we can have the print statement with the formatting being enabled so over here inside the print statement we can have the F followed by the double codes and then what we can do is open and close curly braces inside this we can have the parent 1 do name over here is and Then followed by curly braces parot 1. Ag and then we can have years old so guys basically what is happening over here is inside the open and close curly braces we can provide the variable names in all order to get their values being printed inside the print statement so this parot 1. name will give us the value of this variable that is blue over here and then followed by is and then again we will get parot 1. AG which is two in this case so blue is 2 years old so this is a statement that should get printed and then similarly we can copy this line of code and paste this over here and instead of parot 1 we can simply say parot 2 so we have parot 2. name and then par 2. AG so guys let me just save this file now and try running this code as you can see blue is 2 years old this is what is getting printed by using the first print statement and over here again we are getting Vu is 5 years old so this is the second print statement that is helping us in order to print this particular statement so guys this is the way that we can easily create a class in this case we have created the pared class and we have two attributes that is name and age you can have any number of attributes for the class based on on your requirements and apart from that while creating the objects you can have the values for those attributes based on those particular individual objects and then you can call those attributes by using the objects that you have just initialized by using this statement that is the object on the left hand side followed by equal to operator and then we have the class name followed by the open and close parenthesis this is called instantiating of the object or we can also call it as initializing an object in Python Programming inheritance in Python programming so guys inheritance is a way of creating a new class for using details of an existing class so this we are going to check with the help of examples as well the newly formed class is a derived class which is also called as a child class and similarly the existing class is a base class or the parent class so guys what we are doing over here is we are already creating a parent class that is also called as a base class over here and then we also create a child class for which the attribute are derived from the parent class from here and this is what is called as The Inheritance now what will be inherited all the attributes provided that they are public along with the methods will be inherited by the child class so guys let us check python inheritance with the help of example now over here so let us switch to the vs code first of all we will create the parent class so let us say we have the class that is called as animal over here and inside this animal class we will Define two functions that is eat and sleep so we will have DF keyword followed by eat that is function one and then inside the parenthesis we are going to have the parameter that is self always remember guys whenever we are calling the function inside the class it is going to take a single parameter which is going to be the object by default so we need to catch that object with any name as a parameter over here so we have given the name of this parameter as self over here so that we can identify that this is the object and then we can use this object as well in order to access its attributes and inside this eat function we are going to have a simple print statement and we will say I can eat so guys this is a statement that is going to be printed when we call the eat function using the animal object and then similarly we will have the Sleep Method as well so we have def keyword followed by Sleep Method and then again we will have the parameter as the self which will be passed by default and then inside this again we are going to have the print statement and we can say I can sleep so Guys these are two methods or functions that we have defined inside the parent class that is the animal class now guys how do we inherit these methods to another class so let's say we have another class over here which will be a child class of the animal class so we are going to have another class and let's say the name of the class is dog over here and then in order to have its attributes and functions of the super class that is the animal after this name of the class that is dog we have to provide open and close parenthesis and inside this parenthesis we have to provide the name of the super class that is animal in this case so this particular class that is animal we want to inherit its attributes and functions inside the child class that is dog so this is the way that we inherit the super class and now we can have a colon over here and then we can have the attributes and the functions of this class that is dog class separated so over here we are going to have the DF keyword followed by let's say I'm simply going to have have the display method over here and it is going to take one parameter that is self and then we are simply going to print that we are inside doc class so this particular statement will be printed whenever we are going to call this display method over here so guys this is the way that python inheritance Works what I will do is I'll just zoom out little bit so that you can see the entire code at once so over here we have created the super class that is the animal class and then we are creating another class that is called as the child class and after the name of the child class we are providing the name of the super class over here that is the parent class inside the open and close parenthesis and what this will do is the eat and sleep methods will be now available inside the dog class as well so guys why this is important so let us come out of this class now and what we will do is let us create the object of this class that is the dog class so what I will do over here is we will create dog one that is the object of the dog class class followed by equal to and then the name of the class that is dog over here so we have created one object of the dog class now guys ideally we have seen that we can call the display method which belongs to the dog class so we can do that over here so I'm going to call the dog one object followed by Dot and then we have the display method so after this we are going to have the open and close parentheses let me just save this file first and try running this code now so as you can see we are getting we are ins inside dog class which means this statement is getting printed now guys do we have any other method apart from this display method yes we do have and those are eat and sleep methods why so because we have inherited the methods from the animal class by using the python inheritance so basically we can use this object name that is dog one in order to call eat and sleep methods over here so if we call both the method so I'll say dog one followed by Dot and then as you can see vs code is in us this eat method as well so we have eat followed by open and close parenthesis and then again we will call the dog one object followed by Dot and then Sleep Method is also being suggested by the vs code so we are going to call both the methods over here so let me just save this file now and try running this code so as you can see we are getting all the three statements that is we are inside dog class I can eat and I can sleep which are the statements that are being printed by using these methods respectively so guys this is the power of python inheritance we can use the different attributes and the methods that were defined in a super class inside the sub class by using the object of the child class over here which is also called as the subass over here guys it is very important to note that whenever we are defining the methods inside the class we need to provide one parameter over here which is going to be the object that will be passed so behind the scenes what is happening over here is when we call dog 1. display over here the dog one object is being passed with this display method even though we are not providing any parameter over here but behind the scenes the object is being passed over here and it needs to be caught by this particular method what happens if we don't provide this parameter let us check this so I'll just remove the self keyword over here and I'll just save this file now over here we are not receiving any parameter as we can see so let me just run this code now so as you can see type error dog. display takes zero positional arguments but one was given so basically behind the scenes this dog one object is being passed and we need to have a parameter over here while defining the function and that is the reason why we had given this self parameter name in order to identify that this is the object of this particular class that is dog so let me just save this file now and try running this code once again so as you can see there are no more errors that are getting displayed and all the three statements are getting displayed over here now guys what are the uses of inheritance so as you can see since a child class can inherit all the functionalities of the parents class this allows code reusability so as you can see over here we need not have to provide the eat and sleep methods once again inside the dog class and we were able to access both these methods by using the object of the dog class without actually providing the definition of those methods over here once a functionality is developed you can simply inherit it no need to reinvent the wheel this allows for cleaner code and easier to maintain now since you can also add your own functionalities in the child class you can inherit only the useful functionalities and Define other required features so guys based on your requirement it depends on you which class you want to inherit and create the child classes and the parent classes over here based on your project requirements Constructor in Python Programming now guys a python Constructor is a function inside a class that helps us to initialize certain attributes of a class so far we have seen creating the class attributes and the functions and while initializing the attributes of the classes object we use the object name followed by the dot and then the attribute name but is there a better way in order to initialize those attributes inside the class yes it is so we have something called as double * underscore followed by in it and then again double times underscore followed by open and close parenthesis which is a Constructor function that is called whenever a new object of that class is instantiated so guys let us check this with the help of example example now so let us move to the VSS code what we will do is we will create a class that is called as the parot class over here and we will Define two attributes so over here we have the name which is of the string data type so let's say we have the empty string initially and then let's say we have the age attribute which is defined as zero over here which is the integer so guys what we will do is let us say we want to create the object of this class so what we have to do is let's say we provide the object name as parot one followed y equal to operator and then we have the name of the class that is parent followed by open and close parenthesis now guys so far what we had done is in order to initialize both these attributes we were calling this object name followed by Dot and then the name of the attribute so let us do that first so we are going to use the parot one object over here followed by Dot and then let's say the name of the parrot it is blue over here so we provide the name of the parrot and then we also provide the AG age of the parrot so let's say parrot 1. AG it is equal to 2 years old and then we can simply print the name and age of this parrot so let us say we provide the print method over here and we provide the parrot one object so parot one followed by Dot and then we have name is and then again we want to get the age so parot 1. age and then we have years old so over here blue is 2 years old will be displayed so let us save this file now and try running this code so as you can see blue is 2 years old so guys this is the conventional way that we had seen so far in order to instanciate an object of the class and also assign the values to the attributes of that class so is there a better way in order to assign these values to these attributes yes we can do so by using the Constructor so what we can do is we can simply remove these two lines of code over here so I'll just remove them and then guys inside this class we are going to have the innit method which is the Constructor so over here we are going to have the DF keyword followed by double * underscore and then we have the in it so as you can see vs code is suggesting us this method which we are going to use so in it and it is going to take one parameter by default as I have already told you previously whenever we are going to call any method inside the class the object that is used in order to call that method is also passed by default behind the scenes so the self parameter represents the object of this parro class over here I'll just remove this part and what we are going to do is we are going to take both these attributes that is name and age as the parameters so over here after this self we are going to have comma and then we are going to have name one so guys I'm naming this as name one so that you don't get confused between this name and this name one so this name one will be passed as the parameter when this Constructor is being called over here and then followed by comma we also have age one and then what we can do is for this self that is the object followed by dot we can have name it is equal to name one over here and then again we can have the self followed by Dot and then age it is equal to age 1 so what we are simply doing over here is the name and age attributes of this object the object is being represented by self and then self. name it will be assigned with the value of this name one that is being passed same thing for the age as well the self. age the value will be pass by using this age one parameter over here and both these values will be assigned to name and age attributes now guys when exactly this Constructor is being called so basically whenever you are going to create an object and call this class over here that is the parrot class The Constructor will be called so while instantiating this object we also need to pass the name and age for this particular instance of the class so what we will do is let's say we take the same name that is blue over here so we provide the first parameter is the name of the parot followed by comma and then we provide the age that is 2 years old which is the second parameter so guys when the control flow comes over here it sees that the class is being called with these two parameters and we also have the Constructor so basically this parot one will be assigned to this parameter that is self and then this name and age will be assigned to this name one and age one and this name and age will be assigned those values respectively and then we can simply have this print statement in order to print the same statement that we had seen previously as well so let me just save this file now and try running this code so as you can see we are getting the same statement that is blue is 2 years old that's because we have provided the same name and the same age let's say we provide a different name over here so let's say we provide Vu and it is 5 years old so let me just save this file now and try running this code as you can see Vu is 5 years old is getting displayed over here so guys in this way what we have done is while instantiating the op object we are passing the values or the attributes that are present inside that class for which the values are getting assigned now guys another important functionality of this Constructor is we can also remove these attributes that are being declared so there is no need of declaring these attributes over here so I'll just remove these lines of code over here and what exactly is happening is while this Constructor is being called the interpretor comes to know that this name and age are the attributes of this class that is the parent class over here and it assigns the values that are being passed to name one and age one so to make it more simple let us say we name this parrot as first parrot over here for which the age is 2 years old and let's say I provide another parrot so I'll just copy this line of code and paste this over here and then I provide this as parrot to and then we can say second parrot over here which is 5 years old so we'll say 5 years old and then we will print both the parrots over here inside the print statement I'll just copy these lines of code and paste this over here and then we can say parot 2. name and then again over here parot 2. AG so let me just save this file now and try running this code so as you can see first parot is 2 years old and second parot is 5 years old both the statements are getting displayed over here so guys this is the way that you can Define The Constructor inside the class by using the underscore uncore init method and Then followed by the self that is being passed automatically as one of the parameters and then you can have any number of parameters being passed over here inside the Constructor which can be used as the values for the attributes of the class that you have defined and those values need to be passed whenever you are creating a new object for that class encapsulation in Python Programming so guys encapsulation is one of the key features in objectoriented programming because encapsulation refers to the bundling of attributes and methods inside a single class so we have seen so far the various attributes and methods that we have been been creating inside the class that functionality of the Python Programming is called encapsulation now it prevents outer classes from accessing and changing attributes and methods of a class so far we have seen that all the attributes and methods were public in nature but in this case we are going to create some private attributes which cannot be directly accessed outside the class so this also helps us to achieve data hiding over here now in Python we denote private attributes using the unders score as the prefix either we can have the single underscore or the double underscore so let us check this with the help of example now over here as you can see in this example we have the class computer and then we also have the Constructor that is in it followed by the self which is the parameter for that object that is being passed and then self. Max price so as you can see over here we have the prefix that is double uncore followed by Max price so this is one of the attributes of this computer class over here and we are providing the value of 900 to this Max price over here inside the Constructor now apart from this Constructor we have more couple of functions inside this class as you can see we have the sell function over here which simply prints the selling price is the self followed by Dot and then the max price so basically this statement will help us in order to print this value that is the max price value of the computer and then we have another method that is set max price which takes the object that is using the self and then it also takes the price price over here so in case you want to set another Max price for this computer you can use this set max price function what it will do is it will simply update the value of the max price of the computer as you can see with this particular statement so guys let us check this with the help of example now what I will do is I'll simply copy these lines of code since I'm little bit lazy in order to type them again so we are going to paste it inside the vs code so over here what we are going to do is we are going to print the max price of the computer computer so first of all we are going to create the object that is comp one over here followed by equal to and then we have the computer class name so basically since a Constructor is not taking any other parameter apart from this self which is the object itself so we need not have to provide any parameter over here while instantiating this object that is comp one now what we will do is simply we will call the cell function over here that is this particular function so we can use the comp one object followed by Dot and then we have the cell function so after this open and close parenthesis so let me just save this file now and try running this code so basically this print statement should get executed and it should be displayed on the terminal so I'll just run this code now as you can see selling price is 900 so what exactly happened is when the control Flow came over here that is comp one it is equal to computer the Constructor of this class that is the init method was called and inside this what we have done is this private attribute so guys BAS basically this double uncore denotes that this is the private attribute of the computer class so basically this private attribute was initialized inside the Constructor and a value of 900 was being assigned to this particular attribute and then what we did is when the control Flow came over here that is while calling the sell function basically this print statement was executed so selling price it is equal to this self. Max price got printed over here which is 900 right now now guys let us do another thing what we will do is we will try to access this private attribute from outside of this class so over here we will call comp one once again followed by Dot and then we can call this private attribute that is the max price so as you can see this Max price is getting suggested by the VSS code so we will call this Max price and what we will do is we will try to assign another value that is 1,000 over here to this Max price and then again let us say we want to call this print statement so again we will call this cell method over here so I'll just copy this line of code and paste this over here let me just save this file now and try running this code so as you can see selling price 900 this is the statement that was printed by calling the first sell method and then the second time the sell method was called again the selling price was equal to 900 so guys why so that's because this Max price is the private attribute and we directly cannot access this attribute by using this object we need to have another method inside the computer class in order to assign another value to the private attribute and that is why we have this method that is the set max price along with the parameter price which it is going to take in order to replace the existing Max price over here so what we can do is we are going to call the comp one object once again followed by Dot and this time instead of directly accessing this Max price we are going to call this set max price over here so set max price and it is expecting two parameters the first parameter is the self which is going to be passed by default which is going to be the comp one object and then the second parameter is the price which we are going to pass to this method so again what we will do is simply we are going to provide this th000 price that we try to assign to the max price directly over here so set max price and then again let's say we want to print the selling price over here so again we are going to call the sell method once again so comp 1. sell so over here the only difference is we are calling the method that is the set max price and we are passing the value of the new Max price over here which is going to be passed to this price and then the max price value will be the updated price that we have just said so guys let me just save this file now and try running this code so as you can see selling price 900 and then selling price 900 once again and the third time that we tried by using the set max price over here it was 1,000 so this time it is selling price it is equal to 1,000 so guys by using this method in order to set the value of a private attribute we were successfully able to update the value of this private attribute and this is the main functionality which we call it as encapsulation as far as objectoriented programming in Python is concerned so guys let us run this code once again by a different value let's say the max price over here we set it to 2,000 so let me just save this file now and try running this code so this time the selling price is coming over here once again as 2,000 and guys this this is the way in order to hide certain attributes of a class you can have them as the private attribute by prefixing and use the different methods in order to set their values by using the objects of that class method overriding in Python Programming so guys method overriding in Python is a way of letting method of a subass override the method of a super class so let's say for instance inside the super class we have a method that is eat and then inside the the subass we also have the same method with the same name that is eight so basically the method inside the subass will be executed instead of the method that is present inside the super class so let us check this with the help of example now over here so as you can see this is the class that is animal which is being treated as the parent class or the super class and over here we have the attribute that is the name of the animal and it has a function that is the eat and it takes one parameter that is self over here it simply prints statement that is I can eat now guys again we have another class over here that is the dog which inherits this parent class that is animal and again what is happening over here is this eat is being inherited by this dog class but the dog class is also having its own eat method over here so as you can see this eat method is once again present inside the dog class and it is printing its own statement that is I like to eat bones so guys what we will do over here is I'll just simply copy these lines of code and paste it in the vs code and let us check the functionality of the method overriding and how it can be used in your project based on your requirement so I'll just remove certain commments over here so as you can see we have this parent class that is animal and then we have the child class that is dog over here both are having the eat method so what we will do is first of all I'll just comment out these lines that is this particular function is not present let's say inside the dog class I'll simply provide the pass statement over here so what L is happening first of all we have the animal class which is having the eat function and this dog class it is inheriting the animal class so the dog class will have access to this function that is eat over here so I can eat will be displayed so what we will do is first of all we will create the object of this dog class so let's say we have dog one it is equal to and then the name of the class that is dog over here and simply what we can do is since the dog class is inheriting the animal class we can use the eat method of the animal so we can simply use the dog one object followed by Dot and then we have the eat method being called followed by open and close parenthesis so guys over here simply if we save this file and try running this code now as you can see I can e is being displayed over here which is the print statement inside the E function of the animal class now guys let us say we have the same method that is eight with a different print function inside the dog class so I'll just remove this pass statement and also remove these commments over here so basically now what will happen whether the eat function of the animal class will be called or the eat function of the dog class will be called so let us check this so I'll just save this file now and try running this code once again as you can see I like to eat bones this particular statement is getting printed which is the statement from the eat function of the dog class so basically whenever we have the method with the same name inside the parent and the child class the method of the child class will be called over here and that is what we call it as method overriding now guys why method overriding is important so let's say you have the animal class over here this is a very generic statement that I can eat basically it doesn't specify what the animal can eat but let's say you want to have the child classes over here which inherits the parent class and you want to be more specific so what the dog likes to eat basically the dog likes to eat bones over here so you can have the same method name inside the child class and print a different message in this case and that is what we have done in this example so method overriding is very important as far as objectoriented programming in Python is concerned and you can use them in your own Project based on your requirements super method in Python inheritance so guys basically in Python inheritance we can use method overriding to call the method of a subass but if we need to access the super class method from the subass we can use the super method so this is what we are going to check with the help of examples now over here first of all we are going to check that how method overriding works and then we are going to see how we can use the super method in order to call the method of the super class so let us check this with the help of examples in the vs code so first of all we are going to have the parent class so let's say we have the animal class as the parent class and basically we are going to have one function inside this class that is e and this function is going to take one parameter by default which is the object and we are going to name it as self over here and simply we can print the statement that is I can eat so we have I can eat statement over here so basically whenever we are going to call this method of the animal class it is going to print I can eat guys before this we can also provide the prefix that is animal so that we can identify that this is the method from the animal class now guys let us say we have another class that is the dog class which inherits the attributes and the functions of this animal class which is the super class so we have the class dog over here and inside the parenthesis we have animal and this is how we achieve python inheritance by using the parent class inside the parenthesis while defining the child class over here followed by a colon and then what we will do is first of all we have the P statement so that we don't have any code inside this so what we are going to do is since we are inheriting the animal class inside the dog class so basically we have access to this function that is e over here so we are going to create the object of this dog class as dog one it is equal to dog over here and then open and close parenthesis and for this dog one followed by dot as you can see eat method is getting suggested by the VSS code so we can use this function in order to call it followed by open and close parenthesis so let me just save this file now and try running this code so as you can see animal I can eat so this statement is getting printed that's because we have provided the statement inside the eat function of the animal class but guys for this dog class this statement that is animal I can eat is not very specific let's say we want to be little bit specific over here and we want to say that the dog likes to eat bones over here so what we can do is simply we can have the same method name and we can change the print statement inside that method name inside the dog class so what I will do is I'll just copy these lines of code and instead of the P statement I'll provide certain code over here that is the copied code from the animal class so over here we have the same method with the same name but inside this what we will do is instead of animal over here we will provide dog and over here we will say I like to eat bones so guys basically this statement is little bit more specific it says that this is the dog and it likes to eat bones so we have provided the method with the same name similar to that of the method that is present inside the animal now guys we need not have to change anything over here this dog one object will call the eat function and due to Method overriding this function of the dog class will be called and not this particular statement will be called over here so let me just save this file now and try running this code so as you can see dog I like to eat bones so basically this print statement is getting executed which proves that this eat function is being called which belongs to the dog class and this is what we call it as a method overriding now guys there is a requirement where do we use the super method over here as we have seen the super method can be used in order to access the super class method so let's say before printing this statement that is dog like to eat bones over here what we want is we also want to print this statement that is animal I can eat so what we can do is while calling this eat method when the control flow goes over here we can go inside this function and we can use the super keyword so basically this is another method followed by open and close close parenthesis so internally what is happening over here is this super will refer to the parent class that is animal over here so what we can do is while referring to this animal class we can access this function that is eat function of the animal class so after the Super method we can provide dot followed by as you can see eat function is being suggested by the vs code over here so we can use this eat function followed by open and close parenthesis so basically this is the way in order to access the method of a super class from the subass over here by using the super method so guys whenever you're dealing with method overriding over here the method of the subass will be called by default and in case you want to also call the method of the super class you can use the super method followed by that method name in order to call the method of the super class so guys practice on your own so that on different inputs you get different outputs multiple inheritance in Python Programming so guys previously we have seen the single inheritance but in this video we are going to check the multiple inheritance in Python so a class can be derived from more than one super class in Python basically this is called multiple inheritance so basically the derived class will be having the multiple super classes in this case so for example a class bat is derived from Super classes that is mammal and a winged animal so basically this mammal and winged animal will be treated as the parent classes and this bad class will be the subass or the child class which can be derived from both of these super classes over here so it makes sense because B is a mamal as well as it is a winged animal so let us check this with the help of the example code now in the vs code so over here first of all we will create a class that is called as mamal over here and inside the mammal what we will do is we will Define the function and we will simply say mammal uncore info so this particular function it is going to take one parameter at itself which is the object itself and and basically we are going to Simply print the statement that we are inside mammal function so as you can see we are simply printing V are inside mamal function in order to identify that the control flow has come over here inside the mamal info function and then again we will have another parent class over here that is winged animal so we say winged animal over here and this time what we will do is again we will have the function but over here we will say winged uncore info so this particular method belongs to the winged animal over here and then again it is going to take the parameter as the cells and then again I'm simply going to copy this print statement over here and paste this inside the winged info and we will say we are inside winged animal function so we say we are inside winged animal function now guys we have created two classes over here which will be treated as the parent classes now we will be defining a third class that will be the child class of both these classes so basically we will have the class that is called as B over here and how do we mention the multiple super classes whenever we are defining the sub classes over here so basically inside the parenthesis we will have both these classes separated by a comma so first of all we will have the meml class over here followed by comma and then again we will have the winged animal class over here in the same way you can have any number of classes separated by commas over here in order to achieve multiple inheritance and then after this we will have the colon and then again we will have another method which will belong to this B Class over here so over here we will have the bore info method and then which will take the self as the parameter and then we have the colon over here again we will have the print statement we will say we are inside bad function so it says we are inside bad function now guys inside this bad class we have this bad info function and apart from from this we also have this mammal info and winged info functions since both these functions are derived from these classes that is mammal and winged animal over here so we can access all these functions from the object that we create for the bad class so let us come out of these classes and what we will do is let's say I provide the object that is B one it is equal to B over here so we have created the object of this bad class in this case and then when we provide the bad one object followed by dot as you can see we are getting all the three functions as the suggestions by the vs code over here that's because all the three functions are accessible by this bad one object over here so first of all we will say B info and Then followed by open and close parenthesis and then again we will say b 1 dot let's call mammal info in this case so we have mamal info as well as the third function that is BET one followed by Dot and then we have the winged info over here and then open and close parenthesis so all these three statements will be printed one at a time based on the functions that is being called by the control flow so let me just save this file now and try running this code in order to confirm the same so as you can see first of all we have called the bad info so we are inside bad function is being displayed and then again we are inside mamal function is being displayed that's because mammal info is being called the second time and third function is being called that is winged info and we are getting we are inside winged animal function so guys in this way we have also achieved multiple inheritance over here in case the functions that you want to use are present in the multiple classes as you can see over here you can have multiple classes being inherited by the derived class which we also call it as a subass over here and this paired class is acting as a subass and both these classes that are mammal and winged animal are acting as the parent classes now guys let us move to another task over here what do you mean by Method resolution order in Python that is mro so if two super classes have the same method name and the derived class calls that method then python uses the mro to search for the right method to call so guys over here we have seen how multiple inheritance can be achieved but what if the method names in both the super classes that is in the memal class and the winged animal class are same so what we will do is instead of this memal info we will keep it as display over here and instead of winged info again we will call it as display so basically this time what is happening over here is both these classes that is mammal class and winged animal classes are having the same method name that is display and what we are doing we are creating the subass that is bad and inheriting both these classes that is mammal and winged animal over here and this time both these display methods are getting inherited by this bad function now which method will be called when we use the object of this bad method let us check that so basically I'll have to remove these lines of code since these functions are no longer present but but instead of that what we will do is we will say B one followed by Dot and then we have another function that is display so we have only one function that's because the name of these functions are same in both the parent classes and Then followed by open and close parenthesis so guys over here inside the bad function we have the bad info which will be called by using the bad one object and then the next time what we are doing is we are using the B one object in order to call the display method now which display method will be executed of these two let us check that with the help of execution so I'll just save this file now and try running this code now so as you can see we are getting we are inside bad function which is this statement that is getting printed that is obvious that's because we have called the bad info function over here and next time when we call the display method it is saying we are inside maml function so guys basically this print statement was executed which proves that the display method of the maml class is being called over here why so that's because when we are creating the child class the first parent class is being given the highest priority over here so first the control flow will check whether this display method is it present in the first parent class if not then it will go to the second parent class over here inside the manual class it is finding that the display function is present and that is what is getting printed over here so it is the leftmost class that will be used in order to call the method which is present in multiple parent classes over here so what if we provide wind animal as the first class so what we will do is I'll just remove this mammal class from here on the left hand side we will provide winged animal and Then followed by comma and then on the right hand side we provide mamal so over here again we have just changed the order in which the inheritance is being done over here both these classes are still the parent classes of this child class that is bed class now let us check which statement will be printed when we call the display method over here so let me just save this file now and try running this code as you can see we are getting we are inside winged animal function so guys basically this winged animal function that is display function was called and we are getting this statement that is we are inside winged animal function that's because this time we have provided winged animal as the leftmost class and the control flow found this particular display method inside the winged animal class over here which is the parent class of the bed class so guys this is very important as far as method resolution order is concerned concerned the leftmost class is being given the highest priority as far as the same names of the methods are concerned so guys practice on your own so that on different inputs you get different outputs multilevel inheritance in Python Programming so guys in Python not only can we derive a class from the super class but you can also derive a class from the already derived class over here which means we can create a child class from the already existing another child class so this form of inheritance is known as is multilevel inheritance so as you can see in this syntax it will get more clear over here so first of all we have the class that is the super class and we have the super class methods and variables over here next what we have is class derived class one and this is deriving the super class which is the parent class over here it will have its own derived class one functions and variables now there is a third class called as derived Class 2 which is deriving this child class that is derived class one over here and that is what we have mentioned over here inside the parenthesis and this is called as multilevel inheritance so let us check this with the help of examples now how we can Implement multilevel inheritance in Python so basically first of all we will have the class that is the super class over here so inside the super class what we will do is we will Define the method that is simply super class over here and then after this we have the parenthesis and we say self over here and we can simply provide a print statement and we can say we are inside super class so over here we are simply providing the statement that is we are inside the super class and then we will have another class which will be the child class of the super class so we will say derived one over here as the child class of which class it is of the super class so basically we have the super class inside this parenthesis which means we are inheriting all the properties of the super class into this derived one class and then again it is having its own function that is derived one over here so we say derived one it takes one parameter that is self which is the object itself and then we can simply provide this print statement I'll just copy this and paste this over here and change the content of the statement that is V are inside derived one class so we say derived one class and then guys similarly we have the derived two class as well so I'll just copy these lines of code and paste this over here this time the parent class will be the derived one class so over here we will say derived to one so basically this child class it is getting inherited in the derived two class over here so we have named it as derived two and the parent class is derived one over here and it is having its own method so we will say derived two in this case which is taking self as the parameter and then print we are inside derived two class right now so basically what is happening is inside the derived two class we will also have derived two function we will also have derived one function and we will also have the super class function which was inherited by the derived one class over here so we will have all the three functions in the derived to two class whereas in the derived to one class we will only have this derived to one function and the super class function over here so let us check the implementation of all these classes by using the objects so let us say we create the object that is D2 for the derived two class so over here we will provide the derived to class and then what we will do is simply we will call the functions by using the object name that is D2 followed by dot as you can see we are getting all these methods that is derived one derived two and the super class so first of all we will call the super class over here and then we have D2 followed by Dot and then we can call the derived one function over here followed by derived two function so D2 followed by Dot and then we have the derived two function as well so basically all the three functions can be accessed by using the object of the derived 2 class because that is the child class of this derived one class which is again the child class of the super class over here so let us save this file now and try running this code so as you can see we are getting we are inside super class then we are inside a derived one class and we are inside derived two class so all the print statements are getting executed when the object is of the derived two class but guys what happens if we create the object of the derived one class and use all these functions so let us change this from derived 2 to derived one over here so as you can see we can access the super class function we can also access the derived one function but over here this derived two function is coming with a different color which means we cannot access it so let us check this once again so D2 followed by Dot and then we do not have the derived two function why so because we have created the object of the derived one class which will only have access to derived one that is its own function apart from that it will also have the access of the super class function since it was inherited from the super class so guys we cannot call the derived two function over here so what if we try to access the derived two function let us check that so I'll just save this file now and try running this code so as you can see the first two statements are getting printed that is we are inside super class and then we are inside derived one class but then next time the derived two class when the control control flow comes over here it is throwing the error that is derived one object has no attribute that is derived two so basically it is saying that inside this derived one class over here we do not have any function which matches with this derived two function over here that we are trying to call so guys you have to be very careful when you are implementing this multilevel inheritance only those functions will be accessible to those objects of the classes which are at the lowest level at the middle level some of the functions will not be accessible and if we create the object of the parent class then that object will not be able to access the functions of the child classes over here operator overloading in Python Programming so guys in Python we can change the way operators work for user defined types so for example the plus operator will perform arithmetic addition on two numbers in the same way it will merge the two list as well or else if we are dealing with the two strings then it can concatenate two strings so the same Plus operator can perform multiple operations depending on the operants whether they are numbers or whether they are strings or list so this feature in Python that allows the same operator to have different meaning according to the context is called operator overloading so this we are going to check with the help of examples as well apart from this there are certain special functions in Python so basically the class functions that begin with the double underscore are called special functions in Python they are called double underscore functions because they have a double underscore prefix and suffix such as as you can see this in it which can be treated as the Constructor of a class it is one function which starts and ends with the double underscore in the same way the plus operator can be overridden by using this double underscore followed by add and then double underscore again and then open and close parenthesis so guys let us check operator overloading implementation in action using the vs code over here so we'll see the very basic examples first of all so let's say we have num one it is equal to 10 and then number two that is num 2 it is equal to 20 so if we simply print num 1 + num 2 over here so num 1 + num 2 so basically it is 10 + 20 which is 30 in this case so when we just save this file now and try running this code so as you can see we are getting the result as 30 but what if these variables are strings so instead of numbers let's say okay if we enclose them within the double Cotes this means that we have a string over here that is 1 Z that is 10 and then over here as well we have another string that is 20 so when we do num 1 plus num 2 instead of 30 we will get the concatenation of this string which means 10 will be followed by 20 in this case when we try to print the statement so let me just save this file now and try running this code so as you can see we are getting 1020 so guys we have not changed anything over here the operator is same and and the operants are also same the only thing is we have changed the values to the string and that is what operator overloading means that is by using the same operator we can have the different results based on the operant values now guys let us check how operator overloading can be implemented when we are dealing with classes over here so let's say we have a class that is named as point over here and this class let's say we have a Constructor inside it so we have init method inside this so init method it will take one parameter that is self and what we will do is let's say it has two attributes over here so self dox so the point class it will have two attributes that is X and Y coordinates so over here let's say we provide the x value by using the parameter that we are getting so let's say we have X1 over here and let's say we have y1 over here so self.x it will be equal to X1 and then again we will have self do y it is equal to y1 in this case so whenever we are creating the object by using the point class over here the Constructor that is in it method will be called along with the two points that we will be passing and those two points will be assigned the values to these variables that is X and Y over here now guys in order to override the two string method we also have another method that is double underscore and then Str Str so as you can see apart from this we have many other functions that can be used when we provide the double underscore so vs code is suggesting us the entire list of functions which we can use in our python code so over here we are going to use this St Str and then we are going to have our custom code inside this s Str so what we are going to do is we are simply going to print the values of this X and Y so how do we do that we are going to use the formatting part and then inside this we are going to call the self followed by Dot and then we have X and then again we have comma over here and then again we call the self.y so over here we are simply printing the X and Y values which are separated by the comma over here and then guys let's say we want to override the plus operator over here so before having the function inside the class what I will do is first of all we will create the object so let's say P1 is the object name it is equal to point which is the class over here and what we do is we do 1A 2 that is X and Y values over here and then let's say we have another point that is P2 it is equal to point and then this time we are going to provide the X and Y coordinates as 2 and three over here and what we want to do is we want to print the sum of both these points that is P1 plus P2 so guys in this case we are using this plus operator and then these are the operators that is P1 and P2 so how do we have the custom implementation of this plus operator over here which we will call it as the operator overloading as well so as we have seen over here we have something called as double underscore and then add and then double underscore so this represents the plus operator as well so we can use this method inside the class in order to have our custom implementation of addition of both these points so over here we have DF followed by double underscore and then we have the add method over here followed by double underscore and then we have the open and close parenthesis and then inside the parenthesis we will provide the self as the parameter now guys apart from the self parameter basically when we do P1 + P2 it is simply P1 dot this particular function that is we are going to Define followed by this P2 which will be a parameter so we need to catch this as the second parameter over here so what we will do is after the self we will have another parameter and we will name it as other over here so what we can do is over here we can create another variable that is X it is equal to self do X over here plus we need to use another parameter that is other which represents the other point that is P2 in this case so over here we will say other do X in this case and then the same way we are going to have another variable that is y it is equal to self doy plus other do y in this case and then guys what we have to do is simply we need to return the point of both these values that we have found that is X and Y so basically return point of X comma Y in this case so we have X comma y so guys this is the implementation of our addition operator we are doing the operator overloading in this case so basically p1+ P2 it is same as P1 followed by Dot and then the add function being called along with the parameter that is P2 so in this case this function will be called and it will return point of X comma Y and basically while returning this we are providing the print statement so behind the scenes this function will be called in order to print the statement so guys basically over here inside of the print statement we need to have the return statement over here so I'll just remove this part over here and we will say return followed by double codes and then inside this double Cotes we will be using the formatting so let's say we have zero and then comma and then let's say we have one followed by Dot and then we have format over here and inside this format we need to provide the x and y values so self. X and then comma and then we have self.y in this case so basically this is the way in which we are going to print the values that is of X and Y so guys let me just save this file now and try running this code so as you can see we are getting the coordinates as 3 and 5 this x and x values are getting added so 1 + 2 it is equal to 3 and then 2 + 3 it is equal to five so we are getting five over here so guys basically what we have done is if you see the main code over here we have just defined P1 and P2 which are simply the points and if we were not having this implementation inside the class that is the string and the addition part then we won't be able to add both these points directly because by default this plus operator can only handle numbers or strings Or List over here but in order to handle the custom classes we need to define the custom functions as well inside those classes and according to our requirement we can have the code inside those custom functions guys we can also change the formatting over here in order to change the formatting we can say that X it is equal to this particular thing and then after comma we can have y it is equal to self.y part over here so let me just save this file now and try running this code so as you can see we have changed the formatting xit is equal to 3 and Y is equal to 5 so whatever format that you want to print in or whatever code you want to have inside this Str Str method you can have it accordingly based on your requirements so guys this is operator overloading for you with the same operator you can have multiple implementations and it can have different meanings as far as operant are concerned similarly we have other special functions and the other operator overloading functions as well as you can see we have this in it which initializes the attributes of the object which we have already seen as far as class Constructors are concerned then we have Str Str which returns a string representation of the object that is what we have implemented over here it returns a string implementation of the object that is point x comma Y and then we also have Len which Returns the length of the object then add which adds the two objects so over here we have implemented the add method which adds two objects over here which is P1 and P2 that is what we have achieved in this particular program apart from that we also have this call function which calls the objects of the class like a normal function guys apart from this we can also have other operator overloading functions as well for addition we have seen P1 + P2 which means P1 Dot and then underscore uncore add will be called in which case the parameter will be P2 similarly we can have the subtraction multiplication the power of two objects and then we can have division as well and then we can have flow divion and many other mathematical operations can be achieved by using the operator overloading just how we have done in this program overloading comparison operators in Python Programming so guys previously we have seen how we can overload the plus operator in the python so python also allows us to overload comparison operators as well such as less than or greater than or less than or equal to or else greater than or equal to and so on many other comparison operators are present in Python Programming which can be overloaded so for example as you can see we have the class that is person and then we have the Constructor which takes the parameter is the self and then name and age is taken so basically this name and age are being assigned to the name and age attributes of the class and then we have the overloading of the less than operator over here in this case so as you can see we have the function DF and Then followed by underscore uncore LT which refers to the less than sign over over here and then double underscore once again and then it takes one object that is the self object over here it takes the other object that is the second object so what we can do is we can create the two objects over here that is P1 it is equal to person the name is allies and the age is 20 years old and then we have P2 that is another person the name is Bob and the person is 30 years old so guys basically what we are doing is we are printing over here P1 less than P2 so we are checking whether P1 is less than P2 or not so what exactly will happen is instead of this less than the control flow will go over here to this particular function because we have provided the comparison operator overloading over here so the first object will be P1 in this case which will be assigned to self and the second object will be P2 over here which will be assigned to the other and self. age will be compared whether it is less than the other dot age over here if it is yes then it will return true or else it will return false false so guys let us implement this in our vs code over here so let's say we have the class person in this case and then what do we do is we Define The Constructor over here so DF keyword followed by the init function in this case so I'm going to implement the Constructor over here so what we will do is let's say we have self do name it is equal to the name will be taken as the parameter over here so let's say I provide name one and then age one over here so that we can identify them so name it is equal to name 1 and then we have self. AG it is equal to AG 1 so the name and age will be coming as the parameters when we are going to initialize the object when we are creating the object of the person class and those name and age will be assigned to these variable names that is name and age and then guys what we will do is we will be doing the comparison operator overloading so over here we are going to Define double underscore and then LT over here so which refers to the less than operator in this case and it is going to take two parameters one is the self parameter and then the other object so here the second parameter is the other object and this thing is simply going to return the comparison of the two ages over here so this will be return self. AG is it less than the other do age so over here we are simply going to compare whether self. AG is less than other do age or not if yes then return true or else return false so guys what we will do is we will create two person objects over here so let's say P1 it is equal to the person and let's say the first person name is Tom and Tom is 10 years old in this case and then let's say we have P2 it is equal to person and let's say the name of this person is Harry and Harry is 20 years old so guys what we will do is simply we need to print two statements comparing the ages of both the person so we will say P1 is it less than P2 then it will return true or false so is P1 less than P2 yes in this case because p1's age is 10 and p2's age is 20 and that is what this particular function will be implementing and returning the result and over here again we will say print P2 is less than P1 this time so P2 less than P1 this time so is P2 less than P1 so what will happen is is 20 less than 10 no in this case so this should return false so let me just save this file now and iy running this code so as you can see for first statement we are getting it as true and for second statement we are getting the result as false to make it more understandable what we can do is we can provide the statements over here is Tom younger than Harry question mark and then we can have a comma over here and similarly we can have such statement in the second print statement as well so over here we will say is Harry younger than Tom in this case so we have is Harry younger than Tom so let me just save this file now and I running this code so as you can see is Tom younger than Harry so Tom age is 10 and Harry's age is 20 right now so it is returning true that Tom is younger than Harry and second time is Harry younger than Tom Harry is 20 years old Tom is 10 years old so it is saying is Harry younger than Tom no in this case so that is why we are getting the result as false what if we have another person with the same name that is Tom who is 30 years old so over here we will update the age of Tom that is another person who is 30 years old and we are comparing it with the same person that is Harry which is 20 years old so let me just save this file now and try running this code this time is Tom younger than Harry no in this case because Tom is Elder than Harry right now so we are getting false and in the second statement is Harry younger than Tom yes because 20 is less than 30 this time so we are getting true in this case so guys this is the way that we can implement the comparison an operator overloading as far as Python Programming is concerned iterator in Python Programming so guys iterators are methods that iterate collections like list tles Etc using an iterator method we can Loop through an object and return its elements so we have already seen how we can iterate through the list and tles as well using the fall Loop but we can also have our custom iterators in order to iterate through the different elements inside the list so that we are going to check with the help of examples as well now we can use the iter method which represents the iterator to initialize the iterator and the next method to go through the iterator so guys let us check this with the help of example now over here in the vs code so what we will do is let's say we have the list that is named as list one and then let's say we have the list of numbers in this case so we have 1 2 3 4 and then five so guys how do we get the iterator to this particular list over here so what we can do is simply we can have the name of the variable that is iterator it is equal to and then we can use the function name that is iter this is one of the functions that will return us the iterator over here and inside this function it will take one parameter which will be the list one in this case so basically the list or tle it goes as the parameter to this function that is it and it Returns the iterator over here and then we can use this iterator in order to get the elements of this list so what we will do is let's say we have the print function and then we can use the next function in this case inside the print so as you can see vs code is suggesting us this next function over here which will take the iterator as the parameter so we provide the iterator as the parameter so what will happen is this thing will point to the first element to the list over here so let me just save this file now and try running this code so as you can see we are getting one in this case now what we can do is again we can can have another print statement in order to print the second element so over here I have just copied and pasted this line of code and then let me just save this file now on the next line we should get the second element that is two so as you can see we are getting one and then we are also getting two over here so similarly we can get all the elements in this case by using the it method we have C the iterator over here and by using this iterator as the parameter to the next function we have got the element itself so guys this is the very basic way in which we can use the iterator along with the next function now guys let us check this with the help of the Fall Loop working of fall loop with the iterators so what we can do is instead of printing these statements multiple times we can simply use this iterator inside the fall Loop so over here we can have for and then element in and then we can provide this iterator so this iterator is having all the elements right now and we are going to iterate through this iterator and one at a time time all the elements will be assigned to this element variable and inside this fall Loop we can simply provide the element over here so we can provide element and in order to have all the elements on the same line when we are providing the print statement we can have the end parameter over here which is Slash and by default which means a control flow goes to the new line so in this case we want it to be on the same line so we will separate all the elements by using one space character over here so let me just save this file now inter running this code so as you can see we are getting 1 2 3 4 5 on the same line we can also separate them by using a comma and a space character so I've just provided comma in the end parameter I'll just save this file now and try running this code so as you can see we are getting 1 2 3 4 five separated by commas so guys this is the way that we can use the fall Loop along with the iterator in order to go through all the elements inside the list we can also do this directly by using the list one as well so when we provide list one which is containing all the elements over here so instead of having the iterator as well we can use the list one so let me just save this file now and try running this code so the same output will be displayed that is all the elements of the list now guys where this iterator becomes important is whenever we are creating the custom classes and we want to iterate through the custom iterator that we want to create so guys let us check it with the help of example now so guys what are the important points while building the custom iterators so building an iterator from scrip is easy in Python we just have to implement the double uncore iter followed by double uncore method so this is one of the custom methods that we have to implement inside the class along with this we also have to implement the double underscore next Double underscore method over here inside the same class so these are the two methods that are important which needs to be implemented inside the class while building the custom iterators so this iter method it returns the iterator object itself if required some initialization can be performed in this method and the second method that is the next method over here it must return the next item in the sequence on reaching the end and in subsequent calls it must raise stop iteration so guys let us check this with the help of examples as well so over here what we will do is we will implement the power of two class over here which means we are going to find the results of the power of the number that is two so we are going to have the class which is going to be named as power two in this case and what we will do is we will have the Constructor over here so we have the init method in this case and init method it will take the maximum number up to which we need to find the Power of Two over here so basically apart from self we will have the max value as well so over here we will say self. Max it is equal to Max so while creating the object of this class we will be providing the max number up to to which we need to find the Power of Two And then guys as we have seen in order to build the custom iterator we need to have the two functions so first of all we will have the iter function over here so we have iter function and Then followed by open and close parentheses this will again take the parameter as self and what we will do is the initial value that is self do n so we have the variable that is n which is equal to Zer right now so we will find the powers of two starting from 0 up to the number that is Max that we have provided while creating the object of the power two class over here so what we are going to do is self do n it is equal to zero and this thing is going to return a iterator which is going to be the self itself so over here we are returning the iterator that is the self itself and then guys we are going to also Define the next method over here so we have DF followed by double underscore and then we have the next method followed by double underscore and then then again we are going to have the self as the parameter so over here what we will do is first of all we need to check whether the value of n is it less than or equal to the value of Max that we have provided so over here we will provide the if condition and inside the parenthesis we will say whether self do n is this less than or equal to Max that is self do Max in this case so we have self. Max and if yes then we are going to have the result what is the result it is equal to 2 ra to the power of n so it will be 2 * by * by double times and then self do n in this case so over here we are getting the current value of n we are checking whether it is less than or equal to Max and if yes then we are finding 2 ra to that number that is n over here and the result will be stored in this result variable next what we are going to do is we are going to increment the value of n by 1 so it is going to be self do n + = to 1 so we are incrementing the value of n by 1 so that the next time the control flow comes over here it will find that the value of n is incremented by one and then after this we simply have to return result in this case for which we have already found the result over here so guys this is the case when n is less than or equal to Max but what if the N is incremented in such a way that it becomes greater than the maximum number which we have already provided for which we don't want to find the Power of Two so over here inside the lse part what we will do is we will raise the stop iteration so over here we can simply provide raise stop iteration so we have this exception that is raise stop iteration over here which is one of the builtin exceptions now guys what we can do is simply we can create the object of this power two class over here that we have created so what we can do is let's say we provide the object name that is I it is equal to power two over here and the maximum number for which we want to find the power of 2 is three right now so what this will do is when we create this object I the control flow it sees that for this particular power two class we have a Constructor that is in it and it will take the number that is Max so over here we have provided the max as three so self. max that is this particular variable will have the value S three over here and then guys in order to find the iterator we will name it as the iterator variable it is equal to it R this method and then inside this method we need to pass this object that is I so what exactly will happen is the control flow will see that for this particular class we have the user defined iter method so it will come over here and initially the value of n will be set as zero in this case so we have zero to start with and at the end we have Max that is the value of three and then guys what we have to do is we have to iterate through this iterator over here so we already have the iterator next time when we call this next method the control flow comes with over here it will see that the value of n it is zero right now and it is less than or equal to Max so 2 to 0 the first result it will be equal to 1 and that same result will be passed over here as the return statement and before that n will be incremented and the updated value of n will be one in this case so over here we can simply provide the print statement and we can say next over here and inside the parenthesis we will have the iterator as the parameter so guys let me just save this file now and try running this code so as you can see we getting the result as one and next time what we will do is again we will copy paste these lines of code three times over here so let me just save this file now and try running this code as you can see we are getting 1 2 4 and 8 which is equal to 2 to 0 is 1 2 to 1 is 2 2 2 is 4 2 to 3 is 8 and next time when we print the value once again over here so what will happen is 2 to 4 will be found and in this case since n value is not less than or equal to Max so raise stop iteration will be called over here and we will get some other statement being printed on the terminal so let me just save this file now and try running this code so as you can see we have got 1 2 4 and 8 and after this as you can see Ray stop iteration was called while calling the next function over here so guys this is the way that we can build our custom iterators whenever we are dealing with our custom classes we just need to Define two methods over here that is iter which stands for iterator which will return an it data over here and then we also have to define the next method which will return us the next element to be used as far as our requirements are concerned in the Python program so guys you can have any logic over here this is just an example that we have taken that is in order to find the Power of Two you can have any logic based on your requirements and raise the exception in any manner that you want based on your requirements generators in Python Programming so guys in Python a generator is a function that returns an iterate that produces a sequence of values when iterated over so basically a generator is nothing but it is a function that will help us in order to generate the sequence of values and we can iterate through those values now generators are very useful when we want to produce a large sequence of values but we don't want to store all of them in memory at once so guys we are going to check this with the help of examples as well how generators are very memory efficient as far as Python Programming is concerned now similar to defining a normal function we can define a generator function using the DF keyword but instead of the return statement we use the yield statement so as you can see this is the syntax of the generator function we have the DF keyword followed by the name of the function it can take any argument over here and as you can see one of the statements must be including the yield keyword over here so this statement will yield something instead of returning the value so basically the yield keyword is used to produce a a value from the generator and pause the generator functions execution until the next value is requested so guys let us check this with the help of example code now we are going to check how the python generators work with the help of the debugging so guys let's say we Define the function over here using the DF keyword and Then followed by the name of the function that is the num generator so we are going to generate some numbers over here so we have this numb generator function and then it is going to take the argument as the maximum value up to which we want to generate the numbers and then after this colon what we will do is we will initialize the value of n it is equal to Z and then what we will do is we will have the while loop and it is going to check whether this n is it less than or equal to Max so over here we are going to give the condition that this n value must be less than or equal to this max value over here so the number it starts from zero and then it will go up to the number that is Max which will be given as the parameter while calling this gener Ator so guys what we have to do is we have to use the yield keyword so over here what we will be doing is whatever the N value is we will be providing that value so we will be returning that value so we provide this statement that is yield n and then after this what we will do is we will increment the value of n so n plus it is equal to 1 so we will increment the value of n by 1 over here so guys this is the way we have created the generator function now how do we call it so guys outside this function we will be having the for Loop and then we will get all the values that is being generated by this num generator over here in the item so we have item and then in and then followed by the function name that is the generator name over here so guys we're calling this generator it is expecting one argument so we are going to give this number as five over here so the numbers will be from 0er up to five in this case and then we will provide colon and simply we are going to print the item in this case so we have item and then let's say in order to get all all the numbers on the same line we will have the end parameter and we will separate all the numbers using the space character inside this end parameter over here so guys let me just save this file now and try running this code so as you can see it is generating all the numbers that is 0 1 2 3 4 5 so guys this is the way that the generator works now guys you will ask me like what is the difference like we can also have the range over here in order to get all the numbers from 0 to 5 so what is the importance of writing this generator as a function over here so guys the important advantage of using this generator is it is very memory efficient so when we are saying that yield n that means only one number at a time is getting generated over here zero is getting generated only once and then we have one over here then we have two over here so all these numbers are not being stored in the memory but during the run time individual numbers are getting generated one at a time by using this num generator so guys let us check this how it works using the debugging so what I will do is I'll provide a break point over here on the fall Loop and then we will say run and then we will say start debugging over here so one at a time we will come to know what are the different steps that the control flow is going through so over here as you can see the control flow has stopped over here now let us go inside this so I'll click on this step into action over here so when we click on this as you can see the control flow has come over here that's because the num generator with five has been called right now and then again we will click on this to go to the next step so we are on the Y Loop now and then what it is doing is it is yielding this value that is n so when we press once again so as you can see it has come back over here print the item so basically what has happened is it has returned the value of n that is zero and it is assigned to this variable that is item so again when we press on this step into as you can see the zero is getting printed now so basically the item got printed after the statement that is sealed and was executed and then next time once again the control flow has gone to the fall loop again it says that num generator we need to call so the control flow will see that the previous time it was returned from here so the control flow will go to the next line that is n is equal to n + 1 so the value of n will be incremented now and then again we go to step into two we go to the while loop once again and then again yield n this time the value of n will be one so n is being returned and is assigned to this item and then again we will print the value of item so as you can see one is getting printed once again and then when we press the step into actions once again as you can see two is getting printed now and then again the next time three should get printed as you can see three is getting printed so guys basically the main advantage of this generator function is to generate one number at a time and not store all the numbers in the memory so this is the memory efficient operation that is being carried out by this generator in the Python Programming so guys when we press on this continue then the other number should get printed over here now guys let us move to another task we have something called as python generator expression so basically in Python a generator expression is a concise way to create a generator object so basically this is the syntax that is expression followed by for and then we have item in iterable so guys let us check this as well with the help of example now what we will do is we will have the square generator so basically this generator will be used in order to get the square of the numbers it is equal to what we will do is as we have seen over here this is the syntax first of all we are going to have the expression inside the parenthesis and then we are going to have the for keyword followed by item and then in the iterable so we can simply find the square of the number by multiplying that number by itself so what we are going to do is we will say I multiplied by I now from where this I will come we will have the for keyword and then then this I will come from here that is I in and then we can say range and then we can simply provide the number that is five so basically this range will help us to generate the numbers from 0 to 4 and one at a time all the numbers that is 0 to 4 will be assigned to this variable that is I and then I multiplied by I will be generated and it will be assigned to this generator and we can simply iterate through this generator in order to print all the numbers that is the square of these numbers over here so guys how we will do that we will simply use the for Loop now and then over here we will say element in and then we can simply have the square generator over here and then we can simply provide the print statement and we can print the element so guys basically this is going to print the square of the numbers going from zero up to four over here in this case so let me just save this file now and try running this code so as you can see square of 0 it is 0er square of 1 is 1 the next number is 2 so 2 2 2 are 4 and then the next number is three so square of three is 9 and then the next number that is four the square of 4 is 16 over here so guys this is the way that we can use the python generator expression as we have seen over here in order to generate the numbers and one at a time iterate through them by using the fall Loop over here now guys why do we use this python generator so basically it is very easy to implement as compared to the iterables that we have seen previously you can easily generate the generators in order to iterate through them another important Advantage is it is memory efficient as we have seen that only one item at a time is getting returned whenever we are using the generator function so we use the yield keyword instead of the return keyword in order to return the individual elements inside the generator it also represents the infinite stream of data so basically whenever we are going to implement the infinite stream of data it becomes very important that we can use the generator so as you can see for example we have this all even function over here n value is initialized as zero and then we can say while true yield n value so over here one value of n will be returned at a time so basically this is very memory efficient over here we are not storing all the values in a particular list but we are generating one number at a time next time the value of n will be incremented by two in this case so guys generators are very important whenever you are going to deal with programs which requires memory efficiency closures in Python programming so guys python closure is a nested function that allows us to access variables of the outer function even after the outer function is closed so guys we will check this with the help of examples as well so what this python closure means is whenever we are having the inner function inside the outer function and when we are using the variable of the outer function inside the inner function still we can access that variable from the inner function itself even after the outer function function execution is completed so guys over here we have the function that is the Creed and over here what we are doing is we are providing the variable that is name and the value is drawn over here and what we are doing is we are returning an anonymous function so in this case we have to return the function which will be assigned to the variable so we are returning Lambda and then we are saying hi and then this name so guys basically what we have to do is when we are calling this greed function we are assigning the value to this message so what will be the return value over here it will be this Anonymous function which will be returned and it will be assigned to this message variable and since it is a function now we have to use the open and close parenthesis while calling this function that is message and we can call it inside the print function as well since it is going to return this string over here so guys let us check this with the help of example now so we are going to have the function that is GRE over here which is not going to take any parameter and then inside this we are going to have the name let's say we initialize the name as Peter and then what we are going to do is we are going to return an anonymous function in this case so let's say the anonymous function it is Lambda followed by colon and then we are simply going to provide the string that is high followed by plus and then the name that we have already defined over here for which the value is Peter so guys this is the way that we can have the anonymous function now this Anonymous function will be assigned to another variable when the greed function is called so over here we will say message it is equal to this greed function so this greed function is being called what the control flow will do is it will see that the name value is parameter and it will say high name and this entire Anonymous function will be assigned to this message now we can simply call this message and print the statement so over here we will have the print statement and we can call this message variable but it is a function now since this greed function is returning the anonymous function we have to provide this open and close parenthesis over here along with the message variable name so guys let me just save this file now and try running this code so as you can see we are getting the message that is high Peter so guys over here this function is being treated as a closure now why so because as you can see we are printing this message function and the execution of this function is already over that is the outer function execution is already over but the name parameter is present inside the outer function still we can access it by calling the variable that is outside of the greed function and guys this is what we call it as a python closure wherein we can access the variable of the outer function from the inner function now guys let us check another example so let's say we have a function over here so we say DF followed by the function name that is calculate which is not going to take any parameter and then over here let's say we provide the value of n it is equal equal to 1 and then what we will do is we will have another inner function over here so we say DF followed by Inner and then this is another function so what this function will do is it will access the variable that is in the outer function that is the variable n and it will add two to it so basically what we have to do is we have to use the nonlocal keyword over here in order to access that variable after this we have to increment the value of n by 2 so n plus it is equal to 2 over here and then we will say return n in this case so guys basically what this is doing is it is taking this variable that is n and then it is incrementing the value of n by 2 and then it is returning so guys basically it is going to only return the odd number starting from three over here since the initial value of n is 1 and what we will do is the outer function that is calculate it is going to Simply return this inner function over here so we say return inner in this case so guys basically whenever we are going to call this calculate it is going to return this function that is inner which will be assigned to another variable outside of this calculate function so let's say we have a variable that is odd it is equal to we call this function that is calculate over here so what this will do is the control flow will see that we have called the calculate function it will come over here and then n will be assigned the value that is one and then it is going to return inner so basically this is getting returned that is the inner function is getting returned and it will be assigned to this odd variable so next time we can simply call this odd variable in order to get the value of this n so let us check that what we can do is we can simply provide the print statement and inside this we can call this odd function over here so this odd function is going to call this inner function it is going to see that the nonlocal N the value is 1 right now so it will do n + it is equal to 2 so the latest value of n will be three and that value will be returned and it will be displayed over here so guys let me just save this file and try running this code now so as you can see three is getting displayed similarly if we want to get more values so I'm going to Simply copy and paste these lines of code that is we are going to print more odd numbers over here so I'll just save this file now and try running this code as you can see we are getting three and then the next odd number will be five and then the next odd number will be seven so guys basically we have only called the outer function that is calculate once but this is the the importance of the Python closure it remembers what the previous value of n was and continuously it increments the value of n by two and that is what we are getting over here so guys this is the way that we can Implement python closures decorators in Python Programming so guys a python decorator is a function that takes in a function as a argument and returns it by adding some functionality so basically we are going to define a function that will take another function as a parameter and it will return it with some added functionality and that function that we are going to create is called a python decorator so as you can see in this example we have something called as make pretty which is going to take another function as the parameter and inside this we are having the inner function over here which is going to Simply print I got decorated and then after that it is going to call that function which was passed as a parameter to this make pretty function and after this there's a return inner function which is going to be returned by this outer function so how can we call it so basically we have another function that is ordinary which is going to Simply print I am ordinary so basically we are going to call this make pretty function which is the outer function over here and we are going to pass this ordinary function that we have created over here so this ordinary function is going as the parameter to this make pretty function and the control flow is returning this inner function with the help of the statement so basically this variable will get the inner function over here and when we are going to call this decorated function variable along with the open and close parenthesis this particular inner function will be called so first of all this print statement will be called and then this ordinary function will be called so guys let us check this with the help of example as well so that you get the clear picture of what a python decorator means so basically first of all let's say we Define the function that is ordinary function over here and what we are going to do is we are simply going to print the statement that is I am ordinary so guys how do we call this function simply by using the name of this function we can call it so basically we are going to use the name of the function followed by open and close parenthesis so let me just save this file now and try running this code so as you can see I am ordinary is getting displayed but what is the main aim of python decorators it is going to take this function as the parameter and return it with some additional functionality so let's say we have another function over here and the name of that function we will keep it as make pretty and then this thing is going to take another function as the parameter so let's say we provide the function as the variable name and then after this we have a colon and then inside this we are going to have another nested function which we call it as inner and this thing is not going to take any parameter and then after this simply we are going to print that I am decorated over here so I am decorated and then after this we are going to call this function which was passed as the parameter to the make pretty so we'll just call this function using the open and close parenthesis and then after this what we will do is this make pretty will return the inner function over here so basically we are going to call the return inner over here so now whenever we are going to call this make pretty function we have to assign it to the variable and that variable will be having this instance of the inner function so what we will do is instead of calling this ordinary function we will say decorated that is the variable name followed by equal to and we will call this make pretty function over here so I'll just copy this and paste this over here and with this make pretty what we are going to do is we are going to pass this ordinary function because it is expecting a function over here as the parameter so I'm going to pass this ordinary we'll just copy and paste over here so guys basically this function is going to return another function that will be inner so this entire function will be returned and assigned to this decorated variable now we can call this decorated variable as a function in order to call the statements that are present inside this inner function so what we are going to do is simply we are going to call this decorated along with the open and close parenthesis over here so let me just save this file now and try running this code so as you can see instead of just I am ordinary we are getting I am decorated over here because this function is getting called so first of all this statement that is I am decorated is getting printed on the terminal after this we have this function called so what is this function called this is nothing but this is the ordinary function that is supposed to be called so this IM ordinary is getting printed as the second line so guys this is the way that we can use the python decorators in order to add some functionality to the existing functions we can use the python decorator which is another function and it is going to return another inner function over here as we have seen apart from this after calling this function we can also have some other statements such as I am already decorated so we can say I am already decorated and before this we can say I am being decorated so basically this is the process of getting decorated and then over here it will print I am ordinary and then again I am already decorated will get printed over here so let me just save this file once again and try running this code so as you can see these three statements are getting printed over here now guys apart from this there is another way in order to mention these decorators so add symbol with decorator as you can see instead of assigning the function call to a variable that we have done just now over here we are assigning this function call to this particular variable that is decorated python provides a much more elegant way to achieve this functionality using the add symbol so over here we can also use the at the rate symbol in order to call this make pretty function so what we have to do is I'll just remove these lines of codes so basically this lines of codes are not required and instead of that we can simply call the ordinary function over here but in order to get it decorated what we have to do is before this ordinary function we have to use at theate symbol followed by The Decorator name that is this function name which is make pretty so over here we will say make pretty so guys in this way when we call this ordinary it is going to check that yes we are having The Decorator over here and this function will be called which will return these statements which we have already seen so let me just save this file now and try run running this code so as you can see all these three statements are again getting printed over here so we have not called the make pry directly but we have called the ordinary function which is the base function and for that we are having The Decorator that is make pretty guys let us take another example as far as decorators are concerned with the help of numbers over here so what we are going to do is let's say we have the divide function so divide function takes two parameters that is X comma y it is simply going to divide X by y over here so we are going to have return x / Y in this case now guys let's say we call this function so basically we need to call this function with the help of two numbers so let's say first we call 2 comma 5 and then let me just save this file now and try running this code so we are not getting any result that's because we are returning x / y instead of that let us print the operation so print x / y so let me just save this file now and try running this code as you can see we are getting the result as 0.4 but but guys let's say I want to divide one more number so let's say we have divide 2 comma 0 now this time the denominator is 0o and we cannot divide any number by zero so let me just save this file now and try running this code so as you can see we are getting zero division error that is division by 0 that is the exception that is occurring for this statement that is divide 2 comma 0 so guys let's say we want to handle this exception with the help of python decorator so what we will do is we will have another function over here which will act as a py decorator for this divide function and we will name this function as smart divide it is going to check whether the denominator is zero or not and then only it will divide the two numbers so over here it is going to take one parameter that is the function as the argument and then we are going to have colon and then inside this we are going to have the inner function over here now this inner function is also going to take two parameters since the original function that is divide we are calling it with two parameters over here so again inside the inner function we will have X comma Y and then after this simply we are going to have the print statement and we will say I am going to divide X and Y so in this case I am going to divide comma X and then comma and then we have end and then comma we have y in this case so basically we are just printing the statement that is I am going to divide X and Y and then after this we are going to check whether this value that is y which is the denominator whether it is equal to Z or not so we will say if y it is equal to Z then we can simply print the statement that is denominator is zero and then we say cannot divide so basically when the denominator is zero we cannot divide and we have to return back so we will say return in this case so when Y is zero then denominator is zero cannot divide statement should get printed and the control flow should return back or else if Y is not zero then we need to call this divide function over here which was passed as a parameter as you can see so over here we say return and then we say function and then we have to pass both these parameters that is X and Y in this case so we say x comma Y and then guys after this coming out of this inner function we have to return this inner function from this smart divide so we say return inner so as you can see this is our python decorator function that will help us in order to check whether the denominator is zero if it is zero then it will print the statement that we cannot divide the two numbers if it is not zero then this particular function that is divide needs to be called now guys when we are calling this divide we also need to call this smart divide so as we have seen with the etherate operator before this function that is divide we have to provide at the rate and then we have to provide smart divide so when this divide function is being called the control FL flow will go over here and it will check that we have the python decorator in this case so the control flow will come over here and all the operations will be carried out as we have just discussed so guys let me just save this file now and try running this code so as you can see this time we are getting I am going to divide 2 and 5 that's because the first time that we provided the numbers were 2 and 5 in this case so the answer was 0.4 and the next time is I am going to divide two and zero the second statement which contains two and zero numers as the X and Y values we are getting denominator is zero cannot divide so guys over here we have successfully used the python decorator in order to handle the exception that was occurring when we were dividing the two numbers where denominator was zero in this case so property decorator in Python Programming so guys Python Programming provides us with a builtin property decorator which makes usage of getter and Setters much easier in objectoriented programming so guys previously we had had seen the objectoriented programming in Python whenever we are going to have the private variables it is very important that we have the Getters and Setters for them so that they cannot be directly accessed but they can only be accessed using the getter and Setter functions so guys we will check with the help of examples how we can use the property decorator in Python so this is the example code that we are going to use let's say we have the class Celsius over here and initially we have the Constructor which takes the temperature as the argument and this temperature value will be assigned to another variable that is the temperature variable belonging to this class Celsius and then we also have another function that is 2 Fahrenheit which will convert this Celsius temperature to the Fahrenheit temperature so guys let us check this with the help of example as well I'll quickly copy these lines of code and paste this over here so as you can see what we have done is we have the Constructor it is going to take one parameter that is the temperature by default the value will be zero if temperature value is not provided and we have another function that is 2 Fahrenheit it takes the same temperature it multiplies by 1.8 and adds 32 to this Celsius temperature and this is the function in order to convert the deg Celsius to degree fahren so guys over here what we are going to do is we are going to create the object so guys let's say we create an object the name of the object is human it is equal to we call the class name over here that is CSUS and we don't pass any argument so by default the temperature will be taken as zero in this case and let's say the human body temperature just for the sake of example is 37 so we are going to use this object that is human followed by Dot and then we have temperature and then we can simply assign it a value so we can say equal to and then 37 so guys what this statement will do is this 37 value will be assigned to the variable that is temperature of this class that is Celsius so basically it is a public variable right now and then we can simply print these values so we can first of all print the temperature of this human object so we say human followed by Dot and then we say temperature over here and then again in order to get the temperature in fahrenheit what we can do is we can call human followed by Dot and then two Fahrenheit so this is the function that is going to convert the temperature from De Celsius to De fahren so guys let me just save this file now and try running this code so as you can see we are getting 37 as the de cius temperature and then after converting to Fahrenheit since we are taking the floating number over here and based on this formula we are getting the decimal points and the value is 98.6 so guys this is the way that we can use the objectoriented programming in Python now guys there is a very important point the temperature in de celius cannot go to less than 273.15 so this is the maximum negative value in De celius that it can go but guys over here there is no such restrictions we can keep it 300 as well so when we say 300 over here and let me just save this file now and try running this code as you can see we are getting 300 and 508 as dee Celsius and degree Fahrenheit respectively but guys this implementation is not correct since the maximum negative de cus temperature that can go is up to 273.15 so what we can do is we can use the Getters and Setters so suppose we want to extend the usable of the Celsius class defined above we know that the temperature of any object cannot reach below 273.15 de C so what we have to do is we have to make this temperature as a private variable and we have to use the getter and Setter functions but guys in order to make this variable as private variable we have to prefix a single or double underscore before this variable and to do that to all the existing instances will be little bit difficult if we we are using this variable many times inside the class so what we can do is we can use the property decorator of the Python that is being provided as the feature in order to accomplish our task of getting the Getters and Setters as well and in order to make this variable as private as well so instead of changing the existing instances of the variable we can simply first of all Define the Getters and Setters so we will say DF followed by get temperature this get temperature function is going to take one parameter that is self which is the object itself and then what we will say is we are going to Simply return this temperature so we will say self followed by Dot and then single underscore or you can also use the double underscore in this case and we are going to say temperature so guys this is acting as a private variable over here and in order to identify that we have come inside the get temperature we will have the print statement and we will say getting value so guys this is the statement that will be printed apart from that the temperature will be returned over here and then guys similarly what we will do is we will also have the set a function so we have set temperature in this case I'll just copy and paste this function name and we will say set temperature over here and we will take self as the parameter and apart from that we will also take the value that is coming in order to set the temperature and then after this we have to check whether this value is it less than 273.15 that is what we have mentioned over here so I'm going to Simply copy this value and we are going to have the condition if value less than this value over here so if the value is less than 273.15 then we will simply print the statement that this temperature is not possible so temperature below 273.15 is not possible and then we have to return back so we will say return in this case and then guys the next statement should be if the value Val is not less than this particular value then we have to assign that value to the self temperature over here so I'm just going to copy this variable name and paste this over here it will be equal to this value that has been just passed to this Setter function so guys we have already defined the getter and Setter function now the main problem over here is we are using the underscore in this case as the prefix whereas we were not using the underscore in this case so guys we can use the property decorator now over here in order to assign those values so what we have to do is inside this class itself that is Celsius class we can simply provide the variable name that is temperature it is equal to we say property in this case so guys this is the builtin class that is provided by the python in order to solve the challenge that we are facing right now so basically we are going to provide the property and then after this we simply provide the getter and set a function name so over here we say get temperature followed by comma and then we say set temperature in this case so guys basically we provide the geta function that is get temperature and set temperature is the parameter to this property decorator over here so guys python will come to know that for this temperature we have to use this getter and this Setter in this case so now what will happen is whenever we are going to call human. temperature it sees that there is a getter function in this case and it will try to assign this 300 in which case the set temperature will be called and this particular condition that we have just find will be checked whether it is less than 273.15 if yes then this particular statement will be displayed and the control flow will return back if this condition is false then basically the temperature value will be over return so guys let me just save this file now and try running this code so as you can see first of all human it is equal to Celsius so basically human do temperature it is equal to 300 so over here what it is trying to do is it is trying to call this set temperature function and since the value is 3 300 that was passed from here the value is less than this particular value and that is why temperature below 273.15 is not possible statement is getting printed over here now guys next time what is happening is the print statement human do temperature so the control flow is trying to get the value of the temperature so it is saying getting value over here and then after this initially by default the temperature was Zero which was never overridden over here and that is why we are getting it as zero and next time we are getting the value in terms of Fahrenheit over here so basically this 2 Fahrenheit function is again calling the get temperature over here so again we are getting the value in this case and since this is zero this multiplication expression becomes zero over here and we are getting 32 as the value so we are getting 32 as the value now so guys let's say we provide 200 this time so basically this temperature below this particular value is not possible should not be printed in this case so let me just save this file now and try running this code so as you can see we are getting value 200 was set and 2 Fahrenheit it is 328 as the value that is getting displayed in degree Fahrenheit so guys this is the way that we can use the property decorator with the help of Getters and Setters whenever we want to hide a particular variable inside the class and make it as a private variable so guys please make sure that you practice on your own so that on different inputs you get different outputs so we have come to the conclusion of the Python programming language hopefully you have got enough knowledge about the Python language and you should practice on your own so that on different inputs you get different outputs and that is how you are going to learn more about the Python language so that's it in this video I'll see you in the next video till then stay tuned