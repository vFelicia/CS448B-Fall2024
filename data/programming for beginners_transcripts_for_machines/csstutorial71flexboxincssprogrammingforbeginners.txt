so now we will see flexbox in CSS so guys basically before the flexbox layout module there were four layout modes in the CSS so first of all we have the blog model which is used for displaying the sections in a web page apart from this we also have the inline model which is used for the displaying of the text and then we also have the table model which is used for the twodimensional table data and then we also have the position property in CSS which is used for explicit position of an element now guys we can use any of these models in order to display the content based on our website design now guys apart from this we can also use the flex boox layout module which we are going to check with the help of examples as well so the flexible box layout module makes it easier to design flexible responsive layout structure without using the float or the position property in this ESS so guys let us see a very simple example of the flexible box layout module so let us move to the vs code over here now before writing any code in this case what we are going to do is first of all we will understand how this Flex boox module will work so guys basically we can arrange the HTML elements in the row direction or the column Direction so when we move from left to right over here it is the row Direction and then when the HTML elements move from the top to bottom then it is called the column Direction in this case so guys simply we can provide the text over here that this is row Direction in this case and then apart from this we also have the column Direction over here so simply we are going to say column direction that is going from top to bottom so Guys these are the two directions in which the flex boox module will work now guys apart from this when we talk about the row direction we have two axis that is the main axis and the cross AIS so the axis that is moving from left to right is the main axis over here and the axis that is moving in the vertical direction that is top to bottom will be the cross AIS over here so simply we are going to provide the vertical axis in this case which is the cross AIS over here so guys basically this is the main axis that is going from left to right in this case and then apart from this the axis that is going in the vertical direction is the cross axis for the row Direction so guys this is a very simple understanding of the flexbox model so by default there is a row direction in which case the HTML elements will be placed in such a way that they will be placed from left to right direction and then we can also provide certain CSS properties in order to move the other HTML elements that is going beyond the screen on the right hand side to move at the bottom position as well which we are going to check with the help of examples and then guys in the row Direction itself we have the cross AIS which moves in the vertical Direction over here now guys similarly when we say column Direction in the flexbox model so basically the main AIS and the cross AIS will be opposite to each other so in this case when the flexbox model is in the the column Direction the vertical axis will be the main axis over here so let me just draw that as well so simply we are going to draw the vertical axis in this case and then we also have the horizontal axis so this is the horizontal axis over here and in column Direction the vertical axis is the main AIS so let me just copy this main AIS text over here and paste it at the vertical Direction and The Cross axis will move from left to right over here which is this particular axis in this case so guys basically is the reverse as far as the column direction is concerned so Guys these are the two things that you should know in the row Direction the main AIS belongs to the left to right direction and the cross AIS belongs to the vertical Direction over here whereas in column Direction the vertical AIS is the main AIS and the horizontal AIS is the cross AIS so guys let us move to the vs code over here in order to check the examples so simply we are going to provide the container class over here so we are going to have the dep tag with the class container and then let us say we have four diff tags over here so we have the first diff tag as one in this case and then we have 2 3 and then four now guys apart from this what we will do is we will make this container as the flexbox container so it is very important that when you are going to use the flex boox model you need to have the flex container as well so we are going to treat this particular parent di tag over here as the flex container so simply inside the style. CSS file we need to provide the container class in this case and then simply we can say display it is equal to flex so guys this is the way that we can use the flexbox model and then apart from this let us also have certain background color so let's say we have the background color as the black color over here and then for the diff tag as well we are going to have certain CSS properties so guys over here we are going to have container and then inside the container we need to provide the CSS properties to all the diff tags over here so guys simply we are going to say background color of yellow color in this case and then we are also going to provide the padding property of 20 pixels over here let me just save this file now and try reloading this page on the browser so let us see how it looks like so as you can see the black color background is for the diff container which is a flex boox container over here and then apart from this we also have the flex items in this case that is 1 2 3 and 4 we have provided the required padding in this case but we can also provide the margin as well so that there is certain space in between the border of the container and the border of the individual Flex items over here so guys basically we can have the margin of 10 pixels for all the flex items so guys basically the container is called the flex container in this case and whatever items are present inside the flex container are called the flex items let me just save this file now and try reloading this page once again on the browser so as you can see we have provided the margin of 10 pixels over here and this is a very simple example of a flex container in this case we can also have more items over here so inside the HTML file simply let me just provide two more div tags over here and the content we will provide it as five and six numbers let me just save this file now and try reloading this page once again on the browser so as you can see more items are getting added over here based on the HTML content that we have provided so guys this is the way that we can provide the flex container with the help of the display equ Al to flex value and then apart from this we can provide the different CSS properties for the flex items inside the flex container as well now guys apart from this we also have multiple other CSS properties over here so as you can see the flex container properties are first of all we have something called as Flex Direction so guys this is nothing but the direction that we have just understood with the help of these graphs over here so by default the flex direction is the row Direction over here we can change it to column direction as well so let us check that how it looks like so guys basically what we have to do is this Flex direction is the CSS property for the flex container so guys simply inside the container class we need to provide the flex Direction CSS property and by default the value is Row in this case so let me just save this file now and try reloading this page once again on the browser so there is no change because this is the default value now guys instead of row we can also have row reverse over here in which case the items will be displayed from right to left in this case so basically by default the items are getting displayed from left to right in this particular direction but if we want the direction to be reversed that is from right to left we can change the flex direction to row revers so let me just save this file now and try reloading this page once again on the browser so as you can see the items are now getting displayed from right to left first we have the div tag with the content that is one and then we have 2 3 4 and so on the content is displayed from right to left now guys apart from this we also have something called as column Direction over here so instead of having row reverse simply we can have the column value for this Flex Direction so guys what will happen is over here just we have understood with the help of the craft in the column Direction This is the main axis in which case the HTML elements will be displayed from top to left over here so guys let us check that as well when we change the flex direction to column the first element should be displayed at the top and then the second element should be displayed below the first element and so on all the elements will be placed in the vertical Direction over here so guys let me just reload this page once again so as you can see we have one and then followed by two and so on all the elements are getting displayed over here apart from this you can also set the width of individual element in this case in order to avoid the div element taking the entire width of the screen so guys in this way you can also use the column Direction over here and then you can also use the column reverse as well in which case the first element will be displayed at the bottom and Then followed by two and so on the last element will be displayed at the top so when we reload this page as you can see first we have the Sixth Element and then we have Fifth and so on the elements are displayed in the column reverse Direction so guys this is the way that you can set the flex Direction over here apart from this we also have something called as Flex wrap so guys basically in order to understand this Flex wrap property what we have to do is we need to add more elements over here inside the container and also we need to make the flex direction as Row in this case which is the default value so guys let me just save this file now and try reloading this page so as you can see these are the elements that are getting displayed now what we will do is we will add more diff tags over here so let me just copy paste these lines of code and then let me just change the content over here so guys basically we are updating the content and let us set 14 number of div tags over here so guys we have 1 to 14 div tags in this case let me just save this file now and try reloading this page once again on the browser so if you notice we are going from left to right in this case 1 2 3 4 and so on you can see at the bottom we are getting the horizontal scroll bar over here and the content is going beyond the width of the screen in this case the last element is 14 over here now guys let us say whatever elements are going outside of the width of the screen in this case we want those items to to be displayed below these items that is 1 2 3 and so on so basically we don't want this horizontal scroll bar to be displayed so guys what we can do is simply we can use this Flex WRA CSS property so guys by default the value of this Flex WRA CSS property is no WRA over here in which case all the elements will go beyond the width of the screen as you can see but when we set the value as wrap in this case so basically whatever elements that do not have any space left beyond the width of the screen will be displayed at the bottom over here within the same container so guys let me just save this file now after providing the W value to the flag rep and reload this page once again on the browser so as you can see 11 12 13 and 14 are now getting displayed at the bottom over here in the same container so guys in this way you can also use the flag W CSS property when you have more number of HTML elements within the same container which is going beyond the width of the screen now guys apart from this we also have something called Flex flow over here which is nothing but the shorthand CSS property for the flex Direction and flex rep CSS property so guys let me just remove both these properties over here and let us see how it looks like on the browser so as you can see it is in the row Direction and there is no W over here so simply we can provide the flex flow CSS property and let's say we want the row Direction over here so simply we provide row followed by the space character and then we provide the rra value over here so guys basically we are providing the the values for Flex Direction and flex W in this shorthand CSS property that is flex flow let me just save this file now and try reloading this page once again on the browser as you can see now the items are getting wrapped over here apart from this instead of having row value we can also have row reverse as well so that the items are displayed from right to left Direction so when we reload this page as you can see the first element is at the right and then we have 2 3 4 last element is 10 and then the other elements are displayed on the next next line that is 11 12 13 and 14 so guys in this way you can use the flex flow CSS property which is the shorthand method for Flex Direction and flex rep CSS property now guys apart from this we also have something called as justify content which is used to align the HTML elements inside the flex container over here so guys let us check that as well how we can use it so simply let us move to the row W so simply let us change this value to row so that the flex items are getting display in the default Direction let me just reload this page so as you can see these are the HTML elements that are getting displayed inside the flex container now guys when we say justify content it is having multiple values so as you can see if we want to provide the HTML elements at the center of the container so simply we can provide the center value let me just save this file now and try reloading this page once again on the browser so as you can see all the HTML elements now are being displayed at the center of this particular flag container over here so let us check this with the less number of HTML elements over here so what we will do is simply we are going to keep the diff text from 1 to 5 over here and let me comment out the other lines of code let me just save this file now and try reloading this page so as you can see this is the center value of the justify content and if we want to align them at the left side of the container simply we can say the start value for this justify content over here let me just save this file now and try reloading this page so as you can see the elements are now getting displayed at the start of the container that is on the left hand side and then when we say end that means we can align the HTML elements at the right hand side of the container so guys as you can see the elements are getting aligned at the right hand side of this main AIS based on the row Direction over here now similarly for the column direction as well we will have the justify content based on the main axis so guys in the column Direction our top to bottom axis becomes the main main AIS over here and justify content will be used in order to align it based on the main AIS so I leave this up to you as a homework for you so that you can practice on your own apart from this we also have something called as align items over here so guys let us check that as well so what we will do is let us say we want to increase the height of the container that is the flex container over here so simply we are going to set the height of flex container to 200 pixels and let us say we have the justify content as the the center value so that all the HTML elements are displayed at the center so guys let me just save this file now and try reloading this page so as you can see the height of the flex container is now 200 pixels over here and all the HTML elements are now taking the entire height of this particular Flex container over here now guys what is the meaning of the Align items so basically just like how we have used the justify content in order to align the items horizontally that is at the main is of this row Direction over here the Align items will be used in order to align these HTML elements against the cross AIS in this case the cross AIS is the top to bottom or the horizontal AIS over here so guys let us check that as well so simply we need to provide the Align items CSS property for this container class and then let us say we want to provide the value as Center over here let me just save this file now and try reloading this page once again on the browser as you can see see vertically now all the HTML elements are at the center of this container similarly if we want all these elements to be present at the top of the container so we can say start value for this align items so guys if you notice when we say start the Align items work with the cross AIS over here which is the vertical axis in this case when we talk about the row direction of the flexbox model so let me just save this file now and try reloading this page once again on the browser so as you can see the HTML elements are now getting displayed at the top of this particular container and similarly if we want these elements to be present at the bottom of the container as far as the cross AIS is concerned we can simply provide the end value so when we reload this page as you can see at the bottom of the flex container we are getting all the HTML elements so guys this is the difference between the justify content and the Align items so basically the justifier content work towards the main exis of the flexbox model and the Align items work towards the cross AIS of the flexbox model now Guys these directions will change when we change the flex direction to column Direction over here so in this case the justify content will allow us to provide the HTML elements alignment towards the main axis that is the vertical axis over here and the Align items will help the alignment across the cross AIS over here which is the horizontal axis as far as the column direction is concerned now guys apart from this we also have something called as align content over here so guys in order to understand this we need to uncomment these lines of code over here so that we have more number of HTML elements let me just save this file now and also for the Align items over here we will keep the alignment as the center value in this case let me just reload this page once again over here as you can see we have all the HTML elements we have the Align items as the center and also the justify content as the center now guys the Align content CSS property will help us in order to provide the spacing between these HTML elements as far as the cross XS is concerned so guys let us check that as well so what we will do is simply we can say align content over here and there are multiple values in this case so let's say we provide space around value so guys let us check how it looks like so when we save this file now and try reloading this page once again on the browser notice that we have the same space on the top and at the bottom of all the HTML elements over here and that is how the space around value will work and then apart from this we also have something called a space between over here let me check that as well so when we reload this page once again on the browser as you can see at the top of the first line and at the bottom of the second line over here we have the equal space and the equal amount of space is present in between all these HTML elements as far as the cross AIS is concerned apart from this we also have another another value that is space evenly over here so let us check that as well so when we reload this page as you can see on the top at the middle and at the bottom as well all the spaces are equal in this case so guys based on your project requirements you can simply provide different values for the Align content CSS property which is part of the flex container over here so Guys these are some of the CSS properties that you can use based on your requirements as far as the flex container CSS properties are concerned now guys apart from this the flexbox model also allows you to center a div element very easily using display equal to flex value so guys I leave this exercise as a homework for you simply you can provide a justify content equal to Center and also the Align items as the center value over here so guys just by setting these two CSS properties you can provide the diff tag at the center of the container just like how we have done with all these multiple HTML elements now guys apart from this we also have some of the flex item properties over here so previously whatever properties we have seen belongs to the flex container over here which we have mentioned inside the dot container class but we can also provide the CSS properties to the flex items which are represented by these diff tags over here so guys let us check that as well so what we will do is first of all we have something called as order over here so guys let us check that as well so basically we are going to reduce the number of flag items that are getting displayed to four diff tags over here so we have one to four diff tags let me just save this file now and try reloading this page once again on the browser notice that we have the justify content as Center and also the Align items as Center over here so as you can see these are the CSS properties that are making us display the diff tags at the center of the container now guys let us say we want to change the order of these diff tags over here so it is not necessary that all the diff tags that you have provided inside the HTML file file needs to be displayed in the same order so let's say we have the ID for this fourth diff tag S4 over here so what we have to do is we need to provide the order CSS property inside this particular HTML element so guys let me just save this file now and we will copy this ID over here of the diff tag that is four in this case and then we will provide the hash character followed by the four that is the ID of the fourth diff tag and simply we can say order equal to minus1 so guys basically by default the order of the HTML elements is zero over here so simply we can provide minus1 in this case so that this is given the highest priority so let me just save this file now and try reloading this page once again on the browser notice that the fourth element is now getting displayed first followed by 1 2 3 which are having the other order values now guys apart from this let us also provide the ID for the second div element that is two over here so simply we will provide the ID as two let me just save this file now and over here we will provide this ID in this case and what we will say is the order it is equal to one so let me just save this file now and try reloading this page once again on the browser notice that the second element is now getting displayed at the end in this case so guys by default we have the order as zero for first and the third element for which we have not provided the order property and for the fourth element we have order equal to minus1 which is then given the highest priority and then the least priority is given to the two which is having order equal to 1 so guys lesser the number will be having more priority as far as displaying that HTML element inside the container is concerned so guys this is one of the CSS property for the flex item over here apart from this we have something called as Flex grow in this case so guys if you notice there is a lot of space that is available at the left hand side and the right hand side of all these Flex items over here so what we can do is we can occupy that Space by using the flex grow CSS property so let's say by default the width of all these three items that is 1 3 and two is same over here and the remaining space that is present on the left and on the right we want it to be occupied by this first element that is the diff tag having the content four so guys what we can do is simply we can provide Flex grow CSS property to this div tag that is having the ID equal to 4 over here and then simply we can provide the value as one by by default the flex grow CSS property is having the value as zero but simply we can provide the value as one in which case only this particular diff tag that is having the id4 which means only this first box over here will expand itself horizontally in such a way that the entire available space will be occupied by this fourth element over here so guys let me just save this file now and try reloading this page once again on the browser so as you can see the entire available space is now being taken by the fourth element over here and the remaining space is being taken by the other elements over here so guys in this way you can also provide the flex grow CSS property now guys apart from this let us say we want the second element that is having the id2 over here which is at the last place in this case we want that element as well to expand but it should be double compared to the fourth element which is displayed at the first position so guys what we can do is simply we can provide Flex grow it is equal to two over here so guys what will happen is the flex grow CSS property for 1 and three will be zero which means they will take only this particular space or width inside the container and then for the fourth element we have the flex grow equal to 1 but we have the double of this one which is equal to two Flex grow for this particular second element so guys basically the width of this particular second element will be double compared to the width of this particular fourth element over here and accordingly the space will be provided to both these elements so guys let me just save this file now enter I reloading this page once again on the browser so if you notice the width of the second element is double compared to the fourth element over here and one and three are taking the required spaces that which they were taking at the original state so guys in this way you can provide the flex grow CSS property as well now guys apart from this we also have something called as Flex shrink which works opposite to the flex grow so it will reduce the size of the HTML element as far as its functionality is concerned so guys I leave this up to you as a homework for you you so that you can practice on your own apart from this we also have something called as Flex bases so guys basically this will help us in order to set the initial width of a HTML element so guys let us check that as well so what we will do is let us say for this first element we provide the IDS one over here and simply we will provide the CSS property for this ID 1 so guys let me just provide the CSS property of flex bases over here so what we can do is simply we can provide the width of 100 pixels as the original width for this particular first element so guys simply you can provide the initial width with the help of the flex bases CSS property let me just save this file now and try reloading this page once again on the browser notice that the first element is now having the 100 pixels over here followed by the third element which is having the required width as necessary and then apart from this we have Flex grow equal to 1 for this fourth element and flex grow equal to 2 for the second element over here so in this way you can use the flex bases here property and then we also have something called as flag CSS property which is nothing but a shorthand method in order to provide all these CSS properties that is flex grow Flex shrink and flex bases over here so guys this as well you can practice on your own as a homework for you and then apart from this we also have something called as align self so guys basically it is similar to the Align content that we have seen for the flex container CSS property but when we say align self basically the value that we provide for the align self will override the value that we had provided in the Align content over here so guys let us check that as well in the flex container that is the container class we had provided the Align content as space evenly over here and they are at the center of the container so guys apart from this we have something called as align self over here which is similar to the Align items that we had provided in this case inside the flex container CSS property so guys whatever value we provide to the Align cell will override the value of the Align items that we had provided so guys let us check that as well so what we will do is first of all in the container that is the flex container over here we will comment out this line of code that is align content and then guys for this align items we have Center value so let me just check that as well so when we reload this page as you can see all the items are at the center as far as the vertical AIS that is the cross AIS is concerned now guys let us say we only want this fourth element to be at the start of this container that is at the top of the container over here so simply we can use the Align self CSS property specifically for this particular selector that is having the ID equal to 4 so guys simply we can provide aligned self CSS property over here and we can provide the value as start in this case so guys when we say Flex start over here let me just save this file now and try reloading this page once again on the browser so as you can see now the fourth element is getting displayed at the top of the container because of this Flex start value that we have provided to align self so guys simply the Align self CSS property is used in order to align the specific HTML element that is the flex item inside the flex container we can also have the Align self CSS property for the second element as well so over here we can provide the Align cells and let's say we provide the flex and value so basically the second element should be displayed at the bottom of the container so let me just save this file now and try reloading this page once again on the browser so as you can see the second element is now getting displayed at the bottom of this container so guys in this way you can use all these Flex items CSS property based on your project requirements so guys comment in the comment section below whether you have learned something out of this video please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is Media queries in CSS so stay tuned