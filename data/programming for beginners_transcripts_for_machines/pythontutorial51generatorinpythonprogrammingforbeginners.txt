hey what's up guys welcome to another video in which we are going to learn about generators in Python Programming so guys in Python a generator is a function that returns an iterator that produces a sequence of values when iterated over so basically a generator is nothing but it is a function that will help us in order to generate the sequence of values and we can iterate through those values now generators are very useful when we want to produce a large sequence of values but we don't want to store all of them in memory at once so guys we are going to check this with the help of examples as well how generators are very memory efficient as far as Python Programming is concerned now similar to defining a normal function we can define a generator function using the def keyword but instead of the return statement we use the yield statement so as you can see this is the syntax of the generator function we have the def keyword followed by the name of the function it can take any argument over here and as you can see one of the statements must be including the yield keyword over here so this statement will yield something instead of returning the value so basically the yield keyword is used to produce a value from the generator and pause the generator function's execution until the next value is requested so guys let us check this with the help of example code now we are going to check how the python generators work with the help of the debugging so guys let's say We'll Define the function over here using the TEF keyword and Then followed by the name of the function that is the num generator so we are going to generate some numbers over here so we have this num generator function and then it is going to take the argument as the maximum value up to which we want to generate the numbers and then after this colon what we will do is we will initialize the value of n it is equal to 0 and then what we will do is we will have the while loop and it is going to check whether this n is it less than or equal to Max so over here we are going to give the condition that this n value must speed less than or equal to this max value over here so the number it starts from 0 and then it will go up to the number that is Max which will be given as the parameter while calling this generator so guys what we have to do is we have to use the yield keyword so over here what we will be doing is whatever the N value is we will be providing that value so we will be returning that value so we provide this statement that is yield n and then after this what we will do is we will increment the value of n so n plus it is equal to 1 so we will increment the value of n by 1 over here so guys this is the way we have created the generator function now how do we call it so guys outside this function we will be having the for Loop and then we will get all the values that is being generated by this num generator over here in the item so we have item and then n and Then followed by the function name that is the generator name over here so guys while calling this generator it is expecting one argument so we are going to give this number as 5 over here so the numbers will be from from 0 up to 5 in this case and then we will provide a colon and simply we are going to print the item in this case so we have item and then let's say in order to get all the numbers on the same line we will have the end parameter and we will separate all the numbers using the space character inside this and parameter over here so guys let me just save this file now and try running this code so as you can see it is generating all the numbers that is 0 1 2 3 4 5 so guys this is the way that the generator works now guys you will ask me like what is the difference like we can also have the range over here in order to get all the numbers from 0 to 5. so what is the importance of writing this generator as a function over here so guys the important advantage of using this generator is it is very memory efficient so when we are saying that yield n that means only one number at a time is getting generated over here 0 is getting generated only once and then we have one over here then we have 2 over here so all these numbers are not being stored in in the memory but during the run time individual numbers are getting generated one at a time by using this num generator so guys let us check this how it works using the debugging so what I will do is I'll provide a breakpoint over here on the for Loop and then we will say run and then we will say start debugging over here so one at a time we will come to know what are the different steps that the control flow is going through so over here as you can see the control flow has stopped over here now let us go inside this so I'll click on this step into action over here so when we click on this as you can see the control flow has come over here that's because the num generator with 5 has been called right now and then again we will click on this to go to the next step so we are on the while loop now and then what it is doing is it is yielding this value that is n so when we press once again so as you can see it has come back over here print the item so basically what has happened is it has returned the value of n that is 0 and it is assigned to this very variable that is item so again when we press on the step into as you can see the 0 is getting printed now so basically the item got printed after the statement that is yield n was executed and then next time once again the control flow has gone to the for loop again it says that num generator we need to call so the control flow will see that the previous time it was returned from here so the control flow will go to the next line that is n is equal to n plus 1 so the value of n will be incremented now and then again we go to step into we go to the while loop once again and then again yield n this time the value of n will be 1 so n is being returned and is assigned to this item and then again we will print the value of item so as you can see one is getting printed once again and then when we press the step into actions once again as you can see 2 is getting printed now and then again the next time 3 should get printed as you can see 3 is getting printed so guys basically the main advantage of this gender greater function is to generate one number at a time and not store all the numbers in the memory so this is the memory efficient operation that is being carried out by this generator in the Python Programming so guys when we press on this continue then the other number should get printed over here now guys let us move to another task we have something called as python generator expression so basically in Python a generator expression is a concise way to create a generator object so basically this is the syntax that is expression followed by 4 and then we have item in iterable so guys let us check this as well with the help of example now what we will do is we will have the square generator so basically this generator will be used in order to get the square of the numbers it is equal to what we will do is as we have seen over here this is the syntax first of all we are going to have the expression inside the parenthesis and then we are going to have the for keyword followed by item and then in the iterable so we can simply find the square of the num number by multiplying that number by itself so what we are going to do is we will say I multiplied by I now from where this I will come we will have the for keyword and then this I will come from here that is I in and then we can say range and then we can simply provide the number that is 5 so basically this range will help us to generate the numbers from 0 to 4 and 1 at a time all the numbers that is 0 to 4 will be assigned to this variable that is I and then I multiplied by I will be generated and it will be assigned to this generator and we can simply iterate through this generator in order to print all the numbers that is the square of these numbers over here so guys how we will do that we will simply use the for Loop now and then over here we will say element in and then we can simply have the square generator over here and then we can simply provide the print statement and we can print the element so guys basically this is going to print the square of the numbers going from 0 up to 4 over here in this case so let me just save this file now and try running this code so as you can see square of 0 it is 0 square of 1 is 1 the next number is 2 so 2 2's are 4 and then the next number is 3 so square of 3 is 9 and then the next number that is 4 the square of 4 is 16 over here so guys this is the way that we can use the python generator expression as we have seen over here in order to generate the numbers and one at a time iterate through them by using the for Loop over here now guys why do we use this python generator so basically it is very easy to implement as compared to the iterables that we have seen previously you can easily generate the generators in order to iterate Through Time Another important Advantage is it is memory efficient as we have seen that only one item at a time is getting returned whenever we are using the generator function so we use the yield keyword instead of the return keyword in order to return the individual elements inside the generator it also represents the infinite stream of data so basically whenever we are going to implement the infinite stream of data it becomes very important that we can use the generator so as you can see for example we have this all even function over here n value is initialized as 0 and then we can say while true yield and value so over here one value of n will be returned at a time so basically this is very memory efficient over here we are not storing all the values in a particular list but we are generating one number at a time next time the value of n will be incremented by 2 in this case so guys generators are very important whenever you are going to deal with programs which requires memory efficiency so guys please practice on your own so that on different inputs you get different output make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is closures in Python Programming so stay tuned