hey what's up guys welcome to another video in which we are going to learn about closures in Python Programming so guys python closure is a nested function that allows us to access variables of the outer function even after the outer function is closed so guys we will check this with the help of examples as well so what this python closure means is whenever we are having the inner function inside the outer function and when we are using the variable of the outer function inside the inner function still we can access that variable from the inner function itself even after the outer function execution is completed so guys over here we have the function that is the create and over here what we are doing is we are providing the variable that is name and the value is drawn over here and what we are doing is we are returning an anonymous function so in this case we have to return the function which will be assigned to the variable so we are returning Lambda and then we are saying hi and then this name so guys basically what we have to do is us when we are calling this create function we are assigning the value to this message so what will be the return value over here it will be this Anonymous function which will be returned and it will be assigned to this message variable and since it is a function now we have to use the open and close parenthesis while calling this function that is message and we can call it inside the print function as well since it is going to return this string over here so guys let us check this with the help of example now so we are going to have the function that is grid over here which is not going to take any parameter and then inside this we are going to have the name let's say we initialize the name as Peter and then what we are going to do is we are going to return an anonymous function in this case so let's say the anonymous function it is Lambda followed by colon and then we are simply going to provide the string that is height followed by plus and then the name that we have already defined over here for which the value is beta so guys this is the way that we can have the anonymous function now this Anonymous function will be assigned to another variable when the create function is called so over here we will say message it is equal to this grid function so this grid function is being called what the control flow will do is it will see that the name value is parameter and it will say high name and this entire Anonymous function will be assigned to this message now we can simply call this message and print the statement so over here we will have the print statement and we can call this message variable but it is a function now since this grid function is returning the anonymous function we have to provide this open and close parenthesis over here along with the message variable name so guys let me just save this file now and try running this code so as you can see we are getting the message that is hi Peter so guys over here this function is being treated as a closure now why so because as you can see we are printing this message function and the execution of this this function is already over that is the outer function execution is already over but the name parameter is present inside the outer function still we can access it by calling the variable that is outside of the grid function and guys this is what we call it as a python closure wherein we can access the variable of the outer function from the inner function now guys let us take another example so let's say we have a function over here so we say d e f followed by the function name that is calculate which is not going to take any parameter and then over here let's say we provide the value of n it is equal to 1 and then what we will do is we will have another inner function over here so we say def followed by Inner and then this is another function so what this function will do is it will access the variable that is in the outer function that is the variable n and it will add 2 to it so basically what we have to do is we have to use the nonlocal keyword over here in order to access that variable after this we have to increment the value of n by 2 so n plus it is equal to 2 over here and then we will say return n in this case so guys basically what this is doing is it is taking this variable that is n and then it is incrementing the value of n by 2 and then it is returning so guys basically it is going to only return the odd number starting from 3 over here since the initial value of n is 1 and what we will do is the outer function that is calculate it is going to Simply return this inner function over here so we say return in r in this case so guys basically whenever we are going to call this calculate it is going to return this function that is enough which will be assigned to another variable outside of this calculate function so let's say we have a variable that is odd it is equal to we call this function that is calculate over here so what this will do is the control flow will see that we have called the calculate function it will come over here and then n will be assigned the value that is 1 and then it is going to return in R so basically this is getting returned that is the inner function is getting returned and it will be assigned to this odd variable so next time we can simply call this odd variable in order to get the value of this n so let us check that what we can do is we can simply provide the print statement and inside this we can call this odd function over here so this odd function is going to call this inner function it is going to see that the nonlocal and the value is 1 right now so it will do n plus it is equal to 2. so the latest value of n will be 3 and that value will be returned and it will be displayed over here so guys let me just save this file and try running this code now so as you can see 3 is getting displayed similarly if we want to get more values so I am going to Simply copy and paste these lines of code that is we are going to print more odd numbers over here so I'll just save this file now and try running this code as you can see we are getting three and then the next odd number will be 5 and then the next odd number will be 7 so guys basic we have only called the outer function that is calculate once but this is the importance of the Python closure it remembers what the previous value of n was and continuously it increments the value of n by 2 and that is what we are getting over here so guys this is the way that we can Implement python closures please make sure that you practice on your own so that on different inputs you get different output make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is decorators in Python Programming so stay tuned