hey what's up guys welcome to another video in which we are going to learn about exception handling with try accept block so guys basically it is important to handle exceptions that we have already seen in Python we use the try accept Block in order to handle the exception and this is the syntax in order to handle the exceptions in Python so basically first of all we have the try keyword followed by the colon and then we have the code that may cause the exception for example we can have a number being divided by 0 in which case 0 division error might occur which is the exception and not only the zero division exception but if any exception that occurs inside this try block we can have the accept block just following this try Block in order to catch that exception so basically inside this accept block we have the code in order to run when the exception occurs so guys this we are going to check with the help of examples now so over here in the vs code what we will do is let's say we want to divide a number by 0 so we want to provide that code inside the try block so we have this try keyword followed by the colon and then over here what we will do is we will say number variable it is equal to 10 divided by 0. so guys if we try to run this code over here 10 divided by 0 for which the zero division error will occur which is one of the exceptions in the Python Programming so what we have to do is we have to catch that exception inside the accept block so over here what we have to do is we have to provide the accept keyword followed by the colon and then we can have the code in order to handle that exceptions over here we can simply provide the print statement and then we can say number cannot be divided by 0 over here so guys this is the code that we are going to execute if the number is getting divided by 0 and the zero division error is occurring so let me just save this file now and try running this code so as you can see number cannot be divided by 0 this line of statement is getting executed over here and this is the line that is getting printed now guys what would have happened if we don't have this try and accept a block so let us just comment out these blocks over here so instead of this we are just having number it is equal to 10 divided by 0 and then let me just comment out this line as well so number is equal to 10 divided by 0 only this line of code is there let me just save this file and try running this code as you can see we are getting 0 division error division by 0 and this is the exception that we are getting on the terminal so over here since we have not properly handled this exception this is the way that we are getting the output but we can have the proper output in this way like we can have a particular statement being printed by using this trial accept block so over here we have just provided the try block and after this we have provided the accept block as well we have provided a beautiful statement that is a userfriendly statement which says number cannot be divided by 0 and when we just save this file and try running this code now it says number cannot be divided by 0 if the exception is occurring over here inside the dry block now guys let's say there is no exception occurring inside the try block so still the print statement will be executed let us check that so over here instead of 10 divided by 0 we will say 10 divided by 2 in which case the answer will be 5 and that will be stored in this number variable and there is no exception that is occurring over here on this line of code so let me just save this file now what we will do is as a confirmation we will come out of this try and accept block and over here we will say end of code so we can just confirm that this is the line that is getting executed at the end of the code so over here let me just save this file and try running this code now as you can see end of code is getting displayed now that is because there is no zero division error that is occurring inside the try block that is because we have changed the expression from 10 divided by 0 to 10 divided by 2 because there is another thing that you can do catching the specific exceptions in Python so as you can see this is the example over here we have the try block and then let's say we have the variable name as even numbers and this is the python list as you can see we have 2 4 6 8 which is the list of numbers all are even numbers and what we are trying to do is we are going to print the even numbers with the index 5 over here but guys as you can see this is the index 0 then we have index 1 then we have index 2 and then three so three is the final index the total length of the list is 4 and 3 is the final index that we can access but we are trying to access the index that is 5 so basically we should get the index out of bound error over here but we can also specify the different exceptions that we have seen so far so basically while providing the accept keyword we can provide the zero division error over here which will say denominator cannot be zero and then we also have the accept keyword followed by the index error so in this case since we are having the multiple accept logs it depends on the control flow the control flow will check that which type of exception is occurring and based on that exception it will try to match that exception is this exception related to zero division error no in this case so is it matching with the index error yes since it is related to the index that we are trying to access which is not possible so it will print this statement that is index out of bound so let us check this block of code over here I just copy this and paste this in the vs code since I am little bit lazy in order to type all this code once again so over here let me just save this file and try running this code now as you can see it says index out of bound that's because the exception that is matching inside this try block is the index error and this is the print statement that we are supposed to print if there is an index error that is occurring now guys let's say you want to print this denominator cannot be zero statement so what we have to do is we have to make sure that inside the dry block there is a divided by zero expression so what we will do is over here I'll just remove these lines of code and we will simply say number it is equal to 10 divided by 0. so in this case divide by 0 expression is occurring and that is why we will get the zero division error and in this case we should get this statement that is denominator cannot be zero so let me just save this file now and try running this code as you can see denominator cannot be zero statement is getting printed so guys it depends on you you can have the specific exceptions being specified over here and each exception will be handled differently this is just a print statement that we have included over here you can have any code inside these except blocks that you want to use based on your requirements of the project but guys remember that whatever matching exceptions that is occurring inside the dry block the control flow will try to match with those exceptions one at a time and once it matches with a particular acceptable block it will try to execute those lines of code inside that block now guys let us move to another task over here python try with as Clause so basically in some situations we might want to run a certain block of code if the code block inside try runs without any errors so for these cases you can use the optional else keyword with the try statement so guys what happens is sometimes there will be no errors that are occurring over here I'll just remove these lines of code so I'll just keep one accept block over here and I'll just remove this exception as well that is zero division error so what we are doing over here is denominator cannot be 0 I'll just save this file and try running this code so this denominator cannot be 0 is getting printed over here but guys what if this denominator is not 0 let's say if I provide the denominator as 2 so in this case this statement will not get printed that's because there is no exception that is occurring and if there is no exception occurring no code in the accept block over here will get executed but what if we want to execute some line of code so over here we can simply provide the else part so basically what happens is let's say inside the try block if we don't have any exception that is occurring so no block of code that is inside the accept block will get executed but let's say in the end if we have this else clock so whatever code we provide over here it will get executed only when there is no exception that is occurring over here inside the dry block so over here what we will do is we will say print we will simply say inside else block so guys this is the code let me just save this file now and try running this code as you can see there is no denominator cannot be 0 that is getting printed but over here we are getting inside else block that's because since there is no exception that is occurring the control flow is not going inside the accept block but it says that we have the else block over here so it executes those lines of code inside the else block now guys what if there is an exception that is occurring so I let's say if we provide this as 10 divided by 0 as the expression so let me just save this file now this line should get printed over here but whether this else part will get executed let us check that so let me just run this code once again as you can see denominator cannot be 0 is getting printed but the code in the else part is not getting printed so that's because since the exception has occurred we are getting into the accept block but not into the else block so guys this is very important in case the accept block is not getting executed we can have the else Block in order to execute some lines of code that you want to execute now let us move to another task over here we have something called as python try finally so guys this is another important concept as far as exception handling in Python is concerned so basically in Python the finally block is always executed no matter whether there is an exception or not so the finally block is optional and for each try block there can be only one finally block so guys what you will do is basically the understanding behind the finally block is irrespective of whether there is an exception that is occurring or not the code in the finally block will be executed so over here we will simply have the finally keyword followed by the colon and then we will say inside finally block so over here we will simply have double quotes and inside this we will say inside finally blocked so guys first of all we will check when there is an exception that is occurring this line of code will get printed and we will not go inside the else part but the control flow will go inside this finally block over here so let me save this file now and try running this code so as you can see denominator cannot be 0 which is this line of statement which is getting printed and then it is not going in the else part but it is going in the finally part so it says inside finally block so over here exception has occurred and the control flow is going in the finally block now let us say there is no exception that is occurring we say 10 divided by 5 over here so let me just save this file now and try running this code it says inside else block so basically there is no exception that is occurring so the control flow is not going inside this accept block but it is going inside the else blocks over here as I have told you if the control flow doesn't go inside the accept block and if there is a else block basically this line of code will get executed and then at the end we have the final block which is getting executed as you can see inside finally block so irrespective whether there is an exception that is occurring or not inside the dry block the finally block will be executed every time now guys where this thing is important basically let's say if you have the database connection or if you have file opened so you can close that file or close that database connection inside the finally block over here after carrying out your operations in the dry block which might have certain exceptions that might occur during the run time so guys during such instances the finally block becomes very important in order to execute those lines of code irrespective whether there was an exception that has occurred inside the dry block or not so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is custom exceptions in Python Programming so stay tuned and