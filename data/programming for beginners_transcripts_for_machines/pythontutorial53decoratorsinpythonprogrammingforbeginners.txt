hey what's up guys welcome to another video in which we are going to learn about decorators in Python Programming so guys a python decorator is a function that takes in a function as a argument and returns it by adding some functionality so basically we are going to define a function that will take another function as a parameter and it will return it with some added functionality and that function that we are going to create is called a python decorator so as you can see in this example we have something called as make pretty which is going to take another function as the parameter and inside this we are having the inner function over here which is going to Simply print I got decorated and then after that it is going to call that function which was passed as a parameter to this make pretty function and after this there is a return inner function which is going to be returned by this outer function so how can we call it so basically we have another function that is ordinary which is going to Simply print I am ordinary so basically we are going to call this make pretty function which is the outer function over here and we are going to pass this ordinary function that we have created over here so this ordinary function is going as the parameter to this make pretty function and the control flow is returning this inner function with the help of the statement so basically this variable will get the inner function over here and when we are going to call this decorated function variable along with the open and close parenthesis this particular inner function will be called so first of all this print statement will be called and then this ordinary function will be called so guys let us check this with the help of example as well so that you get the clear picture of what a python decorator means so basically first of all let's say we Define the function that is ordinary function over here and what we are going to do is we are simply going to print the statement that is I am ordinary so guys how do we call this function simply by using the name of this function we can call it so basically we are going to use the name of the function following by open and close parenthesis so let me just save this file now and try running this code so as you can see I am ordinary is getting displayed but what is the main aim of python decorators it is going to take this function as the parameter and return it with some additional functionality so let's say we have another function over here and the name of that function we will keep it as make pretty and then this thing is going to take another function as the parameter so let's say we provide the function as the variable name and then after this we have a colon and then inside this we are going to have another nested function which we call it as inner and this thing is not going to take any parameter and then after this simply we are going to print that I am decorated over here so I am decorated and then after this we are going to call this function which was passed as the parameter to the make pretty so we'll just call this function using the open and close parenthesis and then after this what we will do is this this makeup pretty will return the inner function over here so basically we are going to call the return inner over here so now whenever we are going to call this make a pretty function we have to assign it to the variable and that variable will be having this instance of the inner function so what we will do is instead of calling this ordinary function we will say decorated that is the variable name followed by equal to and we will call this makeup pretty function over here so I'll just copy this and paste this over here and with this makeup pretty what we are going to do is we are going to pass this ordinary function because it is expecting a function over here as the parameter so I am going to pass this ordinary we'll just copy and paste over here so guys basically this function is going to return another function that will be inner so this entire function will be returned and assigned to this decorated variable now we can call this decorated variable as a function in order to call the statements that are present inside this inner function so what we are going to do is simply we are going to call this decorator along with the open and close parenthesis over here so let me just save this file now and try running this code so as you can see instead of just IM ordinary we are getting I am decorated over here because this function is getting called so first of all this statement that is I am decorated is getting printed on the terminal after this we have this function call so what is this function called this is nothing but this is the ordinary function that is supposed to be called so this I am ordinary is getting printed as the second line so guys this is the way that we can use the python decorators in order to add some functionality to the existing functions we can use the python decorator which is another function and it is going to return another inner function over here as we have seen apart from this after calling this function we can also have some other statements such as I am already decorated so we can say I am already decorated and before this we can say I am being decorated so basically this is the process of getting decorated and then over here it will print I am ordinary and then again I am already decorated will get printed over here so let me just save this file once again and try running this code so as you can see these three statements are getting printed over here now guys apart from this there is another way in order to mention these decorators so add symbol with a decorator as you can see instead of assigning the function call to a variable that we have done just now over here we are assigning this function call to this particular variable that is decorated python provides a much more elegant way to achieve this functionality using the add symbol so over here we can also use the at the rate symbol in order to call this makeup pretty function so what we have to do is I'll just remove these lines of code so basically this lines of codes are not required and instead of that we can simply call the ordinary function over here but in order to get it decorated what we have to do is before this ordinary function we have to use at the rate symbol followed by The Decorator name that is this function name which is make pretty so over here we will say make pretty so guys in this way when we call this ordinary it is going to check that yes we are having The Decorator over here and this function will be called which will return these statements which we have already seen so let me just save this file now and try running this code so as you can see all these three statements are again getting printed over here so we have not called the make pretty directly but we have called the ordinary function which is the base function and for that we are having The Decorator that is make rating guys let us take another example as far as decorators are concerned with the help of numbers over here so what we are going to do is let's say we have the divide function so divide function takes two parameters that is X comma y it is simply going to divide X by y over here so we are going to have return x divided by Y in this case now guys let's say we call this function so basically we need to call this function function with the help of two numbers so let's say first we call 2 comma five and then let me just save this file now and try running this code so we are not getting any result that's because we are returning x divided by y instead of that let us print the operation so print x divided by y so let me just save this file now and try running this code as you can see we are getting the result as 0.4 but guys let's say I want to divide one more number so let's say we have divide 2 comma 0. Now this time the denominator is 0 and we cannot divide any number by zero so let me just save this file now and try running this code so as you can see we are getting 0 division error that is division by 0 that is the exception that is occurring for this statement that is divide 2 comma 0 so guys let's say we want to handle this exception with the help of python decorator so what we will do is we will have another function over here which will act as a python decorator for this divide function and we will name this function as smart divide it is going to check whether the denominator is 0 or not and then then only it will divide the two numbers so over here it is going to take one parameter that is the function as the argument and then we are going to have colon and then inside this we are going to have the inner function over here now this inner function is also going to take two parameters since the original function that is divided we are calling it with two parameters over here so again inside the inner function we will have X comma Y and then after this simply we are going to have the print statement and we will say I am going to divide X and Y so in this case I am going to divide comma X and then comma and then we have end and then comma we have y in this case so basically we are just printing the statement that is I am going to divide X and Y and then after this we are going to check whether this value that is Y which is the denominator whether it is equal to 0 or not so we will say if y it is equal to 0 then we can simply print the statement that is denominator is 0. and then we say cannot divide so basically when the denominator is 0 we cannot divide and we have to return back so we will say return in this case so when Y is 0 then denominator is 0 cannot divide statement should get printed and the control flow should return back or else if Y is not 0 then we need to call this divide function over here which was passed as a parameter as you can see so over here we say return and then we say function and then we have to pass both these parameters that is X and Y in this case so we say x comma Y and then guys after this coming out of this inner function we have to return this inner function from the smarter divide so we say return in R so as you can see this is our python decorator function that will help us in order to check whether the denominator is 0 if it is 0 then it will print the statement that we cannot divide the two numbers if it is not 0 then this particular function that is divided needs to be called now guys when we are calling this divide we also need to call the smart device so as we have seen with the at the rate operator before this function that is divide we have to provide at the rate and then we have to provide smart divide so when this divided function is being called the control flow will go over here and it will check that we have the python decorator in this case so the control flow will come over here and all the operations will be carried out as we have just discussed so guys let me just save this file now and try running this code so as you can see this time we are getting I am going to divide 2 and 5 that's because the first time that we provided the numbers were 2 and 5 in this case so the answer was 0.4 and the next time is I am going to divide 2 and 0 the second statement which contains two and zero numbers as the X and Y values we are getting denominator is 0 cannot divide so guys over here we have successfully used the python decorator in order to handle the exception that was occurring when we were dividing the two numbers where denominator was 0 in this case so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is property in Python Programming so stay tuned