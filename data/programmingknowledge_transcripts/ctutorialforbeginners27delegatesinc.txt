00:00 - hello guys in this video I'm going to
00:02 - show you what are delegates in
00:05 - cop so uh let's see what is the
00:08 - definition of uh delegates and then we
00:11 - will see us uh declaration and usage of
00:15 - uh
00:16 - delegates so a delegate is a type which
00:21 - holds a method reference in an object
00:25 - okay uh we can also say it is also
00:29 - referred to as a type save function
00:32 - pointer okay so delegate is a type safe
00:38 - function
00:39 - pointer and generally we use delegate to
00:43 - improve the performance of our
00:46 - application because we can use a
00:49 - delegate uh to call methods
00:53 - asynchronously so I will uh demonstrate
00:56 - you how what I mean by those lines but
01:00 - first let's see how we can declare
01:03 - delegates so for that what I'm going to
01:06 - do is I have this class called example
01:09 - one and in this class I will create a
01:12 - public method for
01:14 - example which will
01:17 - be
01:20 - public void or it will return integer
01:24 - for
01:25 - example
01:27 - in and I want to name my method as
01:32 - uh
01:34 - add
01:36 - or yeah add
01:40 - numbers add numbers and this takes two
01:46 - parameters which are obviously two
01:48 - numbers right so this will take two
01:51 - parameters uh first is
01:55 - int number one comma
02:01 - in number two okay and what this uh
02:06 - method does it just Returns the addition
02:10 - of these numbers
02:13 - so
02:17 - return number
02:20 - one
02:22 - plus number two right
02:27 - plus number two this this is a small
02:32 - method and this is there is nothing
02:35 - special in it it just takes two number
02:38 - as a as parameters and it's it adds
02:41 - those two numbers and returns right now
02:44 - I said or by the definition to declare a
02:49 - delegate what are delegate delegate is a
02:52 - type save function pointer so we declare
02:57 - a delegate to point to this function
03:01 - okay so let's see how we can declare
03:04 - delegates first delegates uh we can use
03:08 - delegate or we can declare delegate as a
03:11 - simple function with a keyword delegate
03:14 - so for example I want to create a
03:17 - delegate for this function I will take
03:20 - the signature of this uh method or
03:24 - prototype of this method I will just
03:26 - copy this and paste it here and I just
03:31 - need to include a keyword called
03:36 - delegate here okay
03:41 - so
03:43 - delegate and the number uh name of the
03:47 - delegate uh we will name this delegate
03:50 - as such that it rep represent that it's
03:55 - a delegate of this function so I can say
03:58 - add number
04:03 - Delegate for example okay this is how
04:07 - you declare
04:09 - delegates okay and this function has the
04:12 - same signature to the function you are
04:15 - pointing so for now I'm pointing to this
04:18 - function which returns integer it so our
04:21 - delegate will also return integer and it
04:24 - takes two argument which are ins and my
04:27 - function also take two argument which
04:29 - are in
04:30 - right now delegates are similar to a
04:35 - class in a way we can define an instance
04:39 - of this delegates like in a class we can
04:42 - Define the object of the class you can
04:44 - also Define the object of the delegate
04:47 - okay so let's uh use this
04:51 - delegate sorry this delegate which is
04:54 - add number delegate to our main function
04:58 - so I can create an object of this
05:00 - function like this like I can do it with
05:04 - classes add number
05:06 - delegate D is equal to new add number
05:11 - delegate and it takes two parameters
05:14 - right but for pointing this delegate to
05:19 - this function right now in the
05:21 - definition we are not specifying that
05:24 - this delegate is for this function right
05:27 - but in the construction of this function
05:30 - or as a Constructor of this function we
05:33 - pass the name of the function we point
05:36 - we want to point two in this delegate
05:40 - okay so here we pass a function as a
05:45 - Constructor
05:47 - right and this is showing us error
05:50 - because for example we haven't created
05:53 - the instance of this function to use in
05:56 - here so I will declare this uh method or
05:59 - function function as a static method and
06:01 - then we will be able to use it so I will
06:04 - use it
06:06 - as
06:07 - static and then we can use this
06:10 - otherwise we has to we have to define
06:13 - the instance of this uh example one
06:16 - class and then by using the object of
06:19 - this class we can call this but for now
06:22 - we declare this as a static function so
06:25 - we can use it directly here
06:27 - okay so this is How You Can Make an
06:31 - instance of delegate it uh has the name
06:34 - of the delegate then the object name is
06:36 - equal to new delegate and as a
06:38 - construction or as a Constructor you
06:41 - pass the function name you want to point
06:44 - to okay and now you can just use this
06:48 - Dell object as a instance or object of
06:52 - delegate and call that function so just
06:55 - write Dell
06:58 - Dot Dot and you can just pass those
07:04 - parameters like you uh can pass to a
07:08 - function right so what you can do for
07:11 - example I will declare in
07:18 - int result and this is equal to the
07:23 - addition of two numbers so just write D
07:26 - and this will take two arguments
07:29 - which are two integers right so because
07:33 - we uh have passed this uh add number
07:37 - function as a as a Constructor in the
07:40 - construction of this delegate this
07:43 - delegates knows that it's pointing to
07:45 - this function and this function is
07:48 - taking two parameters or two integers
07:52 - right so I can pass these two integers
07:55 - in here right for example 455
08:00 - comma
08:02 - 678 okay
08:05 - so you can just uh use delegate like
08:09 - this you need to pass those parameters
08:12 - which the function is taking and it will
08:15 - return the result as uh an integer
08:18 - whatever it's returning and then you can
08:21 - just uh print
08:28 - this and cons
08:32 - do right
08:34 - line and you can just print the answer
08:37 - like this result okay and when I run the
08:42 - program it will run
08:44 - fine and it shows me the addition of
08:47 - these two numbers right so this is how
08:49 - you can declare a delegate and use a
08:53 - delegate to point a function but you can
08:57 - do it like this Al also uh why do we
09:01 - really need this delegate if we can use
09:04 - this function directly you can just use
09:06 - this uh add a number here and you can
09:09 - pass these two numbers instead of doing
09:12 - this you can just uh you can just copy
09:16 - the name of this function and instead of
09:20 - this Dell object you can just use this
09:23 - and it will also give the same result
09:25 - but why we can you we need to use this
09:27 - delegate because because whenever we
09:30 - create some classes uh which has to be
09:35 - you know uh used in a general sense or
09:40 - in a multiple situation delegates are
09:43 - very useful why
09:46 - because in instead of this condition for
09:49 - example you wanted a product of these
09:52 - two numbers and these two numbers uh the
09:56 - argument will be same but for example
09:58 - you want to change the function
09:59 - functionality of the product you cannot
10:01 - change the functionality of the product
10:04 - uh when you use the same function but
10:07 - you can change the functionality of the
10:09 - pro pro functionalities of this uh
10:12 - number or this function when you use
10:15 - delegates because delegates just point
10:18 - to a function so you can point to a
10:20 - multip add or multiply numbers function
10:24 - and this will this delegate will for
10:26 - work fine so in a situation where you
10:29 - need some performance or multiple usage
10:34 - of the function or method you use
10:37 - delegate in the next video I'm actually
10:40 - going to show you how to use uh this
10:43 - delegate in a better way uh using some
10:46 - class and some better example so stay
10:50 - tuned and please RIT comment and
10:52 - subscribe and bye for now