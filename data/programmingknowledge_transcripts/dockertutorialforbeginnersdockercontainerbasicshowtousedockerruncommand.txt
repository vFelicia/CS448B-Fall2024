00:00 - hey guys welcome to the next video on
00:02 - docker tutorials for beginners
00:04 - till now we have learned the basics of
00:07 - docker files and how we can create
00:10 - docker images using docker files
00:13 - now in this video we are going to learn
00:15 - about docker containers
00:18 - so as i have told you earlier when you
00:20 - run
00:21 - an image it's called a container
00:25 - so in the last video we have created
00:28 - this docker file and we have already
00:30 - built our docker file
00:32 - to produce an image so let's
00:35 - list out the docker images which we have
00:38 - created
00:39 - in the last video so just give the
00:42 - command
00:43 - docker images here and
00:46 - this was the image which we have created
00:50 - we have named our image as
00:53 - my app and the tag which we have given
00:56 - to our image
00:57 - is one here now this is the image
01:01 - id so let's see how we can run this
01:04 - image
01:05 - to create a container
01:08 - now in order to list out all the running
01:12 - containers you have the command
01:15 - which is called sudo docker ps
01:19 - which is going to give you the list of
01:21 - all the running containers
01:23 - so right now we don't have any running
01:25 - container
01:26 - now if you want to see the list of
01:30 - all the container including running or
01:33 - thus exited containers then you can give
01:37 - the command with the flag hyphen a
01:41 - and it's going to give you the list of
01:43 - all the containers
01:44 - you have on your system so it's going to
01:48 - give you the list of all the running
01:50 - container as well as
01:52 - if they are exited and if they are no
01:55 - more running
01:56 - then also it's going to give you the
01:57 - list of all the containers so you can
01:59 - see
02:01 - i have ran this hello world container
02:04 - two months ago right and
02:07 - right now the status of this container
02:09 - is exited
02:10 - that means it's not running so this is
02:13 - how you can see the list of
02:15 - all the containers now to run a
02:18 - container
02:19 - what you need is a command called
02:22 - run so you just write sudo
02:26 - docker run and then you can give
02:29 - with this run command some options
02:32 - for example and then you give the
02:36 - name of the image so it requires uh the
02:39 - image in order to run a container
02:42 - and then you can give some commands so
02:46 - you can give some commands with the
02:48 - docker round image
02:50 - and also you can give some args here
02:54 - okay so let me just write args
02:57 - right so this is the basic syntax
03:00 - of a docker run command so let's say
03:04 - we want to run our docker image
03:08 - which is my app right
03:11 - so let me just once again give this
03:15 - docker images command and i want to run
03:17 - this
03:18 - image so to run a container you just
03:21 - need
03:21 - one thing which is the docker image
03:24 - so you can just write sudo
03:28 - docker run and then the image id
03:32 - so this is the image id of
03:35 - this repository which is my app
03:38 - so let's say we want to run this image
03:41 - so i'm going to just
03:42 - take the image id of this image and
03:46 - then i'm going to just press enter
03:49 - and as soon as i press enter it's going
03:52 - to run
03:53 - the container and exits
03:56 - immediately so when i run this docker
03:59 - run
04:00 - image id command then it's going to run
04:03 - and it's going to exit
04:05 - immediately right so when you give this
04:09 - docker ps command so let's list out
04:13 - all the running containers right so all
04:16 - the running containers
04:17 - still you will see there is no running
04:20 - container
04:21 - but when you give this command with
04:24 - hyphen
04:25 - a flag which means we want to see
04:28 - all the containers then it's going to
04:31 - show you
04:32 - that it ran this container with
04:35 - this image so we ran the container with
04:39 - this image and this is the same image
04:41 - which we have used
04:42 - in this command right and it was
04:45 - exited about a minute ago right
04:49 - so it ran and it exited
04:53 - immediately now here one more
04:56 - interesting thing to note here is when
04:59 - you
05:00 - run the container with the run command
05:03 - dot co automatically generates a
05:06 - container name
05:07 - with a string of randomly selected
05:10 - numbers and letters
05:12 - so if you uh are wondering what
05:15 - this name is this is just a
05:18 - automatically generated name which is
05:21 - generated by
05:22 - docker for you now if you want to
05:26 - give a specific name to your docker
05:30 - container
05:31 - there is a flag for that so
05:34 - we are going to run the docker run
05:37 - command for the same
05:38 - image and this time what we are going to
05:41 - do is we are going to give
05:43 - some name to our container so before the
05:46 - image id i'm going to just provide this
05:49 - name
05:50 - flag and then i can give the name
05:53 - to my container so the name i have given
05:56 - here is my ubuntu container
05:58 - to my container and let's give the same
06:01 - command
06:02 - with this flag and once again you don't
06:05 - see
06:06 - any output here on the terminal
06:09 - but as i have told you it has
06:12 - just ran the container and exited
06:15 - immediately
06:16 - so when we give the docker ps hyphen
06:20 - a command once again you will see this
06:23 - time
06:24 - that now our container name is my ubuntu
06:28 - container
06:29 - right so this was the container which
06:33 - we ran earlier and this time
06:36 - uh with the last docker run command we
06:40 - have given the name to our container
06:43 - and the image was this one so image is
06:46 - unchanged but we have created a new
06:49 - container with
06:50 - the name my ubuntu container right
06:54 - and the command which we ran is
06:57 - command which is coming from
07:00 - this line of docker file
07:04 - now when you run your docker containers
07:07 - it's run
07:08 - in two modes one is attached
07:12 - mode or in the foreground and other
07:15 - is in the detached mode or in the
07:18 - background
07:19 - and by default docker runs the container
07:22 - in the attached
07:23 - mode that means it's attached
07:26 - to the terminal session where it
07:28 - displays the output
07:30 - and the message so if this docker file
07:33 - has some commands or
07:37 - some output related to uh this docker
07:40 - file
07:41 - then it's going to show you the output
07:44 - in the terminal when you run the
07:46 - container with
07:47 - the docker run command but because we
07:50 - don't have any uh
07:51 - output associated with the docker file
07:54 - it
07:55 - doesn't show any output right now if you
07:58 - want to run
07:59 - your docker file in the detached mode
08:02 - what you can do here is you can give
08:05 - the hyphen d flag that means you want to
08:08 - run
08:09 - your container in the detached mode so
08:12 - just give hyphen d
08:14 - and then i'm going to give the same
08:16 - command here and let's see what happens
08:19 - and you can see it's going to give you
08:21 - this
08:22 - message which says error response from
08:25 - the daemon conflict
08:26 - the container name this is already in
08:30 - use right so this container we have
08:33 - already defined so you cannot create
08:36 - this
08:36 - container with the same name so you need
08:39 - to give the
08:40 - different name here so let's say i'm
08:43 - going to just
08:44 - give my ubuntu container to now
08:47 - okay and then i have also given this
08:51 - hyphen d command to run it in the
08:54 - detached
08:54 - mode and now you will see that
08:58 - there is an output which is printed here
09:01 - and this is the container id
09:05 - of your container now
09:08 - if you have observed here in the
09:11 - previous command where it has
09:13 - should thrown this error
09:16 - it has this long container id
09:19 - now when you give the docker ps hyphen a
09:22 - command
09:23 - you will see in the container id some
09:26 - part
09:27 - of this container id is shown so
09:30 - for example i can see here up to
09:33 - this part of the container id is shown
09:36 - but in the background
09:37 - the container id is so much
09:41 - bigger right so now when i give the
09:44 - docker ps
09:46 - hyphen a command once again i can see
09:49 - one more container which is created and
09:52 - the container id you can see
09:55 - it's going to show you the
09:58 - starting few uh values of the container
10:02 - here until i think until d
10:06 - so using this id also you can
10:09 - delete or work with your container or
10:12 - you can
10:13 - take the full id of the container and
10:16 - work
10:16 - with your container okay so this
10:19 - id will also work or in the short form
10:23 - or the first few uh letters of the id
10:27 - will also work which is shown here now
10:30 - we have seen
10:30 - that how we can run our docker container
10:33 - in the detached mode
10:35 - and as i told you that by default docker
10:38 - runs the container
10:39 - in the attached mode or in the
10:41 - foreground
10:42 - right now let's see how we can run our
10:46 - container interactively so docker allows
10:49 - you to run
10:50 - the container in interactive mode
10:53 - that means you can execute commands
10:56 - inside the container
10:57 - while it's still running so let's see
11:00 - how we can run our docker container
11:03 - interactively
11:04 - so now what i'm going to do here is i'm
11:07 - going to just
11:08 - create a new container let's say it's
11:10 - container
11:11 - 3 my ubuntu container underscore three
11:15 - and i don't want to run it in detached
11:17 - mode
11:18 - instead i want to run this container
11:21 - in the interactive mode so
11:24 - here i can give hyphen i t
11:29 - flag which means that we want to run
11:32 - our container in the interactive mode
11:36 - and the image name is same
11:39 - which we have created using this docker
11:41 - file so let's see what happens when i
11:43 - run
11:43 - this command like this so when i run
11:46 - this command like this
11:48 - you will see the bash
11:51 - shell which appears here and
11:54 - this is what i was expecting
11:58 - so now as you can see here
12:01 - in this docker file when we have created
12:04 - this image
12:05 - the last command which we wanted is
12:08 - this bash command and it has
12:11 - just given us this bash command shell
12:15 - in the last right so this is how you can
12:17 - run your
12:18 - container in the interactive mode
12:21 - now when i open the new terminal so let
12:25 - this terminal be like this and let me
12:28 - open the new terminal
12:29 - in the visual studio code you can open
12:31 - the new terminal by just clicking
12:34 - on this plus button or you can open your
12:36 - default terminal
12:38 - on your operating system also you can
12:40 - see i'm
12:41 - in the second terminal and here i'm
12:43 - going to give this
12:45 - sudo docker ps command without hyphenae
12:49 - that means i want to see only the
12:51 - running
12:52 - docker containers and then i'm going to
12:55 - provide my
12:56 - password of my operating system and this
12:59 - time you will
12:59 - observe that when i give this
13:03 - docker ps command it's going to give me
13:06 - some output because
13:07 - now the container which i have created
13:10 - which is my
13:11 - open to container 3 is still
13:14 - running in the other terminal as you can
13:17 - see
13:18 - we have uh running bash
13:21 - shell in the docker container so
13:24 - this bash shell is running inside our
13:28 - container
13:29 - right so when you uh just
13:32 - give some ls command you will see
13:35 - the file system directories here
13:38 - inside your container you can also give
13:42 - for example up time so as the name
13:45 - suggests
13:46 - the uptime command will give you the
13:48 - time for which
13:49 - the system has been up or
13:52 - running right and as we have seen in the
13:55 - last video we have
13:57 - only uh given this bash command so our
14:00 - container is not doing much
14:03 - it's just opening the bash a shell
14:06 - now there are many interesting things
14:08 - which you can do
14:09 - with your docker run command and that we
14:12 - are going to see
14:13 - in the next videos also i want to show
14:16 - you
14:17 - uh some more commands related to docker
14:20 - run
14:20 - and docker in general
14:24 - so now what i'm going to do is i'm going
14:26 - to switch
14:27 - to my terminal so i'm going to open
14:30 - my default terminal on my ubuntu
14:34 - operating system
14:35 - also i'm going to open my browser and
14:37 - i'm going to just search for docker hub
14:39 - i want to show you how this docker hub
14:42 - looks like
14:43 - so the first link here is hub.docker.com
14:47 - and when you click on this link you will
14:50 - see
14:50 - uh this web page here from where you can
14:54 - just sign in with your docker id which
14:57 - you have created
14:58 - earlier or you can search for some
15:02 - images so let's say i'm going to search
15:04 - for
15:05 - an image called busy box
15:09 - and then press enter and you will see
15:12 - an official image of busybox and as you
15:16 - can see
15:16 - uh you will see the tag here on the top
15:20 - which is going to show you if it's
15:22 - official it's going to show you it's an
15:25 - official image and otherwise it's going
15:27 - to
15:28 - show you verified or the other
15:32 - information associated with the image so
15:34 - the most popular one and the official
15:36 - one is this one so i'm going to just
15:38 - click on this
15:40 - base image and here i will see
15:43 - some more information related to this
15:46 - image so if i want to just pull this
15:49 - image on
15:50 - my pc i can just give this docker pull
15:53 - busy box command so let's
15:55 - do this and i'm going to show you how
15:59 - we can use the docker run command with
16:02 - the busy box uh image which we are going
16:04 - to pull
16:05 - so i'm going to just write docker
16:08 - pull busy box here and then press enter
16:12 - and i'm going to just give my ubuntu's
16:14 - password which is going to
16:16 - just pull the latest tag image of the
16:20 - busy box right so if you don't provide
16:22 - any tag
16:23 - after colon then it's going to pull the
16:26 - latest image
16:27 - so now let's run the docker images
16:31 - commands
16:33 - so i'm going to just give images
16:36 - and now you can see this busy box image
16:38 - is there
16:40 - so you can run the docker run command
16:44 - with the images you have in this list
16:47 - also so till now we have seen how we can
16:50 - run
16:51 - the docker run command with the
16:54 - container which
16:55 - we have created but you can also
16:58 - use this docker run command with the
17:00 - base images also
17:02 - for example busy box or ubuntu 20.04
17:06 - or ubuntu latest version and i have
17:09 - pulled
17:10 - this busy box base image because it's
17:13 - very small in size you can see
17:16 - it's only around 1.22 megabytes so if
17:19 - you want to
17:20 - quickly test something with some
17:24 - linux terminal or linux operating system
17:27 - busy box is the image to go
17:30 - so now as i told you you can use this
17:34 - docker run command with the images you
17:38 - have
17:39 - in your local pc so you can just
17:42 - give docker run and the name of your
17:47 - image which is busy box here
17:51 - and then you can do something with it
17:55 - so you can just write echo
17:58 - so it means that we want to
18:02 - run the echo command inside our busy box
18:05 - container when it
18:06 - runs and let's say we just want to
18:09 - print hello world here so i'm going to
18:12 - just write hello
18:13 - world and then press enter and it's
18:16 - going to
18:17 - run this busy box image as the container
18:20 - and it's going to print
18:22 - or execute whatever command you have
18:24 - given after
18:26 - this busy box command right so
18:30 - basically what this means is we are
18:32 - running echo
18:33 - inside our busy box container also when
18:36 - you give
18:37 - the docker ps hyphen a command so let's
18:40 - give this docker
18:42 - ps hyphen a and you will see
18:45 - this busy box command also so you can
18:48 - see this busy box
18:50 - and what command it has ran so we have
18:52 - we ran
18:53 - echo hello world and it was created 42
18:56 - seconds ago and it was
18:58 - exited right so status is executed
19:01 - now let's say you just want to work with
19:03 - the busybox
19:05 - shell what you can do you can just
19:08 - give the same command but instead of
19:11 - giving this echo you can run it in the
19:14 - interactive
19:16 - manner using this i t flag
19:19 - and then you can just tell that
19:22 - you want to run the shell so just write
19:25 - sh
19:26 - which is going to run this container and
19:29 - open the shell
19:30 - inside the container right so let's give
19:32 - this command
19:33 - and when you give this run command with
19:36 - the id flag it
19:37 - attached us to the interactive tty
19:40 - in the container right so because we are
19:44 - running the
19:45 - sh command after this run command
19:48 - so it's going to open the shell inside
19:51 - your busy box container
19:53 - and here again you can run your
19:56 - basic commands or whatever you want to
19:58 - do inside the container so
20:00 - we are not working inside our
20:03 - operating system we are working inside
20:06 - our
20:06 - container now in order to exit from the
20:09 - container you can just
20:10 - give this exit command and you will come
20:13 - out
20:14 - of this container now the last
20:17 - thing which i want to show you before
20:20 - just finishing this video and that
20:23 - is how we can remove some containers so
20:27 - now we ran so many commands and we have
20:30 - so many containers
20:31 - and as you can see we have so many
20:35 - dead container that means all the
20:37 - containers
20:38 - are exited and they are not running
20:41 - anymore so when you give this docker ps
20:45 - command you can see only one container
20:48 - is running
20:49 - and all the other containers when you
20:52 - see using hyphen a
20:54 - are exited so let's say you want to
20:56 - remove some of these containers
20:58 - so let me clear the terminal and let me
21:02 - just give this docker ps hyphen a
21:04 - command
21:05 - so let's say i want to remove this
21:08 - container and this container
21:10 - so there is a very simple command which
21:12 - is called rm so you can just write
21:15 - sudo and then the docker command and
21:19 - then just give
21:20 - rm and then after that you can give the
21:22 - container id of the container so let's
21:25 - say
21:25 - i want to just give this container id of
21:28 - the container
21:29 - so just copy and paste this container id
21:32 - and then press enter and if you see
21:36 - the container id in return in the output
21:39 - that means this container is removed so
21:42 - once again when you give the docker ps
21:44 - hyphen a
21:45 - you will see that this container is
21:47 - already removed
21:49 - right so in the same way you can
21:52 - remove multiple uh containers
21:55 - using this rm command so you can just
21:58 - give container id
22:00 - space container id to space
22:03 - you can give multiple container id in
22:06 - this manner
22:06 - and it's going to remove all the
22:08 - container ids which you have given after
22:11 - the rm command so
22:12 - so right now we want to remove two
22:14 - containers and as i said if you see
22:17 - the container id in the output that
22:20 - means that
22:21 - container is removed and in my case
22:24 - as i can see this container is removed
22:27 - but
22:28 - the container with this id
22:31 - is not removed means the container with
22:33 - this id is not removed
22:35 - because it's running right so if the
22:38 - container is running and if you want to
22:40 - remove it
22:41 - you need to stop this container first
22:44 - and then
22:44 - you can remove the container so
22:48 - as i have shown you this container is
22:51 - running here so i
22:52 - i can either just give this exit command
22:56 - or i can stop the container let's see
22:58 - how we can stop
22:59 - the container using a command called
23:02 - stop
23:03 - so let's say i want to just stop this
23:05 - container
23:06 - so i can just give the command docker
23:10 - stop
23:11 - just write docker stop and then the name
23:14 - of your container
23:16 - so my container name is this one so i
23:20 - want to stop this container and then
23:22 - press enter
23:23 - and if you see the container id in the
23:25 - output that means this container is
23:27 - stopped so when you give this docker ps
23:30 - without hyphen a you can see there is no
23:34 - container running anymore
23:36 - and now in the list
23:39 - of all containers you will see this
23:41 - container
23:42 - and now when you give this docker rm
23:47 - with this container id it's going to
23:50 - give you
23:51 - the output that means this container is
23:53 - successfully removed
23:55 - okay so you use top command to stop the
23:58 - container
23:59 - and then you can use rm command to
24:02 - remove the container
24:03 - so that's all i want to show you in this
24:05 - video we will see
24:06 - more commands related to containers in
24:09 - the future videos also
24:11 - so stay tuned and i will see you in the
24:13 - next video