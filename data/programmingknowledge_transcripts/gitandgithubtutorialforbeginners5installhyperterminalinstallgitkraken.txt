00:00 - hello everyone this is varsha and
00:01 - welcome to programming knowledge
00:09 - so in today's tutorial we will
00:11 - understand about the architecture of kit
00:13 - also we're going to install the hyper
00:14 - terminal i'm going to explain you how to
00:16 - install the hyper terminal
00:18 - also we're going to know about the git
00:19 - cracking what is it
00:21 - and how is it used i will explain you
00:23 - that also
00:25 - so let's get started okay so before we
00:27 - start the architecture of
00:29 - kit in the previous tutorial we learned
00:31 - how to
00:32 - actually commit a file how to push a
00:34 - particular file
00:35 - into our repository github repository so
00:37 - just like have a quick demo of it
00:40 - so what i'm going to do is right now
00:42 - let's create a file
00:44 - in f drive okay so i'm creating a new
00:47 - folder over here
00:48 - and i will name it as test
00:53 - okay and
00:57 - we are using the git bash so i'm going
01:00 - to right click over here and here there
01:02 - comes an option of
01:03 - kit bash here i click on click get bash
01:06 - so this is our account our github
01:08 - account so first we will create a
01:10 - repository over here so i'm creating a
01:12 - new repository
01:13 - i will name it as repo
01:17 - and click on create repository
01:20 - i have explained in detail how to create
01:22 - a repository in the previous tutorial
01:24 - i'm just giving a quick recap of what we
01:25 - learned
01:26 - so this is the git bash command that we
01:29 - have over here the terminal we have
01:31 - so here first we'll create a folder so
01:33 - to create a folder we will write touch
01:35 - and file one dot txt
01:40 - and our folder is created over here this
01:42 - is the folder that is created
01:44 - now once the folder is created let's see
01:46 - the status of it so let's write git
01:48 - status
01:50 - i have explained in detail about all
01:52 - these commands in the previous tutorial
01:54 - if you want i will give the link of the
01:55 - previous tutorial in the description box
01:57 - you can have a look at it
01:59 - now the git status says that it is not a
02:01 - git repository so if you want to
02:03 - push any file to the git repository you
02:05 - need to first turn the folder to the git
02:07 - repository
02:08 - so for that first we're going to write
02:10 - git init
02:13 - and it says that initialize empty git
02:16 - repository
02:17 - in the folder so now here you see we
02:20 - have a dot git folder and if you can't
02:22 - see you can go on view
02:24 - and here you can tick on the hidden
02:26 - items once you tick you can see that
02:28 - there is dot git folder over here
02:30 - which means that this folder this test
02:32 - shepard folder is now
02:34 - a git repository okay so once you have
02:37 - written git
02:38 - in it now let's say let's see the status
02:41 - again so i'm going to write git status
02:43 - and here it says on branch masters here
02:46 - there are two files that is the untrack
02:48 - files and the tracked files that is
02:50 - there i explained in detail about it in
02:52 - the previous tutorial
02:54 - so it's better that you go and watch the
02:55 - tutorial that so now this is the
02:57 - untracked files that we have we need to
02:58 - track it
02:59 - so how do we track it for that there is
03:02 - a command which says git
03:04 - add and i'm going to write a dot which
03:07 - means all the files that is present in
03:09 - this folder that is the test repo folder
03:12 - will be tracked but if i want to track a
03:14 - particular file
03:15 - so i'll just write file1.txt
03:20 - and press enter and there you see
03:24 - let's write git status
03:28 - and there you can see that it is turned
03:29 - in green now
03:31 - and it says no commit cs changes to be
03:33 - committed
03:34 - now this is a tracked file now and this
03:36 - was the untracked file that is the
03:38 - file1.txt which was in red color
03:40 - and now it's in green color okay so now
03:43 - this file has been dragged
03:44 - after it's dragged let's commit this
03:47 - file so i'm writing git
03:49 - and commit git commit and dash
03:53 - m and here i'm going to write first
03:56 - comment so here it says that the
04:00 - file has been committed it says one file
04:02 - change zero insertions due to zero
04:04 - deletions
04:05 - okay now we have committed this file
04:07 - with the message i have written the
04:09 - message over your first comment after
04:11 - commit
04:11 - we are going to write git remote
04:15 - and after remote we're going to write
04:17 - add origin
04:19 - and here we're going to place the http
04:24 - this is the https link that we have
04:26 - right this url needs to be placed
04:29 - over here so i'll place
04:32 - this and press enter
04:37 - so now we can push our file for that we
04:40 - can write get
04:41 - push and dash u
04:45 - origin master
04:50 - and there you see
04:53 - our file has been pushed so let's
04:57 - check this out now
05:00 - and there you see we have file1.txt
05:04 - okay so this is the entire process which
05:06 - we learnt in the previous tutorial
05:08 - this is what we learned now let's
05:10 - understand about the
05:11 - architecture of the git now this is the
05:15 - entire architecture of git you can say
05:18 - this that this is the entire life cycle
05:21 - of a file that is present
05:23 - in the folder the git folder that we
05:26 - created in the f
05:27 - drive right the folder uh test repo and
05:30 - there was a file one dot txt that was
05:32 - present right now
05:33 - and we were writing git dot git add
05:37 - and we were committing it we were
05:38 - pushing it right so this is the entire
05:41 - life cycle of a file but also this is
05:43 - the git
05:44 - architecture that we have okay so now we
05:47 - have the working directory first
05:49 - then we have the staging area or the
05:51 - cache area then we have the local
05:53 - repository or the committed area and
05:55 - then we have the remote repository
05:57 - so our main target is to move our files
06:00 - from the local repository to the remote
06:02 - repository
06:03 - okay this is the main target that we
06:05 - have the remote repository is the github
06:08 - repository that we have this is the
06:11 - github repository
06:12 - this is the github repository right this
06:14 - is the repo repository that we have
06:17 - so our main target is that we need to
06:18 - move our files to this repository
06:20 - over here the life cycle goes this way
06:23 - that we have
06:24 - first the working directory we have the
06:26 - staging area we have the local
06:27 - repository
06:28 - or the committed area and then the
06:30 - remote repository
06:31 - so when our file that is the file1.txt
06:35 - is in the working directory
06:36 - we are working on it okay so what was
06:39 - the first command that we wrote
06:42 - do you remember the first command was
06:44 - the touch file
06:45 - dot txt that is we created a file after
06:47 - that we wrote git status
06:49 - in which it said that it is not a git
06:51 - repository the folder is not a git
06:53 - repository
06:54 - after that we saw that once the folder
06:56 - is not a git repository we don't get
06:58 - in it and after writing git init it
07:00 - showed that the folder is now a git
07:02 - repository
07:03 - after knowing that it is a gateway
07:05 - positive we wrote git
07:06 - add do you remember we wrote git add
07:09 - that is
07:10 - we were adding the files to the staging
07:12 - area from the working diary to the
07:14 - staging areas
07:16 - before the file was untracked but by
07:18 - writing git
07:19 - add the files became dragged and it came
07:22 - to staging area or the cache area
07:24 - so once it is staged in the staging area
07:28 - after that we committed it to the local
07:30 - repository or the committed area
07:32 - for that we have written git commit
07:35 - uh dash m and there was a message that
07:38 - is the first commit message that we had
07:39 - written away
07:41 - after it goes to the committed area we
07:43 - need to move it to the remote data
07:45 - so moving into the remote area we say
07:47 - that we need to push a file to the
07:48 - remote repository
07:50 - for that we write git push dash u origin
07:53 - master
07:54 - okay so this is the entire process
07:56 - similarly if you want to pull
07:58 - what we'll do is we go to the remote
07:59 - repository we write a pull command and
08:01 - our
08:01 - uh and our file is pulled to the local
08:04 - repository
08:05 - okay so this is the entire working area
08:08 - or the working life cycle of
08:10 - a file first it is in the working
08:13 - directory
08:13 - then it goes to the staging area after
08:16 - going to the staging area it goes to the
08:17 - local repository or the committed area
08:19 - and then it goes to the remote
08:21 - repository
08:22 - so this is the entire architecture of
08:25 - kit
08:27 - now since we are done with the
08:29 - architecture of kit let's
08:30 - install the hyper terminal now you must
08:33 - be thinking what is hyper terminal
08:35 - like for example when we code a program
08:38 - for python we use a python
08:40 - right so when we code a program for java
08:43 - we use
08:44 - eclipse or intellij idid so these are
08:47 - different different ids right
08:48 - similarly for our terminals we have the
08:51 - cmd that is the basic terminal we have
08:53 - git bash we have a hyper terminal also
08:56 - there are very many difference between
08:57 - the git bash and the hyper terminal
09:00 - okay and hyper terminal is mostly used
09:03 - by many of the developers also nowadays
09:05 - because a hyper terminal comes up with a
09:08 - lot of customization like you can have
09:11 - plugins you can have so many things it
09:13 - is highly customizable
09:15 - regarding the format the font size the
09:17 - font color
09:18 - also that has a lots of themes like uh
09:22 - in visual studio right you have a lot of
09:24 - theme like it should be dark
09:25 - light so you have so many themes and
09:27 - hyper terminal also compared to the git
09:29 - bash
09:30 - the hyper terminal is quite fast okay so
09:33 - i would recommend you to use the hyper
09:35 - terminal
09:36 - but if you are comfortable with the git
09:38 - bash terminal
09:39 - then go for it the commands won't change
09:41 - like similarly you write a program it is
09:44 - system.out.println
09:45 - in intellij idea or an eclipse is the
09:47 - same right
09:48 - similarly the commands won't change but
09:50 - the terminal that i'm using is the hyper
09:52 - terminal for the entire tutorial
09:54 - and if you want you can use the git
09:55 - batch there are no issues
09:57 - so let's move to the installation part
09:59 - so if you're installing hyper
10:01 - i will give the link in the description
10:03 - below so you can have a look at it
10:05 - if you click on that link you will be
10:07 - navigated to this page
10:08 - now if you're having mac os click on
10:10 - this if you have windows click on this
10:12 - so i'm having windows so i will be
10:14 - clicking on this version
10:16 - so now here you can see that the hyper
10:17 - setup that is exe file is being
10:19 - downloaded over here
10:21 - so i will now click over here
10:34 - okay so this is the hyper terminal that
10:36 - you have over here
10:38 - it is similar to the git bash but it has
10:41 - a lot of features
10:42 - as compared to git bash so i would
10:45 - recommend to
10:46 - download the hyper terminal but if
10:48 - you're really comfortable with the git
10:49 - bash you can go with it
10:51 - so this is the hyper terminal that you
10:53 - have now there's one thing
10:55 - that you need to do so now if you're a
10:57 - mac os user
10:58 - you don't really need to do this but if
11:00 - you're using windows you need to change
11:01 - the log file that is the config file
11:03 - over here
11:04 - so for that you need to go to edit go on
11:07 - preferences
11:09 - and over here just ctrl a and delete the
11:11 - entire thing
11:13 - now i will be giving this link of a
11:15 - github account
11:16 - you need to copy this uh entire
11:19 - log file that you have over here and you
11:21 - need to paste it over there
11:23 - this is for the windows users only
11:28 - i will copy this and
11:31 - paste it over here and ctrl s
11:35 - i'll close this now
11:37 - [Music]
11:40 - and i will close this as well now okay
11:42 - so here you can see we have installed
11:44 - the hyper terminal so this is the
11:46 - uh folder that we created the test
11:48 - shipper folder if i right click here
11:50 - i can see that open hyper here so i'll
11:52 - click on open hyper here
11:54 - so now if i uh write touch file
11:58 - file to dot tx and then if i write git
12:01 - status
12:02 - here it sees on branch master your
12:04 - branch is up to date but
12:07 - there is an untracked file over here so
12:08 - now if you write git add and a dot
12:11 - so all the files are tracked if i write
12:13 - get status again
12:15 - and that says that changes to be
12:17 - committed now
12:19 - get now if you want to commit it you can
12:21 - write git commit
12:22 - and dash m and after that your commit
12:26 - message that is the first
12:28 - commit or something whatever you want to
12:29 - write you can write over here
12:31 - after committing we can add our remote
12:34 - origin
12:34 - and after writing our remote origin we
12:36 - have to push the file so this is the
12:38 - entire process you can use the entire
12:40 - process by
12:40 - in the hyper terminal as well if you're
12:43 - using the git bash
12:44 - it's the same process if you're using
12:45 - the hyper terminal it's the same process
12:48 - so once you have downloaded the hyper
12:50 - terminal now
12:51 - if you did not download the git you need
12:54 - to download the git
12:54 - also so this is the link of the git i
12:56 - have downloaded already before
12:58 - uh you must have seen the downloading
13:00 - the installation
13:02 - tutorial before that i had given in that
13:04 - tutorial i had already downloaded git
13:06 - so if you have not you can download it
13:08 - we have the mac os we have the line
13:09 - linux and we have windows also so this
13:12 - is the link of it i will give the link
13:13 - of this in the description box as well
13:16 - okay so this is all for the installation
13:18 - part for the hyper terminal
13:20 - and now coming to the uh now coming to
13:23 - the next
13:24 - software that is the git cracking now
13:26 - see here i have
13:28 - a very nice kit gui tool now you must be
13:31 - thinking what is this kit kraken why is
13:34 - it used uh how is it used and stuff
13:36 - let me tell you that the reason why we
13:39 - are like
13:39 - we are using the get kraken is that
13:41 - there is so much in it
13:43 - like it really speeds up the workflow in
13:46 - addition also there are a lot of boards
13:48 - it actually gives a visualization of
13:50 - git that we're using in git there are a
13:53 - lot of concepts like branching and log
13:55 - and stuff
13:56 - and merging your files and push and pull
13:58 - and also when you're working in a
13:59 - community when you're a software
14:01 - developer
14:02 - in a company you work with a lot of
14:03 - people so who is pushing the code who is
14:06 - pulling the code who is uh
14:08 - you know uh who is editing the code who
14:11 - is doing what at what time you get to
14:13 - know
14:13 - everything visually like here you can
14:15 - see this is the dashboard that you can
14:16 - see right so these are the dashboard
14:18 - which shows the visualization of the
14:20 - entire there is a local
14:21 - remote pull request there are 93 pull
14:23 - requests that were done
14:25 - also there is local remote and issues or
14:27 - issues that were raised
14:29 - also now if you have like a github
14:31 - account you have a git lab account
14:33 - you are using the jira software you're
14:35 - using the trello you're using jira cloud
14:38 - also there are so many things you need
14:39 - to integrate all these right so you can
14:41 - integrate all these things also in the
14:43 - software now see
14:44 - uh let me open it i have downloaded
14:46 - already
14:48 - i really like the gui of this software
14:50 - so i would recommend you if you're
14:52 - working as a software professional in a
14:54 - company
14:54 - you can use this okay so this
14:58 - is the entire gui that you can see over
15:00 - here now if you have
15:01 - hosted repositories like the github or
15:04 - the
15:06 - the github the git lab or the big bucket
15:10 - or any of thing that you're using you
15:11 - can use it away or you can open a
15:13 - repository you can clone a repository
15:15 - you can start a local repository and
15:16 - also there are a lot of tutorials
15:18 - regarding this
15:19 - on youtube so you can use this tutorial
15:21 - you can you can use the software
15:24 - efficiently while you're working in a
15:25 - company so let me show you the dashboard
15:28 - of this
15:28 - like i already have a screenshot of some
15:31 - dashboards like here you can see
15:33 - there is an entire dashboard
15:35 - visualization of everything like who is
15:37 - merging the code who is using the code
15:40 - who is actually fixing the bugs and
15:42 - stuff so you can have this entire
15:44 - visualization
15:45 - by using this kit kraken software also
15:48 - there are a lot of things like
15:49 - what are the changes needed what are in
15:51 - progress what are the pull requests made
15:53 - the completed things that we have done
15:55 - who has completed and what has complete
15:57 - uh what projects has been completed
15:59 - also there is a lot of documentation
16:01 - updated list you can see there are so
16:02 - many people added over here
16:04 - so these are the kitkat and bows that
16:06 - you can use while using this software
16:08 - so there's a lot of advantage of using
16:10 - the software and that's the reason why
16:11 - i actually introduced this software now
16:14 - um
16:15 - this is all for this tutorial and in the
16:18 - next tutorial we're going to learn
16:19 - something different
16:20 - so stay tuned and please like share and
16:23 - subscribe this video and also ring the
16:24 - bell icon so that you don't miss out
16:26 - any of the updates thank you