00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will see how we
00:07 - can perform simple threshold anon images
00:10 - using open CV so first of all what is
00:14 - threshold in so thresholding is a very
00:18 - popular segmentation technique used for
00:22 - separating an object from its background
00:26 - the process of threshold involves
00:28 - comparing each pixel of an image with a
00:33 - predefined threshold value and this type
00:37 - of comparison of each pixel of an image
00:40 - to a threshold value divides all the
00:44 - pixels of the input image into two
00:47 - groups so the first group involves
00:50 - pixels having intensity value lower than
00:54 - the threshold value and the second group
00:57 - involves the pixels having intensity
01:00 - value greater than the threshold value
01:03 - and using the different threshold
01:05 - incretins
01:06 - which are available in open CV we can
01:10 - give different values to these pixels
01:14 - which are higher than the threshold
01:17 - value and which have the intensity lower
01:20 - than the threshold value so let's see
01:23 - how we can use simple threshold in an
01:28 - image so to start with I have the simple
01:32 - code which loads an image on a window
01:35 - and this image is called gradient dot
01:39 - PNG so let me show you how this image
01:42 - looks like so this image looks like this
01:46 - so as you can see in this image we have
01:49 - on the left hand side the black values
01:51 - and when we gradually move from left to
01:54 - right we move towards the white value so
01:59 - on the left hand side the pixel value
02:03 - are closer to zero and on the right hand
02:07 - side the pixel values are closer to 255
02:12 - so
02:13 - we are going to just involve some
02:17 - thresholding techniques and we will see
02:20 - how these this image is affected by the
02:24 - trash holding techniques so first of all
02:27 - what we are going to do is we are going
02:28 - to define two variables one is
02:31 - underscore because the result of the
02:35 - thresholding gives two result one is ret
02:39 - value and the second is the threshold
02:42 - 'add value of an image so I'm going to
02:46 - just say the second value which is given
02:49 - by the thresholding technique is th one
02:53 - is equal to C V dot trash hold and this
02:59 - threshold method takes several values
03:02 - the first is the source so our source is
03:05 - image the second is the threshold value
03:10 - so as we have seen that our image have
03:15 - on the left hand side zero pixel value
03:18 - and when we move towards the right it's
03:21 - a pixel value increases to 255 right so
03:27 - let's say our threshold here is 127 and
03:31 - the maximum value of the threshold is
03:35 - 255 which is the white color on the
03:38 - right hand side and then the fourth
03:41 - value here will be the threshold type so
03:46 - there are several threshold type in
03:48 - simple thresholding we are going to see
03:51 - them one by one so the first tresh
03:54 - holding type is CB 2 dot trash binary so
04:00 - first of all let me show you how the
04:01 - result looks like and then I will
04:04 - explain what does this trash binary type
04:08 - does so what we are going to do is we
04:12 - are going to use one more CB to dot I am
04:14 - show method to show this thresholded
04:17 - value into a new window so we are going
04:22 - to just show this value into a new
04:25 - window and we already have
04:27 - the original image in the image window
04:30 - so let's run this code and let's see
04:33 - what happens so you can see in this
04:35 - binary threshold encompasses this
04:41 - original image to 127 and if the value
04:46 - of the pixel is less than 127 the value
04:51 - is assigned to zero and if the value of
04:56 - the pixel is greater than 127 the pixel
05:00 - value is assigned to 55 that means white
05:04 - so if the value of the pixel is zero it
05:08 - will look black and if the value of the
05:12 - pixel is 255 it will look white so this
05:16 - is how binary threshold inquiry and by
05:20 - the name itself you can understand that
05:23 - this is just a binary threshold links
05:27 - it's either 0 or 1 now let's see the
05:32 - other type of thresholding technique so
05:35 - now I will just change the name of this
05:39 - variable as th2 and the next type of
05:43 - thresholding is called threshold in
05:46 - inverse and as the name suggests the
05:50 - threshold inquiry inverse is going to
05:53 - give the inverse result of what you get
05:57 - from the trash binary so I'm going to
06:01 - once again use the imshow method to show
06:05 - the result of this threshold inquiry
06:09 - inverse value and let's run the code and
06:12 - let's see what happens
06:13 - so this is the original image and then
06:16 - we have the thresholding one image and
06:20 - the threshold inquiry Majer so this
06:23 - image you got from the first
06:27 - thresholding which is by using trash
06:30 - binary and the second image you got from
06:33 - this method which is trash binary
06:36 - inverse and this trash binary inverse
06:40 - image is just the inverse of what you
06:44 - get
06:44 - using the thresh binary so if the pixel
06:48 - value is lower than 127 which is our
06:52 - threshold the pixel is assigned 255
06:56 - otherwise if the value is greater than
06:59 - 127 then the pixel value is assigned
07:03 - zero which is the inverse of what we got
07:06 - in the previous step now let's change
07:10 - this threshold to let's say 50 and here
07:14 - also let's say we change this threshold
07:16 - to 200 and let's see how this result
07:21 - changes when we change the threshold
07:24 - value so I'm going to run this code once
07:26 - again and you can see this is the result
07:29 - of fresh binary and now because our
07:33 - threshold is up to 50 that's why our
07:37 - result is like this so until the pixel
07:42 - value is 50 it's black otherwise if the
07:47 - pixel value is greater than 50 it's
07:50 - going to give you the white pixel value
07:53 - and the Thresh binary inverse is going
07:56 - to give you the inverse value of what
07:59 - you get in the trash binary step so I'm
08:03 - going to once again just close these
08:06 - windows and let's see the next
08:08 - thresholding type so I'm going to name
08:11 - my variable as th 3 so the next
08:15 - threshold entire
08:16 - called Thresh trunk so this is this type
08:21 - and let's first of all see what is the
08:26 - result of this trash holding technique
08:29 - and then I'm going to explain what it
08:32 - does so we are going to just show this
08:36 - thresholded image into a new window and
08:39 - run the code and now we have the result
08:43 - so let's move it like this and we have
08:48 - here the original image and the result
08:52 - of the
08:53 - trunk is this th3 so here what happens
08:56 - is up to the threshold the value of the
09:02 - pixels will not be changed so up to 200
09:06 - because our threshold is up to 200 so
09:09 - when the pixel value is up to 200 the
09:14 - pixel value will not change and after
09:16 - the threshold which is 200 the pixel
09:20 - value will remain the same which is 200
09:23 - so from here to here the pixel value
09:26 - will remain 200 let's change this
09:29 - threshold to some other value let's say
09:31 - 127 and then let's run this code and you
09:36 - will see that now from black to 127
09:42 - pixel value the value of this image will
09:47 - not change the original image up to 1/2
09:49 - is the same and after the pixel value
09:55 - 127 the value remains 127 okay so the
10:01 - pixel intensity value will remain 127
10:04 - until the end so if the value is greater
10:08 - than 127 the value will remain 127 and
10:13 - if the pixel value is lesser than 127
10:18 - then the pixel value will remain
10:21 - unchanged so this is how the trash trunk
10:25 - works and let's see the other method
10:29 - which is let's say th 4 and this is the
10:35 - method which is called trash to zero so
10:39 - we are going to just use trash to zero
10:43 - and then we are going to open this th
10:47 - for into a new window and let's run this
10:51 - code and let's see what happens so now
10:53 - we have this result let's move this to
10:57 - the left and the result of the trash to
11:02 - zero is this one so in Thresh to zero
11:05 - threshold inquiry
11:07 - whenever your pixel value is lesser than
11:11 - threshold the value assigned to pixel
11:14 - will be zero okay so when the pixel
11:18 - value is lesser than the threshold the
11:21 - pixel value is assigned to zero that's
11:23 - why you can see half of the image is
11:26 - black and when the pixel value is
11:30 - greater than 127 which is our threshold
11:33 - value the image or pixel value will
11:36 - remain the same so after 127 all the
11:40 - pixels will remain the same let's see
11:44 - the other technique which is called
11:47 - fresh 2-0 inverse which you already
11:52 - understood I think what it does so this
11:55 - is fresh 2-0 inverse and we can just
12:00 - change this variable name to th 5 and
12:04 - here we can just open it into a new
12:07 - window and I'm going to run this code
12:11 - once again let me move this here and the
12:16 - result here so you can see this fresh
12:20 - 2-0 inverse is just the opposite of the
12:25 - trash to zero so if the value of the
12:28 - pixel is greater than the threshold
12:29 - value which is 127 the value will be
12:32 - assigned to zero otherwise if the value
12:36 - of the pixel is lesser than threshold
12:38 - the value of the pixel will remain the
12:42 - same so this is how some of the simple
12:44 - thresholding techniques works in OpenCV
12:49 - we will see other threshold integra news
12:53 - so stay tuned
12:55 - and I will see you in the next video
13:04 - you