00:00 - hey guys in this video we're gonna and
00:01 - see how can we debug Tobias code for a
00:05 - node.js applications this is the window
00:08 - we got for is code I have already
00:11 - installed support for Java so if you
00:13 - have like this color then you can just
00:16 - click on it and you can get the features
00:19 - of JavaScript in your vs code
00:22 - application and there is some
00:25 - intelligence some extension that you
00:29 - should download or easy looking like
00:33 - beautify and here also like typical for
00:38 - Firefox ES length or intelligence and
00:43 - NPM and also ps4 icons that's good so
00:50 - let's see our Holy Ghost so let's go to
00:54 - Mongoose demo and we're gonna see how
00:58 - can we do bulk and see how can we t work
01:01 - some code and see what's going on for
01:07 - now just just to use the npm run there
01:14 - for here and just run it and we're going
01:19 - to create some create one user here so
01:23 - let's create it so for creating we are
01:27 - gonna go to our knowledge demo and go to
01:33 - our create user both tasks in here if
01:38 - there is a party then you can just send
01:40 - you from here so let's send it so we got
01:48 - the user and you can see in our MongoDB
01:52 - compass just use it here so we we
01:58 - haven't like you will see right now
02:00 - table but we will see so let's see if we
02:05 - have a user in our database or not so
02:10 - let's see what we need to hold
02:13 - tbody so in here in a run there is one
02:18 - called start debugging solid let's just
02:22 - click on it and let's see what happens
02:24 - so we got this box here so and you can
02:30 - see what happens here like what - - so
02:46 - we see we got an error that says like
02:49 - already in use because we are running
02:52 - this application in 3000 so first of all
02:57 - we have like stopped this one and just
03:02 - run this the debugger so just we click
03:05 - on it running debugger and now we can
03:08 - see that it is running on so if we
03:13 - invest god we just simply use we can we
03:16 - will tackle on this like them this is
03:19 - running separately and debug is drying
03:22 - separately we are gonna see so how can
03:25 - we use T Perkins all in the terminal so
03:29 - it will be easy so in here we see it
03:33 - some dialog box in here this is stop
03:36 - this is like restarting the debugger
03:40 - process it is for like Brett point so we
03:43 - gonna go up or down or just like just go
03:50 - through this whole function and go to
03:52 - another step so this is what we use step
03:55 - over and this is going to like pause 30
03:59 - bug more later debugging so yeah so we
04:03 - gonna see what's the breakpoint here so
04:07 - we are creating user so let's say we are
04:11 - gonna use a break point here so we can
04:14 - see what we are sending from the post
04:18 - went to the base code and we're gonna
04:22 - see what's variables watch call states
04:25 - and if there is loaded script and also
04:30 - the breakpoint away we can see that it
04:32 - has been has a correct box that means we
04:36 - are gonna use play point in here
04:38 - so let's pour off for now we're gonna
04:43 - just to remove this user from here and
04:49 - we're gonna send back the same user and
04:53 - we're gonna see that what happens let's
04:57 - see what will happen so let's send it
05:01 - again yeah
05:07 - so now let's cube this a full window we
05:13 - can see that the debugger has created an
05:18 - arrow sign in here and if we see in
05:22 - postman we see that the response has not
05:27 - been sent because this is like brick
05:31 - like the data is being break here it is
05:36 - not sending after there here so if we
05:39 - just power over here we can see that
05:43 - what are we are we are sending it from
05:46 - here so these are the requests third
05:49 - party parameter and here if we just over
05:56 - on the body part we can see that we are
06:00 - selling a email name and password we can
06:05 - see from here yeah but we cannot see it
06:09 - says like a user is undefined because
06:12 - the breakpoint is telling that all the
06:15 - things is not being assigned to the user
06:17 - here and here we can see the calls text
06:23 - is all about like what's been handling
06:26 - truth all this process so it's not to
06:30 - see more first of all and this are the
06:36 - load a script which are being used
06:39 - - doing this process and these are the
06:43 - very ones that are using here so this is
06:47 - means it is a global request response
06:52 - because it has seen here what's the
06:54 - response and user but - how can we go to
06:58 - the next step and it's try and catch
07:01 - block so for this we are gonna just use
07:07 - this symbols that have been given so we
07:10 - just you step into or we just wanna use
07:14 - to continue continue we'll what do is
07:17 - let's say we use continue then see what
07:20 - will happen so if we just continue we
07:26 - will go to our postman and see that the
07:29 - user has been created so what happened
07:33 - is that all this disparate point is
07:36 - going to like remove from here and just
07:42 - go to hole means use all the processes
07:46 - to be used from here so that's not what
07:49 - we that's not tells what has happened
07:52 - here
07:52 - so for knowing what has happened we
07:56 - should use these symbols like step out
07:59 - or step into so we're gonna see here
08:05 - once once again we are gonna remove this
08:10 - one the remove the Alex name so just
08:20 - remove it and again we are gonna send it
08:25 - back and we can see that it is also it
08:28 - has break point so not to worry so just
08:32 - send it and if we are saying back
08:41 - test breakpoint so we're gonna see what
08:43 - will happen so just use the down arrow
08:50 - again down arrow down arrow down arrow
08:57 - down oh these are the things that are
08:59 - happening here you can see that that is
09:03 - the thing in the do it are we happening
09:05 - here so these are all the process that
09:14 - is happening behind the scene so in here
09:25 - we can see that we have a step over from
09:27 - this line to this line and we can see
09:30 - that in user we cut all the body that we
09:37 - have we are sending and we can also use
09:40 - this to see what's in the variable in
09:45 - here just to click on the just we have
09:47 - used a user and we can see the these are
09:50 - the things that you are sending from
09:53 - response request from the postman and
09:57 - see there's these are things so that's
10:02 - how it's done
10:03 - so staple work like again we are sending
10:06 - and it's act so yeah these are all the
10:14 - things that are happening here and we
10:17 - can see that in postman the request has
10:24 - been sent and if we refresh it we can
10:28 - see it in here it telex has been
10:31 - activated so we have seen that how it's
10:36 - typically running
10:37 - yep but there is one more thing that we
10:40 - have to see that we are learning in the
10:46 - debug console but not internal and also
10:48 - that whenever like Nordmann restart its
10:52 - it does
10:53 - restart it will like him for one I want
10:57 - to ask so we won like the use not one
11:01 - for this how can we do with this so for
11:06 - now let's just stop it and we can start
11:09 - from here and we are back to where we
11:13 - are
11:14 - so now what to do so in here you know in
11:20 - the run start debugging it is some open
11:24 - configuration edge configuration so we
11:28 - are going to add some configuration in
11:30 - here so in here what we want you want to
11:35 - restart it should be true and what make
11:43 - another things want that we're going to
11:52 - use running time executables in here and
11:56 - for now its default as a node node but
12:00 - we are going to use Nordmann here and
12:03 - also there is one called console and in
12:08 - this console way when I use integrated
12:10 - console in here so just use it and we're
12:15 - gonna save it in here and also the app
12:19 - is going to run from index torches
12:21 - because in the world directory we can't
12:23 - see their index or chase it again so we
12:27 - are gonna use in here let's use in
12:32 - Finland there and also run our debugging
12:41 - and see if we caught in air that cannot
12:46 - find one time Nordmann on part so what
12:50 - is needed here is the Northmen globally
12:55 - so for this purpose we are going to
12:59 - install not more globally so for this
13:04 - and you install not more
13:07 - gee so at the meantime we're gonna see
13:14 - what we can do I have installed an odd
13:19 - morning globally so now if I run again
13:22 - oh sorry I have rendered on run without
13:27 - debugging okay it is running so now we
13:40 - are gonna run debugging here so it was
13:43 - started polling here and it's in
13:56 - terminal so you can see that we are
13:58 - running the debugging process internal
14:00 - and if we start restart this this is
14:04 - going to restart again and again so just
14:07 - use the debugging process in here and we
14:13 - are gonna stand back the same Alex water
14:19 - so for now let's just delete it and
14:27 - we're going to go to the postman and
14:30 - again run it and it's running here and
14:34 - we can see it a debugging process is
14:37 - going on here and yeah so this how it's
14:42 - done
14:43 - you can see what's in the user and
14:46 - what's in the party so this is how it's
14:49 - gonna through this process and just
14:52 - continue it and we can just simply use
14:56 - toe debugging process now yeah and if
14:59 - we're gonna just save it again like how
15:03 - can we write it I can save it it's going
15:06 - to give error it's playing as a
15:08 - debugging process here and just go and
15:12 - just use again the message one and I can
15:16 - say that it will very set it so that's
15:19 - how it's done
15:20 - and for now we're gonna stop it
15:23 - and it's in order quest because we have
15:27 - them so yeah that's how it's done
15:32 - thank you