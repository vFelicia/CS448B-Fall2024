00:01 - hello guys in this video I'm going to
00:03 - show you how you can create and make
00:06 - make files in C or C++ in this test case
00:10 - I'm using C++ uh to show you the
00:14 - demonstration on make files but the same
00:17 - rule you can apply in C programming also
00:21 - okay so to start with I have four files
00:26 - which are in
00:27 - C++ I have a main do CPP function 1. CPP
00:33 - function 2. CPP and functions. H so the
00:39 - main do
00:41 - CPP let me show you what I have in the
00:45 - main.cpp so I'm
00:49 - executing the function one and function
00:52 - two in my main.cpp and the dependency is
00:57 - functions. Edge which have the
01:00 - Declaration of both function one and
01:03 - function two okay so it doesn't matter
01:07 - whatever you program you have you just
01:10 - need to make the make file this is your
01:12 - requirement for example so why first of
01:17 - all we can you why should we use make
01:21 - file ideally when uh we have this make
01:25 - file and it's in the folder sample we
01:29 - can just go to this uh sample folder and
01:34 - we can just give this
01:37 - command
01:38 - g++ main.cpp function 1. CPP function 2.
01:43 - CPP and we want to make the executable
01:46 - file called hello and when we give this
01:49 - uh command it will create us this
01:53 - executable file right this is a simple
01:56 - GCC uh command but for example you have
02:00 - 50 or
02:02 - 100 header files and CPP files you
02:06 - cannot write all the CPP file name and
02:11 - header file names and all the dependency
02:13 - and whatever you need it becomes tedious
02:16 - to compile your program if you have to
02:19 - do it with your hands so that's why we
02:23 - use make file so make file we use to uh
02:29 - reduce use the compilation uh time and
02:33 - uh because whatever files are already uh
02:38 - compiled and they are not changed the
02:40 - make file detects them and the make file
02:43 - doesn't execute the re already compiled
02:48 - file it only uh
02:50 - executes the files which need
02:53 - compilations right or which have been
02:56 - changed so that's why so let's make a
02:59 - simple MI
03:00 - file I have uh in the same folder I will
03:04 - create a simple make file I will right
03:06 - click and create a new document empty
03:09 - document and I will name it
03:12 - as make file and just uh see here make
03:18 - file how I have spelled this make file
03:21 - with the capital M so it is the common
03:24 - convention to start make file with
03:27 - capital M then all the letters are small
03:30 - so just write this and I'm going to open
03:33 - this make file here okay and in here I
03:38 - can write a Target so I will write for
03:43 - example
03:44 - all and then I will press enter and I
03:48 - will just copy the same command which I
03:51 - have used to compile my
03:53 - program and paste it here but common
03:57 - convention in this
04:00 - uh execution of command and Target this
04:03 - is a target you need to give a tab in
04:08 - order to execute the command so after
04:10 - the target you need to give this tab to
04:15 - detect that it's a command okay and I
04:18 - will save
04:20 - this make file here okay and by default
04:25 - when you write this command make here it
04:29 - will detects the first Target and it
04:32 - will execute the first Target so for
04:35 - example if you have uh two
04:40 - Targets compile and I don't have
04:43 - anything in compile for example then by
04:45 - default it will execute all because it's
04:48 - the first Target and not compile right
04:52 - and so let me show you the demonstration
04:55 - first so I'm in the sample file and for
04:59 - example I have already created my make
05:01 - file and I will write here make it will
05:04 - detect that first Target is all and it
05:07 - will execute this command so I will
05:11 - enter and you see here first command is
05:15 - executed and my executable file is made
05:20 - okay and for
05:23 - example your compile your your command
05:27 - is in the second target which is compile
05:32 - then how you can
05:35 - uh compile this or how you can give the
05:39 - make file command you just need to give
05:41 - make and
05:44 - then compile because we need to execute
05:47 - the second Target and by default it
05:49 - detects the first Target right so this
05:52 - will also produce the same result once
05:55 - you execute it you see here it executed
05:58 - the same Command right
06:02 - so this is about the commands Okay and
06:08 - in make file you can also give command
06:11 - by this hash so you can give
06:18 - this
06:20 - target
06:24 - will compile all the files Okay so like
06:29 - this you can provide commands to
06:32 - remember what or to see that what this
06:37 - target is made for so you can give
06:39 - command starting with this hash sign
06:45 - okay but we can uh see that this this is
06:50 - doing the same thing this is executing
06:52 - the same command in here I have just
06:54 - copied and pasted this command and makes
06:57 - file can do more than that so for
07:00 - example I will give you the other
07:02 - example I will just delete this uh all
07:05 - the code I have written and I will just
07:09 - write this make file commands so I will
07:12 - explain you what I have written here
07:15 - first of
07:16 - all here let me explain you from from
07:20 - here first so I have created three
07:24 - objects because I have three CPP files
07:27 - right and so the this is a target main.
07:31 - o function 1. o and function 2.0 is the
07:35 - Target and the dependency so whatever
07:39 - you write after this colon and with the
07:42 - space it's the dependency it's called
07:46 - the dependency so main. o has the
07:49 - dependency main.cpp which we have in our
07:52 - program right main. CPP this here so and
07:58 - when when you call main. O it will
08:01 - execute this command
08:04 - g++ minus C minus c stand for compile
08:08 - and it will compile
08:11 - main.cpp and it will check first whether
08:14 - it fulfills the
08:16 - dependency or or requirement of main.cpp
08:20 - so it should have main. CPP first
08:22 - because it depends upon uh our Command
08:25 - depends upon this okay so this is called
08:28 - dependency
08:31 - this is called Target and this is called
08:34 - command okay in the same way I have
08:37 - created the object of function one and
08:40 - function two which have the
08:43 - dependency function two has dependency
08:45 - function 2. CPP and I'm
08:49 - executing the function 2. CPP here and
08:52 - function 1. CPP here okay and the clean
08:57 - command I have given to to clean all the
09:00 - object file and to clean or remove all
09:05 - uh the executable file so when I uh
09:08 - execute make clean it should remove all
09:12 - these object file and the uh executable
09:15 - file it has made now we come to this
09:19 - part hello and what this is doing is it
09:23 - is executing all our object files which
09:27 - we have created right so it has the
09:31 - dependency main. o function. o and
09:34 - function 2.o which we have created here
09:39 - okay and then it will
09:42 - execute or the command g++ so it will
09:46 - execute main. o function 1.0 function
09:50 - 2.o and we are creating the executable
09:52 - file hello from it
09:55 - right and then we call this target in
09:59 - our all target so when we write make all
10:03 - then our program is executed executed so
10:09 - it will go here first and it will see
10:11 - that we have to make this and the
10:14 - dependency of this is these three files
10:18 - then it will execute these three and
10:20 - then it will execute this command and
10:23 - create this executable file right so
10:26 - let's save this and Let's uh compile it
10:32 - so I will write make all if you write
10:37 - make all then also it will go to this
10:40 - first Target because this first Target
10:43 - name is make all or you can give uh the
10:47 - command make also because it will by
10:51 - default go to the first Target right so
10:53 - right now I will show you this by make
10:56 - all and press enter and you see here
11:00 - first it has gone to compile main. CPP
11:05 - so it goes here
11:08 - because all depends upon hello and hello
11:12 - depends upon main. O So main.
11:16 - o will be compiled first or main. o will
11:20 - be executed first and it depends upon
11:23 - main. CPP so this will be compiled first
11:26 - right then our function one will be
11:28 - compiled
11:29 - and then our function 2. CPP will be
11:32 - compiled and then it will create the
11:34 - result and it
11:36 - will show us the result now I have shown
11:41 - I want to show you what this clean does
11:43 - right so it's just a remove
11:46 - command of uh this object file star
11:50 - object or hello which is our executable
11:54 - file name right so I just want I just
11:58 - want to show the four folder and see
12:00 - here what
12:02 - happens when
12:05 - I execute
12:09 - make clean so when I execute make clean
12:13 - see here when I have executed make all
12:17 - it has created main. o function 2. o and
12:21 - function 1. o right because uh we have
12:26 - our
12:27 - dependency in here and when I click or
12:31 - when I type make clean and press enter
12:35 - it will clean all our program and it
12:37 - will remove all the object file and
12:40 - executable file from here and once again
12:43 - when I make all when I give this command
12:46 - it creates object file and executable
12:49 - file once again right but still you can
12:54 - further improve this uh by declaring
12:58 - objects so how can we do
13:02 - this so let's make uh this make file
13:07 - more modular so I will just remove all
13:11 - this first or let's Let It Be There we
13:15 - will comment it and I will just
13:19 - paste this code
13:22 - here and just remove this okay so
13:30 - in make file we can declare variables
13:32 - also and variables are declared like
13:35 - this so I will say the
13:46 - comment declare the variable and
13:49 - variable you can name it uh according to
13:52 - you but uh make file has some
13:55 - conventions so just uh I will show you
13:58 - where you can can read about make file
14:00 - because make file is a very broad topic
14:03 - and I'm showing you just a basic things
14:07 - okay so you can declare uh variables
14:11 - like this cc is g++ so this is our uh
14:16 - comp type of uh compiler we are using
14:19 - and we we can set the variables so this
14:24 - is uh a variable and this is a variable
14:27 - and
14:31 - so in this we are telling uh that which
14:34 - types CC will come the variable CC will
14:38 - contain which type of compiler we are
14:40 - using we can change it uh to GCC also if
14:45 - you are if you have a c program and in C
14:50 - flag we are giving the option which type
14:54 - of compiler option we want to give so
14:59 - minus C is for compilation minus wall is
15:02 - for giving the warning so if you declare
15:07 - this kind of variable then you don't
15:10 - need to change for example we are using
15:13 - this CC here so whenever you want to
15:18 - change this g++ you don't need to change
15:21 - g++ here here here here you just change
15:25 - this variable CC here to GCC and and
15:28 - this will be implemented here so that's
15:32 - why we declare variables so we have CC
15:35 - variable and C flag variables and this
15:41 - program or this code is the same as old
15:45 - uh which I have already mentioned and
15:49 - how you can call these variables here by
15:51 - giving this dollar sign and in the
15:53 - bracket just call the variable right so
15:57 - what I have done is I have just replaced
16:01 - g++ with this one
16:04 - right so let's see if I can show you the
16:10 - last code so you can see here in the
16:14 - last uh code which I have mentioned you
16:17 - g++ is here and I have only replaced
16:21 - this g++ with dollar and bracket and
16:24 - this I'm calling this c c variable here
16:28 - in a same way I'm calling wherever I
16:30 - have minus C I have included one more
16:33 - options minus wall and this will also
16:38 - have uh had become tedious if you have
16:41 - to include this uh warning command to
16:45 - every function
16:47 - and by declaring variable it has become
16:50 - really easy you just need to add this
16:54 - warning command here and it will be
16:57 - executed here also so you can call
17:00 - variables like this dollar and in the
17:03 - bracket you need to give the call to
17:06 - your variabl so I have replaced this
17:09 - like this and this will
17:13 - also execute the same command same uh uh
17:18 - same type of uh compilation but this has
17:23 - made our compilation more modular and
17:27 - this will come handy when you have
17:30 - hundreds of files right and I will save
17:33 - this make file and once again when I to
17:37 - make
17:40 - all so it says nothing to be made
17:44 - because I haven't changed anything in my
17:48 - main main. CPP or any of the files so
17:53 - suppose for example I just change my
17:57 - main.cpp only one
17:59 - file and I will say just print
18:04 - some some message here my double quotes
18:09 - that
18:12 - this is whatever any message and this is
18:17 - just to show you that when I change this
18:20 - only one file then what happens okay
18:25 - so once again I have saved this main
18:28 - file and I have changed it changed this
18:31 - file only and I haven't changed
18:34 - function. or function 1. CPP or function
18:37 - 2. CPP or and earlier what was happening
18:40 - only all the three files were compiling
18:43 - right and now I have changed the main
18:47 - file and I've have executed this make
18:50 - all I will execute this command once
18:52 - again and you see
18:55 - here only one F only one uh command is
18:59 - executed which is
19:01 - main.cpp and because we haven't changed
19:04 - function 1. CPP and function 2. CPP the
19:07 - state of uh those two files will remain
19:10 - same and whatever file we have changed
19:13 - only this command will be executed so
19:16 - this
19:17 - will make our compilation faster okay so
19:22 - that's why we can use make files also so
19:26 - this is some of the basics I have shown
19:29 - you uh how to uh use make file and how
19:33 - you can create make files but make file
19:37 - is a big topic and you uh need to read
19:41 - uh to create very module make files uh
19:46 - so where you can read about make
19:50 - files just go
19:53 - to
19:54 - gnu.org
19:58 - and so www. gnu.org just go to this site
20:04 - and this is in here in the search just
20:08 - search for make file and press enter and
20:13 - you can see this second option GN you
20:18 - make and all the documentation of make
20:21 - file and make you can find it here okay
20:25 - so whenever you have time just give uh
20:30 - some time to read uh about make file and
20:33 - you will learn how to make very good
20:36 - make files from here okay so I hope you
20:39 - have enjoyed this video please rate
20:41 - comment and subscribe and bye for
20:44 - now