00:00 - welcome to programming knowledge
00:03 - so in this video we are going to discuss
00:05 - about images
00:06 - and the first type of image that we are
00:09 - going to discuss about
00:10 - is the asset image and as the name
00:13 - suggests
00:14 - the image will be an asset okay and
00:17 - an asset to the project means that the
00:20 - image is
00:21 - in the folder where the project is or in
00:23 - the root
00:24 - where the project is so for that first i
00:27 - need to
00:27 - add a image in my root folder okay so
00:31 - for that i'll create a separate folder
00:33 - and i'll call it asset okay and then
00:36 - i'll paste
00:38 - any simple image okay so for now i'll
00:40 - this image seems fine
00:42 - i'll add it to the asset folder okay so
00:45 - the image is
00:46 - now in our root directory of the
00:50 - project okay then the next thing that we
00:54 - need to do with
00:54 - every asset image to use it in the
00:58 - code is to add it in our pop spec.tml
01:01 - file
01:02 - okay so to add if you look you will see
01:05 - some commented code
01:06 - and you can see it over here okay so
01:09 - first we write
01:10 - assets and then the location of that
01:13 - image
01:14 - okay so i will simply comment this out
01:16 - okay
01:18 - and then over here instead of this
01:22 - it will be asset and then the file name
01:27 - which is in this case reshaft.png
01:32 - sorry and then we need to save this and
01:35 - then you can see automatically
01:37 - over here the flutter get command will
01:40 - start
01:40 - running so once it is done we can start
01:44 - using the
01:45 - image in our code okay so for
01:48 - that in my my home app
01:52 - i'll remove the body okay for now
01:57 - and i'll create another new body okay
01:59 - and the body is a
02:01 - image
02:04 - and dot asset okay so we are using the
02:07 - named constructor
02:09 - of image okay and we i will surely post
02:12 - a
02:13 - video on constructors class and objects
02:16 - in dot
02:17 - okay so for now image is a class and it
02:20 - has a named constructor that is dot
02:22 - asset
02:23 - okay so as it is an asset we can say it
02:27 - first
02:27 - takes the string name okay which is the
02:30 - required file
02:32 - which is the required parameter i'm
02:34 - sorry okay so i'll pass the name
02:37 - and we simply just can't
02:40 - pass the shop.png okay we also need to
02:43 - pass the
02:44 - folder because we have kept it in a
02:46 - separate folder and as i told
02:48 - asset refers to the
02:52 - data which is in the root root folder
02:55 - okay so i'll write asset
02:58 - and reshop.png okay so now if i save
03:01 - this i should be able to see my image on
03:03 - my
03:04 - mobile screen okay and you can see that
03:07 - okay so this was this is the image that
03:10 - i have added
03:11 - and the first thing that people tend to
03:15 - forget is to not
03:16 - add it in the prospect.tml and
03:19 - then they struggle a lot to fix their
03:23 - okay so that is one important thing that
03:24 - you should never neglect
03:26 - okay so then if we added the
03:30 - file name we added the image name first
03:33 - then the next property that we can add
03:35 - is
03:36 - height okay so our height will be of
03:39 - let's say
03:40 - 20.0 height
03:43 - takes a double value so that's why i
03:45 - have added a dot is 0
03:46 - if i will not add it then also it is
03:48 - fine
03:49 - but adding the point 0 is a better
03:52 - practice
03:53 - okay so i'll save this and now my image
03:55 - size
03:56 - should have shrinked okay and you can
03:59 - see it has
04:00 - shrinked a little bit too much okay
04:02 - because the height is way too less
04:05 - i'll make it hundred
04:09 - and you can see the image has images
04:13 - height has decreased and since the
04:14 - height has decreased
04:16 - the width has also decreased
04:20 - and as we are talking about width we
04:22 - have a property called width
04:24 - okay and we can give any value we want
04:27 - okay so for now
04:28 - suppose i get 50 okay then
04:31 - since 50 is the smaller one then the
04:33 - scale right now will be 50.
04:36 - okay and you can see the image has
04:38 - shrinked even more
04:40 - okay so these were a few basic things
04:42 - now the next
04:43 - thing that we are going to discuss is
04:45 - the frame builder
04:47 - so as the name suggests it
04:50 - builds the frame in which the image
04:52 - widget will be shown
04:54 - so frame builder then it takes a it
04:57 - returns a method which has four
04:59 - parameters
05:01 - first one is build context okay so build
05:04 - context
05:05 - will get let's call it cons context
05:09 - then the next thing is
05:12 - widget child then in
05:16 - frame and
05:19 - bool was synchronously
05:25 - loaded okay i'll give a
05:30 - comma over here and then format it okay
05:32 - so
05:33 - now let's discuss what are these
05:35 - parameters over here
05:36 - so the build context returns the current
05:39 - context
05:40 - okay then the widget child so it
05:43 - contains the default image widget
05:46 - which is guaranteed to be normal because
05:49 - if we
05:50 - create an image asset then this is the
05:52 - required field we cannot neglect it we
05:55 - need to give this
05:56 - field and since we give this field there
05:59 - is some
05:59 - image displayed on the screen and
06:02 - therefore this child will never be null
06:05 - the next thing is into frame so it
06:08 - contains the frame index
06:10 - it is of no use right now it basically
06:13 - comes in play when we display a gif
06:16 - or a video because what basically
06:18 - happens in a video or gif
06:20 - is that the image frame keeps on
06:22 - changing continuously at very minute
06:25 - interval
06:26 - okay so when we want to change the frame
06:29 - in between a video or a gif then this
06:32 - frame comes to play okay for now
06:35 - the frame value is null and as soon as
06:38 - we build it its value will become zero
06:42 - and for gif or any other multi-frame
06:45 - image it will
06:46 - increase by one every time any new image
06:49 - is shown and when
06:52 - something is not important we
06:55 - change it with a underscore okay so that
06:59 - means it is
07:00 - just a placeholder it has no
07:01 - significance in the function
07:03 - but still we need it in the function
07:06 - definition
07:07 - okay then the next thing is was
07:10 - synchronously
07:11 - loaded okay so before discussing about
07:15 - this we
07:16 - need to understand what is synchronous
07:18 - and
07:19 - the difference between a synchronous so
07:22 - for that i have found a blog which
07:24 - beautifully
07:25 - explains about both and the difference
07:28 - so you can have a look at it later okay
07:31 - for
07:32 - now in simple terms what synchronous
07:34 - means is
07:35 - that the transmission of data was done
07:37 - immediately
07:39 - and as we are using it in images
07:42 - image widget so over here it stands for
07:45 - whether the transmission of asset image
07:48 - to the widget was done
07:49 - immediately or not so it is generally
07:52 - true
07:53 - but if it is not then you can display
07:55 - some other widget
07:56 - until it until the image is being loaded
07:59 - like a progress bar or stuff like that
08:02 - okay so these were about the four
08:03 - parameters now inside this
08:06 - function we need to return a widget
08:10 - that will be the frame of our image okay
08:12 - so for now
08:14 - i'll remove this okay and save this
08:21 - okay so we are getting an error because
08:23 - i have not yet
08:25 - passed anything i'll comment this out
08:28 - for the moment
08:32 - okay and then save it and run it again
08:36 - okay so you can see our images like this
08:39 - and
08:40 - now when we use frame builder we return
08:43 - our widget
08:44 - that contains the image widget okay that
08:47 - acts as the frame for the image widget
08:50 - so for now let's just
08:53 - give some padding to it okay so return a
08:56 - padding
08:57 - that has a padding and the padding is
09:00 - first
09:02 - then edge in sets all
09:05 - and from all the sides i want to add
09:07 - 10.0
09:08 - okay and the child is our
09:11 - widget child which we get over here okay
09:14 - that means the current
09:16 - image we check okay then i'll
09:19 - format it and save it
09:23 - so now you can see the image has padding
09:26 - from
09:26 - all the sides okay so to make the
09:30 - change significant i'll change it to 100
09:33 - okay and you can see the image has
09:36 - automatically left 100 pixels padding
09:39 - from this side
09:40 - from top and even from bottom and right
09:42 - but it is not significant in the screen
09:44 - as we don't have any other widget
09:46 - okay now we can also change it to
09:49 - container
09:50 - and add some color and see if it works
09:52 - fine or not
09:53 - okay so container then the container has
09:56 - a color
09:58 - let's say colors dot red
10:01 - okay i'll save it
10:05 - and you can see the container is red in
10:07 - color and it has 100 pixel padding from
10:10 - all the four sides
10:13 - okay so now you can also try some
10:17 - different
10:18 - things in this if you want so the first
10:21 - is decoration
10:23 - for decoration we have a box decoration
10:26 - we have discussed all this in the
10:27 - previous videos
10:28 - okay and then since we are using a
10:30 - decoration we can't
10:32 - have a color outside okay
10:35 - it is like of a quick recapitulation
10:39 - so i'll paste the color over here and
10:42 - then i will also like to change the
10:44 - shape
10:46 - so the shape is in the box
10:49 - shape pinum and i'll make it circle okay
10:52 - then again format it save it and let's
10:54 - see what happens
10:57 - and you can see the padding has become
10:59 - circular okay
11:00 - so this is how we use a frame
11:04 - builder okay so frame builder is a very
11:07 - important
11:08 - thing when we deal with images and
11:11 - it is a thing where people generally
11:12 - make mistake so i hope
11:15 - all the concepts were clear till now
11:17 - will continue in the next video
11:19 - thank you