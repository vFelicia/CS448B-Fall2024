00:00 - in this video I'm going to show you how
00:01 - to use lambda functions in Python in
00:05 - addition I'm going to show you how to
00:07 - use lambda functions with functions like
00:10 - Map Reduce and filter so let's get
00:14 - started so as we all know that Python is
00:18 - a multi paradigm language and it also
00:21 - supports functional programming and the
00:25 - lambda functions falls into functional
00:28 - programming paradigm so what are lambda
00:32 - functions and how to use lambda
00:34 - functions so lambda functions in Python
00:37 - are also called
00:39 - anonymous functions because they don't
00:42 - have any name sometimes they are also
00:45 - called one-line functions because they
00:49 - can be written in a single line of code
00:52 - so let's see how we can define a lambda
00:55 - function so as you can see here I have
00:58 - three normal function defined here one
01:01 - is the double functions which doubles
01:04 - whatever arguments you provide here
01:07 - second is a simple addition function and
01:10 - third function is the function which
01:12 - takes three arguments and provide the
01:15 - product of the three argument which are
01:18 - provided so let's see how we can convert
01:20 - these three functions into the lambda
01:23 - functions so the first function which we
01:25 - have is that double function so I'm
01:28 - going to once again write double as a
01:30 - variable and then I can use a special
01:33 - keyword called lambda to create a lambda
01:36 - function so as you can see here this
01:38 - double takes one argument which is X so
01:42 - to provide an argument in the lambda
01:45 - function you just write the name of the
01:48 - argument and then after the colon you
01:52 - write the body of the function so in our
01:55 - case this double function have this body
01:59 - which is return x x two so in lambda
02:04 - function if you want to return some
02:06 - value you don't need to use this return
02:10 - keyword you can directly write x
02:13 - multiplied by two here so this lambda
02:17 - function is equivalent to this double
02:21 - function which is a normal function so
02:24 - this w function takes one argument which
02:27 - is X which we are providing here and it
02:30 - returns the multiplication of X by two
02:33 - which we are writing after the Kulin now
02:37 - let's write the add function using
02:40 - lambda function so I'm going to once
02:43 - again declare a variable called add and
02:46 - once again used lambda and this time
02:49 - this add takes two arguments so I can
02:53 - provide multiple arguments in lambda
02:56 - functions by comma as you do with the
02:59 - normal function so I will provide two
03:01 - arguments and then after the colon you
03:04 - just write whatever you want to return
03:07 - so we want to return X plus y so we can
03:11 - simply write x plus y here and that's it
03:14 - so in a single line we can define the
03:17 - lambda function now the third function
03:20 - we want to provide here is the product
03:23 - function so I will declare a variable
03:25 - product and this time I just need to
03:28 - provide three arguments using the comma
03:30 - separator and after the colon I just
03:34 - provide the multiplication of these
03:37 - three values which is x x y x said so
03:43 - all these 3 normal functions is
03:46 - equivalent to these lambda functions so
03:50 - I'm going to just comment these three
03:51 - functions out by pressing ctrl + forward
03:55 - slash and now let's see how to use these
03:58 - lambda functions so you create a lambda
04:00 - function and then assign the result into
04:04 - some variable and then you use these
04:07 - variable as you use the normal functions
04:10 - so I'm going to just use print to call
04:13 - the double variable and then using the
04:17 - parenthesis I just provide the argument
04:19 - which this lambda function takes so this
04:22 - lambda function takes one argument which
04:24 - is X so I can provide the
04:27 - you of Axia so let's say I want to
04:29 - provide 10 as the value of X same I will
04:33 - do with the add a function and the
04:36 - product function so add a function takes
04:39 - two argument and the product function
04:42 - takes three argument so I can simply
04:45 - write these functions like this like a
04:48 - normal function and then I can just run
04:50 - my script and you will see it's going to
04:54 - give us the same result as the normal
04:57 - function gives us so the first is the
05:01 - double of ten second is the addition of
05:04 - these two numbers and third is the
05:06 - product of these three numbers now you
05:08 - might ask a question that these
05:11 - functions which we have defined normally
05:13 - we can also define these function in a
05:16 - single line because there is not much
05:19 - logic inside these functions so we can
05:22 - declare these functions like this and
05:25 - they are also the single line functions
05:29 - so why do we use lambda functions so the
05:33 - lambda functions are generally used with
05:36 - the functions which takes function as an
05:40 - argument or returns function as the
05:44 - result so in functional programming
05:46 - functions are the first-class citizens
05:50 - that means we can pass the functions as
05:53 - the normal argument so as you can see
05:56 - here we have passed some static or
05:59 - constant value as an argument here but
06:02 - we can also pass the functions as an
06:06 - arguments and in addition you can also
06:09 - return a function from a function so
06:14 - instead of this multiplication you can
06:17 - create a function and return from a
06:19 - function and that's where these lambda
06:23 - functions are useful so let me give you
06:26 - some examples of where you can use
06:29 - lambda functions so as I said you can
06:33 - use lambda functions with the functions
06:35 - like filter reduce and map so let me
06:39 - illustrate how these functions
06:41 - so I'm going to declare a list of some
06:45 - numbers so now I have created a list
06:48 - which have these six elements now let's
06:51 - see how to use a map function with a
06:53 - lambda function so there is a inbuilt
06:56 - function called map in Python which
06:59 - takes two argument one is a function and
07:03 - second is an iterative variable and we
07:07 - all know that collections like lists or
07:11 - tuples or the dictionaries are all
07:15 - iterative collections so we can use map
07:19 - keyword and then here we can define a
07:22 - lambda function so let's say I want to
07:24 - double each and every element of this
07:27 - list so I can define a function which
07:30 - takes one argument X and then we are
07:34 - going to return that double of this
07:37 - value so this is the function which we
07:39 - have passed to this map function because
07:42 - the first argument which map expects is
07:46 - the function the second is the iterate
07:50 - able collection so we are going to pass
07:52 - this list as the second value let me
07:55 - define let's say my list here so it will
07:59 - be more clearer so I'm going to just
08:02 - pass this my list as the second variable
08:06 - so what this map function is going to do
08:08 - is it's going to apply this lambda
08:11 - function to each and every element of
08:14 - this list which is basically going to
08:18 - double the value of each and every
08:20 - element of the list
08:22 - now let's assign the result of this map
08:25 - function into our variable so I'm going
08:27 - to assign the result into some variable
08:30 - and then I'm going to print the result
08:33 - first of all so this variable contains
08:37 - the map function so let's see first of
08:40 - all what is the result and then I'm
08:43 - going to show you how to get the result
08:45 - which we are expecting so you can see
08:47 - here whenever you want to print the
08:50 - value of map it's going to just give you
08:53 - this kind of result
08:55 - so how we can get the list out of this
09:00 - map value in order to get the list out
09:03 - of this map value you need to cast this
09:07 - value into a list and how to convert
09:10 - this value into a list you use a list
09:13 - function and then pass the result of the
09:17 - map function as an argument of this list
09:20 - function let's run the program once
09:23 - again and you will see now that the
09:27 - result is a list and in the result every
09:31 - element of the list is doubled so
09:34 - basically what this map function has
09:36 - done is it has applied this function to
09:41 - each and every value of the list and
09:44 - this function just doubles each and
09:47 - every value of the list now you might
09:50 - say that this is a very simple function
09:52 - which we are applying to the list so
09:55 - let's make things little bit complex and
09:58 - let's say now I have two lists one is my
10:03 - list one and other is -2 and this other
10:07 - list contains some other set of elements
10:12 - so let me just change the values which
10:15 - this second list contains and let's say
10:18 - using this map function I want to add
10:21 - each and every element of these two
10:25 - lists and create a third list with the
10:28 - addition of let's say 2 + 1 + 5 + 4 8 +
10:34 - 7 10 and 8 like this so how can I create
10:37 - a map function to achieve this so let's
10:42 - say this is a variable B and here inside
10:46 - the lambda function we gave the second
10:49 - argument which is y so it takes two
10:51 - argument and then it adds the value of x
10:56 - + y so we can do like this and then as
10:59 - the second argument we are passing the
11:01 - first list and also as the third
11:04 - argument you can pass the second list
11:08 - here
11:08 - so now what this map function is going
11:11 - to do is it's going to take the first
11:13 - element of the first list and the first
11:16 - element of the second list and then it's
11:19 - going to apply this function to the
11:21 - first elements of both these lists which
11:25 - is to add these two numbers so let's see
11:29 - what is the result which we get using
11:31 - this map function so I'm going to just
11:33 - convert the answer or the result into a
11:37 - list and then I'm going to just pass
11:39 - this B variable as an argument of this
11:41 - list and then we are just printing the
11:44 - results so let's run the code and let's
11:45 - see what happens so you can see we get
11:48 - the list which adds the value of these
11:51 - two lists and creates a new list so you
11:54 - can see 2 plus 1 is 3 here 5 plus 4 is 9
11:58 - then 8 plus 7 is 15 and so on so this is
12:04 - how you can use lambda functions with
12:06 - map function now let's see how to use a
12:09 - filter function so I'm going to use this
12:11 - special function which is called filter
12:14 - and this filter functions takes two
12:17 - argument but what is special about this
12:19 - filter function is it takes a function
12:22 - as the first argument which gives us a
12:25 - boolean result so instead of adding two
12:29 - numbers and returning this filter
12:31 - function is expecting a function which
12:34 - gives us the boolean result so let me
12:37 - minimize this so let's say we want to
12:39 - filter the even values from this list so
12:43 - how we can achieve this using the filter
12:46 - function so as I said this takes a
12:48 - function as the first argument so you
12:51 - can use lambda and how to find out the
12:54 - even values you pass an argument and
12:56 - then you return X modulo 2 is equal to 0
13:01 - so this X modulo 2 is going to give us 0
13:05 - whenever the number is even otherwise is
13:09 - going to give us 1 so this is the first
13:11 - argument and the second argument we can
13:13 - pass here is just for example the first
13:16 - list here and now I am going to assign
13:19 - the result into a very
13:21 - and let's print the value of C now using
13:26 - the list function so list and as an
13:29 - argument I'm going to pass C here let's
13:32 - run the code and let's see what's the
13:34 - result and you can see you just get the
13:37 - even values filtered out from this first
13:41 - list which is two eight and ten now let
13:45 - me give you one more example of filter
13:48 - so let's say you want to filter out from
13:51 - the second list which values are greater
13:54 - than five so all the values which are
13:57 - greater than five we want to filter out
14:00 - so we will pass X as an argument and
14:03 - let's say this is the D variable so this
14:06 - lambda function takes X as an argument
14:09 - it's going to return true so let me just
14:12 - write the syntax here so it's going to
14:15 - return true if the value of X is greater
14:19 - than five else it's going to return the
14:23 - false so else we can just write false
14:26 - here so if you want to write if an else
14:29 - condition inside alarm the function you
14:32 - write something like this so this is the
14:35 - syntax of if and else so if the value of
14:38 - x is greater than five it's going to
14:41 - return true otherwise it's going to
14:43 - return false so let's run this code and
14:47 - let's see what happens let me just
14:48 - replace the C by D and I'm going to run
14:51 - this file and you will see the result
14:55 - here so in this list you will see eight
14:59 - ten and nine are greater than five
15:02 - that's why we got this result if we
15:05 - write here greater than and equal to and
15:08 - once again run the code it's going to
15:11 - give us four values including five here
15:14 - so this is how you can use filter
15:16 - function with the lambda functions now
15:20 - let's see how we can use one more
15:22 - function which is called the reduced
15:25 - function so in order to use the reduce
15:28 - function we need to import a special
15:31 - module which is Fung tool so let's
15:34 - import
15:35 - this module and this module is called
15:37 - funk tools so we are going to write from
15:40 - funk tool import reduce so what we are
15:44 - basically saying is we need a reduce
15:47 - function from this funk tool module and
15:51 - now you can use a reduce function so I'm
15:55 - going to declare a variable E and then I
15:58 - can use this reduced function which also
16:00 - takes two argument one is the function
16:03 - and other is the iterative collection so
16:07 - let's define a function first of all
16:09 - which is the lambda function and this
16:11 - lambda function is going to take let's
16:13 - say two values x and y and what it's
16:17 - going to return is the sum of X plus y
16:20 - here now as the second argument I'm
16:22 - going to pass my list variable here so
16:25 - what a reduce function does is it takes
16:28 - first two element of the list and then
16:32 - apply the function which you have
16:34 - written here which is going to add first
16:37 - two element and then it's going to store
16:39 - the result in X variable and take next
16:42 - element into the Y variable so seven
16:45 - plus y is going to give us whatever
16:48 - result and once again it's going to
16:51 - apply the result and then going to add
16:54 - the next number to the result so let's
16:57 - see what result we get using this
16:59 - reduced function so I'm going to once
17:02 - again use print and then we can directly
17:04 - print the value of the reduced function
17:07 - which is e so let's run this code once
17:10 - again and you will see this result which
17:13 - is 37 now 37 is the sum of all these
17:18 - elements inside this my list so let me
17:22 - explain you once again what this reduced
17:24 - function is doing so first of all
17:27 - because we are passing two arguments
17:30 - here in the lambda function it's going
17:32 - to take first two element of your
17:35 - collection which is two and five and
17:36 - then apply this code or statement to
17:41 - these two elements which is two plus
17:44 - five and we will get seven as the result
17:47 - now once again it's going to
17:49 - take seven as the first argument which
17:51 - is the sum of these two numbers and
17:52 - eight as the second argument which is
17:56 - why here and then apply this logic once
18:00 - again to seven and eight which gives us
18:04 - 15 and once again this 15 will be passed
18:07 - as X and 10 will be passed as Y and once
18:12 - again the addition of 15 and 10 will
18:14 - happen which will make it 25 and so on
18:18 - so this is how you can use lambda
18:20 - functions in Python and this is how you
18:24 - can use lambda functions with map filter
18:28 - and reduce functions