00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you how to use
00:06 - nested functions and closures in Python
00:10 - so let's get started
00:12 - so we will start with the nested
00:14 - functions so in Python we can define the
00:18 - nested function that means we can define
00:21 - a function inside a function so let me
00:24 - give you this example and in this
00:27 - example this function which is an outer
00:29 - function takes some text or message as
00:33 - the argument and I have defined one more
00:37 - function inside the outer function and I
00:40 - named it as inner function which prints
00:43 - the value of the text which we have
00:46 - passed in the outer function and we are
00:50 - just calling the inner function in the
00:53 - outer function scope so this function is
00:56 - declared locally inside the outer
00:59 - function and we are just calling this
01:02 - inner function inside this outer
01:05 - function now in other words we can also
01:07 - say that this outer function is an
01:10 - enclosing function and this inner
01:13 - function is the local function of this
01:18 - outer function and now when I call this
01:20 - outer function and let me run the code
01:22 - it's going to just print the value which
01:25 - we have passed as an argument so we have
01:28 - just passed this text argument which is
01:31 - once again passed to print statement of
01:34 - inner function and because we are
01:36 - calling this inner function inside this
01:38 - enclosing function it prints the value
01:41 - using this statement so when you declare
01:44 - one function inside the another function
01:47 - it's called the nesting of functions let
01:51 - me give you one more example of the
01:53 - nested function and I have defined this
01:56 - pop function which is our outer function
02:00 - or enclosing function and here I have
02:04 - defined a function called get last item
02:08 - which is our inner function or the local
02:11 - function to the pop function
02:13 - now this puffs function takes the list
02:15 - as an argument and we have defined a
02:18 - local function inside this pop function
02:21 - and what this local function get last
02:23 - item does is whenever you pass a list as
02:26 - an argument to this local function it's
02:29 - going to find out the last element of
02:31 - the list and return the last value of
02:35 - this list so here this is the last index
02:39 - of the list and then it's going to
02:42 - return the last item of the list which
02:44 - is passed as an argument now you may
02:46 - already know that you can call a
02:48 - function called remove on your lists
02:51 - which is used to remove some item from
02:55 - the list so I'm just calling remove
02:58 - function on the list and as an argument
03:00 - of the list I'm passing the function
03:03 - which finds out the last element of the
03:06 - list so this is going to give us the
03:09 - last element of the list and this last
03:11 - element will be removed from the list
03:15 - and at last I'm simply returning the
03:17 - list which is passed as an argument to
03:20 - the pop function so let's say this is
03:22 - the list on which we are working on
03:23 - which have five elements and we are
03:26 - calling pop function on this list again
03:29 - and again three times so let me run the
03:32 - code and let's see what happens
03:34 - so you can see when first pop is called
03:36 - it's going to remove the last element
03:38 - which is 6 from the list and then
03:41 - whenever the second pop is called it's
03:44 - going to remove the 4 and whenever the
03:47 - third pop method is called it's going to
03:49 - remove the 3 and so on so this is how
03:52 - you can use nested functions in Python
03:55 - now let's talk about the closures so I'm
03:59 - going to use the same nested function
04:01 - example which I have shown you earlier
04:03 - so this is the nested function now in
04:06 - order to convert this nested function
04:09 - into a closure what we need to do here
04:12 - is we need to return the inner function
04:15 - without the parentheses so the thing to
04:20 - note here is we don't need to return
04:23 - this inner function with the parentheses
04:26 - we need to
04:27 - turn this inner function without any
04:30 - parentheses and this is the simplest
04:32 - example of the closure so what is a
04:36 - closure so a closure is a function whose
04:39 - return value depends on the value of one
04:43 - or more variable which are declared
04:46 - outside the function so in this example
04:49 - this text variable is declared outside
04:52 - the inner function and the value of this
04:56 - inner function depends on this text
05:00 - variable which is declared outside this
05:03 - inner function and that makes it a
05:06 - closure and closure have a special
05:09 - property that this closure function
05:12 - object remembers the value in the
05:15 - enclosing scope even if they are not
05:18 - present in the memory so I will explain
05:21 - you that but let me just show you how to
05:24 - use this outer function which now uses
05:28 - that closure so I'm going to declare a
05:30 - variable a which means because this
05:33 - outer function is returning the inner
05:35 - function that means a contains now the
05:38 - inner function so we can use this a as
05:41 - the function so in order to use this a
05:44 - as the function we can just call this a
05:47 - using the parentheses because this
05:50 - function doesn't take any arguments so
05:52 - we are not passing any argument here but
05:55 - we will just call it as a function
05:57 - because this outer function is just
05:59 - returning the inner function so let's
06:02 - run the code and let's see what happens
06:04 - when we run this code so you can see it
06:06 - prints hello which is printed using this
06:09 - print statement whenever we call this a
06:12 - function so if I just call this a
06:16 - function without the print method also
06:18 - it's going to print the hollow because
06:21 - here we are just using the print to
06:25 - print the text which is passed using the
06:28 - outer function now as I said closure is
06:32 - a function object that remembers the
06:34 - value in the enclosing scope even if
06:38 - they are not present in the memory
06:41 - so our enclosing scope is the outer
06:43 - function so even if we delete the outer
06:46 - function after declaring the statement
06:50 - and if the a contains this inner
06:53 - function and now let's say I'm going to
06:56 - just delete the outer function so this
07:00 - statement is going to delete the outer
07:02 - function and let me call this outer
07:03 - function once again after the deletion
07:05 - of this function that means it's going
07:08 - to throw us an error which will say that
07:11 - this function is already deleted so we
07:15 - cannot call at this function and now
07:17 - let's see the magic of the closure so
07:20 - even if we deleted the outer function
07:23 - and we cannot call the outer function
07:26 - but before deleting we have created a
07:30 - variable which contains the value of
07:32 - inner function and now I'm just calling
07:35 - the inner function with these
07:37 - parentheses and let's see what happens
07:39 - so I'm going to just run this code and
07:42 - it's going to print hello even after we
07:45 - have deleted the outer function so this
07:48 - means that this variable a is storing
07:51 - some kind of state of inner function
07:54 - even if the outer function is deleted
07:58 - and that is the magic of the closures so
08:02 - a closure function is able to remember
08:04 - the values which are declared outside
08:06 - the function also so this is our closure
08:10 - function and it's able to remember the
08:12 - value which are declared which is text
08:15 - outside the function and that's the
08:18 - beauty of closures now let me give you
08:20 - one more example of the closure so we
08:24 - will be able to understand it in a
08:26 - better way so here I have defined a
08:29 - function called nth power and I pass one
08:33 - argument here which is an exponent and
08:36 - inside this nth power function I have
08:39 - defined a local function which also
08:42 - takes one argument and then what it
08:46 - returns is is the power of whatever
08:49 - argument we pass here and this exponent
08:52 - is coming from the outer scope
08:55 - which is as an argument of the outer
08:57 - function which is aunt power
08:59 - so base is coming from the inner local
09:03 - function and the exponent is coming from
09:06 - the outer scope and we are just
09:09 - returning this power of which is a local
09:12 - function without any parentheses once
09:15 - again so this is very important you
09:17 - return the function without the
09:20 - parentheses now I can declare some
09:22 - variable first of all I'm going to
09:24 - declare a variable called square and
09:26 - then we will call this nth power
09:29 - function and we will just pass the value
09:32 - to so now this exponent becomes 2 here
09:36 - which is also passed to the inner
09:38 - function or the local function so here
09:41 - the value of 2 is saved that means
09:44 - whenever we call the square function
09:47 - it's going to give us the square of
09:50 - whatever number we are going to pass as
09:54 - an argument to this square so let's try
09:57 - eight months and let's see what happens
09:59 - so I'm going to just print and then call
10:03 - this square function which takes an
10:06 - argument and I'm going to first of all
10:08 - find out the square of two and I'm going
10:11 - to run this program and you can see it's
10:14 - going to give us the square of this two
10:17 - because now the square function is going
10:21 - to give us the square of the number
10:23 - which we will pass as an argument here
10:26 - so this 2 is passed to the inner
10:29 - function because this nth power gives us
10:32 - the inner function because it returns
10:34 - the inner function so now this to which
10:37 - we are at passing in the square is
10:40 - passed as the base of this in our
10:44 - function and that's why we are getting
10:46 - the square of the number which we pass
10:49 - here so let's find out the square of
10:52 - some more numbers so I'm going to just
10:54 - pass 3 4 and 5 here and I'm going to run
10:59 - the code once again and you will see
11:01 - that it's going to give us the square of
11:03 - 2 3 4 and 5 so once again we have seen
11:09 - that the closure function is remembering
11:13 - the value which is declared outside the
11:16 - scope which is exponent now whenever I
11:19 - use this function once again so let me
11:21 - declare one more variable and this time
11:23 - I want to declare a cube here and once
11:26 - again I'm going to use the nth power to
11:29 - find out the cube of numbers so now this
11:33 - 3 is passed as an exponent here and this
11:36 - exponent is going to be passed inside
11:38 - the inner function so exponent value is
11:41 - 3 here that's why we are going to get
11:43 - the cube of the number which we are
11:46 - passing as the base argument of this
11:50 - inner function so now this is the inner
11:53 - function and we can once again call the
11:56 - print to call the cube method this
11:59 - should be cubed not cure so cube and
12:02 - then we can find out the cube of 2 and
12:05 - let's find out the cube of 3 4 and 5
12:11 - also so let's run the code once again
12:13 - and now you will see here the cube of
12:16 - the numbers are printed whatever numbers
12:19 - we are passing as an argument of this
12:22 - cube function so in a way this cube or
12:25 - the square variable is holding the
12:28 - status of the inner function and that's
12:32 - something we have also seen in the case
12:34 - of classes the classes are able to
12:36 - remember the state of the variables and
12:39 - the methods which are declared inside
12:42 - that losses so closures are sometimes
12:44 - used in place of the classes which only
12:47 - have usually one method inside them
12:51 - because this one method we can already
12:54 - define in the closure also and it's able
12:57 - to remember the state so closures can be
13:01 - used in place of the classes which have
13:03 - fewer method generally one method inside
13:07 - them the closures are also used heavily
13:10 - in the case of decorators in Python so
13:14 - decorators we are going to learn in the
13:17 - next video and I'm going to show you why
13:20 - decorator use
13:22 - closures and how to use closures with
13:25 - that decorators and the third advantage
13:28 - of closures are they are sometimes more
13:32 - efficient than the normal functions so
13:36 - the closures are sometime also used for
13:39 - the code efficiency and the faster
13:42 - working of code so this is how you can
13:44 - use closures in Python I hope you've
13:47 - enjoyed this video and I will see you in
13:49 - the next video
14:01 - you