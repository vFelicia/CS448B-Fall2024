00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in this
00:04 - video we will talk about global
00:06 - variables local variables and non local
00:09 - variables so let's get started so to
00:12 - start with I have a very simple function
00:15 - which is funk and here it has one print
00:20 - statement which is printing the value of
00:23 - x but you can see here X is not defined
00:26 - locally inside the function instead I
00:30 - have declared X outside the function and
00:32 - I'm just assigning the value to X just
00:36 - before calling the function here so what
00:40 - do you think will happen so let's run
00:42 - the code and let's see what happens so
00:44 - because this X is declared globally and
00:49 - it's in the global scope so first of all
00:53 - your function will search for the value
00:55 - of x inside the function in the local
00:58 - scope and if it doesn't find the value x
01:01 - inside the local scope it's going to see
01:04 - outside the local scope in the global
01:07 - scope for the value of x and we have
01:10 - defined this value of x outside the
01:13 - function in the global scope so this
01:15 - print statement will take the value of x
01:17 - from the global scope and that's why
01:20 - it's printing global using this print
01:23 - statement now let's modify this function
01:25 - little bit so I'm going to define a
01:27 - local x inside the function and I'm
01:31 - going to assign a new string to it so
01:33 - let's say this is a local value so I am
01:36 - going to assign the string to the X so
01:40 - now we have X variable inside the local
01:43 - scope of the function and also we have
01:47 - another X variable outside the function
01:50 - in the global scope so what do you think
01:53 - now will happen so let's run the code
01:55 - and let's see what happens so you can
01:57 - see here it's going to print local
01:59 - because the variable will take the local
02:03 - value or local value have more priority
02:07 - than the global value
02:09 - so whatever variable
02:12 - declared nearer to the use of this
02:16 - variable that variable value will be
02:19 - used and that's why the local is printed
02:22 - because it's declared nearer to the use
02:24 - of this X which is inside the local
02:28 - scope of this function now let's print
02:31 - the value of x outside the function so
02:36 - in the global scope I want to print the
02:38 - value of x once again and let's run the
02:41 - code and let's see what happens so this
02:44 - local is printed using this print
02:47 - statement and the global is printed
02:49 - using the print statement which is
02:52 - outside the function so right now things
02:55 - are easy to understand when you declare
02:57 - this value x outside a function in the
03:01 - global scope and call the value of x
03:03 - using print then it's going to print
03:06 - that global and whenever you use the
03:09 - variable inside the function in the
03:12 - local scope it's going to print the
03:15 - local variable value which is local to
03:18 - the function so this means variable X
03:21 - which you have declared inside the
03:23 - function is the local variable and this
03:27 - variable x which you have declared
03:29 - outside the function is the global
03:33 - variable now let's make things a little
03:36 - bit interesting and I want to just print
03:39 - the value of x before even assigning the
03:43 - value local to it so right now I want to
03:46 - do something like this so until this
03:49 - print statement
03:50 - I haven't declared the value of x
03:52 - locally so using this print statement
03:54 - the value of x is supposed to be taken
03:58 - from the global variable which is this
04:00 - variable and then once we have declared
04:04 - the value of x locally then this print
04:08 - statement is going to print the value of
04:10 - x using the local variable but when we
04:14 - run the code it's going to give us the
04:16 - error and it's going to say that this is
04:19 - unbound local error which is local
04:23 - variable X referenced
04:26 - for the assignment so right now what we
04:28 - are trying to do is we are trying to mix
04:30 - the global and the local variables and
04:33 - Python is not able to understand whether
04:37 - X is a local variable or X is a global
04:41 - variable so to solve this problem we
04:44 - need to state explicitly that this X
04:47 - which we want to call using this print
04:50 - statement is the global value right so X
04:55 - here we want to take from the global
04:58 - value so to state that we can use a
05:02 - keyword called global and then the
05:06 - variable name so by writing this kind of
05:08 - expression we are telling Python that X
05:12 - is declared globally outside the
05:15 - function and we want to take the value
05:19 - of x globally so using this statement we
05:22 - are just stating that use the value of x
05:25 - using that global scope now when we run
05:29 - the code it's going to run fine so now
05:32 - you can see it has printed global here
05:34 - so let me just change this print
05:37 - statement so we will be able to
05:38 - understand what's happening really here
05:42 - so I'm going to just assign some number
05:45 - to the print statement let's say this is
05:48 - number one print statement and then this
05:51 - is number two print statement and this
05:56 - is number three print statement so we
05:59 - are going to know which value is printed
06:02 - using which print statement so I'm going
06:05 - to run the code once again and now you
06:07 - can see first print statement which is
06:09 - this one is going to print global
06:12 - because until here the value of x is
06:15 - taken from the global scope so it's
06:17 - going to print the value of x which is
06:19 - global which is defined here now you can
06:23 - see here we are reassigning the value of
06:25 - x and we are just saying that now we
06:29 - want to assign local to this X variable
06:33 - but still this variable is the global
06:37 - variable because we have explicit
06:39 - we stated here that take the value of x
06:42 - from the global variable so this global
06:45 - variable value will be reassigned and
06:48 - now this global variable value is local
06:52 - because we have reassigned the new value
06:55 - inside the global variable X and in the
06:59 - third print statement because we have
07:01 - already changed the value of x here now
07:04 - the new value of x will be local and it
07:08 - will be accessible from the global scope
07:11 - also so this also prints local so once
07:15 - again when you use this expression you
07:17 - are telling your local function that
07:20 - used the value of x from the global
07:23 - scope so now whenever you reassign some
07:27 - other value to X this is not the local
07:31 - declaration you are just reassigning the
07:34 - value to the global variable which is X
07:37 - here okay so once you have changed the
07:40 - value of x to local it will stay there
07:44 - that's why here also it has printed the
07:48 - value of x is equal to local now let's
07:51 - talk about the non local variables so
07:54 - non local variables behave almost
07:57 - similar to global variables but they
08:00 - have some differences so let's say I
08:03 - will define instead of saying that this
08:06 - is a global variable I'm going to say
08:09 - that this is a non local variable and
08:11 - when I run the code it's going to
08:13 - complain and this is going to say that
08:16 - this is a syntax error and no binding
08:19 - for non local variable is found so non
08:23 - local variable bindings you can only do
08:27 - inside the nested function so generally
08:31 - you use non local variables inside the
08:34 - nested function you cannot use this
08:37 - non-local keyword instead of the global
08:40 - keyword so let's see how we can use the
08:43 - non-local variables inside the nested
08:46 - function so what I'm going to do here is
08:49 - let's say I'm going to define the value
08:52 - and let's say this time I want to just
08:55 - use the value of x as numbers so here
08:59 - I'm going to assign X is equal to 20 so
09:02 - this X is in the global scope and I'm
09:05 - assigning 20 to it and then I'm going to
09:08 - once again inside the function I'm going
09:10 - to declare a local X and I'm going to
09:13 - assign 50 to it and then I'm going to
09:16 - define one more function inside this
09:19 - function and I'm going to name it as
09:22 - let's say in a function and let me just
09:25 - add the d EF keyword and then inside
09:29 - this inner function what I'm going to do
09:31 - is I'm going to define a non local
09:34 - variable once again X and then what I'm
09:38 - going to do is I'm going to reassign the
09:40 - value of X is equal to hundred so what I
09:43 - have done I have declared this X global
09:47 - variable and assign 20 to it and inside
09:50 - the function also I have declared one
09:52 - local X variable and I have assigned 50
09:55 - to it and inside the inner function of
09:57 - this function I have defined a non local
10:00 - variable which is X and I have assigned
10:03 - the value hundred to it so now what we
10:05 - are going to do here is we are going to
10:08 - call this inner function inside our
10:11 - outer function which is the funk
10:15 - function okay so this is the inner
10:18 - function and we are calling this inner
10:20 - function inside this function which we
10:23 - have declared so now what do you think
10:25 - will happen so let's run the code and
10:27 - let's see what happens
10:28 - so this first print statement which is
10:31 - this one it's going to print 50 because
10:35 - until now before calling the inner
10:38 - function the value of x will be taken
10:42 - from the local scope because we haven't
10:45 - stated here explicitly that x is a
10:49 - global variable so the value of x will
10:52 - be taken from the local scope right so
10:54 - we haven't written here that value of x
10:57 - is a global variable X value right so
11:03 - that's why the value of x will be taken
11:05 - from the
11:06 - scope and that's why it's printing 50
11:09 - here using the first print statement now
11:13 - here we have called the inner function
11:16 - that means the value of non-local
11:19 - variable is assigned 200 and once again
11:23 - we are calling the value of X so here
11:26 - inside the inner function we have
11:28 - defined the non-local variable that
11:31 - means it's not a global variable so it's
11:34 - not changing the value of the global
11:36 - variable or it's not using X from the
11:41 - global scope but this X will be taken
11:44 - from the local scope so this X will be
11:48 - overwritten by hundred values this is
11:52 - the new value we are assigning to our
11:54 - local variable which is X right so
11:57 - that's why it's just giving us hundred
12:01 - using this print statement
12:03 - so this non-local keyword you generally
12:06 - define inside the nested functions to
12:10 - state that we want to take the value of
12:14 - x from the local scope of the outer
12:18 - function not the global scope so this X
12:21 - is essentially this X which is defined
12:24 - inside this function and we are just
12:27 - reassigning the value of x to hundred
12:30 - and that's why it's printing hundred
12:32 - here and also you can see this print
12:35 - statement which is printing the value of
12:38 - global X which is this one that's why
12:42 - it's printing 20 so because we are not
12:44 - using this global X inside the functions
12:48 - because we have just used the local
12:50 - variable X inside the function and then
12:52 - we have reassigned the value of 100 to
12:55 - this local variable this X is not going
12:59 - to change and that's why it's printing
13:01 - 20 here now let's see what will happen
13:03 - when we change this keyword non-local to
13:06 - global and once again I'm going to run
13:10 - the code so now let's go to the function
13:12 - and here we have defined the local X
13:16 - which is different from the global scope
13:19 - so I
13:20 - until here the value of x will be taken
13:23 - from the local scope so this print
13:26 - statement because we haven't called the
13:28 - inner function before this so the value
13:32 - of x will be taken from the local scope
13:35 - so here it's going to print 50 now after
13:38 - this print statement we are just calling
13:40 - the inner function and inside this inner
13:43 - function we are just saying that take
13:45 - the value of x from the global scope not
13:49 - the local scope so using this expression
13:52 - we are saying that take the value of x
13:56 - from the global scope so this value will
13:59 - not be affected by this reassignment
14:03 - because now we are changing the value of
14:06 - the global X and not the local X so
14:11 - that's why when you call a dis print
14:14 - statement the value of x will be taken
14:17 - from the local scope so using this print
14:19 - statement when you call X it's going to
14:22 - take the local value of X because this
14:25 - inner function has no effect on this
14:28 - value of the local X and that's why it's
14:33 - printing 50 once again using this print
14:37 - statements so this x value will come
14:39 - from the local X and not from the global
14:42 - X and the last print statement is going
14:45 - to print hundred because this is the
14:48 - global X we are talking about and we
14:51 - have already changed the value of global
14:54 - X 200 using this expression that's why
14:58 - it's printing hundred here so there is a
15:01 - difference between non-local and the
15:04 - global variables if you write here
15:06 - non-local then here this value will be
15:10 - treated as the local variable so here we
15:14 - are changing the value of the local
15:17 - variable of X if you declare this as the
15:22 - global variable then we are changing
15:24 - this value which is in the global scope
15:26 - so this is how you can use global
15:28 - variables local variables and non-local
15:32 - vary
15:33 - in Python I hope you have enjoyed this
15:35 - video I will see you in the next video
15:47 - you