00:00 - hey guys welcome back to programming
00:03 - knowledge in this video we'll be looking
00:06 - more about the escape sequences which we
00:08 - had talked about in the previous video
00:10 - and we'll be learning how to perform
00:12 - inputted c+ this
00:14 - so before getting started today
00:15 - important let's talk more about the
00:17 - escape sequences so the escape sequences
00:20 - which I talked about in the previous
00:21 - video are slash a slash B now slash T
00:25 - and then slash slash n right there are
00:32 - actually many other escape sequences
00:33 - also you do have a slash b but all these
00:36 - things we won't be using much slash miss
00:38 - for a vertical dad we won't lose that
00:40 - much but you can always go up into the
00:43 - internet and then hope for the issue of
00:45 - escape sequences there so what do we
00:49 - need escape sequences for is it just to
00:51 - perform these actions or do they have
00:54 - other purpose also so let us say I
00:57 - wanted to print something like this so
00:59 - let us say I wanted to print escape
01:04 - sequences let me just put it without a
01:08 - brief so that this this is what this is
01:10 - the exact sentence I will be needing on
01:12 - the screen right so just try to print
01:14 - this escape sequences start with a slash
01:21 - and happy character and have a let's say
01:29 - single code single or have a single is
01:36 - them something at this wanted to print
01:39 - this particular statements as it is or
01:43 - to the console you might think it's very
01:47 - easy right just cut it I'm just going to
01:51 - cut it and then put it in feed of W
01:54 - codes and then paste it over there and
01:56 - then let's just run it it says it's an
02:01 - error why it is expecting a semicolon
02:03 - before single well Peter I will see me
02:06 - call it what's the problem with this
02:08 - where the problem is when you are
02:11 - putting it back slash and the
02:13 - in a string it is going to consider a
02:17 - backslash and the subsequent character
02:20 - as I skip sequence itself and here once
02:24 - you put in W code over here it it means
02:27 - that this is a separate string and then
02:30 - this is a separate string and this is
02:33 - actually something in between right so
02:36 - it doesn't have any meaning in at all so
02:39 - what we actually wanted was didn't even
02:42 - wanted this w could appear on to the
02:44 - screen right but we cannot do that you
02:46 - will have a yes we do that is by using
02:49 - escape sequences so yeah I am one third
02:53 - and backslash to appear right so how do
02:55 - you make a backslash up a backslash
02:57 - itself is a escape character when the
02:59 - way of marker and s input another
03:01 - backslash so this what it means is it
03:04 - means that this is escape sequence and
03:07 - it means this particular escape sequence
03:09 - just means that you need to put a
03:11 - backslash on-screen so that that is why
03:13 - you're you you are getting an error back
03:16 - then and now you will be getting a
03:18 - backslash perfectly as you wanted it and
03:20 - here instead of these codes you actually
03:23 - put a backslash before the code right so
03:27 - what this is
03:27 - if you put an escape port over here if
03:30 - you put n code as a skip sequence it
03:33 - means then this quote is not a part of
03:35 - this quote which is actually indicating
03:38 - the start or end of a string but it says
03:41 - skip character itself and it needs to be
03:43 - printed onto the screen that is one
03:45 - means if we use a code with it escape
03:49 - sequence so the same thing goes over
03:51 - here also if I just put a backslash it
03:53 - is going to go of it this is now
03:55 - entirely highlighted in blue that just
03:57 - means that this end this entire thing is
03:59 - now a string and now if I execute it I
04:02 - will be getting down so here you can see
04:05 - escape sequence will start with a
04:07 - backslash and have a single character in
04:10 - them and single is enclose within double
04:13 - quotes now exactly what we wanted so
04:15 - that is the importance of escape
04:18 - sequences so there are many other so
04:21 - there many places where you would be
04:24 - needing them so something like you want
04:26 - it to
04:26 - enclose something using double hoods or
04:29 - in water to put a backslash over some
04:31 - someplace or suppose you wanted
04:33 - backslash tend to appear but you can't
04:36 - directly print like this right you know
04:37 - what this is
04:38 - backslash is actually a new line so if
04:40 - you put something like this and if you
04:42 - try to execute it you will be getting
04:44 - something like this sequence of start we
04:47 - take and then a new length and then a
04:49 - space and then have every single
04:51 - character in them so that becomes a
04:53 - problem how do we do that same thing you
04:56 - just put double backslashes and then so
05:00 - now this actually this backslash and
05:03 - this backslash n are now different this
05:06 - bachelors only corresponds to this
05:08 - backslash and then this n is noise theta
05:10 - is a separate character so now if you
05:12 - run this you will be getting your output
05:14 - escape sequence back to the backslash n
05:16 - you get got what you want and how a
05:19 - single character in them
05:20 - so this is how you use escape sequences
05:23 - in your strengths now let us talk of add
05:26 - input before not talking about input let
05:30 - us talk about something called theta
05:33 - types phonetics down here data types
05:37 - why do we need to know about this when
05:40 - you can't just take input like you need
05:42 - to store the input at some place so that
05:44 - you can use it at a later stage so where
05:47 - we store the data is actually defined
05:49 - well a memory location and how will
05:51 - allocate memory that depends on the type
05:53 - of data they're pointed so we need to
05:56 - know what kind of data we need to we are
05:58 - going to get it as an input so that we
06:00 - can store that so what kind of data can
06:02 - we get we can either get numbers oh
06:06 - right you can't get anything else well
06:08 - we do have other types of data also
06:11 - something like you have graphs or you
06:14 - have images videos but all that are
06:16 - ultimately broken down into it into
06:18 - numbers only that's a different story we
06:20 - are not going to talk about that but for
06:24 - now we can say that data is
06:27 - fundamentally consists of only numbers
06:29 - and characters we can't get anything
06:31 - else other than that so the way we have
06:35 - data types are broken dollars to satisfy
06:38 - either numbers or characters
06:40 - so numbers what do we have we have
06:42 - integers or we do have real numbers so
06:46 - real numbers are nothing but decimals
06:48 - fracture how these things so the way we
06:50 - take integers is by eight so this data
06:53 - type which is for impedance so this is
06:56 - the data type and this is what it means
06:58 - so integers it's going to take so
07:00 - anything any integer is going to say
07:02 - minus twelve or twenty or twenty
07:04 - thousand all these are integers only so
07:07 - can I take anything can you take given
07:10 - infinity well no integer do have a range
07:13 - value and that ranges so let me write it
07:16 - separately it ranges from -2 power 31 to
07:23 - 2 power 31 minus 1 but it's not going to
07:28 - 31 it's 2 power 31 minus 1 so this is
07:32 - the range of the integers it is going to
07:34 - take up to this big numbers so you have
07:37 - something called short and unsigned sign
07:39 - there's all these things we'll be
07:41 - talking about that at a later stage but
07:44 - now this is the range of integers you
07:46 - you can store as small as -2 power 31
07:49 - and I ask because people that you do /
07:51 - 31 is nothing but it's a long fourth
07:54 - billion so that is a number you can
07:56 - store in you know what if we need a
07:59 - bigger number than 4 billion let's say 6
08:02 - billion or 8 billion for that we do
08:05 - actually we are going to use long
08:07 - longest another data type so long is
08:10 - actually a type modifier it is not the
08:13 - data type long you can use it with it so
08:15 - this makes it this actually makes it
08:19 - pretty readable so it is nothing but a
08:21 - big integer so what it does is it's
08:24 - going to store bigger number stand
08:26 - int so this will take about 8 but this
08:30 - this is going to take only 4 but it says
08:32 - hold bytes of memory we'll be looking at
08:35 - how this 4 bytes right now they such a
08:38 - way to check how much memory districts
08:41 - so this is going to take 8 bytes of
08:43 - memory and it's range is approximately
08:47 - up to 64 to positive 4
08:52 - proximately goes up with this so this is
08:54 - a huge number right it only need much
08:58 - bigger than this to positive forest very
09:01 - big you got that t2 itself is big right
09:03 - 2 power 31 2 / 32 they are almost walk
09:06 - the fourth period so you don't need
09:08 - bigger numbers than that but in case you
09:12 - need you have a llama teachers same goes
09:14 - with the real numbers also if you are
09:16 - working with smaller decimals or
09:19 - real-time decimals which are not so big
09:21 - you have float which is for decimal
09:24 - numbers so you got - - or sorry point
09:28 - toward you got something like 0.0003 or
09:33 - all these things so 12.0 also if you
09:36 - just put a point zero it becomes it
09:38 - float and these are all floats and then
09:42 - if you want bigger floats you do have
09:44 - double double s for bigger float bigger
09:49 - floats this again is for 8 bytes and
09:54 - this is the range of double now in C++
09:58 - if you did not specify the datatype if
10:01 - it is just a number if it just an
10:05 - integer it is always going to default to
10:07 - integer only and if it is a decimal
10:12 - number it is always going to default to
10:14 - double so what I did here is just I
10:17 - didn't comment so comments on those
10:18 - statements are not executed I'll be
10:22 - showing a demo shortly so for even
10:26 - greater that these are related types for
10:27 - storing numbers and so characters you
10:30 - don't need much you have only two types
10:32 - of character inputs that is you get only
10:35 - one character or you get a collection of
10:36 - characters so for one character you have
10:38 - care for one character and for multiple
10:44 - access you have strings so strings is
10:46 - actually more than just collection of
10:49 - characters there this much more talk
10:52 - about strings will be doing that at a
10:54 - later video so now for characters the
10:58 - way we defined characters is by using
11:00 - single quotes so you have if you put
11:04 - anything inside a single quote something
11:06 - like
11:06 - a or if you put B over here or
11:09 - exclamation mark anything inside a
11:12 - single good but only one character
11:14 - strictly only one character you cannot
11:16 - put multiple characters inside a single
11:17 - code that will cause an error and the
11:21 - fun fast-paced if you put something like
11:23 - this this will also become even though
11:25 - one is integer if you put it inside a
11:28 - single code it becomes a character the
11:31 - same goes with decimals also you can put
11:33 - decimals inside single quotes because it
11:36 - contains more than one character so even
11:38 - if you put one point zero something like
11:40 - that
11:40 - one is a character this period is a
11:42 - character and then zero is also you
11:44 - cannot put more than one character
11:47 - inside strings so that will come under
11:50 - string so strings how do we define like
11:52 - we did here so using double quotes
11:56 - fingers is a collection of characters
12:00 - collection collection of characters
12:03 - that's it and it is going to be an plus
12:07 - within double quotes so anything you put
12:09 - me inside of the human if you put you
12:11 - mean if we don't put anything inside
12:12 - double quotes this is also a string this
12:14 - is called in knowledge string we will
12:17 - talk about null and all these things at
12:19 - a later stage but for now just for your
12:21 - information purpose I am just telling
12:22 - about the null string and you do even if
12:25 - you put something exists this going to
12:27 - be string it is a space and even one one
12:30 - character also it is going to be
12:33 - considered as system this is for say
12:35 - string and now you can put something
12:38 - like one point zero all these are not
12:42 - considered are strings the Bayeux
12:43 - represent data is very very important
12:46 - you just take numbers if we just put one
12:48 - it is going to be end if you put 1 1 0
12:52 - it is going to big double remember that
12:54 - here you if if you put if you do not
12:58 - specify the data type it is going to be
13:00 - defaulted to double only C++ and if you
13:04 - want to slow if you want the data type
13:06 - to be float you can just add it F over
13:08 - there so if we just put F over here it
13:10 - is going to be flow the same goes here
13:12 - also if you want this one to be
13:14 - considered as long you just put in hell
13:16 - over there so this is considered as
13:18 - and how do you define character put like
13:22 - this this is going to be a cache and if
13:26 - you put it like this this is going to be
13:28 - string see how differently it is
13:32 - interpreted if we type the data in a
13:36 - different way so this is the importance
13:38 - of data - you are anything we get from
13:41 - the character inside categorized only
13:43 - the D stated types so we want to worry
13:45 - about any other whatever we type is just
13:49 - going to be a subset of all all of these
13:52 - things now let us work on some real
13:55 - input yeah forward to mention about the
13:58 - comments so let us know well we can
14:01 - actually show the comment over here only
14:03 - so suppose I want just data but this is
14:05 - something for you to understand right so
14:08 - these are not part of C++ comments these
14:10 - are something I typed right so these
14:12 - don't make any sense in C++ but I don't
14:16 - want it delete it because I'll be using
14:17 - it to explain to you guys so how can I
14:20 - do that without and also run this
14:22 - program without actually going into an
14:25 - error I cannot write another another
14:27 - program I don't want but I don't want to
14:31 - do that then for that we have something
14:35 - called comments I need this data but you
14:37 - don't want to compute it executed so
14:39 - what I do is I am going to hide this
14:41 - data from the compiler so the way we do
14:44 - that is by using these splines as
14:47 - comments so comments are actually used
14:49 - to explain some lines of code and also
14:53 - they are generally used to actually
14:55 - debug the program so if you are
14:58 - developing a big program and you don't
15:01 - want some of the lines execute and you
15:03 - directly want to see what is the result
15:05 - of two or three lines you can actually
15:07 - comment out the other lines and you can
15:09 - see the result that is going to be very
15:10 - useful when you're testing for that
15:13 - comments out there so there are two
15:16 - types of comments unless the single line
15:17 - comment which I did over here so this is
15:19 - the point the comment on this entire
15:21 - line so whatever I will right after this
15:24 - pair of forward slashes is considered a
15:27 - comment commit so all these are
15:30 - committed and
15:31 - I need to commit at multiple lines the
15:33 - way to do that is by putting a forward
15:35 - slash and put a star order so you can
15:37 - see all these our credo and the thing is
15:41 - it is completely green got my program so
15:43 - even this thing is greater and now if I
15:46 - try to execute I will be getting an
15:48 - error it says that this unterminated
15:50 - comment is there that is this one this
15:53 - one has been sucky but it is not
15:55 - terminated at any point so I want to
15:57 - terminate my comment over restraint
15:59 - because these are these are the lines I
16:01 - don't want to compile it so definitely I
16:04 - am just going to do the reverse of it I
16:05 - am going to put a stop and then a slash
16:08 - so this is actually going to comment out
16:11 - all these LEDs these lands in my program
16:14 - code these are not going to be executed
16:16 - by the compiler so now I can run my
16:18 - program without any issues and I'm going
16:20 - to get output so that is the importance
16:23 - of comments will be commenting out many
16:26 - things at a later stage when we were
16:27 - working with bigger programs comments
16:29 - are very important so now let us write
16:35 - some news feed code let us now write a
16:38 - program to add two numbers so it is
16:40 - always wise to actually put a comment on
16:44 - what you are doing and also put some
16:46 - authorization so you can put something
16:48 - like or something you can do all those
16:52 - things but for not just going to write
16:54 - the name of the program what I'm going
16:56 - to do is I am going to write a program
16:58 - for add two numbers it is always advise
17:01 - to put comments before your program good
17:04 - you don't have to put it over there only
17:06 - I am just putting it there you can put
17:08 - it anywhere you like I even you I can
17:12 - put it on inside here also I can put
17:14 - comments anywhere it like now let us try
17:16 - to program to add two numbers so first
17:19 - thing us I need to ask the user to enter
17:21 - because obviously we need to ask the
17:24 - user something they know he is going to
17:25 - do water program so let us say enter the
17:30 - first number simple enter the first
17:34 - number and now how do we now we need to
17:43 - create a memory location
17:44 - I do you right we need to create a
17:45 - relocation to actually tour our input
17:48 - you may we do that is we need to first
17:50 - specify what kind of data we're going to
17:52 - get what we can because it's a number it
17:56 - is actually going to be floats or
17:59 - doubles right we can we can add any
18:01 - number but for simplicity purpose and
18:04 - just going to go with it you can
18:05 - actually go to foods or doubles also it
18:08 - is completely up to you I am just going
18:10 - to go with indoor in this so I'm just
18:13 - going to type int and then I need to
18:15 - name the location we need to do some
18:17 - meaningful name so this is also known as
18:20 - a variable declaration we are just
18:22 - creating a variable to store something
18:28 - function right so we are just going to
18:30 - put X equal to 5 just means the variable
18:33 - access storing the value 5 but in
18:36 - computer this is what is happening you
18:37 - if you are declaring a variable it is it
18:41 - means that you are actually creating a
18:42 - memory block and then assigning your
18:44 - name do that so it's just like an alias
18:47 - for the memory block so here I am just
18:50 - going to name it number just to keep it
18:52 - simple and here you can either you can
18:54 - do two things you can either specify the
18:56 - value which is going to go inside the
18:57 - memory location or else you can even now
19:00 - keep that so here since I don't know
19:03 - what is going to go inside this location
19:04 - I am just going to skip it an entire
19:06 - semicolon this means that this command
19:08 - is terminated selecting this comment and
19:15 - now how do you get the input it is just
19:18 - the reverse of it you get it right if it
19:20 - is C or it is going to be C in and then
19:23 - if it is this side this is going to be
19:25 - on the opposite side well this is how we
19:28 - take input and then in we do it need to
19:31 - store the input we need to store it in
19:33 - this location so just right number one
19:35 - and then put a semicolon so we got our
19:37 - input inside number location same thing
19:41 - we need to do for the next number also
19:44 - so I'm just going to copy paste that and
19:47 - here instead of first number and the
19:49 - second number and then sort of nonporous
19:52 - points to us or ensure of number I'm
19:55 - going to store it and num2 location
19:58 - now and I need the sum of these two
20:00 - numbers right so remember that I think
20:03 - that he put number so you can directly
20:05 - show the sum like this so you can write
20:07 - the sum is and this one and this what
20:12 - was that number one plus num2 you can't
20:15 - actually put like this but this actually
20:18 - makes it little bit confusing and it is
20:20 - all this advice to keep your code very
20:22 - very understandable
20:24 - so if somebody is reading your code they
20:26 - should understand what is going on so
20:28 - this is not always a best practice
20:30 - unless you're in copy to company to
20:32 - programming you need to consider all
20:33 - memory and all those things but we are
20:36 - now learning so it is always at best to
20:38 - use as many variables we want so for
20:42 - storing the sum I am just going to go
20:44 - with an integer so because if we add two
20:46 - integers only going to get an integer
20:48 - wait well I'm not talking about the
20:50 - border cases where you go with very big
20:52 - numbers like 2 4 32 plus 2 power 32 that
20:55 - is obviously going to go off the range
20:57 - of integers but I'm just talking about
20:59 - normal cases I'm just going to store it
21:02 - inside this location Sun and what it is
21:05 - going to store it is going to store the
21:07 - value of num1 plus num2 and i am going
21:10 - to invoke the sum over here so remember
21:13 - in the previous video I told that memory
21:16 - locations and numbers can be accessed
21:17 - without double quotes that is why I put
21:20 - some and now if I execute it here we
21:24 - have our first program of addition this
21:27 - is our first useful program it is not
21:28 - just printing something on the disparate
21:30 - it is actually doing something for us so
21:33 - here I am going to enter the first
21:34 - number it is well second number let's
21:38 - say something like 24 and then if I
21:40 - enter it the sum is 36 perfect 12 plus
21:43 - 24 is 36 we got our answer yeah I forgot
21:47 - to mention the way we check size of the
21:51 - data type is by the operator called size
21:54 - of so how we do that we just put size
21:56 - and then put an off and inside the
22:00 - brackets you are going to name your data
22:01 - type user either put the data type or
22:03 - you can put the data itself
22:05 - if I just put one over here and let me
22:08 - put an end also that compile your
22:13 - statements so here you are going to get
22:15 - for why because one is an integer as I
22:19 - told you it is going to be treated as an
22:21 - integer only and if I just put one point
22:24 - zero as I told you it is going to be
22:27 - defaulted to double that is why the size
22:29 - is eight and now if I put one point zero
22:32 - f it is going to be Tressa float and you
22:35 - will be getting only four bytes so that
22:38 - is how size of works and now if I just
22:41 - put a character it is going to take only
22:43 - one byte so if I just put like this you
22:45 - have don't want to save one over here
22:47 - and then you even find nine character
22:49 - that is I'm not putting any character
22:51 - these are just two cords side by side
22:55 - even if I run this I will be that I will
22:57 - be getting an error it says empty
22:58 - character constant that cannot be done
23:00 - another thing is if we just put one
23:02 - character in inside double quotes let's
23:05 - see what happens in single quote this
23:07 - written one right so what will happen in
23:09 - the double quote well I she told listing
23:12 - is nothing but a collection of character
23:14 - so maybe it will be the count of the
23:16 - characters right so something like oh
23:18 - hello we just put hello then this is
23:22 - actually five characters right hele loop
23:24 - makes finiteness of the sides would be
23:26 - five right but you'll be surprised to
23:28 - the size will be six so that is why I
23:32 - told you strings are something more than
23:34 - just collection of characters there is
23:36 - something called a concept of
23:37 - eliminating character or a null
23:38 - character we'll be talking about that in
23:41 - the been discussing strings that's all
23:43 - for this video
23:44 - in the next video we'll be talking about
23:46 - strings and how to use them in our
23:49 - program till then I would like you to
23:53 - actually metal around with the code I
23:55 - would like you to do as many errors as
23:57 - possible and try to read these errors
23:59 - errors are very very important to you
24:02 - just try to you know that this is going
24:06 - to result in an error but what is
24:09 - important to us this message because
24:10 - every time it is not going to give you a
24:12 - perfect message something if I have
24:15 - something like this I just forgot a
24:17 - semicolon over here
24:18 - put something like let's say hi over
24:23 - here and put a semicolon and if I try to
24:25 - compile it it is going to show an error
24:27 - in this land it says in line number
24:29 - eight it is expected it expected a
24:33 - semicolon before see out statement but
24:35 - there is a semicolon statement where is
24:37 - the error it is actually in the previous
24:39 - line I forgot to put the semicolon in
24:41 - this line so that is where you make as
24:43 - many errors as possible and try to
24:45 - understand these line these are very
24:47 - very important it is going to help you
24:48 - to write better code you you won't find
24:51 - yourself trying to figure out where it
24:55 - happened since I am writing this real
24:56 - time I did not practice anything out of
24:58 - it so many times I will also be making
25:00 - mistakes and I will be telling you what
25:02 - mistakes I made by reading this error so
25:05 - till then happy