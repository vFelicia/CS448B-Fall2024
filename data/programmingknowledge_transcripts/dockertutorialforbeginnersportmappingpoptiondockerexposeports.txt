00:00 - hey guys welcome to the next video on
00:02 - docker tutorial for beginners
00:05 - in this video we are going to see how we
00:06 - can do
00:08 - port mapping between your docker
00:10 - container and your host
00:12 - machine so let's say you have some kind
00:14 - of
00:15 - server and that server listens
00:18 - on some particular port so
00:22 - you need to expose your
00:26 - port from your docker container so
00:29 - the outer world will be able to
00:32 - interact with your server so in this
00:36 - video we are going to take an
00:37 - example of a node js
00:41 - server the same concepts you can
00:44 - apply on any other kind of server it can
00:47 - be
00:47 - a nginx server it can be a python flask
00:51 - or a django server or any other kind of
00:54 - server
00:55 - so let's start with our example of
00:58 - dockerizing our node.js
01:00 - web app so what i'm going to do
01:03 - is i'm going to just create a new
01:07 - directory for me so i'm going to just
01:09 - write mkdir
01:12 - d4 and then i'm going to go inside
01:15 - that d4 directory
01:19 - and here i'm going to create a new node
01:22 - js app so for initializing my app i'm
01:25 - going to just write
01:26 - npm init and then
01:30 - hyphen y and then press enter which is
01:32 - going to create
01:34 - a package.json file inside
01:37 - my d4 folder now
01:40 - for this node.js server i will be using
01:44 - express so i need to install express
01:47 - locally for this app
01:50 - so if you already know something about
01:54 - node.js or npm you can easily install
01:59 - the npm package using npm
02:02 - ins tall and the package name
02:05 - in our case it's express which is a very
02:09 - popular node.js package
02:12 - or npm package so i'm going to just
02:14 - write
02:15 - express here and then i'm going to
02:18 - give this save flag here so it's going
02:22 - to be installed
02:23 - inside my directory and this
02:26 - express will be added a as the
02:29 - dependency in my package.json file
02:32 - so let me press enter which is going to
02:35 - install
02:36 - this express package
02:39 - in my directory you can see this new
02:43 - directory is created which is node
02:45 - modules
02:46 - and this new dependency is added in my
02:51 - package.json which is express so now
02:54 - let's create our
02:55 - server.js file so if you can see in our
02:59 - package.json file
03:02 - the main entry point right now is the
03:05 - index.js you can
03:06 - change it to uh server.js
03:10 - and let's create this uh server.js
03:14 - file server.js here and then press
03:19 - enter which is going to create this
03:21 - server.js file
03:23 - so we are going to write a very simple
03:27 - node.js code which is going to use
03:29 - express
03:30 - and it's going to just print hello world
03:33 - whenever
03:34 - somebody uh will make a get request
03:38 - to this server so i'm going to just uh
03:42 - copying and pasting this code because
03:44 - this code is available
03:47 - everywhere and it's very simple so what
03:50 - i have done
03:51 - i have just imported this express
03:55 - and then i have created these two
03:56 - variables one is the port variable which
04:00 - will be exposed
04:02 - via a browser or via the
04:05 - rest request and then we have the
04:10 - host here which is basically the local
04:12 - host
04:13 - and we have one get request here so
04:16 - whenever somebody makes a get request to
04:19 - the server
04:20 - we are going to just send hello world so
04:23 - very simple uh
04:24 - node.js server code and we are going to
04:27 - run this code let me clear
04:28 - this terminal so i'm going to just write
04:31 - node
04:31 - and the name of my server file which is
04:36 - server.js and when i just
04:39 - run this server.js using node.js
04:43 - it's running like this and it's printing
04:46 - on which host and ports it's
04:49 - running so let's open our browser and we
04:52 - are going to
04:53 - just open this url which is
04:58 - 0.0.0.0 uh colon
05:00 - the port number on which we have started
05:02 - this node.js server
05:04 - and i i'm going to just press enter and
05:07 - it
05:07 - just prints hello world which is the
05:10 - expected result
05:11 - right so now we want to dockerize our
05:16 - node.js server so let's see how we can
05:19 - dockerize our node.js server so for
05:22 - that i'm going to just close this
05:25 - app or stop this app and now i'm going
05:28 - to create
05:29 - a new docker file so let's just create
05:32 - this docker file
05:34 - by just uh giving this command which is
05:37 - docker file now i'm going to go inside
05:40 - my docker file
05:42 - and here inside my docker file
05:45 - i'm going to use the node base image
05:49 - so when you go to the docker hub there
05:51 - is
05:52 - an official base image for node.js
05:56 - and that's what we are going to use so i
05:58 - am going to just write
05:59 - from and the base image will be node
06:03 - and the version of node we are going to
06:05 - use is
06:06 - version 12. so you can use
06:09 - the latest tag also here which is going
06:12 - to give you the latest
06:13 - version now in the next step i'm going
06:16 - to define the working
06:18 - directory using the work
06:21 - their keyword and we are going to
06:25 - uh define this work there in the
06:29 - user forward slash src
06:32 - for slash app folder
06:35 - and now this should be work data right
06:39 - so like
06:42 - this okay so we have defined
06:45 - our working directory inside this
06:48 - working directory we are going to
06:49 - uh copy our code and then we are going
06:53 - to
06:53 - do all the stuff now uh let's
06:56 - copy all the files which are there in
07:00 - our current
07:02 - folder to this docker image so
07:06 - we are going to use the copy keyword to
07:09 - copy
07:09 - uh all the files but first of all we
07:12 - need to
07:13 - copy the package.json
07:16 - to the container so that we will be able
07:19 - to run the
07:20 - npm install command and npm install
07:24 - command
07:24 - what it does it just installs all the
07:28 - dependencies
07:29 - into uh our container right so
07:33 - let's first of all copy the package
07:36 - dot json file so we are going to copy uh
07:39 - the package
07:40 - log dot json file and package dot
07:44 - json file so these two files are
07:47 - responsible for
07:48 - all the dependencies to this uh
07:50 - directory
07:51 - right so now we have copied the package
07:55 - json files so next step is
07:58 - to install all the dependencies using
08:01 - npm install
08:02 - so you can just give this command run
08:05 - npm ins tall
08:09 - now if you are working in the production
08:13 - environment this command can be little
08:16 - bit
08:16 - different let me just write this in the
08:19 - form of comment
08:20 - so you can just write run and pm
08:24 - ci and then you can give this
08:28 - only production flag production
08:31 - okay so if you are working in the
08:33 - production environment you can give this
08:35 - command
08:36 - if you are working in the development
08:38 - environment then you can
08:40 - just do uh this command so npm install
08:43 - will
08:44 - install all the dependencies and in our
08:46 - case there is only one dependency which
08:49 - is
08:50 - express right so via this npm install
08:54 - this express npm package will be
08:56 - installed
08:57 - in our docker image now
09:01 - in the next step once uh all the
09:04 - dependencies
09:05 - will be installed we are going to just
09:07 - copy
09:08 - all the files which are there in
09:12 - our server code so we only have
09:15 - this one file which is server.js but
09:18 - let's say you have
09:19 - many modules and many files inside your
09:23 - node.js projects so i'm going to just
09:26 - write copy and then i'm going to
09:29 - copy all the files and folders which are
09:33 - there
09:33 - in the current directory okay
09:36 - now next step is important and
09:40 - this step is we are going to expose
09:44 - our port so i'm going to just write
09:47 - expose and we are going to expose
09:51 - the port which uh we are using in our
09:55 - server so we are using
09:57 - uh port 8080 in our server so we are
09:59 - going to expose this port this means
10:02 - that we want to expose port 8080
10:06 - into our docker container so this
10:09 - exposed keyword means that we want to
10:12 - expose
10:13 - port 8080 from our container to
10:16 - the outside world for example to our
10:19 - host
10:20 - machine and this expose is a way of
10:24 - documenting so it's not
10:26 - going to publish your port
10:29 - at runtime it's just a way of
10:32 - documenting in your docker file
10:35 - that you intend to expose this
10:39 - port 8080 in
10:42 - your docker container so exposing port
10:46 - using this exposed keyword is a way of
10:49 - documenting
10:51 - which port are used but it does not
10:54 - actually
10:55 - map or open any port we are going to
10:58 - open and map the port using
11:01 - the docker run command and we are going
11:04 - to use
11:05 - a different flag for publishing our port
11:09 - or
11:09 - opening or mapping our port later
11:13 - when we uh just build and run our our
11:16 - dockercon now the next step here
11:20 - will be to run our node.js application
11:23 - and we all know uh that we just need cmd
11:28 - and then inside our square brackets we
11:30 - will just write
11:31 - npm and then we are going to just give
11:35 - this comma and then we are going to give
11:38 - the name of our
11:40 - server.js file so this will be
11:43 - server dot js
11:47 - now here one interesting point to note
11:50 - here is
11:51 - when we are going to copy uh all the
11:54 - files and
11:55 - folders from our current directory
11:58 - to the docker image you can see i have
12:02 - used
12:02 - dot dot that means it's going to copy
12:05 - node
12:06 - modules also into your docker image
12:10 - and we have already installed our uh
12:13 - node packages using this npm install
12:16 - so this is going to overwrite uh this
12:19 - node modules folder
12:21 - from your image
12:24 - right so to avoid copying your node
12:28 - modules
12:29 - uh into your docker image
12:32 - you can create a docker ignore file so
12:35 - this docker ignore file
12:37 - is going to prevent your local node
12:39 - modules
12:40 - or your debug logs from being copied
12:44 - into your docker image
12:46 - so let's uh just create this
12:49 - docker ignore file so to
12:52 - create this docker ignore file you can
12:55 - just
12:55 - write touch dot docker ignore
13:00 - in the same format which i have used so
13:03 - this format is recognized by docker
13:07 - and whatever you write inside this
13:11 - docker ignore a file so let's create
13:13 - this docker ignore file first of all so
13:15 - we have created this docker ignore file
13:18 - and we want to exclude the
13:21 - npm modules and npm
13:25 - debug.log file
13:28 - from copying into our image so this
13:31 - means
13:32 - that we have added npm modules
13:35 - and the npm debug log file
13:39 - uh which will be excluded when we are
13:41 - going to copy
13:42 - the files from our local container to
13:46 - the docker image
13:47 - okay so this will avoid the overwriting
13:50 - of
13:51 - our npm modules now we are done
13:54 - and we can build our image so let me
13:58 - clear this terminal so now let's build
14:00 - our
14:01 - image by giving the docker build command
14:04 - so i'm going to just write sudo
14:07 - docker build
14:10 - hyphen t and then the image
14:14 - name so let's say i'm going to just give
14:16 - the name
14:17 - node underscore test
14:21 - colon the tag you can give any tag
14:24 - to your image so let's say i'm going to
14:27 - give
14:28 - 1.0.0 or tag to my image
14:31 - and then the context and then press
14:34 - enter
14:35 - which is going to just build this image
14:38 - and in few seconds this image
14:42 - will be created so let me clear this
14:44 - terminal once again
14:46 - and let's list out all the images so
14:49 - sudo docker
14:53 - images and when you see
14:56 - here our docker image is created with
14:59 - the tag 1.0.0
15:02 - 15 seconds ago okay so now
15:06 - we are going to run our container so to
15:09 - run our container we can
15:11 - just use a sudo docker
15:15 - run so as i told you we want to expose
15:17 - this port
15:18 - 8080 so that the server
15:22 - can listen to the request from
15:25 - the outside the container right so in
15:28 - order to
15:28 - map uh the port we use the
15:32 - flag which is called hyphen p which is
15:35 - also called publish and hyphen p
15:38 - is a way of mapping a host port
15:42 - to a running container port
15:45 - so this is our running container port
15:48 - and let's say we want to map this
15:52 - port which is running inside the
15:54 - container to
15:56 - our local host machine
16:00 - and we want to let's say give the
16:03 - port 3000 in our localhost machine
16:06 - and which is going to be mapped
16:10 - to port 8080 so if you specify
16:13 - this expose the port
16:16 - and if you specify this publish flag to
16:19 - map
16:20 - the ports then the service in the
16:22 - container is
16:23 - accessible from anywhere even outside
16:26 - the docker so this means that we want to
16:30 - expose port 8080 from our container
16:34 - to the port 3000 inside
16:37 - our host machine and now let's
16:40 - give the name of our image which we want
16:43 - to run
16:44 - which is node underscore test
16:47 - colon 1.0
16:50 - okay and let's uh run this
16:54 - docker container and this gives me error
16:56 - and
16:57 - the error is obvious because instead of
17:00 - using
17:01 - npm i should have used node
17:04 - okay because we have started our server
17:06 - using node command
17:08 - not npm npm we used just for installing
17:12 - our packages and managing our packages
17:15 - right
17:15 - so let's rebuild our image once again
17:18 - and once our image is rebuilt we are
17:21 - going to just
17:22 - run our container so now our container
17:26 - is running and we can see the same
17:28 - output now we might
17:31 - be confused or you might be confused
17:34 - that
17:34 - we are exposing uh the port 8080
17:37 - and when we uh go uh on this
17:41 - url on our browser so let's go to this
17:45 - url on our browser and let's see
17:47 - if it works or not so it's not going to
17:49 - work because we have
17:51 - mapped the port 8080 to
17:54 - the port 3000 on our local machine so
17:58 - this is
17:59 - the port on the container
18:02 - on your docker container and this is the
18:05 - port
18:06 - which uh it will listen on your local
18:09 - machine so we want to listen
18:11 - on port 3000 on our uh
18:14 - host machine so instead of port 8080
18:18 - you can give port 3000 and it's going to
18:22 - print hello world
18:24 - right this is how this port mapping work
18:27 - so this will be the port uh
18:30 - which will be available on your local
18:33 - host
18:34 - and this is the port you have exposed
18:38 - inside your docker container so let me
18:41 - just
18:42 - stop this container so i'm going to go
18:44 - to the
18:45 - next terminal and i'm going to just
18:47 - write
18:48 - sudo docker ps
18:51 - to list out all the running
18:55 - containers and this container is running
18:57 - so i'm going to just use the
18:59 - container id from here just copy the
19:02 - container id
19:03 - and then sudo and then the container id
19:07 - which is going to stop
19:08 - this container now this container is
19:11 - stopped and you can see uh in this
19:14 - terminal also
19:16 - that we are out of the container right
19:20 - so now let's say let me just uh clear
19:23 - this terminal
19:24 - and now let's say we want to map to the
19:27 - port 8080
19:28 - itself on our host machine also
19:32 - from our docker container so
19:35 - this is the port on the docker container
19:38 - and we want to map
19:39 - this port to the same port on our host
19:43 - machine
19:43 - if it's available then it's going to run
19:46 - fine
19:46 - so let's run this command and now
19:49 - this time when you go to the browser
19:53 - on port 3000 obviously you will not get
19:56 - anything
19:56 - because we have mapped uh the port 8080
20:00 - to our host machine now and now
20:04 - when you give port 8080 it's going to
20:07 - give you hello world
20:09 - if you want to run this server in the
20:11 - detached
20:12 - mode as i have told you you can use
20:14 - hyphen d
20:16 - so that this node.js will run in the
20:18 - detached mode that means
20:20 - it will run in the background so this is
20:23 - how you can expose
20:25 - the http port you can also expose
20:28 - the tcp port and the udp port
20:32 - from your docker container so let me
20:35 - uh just stop this container so i'm going
20:38 - to
20:39 - just stop this container first of all
20:42 - and let me show you how you can expose
20:44 - the udp
20:45 - and the tcp ports so let's say
20:49 - you are running uh application
20:52 - and in this application you are doing
20:55 - some tcp communication
20:57 - or the udp communication so for mapping
21:00 - the tcp
21:01 - port and the udp port
21:04 - you can use the flag hyphen
21:08 - p and then you can use this kind of
21:11 - notation
21:12 - so the port which you want to expose
21:15 - from your container let's say i'm just
21:17 - exposing port 80
21:19 - and forward slash tcp so in case
21:23 - you want to expose the tcp port you just
21:25 - need to uh
21:27 - write forward slash tcp after
21:30 - the port which you want to expose from
21:33 - your container
21:34 - and this will be the port you want to
21:37 - expose
21:38 - to the host machine so this port will be
21:42 - available
21:43 - on your host machine from
21:46 - this port to your container so this is
21:48 - the mapping right
21:50 - for udp you just write forward slash udp
21:53 - right so the flag is hyphen
21:56 - p you just need to write forward slash
22:00 - tcp or forward slash udp to expose
22:03 - the udp or the tcp flag
22:07 - you can expose multiple ports also by
22:10 - using this
22:11 - hyphen p flag so it's not
22:16 - that you just can use only one
22:19 - hyphen p flag you can use multiple
22:21 - hyphen p
22:22 - flags to expose multiple ports from your
22:25 - container
22:26 - to the host machine
22:30 - so this is how port mapping works in
22:33 - a docker i hope you haven't understood
22:35 - this
22:36 - concept and i hope you enjoyed this
22:38 - video and i will see you in the next
22:41 - video