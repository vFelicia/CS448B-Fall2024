00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in the
00:04 - last video we have seen how to use
00:06 - composition between classes in Python in
00:09 - this video I'm going to show you how to
00:12 - use class aggregation between classes in
00:16 - Python now if you haven't watched my
00:18 - last video in which I have shown you how
00:21 - to use class composition in Python I
00:24 - will highly recommend you to watch that
00:27 - video because I will be using the same
00:29 - code to demonstrate how aggregation
00:34 - works in Python so in the last video we
00:37 - have created two classes one is an
00:40 - employed loss and other is the salary
00:43 - class and then we have used the celery
00:46 - class inside the employee class and we
00:50 - have seen how composition works in
00:52 - Python so employee class is delegating
00:56 - some part of its responsibilities to the
00:59 - celery class and that is called the
01:01 - composition now in composition the
01:04 - relationship between the classes which
01:07 - have some association is represented by
01:10 - a key word part of so celery is the part
01:14 - of employee so the key word we use in
01:17 - composition is part of now let's see how
01:21 - we can use aggregation instead of
01:23 - composition between these two classes so
01:27 - let's say I will not use this salary
01:29 - class inside the employee class but what
01:33 - I'm going to do is I'm going to pass an
01:35 - instance of celery here so I'm going to
01:38 - just write celery and this will be the
01:42 - object of celery class which I'm going
01:45 - to pass in the init method of the
01:50 - employee class so let's create an object
01:53 - of the celery so I'm going to just write
01:57 - salary here
01:58 - is equal to the salary class and we will
02:01 - instantiate the celery class by these
02:05 - two argument which we have given in the
02:07 - last video to the employee class so I'm
02:10 - going to just copy these two arguments
02:12 - and pay
02:13 - it here and I'm going to remove this
02:15 - comma here so now what we are doing here
02:18 - is we are first of all instantiating the
02:21 - salary class and now the salary class we
02:24 - can pass to the constructor of the
02:27 - employee class and this is the object
02:30 - which we have passed using the salary
02:33 - class object and then I'm going to take
02:35 - the salary class object and I'm going to
02:37 - assign the salary class object to the
02:39 - member variable of the employee class
02:42 - which is obj underscore salary now
02:45 - because we are passing the salary object
02:48 - that means this member variable is the
02:50 - salary member object and we can call any
02:53 - public method from the salary class
02:55 - using this member variable now so let's
02:58 - run the code and let's see what happens
03:00 - and we get the same result as we have
03:02 - seen in the last video in the
03:04 - composition example so what we have done
03:07 - differently here so instead of using
03:10 - this salary class inside the employee
03:12 - class we have first created an instance
03:16 - of the salary class and then we have
03:18 - passed this instance to the employee
03:21 - constructor which can be used inside the
03:24 - employee class and this type of
03:27 - relationship is called aggregation now
03:29 - let's see what are the special
03:31 - properties of the aggregation the first
03:34 - property is the relationship between the
03:38 - associated classes in aggregation is
03:41 - defined by the keyword has a so employee
03:45 - has a salary because now we are first of
03:48 - all creating the salary object and then
03:51 - passing it to the employee so now we are
03:54 - not directly using salary inside the
03:57 - employee class the second property of
03:59 - aggregation is the associated classes
04:02 - have uni-directional Association so we
04:07 - are just passing salary object to the
04:10 - employee class we are not passing
04:13 - employee object to the salary class so
04:16 - it's a unidirectional Association only
04:19 - salary can be passed to employee not the
04:23 - other way around and the third property
04:26 - of aggregation
04:27 - we have created the celery object and
04:30 - the employee object so both these
04:32 - objects are independent of each other
04:35 - so if one object dies the other survived
04:39 - so both the object are able to survive
04:42 - individually so these are the three
04:44 - properties of aggregation now let's see
04:47 - the difference between the composition
04:49 - and the aggregation so I'm going to
04:51 - split the screen so I'm going to just
04:53 - right click on this tab and I will say
04:56 - split vertically and here I'm going to
04:59 - open the example of the composition so
05:03 - on the right hand side I have the
05:04 - example of composition and on the left
05:06 - hand side I have the example of
05:08 - aggregation let me just maximize this so
05:12 - you can see it and now let's discuss
05:14 - about the differences between the
05:17 - composition and aggregation so the
05:21 - relationship in composition is defined
05:24 - by a keyword called part of so salary is
05:29 - the part of employee in aggregation
05:33 - there is no part of relationship but the
05:37 - relationship is defined by the keyword
05:39 - called
05:40 - has a so now in aggregation we are
05:42 - defining the instance of salary and then
05:45 - passing it to the employee class and
05:48 - salary is not the part of the employee
05:51 - class we are just passing it to the
05:54 - employee class so aggregation we use has
05:57 - our relationship and in composition we
05:59 - use part of relationship the second
06:02 - difference is when you delete the
06:05 - employee object the salary object will
06:09 - be automatically be deleted so salary
06:13 - object is dependent on the employee
06:16 - class but in aggregation the salary
06:20 - object and the employee object are
06:22 - individually independent so they can
06:25 - survive individually if one object dies
06:28 - then it doesn't matter that the other
06:31 - object dies because we have created
06:33 - these object individually now in
06:36 - composition both salary and employee are
06:39 - interdependent or
06:40 - each other but in aggregation the
06:43 - relationship is unidirectional so the
06:47 - association between the employee and the
06:50 - salary object is unidirectional we can
06:53 - only pass the salary to the employee
06:56 - class but we cannot pass the employee
06:59 - object to the salary class so these are
07:02 - the three major differences between
07:04 - composition and the aggregation I hope
07:07 - you have learned something new this time
07:10 - and I will see you in the next video