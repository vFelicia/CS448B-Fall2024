00:00 - in the previous two videos we have
00:01 - covered uh operators and
00:04 - the data type conversion so in this
00:07 - video
00:08 - we will be covering the string and the
00:10 - string templates
00:12 - so what is basically a string so a
00:14 - string is a sequence of characters
00:18 - okay uh so i'll go ahead and
00:22 - make a function
00:24 - in which
00:26 - i'll
00:26 - mention a
00:28 - variable a
00:30 - and
00:32 - give it a value this is a
00:37 - coder exclamation mark okay
00:39 - so uh
00:41 - this is a coder and with three spaces
00:44 - and an exclamation mark comprises
00:47 - uh the these all character comprises a
00:50 - string okay so remember string is always
00:54 - quoted in double quotes
00:56 - okay
00:57 - and the space and the punctuation are
01:00 - also characters which are part of the uh
01:04 - string
01:06 - so uh
01:08 - the first
01:09 - character in the string has an index 0
01:13 - okay so in this string the t has a
01:16 - character 0 has an index 0 okay so as we
01:20 - move forward with the string so this is
01:22 - a coder
01:24 - the index increases by one okay and each
01:27 - and every space and each and every
01:29 - punctuation mark has its own index
01:32 - okay so when i mention the index and the
01:35 - string
01:36 - just one above the other and mention it
01:39 - in a table so that is called an index
01:41 - table
01:42 - okay so i have just mentioned the part
01:45 - of index table here
01:47 - okay so uh it's it says that which
01:51 - character has what index okay
01:54 - so in this the c character has a index
01:58 - of 10
01:59 - okay
02:01 - so this is the basic about string we
02:04 - know we already know how to initialize a
02:06 - string okay so there is also a
02:09 - second method here second we can say
02:12 - that it is a second
02:14 - method to initialize a string we can do
02:17 - that string variable b string we we will
02:20 - mention the data type of
02:22 - that string beforehand
02:24 - okay we can do that also
02:27 - so we can define the string in two ways
02:30 - okay
02:31 - so
02:32 - we will be covering
02:34 - most of the string functions in the
02:36 - later part of video but i will be
02:38 - mentioning one string function in this
02:40 - video
02:42 - that is the length function so uh
02:45 - remember
02:46 - this a string having index from 0 to 15
02:49 - has a length of 16 okay it has 16
02:53 - characters in it
02:54 - including 0 okay so uh what if i have to
02:58 - uh
02:59 - like i have a value
03:01 - i that stores the uh
03:04 - the store the length of
03:06 - string a
03:08 - so
03:09 - i'll just mention
03:11 - a dot length
03:13 - okay
03:14 - and this
03:16 - this length function measures the length
03:18 - of any string
03:20 - so i will go ahead go ahead and print
03:23 - the value of
03:25 - i
03:27 - so when i run this program i expect the
03:30 - result to expect the output to be 16
03:35 - okay
03:40 - so
03:42 - yeah
03:42 - so the output is 16 so the length of
03:46 - string a is 16
03:48 - okay so what if i have to uh mention i
03:52 - have to
03:53 - get
03:54 - the output as the
03:57 - length
03:59 - of the
04:01 - string
04:03 - is
04:05 - 16 okay so i have to print this
04:08 - statement
04:09 - and
04:12 - that
04:13 - value here is i
04:14 - so what i can do is i can uh go ahead
04:17 - and write a print statement which
04:19 - contains a string
04:21 - that
04:23 - the string is
04:24 - the value of string is okay the value of
04:27 - the length of string is
04:29 - so i'll just go ahead and print this
04:32 - okay the length of string and then what
04:35 - i can do is i can in the next line i
04:38 - will mention a println statement and
04:39 - that contains i
04:43 - okay
04:44 - so when i go ahead and run this program
04:48 - what i will find in the output is
04:51 - the output will be the length of string
04:53 - is 16 but it but don't you think it's a
04:56 - little bit lengthier
04:58 - and there must be a shorter way so you
05:01 - are thinking right
05:02 - so uh what i'll do here is i can use
05:06 - string
05:07 - function string template here so string
05:09 - template is nothing but a dollar sign
05:11 - okay so what is a string template so uh
05:15 - while
05:16 - mentioning a string
05:19 - what i can do is
05:21 - i can so i will just mention it println
05:25 - yeah so after the uh mention after the
05:29 - uh
05:30 - the string i have to put inside the
05:32 - string the value of i
05:34 - so what i can do is i can just put the
05:37 - dollar sign and i
05:38 - okay when i hover over it
05:40 - it says
05:43 - valley very value i int okay
05:47 - so it has the value of i so when i go
05:50 - through this line it will print the
05:52 - string the length of the string is and
05:55 - inside the string it has the value i
05:58 - so before
05:59 - so it does not print the length of the
06:01 - string is dollar i dollar sign i it does
06:03 - not print that what i print is we will
06:06 - see when i run this program
06:08 - okay
06:09 - so
06:10 - uh
06:12 - yeah it prints the the length of string
06:15 - is
06:16 - and
06:17 - instead of dollar i it puts just the
06:19 - value of i
06:20 - okay
06:21 - so what if i have to uh
06:24 - print i have i have not defined of any
06:27 - value i okay
06:29 - and i have to print the
06:31 - length so i have not defined i'll just
06:34 - make this go
06:35 - and
06:37 - yeah
06:37 - so now what i will do
06:40 - i have a string and i have to print its
06:43 - value
06:44 - and inside the string
06:47 - i have a
06:49 - i can i can do one thing i can just go
06:52 - and
06:53 - instead of
06:54 - print ln i'll do here print and in the
06:58 - next line what i can do is i can go
07:00 - print ln and here put i can put a dot
07:04 - length
07:05 - okay so when i run this program it will
07:08 - be giving an output the length of string
07:10 - is a dot length and which is 16
07:13 - okay
07:15 - so it is correct but now
07:17 - here also it is uh redundant and uh
07:20 - more of code like more lines are used it
07:24 - is redundant because we are using the
07:25 - print function twice
07:27 - so in cotline we don't do that so what i
07:29 - will do is
07:31 - i can
07:32 - use the string template here also but
07:35 - but when i use the string template
07:38 - without any
07:40 - something
07:41 - so what happens is i'll mention just a
07:44 - dot length so it automatically uh
07:47 - insert it into curly braces okay so i
07:51 - was trying to establish my point here
07:53 - the point was that
07:56 - whenever there is an expression
07:58 - in a string template we put it inside a
08:01 - curly brace okay so when i run this
08:03 - program
08:04 - it
08:05 - automatically puts the length of string
08:08 - a
08:09 - inside this template and we have the
08:12 - output as the length of string is 16
08:16 - okay
08:17 - so that's all for this video in the next
08:20 - video we will be covering uh the various
08:22 - type of string functions that are
08:23 - available in kotlin
08:25 - thank you very much