00:00 - hey guys welcome to the next video on
00:02 - open CV tutorials for beginners using
00:04 - Python in the last video we have started
00:07 - our simple project of detecting lane
00:09 - lines on the road using open CV and we
00:13 - came to the point where we were able to
00:15 - define our region of interest and our
00:18 - result was looking like this so let me
00:21 - run this project so we have defined this
00:25 - region of interest and now the only
00:28 - thing which remains here is to detect
00:31 - these Lane lines so we will once again
00:36 - go to the next step and the next step
00:39 - will be to find out the edges and then
00:44 - we are going to apply half line
00:46 - transform to draw the lines so first
00:50 - thing first what I'm going to do is I'm
00:52 - going to just move this region of
00:54 - interest function which we have created
00:55 - in the last video on the top of this
00:59 - script so we can see this other code
01:02 - clearly this code which we have written
01:05 - so we have this region of interest
01:09 - function which we have created then we
01:13 - have just created this region of
01:15 - interest variable and then we just used
01:18 - our region of interest function using
01:22 - this region of interest vertices
01:24 - variable so the next step as I said is
01:27 - to find out the edges and for that we
01:31 - need to first convert our image into our
01:35 - greyscale image so I'm going to just say
01:38 - gray image and then we all know how to
01:43 - find out the gray scale image out of an
01:47 - image so we just need to write CVT color
01:50 - and the source is our cropped image so
01:54 - we are going to past our cropped image
01:56 - and then we are going to just convert it
01:59 - into a grayscale image using C v2 dot
02:03 - color underscore rgb2 gray so let's do
02:10 - this so once we got our grace
02:13 - we can apply Kennish detection on this
02:16 - image so I'm going to just write canny
02:19 - image and then I'm going to just say CB
02:24 - 2 dot canny which is the function which
02:28 - we want to use which takes few parameter
02:30 - first parameter will be our grayscale
02:33 - image the second parameter will be the
02:36 - first threshold and the second threshold
02:38 - so generally we are going to take here
02:41 - 100 as the first threshold and 200 as
02:45 - the second threshold now in the next
02:50 - step we are going to just display this
02:54 - image on our matplotlib window and let's
03:00 - see what happens once we apply this
03:03 - canny edge detection method on the image
03:05 - so now you can see this result which
03:09 - detects all the edges and here you can
03:12 - see the line line edges are detected but
03:15 - there is one more thing here which is
03:19 - the edges of our region of interest are
03:22 - also detected so how to solve this how
03:25 - to remove these edges because these
03:28 - edges doesn't interest us the
03:31 - interesting edges here in this image for
03:35 - us are these edges which are of the
03:39 - lanes road leans right so to solve this
03:42 - problem we can apply this canny edge
03:44 - detection before we find out the region
03:48 - of interest so I'm going to just copy
03:49 - this code and paste it just before we
03:53 - apply this region of interest method
03:56 - which we have created in the last video
03:58 - so now in our Kenny edge detection we
04:02 - will pass the grayscale image but here
04:05 - instead of this cropped image which we
04:09 - were getting in the last step from this
04:12 - variable we directly are going to pass
04:15 - our image which we have read using the I
04:19 - am read method right so let me just
04:23 - remove all these line breaks so you will
04:26 - be able to
04:27 - see the code at once so here you can see
04:31 - I have directly passed now this image
04:35 - variable to the CVT color
04:38 - method so we get the grayscale image of
04:41 - the original image and then we apply the
04:43 - canny edge detection on the original
04:46 - image and then we are applying the
04:50 - region of interest method which we have
04:52 - created in the last video now because we
04:56 - are applying this region of interest
05:01 - method on the grayscale image or the
05:04 - edge detected image therefore we don't
05:08 - need this channel here so we can comment
05:12 - out this code which was kind counting
05:15 - out the number of channels and for the
05:19 - grayscale image and the canny as
05:22 - detected the image we just take this
05:24 - match mask color as 255 because it's
05:27 - only one color right we don't need any
05:31 - color channels here because we are just
05:33 - passing the grayscale image which has
05:35 - only one color so that's why we don't
05:38 - need any channel because there will be
05:40 - only one Channel and that's why I have
05:43 - commented this code and the value of the
05:46 - match mask color will be 255 now once
05:50 - you do that let's try to run this code
05:52 - and let's see what happens once again we
05:56 - need to load the cropped image not the
05:58 - canny image so just replace this
06:01 - variable here in the I am show method
06:05 - and let's run this code once again so
06:07 - you can see now there is some mistake
06:11 - here because we were expecting the edge
06:14 - detected image and we are getting this
06:16 - image so let's see what's the problem is
06:19 - so the problem I see here is because we
06:23 - have applied this region of interest on
06:25 - the original image which we don't want
06:27 - now we want to apply this region of
06:32 - interest on the kenia's detected image
06:34 - so we have to pass as the first variable
06:37 - of the region of interest method this
06:39 - Kenny
06:40 - as detected image not the original image
06:43 - right so once again for you you can see
06:46 - this code region of interest method and
06:48 - all this code at a one glance let's run
06:52 - the code and let's see what happens so
06:54 - now we get the better result so we have
06:57 - these edges which are detected by the
07:00 - canny edge detection for only the lane
07:03 - lines inside our region of interest and
07:06 - now it will be easier to draw the lines
07:09 - on these edges which we have detected so
07:14 - the next step will be to draw the lines
07:17 - on these edges using the half line
07:21 - transform so we have in the previous
07:24 - videos have already seen how to use the
07:28 - half line transform so I'm not going to
07:31 - go into the details so let's just
07:35 - directly jump into using that half line
07:39 - transform so what we are going to do is
07:43 - in the next line after we have got our
07:47 - cropped image we are going to just
07:50 - define a variable called lines and we
07:55 - are going to use this half line
07:57 - transform probabilistic half line
07:59 - transform method so here CB 2 dot huff
08:04 - line transform and this will be this
08:07 - method which takes few argument first
08:09 - argument will be the image so I'm going
08:12 - to pass this cropped image here the
08:16 - second argument here will be the value
08:19 - of Rho so let's provide this raw value
08:23 - variable value which will be 6 in our
08:27 - case then in the next parameter we have
08:30 - to pass the value of theta and theta
08:33 - will be equal to NP dot PI which is the
08:39 - method inside the number library so an
08:41 - NP dot pi divided by 60 so I'm going to
08:46 - pass here divided by 60 then the next
08:50 - parameter here will be the threshold so
08:53 - the threshold value we are
08:54 - going to provide here will be 160 the
08:57 - next parameter here will be lines which
09:00 - is equal to none by default so I'm going
09:02 - to provide this variable lines is equal
09:06 - to and then we are going to pass the
09:09 - empty numpy array so I'm going to just
09:12 - say numpy and P dot array and then we
09:17 - are going to just pass the blank square
09:20 - bracket here the next two parameters
09:22 - will be the min line length so let's
09:25 - provide this min line length and let's
09:29 - say we want 40 as the minimum line
09:32 - length and the max line gap so let's
09:35 - provide that also max line gap and this
09:38 - will be let's say initial value for that
09:41 - will be 25 so now after applying this
09:45 - half line transform you know that it's
09:48 - going to return the line vector of all
09:51 - the lines which are detected inside our
09:55 - image which we have provided as the
09:58 - source here so if you don't know what
10:00 - are these parameters which I'm using
10:03 - here you can see my last videos about
10:06 - probabilistic half line transform and
10:09 - you will be able to know what they
10:12 - actually mean now once we got our line
10:16 - vectors then we can draw the lines
10:20 - easily and for that we are going to
10:22 - define our next function which is to
10:26 - draw the lines so I'm going to just
10:28 - define this function with the name draw
10:32 - the lines for example and it's going to
10:37 - take few parameters so let's pass these
10:41 - parameters first parameter will be the
10:43 - image or the original image the second
10:47 - parameter will be the line vectors which
10:51 - we have found out and that's it so there
10:55 - are these two parameters we are going to
10:58 - pass here now inside this function what
11:03 - we are going to do is we are going to
11:04 - first of all copy our image so I'm going
11:07 - to just say I'm G
11:08 - is equal to NP dot copy and then we are
11:14 - going to just make a copy of the image
11:17 - variable which we are providing and then
11:21 - or you can write here copy image
11:23 - whatever I'm just just reassigning this
11:27 - copy the image to the same variable but
11:30 - you can define a new variable here for
11:32 - the copied image also now in the next
11:36 - line we are going to create a blank
11:38 - image that matches the original image
11:42 - size so the dimension should be equal so
11:46 - for this we can just say line image and
11:53 - then we are going to just say n P dot
11:56 - zeroes inside these parentheses we are
11:59 - going to provide the shape of our image
12:02 - right so you can provide the shape of
12:05 - our image using the image variable so
12:08 - first of all it's going to take the
12:10 - height and then the width and then the
12:13 - number of channels so because we know
12:15 - that this is a colored image which we
12:19 - are working with so we are going to just
12:22 - say I'm G dot shape and we all know that
12:27 - 0th index parameter here will be the
12:31 - height the second parameter I am gee
12:34 - thought shape the value add the first
12:38 - index will be the width and the number
12:41 - of channel for the colored image are
12:43 - always three so we are going to provide
12:45 - the third parameter as three here this
12:48 - is in the form of tuples I'm providing
12:50 - and the next parameter here will be the
12:53 - data type or D type so let's provide
12:56 - that D type is equal to num PI dot u in
13:00 - it okay so you int eight not unint it
13:08 - you ain't it so this will be the second
13:11 - parameter so once we have this image
13:15 - which is exactly same as the size of our
13:19 - original image we are
13:21 - going to loop around these line vectors
13:25 - and then we are going to draw the lines
13:29 - right so let's loop around these line
13:32 - vectors and draw all these lines which
13:35 - were found so for that we are going to
13:38 - use the for loop and then we are going
13:40 - to say line in lines and this lines
13:45 - variable is coming from this lines
13:50 - variable so we are going to use this
13:52 - draw lines function and we are going to
13:54 - pass this line Specter as the second
13:57 - parameter here so this is how this line
14:00 - variable is coming here so now inside
14:04 - this for loop we are going to just
14:08 - define one more for loop because this
14:11 - line is going to give us four parameters
14:15 - which is the coordinates of the first
14:19 - point in the line and the coordinates of
14:21 - the second point in the line so we are
14:24 - going to just once again say for X 1
14:29 - which is the first coordinate of the
14:32 - first point and the y1 and then
14:35 - similarly X 2 and the Y 2 so this will
14:39 - be the line coordinate in the line which
14:44 - we got from the line vector and then
14:48 - inside this for loop we are going to
14:51 - draw our line and drawing line is really
14:53 - easy by using CV to dot line method
14:57 - which takes a few parameters as you
15:00 - already know the image and then second
15:04 - parameter is the coordinate of the first
15:06 - point which we already have using this
15:10 - iteration which is x1 comma y1 and third
15:15 - parameter here will be the coordinates
15:19 - of the second point x2 comma y2 and then
15:24 - you can provide the color and thickness
15:26 - so let's provide this color so the color
15:30 - here I'm going to take let's say 0 comma
15:34 - 255 comma
15:35 - zero you can take any color here and the
15:40 - thickness so the thickness here I'm
15:41 - going to take is let's provide this
15:45 - parameter thickness is equal to three
15:48 - okay so this is the thickness of the
15:51 - line which we want to draw and here I
15:53 - think this blank image should be given
15:58 - because we want to draw the line on the
16:00 - blank image and then merge it with the
16:03 - original image so here we have to
16:06 - provide this line image or you can say
16:08 - this is the blank image which is more
16:13 - appropriate in this case so we want to
16:16 - draw the line on the blank image which
16:18 - is of the same size of the original
16:21 - image and now once we draw these lines
16:23 - on the blank image we can merge this
16:26 - blank image and the original image which
16:28 - will give us the a line which are drawn
16:33 - on the original image so outside this
16:35 - for loop we are going to merge the image
16:39 - with the lines into the original image
16:42 - so our original image is the image
16:46 - itself so image variable is the original
16:49 - image and then we are going to just say
16:53 - cb2 dot add awaited this function also
16:56 - we have seen in the last videos and this
17:00 - is the function which we use to merge
17:04 - two images with some weights so the
17:08 - first parameter here will be image now
17:10 - the second parameter here will be the
17:13 - value of alpha so which we are going to
17:15 - give here eight this is like a weight to
17:19 - an image which we want to provide and
17:22 - then the third parameter here will be
17:25 - the second image so we want to merge the
17:26 - blank image with the original image the
17:29 - fourth parameter is the value of beta so
17:33 - this value we are going to take as one
17:36 - and the last value will be of gamma so
17:40 - gamma we are going to take as zero point
17:43 - zero here okay so this ad weighted also
17:46 - we have seen
17:48 - in the last video how to use it so I'm
17:50 - not going into the details and at last
17:54 - once we have the lines on the image then
17:58 - we are going to simply return it so
18:01 - let's return this image I am G once we
18:06 - have this function we are going to call
18:07 - this function after applying the Huff
18:10 - line transform method which is the
18:12 - probabilistic hop line transform so here
18:15 - in the next line we are going to just
18:17 - define a variable called image with
18:21 - lines let's say is equal to our method
18:26 - which is draw the lines method the first
18:28 - argument is the original image so we are
18:31 - going to pass the original image the
18:33 - second argument is the line vector which
18:35 - we got from this method right
18:38 - so the original image and the line
18:42 - vector variable which we got here at
18:45 - last we are going to just see what is
18:49 - the result which we got after applying
18:52 - this draw the lines method on the
18:55 - original image so let's run this code
18:59 - and let's see what happens so now you
19:02 - can see let me just maximize it you can
19:06 - see this line is drawn on our image so
19:10 - this is the first line and this is the
19:13 - second line so we got the result which
19:15 - we wanted if you want to change the
19:17 - thickness or the color of this line on
19:22 - the image you can just change it using
19:25 - this draw lines method so this is the
19:28 - line and thickness parameter so for
19:31 - example I want to change this to 255
19:35 - here some different color and the
19:38 - thickness let's say 4 and I'm going to
19:41 - run this code and now you can see this
19:43 - yellow color here right so you can
19:46 - change the thickness and the color using
19:49 - this method so let's say for now we want
19:53 - the red color so we are going to go with
19:58 - this red color on the
20:01 - Lyons so this is what we wanted to
20:03 - achieve we wanted to draw the lane lines
20:06 - on these lanes and we have achieved this
20:09 - in the next video we are going to see
20:12 - how we can apply the same concept on a
20:15 - live video or on video of this road for
20:21 - example so for example this car is
20:23 - running on the road and we want to
20:26 - continuously draw these lines on the
20:30 - lane lines how we can achieve this using
20:33 - open CV you're going to see in the next
20:35 - video so that's it for this video I will
20:38 - see you in the next video