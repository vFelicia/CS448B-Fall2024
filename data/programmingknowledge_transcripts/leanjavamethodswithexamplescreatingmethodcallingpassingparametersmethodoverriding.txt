00:00 - in this video we will see what is a
00:03 - method and how to use a method in Java
00:08 - methods are also called functions in
00:12 - other languages so if I use function or
00:16 - method they can be used interchangeably
00:20 - okay but in Java this method is
00:25 - preferred or method what keyboard is
00:28 - preferred so first of all what is a
00:31 - method a method is a piece of code which
00:35 - executes some logic and you can wrap
00:40 - this method with a name and you can call
00:45 - this method again and again whenever you
00:47 - want to use it now how to use a method
00:51 - first of all for your information this
00:55 - main is also a method which every Java
01:01 - program has this I have told you in the
01:03 - initial videos right so in this same
01:07 - method this is you know Java is
01:10 - expecting us to provide and our method
01:16 - name should not be mean because there
01:18 - should be only one main method in any
01:22 - Java program okay
01:24 - but other than mean and reserved name in
01:29 - Java you can define any name to a method
01:32 - so first of all let's see what is the
01:35 - basic syntax of a method so we just give
01:40 - first of all the access specifier to our
01:45 - method which is public like this and
01:49 - then static so don't worry about these
01:55 - public and static because we will see
01:57 - these keywords in detail in the later
02:00 - videos when ever we will see how to use
02:03 - classes but then starts this return
02:08 - value which is the part of the method
02:10 - and then comes the name of the method
02:13 - for example my first method okay and
02:21 - then comes these brackets in these
02:24 - brackets we can pass some parameter but
02:26 - for the first time because it's an
02:30 - introduction I just want to leave them
02:32 - empty they can be left empty or you can
02:37 - pass parameters like int a something
02:40 - like this in here but for now for
02:43 - simplicity I will leave them you know
02:47 - blank so this is the simplest kind of
02:50 - method so what are these first of all
02:55 - public static is called the access
02:59 - specifier and public key word tells your
03:03 - class or Java that it's accessible
03:07 - anywhere inside your class okay and then
03:12 - void is the return type right now we are
03:15 - not returning anything that's why we
03:17 - write here void but I will show you in
03:21 - the further videos how to return value
03:23 - using method and in that we will see
03:28 - more options other than void you know
03:30 - with this method and then comes the
03:33 - method name and in these school circular
03:38 - brackets or round brackets comes the
03:42 - argument for now we are not passing any
03:44 - argument and then in these curly braces
03:47 - comes your statement for example we want
03:51 - to execute or we want to print some some
03:54 - message so system dot out dot print line
04:02 - and we just write hello YouTube okay and
04:14 - this is the basic syntax or code which
04:18 - you want to write or which what you want
04:20 - to exist cute using this method now you
04:25 - can call this method
04:27 - in your main method here and you don't
04:33 - need to execute or print anything you
04:35 - can just call this method as it is you
04:39 - just need to copy the name of the method
04:42 - like this and then provide these two
04:46 - round brackets okay and then when you
04:49 - run the program it will print hello
04:52 - YouTube so we are not if you notice we
04:56 - are not directly printing in our main
04:58 - method
04:59 - you tell YouTube but we are calling the
05:01 - function with a function name and then
05:05 - it prints hello YouTube
05:07 - okay and the biggest advantage of using
05:12 - this function or method is it will make
05:15 - your code really readable and really
05:20 - concise and it will make your code look
05:25 - good okay and understandable so for
05:29 - example you want to call this method
05:31 - again and again inside your function you
05:34 - can call it and you don't need to write
05:37 - any further code right it will print
05:40 - hello you do five times so you can call
05:43 - a method again and again in inside your
05:47 - main method and without writing
05:51 - rewriting the same code again and again
05:53 - so the basic rule of thumb is when you
05:57 - decide to write a method whenever you
06:01 - have the code which is you know which
06:05 - you want to write again and again then
06:08 - you may wrap it inside our method and
06:13 - this will help you to reduce the lines
06:18 - of code which will you write okay for
06:21 - example this code contains five lines
06:26 - okay so and we don't want to write these
06:31 - five lines again and again because for
06:33 - example this code can method contains
06:37 - five lines and if we
06:40 - have to do it without the method we have
06:43 - to do it you know just like this and we
06:46 - want to call it if once again these five
06:49 - lines of code again in our main method
06:53 - then we need to write it something like
06:56 - this and this and this will make your
06:58 - codes really lengthy and whenever your
07:02 - code becomes really ran lengthy it will
07:05 - be hard to read your code okay and what
07:09 - this method is doing it's just making
07:12 - your code with you know execute with
07:16 - just single line of code okay so this is
07:21 - the real advantage of method and you
07:24 - should give a really logical name to
07:28 - your method so that it's understandable
07:30 - and then you know any other person if he
07:34 - is reading your code he will be able to
07:38 - understand your code dolls now in this
07:40 - video we will see some more properties
07:42 - we can add to a method one I'm going to
07:47 - show you is called passing parameters to
07:51 - the method and other is called the
07:54 - returning values from a method so this
07:57 - was the simple method I have shown you
07:59 - in the last video now it doesn't solve
08:04 - much of the purpose because every time
08:08 - it's not flexible it's only printing
08:11 - hello YouTube every time now to make it
08:15 - more flexible we can add an argument to
08:20 - this function we have made in the last
08:23 - video so the declaration remains same
08:25 - public static is the access specifier
08:28 - void is the return value why the means
08:31 - we are natural returning no value and
08:33 - the name of our function is this one and
08:37 - in these round brackets we will pass our
08:41 - parameter in just a moment and in here
08:44 - in these curly braces we write our
08:46 - statement so for example we want to
08:49 - greet some persons based upon
08:53 - their names so we can pass an argument
08:57 - to this function like this so we will
09:01 - pass the name in the form of string
09:03 - variable so we just give the datatype
09:06 - first and then we give the value or a
09:12 - variable name which we want to pass so
09:14 - we can say name okay so this kind of
09:20 - declaration inside your round bracket in
09:23 - the function is called the parameter
09:26 - passing okay and this parameter name
09:30 - which is a string you can use inside
09:34 - your function so if you want to say
09:36 - hello or whatever name is passed to the
09:39 - function then it will you know print
09:42 - that name so whenever we call this
09:46 - function say hello to the main method
09:55 - for example we call the name John then
10:02 - it will greet hello John
10:05 - okay so I will run the program and it
10:09 - says hello John and this function can be
10:13 - used to greet more than one function for
10:16 - example John Tom or for example some
10:23 - other name mark for example and look
10:28 - greet all three names hello John hello
10:32 - Tom and hello mark okay so this makes
10:36 - our function a little bit flexible in a
10:39 - way that we can you know use it
10:42 - according to our use okay the other use
10:48 - of this function we can use it to add
10:51 - for example with integer so here you can
10:56 - pass any number of parameter no it's not
10:58 - necessary that you need to pass only one
11:00 - parameter you can pass multiple
11:03 - parameters in here in as an
11:07 - parameter right so how we can do this we
11:11 - will declare one more function for
11:13 - example public this should be public
11:19 - static void because we are not returning
11:22 - anything and now we will make a function
11:25 - call ad which we want to add two values
11:29 - in using this function okay and in here
11:34 - we can pass multiple values whatever
11:37 - number of values you want to add for
11:39 - example in the a comma int B for example
11:47 - we want to add these two values and
11:49 - print the result
11:50 - what we can do is we can just print
11:54 - these values by calling a plus B so just
12:00 - write a plus B okay and what this will
12:05 - do whatever you pass as an argument here
12:08 - and here it will add these two values
12:11 - and print on the terminal right so when
12:16 - I run this program first of all I need
12:19 - to call this ad function I will delete
12:22 - this say hello from the main and I will
12:25 - call this ad function and for example I
12:28 - want to add two integers and this is
12:32 - hundred and two zero one for example I
12:35 - want to add and I will run the program
12:38 - and it prints the result which is three
12:41 - zero one using this code okay and now I
12:45 - want to add some more integers for
12:49 - example I want to add some values and
12:54 - some other values and I can do it with
12:59 - the same function so this makes your job
13:03 - really easy using a same function you
13:06 - can add different values or you can
13:08 - perform different operations on
13:10 - different values right so it makes your
13:15 - code really you know readable and
13:18 - understandable
13:20 - at the same time now you can add more in
13:26 - parameters like in C and you can add
13:32 - this parameter here and in here you can
13:35 - add some more integer values like this
13:39 - okay so it depends upon you how many
13:43 - parameters you want to pass to your
13:46 - function and it will give you the result
13:48 - okay so it's totally dependent upon you
13:52 - the only thing is you just need to give
13:55 - the datatype and the variable which will
13:58 - hold these values so indirectly whenever
14:02 - you pass 100 as a first parameter 100 is
14:06 - equal to 100 becomes a here and it goes
14:10 - here okay so the value of a becomes
14:13 - hundred and value of B becomes two zero
14:16 - one in this here and value of C becomes
14:21 - two one one here so they will be
14:23 - replaced and they will be called and the
14:26 - answer will be printed on the console
14:29 - okay now to make it more flexible this
14:35 - is called parameter passing but you know
14:38 - we can only pass the values and if we
14:44 - want to access the result using these
14:47 - parameter passing we cannot access the
14:50 - results so for example we want to use
14:53 - this result 5 1 2 in our main function
14:58 - to you know do some other arithmetic
15:01 - operation how we can use it okay so it's
15:06 - using this function it's not possible
15:09 - right but there is a way to do this and
15:13 - the way to do this is by returning some
15:17 - value so we will modify this add
15:20 - function a little right now it's a
15:23 - returning void what means it's not
15:25 - returning anything but when we want to
15:28 - use it inside our main function
15:32 - when we want to use the result inside
15:34 - our main function we can reserve return
15:36 - integer value okay and this return value
15:42 - will tell what kind of value you want to
15:45 - return from your function and the same
15:48 - you will return from here so just write
15:52 - return and just write a it should be a
15:58 - plus B plus C okay and in this way what
16:06 - you are basically doing is you are
16:08 - taking all the values with which you
16:10 - pass from or in these in this function
16:14 - and you are adding this and you are
16:16 - returning from this function so let's
16:20 - take an example of this so let's comment
16:26 - this system out for now and right now
16:30 - what we are doing is we will just add
16:33 - the values we are passing these three
16:36 - values and we will return and whenever a
16:39 - function return anything you can store
16:42 - it in other variable but of the same
16:47 - type so the data type of the returning
16:50 - value and the value in which you want to
16:55 - store the return value should be same so
16:57 - this is integer and this is integer or
16:59 - int right and you can call this odd
17:02 - function and paste it here and what this
17:07 - basically do is this will add 100 or
17:11 - this will replace a as hundred B as to 0
17:17 - 1 C as to 1 1 and it will add these two
17:21 - values and it will return at this sum
17:24 - and you can store this sum in some other
17:28 - variable ok and then you can print this
17:34 - value like this so you can call some and
17:38 - this will give you or you can access
17:41 - this value inside your main
17:45 - like this so this is do you do this and
17:48 - if you want to do some other automatic
17:52 - operation on this some you can do it for
17:55 - example end result some x for example 15
18:06 - you want to do you can do it like this
18:09 - and this should be equal to and you can
18:12 - call your sum like this and you can just
18:16 - run the program it will give you the
18:20 - multiplication of whatever sum you will
18:22 - get from the add function adding these
18:25 - three numbers and then you can do some
18:28 - arithmetic operations on the sum you get
18:31 - as a result and you can multiply it by
18:34 - or whatever a dramatic operation you
18:37 - want to do and you can store this result
18:40 - in another variable and you can use it
18:42 - so in this way the function or methods
18:46 - made it really easy to you know organize
18:50 - your code and make it really concise
18:54 - really readable really understandable
18:56 - and it also makes your code you know
19:00 - prettier so I hope you have understood
19:03 - the basic concept of passing parameters
19:06 - like these and returning values like
19:11 - these okay in a same way you can make
19:14 - any logic using this function for
19:18 - example multiplication you can make a
19:20 - function to make multiplication you can
19:22 - make a function to you know do divisions
19:25 - you can add two numbers to you can
19:29 - subtract two numbers or any complicated
19:32 - you know automatic or logical or
19:35 - anything you want to do you can do it
19:38 - inside a function and you can take
19:41 - arguments or parameters here and you can
19:45 - return the results so that you can use
19:47 - it in your main method so I hope you
19:51 - have understood the basic concept of
19:52 - taking parameters or passing parameters
19:55 - to a method what is recursion
19:58 - and how we can use recursion in Java so
20:03 - it's very common practice to call one
20:07 - method from another for example we
20:09 - create a static method ad and we can
20:13 - call it inside our main method right so
20:17 - it's very common and everybody knows
20:20 - that Java also allows to call a method
20:25 - from itself like for example you can
20:29 - call ad inside your add method itself
20:34 - and this type of programming is called a
20:39 - recursion or this kind of programming
20:42 - when we call method from itself
20:45 - it's called recursion and very basic or
20:49 - we can say hello world program for
20:51 - recursion is factorial for calculating
20:56 - factorial so let's create a method to
21:01 - create a factorial for some number now
21:06 - those who don't know what is factorial
21:09 - what is the meaning of factorial we will
21:12 - I will just give you a small gist of it
21:17 - so a factorial is something like this so
21:21 - whenever you want to create a factorial
21:24 - of some number it's n which is a number
21:28 - multiplied by n minus 1 multiplied by n
21:31 - minus 2 until 1 so for example we want
21:37 - to create or when we want to carry
21:39 - calculate the factorial of 5 this is
21:43 - equal to 5 x 4 x 3 x 2 and x 1 okay so
21:58 - this is how we can calculate factorial
22:00 - now let's create a method to create or
22:04 - to calculate the factorial of a number
22:07 - so we can create this like this public
22:14 - static this should be public static and
22:20 - this is going to return integer value
22:23 - and we named our factorial as vectorial
22:29 - itself and it takes an integer int and
22:33 - for example or capital n as we are
22:37 - showing here and then we will try to
22:42 - find some algorithm which calculates the
22:46 - factorial so if the number is zero if
22:51 - you know if we want to find the
22:55 - factorial of zero it's one right so if n
22:58 - is less than or equal to one then we
23:06 - will say that the answer or we will
23:11 - return the answer as one right so
23:14 - something like this and here we will
23:21 - return one okay otherwise else we will
23:31 - return the value of n which we will take
23:38 - it inside the bracket then the value of
23:44 - n minus one right so we can say
23:49 - indirectly that we want to calculate the
23:53 - factorial of n minus one okay so we will
23:58 - call the method itself and we will pass
24:01 - n minus one here okay and then we will
24:07 - just close this and here we just want to
24:11 - return so I will just add return so this
24:16 - type of calling I'm calling factorial
24:19 - inside my you know factorial method
24:23 - itself and what this basically is doing
24:26 - if the value of n is less than 0 or less
24:30 - than or equal to 1 we will return one
24:32 - because factorial of 1 and 0 is 1
24:35 - otherwise we will return the
24:38 - multiplication of the N which is why for
24:42 - example if you want to calculate the
24:43 - factorial of 5 we will return 5 x
24:47 - factorial of 4 right so once again it
24:53 - goes here and now we want to calculate
24:55 - the factorial of 4 and then once again
24:59 - it goes for x factorial of 3 it goes
25:05 - once again here 3 and factorial of 2 and
25:08 - it goes once again factorial of 2
25:11 - multiplied by factorial of 1 and
25:14 - factorial of 1 here when n becomes 1 or
25:18 - 0 we will return 1 okay
25:21 - so indirectly it's calculating something
25:25 - like this ok and whenever we want to
25:28 - print this for example say o and we will
25:36 - print this and we will call factorial of
25:43 - 5 and let's see what's the answer you
25:49 - will run the program and it should be
25:52 - not this should be out okay and we will
25:57 - run the program and the factorial of 5
26:02 - is 120 which is true right in the same
26:06 - way we can calculate the factorial of 4
26:09 - and the answer will be 24 because 4
26:14 - multiplied by 3 is 12 x 2 is 24 x 1 is
26:20 - 24 itself right and 24 x 5 is 120 which
26:25 - is the factorial of 5 so this way of
26:29 - calling method from itself is called
26:33 - recursion and you can do it something
26:36 - like this in this video we will learn
26:39 - about method overloading in the last
26:43 - videos I have shown you how to use a
26:46 - method now method overloading is same as
26:51 - declaring method but the main thing is
26:56 - you can define different method with the
27:00 - same name so two method you can define
27:04 - with the same name which can perform two
27:07 - different you know different logic so
27:12 - for example I want to add two values and
27:15 - I want to declare some method for this
27:18 - so I will declare a function called
27:22 - public static and it will return integer
27:33 - value and I will name it as add okay and
27:41 - what it's going to do is it's going to
27:43 - add two values okay and it will return
27:47 - these two values and then I will pass in
27:51 - a comma int B as the parameters and I
27:58 - will return the sum of these two values
28:04 - write a plus B and I can call it in here
28:11 - right
28:12 - but in real-world programming the
28:17 - situation may occur that you want to add
28:21 - not only two integer values you may want
28:25 - to add two double values or decimal
28:29 - values or you may want to add two
28:33 - strings because plus you can be used as
28:37 - a concatenation operators also so what
28:41 - you can do in Java is you can define the
28:45 - method two different method with the
28:47 - same name but for example
28:53 - different parameters and different
28:57 - values okay so you can define add
29:01 - something like this or you can define
29:04 - add something like this
29:09 - and this is called method overloading
29:15 - whenever you define different method
29:19 - with the same name which performs some
29:22 - different logic but they have I mean the
29:26 - same name they can perform mostly a same
29:32 - logic but you know datatype you want to
29:35 - use them or parameter you want to pass
29:37 - them can be different and whenever you
29:42 - will call these method for example
29:45 - something like this you want to add two
29:50 - values you can just call add to integer
29:54 - 1 comma 36 so it will by default Java
30:01 - knows that whenever you pass two
30:04 - integers here in a method you are
30:07 - calling this method because you are
30:10 - passing two integers in a same way
30:13 - whenever you pass two double values for
30:16 - example 5 point something and 40 point
30:25 - something then your Java program knows
30:29 - that you are calling this video so Java
30:32 - is intelligent enough to deduce your
30:36 - method by your initialization of the
30:41 - method in the same way you can pass
30:45 - whenever you want to pass two names for
30:49 - example hello and second parameter as
30:56 - world then also it you know it can know
31:04 - that you are calling the
31:06 - function because it takes string values
31:09 - and whenever you run the program it will
31:12 - give you different result then so in the
31:16 - first case this ad is calling this
31:19 - function in the second case this ad
31:22 - function is calling this function and in
31:25 - the third case this ad is calling this
31:27 - function so the method overloading or
31:32 - the basic logic of method overloading is
31:35 - you can define different method with the
31:39 - same name to perform different
31:42 - operations okay but logically they will
31:47 - be doing some same kind of work so this
31:51 - is Method overloading in Java I hope you
31:54 - enjoyed this video please rate comment
31:55 - and subscribe and bye for now