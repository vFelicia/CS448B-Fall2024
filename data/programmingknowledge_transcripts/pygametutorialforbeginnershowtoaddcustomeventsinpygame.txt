00:02 - hey everyone today we're going to
00:04 - discuss making custom user events
00:06 - sometimes while making a video game with
00:08 - pi game you might need to create a
00:10 - custom event so we're going to make two
00:12 - user events one that is initiated by the
00:14 - user and one that works automatically
00:17 - so i'll have a rectangular object that
00:20 - will inflate to a certain size when i
00:22 - hover over it and the other event would
00:25 - be the screen changing its color
00:26 - alternatively let's write the code for
00:28 - it now i'll import by game
00:34 - i'll initialize it
00:37 - i'll set up the screen
00:40 - screen equals spy game dot display dot
00:43 - set mode screen size that will be 500
00:45 - comma 500 and then i'll also given the
00:48 - caption i'll write pie game dot display
00:50 - dot set caption
00:52 - and let the caption be custom
00:55 - events
00:59 - then i'll get to the wild true loop i'll
01:01 - write while true
01:03 - for events
01:05 - then by game dot event
01:08 - dot get
01:10 - if events
01:12 - dot type equals by game dot
01:16 - quit
01:17 - i'll call the quit function by piking
01:20 - and i will quit
01:24 - i won't write screen dot phil right now
01:27 - i will do that later there is a clause
01:30 - to it i'll get to that later
01:32 - and then i'll update this i'll write pi
01:34 - game dot display dot update okay
01:38 - now outside this while true loop let's
01:41 - get to the main code now let me define
01:43 - the two user events two custom events
01:47 - so let the color changing event be
01:49 - called color
01:51 - i'll write color
01:54 - equals pie game dot user event and
01:57 - capital
01:59 - and plus one
02:01 - so that is how you
02:03 - define a custom event
02:05 - then i'll have another event the box
02:08 - grow event
02:09 - i'll write box
02:11 - underscore chrome
02:13 - equals by game dot user event plus two
02:18 - so that's the second event so i've done
02:20 - plus
02:20 - okay
02:22 - now i'll set up the background color to
02:24 - white to check the next color
02:27 - of the screen what color needs to be
02:29 - filled next it will be used later in the
02:32 - color
02:33 - user event when we define it and i'll
02:36 - have this
02:38 - grow variable of boolean type to know
02:41 - when the cursor is hovering so that
02:43 - accordingly the rectangle can inflate
02:45 - and deflate this also would be used in
02:47 - the box grow function
02:51 - since i told you i'll be having
02:53 - a rectangle so let me define it i'll use
02:57 - the rect class again i'll write box
03:00 - equals
03:02 - by game dot
03:03 - correct
03:05 - let the initial position be 255 comma
03:08 - 255
03:10 - and
03:11 - the size before t comma 40.
03:15 - now here i'll be filling in the screen
03:18 - color okay so i'll write screen dot fill
03:21 - and
03:22 - let the color be white initially
03:26 - so this is like i have just initialized
03:28 - the screen color because in one of my
03:31 - events that color changing event i would
03:34 - alternatively change colors of screen if
03:37 - i put this in the while loop it would
03:39 - render a single color regularly okay
03:41 - because there is a loop
03:43 - okay then i'll have my clock object to
03:46 - set up the frame rate later i'll write
03:48 - clock
03:49 - equals pi game dot time dot clock
03:54 - then i'll call on to the color changing
03:56 - function because it would be automatic
03:58 - so i'll make use of the set timer method
04:01 - by the time module i'll write pi game
04:04 - dot time dot set timer
04:06 - the event would be color
04:08 - and comma 500
04:10 - milliseconds so that would be the
04:12 - interval
04:15 - okay
04:16 - in what interval i want to call on to
04:18 - this event
04:20 - now in this events loop
04:23 - i will define these events
04:26 - that i initialized up above
04:29 - so i'll write i'll check if events dot
04:32 - time equals color
04:36 - if background color
04:38 - this variable this which was initially
04:41 - white
04:42 - if pg underscore color
04:45 - equals pink
04:48 - then i'll
04:49 - fill in the screen with pink color
04:52 - and
04:53 - i'll make the
04:55 - easy color equals white
05:00 - and else if
05:01 - background color is white
05:04 - i'll fill the screen with white color
05:07 - and i'll reassign background color value
05:10 - i'll make it pink
05:12 - so that would help me to alternatively
05:14 - change the colors of the screen okay
05:18 - then
05:19 - i'll check in for the box grow
05:22 - event i'll write if event start type
05:26 - equals box underscore chrome
05:31 - i'll check
05:32 - this boolean grow if it is true i'll
05:35 - inflate the box in place we discussed
05:38 - the concept of in place earlier
05:42 - so i'll write box dot inflate in place
05:45 - let us inflate it by four comma four
05:49 - the x and y coordinates with the same
05:51 - amount same units
05:54 - since i said i would grow the rectangle
05:56 - to a certain size i would check the box
05:59 - width if it is less than 80. you can
06:01 - take a larger size if it is not i will
06:04 - let grow to be true else if the box is
06:07 - larger
06:08 - than the size i will make grow false
06:11 - i won't use a nested if i would simply
06:14 - write
06:15 - grow equals box dot width
06:18 - is less than 80. i'll check if box width
06:21 - is less than 80 and accordingly grow
06:23 - will have that true or false okay
06:28 - now for the else
06:29 - condition
06:30 - if grow is false
06:33 - i'll deflate the box so there's no such
06:37 - function for deflating but we can
06:39 - inflate but with the negative
06:43 - units so what i'll write is i'll write
06:45 - box dot inflate in place
06:49 - minus four comma minus four
06:51 - so we'll be subtracting this
06:55 - four units from the x coordinate
06:59 - and i'll write cro equals box dot width
07:02 - is less than 40. now if the box
07:06 - decreases to a size of 40 or less
07:09 - grow will become true again okay
07:12 - now since the box grow
07:14 - event should only be called when i hover
07:17 - over the rectangle i'll write outside
07:20 - this for loop i'll write f box dot
07:23 - collide point
07:25 - i can write this for rectangle class
07:28 - pygame dot mouse dot get position in the
07:30 - arguments this would be checking for
07:34 - the cursor's position
07:38 - so basically i'm checking if the cursor
07:41 - is over the rectangle
07:42 - what i'll do is i'll call on to this box
07:45 - grow event
07:46 - i'll write by game dot event dot post
07:51 - by game dot event dot event
07:54 - and i'll call on to box crew
07:58 - okay
07:59 - after that i'll draw my rectangle i'll
08:02 - write pie game dot draw.rect
08:06 - and in arguments green
08:08 - orange let the box color be orange and
08:12 - box that was my rectangle
08:16 - and after this update function i'll call
08:19 - on to the tick function to set up the
08:22 - frame rate let the frame rate be 40.
08:25 - now let's run this code and
08:28 - see if you could really create some
08:31 - custom events
08:38 - so the screen changes its color or
08:40 - automatically alternatively
08:43 - and when i hover over this rectangle it
08:46 - changes its size as we have defined
08:48 - it inflates on the plates accordingly
08:51 - so everything is working fine
08:53 - we could actually make constant events
08:57 - so that was it for
08:59 - defining custom events
09:02 - i hope you understood how we define
09:03 - custom events thank you