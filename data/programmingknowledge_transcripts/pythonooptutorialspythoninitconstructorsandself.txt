00:00 - in this video i'm going to show you how
00:02 - to use init
00:03 - method in python and how to use a
00:06 - keyword
00:06 - called self in python so i will continue
00:10 - with the class which i have created in
00:12 - the last video
00:14 - and this was the class which we have
00:16 - created and we have used
00:18 - this special keyword pass there
00:21 - and pass we were using to create an
00:24 - empty class now i'm going to remove this
00:27 - pass
00:28 - and i'm going to add a method called
00:32 - init here so i'm going to just write def
00:35 - and then underscore underscore init
00:39 - and then press enter and you can see
00:42 - this init method is created here
00:45 - so this is like a normal method with
00:48 - double underscore in front and back of
00:52 - this init keyword and you will also see
00:54 - the
00:55 - self keyword is already added
00:59 - as the first argument of this method
01:02 - now this init method serves as a
01:05 - constructor
01:06 - for the class so usually it is used
01:10 - to initialize some attributes
01:13 - or some functions because this
01:16 - is the first method which will be called
01:20 - when you create an instance of a class
01:23 - so here
01:24 - we are creating an instance of a class
01:27 - and this init method
01:28 - will be the first method which will be
01:31 - called
01:32 - when this object or instance will be
01:35 - created
01:36 - so let's check what i'm saying so let's
01:38 - say i want to print
01:40 - inside this init method that the
01:43 - underscore underscore init underscore
01:46 - underscore
01:48 - is called and let me run this code so i
01:51 - will change
01:52 - this to car and then run this code
01:55 - and now when i see this result you will
01:58 - see
01:59 - this line is called three times
02:02 - because we have created three instance
02:04 - from
02:05 - the same class okay so every time this
02:08 - instance is created this print
02:12 - is called and that's why this line is
02:15 - printed three
02:16 - times and everything else will be
02:19 - printed
02:20 - after that whatever we were printing for
02:22 - example speed or color of the car
02:24 - will be printed after that now one
02:27 - important thing to notice here
02:29 - is i said init serves as a constructor
02:33 - it's not a constructor although it would
02:37 - be tempting to call
02:38 - this init method as a constructor
02:41 - actually it's not a constructor
02:43 - but it behaves like a constructor
02:47 - because init is the closest thing
02:50 - we are going to get in python to a
02:52 - constructor
02:53 - because it is the first method which is
02:56 - called
02:57 - whenever an instance is created now if
03:01 - you are familiar with
03:02 - other object oriented programming
03:03 - languages like java
03:05 - and c plus plus there is a destructor
03:09 - also
03:10 - in those kind of languages with classes
03:13 - now python doesn't have any destructor
03:17 - because python has an automatic garbage
03:20 - collection
03:21 - so you don't need a destructor in python
03:24 - because
03:24 - python will take care of anything which
03:27 - should be taken care of
03:29 - now as i said usually init method is
03:32 - used
03:33 - to initialize something so instead of
03:36 - initializing the value of speed and
03:39 - initializing the value of color let me
03:43 - just comment
03:44 - this code first of all so i'm going to
03:46 - select whatever i want to comment
03:48 - and then i can press ctrl forward slash
03:51 - to comment all the line you can also go
03:54 - to code
03:55 - and then use this option which says
03:58 - comment with line comment and you can
04:00 - see the shortcut for that
04:02 - control plus forward slash okay so this
04:05 - is going to comment
04:06 - your lines of code and now i want to
04:09 - use the speed as the initialization
04:13 - value
04:14 - so after the self keyword i can give the
04:17 - next
04:18 - parameter which is speed here
04:21 - and then the third parameter is the
04:24 - color here and now to print the value of
04:27 - speed and color
04:28 - i can use once again print and then
04:31 - first of all i'm going to print the
04:33 - speed
04:34 - and then i'm going to print the
04:37 - color attribute and as soon as you do
04:40 - this
04:41 - and when you try to run this program it
04:43 - will give you
04:44 - an error so let me run the program and
04:46 - it will give me the error
04:48 - it says init missing to required
04:51 - positional argument which is speed and
04:55 - color
04:55 - okay so once you create an init method
05:00 - and provide any arguments other than
05:03 - self self is automatically provided
05:07 - by python whenever you create an
05:10 - instance of a class
05:11 - but other than self when you write for
05:14 - example speed and color
05:15 - arguments here you need to provide those
05:18 - argument
05:19 - at the initialization of your class
05:23 - so here first we will give the speed
05:26 - inside these parentheses for example 200
05:29 - and then the color for example
05:32 - red here okay same we need to do
05:36 - for the other 2 instantiation
05:39 - of the car class so let me do it for the
05:43 - second
05:44 - instance and also for the
05:48 - third instance and now let's run the
05:50 - code once again
05:52 - and let's see what happens so now you
05:55 - can see
05:55 - everything works fine and no error is
05:59 - given to us and you will also see
06:01 - because
06:02 - this print is called first you can see
06:06 - the speed is printed first and then the
06:08 - color
06:09 - and then this line is printed after that
06:13 - and that means we will get the speed
06:15 - color
06:16 - and this line three times for every
06:19 - instance with different values whatever
06:22 - values
06:23 - you have provided for the instantiation
06:26 - of your car
06:27 - class now usually you provide these
06:29 - arguments
06:30 - because you want to initialize the value
06:33 - of speed
06:34 - so let's try to access the value of
06:38 - the ford object speed and color so let
06:41 - me just uncomment this code
06:43 - and let's run this code and it will give
06:46 - us an
06:46 - error you can see this says that car
06:50 - object has no attribute called speed
06:52 - right so what is the error
06:55 - because we have provided these attribute
06:59 - speed and color but we haven't assigned
07:01 - these values to
07:02 - any attribute inside this car
07:05 - class earlier what we have done is we
07:08 - have
07:09 - assigned the speed value to a speed
07:12 - attribute
07:13 - and the color value to the color
07:15 - attribute but
07:16 - we have already commented those codes so
07:19 - how can we assign the speed and color
07:21 - to the car object so it turns out that
07:25 - you can use the self
07:27 - keyword and then using the self keyword
07:30 - you can assign the value
07:32 - to the current object so self is
07:35 - essentially
07:36 - the current object okay it's similar to
07:39 - using
07:40 - this in c plus plus or java if you're
07:43 - familiar with
07:44 - those two languages so you use self dot
07:48 - and then the name of the attribute for
07:50 - example speed
07:51 - in our case is equal to whatever
07:53 - argument you provide for speed so we
07:55 - have provided the same argument which is
07:58 - speed is itself once again i can use
08:01 - self to set the value of
08:04 - color here so self.color is equal to
08:07 - color
08:08 - let me remove this semicolon because
08:10 - it's not required
08:12 - and now when i run this code you will
08:15 - see
08:16 - that there is no error now so because we
08:19 - have
08:19 - now used the self keyword to set
08:23 - the attributes of speed and color so we
08:26 - can
08:26 - easily access the values of the speed
08:29 - and color
08:30 - using any object of the car class so let
08:33 - me once again minimize this
08:34 - so now let's talk about the self keyword
08:38 - here
08:38 - so whenever you create a class the first
08:41 - argument of
08:42 - every method you need to provide this
08:45 - keyword yourself
08:46 - now it's not necessary to provide this
08:49 - same
08:50 - keyword which is self but it's a
08:52 - convention to write
08:53 - this self as the first parameter the
08:56 - first parameter
08:57 - can be for example abc it doesn't matter
09:01 - but you need to use
09:02 - this abc here also as self
09:05 - and it will be totally fine but it's a
09:08 - convention that we use
09:10 - the self keyword in order to indicate
09:13 - that this is the current object so every
09:16 - method you will create
09:18 - you need to give this self keyword as
09:21 - the first argument of
09:22 - your method inside a class now you may
09:25 - also
09:26 - observe that here when i am initializing
09:29 - this class instance i'm not providing
09:32 - any
09:33 - self keyword so even though in the init
09:36 - method i have provided
09:37 - three arguments i'm only providing two
09:40 - arguments here so it turns out that you
09:43 - don't need to provide
09:44 - the first argument which is self it will
09:47 - be automatically be provided
09:49 - to your class so you just need to give
09:53 - the next argument whatever argument you
09:55 - give
09:56 - after the cell so we have given speed
09:59 - and color
10:00 - after the self argument so we just need
10:02 - to provide those arguments
10:04 - after whatever you use after this
10:06 - keyword called
10:07 - self so let's do the same thing with our
10:10 - second class which is the rectangle
10:12 - class
10:13 - and here also we have created this empty
10:15 - class so let's
10:16 - remove this pass keyword and instead of
10:19 - this pass keyword we will use
10:21 - this init method which is def
10:24 - underscore underscore init underscore
10:27 - underscore
10:28 - and here after the self we will provide
10:31 - the
10:31 - height as the second argument
10:34 - and the width as the third argument
10:38 - okay and then we are going to initialize
10:42 - the attributes height and width using
10:45 - this self keyword so self
10:47 - dot height is equal to
10:50 - height self dot width
10:53 - is equal to width okay so this is how
10:57 - you can initialize
10:58 - your attribute using this init method
11:02 - and now when you do this you don't need
11:05 - to initialize these values like this
11:08 - you can directly initialize this height
11:11 - and width
11:12 - using these parentheses let me provide
11:15 - these values let's say 20 and 60
11:18 - for the first rectangle and let's say 50
11:22 - and 40 for the second rectangle and when
11:25 - we run this code let me just change
11:27 - the file here and then run the code
11:31 - and you will see it will print the area
11:33 - once again here
11:35 - so this init method is used to
11:38 - initialize your attributes
11:40 - or whatever you want to initialize at
11:42 - the start
11:43 - of your class you will do all those
11:47 - initializations
11:48 - inside this init method so this is how
11:51 - you can use
11:52 - init method and self keyword in python
11:55 - we will discuss
11:56 - more about init method and the self
11:59 - keyword so let's get started so here i
12:02 - have a very simple class called hello
12:04 - and in this class i have a method called
12:07 - init
12:08 - and i'm just instantiating this class
12:10 - and creating
12:11 - an object out of this hello class
12:15 - now the first question which may arise
12:17 - is
12:18 - what if i don't want to use this self
12:21 - keyword
12:22 - you can see directly that there is a red
12:25 - squiggly line
12:26 - appears here which means an error and
12:29 - this we can also see
12:30 - when we run the program so when we run
12:32 - the program it's going to give
12:34 - us this error which says init takes zero
12:38 - arguments but given one now you may ask
12:42 - why it's saying that we have given one
12:45 - argument to
12:46 - the initialization of this hello class
12:49 - so as i said in the last video that
12:51 - self is automatically passed
12:54 - when you initialize a class and that's
12:57 - why it says
12:58 - that one argument is given but
13:01 - init takes zero argument because here
13:04 - we haven't given any argument inside
13:07 - these parentheses
13:09 - so self is absolutely
13:12 - important so you need to give the self
13:14 - now the second question you may ask is
13:17 - can i create multiple init method
13:20 - inside a class so let's see if it's
13:22 - possible or not so
13:23 - here i'm going to give this pass keyword
13:27 - which means that this init method is an
13:30 - empty method and let me create a second
13:33 - init method
13:34 - and this time i want to add one more
13:37 - parameter here
13:39 - let's say name okay so we have
13:42 - provided two init methods here and let's
13:45 - see what happens
13:47 - so this is the instantiation of class
13:49 - where i haven't given
13:51 - any argument to this instantiation
13:55 - so i'm going to run the program and what
13:57 - it says
13:58 - it says init missing one required
14:02 - positional argument which is name
14:05 - so it turns out that it's not possible
14:09 - to provide multiple init methods
14:12 - in your python class if you provide
14:16 - multiple init method in your python
14:18 - class
14:19 - the init method which you define at last
14:22 - will be considered
14:23 - as the main init method and other
14:27 - will be overwritten okay so whatever
14:31 - init method you define at last that
14:34 - signature of init method
14:36 - will be valid and all the other init
14:39 - method
14:40 - which you will create will be
14:41 - overwritten by the last init method
14:44 - okay so let's provide the argument
14:48 - name here so i'm going to just provide
14:50 - one argument here
14:51 - and then run this code and it works
14:55 - perfectly fine
14:56 - okay let me just reverse this order so
14:59 - instead of using this init at the top i
15:03 - will use the init
15:04 - which doesn't take any parameter at the
15:07 - bottom
15:07 - now okay and we provide this
15:11 - argument and let's run the code and now
15:14 - once again we get the error which says
15:17 - init takes one
15:19 - positional argument but two were
15:22 - provided
15:22 - so one positional argument means that
15:25 - this
15:26 - init only takes the self argument and
15:28 - nothing else
15:30 - but here self is provided automatically
15:33 - but we are providing an extra parameter
15:36 - here which is
15:37 - not required and that means this init
15:40 - which we have defined
15:42 - later is valid and this previous
15:45 - init is not valid so always remember
15:48 - it's not allowed to use
15:50 - multiple init method in the python class
15:54 - but if you do this the last init method
15:57 - will be a valid init method and all the
16:01 - other init method
16:02 - will be the invalid init method now one
16:05 - more question you may ask here
16:07 - what if i want to create both kind of
16:10 - instances
16:11 - one which takes no argument here
16:15 - and other which takes one argument or
16:17 - multiple arguments here
16:20 - so the answer is in my previous video in
16:23 - which i have shown you
16:24 - how to provide default value to your
16:28 - arguments
16:29 - so let's say i provide a default value
16:32 - to my
16:32 - argument here now i will create
16:36 - two instances of the same class
16:40 - one takes no argument and other takes
16:43 - one argument
16:44 - and when i run this code no error
16:47 - appears here
16:48 - okay so if you want to create a init
16:50 - method
16:51 - with multiple parameters you can either
16:54 - use this default
16:56 - value for your init method parameters
17:00 - or what you can do here is you can use
17:03 - this parameter
17:04 - which takes a tuple so in the previous
17:06 - video
17:07 - we have seen that we can provide an
17:10 - argument
17:11 - with asterisks in front of it and this
17:14 - means that we can provide multiple
17:15 - parameters
17:17 - to our method here and when we run the
17:20 - code
17:21 - it's also valid we can also provide
17:24 - multiple parameters here and it will
17:27 - also
17:27 - be totally valid so i'm going to run the
17:30 - program once again
17:32 - and you can see it's totally valid so if
17:34 - you want to provide multiple parameters
17:36 - to your init method you can use this
17:40 - kind of notation
17:41 - or you can provide the default value to
17:44 - your
17:45 - parameter or the last thing you can use
17:47 - is you can use
17:49 - for example this type of argument which
17:52 - takes
17:53 - the keyword so kw args here
17:57 - okay and this also we have seen whenever
18:00 - you use this kind of notation
18:02 - that means you want to provide the
18:04 - dictionary right
18:05 - key value pair so let me provide some
18:08 - kind of key value pair let us say
18:11 - name is equal to some kind of name here
18:15 - and then let me run the code and it's
18:17 - totally valid it doesn't give us
18:19 - any error so even though multiple init
18:21 - methods
18:22 - are not allowed in python you can use
18:25 - these type of notations
18:26 - in order to give variable length
18:29 - argument
18:30 - in your init method now let me just
18:33 - remove all the parameters from here and
18:36 - this instantiation from here also and
18:39 - let's take
18:40 - the next question so let's say
18:43 - i want to remove this pass keyword from
18:46 - here
18:47 - and here i want to initialize some
18:50 - values so self
18:52 - dot name is equal to
18:55 - let's say we will provide some name so
18:57 - i'm going to provide
18:58 - a argument called name and
19:02 - self.name is equal to name here and
19:05 - then let's say self dot age here
19:09 - and we provide some value which is not
19:12 - taken
19:12 - from the argument but we provide some
19:16 - static value here
19:17 - is it allowed yes it's totally allowed
19:21 - right so if you want to provide some
19:23 - default value
19:25 - for your attribute you can absolutely
19:27 - provide that
19:28 - without even passing it as an
19:31 - argument so it's not necessary that all
19:34 - the attribute values
19:35 - you need to provide from this argument
19:39 - list
19:39 - you can provide any default or static
19:41 - value here which is not coming as an
19:44 - argument so i hope that clarifies some
19:46 - more
19:47 - details about this init method thanks
19:50 - for watching i will see you
19:51 - in the next video