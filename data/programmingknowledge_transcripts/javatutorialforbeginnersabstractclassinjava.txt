00:00 - hello and welcome back to another video
00:02 - of the tutorial Series so today we'll be
00:04 - covering abstract classes in Java so a
00:07 - class which is declared as an abstract
00:09 - keyword is known as the abstract class
00:12 - in Java and it it can have abstract and
00:14 - non-apstack methods and methods with
00:17 - body okay so before learning the
00:20 - abstract class let's understand the
00:22 - abstraction in Java first okay so what
00:25 - is abstraction abstraction is a process
00:27 - of hiding the implementation details and
00:29 - showing the only functionality to the
00:31 - user okay so so it is a it's nothing but
00:35 - another way to it shows the only
00:37 - essential things to the user and hides
00:40 - the internal details for example sending
00:43 - sms where you type the text and send the
00:46 - message you don't know how the internal
00:48 - processing about the message delivery is
00:50 - done you just only see one tick that
00:53 - that tells you that the message is sent
00:55 - successfully so abstraction displays the
00:58 - very important role over there so so
01:01 - there are several several ways where you
01:04 - can achieve the abstraction
01:07 - uh first one is the abstract class and
01:10 - second one is interface so in this video
01:12 - we'll be covering abstract class and in
01:14 - our upcoming video we will be covering
01:16 - interface okay so abstract class in Java
01:18 - a class which declares an abstract is
01:20 - known as abstract class it can have the
01:22 - abstract and non-abstract methods okay
01:24 - so there are some points that you need
01:28 - to remember
01:29 - while learning the abstract class in
01:31 - Java an abstract class must be declared
01:34 - within an abstract with an abstract
01:37 - keyword okay if you want to declare an
01:39 - abstract class you have to use the
01:40 - abstract keyword before that class
01:41 - implementation okay and it can have
01:44 - abstract and non-f-stack Method and
01:46 - inside the abstract class you can
01:47 - declare uh abstract as well as the
01:50 - non-ab-stack methods and it cannot be in
01:52 - in instantiated okay what is instant
01:55 - instantiated we will discuss and it can
01:58 - have Constructor and static methods also
02:01 - and it can have final methods which will
02:04 - force the subclass not to change the
02:06 - body of the method okay
02:08 - and what is final keyword we have to
02:09 - discussed in our uh past videos and
02:13 - there are some rules uh for the Java
02:15 - extra class and abstract class must be
02:17 - declared with an abstract keyword as we
02:19 - have discussed and now we will see when
02:22 - abstract methods in Java one example
02:24 - will try to understand it by example uh
02:28 - let me
02:30 - uh
02:31 - create one class
02:33 - abstract class
02:38 - okay let me increase my font size
02:42 - okay now
02:44 - yeah I will create one class
02:48 - abstract
02:51 - class
02:53 - bike
02:56 - and inside this I will create one
02:59 - abstract method
03:00 - abstract
03:02 - void
03:04 - run
03:07 - okay so now inside my this public class
03:11 - I will write
03:15 - uh before that this class is extends the
03:20 - by class we are trying to achieve
03:22 - inheritance over here okay so
03:24 - inheritance also we have covered in our
03:27 - past videos if you haven't checked that
03:29 - video go and check first inheritance and
03:33 - void run and inside this I will simply
03:38 - print
03:42 - running
03:46 - my bike okay and now I will declare my
03:51 - main method
03:53 - now inside this I will create one object
03:59 - of that
04:00 - bike class obj
04:03 - one
04:04 - which is
04:06 - okay and not on the
04:10 - it's
04:12 - abstract class
04:15 - and now if I try to call that run method
04:21 - over here
04:27 - yes now if I run this class
04:29 - we'll see what is the expected output by
04:33 - running my bike okay so when you declare
04:35 - this void run and now this abstract
04:39 - class is extending that byte class and
04:41 - when when you declare run and we have
04:43 - already declared one here you can see is
04:46 - implemented in abstract class and here
04:49 - you can see implements methods in bike
04:51 - okay so here we have declared this void
04:54 - run method as an abstract an abstract
04:56 - method doesn't have anybody we have to
04:58 - uh
04:59 - declare that body inside one of this
05:01 - child class and that's why here we it is
05:04 - right it it's written as is implemented
05:07 - in abstract class if you click here the
05:09 - cursor will come here and if you hover
05:12 - over here it implements method in the
05:14 - bike if you write here yes
05:16 - that's why my running my bike is getting
05:18 - printed or printed on the console and
05:20 - next up uh we'll see when the real life
05:22 - scenario of the off an abstract class
05:28 - okay
05:31 - um okay let me get into my IDE
05:34 - and
05:36 - okay okay let me just think of one
05:41 - example
05:42 - okay we'll see one example
05:46 - I will just comment this out because I
05:49 - don't need this and this one also
05:53 - okay uh
05:55 - now this is not extending the bike class
05:58 - anymore okay now I will create one
06:03 - abstract
06:06 - class name is sheet
06:09 - okay and inside this I will write
06:13 - abstract
06:16 - void
06:19 - draw
06:21 - okay and now uh I will create one more
06:25 - class over here
06:30 - sorry
06:32 - class
06:36 - rectangle which is extends the class
06:41 - shape and inside this class I will write
06:45 - the implementation for out of that
06:47 - draw method
06:51 - and I will simply print
06:56 - print what should I print
07:01 - rectangle is
07:05 - drawing
07:09 - and okay and now
07:12 - if I come inside my public class and I
07:16 - will
07:17 - write my main method
07:24 - okay and inside my main method I will
07:26 - create one variable of the shape class
07:28 - obj1
07:30 - by referencing to the rectangle
07:35 - okay and now inside this I will write
07:39 - obj1 Dot
07:43 - bj1 Dot
07:46 - draw
07:47 - okay
07:48 - and now if I run this
07:54 - rectangle is drawing okay so this is one
07:58 - real life scenario we can you can create
08:00 - one shape class and you can write a
08:03 - number of the uh rectangle is there
08:06 - square is there triangle is there and
08:08 - you can try to implement that method
08:10 - inside that same different classes with
08:13 - a different implementation and you can
08:15 - call those uh methods inside the public
08:19 - class using the object of that
08:21 - respective classes okay
08:22 - and now when we will see example of the
08:26 - class having constructed data members
08:28 - and methods okay so first of all
08:33 - let me
08:36 - clear this first previous example okay
08:42 - now I have to clear this also
08:47 - okay now
08:51 - to understand this I will create one
08:55 - more class
08:58 - which is abstract one sorry
09:02 - extract
09:03 - class
09:06 - bike and inside this I will create one
09:10 - Constructor of this class inside
09:14 - Constructor I will
09:17 - simply print
09:20 - by case
09:23 - created okay and out after that I will
09:27 - create one abstract method
09:29 - abstract void
09:32 - run
09:33 - and I will create one known abstract
09:37 - method also void
09:40 - change gear
09:43 - and inside this method I will write
09:51 - gear change it
09:53 - okay and now I will create one more
09:56 - class
09:58 - uh any BMW random
10:03 - extends
10:06 - the
10:07 - by class and now
10:11 - inside this I will write I have to
10:14 - implement here you can see it it's
10:15 - showing some errors what is the error
10:17 - BMW class must be either declared with
10:19 - abstract or the implement the abstract
10:21 - world run method in the bike because
10:23 - when we declared a method as an abstract
10:26 - we have whenever we whenever that class
10:29 - is inherited by any of its subclasses
10:32 - then the implementation of those
10:35 - abstract methods should be there inside
10:36 - this child classes so we have to
10:38 - implement this run method inside this
10:41 - okay
10:43 - now in if I write
10:47 - running
10:50 - safely
10:52 - okay and this is pretty much about this
10:55 - and inside this I will create one object
10:59 - of the
11:01 - bike class
11:05 - bike obj1 it's equals to
11:11 - new
11:12 - BMW
11:15 - okay and after that I will write
11:19 - obj1 Dot
11:21 - run
11:23 - and obj one dot
11:27 - change gear
11:30 - and now if I run this
11:33 - the expected output should be a bike is
11:36 - created uh why why first bike is created
11:39 - getting printed because when we when the
11:41 - program execution reaches at the line
11:43 - number 19 uh the object of that bike
11:47 - class is created and inside the bike
11:48 - class we have declared one Constructor
11:50 - which is printing bike is created that's
11:52 - why the first line which is printing
11:54 - bike is created and after that obj1 dot
11:57 - run and the exam
11:59 - control flow of the code will
12:02 - go inside this abstract void run method
12:05 - and this abstract world run method is
12:07 - implemented inside the BMW class and we
12:09 - have implemented it as running safely
12:11 - that's why running safely is getting
12:13 - printed on the console and after that
12:15 - obj1 dot change gear is executed and
12:18 - inside the change gear method we have
12:20 - written gear change that's why gear
12:22 - change is getting printed on the console
12:24 - so this is the pretty much idea behind
12:27 - the abstract class in Java so I hope you
12:29 - got
12:30 - some idea of the optional class so in
12:33 - upcoming videos we'll be covering
12:34 - interfacing interface in Java this is
12:37 - another way to achieve the abstraction
12:40 - in Java so thank you for watching this
12:41 - video