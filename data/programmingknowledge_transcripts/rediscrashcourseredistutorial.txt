00:00 - so first of all what is Redis so Redis
00:02 - is an open-source BSD licensed advanced
00:06 - in-memory key value store where Keys can
00:10 - contain data structures such as strings
00:12 - hashes lists sets and sorted sets so
00:18 - it's an in-memory key value store with
00:21 - persistence that means radius can be
00:24 - used as a database or a caching layer or
00:28 - a message broker now I already said that
00:32 - its BSD license that means it's open
00:36 - source
00:37 - now Redis is written in C and it's no
00:40 - SQL database now what is no SQL no SQL
00:45 - is an informal loosely defined term for
00:49 - non-relational structured data storage
00:52 - systems like MongoDB man cached CouchDB
00:57 - or Cassandra
00:58 - so following in the footsteps of other
01:01 - no SQL databases such as Cassandra
01:04 - CouchDB or MongoDB Redis allows the user
01:09 - to store vast amount of data without the
01:13 - limits of relational databases so in no
01:16 - SQL databases data can be stored in non
01:20 - relational way now what does the name
01:22 - Redis mean ready stands for remote
01:26 - directory server it is often referred to
01:29 - as a data structure server since the
01:32 - keys can contain strings hashes lists
01:35 - sets and sorted sets so because the keys
01:39 - can contains these type of different
01:42 - data structures it's often referred as a
01:45 - data structure server right so the name
01:49 - come from remote directory server now
01:51 - what is right is used for so as I
01:55 - already mentioned that it's an advanced
01:58 - key value store that can function as a
02:01 - no SQL database or as a memory cache
02:04 - store to improve performance when
02:06 - serving data that is stored in system
02:10 - memory and also it can be used as a
02:12 - message broker so it can be used in
02:15 - place of cashing systems such as
02:17 - memcached
02:19 - now you must be wondering how to
02:20 - interact with Radice so Redis can be
02:24 - installed on a server and it can be
02:27 - interacted with a command-line tool or
02:31 - command-line interface which is called
02:33 - Redis CLI so using this Redis CLI we can
02:37 - interact with our Redis server now this
02:40 - Redis client can be used on any machine
02:44 - and then when we open this Redis client
02:47 - which is a command-line client the first
02:51 - line will look like this so Redis then
02:53 - this kind of angle bracket this we will
02:57 - see in the coming videos how to install
02:59 - Redis and how we can use Redis now let's
03:04 - talk about some of the history about
03:06 - Redis so in early 2009 our developer
03:10 - called Salvatore Sanfilippo he was an
03:14 - Italian developer by the way started the
03:17 - raddest project at that time he was
03:19 - working on a real-time web analytics
03:22 - solution and found that MySQL could not
03:26 - provide the necessary performance so in
03:28 - June 2009 Redis was deployed in
03:31 - production for a website called log comm
03:36 - which was our real-time web analytics
03:39 - website then in March 2010 a company
03:43 - called VMware hired Sanfilippo to work
03:46 - full-time on dradis although reddit
03:49 - remains as BSD licensed subsequently
03:53 - vmware hired some of the other
03:55 - developers who also contributed majorly
03:58 - to assist on the project so this was a
04:02 - brief introduction about Redis and from
04:05 - the next video we will see how we can
04:07 - install Redis and how to use Redis so
04:11 - stay tuned and please rate comment
04:13 - subscribe and bye for now
04:15 - hey guys welcome to the next video on
04:17 - register tool for beginners in this
04:19 - video I'm going to show you how you can
04:21 - download and install Redis on your
04:23 - Windows operating system so let's get
04:25 - started so
04:26 - to fall open your favorite browser and
04:29 - search for Redis and hopefully the first
04:32 - result which will appear here will be
04:34 - from Redis dot IO so you need to just
04:38 - click this link which is for the red s
04:41 - dot IO and then once you click this link
04:44 - you will be able to see the Downloads
04:47 - tab on the top of this website so let me
04:52 - just maximize this browser and I can see
04:57 - this tab which is for downloads right so
05:00 - I'm going to click this downloads tab
05:03 - and then I'm in the download section now
05:07 - when you scroll down a little you will
05:10 - see a Windows section here and there is
05:13 - a message here which says the Redis
05:16 - project does not officially support
05:18 - Windows however the Microsoft open tech
05:23 - group develops and maintains this
05:26 - Windows port targeting windows 64 so
05:30 - Redis project does not officially
05:33 - support Windows but there is a group of
05:36 - developers which makes it available for
05:39 - Windows so we just need to click this
05:42 - link which says learn more and when you
05:45 - click this link you will be redirected
05:47 - to a github page of Redis which is
05:52 - maintained by Microsoft Archive so once
05:56 - you reach to this page and scroll a
05:58 - little down and reach to the readme dot
06:03 - MD here on the third line you will be
06:07 - able to see this message which says you
06:11 - can download the latest unsigned binary
06:14 - and unsigned MSI installer from this
06:18 - page so there is a link for the release
06:22 - page right so just click this link which
06:25 - says release page and then you will be
06:28 - redirected to the downloads page for
06:32 - Redis for Windows right now when you
06:35 - scroll down a little here here are few
06:38 - options to download
06:39 - a Redis on your Windows operating system
06:41 - the first option is by using dot MSI
06:45 - file which is our installer second
06:48 - option is by using our zip file so all
06:50 - the binaries will be backed in this zip
06:53 - file and you need to set up the
06:55 - environment variable so I'm going to
06:58 - show you both the ways so let's start
07:01 - with the dot zip file so I'm going to
07:04 - download this dot zip file first of all
07:06 - and I'm going to minimize the browser
07:08 - and here in downloads I can see this zip
07:11 - file so what I will do is I will create
07:15 - a new folder I'm making this folder in
07:18 - my downloads directory itself and I will
07:22 - name it as Redis but you are free to
07:26 - create this directory anywhere wherever
07:29 - you wish right and then I'm going to
07:32 - extract this zip file inside this Redis
07:37 - folder so let me drag this to this Redis
07:41 - folder this zip file and then I'm going
07:43 - to just extract all files inside this
07:48 - Redis folder right so it's going to
07:51 - extract all the files it's not really
07:54 - big file so it will be extracted really
07:57 - soon and you can see all the files are
08:00 - extracted inside this Redis folder and
08:04 - there is a Redis minus X 64 minus 3.2
08:10 - 3.2 is the latest version at the time of
08:13 - making this video so inside this Redis
08:17 - folder there are some files so these
08:21 - files are all are important but to our
08:24 - of our interest
08:26 - one is Redis server and another is ready
08:31 - CLI so let me minimize this other window
08:34 - here and then I'm going to double click
08:37 - on this Redis - server Exe file so I'm
08:41 - going to double click on this Redis
08:44 - server which is going to start the Redis
08:46 - server and it will ask you to give the
08:50 - administrative privileges or you need to
08:52 - allow the access to
08:53 - the server so here I'm going to just
08:56 - press this button it says allow access
08:59 - and now the Redis server has been
09:01 - started now the default port on which
09:04 - the Redis server start is this one which
09:07 - is six three seven nine okay so this is
09:11 - the default port on which Redis starts
09:14 - on the localhost and then this is the
09:18 - PID of this Redis server right now next
09:22 - I'm going to start the Redis see Li to
09:24 - interact with this server so now this
09:27 - time click on this red is CLI and it's
09:31 - going to start another terminal and it's
09:34 - going to connect to this Redis server
09:37 - and then using this CLI you will be able
09:42 - to interact with this server right so
09:45 - this is the client and server is running
09:48 - in the background right so let me
09:50 - minimize this window also and let me
09:54 - just place this server here and let me
09:57 - open this client on the right hand side
10:00 - right
10:00 - so this is the server and this is the
10:02 - client now in this client when you write
10:06 - ping you will get the response pong so
10:09 - you can see I'm getting the response
10:11 - pong
10:12 - that means the server is running fine
10:15 - and my client is able to connect to the
10:18 - server and get the response right now in
10:22 - order to save something as a key value
10:25 - pair for testing we can just write set
10:28 - and then it's going to give you some
10:31 - intelligence also so I just wrote a
10:33 - keyword set and it gives me the hint
10:36 - that I need to give the key value pair
10:39 - here so as a key I will give a name or
10:43 - name key + i will give any name as a
10:48 - value so for example mark i mean to give
10:51 - as a name right and then i'm going to
10:54 - press enter and it says okay that means
10:57 - this key value that means name is our
11:00 - key and mark is the value of the name
11:04 - which is the value right so to get the
11:07 - value you can just write get and then
11:10 - the name of the key which is name itself
11:12 - in our case and press ENTER and it's
11:16 - going to give us the value right so that
11:20 - means everything is working fine and we
11:23 - are able to connect to the brightest
11:25 - server and it's able to save the values
11:29 - right
11:29 - but sometimes or most of the times you
11:33 - will not go to this server and start
11:37 - from this directory right so you want to
11:41 - you know open your command line from
11:44 - your windows and you want to connect
11:48 - from this command terminal from windows
11:51 - not from this location right so in order
11:55 - to do that you need to set the
11:57 - environment variables so let's set the
12:00 - environment variables for this Redis
12:03 - client and server so we will be able to
12:06 - open this Redis server and read its
12:09 - client from our windows terminal so in
12:13 - order to do this you just need to
12:15 - right-click on your this PC so just
12:18 - right click on this PC and then go to
12:21 - the properties and once this properties
12:25 - window is open we will go to the
12:27 - Advanced Settings so just click this
12:31 - option which says advanced system
12:33 - settings and once this advanced system
12:37 - setting is open we are going to go to
12:39 - the environment variables just click
12:42 - this option which says environment
12:43 - variables and once the environment
12:46 - variables is open you just need to
12:48 - select this option under the system
12:50 - variable which is for path so just
12:53 - double click on this option which says
12:56 - path and here we just need to give a new
12:59 - environment variable and this new
13:02 - environment variable is the path to your
13:05 - Redis folder where your server and Redis
13:10 - CL is there so you just need to copy
13:12 - this part where this Redis server
13:15 - executable file is there and ready CLI
13:18 - file is there so I'm just
13:20 - to copy this part and then into this
13:23 - environment variable I will just create
13:25 - a new variable so I will just click new
13:27 - and then I will paste this part right
13:30 - and then press ENTER and then click OK
13:34 - and then once again click OK and then
13:38 - once again click OK right so now the
13:42 - environment variable for Redis so it's
13:46 - set so now I will just close these two
13:48 - terminals right and then I'm going to
13:51 - open the command line so to open my
13:55 - windows terminal I can right click on
13:58 - this windows icon so just right click on
14:00 - the windows icon and then open the
14:03 - command prompt you can open the command
14:05 - prompt from here also or with the admin
14:08 - privileges so I'm going to open the
14:10 - command prompt with the admin privileges
14:13 - and once the command prompt is open I
14:15 - can start the server from this command
14:18 - prompt so to start the server you just
14:20 - need to write Redis - server which is
14:24 - the executable file here right so I'm
14:27 - going to just write Redis - server and
14:32 - then press Enter which is going to start
14:34 - the Redis server right so because we
14:37 - have set the environment variable now we
14:40 - can start the server from the command
14:43 - prompt from windows from any location
14:46 - right now in order to start the client
14:50 - we will open another command prompt and
14:54 - then we can start this with the Redis
14:59 - CLI command so I'm going to just write
15:01 - Redis - CLI and then press Enter and
15:05 - then we are connected to this server
15:08 - right now once again I can set any value
15:12 - here so for example set and then any
15:15 - name or any key I'm going to say this
15:19 - time the key is any number so I'm going
15:24 - to just write number and then any number
15:28 - for example 50 here right and then press
15:30 - ENTER and then I'm going to get numb
15:34 - number and then press ENTER and is going
15:38 - to give us the value of this number
15:40 - which is 50 right so in this way also
15:43 - you can start your ready server and
15:46 - Redis client okay now in case if you are
15:51 - wondering how we can install this Redis
15:55 - on our Windows operating system using
15:59 - this MSI file which is the more easier
16:02 - version we can just download this MSI
16:05 - file and once this MSI file is
16:07 - downloaded I'm going to go to the
16:09 - location where it's downloaded and once
16:13 - this location is open I'm going to
16:14 - install it so I'm going to minimize my
16:17 - browser and I can see that this MSI file
16:21 - is there in my downloads folder so I'm
16:23 - going to double click on this MSI file
16:25 - and once this MSI file installer starts
16:30 - we just need to click some next button
16:33 - to install it so just wait for some
16:37 - seconds to start the wizard and we just
16:40 - need to click Next here and then just
16:42 - accept terms and condition and then
16:44 - click Next and this is the location
16:47 - where Redis will be installed on your
16:49 - system and then this is the important
16:53 - step so it will ask you if you want to
16:56 - add Redis installation folder to your
16:59 - environment variables so this installer
17:02 - will automatically add the Redis path to
17:06 - the environment variable if you check
17:08 - this option which is more easier also
17:10 - right and then click Next
17:12 - and this is the default port as I
17:16 - already said 6 3 7 9 and then it says
17:20 - add an exception to the firewall we can
17:24 - just click Next here and then we will
17:27 - just set the memory as default and click
17:31 - Next and just click install right so
17:35 - it's going to start installing and some
17:38 - seconds Redis will be installed on your
17:40 - system and once it's installed then you
17:43 - will be able to start Redis from your
17:45 - command
17:46 - once again so once again for example I
17:49 - am going to open the command prompt and
17:52 - then I will give the Redis CLI command
17:55 - so I'm going to just write Redis - CLI
17:59 - and it's automatically has been started
18:03 - and when I just write ping I will get
18:07 - the response pong so you may be
18:10 - wondering that this time I haven't
18:12 - started the Redis server so if you use
18:16 - the Redis installer MSI file to install
18:20 - Redis the server will be automatically
18:23 - started and you don't need to explicitly
18:26 - start the server you just need to
18:29 - connect to the server using the Redis
18:30 - CLI so you just need to open the command
18:33 - prompt and then using Redis CLI you can
18:36 - connect to that server which is already
18:38 - been started by that installer
18:42 - automatically right so this time we
18:44 - don't need to start the server it's
18:46 - already has been started we just need
18:49 - the ready CLI to connect to it so these
18:51 - are the two ways which you can use to
18:53 - install Redis on your Windows operating
18:56 - system hey guys welcome to the next
18:58 - video on register todel for beginners in
19:00 - this video I'm going to show you how you
19:02 - can download and install ready on our
19:04 - Linux operating system for this
19:07 - demonstration I will be using Ubuntu
19:09 - operating system so let's get started so
19:12 - there are two ways of installing Redis
19:15 - on our Ubuntu operating system so first
19:19 - of all we can use apt-get install to
19:22 - install Redis but there is a
19:26 - disadvantage of installing Redis using
19:29 - app cat and that is the version you will
19:33 - install so with apt-get whenever you use
19:37 - app cat to install Redis the
19:40 - repositories are not updated frequently
19:43 - as the Redis version is released so you
19:48 - will be able to see that you have
19:50 - installed the older version of Redis if
19:54 - you use apt-get command so for example
19:57 - let's go to
19:59 - this website so search for Redis and the
20:03 - first result which will appear here will
20:05 - be from Redis dot IO and we will see the
20:08 - version of for Redis right now so as I
20:11 - can see here the red is for point zero
20:14 - point zero is the latest version right
20:17 - and we can see using the apt-get command
20:21 - so I'm going to open the terminal here
20:23 - in Ubuntu and here I can just type at -
20:28 - cash - no the version of Redis available
20:32 - right so just write app cache and then
20:35 - policy and then the ready server so just
20:39 - write Redis - server okay
20:42 - and then press ENTER and then you will
20:45 - be able to see the version so as far as
20:48 - I can see the version available using
20:51 - apt-get command will be 2.8 or something
20:56 - near to that right for my Ubuntu
21:00 - operating system it may be different if
21:02 - you have the more newest version of open
21:05 - - I have Ubuntu 14.04 but if you have
21:09 - for example ubuntu 16.04 or ubuntu 17.04
21:16 - it may be little bit better this version
21:19 - but it will not be the latest version
21:22 - which is four point zero point zero in
21:25 - most of the cases right
21:27 - so if you want the easiest way then you
21:31 - can just write sudo apt - get install
21:35 - Redis - server okay
21:39 - and then once you press ENTER it's going
21:42 - to install ready server on your open to
21:45 - operating system but the version of this
21:48 - ubuntu server will be 2.8 right so in
21:51 - this case i'm going to show you how you
21:53 - can install the latest version of Redis
21:56 - so for that I'm going to just clear the
22:00 - terminal let's go to the website once
22:02 - again so I'm on the red s dot IO website
22:05 - and I will just click downloads here and
22:08 - then I will go little bit down and I can
22:12 - see the
22:13 - for point zero point zero and I will
22:16 - scroll a little more down and I can see
22:20 - this installation step here and here
22:24 - it's using W get to get this zip file
22:29 - and then we need to unzip the zip file
22:32 - and then we will do CD and then we will
22:36 - make the Redis binaries right so this is
22:40 - the procedure for installing Redis on a
22:44 - Linux operating system or a Mac
22:46 - operating system this procedure will be
22:49 - almost the same right so let's open that
22:51 - terminal first of all and then once the
22:54 - terminal is open we are going to install
22:57 - two packages here one is the build
23:00 - essential package and the other is the
23:02 - TCL package build essential package we
23:05 - use to compile our binaries for the
23:09 - raddest server and TCL package we will
23:11 - use to test our binaries okay so first
23:15 - of all we will give this command sudo
23:17 - apt - get update first of all we will
23:22 - update all the repositories and I'm
23:24 - going to give my Ubuntu password so
23:26 - updates is done I'm going to just clear
23:29 - the terminal once again and this time I
23:32 - will give sudo app - get install build
23:36 - essential and TCL okay and then press
23:40 - ENTER which is going to install these
23:43 - two packages in my case I can see both
23:46 - the packages are already installed so if
23:49 - they are already installed you will see
23:52 - these kind of message that they are
23:53 - already installed otherwise if they are
23:56 - not present they will be installed on
23:57 - your system
23:58 - so first of all give this command to
24:01 - install these two packages and then once
24:04 - again let me clear the terminal and then
24:06 - we are ready to install Redis using
24:09 - these command which are there on the
24:12 - Redis dot IO website right so the first
24:15 - command is just to download this tar
24:18 - file so what we are going to do is I'm
24:22 - going to first of all make a Redis
24:24 - folder so let me make
24:27 - this folder and kdi are Redis and then I
24:31 - will CD to this Redis folder or
24:35 - directory and inside this directory I'm
24:38 - going to give this w get command which I
24:41 - copied from the Redis website so let me
24:43 - just maximize the terminal and just give
24:48 - this command so w get HTTP download
24:51 - whatever version of the Redis you are
24:54 - downloading so at the time of making
24:56 - this video four point zero point zero is
24:58 - the latest version so you can see this
25:01 - version 4.0 point zero right otherwise
25:04 - this version will be different in your
25:06 - case if the latest version is released
25:08 - right so this just give this command and
25:12 - then press Enter it is going to download
25:14 - this tar file you can see the star
25:17 - profile is downloaded and then let me
25:20 - clear the terminal once again let me do
25:22 - LS once again and now we are going to
25:25 - give the tar command to unzip this tar
25:30 - file so just give this command copy and
25:34 - paste nothing else and then once again
25:36 - LS and you can see this red is for point
25:40 - zero point zero directory is extracted
25:42 - and then we will go inside
25:45 - this Redis directory CD to this
25:48 - directory and then we just need to give
25:51 - them make command so just give make
25:54 - command so just right make here and then
25:57 - press enter which is going to start the
26:01 - making of this Redis binaries it can
26:06 - take some time so just wait for the
26:09 - process to complete so now I can see the
26:12 - make command is successfully completed
26:14 - and at the end of the make command I can
26:17 - see this message which says it's good
26:20 - idea to run make tests after this make
26:23 - come on so I'm going to run make test
26:26 - now so I'm going to just give make test
26:29 - command and then press ENTER and let it
26:31 - run so now the make test command is also
26:34 - finished so now let's go to the next
26:37 - step so I'm going to the website
26:40 - so make test is finished and now it says
26:43 - we just need to go to the source and we
26:46 - need to start the Redis server using the
26:50 - source folder and then Redis server okay
26:54 - and ready CLI will be started from
26:57 - source read is CLI right so let's start
27:01 - ready server first of all so let's do LS
27:05 - here and I can see this source directory
27:08 - right so I can just start the Redis
27:11 - server like this so you just need to
27:14 - give SRC /r Addis so okay and then press
27:20 - Enter which is going to start the Redis
27:22 - server and you can see the Redis server
27:25 - has been started I will just move it to
27:28 - the left hand side this command line
27:31 - terminal and now I will open the next
27:33 - terminal so let me open the next
27:35 - terminal and then in this next terminal
27:39 - I'm going to start the red disk line so
27:42 - I will just go to the Red List directory
27:44 - once again where I have installed or
27:48 - created the binaries and then I will go
27:51 - to the Redis directory and then I will
27:55 - give this Redis command so SRC and then
27:59 - forward slash red as I think so let me
28:03 - do LS once again and yes SRC is here so
28:07 - I will give SRC forward slash Redis
28:12 - client or CLI I think yeah so ready CLI
28:17 - let me just make it a little bit bigger
28:20 - so we can see it perfectly so now you
28:24 - can see we are connected to the server
28:26 - using this IP address and on this port
28:29 - so you can see the Redis server was
28:32 - started on this default port 6 3 7 9 and
28:36 - we are connected to this port using the
28:38 - Redis CLI so let's set something so I'm
28:42 - going to set for example name max for
28:46 - example and then press Enter
28:49 - and it says ok and now I will just say
28:52 - GATT name and its
28:54 - to give me the name max so everything is
28:57 - working fine but one more thing we can
29:01 - do here is because we have installed
29:03 - Redis on some directory on a particular
29:08 - directory every time we need to start
29:10 - Redis we need to CD to that directory
29:14 - and then we need to start the server and
29:17 - we don't want that we want that whenever
29:21 - we give the Redis server command from
29:24 - any directory
29:26 - we just need to start the Redis server
29:28 - so in order to do this what we need to
29:30 - do is let me just minimize this and let
29:34 - me just make some eyes this terminal and
29:36 - we are inside the raddest directory as
29:39 - you already know and you can see the SRC
29:43 - folder is already here right so this is
29:47 - the SRC folder now the last command you
29:50 - can give here is make install so that
29:54 - whenever you give Redis server command
29:56 - from anywhere from any directory it will
29:59 - start the server and know you don't need
30:01 - to navigate to this particular directory
30:04 - in order to start the Redis service so
30:07 - just give make install command in order
30:10 - to install ready server and the ready
30:12 - CLI so let's do that and it says that
30:17 - cannot create regular file because the
30:20 - permissions are denied permission denied
30:23 - that means I need to give the sudo
30:26 - command before the make install so just
30:28 - give sudo make install command here okay
30:32 - so you just need to give sudo make
30:35 - install command and then once again
30:38 - press enter and now the Redis server and
30:42 - ready CLI and other stuff which are
30:45 - there inside this SRC folder is
30:48 - installed right so let me just close
30:52 - this terminal and let me open the fresh
30:55 - terminal now and we are not inside that
30:58 - Redis directory right we are in our home
31:01 - folder and then from here I will just
31:03 - give Redis server command and
31:07 - it will start the server so I don't need
31:10 - to navigate to that's that Redis direct
31:13 - tree because Redis is now installed on
31:16 - on my system in a same way I can start
31:19 - the client so I will just start a new
31:21 - terminal and I will just give Redis -
31:25 - CLI to connect to it and I am connected
31:29 - right so in this way you can download
31:31 - and install Redis on your one - Linux
31:35 - operating system hey guys in this video
31:37 - I'm going to show you how you can
31:39 - download and install Redis on your Mac
31:42 - operating system so let's just start it
31:44 - and let's see how we can install Redis
31:46 - on our Mac so first of all open up your
31:49 - favorite browser and search for Redis
31:51 - and the first link which will appear
31:53 - here will be from Redis dot IO so we
31:56 - will just click this link which is ready
31:58 - Scott IO and here we can see the
32:02 - homepage of Redis what we want to do
32:05 - here is we want to go to that downloads
32:08 - section so we will just click this
32:11 - option which says download and then when
32:15 - we scroll down a little we can see this
32:18 - downloads button but don't click this
32:21 - download button yet we will see how to
32:23 - install Redis on our Mac while scrolling
32:27 - or down a little so when we scroll down
32:31 - a little here you can see the
32:34 - installation steps for read is so first
32:36 - we need to download the star file and
32:39 - then we need to unzip or unter this tar
32:44 - file and then we need to make the Redis
32:48 - binaries right now let's see what is the
32:51 - latest version at the time of making
32:53 - this video for the Redis so we can see
32:57 - in the Downloads button that four point
33:01 - zero point zero is the latest stable
33:04 - version at the time of making this video
33:06 - right so we will install the four point
33:09 - zero point zero version of Redis now
33:12 - sometimes this dublicate command may not
33:17 - work on your Mac operating system
33:20 - so we will use the curl command to
33:23 - download the star file okay so instead
33:26 - of W gate we will use the curl command
33:28 - and then we will follow the same
33:32 - procedure as described here with some
33:35 - additional commands okay so what we will
33:40 - do first is on my desktop for example or
33:43 - at your chosen location just create a
33:47 - folder so I'm going to create a folder
33:49 - and I'm going to name it as Redis okay
33:53 - so inside this Redis directory I'm going
33:57 - to just download this tar file and unter
34:01 - it and then make the binary is out of it
34:03 - okay so then once I have this folder I
34:08 - will just see the info get the info and
34:11 - then just see what is the path of this
34:15 - Redis directory and I'm going to copy it
34:18 - and then I'm going to open our terminal
34:21 - so just open a terminal and then just CD
34:25 - to this Redis directory so because it's
34:28 - on my desktop I can just use this old
34:33 - location so user and then whatever is
34:35 - your username and then forward slash
34:38 - desktop and then forward slash all Redis
34:42 - I just need to write for slash Redis and
34:45 - then I'm inside this red is folder right
34:49 - now we will do the LS and there is
34:53 - nothing inside this Redis folder and
34:55 - let's just open this folder so we will
34:58 - see what's happening inside this folder
35:01 - okay so let me just resize it so we will
35:06 - see all the things which are happening
35:08 - here and now we will just give a curl
35:11 - command so just write curl and then - oh
35:15 - and then the location of this tar file
35:21 - so just copy this URL from here which is
35:26 - there on the downloads page without W
35:29 - get okay so just copy this you
35:33 - and then paste it here on the terminal
35:37 - and then press Enter which is going to
35:39 - download this star file and once it's
35:42 - downloaded we will just unter it so you
35:46 - can see the star file is downloaded
35:49 - right and to untie rate or extract it we
35:54 - will use this command so right click
35:57 - copy and then just paste it here which
36:03 - is going to extract this tar file and we
36:07 - can see this folder is extracted and
36:11 - inside this folder we have some files
36:15 - right so the next step is to CD to this
36:19 - directory which is read is minus four
36:22 - point zero point zero and then make it
36:24 - right so you can see the step CD to this
36:28 - four point zero point zero directory and
36:30 - give them make command so we will do the
36:32 - same CD to the where is four point zero
36:36 - point zero directory and then give a
36:39 - make command which is going to make the
36:42 - binaries for the Redis over and let
36:45 - Reddy's client and other Redis stuff
36:48 - right so now the make is finished and at
36:52 - last I can see this message which says
36:55 - it's a good idea to run make test so
36:58 - let's run make test I'm going to just
37:01 - give this command we just make test and
37:03 - then plus enter so now the make test
37:06 - command is also finished and I can see
37:08 - this message which says all tests passed
37:10 - without error right so I know that
37:14 - everything is okay and now I can start
37:17 - the Redis server and then Redis client
37:20 - okay so let's see what are the command
37:23 - for those so whether server can be
37:27 - started from the source directory and we
37:30 - just need to run this command which is
37:32 - ready server and same we need to do for
37:36 - Redis client so from the source
37:38 - directory we can just run this Redis CLI
37:42 - right so let's do this so I'm going to
37:46 - open a new terminal so let me open a new
37:51 - terminal so now I have two terminals
37:54 - right so on the first terminal I will
37:57 - just do first of all LS here or let me
38:01 - clear the terminal first of all so clear
38:03 - and then I will do LS here and I can see
38:06 - there is a source directory here so I
38:09 - will just get this command SRC and then
38:14 - red is - so right so red is - server and
38:21 - press enter which is going to start the
38:24 - ready server and it has started
38:27 - listening on this port which is the
38:29 - default port for Redis which is 6 3 7 9
38:33 - and this is the PID of this Redis server
38:36 - right now once again I will navigate to
38:40 - this directory where I have installed
38:42 - Redis so it's in my desktop and then
38:47 - I'll go to the reddits directory then
38:49 - the red is for point zero point zero and
38:52 - then I will just give this command which
38:56 - is SRC forward slash right as CLI so let
39:01 - me do LS so I know that I am in the same
39:05 - directory and then I will just write SRC
39:09 - and then red is CLI and I'm connected to
39:14 - the Redis server I can see this kind of
39:18 - prompt here that means I'm connected to
39:21 - my already server right so first to test
39:25 - whether everything is working fine or
39:28 - not you just need to write in here and
39:31 - then press ENTER and if in return you
39:35 - get pong then you know that everything
39:38 - is working fine you can also set
39:41 - something so for example set name is
39:44 - equal to max' and then press Enter and
39:47 - then you can get the name so get name
39:52 - and then you can get the name okay and
39:55 - then you can give the save command to
39:58 - save everything for example
40:01 - so everything is working fine but for
40:05 - example when I open a new terminal and I
40:09 - want to run Raditz CLI for example from
40:12 - here how can I do it so I just want to
40:15 - write Redis - CLI and I want to run it
40:21 - so let me just correct the spelling here
40:24 - so where does CLI and I want to run it
40:27 - and it says command not found because
40:31 - right now the raddest CLI command can be
40:35 - only run from this directory right so
40:38 - you need to CD to this directory and
40:41 - then run the Redis c'mon
40:44 - so how to solve this problem so this
40:46 - problem can be solved by running the
40:48 - make install command inside your
40:51 - registry so I'm going to just stop the
40:55 - server for now and now I will once again
40:59 - do for example PWDs so you know that in
41:04 - which directory I am in so I'm in my
41:06 - Redis four point zero point zero
41:09 - directory right let me clear the
41:12 - terminal so you will be able to see
41:14 - better so PWD present working directory
41:17 - and you can see I am in my desktop
41:22 - directory and then there is a Redis
41:24 - directory here
41:25 - which is this one and then we are in the
41:29 - raddest for point zero point zero
41:31 - directory right so we have run here the
41:35 - make and make test command and you just
41:38 - need to write make install command here
41:41 - with the sudo privileges so you just
41:46 - need to write sudo make install here and
41:48 - then press enter and you just need to
41:52 - give your max password here and then
41:54 - press enter and then it will start the
41:58 - make install command and then you can
42:02 - see everything is installed and now you
42:05 - can run ready server and red is CLI from
42:10 - anywhere right so let me just close
42:14 - this terminal and close this terminal
42:16 - also let me just terminate everything
42:19 - and I will open a new terminal so that
42:24 - we can check whether it's running from
42:26 - any other place other than this Redis
42:30 - folder or not so I will start to
42:33 - thermals in the first terminal I will
42:36 - write Redis server and it starts from my
42:41 - home directory and now I will give the
42:44 - Redis CLI command so just give it a CLI
42:48 - and then I'm connected to this server
42:51 - right so everything is working fine and
42:55 - now you can start already server and you
42:59 - can use why this CLI command from
43:01 - anywhere from your directory structure
43:05 - right so in this way you can download
43:07 - and install Redis on your Mac operating
43:10 - system hey guys welcome to the next
43:12 - video on register troll for beginners in
43:14 - the last few videos we have seen how we
43:17 - can download and install Redis on our
43:19 - Windows Linux and Mac operating system
43:22 - now further videos I will be making on
43:25 - my Linux operating system that is my
43:28 - open to operating system because more
43:31 - frequently or most frequently this Redis
43:34 - server is installed on a Linux machine
43:38 - and it's used from a Linux machine so it
43:42 - will be more appropriate to go further
43:44 - with this Linux operating system but all
43:48 - the command which I'm will be using on
43:50 - this Linux operating system using the
43:52 - command line are applicable on the
43:54 - Windows terminal also and the Mac
43:57 - terminal also so the command will not
43:59 - change and you just need to start the
44:02 - Redis server and ready CLI on your
44:05 - Windows or Mac OS and then follow these
44:08 - instruction which I'm giving on my human
44:12 - to operating system so if you are on
44:14 - Windows or Mac you just need to follow
44:16 - the same steps you just need to open two
44:20 - terminals on your operating system it
44:23 - can be Mac or it can be
44:27 - your windows and of course the Linux and
44:30 - on one terminal you just need to start
44:33 - the Redis server so I'm going to just
44:37 - start the Redis server here and on the
44:40 - other one you just need to start the
44:43 - Redis CLI okay so looks simple right the
44:48 - same step you need to do on your windows
44:51 - or your Mac ok so once our server is
44:54 - running we can minimize this and start
44:58 - working to interact with the server
45:01 - using the Redis CLI okay now let's start
45:05 - with the data types which are there in
45:09 - Redis and then we will see how we can
45:12 - use one of the data type which is string
45:15 - so basically there are five data types
45:17 - which we can use in Redis and as I
45:21 - already told you that Redis is a key
45:24 - value storage so the key is printable
45:29 - ASCII right and it can be up to 512
45:34 - megabyte so it can take a really big key
45:39 - for example and it should be a printable
45:41 - ASCII and then we can see the data types
45:44 - of values so the values can be strings
45:48 - and then the containers of string so
45:52 - they can be hashes or lists or sets or
45:57 - sorted sets right so the key are
46:00 - printable ASCII is we can use printable
46:04 - ASCII is for keys and for values we can
46:06 - use strings hashes less sets and sorted
46:11 - sets right and this ready string can be
46:16 - up to 512 megabyte ok now let's start
46:21 - with the practical example so we will
46:26 - start with the basics and we will try to
46:29 - set some values and get some values so
46:33 - for example I have set some values
46:36 - already to this right
46:39 - server so what I will do is to get all
46:44 - the keys which are set you just need to
46:47 - write keys and then the pattern which is
46:51 - s tricks here so Asterix is a wild card
46:54 - and it's going to search all the keys
46:58 - which are saved in your database and
47:01 - then give you the results so for example
47:05 - I have set two keys which is name and
47:08 - name - and it has given me both the keys
47:13 - which I have saved right so in order to
47:16 - see all the keys which are saved in your
47:20 - Redis database you just need to write
47:22 - keys and Astrix right now as I already
47:27 - told you that to set some value as a
47:31 - string you just need to use set and then
47:35 - a key for example in this case I'm going
47:38 - to write name 3 because name and name
47:43 - one is already set so I'm going to just
47:45 - set the third key which is name 3 and
47:48 - then I'm going to give some name right
47:52 - and then press ENTER and then once again
47:54 - I will just write keys as tricks and now
47:59 - I can see there are 3 keys stored in my
48:03 - database right so set is to set a string
48:07 - value and as you have already guessed
48:11 - from my previous videos I've shown you
48:13 - this command which is get command and
48:15 - whatever a key you will write here it
48:19 - will give you the value of that key
48:21 - which is Mark in this case right in the
48:26 - same way you can do name to get name -
48:29 - and it's going to give you the value of
48:31 - name - ok so get and set we are already
48:34 - clear now there is a delete command del
48:38 - ok so using a del and the key name we
48:43 - can delete some key value pair so for
48:46 - example I want to delete name - for now
48:49 - and then I will just press Enter
48:52 - is going to give me the number of keys
48:56 - affected and in this case there is only
49:00 - one key with the name - and now when I
49:03 - just do this command which is keys
49:07 - Astrix now it just gives me two values
49:11 - which is name and name three and because
49:15 - name - he is already deleted so I will
49:19 - not see this name - again right in the
49:23 - same way for example I want to delete
49:26 - name three key then also I can do del
49:31 - and then name three and then press enter
49:35 - and I can see the result one he affected
49:38 - and then now only one key left which is
49:43 - name okay so this is how you can delete
49:47 - some value right now let's set these
49:50 - names once again so for example name Tom
49:53 - and once again do the gate for example
49:56 - get name now you will see that the key
50:00 - value of name is overwritten with the
50:05 - name Tom so previously the value of name
50:09 - was mark you can see here and now it's
50:13 - Tom so whenever you set the value of
50:19 - previously set key then whatever value
50:23 - you will give for this key will be
50:26 - overwritten right so value will be
50:29 - overwritten for that key now for example
50:31 - if you want to delete all the values
50:34 - which are stored in our Redis database
50:36 - then we can use flush all command so for
50:39 - example I will set some more values or
50:42 - to see this example for example name -
50:45 - is equal to John and then I'm going to
50:49 - give name 3 is equal to max so now we
50:54 - have 3 names so we can just give keys
50:57 - and Astrix to see that so we have 3 keys
51:01 - stored right now for example I want to
51:04 - delete all these keys then I can give
51:07 - flush also just right flush all command
51:12 - and then it's going to delete all the
51:14 - values so it says okay and then once
51:16 - again when we give keys Asterix
51:19 - then you can see empty list or set so
51:23 - all the values are deleted using flush
51:26 - all command so these are some of the
51:30 - most frequently used commands which we
51:33 - can use with the strings in the next
51:36 - video also we will see some of the more
51:39 - commands which we can use with the
51:42 - string values hey guys welcome to the
51:45 - next video on register troll for
51:46 - beginners in the last video we have seen
51:48 - how we can use some of the command with
51:51 - the string values now in this video also
51:53 - we will see some more command which we
51:55 - can use with the string values in Redis
51:59 - so let's get started first of all I will
52:02 - show you one command which is valid in
52:05 - Linux terminal also which is the clear
52:08 - command so when you do clear it's going
52:13 - to clear your terminal right so you can
52:15 - see when I have given the clear command
52:18 - it's going to clear the terminal and
52:21 - basically what it does is it just gives
52:24 - some of the some space in between your
52:28 - last command which you have executed and
52:31 - this after this clear okay so now you
52:36 - can see this terminal is totally empty
52:40 - now right and now we can start executing
52:44 - some of the other command so right now
52:46 - our database is totally empty I think so
52:50 - we can check it with keys
52:52 - Astrix and now let's set some values and
52:55 - this time we can use a command which is
53:00 - called set e^x okay and this set e^x is
53:06 - the command which we can use with second
53:10 - so you just need to write set e^x and
53:13 - this means set the value with the expiry
53:17 - of the key okay and then for example I
53:21 - just give the key and then I need to
53:24 - give some second so you can see the next
53:28 - option I need to give here is the number
53:30 - of seconds I want this key to live in my
53:35 - raddest database and after that it will
53:38 - be automatically deleted so for example
53:40 - 10 second I want to give here and then I
53:44 - want to give the value of it for example
53:47 - max okay now when I just press ENTER
53:53 - it's going to say ok and when I just get
53:58 - name it's there right and then there is
54:02 - a command called TTL and then you can
54:05 - use the key with this and it says - and
54:09 - what is this - so TTL is the command for
54:14 - time to live so it will check for how
54:19 - much time or how long is this key is
54:23 - going to live okay and it says two
54:25 - seconds okay so this is time to live and
54:29 - then the key and then it returns us to
54:33 - second because eight Tests eight second
54:36 - has already passed often after giving
54:38 - this command and once again for example
54:41 - I will just say get name and it's no
54:46 - longer there right because we have just
54:49 - set ten-second expiry on this key so
54:54 - after 10 second it will be automatically
54:55 - deleted right for example I will just
54:59 - give 50 second expiry for example here
55:02 - so 5-0 max and then I will just give a
55:07 - TTL and then name and then you can see
55:11 - it shows 44 seconds once again 40 second
55:16 - and then it will show you the seconds
55:20 - for which this key is going to live okay
55:23 - and after 36 second it will be deleted
55:27 - right so these are two more command
55:29 - which you can use with the string right
55:32 - now let's set one
55:34 - more value for example set name - and
55:39 - name - is equal to Tom okay and now we
55:45 - can for example override this value so i
55:49 - stoled you whenever you write something
55:51 - like this set name - and some other name
55:56 - for example john then it will overwrite
56:00 - the value of name - for example I take
56:05 - name - as my key and give some other
56:08 - value it will overwrite but if you don't
56:10 - know if name - is there and if you don't
56:14 - want to overwrite name - then you can
56:17 - use this command called set and X and
56:20 - this set annex first of all checks if
56:23 - the this key is available or not and if
56:27 - this key is not available then only it's
56:29 - going to you know create this key
56:32 - otherwise it's going to just ignore
56:35 - right so let's give this come on and it
56:39 - says 0 0 because no key is affected due
56:45 - to this command that means when we do
56:48 - get name - we can see this name is not
56:54 - overwritten because this command is used
56:58 - or will be successful when this key is
57:02 - not available in the database right if
57:06 - it's available then it's going to just
57:09 - ignore and if it's not available then
57:12 - it's going to create a new value for
57:13 - example I will just give set and X 3 and
57:19 - this value is not available there so I
57:23 - will just give some other name and it
57:26 - says integer 1 that means one value is
57:30 - affected and then I will just do keys
57:34 - Astrix to see the values okay and I can
57:38 - see name - is there and name 3 is there
57:41 - that means this was successful right and
57:44 - I can also get the value from
57:48 - get name three also and I can see that
57:51 - value is there let me clear this
57:54 - terminal now if you want to know the
57:56 - length of the value stored in the key
57:59 - then you can just use STR le M command
58:04 - okay and then the key name for example
58:06 - name - and it's going to give you the
58:08 - length of that key that means for
58:12 - example I do get name - here you can see
58:16 - it's a three character word and that's
58:19 - the length of this value right and
58:21 - that's the result here okay now for
58:24 - example if you want to set multiple
58:26 - values with the same command we use M
58:30 - set so just use M set and then the key
58:34 - and the value
58:34 - for example this time I want to insert
58:39 - some numbers so I will just say num1 and
58:43 - I will just give 50 here and then after
58:47 - a space I will just write num2 and then
58:51 - I will say 60 here num 3 and for example
58:56 - 70 and so on right and then press Enter
58:59 - and I say is okay and then when I say
59:03 - keys keys
59:05 - Astrix it's going to give me name 3 and
59:08 - name - which were already there and then
59:11 - num1 and num2 because here you can see I
59:15 - have given the same key two times right
59:18 - so num1 was there num2 and num2 i have
59:21 - given two times let's see the value
59:24 - inside the num - so num to get num2 and
59:29 - let's see the value inside it so the
59:32 - value inside is is the last set value so
59:35 - whatever is the last set value you will
59:40 - set for this key it will show you that
59:43 - value here right so once again for
59:47 - example I will just give em set I'm set
59:51 - and then num 3 here and then gave the
59:57 - value of for example 60 here and then
60:00 - once again do
60:01 - the key Asterix is going to give me
60:04 - named three named num tree num to name
60:08 - two and one right so right now I have
60:11 - two names and three numbers inside my
60:15 - database now if we want to set the
60:17 - expiry in millisecond there is a command
60:20 - called P set X and then it takes the
60:25 - value in millisecond you can see in the
60:28 - intellisense also right so I'm not going
60:30 - to set any value here but I just wanted
60:34 - to show you this command also exists
60:36 - which will take the value of seconds in
60:40 - milliseconds right so this is P set X
60:44 - okay now there is a one more command
60:47 - which is called Dec R and incr which we
60:54 - use to increment and decrement the value
60:56 - of some key so for example I want to
60:59 - increment the value of key num1 so let's
61:04 - see the value first of all so value of
61:07 - num1 is right now 50 and then we can
61:12 - just write Dec are num1 and then press
61:19 - enter and now the value becomes 49 right
61:23 - it will give you the result and when you
61:25 - give get num 1 is going to give you the
61:29 - value 49 so this Dec our command will
61:33 - decrement the value by 1 and if you do a
61:36 - and see our command to the num 1 for
61:40 - example once again the value will become
61:43 - 50 so I NCR and Dec are is to decrease
61:48 - and increase the value by 1 okay let me
61:51 - clear this terminal once again now there
61:54 - is one more command to increment or
61:58 - decrement the value by some number and
62:01 - this is for example I NC R by so incr by
62:08 - and the key name for example num1 once
62:12 - again and i want to increment the
62:15 - value of num1 pi5 so earlier it was
62:18 - fifty right and then it's going to
62:21 - become fifty-five because I have
62:23 - incrementing the value by five in the
62:27 - same way I can do Dec are by and on the
62:31 - same number num1 and for example I want
62:34 - to reduce the value by thirty right and
62:37 - then press ENTER and now it becomes
62:40 - twenty five so you get num1 and the
62:45 - result or the value inside it is 25 now
62:48 - the last command I want to show here is
62:51 - the append command so let me just set
62:57 - one more value for example set and then
63:01 - the key name for example I will name it
63:04 - as my key okay and the value here I want
63:09 - to set is hello okay and then press
63:14 - Enter and then get my key it's hello
63:20 - right now there is a append command so I
63:23 - can just use a PP en D append and as the
63:27 - name suggests I can append something to
63:30 - the key right so I want to append to my
63:34 - key so I will just write the key name
63:36 - and whatever string you want to append
63:38 - here so for example in double quotes I
63:41 - will just give a space here and then I
63:45 - will just write world here okay and then
63:47 - press ENTER and you can see the number
63:50 - of characters I think for the new value
63:53 - right so once again get my key and it's
63:58 - going to give me hello world so space
64:01 - world is appended to the my key right so
64:07 - append is used to append a string so
64:10 - these are some of the other command
64:11 - which you can use with the string values
64:14 - hey guys welcome to the next video on
64:16 - register tool for beginners in the last
64:18 - two videos we have talked about string
64:21 - values in Redis now in this video I'm
64:24 - going to show you how you can use hashes
64:26 - as values in right
64:28 - now first of all what are hashes hashes
64:32 - are map between the string fields and
64:35 - string values hence they are perfect
64:38 - datatype for representation of objects
64:41 - in red is every hash can store up to
64:44 - four billion field value pairs now you
64:49 - may ask that I have talked about key
64:52 - value pairs but what are these field
64:55 - value pairs right so let me show you a
64:59 - slide and then you will be able to
65:01 - understand in a better way so this was
65:04 - the slide similar kind of slide I have
65:06 - shown you in the string data type also
65:09 - right so in the hashes we are talking
65:12 - about hashes now so in the case of
65:15 - hashes the keys are same which are
65:18 - printable ASCII you can see here but in
65:21 - the case of string we were using string
65:24 - array here right and that string array
65:27 - was about 512 megabyte right now in the
65:32 - case of hashes we use this kind of map
65:37 - of field value right so field is this
65:41 - one and value is this one okay in the
65:45 - cases of string it was like a like only
65:48 - a string value right so I will give you
65:52 - an example for example I want to store
65:54 - students database or students in for
66:00 - data then what I can do here is I can
66:04 - say student 1 as a key so student 1 as a
66:08 - key and then for example student has
66:11 - what attribute student has for example
66:14 - name surname age in which class he is so
66:19 - here field can be name and then for
66:23 - example name is equal to mark value 1
66:26 - can be mark right age is the field 2 for
66:30 - example in this case and then for
66:33 - example 15 is the value 2 here right so
66:37 - name can be field 3 here and then
66:40 - whatever the surname of the
66:42 - and it will be value three right so for
66:46 - every student we can just provide this
66:50 - kind of map for his information so this
66:55 - is how hash data type as well you walk
66:58 - in Redis right now let's take a
67:02 - practical example and then we will be
67:04 - able to understand this concept so I'm
67:08 - going to just start the Redis CLI and
67:11 - let me see what are the keys there so
67:14 - I'm going to just write keys pattern and
67:16 - these are all the keys so I'm going to
67:18 - flush all so let me flush all here so
67:23 - all the keys will be deleted and now I'm
67:26 - going to clear this CLI and let's start
67:30 - with the hashes right so as we have seen
67:35 - in the case of strings we can just use
67:39 - this set command to set a key value pair
67:42 - now in the case of hashes we can use H I
67:47 - am set to set a key field value pair
67:53 - right so for example we were talking
67:55 - about student information database right
67:59 - so just write H M set H stands for
68:03 - hashes here I am set we have already
68:05 - seen in the case of strings also right
68:07 - so just write H am set and then for
68:11 - example s tu1 for student 1 and then for
68:15 - example I will just write name is equal
68:18 - to max' right and then I can also give
68:23 - the second field value pair right so for
68:27 - example his age is equal to 15 and then
68:30 - for example class in which class he is
68:33 - so he isn't for example 8th class okay
68:39 - this is just an example so this is
68:42 - student 1 information let me just give
68:45 - this minus here so we will be able to
68:48 - understand properly and then when I
68:50 - press ENTER it's going to say ok and to
68:54 - get this
68:55 - value there are two ways of getting so
68:59 - you can just say H get and the key name
69:03 - for example s T u minus one is the key
69:07 - name and you can give the field name
69:10 - whatever field you want to get or you
69:13 - can just say get a key name and here get
69:17 - we have already seen in the case of
69:19 - strings also and you just need to add H
69:23 - before it and then the student key name
69:26 - I say is error because we just need to
69:30 - give the field name also so what field
69:32 - there we want to get so we want to get
69:35 - for example name of student 1 it says
69:39 - max here right now if you want to get
69:42 - all the information about student 1 you
69:46 - can just say H get all ok and here you
69:51 - can just give the student one key name
69:54 - and it's going to give you all the you
69:58 - know field value information about the
70:01 - student 1 so for example name max age 15
70:05 - plus 8
70:06 - okay so let's add one more student for
70:10 - example so once again this command
70:13 - it's hm set student 2 and then the name
70:18 - for example Tom age is 12 for example
70:25 - and class is 7 okay press enter and once
70:30 - again you can get the information about
70:32 - the student to using s tu minus 2 right
70:36 - so let me clear the terminal so in this
70:39 - way you can just set the hash value and
70:45 - get the hash value right now there is
70:49 - one more command for for example H
70:53 - exists and this will tell you if the
70:57 - field inside this hash cells exists or
71:01 - not
71:01 - so just write H exists and then the key
71:06 - name for example s tu minus 1
71:09 - and then for example I am searching for
71:13 - surname okay
71:16 - and surname field does not exist in
71:19 - student 1 info right and then I press
71:22 - ENTER and it says integers zero so there
71:27 - is no information about the surname of
71:30 - student 1 right in the case of name this
71:35 - name exists right the name field exist
71:38 - in this student 1 hash set so when I
71:43 - just give this value then it says
71:46 - integer 1 that means it exists so 0 it
71:50 - doesn't exist 1 it exists right now for
71:55 - example I want to delete a value what I
71:58 - can do I can just say H de L and it says
72:04 - first of all I need to give the key name
72:07 - so s tu 1 and I want to delete for
72:10 - example class from it so I'll just write
72:14 - class and then I can just press Enter
72:19 - right and then I can just do H get all
72:23 - and the student 1 key and now you can
72:28 - see class doesn't exist here anymore
72:31 - right for example I want to set once
72:35 - again the same value I can just write H
72:38 - am set and then the same student s tu 1
72:45 - and then plus 8 ok and then press Enter
72:50 - it says ok and once again H get all
72:53 - student 1 and now once again the class
72:56 - is added here ok so you can add and
73:00 - delete the values from this hash like
73:05 - this so for deleting you use H del and
73:09 - then once again for setting you just add
73:11 - this field value pair now there is one
73:15 - more command called at set and X so H
73:20 - set and X so this
73:23 - this command is used for setting the
73:28 - field value if the field doesn't exist
73:31 - so if the field doesn't exist this
73:33 - command will be successful and if the
73:35 - field exists this command will not be
73:38 - successful so for example I will just
73:40 - say st 1 name so name field already
73:44 - exists right and i will just give some
73:47 - other name to the student 1 right and it
73:51 - says 0 so this command is not successful
73:55 - because this command will be successful
73:58 - only in the case of the field not
74:01 - available right so if I do the same
74:04 - command and I know that surname is not
74:07 - there so I will just write surname and
74:09 - some surname and then press ENTER and
74:14 - returns integer 1 that means it has
74:18 - created this field value inside this
74:21 - student set right so once again when I
74:25 - do get all st 1 now this student 1 also
74:31 - have surname information now as in the
74:33 - case of string we were using keys right
74:37 - so we were writing keys Asterix right
74:41 - same you can use for example H keys here
74:46 - and then the key name for example
74:50 - whatever key you want to give here as 2
74:53 - u 1 and it gives all the fields in that
74:59 - hash so by field I mean the name and for
75:04 - example age class and surname only the
75:06 - field not the value of those fields so
75:09 - it will only return the fields of that
75:13 - key whatever we provide here now as in
75:16 - the case of string values we were having
75:20 - Dec are decrement or incr for
75:24 - incrementing the value so the same is
75:27 - available in the case of hashes also so
75:32 - for example I want to increase
75:35 - the age of some student by some number I
75:38 - can do that so just write H and then I n
75:42 - CR by and then the key name s T u minus
75:49 - 1 for example and the field name is age
75:52 - I want to increment his age and then
75:54 - right now the age is 15 for example and
75:58 - I want to increase the age by 2 and then
76:01 - press ENTER and then once again when I
76:04 - do H get all s t1
76:08 - now you can see the age becomes 17 right
76:11 - so in order to increment the value you
76:16 - just write H incr by and the key and the
76:20 - field which you want to increment now if
76:23 - you want to know all the values of a
76:25 - particular key then we can just write H
76:29 - Wells and then the key name as to u1 it
76:34 - will just give you the values of that
76:38 - field value pair right so right now it's
76:42 - not giving name or age or class or
76:45 - surname it's only giving the values of
76:47 - them which is max and then 17 8 and the
76:51 - surname value right so H mel's
76:54 - is for value okay now if you want to
76:58 - know the length of some hash for example
77:02 - I will just give this command @l e n and
77:07 - then the s tu 1 the key name minus 1 it
77:11 - will return you the number of fields in
77:14 - that hash okay so press ENTER and it
77:18 - returns for so I know that student 1 key
77:22 - has numb for number of field name age
77:26 - class and surname so I can just verify
77:30 - that with that okay so for field so it
77:33 - will return number 4 now the last
77:36 - command I want to show here is H M get
77:39 - so let me clear the terminal and then I
77:42 - just want to write H and get and it will
77:46 - give you the result
77:49 - whatever fields you want so for example
77:51 - for st one st one for example i just
77:56 - want to know the name of that student ID
77:59 - i don't want any other information about
78:02 - that in student but only the name then
78:05 - it will give me the name right and for
78:08 - example i just want to know the name and
78:10 - age even though the student hash
78:13 - contains surname and class also but i
78:16 - just want to know the name and age it
78:18 - will just give me the name and age when
78:21 - I use HM gate than the key name and the
78:25 - field name I want to see so the field
78:27 - name I want to see right now is name an
78:29 - age so I just give name and age it'll
78:32 - give me the result of those field only
78:35 - so in this way you can use hashes in
78:37 - ready hey guys welcome to the next video
78:40 - on register tool for beginners in this
78:42 - video we will learn how to use Redis
78:44 - lists so first of all what are red is
78:48 - lists so Redis lists are simply lists of
78:52 - strings sorted by their insertion order
78:56 - right so as I already said that a Redis
79:01 - list is simply as list of string which
79:04 - are sorted by their insert and order so
79:06 - our list would have head on the top and
79:10 - tail on the bottom right now in this
79:14 - list we can insert any element from the
79:17 - top also and from the bottom also right
79:21 - so element can be inserted to a list
79:24 - from the top or from the bottom now
79:28 - sometimes you see lists in a horizontal
79:32 - way right not in a vertical way but on a
79:36 - horizontal way right now if you see a
79:39 - list in a horizontal way your head will
79:43 - be on the left hand side right so your
79:47 - head will be on the left hand side and
79:49 - your tail will be on the right hand side
79:52 - right so Radice have some command for
79:57 - example ll push L push means the left
80:01 - port
80:02 - that means we want to push an element
80:05 - from the head right left and had our
80:09 - same in the case of lists so this is how
80:14 - red is less work it's simply a list with
80:18 - the insertion order now let's see how we
80:22 - can use lists in Redis so I'm going to
80:25 - start a terminal I have already started
80:27 - my Redis server so I'm going to just
80:30 - start the Redis CLI here and then press
80:34 - ENTER and I want to show you one more
80:37 - Redis command which is a ready CLI
80:40 - command and I thought this would be
80:42 - interesting to you so I'm going to open
80:45 - a next terminal and here also I will
80:49 - just give a Redis CLI command and I will
80:52 - give an argument here so I will just
80:55 - give monitor command yeah okay so
80:58 - monitor so ready CLI monitor and what
81:02 - this monitor is going to do is it's
81:04 - going to monitor all the commands which
81:06 - you are executing from your CLI so for
81:10 - example let me give keys Astrix come on
81:15 - here right and now you can see it's
81:18 - showing us that we have given this
81:23 - command keys Asterix at this time this
81:26 - is a timestamp at which this command is
81:30 - given okay so this is the timestamp at
81:33 - which this command is given and this is
81:35 - the command which we have given right so
81:38 - let's do flush all here and then press
81:43 - enter and you can see this flush all
81:47 - command is printed here so this is kind
81:50 - of a monitor right so this is going to
81:53 - monitor what are the command you are
81:56 - giving to your Redis so okay so let's
82:01 - start with the Redis lists so first of
82:06 - all how we can create our Redis list so
82:10 - you can create a Redis list by just
82:13 - giving this command you just need to
82:16 - I'll push right so al push means left
82:21 - push that means we want to insert an
82:24 - element from the top right from the head
82:27 - okay and then we just need to give any
82:30 - key here for example key here I'm going
82:34 - to give num for numbers right and the
82:37 - first key I want to insert here will be
82:40 - for example 1 okay so first number right
82:45 - you can even insert multiple values here
82:49 - for this key for this list for example 2
82:52 - 3 & 4 ok and then press Enter and these
82:57 - four elements are inserted to the list
83:01 - in this order right now to see all the
83:06 - values in the list you use L range
83:10 - commands so just use L range and then
83:15 - the name of the key for example number
83:17 - in our case and then you give the you
83:20 - know start and stop value for the range
83:23 - now already slist index start from zero
83:26 - so for example starting value we can
83:28 - give zero here and let's say we want to
83:31 - just see the values in the list from
83:35 - zero to ten ok and then press Enter it
83:38 - shows us these values from four three
83:43 - two and one
83:45 - right so because we were pushing the
83:48 - values from the top we have pushed one
83:52 - first right so it will be pushed from
83:56 - the top one and then we have pushed two
83:59 - so the top value will become two now
84:02 - when we push two here and that's why
84:05 - it's a reverse order of numbers right so
84:09 - first we have pushed one and then we
84:12 - have pushed two at the top and then we
84:15 - have pushed three at the top and at the
84:17 - last we have pushed for at the top so
84:19 - that's why the number four is at the top
84:22 - of the list and number one is at the
84:24 - bottom of the list right now if we want
84:28 - to push
84:30 - number five on the top we can just do L
84:33 - push here so just do L push and the key
84:38 - name and then for example I will do
84:40 - number five here right and then press
84:43 - ENTER and once again I will do L range
84:45 - you can see five is at the top now if
84:48 - you want to remove the value from the
84:50 - top you give the L pop come on okay
84:55 - so L pop command is going to remove the
84:58 - value from the left hand side left hand
85:01 - side means from the top okay so L PAP
85:04 - pop is going to pop the value from the
85:06 - top and in this case our key is numb and
85:09 - you can see it has popped five from the
85:13 - top that means our list is now up to
85:16 - four okay so let's give the same command
85:18 - and range zero to ten and now our list
85:21 - is one two three four because we have
85:23 - removed five from the top okay let me
85:27 - clear the terminal and then I'm going to
85:31 - show you one more command so let's start
85:34 - with the L range so we have right now
85:36 - four elements in the list now there is a
85:40 - our push command and our pop command
85:44 - also okay so when you do our push that
85:48 - means right push that means from the
85:51 - bottom you are pushing some numbers
85:53 - right so from the bottom for example I
85:56 - want to push the value v Heer okay first
86:00 - of all and just need to give the key a
86:02 - name and then from the bottom I want to
86:04 - push the number five and then press
86:07 - Enter and I will do L range one those
86:09 - again you can see this value goes at the
86:14 - bottom five goes at the bottom because
86:15 - we have our push we have used this
86:18 - command our push our push means from the
86:21 - bottom push from the bottom right from
86:24 - the right hand side of the list
86:27 - okay that's why this five goes at the
86:30 - bottom okay once again let's do this our
86:34 - push and let's push six at the bottom
86:37 - and once again do L range I give you and
86:41 - you can see in the list you have
86:43 - the six at the bottom so in Redis this
86:46 - list is sorted by the insertion order
86:50 - right
86:50 - if you push from the right it will go at
86:53 - the bottom and if you push from the left
86:56 - it will go at the top and four left push
87:00 - you use L push and four right push you
87:03 - use our push now as we have seen in the
87:06 - case of L pop L pop is going to pop the
87:09 - value from the top our pop is going to
87:12 - pop the value from the bottom so just
87:15 - came our pop here and then the key name
87:19 - and it's going to pop six from the list
87:22 - which is from the bottom right let's do
87:25 - L range command once again and now you
87:27 - can see a six is gone from the list in a
87:30 - same way less two are pop once again and
87:33 - now five is gone from the list so once
87:37 - again let's do L range and now we have a
87:41 - list of four numbers right let me clear
87:44 - the terminal here now let's give L range
87:47 - command once again and now there is a
87:49 - command called L Len okay
87:52 - this means left length and name of the
87:56 - key for example it's going to give you
87:58 - the length of the list in our case this
88:02 - length is equal to the number of element
88:04 - in the list
88:06 - okay so L Len is for knowing the length
88:09 - of the list now for example if you want
88:12 - to get some value at some index you just
88:15 - do L index command okay and then the
88:19 - name of the key and the index so index
88:23 - start from zero so zero one two three
88:27 - okay so for example we want to get
88:30 - number two here at index 3 so we will
88:34 - just say index three okay and it's going
88:38 - to give you the number one because index
88:41 - starts from zero so zero one two and
88:44 - three so index 3 is the value 1 here
88:47 - okay let's do index zero here and it's
88:51 - going to give us the value 4 now there
88:53 - is one more command called L set so you
88:56 - can use as
88:57 - set and the key name and then you can
89:00 - give the index at which you want to
89:03 - insert a value right so for example I
89:06 - want to insert the value at the very top
89:09 - so the very top is the index zero right
89:13 - and then the value itself so I want to
89:16 - insert the value at the 0th index and
89:19 - the value is five and then when I just
89:22 - press ENTER it says okay and when I do L
89:25 - range you can see at the top at the 0th
89:30 - index this value 4 is replaced by value
89:35 - 5 right so the size of the list remains
89:39 - the same but the value is replaced at
89:42 - the residual 0th index and now the new
89:45 - value is 5 here now let me push some
89:48 - more values here so I'll push you can do
89:51 - are push also wherever you want so L
89:55 - push num and for example I want to push
89:59 - number 6 here and then number 7 and
90:02 - number 8 here ok and let's do L range
90:06 - and you can see all the values are here
90:10 - right now sometimes you don't know the
90:14 - range or the length of your list so for
90:18 - example you just to 0 to 3 here it's
90:22 - going to just give you 0 to 3 values
90:25 - right now if you don't know the length
90:28 - of your list you can give L range and
90:32 - then 0 to minus 1 so let's give this
90:36 - command and you can see it gives all the
90:39 - elements in the list so when you do L
90:42 - range the key name 0 to minus 1 is going
90:46 - to give you all the element in the list
90:49 - right this was giving the values from 0
90:53 - to 10th index so if our list is of
90:56 - length 20 this is going to give you only
91:00 - 10 values 0 to 10 right but this is
91:03 - going to give you all the 20 values if
91:05 - you your list length is 20 now let me
91:09 - clear
91:10 - this terminal and let's go to the next
91:14 - command so now the next command is El
91:17 - push X and that means l.push if the key
91:22 - exists okay so the left push if the key
91:26 - exists so we know that we have created a
91:29 - list with the key num right so let's do
91:34 - first of all this el range right and
91:36 - then we will give this el push X okay
91:42 - and this means that insert to this list
91:46 - for example this key exists already so
91:51 - insert to the list if this key already
91:53 - exists which you are providing here okay
91:56 - and this is the left push so we want to
91:59 - push one more value to the top so let's
92:03 - push nine at the top and because this
92:06 - key num exists this command is
92:09 - successful right so let's do el range
92:11 - once again and this key is inserted at
92:15 - the top let's say we do ll push X for a
92:20 - key which doesn't exist for example
92:22 - let's say we have a key for subjects so
92:27 - let's say the key is sub here and we
92:31 - want to push some keys for example once
92:35 - again 1 2 3 4 5 ok but this key doesn't
92:40 - exist right and then when we press ENTER
92:43 - it returns zero because this command is
92:47 - not successful because this command
92:50 - checks whether this key exists or not
92:53 - and if this key exists then it's it's
92:57 - pushing these values on the top right
93:00 - but because this key doesn't exist
93:04 - this command fails and there is no list
93:07 - will be created now the next command I
93:10 - want to show here is L insert before or
93:13 - after so you just do L insert here and
93:18 - then the key name for example num here
93:21 - and you have the option
93:23 - before or after so before after are the
93:26 - keyword for example I use the keyword
93:29 - before here so I'm going to just write
93:31 - before and the pivot name pivot name is
93:37 - this element okay so I want to insert
93:42 - the value before two for example
93:45 - okay so let me write to here and the
93:50 - value is this time for example 55
93:55 - okay so I'll insert the key name and you
94:00 - can use this keyword before or after
94:02 - here and then the pivot and then the
94:05 - value once again I do press ENTER and
94:09 - you can see now the less size is 9 and
94:12 - when I do I'll range 0 to minus 1 you
94:17 - can see this 55 is inserted before -
94:22 - right before 2 is the index from the
94:26 - left right because we have done the L
94:29 - insert okay so before 2 is inserted 55
94:34 - right you can do after also so for
94:37 - example I want to insert after 3 okay
94:43 - I'll let insert after four so after five
94:48 - we want to insert the value 4 you can
94:51 - see after 5 there is 3 right so after 5
94:56 - there is a value 3 and we want to insert
94:59 - 4 value 4 here and now our list is of
95:03 - size 10 and you can see now after 5
95:07 - comes for okay and above 3 comes for
95:12 - okay so this L insert is used to insert
95:16 - the value before or after some value so
95:21 - these are some of the frequently used
95:22 - command with radius list hey guys
95:25 - welcome to the next video and registered
95:26 - role for beginners and in this video we
95:28 - will learn what are sets and how to use
95:30 - sets in Redis so first of all what are
95:35 - sets
95:36 - so ready sets are an unordered
95:40 - collection of unique strings right so by
95:44 - unique I mean whatever values set
95:48 - contains they are all unique so no
95:51 - repetition is allowed here okay
95:54 - and they are unordered you know lists so
95:58 - they are not ordered and they are unique
96:01 - so let's see how we can use sets in
96:06 - practice so I have already started my
96:09 - already server and on my CLI first of
96:13 - all let me just clear all the keys which
96:17 - I already have so I will just say keys
96:20 - and I have only one key which I'm going
96:24 - to flush all and now let's create a set
96:30 - okay so to create a set you can just use
96:34 - s for set and then add okay so s add and
96:39 - then give any a name any name to a key
96:43 - so for example my set is a key here and
96:46 - then you can add members here one or
96:50 - many okay so for example I want to have
96:53 - a set of numbers so let me say this is
96:56 - my first set so I will name it set one
96:59 - my set one and let's say I add here 1 2
97:04 - 3 4 for example ok and I just press
97:09 - Enter which is going to create a set and
97:11 - add these four numbers now here I have
97:16 - provided four different numbers right so
97:19 - they are all unique and to view the
97:23 - members of a set you just to s members
97:27 - ok so s members and the key named Mikey
97:31 - name is my set 1 and you can view all
97:34 - the members of the set right now for
97:37 - example in this set I want to add one
97:39 - more value so I just say s add and then
97:44 - my set 1 and I want to add 3 here right
97:49 - and I already know the
97:50 - here I already have three in my set and
97:53 - I want to you know add one more tree to
97:58 - the set which is not allowed right so
98:01 - it's going to give me zero in return
98:03 - that means this 3 is not added to the
98:06 - set because 3 is already there okay we
98:10 - can just prove with this by using s
98:12 - members and then the set name so you can
98:16 - see set is not changed the values in the
98:19 - set remains same because they must be
98:22 - unique okay on the other hand when I do
98:24 - as set 1 5 which is a new member in the
98:28 - set I can just verify this so you can
98:32 - see this time it's added and you can
98:35 - verify it with this value if you get one
98:38 - here that means the number is added to
98:41 - the set and if you get 0 here that means
98:43 - number is not added to the set right now
98:47 - for example if I want to know how many
98:52 - values are there in the set so how many
98:55 - members are there in the set so I can
98:57 - just do s card and then the name of the
99:02 - set my set 1 ok my set 1 and I can see
99:08 - there are 5 members in the set
99:10 - ok now let me create one more set
99:15 - so I have my set 1 let me clear the
99:18 - terminal first and now I will create set
99:22 - - so set add or s add my side to here ok
99:28 - and let me add some more numbers here
99:32 - this time I will add for example 5 8 7 6
99:38 - 4 and 9 in this set ok and then press
99:42 - enter and I can view this set by s
99:46 - members here and the key name has said -
99:50 - and you can see these are the member of
99:52 - second set right now if you have
99:54 - multiple sets you can subtract one set
99:57 - from other using s diff ok so you can
100:01 - use as
100:02 - Dave and this active command returns and
100:06 - members of the set resulting from the
100:10 - difference between the first set and all
100:12 - other successive sets so this is the
100:14 - difference so I will just add my set one
100:19 - as my first set and then I will just
100:23 - give the second set as my set to ok and
100:28 - then press ENTER and it's going to give
100:31 - me the difference between these two set
100:33 - let me show you the values of the set 1
100:37 - also so we can verify so you can see in
100:41 - the set 1 we have value 1 to 5 and then
100:44 - in the set to we have values 4 5 6 7 8 9
100:50 - so from s diff it's going to give you
100:52 - the values which are there in the set 1
100:56 - but they are not there in the set - okay
101:00 - so these values these 3 values are not
101:04 - there in the set - right but 4 & 5 are
101:07 - there in the set - so they are discarded
101:11 - so as diff is going to give you the
101:14 - difference that means whatever values
101:17 - are there in set 1 and not there in set
101:21 - 2 now if you want to know the S diff and
101:25 - save it into the third set for example
101:29 - then you can do that also so you can
101:31 - just write as diff and then store and
101:34 - then the destination so I'm going to
101:36 - save the difference in a new set so for
101:39 - example my set 3 right and then the
101:44 - difference between these 2 sets so my
101:47 - set 1 and my set 2 so these 3 values
101:51 - will be saved in the new set which is my
101:55 - set 3 ok press Enter and then you can
101:58 - see by s members my set 3 you can see
102:03 - all these values are saved in this set 3
102:07 - which is the difference between my set 1
102:09 - and my set - now you can do the union
102:13 - also union of the set so for
102:16 - example I want to do Union I can just
102:19 - write s Union and the set name so my set
102:25 - 1 and my set
102:28 - - ok so I wanted to do the union of set
102:31 - 1 and set 2 and then press ENTER and
102:34 - it's going to give you these values so
102:38 - Union means whatever values which are
102:42 - there in the first set also and second
102:44 - set also the combination of that unique
102:48 - value right so all the unique value
102:51 - which are there in the first set and
102:53 - second set so these value were in the
102:58 - first set and these value which are
103:01 - unique in the second set so this is the
103:05 - combination of s Union ok and same you
103:09 - can do for storing so you can just write
103:11 - s Union store here so just write s Union
103:16 - store and I'm going to store it in set
103:19 - for for example so my set for the union
103:23 - of set 1 and set to right press enter
103:27 - and union is saved I can do s member my
103:31 - set for and you can see now it has one
103:35 - two nine which is the union of set one
103:37 - and set to okay so in order to store use
103:40 - s Union store now if I want to remove
103:43 - some members from a set I can do s RAM
103:47 - for removing a value from a set or
103:51 - member from a set and for example I want
103:53 - to remove some member from set for and I
103:59 - want to remove for example nine okay and
104:02 - then press Enter it's going to remove
104:04 - nine from the set for and I can do s
104:07 - members one that once again and you can
104:09 - see nine is not there anymore okay you
104:12 - can remove multiple values for example
104:15 - eight seven six and so on and these will
104:20 - be removed so now I have only up to five
104:23 - values because eight seven six are
104:26 - removed now for example I want to remove
104:28 - a random value from
104:30 - the set so I don't want to remove a
104:33 - specific value but I want to remove as
104:36 - random value so for example I can do s
104:38 - pop here to remove a random value from a
104:43 - set so my set for for example and for
104:47 - example I want to remove only one value
104:50 - from here right so I can just press
104:53 - Enter
104:54 - it says three so it has removed three
104:57 - from this set okay so let's do s member
105:02 - s 4 and you can see 3 is no more there
105:07 - in the set for okay so it has picked a
105:10 - random value from this set and removed
105:13 - it okay I can give for example as pop my
105:18 - set for I for example I want to remove
105:20 - two random values so I can just do that
105:24 - and now it has removed four and one from
105:29 - the set and now my set is only of two
105:33 - values or two members two and five okay
105:36 - so as pop is to remove the random value
105:39 - from the set now let me clear this
105:43 - terminal and let me just print the
105:46 - values of set one and set to once again
105:49 - so set one has one two five and said to
105:52 - have four to nine now there is a command
105:55 - called as inter and as inter command
105:58 - gets the element of a set after the
106:01 - intersection of all the specified set
106:04 - okay so it's going to give you the
106:06 - intersection of all the specified set so
106:10 - just to s inter for example my set 1 and
106:16 - my set 2 and then press ENTER and it's
106:20 - going to give you the intersection
106:22 - intersection means these values are
106:25 - there in both the sets so these are the
106:28 - intersection of both the sets so 4 & 5
106:32 - are there in set 1 and set 2 so it's
106:36 - going to give you those value only and
106:38 - as we have seen in the case of as deaf
106:41 - and as
106:42 - Union you can do for example as interst
106:47 - store so you can store the intersection
106:50 - into a new set so as inter store and for
106:54 - example I want to save this in set five
106:57 - and then press ENTER and then I can just
107:00 - see the content of set 5 which is 4 & 5
107:04 - which is correct now the last command I
107:06 - want to show here is s move command so
107:09 - as move and this command is used to you
107:14 - know transfer or move value or member
107:17 - from one set to the another set right so
107:21 - for example I want to move one from my
107:25 - set one to my set - okay so I want to
107:29 - move this value to the set - so what I
107:33 - can do so first of all the source source
107:35 - is my set one and I want to move it to
107:40 - the destination which is my set - and I
107:44 - want to transfer the value one member
107:47 - one right so press Enter
107:49 - it says 1 that means the operation is
107:52 - successful so let me see the s member or
107:56 - members of set - and now you can see one
108:01 - is moved to the set - earlier one was
108:06 - not there in the set - but now we have
108:09 - one in the set - and let's see the
108:13 - contents of set one also so you can see
108:17 - one is no longer there in set one
108:20 - because it's moved from set one to set
108:23 - two so these are some of the most
108:25 - frequently used command in Redis sets
108:29 - hey guys welcome to the next video on
108:31 - register twirl for beginners and in this
108:34 - video we will learn how we can use
108:36 - sorted sets in Redis so first of all
108:39 - what are sorted sets so ready sorted
108:43 - sets are similar to the Redis sets with
108:46 - a unique feature that their members can
108:49 - be sorted now every member of a sorted
108:54 - set is associated
108:56 - with a score and based on the score
108:59 - their members can be sorted right so you
109:03 - can see in this diagram the raddest key
109:06 - will remain the same as other patterns
109:10 - but here you can see a score here so you
109:15 - can define a score for example I will
109:17 - define a score 100 and then the value
109:21 - associated with the score so the value
109:23 - associated with the score is well you -
109:26 - and this is our member of a set and
109:29 - there is a new feature in the sorted set
109:32 - which is this score right so you can
109:35 - define a score and with this score you
109:39 - can define a member or a value
109:41 - associated with it and then on the basis
109:45 - of that we can sort the members of our
109:48 - set right so let's see in practical how
109:52 - it works so I'm going to open my Redis
109:56 - CLI so the first command we are going to
109:58 - learn here is that ad and the said ad is
110:02 - used to create a set if it doesn't exist
110:06 - or add a member to this set if it
110:10 - already exists right so every command in
110:15 - sorted set will start with this
110:17 - character Z and then whatever its
110:20 - function is the function name for
110:23 - example right so that ad and then the
110:26 - key name for example my set 1 and the
110:29 - score so score is 1 and the value
110:32 - associated with it
110:34 - so squarely for example you want to
110:36 - associate it with the score one is a
110:39 - write in a similar way we can define
110:42 - multiple score members here so score and
110:45 - the value associated whether 2 and B for
110:48 - example 3 is the third score and the
110:51 - value we want to associate with it C and
110:54 - then they need not be in order so score
110:58 - can be 5 now and the value can be D here
111:02 - right or any other value right and then
111:05 - press enter and you can see for
111:09 - bows are inserted in the sortedset now
111:13 - to get the members of a sorted set you
111:18 - use Z and then range command okay as we
111:22 - have seen in the sets also and then what
111:26 - is your key name for example my set 1
111:29 - and then starting value and end value as
111:33 - we have seen in the case of sets also so
111:36 - in the case of sets we have seen that 0
111:39 - and minus 1 are going to give all the
111:42 - values in the set right so press ENTER
111:45 - and you can see here all the values are
111:49 - printed here now you can see here the
111:53 - values are printed not the you know
111:56 - schools associated with them
111:59 - right so for example I once again write
112:02 - Z add and then set 1 my set 1 and then
112:08 - for example I can just give score 100
112:10 - here and then the value is here right
112:14 - and then press Enter and once again I
112:17 - will just give that range my set 1 and
112:20 - then you can see all the values here or
112:24 - all the members here but these are not
112:26 - the school's these are just order
112:30 - ordered number now if you want to know
112:33 - how many number of members are there in
112:36 - our set we can use Z card here ok and
112:40 - the key name for example my set 1 and
112:43 - then press Enter and I can see that
112:46 - there are 5 members in my sorted set
112:49 - right now in order to get the count of
112:52 - members in the sorted set with the
112:54 - scores within the given range we use
112:58 - said count okay and then the key name so
113:02 - my set 1 and the minimum and the maximum
113:07 - score value here so for example I want
113:10 - to get 1 2 3 here ok and then press
113:15 - Enter and then it's going to count the
113:17 - number of values between this range
113:20 - right so for example
113:23 - just write 1 2 5 here and values are 4
113:27 - because in between school 1 and school 5
113:31 - there are 4 values including those
113:34 - scores now I can just write 1 250 here
113:38 - or 55 and still it's going to give us 4
113:42 - values number of values because the last
113:44 - score we have associated here is hundred
113:47 - so when we write here 1 0 1 here and
113:51 - then press ENTER then only it's going to
113:54 - give us 5 values and let's see we can
113:58 - give 99 here still it gives the 4 value
114:03 - so the z count is going to take the
114:06 - score values and then depending upon the
114:09 - score values is going to give you the
114:11 - number of values in between these scores
114:15 - now let me clear the terminal and to
114:20 - remove any member from a set you use Z
114:25 - REM and then the key name my set and
114:30 - member so the member here will be the
114:34 - member value so not the score but the
114:37 - member so for example I want to remove
114:40 - the member B so I can just give the
114:43 - value of member of B and then press
114:46 - ENTER and once again I will just give
114:49 - this sled range command and now it's
114:52 - giving the same answer because I haven't
114:55 - given the right key name so I must give
114:59 - that a my set 1 here right and then it
115:03 - gives integer 1 that means the command
115:06 - is successful and once again the range
115:08 - and now you can see the value is removed
115:11 - from here now if you want to determine
115:13 - the index of a member in a sorted set
115:16 - you use that rank here so just give rows
115:20 - that rank amount and then my set 1 and
115:22 - the member name so for example d here
115:26 - and then press ENTER and it's going to
115:29 - give you the index of this D right so
115:35 - the index starts from 0
115:36 - so 0 1 2 right for example I want to see
115:41 - the index of e here I was going to give
115:44 - me the index 3 and for example for
115:47 - member a the index is 0 now there is a Z
115:50 - Reb rank command also so you can just
115:54 - write Z Rev rank here and this is the
116:00 - reverse rank right so the rank will be
116:04 - sorted according to the score so highest
116:06 - score is the 0th index right and then
116:10 - the lowest score is the maximum index
116:15 - okay so for example my set 1 and then
116:19 - the member name for example e is the
116:22 - rank 0 here right because index of e is
116:26 - the highest rank rank is 100 for e right
116:32 - and it's the biggest rank that means the
116:35 - index for it will be 0 because we are
116:39 - printing the reverse rank here ok for
116:42 - example you want to see the index of a
116:45 - it will be 3 because it's in reverse
116:48 - order now the last command I'm going to
116:50 - show you here is z-score command ok and
116:55 - then I can give the key name and the
116:58 - member name so for example I will give
117:01 - the member a and then press Enter it's
117:04 - going to give me the score value of this
117:08 - member right so for example I want to
117:10 - see the score of member E and press
117:14 - Enter it's going to give me hundred
117:16 - because score associated with II was
117:19 - hundred right and for example this value
117:22 - doesn't exist in our sorted set for
117:26 - example I just added or given the random
117:29 - value here and then press Enter
117:31 - it's going to return the nil value which
117:34 - doesn't exist okay now let me clear the
117:38 - terminal
117:39 - let me show one more command to you so
117:42 - for example I just want to print the
117:45 - range of my set 1 0 to minus
117:50 - and this is a CDE and I want to add one
117:55 - more value here so I will just add said
117:57 - add and I want to add this value to my
118:00 - set one and at the score one and I want
118:04 - to add for example a a five times and
118:08 - then press ENTER and it and it returns
118:11 - me one that means the value for this
118:14 - score is now set to a a instead of a for
118:19 - example right so let me do set range
118:22 - once again and you can see here the new
118:26 - value is added here which is e right and
118:31 - if you remember the score of a was also
118:37 - one right so let me give the same
118:41 - command now which is z-score and this
118:44 - time I want to just see the score of a
118:48 - which is 1 and then I want to see the
118:52 - score of AAA which is also 1 so it's
118:56 - totally fine if you give a same score to
118:59 - multiple values right so for example I
119:03 - want to give one more value to this
119:07 - score for example BBB B and then press
119:10 - ENTER and once again the range I want to
119:13 - see this value is added and then I want
119:16 - to see you see the score of BBB B so BBB
119:20 - B and you can see the score is still 1
119:24 - okay so it's totally fine to have one
119:29 - score for multiple values now what
119:33 - happens to the rank here so for examples
119:36 - red rank for my set 1 so my set 1 and
119:41 - then BBB B and the index here is 2 so
119:47 - this is how sorted set works now there
119:50 - is one more command which is Z range by
119:54 - score and then you can give the key name
120:00 - and then the score value minimum score
120:03 - for example 1
120:04 - and then the maximum score for example
120:06 - I'm going to give you a two right and
120:09 - then press ENTER and I get here three
120:12 - values because there are three values
120:16 - associated with the score one and I
120:19 - think there was no score for two right
120:22 - so no value was associated with two so
120:26 - let's see one two four for example and
120:30 - now I can see these values and see also
120:34 - so if you want to get values by the
120:37 - range of scores then you can use that
120:40 - range by score okay so this is how you
120:43 - can use sorted sets in Redis there are
120:47 - some more commands which are associated
120:49 - with sorted set you can just search for
120:52 - them and then practice them but these
120:55 - are some of the most frequently used
120:57 - command with the sorted sets hey guys
121:00 - welcome to the next video on register
121:02 - rule for beginners in this video we will
121:05 - learn how to use Redis publish/subscribe
121:08 - so Redis publish/subscribe implements
121:12 - the messaging system where sender is
121:15 - called the publisher and the receiver is
121:20 - called the subscriber right now in Redis
121:25 - a client can subscribe to any number of
121:29 - channels so let me give you an example
121:32 - and let me show you how you can use
121:35 - Redis publish subscribe so you can see I
121:39 - have opened three ready CLI terminals in
121:44 - three different terminals right so this
121:47 - is ready CLI first terminal second
121:49 - terminal and third terminal now first of
121:53 - all I am going to subscribe to a channel
121:56 - so I can just write subscribe here and
122:00 - then it takes a channel name right and I
122:06 - can give any channel name for example
122:09 - Redis or any other channel name so for
122:12 - example my channel
122:14 - and I can subscribe to this channel okay
122:18 - so the name depends upon you right so
122:21 - for example I subscribe to the channel
122:25 - called Redis and I just press ENTER so
122:30 - now this is or this terminal is
122:33 - subscribed to this channel right now
122:38 - from the second CLI when I publish some
122:41 - message to this channel so let me
122:45 - publish something so to publish a
122:48 - message you can just use a keyword
122:50 - publish as we have seen in subscribe so
122:54 - to subscribe you use a keyword subscribe
122:57 - and then a channel name for publishing
123:00 - you use a keyboard publish and the
123:02 - channel name on which you want to
123:04 - publish right so I want to publish on
123:08 - the Redis channel and then your message
123:12 - for example hi right and I press enter
123:16 - and you can see on the subscriber it
123:20 - gets the same message so first of all it
123:23 - will just show you what kind of message
123:28 - is coming so it's a message and then on
123:31 - what channel it's coming and what is the
123:34 - message itself right now if you want to
123:37 - send a big message you can just enclose
123:42 - your message inside these double quotes
123:45 - so for example hello world here and then
123:50 - press enter then it's received here okay
123:54 - now it's possible to subscribe to any
124:00 - number of channels right so you can see
124:03 - I am subscribed to Redis from one
124:07 - channel now I can just copy the same
124:11 - command in the next terminal here and
124:15 - then I'm subscribed to this channel so
124:19 - now there are two subscriber subscribe
124:22 - to one Redis channel so this is the
124:26 - channel
124:27 - and I'm subscribed to that channel right
124:30 - so there are two subscriber for the
124:33 - channel named Redis and when I just send
124:38 - hello world
124:39 - again for example now it is received by
124:43 - both the subscribers right so you can
124:47 - see hello world is received here and
124:50 - hello world is received here okay so
124:54 - this is how publish/subscribe method
124:57 - work in Redis now when you are doing or
125:02 - using Redis in the programming then it's
125:07 - really important or it's really useful
125:10 - so for example recently I created some
125:14 - kind of API where I wanted to listen for
125:18 - any event for save in Redis so whatever
125:23 - is saved whenever some command comes and
125:26 - something is saved in Redis I wanted to
125:29 - subscribe to that save event right and I
125:34 - have used this publish/subscribe method
125:38 - from Redis in that API and it worked
125:42 - fine so it's kind of listening to the
125:45 - trigger for examples for saving the data
125:49 - or some delete deletion of data you can
125:53 - subscribe and then you will get this
125:56 - message on the next side which is
125:59 - subscribing and based on that
126:02 - subscription you can trigger some event
126:05 - okay now let me just close this CLI and
126:10 - once again open the CLI once again and
126:13 - let me clear the terminal once again and
126:16 - there is a command called P subscribe so
126:18 - you can do P subscribe and then it takes
126:21 - the pattern so for example I can just
126:25 - write R and then s tricks are s tricks
126:28 - here means any publisher when it's
126:32 - published on the channel name which
126:35 - start with r it will receive that
126:37 - message so for example
126:40 - I am publishing this publish Redis
126:44 - because this pattern matches this
126:47 - pattern so Asterix is some kind of a
126:50 - wild card here so it's whatever so for
126:54 - example I'm subscribing to RS tricks and
126:56 - I'm just publishing the same message
126:59 - again and you can see it's receiving
127:02 - that message because it's just matching
127:06 - the pattern whatever publisher publishes
127:09 - on the pattern which matches rs tricks
127:14 - for example R and whatever comes after R
127:18 - this is matching that pattern so it will
127:22 - receive that message for example I can
127:26 - just do something like this I publish on
127:29 - R X for example this also matches this
127:34 - pattern right because we just want to
127:37 - match the first letter of that channel
127:42 - and whatever comes after that it will be
127:45 - matched automatically so this is kind of
127:47 - a pattern matching in Redis so P
127:51 - subscribe is used to pattern matching
127:54 - and whatever publisher channel matches
127:59 - that pattern it will be receiving that
128:02 - message so you can see this is receiving
128:05 - that message but this CLI is not
128:08 - receiving so because we have subscribed
128:10 - to a concrete channel layer which is not
128:15 - a pattern so whenever we just give the
128:20 - raddest channel itself then only it will
128:23 - receive the message and this
128:25 - automatically receives the message
128:27 - because here we are just matching the
128:31 - pattern okay so in this way you can use
128:33 - publish subscribe in Redis I hope you
128:36 - have enjoyed this video please recommend
128:37 - subscribe and bye for now