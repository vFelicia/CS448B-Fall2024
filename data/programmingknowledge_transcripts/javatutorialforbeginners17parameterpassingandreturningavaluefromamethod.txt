00:00 - hello guys welcome to the next video
00:02 - tutorial on Java programming for
00:03 - beginners in the last video we have seen
00:06 - how we can declare a method in Java and
00:11 - what is a method and why it's used now
00:14 - in this video we will see some more
00:17 - properties we can add to a method one
00:21 - I'm going to show you is called passing
00:24 - parameters to the method and other is
00:28 - called the return in values from a
00:31 - method so this was the simple method I
00:33 - have shown you in the last video
00:37 - now uh it doesn't solve much of the
00:40 - purpose because uh every time it's not
00:44 - flexible it's only printing hello
00:47 - YouTube Every time now to make it more
00:50 - flexible we can uh add an argument to
00:54 - this function we have made in the last
00:57 - video so the Declaration remains same
00:59 - same public static is the exess
01:02 - specifier void is the return value void
01:06 - means we are returning no value and the
01:09 - name of our function is this one and in
01:12 - these round brackets we will pass our
01:16 - parameter in just a moment and in here
01:19 - in these curly braces we write our
01:21 - statement so for example we want to
01:24 - greet some
01:26 - persons based upon uh their names
01:30 - so we can pass an argument to this
01:33 - function like this so we will pass the
01:37 - name in the form of string variable so
01:39 - we just give the data type first and
01:42 - then we give the value or variable name
01:48 - which we want to pass so we can say name
01:51 - okay so this kind of U declaration
01:56 - inside your round bracket in the
01:58 - function is is called the parameter
02:01 - passing okay and this parameter name
02:05 - which is a string you can use inside
02:09 - your function so if you want to say
02:11 - hello or whatever name is passed to the
02:14 - uh function then it will uh you know
02:17 - print that name so whenever we call this
02:23 - function say hello
02:25 - [Music]
02:27 - to the main
02:30 - method for example we call the
02:35 - name John then it will greet hello John
02:40 - okay so I will run the
02:42 - program and it says hello John and this
02:47 - function can be used to greet more than
02:51 - one function for example
02:53 - John uh
02:55 - Tom or for example some other name
03:00 - Mark for example and it will greet all
03:04 - three names hello John hello Tom and
03:07 - hello Mark okay so this makes our
03:11 - function a little bit flexible in a way
03:14 - that we can uh you know use it according
03:18 - to our use
03:21 - okay the other use of this function we
03:24 - can use it to add for example uh with
03:28 - integer so so here you can pass any
03:31 - number of parameter not it's not
03:33 - necessary that you need to pass only one
03:36 - parameter you can uh pass multiple
03:39 - parameters in here in as in parameter
03:43 - right so how we can do this we will
03:46 - declare one more function for
03:50 - example
03:51 - public this should be public static void
03:55 - because we are not returning anything
03:58 - and now we will make a function called
04:01 - add which we want to add two values in
04:05 - using this function okay and in here we
04:09 - can pass multiple values whatever number
04:12 - of values you want to add for example
04:16 - in a comma int B for example we want to
04:22 - add these two values and print the
04:24 - result what we can do is we can just
04:28 - print the these values by calling a + b
04:34 - so just write a + b okay and what this
04:40 - will do whatever you pass as an argument
04:42 - here and here it will add these two
04:45 - values and print on the terminal
04:50 - right so when I run this program first
04:53 - of all I need to call this add function
04:56 - I will delete this say hello from the
04:59 - main and I will call this add function
05:02 - and for example I want to add two
05:05 - integers and this is 100 and 2011 for
05:10 - example I want to add and I will run the
05:13 - program and it prints the result which
05:15 - is 301 using this code okay and now I
05:20 - want to add some more integers for
05:23 - example I want to add some
05:28 - values and some other
05:31 - values and I can do it with the same
05:34 - function so this makes your uh job
05:38 - really easy using a same function you
05:40 - can add different values or you can
05:43 - perform different operations on
05:45 - different values right
05:48 - so it makes your code really uh you know
05:52 - readable and understandable at the same
05:56 - time now you can add more in parameters
06:02 - like in C and you can add this parameter
06:09 - here and in here you can add some more
06:11 - integer values like this okay so it
06:17 - depends upon you how many parameters you
06:19 - want to pass to your function and it
06:22 - will give you the result okay so it's
06:24 - totally dependent upon you the only
06:28 - thing is you just need to give the data
06:30 - type and the variable which will hold
06:33 - these values so
06:35 - indirectly whenever you pass 100 as a
06:39 - first parameter 100 is equal to 100
06:42 - becomes a here and it goes here okay so
06:46 - the value of a becomes 100 and value of
06:49 - B becomes 2011 in this here and value of
06:55 - C becomes 211 here so they will be
06:58 - replaced and they will be called and the
07:01 - answer will be printed on the console
07:05 - okay now to make it more flexible this
07:09 - is called parameter passing but you know
07:13 - we can
07:15 - only uh pass the values and if we want
07:19 - to access the result using these
07:22 - parameter passing we cannot access the
07:25 - result so for example we want to use
07:28 - this uh result 512 in our main function
07:33 - to you know do some other arithmetic
07:35 - operation how we can use it okay
07:40 - so it's using this function it's not
07:43 - possible Right but there is a way to do
07:48 - this and the way to do this is by
07:51 - returning some value so we will modify
07:55 - this add function a little right now
07:57 - it's returning Vo void means it's not
08:00 - returning anything but when we want to
08:04 - use it inside our main function when we
08:07 - want to use the result inside our main
08:09 - function we can res return integer value
08:13 - okay and this
08:15 - return value will tell what kind of
08:19 - value you want to return from your
08:21 - function and the same you will return
08:24 - from here so just
08:26 - write return and and just write a it
08:32 - should be
08:34 - A+ b + C okay and in this way what you
08:41 - are basically doing is you are taking
08:44 - all the values which you pass from or in
08:47 - these in this function and you are
08:50 - adding this and you are
08:52 - returning from this function so let's
08:55 - take an example of uh this so Let's uh
09:00 - comment this system out for now and
09:04 - right now what we are doing is we will
09:07 - just add the values we are passing these
09:10 - three values and we will return and
09:13 - whenever a function return anything you
09:16 - can store it in other variable but of
09:21 - the same type so the data type of the
09:24 - returning value and the value in which
09:29 - you want to store the return value
09:31 - should be same so this is integer and
09:33 - this is integer or int right and you can
09:36 - call this add
09:38 - function and paste it here and what this
09:42 - basically do is this will add 100 or
09:46 - this will replace uh a as 100 b as 2011
09:52 - c as 211 and it will add these two
09:56 - values and it will return this uh SU sum
09:59 - and you can store this sum in some other
10:03 - variable okay and then you can
10:08 - print this value like this so you can
10:11 - call sum and this will give you or you
10:15 - can access this value inside your main
10:19 - function like this so this is due to
10:22 - this and if you want to do uh some other
10:26 - arithmetic operation on this sum you can
10:29 - do it for
10:30 - example
10:33 - end result sum multiplied by for example
10:40 - uh 15 you want to do you can do it like
10:43 - this and this should be equal to and you
10:47 - can call your sum like this and you can
10:51 - just run the program and it will give
10:53 - you uh the multiplication of whatever
10:56 - sum you will get from the add function
10:59 - function adding these three numbers and
11:01 - then you can do some arithmetic
11:03 - operations on the sum you get as a
11:06 - result and you can multiply it by or
11:10 - whatever arithmetic operation you want
11:12 - to do and you can store this result in
11:15 - another variable and you can use it so
11:18 - in this way the function or Methods made
11:22 - it really easy to you know organize your
11:26 - code and make it really concise really
11:29 - readable really understandable and it
11:33 - also makes your code you know prettier
11:37 - so I hope you have understood the basic
11:39 - concept of passing parameters like these
11:43 - and returning values like these okay in
11:47 - the same way you can make any uh logic
11:51 - using these function for example
11:53 - multiplication you can make a function
11:55 - to make multiplication you can make a
11:57 - function to uh you know do divisions you
12:01 - can add two numbers to you can subtract
12:05 - two numbers or any complicated you know
12:08 - arithmatic or logical or anything you
12:11 - want to do you can do it inside a
12:14 - function and you can take arguments or
12:17 - parameters here and you can return the
12:20 - result so that you can use it uh in your
12:23 - main method so I hope you have
12:26 - understood the basic concept of taking
12:28 - parameter meters or passing parameters
12:30 - to a method and returning values from a
12:34 - method I hope you understood the concept
12:37 - and please rate comment and subscribe
12:40 - and bye for now