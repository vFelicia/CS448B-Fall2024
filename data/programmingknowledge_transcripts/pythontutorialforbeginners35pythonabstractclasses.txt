00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in this
00:04 - video we will talk about creating
00:06 - abstract classes in Python so let's get
00:09 - started so to start with I have here two
00:13 - classes one is a shape class another is
00:16 - a square class in shape class I have to
00:19 - empty methods one is area and other is
00:23 - perimeter and I'm using shape as a
00:26 - superclass and square as a subclass and
00:30 - square class is inheriting from the
00:33 - shape class now in this example I want
00:36 - to do two things one is I don't want to
00:40 - allow the other users to create an
00:43 - instance of a shape class because shape
00:45 - class acts like a template for the
00:49 - square class so I don't want to allow
00:51 - those users to create an instance of
00:54 - this shape class so let's see right now
00:57 - if we can create an instance of this
01:00 - shape class or not so I'm going to just
01:02 - right shape is equal to shape and when I
01:08 - run the code my code runs fine that
01:10 - means right now I'm able to create an
01:13 - instance of the shape class which I
01:16 - don't want the second thing is I want to
01:19 - make sure that both these methods which
01:23 - are there inside the shape class are
01:26 - implemented inside the square class so I
01:29 - want to make sure that whoever is using
01:32 - the shape class he or she must implement
01:36 - these two methods inside the subclass so
01:40 - how can I achieve these two things now
01:43 - it turns out that abstract classes are
01:45 - just made for that so how to create an
01:48 - abstract class in Python the fact is
01:50 - Python on its own doesn't provide any
01:54 - abstract class but don't worry there is
01:57 - a built-in module in Python which we can
02:00 - use to create an abstract class so let's
02:04 - import this built-in module first so I'm
02:07 - going to just write from ABC import
02:10 - capital ABC comma abstract math
02:14 - so these are the two things we need to
02:16 - import from this module now this module
02:20 - ABC stands for abstract base classes and
02:25 - this allows us to create the abstract
02:28 - classes so how we can create an abstract
02:30 - class using this ABC module so what we
02:34 - need to do here is we need to inherit
02:37 - from the ABC module into the shape class
02:42 - okay so shape class is inheriting from
02:46 - the ABC module now once this shape class
02:48 - inherit from the ABC module the second
02:52 - thing what we need to do here is we need
02:54 - to add a decorator here and how to add a
02:58 - decorator we just need to use at the
03:01 - rate and then the name of this abstract
03:04 - method which is like this and let me use
03:07 - this abstract method decorator on top of
03:11 - this parameter method also so what this
03:14 - abstract method decorator does is it
03:17 - makes these two methods abstract and
03:20 - what is an abstract method an abstract
03:23 - method is a method which you must
03:25 - implement in the subclass so when you
03:29 - run the code now it will give us this
03:32 - error which says can't instantiate
03:34 - abstract class shape with the abstract
03:38 - method so once you create any of your
03:41 - class method as abstract then your class
03:44 - becomes the effect class and then you
03:48 - cannot instantiate this class like this
03:51 - so our first goal is achieved that we
03:54 - cannot instantiate this shaped last now
03:57 - because this class is now an abstract
04:01 - class and how to create an abstract
04:03 - class you just need to import the ABC
04:07 - module and then you just need to add
04:09 - this decorator on top of your method and
04:12 - if you do this even with one method in
04:14 - your class then your class becomes
04:17 - abstract so now we have removed the
04:20 - instantiation of this shape class but
04:23 - now when I try to instantiate this
04:25 - square object from
04:27 - the square class let's see what happens
04:30 - so this square class takes one argument
04:32 - which is the side of the square and let
04:35 - me run this code and once again it gives
04:38 - us an error and this error says can't
04:40 - instantiate abstract class square with
04:43 - abstract methods so that means that
04:46 - whenever you inherit from a class which
04:50 - is an abstract class and if this class
04:53 - contain any abstract methods then the
04:56 - subclass have to implement the methods
04:59 - which are abstract so this method area
05:02 - is an abstract method and this method
05:05 - parameter is also an abstract method
05:08 - that means we have to provide the
05:10 - implementation of these two method
05:13 - inside our subclass so I'm going to
05:16 - provide the implementation of area first
05:20 - of all into the subclass and area I'm
05:23 - going to just return as the
05:26 - multiplication of the sides right so
05:28 - self dot underscore underscore side
05:31 - multiplied by itself so self dot
05:34 - underscore underscore side and let's say
05:37 - for now I will remove this abstract
05:39 - decorator from the parameter method and
05:43 - let's run the code once again and you
05:46 - can see it runs fine
05:48 - so there is no error when we instantiate
05:50 - this class when we implement all the
05:54 - abstract method into your subclass
05:57 - so right now there is only one abstract
05:59 - method which is area into the shape
06:02 - class which we need to implement in the
06:05 - subclass and that we have done so we'd
06:07 - see no error here now let's add this
06:09 - decorator abstract method on top of this
06:12 - parameter method also and once again
06:14 - when I run the code it will give me once
06:17 - again this error it's going to give me
06:19 - the same error which says can't
06:21 - instantiate the abstract class square
06:23 - with the abstract method parameter so we
06:27 - also need now to implement this method
06:30 - also so let's just implement this
06:33 - parameter method inside the subclass
06:36 - once again and what is the parameter
06:38 - it's four times the
06:41 - size of your square so self dot
06:45 - underscore underscore size and now we
06:47 - have implemented both of them and once
06:50 - again when we run the code it runs fine
06:52 - let's also try to print the area and
06:56 - perimeter of the square so I'm going to
06:58 - just use this object to call the area
07:01 - method and in the next line I'm going to
07:04 - just use print to once again call this
07:07 - object and this time I will call the
07:09 - parameter method and let's run the code
07:12 - once again and it prints the area of the
07:15 - square and the perimeter of this square
07:18 - so let's rewind what we have learned
07:20 - till now so in Python you can define an
07:24 - abstract class by importing this module
07:27 - and this abstract method and this ABC
07:31 - stands for abstract base classes and you
07:34 - need to inherit from this ABC into the
07:38 - class which you want to make abstract
07:40 - the second thing which you need to do is
07:42 - you need to provide this decorator at
07:44 - the rate abstract method on top of at
07:47 - least one of the methods inside your
07:51 - abstract class that makes your class
07:54 - abstract and what are the properties of
07:56 - the abstract class you cannot
07:58 - instantiate an abstract class so you
08:01 - cannot create an object of this abstract
08:03 - class and you need to implement all the
08:07 - abstract method into the sub class which
08:11 - is inheriting the abstract class so this
08:14 - abstract class acts like just a template
08:17 - for other classes which wants to inherit
08:20 - from this shape class so this is how you
08:23 - can use abstract classes in Python I
08:25 - hope you have enjoyed this video and I
08:28 - will see you in the next video