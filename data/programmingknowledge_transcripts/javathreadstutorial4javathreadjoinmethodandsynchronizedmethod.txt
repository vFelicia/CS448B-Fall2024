00:01 - hello guys welcome to the next video on
00:03 - Java thread tutorial for beginners in
00:05 - this video we will see what does join
00:09 - keyword do in Java threads and how to
00:12 - use join keywords in Java so let's get
00:17 - started I'm going to give you an example
00:19 - and uh I will show you how you can use
00:22 - this join keyword so I have this blank
00:25 - project with a blank main method and
00:28 - first of all what I'm going to do is I'm
00:30 - going to Define a simple thread object
00:34 - so I'm going to uh call thread T1 is
00:37 - equal to new thread and inside this
00:40 - Constructor I'm going to uh implement
00:43 - this runable here and uh then I'm going
00:47 - to uh call The Run overload here so
00:52 - implement the
00:54 - method let me close this thread
00:58 - Constructor with semicolon and and this
01:00 - uh bracket and inside this uh run method
01:04 - what I want to do is I want to once
01:06 - again create a for Loop and this time I
01:09 - want to iterate this for Loop to around
01:13 - 10,000 for this example okay and now
01:16 - what I want to do is I want to create a
01:19 - private variable which will be a static
01:24 - one and which will be a integer okay and
01:27 - I will name it as count and and I will
01:30 - initialize this count as zero okay and
01:34 - now what I want to do is I want to
01:36 - increase this value of count inside this
01:39 - for Loop by one every time this for Loop
01:43 - iterates okay now similarly I will
01:47 - create a second thread object this is
01:50 - our first thread object which is T1 I'm
01:52 - going to copy this and I'm going to
01:54 - paste it just below this and I'm going
01:57 - to name it as T2 okay so we have two
02:01 - thread object T1 and T2 and I want to uh
02:07 - start thread 1 and thread two now so I
02:10 - will just call T1 dot start and t2.
02:15 - start okay so what this will do is it's
02:18 - going to start the thread one and then
02:21 - thread two and then what I want to do is
02:25 - I want to print the value of uh count
02:28 - now so say out and I want to print the
02:33 - value of
02:35 - count okay and if you want you can just
02:39 - write so what I want to do here I want
02:42 - to increase the value of count which is
02:45 - this variable and I want to increase
02:48 - this value in both the threads so both
02:52 - the threads will share this count
02:55 - variable and increase its value when we
02:58 - iterate over this Loop grop okay so this
03:01 - count variable is accessed from thread
03:04 - one also and thread 2 also and what uh
03:10 - we expect we want to uh print the value
03:13 - of count at the end of uh the threads
03:16 - one and thread two now let's see what
03:20 - happens when we uh run this program so
03:23 - let's uh run this program and let's see
03:26 - what will be the output so we will run
03:29 - this
03:30 - and here we can see the value of uh
03:33 - count which is printed here is zero now
03:37 - the reason for this is when we create
03:41 - thread one and thread two and when we uh
03:43 - call the start method on this uh thread
03:46 - one and thread 2 this returns
03:49 - immediately when t1. start is called and
03:53 - then this returns immediately after T2
03:56 - start is called and then this will print
03:59 - the value and after printing the value
04:02 - uh This Thread T1 and T2 will start so
04:07 - basically This Thread one and thread two
04:11 - will not wait to end themsel before
04:16 - printing the value of count that's why
04:19 - this is printing count is equal to zero
04:24 - why because thread one will start thread
04:28 - two will start and it will uh before
04:31 - looping through this uh loop it will
04:34 - print the value of count because this
04:37 - start will not wait until this thread
04:40 - one is dead and thread two is dead and
04:44 - it will print the value of count before
04:46 - the end of these two threads that's why
04:49 - we can see the value of uh count is
04:53 - equal to zero okay now to solve this
04:57 - problem what we can do is we can use use
05:00 - a keyword called join okay so what we
05:06 - are going to do we are going to use the
05:09 - keyword called join on T1 and T2 so
05:12 - let's uh introduce this join keyword
05:16 - join and this joint throws so we need to
05:20 - enclose this joint inside our Tri catch
05:24 - block so when you click this bulb you
05:27 - see that add throw declaration or
05:29 - surrounded by Tri catch so we will
05:32 - surround it with uh Tri catch block and
05:36 - inside this Tri catch block we will also
05:38 - call t2. join okay so what does this
05:43 - join keyword do here okay so let's see
05:47 - what this is doing so in Java this join
05:52 - method can be used to pause the current
05:55 - thread execution until and unless the
05:58 - specified thread is dead so when we uh
06:03 - call this join this join will allow This
06:08 - Thread to be dead or uh to be uh you
06:12 - know finished until and unless this
06:14 - second thread is called and finished
06:18 - okay and once these two threads are
06:21 - finished and then only we will print
06:24 - this value of count here okay so this
06:27 - join waits for for the thread to
06:31 - complete and then only allows the
06:34 - execution of other code after that okay
06:38 - so now let's run this program and let's
06:41 - see what happens so I'm going to save
06:43 - this and run
06:45 - this and now it's printing the value of
06:49 - uh count around 13,000 something okay
06:53 - let's run this once again 11,000
06:56 - something right run it once again 10
06:59 - ,000 something okay so this at this
07:03 - point it's increasing the value of uh
07:07 - count by one and we will expect that
07:11 - this count should reach at least 20,000
07:14 - because uh we are uh uh you know
07:17 - iterating 10,000 in one thread and
07:21 - 10,000 in other thread right so we will
07:24 - expect the value of count should be
07:27 - 20,000 but it's not 20 ,000 when we
07:30 - print this value it's around 10,000 and
07:33 - it's random
07:35 - 9,9 and
07:39 - 18,350 so why this is happening now so
07:43 - okay this join will wait for the thread
07:46 - to complete but this operation we are
07:50 - doing on this count which is increasing
07:54 - the value of count by one is really slow
07:57 - in the terms of computer execution
08:00 - so for example this count is something
08:03 - like this okay so it takes the value of
08:06 - count and then increases the value of
08:09 - count by one and then uh places in the
08:12 - same variable count so in the computer
08:16 - terms it's a long process and for
08:20 - example both the thread if they want to
08:24 - access this variable at the same time
08:26 - one will win and it will increase the
08:29 - value of of count by one okay so in this
08:33 - way both the threads are trying to
08:36 - access the value of count and increase
08:38 - it and that's why this uh count value is
08:42 - not reaching up to
08:44 - 20,000 now to solve this what we can do
08:48 - is we can use a keyword called
08:52 - synchronized so what we will do now is
08:56 - we can create a method for example
08:58 - public static void and we can name it as
09:04 - in count to increment count okay and
09:08 - what we can do inside this method is we
09:11 - can increase the value of count by one
09:13 - as we were doing inside this Loop okay
09:17 - and we can call this ink count inside
09:19 - our for Loop instead of this uh count
09:22 - increment like this okay in here and in
09:26 - here so basically this method is not
09:29 - doing anything but when we add a keyword
09:33 - called synchronized here so let's add a
09:36 - keyword called synchronized let's see
09:39 - what happens when we run the program so
09:42 - run the program and it prints
09:45 - 20,2 now it's printing 20,000 to because
09:48 - in our condition I should be less than
09:50 - or equal to 10,000 so when we do I
09:54 - should be less than 10,000 here and here
09:57 - and we will save the program and run it
10:00 - once again it prints 20,000 and we can
10:03 - run this program many times and it will
10:07 - always print the value of count is equal
10:10 - to
10:11 - 20,000 now what this synchronized
10:14 - keyword is doing here now in Java every
10:19 - object have its intrinsic lock and what
10:23 - this lock does is it locks the access of
10:28 - uh certain variable when this lock is
10:31 - called until and unless it uh does its
10:34 - uh operation on this variable and it can
10:38 - be only accessed by one thread only so
10:43 - this lock or this intrinsic lock can be
10:46 - called only by one thread at a time and
10:50 - if two threads wants to access uh one
10:55 - variable which is logged then one thread
10:59 - has has to wait for the acquiring of the
11:01 - lock and other thread will acquire the
11:04 - lock and uh do its operation so the
11:08 - synchronize calls this lock in
11:11 - background so this count can be accessed
11:15 - only once by one thread at a time okay
11:19 - so one thread acquires it and increase
11:23 - it and then other threads acquires it
11:26 - and increase it okay so in this way this
11:29 - synchronize solves the problem of thread
11:33 - interleaving uh in a way that it allows
11:37 - uh this variable to lock so that it can
11:41 - uh do its operation and then allows the
11:45 - other threads to do its operation so in
11:48 - this way the keyword join and keyword
11:52 - synchronized Works in Threads in Java so
11:56 - I hope you have enjoyed this video
11:57 - please rate comment and subscribe and
11:59 - bye for now