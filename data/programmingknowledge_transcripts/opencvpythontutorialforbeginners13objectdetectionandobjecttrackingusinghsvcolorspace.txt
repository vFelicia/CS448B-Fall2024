00:00 - hey guys welcome with the next video on
00:02 - open CV tutorials for beginners using
00:04 - Python in this video we will see how we
00:07 - can perform object detection using HSV
00:11 - color space now we have already seen how
00:14 - to work with BGR or colored images or
00:18 - grayscale images and we have already
00:22 - seen how we can convert from colored
00:25 - images to grayscale images so there are
00:28 - more than 150 color space conversion
00:31 - methods in OpenCV and one of them is
00:36 - colored image to HSV image now what is
00:39 - HSV color space so HSV stands for hue
00:45 - saturation value so H stands for hue as
00:48 - for saturation and V for the value now
00:53 - generally RGB in RGB color space are all
00:59 - correlated to the color luminance that
01:02 - is what we loosely call intensity in
01:06 - other words we cannot separate color
01:08 - information from luminance so HSV or hue
01:14 - saturation value is used to separate
01:17 - image luminance from color information
01:21 - so this makes it easier when we are
01:25 - working on or we need luminance in our
01:30 - images that is why generally we use HSV
01:33 - in the situation where color description
01:36 - plays a very important role now as I
01:40 - said HSV stands for hue saturation and
01:43 - value but what is the meaning of each
01:46 - and every single word in HSV now HSV is
01:51 - also known as the hack scorn color model
01:55 - so this color space can be described in
01:58 - this kind of cylindrical cone model
02:02 - where hue is this circular angle which
02:08 - varies from 0 to 360 and hence just by
02:13 - selecting the range of hue you can
02:15 - select any color so you can see
02:18 - different colors are available at
02:21 - different angles so these colors are
02:25 - basically red yellow green cyan blue and
02:29 - magenta so hue is this angle in this
02:34 - cylindrical cone now we have saturation
02:38 - so the saturation is amount of color
02:41 - that is the depth of pigment or the
02:45 - dominance of hue and this value is
02:49 - described from the center towards the
02:53 - outer layer of this cylindrical cone so
02:58 - you here you can see at the center this
03:01 - saturation start at zero and it can go
03:04 - up to one at the end of this cylindrical
03:08 - cone and this saturation can be
03:10 - increased from zero to hundred percent
03:13 - similarly the value is basically the
03:16 - brightness of the color so this
03:19 - brightness can be increased from zero to
03:21 - one from the bottom of the cone to the
03:24 - top of the cone so all these three value
03:28 - hue saturation and value can be used to
03:32 - pick any color as we can do with the BGR
03:37 - color space so this is the brief
03:39 - introduction about HSV color space and
03:42 - now let's see how we can use this HSV
03:46 - color space to detect an object in an
03:49 - image so here I have this simple code to
03:53 - load an image using I am Reed method and
03:56 - show it inside a window so by now you
03:59 - might already know how this code works
04:02 - so let's run this code and let's see
04:04 - what does this code do so I have this
04:08 - image which is called Smarties dot PNG
04:11 - and here are some circles in different
04:14 - colors so we have blue circles or green
04:16 - or red orange and brown circles here
04:20 - inside this image so let's say we
04:23 - somehow want to detect only the blue
04:26 - so girls or balls or green circles or
04:29 - balls how can we just detect only these
04:33 - balls let's say we just want to detect
04:36 - the green balls how can we achieve this
04:40 - using open CV we are going to see this
04:44 - using this HSV object detection and here
04:48 - we have one more window which is the
04:50 - tracking window which is coming from
04:53 - this code which is C v2 dot named window
04:56 - and the name of the window is tracking
04:59 - so this tracking window we are going to
05:01 - use little bit later when we will add
05:04 - the track bars to our image but let's
05:08 - say we want to use this image and detect
05:12 - these colored balls so first of all
05:15 - after this image is red what we want to
05:19 - do is we want to convert our colored
05:22 - image into our HSV image and by now you
05:26 - might already guess how to convert an
05:29 - image you can just write h as v is equal
05:32 - to c v2 dot cv t color and then your
05:38 - frame name which is frame in this case
05:40 - and then c v2 dot whatever color space
05:45 - you want to convert from and whatever
05:47 - color space you want to convert to so
05:50 - you can just write color underscore BG r
05:53 - to HSV so this is the property we are
05:56 - going to use now in the next step we
05:58 - will threshold the HSV image for a range
06:02 - of blue color so we are going to just
06:05 - define L underscore B for lower blue
06:09 - color and then we are going to use the
06:11 - numpy array so NP dot array and inside
06:16 - this array we are going to define the
06:18 - lower range of blue color now by
06:21 - experience I know that these HSV value
06:24 - for lower blue color will be a hundred
06:27 - ten comma 50 comma 50 right but you
06:33 - might not have every time the idea what
06:36 - is the lower color range or
06:39 - the upper color range of some color so
06:42 - that is why later in this video we will
06:44 - use the track bar in order to perfectly
06:47 - define the lower and upper values for
06:51 - this HSV color space right so right now
06:56 - I'm just going with my experience so for
06:59 - the upper value I'm going to define the
07:01 - next variable which is UB is equal to NP
07:04 - dot RA and then once again I'm going to
07:08 - define these three colour channels which
07:13 - is 1:30 comma 255 comma 255 so this will
07:18 - be the upper limit for the blue color
07:20 - for our HSV image now in the next step
07:24 - what we are going to do is we are going
07:25 - to threshold the HSV image to get only
07:29 - the blue color let's say so I'm going to
07:31 - just define a variable called mask here
07:35 - and then I'm going to use C v2 dot in
07:39 - range method where I will provide first
07:43 - of all my HSV variable or image and then
07:47 - I will provide the upper and lower range
07:50 - for this function so my lower range is
07:56 - this numpy array for the blue color so
07:59 - I'm going to just say L underscore B is
08:02 - my lower range and u underscore B is my
08:06 - upper range now we have already seen how
08:09 - we can use bitwise and or bitwise
08:11 - operations on images so what we are
08:15 - going to do next is we are going to
08:17 - define a variable called re s and then
08:21 - we will just call C v2 dot bitwise and
08:26 - to mask the original image so here the
08:30 - first value will be our frame which
08:33 - which is the color the frame right so
08:35 - this is the frame which we have read
08:38 - from this image which is the Smarties
08:41 - image so this is the source one so Stu
08:44 - will be the same so the frame itself
08:48 - will be the source 2 and what we want to
08:50 - do is we want to
08:52 - provide the mask of the lower blue color
08:56 - and the upper blue color values right so
08:59 - here we can just say mask is equal to
09:03 - whatever mask variable we have created
09:06 - so this is the attribute we can set in
09:09 - order to apply the mask for the lower
09:13 - blue value and the upper blue values so
09:16 - once we have this result frame what we
09:20 - can do is we can use this CV to dot I am
09:24 - show method in order to show the mask
09:28 - let's say so we are going to show the
09:30 - mask and we are going to show the result
09:33 - using our ES variable so this is going
09:37 - to open three windows and let's see what
09:40 - happens when we run this code so we are
09:43 - going to run this code and this opens
09:45 - three windows here and now you can see
09:49 - the mask first of all so we are just
09:53 - detecting the blue colored balls using
09:57 - this mask that's why we have defined the
10:00 - lower bound ation of the blue color and
10:04 - the upper bound ition of the blue color
10:06 - right so that's why it's only detecting
10:09 - you can see the blue ball is here here
10:13 - and here
10:14 - and here also you can see the mask also
10:19 - detects only the blue values here right
10:23 - and then in the result you can see when
10:26 - we have applied this mask and we have
10:29 - masked all the other things other than
10:32 - the blue colored ball you can see only
10:35 - the blue balls here so the same method
10:39 - you can apply to detect any other
10:41 - colored ball from this image now as I
10:45 - said it's not easy to detect these lower
10:48 - and upper bound ation for the colors so
10:53 - that's why you can use the track bar for
10:56 - adjusting these lower and upper bound
10:59 - ation of any color so for that what we
11:03 - are going to do is first of all we will
11:06 - create a named window and then we are
11:09 - going to create a new window which we
11:12 - will use to adjust the lower and upper
11:14 - bound ation of HSB values so now I'm
11:19 - going to just use CV to dot we have
11:23 - already seen how to create a track bar
11:26 - so I'm not going to explain in detail
11:29 - how this works but let's say this track
11:32 - bar name is lower you 4lh okay so this
11:37 - is the lower hue value and then the name
11:41 - of the window which is tracking which is
11:44 - this one so we are going to provide the
11:46 - name of the window and the next argument
11:49 - will be the starting and the ending
11:52 - value so we are going to define the
11:55 - start value zero and the end value let's
11:59 - say we are going to define 255 here okay
12:02 - and the last thing we want to give here
12:05 - is the callback function which I have
12:08 - already created which is this function
12:11 - which is just doing nothing we are going
12:15 - to just provide this callback function
12:18 - as a dummy function so it's not going to
12:21 - do anything so this is the track bar for
12:24 - the lower hue value similarly we are
12:26 - going to define the track bar for lower
12:29 - saturation and lower value and upper
12:33 - saturation upper value and upper hue
12:36 - okay so this will be lower saturation
12:40 - this will be lower value and then this
12:44 - will be you H which is upper hue and
12:47 - then this will be you as for upper
12:51 - saturation value and this will be upper
12:54 - value right so H as we lower values and
12:58 - adjust we upper values so here we are
13:02 - going to set the initial value for the
13:05 - upper value so let's say everything is
13:07 - set to the maximum so 255 255 and 255
13:12 - here okay so the lower values are set to
13:16 - zeros and upper values will be set to
13:19 - 2:55 now you already know how to get the
13:22 - values from attack track bar so you can
13:26 - use for example l underscore H for the
13:30 - lower QL use is equal to cv
13:33 - to dot get track bar position so just
13:37 - use get track bar position method and
13:40 - then first of all gave the name of the
13:43 - track bar from which you want to get the
13:46 - position so let's say we want to get the
13:47 - position from the LH track bar and then
13:52 - the name of the window which is tracking
13:54 - in our case so here is the second
13:58 - argument and similarly what we are going
14:00 - to do is we are going to define the
14:02 - other lower values and upper values so
14:12 - and also the name of your track bars
14:19 - so once you have the values of lower HSV
14:23 - and upper HSV you can provide these
14:26 - values here in place of these aesthetic
14:29 - values so first element of this array
14:33 - will be L edge and then the LS variable
14:38 - and then the L V variables similarly for
14:42 - the upper bound ation we will provide
14:45 - these three upper bound asian variables
14:47 - and now when we will run our code let's
14:52 - see what happens so we are running our
14:54 - code and you can see these windows these
15:00 - three windows one is the mask other is
15:04 - the result and the third one is the
15:07 - frame and we also have these track bars
15:10 - in order to change the value of lower
15:13 - and upper HSV values so first of all
15:16 - let's set this mask for the blue color
15:19 - so I'm going to just move it to 110 as
15:24 - we have done in the last step and then
15:28 - this will be around 50 and this also
15:32 - will be around 50 okay so let's move it
15:36 - to 50 and upper value here will be
15:39 - around 130 right so you can see once
15:43 - again using this track bar it's easier
15:46 - to adjust these lower and upper bound
15:49 - ation and now you can see all the three
15:52 - blue colored balls so you can refine
15:55 - this object detection by moving these
15:58 - track bars little bit left or a little
16:01 - bit right you can see here now let's
16:04 - adjust this value to detect some other
16:07 - ball so let's say we want to detect the
16:10 - green balls so let's see what happens
16:13 - when we just change the saturation
16:17 - values here and you can see now you
16:21 - almost see the green values and the blue
16:25 - color is almost disappearing so you can
16:29 - see now there are only green
16:32 - balls which are detected and all the
16:35 - other balls are masked so you just need
16:38 - to play with this track bar for the
16:41 - lower HSV values and the upper HSV
16:44 - values and you will be able to detect
16:47 - the object whatever colored object you
16:49 - want to detect from the image now this
16:52 - is the object detection from the image
16:55 - similarly we can use the same method in
17:00 - order to track an object from a live
17:03 - video so I'm going to just escape to
17:07 - just close all the windows and in order
17:11 - to change this code for the video input
17:15 - what we can do here is we can just add
17:18 - this code so we are going to just add
17:22 - the cap variable which is the capture
17:25 - variable is equal to CB 2 dot video
17:28 - capture so we are going to use this one
17:31 - and we are going to capture the video
17:33 - from our default camera which is at the
17:37 - index 0 and then you already know how we
17:42 - can read the values from the camera
17:45 - input so I'm going to just comment this
17:49 - code and instead of reading the image
17:52 - what we are going to do is we are going
17:54 - to write underscore comma frame is equal
18:00 - to cap dot read which is going to read
18:04 - the frames from your default camera and
18:09 - at the end when you are done playing
18:11 - with your images you can just destroy
18:15 - this cap using the release method so you
18:19 - can just write cap dot release just
18:21 - going to release all the cameras you are
18:24 - just capturing right so now this is the
18:28 - three line code you need to use in order
18:31 - to capture the camera input and then
18:35 - track any object of any color so I'm
18:40 - going to run this code now and you can
18:43 - see I'm just
18:45 - holding a blue colored object here and
18:48 - I'm moving this object on the left and
18:51 - right and you can see only blue colored
18:54 - object is detected and every other frame
18:58 - value is masked so this is how you can
19:01 - do the object tracking of any color
19:05 - using the HSV color space so you can see
19:08 - the real image which is captured from
19:11 - the camera and then the mask and then
19:14 - the result of the mask and the real
19:17 - image in this blue colored object
19:21 - tracking so this is how you can do
19:24 - object detection and object tracking
19:26 - using HSV color space I hope you've
19:30 - enjoyed this video and I will see you in
19:33 - the next video