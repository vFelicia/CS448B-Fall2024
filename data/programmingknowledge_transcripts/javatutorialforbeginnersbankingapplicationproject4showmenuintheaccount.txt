00:01 - hello and welcome back to the another
00:02 - video the Java tutorial Series so today
00:05 - in this video we will be covering uh our
00:07 - next functionality of the project that
00:09 - is the show menu projects so this is the
00:12 - main uh method which will hold the all
00:15 - uh functionality of our banking
00:18 - application it will call all those
00:20 - method which you have uh which we have
00:22 - written in our previous videos that is
00:24 - withdraw our previous transaction and
00:25 - the deposit and it will perform all
00:28 - those
00:30 - functionality of our project I guess
00:33 - okay banking application okay so in this
00:36 - video we will be writing this show menu
00:39 - method okay so for this I will cover I
00:43 - will write another
00:46 - method name show menu
00:49 - and this may this method will does
00:51 - doesn't require any
00:53 - parameter and then it doesn't return
00:56 - anything okay
00:57 - you know so inside this menu show menu
01:01 - show menu function method will uh
01:04 - basically do all those printing part
01:06 - printing stuff inside that console okay
01:08 - so for that uh and we will be carrying
01:11 - on uh declaring one character
01:14 - okay so character variable name as
01:18 - option and I will initially write his
01:21 - ads slash Studio okay so that will
01:25 - present null
01:27 - okay
01:28 - again uh oh I guess I have declared the
01:31 - scanner class over here so that is
01:33 - inside this main uh another class so I
01:37 - have to I guess I have to declare one
01:40 - scanner I guess
01:43 - scanner SC
01:45 - is equals to new scanner
01:49 - system dot in
01:53 - okay let's go I have imported this kind
01:55 - of
01:56 - over here and now uh I have to create
02:00 - that
02:02 - console stop here okay now so I will
02:06 - just oops sorry I will just sound one
02:09 - thing that is
02:12 - to welcome
02:16 - Plus
02:19 - customer
02:22 - name
02:24 - so
02:26 - this time uh intelligent idea is telling
02:28 - me that hey what is customer name you
02:30 - have it doesn't have declared it
02:32 - anywhere okay so for that uh I will be
02:36 - creating one
02:38 - variable over here
02:40 - that is of type
02:43 - this is customer name so that is of type
02:45 - string
02:46 - because customer name is in string
02:49 - format and I will write
02:51 - same customer name and one more thing I
02:54 - will be requiring is as customer ID okay
02:57 - and I will also declare it as spring
03:00 - customer ID
03:04 - Okay so
03:07 - whenever the object of this class is
03:09 - created uh I I want the user to give me
03:15 - the customer name and the customer ID so
03:18 - that I can print that name and the
03:20 - customer ID over here okay so for this
03:23 - one more concept was there of the of
03:26 - oops object of object oriented
03:27 - programming language that is Constructor
03:29 - so what basically Constructor does is it
03:33 - will get automatically called whenever
03:35 - the object of the class is created okay
03:39 - whenever I create the object of the
03:41 - class the Constructor is getting called
03:43 - and the Constructor name should always
03:46 - be as same as that of the class name
03:49 - okay so what is the class name bank
03:50 - account and this Constructor should
03:54 - accept the two parameters that is the
03:56 - customer name and the customer ID so
03:57 - that we can print that customer name and
04:00 - customer ID inside the console okay and
04:03 - so the name should be in the format of
04:05 - string
04:06 - screen name
04:08 - I would like to see now because that is
04:11 - a proper convention that is the customer
04:13 - name and I will write string
04:17 - CID that is the customer ID
04:21 - okay don't worry about this Constructor
04:23 - for till now for just now uh
04:27 - know that whenever we create the object
04:30 - of that class the Constructor get
04:31 - automatically called okay so this line
04:35 - number 15 to 17 and inside this
04:37 - Constructor whatever I'll write it will
04:39 - get automatically called whenever we
04:41 - create object of this background class
04:43 - okay so whenever I create this uh object
04:48 - of this class I just want to assign the
04:50 - customer name
04:52 - as the cname which is in given input by
04:55 - the
04:56 - scene name
04:58 - by the user and I just want that
05:01 - customer ID should be equals to the CID
05:06 - okay so that is pretty much about this
05:09 - Constructor I guess
05:10 - and now we can move to the towards our
05:14 - show menu function and start
05:16 - implementing this okay so I will write
05:19 - again one South statement over you
05:21 - should be there and I will write
05:24 - your
05:26 - ID is
05:30 - this and I will write
05:33 - customer ID
05:36 - okay so after this I want a new line
05:40 - should get painted on the console so for
05:42 - that I will write this out
05:45 - with empty nothing should be there so
05:46 - that the new line should be there and
05:48 - which looks
05:50 - nice okay
05:52 - and again
05:53 - I want one option number a so we have
05:58 - discussed over here the options of that
06:00 - our application that is deposit withdraw
06:03 - we address and reaction and the show
06:04 - menu
06:05 - okay so we will be covering that over
06:07 - here
06:08 - we will write
06:10 - check balance
06:16 - okay uh then
06:19 - again one more functionality should be
06:22 - there that is B Dot
06:24 - deposit
06:27 - if the user want to deposit some money
06:30 - inside this account
06:32 - and again see is retro
06:40 - t-r-a-w withdraw
06:44 - and again one more sound statement
06:48 - and now option number D to get the
06:53 - previous strand
06:57 - transaction
07:02 - okay now last option
07:05 - if either want to get exit from this
07:07 - hour application
07:08 - you want
07:10 - our user to click in
07:13 - so that you can exit from our
07:14 - application and so
07:17 - now one thing sure you should notice
07:19 - this show menu methods will display all
07:24 - the the steps inside the console okay
07:26 - and we don't want the user to get uh
07:29 - multiple times click on this run button
07:31 - run button and execute over this code
07:33 - again and again so we can what we can do
07:35 - is we can provide one uh
07:37 - look to the user wherein user can look
07:41 - iterate or iterate this functionalities
07:44 - or use this functionalities again and
07:46 - again as much time you want and whenever
07:49 - a user has done with all the
07:51 - application users and then simply user
07:55 - can type e to access it from our
07:57 - application okay so for this I will be
07:59 - using one blue while loop and inside do
08:04 - I will just first of all I will
08:07 - print one
08:09 - statement so it will look nice
08:13 - okay
08:15 - and then one more south statement should
08:17 - be there
08:18 - which will tell the user to enter
08:22 - the option
08:26 - okay
08:27 - enter the option
08:30 - and after that one more south statement
08:32 - should be there
08:34 - this line number 60 and line number 62
08:37 - it just used for the getting the console
08:40 - such a nice look okay and after that I
08:45 - will be doing option is equals to
08:48 - scan
08:50 - s is the object sorry SC Dot
08:54 - next
08:57 - Dot
08:59 - carat index 0 and I will be doing
09:03 - two
09:05 - I guess I can't do this here and a
09:09 - little bit we'll cover in the next
09:10 - upcoming video so in this way in this
09:13 - part I have taken one uh input from the
09:16 - user at the string and I will be
09:18 - returning the first character of that
09:21 - string okay so I have declared here the
09:24 - character as a here option and I have
09:27 - storing that user input inside this
09:30 - option and so user can input e d e c a b
09:34 - a b c d e any option that you either
09:36 - want that gets stored inside this
09:39 - option variable okay
09:42 - so now inside this I will create one
09:45 - switch
09:46 - and so for switch I will be passing
09:49 - option as the parameter
09:52 - so we have covered switch I hope you
09:54 - guys remember this
09:56 - how switch works and how what is switch
09:59 - okay so we'll be carrying one case
10:04 - for first case
10:07 - we will be passing a we will be writing
10:10 - the functionality if the user clicks a
10:12 - that is the check balance
10:15 - okay for that I will come inside this
10:18 - case and I will first of all print
10:23 - this line okay so this line is basically
10:27 - just to give that
10:30 - nice look to our application okay so
10:32 - again inside that I will write
10:36 - sound that is system.out.bination and I
10:39 - will simply print
10:42 - balance
10:43 - it's
10:46 - and I will concat it with
10:50 - balance
10:52 - okay and at last
10:55 - I will be printing again this just to
10:58 - give our application a nice look
11:01 - and I will print once our statement so
11:03 - that one extra line should be there
11:05 - between uh the switch next case okay
11:10 - so after that this is pretty much about
11:12 - the check balance I will just write
11:16 - foreign
11:18 - and
11:21 - for the next case we have
11:25 - case number B if these are given as B
11:30 - and I will just
11:32 - copy this statement over here
11:36 - just to give it
11:39 - oops sorry
11:42 - copy
11:44 - oh sorry guys
11:49 - V okay and what is the BP part uh B part
11:53 - is the deposit okay so when the user
11:55 - gives input as B we have to deposit the
11:58 - amount inside our
12:00 - account okay so it's out
12:03 - go either enter
12:06 - the
12:08 - amount
12:10 - to
12:13 - deposit
12:15 - okay
12:16 - so after this I will again print this
12:20 - line so that it will look nicer in our
12:24 - application
12:27 - okay
12:29 - now
12:30 - what I can do is int
12:35 - amount I will declare about variable
12:37 - name as amount and using HD dot next end
12:43 - I will receive that
12:47 - in input from the user and I will call
12:51 - deposit
12:53 - method inside this and we will pass that
12:56 - amount ready to the deposit function
12:58 - deposit method okay and after that
13:01 - I will just print One new line
13:05 - and I guess that that is the pretty much
13:07 - I would have to do inside this case
13:09 - number B
13:10 - right
13:11 - so what I have done uh
13:14 - then printed this on the console and I
13:17 - have taken one input from the user and
13:20 - showed it inside the amount variable and
13:21 - I have passed that amount variable to
13:23 - the deposit method and we have written
13:25 - the deposit method over here here you
13:28 - can see and this deposit method will
13:30 - update the balance of the in our account
13:33 - and update the previous transaction
13:36 - value also okay
13:38 - so after that
13:40 - moving forward
13:42 - to the case number c
13:49 - k c
13:52 - okay so what is Case C withdraw okay so
13:55 - we have to implement the withdrawal
13:56 - functionality over here so I will just
13:59 - simply uh
14:00 - copy this and paste code paste it over
14:03 - here enter the amount to
14:07 - withdraw okay
14:09 - after that
14:11 - again I will create one
14:14 - variable name amount 2 because amount is
14:18 - declared above already ridiculate about
14:20 - SC Dot
14:22 - next int
14:26 - and for doing the withdraw stuff we have
14:29 - returned one method withdraw and we will
14:32 - accept one parameter name is amount so
14:35 - we are passing that amount that that
14:37 - needs to be withdraw from our account
14:40 - and then again I will simply just print
14:42 - a new line so that it looks nice in the
14:45 - console
14:46 - okay this is pretty much we have to do
14:48 - inside this case
14:53 - okay so our next case is
14:55 - case
14:57 - D and let me just look what we have to
15:00 - do kst that is a previous transaction uh
15:04 - we have to perform the previous
15:05 - transaction inside this case and again I
15:08 - will just copy this because this is step
15:12 - that I required every time okay
15:14 - and inside this
15:17 - I don't require this because
15:19 - I don't need to print anything inside
15:22 - the console or getting input from the
15:24 - user that's why and inside this we I
15:27 - will call the get previous transaction
15:29 - method and this call will be uh go to
15:33 - here
15:34 - to a this method get creation reaction
15:36 - and this method will check this
15:39 - condition and according to that it will
15:41 - print that corresponding statement okay
15:44 - over here
15:46 - okay so I guess this is the pretty much
15:48 - we have to do inside this case and after
15:50 - that I will just print One new line
15:53 - and I will break this condition okay
15:59 - let's now I have to write again one more
16:03 - condition
16:05 - that is the E condition that is exit
16:08 - condition what if the user write e okay
16:12 - so in that case
16:14 - either one to get exit from this Loop so
16:17 - they will simply just print
16:20 - this statement
16:22 - and after this statement we will do
16:27 - break okay and
16:30 - this is all we have handled all those
16:33 - cases and
16:35 - we will sorry one default case which
16:39 - will handle and inside default case
16:43 - we should do Sprint something like
16:48 - when will get a default condition get
16:51 - hit when the user will enter uh doesn't
16:54 - enter a b c d e and other characters
16:58 - okay so in that case we just have to
17:01 - print
17:03 - invalid
17:05 - option
17:12 - please
17:15 - try
17:16 - again
17:19 - okay and I will simply
17:22 - create this
17:25 - okay so I guess so this is pretty much
17:29 - we have to do insert the switch
17:31 - okay so we have implemented this switch
17:35 - after that
17:38 - I will write while because this is this
17:41 - do while loop and inside while
17:43 - I will check the options value should
17:47 - not be equals to
17:50 - character P because if it is a e that
17:53 - that means user don't want to
17:56 - use our application anymore any more and
18:00 - you don't want to exit our form or
18:01 - application okay so this is pretty much
18:04 - about the show menu
18:07 - I guess we have done let me just zoom
18:10 - out so that you can see whole method
18:13 - inside one View
18:15 - okay I guess this is and one
18:19 - one pretty simple mistake was there
18:21 - inside this method I want you to think
18:24 - about it and let me know and we will
18:27 - also cover that inside in our next uh
18:29 - video we will try to rectify that
18:32 - errorings which is inside this to do
18:34 - while loop okay so for this video this
18:37 - is pretty much we have done okay so in
18:40 - this next in our next video we will
18:42 - continue this
18:43 - project and we will try to implement
18:45 - this project thank you for watching this
18:47 - video