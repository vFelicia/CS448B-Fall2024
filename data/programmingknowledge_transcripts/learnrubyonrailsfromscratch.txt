00:00 - we are going to start with a new
00:01 - tutorial on ruby
00:03 - so basically ruby is a programming
00:06 - language
00:07 - so like ruby has been used a lot
00:10 - in the programming world and it is one
00:12 - of the most important languages
00:13 - so we are going to start with like some
00:16 - basics of ruby
00:17 - and then we are going to move on uh like
00:20 - a framework on ruby that is rails
00:22 - so basically that is properly known as
00:24 - ruby on rails so initially we will start
00:27 - with the installation part
00:28 - and then we are going to proceed and
00:30 - enhance ourselves to the
00:32 - ruby on sales framework so basically the
00:35 - to be honest like ruby is a programming
00:37 - programming
00:38 - language and ruby on sales is a
00:41 - framework based on
00:42 - ruby language which is used on web
00:45 - development like basically to use as a
00:47 - backend framework
00:48 - so you can create your own packet
00:50 - framework and then you can extend it to
00:52 - like front end as well
00:53 - using erbs so today first you'll start
00:56 - we're going to start with the basics of
00:57 - ruby
00:58 - and then we are going to continue with
01:00 - it so to install ruby on your machine
01:02 - you can move to this website this
01:04 - website is known as ruby installer for
01:06 - windows
01:07 - so basically you can download click on
01:09 - the download button here
01:11 - and then you will have all the versions
01:13 - so
01:14 - so make sure you install one with the
01:16 - dev kit so it will
01:18 - uh help you so you can install ruby with
01:20 - the dev kit
01:21 - and you can click on like this is like
01:23 - uh you can click on any
01:25 - and depending on your requirement like
01:28 - the 32-bit and 64-bit you can install it
01:31 - so uh like i had downloaded the one
01:34 - which is at the top so you can also
01:36 - download and
01:38 - when you download you will get an
01:39 - installer which will uh like take some
01:41 - time to install
01:42 - and then uh like it's a very like that's
01:45 - very
01:46 - easy process to install it will keep on
01:48 - installing and
01:49 - when you will install this installer
01:53 - then you can move ahead with the stock
01:55 - so this is
01:56 - another like uh website you can refer
01:58 - this so this is like a ruby dot
02:00 - org so you can also refer to this
02:03 - website
02:04 - okay then you can like these are the two
02:07 - documentations you can refer
02:09 - and this is how we like uh yeah so
02:13 - let's uh move on to the tutorial so
02:15 - after like moving to the installation
02:17 - and documentation you can start
02:19 - running some blue programs on your
02:21 - machine so we will initially
02:23 - start with them so i'll show you how you
02:25 - can create one and
02:26 - run one so let's move to the programming
02:28 - part
02:29 - so this is my vs code editor so like i
02:32 - have created a folder
02:33 - with the name ruby so ruby basically
02:37 - what you can do first
02:38 - you have a command line here so what you
02:41 - can do
02:42 - so you can create a file new file
02:45 - and you can type hello dot
02:48 - rb so basically ruby files are run with
02:52 - this
02:53 - uh extension and then you can uh
02:56 - uh yeah so basically now i'm inside this
03:00 - folder which has a header.rb file
03:04 - to make sure you have installed ruby on
03:06 - your machine you can type ruby
03:08 - minus v okay so ruby minus v would give
03:11 - me the like the version which i have
03:12 - installed and
03:13 - it's perfectly fine okay now now first
03:16 - we are going to create a hello world
03:18 - ruby program
03:19 - okay so what we're going to do
03:22 - we are going to like first clear this so
03:25 - now we are going to do
03:27 - put s hello world
03:30 - okay so this would like put as hello
03:33 - world would create the ruby program now
03:34 - to run the ruby program what you need to
03:36 - do
03:36 - ruby hello dot rb
03:40 - so this would like to run the program on
03:42 - your machine so this gives the output
03:44 - hello world
03:45 - so we will start with some few basics
03:48 - like one is like creating the variables
03:51 - so this is like a is equal to one okay
03:54 - uh b
03:54 - is equal to two and we are going to do
03:58 - uh what uh okay i'll show you one thing
04:01 - and we are going to put this in a
04:02 - variable
04:03 - a a plus b c c is equal to a plus b
04:07 - and we are going to put sc so
04:10 - uh first i'll run this and i'll show you
04:12 - how this works so it works perfectly
04:14 - fine uh but if you want to do some like
04:16 - string formatting so what you can do
04:18 - you can put like this and you can do
04:22 - the sum of
04:26 - a okay the sum of a plus b
04:31 - is equal to c okay okay first i'll run
04:34 - this program and i'll show you
04:36 - what i'll do i'll run this again i'll
04:39 - clear this and i'll run this
04:41 - so here you see the sum of a plus b is
04:43 - equal to c this doesn't satisfy our
04:45 - condition
04:45 - so again it will apply string formatting
04:47 - for what for that what you can do you
04:49 - can put a hash symbol
04:51 - and put them inside a curly braces so
04:54 - this would get the value of that
04:56 - particular variable
04:57 - okay now it will format inside the
04:59 - string and now you can run this
05:02 - now the sum of 1 plus 2 is equal to 3 so
05:05 - this is how we achieve it
05:06 - so it was a good example there's another
05:09 - statement in ruby i'll show you
05:11 - which says print print
05:14 - hello world okay
05:17 - uh and i'll clear this again and i'll
05:19 - run this program
05:21 - yeah so it says hello world okay
05:23 - different between what is the difference
05:24 - between the print and for testing
05:26 - okay i'll do another statement first
05:29 - okay
05:31 - okay uh first i'll do put s
05:34 - first line put
05:37 - s uh i'll do second line
05:42 - okay uh now i'll make sure that i clear
05:45 - this
05:46 - uh screen yeah now i'll do
05:51 - first line second line so this is the
05:52 - output perfectly fine
05:54 - okay uh now i'll do another one
05:58 - sorry now i'll do print
06:04 - first line
06:08 - and i'll do another one print second
06:10 - line
06:11 - so the print second line would like what
06:14 - i'll do
06:15 - i'll clear this and i'll run so it's
06:18 - it here you can see it doesn't give a
06:20 - line break okay to achieve that
06:22 - you can put a slash in here
06:25 - okay now i'll run this
06:30 - now we can see we got the same statement
06:32 - as like put a statement so basically i
06:34 - just wanted to tell you
06:35 - that put statements always gives a line
06:38 - break so whatever you type it would
06:40 - automatically give
06:41 - give the slash n or a line break to the
06:43 - next line
06:44 - but print statement doesn't give that so
06:46 - this is the only difference between the
06:47 - test statement and printer segment
06:50 - okay so we can do one some uh like more
06:52 - things
06:53 - uh in ruby like the first uh like the
06:55 - before we move to some
06:56 - conditions like first we make a let's
06:58 - make a simple function
07:00 - so let's make a function define add okay
07:03 - and it will take two variables a comma b
07:06 - okay
07:07 - now since this is ruby uh you don't need
07:10 - like
07:11 - uh you might be thinking that this looks
07:13 - like python in a python we have a column
07:15 - symbol here
07:16 - okay uh but here it is not needed okay
07:19 - so like you can remove this so it'll say
07:22 - to throw and we need to end the function
07:24 - with this
07:26 - okay so the body of function will lie in
07:28 - between okay
07:29 - so it says either you can do return
07:32 - a plus b like simple or you can do
07:35 - protest a plus b
07:36 - so let's do this like for the simplicity
07:39 - let's uh
07:40 - what we can do uh we can store this in a
07:44 - variable
07:44 - c a plus b and now
07:48 - what we can do we can put s c
07:51 - okay uh then we can like call the
07:54 - function add
07:55 - with two comma three 2 comma
07:59 - 7 and it should work fine
08:04 - so here we got the 519 uh we could also
08:07 - do that
08:08 - like uh so this is we could also return
08:10 - the statement
08:12 - a a plus b
08:15 - and we could get the return value here
08:19 - like result result is equal to add a
08:23 - comma b
08:24 - result
08:28 - and what we can do we can do
08:32 - put s result here and
08:35 - call the same statement here so it
08:38 - should work fine
08:39 - also and this is how the return
08:41 - statement also works in ruby
08:43 - so this is good so we like learned how
08:46 - to create functions
08:47 - like in ruby and like we made a good
08:50 - progress so far
08:51 - uh we can also create a swap function in
08:55 - ruby is in one line
08:56 - like i'll show you a is equal to 5
08:59 - b is equal to 10 okay
09:02 - now i'll do put s a comma b
09:05 - will this work okay we'll check this
09:09 - so it works perfectly fine put s a comma
09:11 - b okay
09:12 - uh i'll use print okay this would give
09:15 - you better clarity
09:18 - now here you can see print s yeah like
09:21 - print a comma b
09:23 - so okay i'll give space
09:32 - okay so this is fine
09:37 - so right now we have two variables a
09:39 - comma b with the value 5 and 10 now what
09:41 - we're going to do
09:42 - we are going to repeat this statement
09:44 - but before repeat we are going to do a
09:46 - comma b
09:47 - is equal to b comma a okay so
09:51 - this is like we are going to clear this
09:52 - and run it again so
09:54 - okay yeah so i need to give a slash in
09:57 - statement here
10:03 - so here you can see 5 comma 10 has been
10:05 - placed to 10 comma 5
10:06 - so basically in ruby this is also a
10:08 - valid statement x comma y
10:10 - comma z is equal to 1 comma 2 comma
10:14 - 3 okay and when i do print
10:18 - print x okay print
10:22 - y uh okay i'll do this
10:26 - okay now i can remove this code since
10:28 - this is needed
10:30 - print x okay print y
10:34 - and print set so
10:37 - this is a valid statement in ruby now
10:39 - i'll run this
10:42 - so here you can see this is also valid
10:44 - so this is good so we can assign values
10:46 - using comma using comma
10:48 - and separating them we are going to
10:49 - start some with some conditions and
10:51 - operators
10:52 - so let's start with a tutorial so
10:54 - basically
10:55 - we are going to create two variables a
10:58 - is equal to
10:58 - 100 b is equal to 50
11:04 - and now we are going to define put s a
11:07 - plus b
11:09 - okay the we are going to i'm going to
11:11 - repeat these four statements
11:13 - so this is put as a plus b this is put a
11:16 - minus b
11:16 - this is put as a by b and this is put as
11:20 - a multiplied by b and the last one is
11:22 - going to put as
11:23 - a modulo b so let's run this file
11:27 - ruby conditions and operators or rb so
11:30 - we get all the result
11:31 - the addition takes it to 150 minus takes
11:34 - a 50
11:35 - a by b 2 and this is 5 000 and this is
11:38 - model this is zero
11:39 - so this is fine okay and now let's
11:43 - start with some conditions some basic
11:45 - condition so
11:47 - so let's take with uh
11:51 - so let's create a variable and try to
11:54 - give this a value true
11:56 - and false and let's
11:59 - put sc okay so let's
12:03 - remove this yeah so this is false okay
12:06 - uh let's change this to or operator
12:11 - and let's run this file again
12:15 - okay here now this is true
12:19 - so you must be clear with all the
12:21 - conditions like how this kind of player
12:22 - 2 works in our operator was so this is
12:24 - fine
12:25 - go now and now what we can do
12:29 - we can like this is perfectly these are
12:31 - some basic conditions now let's create
12:32 - some if conditions
12:34 - so for if conditions let's create a
12:38 - a grade we'll give this a value
12:41 - if grade greater than equal to
12:44 - 90 then put s
12:47 - a plus else
12:50 - uh this sn so else if so please
12:54 - make a note of this e l s i f else
12:58 - if grade is less than equal to 89
13:03 - okay now then i will do this then is
13:04 - greater than equal to 80
13:06 - and okay and grade
13:10 - less than equal to 89 so this this
13:13 - it lies in this range so
13:18 - we do put s
13:22 - b or we can assign it a else
13:27 - else put s
13:31 - b plus l uh and then we need to
13:36 - end this if condition so i'll just make
13:38 - a like these are
13:39 - three conditions if else else so we will
13:42 - give
13:42 - values to it and see how this condition
13:44 - was let's give the grade
13:45 - equal to 99
13:48 - so okay a small stick okay yeah
13:51 - i like this blue coat looks very
13:53 - intuitive to python so
13:55 - you don't need a semicolon a colon here
13:57 - okay so let's run this
14:00 - and here we are aboard it a plus now
14:03 - let's give it a 85
14:07 - let's give it a value 85
14:10 - now let's run this now it is a
14:14 - and now let's give it a value 75 and it
14:17 - should move to the else part
14:19 - okay now let's run this and it is b
14:23 - plus so this is how we make conditions
14:26 - now let's move to the
14:27 - like while loop so for that we can
14:31 - define a variable a 0 so while i
14:34 - less than equal to 10
14:37 - okay so simply put s i
14:41 - and make sure you increment the i else
14:43 - it is in an infinite loop
14:46 - okay and now let's run this okay yeah
14:49 - so you need to end this loop here okay
14:52 - so
14:53 - i was going with some speed so yeah
14:57 - so this is how a while loop works okay
15:00 - now uh you can also
15:05 - work with for loop so there are two ways
15:08 - to work on a for loop
15:09 - so before we work on for loop i would
15:12 - like to
15:13 - show you the case statement
15:16 - okay the case statement is very much
15:19 - similar okay so okay what i'll do first
15:22 - i'll move with the like for loop so
15:23 - because
15:24 - i did the while loop first so uh
15:27 - then i'll move to case statement in ruby
15:29 - okay
15:30 - so basically case statement in the ruby
15:31 - are similar to switch statements okay
15:34 - so let's move to okay before we move
15:37 - i'll do
15:37 - word and print this i'll show you one a
15:39 - range operator range operators is
15:41 - denoted by double dots and there's a
15:44 - small difference with one dot two dot
15:46 - three dots like there's a difference
15:47 - between i'll show you what how
15:49 - see when i do put s
15:52 - put s range of
15:56 - 1 200 okay
16:00 - okay so i'll show you
16:06 - okay
16:11 - now i'll show you
16:16 - so yeah so i just forgot to lick this
16:19 - is to underscore array so it says
16:22 - i'll convert this range 100 to an array
16:26 - and here you see i have two dots okay so
16:29 - in these two dots here you can see
16:31 - this one too i'll show you a small like
16:34 - i
16:35 - i'll show you a small one yeah i know
16:36 - it's fine i'll do
16:38 - this
16:41 - now here you can see the value is from
16:43 - one to ten increases of inclusive of 10
16:46 - the 10 is here
16:47 - when i put an extra dot here so 10 will
16:50 - not be included see
16:53 - so here you can see the last value has
16:56 - been excluded so
16:57 - it is because of the like extra dot so
16:59 - this is how it works
17:00 - okay so like this is what you can use
17:04 - this
17:05 - to work in like a for loop
17:09 - so for i in
17:13 - 1 to 2 10 okay
17:17 - and you can do put s
17:21 - i okay
17:24 - so let's clear this
17:30 - okay you need to end this for loop like
17:32 - i uh
17:34 - what to do that
17:38 - and this is how a for loop works with
17:40 - the full range okay
17:42 - now let's move to case statement in ruby
17:45 - so so what you can do
17:48 - the very first example the one with for
17:51 - which we made the great
17:52 - we'll do this with the grid okay so
17:54 - we'll take a variable grade
17:55 - and this time we are going to define
17:57 - case grade and uh i'll first try i'll
18:00 - automatically end this before i forget
18:01 - this
18:02 - so case grade now what i'm going to do
18:06 - uh when
18:09 - one
18:13 - so k is great and when when this
18:16 - crate is less than is greater than equal
18:19 - to 90
18:20 - then i put s a play a plus
18:23 - okay when
18:26 - this grade
18:29 - how great is greater than
18:33 - equal to 80
18:36 - and grade less than equal to 89
18:42 - put s a when
18:46 - grade uh when grade
18:49 - uh then you can have a default statement
18:52 - but i'll show you one
18:53 - when grade is greater than equal to
18:56 - 70 and and
19:00 - grade less than equal to 79
19:03 - then you can do put s
19:08 - put as b
19:12 - else uh
19:15 - something like else put s
19:19 - improve something like this uh
19:22 - now i'll put some great value 95
19:26 - and i'll try to run this and
19:30 - so okay i made a mistake then i'm
19:32 - putting a colon here
19:36 - sorry
19:38 - so this is
19:41 - okay when
19:44 - like this didn't hit like something is
19:50 - missing
19:52 - it's good one good okay let me check
19:54 - what's the issue with this
19:57 - hey hey everyone uh welcome back uh that
19:59 - time i made a mistake the mistake was
20:01 - like
20:02 - uh like uh like the mistaken distance i
20:04 - opted to
20:05 - use case grade here so i used to just
20:07 - define the variable so
20:08 - uh earlier i was also like instead of
20:11 - this
20:12 - i was also comparing the value grade
20:14 - greater than equal to 90. this was not
20:17 - needed because
20:18 - i had already used case grade so this is
20:21 - not
20:22 - needed to repeat the same here okay so
20:24 - let's
20:25 - uh like let's uh so
20:28 - let's remove this now the perfect like
20:30 - syntax for great statement is this now
20:32 - let's run this
20:33 - now for 95 it rewards a plus let's do
20:37 - this to 85
20:39 - for 85 it will reward a and for 75
20:44 - it will reward b and
20:48 - for like let's take another value 55 it
20:51 - should
20:52 - prove to move to improve statement that
20:54 - is else
20:55 - so today we are going to start a new
20:57 - tutorial on some basic data structures
20:59 - in ruby
21:00 - so the most basic data structure and the
21:02 - like
21:03 - one of the most important although is rs
21:05 - so today
21:06 - we are going to continue with array in
21:09 - this tutorial
21:10 - and let's see how we like initialize
21:12 - some array in ruby
21:14 - so very basic method is to do nums is
21:16 - equal to one
21:17 - two three and now you can do and
21:21 - and you can i'll also initialize another
21:22 - array names
21:24 - is equal to joe
21:28 - john and checked
21:32 - so this is the one one is a area of nums
21:35 - and this is our of strings
21:37 - so these are like two data types you can
21:39 - initialize one is of integer type and
21:40 - one of string type
21:41 - and now we what we are going to do we
21:43 - are going to like
21:45 - see how we can for print this array the
21:47 - one way to print this do
21:48 - put test nums now let's run this file
21:52 - now here you can see i have printed the
21:54 - array another way
21:55 - is to like s names so this would like
21:59 - run the array like sorry print the array
22:02 - so this is one way of printing another
22:04 - way is you what you can do is
22:06 - you can treat this as a variable i have
22:08 - already told you like
22:09 - how we like like read the variables and
22:12 - print this
22:12 - and this is like this is also going to
22:15 - work
22:15 - and this is going to collect sorry
22:19 - this is going to print in horizontal
22:22 - direction so here you can see
22:23 - like this so same you can do with the
22:26 - names also
22:27 - okay and uh it looks good to go
22:31 - yeah so here you can do also the same
22:33 - thing
22:34 - now one way to also initialize the array
22:38 - is like you can use array dot
22:41 - new and this
22:44 - uh the like this is like eric class
22:46 - which calls constructor
22:48 - and this is added dot new and this is
22:52 - joe john and jack so let's run this
22:56 - again and let's see it works perfectly
22:59 - fine
23:00 - and let's run this for nums also
23:03 - and let's see yeah so
23:08 - so here it also works perfectly fine so
23:10 - this is one way of
23:11 - printing the array in ruby so another
23:14 - way
23:14 - what we can opt for is like i told this
23:17 - new operator
23:18 - now what you can do you can also use the
23:22 - range operator as well
23:24 - and uh uh some i'll show you one thing
23:28 - and we can comment this out now since
23:30 - this
23:31 - is not needed and i've all put this
23:33 - cover in comment so it's just for your
23:35 - reference
23:36 - so you can also i'll do this put test
23:40 - names let's put test nums so
23:43 - these two things are also not needed i
23:45 - can comment this yeah
23:47 - so now we can use another array
23:51 - let's take a variable m and let's give
23:55 - array dot new and i'm sending five
23:58 - times i want this word hello so
24:01 - when i do put s so hash
24:05 - m so it would give me
24:09 - a hello five times inside the area so
24:11 - this is a trick
24:12 - now one thing you need to observe now
24:14 - i'll remove
24:16 - i'll remove uh like the same can also be
24:19 - initialized with an integer variable so
24:22 - like i'll do this
24:25 - so now it says five times i get the zero
24:28 - if you want to initialize some empty
24:29 - array with some particular value you can
24:31 - do this
24:32 - okay so i'll comment this out also sorry
24:35 - yeah so yeah so this looks perfect
24:39 - perfectly fine now what we can do is
24:42 - uh we can also
24:46 - use another range operator and for that
24:50 - what we are going to do array this time
24:52 - we don't use the new operator we are not
24:54 - using this okay
24:55 - we will not use this and we give 20.30
24:59 - if you don't want to include factory put
25:00 - an extra dot i already pre
25:02 - put in this my previous tutorial that
25:04 - this would include the last element
25:07 - last range and this would not include
25:09 - the last range okay
25:10 - now put s hash
25:14 - m and let's go with this
25:17 - and now here you can see i've got the
25:20 - array so make sure you don't put the new
25:22 - operator this time
25:24 - now some basic operations you can do
25:27 - with the arrays
25:28 - is like some basic operations you can do
25:31 - uh so like one is now let's create uh
25:35 - like
25:35 - some uh like dummy array a
25:38 - is equal to a what
25:42 - new and i'll say one
25:46 - one two three let me try out some with
25:49 - random
25:50 - limit 10 20 30 40
25:54 - 50 okay now
25:58 - uh you can uh i'll show you one thing
26:01 - also you can also what i'm trying to
26:05 - emulate here you can also
26:06 - run this on ah like irb command
26:10 - so that is rails interactive console so
26:12 - you can run this irb
26:14 - and then you can have an interactive
26:16 - rails console and you can run this
26:17 - or there also okay so let's um
26:20 - uh let some like let's move to the next
26:23 - thing
26:24 - then you can type exit and you can come
26:26 - out of this interact console so i'll
26:28 - show you also how to work with
26:29 - interactive rails console
26:31 - and now what you can do you can do first
26:33 - the very basic command you can do put
26:35 - test a dot
26:36 - length okay so let's run this
26:41 - and when i run a dot n so it gives 5 the
26:44 - same thing can be a
26:45 - dot size also so when i run a dot
26:48 - size so it gives 5's as well okay
26:51 - another thing
26:52 - we can run is uh like another thing we
26:55 - can run is
26:56 - a dot first and a dot last so a dot
27:00 - first would
27:00 - return me the first element now let's
27:03 - run this
27:03 - a dot first because this gives 10 now a
27:06 - dot
27:07 - last would give me the last element
27:11 - so that is 50. so it would first return
27:13 - me 10 a to last 50
27:15 - and the size and length works is
27:16 - perfectly fine okay
27:18 - so we can run these commands to like
27:21 - have a better overview
27:23 - another thing we can have is push and
27:26 - pop
27:26 - okay so i'll show you push and pau
27:32 - so hey everyone like this was like four
27:34 - operators we had seen like
27:36 - one was the first last uh
27:39 - and size and length so you can use all
27:42 - of them first
27:43 - okay you can also lose last and size
27:49 - and length okay so these are the four
27:51 - operators we can use uh
27:53 - one thing you could also use you can use
27:55 - 8.2 underscore string
27:57 - so this would convert this to a string
27:59 - okay so i'll show you how
28:00 - this runs so here you can see so here we
28:03 - have got the string output of this
28:05 - uh it already looks like ruby rail ruby
28:08 - also
28:08 - does this behind the scenes like when we
28:10 - are using put s
28:12 - so it already does this behind the scene
28:14 - so we don't like i get intuition like
28:16 - this is happening okay so this is one
28:18 - thing you can also do
28:19 - so two operators like we can do use
28:22 - we can push 60 now we can print this
28:28 - and we get 60 okay now
28:32 - okay okay i did like okay i did one now
28:35 - we can do this
28:36 - sorry
28:40 - i had like then this like but it works
28:43 - perfectly fine not an issue
28:45 - but yeah this is the correct way to do
28:47 - it now i can do a dot
28:49 - pop also
28:52 - so the pop would remove the element
28:56 - i'll show you so basically pop removes
28:59 - the element from the last okay it
29:02 - uses like append so it works it has a
29:04 - similar behavior to the stack data
29:06 - structure
29:06 - so like it now
29:10 - basically it like pushes the element
29:12 - from the back and
29:13 - pops the element from the back so it
29:14 - behaves like a stacked data structure
29:16 - okay
29:17 - now we can move to like one last thing
29:19 - is
29:20 - uh there are various method in ruby like
29:23 - each with index
29:24 - and with index so the important one is
29:26 - the very important one is each
29:28 - with index because this works as a folly
29:32 - for each loop
29:33 - h with index i get two things in this
29:36 - one is the value and another in the
29:39 - index
29:40 - okay so i am
29:44 - going to type this put as a statement
29:47 - right the value
29:51 - add index okay
29:54 - now i'm going to put iadx is
29:58 - hash val okay
30:01 - so this is is going to print like five
30:04 - times
30:04 - or like so and this is like this is the
30:08 - one of the most so the value at index 0
30:10 - is 10 valued index 1 is 20
30:12 - value index 2 is 30 and value of index 3
30:15 - is 40
30:16 - and the value at index 5 is 50.
30:19 - uh we could also
30:23 - like uh we could also move with some
30:26 - another methods
30:27 - so there are various methods and array
30:29 - you can like have a view
30:30 - so we can also like uh delete
30:35 - underscope add at zero
30:38 - so this would this should probably
30:42 - okay i forgot to print this sorry
30:45 - put s
30:48 - hash a okay now let's run this
30:52 - so basically delete at the index 0 okay
30:56 - now if you want to delete the particular
30:59 - element so you need to define 20
31:02 - so this would delete the one at 20. so
31:05 - see perfect
31:06 - today we are going to start with some uh
31:08 - continue with some more
31:10 - basic data structures input data
31:11 - structures in ruby so let's start with
31:13 - so let's create a string a and type it
31:16 - as hello world
31:19 - now simply we can print the string onto
31:21 - the console by using put s
31:22 - a so you can first
31:26 - you can type ruby ds dot rb and this
31:29 - would run the
31:30 - program and it says hello world
31:31 - perfectly fine you could
31:33 - also initialize the string using the
31:36 - string inbuilt class string dot new
31:39 - hello world
31:42 - okay now instead of a i'm
31:45 - printing i am printing b
31:48 - and now i clear this and i'll say
31:52 - put sb and it says hello dot hello world
31:56 - and i like it's the same output as the
31:59 - previous one so hello world hello world
32:00 - are perfectly fine
32:02 - now i can type put s a is equal to b if
32:05 - they both are equal so it should return
32:07 - true so it returns true so it returned
32:10 - perfectly fine so it looks perfectly
32:12 - fine true is the correct answer for this
32:15 - now you could also type put as a dot
32:18 - length
32:19 - so let's see the output of this so it
32:22 - turns out to be 11
32:23 - good yeah now you could also do a dot
32:26 - size
32:27 - you can and the both of them return 11.
32:30 - so the both of them work with the
32:31 - same thing so now you can
32:35 - you can also type a
32:39 - dot uh one thing i i'll show you there
32:42 - is a method
32:43 - and now uh just for a second you can
32:45 - comment both of them
32:48 - okay i'll comment out and i'll make an
32:51 - array c and this is an array
32:55 - one two three and i'll put a c dot
32:58 - include include
33:02 - uh what does it include what i want to
33:03 - check does it include two
33:05 - okay so i'll
33:09 - it returns true okay so yes it includes
33:12 - true
33:12 - the same way you can do it for strings
33:16 - also
33:18 - so you can do this both same way you can
33:20 - do it for strings also so i'll do
33:22 - a dot include
33:25 - this character so it should
33:30 - return true the same it turns for this a
33:32 - also
33:33 - so the include method is used for both
33:36 - strings and arrays
33:37 - now uh since i don't need this
33:42 - okay so i'll remove this yeah so now
33:45 - what i can do
33:47 - you want to increase the access the
33:49 - first character you can
33:50 - please say a of 0 so this would give you
33:53 - the particular index so
33:54 - i'm showing you this gives me first
33:56 - character now
33:58 - to access the last character you can do
34:00 - either a dot
34:01 - length minus 1 so this would also work
34:05 - perfectly fine
34:06 - okay it does stay it gives you the last
34:08 - character but you could also use
34:10 - negative slicing and
34:11 - string uh string like in ruby there is a
34:14 - negative slicing which returns you from
34:15 - the end
34:16 - okay minus 1 is the last one minus 2
34:19 - minus three minus
34:20 - four you keep on going like this okay so
34:22 - i'll show you
34:23 - oh it also gives the last character so
34:25 - this is the two
34:26 - ways you can manipulate strings in ruby
34:30 - uh now one we are left with some another
34:33 - command such
34:34 - as some basic this a dot up case
34:38 - okay and
34:41 - a dot uh
34:45 - put s a dot down case first i'll do one
34:47 - by one
34:50 - now a dot up case returns upper string
34:52 - and a dot down case
34:54 - returns the
34:59 - lower case so by default it was lower
35:01 - okay now i'll do
35:02 - a dot down a dot up case
35:06 - and i'll do put s a so
35:09 - here you might see sorry so now here you
35:13 - see
35:14 - that i did a dot up case but then put s
35:17 - a didn't turned out to be the one in the
35:19 - upper uh
35:20 - uh upper capital letters so for that you
35:23 - need to you put an explanation mark
35:24 - which is
35:25 - all uh now this would what it will do
35:28 - this it will now do the inbuilt
35:31 - operation
35:32 - within that string so see the output of
35:35 - this
35:37 - now it converts the default a to up case
35:40 - as well okay
35:41 - so so this is good so now we can move to
35:45 - hash maps
35:47 - so hash maps is like
35:50 - grades is equal to new
35:54 - okay now you can do
35:58 - grades of n
36:01 - is equal to a plus
36:04 - and grades of nine
36:08 - is equal to a and grades of eight
36:14 - is equal to b now let's put s
36:19 - grades
36:25 - so here is the hash map for the 10 is a
36:27 - plus nine is a and a it is b
36:30 - now let's put as grades of n okay
36:33 - uh this should give
36:36 - us a plus perfectly fine so this is how
36:39 - can you use
36:40 - it but what if i do grades of 7
36:44 - so grades of 7 is not defined
36:48 - and when i run this it gives me nothing
36:51 - so to avoid that you can use dates
36:55 - or default if it is not default
36:58 - i'll do improve okay now this would turn
37:03 - out to be improved
37:04 - now i'll run this again and it says
37:07 - improve
37:07 - okay so this is how i can set the
37:11 - default value
37:12 - okay now i can uh use uh
37:15 - this is good now i comment this out
37:19 - a is new and b is equal to
37:23 - hash dot mu now a of 0
37:27 - is equal to 1 just assigning some random
37:30 - values or let this be a
37:32 - b of 0 is also a
37:36 - okay yeah
37:40 - now i'll do put s
37:43 - i'll do put s a
37:47 - and put s p
37:54 - so initialize constant b
37:59 - uh like line number 15
38:04 - okay let me check what's the issue so
38:07 - uh like there was some like it was like
38:10 - i might have not saved the file
38:12 - uh like uh a is regular hash dot new b
38:15 - is called
38:15 - dot new a of zero zero when i put
38:19 - s a and b okay so basically when i put s
38:22 - a n input is b so both of the same are
38:25 - equal both of the hash maps are equal
38:27 - so i can also compare them using an
38:29 - equal to operator so
38:30 - this gives out me the output true okay
38:34 - now now we could also
38:38 - like now it's perfectly fine uh now
38:41 - let's move to this this iphone as well
38:44 - now i can do
38:46 - put s great start length
38:53 - so this would give me the same like
38:59 - okay i had to uncomment this sorry yeah
39:03 - so now i'll put great short length h3
39:05 - and i'll do great sort size
39:08 - it would also return me three now
39:11 - i can do put s
39:16 - grades dot 2 underscope a and
39:22 - and it should may return like this as a
39:24 - string oh sorry
39:25 - it converges to an array so this is also
39:28 - fine so this is how you can do it and
39:33 - one thing because i converted this uh
39:36 - this to an
39:36 - array okay so i told you uh you could
39:39 - also
39:40 - if you want to see in other way around
39:41 - you could do this
39:47 - you can store this inside a variable
39:54 - x
39:56 - and you can print x
39:59 - okay so this is how we can do it okay
40:04 - so this is how you convert into an array
40:06 - and
40:07 - one uh one small exercise we can have
40:10 - right now
40:11 - uh you could also
40:14 - do this as well put a
40:18 - s grade dot hash underscore value
40:22 - so this worked as like i told you
40:25 - the one like we had in uh like string
40:27 - that is include
40:28 - so it does it has a value 10 as a key
40:34 - okay so okay let's
40:37 - uh uh okay so this is returning false uh
40:42 - like this is our value sorry so this is
40:44 - how you can do it
40:46 - so 10 is not a value it is a key so for
40:49 - that
40:50 - you can run this true okay
40:53 - so this is how you can do it for key and
40:55 - value so by mistake
40:56 - i had like so like dated for
40:59 - uh has key and it has value so you can
41:02 - understand okay and value
41:04 - so let's move to a very small size since
41:07 - we covered strings and hash map in this
41:09 - string is equal to hello world so let's
41:12 - create a program
41:12 - to crown the frequency so first creates
41:15 - a frequency as a hash map frequency
41:18 - is equal to hash frequency
41:21 - is equal to hash dot
41:25 - new so this would maintain the frequency
41:29 - by initially the frequency should be
41:31 - frequency dot default is equal to zero
41:35 - now we do a s dot eat underscore
41:39 - care we'll make it do and i have the
41:43 - value okay okay i have the value
41:48 - then frequency dot val
41:52 - plus equal to equal to 1 and i can end
41:55 - this loop
41:55 - and simply put as frequency
41:58 - now let me clear this loop and run this
42:01 - so here i have got all the frequency of
42:03 - the particular graph
42:04 - so thank you everyone for watching this
42:06 - so it was a simple exercise
42:08 - make sure you uh do this else it will
42:10 - throw error this
42:11 - will throw error because you need to
42:13 - initialize frequency of default
42:15 - to zero else it will through error of
42:17 - course uh
42:18 - either you can also put a tricar
42:19 - statement if statement it
42:21 - inside this but this is a better way of
42:23 - doing so today we are going to work
42:25 - on like date time in ruby so
42:28 - and i'm going to take you forward with
42:31 - some like
42:32 - little bit good concepts in daytime
42:34 - because you might be working like get to
42:36 - work in back end
42:37 - on the rails part so you might like
42:40 - query on some date time part
42:42 - in your like um database and your like
42:44 - logic
42:45 - so it would help you how you can
42:47 - manipulate because
42:49 - when you keep the like a record of
42:51 - things so you usually manage with date
42:53 - and time
42:54 - so i'll tell you how you can achieve the
42:55 - same using like n ruby so
42:58 - let's start with our tutorial so the
43:00 - basic thing you need to first type
43:02 - you need to type require
43:05 - required is like is it is like uh you
43:08 - will get to like
43:09 - learn new things in this so require is
43:11 - used to like
43:12 - get this is required so it is like an
43:15 - import statement required date
43:17 - so required date would help you to like
43:21 - manipulate the date date records
43:25 - in ruby so now you can create a variable
43:28 - my date
43:29 - okay uh so you can get create variable
43:33 - my date bar
43:34 - so basically this should stay store a
43:36 - date
43:37 - and you need to store date dot ours
43:41 - and now you can put like
43:44 - in a string you can put 10
43:48 - december uh 2021
43:51 - so this is a very futuristic date and
43:54 - now what you're going to
43:55 - do you can like carry out few operations
43:58 - on this
43:58 - such as put as my date back so
44:02 - then put s so okay first we will do this
44:06 - so let's run this and we can type
44:09 - clear oh sorry click clear statement
44:13 - and now this would clear our console now
44:15 - ruby
44:16 - datetime.rb so when you print this so
44:19 - you get an output
44:21 - 20 21 12 so basically so this is how it
44:24 - depends this gives the year format
44:26 - this is the month and this is the day so
44:29 - 2021
44:30 - uh 2021-12-10 so this is a good output
44:35 - and what you can do now you can do
44:37 - different things like
44:39 - it s my date where
44:42 - dot here okay so
44:45 - basically now we can comment this so
44:48 - this would usually print out the
44:50 - year okay and in the same way
44:53 - you can approach for okay so i'll show
44:56 - you one by one so basically this would
44:58 - help you to have a clear approach
45:00 - so i do clear
45:03 - and ruby datetime.rb yes
45:06 - so 2021 is like is this the like output
45:10 - of this
45:10 - so next you can do put as
45:13 - my date where dot month so basically
45:17 - this would either give you the month
45:20 - now uh this is 12 okay
45:24 - and now what you can do you can simply
45:27 - comment this out
45:28 - or you can do put as my date where
45:32 - dot month day so month day is given by m
45:36 - day okay and now you can
45:40 - run this so i'm going little slow
45:43 - because this should help you
45:44 - because this is the 10th day of the
45:45 - month okay now
45:47 - you can do port s my date where dot
45:50 - weekly
45:51 - so this would tell you that which day of
45:53 - the week
45:54 - it is so basically now you can following
45:57 - make the operations
45:58 - like weekdays five if it was six or
46:01 - seven then you can refer that this was
46:02 - the weekend okay
46:04 - so this is how it goes good so now you
46:07 - can do clear
46:09 - and now you can type so which day
46:12 - of the year it is it is put as my date
46:14 - where dot
46:15 - y day so this will basically give you
46:18 - the year day
46:19 - so which day of the year it is okay
46:22 - so let's run this and it is a 344 day
46:26 - of the year okay so good to do good to
46:28 - go now what you can do
46:30 - you can shift this date my date were
46:33 - plus
46:33 - equal to five which is equivalent to
46:36 - like
46:37 - uh basically this is equal to my
46:40 - eight bar is equal to my date wire plus
46:43 - five okay
46:44 - so you can use either of this i'll use
46:46 - this notation the second one
46:48 - to have clarity now what you can do
46:51 - you can do put s my date where
46:56 - my date where dot you can string format
47:00 - time
47:01 - so this is strf time
47:04 - okay so basically your form for
47:07 - formatting
47:08 - and now i'll type you to do
47:11 - percent a person d
47:15 - person b and percent y okay
47:19 - so so this is capital yeah
47:23 - so let's run this
47:27 - so now it basically you can see by the
47:31 - notations
47:31 - it says though day is wednesday
47:35 - the day numeric in the week terms of
47:37 - week
47:38 - is wednesday day in terms of month is 15
47:41 - december 21
47:42 - so this is like a very uh used notation
47:47 - to keep the track of the like date okay
47:50 - so let's comment this and okay one thing
47:52 - i told you that i
47:53 - initialized as 10th december and now it
47:56 - did this plus five
47:58 - which incremented it by five days for
48:01 - this really
48:02 - like you can implement a good logic so
48:03 - like just by putting five you can
48:05 - increase the whole date
48:06 - so and get all the other details so like
48:08 - this was tenth i think uh
48:10 - sorry this was tenth december now i
48:13 - incremented by five here
48:15 - and then when i put it out this at this
48:18 - line
48:19 - so it works like magic okay now
48:22 - now you can comment this okay
48:25 - so now what you can do you can
48:28 - create another variable time okay for
48:31 - that you require required time
48:35 - okay and let's comment this
48:39 - so let's pick some space
48:42 - so that it gives a clear view so
48:46 - you can give my time where
48:50 - is equal to time dot new
48:54 - 2021 year 10th
48:57 - day well this is december
49:01 - six five
49:04 - and and this is the notation basically
49:07 - which tells you plus make sure you put a
49:10 - zero
49:10 - five zero zero though don't put directly
49:13 - like this
49:14 - five 0 so put 0 5
49:17 - 0 0 okay now in the same way
49:21 - what you can do you can do put s
49:25 - my time where
49:28 - okay and you can repeat this put as my
49:32 - time
49:32 - dot dot r this would give you the r
49:36 - now this would give you the minute and
49:37 - this would give you the seconds
49:40 - okay so let's run this
49:44 - yeah so here you can see so the r is
49:47 - sixth
49:48 - minutes is five then the second is ten
49:50 - okay
49:51 - and you can like
49:54 - also do something put
49:58 - s time dot
50:01 - now so this would like
50:05 - bring to that current time okay good to
50:07 - go now
50:08 - we can clear the screen and we can also
50:11 - print
50:11 - this now let's uh move on with some
50:15 - additional topic so basically
50:18 - i'll give you like there's a very like a
50:20 - small quick topic
50:22 - here to really help you so
50:25 - directory
50:28 - uh and exceptions
50:32 - so basically okay i'll give you
50:35 - directory.rb
50:36 - so basically this is a new topic so
50:39 - let's do this
50:40 - basically what you can do you can do put
50:42 - s
50:43 - run the directory commands directory dot
50:45 - print
50:46 - print pwd stand so print working
50:48 - directory now
50:49 - like the this your current working
50:52 - directory so this is print working
50:54 - directory
50:55 - now i'll give ruby directory.rb
50:58 - and this will print the current cooking
51:00 - directory okay so this is the working
51:02 - directory i'm usually in
51:03 - and this can be confirmed now then you
51:06 - can do
51:08 - uh run a command
51:11 - directory dot make directory so
51:15 - basically these are all the like
51:16 - commands you do
51:18 - a folder here
51:22 - and then you can also check put as
51:25 - directory dot exists
51:31 - exists let's say this this exists folder
51:34 - here
51:35 - so when i run this file now
51:38 - you will see yes this directory exists
51:42 - and it does create a directory to my
51:44 - left okay
51:45 - now let's create another file
51:48 - exceptions.rb so this is another topic
51:52 - so now to create a try catch statement
51:55 - ruby
51:56 - basically you you can give a begin
51:58 - statement
51:59 - now in this begin statement you have
52:02 - three things
52:03 - rescue so one is
52:07 - rescue okay other
52:10 - is else other is ensure
52:14 - so begin is put as
52:19 - begin so basically okay and then i'll do
52:23 - put s three by zero basically this is an
52:27 - error to catch this error i'll do
52:30 - put s error
52:35 - error catched
52:38 - okay so this would
52:42 - this is like a like input is
52:45 - the error is not cached if the error is
52:48 - not catch
52:49 - then you can do this yes looks
52:53 - good okay ensure this protest
52:57 - this should always run always run
53:00 - respect of above
53:05 - irrespective of so always run inspector
53:08 - let's run this
53:09 - ruby exception.rb
53:12 - so here you can see begin there is cash
53:15 - because 3 divided by 0 is a division
53:18 - division by 0 error so it's an error
53:21 - and it says here cash always run
53:23 - respective above
53:24 - let's change to 1 this is not an error
53:26 - now because this
53:28 - is valid three divided by one so let's
53:30 - see it see
53:31 - again it does good p is done because yes
53:34 - it does put three out
53:36 - it is not an error looks good or always
53:38 - run irrespective above
53:40 - so this is how you deal with error
53:42 - handling in ruby
53:43 - so i'll continue with like classes and
53:46 - object-oriented programming next
53:48 - tutorial so thank you for watching for
53:49 - this tutorial thank you everyone
53:51 - bye so today we are going to start with
53:54 - some object-oriented programming in ruby
53:56 - so let's create a most basic example
54:00 - let's create a class in ruby class
54:04 - person and we can like annotation use
54:08 - with a capital p
54:10 - and let's close this class by using an
54:13 - end tag now we can create a constructor
54:17 - in this class with def initialize
54:20 - so basically we initialize with id name
54:24 - and age so then we do
54:27 - we do close this constructor uh
54:30 - it's a good habit you keep closing them
54:32 - because then it would be very
54:34 - difficult for you to like know when
54:36 - which method or attribute or constructor
54:38 - is left of being close and it will throw
54:41 - an error
54:42 - so now we can do add grade id
54:45 - so basically we are declaring variables
54:48 - and assigning them values and id add
54:49 - grid like these are like some
54:51 - uh now this works as a property of the
54:55 - class what we call them
54:56 - attributes and another methods and
54:59 - functions so basically now we start
55:01 - setting the properties and attributes
55:03 - at the name is equal to name
55:06 - and at the rate age is equal to age
55:10 - now you can make a intro method
55:14 - define intro and which would
55:17 - particularly give you the intro
55:20 - put s and you can start putting
55:23 - my name is put this in a hash symbol
55:27 - add the date name okay
55:31 - and my age is
55:35 - put this in a like a symbol
55:38 - hash at the rate edge
55:41 - okay so this is like your intro works so
55:44 - it looks perfectly fine
55:46 - now let's create a person
55:49 - so let's create a person and we can try
55:52 - our code
55:53 - e1 is equal to person dot
55:56 - new we give it an as id
55:59 - a weak capacity parameters id 1
56:03 - joe and 25 is the age
56:06 - and p2 is equal to
56:10 - person dot new
56:13 - let's create an id of 2. james
56:18 - and let's give an age of 30. okay
56:21 - yeah now we can do p1 dot intro
56:26 - let's call this pivot intro now let's
56:28 - run this ruby
56:30 - classes.rv so my name is joe and my age
56:33 - is 25 perfectly fine
56:35 - now we can do p2.intro
56:39 - and should run the another one so my
56:42 - name is james and my age 30. so
56:44 - everything looks perfectly fine
56:46 - now a very small concept here is
56:50 - we want to see how many persons were
56:51 - created okay
56:53 - like to keep a track of how many persons
56:56 - were created
56:58 - you can create a class variable so
57:01 - basically these belong to the class okay
57:04 - so these belong to the class
57:06 - and we can initialize persons
57:09 - is equal to zero this doesn't belong to
57:12 - the object is belong to the class
57:13 - so these are like class variables in
57:16 - like that belong to the class
57:18 - now we can make something a method which
57:21 - says
57:23 - def self dot get
57:27 - person count because
57:31 - and we can do get self dot to get person
57:34 - count and
57:35 - so this is like a like a method which is
57:39 - as excels access to the self class and
57:42 - it will basically return address persons
57:46 - okay now what you can do
57:51 - you can do so now we are using the class
57:54 - to put as person
57:57 - dot get person count so you can comment
58:01 - this
58:01 - comment this yeah i'm good to go let's
58:04 - clear this
58:05 - and run so
58:08 - did you mean initialized class whatever
58:11 - in person so
58:12 - see there might be some here yeah so
58:15 - yeah this
58:16 - initialize as zero so this like now it
58:19 - will work
58:20 - let's run this so
58:24 - now initial initially zero persons have
58:26 - been countered because i ran the program
58:28 - again
58:28 - now let's do one thing let's create a
58:31 - one person
58:32 - now let's run this
58:38 - and it still gives okay yeah
58:41 - now because uh i'll tell you why it was
58:43 - from zero because
58:45 - when you initialize a person you need to
58:48 - increment this by one as well
58:50 - i hope you get it so what you can do now
58:52 - it looks
58:53 - perfectly good so i'll give you we
58:56 - initialize the class variable with zero
58:58 - in increment by one whenever the
59:00 - constructor is called
59:01 - now you create a method to get its value
59:03 - okay now
59:05 - when a one person has been created so it
59:08 - should give me
59:09 - one when two person has been created
59:12 - it should return me two okay
59:15 - now let's create another person p3 is
59:18 - equal to person dot new
59:20 - like third three third like third person
59:23 - we are creating
59:24 - so we can give them any name let's give
59:27 - them a
59:31 - jack and let's give an age of 40
59:34 - 40 now let's run this now it you will
59:37 - see
59:38 - now it gives 3 so this is how we do it
59:42 - now let's make a small inheritance part
59:45 - so let's do class human
59:48 - and let's end this and define a person
59:52 - with wall
59:55 - and let's end this and say put test
60:00 - put as human
60:03 - humans evolve okay
60:07 - now let's do inheritance
60:10 - so this is how we do we initialize
60:12 - person and inherit with human class
60:14 - now let's call let's comment this out
60:18 - yeah so let's comment this we don't need
60:21 - like
60:22 - this part so let's comment this and now
60:24 - we
60:25 - let us do put sp1 dot evolve
60:29 - okay so p1 dot
60:34 - evolve so this is evolve
60:38 - yeah now let's run this
60:43 - so humans evolved because okay now let's
60:46 - do though basically now i'm trying to
60:47 - show you run time inheritance
60:49 - what if it had its own method evolve
60:52 - def evolved and like we end this and we
60:56 - do
60:57 - put this
61:02 - like person evolved
61:08 - persons
61:11 - involved or you can say people reward
61:16 - so basically this is like a just a dummy
61:18 - thing to show you
61:19 - and now you see people involved because
61:21 - it had its own evolved
61:23 - method then it called it if it doesn't
61:25 - then call the human
61:26 - but make sure you make inheritance okay
61:28 - so this is how we do it
61:30 - and let's move to some like a very
61:33 - simple one
61:35 - uh so
61:38 - so i'll just make comment i'll comment
61:40 - everything
61:41 - yeah now let's you can another class
61:45 - class box now you can
61:50 - initialize with this and now basically
61:53 - uh you can create initialize height
61:56 - comma w
61:57 - and say at the red height
62:01 - is equal to edge and at the rate
62:05 - width is equal to w
62:10 - and this is end okay now you can
62:14 - now make some getters and setters so
62:16 - basically get
62:18 - height
62:21 - and define get height define get
62:24 - width okay now you can close this
62:28 - now define set height
62:32 - okay so basically now you
62:35 - pass a parameter uh define
62:39 - set width now you pass a parameter
62:43 - parameter uh now you pass a parameter
62:46 - and
62:47 - now here you see so now you can do
62:50 - at the red width is equal to w
62:54 - at the right height is equal to h
62:57 - now return
63:00 - at the date height so basically these
63:02 - are the getters and
63:03 - these are the setup and return at the
63:07 - rate
63:08 - width now you can also make access
63:12 - specifiers to this by using this
63:14 - private okay
63:18 - let's do private get height
63:21 - get width set height
63:24 - set width okay so basically you can make
63:27 - them
63:27 - private and make a public one is like
63:32 - get area so how you would
63:35 - work with get area define get area
63:38 - and basically you would end this and now
63:42 - you can
63:42 - simply return return at the red
63:46 - height star at the rate width
63:49 - okay so basically let's create a b1
63:54 - b1 will go to box dot new
63:59 - zero comma zero and put as
64:02 - b1 dot get area
64:06 - so ruby class dot rb
64:11 - okay expecting end so like there's some
64:14 - some issue let me check
64:16 - with this everyone uh so i
64:20 - it was like a small error like uh you
64:22 - need to
64:23 - define the colon uh like put the colon
64:25 - before the methods
64:26 - so initially what i did i had this put a
64:29 - private
64:30 - colon here here and i did didn't put
64:32 - these so this was like
64:34 - wrong notation so that is why it do
64:37 - an error now it's like good to go
64:40 - uh so what i'll do i'll put it undo this
64:44 - yeah so basically you can make them
64:46 - private so
64:47 - but uh now i'll comment this so now what
64:50 - you see
64:51 - that i created a box with zero values
64:53 - and i set a height and width
64:56 - then i did like get height and get to it
64:58 - and would get area so let's run this
65:01 - so it says yeah the height is 20 width
65:03 - is 10 which we had
65:05 - set at them is in the center and the get
65:07 - area is 200
65:08 - so this is how you can implement things
65:10 - and then
65:11 - like so this is like some getter and
65:13 - setter which you are like encapsulation
65:15 - so so thank you for watching this
65:17 - tutorial you can explore some like
65:19 - creating some your own classes
65:20 - and moving out some inheritance so this
65:23 - would like really help you
65:25 - so thank you for watching tutorial so
65:26 - i'll catch you in the next video thank
65:27 - you
65:28 - bye today we are going to learn about
65:30 - how to install rails on our local
65:33 - machine
65:34 - so this is like a rails to install a
65:37 - rails on your machine it has like a few
65:39 - dependencies
65:40 - so basically we are going to cover each
65:42 - dependency how we can inter
65:44 - install the dependency so that our rails
65:47 - application works perfectly why uh
65:49 - perfectly fine on our machine so what we
65:52 - can do
65:53 - so we can like first what we can do we
65:56 - can
65:57 - like just like open few links
66:00 - and so basically we will start with one
66:02 - link at a time
66:04 - so let's open this link
66:07 - now this is the node.js official website
66:10 - you can move to this website and
66:12 - download this installer
66:14 - and this is the lts version you can
66:16 - download the long term support version
66:18 - so lts version and you can install
66:20 - node.js on your machine
66:21 - so when you have installed node.js on
66:24 - your machine
66:26 - then you can this would help you to
66:29 - install like the npm package okay
66:32 - so when you have installed like node.js
66:36 - so you can run this command on your
66:37 - machine
66:39 - node minus minus version and this will
66:41 - help you get started with that
66:42 - so i'll give you a quick hint uh
66:46 - well like i will open the command prompt
66:49 - and i will type node minus minus version
66:53 - so here you can see the node has been
66:55 - stored on my machine so it looks
66:56 - perfectly fine okay
66:59 - so yeah so then you can like
67:03 - then you have installed node on your
67:04 - machine then what you can do
67:06 - you can move to the another link uh this
67:09 - is like
67:10 - how to install yarn the yarn is another
67:13 - dependency required
67:15 - to install rails on your machine so
67:19 - so when you have installed node.js so
67:21 - you would
67:22 - have access to npm package so you can
67:25 - run this command npm install minus minus
67:27 - global yarn
67:28 - or alternate way alternative weight is
67:30 - to click on this
67:32 - and click on operating system windows
67:34 - classic stable version and you can
67:35 - download the installer
67:37 - so when you have download the installer
67:38 - so you can install
67:40 - yarn as per like as you will get a setup
67:44 - so you will have an msi installer and
67:46 - you will like uh
67:48 - you this will give you a msi file that
67:50 - will run walk you through installing
67:52 - your own window so basically it will
67:53 - give you a setup
67:54 - which will help you installing yarn on
67:55 - your machine
67:57 - so this is one of the methods okay to
68:00 - install
68:00 - the yarn on your machine so so basically
68:04 - now you have covered the two
68:05 - for two parts so basically you have
68:07 - installed node.js
68:08 - and yarn and you can solve with by npm
68:11 - also
68:12 - so you can solve at npm and you can run
68:14 - this command
68:15 - and to check if this is installed after
68:18 - uh
68:19 - then you have to type yarn minus minus
68:21 - version
68:23 - okay so here you can see you have got
68:26 - like
68:27 - two things the one is node and another
68:29 - is yarn
68:30 - so next moving to the third part
68:34 - uh like you can move to sqlite
68:38 - website so this is the third dependency
68:42 - and when you click on this link
68:46 - so you can access to this so this is
68:50 - now you move to this pre-compiled
68:52 - binaries for windows
68:54 - uh now you have to choose either of
68:58 - one um one of them either 32-bit or
69:01 - 64-bit
69:02 - okay choose according to your system
69:04 - 32-bit or 64-bit
69:06 - so uh like this is required so
69:10 - this is required either 32-bit of 64-bit
69:13 - install any one of them so
69:16 - uh like depending on your system then
69:19 - this one is mandatory like uh you have
69:21 - to install
69:22 - so what you'll get you get two files in
69:24 - this
69:26 - and two files in this and three files in
69:28 - this so
69:29 - since this one is like compulsory so
69:32 - this will be three files and either
69:34 - one of them will be three plus two that
69:35 - is five files you have to extract all
69:38 - the file files and copy them and paste
69:40 - them into your c
69:41 - windows system32 okay so
69:44 - then when you copy and paste them inside
69:47 - in the c windows system32 then you your
69:49 - sqlite is perfectly installed
69:51 - and you can type
69:55 - sqlite3 minus minus version
69:59 - okay so this would help install sql lite
70:02 - on your machine
70:03 - so here it's good to go yeah nice
70:07 - now what you need to do the now moving
70:09 - to the fourth part
70:11 - you need to do you need to move to ruby
70:14 - installer website so basically ruby's
70:16 - installer is intended to install ruby on
70:18 - your windows machine
70:20 - okay so basically
70:23 - you have ruby and like you can click on
70:27 - download button and this will give you a
70:28 - list
70:29 - from where you can choose from which
70:31 - ruby version you have to download and
70:32 - install
70:33 - i would recommend you to download this
70:35 - latest version and then you can walk
70:37 - through
70:37 - if you have like followed my previous
70:39 - tutorials so you must have already you
70:41 - followed this step to install ruby on
70:43 - your machine
70:45 - okay so this is the fifth part now uh
70:48 - to access like to access
70:51 - check whether ruby installed you need to
70:53 - type ruby
70:55 - minus minus version
70:58 - you have ruby now ruby by default
71:01 - installs the gem package
71:03 - manager so gem minus minus version
71:06 - so so 3.23 is also installed
71:09 - so now you have to execute two commands
71:12 - one is jam install sqlite three
71:14 - okay okay then gem install sqlite3
71:17 - would like install sqlite on your
71:19 - machine and
71:21 - there's something like this you need to
71:24 - type
71:25 - okay and yeah so this is
71:29 - this is the step is needed uh and
71:32 - another one is this you have to learn
71:35 - around this command gem install rails
71:38 - so after running these two command then
71:41 - you can
71:42 - like you have installed rails on your
71:44 - machine successfully
71:45 - but this one is the most important
71:47 - command gem installers
71:48 - okay so after that you have to type
71:51 - rails
71:52 - minus minus version then you have rails
71:55 - on your machine so the latest version of
71:57 - the rails is 6.1.3 as 6.1.3.1
72:01 - so like then you have installed rails on
72:04 - your machine
72:06 - so i walked you through the part like uh
72:09 - how you can install rails on your
72:11 - machine
72:12 - then simply you can move to like
72:16 - see so see you can move to desktop
72:19 - i can move to desktop and i will do
72:23 - rails new and basically this is your
72:26 - project name
72:27 - okay so you can type any project name
72:30 - i can type is my project
72:34 - and here you can see that now
72:37 - it will start creating a rails project
72:39 - on your machine and
72:40 - a bundle install is like installing all
72:42 - the like dependencies required for your
72:44 - project
72:45 - so basically this would show you how to
72:47 - install like dependencies these on your
72:50 - like for your project and
72:53 - when this process is successful
72:56 - then you are able to run the rails
72:58 - application on your machine
72:59 - okay so like this would like take a
73:02 - little time
73:03 - so you can like so basically then you
73:06 - can i can walk you through like a few
73:08 - commands
73:09 - so basically rails uh i'll give a quick
73:12 - overview
73:13 - rails is an mvc architecture
73:16 - so mvc m stands for model
73:20 - so n stand for models uh v stands for
73:22 - view
73:24 - and c stands for controller
73:28 - okay so models is like basically
73:32 - like working with your database
73:35 - database and then you have view
73:38 - then like views like presentation on
73:41 - front end
73:42 - presentation layer presentation layer
73:48 - and controller is like communicating
73:52 - logic and communication okay
73:56 - so so basic logic and communication
74:00 - and and you can say either linking the
74:03 - above to
74:04 - linking above to
74:08 - okay so like this is like mvc
74:10 - architecture followed in rails
74:12 - so here you can see like uh it's in
74:15 - installing like the rails or it's like
74:18 - like drills on your like
74:19 - a project on your machine then
74:22 - you can type the command uh so basically
74:26 - there are two commands one is rails
74:29 - new project name
74:33 - and you can then type rails server
74:37 - okay so by default it will start with
74:39 - the server on your local machine
74:41 - okay so i hope it's good to go then
74:44 - the real server will be started on your
74:46 - local machine so this is how like the
74:48 - process will go
74:50 - and then you like like this is like
74:54 - this folder so
74:58 - so we can like wait for this process to
75:01 - complete
75:03 - then i think we can like start the real
75:05 - server on our machine
75:11 - so hey everyone welcome back so like uh
75:14 - like i had like
75:15 - now this has been installed the rails
75:17 - project has been initialized in our like
75:20 - directory so basically uh we can
75:23 - like i was this here see use personal
75:25 - desktop i had created the rails project
75:27 - here now i can move inside my project by
75:29 - cd
75:30 - my project and i can simply type rails
75:33 - server
75:34 - and here you can see now the real server
75:36 - will start on
75:38 - my local host and at the same point
75:41 - you can move to its project inside the
75:44 - same project directory and you type code
75:46 - dot dot so this would open vs code so
75:49 - basically this is the gem file
75:50 - like they're like various things here so
75:53 - we will like
75:54 - go over through it and like
75:57 - so the rails uh like server has been
76:00 - started on my machine so
76:01 - now you can type local
76:05 - host colon 3000 and you can see the
76:09 - rails or
76:10 - servo runs perfectly fine on my machine
76:12 - so
76:13 - this is uh like the rails now you can
76:16 - this is how you can access rail server
76:18 - on your machine and at the same time you
76:19 - can see
76:20 - that i made a get request for the same
76:22 - so you can track the server here
76:24 - so from next we will start with some
76:26 - basics of rails so thank you for
76:28 - watching this
76:29 - tutorial thank you everyone
76:33 - so today we are continuing with our uh
76:35 - continue with the tutorial on rupee on
76:37 - rails
76:38 - so basically today we are going to work
76:40 - with routes in ruby
76:41 - so basically routes in ruby means like
76:43 - url
76:45 - so basically when you create an
76:46 - application you create different urls
76:48 - like for different purposes
76:50 - so we will see how to create some urls
76:52 - in rails
76:53 - and we will start like learn
76:56 - uh what we can process uh after creating
76:59 - a route
76:59 - so basically uh so let's start with our
77:01 - application
77:02 - so very first thing you need to create
77:04 - is like the first thing
77:06 - is like i'll give a quick overview okay
77:10 - since ruby is a mvc framework so m
77:13 - stands for models
77:15 - that is your database so basically this
77:18 - differential database
77:20 - views just like your presentation so
77:22 - basically that is your html
77:24 - and uh like html and front end
77:27 - so basically this is like for your
77:29 - presentation
77:30 - okay uh presentation and
77:34 - uh the another one is controller so
77:37 - controllers are basically used to like
77:40 - uh like basically like it is like to not
77:43 - communicate and navigate between the
77:45 - above two
77:45 - so basically controllers take control
77:50 - uh between uh where like between
77:53 - models and views
77:57 - okay so basically they are the one which
77:59 - basically communicate
78:00 - so basically controllers helps you to
78:03 - communicate
78:04 - between the above two so this is how mvc
78:07 - framework is completed
78:08 - so first thing we need to do is uh
78:12 - okay so first thing we need to do is we
78:15 - need to type
78:16 - rails server so basically i'll also give
78:20 - you a quick uh like overview what i like
78:22 - uh
78:23 - like important commands like initially
78:25 - you should know uh which will help you
78:27 - out
78:27 - so one command is rails server so
78:30 - this will start the server okay
78:34 - uh yeah another is rails console
78:38 - console so this will like
78:41 - uh this will like uh this will like this
78:44 - will
78:45 - start the console and you can like do
78:49 - interact with your database models
78:50 - inside this console so this has a short
78:52 - notations of rails s
78:55 - also known as rails s and this is also
78:58 - known as rail c
79:00 - uh another one is rails generate
79:04 - so basically generate is used to like
79:07 - generate
79:07 - like model views and controller so you
79:09 - can generate things with this
79:11 - so basically to generate and it has a
79:15 - short notation or rails
79:16 - g g so basically these are the commands
79:19 - you should know
79:20 - and preferably this should help you out
79:22 - like in this tutorial
79:24 - so first thing you need to remove inside
79:26 - your project directory i have already
79:28 - created a project
79:29 - and like you can and i have already
79:32 - created a project and
79:34 - you i know i'll start the server inside
79:36 - my project i'll type rail server
79:38 - i've already created a project with the
79:39 - name my project so real servers is this
79:42 - so when i do this so the real server
79:44 - should start
79:45 - on my local machine so basically real
79:48 - server is
79:49 - now started and when i like here you can
79:52 - see when i
79:53 - move to this port local host i see the
79:56 - server
79:57 - is running uh so here you can see the
80:00 - server is running on my machine
80:01 - so basically it starts on this board and
80:03 - i have a command line shell to like
80:05 - take care of the things now uh
80:08 - what you can do uh now i have terminated
80:11 - the
80:12 - like a server now i'll type rails
80:16 - generate controller
80:19 - and this should be my controller now
80:21 - after this i should have my controller
80:23 - name
80:24 - so basically i can type any controller
80:26 - so let me type root
80:27 - okay so just for your preference i'm
80:30 - typing root i'm highlighting this
80:32 - as well so like this is for my reference
80:34 - now when i
80:35 - run this command so now you will take it
80:38 - will take
80:38 - like a take a little bit of time uh
80:42 - not much but now here you can see that
80:44 - now it has created some files
80:46 - so the first thing is between like uh i
80:49 - taught you like
80:50 - these are like the commands you are
80:51 - going to like interact with rails most
80:53 - probably most of the time
80:55 - and these this is like it's uh like uh
80:57 - definition however else is defined mvc
81:00 - model
81:00 - so now we are going to like uh have an
81:04 - overview of little bit of files because
81:06 - understanding the structure is very
81:08 - important
81:09 - so you need to understand where database
81:10 - is defined where views is defined where
81:12 - controllers are defined so this would
81:13 - help
81:14 - you out so most probably you can
81:17 - see here itself that inside my
81:20 - app folder uh there is a folder three
81:23 - folders like
81:24 - one is models okay one other is views
81:28 - and another is controllers okay so
81:32 - when i wrote this command rails generate
81:35 - controller root so it itself created
81:38 - a root controller inside here here you
81:41 - can see the rails convert
81:42 - rails had like generated this controller
81:45 - for me
81:46 - so so now you can see the class root
81:48 - controller like
81:49 - it has inherited the property from
81:51 - application controller
81:52 - so so here you can see so it has
81:56 - like uh so here you can see that that
81:58 - there is application controller here
82:00 - okay now uh my root controller inherits
82:03 - from application controller so like
82:05 - so uh like basically my root controller
82:07 - enables and add some properties from
82:09 - application controller so that is the
82:10 - part of inheritance
82:11 - but the main point is here is that it
82:13 - has already generated a root controller
82:16 - now i can now now when i have generated
82:18 - a controller so
82:19 - it has also generated the corresponding
82:21 - views for
82:22 - it also now inside my views folder here
82:25 - you can see
82:26 - uh there is a folder called root which
82:28 - really generated
82:29 - right now it's empty but uh i'll show
82:32 - you how this works okay
82:34 - so now uh let's
82:38 - move to rouse.rb now let's define
82:42 - uh a route get
82:45 - okay and
82:48 - we need to define get
82:53 - uh so first we will define few routes
82:56 - and then we will carry
82:57 - okay hey so hey hey everyone uh welcome
83:01 - back
83:02 - so first let's define a route so
83:05 - now i'll define a route with get
83:08 - get request and it will say contact
83:13 - okay uh then i'll define a route with
83:16 - contact then slash
83:17 - about okay so
83:20 - they're like these are like few basic
83:22 - routes i've defined so
83:23 - now i'll define a two parameter which
83:25 - says where it should go
83:27 - when i hit this route okay where it
83:30 - should go
83:30 - so it should go to root
83:34 - okay okay now i'll show you first when i
83:38 - type slash contact uh
83:43 - slash contact and slash about so where
83:46 - should my function call
83:47 - exist okay so it should i will define a
83:51 - function in the root controller which
83:52 - says
83:53 - diff define about okay it says
83:56 - end and then another is
83:59 - defined contact okay
84:03 - and it says end so basically these two
84:06 - methods should be called inside the
84:07 - controller when i
84:08 - hit that route okay to clarify that we
84:11 - will say
84:12 - to root hash
84:15 - about okay and for this we will say
84:18 - root hash contact
84:22 - so when i hit these two routes you
84:24 - should call
84:25 - the about method inside the root
84:27 - controller and the contact method inside
84:29 - the root controller
84:30 - so when i reach here so it will hit this
84:34 - okay so let's first
84:38 - uh like now what you need to do
84:41 - and like now when you hit a route so
84:44 - basically you have two options either
84:46 - you create
84:46 - for particular request you have two
84:49 - options the first option is to
84:51 - uh for for for one request you have two
84:54 - option
84:55 - first is to return a json response
85:00 - okay so basically that is your api
85:03 - or second is to render
85:06 - a and render html page
85:10 - so that is your second option okay so
85:14 - to make sure if you want to return like
85:16 - html page so you should have
85:17 - the inside your root folder basically
85:20 - inside views you have root so you should
85:22 - have
85:23 - a file with html name as
85:26 - about dot html
85:29 - dot erb and
85:32 - another should be contact
85:36 - dot html dot erv okay
85:40 - so like these are the two files and in
85:42 - this i will define an h1 tag of about
85:46 - okay okay and
85:50 - in this i will define a h1 tag
85:53 - contact okay
85:57 - so here you can see like i have created
85:59 - this
86:00 - now when i hit these two routes uh like
86:03 - now i'll give a quick
86:04 - hit hit this hit these two routes when i
86:07 - hit them successfully
86:09 - you should call the like uh inside the
86:12 - root controller you should call this
86:13 - method
86:14 - about and contact and we will
86:17 - here by default say render about page
86:22 - okay and render
86:26 - contact okay and
86:30 - what we can also do we can say put s
86:33 - about page about in server
86:36 - okay put as about in server and in the
86:39 - same way we can say
86:41 - put as contact
86:44 - in server and like
86:47 - if we are able to like figure out like
86:50 - like this would really help us
86:51 - to see the console also okay
86:55 - so let's run this now
86:58 - let's run this we will type the command
87:00 - rail server
87:02 - so our server should start now
87:06 - okay so here you can see the server has
87:07 - started so
87:09 - now let's hit this page about so
87:12 - we have reached about and let's hit this
87:15 - one as well
87:16 - contact so here we have reached the
87:20 - contact page also
87:22 - and now you can see there is a specific
87:25 - line
87:25 - which says contact in server and it was
87:29 - also like then there is
87:31 - and server so here you can see whenever
87:34 - uh like i hit this route in the route
87:36 - dot rb
87:38 - it calls the about method and the
87:39 - contact matter of my root controller uh
87:41 - make sure that
87:42 - it can have any name i i named it as
87:44 - root you can name it
87:45 - with any other name then when it it like
87:48 - when uh it had hated the like method so
87:52 - it had first run the put a statement
87:54 - then it called the render method to
87:56 - like render the html page so this is
87:58 - like the most basic tutorial
88:00 - to create a route and render an html
88:02 - page in trails
88:03 - now in the next we will try to return a
88:05 - json response so i hope you
88:07 - you to catch up you all in the next
88:08 - tutorial so thank everyone for watching
88:10 - this
88:12 - so today we are going to continue with
88:13 - the rails tutorial
88:15 - so to start with first we will start a
88:17 - rail server
88:19 - okay so let's start a rail server with
88:22 - the command rails
88:23 - server so the short form of this command
88:25 - is tails
88:26 - s also so now when i
88:29 - like i have but i can previous tutorial
88:31 - i have showed you some
88:32 - like these things how to create a server
88:35 - console and the generate command
88:37 - so we had generated a control controller
88:39 - for the same
88:40 - so let's move to our server so let's
88:43 - refresh this page
88:44 - so here you can see like this is the
88:47 - page we get
88:48 - okay so let's define one another route
88:51 - and
88:51 - let's say get slash
88:55 - index and it moves to a
88:58 - root slash index hash index
89:01 - so let's define a index method here
89:05 - so let's define
89:09 - index and this should be on the top
89:11 - basically
89:12 - like above all so let's
89:16 - yeah perfectly fine so let's
89:19 - uh render index
89:22 - okay now uh i hope you must have watched
89:25 - my previous tutorial to like
89:27 - get so basically we are creating an
89:29 - index route which
89:30 - hits to root slash index and
89:33 - root hash index and when we move to root
89:36 - hash index it calls the index method
89:38 - and it renders the index erb so let's
89:41 - create an index crb which is by default
89:43 - should be created in the root folder
89:45 - and it should be the name index.html.erb
89:52 - and it says h1 with index page
89:57 - okay so yeah so let's
90:01 - move to this route slash index
90:05 - so okay it is showing an
90:08 - error okay it's a quite a small error uh
90:11 - i'll help you resolve it so basically in
90:14 - our route dot rb
90:17 - we i forgot to put it like a colon here
90:20 - so yeah now it should work fine so now
90:23 - we have
90:23 - like achieved the index page okay uh
90:26 - let's move to the another page
90:29 - contact and let's move to the another
90:32 - page
90:33 - about okay
90:36 - so it works perfectly fine so what you
90:40 - need to do
90:40 - like here you have the leg written
90:43 - render index
90:44 - so instead of index
90:47 - if you want to like you the one thing
90:49 - you could also do is like we can comment
90:51 - these things
90:53 - and we can comment these things and
90:56 - this is not required like uh like
90:58 - console statements are not wet uh
91:00 - uh you can see that whenever i hit that
91:02 - method the console
91:04 - is uh these statements are run in the
91:06 - console
91:07 - so uh when i remove this line okay let
91:10 - me remove this line
91:11 - render contact render about and render
91:14 - index so
91:16 - real by default has the ability to map
91:19 - that erb if the method name is same okay
91:24 - and here you can see contact and
91:27 - here you can see index okay
91:31 - so if inside the index you want to by
91:33 - default render index so you can leave
91:35 - blank
91:36 - and if you want to render about you
91:39 - could also do that
91:40 - okay so when i hit the index page
91:44 - i move to the about page okay index
91:46 - route moves to the about page
91:48 - so like this sounds little confusing but
91:50 - we should follow the convention
91:52 - because it increases the readability of
91:54 - the code and we know what is going
91:56 - uh out when so basically you should put
91:59 - these statements and it's like easier to
92:01 - debug than
92:03 - uh contact so uh
92:06 - so now we can like remove the statements
92:10 - so yeah so now what we can do
92:14 - a short activity like we are going to
92:17 - perform right now
92:19 - so we know that when we hit the root
92:22 - most route of this page like this
92:24 - is so we get the ruby on rails page so
92:27 - for that what we can type we can define
92:29 - the root
92:30 - and it should be root ash index
92:35 - so uh one thing i wanted to make clear
92:38 - don't
92:39 - confuse this root keyword with my root
92:42 - controller because
92:43 - i could have named any root controller
92:46 - but this is a like a reserved keyword in
92:48 - rails for like
92:49 - giving the root route so let's refresh
92:51 - this page and now and you can see
92:53 - now this route is the this route is the
92:55 - index route
92:56 - so you could also do this to
92:59 - about so now about one becomes the root
93:04 - perfectly fine you could also do this to
93:07 - contact
93:09 - contact and contact one will become the
93:12 - like default one so this is how it's
93:15 - performed
93:16 - so this is how we have achieved this uh
93:18 - like the root route
93:20 - so this is like easy to do and uh
93:23 - yeah so let's keep it this to index
93:26 - if we are keeping this to index then
93:28 - this is not required okay
93:30 - so we can either comment this out or
93:32 - like i'll comment this out because this
93:33 - is not required
93:35 - and i'll move this to top now
93:38 - like yeah so this is perfectly fine so
93:41 - uh now one format uh one one short
93:45 - active we are going to suppose to do we
93:46 - are going to create a one
93:47 - like api method uh
93:51 - let's create api and
93:55 - let's end this let's create
93:59 - a variable response response
94:04 - and let's uh give them a key so
94:07 - basically in rails we give a key by
94:09 - giving a
94:10 - colon so status and is equal to
94:14 - 200 and basically it is like a hash map
94:18 - and message is equal to
94:21 - hello world now uh
94:25 - basically there are a lot of render
94:26 - methods we can do render
94:28 - json and this is we
94:31 - sent the response so basically i'm
94:33 - showing you this because
94:34 - like this is like most a used one so it
94:37 - will help you and now i'll type
94:38 - get flash response
94:43 - and we hit like the root
94:47 - hash api so
94:50 - when i hit move to response route i i
94:53 - call the api method
94:54 - of the root and then we can see the
94:56 - response so let's move to response
94:59 - so here you can see a status of 200 and
95:01 - a message of hello world is there
95:03 - so this is how we have cros uh created
95:06 - created a mock json response
95:08 - so that's good so there are multiple
95:11 - uh you could like figure out these i
95:13 - close this
95:14 - close this all as well and this and yeah
95:18 - so there are like multiple methods like
95:20 - one is json
95:22 - another is status okay i'm telling you
95:26 - you can like refer there are many then
95:29 - one is html
95:31 - uh one is body one is
95:35 - hd like like html there is a xml
95:39 - then there is a json there then as jsjs
95:42 - as well
95:43 - so uh there are many methods like plain
95:47 - uh text so there are many
95:50 - so you can like uh serialize your data
95:52 - like in many ways
95:54 - as like you want so this is this one
95:57 - will be like
95:58 - json so this one is perfect so
96:01 - now let's uh do uh one one thing i'll
96:04 - show you
96:05 - let's create a file
96:09 - header dot html dot erb
96:14 - and let's create another file
96:17 - new file footer dot
96:21 - html dot erb so
96:24 - one thing like you must have like a
96:27 - scene here like i am putting a
96:29 - underscore tag in between
96:30 - like in front when naming this file so
96:33 - basically this
96:34 - underscore tag defines a partial so
96:37 - i i'll give this in notes like this is a
96:40 - underscore
96:41 - tag means a partial
96:45 - so partial is something where you can it
96:47 - renders the same thing again and again
96:49 - so i'll show you
96:52 - when i move to like this page
96:57 - header.html.erb so i'll create
97:00 - header okay and i'll close this
97:04 - and i'll put a hr tag so
97:07 - i'll put a hr tag in the top and the
97:09 - bottom as well
97:10 - in the same way i'll copy the same code
97:12 - in the footer
97:15 - and i'll this name is add to footer
97:19 - okay when i move to my index page so
97:21 - when i move to my index page so i'll
97:23 - define
97:24 - so this is like uh like
97:27 - rails has a template engine so this is
97:29 - the syntax
97:30 - render header
97:34 - and this is how we define like this is
97:36 - like these braces are very important
97:38 - because this
97:38 - uh signifies the tempered engine rails
97:42 - okay so let's
97:45 - let's close the server and i'll start
97:48 - the server again
97:52 - so let's the server should start
97:55 - so yeah the server has started so let's
97:58 - refresh the page
97:59 - at the index so here you can see i have
98:03 - a header
98:04 - okay and in the same way
98:08 - in the same way i can render a footer
98:14 - okay
98:18 - so like yeah so
98:22 - this is how we achieve and now we can
98:24 - use this partial everywhere
98:26 - like if in this page we want a footer
98:28 - only okay
98:30 - or we want a footer at the footer only
98:33 - so we can
98:34 - do only footer and let's refresh and
98:37 - move to contact
98:40 - so here i only have the footer so this
98:42 - is how you can maintain the partials
98:44 - and partials can be rendered only
98:46 - wherever they are required
98:48 - so thank you everyone for watching this
98:50 - tutorial so i'll catch you in the next
98:52 - tutorial with some more content on rails
98:54 - thank you everyone
98:56 - today we are going to continue with our
98:58 - ruby on rails tutorial
98:59 - so basically i'll give give you a quick
99:01 - overview what we have achieved
99:02 - in like few last tutorials and today we
99:05 - are going to carry on
99:07 - with those things so basically we had
99:09 - created three routes
99:10 - one is a contact round about route and
99:12 - json response route
99:14 - and there was a root route that when we
99:16 - open our application so it should
99:18 - head to this method of the controller so
99:20 - basically
99:21 - uh we had created this router as well
99:24 - get slash index then we had to replace
99:26 - this with the root route
99:27 - so we had created a controller root so
99:30 - we had few methods of the root
99:31 - controller one is a contact
99:33 - about api index then let's move to the
99:36 - root controller
99:37 - then inside we have defined those
99:40 - methods
99:40 - the index about contact api and then we
99:44 - rendered
99:44 - a erb files for that particular method
99:47 - so we have rendered the index erb about
99:49 - erb contact erb
99:51 - and we for one method we render a json
99:53 - response
99:54 - so today uh then this is the root
99:57 - controller here it is located in the
99:59 - controllers file
100:01 - then uh we have like views uh we can
100:04 - close this
100:05 - views yeah then there is a views for for
100:07 - root
100:08 - layout and for index about contact index
100:11 - header and footer
100:12 - basically these two are partials because
100:15 - they are defined by underscore sign
100:17 - so we have invented the partials here so
100:19 - let's start our server first
100:21 - and let's see how our app is running
100:24 - till now
100:25 - and we can proceed with the things yeah
100:28 - so
100:28 - here you can see the server has started
100:31 - and basically
100:32 - now we can move to the server and let's
100:34 - refresh this page
100:36 - so you see few things we are in the
100:38 - index page and it has a header and
100:40 - footer
100:40 - let's move to contact
100:46 - and here you have that and a footer now
100:48 - let's move to about
100:50 - the about route so here it doesn't about
100:54 - so it neither has a header or footer so
100:56 - for that we need to integrate a a
100:59 - partial
101:00 - so here you can see we have embedded
101:02 - like a
101:03 - footer so let's add a footer and here we
101:07 - can add a header
101:10 - so we can have a header
101:15 - and now let's copy this list here as
101:18 - well
101:18 - and so here we have a header here now
101:21 - i'll above this and i'll remove this
101:25 - content
101:26 - so it seems perfectly fine so here we
101:28 - see we have a header and a footer
101:31 - now one thing to note here is that we
101:33 - don't
101:34 - uh like this is not uh like a business
101:36 - very basic html and if you want to
101:38 - integrate some styling
101:39 - we can achieve that so but before that
101:42 - i'll
101:43 - cover a few basics one is like now i'll
101:46 - close you files because they might
101:48 - create some create some confusion
101:50 - yes so let's create a route
101:54 - uh okay now we move to contact page
101:59 - okay and let's move to contact page
102:04 - so here we are on contact page okay so
102:07 - now we will move to root slash contact
102:12 - so we move to root contact and we are
102:14 - here
102:15 - okay so we render a contact page
102:18 - but what if we do this instead of
102:21 - commenting this
102:22 - i would do redirect
102:26 - underscore slash about
102:30 - if i do this let me restart my server
102:36 - i clear there is server
102:39 - yeah so what if i type this command
102:42 - redirect to about
102:44 - so let me refresh ah let me move to
102:46 - contact route and you can see
102:49 - that i was redirected uh i'll show you
102:52 - again
102:52 - this is the index okay uh now this is a
102:56 - contact one now when i click on contact
102:58 - you see i am redirected
103:00 - so you can use this uh to make a
103:03 - redirection
103:05 - but uh make sure like you
103:08 - you you use it for a good purpose
103:10 - because then it might create a
103:11 - conclusion
103:12 - so this is about the redirect route so
103:14 - basically you can redirect from one
103:15 - route to another using this
103:18 - uh next is i'll pass you parameters
103:22 - uh get
103:26 - uh get like user
103:30 - slash id okay and
103:35 - and i'll put name
103:38 - and it will be two slash
103:42 - to root slash
103:45 - hash user root hash user
103:49 - and let's create this method
103:53 - so basically find a user
103:57 - and let's make an end of this and let's
104:02 - simply render json
104:06 - with params okay so basically parents is
104:09 - what we return like i'll show you
104:12 - so let's again restart my server
104:18 - yeah yes
104:21 - so let's move to this route
104:25 - first let me check the server is running
104:26 - yes so your server is running let
104:29 - move to this user slash let's give it an
104:32 - id and
104:35 - name is joe okay now let's hit this
104:38 - and you see we get a json response of
104:40 - parents so controller is root action is
104:42 - user
104:43 - so now it defines very clearly
104:45 - controller is root action is user id is
104:48 - 10
104:48 - a name is you what we can do here we can
104:52 - return
104:53 - parents of id first will return only
104:56 - this let's
104:56 - make a refresh we get 10 here only now
104:59 - let's make patterns of name
105:04 - we get joe so or we could simply do
105:08 - render pattern so this is how we access
105:10 - parents basically i will show you that
105:12 - pattern so id
105:13 - you can access id and parents of name
105:15 - you can access the name
105:16 - so basically now it seems perfect now
105:20 - you can refresh and here you can see
105:22 - that we have a controller root action
105:24 - with the response of parents a small
105:27 - activity we are going to do now
105:28 - to like you can
105:31 - embed bootstrap in your rails app very
105:33 - simply you can click here get started
105:36 - so basically when you click on get
105:38 - started either you can move to this page
105:42 - then you have a css js and like bundle
105:46 - so to copy this we want the bootstrap to
105:49 - be available on every page of our app
105:52 - so what we can do there is a main layout
105:54 - we can
105:55 - close this close this in views there is
105:58 - a main page application.html.erb
106:01 - inside here we can copy this link css
106:03 - link
106:04 - copy and we can put this
106:07 - just above the header okay
106:10 - so we see this has been embedded and
106:14 - then we can embed the js as well
106:17 - so let's embed the js
106:21 - yes so this is a like this is a bundle
106:24 - like you can the bundle means like
106:26 - both of them are like if you want
106:28 - separate you can do this like if you
106:29 - want it
106:30 - in a bundled way so you can use this so
106:33 - for the bundle one just put this below
106:35 - your closing body tag so the css has to
106:37 - be put
106:38 - like below your attack which is closed
106:41 - and the bundle
106:42 - has to be put like js bundle has to be
106:44 - put just before the closing body
106:46 - and now let's refresh the page and
106:50 - let's move to the just see the
106:52 - difference in the like
106:54 - uh for fonts so you might be seeing
106:56 - something different so
106:58 - it looks pretty nice so you can like
107:01 - make close call that bootstrap has been
107:03 - solved uh
107:05 - then you can press ctrl u
107:09 - so it will bring to the source code and
107:10 - in the source code you can see the
107:12 - bootstrap has been installed
107:13 - so basically this is a template now what
107:16 - we can do
107:17 - we can move to here and we can move to
107:19 - some components
107:20 - and let's move to the component navbar
107:23 - the simplest one is this okay
107:27 - so if we move to our header partial
107:30 - and let's remove this and let's copy the
107:33 - bootstrap
107:35 - and let's refresh now
107:38 - see how it's easy to integrate with our
107:40 - app so like we had already made a
107:42 - partial
107:43 - we changed that partial and all the
107:46 - changes
107:48 - which have been wherever this partial
107:50 - has been included
107:51 - all the changes are there so everywhere
107:53 - there like it's been included
107:55 - so for this you can like do this uh
107:59 - uh for footer we can just for an example
108:01 - i'm using this page
108:03 - the pagination and let's move to
108:07 - here and let's remove this and let's add
108:09 - this
108:10 - and let's refresh the page so here you
108:12 - can see how simple it's easy to add
108:14 - okay so just like this was like just
108:18 - like just to show you how things work
108:21 - now this was like a pretty pretty good
108:24 - exercise and decent one
108:26 - you can like if you want to like edit
108:29 - some
108:30 - css here you can click on inspect
108:31 - element this will open the chrome
108:33 - developer tools
108:34 - and basically uh
108:37 - here you can if you want to like align
108:39 - this to center so basically this
108:41 - is this is this and you can invent
108:44 - margin
108:45 - zero photo you can try a few
108:49 - things here and this would probably help
108:51 - you out okay
108:52 - so so this is this was it like this is
108:56 - how you can
108:57 - like take care of things and you can try
108:59 - some different css here like margin zero
109:01 - auto like
109:02 - anything you want to uh just keep on
109:04 - trying things here so basically this
109:06 - will really help you
109:07 - okay so thank you everyone for watching
109:09 - this tutorial so
109:11 - i'll catch you in the next video thank
109:12 - you everyone
109:15 - so basically we had uh first i'll start
109:17 - my server
109:19 - this server
109:22 - and then let's wait for the server to
109:24 - get started so your server is running
109:26 - let's
109:26 - fix this page so basically we had a
109:28 - footer here
109:32 - in last tutorial i took a small task to
109:34 - how to align this incentive so basically
109:36 - so since you can see that
109:40 - this is a flex box so align text box to
109:44 - center
109:44 - is justify content you have basically a
109:46 - few types of justified content
109:48 - that is center next end the end would
109:51 - move to move this
109:52 - end start will keep it as starting then
109:55 - basically there are a few things
109:56 - space around space between so space
109:58 - evenly
109:59 - so you can opt for any so basically the
110:02 - best one
110:03 - you can choose for is center
110:06 - okay and so basically you have to center
110:10 - and then you can see
110:11 - that this is in center so let's click on
110:14 - inspect
110:14 - and let's check yeah it's even it's here
110:18 - it's
110:18 - center so this is a flex class so
110:21 - let's we will give this a style
110:25 - is equal to justify content center
110:28 - so let's refresh this now we have
110:31 - perfectly
110:31 - moved to this so this was a good good
110:34 - thing
110:34 - to know about and now let's move to
110:37 - let's create
110:38 - a model so basically
110:42 - uh this is our like project directory so
110:46 - i have opened this in terminal
110:47 - so that it gives you clear view so i
110:49 - could do the same thing in the vs code
110:51 - terminal but
110:52 - that's why i opened a terminal here to
110:54 - like to have a good overview
110:56 - so now we are going to perform something
110:59 - let's create rails
111:00 - generate generate
111:03 - model article okay or let let's keep it
111:07 - as post
111:08 - there is generate a model also post is
111:11 - something
111:12 - you uh like uh like
111:15 - you define something a post which has a
111:17 - like a title
111:20 - so that is a string and it has a text
111:24 - so that is a you can say
111:29 - like this is title string and you have a
111:31 - description
111:32 - description so basically that is of text
111:35 - data type
111:36 - so let's run this and now you can see
111:40 - that it has created a
111:44 - model and now we can do rails db
111:49 - so basically model is like creating a
111:51 - table in your database now we want to
111:54 - permanently move to this table so we
111:57 - want this to like migrate this into
111:59 - database
112:00 - so we had created a model which defines
112:02 - that we are going to create something
112:04 - with the title string and description
112:05 - text
112:06 - now let's create rails db migrate
112:11 - and then you can see that
112:14 - this should be created
112:17 - permanently in the database so here it
112:20 - says this has been created
112:21 - created table post and the descriptions
112:24 - we have already
112:25 - mentioned what we are going to create so
112:28 - okay before you perform a few operations
112:30 - with the like
112:31 - uh this table or model which i say
112:34 - so basically so you can interact with
112:37 - this
112:37 - inside rails console okay so please type
112:41 - rails console
112:44 - and then you have interactive rails
112:47 - shell to work with
112:48 - then you can interact with this uh this
112:51 - inside the rails console
112:53 - so let's type post but it will it shall
112:56 - throw an error
112:57 - because it says po call post.connection
113:00 - to establish a connection okay
113:02 - so that's why i did this post dot
113:04 - connection
113:06 - so this so we have made a connection so
113:09 - it like it throws out a good amount of
113:11 - things so we shall ignore this
113:14 - okay and okay i have missed all of my
113:17 - cursor yes
113:18 - so we can type uh clear this you can
113:20 - type
113:21 - uh you can type control l
113:24 - control l control plus l so this would
113:27 - clear out okay
113:28 - so okay control plus l and now this will
113:31 - clear out
113:32 - and now you have now let's
113:35 - take a post make post a is equal to post
113:38 - okay so basically it defines uh
113:42 - a so id is an integer title is string
113:45 - description of the text created
113:46 - as a date time updated at a date time
113:49 - okay so let's skip a dot
113:51 - title is equal to hello
113:55 - okay okay undefined
114:02 - okay okay okay so uh i'll tell you
114:05 - what's the issue with this
114:06 - uh c so basically uh
114:10 - we need to call the constructor so you
114:11 - can for a second ignore this
114:13 - so we will call a is equal to post dot
114:16 - new
114:17 - okay now you see we get a post id is nil
114:20 - title is named description is created
114:22 - additional update results but
114:24 - at that time what i was doing i was
114:25 - doing a is equal to post
114:27 - which eventually meant a is equal to
114:30 - post which is
114:31 - a is equal to post so which is by
114:32 - default meant this that post and
114:34 - which was returning this okay so this is
114:37 - the class
114:38 - first is a class now a which i have
114:41 - created is going to post.new is
114:42 - is the object of that class or you can
114:45 - say the instance of that class
114:47 - now post is a class and a o a is equal
114:50 - to post dot new
114:51 - is the object of that class because we
114:53 - have called the new as a constructor
114:56 - so let's define a and let's do a dot
114:58 - title
114:59 - is equal to hello and a dot
115:02 - description is equal to word
115:08 - okay now we type a so we have title is
115:11 - equal to
115:11 - hello and descriptions good word now to
115:14 - save this inside our database we should
115:16 - call a dot save
115:18 - so it says which means it has been saved
115:21 - in our database and let's call a again
115:23 - so it says id
115:24 - one title is hello world description is
115:26 - world and this is a created ad and
115:28 - updated
115:29 - things which is throwing and one thing
115:31 - you can see it also gives out the sql
115:33 - query insert into post
115:36 - and title description created update
115:38 - value should be this is this and this
115:40 - so this is how it creates that into
115:42 - database let's create another one
115:45 - let's first call post as a class so it's
115:48 - not necessary to call it everything but
115:50 - i'm showing you again
115:51 - now let's call b
115:55 - is equal to post dot new let's call b
115:59 - so this is the post this has been
116:02 - let's try b dot title
116:06 - is equal to programming
116:10 - uh either we can say ruby okay and
116:14 - b dot description
116:18 - this is equal to rails simple let's call
116:21 - b
116:21 - again and it says this and let's call b
116:23 - dot save then it shall clear
116:25 - save the sensor database okay now we
116:28 - have to post
116:30 - one is this and another this so to
116:33 - access all the posts you could call
116:35 - post.all simply okay so
116:38 - it gives all the posts you have so this
116:40 - so and one with the id one
116:42 - and another is with the id two here you
116:43 - can see this is the id two and this is
116:45 - id one
116:46 - so both the post we get uh then
116:49 - we can call post dot
116:54 - find find is like i'll show you show you
116:57 - post dot find one let's find the post
116:59 - with the id one
117:00 - it so it finds us for us for that now we
117:04 - can see in the similar way called post
117:05 - dot find
117:06 - two this you could also call
117:10 - host dot where
117:13 - id
117:16 - uh you like ubiquito id
117:20 - okay there's some issue with my command
117:21 - line okay
117:23 - post dot where
117:28 - id is equal to one so
117:32 - where and what's the difference between
117:34 - the find and post
117:36 - uh find and where so this is and this is
117:39 - another way of doing the same thing
117:40 - but find has a limit one okay so
117:44 - so we have learned about like how to
117:46 - create now let's move to how to like
117:48 - let's do something uh something new uh
117:51 - let's make post dot find
117:54 - post dot find
117:57 - so let's make first now let's change
117:59 - this title to
118:01 - title is equal to ruby
118:04 - uh ruby new
118:08 - okay so we have b and that's b dot
118:11 - description
118:15 - is equal to rails
118:18 - new and let's see so we do b dot save so
118:22 - this
118:22 - is our update operation okay so say
118:25 - update post
118:26 - see update both set title is the
118:28 - description this and these are the value
118:30 - uh we could also do post
118:34 - dot find to and destroy
118:38 - so basically this forms a delete
118:39 - operation so we have learned how to like
118:42 - perform all the four thread operations
118:43 - that discrete date update and delete
118:45 - on the rails console so now we are going
118:48 - to implement this same thing with the ui
118:50 - so thank you everyone for watching this
118:52 - i will catch you in the next tutorial
118:54 - thank you
118:55 - now what in previous tutorial we have
118:57 - learned about models and rails
118:59 - so we are going to continue with like
119:02 - further development how to
119:03 - develop our application in rails so we
119:06 - had created a
119:07 - model in rails and basically you can
119:10 - type here
119:11 - so i have started already started my
119:12 - server i'll show you how to
119:14 - like you can type trails server to start
119:18 - your server
119:19 - and instead of server you can type rails
119:21 - console so it will open interactive
119:23 - shell on your rails machine
119:25 - okay so and here you can start your
119:28 - server rails
119:30 - server so i have opened the console here
119:32 - so that it gives you a better view
119:34 - and we had made post.connection so
119:38 - we had made a model post.connection and
119:41 - you can now press ctrl l and then you
119:44 - can print post
119:45 - so it gives you the data structure what
119:47 - we are following in the post
119:49 - so it has an id integer title string
119:51 - description text created at date time
119:53 - and updated data
119:54 - so we so this is how we i showed you
119:57 - flow operation in the last video of
119:58 - hostile what we can perform
120:00 - now let's this is our server and
120:03 - let's uh now let's move with some
120:06 - like something new to this edition
120:10 - uh now what you can do you can move to
120:11 - bootstrap website
120:13 - and i can click here open into tab and
120:16 - this would guide me to the bootstrap
120:17 - website
120:18 - i can refer to this page and here what i
120:21 - can do
120:22 - uh what i can do i can move to forms
120:26 - and and i can refer to forms and what i
120:30 - can do here is
120:31 - uh click on overview
120:34 - then click on like this and overview
120:38 - and this would give you like diff you
120:40 - will have different things or forms here
120:42 - uh then you can
120:42 - click on like form control
120:46 - so you can move to this page and you can
120:48 - copy this
120:50 - let's copy this uh let's copy this and
120:54 - let's paste this inside we have
120:57 - a few files let's paste this on
120:59 - index.html
121:00 - and let's print let's paste this this
121:03 - here
121:04 - and then your application just refresh
121:06 - this
121:07 - so basically now we have a form here
121:09 - okay
121:10 - so this forms looks pretty big so what
121:14 - we can do we can
121:15 - try to small it down and for this we can
121:19 - add this
121:19 - give this class as call
121:23 - call md6 to take the width of six
121:26 - and and let's give it a class of column
121:30 - d6 so
121:31 - okay so nothing to this so let me
121:34 - inspect this element
121:36 - and yeah so here yeah
121:39 - so i have this diff class rule called
121:41 - md6
121:43 - and this should work i think
121:47 - okay so let's let's make another div
121:50 - let's make another dip div and
121:54 - let's wrap this inside this day
121:59 - yeah and let's this give this dip a
122:02 - class of
122:03 - call nd 6
122:06 - because bushra has a total width of 12
122:09 - columns we are asking it to take a width
122:11 - of 6 columns
122:12 - let's okay it doesn't look either now
122:17 - and let's give it a call six
122:21 - okay i forgot to like close the tag yeah
122:25 - yeah yeah so now it works perfectly fine
122:29 - uh and then you can give style
122:33 - of margin
122:36 - uh zero auto so this would place this
122:39 - inside the center
122:41 - okay so this should work perfectly fine
122:45 - yeah and you can like this is perfectly
122:48 - fine
122:49 - and inside our header uh let's
122:52 - create instead of header let's give this
122:54 - a
122:56 - go to app and let's give this a two to f
123:00 - and we can like now everything looks
123:03 - perfectly fine
123:04 - and we could do like so yeah
123:07 - so this is good okay so yeah so now we
123:12 - try to create a to-do app here from now
123:14 - and
123:15 - this is example email address now let's
123:17 - modify the
123:18 - few things so that we can uh operate on
123:20 - them so
123:22 - instead of this let's give this
123:26 - a title
123:29 - and here if we give this a title name is
123:31 - equal to title
123:35 - so here we give it a name as a title and
123:37 - here we give this
123:38 - a name
123:41 - okay the name should the input type is
123:43 - equal to text
123:45 - and let's give it to input types
123:48 - okay try to close this yeah yeah so
123:53 - so this is this is the input type is
123:55 - equal to text and let's give this
123:59 - name is equal to title and here we have
124:02 - a text area let's give this as a name
124:05 - to text area okay
124:09 - so this is looks good so this is how we
124:12 - created
124:13 - so this is title and and this is
124:16 - basically for us this means description
124:18 - so we will give this a description
124:21 - and and this is here we also type it as
124:25 - description
124:27 - okay so this cryption
124:31 - is good yeah so let's
124:34 - and we remove this and we need to wrap
124:37 - this everything inside a form
124:40 - okay and let's close this here
124:46 - so let's yeah so we need to wrap this
124:49 - inside a form
124:51 - yeah so this looks pretty good yeah so
124:52 - fine so
124:54 - so this is like a kind of a footer for
124:56 - us this is like a kind of header
124:58 - and so we need to like this is how we
125:00 - define it
125:01 - so this looks good so we have made some
125:04 - boilerplate a front end for our app
125:07 - and instead of email you should change
125:10 - this to text
125:12 - okay and now we create a method for this
125:18 - method is equal to post
125:23 - and yeah so let's refresh this so good
125:27 - so we have made this method equal to
125:29 - post and let's create a action
125:31 - is equal to add
125:34 - okay let's create this to add so
125:37 - action is to slash add and
125:40 - uh so this should work fine and
125:44 - so let's create a so
125:47 - since like we have created this
125:49 - circulated this response so left
125:51 - let's create this uh action which takes
125:54 - a post request
125:55 - and give it a slash add and
125:58 - let's create something as this 2
126:02 - is equal to root add
126:06 - okay and let's create a okay one thing
126:09 - you need to make sure
126:10 - that you need to add a token tag here
126:14 - because
126:14 - a post request the question is the cscs
126:18 - csf rf token and you need to define
126:21 - token underscore tag here
126:23 - and you can now close this tag and this
126:26 - is looks perfectly fine so let's
126:27 - finish this page so yeah good now
126:31 - we need to define a post request inside
126:33 - of controller so
126:34 - that is define add
126:37 - and that is end and render json params
126:42 - is the same thing we are going to do
126:43 - here
126:44 - and inside a form we need to define uh
126:47 - like a button
126:49 - so let's define a button so
126:53 - let's click this same class if class is
126:55 - equal to
126:57 - mb3 and let's
127:02 - get a button
127:07 - input let's create a button yeah
127:16 - so let's create a button input type
127:21 - is equal to text class
127:25 - is equal to btn btn primary
127:32 - and let's yeah so it's a good good
127:36 - and we can
127:40 - remove this placeholder because this is
127:41 - not needed
127:44 - we can move this placeholder
127:49 - okay we can move this placeholder id is
127:51 - also not needed
127:53 - okay okay id is needed and because id is
127:56 - equal to needed because
128:01 - let's get give this to a
128:04 - title id and
128:07 - let's give to this is this a description
128:10 - id
128:12 - description id
128:16 - and we need to like wrap this
128:18 - description id
128:19 - here because this is
128:22 - works one id and this is text id
128:28 - so like a good amount of changes has
128:30 - been done let's refresh this
128:32 - and yes so this is between butane
128:35 - primary and
128:36 - a value should be
128:40 - add okay and let's give a style
128:45 - is equal to display
128:50 - block okay and it should be done
128:54 - yeah so yeah so this is a button iron
128:58 - and let's give
128:59 - a display block and margin
129:06 - because margin zero auto will align this
129:09 - button to center
129:12 - okay so let's give this a
129:15 - refresh yeah so this looks perfectly
129:17 - fine
129:18 - so like in this tutorial we created all
129:20 - the like
129:21 - part needed to like perform this
129:24 - operation
129:26 - and so so thank you everyone for
129:29 - watching this
129:30 - tutorial i'll catch in the next tutorial
129:32 - so like you can go over this video like
129:35 - because it was needed to necessary to
129:37 - set up this bootstrap form
129:38 - so in the next tutorial we will like see
129:41 - how we can
129:42 - form other operations thank you everyone
129:45 - so in the previous tutorial i showed you
129:47 - like first i will start my rail server
129:49 - so i type rails server this would start
129:52 - the real server on my machine
129:54 - so we had created this front-end layout
129:56 - using our
129:57 - in the rails app so so like
130:01 - one few mistakes like a few things uh
130:04 - i would like to make clear uh that
130:08 - that is inside your index.html.erb this
130:11 - for input type is
130:13 - text actually this should be introduced
130:15 - equal to input type is equal to submit
130:17 - because this is a button and you need a
130:19 - submit button so when you make this
130:21 - change you can see this button
130:23 - so this knob this becomes a button uh
130:26 - and inside your header.html uh
130:29 - this is this snapbar you can do this to
130:32 - to-do app
130:34 - okay and let's do this and here you can
130:38 - see that now this becomes a to-do app
130:41 - we don't need these things so we can
130:43 - like cut them
130:45 - like they might create some confusion
130:47 - like with the code
130:48 - so we know don't need this drop down
130:51 - so this is fine and we
130:54 - also don't need this this is fine
130:58 - and let's refresh this so we have a home
131:00 - or link
131:02 - so let's see this so
131:05 - we can change this link to slash contact
131:08 - and this becomes contact
131:11 - okay and in the same way we can copy
131:14 - this
131:16 - we can replicate this and this can be
131:19 - changed to about
131:21 - about and this is about
131:27 - uh yeah and this can be changed to slash
131:30 - slash that is the root
131:32 - oh slash slash contact flash about let's
131:34 - refresh them
131:36 - here we can see so let's click on about
131:38 - move to about page contract is contact
131:40 - and home is this so this is perfectly
131:42 - fine
131:43 - now let's check how we can make a post
131:47 - request using this form
131:49 - so what we can do we can move to like
131:52 - these files have been sorted so let's
131:54 - move to index.html
131:56 - and let's make a we already made a
131:58 - method post please make sure that
132:00 - in uh below the post like
132:03 - below the form tag you add this token
132:06 - endoscope tag
132:07 - because if you don't add this token
132:08 - underscore tag you won't be able to make
132:10 - a post request because this will
132:12 - give an authentication error and to make
132:15 - a post request you need an
132:16 - authentication token so so that for
132:19 - every request we have a token
132:20 - and then you won't be able to make this
132:22 - okay so
132:23 - for we for this method post we move to
132:26 - action add
132:27 - so let's move to action add sorry you
132:30 - are allowed
132:31 - so post slash add move
132:35 - in a root controller we move to the
132:37 - action add and let's
132:39 - see this and then we simply
132:42 - add what we do okay this is not for now
132:47 - we simply do render json response
132:49 - patterns so let's create this
132:51 - let's create to do and let's copy this
132:54 - and paste this as well
132:55 - so let's make a request and here you can
132:58 - see
132:59 - authenticity token is this so that was
133:01 - the token underscore tag i was speaking
133:03 - about
133:04 - so which is here so this is the token
133:06 - underscope tag
133:08 - and the title is to do description is
133:10 - description controllers root and action
133:12 - is act
133:12 - so this means our form is working
133:14 - perfectly fine so let's try to get the
133:16 - data out of this form
133:17 - and post this okay so let's what we can
133:21 - do
133:22 - we can uh we can create add the right
133:26 - post is equal to post.new
133:29 - and we can do at the red post or title
133:36 - is equal to params of title
133:40 - and it post dot description
133:47 - is equal to patterns dot
133:50 - uh parents or description okay
133:54 - so we need to like follow this
133:56 - convention uh
133:58 - this should be strictly followed the
133:59 - title string and descriptions text okay
134:02 - and make sure you don't have any some
134:05 - spelling errors then
134:06 - this would be like something then render
134:08 - json at the right post
134:10 - so let's do this first let's do this now
134:13 - let's refresh this page and make a
134:14 - request again so
134:15 - say id is null title is due to
134:17 - description description
134:19 - works perfectly fine and we return the
134:21 - instance
134:22 - and we see that we don't save this in
134:24 - our database so
134:25 - let's do address post dot save
134:30 - and and we render json
134:33 - what we can do we can simply return this
134:37 - kind of response but let's copy this
134:41 - this would help really help us so we can
134:43 - say
134:45 - you can say message says saved
134:49 - successfully saved and success
134:53 - we can say successfully so this is like
134:56 - perfectly fine let's make another
134:57 - request and do this
135:00 - and here you can see
135:04 - this sign can't be reached like we have
135:06 - some
135:08 - like we have some issue let me check
135:11 - this
135:15 - hey everyone welcome back so like i now
135:18 - by mistake i must have closed the server
135:20 - that was it throwing an error so
135:22 - let's create a task task new now
135:25 - and let's make a description let's make
135:28 - a description
135:29 - this description new now so let's
135:32 - click on add and here you can see we
135:34 - have a status 200 which means okay
135:37 - and between this request okay and
135:38 - message is saved successfully
135:40 - okay to view this what we can do we can
135:43 - do
135:43 - post but all in our database and
135:47 - here you can see that we have a task new
135:49 - now and description you now created here
135:52 - so we could also do this post dot
135:55 - find by id5 since i've seen this ids 5
135:59 - and here you can see
136:00 - we have already saved this to our
136:01 - database so this is good and works
136:03 - perfectly fine
136:05 - what if we want to like uh instead of
136:08 - doing this
136:09 - we could render
136:13 - our index page instead okay so let's
136:16 - make a hit again task do not
136:20 - task new node 2 description new node 2
136:22 - and let's create add
136:24 - and here we can see that it must have
136:26 - been saved in the database let's check
136:28 - in the
136:29 - database so let's check in the database
136:32 - post dot
136:33 - find by id sticks because the new id
136:35 - created would be six
136:36 - and it says let's see we can see that it
136:38 - has been created in the database
136:40 - so it works perfectly fine uh but would
136:43 - instead of doing this we could do
136:45 - something like this
136:47 - drift post is equal to post
136:50 - dot all let's create our logic and
136:55 - let's create a logic yeah so we have
136:58 - rendered all
136:58 - posts in the index page so this would
137:01 - automatically be rendered
137:03 - okay in the index page and what we can
137:06 - do
137:06 - we can now access this inside of page so
137:09 - let's give a hr tag
137:14 - and let's give
137:17 - a post dot each
137:21 - do post
137:24 - and let's close this okay
137:28 - and let's close this and uh
137:31 - we could do something like this
137:34 - percent equal to post dot title
137:42 - and we could close this here
137:47 - something like this so similarly we i'm
137:51 - trying to achieve this so this is like
137:52 - what i meant so end tag i forgot to put
137:56 - like i'll put down
137:59 - yeah so this should work now like this
138:02 - is post dot each
138:04 - you do post and like it should work now
138:07 - so let's refresh this
138:10 - and no matches slash get route okay no
138:13 - we need to move to this okay there's an
138:16 - error let me
138:17 - check we need to i need to check this
138:18 - error
138:21 - hey everyone welcome back uh so a smart
138:24 - error like i found like
138:26 - like we have created we are like first
138:29 - when we add
138:30 - so we render an index page okay if we
138:32 - perform ad operation
138:34 - instead by default we are rendering the
138:36 - index page with this route which is the
138:38 - root route we need to define post here
138:40 - as well
138:40 - so if your render index if you render
138:43 - index then you would you need to add
138:45 - posts on both the sites like post is
138:47 - your
138:47 - post dot call and even here you have to
138:49 - define post world because in the same
138:50 - time
138:51 - you are rendering index okay because
138:53 - when you are rendering the index you
138:55 - need the post to be shown
138:56 - okay and when we move to individual html
138:59 - this is like this syntax is correct but
139:01 - it's a small error uh the accurate sign
139:03 - has to be put here
139:05 - now uh we can use a bootstrap card
139:08 - so i'll show you
139:11 - we can use a bootstrap card
139:14 - and let's search for card yeah so let's
139:18 - copy this
139:20 - and let's paste it here
139:24 - we don't need the image tag so this is
139:26 - fine
139:27 - we need this so
139:30 - let's paste it here
139:35 - and another thing we need is this
139:37 - description
139:41 - okay so another thing we need here is
139:46 - description
139:51 - this option let's refresh this
139:56 - and let's move to this so here you can
139:58 - see we have all the to-do's
140:00 - okay they are not aligned in the center
140:02 - to align them in the center what we can
140:04 - do
140:05 - you can put margin zero
140:08 - auto okay now let's refresh this
140:12 - and yeah perfectly fine so and one thing
140:15 - we are rendering is pose.title this is
140:17 - not needed
140:18 - yes let's refresh this now and we like
140:21 - move to contact up index this works
140:24 - perfectly fine and let's add a new to do
140:28 - do done again
140:31 - and let's give this as same and let's
140:33 - create an ad and now you can see
140:35 - this has been added so this works
140:38 - perfectly fine
140:39 - thank you everyone for watching this
140:40 - video i'll catch you in the next
140:41 - tutorial thank you
140:43 - so here i have started my real server
140:45 - and here i've started my rails console
140:47 - so let's make a post dot connection post
140:51 - dot connection
140:52 - and then yeah then we it's fine
140:55 - then we can type post and we could see
140:58 - our database
140:59 - like schema so here is our database
141:01 - schema here you can see
141:02 - so here we can work on this schema and
141:04 - let's get started
141:06 - so basically uh i'll run my application
141:09 - so yeah this is application let's add it
141:10 - to do
141:12 - new uh let's give them some like task
141:16 - one and just for the simplicity let's
141:20 - add this
141:20 - yeah perfect task two
141:25 - so with the simplicity i am going to
141:26 - repeat this process like for a few tasks
141:29 - last three so here you can see
141:33 - that it is we have created three tasks
141:37 - works perfectly fine but when you click
141:39 - on this none of them
141:40 - is get gets deleted so we've been
141:42 - implementing delete functionality
141:44 - the first thing we need to do you need
141:46 - to move to this file uh
141:48 - index.html.erb and you need to convert
141:50 - this
141:52 - button to delete okay so first
141:56 - let's make it out or delete so let's
141:58 - move to this file
142:00 - uh we will move to roush.drp
142:04 - and let's create this delete
142:08 - let's create delete and for that we need
142:11 - an
142:11 - id so this is not a get method this is a
142:15 - delete method
142:16 - okay uh we go to
142:19 - root hash
142:23 - delete i hope this is fine so
142:26 - let's move to root hat delete so this is
142:29 - where we
142:29 - form the delete operation now let's
142:33 - move to our root controller and create a
142:35 - method delete
142:38 - and simply let's end this
142:42 - and render json
142:47 - patterns okay uh this is fine we have
142:51 - made this
142:52 - let's move to index.html.erb
142:55 - and let's change this button to btn btn
142:59 - danger and we have changed this to
143:03 - beating video and dangerous y because it
143:04 - will give a red feather and
143:06 - give let's give it give it a style also
143:08 - so we'll move the style
143:09 - is equal to display display
143:14 - or simply give margins here auto it will
143:16 - move to center
143:19 - okay uh yeah so we can refresh this
143:25 - so it gives an error so let me check
143:29 - extracted source around
143:32 - let me check what this error is throwing
143:34 - let me check
143:36 - please welcome back uh
143:39 - the error is like we need to check that
143:41 - i need to put a
143:42 - colon sign here so this is fine let's
143:45 - refresh this
143:46 - and no match for get ad okay okay
143:49 - this is something yeah so here we have
143:52 - move to the delete button
143:53 - so now let's click on this
143:57 - and this is not working
144:00 - okay so they've seen some issue with
144:02 - this so
144:03 - this is not working let me let the we
144:06 - have created
144:07 - delete route and let's move to our
144:12 - index.html.drb
144:14 - yeah because it won't work because there
144:15 - is no hrm
144:17 - so when we say hrf is equal to slash
144:20 - delete
144:22 - and we need to define uh we need to put
144:26 - the like
144:26 - we need to put the id basically we need
144:29 - the id
144:30 - so we will find post dot id
144:34 - then we will close this and now this is
144:37 - fine
144:37 - so basically what we do we call for a
144:40 - delete method
144:40 - and with the id we pass it here another
144:43 - thing we need to do we need to price
144:45 - data method
144:46 - is equal to delete because by default
144:49 - a anchor tag has a get nature so nature
144:52 - won't work
144:53 - here because yeah i can uh
144:57 - opt for this i will show you how first
144:59 - i'll refresh
145:02 - now here you can see now i'll call this
145:04 - so it says get
145:05 - delete nine is not possible yes it won't
145:07 - be possible because
145:08 - we had defined in a route.rb this was a
145:11 - delete method
145:12 - so let's move back to index.html.erb
145:15 - and make this data method from the third
145:19 - is equal to this could be either get
145:22 - either post
145:24 - uh either get post or delete so we make
145:27 - it delete
145:28 - let's move this so let's
145:31 - let's move to our app refresh it
145:34 - so let's call delete and here you can
145:36 - see we have a json response so it works
145:38 - perfectly fine
145:39 - what we need to do we need to move to
145:41 - root controller now
145:43 - and we will do at the post is able to
145:45 - post
145:47 - post dot find
145:50 - patterns of id
145:53 - okay so because we need to match with
145:56 - the id here
145:58 - and we will simply say did it post
146:01 - or destroy destroy and this would delete
146:05 - the post
146:06 - and everything else remains same instead
146:08 - of generate json response
146:10 - we render at the right position
146:13 - and render index because then we this is
146:16 - a single post this is all the post so
146:18 - let's
146:19 - refresh this let's check if this is
146:21 - working or not
146:22 - yeah so refresh the app let's create
146:25 - delete
146:27 - okay still it returns like json response
146:33 - okay let me check what's the issue
146:37 - yeah so now i have saved the file i must
146:40 - have forgot to save this
146:41 - now click on delete yeah now it works
146:43 - everything works fine
146:44 - because i forgot to save the file so
146:46 - chain these changes won't save
146:48 - so it was like till json so now after uh
146:51 - saving them
146:52 - the saving the file now reflects the
146:54 - changes so let's quickly check
146:56 - whether how to do this now to do one
147:00 - let's create a description to do one now
147:03 - do two let's create two two
147:06 - now delete both of them deleted
147:09 - so perfectly fine so this is how we
147:12 - get the delete functionality so
147:15 - let's create another functionality let's
147:17 - create uh
147:19 - let's create some to do to do one
147:23 - and let's create this two to one
147:29 - to do two
147:32 - let's click ask three
147:35 - let's let's create some to do's now
147:38 - because we
147:39 - we might need to implement a new
147:41 - functionality and we might need them
147:43 - so let's do this so task so let's
147:47 - dummy to do let's create this as well
147:52 - okay so we have five to do's here and we
147:55 - can delete
147:56 - one okay just for so we deleted this so
148:00 - perfectly fine
148:01 - so let's create a search functionality
148:04 - for search functionality to be created
148:07 - we need to write a query sql query
148:11 - so let's write post dot where
148:14 - where post dot title
148:20 - like and this is a
148:24 - sql operator like so question mark will
148:27 - the question mark just like to take the
148:29 - value so what value we want here we want
148:30 - a value
148:31 - which is inside this okay so
148:35 - first what i'll do i'll type here so it
148:38 - says select post dot star from pause
148:40 - your post dot like null
148:42 - because i didn't pass anything in this
148:44 - in this array so
148:45 - that's absolutely fine uh let's do post
148:48 - dot
148:48 - all
148:52 - so we get all of them so now let's do
148:54 - something
148:55 - let's take a variable query and
148:58 - make is our dummy okay
149:02 - and now let's write this query where
149:05 - where uh we are defining now
149:09 - where we need to define a percent
149:12 - operator
149:13 - and this is like a query this will take
149:15 - the value
149:16 - and this is now we again put a person
149:20 - operator and
149:22 - type this so so here it says select post
149:25 - dot from post your post or title like
149:27 - dummy so this return this to do
149:29 - perfectly fine so this is the query
149:32 - value we had put in
149:33 - so this is so it's perfectly working
149:36 - fine so we can copy this query
149:38 - i had posted i had wrote the same query
149:41 - here as well
149:42 - so let's move here and type define
149:48 - search search
149:51 - let's create this end so
149:56 - and we need to define them as address
149:59 - post
150:01 - and yes this is fine and we need to
150:04 - refine the render index
150:07 - uh now the only one thing is left we
150:09 - need to get the query
150:11 - okay and the query would be our patterns
150:15 - of query okay
150:18 - so from where we will get this query so
150:21 - let's implement this
150:22 - uh in our header so move to let's move
150:25 - to our header
150:27 - and here we have this input type
150:31 - is equal to search this is a search form
150:33 - which refers to this at the top right
150:35 - so what we can do we can define
150:39 - we can define name is equal to query
150:42 - because we would
150:43 - are going to take and method is equal to
150:47 - get so by default it is get
150:50 - so let's refresh and
150:53 - this is some we can ignore this
150:57 - so let's type hello let's type dummy
151:03 - dummy and let's click on search
151:10 - so we forgot to like make a request get
151:14 - slash search
151:17 - and which says to
151:21 - is equal to root hash search
151:26 - so this is what's error and now we need
151:28 - to put this inside an action
151:31 - okay so we would move to our
151:33 - header.html.erb
151:35 - and we need to put this inside an action
151:40 - so basically this name this method
151:42 - should we get
151:45 - this entire wrong place so this is get
151:47 - an action is equal to search
151:54 - so i hope it should work now
151:58 - so let's type dummy and let's hit the
152:01 - button
152:02 - so yeah so undefined color with variable
152:04 - method query
152:06 - okay so it's like a small error i
152:10 - figured out
152:11 - and we needed to find the root
152:12 - controller and this should be at the
152:13 - right query
152:16 - let's refresh this and here you can see
152:18 - the dummy has been searched successfully
152:20 - let's type to do and let's search it get
152:24 - many tools dummy to do and to do because
152:26 - both of them have a tool
152:27 - keyword so this is how we operate the
152:29 - search impression
152:30 - thank you everyone for watching this
152:32 - tutorial i'll catch you in the next one
152:34 - thank you
152:44 - so today we are continuing with the
152:46 - rails app so i'll show you a quick
152:48 - overview what we have
152:49 - like achieved till now so this is the
152:51 - home page
152:52 - this is contact page this is the about
152:54 - page and this is the home page we have
152:56 - all the to-do's here
152:57 - so this is our rail server running and
153:00 - this is the rails console running
153:01 - we can type post.connection
153:05 - uh so like this is we have achieved the
153:08 - connection now we will type post
153:10 - and this is all the posts and we'll type
153:11 - post dot all and simply we get all the
153:13 - posts here
153:15 - so this is uh working so let's create a
153:17 - new to do let's create task three and
153:20 - let's paste this
153:21 - uh okay this already created that's
153:23 - created with task
153:24 - five and let's add this
153:28 - and it's has been added now we can
153:30 - delete this task as well
153:32 - and uh this is all the tasks we have we
153:35 - can also
153:35 - search one using here let's type task
153:39 - and we will get all the one so this is
153:40 - task three and task four
153:42 - so we have achieved lot of
153:44 - functionalities so one functionality
153:46 - is left that is the update functionality
153:50 - so update functionality is like uh
153:53 - so it is so let's start building the
153:55 - update functionality
153:56 - so for that what we need to do we need
153:59 - to move to the html file
154:03 - index.html.rb and here we have a button
154:05 - for
154:06 - uh like this is the add button so
154:09 - and this is this is that button and in
154:11 - the same way we have a delete button
154:13 - so let's move here and let's uh
154:16 - let's uh create a button
154:19 - so let's move copy this and let's
154:23 - this and data method we don't need a
154:25 - data method here
154:27 - so let's remove this hrf tag we can
154:29 - ignore for right now
154:30 - so now we are creating a update button
154:33 - so
154:34 - let's give this update
154:39 - and and let's give this a class button
154:42 - button warning
154:44 - so this will uh give the like yellow
154:47 - button
154:48 - so yeah so now it's perfectly fine so we
154:50 - have the update button
154:52 - so now we click on this it doesn't go
154:54 - anywhere
154:55 - so we need to create a route for this so
154:58 - let's
154:59 - do this uh the same way we have for
155:02 - delete let's create this for update
155:05 - okay so let's click here
155:09 - update okay now
155:12 - let's this is fine now we have to create
155:15 - a route for this on our routes.rb
155:17 - so let's create this so let's create
155:20 - here
155:21 - uh let's create a get method so let's
155:23 - create this after the search
155:25 - so let's create copy this yes
155:29 - so we need to create get
155:32 - request then update
155:35 - and root hash update
155:39 - okay oh yeah so this is fine
155:43 - so what we can do
155:47 - uh then we need to move to the root
155:49 - controller
155:51 - so in here we will create define
155:55 - update and let's end this method
155:59 - so we will do post dot find
156:03 - parenthood id and we will define title
156:07 - is equal to at the ratepost.title
156:10 - and address description is equal to at
156:14 - the red post dot
156:15 - description okay then what we can do
156:19 - we can render a template update
156:23 - let's render a template update now let's
156:25 - create a template update
156:26 - so in this we will create a new file
156:30 - update dot html dot erb
156:34 - and simply let's print this
156:38 - person tag is go to we will close this
156:40 - tag
156:41 - and add the red title
156:44 - and let's print this also add
156:48 - description
156:50 - so i hope it should work fine now let's
156:52 - refresh this
156:54 - so update we move to this page and
156:58 - so we have let me check
157:02 - let me cross this so yeah we have
157:06 - something here
157:06 - so uh we have something here
157:09 - so so we can see the text let's inspect
157:13 - element
157:15 - and we here you can see that we have the
157:18 - data that is task 4 task 4
157:20 - so this is perfectly fine now what we
157:22 - want to do this
157:24 - that we have the data which has been
157:25 - coming the data is moving we have a move
157:27 - to update route
157:28 - then it fetches that post with that
157:30 - given id then it extracts some data
157:33 - and then it's update then it's under
157:35 - this template
157:37 - so what we need to do we need to update
157:40 - this so what we can do
157:42 - we can create index index.html
157:46 - and we can copy this form
157:50 - okay so we can like copy this template
157:54 - till here because we want to recreate
157:58 - that thing so let's copy this
158:02 - and let's remove this yeah
158:05 - so yeah so let's move this and here
158:08 - like what we can do we can put value
158:15 - that is percent
158:18 - equal to percent
158:22 - so yeah the value is equal to
158:27 - add the red title and in the same way we
158:30 - can achieve this thing
158:35 - we can achieve this thing by putting
158:36 - this between the text area
158:39 - so this is added description
158:43 - so let's make a request again and here
158:46 - we see
158:47 - automatically we get all the things the
158:49 - title and task so let's click go to home
158:51 - button
158:51 - let's click on this update so we get
158:54 - everything the dummy to do and we
158:55 - do as a description one small thing we
158:58 - can make sure here
158:59 - that this should be update now now this
159:02 - is not
159:03 - a ad okay so let's
159:06 - so this is update so we need to create
159:09 - something
159:10 - one thing i would show you so
159:13 - you need to create you need to maintain
159:15 - the id
159:16 - so for that what you can do you can do
159:20 - input type
159:23 - is equal to hidden
159:26 - okay and here you can see value
159:32 - is equal to value should be this
159:36 - so value can be your id
159:40 - so value can be your id so
159:46 - so this is fine so input types will do
159:48 - very value is equal to id
159:50 - so you need to actually maintain the
159:53 - id of the pose as well so let's go here
159:56 - and
159:58 - we will define at the rate id it is
160:00 - equal to params
160:01 - of id so simply simply we can do this
160:05 - and
160:06 - then let's again make a request
160:10 - we have home page let's click on update
160:13 - and let's
160:13 - inspect element and see uh because
160:18 - this is a here you can see input type is
160:20 - equal to hidden
160:21 - and we have a value 15 because the task
160:25 - corresponding to this let's
160:26 - move to rails console and check post dot
160:29 - find
160:30 - let's post find the post with the id15
160:33 - yeah this is the same
160:34 - post so here you can see that we have
160:36 - that post with that id
160:38 - so we did this because we wanted to
160:41 - maintain the value
160:42 - so let's uh let's create a
160:45 - method again def define
160:49 - update form
160:52 - and let's end this okay
160:56 - now let's make this
160:59 - post slash
161:02 - update form okay
161:06 - uh then let's
161:10 - move to this to hash
161:14 - root
161:17 - root update form okay so
161:20 - this is fine let's move to controller so
161:23 - this is update form
161:24 - and then we can simply render json
161:27 - of patterns just for the simplicity of
161:30 - this
161:31 - so and now when we make update html so
161:34 - this same space everything remains same
161:38 - and this changes to update form so let's
161:41 - refresh this
161:45 - so let's move to the app so we have home
161:49 - let's click on update let's give it two
161:51 - to three
161:52 - and let's make it to do 20 let's make it
161:54 - 20 20
161:57 - 20 and let's click on update so here you
161:59 - can see
162:00 - now the title is this and 2 to 20 is
162:02 - this so now everything looks perfectly
162:04 - fine
162:05 - now a simple change is needed in the
162:07 - controller so i mean you're
162:09 - getting my point that i can okay i
162:12 - can move this method below
162:16 - okay this is and this will look fine
162:21 - so basically what we are doing first we
162:23 - are
162:24 - fetching the post which we have to
162:25 - update then we render the data into a
162:28 - form then we again submit that form
162:30 - so again what you can do because now you
162:34 - have all the patterns the title
162:36 - description and
162:40 - like you have the id okay
162:43 - two to twenty two so we need to fetch
162:46 - the id the id is missing here so
162:48 - let me check how it is missing
162:52 - hey everyone uh so i got like the uh
162:55 - it was a small error that name tag has
162:57 - to be mentioned here that name
162:58 - is equal to id so it's now perfectly
163:01 - fine when you submit this you get the id
163:03 - here
163:04 - so now the simply simply what you need
163:06 - to do now it seems like so what you need
163:08 - to do you need to find the post
163:11 - and then add the post dot title
163:15 - is equal to uh params
163:18 - of title and the rate post dot
163:22 - description is equal to parents of
163:25 - description
163:26 - and we need to then save that post post
163:30 - dot save
163:31 - and then we can uh simply
163:34 - our usual thing we render the index page
163:37 - we find all the post
163:39 - and we can
163:42 - we can simply do post dot all okay
163:45 - so now it should work perfectly fine
163:47 - then we have
163:48 - this we have the id title description
163:51 - then we save this then we render
163:52 - everything
163:53 - so let's move to the app
163:56 - let's start everything from scratch
163:58 - let's create an uh
164:00 - now let's create update that we change
164:02 - this to task 40
164:04 - and change this to task 40 let's
164:08 - update this and here we go it's updated
164:11 - perfectly fine
164:12 - so thank you everyone for watching this
164:14 - tutorial you can also delete things
164:16 - yeah works perfectly fine fine
164:19 - now let's update this and yeah so
164:22 - everything is working fine
164:24 - 30. so this is how we did i'll
164:27 - give you a quick overview first you
164:28 - created the update method to check
164:30 - which post you have to update we
164:32 - rendered the same data update form
164:34 - then we got the values back and then we
164:36 - updated them so thank you everyone for
164:38 - watching this tutorial
164:39 - i hope you liked it thank you everyone
164:42 - today we are going to build a rails
164:43 - authentication app
164:45 - so let's build this so i have run this
164:47 - command rails new rail source app
164:49 - so this would create a rails or app your
164:52 - local machine
164:53 - so the next command you need to type is
164:56 - you need to find
164:56 - cd you need to move inside this rails
164:59 - new
165:00 - app new new auth app and uh
165:03 - like so this is like
165:06 - this is the command rails auth app so
165:08 - you need to define cd
165:10 - rails or app and you can move you have
165:14 - moved in this directory and you need to
165:15 - define
165:16 - code dot dot so this will open the vs
165:18 - code on your local machine
165:20 - so this is fine uh then you can click
165:23 - here and you click in
165:24 - rails terminal and then you can type
165:27 - real server
165:29 - and this would like probably
165:32 - uh this would open the like
165:36 - this like this would be on your local
165:38 - post so
165:39 - then you can copy this link and
165:42 - you can copy this link and then you can
165:45 - open chrome browser
165:48 - and then you can open the chrome browser
165:50 - and it's this url
165:52 - so this is how we have
165:55 - so now the app is running on your
165:57 - browser so this is fine
165:59 - so we need to define few things before
166:01 - we start our application
166:02 - so you can close the server
166:06 - and you can close the server and it
166:08 - would ask you to terminate
166:10 - the job yes so we need to define the
166:12 - rails g
166:13 - controller so we need to define
166:17 - first we need to define very first thing
166:19 - what you need to do you need to move to
166:21 - your gem
166:21 - file and this is your gem file and you
166:24 - need to
166:25 - uncomment this thing so you need to
166:28 - uncomment this
166:29 - and then you need to type so we need
166:32 - decrypt to store the
166:34 - password in a digested form because we
166:36 - are building authentication app and we
166:38 - cannot directly store the
166:40 - uh like like user password in a raw form
166:43 - so we need to like
166:44 - basically uh store it in a digested form
166:48 - okay so then we need to define create a
166:51 - controller
166:52 - rails g controller
166:56 - and we need to find sessions
166:59 - okay so basically this is we need to
167:02 - define rails free controller session so
167:03 - this would create a session controller
167:06 - and in the same way
167:11 - we need to define we need to find
167:15 - a user controller and a user model okay
167:18 - so let's move this session
167:22 - and roller dot rb so this is class
167:24 - session controller and application
167:26 - controller
167:27 - and this is end so this is our
167:29 - accessions controller and in the same
167:30 - way we define rails
167:32 - g controller
167:36 - users and this would create the user's
167:39 - controller
167:40 - so this is fine and
167:45 - we need to also define rails g model
167:51 - user act which has the email unique
167:56 - and a password in a digested form
168:02 - okay okay so this would create a user
168:06 - model in your
168:08 - machine and this is fine and then you
168:10 - need to type rails db
168:12 - migrate so then we have migrated the
168:16 - database
168:17 - so this looks perfectly fine and
168:20 - so this is fine so we would also have
168:23 - the usage controller
168:25 - this is here it is and we would also
168:27 - have the user model
168:30 - okay so so we need to define few things
168:34 - here validates
168:37 - email so we need to validate the email
168:40 - a few things that is presence
168:44 - presence is equal to true
168:49 - and uniqueness
168:55 - uniqueness is equal to true
168:59 - so this is how we do this we need to
169:01 - define validates
169:03 - email presence is going to be true and
169:05 - uniqueness is equal to true
169:06 - and let's open the console rails console
169:12 - and let's run few commands like
169:15 - we are sure that our model is being
169:17 - created or not so we need to define user
169:19 - dot connection
169:21 - so now it's fine so now let's define
169:24 - user and we have got a user ids integer
169:28 - email is
169:29 - string and a password digest is equal to
169:31 - string
169:32 - so basically this means we are storing
169:34 - the password in a string format but in
169:36 - an encrypted way that is a digested form
169:39 - okay so let's move to new file routes.rv
169:45 - and let's create few resources here so
169:49 - we are defining resources because we are
169:51 - telling them that we are using those
169:53 - controller
169:53 - in those routes because we need to
169:55 - define a map particular url
169:57 - to around so for that one we need to do
170:00 - we need to define resources
170:04 - and we need to find users
170:08 - and resources and we need to define
170:11 - sessions okay
170:14 - so this is how we do it and
170:18 - let's define get
170:22 - get method with sign up
170:25 - which says to
170:29 - users
170:33 - as new and
170:37 - let's define this as as
170:41 - sign up
170:44 - so and for this we need to define get
170:48 - login okay this is not needed now right
170:51 - now so we can ignore this
170:53 - and let's this is not needed and we can
170:56 - ignore this
170:57 - and let's move to this and we need to
171:00 - define the def
171:01 - new and let's end this method
171:04 - okay and we should also uh when we
171:06 - create more value the most probably we
171:08 - are going to create depth create and
171:10 - this and def destroy
171:16 - destroy and end
171:21 - and when we move to this
171:26 - use users and we create a file
171:29 - okay something wrong yeah new file
171:34 - and we need to define new dot html dot
171:37 - erb
171:39 - and let's define a page sign up
171:43 - so i hope this is fine and yeah so sign
171:46 - up is the page
171:47 - so let's see the flow first so we have a
171:49 - router
171:50 - rb we say get sign up user slash new and
171:53 - add sign
171:53 - up and in here we define a sign up
171:56 - method
171:57 - new and this has a like default
172:00 - statement of this
172:01 - render new okay so if you want to like
172:04 - have a good
172:05 - overview so this is a default statement
172:06 - it must be rendering so we can skip this
172:09 - as a practice we can skip this and it
172:11 - will definitely
172:13 - render the new dot html dot erp okay so
172:16 - let's run this
172:18 - and i hope the server is not running
172:21 - so let's exit this rails
172:29 - and let's define sign up
172:35 - so we have like so it says rendered
172:39 - user.new.htmlrb with layouts
172:42 - and let's see yeah the signup is there
172:44 - so this is the basic layout
172:46 - so in the same way uh a very quick we
172:49 - can do this we can
172:50 - also create a few things here also def
172:52 - new
172:53 - you can also create depth new end
172:56 - dev create and we can end this method
173:01 - and def destroy so
173:05 - so this is the basic architecture so we
173:07 - are maintaining user model user
173:09 - controller and a session controller
173:11 - for our application so basically these
173:12 - things are needed so this will help us
173:15 - out
173:16 - to like maintain the application so then
173:19 - in the same way we can
173:20 - create few more routes as well so
173:23 - one is like sign up and another is sign
173:26 - in
173:27 - and one is also like login logout so we
173:31 - can maintain those routes
173:32 - and help us so next what we are going to
173:35 - do
173:36 - we are going to create a form here so
173:38 - basically
173:39 - those form is also basically it is going
173:42 - to
173:43 - have like few things uh a registration
173:45 - form
173:46 - basically so we are going to register
173:48 - the user here so
173:49 - it will have a method a basically
173:53 - method which is going to be post okay
173:56 - so this is going to be post method
173:59 - and uh and we will define the action
174:01 - here
174:02 - action is away like it is being empty
174:05 - here
174:06 - so action is there and we need to define
174:08 - something for that
174:09 - okay so i'll catch in the next tutorial
174:11 - thank you for everyone for watching this
174:13 - thank you bye
174:18 - so basically to start the application
174:20 - you need to type rail server
174:21 - and this will type the application on
174:22 - your machine so like previous part we
174:25 - had created a form
174:26 - using a basic form layout using the
174:28 - signup method
174:29 - so let's create the input type for this
174:31 - so for this we can type input
174:35 - is equal to email uh so this is the
174:37 - email
174:38 - and the name is equal to uh we can
174:41 - give a name by any recent name this like
174:45 - let's give this a name
174:47 - email or like let's give this a username
174:50 - okay and let's give the
174:53 - name username and required
174:58 - and this is required so let's get this
175:00 - and
175:01 - so i hope this is fine and we can define
175:04 - our id
175:05 - is equal to username basically ids
175:08 - is needed for the label so for this
175:11 - corresponding let's create a label
175:13 - method
175:14 - so let's create a label table for
175:19 - username and let's create this
175:24 - label let's close this
175:28 - and let's type user name here
175:32 - so this is how it is done and to avoid
175:35 - any
175:36 - like cr csfr token since we are making a
175:38 - process so we need to define percent
175:40 - equal to token underscore tag
175:46 - and this is this okay
175:49 - so this is how we do it in types the
175:51 - good email name is going to the name id
175:53 - and required
175:57 - and this is like table for
176:02 - this is user password
176:05 - so we are creating a user password here
176:08 - and for this we are defining
176:10 - input type is equal to password
176:16 - and we need to define name is equal to
176:20 - user password
176:24 - and id
176:27 - equal to user password
176:31 - okay and this is also required so we
176:33 - keep this as required
176:35 - okay and since we need to define
176:38 - input type
176:42 - is equal to submit
176:46 - value is equal to register
176:51 - let's keep a value of register uh this
176:54 - is fine
176:54 - and we can close the stack so by default
176:58 - when we refresh this page
177:00 - so we need to find something like
177:01 - username and we need to find a password
177:03 - here
177:04 - okay yeah password is required so let's
177:07 - keep this
177:09 - and let's there has a
177:12 - password okay
177:16 - and this is fine okay so
177:19 - let's yeah so let's yeah we have option
177:22 - to sign up that is username and password
177:24 - and let's we have a register button okay
177:26 - so this is fine
177:28 - so let's give this as a sign up page
177:36 - so this is fine now so we have a user
177:38 - password and like
177:40 - so let's create when we submit this form
177:43 - so we need a method where we need to
177:46 - submit this form
177:47 - so let's create this method
177:50 - uh let's create this method uh
177:53 - sorry a route for this so that is post
177:56 - register and when we hit this register
178:01 - so basically we tell them okay
178:05 - uh we define users
178:08 - hash create and we need to define this
178:12 - as as register
178:16 - okay so this is fine he defined as the
178:19 - digital post register we need to find to
178:21 - use this hashtag as registers so when we
178:24 - make a post request
178:26 - so we need to hit this method okay so
178:29 - i have maintained this method so i'll
178:31 - give you to show you a trick
178:33 - or how to view this routes everywhere so
178:36 - move to this local route okay this is
178:39 - your base route
178:40 - app is working this sign up app is
178:43 - working
178:44 - hyper invalid route something like
178:48 - uh any invalid route maybe i type
178:50 - invalid a
178:51 - uh invalid xyz
178:55 - something anything invalid you get this
178:59 - and now you can type register uh
179:02 - you can like you can
179:05 - search from here as well and i'll use
179:08 - this
179:09 - so it says register underscore part
179:11 - which hits on users as great
179:13 - so i can use this copy this i'll copy
179:16 - this register underscore path
179:19 - and let's go to this page and
179:24 - i can type percent equal to this
179:28 - so this works perfectly fine so this
179:31 - would be
179:31 - like this would help you from defining
179:35 - like this works as a constant so it
179:38 - action moves to this row data but these
179:40 - are good to put okay
179:42 - so when you put this this register
179:45 - underscore path
179:46 - it will hit this method because i have
179:48 - told him to move hit this method
179:50 - and then you can simply render json
179:54 - is for this simplicity i am telling it
179:57 - to render json params
179:59 - okay so let's now hit the sign up
180:03 - uh let's uh type a user at mail.com
180:08 - and let's give a dummy password
180:10 - something like very dummy password
180:11 - you can give so one two three four five
180:15 - six
180:16 - okay and type again one two three four
180:18 - five six so let's hit this
180:20 - so when we hit so like
180:23 - never so we have authenticity broken is
180:25 - to this username is equal to this and
180:28 - user password is this and controller
180:29 - this action is
180:30 - great this is fine so what we need to
180:33 - define we need to define
180:35 - email is equal to parents of
180:40 - what parents you are getting here so we
180:42 - are getting a plan for user name
180:44 - let's copy this to avoid any and
180:47 - so it is equal to
180:51 - items of
180:54 - this user password okay
180:57 - and this is fine
181:01 - so we have already like
181:04 - i have shown you like in the previous
181:07 - tutorial
181:07 - so i'll just give you a quick overview
181:10 - yeah
181:11 - so we had created a user right
181:14 - so okay this is not needed i'll show you
181:16 - again
181:20 - exit and we'll type rails console
181:24 - okay so rails console will be open
181:27 - and when i type user dot connection
181:33 - and then i'll type user so this is how
181:35 - we have email and password underscore
181:37 - digest okay
181:38 - so this is we how we create a
181:42 - user so we can define
181:46 - user
181:48 - we can define simply user dot create
181:54 - we need to define user.grade where email
181:58 - is equal to email and
182:03 - password underscore digest
182:08 - equal to password
182:11 - i hope this is fine and then you can
182:13 - simply say
182:15 - response
182:20 - response is equal to this and let's
182:22 - define a success
182:26 - is equal to true and render json
182:29 - response
182:33 - okay so let's hit this request again
182:37 - okay i need to make sure the server is
182:38 - running server is not running
182:40 - so let's start the server so
182:43 - let's hit the request again and this
182:45 - time the user should be created
182:47 - okay so basically i'll show you again
182:49 - once again so
182:50 - password is this user is email.com let's
182:53 - again
182:54 - i'm making the request again let's make
182:55 - a request again
182:57 - okay i'll zoom this and now i'll make so
183:00 - this is the username and user password
183:01 - let's make the request again and
183:03 - i should get a success rule true okay
183:06 - good
183:06 - if the success is true then let me check
183:10 - let me check uh
183:15 - so l rails console
183:19 - okay so i'll do this console
183:22 - and this would be do user dot
183:28 - first okay so now you see the password
183:32 - is being stored in a
183:33 - digested form okay so thank you everyone
183:36 - for watching this tutorial i'll catch
183:37 - you in the next one thank you everyone
183:41 - so we left out with where if we have
183:43 - created a user
183:44 - so instead of sending a json response so
183:47 - what we will do we will create a message
183:49 - here
183:49 - which says uh android message
183:54 - your account
183:58 - is created
184:02 - successfully account is your you can
184:04 - simply give it your account is created
184:07 - okay
184:07 - so successfully
184:11 - so this would be a message to the user
184:12 - and in new dot html
184:14 - rb you can render this message like this
184:17 - so so let's again sign up
184:21 - so let's create on this and just
184:24 - sign up and let's create a
184:28 - new user who use it and we
184:31 - give a simple password okay let's create
184:35 - this and say your account is created
184:37 - successfully
184:38 - if your account is created successfully
184:40 - you should give them a sign up option
184:42 - right so you should give them a sign up
184:45 - option so let's move to write routes or
184:47 - rb so we will do it
184:51 - sign in
184:55 - and we would go to
185:01 - session hash new
185:04 - because now we are instead talking about
185:07 - creating a session
185:08 - sign in and we would put this as
185:12 - sign in okay i hope this is fine
185:15 - and here like if this is a
185:19 - uh like yeah so
185:23 - what you need to do uh you need to
185:26 - define
185:27 - a variable so what you need to do you
185:31 - need to move it
185:32 - and here your account is created
185:33 - successfully
185:35 - and either you can do this
185:39 - success is equal to
185:42 - success is equal to
185:46 - and what you can do you can remove this
185:48 - message not needed
185:49 - and what you can do
185:55 - if if at success
186:01 - you can end this
186:04 - end this tag as well
186:09 - if i did success you can say
186:14 - your account is created
186:20 - and you can end this tag
186:24 - and here you can see hrf
186:28 - you can give anchor tag to this anchor
186:30 - tag you would
186:32 - move them to the login i say click
186:37 - click here login
186:42 - i hope this is fine and
186:45 - now i told you a trick that you can move
186:48 - you can check the routes by randomly
186:50 - typing something here and
186:51 - then you can you can check the path and
186:55 - this is the path sign
186:56 - in path so you should copy this path and
186:58 - you should be able to paste this here
187:01 - so this gives a value sign
187:04 - in underscore
187:07 - path and let's close this
187:10 - okay so i hope this is fine so let's
187:15 - so let's again do a sign up
187:18 - and you do new user three
187:23 - and my uh you should give a simple
187:27 - password
187:28 - one two three four five six
187:32 - and here you can see your account is
187:33 - created click here to log in
187:35 - so when you click on this it might
187:37 - return a error so
187:39 - because this is a like error because you
187:42 - have not defined it
187:43 - and you can move to route.rb and this
187:45 - will be sessions
187:47 - so when you move to this and then it
187:49 - says is missing a template
187:50 - so we will create that okay
187:54 - so we will create a template for that so
187:56 - for that what we
187:58 - are going to do so we need to move
188:01 - here in
188:05 - uh sasha we need to move in the views
188:07 - folder
188:10 - app views sessions and let's create a
188:12 - new file
188:14 - new dot html dot erb
188:19 - okay so let's create a heading
188:23 - so let's create a heading h1 tag
188:29 - let's create this and we need to define
188:32 - h1
188:36 - sign in okay and in the same way
188:40 - we need to define a form
188:45 - okay and let's define this form okay
188:48 - so input type is equal to
188:51 - okay so this form is like for the
188:55 - significant input is equal to email
188:59 - okay and label is equal to
189:02 - you can keep this as anything because
189:06 - since you have created the user so
189:09 - let's keep this very quick do this very
189:12 - quickly
189:12 - label is equal to my name is equal to
189:15 - email
189:20 - and id is equal to email
189:24 - okay and let's close this
189:30 - label for
189:33 - email
189:41 - so let's create the email
189:45 - uh basically this is our username also
189:47 - so you can comment this and
189:49 - put here and then input
189:52 - it just go to password
189:58 - and you can copy this
190:02 - name is equal to
190:05 - password id is equal to password
190:09 - and we can do table
190:14 - for
190:17 - label for password
190:24 - and we can close this so this is your
190:26 - password
190:30 - now
190:35 - you can do input type is equal to submit
190:41 - value is equal to login
190:45 - okay so value is equal to login
190:48 - so what you need to do let's refresh
190:50 - this page
190:52 - and here you get the sign in right so
190:55 - that's great we get a sign-in page
190:57 - now what we need to do we need to define
190:58 - a method is go to post
191:05 - action now let's
191:08 - keep this action as empty and now we
191:11 - need to define a post method for
191:14 - for sign up we define a register for
191:15 - sign in we define a login
191:17 - okay post login
191:22 - and let's now we define us sessions
191:27 - hash create now
191:33 - we define this as
191:36 - login okay
191:39 - so most probably we are going to move
191:43 - in sessions controller
191:46 - and we need to define render json params
191:50 - so the simplicity it is then and
191:53 - we have like
191:56 - the apps we have the views uh we have
191:58 - the new dot html and for here we defined
192:03 - person is equal to login underscore r
192:11 - and here we also defined percent equal
192:14 - to token
192:18 - so this is how we define the token and
192:20 - the like
192:21 - html so it is done yeah
192:24 - so let's just define a user at
192:27 - mail.com let's put the password one two
192:30 - three four five
192:31 - six so yeah it's working perfectly fine
192:35 - great so we are able to create the
192:37 - sign-in page as well
192:38 - now we have to check for the user
192:40 - authentication
192:42 - so next thing what we are going to do
192:45 - so first we will take the user
192:48 - and i'll show you what we are going to
192:50 - do
192:53 - so what we are going to do so what we
192:56 - are going to do we are
192:57 - going to take the email okay
193:00 - and we say items
193:03 - of email so simply see
193:07 - we take the email and password
193:12 - is go to parents
193:15 - of password so this is like we take and
193:19 - now i'll tell you you might also think
193:21 - for the next tutorial what we need to do
193:22 - new you do something like user dot find
193:25 - with this email
193:27 - if it exists if it exists
193:32 - then match for password right match
193:36 - for password else through
193:42 - so this we are going to do something if
193:44 - it exists in match for password as
193:46 - through error and if
193:49 - it matches if it matches
193:57 - create a session
194:01 - okay if it matches then create a system
194:03 - so that is what we are going to achieve
194:05 - in the next tutorial thank you everyone
194:06 - for watching this
194:08 - so let's start our application
194:11 - and let's see where we have ended in the
194:14 - last tutorial
194:15 - so let's create this rail server and
194:18 - let's create this and let's start our
194:20 - server so we were able to create the
194:22 - login page
194:23 - okay so one thing uh so
194:27 - server is already running okay
194:30 - let me check yeah it's running so
194:32 - perfectly fine let's
194:34 - yeah so the server is running the app is
194:36 - running so
194:37 - we have created a login page okay
194:41 - and but we need to check
194:44 - we need to check if this login page
194:46 - already exists or not
194:48 - so for that what we are going to do we
194:50 - are going to do rails console
194:53 - and we need to check
194:56 - uh like we can do since the email is
195:00 - unique
195:00 - so we will type user is equal to user
195:06 - dot
195:07 - find underscore by
195:11 - email equal to email
195:14 - okay so and we say
195:18 - if user if user so if there is if if
195:21 - there is a user
195:22 - let's do a end statement if user
195:28 - and this would use it is
195:31 - like this would mean that if user does
195:33 - exist
195:34 - okay so then we need to match password
195:37 - okay
195:38 - if user dot exist we need to patch
195:40 - password
195:42 - so if you use it
195:45 - and or we can do this way also
195:48 - user so first i'll show you what you
195:51 - need to do
195:52 - this is you this is your user dot first
195:56 - and we need to do if user dot password
196:02 - underscore digest is equal to password
196:06 - so then we can render a json
196:09 - this just for simplicity i'm running a
196:12 - json which says
196:14 - response and let
196:16 - response is equal to
196:24 - log then is equal to
196:28 - so this is just i'm thinking and let's
196:30 - remove this
196:32 - and else
196:36 - if else would be something this which
196:38 - says
196:42 - response
196:45 - logged in is equal to false
196:48 - and we could do this statement here only
196:51 - because
196:52 - we we want this json response to be sent
196:56 - after the file statement so
196:58 - first we will try with user gridmail.com
197:01 - okay
197:02 - and this is how we do it uh because i
197:04 - don't remember the passwords which i
197:06 - created
197:07 - so many passwords that let's create a
197:08 - user first so let's create a dummy
197:12 - at three mail.com and we would say
197:16 - one two three four five six and let's
197:19 - register so it says your account is
197:20 - created directly
197:22 - here to login and say dummy at the
197:25 - ratemail.com
197:28 - the user is created so now it should
197:30 - return
197:31 - for logged in zero to true so it says
197:33 - logins would just put a wrong password
197:37 - one two three four five
197:40 - okay what is false it's an incorrect
197:43 - email
197:44 - and see whether this works or not so we
197:46 - are going in right direction
197:48 - one two three four five six the password
197:51 - is right but the email is wrong so it
197:53 - says logins for the
197:54 - logic is right so it says
197:58 - it says uh instead of response now
198:01 - we are going to basically
198:05 - we are going to render a message
198:09 - so basically which says
198:14 - the rate uh success
198:18 - logged in is equal to false and
198:23 - this is false and we simply render new
198:26 - because we were coming from the new page
198:28 - of the views i'll show you how
198:30 - we move to app views
198:33 - sessions and this was our login page
198:35 - okay and here we say
198:38 - and then we say at the rate
198:41 - if there is
198:47 - logged in equal equal to false
198:52 - okay so we say and then
198:56 - end so we
198:59 - redirect the user to the same page okay
199:02 - and we say
199:03 - you say if at the rate login is going to
199:05 - false then we say
199:07 - either email or password
199:12 - doesn't match
199:15 - i hope this is right so let's create
199:18 - this and this yeah
199:20 - perfectly fine so let's move to our
199:22 - session controller
199:23 - so we say add the logged in go to render
199:26 - new yes
199:28 - okay okay this is like this is
199:32 - and then it's locked in is equal to true
199:36 - okay i created i put this into a long
199:38 - logic block
199:39 - this is fine android object would fall
199:42 - and
199:44 - and and
199:47 - let's do this as true okay
199:50 - so now let's down here treadmill.com one
199:54 - two three four five
199:56 - and it's a login how called and also
199:59 - known neither reader does not
200:01 - so there's an error in this line i'll
200:03 - see
200:04 - so it says render json response
200:09 - else render new
200:13 - or render json response
200:19 - it's fine
200:23 - so email or password doesn't match so
200:26 - either email so
200:27 - either email or password doesn't match
200:28 - so we tell them to log in
200:30 - and if we put the correct email id and
200:33 - password so let's see it says login
200:36 - so uh if this is true
200:39 - so let's maintain a session for it
200:41 - because this is true
200:42 - but let's maintain two session for it
200:45 - okay one thing i wanted to
200:47 - make this we did not add the error
200:49 - handling for users also
200:51 - uh if
200:54 - what i wanted to do like
200:58 - see if
201:01 - this email is already taken then what
201:04 - happens so we did not
201:05 - create this functionality on the user
201:07 - side okay so what we will do
201:10 - if user is equal to user dot
201:15 - find underscore by
201:18 - email
201:23 - is equal to email if
201:26 - user is there then let's end this
201:31 - else let's do the same thing what we did
201:33 - for the login part
201:35 - else if user is already there then let's
201:38 - create this for the success
201:41 - okay and this is fine
201:46 - it's if the user does i i mean this is
201:49 - what you create part okay so don't
201:51 - confuse yourself
201:52 - we are the login part is like done we
201:55 - have
201:56 - the login password and we are
201:58 - maintaining and the password is wrong we
201:59 - are maintaining
202:00 - but if the user if this email is already
202:02 - taken by republican
202:04 - then you need to take advantage success
202:11 - is equal to false okay okay let's
202:14 - name this as a register because this
202:16 - makes more sense
202:18 - and this also make more sense
202:22 - okay and we are going to render
202:27 - so basically we are doing the same thing
202:28 - so let's avoid this and
202:30 - we should render new
202:33 - this is fine and let's move to
202:38 - new dot html rb so if if register
202:43 - this okay if register is
202:46 - equal to
202:49 - and this and else we move to
203:00 - else
203:02 - okay one thing i'll show you okay let's
203:04 - do this one
203:05 - else is this block and we say
203:10 - email already taken
203:14 - okay so this is fine
203:20 - so let's move to this our app sign up
203:24 - yeah now you see see uh i'll show you
203:28 - one thing
203:30 - let's do user dot all and see
203:33 - okay if this is enabled
203:38 - okay this is not enabled so we have
203:41 - see we are taking user drivemail.com
203:44 - see this or maybe we have a dummy
203:47 - address you already taken
203:49 - okay fine one two three four five six
203:52 - let's
203:53 - check with this so yeah it says email
203:54 - already taken so what happens
203:57 - when we move to this page
204:00 - uh without checking in and it says email
204:02 - will be taken this is wrong
204:04 - because we need to avoid this and for
204:06 - that what we will do
204:08 - and at the red register
204:14 - uh if the register is equal to
204:19 - and for this box
204:24 - uh lf okay
204:27 - else let's say
204:31 - the rate register
204:35 - is not equal to nil
204:38 - because if it's nil we don't uh show
204:41 - this message okay
204:43 - so now it's perfectly fine because by
204:45 - default it has a nail value
204:47 - so if it's true your account is created
204:50 - if it's not equal to say then he will
204:53 - if it's nil then don't show anything or
204:57 - okay so this is fine now let's move this
205:00 - and check
205:01 - this with sign up
205:04 - yeah you are already taken let's create
205:06 - a new id
205:08 - user 22 and one two three four by six
205:13 - so created your account is created click
205:15 - here to log in okay
205:16 - perfectly fine so we are moving in right
205:18 - direction
205:19 - so this was the case when we had to add
205:21 - error handling on the page
205:23 - for both sign up and sign in so thank
205:26 - you again for watching
205:26 - bye so what i've done now
205:30 - is i have created a landing.html.erb
205:33 - so this is the landing page of the
205:34 - application
205:36 - so this is the landing page and it says
205:39 - landing page
205:40 - to check login or
205:44 - log out so simply it is the landing page
205:47 - to check login or logout
205:49 - and let's this is the uh this is the
205:52 - feature landing page to check login or
205:54 - logout so let's
205:56 - exit this facebook console and
205:59 - let's clear this so
206:02 - now we need to define in dot shot rb
206:05 - we need to define get log out
206:09 - because now this is the last feature we
206:11 - are building get lockout
206:12 - and then we will test our application to
206:15 - define
206:16 - sessions hash destroy
206:21 - as long
206:27 - so this is session.destroy as the whole
206:30 - so now let's move to session controller
206:32 - okay what happens
206:34 - when we make a session so what happens
206:37 - let's i'll show you
206:39 - okay so one thing i
206:42 - uh like one thing i'll show you one
206:45 - thing uh
206:46 - uh see so what happens
206:49 - when the user authentication is
206:51 - successful
206:53 - so if the user's authentication is
206:56 - successful
206:57 - so we what we do
207:01 - we do session
207:04 - of user id
207:08 - equal to user dot id okay
207:12 - now this is what happens when we
207:16 - see the like we see that the user has
207:18 - successfully logged in so we create a
207:20 - user id and assign that user.id
207:23 - or destroy what we do we do the opposite
207:25 - of this
207:26 - so okay we do the opposite of this that
207:29 - instead of
207:29 - assigning it id we assign it as a nail
207:32 - value
207:33 - okay so this is what we do
207:37 - and this is this happens okay
207:40 - uh yeah then uh
207:44 - uh we like this is we do and uh
207:47 - then we create a helper method and uh
207:50 - application
207:51 - controller dot this is the application
207:54 - controller
207:55 - so we create a help method in this
207:58 - and how do we define this we define
208:02 - a helper method helper underscope method
208:08 - which says current underscore user so
208:10 - basically in most of the rails
208:12 - application we
208:12 - use that access the current user using
208:14 - this and if and define
208:19 - find current underscore user
208:23 - and we define end so
208:27 - session of user id
208:30 - if that is not nil okay if that is not
208:34 - nil then we define current underscore
208:37 - user
208:38 - is equal to correct current control user
208:41 - or
208:41 - user dot find
208:46 - blue dot find session
208:50 - or user id else
208:54 - current underscore user is equal to name
208:57 - right
208:58 - so this is we do it so that exists if
209:02 - session id
209:02 - is exist then we find the current user
209:05 - then either then we do
209:07 - put that current user to net okay
209:10 - so if if
209:14 - in this page we say
209:18 - if and underscore user
209:24 - you can underscore user then we say
209:28 - and we say
209:33 - hello hello
209:38 - your current underscore dot email
209:41 - if it exists then we say this okay
209:47 - else else
209:51 - we need to show user that they are
209:54 - like okay let's first check this
209:58 - we are in session controller then we a
210:00 - transaction is able to use a dot id and
210:02 - then we say
210:03 - render
210:07 - layouts
210:10 - slash landing
210:14 - okay okay uh one thing we all
210:18 - uh like missed in this is uh
210:22 - like uh that is layouts on the landing
210:24 - so one thing i would like to tell you
210:26 - we can also render different layouts
210:30 - uh from here by defining the prefix so
210:33 - if you don't define the prefix then it
210:35 - assumes and we are defining the
210:37 - sessions then it assumes we are in
210:38 - sessions and users and users
210:40 - so if we can define the process for this
210:43 - so let's
210:44 - run the application sign
210:47 - in okay says
210:51 - unexpected error okay yeah because this
210:53 - is uh
210:54 - ruby so yes
210:58 - else and when we end this block like
211:01 - this
211:03 - fine so let's make
211:06 - again
211:09 - let's log in this and let's create so
211:12 - it's it
211:13 - hang landing page to check login or
211:15 - logout hello dummy directmail.com we are
211:17 - perfectly fine
211:19 - so now we on this page we need to create
211:22 - an option to block out if it's if it's
211:25 - if it is signed in okay a hrf
211:33 - and we say
211:39 - log out
211:43 - and for that i told you for
211:46 - if you want to check the confirm the
211:48 - path so what you can do
211:50 - you can simply type this log out and it
211:52 - says logo underscore path
211:55 - perfectly fine so this is logger
211:59 - underscore path and
212:00 - here we go and it says so let's again
212:05 - move to this page okay
212:08 - uh let's do move to sign in okay let's
212:12 - create a different route for this
212:13 - okay let's give it to this
212:18 - it slash
212:22 - blending and let's
212:26 - do two uh
212:30 - users hash landing we will create this
212:35 - and so let's
212:38 - create this as
212:41 - landing okay so let's move to user
212:45 - controller let's create this because
212:47 - we don't need to sign this every time to
212:49 - get into this method
212:51 - define landing and then
212:54 - simply render layouts
212:59 - a out
213:02 - dash landing okay
213:07 - and yeah
213:10 - so yeah yeah that is an
213:13 - error because we need to define this in
213:16 - codes
213:19 - so like that is an error now let's uh
213:22 - check for the landing round
213:24 - yeah this is slash landing so let's move
213:27 - to this route
213:30 - so yeah it still stays uh when we move
213:33 - to the landing page to check login our
213:34 - hello address let's move to logout
213:37 - so when we move to hit the logo button
213:39 - so
213:40 - we need to destroy the session and we
213:42 - already do that
213:44 - nothing and then we say render
213:47 - thing or
213:51 - instead of doing render render again
213:52 - again we can simply use
213:55 - redirect 2 because we have already
213:57 - created the route for that
213:58 - yeah it's perfectly fine we can do
214:00 - redirect
214:02 - redirect underscore to
214:08 - log code underscore
214:11 - i hope this is fine here
214:15 - yeah fine so let's repair this
214:19 - click on logout and here it hits the
214:22 - button
214:23 - and there is a logo because some seems
214:25 - an error with this
214:30 - okay three zero to four
214:36 - okay seem some error with this
214:45 - so let me check the route for this
214:55 - okay i did a mistake uh i had to render
214:58 - to landing paths sorry
215:00 - this was a mistake yeah
215:05 - so we say redirect
215:08 - to landing in
215:23 - move description landing page
215:28 - okay to connect it something seems wrong
215:32 - with the server now it's fine
215:39 - so landing page to check login and log
215:41 - out yeah it is not logged in because
215:43 - last at last you had created join the
215:45 - session so let's create
215:46 - a user from uh like that you assign it
215:50 - www.com and let's sign in with the user
215:55 - it says hello android developer let's do
215:57 - log out and we are logged out
215:59 - so perfectly fine when we are logged out
216:01 - we don't see anything okay
216:02 - so so for that we can create a message
216:06 - if this is the current user then we do
216:08 - this
216:08 - else as
216:12 - we can show
216:17 - else we can show the one we had on the
216:21 - page of the users this one
216:24 - uh hrx i click here to login so this was
216:28 - a better approach to check
216:29 - and yeah it says ending quick click here
216:32 - to log in when we do
216:34 - log in let's login and this one two
216:37 - three four five six
216:38 - log in and it's a hello data and we sell
216:40 - all we go
216:41 - so oh we are out of the session so this
216:44 - is how it worked
216:46 - so thank you everyone for watching this
216:47 - tutorial uh let's do
216:49 - a quick recap what we did so we had a
216:52 - signup page
216:53 - where we had signed let's get a new user
216:55 - new user
216:57 - uh mail.com
217:01 - let's create a password one two three
217:03 - four five six again
217:05 - keep the password same so this email is
217:08 - already taken
217:09 - yeah okay let's take user hundred
217:14 - one two three four five six
217:17 - your account is created so it's
217:19 - perfectly fine
217:20 - uh click here to log in let's create a
217:23 - user 100 let's login with this
217:30 - so landing page to check blogging yeah
217:32 - hello user at the 100ml.com let's click
217:34 - on lockout
217:35 - and we are out of this session click
217:38 - here to log in let's log in back
217:39 - so everything works perfectly fine so
217:42 - thank you everyone for watching this
217:43 - video
217:43 - so if you have like uh
217:46 - we can extend this to application for to
217:49 - some objective so i'll try to uh
217:51 - object this authentication so that you
217:53 - have a better word
217:54 - thank you everyone bye take care