00:00 - hey guys welcome to programming
00:01 - knowledge in the previous video we saw
00:03 - how to create an independent function
00:05 - right so this ad function right here
00:07 - this is an independent function what it
00:09 - means is it is not going to take any
00:11 - inputs and it is not going to return you
00:13 - anything it just performs the task which
00:16 - has to do and call it that's it so in
00:19 - this video we'll learn how to create
00:21 - dependent functions most of the time
00:24 - we'll be using dependent functions we
00:26 - will be using these kinds of functions
00:27 - also but these are very rare we will
00:31 - mostly use dependent functions we just
00:34 - pass it some parameters we ask the
00:36 - function to do something and then get
00:38 - back the value which we intended to so
00:41 - how to make this particular function
00:44 - dependent that is I need to pass in some
00:46 - parameters over here let's say 2 comma 3
00:49 - and then it should only add these two
00:51 - numbers it should not ask the user to
00:54 - enter two numbers and then only work on
00:57 - those two numbers I want to work on
01:00 - these two numbers which I passed in as
01:02 - parameters so how do we get these two
01:04 - numbers inside this function so the way
01:07 - we do that is we define the parameters
01:09 - the baby different parameters is we
01:11 - first put the data type of the parameter
01:13 - and then the name right so in this case
01:17 - the data type would be int and then the
01:20 - name of the parameter let's just say num
01:23 - 1 right and then we have another integer
01:26 - so if you do like this like you declare
01:29 - variables sometimes you do this right so
01:32 - int a comma B well this is going to work
01:35 - only if you are declaring variables here
01:37 - you are not declaring variables here you
01:39 - are specifying the parameters right so
01:41 - while specifying the parameters it is
01:43 - compulsory that every parameter be
01:46 - mentioned along with its data type so
01:48 - you need to mention the data type of the
01:50 - second parameter also even though both
01:52 - the parameters belong to the same data
01:55 - type
01:55 - you cannot omit the data type of the
01:57 - second because it's just a continuation
01:59 - of the variable declaration now what we
02:02 - are going to do this we got the two
02:04 - numbers inside this and we don't need
02:06 - any of this right I'm just going to take
02:09 - out these things and then here instead
02:11 - of a plus B you those two numbers are
02:13 - now
02:13 - - so you take number one over here and
02:17 - then number two over here and then it is
02:19 - just going to print out the Sun so let
02:21 - us execute this and see so 2 plus 3 is 5
02:24 - so we should be getting the sum is 5 I
02:26 - saw output so here you can see the Sun
02:29 - is 5 right so another thing you can do
02:33 - is if you want to save this particular
02:36 - value that is if I want to add these two
02:39 - numbers and then keep the result there
02:42 - is no way to keep the result right well
02:43 - C contains the result of num1 plus num2
02:46 - but see is not accessible outside this
02:49 - function right add is one function and
02:52 - then main is another function well if
02:54 - you want to access this particular
02:55 - variable you need to make it global that
02:58 - is you want to put it outside all the
03:01 - functions and then access it if you
03:04 - remove this then now C is accessible
03:07 - over here you could just say C out C
03:08 - over here and then if you execute it
03:11 - here you can see it has printed the
03:14 - value of C but what happens is we don't
03:18 - prefer this kind of global variables the
03:21 - reason is third when whenever the
03:24 - program is getting executed everything
03:26 - is inside the RAM that is the random
03:28 - access memory so once variables are out
03:32 - of scope they are automatically deleted
03:34 - and then again created whenever their
03:36 - time comes you need to free up the
03:38 - memory so that other tasks can go on
03:40 - right
03:40 - you cannot just keep this particular
03:42 - variable in the memory all the time so
03:45 - if it is compulsory that you need to
03:47 - keep it then you can but if there are
03:50 - other ways to do that without occupying
03:52 - that particular memory you need not do
03:54 - this because it takes up memory it so
03:57 - the way we do that is we return this
04:00 - particular value back to the calling
04:02 - function so what is return how do you
04:05 - return something to the calling function
04:07 - well the way you do that is you just
04:10 - need to put the return statement over
04:12 - here so you just say it returns C now
04:15 - instead of creating a global variable
04:17 - like I did before you don't have to
04:20 - actually create something and put it in
04:23 - the memory once your executed it you can
04:25 - just return that particular value of
04:27 - here so that is the main objective of
04:29 - this odd function rate you need to take
04:32 - into numbers add it and you're going to
04:34 - get one integer you need to just return
04:36 - it so if I say something like a equal to
04:39 - or let's say some but to add two comma
04:43 - three what they expect is these two
04:46 - numbers are added and the sum is coming
04:48 - to this particular variable that is sum
04:50 - right so here if I return it I will be
04:54 - getting a problem so if I now execute it
04:56 - you will see that I have got a problem
04:59 - it says okay see it's not that's because
05:01 - I've written over here
05:03 - now let's again run it so here you can
05:05 - see that it says return statement with a
05:08 - value in a function containing void
05:10 - right returning void so as I told you
05:13 - before if you are not retaining anything
05:15 - then only you need to use the void
05:16 - keyword or else you have to specify the
05:19 - data type what you're going to return so
05:21 - since I am retaining something I need to
05:23 - specify the data type and in my case
05:25 - it's going to be in it because if you
05:27 - had two integers is going to be integer
05:29 - right so I am just going to return that
05:30 - particular integer and then here I need
05:33 - to capture that value so let's say in
05:36 - some equal to 2 comma 3 and then now I
05:39 - can do this thing inside the main
05:43 - function also so here I will just paste
05:46 - it and Sumner's in my case Sun right now
05:51 - if I executed will be getting the output
05:53 - as the sum misfire so another thing is
05:57 - what if we want to make one of the
06:00 - variable optional so let's say I have
06:03 - another field also let's say int number
06:05 - 3 this is another parameter so here if I
06:09 - just omit that parameter I will be
06:10 - getting an error so here you can see
06:12 - there are too few arguments to this
06:13 - function that is because I have
06:15 - specified three arguments and then here
06:17 - I am giving only two arguments so what
06:21 - you need to do is if you are having an
06:23 - optional variable you can just put a
06:26 - default value over there so for addition
06:29 - if the default value is 0 you add those
06:32 - three numbers there's no there's not
06:34 - going to be any difference right so if
06:35 - we just put 0 over here and then I don't
06:38 - pass anything so it will just blows
06:40 - Express - so let me just add the number
06:43 - over here so so number three also so I'm
06:46 - just going to store C equal to number
06:48 - one plus nine coolest monthly and then
06:49 - I'm going to written C so now if I
06:53 - execute it you'll be getting an error
06:55 - and you will be getting this imperfectly
06:56 - and if I want to use that variable I
06:59 - don't have to do anything I just pass
07:01 - the number and I will be getting the
07:02 - output so nine eight is seventeen so
07:05 - here you can this sum is seventeen so
07:08 - that's how you use default parameters
07:10 - and regarding the prototype so what is a
07:13 - prototype it is just mentioning the
07:15 - compiler that I do have a function like
07:17 - that in case you did not write the
07:19 - functions definition before calling it
07:22 - so whatever - I have already called this
07:25 - function over here so if I write the
07:27 - definition after calling it I need to
07:30 - specify it early it says that this
07:32 - particular function does not exist so to
07:35 - that the for the prototype I said - only
07:38 - you can try to copy-paste this thing so
07:41 - ctrl-c and ctrl-v and then put a
07:44 - semicolon this is going to work but what
07:47 - you can do is in case of parameterize
07:49 - function you don't have to tighten
07:50 - variable names also so you can just skip
07:54 - these things well it's going to work
07:55 - with the variable names also but you
07:58 - don't have to put them and you should
08:00 - not pull equal values over here so that
08:02 - is there in the function definition in
08:05 - the prototype you just need to define
08:06 - the structure of the function and you
08:08 - don't have to put the default values and
08:11 - all you just need to put what the
08:12 - function is and what it's going to take
08:14 - the now if I execute it I won't be
08:16 - getting that any error and I will be
08:19 - getting the output so that's how you use
08:21 - dependent functions in c++ in the next
08:24 - video we will talk about recursion and
08:26 - different types of passing arguments so
08:29 - here I just passed some numbers right so
08:31 - these are direct numbers so what if I
08:34 - want to pass some variables also so
08:37 - let's say equal to - well in this
08:39 - particular case you can just pass it
08:41 - over here it is going to work
08:43 - well it's int a equal to 2 it is going
08:47 - to work but actually there is a meaning
08:49 - for passing like this there are two
08:51 - methods of passing variables that is
08:53 - passing by
08:54 - I knew and passing by reference we will
08:55 - be talking about all those things in the
08:57 - next video till then happy coding