00:01 - hey everyone today we're gonna do
00:03 - something different we would use classes
00:05 - in order to make a pie game program
00:07 - rather a game so i would try to build a
00:10 - collision game
00:11 - i would have this man and if he hits the
00:13 - bricks falling from above the game is
00:15 - over simple okay so in pi game we have a
00:18 - sprite module for working with classes
00:21 - sprites are objects if you don't have
00:23 - much idea about classes and objects in
00:25 - pi game basically they are a convenient
00:28 - way of grouping data and code into a
00:30 - single entity sprite module is a very
00:32 - good way of working with classes in
00:34 - python
00:36 - so for the algorithm what i would do is
00:38 - i would first have a man class that
00:40 - would be of the sprite type
00:42 - and
00:43 - i would also have a brick class
00:45 - now both of them must have the init
00:47 - function where i'd load these images
00:50 - and get their rectangular surfaces then
00:53 - we would have the move function in both
00:55 - the classes we would move the man by
00:57 - giving key inputs from
00:59 - arrow keys
01:00 - and the movement of bricks would be
01:02 - programmed and the initial position of
01:04 - the bricks would be randomly picked by
01:06 - the random module
01:09 - now using the sprite module i would
01:12 - check in the game loop if there is a
01:14 - collision between these two image
01:15 - objects
01:17 - if there is i would display the text
01:19 - kmover okay now let's start writing the
01:21 - code for it
01:23 - so let me write the basic code quickly
01:26 - i'll import pi game
01:29 - then i'll initialize it i'll write pi
01:31 - game dot in it
01:34 - then i'll set up my screen
01:37 - right screen
01:39 - spy game
01:41 - dot display
01:42 - dot set mode
01:44 - and the screen size is 500 comma 500
01:49 - then i'll set the caption i'll write by
01:51 - game dot display
01:53 - not set caption and the caption let it
01:55 - be collision game
02:00 - okay
02:01 - now for the while loop i'll write while
02:03 - true
02:06 - for events in bygame.event.get
02:11 - event.get
02:13 - if events.type
02:18 - equals
02:20 - pygame.quit
02:22 - i'll call the quit function by pie game
02:25 - i'll fill my screen with some color i'll
02:27 - write screen dot fill
02:30 - white
02:33 - and
02:33 - i'll update this
02:36 - let me use the flip
02:37 - uh function
02:40 - i'll write pi
02:41 - game.display.flip and i'll
02:44 - yeah that's the basic code
02:47 - now let's write the main code let's get
02:49 - to the main functions of
02:51 - our game
02:53 - now since i said i'd be working with
02:55 - random module because i need the bricks
02:57 - to be falling from randomly falling from
03:00 - anywhere so i'll import random module 2
03:03 - i'll write import random
03:07 - okay
03:08 - then
03:10 - i'll have my clock object
03:12 - i'll write clock equals by
03:14 - game.time.clock
03:17 - that's my clock object to set up the
03:18 - frame rate later
03:21 - and
03:23 - i would need to set up the speed
03:24 - variable
03:25 - for the movement of bricks
03:30 - this is just the initialization we'll
03:32 - use this later you'll get an idea why we
03:34 - have initialized it here
03:37 - and i also need to display that
03:40 - text game over so i set up the font i'll
03:43 - write font equals
03:44 - pi
03:48 - and that will be georgia and 60 as the
03:50 - font size
03:55 - cool so i have these variables
03:57 - initialized
03:59 - so let's get to the two classes i talked
04:01 - about the brick and the man class
04:04 - so let me define the brick class first
04:06 - i'll write class brick so that's how you
04:10 - define a class and by python
04:13 - and
04:14 - since i want to inherit the sprite class
04:17 - i'll write pi game dot sprite which is
04:19 - the module dot sprite which is the class
04:22 - okay
04:24 - sprite is the class in this sprite
04:26 - module okay so it might be confusing in
04:29 - the beginning but just try to
04:32 - think and understand you'll get a hold
04:34 - of it okay
04:35 - now
04:37 - i'll have this init function i'll define
04:40 - in it i'll write def
04:43 - underscore underscore init underscore
04:46 - underscore
04:47 - and self
04:50 - okay
04:51 - so i'll inherit this sprite class so
04:53 - i'll write super dot init
04:56 - super dot in it
04:58 - it's away in python how we inherit the
05:01 - classes
05:03 - base classes okay so now i'll load my
05:06 - image i'll write self.image equals spy
05:09 - game dot image dot load
05:12 - you should have a little basic idea of
05:15 - classes
05:16 - in python otherwise it might
05:19 - be too much for you to handle for now
05:21 - because we are already working with pie
05:23 - game that is new for you
05:25 - and then we are
05:26 - again having a new thing that is classes
05:29 - so you might not get
05:31 - comfortable with it
05:33 - so please try to understand the classes
05:35 - first and then
05:37 - get to the pi
05:38 - game code
05:40 - fine so i'll write self dot image equal
05:43 - spy game dot image dot load
05:46 - so my image is in collision folder it's
05:49 - just how we
05:50 - displayed an image in pye game earlier
05:54 - just the difference is that right now we
05:56 - are doing this in a function
05:58 - inside a class
05:59 - okay
06:01 - then i'll
06:02 - transform i'll scale this image of mine
06:05 - i'll write self.image equals
06:08 - pygame.transform.scale
06:11 - self image what i need to transform what
06:14 - i need to scale is the self image
06:17 - and i need to scale it to size 40 comma
06:19 - 40.
06:21 - okay then i need to get the rectangle so
06:24 - i'll write self.rect these are just
06:26 - variables but of brick class
06:28 - so that's how you write it i'll write
06:30 - self.rect equals
06:33 - get red i got the rectangular surface
06:37 - and i need to define the center
06:39 - so my center would be randomly picked
06:42 - for these
06:43 - bricks falling from above
06:46 - so i've used random dot round end
06:49 - 40 comma 500 minus 40 i've kept margin
06:52 - of 40 either side just so
06:56 - the boundaries and uh the bricks don't
06:58 - collide
06:59 - they don't overlap okay and
07:03 - yeah
07:04 - then i'll define the move function
07:06 - for the movement of
07:08 - the bricks
07:10 - how they have a motion right they are
07:11 - falling from above so i'll do it i'll
07:14 - write self.reg self.trek.move
07:16 - in place
07:18 - and the arguments are 0 comma speed so
07:20 - my speed was 5
07:22 - and i'm just giving a speed in the y
07:25 - direction because i want it to fall from
07:27 - above
07:28 - and there should not be any movement
07:30 - along the x-axis the brick is just
07:31 - falling from above directly
07:34 - towards the ground and move in place
07:37 - what this move in place does is from
07:40 - an object's coordinates it moves it with
07:43 - respect to that position uh
07:46 - what the speed we have mentioned okay so
07:48 - like if the coordinates right now are
07:50 - 400 comma 400
07:51 - and i've mentioned zero comma speed as
07:54 - the move in place arguments
07:57 - after this function is called
08:00 - the final coordinates would be 400 comma
08:02 - 405 okay i hope you get what i'm trying
08:05 - to say
08:06 - and i'll put in some conditions that
08:09 - once the brick has traveled the entire
08:12 - screen and not hit
08:15 - the man okay then what should what
08:18 - should happen i'll write if
08:20 - self.shrek.top
08:22 - is greater than 500.
08:24 - now i just quickly wanted to show you
08:26 - what this wrecked top and dot center
08:29 - means
08:30 - which coordinate of the entire rectangle
08:32 - i'm talking about you can see it in this
08:36 - picture
08:38 - so i hope you get
08:40 - the idea what is dot top which
08:43 - coordinate i am talking about and what
08:44 - is dot center there are two different
08:46 - coordinates of the rectangle okay
08:48 - now if it is so
08:51 - if the rectangle stop coordinate is
08:54 - greater than 500 that is it is out of
08:55 - the screen now now i should reallocate
08:58 - this top coordinate to zero and the
09:01 - center should be randomly picked again
09:03 - okay
09:04 - again i have kept a margin of 30 and 100
09:07 - over here
09:08 - so that things don't overlap okay
09:11 - cool now i'll have my man class again
09:13 - i'll write class man
09:16 - very similar to the above class
09:19 - and pi game dot sprite dot sprite
09:23 - okay then i'll have my edit function
09:24 - again
09:25 - i'll write self in the argument
09:28 - with the super keyword i'll
09:30 - inherit the sprite
09:32 - based class
09:34 - and again load the images but i'll load
09:36 - that image of scared man now
09:39 - it is in the collision folder so
09:40 - accordingly i've mentioned the path
09:43 - then i'll scale this
09:45 - i'll write ikm.transform.scale
09:49 - self image
09:51 - 100 comma 150 okay
09:54 - and
09:55 - i'll write self dot rect equals self dot
09:58 - image dot get check to get the
10:00 - rectangular surface and define its
10:02 - center
10:03 - it's just the initial coordinates of the
10:06 - image that i've loaded of the scared man
10:09 - let it be 200 comma 420 okay
10:12 - and then i'll define the move function
10:14 - how my how the man moves okay so since
10:19 - i'll be taking inputs from keys the
10:21 - arrow keys
10:22 - from the keyboard i'll again write keys
10:24 - equals to pycam.key.getrest
10:27 - so i hope you remember this was a
10:29 - sequence this is a boolean sequence that
10:32 - contain the state of all the keys on the
10:35 - keyboard if it is true then that key is
10:38 - being pressed now i'll check if keys by
10:41 - game dot k underscore left
10:44 - then i'll write self.track dot move in
10:47 - place
10:48 - minus five comma zero so i want to move
10:50 - it towards the left okay so i'm
10:52 - subtracting we discussed this earlier in
10:55 - earlier programs that if we want to move
10:58 - left will decrease it decrease its
11:00 - coordinates okay
11:02 - so i'll decrease it by five and if keys
11:05 - by game dot k underscore right
11:09 - self.trek dot move
11:11 - ip
11:12 - five comma see okay so if it is if i if
11:16 - i press the right key if the user has
11:18 - pressed the right key
11:20 - the man will move towards right with
11:22 - five by five units okay
11:25 - now i'll declare objects of this man and
11:27 - brick class m1 i'll write m1 equals man
11:32 - and b1 is equals to brick so this is how
11:34 - we declare objects in python
11:37 - of a class so these are my two objects
11:40 - okay and now i'll have a variable bricks
11:44 - i'll write equals pi game dot sprite dot
11:46 - crop so
11:48 - i'll declare this bricks to be a group
11:50 - okay so what a group is it's a
11:53 - sprite module functionality it's a
11:56 - container class to hold and manage
11:58 - multiple sprite objects okay
12:01 - now to this group i'll add b1 okay so
12:06 - this is a brick scrub okay and to that
12:09 - i've added p1 that object that brick
12:12 - object okay
12:14 - now i'll have another class in which
12:15 - i'll put everything all the objects that
12:18 - i've declared okay
12:20 - now all sprites equals
12:22 - pygame.sprite.group again this is
12:25 - another container class okay and i'll
12:27 - add m1 and b1
12:30 - to this group
12:32 - you'll get it in a minute why i have
12:34 - declared these groups okay bricks and
12:36 - all sprites
12:38 - now let's get to the vile true loop
12:42 - now for entity
12:44 - in all sprites
12:46 - screen dot blit
12:48 - entity dot image
12:50 - comma edit dot rect
12:53 - entity dot move okay what i have done is
12:55 - i'll traverse all that is there in the
12:58 - all sprites group that is why i've
13:00 - declared all sprites
13:02 - variable because i need to
13:04 - put each of those objects on the screen
13:07 - so that is how i've done it i'll write
13:10 - screen dot blit
13:11 - entity dot image ndt.rect so i've got
13:14 - that image on that rectangular position
13:17 - on the screen okay
13:18 - now ntd.move i've called on to that move
13:21 - function
13:22 - in the respective classes
13:24 - and
13:25 - according to the move function my
13:27 - objects would move my images would move
13:30 - and i'll also now is the main part i'll
13:33 - check if that sprite objects collide
13:36 - with any of
13:39 - the other object okay so i'll write if
13:42 - pi game dot sprite because it is a
13:44 - sprite module
13:46 - function
13:47 - dot sprite collide any
13:50 - it's a simple test if a sprite
13:52 - intersects anything in a group okay
13:55 - so m1 comma bricks okay m1 is the man we
14:00 - have only one man but we'll have a
14:02 - number of bricks okay
14:04 - and
14:05 - then if it is so if this returns true
14:09 - then i'll render
14:10 - the font that i declared above i'll
14:13 - write text equals spawn.trender
14:16 - what is my message it is game over i
14:19 - want anti-alias to be true
14:22 - and the color
14:23 - let it be orange
14:26 - fine
14:27 - then i'll get this on the rectangle so
14:30 - text direct equals text dot get rect
14:33 - center
14:34 - that will be 500 double slots to
14:38 - 500
14:40 - okay
14:41 - so i got this text at the center of the
14:43 - screen
14:44 - and i'll use split again
14:47 - to get this text on the rectangle
14:50 - i'll use dot flip function so that i can
14:54 - update this
14:55 - and
14:56 - just so i can visualize this text i can
14:59 - see this text that the game is over
15:01 - i'll use this time module i'll write
15:04 - time dot sleep
15:06 - for two seconds so that i can see that
15:09 - the game is over and then i'll quit okay
15:12 - otherwise you'll just see the game over
15:14 - text is blinking and going away and the
15:17 - screen goes away okay that wouldn't look
15:20 - good
15:20 - so i will also need to import time
15:22 - module
15:24 - i'll write import time
15:28 - yeah that's it
15:30 - so i'll also need to set up the frame
15:32 - rates i'll write clock.tech
15:35 - and 4d let the frame rate be 40 okay
15:39 - now let's play this game and
15:42 - let's see if everything works properly
15:45 - as we have defined
15:53 - now when i run this i can actually see
15:56 - the bricks falling from above
15:58 - i can move the man
16:00 - using the left and right arrow keys
16:04 - i guess the speed is a little slow
16:06 - so
16:07 - let me change the frame rate to 60 so
16:09 - that the game becomes a little fun to
16:11 - play and a little complex
16:14 - so the bricks are now falling faster
16:17 - and
16:19 - when the man and the brick collides the
16:22 - game is over i have this text
16:25 - and
16:26 - the screen goes away automatically after
16:28 - two seconds cool
16:30 - so this was it for this program
16:33 - and you can also think about how you'd
16:35 - gradually increase the speed
16:38 - so you can think of levels
16:40 - for that you might need to declare some
16:42 - user events
16:44 - please think about it please look for
16:46 - what you can do
16:48 - and this was it for the program thank
16:50 - you