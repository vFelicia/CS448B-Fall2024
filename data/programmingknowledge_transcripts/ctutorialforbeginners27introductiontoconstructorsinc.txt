00:00 - hello guys welcome once again in this
00:02 - video I'm going to show you how we can
00:04 - use Constructor in C++ and what is a
00:08 - Constructor so first of all what is a
00:11 - Constructor a Constructor is a special
00:14 - member function of a class that is
00:17 - created when you create the object of
00:21 - the class and the name of the
00:24 - Constructor is Constructor is always
00:28 - same as the name name of the class so
00:31 - that is how you can recognize
00:33 - Constructor so let's see how we can
00:36 - declare Constructor in classes but first
00:40 - of all one more important information
00:43 - even if you don't declare a Constructor
00:47 - C++ will create a Constructor for you
00:51 - for a class
00:53 - automatically
00:56 - so we have written this class there is a
00:59 - construct for this class which is
01:01 - automatically created even though we
01:03 - have not written any Constructor for
01:06 - this class now let's see how we can
01:09 - declare Constructor for a class so I
01:13 - have shown I have already told you
01:15 - Constructor has the same name as your
01:18 - class name so I will just copy this and
01:21 - in my
01:22 - public access specifier I will just
01:26 - write this and I will pass no parameter
01:30 - inside this and I will give these
01:32 - parenthesis so this is called a
01:35 - Constructor okay so it has the same name
01:38 - as class and it is always initialized
01:41 - when you create an object so let's
01:44 - verify if it's created or or it's
01:48 - initialized when we create the object or
01:51 - not so I will write some message I will
01:55 - show some
01:57 - message so for example
02:00 - I will
02:01 - write V or U are
02:10 - in Constructor okay and I will write and
02:16 - line
02:18 - here by the way if you don't
02:22 - know how
02:24 - or how this class works I have shown you
02:28 - the explanation of this class class book
02:30 - class in the last video so if you want
02:33 - don't know how to declare a class or how
02:37 - what are these functions in this class I
02:40 - have explained uh these things in the
02:42 - last two videos okay so what we have
02:45 - done is we have declared a Constructor
02:47 - and we have we are showing some value
02:52 - inside our Constructor or we are showing
02:54 - some message inside our Constructor
02:57 - right now
03:00 - uh let's create an object of a class so
03:04 - you already know how to create an object
03:06 - of a class you just need the name of
03:09 - your class which is book books and give
03:14 - the variable name or object name which
03:17 - is for example book one okay and even
03:22 - though we are not calling any
03:24 - variable we are just creating the object
03:27 - and I already told you that
03:30 - Constructor is called whenever object is
03:33 - created right so even though we are not
03:36 - writing anything let's see what
03:40 - happens I will just compile my
03:45 - program now I will run my program and
03:49 - you see here it shows you are in
03:52 - Constructor that means what I'm saying
03:55 - is true right so a Constructor is called
03:59 - whenever you
04:00 - declare the object of a class and it is
04:04 - created
04:05 - automatically now we don't really use
04:09 - Constructor to show some messages right
04:12 - uh it should have some uh specific cues
04:15 - so generally we use Constructor to
04:18 - initialize the values of the variable in
04:22 - the class right so for
04:25 - example what you want to do is you want
04:28 - to initialize the value of uh
04:32 - this variable called name okay we
04:36 - already created set name and get name
04:38 - functions and we need to initialize this
04:43 - name with some value or otherwise for
04:46 - example if somebody writes see
04:51 - out this calls this book
04:54 - one. get
04:58 - name what will
05:03 - happen because we haven't initialized
05:06 - any value to the name and we directly we
05:10 - are calling this uh get name what
05:14 - happens here
05:17 - is I will just close this and I will
05:20 - compile this and see let's see what
05:22 - happens you see here it's showing some
05:26 - error
05:27 - because we haven't initialized any
05:32 - values and this function does not
05:35 - matches this function let's just change
05:38 - this and now let's compile the program
05:42 - once
05:45 - again and let's run the program and you
05:48 - see here you will not be able to see any
05:51 - values here because we haven't assigned
05:54 - any values to our string variable called
05:58 - name so why do we use Constructor we
06:02 - generally use Constructor to initialize
06:04 - some value to the Constructor and how we
06:07 - can initialize the
06:09 - name value or initialize this variable
06:14 - name you can just pass a parameter
06:17 - called string because this variable is a
06:21 - string right so you can just
06:24 - pass string for example X and what you
06:28 - can do is you can call the set name
06:31 - function
06:32 - here set
06:34 - name is equal
06:36 - to X for example okay so whenever you
06:42 - create an object it will initialize and
06:45 - you have to give some name to your
06:48 - object and that's that object will go
06:50 - here and then that object that function
06:55 - will assign this value to name and
06:58 - indirectly you are assigning the value
07:00 - to name variable okay so we have
07:04 - initialized Name by initializing this
07:08 - Constructor now whenever you pass some
07:12 - argument in the Constructor like this
07:15 - for ex we have initialized our
07:18 - Constructor with the string variable
07:21 - then you need to uh initialize your
07:24 - object with an argument which is string
07:27 - also so
07:29 - I will G give the name of the
07:33 - book
07:37 - [Music]
07:39 - C++ tutorial for example and now when we
07:44 - run the
07:46 - program compile it and run run it you
07:50 - can see uh this book one. get name gives
07:54 - you the name of the book right and what
07:58 - we have done we have simply initialized
08:01 - this value with our Constructor like
08:04 - this
08:05 - okay so once again why do we use
08:10 - Constructor we do use Constructor to
08:12 - initialize value and when con when
08:16 - Constructor is uh initialized or when
08:19 - Constructor is created whenever you
08:21 - create the object of the function and if
08:24 - you pass argument to the Constructor you
08:27 - need to pass the same data type argument
08:30 - to the Constructor to initialize it like
08:33 - this okay now one more uh little concept
08:38 - I want to show you is for
08:41 - example you want to create
08:44 - a different object for example book two
08:49 - object you want to create a book two
08:51 - object you have created already book one
08:54 - object so we create we will create book
08:57 - two object and we initialize this with
09:02 - some other name so book name will be
09:05 - this time for example
09:10 - Java
09:12 - tutorials okay and once again you call
09:17 - this book 2.get name so what do you
09:22 - think what will happen because this is a
09:24 - different object and this is a different
09:26 - object so one might think that whenever
09:30 - you create a second object of a class it
09:33 - will overwrite the name you have given
09:36 - to the first object but this doesn't
09:40 - happen every object you create it has
09:45 - different or its own set of name set of
09:49 - function so this object will have
09:54 - independent this variable name this
09:57 - function get name and this function set
10:00 - name and this has nothing to do with
10:04 - this object this object will also has
10:06 - its own name get name and set name
10:09 - function and this object will also have
10:12 - its own name variable and get and set
10:15 - functions okay so when you compile this
10:18 - program both object will be initialized
10:22 - and they will will work fine C++
10:24 - tutorial Java tutorial and they are
10:28 - independent of each other right so it's
10:31 - just a instance of a class you are
10:34 - creating by object and they are not
10:37 - related to each other on they are not
10:40 - dependent on each other each object is
10:43 - independent of each other so I hope you
10:46 - have understood the concept of
10:48 - Constructor in C++ and I hope you have
10:51 - enjoyed this video please wait comment
10:53 - and subscribe and bye for now