00:00 - hello guys in this video I'm going to
00:02 - show you how to use functions in C++ so
00:06 - first of all why do we really use
00:10 - functions or what is the need of
00:12 - function in C++ so function is a block
00:17 - of code which executes some something
00:23 - for example so ideally a function should
00:26 - perform a specific task which is
00:29 - assigned to it and normally when you
00:34 - write your code
00:35 - it's made of too many numbers of line
00:39 - for example thousands and thousands of
00:41 - line and when you when the other user
00:45 - tried to read your program it becomes
00:52 - really overwhelming to understand the
00:55 - program written by other person and the
00:58 - function is used to reduce the size of
01:02 - the code so that it makes your code or
01:09 - your program understandable so what is
01:14 - the convention generally is whatever
01:17 - value or whatever code is with repeating
01:21 - more than once in your program just wrap
01:26 - it in the function so whatever code or
01:29 - whatever piece of code is happening or
01:32 - you need again and again wrap it in the
01:35 - function now let's see how we can
01:38 - declare a function so I already told you
01:42 - in the first of two videos that this
01:46 - main is also a function right but this
01:49 - is a main function and we can define
01:52 - user-defined function so what we need to
01:55 - do is you can either go just above this
01:59 - main function and declare your function
02:03 - here so what you can do is you can give
02:06 - a function definition so when you define
02:09 - a function you need to give first of all
02:12 - the return type
02:13 - so for example right now I'm not
02:15 - returning anything so I give void the
02:18 - void means are not returning anything
02:20 - okay so every function whatever you make
02:24 - it returns anything like this mean its
02:27 - returning zero which is an int that's
02:29 - why I have written in India so on the
02:33 - right now I'm making a function which
02:35 - which is returning nothing and then
02:39 - comes the name of the function so for
02:42 - example I say my first function and then
02:51 - comes these two parentheses and then
02:54 - whatever code you want to write that
02:56 - comes in these two curly braces okay so
03:01 - this is the basic declaration of
03:05 - function a return type which is void
03:08 - right now so that we are not returning
03:10 - anything the name of the function curly
03:13 - braces and these not this curly braces
03:16 - but these are the parentheses and these
03:18 - are the curly braces okay and whatever
03:21 - you write in side this function it will
03:26 - be executed when you use this function
03:28 - inside your main function so for example
03:32 - I want to print something
03:38 - so I will write we are in function okay
03:45 - and I will end the line okay so how you
03:51 - can call this function inside your main
03:54 - what you need to do is just copy your
03:58 - function like this you don't need to
04:02 - copy the return type just copy the
04:05 - function and paste it wherever you need
04:08 - to use your function inside main so I
04:11 - will paste it here and I will close it
04:15 - by the semicolon okay so this is
04:21 - how you can call function inside your
04:24 - main let me build the program and let me
04:28 - run it and you can see it's showing we
04:31 - are in a function and this line is in
04:36 - written in the function right and we are
04:39 - calling this function here so main
04:41 - program just goes here and it sees that
04:46 - the function here so it goes to the
04:48 - function and it sees this is the code
04:51 - which I need to execute in the function
04:54 - it prints this and then goes to this
04:57 - life point so basically I oh I told you
05:02 - that whenever you need to execute the
05:06 - similar kind of code again and again you
05:09 - can use function right so for example I
05:12 - can use this function multiple times for
05:16 - example four times then my message will
05:20 - be printed four times and I don't need
05:23 - to write the code again and again right
05:26 - this is one line you can add multiple
05:29 - line in this function and you just need
05:31 - to call your function and these line
05:33 - will be executed whenever you call a
05:35 - function I will build my program and run
05:38 - it and you can see it's executed four
05:41 - times so this is the good thing about
05:44 - function whatever is repeating just wrap
05:48 - it in a function and use it now this is
05:52 - one kind of declaration of function or
05:54 - uses your function but there is other
05:59 - kind of declaration function definition
06:02 - like you use on you give up the function
06:07 - definition below this main function okay
06:11 - and then when I compile or build my
06:15 - program it will give me the error why it
06:18 - we gave me the error because your
06:21 - program executes from top to bottom so
06:24 - your program starts from here it sees
06:27 - that this line so it has to add all
06:33 - program
06:34 - things that it eats read this and it
06:38 - used to add this line and then it goes
06:41 - to Maine and it sees this but when it
06:45 - executes top to bottom it doesn't know
06:48 - that there is a function declared below
06:52 - it so you need to either declare a
06:57 - function on top of your Maine or
07:00 - otherwise what you need to do is you
07:04 - need to prototype your function okay if
07:06 - you want to use this function below main
07:09 - what you can do is you can just copy all
07:12 - your function from void to these
07:17 - parentheses just copy this and just
07:21 - paste it above and give semicolon and
07:25 - this type of declaration is called the
07:30 - prototyping of a function so now when
07:34 - the program executes and compilation is
07:37 - done it knows that right now this is
07:40 - included this should be included this
07:43 - namespace should be included and then it
07:46 - sees okay this function is put the time
07:49 - here so I need to include the
07:52 - Declaration of the function which is
07:54 - here then it comes when it comes here it
07:57 - knows that there is a function which I
08:00 - know that it's I need to execute it so
08:03 - that's why this will be executed so
08:07 - let's compile it and this time I don't
08:10 - have any error okay so in technical
08:13 - terms this is called the top coat or
08:15 - typing of the function you just declare
08:19 - or the function here and the definition
08:20 - of the function you can give below this
08:24 - okay and I run the program at once
08:27 - perfectly so in this way you can use
08:30 - functions and this is the big basic
08:33 - function there are other type of
08:36 - function which takes parameter which
08:39 - returns parameter how you can pass
08:41 - parameters in function so that in the
08:46 - main program whatever where
08:48 - you have you can pass it to the function
08:51 - so let's see how we can use it for
08:55 - example I need a function to add two
08:58 - values but whatever the user gives so
09:04 - for I will declare a function here as I
09:07 - have shown you in the last video I will
09:10 - give the return time which is void and
09:14 - then I will give the name of the
09:16 - function so I want the addition of the
09:19 - numbers so I will name my function as
09:21 - some and then these two parentheses and
09:27 - then give these curly braces and now the
09:30 - where you pass parameters in the
09:33 - function is in these two parents in
09:36 - between this parenthesis so for passing
09:40 - the parameter you need to declare only
09:43 - you need to give the data type of the
09:45 - variable you want to pass so you for
09:48 - example I need to pass or I want to pass
09:52 - integer or the numbers so I will give
09:57 - the data type and then I will give the
10:00 - name of the function so I will say your
10:03 - name of the variable this is first
10:07 - number this is the post variable and the
10:12 - second variable once again I will
10:14 - declare the data type and then second
10:22 - number okay so in this way you can pass
10:26 - two parameters inside this sum function
10:31 - the first first variable is first number
10:35 - and second variable is second number and
10:37 - the data type of both the variables are
10:40 - hint in our case this can be anything
10:44 - character or float or double or anything
10:48 - else okay now since this is a function
10:52 - to make the sum of the
10:55 - to numbers what you need to do is you
10:59 - need to print the sum right so you can
11:02 - give C out and then print the message
11:11 - that the sum of the given number numbers
11:22 - is and then what comes is the two
11:31 - numbers itself so you can just copy this
11:34 - variable here because we are adding
11:37 - these two numbers so we can write in the
11:39 - parenthesis first number plus just copy
11:45 - the second number and close the
11:48 - parentheses and then this insertion
11:51 - operator and then end line okay so what
11:57 - this function we do do you print the sum
12:00 - of the given numbers are whatever you
12:02 - give in the mean and then it will add
12:05 - these two number whatever parameter you
12:08 - pass in the function first number and
12:10 - second number and it will add this two
12:13 - parameter and printed now in order to
12:16 - use this function inside your main
12:21 - function just need to call the name of
12:25 - the function okay and then constantly in
12:29 - the parenthesis no need to write the
12:32 - return type and then the semicolon and
12:35 - inside these parentheses I need to give
12:38 - two numbers because this function can
12:40 - take two parameters one and two which we
12:44 - have already declared this can take two
12:47 - parameter for example for 76 and the
12:51 - second parameter is 587 okay and just
12:57 - watch here I separated these two
13:00 - parameters by a comma okay so what this
13:04 - function will do is
13:06 - when it comes to Maine it sees that okay
13:10 - I have this function and I have these
13:12 - two numbers so it will pass this note
13:14 - two numbers here and then these two
13:17 - number will be passed here and then the
13:20 - program will make the sum of these and
13:22 - print this message so let's compile our
13:24 - program and run it and you can see here
13:27 - the sum of the given numbers is 1 0 6 3
13:33 - which is the sum of these two numbers
13:35 - now in order to make this program a
13:38 - little bit more interesting what you can
13:41 - do is you can declare two variables int
13:46 - a and B both variable type is integer
13:53 - and you can write C out please enter two
14:11 - numbers and then and line and then you
14:18 - can input these two numbers so cin
14:22 - insertion operator a purpose number and
14:27 - cin insertion operator B or second
14:31 - number okay and what you can do is you
14:34 - can pass a as a first parameter and B as
14:39 - a second parameter here is B okay so
14:44 - what this will do is now when you run
14:47 - the program it will ask for the first
14:49 - number and second number and whatever
14:51 - number you pass or whatever number user
14:54 - will give in the program you just pass
14:57 - these two number here and then it will
14:59 - let spill the program and run it now
15:03 - it's saying please enter two numbers so
15:06 - I will end us to number first number is
15:08 - seven four seven four and the second
15:11 - number is eight three examples and when
15:15 - I press ENTER to see there that
15:19 - this the some of the given number is 1 5
15:24 - 8 2 which is the state 2 2 which is a
15:27 - sum of these two numbers so this is how
15:30 - you can really utilize this function
15:32 - user will enter the values and it will
15:36 - be passed to the to the function and it
15:40 - will be passed here and it will go here
15:44 - both two numbers and it will be added
15:46 - and this message will be shown and in
15:49 - the last video also I have shown you
15:51 - that you can use this function at
15:55 - multiple locations so for example you
16:00 - need to add some more numbers you can
16:03 - just copy this code once again and paste
16:05 - it below and you can change this
16:08 - variable X and the y for example and in
16:12 - here also you can change it x and y and
16:15 - here also x and y okay so it will be
16:21 - executed in the same manner as above so
16:24 - if your function will be addictive uted
16:28 - two times right let's build our program
16:33 - and then let's see what happens now
16:37 - to run the program and the two numbers
16:41 - some number I will give for the first
16:43 - time and once again it is asked for
16:46 - giving me two numbers once again I will
16:48 - give two numbers it will execute the
16:51 - same functions function once again so
16:55 - whenever you need to add two numbers you
16:59 - can use this function again and again
17:01 - and you can pass any two variables
17:05 - inside this function which has to be int
17:09 - four which has to be of data type int so
17:13 - that's the beauty of function whatever
17:15 - you need whatever code you need to
17:18 - execute again and again you make it a
17:20 - function and use it again and again that
17:23 - will save your time and they that will
17:26 - save your space in the code how to
17:28 - declare and use a function which returns
17:31 - values so let's get started you by now
17:37 - you already know how to declare a
17:40 - function so this time we are going to
17:44 - make the sum of two numbers so we will
17:47 - make a function which adds two number
17:49 - and returns the sum in the main program
17:54 - so first of all we need to decide what
17:58 - we want to return in the last video if
18:01 - you noticed we were returning void but
18:04 - this time we want to return some value
18:07 - so this is not void of it this is not
18:10 - null value but this will be some values
18:14 - for example I want to return int this
18:16 - time so this is called the return value
18:20 - whatever data type you want to return
18:23 - just write in the Declaration here and
18:26 - then write the name of the function for
18:29 - example some and once again if you want
18:34 - to pass two parameter just give the
18:39 - Declaration of those two parameters here
18:41 - so int
18:45 - first number and int second number okay
18:55 - and because we are returning this time
18:59 - int here we need to return some value in
19:06 - order to execute the function okay so
19:10 - this because we are returning something
19:13 - instead of void we need to write this
19:16 - return here or whatever you want to
19:19 - return so this time what I'm going to do
19:23 - is I will take the sum of these two
19:27 - numbers and I will make some and return
19:30 - the value here so let's see what Howard
19:34 - can do it I will declare a third
19:36 - variable called make or I will say this
19:42 - is my result which is initialized as 0
19:49 - okay so that there will be no confusion
19:52 - there will be no garbage garbage value
19:55 - inside result then what I will do is I
19:58 - will write
20:00 - result equal to the first number plus
20:08 - the second number okay
20:13 - so what this is doing I have declared
20:16 - integer as a result and I'm storing the
20:22 - addition of first parameter and second
20:24 - parameter inside this result and now
20:27 - what I am going to do is because this is
20:29 - this parameter hold my result and this
20:33 - function is supposed to get int in
20:37 - return I will just return this result
20:40 - like this okay so this is basic
20:48 - definition to return the function if you
20:52 - want to return int then you need to
20:55 - declare or function or declare a
20:57 - variable return only the variable which
21:00 - is of data type in if you return here
21:04 - some decimal value it will give you
21:07 - error because this function is expecting
21:09 - integer in return right now let me let
21:13 - now let's write or let's call this
21:16 - function inside your main function so
21:20 - what I'm going to do is for example I
21:25 - want to declare one more variable
21:32 - for example multiply from mul the line
21:39 - and then what I'm going to do is I am
21:45 - going to call this function so I will
21:48 - call this function here and I will pass
21:52 - two parameters first number and second
21:55 - number so for example I pass first in
21:58 - the year 253 and second integer 256 and
22:04 - because we are returning some value here
22:07 - what I can do is I can say let's
22:13 - initialize this by 2 so my x value is
22:22 - initialized by 2 and I will say main I
22:29 - will declare one more variable int main
22:35 - result okay and this main result will
22:41 - contain the result so what I am going to
22:45 - do is I will say main result is equal to
22:56 - this multiplied variable into so for
23:02 - multiplication we use s takes a number
23:04 - and then I am going to take this
23:08 - function and paste it here so what this
23:11 - function will do is let me show you
23:14 - first of all the simple way this will be
23:17 - a little bit complex to understand for
23:19 - the first time so let me use C out
23:26 - and I will say the result is and then I
23:36 - will call this some function and I pass
23:42 - these two values here and then I will
23:46 - end line okay so what this will do is
23:52 - this will call this function add these
23:56 - two values and return the result in here
24:01 - so return the result means sum or the
24:04 - result will be printed here so for
24:08 - example I compile this program and run
24:11 - it it will show me the sum of these two
24:14 - values right so what this function is
24:19 - doing it's taking these two values
24:21 - making the sum of these two values and
24:24 - the result it's returning as an int and
24:27 - it holds the result as an integer so
24:32 - whenever you call this function it will
24:34 - return you the sum right now for example
24:39 - I want to multiply whatever it this
24:42 - function is returning to my variable
24:45 - multiplying okay so now I can use this
24:49 - multiply result is equal to multiply
24:51 - into because this function is returning
24:54 - integer I can use it as a variable okay
24:59 - so this you can think of it as an
25:02 - integer because it's returning in either
25:05 - which is the sum of these two values
25:08 - right so I can multiply it by another
25:12 - integer and I can store the product in
25:17 - the third variable called mean result
25:20 - and I will just copy this and instead of
25:22 - this I can paste it here so the main
25:26 - result is now the product of whatever
25:30 - the sum of this and the multiplier you
25:33 - need now I will just build the program
25:35 - and run it and now you can see
25:39 - first of all it makes the sum of these
25:42 - two numbers and then it multiplies this
25:45 - number by two and then it stores the
25:48 - multiplication in this variable and we
25:51 - are calling this variable here so it
25:52 - will show the result in this form so
25:58 - remember this thing that whenever you
26:02 - return something you need to give the
26:06 - returning value same of same data-type
26:09 - whatever you have declared here if you
26:12 - have declared double here you need to
26:14 - return double value okay and then
26:17 - whatever the function is returning you
26:21 - can add this function or multiply this
26:24 - function to the another variable because
26:27 - it's returning something in our case
26:31 - it's returning integer okay so that's
26:34 - how you can return value using functions
26:37 - in the last video I have shown you how
26:39 - to write the function that returns value
26:42 - so I have written a function called sum
26:45 - and it takes two parameter and then it
26:49 - makes the sum of these two numbers and
26:51 - return the value so for example I want
26:55 - to print the sum of some numbers so I
26:58 - will just say C out and then sum and in
27:04 - the bracket I will pass just those two
27:06 - numbers for example fifty four and six
27:12 - by four and when I run the program it
27:18 - will give me the sum of these two
27:20 - numbers because we are returning the sum
27:22 - as an integer here and thinks this the
27:26 - sum is an integer and prints this number
27:30 - now in this video I am going to talk to
27:33 - you about one more really important
27:37 - property called default arguments or
27:40 - default parameters
27:43 - so what exactly I mean by default
27:46 - arguments of default parameter is you
27:50 - can initialize your function parameter
27:55 - with some value so for example I have
27:58 - written a function or making the sum of
28:01 - these two values first number and second
28:05 - value second number I can initialize
28:08 - these parameter by some values for
28:11 - example I will initialize this first
28:13 - number is equal to 20 and the second
28:19 - number is equal to 10 so this will be 10
28:26 - okay so this is called default argument
28:33 - declaration okay so what this means is
28:37 - we have initialized our parameter with a
28:41 - default value so for example now you if
28:45 - you can even call this function like
28:48 - this without passing any parameter
28:52 - because what happens is when it sees
28:56 - this function here it goes to this
28:59 - function and it sees that I already have
29:02 - the parameters or the values of these 2
29:07 - parameters so let's see what happens
29:10 - when I run the program
29:11 - I will compile this and run it and you
29:16 - can see it gives me the sum of these two
29:18 - default value even though I haven't
29:21 - given any parameter to this sum right so
29:26 - this is how you can initialize your
29:30 - function with the fault values now let's
29:34 - see some more properties for example you
29:37 - want to overwrite these values for how
29:42 - you can override these values is you can
29:45 - pass some new values here
29:49 - for example 134 so and when I build this
29:54 - program it will still run and I want to
29:58 - show you whatever will be the result the
30:00 - result is 144 so what it is doing is it
30:07 - takes this parameter as your first
30:10 - parameter right so whenever you pass the
30:15 - parameter how it knows that which
30:17 - parameter is this is this a first
30:20 - parameter or is this a second parameter
30:23 - it in C++ when you pass the parameter it
30:28 - just goes to first parameter and then
30:31 - second parameter and then third
30:32 - parameter so if you write here only one
30:35 - value it will be assigned to your first
30:38 - parameter when you write here the second
30:41 - value for example 234 it will be
30:44 - assigned to the second parameter and now
30:47 - the new values of these two parameter is
30:50 - for first number its 134 it is being
30:54 - overwritten by this 20 is being
30:57 - overwritten by 134 and a second number
30:59 - is now 234 which is to 34 is overwritten
31:06 - by them and now when you build your
31:08 - program once again and run it it will
31:14 - show you the sum of these two numbers
31:17 - which you have passed right 134 plus 2
31:21 - 34 is 368 okay so this is how you can
31:28 - initialize or your parameter or as
31:31 - default default parameter initialization
31:35 - right now if you are using function
31:39 - prototyping so I have already explained
31:42 - you in the previous video how to
31:45 - prototype your function if you are using
31:46 - this function below your main then you
31:50 - need to throw the type your function
31:51 - here so if you are using function
31:54 - prototyping you just need to copy this
31:56 - and paste it here
31:59 - and just gave a semicolon and when you
32:02 - do your function declaration you don't
32:05 - need to initialize this values in here
32:09 - in the declaration you just need to
32:12 - initialize your default argument values
32:14 - in the prototype not in the declaration
32:18 - so if you are declaring function below
32:21 - your mean and you are prototyping it
32:23 - just initialize these default values in
32:26 - the prototyping not in the declaration
32:29 - it will still work fine so let's run the
32:33 - program compiling it and running it and
32:37 - it will show the same value right so
32:42 - always remember that when you are Toto
32:45 - typing it just initialize it at the time
32:48 - of prototyping and not at the time of
32:51 - declaration so I hope you have
32:54 - understood the concept of default
32:56 - parameter or argument now in this video
32:59 - I'm going to show you how variable scope
33:03 - works in C++ and how unary scope
33:08 - resolution operator works in C++ so
33:12 - first of all I will demonstrate how
33:14 - variable scope works so for example you
33:18 - have a function void print me it's a
33:26 - random function I am writing and what it
33:31 - does is it just print something so I'll
33:37 - say print something okay
33:46 - and yes so now for example you can
33:53 - declare a variable which is local to a
33:56 - function and you can declare a variable
33:59 - which is global to the function
34:02 - so for example I declare some variable
34:05 - in my variable for example is equal to
34:16 - 30 okay and I want to use this variable
34:24 - here also so I want to print see how my
34:31 - variable in here will it work
34:36 - let's see if it works or not so it's
34:41 - showing the error and whatever it's
34:44 - showing is that let's see what is the
34:51 - error here error is my variable was not
34:54 - declared in this scope so there is a
34:58 - problem of scope in here so what is the
35:02 - problem here is whenever you declare a
35:05 - variable inside a function it's called a
35:08 - local declaration or local scope of that
35:12 - variable and whenever you declare a
35:16 - function inside or whenever you declare
35:19 - a variable inside a function it can be
35:21 - dysfunction of this function it will be
35:25 - usable inside that function only okay so
35:29 - you cannot use my variable outside this
35:33 - function so this is called the local
35:36 - scope or local declaration of a variable
35:40 - now for example if you want to use the
35:43 - same variable and this function in this
35:47 - function what you can do is you can
35:50 - declare your variable as global so I
35:54 - will just remove this here and I will
35:58 - declare it as global int my variable is
36:03 - equal to 20 is equal to 20 so now what
36:10 - will happen is because we have declared
36:13 - a variable outside
36:16 - this function and our main function this
36:18 - is called a global variable and it it is
36:22 - global to this and this so this function
36:26 - of this variable can be used here also
36:28 - and here also right and when I compile
36:34 - my program this time it will be compiled
36:37 - fine okay
36:39 - so you can declare the variable either
36:45 - as a global variable if you want to use
36:48 - it in your main function and the other
36:53 - functions then declare your variable has
36:55 - global variable and if you want to use
36:59 - your variable in the function itself or
37:02 - locally then you just declare Oh your
37:05 - function inside inside your function
37:11 - right so I hope you understood this now
37:15 - let's talk about unary scope resolution
37:21 - operator so for example you have
37:26 - declared a global value like this and
37:30 - you also have declared in my variable
37:36 - here also which you have initialized
37:39 - with then now how your program will know
37:44 - with this this which you are printing my
37:49 - variable it is local variable or a
37:51 - global variable let's let me just remove
37:56 - this function in order to clear point
37:58 - more so this is my global variable and I
38:02 - have also declared the same name in as a
38:06 - local variable also and when I want to
38:09 - print this variable let's see what
38:10 - happens
38:11 - I will compile my program and run it and
38:14 - it shows me the value 10 that means the
38:21 - variable value is 10 and it's using this
38:26 - value
38:28 - as a local value here right so whenever
38:33 - you declare variable with the same name
38:38 - which will be preferred the local value
38:42 - will be preferred right so most recent
38:45 - value you have declared will be
38:47 - preferred in the function so this is the
38:50 - most recent value or the most you know
38:52 - value all the local value simply it will
38:55 - be preferred on global value so this
38:58 - will print 10 here now in order to use
39:01 - the global value for example you want to
39:05 - use this value you want to print 20 and
39:09 - not 10 how you can print it so in order
39:14 - to print this global value you need to
39:17 - use this unary scope resolution operator
39:20 - and what is this unity scope resolution
39:23 - operator we just need to give two
39:27 - columns sorry
39:29 - let's pose a mistake you just need to
39:32 - give two colons
39:35 - before your variable so these two call
39:38 - colons are called unary scope resolution
39:41 - operator and this two double colons
39:46 - tells your C++ code that this variable
39:51 - is a Colo B global variable and not
39:54 - unloop a variable so in this way you
39:56 - distinguish between global and local
39:58 - variable if it doesn't have these two
40:02 - colons it will treat this my variable as
40:06 - this local variable and when you have
40:09 - this 2 : then this my variable will be
40:13 - considered as a global variable and now
40:16 - let's try to build our program and run
40:21 - it and now you can see here that it has
40:24 - printed 20 so this variable is
40:27 - considered because we have declared is
40:30 - as a global variable using unity scope
40:33 - resolution operator so hope you have
40:36 - understood the concept of variable
40:39 - scores and unity scope
40:42 - an operator in C++ in this video I'm
40:44 - going to show you what is function
40:46 - overloading and how we can use function
40:50 - overloading and what is the logic of
40:52 - using function overloading so I will
40:56 - take an example which I have already
40:58 - used in our earlier programs so I will
41:02 - make a function to add two numbers so
41:05 - I'm not going to return anything and I
41:08 - will make a function and this will add
41:14 - two numbers so I will give in first
41:21 - number and in second number okay and I
41:31 - want to print the sum of these two
41:33 - numbers so I will say C out sum of
41:46 - integers is equal to and then I will add
41:55 - these two numbers first number plus this
42:00 - second number okay and then I will just
42:06 - give our end line and that's it so what
42:13 - I want is I want to add two numbers
42:15 - that's easy what I will do is I will
42:18 - just call this function sum and then I
42:23 - will I can add two numbers like this 235
42:28 - and 675 for example and it will add
42:33 - these two numbers and show the result
42:36 - here right so when I compile this
42:39 - program and run this program
42:40 - it will work fine as we have expected
42:44 - okay like this but what happens when you
42:49 - want to add two decimal numbers
42:55 - so what are decimal numbers are what are
42:58 - full of note numbers decimal numbers are
43:01 - two sixty five point seven five six and
43:04 - two sixty five point something like this
43:10 - so what happens if you want to add
43:13 - decimal points and you want to add
43:15 - integers also and different kind of
43:18 - numbers and when you compile this
43:21 - program it will be compiled fine but
43:28 - when you run the program it will only
43:30 - show you the integer values and not the
43:33 - decimal value and this result is wrong
43:36 - because we wanted to add to float values
43:39 - and should show the result as of lower
43:42 - value so now the concept of function
43:46 - overloading comes so according to
43:49 - function overloading you can declare a
43:51 - same function with the same name two
43:55 - times or more than two times with
43:58 - different arguments or different return
44:01 - type so for example this function is
44:05 - adding two integer I can just copy this
44:08 - function and paste it just below it to
44:11 - add two floats so I just change the
44:15 - declaration here note and float okay and
44:23 - now when I run the program
44:25 - I will compile it showing the error
44:31 - because now the program doesn't know
44:35 - this function you are using is it
44:38 - initialized by the fin teacher or it is
44:41 - initialized by the float value what you
44:44 - can do is you can declare two float
44:48 - variables so I'll declare load a is
44:54 - equal to and note B is equal to : and I
45:01 - will just pass these two values here is
45:04 - equal to 265 0.75 and
45:08 - is equal to 675 point seven six and I
45:11 - will pass a and B as an argument so now
45:14 - we have implicitly specified that the
45:19 - this a and B is a float value so then
45:24 - your program knows that okay I need I
45:27 - have been a there are two parameter
45:30 - which are four node and tried my beta
45:35 - passed as a parameter in me so I will go
45:39 - to these function and see which
45:42 - parameter can take float and you can see
45:46 - these parameter can take float so then
45:48 - this will this program or this function
45:51 - will be executed right so I will say
45:54 - here
45:58 - load the sum of float is this plus this
46:04 - now for example once again I will
46:08 - declare two int X is equal to some
46:14 - integer and Y is equal to some other
46:19 - integer and once again I will call sum X
46:27 - comma Y so these two functions this time
46:35 - the function which takes the integer
46:38 - will be executed and when you use
46:41 - integer as a parameter integers as a
46:44 - parameter and when you use float as a
46:47 - parameter this second function will be
46:50 - used okay now I will build my program
46:53 - and I will run it and now you can see
46:59 - both result first is the firm of float
47:03 - that means we are in this function and
47:06 - it will show the result and then the sum
47:10 - of integers that means we are in this
47:13 - function sum of integers is equal to
47:15 - whatever the sum of these two integers
47:18 - here right
47:19 - so this says how you can use
47:22 - function overloading you can declare a
47:24 - function with the same name more than
47:28 - two times or more than months and you
47:31 - can pass different kind of parameter
47:34 - inside this function or you can return
47:38 - different kind of parameter from this
47:42 - function and whenever you pass note
47:46 - inside this it will work as this
47:49 - function and whenever you pass integers
47:53 - it will know that you have passed
47:55 - integers so it will use this function so
47:58 - in this way you can know declare
48:00 - multiple function with the same name to
48:04 - use them differently in this video I'm
48:07 - going to show you how you can use data
48:09 - structure or simply structures in C++ so
48:13 - first of all why we need to use
48:15 - structure the in C++ so in the earlier
48:19 - videos I have shown you you can define a
48:22 - variable in C++ like this end and the
48:26 - name of the variable and this semicolon
48:29 - for care and the name of the variable
48:32 - and the semicolon so this int and care
48:36 - are the predefined
48:39 - data type which is provided by a C++ to
48:42 - us so we haven't defined these int or
48:45 - this care now suppose you want to define
48:50 - your own data type you can use structure
48:54 - to define your own data types so let me
48:57 - give you an example now for example you
49:01 - want to define a structure for a book a
49:04 - book can contain name book name book
49:09 - author or book ID and you want to use
49:14 - these name author and ID as a data type
49:19 - or book as a data type then how you can
49:23 - define a structure for the book so the
49:27 - basic syntax of the structure is you
49:29 - just write
49:32 - struct and the name of the structure you
49:41 - want to define so in our case we are
49:44 - defining book or books will be
49:47 - appropriate and then just give the
49:49 - semicolon and this column to complete
49:52 - the structure now this is the basic
49:57 - definition of structure and now inside
50:00 - structure you did you can define the
50:03 - traits of the book for example book has
50:09 - some name book can be written by some
50:12 - author and book have some ID so you can
50:16 - define it like this care name of array
50:25 - 50 but it can contain 50 character for
50:29 - example care of author which also can
50:37 - contain 50 character and for example int
50:41 - you define the book ID like this so now
50:47 - you have defined a new data type called
50:50 - book and now you can use this data type
50:54 - in order to call these members of your
50:59 - structure so how you can call this
51:02 - structure from in your main you just
51:07 - need to once again use the keyword
51:11 - struct and the name of your structure
51:14 - will just book and then you need to give
51:18 - the name of the variable you want to
51:21 - give to your book data type for example
51:24 - I will define book 1 has a variable name
51:29 - and now for example I want to assign the
51:34 - value to my Pope one variable which is a
51:39 - kind book of the data type of book one
51:43 - variable is books right so I
51:45 - want to assign some values to my book
51:48 - now I can assign value to my book like
51:53 - this I'll write the name of my variable
51:57 - book 1 and when I use dot which is
52:01 - called dot separator then you can see
52:05 - the option I can call any of the three
52:09 - members using this dot separator for
52:12 - example first of all I we call this name
52:14 - and then I can give equal to and give
52:18 - the name of the author oh not the name
52:22 - of name of the author but the name of
52:26 - the book so the name of the book for
52:28 - example we can give C++ C++ tutorials
52:35 - okay but one thing one more thing I want
52:41 - to show you that this type of assignment
52:46 - to the character array is not very
52:49 - efficient in order to copy a string
52:53 - inside a character array efficiently
52:55 - there is other way of copying this array
52:59 - inside your character array so what you
53:04 - can do is you can use the keyword string
53:11 - copy and as a first argument of this
53:16 - string copy you can give the name of the
53:20 - variable which is book 1 dot name in
53:23 - which you want to copy the string and as
53:26 - a second variable you can give the name
53:28 - give the string which you want to copy
53:31 - in this character array variable so this
53:35 - is the more efficient way of copying the
53:41 - string into a character array right so
53:46 - avoid using this type of assignment
53:49 - whenever you want to assign a string
53:53 - inside a character array just use the
53:58 - code like this this is
53:59 - more efficient okay this is a good
54:03 - practice in C++ to use string copy
54:06 - instead of directly assigned by equality
54:10 - now and one more thing in order to use
54:13 - this keyword string copy you need to use
54:17 - this library so just write include C
54:22 - string library just include this library
54:24 - in order to use this keyword string copy
54:28 - now we'll just copy this once again and
54:31 - paste it here and this time I want to
54:33 - give the name of the author for example
54:35 - I will give the name of the author s
54:40 - programming knowledge okay and then I
54:46 - want to assign the ID of the author so I
54:50 - will write poke one dot ID equal to one
54:57 - for example right now for example I want
55:01 - to access the data which is contained by
55:04 - a book variable right what I can do is I
55:09 - will write C out book one name and then
55:29 - you can just access it by this book 1
55:34 - dot name ok copy it and paste it here
55:41 - and just give the regular and line right
55:48 - I'm going to just copy this two more
55:52 - times and I will say book one author and
55:57 - here also author and book 1 ID and here
56:02 - also I do now when I compile the program
56:05 - hopefully it will compile successfully
56:12 - yes it compiles with zero error and zero
56:16 - warning now when I run the program
56:19 - this will show whatever I assigned to my
56:24 - book dot abide you can see you can
56:29 - access this content in this book
56:34 - variable by book dot book 1 dot name
56:38 - book 1 dot author and book 1 dot I so in
56:42 - this way you structures allow you to
56:44 - define your own data type in our case we
56:47 - have defined the data type book and this
56:50 - data type book has the trade name author
56:53 - and ID right and then using this data
56:58 - type we have defined a variable like
57:01 - we'd be define it like this so we have
57:08 - the data type the data type in our case
57:10 - book and the name in our case is book
57:13 - one right and then we can assign values
57:17 - to our variables like this and like this
57:23 - and when we want to access the values
57:26 - inside the variable you can just access
57:31 - it like this book one dot whatever value
57:35 - you want to access so you want to access
57:36 - book one's name then you can write book
57:39 - one name book one author and book one ID
57:42 - okay so in this way you can access the
57:46 - structures content and you can define
57:49 - more book books like book 2 book 3 and
57:53 - you can assign values and you can us
57:55 - access the content inside this books so
58:00 - in this way you can define your own data
58:02 - type using struct and by the way you can
58:06 - also use functions inside the structure
58:10 - this is a little bit high level
58:13 - programming so for basic it's okay to
58:17 - use just the default data types now in
58:21 - this video I'm going to show you how
58:24 - can use structure as an argument to the
58:27 - function so in normal program we are
58:32 - able to pass some argument like in or
58:37 - characters or double or float values and
58:40 - I have already told you in the last
58:44 - video that structure is a user-defined
58:48 - data bike like int like care these
58:53 - Carrick are end and care and int are the
58:57 - C++ data type and this book for example
59:01 - which you have defined in the last video
59:04 - is user-defined data by which we have
59:08 - created now in order to use this
59:12 - structure book inside a function as an
59:16 - argument you need to pass it like a
59:20 - structure so let's see how we can use
59:24 - the structure as an argument inside a
59:26 - function now in order if you don't know
59:30 - what this code is just see the last
59:32 - video I'm using the food from the last
59:35 - video in this video also okay and in
59:38 - this within the last video we had
59:39 - defined the structure and I have shown
59:42 - you how you can use it now for example
59:45 - we want to define a function to print
59:49 - the content of the book okay so I will
59:54 - define a function called avoid print
59:59 - book and I will just give this and I
60:04 - will give this not this but this
60:09 - parenthesis here now in order to pass
60:12 - yours poke structure in the function as
60:17 - an argument what you need to do is once
60:20 - again you need to go here in the
60:23 - parenthesis and you need to call the
60:25 - this keyword called
60:29 - struct and then you need to call the
60:33 - datatype or the structure name which is
60:36 - booked in our case right and then just
60:40 - give any name to your book structure so
60:44 - I will name it as book itself and then
60:48 - what this book is doing is it this book
60:52 - I'm used to print the name of name
60:58 - contained by this book variable so I
61:03 - will just copy it and paste it here as
61:08 - you remember how we can there we can
61:11 - call the content of the book by its
61:14 - members so book this is the name
61:18 - variable name dot what is the member
61:20 - name of this book structure book name
61:23 - author and ID okay so I will just use
61:27 - this book in order to print the book
61:31 - name both author and book ID now this is
61:37 - just simply you need to pass in order to
61:40 - call this book variable inside this /
61:46 - this guy inside this function as a
61:49 - parameter or argument right now in order
61:54 - to call this print function what you
61:58 - need to do is just copy this function
62:00 - name paste it here and as a normal
62:04 - variable of how you pass your normal
62:08 - variable a variable inside this function
62:11 - like this right so think of it if it's
62:15 - so integer variable ended this will be
62:20 - an integer variable simply you will pass
62:24 - any number here okay or the variable
62:29 - which contains the number in a similar
62:31 - way we will pass this variable of book
62:34 - because we have defined this book
62:36 - datatype here for this book right so
62:40 - this is this book we can pass it inside
62:43 - the function and now when we compile the
62:46 - program and run the program it will work
62:51 - fine right it's printing whatever we
62:55 - have assigned here so we have a signed
62:59 - book name C++ folk author programming
63:02 - knowledge book ID 1 and then we are
63:05 - calling this function to print the value
63:07 - book one name but one name is book one
63:11 - book dot name right we have passed this
63:15 - and book dot name a C++ tutorial which
63:18 - is which comes from here right so in
63:22 - this way you can pass structure variable
63:27 - as a parameter to a function I hope you
63:30 - and understood the concept behind it and
63:34 - I hope you have enjoyed the video please
63:36 - rate comment and subscribe and bye for
63:38 - now