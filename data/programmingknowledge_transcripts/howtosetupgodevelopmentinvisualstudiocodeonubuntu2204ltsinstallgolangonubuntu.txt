00:00 - hey guys in this video I'm going to show
00:01 - you how you can install go on your
00:03 - Ubuntu operating system in addition I'm
00:06 - also going to show you how you can
00:08 - configure go with Visual Studio code on
00:11 - your Ubuntu operating system so let's
00:14 - start with the installation of go so
00:17 - just open your favorite browser and
00:18 - search for install go and the page which
00:23 - will appear here will be from go.d so we
00:26 - are going to click on this link and here
00:31 - you can see the procedure of installing
00:34 - go but we are not going to use this
00:37 - procedure in which uh they are telling
00:40 - us uh that we need to download this
00:43 - tar.gz file and then install go using
00:50 - this
00:51 - method because let's say the latest
00:54 - version is 1.
00:55 - 21.3 and let's say after 1 year you want
00:59 - to
01:00 - upgrade the Go version it becomes really
01:04 - hard to uh uninstall and reinstall go so
01:09 - I'm going to show you a different method
01:12 - which makes it easier to uh change the
01:16 - version of go and that way you will be
01:19 - let's say stressfree when it comes to
01:23 - just changing the version of go right so
01:27 - as you can see the version here is
01:30 - 1. 21.3 this is the latest version at
01:33 - the time of making this video the
01:37 - procedure which I'm going to tell you
01:39 - involves snap so snap is a standard
01:44 - let's say package manager for installing
01:47 - various different tools on your open 2
01:50 - operating system it's from canonical
01:54 - which is the creator of uh open to
01:57 - operating system also so just search for
02:01 - SNAP install go here you will see uh two
02:05 - links one is snapcraft
02:08 - doio SL install SLG go/ Ubuntu and also
02:13 - you will see snapcraft doio slgo click
02:17 - on the second link which says snapcraft
02:20 - doio
02:21 - SLO
02:23 - here and as you can see the latest
02:28 - version using snap is also 1.
02:32 - 21.3 and it's by canonical as I said
02:37 - which uh is the creator of uh the Ubuntu
02:42 - operating system so it's pretty up to
02:45 - date whatever version you will see on
02:48 - the official website you will also find
02:51 - the same version on the snapcraft
02:56 - website also so you can install it now
02:59 - how you can install a package using snap
03:03 - you just need to click on install button
03:05 - here and this is a simple command for
03:08 - that so just use Pudo snap install go
03:12 - hyphen hyen classic when you give this
03:15 - command it's going to install the latest
03:18 - stable version at the time of making
03:21 - this video as I said the latest version
03:23 - is 1.
03:29 - print version that's also possible for
03:32 - that you can give this command which is
03:35 - uh shown here which is Pudo snap install
03:38 - classic and then you just need to add
03:42 - this channel flag here and here you can
03:46 - just specify hyphen hyen channel is
03:49 - equal to the version you want to install
03:52 - right so right now as I said the latest
03:55 - version is 1.
03:58 - 121.301 20 let's say then you can just
04:02 - specify
04:03 - 1.20 stable then the version which will
04:08 - be installed on your obuntu operating
04:10 - system will be 1.20 and not the latest
04:13 - version so you can even specify the
04:16 - specific version of go if you need that
04:20 - version but if you are new to go uh and
04:25 - you don't know what to do just copy this
04:29 - command here which will install the
04:30 - latest version of go which is pseudo
04:33 - snap install go hyphen classic open your
04:36 - terminal here press control alt T which
04:40 - will open the terminal and then paste
04:43 - this command press control shift V here
04:47 - which is going to paste your command and
04:49 - then press enter and give your obun to's
04:52 - password which you used to log in into
04:55 - your open to operating system so I'm
04:57 - going to give my password which which is
04:59 - going to start the installation of this
05:02 - go
05:05 - package so at this point you just need
05:07 - to wait for a few
05:11 - seconds and you can see go is installed
05:14 - on my open operating system so you don't
05:17 - need to do any complicated stuff here
05:20 - once you see this message which says uh
05:23 - go is installed the version is this one
05:26 - we can even check the version of go
05:29 - using using this command which is Go
05:33 - version and then press enter and if it
05:37 - gives the version which you have uh uh
05:41 - installed then go is working fine on
05:44 - your Ubuntu operating system so now we
05:47 - have installed go on our open 2
05:49 - operating system now let's create a
05:52 - simple go program and run it using
05:57 - visual studio code so for that what I'm
06:00 - going to do is I'm in my home folder
06:04 - right so let me clear the terminal and
06:07 - right now I'm in my home folder here I'm
06:10 - going to create a new folder so I'm
06:12 - going to just give this command which is
06:15 - mkdir and then give any name to the
06:19 - folder where you want to uh create your
06:23 - go projects for example right so I'm
06:26 - going to just name my folder as uh go
06:28 - hyphen
06:31 - projects and this uh folder is going to
06:34 - be created so now we are going to CD
06:38 - into that project right so I'm going to
06:40 - just write CD go projects and here I can
06:44 - just type code space dot which is going
06:48 - to open Visual Studio code and it's
06:51 - going to open this go project uh
06:54 - directory which we have just created now
06:58 - before writing any go code let's install
07:01 - the standard extension for go for your
07:05 - Visual Studio code so here you can see
07:08 - few options just click on this option
07:11 - which says extensions here and here just
07:15 - search for go
07:18 - extension and you can see the first
07:20 - result which appears here is from go and
07:25 - it has this star on top of it so when
07:29 - you click on this go option you can see
07:33 - there are 10 million uh downloads for
07:38 - this uh extension which is the most
07:41 - popular extension for go on Visual
07:43 - Studio code and it's created by go team
07:47 - at Google right so we can trust this
07:50 - click on install button which is going
07:52 - to install this uh go
07:55 - extension and once you see disable or
07:57 - uninstall that means this extension is
08:01 - uh installed right there are few other
08:05 - uh go extensions which we can uh install
08:09 - later but this is the standard go
08:12 - extension which uh I will recommend you
08:15 - to install so that you can smoothly uh
08:19 - work with go on your Visual Studio code
08:23 - now I'm going to go to this Explorer
08:25 - section where I I have this go projects
08:30 - here I'm going to create a new folder
08:34 - right so just create a new folder and
08:37 - give any name to your folder I'm going
08:39 - to name my folder as hello right so
08:43 - inside this hello folder I'm going to
08:45 - create a new go file and I'm going to
08:48 - name it as main.go
08:51 - and as soon as I do that you can see uh
08:56 - I get some recommendation to install all
08:59 - go PLS command is not available so I can
09:02 - install that so I can click on this
09:05 - install button which is going to start
09:08 - the installation of that and we can let
09:11 - it run in the background but let's go to
09:15 - the main. go uh file now when you are
09:21 - working with go and when you create a go
09:24 - file for the first time you will see
09:26 - this kind of uh a warning or or this
09:29 - kind of
09:30 - information uh popups on your Visual
09:34 - Studio code editor you can install all
09:37 - these uh extra tools which Visual Studio
09:41 - code suggests to you it will only help
09:44 - you to uh develop uh go on your Visual
09:48 - Studio code editor so here also I'm
09:51 - going to click on install here which is
09:53 - going to uh start the installation of go
09:56 - outline package and and let it run in
10:00 - the background right now let's start uh
10:03 - writing our uh code for go what we are
10:07 - going to do uh first is we are going to
10:09 - just add this package Main and what this
10:14 - line does is this line declares a
10:16 - package to which uh this go file belongs
10:20 - so in go programs are organized into
10:23 - packages and the main package is a
10:26 - special package used for creating
10:29 - executable programs and it must contain
10:32 - a main function which we are going to
10:35 - write in few seconds right so just write
10:39 - package Main and then just write import
10:44 - so there are few uh libraries which we
10:47 - can Import in go and those libraries we
10:51 - can import using this import keyword and
10:54 - then in double codes just write
10:58 - fmt now here we have imported this fmt
11:02 - package which provides the function for
11:04 - formatted IO so we use this uh package
11:09 - to print text on the console right so
11:13 - now we have added uh fmt uh package and
11:18 - now we are going to create our main uh
11:21 - function so how do you can declare a
11:23 - function in main you just type f NC and
11:30 - then the name of your function which is
11:33 - Main in our case and then I can give
11:36 - these parentheses and these curly
11:39 - brackets now every uh go program should
11:44 - have at least one main method and this
11:49 - main method will be the main entry point
11:52 - for your program right now for our hello
11:57 - world application I I'm going to use
12:00 - this fmt package and I want to print uh
12:04 - some message so I'm going to use this
12:07 - function which is called print Ln and
12:10 - here I can uh write any message right so
12:15 - I can just write hello from go let's say
12:19 - right I want to print hello from go so
12:23 - now our uh code is finished so I can
12:28 - save this code and once our code is
12:31 - finished you can see there is this
12:33 - squiggly line on top of uh this package
12:36 - Main and it says gol was not able to
12:40 - find module in your package you can fix
12:44 - this by opening your workspace to a
12:46 - folder inside a go module so to solve
12:50 - this problem we going to open a terminal
12:52 - so let me open a terminal here if you
12:55 - don't see this option uh for terminal
12:58 - you can open Terminal by clicking on the
13:01 - top menu and select terminal and then
13:04 - click on new terminal and it's going to
13:06 - open the terminal now here you can see
13:08 - it has opened the go projects uh
13:12 - directory which is listed here so we are
13:15 - working inside the go project directory
13:18 - but our main.go file is on in our hello
13:22 - directory which is inside the go project
13:25 - folder right so we are going to CD into
13:28 - hello first and here give the following
13:31 - command which is go
13:35 - Mod Space in it and the name of your
13:39 - module in our case we are going to name
13:41 - it as hello right so just write go Mod
13:44 - Space in it space hello and then press
13:48 - enter which is going to uh create this
13:51 - go. mod file and as soon as you do this
13:54 - you can see this error is also gone from
13:58 - here right
13:59 - right we can open this go. mod file and
14:03 - it has two lines the module name which
14:08 - is hello in our case and the Go version
14:11 - which is the version of go we are
14:13 - working with so I can close this file
14:16 - now uh this go mod in it hello also
14:21 - suggests us us to uh run this command so
14:24 - we going to run this go mod uh tidy
14:30 - command and then press enter and then
14:33 - let's clear this terminal and then I'm
14:36 - going to show you how you can run this
14:39 - main.go file so to run this main.go file
14:43 - as you can see I'm in the hello folder
14:45 - where my main.go file is there to run
14:49 - this uh file I can just write go run and
14:53 - then the name of the file which is
14:54 - main.go and it's going to compile my
14:58 - file and and give us this output which
15:00 - is which is Hello from go which means
15:03 - our program is working fine there is one
15:07 - more method of uh running this main.go
15:12 - because this main uh has this main
15:17 - function inside this right so there is
15:21 - uh this command which is go run and
15:25 - because we are inside this hello folder
15:28 - if you give this dot after the run
15:31 - command go is going to find the main
15:34 - function in uh any file in which this
15:38 - main function is available and it's
15:40 - going to run that uh file because the
15:44 - main is the main entry point of any go
15:49 - application so you can uh run uh your
15:52 - program using G run space dot in the
15:58 - main folder in which your go files are
16:01 - available I'm going to just uh run this
16:03 - command and it says hello from go also
16:06 - so this is just shorter this go run
16:10 - command runs your project but it doesn't
16:13 - create a binary file but we all know
16:16 - that we can also create a binary file in
16:21 - go and when we run the binary file the
16:25 - program execution will be much faster
16:28 - than you using this run command so to
16:31 - compile your program what you need to do
16:34 - is give this command which is go
16:37 - build and then space Dot and then press
16:41 - enter and when you give this command
16:43 - it's going to create a binary with the
16:46 - same name as your parent folder in our
16:49 - case it's hello so you can see this
16:52 - binary is created with the name hello
16:55 - and now we can run our binary also so
16:58 - just uh use
17:00 - do/ hello and then press enter and you
17:04 - can see that binary is executed
17:06 - successfully and it also prints hello
17:08 - from go so these were the commands which
17:10 - we used in our terminal to run a go
17:13 - program in Visual Studio code you can
17:16 - also run the same uh program by just
17:21 - clicking on this run button and you can
17:23 - click on run without debugging and it's
17:27 - going to to uh run your program but
17:30 - first you need to install this dlv uh
17:34 - package so you can uh just click on
17:36 - install once again and you can see uh
17:40 - this is installed successfully so once
17:43 - again when we click on run and then
17:45 - click on run without debugging so this
17:47 - time it's going to run our code in the
17:50 - debug console right so you can see I can
17:53 - see this output which is Hello from go
17:56 - right so what I did is is I just click
17:59 - on run and then I just clicked on run
18:02 - without debugging and it gives me this
18:05 - output if you want to debug your code so
18:08 - you can set some break points here and
18:12 - then click on this uh run and then start
18:16 - debugging so let's say for giving a
18:19 - better example for this debugging I'm
18:22 - going to stop the debugging and then I'm
18:24 - going to paste this kind of uh code here
18:28 - so in this program what I'm doing is I'm
18:30 - declaring two variables of type float 64
18:34 - uh the name of these variables are num
18:36 - one and num two and then I'm assigning
18:39 - the value to num 1 is equal to 10 num 2
18:42 - is equal to 20 and I'm just uh summing
18:45 - them up so I'm going to just sum uh
18:50 - these two numbers and then print the
18:52 - value of these two numbers and here I
18:54 - have uh given few break points here at
18:58 - this this point this point this point
19:00 - and this point and let's start the
19:03 - debugging now so I'm going to click on
19:05 - start debugging here and you can see
19:09 - this debugging has been started now here
19:12 - on top you can see few uh options first
19:15 - option is to continue when you click on
19:18 - this option uh your program execution
19:21 - will stop at the next break point if you
19:24 - click on the step over option then your
19:26 - program will go to the next line of your
19:30 - code if you uh click on step into if
19:33 - you're using any functions it's going to
19:36 - go inside that function in that line and
19:40 - you can dig deeper into your uh uh code
19:45 - you can also restart the debugging and
19:47 - stop the debugging using these two
19:50 - buttons so right now I'm on this line my
19:54 - breako is on this line which is line
19:57 - number eight
19:59 - if I click on uh let's say continue it's
20:01 - going to stop at the next break point
20:05 - right so here the default value of num
20:08 - one and num two are zero right these are
20:12 - the default value assigned by go now at
20:15 - this point on this line we are assigning
20:18 - 10 right so when we step over to the
20:21 - next line you can see the num one value
20:24 - is 10 when I step over to the next line
20:28 - the num two value now becomes 20 right
20:33 - now when we step over to the next line
20:35 - you can see the sum appears and its
20:39 - value is 30 here right and then we can
20:43 - continue and it's going to print the sum
20:47 - of uh these two numbers which is this
20:50 - line right so this is how you can uh
20:54 - debug your code uh using visual Studio
20:59 - code so I think that's it for this video
21:02 - in this video you have learned how to
21:05 - install go on your open2 operating
21:07 - system and how to configure go with
21:10 - Visual Studio code editor and run your
21:14 - code inside Visual Studio code editor I
21:17 - hope you enjoyed this video and I will
21:18 - see you in the next
21:21 - video