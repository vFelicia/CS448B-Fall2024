00:00 - hello guys welcome to the next video on
00:02 - an odious to troll for beginners in this
00:04 - video we will talk about events module
00:07 - in node.js and how we can use event
00:10 - emitter in node.js we will also see so
00:14 - much of the node.js core API is built
00:18 - around event-driven architecture which
00:22 - means that because we know that node.js
00:26 - runs itself in an asynchronous manner so
00:31 - it's necessary to have some kind of
00:34 - event-driven architecture because for
00:38 - example you if you are reading data from
00:42 - a database so once your data is read
00:46 - from database you need to trigger some
00:50 - event otherwise if your code is blocking
00:54 - and it's not you know a asynchronous
00:57 - then you're so execution will be blocked
01:01 - until the data is fetched from the
01:04 - database right so we have event in node
01:09 - API which helped us to you know for
01:13 - example same example you want to fetch a
01:17 - data from the database you write a
01:20 - function for this and as soon as you you
01:24 - know you are done with reading of the
01:26 - data from the database the code triggers
01:30 - an event so your code will run
01:33 - asynchronously and it's not spot
01:35 - stopping and as soon as some function is
01:38 - done an event can be triggered and the
01:42 - execution can be done or it can be you
01:45 - know the data can be sent to the client
01:47 - for example right so let's see how we
01:50 - can use events and events emitter in
01:53 - node chairs so to use events just write
01:59 - var events is equal to require this
02:03 - keyword events right now in order to
02:06 - create emitter you need to call a method
02:10 - called event emitter right so you need
02:13 - to create
02:13 - an instance of new event emitter object
02:17 - okay
02:19 - so just write our event emitter is equal
02:23 - to new events and then call an event
02:27 - emitter on this object right so with a
02:33 - capital e right so this will create an
02:36 - instance of event emitter okay
02:41 - and using this event emitter you can
02:43 - create an event or listener for the
02:47 - event and then you can also emit an
02:50 - event and the listener will listen to
02:53 - that event so how you can create a
02:55 - listener
02:56 - you can just write event emitter object
02:58 - and then there is a method called on and
03:01 - for example you if you are writing UI
03:08 - something clicked for example some
03:10 - button is clicked this is like a
03:14 - listener to your you know button click
03:17 - so you can hear write a keyword for
03:21 - example click so this will be the
03:25 - listener and whenever this keyword
03:28 - called clicked is emitted then this
03:31 - method which is a callback function here
03:36 - will be called and whatever code inside
03:39 - this callback function will be executed
03:42 - so this is kind of a listener so let's
03:46 - say there is you know this keyboard
03:51 - clicked and we will omit this keyword
03:54 - using event emitter once again so just
03:57 - use event emitter dot emit and simply
04:03 - you can just call this keyword which
04:06 - means that this event is triggered for
04:10 - example click is triggered and here you
04:13 - can use any keyword so for example if
04:15 - you are fetching data from the database
04:17 - you can just write query here or if you
04:21 - want to add some data you can just write
04:23 - add the keyboard depend upon you so
04:26 - whatever keyword
04:27 - you want to use here as a first argument
04:30 - it's a keyword and whatever keyword you
04:34 - know you omit if it's the same as the
04:38 - listener keyword then this code inside
04:41 - this callback function will be triggered
04:44 - so let's see how we can use it so for
04:48 - example I will just console.log
04:51 - something so just right console dot log
04:57 - and I will say something is clicked okay
05:07 - so let's try to run our code now if you
05:12 - are using Visual Studio code there is a
05:14 - trick to open a terminal inside your
05:16 - Visual Studio code editor itself and the
05:20 - way you can do it you can just press
05:21 - ctrl shift P and it will give you this
05:24 - kind of a box and here just type it
05:27 - toggle integrated terminal and here you
05:35 - can run your code again and you can see
05:40 - we are already in the same folder in
05:43 - this terminal so we just need to write
05:45 - node thought which is and run it and you
05:51 - can see something is clicked so
05:55 - basically what's happening here is
05:58 - whenever you omit this keyword then this
06:03 - listener will listen for this keyword
06:05 - and then the method or callback function
06:09 - will be called and whatever code you
06:11 - will write here will be executed okay so
06:15 - this is the basic functionality of event
06:19 - emitters now in here you can also pass
06:22 - some argument with this emit method so
06:26 - for example you want to pass some text
06:29 - so you can just pass for example button
06:34 - one okay and instead of this you can
06:38 - just
06:40 - so function for example button and then
06:44 - you can just call button here plus and
06:48 - then instead of something we will call
06:53 - button one is clicked okay so this is an
06:57 - argument which will be passed here you
07:00 - can pass any number of argument you want
07:03 - here and just pause the same argument
07:07 - here the this you know value will be
07:10 - passed to this button right if it has
07:12 - the second argument then the second
07:14 - value will be passed to the second
07:16 - argument so you can pass some argument
07:19 - also like this and once again when you
07:22 - run the code it says button one is
07:25 - clicked okay so you can also pass
07:28 - arguments here now let's take a little
07:31 - bit more advanced example now for this
07:35 - example we will need for example our
07:38 - utils module which is also a core module
07:43 - here so just write util here is equal to
07:48 - require you to and using util it has so
07:56 - many functionality and the functionality
07:58 - which we are going to use from this util
08:02 - is the inherit function or enhance you
08:07 - know method from it so there is a method
08:11 - in util so just write you two and then
08:14 - call a method called inherit so and then
08:19 - it takes two argument first is the class
08:24 - which you want to inherit in so first is
08:27 - the class which is inheriting right so
08:31 - we need to create some for example
08:34 - object in order to inherit from event
08:38 - emitter so let's create an object so we
08:42 - will just create an object called
08:45 - students and the student have this
08:49 - function which will take the name of the
08:53 - student
08:54 - and then it will assign this name to the
08:57 - student itself so just write this dot
09:00 - name which is the name or the member of
09:05 - the student and it will be assigned by
09:09 - this name which is passed through this
09:13 - function right now as I said utils have
09:18 - this method called inherit and it takes
09:21 - two argument first is the class or the
09:25 - object of the class which wants to
09:27 - inherit so this is like class which is
09:34 - inheriting and the second is the object
09:38 - which is the base class for example so
09:42 - from the class which you want to inherit
09:44 - so we want to inherit from this event
09:47 - emitter okay
09:49 - now this is really good thing about
09:52 - event emitter we don't need this bracket
09:55 - here and we also don't need this here
09:58 - right so now if you know the concept of
10:02 - inheritance what happens in inheritance
10:05 - is the class which is inheriting have
10:09 - the access to the methods and the
10:12 - members of the class from which it's
10:16 - inheriting so student have the access to
10:19 - for example on method or emit method or
10:22 - whatever method public method which are
10:26 - there in this event emitter class for
10:28 - example right so now what we can do here
10:34 - is we can create some student for
10:36 - example student one can be max is equal
10:40 - to new student and we can give the name
10:46 - here max okay so this argument is max in
10:52 - this first case right now whenever we
10:56 - call this object now this object also
11:01 - have the access to a method called on
11:04 - right which we have
11:07 - called using this event emitter instance
11:10 - because students is inheriting this
11:14 - event emitter
11:16 - therefore this object of the student
11:19 - also have the access to this method and
11:23 - you can simply use this you know method
11:26 - as we have done earlier so this students
11:30 - for example we can just give the keyword
11:36 - scored and then we can just pass the
11:41 - anonymous function or call back here and
11:45 - we can just pass some something like
11:49 - marks here right and we can console.log
11:54 - it so just write console.log and then we
11:58 - can console.log for example first of all
12:02 - the name of the object for example max
12:07 - dot name and then we can just write here
12:14 - scores and marks he score so the marks
12:19 - are here okay we can print this and then
12:23 - we can omit this event right in
12:25 - real-life situation you can do this omit
12:28 - on for example receiving the some data
12:32 - from the database or connected correct
12:34 - connecting to a client whenever
12:36 - connection is successful something like
12:38 - this but here for example i can just
12:41 - write max dot i met and then this
12:48 - keyword called scored and the second
12:53 - will be if you remember the argument
12:56 - here can be the value of argument this
13:01 - argument can be passed from here right
13:03 - so we can just say 95 marks okay and
13:07 - let's run our code again to save the
13:13 - program and run the code again and here
13:17 - it says max scores 95
13:20 - right or and we can just write something
13:24 - like Marx also here so we know that he
13:29 - scores this much amount of marks and
13:31 - once again run the code and now it says
13:34 - max codes ninety-five marks right now in
13:39 - the same way you can create a second
13:43 - second
13:45 - event something like this so instead of
13:48 - four max we can just say the second
13:52 - student is Tom right and the name you
13:55 - pass here also and instead of max you
13:59 - just essentially replace max by Tom's
14:03 - this is our second student right
14:06 - and this time Tom scores for example 60
14:11 - marks okay
14:13 - so once again when you run the code you
14:16 - can just see mark scores 95 marks and
14:19 - Tom scores 60 marks okay so in this way
14:24 - you can use events and event emitters in
14:28 - node.js I hope you enjoyed this video
14:31 - please rate comment subscribe and bye
14:32 - for now