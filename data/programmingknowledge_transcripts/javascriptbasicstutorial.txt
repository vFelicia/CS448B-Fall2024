00:00 - hello guys welcome to the first video on
00:02 - JavaScript tutorial for beginners in
00:04 - this video we will learn what is
00:07 - JavaScript and how does it work and if
00:10 - the time permits we will also see how we
00:13 - can write our first Java Script code so
00:16 - first of all what is JavaScript
00:19 - javascript is a high-level dynamic
00:22 - untyped and interpreted programming
00:24 - language and alongside HTML and CSS it
00:28 - is one of the three most essential
00:31 - technologies of world wide web content
00:34 - production now if you are using HTML and
00:38 - CSS most probably you are generating
00:41 - only static pages for your website and
00:45 - what is static static means there is no
00:49 - interactivity in your web page you can
00:52 - only produce text images tables and
00:57 - frames but there is no interactivity
01:00 - involved in your web page now javascript
01:04 - is just for that so javascript allows
01:08 - you to add interactivity with your web
01:12 - page so for example you want to add a
01:16 - user and you want the user to log in to
01:20 - your website before accessing your
01:23 - content so this can be added through
01:26 - JavaScript right or you can use
01:30 - JavaScript to manipulate the actions of
01:33 - the user for example he clicks something
01:35 - and he wants to calculate the values of
01:39 - something for example addition of two
01:42 - numbers you can do it with JavaScript
01:44 - very easily now if you're thinking
01:47 - javascript is a very difficult language
01:49 - to learn it's not it's really easy to
01:52 - learn and it was developed by nest
01:56 - Netscape first okay now what is the
02:01 - meaning of interactivity I will show you
02:03 - by example so for example I have this
02:08 - temperature converter let's see on the
02:11 - actual webpage how it looks like
02:13 - so this is a temperature converter right
02:15 - now all this is right now HTML and CSS
02:20 - and for example I want to convert a
02:24 - Celsius value into a Fahrenheit and
02:26 - Kelvin I need to use a JavaScript or in
02:31 - fact I'm using javascript in this
02:33 - webpage to calculate these values first
02:36 - so for example I add 5 degree Celsius
02:39 - here and I want to calculate the
02:41 - respective value of Fahrenheit and
02:44 - Kelvin I can just click this convert
02:47 - word button and JavaScript does it magic
02:50 - it converts it and it shows it here so
02:54 - this is the magic of JavaScript okay now
02:58 - not only JavaScript calculates something
03:02 - but it improves the appearance of your
03:05 - webpage especially if you are using
03:07 - graphics or visual feedback it can also
03:11 - make your site navigation easier and
03:15 - interactive and as I already said that
03:18 - it can perform calculations and
03:21 - validation validation means just for
03:24 - example log in page of your website
03:27 - right so how does it work it can be
03:31 - embedded into your HTML page so you can
03:35 - directly embed script element into your
03:39 - HTML code and you can use JavaScript
03:42 - otherwise you can create a JavaScript
03:45 - file and add it into your HTML page
03:50 - okay now javascript is executed on the
03:54 - client-side so it's fast and once it's
03:59 - loaded no connection is needed from the
04:02 - server to execute or to make it work
04:05 - okay now it uses simple programming
04:08 - statement combined with HTML tag and as
04:13 - I already said it's an interpreted
04:16 - language now there are two type of
04:18 - languages one is a compiled language and
04:23 - other is an interpreted language
04:25 - compiled language
04:27 - is a 1 when you compile it first and
04:31 - create a binary of it and when you
04:35 - execute this binary it will walk but the
04:38 - interpreted means for example javascript
04:41 - is an interpreted language so we don't
04:44 - need to compile it but it can be used
04:47 - directly on the browser and it can be
04:50 - interpreted by the browser so you can
04:53 - say browser interprets it and if it's
04:56 - valid then it will be shown to the user
04:58 - right now some people thinks that Java
05:03 - and Java scripts are almost same but
05:06 - they are not Java and Java scripts are
05:09 - totally different languages ok
05:12 - so for example what is Java Java is a
05:15 - full programming language which is much
05:17 - harder to learn and it's a compiled
05:21 - language and it's independent of web so
05:25 - you can use Java with web technologies
05:28 - but it's not necessary that you have to
05:31 - use web technologies with Java it can
05:34 - you know do its stuff on its own without
05:38 - any web technology right on the other
05:43 - hand javascript is an interpreted
05:45 - language which has its own syntax and
05:48 - what we need to code JavaScript one is
05:52 - the text editor and other is the browser
05:56 - ok so you can choose any browser of your
05:59 - choice and the text editor for example
06:01 - you can use notepad or WordPad which
06:04 - comes with windows or you can use
06:06 - notepad plus plus which is a little bit
06:09 - more advanced version of notepad or you
06:13 - can use some IDE like eclipse or
06:16 - NetBeans or IntelliJ IDEA or there are
06:21 - many IDE s
06:23 - IDE stands for integrated development
06:25 - environment which you can use to code
06:28 - JavaScript ok now if you want to learn
06:32 - JavaScript most probably you need to
06:34 - revise your HTML skills right so because
06:38 - we use JavaScript mostly
06:40 - with HTML so you need to have some idea
06:43 - of HTML also okay now this is a small
06:49 - example of a JavaScript code so you have
06:53 - HTML and you can add JavaScript code
06:57 - inside this HTML page so let's see how
07:00 - we can do it so I have this sample HTML
07:04 - code and for example I want to add this
07:07 - JavaScript code inside it what I can do
07:10 - here is I can add a script tag here and
07:14 - just add this type is equal to text
07:16 - slash JavaScript so it knows which type
07:19 - of language it is which is JavaScript
07:22 - right
07:23 - and in here too for example I want to
07:26 - print something on the web page I can
07:29 - use document dot write so document dot
07:34 - write and here I can just write for
07:37 - example hello world and don't forget to
07:40 - give the semicolon here and I will save
07:42 - it and I will go to the web page on
07:44 - which I want to execute it and refresh
07:46 - my web page and so shows hello world
07:49 - okay
07:50 - now for example I want to add some HTML
07:53 - tags inside this document I can do it
07:57 - easily just add for example h1 tag at
08:01 - the start and ending tag at the last
08:05 - which is same and save your code and
08:09 - refresh your web page and it's showing
08:12 - it in the h1 tags okay so you can use
08:17 - JavaScript like this now we will learn
08:21 - more how we can use JavaScript and how
08:24 - we can you know create interactive web
08:27 - pages using javascript in the further
08:30 - videos so stay tuned and please rate
08:32 - comment and subscribe and bye for now
08:35 - hello guys welcome to the next video on
08:37 - JavaScript tutorial for beginners in
08:39 - this video we will see how we can
08:41 - install notepad plus plus which is a
08:44 - code editor for JavaScript or Eclipse
08:48 - IDE for developing your JavaScript
08:51 - project so first of all let's see how we
08:54 - can in
08:54 - doll and notepad plus plus so just open
08:58 - your browser and search for notepad plus
09:00 - plus and the first option most probably
09:02 - will come here will be from notepad
09:05 - minus plus minus plus 0 RG you can
09:08 - directly click download option from here
09:11 - and in here they have the download
09:14 - option for Windows as an installer so
09:18 - you just need to click this notepad plus
09:20 - plus installer and you just need to run
09:23 - the installer ok
09:25 - and once the notepad plus plus is
09:28 - installed you just need to search for
09:29 - notepad plus plus and it's going to look
09:32 - like this ok now to make HTML 5 here you
09:37 - just need to create a new file and then
09:40 - right click on it and then save it as
09:42 - our HTML 5 ok so just choose hypertext
09:47 - markup language from here and give the
09:50 - name to your file for example test dot
09:54 - HTML ok and save it and here you can
09:58 - write your code for example my code
10:01 - looks like this which we have seen in
10:03 - the last video and to run this first you
10:06 - need to save it and then go to this
10:09 - option called run and here you will be
10:12 - able to see some options depending upon
10:15 - the browser installed on your system so
10:17 - it says launch in Firefox Internet
10:20 - Explorer Chrome or Safari so we want to
10:23 - do it in Firefox well launch it in
10:25 - Firefox so choose this option and it's
10:28 - going to open this in Firefox ok so this
10:32 - is how you can install notepad plus plus
10:35 - now let's see how we can install Eclipse
10:38 - IDE on our Windows operating system so
10:40 - to install Eclipse IDE you need to have
10:42 - a Java JDK installed in your system
10:45 - because it's a prerequisite for
10:47 - installing Eclipse IDE now you just need
10:50 - to search for Java JDK here and just
10:54 - click the link which says oracle.com
10:58 - ok so go inside here and here you didn't
11:02 - need to choose this option which says
11:03 - Java download and once you click here
11:06 - you need to
11:08 - like this radio button which says accept
11:10 - license and condition and you need to
11:13 - install or download the Installer which
11:16 - says x64 dot exe which is the last
11:19 - option we can see right now if you have
11:22 - 32-bit operating system you need to
11:25 - choose x86 which is the second last
11:27 - option from the top or if you have some
11:30 - other operating system like Mac OS or
11:33 - Linux then you can choose those here as
11:37 - well once this executable file is
11:40 - downloaded you just need to double click
11:42 - on it and run it and it will probably
11:44 - take few seconds of few minutes to
11:47 - install it and after installing you will
11:50 - be able to see in your C folder of your
11:53 - Windows operating system there will be a
11:56 - folder called Program Files and in the
12:00 - Program Files you will be able to see
12:02 - this job of folder and here you will
12:04 - find two folders one is JDK and other is
12:08 - JRE you can even change the name of this
12:13 - folder because when they were installed
12:17 - on my system there was something like
12:19 - JDK 8.1 point whatever so I changed the
12:22 - name to this 2d k-8 and J are in and
12:26 - once you change the folder name you can
12:30 - go to your search option of for Windows
12:33 - and then search for system here ok and
12:37 - after installing Java JDK you need to
12:40 - set the environment variable for Java so
12:44 - that Eclipse IDE can recognize this Java
12:47 - ok so go to system then go to advanced
12:51 - setting and in that one setting go to
12:53 - environment variable and in the
12:55 - environment variable you just need to go
12:57 - to this system variable called path and
13:02 - double click on it and in here what you
13:05 - need to do is you just need to copy the
13:07 - path where your JDK folder is so just go
13:11 - inside this JDK 8 folder and then go
13:14 - inside this bin folder ok and then copy
13:18 - this part from here and go at the last
13:20 - and give the semicolon
13:22 - and paste this part up to Ben okay
13:26 - so I have already done this so I will
13:29 - not do it again but you need to do it
13:32 - here and same you need to do it with JRE
13:36 - folder so go into the JRE folder and
13:38 - then go to bin folder and copy the path
13:41 - and go at the last give the semicolon
13:44 - one semicolon here and then paste the
13:46 - path here okay once you do that click ok
13:50 - and ok and ok ok and now your
13:54 - environment variables are set now after
13:57 - installing Java and setting the
13:59 - environment variable you need to go to
14:01 - the Eclipse website which is Eclipse
14:04 - dodgy slash download or let's see how is
14:09 - this home page looks like for the
14:11 - Eclipse IDE so you will be able to see
14:14 - this home page like this and then you
14:17 - can just click this download button
14:18 - which will lead you to this page now you
14:23 - can see here they have introduced the
14:27 - Eclipse installer recently so you can
14:29 - choose this installer and you don't need
14:32 - to worry about anything so just click
14:35 - for it this installer for example 64-bit
14:39 - installer and download it and install it
14:42 - and it will ask you which version of
14:46 - Eclipse you want to install so there are
14:49 - different type of Eclipse available on
14:52 - this website for example Eclipse IDE for
14:55 - Java EE Eclipse IDE for Java developer
14:58 - Eclipse IDE for C++ Eclipse IDE for PHP
15:02 - the one we want is Eclipse IDE for EE
15:06 - developers and when you see the
15:09 - description you will see here that it
15:11 - can be used for DEP web development and
15:13 - you can use it for HTML or JavaScript
15:16 - projects right so I will prefer to
15:20 - choose this option and depending upon
15:23 - the operating system I will choose 64
15:26 - bit because my operating system is 64
15:28 - bit and once you click this you will be
15:32 - able to see
15:33 - you know different option to download
15:35 - okay so you can see the one which is
15:38 - closer to my location is this one so I
15:42 - can just click this option download and
15:45 - it will be downloaded to my computer if
15:48 - you want to get it faster you can see
15:51 - here there are different links so for
15:54 - example I can choose this IBM sauce from
15:56 - yours and click this download button and
15:59 - from here you can just click the 64-bit
16:04 - version and it will download Eclipse zip
16:08 - file ok so once you download this
16:12 - Eclipse zip file it's going to look like
16:14 - this
16:15 - so you just need to extract this zip
16:18 - file so extract file and I would like to
16:21 - extract this file in my C folder so
16:25 - extract it in your C folder and once you
16:28 - extract this Eclipse folder in your C
16:31 - folder go to this Eclipse folder here
16:35 - and it's going to look like this the
16:38 - contents are like this okay so this is
16:42 - our executable which opens Eclipse IDE
16:46 - you can just right click on it and you
16:50 - can send it to your desktop as a
16:52 - shortcut also so send to desktop and it
16:56 - will create a shortcut and if you want
17:00 - to open this Eclipse IDE you just need
17:02 - to click this Eclipse dot exe file here
17:06 - so just double click on it and it's
17:08 - going to open Eclipse IDE so for the
17:10 - first time when you open Eclipse IDE
17:11 - it's going to show you this option to
17:14 - create your workspace workspace is
17:17 - nothing but the location where all your
17:19 - project will be saved okay so leave it
17:23 - as default and click OK
17:27 - and it's going to open your Eclipse IDE
17:32 - now for the first time when you open
17:35 - Eclipse IDE it's going to give you this
17:37 - kind of a welcome message which you can
17:39 - cancel from here and to create a new
17:42 - project what you need to do is you need
17:44 - to go to file and go to new
17:47 - and choose project from here and in here
17:49 - you have two options to create a
17:51 - JavaScript project one is go to the
17:54 - JavaScript and select JavaScript project
17:57 - or other one is go to web folder and
18:00 - select static web projects for now so
18:03 - for now I'm going to choose the static
18:05 - web project and click Next and now I'm
18:08 - going to give the name to my project for
18:11 - example test project for example ok and
18:14 - now you can just click finish and it's
18:17 - going to create you this project now you
18:20 - can open multiple project inside this
18:23 - Eclipse IDE you can see one I was
18:26 - already using so I can right click on
18:29 - this project which I was using and I can
18:32 - close this by selecting this option
18:35 - close project ok and it's going to close
18:38 - my project ok or if you want to delete
18:41 - this project from this project was
18:43 - Explorer you can right click and click
18:46 - delete and if you click OK it's going to
18:50 - delete it from this project to Explorer
18:52 - but it's not going to delete it from
18:54 - your hard disk okay so in order to
18:58 - delete it forever you just need to check
19:01 - this option and it's going to delete it
19:03 - forever
19:04 - ok now this is my project here and it
19:08 - contains one folder called web content
19:10 - which is empty so I will right click on
19:13 - it and I will create a new HTML file
19:16 - here and I will name it as for example
19:19 - test dot HTML and click finish and it's
19:23 - going to create me the HTML file
19:26 - okay now this Eclipse IDE gives you the
19:30 - ill built web browser to test your code
19:33 - ok so you can just go to the location
19:37 - where this text dot HTML is inside the
19:40 - web content folder right click on it and
19:42 - then go to open width and then click web
19:46 - browser and Eclipse has its own web
19:50 - browser which you can use to run your
19:52 - code so for example I can add some
19:56 - JavaScript code here for example script
20:00 - as we have done last time we are going
20:03 - to just add document here dot right and
20:07 - we can just add hello world and save
20:11 - your code and refresh this webpage and
20:14 - it's going to give you this hello world
20:16 - output here okay so in this way you can
20:20 - install notepad plus plus or Eclipse IDE
20:22 - to create your new Java Script project
20:26 - now you can choose either of them I will
20:29 - be using this Eclipse IDE
20:31 - but if you wish you can also choose this
20:34 - notepad plus plus editor so that's it
20:37 - for this video I hope you enjoyed this
20:38 - video please rate comment subscribe and
20:40 - hello guys welcome to the next video on
20:43 - JavaScript tutorial for beginners in
20:45 - this video we will learn about comments
20:48 - and variables in JavaScript so let's get
20:51 - started with comments you can give
20:53 - comments in JavaScript in two ways one
20:56 - is a single Klein comment and you can
21:00 - give a single line comment by giving two
21:03 - forward slashes and then your comment
21:06 - for example my code okay so this is how
21:10 - you can give a single line comment and
21:12 - whatever you write after these two
21:15 - double forward slashes will not be
21:18 - executed by your JavaScript code or you
21:22 - can give a comment by giving these
21:25 - forward slash and then Asterix and then
21:29 - Asterix and forward slash okay
21:32 - and whatever comment you will give in
21:36 - between this forward slash and Astrix
21:39 - and Astrix and forward slash it will be
21:42 - considered as a comment so if you want
21:44 - to give a multi-line comment you can
21:46 - give something like this okay so this is
21:49 - how you can use comments in JavaScript
21:53 - now let's talk about variable so first
21:58 - of all what is a variable a variable is
22:01 - a container which can contain some data
22:04 - so for example we can assign a variable
22:08 - or we can name a variable like X and
22:11 - then we can assign some data
22:14 - for example one into it right so X is a
22:18 - variable which contains the value of one
22:23 - now in JavaScript to declare our
22:26 - variables there are some rules okay so
22:30 - there are mainly I think three or four
22:33 - rules you need to remember whenever
22:35 - declaring the variable first rule is you
22:40 - can declare a variable using numbers
22:44 - letters a dollar symbol or an underscore
22:48 - okay so you can declare a variable
22:52 - something like my variable or my
22:58 - variable something like this okay your
23:01 - variable name can also start with a
23:04 - dollar symbol so for example dollar my
23:07 - variable or you can also start your
23:12 - variable name by underscore like this my
23:15 - variable okay you can also declare a
23:19 - variable using a number after a letter
23:22 - or a keyword for example you want to
23:26 - declare x1 you can declare a variable
23:29 - but a variable cannot start with a
23:33 - number so this is not valid okay so x1
23:37 - is valid but 1x is not valid because
23:41 - your variable cannot start with our
23:45 - number the next rule is your variable
23:48 - cannot contain the reserved key words in
23:52 - JavaScript so there are a number of key
23:55 - word which are reserved in JavaScript
23:58 - and with this course when we learn more
24:01 - we will learn more about these keywords
24:03 - for example there is a keyword called
24:06 - var or there is a keyword called
24:08 - function these are reserved keywords and
24:12 - you cannot declare a variable using
24:15 - these keywords ok now I will show you
24:19 - some more interesting stuff so if you
24:22 - have a Google Chrome browser just
24:26 - open your Google Chrome browser and then
24:28 - right-click on it and then go to the
24:32 - last option which says inspect element
24:35 - okay and this is the thing which will
24:38 - help you to debug and find the errors
24:41 - into your JavaScript code so for example
24:45 - go to console here and in here
24:48 - for example I will declare a variable
24:51 - called X is equal to one and press ENTER
24:57 - and it will give you the result one
25:00 - something like this I will make it a
25:02 - little bit bigger so it will give you
25:04 - the result one right or for example you
25:08 - can give a variable called Y is equal to
25:12 - five and it will give you the result
25:15 - five now you have two variables x and y
25:18 - which you can use in your console here
25:22 - so for example X plus y when you enter
25:26 - it will give you 6 because X is equal to
25:30 - 1 and Y is equal to 5 and when you add
25:32 - these two it will give you 6 right now I
25:36 - have told you that our variable cannot
25:40 - start with a number so let's check here
25:43 - if this variable when we declared with a
25:46 - number will it pass or not so 1 my well
25:52 - for example ok we'd start with a number
25:55 - and press Enter
25:56 - and it will give you this error which
25:59 - says uncaught syntax error right so this
26:03 - is not allowed but when we declare a
26:05 - variable something like my well and
26:10 - assign some value in here then it's not
26:15 - going to give you the error now let's
26:17 - try to declare a variable with a
26:20 - underscore for example underscore my
26:23 - well is equal to 1 and press Enter it's
26:29 - totally valid and now let's try to
26:31 - declare a variable with a dollar symbol
26:34 - so dollar and my
26:38 - well and this is equal to six for
26:41 - example and it's also totally valid okay
26:44 - so this console will help you to debug
26:47 - your code and even show you if you have
26:51 - some errors in your code right now let's
26:56 - see how these variable works in
27:00 - JavaScript so for example you declare a
27:03 - variable called X is equal to 6 and Y is
27:09 - equal to 10 ok so I have already told
27:13 - you that you can do something like X
27:15 - plus y and it will give you the sum and
27:19 - whenever you will do X or Y minus X then
27:25 - it will give you the subtraction you can
27:28 - do the opposite X minus y and it will
27:30 - give you the minus value right now to
27:33 - multiply these two numbers you can do Y
27:36 - multiplied by X so Astrix is the
27:40 - multiplication symbol in JavaScript so
27:43 - press ENTER and we'll give you the
27:45 - multiplication whenever you do for
27:48 - example Y divided by X so Y divided by X
27:53 - is 1.6 whatever is the value of this
27:57 - division it will give you now there is a
28:00 - special symbol called mod in JavaScript
28:05 - so whenever you do Y mod X and press
28:10 - Enter then it will give you the
28:13 - remainder of the division of the
28:17 - variable you are dividing so the value
28:20 - of Y was 10 and the value of x was 6 so
28:25 - when you divide Y by X then you will get
28:29 - 4 as remainder so this modulus gives you
28:33 - the remainder now JavaScript is also
28:36 - intelligent enough to recognize what
28:39 - operation you want to do with your
28:42 - numbers for example you want to do 4
28:45 - minus 4 multiplied by 5 it will give you
28:50 - minus 16 and
28:52 - not zero right so it will give the
28:54 - importance to the multiplication first
28:57 - and then the subtraction or for example
29:01 - you want to divide and multiply and add
29:04 - or subtract something at the same time
29:07 - it will give the precedence something
29:10 - like multiplication then division then
29:12 - addition and then the subtraction okay
29:15 - or if you want to make your code more
29:17 - clear you can do something like this so
29:20 - you can add a bracket here and inside
29:23 - this bracket you can do four minus four
29:26 - and then after the bracket you can do
29:29 - multiply it by five and press ENTER it
29:32 - will give you 0 because this bracket has
29:35 - more priority than your multiplication
29:38 - or your division symbols okay so in this
29:43 - way you can use these variables and
29:46 - comments in JavaScript by the way if you
29:49 - are using Firefox you can also use this
29:51 - consoles so go to Firefox and right
29:54 - click and once again go to inspect
29:56 - element and in here go to console and
30:00 - you have this console here X is equal to
30:04 - 1 it will give you the same answer okay
30:07 - so if you have a Firefox or Google
30:10 - Chrome you can debug your code and find
30:14 - errors in it and do many more things
30:16 - with this view here so I hope you
30:21 - enjoyed this video please rate comment
30:22 - subscribe and bye for now
30:24 - hello guys welcome to the next video on
30:26 - JavaScript tutorial for beginners in
30:29 - this video we will learn about data
30:31 - types in JavaScript so there are
30:33 - basically five data types in JavaScript
30:37 - which is strings numbers boolean arrays
30:42 - and objects arrays an object we will
30:45 - learn in further videos and in this
30:47 - video we will discuss about string
30:50 - numbers and boolean data types so to
30:54 - declare variable in JavaScript you need
30:59 - to declare it with a keyword called var
31:02 - it's like a data type
31:05 - javascript so unlike in other languages
31:10 - like Java or C++ you literally give the
31:13 - data type like int or bool or string
31:16 - here but in JavaScript you give just
31:21 - this keyword called var and then your
31:25 - variable name so for example my number
31:28 - and then you can initialize this
31:31 - variable by some value for example 10
31:34 - and by initialization JavaScript deduce
31:37 - the data type of a variable so here it's
31:40 - initialized with a number so this data
31:44 - type of this variable will be a number
31:47 - right
31:48 - now let's print this value so there is a
31:51 - function in JavaScript which is called
31:54 - alert and it takes one argument it can
31:57 - be a string or a number or anything
32:00 - right so to print a variable you just
32:04 - need to copy it and pass it as an
32:07 - argument of this alert function and save
32:11 - your code and refresh your webpage and
32:16 - gives you this number in the form of
32:20 - alert okay now this number can be of
32:23 - different type for example if you want
32:25 - to initialize this variable by a decimal
32:28 - number or floating point you can use it
32:31 - something like ten point two one three
32:33 - or some decimal points right or it can
32:37 - be an exponent value so you can
32:39 - initialize it something like 10 e 5
32:44 - which means 10 into 10 to the power 5 so
32:48 - let's save it and refresh our webpage it
32:53 - will give you this value right or you
32:57 - can do something like 10 e minus 5 which
33:01 - means then multiply by 10 to the power
33:04 - minus 5 and save it and refresh your web
33:07 - page and it gives you this decimal value
33:11 - right now to declare a boolean value in
33:15 - JavaScript you do
33:17 - the same so far the variable name my
33:20 - bull and then you declare it with true
33:25 - or false so it can be true or it can be
33:29 - a false value okay so a boolean is a
33:34 - data type which can contain either true
33:37 - or false so this time we are going to
33:40 - initialize it by true for example and
33:42 - just pass it in here in the alert
33:46 - argument and save it and refresh your
33:49 - web page it will give you true okay and
33:52 - if you would have initialize it by false
33:56 - then it will give you false so refresh
33:59 - your webpage and it gives false here
34:02 - okay now let's see how we can declare a
34:06 - string in JavaScript
34:09 - so once again gave var and then give the
34:13 - name to your variable for example my
34:16 - string and then is equal to and in
34:19 - double quotes whatever you write in
34:23 - between the double quote it will be your
34:25 - string right so for example my name is
34:30 - whatever right and just passed this
34:34 - variable in the alert function and save
34:37 - it and refresh your webpage and it gives
34:41 - you this string value here okay now for
34:45 - example you want to display a string
34:49 - with some double quotation or something
34:52 - so for example something like this okay
34:57 - and this will give you the error so when
35:02 - I save it and when i refresh my webpage
35:06 - it gives me nothing and it gives me the
35:09 - syntax error and it says missing
35:11 - semicolon before statement okay and you
35:16 - can even go to this error by clicking
35:20 - here on the right hand side and it shows
35:24 - me this line okay so this error is
35:27 - coming from this line we know right and
35:30 - why this error is
35:31 - because these double quotes you cannot
35:36 - use inside your string variables so you
35:40 - can you know add any string inside your
35:45 - double quotes at the left-hand side and
35:48 - the right-hand side but whenever you try
35:50 - to include these double quote inside a
35:54 - string it will give you an error and
35:57 - it's obvious because javascript will
36:00 - think that this string starts here and
36:02 - ends here okay and whatever comes after
36:06 - it doesn't know what is it so to you
36:10 - know avoid this error what you can do is
36:13 - you can use a operator called escape
36:18 - operator okay and you can use it
36:21 - something like this so you use backslash
36:25 - just before your double quotation symbol
36:28 - so here and here and this means whatever
36:32 - comes after this double slash it will be
36:36 - considered as a part of the string okay
36:39 - so save it and refresh your webpage and
36:43 - now it will give you the answer so my
36:46 - and in this quotation and then the name
36:50 - okay something like this now there is a
36:53 - keyword in JavaScript which is called
36:56 - the type of and this keyword whatever
37:00 - you will write after this for example
37:03 - I'm writing this variable name my string
37:07 - after this type of keywords separated by
37:10 - one space then it will give you the type
37:13 - of this keyword okay
37:17 - so let's save it and let's see what it
37:19 - returns so I will refresh it and it
37:21 - gives me string so this keyword gives
37:25 - you the datatype of your variable okay
37:29 - so you can check what this variable is
37:33 - so my bool and save it and refresh your
37:37 - webpage once again it will give you
37:39 - boolean okay and once again I will pass
37:43 - this my number here
37:45 - and save my code and refresh my webpage
37:49 - and it gives me this numbered so you can
37:54 - find the data type of a variable or some
37:57 - value using this type of keyword so in
38:01 - this way you can use data types in
38:03 - JavaScript
38:04 - I hope you've enjoyed this video please
38:06 - rate comment subscribe and bye hello
38:08 - guys welcome to the next video on
38:10 - JavaScript tutorial for beginners in
38:12 - this video we will learn about if else
38:15 - statement in JavaScript and how to use
38:19 - some of the comparison operators in
38:21 - JavaScript so let's get started
38:24 - so first of all why do we need to use FL
38:28 - statements so sometimes in your code you
38:32 - need to use some conditions on the basis
38:36 - of which you want to execute some code
38:39 - and if-else statement will help you to
38:43 - do exactly that so for example I want to
38:47 - check the age of the person if it's
38:49 - greater than 18 equal to 18 or less than
38:53 - 18 okay so I have a variable called age
38:58 - whose value initially I assign is equal
39:02 - to 18 okay and to check whether it's 18
39:07 - or it's below 18 or it's greater than 18
39:10 - you want to check it and then execute
39:14 - some code okay so you can use if
39:17 - statement for that and the basic syntax
39:19 - for if statement is if keyword and then
39:24 - these brackets and then these curly
39:28 - braces and in here in these round
39:31 - bracket your condition will be evaluated
39:36 - and if this condition in these bracket
39:39 - are met then this code is executed
39:44 - inside these curly braces okay so let's
39:48 - check the condition okay so I have this
39:51 - variable called age and I want to check
39:54 - whether it's equal to 18 or not so I
39:57 - just give the
39:59 - - equal to sign and I evaluate against
40:03 - 18 now the these double equal to means
40:07 - equality okay so this is for checking
40:12 - the equality this single equal to is the
40:16 - assignment operator right and this
40:20 - double equal to is the equality checking
40:23 - operator okay so if this condition is
40:27 - met
40:28 - then we want to execute some code for
40:31 - example we want to print something using
40:33 - document dot right and we will say the
40:37 - age is equal to 18 okay and save your
40:42 - code and refresh your web page here and
40:46 - it says the age is equal to 18
40:49 - okay now let's say in the case when this
40:54 - age is not equal to 18 we want to
40:57 - execute some other code so in that case
41:01 - we use else condition so just write else
41:05 - and then these curly braces okay so when
41:09 - this condition in if statement is not
41:13 - true your program logic comes to as
41:17 - condition and it executes the code which
41:21 - is inside these curly braces after else
41:24 - okay so I will just copy this here and I
41:29 - say age is not equal to 18 and let's say
41:35 - right now the age is 20 we assign age is
41:39 - equal to 20 and save it and refresh your
41:42 - webpage and now it says age is not equal
41:46 - to 18 okay
41:47 - now not only you can use equality here
41:51 - you can also compare non equality for
41:54 - example I want to compare non equality I
41:56 - give this exclamation mark and then this
42:00 - equal to sign and I can save it and I
42:03 - can refresh my web page and it says the
42:06 - age is equal to 18 okay which is here
42:12 - okay so I'm checking whether my age is
42:15 - not equal to 18 and right now the age is
42:19 - equal to 20 right so it goes here
42:22 - because the condition is true with
42:26 - because 20 is not equal to 18 so it
42:29 - prints this statement okay now there are
42:34 - few operators which are called
42:37 - comparison operator which you can use in
42:40 - place of these equal and non equal signs
42:44 - okay so let's see what are they so these
42:48 - are some of the comparison operator we
42:51 - can use in JavaScript so we have already
42:54 - seen how to check equality now let's see
42:58 - what does these triple equal to do okay
43:04 - so for example I have age is equal to 18
43:08 - here and I want to check if our age is
43:13 - equal to 18 obviously this will print
43:15 - this statement because this condition is
43:17 - true now we all know that right now age
43:21 - is an integer variable because we have
43:24 - assigned a number to it now let's see
43:27 - and check whether it gives this
43:31 - statement if we compare this age against
43:36 - our string value right so just save it
43:40 - and refresh our webpage and it says the
43:43 - age is equal to 18 right so right now
43:47 - this double equal to only checks the
43:50 - value and not the type of your value but
43:55 - when you use triple equal to it will
43:58 - check the value as well as the type of
44:02 - your variable okay so now let's see what
44:07 - happens so save it and refresh our page
44:09 - and now it says the age is not equal to
44:12 - 18 because these triple equal to is
44:16 - checking whether the value is 18 which
44:18 - is yes it's 18 but the type is string
44:22 - right and we are checking it against our
44:25 - number
44:25 - so then it will go here because this
44:29 - condition is not met okay so this is how
44:33 - you can use triple equal to non equality
44:36 - we have already seen this exclamation
44:39 - mark with double equal means we are
44:41 - checking non equality in value and non
44:44 - equality in type also okay now the next
44:48 - symbol is for checking if the value is
44:51 - greater than the value so for example we
44:55 - can use these angle brackets and here we
44:59 - use the number for example 18 once again
45:03 - and let's change this print message here
45:06 - so we can say age is greater than 18 and
45:10 - here we can say age is less than 18 okay
45:15 - and save your code and refresh your page
45:18 - and it says age is less than 18 right
45:22 - which is this statement because in our
45:26 - case age is equal to 18 and not greater
45:29 - than 18 right now the next symbol is to
45:33 - check whether age is greater than or
45:36 - equal to okay so you can use this and
45:40 - after this you can use equal to sign and
45:43 - then it will check if age is greater
45:46 - than or it is equal to 18 right so save
45:52 - your code and refresh your webpage and
45:55 - now it says the ages greater than 18 we
45:59 - must add this equal to symbol also here
46:03 - like this so this message is more clear
46:07 - right now in a same way we have the less
46:11 - than symbol so whenever you use here the
46:15 - less than symbol then it checks whether
46:18 - age is less than or equal to 18 okay so
46:22 - let's save it and refresh your code and
46:24 - now it says the ages greater than or
46:27 - equal to 18 which is this statement okay
46:32 - now let's say you want to check multiple
46:35 - conditions so how you can do this
46:38 - so in JavaScript you can also use nested
46:43 - if-else statement so for example here
46:47 - I'm checking if the value is 18 and if
46:49 - the value is 18 I will say value is
46:52 - equal to 18 and then I also want to
46:55 - check if the value is greater than 18 or
46:58 - not
46:58 - so after this curly braces where this
47:01 - curly brace end and before the else
47:04 - condition I can introduce one more if
47:07 - condition like this and then you can do
47:13 - something like this and here you can add
47:16 - the keyword called else okay
47:20 - so it checks this condition else if this
47:24 - condition is true then it this statement
47:26 - will be executed else otherwise this
47:30 - statement can be executed so let's say
47:32 - we want to check if age is greater than
47:37 - 18 or not
47:38 - okay so copy it here and let's replace
47:42 - with greater than okay and let's say age
47:45 - is equal to 20 this time okay so refresh
47:49 - your webpage and now it says the age is
47:52 - greater than 18 so what is our program
47:56 - flow our program goes to if condition
47:58 - and it checks whether 20 is equal to 18
48:02 - or not which is not so it goes to next
48:05 - step and it checks this condition and
48:07 - it's check whether 20 is greater than 18
48:10 - or not which is true so it executes this
48:13 - statement and it don't need to go to the
48:17 - third statement because this is already
48:19 - true right so in this way you can also
48:22 - use if-else statement in nested format
48:27 - okay so in this way you can use FL
48:30 - statement in JavaScript and you can use
48:33 - these comparison operators in JavaScript
48:36 - I hope you've enjoyed this video please
48:38 - rate comment subscribe and hello guys
48:40 - welcome to the next video on JavaScript
48:42 - tutorial for beginners in this video we
48:44 - will discuss about using functions in
48:47 - JavaScript so first of all what is a
48:50 - function
48:52 - a function is a block of code which
48:55 - performs some particular task and why do
48:59 - we use it we use functions to reuse our
49:02 - code because it's doing some function
49:06 - and if we want to apply this particular
49:10 - task again and again in our code then
49:14 - functions is the most beneficial thing
49:18 - to do so let's see how we can use
49:20 - functions in JavaScript so first of all
49:23 - what I'm going to do is I'm going to add
49:25 - the script tag inside my body just keep
49:29 - in mind that you need to add the script
49:32 - tag inside your body element okay and in
49:35 - here first of all let's see how
49:37 - functions prototype looks like so this
49:41 - is how you declare a function you need
49:44 - to use a keyword called function and
49:47 - then you give the function name and then
49:51 - in these brackets you can provide some
49:54 - parameter they can be none or they can
49:59 - be one or two or many parameter you can
50:02 - provide any number of parameters in a
50:06 - function like this and inside the curly
50:10 - braces comes the body of the function
50:13 - okay so let's apply this logic to create
50:17 - a function inside our JavaScript element
50:21 - or script element so this is the
50:25 - function keyword and then comes your
50:28 - function name so for example we want to
50:31 - print something so I can just write
50:34 - print message it's the name of the
50:38 - function and for example I don't want to
50:41 - give any arguments so it's taking no
50:43 - argument from here and by using this
50:46 - function what I want to do is for
50:47 - example I want to print some message
50:49 - when I call this function okay so let's
50:53 - create our h1 element here and in here
50:59 - what I want to do is I want to add an
51:02 - attribute which is called ID
51:05 - I can name my ID anything for example
51:08 - demo ok and now there is a function in
51:13 - JavaScript which is an inbuilt function
51:15 - which is document then there is function
51:20 - called get element by ID and what it
51:25 - does is it takes the element by ID so
51:27 - our element is h1 here and the ID is
51:31 - demo right so we need to give here the
51:34 - ID of our element which we need to
51:38 - affect from this function okay and then
51:41 - there is a function one more function
51:44 - which we can call here which is called
51:46 - inner HTML okay is equal to and then I
51:53 - can give any message or anything to this
51:59 - element using this assignment operator
52:04 - so for example I can just write hello
52:07 - and then there is a term called that
52:09 - calling a function so once you create a
52:12 - function you also need to call it and
52:15 - how you call it for example I created
52:17 - this function and I just want to call it
52:19 - just below this function declaration
52:22 - here so just write the name of the
52:24 - function and those brackets here and
52:27 - then gave this semicolon and save your
52:31 - code and refresh your webpage and it
52:34 - will give you your message using this h1
52:38 - tag okay so this is how a function will
52:42 - work now I told you that function can
52:45 - take some parameters here so for example
52:49 - I create a second function which I named
52:54 - it as add here and what it does is it
52:59 - takes two parameter for example num1 and
53:03 - num2 okay and these parameter names are
53:09 - given by the user so it can be anything
53:12 - X or Y or number one or number two or
53:14 - number one or number two its on new what
53:17 - parameter name you
53:19 - want to give him okay and instead of
53:23 - printing anything here I will just
53:26 - return from this function right so what
53:30 - I am going to return just use a keyword
53:33 - called return and then for example I
53:37 - want to return the addition of these two
53:39 - numbers so just write num1 plus num2
53:43 - okay and what it's going to do is
53:46 - whatever parameter you give here it
53:49 - takes these two parameters and add these
53:52 - two numbers which you give here and
53:55 - returns the addition using this function
53:58 - okay so let's see how we can use it so
54:02 - I'm going to use this document dot get
54:04 - element ID something like this and after
54:08 - this print message call I can call this
54:11 - here document dot get element ID and for
54:15 - example I'm going to add one more head
54:18 - element here and in here I'm going to
54:20 - give the name to my ID for the second h1
54:24 - tag for example some okay so this is the
54:28 - ID of my h1 element and I can pass this
54:31 - some ID here and instead of using hello
54:36 - world here I can directly call this
54:39 - function which is add and I can passed
54:43 - two numbers here for example 100 and 200
54:48 - okay because it's taking two numbers
54:51 - here right so save your code and refresh
54:54 - your webpage and now it gives you hello
54:58 - world which is from our first function
55:00 - and it's gives you the addition of two
55:03 - numbers which is 100 plus 200 which is
55:05 - 300 right now remember I told you that
55:09 - by using function it makes you easy to
55:12 - form a particular task again and again
55:16 - okay so in here we are adding 100 and
55:19 - 200 right but for example I want to add
55:23 - some other numbers so I create one more
55:26 - h1 element and the ID name I change it
55:30 - to some one and here also I
55:33 - by someone and here I want to add for
55:36 - example thousand and two thousand okay
55:41 - and save your code and refresh it and it
55:44 - gives you thousand plus two thousand
55:46 - which is three thousand here okay so
55:49 - notice here we are using the same
55:52 - function but we are passing different
55:55 - parameters here right so we are reusing
55:58 - our code in a way okay so whenever you
56:02 - want to reuse your code you may want to
56:05 - consider function now for example I have
56:08 - two strings so you can concatenate two
56:11 - strings using this plus operator right
56:15 - so for example I have two strings like
56:17 - hello world and save your code and
56:20 - refresh your web page it will give you
56:23 - hello world right so you are using the
56:25 - same function to concatenate two string
56:28 - using a function so in this way you can
56:31 - use functions in JavaScript so once
56:35 - again I'm going to repeat the terms we
56:38 - have used one is the function keyword
56:42 - whenever you declare a function use
56:44 - function keyword then a name then these
56:47 - are called parameters here this is
56:49 - called the body which you write inside
56:52 - these curly braces you can return the
56:55 - result by using this keyword called
56:58 - return and then return your result now
57:01 - whenever you want to execute this
57:04 - function
57:05 - it's called calling a function right so
57:08 - you're calling this add a function here
57:10 - and whenever you give some real values
57:13 - as a parameter they are called arguments
57:16 - okay
57:17 - so that's it for functions in JavaScript
57:20 - I hope you have enjoyed this video
57:21 - please rate comment subscribe and bye
57:23 - hello guys welcome to the next video on
57:26 - JavaScript tutorial for beginners in
57:28 - this video we will learn how to use
57:30 - events in JavaScript so first of all
57:34 - what is an event an event can be an
57:36 - action which is performed to do some
57:40 - work for example you click some button
57:43 - you hover over some HTM
57:46 - element or you press some key right so
57:51 - let's see how we can use events in
57:53 - JavaScript so for example I will create
57:56 - a button element here and I add our text
58:01 - here and as an attribute of this button
58:04 - I will add an event called on click okay
58:09 - so on click is an event and when this
58:13 - button is clicked I want to perform some
58:16 - action for example I want to alert
58:19 - something right now keep in mind here we
58:23 - are using single code inside a lot for
58:27 - example hello world and I think you may
58:32 - understood this because we are including
58:35 - a lot in double quotes and if you use
58:38 - double quotes here it will be not
58:42 - escaped and it will create some problem
58:45 - okay
58:45 - so let's save our code and refresh our
58:48 - webpage and you see this button and when
58:51 - you click this button it will show you
58:53 - this message called hello world right
58:56 - now for example I will create one more
59:00 - item here for example it is h1 tag and
59:06 - the idea of this h1 tag is for example
59:12 - my ID okay and instead of using this I
59:17 - can use this method in JavaScript which
59:20 - is called get element by ID and give
59:25 - your name of your ID which is my ID and
59:28 - keep in mind just add this ID in single
59:32 - quotes here right then dot inner HTML
59:35 - and there is a method in JavaScript
59:39 - called date and this returns current
59:43 - date and time okay so save your code and
59:46 - refresh your webpage and once you click
59:49 - this button it's going to give you the
59:52 - current date and time with timezone here
59:57 - also now there can be different type of
60:00 - if
60:00 - which are possible and most common
60:03 - events are these so on click we have
60:06 - already used for example let's say we
60:09 - are using on mouse-over
60:12 - okay so instead of one click let's paste
60:16 - on mouse over here save your code and
60:19 - refresh our page and when you hover over
60:22 - your button not click but hover over and
60:26 - it will show you the result and once
60:29 - again when you hover it will refresh the
60:32 - time right you see it's refreshing the
60:35 - time in second ok now instead of using
60:39 - this JavaScript functionality here you
60:42 - can use a JavaScript function so just
60:45 - add a JavaScript function like this in
60:48 - the script tag make a function called
60:51 - show and what it does is it's doing the
60:55 - same job as this code ok so I'm going to
60:59 - remove this code from here and instead
61:03 - of this code I can call this JavaScript
61:06 - function right save your code and
61:09 - refresh your webpage and when you hover
61:12 - over your mouse once again you see the
61:16 - same result now for example you want to
61:19 - show this time on this button itself
61:23 - what you can do you can do something
61:26 - like this so just copy this inner HTML
61:28 - is equal to date and just write this dot
61:33 - inner HTML is equal to date and save
61:37 - your code and refresh it and when you
61:40 - hover over it it will show the date on
61:43 - your button okay so you can do this also
61:48 - now to use this on load event what you
61:52 - can do is you can go to your body
61:55 - element and call this onload event is
62:01 - equal to the function for example we
62:04 - want to perform this function okay so do
62:08 - this and then you can remove this button
62:13 - because we
62:14 - don't need it right now and save your
62:16 - code and once you refresh your code it
62:19 - will show you this date and time when
62:23 - your body element loads now to use this
62:27 - on keydown event what you can do here is
62:31 - instead of a button you can use a input
62:35 - and this input can be of type text and
62:38 - then you can call this on keydown event
62:44 - here and you can call this function to
62:49 - your own keydown event so like this okay
62:53 - and save your code and refresh your page
62:57 - and then it will show you this right so
63:01 - whenever you enter something in this
63:06 - input box then your time will change
63:09 - right you can see here okay now we must
63:14 - remove this from here in order to
63:18 - understand it clearly so once again
63:21 - refresh our page and whenever you enter
63:23 - something it refreshes your time okay so
63:27 - in this way you can use these events in
63:30 - JavaScript I hope you have enjoyed this
63:32 - video please rate comment hello guys
63:34 - welcome to the next video on JavaScript
63:35 - tutorial for beginners in this video we
63:38 - will see how to use arrays in JavaScript
63:41 - now first of all what is an array an
63:45 - array is a variable which is capable of
63:48 - storing more than one value okay so
63:53 - using array you can store multiple value
63:57 - in our variable now let's see how we can
64:00 - declare an array in JavaScript so you
64:04 - use var to declare an array as any other
64:08 - variable and then the name of a variable
64:10 - for example we want the collection of
64:13 - name or multiple names in our variable
64:17 - and then you use the square bracket to
64:20 - declare them and for example I'm going
64:23 - to add some names here something like
64:26 - this so this
64:27 - a name has four names inside it so it's
64:31 - storing four different names right now
64:34 - to access this array for example you
64:37 - want to access the first element of this
64:41 - array how you can do it so what I'm
64:43 - going to do here is I'm going to just
64:45 - print this value using document dot get
64:49 - element by ID and I have this paragraph
64:53 - tag here whose ID is demo which I'm
64:56 - calling here dot inner HTML is equal to
65:00 - and for example I want to print the
65:02 - whole array so I can just call this like
65:06 - this okay and save your code and refresh
65:10 - it and you will see here all the names
65:13 - printed on the web page right so arrays
65:17 - has some indexes and indexes is nothing
65:21 - but the position at which the value is
65:23 - stored and this value starts from zero
65:27 - in the case of array so this position of
65:31 - the first value is zero index because
65:35 - the index start from zero so the index
65:37 - of Tom is zero John is one and Bill is
65:41 - two and Mark is three right so for
65:44 - example I want to access this name John
65:46 - so I can just write here name and then
65:50 - in the square bracket one and one is the
65:53 - index here okay and save your code and
65:56 - refresh it and it's printing John now
65:59 - for example I want to access this name
66:01 - Tom here the index of it is zero okay
66:05 - and just save it and refresh it and then
66:08 - it will give you Tom
66:09 - right so indexes in array start from
66:13 - zero now if you want to change some item
66:16 - at some index what you can do here is
66:19 - you can just call the name of your array
66:22 - and then the index on which you want to
66:24 - change so for example I want to change
66:27 - this name Tom and I want to make this
66:30 - name starting with capital T not with
66:33 - small T so I will just use name zero and
66:37 - then is equal to the noon
66:41 - right so the new name is Tom with the
66:44 - capital T right and let's just save your
66:48 - code and now refresh it and now you can
66:52 - see the name becomes Tom with capital T
66:56 - right now using this method you can also
66:59 - add some items to the array so right now
67:03 - I have four items in my array and the
67:06 - index of these items are zero one two
67:09 - three so I can add at the fourth place
67:12 - an item so I can just write four and in
67:16 - here I can add a new item so something
67:20 - like this and then I can print my array
67:23 - something like this
67:25 - save your code and refresh it and now my
67:28 - array has five items in it now there is
67:32 - one more way of pushing element in the
67:36 - array so for example you want to add one
67:39 - more item in the names so you can use
67:42 - names dot push and then you can just add
67:47 - another new name so for example some new
67:51 - name something like this okay and then
67:54 - save your code and refresh your webpage
67:56 - and now you can see one more item is
67:59 - added to your array so you can use push
68:04 - or using this index method to add to an
68:09 - array now there are some method
68:11 - associated with arrays which you can use
68:14 - to use the arrays now for example I want
68:18 - to know how many number of elements are
68:22 - contained inside the array so I can use
68:26 - a method called the length so just use
68:30 - the name of the array which is names in
68:32 - my case then use dot and then call
68:35 - length method on it and then it will
68:39 - give you the number of elements inside
68:42 - the array right so save your code and
68:45 - refresh it and it says six which is true
68:48 - because these are four names and these
68:51 - two names
68:52 - we have pushed outside the array
68:55 - right now there is one more method which
68:57 - you can call on the array which is
69:00 - called sort and this will sort all the
69:04 - element in the array for example you
69:06 - have names here so it will sort the
69:09 - names according to the alphabetical
69:13 - order right so save your code and
69:15 - refresh it and now you can see these
69:19 - names are sorted in alphabetical order
69:21 - so be first and then J then M then T
69:25 - right now it's not necessary that array
69:28 - must have the elements of same data-type
69:31 - so for example I want strings and
69:34 - integer in my array it's totally valid
69:37 - so for example I am going to delete this
69:39 - name and instead of this name I'm going
69:42 - to add this integer 500 right and save
69:45 - my code and refresh my webpage it's
69:48 - going to add this integer to the array
69:52 - and it's no problem right now there is a
69:55 - different way of declaring an array also
69:59 - and which is something like this so var
70:03 - name one for example is equal to new
70:08 - array and then in the brackets you can
70:11 - provide the elements okay so for example
70:15 - I can just copy this and paste it here
70:18 - and it's totally valid okay and I'm
70:22 - going to declare it above here and I'm
70:25 - going to call this name one here and
70:27 - save it and refresh my webpage and it's
70:32 - going to give me the same result as we
70:34 - have seen earlier okay now you can use
70:37 - some more examples with arrays for
70:40 - example I will delete this array
70:42 - declaration and this also and I will use
70:47 - this name and I will call a method
70:51 - called pop okay and what this method
70:54 - does is it removes the last element from
70:58 - the array okay so I will just call this
71:00 - array here and save my code and refresh
71:04 - it
71:04 - and you can see we only have three
71:07 - elements in the
71:08 - a foot is removed okay now if you want
71:11 - to remove the first element from the
71:13 - array you call a method called a shift
71:17 - here okay and it's going to remove the
71:19 - first element from the array so let's
71:22 - save it and refresh the webpage and now
71:25 - you can see the first element tom is
71:28 - removed and the second third and fourth
71:30 - elements are here okay now if you want
71:33 - to add some element to the first place
71:36 - for example at index zero you can use
71:40 - unshipped methods so just right name
71:43 - start on shift and then you can add the
71:46 - value here for example Ben and then save
71:51 - your code and refresh the webpage and
71:53 - now you can see at the 0th index this
71:56 - name is added so in this way you can use
71:59 - arrays in JavaScript I hope you have
72:01 - enjoyed this video please rate comment
72:02 - subscribe and bye for now
72:04 - hello guys welcome to the next video on
72:06 - JavaScript tutorial for beginners in
72:08 - this video we will see how to use switch
72:11 - statements in JavaScript so let's get
72:14 - started for example I have a variable
72:18 - called score okay and this indicates the
72:22 - score of some student and I will
72:24 - initialize it with 90 right and I'm also
72:28 - going to initialize our variable called
72:33 - result to print some result okay now the
72:38 - syntax of switch statement so switch
72:41 - statement is also a kind of statement in
72:44 - which you evaluate some expression and
72:47 - then on the basis of expression you give
72:52 - your result or you perform some piece of
72:55 - code okay
72:56 - so let's see what is the syntax of
72:58 - switch statement so you use the keyword
73:01 - called switch and then inside these
73:04 - round bracket comes your expression and
73:06 - then inside the curly braces comes the
73:10 - cases on the basis of which you execute
73:14 - some code okay so this is some
73:18 - expression an expression means some
73:21 - conditioned on the basis of which you
73:24 - decide which case you will perform
73:27 - okay so expression can be score here
73:31 - okay so for example a student is scoring
73:35 - some marks and on the basis of marks we
73:38 - want to display some messages okay so in
73:41 - this case score is an expression and we
73:45 - are evaluating scores and on the basis
73:48 - of score so student we will perform some
73:51 - code and inside the switch statement
73:53 - comes that cases okay so you can add a
73:58 - case something like this with this colon
74:01 - and then you can perform your code so
74:05 - for example I just want to assign result
74:09 - is equal to some text for example very
74:14 - good okay and once your code is finished
74:19 - you break your switch statement with a
74:22 - keyword called break okay now in front
74:27 - of case comes your value so for example
74:31 - we want to say if our score is equal to
74:35 - 90 then we will return a result very
74:39 - good so here comes your value okay now
74:43 - you can define multiple switch cases
74:46 - inside a switch statement for example
74:49 - something like this and here you can say
74:53 - students scored 60 here you can say
74:56 - students code 44 even for example and
74:59 - here we can just return good and Fe
75:04 - scores 40 we can return okay right now
75:08 - for example student doesn't score 90 or
75:13 - 60 or 40 then in which case it will go
75:19 - okay so for this we have a default case
75:23 - right so just write a default keyword
75:28 - here and then you say result is equal to
75:32 - unknown okay so
75:35 - default condition is executed when
75:38 - neither of the cases are true okay so if
75:42 - the student doesn't score 90 or 60 or 40
75:47 - then it will go to the default case
75:49 - right now let's return our result and
75:54 - print it using this document dot get
75:58 - element by ID and demo is the ID of this
76:03 - paragraph tag here and I'm just
76:06 - assigning a result which is this
76:08 - variable here okay so save your code and
76:12 - just notice here that score right now is
76:15 - 90 right so I will refresh my webpage
76:19 - here I'd say is very good because score
76:22 - is 90 let's say score is now 60 save
76:26 - your code and refresh it once again and
76:29 - now the message is printed good right
76:32 - now let's say score is 45 which doesn't
76:36 - satisfy any of the cases then when we go
76:39 - to our webpage and refresh it it says
76:43 - unknown right so this situation is
76:46 - handled by the default condition right
76:50 - now you can also use some situations in
76:54 - switch cases without the break keyword
76:58 - right so for example I can also write
77:02 - case is equal to hundred here and for
77:06 - example one more case 95 here and if you
77:11 - notice here I am NOT writing the break
77:13 - keyword after this switch case right so
77:17 - what happens when you don't add a break
77:19 - keyword after a switch case so let's
77:23 - save our code and let's say our score is
77:27 - 95 okay which is this condition and save
77:31 - our code and refresh the webpage and
77:33 - says very good ok so what's happening
77:37 - here so in the case where the break is
77:41 - not added then it will jump to the next
77:45 - case and whatever the coup
77:48 - in the next case it will execute that
77:51 - code okay so the program flow will be
77:55 - something like this our switch case will
77:57 - ever a Lu 800 and the case is not
78:00 - hundred so it will go to 95 and it finds
78:03 - that 95 is the expression we are looking
78:05 - for but there is no break here so I will
78:09 - switch to the next case and in here the
78:13 - case is 90 and here this message is
78:16 - assigned to the result and then if we
78:19 - find that here is the break and then the
78:22 - switch case is broken and then you got
78:25 - your result ok so if you don't add a
78:29 - break after your case it will jump to
78:32 - the next case and perform the code which
78:36 - is under the next case and then if it
78:39 - has break then it will break your switch
78:42 - statement ok so if you want to you know
78:46 - evaluate multiple expression
78:49 - continuously then you use case without a
78:53 - break so in this way you can use switch
78:56 - statements in JavaScript I hope you have
78:58 - enjoyed this video please rate comment
79:00 - subscribe hello guys welcome to the next
79:03 - video on JavaScript tutorial for
79:04 - beginners in this video we will see how
79:07 - to use loops in JavaScript and in this
79:11 - particular video I'm going to show you
79:12 - how to use while loop and do-while loop
79:16 - in JavaScript so first of all what is a
79:19 - loop a loop is a piece of statement
79:23 - which will allow you to perform some
79:26 - piece of code again and again until and
79:30 - unless some condition is fulfilled right
79:34 - so let's say I have a variable called a
79:37 - and I will initialize it with zero okay
79:41 - and I will initialize one more variable
79:44 - called result and this I will use it to
79:48 - display some value now let's see how the
79:52 - while loop looks like so you use while
79:57 - keyword and then here comes your
80:00 - condition
80:01 - and then in the curly braces comes your
80:05 - code if your condition in this bracket
80:08 - is mad okay so this is for the condition
80:13 - this round bracket is for the condition
80:15 - and if your condition is met then the
80:20 - code inside these curly braces will be
80:23 - executed okay and if the condition is
80:27 - not met then it will once again perform
80:31 - the same code until and unless this
80:33 - condition is met so let's say we want to
80:37 - you know have the condition a is less
80:41 - than 10 okay so right now obviously a is
80:46 - equal to zero which is less than 10 so
80:49 - it will go inside the while loop and it
80:53 - will perform the code right so for
80:55 - example I will just say result is equal
80:58 - to a okay
81:01 - and for the simplicity I will just add a
81:04 - break tag here so just add this break
81:09 - tag so that it will be printed on the
81:12 - different line every time this code is
81:15 - executed right and this result I'm just
81:18 - passing here which will print this using
81:21 - this demo ID and I have this paragraph
81:24 - with ID demo here so in this paragraph
81:27 - this will be executed right now
81:32 - here if you notice that this condition
81:36 - will never be fulfilled if we write this
81:40 - kind of code right this condition is in
81:43 - finite condition because we are not
81:46 - increasing the value of a so the value
81:49 - of a is constant so our while loop will
81:53 - go on performing the code again and
81:56 - again infinitely right and this kind of
82:00 - infinite loop are also useful in some
82:03 - conditions but right now in our
82:05 - condition what we want to do here is
82:08 - let's say we want to increase the value
82:11 - of a by one every time it goes inside
82:15 - the
82:15 - okay now what I'm going to do here is
82:18 - I'm going to add this plus symbol or
82:22 - concatenation symbol here and what it's
82:25 - going to do is it's going to add the
82:28 - value of the string to this result every
82:31 - time it executes this code and one more
82:34 - thing what I'm going to do here is I'm
82:36 - going to initialize this result with
82:38 - empty string something like this okay so
82:42 - the value of result will not be
82:45 - ambiguous when it's initialized right so
82:48 - save your code and run it here and now
82:51 - you can see this is printing from 0 to 9
82:56 - okay so what happens here so in your
82:59 - while loop we know that this condition
83:01 - is obviously true 0 is less than 10 so
83:05 - it will go inside the while loop and
83:07 - perform this code and what this code is
83:10 - doing
83:11 - it's just assigning the value of a in
83:13 - the result right and then it goes here
83:17 - in the next line and it increases the
83:20 - value of a by 1 so the value of a
83:23 - becomes 1 here because it was initially
83:26 - 0 and then we add 1 here using this code
83:30 - and the value of a is 1 so it goes once
83:35 - again in the loop and it's check 1 is
83:37 - less than 10 yes so it performed this
83:40 - code once again and add this string to
83:44 - the result once again and then the value
83:47 - of a becomes 2 here right so in the in
83:50 - this way it will keep on looping 2 3 4
83:53 - until 9 reaches and in this case also
83:57 - this condition is true and it'll
83:59 - increase the value of a by 1 and then
84:02 - value of a becomes 10 which in here is
84:07 - false so 10 is not less than 10 so this
84:10 - condition is not true so this code will
84:13 - not be executed right so that's why it's
84:17 - printing the value from 0 to 9 okay now
84:23 - you can have something like this a is
84:27 - left
84:28 - or equal to 10 okay so in this case it
84:32 - will print from 0 to 10 because we are
84:35 - also evaluating equal to now okay or you
84:39 - can have different conditions here for
84:42 - example is greater than or a is not
84:46 - equal to 10 so you can evaluate
84:48 - different kind of conditions in this
84:51 - while loop here okay so this is how your
84:56 - while loop works now there is one more
85:00 - kind of loop which is called do-while
85:03 - loop okay and the syntax of this
85:06 - do-while loop is something like this so
85:09 - you use the keyword do first and then
85:13 - after the curly braces you say while
85:16 - okay and then the semicolon okay so in
85:22 - here it's the same you evaluate some
85:25 - condition inside these brackets right so
85:28 - what I'm going to do here is I'm going
85:30 - to declare one more variable and I'm
85:32 - going to name it as B and I'm going to
85:35 - initialize it with zero and this B I'm
85:39 - going to evaluate in this while loop
85:43 - condition so B is for example less than
85:47 - or equal to 10 the same situation which
85:50 - we have evaluated in here okay and we
85:54 - will just copy the same code from here
85:57 - and paste it in do-while loop and let's
86:01 - define one more valuable for example
86:04 - result 1 which is for do-while loop
86:07 - result 1 okay and let's define one more
86:11 - paragraph tag and this is demo one and
86:14 - here also I will define one more
86:18 - document dot get element by ID for demo
86:21 - 1 and here I will print result 1 okay
86:26 - and this will be B and this will be B
86:30 - okay so let's see what happens
86:33 - this is our while loop and this is our
86:35 - do-while loop ok so let's save the code
86:39 - and refresh the webpage
86:42 - and you can see here it prints the value
86:44 - from zero to ten using the while loop
86:47 - and once again when I go down it prints
86:50 - the value of zero to ten using the
86:54 - do-while loop so they are working in the
86:58 - same manner
86:59 - right so you will say what's the
87:01 - difference between them if they are
87:03 - working in the same manner so the basic
87:06 - difference between while loop and
87:09 - do-while loop is that while loop
87:12 - evaluates the condition first and then
87:16 - execute your code while the do-while
87:20 - loop performs your code for the first
87:24 - time and then evaluates your condition
87:27 - right so do-while loop no matter what at
87:31 - least one will execute the code inside
87:34 - these curly braces even if this
87:37 - condition is false so it's logical right
87:41 - it says do first and then evaluate the
87:44 - condition and in here we are first
87:46 - evaluating a condition and then
87:49 - executing the code so let's say we are
87:52 - evaluating that a is for example -1
87:56 - right and in here also as B we are
88:01 - evaluating the condition minus 1 which
88:04 - is false because B is equal to zero
88:07 - right and in the while loop also a is
88:10 - equal to zero right
88:12 - so save your code and refresh the
88:14 - webpage and it prints 0 which is due to
88:18 - this do loop so let's say we say do and
88:24 - here we say while so we can recognize
88:29 - from which line the zero is printed so
88:33 - just save your code and refresh it once
88:35 - again and you see once after do is
88:39 - printed then zero is printed right so
88:41 - it's coming from this line ok so what's
88:46 - happening here so here this condition is
88:50 - false so this code will not be executed
88:53 - but in here
88:55 - in the do-while loop first the code is
88:59 - executed and then the condition is
89:02 - evaluated so this code is executed once
89:06 - and then it goes to while loop and
89:08 - checks whether this condition is true or
89:12 - false and it's false so it's not going
89:14 - to loop it once again so this is the
89:17 - basic difference between while loop and
89:19 - do-while loop so I hope you've enjoyed
89:22 - this video please rate comment subscribe
89:24 - and buy from hello guys welcome to the
89:27 - next video on JavaScript tutorial for
89:29 - beginners in this video we will see how
89:31 - to use for loop in Java Script in the
89:34 - last video we have seen how to use while
89:37 - loop and do-while loop in JavaScript so
89:41 - for loop is also a kind of loop which
89:44 - you can use to execute your piece of
89:48 - code again and again right so let's see
89:52 - what is the basic syntax of for loop and
89:56 - then we will see why for loop is
89:59 - convenient and how it's used okay so in
90:04 - here you just need to use a for keyword
90:07 - and inside these round brackets comes
90:11 - three statements which I'm going to tell
90:14 - you in a moment and then in the curly
90:17 - braces comes your code okay now in here
90:22 - comes three statements which are
90:25 - separated by these semicolons right
90:28 - first statement which comes here is the
90:32 - initialization of a variable so if you
90:37 - remember in the last video when we have
90:39 - seen this while loop we have initialized
90:42 - the value of a is equal to zero here
90:46 - right at the top and for loop allows you
90:50 - to initialize your variables inside this
90:54 - bracket okay so for example you want to
90:58 - initialize a instead of here you want to
91:03 - initialize it here then you can do it
91:06 - with the help of for loop right
91:09 - then second statement comes here is the
91:14 - condition which is same as this
91:17 - condition which you have given in the
91:19 - while loop so second statement is the
91:21 - condition which you want to satisfy okay
91:24 - and third statement is the increment or
91:30 - decrement with whatever you want so for
91:33 - example in the while loop we have to do
91:35 - this increment inside the while loop but
91:39 - in the for loop it allows you to
91:42 - increment this value of a for example in
91:46 - these bracket itself okay so the for
91:51 - loop allows you to initialize your
91:53 - variable compare your variable and
91:56 - increment your variable in a single line
91:59 - right so this is really convenient when
92:02 - you want to iterate over some array for
92:04 - example right and let's say we want to
92:08 - just print the same result here okay and
92:11 - I will just comment this code for the
92:16 - while loop and save my code and refresh
92:19 - my webpage and it prints 0 to 10 right
92:24 - so in a lesser number of lines we have
92:28 - performed the same functionality as we
92:31 - have done in the while loop okay so this
92:35 - you can do here as a third statement
92:37 - this comparison you can do here as a
92:40 - second statement and this initialization
92:43 - you can do here as a first statement
92:46 - okay now it's not necessary that you
92:50 - need to initialize something here you
92:53 - can initialize the value of a here and
92:56 - it's totally fine and you can leave this
92:59 - first statement as blank also and when
93:02 - you refresh your page the result will be
93:04 - same okay
93:06 - or you can initialize the value of
93:08 - result so for example you want to
93:10 - initialize the value of result instead
93:13 - of a you can just do something like this
93:18 - here so you initialize the value of
93:21 - result here
93:22 - and then you just refresh your webpage
93:26 - and the result will be same also okay so
93:29 - you can initialize the value of a here
93:32 - and for example you want to initialize
93:35 - the value of result also you can do with
93:38 - a comma separator okay so you
93:41 - initialized a comma initialize the
93:44 - second value and then after the
93:48 - semicolon comes your condition so if you
93:50 - want to initialize multiple values you
93:53 - can do it separated by comma okay so the
93:57 - save your code and refresh it and result
94:01 - is same now for example I have an array
94:04 - called names here and I want to print
94:08 - the value of all the array one by one
94:11 - what I can do here is I can leave this a
94:15 - as it is and result also as a test so
94:19 - initialization is fine here but as a
94:23 - condition where we can give here a is
94:25 - less than the length of names so names
94:31 - dot length okay and this will give you
94:35 - the slant of this array right and then
94:38 - you can increment the value by one and
94:41 - in here if you want to print the names
94:44 - what we can do here is we can use the
94:48 - index property of array using this a so
94:52 - just write a and in the square bracket
94:55 - you just pass a okay because a is
94:59 - initially 0 and it will increment one by
95:02 - one in the for loop so it will iterate
95:05 - over each index one by one and it will
95:09 - print the names right so save your code
95:12 - and refresh your page and you can see
95:14 - all the names are printed one by one
95:17 - here now there is one more alternate way
95:19 - of using for loop and that's called for
95:23 - in loop and the syntax of that loop is
95:26 - you just use keyword for and then you
95:31 - use your variable for example you have
95:35 - declared of
95:36 - Abell VAR x for example right and then
95:40 - you just transfer here X and then in and
95:45 - then you can iterate over some object
95:48 - now object in JavaScript looks something
95:51 - like this so it will look something like
95:53 - a Jason which has associative property
95:57 - so for example like declare an object
96:00 - called student and it has some
96:03 - properties like name surname and age and
96:06 - we can give the value of name something
96:10 - like this surname something like this
96:13 - and it's something like this in the
96:15 - curly braces okay so this is called an
96:18 - object in JavaScript so you can iterate
96:21 - over the student object something like
96:25 - this so you just write x in student and
96:29 - what it will do is it will iterate over
96:32 - every element in this object for a first
96:37 - name and then second surname and third
96:40 - age and then it will transfer the value
96:43 - in here as X okay and then you can do
96:49 - the same so I will just pass this result
96:51 - here and I'm going to comment this for
96:53 - loop for now and what I'm going to do is
96:57 - I'm going to just take the student and
96:59 - pass it here and don't forget to give
97:02 - the value of x here inside the square
97:05 - brackets and save your code and refresh
97:08 - your webpage and now it gives the name
97:11 - surname and age as the value right so in
97:15 - here what you are doing you are
97:16 - iterating over the object and this will
97:20 - give you the value of each object so
97:24 - first it will give you the value of name
97:26 - then it will give you the value of
97:28 - surname and then it will give you the
97:30 - value of the age okay so in this way you
97:34 - can use for loop in Java Script I hope
97:37 - you have enjoyed this video please rate
97:38 - comment subscribe and buy from