00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in this
00:04 - video we will learn how to use exception
00:07 - handling in Python so first of all what
00:10 - are exceptions so an exception is an
00:14 - event which occurs during the execution
00:17 - of a program
00:18 - that disrupts the normal flow of the
00:22 - program
00:23 - so basically exception is an unexpected
00:28 - event which disrupts the normal flow of
00:33 - the program so let me show you some
00:35 - examples of exceptions which may occur
00:39 - during the execution of a program so to
00:42 - start with I'm going to open the pycharm
00:44 - Python consoles and then I'm going to
00:47 - maximize this PyCharm Python control and
00:50 - let me also just clear this terminal so
00:55 - we will start from the top so let's say
00:57 - we have a number and we divide this
00:59 - number by 0 and when we press ENTER it's
01:03 - going to give us this exception which
01:06 - says zero division error so this zero
01:09 - division error is an exception when you
01:12 - divide anything by zero in Python let me
01:17 - show you some more examples so let's say
01:19 - I want to add a number and a string
01:23 - let's say 10 plus 10
01:26 - but this then is an integer and this 10
01:29 - is a string and when I run the command
01:32 - it says type error unsupported operand
01:36 - types for int and string so we cannot
01:39 - add a number and a string in Python so
01:43 - this type error is another kind of
01:46 - exception let's say I'm going to just
01:49 - use a variable name a b c which i
01:54 - haven't declared till now and when i
01:57 - press enter it's going to once again
01:59 - give me this exception which says name
02:02 - error name ABC is not defined which is
02:05 - true because we haven't defined the name
02:08 - ABC but we are calling this variable
02:11 - which we haven't defined so we
02:13 - this exception which says name error
02:16 - next let me define a variable and I'm
02:19 - going to assign some couple values here
02:22 - one and two and now what I want to do is
02:25 - I want to call some methods so you can
02:28 - see some methods are available for this
02:32 - tuple now let's call some random method
02:35 - using this double variable it will give
02:38 - us an error which says attribute error
02:41 - double object has no attribute whatever
02:44 - attribute I have provided here so this
02:46 - attribute is not present in the tupple
02:49 - object also when you call a method
02:53 - let me call some other method which is
02:56 - not there and once again when I press
02:58 - ENTER once again I get this error which
03:01 - says attribute error because this
03:04 - function is not present in the tupple
03:07 - object so these are all exceptions in
03:10 - Python attribute error or name error or
03:14 - type error or zero division error all
03:17 - are exceptions in Python now if you want
03:20 - to see more exceptions you can use the
03:23 - help
03:24 - inbuilt method and then you can write
03:27 - built-ins and then press Enter
03:29 - it gives me the name error once again
03:31 - because I need to first of all import
03:35 - this built-in module so import built-ins
03:39 - and I'm going to once again use help and
03:41 - inside the parentheses built-in and then
03:44 - press Enter which is going to give me
03:47 - this kind of output and when I go at the
03:50 - top of this output so let me just scroll
03:53 - at the top and here you will see under
03:56 - the classes there is an object class and
04:00 - under the object class there is a base
04:02 - exception class and under the base
04:04 - exception comes the exception class and
04:06 - under the exception there is a big list
04:09 - of exceptions which you can see here so
04:12 - 0 division error we have already seen or
04:15 - when you scroll down name error we have
04:18 - already seen so all the exceptions which
04:20 - Python may throw are all listed here so
04:24 - if you want to see the list of all the
04:26 - exceptions
04:27 - you can just give this method which is
04:30 - help built-in but before that you need
04:33 - to import this built-in module and then
04:36 - it's going to show you this kind of
04:38 - output and you will also be able to see
04:40 - all these exceptions in Python now let
04:44 - me show you a real life example of
04:47 - exceptions in Python so what I'm going
04:50 - to do is I'm going to define some
04:52 - variables here so first variable is
04:54 - result and I'm going to initialize it
04:56 - with the value none and then I'm going
05:00 - to declare two variables let's say a
05:04 - which takes an input and we want to ask
05:07 - the user to provide some numbers so
05:09 - let's say number one using the variable
05:14 - a and in the same way I'm going to
05:16 - declare a variable B which also asked
05:19 - the user to provide a second number but
05:22 - you already know that this input will
05:24 - return the string so we can just convert
05:28 - this string into a float let's say so
05:31 - I'm going to just cast the output output
05:33 - of this input string to a float value
05:38 - and then what I want to do is I want to
05:40 - save the division of the two numbers a
05:43 - and B into the result so a divided by B
05:47 - I want to save it into the result and
05:50 - then at last I would just want to print
05:53 - the value of the result now let's run
05:56 - this program so right click run the file
05:59 - name and then let me provide some
06:01 - numbers here so 5 and 6 and press Enter
06:07 - it's going to give me the result which
06:10 - is the division of these two numbers let
06:12 - me run the program once again and this
06:15 - time I will provide 10 and the second
06:18 - number is equal to 0 here and we know
06:21 - that when we divide some number y 0 we
06:24 - get this exception which says zero
06:27 - division error and you will also observe
06:30 - that as soon as this error is thrown so
06:34 - this error comes from this line line 5
06:36 - so when you click on this line it shows
06:39 - us that this
06:40 - is coming from this line which is the
06:42 - division of these two numbers and as
06:45 - soon as this exception occurs all the
06:47 - code which we want to execute after that
06:51 - will not be executed so we were printing
06:54 - this result here but it's not printed
06:57 - let me print something else here so I'm
07:00 - going to just say end and once again I'm
07:03 - going to run the program and I'm going
07:05 - to provide the same inputs here and you
07:08 - can see neither this statement is
07:12 - printed nor the end is printed so
07:16 - whenever an exception occurs title stops
07:19 - whatever it is doing so in our case
07:22 - whenever this exception is thrown at
07:24 - this line both these statements will not
07:28 - be executed and why these two lines of
07:31 - code will not be executed because we
07:33 - haven't handled this exception so Python
07:38 - allows us to handle the exception which
07:40 - we are not doing right now that's why it
07:43 - stops everything whenever this exception
07:47 - occurs so how to handle these type of
07:49 - exceptions so you can handle these type
07:52 - of exceptions using a try accept keyword
07:57 - so just write try and then under the try
08:01 - you write whatever you want to test and
08:03 - then you write accept keyword here so
08:06 - just write accept and then under the
08:08 - accept you write some code which you
08:12 - perform when the exception is thrown so
08:15 - I'm going to just say this error which
08:18 - is float division error okay so this is
08:22 - what I'm going to print and don't forget
08:24 - to put colon in front of accept and try
08:28 - so let me run the code and let me give
08:30 - the same condition so 10 and second is 0
08:33 - and this time you will see that this
08:36 - exception is not thrown and the result
08:40 - is also printed and the end line is also
08:43 - printed you can see here and also this
08:46 - line is executed which comes from the
08:50 - accept statement which says float
08:53 - division error
08:54 - so whenever you use try/except notation
08:57 - first of all your code under a tribe
09:00 - will be evaluated and if it throws some
09:03 - exception then whatever code you write
09:05 - under the accept will be executed and
09:08 - then all the other statements will be
09:10 - executed whatever comes after this try
09:13 - except code so this time no error is
09:17 - thrown and we have handled this error
09:20 - and you can see clearly it says that
09:23 - flow division by zero which means it
09:26 - comes to the accept condition so now we
09:30 - are handling this error which is zero
09:32 - division error now in other condition
09:35 - when this error is not thrown so we will
09:38 - just give some valid value ten and five
09:41 - so no zero division error will be thrown
09:45 - and when I press ENTER you will see that
09:48 - result will be printed and and will be
09:51 - printed by these two lines but no accept
09:55 - statement will be printed so this
09:57 - statement is not executed because this
10:01 - code has not thrown any error because
10:04 - there is no error occurred now as I have
10:06 - shown you that all the exceptions are
10:10 - under exception class so we can also
10:13 - write here exception and then we can
10:17 - just write this notation exception as E
10:21 - and this will show us more details of
10:25 - the error okay so I'm going to just
10:28 - write here error is equal to and then
10:33 - I'm going to just print whatever the
10:35 - content of e is and once again when I
10:38 - run the code and I will give the number
10:42 - it's the zero here and you will see it
10:45 - prints this error which says float
10:49 - division by zero so this is printed
10:52 - using this iki word which shows us the
10:55 - correct error I have also shown you that
10:58 - this exception is the base class of zero
11:01 - division error for example when I will
11:04 - try to know the type of there
11:07 - at E and when I run the code once again
11:10 - and let me provide this input once again
11:14 - you will see that this error is of type
11:17 - zero division error so we know that this
11:20 - exception is thrown from this class so
11:22 - instead of writing this generic
11:25 - exception class we can also use this
11:28 - zero division error here and now
11:30 - whenever this specific error is thrown
11:34 - then only this will be printed here so
11:38 - let me run the code once again and let
11:41 - me give this input here and you will see
11:43 - once again this line of code is printed
11:45 - using this statement and that means zero
11:48 - division error is caught by this line of
11:51 - code and then the statement under that
11:54 - is printed now let's say this line of
11:57 - code throws some other kind of error
12:00 - other than zero division error so let me
12:03 - just remove this typecasting or float
12:06 - here that means it's going to throw us
12:09 - some other kind of error which is not
12:11 - zero division error and let me run the
12:14 - code now and I will provide two numbers
12:17 - here once again and you will see that
12:21 - now this error is different which is
12:24 - type error which says unsupported type
12:28 - string and float so why is this
12:31 - happening we are catching the exception
12:34 - using this except keyword but we are
12:37 - only catching the zero division
12:39 - exception we are not catching that type
12:42 - error exception that's why our program
12:45 - is stopped and these two lines of code
12:48 - is not executed so you need to either
12:52 - use the base class of the exception
12:55 - which is this one exception and when you
12:57 - run the code and when you write these
13:00 - input it will be handle and you can see
13:03 - this time type error is caught it's not
13:07 - a zero division error but the type error
13:09 - which comes because the type which we
13:13 - have provided here is string and we are
13:15 - dividing string by a float value which
13:19 - throws this error so if you want
13:21 - catch all the exceptions you use this
13:24 - base class but it's not a good practice
13:26 - you need to have information about your
13:29 - exceptions so I'm going to once again
13:31 - write this zero exception error here and
13:34 - what I can do more here is I can add one
13:38 - more except statement here and this time
13:41 - instead of zero division error I can say
13:44 - catch also type error okay so I'm going
13:49 - to just write type error and here zero
13:53 - division error so we know from where
13:55 - this error is coming and when I run the
13:58 - code once again and when I give the
14:00 - inputs you will see that this error is
14:04 - coming from this line of code so this
14:08 - except statement is catching your
14:11 - exception which is type error now when I
14:14 - just add this typecast of float once
14:18 - again and when I run the code once again
14:20 - and when I provide ten and zero once
14:23 - again you will see this error is caught
14:26 - by the other accept statement which is
14:30 - this statement which is used to catch
14:34 - the zero division error so you can also
14:37 - provide multiple accept statement in
14:40 - order to catch multiple exceptions in
14:44 - Python so this is how you can do
14:46 - exception handling in Python there is
14:49 - more to exception handling which I will
14:51 - cover in the next video so please stay
14:54 - tuned and I will see you in the next
14:57 - video