00:01 - hello and welcome back to the new video
00:02 - of the Java tutorial Series so today
00:04 - we'll be covering method overloading in
00:05 - Java so what is Method overloading if a
00:08 - class has multiple methods having the
00:10 - same name but there are different differ
00:12 - in parameters okay then it is known as
00:14 - method overloading if the two methods
00:17 - are there which names are same for
00:20 - example sum is the name of the two
00:22 - methods but so that so how we can defer
00:25 - the two methods okay so when the
00:28 - parameter one if the one method is
00:31 - accepting two two parameters and another
00:32 - one is accepting one or either more than
00:35 - two not not exactly two then it is a
00:38 - type of a method overloading in Java
00:40 - okay where the same name method has the
00:43 - same name but they differ in the
00:44 - parameters they are accepting okay
00:46 - so if we have to perform only one
00:48 - operation having the same name or the
00:50 - methods increase the readability of the
00:52 - program okay suppose you have to perform
00:54 - a addition of the two given numbers but
00:57 - there can be any any number of the
00:59 - arguments okay if if you write the same
01:01 - method such as int a uh
01:04 - method name is a and it is accepting two
01:08 - parameters of type integer integer okay
01:09 - for the two parameters and another one
01:11 - is int B which is accepting as a three
01:14 - parameter int okay for three parameters
01:17 - then it it may be difficult for you as
01:19 - well as the other programmers to
01:20 - understand the behavior of the method
01:22 - because it's it has this it has the same
01:25 - name differs okay so we perform the
01:27 - method overloading to figure out the
01:29 - program quickly okay and what are the
01:31 - advantages of the method overloading
01:33 - method overloading increase the
01:34 - readability of the program okay and so
01:38 - let's just talk about the different ways
01:40 - to over overload a method okay so there
01:43 - are two methods uh by which you can
01:45 - overload the method method overloading
01:47 - by changing the number of the arguments
01:49 - uh the method is accepting and the
01:52 - method overloading by changing the data
01:53 - type of the argument which is accepting
01:55 - okay
01:57 - so let me just quickly go into my IDE
02:01 - we'll cover this popular question also
02:03 - uh but but let first we will code
02:07 - C1 example of the method overloading
02:10 - then we will see some popular method uh
02:13 - questions sorry
02:14 - okay method
02:16 - overloading
02:19 - okay let me increase the font size
02:23 - and first we will see a example of the
02:27 - method overlading by changing the number
02:30 - of the arguments okay let me copy this
02:32 - and I will give it a comment okay
02:36 - now
02:37 - okay so let me take
02:39 - one example okay uh what I can do is I
02:44 - will declare one method name as
02:48 - int
02:50 - add and it is accepting the two
02:52 - parameter let's suppose into a and
02:57 - B okay and inside this I'm simply
03:00 - returning
03:03 - a plus b nothing else okay and I will
03:07 - introduce one more method
03:11 - which is inside this same class
03:13 - which is static
03:16 - int
03:17 - add
03:19 - same name of the method here you can see
03:21 - add is the method name and here also add
03:23 - is the method name but what I what I
03:25 - will do is I will change the number of
03:27 - the parameters it are accepting okay now
03:29 - int a comma int B
03:34 - comma in C
03:37 - and I will simply return
03:39 - a plus b plus sorry
03:45 - C
03:47 - fine
03:49 - okay I will I will return this okay okay
03:52 - so now I will create my main method and
03:56 - inside my main method I will
03:59 - print
04:02 - add
04:04 - off
04:06 - uh let's suppose 11 comma eleven okay
04:11 - and now again I will print one more
04:15 - statement uh once again guys
04:19 - okay so I will just print
04:24 - call another method now I am giving 11
04:28 - comma 11 comma eleven here you can see
04:32 - us method name or same add and add but
04:34 - they differ in the parameters they are
04:36 - accepting one method is accepting the
04:38 - two parameters one another method is
04:39 - accepting the three parameters okay so
04:42 - this is the example of the method
04:43 - overloading changing the number of the
04:45 - arguments we are passing okay and simply
04:47 - I will run this
04:49 - class
04:51 - and you're guessing 11 plus 11 that is
04:54 - 22 for the first print statement and
04:56 - another pin statement 11 plus 11 plus 11
04:59 - is that is 33 is getting printed on the
05:02 - console okay so another meth another way
05:04 - to achieve the method overloading is
05:06 - changing the data type of the argument
05:08 - okay so I will just copy this
05:14 - and paste it over here
05:22 - okay so now
05:25 - let me comment this out
05:30 - okay
05:31 - now I will
05:34 - again I will have to declare one int
05:37 - method okay I will copy this and I will
05:39 - paste it over here and let me
05:43 - uncomment it okay one add method is
05:46 - there which is returning uh addition of
05:48 - the two methods two numbers A and B and
05:51 - one another method is there name is
05:54 - static
05:56 - double
05:59 - add
06:02 - and it it accepts two parameters double
06:05 - A
06:07 - comma double
06:09 - B
06:11 - okay and now it will return the addition
06:15 - of this
06:17 - two numbers okay
06:21 - okay now I will write my main method
06:24 - and inside my main method I will print
06:27 - call those methods add
06:29 - but I had to give 11 comma eleven
06:36 - and for another print statement I will
06:39 - call another ad
06:42 - method
06:44 - but this time I will pass
06:47 - uh
06:48 - 11.2 comma 11.5
06:54 - 11.5
06:59 - okay so here you can see uh two same
07:02 - method same two methods having the same
07:05 - name and same number of parameters they
07:07 - are accepting one add method is
07:09 - accepting to two parameters integer a
07:10 - and integer B and another uh method
07:13 - which is accepted the two parameter that
07:14 - uh that is a and b but they are
07:16 - different in the return type they are
07:18 - returning okay the first method is
07:20 - returning uh in integer and second
07:23 - method is returning and double so this
07:26 - is a way we can achieve the method
07:28 - overloading by changing the data type of
07:30 - the argument okay argument here in it
07:33 - receive it was receiving in the integer
07:35 - format and here it was receiving the
07:36 - double format okay and so now if I run
07:39 - this
07:40 - class
07:42 - I should get the okay 11 plus 11 is 22
07:46 - and 11.2 plus 11 11.5 is 22.7 so these
07:51 - are the two methods by which you you can
07:52 - achieve
07:54 - method overloading in Java one one is
07:56 - changing the arguments and another one
07:58 - is changing the data type of the
08:00 - argument okay some popular question
08:01 - which is asked frequently uh during the
08:05 - interview versus uh div of method
08:07 - overloading one is why method
08:08 - overloading is not possible by changing
08:10 - the return type of the method only okay
08:12 - so in Java method overloading is not
08:14 - possible by changing the return type of
08:16 - the method only because of the ambiguity
08:18 - let's see how the ambiguity May occurs
08:20 - okay so I will take one example
08:23 - uh let me go let me get into my class I
08:27 - will increase the font size
08:29 - and here I will create one same method
08:32 - same example I am taking
08:35 - let me print
08:39 - okay and now I will
08:42 - be writing the same double method also
08:45 - okay I will
08:46 - just copy this
08:48 - and paste it over here
08:51 - and comment this
08:54 - okay uh so all these steps let me
08:58 - introduce a new class
09:06 - adder
09:08 - and inside this I will write these two
09:10 - method okay and now inside this I will
09:15 - write my main method and main method I
09:18 - will simply
09:21 - print
09:24 - adder
09:25 - sorry
09:26 - editor dot add
09:30 - 11
09:31 - comma 11.
09:34 - okay
09:37 - so here you can see I've created one two
09:39 - methods uh int add and double add they
09:43 - are written there the return type of the
09:46 - two methods are different that is inth
09:48 - and one is it returning
09:50 - a double okay and now if I come here and
09:54 - try to print this statement add a DOT
09:56 - add 11 comma eleven it will create an
09:59 - ambiguity
10:00 - why so
10:02 - here you can see
10:05 - int and IntelliJ IDEA is telling me
10:08 - there's some error and what is what's
10:10 - there add int is already defined in
10:13 - Adder so it creates an ambiguity for the
10:16 - Java
10:17 - it it for here you can see we are
10:21 - calling this add method 11 comma eleven
10:24 - but the return types are different one
10:26 - is double and one is integer but the
10:28 - number of the parameters they are
10:29 - accepting are the same and the type of
10:31 - the parameters they are acting accepting
10:33 - is are also same it creates an ambiguity
10:35 - for the Java programming language
10:37 - and it can't differentiate the two
10:40 - methods are there of the different types
10:42 - okay so this creates an ambiguity and
10:45 - one more question is there can we
10:47 - overload the Java main method
10:50 - yes by Method overloading you can have
10:53 - the number of the main methods in the
10:54 - class by Method overloading but the jvm
10:56 - calls main method which receive the
10:59 - string array as an argument only okay so
11:02 - here you can see we are passing this is
11:04 - the main method and jvm received this
11:06 - main method and our program execution
11:08 - starts from this line number 38 and it
11:10 - accepts the arguments of type string
11:13 - array okay here you can see we are
11:15 - passing a argument of type string array
11:19 - and let's this is how you can overload
11:23 - the main method also in Java okay so
11:26 - thank you for watching this video