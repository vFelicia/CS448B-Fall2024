00:00 - hello guys welcome once again in the
00:02 - last two videos I have been showing you
00:04 - how to use if else conditions in C now
00:08 - in this video I'm going to uh teach you
00:10 - about the Turner or conditional operator
00:14 - in
00:15 - C uh this is also uh used to make
00:19 - decisions in C but uh whenever you want
00:24 - to make uh a decision which is you know
00:29 - very short and and uh you want to do it
00:31 - in a single line uh this Turner
00:34 - conditional operator can be useful now
00:38 - how to use this tary conditional
00:41 - operator so for example I have two
00:45 - integer variables integer a is equal to
00:49 - for example 10 here or 19 or and integer
00:54 - B is equal to 20 for example okay now
01:00 - now I want to compare these two uh
01:04 - integers I can do it with the help of if
01:08 - conditions but for comparing uh and
01:11 - writing if and then else this can be uh
01:15 - little bit uh longer expression in terms
01:18 - of code in to compare these two the
01:22 - shorter form of comparing these two uh
01:27 - integers can be for example I can clear
01:30 - integer C and I want to transfer the
01:36 - greater of these two values A and B
01:39 - which is B to C so I want to compare A
01:42 - and B and whatever uh variable is
01:47 - greater or whatever values value uh is
01:52 - greater then we want to transfer this
01:55 - value to C okay so there is a operator
02:01 - called Turner operator which is like
02:05 - this it's used like this so you have
02:09 - this bracket and in this bracket you uh
02:13 - just write your condition as you write
02:16 - in the if condition and then you give a
02:19 - small question mark here and then if the
02:23 - condition is true you can uh transfer or
02:27 - pass the Val value to your result from
02:34 - here otherwise if the value is false
02:37 - then the value which is contained after
02:40 - this colon will be transferred to your
02:43 - uh value or will be returned so I will
02:46 - give you an example what I mean by this
02:51 - so for example I want to have C is equal
02:55 - to the greater of these from these two
02:59 - values A and B so I will compare these
03:03 - two values like this if
03:07 - a is greater
03:10 - than b which is not greater than b
03:15 - obviously then I'm asking uh C so I will
03:19 - give this question mark and then if a is
03:22 - greater than B I want to
03:26 - return for example a
03:30 - okay or if a is greater than B I want to
03:34 - return B otherwise a so if a is greater
03:39 - than B I will
03:41 - return uh B which is like this or else I
03:47 - will return a okay so this will be uh
03:52 - executed by C like
03:55 - this this bracket will compare the
03:58 - condition if a is greater than b
04:01 - obviously in our condition a is not
04:03 - greater than b because 19 is not greater
04:06 - than 20 then it will return b b is which
04:11 - is 20 right otherwise if the value of a
04:16 - is greater than b then it will once
04:21 - again return B right so in our condition
04:26 - what will happen a is greater than b
04:28 - which is not not true then this
04:32 - condition will be return return a is
04:33 - return if the condition is fulfilled the
04:37 - first uh parameter is return if the
04:41 - condition is false then the second
04:44 - parameter will be return so the value of
04:47 - C in our case will
04:50 - be what will be the
04:53 - value a will be the value 19 right so we
04:57 - can print this value
05:01 - print F and then in the double
05:06 - quote uh answer for example answer is
05:09 - equal to percentage
05:12 - T
05:14 - comma value of C we want to print value
05:18 - of C right I will compile and run this
05:22 - program and let's see what will be the
05:25 - answer I forgot the semicolon here so
05:28 - once again comp file and run the
05:30 - program and the answer here is
05:35 - 19
05:36 - because a is not greater than b then it
05:40 - will return the second argument because
05:42 - our condition is false so it will return
05:45 - the second argument if the condition is
05:48 - true it will return the first argument
05:51 - so in our case the condition is false
05:54 - because a is not greater than b then it
05:56 - will return the second param which is a
06:01 - which is 19 now for example the value of
06:04 - a changes to
06:06 - 25 what will happen now our condition is
06:10 - true 25 is greater than 20 then it will
06:15 - be returned like this B will be returned
06:20 - because the condition is
06:21 - fulfilled and we have seen that if the
06:24 - condition is fulfilled then the first
06:28 - parameter will be returned right so when
06:32 - I compile and run the
06:34 - program it will return 20 right because
06:39 - the value of B is 20 okay so in this way
06:44 - you can uh use this Turner conditional
06:48 - operator in C now you may ask what uh is
06:53 - the performance difference between this
06:55 - Turner operator and if else condition
06:58 - because you can
06:59 - also write if condition to compare A and
07:03 - B right so there is uh there are
07:07 - arguments about the performance some
07:09 - says uh the performance of Turner
07:12 - operator is faster than uh if El's
07:15 - condition but the benefit of this Turner
07:20 - operator is if you want to uh write your
07:25 - code in one line because if you would
07:28 - have a used if condition you would have
07:32 - written at least four or five line but
07:35 - this is simple uh looking and it's it's
07:40 - serving your purpose and it will not
07:43 - even killing your performance right so
07:47 - it's uh more you know
07:49 - visibly uh good and you can you know
07:54 - directly by seeing this you can say what
07:58 - uh you the pro programmer wants to write
08:01 - rather than uh writing those long if
08:04 - else condition so always if you want to
08:08 - uh compare two values and you have only
08:12 - if or else condition then you can
08:16 - replace it by this Turner conditional
08:19 - operator so I hope you have understood
08:22 - the this basic concept of Turner
08:24 - conditional operator in C uh and I hope
08:28 - you have enjoyed this video please
08:29 - please RIT comment and subscribe and bye
08:30 - for now