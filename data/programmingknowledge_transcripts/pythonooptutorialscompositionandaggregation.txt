00:00 - in this video I'm going to show you what
00:02 - is composition and how to use class
00:05 - composition in Python so to start with I
00:08 - have two classes here one is an employee
00:12 - class and other is the salary class now
00:16 - in the salary class I have this init
00:18 - method which takes two argument P and
00:21 - bonus and it sets these two arguments to
00:24 - the member variables of this class also
00:27 - I have a method called annual salary
00:29 - which is used to calculate the salary
00:31 - now in the employee class I have this
00:35 - constructor which takes four arguments
00:37 - which is name age P and bonus now what
00:43 - do you think can we apply inheritance
00:45 - here the answer is no because there is
00:48 - no is our relationship between salary
00:51 - and employee so employee is not a salary
00:54 - and salary is not an employee but
00:57 - somehow I want to delegate the
00:59 - responsibility of calculating the
01:02 - employee salary to the salary class
01:04 - because calculating salary is in itself
01:07 - is a big task I have just simplified
01:10 - this class in the form of just
01:13 - calculating the annual salary but the
01:17 - employee can have his own taxes or he
01:20 - has taken some leaves or many factors
01:23 - affects the salary of an employee so
01:27 - this salary calculation let's say we
01:30 - want to delegate to the salary class but
01:33 - whose salary is this this salary is the
01:35 - employees salary so we know that we
01:38 - cannot use inheritance here but we can
01:42 - use a concept called composition here
01:45 - and the composition means that we are
01:49 - just delegating some responsibilities
01:52 - from one class to the another class so
01:55 - how to delegate this responsibility we
01:58 - can just create one more variable here
02:02 - for example self dot obj underscore
02:06 - salary which is the salary object we are
02:09 - going to create using the salary class
02:13 - okay and this salary class takes two
02:16 - parameters one is pay and other is bonus
02:19 - which we are already providing using the
02:23 - employee init method so I'm going to
02:25 - just pass this pay comma the bonus into
02:30 - the salary class so we are instantiating
02:33 - the salary class inside the employee
02:36 - class so here one class which is an
02:40 - employee class acts like a container of
02:44 - the other class which acts like a
02:47 - Content
02:48 - okay so salary class is the content and
02:51 - the employee class is the container of
02:54 - this salary class now in order to
02:57 - calculate the total salary we can define
02:59 - one more method here and I'm going to
03:01 - just say total underscore celery and
03:05 - then what we are going to do is we are
03:08 - going to call our object salary member
03:11 - variable because this gives us the
03:15 - object of the salary so I'm going to
03:17 - just call object salary and we can call
03:20 - this method from the salary class which
03:22 - gives us the annual salary and now I'm
03:25 - going to just create the object of this
03:28 - employ class so let me just write EMP is
03:32 - equal to employee which takes four
03:35 - parameter first is a name second is the
03:39 - age third is the piece so let's say P is
03:45 - 15,000 and the bonus is 10,000 and now I
03:49 - just want to print the total salary of
03:52 - this employee so I can just write print
03:55 - and then EMP object dot the total salary
04:00 - which is total salary method and you can
04:03 - see here this total salary is returning
04:05 - let me just use the return keyword also
04:08 - because we are returning this annual
04:11 - salary from the salary class using this
04:14 - total salary method so let's run the
04:16 - code once again and let's see what
04:18 - happens and you can see annual salary is
04:20 - printed and this annual salary is
04:22 - calculated using the salary
04:26 - so what this employee class has done it
04:30 - has delegated some responsibilities to
04:34 - the other class which is the salary
04:36 - class which gives us the annual salary
04:40 - of an employee and this here is called
04:43 - composition now one interesting thing
04:45 - which you will notice here is we are not
04:48 - instantiating salary here we are just
04:52 - instantiate the salary inside an
04:55 - employee class so as soon as you delete
04:59 - an instance of an employee the salary
05:02 - class instance will be automatically
05:05 - deleted so whenever you want to delegate
05:08 - some responsibilities of one class to
05:11 - the another class it's called
05:13 - composition one more example of
05:15 - composition can be a book class and a
05:19 - chapter class so a chapter is not a book
05:24 - and book is not a chapter but we can
05:27 - delegate some responsibilities from a
05:30 - book class to the chapter class so this
05:33 - is how you can use composition in Python
05:35 - now in composition the relationship
05:38 - between the classes which have some
05:40 - Association is represented by a keyword
05:44 - part of so salary is the part of
05:48 - employee so the key word we use in
05:50 - composition is part of now let's see how
05:54 - we can use aggregation instead of
05:56 - composition between these two classes so
06:00 - let's say I will not use this salary
06:02 - class inside the employee class but what
06:06 - I'm going to do is I'm going to pass an
06:09 - instance of celery here so I'm going to
06:12 - just write celery and this will be the
06:15 - object of celery class which I'm going
06:19 - to pass in the init method of the
06:23 - employee class so let's create an object
06:27 - of the salary so I'm going to just write
06:30 - salary here is equal to the salary class
06:33 - and we will instantiate the salary class
06:37 - by these two argument which
06:40 - have given in the last video to the
06:42 - employee class so I'm going to just copy
06:44 - these two arguments and paste it here
06:46 - and I'm going to remove this comma here
06:49 - so now what we are doing here is we are
06:51 - first of all instantiating the salary
06:55 - class and now the salary class we can
06:57 - pass to the constructor of the employee
07:01 - class and this is the object which we
07:04 - have passed using the salary class
07:06 - object and then I'm going to take the
07:09 - salary class object and I'm going to
07:10 - assign the salary class object to the
07:13 - member variable of the employee class
07:15 - which is obj underscore salary now
07:18 - because we are passing the salary object
07:21 - that means this member variable is the
07:23 - salary member object and we can call any
07:26 - public method from the salary class
07:28 - using this member variable now so let's
07:31 - run the code and let's see what happens
07:33 - and we get the same result as we have
07:35 - seen in the last video in the
07:38 - composition example so what we have done
07:40 - differently here so instead of using
07:43 - this salary class inside the employee
07:45 - class we have first created an instance
07:49 - of the salary class and then we have
07:51 - passed this instance to the employee
07:54 - constructor which can be used inside the
07:58 - employee class and this type of
08:00 - relationship is called aggregation now
08:03 - let's see what are the special
08:04 - properties of the aggregation the first
08:07 - property is the relationship between the
08:11 - associated classes in aggregation is
08:14 - defined by the keyword has a so employee
08:18 - has a salary because now we are first of
08:21 - all creating the salary object and then
08:24 - passing it to the employee so now we are
08:27 - not directly using salary inside the
08:30 - employee class the second property of
08:32 - aggregation is the associated classes
08:36 - have uni-directional Association so we
08:40 - are just passing salary object to the
08:43 - employee class we are not passing
08:46 - employee object to the salary class so
08:49 - it's a unidirectional Association only
08:52 - salary
08:53 - can be passed to employee not the other
08:57 - way around and the third property of
08:59 - aggregation is we have created the
09:02 - salary object and the employee object so
09:05 - both these objects are independent of
09:08 - each other so if one object dies the
09:11 - other survived so both the object are
09:14 - able to survive individually so these
09:17 - are the three properties of aggregation
09:19 - now let's see the difference between the
09:21 - composition and the aggregation so I'm
09:24 - going to split the screen so I'm going
09:25 - to just right click on this tab and I
09:28 - will say split vertically and here I'm
09:31 - going to open the example of the
09:35 - composition so on the right hand side I
09:37 - have the example of composition and on
09:39 - the left hand side I have the example of
09:41 - aggregation let me just maximize this so
09:45 - you can see it and now let's discuss
09:47 - about the differences between the
09:50 - composition and aggregation so the
09:54 - relationship in composition is defined
09:57 - by a keyword called part of so salary is
10:03 - the part of employee in aggregation
10:06 - there is no part of relationship but the
10:10 - relationship is defined by the keyword
10:12 - called has a so now in aggregation we
10:15 - are defining the instance of salary and
10:17 - then passing it to the employee class
10:21 - and salary is not the part of the
10:24 - employee class we are just passing it to
10:27 - the employee class so aggregation we use
10:29 - has our relationship and in composition
10:32 - we use part of relationship the second
10:36 - difference is when you delete the
10:38 - employee object the salary object will
10:42 - be automatically be deleted so salary
10:46 - object is dependent on the employee
10:49 - class but in aggregation the salary
10:53 - object and the employee object are
10:56 - individually independent so they can
10:59 - survive individually if one object dies
11:02 - then it doesn't matter that the other
11:04 - object dies because we have created
11:07 - object individually now in composition
11:10 - both salary and employee are
11:12 - interdependent on each other but in
11:15 - aggregation the relationship is
11:18 - unidirectional so the association
11:21 - between the employee and the salary
11:24 - object is unidirectional we can only
11:26 - pass the salary to the employee class
11:29 - but we cannot pass the employee object
11:33 - to the salary class so these are the
11:35 - three major differences between
11:37 - composition and the aggregation I hope
11:41 - you have learned something new this time
11:43 - and I will see you in the next video