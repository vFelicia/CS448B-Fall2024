00:00 - hey what's up lace welcome back to our
00:02 - YouTube channel and welcome to this
00:03 - video this is John from programming
00:05 - knowledge and in this video guys we're
00:07 - going to learn how to use C function
00:10 - arguments or parameters inside our
00:13 - function so from the previous tutorial
00:16 - we have learned how to define and
00:18 - declare our function inside our C
00:21 - program and of course we have learned
00:23 - how to use the basic syntax to create a
00:26 - function and implemented a simple
00:29 - function that could add two numbers okay
00:33 - so as I've said guys in this video we're
00:35 - going to focus on the function arguments
00:37 - or function parameters so while calling
00:40 - a function the arguments can be passed
00:42 - to a function in two ways so there there
00:46 - are two ways on how we could pass the
00:50 - parameters or the arguments into the
00:53 - function so the first one will be called
00:56 - by value and the second one is called by
01:02 - reference okay so in call-by-value way
01:07 - the actual parameter is passed the
01:09 - function and then new memory area
01:13 - created for that particular passed
01:15 - parameters and then it can be used only
01:17 - within that function and the actual
01:21 - parameters cannot be modified in the
01:24 - call by value way of you know passing
01:27 - the the argument into our function while
01:31 - call by reference so instead of copying
01:34 - a variable an address is passed to a
01:37 - function as parameter and then we could
01:41 - use the address operator which is the
01:43 - ampersand symbol I know you're already
01:46 - familiar with this so address operator
01:49 - is used in the parameter of the called
01:53 - function and of course the changes in
01:56 - the function reflect the change of the
01:58 - original values so we could understand
02:02 - this better if we try to implement our
02:04 - function by you know creating a simple
02:08 - project or simple application that could
02:11 - demonstrate the call by value
02:13 - or call by reference so first let's try
02:16 - to create a program that would pass the
02:23 - argument us or it would call by value so
02:27 - the first thing that we're gonna need is
02:29 - of course to it's actually the same with
02:33 - the program or I mean function that we
02:37 - have created from the previous tutorial
02:40 - but the difference is that in this
02:42 - particular video we're going to use
02:44 - parameter or argument so the first
02:47 - variable that we're going to declare
02:50 - here is the answer so the type is int
02:56 - and then we have the variable name num1
03:02 - so the value is 5 and then in num2 and
03:08 - then the value is 10 okay
03:13 - and of course guys we could declare the
03:16 - function so for example we could create
03:21 - the function right after this closing
03:26 - curly brace of our main function
03:28 - so the first thing of course is the
03:31 - return type and in this case in and then
03:35 - the name of our function which is
03:37 - addition and we could say here int a and
03:42 - int B basically it means that this
03:46 - particular function would accept two
03:49 - parameter int B and int a okay and then
03:55 - in here we could return the value or the
03:58 - total value of this two parameters so a
04:00 - plus B pay and of course guys we could
04:05 - declare the function right here so we
04:09 - could you know add the function
04:11 - declaration here function declaration so
04:17 - you could say here in addition and then
04:20 - this particular function is gonna take
04:23 - two parameters int num1 in
04:27 - - so as you can see here guys this is
04:29 - only the function declaration okay and
04:31 - this is the function definition function
04:38 - definition again this is function
04:44 - declaration declaration and function
04:49 - definition so now we could try to call
04:54 - our function by value so for example we
04:58 - can say here answer and then equals
05:05 - addition which is the method or the
05:09 - function that we have created here and
05:11 - then we could pass along the values of
05:16 - num1 and num2 hey so let me explain this
05:20 - first for you so it would be clearer for
05:23 - you so we have here the parameter num1
05:26 - num2 as I've said in convey value the
05:30 - actual parameters cannot be modified
05:33 - because num1 and num2 is it won't change
05:39 - even if we you know change the
05:42 - parameters here into a and B so the
05:45 - value of num1 and num2 would not change
05:48 - even if we try to modify this int a and
05:51 - b inside our addition function so the
05:55 - actual parameter is passed to a function
05:57 - and then new memory will be created for
06:01 - our parameters e in a and int a int B
06:06 - okay and of course we could display here
06:11 - be a result so printf and then of course
06:16 - the statement the addition or you could
06:22 - say the total of two numbers yes and
06:28 - then the format specifier % B and then
06:33 - the variable answer okay and then you
06:37 - could you know
06:38 - build or application or build and run
06:42 - and it should display the output
06:44 - something like this the total of two
06:47 - numbers is 15 okay so you get the point
06:51 - this is the calling of function by value
06:56 - wait now if we want to try to call the
07:00 - function by reference as I've said we're
07:03 - going to use the ampersand symbol so
07:09 - ampersand symbol or it is the address
07:12 - operator and we're going to use that in
07:15 - our parameter of the code function so
07:19 - let's let's try to implement a function
07:22 - that you know could call by reference
07:25 - and you should see by now how you how
07:29 - the call by reference and call by value
07:31 - is different so the same thing we're
07:36 - going to declare the method here the
07:41 - return type is int and then the name is
07:43 - addition and then it's going to take two
07:46 - parameters with type in pay and then we
07:50 - could also use this in answer and then
07:54 - the same value for example and now guys
07:59 - instead of just using this num1 and num2
08:02 - we could add the address operator the
08:08 - ampersand symbol or the address operator
08:10 - in seed programming so basically guys
08:12 - were sending or we're passing the
08:17 - address of this particular variable into
08:20 - our function so so whenever we change
08:23 - this value inside our function it's
08:25 - going to reflect the value of our num1
08:29 - and num2 okay so we have here D and % or
08:37 - address operator and then we call the
08:40 - function right here and then display the
08:45 - answer and of course we need to add the
08:48 - asterisk symbol
08:52 - for this variable here or the argument
08:57 - and then one for the other variable P so
09:04 - this means that it is the operator that
09:06 - is used as a pointer to a variable so
09:09 - it's going to find the address to that
09:12 - particular value of number one or number
09:16 - two so of course we need to add this
09:19 - also here and of course for our variable
09:23 - num weight and then as I said if we want
09:28 - to change the value of num to here and
09:33 - inside our function we could do that and
09:34 - it's going to reflect the changes of
09:37 - this num to end number one worry about
09:40 - eight and of course we could still use
09:43 - the Aster symbol here and let's try to
09:48 - run our program for now so build and run
09:52 - and it's going to answer or it's going
09:54 - to the output this way a total of two
09:57 - numbers is 15
09:59 - okay so let's try to modify the num1 and
10:06 - num2 right for example inside this four
10:11 - particular function we're going to
10:14 - change the value of our variable a so
10:20 - instead of fine it's going to like maybe
10:24 - six okay so we could do that by using
10:30 - this particular variable argument we
10:36 - could add here the variable a and then
10:42 - we could say six then semicolon
10:46 - semicolon at the end and we could try to
10:49 - display the value of our eight so the
10:54 - value of a and then percent D and it
11:00 - should you know the variable a
11:02 - correspond to the variable
11:05 - right so we could copy and paste this so
11:08 - notice that number one it was the five
11:10 - here okay so let's see what's the output
11:13 - of this so build and run our program so
11:18 - as you can see we have you the the
11:20 - output the total of two numbers is
11:23 - sixteen and the value of a is six
11:28 - but as you can see here a corresponds to
11:32 - the number one right number one so we
11:35 - have here number one was to five and
11:36 - then we change the value of num1 by
11:40 - using the reference of variable a and
11:43 - then we said into six that's why we're
11:45 - getting six here and then the total or
11:48 - addition is six okay so I think that's
11:51 - all there is to it guys for this
11:53 - tutorial and if you have questions
11:55 - please let me know in comment section
11:56 - below and again guys thank you for
11:58 - watching and see you in the next video