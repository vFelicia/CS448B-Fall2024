00:00 - hello everyone this is varsha and
00:01 - welcome to programming knowledge
00:09 - so in today's tutorial we will
00:11 - understand what is the difference
00:12 - between git kraken and github
00:15 - now uh in the previous tutorial i
00:17 - explained about the get kraken i also
00:19 - showed some of the installation process
00:21 - about git cracking
00:22 - and there were a lot of comments asking
00:24 - that is there any difference between the
00:26 - git kraken and github
00:27 - so today i'll be explaining you the
00:29 - difference between both these terms
00:31 - also we will categorize some of the git
00:33 - commands so that it's easier to learn
00:35 - also we're going to learn the new git
00:37 - command that is the git diff command
00:39 - and how is it used and what is it all
00:41 - about we're going to learn that
00:43 - so let's get started so the first thing
00:45 - comes is what is the difference between
00:48 - the
00:48 - get kraken and github see basically
00:51 - github and gitgracon both are different
00:54 - they are not the same
00:56 - and github can be classified as a tool
00:58 - like it is a code collaboration tool and
01:01 - also
01:01 - it has the version control now i have
01:03 - explained what is version control before
01:06 - in the previous tutorials if you haven't
01:07 - seen those tutorials you can go back and
01:09 - see those tutorials
01:11 - also a code collaboration means you can
01:13 - collaborate your code on github whereas
01:15 - git kraken it is a source code
01:17 - management
01:18 - it manages your source code it shows the
01:20 - pictorial representation about the get
01:22 - pull
01:23 - the get push command so basically it
01:26 - manages the source code
01:28 - it shows the git commands the issues the
01:31 - push commands and everything in a
01:32 - pictorial form so that is what git crack
01:35 - in it
01:36 - and github is open source but get kraken
01:38 - is not open source it's not
01:40 - free github is free you can host your
01:42 - websites for free whereas
01:43 - on git tracking you cannot and yes of
01:46 - course there are a lot of companies
01:47 - which use
01:48 - github that is the netflix udemy and
01:50 - many other thousand leading companies
01:52 - use github
01:53 - whereas git kraken is used in companies
01:55 - like apple google microsoft
01:57 - amazon these are some of the leading
01:59 - companies which use the get kraken
02:01 - developer tools so this is the basic
02:03 - difference about the git cracking and
02:05 - github
02:06 - okay so to summarize first thing to
02:09 - control your code
02:10 - you can use git there are other methods
02:12 - also to control your code but we can use
02:14 - kit now to host your code you can use
02:17 - github
02:18 - you can use gitlab you can use bitbucket
02:21 - now we choose github
02:23 - now to get a git gui so that you can
02:26 - work easily
02:27 - now what happens here we write the git
02:29 - commands like git
02:30 - push and get pull commands whereas if
02:33 - you want to push
02:34 - your uh project just by one single click
02:37 - you use the gui that is the graphical
02:39 - user interface
02:41 - for that you have the get kraken and the
02:43 - github desktop
02:44 - okay so mostly github is mostly used
02:47 - and it is the most used tool by many of
02:50 - the users so we're going to use the
02:52 - github
02:52 - now understanding the git diff command
02:55 - so before that let's categorize some of
02:57 - the git commands that we have learned
02:59 - previously
03:00 - into different categories so that it's
03:02 - easier for us to learn now to
03:04 - know the categorization what i did is
03:07 - simply just go on
03:09 - no unite.com and here i have given the
03:12 - entire categorization of all the git
03:14 - commands
03:17 - i will attach the link in the
03:19 - description box below
03:20 - so this is the git commands over here so
03:23 - if you click on git commands and here
03:24 - you can see the different git commands
03:26 - see as long we go on learning some of
03:30 - the commands i will keep updating this
03:31 - sheet
03:32 - but for now i have given the git
03:34 - configuration commas there are some of
03:35 - the two git configuration commands that
03:37 - is mostly used
03:38 - i have done those git configuration
03:40 - commands i have explained about it in
03:42 - the previous tutorial you can have a
03:43 - look at that
03:44 - also we're going to see what are the day
03:46 - to work commands what is the starting a
03:48 - project commands what are the different
03:49 - types of commands so that it's easier
03:51 - for us
03:52 - to learn once we differentiate these
03:54 - commands
03:55 - we categorize so once we categorize
03:58 - these commands it's way easier for
04:00 - us to understand that which command is
04:02 - used where
04:03 - like your day to work commands is that
04:05 - when you are a software developer in a
04:07 - company
04:07 - you frequently use git status command
04:09 - because you want to know what is the
04:11 - status of the working directory at that
04:12 - point of time
04:13 - so these are some of the commands that
04:14 - day to work commands which you should
04:16 - know as a fresher as well as as an
04:18 - experienced person
04:20 - so these are some of the commands that i
04:22 - have categorized
04:23 - apart from this also i have given some
04:25 - of the common interview questions that
04:27 - is basically
04:28 - asked in many of the interviews
04:31 - if you're a pressure i have given some
04:33 - basic interview questions which you
04:35 - should know even as a fresher
04:37 - so these are some of the questions and
04:39 - these questions are of course
04:40 - not the only questions i'll keep
04:42 - updating these uh questions
04:44 - more uh these questions are divided into
04:46 - basic
04:47 - intermediary and hard questions so if
04:50 - you're a pressure
04:51 - go for the basic one and if you want me
04:53 - to discuss all the answers of these
04:55 - questions please write down in the
04:56 - comment section that uh
04:58 - discuss the answers of these questions
05:01 - also or you can search it or internet
05:03 - anywhere you will find it
05:05 - and these questions are very common and
05:07 - they are mostly asked in many of the
05:09 - interviews
05:10 - and it's also basic requirement see if
05:12 - you are
05:13 - really good at git github and handling
05:16 - those projects and version control
05:17 - system it is always an advantageous part
05:20 - for you in interviews
05:21 - so i have designed a basic interview
05:23 - questions and these questions are very
05:25 - basic
05:25 - i will keep updating the sheet as we
05:28 - learn new commands
05:29 - about git so these are the different com
05:32 - questions that is based on the commands
05:34 - that we have learned
05:35 - till now like we have six six videos
05:38 - till now and these are the commands that
05:40 - were used in all the videos and these
05:42 - are the questions on those commands so
05:44 - if you have any doubts
05:45 - regarding any of the questions you can
05:47 - comment down so that i can answer you
05:50 - and i will definitely reach you out i
05:52 - will attach
05:53 - both these links in the description box
05:55 - below and it will be way easier for you
05:58 - so uh today as i showed you those git
06:01 - commands first we're going to go with
06:03 - the
06:03 - day to work commands we know what is git
06:05 - status is we know what is get
06:07 - add command if you don't know you can go
06:09 - back to the previous tutorial and watch
06:11 - it
06:11 - you know what is git comment now we
06:13 - don't know what is git diff
06:15 - and what is this git diff stage what is
06:17 - this git diff head
06:18 - so we're going to understand this git
06:20 - diff command more properly
06:21 - in the coming videos okay so
06:25 - uh now this is the github repository uh
06:27 - that i have created that is a test repo
06:29 - repository that i have created already
06:31 - over here
06:32 - in my github account now what i'll do is
06:36 - i'll go on my f drive and i have created
06:38 - a folder i've named it as git repo
06:40 - here i will just right click and you
06:42 - have an option of
06:43 - open hyper here now if you don't know
06:45 - what hyper is
06:46 - and why i have installed this i have
06:48 - explained everything about the hyper in
06:50 - the previous tutorial you can go and
06:52 - check it out there
06:53 - and if you're facing any installation
06:55 - problems you can reach me out on the
06:56 - comment sections
06:58 - first thing is that we're going to
06:59 - create a file so how do we create a file
07:01 - we write touch
07:03 - file
07:07 - one dot txt
07:10 - and there you have created a file over
07:12 - here
07:13 - in your git repo folder okay so after
07:17 - creating a file what is this command
07:19 - that we write we have done this
07:21 - many times in the previous tutorial that
07:23 - is git status
07:24 - to another status of the working
07:26 - directory so here it says it's not a git
07:27 - repository for now
07:29 - so here once we have created a file we
07:31 - have seen it's a git status is not a git
07:33 - repository we need to turn it to a git
07:34 - repository for that we write git init
07:37 - and here it says that initialize git
07:39 - empty repository
07:41 - it's it has initialized the git empty
07:42 - repository over here and here if i write
07:44 - gate status again
07:46 - i can see there are untracked files over
07:48 - here so
07:49 - to turn it to track what i do is git add
07:54 - and here i will add all the files to
07:57 - track and then let's see it's git status
08:02 - and here it sees that the files are
08:03 - tracked okay
08:05 - so still now there were no information
08:07 - in the file that we have created this is
08:09 - the file that we have created and there
08:11 - is no
08:11 - information away okay nothing we have
08:13 - written so let's use the
08:15 - git diff command now you must be
08:18 - thinking what is this diff command
08:20 - okay now let me tell you diff command is
08:22 - basically
08:23 - is basically used to track the
08:25 - difference it is used to track the
08:27 - difference between the working directory
08:29 - and the staging area
08:31 - the dip command is basically used to
08:33 - drag the differences between all the
08:35 - changes made on a file
08:37 - that is the difference between the
08:39 - working directory and the staging area
08:40 - okay so this is what dip command
08:42 - is used for it is used to track the
08:44 - changes so how it is going to track the
08:46 - changes we're going to see that
08:48 - so for now uh understand that here this
08:51 - is the
08:52 - git wrapper folder that we have and the
08:54 - file one is the file that we have
08:56 - created
08:57 - and there is no such information over
09:00 - here in the file one
09:01 - so now what happens if i write git
09:05 - diff and file one
09:08 - dot txt what it says it says
09:12 - nothing okay now if i write something
09:14 - for example if i write
09:17 - hello my name is varsha
09:21 - and i will save this now if i write
09:24 - git div
09:28 - file one dot txt and i press enter
09:31 - there you see i have some of the entries
09:33 - over here i have
09:34 - so i have got something written over
09:36 - here that is the diff get
09:38 - a file one dot txt b file one dot txt
09:41 - and some of the index numbers and minus
09:43 - minus plus and a lot of
09:44 - numbers and everything over here what is
09:47 - all this we're going to learn what
09:48 - is all this okay so this was the entire
09:52 - different statements that we got after
09:54 - running the git
09:55 - diff command the first thing so the
09:58 - first thing we saw was the git
09:59 - div a demo.txt bdemo.txt this demo is
10:03 - the file name here you can
10:04 - it will it can be file1 dot txt or
10:07 - a dot txt or b dot txt or anything okay
10:10 - the demo is the file name
10:11 - so here it's written a demo.txt and b
10:14 - demo.txt what is this
10:16 - a and b over here and what are these
10:18 - index numbers we're going to learn all
10:20 - this
10:20 - so the first command is that diff get a
10:24 - demo.txt and b demo.txt
10:26 - a is basically the source the source
10:30 - area that is the staging area
10:33 - b is the destination that is the working
10:36 - directory
10:36 - as i said the diff command is used to
10:39 - track the difference
10:40 - between the changes made on a file that
10:43 - is the difference between the working
10:45 - directory
10:46 - and the staging area so there needs to
10:48 - be a staging area as well as the working
10:50 - directory right
10:51 - so that is the reason why here it is
10:52 - written a that is the source
10:55 - the source file that is the staging area
10:58 - b
10:58 - that is the destination file the working
11:00 - directory now if you
11:02 - don't know what a staging area in the
11:04 - working directory
11:05 - i had explained that in the previous
11:06 - tutorial go back to those tutorials and
11:08 - please watch it out
11:11 - but still i'll tell you uh what is this
11:13 - working directory the working directory
11:15 - is where your file is so if i write git
11:16 - add command it goes to the staging area
11:19 - so we are going to know the difference
11:21 - between these files what is the
11:22 - difference between the files whatever
11:24 - data we have given over here in the file
11:26 - it is there in the staging area or it is
11:28 - not there in the staging area this is
11:30 - what we're going to learn today
11:31 - so git div a demo dot txt that is the
11:34 - source the
11:35 - staging area b that is the destination
11:37 - the working directory
11:41 - now the second statement that we could
11:42 - see is that index and there were some
11:44 - numbers over here
11:46 - okay there were a lot of numbers now
11:48 - since i said
11:49 - git diff commanders you should track the
11:51 - difference there needs to be a source
11:53 - file that is a staging and the
11:55 - destination file right
11:57 - for that there needs to be some address
11:59 - or some index number fetching out that
12:01 - source files and the destination files
12:04 - like in c plus plus we have pointers
12:06 - that stores the address of some variable
12:08 - right similarly over here we have hash
12:11 - files we have hash of file contents
12:13 - these are some hash values that are used
12:15 - that is used to store the file content
12:18 - so basically the first hash value that
12:20 - we have that stores the
12:22 - file content from source or staging area
12:25 - and the second hash value that we are
12:27 - having
12:28 - this hash value stores the file content
12:30 - from the destination area
12:32 - that is the uh that is the working
12:35 - directory
12:36 - coming to the third one what is this
12:39 - number
12:39 - now see 100 is the file type
12:43 - here we have the dot txt type okay we
12:46 - had created file1.txt now if we have
12:49 - with
12:49 - a python file we have a html5 we have
12:52 - different different files for different
12:53 - files we have different file modes
12:55 - so for txt 100 is used now after txt
12:59 - this after this 100 we have 644
13:03 - now these are basically the file
13:05 - permissions that are given over here now
13:07 - you must be thinking what is this file
13:09 - permissions
13:10 - now see i would like to share a document
13:14 - to you i have seen this document where
13:18 - we have the linux file permissions over
13:20 - given over here
13:21 - i will if you want i will give the uh
13:24 - link in the description box below
13:26 - so basically these are the permissions
13:28 - now when you have a file when you
13:30 - having a file obviously you are in a
13:32 - company
13:34 - you want some rights given to a employer
13:37 - who is at the middle level
13:39 - and some of the uh and some of the
13:41 - permissions given to the employee was at
13:43 - the lower level
13:44 - like for example if you are the owner of
13:46 - a particular file you can
13:48 - read write execute you can update the
13:50 - file delete the file
13:51 - whereas someone who's in a group of like
13:54 - middle level who's in a senior manager
13:56 - or something
13:56 - and there you can give permissions like
13:59 - you can only update you cannot delete
14:01 - the file whereas
14:02 - with someone at the lower uh level they
14:04 - can only read the data they cannot write
14:06 - the data or update the data or delete
14:08 - the file
14:09 - so these are different file permissions
14:10 - that you can give as a user to different
14:13 - different group of people
14:14 - so here there are basically three groups
14:16 - that is the user
14:18 - group and all okay so the user is
14:21 - basically the owner
14:23 - group are the group of people like
14:24 - managers there are some higher level
14:26 - people
14:27 - all grouped together and all means
14:29 - basically their
14:30 - group of managers and also the employees
14:33 - so here these are three basic groups so
14:36 - for three basics group we give
14:37 - three numbers okay so what are these
14:39 - numbers that
14:40 - if you have seen it was written six four
14:42 - four yeah it's written six
14:44 - four four so you heard it written six
14:46 - four four so what is this
14:48 - basically this six means wait let me
14:50 - tell you
14:51 - six means read and write so basically
14:54 - the user the owner is having the read
14:56 - and write operation
14:58 - now coming to 4 and 4 what is this 4
15:01 - and 4 4 basically means only read
15:05 - that is all the users and all the
15:08 - group of people who are at the senior
15:10 - level also the users who are at the
15:12 - lower level are having the permission to
15:15 - only read the data they cannot
15:17 - write the data or execute the data or
15:19 - anything there are no permissions
15:21 - given except they read the data so this
15:23 - is a permission file
15:25 - so this is a permission table that i can
15:28 - see over here and these are different
15:30 - symbols that is basically used to
15:31 - represent them
15:32 - for execute we write x for we write w
15:36 - for execute plus right we write w x so
15:38 - these are different symbols i will
15:40 - give the link in the description box so
15:42 - that's easier for you to understand
15:44 - okay so now the third command was there
15:46 - was some three dashes and
15:48 - a demo dot txt now you know
15:53 - now if you know what is this demo dot
15:56 - txt
15:56 - right this demo.txt is the source file
15:59 - that is a staging area file
16:01 - now why is this minus minus over here
16:04 - now see
16:04 - basically this means that i will show
16:06 - that representation of this this is the
16:09 - working directory or the destination
16:10 - file that is the b
16:12 - demo dot txt and this is a staging area
16:15 - here i had written hello i am varsha
16:17 - did i write a command git add after it
16:20 - no right i did not add so i did not add
16:23 - it to the staging area
16:24 - so this is the difference between the
16:26 - two files and this is what it is showing
16:28 - that hello i am varsha that is there in
16:30 - the working directory but it is
16:32 - not added in the staging area so here
16:35 - when it says
16:38 - minus minus a it says there are some
16:40 - source files that is missing
16:42 - okay whereas when it says b demo.txt
16:45 - that means
16:46 - some new lines are added in the
16:48 - destination file but it is not
16:50 - there in the staging area this is what
16:52 - this basic command means that minus
16:54 - minus a demo.txt that demo is the file
16:57 - name
16:57 - whereas this minus minus means there are
16:59 - some files are missing
17:01 - whereas plus plus means new lines are
17:03 - added in the destination file and it is
17:05 - not there in the staging area this is
17:06 - what the difference
17:07 - is between the minus and the plus over
17:09 - here now after this you had
17:12 - seen some numbers that is the minus 0
17:14 - and plus 1.
17:15 - so basically this minus 0 says that in
17:18 - the source file there are no lines are
17:20 - present
17:20 - whereas in the destination file there is
17:22 - one line added
17:24 - and what is that one line that is hello
17:26 - my name is russia
17:28 - now before this line you can see there
17:31 - is a
17:31 - plus sign this means
17:35 - that some lines are added to the
17:36 - destination file or the working
17:38 - directory now if there is minus over
17:40 - here that means some lines are removed
17:42 - from the destination files
17:44 - and if there is nothing there is a
17:46 - simple space over there that means some
17:48 - files are
17:49 - these files are unchanged there is no uh
17:52 - lines added and there are no lines
17:54 - removed from it so this is
17:56 - is what is the basic meaning of the five
17:59 - lines that you could see
18:01 - now going to the pictorial
18:03 - representation is that we had a working
18:05 - directory which said
18:06 - that uh hello i am varsha whereas in the
18:09 - staging area there was whereas in the
18:11 - staging area it was not added because i
18:13 - did not write git add
18:14 - over here so this basic pictorial
18:17 - representation of
18:18 - it now you can try this out
18:21 - and you if you have any doubts about
18:23 - this you can always reach me out on the
18:26 - comment section i will definitely answer
18:27 - you out this is all for this video now
18:30 - and we're going to learn about the
18:31 - different diff commands
18:32 - uh in the next video thank you