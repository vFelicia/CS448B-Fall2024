00:00 - hello guys welcome to the next video on
00:03 - Java programming tutorial for beginners
00:05 - in this video we will see what is an
00:08 - exception in Java and how we can handle
00:11 - exceptions in Java using try catch block
00:15 - so first of all what is an exception by
00:19 - the official definition an exception is
00:22 - an event which occurs during the
00:25 - execution of the program which can
00:28 - disrupt the normal flow of the program's
00:31 - instruction ok so let me give you an
00:35 - example for example I declare an integer
00:38 - variable and I initialize it by some
00:41 - value for example 100 okay and then I
00:45 - divide it by 0 and we all know that
00:49 - whenever some integer is divided by 0 it
00:53 - gives us infinity and Java program is
00:58 - not able to handle this situation right
01:02 - so let's try to print something for
01:07 - example this out and I'm going to print
01:13 - this line after the Declaration of this
01:18 - variable like this so when I run the
01:21 - program if I see this that means this
01:24 - declaration is valid for me right
01:27 - because this initialization is
01:30 - successful and I will be able to see
01:31 - this line if I will not be able to see
01:35 - this line that means the initialization
01:37 - fails so I'm going to save this program
01:39 - and I'm going to run my program and you
01:43 - see in the console the exception in
01:46 - thread mean occurs and Java gives us the
01:49 - location of the exception or error and
01:53 - this is at line 6 which is this one
01:57 - right and which exception occurs here
02:00 - are automatic exception occurs so this
02:04 - infinity is not handled by the Java okay
02:10 - now in these situation where
02:14 - Java is not able to handle this
02:18 - exceptional situation what we can do is
02:21 - we can catch this exception by using a
02:25 - try-catch blocks so normally how we can
02:29 - write the try-catch block just write try
02:32 - and then this curly braces and and the
02:38 - curly brace and after that you need a
02:41 - catch
02:41 - so catch and in the brackets you give
02:47 - the situation which you want to handle
02:50 - and in here in the catch you can print
02:54 - the situation or you can do whatever you
02:57 - want to do after handling the
02:59 - exceptional situation okay so now I'm
03:04 - going to place my code inside this try
03:08 - catch block okay and here is the
03:13 - exception we want to handle so this code
03:16 - is throwing this exception called
03:18 - arithmetic exception okay so we want to
03:22 - handle this here so just write
03:23 - arithmetic exception and then give the
03:26 - variable name okay and in here you can
03:30 - even print this value of the exception
03:35 - which is thrown which is this exception
03:37 - exactly but let's run the program and
03:40 - then see what happens so now when I run
03:43 - the program I can see this line printed
03:47 - that means the exception is thrown but
03:51 - it's caught by this try catch block and
03:53 - then we come to the next line of code
03:56 - and we are able to print this line now
04:00 - in order to handle the situation after
04:03 - the exception so for example we want to
04:05 - know which exception is thrown by this
04:09 - try catch block inside this we can
04:12 - handle this situation of exception for
04:14 - example I want to print this exceptional
04:17 - situation so this arithmetic exception
04:20 - will handle this infinity situation and
04:24 - we can print it using this
04:27 - II object of automatic operation so we
04:29 - to print this exception we can just
04:32 - write system.out.print line and II okay
04:35 - and let's save this program and run it
04:38 - once again and now we can see this
04:42 - exception is printed this is due to this
04:45 - line okay and then our normal program
04:49 - execution is happening which is printing
04:52 - this line okay now in this try-catch
04:57 - block you can add multiple catch block
05:00 - so you can handle multiple you know
05:03 - exceptional situations okay so for
05:07 - example I can do something like this I'm
05:12 - catching this exception and automatic as
05:15 - exception and I want to handle one more
05:19 - exception which is the general kind of
05:21 - exception I don't know what kind of
05:22 - exception this is this so I will use
05:26 - this general exception okay and then I'm
05:30 - going to print this okay and now also
05:33 - it's going to execute the same program
05:36 - in the same way but in the case of
05:41 - exception other than this exception
05:44 - which is this one this code is going to
05:48 - execute okay so now let's add some more
05:52 - exceptional situation so for example I
05:55 - will declare a variable which is an
05:59 - array outside my try-catch block and
06:02 - inside my try-catch block I want to
06:05 - print the third element of the array we
06:10 - know that the initialization of array is
06:14 - with index two so third element is out
06:17 - of scope of this array right so let's
06:21 - print this and I'm going to declare it
06:25 - as variable B because a is already here
06:28 - okay and I'm going to print here the
06:33 - value of B 3 so the value of B at index
06:38 - 3 okay
06:40 - and I'm just going to write
06:44 - and plus okay this I want to execute now
06:49 - let's see what happens I'm going to save
06:52 - this program and run this and it's going
06:55 - to give me this automatic up or
06:57 - exception once again due to this line so
07:00 - let's let me comment this line for now
07:04 - okay and let me save this once again and
07:07 - run the program once again and now you
07:10 - can see this exception different
07:14 - exception is thrown and which is caught
07:16 - by this bigger exception or the
07:19 - exception which has more priority for
07:23 - example okay so this exception which is
07:29 - array index out of bounds exception is
07:32 - handled by this general exception here
07:35 - which is this line okay so if you don't
07:39 - believe me let's comment this code and
07:43 - this code here okay so and let's run the
07:48 - program once again and you see the same
07:52 - exception so it is caught by this
07:54 - exception okay you can even do just copy
07:59 - this exceptional condition here and
08:02 - paste it here okay and then it's going
08:05 - to give the same result which is array
08:09 - index out of bounds exception
08:11 - okay so exception class is a general
08:15 - class if you don't know which exception
08:18 - is thrown by your code you can use this
08:21 - exception otherwise if you know that
08:24 - your code can you know through our
08:27 - automatic exception or array index out
08:30 - of bounds exception then you can you
08:34 - know handle the specific exception and
08:37 - always remember that you can add
08:39 - multiple catch blocks with your try
08:43 - block okay so one catch block to catch
08:47 - block you can even handle three catch
08:50 - block and in this situation for example
08:53 - I want to handle this array index out of
08:57 - bound
08:58 - and when you do something like this it's
09:02 - going to give you this error bubble here
09:05 - and it says unreachable catch or let me
09:10 - save the program and run it and let's
09:13 - say what it says it's unreachable catch
09:16 - block why because this general exception
09:22 - class has more priority than this array
09:27 - index out of bounds exception so this
09:30 - should come at the last okay so when I
09:34 - do something like this I'm going to cut
09:37 - this and I'm going to paste just below
09:39 - this array out of bound exception here
09:44 - then my error will be gone so always
09:47 - remember this exception class should go
09:51 - at the last okay and other exception
09:55 - like arithmetic or index out of bound
09:58 - will be above it because they have the
10:01 - lesser priority okay and it's this
10:04 - exception is more general exception you
10:07 - want to handle okay so in this way
10:12 - exception works in Java and you can
10:15 - handle exceptions using try catch block
10:19 - in this video we will see what is
10:21 - finally block in Java and how we can use
10:25 - it with try catch block in Java so first
10:30 - of all what is a finally block the
10:35 - finally block always executes when the
10:38 - try block exists okay so generally you
10:43 - you use finally block when you want to
10:47 - add a try-catch block with your code
10:51 - okay and the property of finally block
10:57 - is it always executes whether your
11:02 - exception occurs or it doesn't occur it
11:05 - doesn't matter what the code does it
11:09 - throws exception or it
11:11 - throw exception this finally block is
11:14 - always executed
11:16 - so using this finally block you have
11:20 - always the chance to release your
11:23 - resources okay
11:25 - so let me give you an example in the
11:28 - last video we have seen that we can use
11:31 - a try-catch block something like this
11:34 - and this is the code which throws an
11:38 - exception because any integer which is
11:40 - divided by zero will give an infinity
11:44 - and then Java will throw an exception
11:46 - for that and which exception is throws
11:48 - it throws arithmetic exception right now
11:52 - to add a finally block to a try/catch
11:56 - block what we can do is we can just
11:58 - write finally and then in the curly
12:01 - braces you can close it okay so this is
12:06 - how you add finally block to your pry
12:08 - cache block and the property of this is
12:11 - it's always executed so for example I
12:14 - can print something here
12:18 - for example finally called okay and
12:22 - let's add this print message here and
12:25 - here we can say catch called okay and
12:29 - let's save the program and run the
12:32 - program and in here you see here it
12:37 - gives you this finally called message
12:41 - right and when I just scroll a little
12:44 - bit above it prints catch that means
12:48 - this code throws an exception and then
12:51 - this line is printed and then it prints
12:53 - the exception which is which have
12:56 - occurred and then at the end when the
12:58 - exception is thrown and caught by this
13:00 - catch block at the end this finally will
13:04 - execute okay and this makes sure that
13:07 - you can release all your resources or
13:11 - this can be used to you know do the
13:14 - final book whatever you want to do after
13:17 - the exception or even if the exception
13:21 - doesn't happen then also you can use
13:25 - in most of the situations okay so it's a
13:29 - good practice to use finally with your
13:32 - try-catch block okay and there is only
13:36 - one situation where this finally block
13:40 - will not be called and this situation is
13:43 - when you call a system dot exit method
13:46 - inside your try block so for example I
13:50 - do something like this system dot exit
13:52 - with some integer here for example 1 and
13:56 - I will comment this code and when I run
13:59 - the code then what happens see nothing
14:04 - happens why because we have called
14:06 - system dot exit and it exits from the
14:10 - program and this is the only situation
14:13 - where this finally will not be called in
14:16 - any other situation if the exception is
14:19 - thrown is if the exception is not thrown
14:21 - finally will be called okay now to
14:26 - understand this situation in a better
14:29 - way let's create a method for example
14:32 - public static void or let's return
14:40 - integer here and let's say return int
14:47 - okay let's save this method only return
14:51 - integer okay so and inside this I'm just
14:56 - going to copy and cut this code which I
15:00 - have in the main and paste it here okay
15:03 - and in the last at the last what I want
15:07 - to do is I want to return some integer
15:10 - so for example I want to return the
15:13 - value of a right so I want to declare
15:19 - this a outside my try block okay and for
15:24 - example we don't divide this hundred by
15:26 - zero so it's valid situation and we want
15:30 - to return a right so in here I want to
15:34 - delete this and I will return a OH
15:38 - and for example it throws an exception
15:42 - and it goes here I want to return a here
15:48 - also and in here also I want to return a
15:52 - okay so in finally block I want to
15:55 - return in this situation we will see
15:57 - later but for now I want to do something
16:01 - like this and in here I just want to
16:04 - call my system out so this out and in
16:11 - here I just want to call my return int
16:14 - method okay inside this okay so let's
16:18 - run the program and let's see what
16:20 - happens so I'm running the program and
16:23 - it returns one hundred and 100 is
16:25 - printed here and then finally block is
16:27 - called after the try block returns so
16:33 - even if your function returns this
16:37 - finally block will be called okay so it
16:41 - doesn't matter if you return from try
16:44 - block generally you would think that you
16:47 - are returning from here then after
16:50 - return no code will be executed but for
16:54 - finally it's an exception finally will
16:58 - be executed even if you are returning in
17:02 - the try block or even in the catch block
17:05 - also so let's divide it by 100 or divide
17:12 - this by zero not here but for example
17:17 - two it here a is equal to eight divided
17:22 - by zero okay so it will throw right so
17:27 - it will go here and then exception code
17:29 - will be called and then let's see what
17:32 - happens so save the program and run the
17:35 - program and once again we can see catch
17:38 - is called so it throws an exception it
17:40 - goes here and it first of all it calls
17:45 - this finally block which prints this
17:48 - message finally called and then only we
17:51 - or be able to see this hundred which is
17:54 - returned by this return so it doesn't
17:58 - matter if you return from the try block
18:00 - or catch block finally will be called in
18:04 - that situation also now there is one
18:08 - more situation which can occur for
18:11 - example I want to return from the
18:15 - finally block also so for example right
18:18 - now I have assigned a is equal to
18:20 - hundred right and in the finally block I
18:26 - can override my return value for example
18:29 - I can do something like this a is equal
18:33 - to thousand or five thousand okay and
18:39 - then I can return a now what will be
18:47 - returned from here will it return 100 or
18:51 - will it return five thousand let's see
18:54 - what will happen so let me do this after
18:57 - this here and what I'm going to do here
19:02 - I will save this program and I'm going
19:04 - to run it and you can see that finally
19:10 - over writes your return value also okay
19:14 - so OH
19:17 - ideally it should return 100 if you
19:21 - don't return from finally right so I
19:25 - don't want to return from finally I will
19:29 - save it and it will return hundred like
19:32 - this okay but when you return from
19:34 - finally and you want to change the value
19:38 - which you want to return in finally then
19:42 - finally will overwrite your earlier
19:45 - return value for example five thousand
19:49 - so I will save this and run this and it
19:51 - will return five thousand okay so in
19:55 - this way you can use finally with your
19:58 - try-catch block and always remember it's
20:03 - a good practice to use finally with your
20:05 - mikage blog so always try to use it
20:08 - whenever you use try catch blocks so I
20:11 - hope you have enjoyed this video please
20:12 - rate comment and subscribe and bye