00:00 - hey guys they come for programming
00:02 - knowledge in this video we'll be looking
00:04 - at classes in C++ but before that let's
00:07 - first discuss a small concept which I'd
00:09 - missed in the previous video that is how
00:12 - to use pointers when using such
00:14 - collective datatypes here if you see we
00:16 - have the student structure which were
00:18 - defined in our previous video I have
00:20 - just added one single function to print
00:23 - the details of storage and here I have
00:26 - created a student with the name Tony age
00:28 - 10 and then the maths of distance now if
00:31 - you want to create a pointer it's just
00:34 - similar to the way you do for a
00:36 - primitive data type you just put star
00:38 - bit here and then you put a TR equal to
00:42 - the address of the student now if you
00:44 - want to access a particular feature
00:47 - because in primitive data types we did
00:49 - not have features right we just hide
00:51 - data so if we did start PTR this was
00:53 - enough but in case of the object we have
00:57 - so many features we have two functions
00:59 - and then we have three variables how do
01:01 - we access these things separately
01:03 - well star won't work here and we have a
01:06 - special operator known as the arrow
01:08 - operator
01:09 - well what discuss this basically allows
01:12 - us to access separate features of an
01:15 - object and the way you define oh I drop
01:18 - return is by using a minus sign and this
01:20 - greater than symbol together so if you
01:22 - combine them that looks like an arrow so
01:24 - that's from where the name comes well if
01:27 - you want to use it you just say Peter
01:29 - that is the name of the pointer the
01:31 - arrow symbol and then the feature you
01:34 - want access so let's say I want access a
01:36 - name so if I just put name and then
01:38 - execute this I will be getting a name
01:40 - over here so age also works the same way
01:43 - if I just put age and then try to
01:45 - execute this I will be getting the age
01:47 - and if I want some function let's say
01:51 - the average function I can just do that
01:54 - from here so if I put average and then
01:56 - call that function I'll be getting the
01:59 - average over here so that's how you use
02:02 - pointers the only difference is that
02:04 - instead of star you are now you're going
02:06 - to use this arrow symbol and this is a
02:09 - very important concept as we will see in
02:11 - a minute this
02:12 - be using a lot when using classes so now
02:16 - let's dive into classes well the way you
02:18 - work with classes and structures remain
02:21 - the same so if you want to change this
02:23 - definition to a class definition you
02:25 - just remove the structure Cree word and
02:27 - then put class over here so this now
02:30 - becomes a class
02:31 - well the dot operator and then the way
02:34 - you work with pointers this ad or symbol
02:36 - all these things remain the same so you
02:37 - don't have to do anything so now let's
02:39 - do something like still then dot print
02:42 - details now if we try to execute this
02:45 - particular function we will be getting
02:46 - an error so let's see what that is it
02:48 - says that this particular name is
02:50 - private well if at all there is any
02:53 - difference between a class and structure
02:55 - that is this thing a structure is public
02:58 - in nature and then class is private well
03:01 - it's not a big deal we can change public
03:03 - to private and private to public we will
03:05 - just talk about that in a minute but
03:08 - what is public and private well in
03:11 - object-oriented programming when you are
03:13 - creating objects or when you are
03:14 - creating such collective data types we
03:17 - don't want everything to be accessed by
03:19 - the outside agent or the user let's say
03:22 - so if you are creating a student data
03:26 - structure and the purpose of this
03:27 - particular data structure or this
03:29 - particular object this just to store the
03:31 - details and then show the details then
03:34 - you don't want the user to manipulate
03:35 - the details right so if I do the axis of
03:38 - this marks to the particular user he can
03:40 - manipulate the values inside head same
03:43 - with the name and age also so if you
03:45 - don't want some of your features to be
03:47 - public in nature that is you don't want
03:50 - some of the features to be accessible by
03:52 - the user you can put them in the private
03:55 - section so how do we put that you just
03:57 - need to put private over here and put a
03:59 - colon over here so in a class everything
04:02 - by default as in this particular
04:04 - definition so if you want to make a
04:06 - structure into a class you just need to
04:09 - remove this class and put structure over
04:12 - here now this particular entity is just
04:14 - like a class you will be getting the
04:15 - same error when you executed a class and
04:17 - if you want to create a class into a
04:19 - structure if you want to change a class
04:21 - infrastructure what you just need to do
04:23 - this you need to change everything to
04:25 - public
04:26 - now if you change it you will be getting
04:27 - the output just like we got in case of a
04:30 - structure so that's very cool there is
04:32 - no difference between a class and
04:34 - structure although we don't use such
04:36 - access specifiers these are called
04:38 - access cache files because they are
04:40 - specifying the access of this features
04:41 - right so we don't use them in structures
04:44 - but just by convention you can use them
04:46 - there's no restriction on that but we
04:48 - generally don't use we just use them
04:51 - with glasses so can you have multiple
04:53 - access specifier inside a class well you
04:56 - can so these just define different
04:58 - features to be either public private so
05:02 - there's one more thing called protected
05:04 - which we won't be seeing in this
05:05 - particular video because we better
05:08 - understand it when discussing about
05:10 - inheritance but for now we'll just
05:12 - discuss about public and private
05:15 - so as I told you these things become
05:18 - private and I want only the ring details
05:21 - function to be public so I'll put public
05:23 - over here so whatever is below private
05:26 - becomes private and whatever is below
05:29 - public becomes public in nature now I
05:31 - can access print details without any
05:34 - issues but I cannot access all these
05:36 - things then how can I actually create an
05:39 - object with these features that is a one
05:42 - the objects name to be torn eh to be ten
05:44 - and marks to be distance how do you do
05:47 - that if I don't have the access of this
05:49 - per variable itself well for that you
05:51 - can define another function in the
05:53 - public section you can say something
05:56 - like while said detail something like
05:58 - that these are more specifically called
06:00 - setters these are called setters but
06:03 - satyrs are used only for a single
06:06 - variable so if you want to assign
06:08 - variables at a time when creating the
06:11 - object itself you generally use
06:13 - something called constructor well
06:16 - constructor is basically a special
06:18 - function which is used to create the
06:21 - memory when you are creating an object
06:23 - of this type so let's say you're
06:25 - creating an object of this class student
06:28 - you need memory to all these three
06:30 - variables so constructor takes care of
06:32 - that particular memory requirement and
06:34 - you don't have to explicitly define a
06:36 - constructor although you can
06:39 - and many people use constructor to
06:41 - assign variables when you are declaring
06:44 - them so in our case we are declaring
06:46 - these variables right which I private in
06:48 - nature so in case you want to declare
06:50 - them by with creating you can either use
06:53 - a setter function or many people just
06:56 - use constructors for that so the way you
06:58 - define constructor is it doesn't have a
07:00 - return type so you just need to omit the
07:03 - return type in you should not give me a
07:05 - return type and then the name should be
07:08 - the same name as a stool so over here
07:12 - you have student as our class name so
07:14 - that should be there and then you will
07:16 - just define it just like a normal
07:18 - function and here you can pass in
07:20 - parameters and all you have different
07:22 - names for that so if you have a normal
07:24 - constructed definition like this this is
07:26 - called a general constructor and then if
07:28 - you have parameters inside that let's
07:30 - say string name and then int age so this
07:34 - is called a parameter s console there
07:36 - are different names I encourage you to
07:37 - look that up but for now we will use
07:39 - this particular parameter s constructor
07:42 - and here we will pass in another
07:44 - variable the marks variable and now
07:47 - there is an issue if you see the objects
07:50 - attribute or the objects which are
07:52 - called name is clashing with this
07:55 - particular name well you can change it
07:57 - so that you don't have an issue like
07:59 - this but as I told you when discussing
08:02 - the pointer just know that that's going
08:04 - to play a very important role in classes
08:07 - and that says where this comes into play
08:10 - this is basically pointed it is called
08:14 - this pointer only so if we just put this
08:17 - you can see that it is bold it indicates
08:20 - that it's a property of the compiler
08:21 - it's a reserved keyword this is
08:23 - basically a pointer which will point to
08:26 - the current object itself
08:28 - so let's say I have 10 students and then
08:31 - I am working on the 7th string so if I
08:34 - use this pointer then I will be
08:37 - accessing the 7 student details not any
08:40 - other student details so just basically
08:42 - points to the current object which is
08:44 - getting used and then we use it just
08:46 - like we did in case over on pointer so
08:49 - this and then this particular are
08:52 - cymbal which is called the higher
08:53 - operator and then the variable names are
08:55 - name equal to name you could change this
08:57 - age equal to age and this marks equal to
09:03 - Marx well if you don't want to use this
09:06 - particular definition you can always
09:07 - rename this and this won't be a issue
09:10 - but just to explain the importance of
09:12 - this particular pointer and this IRA
09:14 - operator I just took this particular
09:17 - example but you're free to use whatever
09:19 - way is convenient for you many people
09:21 - tend to use this particular definition
09:23 - and here when we are creating you just
09:26 - need to pass in when creating itself so
09:28 - here if you put parentheses and then
09:30 - pass in your variables so name equal to
09:34 - Toni and that the age is something 10
09:36 - and then the marks will you need to
09:38 - create another variable for mark so max
09:41 - and we'll push back all these things
09:45 - inside this particular new variable you
09:49 - don't need s over here because this is
09:51 - an independent variable now we just
09:53 - created a new variable in our memory and
09:55 - here you just need to pass in Max and
09:58 - now if you just remove all these things
10:01 - this should work as expected so if we
10:03 - now run this you will be getting the
10:07 - output just like we got in a case of
10:08 - structures and now you have successfully
10:11 - implemented an object-oriented design so
10:13 - something is private something is public
10:15 - you are not giving access to everything
10:18 - and all these are basically features of
10:21 - object-oriented programming so now let
10:25 - us see another very important function
10:28 - which is a special function called the
10:30 - destructor well this is not used much
10:32 - but since it's the part of
10:35 - object-oriented programming we'll
10:36 - discuss it quickly it's basically the
10:38 - same thing as a constructor it is
10:40 - defined by the compiler itself it's a
10:42 - default thing a destructor what it does
10:45 - is it will scrape out the object from
10:47 - the memory so if you are running out of
10:50 - scope so let's say we had defined this
10:52 - object inside an if block so once the
10:55 - block has been executed that variable is
10:58 - out of the scope rate so once anything
11:00 - gets out of the scope it's going to be
11:02 - scraped out of the memory so that's when
11:04 - a destructor is called so
11:06 - you want the destructor to do something
11:08 - else you can just do that by putting
11:10 - this tight symbol and that you define
11:12 - the destructor with the same name as a
11:14 - class and again you don't put any return
11:19 - type for the destructor and it does not
11:22 - even take any parameter so you cannot
11:24 - pass any parameters to destructor you
11:26 - cannot call the destructor from anywhere
11:29 - you can just see what it does so if you
11:31 - just call this destructor let's say I'm
11:35 - being scraped something like that you
11:40 - will be seeing this when the object gets
11:42 - out of the scope so we will just put
11:45 - something over here if some condition 10
11:48 - equal to 10 this is going to be true so
11:51 - all these things will be executed over
11:56 - here we'll put something like then we
12:01 - put a new line also for differentiate so
12:05 - if you now execute this you will see all
12:07 - this details and then it says I'm being
12:10 - scrapped and then done that is because
12:12 - one staff block has been executed that
12:14 - particular object has been removed out
12:17 - of the scope that then it should be
12:19 - ready to be removed out of the memory
12:21 - too so we just remove that thing from
12:24 - the memory that's why this message is
12:26 - printed and then you have this done
12:28 - which is outside the if block which
12:32 - indicates that this has been scraped
12:34 - before coming over to the statement so
12:37 - that's the use of destructor if you want
12:39 - to see when the object is getting
12:42 - removed from the memory you can use
12:44 - destructor
12:45 - we will again talk about this when we
12:47 - are discussing about inheritance but
12:50 - constructor is mostly used to actually
12:52 - pass in parameters when we are declaring
12:55 - a particular object something like this
12:57 - so now how do most people use classes in
13:02 - C++ well mostly people don't use classes
13:06 - in the way we used over here we wrote
13:08 - the class definition and the main
13:11 - function everything in a single file
13:13 - right so people generally don't tend to
13:15 - do that people generally use multiple
13:18 - files in that program
13:19 - so you have one particular file only
13:22 - executing a main program and then you
13:25 - have multiple objects so you don't put
13:27 - all the objects in a single file you
13:29 - create multiple files for holding the
13:31 - objects and then if you have want to use
13:33 - this particular class let's say the
13:35 - student class you just included just
13:37 - like this particular vector so what you
13:39 - do include and then you put the student
13:42 - over here student dot H that's an
13:45 - extension we'll be seeing how to create
13:47 - this and here instead of angular braces
13:51 - you need to put this coach so this
13:53 - indicates that this is something from
13:55 - this particular directory and not from
13:57 - the compiler so these things are
13:58 - available in the compiler that's why we
14:00 - are putting this angular braces and here
14:03 - you are putting this to indicate that
14:04 - this is from this particular directory
14:06 - or this particular project so you have
14:10 - two files when declaring such classes so
14:14 - what to do is you have one header file
14:16 - where you declare the skeleton of the
14:19 - class and then you have one CPP file
14:23 - which is just like this one which will
14:26 - hold the definition of this class so how
14:29 - do you substrate that so let's say I
14:31 - want a particular function to be defined
14:34 - in a separate file so let's just say
14:37 - this particular function called to be
14:40 - defined in a different file so how do
14:42 - you do that we just need to put a
14:44 - semicolon over here so this is just like
14:46 - a function prototype which we had
14:48 - discussed and let's assume that this is
14:50 - another file so this class is in some
14:53 - other file you just did something like
14:55 - hash includes student dot H and then if
14:57 - you want to define this particular
14:59 - function the way you do that is you just
15:01 - define this function normally I say this
15:04 - is just a normal function it it doesn't
15:07 - have anything to do with this class you
15:09 - just defined it so let's say I'm called
15:12 - and something like that you just define
15:15 - it like this and then over here to
15:18 - define that this particular function is
15:21 - specifically designed to this particular
15:24 - class or this function should be
15:27 - available only to this particular class
15:29 - what you do is you just put in this
15:32 - classname and then you put two colons
15:35 - over here so this will indicate that
15:38 - this particular function is to be used
15:40 - only with this class that is the student
15:43 - class now you cannot use called directly
15:46 - you need to call it using the student
15:48 - class so if you want to use that so you
15:51 - can say something like s dot called
15:55 - and it will work normally so that's okay
15:59 - we don't have the student with heads
16:00 - right now so we don't need these things
16:03 - also so if you run this okay this type
16:08 - over here okay so here you can see I am
16:14 - called that s from this particular
16:16 - function which we just defined that this
16:18 - called function over here and here this
16:22 - is the message from the destructor that
16:24 - is I'm being script so that's how we
16:28 - actually use classes but this particular
16:32 - ID which is the code blocks ID provides
16:35 - an easier way to create classes you
16:37 - don't have to define all these things
16:39 - that is you don't have to create two
16:41 - files and then put them it will neatly
16:43 - organize everything and give it to you
16:44 - so how do you use that where you go to
16:47 - file you go to new and then you create a
16:49 - class over here so you have class name
16:52 - so you just give some name that's a
16:55 - student and then here are in place of
16:59 - arguments you just leave it so it has a
17:01 - destructor virtual destructor all these
17:03 - things you don't have to understand all
17:05 - these things right now you can just
17:07 - ignore them but will understand what all
17:10 - these things are in later videos and now
17:12 - if you just click on create you can see
17:15 - that the new class has been created do
17:17 - you want to add it to the current
17:18 - project if you just say yes and then
17:20 - just okay over here and then you will
17:23 - see that in headers you will have an
17:25 - include folder inside which you will
17:27 - have student dot H so here if you see it
17:30 - just has the definition just increase
17:32 - the font size here you can see just has
17:37 - a definition you don't need this this is
17:39 - basically the virtual district and we'll
17:42 - talk about that later and here you have
17:44 - a constructor
17:46 - and you have protected and private you
17:47 - don't need protected also as I told you
17:50 - we'll be discussing about that when we
17:53 - are discussing inheritance and you have
17:55 - some special commands over here so what
17:57 - this roughly means is that once a
18:00 - particular class has been included in
18:03 - the memory and if it's again trying to
18:06 - include it you don't do that because we
18:08 - are using two files so let's say I'm
18:11 - using function from this particular file
18:13 - so when I don't want this particular
18:16 - function to again include it so here you
18:19 - can see hash includes student dot H so
18:21 - when I am doing it multiple times I
18:24 - don't want this particular class to be
18:26 - loaded into my memory multiple times so
18:29 - this particular guard block but as it's
18:31 - called this is called a guard lock God
18:35 - lock
18:36 - what this will do is it will take care
18:39 - of this particular issue it won't allow
18:41 - this class to be included in the memory
18:43 - multiple times and here you just declare
18:46 - the skeleton so here if you see if you
18:49 - want to create this particular class
18:50 - again we'll just create a small version
18:54 - of that so it will just have an age
18:56 - let's say in age and in public you will
19:01 - have a setter function we will just say
19:03 - set H or you and - directly use it
19:07 - inside over here so in age you can just
19:10 - say and private
19:13 - I prefer private to be in a beginning
19:16 - but it's up to you
19:17 - the order doesn't matter I just put
19:19 - private in the beginning and then public
19:21 - at the end protected in the middle so
19:24 - that's how I use classes but it doesn't
19:26 - matter you can use it the way you prefer
19:29 - and now you just need to define this
19:32 - constructor in the student or CPP file
19:34 - we don't need this virtual construct I
19:36 - just deleted that and here you just
19:39 - define it normally so age is something
19:42 - private but you can access private
19:44 - variables inside a class so you can say
19:47 - something like this H equal to H and
19:54 - here if you want to use this class let
19:57 - us just remove this class because I
19:58 - already do
20:00 - so remove this and if you want to
20:04 - include that student class you just say
20:06 - hash include' and then student dot hitch
20:09 - and now all these things work fine well
20:12 - we don't have everything over here so we
20:14 - need to redefine it so let's quickly do
20:17 - that student s ten and if you execute
20:22 - this what do we have here it says yeah
20:25 - because we forgot to put the parameter
20:27 - over here it is in H and C we did not
20:34 - get any error so that's how we generally
20:36 - use classes if you want to create
20:39 - another class go here new and in class
20:41 - and you can create another class so
20:44 - people generally tend to use classes
20:46 - like this you have neatly structured
20:49 - thing over here so you have a main dot
20:51 - CPP over here and here the student or
20:53 - CPP goes inside the source file so that
20:56 - you don't get confused so everything the
20:59 - header files which I talked about the
21:01 - student dot H or anything class header
21:03 - files are basically class name dot H and
21:07 - all these things go inside this intro
21:09 - folder and the definition file which is
21:12 - basically class name dot CPP all those
21:15 - things go inside the source folder and
21:17 - main file will be outside and you can
21:22 - use that main file to execute the prover
21:24 - everything starts from the main file
21:26 - generally named that has made dot CPP
21:28 - where the execution starts and we
21:30 - include all our objects like this using
21:33 - this particular syntax that is you pass
21:36 - in the class name dot H file using this
21:39 - particular quotes and the guide block
21:41 - which we just talked the word this one
21:44 - this basically takes care of multiple
21:47 - allocations of memory of this particular
21:49 - class so that's all about classes in the
21:52 - next video we'll make another one of our
21:55 - projects through our previous project
21:56 - was the tic-tac-toe game well will again
21:59 - make another game in the next video
22:01 - because I think games are fun to make
22:04 - and then we can learn a lot from them so
22:07 - in the next video we'll make another
22:09 - game by using all these concepts of
22:12 - object-oriented
22:13 - being billed and happy coding