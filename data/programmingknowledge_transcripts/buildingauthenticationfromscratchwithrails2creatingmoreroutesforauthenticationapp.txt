00:00 - so basically to start the application
00:02 - you need to type rail server and this
00:04 - will type the application on your
00:05 - machine
00:06 - so like previous part we had created a
00:08 - form using a basic form
00:09 - layout using the signup method so let's
00:12 - create the input type for this
00:13 - so for this we can type input
00:17 - is equal to email uh so this is the
00:19 - email
00:20 - and the name is equal to uh we can't
00:23 - give a name by any recent name uh this
00:26 - is like let's give this a name
00:29 - email or like let's give this a username
00:32 - okay and let's give the
00:35 - name username and required
00:40 - and this is required so let's get this
00:42 - and
00:43 - so i hope this is fine and we can define
00:46 - our id
00:47 - is equal to username basically ids
00:51 - is needed for the label so for this
00:53 - corresponding
00:54 - let's create a label method so let's
00:57 - create a label
00:59 - table for username
01:03 - and let's create this
01:06 - label let's close this
01:11 - and let's type user name here
01:15 - so this is how it is done and to avoid
01:18 - any like cr csfr token since we are
01:20 - making a process so we need to define
01:22 - percent
01:23 - equal to token underscope tag
01:28 - and this is this okay
01:31 - so this is how we do it in types of good
01:34 - email name is going to do the name id
01:35 - and required
01:39 - and this is like label for
01:44 - this is user password
01:47 - so we are creating a user password here
01:50 - and for this we are defining
01:52 - input type is equal to password
01:58 - and we need to define name
02:01 - is equal to user password
02:06 - and id
02:09 - equal to user password
02:13 - okay and this is also required so we
02:15 - keep this as required
02:17 - okay and since we need to define
02:20 - input type
02:24 - is equal to submit
02:28 - value is equal to register
02:33 - let's keep a value of register this is
02:36 - fine
02:37 - and we can close the stack so by default
02:40 - when we refresh this page
02:42 - so we need to find something like
02:43 - username and we need to find a password
02:45 - here
02:46 - okay yeah password is required so let's
02:49 - keep this
02:51 - and let's put there as a
02:54 - password okay
02:58 - and this is fine okay so
03:01 - let's yeah so let's yeah we have option
03:04 - to sign up that is username and password
03:06 - and let's we have a register button okay
03:09 - so this is fine
03:10 - so let's give this as a signup page okay
03:18 - so this is fine now so we have a user
03:21 - password
03:21 - and like so let's create when we submit
03:24 - this form
03:25 - so we need a method where we need to
03:28 - submit this form
03:29 - so let's create this method
03:32 - uh let's create this method uh sorry a
03:36 - route for this
03:37 - so that is post register
03:41 - and when we hit this register so
03:44 - basically
03:45 - we tell them okay uh we define
03:48 - users hash create
03:52 - and we need to define this as
03:56 - as register okay
03:59 - so this is fine he defined as the
04:01 - disturb post register we need to find to
04:03 - use this hash create as registers so
04:06 - when we make a post request
04:08 - so we need to hit this method okay so
04:12 - i have maintained this method so i'll
04:14 - give you to show you a trick
04:15 - or how to view this routes everywhere so
04:18 - move to this local route okay this is
04:21 - your base route
04:22 - app is working this sign up app is
04:25 - working
04:26 - okay type invalid route something like
04:30 - uh any invalid route maybe i type
04:32 - invalid a
04:33 - uh invalid xyz
04:37 - something anything invalid you get this
04:41 - and now you can type register uh
04:44 - uh you can like you can
04:47 - search from here as well and i'll use
04:50 - this
04:51 - so it says register underscore path
04:53 - which hits on users as great
04:55 - so i can use this copy this i'll copy
04:58 - this register underscore path
05:01 - and let's go to this page and
05:06 - i can type percent equal to
05:10 - this so this works perfectly fine so
05:13 - this would be
05:14 - like this would help you from defining
05:17 - like this works as a constant so it
05:20 - action moves to this row data but these
05:22 - are good to put okay
05:24 - so when you put this this register
05:27 - underscore path
05:28 - it will hit this method because i have
05:30 - told him to move hit this method
05:32 - and then you can simply render json
05:36 - just for the simplicity i am telling it
05:39 - to render json params
05:41 - okay so let's now hit the sign up
05:45 - uh let's uh type a user at mail.com
05:50 - and let's give a dummy password
05:52 - something like very dummy password you
05:54 - can give
05:55 - so one two three four five six
05:58 - okay i'll type again one two three four
06:00 - five six so let's hit this
06:02 - so when we hit so we never so we have
06:06 - authenticity to open is to this
06:08 - username is equal to this and user
06:10 - password is this and controller this
06:12 - action is great
06:13 - this is fine so what we need to define
06:16 - we need to define
06:17 - email is equal to patterns of
06:22 - what parents you are getting here so we
06:24 - are getting a parent for username
06:26 - let's copy this to avoid any and
06:29 - so it is equal to
06:33 - items of
06:36 - this user password okay
06:40 - and this is fine
06:43 - so we have already like
06:46 - i have shown you like in the previous
06:49 - tutorial
06:50 - so i'll just give you a quick overview
06:52 - yeah
06:53 - so we had created a user right
06:56 - so okay this is not needed i'll show you
06:58 - again
07:01 - we tap exit and we'll type rails console
07:06 - okay so rails console will be open
07:09 - and when i type user dot connection and
07:16 - then i'll type user so this is how we
07:18 - have email and password underscore
07:19 - digest okay
07:21 - so this is we how we create a
07:24 - user so we can define
07:28 - user
07:31 - we can define simply user dot create
07:36 - we need to define user.grade where email
07:40 - is equal to email and
07:45 - password underscore digest
07:50 - equal to password
07:53 - i hope this is fine and then you can
07:55 - simply say
07:57 - response
08:02 - response is equal to this and let's
08:04 - define a success
08:08 - is going to be true and json response
08:15 - okay so let's hit this request again
08:19 - okay i need to make sure the server is
08:20 - running server is not running
08:22 - so let's start the server so let's
08:26 - hit the request again and this time the
08:28 - user should be created
08:29 - okay so basically i'll show you again
08:31 - once again so password is this
08:33 - user is email.com let's again making the
08:36 - request again let's make a request again
08:39 - okay i'll assume this and now i'll so
08:42 - this is the username and user password
08:43 - let's make the request again and
08:45 - i should get a success rule true okay
08:48 - good
08:48 - if the success is true then let me check
08:52 - let me check uh
08:57 - so help raise console
09:01 - okay so i'll do this console
09:05 - and this would be do user dot
09:10 - first okay so now you see
09:13 - the password is being stored in a
09:15 - digested form okay
09:17 - so thank you everyone for watching this
09:18 - tutorial i'll catch you in the next one
09:20 - thank you everyone