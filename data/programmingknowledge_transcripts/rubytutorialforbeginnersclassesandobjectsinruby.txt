00:00 - so today we are going to start with some
00:01 - object-oriented programming in ruby
00:04 - so let's create a most basic example
00:07 - let's create a class in ruby class
00:11 - person and we can like a notation use
00:15 - with a capital p
00:17 - and let's close this class by using an
00:20 - end tag now we can create a constructor
00:24 - in this class with def initialize
00:28 - so basically we initialize with id
00:31 - name and age so then we
00:34 - do we do close this constructor uh
00:37 - it's a good habit you keep closing them
00:39 - because then it would be
00:41 - like difficult for you to like know
00:43 - where which method or attribute or
00:45 - constructor
00:46 - is left or of being close and it will
00:48 - throw an error
00:49 - so now we can do add grade id
00:52 - so basically we are declaring variables
00:55 - uh and assigning them values and id
00:57 - great like these are like some uh now
00:59 - this works uh
01:00 - as a property of the class what do we
01:03 - call them
01:03 - attributes and another methods and
01:06 - functions so basically now we start
01:08 - setting the properties and attributes
01:10 - at the right name is equal to name
01:13 - and at the rate age is equal to age
01:17 - now you can make a intro method
01:21 - define intro and which would
01:24 - particularly give you the
01:26 - intro put s and you can start putting
01:30 - my name is put this in a hash symbol
01:34 - at the rate name okay
01:38 - and my age is
01:42 - put this in a like a simple
01:45 - hash at the edge
01:48 - okay so this is like your intro works so
01:51 - it looks perfectly fine
01:53 - now let's create a person
01:57 - so let's create a person and we can try
02:00 - our code p1
02:01 - is equal to person dot new
02:04 - we give it an as id a weak capacity
02:08 - parameters
02:09 - id 1 joe and 25 is the age and
02:15 - p2 is equal to person
02:19 - dot new let's create an id of 2
02:23 - james and let's give an age of 30
02:28 - okay yeah now we can do p1 dot
02:32 - intro let's call this p1
02:35 - intro now let's run this ruby classes.rv
02:38 - so my name is joe and my age is 25
02:41 - perfectly fine
02:43 - now we can do p2.intro
02:46 - and this would run the another one so my
02:49 - name
02:50 - is james and my age is 30. so everything
02:52 - looks perfectly fine
02:54 - now a very small concept here is
02:57 - we want to see how many persons were
02:59 - created okay
03:00 - like to keep a track of how many persons
03:04 - were created you can
03:07 - create a class variable so basically
03:09 - these belong to the class
03:11 - okay so these belong to the class and we
03:14 - can initialize persons
03:16 - is equal to zero this doesn't belong to
03:19 - the objectives belong to the class
03:21 - so these are like class variables uh in
03:23 - like that belong to the class
03:25 - now we can make a something a method
03:28 - which says
03:30 - deaf self dot get
03:34 - person count because
03:38 - and we can do get self dot to get person
03:42 - count and
03:43 - so this is like a like a method which is
03:46 - as excels access to the self class and
03:49 - it will basically return
03:51 - address persons okay
03:54 - now what you can do
03:58 - you can do so now we are using the class
04:01 - so
04:02 - put as person dot
04:06 - get person count so you can comment this
04:09 - comment this
04:09 - yeah now good to go let's clear this and
04:12 - run
04:14 - so did you mean initialized class would
04:18 - ever in person so
04:19 - look see there might be some error yeah
04:22 - so
04:22 - yeah this nationalized as zero so this
04:26 - like now it will work let's run this
04:30 - so now initial initially zero persons
04:33 - have been counted because i ran the
04:35 - program again
04:36 - now let's not do one thing let's create
04:38 - a one person
04:40 - now let's run this
04:45 - and it still gives okay yeah
04:49 - now because uh i'll tell you why it was
04:51 - throwing 0 because
04:52 - when you initialize a person you need to
04:55 - increment this by one as well
04:57 - i hope you get it so what you can do now
05:00 - it looks
05:00 - perfectly good so i'll give before you
05:04 - initialize the class variable with zero
05:05 - in increment by one whenever the
05:07 - constructor is called
05:08 - now you create a method to get its value
05:10 - okay now
05:13 - when a one person has been created so it
05:15 - should give me
05:16 - one when two person has been created
05:19 - it should return me two okay
05:23 - now let's create another person p3 is
05:25 - equal to person dot new
05:27 - like third three third like third person
05:30 - we are creating
05:31 - so we can give them any name let's give
05:34 - them a
05:38 - jack and let's give an age of 40
05:42 - 40 now let's run this now it you will
05:45 - see
05:46 - now it gives three so this is how we do
05:48 - it
05:49 - now let's make a small inheritance part
05:52 - so let's do class human
05:56 - and let's end this and define
05:59 - a percentage wall
06:02 - and let's end this and say put test
06:07 - put s human
06:10 - humans evolve okay
06:14 - now let's do inheritance
06:17 - so this is how we do we initialize
06:19 - person and inherit with human class
06:21 - now let's call let's comment this out
06:25 - yeah so let's comment this we don't need
06:28 - like this part so let's comment this and
06:31 - now we
06:32 - let us do put test p1 dot evolve
06:36 - okay so p1 dot
06:41 - evolve so this is evolv
06:45 - yeah now let's run this
06:50 - so humans evolved because okay now let's
06:53 - do
06:53 - though basically now i'm trying to show
06:55 - you runtime inheritance what if it had
06:57 - its own method evolve
06:59 - def evolved and like we end this and we
07:03 - do
07:04 - put test
07:09 - uh like person evolved
07:14 - persons
07:18 - involved or you can say people reward
07:23 - so basically this is like a just a dummy
07:25 - thing to show you
07:26 - and now you see people evolve because it
07:28 - had its own evolved
07:30 - method then it called it if it doesn't
07:32 - then call the human
07:33 - but make sure you make inheritance okay
07:36 - so this
07:36 - is how we do it and let's move to some
07:39 - like uh
07:40 - a very simple one uh
07:43 - so so i'll just make comment i'll
07:47 - comment everything
07:48 - yeah now let's take an another class
07:52 - class box now
07:55 - you can initialize with this
07:59 - and now basically uh you can create
08:01 - initialize
08:03 - height comma w and say at the red
08:06 - height is equal to h
08:11 - and at the rate width
08:14 - is equal to w
08:18 - and this is end okay now you can
08:21 - now make some getters and setters so
08:24 - basically get height
08:27 - okay and define get height define
08:31 - get width okay now you can close this
08:35 - now define set height
08:39 - okay so basically now you you
08:42 - pass a parameter and define
08:46 - set width now you pass a parameter
08:50 - parameter uh now you pass a parameter
08:53 - and
08:54 - now here you see so now you can do
08:57 - add direct width is equal to w
09:01 - at the right height is equal to h
09:04 - now return
09:08 - at the rate height so basically these
09:10 - are the getters and
09:11 - these are the setter and return at the
09:14 - rate
09:16 - width now you can also make
09:19 - access specifiers to this by using this
09:22 - private
09:24 - okay let's do private get height
09:28 - get width set height
09:31 - set width okay so basically you can make
09:34 - them
09:35 - private and make a public one is like
09:39 - get area so how you would
09:42 - work with get area define get area
09:46 - and basically you would end this and now
09:49 - you can
09:50 - simply return return at the red height
09:54 - star at the rate width okay
09:58 - so basically let's create a b1
10:02 - b1 is go to box dot new
10:06 - 0 0 and put as
10:10 - b1 dot get area
10:14 - so ruby class dot rb
10:18 - okay expecting end so like there isn't
10:21 - some issue let me check
10:24 - with this everyone uh so i got
10:27 - it was like a small error like uh you
10:29 - need to
10:30 - define the colon like put the colon
10:32 - before the methods
10:34 - so initially what i did i had this put a
10:37 - private
10:37 - colon here here and i did didn't put
10:39 - these so this was like
10:41 - wrong notation so that is why it drew
10:44 - an error now it's like good to go
10:48 - uh so what i'll do i'll put a undo this
10:51 - yeah so basically you can make them
10:53 - private
10:54 - so but uh now i'll comment this
10:57 - so now what you see that i created a box
10:59 - with zero values and i
11:01 - set a height and width then i did like
11:04 - get height and get to it and put get
11:06 - area so let's run this
11:08 - so it says yeah the height is 20 width
11:11 - is 10 which we had
11:12 - set at them using the setter and the get
11:14 - area is 200
11:15 - so this is how you can implement things
11:18 - and then
11:18 - like so this is like some getter and
11:20 - setter which were like encapsulation
11:22 - so so thank you for watching this
11:25 - tutorial you can explore some like
11:26 - creating some your own classes
11:28 - and moving out some inheritance so this
11:30 - shouldn't
11:31 - really help you so thank you for
11:33 - watching tutorials so i'll catch you in
11:34 - the next video thank you
11:35 - bye