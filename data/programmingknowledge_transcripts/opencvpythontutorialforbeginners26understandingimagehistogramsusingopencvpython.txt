00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will discuss
00:07 - about histograms in open CV so what is a
00:12 - histogram so you can consider histogram
00:15 - as a graph or a plot which gives you an
00:18 - overall idea about the intensity
00:21 - distribution of an image so let me give
00:25 - you some examples and then I will be
00:28 - able to explain you better how histogram
00:31 - works and why they are useful so to
00:35 - start with I have this example which is
00:39 - a very normal example here I'm creating
00:42 - 200 by 200 pixel image using numpy
00:46 - zeroes which essentially mean that we
00:50 - are going to get a 200 by 200 pixel
00:54 - image of black pixels so let me just
00:59 - just start this example and you can see
01:04 - this is the final result so all the
01:09 - pixels here in this image are black and
01:12 - the size is 200 by 200 now let's say we
01:17 - want to calculate or find out the
01:20 - histogram of this image so there are
01:24 - several ways of finding out histogram of
01:27 - an image so let's see them one by one so
01:32 - first of all we are going to find out
01:34 - the histogram using the mat plot libb
01:37 - because the plot using matplotlib you
01:42 - can draw easily so let's use that first
01:46 - of all so for that what I'm going to do
01:49 - is I'm going to use PLT because I have
01:52 - already imported this matplotlib library
01:55 - as PLT so PLT r dot hist there is a
02:00 - function called PLT dot hist which
02:04 - calculates the histogram of an image and
02:08 - because it's just a grayscale image or
02:11 - it's just a black image
02:13 - so it's easier to find out the histogram
02:17 - so you what you can do here is the first
02:21 - argument here will be your image or your
02:25 - source so I'm going to just say image
02:29 - dot Ravel's okay so there is a method
02:32 - called Ravel's the second argument here
02:36 - will be a maximum number of pixel values
02:40 - so I'm going to just say 256 the third
02:43 - argument here will be the range so the
02:46 - range will vary from 0 to 256 okay so
02:52 - this is all you need to find out the
02:55 - histogram using the mat plot lib and you
02:59 - just need to show this plot in a mat
03:02 - plot lab window so you can just say PLT
03:06 - dot show so that's it so let's run this
03:11 - code and let's see what happens so you
03:14 - see this plot using matplotlib and also
03:18 - our original image so as we have created
03:24 - the image of 200 by 200 pixel of black
03:29 - pixels so all the intensity of this
03:33 - graph you can see is zero so you can see
03:36 - here 200 multiplied by 200 is equal to
03:41 - 40000
03:42 - so these are the number of pixels so on
03:45 - the y-axis you will see the total number
03:47 - of pixels and here the intensity so
03:52 - intensity starts from 0 to 256 so this
03:57 - graph is showing how many number of
03:59 - pixels inside an image which have this
04:04 - pixel values so in our example all the
04:07 - pixels inside this image have the pixel
04:10 - value 0 that's why this graph is like
04:14 - this so all the 40,000 pixels inside the
04:18 - image have the pixel value 0 so you will
04:21 - get this type of histograms so once
04:26 - again
04:27 - the histogram is a graph or a plot which
04:31 - gives you the overall idea about the
04:34 - intensity distribution of an image now
04:38 - histogram is just another way of
04:40 - understanding the image by looking at
04:44 - the histogram of an image you can get
04:46 - the intuition about the contrast
04:48 - brightness intensity distribution at
04:52 - stretcher now let's improve this example
04:55 - which we have so I'm going to just close
04:57 - this window and let's say I want to add
05:02 - some white pixel also inside this image
05:06 - so what I'm going to say is I'm going to
05:08 - just see b2 dot rectangle so I'm going
05:12 - to just add the rectangle inside this
05:16 - image and the source here will be the
05:19 - IMG variable then where I want to
05:23 - introduce this a rectangle so I want to
05:25 - introduce this rectangle at this point
05:29 - which will be let's say which starts
05:32 - from 0 comma 100 and the second point
05:36 - here will be let's say 200 comma 200 ok
05:40 - so this will be 200 and the next value
05:43 - here will be the color so let's say we
05:46 - want to add the white pixels so this
05:50 - will be 255 which will be net the
05:53 - maximum value and then the next argument
05:56 - will be the thickness so I'm going to
05:58 - just say minus 1 which will fill this
06:00 - rectangle inside this image so when I
06:04 - run now this code you will see this
06:10 - graph and this image so you can see half
06:14 - of this image contains black pixels and
06:17 - half of this image contains the white
06:20 - pixels and we already know that the size
06:23 - of this image is 200 by 200 that's why
06:27 - here in the graph you will see 20,000
06:31 - pixels are black which means that 20,000
06:37 - pixels have the pixel value 0
06:40 - and 20,000 pixels have the pixel value
06:44 - 255 that's why you see this here so you
06:48 - can see you can easily find out the
06:50 - pixel intensity of an image easily using
06:55 - histograms now next we are going to add
06:59 - some more pixels into this image and
07:02 - this time what we are going to do is we
07:05 - are going to add the rectangle or inside
07:08 - the same image so let's say it goes from
07:10 - 0 comma 50 to 100 comma 100 and the
07:17 - color here we are going to provide the
07:20 - pixel value of 127 let's say okay so
07:24 - which is the half of 0 and 255
07:29 - approximately so I'm going to run this
07:33 - example once again and now you will see
07:38 - this kind of image so you can see half
07:40 - of the pixels here are white that means
07:43 - 20 thousand pixels have the pixel value
07:46 - of 255 so you can see here now around 15
07:51 - thousand pixels here in the half of this
07:55 - image have the pixel value of 0 that's
07:57 - why you can see this line here and we
08:01 - have added the rectangle of pixel value
08:07 - 127 also so around you can see around
08:11 - 5000 pixels here have the pixel value of
08:15 - 127 so this is how the histogram is
08:19 - going to work so let's use now the
08:22 - original image so some kind of image
08:25 - instead of this black or white image so
08:29 - now what I'm going to do is I'm going to
08:32 - just once again declare a variable and
08:35 - then I'm going to just say cb2 dot I am
08:39 - Reed and we are going to read some file
08:44 - so let's say I have this lamb Lenna dot
08:47 - jpg image so I'm going to just read that
08:52 - I hope text
08:54 - is correct JP G and we are going to read
08:59 - this image in the grayscale mode so I'm
09:01 - going to just say zero here and now I'm
09:04 - going to run this example once again and
09:08 - you can see this Lenna image is loaded
09:12 - in the grayscale mode and here is the
09:17 - histogram of this image so these are all
09:20 - the pixel intensities inside this image
09:24 - so you can see from this graph that most
09:29 - number of pixels contained inside this
09:33 - image have the pixel value around 150
09:37 - now you can also find out the pixel
09:40 - intensity of different colors so till
09:44 - now we have been just using the
09:47 - grayscale mode or black or white pixels
09:51 - but you can also use the same histogram
09:55 - for the BGR values also so let's see how
10:00 - we can undo that so what we are going to
10:04 - do is let me just remove this code all
10:07 - I'm going to just leave it commented and
10:10 - here I'm going to just say B comma G
10:14 - comma R and there is a method we have
10:18 - already seen which is called C V dot
10:22 - split which is going to split your image
10:26 - into PG R values so we are going to just
10:30 - give the source which is our image and
10:35 - then if you want to show these BG r
10:39 - values you can just show in the I'm sure
10:44 - window so BG R and here also be G and R
10:53 - and when you want to show the histogram
10:57 - of BG r values then also you can use
11:01 - matplotlib dot hist method you just need
11:06 - to change this source from
11:08 - image to be gr so be G and are okay
11:15 - so now what we are going to do is we are
11:19 - going to run our code and let's see what
11:22 - happens so it's giving me this error
11:26 - because I'm reading this image in the
11:29 - grayscale mode so I'm going to remove
11:32 - this extra parameter from I am read
11:35 - because we want to read this image in
11:39 - the color form and then only we will be
11:41 - able to get the BG our channels right in
11:44 - the grayscale mode there are no BG our
11:47 - channels so I'm going to run this script
11:50 - once again and let's see what happens so
11:53 - you can see this histogram of blue
11:56 - channels and green channels and the red
11:59 - channels and these are the images which
12:02 - are loaded in these different channels
12:05 - so this is the image which is loaded in
12:08 - the blue channel and this is the green
12:13 - and this is the red Channel and you can
12:16 - see the histogram of each channel
12:18 - differently using matplotlib so let me
12:23 - just close all these windows now there
12:26 - is a method in CV 2 also which is called
12:31 - calc hist which is going to give you the
12:33 - histogram of an image so for that what
12:38 - you can do is I'm going to just just
12:42 - comment all the this code because I just
12:47 - want to show how you can use the CB to
12:50 - calc hist method ok
12:54 - so what you can do is you can use
13:00 - methods so let's say a hist and then see
13:06 - we dot calc hist and this method takes a
13:11 - few arguments so the first argument here
13:14 - will be the image so it's the source
13:17 - which you give but the only special
13:21 - thing is you
13:22 - just give this image in the square
13:24 - brackets okay
13:26 - the second argument here is the channel
13:29 - so it is the index of channels for which
13:32 - we calculate the histogram so here in
13:37 - our case because we are going to read
13:40 - the image in grayscale mode we can just
13:43 - give the channel zero here so for one
13:47 - channel you can give zero here for
13:49 - different channel you can give zero one
13:51 - to value the next argument here is the
13:54 - image mask so to find a histogram of
13:57 - full image it is given as none because
14:01 - or because our image is loaded in the
14:06 - grayscale mode so we can give here none
14:09 - the next value is the hist sighs so this
14:14 - his size is the representation of bin
14:18 - count and this is also given in the
14:21 - square bracket so we are going to just
14:23 - say 256 here the next argument is the
14:27 - range so range will vary from 0 to 256
14:32 - so minimum and the maximum range of the
14:35 - x axis you can say so 256 and then we
14:40 - can just show this hist or histogram
14:45 - inside the PLT so the PLT dot plot
14:50 - method so dot plot and then we can just
14:56 - give this histogram value here okay so
15:01 - let's run this code and let's see what
15:03 - happens so you can see you get the
15:07 - histogram of this image using the opencv
15:11 - calc hist method and what are the uses
15:14 - of the histogram so our histogram can
15:17 - tell you whether or not your image has
15:20 - been properly exposed so when you take a
15:23 - digital image it's very useful it can
15:28 - also tell you whether the lighting
15:30 - conditions were flat or harsh when you
15:34 - took
15:35 - image and using the histogram you can
15:37 - also make the adjustments which will
15:41 - work best for your digital images so
15:45 - this the usefulness of the histograms we
15:48 - will see in the later videos this was
15:51 - just the basics about the histograms in
15:54 - OpenCV so I hope you enjoyed this video
15:57 - and I will see you in the next video
16:07 - you