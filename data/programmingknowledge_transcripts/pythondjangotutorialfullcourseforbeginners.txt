00:00 - in this tutorial uh we would talk about
00:01 - django so django is in a python based
00:04 - web framework so in this tutorial we
00:06 - will
00:07 - learn about what requirements we need to
00:09 - have on our machine to run django so
00:12 - what tools and code editors are required
00:14 - to have so that we can run django on
00:16 - your local machine so before i start i
00:19 - would like to show the content we are
00:21 - going to be covering in this video so
00:23 - first we will discuss about django uh by
00:25 - the official documentation of the django
00:28 - then we will talk about the tools and
00:29 - code editors what we require them and
00:32 - why we need them and then we will talk
00:34 - about how the steps to install django so
00:36 - these are the steps how we can install
00:38 - django and how we can start upgrade a
00:40 - django project and a django app on our
00:42 - local machine so django is a high level
00:45 - python web framework that encourages
00:47 - rapid development and clean pragmatic
00:50 - design
00:50 - so it was built by experienced
00:52 - developers it takes care of much of the
00:54 - hassle of web development so you can
00:56 - focus on writing your app without
00:58 - needing to reinvent the wheel it's free
01:01 - and open source in the django is usually
01:03 - based on mvt pattern model view template
01:07 - so this i'm referring to the official
01:10 - documentation of the django so
01:12 - it says
01:13 - there is a model layer
01:15 - so model layer if it's used for
01:17 - structuring and manipulating the data of
01:19 - your web application
01:21 - so the m stands for model and this model
01:25 - layer is used for structuring and
01:26 - manipulating the data of the web
01:28 - application the next we have is the view
01:30 - layer and the view it is responsible to
01:33 - encapsulate the logic responsible for
01:35 - processing a user's request and for
01:37 - returning the response so all the
01:39 - business logic is uh is encapsulated
01:42 - inside the view layer and it is
01:44 - responsible for building the logic and
01:47 - how the user can request and how you
01:49 - respond to that particular request so
01:52 - this is all about in the view layer so
01:53 - next we have is the template layer so
01:55 - template provides a designer friendly
01:58 - syntax for rendering the informations
01:59 - how you want to present the data to the
02:01 - user so the all the front-end part that
02:04 - is html javascript is there in the
02:07 - template layer so how you can design
02:09 - your front-end parts how you can want to
02:11 - show that the data or your show that
02:14 - design your page to the user is all
02:16 - defined inside the template layer before
02:17 - we create a django uh server on our
02:20 - local machine and we run it on a local
02:21 - machine you can go to the official
02:23 - website of the python you can move to
02:25 - downloads and according to your
02:27 - operating system you can download python
02:29 - and uh when uh please make sure one
02:32 - thing here that when you have downloaded
02:34 - the python and when you run the
02:36 - installer what you have to do is you
02:38 - will get a
02:40 - window like this on your screen and it
02:41 - says like install python 3.6.2 a 64-bit
02:45 - version what you need to do is make sure
02:47 - to enable this option that add python
02:50 - 3.6 to par so because this would add
02:53 - python 3 3 point any version you are
02:56 - using that is type python 3.x the x
02:58 - could be 3.5 3.6 3.7 3.8 to the path and
03:01 - you can access python wire command line
03:04 - i will show this you
03:05 - yeah i would open the command line yeah
03:07 - this looks better with a good font size
03:10 - so what i want you to do is now when you
03:13 - have installed python on your local
03:14 - machine you just need to type
03:16 - python it says yeah it says python 3.8.1
03:20 - after it's downloading download
03:22 - installing python to your path and
03:24 - running python from the command line you
03:26 - can move to sqlite studio and the sqlite
03:29 - studio used to interact with the sqlite
03:31 - database well initially we are going to
03:33 - work with sqlite database and django so
03:35 - you can this is you this provides your
03:37 - graphical user interference so you can
03:39 - click on this link download windows
03:41 - binary open and link you so i'm opening
03:44 - this link in the new tab so what you can
03:46 - do according to your
03:48 - operating system you can download the
03:50 - file from here and install it on your
03:51 - machine next what you can do is install
03:54 - visual studio kodio so visual studio
03:56 - code
03:57 - is the code editor we are going to use
04:00 - for this series we are going to use
04:01 - visual core studio because the best part
04:04 - of this is that it has an integrated
04:05 - terminal inside it so i can show you
04:07 - this thing like we this is the visual
04:09 - studio code and like we are we are doing
04:12 - some projects so we can interact with
04:14 - the visual studio code as well now the
04:16 - the third part like we have covered the
04:18 - a and the b part and in the third third
04:20 - part we are going to see steps to
04:22 - install django so what you can do is
04:24 - open your command line i would
04:26 - recommend you to run this command pip
04:28 - papers and python based package manager
04:31 - so it helps you to install packages and
04:33 - like libraries externally via command
04:35 - line so what you need to type is pip
04:37 - install django
04:39 - so this will install django new machine
04:41 - but like i've already installed django
04:43 - on my machine so it might tell me the
04:45 - requirement already satisfied because
04:47 - i've already installed django on my
04:49 - local machine
04:50 - so to check this what you can do
04:53 - i would recommend you to type python
04:56 - so python has been run by command line
04:58 - and now type import django
05:02 - now
05:03 - then next you can type django
05:05 - dot
05:06 - version
05:08 - so this will return with the django
05:09 - version which has been sold successfully
05:11 - on my machine so that this looks great
05:13 - that the angle has been installed on my
05:15 - machine so first what you need to do is
05:17 - type install django and you need to run
05:19 - this command so next time we are going
05:21 - to work with visual studio code with the
05:22 - integrated terminal so
05:25 - after opening your terminal what you
05:27 - need to do is move to desktop
05:32 - then move to the that folder cd
05:34 - programming
05:36 - knowledge so i am inside this folder and
05:38 - now
05:39 - i'm going to run directory command so it
05:41 - shows me that hello dot py file has been
05:42 - and a folder called notes are doing
05:44 - there so what i need to do is django
05:48 - admin
05:50 - start project
05:54 - this could be any
05:56 - project name you want to give in my
05:58 - project
06:00 - now i would run the directory command so
06:03 - this says my project
06:05 - has there is a folder called my project
06:07 - which has been has been installed on in
06:09 - the current directory and this is due to
06:11 - this command django admin start project
06:14 - my project
06:15 - so oh yeah you can see that my project
06:17 - has been sold successfully now the
06:20 - django project has been created and
06:23 - when if you want to
06:25 - start a app so as i mentioned earlier
06:29 - that inside this there is a manager by
06:32 - file
06:33 - so you can run this file via command
06:36 - line if you specify python
06:39 - as a prefix to this file name so in the
06:42 - same way we can run this manage.py file
06:44 - by command line if you use python as a
06:46 - prefix so what i'm trying to say is
06:50 - like you move to the uh sorry you move
06:53 - to the
06:54 - inside the django project folder which
06:57 - is my project named here cd
07:00 - my project
07:03 - now what you need to do is run the
07:04 - directory command so there is file
07:06 - called manage.py you can
07:08 - run this file if python
07:11 - manage dot py
07:13 - so you are able to run this file but in
07:16 - addition to this
07:18 - this i'm also specify something start
07:20 - app
07:22 - and you it could be my app so let me
07:25 - clear one thing here yeah so it's a
07:28 - better so first i created a
07:31 - i i was inside my programming knowledge
07:33 - directory then i created a folder called
07:35 - my project
07:37 - so this is a django project so inside a
07:39 - django project i created an app which
07:42 - i'm specifying like this
07:44 - python manager.py inside the project
07:47 - folder
07:48 - i'm trying to create an app with the
07:50 - name my app i want to tell you one thing
07:53 - that inside a django project there can
07:54 - be multiple apps so or we can say like
07:58 - there can be multiple apps inside a
07:59 - single jungle project okay so like by
08:02 - using this command we are going to
08:04 - create a app so i would say python
08:06 - manage dot py start app my app
08:09 - so when i move to my folder i would say
08:13 - my app so the my app has been created
08:15 - inside my my project folder in the same
08:18 - way i can do one thing extra
08:20 - i can do my app
08:22 - too
08:25 - oh so this also works so like what i
08:28 - told you that inside my django project
08:30 - single django project i have created two
08:32 - apps one is my app and another is my app
08:36 - too so what i wanted to tell you that
08:38 - inside a single django project you can
08:40 - create multiple apps
08:42 - so far we have moved to this now in the
08:44 - last one what you are going to run if
08:46 - you want to run the django server on our
08:47 - local machine what you need to do is
08:50 - you should be inside your project folder
08:52 - and type python
08:55 - manage
08:58 - dot py run server
09:05 - so
09:06 - so this says django version 3.4.1 using
09:10 - settings my project of settings starting
09:11 - delivery person will add this and this
09:13 - is
09:14 - 127.0.4.1
09:17 - and this is the 8 000 is port number so
09:19 - i want to tell you that this is your
09:21 - local host address till
09:24 - 127.0.0.1 and 8000 is your port number
09:27 - so either you can copy this address or
09:29 - you can one simply do one thing since
09:32 - 127.0.0.1 is your localhost address what
09:35 - you can type is simply type local host
09:38 - and specify the port number
09:40 - and port number was 8000 so this would
09:43 - okay now you can see
09:45 - the this page is being loaded here so
09:49 - what we can do we can quit the server
09:50 - with the control brakes brake command i
09:53 - think this is any issue with this
10:00 - i would again run this command
10:04 - okay so this shows that this has been
10:06 - now it has been started on my machine so
10:09 - like so now this is so this is the so
10:11 - you have to use this command
10:13 - python manage dot py run server so this
10:16 - has
10:16 - uh i started the server on my local
10:19 - machine with the address 127.0.0.1
10:22 - colon 8000 so this means that that
10:24 - address was local host the port number
10:26 - was 8 000. i had simply typed localhost
10:30 - colon 8000 so uh the server is running
10:33 - successfully so the install works
10:35 - successfully congratulations so though
10:37 - this view from here you can refer to
10:39 - django documentation tutorial for
10:41 - polling app django community i wanted to
10:43 - tell you that uh like in the previous
10:47 - tutorial i should told you like we were
10:49 - going to move with the request and
10:50 - response part but before this i wanted
10:53 - to show you that uh like i want to
10:56 - discuss a very important topic with you
10:57 - and that was about virtual environment
10:59 - so i
11:01 - only want to
11:02 - only want to focus on this topic only in
11:05 - this lecture because this topic has its
11:08 - own unique importance and value because
11:11 - it has a
11:12 - it has a good concept in itself
11:14 - and you need to have a good knowledge
11:16 - about virtual environments how you can
11:18 - work with virtual environment variables
11:20 - so because uh this would really help you
11:23 - like suppose you can have two cases here
11:25 - uh like here i'm just giving you two
11:26 - scenarios why you need to learn about
11:28 - virtual environment suppose you have
11:30 - made your django project and you want to
11:32 - deploy the django project online so
11:35 - in order to deploy the django pro uh
11:38 - project online you're on a server you
11:41 - need to have a have a record all the
11:43 - external libraries dependencies and
11:45 - packages you have used in this project
11:48 - in a file called requirements.txt
11:51 - so that the server can install those
11:54 - dependencies packages and libraries
11:57 - on on the server on the cloud i mean the
11:59 - server can install install that
12:01 - dependencies packages and libraries on
12:03 - the cloud then the server will install
12:05 - your application on the cloud and with
12:07 - the help of both the things when the
12:09 - both the things get installed then you
12:11 - are only able to run this application or
12:13 - second case you can have that when you
12:15 - are working in a team
12:17 - and there might be a possibility you
12:18 - want to share this code with someone
12:20 - else you want to share this whole
12:21 - project with someone else
12:23 - and they want to run this project on
12:25 - their machine or server as well but if
12:27 - they want to run this project or on
12:29 - their machine or this server server they
12:32 - need to have the list of those external
12:34 - libraries packages and dependencies you
12:37 - have mentioned in your project
12:39 - so that they can get get those
12:41 - dependencies installed on either on
12:43 - their machine or on the server in order
12:45 - to run this particular application
12:48 - so
12:48 - uh
12:50 - without any further delay i again
12:52 - welcome you all to programming knowledge
12:54 - and uh so
12:55 - my first step would be uh i have created
12:58 - a folder
12:59 - uh on my desktop with the name
13:01 - programming knowledge and the very first
13:02 - step i'm going to do is create a django
13:04 - project
13:05 - django
13:07 - admin
13:08 - start
13:10 - project
13:13 - my
13:14 - first
13:17 - project
13:20 - so
13:20 - when i run this command so i'm able to
13:23 - create a project inside this directory
13:25 - here you can see this you can even run
13:28 - the directory command as well
13:31 - so this would make sure that you have
13:32 - created the project now when you have
13:34 - made the project you would move into the
13:38 - project folder with the command cd my
13:41 - first
13:44 - project so i am inside the
13:46 - my project directory now
13:49 - so
13:50 - now i would create a simple i rather i
13:53 - would say that i would initialize the
13:54 - app inside this project folder so in the
13:58 - you can get familiar with this command
14:00 - lines in my previous tutorial with the
14:02 - name python
14:05 - manage
14:07 - dot p y
14:09 - start app
14:11 - and you can name anything with your
14:13 - first app i would name this as my
14:17 - first
14:22 - app
14:24 - so this looks good
14:27 - so this has created a app inside my
14:31 - project directory so to ensure this i
14:34 - would again run the directory command
14:36 - and it says my first have been installed
14:38 - so i'm going
14:40 - slow with this because this has a very
14:42 - important concept now now i would run
14:44 - python
14:50 - manage
14:52 - dot py
14:54 - run
14:56 - sir word
14:59 - now i hope the server gets started okay
15:02 - now it's running so either you can copy
15:04 - this address or you can say
15:07 - local
15:08 - post
15:09 - is same as 127.0.1
15:12 - i mean
15:13 - 127.4.4.1 now it is with the port number
15:16 - eight thousand
15:19 - so the local school and eight thousand
15:20 - is same as this address
15:25 - so this is the same as local colon 8000
15:27 - now
15:28 - i would want you
15:30 - to terminate this get this kill this
15:33 - server so i would cross this
15:36 - and now i would open the command line
15:38 - again
15:41 - now i want to tell you how why i'm going
15:44 - to show this i'm going to i'm going slow
15:46 - with this because this is a very
15:47 - important concept so uh
15:49 - now i would move to my desktop
15:55 - i would move to the
15:57 - programming knowledge folder then i
15:58 - would go to the
16:00 - my project folder
16:05 - okay so now i'm inside my project folder
16:09 - so you can have a graphical view of it
16:11 - also so this is the app being created
16:13 - i'm the my inside my project folder so
16:15 - now
16:16 - so i start started the server and it was
16:19 - running fine
16:20 - so i would refresh this trade so
16:22 - the server won't run now i guess so it's
16:24 - not running so because uh i had
16:27 - terminated the process so okay now it
16:30 - looks fine
16:31 - so now i what i want to tell you is
16:34 - uh
16:35 - you can uh open your command line
16:41 - and type
16:43 - pip
16:44 - install
16:46 - virtual
16:48 - env this is need this package is
16:50 - particularly needed to create a virtual
16:51 - environment
16:53 - so
16:54 - so this is requirement already satisfied
16:56 - because i already installed this and now
16:59 - i would move to my project directory and
17:02 - wait to create a virtual environment
17:04 - variable with virtual env
17:08 - now you can give any name to this uh it
17:11 - could be my environment my first
17:13 - environment django environment variable
17:15 - it could be any name so you can have a
17:17 - name of your own so i will give it my
17:20 - env
17:23 - so this this process takes a minute or
17:25 - so
17:26 - so this would create a virtual
17:28 - environment variable so by the time it
17:30 - gets installed i would like to tell you
17:32 - something
17:33 - like we till now we have created uh
17:36 - our environment variable name
17:39 - now
17:39 - we need to in order to use this
17:42 - environment variable name we need to
17:44 - activate this and why we are doing so
17:48 - because
17:49 - this would help us
17:52 - to keep the
17:53 - track record of all those dependencies
17:55 - and packages required in order to be
17:58 - mentioned in requirements.txt file so we
18:01 - can use them
18:02 - so this is a very good process uh so now
18:07 - so this
18:08 - environment has been installed and i i
18:10 - would activate so i would type so before
18:13 - this uh i would like to show you
18:16 - that i'm in the folder program and
18:17 - knowledge now i'm in the prototype this
18:19 - my enb variable has been initialized
18:22 - with the folder
18:23 - so you can have a look at this folder my
18:25 - nv scripts then there is activate so in
18:28 - order to activate this variable
18:30 - so
18:31 - what i need to do is i would go so this
18:34 - is the same as
18:36 - i would go my env
18:40 - slash
18:41 - scripts
18:43 - slash
18:45 - activate
18:47 - uh uh activate please make sure the
18:49 - direction of slash slash sign
18:52 - so uh you should
18:54 - please make a note of it so this would
18:56 - activate the virtual environment
18:59 - inside the project yeah this looks
19:01 - pretty good
19:02 - so
19:02 - the my env is now working here as a
19:06 - virtual environment variable which will
19:08 - help us to keep a track record of our
19:10 - things so what i want you to do is the
19:13 - first thing i want to do
19:14 - that earlier we ran the command python
19:17 - manage dot py run server and the server
19:20 - had started on our machine so that
19:23 - looked pretty simple
19:25 - now i would type this same command again
19:29 - python sorry for this
19:32 - python
19:33 - manage
19:35 - dot py
19:38 - run
19:39 - server
19:42 - so now you see
19:44 - this process doesn't get started
19:47 - so it says couldn't import django are
19:51 - you sure it is it's installed and
19:53 - available on your python environment
19:55 - variable
19:56 - so
19:57 - uh the environment uh variable did you
20:00 - forget to activate a virtual environment
20:02 - uh but i'm sure pretty sure the virtual
20:04 - environment is is activated and i
20:08 - i
20:09 - this at this time i wanted to show you
20:11 - this because uh i would again run this
20:14 - command and it would give me the same
20:16 - error because
20:18 - i want to tell you
20:20 - that the django has been installed on my
20:24 - machine so i want to tell you one thing
20:26 - that django has installed on my machine
20:29 - but not inside my virtual environment
20:32 - so i would repeat this the django
20:34 - earlier had installed inside my my local
20:37 - machine but not inside my virtual
20:41 - environment so this is the same case
20:44 - when you might want to work with
20:46 - you when you work in a team and you
20:48 - might share the code with someone and he
20:50 - might
20:51 - the somebody might add an external
20:53 - dependency so how you can keep track
20:56 - that externally depends dependency has
20:58 - been added on your project so how will
21:00 - you keep a track record of those things
21:02 - so you will keep a track record of those
21:04 - thing by environment variable and
21:05 - requirement on dxt
21:07 - the very next command i would tell you
21:09 - to install
21:11 - django inside my virtual environment i
21:13 - would simply type pip
21:16 - install
21:18 - django
21:22 - so this would install django inside my
21:24 - virtual environment so i would want to
21:26 - repeat it so this one installed on my
21:30 - inside my virtual environment
21:33 - so yeah great so django has been
21:35 - installed on a machine
21:36 - then
21:37 - the first thing you need to type is
21:40 - so i would like to tell you that i'm
21:43 - inside my project directory so django
21:45 - has been installed so in order to make
21:47 - sure this i would type this command tip
21:50 - freeze
21:52 - requirement
21:54 - dot
21:55 - txt
21:57 - so i would write direct recommend now
21:59 - you can see a file called
22:00 - requirement.txt has been created and i
22:02 - will open that file
22:04 - now this is the point i want to show you
22:07 - that in order to run this project i need
22:11 - django as an external because xiaomingo
22:13 - is a python based web framework so it is
22:15 - an external package or you can say
22:18 - dependency which python uses to make web
22:20 - applications so this python package
22:24 - django is needed with the version 3.0.2
22:27 - in order to run this application so
22:30 - suppose i want to tell you so this is
22:32 - the now i will run the command because
22:35 - now i have made sure that
22:37 - inside my requirement phd django has
22:39 - been installed on inside my virtual
22:41 - environment i specified those
22:43 - environment variables packages depends
22:45 - dependency inside the file
22:46 - requirement.txt
22:48 - now i i made sure the django has been
22:50 - installed my uh
22:52 - inside my virtual environment now i
22:54 - would run the command
22:57 - python
22:59 - manage
23:00 - dot py
23:02 - run server
23:06 - so this would start server now you can
23:08 - see that inside my environment variable
23:11 - i ran this command and this worked
23:14 - so
23:15 - i would go to this i would refresh this
23:17 - page
23:19 - now the server has started successfully
23:22 - so until now we have covered till this
23:25 - part sorry for this
23:27 - so what i mean with this command suppose
23:29 - i want to tell you
23:31 - that
23:32 - suppose
23:33 - uh we are working uh on project and
23:37 - someone
23:39 - like i want to show you an example of
23:40 - this
23:42 - so these are the suppose you are working
23:44 - on a data science project uh and you are
23:46 - working on a platform like django and
23:48 - someone might have come with three uh
23:52 - must have added these three dependencies
23:54 - so what you can do is
23:57 - you can add those dependencies
23:59 - suppose i'm just for an example someone
24:02 - was working within and i had added those
24:04 - dependencies on your project as well
24:06 - so you can utilize this
24:09 - by you can install those these
24:11 - dependencies your packages or
24:13 - by running a command i would tell you so
24:16 - i would first terminate this process
24:19 - so i would open my command line
24:22 - so i would go to the desktop folder
24:26 - and programming knowledge so now i will
24:29 - run the directory command so yes
24:31 - requirement.txt is here and i can read
24:34 - this file
24:35 - so i would type the command pip
24:38 - install
24:40 - minus r
24:41 - requirements.this is this line mean that
24:44 - install all those dependencies which are
24:47 - present inside the file requirements.txt
24:50 - in order to get working with this
24:52 - project so this would install all those
24:54 - dependencies
24:56 - so this might happen that already few of
24:58 - those dependencies might be already
25:00 - satisfied like i said this depends on is
25:03 - already satisfied and this might be uh
25:06 - agreed into something um also so this is
25:08 - requirement already satisfied
25:10 - now
25:11 - when i came to matt matplotlib so it
25:14 - started with the process of installing
25:17 - those library so what i mentioned you so
25:20 - there might be case that someone might
25:22 - come and add a new
25:23 - uh
25:24 - package or dependency to it so you might
25:26 - need this in order to run the full
25:28 - application whole application so to keep
25:31 - a track record of the dependencies
25:33 - required you need to specify them in in
25:35 - a file requirement of the and the server
25:38 - does the same very same thing when you
25:40 - deploy your application and the server
25:44 - in order to run the application on cloud
25:46 - you need to
25:48 - define those dependencies which are
25:50 - needed to run the application so this is
25:52 - a very important concept and to install
25:54 - those you can run this command pip
25:56 - install minus r requirements.txt in
25:59 - order to run all those application so uh
26:03 - thank you very much uh
26:05 - so like uh uh
26:07 - i would like to show you one thing that
26:09 - from now we are going to work on vs code
26:11 - and this is my project structure and i
26:13 - would like to show you a graphical view
26:15 - of my project as well so this is my
26:17 - project with the name my first project i
26:19 - have an app named my first app and i
26:22 - have created my env and here you can see
26:24 - i have activated my virtual environment
26:27 - variable
26:28 - and i have created a requirement.txt
26:30 - file as well so
26:32 - if you have any doubts regarding this
26:34 - one
26:35 - if this thing seems new to you so you
26:37 - can refer to my previous two videos so
26:40 - what i'm going to show you so this is
26:42 - going to be very interesting tutorial
26:44 - from now we are going to
26:46 - be learning uh on a this is going to be
26:48 - very hands-on tutorial so
26:50 - it's going to be very interesting also
26:52 - so what i'm going to show is you is that
26:54 - first you would define a url scheme and
26:56 - then we will generate a response to it
26:58 - so what we need to do is
27:00 - i would like to have a
27:02 - a brief overview of my structure as well
27:04 - so this is i'm inside my first project
27:06 - folder so there are various files with
27:08 - the extension dot py files the one of
27:10 - the important file here is url dot py
27:12 - file so like in this tutorial we are
27:13 - going to be working with this file
27:15 - so
27:17 - so before and the second file is
27:19 - settings.py file so first thing you need
27:22 - to do is move to your settings.py file
27:27 - and inside the installed apps
27:30 - you have to mention the app you have
27:32 - created with the name
27:35 - like this is the app which i made so you
27:37 - have to mention your app name
27:39 - inside settings.py file my first
27:43 - app
27:44 - okay
27:45 - and now what i'm telling you the second
27:48 - thing you need to do is uh
27:50 - like there is a urls dot py file in this
27:53 - in this directory so
27:56 - what you need to do is create one
27:58 - another url py file so like this is
28:01 - there are two varieties my first project
28:04 - so there is already your stockpile file
28:06 - inside my project directory because i
28:08 - told you that inside a single django
28:09 - project there can be multiple apps so
28:11 - you need to create a url file for this
28:14 - app as well so what you need to do click
28:16 - here
28:17 - new file
28:18 - url
28:21 - urls.py
28:25 - so i have created this file
28:27 - and now what i'm going to tell you that
28:29 - there are now two urs.p by file one is
28:31 - inside my directory my first app and one
28:34 - is inside my directory my first project
28:37 - so i would also have a graphical view to
28:38 - it so i'm inside my first project folder
28:41 - and there's a already
28:43 - py file inside it and now
28:46 - there is a url dot py py file in this
28:48 - folder as well
28:50 - okay so so you can see that now there
28:53 - are two urls dot py file one is inside
28:55 - this folder
28:58 - and one is inside this folder
29:00 - so what i need to mention uh my django
29:02 - project that you need to include urlg
29:05 - dot py file which is inside my folder
29:07 - called my first app so first you need to
29:09 - to include this you would type here
29:11 - include
29:14 - and second
29:16 - path
29:19 - include
29:22 - and you have to mention here my
29:24 - first app
29:27 - dot url
29:30 - so this is the that i mentioned that
29:32 - under the root directory you have to
29:34 - include my first app.urls so this looks
29:36 - pretty fine
29:37 - now
29:38 - i would define the urls
29:41 - here
29:43 - so uh yeah from there you can use the
29:45 - first line you need to add this from
29:47 - django.urls import path
29:50 - so
29:51 - i would move to here from django
29:54 - dot urs
29:57 - import
29:58 - path
30:00 - and then you need to define a list of
30:02 - url patterns
30:09 - okay so this looks pretty same as this
30:11 - also because here you can see they have
30:13 - included this from django.urls import
30:15 - path as well and url patterns is the
30:18 - list
30:19 - so this looks pretty fine here
30:21 - now
30:22 - i would define
30:24 - the first part
30:26 - to be this but before i want to tell you
30:29 - that the url will only work when there
30:31 - is a function called defined to that
30:33 - particular url
30:35 - so for that what you need to do is
30:38 - for you what i'm going to tell you you
30:40 - need to add this line
30:43 - because this url dot py is present here
30:45 - so you type
30:47 - from
30:48 - dot from current directory
30:51 - import
30:53 - views
30:55 - so what is the importance of these two
30:57 - lines is that
30:59 - the you have to create your views here
31:01 - so what they mean by is that for this
31:04 - particular url you have to mention a
31:06 - function call
31:08 - so
31:09 - i would do one thing
31:11 - that i would mention this path
31:16 - and called
31:17 - views dot
31:20 - my
31:20 - function call
31:24 - okay
31:25 - and i would name this as
31:28 - index so name
31:30 - index is used to refer the path name so
31:34 - i would tell you the importance of an
31:36 - index uh sorry i would tell you the
31:38 - importance of name how why we mentioned
31:39 - names on what when they are used when we
31:42 - and how can we use them in update
31:44 - how can we use them in the templates
31:46 - okay so
31:49 - uh in what i'm telling you that
31:52 - this pad path
31:54 - to call views dot my function call this
31:57 - could be any function name with the name
31:59 - and i have given this name that this url
32:02 - url has a specific name called index
32:05 - okay so now you would move to views.poi
32:08 - file and define a function my function
32:11 - call
32:16 - and
32:18 - this takes a request as a parameter so
32:21 - this is this
32:22 - you have to define this because you are
32:24 - making a request to this function call
32:26 - and now
32:28 - to generate a response what you need to
32:30 - type is you need to type you need to
32:32 - import to there are two types of
32:33 - responses one is http response another
32:36 - is json response so what you need to
32:38 - type is
32:39 - from
32:40 - django dot http
32:44 - import
32:46 - http
32:48 - response
32:50 - as well as json
32:54 - response
32:57 - so
32:58 - i think now it should work pretty fine
33:00 - and
33:01 - i would generate a response
33:03 - return
33:05 - http response
33:07 - of
33:08 - hello sorry hello
33:12 - world
33:13 - so now i would uh the so i would first
33:16 - have a quick recap of this that i have
33:19 - first included
33:21 - euro dot py file uh first thing i did is
33:24 - included my my app inside this then i
33:26 - have included the my first app.ual
33:28 - inside the my youtube viewer file of my
33:30 - first project
33:32 - then i mentioned this path
33:35 - and i made a function called to this
33:37 - path
33:38 - using the views file because in the
33:40 - views file views dot people value
33:42 - mentioned you mentioned your function
33:43 - call so i meant my function call
33:46 - and i named this particular url as index
33:49 - and
33:50 - inside my first function called
33:53 - i generated a http response i think this
33:55 - should
33:56 - this should work fine now
33:58 - i would say python
34:01 - manage
34:02 - dot py
34:04 - run
34:05 - server
34:09 - so this should work fine
34:11 - okay the server has started
34:13 - so i wouldn't okay yeah this looks
34:15 - pretty good so you can see
34:19 - you can see
34:21 - because i didn't mention
34:23 - something
34:24 - i didn't mention any any word here so it
34:26 - mentioned as a root directory so when i
34:29 - passed on this url
34:32 - when i called my
34:34 - url this particular url the root
34:36 - directory so it called my function call
34:39 - inside my views dot py file and i when i
34:41 - went to the views dot py file so it had
34:44 - a request as a parameter and it
34:46 - generated http response of this hello
34:48 - world so
34:49 - so this was the first thing now what you
34:51 - can do what you can do you can pass
34:53 - parameters as well so what you need to
34:55 - do uh i i will show you
34:58 - one thing
34:59 - for sure another thing
35:00 - what you can do is
35:03 - you can copy this line
35:10 - and you can name this as about
35:15 - and you can call this my function about
35:19 - and you can give this as about
35:23 - okay
35:24 - and now i'm making a path called about
35:26 - and use dot my function about so it says
35:30 - my first app dot views has no attribute
35:32 - my function about so i need to define
35:34 - that
35:35 - so i would define this as well
35:37 - okay
35:38 - for a quick real quick uh
35:40 - overview i would copy this and i would
35:43 - generate
35:47 - about response
35:52 - okay and i would now
35:54 - call this function my function about so
35:57 - what i did here is
35:58 - uh uh i made a request to slash about
36:02 - from my root directory and it called my
36:04 - function about and
36:06 - i gave this url a particular name about
36:08 - and it went to use dot py file and
36:11 - called this particular function
36:14 - and
36:15 - i would go back to my server
36:17 - so right now on the root it is
36:19 - generating hello world but as soon as
36:22 - i made a request to the about page
36:24 - so it says about response so this is
36:27 - pretty good so now you can understand
36:29 - the theory
36:30 - so
36:31 - you can also do one thing
36:34 - now uh what you can do
36:37 - is
36:38 - copy this line as well
36:43 - and name this as add
36:46 - my function
36:47 - or you can
36:50 - add
36:52 - end you can send this simply as a use
36:55 - dot add
36:58 - now i am telling this
37:00 - route uh what i can mention to show you
37:03 - like you can also
37:04 - pass parameters as well
37:06 - so to pass the integer i would type like
37:09 - this
37:11 - so i would move back to this and type
37:14 - and
37:18 - like you have to mention the end then a
37:20 - colon then h
37:22 - so this is going to be int a
37:29 - then into b
37:34 - okay and now i have to define the views
37:37 - dot add
37:39 - so uh
37:40 - i would go to dev
37:42 - at
37:42 - now the first parameter is going to be
37:44 - request the second paragraph is going to
37:47 - the integer which i'm taking which was
37:49 - suppose i am here entertainment as x or
37:52 - you can for simplicity for use a
37:55 - then
37:56 - b
37:57 - so what you need to do is
38:01 - return
38:03 - http response of
38:07 - a
38:07 - plus b
38:10 - so i think it should work now
38:14 - now what i'm telling you to add
38:18 - 20 to the first one is going to be one
38:20 - and second one is going to be two so it
38:22 - should work yeah now it had it has given
38:24 - me
38:25 - two integers of one and two and it
38:28 - returned initiative it responds with an
38:30 - output three the one thing i wanted to
38:33 - show you uh will this work if i change
38:35 - this a comb b to x comma y
38:39 - x plus y
38:42 - so this is all a part of learning
38:43 - process
38:45 - so i should make sure the server is
38:47 - running yes the server is running
38:49 - so first thing is i will move to this
38:52 - yeah it's working
38:54 - now i would move to this
38:56 - about yes working
38:58 - now i would move to add part add
39:01 - 4 comma 5
39:05 - so this doesn't work
39:07 - ok
39:08 - so why this didn't work because
39:12 - i had mentioned here
39:14 - in the urls dot py file
39:17 - that i'm going to get a as a parameter
39:20 - then b as a parameter
39:22 - so what i need to
39:24 - mention here that inside my views dot py
39:27 - file i had to strictly mention this as a
39:30 - comma b
39:31 - so
39:32 - so make sure
39:34 - you be careful about this now
39:37 - now i will restart the server
39:40 - and then refresh this page now this
39:42 - works uh because uh i wanted to make
39:45 - sure because this that inside i
39:47 - mentioned here as a and insured
39:49 - mentioned here as we
39:50 - so input parameters to my request part
39:53 - would be a comma b as well so then i
39:56 - generated shape response of a plus b
39:58 - okay so this was look good now the first
40:01 - second thing you need to do you can do
40:03 - you create a
40:04 - url
40:05 - so i would click quickly create this
40:07 - path
40:10 - intro
40:13 - the first matter is going to string name
40:17 - and the second one
40:19 - is going to mean int
40:22 - with an
40:22 - h
40:24 - and i would call views dot
40:27 - intro
40:29 - with the name particular name to this
40:30 - url as intro
40:34 - so this looks good
40:35 - so this would throw because i have not
40:37 - defined intro in my views.py file so i
40:39 - would move back to my
40:41 - so this time going to show your json
40:43 - respon
40:44 - define intro as a function taking first
40:47 - parameter as a request
40:49 - the second as
40:51 - name so let me check what i have defined
40:53 - first so i have defined name as first
40:54 - then age as second the name is going to
40:56 - be first and age is going to the second
40:59 - now
41:01 - i would define
41:03 - return
41:04 - a json response so to generate this just
41:07 - on a small i need to define a dictionary
41:10 - so dictionaries are basically key value
41:12 - pairs
41:13 - so could be
41:15 - my
41:16 - dictionary
41:19 - is going to be variable so with this
41:22 - name
41:23 - is going to be name
41:25 - here
41:26 - and
41:27 - age
41:28 - sorry
41:30 - uh h
41:32 - is going to be an age here
41:35 - and
41:38 - i would return a json response here so i
41:40 - wanted to show you the difference
41:42 - between the json response
41:44 - so
41:46 - uh systrom is an error because uh i
41:48 - think that it's uh because i have
41:50 - defined views dot intro now it should
41:53 - work particularly uh fine
41:55 - now it has started
41:57 - so
41:58 - what i'm showing you
42:00 - i would move to intro
42:03 - name as
42:06 - jack
42:08 - and the age has 25 so will this work
42:10 - so yeah here you can see that now it
42:13 - returned me and jason responds and i'm
42:15 - showing you particular
42:16 - like here it shows that this is an json
42:18 - response with the name and age and for
42:21 - the you can uh
42:23 - show to show the raw data as well so
42:24 - this is this shows you how json object
42:27 - looks like
42:28 - and
42:29 - and in the json format you have just for
42:31 - uh you can hear it the name is jack and
42:33 - the age is 25 and this is a json object
42:37 - so like in this way you can uh create
42:39 - more more urls so basically here i
42:42 - covered the http response as well as the
42:44 - json response
42:46 - so
42:47 - so like so
42:48 - to generate any if we generate a request
42:51 - so via a url so we generate a response
42:54 - to it as well so like in this
42:57 - tutorial we are going to basically work
42:59 - with templates and before i start with
43:01 - this tutorial i will show you that you
43:03 - can uh
43:04 - go to our github repository and you can
43:07 - have the look at full source code that
43:09 - we were working in the previous three
43:11 - tutorials so you can move to this link
43:13 - github github.com
43:15 - pro software development and then learn
43:18 - django is the repository name
43:20 - so i you can have a look at the full
43:22 - source code you can either you can even
43:24 - download this repository you can
43:26 - download this full source code and i
43:28 - have mentioned below how you can run
43:30 - this project so like what you need to do
43:32 - you can either clone or clone this
43:34 - project or download the project extract
43:36 - the files then
43:38 - move into the project directory and
43:40 - there is a file called requirements.txt
43:42 - i showed you in the previous tutor in
43:44 - the like in the previous tutorials how
43:46 - you can create a requirements.php file
43:48 - and why is it created so
43:50 - uh you need to install the all the
43:51 - packages necessary to work with the
43:54 - project so i would open the
43:55 - requirement.thp file this is these are
43:57 - the package required and after
44:01 - uh installing these packages you can
44:03 - type the command python manage.pyrun
44:05 - server and this would run this project
44:07 - on your local machine
44:08 - so we would be uh
44:11 - working on this repository as well so
44:13 - after the video i'm going to push the
44:15 - source code you can have a look at the
44:17 - source code as well what changes what
44:19 - changes were done so this would help
44:21 - help you to track the code as well
44:24 - and you can run this project on your
44:26 - local machine as well
44:28 - so
44:29 - uh in this tutorial we are going to work
44:32 - with templates
44:33 - and
44:35 - basically i told you the django is based
44:37 - on mvt pattern model view and templates
44:41 - so models are based with your database
44:44 - and views are based on your business
44:46 - logic part
44:47 - and
44:48 - templates are based on like uh on front
44:51 - end so models are based on your database
44:53 - views on business logic and
44:55 - templates for front and part so what you
44:58 - can i want to tell you that for a front
45:00 - end part basically we are going to use
45:03 - bootstrap
45:04 - so bootstrap is a
45:07 - is an uh
45:09 - world's most popular framework for
45:11 - building responses mobile first sites so
45:14 - i will show you the responsive nature of
45:16 - bootstrap as well because if you are
45:18 - making a web application and what you
45:20 - want to you want to target an audience
45:22 - so what you want to do is that if
45:24 - someone is using a web application on a
45:26 - desktop then some uh another day like
45:28 - someone it might use on a laptop as well
45:30 - tablet mobile phone uh and like there
45:34 - are various screen sizes so you want
45:36 - your application to adapt that screen
45:38 - size
45:39 - to so that to adapt that screen size
45:41 - bootstrap is used so this would make
45:44 - your content
45:45 - responsive in nature and
45:47 - adapt to the particular screen size of
45:49 - the user and this would help you to for
45:51 - a
45:52 - faster development as well so it has all
45:55 - the predefined css html javascript
45:57 - libraries and we will be using these
46:00 - templates and i will show you how you
46:01 - can use uh
46:03 - how you can use chrome developer tools
46:05 - to edit your your pages and you can uh
46:09 - you can
46:10 - be sure about how you can create your
46:12 - pages as well
46:13 - so the first thing you need to do
46:16 - uh
46:17 - like
46:18 - first thing you need to do like this i
46:20 - this as i mentioned how you can uh
46:22 - go with the repository and the same
46:24 - thing
46:25 - set a second thing you need to do you
46:27 - need to move into your settings.py file
46:30 - and
46:31 - before this you need to create a two
46:32 - folder one with the name templates
46:35 - another with the name static
46:37 - so
46:38 - templates and static are the two folders
46:40 - you need to do
46:41 - so
46:42 - first i would move to the my project
46:45 - directory so this directory is same as
46:46 - the github repository
46:48 - so i would create a new folder
46:51 - named temp
46:53 - plates
46:56 - so this is the first folder i have
46:57 - created templates and the second one
46:59 - which i'm going to create is the static
47:01 - so static basically
47:04 - is working with your static file it
47:06 - could be any starting file so basically
47:08 - just for an example you have an image
47:10 - which is a raw image and you need to use
47:12 - it multiple times so you can store a raw
47:14 - image in your static folder so in order
47:17 - to display in your web page as well
47:19 - so two folder templates will be having
47:21 - your html files
47:23 - and static is going to have your raw
47:25 - files
47:26 - it could be in any form
47:28 - so
47:29 - after creating these two folders what
47:31 - you need to do
47:33 - is to add them in your directory so the
47:36 - first thing you need to do is
47:39 - you need to move to your settings.py
47:41 - file
47:42 - and
47:43 - uh one shortcut i would show you that
47:46 - inside vs code you can type control plus
47:48 - p and move to any file suppose i have to
47:51 - move to this uranus dot py file or model
47:54 - shot p5 knowledge dot py file that this
47:56 - will be filed so i would type models dot
47:59 - py and it would
48:01 - have given me some recommendation about
48:04 - and i would click on it and i would move
48:05 - to this file so in this way again back
48:07 - to move to settings.uf file so this is a
48:10 - very interesting shortcut
48:12 - so under the installed apps i have
48:13 - mentioned my app
48:16 - and
48:18 - under the directories templates what i
48:21 - need to do
48:22 - uh i have to mention my current path
48:25 - where my templates are stored because
48:27 - this all this list is basically
48:29 - associated with the templates directory
48:32 - so i would type os dot path
48:36 - dot join
48:41 - base directory
48:43 - comma
48:44 - templates
48:48 - so this would join my folder that i'm
48:50 - telling that it could be any os
48:53 - environment
48:54 - uh i would uh join this from base
48:57 - directory to the templates so this would
48:59 - correct with this folder so my projector
49:02 - is not connected with this folder
49:04 - the second thing i need to do is
49:06 - uh the same thing i need to do for the
49:08 - static files but this is little
49:10 - different so i have to first mention the
49:12 - list
49:14 - static
49:17 - files
49:18 - underscore
49:19 - directories
49:22 - so this is the list and i would be
49:25 - using this so you can see that
49:27 - these are almost same thing os.
49:29 - os.path.join base directly underscore
49:31 - templates and another is oh.join
49:35 - based directory
49:36 - comma static
49:38 - so
49:39 - what i can do is os
49:41 - sorry
49:43 - os dot path
49:46 - dot join
49:48 - base directory
49:51 - comma starting
49:54 - okay so this looks good so i will run my
49:56 - server
49:57 - so
49:58 - till the time uh i will show you one
50:01 - thing
50:02 - that the my servers were working fine
50:04 - and i had made some urls like in the
50:06 - previous tutorial i showed you how you
50:08 - can make the request in the response
50:10 - part so uh like just for just for uh to
50:15 - be sure about this
50:16 - uh i would move to localhost
50:20 - colon8000
50:23 - okay so it says hello world uh and i
50:26 - showed you like you can create an uh
50:29 - urls as well so like in this we are
50:31 - going to create a url so so first thing
50:34 - you need to do is move to your templates
50:36 - folder
50:37 - so these are the two folders which i
50:38 - made templates and static so inside your
50:41 - templates folder you you will create a
50:43 - new file
50:45 - and name it as index
50:47 - dot html
50:51 - and
50:52 - you would you can you make this file and
50:54 - open this file and what you are going to
50:56 - do this inside your text index
50:59 - index.html file you are basically create
51:01 - your first html page
51:04 - and
51:05 - what you are going to do is you you will
51:08 - move the bootstrap website
51:10 - and
51:11 - you would go to the getting started then
51:14 - introduction getting started an
51:16 - introduction and now
51:18 - you would first pick the starter
51:20 - template because this would be very
51:21 - helpful you would you can copy this
51:25 - and paste this inside then index.html
51:28 - so like you can see that it has the
51:30 - whole html structure
51:33 - and it has all the javascript libraries
51:35 - predefined as well as the css libraries
51:38 - as well and you can note one thing that
51:41 - these uh css files as well as the
51:44 - javascript files has been kept online so
51:46 - anyone can use this uh
51:49 - css and javascript files because these
51:51 - are predefined in bootstrap and anyone
51:53 - can use bootstrap to make your web
51:55 - application responsive
51:56 - okay i would change this title
52:00 - to learn
52:04 - django
52:06 - and basically i would save this file and
52:09 - basically the title is this what you can
52:12 - see above here
52:13 - the like uh introduction bootstrap
52:16 - github dashboards dashboard software
52:18 - that this is it your title so
52:22 - learn django and i would say change this
52:24 - hello world
52:28 - django
52:29 - project
52:32 - okay okay so what you can do is
52:36 - you can
52:37 - move to your url.p by file
52:40 - and
52:41 - you can define a url to render your page
52:45 - so just for example i would define path
52:49 - my first
52:51 - page
52:54 - and i would call views dot
52:57 - my first
52:58 - name sorry my first page
53:03 - and i would
53:05 - give this a name
53:08 - my first
53:12 - page
53:14 - so i have created a path called my first
53:17 - page you and i would call the function
53:20 - my first page from views and i have just
53:23 - given a short name to this url as my
53:25 - first page so this is throwing me an
53:27 - error and why is it because i have did
53:29 - not define
53:30 - my first page function
53:32 - inside the views so i would move to my
53:34 - views dot py file
53:38 - so
53:41 - there my first
53:45 - page
53:46 - it is taking a request as a parameter
53:50 - and this time like in the previous two
53:52 - tutorials i showed you that i there can
53:54 - be various types of responses one is
53:56 - test http response json response but
53:59 - this time i'm going
54:01 - i'm going to render html page so i would
54:04 - say
54:04 - return return
54:07 - render
54:09 - request
54:12 - comma
54:13 - index.html
54:17 - so
54:18 - so this would render the html page
54:21 - and when i would move to this url so
54:24 - this would show me that page
54:26 - so i am inside my
54:28 - localhost and i will say slash my first
54:33 - page
54:36 - okay so yeah it's fantastic so what you
54:40 - can see that it has rendered the first
54:41 - page
54:42 - now i'm uh showing you two shortcuts the
54:45 - first one is control plus u
54:48 - so this would show me the whole front
54:50 - end code so this is the first order you
54:52 - can use the uh i will repeat control
54:54 - plus u
54:56 - okay and the second one is
54:58 - you can use
55:00 - inspect element
55:01 - okay
55:02 - and you can see now the responsive
55:04 - nature of this i can you show you that
55:06 - this is like chrome developers tool and
55:08 - you can use this to work with the front
55:10 - end part of your project it is very good
55:13 - okay galaxy s5 iphone 5
55:17 - okay this shows a responsive nature
55:19 - laptop laptop screen so this would be
55:21 - laptop so what i can do is uh move to
55:24 - galaxy s5
55:26 - and i would
55:28 - inspect this
55:30 - and i would
55:31 - element.styles i would change color is
55:34 - equal to
55:35 - red so this changes the color of this
55:37 - heading to red but this is
55:39 - uh to only to have a view of your
55:42 - project but as soon as i refresh because
55:44 - this is temporary you do this you can do
55:47 - some temporary changes to have a look
55:49 - but as soon as i refresh this page
55:52 - this is this is vanished so and so you
55:56 - can use chrome developer tools uh uh to
55:58 - have a change look at your front end
56:00 - part
56:01 - we are going to work with templates so
56:04 - basically templates are our html files
56:07 - and we can reuse them to render the back
56:10 - end
56:11 - logic into the front-end part
56:13 - so
56:15 - first thing i'm going to show you that
56:17 - the in previous tutorial we created a
56:19 - page so this is the page we created in
56:22 - the previous tutorial so i would type
56:24 - control u
56:26 - and this would this is a shortcut to see
56:29 - the front-end code so this is the whole
56:31 - front-end code and what noticeable we
56:34 - can notice from this is that this
56:36 - front-end code
56:38 - will always
56:40 - like the same html structure we are
56:42 - going to use it in a different
56:45 - file as well the so the we are going to
56:49 - like suppose in order like i will give
56:51 - you a practical example like uh this is
56:54 - a navbar
56:55 - and like this bar
56:58 - is going to be
56:59 - common in all the pages so when we move
57:03 - to another page so this number will
57:05 - remain common and this html structure
57:08 - will also remain common so what can be
57:11 - different the content of that
57:14 - page might be different from the another
57:16 - page and it will be different and the
57:18 - title can be different as well but the
57:20 - basic html structure and the navbar and
57:23 - the footer will always remain common to
57:26 - every page because navbar is something
57:29 - you
57:30 - will help your application from to
57:32 - navigate from one page to another and
57:34 - you will copy the nav part every time
57:37 - you make a new page so that that front
57:41 - end code uh will always be common to all
57:44 - the pages and we can
57:46 - make this with the help of these things
57:48 - uh which are extends block title block
57:51 - content and block i will give you a
57:52 - practical example how you can use it and
57:54 - what what is the importance of it
57:57 - so
57:58 - first uh inside my templates folder i
58:00 - would create a new file
58:04 - that is the first one is index.html is
58:06 - already there then i would create second
58:09 - dot html
58:12 - okay
58:13 - now i have created second.html
58:16 - uh
58:17 - i have to provide a url to access this
58:19 - page as well so i would copy this path
58:24 - and paste it here and instead of this uh
58:28 - first page
58:29 - i would do this as
58:31 - second
58:33 - page this is my second page
58:36 - and i would also
58:38 - second page
58:41 - and this is i would also change this
58:44 - second
58:45 - page so to be just quick i did this so i
58:48 - have provided a new paths my second page
58:50 - views dot my second page and have name
58:53 - this url as my second page so it is
58:55 - showing an error because why is it doing
58:57 - an error because till now i have not
59:00 - defined my second page inside my views
59:03 - so i would go back to my views dot py
59:05 - so
59:06 - like the previous there was one of my
59:08 - first page which used to render an
59:10 - index.html i would create a second page
59:13 - as well my my
59:15 - second
59:18 - page
59:19 - with which would take request
59:21 - as an input parameter and would return
59:25 - render
59:28 - request
59:31 - comma
59:32 - second
59:34 - dot
59:35 - html
59:37 - so
59:39 - so i told you like this would i have
59:41 - created a second.html page in my
59:43 - template folder then i provided a url
59:45 - then a view function to that url as well
59:48 - so
59:49 - when i move to my page my second page
59:54 - okay so
59:55 - i'm to my page but till now it's blank
59:57 - so nothing is there in that page but
59:59 - what i wanted to
60:01 - tell you
60:02 - if you view the source code of the
60:04 - front-end part uh it's still not blank
60:07 - so this shortcut was by control plus you
60:10 - and this is the
60:11 - source code of the first page so you
60:13 - want all this thing to be common in that
60:16 - page as well uh okay before i do this i
60:19 - would uh show you one thing as well i
60:22 - would copy this nav bar
60:24 - okay i've copied this nav bar and i
60:27 - would paste this
60:29 - in my
60:30 - index.html okay
60:32 - please make sure this is index.html
60:36 - okay this is index.html
60:39 - and when i move to the my first page
60:44 - okay
60:45 - i will move to my first page
60:48 - my first
60:52 - page
60:54 - so this is the source code of my first
60:56 - page and this has been
60:58 - uh updated uh because it has a navbar in
61:01 - it as well
61:02 - and when i move to this
61:05 - page
61:08 - okay now this looks pretty cool
61:10 - okay so what i told you that inside my
61:12 - first page
61:14 - uh i have given
61:16 - uh a navbar and uh what i will do one
61:19 - thing also
61:21 - uh i would change the title as well
61:24 - to make sure
61:26 - there is no confusion my
61:28 - first
61:30 - page
61:33 - okay so this looks pretty fine and
61:36 - pretty cool till now okay
61:38 - uh and this would this this is my first
61:41 - page
61:42 - and what i need to do this is my first
61:45 - page now i would move to this
61:47 - second.html file as well
61:50 - and inside my second.html file what i
61:53 - will do i would type
61:57 - percent
61:59 - extends
62:02 - index.html
62:09 - and i would give this as a percent
62:11 - command
62:12 - okay so this would
62:15 - when i move to the second page
62:20 - so yeah this is this my second page as
62:23 - well and you can see this has cloned all
62:26 - the things which were there in the first
62:29 - page as well
62:30 - but i need to take care about one thing
62:32 - that my title should be different
62:35 - so i would move back to my index.html
62:38 - and
62:39 - inside this i have to mention the title
62:42 - in this way
62:44 - block title and because
62:47 - when i might move to an another page so
62:50 - i would type percent block
62:54 - title
63:00 - and percent
63:03 - and
63:04 - block
63:10 - okay
63:10 - and inside my
63:14 - second.html i would repeat this as well
63:17 - so
63:18 - just to be quick i would copy this
63:32 - i would copy this
63:41 - okay this looks pretty fine
63:43 - so
63:44 - i would open both the pages
63:47 - this is my second page
63:51 - okay
63:53 - and i will open the first page as well
63:59 - so this is my first page
64:00 - and this is my second page so you can
64:04 - feel the difference here that within
64:06 - within two lines of code i cloned all
64:10 - the
64:11 - html structure as well as the nav bar
64:13 - from for index.html to second.html
64:17 - and i provided two routes to them uh one
64:19 - was my first page with the name
64:22 - with the title my first page and another
64:24 - one with the title my second page
64:27 - so this looks pretty good and what you
64:30 - can do now is
64:32 - you want to change the content so inside
64:35 - index.html
64:38 - i would move this h1 directory
64:42 - inside a content so the i would uh
64:45 - named that first page as well
64:48 - so
64:49 - uh i would
64:52 - type percent block
64:56 - content
65:02 - and
65:03 - percent and
65:05 - block
65:11 - so when i reload my page so this is my
65:13 - first page
65:15 - so it says hello world django project
65:17 - first page and when i refresh this page
65:20 - this is also says hello world django
65:22 - project first page
65:24 - but i want to change this content this
65:27 - particular content
65:29 - block content so i would
65:32 - do one thing i would move back to the
65:34 - second.html and i would type
65:39 - percent block
65:41 - content
65:48 - and again end block
65:53 - and
65:54 - i would type this given head h1 heading
66:00 - second
66:02 - page
66:04 - extends
66:06 - first
66:09 - page
66:10 - with
66:12 - a common
66:16 - nav bar
66:20 - this should work fine
66:22 - so see the magic now the second page
66:25 - extends first page with a common navbar
66:28 - and this is my first page
66:30 - okay and this is my second page so you
66:33 - can feel the difference like
66:35 - inside my first index.html but the only
66:38 - thing
66:39 - what was the driving force
66:42 - uh i would open this
66:44 - and then show you that the
66:47 - content of this page is here this is the
66:51 - actual line and this was the content of
66:53 - the first page and inside the second
66:55 - page
66:56 - this was the
66:58 - content
66:59 - okay but you can see that all other
67:02 - things are common with the title being
67:04 - different and the content being
67:06 - different everything is common so
67:09 - what i wanted to tell you show you that
67:12 - when you use
67:14 - the extent functionality of the template
67:18 - with the i think with the three or four
67:20 - lines of code you can clone the first
67:23 - page or the html navbar from the first
67:26 - page to an another page and this will
67:29 - reduce your html code as well and this
67:32 - will help you
67:34 - to make dynamic html pages in for future
67:37 - so what you need to do is you need to
67:40 - create index.html
67:42 - then
67:43 - you need to define a dynamic block title
67:45 - to it
67:46 - so okay this looks fine then you need a
67:49 - dynamic block content to it as well and
67:52 - you need to extend this in the second
67:54 - page as well with the help of this line
67:56 - okay so with the help of only four to
67:59 - five lines of code we were able to
68:00 - extend the
68:03 - first page to on a second page and in
68:05 - this we are going to work with how you
68:07 - can
68:08 - work with how you can work with the
68:10 - django templates in order to render
68:14 - more things on your front-end
68:16 - application part but this time we are
68:18 - going to use two things one is going to
68:20 - be the for loop
68:21 - and one is going to be the first part
68:24 - and before this i will show you how you
68:26 - can pass variables to your front-end
68:28 - application front-end part of your
68:30 - application using the text function and
68:33 - how you
68:35 - render your variables using a dictionary
68:37 - so you will get to know this all this in
68:39 - this tutorial so let's get started with
68:42 - it so first thing is i'm going to do
68:46 - is going to define a path
68:48 - so this basically i'm going to define a
68:49 - url
68:50 - my third
68:53 - page
68:54 - and i would call a function views dot
68:58 - my third page
69:00 - and i would name this as a my third way
69:03 - third page as well
69:05 - so i am
69:07 - using this naming convention so that in
69:10 - order you you get a don't so you get a
69:13 - brief overview like this is the third
69:15 - page we are working on so i of course i
69:18 - will run my server on my machine
69:20 - so
69:21 - this is going an error why is it so
69:23 - because till now i have not defined my
69:25 - third page
69:26 - function in my views
69:28 - so
69:29 - what i'm going to do
69:30 - i'm going to move to my views dot py
69:33 - file and define
69:35 - my
69:37 - third
69:39 - page
69:41 - which take request as a parameter
69:44 - and basically it is going to
69:46 - return and render
69:51 - requests
69:53 - and third dot html
69:56 - so basically till now i have not defined
69:59 - third dot html yet
70:01 - so what i'm going to do
70:02 - is go into my templates folder and uh
70:06 - inside my i'll go to second.html
70:09 - so i would quickly copy this
70:12 - and create a new file i'll paste this
70:15 - and i'll change this as
70:17 - third
70:19 - and even i'll change this also as third
70:27 - now i'll save this as
70:30 - third
70:31 - dot html
70:35 - and i hope this will work
70:38 - and i will move to my local host okay
70:40 - this server has started
70:43 - my third page
70:45 - so
70:46 - you can here see
70:47 - the title is my third page
70:50 - so third page extends first page to the
70:52 - common nav bar so i told you how you can
70:54 - quickly extend one page to
70:57 - another another
70:58 - using an extend function
71:00 - so now i would tell you how you can
71:02 - extend variables
71:04 - uh actually you are going to
71:06 - extend variables
71:08 - to the front-end application using the
71:10 - context function this is going to be
71:12 - very
71:13 - pretty good
71:14 - and pretty easy also so what you can do
71:17 - you can
71:19 - simply create a variable i'll create a
71:21 - variable of a data type string with the
71:24 - name hello world
71:28 - now
71:29 - what i am going to do
71:31 - i am going to define my dictionary
71:36 - and what
71:38 - what variable you want to pass okay just
71:41 - for it just to be on an easy way i'll
71:45 - this any key value here so basically
71:49 - basically you are
71:51 - passing the variable where
71:54 - with the name also as where so what i'm
71:57 - going to do i'll
71:59 - you have a quick overview of this so you
72:02 - will type context
72:05 - is equal to my dictionary
72:07 - now
72:08 - you are passing on variable where so
72:10 - this is your variable basically this has
72:12 - a data
72:14 - on the right side
72:15 - value and on the key side you are naming
72:18 - the name which is going to be rendered
72:20 - on the front-end part and now
72:23 - what i am going to do i am going to
72:25 - declare h1 heading
72:27 - and to initialize the value of the
72:29 - variable i am going to type where
72:33 - ok this looks good now i will refresh
72:36 - this page
72:37 - now it says hello world so this is
72:39 - pretty cool
72:40 - now
72:41 - what i can do also i'll have another
72:44 - variable
72:48 - greet
72:49 - greeting
72:51 - and i'm saying
72:53 - hey
72:56 - how
72:57 - are
72:58 - you
72:59 - so this would greet the user
73:02 - but this time
73:03 - i am going to pass with the name
73:06 - message
73:09 - so
73:10 - so this would help you to understand
73:13 - so this can be an enemy so what i'm
73:15 - telling greeting is and variable of data
73:17 - type string
73:19 - so this is the value grading and what
73:21 - name i am going to pass it with the
73:23 - message name
73:24 - so when i move to the third dot html
73:28 - what i am going to do
73:30 - i am going to use message
73:34 - here and now this message basically has
73:37 - the greeting variable inside it
73:41 - so this would print the value on the
73:44 - front-end application part so say it
73:46 - says hey
73:47 - how are you oh this looks pretty cool
73:49 - now
73:53 - i'm going to define a list of fruits
73:57 - basically
73:58 - apple
74:02 - mango
74:05 - and banana
74:08 - and
74:11 - i am going to pass these fruits using a
74:14 - key value pair
74:15 - so basically
74:18 - i am going to pass it with the name my
74:20 - fruits
74:22 - so this would
74:24 - pass these fruits
74:25 - which has a data type of list or array
74:29 - you can say
74:31 - and
74:32 - i am going to pass it with the name my
74:34 - fruits on the front end part
74:37 - and when i move here
74:39 - i'll create an unordered list using a
74:41 - simple for loop
74:43 - so i would type
74:45 - okay before this i would type for
74:48 - each
74:50 - fruit
74:51 - in
74:54 - my
74:55 - fruits
75:00 - i'll simply simply end this loop using
75:03 - this template and 4
75:06 - and
75:08 - i'm going to type type the list
75:10 - parameter
75:13 - and basically each fruit is the value
75:16 - i'm going to print
75:21 - and you can see the magic here you can
75:24 - see apple mango banana is here
75:27 - and simply maybe sometime you have a
75:30 - large list
75:31 - in your back and part and you want to
75:34 - print it you can simply print it using a
75:36 - for loop
75:37 - so even this you can you you could do
75:39 - this like this
75:41 - most of you do it like
75:43 - for i in my fruit
75:45 - you can simply print
75:48 - i as well so this would also work
75:53 - okay so you can see here even this also
75:55 - works so this looks pretty cool we are
75:58 - done with the for loop as well
76:00 - now
76:01 - we are going to work with the if else
76:03 - part
76:04 - so
76:05 - in the views dot py
76:08 - you can see
76:09 - i'll declare
76:12 - a variable it could be of any type
76:15 - and basically
76:18 - uh
76:19 - it could be of any type what you can do
76:21 - is like you can i can have a brief
76:23 - overview
76:25 - this is how we use
76:26 - like if
76:29 - lf
76:30 - else
76:32 - and nf
76:33 - so in order to end anything you need to
76:36 - type if alif else and end if
76:39 - so
76:40 - what we can do
76:42 - okay
76:44 - okay we are going to take two
76:46 - numbers num
76:48 - 1
76:50 - comma num 2 is equal to
76:54 - 3
76:55 - and 5
76:57 - so what we are going to do
76:59 - and we are going to take a variable
77:02 - answer
77:05 - and that answer is going to be
77:11 - what we can do
77:12 - is
77:14 - answer is going to be num1
77:17 - is greater than num2
77:20 - so
77:21 - before this i would print the answer on
77:23 - my console
77:27 - so what i'm going to do is going to
77:29 - refresh this page
77:31 - this would this url will call that
77:34 - views.views.py and it says false
77:38 - so you can here see it says false
77:40 - because
77:41 - num1 has the value 3 and the num 2 has a
77:43 - value 5
77:44 - and
77:46 - is 3 greater than 5 no so this gets the
77:48 - value as false
77:50 - and it this prints the answer on my
77:53 - console so i would comment this out
77:56 - and i would
77:59 - render
78:01 - answer
78:02 - as answer
78:04 - and
78:07 - num1
78:11 - as num1
78:14 - okay
78:16 - and also
78:19 - num
78:20 - 2
78:22 - as num
78:24 - 2 so this should work
78:28 - and i'll see
78:30 - okay
78:31 - now
78:32 - you can see okay the this is going to be
78:34 - rendered so num1 is being passed as num1
78:37 - num2 answer now i am what i am going to
78:41 - do
78:42 - i am going to use an if condition
78:51 - if
78:53 - answer
78:58 - and i'm going to
79:00 - use an else part as well else
79:07 - and
79:08 - and if
79:11 - okay so you can see this is the same
79:13 - syntax i'm using so this time i'm only
79:16 - using an if
79:18 - else and end f only
79:22 - if answer
79:25 - if an answer is right
79:28 - this means what i mean meant in my
79:30 - views.py file
79:32 - that
79:34 - if
79:34 - this is true then num1 is greater if
79:38 - else it's false then then num2 is
79:40 - greater
79:41 - then you will type
79:49 - num1 is
79:51 - greater
79:56 - than
79:58 - okay we can even do this like this also
80:01 - what we can do we'll use curly braces
80:04 - num1 is greater than
80:09 - num
80:11 - 2
80:12 - so this looks good
80:17 - an else part we are going to the
80:19 - reciprocal of it
80:20 - i'll change this as num
80:23 - 2
80:24 - is greater than
80:26 - num
80:27 - 1
80:28 - okay so this is my if else part
80:31 - and i'll move to my page
80:34 - and if this says 5 is greater than 3
80:38 - because
80:40 - i had mentioned in the use dot py file
80:42 - okay if i change these two number as any
80:44 - random numbers i'll take this
80:47 - to 10 and i'll take this as
80:50 - 7 so this will work
80:52 - maybe this should work and okay it says
80:55 - 10 is greater than 7
80:58 - because
80:59 - because uh
81:01 - i have created the backend logic and i'm
81:04 - using that back logic on in my front end
81:07 - part as well so in the previous you i
81:10 - showed you
81:11 - five is greater than three now i'm sure
81:13 - you 10 or greater than seven so you can
81:16 - use this back in logic on the views dot
81:19 - py part to render it and show it to your
81:21 - front end part so first thing
81:23 - uh i need to do you need to move to your
81:26 - settings dot py file so i'll move to
81:28 - settings dot pi file
81:30 - and inside my settings wi file uh what
81:33 - you need to do you need to define a
81:34 - static url which is going to be static
81:38 - and you need to define static files
81:39 - directly is equal to os dot path dot
81:42 - join
81:43 - base directory with the static folder so
81:46 - what here i am actually mentioning
81:48 - that i have made a static folder and
81:51 - here it is and inside my static folder i
81:54 - have two images django.png and
81:56 - python.png so i would be using these two
81:58 - images
81:59 - and what i'm going to show you
82:02 - what you need to do uh so this is the
82:04 - static folder which i'm referring which
82:06 - i also showed you into vs code i'm
82:09 - showing here for a better experience for
82:11 - view for view for it
82:12 - and
82:13 - inside my static folder i have two
82:15 - images one is django and another is
82:16 - python
82:18 - so i'm referring to this particular
82:19 - static folder
82:21 - and to refer this particular static
82:23 - folder you need to move your move into
82:25 - your settings dot py file and you need
82:27 - to define this heading sorry this piece
82:29 - of code
82:30 - okay
82:31 - uh so first i'll create a route so i'll
82:33 - move to my urls.py file
82:36 - and
82:38 - i am going to define path
82:41 - my
82:43 - image
82:45 - page
82:46 - okay
82:47 - and i going to define a views
82:50 - dot my
82:53 - my image
82:55 - page
82:56 - and i'll give this a name
82:59 - is equal to
83:01 - my
83:02 - image
83:04 - page
83:05 - so this is going to be interesting
83:07 - okay
83:08 - now my image page i've defined my image
83:11 - page here
83:13 - okay and i'll define a function inside
83:14 - my views my image pin and i have given a
83:17 - name here it is on my image page also so
83:20 - what i'm going to do
83:22 - i'm going to define a view
83:26 - okay i'll define a view define
83:29 - my image
83:31 - page which takes request as a parameter
83:35 - good
83:37 - and it will return and render an html
83:39 - page request
83:41 - and that's name is going to be image
83:44 - page
83:45 - dot html so this is pretty fine
83:48 - okay the server has been reloaded okay
83:51 - so this looks pretty fine till now and
83:53 - inside my templates folder i'll create a
83:55 - new
83:56 - template i'll click here new file
84:00 - image
84:01 - page
84:03 - dot
84:03 - html
84:05 - okay this is fine now
84:07 - okay now to create an image page.html
84:10 - what i'm going to do
84:12 - i am going to take uh any of the pages
84:14 - here okay
84:17 - and i'll copy this quickly
84:20 - okay now what do you need to do
84:23 - i'll define this as
84:26 - uh okay sorry for this
84:28 - i'll define this as
84:31 - you can define any name image
84:35 - page
84:36 - okay so
84:38 - and what you need to do i'll open this
84:41 - text file so this is the syntax how you
84:44 - can load and static
84:46 - image
84:47 - so what you need to define you need to
84:49 - define percent load static
84:51 - inside your builder template so below
84:53 - this line i'll define percent load
84:56 - static
84:58 - percent
85:00 - load
85:01 - static
85:03 - and
85:04 - i'll refer to this image
85:06 - okay uh i'll
85:10 - remove this okay from here what i'm
85:13 - going to tell you
85:14 - that this is a bootstrap
85:16 - and here what you need to do
85:18 - you will learn about images so here i'll
85:21 - type images
85:25 - so this is the responsive class of
85:27 - bootstrap we are going to use which will
85:29 - help us to make our
85:31 - image responsive so this is going to be
85:33 - very interesting
85:35 - so what you can do
85:37 - you can define
85:39 - div
85:40 - class is equal to container
85:44 - container fluid
85:46 - okay
85:47 - and
85:48 - what are you going
85:49 - what i'm going to do next
85:52 - i'll define a row we will we will be
85:54 - learning bootstrap in the upcoming
85:56 - lectures as well so
85:58 - this uh i'll give a short idea how you
86:00 - can create a responsive page so this is
86:02 - going to be interesting uh diff class is
86:04 - equal to row and inside a row i have a
86:06 - container then a row inside my container
86:08 - then inside my room i have a column
86:11 - diff class is equal to call
86:14 - md
86:15 - six
86:18 - okay
86:18 - now
86:19 - i'm going to
86:21 - quickly
86:22 - uh copy this
86:24 - so how you can use this class
86:27 - so
86:29 - so this class image fluid responds to
86:31 - this will refer to the
86:33 - responsive css which has been already
86:36 - written inside the bootstrap to make our
86:38 - image responsive on multiple devices
86:41 - and to define the image source i'll use
86:43 - a curly brace
86:45 - then percent sign then again a person's
86:47 - side
86:48 - and inside my person sign i'll space
86:51 - give space tactic
86:53 - and i'll define the image name using
86:55 - single quotes
86:56 - so let me define
86:58 - chango
87:00 - dot png so this this looks pretty fine
87:04 - here
87:05 - django.png and you can define you can
87:07 - give any name here okay so uh i'll just
87:12 - close the server then restart my server
87:15 - okay the server has started and us i
87:17 - have no issue here so i'll go to my
87:20 - local host yeah it's running
87:22 - and i'll give my
87:25 - image
87:26 - page
87:28 - okay so this is showing an error
87:31 - which says
87:33 - the current path let me check my url
87:36 - oh i didn't save this okay
87:40 - yes no okay now it's working
87:44 - yeah here you can see so you can see the
87:46 - image has been successfully loaded so
87:48 - this looks pretty good
87:50 - you can also use uh in your html page
87:54 - what you can do
87:56 - you can also use python.png
88:04 - so this also works so this looks pretty
88:06 - fine
88:07 - and now what i'm going to show you
88:09 - django dot png
88:11 - so i'll move to django.png and so i'll
88:14 - give you a brief intro
88:16 - so
88:16 - now you'll right click on this and click
88:19 - inspect and when you click on inspect
88:23 - so
88:24 - this is a container fluid then this is a
88:27 - row inside there is a column of width
88:30 - medium six that on the multiple on the
88:32 - medium devices it will have a
88:34 - width of six the bootstrap has a total
88:37 - width of 12 so we are going to learn
88:38 - that and this image source is this
88:41 - particular image so we can play with the
88:43 - inspector tools what we can do
88:45 - we can use background
88:47 - is equal to red
88:50 - let me uh
88:51 - sorry for this okay like this is our row
88:54 - so i'll type background
88:56 - [Music]
88:58 - is equal to red now you can see a row
89:01 - which was also equivalent to the
89:03 - container fluid as a background red and
89:05 - what we can do this is a column we'll
89:08 - align this image in the center and type
89:10 - margin
89:12 - zero auto okay so now you can see the
89:15 - image has been aligned to the center
89:18 - so let me check okay there might be some
89:20 - uh
89:21 - not exactly but might be some issue but
89:24 - we'll
89:25 - rectify this in the upcoming lecture how
89:27 - we can resolve this
89:28 - so now the point is
89:31 - when i move to a different devices since
89:33 - i had used image fluid as a class i
89:35 - moved to galaxy s5 you can see the
89:38 - navbar collapses itself and the image is
89:40 - being responsive i can move to iphone x
89:43 - image being responsive so this this is
89:45 - going to be very helpful in the
89:47 - responsive device design then iphone 5
89:50 - and i close this
89:52 - and the best part is when i refresh this
89:54 - page
89:55 - it's all gone so because that was
89:57 - temporary to make this permanent you
90:00 - need to define the css in your html page
90:03 - and i'll define as margin 0
90:07 - auto
90:08 - okay so when i go to space refresh now
90:12 - this is permanent so this this is pretty
90:14 - cool
90:15 - so
90:16 - so today we are going to work with
90:18 - images so in the previous tutorial i
90:20 - showed you uh how to show an image and i
90:23 - applied some bootstrap classes uh to
90:25 - show that image on the html page
90:28 - so today uh before we start we are going
90:30 - to basically have an overview of the
90:32 - bootstrap grid system so in this grid
90:35 - system
90:36 - i will show you that there are some
90:38 - predefined classes with extra small
90:41 - small medium large and extra large
90:44 - and this is the syntax for them called
90:47 - sm call md call lg and call excel for
90:50 - respective classes and for extra uh
90:53 - extra small we only need to we don't
90:55 - need to define anything uh with the
90:57 - practical implementation we'll get to
90:58 - know
90:59 - one thing you need to observe in this
91:02 - that the bootstrap container has a
91:05 - column width of total 12 columns so what
91:08 - you need to do you can define columns
91:10 - iron either in the multiple uh you need
91:12 - to define them in the multiple of 12
91:14 - like either you can define
91:17 - for an example a column of width 4 then
91:20 - again 4 then again 4 or then 6 and again
91:24 - 6 because 4 plus 4 plus 4 is equal to 12
91:27 - and again 6 plus 6 is equal to 12 also
91:30 - of you if you want to define any other
91:32 - ratio you can define a column of the
91:35 - width 10 and the next with the 2 because
91:37 - 10 plus 2 is equal to 12
91:40 - and this way you can define a column
91:42 - width of 12 columns by defining them and
91:45 - giving a proportion with your with your
91:48 - desire what you want to give
91:50 - to your front-end application so this is
91:52 - a syntax how you can have
91:55 - make columns plus rows so we will have
91:58 - some idea yeah this was what i was
92:00 - explaining that the total width of the
92:02 - column is 12 so what you can do do like
92:05 - here it has been mentioned the first is
92:07 - of column eight and another is of column
92:10 - four so this was total about 12 and this
92:13 - was a total bit of 12
92:15 - and this would help you and bootstrap
92:17 - manages you to help have responsive
92:19 - design of your application
92:21 - like in the previous tutorial i showed
92:23 - you how you can render an image using
92:25 - bootstrap
92:26 - and how sorry with how you can render an
92:28 - image with django then with the help of
92:30 - bootstrap classes how you can make it
92:32 - responsive
92:34 - so let's get started with this tutorial
92:36 - so i would tell you first i would go to
92:39 - my vs code editor then i would run my
92:42 - server with the command python
92:45 - manage
92:48 - dot py
92:50 - run
92:51 - server
92:53 - so this would start the server on my
92:55 - local machine
92:56 - and
92:57 - what we can do
92:59 - till the time so i can show you one
93:01 - thing so this is our template which we
93:04 - had made it yesterday so i would move to
93:07 - the localhost server
93:09 - so
93:10 - uh what you can do
93:13 - so this is my local server so uh i would
93:17 - move to a route with the name
93:20 - i had defined in the previous two tools
93:22 - so i would go to move to my user.py file
93:25 - and my image page i had defined
93:28 - so i would move to that route
93:30 - my
93:31 - image
93:33 - page
93:34 - okay you can see an image had been
93:37 - already uh uploaded on this route and
93:40 - on this page so basically i showed you
93:43 - how you can see the responsive design
93:45 - you can uh
93:46 - press ctrl shift i
93:48 - or you can right click
93:50 - and go to inspect so this will lead you
93:53 - to chrome developer tools and from here
93:55 - you can see the responsive device design
93:57 - of your application like iphone x shows
93:59 - this way
94:00 - and iphone 6
94:02 - then pixel 2
94:04 - xl then galaxy s5 so this shows the
94:07 - responsive design so one thing you
94:09 - notice as soon as i was on on a big
94:12 - screen the nav bar used to had expanded
94:15 - view but as soon as i moved to a small
94:17 - screen so
94:19 - you can see that a navbar had been
94:21 - collapsed so this is the beautiful
94:22 - nature of bootstrap so this would help
94:24 - you in designing your front-end
94:26 - application so
94:28 - uh today what i'm going to do
94:31 - i'm going to define a path
94:34 - my
94:35 - image
94:36 - page
94:37 - 2
94:38 - and in views dot py file i also define
94:41 - views dot my image
94:44 - page 2 with the name
94:47 - is equal to
94:48 - my
94:50 - image
94:51 - page
94:52 - 2
94:52 - okay so this looks pretty fine
94:54 - so inside my blue dot py file
94:58 - i'll define
94:59 - i'll quickly copy this
95:05 - and i'll paste it here and one changes i
95:07 - need to make my image page to
95:10 - and
95:11 - it will have
95:12 - imagepage2.html as well so inside my
95:15 - templates i need to define
95:17 - imagepage2.html
95:19 - okay i will move to my templates folder
95:22 - okay so this is
95:23 - so this is my image.html i'll
95:26 - quickly copy this
95:29 - ctrl i'll paste it here
95:31 - and image page two
95:34 - okay this looks pretty fine
95:36 - okay
95:37 - so uh till the time what i'll do i'll
95:40 - remove this code
95:45 - and i'll save it as
95:48 - my
95:49 - image
95:53 - page
95:54 - to dot html
95:57 - so this looks pretty fine and i will
96:00 - move to my image page too
96:05 - okay so it says my
96:08 - imagepage2.html does not exist oh i made
96:11 - a mistake here so i'll rename it as
96:14 - image page
96:16 - to
96:18 - sorry for the error
96:20 - now i'll quickly refresh this page okay
96:22 - here it is so this is image page two so
96:25 - what i'm going to show you the beautiful
96:27 - nature of bootstrap here
96:28 - so this is a container fluid which
96:31 - you'll always mention then inside this
96:33 - container fluid i have a row
96:35 - then now i'm telling my bootstrap to
96:37 - divide this row into two columns
96:41 - diff class
96:43 - okay
96:44 - and
96:45 - if class is equal to call
96:49 - md
96:50 - six
96:52 - and i'm also defining another column of
96:56 - width six because i told you that
96:58 - bootstrap will have six plus six is
97:01 - equal to twelve as a column width so
97:03 - i'll also define another column diff
97:05 - class
97:07 - this is going to call
97:10 - md
97:11 - six
97:13 - and this would now this you can see now
97:16 - i have a column of two six six six with
97:19 - each and this would sum up to 12
97:22 - now uh
97:23 - uh i told you yesterday that this is the
97:25 - syntax you are going to use because i
97:27 - told you that i have a static folder
97:29 - inside there there are two images so in
97:31 - order to
97:32 - load load images from the static folder
97:35 - first you will define person load static
97:37 - and then you need to define the syntax
97:39 - with the person static side this per
97:41 - person static with the image name and
97:43 - person again with the curly brace so
97:46 - i'll quickly copy this and this image
97:48 - fluid is in bootstrap class which helps
97:50 - you to make a responsive page okay in
97:52 - this first line i would
97:54 - i would uh
97:56 - put this image
97:58 - okay
97:59 - so this is the
98:01 - image i'm going to put and one shortcut
98:04 - you can see i can right click here and
98:08 - click format document
98:10 - with
98:11 - html language feature so what will it do
98:13 - it will format my source code and it
98:15 - will help you to better maintain the
98:17 - indentation of the code and in the next
98:20 - i'll copy this
98:22 - so since i'm showing you a demo uh we
98:25 - had done this in the previous tutorial
98:26 - how to load and starting image
98:28 - so let me given another image that was
98:32 - python.png so i'll give this a name as a
98:35 - python
98:38 - dot png
98:39 - and
98:40 - i will move to my page and and refresh
98:43 - this page so you can see
98:46 - now i'll quickly uh i'll click inspect
98:49 - and i'll show you
98:52 - uh let me do this
98:54 - okay
98:55 - so you can see here i'll
98:58 - have expansion view
99:00 - this is my row or okay this is not you
99:02 - this would pretty help you to have a
99:05 - clear understanding understanding how
99:07 - bootstrap works this is my container and
99:10 - this is my navbar okay this is the nav
99:12 - bar
99:13 - this is the container
99:15 - i go inside a row so this was my row
99:17 - then a column of width six you can
99:20 - the left portion is my column of six
99:23 - then this is the image okay okay this is
99:27 - the column of width six okay then i move
99:29 - to the second column of bit six here it
99:32 - is this was the second column on this
99:34 - six and this is the first column of
99:36 - width six first second
99:39 - and that was the image but now as soon
99:42 - as i change my display i move to a
99:44 - galaxy s5
99:45 - see the magic yeah it automatically
99:48 - collapses the image and it helps you to
99:50 - make much design much responsive so you
99:53 - need to inspect element in order to
99:56 - learn about this so this is again called
99:58 - md6
100:00 - six width and this is the six of call
100:03 - md6 in the another so we are going to
100:05 - continue with this
100:08 - so i will tell you that in this tutorial
100:11 - i've already defined a path with my
100:13 - image page three and already defined a
100:16 - function in which dot py file and
100:18 - already define an html page so i would
100:21 - die directly operate on this so you can
100:23 - check out the code on the github
100:25 - repository as well so what we are going
100:27 - to do yeah you can see here you can see
100:29 - my uh this is my views dot py file and
100:32 - i've already defined my image page to
100:34 - page three page four so what we are
100:37 - going to do we are going to start our
100:39 - local server which is already started
100:41 - and inside my
100:43 - local server i would move to this route
100:45 - my image page three
100:47 - so i show you some interesting fact
100:49 - about this
100:50 - so this is our image page and here you
100:52 - can see that i have defined a row
100:56 - okay i have defined a row
100:58 - and above that i have defined a
101:00 - container fluid with the heading image
101:02 - page 3
101:03 - and inside the row there are four
101:06 - columns of width medium 3 each
101:10 - so here you can see 3
101:13 - plus 3
101:14 - plus 3
101:15 - plus 3 is equal to 12 and this satisfies
101:19 - our basic requirement of the bootstrap
101:21 - column query so here it shows 12 columns
101:25 - so here you can see 3
101:29 - 3
101:29 - 3 3 is equal to 12 and as soon as i
101:33 - press ctrl shift i
101:34 - you can see
101:38 - you can see okay
101:40 - and here you can see that this is the
101:42 - source code
101:43 - okay and let me click right click and
101:45 - click inspect yeah here it is
101:48 - row
101:49 - column width of three
101:50 - three
101:52 - three three and this one medium device
101:54 - as soon as i click on galaxy s5 it will
101:57 - all collapse and
101:59 - will move up to a scroll view and this
102:01 - would bring the response in nature okay
102:04 - let me move to the
102:07 - image page four dot html this is very
102:09 - going to be very interesting here you
102:10 - can see the key difference
102:13 - you need to observe a key difference
102:14 - here that here i had defined medium
102:17 - three md i defined a class inside the
102:20 - bootstrap which was defined in the grid
102:23 - system as well i'll show you in the grid
102:25 - system yeah here it is this was small
102:28 - sm md lg excel
102:31 - when i have not defined any class
102:34 - whether it is medium md sm small xl
102:38 - extra large i have all uh i'll i'll move
102:41 - to this here you can see i've defined
102:43 - medium in this my image page three dot
102:45 - html but now when i move to my image
102:48 - page four dot html i have not defined
102:50 - any class so here you can see the gap
102:53 - so they there i have not defined any
102:55 - class here so you can have a
102:58 - review for it so this is called md3
103:02 - and this is only called four you can
103:06 - make it as three as well this is called
103:08 - four
103:08 - or okay so
103:10 - when
103:11 - here 4 plus 4 plus 4 is equal to 12 and
103:15 - now
103:16 - when i move to my image page 4
103:19 - okay
103:20 - this is my image page 4.
103:26 - here you can see this is 4 i'll click on
103:29 - inspect
103:31 - okay uh
103:32 - okay i'll show you one thing this is row
103:34 - 4
103:36 - 4
103:37 - four
103:38 - okay
103:38 - but
103:39 - i told you that i have not defined any
103:41 - class here whether it is a medium small
103:44 - extra large
103:45 - now when i move to galaxy s5 here you
103:48 - can see the magic
103:50 - now you here it also stays as four
103:54 - four
103:55 - and four so this wizard up to 12
103:58 - and this was the uh
104:00 - difference i wanted to show you in the
104:02 - my image page four dot html that here i
104:06 - have not defined like this is page three
104:09 - i have not defined any class here oh
104:11 - sorry in this
104:12 - i have defined a class in my image page
104:14 - three dot html i've defined a class but
104:17 - image page four dot html i have not
104:19 - defined any class and when i move to my
104:23 - uh
104:24 - image page four dot html this is four
104:26 - plus four plus four but as soon as i
104:28 - move to a smaller device it still
104:31 - remains
104:32 - it still remains four four four it does
104:35 - not collapse so this says that if for
104:37 - every device you want this structure
104:40 - then you don't define a class then
104:42 - bootstrap will automatically maintain
104:44 - this structure okay now we are going to
104:48 - do one thing one small exercise uh
104:51 - this is going to be a quick okay
104:54 - i'll define my image page
104:56 - five
104:59 - okay i'll be quick with this
105:01 - image page five
105:06 - okay now i'll move to my templates
105:10 - okay i'll move to my templates this is
105:12 - my template i'll quickly copy this
105:17 - paste it here
105:21 - image page
105:24 - five dot html
105:27 - this is image page five dot html i'll
105:30 - quickly wrap up this content
105:34 - inside the row
105:35 - i'm only okay and
105:38 - i'm only left with the row
105:40 - and inside my views.py file
105:46 - okay now inside my views.pi file i'll
105:49 - define my
105:51 - image page five i'll copy this
105:59 - and
106:00 - here you can see and this is going to be
106:02 - five
106:06 - and this is four
106:08 - okay
106:10 - and this is going to be five and i'll
106:12 - change the heading here
106:14 - so this here you can see this is the
106:15 - benefit of using blade template engine
106:18 - you can quickly define your templates
106:20 - okay now i'll move to five
106:23 - okay now this looks prime this is this
106:25 - is an empty page okay but now inside my
106:28 - urge.py file
106:30 - i will be taking
106:33 - a string parameter
106:36 - with the image name
106:39 - okay
106:40 - i will be taking a string parameter with
106:42 - the image name
106:44 - image
106:45 - name
106:45 - and inside my views.py file
106:50 - you know if you have any doubt regarding
106:52 - how you take parameter inside the url
106:54 - you can refer to my previous tutorial so
106:56 - image name
106:59 - is going to be in my new parameter
107:01 - okay
107:03 - and
107:04 - what i'm going to do i'll define a
107:06 - variable image name will take this
107:08 - parameter image name
107:09 - okay let me define this as my image
107:13 - my image name okay
107:16 - and
107:19 - if
107:20 - okay
107:21 - and i'll
107:22 - perform another operation my image
107:26 - name this is a simple pythons
107:30 - python function i'm using my image name
107:34 - dot uh first what i'll do
107:37 - is it is going i'm going to type cast
107:39 - this as a string parameter
107:43 - and i'll use my image state name dot
107:45 - lower
107:48 - and i'll first print this my image name
107:52 - okay this is pretty fine
107:54 - okay this looks pretty fine okay now
107:57 - i'll move to my image page five and i'll
107:59 - type
108:00 - django
108:04 - okay
108:05 - so here you can see i have print printed
108:08 - django on my local machine
108:10 - and what i'm going to do i'm going to
108:12 - define a dictionary
108:15 - okay before this or maybe what we can do
108:18 - okay
108:21 - i'll take a variable
108:24 - var
108:26 - and i'll give it a default value or we
108:29 - can do one thing
108:31 - if my image name
108:34 - is equal to django
108:38 - then where
108:39 - is equal to
108:41 - true
108:45 - lf
108:47 - my image
108:49 - name is equal to
108:51 - python
108:55 - where
108:58 - is equal to
109:00 - false
109:01 - okay or you can do
109:04 - or maybe
109:05 - uh
109:06 - or let me you can do one thing
109:09 - where is equal to false
109:11 - and now
109:13 - what i'm going to do i'm going to create
109:16 - my dictionary my dictionary
109:20 - and i'll pass where
109:22 - as where
109:24 - okay
109:26 - now
109:27 - context
109:29 - is equal to my dictionary
109:31 - okay this looks pretty fine till here
109:33 - and i'll save this
109:35 - so my server is running
109:37 - okay
109:38 - now
109:40 - when i'll move to my image page5.html
109:45 - so what i'm going to do is
109:48 - i'll quickly copy
109:50 - the image syntax here what i'm going to
109:52 - try to do i'll show you
109:54 - that this is uh uh you can copy this
110:04 - okay
110:05 - okay here this file this is fine
110:08 - and i'll define as 12
110:12 - okay for your convenience you can use it
110:14 - as fall md12
110:17 - and in another one
110:21 - but before this i'll type
110:26 - percent if rar
110:30 - i'll use this block
110:32 - else
110:36 - else
110:40 - i'll use this block
110:43 - and
110:43 - i'll
110:44 - end this with nf
110:48 - person and
110:50 - if
110:52 - okay this looks pretty fine
110:55 - and i'll copy this
110:59 - and quickly paste it here okay uh first
111:02 - i need to check my back end part what
111:04 - was it uh
111:07 - i'll move to my user by vpy file if var
111:10 - is equal to true
111:11 - then
111:12 - i need to be true then i need to get the
111:15 - django image if that is a good false i
111:17 - need to get a python image okay so this
111:20 - is fine and this would be python.em
111:22 - python.png
111:25 - okay so this looks pretty fine and looks
111:28 - interesting as well
111:30 - okay now i would type django
111:34 - so here you can see i got the django
111:35 - image
111:38 - and
111:41 - python yeah i got a python image so this
111:44 - looks pretty fine
111:45 - and i here what i'm going to show you
111:48 - that this is the magic i want to tell
111:51 - you
111:51 - that
111:52 - i can render two images on a single
111:55 - route maybe i'll type django with the
111:57 - capital letters
112:00 - okay here it is come because i had used
112:02 - the functions lower i'll move to my fuse
112:05 - dot py file
112:06 - okay i
112:08 - i'll close other things and open my
112:11 - views.py file
112:13 - okay
112:14 - uh
112:15 - i had used the lower function
112:17 - okay if my image name is equal to django
112:19 - where is equal to true else it's false
112:21 - okay
112:22 - so maybe
112:24 - when i type python with capital letters
112:29 - i'll get this so this looks pretty
112:31 - awesome you can
112:33 - maybe i can do also type this as capital
112:36 - d small django
112:37 - and capital g and small o django this
112:40 - also works so this is great so here i
112:43 - told you that with simple back-end logic
112:45 - you can render multiple images on your
112:47 - front-end application
112:49 - today we are working we are going to
112:50 - work with the forms so this is a ten
112:52 - tutorial if you have any doubt regarding
112:55 - the architecture structure of django you
112:57 - can refer to our previous tutorials as
112:58 - well
112:59 - so
113:00 - first thing along let's get started with
113:02 - this so forms are made to for the user
113:07 - input so forms are usually made
113:08 - according to your demand and requirement
113:11 - today we'll create a form and then
113:15 - we'll use forms uh and then what we are
113:18 - going to do we are going to integrate
113:20 - the front-end part of our form we today
113:22 - will create a responsive form layout and
113:25 - then we'll integrate the back end part
113:27 - of of
113:28 - our logic with the front-end part so we
113:30 - are going to get a uh
113:32 - we'll see how we can integrate forms
113:34 - then we'll see how to we can
113:37 - submit forms using the one with the
113:38 - request method and one with the post
113:40 - method then we will figure out the
113:42 - difference what the difference between
113:44 - the two so let's get started with this
113:46 - so today so this is my project
113:49 - so first i will run my server so i'll
113:53 - type python manage.pui run server
113:56 - and
113:57 - you i will move to my local host so i'll
113:59 - refresh this page
114:01 - so the server will get started so yeah
114:04 - you can see the server has started so
114:07 - what we are going to do today so what we
114:10 - are going to do first i'll create a path
114:13 - the url path path
114:17 - i'll create my form
114:22 - okay
114:23 - and i'll create
114:26 - a view with the name views dot
114:29 - my form
114:31 - and i'll give this url a name
114:35 - is equal to my form
114:37 - as well okay that's looks pretty fine
114:40 - so
114:41 - first i will create a form
114:43 - and
114:44 - so i'll move to my views dot py file
114:49 - okay so here's my use dot py file
114:52 - so what i'm going to do
114:54 - so what i'm going to do i'm i'll define
114:56 - a view
114:58 - define
115:01 - my
115:02 - form it'll take a request as a parameter
115:08 - and i'll render an html page
115:11 - and what i'm going to do i'm going to
115:13 - type
115:15 - return
115:17 - okay
115:18 - return
115:21 - render
115:23 - request
115:26 - and i'll make an html page
115:29 - my
115:30 - form dot html
115:34 - so
115:35 - this looks pretty fine so what i need to
115:37 - do so i need to define
115:40 - uh
115:41 - my form dot html inside my template page
115:45 - okay i'll move to my templates
115:48 - so
115:49 - i'll create a new file
115:53 - my form
115:55 - dot html so this looks pretty fine
115:59 - so what we are going to do today
116:02 - what we are going to do so this is a
116:05 - form.myform.html page so i have defined
116:08 - a few links we can move to this link
116:12 - and uh what we can do
116:15 - we'll move to this claim and what we can
116:17 - do uh
116:18 - we look how we can create responsive
116:20 - forms using bootstrap so this is going
116:23 - to be very good so we can see how we can
116:25 - create responsive forms using bootstrap
116:27 - and what we are going to do
116:30 - so this is like a box container with an
116:33 - email address then a password then check
116:35 - me out submit
116:37 - we can't create a form like this only
116:39 - and this is another one email address
116:43 - example select so this is a select
116:45 - option
116:46 - with the drop down behavior so this is a
116:49 - text area
116:51 - and this is a
116:52 - form with an input type is equal to file
116:55 - so you here you can see this is input
116:57 - type is called file so why i'm telling
116:59 - you all this because this will make you
117:01 - habitual with how what kind of widgets
117:04 - we have to work with the form then this
117:07 - is all about sizing
117:09 - and this is
117:10 - what this uh this is select
117:12 - and this is read only you can read this
117:15 - only
117:16 - note edit aloud here then
117:19 - read only plain text so this is how we
117:21 - do so
117:23 - this is one of the range inputs
117:26 - this is a works and with the slider
117:28 - behavior then others are check box
117:32 - and this is disable check box then
117:34 - default radio second default radio
117:36 - disable radio
117:37 - and inline so we have
117:39 - very much decent type amount of
117:41 - parameters to work with and then
117:44 - this is a form group
117:46 - so oh this form grid this form row uh
117:50 - i'll just explain all this how you can
117:52 - make a form
117:54 - and we'll start this from scratch
117:56 - because this is what is going to be one
117:58 - of the important parts uh uh and let's
118:01 - get uh started with designing our
118:03 - front-end part so first i'll do what
118:05 - i'll do
118:06 - i'll
118:08 - just simply pick any template
118:11 - and i'll paste this because i have to
118:13 - extend my index.html to my form page so
118:16 - i'll change this
118:18 - name my form
118:21 - okay
118:22 - now
118:23 - okay i'll remove this line
118:25 - okay and
118:27 - i'll given heading h1 let me give an
118:29 - heading
118:31 - my
118:33 - form
118:35 - and
118:36 - what i'm going to do
118:38 - uh i'm going to go to my localhost and
118:41 - type
118:42 - slash
118:43 - my form
118:45 - okay so this looks the this is my form
118:48 - so i've defined the heading to make sure
118:50 - that the template is working
118:52 - so what i can do next is
118:56 - i'll move to this page and what you can
118:59 - do
119:01 - you can have a simple layout
119:04 - okay
119:07 - you can have any of the simplest layout
119:09 - let's get start with the simple one
119:12 - so
119:14 - we'll pick this
119:16 - okay or uh if you want me to i'll we'll
119:19 - make this from scratch okay first what
119:21 - you need to define you need to define a
119:23 - form group
119:25 - so we'll define a form group
119:27 - so for first we will define a div
119:30 - class is equal to container
119:33 - fluid
119:35 - okay this is a container then inside
119:37 - this we we need to define a row
119:42 - then i'll define a column
119:48 - called medium of size 6 or you can say
119:51 - with 6
119:53 - then i need to define a form
119:56 - okay so this will pretty fine now what
119:58 - do you need to define inside of you need
120:00 - to define a diff class as a form group
120:02 - so
120:03 - i'll use this
120:05 - div
120:06 - class is equal to form
120:09 - group
120:13 - okay so what do you need to do so uh
120:16 - i'll use an another
120:18 - okay uh i'll uh let's get uh proceed
120:20 - with this so you can see that for two
120:22 - inputs there are one
120:24 - div classes will form group and another
120:26 - is also diff classes with the form group
120:28 - so suppose you are having two inputs
120:32 - div
120:33 - class
120:34 - is equal to form group
120:38 - so here you can see i have a container
120:40 - then a row then a call
120:43 - column of uh uh of medium with six then
120:47 - a form then
120:49 - i have to form groups this means i'm
120:51 - going to define two inputs
120:53 - so one is input
120:55 - type
120:56 - is equal to text
120:58 - i'll give this id as my text
121:02 - and name is go to my text as well
121:06 - and i'll define
121:09 - what you can see
121:11 - uh they have defined input type is what
121:13 - image email class is equal to form
121:15 - control
121:16 - so i'll define this class to this
121:20 - because this class is necessary
121:24 - form
121:26 - control
121:29 - okay
121:30 - so
121:32 - this looks pretty fine
121:34 - and i'll define a label
121:38 - label for my form
121:41 - so here you can see there must define a
121:43 - label label for so i'll define a label
121:47 - my text
121:52 - my text
121:54 - okay this looks pretty fine
121:56 - and what we can do i'll go to this page
122:01 - okay so here it is a form so but the uh
122:03 - right now there is no such enlightenment
122:05 - so i'll go to inspect
122:07 - okay when i move to my inspect i'll go
122:09 - to diff class will call md6 and i'll try
122:13 - some css out here so i'll
122:16 - do
122:17 - margin
122:18 - 0 auto so this looks pretty fine my
122:21 - forms get to the center
122:23 - okay i'll do this
122:28 - style is equal to margin 0 auto and with
122:32 - the same i'll do
122:35 - with the heading as well so i'll try the
122:37 - css on this as well this is my heading
122:40 - so let's do something text align is
122:42 - equal to center okay this looks pretty
122:44 - fine and i'll give a little bit of a
122:47 - margin sorry
122:49 - i'll get margin
122:51 - top
122:54 - and i'll i'll use a relative unit and
122:56 - this is in terms of ram so you can
122:59 - simply either you can copy the css
123:04 - and this is a key shortcut you can work
123:06 - with this and i'll put a style tag here
123:09 - and i'll
123:10 - paste the css here so this looks pretty
123:13 - fine so
123:14 - and i'll i'll right click here and i'll
123:17 - say format document
123:19 - okay this uh
123:22 - format document or this is if this isn't
123:25 - working i'll check if something is
123:27 - okay
123:28 - and i have defined a heading
123:31 - and i'll do some changes okay i'm having
123:34 - some issue with this
123:36 - okay now another sign right
123:38 - yes so i have a heading
123:42 - okay now this looks pretty fine and you
123:45 - can see i have a form with my text
123:48 - and
123:49 - i'll do the same
123:51 - okay i'll copy this
123:53 - quickly
123:56 - okay well i will define some a text area
124:01 - so this is the text area so what we can
124:03 - do
124:04 - so this is a text area and
124:06 - we have defined rows for it for how much
124:08 - rows we want so we'll quickly do this
124:12 - okay let's do this text area
124:16 - class is equal to form control
124:20 - control
124:22 - okay
124:23 - rules is equal to three
124:26 - okay before this i'll give an id to it
124:29 - id
124:30 - sorry
124:33 - id
124:34 - my
124:36 - text area
124:38 - and as well as a name to it name is
124:40 - equal to
124:45 - i'll give this a name as well my
124:48 - text area
124:50 - okay this looks pretty fine and i'll
124:54 - close this text area so it automatically
124:57 - closes it
124:58 - and i'll define
125:00 - a label
125:02 - for
125:04 - my text area
125:08 - and this was going to be my
125:11 - text
125:15 - okay i'll use the capital m and capital
125:18 - t so this looks pretty fine
125:21 - and when i move to my page
125:25 - okay this looks pretty fine so this is
125:27 - the form we have made and we'll now test
125:29 - the responsiveness of this form so what
125:32 - we are going to do we are going to press
125:34 - ctrl shift i or you can simply
125:37 - press inspect
125:39 - right click inspect then we'll use a
125:41 - layout okay now you can see the beauty
125:43 - of bootstrap so you can see iphone 5 a
125:46 - responsive form is here iphone 6
125:49 - ipad
125:50 - okay this
125:52 - galaxy s5 so this is the responsive
125:54 - nature of a form so and this is you can
125:57 - see pixel 2 and here you can see this is
126:00 - our form being responsive so this is a
126:02 - beautiful nature of uh
126:04 - bootstrap so uh
126:06 - i'll move to my server here so i had
126:08 - defined a form using
126:10 - my form
126:11 - [Music]
126:13 - so this is the form we had made in the
126:14 - previous lecture so today what i'm going
126:17 - to do
126:18 - uh what i'm going to do so this is a
126:21 - i'll create a button in this form first
126:24 - so i'll type
126:26 - div
126:27 - class is equal to form group here you
126:29 - can see i have defined a form group for
126:31 - each input element
126:33 - so form
126:35 - group okay
126:36 - now uh
126:38 - i'll define a button so this button
126:41 - should be type is equal to submit
126:43 - because i'm going to submit this form
126:45 - and
126:47 - what i'll define a class is equal to
126:49 - button
126:50 - button primary
126:53 - and this would give me the default
126:55 - color of the button
126:57 - and i'll uh
126:59 - i'll
127:00 - type this submit
127:02 - as the button value
127:04 - to be shown on the frontend part so i'll
127:06 - go move to this page
127:08 - and so this is my button i'll right
127:10 - click here quickly to inspect what
127:13 - changes i can do to make this is more
127:15 - responsive and better so uh i'll do
127:18 - margin
127:19 - zero auto so this is the uh margin
127:22 - series auto use is done to center the
127:24 - element so this doesn't work i'll try to
127:26 - display
127:27 - block yeah this works so i'll copy this
127:29 - css quickly
127:31 - and
127:32 - i'll create a style element here
127:35 - style
127:37 - and i'll quickly copy this and paste it
127:39 - here and this looks pretty fine so i'll
127:42 - refresh this page
127:43 - uh yeah now the button
127:46 - okay now yeah now the button is in the
127:49 - center
127:50 - and now
127:51 - uh till now i've only defined the form
127:54 - and two things i'm missing in this form
127:56 - is one is the path method
127:59 - and another is the action
128:01 - so uh
128:02 - how you can work with these two things
128:05 - so we are going to cover in this
128:06 - tutorial first i'll go to my views dot
128:08 - py file and then your dot py so i'll
128:11 - define a path
128:13 - here
128:14 - path
128:16 - submit
128:18 - my
128:20 - form and i'll what i'm going to do
128:25 - uh submit my form is going to be url
128:27 - where i'm going to submit the form
128:29 - and views dot
128:32 - submit my form and name is equal to
128:35 - submit my form okay now this looks
128:37 - pretty fine
128:38 - so
128:39 - uh i have not defined a
128:41 - uh i'll define a
128:43 - uh submit my form
128:44 - uh in method in my view file so i'll go
128:47 - to click quickly go go here def
128:52 - submit
128:55 - request
128:57 - i'll take request as a parameter and
128:59 - first i'll do return
129:01 - http response
129:03 - or let me do one thing uh
129:06 - okay
129:08 - okay i'll define my dictionary here
129:13 - uh and
129:15 - where one i'll define a bad one
129:17 - vat2
129:19 - var3
129:23 - what i'll do request
129:27 - dot
129:29 - method
129:31 - uh this would be the value of my wire
129:32 - three okay
129:34 - uh and okay i'll do one thing i'll
129:38 - keep this as
129:40 - method
129:43 - and this would be request dot method
129:45 - okay so and i'll define a json response
129:48 - [Music]
129:51 - of my dictionary i quickly cover all
129:53 - this thing so what i'm going to do
129:56 - uh this was my form so i'll define first
129:59 - a action i'll define a method here and
130:03 - that method first we will work with the
130:05 - get method and then the post method okay
130:07 - guys so this is the get method here
130:10 - and get method and post method have a
130:13 - difference so we'll
130:15 - get this in our tutorial what's the
130:17 - difference between the two first is the
130:19 - get
130:20 - and i'll define an action
130:22 - so what i'm going to do
130:24 - i'm going to use the shorthand property
130:26 - to how to specify a url
130:29 - and define person you are a okay a
130:32 - person url
130:34 - and then a person sign
130:36 - so you can be a little bit familiar with
130:39 - this so i've defined a shorthand
130:40 - notation
130:41 - first curly braces person url then i'll
130:44 - define a name between this single quotes
130:47 - this is person sign then the curly
130:49 - braces okay i need to define the name
130:53 - where i have to
130:55 - submit and pass this form
130:57 - and the name should be
131:00 - this
131:01 - name is going to submit my form
131:03 - and i'll i need to submit my form to
131:06 - this route which has having the name
131:09 - submit my form okay
131:11 - so
131:12 - i'll go here
131:14 - so now i think this is pretty fine so i
131:17 - have defined a url to submit my form and
131:20 - this form will be submitted to that okay
131:22 - that route now
131:24 - i have method define the method as get
131:26 - an action is this okay
131:28 - now
131:29 - what i'm having uh uh i'm having a an
131:32 - error and that is i've not defined the
131:35 - value of my keys in my dictionary so
131:39 - what you can do
131:41 - okay
131:42 - first what i'll do
131:44 - i'll comment this out and comment this
131:45 - out okay
131:47 - so
131:47 - first i'll tell you show you one thing
131:50 - okay line
131:52 - i'm having an error
131:54 - viewers dot py line two
132:00 - [Music]
132:03 - okay i'm having some error let me check
132:10 - okay no no okay now it's pretty fine
132:11 - sorry sorry
132:13 - so okay
132:14 - now it's fine fine
132:15 - okay so my form is ready to be submitted
132:18 - so what i'm going to do first i've only
132:20 - made a request on method so what i'm
132:23 - going to do
132:25 - i'll make a
132:27 - test
132:30 - test
132:31 - okay i'll make a different value test
132:33 - debug
132:35 - now i'll submit my form
132:38 - now what you can see here okay uh uh let
132:42 - me
132:44 - uh i'm having some issue in my form okay
132:49 - that submit my url has been defined and
132:51 - method has been get
132:53 - okay
133:01 - okay
133:06 - i define a url
133:09 - okay
133:11 - submit my phone
133:15 - all right
133:17 - i'll refresh this page test
133:20 - debug
133:23 - yeah now this is free divine okay so now
133:26 - this is fine totally fine okay i i had
133:29 - some issues i restarted my server now
133:31 - it's pretty fine okay
133:32 - so what i'm going to tell you that i'll
133:34 - quickly cover up the things i define a
133:37 - url submit my form then uh this is my
133:40 - your url and now i have defined the
133:43 - action to this url so i'm referring here
133:46 - and method was get so uh as soon as i
133:49 - went to this url a views just submit my
133:52 - phone was called so when i went here
133:54 - what i saw i returned a dictionary a
133:57 - json response only mentioning the method
134:00 - so this method was
134:01 - uh basically get method so what i got
134:04 - here the method is get okay so how you
134:07 - can derive the values
134:09 - so this is the rare one
134:11 - and require two so
134:14 - whatever okay so the main important
134:16 - thing what i'm going to do so what you
134:18 - can see in the get method
134:20 - you can see the name of the response
134:23 - okay
134:24 - sorry the parameters parameters which
134:26 - are being passed here so i had my text
134:28 - which i had put the data as test and i
134:31 - had my text area which i put the
134:34 - data as debug okay
134:35 - so you here you can see the name of the
134:38 - variables so these variables are being
134:40 - separated by a question mark and the
134:42 - route is being submit my form okay
134:44 - so what i'm going to do
134:47 - how you can use these values request
134:51 - dot get
134:53 - and the first is my text
134:56 - okay
134:56 - and this is the
134:59 - variable i'm being referred
135:01 - and another is my text area
135:05 - okay
135:06 - now i'll do one thing
135:08 - uh so
135:10 - so uh i'm missing a comma sign so that's
135:12 - why it's showing me an error now this is
135:14 - pretty fine okay
135:16 - request
135:17 - dot okay i'm also missing a comma sign
135:19 - here okay now it's fine
135:21 - okay
135:22 - now
135:23 - i'll move to my form
135:24 - [Music]
135:28 - my
135:29 - home
135:29 - [Music]
135:31 - and i'll type new
135:33 - data
135:35 - new
135:36 - debuff
135:38 - now
135:40 - here you can see
135:41 - where one is not defined
135:45 - where one
135:47 - is not defined
135:50 - okay why is it throwing an error
135:52 - okay okay okay
135:53 - okay so i uh this this is
136:01 - okay
136:03 - uh okay i'll define new data and new
136:05 - debug and i'll submit this form yeah now
136:08 - this is pretty fine okay
136:10 - so
136:10 - uh
136:11 - i apologize for all the errors okay now
136:14 - this is pretty fine so here you can see
136:16 - i moved to this route submit my form and
136:19 - the parameters being my text which has
136:21 - this data new data you can
136:24 - see here
136:25 - okay this this now this is cool
136:28 - and then i had another parameter
136:30 - my text area here you can see with the
136:33 - values new debug now here you can see
136:35 - this is new debug okay and the method is
136:38 - get okay
136:40 - so so this is the difference here you
136:41 - can see the parameters on the upper hand
136:44 - so so here you can see on the route the
136:46 - parameters are being visible to you so
136:48 - this is the first property of the get
136:50 - method so now another thing we are going
136:52 - to do we are going to change this method
136:54 - to
136:55 - post
136:57 - okay so this is post okay now what i'm
137:00 - going to do request dot post
137:04 - so this would be post
137:08 - request
137:10 - dot
137:11 - post okay
137:13 - so this is the another change i am going
137:15 - to do now the difference between the two
137:17 - first the method gets changed and now
137:19 - the variables on this route won't be
137:22 - visible on the post method okay
137:24 - so i go
137:27 - my phone
137:30 - okay i'll tie some python here
137:35 - python
137:36 - django
137:38 - framework
137:41 - now i'll submit this form
137:45 - okay now it says crf verification failed
137:49 - because when you submit a
137:52 - form with the post method you need to
137:54 - define a crf token
137:56 - so i quickly type
137:59 - percent
138:00 - crf
138:03 - underscore token
138:09 - and this looks now this is fine
138:11 - okay
138:12 - so
138:13 - uh
138:14 - i'll make a submission here
138:17 - okay i'm in a using error okay a person
138:21 - crf token okay uh oh i i made a mistake
138:24 - sorry i made a mistake with the two
138:26 - curly braces sorry i'm really sorry for
138:28 - this so now this looks pretty fine
138:30 - so i'll go go back to my phone uh this
138:33 - is python python django framework
138:36 - okay now this is data stream and error
138:50 - okay i'll refresh this
138:54 - python
138:56 - python django
139:00 - and now i'll submit this
139:02 - okay now this is fine sorry
139:05 - so here you can see
139:07 - uh
139:08 - now the variables are being not there on
139:11 - the route
139:12 - so the variable parameters are not there
139:14 - so that's being hidden in the post
139:16 - method plus you have a crf token here
139:19 - here okay
139:21 - uh so i had some issues i restarted my
139:23 - server this is where one with the python
139:25 - rat ii with the python django so these
139:28 - are some uh
139:29 - uh
139:30 - what we call them as hidden characters
139:33 - so we i'll tell you how you can clean
139:35 - this data and this method is post so
139:37 - basically we work with the get method
139:40 - and the post method in this tutorial so
139:42 - guys in this tutorial we are going to
139:44 - work with the form but and we are going
139:47 - to work with the backend part only but
139:50 - today we are going to create a different
139:52 - instance of form how we can create a
139:54 - separate file uh forms dot py file and
139:57 - we can store all the forms in that file
140:00 - and we can render the form whenever
140:02 - required
140:04 - whenever required without writing the
140:06 - repetition of the html code so that
140:09 - brings some kind of an
140:11 - alternative solution how we can create a
140:13 - form and how we can submit them so let's
140:16 - get started with this so uh
140:19 - i have few links so you can have a look
140:22 - at these links so i've opened this links
140:25 - on my browser as well so first one is
140:27 - this
140:28 - so today the
140:30 - we are basically going to work in
140:32 - something this kind we are going to
140:34 - create a form in this such way and i've
140:37 - defined below how we can
140:38 - fetch the clean data from the form uh
140:41 - this will remove the special characters
140:43 - any uh special characters
140:45 - and this is the wicked wickets in the
140:47 - form so
140:48 - basically there are different types of
140:50 - widgets one is a text input number input
140:52 - email url password hidden input date
140:56 - input date time time input text area
140:58 - then some other also check box uh radio
141:01 - select so there are file input so these
141:04 - are some
141:05 - like many options in the form
141:08 - and
141:08 - how you can render
141:10 - the form on your front end part using
141:13 - today you are going to work with a
141:14 - different alternative solution
141:17 - so let's get started with this so what
141:19 - we'll do
141:20 - first uh i'll have a quick recap of the
141:23 - last lecture
141:25 - like we uh first i'll open my file
141:27 - urls.pv file so like in the previous
141:30 - tutorial i showed you that we created
141:32 - two urls one to render the form that was
141:36 - my form and another was the url to
141:38 - submit the form so
141:40 - uh i used to render a form using my form
141:43 - then i used to submit that form
141:46 - and we used to move to this url then we
141:49 - are used uh then we had a backend logic
141:52 - then we
141:53 - we can process the form data at this url
141:56 - okay
141:58 - so today what we are going to do
142:00 - uh we are only going to create only one
142:02 - url and we will only create one url and
142:05 - work with in such a way that it will uh
142:09 - help us out to do both the things so
142:12 - first what i'll do
142:14 - okay
142:14 - okay i'll create a url
142:17 - path
142:19 - i'll define
142:20 - my form
142:22 - to
142:23 - and i'll call a view function views dot
142:26 - my form
142:28 - to
142:30 - and i'll define the name to it
142:32 - name
142:33 - is equal to
142:35 - my form
142:36 - two okay so i've defined this so in such
142:40 - a way that you don't get confused with
142:41 - the previous one so today we are going
142:43 - to work with my phone too okay
142:46 - now what are we going to do
142:48 - okay this is my
142:49 - app file
142:51 - and inside my app i'll create a new file
142:55 - with the name forms
142:58 - dot
142:59 - py okay
143:01 - so this looks pretty fine
143:03 - and what we are going to do so i'm
143:05 - inside my forms.p by file
143:07 - and
143:08 - uh i'll move to this link okay so today
143:12 - the very first line you need to type
143:14 - uh is
143:16 - from django import forms okay
143:19 - so what you need to do
143:22 - from django
143:25 - import
143:27 - forms
143:30 - okay so why i'm doing this uh i will uh
143:34 - this will help and first i would run my
143:36 - server
143:37 - python manage
143:39 - dot py
143:41 - run
143:41 - server
143:42 - so this would help me to get know if
143:45 - there's any such error okay the server
143:47 - will tell me
143:48 - okay so from django import forms and now
143:51 - you'll create a class for your form
143:54 - which will define okay
143:56 - i'll create a class
143:58 - class is equal to
144:00 - feedback
144:04 - uh with feedback form okay i'll have a
144:06 - small b
144:08 - sorry feedback form
144:11 - and what i'm going to do i'm going to do
144:13 - forms
144:14 - dot
144:16 - form
144:17 - okay so this is the syntax you need to
144:19 - follow okay now you're we are done with
144:21 - this okay now i'll define two fields
144:23 - here
144:26 - one is the title
144:30 - okay and another one is subject
144:34 - okay so i'm going to define and what i'm
144:37 - going to do
144:39 - i'll create a cad field since
144:42 - forms
144:43 - dot
144:44 - car
144:46 - field
144:47 - okay
144:48 - and forms
144:50 - dot
144:51 - cat field
144:52 - this looks pretty fine
144:54 - okay i've defined two cad fields here so
144:56 - i'll give a name
144:58 - sorry i'll give a label with the max
145:00 - length i define
145:03 - label
145:04 - is equal to
145:06 - title
145:07 - okay
145:10 - now this is fine label
145:13 - is equal to
145:15 - or we can call it as subject
145:21 - description
145:26 - description
145:27 - [Music]
145:29 - subject description and i'll define a
145:31 - max
145:33 - underscore length
145:34 - is equal to 50 for this
145:36 - and in the same way
145:38 - i'll define
145:42 - max on the underscore length is equal to
145:43 - 200 for this okay
145:46 - now
145:48 - what i'm going to do i'm also going to
145:50 - add a different attribute here here you
145:52 - can see
145:54 - that
145:55 - uh i can also define wicket is equal to
145:57 - forms dot text input okay
146:00 - so
146:01 - uh i'll copy this
146:04 - and in this way you are going to text
146:06 - input here for this
146:10 - and for this one what i'll do i'll
146:12 - change this to as text
146:14 - area
146:16 - okay so if i'm not wrong i'm correct
146:19 - with the spelling okay this is text area
146:21 - right so here you can see this is text
146:23 - area this is text input okay
146:25 - so i have created the form successfully
146:28 - so this is the
146:30 - uh
146:31 - form
146:32 - uh what you need to do from django
146:33 - import forms class feedback form forms
146:35 - or form then title with the both of them
146:37 - having a label of title subject
146:39 - description max lenses and the widget
146:41 - being the text input and the text area
146:42 - respectively
146:44 - now i moved to my views.py file
146:48 - and i'll define define
146:51 - my
146:52 - form
146:55 - to
146:56 - will take a request as a parameter
146:59 - and
147:00 - before uh using this what i'll do i type
147:04 - from
147:05 - dot forms
147:08 - so basically i'm referring to this file
147:10 - from uh
147:11 - forms.py
147:13 - import star so you can import every form
147:16 - you want okay
147:18 - now
147:19 - what i am going to do
147:21 - i'll put it if condition if request
147:24 - dot method
147:28 - is equal to post
147:32 - okay
147:34 - lf
147:35 - uh just for the basic understanding i'm
147:37 - doing this request dot method is equal
147:40 - to get
147:41 - so for the same route we are going to
147:43 - check if the uh if the request method
147:45 - was get or post
147:47 - okay
147:48 - so
147:49 - uh if it was a get method
147:52 - so what i'll do
147:54 - i'll create form i create a form and
147:57 - that form was
147:59 - this was the name of my form feedback
148:01 - form okay
148:02 - so i have a feedback form
148:06 - and okay so basically this is equivalent
148:10 - to
148:12 - this okay
148:14 - so this is just for uh
148:16 - having just for and having a this is
148:18 - equal into this
148:20 - and what i'm going to do now
148:23 - i'll
148:25 - execute a pass statement here uh just uh
148:27 - i'm keeping a pass statement till then
148:29 - that it doesn't throw me an error
148:31 - and i have a form
148:33 - and what i'll do i'll return
148:38 - render request
148:43 - and
148:44 - i'll first define my dictionary
148:48 - is equal to form
148:50 - okay and i'll pass this form
148:54 - and i'll do a request and i'll make up
148:57 - my form
148:58 - 2 dot html
149:01 - okay
149:02 - and
149:03 - context
149:04 - is equal to my
149:06 - dictionary
149:08 - okay uh sorry i'm wrong with the same
149:10 - text
149:12 - now this is fine
149:13 - but right now i have not defined my
149:15 - form2.html
149:17 - okay
149:18 - so i'll go to my templates folder
149:21 - and i'll create a new file
149:23 - my form to dot html
149:27 - okay
149:28 - now what i'll do uh i'll extend my
149:31 - template so i'll have any page
149:36 - suppose uh i'll have this is a
149:38 - second.html okay i'll have this page
149:41 - so basically right now what i'm doing
149:48 - okay so i'll change the title
149:52 - my form
149:54 - to
149:55 - okay
149:57 - uh what i'll do i'll create a form
150:02 - now that's it i'll create a form
150:04 - and now what i'm going to do
150:08 - basically i had
150:09 - rendered the form
150:11 - so i'll just what i'm doing uh i'll
150:14 - define the logic when i get to the post
150:16 - method so define my form too so if the
150:19 - request or method is going to post till
150:21 - now i've defined a path statement we'll
150:22 - define the logic but if the method is
150:24 - get
150:25 - we'll create the form okay we will
150:28 - get the form from that class
150:30 - and then we will render that form to
150:32 - myform2.html using the dictionary
150:35 - and now tim
150:37 - simply
150:38 - will move to my form and simply type
150:41 - form dot as underscope p
150:45 - okay
150:46 - so
150:47 - i'll restart my server
150:50 - okay now this looks pretty fine so this
150:52 - should work now
150:54 - now i'll go to my local host
150:57 - so the server has started and i'll go to
150:59 - my form
151:00 - too
151:03 - oh now you can see like
151:05 - the form has been made so i didn't quite
151:09 - write the html code so what i did
151:12 - i'll move to my forms dot p by file
151:16 - uh i had defined the title and subject
151:18 - i've already defined the text input
151:21 - as well as the text
151:22 - area
151:24 - then i went to my views dot pi views dot
151:26 - py file if the request method was get so
151:30 - i had initialized the form then i had
151:33 - rendered on the page okay
151:35 - and
151:36 - uh then when i went to my html page then
151:40 - i had uh without writing the html i was
151:42 - able to successfully add the form using
151:45 - the html oh sorry using this uh
151:48 - by rendering the form okay so what you
151:50 - can see
151:51 - so as underscore p means as paragraphs
151:55 - okay so when
151:57 - when i move to my page so i'll
152:00 - simply uh
152:01 - click on control plus u so this will
152:03 - give me a source code so what here you
152:05 - can see
152:07 - here the form has paragraph tags p
152:10 - p p okay so this means form was rendered
152:13 - using the paragraphs okay now what you
152:16 - can do
152:17 - i will type form
152:18 - as table
152:21 - form as table
152:22 - so
152:24 - when i move to my page
152:27 - now here you can see
152:30 - the form has been rendered using a table
152:33 - so table row table heading table data
152:35 - then table row respectively okay so this
152:38 - is fine right
152:40 - okay i'll zoom this
152:42 - okay this is here you can see this had
152:44 - been rendered using a table okay and
152:47 - when i did
152:48 - form underscore as p so this means it
152:51 - first paragraph
152:52 - so i'll also do this i'll refresh this
152:55 - page and then control u
152:57 - so here you can see this was paragraph
152:59 - okay here you can see p pivot paragraph
153:02 - and another now also one you can
153:05 - undo you can save form as ul so this
153:08 - would give unordered list
153:11 - so i'll refresh this page
153:13 - or say so you can here bullet marks this
153:16 - represents the unordered list so i
153:18 - simply control plus u
153:20 - now
153:21 - and you can see
153:23 - uh
153:24 - here you can see here's the form yes
153:26 - yeah here's the form you can see list
153:28 - has been declared list list item list
153:31 - item when the form has been
153:32 - rendered using list
153:34 - so in the next tutorial we are going to
153:36 - continue with this and
153:39 - then i will tell you the basic
153:42 - part where we if the request method had
153:44 - been the post so what i'm going to tell
153:47 - you if the form will be submitted on so
153:51 - what will happen so next we will add see
153:54 - uh try to style up this form as well as
153:56 - how we can render the errors and how we
153:58 - can fetch the clean data and how when we
154:00 - can check the validity of the form so so
154:03 - like in the previous tutorial we were
154:06 - working on forms so we had made a form
154:08 - using of uh using a form template engine
154:11 - and jang django so
154:13 - uh i had made a file name forms dot py
154:16 - and then i had made a form so this is
154:19 - the look of our form then in use dot py
154:22 - file i defined two method one was a
154:24 - request method is equal to post and one
154:27 - was the get
154:28 - so basically i'll give a quick overview
154:31 - of what we were going to do
154:33 - so like when i refresh this page so
154:36 - basically on this url i'm making a get
154:38 - request
154:40 - and on having the get request so
154:42 - basically this block of code gets
154:44 - executed
154:46 - and this block of code gets executed and
154:48 - this uh tells
154:49 - that uh i had imported the form on the
154:52 - top of the file from dot forms import
154:54 - star you can import any form
154:57 - so when you use star symbol so i uh used
155:01 - form is equal to feedback form so this
155:03 - was the feedback form which i was
155:05 - referring to
155:06 - and then i was able to render this form
155:08 - on my on the front end part of my
155:10 - application okay
155:12 - so basically what we are going to do
155:14 - first thing we are going to do is add
155:16 - bootstrap class to this form so what you
155:18 - are going to do
155:20 - wherever your input is defined inside
155:22 - forms dot py file so you need to define
155:25 - a dictionary which has key value pairs
155:28 - so basically this uh dictionary is
155:30 - defined by uh attributes so att rs is
155:34 - equal to this is a symbol for dictionary
155:37 - so it has a key pair okay basically
155:40 - at the left it will have a key key and
155:42 - then on the right it will have a value
155:44 - so basically these attributes could be
155:46 - anything which could be named id class
155:49 - which refers to the basic html syntax if
155:51 - you follow
155:52 - so what i'll do i'll define a attribute
155:54 - class
155:56 - and i'll uh give it a
155:58 - value
155:59 - of form control
156:02 - form control so uh most of us would be
156:05 - thinking why only form control as the
156:07 - class because this is the default class
156:09 - present in the bootstrap so this will
156:11 - make a form responsive and for the
156:14 - another text area i'll do the same
156:16 - okay i'll
156:17 - basically quickly copy this
156:20 - yes and yeah now this is fine so when i
156:25 - move to my page i'll
156:26 - i would see a bootstrap has been added
156:28 - to my form
156:30 - yeah here you can see the bootstrap has
156:31 - been added to a form but this is this
156:34 - isn't responsive so what we are going to
156:36 - do i'll go to my myform.html
156:40 - and i'll add a div
156:42 - class is going to call medium 6
156:48 - and i'll put this
156:50 - form inside a div
156:53 - okay
156:54 - and
156:55 - and what i'm going to do
156:57 - okay to get the form on the middle of
157:00 - the page i'll define a style
157:03 - side is equal to margin 0.2
157:06 - okay
157:07 - now this is fine
157:09 - [Music]
157:11 - yeah now this form is uh is in the
157:13 - center of the page now this is good uh
157:15 - to check this positiveness i press ctrl
157:17 - shift i
157:19 - and yeah now this looks good
157:21 - okay there is some issue okay yeah it's
157:24 - fine okay now this is formula responsive
157:26 - okay so this was uh to the front end
157:28 - part now for the backend part
157:31 - what if i want to submit this form to
157:33 - submit this form the method should be
157:36 - post method okay
157:38 - and uh i'll generate a token for this
157:42 - which says person c rf underscope token
157:47 - so a token is necessary when i uh when
157:50 - you submit the form via post method okay
157:53 - and uh this is the form which i i had
157:56 - rendered and additionally i need a
157:58 - button also button
158:01 - type is equal to submit
158:04 - class is equal to
158:05 - btn
158:07 - so this is the short form
158:09 - button primary
158:11 - this is the default bootstrap class
158:13 - and i'll give the
158:15 - submit
158:16 - okay
158:17 - okay now this is fine and i'll win uh
158:22 - okay so here comes the button so i'll
158:24 - give a little bit of style to this
158:26 - button
158:27 - style is equal to
158:29 - margin
158:31 - zero
158:32 - auto
158:33 - yes
158:34 - okay
158:36 - okay
158:38 - it is it is it is not in the center so i
158:40 - add display
158:44 - block okay
158:46 - and what i'm going to do
158:48 - okay margin 0 or 2
158:51 - and 0 for the bottom so
158:54 - what i'm going to do so this is the uh
158:58 - fold hand notation which says uh on the
159:01 - top i'll give one red
159:03 - and on the left
159:04 - and the right auto and on the bottom
159:06 - i'll get zero
159:08 - so this will give yeah so it gives a
159:10 - margin top of one rep and on the left
159:12 - and right which was auto at the bottom
159:14 - it was zero okay left and right auto top
159:17 - is one and the bottom is zero so this is
159:19 - pretty fine now
159:20 - so i'll make
159:22 - uh now i'll move to the backend part
159:25 - and
159:26 - what i told you
159:27 - uh when
159:29 - i refresh this page okay so i was making
159:32 - a get request on this route so when i
159:34 - made a get request on this router you
159:36 - can sit on get requests on this url
159:39 - so the form had rendered but what if i
159:41 - make a post request
159:43 - when i would be making the post request
159:44 - basically i would be submitting the form
159:47 - okay so when i'm going to submit the
159:49 - form so what i'm going to do i'll make
159:52 - form is equal to feedback form
159:55 - request
159:57 - dot post
159:59 - okay uh sorry request dot post so i'll
160:03 - get all the values when the form has
160:05 - been submitted using the post method
160:07 - okay
160:08 - okay but still i'll make an if condition
160:11 - to check form
160:13 - dot is underscore valid
160:19 - is underscore valid to make sure the
160:21 - form is valid and i'll make
160:24 - title
160:25 - is equal to request
160:27 - dot post
160:29 - and title
160:31 - type
160:32 - dot tell
160:34 - okay and subject
160:37 - so i'll make again a same request for
160:40 - the subject subject
160:42 - is equal to request
160:44 - dot post
160:46 - and subject
160:49 - okay now this is fine
160:51 - and i would print
160:56 - title
160:57 - here
160:59 - and print
161:01 - subject
161:02 - here okay and i'll return an http
161:04 - reports
161:07 - okay but still uh i'll make a var is
161:10 - equal to
161:12 - str
161:15 - form
161:16 - submitted
161:21 - and i'll give plus str
161:25 - request
161:27 - dot
161:28 - method okay
161:30 - so this is fine till here
161:33 - yeah now i'll return an http response so
161:36 - where
161:38 - okay
161:39 - if this form is not valid
161:43 - what i'm going to do
161:45 - so
161:47 - what i'm going to do i'm going to render
161:48 - the form again but
161:50 - okay
161:51 - and i'll define my dictionary
161:54 - is equal to
161:55 - this dictionary is going to be same as
161:57 - this one here you can see
162:02 - form
162:04 - and
162:05 - form okay
162:07 - and
162:08 - this is this
162:11 - quickly copy this
162:13 - okay else
162:18 - okay now this looks fine this code i'll
162:20 - quickly
162:22 - give a quick overview
162:26 - is the request or method was get this
162:29 - code of this block of code gets executed
162:32 - in which it says i'll
162:34 - render the form on the front end part
162:35 - okay
162:36 - when i submit this form so this block of
162:38 - code gets executed executed which says
162:41 - request
162:42 - dot method is equal is equal to post so
162:45 - form is order feedback form i'll get all
162:47 - the values using request.post if the
162:49 - form is valid then i'll get the two
162:51 - values that is subject and title then
162:54 - i'll print the title print the subject
162:56 - and i have given a name variable which
162:58 - says form submitted by request.method
163:01 - and i will return the http response of
163:03 - where else
163:05 - in the form was not valid so you need to
163:09 - check
163:11 - that if the form was not valid so i
163:13 - would render the form on the front-end
163:15 - part again okay if the form was not
163:18 - valid so
163:19 - what i'm going to do
163:22 - it says
163:24 - i'll
163:25 - test
163:28 - app
163:30 - debug
163:32 - okay
163:33 - but uh okay before this i'll restart my
163:35 - server
163:40 - okay
163:41 - yeah now it's fine
163:43 - okay i'll refresh this page
163:45 - okay i now when i refresh this page i
163:48 - made a get request
163:49 - so i rendered the form of the frontend
163:51 - part so test i will give a title and say
163:54 - app
163:55 - develop
163:57 - and i'll make now submit this form
164:02 - okay so i have submitted the form yeah
164:05 - now it says form submitted
164:07 - post so this was the method which i had
164:10 - defined
164:11 - so when i submitted the form so this
164:13 - block of code gets executed and here you
164:16 - can see
164:17 - that i had
164:18 - executed two print statement here one
164:20 - was a title and one was a subject so
164:22 - title corresponds to test
164:24 - and this here you can see test was title
164:27 - and add debug was there in my subject
164:30 - part
164:30 - so
164:31 - so thank you guys thank you so much i'll
164:33 - catch up in the next tutorial so uh you
164:36 - need to be very careful by the writing
164:38 - this code you need to be very careful
164:40 - about writing which if condition is
164:42 - coming inside which if then else then lf
164:44 - part so you need to have a quick uh you
164:47 - need to have a good uh
164:49 - overview on this
164:50 - so like in this tutorial we are going to
164:52 - work with the alerts in django form
164:55 - so basically alert handling in forms so
164:58 - in this tutorial we are going to handle
165:00 - alerts in django there are two types of
165:02 - alert
165:03 - one is for error and another is success
165:05 - so we will fill the form so we will fill
165:08 - the form
165:10 - we will fill form the validate and check
165:12 - form for both the cases use bootstrap on
165:14 - the front end to render and display
165:16 - messages so let's get started with this
165:19 - so till now we had a we had made a form
165:22 - so this for this was our form
165:24 - okay uh on the request method and the on
165:26 - the uh basically
165:29 - uh you here you can see
165:31 - on the
165:32 - get request we used to render the form
165:34 - and the post request we used to submit
165:36 - the form so we would apply the error
165:39 - handling on the post method part so
165:42 - basically before this i will show you
165:43 - some process uh
165:46 - the process here is about that we have
165:48 - alerts in bootstrap so
165:51 - uh
165:52 - what we can see alerts provide
165:54 - contextual feedback messages for
165:57 - typical user actions with the handful of
165:59 - available and flexible alert messages
166:02 - so there are basically many types of
166:04 - alert so this is a primary alert
166:06 - uh secondary success so be here so here
166:10 - you can see the primary alert is in blue
166:13 - color
166:14 - success is in green color
166:16 - danger is in red color and uh
166:19 - warning is in yellow color so
166:21 - another type of alert here you can see
166:23 - is
166:24 - like which are dismissible in nature
166:27 - so here you can see the alerts which are
166:30 - indismissible in nature
166:31 - uh have a cross button on the right hand
166:33 - side which can be clicked
166:35 - and on the
166:37 - uh
166:38 - on the refreshment or when when i
166:40 - refresh this page so here you can see
166:43 - this alert message comes it comes up
166:45 - again so basically you can cross the
166:47 - button and dismiss the message
166:49 - for that purpose only
166:51 - so let's get started with this
166:53 - so first you will keep try to keep it
166:55 - simple
166:56 - so if the form is valid title is equal
166:58 - to request.postwriter subject is real
167:00 - request.postsubject
167:04 - what i'll do
167:06 - i'll create
167:08 - my dictionary
167:11 - and
167:12 - irrespective of the result my dictionary
167:13 - is going to have the form
167:16 - feedback form okay irrespective of the
167:18 - result i'll make condition
167:21 - okay then
167:22 - my dictionary
167:24 - of success
167:31 - is equal to
167:32 - true and in the same way my dictionary
167:36 - of success
167:40 - message
167:41 - is equal to form
167:44 - submitted
167:47 - okay
167:48 - and then
167:49 - what i'm going to do i'm going to uh
167:52 - return this page
167:53 - so
167:54 - uh i'll take request as a parameter my
167:57 - form.html contextual my dictionary
168:02 - and here you can see now i have
168:04 - returned the
168:06 - myform.myform2.html and contextual to my
168:08 - dictionary so basically i would move to
168:11 - this part
168:12 - uh we we would use this
168:16 - and
168:17 - here you can see the it's alert warning
168:19 - sorry earlier just just like earlier you
168:21 - can
168:22 - have a quick remember that warning is
168:24 - for yellow uh dangerous for red and
168:27 - green is for success
168:29 - okay
168:30 - what you can do
168:32 - alert
168:34 - alert success
168:39 - and
168:40 - this
168:42 - would okay
168:49 - and i will display the success
168:52 - message here
168:54 - but only i would display the success
168:57 - message only on one condition that is
169:00 - percent if success
169:03 - is equal to is equal to
169:05 - true then only i will display this
169:08 - so i would uh this is the end of the div
169:10 - block and i would end the condition
169:12 - person
169:13 - and
169:14 - if
169:15 - okay there's a slight error here
169:21 - and
169:23 - i hope now it's right over
169:25 - so i would python manage.pyron server
169:28 - okay so i have moved to my form
169:31 - on the get request i
169:33 - i
169:34 - get requests i render the form
169:36 - and but on the post i will check the
169:38 - error handling so what we can do here i
169:40 - will type
169:42 - test
169:46 - title
169:48 - test
169:50 - subject
169:52 - and here you can see it says form
169:55 - submitted okay
169:57 - so
169:58 - uh
169:59 - okay okay uh there was a slight error
170:01 - because i missed the single s here alert
170:04 - alert success so it could not display
170:06 - the background color but i would refresh
170:08 - this page it says form resubmission okay
170:12 - okay now it's pretty fine it says form
170:14 - submitted so we can add a margin top to
170:17 - this
170:18 - so basically this would help us out side
170:21 - is equal to margin
170:22 - top is equal to 1 ram
170:30 - okay
170:31 - and now it's pretty fine we have a
170:33 - margin top and on the cross button it
170:35 - will dissipate so this is pretty cool
170:37 - uh with this for the same part we can do
170:39 - for the error also
170:41 - okay but for this but what we can do
170:44 - uh you would move our views dot py file
170:47 - this would be an else condition
170:49 - so first we will check the error
170:51 - well uh i did this
170:53 - first because i wanted to have a quick
170:56 - idea of how this works
170:58 - okay but if title
171:01 - is not okay what we can do
171:05 - this is our form
171:06 - okay
171:09 - and we can here add
171:15 - p class is equal to text text
171:19 - muted
171:21 - note
171:28 - title
171:30 - should be
171:33 - capital
171:35 - okay
171:36 - so this says note title should be
171:40 - capital okay
171:42 - okay uh so when we move to our form
171:45 - okay now uh
171:47 - okay
171:48 - i'll save it here then
171:51 - no no this time i would make a get
171:53 - request and render the form
171:56 - okay i think
171:58 - it is throwing an error okay
172:00 - okay okay okay
172:03 - let me for the time being if
172:05 - one pass
172:12 - okay now i would render the form on get
172:14 - request now this is fine okay so it says
172:17 - title should be capital okay this was
172:19 - just for the
172:20 - case i'm taking here okay now if
172:25 - title
172:27 - is not is equal to
172:30 - title dot
172:31 - upper
172:32 - so this is a string class in python
172:34 - which uh which can be checked if title
172:36 - is multiple right or upper
172:38 - then
172:40 - we can uh what we can do we would do the
172:43 - same thing my dictionary
172:46 - of error
172:48 - is equal to
172:49 - true
172:52 - my dictionary
172:54 - of
172:55 - error
172:56 - message
172:58 - is equal to
173:01 - title
173:04 - title should be
173:08 - in
173:10 - capital
173:13 - letters okay title should be in capital
173:15 - okay i hope this is fine
173:18 - we can have capital c here title should
173:20 - be in capital and then i would
173:23 - render the page
173:25 - on the same part okay my form.html okay
173:28 - but i would only show the error only on
173:31 - one condition
173:33 - that would be
173:34 - if
173:35 - error should be
173:37 - true
173:39 - and this then i would show a error
173:42 - message
173:45 - okay and this should be my
173:49 - danger class
173:50 - okay so i hope now you have a clear idea
173:53 - what's happening
173:54 - so i would make a
173:56 - get request
173:59 - test
174:00 - title
174:02 - test
174:03 - subject
174:07 - okay now it says title should be in
174:09 - capital okay and if i make a uh okay um
174:12 - i'll make a test title here like in
174:14 - capital
174:17 - test
174:18 - subject or we can have this in small
174:21 - letters no issue
174:22 - test subject
174:25 - okay so it says form submitted now i
174:27 - hope the guys this is very clear to you
174:30 - okay basically in this one what we are
174:32 - going to do
174:34 - we are going to that there can be
174:36 - multiple errors in the form so like
174:38 - suppose we i'll add a new entry to this
174:42 - and entry would be email
174:47 - okay
174:48 - so here i'll give it as a title as email
174:57 - yeah so email is the new title to my
174:59 - form uh sorry email is a new field added
175:02 - to my form okay now
175:05 - in use dot py file i'll also request
175:10 - email
175:13 - is equal to request
175:16 - dot
175:16 - post
175:20 - and i'll take email as a parameter
175:25 - so here you can see that in my forms dot
175:27 - py i added a new field email a forms dot
175:30 - carpet label to email
175:32 - and
175:33 - in in in the very same way it was a text
175:36 - input okay then i requested for email
175:40 - okay now
175:41 - what i'll do
175:44 - here we are trying to see that there can
175:45 - be multiple errors on the page so what
175:47 - we are going to do
175:49 - i will define an error flag
175:53 - error flag
175:54 - which should be false
175:56 - in the beginning
175:58 - so what we are going to do
176:00 - so first if title is not equal to title
176:04 - dot upper so i'll quickly remove all
176:06 - this
176:08 - uh
176:10 - so what we are i'm basically trying to
176:12 - convey the idea that there can be
176:13 - multiple errors so if title is not equal
176:15 - to title or upper then
176:17 - error flag is equal to true that error
176:20 - is there okay and errors
176:23 - error message
176:26 - is equal to
176:28 - title
176:32 - should be
176:34 - in
176:35 - capital
176:38 - but this time
176:39 - one thing i'm going to change that
176:41 - errors isn't is an array or what you say
176:43 - list
176:44 - dot append
176:47 - error
176:49 - message okay so this is fine
176:51 - uh in the same way what i'm going to try
176:54 - to do that uh
176:56 - so here you can see
176:57 - that this is an extension to the uh
177:00 - previous tutorial so what i'm trying to
177:02 - define it i'll define a regular
177:04 - expression
177:08 - regex okay
177:10 - and so basically this regex is used to
177:14 - define the
177:15 - email address so here you can see your
177:17 - dot symbol with the add direct symbols
177:19 - uh so what i'm going to do right x okay
177:22 - so basically i have my email
177:25 - if
177:27 - not
177:29 - so before this i need to define an
177:32 - import
177:35 - import re so this is a default library
177:37 - in python to use regular expression
177:42 - so what i'm going to do uh i have my
177:45 - i have imported the library recognize
177:47 - the email is there so
177:51 - if
177:52 - not
177:54 - drag x
177:55 - sorry re dot search
177:59 - so search is used to determine the match
178:01 - the regex pattern the regex
178:05 - comma email
178:07 - okay if this happens then what i'm going
178:10 - to do
178:11 - yes
178:12 - error flag will remain true error flag
178:15 - will remain too
178:16 - and
178:18 - errors dot append error message will
178:21 - come
178:22 - but this time the error message will
178:23 - change the error message would be error
178:26 - message is equal to
178:28 - not
178:28 - a
178:30 - valid email
178:34 - address
178:36 - okay
178:38 - so basically i'm trying to convey the
178:39 - idea that
178:43 - there's an error sorry
178:45 - so i'll remove this line if not i
178:48 - okay so basically i'm trying to convey
178:50 - that idea that if the
178:53 - if title is not ruled right or upward
178:55 - that error flag remains true error
178:57 - message would be this and this will be
178:58 - dependent uh this will be appended in
179:01 - the errors list okay yeah good then i
179:04 - made a
179:05 - logical uh
179:07 - i made uh if condition which state
179:10 - logically that uh if this is not a match
179:13 - or a search then error flag will remain
179:15 - true correct an error message will be
179:17 - not a valid email address and that would
179:19 - this would be appended in the errors
179:21 - list okay
179:22 - okay new condition would be next
179:24 - condition
179:27 - if
179:30 - if
179:31 - error
179:32 - error flag
179:36 - is not
179:38 - equal to true
179:41 - if error flag is not equal to true so
179:44 - this is the third if conditional but
179:46 - this all if if else condition depends on
179:48 - your logic part how you can make them uh
179:51 - to be on easy band making in such a way
179:53 - if error flag is not equal to true that
179:56 - there was no error means error fact uh
179:59 - is not equal to true
180:01 - then
180:02 - success is equal to true and success
180:04 - message is equal to form submitted
180:07 - okay
180:08 - so
180:09 - now
180:10 - what i'm going to do i would render this
180:13 - to myform2.html
180:16 - okay but i'll i'll give a quick overview
180:19 - if title is not equal to title.upper
180:22 - then then if not regress dot search
180:24 - if error flag is not equal to true
180:28 - then this
180:29 - return render request my form dot to dot
180:32 - html context is good to my dictionary
180:35 - so this would help me out in this so
180:39 - uh but before this i need to update my
180:41 - dictionary
180:42 - my dictionary
180:45 - is equal to i'll update my dictionary my
180:47 - dictionary
180:49 - of error
180:53 - is equal to error flag
180:55 - and my dictionary
180:59 - of
181:00 - errors
181:04 - is equal to errors
181:06 - okay so this is fine so
181:09 - uh
181:10 - uh
181:12 - so i would make a i would so now this
181:16 - would render
181:17 - my dictionary to myform2.htm
181:20 - okay
181:21 - okay
181:22 - before this what we can do
181:30 - now i will move to myform.tool.html
181:33 - so
181:34 - basically
181:35 - in advance i have done this if
181:38 - uh
181:40 - if error is equal to true yes for error
181:43 - in errors
181:44 - you need to print this
181:46 - error this for loop will end and this if
181:49 - condition would end okay
181:51 - so
181:52 - i would restart my server
182:00 - python manager.pyram server
182:03 - so
182:04 - when i make a get request to my form
182:07 - so here you can see an email has been
182:09 - added
182:10 - okay uh i'll make a title
182:14 - test okay i'll keep keep this in
182:17 - lowercase test title
182:20 - test
182:21 - subject
182:25 - test mail
182:27 - but this is not a valid email address so
182:30 - here you can see title should be in
182:32 - capital and not a valid email address
182:35 - okay
182:37 - i'll make this test title
182:40 - i'll make this in capital
182:43 - test
182:45 - title
182:48 - test
182:52 - subject
182:55 - and test me so this time the title is
182:57 - valid but the email is not valid so it
182:59 - should return me only
183:01 - this error
183:02 - let's submit this form yes it says not a
183:05 - valid email address only
183:08 - so test title
183:10 - test subject
183:15 - test the user
183:18 - at there is mail.com
183:23 - so it says form submitted so i i have
183:26 - gone uh through all the test cases my
183:28 - form has passed
183:29 - so with this you can see that how the
183:32 - logic works so basically uh in the
183:34 - template part what i am trying to do was
183:36 - if error is equal to true for
183:38 - for error it errors so basically i'll
183:41 - move to my views dot py file here you
183:44 - can see my errors was this error address
183:47 - which i had made and this was the error
183:49 - flag so basically even what you can do
183:51 - also print
183:54 - my
183:55 - dictionary
183:57 - so this would help you to get a better
183:59 - idea
184:00 - test title
184:02 - test
184:04 - and
184:05 - test mail
184:07 - so so it says not a valid email address
184:10 - okay and uh what it says yeah here you
184:12 - can see the dictionary is like this the
184:14 - errors has not a valid added email uh
184:17 - error not a validity middleware an error
184:19 - is true
184:20 - so they they hey this is how you can
184:23 - work with this in this tutorial we are
184:25 - going to learn about 404 error handling
184:27 - page
184:28 - so in this tutorial we are going to
184:30 - learn about 404 error page 404 error
184:33 - page would be created and it will be
184:35 - only rendered on an invalid route so
184:37 - basically what we mean by the term that
184:39 - invalid route or due to exception
184:41 - handling that if a user goes to an
184:44 - invalid route invalid url pattern
184:47 - invalid path
184:48 - invalid uh directory whatever we say
184:52 - like a 404 error page would be displayed
184:54 - either that access would not be dis
184:57 - allowed it would be an invalid url or an
184:59 - invalid operation operation as well okay
185:03 - so i'll give it uh i'll give a use case
185:05 - where we can see this so our server is
185:07 - running
185:08 - so i'll move to my server i'll make a
185:10 - request okay now we can see that on a
185:12 - request our server has started
185:15 - okay so i'll move to the urs.py file
185:19 - uh i'll go to this about page
185:23 - yes
185:24 - so it says about response absolutely
185:26 - working
185:27 - fine
185:28 - now in the same way i'll move to my form
185:34 - now i can see
185:36 - that on making a get request to this
185:38 - route a valid page should render so a
185:42 - valid page should render and it says
185:45 - yeah
185:46 - here you can see yeah my phone okay now
185:49 - i'll again make a request to an
185:52 - my form two
185:55 - okay i'll simply type two okay yeah now
185:58 - here we can see a page has come okay so
186:01 - uh until now i've been making a request
186:02 - one value route so there was no issue
186:05 - but as soon as as i make an
186:08 - invalid route uh let me type something
186:11 - my
186:12 - any page
186:14 - any page
186:16 - so it says page not found because this
186:19 - url never existed my any page
186:21 - uh my any page new page
186:24 - even this not existed
186:26 - okay let me type something like some
186:29 - random characters
186:32 - uh even this random character url does
186:34 - not existed so but we can uh simply see
186:37 - here you are seeing this error because
186:39 - you have debuggers will do true in your
186:41 - jack no settings file change that to
186:44 - that change that to false and django
186:46 - will display a standard four or four
186:48 - zero four zero four page so basically
186:50 - what i mentioned here so we will be
186:53 - seeing how we are able to integrate our
186:55 - own 404 page on debugging to false so
186:58 - basically
186:59 - uh again i'll give you a use case which
187:02 - will help us
187:04 - help us to have a better understanding
187:06 - so what we can do
187:08 - deeper go to force
187:10 - so here you can see don't run
187:13 - with debug turned on in production so
187:15 - like when if you're changing debug is
187:17 - due to false this means uh that we are
187:20 - going to be in deployment mode so our
187:22 - application isn't deployed the uh
187:25 - application is in deployment mode so
187:27 - like uh it clearly says don't run with
187:30 - debug turned on in production so debug
187:32 - is not turned on so debug is false so
187:36 - it says
187:37 - so we are
187:39 - actually trying to be in deployment mode
187:41 - so if you are in deployment mode you
187:43 - have to define the host so right now i'm
187:46 - defining star which works on all the
187:48 - host okay so i'll run my server
187:52 - now this is fine i'll make a
187:55 - request to my server yeah this is hello
187:57 - world absolutely working fine in the
187:59 - same way about
188:02 - absolutely working fine
188:03 - uh
188:05 - my my first page yeah or my form to any
188:09 - of the pages yeah absolutely working
188:10 - fine but now
188:13 - if i'm types of random characters and
188:15 - move to a url it says not found the
188:17 - request resource was not found in this
188:19 - server
188:20 - let me type something as my
188:22 - any page new page
188:25 - something like this even not found so
188:29 - now our application was in deployment
188:31 - mode but as soon uh
188:33 - so what we can do we can create our own
188:36 - 404 page so basically what we are going
188:38 - to do
188:40 - we are going to move
188:41 - to move this side bootstrap we are going
188:44 - to work with a jumbotron this time so
188:46 - like we are going to go to templates
188:48 - quickly create a 404 dot html
188:52 - okay
188:53 - absolutely fine
188:54 - uh and what i can do i'll copy this
188:58 - paste it here
189:01 - change the setting to 404
189:04 - error
189:06 - page
189:07 - okay
189:08 - absolutely fine
189:10 - i'll remove this heading word
189:13 - i'll copy this code word
189:16 - i'll paste it here good yes
189:18 - so
189:19 - as
189:20 - the page
189:22 - not
189:25 - found
189:26 - so i'll give a heading
189:28 - that the page is not found
189:30 - and uh
189:32 - i'll give a url which says okay so what
189:35 - i'll do
189:38 - this page something i'll give give a
189:41 - message
189:44 - page
189:47 - does not uh something we can give any
189:49 - message
189:50 - this page is missing
189:54 - or does
189:56 - not
189:57 - exist
190:00 - something like uh
190:01 - we can give it as
190:02 - uh sorry
190:05 - this page is missing or does not exist
190:08 - okay so this is absolutely fine
190:11 - uh
190:12 - exists
190:16 - okay this page is missing or does not
190:18 - exist and what we are going to do
190:21 - go
190:22 - to
190:24 - our
190:27 - home
190:28 - page
190:30 - yeah this is fine and i should define
190:35 - percent url single quotes
190:40 - percent sign so basically we have to
190:42 - define in this single course which route
190:44 - we want to move and we'll move to your
190:46 - short p wi-fi and the name would be
190:48 - index okay
190:52 - okay so this is fine okay
190:54 - and how we would render this page so
190:57 - basically your
190:59 - this is the url py file of your my first
191:02 - app now i'll move to your start pi file
191:04 - of first project okay so please don't
191:07 - confuse yourself with these two files
191:08 - this is my first project this is my
191:10 - first app
191:11 - and you need to define
191:13 - a four zero four handler
191:15 - so handler four zero four says
191:17 - okay i'll quickly copy this or even you
191:19 - can type
191:21 - handler
191:22 - 404
191:24 - which says
191:26 - uh you have to define
191:28 - my app name so basically our app name is
191:31 - here
191:33 - my
191:34 - first
191:35 - app
191:36 - dot views so basically i'm referring to
191:38 - the views dot py file
191:40 - and i've defined the function error
191:42 - underscore four zero underscore view
191:43 - okay
191:44 - error
191:45 - underscore four zero four underscore
191:48 - view so
191:51 - this is working fine
191:53 - uh so it says that
191:55 - myfirstapp.view.error underscore404
191:57 - underscore view does not exist because i
191:59 - have not defined it so i'll
192:01 - move to use dot py file and i define
192:05 - error
192:07 - under scope 404 underscore view
192:11 - which takes request as a parameter
192:15 - and even new parameter as exception here
192:17 - you can see
192:19 - okay
192:20 - exception
192:23 - and it will return
192:26 - render
192:29 - 404
192:30 - dot html okay
192:33 - so this is working fine okay now here
192:35 - you can see let me have a quick check
192:37 - handler 404
192:39 - this is mine
192:41 - and my first app dot views dot error
192:44 - underscores under view yeah this is fine
192:46 - yeah yeah
192:47 - yeah absolutely fine okay
192:49 - now
192:50 - what i'll do
192:53 - i'll move to my page
192:57 - yeah this is my server absolutely
192:58 - working fine i'll move to an about page
193:01 - absolutely working fine
193:03 - now let me move on random url
193:06 - okay it says error for 500.
193:12 - something is missing
193:21 - okay
193:24 - something is made
193:26 - fun
193:27 - okay okay i'm really sorry for this i
193:29 - had missed the request parameter here
193:32 - okay
193:34 - this is absolutely normal you return
193:36 - render request then html page so you
193:38 - return render request an html page okay
193:41 - i'll then uh
193:43 - restart my server
193:48 - this is working fine now i'll make a
193:51 - random url request
193:53 - so yeah now this is absolutely
193:55 - everything you have fine so it says uh
193:58 - page not found sorry this page is
194:00 - missing or does not exist and go to our
194:02 - home page so yeah we go to our home page
194:05 - and you can see this time
194:08 - settings dot wi-fi debug is equal to
194:10 - false and uh and here that's why we can
194:13 - render our own four zero four page so
194:16 - one thing i would like to mention here
194:17 - here that uh like this this is a github
194:19 - link and we will
194:21 - this is the repository we are used to
194:23 - work like we used to learn new concepts
194:25 - but from this uh from now on we're going
194:27 - to work with on this repository that's a
194:29 - change of projects uh like on like in
194:32 - this poster django project we are going
194:34 - to start building some projects
194:35 - initially this repository is empty but
194:37 - as soon as we start making projects i'll
194:39 - commit the changes okay so right this is
194:42 - the link
194:43 - okay i'll commit the changes as soon as
194:46 - you build projects and i'll update the
194:47 - file as well uh a readme file so you can
194:51 - instructions i'll define the question
194:52 - how you can run the project on your
194:54 - local machine as well okay so let's get
194:56 - started with this so basically today we
194:58 - are going to start with the calculator
194:59 - app of django so we are going to
195:02 - make a calculator app so the very i'll
195:05 - go to my repository so i'm inside my
195:07 - repository so i'll click on new terminal
195:09 - so what do we need to do so the very
195:12 - first command we are going to type is
195:14 - django
195:16 - admin
195:18 - start
195:20 - project
195:21 - django
195:23 - projects so in the end you define your
195:25 - project name so i have to find the
195:26 - django project as my projects so here
195:28 - you can see the django products folder
195:30 - has been created
195:31 - so
195:32 - i'll move inside my django projects okay
195:35 - fine so i have a managed py file inside
195:38 - this okay yeah this is absolutely fine
195:40 - so i'll i i'll do
195:43 - uh
195:44 - okay one thing we can do uh what i can
195:46 - do do i type python
195:49 - manage
195:50 - dot py
195:51 - okay run server i'll do first run server
195:55 - so this should start the server on my
195:57 - local machine yes the server has started
195:59 - so i'll type local
196:07 - [Music]
196:09 - okay yeah here you can see the the
196:10 - server has started local host colony 8
196:13 - 000
196:14 - or you can move to this as well
196:17 - 127.0.0.1 colon8000 okay so yeah now
196:20 - i'll type python
196:22 - manage
196:23 - dot py
196:25 - start
196:26 - app
196:27 - calculator
196:29 - calculator
196:31 - app
196:32 - data app okay i hope i'm correct with
196:34 - the spelling yes calculator app okay so
196:38 - the calculator app is created okay so
196:42 - uh
196:42 - what you can do okay django projects
196:45 - here you can see that our app is at it
196:47 - is at the same uh directory level with
196:49 - the manage.p wi-fi okay
196:51 - now uh one thing you can do i'll create
196:54 - a virtual environment here so uh you
196:56 - need to uh you might have to install a
196:59 - virtual environment package as well yeah
197:02 - so i type virtual
197:05 - env
197:06 - my env
197:08 - so this would create an environment
197:10 - variable uh
197:12 - inside the project so
197:15 - yes the i hope the environment variable
197:17 - has been created okay uh uh for this
197:19 - virtual new enb i would uh in case it
197:22 - throws an error so you might have to
197:24 - install a virtual environment package
197:26 - using pip i guess it's paper installed
197:28 - virtual env it's simpler or maybe uh
197:30 - i'll update this in the next video okay
197:33 - if it throws an error okay so you can
197:35 - even check out on or check out on the
197:37 - documentation as well okay so i have
197:40 - created a virtual env
197:42 - so
197:43 - uh uh what i need to do
197:46 - so
197:46 - so now uh i'll have to activate my
197:50 - virtual environment
197:52 - my enb slash
197:55 - scripts slash
197:57 - activate
197:58 - okay you please make sure of of the
198:00 - direction in the slash symbol is defined
198:02 - okay now you can see the virtual env has
198:04 - been activated now i'll type python
198:08 - manage
198:09 - dot py
198:11 - uh
198:12 - oh sorry okay i'm really sorry for this
198:14 - uh
198:15 - what you need to do
198:17 - uh
198:18 - now uh i'll if i start my start my
198:21 - server it won't start so i need to
198:24 - define even i can try this out
198:27 - python manager
198:28 - start out okay start app the source uh
198:31 - run server so what you can see it could
198:34 - not import django because inside my
198:36 - environment django is not installed so
198:38 - i'll just quickly install django inside
198:40 - my environment variable pip install
198:43 - django
198:45 - okay
198:46 - so the django will be installed
198:49 - in the uh like it would be installed in
198:51 - the environment variable so by the time
198:53 - it i'll give you a brief overview so
198:56 - like uh basically we are going to define
198:58 - the template directory static files uh
199:01 - like now we have created the project we
199:03 - have created app now we are going to
199:04 - create a requirement.txt file as well so
199:07 - this is this will be all about uh
199:09 - development environment then like in the
199:12 - upcoming we are going to work with front
199:14 - end
199:16 - front end part then back end part
199:19 - uh then uh
199:21 - error handling
199:22 - so basically
199:24 - some new some new designs as well to how
199:27 - we can make our app beautiful like in
199:30 - the front and part responsive so we are
199:31 - going to cover them as well okay so
199:33 - let's move to this okay yeah it's
199:35 - getting installed okay uh so basically
199:38 - uh what we we are going to do we take
199:40 - the input from the user it will help us
199:43 - to uh we will take input from the user
199:45 - then we will uh like
199:47 - even the the mathematical inputs can
199:49 - have some error we'll check a check uh
199:52 - errors as like like division by zero
199:54 - error we'll uh check some the error
199:57 - handling and this at that level at that
199:59 - level as well okay so yeah now here you
200:02 - can see your
200:04 - environment has been installed and i'll
200:07 - type pip freeze
200:10 - requirements
200:12 - requirements
200:14 - dot txt
200:17 - okay yeah here you can see the
200:18 - requirement of txt has been created so
200:20 - i'll move to requirement.txt now here
200:22 - you can see like now if you want to do
200:25 - you can also do one thing uh like
200:27 - you can type ctrl f
200:30 - and you can simply type quick equal
200:32 - equal to uh
200:34 - i have tried this thing like you can
200:36 - replace with this with greater than
200:38 - equal to sign
200:39 - like this would help you like in if if
200:42 - in any uh like an any other uh uh like
200:46 - in upcoming uh
200:47 - if there's any another version like
200:49 - three point four point zero three point
200:50 - zero point
200:52 - four so like three point zero point four
200:55 - zero 3.0.4 so like in
200:57 - like in any future if you have a new
200:59 - version so this would update to that
201:01 - version because it has a greater than
201:03 - equal to sign so any version greater
201:05 - than equal to 3.0.4
201:07 - will be updated so you can
201:09 - apply this to your requirements.txt file
201:11 - to get a get updated or uh if it if it
201:14 - might throw error you can revert back to
201:17 - this
201:18 - uh with the equal equal to sign okay you
201:20 - can simply do greater than equal to
201:23 - then replace with equal equal to sign
201:25 - okay you can try this out okay
201:28 - so
201:29 - because uh i have tried this was once
201:31 - okay so
201:32 - now uh the requirement.txt5 has been
201:35 - created now we will move to our settings
201:38 - dot py file quickly
201:42 - okay this is the settings dot py file
201:45 - okay so one thing you need to define os
201:48 - dot path
201:49 - dot join
201:55 - okay i'll define base directory
201:58 - yeah good
202:00 - and templates okay
202:03 - okay yeah good
202:05 - and i'll define a static url is go to
202:07 - url and you need to find static file
202:09 - directory
202:11 - as os dot part.join page directory and
202:13 - static folder i quickly copy this yes
202:16 - good yes so
202:18 - i'll do this i'll move into my django
202:21 - projects okay so what do you need to do
202:23 - so at this level you need to define two
202:25 - folders one is
202:27 - templates
202:30 - good another is
202:33 - static
202:36 - okay so this is good okay and what we
202:39 - are going to do uh now what you can do
202:41 - we do like we are going to move to our
202:44 - uh
202:47 - url.ui file okay so
202:51 - you are yeah so this is include path
202:55 - comma include
202:57 - okay and you can define a part two here
203:00 - as
203:02 - calculator
203:05 - app
203:06 - include
203:11 - calculator
203:13 - two later
203:16 - data
203:18 - okay calculator f dot urls
203:24 - okay
203:25 - so i'll run my server but
203:33 - okay now i'm inside my calculator app so
203:35 - i'll create a new file urs dot py here
203:37 - file here
203:39 - so basically okay i'll do one thing
203:43 - yes new file
203:45 - urls dot
203:47 - py
203:48 - fine absolutely fine
203:50 - and
203:51 - from here what i can do
203:52 - [Music]
203:54 - i'll quickly copy this
203:56 - paste it here good
203:58 - uh and i'll define url patterns as well
204:04 - okay
204:06 - okay
204:08 - okay okay okay i'll define
204:11 - from dot
204:14 - sorry
204:16 - from dot import views so this would bind
204:20 - my ultr.pvp file to use
204:22 - and i'll give
204:27 - views
204:30 - views dot index
204:33 - name
204:34 - is equal to
204:36 - index
204:38 - yes
204:39 - okay but uh i have to go to my use dot
204:42 - py file as well
204:46 - yes
204:48 - that's why i'll define def
204:50 - index
204:52 - request
204:55 - okay
204:56 - and
204:59 - that defined from django
205:01 - dot http import
205:04 - http
205:08 - response
205:10 - uh athlete
205:12 - response
205:14 - yes good
205:16 - and
205:17 - return
205:19 - http response
205:21 - server
205:26 - started
205:28 - okay so this should work now
205:32 - python manager pyr run
205:34 - server i hope there's no error yes
205:38 - okay and i'll move to calculator
205:41 - calculator
205:46 - yeah good absolutely fine so we are
205:49 - right now i have created the development
205:51 - environment so like just for the last
205:54 - last few seconds i was like white i was
205:56 - doing something
205:57 - i was implementing it so like i'll give
205:59 - quick quick overview settings your video
206:01 - file you're done you already so what i
206:04 - tried to do that uh
206:06 - like uh on the calculator app
206:09 - okay so basically i used to uh like in
206:11 - the previous tutorial i used to keep it
206:13 - as a blank but right right now i've done
206:15 - this as locals calculator app because
206:17 - there might be a possibility that we
206:19 - might be creating many apps into this
206:20 - single project okay so like on this
206:23 - calculator app route uh like if i go to
206:26 - this route
206:28 - i here you can see character app server
206:30 - started but if i move to this so this is
206:32 - the okay
206:34 - okay okay
206:36 - slash admin
206:38 - again
206:40 - we will be discussing about django admin
206:41 - as well so i'll
206:43 - try to fix this error in the next
206:45 - tutorial uh till then you can move to
206:48 - cal local host colon 8000 calculator app
206:51 - so like here you can see the server has
206:53 - started so uh like in this
206:55 - it included the calculator app.urls and
206:58 - now like in this path views.index was
207:01 - called and i return an http responsive
207:03 - server started okay so so like in the
207:05 - previous previous lecture what we did uh
207:08 - we
207:09 - i will run my server python manage dot
207:11 - py run server so basically
207:14 - i'll move to
207:15 - localhost colon8000 you're good so i was
207:18 - uh like now what i'm trying to show that
207:21 - our project can has multiple apps so
207:23 - this is the root
207:25 - uh
207:26 - root app of our project so i'll clarify
207:28 - this like as soon as i move to
207:31 - calculator app uh it says the calculator
207:34 - app is running so like in the last in
207:37 - the end of the video last video i was
207:39 - having some uh
207:40 - i was having error at this point like
207:43 - when i used to do local school on 8 000
207:45 - it used to throw me an error that it
207:47 - could not find the path okay something
207:49 - like 404 error page so like now what i
207:53 - how did i solve this i uh like a local
207:56 - host colon 8000 shows me the
207:58 - the server has started and a calculator
208:01 - app shows the calculator app is running
208:04 - at this route we are going to make an
208:05 - app so what i did uh what i did so i
208:09 - move to my url dot py file of the django
208:12 - projects
208:13 - good so like in this you can see
208:16 - uh what i did
208:18 - uh like uh i created a like this is my
208:22 - calculator app okay good now i created a
208:25 - new app with the name root app dot
208:28 - with the name root app and i link the uh
208:31 - default path to the root app.urls and
208:35 - i'll open the root app.url so it says
208:38 - path like views dot root name is older
208:40 - root and i'll move to and it return and
208:43 - initiative respond the root the
208:45 - server has started so this is basically
208:47 - this corresponds to the root app so i
208:49 - made a root app to make sure that it
208:51 - doesn't throw me an error on the main
208:54 - drum okay so basically i uh why i did
208:56 - this because we're going to we are going
208:58 - to create multiple apps on this single
209:00 - project so when i move to my app
209:02 - calculator apps it says calculator app
209:04 - is running so absolutely fine
209:06 - okay now one thing we are going to do
209:08 - so what we can do i'll close
209:11 - uh close to the right yeah good
209:13 - okay uh i'll close this as well and
209:15 - close this as well okay but now i'm
209:18 - inside my dot py file so
209:21 - uh i did os dot part dot join base
209:23 - directory and templates basically we are
209:25 - going to refer to the calculator app
209:27 - template so i'll
209:28 - give a slash calculator
209:31 - calculator app okay so this is fine now
209:36 - calculator app is a folder which i'm
209:38 - going to define in templates
209:40 - okay so yeah here you can see what i'm
209:43 - uh
209:44 - was what i was talking about that i
209:47 - created a root app and then a calculator
209:50 - app so this is absolutely fine now taken
209:52 - okay now i'll move inside my templates
209:55 - and create a new folder
209:58 - with the name calculator app you're good
210:01 - and i'll create okay so i'll i've moved
210:05 - inside my calculator app templates now
210:07 - i'll move to that folder
210:10 - templates
210:11 - oh
210:12 - [Music]
210:14 - what i'm going to do uh i'll move to the
210:16 - templates folder
210:21 - okay
210:27 - templates yeah here it is yeah templates
210:30 - okay and now i'll move inside the
210:32 - templates okay good
210:34 - and i'll create
210:36 - new file
210:38 - and
210:38 - type
210:39 - index
210:40 - dot
210:42 - html okay
210:44 - this is fine yeah
210:48 - okay
210:49 - so
210:50 - uh i'm inside my templates calculator
210:52 - app index.html you're good so what i can
210:55 - do now is
210:57 - uh what i'll do
211:00 - i go to i'll go to the bootstrap website
211:03 - okay i'll go to the documentation
211:06 - getting started so i'll copy the base
211:08 - template here i'll quickly copy
211:10 - this paste it in my index.html i'll save
211:14 - this file as well
211:17 - okay now the server has restarted so
211:20 - i'll go to my page and okay okay but i
211:22 - forgot to do one thing what i need to do
211:25 - i'll move to use dot py file of the
211:27 - calculator app and instead of this i'll
211:29 - return a page
211:32 - return render request
211:36 - and then index dot
211:38 - html
211:40 - okay so i'll refresh this page
211:43 - okay
211:45 - is there any error
211:47 - okay
211:49 - i'll refresh this page
211:51 - yeah it says hello world so basically
211:53 - it's all working fine now what we have
211:55 - to do like uh we have to create a footer
211:58 - uh like navbar uh we have to do a
212:01 - responsive design as well so we'll
212:03 - quickly now do the work so what we can
212:05 - do
212:06 - is quickly search out for navbar
212:11 - okay
212:12 - yeah here's the nag bar
212:14 - okay i can copy this
212:17 - i'll move to my index.html
212:19 - i'll remove the heading okay first i'll
212:22 - give a title as
212:24 - django
212:26 - calculator
212:30 - later app
212:31 - so this is going to be a single page
212:33 - application so
212:34 - uh okay uh so this is going to be a
212:38 - single page application we i can copy
212:40 - this so we don't need a form i'll cut
212:42 - this
212:43 - even i don't listen
212:46 - okay
212:47 - okay okay okay
212:49 - so basically i don't need the knack down
212:52 - also so i can cut this
212:55 - okay
212:57 - uh
212:58 - this
212:59 - okay first i'll type
213:05 - calculator
213:08 - calculator
213:10 - app
213:11 - good
213:12 - and
213:15 - basically when i don't need this also
213:22 - not even okay
213:26 - okay
213:27 - django calculator app
213:33 - okay i can save this then refresh my
213:36 - page to see what's happening yeah now
213:38 - it's absolutely fine
213:41 - instead of this i'll give an about
213:46 - about
213:50 - okay
213:51 - and
213:52 - i'll give this about
213:56 - now i check on control pressing ctrl
213:59 - shift i yes this is absolutely working
214:01 - fine okay
214:03 - so yeah uh we'll try to improve the uh
214:06 - uh or we will try to improve uh on this
214:09 - as well so
214:11 - uh basically for footer what we can do
214:15 - okay
214:18 - okay so oh okay uh i i went to cards
214:22 - okay okay we'll do one thing okay
214:25 - what we can do
214:26 - uh if class is good card card body
214:30 - yeah
214:31 - good
214:32 - so
214:33 - we are inside okay now we'll move to
214:35 - that as well so we are inside our body
214:37 - div class is equal to card
214:41 - okay so before this i need to define a
214:43 - container as well if class is equal to
214:46 - container
214:48 - fluid
214:51 - good
214:52 - and that class is equal to rho
214:56 - div class
214:58 - is going to call md6
215:03 - and then uh
215:05 - a diff clock uh dip class equal to
215:08 - yeah card then a card body
215:11 - would do yes
215:17 - card body as well
215:21 - okay
215:22 - and i'll go to the page
215:26 - yes it's absolutely working fine and
215:29 - i'll give a style is equal to margin
215:32 - zero
215:34 - auto okay so this is absolutely fine
215:36 - i'll give us the i'll give the style
215:38 - equal to margin
215:40 - 0 and auto i'll give a stylus style is
215:43 - good margin 0.0 so the style is in the
215:46 - would be in the middle
215:48 - and
215:49 - here you can see i'll define a form
215:51 - inside it inside it
215:58 - and in this
216:01 - i'll quickly define the forms
216:07 - okay if class is able to form group so
216:09 - basically we have to define a div class
216:12 - is able to form
216:13 - group
216:17 - good
216:18 - now we have to define inside the end
216:20 - label okay so a class of form control
216:24 - has to be defined here
216:26 - so
216:28 - input
216:30 - basically i'm going to type input type
216:31 - is going to search because our class is
216:33 - equal to
216:35 - okay sorry for this
216:37 - class is going to form control name is
216:40 - equal to
216:41 - i'll define this as
216:44 - query
216:46 - id is equal to query as well
216:52 - okay
216:53 - and i hope this is i have to define a
216:56 - method here method is equal to get
216:59 - action
217:01 - is equal to i'll define the action as
217:03 - well okay so until the time you can
217:05 - keep a hash here
217:10 - okay i have refreshed the page and
217:12 - yeah
217:13 - so
217:14 - so even i have to define a margin margin
217:16 - top as well so uh this is
217:20 - one ram
217:22 - then auto
217:23 - then bottom is zero so this is a full
217:25 - hand notation top
217:27 - uh this this go then top left bottom
217:31 - then again right
217:36 - yeah now this is fine
217:38 - okay so
217:40 - i have to define two input
217:42 - so basically in this i am going to
217:44 - define button group
217:51 - button group
217:53 - so basically the button group would work
217:55 - in this way
217:59 - or we can do what we can do i'm inside
218:02 - my form
218:03 - [Music]
218:05 - card body
218:07 - so what i can do
218:14 - input type is equal to
218:16 - submit
218:18 - sorry
218:19 - submit
218:21 - class you go to form
218:24 - button button primary
218:30 - okay and i have to define as new input
218:33 - also because if the user input type is
218:35 - equal to reset
218:42 - okay
218:42 - okay uh
218:46 - class go to button
218:50 - button
218:52 - primary
218:59 - what we can do refresh page okay yeah
219:01 - this is absolutely working fine we will
219:02 - try to give different colors to the
219:04 - button okay now
219:06 - we will add the footer
219:11 - okay the photo would be in the same way
219:13 - we are going to do this
219:15 - div
219:16 - class is called container fluid
219:23 - [Music]
219:25 - if class is pro
219:31 - if class is equal to row then uh i'll do
219:34 - diff
219:35 - to
219:39 - call
219:40 - md
219:42 - 12
219:45 - okay and i'll give this as
219:51 - i'll define this as okay let me do one
219:53 - thing i'll define this as footer
219:57 - class is going to fixed
219:59 - bottom because i want this to be remain
220:01 - at the bottom of the screen
220:05 - okay
220:05 - and i'll define as a
220:08 - p
220:09 - okay
220:10 - footer
220:14 - yes
220:18 - here you can see the footer is being
220:19 - displayed but uh what i can do
220:22 - background light
220:26 - will this work
220:30 - okay okay let me check one thing now is
220:33 - go to background right yes number light
220:40 - i'm trying to give the same color to the
220:42 - footer as navbar
220:49 - okay i'll check this out but like we
220:52 - have made a raw structure to our
220:53 - application so now we would we would be
220:56 - completing it so like the first thing i
220:58 - would like to show you about the footer
221:01 - we had some issues in the footer like in
221:03 - the last tutorial so like uh
221:06 - right click here click on inspect and
221:08 - try to do something like this is our
221:10 - footer so what i can do i can add a
221:13 - background of black
221:16 - oh no sorry
221:18 - black
221:19 - yeah no it's absolutely working fine uh
221:22 - the text color should be
221:24 - white
221:25 - yeah it's good and text align should be
221:29 - center yeah absolutely working right so
221:32 - we will commit the changes here so i add
221:34 - a style here
221:36 - background
221:38 - is equal to black
221:39 - good
221:41 - and we'll make
221:44 - color is equal to white the hair color
221:46 - will represent a text color white good
221:50 - and the text line should be
221:53 - center
221:54 - good
221:56 - so what i want to do uh we have this
221:58 - classic container fluid and i'll give a
222:01 - margin bottom
222:03 - here
222:04 - margin bottom of at least 20 ram to be
222:08 - to give a like this would help me i
222:11 - would like to have a screwable view
222:12 - downside okay so like uh now it's
222:16 - working fine so i'll move to the
222:19 - container full fluid
222:21 - okay
222:23 - uh this is the container fluid yes
222:25 - yes so like here you can see i have
222:27 - given a margin of
222:29 - 22 ram 24 right
222:31 - so uh like
222:36 - i'll yeah okay i'll look into this okay
222:38 - uh so next thing we can do
222:40 - uh what we can do is uh we have about so
222:45 - like uh we want a image here
222:48 - so
222:50 - we'll add image class is equal to image
222:54 - fluid
222:56 - okay
222:57 - now and i define a source to it source
223:00 - is equal to
223:02 - percent
223:03 - static
223:06 - okay and then a person sign an end
223:08 - symbol
223:10 - then logo dot
223:12 - jpg
223:14 - i think this should work fine
223:17 - okay
223:18 - it is throwing my error
223:21 - okay yeah uh at the top of the template
223:24 - you need to define person root static
223:29 - percent
223:31 - load
223:33 - starting
223:35 - yeah
223:38 - so
223:40 - it is throwing okay okay let me see like
223:43 - i'm in my templates
223:45 - static folder but the name is main.jpg
223:48 - sorry
223:51 - okay i'll move to the link and this is
223:53 - main dot
223:56 - jpg
224:00 - so we have an image here also
224:02 - good so like uh yeah it's fine so what
224:06 - we can do
224:07 - uh like uh i'll align this button to the
224:10 - center and what we can do
224:12 - uh like uh
224:14 - this is button button primary so i'll
224:17 - give success button success
224:20 - and this is as button danger
224:24 - okay
224:25 - and i'll give the style is able to
224:28 - display
224:30 - block
224:31 - okay so this would uh i'll try to uh
224:34 - margin
224:37 - 0
224:38 - auto
224:41 - and i'll apply the same
224:42 - setting to the another button as well
224:45 - okay
224:49 - so i'll refresh this page
224:51 - yeah
224:51 - okay
224:53 - okay what we can do
224:59 - okay and
225:04 - we give this as another row div class is
225:06 - equal to row
225:09 - good and divide
225:15 - class is going to call
225:17 - md
225:19 - six
225:22 - and what i'll do
225:24 - i'll press
225:35 - md6
225:45 - okay so i tried to give a row to it
225:50 - no
225:50 - this isn't working
225:55 - [Music]
226:00 - call six
226:09 - okay uh
226:12 - what we can do is
226:18 - we will inspect it here
226:23 - you see this this is the row which is
226:25 - showing okay good
226:37 - okay the problem was that my call wasn't
226:39 - inside the row okay so this uh now this
226:43 - this is fine okay my call wasn't inside
226:45 - the row so now it is inside the row
226:48 - yeah now it's absolutely working fine
226:50 - okay so we have two buttons submit and
226:52 - reset okay what why was the use of the
226:55 - reset okay if i top a type n equation
226:57 - two plus three plus five
226:59 - okay something so the reset button would
227:02 - reset the text okay okay so this is
227:04 - absolutely working fine okay what we can
227:07 - do here uh we can provide
227:09 - uh
227:11 - like uh what we can
227:14 - provide some text at the footer
227:22 - thanks
227:23 - for using
227:26 - our
227:27 - app okay we can provide this
227:30 - and in the same way what we can do
227:33 - we'll move to the body part
227:36 - uh what do we we can right click here
227:40 - so this is it looks good and here we can
227:42 - see
227:43 - see for the prefrontal part you need to
227:45 - be uh do some like inspect and do
227:48 - something because uh unite might not be
227:50 - accurate at the first time okay so okay
227:52 - uh what you can do
227:54 - uh
227:56 - i'll give a class right inside my body
227:59 - so i'll give it here i'm inside my body
228:02 - i'll give a whole class a background
228:04 - light
228:06 - this should work
228:07 - so this would
228:10 - yeah here you can see my body has the
228:12 - same color as the nav bar okay so this
228:15 - gives me a glossy interference okay uh
228:18 - it might be just i want to tell you that
228:20 - you can give any color you want you can
228:22 - right click here so here you can see the
228:24 - background color might be this you can
228:26 - do color inspector and try to give any
228:28 - color of your choice okay what you want
228:31 - you can give any color so this this one
228:33 - i'm trying to keep things basic it's up
228:35 - to do you want to make any changes okay
228:37 - and now
228:39 - what can we can do i'll refresh this
228:41 - page yeah good so what we can do
228:44 - uh so we have basically done with this
228:47 - so
228:49 - i'll
228:49 - try to give uh
228:52 - one thing i had mentioned about the
228:54 - margin bottom here so let me check with
228:57 - this
229:00 - okay yes
229:05 - this is the margin bottom
229:07 - yeah
229:12 - yeah i have included
229:14 - yeah uh that's what i was saying i was
229:16 - increased to trying to increase the
229:17 - margin bottom like it would give you a
229:19 - flexible view down there as well because
229:21 - uh next we are going to create the about
229:23 - part so like uh we'll give up about
229:27 - block
229:30 - and classic goddamn d6 again i was
229:33 - inside my form then inside my
229:36 - this is the row end of the row okay then
229:38 - i'll again have the row div class is
229:40 - going to row
229:44 - and if class is going to call md6
229:51 - i'll give a style is equal to margin
229:55 - 0
229:56 - auto
229:58 - and
229:59 - something uh
230:01 - good like we'll use some typography here
230:06 - typo
230:07 - graphi
230:09 - so we can have various things that one
230:11 - thing you can use here is a display
230:13 - phone
230:14 - or maybe lead as well what kind you want
230:17 - to use
230:18 - so like maybe you can use what i can do
230:22 - use
230:24 - p class is equal to
230:26 - display
230:30 - we can use display four
230:36 - this is about
230:38 - then we can give an hr tag
230:41 - it will create a line
230:43 - and and then we can use
230:47 - p class is equal to lead
231:04 - our calculator
231:07 - calculator app
231:09 - can perform
231:12 - mathematical
231:16 - operations
231:18 - okay
231:19 - now
231:20 - i'll refresh this page
231:24 - yeah now okay it's it's uh like
231:27 - it's fine
231:28 - uh what we can do
231:30 - uh
231:34 - i'll give a margin top of one ram
231:37 - one ram then auto
231:40 - zero then auto okay
231:43 - okay maybe or two remove two ram also
231:46 - and one thing i wanted to show you here
231:48 - that i'll give
231:50 - this
231:52 - row or maybe you can say
231:54 - column id
231:56 - is equal to about
231:59 - or maybe name is equal to about as well
232:02 - name is equal to about
232:06 - and when
232:07 - at the top of my navbar if i come here
232:10 - i'll give it a hash about because
232:12 - hashtags to the id
232:15 - okay
232:16 - so basically even in the even the vs
232:18 - code says like i click on here i get to
232:21 - this id okay so this is absolutely
232:24 - working fine okay and uh when i'm here i
232:27 - click on about i get down to here so
232:29 - basically this is this was an example
232:31 - how you can use id with the reference
232:33 - tag okay
232:34 - okay now if i come to control shift i
232:38 - okay
232:39 - okay uh i click on about i get to the
232:41 - about part okay it can be in lengthy
232:43 - paragraph as well
232:45 - okay uh it's up to you
232:47 - uh
232:48 - uh i'll give as a style is equal to
232:51 - text line is equal to center
232:57 - okay
232:58 - even to the heading also
233:03 - text line is going to center yeah good
233:08 - good so
233:10 - like we we are like almost uh done with
233:12 - the front end so this was the layout of
233:14 - our app so this was responsive you can
233:17 - press ctrl shift i
233:19 - or you can simply right click and click
233:21 - inspect so this is the responsive nature
233:23 - of our app so basically we can type
233:25 - anything two plus three and we are going
233:28 - to reset so this uh we were able to
233:30 - implement this functionality the next
233:32 - part we are going to do basically we are
233:35 - going to add instructions block as well
233:37 - as define a form submission url to the
233:40 - page and then we will build the backend
233:42 - logic with exception handling as well
233:44 - okay so let's get started with this
233:46 - tutorial
233:47 - so basically what we can do uh
233:50 - so this will we can define a list li
233:53 - class is equal to nav item
233:57 - okay then uh same way a anchor tag
234:00 - which is represented by a nav link
234:06 - good and hrf is equal to hash
234:08 - instructions
234:10 - instructions
234:12 - okay
234:13 - and
234:14 - uh
234:15 - instructions
234:16 - instructions
234:19 - yeah good so this works fine so we can
234:21 - uh i would uh
234:25 - we can move to the page and see this
234:28 - okay
234:30 - yes
234:31 - we can see here instruction has come uh
234:33 - but as soon as i click because i have
234:35 - not defined instructions id so uh what
234:38 - we can do
234:39 - we can move to this and we can see this
234:42 - row which represents the about block so
234:45 - i'll copy this row
234:47 - ctrl c
234:48 - and then i press ctrl v so i'll do this
234:51 - as instructions
234:53 - instructions
234:55 - okay good and i have to define an
234:57 - instruction id here as well because
235:01 - hash
235:02 - instructions
235:04 - yeah good so i have defined the hash
235:07 - instructions so
235:09 - so i can
235:10 - so we can define some instructions so
235:13 - how we can define them what we can do we
235:14 - can move to bootstrap and use list
235:18 - list group so
235:20 - in this way we can learn a new thing
235:21 - also this is a list group which also has
235:23 - list group item in it so here are many
235:26 - you can choose any style of view
235:29 - so i'll use this one
235:31 - okay so what i can do uh
235:35 - i'll move this
235:37 - hr sorry paragraph and
235:40 - put this this group and i'll move to the
235:42 - page
235:45 - and yeah here you can see here the
235:46 - instructions i've defined so when i
235:48 - click on instructions
235:50 - instructions okay there might be some
235:52 - issues hash instructions
235:57 - okay
235:58 - there is an issue hash
236:00 - okay okay you don't need to define a
236:02 - hash insert because when i was referring
236:04 - here okay let me go over yeah hash
236:07 - instructions when i click on this i'll
236:09 - move to this because this id is only
236:10 - instructions so there was by mistake and
236:12 - hash instructions so uh okay okay i'll
236:15 - refresh this page
236:16 - yeah good now i click on instructions i
236:18 - move to this block okay this is now this
236:20 - is working fine so we can define some
236:22 - instructions here like
236:24 - uh
236:27 - plus sign
236:28 - we can define
236:30 - uh like
236:31 - you can define some instructions
236:33 - plus for addition
236:37 - okay
236:38 - and simply something like
236:42 - star for multiplication
236:47 - okay uh something like uh
236:50 - and
236:52 - uh
236:54 - we can define
236:56 - this for division
237:00 - okay and basically we're working in
237:02 - python so we might be using uh
237:04 - python and this is for a lower division
237:08 - floor
237:12 - division
237:14 - yeah and
237:16 - we can cry
237:19 - also like
237:21 - this for minus okay
237:28 - okay so basically uh we have defined
237:30 - some instruction like plus for addition
237:32 - minus multiplication division flow
237:34 - division we can under under define
237:37 - like
237:38 - uh
237:39 - something like this also
237:44 - parenthesis also we can define
237:49 - okay we can define all we can define as
237:51 - brackets
237:54 - brackets
237:56 - okay or we can simply type parenthesis
238:00 - i think parenthesis
238:03 - okay so basically parentheses are used
238:06 - to define a priority like if you want to
238:09 - evaluate first that parenthesis then
238:12 - next so we would move to the page and
238:14 - i'll refresh this page okay so this
238:16 - looks good plus for addition minus
238:19 - multiplication division lower division
238:21 - and parenthesis okay so this looks fine
238:23 - so what we can do for define we can
238:25 - define a new url here so we will try now
238:29 - we will move to some backend part so
238:32 - so i'll move to urs dot py file so i'll
238:34 - define a path
238:36 - is equal to submit
238:39 - query
238:40 - okay
238:42 - and views dot submit query
238:46 - and i'll give this a name as equal to
238:48 - submit
238:49 - query okay so i'll define some single
238:52 - quotes here
238:54 - submit query okay now now this is fine
238:57 - now uh i'm referring to the submit query
238:59 - in use folder so i'll go to views
239:01 - so this is throwing me an error because
239:03 - since i have not defined a
239:05 - viewer submit query in my views
239:07 - define submit
239:10 - submit query
239:14 - okay and i'll take a request as a
239:17 - parameter
239:20 - and uh what i can do
239:23 - uh
239:24 - till now i will define path statement
239:26 - here
239:27 - okay
239:28 - so
239:29 - this looks fine and now
239:32 - in my html page
239:34 - i will move to my html page and what i
239:36 - can do
239:38 - i have a action here yes
239:42 - percent url is equal to submit
239:47 - query
239:51 - yes
239:52 - this looks fine
239:54 - okay so this looks fine uh
239:57 - yeah this is submit query fine
239:59 - now i would move to my submit query
240:01 - block
240:03 - use dot submit query yes
240:05 - okay
240:06 - uh and i'll return
240:12 - uh
240:13 - what i can do
240:14 - i'll take q as a parameter
240:16 - a queue as a parameter and request
240:20 - dot get
240:24 - query
240:28 - because uh i will show one thing that
240:30 - inside my form i can move to the form
240:33 - uh
240:35 - yeah uh yeah here you can see that input
240:38 - type is equal to text form control and
240:39 - and here the name is query so you should
240:42 - have the same name
240:44 - uh uh for the get parameter as well so
240:46 - in my view dot ui file i'm
240:50 - request
240:51 - query because this refers to the same
240:53 - name in the form we were referring to
240:56 - so what we can do
240:58 - so i will return
241:02 - and http response
241:05 - of queue
241:07 - okay
241:08 - so this would uh uh this should work
241:10 - fine now uh i'll move to the page
241:14 - and i'll refresh this
241:16 - okay this is still now fine two plus
241:19 - three
241:20 - star five so i should submit this
241:24 - yeah now this is working fine here you
241:26 - can see that uh i went to the route as
241:29 - soon so i'll quickly give a overview of
241:32 - this what i did
241:34 - so here you can see that uh first
241:38 - i defined
241:39 - uh inside my navbar i give hash
241:41 - instructions and define an instructions
241:43 - block
241:44 - so basically you can uh this these are
241:46 - instruction plus for addition minus
241:47 - multiplication division pro division
241:49 - parentheses okay now then i went to
241:52 - urls.py file then i defined a path
241:54 - submit query which requires a function
241:56 - views.submit query the name is going to
241:58 - submit query then i went to the views.py
242:00 - file then yeah i did request dot get
242:04 - query and q is equal to this okay so
242:07 - return http repos response of q okay so
242:10 - this is fine what can do also in the
242:13 - same way we can return a json response
242:15 - as well
242:16 - for this you have to import json
242:18 - response json
242:20 - response
242:23 - and you can do
242:25 - json response of q
242:27 - so i'll
242:29 - make a get request
242:33 - okay
242:35 - what for this what you need to do you
242:37 - need to define a json
242:40 - dictionary
242:42 - and here you can define q
242:45 - is equal to q
242:46 - and uh and then i have to return a json
242:49 - dictionary
242:53 - yeah here you can see now this is
242:54 - working as an json object which says q
242:57 - parameter and then 2 plus 3 star 5 okay
243:00 - so uh for json respond you have to
243:02 - define a dictionary because then it
243:04 - works like a json uh or json object okay
243:07 - so in this way we can define an http
243:10 - response as well
243:13 - so
243:14 - yeah now this is fine
243:16 - so we can i'll quickly do this yeah this
243:18 - is working fine okay so i'll move to the
243:20 - page
243:21 - okay i'll type something else minus two
243:24 - then reset button i'll copy this reset
243:27 - button reset button works fine i'll
243:30 - paste it here and submit yeah now this
243:32 - is working fine so basically what we are
243:34 - going to do
243:35 - we would in this tutorial what we are
243:36 - going to do evaluation of query and
243:38 - adding a try accept block in this
243:41 - tutorial is continuation of tutorial
243:43 - number 20 in this we would evaluate
243:45 - query as well as try except block so we
243:48 - will implement evaluation tricep block
243:50 - and render to front end part so this is
243:52 - going to be an interesting tutorial so
243:53 - let's get started with this so basically
243:56 - till now we had defined a submit query
243:58 - route and we were taking request dot
244:00 - request query and queue then we returned
244:02 - an http response of queue so basically
244:04 - what we can do i can type any math
244:06 - mathematical equation that is two plus
244:08 - three so i would submit this and it
244:10 - returns me two plus three so this looks
244:12 - good so we can move to the back back
244:15 - page home page index page so basically
244:17 - this we are making a
244:18 - application so basically about
244:21 - then
244:22 - instructions so you can check check
244:24 - responsive nature as well ctrl shift i
244:27 - okay and this is the nav bar and then
244:29 - instruction on this so
244:32 - what we can also try like if you scroll
244:35 - down the page what you see the nav bar
244:37 - is
244:38 - navbar we cannot see the navbar on the
244:40 - top if we scroll down the page like we
244:42 - are on the top of the page as soon as we
244:44 - scroll down the page we don't see the
244:45 - navbar on the top so
244:47 - this is a like what you can do on the
244:50 - number class
244:51 - we can move to the navbar class and try
244:54 - type
244:55 - fixed
244:57 - top
244:58 - so what would it do like i'll refresh
245:00 - this page
245:02 - so like uh i'll refresh this page and
245:05 - you can see here's the navbar okay and
245:07 - when you press ctrl shift i so when you
245:09 - scroll down the page you see the number
245:12 - is fixed on the top so this is an
245:13 - additional utility off to your front end
245:15 - part if you want to carry on with this
245:17 - then it's absolutely fine so i just
245:19 - showed you like you can fix the navbar
245:21 - on top when you scroll down the page so
245:23 - as soon as i remove this fixed top pick
245:26 - stop so what i observe when i refresh
245:29 - this okay so number is looking on the
245:32 - top but as soon as i scroll it
245:34 - disappears so you can choose the
245:35 - functionality to your part if you want
245:38 - to use the fixed top additional utility
245:40 - of navbar okay so now we move to use dot
245:43 - py file so we would add a try accept
245:46 - block
245:47 - try
245:48 - if this is successful and accept
245:51 - okay so this is fine so what we are
245:54 - going to do we are taking an answer is
245:57 - equal to eval
245:59 - eval is an inver
246:02 - is an inbuilt function in python which
246:04 - uh it takes a string as a
246:07 - string as a mathematical equation then
246:09 - evaluates it and returns
246:15 - mathematical equation okay so what you
246:18 - can do answer is equal to eval
246:21 - q
246:22 - then i would define my dictionary
246:25 - my dictionary
246:28 - so basically the q would remain the q
246:32 - okay and the uh answer would be the
246:35 - answer
246:37 - and if this operation is successfully if
246:39 - this tribe block gets executed so i
246:42 - would say
246:43 - error
246:45 - is false
246:47 - okay
246:48 - so this should work fine till now
246:50 - and if
246:53 - if uh uh what i can do
246:56 - if if this is a true like uh what i'm
246:59 - going to say if this operation is
247:01 - successful then i would return
247:04 - render
247:06 - return render request
247:11 - then index.html
247:16 - and then i would context
247:20 - is equal to my dictionary
247:22 - okay if this is true then uh till time
247:26 - till the time being i would say pass is
247:28 - equal to
247:29 - uh i would try
247:31 - uh add a pass statement to the accept
247:32 - block because it was showing an error
247:34 - because
247:35 - so this should work fine okay uh now
247:38 - what i can do
247:40 - if this is true then this should
247:43 - work fine okay then uh like i'll move to
247:46 - my index.html
247:48 - this is a navbar navbar okay fine yeah
247:50 - so this is the container fluid so div
247:54 - class is equal to row
247:57 - then div
247:58 - class is equal to call md
248:02 - six
248:05 - uh uh
248:07 - style would be margin auto zero style
248:09 - will be margin
248:12 - zero auto
248:14 - okay so if this
248:16 - okay what i can do
248:19 - percent
248:20 - if error
248:22 - so basically
248:24 - uh percent if error because i'm trying
248:26 - to say if error means if error was true
248:29 - so it would show the error okay so if
248:32 - true
248:33 - then i would do something else if it
248:35 - error is false i mean there is no error
248:38 - then i would use else part
248:41 - to show the result then
248:44 - i would end this and if uh i would end
248:47 - this if else equation with nf tag
248:51 - okay this is uh uh this looks good okay
248:54 - so person and if error person else okay
248:58 - good so what i can do uh
249:02 - alert i'll move to the alert and i'll
249:04 - copy this
249:05 - and if this is an
249:07 - error okay
249:09 - so what i can do i'll
249:12 - quickly if error
249:17 - sorry
249:20 - there is an error
249:22 - or you can simply type sorry
249:25 - error error is fine
249:27 - strong
249:29 - and to do this uh you would use alert
249:32 - warning not alert danger
249:35 - okay
249:36 - and in the else part you need to show
249:39 - that if that
249:41 - result over successfully so i'll copy
249:43 - this
249:47 - okay
249:48 - and i'll use alert alert
249:51 - success
249:54 - so first we are going to test our
249:56 - application
249:58 - so uh we will move to the page i'll
250:00 - refresh this
250:02 - okay so first
250:06 - okay so there is some issue
250:08 - here with the
250:10 - okay
250:17 - dip class is going to
250:20 - alert
250:22 - okay okay claus is going to call md6
250:31 - okay i need to
250:33 - check this like if error
250:37 - yes
250:40 - yes okay i'll move this equation to here
250:48 - okay there if clause would call md6 yes
250:52 - and here is the row yes
251:00 - yeah now this is absolutely working fine
251:02 - an error is showing me in green color
251:04 - let me check this
251:07 - okay yeah
251:08 - okay okay okay because this was answer
251:10 - okay
251:17 - yeah okay
251:20 - okay so let me go with this 2 plus 3
251:24 - yeah 2 plus 3 is 5 so this looks fine
251:27 - okay so yes
251:30 - 2 plus 3 is equal to 5 so let me do
251:31 - perform some mathematical equation 2
251:33 - plus 3
251:34 - star 4
251:37 - 14 okay yeah this is good
251:40 - good and let me define some equation uh
251:44 - let me do
251:45 - 2 plus
251:47 - 3
251:48 - divided by
251:50 - 2 like this would evaluate to 5 then 5
251:52 - divided by 2.5 this should return 2.5
251:55 - yes but if i do the same equation with a
251:58 - flow division
252:00 - that is 2 okay
252:03 - we can try some more mathematical
252:04 - operations like
252:06 - 2 to the power
252:08 - 3
252:10 - yeah this is 8 so what you can do so
252:12 - like here you can add
252:16 - add this like
252:18 - double star
252:20 - for exponential
252:23 - exponential
252:27 - like you can add this
252:30 - double star for exponential
252:33 - okay and in the same way you can add
252:40 - modulus
252:42 - modulus as well
252:46 - mod
252:47 - mod mod so this would uh like this for
252:50 - the mod operation
252:51 - okay
252:52 - uh
252:53 - so basically mod operation is to to get
252:55 - a rem uh you can i'll quickly perform
252:58 - mod operation like
252:59 - this is
253:03 - 10
253:04 - modulus
253:06 - three so
253:07 - it should give one i guess yes this is
253:09 - one so absolutely correct so like i
253:12 - would quickly explain this uh so uh like
253:15 - we added exponential operator results
253:16 - quickly explain 5
253:19 - double star 5
253:21 - so
253:22 - and then minus 2
253:25 - so th this is
253:27 - 25 uh okay i'll
253:30 - quickly
253:31 - put bases here
253:32 - so this is 25 minus 23
253:36 - huh
253:37 - now there might be some error
253:41 - five
253:44 - okay i made a mistake i'm really sorry
253:46 - for that that was 5 to the power 5 if
253:48 - i'm not wrong that is 5 to the power 5
253:51 - then minus 2 okay so the 5 to the power
253:54 - 5 was
253:56 - 3 1 2 5 then minus 2 return 3 1 2 3
253:59 - basically what i meant was 5 square so
254:01 - that was 5
254:02 - to the double star 2
254:04 - minus 2 that is 5 square is 25 minus 2
254:07 - is 23 so basically we are tested with
254:09 - the application and one thing i would
254:10 - show then as soon as i type one divided
254:12 - by zero
254:14 - uh this is an error so it should return
254:16 - me an error so
254:18 - it return then return a http response
254:20 - object so we'll go to the use.py file
254:23 - so
254:24 - so we'll continue this
254:26 - my dictionary
254:29 - have error
254:32 - is equal to
254:33 - true
254:35 - okay and in the same way
254:39 - my dictionary of error
254:42 - is equal to true
254:44 - so what you can do
254:46 - or you can define a new dictionary
254:49 - error
254:51 - is true
254:53 - and i should return the same page with
254:56 - the context equal to my dictionary
254:59 - yes
255:00 - so i know
255:01 - now i will go back to the page now 1
255:03 - divided by 0 yeah now this works
255:06 - absolutely fine that 1 divided by 0 was
255:08 - an error so it throws through me an
255:11 - error
255:12 - okay then again there is an issue with
255:14 - the front end part so let me check
255:19 - if class is equal to
255:21 - yes
255:25 - new class emperor
255:32 - okay
255:33 - if error there's an error on this front
255:35 - end
255:36 - on the front end part so let me check
255:58 - okay
256:04 - then i will show this is a div
256:08 - okay
256:12 - so this district to call md and then due
256:14 - to ends to row
256:16 - okay if this error then you display this
256:18 - row
256:20 - else on the else part what we can do
256:25 - if class is equal to rho
256:29 - okay good
256:32 - then again i'll define
256:36 - oh sorry sorry sorry
256:39 - dave class is equal to call
256:42 - md6 yes
256:46 - now i would close this there
256:49 - okay this is a div
256:52 - now this is a div to the call and
256:54 - another dip to the row
256:58 - and this is the container
257:01 - this uh this should not be container
257:03 - fluid
257:05 - yes now i'll move to the page
257:09 - yeah now this is absolutely working fine
257:10 - now found one divided by zero so you
257:13 - quickly test the application
257:16 - one divided by zero error
257:17 - yeah down the front end is good uh and
257:20 - quickly two plus three is equal to five
257:23 - yeah 2 plus 3 is equal to 5
257:25 - and this is on the left okay let me
257:28 - check
257:29 - let me check
257:31 - this is called md6
257:33 - if error
257:35 - okay
257:37 - okay
257:40 - let me move this
257:49 - okay let me click on inspect
257:52 - inspect i i am this call md6
257:56 - margin
257:57 - 0 auto
257:59 - okay i'll let me change the view
258:04 - uh
258:06 - edit
258:07 - i'll add a laptop screen
258:14 - yeah this is working fine this is now
258:15 - this is i'm inside the row call is what
258:17 - md6
258:19 - so style is equal to margin
258:21 - zero auto
258:25 - yes
258:26 - okay okay okay yes
258:28 - style is go to margin
258:30 - zero
258:32 - auto so
258:35 - yes uh now this should work okay real
258:37 - quickly two plus three is equal to five
258:39 - or we'll type uh two plus three star
258:42 - four
258:43 - fourteen are good now one divided by
258:45 - zero
258:46 - error so basically you need to tackle
258:48 - errors when the because now we are
258:50 - completely done with the application
258:53 - here you can see like we get a error on
258:55 - evaluating on when we put 0 as an input
258:58 - let me type
259:00 - 1 minus 1
259:01 - uh this should
259:02 - return zero now absolutely absolutely
259:04 - fine so let me try some random words
259:07 - like something something as random and
259:10 - what does it show so that shows an error
259:12 - as well okay on random input so
259:14 - basically you can put numbers like uh
259:17 - you can could quickly put numbers then
259:19 - reset it okay then again put numbers
259:22 - then submit here then 14 then one zero
259:25 - it will show error yeah on random text
259:29 - on random text it would also show error
259:31 - so guys we're completely done with our
259:33 - application so thank you guys thank you
259:35 - so much i'll catch you up in the next
259:37 - lecture so basically the error on the
259:39 - front and part how i resolved it and
259:41 - quickly if there was an error so i made
259:44 - a new row particular row for that
259:47 - okay so it and the call md6 was on the
259:50 - margin zero order center and if there is
259:52 - no error so i would return the answer
259:55 - and in the same way
259:57 - what you can do you can simply add
260:01 - q
260:03 - is equal to this so basically this would
260:05 - return the query as well so
260:08 - so we can do two plus three
260:11 - so here it says 2 plus 3 is equal to
260:14 - 5 so so this is absolutely correct so
260:17 - yeah now this looks application looks
260:19 - pretty good so you can try out the front
260:22 - end part so just just try to we'll also
260:25 - try the responsive nature of this app as
260:27 - well so i have now control shift i
260:30 - uh okay so basically i will type
260:32 - something
260:34 - to
260:34 - double star three
260:37 - okay
260:38 - so two double star is equal to eight
260:40 - yeah so guys this is absolutely fine so
260:42 - thank you guys thank you so much i'll
260:44 - catch up in the next lecture so i have
260:45 - to uh added some exponential as modulus
260:48 - operator you can uh try out some modulus
260:50 - operators at 10 mod 5
260:53 - 10 mod 5 so this should be zero
260:56 - yes so thank you guys thank you so much
260:58 - i'll catch you in the next lecture so
261:00 - thank you so much
261:02 - hello everyone so like uh hello everyone
261:04 - i saw an error in this application like
261:06 - when we go to the uh index page without
261:09 - any query submission i see equal to sign
261:11 - so actually this equal to sign is
261:13 - basically to do to this else part so we
261:15 - need to create a just a little bit
261:17 - different logic so whatever we can do
261:20 - we can do we will move to use dot py
261:22 - file and here we can do result
261:26 - result
261:27 - is equal to true
261:30 - okay
261:31 - yes and i'll quickly copy this and in
261:33 - this part i would do result if if the
261:36 - error error is false and result is
261:38 - should true every error is true then
261:40 - result should be false okay good now i
261:43 - would move to my index.html page so i
261:46 - would
261:47 - if this condition with an ender
261:52 - and
261:53 - i would give this else part as a result
261:56 - okay
261:57 - so this is this looks good and this
261:59 - would avoid our error so i'll quickly
262:01 - test my application when i move to the
262:03 - index page
262:05 - yes now the equal to sign has gone now i
262:07 - would query two plus three rule to
262:09 - submit yes five is good then one plus
262:12 - zero then error should be there yeah but
262:15 - when i move to the index page
262:18 - when i move to the index page so there
262:20 - is no equal to sign so so this is the
262:21 - github link of our repository you can
262:23 - move to this project download this
262:25 - project uh
262:27 - i have defined below the instructions
262:28 - and i would be updating the instructions
262:30 - soon because now we are going to working
262:32 - on a new app and basically we are going
262:34 - to work in the same repository so
262:36 - basically i wanted to do this because we
262:38 - are going to make inside a single django
262:40 - project we are basically going to
262:42 - develop two apps so i would define few
262:45 - changes how you can use two apps inside
262:47 - a
262:48 - single project so main motive would be
262:50 - because we would be using the same
262:52 - template and i would tell you how you
262:53 - can use the same template and defining
262:56 - the other backend part so this how this
262:59 - way how you can use the basic template
263:01 - which we used in a previous app in this
263:03 - app as well and i would defining which
263:06 - changes you have to do so this would
263:07 - help you out so let's get started so
263:09 - basically in this we are going to design
263:11 - a django voting app so in this app we
263:15 - have a a list of programming uh
263:17 - programming languages which the user uh
263:20 - in in that we will provide real-time
263:23 - suggestions under the search like
263:25 - suppose any user uh
263:28 - types the letter j then we would provide
263:30 - them suggestions the programming
263:31 - languages starting with the letter j
263:33 - such as java or javascript or same in
263:36 - the if we type p then we would have p
263:38 - is like perl programming programming
263:41 - language python so in this like c or c
263:44 - stand for c and c plus plus so we will
263:46 - be providing suggestions like in the p
263:48 - we could also define a suggestion under
263:50 - php as well
263:52 - so like in this tutorial we are going to
263:53 - create a voting app we are going to
263:55 - start with this and we vote for each
263:57 - programming language then we use a
263:58 - progress bar that how many words they
264:01 - have got and we then would return or
264:04 - render a progress uh progress bar on the
264:07 - front end part and we would update the
264:08 - vote for each language if we vote for
264:11 - more okay
264:12 - so let's get started with this
264:14 - so basically
264:15 - uh this is my server so the server has
264:18 - started okay because i have so basically
264:21 - i would define some few changes like
264:24 - this is my the settings dot py file so
264:27 - uh earlier it was template slash
264:28 - calculator app but now it is voting app
264:31 - because we would be
264:33 - referring to the templates folder so i
264:35 - would move to the templates folder yeah
264:37 - this is the templates folder so it it
264:39 - has two folders the one is for
264:41 - calculator app and another is for voting
264:43 - app so we are referring to the voting
264:46 - app folder inside the templates so uh
264:49 - for the earlier app you used to refer
264:50 - calculator apps so you need to define a
264:52 - change calculator app if you are using
264:54 - calculator app and then if you are using
264:56 - voting app you need to win voting app so
264:58 - basically what we did
265:00 - we created the same html page okay now
265:04 - then for calculator app
265:06 - if you want to use then we need to
265:07 - define template slash calculator app if
265:11 - we are going to run the calculator app
265:13 - okay and if you want to run the voting
265:15 - app we need to define template slash
265:17 - voting app
265:18 - okay so this is the main uh change
265:21 - we need to define so the please take
265:23 - care about it and i will define this in
265:25 - in the repository instructions as well
265:27 - okay
265:27 - and then next okay now we will move to
265:30 - url dot py file okay uh let me do one
265:33 - thing urs dot py file of django projects
265:37 - okay so basically uh
265:40 - when i do
265:42 - okay
265:43 - uh
265:44 - so
265:44 - this is calculator app so include
265:46 - calculator app dot urls so for voting
265:49 - app we will do voting app include voting
265:52 - app dot url this is very simple okay so
265:55 - basically in the same way i'll give give
265:56 - a quick overview for templates we have
265:58 - templates folder
266:00 - let me again show you the templates
266:02 - folder yes templates for calculator app
266:04 - templates for voting app then url py
266:06 - file for calculator app as well and
266:08 - voting app as well okay
266:10 - now uh we will move to urls.py file so
266:14 - basically i'm clicking on new rf.p wifi
266:16 - or a voting app okay so this is very
266:18 - similar we have done at this as earlier
266:20 - as well so
266:22 - like we have uh like url pattern the
266:25 - path use dot index name is equal to
266:26 - index now if i go to views dot py file
266:29 - so i'll move to the view dot py file of
266:31 - voting app okay
266:33 - so you uh uh this is a back end logic
266:36 - would be also working on okay uh so
266:38 - before this what we can do so this is
266:41 - the index so we can uh
266:44 - what we can do
266:47 - we need to generate uh let me do one
266:49 - thing or we can do what we can do uh
266:51 - i'll run this server
266:53 - okay
266:57 - and then i'll move to voting
267:01 - ah
267:04 - yeah here you can see
267:06 - uh like this is django voting app okay
267:10 - and like i've defined food changes i'll
267:12 - move to index.html file so basically
267:15 - when i'm moving to index.html file i'm
267:17 - moving to the voting app okay so
267:20 - this looks fine okay so i change the
267:22 - title django voting app i'll define as
267:25 - django voting app
267:29 - yango voting app
267:30 - uh django voting app good good about
267:32 - instructions i'll move to the about an
267:34 - instructions so pick your favorite
267:35 - language okay
267:38 - so you need to define in this and pick
267:39 - your favorite
267:40 - favorite language and what okay
267:43 - and what
267:45 - okay this is very simple then select
267:46 - your language and see result this is the
267:49 - basic instructions okay in the number
267:51 - i've defined some changes you can see
267:54 - like in the nav class navbar dark and
267:56 - background is dark so here you can see
267:58 - this navbar dark reference to this and
268:00 - background diagram should this color so
268:02 - here you can see the
268:04 - number has been dark in color so to see
268:06 - the response in nature we can press ctrl
268:09 - shift i
268:10 - okay
268:11 - okay so here you can see it's good okay
268:13 - we have the navbar so it's working fine
268:16 - so in the about pick your favorite
268:17 - language select your language and see
268:19 - results okay
268:20 - so in this next like uh so basically uh
268:24 - we are going to define uh and one thing
268:27 - we need to make sure that uh that in the
268:29 - form
268:31 - uh i had defined uh the image like i'm
268:34 - referring to the static folder okay let
268:36 - me go to the static folder this is
268:37 - main.jpg okay and this is main2.jpg okay
268:42 - so
268:44 - so basically in main.jpg this was
268:46 - referring to the calculator app
268:48 - and this is main2.jpg and this is
268:50 - referring to this coding background
268:52 - structure okay so basically so like uh
268:56 - and the good part is that index.html
268:59 - still exists
269:00 - so this is the index.html of calculator
269:03 - app so this is a
269:05 - this is index.html of calculator app and
269:07 - this is the all logic we had written f
269:09 - error if and result okay and here you
269:12 - can see here you can see the navbar is
269:14 - equal to i can show you one thing they
269:17 - navbar light and navbar background is
269:19 - light that this is for the calculator
269:20 - app okay and like in this uh
269:23 - uh
269:24 - even image we had made also that was
269:27 - main.jpg so here i can try to show the
269:31 - similarities between that under the same
269:33 - django project we are making two apps
269:35 - and basically i wanted to show you one
269:37 - thing that we are using the same
269:38 - template for both the apps without uh
269:40 - writing the code as much and just making
269:43 - the modification necessaries we need
269:45 - okay so this is also good so basically
269:48 - just a quick hint like if you want to
269:50 - use calculator app you need to define
269:52 - template slash calculator app here okay
269:54 - so very quick overview the templates
269:56 - calculator app is there and the same way
269:59 - templates voting app is there then both
270:01 - of them have index.html index.html one
270:04 - has a different image one has a another
270:06 - image and background dark and background
270:08 - light for different respective nav bars
270:10 - what i have defined so in order to run
270:12 - the respective ad what you need to do uh
270:15 - you need to define template slash
270:16 - calculator app when you are going to run
270:18 - the calculator app and temperature
270:19 - starts voting up when you are going to
270:20 - run the voting app so let me very be
270:22 - very clear with this so it doesn't
270:25 - create an issue
270:26 - okay so basically what i wanted to do
270:29 - uh i want you to solve uh uh to get uh
270:33 - uh further like uh move on with the back
270:36 - end part also because
270:38 - we are going to use this ready-made
270:39 - template which will help us in the end
270:41 - time i want you to solve one coding
270:43 - problem here because this will help you
270:45 - to make a backend logic so i'll type
270:47 - control n like you have an array
270:51 - okay and it has all the elements
270:54 - uh like it can be any elements one
270:56 - two two two comma three comma three
270:59 - comma three or something like mixed
271:02 - numbers as well or like four comma four
271:05 - comma four
271:06 - okay
271:07 - okay it might not be necessary it is
271:10 - sorted i'll give this a 7 2 1 3
271:14 - 4 5
271:15 - 6 okay
271:16 - okay uh what i can do this is an array
271:19 - okay i'll copy this
271:22 - okay i'll open the page
271:26 - okay sorry sorry sorry
271:29 - i'll open the ideally yes okay so this
271:31 - is the array so what i want you to do
271:34 - like i want you to
271:36 - get the uh frequency of each element
271:41 - okay so like uh what i want to tell you
271:43 - that if i do add
271:45 - dot count
271:48 - one okay so it returns three like three
271:51 - one is three times this is a one
271:53 - this is a one this is a one so three
271:55 - times three so like but i want you to do
271:58 - like uh uh like what i want you to do
272:00 - like basically i want you to design a
272:02 - data structure in such a way because
272:05 - this uh this this is very necessary
272:07 - which sources frequency of each element
272:10 - in like a frequency of each element of
272:13 - the array it stores in itself so you
272:15 - want to just design a data structure so
272:18 - so
272:19 - i would give you a hint
272:21 - like in this tutorial what you can do
272:24 - you can define a dictionary as a data
272:26 - structure in which
272:29 - a key
272:30 - will be
272:32 - element
272:35 - element of array okay
272:37 - good and the value
272:40 - will be
272:42 - frequency
272:45 - okay so it might not be necessary that
272:48 - array should be sorted or unsorted it
272:50 - could be anything random number sorted
272:52 - and sorted that is not the case of and
272:54 - if a new element is added to the array
272:58 - you should update the frequency okay uh
273:01 - then update the frequency
273:06 - update the frequency okay so you need to
273:08 - define like uh when you traverse the
273:10 - array or till the time you can do one
273:12 - thing you can uh
273:14 - you can be like
273:15 - familiar with this or this is your array
273:18 - you need to define a data structure
273:19 - which would i'm giving you a hint that
273:21 - you need to define a dictionary
273:23 - okay dictionary okay so dictionary is
273:25 - the data structure you are going to use
273:27 - so
273:28 - so basically key will be the element of
273:30 - the arrow and value will be the
273:31 - frequency so you need to divide in such
273:33 - a way okay so you can think on this
273:36 - problem because this problem is very
273:38 - necessary for us to think on the back
273:40 - end part okay and till time what we have
273:43 - seen like uh like images being changed
273:45 - about change and information okay i'll
273:47 - update the information part here okay
273:50 - like when i click on instructions for
273:52 - instructions part i'll move to this and
273:54 - about working fine okay and
273:56 - i've changed the image as well as
273:58 - grambler so
274:00 - uh one instruction important instruction
274:02 - in order to use a calculator app you
274:04 - need to change here uh template
274:07 - calculator app and temperature uh
274:09 - template slash calculator for calculator
274:11 - app and template slash voting app for
274:12 - the voting app okay in order to run the
274:14 - respective apps okay so till now we are
274:16 - working on voting apps so we have
274:18 - defined template slash other so i'll
274:20 - catch up you in the next tutorial so
274:22 - like in the previous tutorial we were
274:24 - working on uh like uh we were going to
274:27 - make a voting app so basically i gave a
274:30 - coding problem in the end so basically
274:32 - in this we are going to solve a coding
274:33 - problem and adding list
274:35 - a list of programming languages and
274:37 - batches to our front end so we will
274:40 - check this out so just
274:42 - let's get started with this so basically
274:44 - i told you that you can work with the
274:47 - uh
274:48 - basically i gave you a
274:51 - coding problem in which i told you that
274:53 - you can create a
274:55 - like i in which i told you that you can
274:57 - find the frequency of each each each
274:59 - element in the array so let's solve that
275:02 - problem because i told you that's really
275:03 - necessary to solve the problem because
275:05 - it will help you to create a
275:06 - uh backend logic so basically let's uh
275:09 - start with this so basically i have a
275:11 - array
275:12 - so
275:13 - what you can do
275:14 - i have elements in it like let it be
275:16 - random elements
275:18 - 56 89 1 2
275:21 - 7
275:22 - 9 6 6 2 3
275:25 - 1 4 5 6
275:29 - 8 9 9 9 then 5 54 then again 56 then
275:34 - again 89 let it be a wrong array because
275:37 - it will help you to get the logic clear
275:39 - then seven
275:40 - then one again two okay so this is fine
275:43 - this is fine so uh what i need to define
275:46 - i need to find the like in the key part
275:48 - i i told you that we will be designing a
275:51 - data structure site that the key would
275:52 - be having the
275:54 - element key should be
275:56 - element
275:59 - and the value
276:02 - should be
276:04 - frequency
276:07 - frequency of element
276:10 - frequency of element so basically uh
276:13 - what i mean by frequency of element that
276:16 - in this you need to find the frequency
276:19 - of each element okay so the key should
276:22 - be element and the
276:23 - value should be frequency of of element
276:27 - present
276:29 - present
276:30 - in that array okay
276:34 - so i'll define a dictionary first so
276:37 - my dictionary
276:42 - so so i can initialize the dictionary
276:44 - with this constructor you can initialize
276:46 - any data structure let it be a list
276:50 - set
276:51 - str
276:52 - you can define any data structure like
276:54 - this so this is very helpful so this is
276:56 - a dictionary my dictionary okay then i
276:59 - would traverse the array
277:02 - for
277:03 - element
277:06 - in array
277:08 - okay
277:09 - okay if
277:11 - if
277:12 - element
277:14 - not
277:16 - in
277:17 - my dictionary okay
277:20 - dictionary
277:22 - then
277:23 - you would initialize that frequency of
277:27 - like you have found that
277:29 - element and now that is not in
277:31 - dictionary then you need to initialize
277:33 - the first
277:34 - frequency that the very first frequency
277:37 - you get that element okay okay then
277:40 - if element not in my dictionary then my
277:43 - dictionary
277:46 - my dictionary then the here the key
277:49 - would be the i told you i told you as
277:51 - earlier the key would be element
277:53 - element
277:55 - is equal to 1
277:57 - else
277:59 - else
278:00 - now as soon as you keep on getting the
278:03 - element you need to update the frequency
278:06 - my dictionary this will do plus equal to
278:08 - 1 okay this is absolutely fine for
278:11 - element and array if element not in my
278:13 - dictionary if you uh
278:15 - if you find the first occurrence of that
278:17 - element you need to initialize the
278:18 - frequency with one
278:20 - as my dictionary of element plus is
278:22 - equal to 1 uh in this
278:26 - i would add a comment okay
278:28 - first
278:30 - occurrence
278:32 - initialize
278:36 - frequency with
278:39 - one
278:41 - okay
278:42 - else
278:43 - for every
278:46 - next
278:48 - occurrence
278:51 - update
278:52 - frequency
278:55 - i hope this is very clear for every next
278:57 - occurrence update frequency okay so this
278:59 - is good
279:00 - now
279:01 - now what you need to define
279:04 - then module define then i will define
279:06 - print
279:08 - star
279:09 - array so this is a very short notation
279:11 - by
279:12 - print star and you can uh
279:14 - print the elements of the array space
279:16 - separated okay
279:19 - and then
279:21 - oh all i'll do one thing i'll do
279:24 - one thing
279:26 - one thing i'll do one thing for to have
279:28 - a better view
279:31 - i'll print
279:33 - dot sort as well
279:35 - harry dot sword okay good
279:37 - and print
279:38 - my dictionary
279:42 - i hope there is no error so i can run
279:45 - this
279:47 - okay and now this is awesome okay uh let
279:50 - me do one thing uh let me do one thing i
279:53 - uh check
279:54 - let me do one thing i'll print the array
279:56 - again but this time i'll do added.sort
280:00 - okay so what you can do
280:03 - so i'll press f5 so here you can see
280:06 - so i have my array here
280:10 - okay
280:11 - and now
280:14 - sorry for the interruption okay okay
280:16 - there's some issue yeah no it's fine
280:19 - okay so this was our array so then when
280:23 - i sorted the array it looked this so
280:25 - like here you can see the one has
280:26 - frequency three so here you can see the
280:28 - one has frequency
280:30 - three okay good
280:32 - okay now this is this is fine one has
280:34 - frequency three then two has frequency
280:37 - three times so let me check two two
280:39 - where is it two two has frequency three
280:42 - good let me take a very random element
280:45 - so here it is nine so let me check the
280:47 - frequency of nine nine one time
280:50 - then second time third time fourth time
280:54 - okay i hope nine is four times okay now
280:57 - when i see the sorted list because i
280:59 - have defined a sorted list in order that
281:00 - you grab easily nine nine nine nine nine
281:04 - the nine is four times so
281:06 - nine is occurring four times so this is
281:08 - fine okay so this was our many main very
281:11 - good backend logic this is the very same
281:13 - background logic we are going to do when
281:15 - we are working uh on the backend part so
281:18 - basically i told you that here you can
281:20 - take any array okay and uh you can
281:23 - define the frequency like five is
281:24 - occurring two times yes five is actually
281:26 - two here one is this time five
281:28 - and five that means she is checking
281:30 - sorted array yes five is offering two
281:32 - times yeah five is two times so this was
281:34 - our rf
281:35 - data structure we made to in which the
281:37 - frequency is updated
281:40 - and we store the frequency so in like
281:42 - here we have this time we have used the
281:44 - area of integer next time we are using
281:45 - an array of programming languages okay
281:48 - so this would help us to make a backend
281:50 - part for logic so what we can do
281:53 - so i have moved to my server so we are
281:55 - done with the coding problem i hope you
281:57 - all all have got this
281:59 - so basically uh i hope you can change
282:01 - any values in the array okay and uh try
282:05 - out uh try this out okay this will
282:07 - basically help you out okay so so good
282:10 - so
282:11 - so
282:12 - uh then again we can see any answer then
282:15 - suppose like we can look for uh 89 which
282:18 - is occurring twice yeah 89 here it is
282:20 - twice occurring twice and we can see in
282:23 - the uh
282:24 - original rs89 and again so now
282:26 - absolutely works fine so let's get to
282:28 - our server
282:29 - so i'll do python manage.py run server
282:32 - yes
282:33 - okay so i'll move to my voting app
282:36 - i'll refresh this page okay so what we
282:40 - can do uh
282:42 - we can add batches here so here you can
282:44 - see there are basically different kind
282:46 - of batches so one is batch patch primary
282:48 - one you can use any batches so let me do
282:51 - this one
282:52 - batch batch success
282:54 - okay so i'll move to the about the
282:57 - section index.html
282:59 - so basically uh the i'll close the
283:02 - uh okay index.html audio was for
283:03 - calculator now now this is the voting
283:05 - app so let me be very clear with this so
283:08 - we can define
283:09 - and here what you can do
283:12 - instead of class display flow display
283:14 - for four you can
283:16 - paste this
283:18 - and go to our
283:21 - yeah here you can see this is working
283:23 - fine
283:24 - and let me do some editing here
283:28 - let me do a text is equal to margin
283:30 - 0
283:41 - so here you can see the about has been
283:44 - i will try to make it a more intuitive
283:47 - so here you can tell what i can do what
283:50 - i'll do i'll move to style part and
283:53 - display
283:55 - is equal to block
283:57 - okay
283:58 - and i'll add some font size
284:01 - on size is equal to
284:03 - two ram
284:05 - i think this should be good enough
284:08 - yes good yeah here i've added about
284:11 - so so here you can see even in our app
284:14 - you can see about okay in the same way i
284:16 - can use the
284:17 - uh like something very good uh any batch
284:20 - and then a color patch i can use danger
284:25 - good okay but what i need to do
284:28 - i'll define
284:31 - p classes go to
284:35 - okay select your pr
284:37 - select your language and see results so
284:39 - basically i'll display uh
284:47 - what i can do i'll quickly copy this
284:49 - instead
284:51 - and
284:52 - yeah good
284:54 - batch batch danger
284:58 - okay uh this just for the uh
285:01 - instructions i'm doing the ins this was
285:04 - instruction parts so let me go to the
285:06 - page
285:07 - yeah awesome pretty good so this is like
285:10 - about instructions so we are getting uh
285:12 - giving some more
285:13 - intuitive ui design to our app so
285:16 - basically and one thing you can do when
285:19 - that i have created a list of
285:21 - programming languages i'll give it a
285:23 - name as any this is a list
285:25 - till now so i've declared this list and
285:28 - i'll next time what you can do i'll
285:30 - define this as array okay good so this
285:33 - is a very long list of programming
285:35 - languages
285:36 - and i'll render them
285:38 - okay so
285:40 - i'll quickly show you how you can render
285:41 - them my dictionary
285:46 - and this is array
285:49 - sorry array
285:53 - and
285:55 - context
285:58 - is equal to my dictionary good
286:01 - dictionary
286:02 - spelling is right so what i'll do on the
286:04 - top of the page
286:06 - just below the body i'll print this
286:09 - array
286:12 - okay
286:13 - so i'll move to my page desktop view
286:16 - control star
286:19 - okay let me check some yeah here you can
286:21 - see on the top of the page here you can
286:22 - see the array is there so next time we
286:25 - so just i wanted to show you that we can
286:26 - render this array and next we would be
286:28 - working on the uh suggestions or also
286:32 - how we can provide real-time real-time
286:34 - suggestions so we would like either we
286:36 - are going to provide on the front-end
286:38 - part or on the back-end part so we'll
286:39 - try to what we will figure it out what
286:41 - how we can provide suggestion so i've
286:43 - defined below the instructions uh but
286:45 - today i would like to make this
286:46 - instructions very clear like you can
286:48 - download or clone this project uh
286:50 - on by clicking on this button then you
286:53 - can run the command pip install minus
286:56 - requirements.txt make sure you you have
286:58 - installed python on your machine and it
287:00 - has to be added to the path okay then if
287:02 - you move to the requirement.txt file so
287:05 - here you get get this requirement these
287:08 - are very basic requirements you get it
287:10 - installed on a machine then you can then
287:12 - then what you can do then you can run
287:14 - the one python manage.py run server so
287:16 - this is the manage.py file you need to
287:18 - be in this directory to run the project
287:20 - okay good then
287:22 - basically there are two apps in this so
287:24 - basically if you want to run the
287:25 - calculator app you need to open this
287:27 - link but you need to make a simple
287:29 - change in the settings.py file i'll
287:32 - define what you need to make a change
287:34 - basically you need to go to the
287:36 - settings.pi file the django project then
287:39 - again channel project this is the
287:40 - settings.pi file
287:42 - and
287:43 - there is a template yeah templates so
287:46 - inside the templates you need to change
287:47 - this line directories or dot path dot
287:50 - join base directory template slash
287:52 - voting app if you want to use the voting
287:54 - app then or
287:56 - or calculator app that is template
287:59 - calculator app if you want to use the
288:00 - calculator app okay so this look this
288:03 - looks good so
288:04 - yeah uh so these are the instructions
288:06 - you need to do okay so calculator app a
288:09 - voting app okay basically you need to
288:11 - change that line according to this then
288:14 - you can start with that okay
288:17 - now uh today in today's tutorial what we
288:19 - are going to learn so basically we are
288:22 - going to adding uh adding suggestions
288:24 - during the search bar
288:25 - okay in this tutorial we will add list
288:28 - of programming language as suggestions a
288:31 - list of programming languages
288:33 - okay as suggestions to a search bar we
288:36 - will be we will implement this both
288:38 - statically and dynamically so in today's
288:40 - tutorial we are going to first uh do it
288:42 - statically then we will also do it
288:45 - dynamically also so so i'll show you the
288:48 - difference why we need to uh
288:50 - do this okay so this is the views dot py
288:53 - file make sure you uh
288:56 - get this line from django.http
288:58 - import jsonresponse or http response
289:01 - okay so
289:03 - let me define a function get query
289:06 - define get query
289:10 - which takes a request as a parameter
289:13 - request
289:15 - as a parameter
289:16 - then
289:17 - q is equal to request
289:20 - dot get
289:26 - request dot get yes
289:28 - then return
289:31 - http response of cue
289:34 - so
289:35 - i have left this blank okay so what you
289:37 - need to do
289:39 - what you need to do
289:40 - you can move to the urge.py file
289:44 - and define path
289:47 - is equal to
289:48 - get
289:49 - query
289:51 - then
289:52 - view start
289:54 - get query
289:56 - and the name is equal to
289:57 - get
289:58 - query
290:00 - so basically you will define get query
290:03 - okay good
290:04 - so now this this is our form
290:07 - okay so we have not defined the action
290:10 - we can define the action
290:13 - percent url
290:15 - get
290:16 - query so this looks good
290:19 - so
290:21 - yes good so
290:23 - uh
290:24 - yeah now this is our form so basically
290:26 - we need to find suggestions during the
290:28 - search so we'll define a list first we
290:31 - will find we will do it a statically so
290:33 - i uh tell you how uh
290:35 - how this works what the what is the
290:37 - function then uh then we will implement
290:40 - this dynamically so i'll tell you the
290:42 - difference why we should what is the
290:44 - difference of doing it statistically and
290:46 - dynamically so
290:48 - yeah here you can define a data list
290:50 - okay
290:51 - and you can give id
290:54 - as you go to languages
290:57 - i hope this is fine
290:59 - uh you can define option
291:02 - value
291:03 - is equal to python
291:05 - okay
291:06 - uh
291:07 - okay you can have a option uh uh for the
291:10 - simplicity i
291:12 - have a sing right now i'll do this way
291:15 - option value is equal to python
291:17 - then
291:18 - what we can do
291:20 - option
291:23 - values hold python uh
291:25 - we can do
291:27 - php as well
291:29 - good
291:30 - right
291:31 - then
291:33 - uh we can do option option values go to
291:35 - php then option value is equal to perl
291:39 - good
291:41 - then
291:42 - option value is going to pull then
291:44 - optional values will do let me have a
291:45 - programming
291:48 - okay good
291:50 - uh then
291:52 - i'll do one thing option value is equal
291:54 - to c
291:58 - c
292:00 - good
292:03 - then in the same way i'll do c plus plus
292:06 - okay
292:08 - then you can click on format document so
292:11 - you can right click on format document
292:12 - to get the html page on the right track
292:15 - okay then
292:16 - so this is the option value is equal to
292:18 - c plus plus
292:20 - uh
292:21 - and then
292:23 - i'll show you one thing let me type one
292:25 - more option as well the java javascript
292:33 - javascript you're good
292:35 - and one more option i'll do that is java
292:40 - yeah good so format document yeah good
292:44 - so basically
292:45 - this is the data list we have to define
292:47 - but we need to track this data list to
292:50 - an input so we'll define
292:52 - input
292:53 - list
292:56 - is equal to languages
292:59 - okay
293:01 - so basically yeah and we can define
293:05 - class is equal to form
293:09 - control so this is a bootstrap class
293:12 - okay and i'll refresh this page
293:14 - yeah good so this looks good and we can
293:18 - do what we can do
293:22 - let me try this style
293:25 - the style works on this let me do one in
293:28 - bottom one ram
293:32 - let me check if the style bottom
293:35 - one ram
293:40 - yes the the yes the style tags works on
293:42 - the input okay so we have a list here
293:44 - let me type j here so as soon as i type
293:47 - j i get javascript and java then uh i'll
293:51 - i'll let the caps lock on let me have a
293:53 - capsule then here this works fine
293:55 - j-a-v-a oh s
293:57 - okay as usual
293:59 - as i type j-a-v-a-s javascript is there
294:02 - but java isn't there
294:03 - okay so actually this data list works on
294:07 - in all the ways like a
294:09 - prefix suffix of substring match so let
294:11 - me type p here
294:13 - here i have got python php perl
294:16 - programming but you must be thinking why
294:17 - i've got a javascript uh this makes a
294:19 - substring match okay so let me type
294:22 - pr i get programming ph php py python
294:28 - okay because there was a single p in the
294:30 - end so it makes a substring match okay
294:32 - so to make this clear what i can do i'll
294:35 - show you one example okay let me do with
294:37 - c
294:38 - c c plus plus okay let me do this with
294:40 - the small c
294:42 - the small c matches both the c c plus
294:44 - plus okay javascript as well okay so
294:46 - this looks good okay
294:49 - uh
294:50 - so
294:51 - uh if the user want to select uh if it
294:54 - doesn't if they don't write anything
294:57 - they can simply click on this drop down
294:59 - arrow they'll get all the options here
295:01 - okay so let me give you one example
295:04 - option value is equal to
295:10 - django python
295:14 - python yes okay
295:18 - and
295:25 - one option i would give you
295:28 - machine learning
295:33 - okay
295:34 - so this is using python as well so i'll
295:37 - format the document
295:39 - and i'll refresh this page
295:41 - so i'll type python
295:43 - so okay you can see here the python is
295:45 - in starting and here it is in the end so
295:48 - it matches the sub uh
295:50 - substring prefix of suffix
295:52 - so here you can see the python django
295:54 - python machine learning python okay so
295:56 - i'll click on python and click submit
295:59 - okay
296:00 - uh
296:01 - i have not defined a get query voting
296:03 - app get query
296:05 - so okay good
296:07 - so here
296:10 - you need to define
296:14 - name is equal to
296:16 - languages
296:23 - okay so i'll do python
296:26 - yes language is equal to python
296:28 - then
296:31 - i'll define languages here
296:35 - so this should work now this should work
296:36 - i hope
296:38 - yes now it works perfectly fine so i
296:40 - have returned a http response
296:42 - so this is the github github link of our
296:44 - repository you can clone or download
296:47 - this project i have defined below the
296:48 - instructions how you can run the project
296:50 - i'll quickly give you overview uh you
296:53 - can move inside this directory django
296:55 - projects
296:57 - uh then
296:58 - what you can do you can pip install
297:00 - minus requirements.txt
297:02 - and then you can run the server by
297:04 - python manage dot py file run server
297:06 - then one thing you need to make sure
297:08 - that inside django projects there is a
297:11 - settings.pi file
297:13 - and you need to take care of this line
297:15 - i'll show you yes this os dot part dot
297:18 - os dot path dot join base directly page
297:22 - directory templates slash voting app for
297:25 - the voting app and if you want to run
297:26 - the calculator app you need to type
297:28 - templates slash calculator app okay so
297:31 - this like uh this line need to be taken
297:34 - care of and i have defined both i have
297:37 - defined these instructions
297:38 - uh on the on the uh
297:41 - uh here as well so you can have a look
297:44 - okay so let's get started with the
297:46 - today's tutorial so like it till the
297:48 - previous tutorial uh we made a list of
297:51 - languages but that was starting but now
297:54 - we are going to make it dynamic so very
297:57 - first thing we are going to do we will
297:58 - move to our views.pi file
298:01 - and uh here you can see i have made this
298:04 - array global so that this array can be
298:07 - rendered at any context so
298:11 - we will also do that so uh first what we
298:14 - are trying to do that we have array of
298:16 - languages and indus index functions
298:20 - renders the array with the name array as
298:22 - well okay
298:23 - so we'll move to
298:24 - index.html
298:27 - and there we see that when we move to
298:30 - our index.html we have input list is
298:32 - equal to languages and data list id is
298:35 - equal to languages so that's perfectly
298:37 - fine so what we are going to do we are
298:39 - going to use jinja template so i'll show
298:42 - you one thing
298:44 - for
298:47 - each language
298:52 - in array
298:55 - okay
298:56 - then we would end this for loop
299:00 - and
299:02 - for
299:04 - okay
299:05 - uh the what we are going to define a
299:08 - option
299:09 - option
299:11 - value
299:12 - is equal to
299:14 - each
299:16 - language
299:18 - language
299:19 - yeah
299:22 - good
299:23 - so i told you that we take only a single
299:26 - option tag
299:28 - okay
299:29 - then we'll move to our use dot py file
299:32 - and then here we would return an http
299:34 - response
299:37 - of cube
299:38 - good
299:39 - so let me check
299:41 - uh uh
299:43 - now we move to our page
299:45 - then we type control shift r
299:48 - okay uh
299:51 - we would move to the index page
299:54 - yeah this is the index page so yeah here
299:57 - you can see that we have a list of
299:59 - programming languages
300:01 - good and we
300:03 - take anyone like let's suppose we take
300:05 - python
300:07 - and then we submit here we get a http
300:09 - response of python so that's perfectly
300:12 - fine so what we can do
300:14 - the uh so this works pretty fine so we
300:17 - can test for any one one more language
300:19 - let me see
300:22 - okay
300:24 - okay let me see
300:29 - c plus plus okay
300:32 - good so c plus plus also works fine
300:35 - okay and let me do one thing
300:38 - when i type p i get php per delphi we
300:42 - already discussed how this search engine
300:43 - works so uh php good
300:46 - so this even works okay so
300:49 - till now we were trying to get the http
300:51 - response uh but now we can do one thing
300:54 - what we can do we can make a uh we can
300:57 - what we can do we want to store the each
301:00 - count of the
301:01 - what we do
301:02 - so
301:03 - what we can do
301:05 - we can make a
301:06 - global count
301:07 - then we can render that global count uh
301:10 - dictionary that global account is a data
301:13 - structure i already will discuss that
301:15 - part in the coding question also as well
301:17 - so i would quickly given a
301:20 - overview how this would work
301:22 - so let me define global count
301:30 - uh this was going to be a dictionary
301:32 - data structure
301:34 - okay
301:35 - so
301:36 - what i'm trying to do
301:38 - so this this is very uh this is very
301:40 - this works perfectly fine okay one thing
301:43 - i would like to show you before i
301:45 - proceed
301:46 - that uh if i press ctrl u
301:50 - so here you can see
301:52 - so the the the that
301:55 - when we used uh input list is equal to
301:57 - languages data it like data list id is
302:00 - equal to languages so
302:02 - this was the for loop we we had used
302:04 - here
302:05 - for each language and array option value
302:07 - is equal to each language and for so
302:09 - here you can see with the how with the
302:11 - with the help of dynamic uh
302:14 - template uh basically we use django
302:17 - template so uh so what we used uh we got
302:21 - a list of option values
302:23 - so this is perfectly fine so here you
302:26 - can see that with the help of a single
302:27 - follow we will be able to generate a
302:30 - much more
302:31 - better way of generating the option
302:33 - values okay
302:34 - so this way we could generate them
302:36 - dynamically okay so what we can do now
302:39 - we will move to the views dot pdf file
302:42 - so global count is related to dictionary
302:44 - so if
302:46 - we will make if condition if q in
302:50 - global count
302:53 - then global count of q
302:57 - is equal to global count of
302:59 - q
303:00 - plus
303:02 - 1
303:03 - okay
303:05 - else
303:07 - uh if if the queue is already in global
303:10 - round then global count of q is equal to
303:12 - global count of q plus one
303:14 - else for the first occurrence okay
303:17 - so we already also discussed this in the
303:18 - coding question
303:20 - the way we solved it or solved it
303:22 - first occurrence
303:24 - okay
303:25 - so
303:27 - so this was this for the first
303:28 - occurrence then global count of q
303:32 - should be initialized with one
303:34 - good so if it's already already there
303:37 - then we plus increment the value of the
303:40 - of the vote else
303:42 - we what we do we initialize for the
303:44 - first time we initialize it for
303:46 - for
303:48 - one okay so this is very good
303:50 - so
303:51 - let me do one thing i'll move to the
303:52 - index.html
303:54 - and uh here
303:57 - what we can do
304:00 - uh we can print this
304:02 - till now yeah uh okay okay but we need
304:05 - to do one thing
304:06 - okay uh what we need to do
304:09 - for q in global count global count of q
304:11 - is equal to lower count of q plus one s
304:13 - for the first occurrence global count of
304:15 - q is equal to one okay so here you knew
304:17 - that we are working for the first acres
304:19 - and
304:21 - if
304:22 - already
304:25 - exist
304:28 - then
304:30 - increment the value
304:35 - if already exist then increment the
304:37 - value okay and this was the first
304:38 - occurrence okay
304:40 - so
304:41 - what we can do
304:43 - uh we'll create a my dictionary
304:47 - so array would be the array
304:51 - and
304:52 - global count
304:55 - global count would be the
304:57 - global count
304:59 - okay good
305:00 - so
305:02 - so then return
305:05 - we're going to render this way in the
305:06 - same way quite quickly what we are going
305:09 - to do return
305:11 - render
305:14 - request
305:18 - index.html
305:21 - so this is index.html we are going to
305:23 - render
305:25 - and the text
305:28 - is equal to my
305:29 - dictionary okay
305:31 - and here
305:34 - now we have already rendered this global
305:37 - count
305:39 - so i hope this should work now fine
305:41 - pretty fine
305:42 - so i would refresh this page
305:46 - so let me do
305:48 - a single vote
305:50 - so let me choose php
305:53 - so here you can see the
305:55 - dictionary has a one count of php so let
305:58 - me vote for php again
306:00 - so we are going to test this yes the
306:02 - quote found this two
306:04 - okay let me check any other languages
306:07 - so python is there
306:09 - yes python now php is two python one so
306:12 - let me do uh
306:14 - another ruby
306:16 - yes five php two python one ruby one
306:19 - so
306:20 - uh in the same way c plus plus
306:23 - yes good absolutely fine then then uh c
306:28 - yes good so uh here you can uh let me do
306:31 - uh then again php so it should be three
306:34 - now yeah now it's absolutely three okay
306:37 - so uh this is but this uh we are uh i'll
306:42 - give quickly give an overview of this so
306:44 - for the first reference
306:46 - we used to initialize with one then we
306:48 - would increment the value okay
306:50 - so this is this works perfectly fine but
306:53 - we are noticing that we are only
306:56 - printing the raw dictionary here but
306:58 - next time we would add try to add for
307:00 - progress bar with the table so i would
307:02 - open my project so till now we had made
307:05 - uh the
307:07 - search bar with suggestions dynamically
307:10 - then we used to submit the uh option
307:12 - value
307:13 - and then we used to store the results in
307:16 - the global global dictionary
307:18 - so this is the global dictionary we have
307:20 - defined here
307:21 - and uh i can have a quick overview of
307:25 - this
307:26 - so
307:27 - here you can see this is our nav bar
307:30 - so what we can do
307:32 - i'll define a global dictionary here
307:35 - global
307:38 - account
307:39 - yes so here it is global count
307:42 - so when i run my project i'll refresh
307:44 - this page
307:46 - and let me check this oh my server isn't
307:48 - running so i'll start my server file
307:51 - then manage.py run server
307:53 - i'll refresh this page
307:57 - so here you can see my c language has
307:59 - one vote
308:00 - then
308:01 - pearl uh uh uh like php
308:06 - here it has one word
308:07 - then
308:09 - python
308:10 - onward okay
308:12 - in the same way
308:13 - i'll give sql
308:16 - one word then
308:18 - i'll give go to an sql another word
308:20 - so here it is two words so in the same
308:23 - way we can keep on going with the server
308:25 - so this is python i'll submit weather
308:29 - so here it is two words
308:31 - so uh this
308:33 - so this works absolutely fine so the
308:36 - next part we are going to do is add
308:38 - tables with progress bar so basically
308:41 - what we are going to cover in this
308:42 - tutorial i show you here
308:44 - so we are going to add uh add adding a
308:46 - table with progress bar now we are going
308:49 - to render the backend data to the front
308:51 - end with a table and a progress bar for
308:53 - every language we will add a progress
308:55 - bar as a measure of count of vote so the
308:58 - progress bar is going to show the
309:00 - measure of count of vote so
309:03 - like the key
309:05 - will have a table
309:06 - so then the key of the dictionary would
309:09 - be the
309:10 - like the name of the language and the
309:12 - value would be in terms of the progress
309:13 - bar so let's get started with this
309:17 - so
309:18 - in the nav bar the first thing we are
309:20 - going to do is
309:22 - we are going to put a li
309:25 - class
309:26 - is equal to nav
309:28 - item
309:30 - okay
309:31 - and
309:32 - here
309:33 - anchor class
309:36 - is equal to nav
309:38 - link
309:42 - and uh what what you're going to define
309:45 - result
309:47 - okay
309:48 - and
309:49 - we are going to define hrf tag
309:52 - refresh back to the with hash result
309:55 - okay
309:56 - so we will define a result block below
310:00 - so this is the
310:02 - about tag
310:03 - and
310:04 - and here you can see
310:06 - uh you can also add hr tag here
310:10 - which was missing
310:13 - okay
310:13 - now
310:15 - what we are going to do this is a row
310:18 - okay
310:19 - so we have to define
310:21 - in the same way
310:23 - we have to define and this is a call md6
310:26 - okay so in the same we have to define
310:28 - this so what we can do
310:31 - so we can do in the same way div
310:34 - class is equal to row
310:38 - and then the
310:40 - class is going to call
310:43 - md
310:44 - uh this time i would sense it to the
310:46 - table so i would define call md 12.
310:50 - and now what you can do so we have a div
310:54 - of clock class call md12
310:56 - so
310:57 - other things
310:58 - can be same
311:00 - so
311:01 - i'll move copy this and quickly paste it
311:04 - here and id will be
311:06 - result
311:08 - and name will be resolved
311:13 - so and this would be resolved
311:17 - okay
311:19 - and
311:21 - okay
311:22 - so
311:24 - what we can type here we can type here
311:27 - result
311:28 - in terms of
311:30 - progress bar okay so
311:32 - result table
311:34 - so
311:35 - uh
311:36 - so
311:37 - so let me check let's first check this
311:39 - if this
311:42 - so here you can see here we have a
311:44 - result table so okay and we'll give it a
311:46 - different color
311:49 - and this is bad bad success so we'll
311:51 - define batch warning
311:55 - okay
311:57 - so yeah now it absolutely works fine and
312:00 - we would give a style equal to
312:03 - uh we can give
312:06 - style is equal to margin
312:09 - top
312:10 - of one ramp
312:13 - so we can give a margin top of one ramp
312:16 - so yeah now this looks perfectly fine so
312:19 - basically what i wanted to show you that
312:21 - result is table is going to be a big one
312:23 - so we will add a responsive table so we
312:26 - can we would also work on this or maybe
312:28 - okay we can do one thing
312:30 - let this be of six column
312:36 - and we have to define this in the center
312:40 - and you can copy the settings this
312:44 - settings so that would work fine
312:48 - so this would give a margin top ramp and
312:50 - this would align in the center as well
312:53 - okay then there is some issue
312:57 - okay
313:01 - style okay this should be in the column
313:03 - okay sorry
313:04 - this should go in the column then i
313:06 - would now this looks absolutely works
313:08 - fine
313:09 - so what we are going to do so first we
313:11 - are going to uh
313:13 - render the dictionary to the front end
313:15 - part so i will show you how you can do
313:17 - this
313:17 - so this is a dictionary
313:19 - so
313:20 - what we can do
313:22 - we i would use a for loop
313:24 - for
313:27 - key
313:28 - comma value
313:31 - in
313:32 - uh global count dot items
313:35 - so basically i'm referring to both the
313:37 - item that is key and the value
313:40 - and then i would end this for loop
313:45 - by a
313:47 - percent sign
313:51 - and again a person sign
313:56 - and now i would end the for loop
313:58 - and
314:00 - for
314:02 - okay percent sign then
314:04 - i can do
314:07 - i'll do
314:09 - like suppose
314:11 - this is the key
314:14 - then
314:16 - value
314:19 - value
314:21 - and then i would give a break
314:24 - so here you can see in the in this way i
314:26 - can print the dictionary
314:29 - so here you can see this is my key
314:31 - dash value then key dash value then key
314:34 - dash value
314:35 - so here i've got the key value pairs
314:38 - so
314:38 - we are going to work on this so i will
314:40 - give you a first then this is these are
314:43 - the tables these are the tables which
314:44 - will in the bootstrap
314:46 - so we have a responsive table
314:49 - so i'll show you
314:51 - uh
314:55 - responsive
315:01 - yeah so here it is responsive tables so
315:04 - these are the responsive tables so
315:07 - we have this class diff classes table
315:09 - table responsive then uh this is a table
315:12 - classes
315:13 - so this gives us a responsive table
315:16 - so
315:17 - uh
315:18 - we'll i'll add a table
315:21 - let me check one
315:23 - we will add the simplest one
315:25 - so this is the simplest table we can
315:27 - have
315:29 - okay so let me check
315:31 - we have where we have to add this so
315:33 - this this is the result table
315:36 - okay
315:37 - now
315:38 - what we can do
315:42 - uh okay we can define
315:47 - okay we can define div class is equal to
315:49 - row
315:53 - then div
315:54 - class is going to call md12
315:58 - so i'm defining another grid for the
316:00 - table to keep it uh
316:03 - responsive so i've copy paste the table
316:06 - now i'll go to go back to my page
316:10 - and i'll refresh this
316:12 - so here you can see i've added the table
316:15 - and uh one class i have to add
316:18 - in the responsive table is
316:21 - this one that is this should be above
316:22 - the
316:24 - table classes rule table so i'll uh i'll
316:26 - move to the page
316:27 - so
316:29 - this is the table class root table and i
316:31 - have to add
316:33 - the
316:34 - class
316:36 - is equal to table responsive
316:40 - table
316:43 - responsive
316:46 - okay
316:47 - so this is this one i have to add
316:50 - and i have to add this div
316:53 - after the table tag
316:58 - so i have now i'll what we can do we can
317:00 - do format document
317:02 - yeah this looks absolutely fine so i
317:05 - would refresh this page
317:07 - okay so here you can see the table is
317:09 - responsive when i press ctrl shift i
317:12 - so here you can see we can scroll the
317:14 - table
317:15 - so
317:17 - if a table gets big so we can scroll the
317:19 - table so here we can see the scroll bar
317:22 - so let's get started with the tutorial
317:23 - so we basically uh first
317:27 - what we are going to do
317:28 - so
317:30 - uh first i'll clear this
317:33 - okay so
317:35 - first i'll run my server python
317:39 - manage dot py
317:42 - run server
317:44 - okay
317:45 - so basically we are we were working on
317:47 - progress bar and we were supposed to add
317:49 - progress bar so in this tutorial today
317:51 - we are going to add a dynamic progress
317:53 - bar
317:54 - uh like in the previous tutorial we had
317:56 - uh we had added the added a responsive
317:58 - table now we are going to add a progress
318:00 - bar so in this tutorial we are going to
318:02 - add a dynamic progress bar and see how
318:04 - we generate count of votes using
318:06 - progress bar so this is what we are
318:08 - going to do in this tutorial so let's
318:10 - get started with it
318:11 - so basically
318:13 - so i'll move to my server i'll run my
318:15 - server
318:17 - okay so
318:18 - uh to navigate to the voting app i'll
318:21 - type slash voting
318:24 - app okay
318:26 - so
318:27 - so here's our app so we have a result
318:29 - table
318:30 - so what we can do we will make a
318:33 - first uh first let's uh add a complete
318:36 - our table then we will move to the
318:38 - progress bar quickly
318:39 - so this is a table
318:42 - okay
318:43 - so
318:43 - uh thus we have to add a scope so
318:46 - basically we have added a table so we
318:49 - have to uh we have to add a scope so we
318:52 - shall do table header so basically we
318:55 - are first going to define the table
318:56 - header so this is the table header we
318:58 - are going to define then we are going to
319:00 - define the table body
319:02 - okay so this is uh this all is the
319:05 - header part
319:06 - and this all is the body part
319:08 - okay so let's get started so we have
319:11 - that we have to add a class called
319:14 - in the scope then we'll make the header
319:17 - okay so let's this is so uh make sure
319:21 - this is
319:22 - uh
319:23 - here you can see
319:25 - there is a single row so i'll quickly
319:26 - explain this this is table then header
319:29 - then a row now we have to define the
319:31 - order
319:32 - so this is table header is scope
319:37 - is equal to call
319:40 - then
319:41 - id or you can
319:44 - say anything hash id number so let it be
319:48 - this
319:49 - then again table head scope is equal to
319:51 - call
319:53 - then
319:54 - language
319:56 - okay
319:58 - language
320:00 - then
320:01 - what we are going to find table
320:04 - header scope is going to call
320:06 - then
320:08 - count of boards okay
320:11 - simply i'll type count here
320:13 - and uh
320:16 - so now i'll refresh the page here
320:20 - so here you can see i have a language
320:24 - number language and count so i
320:27 - press ctrl shift i
320:28 - so here you can see it is responsive in
320:30 - nature
320:31 - okay
320:32 - so i have a
320:34 - number language and
320:36 - count okay so this works fine so what we
320:40 - are going to do
320:41 - so first uh now next we are going to do
320:44 - is uh
320:46 - uh
320:47 - add data
320:49 - okay so we are going to add data row
320:51 - wise so particularly what we are going
320:53 - to do this is table row okay
320:56 - so
320:57 - so first
320:59 - is the table data
321:01 - this again a table data
321:05 - so this corresponds to the first number
321:09 - then language then this is going to
321:11 - progress bar okay
321:14 - so
321:15 - so for this for you and your so
321:17 - basically we have to add this all this
321:20 - dynamically
321:21 - so
321:22 - what i am going to do
321:24 - and for
321:26 - so basically i am going to add a for
321:28 - loop here
321:30 - so for loop percent
321:32 - for
321:33 - okay so basically i'll move to my use
321:35 - dot py file
321:37 - uh so we are rendering a
321:40 - uh index.html using global count okay so
321:44 - global count here is a dictionary type
321:45 - data structure
321:47 - so basically what we have to do for key
321:49 - comma value this could be any variable
321:52 - name for e comma value in global count
321:55 - dot items
321:57 - okay
321:58 - so this would iterate in this way that
322:01 - first you are going to have the key
322:03 - then the value in global count out items
322:06 - so this would do okay
322:08 - and now
322:09 - uh i'll do key
322:13 - then
322:14 - for this one value
322:17 - okay
322:18 - and for this i say
322:21 - for loop dot counter
322:23 - so this so i'll add for loop
322:26 - or loop
322:31 - dot counter
322:40 - so i'll refresh the page
322:43 - okay so this works fine so let me test
322:46 - this i'll make a language php
322:50 - so here you here you can see number one
322:52 - language count one okay so let me do
322:55 - java
322:57 - and i have
322:59 - okay i have some issue here
323:01 - the row is not coming properly
323:08 - okay i had to put all this inside a
323:10 - table row
323:12 - okay so now this should work fine
323:19 - when i refresh this page so i i hit this
323:22 - url java so the count should become two
323:25 - okay
323:27 - yeah now it's perfectly fine now i have
323:30 - language php count one java lang count
323:32 - two let me add python here
323:35 - okay so here you can see even the
323:36 - dictionary is updated here uh
323:39 - i'll hit the route
323:41 - again
323:42 - python is three here you can see three
323:45 - then
323:46 - four
323:47 - so here you can see here the python is
323:49 - four
323:50 - so this looks good so we'll now add the
323:52 - progress bar
323:54 - so
323:55 - for the progress bar what we need to do
324:02 - okay so
324:03 - we can like these are the progress bar
324:06 - so we can i'll quickly give an overview
324:08 - on the progress bar so
324:11 - so here you can see
324:13 - the there's a background multiple bar
324:15 - stripe bars
324:17 - animated so you can use uh like use any
324:21 - so even here you can see toggle
324:23 - animation okay so here it is moving pro
324:26 - a little bit of moving stripes
324:29 - okay uh here you can see this is again a
324:32 - class of stripe colors
324:34 - in which you have blue green
324:36 - warning danger so here you can see like
324:39 - uh
324:40 - we added the same classes on on the
324:42 - button as well danger warning info
324:45 - corresponding to colors okay so let's
324:48 - add a progress bar here so let's take
324:51 - this one
324:55 - okay so
324:56 - so basically in the part of value we are
324:59 - going to add a progress bar so i'll
325:01 - split this
325:03 - td table data now i'll paste the code
325:06 - here yeah
325:08 - so now uh so uh basically i'll refresh
325:11 - the page
325:14 - but right now there is no such dynamic
325:15 - count so everything is full so i'll make
325:18 - it dynamic so what you need to do
325:21 - so to uh
325:22 - like uh
325:24 - so basically here you can see i have a
325:25 - diff class to progress uh i'll quickly
325:28 - show you one thing i'll press ctrl u
325:31 - so it would show how i rendered the code
325:34 - so this was a there is a table bar yes
325:36 - here it is a table bar so here is here
325:39 - the data has been coming dynamically
325:40 - table data is one then language php
325:43 - table data php then progress bar and
325:47 - like this is the again coming
325:49 - dynamically so i will show you one thing
325:51 - if i inspect element
325:53 - okay
325:54 - and
325:56 - let me show you another
325:57 - another view
325:59 - laptop okay so here you can see
326:04 - this is the style
326:07 - uh can you
326:08 - see the difference uh if i reduce the
326:11 - width 60 percent the width has been
326:13 - reduced okay
326:14 - specifically i'm referring to where my
326:16 - cursor is pointer so when i reduce to 50
326:20 - it almost becomes half yes it is half
326:22 - now uh then again
326:24 - the way i'm reducing the width the
326:27 - progress also reduces itself okay
326:30 - okay so this is good so now what we can
326:32 - do
326:33 - so so basically what i want to tell you
326:35 - that style should have the value here
326:39 - value
326:43 - okay
326:44 - and
326:45 - even here you can type value
326:48 - so this will show the value in numbers
326:50 - at the progress bar
326:54 - okay so let me refresh this page
326:57 - so here you can see i have one count to
327:00 - count six okay so let me add few more in
327:03 - php php
327:05 - okay so basically now you can see two
327:08 - okay and now i'll repeatedly hit hit
327:09 - this url
327:11 - okay
327:11 - so here you can see this this has become
327:14 - three
327:15 - okay
327:18 - now five
327:20 - six
327:21 - then again
327:22 - right then just seven yeah same in the
327:26 - same way okay the same goes for the
327:27 - python
327:28 - i'll make a submission
327:31 - yeah here you can see the python has
327:32 - seven now
327:34 - okay so now eight
327:37 - 9 10 11 12 13 14 15 16 17 okay
327:43 - so this looks pretty good so
327:45 - even uh next functionality we will try
327:47 - to uh we will try to add that if you
327:50 - like if you now you are seeing like
327:52 - these are the count of words and that if
327:53 - there are so many languages let me add
327:55 - some another the c
327:57 - so c will have one count of word okay
328:00 - then uh again uh let me do
328:03 - python again or java php
328:06 - uh c plus plus
328:09 - if you want to compare these languages
328:11 - and if you want to sort them according
328:13 - to the founder like if you want to see
328:16 - among among there are 10 languages and
328:18 - if you want to see top three so how we
328:20 - can sort them so i'll tell you how we
328:22 - can sort them so basically in today's
328:24 - tutorial what we are going to learn we
328:26 - are going to sorting the data by count
328:28 - of words in this tutorial we are going
328:29 - to sort the data by values in order to
328:31 - see the data from highest number of
328:33 - votes to lowest number of words okay
328:36 - basically we are going to see uh we are
328:38 - going to going to sort the data by
328:40 - values in order to see data from highest
328:42 - number of words to lowest number of
328:43 - words so basically we will implement our
328:45 - algorithm and we will learn how we can
328:47 - imply
328:48 - apply this on a django
328:50 - project so basically we will uh before
328:52 - this uh uh we can we can
328:55 - learn something on this suppose we take
328:58 - a random string hello
329:00 - world
329:01 - python
329:03 - python
329:04 - programming
329:06 - python programming i hope this is fine
329:09 - okay so we would create a data structure
329:12 - dictionary
329:13 - which would store to store
329:16 - the frequency
329:19 - okay
329:20 - frequency of characters
329:23 - i hope this is fine
329:25 - so
329:25 - so what we can do for
329:28 - c h and s
329:31 - i hope this is fine if c h and d
329:34 - if the character is already in
329:36 - dictionary then i would do t of c h
329:39 - is equal to d of c h plus 1 so i would
329:43 - increase the frequency
329:46 - increase
329:48 - frequency
329:52 - okay
329:53 - else
329:54 - d of c h is equal to one
329:58 - okay initialize
330:00 - for first
330:02 - occurrence okay we have done this before
330:04 - okay so this was pretty easy so uh let
330:07 - me do one thing uh let me create a
330:09 - function
330:11 - defined print
330:13 - data
330:15 - d
330:16 - so here i will be key
330:19 - i will this key and d of i is
330:23 - value
330:25 - okay and i would do for i in d
330:28 - print
330:29 - i
330:30 - comma d of i
330:33 - and here's the end okay so this is a
330:34 - separate function
330:36 - and let me here
330:38 - print
330:40 - d i hope this is fine
330:42 - okay here you can see uh uh okay uh i
330:46 - made a mistake let me do print data here
330:50 - so i had made a function for this
330:52 - purpose only yes here you can see i have
330:54 - different characters so let me i have
330:56 - different characters okay h has a
330:58 - frequency to e but this data seems to
331:00 - very unsorted data so we will sort the
331:02 - data okay so how do we do that so we
331:05 - will carry on this
331:06 - okay let me do one thing let me remove
331:08 - this
331:11 - i have created variable a okay so a
331:17 - is sort
331:18 - by key
331:20 - in ascending
331:23 - order okay
331:24 - so a is equal to sorted
331:28 - d dot items
331:30 - key is equal to lambda we have to make a
331:32 - comparator function
331:34 - lambda
331:36 - x
331:37 - and x of
331:38 - 0 so here i mean to say that i would
331:41 - sort by key okay
331:44 - and i have to typecast this as
331:46 - dictionary
331:49 - okay sorry for this
331:50 - i have to type this back to dictionary
331:52 - and do print data
331:56 - a
331:57 - i hope this should work
332:00 - so yeah now here you can see that i had
332:02 - short this is this uh this is for uh uh
332:05 - what we call
332:06 - empty space okay so this is uh this is
332:08 - in ascending order by keys please check
332:11 - this is by keys a is a key d is a key e
332:14 - is a key g is a key h is a key
332:23 - all here are keys it is sorted by keys
332:25 - okay i hope this is fine okay let me do
332:28 - one another thing
332:30 - uh let me do
332:33 - a sort
332:34 - by key
332:36 - in descending
332:39 - okay so this is going to be very much
332:41 - same
332:43 - i would comment this out
332:45 - so what i can do
332:47 - i can copy this
332:51 - and
332:52 - do this as b
332:55 - and print
332:57 - data
332:59 - b
332:59 - so any change i have to make here yes
333:02 - uh this is a reverse
333:06 - is equal to
333:07 - true
333:09 - i hope this is fine okay reverse is
333:11 - equal to
333:13 - now here you can see it has sorted by
333:16 - keys in reverse order by key y is a key
333:19 - w is equal to key t is equal to r p o
333:22 - and m
333:23 - l all are here keys but has been sorted
333:26 - in reverse order okay
333:28 - now
333:29 - we'll do we'll do the same
333:33 - what we can do now
333:34 - sort by
333:37 - sort by
333:38 - value
333:39 - okay
333:40 - so we would do the same
333:45 - uh we would do the same okay sorry for
333:48 - this
333:50 - i would do this as c
333:52 - here as c
333:54 - and here two by values what we can do
333:58 - i'll remove this so here one means x of
334:01 - x one means i'll sort by values here
334:04 - okay
334:05 - so let me do run this
334:07 - okay i'll comment this out also
334:12 - so here you can see that now i have
334:14 - sorted by values 1 1 1 1 1 2 2 2 2 3 3
334:19 - 4 this is why values okay this is my
334:23 - values in ascending order now the very
334:26 - much same thing in descending order
334:30 - this was in ascending
334:33 - okay
334:34 - and this is now
334:36 - d
334:37 - i would copy this
334:42 - and in the very much same thing reverse
334:45 - is equal to
334:46 - true
334:49 - and i'll do print
334:50 - data
334:52 - d
334:54 - now here you can see that yes sorted by
334:56 - values in reverse order so this is what
334:58 - same thing we are going to implement
335:00 - django service
335:01 - sorry django server okay so what we can
335:04 - do we would do will move to our page
335:07 - okay this is a result table
335:09 - and what we can do
335:11 - h rf
335:13 - okay
335:14 - class is equal to button
335:17 - button
335:18 - primary any any button you can choose
335:22 - sort
335:24 - data
335:26 - okay
335:28 - we are going to sort data okay
335:31 - so
335:32 - sort data
335:34 - okay
335:37 - okay uh
335:39 - let me say descending
335:42 - sort data
335:44 - in descending order okay
335:49 - now we'll define a url
335:52 - path
335:54 - sort
335:56 - data
335:57 - i'll implement a function views dot sort
336:01 - data and name is equal to
336:04 - sort
336:05 - data okay
336:07 - so i hope this is fine
336:08 - uh and i'll have to define a url here
336:13 - percent url
336:16 - sort
336:18 - sort data uh i hope this is fine and
336:21 - then again a personal url and close the
336:23 - bracket okay so i hope this is fine
336:25 - uh and let me check
336:27 - check it on my server i uh with this
336:29 - whole work right now actually this is
336:30 - throwing an error death sort data
336:34 - request is a parameter
336:37 - and
336:39 - return
336:41 - pass okay let me check it uh till now is
336:44 - it working or not
336:45 - okay so i hope this should work now
336:48 - okay return okay
336:50 - okay okay i've made a mistake sorry i
336:53 - should this should be pass okay
336:55 - so
336:56 - now what i can do
337:01 - okay
337:03 - i'll move to the link
337:04 - local host
337:06 - colon 8000
337:09 - okay and now to the voting app slash
337:12 - voting app
337:14 - okay
337:15 - so here you can see sort data in
337:17 - descending order order i hope this is
337:19 - fine
337:20 - so what you can do
337:22 - uh this to what the soap we are going to
337:25 - implement this very much same logic okay
337:28 - to the rendering part this should be
337:29 - same i guess okay
337:31 - this should be same so i will copy the
337:34 - code
337:35 - okay i hope this is fine
337:37 - and
337:38 - global count
337:43 - is equal to
337:45 - global count i hope this is fine now
337:48 - okay but we need to implement the
337:50 - uh so access the global count since uh
337:53 - don't confuse
337:54 - don't confuse yourself i'm defining
337:56 - keyword global so this is a keyword
337:59 - global global count so i'm accessing a
338:03 - variable that is global okay
338:05 - so global global account so what i will
338:08 - do
338:09 - i will do
338:10 - global count
338:11 - is equal to dictionary
338:14 - then again sorted
338:17 - okay
338:17 - global count dot items
338:21 - okay and then we are going to sort by
338:24 - value key
338:25 - is equal to lambda
338:30 - x
338:31 - x of 1
338:34 - then
338:35 - reverse
338:38 - is equal to true
338:40 - i hope this is fine okay
338:43 - okay we will test now i will test you
338:45 - will test this application this is
338:47 - python i'll submit here
338:48 - so python has one mode
338:50 - two
338:51 - three four five six seven eight nine ten
338:57 - okay eleven twelve okay here you can see
338:59 - the python is eleven votes let me to see
339:01 - okay okay till now what we have not
339:03 - clicked on this button okay
339:05 - c is
339:06 - three four five six okay some java
339:10 - let me submit here
339:12 - one two three four five six okay uh java
339:15 - is 10 volts so we might assume
339:18 - javascript
339:20 - okay
339:22 - so javascript has nine votes okay now
339:24 - i'll click sort data in descending
339:25 - orders
339:26 - okay now you can see the magic the data
339:28 - has been sorted in descending order 12
339:31 - 10 9 7 okay so because we were able to
339:34 - implement the logic on the server side
339:36 - and get it rendered on the front end
339:38 - part so data has been uh
339:41 - has been sorted by values okay so
339:45 - so you can try out more in such a way
339:48 - okay we can do anything suppose uh i'll
339:50 - do java here okay
339:52 - okay
339:54 - java has eleven votes okay let me
339:55 - introduce a new plan with sql
339:58 - okay sql has one vote
340:01 - now sql has four four five six twelve
340:04 - okay
340:05 - fifteen seventy now sql has more words
340:07 - than python so i'll do sort data in
340:09 - descending order
340:11 - again you can see the sql is now on top
340:13 - since it has 17 modes
340:14 - so you can implement your logics on your
340:18 - server side and get it them on front end
340:20 - so that's a good part of the application
340:22 - so in the next tutorial what we are
340:24 - going to do so what we are going to do
340:26 - uh you can try out any of the
340:27 - applications so let me do another check
340:30 - python here as 13
340:33 - so 14 15 16 17 18 19 20 so python has 23
340:37 - votes so i'll do sort data in descending
340:38 - order again python is back on top
340:41 - so in this uh
340:43 - i've created the new link of my
340:44 - repository that is django to-do app so
340:46 - now we are going to make app which will
340:48 - we will work on the database the most
340:50 - probably the database we are going to
340:51 - work with sql lite so today we will
340:53 - start with the to-do app how we can save
340:55 - our data in the s uh
340:57 - sqlite database then how we can
340:59 - manipulate the data so basically we have
341:01 - many operations to form like sqli
341:04 - database you do have create read update
341:06 - delete operations and moreover we can do
341:09 - search plus sort
341:11 - we can sort the data as well so
341:14 - we'll perform a regis search and even
341:16 - sort the data so in this tutorial we are
341:18 - going to start with the sqlite database
341:20 - and a to-do app so
341:22 - so let's get started with this tutorial
341:24 - so i again welcome you to programming
341:25 - knowledge so let's get started so please
341:27 - make sure that this is the new github
341:29 - link or repository so you you get
341:31 - updated with the repository as well okay
341:33 - so
341:35 - uh this is my link so i i've already
341:38 - created a app okay uh because this is
341:41 - we have already learned all this how to
341:43 - create a form so basically it has a
341:45 - to-do writer to do description and a
341:46 - to-do priority then i have a add button
341:48 - here uh before we add this
341:51 - we make a request to save the data we
341:54 - have to define a schema to how we want
341:56 - to add our database okay so actually
341:59 - there is a file called model.py file in
342:03 - so what you need to do so this is a
342:05 - model short py file so initially i
342:07 - created a class to do uh so it has model
342:10 - short model so basically i need to
342:12 - define the schema
342:13 - okay so so basically uh like if in the
342:17 - front end of my part i have a title
342:19 - description and a priority so i would
342:21 - define the same at the back end part so
342:23 - i can save my data uh on the backend
342:25 - part as well okay so let's get started
342:28 - with it so first you need to add create
342:30 - title
342:32 - title is equal to models
342:35 - dot
342:36 - cad field
342:38 - okay
342:39 - so
342:40 - and i'll give max length
342:43 - is equal to 255 okay
342:45 - then description
342:49 - is going to model short
342:52 - text field
342:53 - because this is a text field
342:56 - and i would give
342:58 - there's no necessary to give a text
343:00 - sheet because it can have many
343:01 - characters as well so then
343:04 - the next would be title description then
343:07 - priority
343:09 - priority
343:11 - is equal to model short
343:14 - integer field because this is this is
343:16 - going to be integer which priority what
343:18 - you want to give
343:20 - and then create it at
343:22 - okay this is equal to model start
343:26 - model start
343:28 - date time field
343:30 - date time field so this would keep the
343:33 - date time field this would keep the
343:34 - track record of whichever date you want
343:36 - and i want you to add one parameter
343:39 - auto
343:40 - underscore add
343:42 - underscore now
343:44 - is equal to true
343:47 - okay so you can do this so my the server
343:50 - my server gets restarted okay there is
343:53 - auto uh
343:54 - uh
343:55 - maybe uh
343:57 - auto now underscore ad
344:02 - okay let me
344:03 - have a restart
344:08 - uh models created monitor date time
344:10 - field
344:12 - now auto now let me check
344:17 - uh okay got an unexpected keyword
344:20 - argument auto underscore ad on the scope
344:22 - no no
344:24 - uh did it uh did my server restart after
344:27 - this let me check
344:31 - okay yeah now it's working fine okay so
344:33 - it's good so auto underscore now
344:35 - underscore add is equal to true okay so
344:37 - what we can do
344:39 - so we can we have created the database
344:45 - and now
344:46 - like we have created a database schema
344:48 - so what we can do we can proceed with
344:49 - the form okay so we will move to the
344:52 - front-end part index.html
344:55 - so i'll define a form action here
344:57 - quickly
344:58 - form action or maybe a url first or let
345:02 - me check
345:02 - views
345:03 - okay this is a submit okay so what we
345:06 - can do so uh okay okay this is yours.
345:10 - file to do to app okay yeah so here i'm
345:12 - making making a request this is the
345:14 - index page then i'll submit the data
345:16 - then in my views.py file
345:19 - okay i'll create an object so make sure
345:21 - you import this line okay from dot
345:23 - models import star okay so this would
345:25 - import all the database model okay uh
345:27 - okay let me do one thing
345:29 - uh
345:30 - okay before you create a model then you
345:33 - need to migrate as well so you need to
345:34 - type python manage
345:38 - dot py make
345:40 - migrations
345:42 - okay
345:44 - so python manage dot py so it says
345:46 - create model to do so i hope you can see
345:49 - the model has been created okay now i
345:51 - would do python this was the earlier one
345:54 - i did python manage.py make migrations
345:56 - now i would do python manager py
345:58 - my great
346:00 - so this would the uh this would migrate
346:02 - my data so here you can see this has
346:05 - been migrated so even i have my sqlite
346:08 - studio on so i'll refresh this data
346:11 - uh
346:12 - tables so here you can see the tables
346:13 - has been created so i'll quickly give
346:15 - you an overview so here you can see this
346:17 - one
346:18 - so this one has a to-do app underscore
346:21 - which has five columns okay so which is
346:24 - id title description priority and
346:27 - created at so this was a schema which i
346:30 - was telling you so and these are the
346:31 - default django uh schemas uh which i
346:34 - which i'll also explain in the other
346:37 - videos so uh id title so for each object
346:40 - you have id then a title and description
346:42 - and a priority in created ad okay
346:44 - so
346:45 - so what you can do
346:46 - you can uh move to to-do app then what
346:50 - you can do
346:51 - now uh
346:52 - these are the following options so edit
346:54 - table delete table okay remove the
346:56 - database editor database adder database
346:58 - and you can
347:00 - look at the following options so next
347:02 - thing you need to do so we'll move to
347:04 - the form
347:09 - okay now we will move to the form and
347:11 - then submit the form quickly and save
347:13 - the data
347:15 - like our to-do uh item into our database
347:18 - okay so let's get let's get done with
347:21 - this so
347:22 - first you need to do object
347:24 - is go to to do
347:27 - because we i had created then
347:30 - object dot title
347:32 - it is equal to request dot get
347:36 - i hope this is fine title
347:38 - okay
347:39 - and object dot description
347:43 - description
347:45 - is equal to request
347:48 - dot get
347:50 - description description
347:53 - okay
347:54 - then
347:54 - object object dot priority
347:59 - okay i'll show you one thing that in my
348:01 - index.html this priority is the input
348:03 - type is equal to number okay that's why
348:04 - i defined an integer field corresponding
348:07 - to that okay object or priority is equal
348:09 - to request
348:11 - dot
348:12 - get
348:15 - priority
348:18 - priority okay fine
348:21 - then the date will be automatically
348:22 - added to it corresponding to the time
348:25 - and the even the also the id will be
348:28 - correspondingly added and i'll do object
348:32 - dot save
348:33 - okay fine then i would return the same
348:35 - thing
348:43 - restart my server
348:45 - python manage.poi run server okay
348:48 - and in my index.html file
348:51 - i'll
348:52 - make a action
348:55 - percent
348:56 - url submit
349:01 - okay
349:02 - now i'll make a percentage send
349:05 - okay so i hope i hope this is working
349:07 - fine
349:08 - okay uh let me do one thing uh what we
349:11 - can do
349:13 - okay now i should make a request
349:16 - test
349:19 - test
349:20 - data
349:22 - let this be a priority number one okay
349:25 - so i have made a request
349:28 - so
349:30 - okay reverse is equal to
349:33 - okay let me check there's some issue
349:35 - uh
349:37 - percent url
349:42 - okay it says that this url is not
349:44 - matched okay let me check
349:49 - okay uh by mistake uh i had to do this
349:52 - submit
349:53 - okay
349:55 - so i hope now it's fine
349:57 - so i'll
349:59 - make i'll make the request again test
350:03 - test data
350:05 - i'll be uh test
350:07 - data
350:09 - okay
350:10 - and then priority is equal to one okay i
350:13 - hope this is fine
350:15 - so i made a request and then the the
350:17 - page got loaded again so let me check if
350:20 - it's in my data or not so
350:23 - i'll refresh the data
350:28 - okay so let me check
350:34 - so
350:36 - uh
350:37 - like
350:38 - here you can see
350:43 - [Music]
350:45 - so
350:46 - yeah now here you can see when you click
350:48 - on double click on here then i have the
350:50 - structure then the data so this was the
350:52 - data has been added
350:54 - one id is one title is test description
350:57 - is test data priority is one created at
350:59 - this time okay i hope this is fine so
351:02 - you can uh okay now i'll make another
351:04 - request to make sure this is absolutely
351:06 - good so i'll make test
351:08 - data
351:10 - to
351:11 - testing application
351:16 - and i'll give priority to it as uh like
351:19 - suppose hundred
351:21 - one zero one three one one zero i'll
351:23 - give one one zero something you can give
351:25 - anything okay
351:26 - one one two something anything and i'll
351:28 - add so i here you can see the api has
351:31 - been hit now and i'll check my database
351:34 - so i'll uh what i'll do is refresh this
351:37 - okay
351:38 - and
351:39 - okay let me double click it to do app
351:43 - okay hey oh okay so here is the refresh
351:46 - button okay now it's works fine okay so
351:48 - here is it uh uh like uh uh you can get
351:51 - familiar with the sql studio even i
351:53 - so here you can see here is the refresh
351:55 - button also refresh selected database
351:57 - schema and this is the refresh table
351:59 - data so when i click refresh table data
352:01 - so here you can see the second test data
352:04 - to testing application with priority 112
352:06 - has been added to the database so
352:08 - basically uh in this studio tutorial we
352:10 - are going to implement the list and
352:12 - delete operation
352:14 - okay
352:15 - list and delete operation uh on the
352:17 - to-do app okay
352:19 - so
352:20 - so basically uh uh in the previous video
352:23 - we had uh made a
352:24 - small app so i'll give you a small
352:26 - overview
352:27 - so my server is running okay so i'll
352:30 - give you a small overview so where i
352:33 - told you
352:34 - so uh
352:35 - like where i told you like we can add a
352:38 - data so i'll make test
352:40 - new okay i'll do a to-do title
352:43 - uh
352:45 - let's
352:46 - new
352:48 - let me add something new title
352:52 - new title
352:54 - new description
352:58 - and uh to do private is five okay so
353:01 - i'll add this to this and when i move to
353:03 - my
353:04 - database so i'll move to the to do to
353:07 - do app underscope to do so and here i
353:10 - can see new title new description
353:12 - priority and created has been added with
353:14 - id4 uh basically uh
353:17 - and the the ones which i
353:19 - i did in last minute video so i had
353:21 - deleted them just to try out something
353:24 - new on this so let's get started with
353:26 - this today's tutorial so today we
353:28 - implemented delete operation okay so
353:30 - before this i will make a list page so
353:33 - i'll list all to do here
353:35 - list
353:38 - all to do's
353:41 - okay
353:46 - so you can give any title you want list
353:49 - to call to lose okay so basically uh
353:52 - what you can do so we'll move use
353:54 - bootstrap here so uh we'll move to this
353:57 - url
353:58 - so
353:59 - this will give us the components here
354:02 - so here you can see
354:05 - so we'll quickly move to the url and we
354:07 - can do what we can use
354:09 - uh either we can use card okay we can
354:12 - use card here
354:14 - okay so this looks good so
354:17 - so i'll copy this
354:19 - okay but before that what we need to do
354:22 - okay uh
354:23 - we use this was our form which would
354:25 - find so we will move to the views dot py
354:28 - file okay till here view it's fine so
354:31 - i'll do a dictionary my dictionary i'll
354:33 - create a my dictionary
354:35 - my dictionary
354:39 - and
354:40 - uh uh for all to do's okay
354:46 - i'll
354:46 - render them to the page to do
354:49 - dot objects
354:53 - dot all
354:55 - so i hope this is fine
354:57 - so
354:58 - so to do dot object.all and i'll do
355:01 - list.html
355:04 - and i'll give context
355:08 - is equal to
355:10 - my dictionary i hope this is fine okay
355:12 - so let me add a new to do and check
355:17 - new
355:18 - data
355:20 - new
355:22 - data new and i'll give a priority as six
355:26 - and i'll submit this
355:28 - so yes
355:30 - yes uh
355:32 - but
355:33 - uh
355:34 - okay let me check
355:36 - one thing
355:38 - okay
355:39 - i made a mistake uh okay i had in this
355:42 - index.html
355:45 - uh i had to put this all under the block
355:48 - content
355:49 - block
355:51 - content
355:53 - okay
355:55 - and here's the form
355:59 - and i'll end this with
356:04 - person and block
356:07 - this is fine i hope this is fine person
356:08 - and block will do
356:10 - uh
356:11 - okay now uh and here
356:14 - what can i do uh
356:15 - in this page list.html
356:20 - uh
356:20 - which name i had made that is all to
356:23 - do's
356:24 - so i'll do like this all
356:27 - to do's
356:29 - okay so
356:31 - uh i hope this should work fine now the
356:33 - two title is
356:35 - new title
356:36 - three
356:38 - new
356:39 - okay let me give a seven
356:43 - okay so here you can see i have it is
356:45 - showing me query set which says
356:48 - uh to do object four five six and let me
356:51 - check in my data which are this four
356:53 - five six so these are the three which i
356:55 - had
356:56 - uh which i had uh recently added these
356:58 - are the three okay so we would
357:01 - use a list or card so
357:04 - so what you can do we can use the for
357:06 - loop here
357:07 - percent for each
357:10 - to do
357:11 - or
357:13 - do for each
357:14 - for
357:15 - each
357:16 - to do
357:18 - in all
357:21 - to do okay i hope this is fine
357:25 - okay all to do's
357:28 - this is person and fourth
357:33 - okay
357:34 - so
357:35 - so this is fine
357:37 - this is card title so i'll give
357:42 - each to do
357:44 - dot title
357:49 - and in the same way
357:54 - i'll give each to do dot description
357:57 - okay
357:59 - each
358:00 - to do dot
358:02 - description
358:04 - so this would give me the description
358:08 - okay and
358:10 - one thing i can do
358:12 - also
358:16 - let me check
358:21 - okay uh uh what i can do i i'll give a
358:23 - space here and type
358:25 - each to do
358:27 - dot priority
358:30 - i hope this is fine
358:32 - this is this would give the priority
358:34 - and
358:35 - i will come to this uh reference tag
358:38 - we'll
358:39 - delete operation here so i'll refresh
358:41 - this page so here you can see new title
358:44 - new description new data 6 data new new
358:47 - title 3 7 new new title 37 okay so
358:51 - uh
358:52 - so i hope uh maybe i refresh this page
358:54 - so i had i hit this query twice so
358:57 - that's why i have to twice this data
358:59 - okay because i had refreshed this page
359:01 - so this had uh made another operation
359:03 - add operation here okay so we'll now do
359:06 - something
359:07 - with this okay margin
359:11 - i'll give a margin top
359:14 - of one ram
359:16 - okay
359:17 - and
359:20 - do
359:22 - class is equal to row
359:25 - okay
359:26 - div
359:27 - class is equal to call md
359:30 - six
359:33 - so i hope this is fine now i'll paste
359:34 - the card here
359:36 - so here you can see here i'll paste the
359:38 - card now
359:39 - and here you can see
359:45 - okay
359:48 - let me do this okay yeah and i'll give a
359:51 - style
359:52 - is equal to margin
359:56 - i'll give a margin here margin
359:59 - zero auto
360:01 - okay
360:02 - so i'll again refresh this page so i'll
360:06 - so yeah now it looks uh
360:08 - fine
360:09 - okay but uh
360:11 - let me check something uh
360:14 - so
360:17 - so this is called md6
360:20 - yeah
360:20 - so
360:22 - here what you can do
360:24 - if you want to increase the width you
360:26 - can give anything you want uh
360:29 - maybe uh what you can do
360:34 - i'll give classes to card
360:37 - and container fluid
360:44 - so this would take the whole width of
360:46 - the container okay so i hope this is
360:48 - fine now okay
360:49 - so and now we have to create a delete
360:53 - operation
360:54 - so uh
360:56 - uh so like till now let me do one thing
360:59 - so i add a new title
361:02 - new title delete
361:05 - operation
361:10 - okay
361:10 - delete task
361:13 - something like this right here i'll give
361:14 - it as
361:16 - 78
361:17 - when i add this i get this at the end
361:20 - okay so one thing we are missing here
361:23 - that is the we had made model short py
361:26 - we had created add operation so we'll
361:28 - even add this also
361:29 - so
361:32 - so i'll
361:34 - copy this
361:36 - and now i'll do each to do
361:40 - created at okay
361:44 - so
361:45 - so i'll refresh this page
361:49 - now here you can see i have all the
361:51 - created options uh with the timings okay
361:54 - so okay so today we are going to
361:55 - continue with the delete operation so
361:58 - basically we will continue delete search
362:00 - and sort operation on the to-do app and
362:02 - even even in the end we'll do the update
362:04 - operation okay
362:05 - so basically
362:07 - we'll also perform the update option as
362:09 - well so uh in this tutorial we are going
362:11 - to implement and continue with delete
362:13 - operation and look for the other useful
362:14 - query set features but that is going to
362:17 - be very easy uh so that's going to be
362:19 - very interesting how we perform the
362:20 - delete operation so basically
362:23 - first we will move to url's drop to your
362:25 - file and need
362:26 - a delete route
362:28 - with id as a parameter okay
362:31 - when we are done with this so we'll call
362:34 - views dot delete
362:36 - and name is equal to delete
362:40 - okay i hope this is fine
362:43 - okay
362:44 - uh
362:45 - so what we need uh what we need to do
362:48 - uh we'll move to our views.py file
362:52 - okay uh it is throwing an error uh
362:54 - because since i'm not defined uh delete
362:56 - of a function in my views dot py file so
362:59 - what will we move to view pdf file and
363:01 - find the delete function
363:03 - define
363:04 - delete
363:06 - okay
363:07 - uh what parameter is going to take and
363:09 - it is going to take a request parameter
363:11 - request
363:12 - and uh basically uh
363:16 - this part is going to be same
363:19 - okay so this is going to very much same
363:22 - part
363:23 - i'll quickly copy this so only one we
363:26 - think we are going to do since we were
363:28 - going to get a id
363:30 - okay
363:31 - so object
363:33 - is going to do
363:36 - dot objects
363:38 - dot get
363:39 - so with this id
363:42 - basically
363:43 - this uh
363:44 - i'll open my table so basically match
363:47 - this id
363:48 - okay with id sorry for this with id you
363:52 - get okay
363:53 - basically i'm trying to tell
363:54 - that match the id
363:57 - here in the table with the id you get
364:00 - why the url okay why the route so
364:03 - basically you get the get get this
364:06 - object then simply form object dot
364:08 - delete
364:11 - okay
364:12 - so
364:13 - i hope this is fine so this should work
364:16 - okay let me do one thing
364:18 - okay
364:22 - okay let me check
364:24 - yes okay so let's do one thing
364:29 - we'll move to our server
364:31 - okay
364:32 - and what we need to do
364:34 - okay you can copy this
364:39 - okay we can copy this
364:43 - and
364:44 - so this is a local server
364:46 - so basically what we are going to do
364:49 - we will move to the delete
364:52 - okay and we are let me check uh if the
364:55 - if there already let me delete this one
364:58 - with the id4
364:59 - so i'll move to my page and do
365:03 - delete four
365:05 - so
365:06 - maybe the fourth one should have been
365:08 - deleted
365:09 - so let me check
365:11 - so here is my database database so i'll
365:14 - refresh the table data
365:16 - so here you can see the other uh the
365:19 - object with the id4 has been deleted so
365:21 - let me check uh let me check one thing
365:23 - uh let's uh take this one
365:27 - new title delete operation 78 okay so
365:30 - what id does it have
365:32 - so let me uh
365:35 - okay new title delete operation so 10
365:38 - and 11 so i'll delete both of them
365:40 - so how you can how can i delete
365:42 - uh delete one with id 10
365:45 - okay done and delete
365:47 - one with the id 11 as well
365:49 - so that was pretty quick so let me move
365:51 - to my table and refresh this page so
365:53 - here you can see the 10 and 11 has been
365:55 - deleted but you want this operation to
365:57 - be performed by a button not by a direct
366:00 - url so what you can do
366:03 - so you can move to the index.html
366:06 - okay uh and oh what we can you can do
366:11 - uh
366:13 - since
366:15 - uh sorry uh we'll move to the list.html
366:20 - since we all have all the buttons there
366:22 - so
366:24 - uh
366:24 - let me do this button
366:26 - button danger
366:30 - okay
366:32 - and we have to define this as delete
366:38 - okay
366:40 - and then object
366:43 - so
366:44 - basically uh
366:45 - we are going to define this as delete
366:48 - each to do dot
366:50 - id
366:52 - okay
366:53 - so
366:55 - and i'll do this as
366:57 - delete
366:59 - okay
367:00 - so this should work fine let me refresh
367:02 - this page
367:06 - uh
367:08 - okay okay i should not have refreshed
367:11 - this page
367:12 - let me open this list all produced
367:18 - okay okay okay there's some issue let me
367:21 - check
367:26 - your to-do app
367:31 - okay
367:33 - so let me add a to do new to do
367:36 - i quickly even do this also
367:38 - uh or maybe i have not defined i'll move
367:41 - to my index.html page
367:43 - and inside here
367:48 - okay i'm not defined let me do one thing
367:51 - so
367:54 - i'll define a path
367:58 - list
367:59 - okay
368:00 - now views dot list
368:04 - okay and name is equal to list
368:10 - so this would list all my
368:12 - pages okay now uh i'll define my inside
368:16 - my views.pi file i'll quickly do this
368:20 - define list
368:23 - and it will take requests as a parameter
368:27 - and do this thing okay
368:32 - and
368:33 - inside index.html
368:35 - i'll do
368:37 - percent
368:38 - url
368:42 - list okay
368:46 - so this would list all to rules okay let
368:49 - me click this
368:55 - okay
368:57 - so here you can see i have got all the
368:59 - to do's so let me do this
369:02 - uh
369:03 - each to do dot id
369:06 - okay i made a mistake little mistake uh
369:09 - this should have been
369:11 - actually this should have been a value
369:13 - so i hope this is fine now
369:15 - this should have been a value i i
369:18 - i
369:19 - forgot to put curly braces since this
369:22 - should have been
369:23 - a value okay so this now this this would
369:26 - work fine so let me move to my uh okay
369:29 - i'll show you one example and you add a
369:31 - new to do
369:33 - to do
369:36 - added now
369:39 - okay
369:41 - delete
369:43 - this
369:44 - okay and i'll give this a priority as
369:46 - 500 okay
369:47 - so when what happens so let me check so
369:51 - i have added a to-do added now delete
369:53 - this so when i click on delete
369:55 - so here you can see delete 12 has been
369:58 - hit
369:58 - so it has been deleted now okay so this
370:02 - works fine okay so this works absolutely
370:05 - fine where you can delete this i can
370:06 - delete this one
370:08 - this one this one this one this one this
370:09 - one and i empty my to-do list okay so
370:13 - even a list to do so uh
370:15 - now i can add one
370:17 - okay
370:18 - so
370:19 - so oh or you can move to the index page
370:22 - here i'll
370:23 - quickly add the index you are as well on
370:25 - the add button as well so you can add
370:28 - any so to do added now new
370:31 - okay
370:32 - okay uh delete
370:35 - test
370:36 - and give this priority as anything and
370:38 - you will be able to delete this so i
370:40 - hope this works fine so basically in
370:42 - today's tutorial we are going to uh we
370:44 - have all like we have implemented the
370:46 - create operation read operation
370:49 - delete operation we are left with the
370:50 - update operation but before the update
370:53 - operation i want you to have a bit
370:54 - familiar with this query set features on
370:56 - django so basically they have this query
370:59 - set which is very useful to implement
371:01 - the backend functionality like
371:04 - suppose i can show you that the all
371:06 - feature we use so it returns all the
371:08 - objects of that database class which we
371:11 - have defined which we also say as model
371:14 - database model so it returns all the
371:16 - objects of the that particular class or
371:18 - model and
371:20 - in the same way we have also have
371:22 - particular things like
371:23 - filter
371:25 - values date times all union intersection
371:28 - uh one thing uh one of them i would like
371:30 - to show you this order by
371:33 - so
371:34 - oh here you can see order
371:39 - uh yeah yeah here you can see the query
371:41 - set is ordered it has an order by clause
371:44 - like uh it will uh give you the order if
371:46 - you want to sort the data by a
371:47 - particular value you can use order by so
371:50 - that's pretty helpful uh
371:52 - so you can use order by so like uh
371:55 - what i can show you one thing uh like uh
371:58 - one is order banner another is uh
372:00 - contains
372:02 - contains
372:03 - contains this one yeah yeah so this one
372:07 - is used to search this is a particularly
372:10 - for searching the data so
372:12 - uh yeah what kind of data you want so
372:15 - this this one is contains so like if you
372:17 - want to uh
372:19 - like this is this query is particularly
372:21 - uh
372:22 - get headline where it contains this
372:24 - keyword so basically this is equal to
372:27 - this sql equivalent clearly query select
372:29 - where headline like
372:31 - this is this so basically uh you can
372:33 - perform the search operation white
372:35 - contents so we are left with the update
372:37 - operation we will quickly complete that
372:40 - also but before that we'll uh try to
372:42 - implement our uh
372:44 - uh
372:45 - sorting the data and searching the data
372:47 - by order by feature and contains by
372:49 - feature so this is the github link and
372:51 - here i have defined browser
372:53 - so
372:54 - i will open a project
372:56 - so basically uh this is server title but
372:58 - it's uh right now it's not functional
373:00 - we'll implement that so we can add a new
373:02 - to do
373:03 - uh
373:05 - like uh we can do order by
373:10 - order by feature
373:13 - feature
373:14 - to be done
373:17 - so this is the title
373:19 - okay so i'll quickly copy this and give
373:21 - this a priority of thousand
373:26 - so here you can see that particularly i
373:28 - have all the like uh basically i have uh
373:32 - this is the one i have added order by
373:34 - feature and this is like coming and it
373:37 - it has a basic functionality of delete
373:38 - operation as well so it has been deleted
373:41 - with the id 19. okay so it must have
373:42 - been deleted so quickly i'll add another
373:45 - uh
373:46 - order by feature to be done yeah
373:48 - and i i'll add this and i'll give this
373:50 - as a number 500
373:53 - okay
373:54 - yeah it should fine okay one thing you
373:56 - can see that if we have made a like it
373:58 - is a we have made an uh query to do uh
374:01 - so so here you can see we have made a
374:03 - route where we have uh
374:05 - where it's working like an api some
374:08 - somewhere uh so let me do this 500 as
374:13 - 6000
374:15 - and let me uh
374:17 - when i submit this
374:19 - so
374:20 - i will find one with the six thousand as
374:22 - well okay and this one is 500 so now i
374:25 - now i want to like we have the priority
374:27 - numbers so these are our priority
374:29 - numbers this one is
374:30 - eighty 500
374:31 - eight hundred five hundred six thousand
374:33 - and we want to be order the data
374:34 - according to the priority numbers so we
374:37 - can use order by feature so that's going
374:38 - to be pretty fine so what you need to do
374:41 - you need to define uh in urls.pi file of
374:44 - to-do app so what you can do you move to
374:46 - the path
374:48 - okay okay sorry for this
374:51 - i need my caps blocks to be off
374:53 - so
374:55 - i'll define path
374:58 - sort
375:00 - by
375:01 - priority or something or let me do sort
375:04 - data
375:05 - this would be fine yeah so sort by sort
375:08 - data
375:09 - sort data
375:11 - now i'll call abuse function views dot
375:14 - short data
375:16 - use dot sort data
375:18 - and name is equal to sort data okay
375:23 - sort data
375:24 - yeah i hope this is fine so i'll move to
375:27 - my views.py file
375:29 - define
375:30 - sort
375:32 - data
375:33 - which will take a request
375:35 - as a parameter
375:37 - okay
375:38 - and uh
375:39 - so basically what i'm going to do i'm
375:42 - going to return
375:44 - render
375:46 - request
375:47 - then list dot html
375:50 - okay and context is equal to
375:53 - context should be my dictionary okay and
375:56 - uh now i'll define my dictionary
375:59 - okay so here you can see that when i
376:02 - define my dictionary so here you can see
376:04 - that i would define uh like uh all to do
376:08 - all
376:09 - to do's okay
376:11 - and now
376:12 - what i would be doing i would be saying
376:15 - to
376:17 - do dot objects
376:20 - dot all
376:22 - dot
376:22 - order order
376:25 - underscore by
376:27 - and let me do this by
376:29 - uh i'll move to my models dot pi file
376:32 - so here you can see
376:33 - that i have list of parameter one is
376:36 - title description prior to your created
376:38 - ad so let me first do it by
376:41 - uh
376:42 - created okay
376:43 - created
376:45 - underscore ad okay
376:47 - so i hope this is fine now
376:50 - uh
376:51 - this is my url okay and now i'll move to
376:55 - my index.html so basically
376:58 - uh
376:59 - so
377:00 - uh
377:01 - to do description no no i have yeah
377:05 - so i have made a page let me do this as
377:07 - sort by
377:08 - uh sort data
377:11 - okay
377:13 - sort data
377:15 - and
377:16 - the url would be
377:18 - percent url link
377:20 - so i'll define the url
377:22 - then give a person sign then again
377:24 - and i would define this as sort
377:27 - sort
377:29 - data okay so i hope this is fine i have
377:33 - done short data so let me go to my app
377:37 - and uh
377:39 - let me click on add and let me click on
377:41 - sort data
377:43 - so
377:44 - object has no function order pi pie
377:47 - okay okay that means uh
377:52 - let me see something i've made an error
377:55 - let me move to my blue dot pi file okay
377:58 - okay i made a braces here so now i think
378:00 - this is fine
378:02 - okay
378:03 - so let me refresh this page yeah now you
378:06 - can see that i have been uh ordered the
378:08 - data by date and that tool uh ascending
378:12 - order so that is in uh increasing order
378:15 - okay so first seventh may seventh in the
378:17 - seventh way then comes the your tenth
378:19 - way okay now if i want to change this
378:21 - feature
378:22 - simply i'll move to use dot py file
378:25 - and uh
378:26 - uh i'll put a negative sign here and
378:29 - this would be in decreasing order so
378:32 - now when i refresh this page here you
378:34 - can see 10th may 10th may 10th may
378:37 - anthony is there then seventh my seventh
378:39 - sense
378:40 - uh in the same way
378:42 - uh you can do with the priority number
378:44 - as well okay so here you can see
378:48 - uh i'll do
378:50 - a priority number so for that you need
378:52 - to move to your module.pr file you
378:53 - should be very familiar with this very
378:55 - same keyword
378:56 - now i'll give a priority here
378:58 - okay
378:59 - and
379:00 - now when i
379:02 - refresh my page my all the priorities
379:04 - would be increasing that is 89 500 500
379:07 - 500 800 6000 and this to a large number
379:11 - now when i
379:12 - put a negative sign here
379:14 - now i can see that now this would be in
379:16 - the decreasing order okay so i hope this
379:19 - is very you are pretty much fine with
379:21 - this that you know this is in decreasing
379:22 - order now it's helpful to you okay so
379:26 - like in this way you can uh
379:29 - you can
379:31 - create such operations and uh like in
379:34 - the next tutorial so basically i have
379:36 - made this by sort by priority now so you
379:39 - can
379:41 - change this to sort
379:44 - by
379:45 - priority
379:46 - okay so i hope this is
379:49 - fine
379:50 - now
379:51 - even list all to do's you can list any
379:53 - of them and then then click on sort by
379:55 - priority you
379:57 - return a number within priority okay so
380:00 - and this is your delete operation which
380:02 - works absolutely fine you can delete any
380:04 - okay so i have deleted this one so
380:07 - basically in the today tutorial we are
380:09 - going to continue with our to-do app so
380:10 - basically we will perform a search query
380:12 - based on title so title of this uh
380:15 - video search data so basically what the
380:18 - data we have in the all to-do app so
380:20 - basically i'll show my app so we have
380:22 - add list all to do and this is for
380:25 - priority so basically in list all to
380:27 - section we have all the to do's so
380:29 - basically i can add few more as well so
380:32 - let me do some uh like
380:34 - i added on uh
380:36 - let me do django
380:39 - so i have it on django and then django
380:41 - priority i'll give it to number one
380:44 - top most priority so here you can see i
380:46 - have on django then or i'll do another
380:49 - one add another one python
380:52 - and i'll add on python
380:54 - again python uh i'll add priority again
380:57 - to number two okay or maybe one also so
381:01 - here i've added python also so basically
381:03 - if you want to search our our to-do's so
381:05 - we can form search query so for that
381:08 - i'll refer to the query set so the one i
381:11 - told you which is going to be very
381:12 - important for this is going to be
381:15 - contains
381:16 - so i'll move to that contains
381:19 - contains
381:21 - uh
381:22 - contains i'll move to contains
381:25 - okay sorry for this
381:27 - contains
381:30 - yeah
381:32 - okay i am so issue okay no it's fine
381:35 - okay so basically we have contains so
381:40 - yeah here you can see this one yes so
381:44 - object.filter and this is the this is it
381:47 - this contains me this uh this keyword is
381:50 - being looked
381:51 - in this headline okay so so for if even
381:55 - we'll design the same thing for the
381:57 - title one so let's get started with this
382:00 - so what we can do we will move to url py
382:03 - file and then we'll define a path
382:07 - then search
382:08 - data
382:11 - then i'll define views dot
382:14 - search data
382:17 - okay
382:18 - and name
382:19 - is equal to search data
382:22 - so basically i'll define search data
382:25 - now
382:26 - what i can do so i'll define in my views
382:31 - define search data
382:34 - and it will take a request as a
382:36 - parameter and we'll do what i'll try to
382:39 - uh then we'll perform the pressure so
382:41 - till time i can do the pass so basically
382:43 - people if you wanted to fetch the query
382:46 - then i'll move to my index.html page
382:49 - so
382:51 - this is search by title okay so i'll
382:53 - give it to person url okay search
382:59 - data okay so this would uh perform my
383:02 - query to that
383:05 - and then
383:06 - uh this is the form
383:08 - so here you can see
383:12 - so here you can see this uh i want to
383:14 - show you one thing
383:15 - okay let me do right click
383:18 - inspect
383:19 - so basically what i'm
383:22 - trying to show here
383:23 - that uh this thing is a form okay
383:27 - and
383:28 - this
383:29 - whole thing
383:32 - uh you can see
383:35 - yeah
383:36 - so e yeah so here you can see
383:38 - uh
383:39 - yeah uh this is a form
383:41 - which is being highlighted now this to
383:43 - do title
383:44 - due to title to do discussion due to
383:46 - priority this is the format in itself
383:48 - so for that form to submit this we refer
383:51 - to the add button
383:52 - and for this form
383:55 - uh it has no buttons we will create a
383:57 - button for this form okay so sorry my
383:59 - title is form in itself plus
384:02 - this is in a form itself in itself okay
384:04 - so for that what we can do we will move
384:07 - to that search by title search data and
384:10 - we'll create a button
384:13 - button
384:15 - type
384:16 - is going to submit
384:19 - a name is equal to uh
384:22 - for that we do a
384:23 - button type is going to submit and we
384:25 - will do submit
384:27 - or
384:28 - search so let me do search query okay
384:30 - search
384:31 - byte search okay and now for that we can
384:35 - do
384:36 - a
384:37 - class is equal to button
384:41 - button
384:42 - primary
384:44 - okay for that will and style and define
384:46 - a style is going to display
384:49 - block
384:51 - and margin
384:54 - 0 okay so this would
384:57 - define a button to the center
384:59 - okay let me do one ramp so it would also
385:02 - give a top margin here
385:04 - so when i refresh this page here you can
385:07 - see i have a search button fine
385:09 - now
385:10 - when
385:11 - uh
385:12 - when i'm remove here so to search the to
385:16 - initially see see see if it's working
385:18 - fine
385:19 - uh i'll define a queue
385:21 - if you go to request
385:23 - sorry request
385:25 - dot
385:28 - get query
385:32 - and i'll define a http response of q
385:35 - so let me move to my page i'll refresh
385:37 - this and i'll type cricket
385:41 - okay
385:42 - cr i'll type cr
385:43 - so
385:44 - yes it gives me a http also crc it works
385:47 - fine okay
385:48 - now we would render the uh this to do
385:51 - objects uh on our uh
385:54 - uh
385:55 - front end so basically uh we can do what
385:59 - we can do uh
386:00 - will okay uh i want to show you one
386:02 - thing also uh we have contains
386:05 - so basically this is equal to even
386:10 - last time i showed you
386:12 - contains
386:15 - this one this one this one this one
386:20 - okay
386:24 - yeah
386:25 - i wanted to show you this thing so case
386:28 - sensitive containment this is contains
386:31 - uh so basically there is a difference
386:34 - slight difference between
386:36 - uh this this uh contains
386:40 - an
386:40 - i contains so basically here i stands
386:44 - for insensitive
386:46 - so this is case sensitive
386:48 - and this one is case in sensitive so
386:50 - this this one i wanted to show you and
386:53 - this is equal to this sql query where
386:55 - headline is percent this keyword so okay
386:59 - so basically this is this is a small
387:00 - difference i wanted to show you between
387:02 - the contains and uh
387:04 - insensitive contains so basically there
387:06 - is a difference of this keyword i
387:08 - so we can move to our application now
387:12 - so what we can do
387:14 - so uh
387:15 - i'll define
387:19 - my dictionary i'll define a dictionary
387:22 - then
387:23 - i will return
387:26 - render
387:29 - okay
387:30 - then request
387:33 - then list dot html
387:37 - okay if you want to show the result in
387:39 - the list itself so basically we are
387:41 - referring to the same template again and
387:42 - again
387:43 - then context is equal to
387:46 - my dictionary this is pretty much same
387:48 - as above but here a difference will be
387:51 - so what we have all to do's
387:54 - okay for that we have to do dot objects
387:59 - dot filter
388:02 - okay
388:04 - then uh
388:06 - what we are going to do filter
388:09 - and now
388:11 - we are going to define
388:14 - title so basically we will move to model
388:16 - sort py file so this is the title what
388:18 - we are going to use title
388:23 - double underscore we will define double
388:25 - underscope contains
388:28 - is equal to q
388:30 - okay
388:31 - so i hope this should work fine so this
388:33 - is we are referring to title
388:35 - to have this okay so let me do one thing
388:38 - uh i'll make a search query so if i type
388:42 - cr then we have cricket okay so it
388:45 - matched my query so let me do under list
388:47 - all to do so cricket 89 so i'll define a
388:51 - cricket
388:52 - so see this
388:54 - cricket
388:57 - cricket cricket and then 90 so this is a
389:01 - different form working okay absolutely
389:02 - fine so
389:04 - so this is cricket 90
389:06 - then i'll define another one
389:09 - click it then 91
389:13 - so when i should type cr
389:16 - so it should return all the crickets
389:18 - with 89 90 and 91
389:21 - then even i do sort by priority look
389:24 - okay
389:26 - sorry for this okay we'll work on this
389:29 - but uh till now we can uh this is the
389:33 - i'll clear this so basically this was
389:35 - short
389:36 - data so it referred to all to do's it
389:38 - has no filter yet okay but when we just
389:42 - search data so i'll do do this again
389:45 - uh
389:47 - i'll define cricket and now i have 89
389:50 - 1991 okay uh so
389:54 - we will next time we will try for the
389:56 - update operation so it okay we will
389:59 - check in another one then let me take a
390:02 - type
390:03 - b a so basketball would be
390:07 - so this is basketball okay
390:09 - and this is ba refers to here as well so
390:12 - it is a reference to the ba in the
390:14 - basketball and football okay ba so we
390:18 - will define let me do another
390:21 - okay you can
390:23 - type the query here as well f-o-o
390:26 - football so this would return football
390:28 - only
390:29 - and
390:30 - let me type of r
390:32 - so this will match this register with
390:34 - order by order y so this works
390:36 - absolutely fine so
390:38 - uh we can do for another as well let me
390:41 - do dj so it would return me django
390:44 - and pui this would return me python it's
390:46 - absolutely working fine so in this
390:49 - video we are going to implement the
390:50 - update operation so let's get started
390:52 - with this so basically uh
390:55 - i have my to-do app so we click on list
390:57 - all to lose so we have a
391:00 - uh
391:00 - all to do list so basically we want to
391:02 - have a update operation here or edit
391:05 - operation so for that what we can do we
391:08 - can we can move to our list dot html and
391:11 - copy this
391:13 - and click here edit
391:16 - and change this button to button warning
391:22 - and and here we can have the edit
391:25 - operation
391:27 - so for that i'll refresh this page so
391:29 - i'll have the edit operation okay fine
391:32 - for this edit operation to have uh
391:34 - happen we have to have a url dot py so
391:37 - basically
391:38 - like for the delete one we will have for
391:41 - that for edit edit so basically i tell
391:43 - you the difference between the edit and
391:44 - update so basically uh
391:47 - right now we are implementing the edit
391:48 - operation
391:49 - so views dot edit and name is equal to
391:52 - edit
391:53 - i hope this is fine
391:55 - so
391:56 - and in use then we will move to use dot
391:58 - py file
391:59 - so
392:00 - here we mentioned views.edit so we'll
392:02 - implement edit operation here
392:05 - so for that we'll define edit define
392:07 - edit
392:09 - i'll give request
392:11 - an id
392:13 - okay
392:14 - so
392:15 - and what we'll do
392:17 - so
392:18 - i'll copy this line
392:20 - so basically we are going to
392:22 - render a new html file known as
392:24 - edit.html
392:27 - but before that we need to find the
392:29 - object which we are going to do
392:31 - so object is going to
392:33 - to do so basically like in the delete
392:35 - operation we did this
392:37 - we did this we got the object which we
392:39 - have to delete so in the same way we are
392:42 - going to find the object which we have
392:43 - to edit
392:45 - so then
392:46 - my dictionary is equal to this
392:49 - which would give title
392:51 - is equal to object.title
392:56 - object dot title then
392:59 - description
393:00 - description
393:04 - is good object
393:06 - dot
393:07 - description
393:09 - then priority
393:14 - is equal to
393:15 - object dot
393:17 - priority okay
393:18 - so then if we want to so basically the
393:22 - object we want to edit will get the
393:24 - object then these are the properties or
393:27 - attributes referring to the that object
393:30 - and then we'll pass to edit.html okay
393:32 - i'll tell you why we'll pass to
393:33 - edit.html before that we'll look for
393:35 - index.html so this form was for the
393:39 - this form was for the uh submit part so
393:41 - we will copy this form
393:44 - okay
393:45 - then i'll copy this form i've created a
393:47 - new file edit.html
393:49 - okay
393:50 - okay i'll not directly copy this i'll do
393:53 - one thing first i'll copy the extend
393:55 - template
393:56 - so this would get me the extent template
393:59 - then i would remove this
394:02 - okay
394:03 - then i will do
394:04 - edit
394:08 - edit
394:10 - to do
394:11 - okay edit data whatever you want
394:14 - then now i'll move to index.html
394:17 - i'll copy this form
394:19 - okay then i'll copy this form and paste
394:22 - it here okay so i have this
394:25 - so i'll complete two disks
394:28 - so this would yeah
394:30 - now i already know i'll show you one
394:32 - thing when i refresh this page i click
394:34 - on edit so i'll move to this form but
394:37 - still not this form is empty
394:39 - okay first i'll
394:41 - the change this add button to
394:44 - update
394:45 - okay
394:48 - first thing i'll do this second thing
394:50 - i'll do this i'll uh change this the url
394:53 - submit to url
394:56 - update
394:57 - uh okay
394:59 - let it be submitted now i'll tell you
395:01 - one thing so i have a title here so i'll
395:04 - give a value
395:05 - is equal to
395:07 - title which we had rendered using the
395:09 - dictionary
395:11 - so this would i'll refresh this page so
395:13 - i have basketball here okay
395:15 - so perfectly fine in the same way i'll
395:18 - have the description
395:22 - and in the same way i'll have the
395:23 - priority as well
395:28 - priority
395:29 - as well so perfectly fine it will work
395:32 - so i'll have a priority as here okay so
395:35 - now
395:35 - what we are going to do
395:37 - so we have this so basically we want to
395:40 - update this
395:42 - so we can update this very easily so
395:45 - what we can do
395:47 - we will move to
395:48 - urs dot py file
395:51 - and define an update operation
395:56 - update and i'll take an integer id here
395:59 - again
396:00 - then again so i was telling you there's
396:03 - a difference between an edit and update
396:05 - so now we'll update this update and name
396:07 - is go to
396:09 - update
396:14 - okay
396:15 - so what we'll do
396:17 - uh
396:19 - so we will move to use dot py file
396:25 - define update
396:26 - request id
396:28 - so this is particularly same this would
396:31 - be very much same as the submit
396:33 - operation
396:34 - okay but there would be minor change
396:36 - i'll tell you
396:38 - so first we are not going to create a
396:40 - new object we are going to update the
396:42 - object with the given id so this is fine
396:45 - second
396:46 - uh
396:47 - we
396:49 - need to create a
396:50 - import date time
396:53 - okay
396:54 - and
396:55 - it
396:57 - add underscore go to
396:58 - datetime.datetime.now
397:02 - okay
397:03 - and then
397:06 - object dot created
397:15 - so this would work fine
397:17 - so this was telling you that we need to
397:20 - first find the object we are going to
397:21 - update then title is to title
397:23 - description priority then date time we
397:26 - will create a
397:27 - new date that is updated at and we will
397:29 - resign it to the creator ad then we will
397:31 - save it and then we are going to return
397:32 - this list.html and one thing we are
397:35 - going to change here is that we are
397:38 - going to
397:39 - change this to update
397:42 - that is id
397:44 - but still uh one thing i'm missing that
397:46 - i have not rendered the id from use dot
397:48 - py file so i will do this
397:51 - now this should work fine
397:52 - this is id object dot id
397:57 - okay
397:58 - and in my edit dot html this should be
398:01 - with curly braces
398:04 - so this should work fine
398:06 - so let me create a new to do
398:10 - new to do new to do now
398:15 - okay
398:17 - uh give me a priority number of 500 i'll
398:19 - submit here
398:21 - so it has been created now click on edit
398:25 - so new to do now is new to do now now
398:28 - again
398:30 - okay
398:31 - new again
398:34 - so
398:36 - hopefully we check let me check uh this
398:38 - is yeah
398:39 - new to do now new to do now so yeah so
398:43 - now
398:44 - what we are going to do
398:46 - let me
398:47 - edit this and i'll type new to do now
398:50 - again
398:53 - then again
398:55 - okay and i have the priority number of
398:57 - 505
399:00 - so
399:01 - it told me an error
399:06 - okay page not found
399:12 - okay let me check to in my url.ufi
399:16 - okay this was having an issue
399:21 - yeah so yeah i've got a handmade so here
399:24 - you can see this has been changed okay
399:27 - new to do now again 505 had been changed
399:31 - so basically in the same way let me edit
399:34 - any one this is cricket 89
399:36 - so i click on edit so this is cricket
399:39 - cricket
399:40 - okay i'll change it to
399:42 - football
399:45 - football again
399:48 - new something like that
399:50 - so cricket new
399:52 - and i'll give a priority number of 899
399:54 - so let me check
399:56 - so yeah here you can see this has been
399:58 - updated football again new 899 cricket
400:01 - new and the time had been updated
400:04 - accordingly so this works perfectly fine
400:07 - so we are almost done with that to do
400:10 - app so
400:11 - we'll catch you in the next tutorial
400:14 - so what we can implement next so
400:16 - basically we are done with the uh
400:18 - all operations so basically uh
400:21 - uh
400:22 - okay
400:23 - one thing i noticed here something let
400:26 - me check
400:27 - yeah this is basketball new
400:29 - 502 so i had only one word
400:33 - edit.html title
400:36 - description
400:40 - okay so even i'll try to check up in
400:43 - this tutorial next tutorial where
400:45 - there's some minor
400:47 - so basically i'll try to update this
400:49 - football
400:50 - football
400:51 - uh
400:53 - now okay
400:55 - now uh i'll give a priority number of
400:58 - uh a very huge number
401:00 - so this is this has been successfully
401:02 - updated it works perfectly fine so i'll
401:04 - delete this again so even the delete
401:06 - operation also works fine so delete
401:08 - delete delete delete works fine
401:10 - we can carry and uh
401:13 - we
401:14 - will do to search then
401:16 - uh
401:17 - football
401:20 - no not yet
401:22 - uh maybe we are not matching with yeah
401:24 - we don't have anyone so let me type dj
401:28 - yeah so it works all perfectly fine so
401:30 - almost our operations work perfectly
401:32 - fine so basically in today's tutorial we
401:34 - are going to connect the django with
401:36 - mongodb and i will illustrate all the
401:40 - process how you can uh create a mongodb
401:43 - database and how you can connect that
401:44 - mongodb database with your django
401:46 - application
401:47 - so let's get started with today's
401:49 - tutorial the first thing we need to do
401:51 - we can open our code editor and then we
401:54 - need to type the command pip install
402:00 - django
402:01 - so this will install the django on our
402:03 - local machine
402:04 - and with this command we can create a
402:06 - django project as well as the django app
402:08 - on our machine
402:10 - then
402:11 - then i would like to tell you that till
402:13 - the time this is being installed on my
402:15 - machine what you can do yeah here you
402:18 - can see that it is installed in django
402:20 - on my machine
402:21 - and you can install django with the
402:23 - simple command pip install django
402:25 - and then we have a mongodb plus i will
402:28 - show you how the we can go here you can
402:30 - refer to this website uh first this is
402:33 - the
402:34 - website for django i've already told you
402:35 - how you can install django then this is
402:38 - the website from here you can install
402:39 - the mongodb community edition and this
402:42 - works as a interface with you with the
402:45 - mongol db database as a user
402:47 - interference uh very similar to
402:49 - phpmyadmin uh
402:52 - which is used for sql then this is the
402:55 - package we are going to use this package
402:57 - has a very similar name jungle the word
403:00 - jungle is derived from uh like uh this
403:02 - is used to connect django with mongodb
403:05 - so jungle is the package we are going to
403:07 - use so let's get back to our code editor
403:10 - so first
403:11 - what you can do
403:13 - you can connect you to the uh connect to
403:16 - the local host server using this mongodb
403:19 - compass community edition and you can
403:21 - click on the connect button
403:23 - then this would connect to the local
403:24 - host now here you can see that it has
403:27 - been connected to the local host now
403:29 - what you can do
403:30 - you can create your own database so
403:33 - let's click on here uh
403:35 - so first let's continue with
403:37 - installation part so after installing uh
403:40 - after installing django you can install
403:42 - it
403:44 - install
403:46 - jongo so this is the command we are
403:48 - going to use to connect with the package
403:51 - this is the package we are going to use
403:52 - to connect django with the mongodb
403:54 - database so it's very easy
403:56 - so
403:57 - till the time it's being installed yeah
403:59 - it's a very easy process and next what
404:02 - we can do
404:04 - then we can create a django project
404:06 - and then we would i will show you how
404:08 - you can make a migration in your app
404:11 - then how the how we when you can change
404:13 - see the changes detected in the mongodb
404:15 - database
404:16 - so
404:17 - let's what we what we can do
404:19 - uh next what i have so then we have to
404:23 - make some uh changes in your settings
404:24 - dot py file i'll also come to that then
404:27 - you can see the changes on the mongodb
404:29 - com compass so that's very easy so let's
404:33 - create our django project so i'll type
404:35 - django
404:36 - admin
404:38 - start
404:40 - project
404:41 - a demo project
404:44 - so
404:46 - i'll create a project
404:48 - then what you can do
404:49 - you can open a folder
404:52 - and i have created this project on my
404:54 - desktop
404:55 - so here i can open it
404:58 - so
404:59 - now the project is open on my vs code
405:02 - so next thing you can do
405:04 - you will navigate you to the settings
405:06 - dot py file
405:08 - so you can press ctrl dot p
405:10 - and if settings dot pi file so this
405:13 - would simply uh direct you to the
405:15 - settings dot py file and here you can
405:18 - see that there is a section for
405:20 - databases so we would be doing this and
405:23 - i will open my terminal as well
405:25 - so we would be connecting this uh so
405:28 - what we can do
405:29 - uh first since we have installed jungo
405:32 - now what we can do
405:34 - first we'll create a database i will
405:36 - show you like from here you can
405:39 - disconnect and connect so i'll show you
405:41 - again it refers to disconnect then you
405:43 - can click on connect so this would
405:45 - connect you to the localhost database
405:47 - and now click on create database
405:50 - and type
405:51 - demo
405:53 - database
405:55 - remove database and you can give a
405:57 - collection name a demo
405:59 - election
406:02 - so
406:02 - i would click on create database
406:05 - so here you can just copy the you can
406:08 - keep this as a referral demo database
406:10 - so and demo collection so i click on
406:13 - create database so here you can see a
406:15 - database has been created and which is
406:18 - having a just a demo collection right
406:20 - now but what we can do uh we will
406:24 - connect to our
406:25 - project and then run the app so i'll
406:28 - sorry run the migration so what you can
406:30 - do you can simply copy this
406:33 - and you can paste this code i'll comment
406:35 - this out databases so i'll put triple
406:38 - quotes here
406:39 - so this would basically come in this
406:41 - section
406:42 - double quotes and now i would miss this
406:45 - uh you can do one thing uh you can
406:47 - remove this client part because you are
406:50 - right now dealing with the local host
406:51 - and by default it would detect this
406:54 - so
406:55 - now you need to define your database
406:57 - name so i would define my database oh
407:00 - sorry
407:01 - so my database name is
407:03 - this this is my database demo database
407:07 - so
407:07 - i'll move to this here and i'll type
407:10 - demo data
407:12 - base
407:14 - okay so this looks perfect now
407:17 - since i'm my connection is on so i'll
407:20 - type
407:22 - a python
407:24 - manage
407:27 - dot ui
407:29 - make migrations
407:34 - and this would make the migrations in my
407:37 - database
407:38 - so so it says no change is detected so
407:42 - uh now i can type python manage.py
407:45 - migrate
407:48 - so here you can see the all the ibra
407:50 - migrations uh
407:52 - are being applied so here you can see
407:54 - the migration has been applied now i
407:56 - will move to my database and i'll click
407:57 - on the refresh button
407:59 - and here you can see and i click on the
408:01 - demo database perfect so i have got all
408:04 - the migrations of the django here in my
408:07 - mongodb database
408:09 - so
408:10 - this looks perfectly fine
408:12 - so
408:12 - you can create your models and then
408:15 - run the previous two command that is
408:17 - migrate and migrations and then you are
408:19 - get to go with this
408:21 - project running
408:22 - so
408:23 - thank you guys for watching this video
408:25 - so i'll catch up in the next tutorial so
408:27 - here you can see i have made the project
408:29 - uh you can also do one thing
408:31 - you can type python
408:33 - manage
408:35 - dot ui
408:37 - run
408:38 - server
408:40 - so
408:41 - this would run the app on your local
408:43 - machine
408:44 - so you can simply
408:45 - copy this
408:48 - and you can place this on your browser
408:54 - and here you can see your django project
408:56 - is perfectly running so everything looks
408:58 - perfect so this is how i made the
409:00 - settings in my database
409:02 - this is the mongodb collections what
409:04 - i've got and uh this the project is
409:06 - already running but now we are trying to
409:08 - implement crud operations the basically
409:11 - there are four card operations that is
409:12 - create read update and delete and we are
409:14 - going to implement this using mongodb so
409:17 - first thing you can do is you can open
409:18 - this mongodb compass community edition
409:21 - and you can click on connect when you
409:23 - click on connect you can last in the
409:25 - last video i showed you how we created a
409:27 - demo database here then you can open the
409:30 - demo database and here you can see all
409:32 - the migrations the demo database has all
409:34 - the migrations we had done so you can
409:36 - refer to the previous tutorial how we
409:37 - connected mongodb to django it's very
409:39 - simple and it's very quick enough so i
409:42 - can also give you a quick view
409:45 - in settings.pyf file you need to uh go
409:49 - into setting dot py file and what you
409:51 - need to do here you need to make sure
409:53 - that this database engine is jongo and
409:56 - uh you have to install a dem uh you have
409:58 - to make a demo database uh and the name
410:01 - of that database is very much the same
410:03 - demo database and you have to install a
410:04 - package called john wood so it can be
410:07 - easily installed while by typing the
410:09 - command pim install jungle uh for what
410:12 - uh for any like if you want to see it as
410:14 - a demo purpose you can refer to the
410:16 - previous video
410:17 - uh now what we are going to prevent the
410:19 - crowd operations so we will go step by
410:21 - step
410:22 - and we will see how we can uh create a
410:25 - app and then how we can implement the uh
410:28 - how we can implement the uh
410:30 - thread operation in that app so what you
410:32 - can do you can simply copy this or you
410:35 - can type on your vs code
410:37 - python
410:39 - manage
410:40 - dot py start
410:42 - app
410:43 - demo app
410:45 - so
410:46 - this would uh uh start a demo app on
410:49 - inside your current project directory
410:52 - and now what you can do
410:53 - uh
410:54 - instead uh until the time it's been
410:56 - created creating a demo app i can show
410:59 - you further commands
411:00 - uh this is the one
411:02 - like uh
411:03 - i'll show you uh we are going to
411:05 - implement a database model so this how
411:08 - we make a database model we will make
411:10 - then we will create a super user
411:13 - and this is a administration i will show
411:16 - you that and
411:17 - i'll simply show you so
411:20 - uh
411:21 - okay
411:22 - so let's uh get back to our tutorial see
411:25 - the demo app has been created you can
411:26 - see the folder here demo app and it has
411:29 - a file called module.pyfi
411:31 - since i have created
411:32 - an app demo app i need to make sure i
411:35 - add this application here demo app
411:38 - okay now what you need to do i've
411:40 - already connected to my database and the
411:43 - next thing i'm going to do i'll move to
411:44 - modules.pi file
411:46 - and i need to create my models here so
411:48 - simply i'll create a model
411:50 - and i'll make create a basic model see
411:53 - this one
411:54 - uh i'll copy this
411:56 - and paste it here
411:58 - uh instead of this i'll do class to do
412:02 - uh and this is the this is instead of
412:04 - first name i'll type task
412:07 - and instead of the second last name i'll
412:09 - do this to description
412:11 - this
412:12 - grip
412:14 - so this is the description i'm going to
412:15 - have task is your modulus. and this is
412:18 - the description here i can increase the
412:20 - description to 100
412:23 - perfect
412:25 - uh yeah okay now i have increased the
412:27 - description to 100 and now what we can
412:30 - do
412:31 - inside my admin dot py file i can
412:33 - register this
412:35 - and for that i need to do what i need to
412:37 - do i need to first import models from
412:40 - dot models
412:41 - import everything so i from dot models
412:43 - import star
412:45 - and here you can see that i have
412:47 - registered i can register a model here
412:50 - so i can copy this and paste it here
412:54 - uh yeah so here you can see
412:56 - i can
412:58 - import that model and register here as
413:00 - an admin so i can implement the third
413:02 - operation so i'll
413:03 - simply type to do
413:05 - so to do is the model which i have to
413:07 - register
413:09 - and
413:10 - i will create a super user at the same
413:12 - time python manage dot py create
413:16 - super
413:18 - user
413:19 - so this is the type of command i have to
413:21 - type to create the super user
413:23 - so it will ask me to like a
413:26 - username so here you can give a username
413:29 - as admin
413:30 - you can leave this email address
413:32 - password you have to give a very simple
413:34 - one
413:35 - uh and then again you can give a
413:37 - password the make sure it's an easy one
413:39 - just for the demo purpose and you can
413:41 - continue that and now so this password
413:44 - seems to be too common but you type y
413:47 - that is yes and it will create the super
413:49 - user
413:50 - now since i created the model database
413:52 - model and i also listed that so now what
413:55 - i will do i will migrate this database
413:58 - python
414:00 - manage
414:01 - sorry
414:03 - python manage
414:05 - dot py make
414:06 - migrations
414:10 - and now what i'll do so here you can see
414:12 - it shows that create model to do now
414:14 - i'll migrate this python
414:16 - manage dot py
414:19 - sorry
414:20 - python manage dot p y
414:22 - uh
414:23 - migrate now i will migrate this database
414:27 - so yeah here you can see
414:29 - so
414:30 - uh i have
414:31 - made this and now what i am going to do
414:34 - i will go to my demo database and i will
414:36 - refresh this
414:38 - okay
414:39 - so here you can see
414:41 - that i have got a demo app to do here
414:44 - here you can see demo app to do
414:47 - now what i'll do i'll run this app
414:51 - python manage dot
414:53 - y
414:55 - manage dot p y run server
415:00 - okay now the app will start and start at
415:03 - the local host so i'll move to my local
415:05 - host so like we have created the model
415:07 - profit we have registered as admin
415:09 - perfect and now uh okay this seems to be
415:12 - something else sorry uh yeah now i have
415:16 - created an app which i told you that and
415:19 - then we registered the app inside the
415:20 - installed apps directory as well so we
415:22 - are going in the right direction now i'm
415:24 - at my local host i'll refresh this
415:26 - and you can see that i have my app
415:28 - successfully running now i will go to
415:31 - the admin
415:32 - slash
415:34 - admin so simply we refer to the
415:37 - documentation for the quick illustration
415:39 - of this and the you need to type in the
415:42 - username and password you have set
415:44 - and what you need to do then you can log
415:47 - in here and here you can see i have to
415:50 - do's
415:51 - so you can add a to-do here simply we
415:54 - are going to implement the crowd
415:55 - operations so
415:56 - uh to do
415:58 - number
415:59 - one
416:00 - so
416:02 - a hello world i'll type simply type
416:04 - hello world anything you can give
416:07 - hello world and now i'll save this
416:10 - uh let me i'll either i'll do save and
416:12 - add another or i can save this yeah
416:15 - so this has been saved and here you can
416:17 - see the object says yeah this is i have
416:20 - the object okay
416:21 - so
416:22 - i'm clicking on save again yeah but now
416:24 - when i move to my database i click on
416:26 - this demo have to do
416:27 - and
416:28 - here
416:30 - you can see that you have this data in
416:32 - the json format so perfectly fine so
416:35 - here you can see that i have the data in
416:37 - the json format uh since it's mongodb
416:41 - okay uh i'll quickly show you yeah you
416:43 - can see this in the uh json format
416:47 - so and this is the uh you can also click
416:49 - on this button so this would show you in
416:51 - the tabular form and this will show you
416:53 - in the json form it's perfectly fine so
416:55 - let's implement some few operations on
416:57 - that again now i've clicked the do app
416:59 - project and i get to number one edited
417:04 - so i click save
417:06 - so this has been edited
417:08 - so when i move to my database i'll click
417:10 - on refresh
417:12 - i'll click here refresh button yeah now
417:14 - it says to do number one edited now
417:16 - simply i can add another view so
417:20 - to do number two
417:24 - number two and i'll give the same
417:26 - description yeah and then i can move to
417:29 - my database refresh i'll get another one
417:32 - and now i can delete one so that's makes
417:34 - a last purpose of our project i'll
417:36 - delete this yes i'm sure i'll delete
417:39 - this and i'm gonna move to my database i
417:42 - found it deleted so that's perfectly
417:44 - fine how we implement the credit
417:45 - operations so thank you guys thank you
417:48 - so much for joining us in this tutorial
417:50 - so this was the quick purpose you can
417:52 - simply create a doodle app and with the
417:53 - database