00:01 - [Music]
00:07 - hello guys welcome back to another
00:10 - tutorial hit the bell icon button so
00:12 - that you don't miss out any tutorial I'd
00:15 - like to welcome you all to this second
00:17 - part of our second set of lessons on
00:20 - webpack sponsored by hu annex my name is
00:25 - Mathew Raymer and I'm looking forward to
00:27 - guiding you through the virtual jungle
00:29 - which is webpack and why you need it to
00:34 - appreciate why you need webpack it's
00:36 - worth making a few observations about
00:39 - how the field of web development has
00:41 - been changing so rapidly on how we do
00:44 - things these days back in the good old
00:49 - days before front-end libraries and
00:51 - frameworks JavaScript development was
00:54 - just a simple javascript file included
00:56 - in your HTML file but now in CSS we have
01:02 - multiple libraries and frameworks to use
01:07 - this situation makes front-end
01:09 - development increasingly challenging the
01:12 - same can be said for the entire
01:14 - JavaScript ecosystem front-end back-end
01:16 - mobile etc not only that we have of
01:21 - changing libraries and frameworks to use
01:23 - but we also have module and language
01:26 - standards which have been progressively
01:28 - changing for over a decade from iffy to
01:31 - es6 and beyond now the big three
01:36 - frameworks like angular reactant vu have
01:39 - burst onto the scene over the past few
01:42 - years as well with those things in mind
01:46 - I want to spend a few minutes
01:48 - summarizing how web pack is being used
01:50 - in the web development industry this is
01:55 - going to be a lovefest so do not expect
01:58 - any criticism in this lesson it's going
02:01 - to be all positives but was a little
02:04 - warning message at the end I understand
02:08 - many of these examples are going to
02:10 - overlap in their functionality somewhat
02:13 - but I wanted to at least loosely
02:15 - organize them into categories generally
02:20 - articles on webpack will start with the
02:22 - low level technical benefits of using
02:24 - webpack but I'm going to start with the
02:27 - higher level benefits to developers
02:30 - first of all learning web pack gives you
02:33 - an opportunity to better understand web
02:35 - development in the present time both the
02:37 - features and the problems angular react
02:43 - and vous depend on web pack to build
02:45 - their boilerplates
02:47 - and their ready-made app for developers
02:49 - to be able to start coding their
02:51 - prototypes boilerplates rely on web pack
02:56 - because they are built on modules and
02:58 - libraries web pack will allow you to
03:03 - understand how boilerplates work under
03:06 - the hood therefore to understand the
03:08 - modern front-end ecosystem web pack has
03:12 - most of the development industry using
03:15 - it
03:15 - thus information and advice are readily
03:18 - available
03:20 - you
03:21 - pack is still evolving adding new
03:23 - features such as async chunk loading and
03:26 - prefetching as web pack matures so can
03:32 - you - as long as you can keep up with
03:35 - the changes ultimately continuous
03:40 - learning is one of the habits that
03:41 - distinguishes good developers from
03:43 - excellent ones web pack offers ample
03:48 - opportunity to learn more in the world
03:50 - of web development so with those
03:54 - benefits to the developer highlighted
03:57 - let's go down the hierarchy of benefits
03:59 - to those benefits which are the - the
04:01 - processes of web development if you've
04:06 - worked in development for very long you
04:08 - will have noticed that in theum and yarn
04:10 - appear across the web development
04:12 - landscape not only in JavaScript centric
04:16 - development web pack works
04:20 - perfectly with NPM and yarn providing
04:22 - powerful features due to the vast number
04:25 - of libraries available for NPM and yarn
04:28 - web pack is perfect for importing
04:31 - resources and this leads to a good
04:34 - workflow pattern for development and
04:36 - design we can use webpack to interpret
04:41 - commands where native support for those
04:43 - isn't what it needs to be web pack can
04:48 - speed up development work with hm our
04:53 - hot module replacement your page doesn't
04:56 - need to trigger full reload just to
04:59 - reflect your changes on your JavaScript
05:01 - code CSS code can also benefit from HMR
05:08 - by adding CSS loaders in your web pack
05:11 - config this makes for fast development
05:16 - and cuts back the time it takes for the
05:18 - page to fully load while debugging web
05:23 - pack automates the process of
05:24 - downloading and including modules it is
05:27 - used often in frameworks and libraries
05:31 - you can actually see the benefits in
05:34 - using webpack especially if you're
05:36 - developing single page applications for
05:40 - react web pack can use transpilers such
05:44 - as babel alongside it to transpile JSX
05:47 - syntax into readable javascript code web
05:52 - pack gives you assurance of control over
05:55 - your build system web pack is
05:59 - open to various build systems but with
06:02 - Babel and treasure you will need to
06:04 - transpile es6 + code to make javascript
06:07 - run compatible with older browser
06:09 - versions web pack is also available as a
06:15 - node module which is often used in
06:17 - development mode in conjunction with HMR
06:22 - when used in the form of a node module
06:25 - it is also possible to use webpack with
06:27 - frameworks such as electron J s note
06:33 - electron J s is a runtime framework that
06:36 - allows a user to create desktop Suite
06:40 - applications with html5 CSS and
06:43 - JavaScript you are also able to use the
06:48 - build on-the-fly in production because
06:51 - node and chrome are available together
06:53 - inside one app for more complex builds
06:58 - tools like jest remove most of the
07:00 - boilerplate and allow development of
07:03 - tests with minimal configuration web
07:07 - pack is compatible with a variety of
07:08 - mocking tools which allow shaping of
07:11 - test environments web pack has a module
07:16 - resolution mechanism which assists tools
07:19 - running to test builds deployment
07:24 - outside of web pack can be done in an
07:26 - NPM script for example output public
07:31 - path property in web pack can be
07:33 - configured dynamically if you don't know
07:35 - before compilation and want to decide
07:37 - during compilation then this technique
07:40 - is useful web pack could consume most
07:44 - NPM packages without a problem web packs
07:47 - module resolution is versatile web pack
07:52 - can
07:53 - pache resolved modules when specific
07:55 - dependencies expect Global's webpack can
07:58 - inject them as needed using webpack can
08:03 - expose modules as Global's this is
08:05 - necessary for certain development
08:07 - tooling webpack deploys to production in
08:11 - a stable fashion you can't accidentally
08:13 - deploy code with missing images or
08:15 - outdated Styles webpack automatically
08:20 - changes file names to hashes of the file
08:22 - contents giving you CDN cache busting no
08:26 - more version issues when developing or
08:29 - building web pack aids in
08:33 - internationalization i18n and
08:36 - localization l10n are important problems
08:40 - if you target multiple markets with your
08:43 - application webpack supports multiple
08:47 - approaches to i18n as a starting point
08:50 - webpack can replace specific annotations
08:52 - although more sophisticated alternatives
08:55 - are available the problem of
08:58 - internationalization can be handled by
09:01 - web pack pushing translations to a
09:03 - server web pack can also allow you to
09:07 - handle translating the actual
09:09 - applications interface language through
09:12 - the same API finally given the state of
09:17 - browser support for various versions of
09:19 - JavaScript web pack is also useful in
09:22 - situations where it's not clear whether
09:25 - the native version will be smart for
09:26 - performance or not now
09:30 - those system development benefits
09:32 - covered let's get to the benefits to
09:35 - application performance webpack can
09:39 - perform fancy magic that results in good
09:42 - performance related capabilities for our
09:44 - websites webpack knows how to
09:48 - concatenate and compress our javascript
09:50 - every way it can be done thereby you can
09:55 - fix optimization issues without
09:58 - headaches it allows you to manage load
10:02 - order which isn't something you want to
10:05 - handle manually web pack aids indead
10:10 - asset elimination you only build only
10:14 - the images and CSS into your
10:17 - distribution folder that your
10:19 - application actually needs this is
10:21 - especially useful in CSS rules web pack
10:26 - allows easier code splitting for example
10:29 - say your file homepage J s only requires
10:32 - specific CSS files web pack can easily
10:36 - build a home page CSS file and so
10:39 - greatly reduce initial file size this is
10:43 - great control over how assets are
10:46 - processed an image below a certain size
10:49 - can be base64 encoded directly into your
10:53 - JavaScript for fewer HTTP requests if a
10:58 - JSON file is too big by a web pack you
11:01 - can load it from a URL you can require
11:04 - style dot less and it's automatically
11:08 - parsed by less into vanilla CSS web pack
11:13 - takes time and effort to master
11:15 - adequately but given time and care it
11:18 - will offer great speed benefits finally
11:22 - let's talk about the etc category for
11:25 - benefits of web pack the line between
11:29 - builder and task runner has become
11:31 - blurred thanks to community developed
11:34 - web pack plugins sometimes these plugins
11:38 - are used to perform tasks that are
11:40 - usually done outside of web pack such as
11:43 - cleaning the bill
11:44 - directory or deploying the build another
11:48 - example is the use of web pack to aid in
11:52 - setting up cutting-edge technologies
11:54 - such as IP FS interplanetary file system
11:58 - API ipfs is a system that aims to make
12:02 - local data accessible across a
12:04 - distributed network normally when using
12:09 - webpack our usual aim is to place the
12:11 - data on a remote server to make that
12:13 - same data available locally in order to
12:17 - do this web pack needs to have a bridge
12:19 - called a Shem over which it can
12:22 - transform data and then write that data
12:24 - to a local file system another
12:28 - interesting place that I recently
12:30 - encountered web pack playing a critical
12:33 - role was the high performance website
12:35 - framework gatsby j/s gatsby j/s
12:40 - leverages react babel and yes web pack
12:43 - to produce static websites with none of
12:45 - the usual limitations now that we
12:49 - covered the etc category let's spend a
12:51 - few moments talking about a little bit
12:54 - of criticism of how developers use tools
12:57 - like web pack large numbers of the
13:01 - developers rely very heavily on
13:03 - boilerplates to get their work done
13:06 - boilerplates is the term used to
13:09 - describe sections of code that with
13:11 - little or no alteration have to be
13:13 - included in many places it is a term
13:18 - more often used when referring to
13:20 - languages which are considered verbose
13:22 - that is the programmer must write a lot
13:24 - of code to do minimal jobs don't get me
13:28 - wrong
13:29 - boiler plates of various kinds are very
13:32 - important roles and in efficient
13:34 - development workflow
13:37 - but the use of boiler plates obfuscates
13:40 - how a system they are simplifying
13:42 - functions webpack capabilities without
13:48 - proper study can also feed bad developer
13:52 - habits but that's enough ranting about
13:56 - developer habits let's bring this lesson
13:58 - to it close if you're building a complex
14:01 - front-end application with many non code
14:04 - static assets such as CSS images fonts
14:08 - etc then yes web pack will give you
14:11 - great benefits if your application is
14:14 - small doesn't have many static assets
14:17 - and only needs to build one javascript
14:20 - file to serve to the client the web pack
14:22 - might not be for you in our next lesson
14:26 - we'll be continuing our discussion by
14:29 - looking at competitors to web pack until
14:33 - next time this is Matthew Raymer
14:35 - on behalf of Eddie onyx signing off
14:38 - thank you for watching don't forget to
14:41 - subscribe the channel if you like the
14:42 - video do give us a thumbs up and share
14:44 - it also check out amazing discounts and
14:46 - offers on our premium poses in the
14:48 - description below