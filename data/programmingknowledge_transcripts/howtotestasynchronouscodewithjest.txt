00:00 - hi guys in this video we're gonna learn
00:02 - how to run a test cases which is a
00:05 - synchronous process and we're gonna also
00:09 - configure our J's library because when I
00:12 - would like we are running it using NPM
00:14 - taste
00:15 - whenever the test cases are fulfilled or
00:18 - fair it's going to block out it's going
00:20 - to return to this command prompt so
00:24 - let's see how can we do this so in our
00:28 - package dot JSON just in our here in the
00:33 - script in the script in here the taste
00:37 - we are just gonna write chest space test
00:42 - a swatch what it will do like it will
00:46 - run as a Nordmann in here so we are
00:51 - gonna just run it npm test and in our
00:58 - math dot test Egeus we're gonna see how
01:01 - can we use a synchronous process in here
01:07 - so in here you can see in our command
01:10 - prompt let's say i am going to qu moved
01:14 - here so in here you can see let's so
01:19 - press W to watch more and here you can
01:22 - see that all the options are here like
01:25 - to run all the tests we can use a to run
01:30 - only the Freddy test you can use F and
01:33 - these are other options and you can see
01:37 - in the documentation if you want to so
01:40 - if we type a it will down again all the
01:43 - test cases and if you want to see only
01:47 - the frailties as a student you can use F
01:51 - so yeah that's how we can use the just
01:57 - as a as to restart function couple now
02:02 - we are going to see how can we use a
02:04 - test a synchronous process we can use
02:07 - here so let's see so test
02:12 - a synchronous let's see a sink and we
02:20 - are using callback here and in here uses
02:25 - when you set timeout
02:30 - set timeout and we're gonna call back
02:33 - and we're gonna call back and let's see
02:40 - give two second so 2,000 milliseconds
02:45 - and here we are just going to use the
02:49 - expect so if let's say it is wrong let's
02:53 - say aspect 1.2 b2 which is a failed test
02:59 - cases but now if we run it just save it
03:04 - here and it is going to run in here and
03:13 - you will see that it here it has been
03:17 - passed well it should not be passed
03:19 - because it is a failing test cases so
03:24 - that's why it is giving an error so how
03:28 - can we do this how can we collect this
03:30 - so in here the test file just like we
03:35 - give one say to give an argument and
03:39 - let's see you can give any argument
03:41 - Indian I'm giving them done in the
03:44 - previous like in the rest API we are
03:46 - using the next value for the next
03:49 - argument as a middleware so in here we
03:53 - are using done and in here done it says
03:59 - like whenever it's reading to a turn
04:03 - like whenever see that done argument
04:07 - then it's going to be like see that all
04:11 - the test cases has been passed so now in
04:14 - here you can see that it is giving an
04:16 - error and it is saying it expected to
04:22 - but received one
04:26 - so this is some small thing that we can
04:28 - do but we are using I think of weight
04:32 - for a proper use so this is not how we
04:34 - are going to use so first of all we are
04:37 - going to let's create one promise
04:42 - function in here so we're gonna use add
04:45 - function in here as a promise and we're
04:49 - going to argument I said a B and what it
04:53 - will return it will return a promise
04:56 - so if we use return new promise and it
05:02 - it is taking two argument that is
05:05 - resolved and preset and yeah now in here
05:18 - we are going to set per set they are not
05:22 - which will take let's say two second and
05:28 - here we are just gonna say that if a is
05:33 - less than zero or B is less than zero
05:38 - then we're gonna reject means it is
05:42 - going to be fair to reset new error
05:48 - number should be so to be non-negative
05:59 - which is not if it is negative so if it
06:03 - is true then if it is it means it will
06:07 - not give any error and we're gonna
06:09 - resolve it to give some resolve a plus B
06:14 - so this is our promise function and we
06:19 - know that it is going to give twelve
06:21 - cases we'll test cases where you cannot
06:24 - just uncommon topped comment out and we
06:28 - are going to just create a new test
06:30 - cases in here and let's say give the
06:33 - name suit Ric turn son of
06:39 - to number so in here we're gonna use the
06:46 - done function here first we're gonna see
06:48 - the primitive one like we are going to
06:52 - use the done and and in here we're just
07:03 - gonna call the function in here so what
07:06 - it will return means we are gonna use
07:08 - the Dan function to add we're gonna add
07:13 - in three and two and then we are calling
07:19 - tan which will give the sum and what we
07:25 - expect we expect some dot to be five
07:32 - yeah
07:34 - we are expecting s to be 5 now if we run
07:39 - it it will not give any error because we
07:46 - haven't used to done function in here
07:50 - yeah you can see that it is not giving
07:52 - an error
07:53 - oh yeah yeah just to use W and just use
08:01 - F in here yeah it's giving an error so
08:11 - we are gonna use the done here and now
08:15 - if you run it you can see in here that
08:21 - it has passed all the test cases suit
08:25 - calculate total tips would calculate all
08:27 - the solutions sum of two numbers now in
08:30 - here this is the old-fashioned way we
08:32 - are going to use the async await
08:33 - function so how can we use this so same
08:38 - thing we are going to use we are going
08:40 - to see in here that it's then assessing
08:43 - function in here and also also there is
08:50 - no need for this no there is no need
08:52 - food as
08:53 - in turn and we are gonna just because it
09:00 - returns a promise then we're just gonna
09:03 - use expect Const sum is equal to we can
09:06 - use in here away from same India and
09:09 - they use the add function here and used
09:13 - to ten twenty and we know what it will
09:16 - return it will return to expect some dot
09:21 - to be thirty and now if we run it we can
09:31 - see in here that the test cases has been
09:37 - passed and we are using that I think a
09:40 - bit function and we don't need a turn in
09:44 - here just as a argument in here