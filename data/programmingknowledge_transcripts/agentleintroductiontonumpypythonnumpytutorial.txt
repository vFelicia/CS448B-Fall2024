00:00 - hey guys welcome to the video on numpy
00:02 - tutorial for beginners so first of all
00:04 - what is numpy so numpy is the
00:08 - fundamental package needed for
00:10 - scientific computing with python it is
00:14 - an open source library which contains a
00:17 - powerful and dimensional array object
00:20 - which we will see in the later videos
00:22 - and it also contains basic linear
00:26 - algebra functions basic Fourier
00:29 - transform functions sophisticated random
00:32 - number capabilities and also this
00:34 - library contains tools for integrating
00:38 - with the languages like C and C++ code
00:42 - now this library also contains advanced
00:45 - array slicing methods to select array
00:48 - elements and it also have several
00:51 - convenient array reshaping methods so in
00:55 - other words we can say that numpy is a
00:59 - Python library for array oriented
01:02 - computing besides it's obvious
01:05 - scientific uses numpy can also be used
01:08 - as an efficient multi-dimensional
01:11 - container for generic data now as I said
01:15 - numpy has a powerful N dimensional array
01:20 - object this object is an N dimensional
01:23 - array of homogeneous data types with
01:27 - many operations being performed in
01:30 - compiled code for performance so this
01:34 - library gives better performance when
01:37 - you use it with array oriented computing
01:40 - now there are several important
01:43 - differences between numpy arrays and the
01:46 - Python standard sequences like lists or
01:50 - tuples which we are going to see in the
01:53 - next video
01:54 - also number arrays have a fixed size
01:58 - modifying the size means creating a new
02:01 - array in numpy additionally numpy arrays
02:05 - must be of the same data type but this
02:09 - can include python object also now the
02:13 - next question
02:13 - you may ask is numpy is suited for what
02:17 - kind of applications so numpy can be
02:20 - used for many applications including
02:23 - image processing signal processing
02:25 - linear algebra and multiple other
02:30 - functionality is included in numpy so it
02:34 - can be used for several other
02:36 - functionalities so it is also said that
02:39 - number is the foundation of the Python
02:43 - scientific stick now you may also ask
02:46 - why do we need numpy so we already have
02:51 - sequences in python such as lists or
02:54 - tuples or many other sequences to handle
02:58 - data with the standard Python library so
03:02 - why do we actually need an umpire so the
03:05 - answer is Python does numerical
03:08 - computations slowly in comparison to
03:11 - numpy so whenever you want to do matrix
03:15 - computation for example you have a
03:19 - matrix of thousand Cross thousand and
03:22 - you want to multiply this matrix then
03:27 - python triple loop takes more than ten
03:30 - minutes
03:31 - in comparison to numpy which only takes
03:34 - around 0.3 seconds so whenever you want
03:39 - to do matrix computation or n
03:41 - dimensional array computation numpy
03:44 - library is more efficient than even the
03:49 - Python standard library and that's why
03:52 - it is used so this was a brief
03:55 - introduction about numpy now how can be
03:58 - installed numpy on our Windows operating
04:02 - system or Mac operating system or Linux
04:06 - operating system so right now I am
04:08 - working on a Windows operating system
04:10 - but the procedure for installing numpy
04:13 - will be the same for Mac or Linux
04:16 - operating system so the basic thing
04:19 - which you need to install numpy library
04:23 - is PIP so if you have pip
04:27 - you will be able to easily install numpy
04:30 - now on Windows whenever you have
04:33 - installed Python on your Windows
04:36 - operating system pip was already
04:38 - installed on your Windows operating
04:40 - system with the installation of Python
04:43 - on other operating systems like Mac and
04:46 - Linux you can install pip and then
04:49 - install numpy using pip now those of you
04:53 - who don't know what is pip pip is a
04:56 - package management system which is used
04:59 - to install and manage software packages
05:02 - written in Python so let's install
05:05 - number using pepper so I'm going to give
05:08 - this command pip and then install and
05:12 - then whatever package you want to
05:14 - install so for example I want to install
05:16 - numpy
05:17 - so I will write number here so pip
05:19 - install numpy and then press Enter which
05:22 - is going to install numpy on my Windows
05:25 - operating system so now you can see the
05:28 - process of installing of numpy library
05:31 - is started by pip so you can see now
05:35 - numpy is installed on my Windows
05:37 - operating system so now I can just go
05:41 - into the Python interpreter so I will
05:43 - just write Python and then press Enter
05:46 - which will allow me to use the numpy
05:50 - library so I'm going to just write
05:53 - import numpy as NP and then press Enter
06:00 - which is going to give me no error if
06:04 - you give this command on your Python
06:07 - interpreter without installing numpy
06:09 - this import is going to give you some
06:13 - kind of error now let me give you a very
06:17 - basic example of converting a normal
06:21 - list into a number I array so let me
06:26 - just create a normal list I'm going to
06:30 - name it as n list which stands for
06:33 - normal list and then I'm going to assign
06:36 - some value to this list so let's add
06:39 - some value
06:41 - here let's say one two three four five
06:45 - and six
06:46 - so there are six elements inside our
06:50 - list and then I'm going to press ENTER
06:52 - now in order to convert this list into
06:56 - the numpy array I'm going to just create
07:00 - one more variable I'm going to say it is
07:03 - a NP array and then I'm going to convert
07:09 - this list into an array so I'm going to
07:12 - use this NP keyboard dot array and then
07:17 - as an argument I'm going to pass my list
07:22 - into this array function so n list is
07:26 - the name of the list and then press
07:29 - Enter
07:30 - and now when I see the content of an
07:33 - array it's going to give me the number
07:38 - array now I can also use print method in
07:42 - order to print the content of NP array
07:46 - so let's do that and you can see it's
07:49 - going to print the content of numpy
07:52 - array now one thing to notice here is
07:55 - that these elements inside this array
08:00 - does not contain comma between these
08:04 - elements because it's a special array
08:08 - which is called ND array and num pies
08:11 - main object is the homogeneous
08:14 - multi-dimensional array called ND array
08:17 - and this is that kind of array so this
08:20 - was the very basic example of num by now
08:24 - if you have installed anaconda package
08:27 - on your Windows operating system or Mac
08:30 - operating system or Linux operating
08:32 - system
08:32 - you don't need pip to install numpy you
08:36 - can directly import numpy inside your
08:40 - Jupiter notebook or Spyder IDE and start
08:44 - using it now if you want to use numpy on
08:48 - pycharm let me show you how to use numpy
08:52 - on your pycharm
08:54 - i
08:55 - so this is the pycharm IDE and here I
08:58 - have created a blank project which is
09:02 - called numpy samples now in order to add
09:05 - numpy to your project what you need to
09:08 - do is you need to just click on this
09:11 - file option on your PyCharm IDE and then
09:14 - you just need to go to the settings and
09:16 - once the settings window opens what you
09:20 - need to do is you need to go to the
09:23 - project colon whatever is the name of
09:26 - your project so go under project and
09:29 - whatever is the name of your project and
09:32 - then click on project interpreter so I
09:36 - have already clicked on this project
09:39 - interpreter and here you can see pip is
09:42 - there and setup tools is there so here
09:45 - on the right hand side you will see this
09:48 - plus symbol so you just need to click on
09:50 - this plus symbol and once you click on
09:53 - this plus symbol its just search for
09:56 - numpy here so I'm going to search for
09:58 - numpy and then you will be able to see
10:02 - this numpy here and the version which
10:05 - will be installed on your PI chum IDE so
10:10 - on the right hand side you will see the
10:11 - description about numpy and whatever
10:15 - version which will be installed so at
10:18 - the time of making this video one point
10:20 - sixteen point zero will be available for
10:23 - pycharm so I'm going to just click on
10:25 - install package this is going to install
10:28 - the numpy package for this project on
10:31 - your pycharm ide
10:33 - and once you see this green bar here
10:36 - which says package numpy installed
10:38 - successfully you can close this window
10:40 - and then click OK here and now you can
10:44 - create a python file so let me create a
10:47 - very simple python file and inside this
10:52 - python file what i'm going to do is i'm
10:54 - going to just write import numpy as NP
10:58 - and then let's create a list so I'm
11:01 - going to name my list as L is equal to
11:05 - let's add just two elements one comma
11:09 - to here and then in order to convert
11:11 - this list into a number list we just
11:15 - need to use NP dot array and then pass
11:20 - our list to this array function and then
11:24 - you will be able to print the content of
11:26 - NP array using the print function so I'm
11:30 - going to just write and P list inside
11:33 - the print function and let's run this
11:36 - script by just right clicking and just
11:40 - selecting the run whatever file name you
11:43 - have and you will be able to see the
11:46 - output here in that terminal below so
11:49 - this is how you can install numpy on
11:51 - your PyCharm ide so you can use pycharm
11:54 - IDE or anaconda distribution or even you
11:58 - can use your plain terminal in order to
12:02 - develop your numpy script now to go
12:06 - ahead I will be using the pycharm ide
12:09 - but you are free to use any other ide or
12:13 - the editor so in the pycharm ide what
12:16 - i'm going to do first is I'm going to
12:19 - just open the Python console by clicking
12:21 - on this symbol which says python console
12:24 - and i'm going to maximize this console
12:26 - because we will be using this python
12:29 - console for this lesson so we have
12:33 - already added the numpy library to our
12:35 - project and we can import the numpy
12:39 - library to the python console also so
12:41 - I'm going to just write import numpy as
12:45 - NP and then what we are going to do in
12:49 - this video is we are going to try to
12:51 - compare the Python list to the numpy
12:54 - array and we will see the similarities
12:56 - or the difference between the numpy
12:59 - array and the Python list so to start
13:02 - with I'm going to declare a Python list
13:05 - and let's assign some values to the list
13:09 - let's say 1 2 3 and I'm going to declare
13:12 - the numpy array and I'm going to name it
13:14 - as an A and we are going to just say NP
13:19 - dot array and we will pass the list
13:22 - content
13:22 - to the array function so we have numpy
13:27 - array and the Python list and they
13:30 - contain same number of elements now what
13:34 - is the basic operation we perform with
13:36 - the list or an array we iterate over the
13:39 - list and the array so we are going to
13:43 - iterate over the list first of all so
13:46 - for I in L and we are going to print the
13:50 - value of I and let's see what happens
13:53 - when we iterate over the list so a
13:56 - result is expected it's going to print
13:59 - the content of the list and same we will
14:02 - do with our numpy array which is to
14:06 - iterate over this array and the result
14:10 - is same as the list so we can iterate
14:14 - over the numpy array or the Python list
14:17 - using a for loop so at this point these
14:20 - two things look similar now let's try to
14:24 - add some elements to the list and the
14:27 - number array so first of all in order to
14:31 - add something to the list let's say I'm
14:33 - going to declare the variable L 1 and
14:37 - I'm going to add something to the list
14:40 - and this we can do with the
14:43 - concatenation operator so let's say we
14:46 - want to add 4 to our list and then
14:50 - transfer the result into L 1 and when we
14:54 - see the content of L 1 you will be able
14:56 - to see that 4 is added or appended to
15:00 - the list now there is one more way in
15:02 - which you can append an element to the
15:05 - list and that is by using the append
15:08 - function so let's say I want to append 5
15:12 - to this list L 1 I can do that and see
15:16 - the content of the list so now our list
15:19 - contains 1 2 3 4 5 so 5 elements let's
15:23 - try to do the same with the numpy array
15:26 - so I'm going to just use the and a 1 and
15:31 - then I'm going to try to concatenate
15:36 - the an a with some elements so let's try
15:40 - to add four to the number array and I'm
15:43 - going to just see the content of any one
15:46 - and you can see this is not the expected
15:48 - result so in case of numpy array when we
15:52 - use this plus operator it will do the
15:55 - vector addition so basically what we are
15:58 - doing is we are adding four to eat and
16:02 - every element of the array so as we
16:04 - already know that the content of the
16:06 - numpy array was one two three and when
16:09 - we add four to each element it becomes
16:11 - five six and seven and that is the
16:14 - result you are seeing here so in this
16:17 - way numpy array and list behave little
16:20 - bit differently
16:21 - now let's try to use the append method
16:23 - on the numpy array so I'm going to just
16:26 - write any dot append and we will try to
16:31 - append let's say eight to our list and
16:34 - then press ENTER and it's going to give
16:36 - us error because this append method is
16:39 - not even there inside the numpy array so
16:43 - at this point it looks like that lists
16:47 - are winning over the number array but as
16:51 - soon as we try to do the vector addition
16:54 - or matrix operations we will see the
16:58 - differences between the number array and
17:01 - the Python list so as I told you in the
17:04 - last video that generally we use numpy
17:09 - to do operation on the n dimensional
17:12 - array so for example if you want to do
17:15 - the vector addition of let's say numpy
17:18 - array to itself what we can do here is
17:21 - I'm going to declare one more variable
17:23 - and a two and then we can do na plus and
17:27 - a and it's going to give us the vector
17:31 - addition of these two arrays so I'm
17:33 - going to just see the content of n a2
17:37 - and you can see it has given us the
17:39 - vector addition of any plus na which is
17:42 - 1 plus 1 is equal to 2 2 plus 2 is equal
17:45 - to 4 and 3 plus 3 is equal to 6 now in
17:49 - case
17:50 - of Lists as you have already seen that
17:52 - when we perform the concatenation
17:55 - operator it's going to just append to
17:58 - itself so let's try to do that also so
18:02 - I'm going to declare the hell to
18:04 - variable and I'm going to just do the
18:07 - concatenation of L plus L and when we
18:10 - try to see the content of L 2 it's just
18:13 - the appending of those two lists but
18:16 - it's not the vector addition so if you
18:19 - want to perform the vector addition on
18:21 - the list what we can do is we can just
18:24 - define L 3 variable and we will assign
18:28 - the empty list here and then we will
18:31 - iterate over the list using the for loop
18:34 - so for I in L and then we are going to
18:39 - just say L 3 dot append and we are going
18:43 - to append I plus I which is this
18:47 - variable to the list three or L three
18:52 - variable and then when we see the
18:54 - content of L 3 you will see the expected
18:58 - result which is 2 4 6 which is the
19:00 - vector addition of L plus L now let's
19:04 - try to multiply a scalar with the vector
19:08 - so we have an umpire array and I will
19:11 - just multiply it by 2 so I'm going to
19:15 - just write 2 Astrix and a and then press
19:19 - ENTER and I can see the error because n
19:21 - a should be in capital so once again I'm
19:24 - going to just write 2 multiplied by n a
19:27 - and then press ENTER and it's going to
19:29 - give us the multiplication of a scalar
19:32 - which is 2 with the vector which is
19:34 - numpy array the similar operation when
19:37 - we perform on the list let's try to do
19:40 - that so 2 multiplied by L and then press
19:44 - Enter you can see the result is the
19:47 - repetition of L multiplied by whatever
19:50 - scalar you right here so L is just
19:53 - repeated two times in case of
19:56 - multiplication so in case you want to do
19:59 - the scalar multiplication with the
20:02 - vector once again you need
20:04 - to iterate over the list and you need to
20:07 - multiply each and every element of the
20:10 - list by two as we have done with the
20:13 - vector addition let's try something else
20:15 - so let's say we want to find out the
20:19 - power of something so I'm going to just
20:21 - say an A and then we already know that
20:25 - when we use SS tricks it means any to
20:28 - the power whatever we write here so any
20:30 - to the power two and what we get here is
20:34 - the squared result of every element so
20:38 - one four nine here and when we do the
20:42 - same thing with the list it's going to
20:45 - give us some errors so let's see what
20:47 - error we get and you can see this
20:50 - operation is not supported so we can not
20:52 - perform this kind of power operation on
20:55 - our list so if you want to perform this
20:58 - power operation on the list you need to
21:01 - use the for loop once again and in that
21:05 - way numpy arrays are a little bit easier
21:08 - to use and you just need to use the
21:12 - operation whatever you want to perform
21:14 - and this operation will be performed on
21:17 - each and every element of the list now
21:21 - you can imagine if you want to perform
21:22 - the similar operation vector addition or
21:26 - addition of scaler and the vector or the
21:30 - power operation to each and every
21:31 - element of matrix which is a
21:35 - two-dimensional array then how difficult
21:38 - it will be to perform on a list and how
21:42 - easy it is to perform on numpy array so
21:47 - if you want to square each and every
21:49 - element of the list you can just write
21:51 - 4i in L and then what you can do is you
21:56 - can just square each and every element
21:59 - of the list so I'm going to just write
22:01 - print here and then I'm going to just
22:05 - say I multiplied by I and it's going to
22:08 - give us the square result of each and
22:11 - every element of the list which is 1 4 9
22:14 - and you can just obtain
22:18 - this result to a new list which will
22:20 - give you the similar result as we have
22:23 - seen in the case of numpy array now
22:26 - let's say you want to perform the square
22:28 - root on each and every element you can
22:31 - use s qrt function and then pass your an
22:37 - umpire array variable to it it's going
22:39 - to give you the square root of each and
22:41 - every element you can also find out the
22:44 - log of each and every element so you can
22:47 - just say log and then pass the numpy
22:50 - array here and you will find out the log
22:53 - of each and every element you can even
22:56 - find the exponential of each and every
22:59 - element using the exp function and then
23:03 - passing the numpy array to it and you
23:06 - can see it has given us the exponential
23:09 - of each and every element so here we
23:11 - have seen some similarities and some
23:13 - differences between the Python lists and
23:16 - numpy arrays but this doesn't mean that
23:20 - numpy array are better or Python lists
23:24 - are not better both have their
23:27 - importance
23:28 - sometimes you need a Python list and
23:30 - other times you need numpy arrays
23:33 - usually you can treat a Python list as
23:37 - an array but you can treat numpy array
23:40 - as a vector that means you can perform
23:42 - the vector operation on the numpy array
23:46 - and as we have already seen to do
23:49 - operations on every element of the list
23:52 - we need to use the for loop and in case
23:55 - of numpy array we can do it in much
23:59 - easier way loops are slower than numpy
24:02 - array operations that's why also we use
24:06 - number arrays so at the end I will just
24:09 - say that if you want to perform these
24:11 - kind of mathematical operations on a
24:14 - list or an array numpy is not just more
24:18 - efficient it is more convenient to use
24:21 - because you get a lot of vector and
24:24 - matrix operations for free which
24:26 - sometimes allows us to avoid unnecessary
24:28 - work which is required
24:31 - in the case of Python list in this video
24:33 - we will see some of the basic operations
24:35 - which are related to numpy arrays so
24:39 - let's get started I have already
24:40 - imported numpy into this Python console
24:44 - and now I'm going to create few numpy
24:47 - arrays so first of all let's create the
24:50 - first numpy array and this array will be
24:55 - the 1 dimensional array and this will
24:57 - contain 3 elements 1 2 3 pretty simple
25:01 - we are going to create the second numpy
25:04 - array and this time this array is going
25:06 - to take two dimensions so first of all
25:09 - inside the square bracket I'm going to
25:12 - add one more square bracket and here I'm
25:15 - going to just write 1 comma 2
25:24 - now as we have talked in the last video
25:27 - that numpy array is somewhat similar to
25:32 - Python list in terms of iterating over
25:36 - them so this means they have some index
25:40 - so we can just fetch an element of an
25:44 - array using its index so let's say I
25:48 - want to get the first element which is
25:52 - one from the array a then I can just
25:56 - write a square bracket 0 which will give
26:00 - me the element at 0th index so working
26:03 - with this one dimensional array is
26:06 - simple we can just give the index here
26:08 - and we give you the element related to
26:11 - it but when it comes to two-dimensional
26:15 - array what we can do so similar to the
26:18 - list when we just want to fetch the 0th
26:23 - element of the list it's going to give
26:25 - us this result which is the first
26:29 - element of the array which is this list
26:32 - 1 comma 2 now let's say you want to get
26:35 - this element which is 1 which is at
26:37 - first row and first column then what you
26:41 - can do here is you can add one more
26:43 - index which means we want to get the
26:46 - element at the first row and the first
26:49 - column and it's going to give us one
26:52 - similarly you can give any other index
26:55 - and it's going to give you the element
26:57 - related to it and you need to notice one
26:59 - thing here is because the index starts
27:02 - from 0 so when we give 1 comma 1 here
27:06 - it's going to give us 4 now there is a
27:09 - function called matrix also in the numpy
27:13 - which we can use instead of array which
27:16 - is going to give us the
27:18 - multi-dimensional array so I'm going to
27:21 - just show you how you can create the
27:25 - matrix using numpy so you can just write
27:28 - and p dot matrix and here you can give
27:33 - the same type of elements let's just
27:37 - copy this array and then paste it here
27:41 - and when I print the content of M it's
27:46 - going to give us the same result as we
27:50 - get in the case of array now in the
27:53 - numpy documentation it is recommended
27:55 - that we use arrays so we will not bother
27:59 - much about the matrix but I just wanted
28:02 - to show you that there is a method
28:05 - called matrix which you can use to
28:08 - create matrix or multi-dimensional array
28:11 - now there is one more notation which you
28:14 - can use to get the similar kind of
28:17 - result for getting some value of some
28:21 - position and this time what I'm going to
28:23 - do is I'm going to use B and then let's
28:26 - say I want to get the element at 0 index
28:30 - right so I'm going to just write 0 comma
28:33 - 0 and notice here I have used two square
28:37 - brackets but there is a shorter notation
28:39 - which is 0 comma 0 which appears more
28:42 - like matrix operation so when I do this
28:46 - it's going to give me 1 which is the
28:48 - same result as we have seen here in the
28:51 - case of indexes similarly when I do B 1
28:56 - comma 1 it's going to give us the result
28:59 - for now as I said numpy array behaves
29:02 - similar to the numpy matrix that means
29:06 - we can perform the matrix operations on
29:09 - the numpy array also so what I'm going
29:12 - to do is I'm going to just say B dot T
29:16 - which is going to give us the transpose
29:19 - of this matrix so let's print out the
29:23 - content of the numpy array B also so the
29:27 - original content of the numpy array b
29:30 - was this one and after transposing the
29:33 - result is this one now there is a
29:36 - property called shape which we can use
29:38 - to get the dimension of the numpy array
29:41 - so let's say I'm going to just write B
29:44 - dot shape here and then press ENTER and
29:49 - it's going to give us
29:51 - result which is 3 comma 2 so this array
29:56 - is having three rows and two columns one
30:02 - row to row and three row and number of
30:05 - column is one and two now let's say we
30:08 - want to transfer the transpose of B into
30:12 - a new variable so I'm going to just
30:13 - write B dot T and assign it to C and now
30:17 - we want to see the shape of this C numpy
30:23 - array it's going to give us this result
30:25 - which is 2 comma 3 which means that now
30:30 - C array contains 2 rows and 3 columns
30:34 - now when I have created these two arrays
30:37 - a and B I told that a is the 1
30:42 - dimensional array and B is 2 dimensional
30:45 - array and there is a property also to
30:48 - verify this and it's going to give us
30:50 - the dimension number of a particular and
30:54 - the array and this property is called
30:56 - ending so I'm going to just use B dot
31:00 - and them and then press ENTER and it
31:04 - says that dimension number of B is 2
31:08 - which means it's a 2 dimensional array
31:10 - and when I do the same operation with
31:13 - the array 1 then it's going to give us 1
31:19 - which means that this a array have the
31:24 - dimension number of 1 which is one
31:26 - dimensional array now there is a
31:27 - property called a size so I'm going to
31:30 - just write B dot size and this property
31:33 - size is going to give us the number of
31:35 - all the element present in the array so
31:38 - this array B contains 6 element 1 2 3 4
31:42 - 5 6 that's why it gives us results 6
31:46 - similar operation when we do on the
31:50 - array a then it's going to give us 3
31:53 - because it only contains 3 elements
31:56 - total now there is one more property
31:59 - which is called d type it's going to
32:00 - give us the data type of an array so I'm
32:04 - going to
32:05 - just write a dot d-type and it's going
32:09 - to give us d type is equal to int 32
32:12 - also in the case of B it's going to give
32:17 - us int 32 so let's print out the type of
32:21 - the array B and it's going to also give
32:25 - us in 32 that means each and every
32:28 - element of this array is of data type
32:32 - integer now in order to create the array
32:37 - with the floating values what we can do
32:39 - here is so I'm going to just declare one
32:42 - more variable D and then I'm going to
32:45 - create one more array and this time I
32:48 - want to create the array with the
32:50 - floating values so what you can do here
32:53 - is as you may expect that you can
32:57 - provide the floating values here 1.2 and
33:01 - then I'm going to press Enter
33:03 - and when I just want to know the data
33:07 - type of this D it's going to give us
33:10 - this result which is float64 or there is
33:14 - one more way of creating an array with
33:18 - floating points which is NP dot array
33:21 - and then what you can do is let's say we
33:25 - just provide one and two here and you
33:28 - want to convert the array of integer
33:32 - into the array of floats then what you
33:35 - can do here is you can provide comma and
33:38 - provide one more argument which is the
33:41 - type and then provide the value of it so
33:45 - n P dot float64 and then press ENTER and
33:51 - once you see the content of this array E
33:56 - it's going to give us this kind of
33:58 - notation one point two point and this
34:01 - means the array contains float64 values
34:04 - so this we can confirm from the data
34:08 - type of E and you can see it contains
34:11 - elements of type float 64 now there is
34:16 - one more property of
34:18 - numpy array which we can use here is
34:21 - item size so this is a property and it's
34:25 - going to give us the size of each and
34:28 - every element of this array so because
34:32 - this RAB contains integers and we all
34:36 - know that integer takes four bytes and
34:39 - that's what it's showing here in case an
34:43 - array contains floating value let's say
34:45 - this e which contains floating values
34:48 - let's see the item size of this array e
34:52 - it's going to give us the result 8 which
34:56 - means that the size of each element in
34:58 - the array in byte is 8 now there are
35:02 - some basic function available for the
35:05 - numpy array so let me print out the
35:07 - content of B once again so this is our B
35:11 - numpy array and let's say we want to
35:14 - find out the minimum of all the elements
35:18 - present inside this array so we can use
35:21 - this method a dot min which is going to
35:24 - give us the minimum value and to get the
35:26 - maximum value you can just write a dot
35:29 - max function and it's going to give us
35:32 - the maximum of the array a now similarly
35:36 - we can find the minimum of the array B
35:40 - also so min function which is going to
35:43 - give us the minimum value present inside
35:46 - the array B and to get the maximum value
35:49 - you can just write B dot max it's going
35:53 - to give us the maximum value present
35:55 - inside this array which is 6 which is
35:58 - this one if you want to get the sum of
36:00 - elements you can use the sum function so
36:03 - a dot sum which is going to give us the
36:06 - sum of the array a and B dot sum which
36:11 - is going to give us the sum of the array
36:14 - B now let's say you want to find out the
36:16 - sum of a particular axis so when you see
36:19 - vertically this is the axis 0 and when
36:23 - you see the array horizontally this is
36:26 - the axis once so let's say we want to
36:29 - find out the sum of
36:31 - matrix B and we want to find out the sum
36:34 - of X s0 so I'm going to just write X s
36:39 - is equal to 0 here
36:41 - and then press ENTER and you can see it
36:44 - gives us 9 and 12 so from where does
36:47 - this 9 and 12 come from one plus three
36:51 - is equal to four and four plus five is
36:54 - equal to nine so this is the sum of
36:56 - these three elements and similarly
37:00 - twelve is the sum of these three
37:02 - elements and because we have said that
37:05 - we want the sum of X s is equal to zero
37:07 - which is the vertical sum of the array
37:11 - elements now in case when I write here X
37:15 - is 2 equal to 1 it's going to give us
37:18 - this result which is the sum in
37:22 - horizontal way which is called the axis
37:24 - 1 so 1 plus 2 is equal to 3 3 plus 4 is
37:28 - equal to 7 and 5 plus 6 is equal to 11
37:32 - so this is called the axis 1 and when
37:36 - you see vertically it's called the axis
37:38 - 0 so these are some of the basic
37:41 - properties and methods related to numpy
37:44 - arrays in this video I'm going to show
37:46 - you how you can use numpy to create some
37:50 - specific array and also we will see how
37:55 - we can reshape or numpy array and some
37:58 - of the properties related to shaping
38:00 - your arrays so first of all let me show
38:04 - you the first method and this method is
38:07 - and B dot zeroes and if you have guessed
38:11 - correctly this method we use to
38:14 - initialize a specific array with some
38:17 - dimension so we are going to give some
38:19 - dimension here as an argument so let's
38:21 - say 2 by 3 and this is going to give us
38:25 - an array of specific dimension and all
38:29 - the values inside this array are zeros
38:34 - so all the values or elements which this
38:37 - array contains are all zeros there is
38:40 - one more method which is called NP dot
38:43 - once
38:45 - here you can give the same type of
38:47 - argument let's say three by two and it
38:51 - this is going to give you an array all
38:53 - initialized with the value one so you
38:57 - can see all the values here are one now
39:01 - if you want to initialize the value with
39:04 - some data type you can also use let's
39:07 - say NP dot once and you can provide an
39:10 - extra argument here which is called D
39:14 - type is equal to so just write the type
39:17 - is equal to and whatever data type you
39:20 - want to give here you can provide here
39:22 - so let's say n P dot in 16 and this D
39:28 - type argument is going to make sure that
39:30 - this one is of this data type now there
39:35 - is one more method which is called NP
39:38 - dot empty so this method you can use to
39:42 - provide some shape let's give three by
39:46 - three and this empty method is used to
39:50 - create uninitialized data so the content
39:53 - is undefined and once again I'm going to
39:56 - give the same command it's going to give
39:58 - us the array of these dimensions and
40:00 - here also you can provide the D type let
40:03 - me give the list here you can also give
40:05 - the list instead of this tuple and then
40:09 - as an extra argument you can provide
40:11 - that D type is equal to NP dot into 16
40:17 - and then plus enter and you can see now
40:20 - it's going to initialize these values
40:23 - with the random integers once again when
40:26 - you give the list without this argument
40:29 - D type and I'm going to just provide
40:32 - some dimensions here in the form of list
40:35 - it's going to once again gave us this
40:38 - dimension with all ones but always
40:41 - remember that empty unlike zero does not
40:44 - set the array values to zero and this
40:47 - means that this may therefore be
40:49 - marginally faster now the next method I
40:52 - want to show here is the arrange method
40:55 - to create an array of particular
40:59 - so here you can provide some range let's
41:02 - say we want to provide the range from
41:05 - one to five and then press Enter
41:08 - now this arrange acts similar to the
41:11 - range method in Python so it's going to
41:15 - create this array but it's going to
41:19 - exclude this five this is the property
41:21 - of range also you can also provide the
41:24 - interval in which you want to see this
41:28 - array so you can just say I want to see
41:30 - this array in the interval of 0.5 then
41:33 - you will get the array in the interval
41:36 - of 0.5 or in the steps of 0.5 now there
41:40 - is one more method which is called NP
41:42 - dot linspace and this method is used to
41:47 - create an array by specifying the range
41:50 - and the number of elements so first of
41:53 - all we are going to provide the range so
41:55 - once again I'm going to provide the
41:56 - range between 1 to 5 and then press
42:00 - ENTER so you can see in the result it
42:03 - returns the evenly spaced number over
42:06 - the specified interval and in our case
42:10 - this interval is 1 to 5 and we got 50
42:14 - values which are evenly spaced values
42:18 - you can also provide an extra argument
42:20 - in this function and this is the number
42:23 - of samples you want to generate the
42:26 - default sample is 50 as you have seen
42:28 - here this is the default sample so if
42:31 - you don't provide any number here it
42:34 - will generate that evenly spaced array
42:38 - of sample 50 but if you want to provide
42:41 - your specific number let's say we want
42:44 - to just generate an array of 10 values
42:46 - then we can provide this third parameter
42:50 - here and now you will just get the array
42:54 - of 10 evenly-spaced values once again if
42:59 - you provide here 5 it's going to give
43:01 - you only 5 evenly spaced value which is
43:05 - 1 2 3 4 5 if you want to create an array
43:08 - of random numbers you can use NP dot
43:11 - not random and provide your dimensions
43:14 - here and what you will get in return is
43:16 - an array of random numbers which are in
43:19 - between 0 & 1 now let me show you how
43:23 - you can reshape an array so I'm going to
43:26 - create an array of zeros so let me just
43:30 - assign this result to our variable let's
43:32 - say this is C variable so first of all
43:36 - let's see the content of this array C
43:39 - and now I want to reshape this array so
43:43 - there is a method called r dot reshape
43:46 - which you can use to change the
43:49 - dimension of this array so earlier this
43:53 - array was of dimension 2 by 3 and now I
43:57 - want to change the dimension to 3 by 2
44:00 - let's say so now once you do this the
44:05 - array dimension will be changed to 3 by
44:08 - 2 which means 3 rows and 2 columns you
44:12 - can also change it to let's say 6 by 1
44:15 - so I'm going to just say 6 by 1 and this
44:19 - is going to give you an array of 6 by 1
44:22 - but you need to make sure that all these
44:26 - reshaping dimension conforms to the
44:30 - original dimension so for example you
44:33 - just give dimension which is not
44:36 - conformed by the original array let's
44:39 - say 7 here and you will get this error
44:42 - which says cannot reshape array of size
44:44 - 6 into the shape 7 7 by 1 let me give
44:49 - you one more example so this time I'm
44:51 - going to create a new variable D and
44:53 - this time I'm going to use ones method
44:57 - so this is once method and I want to
45:01 - create an array of let's say 1 by 9 and
45:05 - then press Enter which is going to give
45:08 - me an array of 1 by 9 and all the values
45:11 - here are ones now when I use a reshape
45:15 - method on this D array so let's use this
45:18 - reshape method and let's give the
45:20 - dimension let's say I want to give here
45:22 - the dimension of 3 by
45:25 - - one and then press ENTER you will see
45:28 - this array will be reshaped to three by
45:32 - three array so why this is happening so
45:35 - because we have provided the second
45:38 - parameter as minus one which means that
45:42 - it will be determined based on the
45:44 - actual condition automatically so this
45:47 - array was containing nine element and
45:50 - this means that your matrix will be
45:54 - resized to three by three matrix so now
45:57 - you can see when you see the content
46:00 - inside D you can see the original array
46:03 - never changes you cannot change the size
46:07 - or shape of the original array you can
46:11 - just reshape it and then assign it to
46:13 - our new variable so when you do this I'm
46:16 - going to just reshape it and then assign
46:19 - it to a new variable E and then see the
46:22 - content of E now once again let me
46:24 - create an array of all zero of dimension
46:28 - three by one let's say and there is a
46:31 - method called V steak and H steak so V
46:35 - steak is used to stake multiple arrays
46:37 - in vertical direction and one thing to
46:40 - notice here is the dimension so the
46:42 - dimension of an array must be matched so
46:45 - here you can see e which is of the
46:49 - dimension 3 by 3 and we have a new array
46:52 - F which have the dimension 3 by 1 so let
46:55 - me just create one more variable let's
46:59 - say it's G variable and then I can use
47:03 - NP dot V stack and I can provide as an
47:09 - argument both the arrays so I have the
47:13 - array E and I have the array F and it
47:16 - gives us error because this I need to
47:18 - give in that topple so the error says it
47:21 - takes one positional argument but I have
47:24 - provided two because this I need to give
47:28 - inside at a plural list so these
47:31 - argument I will provide as a tuple and
47:33 - then press ENTER and now you will see
47:35 - this error this error says all the in
47:38 - put array dimension except for that
47:42 - concatenation access must match exactly
47:45 - so because this is the 3 by 3 array and
47:48 - we want to add the new array vertically
47:52 - which is not possible because in the 3
47:55 - by 3 matrix you cannot add the matrix of
47:58 - 3 by 1 if this matrix is of 1 by 3 then
48:02 - this is possible so let's create the
48:06 - array of 1 by 3 so this should be 1 by 3
48:10 - not 3 by 1 so I'm going to reshape it
48:12 - once again or let's just change the
48:15 - dimension it should be 1 by 3 in order
48:17 - to use the V stake with the array of 3
48:22 - by 3 so now once again we will see the
48:25 - content of H so now we can once again
48:28 - use this V steak method and this time
48:31 - I'm going to pass H here instead of F
48:34 - which is of dimension 1 by 3 and then
48:38 - press ENTER and this time I don't get
48:40 - any error and once again when I see the
48:43 - content of G it's going to give us the
48:46 - combination of the matrix E and H so
48:51 - this method V steak can be used to stake
48:54 - multiple arrays in vertical direction
48:58 - there is one more method which is at
49:00 - stake which you can use to stake
49:02 - multiple arrays in horizontal direction
49:05 - and there our F array will work so now
49:10 - when I create one more variable I and I
49:13 - will use the H steak method and here I
49:18 - will provide as an argument the array E
49:21 - which is of dimension 3 by 3 and the
49:26 - array F which is of dimension 3 by 1 not
49:30 - 1 by 3 not like this but it's of
49:34 - dimension 1 by 3 so it's like this right
49:37 - and then press ENTER and I will see the
49:40 - content of I and now you will see these
49:43 - two arrays are staked horizontally now
49:48 - if you give the array of wrong
49:50 - dimensions here so
49:51 - for example I gave H here instead of F
49:54 - which is like this and then press Enter
49:58 - it's going to once again give me an
50:00 - error which says all the input array
50:02 - dimension except for the concatenation
50:04 - axis must match exactly and at last I
50:09 - want to show you two more method and
50:11 - they are edge split which is called
50:15 - horizontal split and V split which is
50:18 - called vertical split and I want to
50:20 - split this array in the horizontal
50:24 - format so what I'm going to do here is
50:26 - I'm going to use the method H split and
50:29 - here I can first of all give the name of
50:33 - the array which is G in my case and then
50:36 - I can give the number of splits so for
50:40 - example I want to split this array in
50:41 - three different arrays then I can
50:44 - provide this number three here and then
50:46 - press Enter and now you can see the
50:49 - result so this result contains three
50:52 - different arrays 1 2 & 3 now let's say I
50:57 - want to split this array I which looks
51:00 - like this in the vertical direction so I
51:03 - want to just separate this this and this
51:07 - in three different arrays so I can use
51:10 - once again and P dot V split method and
51:14 - first argument is the name of the array
51:17 - and second argument is the number of
51:20 - arrays you want so when I press ENTER
51:22 - it's going to give me three different
51:25 - array which are split in vertical
51:28 - direction so that's it for this video I
51:31 - hope you have learned something new this
51:33 - time and I will see you in the next
51:35 - video