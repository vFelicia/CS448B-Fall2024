00:00 - hey guys welcome to programming
00:02 - knowledge in this video we'll be looking
00:04 - at this template code which code blocks
00:06 - had provided us by creating a project
00:08 - law so we'll be learning how to perform
00:11 - simple output in C++ let's get started
00:14 - so the first line here says hash include
00:17 - iostream hash include' is known as a
00:20 - preprocessor directive so hash include'
00:23 - is used to load files which are already
00:25 - present in the compiler as compiler
00:28 - comes with many files which are which
00:30 - have predefined functions to help us
00:32 - could be so high esteem is one of them
00:35 - and by using this preprocessor title by
00:38 - using hash impute we are actually in
00:40 - looking this file from the compilers so
00:42 - without this file you cannot perform any
00:45 - input or output in C++ many other header
00:47 - files will be coming across in the run
00:49 - but for now let us explore iostream
00:52 - I assume contains all the functions
00:55 - which we need to perform console input
00:58 - so I Aslam Bailey really stands for
01:01 - input and output stream so while name
01:05 - itself we can say every every function
01:07 - we need for performing input or output
01:09 - is present in a stream next with this
01:13 - line it says using namespace STD so a
01:16 - steady spoon as a scope hope we can
01:19 - understand like a region so every
01:21 - function inside this iostream works only
01:23 - in a certain region so for now we are
01:26 - not going to deal with any other books
01:29 - other than the standard school but just
01:31 - for information there are just cope also
01:34 - that will be learning when we are
01:36 - critical in c++ that comes at an
01:38 - advanced stage but for now we can see
01:40 - only use the standard scope standard
01:43 - scope is nothing but the console so if i
01:46 - just remove this line you will be seeing
01:48 - that this all these functions god of the
01:51 - scope so now if i build and run this by
01:55 - hitting f9 so now you can see that it
01:58 - shows an error what does the error say
02:00 - it says that she owed was not declared
02:01 - in the school this just means that this
02:05 - line or this particular function cannot
02:09 - be executed because it is out of the
02:10 - scope scope is nothing but the sky
02:13 - the way we defined can encompass by
02:16 - using the scope resolution operator
02:18 - corporatisation is nothing but Jesus
02:20 - right the scope and then the function
02:22 - and in between the scope and the
02:24 - function you just specify the scope by
02:27 - putting two colons so this is how you
02:30 - specify the scope so if I now execute it
02:35 - yeah I am reading another because this
02:38 - end and this end L is also from the
02:41 - iostream so it does not have that scope
02:45 - so I need to provide the scope for this
02:47 - also now if I build and run this I will
02:49 - be getting the output so here you can
02:51 - see we're having knowledge so that is
02:55 - the importance of scope then by doing
02:58 - here using namespace also well you
03:01 - cannot do this for every statement right
03:03 - it is going to be lot of it is going to
03:06 - take a lot of time to actually do this
03:09 - and sometimes you can also forget to do
03:11 - this so suppose I am writing 10 C odd
03:13 - statement this is the statement here
03:15 - there's nothing but the output statement
03:17 - this one what I am printing on to the
03:20 - console is not his she odd statement so
03:22 - this statement if I write in ten times I
03:25 - need to specify the scope ten times so
03:28 - every time I use this function or not
03:30 - not on only dysfunctioning if I use any
03:32 - function from this iostream library I
03:34 - need to actually specify this particular
03:37 - standard scope
03:38 - that is why to avoid that c++ provides a
03:41 - way to globalize that by using the
03:43 - namespace statement so by writing using
03:46 - namespace STD you are actually
03:49 - globalizing this statement and it is
03:52 - going to take care of any other study so
03:54 - you if you don't write this standard it
03:57 - is automatically taken care of by the
03:58 - compiler because it's just encountered
04:00 - this line this line just means that
04:02 - wherever standard scope needs to be used
04:04 - you just use it that is what this light
04:06 - means the next line says int main main
04:11 - is actually a function every program has
04:13 - a main function main is like a
04:15 - triggering function so every program has
04:17 - this without main there is no program
04:20 - because all the execution starts only
04:23 - from the main function so the boss
04:26 - a hundred file program or even say
04:29 - thousand file program the content n
04:32 - number of function but there is only one
04:34 - main function and that main function
04:37 - cannot be replaced and without this main
04:39 - function this program is not going to
04:41 - run so if I simply just type a capital M
04:44 - over here C++ is case sensitive so
04:47 - capital M main and a small M main are
04:51 - different so now if I try to build and
04:53 - run this I will be getting an error
04:55 - it says undefined reference to this
04:57 - remain either 8 16 this is actually
05:01 - something which is inside the compiler
05:02 - it is a compiler issue that is because
05:04 - it did not encounter the main function
05:06 - so Neve the right the main function you
05:09 - are going to execute it so first thing
05:11 - any C++ program looks for is this for
05:15 - this function it needs to be main and
05:17 - with a small m and it should be empty
05:20 - you can actually put void over here so
05:22 - that also doesn't matter but just it
05:25 - just makes it look complex so it's best
05:28 - to leave it empty so if you put like
05:30 - this and then it has to be the reason we
05:33 - will be looking at it later and the
05:35 - meaning of this end and just return 0 we
05:37 - will be constraining only when we are
05:39 - dealing with functions so for now we can
05:41 - ignore them so just remember that unit
05:44 - implement any other main doesn't work in
05:48 - that's a float mean all these are not
05:51 - going to work only in main is going to
05:53 - work and for now you can actually remove
05:55 - this return 0 so without this also the
05:57 - program is going to run and it's going
06:00 - to there's a lot of significance for the
06:04 - return statement and then we'll
06:06 - discussing about that when were
06:07 - discussing functions so this as I told
06:10 - you is the she owed statement just
06:12 - stands for the console output so she
06:14 - owed stands for console output and
06:16 - whatever you write here goes to the
06:18 - screen and this operator is known as the
06:21 - stream operator Steve operators are very
06:23 - important we will be looking at it when
06:25 - we are dealing with other streams also
06:27 - like v stream or something
06:29 - but for now while we are using the IAO
06:32 - stream that is the console stream we
06:34 - need to have these two functions in a
06:36 - page so the user this is
06:39 - in function that is the CEO and this is
06:41 - the stream operator and this is a stream
06:43 - operon this is a specific 8 men but
06:46 - technically in computer programming this
06:48 - is called a stream string is nothing but
06:51 - a collection of type this called a
06:53 - string so that is a data type we'll be
06:55 - talking about that in the next video so
06:58 - for now this is what the program was and
07:01 - yeah I forgot to tell you this one this
07:04 - is actually a painting another function
07:06 - in the sames here so see how it actually
07:08 - operates on only one operand so if you
07:11 - want to operate on multiple operands you
07:13 - need to separate that with this stream
07:15 - operator so see this is a string and
07:18 - this is a function handle is actually a
07:20 - function so the gate works yes it is
07:23 - going to first do that it is going to
07:25 - first operate on this and then it is
07:27 - going to encounter this and then it is
07:29 - like adding another shirred statement
07:31 - that's it so if I just put a semicolon
07:33 - here and then put a co2 just that it is
07:38 - not to get you confused these are two
07:41 - separate statements if you're wanting to
07:43 - put multiple statements in a single
07:46 - statement and that is how this is how
07:48 - you do it you just put a operator in
07:51 - between and then put the next operand
07:53 - over here and this semicolon is very
07:55 - important you met on over to the
07:57 - semicolon over here also chemical is
07:59 - known as a terminator so in C++ you can
08:02 - write multiple commands in the same line
08:04 - so what it does is it is going to
08:07 - separate each and every command so that
08:10 - the compiler knows what comment executes
08:12 - after executing just previous command so
08:15 - that is why we use a terminator it is
08:17 - very important so if you remove this it
08:19 - is going to result in idle because it
08:21 - doesn't terminate and it is expected
08:24 - this semicolon before this particular
08:26 - token that it expected is end of a
08:30 - statement before this one at this way
08:32 - you put a semicolon and this curly
08:35 - braces just signify the body of the main
08:38 - so whatever code array you are going to
08:40 - write between these two bases for some
08:42 - time until we are saying we get familiar
08:45 - with functions so once you're familiar
08:46 - with functions will be writing multiple
08:48 - functions and early
08:50 - poking the functions within this main
08:52 - we'll be looking at that later but for
08:55 - now let us talk over the output so they
08:58 - all know how to put out but right this
09:00 - is how we put out this we just put them
09:03 - inside dirt to double goods well this is
09:05 - string we can also put numbers also so
09:09 - for numbers you can either put it as a
09:11 - string so you can put something like
09:13 - this right and then execute it you'll be
09:17 - getting Phi over there all integers are
09:20 - separate in programming so even if you
09:23 - put a file like this don't we going to
09:25 - see Phi in the console so here you can
09:28 - see and now comes the major difference
09:30 - if I put Phi plus Phi over here and then
09:34 - educator I will be getting 10 over here
09:37 - that is the value of Phi plus 5 but if I
09:40 - just enclose it within a code within a
09:43 - double code what will I get
09:46 - I will just get the same thing I'll just
09:48 - get Phi plus Phi because this is treated
09:52 - as constituting world what this double
09:55 - code means as that whatever you put
09:57 - inside this double quotes is just going
10:00 - to be replicated as it is on the screen
10:01 - and if you don't put a double quote it
10:03 - has to be either a memory location or
10:06 - some operate so memory location or
10:08 - variable we will be looking at the next
10:10 - video while we are discussing input but
10:12 - for now find out we need needed bother
10:16 - about memory location let's just talk
10:18 - about the integer part of it so if I
10:21 - just put that say let's try another one
10:24 - let's put something like this five plus
10:26 - five let us try this one these are two
10:30 - different strings and now you know
10:32 - usually plus operator between these
10:34 - things so what we expect is actually ten
10:37 - but let us know execute this and look at
10:40 - that it says invalid operands of types
10:43 - Const care and constant what this means
10:46 - is you cannot add two constant
10:49 - characters or constant string on scale
10:52 - and despoil bracket as well fact it is
10:55 - actually quantum are you if we will be
10:57 - looking all of these things when we are
10:59 - discussing data types but for now we can
11:02 - you
11:03 - and understand that you cannot add two
11:06 - strings you can only add two numbers so
11:08 - if I just put five plus five I am going
11:10 - to get the answers so here so this is
11:15 - same with real numbers also you can even
11:17 - put point five plus four point five but
11:20 - that makes it two so here you will be
11:22 - getting two point two over here so and
11:26 - you can even work with decimals also
11:28 - even if I put one point four five your
11:30 - window great answer so you will be
11:33 - getting one point nine five so that is a
11:37 - major difference between strings and
11:39 - numbers so if you are working with
11:41 - numbers you can directly add them you
11:43 - can multiply you can divide multiply
11:45 - here is the start symbol which you will
11:47 - be finding on that eight on number eight
11:50 - on your keyboard
11:51 - so that is a multiply symbol and then
11:53 - divide is the normal forward slash
11:55 - symbol so this is the divide and
11:58 - multiply and this another one also there
12:02 - is another operator that is called the
12:05 - modulo operator
12:06 - what this does is it gives it gives the
12:12 - remainder of the two numbers right so
12:20 - what what it means is if you just put
12:22 - five more dilute to what this does is it
12:26 - gives a remainder so if you divide five
12:28 - it to what is it remainder you are going
12:30 - to get you're going to get one because
12:32 - well it is said to into 2 plus 1 which
12:37 - makes it fine right
12:38 - so this is the operation so that is why
12:41 - you do goes two times in five and then
12:43 - one is a reminder that is why you are
12:44 - getting one so you can verify that you
12:47 - can do that by simply putting two in
12:51 - well you can thank you put five more two
12:54 - you're going to get one over here so if
12:56 - I just run this then you can see one
13:00 - have many other operators will be
13:02 - looking at them later when these are the
13:05 - this is how you can perform output in
13:08 - simply speed well there are other things
13:10 - also like instead of using this we have
13:13 - something called escape sequences let me
13:16 - talk about don't we
13:17 - it is escape sequences what is odd is
13:23 - basically there are some key wood hooks
13:27 - which we cannot perform during runtime
13:28 - right
13:29 - so suppose we wanted to perform it
13:31 - backspace during the runtime it is not
13:33 - possible I am talking about the runtime
13:35 - so suppose I wanted hello world over
13:38 - here suppose and then I wanted to
13:41 - perform the backspace for this extra
13:44 - space I have provided over here I cannot
13:46 - do that in the random but now I can do
13:48 - anything I can even put what about
13:53 - during the runtime for that there are
13:56 - some special key sucks but I actually
13:59 - treated as escape sequences so the way
14:02 - we define escape sequences are you
14:04 - actually put a backslash and end a
14:06 - special character so here there will be
14:09 - a special character and then this is
14:15 - going to actually give you a special
14:17 - meaning so this is going to execute that
14:20 - particular keystroke so this they are
14:27 - some of the escape sequences like a
14:29 - slash it's going to take your bed so you
14:31 - might have noticed that there will be a
14:34 - notification bill that will come and
14:37 - then there is a slash B which is for
14:39 - back space and then a slash t + /n we'll
14:44 - be using these things more often last is
14:47 - for a horizontal tab and then slash n is
14:52 - for a new length they we did see this
14:56 - one somewhere right this one so ndele is
14:59 - actually a function this is actually
15:01 - significant difference between using
15:03 - slash and edited so I'm just going to
15:06 - delete these things let us first try /
15:09 - in so first lash it I'm going to run
15:12 - this you might have heard that song
15:17 - right that bends on that is the function
15:20 - of slash it let us look at /t tunnels
15:24 - yes it's going to put it down so let me
15:26 - put it up between hollow and world so if
15:28 - I put
15:29 - over here and then executed here you
15:33 - will be saying hello and then it this
15:35 - space and then a world so this is what
15:38 - the function of porosity and then splash
15:40 - n is what going to do the same thing
15:43 - what this function does it is just going
15:46 - to put the contents in the mixed line so
15:48 - if I just agreed eat it there'll be new
15:50 - lines so hello and then a new line under
15:53 - the hood so that is the function of
15:55 - slashing so that is all for this output
15:57 - session in the next time in the next
15:59 - video we will be looking at input and C
16:03 - process right so thanks for watching
16:06 - this video I will be meeting you within
16:08 - the next video with input in C++