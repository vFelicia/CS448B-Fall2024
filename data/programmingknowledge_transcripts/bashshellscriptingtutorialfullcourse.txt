00:00 - hello guys and welcome back to the
00:01 - channel this is ayush and from now we
00:04 - are going to start out the data shell
00:05 - scripting tutorial okay so we will start
00:09 - with the basics to the advanced and we
00:12 - will cover many uh Concepts like we will
00:15 - cover like programming uh Concepts like
00:17 - a fails for Loop so
00:20 - and also we will create some scripts
00:23 - like automated scripts and we will do
00:26 - some minor projects also
00:28 - so now from uh this video like in
00:31 - today's video we will cover some basic
00:33 - concepts like what is a shell uh what is
00:36 - a bash and also we'll see how you can
00:38 - create your first script that would be
00:40 - very interesting thing okay but before
00:43 - starting uh let me tell you like we use
00:45 - cell scripting uh mostly for the purpose
00:48 - of the automation okay if you want to
00:50 - automate some kind of some kind of task
00:52 - then you can use the cell scripting as
00:55 - an automation uh like not as an
00:57 - automation you can say like
00:59 - uh Shadow you can use the cell script as
01:02 - a tool to automate your work okay
01:06 - so now first of all now let's come to
01:08 - the point and we will learn about the
01:10 - what is the Shelf okay so shell is
01:13 - nothing but you can say it's uh just
01:16 - like interface which provides you to
01:19 - write some codes and routes write some
01:21 - commands so right now this uh terminal
01:24 - using the bash shape okay so but also
01:27 - according to the some other articles
01:29 - some books uh shell is just like an
01:32 - interpreter like uh it basically runs uh
01:36 - [Music]
01:38 - uh like executes the command line by
01:40 - line okay so that is the work of The
01:43 - Interpreter like it executes the code
01:46 - line by line and if some error occurs
01:49 - then it will just throw it on the screen
01:51 - so shell is just also like a interpreter
01:54 - it basically
01:56 - interprets the dot sh files or dot sh
01:59 - programs you can say or you can say the
02:02 - scripts so now you will say what is a
02:04 - script so script is nothing but
02:07 - like your program file just like in
02:09 - Python UK dot Pi UI file so similarly in
02:12 - in cell scripting you know in batches
02:13 - scripting we create the dot sh file okay
02:18 - so why we say like shell acts like
02:21 - interpreter because it interprets the
02:23 - dot sh files or dot sh programs you can
02:26 - say
02:27 - so I hope you got a fair idea about what
02:30 - is a cell okay so now let's start with
02:33 - the
02:34 - basic concept like what are the
02:36 - different types of cell and obviously as
02:37 - operating system okay
02:40 - so there are many cells like a partial
02:43 - and also uh like K bone cell bone again
02:47 - cell okay so you can get the list of the
02:49 - cells in this particular directly uh
02:53 - that's not directly it's a directory
02:55 - okay so here you can see the multiple
02:57 - cells is being used or present in my
02:59 - this operating system
03:01 - so for this whole series we will uh like
03:04 - stick with the only the second one this
03:06 - one passes pass that means gone against
03:08 - shell okay but this assets the first one
03:12 - cell was the first cell uh which was
03:15 - created by the Linux and the next uh
03:18 - there is Born Again shell came into the
03:19 - role
03:21 - so uh we will use the bond against shell
03:24 - for our this entire series and uh
03:27 - now what we have to do uh we have to
03:30 - just create a one single script of hello
03:32 - world and uh
03:34 - also let me tell you the what is this
03:36 - bin so the cell your your cell will be
03:39 - present in this bin directory okay
03:43 - so now but before creating your first
03:46 - script let me tell you the
03:48 - uh what the script is being used by this
03:51 - session or by this terminal so you need
03:54 - to just enter this Eco and the cell
03:56 - Powershell and here you can see the
03:58 - batch shell is being used okay now we
04:01 - have to go we have to just create the
04:03 - first script that is the hello world
04:05 - script how we will do it we will just
04:08 - move on to the desktop
04:11 - and I'll create the cat
04:15 - hello world.sh why dot research because
04:20 - like we are getting a solicit script so
04:24 - batches script that's the way using the
04:26 - dot sh extension
04:28 - so here you can see the file has been
04:30 - created Hello dot is now I will use this
04:33 - hash slash then cash
04:36 - it's just like this line basically tells
04:39 - like uh tells our script or our the
04:42 - shell to which shell to use like tell
04:45 - The Interpreter which cell to use so
04:47 - here I am just defining like I want to
04:49 - use the P bash again of cell that is
04:52 - this one main batch not sh okay so now I
04:56 - can do eco eco is just like the print
04:58 - command kit
05:02 - Echo hello old
05:05 - I'm learning
05:09 - Bash
05:10 - scripting
05:16 - this one now get Ctrl D and to run the
05:19 - script you need to add some permissions
05:22 - so you cannot directly run the script if
05:25 - you will check the permission for hello
05:26 - world.sh so here you can see this is
05:29 - only read write permission you cannot
05:30 - execute that script so to give the
05:34 - particular permission to this particular
05:35 - file you will need to just give add the
05:38 - permission using the CH mode you will if
05:40 - you will use plus X and the lower dot is
05:43 - the name of the file so permission will
05:45 - get added and here you will see the
05:48 - execution permission has been added and
05:50 - the color also has been changed from
05:52 - white to the green okay now to execute
05:55 - what you do you have to just do dot
05:57 - slash and the name of the script and we
06:00 - are done so as you can see our script
06:02 - has been executed successfully
06:05 - okay so I hope you like this guys like
06:09 - how you can create the shell scripting
06:11 - and also you I hope you got to learn
06:13 - about the what is a shell what is Bash
06:15 - and if not then please go and you should
06:18 - explore yourself also
06:21 - okay
06:23 - so that's all for this guys we will meet
06:25 - you in the next video thank you thank
06:26 - you for watching and I will come up and
06:28 - meet you in the next video with some
06:29 - amazing Concepts thank you
06:32 - hello guys now in this particular video
06:34 - we will be installing the visual studio
06:36 - code because we will use this ID to
06:39 - write our service scripts okay
06:42 - so uh let me tell you how you can
06:44 - install it in an easy way so here is the
06:47 - Ubuntu software uh from here you can
06:49 - install multiple softwares now you have
06:51 - to search for the visual studio code
06:54 - and it will take some time to load or
06:57 - let's wait
07:01 - um
07:03 - so but before that let me tell you about
07:05 - what is visual studio code so it's
07:07 - basically on the ID which we use to
07:09 - write our uh course you can write code
07:12 - in any language which you want from C
07:14 - plus plus to Java python everything okay
07:18 - so here you can see the review is also
07:20 - good now we have to just click on this
07:22 - install
07:23 - so it will take some time for
07:25 - installation
07:27 - uh
07:28 - let's wait
07:31 - okay it didn't it is installed now so
07:34 - what now we have to do we have to just
07:36 - click on this show applications
07:39 - and here's your search for the vs code
07:44 - or Visual Studio it may be yeah here you
07:47 - can see the video Studio code now just
07:49 - click on it
07:52 - and it will open up like this
07:57 - and this is something uh
08:01 - okay so here you can see
08:05 - you need to open some folder uh let me
08:09 - click on open folder
08:14 - and on the desktop I want to create one
08:17 - folder like uh plus I will create the
08:21 - shell
08:22 - scripting
08:25 - tutorial
08:26 - okay just click on create
08:29 - and you're done you have to just click
08:31 - on open
08:33 - uh don't save item but this is some kind
08:36 - of file
08:39 - okay let's wait
08:43 - having the system is lying because of
08:45 - the low Ram actually I'm running it in
08:48 - the Ubuntu machine oh sorry in
08:50 - virtualbox that so it's happening like
08:52 - this yeah
08:54 - now here I will create just one simple
08:56 - script that is zero one
08:59 - uh
09:01 - s dot sh I will create
09:04 - sorry sorry I have entered
09:08 - comma there
09:12 - again I'll create 0 1
09:15 - test dot sh
09:18 - okay so here you need to add the C Bank
09:21 - this symbol is called C Bank
09:25 - Bash
09:28 - equal
09:30 - you have to just write here hello world
09:34 - and you are good to go you have to just
09:37 - open up the terminal here
09:39 - new terminal
09:45 - and you will need to just add the
09:46 - permission for this particular file that
09:49 - is zero one test.sh
09:53 - and you need to just execute it
09:57 - uh dot slash
10:01 - zero one test.sh
10:05 - okay uh let me just do a list why it's
10:08 - not executing okay dot slash zero one
10:13 - test dot sh
10:16 - white showing uh
10:19 - banosis file or directory
10:22 - okay I think uh
10:24 - Ministry written like this
10:31 - okay so here you can see
10:33 - hello world okay so in this way uh we
10:37 - can write our scripts in this ID and we
10:40 - can easily run it okay so that's all for
10:42 - today's video guys I hope you
10:44 - successfully installed and in our
10:46 - further videos we will start with the
10:47 - basic concepts of the cell scripting so
10:49 - that's all for today's video and I will
10:51 - meet you in the next one thank you thank
10:52 - you for watching
10:55 - now in this video we will be learning
10:57 - about the what are the variables okay so
10:59 - first of all let me tell you about the
11:01 - what are the topics which we will be
11:03 - covering in this particular video so let
11:05 - me just open up the terminal and I will
11:07 - write all those topics which will be
11:09 - covering this particular video so first
11:11 - of all we will cover variables what are
11:14 - the variables
11:16 - then use the defined variables and next
11:19 - environment variables
11:21 - okay so these are the topics which we'll
11:23 - be covering in this particular video so
11:25 - first of all let me start with the
11:27 - variables okay what are the variables
11:29 - okay but before that let me first open
11:31 - up my vs code actually I've already done
11:33 - it here
11:34 - you can see now you have to just create
11:38 - one file that is zero two variables dot
11:41 - sh okay so we will use dot sh extension
11:45 - for creation of file and I hope you have
11:47 - already installed this vs code actually
11:49 - in our previous video we have covered
11:50 - this part of installation so now what we
11:54 - have to do uh
11:56 - we have to just uh
11:58 - enter this shape band and then you have
12:02 - to just you are good to go you can write
12:05 - any command here also like you uh
12:08 - variables you can write here variables
12:13 - okay just to save it and here is the Run
12:17 - button if you run it maybe it will run
12:19 - yeah it's working fine
12:21 - okay so now what we can do
12:24 - uh let me tell you about first variables
12:27 - what are the variables okay so variables
12:29 - is nothing but uh just like a container
12:32 - okay
12:34 - container which will hold some values
12:38 - okay so variable is nothing but just
12:41 - like a container which will hold some
12:43 - kind of value it may be integer it may
12:45 - be a string it can be your uh any kind
12:48 - of value like a few decimal value or
12:50 - character value okay so these are the
12:53 - variables okay so what happens actually
12:55 - uh like internally what are those what
12:58 - things happen okay if you are coming
13:00 - from the C plus plus background so you
13:03 - might be aware of those things like let
13:04 - me tell you all this uh I will open up
13:07 - the paint
13:09 - so that it will be easy to understand
13:12 - for you
13:15 - okay so I will just create a block here
13:18 - okay so what happens if you create a
13:22 - variable suppose you create a variable a
13:24 - equal to 10 okay so at that time what
13:27 - will happen a block will be created in a
13:31 - memory and some address will be given to
13:34 - that okay now you will tell ask me what
13:38 - are the address values nothing but uh
13:40 - which is used to access those variables
13:43 - okay if you are aware of C plus plus or
13:46 - python then you might be aware of it but
13:48 - right now just keep in mind that
13:50 - variables are stored at one particular
13:53 - address so it can be any address I will
13:55 - just
13:56 - enter like it it uh what we can say
14:01 - address is in the form of hexadecimal so
14:05 - you can write anything like hexadecimal
14:07 - is like a to f 1 to 9 anything you can
14:10 - like this okay
14:14 - so you can think like this is the
14:15 - address and this will be the value you
14:19 - can suppose like it will be 10 and the
14:22 - name of the variable will be a
14:25 - okay so this is the case happens
14:29 - internally if you create a variable in
14:32 - any operating system okay so now we will
14:36 - start with the basic one like we will
14:38 - create some variables and we will also
14:40 - learn about some kind of rules which we
14:42 - follow while creating the variables in
14:46 - our
14:48 - action
14:49 - okay or back to scripting you can say so
14:51 - here what we will do uh I will just
14:55 - create some variables I can create name
14:57 - equal to I
15:01 - okay you can write like this
15:05 - and then what you will need to do you
15:08 - can also give like H equal to 20 you can
15:13 - say
15:14 - and now we are good to go right now we
15:17 - will just print those variables so how
15:20 - you can print using dollar
15:22 - and the name of the variable you can
15:24 - easily print the variables okay
15:27 - so just save these variables and I will
15:30 - run up run this variable okay
15:33 - so here you can see the variable the
15:35 - first line and the second my name is
15:38 - printed okay so but before moving
15:42 - forward let me tell you about the some
15:44 - of the rules which we follow while
15:45 - creating the variables okay so there are
15:47 - some interesting thing if you do like
15:49 - this add a space so at that time your
15:52 - shell thinks like it's kind of for
15:54 - command so there should be no any spaces
15:56 - in your variable name
15:58 - in cell scripting spatially or bash
16:01 - scripting so if you will do so it will
16:04 - say
16:05 - command not form here you can see so you
16:09 - don't have to give any kind of a space
16:11 - in your variable name
16:14 - okay I hope it's clear to you guys let
16:17 - me just to create some another variable
16:20 - like pointer I will create some kind of
16:22 - 9.9 I will give it a time okay it's fine
16:25 - so here I will
16:28 - add equal
16:31 - my pointer is
16:36 - like this
16:37 - maybe a string concatenation will happen
16:40 - there
16:41 - pointer
16:43 - let me just to save and I will again
16:45 - when this script
16:48 - so here you can see my pointer is this
16:52 - plus okay
16:53 - if I will not give it it doesn't affect
16:56 - I think
17:01 - okay so here you can see my pointer is
17:03 - 9.89
17:05 - so in this way you can uh enter the
17:08 - variables and enter the values assign
17:11 - the value to the variables so these are
17:13 - basically the user defined variables
17:16 - okay
17:18 - Echo you have to just here to user
17:22 - defined
17:24 - variables okay
17:27 - so this is the okay
17:32 - so what if I want to uh print all those
17:36 - in a same line
17:38 - like equal name
17:40 - and equal it is also I want okay let's
17:44 - do it I will remove this line
17:47 - save it
17:50 - okay
17:51 - here you can see the ayush 20 okay so
17:55 - these are the user defined variables
17:57 - okay I hope it is clear to you what are
17:59 - the variables now moving forward
18:01 - uh we will learn about the sum of
18:04 - what we can say involvement variables
18:07 - okay
18:08 - so I will just do a quick Google search
18:10 - for you guys
18:11 - and I will search for the user not user
18:15 - environment variables okay
18:18 - so involvement
18:22 - will write that much being smiling
18:24 - environment variables
18:26 - shells cutting in JavaScript yeah
18:30 - here we got it
18:35 - okay so here you can see uh there are
18:38 - many blocks for on EX for gigs or
18:41 - digital ocean
18:43 - okay so let me open this one Geeks for
18:46 - gigs so it's uh
18:48 - good
18:50 - website to learn more things okay
18:54 - so here you can see
18:57 - it's loading just wait for some time
19:03 - okay so here you can see what are the
19:04 - environment values so environment is
19:06 - very
19:07 - system defined variables you can see it
19:09 - is given by the shell to use for you
19:12 - guys
19:13 - okay so here you can see the scope of an
19:16 - environment variable and all those
19:18 - things I will tell you about the scope
19:20 - and always in the next video okay right
19:23 - now just learn about the
19:26 - environment variables okay
19:28 - so here you can see the name is one of
19:30 - the environmental variables both over
19:32 - here and Google
19:33 - in the same way okay
19:38 - let me just this
19:42 - so here you can see
19:47 - okay name equal to value
19:53 - okay I will use some different website
19:55 - let me use this solution
19:57 - not this one
19:59 - this one looks good
20:02 - or I will just do list here because I
20:05 - want the list of the environment
20:06 - variables
20:08 - and cell script we use so here you can
20:11 - see the
20:13 - uh not Windows I want Linux
20:19 - foreign variables
20:26 - okay
20:31 - so uh let me just use some variables
20:34 - here like uh I remember some value books
20:37 - like Eco shell
20:40 - if you will use shell with an enormous
20:42 - variables keep in mind like it is
20:44 - written always in the capital letter and
20:48 - here I will just add some text like
20:51 - first environment variable
20:56 - okay
20:57 - and just
21:01 - save it and run it and here you will see
21:04 - the bin bash it gives you the name like
21:07 - cell which cell you are using right now
21:10 - okay if you will do date also it will
21:13 - give you the information about date okay
21:16 - so just save it and run it from here
21:21 - and here you can see the okay it's not
21:25 - displaying with a date why I don't know
21:28 - okay
21:32 - it should
21:46 - okay just run this
21:50 - okay I think date is not one involvement
21:52 - variable let me just pick the search for
21:55 - it date environment variable
21:58 - minutes
22:00 - okay so here you can see the uh
22:05 - current environment variables
22:10 - so there are many articles so you can
22:12 - read here like when you do
22:18 - we can do like this also
22:22 - uh let me just copy and I will paste it
22:24 - here
22:25 - now and I will use here now
22:30 - okay just save it
22:33 - and click
22:35 - on run and here you can see the current
22:37 - date and time all those things
22:39 - okay
22:42 - so in this way you can use uh variables
22:45 - you can assign values and I hope you got
22:47 - to learn about this user defined
22:49 - variables as well as environment
22:51 - variables and uh in the next video also
22:54 - I will tell you some more environment
22:55 - variables okay so I hope you like this
22:58 - particular video guys and thank you
22:59 - thank you for watching and if you have
23:01 - any queries then you can ask in the
23:03 - comment section for these all the source
23:05 - code I will be posting on my GitHub
23:08 - repository I will give the link in the
23:10 - description okay so thank you thank you
23:12 - for watching I'll meet you in the next
23:14 - one thank you and bye bye
23:16 - now in this video we'll be learning
23:18 - about the how we can get the input from
23:20 - the user okay so basically we will see
23:23 - uh with the many examples like suppose I
23:27 - will ask the user to enter his name so
23:29 - at that time you just should be able to
23:31 - enter his name and all those things okay
23:33 - so basically we will use the read
23:36 - command or you can yeah read command you
23:39 - can say or the what you can say like
23:43 - repeat keyword is used to take input
23:47 - from the user in the Shell scripting
23:50 - okay so actually I have already opened
23:52 - up the terminal here uh vs code sorry
23:55 - and I will just create a new file here
23:57 - uh zero three
23:59 - uh read input dot sh
24:04 - okay so I will just use this hashtag
24:10 - okay I'll just give it the name of this
24:15 - tutorial that is the input
24:19 - create input form user okay
24:22 - so first of all we will see the basic
24:24 - scenario like suppose I enter here uh
24:27 - Echo enter your name piece okay
24:33 - so here I will read the name and here
24:37 - you you will see the divs will be the
24:39 - name of the variable okay in which you
24:43 - want to store this value okay and next
24:46 - here I will print the variable like your
24:50 - name else
24:54 - uh dollar name okay
24:59 - controllers to save and
25:03 - I want to run from here
25:06 - but here from here I will need to give
25:08 - permission but so it's better to run
25:10 - from here okay so here it is asking for
25:13 - me to enter my name so I will enter
25:17 - ayush
25:18 - okay why it's not working
25:21 - oh my God
25:25 - now let me just Ctrl C uh
25:30 - let me use the terminal terminal is far
25:31 - better than this okay so we need to just
25:34 - give the permission
25:36 - to that file that is zero three
25:39 - we are done dot slash zero three dot sh
25:44 - okay sorry dot slash zero three dot sh
25:49 - and enter your name please I use so you
25:52 - can see the your name is ayush okay
25:56 - so in this way we can uh take the input
25:59 - from the user and also there are many
26:01 - use cases of this Reader Command okay so
26:04 - we will learn it one by one okay so uh
26:08 - let's start with the first one like we
26:10 - can use many options like read hyphen p
26:14 - okay so next moving forward I will just
26:18 - here I will do a read iPhone p is used
26:22 - for the prompt so here I will prompt
26:25 - enter
26:26 - your age
26:30 - okay
26:33 - so here you can just give the name of
26:35 - the variable which you want to provide
26:37 - so you can just give it as is
26:40 - okay and next I will just use this Eco
26:44 - command or eco
26:47 - keyword to print the web value your name
26:50 - sorry UAV is what dollar is
26:54 - okay Ctrl s to save clear the screen
26:58 - again run the script your name my name
27:01 - is ayush guys
27:02 - here is I will enter 20 here you can see
27:07 - your age is 20. so what is the
27:09 - difference between this and above and
27:12 - this one reading it so what is happening
27:15 - here we are using one extra line for
27:18 - echoing that particular line but to you
27:20 - using hyphen P option you can write your
27:23 - variable as well whatever you want to
27:25 - prompt to the user you can write those
27:28 - all things in a one single line so now
27:31 - let me just comment out these things and
27:34 - I will again run the
27:36 - come on so that will be easy for you to
27:38 - understand
27:40 - so here it is asking me for interview
27:42 - yes so here you can see I have just used
27:45 - this single line and it was asking me to
27:47 - enter the
27:49 - uh whatever the is and all those things
27:51 - so don't be confused if there was by
27:54 - mistake 204 and not that much old okay
27:58 - so uh in this way you can uh use this
28:01 - hyphen P option also there is many
28:03 - amazing option like uh if I will
28:06 - uncomment this and I will just comment
28:09 - out these things and if in case you
28:12 - don't provide the variable name so at
28:16 - that time you can use this reply
28:20 - okay you can use this one
28:24 - to
28:26 - like you can use this one like this okay
28:28 - if you don't provide the name of the
28:31 - variable then it will store it into this
28:33 - replay so I will just again run up this
28:36 - particular script and I will write the
28:39 - name as ayush and here you can see I
28:41 - should name it ayush without any use of
28:44 - variable okay but that is not a very
28:46 - good practice to use but yeah it is
28:49 - always uh like advice to use the
28:53 - variables okay
28:54 - so I will give it the name here as name
28:56 - and the same as it is
28:59 - the dollar name okay
29:02 - taller name okay we are done you are
29:05 - good to go no there is also some amazing
29:08 - things you should know about like
29:09 - suppose I am asking the user to enter
29:12 - some kind of confidential information I
29:14 - will just comment of these things
29:16 - uh read hyphen p and the username
29:22 - okay
29:25 - suppose you're asking for the username I
29:28 - will just create a variable username
29:33 - and you can also ask for password read
29:37 - hyphen SP
29:39 - and here you will ask for the password
29:43 - so obviously you don't want to reveal
29:45 - your password okay with everyone so The
29:48 - Hyphen s provides that functionality you
29:50 - will see right now
29:52 - so I will just equal those two variables
29:55 - so here I will write like this your not
29:59 - you just use username and a dollar user
30:04 - name
30:07 - username okay yeah we're good to go now
30:10 - and just use the password
30:13 - okay dollar password okay controllers to
30:18 - save let me just clear the screen again
30:20 - this one username my username is uh
30:24 - this one you can follow me on Instagram
30:27 - I know I'm promoting and for password
30:30 - you can use
30:33 - it's
30:34 - easy to crack
30:37 - okay so here you can see the username is
30:40 - this one and password is this one but
30:43 - you I hope uh you just
30:48 - uh what we can say
30:52 - notice like the when I was typing the uh
30:55 - password it was not visible okay I will
30:58 - use one more Eco for the blank space
31:01 - okay again I will run the script so that
31:03 - could be easy to understand so I will
31:06 - use username I use and the password is
31:08 - something in the C I am typing but
31:10 - nothing is playing on the screen and
31:13 - here you can see now username is I wish
31:15 - and password is this whatever written
31:17 - okay
31:19 - so this is the
31:22 - thing
31:24 - okay so I hope you got to learn about
31:26 - like how you can take input from the
31:28 - user okay so now thank you for watching
31:30 - and if you have any query you can ask in
31:32 - the comment section and surely I will
31:34 - post these uh codes inside your uh
31:38 - inside my GitHub repository not yours
31:40 - okay but you can access that Repository
31:43 - so that's all for today's guide and I
31:44 - hope you in uh you guys liked it and
31:48 - we'll meet you in the next video thank
31:49 - you thank you for watching
31:51 - now in this video we'll be learning
31:53 - about the command substitution okay so
31:55 - as the name suggests to command
31:57 - substitution which basically means we
31:59 - can use a variable name as a command
32:02 - okay you will store the commands in a
32:04 - variable it's not that interesting okay
32:06 - so we will be running these things in
32:08 - this particular video so let's start
32:10 - whatever what first thing you have to do
32:12 - you have to just open up your Tommy not
32:14 - terminal you have to just open up the uh
32:16 - vs code okay so I actually have already
32:19 - opened up here the vs4 as you can see so
32:22 - now what you have to do you have to just
32:23 - create one file uh I will name it as
32:26 - zero four commands substitute
32:33 - substitution.sh okay I hope this
32:35 - spelling is uh
32:37 - correct yeah it's correct by the way it
32:40 - doesn't matter at all
32:43 - okay so now what we can do you have just
32:46 - paste this okay hash the bank okay
32:50 - so here let me just enter this like Eco
32:53 - this is
32:56 - no not like this you have to just enter
32:58 - this commands substitute
33:04 - okay tutorial
33:07 - okay so now uh let me tell you about the
33:11 - First Command which we can use as a
33:13 - variable okay so I will create one
33:15 - variable Uh current
33:18 - directory okay so how you can get the
33:23 - correct directory in uh Linux okay uh if
33:26 - you have watched our Linux series then
33:28 - you know the command that is a PWD
33:30 - present working directly which gives you
33:33 - the uh current directory location okay
33:35 - so we will use a PWD but before using
33:38 - those things uh right now I will tell
33:41 - you the ways how you can uh
33:43 - uh what you can say uh
33:46 - how we can declare uh that command to a
33:49 - particular variable okay so you can use
33:51 - the back ticks okay just curve button uh
33:55 - left of one okay and here you can enter
33:58 - the whatever command which you want it
34:00 - and right now I want to PWD and you can
34:03 - just print this one like
34:05 - you present working your present working
34:11 - directory is
34:14 - like this bro okay yes
34:18 - we will use this not hash I need all our
34:21 - current not container
34:25 - okay yeah we are good to go right now I
34:27 - will just add some permission plus X to
34:32 - that particular file that is zero four
34:34 - now we are obviously good to go
34:38 - oh
34:40 - I think something
34:43 - yeah so here you can see we have done
34:46 - some silly mistake like we don't have to
34:49 - keep the space here if we'll give a
34:51 - space then
34:53 - it will give you the error command not
34:56 - found
34:58 - okay again I think
35:03 - command substitution tutorial zero four
35:05 - line six
35:08 - or no such file or directory
35:13 - or at a manner you will need to do like
35:16 - this guys okay so let me just clear the
35:21 - screen
35:23 - yeah where you two here you can see that
35:25 - your present working directly this one
35:27 - oh my desktops are the scripting
35:28 - tutorial okay so in this way you can use
35:32 - this particular thing like uh okay
35:36 - so now the next method is how you can do
35:38 - it so the next method is like this I
35:41 - will just copy it and comment it uh the
35:44 - slang I mean this line and I will use
35:46 - this like this you have to you have to
35:49 - use the dollar and the
35:53 - PWD
35:54 - okay
35:56 - so now we can do like this
36:00 - clear the screen
36:03 - at the command and here you are good to
36:06 - go guys here you can see the uh
36:09 - isn't working directly okay now moving
36:11 - forward uh suppose you want to create
36:13 - one file uh so new file I will create
36:16 - the name a new file and I will use the
36:20 - backtick
36:24 - uh I will use this command cat I I need
36:27 - Hello dot txt suppose and discuss I want
36:32 - hello.txt
36:34 - so I will use this one like here and I
36:37 - will use Eco dollar new file
36:41 - Ctrl c not C Ctrl s to save clear the
36:46 - screen
36:46 - so here you can see hello.txt as we
36:49 - created and I will write
36:51 - Hello dot txt has been created from has
36:58 - been created
36:59 - from
37:01 - command substitution to tutorial
37:05 - okay due to real
37:09 - and told you to save okay so here you
37:12 - can see the same text okay so in this
37:15 - way you can use the command substitution
37:17 - technique like using a back take or
37:19 - using dollar or whatever the way you
37:21 - like okay but the most preferred is this
37:24 - one dollar at the parenthesis okay so
37:27 - that's all for today's videos guys and
37:28 - if you have any query you can ask in the
37:30 - comment section and these quotes will be
37:31 - posted on the GitHub repository and you
37:33 - will get the link in the description so
37:35 - thank you thank you for watching and
37:36 - I'll meet you at the next one thank you
37:38 - and bye
37:41 - hello guys now in this particular video
37:43 - we will be learning about how we can
37:44 - pass the parameters while learning our
37:47 - script okay
37:48 - so let's start with this video okay so I
37:50 - have already opened up my vs code and
37:53 - you can also open it using the terminal
37:54 - or from here from applications also so
37:57 - right now we'll create a new file that
37:59 - is a
38:01 - arguments.sh okay I will write the
38:05 - hashbank or C Bank you can say
38:07 - whatever you want
38:09 - oh sorry
38:11 - bin bash okay now here uh what we will
38:15 - do I will run this script and I will
38:18 - pass some admins and parameters and we
38:20 - will use those parameters and do some
38:23 - manipulation in those things okay
38:25 - so before the starting the video let me
38:28 - tell you first thing like suppose I run
38:30 - this script this one command
38:31 - substitution or maybe say which
38:35 - script I have run hope yeah suppose this
38:37 - command substitution is one of the
38:39 - script so here I will pass some
38:40 - parameters like I will pass my name my
38:44 - number okay and my some something like
38:51 - country India so in these in these way
38:56 - we can pass the parameters okay and how
38:59 - we will access these parameters so you
39:02 - can access these parameters using like
39:05 - this like using Eco dollar one
39:10 - okay dollar one for the first parameter
39:12 - Eco dollar two for the second parameter
39:16 - Eco Dollar Tree for the third parameter
39:19 - so here you can access till dollar nine
39:22 - and dollar zero is reserved and it gives
39:26 - you the name of your script okay so this
39:30 - is the uh in this way you can uh work
39:33 - with the parameters
39:35 - and now what we have to do uh we will
39:38 - just
39:42 - save this file and what we will do we
39:44 - will just return this particular script
39:46 - I will just give the permissions to this
39:48 - CH mode plus X and 0 5 fragments.sh and
39:54 - I will clear the screen and I will just
39:56 - run those script 0 5
39:59 - okay done and now what I will do I will
40:01 - just pass some params like right I want
40:03 - to pass my name ayush okay I will pass
40:06 - my country India I will pass my number
40:09 - uh
40:11 - okay and then I will pass something uh
40:15 - like
40:18 - shell tutorial I can write like this
40:23 - okay so when I will hit enter then you
40:26 - will see what happens so here you can
40:28 - see first line giving me the name of the
40:31 - script second line the second first
40:33 - parameter then third is the
40:36 - second parameter then my number and we
40:39 - are not getting the cell tutorial why
40:40 - because we have not used dollar 4.
40:43 - okay so we will use here Eco dollar 4
40:47 - and again I will run the same script
40:50 - okay now here you can see all the uh
40:55 - what we can say arguments we have got in
40:58 - these form okay so you have to also
41:01 - remember one thing here like if I am
41:03 - going to just uh pass the one parameter
41:06 - in this case the other will be
41:08 - ignore okay
41:11 - so here you can see others have been
41:12 - ignored there is nothing okay and if you
41:15 - want to give the like this
41:19 - suppose I want to find by one by full
41:22 - name like ice Kumar so if I will do this
41:25 - so now it will act like this will be act
41:28 - as the first parameter this will be
41:29 - active second parameter so to act like
41:32 - to use this as a one parameter you can
41:35 - use this okay so now you will get this
41:39 - okay output okay so I hope you got it
41:42 - how you can work with the parameters and
41:45 - now moving forward uh if you want to get
41:47 - the uh list of all the parameter you
41:50 - pass so there are the some spatial uh
41:53 - characters or yeah you can say
41:55 - characters so how we'll use to print all
41:57 - the arguments we will use dollar at the
42:00 - rate
42:01 - and now it will print all the arguments
42:03 - which you will pass so what I will do I
42:05 - will run these escape this one and here
42:07 - you can see I have got the all the
42:09 - arguments which we have passed like I
42:10 - use India number Excel tutorial okay and
42:14 - also there is one more like
42:17 - Eco dollar hash to get how many number
42:21 - of parameters we have passed
42:23 - or this one dollar
42:25 - okay
42:26 - so again just to clear the screen and I
42:30 - will run this script and here we can see
42:32 - we have passed the four parameters yeah
42:33 - that's true okay now what we can do we
42:36 - can also store the value of these uh
42:39 - parameters which we pass in a variable
42:40 - suppose I want to store like name equal
42:43 - to
42:44 - dollar one and I will just remove these
42:47 - not available
43:42 - so that's all for today's guide I hope
43:44 - you liked it and I will meet you in the
43:46 - next video so thank you thank you guys
43:47 - for watching bye
43:50 - hello guys now in this particular video
43:52 - we will be creating our the first task
43:54 - that is the basically in which we will
43:57 - whatever we have covered till now we
43:59 - will use those things so basically let
44:01 - me tell you the scenario what we will be
44:02 - doing in this particular video so
44:04 - basically we will first read the input
44:06 - from the user okay that will be the IP
44:10 - or domain name and next what we will do
44:13 - we will be uh using the Ping command to
44:17 - Ping that particular server okay so
44:20 - things are really easy if you want to go
44:22 - ahead with the video like with yourself
44:24 - and you can go for it you so it will
44:27 - give you the more confidence about it
44:28 - okay
44:29 - so now I will use this scenario and I
44:32 - will create one script so I actually
44:33 - already have opened my visual studio
44:35 - code and you have to just create one
44:40 - script and I will use the hashbank
44:45 - sorry
44:47 - okay so now what we have to do we have
44:49 - to take a input from the user so already
44:51 - we have covered how we can take inputs
44:53 - so you can use the read here and you
44:56 - will prompt for the user like which
44:58 - server
44:59 - you want
45:01 - to Ping okay it can be any server it all
45:06 - depends upon you and I will create one
45:07 - variable here server address
45:10 - and next moving forward what I will use
45:12 - the Ping command so basically in ping
45:14 - command we have some options like hyphen
45:16 - C so whatever uh if you use normal ping
45:19 - command so like if I will use google.com
45:23 - so here you can see it will go in the
45:25 - infinite but if EB want only for the
45:28 - three or four okay so what we can do we
45:32 - can give the count for three and the
45:35 - deadline for
45:37 - 5 Second after five seconds if nothing
45:40 - like Ping command doesn't get any
45:42 - response and it will exit
45:44 - so next what we will do we have to just
45:47 - give this name
45:48 - server
45:50 - address now we are good to go what we
45:53 - have to do we have to just add the
45:54 - permission to this file using
45:58 - CH mode command and then I will run this
46:01 - not zero one I have to write 0 6.
46:05 - okay so I want to Ping Google server
46:08 - that is 8.8.8
46:12 - okay so here you can see I'm getting the
46:14 - response okay and now what I will do I
46:17 - will enter some random IP
46:20 - like 8.6.5 52.4 so it will wait for the
46:24 - Five series five second and
46:25 - automatically it will exit
46:27 - so here you can see
46:31 - okay so yeah here we can see five
46:33 - packing transmitter but zero is saved
46:35 - 100 packet loss okay so in this way you
46:38 - can create different scripts so that
46:40 - will be helpful for you so that's all
46:41 - for today's video I hope you like this
46:43 - our first starts so that's all guys and
46:45 - I hope you liked it I will meet in the
46:47 - next video thank you for watching
46:50 - hello guys now in this video we will be
46:52 - talking about our task two okay so let
46:54 - me discuss with you what we'll be doing
46:55 - in our this task so basically we will be
46:58 - connecting our remote machine with the
47:01 - SSH using bash script okay we will
47:03 - create a script with the help of this we
47:04 - will connect to that particular machine
47:06 - so we uh first of all let me tell you
47:09 - how you can create your virtual machine
47:10 - so actually I have there is a link for
47:13 - you I will add this link in our uh
47:15 - description then there is a tutorial to
47:18 - create a virtual machine you can easily
47:19 - do it okay and I have actually already
47:22 - created the machine so here is my public
47:24 - IP address I will copy this IP address
47:26 - and now I will create the script okay
47:30 - so let me open the vs code and I will
47:33 - just create the file 0 7 task two dot sh
47:38 - okay but before that I will tell you
47:40 - like
47:41 - if you want to do it on yourself you can
47:43 - easily do it okay
47:46 - so if you do it yourself and that will
47:48 - be very good for you so because you will
47:50 - get a more confidence as well you will
47:52 - learn more quickly so let me I will just
47:54 - give you the basic idea what we will be
47:56 - doing so I will take the username and
47:58 - the password
47:59 - okay not username and the IP and then I
48:03 - will use the SSH command to connect with
48:04 - that machine so this is the overall idea
48:06 - and if you want to take input from the
48:09 - parameter then also you can
48:11 - do it okay
48:13 - so first of all let's take the input I
48:17 - will prompt the user to enter the
48:18 - username first
48:20 - user name and then here I will create
48:23 - the username variable read hyphen P
48:27 - enter the
48:29 - IB
48:30 - so here I create the IP variable
48:33 - I will use SSH command SSH dollar
48:36 - username we need to do dollar username
48:39 - dollar
48:42 - IP
48:43 - okay so in this is the uh command which
48:47 - we we will use okay otherwise we can do
48:50 - with the passing parameters also you we
48:52 - will do it that also
48:54 - so now I will need to give the
48:57 - permission to this file 07 now we'll
49:01 - execute this file 0 7
49:04 - and I will enter the username as ayush
49:06 - and my IP is not this one
49:11 - here okay
49:13 - and my IP is this
49:16 - and it will ask me to enter the password
49:18 - so I will enter the password
49:23 - okay
49:24 - so here you can see I use I use the name
49:27 - of the VMAs also if that's why it's
49:29 - showing like this I will do LS here so
49:30 - nothing is there who am I so name of the
49:34 - user I use here also so in this way you
49:37 - can connect with the uh remote machine
49:39 - using our bash script okay so you can do
49:43 - exit to exit come out of the machine and
49:46 - now we will see how we can uh connect
49:49 - with the uh using like parameters okay
49:53 - so what I will do I will just comment
49:55 - out these all and I will create a
49:58 - variable username and it will be equal
50:01 - to the dollar one okay the first
50:04 - parameter then the IP will be equal to
50:07 - the dollar two okay we will save this
50:10 - script and I will just pass the
50:13 - parameters like I wish for username and
50:16 - IP for
50:18 - this okay two four seven
50:20 - hit enter
50:22 - and it will ask me to enter the password
50:28 - now we are good to go and again let's
50:31 - check who am I I wish okay so in this
50:34 - way you can connect with the remote
50:36 - machine easily you can use environment
50:39 - variables not environment variable you
50:40 - can pass parameters you can use
50:44 - variables okay whatever thing you want
50:46 - to do so I hope you liked it so this is
50:48 - a way to learn new things by while doing
50:51 - some new things like create I will like
50:54 - in future
50:55 - uh I will come up with more task okay
50:59 - so that's all for today's guys and I
51:01 - hope you have used all the concept which
51:03 - you have learned till now so that's all
51:05 - and I meet you in the next video thank
51:06 - you for watching
51:09 - hello guys now in this particular video
51:11 - we will be learning about the operators
51:13 - okay so let me first discuss with you
51:14 - what will be covering in this particular
51:16 - video so we will go first with
51:19 - arithmetic operators then we will go
51:22 - with the relational and the Boolean
51:27 - and so on okay so I hope uh you guys
51:31 - have completed our previous video so now
51:34 - let's just create the new script
51:37 - that is 0 8 operators dot sh
51:42 - okay just add the hash bank or pin
51:47 - C Bank you can say okay now I will
51:50 - create uh one variable
51:53 - and one enter N1
51:56 - and I'll create a variable name as N1
51:59 - read iPhone P enter and to
52:04 - give the value name as N2 then uh I will
52:08 - Echo I will do addition is for just
52:13 - addition
52:15 - so to for in cell how you do it we
52:18 - cannot write like this N1 plus N2 there
52:22 - is a proper Syntax for it you need to
52:24 - write like this
52:25 - N1 plus N2 okay or you can and shadows
52:30 - you can give dollar but there is no need
52:33 - okay so now in this way you can write
52:36 - the expression inside these two
52:38 - parentheses and the dollar sign outside
52:40 - of that expression okay
52:43 - so uh let me just run this script once I
52:46 - will give first the certain permission
52:48 - to this file
52:50 - and then I will execute it d08 and N1 is
52:55 - 4 4 that is eight yeah we are going to
52:58 - go now now I will just copy
53:02 - all these things like
53:05 - addition so here we you can go with the
53:08 - subtraction
53:11 - what I'm doing wait
53:14 - subtraction then here you can go for
53:18 - multiplication
53:22 - and here division
53:25 - okay
53:28 - and next uh we can go with modulus also
53:35 - so
53:36 - let's go with modulus
53:41 - modulus okay
53:44 - m o d u l u s okay modulus now let's
53:49 - give the operator like here it will be
53:52 - percent
53:54 - uh let me just write like this so that
53:58 - it will be easy to read for you for
54:02 - division you have to give this forward
54:04 - slash for multiplication you know the
54:07 - star and for the subsection there is the
54:10 - minus okay
54:12 - so let's run this script and we will get
54:15 - the output for each number so I will
54:18 - give the 10 and 5. so you can see the
54:21 - addition is 15 subtraction is 5
54:22 - multiplication is
54:24 - 50 division is 2 and modulus is 0 why
54:27 - because modulus gives you the remainder
54:29 - okay if you do a three by two then in
54:32 - that case you will get the remainder as
54:34 - 1.
54:35 - so you can see the modulus is one okay
54:39 - now next uh you can do increment
54:42 - operator and decrement operator also you
54:45 - can use so how you can do it uh using
54:48 - plus plus and minus minus okay so I will
54:52 - do Echo
54:55 - increment
54:57 - so here we will use dollar
55:03 - and what you have to increment N1 plus
55:06 - plus or what you can do plus plus N1 it
55:10 - will first increase and then print the
55:12 - value
55:13 - okay so let's just run the script
55:17 - clear enter the n155 so that you can see
55:21 - incremented six okay in case if you do
55:24 - N1 plus plus so here we will not see the
55:27 - increment because it first prints the
55:28 - value then increments okay so in this
55:32 - case we will get the value else
55:35 - 5 here okay so but now what we will do
55:38 - if we will Echo the N1
55:41 - then we will get the six okay
55:45 - so let me just clear this screen enter
55:47 - five five okay now here you can see you
55:49 - have got the six so I hope you got the
55:51 - concept of incremental decrement if plus
55:53 - plus is after the variable and then it
55:55 - will first print then it will increment
55:57 - f plus plus is first then it will
55:59 - increment then print
56:00 - okay so similar case with decrement
56:03 - equal
56:06 - decrement
56:09 - where is the dollar
56:11 - and you have to do minus minus and 2.
56:16 - we can use and here also I I do uh
56:22 - leave it as it is
56:25 - so clear the screen
56:28 - enter N15 into six
56:31 - and now decrement value with 6. first it
56:35 - was 7 and now it is six okay
56:39 - so I hope you got it uh how the things
56:41 - are working okay so now let's check with
56:44 - some relational operators like equal to
56:47 - equal to greater than equal to less than
56:49 - equal to greater than less than all
56:51 - those things okay now you have to just
56:53 - equal okay
56:57 - automatic operators okay
57:02 - just copy it and you have to go there
57:05 - and just write here read
57:10 - the relational operators okay I just uh
57:15 - comment out these things
57:18 - okay
57:19 - so now what we have to do so now we will
57:23 - use this relation operator with the if
57:25 - else so till now we have not covered the
57:27 - effects but still we can use it okay so
57:30 - how will you do it uh we will use if and
57:34 - then the big bracket this is the
57:37 - whatever the condition we will write in
57:38 - this so dollar N1 and we use GT for
57:42 - greater than and dollar N2 okay and then
57:46 - so don't worry I will teach you about
57:49 - yourself in our next video okay so you
57:51 - have to just eco
57:53 - N1 greater than N2 like this and then
57:56 - you have to close the if block okay so
57:58 - GT means greater than and there are also
58:00 - many like GT for greater than and GE for
58:05 - greater than equal to and LP for less
58:09 - than l e for greater than equal less
58:11 - than equal to n e for not equal to okay
58:15 - like this you can uh use okay so we will
58:19 - use first GT and then we will use other
58:22 - options in next okay
58:25 - so now you can run the script
58:30 - 0 8
58:33 - and I will write 5
58:36 - and 4.
58:37 - so here you can see yeah and one is
58:39 - greater than N2 now I will change the
58:42 - G's to GE and I will write here greater
58:46 - than equal to so
58:49 - now let me just clear the screen and run
58:51 - this script again so 5 and 5 so yeah N1
58:54 - greater than equal to it this line is
58:56 - executing and you can do now LT
59:00 - if n 1 less than equal to so in one less
59:05 - here I will do and I will again run this
59:07 - script
59:09 - so five four five so yeah and one
59:11 - there's an N2 it is executing again less
59:15 - than equal to
59:17 - so we can use like this
59:21 - um four four yeah it is executing we can
59:26 - use hyphen EQ to check equality
59:29 - python EQ we can do like this
59:33 - five five yeah so here we have not
59:36 - changed but still you can and you can
59:39 - think like okay so now what we do five
59:42 - and five okay so c n one equal to N2 so
59:46 - in this way we can use the relation
59:48 - operators now let me tell you about the
59:51 - end of data so and of it is nothing but
59:53 - if both the condition becomes true then
59:56 - that then the whatever inside that
59:59 - condition will be executed okay so if N1
60:03 - equal to N2 and I use a hyphen a option
60:06 - to check and and operator
60:10 - and I will check if dollar N1 is greater
60:13 - than 1.
60:15 - okay if this is the case then this line
60:18 - will be execute okay
60:22 - so N1 I will write 5 5 and N1 greater
60:26 - than 1 yes so
60:28 - okay I am getting some error here okay
60:32 - you can write like this
60:34 - clear
60:37 - five five yeah now here you you got the
60:41 - like output as N1 equal to N2 now what I
60:44 - will do I write 0 0
60:47 - and let's check what happens whether we
60:49 - will get any output or not so here we
60:51 - are not getting any output but now we
60:54 - can use hyphen o option for or operator
60:56 - okay so let me just clear this screen
60:59 - and use like this iPhone
61:02 - 0 0 so in this case you the like this
61:07 - condition is equal like this condition
61:10 - satisfies N1 equal to N2 that's why this
61:13 - particular line has been executed okay
61:17 - so in this way and and operator and or
61:20 - operator works so that's all for today's
61:22 - videos guys I hope you liked it and yeah
61:24 - if you have any queries then you can ask
61:25 - us in the comment section and I will
61:28 - surely update this code in our GitHub
61:30 - repository I will add the link in our
61:32 - description so that's all for today I
61:34 - will meet you in the next video thank
61:35 - you thank you for watching
61:38 - hello guys now in this particular video
61:40 - learning about its sales conditions okay
61:42 - so let's start with the video and I hope
61:45 - you are aware of yourself but if not
61:47 - then let me tell you first what about
61:48 - what is this so basically if if else
61:51 - what happens
61:52 - if there will be one condition if that
61:55 - condition satisfies it it is true then
61:58 - the whatever the statement you write
62:00 - inside that if block that would execute
62:02 - okay so without wasting time first of
62:04 - all let me uh tell you about like how
62:07 - will you write this script so that will
62:09 - be easy to understand for you so zero
62:12 - nine I will write here if else dot sh
62:16 - okay we are good to go now
62:19 - okay bin bash okay so here
62:23 - just support this scenario a equal to 10
62:26 - okay if I will write if and the
62:29 - condition is written inside this big
62:32 - bracket okay and here you have to do if
62:36 - a
62:39 - equal to 10.
62:42 - okay
62:43 - so then you have to write like this then
62:47 - then what what do you want yes with this
62:50 - condition satisfy you have to write like
62:52 - this you can do anything here I am doing
62:55 - just printing like a is equal to 10 okay
63:02 - and you can do like in else
63:05 - you can write like this Eco a is not
63:10 - equal
63:13 - to 10 okay and then to close the eighth
63:17 - log you can write like this F I so I
63:20 - will run this script but before they
63:22 - will need to add the permissions 0
63:25 - magnitude yeah
63:27 - clear the screen dot slash zero nine
63:31 - okay zero nine yeah a is equal to 10
63:36 - what if I do 11 here and run this script
63:40 - so in this case this condition will not
63:42 - satisfy okay so how we can do it 0 9 a
63:47 - is not equal to
63:48 - 10. so I hope you got it how this thing
63:51 - work like if conditions so we will take
63:54 - the scenario of voting system like there
63:59 - will be person age we will take the
64:00 - input from the user I will just comment
64:04 - out these things okay read
64:07 - and I will do here uh
64:11 - page okay
64:15 - or I will prompt for the user enter
64:19 - your age
64:21 - here I will do age okay and we will
64:24 - apply the conditions on this if age
64:29 - where is the dollar if age
64:32 - is greater than equal to
64:36 - 18
64:37 - in this case we will write eco
64:41 - U are eligible
64:48 - cost
64:50 - okay in else condition what we can write
64:54 - ego
64:57 - you are
64:59 - not
65:02 - eligible to cast vote
65:07 - okay and we have to just close this if
65:09 - block
65:11 - control is to save clear the screen
65:15 - enter your age 23 you are able to cast
65:18 - more again
65:19 - 12 you are not eligible to cast what
65:22 - okay if
65:25 - or I can just do a greater than
65:28 - okay and I use one more thing that is
65:32 - alif
65:33 - it's also like the if but if this
65:36 - condition fails it will check for this
65:38 - particular condition here I will write
65:41 - if
65:44 - uh
65:45 - age
65:47 - equal to
65:50 - is equal to ID equal to 18
65:54 - so in this case
65:57 - I want
65:59 - eco
66:03 - please
66:05 - apply for voter ID card
66:09 - okay and here we will not use 10.
66:13 - so now what we can do clear the screen
66:16 - run the script I will write my age equal
66:19 - to 18.
66:21 - so so so what happened
66:25 - okay okay I think we will write them
66:33 - okay yeah please apply for voter ID card
66:36 - okay so this is the LF condition that's
66:38 - why we will need to write it then okay
66:41 - so right now what's happening whatever
66:44 - the age we are entering so here it is
66:47 - first checking this condition if this
66:49 - condition fails it will come upon this
66:52 - condition so now this condition executes
66:54 - that's why
66:56 - it is giving the output as this line
66:59 - okay what if the output doesn't match
67:01 - with
67:03 - any condition
67:04 - in this case what will happen the else
67:06 - condition will execute you are not
67:08 - eligible to pass towards simple okay so
67:11 - in this way you can use if L if else
67:14 - conditions in your projects okay
67:17 - so that's all for today's videos guys I
67:19 - hope you liked it you will get the
67:20 - source code of this particular video in
67:22 - our GitHub repository you can get it
67:24 - from there also okay so that's all for
67:27 - today's guys I will meet you in the next
67:28 - video and thank you for watching
67:32 - hello guys now in this video we'll be
67:34 - learning about the case statement okay
67:36 - so if you are aware of the switch switch
67:39 - statements in different languages and
67:40 - you you it will be very easy for you
67:42 - guys but not let me tell you about how
67:44 - it will work so why this basically came
67:47 - in Road first of all we will discuss
67:48 - about this so in many programs you get
67:51 - to know about that there are multiple if
67:53 - else conditions and that will be very
67:55 - confusing but in case of uh switch case
67:59 - or you can use you can tell the K system
68:01 - it is very easy to understand those
68:03 - things and
68:05 - use it so what I will do I will just
68:07 - create a new file that is a case dot sh
68:11 - okay so I will take the example of the
68:14 - grading system okay so if the grid is a
68:17 - then
68:19 - that will be very good like we will
68:22 - print something out integrate I will
68:24 - write like this
68:25 - and I will create a variable create and
68:28 - how will we use it we'll use it case
68:31 - dollar grade okay
68:34 - and then what we'll do we will use the
68:37 - in keyword and here we will add the
68:40 - certain conditions like if the grid is a
68:42 - then what to do so here I will do like a
68:46 - then what we have to do not this one uh
68:50 - wait a minute yeah I've used only this
68:52 - bracket closing bracket so in this case
68:55 - I will Echo
68:58 - it's uh your
69:01 - uh your
69:04 - marks
69:06 - is between
69:09 - 9200 okay I can use like this then if
69:13 - the grade is B no and but before that
69:16 - what we have to do you have to just add
69:19 - this semicolon like this is the syntax
69:20 - of using the switch case in this so for
69:24 - B
69:25 - you will write like eco
69:30 - uh your marks
69:33 - is in between
69:37 - kt1 to 90.
69:40 - like this
69:42 - okay
69:43 - and so on like let me call uh use
69:48 - the semicolon
69:49 - and then we will use here C grade
69:54 - and then I will Echo
69:57 - your marks is ended
70:02 - 71 to 80 okay and then we have to just
70:11 - use the asterisk we can use for default
70:17 - and here we will use the semicolon first
70:21 - and here I will Echo
70:25 - your marks
70:28 - as your marks below
70:32 - 70 like this and then we have to use the
70:36 - E stack keyword and we are good to go
70:39 - now we will just give the permission to
70:42 - the subscript
70:43 - uh 10 okay done now I will run this
70:47 - script again you enter my grade I will
70:49 - enter c your mouse is written this okay
70:52 - I will enter
70:53 - B you imagine between this I will enter
70:56 - e so your mouse will be the select T
70:59 - okay so in this way this thing works
71:01 - okay so I hope you like this video guys
71:03 - and if you have any confusion about this
71:05 - you can ask us in the comment section
71:07 - okay and I will surely add this course
71:10 - in our GitHub repository you can accept
71:12 - this course from there okay so that's
71:13 - all for today's guys I will meet you in
71:15 - the next video so thank you for watching
71:19 - hello is now in this particular video
71:20 - we'll be learning about the array and
71:22 - cell script okay so you can see already
71:24 - I have created this file that is
71:25 - always.ss and added the shebang so
71:28 - before starting the video let me first
71:29 - describe you what is the address so I
71:31 - will just write it like this so array
71:33 - you you can say like that is array is
71:36 - nothing but uh
71:38 - data structure
71:40 - which is used for storing
71:45 - multiple values in a single variable you
71:50 - can say
71:51 - okay so this is the array simple
71:54 - suppose uh let me tell you the one use
71:56 - case like suppose uh you have to uh
71:59 - store multiple names okay suppose you
72:01 - have to store 10 names so how will you
72:03 - create it like if you don't know
72:05 - mortality you will just do like this
72:06 - name one equal to ayush
72:08 - name to equal to some another name like
72:10 - name three equal to Let's create some
72:14 - write some name like uh
72:16 - ayushi
72:17 - name four equal to Avinash like this
72:21 - okay
72:22 - so this is not a good practice of
72:24 - storing names in different different
72:26 - variables so that's why array came in
72:28 - role for storing multiple values in a
72:30 - single variable okay
72:32 - so uh I will first tell you about uh
72:35 - like array initialization what is the
72:37 - method of adding initialization like how
72:39 - you can create a legend cell scripting
72:41 - so it's a very simple so you have to
72:43 - just
72:45 - give or add a name suppose uh name list
72:48 - I will give name list equal to this
72:51 - single parenthesis and here you have to
72:53 - store multiple names like ayush like
72:56 - here I will write Ankit
72:59 - ayushi and Avinash okay so here you can
73:03 - see uh all the names has been stored in
73:05 - a single variable that is the name list
73:07 - okay
73:08 - so now you will think about how you will
73:11 - access these arrays okay that's a point
73:14 - like how you will access it so let me
73:16 - tell you first about array indexing okay
73:21 - it is used to
73:25 - access the elements
73:30 - present in an array okay so array
73:34 - indexing is basically used to access the
73:36 - elements in an array so it starts from
73:38 - zero suppose uh this is the array so
73:42 - the first element will have indexing is
73:45 - index 0
73:46 - second one will have one
73:50 - this one will have two and this one will
73:52 - have three okay so here is four elements
73:55 - so like there is uh like index starts
73:59 - from zero and ends with n minus 1 that
74:01 - is three that is 4 minus 1 that is equal
74:03 - to 3. so so to accessing the elements of
74:08 - an array we will use the you will use
74:10 - these index okay like if I will uh enter
74:14 - the index 0 so at index 0 I use this
74:17 - present at index on this Ankit is
74:19 - present index 2 is iuc index three is
74:21 - Avinash okay so now let me tell you
74:23 - first about how you can access the
74:25 - arrays Okay so
74:27 - I will just use the Eco so it will
74:30 - simply print the uh whatever the
74:33 - index present okay so how you can do it
74:35 - Eco dollar and this parent uh curly
74:39 - braces and you have to provide the array
74:41 - name that is name list
74:44 - and the big bracket and the index which
74:46 - you want so I want zero index okay so I
74:50 - will just
74:52 - wait a minute I will just comment out
74:54 - these things yes
74:56 - and I will run this script okay
75:00 - so 11 dot sh so let's run 11. sh
75:09 - what happened
75:11 - LS
75:12 - okay I will need to give the particular
75:14 - permission here
75:18 - dot slash eleven yeah
75:20 - so here you can see so this one is
75:22 - printing like that is nothing but a data
75:24 - structure so I will also comment out
75:26 - this thing and I will it will just print
75:28 - up the first index okay
75:32 - wait a minute I write like this eco
75:37 - first index
75:45 - let me run this so here you can see the
75:48 - first index is this similarly I will
75:50 - print all the other three indexes
75:53 - so I will just copy these things
75:55 - and here I will just write the Second
76:00 - and here we will write the Third
76:03 - and here fourth
76:05 - and you have to just change the number
76:07 - here like index number like 0 1 that is
76:10 - 2 and that is 3.
76:13 - just Ctrl save clear dot slash eleven
76:17 - dot sh and yeah so here you can see the
76:20 - first index second index third index
76:22 - fourth index so so here the main thing
76:24 - is that it's like you can access or you
76:26 - can store multiple values in a single
76:28 - variable you can see here so but in this
76:31 - case you you will you have to create a
76:33 - multiple variables to store those values
76:35 - so that's not a good practice so instead
76:38 - of this you can use an array
76:40 - so uh one more thing is like if you want
76:43 - to print the multiple arrays oh it's not
76:45 - multiple arrays all the elements of an
76:46 - array so how you will do there is also
76:48 - the special Syntax for this uh like we
76:51 - we use asterisk okay for printing so you
76:55 - can use like this eco
76:57 - all arrays all array elements
77:02 - so I will just write like this name list
77:08 - and this one and here you can see the
77:10 - asterisk
77:11 - you have to just clear the screen and
77:14 - this one all array elements is here are
77:17 - you shank it I usually and one more uh
77:20 - syntax is there like you can use
77:22 - adderate also for accessing all the
77:25 - elements
77:27 - so you can see okay
77:29 - so that's it guys for today's video I
77:31 - hope you liked it and yeah one more
77:33 - thing I will upload this code in my
77:35 - GitHub directory audio repository you
77:39 - can say here you will see okay you can
77:41 - get this from cell scripting tutorial I
77:43 - will add it here okay
77:46 - so that's it for today guys and I will
77:48 - meet you in the next video and in the
77:49 - next video we'll be learning about the
77:50 - for loops and all those things okay so
77:52 - that's all for this video guys thank you
77:55 - hello guys now in this particular video
77:57 - we'll be working on the loops okay so
77:59 - basically today we will start with the
78:01 - for Loop and actually there are
78:02 - different types of Loops but before that
78:04 - let me first create the file that is the
78:06 - for Loop dot sh
78:09 - so for Loop dot sh okay so now we are
78:12 - done let me just add this C Bank okay so
78:15 - let me just first discuss about you the
78:17 - what is the loop suppose if you want to
78:19 - do some task that is the there that like
78:22 - exist there is some kind of repetition
78:24 - of thing suppose uh like if you have
78:26 - watched the meme like uh uh boyfriend
78:28 - send her girlfriend like I love you
78:30 - hundred times hundred times so what is
78:32 - this thing this is basically a loop okay
78:34 - so Loop is nothing but you can say like
78:37 - in kind of definition like uh what you
78:40 - can say
78:41 - um iterations okay like doing one thing
78:44 - again and again and again okay so
78:47 - suppose let me first tell me with an
78:49 - example suppose uh
78:52 - in some cases like suppose if you got
78:55 - some punishment and you have to write
78:57 - sorry for a teacher and your teacher
78:59 - says like you have to write the sorry a
79:02 - hundred times and all those things or
79:04 - five times
79:05 - so uh similarly what you will do you
79:08 - will oh sorry
79:10 - you will do like this like Eco sorry if
79:13 - you don't know the loop and all those
79:15 - things you will write just like this
79:16 - sorry sorry sorry and like you will just
79:20 - simply copy and paste things okay
79:23 - so this is what is this this is the
79:26 - repetition of the same thing so this
79:28 - repetition is managed by or removed by
79:32 - the loops okay so basically there are
79:34 - the three types of loop that is the for
79:37 - Loop
79:39 - while loop
79:40 - anti-loop okay I will be discussing all
79:43 - these two Loops in our further videos
79:46 - but now in this video we'll be working
79:47 - only on the for Loop okay so let's start
79:50 - with the first thing uh but before that
79:52 - uh I will create one array okay and I'll
79:55 - be working on that first okay
79:59 - so let me create an array and in this I
80:01 - will use the loop okay
80:05 - so I will just create with some
80:09 - languages name like python
80:13 - C plus plus
80:17 - Java
80:19 - and c and yeah like comma is not
80:22 - required
80:25 - okay so but before that let me just
80:28 - print the uh these arrays so everything
80:31 - nice I can like check everything is
80:34 - working fine or not okay
80:36 - my area and I'll use provide asterisk
80:38 - here and I will just give the certain
80:41 - permission for this file that is the
80:43 - tool
80:44 - CH mode plus X12 okay
80:48 - dot slash 12 okay
80:51 - so here you can see the power this ad is
80:54 - working fine okay
80:56 - and so now what I will do I have to just
80:59 - uh print this array using the for Loop
81:03 - okay how you can do it but before that
81:05 - let me tell you first about the syntaxes
81:07 - and all those things of for Loop so the
81:10 - basic Syntax for for Loop is like this
81:11 - for parenthesis here the initialization
81:14 - will be there initialization here will
81:17 - be the condition
81:19 - if you know I was the C programming or
81:21 - Java programming then that or CPP so
81:24 - it's very easy for you to understand
81:25 - this okay but if you don't do then also
81:28 - you can get it right now okay and here
81:30 - will be the increment or decrement
81:34 - okay and the two curly braces like this
81:36 - okay
81:38 - so what if this is the Syntax for for
81:41 - Loop
81:45 - okay
81:46 - so uh let me tell you how the thing
81:48 - works okay so suppose uh I want to print
81:51 - uh sorry uh like this number of times
81:54 - five times so I will uh start with 0 or
81:59 - 1 it's all upon you and I will provide
82:01 - the condition like uh that uh I will get
82:05 - one variable at I equal to 0 and I will
82:07 - provide the condition that is I less
82:08 - than 5
82:10 - and I plus plus okay
82:12 - so uh let me just open up my pane so I
82:15 - can like you you should visualize that
82:18 - thing okay
82:21 - so
82:25 - where is text yeah
82:28 - so here simply I write on for Loop that
82:31 - is I equal to 0 I should less than six
82:36 - or five if you're starting for
82:39 - this one
82:41 - from zero okay
82:44 - so this is the for Loop okay and I will
82:47 - just Echo here the sorry statement okay
82:52 - so here now what you have to think is
82:54 - like how the things are working okay
82:57 - so let me just uh
83:00 - do like this okay so how things are
83:03 - working basically so so when your Loop
83:06 - will run so how it runs so it will
83:08 - change it will first assign I value 0 if
83:11 - I equal to 0
83:13 - okay it will check the uh condition so I
83:18 - here I will just Define the titles for
83:20 - them
83:21 - uh here I will do initialization there
83:25 - will be the condition and
83:28 - here will be the increment okay so by
83:32 - increment we call here I am using the I
83:35 - plus plus it simply means it will
83:37 - increase and increment the value of I by
83:39 - 1.
83:40 - okay so now here what you I will do so
83:42 - you can see the one like right now there
83:45 - is I equal to 0 okay so it will now
83:48 - first check the condition whether I is
83:50 - less than 5 this one so yeah 0 is less
83:54 - than 5 so if condition is true it will
83:57 - print the sorry so here in this case 0
84:01 - less than 5 condition is true
84:04 - okay and it will what it will do it will
84:06 - print okay so here I will do like print
84:10 - what it is printing
84:12 - so it is printing sorry and then again
84:15 - it will increment the value of
84:18 - I2 I plus 2 that is now the value of I
84:21 - will become
84:22 - 1 okay so here again I will give like
84:26 - here this I equal to 1 so again it will
84:28 - check whether one less than five yeah
84:30 - one less than five true it will print
84:33 - sorry
84:34 - okay and again it will increment the
84:37 - value to 2 okay now again Loop will run
84:40 - for two like I will be 2 and it will
84:43 - check whether a 2 less than five yeah
84:45 - two less than 5 condition is true
84:48 - and it will print sorry again and I will
84:52 - become increase by 1 from here like I
84:55 - will be 3.
84:58 - Okay so
85:00 - similarly again I will be 3 here and it
85:04 - will check like 3 less than five yeah
85:06 - condition is true
85:08 - so what it will do like it will print
85:12 - sorry
85:13 - okay and again the value of I will get
85:15 - increased by 1 that is 4
85:18 - and again uh now it will do I will be 4
85:22 - and it will check let me just increase
85:25 - this size here
85:27 - I equal to 4 okay and it will do whether
85:31 - 4 less than 5 yeah it's less than 5
85:33 - condition is true
85:35 - and it will print sorry first
85:38 - and then it will increment the value of
85:42 - I to 5 okay and now I will become 5 and
85:47 - it will check whether 5 less than 5
85:51 - so here condition is false and what will
85:54 - happen Loop field and okay and it will
85:59 - print sorry five times okay if you're
86:02 - starting your loop from
86:05 - from zero
86:07 - okay
86:09 - so this is the simple uh working of the
86:12 - for Loop like how things are working so
86:14 - now let me just tell you about with the
86:16 - experiment part how you can get it okay
86:19 - so let me just open up this one and I
86:22 - will just comment of these things
86:25 - okay
86:27 - and for Loop and I will initialize the
86:31 - value of I from 0 to I less than 5
86:34 - because I have to print 5 times I plus
86:36 - plus
86:38 - Eco sorry
86:40 - okay
86:42 - okay just Ctrl s to save again let me
86:45 - run the script which number it is 12
86:48 - okay
86:50 - it's not this one sorry
86:53 - yeah so here you can see five times
86:55 - sorry has been printed okay but what if
86:59 - you want uh like if you do less than
87:02 - equal to 5 so in this case suppose uh
87:06 - less than equal to 5 so it will print to
87:08 - you uh it will print six times
87:12 - so here you can see six times have
87:13 - dependent why why this happened because
87:16 - at this point now if there is less than
87:20 - equal to so here the condition is
87:22 - satisfied like yeah 4 5 is less than
87:25 - equal to 5 so condition is satisfied
87:27 - satisfying and it will be true and solid
87:31 - will get printed and then
87:33 - sorry will be printed and then I will be
87:35 - equal to 6 and now if you will check it
87:38 - will check the condition that is 6 less
87:40 - than 5 so that condition is false so in
87:43 - this case our Loop will get end and you
87:47 - will come out of the loop
87:49 - okay
87:50 - so in this way uh for Loop works I hope
87:53 - you got it and uh let me just tell you
87:55 - one more thing like how things work and
87:57 - like there is also uh some different
87:59 - syntax of for Loop okay so the
88:03 - difference index is this like this uh
88:05 - for uh War suppose you have to provide
88:09 - some list like uh
88:12 - like you can do like this for I in and
88:15 - you will provide a list like one two
88:17 - three four five six seven eight nine ten
88:22 - you can do like this also okay or you
88:25 - can provide some any other variables
88:27 - also like you can provide string names
88:30 - also and all those things
88:32 - and here you will just do do okay and in
88:37 - this what you will do I will just print
88:39 - like this eco
88:42 - iteration
88:44 - colon and here I will just write the I
88:48 - okay and then you will write here
88:51 - done
88:53 - do done okay Ctrl s to save I will just
88:56 - comment out this this Loop and again I
89:00 - will just run this script okay
89:02 - so here you can see the iteration I is
89:06 - printed not the value okay so at that
89:11 - point I will just provide the dollar
89:12 - Okay so
89:17 - yeah so here you can see iteration one
89:19 - let me just uh clear the screen and
89:22 - again run the script so here you can see
89:24 - one two three four five six seven eight
89:26 - nine ten okay so in this also you can
89:28 - run Loop suppose uh if you want to do
89:31 - some operation of if one comes or like
89:34 - suppose I provide here some different
89:36 - lists like the name list suppose I push
89:40 - iuc okay
89:42 - so here uh
89:45 - suppose if you want to uh
89:48 - do like this if
89:52 - and the condition which you will give
89:53 - like dollar I equal equal to
89:57 - I use
90:00 - so and that's in this case what you
90:02 - should do like
90:05 - then
90:09 - eco
90:10 - uh what should we Echo like um
90:15 - you can equal like yeah uh
90:18 - like this are you sure she's a good boy
90:24 - okay and you have to just uh write uh
90:28 - what you can say close the if condition
90:31 - I will save it and I will just run this
90:36 - so here it is showing some kind of error
90:39 - like uh unexpected token then at line
90:42 - number
90:44 - 29 oh wait a minute I have whether uh
90:48 - let me write like this first and I will
90:52 - do it in the colon not colon
90:59 - okay why it's showing error I'm not
91:01 - getting
91:01 - [Music]
91:10 - uh let me just uh if
91:14 - if dollar I equal equal to ayush then
91:18 - eco
91:20 - free
91:22 - yeah it's correct
91:26 - uh wait a minute
91:31 - okay so uh basically I got it so here
91:34 - you have to just provide one space so I
91:37 - was doing just some silly mistakes so
91:39 - let me again run this script uh clear
91:42 - dot slash yeah so here you can see uh
91:45 - sorry which skipped that in
91:48 - I have to run 12 sorry
91:50 - 12 okay so here you can see I used to
91:53 - the good boy so if dollar I equal equal
91:55 - to I use then it is printing like yeah
91:57 - ayush is a good boy okay so I can do
91:59 - right right uh right like this like
92:01 - dollar I okay so it will also run
92:06 - so I wish you the goodbye okay in this
92:08 - case you can see so uh basically you can
92:11 - uh whatever you I was saying uh you can
92:14 - just initialize or write your for Loop
92:17 - in the syntax also okay
92:20 - so uh if you are familiar with the C
92:22 - programming or CPP then that is very
92:24 - easy for you and if you are for uh same
92:27 - like familiar with python then this one
92:29 - is also fine for you okay
92:31 - so uh now let me tell you first about uh
92:34 - how you can print the array elements
92:36 - okay so in our previous classes we have
92:39 - learned about array so here you can see
92:40 - I have created array here let me just
92:42 - create it below
92:45 - I will comment out this and uh
92:49 - I will just
92:51 - create array and I will just add some
92:54 - other language also like
92:57 - kotlin I will add and some other framers
93:01 - like reactor
93:03 - JavaScript
93:06 - shell scripting okay
93:10 - so this is my array okay so now I have
93:12 - to print this array okay using for Loop
93:15 - so how will you will print an ad using
93:17 - for you so basically we will need to
93:19 - define the uh condition like array
93:22 - should be less than the size minus one
93:24 - so here what is the size of the array
93:26 - that is one two three four five six
93:29 - seven eight so zero to seven we have to
93:32 - do so in this case you will use the
93:34 - normal Loop that we use in for in other
93:36 - programming language that I equal to 0 I
93:39 - should be less than 7 and I plus plus
93:43 - and we will just Echo the indexes okay
93:47 - so how you will do it
93:49 - my add-in name and I will provide the
93:52 - index as I
93:54 - and we are good to go now let me just
93:57 - run the script
93:59 - yeah here you can see all the ad
94:01 - elements has been printed in this in the
94:03 - same order okay
94:05 - so that's it for today guys I hope you
94:08 - liked it like how the for Loop works and
94:11 - you like this representation also like
94:13 - everything should be clear for you if
94:15 - you have any problem then please ask to
94:17 - me
94:18 - okay so that's all for this guys and I
94:20 - will add this code in our GitHub
94:22 - depository you can access from there and
94:24 - provide the link in the description so
94:26 - thank you guys for watching this video
94:27 - and I'll meet you in the next video
94:28 - thank you
94:31 - hello guys now in this particular video
94:32 - I'll be talking about the while loop
94:34 - okay so basically uh I've covered
94:36 - already the for Loop and in which we
94:38 - have discussed about the basics of
94:40 - looping and how loops work okay so now
94:42 - let's start with the while ago let me
94:44 - create this file first
94:49 - you can say here okay
94:51 - so
94:54 - here we go so now our file Loop is also
94:57 - uh just like the follow but it is uh it
95:01 - works
95:03 - it works until the condition is true
95:08 - okay if condition gets full we can come
95:11 - out from the loop and if condition is
95:13 - true it will execute that particular
95:14 - thing okay so let me just give you the
95:18 - syntax part like what is the sentence of
95:20 - value so while space and this double
95:22 - space and here you have to write the
95:25 - condition
95:26 - okay and then you will write like this
95:30 - uh do and whatever the code you want to
95:33 - perform here and then you have to do
95:36 - like here you have to write here done
95:38 - okay
95:39 - so this is the basic syntax of the while
95:42 - loop okay so now we will see the
95:45 - visualization part so let me uh open up
95:48 - my paint first
95:52 - okay but before that uh let me just copy
95:56 - the
95:58 - this one code where it is here
96:02 - okay
96:03 - now I have copied let me just paste it
96:07 - here
96:08 - okay
96:11 - I will need to just create this one like
96:14 - this
96:15 - to add a text and all those things
96:18 - so here we go and let me just remove
96:20 - this part
96:22 - okay
96:23 - and we also uh we forward about this one
96:27 - like we need to give the
96:31 - um semicolon all those things okay so
96:33 - let's start with the implementation one
96:34 - suppose uh same case if you want to
96:37 - print something like my name if I want
96:39 - to print my name five times so how the
96:41 - thing will work okay
96:42 - so basically so here we will need to
96:45 - give the condition like we can give the
96:47 - I like uh
96:49 - I should be less than equal to 4 or less
96:52 - than 5 you can give the condition and
96:54 - above you can declare the
96:56 - I variable okay and here you will write
96:58 - the code like eco
97:02 - and my name ayush okay so how the thing
97:05 - will let me tell you here we will give
97:07 - the value of I
97:09 - and then we will check the condition and
97:11 - then increment okay so initially the
97:15 - value of I is 0 and condition will be
97:17 - get checked like 0 is less than equal to
97:18 - 4 yes it is less than equal to 4 so now
97:21 - what it will do it will print so here I
97:24 - write the print so here what it will
97:26 - print it will print simple
97:27 - ayush okay
97:29 - and the value we get incremented by one
97:32 - so now value 5 will be 1 and it will
97:35 - again check the condition whether one
97:36 - less than equal to 4 yes it is 2 so
97:39 - again print the name I use and again
97:42 - increase the variable to
97:44 - like 2 it will so now I will be 2 and
97:48 - again I will check the variable name
97:49 - like 2 less than equal to 4 okay
97:52 - and print and again it will increase the
97:55 - uh value Phi by 1 so I will be 3 and
97:58 - again it will check whether 3 less than
97:59 - equal to 4 yes it is true and again it
98:02 - will print and again value 5 we're
98:04 - getting is two by one that is 4 now I
98:06 - will be 4 and it will check yes 4 less
98:08 - than equal to 4 yes it is not decimal
98:10 - but yeah it is equal to 4. so in this
98:13 - case also ice will get maintained and
98:15 - value of I will be 5 now it will check I
98:18 - equal to 5 whether 5 less than equal to
98:19 - 4 no it's not so this is the first
98:22 - condition and we can come out from the
98:24 - loop
98:25 - okay so same thing we have to do in
98:27 - while loop also so how we can do it
98:30 - let's me just go into the terminal and I
98:32 - will just comment out this part okay
98:36 - so here what I will do I will Define the
98:38 - variable I equal to 0 and I will give
98:40 - the condition like while
98:43 - and condition will be I should be less
98:46 - than equal to 4 and do what do nothing
98:51 - just Echo oh sorry Eco my name that is
98:56 - the ayush okay and here you can do done
99:00 - and also to increment you can increment
99:03 - like this let I plus plus okay here we
99:06 - forget forgot to increment uh
99:09 - this one so
99:12 - uh we will increase the value of I okay
99:17 - so the same thing we have to do and now
99:21 - let's check whether this works or not so
99:24 - I will just give the appropriate
99:26 - permission
99:27 - uh sorry it will underscore while loop
99:31 - clear
99:33 - dot slash 12 underscore while loop
99:36 - so here you can see no such file or
99:38 - directory why it's showing like this
99:43 - uh
99:47 - okay
99:49 - let me just copy this code and I will
99:51 - delete this file actually
99:53 - 12 12 is 2 times so I will create like
99:57 - 13 while loop dot sh
100:02 - and paste it Ctrl s
100:06 - give the appropriate permission
100:09 - 13
100:10 - clear dot slash 13 and here we go and
100:14 - again
100:14 - what is showing line number
100:18 - oh sorry here we have to give the uh
100:21 - this one iPhone EQ
100:24 - less than equal to l e okay now it
100:28 - should run okay
100:30 - so here you can see five times I wish
100:32 - has been printed okay so in this in this
100:36 - form you can create the while loop okay
100:39 - so again if you want to use the while
100:41 - with an array we can use it also like uh
100:43 - to print the array so I will just create
100:45 - the array uh
100:48 - array equal to I'll write one two three
100:53 - four five so size of array is 5
100:57 - and less than equal to 5 okay or less
101:01 - than equal to 4 it doesn't matter here
101:03 - and I will just Echo
101:08 - Echo the array
101:11 - array indexes okay
101:15 - and let me just again run the script and
101:18 - here you can see we have successfully
101:20 - accessed all the elements of an array so
101:22 - in this case uh you in this way you can
101:25 - use the while loop so I hope you got it
101:27 - and I will add this particular file in
101:28 - out GitHub repository so that's all for
101:31 - today's guide and I will meet you in the
101:33 - next video thank you thank you for
101:34 - watching
101:36 - now in this video I'll be talking about
101:38 - the anti-looper case so already we have
101:40 - covered the for Loop here you can see
101:43 - and the while loop okay so now let's
101:45 - start with the anti-loop okay so before
101:47 - starting let me first tell you about
101:48 - this what what is this how this Loop
101:51 - actually works so anti-loop is basically
101:55 - it works
101:57 - sorry
101:59 - it works until the
102:04 - condition is false
102:07 - condition is false okay so it's quite
102:11 - interesting like it works when until the
102:13 - conditions fall whenever your condition
102:15 - becomes true it you will come out of the
102:17 - loop just like the reverse of the while
102:19 - loop okay so it's just like you if you
102:22 - will say like 2 is greater than 5 so
102:25 - yeah it then in that condition the loop
102:28 - will run if you will say like 6 is
102:30 - greater than 5 now in that condition
102:32 - this Loop will not work like it will
102:34 - come out of the loop okay so I will uh
102:38 - do a visualization for you and I will
102:41 - open up my pane to
102:43 - so I'll show you but before that let me
102:45 - just write the syntax here uh sorry what
102:48 - happened here
102:51 - uh wait a minute guys
102:53 - I will open the paint in different
102:55 - window yeah
102:57 - and I will open up my terminal okay so
103:00 - now let me just create the Syntax for
103:01 - you so the syntax is very easy just like
103:03 - the while loop so you have to just give
103:05 - the until
103:07 - and whatever the condition you will
103:09 - provide here condition and the do and
103:12 - then here you will write the code
103:15 - and done okay this is the basic syntax
103:18 - and the increment decrement whatever you
103:20 - want to do here you can do like this
103:22 - okay I press Plus or whatever
103:24 - okay so here you can see uh I will just
103:27 - copy of this syntax and I will open up
103:29 - my paint so that will be easy for you to
103:32 - understand so I will take the same
103:34 - example of printing the name and all
103:36 - those things
103:37 - because that will be easy for you to
103:39 - understand okay so here I want to print
103:42 - my the same thing like my name so I will
103:44 - provide the variable I equal to 0 and I
103:46 - should be less than equal to
103:48 - three I will choose right now so it will
103:50 - print I think four times
103:54 - and then I will uh increase the
103:57 - increment let I plus plus
104:00 - and here I will write the code
104:03 - uh the code will be like ayush I will
104:06 - just write like this
104:08 - and here what you have to do you have to
104:10 - keep the wrong information like false
104:12 - con condition you have to provide so
104:15 - here I will do like I greater than equal
104:18 - to 3 so here if condition is false then
104:22 - it will execute the this code okay so
104:25 - value of I so I am I am writing like
104:28 - this V of I
104:30 - and then the condition check
104:34 - okay and then
104:38 - increment
104:40 - okay or you I can write like this print
104:43 - also okay so currently value of I is I
104:46 - equal to 0 so
104:48 - 0 greater than equal to 3
104:51 - yes condition is false okay so if false
104:54 - then it will execute so it is right now
104:57 - zero greater than equal to
105:00 - 3 that is keyword false okay so in this
105:03 - case what it will do it will print I use
105:05 - and the value of I will get increased by
105:07 - one so I will be 1 right now so here
105:12 - again it will check 1 is greater than
105:13 - equal to 3 condition is false so again
105:15 - it will what it will do it will print
105:18 - okay so it will print now condition will
105:20 - increase by one that is now I will
105:22 - become 2 so I equal to 2
105:24 - so here again 2 is greater than equal to
105:26 - 3 so again this condition is false so I
105:29 - usually get printed
105:31 - okay so now I increment by 1 that is I
105:34 - will become 3 so now for I equal to 3 so
105:36 - 3 greater than equal to 3
105:38 - yes condition is uh like uh
105:42 - false it will be false okay and I wish
105:46 - will get printed and increment by what
105:48 - now I equal to 4 so 4 is greater than
105:51 - equal to
105:52 - 3 yeah condition is now true so now you
105:56 - will come out of the Loop okay so in
105:59 - this way until it basically just the
106:01 - opposite of Y Loop like if condition is
106:04 - for the loop will execute otherwise not
106:07 - so let me just uh do with this uh
106:11 - what you can see what you can say like
106:15 - run this loop I will provide the I equal
106:17 - to 0
106:18 - and I will use until Loop until
106:21 - condition will be dollar of I is only
106:26 - greater than if I'll use a greater than
106:28 - equal to
106:29 - 3 so in this case do
106:33 - equal
106:37 - ayush okay and just do it done here
106:42 - and you have to just increment the value
106:46 - of I also okay now we are good to go I
106:49 - will just give the appropriate
106:50 - permission to this file
106:53 - 14 okay dot slash 14 and we got some
106:58 - kind of error here
107:00 - line number 21 Centex error
107:06 - okay
107:08 - okay here I do
107:11 - semicolon let me just check now
107:15 - unexpected End of Line
107:19 - let me just check the syntax like I
107:21 - equal to 0 until dollar of I is greater
107:24 - than equal to 3 do equal I use and then
107:29 - let I plus plus and I have done here
107:35 - I haven't done a right to and done
107:42 - okay uh so
107:44 - here you can see we have not comment out
107:46 - this so let me just comment it and again
107:48 - I will run the script let me just clear
107:51 - the screen and Dot slash 14 yeah so here
107:55 - you can see uh the loop has been
107:57 - executed
107:58 - that is greater than equal to Phi I will
108:01 - do so it will run five times four times
108:03 - I think
108:05 - let me just clear the screen
108:08 - okay the three times I is greater than
108:10 - equal to 3 okay it will run only three
108:12 - times okay I'm sorry for for here like
108:16 - here here like condition will get true
108:19 - yeah condition will get true here
108:20 - because it will be equal to three so in
108:23 - this case it will come out of the loop
108:24 - and there will be no further check okay
108:26 - so it will print only
108:29 - three times okay
108:31 - so uh now what I will do I will let me
108:34 - just try uh what you can say we can
108:36 - print the table okay so you can print
108:40 - the table of any number like if you want
108:43 - to print the table of five okay
108:46 - so you can do like this uh you can write
108:52 - the expression here like whatever the
108:54 - expression you write like dollar
108:57 - let me just write for you
108:59 - I will just uh dollar
109:02 - parenthesis and you have to provide the
109:05 - number that is the any number 5 into and
109:10 - you will do like this dollar I
109:12 - and here just do 0 and here you provide
109:16 - 10 okay
109:19 - and I hope it should run
109:21 - so here you can see uh now we will start
109:24 - with the one okay
109:27 - so let's check so here you can see and
109:30 - here we need to do 11.
109:35 - okay so here in this way you can print
109:37 - the table of any number also you can do
109:40 - your customized changes like you can
109:43 - take input from the user and then
109:44 - passing that value here and then give
109:47 - the result and the terminal okay so I
109:50 - hope you liked it guys and you got to
109:52 - know about the antelope and I will post
109:54 - all the source codes of this particular
109:56 - video in our GitHub repository you can
109:59 - access from there and I will provide the
110:00 - link also in our description
110:02 - okay so that's all for today's and I
110:04 - will meet you in the next video so thank
110:06 - you for watching bye
110:10 - now in this particular video I'll be
110:12 - talking about the break and continue
110:13 - okay so we will learn about these two
110:16 - keywords in our shell scripting so let
110:18 - me first create the file with their name
110:20 - like break
110:22 - and continue
110:24 - dot sh okay we are good to go
110:28 - let me add the c bank because without
110:31 - this we cannot run our script Okay so
110:34 - now let me just tell you the execution
110:36 - like what and what is this so let me
110:39 - first talk about the break okay so break
110:41 - is basically
110:43 - it breaks the
110:47 - sorry it oh what I'm doing here man
110:51 - it breaks it breaks the
110:54 - execution
110:56 - of a loop
110:58 - okay so basically it makes the execution
111:01 - of a loop and the continue is nothing
111:04 - but it skips
111:07 - the execution on some certain condition
111:10 - okay
111:13 - so we will go and do the Practical part
111:16 - of this so so break will basically it
111:19 - will break the execution and it will not
111:21 - to do the further uh operation but in
111:24 - continue it will execute but like it
111:26 - will skip that particular part okay so
111:29 - uh let me just start with the for Loop
111:31 - because we'll be using the follow for
111:33 - the implementation break and continue
111:35 - and also you can use while loop also
111:37 - it's all up on you
111:38 - so I will simply first demonstrate you
111:41 - how the things works okay
111:44 - so for this we will need to create one
111:47 - Loop
111:48 - so I'll be created for so here you I
111:51 - will do I equal to 0 I should be
111:55 - uh what you can say
111:57 - I should be less than equal to uh
112:01 - 10.
112:03 - I plus plus and I will simply right now
112:05 - I will just Echo the value of I
112:08 - equal I okay so now let me just add the
112:13 - certain permission for this
112:16 - 15 okay dot slash 15 oh sorry
112:23 - yeah so one to ten the numbers are
112:25 - getting printed Okay so from 0 to 10
112:27 - sorry so
112:29 - suppose in some condition you want like
112:33 - if uh if I is equal to uh 5 then after
112:38 - that your Loop should not execute okay
112:41 - so at this type of certain conditions uh
112:44 - you will execute from the loop okay so
112:48 - how you can do it you have to just
112:50 - provide the if condition
112:53 - uh like this if
112:57 - sorry
113:00 - if dollar I is equal to some number that
113:05 - is 5.
113:06 - so in this case what you have to do then
113:09 - you have to just break the loop and
113:15 - what you can do else
113:18 - you have to just Echo this value of
113:22 - I
113:24 - okay
113:26 - so you have to just save it okay and I
113:30 - will run the loop here again
113:33 - so uh I think I'm getting some kind of
113:37 - syntax error
113:39 - at line number
113:41 - 13.
113:44 - if then equal to 5 yeah we have not
113:46 - closed the if condition okay
113:53 - clear the screen again
113:57 - okay sorry in else condition we are not
114:00 - writing anything right now so
114:02 - now I will write f i here
114:06 - and now you will get to know about how
114:09 - the things are working so here you can
114:10 - see the loop is getting uh started from
114:13 - zero and it executing till 4 but when if
114:16 - your I value of I is equal to 5 then in
114:19 - this case what is happening your Loop is
114:21 - not executing further okay so similarly
114:25 - uh in case of continue we will see and I
114:29 - hope you got it like how the break
114:31 - condition works okay suppose if you want
114:33 - to give some other number like if you
114:36 - want to give two okay so at at that time
114:38 - your Loop also will get uh
114:42 - break
114:44 - Okay so to save
114:48 - and I will just run the script again so
114:50 - here you can see 0 and 1 is only printed
114:53 - okay so now we will talk about the uh
114:56 - continue so I will just seem simply copy
114:59 - this Loop and I will just here paste it
115:03 - and I'll write like this here
115:06 - comment out for you guys because you
115:09 - will need this code
115:11 - continue and here I will use only the
115:14 - continue
115:15 - okay so here what it will do it will
115:17 - skip that particular part okay if I run
115:20 - this loop again so here you can see it
115:21 - has escaped two okay let me first clear
115:24 - the screen so that uh and I will just
115:27 - comment of this part
115:29 - because you should not get confused okay
115:31 - so here you can see it has printed now
115:35 - you will see two is not getting printed
115:37 - okay why because it is execute continue
115:40 - statement basically skips that
115:42 - particular part okay
115:45 - so that's all about the break and
115:46 - continue uh if you want like more
115:49 - example uh let me just create uh like
115:52 - what we will do we will just take the
115:53 - input for the user from the user in the
115:56 - for Loop and based on the user input we
115:59 - will break the statement
116:02 - okay so I'll just comment of this all
116:04 - also
116:06 - and I will paste it here and here I what
116:09 - I will do I will do read
116:12 - U input okay and I will Echo here
116:19 - enter your age
116:23 - or here I can give the variable name is
116:25 - also it now okay so here I will do if
116:29 - age
116:32 - is equal to or less than we can say if
116:36 - is is less than 18
116:40 - so then what we have to do Echo
116:46 - you are not allowed
116:50 - in party like this okay
116:53 - and else what we can do else eco
116:58 - you are allowed in party
117:02 - okay and here after printing this we can
117:06 - just come out of the loop and you can
117:08 - use a break statement okay
117:11 - so clear and again run the loop and here
117:15 - it is showing interior as my age is
117:17 - suppose 23 so you are allowed in party
117:19 - okay so again it is asking 34 okay so
117:24 - now if I'll enter 12 so here you can see
117:26 - you are not allowed in pattern and you
117:28 - came out of the loop so that is the use
117:30 - case of the break statement to come out
117:32 - of the execution
117:33 - okay
117:34 - so uh that's all for today's guys and I
117:37 - hope you liked it and if you have any
117:38 - queries you can ask us in the comment
117:39 - section and you will get the whole
117:41 - source code in our GitHub repository so
117:44 - that's all for today's and I will meet
117:45 - you in the next video thank you thank
117:46 - you for watching
117:49 - hello guys now in this particular video
117:50 - we'll be automating the creation of
117:53 - files and directory using the for Loop
117:55 - okay so already we have create learned
117:57 - about the fold how the things work okay
118:00 - so let me first create the file using
118:02 - the 16 and automating file or dir
118:06 - creation and Dot sh okay I will add the
118:10 - hashbank or C Bank whatever you want to
118:14 - call okay
118:16 - and let me tell you the use case first
118:18 - so use case will be like this you will
118:21 - be creating the one for Loop okay and
118:23 - using that you have to create files okay
118:29 - or directories
118:31 - okay so this is the use case simple use
118:34 - case if you want to perform on your own
118:36 - then that's a very good thing for you
118:37 - like you will learn to know how the
118:39 - things work and if not I'm with you and
118:41 - I will be writing the code along with
118:43 - you guys okay
118:44 - so what do you have to do you have to
118:46 - first of all take the input from the
118:48 - user okay like directory named or first
118:51 - I will create the uh loop for the
118:54 - directory creation
118:57 - so I'll write the comment as like this
118:59 - and what you have to do you have to take
119:01 - the input from the user okay so we have
119:05 - to do read dir name I will
119:09 - write the directory name the IR name and
119:12 - I will use the loop for
119:15 - I equal to 0 to I less than equal to 5.
119:19 - so suppose I have to create 6 directory
119:22 - so I will use five directory so I will
119:24 - use I less than equal to 4 and I plus
119:25 - plus okay and here what you have to do
119:29 - you have to create the directory so how
119:32 - you can create it using uh mkdr command
119:35 - and you will provide simply the
119:37 - directory name
119:39 - okay and if you want to add some 0 1 2 3
119:43 - after this so you can do like this also
119:45 - like dollar I okay
119:48 - so we will do that thing later but uh um
119:51 - now let's do this one okay so here I'm
119:55 - just eco
119:57 - like enter the directory
120:01 - name which you want
120:05 - okay Ctrl s to save again we will need
120:09 - to give the particular permission to
120:11 - this file that is the 16
120:14 - sorry not 116 clear the screen dot slash
120:18 - 16 enter the directory name I need a
120:22 - uh let's write the Linux
120:25 - underscore dir and here you can see
120:29 - a file like this to why it's showing
120:32 - like this file exist
120:35 - okay Linux TIR okay yeah it already
120:38 - exists so we will need to add this one
120:41 - uh dollar
120:44 - I to create multiple directories okay so
120:47 - I will just uh
120:51 - delete this okay because you cannot have
120:53 - the same name like you cannot have the
120:56 - two directories with same name okay
120:58 - Enter the directory name Linux dir
121:02 - okay Linux TIR and here we go so all the
121:06 - directors has been created zero one two
121:09 - three four
121:10 - okay so in this way you can create
121:13 - multiple directories we you want like
121:15 - suppose in some cases we need some
121:18 - directory like test so you can create
121:21 - this also like you can write like this
121:24 - test and again the direct will get
121:25 - created like test zero one two three
121:28 - four all these things okay
121:31 - so uh that's a very easy uh use case so
121:34 - again now let's create some files but
121:37 - before that I will need to delete all
121:39 - those things because I don't want uh
121:41 - much uh files in my this directory
121:44 - so I will delete this so
121:51 - let me choose all those things and I'll
121:54 - delete at a time
121:55 - okay okay
122:00 - move to trash
122:03 - okay it's yeah it's so this OS is
122:06 - running in virtualbox that's why it's
122:08 - slow little bit slow
122:10 - okay bro so uh what we can do
122:14 - so we will now create the file creation
122:18 - script okay so eco
122:21 - enter your
122:24 - file name
122:26 - okay so here again I will use the same
122:29 - Loop and read the read file name and all
122:34 - those things
122:35 - so here I will read file name or student
122:38 - name suppose uh there is some student
122:41 - list and you want to store the data in
122:43 - that particular list so how you can do
122:45 - it so you will need to use touch and
122:49 - here I will start with the one okay
122:52 - so let's clear the screen and just I
122:56 - will comment out this part because I
122:59 - don't want to create directory right now
123:02 - okay I will simply run this great winter
123:05 - your file name so I will use student
123:07 - like this and all the file we get
123:11 - created like
123:12 - one two three four okay so I have not
123:17 - used here uh
123:20 - student name
123:22 - variable so I will need to delete all
123:25 - these things again sorry for that
123:29 - okay delete it
123:32 - and again I will need to run this script
123:34 - here so let me clear the screen
123:37 - run the script enter the like this
123:40 - student so here you will see like all
123:42 - this right one two three four has been
123:45 - created
123:46 - so in this way you can create hundreds
123:48 - of files using the for Loop and that's a
123:51 - very good use case like suppose in some
123:53 - cases you need multiple directory so you
123:56 - will not do manual tasks okay whatever
123:58 - the amount you need amount number of
124:00 - direct you will just provide it here
124:02 - okay the number of the ACT you need and
124:05 - that's all for today and I hope you
124:07 - liked this use case
124:09 - again in our next video we'll see some
124:11 - use cases or we will move with some
124:13 - different topics so that's all for
124:14 - today's guys and I will meet you in the
124:16 - next video so thank you for watching and
124:19 - I'll meet you next one thank you
124:22 - hello guys now in this particular video
124:24 - we'll be uh automating the user creation
124:26 - okay
124:27 - so how we can do it let's uh start with
124:30 - the video and I will create the file
124:31 - that is 17 user creation dot sh okay
124:37 - just add the hash Bank
124:40 - okay so let me first tell you the use
124:43 - case okay what will the use case so here
124:45 - the use case will be the for Loop first
124:47 - we want multiple users and then username
124:51 - input
124:52 - then password
124:55 - and also choice whether user want to add
124:58 - user or not
125:00 - okay so I will comment out this and I
125:02 - will just create the for Loop first
125:04 - the loop will be I equal to 0 and I will
125:08 - just run this Loop till less than equal
125:10 - to 2. and I plus plus
125:14 - okay so here first I will take the input
125:17 - from the user so I will first use enter
125:21 - your choice okay if choice is one
125:24 - then we will add user otherwise you know
125:27 - create choice
125:30 - okay
125:31 - so we will read choice and we will apply
125:35 - the if condition here if
125:39 - so one space here if dollar choice
125:43 - hyphen eqo it means equal to 1
125:47 - then what we have to do then
125:50 - we have to take the username into read
125:53 - username
125:54 - so here I will do just
125:58 - eco
126:01 - enter the username
126:04 - okay and next I will take the input eco
126:10 - enter the password read
126:15 - password okay
126:17 - so uh now till now we have a uh like we
126:21 - will take the input from the user okay
126:24 - so the command that we use to add the
126:26 - user that is the user that then we will
126:29 - use sudo user add
126:31 - and we will provide hyphen name hyphen s
126:33 - slash bin Bash
126:36 - okay and the username
126:39 - so username is
126:40 - this one and this we have stored a
126:42 - username
126:44 - and then we will pass the password
126:46 - because the password takes the two
126:48 - parameters okay so I will pass like this
126:50 - okay so
126:52 - dollar
126:54 - username
126:57 - dollar password
127:00 - and the pipe is pipeworks because it
127:03 - passes the uh whatever the uh data say
127:08 - it passes this side okay I get it pass
127:10 - the data to this command that is sudo CH
127:13 - and the CH password it is so we will
127:17 - write CH password
127:19 - okay
127:20 - so this command will add the password in
127:23 - the uh
127:24 - system okay or for that user you can say
127:27 - so now the else part will be
127:30 - else just break out of the loop and
127:33 - close the
127:34 - if condition okay I will just
127:39 - clear and I will just
127:42 - add the permission
127:46 - dot slash 17 enter your choice my choice
127:49 - is one enter username I will enter like
127:53 - hello world
127:55 - password Linux machine
127:57 - okay so here you can see uh
128:00 - Authentication
128:02 - we're getting some kind of error like
128:04 - user hello world
128:08 - okay
128:11 - password not change enter your choice
128:13 - let me just enter some other number to
128:15 - break out of the loop okay let me check
128:17 - with the code again
128:23 - so read twice we are getting the choice
128:25 - enter the username that is the read
128:26 - username then read password
128:29 - then sudo user add hyphen M hyphen as
128:32 - pin bash and we have passed the username
128:34 - here okay
128:35 - then Eco username and here you can see
128:39 - the password okay we have
128:42 - okay there was a mini mistake
128:45 - so again let me just run the command uh
128:47 - so
128:49 - but before that let me just delete that
128:50 - user Dell user hello world I think it
128:53 - was
128:55 - okay done
128:57 - so again just run the script and enter
129:00 - your choice my choice is one and uh
129:02 - username Ankit I will write and password
129:05 - I will write
129:08 - um
129:08 - hello world
129:10 - okay so now it is asking me to again
129:14 - enter my choice whether I want to add a
129:15 - user or not so I will know I don't want
129:17 - so I will write 0 so we are out of the
129:20 - loop now I will login into the Ankit
129:24 - and enter the password hello world
129:27 - so here you can see who am I if I will
129:30 - do so it is Ankit okay so in this way uh
129:34 - we can
129:37 - uh like automate the user creation if
129:40 - you want to and multiple users suppose
129:42 - if you want to add only one user at a
129:44 - time then you can use this commands Okay
129:46 - these much of a script and you don't
129:49 - need any if condition and all those
129:51 - things okay
129:52 - so in this way you can automate the user
129:54 - creation I hope you liked it and if you
129:56 - have any queries then please you can ask
129:57 - us in the comment section so that's all
129:59 - for today's video and I will meet you in
130:00 - the next one so thank you thank you for
130:02 - watching
130:04 - hello guys now in this particular video
130:06 - we will be learning about the test
130:07 - command Okay so before starting let me
130:10 - first create the file that is 18.
130:13 - test command you can write dot sh okay
130:17 - so let me just add the
130:24 - so before starting this particular
130:26 - tutorial let me first tell you about the
130:28 - basic like description about the test
130:29 - command so basically test command is
130:31 - basically uh
130:33 - used to test the
130:37 - particular expression press the
130:39 - particular
130:41 - expression or particular condition okay
130:45 - so if condition is true then
130:50 - it will return zero
130:55 - otherwise
130:57 - return one okay so if condition is true
131:01 - it will return 0 or otherwise it will
131:04 - return
131:05 - one okay so it's basically uh like one
131:08 - of the another method of writing this
131:10 - expression like whatever we write in
131:12 - this if condition whatever the
131:15 - expression we write here whether of 5 is
131:18 - equal equal to 5 okay so it just we can
131:23 - just replace these part using the test
131:25 - command okay
131:27 - so but also there are many uh like many
131:31 - functionalities or many options are
131:33 - being used with the test command like if
131:35 - you want to check whether two strings
131:36 - are equal whether there is some file uh
131:40 - it just don't know what whether the file
131:42 - is empty or not whether the file or
131:44 - directory like if we want to check uh
131:47 - whether some particular directory it is
131:49 - directory or not or some mathematical
131:53 - operations are equal to greater greater
131:55 - greater than all those things okay
131:58 - so we can do all those operations so
132:00 - let's start so first we will start with
132:04 - the string comparison like whether two
132:06 - strings are equal or not or not equal to
132:09 - whether a string is empty or not all
132:11 - those things we will do
132:12 - so how we can do it let me just uh
132:14 - create the two variables that is a and b
132:20 - so I'll write my name ayush and be equal
132:22 - to ayush
132:24 - in this
132:27 - okay double quotes and now I will write
132:30 - the if condition and I will use the test
132:32 - command if test so it is basically like
132:36 - uh what we can say advice to use the
132:39 - double quote for the variable while
132:42 - using the test command okay if dollar
132:44 - one equal to
132:46 - dollar B
132:49 - then what we have to do then we will
132:51 - just Echo a is
132:54 - equal to p
132:57 - okay and I will just uh write the else
133:01 - all part also else equal a is
133:05 - not equal to P okay just close the
133:11 - if condition and clear the screen
133:15 - and CH mode plus x 18
133:20 - dot slash 18 okay so here you can see a
133:23 - is equal to B now what I do if I just
133:26 - change the uh
133:27 - B okay
133:30 - so here you can see a is not equal to V
133:34 - equal or not equal it's equal
133:37 - okay
133:39 - let me just clear the screen again and
133:40 - run the script yeah so here you can see
133:42 - a is not equal to B okay also uh test
133:46 - command uh offers many more
133:48 - functionalities like string size if you
133:51 - want to get okay so how we can do it
133:55 - using hyphen and option okay
133:58 - like you
134:00 - not basically strings I just basically
134:02 - checks whether string is uh what we can
134:05 - say
134:06 - empty or not okay so how we will do it
134:09 - using test
134:12 - hyphen n dollar
134:14 - [Music]
134:15 - a we will use so basically if
134:19 - there is some string then it will uh
134:22 - Echo
134:25 - string is
134:31 - not empty
134:33 - okay
134:35 - e m p t y okay
134:39 - so hyphen and option is checks whether
134:41 - there is a string or not if a string is
134:45 - not empty then it will result to true it
134:48 - will return it returned true if it is
134:51 - not empty otherwise it will return
134:54 - for that it means the string is empty
134:57 - simple
134:58 - so how you can do it string is empty
135:03 - so we are checking a for a so for a
135:06 - there is a string so it will it should
135:08 - return string is not empty
135:10 - so string is not emptied is returned if
135:12 - I will just pass hyphen B uh dollar B
135:15 - here so it will it should return a
135:17 - string is empty
135:19 - okay so it is returning my string is not
135:21 - empty what is it running yeah uh let me
135:24 - just again run the script
135:26 - okay it is it is also returning a string
135:28 - is not empty
135:31 - so for this we use hyphen Z option sorry
135:34 - for that we will use iPhone Z option
135:36 - here
135:37 - so clear the screen okay so again it is
135:41 - just showing me same thing okay but uh
135:46 - okay okay sorry I'm sorry here we have
135:49 - to use this
135:51 - double quotes
135:54 - okay but still it is showing string is
135:57 - not empty but why it is empty
136:01 - there is something wrong we have done
136:03 - here
136:04 - [Music]
136:05 - um
136:08 - yeah yeah sorry sorry what we have to do
136:11 - here is string this is empty string so
136:15 - this condition is getting true and it is
136:17 - just displaying me this Eco message so
136:20 - that's a wrong if I do something else
136:23 - here
136:25 - condition will get false and then it
136:28 - will display me this okay so so there is
136:31 - nothing much so we have to just replace
136:34 - this eco
136:36 - with above one
136:40 - string is empty or here we can just do
136:43 - string is not empty okay so now it
136:47 - should return a string is not empty so
136:50 - here you can see string is not empty if
136:52 - I will just remove this part it will
136:54 - display me a string is empty
136:56 - okay so it was just if it is true then
136:59 - it will execute obviously okay
137:02 - so in this way you can do a string
137:04 - comparisons also
137:07 - so now moving forward uh in numerical
137:09 - part what you can do if we want
137:11 - comparison like equal to greater than
137:14 - all those things so how we can do it
137:16 - let's just do it okay so I will just
137:19 - copy this much part
137:22 - and again I will paste it here and I
137:24 - will provide here some numbers like a
137:26 - equal to 10 and be equal to 20. and here
137:30 - if test hyphen will not provide hyphen
137:33 - here we will use uh
137:36 - the same thing which we use for
137:38 - numerical like hyphen EQ so here I will
137:40 - use dollar a
137:44 - okay if dollar a equal to
137:49 - dollar B okay I'll remove this one
137:54 - so here if a equal to B so it may here
137:57 - we will print a is
138:01 - equal to B if it is true otherwise
138:05 - here we will just print not equal
138:07 - okay just again clear the screen and run
138:10 - the command so string is empty and not
138:13 - equal okay so if I will do 10 here also
138:16 - so in this case
138:20 - a is equal to b or you can check other
138:24 - options like less than LT for less than
138:27 - here I will just uh
138:31 - and one more zero that is 100 and clear
138:34 - the screen run the script
138:37 - okay so here we will just change the
138:41 - equal statement like a is greater than b
138:46 - sorry less than
138:49 - less than b
138:51 - okay so clear the screen again on the
138:54 - script
138:55 - so a is less than B that means it means
138:58 - uh
139:02 - it means this statement is true and this
139:06 - one is executing and if I write here so
139:09 - here we will see not less than b
139:13 - so not less than b so in this case you
139:15 - can use multiple things using test
139:19 - command like you can play with the
139:21 - numerical part string also okay so
139:24 - instead of this double bracket whatever
139:26 - we use in this one like double bracket
139:28 - in spaces so we it is easy to use this
139:30 - one okay so now moving forward we will
139:33 - uh use some like file comparisons also
139:37 - so how we can do it okay so I will
139:40 - provide the file name not file name
139:43 - um I will use these much of file or
139:45 - hello.txt to play with it so there are
139:47 - multiple options which we can see like
139:50 - uh hyphen s option which is used for
139:53 - checking the uh like what we can say
139:57 - checking the if file is empty or not
139:59 - okay
140:02 - so let's start with this so
140:06 - here I will just add the command that is
140:09 - the file comparisons okay
140:12 - so here what we can do if
140:16 - test hyphen s and I will provide the
140:19 - file name my file name is hello.txt
140:23 - then if file is empty hyphen is used to
140:26 - check if file is empty or not we will
140:28 - just Eco file is empty
140:33 - foreign
140:35 - else
140:38 - Eco file is not empty it means if
140:42 - condition is true then it will execute
140:44 - line number 32 and if not it will
140:47 - execute line number 34.
140:49 - okay so I will just comment out all
140:53 - other way leave it let's check
140:56 - so let me first check the hello.txt so
140:58 - in hello.txt there is nothing
141:02 - so it should return file is empty so
141:07 - we have got some kind of error so the
141:11 - error is we have not closed the if
141:14 - condition clear the screen
141:17 - so file is not empty it is showing why
141:20 - because uh
141:23 - I don't know
141:25 - file is empty or not so the file is
141:27 - empty it should display let me just
141:29 - create one more file
141:31 - test1.txt so it is absolutely empty file
141:35 - so again here I will provide
141:40 - test1.txt
141:44 - clear the screen
141:46 - so again it displaying me file is not
141:49 - empty why so
141:52 - okay
141:54 - um
141:54 - [Music]
141:58 - okay if file is not empty it will
142:02 - display
142:05 - this line okay if file is empty then it
142:09 - will display this line
142:11 - okay okay okay so we have done some
142:15 - mistakes here like we we have to just
142:17 - replace this line here
142:19 - so I don't know why this thing is
142:21 - happening I'm so sorry for that
142:24 - so just to clear the screen and yeah
142:27 - file is empty now so now what we will do
142:30 - we will just write some text here and
142:32 - now it should display some like file is
142:35 - not empty here
142:37 - so clear the screen and again so here
142:40 - you can see now it's showing file is not
142:42 - empty okay
142:46 - so uh also there are many flags we can
142:49 - use hyphen D and all those things okay
142:51 - so there are many flags which we can use
142:53 - to check if iPhone D is used for check I
142:56 - think whether the uh whatever you are
142:59 - passing that is it is directory or not
143:02 - okay
143:04 - so I will create one directory that is
143:07 - uh uh let's create one directory that is
143:10 - the ir1 okay so here I will just pass
143:13 - dr1
143:17 - if it is directory it is I will display
143:20 - if condition is get true
143:24 - it's a directory or
143:28 - it is not a direct variable display here
143:32 - it is not our directory
143:36 - just run the script
143:40 - okay so it is a directory and I will
143:42 - provide some different name here like
143:43 - suppose I provide hello
143:45 - uh what was the file name that is
143:48 - test1.txt
143:50 - and now it should display
143:53 - it is not directly so yeah it's correct
143:55 - okay
143:56 - so uh I hope you liked it guys we can
143:59 - use test command while providing the
144:01 - conditions in if with if conditions so
144:04 - okay so that's all for today is I know
144:06 - there were some mistakes today so sorry
144:09 - for that and I will meet you in the next
144:10 - video okay so thank you for watching
144:15 - hello guys now in this particular video
144:17 - we will talk about functions okay so
144:19 - what is function and how everything
144:21 - works we will discuss all the things in
144:23 - this particular video okay
144:24 - so actually already I have created this
144:27 - function.ss file for you if you're not
144:29 - then you can also create this one okay
144:32 - so let me first discuss about the
144:34 - function what is function the basic idea
144:35 - about it like if you are aware of any
144:37 - other programming languages like ccpp
144:39 - Java or pythons and then you might be
144:41 - aware of the function but if not then
144:43 - let me tell you about this okay how
144:45 - everything works okay
144:47 - so what is a function so the basic
144:49 - definition which everyone says is like
144:51 - function is a block of code
144:55 - which can be used again and again okay
145:00 - so as the name suggests as the
145:02 - definition so this is the same thing as
145:04 - like it okay
145:06 - so
145:07 - whatever the code if you write some kind
145:09 - of code and you want to use it again and
145:11 - again and again then you can write that
145:12 - particular code inside a function okay
145:14 - suppose you don't want to do some
145:15 - particular task
145:17 - repetitively okay then you can use a
145:19 - function okay suppose you have to uh
145:22 - like uh
145:24 - what you can say you have to sum two
145:26 - numbers okay then you can create a
145:29 - function and then you will just call
145:31 - that function to add those numbers okay
145:33 - so basically the whatever the main
145:35 - benefit we get from the function is the
145:36 - code reusability okay it means we can
145:39 - reuse that particular code again and
145:41 - again this is the basic idea about the
145:43 - functions okay so now let me tell you
145:46 - about the basic uh
145:48 - syntax what is the basic syntax of the
145:50 - function in the cell scripting so how we
145:53 - can do it so basically the basic syntax
145:55 - is the function name whatever the
145:56 - function name you want to provide
145:58 - okay the double parenthesis and the
146:00 - simply this curly braces and inside the
146:03 - curly basis you have to just write the
146:04 - code okay whatever the code or whatever
146:06 - the operation we want to perform
146:09 - okay
146:11 - so this is the basic syntax which will
146:13 - be uh using inside this whole tutorial
146:16 - so now let me just create one function
146:18 - with the name greetings okay and I will
146:22 - just Echo something like
146:24 - good morning
146:28 - uh good morning
146:30 - ayush like this okay and to call the
146:33 - function you have to nothing uh you have
146:35 - to just uh write a name of the function
146:38 - greetings okay and now let me just uh
146:42 - move into the
146:44 - this particular directory
146:47 - okay
146:49 - and now what I will do I will just
146:50 - provide a certain permission to the
146:52 - files CH mode plus x 19 function dot sh
146:57 - okay clear the screen
146:59 - dot slash 19 okay so here you can see
147:03 - good morning is has been
147:05 - printed okay so here what happens uh
147:08 - suppose we want to again again call that
147:12 - function so we can just call it again
147:14 - here what happened let me just copy it
147:17 - again
147:19 - greetings paste it here okay
147:24 - so again it will print good morning as
147:26 - two times okay why it happens because
147:28 - here you can see the name of the
147:29 - function and we are just to Echo this
147:32 - thing good morning ayush and then we are
147:34 - calling the function
147:35 - okay so with function calling whenever
147:39 - you call any function then it calls this
147:41 - function and whatever the code inside it
147:43 - it gets
147:45 - executed okay so this is the basic
147:48 - functionality of the functions okay
147:51 - sorry
147:52 - no moving forward uh
147:55 - we need to talk about like a
147:57 - parameterize function and the returning
147:59 - value okay so what is the parameterized
148:02 - functionality for discuss about you so
148:04 - basically in function what happens you
148:05 - pass some parameters okay and uh with on
148:10 - that parameters we do some kind of
148:12 - computation and all those things so I
148:13 - will just create the sum function okay
148:16 - I will just remove this thing and I will
148:19 - create Now parameterize function
148:23 - okay
148:27 - so
148:30 - so the name of the function will be some
148:33 - ayush okay and I will just Echo
148:37 - the sum of
148:40 - dollar one and dollar two is
148:45 - not like this uh before the parameterize
148:48 - function let me just discuss with the
148:49 - simple function how we will do it like
148:51 - suppose if a equal to
148:53 - 12 and b equal to 13
148:57 - then c equal to Dollar A Plus dollar B
149:03 - and you have to just Echo the value of c
149:06 - equal
149:09 - the sum of dollar a and dollar B is
149:15 - you have to just equal dollar C here
149:17 - okay just save the code and we will just
149:20 - call this some function and then we will
149:22 - get the result as 25.
149:26 - okay so we have got some kind of error
149:29 - in line number
149:31 - sorry we don't have to provide this
149:33 - parenthesis here
149:37 - okay so okay we are getting uh
149:42 - error not error
149:44 - the same string because uh
149:50 - we have
149:52 - not uh
149:54 - added the expression in a right way okay
149:57 - so here you can see for computation like
150:00 - we know like we need to do like this
150:03 - okay then and only we can compute
150:04 - anything okay so here you can see the
150:06 - sum of 12 and 13 is 25 so suppose if you
150:10 - want to uh change number okay so 13 and
150:14 - 14 so we can get now result as 27 I
150:18 - think yes 27. so here the thing is we
150:21 - need to change that thing in our this
150:24 - inside one chain but what do we want to
150:27 - pass the pass the value while calling
150:29 - the function and in that case we need
150:30 - the parameters okay so how we can do it
150:33 - so in cell scripting we basically pass
150:35 - the parameters as this one like from
150:37 - here we will pass suppose 12 and 13 and
150:40 - then it will act as the dollar one and
150:42 - dollar two okay
150:44 - so in this way we can get
150:46 - so now for this I will just uh like uh
150:51 - provide a equal to dollar one and b
150:53 - equal to Dollar two
150:55 - okay
150:56 - and all things will remain same and I
150:59 - will just pass the parameter here 12 and
151:01 - 13 or 12 and 13 let me provide this okay
151:03 - 12 12.
151:05 - and let me clear the screen and again
151:07 - this so here you can see the sum of 12
151:09 - and 12 is 24. now we don't need to
151:12 - change anything in our function we can
151:14 - do changes here okay
151:16 - so now the core now the answer will be
151:19 - different like 167 okay so this is
151:22 - basically the parameterized function
151:24 - okay so we can pass parameters inside
151:27 - the function and then with those para
151:30 - and and the computation will happen on
151:31 - those particular parameters okay
151:34 - so this is the basic functionality of
151:36 - the parameterize function let me just
151:37 - create some another function like
151:39 - suppose uh
151:40 - you want to get get name of a student
151:44 - get a student and I will create a
151:46 - function get student name
151:49 - okay
151:51 - and uh I will just Echo
151:55 - like this name of a student is and here
151:59 - I will just decode all or one okay so
152:02 - here whenever you will call that by a
152:05 - particular function and provide the name
152:07 - so let me provide the name as I use and
152:10 - clear the screen so
152:13 - here you can see name of student is
152:15 - ayush okay so in this way you can pass
152:17 - the parameters okay
152:19 - so now uh let me discuss about you the
152:22 - return type of the function of in cell
152:24 - scripting how this works so basically in
152:27 - uh
152:28 - what we can say in cell scripting the
152:31 - return the like method of returning any
152:34 - value some little bit of difference so
152:36 - let me discuss it with you how it
152:37 - basically happens okay
152:40 - so basically what happens whenever you
152:42 - call the function and if you return
152:44 - something then you need to store that
152:47 - return value in a special uh like with a
152:51 - special uh symbol we can say like that
152:53 - okay so here if we want to Echo uh and
152:58 - not equal if you don't want to Eco you
152:59 - want to just return the value so you
153:01 - have to just write
153:04 - return dollar C
153:06 - okay
153:08 - and after calling the function you have
153:11 - to store the value return equal to
153:14 - you have to write uh
153:17 - I think dollar question mark So it
153:19 - basically stores the value whatever The
153:22 - Returned okay so if here the return
153:25 - value is there like water basically
153:27 - happens it will store the value uh
153:30 - before
153:31 - like here this sum function okay
153:34 - so if there is uh if it is returning
153:36 - some value then it will stored inside
153:38 - this variable return okay rdt but if
153:41 - there is again some kind of any function
153:43 - and and here it is returning something
153:45 - like suppose uh here I create some
153:48 - function
153:52 - okay
153:54 - and here I write the
153:57 - function image sub okay and here uh the
154:02 - return type will be all the same thing
154:04 - but here in this case now what will
154:06 - happen it will store the value of this
154:09 - return value
154:10 - okay so this happens so let me first
154:13 - report uh going into complex thing let
154:16 - me first discuss with the basic part how
154:18 - how we can get the return value
154:21 - so now you have to just Echo uh
154:25 - the return
154:26 - eco
154:28 - return value is
154:32 - dollar rdt okay
154:36 - so let me just clear the screen and I
154:39 - will just comment out this part
154:44 - okay
154:47 - and let me run the script so here you
154:49 - can see the return value is 67 okay so
154:52 - in this way you can store the return
154:54 - value but now what happens if you if we
154:56 - just uh
154:58 - like uh we do sub
155:02 - here sub we do
155:06 - okay so in this case let me uh check
155:09 - what happens
155:13 - okay so in this case also we are getting
155:15 - the return value is 67 okay but we have
155:19 - not called the stop function so let me
155:21 - first call this sub function
155:23 - so sub I will provide 13 and 14.
155:29 - okay not 13 14 13 and 12 and here I will
155:33 - write dollar a minus B so value should
155:36 - be 1.
155:37 - okay
155:40 - so here you can see return value is 1.
155:42 - so and now what I will do I will just
155:44 - call this sum function here
155:47 - before return
155:49 - so now let me check what will be the
155:51 - return value return value will be now
155:53 - 167 okay so now you I hope you got the
155:56 - idea about how the value is stored
155:59 - inside this red variable okay so
156:04 - whatever the function is calling before
156:06 - this so that value is getting stored
156:08 - inside this variable okay
156:11 - and whatever uh like if like some
156:14 - function is calling before this one so
156:16 - that value will not be stored inside
156:18 - this okay
156:19 - so this is the thing about return type
156:21 - of
156:22 - a value in a shell scripting okay
156:25 - so that's all for today guys and I hope
156:27 - you liked it I will update the source
156:29 - code in in our GitHub repository you can
156:30 - access that from uh access this code
156:33 - from there okay
156:34 - and in our next video we'll cover
156:37 - something more important and that is
156:39 - about nested function so we will discuss
156:41 - all those things about in the next video
156:43 - so that's all for today and if you have
156:45 - any query you can ask us in the comment
156:46 - section thank you thank you for watching
156:51 - now in this video we'll be talking about
156:52 - the nested function okay so actually I
156:55 - have already created the file with the
156:56 - name 20 underscore instead function let
156:58 - me just to paste the thing hashed like
157:01 - she Bank okay and now let me discuss
157:04 - about like basic idea what is the nested
157:06 - function so it basically means as the
157:08 - name suggests you can uh guess like we
157:10 - will just calling
157:12 - function inside a function
157:17 - inside a function not calling uh also we
157:19 - can say like we can write also function
157:21 - inside a function okay so let me just
157:24 - discuss about the same thing suppose I
157:27 - create one function demo and here I just
157:30 - Echo something like this is a demo
157:32 - function
157:34 - this is a demo function and again I
157:38 - create one more function that is the
157:39 - demo 2 and here I'm writing Eco this is
157:43 - uh
157:45 - sorry this is a demo2 function okay
157:50 - and now what will happen I will simply
157:52 - call this function demo here okay and
157:55 - demo to below okay
157:58 - so I will just give the permission for
158:01 - this file
158:03 - okay clear the screen dot slash 20 okay
158:06 - now now we are good to go here you can
158:08 - see the both the function has been
158:10 - called okay so it is this is the basic
158:13 - thing okay but now what I will do I will
158:15 - just uh
158:16 - call this function inside inside this
158:19 - function
158:20 - oh sorry
158:21 - demo 2.
158:23 - demo 2 okay so now what will happen it
158:26 - will basically call the function
158:29 - okay so here what happens the demo
158:31 - function has been called so here it saw
158:33 - like we have to Eco so it decode this
158:36 - part and again you check demo two
158:37 - function is also called so it gets the
158:40 - uh print the content of this demo to
158:42 - function so in this way uh our this
158:45 - nested function works but what if you
158:48 - want to call uh
158:51 - but what if you want to call the uh like
158:55 - uh not call
158:57 - if you want to write the function inside
158:59 - a function so now here what I can do I
159:01 - can just call this this function here
159:03 - also demo 2.
159:06 - and clear the screen and again we will
159:07 - get the same result okay this is the
159:09 - demo2 function okay
159:12 - so now what I will do
159:17 - um we will take the one use case of
159:19 - summation and addition sorry summation
159:22 - and subtraction okay and we will work on
159:25 - those things okay so I hope you got the
159:27 - idea about how everything works so let
159:29 - me just comment out these things and I
159:31 - will create the parameterize function
159:33 - that is first I will get the sum
159:35 - and here I will
159:37 - Echo the sum of and I will pass the
159:41 - dollar one and dollar two
159:43 - is
159:45 - and here I will just do the computation
159:48 - part that is the dollar uh dollar one
159:51 - plus dollar two okay
159:54 - and let me first check whether the thing
159:57 - is working or sum two and four and
160:01 - dot slash 20 and okay it is working the
160:04 - summer 246 okay so now I will what I
160:07 - will do I will just create a soft
160:10 - function also here and I will just Echo
160:16 - the sum of not sum the sub the
160:21 - difference of
160:24 - dollar one and dollar two is
160:29 - and here we will do the computation path
160:31 - that is the dollar one minus dollar two
160:35 - okay and then we will just call the
160:39 - function inside the sum function that is
160:41 - sub 4 and 2.
160:43 - okay
160:45 - so let me just clear the screen again
160:48 - and hit enter so here you can see the
160:50 - sum of 4 and 2 is 2 yeah sorry I have
160:55 - done something yeah
160:56 - let me just uh give it proper space
161:00 - I can clear the screen and yeah we are
161:03 - good to go now here you can see the sum
161:04 - of 2 and 46 we have passed 2 and 4 here
161:07 - and we are getting result from a 2046
161:09 - and subtraction of 4 minus 2 that is
161:13 - equal to 2 so we are getting the exact
161:14 - reason let me change the value and I
161:16 - will write 80 here
161:17 - uh
161:19 - 80. and here I will do like 40 okay
161:27 - so here you can see we are getting the
161:29 - same result like expected result we are
161:31 - getting okay
161:33 - so in this way we can do the uh nested
161:35 - function and all those things okay so I
161:38 - hope you liked it and I hope you got the
161:40 - idea about how the nested function works
161:43 - okay so that's all for today's video
161:45 - guys and I hope you liked it and if you
161:47 - have any queries you can ask us in the
161:49 - comment section and you will get the all
161:50 - the source code in our GitHub repository
161:52 - and you will get the link in the
161:53 - description
161:55 - so thank you for watching and I'll meet
161:56 - you in the next video thank you bye
162:00 - now in this video we will be talking
162:02 - about some basic and the important
162:04 - concept that is the local variable and
162:06 - the global variable okay so actually we
162:08 - have already covered the functions so
162:09 - that is very important to know about the
162:11 - concept of local variable and the global
162:13 - variable
162:14 - so let me create the file with the name
162:16 - lvar and the given
162:19 - dot sh okay and I'll just add the
162:22 - shebang here bin bash okay now we are
162:25 - good to go so I will start with the
162:27 - basic definition of the local variables
162:29 - so if you like I will just write local
162:33 - variable so we can Define the local
162:35 - variable as the
162:37 - a variable which is uh which is sorry uh
162:45 - which is declared inside of function is
162:50 - called as local variable okay sorry for
162:54 - mistakes
162:55 - okay my typing is not good so much
162:58 - that's why it is happening so so what is
163:01 - the local variable so local variable we
163:03 - can Define it as like the variable which
163:05 - is declared inside a function that is
163:08 - the local variable Okay so
163:10 - so suppose if I am creating one variable
163:13 - that is the function one okay name of
163:16 - the function is function one and I'm
163:19 - defining a variable that is a equal to
163:21 - 20 sorry 10. so in this case what is
163:25 - this so a is nothing but the local
163:27 - variable okay so if I will do equal a
163:32 - here Eco dollar a and I will just call
163:35 - this function Function One
163:38 - and let me just add certain permission
163:41 - to this file that is the 21
163:45 - clear dot slash 21
163:51 - okay so now I'll just run the script 21
163:54 - underscore
163:55 - okay so it's not uh
164:00 - okay let me just again yeah
164:03 - click the screen dot slash 21 now okay
164:06 - so here you can see we are getting the
164:07 - value as a value of a as a 10. okay so
164:11 - this is the local variable like we have
164:13 - declared this variable inside a function
164:15 - so that we can access this inside this
164:18 - function only not outside of this
164:19 - function so if you want to print like uh
164:25 - without function calling okay I will
164:28 - just print here Eco dollar a
164:31 - so let me let's see what happens so it
164:35 - will I don't think it will print
164:36 - anything
164:37 - till the screen again so here you can
164:39 - see we are not getting any kind of
164:40 - result here okay so this is happening
164:43 - because we can't access the uh local
164:45 - variable outside of the function so that
164:48 - is the thing we can get to know with
164:50 - this thing okay so I will just comment
164:53 - of this and I will just again uh call
164:56 - this function and now I will discuss
164:57 - about with the what is the global
164:59 - variable okay
165:00 - so global
165:03 - let me just write like this Global
165:05 - variable
165:06 - okay so this is the variable which is uh
165:12 - which is declared outside
165:15 - the function okay
165:18 - like whatever the variable which is
165:20 - declared outside the function that is
165:22 - called as the global variable okay I
165:24 - hope you got the idea okay
165:27 - so let me just comment out these things
165:28 - and I will create the variable name as
165:30 - the G where Okay g where equal to 20
165:33 - okay or I can just Define the string
165:37 - like I am uh
165:39 - Global variables okay so this variable
165:43 - can be accessed from anywhere of your
165:45 - program like inside a function or
165:47 - outside the function so if I will just
165:49 - call here eco
165:52 - dollar G bar okay so here we can see the
165:56 - result as the um the global variable
165:58 - okay so here we can we are getting the
166:01 - result I am a global variable but now if
166:03 - you want to uh again Echo the same thing
166:06 - inside the function also so we can also
166:08 - get the result two times like I am a
166:10 - global variable
166:13 - so here you can see 10 and then I'm a
166:15 - global variable so you you should see
166:17 - the uh like how the function is
166:20 - executing like when you when first what
166:22 - is happening we are just printing This
166:24 - Global variable and when we and then we
166:26 - have called the function so after
166:27 - calling the furniture we are getting the
166:29 - first it is calling this local variable
166:31 - and then it is calling this one G where
166:33 - that is the global variable okay so this
166:36 - is the simple concept of the uh local
166:39 - variable and the global variable uh I
166:41 - have discovered y because we have
166:42 - already covered the functions and this
166:44 - thing you should know about it okay so
166:46 - that's all for today guys and I hope you
166:48 - liked it and if you have any queries you
166:50 - can also in the comment section and I
166:52 - will post all these things in our GitHub
166:54 - repository okay so thank you for
166:56 - watching and I'll meet you in the next
166:57 - video thank you
167:00 - hello guys now in this particular video
167:02 - we will be covering uh like one of the
167:04 - script that is the user deletion script
167:06 - okay so basically in this particular
167:08 - video we will use the whatever the thing
167:09 - which you have learned till now in our
167:11 - some previous videos that is the
167:12 - functions and the global variable local
167:14 - variable okay these all things which you
167:16 - will be using inside our this particular
167:18 - video and we will create the one script
167:20 - that is the user deletion script okay so
167:22 - let me create that file that is the uh
167:25 - 22 underscore user deletion dot sh okay
167:31 - and let me just add the
167:35 - what we can say
167:37 - Ash call exclamation bin bash okay we
167:41 - will add this uh c bank and now let me
167:44 - just discuss with the workflow what will
167:45 - be the workflow because if you want to
167:47 - do the same thing uh separately on your
167:50 - own then you can do it simply because it
167:52 - will give you the more confidence about
167:53 - in this real scripting so let me just
167:55 - tell you what will be what will we are
167:57 - going to do in this particular video so
167:58 - we will basically read the username
168:01 - whatever the user which we want to
168:03 - delete and we will we just need to
168:05 - provide our the system password for
168:07 - deleting the user and the Dell user
168:10 - command okay so this is all things which
168:12 - you are going to do inside this
168:14 - particular video so let me just uh
168:16 - comment on this thing
168:19 - and now I will just uh
168:23 - use the local variable and the global
168:26 - variable concept and the function
168:27 - function concept inside this video okay
168:31 - so before deleting the user we'll need
168:33 - to some create uh user okay so how you
168:37 - can create the user we will just use
168:39 - sudo user ad and let me just name it the
168:43 - test okay
168:46 - zero nine eight okay user has been added
168:49 - i o let me just check with the password
168:51 - okay so here you can see test user has
168:55 - been added we have not provided password
168:56 - and all those things because we don't
168:57 - want to create a like a normal user we
169:00 - had result delete this user that's why
169:02 - okay so the name of the user is our test
169:05 - okay so first what I will do I will just
169:08 - Echo enter the username
169:11 - okay and I will just read the username
169:15 - inside the variable read
169:18 - username okay and then what I will do I
169:23 - will just Echo
169:27 - enter your
169:29 - password
169:31 - it means it is asking me for the
169:34 - whenever we use sudo then it asks me for
169:36 - entering my password okay so that's why
169:39 - I have entered enter your password and I
169:42 - will read here read system password I
169:46 - can write okay or current user password
169:48 - you can write the variable in okay or
169:51 - the pseudo or the root user password
169:53 - okay
169:55 - and now I will just uh write the
169:59 - function name as the tell user okay and
170:02 - inside this tell user I will just Echo
170:06 - uh dollar
170:08 - this one system password
170:11 - okay and I'm just passing this password
170:14 - inside the command that is the sudo
170:16 - using a pipe I will use and I will use
170:19 - sudo hyphen as hyphen capital S is used
170:21 - whenever we take the input of the
170:24 - password from from different sources
170:26 - like we are getting we will write the
170:29 - password using this okay and with the
170:32 - help of hyphen capital S we can uh like
170:35 - write the password
170:37 - and then I will just write the command
170:39 - that is the tell user and the username
170:41 - okay dollar username okay and then we
170:45 - will have to just call the script tell
170:47 - user
170:48 - okay
170:49 - so here you can see
170:52 - these are the what Global variables okay
170:54 - these are the
170:56 - Global variables okay
171:00 - like username and the system password
171:02 - and these Global variables are being
171:05 - used inside this function okay so this
171:08 - is the normal function and here we are
171:10 - just what we are doing here we are just
171:12 - calling the
171:15 - calling the Intel user function okay and
171:20 - now what I will do I will just move into
171:22 - this particular
171:25 - clear the screen and I will just need to
171:28 - give some permission to this file
171:31 - create the screen dot slash 22 okay now
171:35 - name of the username is the test and I
171:37 - will need to enter my password
171:40 - okay so removing user test so now done
171:43 - so we have finally removed that
171:45 - particular user if you want to go back
171:47 - and check the status ATC password file
171:51 - so there will be no test user so here
171:54 - you can see there is no test user okay
171:57 - so in this way we can uh delete the user
172:01 - with our script okay so we have just
172:05 - used the global variable concept which
172:07 - we have learned in our previous video
172:08 - and the function concept okay and here
172:12 - we are just passing the name of our uh
172:15 - username which we want to delete and
172:17 - hypheness of hyphen capital S options uh
172:21 - to pass the like um
172:24 - password okay
172:26 - so this is the thing uh I hope you got
172:29 - it how everything is working so that's
172:31 - all for this video and I'll meet you in
172:32 - the next video with some another script
172:34 - okay so thank you guys for watching and
172:36 - I'll meet you in the next video thank
172:37 - you
172:39 - hello guys now in this particular video
172:40 - we'll be creating one of the script that
172:42 - is the file Integrity Checker that is
172:44 - the basically a simple script which you
172:46 - will be using to check the Integrity of
172:48 - the file whether the file has been
172:49 - changed or not okay so basically for
172:52 - this tutorial we'll be using on the tool
172:54 - that is the md5 sum okay so let me just
172:57 - show you the demonstration of this
172:58 - particular tool so basically this tool
173:00 - will generate the hash of the particular
173:02 - file so if you will check the hash of
173:05 - this hello.txt so here you can see there
173:07 - this is the hash okay so but now if
173:10 - we'll change the uh something like uh
173:14 - let me add again 1D here and again let
173:17 - me check the hash so there will be
173:19 - change in both the hashes so here you
173:21 - can see the difference
173:23 - so basically what we will be doing so
173:25 - we'll be using this tool and we'll be
173:27 - creating two functions for generating
173:29 - hash and the checking hash and we will
173:33 - check if both the hashes will match from
173:35 - the previous hash then there will be no
173:37 - uh changes we will display that as
173:40 - output and if there is changes then we
173:42 - will display output as like the rich
173:43 - engine of file okay so let's start with
173:46 - the uh creation of the script so let me
173:48 - just add the one file that is the file
173:50 - Integrity checker file integrity
173:56 - Checker dot sh okay so now what we will
174:01 - do now I will create two function so let
174:04 - me just uh
174:06 - pin Bash
174:09 - shebang has been added and we will give
174:12 - the two options for the user for
174:14 - generating hash and the create checking
174:16 - hash okay so but before this I will just
174:19 - create the function that is the
174:22 - generate hash okay and we'll be covering
174:25 - all the concept which we have covered
174:26 - till now like mostly function will be
174:29 - covered in this particular video okay
174:31 - so now I will just ask the user to enter
174:35 - the file name of which we want to
174:37 - generate hash so here I will ask the
174:39 - user enter the file name please
174:43 - okay
174:45 - and I will just restore the file name in
174:49 - the read file name value file name
174:51 - variable
174:52 - and then now what we will do we will
174:55 - just generate the hash and store that
174:57 - hash into the file that is md5 sum and
175:02 - will provide the file name and we will
175:04 - just
175:05 - [Music]
175:07 - file name dot md5 we will store the
175:11 - output in the md5 this output whatever
175:12 - the output we are getting this one we
175:14 - will stored in this md5 okay
175:18 - and uh then we will just Echo
175:22 - hash value
175:25 - stored
175:26 - in
175:29 - dot dollar file name whatever the file
175:32 - name we have
175:34 - file name dot md5 file okay so uh this
175:41 - is the generate hash let me just call
175:43 - the function and let me check with
175:45 - whether everything is working fine or
175:46 - not
175:48 - clear the screen dot slash but before
175:52 - that I will need to provide a certain
175:53 - permission to this file that is chmode
175:55 - plus X that is 23
175:58 - clear the screen dot slash 23 into the
176:01 - file name I'll just write
176:03 - hello.txt here and here you can see
176:06 - Hello hash value stored in this file
176:09 - so let me check okay so here hash value
176:12 - has been stored we can check here okay
176:15 - now uh coming back
176:18 - to the script so let me just clear here
176:21 - the net hash now what I will do I will
176:24 - just uh what we can say
176:29 - um check hash value will uh check hash
176:34 - check h a s h check hash value
176:39 - okay
176:41 - and Eco enter the file name now we are
176:46 - just checking the hash value and we will
176:48 - match the hash value with our previous
176:49 - value okay
176:51 - so Eco enter the file name again we will
176:54 - enter the file name and we will just
176:56 - read file name
176:58 - we are creating the variable
177:00 - and storing this in the file name and
177:03 - now we will uh generated hash we will
177:06 - create one variable value
177:08 - generated hash okay don't confuse
177:12 - between generate hash and generated hash
177:14 - okay and here we will store the output
177:17 - of the previously uh whatever the
177:20 - previous uh hash which have we generated
177:23 - in the md5 file so we will store the
177:26 - value like this value we will store in
177:29 - this variable generated hash how we can
177:32 - do it we will just read the file name
177:35 - that is dollar
177:37 - file name dot md5 we will add okay
177:41 - and then we will again
177:45 - we will just store the uh
177:49 - like current hash or current output so
177:53 - how we can do it dollar
177:55 - and we will just do md5 sum
177:58 - and then we will just provide the file
178:01 - name
178:02 - okay now we are good to go and then we
178:05 - will use the if conditions here like if
178:09 - we will just do like this F and we'll
178:13 - pass the double quotes and dollar
178:17 - and let me just copy this thing
178:23 - if dollar generated hash will be equal
178:26 - equal to we will use here equal equal to
178:30 - again double quote dollar output
178:34 - then in this case what we have to do
178:36 - then eco
178:39 - there is
178:42 - there is no change in file
178:46 - okay and in the L condition we will
178:49 - surely uh add the equal statement that
178:52 - is there Edge
178:56 - there is something
178:58 - change
179:00 - something change in a
179:03 - fight
179:04 - okay
179:06 - and then we have to just
179:09 - block the uh if condition we have to
179:12 - just close the if condition okay
179:15 - and now what we have to do uh
179:18 - what we can do uh like
179:21 - now we will just Echo the choices Echo
179:27 - one dot what the user want generate hash
179:34 - whether user want to generate hash or
179:36 - whether user want to
179:38 - calculate hash
179:40 - to check
179:44 - file Integrity we can say file in t
179:49 - gritty okay
179:51 - and then what we will do we will use the
179:53 - switch case and whatever the thing which
179:56 - we have already learned so we will use
179:58 - read hyphen p
180:00 - okay and we will like right enter your
180:04 - choice enter your choice
180:09 - okay and we will store it in the choice
180:12 - variable that is the choice okay and
180:16 - then we will use the case dollar Choice
180:18 - okay
180:20 - in and if this is the if this is one
180:24 - then what we have to do Echo
180:29 - then
180:31 - generating hash
180:33 - and then we have to just call that
180:35 - function that is the generate hash
180:41 - okay here we go generate hash okay now
180:44 - we have to just remove this part now if
180:47 - 2 is selected by the user then in this
180:49 - case what you have to do and here you
180:51 - have to just break this one okay two
180:53 - then we have to just Echo
180:56 - uh we can do checking file integrity
181:02 - okay and we have to just call this
181:04 - function that is the check hash value
181:09 - okay and we have just closed this one
181:12 - and the if any other value that is the
181:16 - default if we get the default
181:18 - then in this case we have to just Eco
181:21 - invalid Choice buddy
181:24 - invalid Choice okay and we have to close
181:27 - this case
181:29 - okay now we are good to go I hope
181:32 - everything is ready and we will just run
181:35 - the script again dot clear the screen
181:38 - okay and I will just remove this file
181:40 - here uh because we'll be using this file
181:45 - okay and I will just remove this one
181:49 - also
181:50 - okay now run the script okay what is the
181:54 - choice first enter the file name
181:57 - Hello dot txt okay hash value has been
182:01 - stored inside this file now we will do
182:03 - again run the script and now we want to
182:05 - check file Integrity enter the file name
182:09 - hello.txt okay so there is no change in
182:12 - file okay but now what I will do I will
182:15 - just again uh
182:18 - do hello.txt and I will add this one
182:23 - e okay
182:25 - and again I will uh
182:28 - clear the screen again run the script
182:30 - enter your choice that is the second
182:33 - check file Integrity enter the file name
182:36 - hello.txt and here you can see there is
182:38 - something change in a file okay so in
182:41 - this case you can see uh like we have
182:43 - changed the file here name like we have
182:45 - added e so it is showing me that there
182:47 - is something change in a file so our
182:50 - this script is running actually fine so
182:54 - for your uh like if you want to go on
182:56 - some advanced level you can use try
182:58 - Excel block all those things okay
183:01 - for if file doesn't exist you can just
183:03 - pop up an error or Echo the statement
183:05 - like file doesn't exist all those kind
183:07 - of things okay
183:08 - so that's all for today's guys and I
183:10 - hope you liked it and we have used
183:12 - multiple things inside this so this is
183:15 - basically the long script which you have
183:16 - entered uh till now so that's all for
183:19 - today guys and I will meet you in the
183:20 - next video thank you thank you for
183:21 - watching
183:24 - now in this video we'll be creating one
183:25 - of the script that is the uh cloning
183:28 - repository okay so basically this is
183:30 - crypto Bill what way it will do it will
183:32 - basically clone the whatever the
183:33 - depository if you want to clone from the
183:35 - GitHub so basically we will be doing in
183:37 - this particular script so let me just
183:38 - create the file that is the 24
183:40 - underscore
183:42 - uh clone repo dot sh okay now we are
183:47 - good to go we have to just uh
183:50 - so this is the basically a very simple
183:52 - script which we'll be uh doing right now
183:54 - okay so the way to let me just tell you
183:57 - the use case how the thing will go like
183:59 - uh basically we will read the uh like
184:03 - link from the user okay we will use the
184:05 - git command
184:06 - okay and it will basically uh
184:09 - automatically uh create one of the
184:10 - folder inside our deposit inside our
184:12 - system okay so this is a basically a
184:14 - simple use case which we'll be doing
184:16 - inside this particular video so how we
184:18 - can do it we will use the concept of the
184:19 - local variable or not local uh low
184:22 - globally Global variable and we will use
184:25 - the functions also
184:26 - okay so how we can do it uh if you want
184:29 - to do on your own then that is a very
184:31 - good thing so now let me just Echo
184:36 - enter the repository link
184:39 - depository link okay so we will ask the
184:43 - user to enter the repository link so we
184:45 - will just read this thing inside the
184:47 - repo link variable okay and I will
184:50 - create the function get repo
184:53 - uh not like this get repo okay and to
184:58 - parenthesis Eco and here I'll just eco
185:02 - getting Repository
185:06 - please wait
185:08 - like this
185:09 - and we can use the command get clone
185:14 - okay and get clone and the reporting
185:17 - will provide
185:20 - okay
185:23 - so now what I will do uh
185:26 - we have to just call this script call
185:28 - the function sorry get report
185:30 - and provide a certain permission to the
185:32 - script CH mode Plus x24
185:35 - clear the screen dot slash 24 okay Enter
185:38 - the deposit link so let me tell you we
185:40 - will be like uh
185:43 - what we can see cloning this uh link
185:46 - okay or this repository cell scripting
185:48 - tutorial
185:49 - so let me just go back here and Ctrl
185:53 - shift to B now enter so here you can see
185:56 - cloning depositivity is wait
185:59 - so it is done so now here we can see all
186:03 - those file have been
186:05 - like uh cloned here okay one to ten
186:08 - because we have added only uh till 10.
186:11 - so let me just again uh delete this
186:14 - link okay let's delete this directory
186:17 - clear the screen
186:18 - okay so uh this is the very simple
186:21 - script which we show right now so now
186:24 - what we can do we can check uh
186:27 - whether the user has entered link or not
186:31 - okay
186:32 - so this thing we can do in our next
186:34 - video okay like we will check about the
186:36 - uh like regular expression and all those
186:38 - things okay in our next video so that's
186:40 - all for today's guide and I hope you in
186:42 - the uh in the next video I'll meet you
186:45 - so thank you for watching
186:48 - hello and welcome back to the channel
186:49 - this is ayush and now in this particular
186:50 - video we will learn about uh one more
186:53 - script that we will create another
186:54 - script with the help of the nmap tool
186:57 - which we basically use for the network
186:59 - mapping
187:00 - we will look for the what are the open
187:02 - ports in the particular uh system using
187:05 - the IP address or the domain name okay
187:07 - so but before moving forward in this
187:09 - particular video I will uh
187:12 - talk about first about this clone
187:14 - repository sh file so we can do one more
187:16 - thing in this particular uh script is
187:18 - like that uh
187:20 - wait a minute
187:24 - we can just add one more thing here like
187:27 - we can check for the weather user enters
187:29 - the uh correct URL or not okay so we can
187:33 - use the concept of the like sub-str that
187:36 - is the substring we will match the
187:37 - substring of a string okay I hope you
187:39 - got the uh concept this thing like what
187:43 - we will do we will just to match the
187:45 - substring part of the this repo link
187:48 - okay if you if it matches with the
187:51 - github.com then we can easily clone the
187:53 - Repository
187:55 - so now what we have to do I will create
187:57 - the just another variable with the name
187:59 - domain name okay
188:01 - so let me just create it
188:04 - domain name equal to github.com
188:10 - github.com okay and I will just need to
188:14 - add the semi-fels conditions here to
188:17 - check whether the user enters the
188:19 - correct link or not okay so here I will
188:22 - just do
188:24 - dollar repo link equal equal to and I
188:29 - will need to use asterisk because we use
188:32 - that for the
188:35 - substring comparison okay
188:38 - so I can do asterisk and then
188:42 - inside the double quotes I have to just
188:45 - provide the
188:46 - variable name that is the domain name
188:50 - okay
188:53 - so now what we will do
188:55 - we will basically uh
188:59 - like right for the script like then
189:04 - eco
189:05 - if the link are equal then what we will
189:08 - do
189:09 - what is happening
189:14 - okay let me just copy the same thing
189:17 - again here
189:23 - Eco then we will do this else what we
189:26 - can do else we will just
189:29 - Echo
189:31 - please enter
189:34 - valid link and we will close the
189:36 - condition part here with fee okay so I
189:40 - hope everything is correct so now what
189:42 - we will do I will just run this script
189:43 - again here so
189:47 - okay I will run the script but before
189:50 - that I will just copy this link
189:53 - okay so just paste it here and the
189:58 - terminal
190:03 - so I'll just run the script using 24
190:05 - okay clone.sh Enter the depository link
190:08 - I will enter the link
190:10 - okay so here you can see we got some
190:12 - kind of error uh
190:15 - on which line we have got line number
190:17 - 14.
190:20 - okay if repo link
190:23 - equal equal to asterisk okay we forgot
190:27 - to add space here
190:30 - Ctrl s
190:33 - clear the screen okay now I will just
190:36 - add first google.com so it should Pro in
190:39 - yeah so please enter valid link now I
190:41 - will what I will do I will just
190:44 - paste the
190:45 - depositor link enter so here you can see
190:48 - it is cloning into cell scripting
190:50 - tutorial and here you can see other
190:52 - directory has been created with the name
190:54 - cell equipment tutorial so uh our script
190:57 - is running uh fine because if you are
191:00 - entering some wrong URL then at that
191:02 - time we are getting the uh this
191:03 - statement is running like please enter
191:05 - valid link so it means this thing is
191:08 - getting verified okay so that was the
191:11 - part which were remaining in our
191:12 - previous video so now what I will do I
191:15 - will create one more uh script with the
191:17 - name
191:18 - huh
191:19 - sorry let me just create it
191:22 - 25 underscore on
191:25 - map
191:27 - yeah we can do nmap.sh
191:30 - so now if you don't know about the nmap
191:32 - so let me tell you first about what is
191:34 - this so nyp basically one tool that we
191:36 - use for the network mapping or you can
191:38 - say like for finding the open ports in a
191:41 - particular uh system okay
191:44 - so that is a basically a cyber security
191:46 - tool which we use for for Network
191:48 - scanning and all those things we can
191:49 - also get the information about the osc
191:52 - okay so just like other commands uh like
191:56 - for LS we have L option a option so
191:58 - similarly for nmap also we have
192:00 - different options okay which we will
192:02 - learn in this particular video okay
192:05 - so let's start with the scripting part
192:06 - and let me just give you the use case
192:08 - how the thing will go on so the thing is
192:11 - basically whatever you have to read the
192:13 - host name it basically means whether you
192:16 - want to take the domain name or the iPad
192:17 - does it all depends upon you what you
192:19 - want to take as an input from the user
192:21 - so you have to take the host name
192:24 - and then further what you have to do you
192:26 - have to just use the nmap commands Okay
192:31 - to just uh what we can say
192:34 - um
192:36 - to just scan that particular host name
192:38 - okay so this is the simple use case
192:41 - which we will be going to use in this
192:43 - particular video so for that first I
192:45 - will need to enter the uh take the input
192:47 - from the user that is the host name okay
192:51 - so let me first clear the screen and now
192:54 - I will just
192:56 - Echo okay wait a minute what's what is
193:00 - happening which key is uh
193:03 - I think some keys are
193:05 - okay wait a minute
193:07 - [Music]
193:09 - some keys are pressed automatically
193:14 - wait a minute yeah I think now it's not
193:16 - happened nothing is happening sorry for
193:18 - that so now what I will do eco
193:20 - enter the
193:23 - hostname okay but before that let me
193:26 - show you the how the thing is work okay
193:28 - the actual thing works okay so let me
193:32 - just to search for the nmap
193:34 - okay
193:37 - so you will get the official website of
193:39 - the nmap.org that where it tells like uh
193:43 - it's a free and opposite utility for
193:45 - network discovery and security auditing
193:47 - okay
193:49 - so
193:51 - this is the basically one of the tool
193:53 - and there is also one uh
193:57 - scan me dot nmap.org this is the what we
194:01 - can say testing website through which we
194:04 - can test for any uh for this domain name
194:07 - okay like it's legal to test this domain
194:10 - name because they have already
194:11 - authorized peoples to test this
194:14 - particular domain but you cannot uh test
194:16 - any other domain names without their
194:18 - permission okay so if you do I will not
194:20 - be responsible for that I am clearing
194:22 - this thing in this particular video okay
194:25 - so now let me just
194:28 - okay I think my Internet is slow wait a
194:31 - minute
194:34 - okay so now I've switched with another
194:37 - Network okay
194:39 - so now let's go on this particular
194:41 - website and map.org
194:44 - so here you can see the whole
194:46 - documentation part if you want to read
194:48 - you can read okay
194:51 - so let's go with the reference guide you
194:54 - can go with this or docs also
194:57 - so this is the reference guide
195:01 - in this way we will basically write the
195:03 - command Okay hyphen a option is there
195:05 - okay
195:06 - many options are there there and before
195:09 - that you should know about the TCP Port
195:11 - udb Port okay so basically we have 65
195:15 - 536 ports in our system okay so it
195:19 - basically basically scans which uh
195:24 - which Port are open in your system okay
195:30 - so now let's move with the scanning part
195:32 - okay so let me just check whether this
195:35 - website is accessible or not I think it
195:37 - should be yeah so here you can see go
195:39 - ahead and scan miss the title of this
195:41 - particular website okay so now what we
195:44 - can do uh we will just create this
195:46 - script and we will use this nmap tool
195:48 - and some other options okay
195:50 - to
195:51 - run over script okay so now let's do so
195:55 - Eco enter the hostname read hostname
195:58 - okay
195:59 - we will just read the hostname and now
196:01 - next what we will do we will just take
196:04 - the our password okay the system
196:06 - password because the sum of the options
196:09 - required uh sudo permissions so for that
196:13 - we need this enter system password
196:17 - okay so here you will learn one more
196:20 - thing hypheness or hyphen f s option
196:22 - provides like if you will enter
196:24 - something it will not be visible okay so
196:27 - that is the uh
196:28 - benefit of using this option
196:31 - so here we can store with system
196:34 - password okay
196:37 - and then what I will do I will just
196:39 - create one function okay or not function
196:43 - before that uh yeah I will need to
196:46 - create one function to work with the uh
196:49 - cases okay I will just create different
196:51 - cases for different options okay so how
196:55 - we can do it
196:56 - so we have to just write the function
196:58 - name so I will write the function name
197:00 - as the nmap function okay like that I
197:04 - can write okay
197:06 - and in this I have to just provide this
197:09 - um
197:10 - options okay so how I can provide like I
197:13 - will need to write Eco dollar
197:15 - okay and then I will just need to write
197:18 - like this first option will be or I can
197:21 - rule write like this one dot and normal
197:25 - scan okay
197:27 - and we will use slash n for new line
197:30 - Fair
197:31 - two Dot and then TCP scan we'll be doing
197:35 - three types of scan in this particular
197:37 - video
197:38 - normal scan TCP and the udps scan okay
197:42 - three is
197:44 - UDP scan so these are the three options
197:46 - which will be available to the user and
197:49 - then what I will do we will uh
197:53 - what we can say
197:55 - we will take the input from the user
197:58 - okay choose option
198:01 - choose option which you want to prefer
198:04 - okay
198:08 - so here we will just write the option
198:11 - okay and now what I will need to do I
198:14 - need to prove uh write different cases
198:17 - so if user enter one what should happen
198:19 - if user interest two what should happen
198:21 - all these cases I should write so we
198:22 - have already covered it in our previous
198:24 - videos so how you can deal with the
198:27 - cases okay
198:28 - case option in if one is provided then
198:33 - what you have to do I will just Echo a
198:35 - thing like
198:37 - if one is provided
198:39 - I should write like this eco
198:42 - uh like this
198:45 - normal scan
198:47 - okay like this we are done and then what
198:51 - you will need to do Echo
198:54 - I will just provide the system password
198:56 - to the sudo command Okay so
199:01 - night
199:03 - okay so now what we will do we will just
199:05 - pass the sudo and we will use the
199:07 - capitalist like hyphen f s option
199:09 - because we are getting the password from
199:12 - this particular uh system password okay
199:15 - that's why we are using this option and
199:17 - now we will simply use the nmap and the
199:19 - if you are going with the normal skin so
199:21 - at that time we have to just provide the
199:24 - host name or the domain name okay so we
199:26 - can just do like this hostname okay so
199:28 - this is the first case which we will be
199:29 - dealing with that and secondly what we
199:32 - will need to do uh this is just like
199:34 - break a statement and for the second
199:36 - second case that will be for the TCP
199:39 - scan okay
199:42 - so you can do like this inter like this
199:45 - TCP scan and
199:49 - these much Dash okay
199:52 - and same thing we have to do just we
199:54 - have to change the uh option okay so you
199:57 - can just copy and paste things easily
200:00 - and hyphen as capital T that option will
200:03 - be used for the TCP scan and the third
200:05 - thing is just the udps scan okay
200:08 - so I know yeah you will not be aware of
200:10 - these TCP and udps configure that is the
200:12 - concept of the security part but if you
200:14 - learn you will surely get it
200:18 - UDP scan okay
200:21 - and then again same thing I will just
200:23 - paste the thing here and I will just use
200:25 - the Su that is the one option which we
200:28 - use for the uh
200:30 - what we can say udps scan okay so these
200:34 - are the three options but if you just
200:35 - something else then at that time what we
200:37 - will use we will use the asterisk and
200:39 - then we will provide like
200:41 - please enter the valid option
200:46 - okay
200:48 - so this is the case and we have to just
200:50 - close this thing so how we can do it
200:54 - esac
200:55 - okay and now simply we have to call that
200:57 - that function where it is that nmf
200:59 - function so I will just copy the thing
201:02 - here
201:03 - okay call it here okay now we are good
201:07 - to go first we will need to provide a
201:09 - certain permission to that file okay
201:13 - and now
201:16 - so enter the host name so our host name
201:18 - is
201:21 - this one is can me.nmap.org okay
201:25 - so it's all upon you you can provide the
201:27 - IP address as well as the domain name
201:29 - where we will go with the domain name
201:30 - first and after that we will go with the
201:33 - IP address
201:34 - sorry we will need to provide like this
201:38 - can me Dot and map dot org okay you will
201:42 - need to enter the system password
201:46 - okay so here we are getting some kind of
201:48 - error at line number 42
201:54 - okay wait a minute
201:56 - oh sorry I have done some mistake
202:02 - I have to just
202:04 - enter the name of the function
202:08 - okay again same thing
202:10 - scan me Dot nmap.org
202:16 - okay so whatever scan we I just want the
202:19 - normal scan
202:23 - so let's check
202:25 - it takes some time so you will need to
202:28 - wait
202:31 - and let's again check the IP of that
202:34 - particular domain name
202:37 - scan me Dot nmap.org
202:42 - okay so I think I'm not connected to the
202:45 - internet
202:48 - okay okay sorry for that
202:54 - okay so now I have solved the issue so
202:56 - let's again run the script
203:00 - enter the hostname scan me Dot nmap.org
203:06 - okay system password
203:10 - normal scan I want okay
203:13 - so it's starting okay so here we you can
203:16 - see we have got the different ports like
203:18 - 22 8929 these much ports we have got
203:22 - okay so these are the port which are
203:24 - open on that particular domain name okay
203:25 - so also we can run for the second option
203:28 - so
203:29 - again run the same
203:37 - okay second TCP scan okay
203:41 - let's wait
203:48 - this can stick I think must time
203:53 - we will need to just wait
203:55 - so basically in this script we have used
203:58 - a switch cases and the function concept
204:01 - and the user input all those things we
204:04 - have used here so that was a quiet type
204:06 - of division for you guys okay if you
204:08 - will create these kind of scripts
204:11 - so let's wait for this uh it's taking a
204:15 - little bit more time let's wait
204:21 - okay so we have got the all the TCP
204:24 - ports which are open on that particular
204:26 - domain name so here you can see 2280
204:28 - Triple H so these are the all ports we
204:31 - have got so these are the open port
204:33 - these are some filtered open filtered so
204:36 - you will uh if you will search about on
204:38 - Google like what the difference between
204:39 - open and filter poor you will surely get
204:41 - to know and these are the services which
204:42 - you can see here okay so that was the
204:45 - basically uh thing about the scripting
204:47 - like how we can use the different tools
204:49 - with the with bass script okay so that
204:53 - was the tutorial for this and I hope you
204:55 - liked it if you have any query you can
204:57 - go on uh write down in the comment
204:59 - section and we you will get the source
205:01 - code of this particular video in our
205:02 - GitHub repository
205:04 - so that's all for today's video and I
205:06 - will meet you in the next one thank you
205:07 - thank you so much for watching