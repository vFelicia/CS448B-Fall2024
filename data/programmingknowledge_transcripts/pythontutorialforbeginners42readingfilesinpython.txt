00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in the
00:04 - last video we have seen how to create a
00:06 - file in Python and how to write content
00:09 - in that file in Python now in this video
00:13 - I'm going to show you how you can read
00:15 - the content of a text file using Python
00:19 - now if you remember in the last video I
00:22 - have told you that you can use this open
00:25 - function to open any text file and this
00:29 - open function takes 2 arguments first is
00:32 - the part of the file with the exact name
00:36 - of the file so because this demo dot txt
00:39 - file is in the current folder in which I
00:43 - am working in that's why I haven't
00:45 - provided any exact part I can just give
00:48 - the file name here but if you have the
00:51 - full path then you can provide for
00:53 - example C colon backslash and then
00:56 - whatever is the folder name and then the
00:59 - file name so either you can provide the
01:02 - exact path of this file with the file
01:05 - name or you can provide the file name if
01:09 - this file is present in the same
01:12 - directory in which your Python script is
01:15 - there now the second argument which this
01:17 - open function takes is the mode of
01:20 - opening this file so we have seen in the
01:24 - last video when we write W here or a
01:28 - here
01:29 - that means we want to write or append to
01:32 - the file now in order to read from the
01:35 - file
01:35 - this mode here should be R which is the
01:39 - read mode in the last video we have seen
01:41 - at this table in which we have seen that
01:44 - we can use this R or R + mode in order
01:48 - to read the file or if you want to read
01:51 - and write at the same time you can use
01:53 - this R + mode now if you see here I have
01:56 - also written here that R is the default
02:00 - mode so when I don't give any argument
02:03 - here as the second argument which is for
02:06 - the mode then also the default mode is
02:09 - the read mode so let's see how we can
02:12 - read this
02:13 - file which is demo dot txt file and the
02:16 - content of file is shown here so in
02:19 - order to read the file you'll use the
02:21 - file handler and then use the function
02:23 - for example read which is used to read
02:26 - the whole file now in order to print the
02:30 - content of the file you need to use this
02:33 - print function so this FH dot read will
02:36 - provide the string and then using this
02:40 - print function we can print that string
02:42 - so let's run the code and let's see what
02:45 - happens so you can see it prints the
02:48 - whole content of the file now let me
02:51 - minimize this window once again now
02:54 - let's say if you provide some file path
02:57 - which doesn't exist so this file name
03:00 - doesn't exist
03:02 - in the current folder and when I try to
03:05 - read this file let's see what happens so
03:08 - it's going to throw an error and this
03:11 - error says that no such file or
03:14 - directory so if you try to open a file
03:16 - which doesn't exist it will throw an
03:19 - error so you need to give the exact name
03:23 - of the file in order to read it now here
03:27 - we can also be more specific and we can
03:31 - also say that this is our read mode in
03:34 - which I want to open this file and once
03:37 - again when I run the code it's going to
03:39 - read the content of this file now let's
03:42 - say I just want to read the first word
03:45 - of first line here so let's say I want
03:48 - to just read the first 4 character of
03:50 - this line 1 then I can just write 4 here
03:54 - which will read the first 4 character of
03:57 - the line 1 now if we just want to read
04:01 - the first 2 words of this line 1 then
04:06 - you can see the number of character here
04:08 - 4 for this and then there is a space so
04:11 - 5 character and then I ask is 2
04:15 - character more so 5 + 2 7 so when we
04:18 - write 7 here then it's going to read the
04:22 - first 2 word of this line 1 now let's
04:25 - say I want to read the
04:27 - whole line so instead of some words or
04:30 - some characters I want to read the whole
04:32 - line then I can use a function called
04:36 - read lines and this read line function
04:38 - is going to read the first line of the
04:41 - text which is present in my file so I'm
04:43 - going to just run the code and you can
04:46 - see it reads the first line of my text
04:49 - file now if you want to read the next
04:51 - line then you need to use this read line
04:55 - function once again and when I run the
04:58 - code once again it's going to print the
05:00 - second line and so on so if you want to
05:03 - print the three lines then you use this
05:06 - function three times now let's say you
05:08 - want to read some characters of the line
05:11 - one then you can once again write the
05:14 - number of character which you want to
05:15 - read and then run the code and it will
05:18 - print the first four character of the
05:20 - first line and you will observe that
05:23 - when I use this read line function once
05:26 - again the string starts from the ending
05:29 - of the first line so in the first line
05:32 - we have just used the first four
05:35 - characters of the first line now pointer
05:39 - will be set to the end of this first
05:42 - four characters so when you use the read
05:44 - line function once again it's going to
05:46 - start where the first line has ended so
05:50 - first line has ended at the end of the
05:53 - fourth character and then it's going to
05:55 - read the space and then all the line
05:58 - characters which are there so in the
06:00 - second read line statement it has
06:02 - printed this kind of text which is after
06:05 - the first four characters and in the
06:08 - third read line because we haven't
06:10 - provided any argument here so it has
06:12 - printed the whole line here so let me
06:14 - minimize this now let's say you want to
06:16 - read all the lines of this
06:19 - file in the form of the list so you want
06:23 - to read the ten lines of this file in
06:27 - the form of list you can use a function
06:29 - called dot read lines so here you just
06:34 - need to write dot read lines and this
06:37 - function is going to give you the list
06:40 - of every line in that text so let me run
06:44 - the code first of all and you can see
06:46 - this is the list which starts from a
06:48 - square bracket and the first element of
06:51 - the list is the first line with the
06:54 - backslash n which is the line break
06:57 - comma the second element of the list is
06:59 - the second line of the text which we are
07:03 - reading from here so now we know that
07:05 - this read lines function returns the
07:08 - list so we can also call some index of
07:11 - this list so let's say I just want to
07:14 - read the fifth line of this text then I
07:18 - can just write index four because index
07:21 - starts from zero right so let me run the
07:24 - code once again and it prints this line
07:27 - which is at the line five now let's say
07:30 - I want to read the last line I can just
07:33 - say nine and it's going to print the
07:36 - line number ten of your text file let me
07:40 - minimize this once again now let's say
07:43 - you want to read all the lines of this
07:47 - text one by one and do some operations
07:51 - on each and every line one by one so you
07:55 - can use a for loop for that to iterate
07:58 - over the lines one by one so for let's
08:01 - say line in your FH which is the file
08:05 - handler and then you can print the line
08:09 - one by one so you can call this variable
08:12 - which is line here and now let's run the
08:15 - code it's going to iterate over this
08:18 - text line by line and every line is
08:21 - printed one by one using this print line
08:24 - statement so let's say you want to count
08:26 - the number of characters in every line
08:28 - you can use this function which is le
08:31 - and function which is used to count the
08:33 - length of a string and when I run this
08:36 - code now it's just going to print the
08:39 - number of characters in every line now
08:42 - once again let's say you want to count
08:44 - the number of words in every line so we
08:48 - can use a function on this line variable
08:52 - which is a function called split
08:54 - so line dot split which is going to
08:57 - split your line on the basis of
09:00 - character you provide as an argument
09:02 - here so let's say I want to split the
09:05 - line on the basis of a space so let me
09:08 - run the code once again and now you will
09:11 - see that it's going to give me the list
09:13 - of each and every word of every line so
09:17 - this is the first element of the first
09:20 - list and then the second element third
09:23 - element and fourth element and the fifth
09:25 - element so if you want to count the
09:27 - number of words in every line then once
09:30 - again we can enclose this code in to a
09:34 - function called le n okay so this length
09:38 - is going to give you the length of this
09:40 - list and when I run the code once again
09:43 - it's going to print the number of words
09:45 - in every line of this text file so if
09:50 - you want to count the number of words in
09:52 - every line you can split the words using
09:55 - the space and then using this Eliane
09:58 - function you can just find the length of
10:01 - the list which is returned by this split
10:03 - function or if you want to just see the
10:06 - list of words in every line then you can
10:10 - just use this function without the
10:12 - Eliane function and it's going to give
10:14 - you the list of each and every word of
10:17 - every line of your text file and of
10:20 - course to make things easier you can
10:23 - also use this with notation which I have
10:25 - also told you in the last video so you
10:28 - can write with and then this open
10:30 - function and in the open function you
10:32 - give these two argument which is the
10:34 - name of the file and the mode and then
10:37 - you can use as a fetch for example and
10:40 - then you can execute whatever code you
10:43 - want to execute using this file handler
10:45 - for example once again I want to read
10:48 - the content of the file once again so
10:50 - using this width statement you don't
10:53 - need to use this FS not close function
10:56 - because this width function is going to
10:58 - take care of closing of this handler by
11:02 - itself so this whole code is equivalent
11:05 - to the code which you write
11:08 - whenever you use the try finally block
11:11 - with this code also so this is also
11:14 - possible so let me just remove this code
11:17 - and let's run the code once again it's
11:19 - going to give me the same result as we
11:22 - have seen earlier so in this way you can
11:25 - read the text files in Python I hope you
11:28 - have enjoyed this video and I will see
11:30 - you in the next video
11:40 - you