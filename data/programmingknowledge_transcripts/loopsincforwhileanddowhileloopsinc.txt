00:00 - now in this video I'm going to talk to
00:02 - you about loops that's the most basic
00:05 - type of loop in C++ so let's see how we
00:09 - can declare for loop and how we can use
00:13 - poly so for the declaration of for loop
00:17 - the declaration syntax looks like this
00:21 - so what you do is you'd write for and
00:27 - just give these two parentheses and this
00:31 - for takes three parameter first is the
00:34 - initialization and then it is separated
00:38 - by semicolon second is the condition and
00:41 - third is the increment okay and in this
00:47 - curly braces you provide the code you
00:51 - want to execute according to the
00:53 - condition we just met in the loop so
00:56 - let's take an example I'm going to
00:59 - declare a loop so I will write here for
01:08 - and I will give these two brackets and I
01:12 - when you give these two curly braces
01:14 - which is the basic syntax of POD now I'm
01:19 - going to declare the initialization for
01:21 - so for example I will take integer int I
01:26 - is equal to 1 then I will separate it by
01:33 - semicolon then I will give the condition
01:36 - so for example I want to give the
01:38 - condition loop till my condition reaches
01:43 - 10 for example so I is less than or
01:50 - equal to 10 okay
01:55 - and then the third condition is the
02:00 - increment so I will give semicolon once
02:03 - again and I will you get should say I
02:07 - plus plus so this means that we are
02:12 - increment
02:13 - I buy one this is just like saying that
02:17 - I is equal to I plus one okay so this is
02:26 - this and this is same so it'd be our
02:30 - incrementing I by one every time it sees
02:35 - the condition oh it's less than ten
02:38 - still it increase the I by one now we
02:42 - will output our variable I so I will say
02:48 - C out I and once again en DL okay now I
02:58 - will build the program and let's see
03:00 - what happens I'll run the program and
03:03 - you see what happens here is it's
03:07 - looping so it goes to the for loop and
03:11 - it initializes I is equal to 1 and if it
03:16 - goes into the execution of for loop and
03:18 - in it prints 1 and once again it goes
03:21 - back to for loop and increment it by 1
03:24 - right so what's happening I is equal to
03:28 - 1 it prints it it increments it by one
03:31 - goes to the loop once again now this
03:33 - time I is equal to 2 and it sees
03:35 - condition which is less than 10 2 is
03:38 - less than 10 then it prints 2 once again
03:41 - an increment I by 1 which is I is equal
03:44 - to 3 goes to the conditions condition
03:48 - once again and it sees yes
03:51 - I is equal to 3 is less than 10 so it
03:54 - prints 3 once again and this loop
03:58 - happens until 10 is printed and then it
04:03 - goes to the loop once again and sees ok
04:06 - now I is equal to 11 which is not
04:10 - fulfilling this condition I is less than
04:12 - or equal to 10 so I am NOT going to
04:15 - print this and I am going to break the
04:18 - for loop and I'm going to go out of the
04:20 - loop and return 0 so this is
04:25 - printing this these values of I one by
04:29 - one until this condition is met
04:31 - okay now there is one more thing you can
04:36 - do with the the for loop is to decrement
04:40 - the value it's not necessary that you
04:42 - need to increment the value every time
04:45 - and it's also not necessary to in crete
04:47 - increase the value by one you can
04:52 - increase the value by two or you can
04:54 - initialize the value by something else
04:56 - so let's see let's initialize I by some
05:01 - other value for example six and I will
05:05 - say the condition would be I is less
05:08 - than or equal to 60 for example and I
05:11 - will increase this I by five so I will
05:16 - write I plus equal to 5 that means
05:23 - increment the value of I by 5 and assign
05:28 - it to I okay so once again when I build
05:34 - my program and run it you can see it's
05:39 - showing me 6 for the first time and
05:41 - increase this 6 by 5 so 6 plus 5 is 11
05:47 - and then it sees the condition okay 11
05:52 - is less than 60 so I'm going to increase
05:55 - it 5 once again then 16 is less than 60
06:01 - so I am going to increase it by PI 1
06:04 - again so in this way you can initialize
06:07 - your I by any value and you can
06:10 - increment this I by any value and you
06:13 - can give any condition which can be
06:18 - equal to equal to or which can be less
06:20 - than or greater than or whatever value
06:24 - the second thing is you can decrement
06:27 - the value of I also so let me show you
06:29 - this example also so for example I
06:32 - initialize I is equal to 10 and I want
06:39 - that I should print until I is greater
06:45 - than or equal to 1 equal to 1 okay and I
06:52 - will decree in 2 I by 1 every time so I
06:56 - will say - - and this - is just like I
07:05 - is equal to I minus 1 ok
07:10 - just like I I is it is just like you -
07:14 - the value of I by money right
07:16 - so now what will happen let's see let's
07:21 - build the program and run it and you can
07:24 - see this time I start from 10 because we
07:27 - initialize the value of I as 10 so it
07:30 - prints then and it goes to Lu once again
07:33 - and it sees ok I is equal to 9 this time
07:37 - because we minus 10 by 1 which is 9 so I
07:42 - is equal to 9 which is still greater
07:43 - than or equal to 1 so I will print it
07:46 - once again 9 and once again this loop
07:49 - will happen and happen until one is
07:51 - reached and the condition will be false
07:54 - then right so in this way you can use
07:57 - for loop in 3 plus plus so I am going to
08:01 - explain you something about increment
08:04 - operator and assignment operator so
08:07 - let's get started first of all I will
08:10 - explain you how assignment operation
08:12 - works so let's take an example and I
08:16 - will declare an integer X this is equal
08:20 - to 25 and I'm going to print it very
08:26 - simple stop Thanks okay now for example
08:35 - I want to add to this value at some more
08:40 - value to this value I have shown you
08:44 - that you can do it like this X is equal
08:47 - to X plus 5 for example and what did you
08:53 - do is 3 take the value of x and add 5 to
08:59 - it and place it into X once again right
09:02 - so let's filled it and run it and it
09:05 - will show us 30 but the more efficient
09:09 - way to do this is because you are using
09:13 - X 2 times you can just reduce this by
09:19 - writing it something like this
09:21 - okay so X plus is equal to 5 which will
09:25 - just serve the same purpose as before if
09:28 - you add 5 to our variable which is X and
09:34 - then save it into the same variable once
09:37 - again I will run the program and answer
09:41 - the same and you can do this assignment
09:45 - operation with multiplication
09:47 - subtraction division or you can take a
09:51 - modular so I will show you one by one
09:53 - first of all - so what it will do is
09:57 - he'll take X and subtract 5 from it and
10:01 - we'll show the result we'll save that it
10:03 - will in this X and show the result here
10:05 - right so run the program until it shows
10:10 - 20 same is with Co dot or multiplication
10:15 - you just give f6
10:16 - it will multiply applied 25 by 5 just
10:21 - run the program and you see 125 and you
10:24 - can do it with the division also but
10:27 - remember it doesn't show the remainder
10:31 - only the multiplication value or
10:34 - multiple values right so in this case it
10:37 - will show 5 because we don't have any
10:39 - remainder but if you divide
10:43 - 25.4 still let's see what it gives us
10:48 - six and it doesn't show us the remainder
10:52 - in order to show the remainder you need
10:54 - to give this module sign and then it
10:57 - will just show you the remainder it is
11:00 - one right so it shows the remainder one
11:03 - now this is about assignment operation
11:07 - now I have also told you about increment
11:11 - operation in the for loop tutorial so
11:14 - for example you want to increment
11:18 - one or add one to the variable X then
11:25 - you can do it like this
11:26 - X plus plus and what you'll do it will
11:30 - add one to our variable X and print it
11:34 - here right now let me show you a
11:38 - phenomena of how you can use this in two
11:43 - different ways so what I'm going to do
11:46 - is
11:47 - I'm just going to copy this and paste it
11:50 - here once again and what I'm going to do
11:52 - is I will increment X by o1 here
11:58 - just delete this and then I will show
12:02 - the value of X right and both I'm
12:05 - printing let's see what happens and you
12:10 - see what's happening here is it's even
12:15 - though we are increasing the value of x
12:18 - by one but it's showing 25 first and
12:21 - then 26 so this phenomena is happening
12:28 - because we are adding this plus plus
12:31 - after our X okay so what will happen is
12:35 - it will your C++ code will print the
12:40 - value of X first and then add one to it
12:44 - and then when you print X to the second
12:47 - time that will show the ID addition
12:51 - values of 26 it will show here but for
12:55 - example you want to add 1 or add this
13:00 - one before showing the value what what
13:03 - you need to do is you just need to add
13:06 - this plus plus before this X now it will
13:10 - what it will do is it will add one to X
13:14 - first and then print this value and this
13:18 - will be the same so let's see what
13:20 - happens now just close our program and
13:28 - build it on it and you can see now this
13:32 - is 26 26 so it takes the value of X
13:36 - increment it and then prints it so this
13:39 - is the difference between this prefix of
13:44 - plus plus and trailing plus plus right
13:48 - just remember if you want to intrument
13:51 - the value first add these pluses in the
13:54 - front and if you want to increment the
13:57 - value after showing the value then you
14:01 - just add it after plus plus same rule
14:06 - will be true for - so when you do this X
14:15 - X my X minus - here and when you run the
14:18 - program it will still show you the value
14:21 - 25 because the subtraction is not
14:25 - happened here but it it's happened after
14:28 - the execution of this so in the next
14:32 - line then you can see 24 in the next
14:35 - line and when you add this minus minus
14:38 - in front then your when you is
14:43 - subtracted first so 1 is subtracted from
14:46 - the X and then it prints 24 and then 24
14:51 - so this is all about all the basics
14:55 - about assignment operator and increment
14:57 - operator no I'm going to show you how to
14:59 - use while you in C++ so while loop is
15:06 - other kind of few other than for loop in
15:10 - which I have already shown you in the
15:13 - last videos so let's see how we can use
15:17 - while loop so the syntax of while loop
15:20 - is
15:23 - while and you give this curly or
15:27 - parentheses and then you give these
15:30 - curly braces okay this is the syntax of
15:34 - while loop and what this while loop does
15:38 - is it moves around the condition until
15:44 - and unless the condition is met so let
15:48 - me show you an example I will take
15:52 - integer called X is equal to 1 for
15:59 - example and I will say while X is less
16:09 - than or equal to 5 then print some value
16:18 - so I will stay C out and X and line and
16:29 - now when I run this program and see what
16:32 - happens
16:33 - so when I run this program you can see
16:36 - there are so many values printing one
16:41 - after another so this is because our
16:44 - while loop is executing so because we
16:50 - have given this condition that X should
16:54 - be less than and equal to so while this
16:59 - condition is true X will be printed
17:02 - otherwise X will not be printed so let's
17:06 - give some logical logic to this while
17:09 - loop so I will say thanks' plus plus so
17:17 - that increment the value of x by 1 so
17:21 - once again when you compile and run the
17:24 - program that will print
17:27 - two three four five six right because
17:33 - what it's doing is it's going in because
17:37 - we initialize X by one it will go to the
17:40 - loop and it sees X is less than one and
17:42 - then it increases or increments the
17:46 - value of x by 1 which is 1 plus 1 F 2 so
17:49 - it's it prints 2 here using this
17:52 - statement and once again loops around
17:55 - this loop and C is 2 is still less than
17:58 - or equal to 5 and then it increments the
18:01 - value by 1 and it prints it and once
18:04 - again it loops around and it checks the
18:07 - condition and once and again when it
18:11 - sees that X the value of x at time of 6
18:17 - is less than or equal to this is not
18:20 - this condition is not fulfilled then it
18:23 - goes out of the loop and returns 0 so
18:26 - this is how you can use by loop let me
18:29 - show you a better example than this so
18:36 - let's say you have number some number we
18:44 - declare my number F number is equal to 0
18:54 - because I initialized this number by 0
18:58 - you know the twenty-minute any car
19:01 - values and I will also declare a third
19:06 - variable called sum okay and that also I
19:11 - initialize by 0 now I want to input I
19:17 - want that in user should input the value
19:20 - so I will say C out input any value
19:35 - and I will find this line and then I
19:43 - will say see in so I will wait for the
19:46 - user to enter the value and this scene
19:49 - will be stored in the variable number
19:51 - okay then I want to add all the numbers
19:57 - so I will say sum is equal to sum plus
20:06 - number okay so what it will do is it
20:10 - will give or it will take the value and
20:14 - make the sum of these numbers unless and
20:17 - until I don't
20:21 - I mean this obey this condition which is
20:25 - X is equal to a less than five right so
20:30 - I will say this condition and I will
20:34 - print the sum here I will say the sum
20:37 - the sum is equal to and once again sum
20:46 - which is our variable name okay so this
20:51 - loop will ask five times to enter the
20:56 - values and once this values are entered
21:04 - by the user then it will take the sum of
21:07 - the values and it will print it here or
21:11 - otherwise you can show this sum outside
21:14 - the loop so that you have the sum only
21:17 - once but no not five or six times
21:20 - let's try and run this program once
21:23 - again and it says input any value I will
21:27 - enter ten once again it's asking me
21:31 - input any value
21:32 - twenty once again 30 40 and 50 and press
21:42 - ENTER and it says me the sum is
21:46 - 150 right this should be equal to that's
21:50 - why it's showing us a plus sign here but
21:53 - this should be ideally equal to so in
21:56 - this way you can take the sum of the
22:00 - values using while loop okay or
22:03 - otherwise if you want while you two
22:06 - never end you can give some condition
22:10 - which will never be fulfilled for
22:13 - example you can just write something
22:16 - like this
22:17 - while one so this while one generally
22:21 - programmers use it to make an infinite
22:25 - you just compile the program and run it
22:28 - and it says please enter any values and
22:33 - we keep on entering values and you never
22:36 - end because this one or whine one is
22:41 - never ending you so I will never go out
22:44 - of this loop okay so I will keep on
22:48 - entering the value and it will never end
22:50 - so if you want to make infinite loop
22:52 - just make it like this otherwise just
22:56 - make a loop which helps when some
22:59 - condition and loop can exit when that
23:01 - condition is met okay now in this video
23:05 - I'm going to show you how to use
23:06 - do-while loop in c++ so what is the
23:11 - basic difference between while loop and
23:14 - do-while loop the basic difference
23:16 - between two while loop and while loop is
23:19 - while loop if the condition is false and
23:23 - if the condition is not met it will not
23:26 - execute but the do-while loop it will
23:29 - execute the at least once even if the
23:32 - condition is not true so let me show you
23:35 - the demonstration
23:37 - this is the code I have written in the
23:39 - last video there's a simple code in
23:42 - which I have X is equal to one number
23:45 - equal to zero ends sum is equal to zero
23:49 - I have an inch like three variables and
23:50 - in the while loop I am checking whether
23:53 - the value of x is less than or equal to
23:56 - five and if it's less than or equal to
23:59 - five
24:00 - I ask the user to enter some number and
24:03 - I make the sum of these number and once
24:07 - the condition is fulfilled and user has
24:10 - entered the value 5 times in the wine
24:13 - loop then I print the sum so if you
24:17 - don't remember you see the last video
24:19 - it's very simple so let's say I want to
24:24 - convert this into the do-while loop so
24:28 - for example let's take an example of
24:30 - while loop first so what this is doing
24:34 - is when the condition is true it's
24:37 - printing a message but the if condition
24:41 - is not true for example X is less than 1
24:44 - which is not true X is equal to 1 so
24:47 - which is not less than 1 this will not
24:50 - pray execute the best code will not be
24:54 - executed and the sum will remain 0
24:57 - because we have initialized the sum as 0
24:59 - so let's build it and run the program
25:04 - and you see the sum is 0 and this is
25:07 - never executed right now for example if
25:12 - we write the same code with do-while
25:14 - loop what is the syntax of do-while loop
25:19 - is just cut this while loop from here
25:23 - and paste it after this curly braces and
25:28 - just try to do above this is the syntax
25:32 - of qi loop and do not forget to give
25:35 - this semicolon here so this is the
25:38 - simple syntax of do-while loop okay so
25:42 - now even if the condition is false
25:47 - our program is will be executed once
25:51 - because it says do this while this
25:56 - condition is met so it will be executed
25:58 - once and then the program will check ok
26:01 - this condition will not met so once
26:04 - again it will not be you or it will not
26:07 - execute the same so let's run the
26:10 - program once again or the program once
26:14 - again and run it and you see the program
26:17 - is executed in put any value with your
26:20 - fist so it goes inside the loop and I
26:22 - give any value 56 and press Enter so it
26:26 - gives me the sum 56 right so that means
26:29 - the program is executed at least one
26:33 - even if the condition is not really true
26:36 - so this is the basic difference between
26:39 - do-while loop so I hope you have enjoyed
26:42 - this video please rate comment and
26:43 - subscribe and bye for now