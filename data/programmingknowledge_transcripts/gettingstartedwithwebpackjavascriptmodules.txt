00:01 - [Music]
00:07 - hello guys welcome back to another
00:10 - tutorial hit the bell icon button so
00:12 - that you don't miss out any tutorial I'd
00:16 - like to welcome you all to this course
00:17 - on webpack sponsored by edge Mullenix
00:21 - my name is Mathew rammer and I'm looking
00:23 - forward to guiding you through the
00:25 - virtual jungle which is web pack and
00:27 - JavaScript modules in the first place I
00:32 - will be talking to you about JavaScript
00:35 - modules because knowing something about
00:37 - JavaScript modules provides crucial
00:40 - backgrounding to anyone who is seeking
00:43 - to use webpack with facility there are
00:47 - two more tracks this track - and a
00:50 - following track 3 in this initial set
00:52 - one for webpack course training these
00:58 - two tracks along with the overview at
01:00 - track 1 you've already worked through
01:02 - with me comprised the information I feel
01:05 - supplies to you with the basic
01:08 - prerequisites for you to go on and learn
01:11 - web pack proper and properly JavaScript
01:16 - module systems are intimidating to most
01:18 - developers but understanding it is vital
01:21 - for modern web developers the
01:25 - intimidation is felt by more than just
01:28 - new developers just as good thinkers
01:31 - divide their ideas into categories and
01:34 - subcategories
01:35 - so do good programmers divide their
01:37 - programs into modules and functions
01:40 - modules can be compared to entries in an
01:43 - encyclopedia each entry collects around
01:47 - a particular topic good modules like
01:50 - entries you would expect in an
01:52 - encyclopedia are highly self-contained
01:55 - having distinct topical practical use
01:59 - this allows them to be shuffled removed
02:02 - and added as necessary without
02:04 - disordering the system overall there are
02:09 - lots of benefits using modules in order
02:11 - to avoid a Frankensteinian
02:13 - orifice codebase once referred to as
02:16 - spaghetti code one of the chief of these
02:21 - benefits is maintainability a
02:24 - well-designed module will lessen the
02:26 - complex interdependencies within the
02:28 - parts of the code base as much as
02:30 - possible so that it can grow and improve
02:32 - more or less autonomously maintaining
02:35 - modules is much easier when modules are
02:38 - decoupled from one another's pieces of
02:40 - source code going back to the analogy of
02:44 - an encyclopedia if you wanted to update
02:46 - an entry it would be a nightmare for a
02:49 - small change to one entry to require you
02:51 - to tweak every other entry as well
02:54 - instead you'd want the formatting and
02:57 - layout so arranged as to be able to make
03:00 - improvements under any and each topic
03:02 - without other topic entries another
03:06 - benefit to opting for modular design is
03:08 - the ability to use name spacing no name
03:13 - spacing comprises a set of symbols which
03:16 - are used to organize objects of various
03:18 - kinds so that these objects may be
03:20 - referred to each by name name spacing is
03:24 - beneficial because JavaScript demands
03:26 - that variables outside the scope of a
03:28 - top-level function are global now scoped
03:33 - determines the accessibility visibility
03:35 - of these variables but only within the
03:37 - program variables defined inside a
03:41 - function are not accessible visible from
03:43 - outside the function because of this
03:46 - it's common to suffer namespace
03:48 - pollution we're completely unrelated
03:50 - code are sharing clusters of global
03:53 - variable names sharing global variable
03:56 - names between unrelated clusters of code
03:59 - is bad development practice since doing
04:01 - so allows the situation in which
04:03 - unrelated functions may be depending on
04:05 - the same variable or method name modules
04:08 - allow us to avoid this namespace
04:10 - pollution by creating a private space in
04:13 - which to Park our variables another
04:15 - benefit of modular practice is
04:17 - reusability of code
04:19 - fact
04:20 - developers do reuse their code from old
04:23 - projects recycling it into new projects
04:26 - as they see appropriate for but let's
04:30 - take this example suppose you find
04:32 - copied to your current project some
04:35 - utility methods you wrote from a
04:36 - previous project problem if you find a
04:40 - better way to write some part of that
04:42 - recycle code you'd have to go back and
04:44 - remember to update it everywhere else in
04:47 - the project where you'd recycled it
04:49 - so being modular using modules helps you
04:53 - more easily keep track of the code and
04:55 - thus allows you to recycle the code
04:58 - without anxiety's there are many ways to
05:02 - incorporate modules into your programs
05:04 - let's walk through a few of them note
05:07 - the module development pattern is
05:10 - classified as a JavaScript development
05:12 - pattern JavaScript natively doesn't
05:16 - support the class keyword but the module
05:18 - pattern can be used to mimic in your
05:20 - project the concept of a class note in
05:24 - object-oriented programming a class
05:26 - function is an extensible program code
05:28 - template for creating objects classes
05:31 - provide initial values for state member
05:34 - variables and for implementations of
05:36 - behavior using member methods this
05:40 - mimicry simulates pseudo public and
05:42 - private methods and variables inside a
05:44 - single object in a similar way to how
05:47 - classes are created in other programming
05:49 - languages like C sharp or Python this
05:53 - simulation allows us to create a public
05:54 - facing API an application programming
05:57 - interface so as to be able to expose to
06:00 - the world those methods we choose to at
06:03 - the same time the module pattern allows
06:05 - the encapsulation of private variables
06:08 - and methods within a closure scope this
06:11 - may sound trivial but without some sort
06:13 - of encapsulation it is a matter of time
06:15 - before two modules conflict with each
06:18 - other
06:20 - encapsulation is essential to prevent
06:22 - conflicts and ease development there are
06:26 - several ways we can accomplish the
06:28 - module pattern in this first upcoming
06:30 - example we'll be using an anonymous
06:32 - closure
06:34 - by putting all our code in an anonymous
06:37 - function that will help us accomplish
06:39 - our goal
06:41 - note an anonymous function is a function
06:45 - which has been declared without any
06:47 - named identifier to refer to it as such
06:51 - an anonymous function usually is not
06:54 - accessible to the developer to reference
06:56 - after its initial creation remember in
07:00 - JavaScript functions are the only way to
07:03 - create new scope look at this piece of
07:06 - code this function prints out the string
07:09 - hello world bias having used this
07:13 - construct our anonymous function has its
07:16 - own evaluation environment also known as
07:19 - its closure and upon closure we can
07:22 - immediately evaluate it note a closure
07:27 - comprises a combination of a function
07:29 - bundled together enclosed with
07:32 - references to its lexical environment
07:35 - the surrounding State in other words a
07:39 - closure allows us access from within an
07:42 - inner function to an outer function
07:44 - scope in JavaScript closures are created
07:47 - every time a function is created and
07:49 - always at function creation time to use
07:53 - a closure define a function inside
07:55 - another function and expose it exposing
07:59 - a function is to return it or pass it to
08:01 - another function the inner function
08:04 - having been exposed will have access to
08:07 - the variables in the outer function
08:08 - scope even after the outer function has
08:11 - returned this procedure then lets us
08:16 - hide variables from the parent global
08:19 - namespace and this hiding provides for a
08:23 - distinction between public and private
08:26 - by using this approach you can also use
08:30 - local variables inside this function
08:32 - without risking accidentally overriding
08:34 - existing global variables the first
08:37 - console.log output hello world
08:40 - while the second console.log outputs
08:43 - hello i am a global variable
08:45 - smiley face no the closure nonetheless
08:49 - still has access to the global variables
08:53 - note that the parentheses around the
08:57 - anonymous function are required this is
09:01 - because statements that begin with the
09:03 - keyword function are always considered
09:05 - to be function declarations consequently
09:09 - by us using surrounding parentheses we
09:11 - avoid any declarations and create a
09:13 - function expression instead another
09:16 - approach to modules used by libraries
09:19 - like jQuery is the global import a
09:22 - global import is similar to an anonymous
09:24 - closure except now we pass in Global's
09:28 - as parameters take a look at this code
09:32 - in this example global variable is the
09:36 - only variable that's global the benefit
09:40 - of this Global important on a'mma sin
09:43 - closures is that you declare the global
09:46 - variables upfront thus making variables
09:50 - emphatically visible to developers
09:52 - working with the code
09:54 - another approach used by developers is
09:57 - to create modules by using a
09:59 - self-contained object to interface like
10:02 - so this approach lets us decide what
10:06 - variables or methods we want to keep
10:09 - private for example my hello and what
10:12 - variables and methods we want to expose
10:15 - by putting them in the return statement
10:17 - this approach is very similar to the
10:20 - global imported
10:21 - except that this way you ensure all
10:24 - methods and variables are kept private
10:25 - until you explicitly choose to expose
10:28 - them know the syntax of all these
10:33 - approaches are often described as IIF
10:37 - ease or if ease immediately invoked
10:40 - function expressions the approaches
10:44 - you have looked at all have one thing in
10:45 - common this is a use of a single
10:49 - parameter global variable to wrap the
10:51 - code in a function thereby creating a
10:54 - private namespace for the global
10:56 - variable by having used a closure scope
10:59 - while each approach is effective in its
11:02 - own way each has its own particular
11:04 - downside let's examine the downsides of
11:08 - these approaches one by one let's soon
11:12 - we have two such modules a and B B must
11:16 - have a to operate but a does not depend
11:19 - on B let's also assume that for sake of
11:23 - good practice a and B are in separate
11:25 - files for one as a developer you need to
11:29 - be aware of the right dependency order
11:31 - and to remember load your files strictly
11:35 - in that order as a developer who is
11:39 - managing dependencies getting these
11:41 - vital things right gets harder the
11:43 - larger your software becomes another
11:47 - downside is that any of these modular
11:49 - approaches can still lead to namespace
11:52 - collisions what for instance if two of
11:54 - your modules get named the same name or
11:58 - what if you have two versions of a
12:01 - module and you find you are needing both
12:03 - can we design a way to ask for a modules
12:06 - interface without going through the
12:08 - global scope and that's what we'll be
12:12 - answering in our next lesson other
12:14 - module systems in our next lesson will
12:18 - be introducing and discussing common j/s
12:21 - and asynchronous module definition
12:27 - I'd like to welcome you
12:29 - all to this next lesson set one of the
12:31 - course on webpack sponsored by edge onyx
12:37 - my name is Matthew rammer and I'm
12:40 - looking forward to guiding you through
12:42 - the virtual jungle which is JavaScript
12:45 - modules in our previous lesson we
12:49 - covered a theis immediately invoked
12:52 - function expressions as a way of
12:54 - addressing JavaScript modules in this
12:58 - current lesson we'll be answering the
13:01 - question can we design a way to ask for
13:04 - a modules interface without going
13:06 - through the global scope CJ s common j/s
13:12 - modules are one method to deal with
13:14 - these problems situations a CJ s common
13:18 - Jas module is essentially a reusable
13:21 - piece of JavaScript which exports
13:23 - specific objects making them available
13:25 - for other modules to be able to
13:28 - requisition for in their program now CJ
13:32 - s is a volunteer working group and it
13:34 - designs and implements JavaScript API s
13:36 - in the case of declaring modules nodejs
13:40 - frequently uses this volunteer working
13:43 - group format for modules for CJ s each
13:47 - javascript file stores modules in its
13:50 - own unique module context just as if it
13:54 - were wrapping it in a closure in this
13:57 - scope we use the module exports object
14:00 - to expose modules and we use require to
14:03 - import when you're defining a CTS module
14:07 - it might look to you something like this
14:09 - we use the special object module in
14:13 - place of reference of our function into
14:15 - the property module exports this lets
14:19 - the CGAs module system know what we want
14:21 - to expose so that other files are able
14:24 - to consume it then when a developer
14:28 - wants to use my module she can require
14:31 - it in their file like so there are a few
14:35 - obvious benefits to using CJ s over the
14:39 - module patterns we discussed before
14:41 - these are the benefits that it avoids
14:44 - global namespace pollution by making our
14:47 - dependencies explicit and provides a
14:49 - very compact syntax note
14:53 - CJ s takes a sir / first approach and
14:55 - synchronously loads modules CJ s using
14:59 - synchronous loading matters because if
15:01 - we have three other modules we need to
15:04 - load CJ s we'll load them one by one
15:08 - synchronous loading doesn't damage
15:10 - performance on the server but it does
15:13 - hurt application performance when you're
15:15 - working with JavaScript in a web browser
15:18 - this performance difference arises
15:21 - because reading a module from the web
15:23 - takes considerably longer than reading
15:25 - from a disk remember for all as long as
15:29 - the script that loads a module is
15:31 - running it blocks the browser from
15:33 - running anything else until the script
15:35 - is finished loading this strange
15:38 - behavior arises because the JavaScript
15:40 - thread stops until the code has been
15:42 - loaded so much for CJ s what if you want
15:46 - to load modules asynchronously what we'd
15:49 - need is called a synchronous module
15:52 - definition or AMD for short loading
15:56 - modules asynchronously using AMD looks
15:59 - something like this what's happening
16:02 - here is that the define function is
16:04 - taking as its first argument the
16:06 - complete array of the modules
16:08 - dependencies these dependencies are
16:11 - loaded in the background in a
16:13 - non-blocking manner and once all loaded
16:16 - they define a call to the callback
16:18 - function given now in general a callback
16:21 - is a function that is executed once
16:24 - another function has come back from
16:26 - being called that is has been executed
16:28 - hence the name call back in general
16:34 - callbacks may serve any prescribed
16:36 - purpose but in our case with AMD the
16:38 - callback is serving to dominate the
16:40 - environment in which a module may be
16:42 - used next the callback function takes as
16:46 - arguments the dependencies that were
16:49 - loaded in our case my module and my
16:52 - other module allowing the callback
16:54 - function to use the
16:55 - dependencies finally the dependencies
16:58 - themselves must also be defined using
17:00 - the defined keyword for example my
17:04 - module might look like this so we see
17:10 - that unlike CJ s AMD takes a browser
17:13 - first approach alongside asynchronous
17:16 - behavior to get the job done
17:18 - note there are a lot of people who
17:21 - strongly believe that in a browser
17:23 - it just isn't favorable to go
17:25 - dynamically loading files piecemeal as
17:28 - you start to grunt code I suspect this
17:33 - disfavour is due to the need for orderly
17:36 - loading so as to avoid omissions of
17:38 - definitions occurring I suspected also
17:42 - concerns dependencies having not been
17:44 - loaded so as to properly relate to one
17:47 - another aside from a synchronicity of
17:52 - loading another benefit of AMD is that
17:55 - your modules can be objects functions
17:57 - constructors and strings even JSON as
18:01 - well as many other types of module can
18:04 - load but CJ s supports only objects as
18:07 - modules no AMD isn't compatible with IO
18:12 - file system nor with any other server
18:15 - oriented features available via CJ s
18:19 - also with AMD the function wrapping
18:22 - syntax is a bit more verbose compared to
18:25 - CJ s is simple require statement for
18:29 - projects that require you to support
18:31 - both AMD and CJ s features there's yet
18:34 - another format available universal
18:37 - module definition or UMD UMD essentially
18:42 - creates a way to support either of the
18:44 - two sets of features whilst also
18:47 - supporting the global variable
18:48 - definition as a result UMD modules are
18:53 - capable of working on both client and
18:56 - server here's a quick taste of how UMD
18:59 - goes about its business as you
19:04 - we noticed none of the modules in the
19:06 - example were native to JavaScript I
19:08 - should know clarity here that JavaScript
19:11 - supports only its own native modules
19:13 - which is why we are and why we have to
19:15 - be simulating our modules here and using
19:18 - them with JavaScript instead we've
19:21 - created ways to emulate a module system
19:24 - by using either the module pattern CJ s
19:27 - or AMD tc39 which is the standards body
19:33 - that defines the syntax and semantics of
19:36 - ECMAScript has lately introduced
19:39 - built-in modules with ECMAScript 6 or
19:43 - es6 es6 modules relative to CJ s or AMD
19:49 - managed to offer the best of both worlds
19:52 - compact and declarative syntax and
19:54 - asynchronous loading note declarative
19:57 - programming is when you write your code
19:59 - in such a way that it describes what you
20:01 - want to do and not how you want to do it
20:04 - it is left up to the compiler to figure
20:07 - out the how here's an example in this
20:13 - example two copies of the module are
20:15 - made from the counter original the first
20:17 - when we export it and another when we
20:20 - require it
20:21 - moreover the copy of the module
20:24 - available in the main J's file is not
20:26 - disconnected from the original module
20:28 - that's why even were we to increment a
20:31 - counter it would still return the value
20:34 - of one the counter returns one because
20:37 - the counter variable that we imported is
20:40 - a disconnected copy of the counter
20:42 - variable come from the module so
20:45 - incrementing the counter will increment
20:47 - it in the module but this won't
20:50 - increment your copied version the only
20:54 - way to modify the copy version of the
20:56 - counter variable is to do so at the
20:58 - place where in the copy has been put you
21:01 - cannot modify via the original module
21:04 - object nor where this original is
21:06 - situated es6 creates a live read-only
21:10 - view of the modules we import these live
21:14 - read-only views allow you to split your
21:17 - modules
21:18 - into smaller pieces without losing
21:20 - functionality thank you for watching
21:23 - don't forget to subscribe to channel if
21:25 - you like the video do give us a thumbs
21:26 - up and share it also check out amazing
21:28 - discounts and offers on our premium
21:30 - poses in the description below