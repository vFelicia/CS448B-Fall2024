00:00 - hey guys welcome to this first video on
00:03 - Python unit testing tutorial for
00:05 - beginners using PI tests so first of all
00:10 - what is unit testing so according to
00:13 - Wikipedia unit testing is a software
00:15 - testing method by which individual units
00:19 - of source code are tested to determine
00:22 - whether they are fit to use or not so in
00:26 - unit testing we perform the lowest level
00:29 - of testing that is individual units of
00:33 - software are tested that means units
00:36 - like functions subroutines and classes
00:40 - are tested to verify if they are giving
00:43 - the desired result or not
00:45 - now let's discuss why should be unit
00:48 - tests our code so when you write unit
00:50 - tests they reduces bug in the new
00:53 - features and existing features so let's
00:57 - say if you are writing a new feature in
00:59 - your code unit tests can help you to
01:02 - reduce the bugs which may appear during
01:06 - the execution of your code now if you
01:09 - write good unit tests this serves as a
01:11 - good documentation for the person who is
01:16 - using your code so because in unit test
01:19 - we are actually using the functions or
01:23 - the classes and testing them so if the
01:26 - person who wants to use your code he
01:29 - reads the test he will be able to
01:31 - understand how to use your code also
01:34 - when you write tests for your code it
01:37 - reduces the cost of the change in the
01:40 - production so if some code goes to
01:44 - production without testing and you find
01:48 - the bug in the production stage then
01:51 - it's much costlier than fixing your code
01:55 - when you are developing your code next
01:58 - unit test helps in faster debugging and
02:02 - faster development of your program also
02:06 - because you have the idea of what should
02:09 - be the desired result that means you can
02:12 - develop your code
02:14 - manner which is perfect for your tests
02:17 - and at last but not the least unit test
02:21 - helps us to better design our program
02:24 - now let's talk about the unit testing
02:27 - frameworks which are available in Python
02:29 - so I have listed here three top most
02:32 - unit testing frameworks which we can use
02:35 - to write our unit tests so first module
02:39 - is unit test module and this unit tests
02:42 - module is present in your Python
02:45 - standard library so you don't need to
02:48 - install any extra module in order to use
02:51 - this unit test module the next module is
02:54 - the nose module which is not there in
02:57 - the standard library but it's simpler to
03:01 - use than the unit test framework and at
03:05 - last you can use the PI test framework
03:07 - which is not in the Python standard
03:10 - library but it's one of the most popular
03:13 - unit testing framework for Python so we
03:17 - are going to use PI test for the unit
03:19 - testing of our python code so let's see
03:22 - how we can install PI test package on
03:24 - our operating system on which we are
03:27 - working on so you can install a PI test
03:29 - using pip so we are going to just write
03:32 - pip install PI test and then press Enter
03:37 - which is going to install this PI test
03:39 - package on our operating system so you
03:43 - can see PI test is now installed on my
03:45 - operating system so I'm going to give
03:47 - CLS command to clear a terminal and then
03:50 - first of all I can give this PI test
03:52 - command and then - H in order to get the
03:56 - help about PI test so just press Enter
03:59 - which is going to give you all the flags
04:02 - or the commands which you can use with
04:06 - the PI test so the usage is given here
04:09 - you just need to use the PI test keyword
04:12 - and then you can give the options which
04:14 - are listed below and you can give the
04:16 - file or directory' name or the list of
04:18 - files or directories so for example the
04:21 - general options are given here so when
04:23 - you give this flag - Kay or - Kay
04:27 - it's going to match
04:28 - sub-string or the regular expression
04:30 - which you provide after this flag and
04:34 - when you use - em this means that it's
04:37 - going to test the functions which have
04:39 - the name assigned directly to them that
04:42 - means only run the tests which have a
04:45 - given mark expression so I'm going to
04:48 - try to show you all these options one by
04:51 - one but let's see how we can write the
04:53 - test to use them using PI test so in
04:57 - here I have a Python script called math
05:00 - underscore func dot py file and inside
05:04 - the script I have two functions one is a
05:07 - simple add function which adds two
05:10 - values and other is the product function
05:13 - which returns the value of the
05:15 - multiplication of two values now in
05:17 - order to write the unit test for these
05:19 - functions I can create a new file so let
05:22 - me create a new Python file and I'm
05:25 - going to name it as test underscore math
05:29 - underscore func so I have added this
05:32 - extra prefix here which is test
05:34 - underscore in front of the name of my
05:38 - file which is Matt func so I'm going to
05:41 - just create this file so this test
05:43 - underscore prefix which I have added in
05:45 - front of my Python script name will help
05:48 - PI test to recognize that this is the
05:52 - file in which the unit testing functions
05:54 - are written so it's going to go to that
05:57 - file and here we can first of all import
06:00 - the math func Python script and then we
06:05 - can define the test functions so the
06:08 - test function you can define simply as
06:10 - you define any other function in your
06:13 - Python script so you can write def and
06:15 - then just start the test name with the
06:18 - test prefix so test underscore and then
06:21 - whatever name you want to give to your
06:24 - test so first of all I want to test the
06:26 - add function here so I'm going to just
06:28 - write test underscore add and this
06:31 - function is not going to take any
06:32 - parameter and inside this function I can
06:35 - provide some assertion for my functions
06:38 - so I can use a special keyword which
06:42 - is assert and then you can call your
06:44 - function in your Python script so Matt
06:47 - funk thought add function and here as an
06:50 - argument I'm going to provide two
06:52 - numbers let's say seven and three which
06:55 - is going to give us the result then so
06:57 - we are going to just check whether this
06:59 - function is returning 10 or not and this
07:02 - is called assertion assertion means you
07:05 - want to assert that the function is
07:09 - returning the desired result so we are
07:11 - expecting the result 10 when we provide
07:14 - 7 and 3 as an argument to this add
07:18 - function you can also provide multiple
07:20 - asserts here so let's say I just want to
07:23 - provide for example 7 here you can see
07:27 - that Y is equal to 2 is the default
07:30 - value of y so here in the assert I can
07:34 - only give one argument and the value of
07:36 - second argument which is y will be taken
07:39 - from the default value which is 2 so 7
07:42 - plus 2 is 9 so we can just say whenever
07:45 - you provide 7 here it's going to give us
07:48 - 9 once again whenever you provide 5 here
07:53 - it's going to give us 7 so in this way
07:55 - you can provide multiple asserts inside
07:58 - your function whatever you think will
08:01 - come as an expected result of your
08:05 - function so I'm going to define the
08:08 - second function which is test product
08:10 - and once again I'm going to pass no
08:12 - argument here and once again I can just
08:15 - use this assert keyboard and then the
08:18 - name of my library which is math func
08:21 - dot the function this time we are going
08:24 - to test the product function and let's
08:26 - say we just want to check the product of
08:29 - 5 and 5 and the expected result will be
08:33 - 25 in the same way whenever you provide
08:38 - here for example only one argument the
08:41 - default value of y is 2 right so when we
08:45 - provide only one argument which is 5
08:47 - here we will be expecting 10 here in a
08:51 - similar way when I provide let's say 7
08:53 - here we are expecting the result 14 here
08:56 - once we have written our unit tests
08:58 - let's try to run these tests using PI
09:01 - tests so first of all I need to go to
09:04 - the directory where this test script is
09:07 - there so I'm going to just copy the path
09:10 - and then go to the terminal and I'm
09:12 - going to CD to this path which I have
09:14 - copied and let me just remove the script
09:17 - name from here and then press Enter so
09:19 - now I'm in the folder where my matte
09:21 - funk dot py is there and test underscore
09:25 - math underscore funk dot py file is
09:29 - there so in order to run your unit test
09:31 - file you just need to give this command
09:33 - PI test and the name of your test file
09:37 - which is test underscore matte
09:39 - underscore funk dot py in my case and
09:42 - then I'm going to press ENTER and you
09:46 - can see it's going to give me two passed
09:48 - in whatever time it took to execute
09:51 - these two tests so because we have
09:54 - written two tests here for two functions
09:58 - it's going to show us this result which
10:00 - is two passed let's say we are going to
10:03 - expect some unexpected values so here we
10:06 - have written some wrong value which we
10:09 - are expecting and now when we run our
10:11 - test it's going to fail you can see one
10:15 - passed and one failed and pi test will
10:18 - also give you the information about the
10:20 - assertion failure so the assertion
10:23 - failure is happened at this assertion
10:27 - where you are just testing 10 is equal
10:30 - to 18 which is wrong here so once again
10:34 - we are going to correct this all so
10:36 - let's say some developer has changed the
10:40 - function which you are testing so
10:42 - instead of returning the edition now I'm
10:45 - going to return the subtraction which is
10:47 - going to break that test now so I'm
10:50 - going to run the test once again and
10:52 - once again it's going to give you the
10:54 - error and this time it's going to show
10:56 - us that the result is 4 but we are
10:59 - expecting 10 as the result and that's
11:02 - why it's failing so once again I'm going
11:05 - to just fix my code and then once again
11:08 - I'm going to run
11:08 - my test and once again the test will
11:12 - pass so let me just clear the terminal
11:14 - using CLS command and you can also give
11:18 - a flag called - V which stands for
11:21 - verbose in order to get the more
11:24 - detailed result so I'm going to press
11:27 - ENTER and you can see it's going to give
11:29 - us this flag passed or failed in front
11:33 - of your tests and both tests are right
11:37 - now passing that's why it's written
11:38 - passed in green here let's break the
11:42 - test once again so I'm going to just say
11:44 - - here and once again run the code and
11:47 - now it will say this test is passing but
11:51 - that test ad is failing due to this
11:54 - assertion so I'm going to once again fix
11:57 - the code and come to the terminal once
12:01 - again I'm going to just clear the
12:02 - terminal and you can also run your test
12:05 - using this command so you just need to
12:07 - write PI dot test without giving any
12:11 - name in front of this PI dot test and
12:14 - then + enter which is going to
12:17 - automatically recognize the test file
12:20 - because we have given the special prefix
12:22 - here test underscore this is how your PI
12:26 - test will recognize that this is the
12:29 - testing file so it's going to just run
12:32 - the test inside that file and once again
12:34 - you can see it runs and two tests are
12:38 - passing you can also give the verbose
12:41 - flag here which is going to give you the
12:43 - more information about your tests now
12:46 - let's say we are going to remove this
12:48 - prefix from our test so let's say we
12:51 - just write tes underscore ad so there is
12:55 - no test prefix in front of your function
12:58 - and once again I'm going to give the
13:00 - same command and you will see only one
13:03 - test is recognized which is test
13:05 - underscore product and this is because
13:08 - we haven't provided that test prefix in
13:11 - front of the function so in order to
13:13 - recognize this function as a unit test
13:16 - you need to give the test keyword as the
13:18 - prefix of your unit test function also
13:21 - whenever you
13:22 - change the name of your test file so
13:24 - let's say I'm going to refactor the name
13:27 - and I'm going to just remove the T from
13:31 - test and then once again I'm going to
13:33 - press refactor which is going to change
13:36 - the name of this test file and now this
13:39 - test file name is tes underscore math
13:42 - underscore func
13:43 - and once again I'm going to try to run
13:46 - my test and it's going to say no test
13:50 - run in this much amount of time so again
13:53 - whenever you don't give the test keyword
13:56 - in front of your file name then PI tests
13:59 - will not be able to recognize that this
14:02 - is your unit testing file let's go to
14:05 - the terminal and I'm going to just give
14:07 - the CLS command in order to clear the
14:09 - terminal and let's give the second
14:12 - command now which we have used for
14:15 - running the test which is the PI test
14:18 - command and the name of the file so now
14:20 - my file name is tes underscore or math
14:23 - underscore py and now I'm going to press
14:26 - Enter and you will see now it's going to
14:30 - recognize because we are specifically
14:32 - giving the filename in which our tests
14:36 - are there so if you want to run your
14:39 - test inside some file which doesn't have
14:42 - the test prefix in front of it you can
14:45 - just use PI test command and then give
14:48 - the name of the file and PI test is
14:50 - going to recognize that this is the file
14:52 - in which your unit tests are there and
14:55 - it will run all the unit tests in this
14:58 - file so that's it for this video in the
15:00 - next coming videos we will talk more
15:02 - about PI tests and how to use PI tests
15:05 - so stay tuned and please keep watching
15:07 - these videos I will see you in the next
15:09 - video