00:01 - hi in this video we are gonna learn how
00:03 - to test a node.js application
00:05 - so why do we use uh automatic testing
00:08 - framework because
00:09 - whenever your project becomes scalable
00:12 - in size
00:13 - or whenever like a new developer it
00:15 - comes to your project
00:16 - and if they add some new features and
00:19 - they want to see that the
00:21 - whole project is not break out so they
00:24 - can just
00:25 - simply run their testing suite and they
00:27 - can see that
00:29 - they haven't broke out so that's why we
00:33 - are using
00:33 - testing framework for many purposes like
00:36 - refactoring the code
00:37 - maybe when you had a factor some code in
00:40 - your project and
00:41 - and this and you can see that your
00:45 - features that we have added new feature
00:47 - that is not like
00:49 - brick so we are gonna use
00:52 - in here the gestures dot io i mean
00:55 - just just a framework in here
01:00 - so in here we're just gonna
01:03 - in how to install this gestures
01:06 - so in here just use npm install that's
01:10 - test
01:10 - save test dev just
01:13 - because we are gonna use this
01:16 - uh framework in just our
01:20 - development purpose so we have installed
01:23 - it
01:23 - as their dependency in here and also i
01:27 - have added the test
01:28 - script in here because we're gonna
01:33 - run it as a test suite so
01:37 - we're gonna use npm testing here and
01:39 - let's see what happen
01:41 - so where you will see that
01:44 - they have checked all the files but
01:48 - they can't no test found
01:51 - so yeah we're gonna just create a new
01:54 - test
01:55 - folder i have also created i have
01:57 - created the test folder in here
02:00 - and you're gonna just uh you create a
02:03 - new file and let's
02:04 - give a name math dot test
02:08 - dot js one thing to remember that you
02:11 - have to give the dot test extension
02:13 - here because that's how that just will
02:16 - see
02:17 - that you have added one file one
02:20 - test file and that you under the test
02:23 - will
02:24 - uh run here so globally
02:28 - the the gest framework is
02:32 - not required here to like like we have
02:35 - to use cons
02:36 - just just and require it from
02:40 - the gesture for our library
02:43 - where it's it's globally so in here
02:47 - the just provides one function
02:52 - and the name is test
02:55 - function which is a global
02:58 - so in here it requires two argument
03:01 - first argument is a string a string is
03:04 - the name of the
03:06 - feature that you have added you can give
03:08 - an enemy and second argument is a
03:11 - callback function or just as a function
03:14 - which will run which will check that
03:17 - your
03:18 - test is running or not then here just
03:21 - say for introduction part
03:23 - let's say hello world that's our name of
03:26 - it's just an introduction so in here i'm
03:29 - going to
03:30 - simply run this with a blank in
03:33 - nothing there so if you run this
03:37 - we're gonna see that it passes the test
03:41 - but there's nothing here so it passes
03:44 - anything
03:45 - because it is not throwing any error
03:48 - from here
03:49 - so let's say i'm going to see you how
03:52 - can we try and
03:53 - we know that we can throw an l through
03:55 - throw new error
03:58 - and let's say a failure
04:01 - and if we just run this file
04:05 - we're gonna see that it throws in it
04:08 - that's because it's seeing that it's
04:10 - throwing an error so it will throw in it
04:13 - yeah so now
04:16 - i'm going to just simply create a new
04:18 - file in here
04:20 - and in a file in here
04:23 - and let's say the file name is math
04:26 - dot js because that's how we're gonna
04:31 - uh we're gonna
04:35 - just export the file from here to
04:38 - mat.test.js
04:39 - so that it will run from here and see
04:44 - so in here we are gonna just uh simply
04:46 - create a new
04:47 - uh new function let's say tape total
04:50 - tape
04:51 - total deep we are just calculating a tip
04:55 - only so let's say proper name calc
05:00 - calc total thing so it passes
05:06 - how much argument from here so
05:09 - first argument will be total
05:13 - and second argument will be the percent
05:19 - so the const
05:23 - tip will be what tip will be
05:27 - total
05:32 - multiply with the percent
05:35 - so in here what we are passing t person
05:38 - will be as
05:38 - like if it is a 30 means 0.3
05:42 - that's what i'm passing from here and
05:46 - what
05:46 - it will return it will return a total
05:55 - now we're gonna just export from here so
05:59 - let's say module dot export
06:04 - module dot export calc total tape
06:09 - and in here i'm just going to require it
06:12 - from
06:12 - the
06:16 - my.js and where from
06:19 - i'm going to just say math equal to uh
06:22 - require from
06:25 - require from dot dot slash math
06:29 - yeah so in here
06:34 - i'm going to create a new test file i'm
06:37 - going to remove this one
06:38 - there's no needle for
06:42 - so i'm going to what typically so cert
06:46 - calculate
06:48 - should calculate
06:53 - total
06:58 - total tape yeah and now
07:01 - i'm gonna just uh create a new
07:04 - cons total that's that's what it's
07:07 - returning the net
07:09 - or the calc total tip
07:13 - function in here we're gonna just keep
07:15 - the total
07:16 - let's say 10 and
07:20 - 0.3 so
07:24 - yeah so what it will return if
07:27 - total is not is equal to
07:32 - let's say is equal to
07:35 - what you told what point 1.3 is the
07:38 - answer of
07:39 - this as we know it so
07:44 - in here if it is not equal to 1.3
07:48 - so it will give an error so just throw
07:51 - an error here
07:53 - so a new error
07:57 - a new era just say like um
08:01 - should be total would be
08:05 - total should be
08:10 - total should be 1.3
08:15 - but got
08:24 - total
08:27 - now let's see just run it and we're
08:30 - gonna see what happens
08:32 - so if we just npm test
08:37 - you can see in here that it passes the
08:41 - test suite test cases yeah you can see
08:44 - that it passes the test cases now if we
08:46 - just
08:47 - like uh give or
08:50 - in the math.js
08:54 - if we just do something wrong like um
08:57 - we are gonna use plus tip in here once
09:00 - so if we just add one plus step in here
09:05 - and we just run here
09:10 - we can see it has been filled because
09:13 - total should be 13 but got 16
09:17 - so it it is running and you can see the
09:19 - total is 16
09:21 - in here that's why it's giving an error
09:23 - but
09:24 - you can see that we have here some
09:27 - on on
09:31 - code in here so we can also
09:35 - use that what asserts something
09:38 - in here that just just provides in here
09:41 - so in our in the
09:44 - guide there is something called expect
09:49 - which
09:50 - our which suggest provides in here so
09:53 - we're going to use expect
09:55 - value in here so we don't have to use
09:58 - this for
09:59 - this one and we can simply use expect
10:07 - expect what expect 13
10:13 - and after that we're gonna use
10:17 - this value 2b
10:20 - so how can we use this
10:23 - so this is what it is using
10:26 - that expect
10:30 - total if we just use our english and
10:33 - consistently that
10:34 - what we are expect total to be
10:39 - to be what to be 30
10:42 - so if we just run it
10:47 - and you can see in here
10:51 - that it failed that's because
10:54 - we expected 13 but received 16
10:58 - so that's how it's been done so
11:01 - but just uh one line of code we can
11:05 - see that what is giving here here
11:08 - so if we just uh correct out this
11:11 - mistaking that we have then
11:15 - and just run it
11:22 - you can see that it has been passed from
11:25 - from the
11:25 - test suite so this how
11:28 - in the docs there are many useful
11:33 - methods that is being used in digest
11:36 - framework
11:37 - and this all this can be helpful like
11:40 - you can see that if we to be null yeah
11:43 - we can use a to be nullified
11:45 - to be null method and to throw any
11:48 - error matching synapse on so
11:52 - that's so
11:55 - that's how it's been done so now if we
11:57 - just like
11:58 - do something like when we are just not
12:02 - passing
12:02 - the percentage something in here so what
12:05 - it will be
12:07 - so let's say if we don't it has a
12:09 - default element
12:10 - let's say we are using 0.2 as default
12:13 - argument
12:15 - now we have to make another test within
12:18 - here
12:20 - so in here should calculate
12:28 - should calculate total
12:34 - tape with default
12:40 - 50 percent so now
12:49 - so now what to do so now
12:52 - it will just we are going to cons total
12:56 - and we are going to use math
12:59 - and we are going to pass 10 and just 10
13:03 - in here
13:04 - and what we expect we expect
13:08 - total to be
13:13 - 12 yeah that's what we want in here
13:18 - so if we just run it
13:22 - and film test you can see that
13:25 - all the test cases has been passed
13:29 - so yeah that's how we to the this is the
13:32 - introduction of the
13:34 - chest so that's how we do
13:37 - so it's been used because it helps to
13:41 - like collaborate
13:43 - whenever like we are
13:46 - using a new framework so it's very
13:50 - helpful for us
13:51 - how to run a test cases which is a
13:54 - synchronous process
13:56 - and we're gonna also configure our just
13:59 - library because whenever
14:01 - like we are running it using npm test
14:04 - whenever the test cases are fulfilled or
14:06 - filled it's going
14:08 - to block out it's going to return to
14:10 - this
14:11 - command prompt so let's see how can we
14:15 - do this
14:16 - so in our package.json just in our
14:21 - here in the script uh in the script
14:25 - in here the text we are just gonna write
14:28 - chest space test as watch
14:33 - what it will do like it will run as a
14:36 - nod money in here so
14:40 - we are gonna just run it npm
14:43 - test
14:46 - and in our math.test.js we're gonna see
14:50 - how can we
14:52 - use a asynchronous process in here
14:56 - so in here you can see in our command
14:59 - prompt
15:01 - let's say i am going to churn out here
15:04 - so in here you can see let's
15:07 - press w to watch more and here you can
15:11 - see that
15:12 - all the options are here like to run all
15:15 - the tests we can use
15:16 - a to run only the fill test you can use
15:20 - f and this are all
15:23 - other options and you can see in the
15:26 - documentation if you want to
15:28 - so if we type a it will run again
15:32 - all the test cases and
15:35 - if you want to see only the failed case
15:37 - cases student you can use f
15:41 - so yeah that's how we can use the
15:45 - chest as a as to restart the function
15:49 - properly now we're gonna see how can we
15:53 - use a test asynchronous process we can
15:56 - use here
15:57 - so let's see so test
16:03 - asynchronous let's say async
16:08 - and we are using callback here
16:12 - and in here we just gonna use set
16:15 - timeout
16:19 - set down and we're gonna call back
16:27 - and we're gonna call back and let's see
16:29 - give two second
16:31 - so two thousand
16:34 - milliseconds and here we are just going
16:37 - to use the expect
16:39 - so if let's say it is wrong let's say
16:42 - expect
16:43 - 1 dot 2b 2
16:46 - which is a failed test cases but now if
16:50 - you run it
16:51 - just save it here
16:55 - and it is going to run in here
17:02 - and you will see that it it
17:05 - has been passed but it should not be
17:08 - passed because it is a failed test cases
17:12 - so that's why it is giving an error
17:16 - so how can we do this how can we collect
17:19 - this so
17:19 - in here the test file
17:23 - just library give one
17:26 - say to give an argument and let's see
17:29 - you can give any argument in here
17:31 - and giving them done in the previous
17:33 - like in the rest api we are using the
17:35 - next value
17:37 - for the next argument as a middleware
17:41 - so in here we are using done
17:44 - and in here done it says
17:47 - like whenever it's uh reading to a done
17:52 - like whenever i see the done
17:55 - argument then it's going to be like
17:59 - see that all the discussion has been
18:01 - passed so now
18:02 - in here you can see that it is giving an
18:05 - error
18:07 - and it is saying it's expected to but
18:11 - received one
18:14 - so this is some small thing that we can
18:17 - do
18:18 - but we are using async await for a
18:21 - proper use so
18:22 - this is not how we are gonna use so
18:25 - first of all we are gonna
18:26 - let's create one
18:31 - promise function in here so we're gonna
18:33 - use
18:34 - add function in here as a promise
18:37 - and we're giving two argument as a a b
18:41 - and what it will return it will return a
18:43 - promise
18:45 - so if we use return new promise
18:50 - and it it is taking two argument that is
18:54 - resolved
18:56 - and reset
19:03 - and yeah now
19:06 - in here we are going to set a set
19:09 - timeout
19:11 - which will take let's say 2 second
19:17 - and here we are just gonna say that
19:20 - if a is less than
19:23 - zero our b is less than zero
19:29 - then we are gonna reject means it is
19:31 - going to be fail
19:32 - to reject
19:35 - new error numbers should be
19:43 - so to be non-negative
19:48 - which is not if it is negative so
19:51 - if it is true then if it is
19:55 - means it will not give any error then we
19:57 - are going to resolve it
19:59 - to give the sum resolve a plus b
20:05 - so this is our promise function and we
20:08 - know that it is going to give
20:10 - a failed cases for the test cases so
20:12 - we're gonna just uncomment out
20:15 - uh comment out and we're gonna just
20:17 - create a new
20:18 - test cases in here and let's say give
20:21 - the name
20:22 - should return
20:27 - sum of two number
20:32 - so in here uh we're gonna use the done
20:35 - function here
20:36 - first we're gonna see the primitive one
20:39 - like we are going
20:40 - to done
20:46 - and
20:50 - and in here we're just gonna call the
20:53 - function in here
20:54 - so what it will return it means we're
20:56 - gonna use the dan function
20:59 - to add we're gonna adding
21:02 - 3 and 2
21:06 - and then we are calling 10
21:10 - which will give the sum
21:13 - and what we expect we expect
21:17 - some dot to be
21:21 - five yeah we are expecting
21:24 - it to be five now
21:27 - if we run it
21:32 - it will not give any error because we
21:34 - haven't used the
21:36 - done function in here
21:39 - yeah you can see that it is not giving
21:41 - an error
21:42 - oh yeah yeah just to use w
21:46 - and just use
21:51 - f in here
21:58 - yeah it's giving an error so we're gonna
22:01 - use the done here
22:03 - and now if you run it
22:09 - you can see in here that it has passed
22:11 - all
22:12 - the test cases should calculate total
22:14 - tape should calculate all the
22:16 - so the return sum of 2 number now in
22:19 - here this is the
22:20 - old-fashioned way we are going to use
22:21 - the async await function
22:24 - so how can we use this so same thing
22:27 - we're gonna use
22:28 - we're gonna see in here that it's an
22:32 - essing function in here and
22:35 - also now also there is no need for this
22:40 - now there is no need for async done
22:44 - and we are gonna just uh
22:48 - because it returns a promise then we are
22:51 - just gonna use
22:52 - expect const sum is equal to we can use
22:55 - in here await function in here
22:58 - and use the add function here and use
23:02 - the 1020
23:04 - and we know what it will return it will
23:06 - return
23:07 - the expect some
23:10 - dot to be 30
23:14 - and now if you run it
23:20 - we can see in here that
23:25 - the test cases has been passed and we
23:28 - are using the async
23:29 - await function and we don't need a done
23:32 - in here
23:33 - just as an argument in here
23:36 - how to use chest for uh running our
23:40 - express endpoints like we have to run
23:43 - the
23:43 - user endpoint and task endpoint
23:47 - so first of all we have to change the
23:50 - environment of
23:51 - chest because right now by default it is
23:54 - running as a
23:56 - browser environment so in here just
23:58 - we're going to use
23:59 - simple json structure
24:03 - in here we're gonna use test
24:06 - environment
24:11 - test environment and it will be node
24:16 - and in here with us
24:20 - see that the file the connection string
24:25 - that we are using in here
24:28 - because the gist will run in other
24:30 - environment
24:31 - and it will run in separate environment
24:34 - so we're gonna separate the environment
24:36 - of test and
24:39 - the product 7. so in here first of all
24:43 - we have to
24:45 - import one library that's called npm
24:49 - i
24:55 - env cmd
25:00 - at the rate it will say that which
25:03 - update or which version you want
25:07 - and we are gonna save as a
25:10 - dev dependency so it will be
25:14 - saved as a dependency
25:17 - so in here we're gonna create one new
25:19 - folder
25:21 - let's say its name is config
25:24 - because we are gonna separate
25:25 - environment of port
25:28 - the dave one and
25:31 - the test one so in here
25:34 - we are just gonna say new file and let's
25:37 - say its name is
25:39 - dev dot env
25:42 - and one more that's called
25:46 - test dot env you will see that what i am
25:50 - talking about
25:51 - so in here in dev.env
25:56 - the connection string
26:01 - will be mongodb we're gonna see how can
26:04 - we use
26:04 - this as a assignment
26:09 - in our connection string so let's
26:13 - uh first of all let's close this
26:16 - tab there's no need for this one right
26:22 - now
26:24 - so in here in mongodb url you can see in
26:28 - the connection string
26:31 - and this is the connection string for
26:33 - now
26:35 - so we're just gonna copy it
26:39 - and just leave it there
26:42 - use this like yeah and if it is safe
26:47 - and also for test enemy we
26:50 - just gonna
26:53 - copy it
26:58 - but the name of the means it will be
27:00 - saved as a different collection
27:02 - or a different database so mongo's
27:05 - wrestlers
27:07 - test yeah
27:12 - and one thing more that we have to do
27:15 - like
27:15 - jwt key will be also
27:18 - it will be same but we have to just keep
27:23 - as because we are using env same thing
27:28 - so in here
27:29 - [Music]
27:32 - in the art file yeah
27:36 - so in the middle area in the middle
27:38 - where there is the
27:40 - this is my new course so just copy it
27:46 - and use it here and just save it
27:52 - and now in here we can just
27:56 - remove it and we can use process
28:00 - dot env dot
28:06 - the name of the variable that you have
28:10 - kept here that is jwtk
28:13 - so just use it jwt
28:17 - key we have to use it
28:21 - one more place it is in the
28:24 - user model
28:29 - in here yeah here it is
28:36 - just use it and one more
28:43 - in the connection string
28:47 - so in here just remove it
29:07 - yeah this will do the name is same so
29:12 - now we can just close this file
29:16 - and this one too this one
29:20 - now in the package.json we are just
29:23 - gonna
29:24 - give the
29:28 - file means where it is located
29:32 - so it is located the dot slash
29:36 - config slash
29:41 - dev dot env
29:46 - and in here it will be env
29:50 - cmd dot slash config
29:57 - plus test dot
30:00 - enemy yeah
30:05 - now it will be it will work
30:09 - so we can see if we just run nbm test
30:16 - you can see it is working yeah you can
30:19 - see that all the test cases has been
30:21 - passed
30:22 - will like we have separated the
30:23 - environment but
30:25 - we can see that it is working so
30:28 - now for using the express endpoints
30:33 - app and app app endpoints that we have
30:35 - made here
30:37 - so in here we're just gonna
30:41 - use the user.test.js because we're gonna
30:47 - test the user folder user router
30:52 - so in here what to do next
30:56 - so for testing the
31:01 - this file like text present points
31:04 - it provides with
31:08 - super test
31:13 - and film file npm library
31:18 - that is to be used in here
31:23 - so you can see that how it works
31:28 - same thing like we're just gonna use the
31:31 - request
31:33 - that is for super test and here the app
31:36 - express
31:39 - and we're gonna use the end points and
31:42 - what is the
31:44 - method and this is how
31:48 - this will work so let's see how can we
31:50 - use in here
31:52 - so first of all we have to
31:55 - install the
31:59 - super test in here so just install it
32:02 - but as a dev dependency
32:06 - so just use it here
32:10 - now what to do we have installed a super
32:13 - test so in here which is gonna use the
32:17 - uh require it from the
32:22 - we're gonna use super testing here
32:25 - so now we need what we need app
32:28 - that means we need this index.js we need
32:32 - this one
32:34 - so what can we because this one run
32:37 - before the
32:38 - listen to any port number so what we're
32:41 - gonna you
32:42 - do we are gonna restructure our folder
32:46 - system in here so
32:49 - first we are gonna create one more
32:55 - file let's say it's name is app.js that
32:58 - we're gonna
33:00 - use it
33:03 - so in here what we're gonna use
33:07 - that we don't need this part because
33:10 - we need this part in here
33:13 - we need this part here
33:16 - and this part that we need here so what
33:20 - we're gonna do
33:21 - we're gonna just cut
33:24 - copy paste here we're just gonna cut
33:27 - from here
33:30 - and paste it here
33:34 - and we're gonna modulate module.export
33:39 - app from here
33:44 - and for index
33:47 - we're just gonna
33:53 - use app require from
33:56 - dot slash app
34:00 - so yeah that's it this is what we need
34:05 - so in here we can just
34:09 - const app is equal to require
34:16 - dot dot slash from get out of the test
34:20 - folder and
34:22 - app so we have get the app folder
34:26 - app functionality
34:30 - so now we're gonna use the request one
34:38 - and we're gonna use app
34:41 - dot we're gonna just post in here
34:45 - because this one
34:49 - so what we need in here that we're gonna
34:52 - use the test cases
34:53 - so this is the test cases for what this
34:56 - is the test case first would
35:01 - sign up for
35:06 - a user and it will be an
35:10 - asynchronous process that we know
35:16 - and it will be an event in which
35:20 - request and here we're gonna use app
35:26 - dot post
35:32 - slash users
35:36 - and it provides some functions
35:39 - uh methods like dot send what we're
35:42 - gonna send in here
35:43 - we're gonna send in here the name
35:46 - let's say the name is
35:50 - test
35:53 - email
35:57 - email will be just like test
36:00 - at test.com
36:06 - and password password will be
36:11 - two test123 so
36:14 - in here what we expect from here we
36:16 - expect
36:17 - like the status quo we expect status quo
36:21 - to be 201
36:23 - and if it run that we know that if it
36:26 - run
36:26 - properly it will create a new
36:31 - file for a new user
36:35 - new user in the
36:39 - our mongodb because in here we have used
36:42 - one of the rest mongols in here
36:44 - but we have in separated environment
36:48 - so we can see that it will create a new
36:51 - user in the
36:52 - rest mongoose test database so
36:56 - not do it just run it we can see
37:00 - what will we get
37:04 - we can see in here that the test has
37:07 - been passed
37:10 - yeah you can see in here that the test
37:12 - has been passing here successfully
37:15 - so now if we go to our rest mongoose
37:17 - test
37:20 - in here you can see
37:26 - you can see that a new user has been
37:28 - created but
37:29 - there is one problem in here
37:33 - [Music]
37:34 - that
37:36 - that if we again run this file like just
37:39 - run it and save it it will even give the
37:43 - error
37:44 - because we have the
37:47 - same functionality
37:53 - you can see it gives error because we
37:55 - have used
37:57 - this one as email as one unique so it
38:00 - will give the error
38:02 - because validation is false in here
38:05 - so whenever we run this uh
38:08 - test sort we have to use this like we
38:11 - have to
38:12 - delete all the users all the collections
38:16 - in our database so it will restart again
38:20 - so this is why we're gonna use
38:24 - some global methods that
38:27 - just provides like before h
38:31 - before h means that it will
38:34 - run before each cases each test cases in
38:38 - here
38:39 - it needs a callback function we're gonna
38:41 - see how it will run but
38:43 - first of all we're gonna see how it will
38:46 - look like so we're just gonna use
38:47 - console log test
38:50 - uh used before
38:53 - before h and one thing
38:56 - more matter that is after each
38:59 - this one means that it will call
39:02 - after each test call
39:06 - so let's say console.log
39:10 - after h
39:15 - now if you run it you will see that it
39:18 - will
39:19 - come before the test cases will run and
39:22 - it will come after the test cases will
39:24 - run
39:25 - so in here
39:39 - you can see in here that it gives
39:42 - the console log before h
39:46 - and after h so what we're gonna do we're
39:49 - gonna just use the
39:51 - before h1 because in here before each
39:54 - cases will run
39:55 - it will delete uh
39:59 - the user that has been
40:02 - uh saving our collection so what we're
40:05 - gonna do
40:06 - we're gonna do we're gonna just
40:10 - first import the con
40:13 - const user it will require
40:17 - dot dot slash
40:21 - tv slash model slash
40:27 - users in here what we're gonna do
40:31 - it's it will be an asynchronous process
40:33 - so
40:34 - we're gonna do a sync
40:38 - and we're gonna have it await user dot
40:42 - delete menu
40:48 - we're gonna delete many and just use it
40:51 - and now
40:52 - if we just uh save it you can see that
40:54 - it will run
40:55 - because it will create a new user but
40:58 - before creating a new user it will
41:00 - delete the previous one so this is how
41:03 - we can
41:04 - test our sign up for a user and we can
41:07 - also test for
41:09 - a user that cannot be sign up
41:13 - and we're gonna use i'm gonna see how
41:16 - can we login
41:18 - so we should
41:25 - log in for a user
41:34 - and here what we need in here await
41:38 - request
41:43 - app dot it will be a post request
41:47 - and it'll be slash user slash login
41:52 - and in here what we're sending we are
41:54 - sending
41:58 - the email test one
42:03 - test at
42:06 - test.com
42:10 - and password
42:13 - is test123
42:18 - so if you run this for this one
42:22 - it will work with what it will do it
42:24 - will not run
42:25 - because for each test case it will
42:27 - delete the
42:28 - test one and it will delete the
42:32 - user so for each cases
42:35 - what we are gonna do is we are gonna
42:38 - create a new user
42:41 - let's say const user
42:45 - in here what we will provide we will
42:47 - provide the email
42:49 - or we will provide the name
42:53 - name will be test
42:57 - one two
43:00 - email will be test128
43:05 - test.com
43:08 - and password will be
43:12 - test one one two two
43:15 - three three and for s test guess what
43:19 - will we do it will do that
43:21 - await and in here we're gonna save it
43:25 - so user
43:29 - await user and for this sorting we can
43:32 - use this await user dot
43:34 - save this is how we can also save the
43:38 - user proper name would be like user one
43:43 - that will be good because we we can have
43:45 - multiple usernames
43:47 - as per the requirement for test cases
43:50 - so yeah so if we will do this anything
43:54 - in here
43:58 - it will it is fine you gonna use this
44:00 - one
44:02 - like user one dot
44:06 - email and
44:08 - in here user one dot password
44:13 - so now if you run this file
44:18 - we can see that it will run perfectly
44:23 - you can see it's each test case has been
44:26 - passed
44:27 - so this is how we will we can
44:31 - log in and sign up and for others
44:36 - api that we have used in here we can do
44:39 - similarly
44:42 - so yeah this is how we will do this
44:47 - thank you