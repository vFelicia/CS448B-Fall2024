00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you how you can
00:05 - create a text file in Python and write
00:08 - in it so let's get started so to start
00:12 - with we use a built-in function which is
00:16 - open and it takes two argument first is
00:20 - the name of the file which we want to
00:23 - create or read so let's say I want to
00:26 - just create a file which is demo dot txt
00:31 - in the same folder in which I am working
00:34 - in so you can see I am working in my
00:36 - file handling project and there is only
00:39 - one file there which is test dot P Y and
00:42 - this demo dot txt file will be created
00:45 - in the same folder now the second
00:48 - argument which we want to give here is
00:50 - the mode so there are several types of
00:53 - modes which we can use with this open
00:57 - function to work with the files so let
01:00 - me show you the list of some of these
01:03 - modes so you can see on the left-hand
01:06 - side I have listed the modes so you can
01:09 - use the R or R plus or W or W plus or a
01:15 - or B now R is used to read from the file
01:20 - and if you don't provide any mode to
01:24 - this function then the default mode is
01:27 - the read mode now if you want to write
01:30 - to a file you use this write mode with a
01:33 - keyword W so we are going to use this W
01:38 - keyword in order to write to the file so
01:41 - let's use this W keyword here and then
01:45 - this open function returns a file object
01:49 - so let's store this file object into a
01:53 - variable now generally we call this file
01:57 - object a file handler and using this
02:01 - file handler we can work with the file
02:04 - on which we are working on so this file
02:07 - handler will be used to work on this
02:11 - file which we want to create
02:13 - now in the next line I will just use
02:15 - this file handler and then I can call
02:19 - some methods here you can see there is a
02:22 - list of methods I can call on this file
02:26 - handler which is returned by this open
02:29 - function so to write into a file I can
02:33 - use the write function and here inside
02:37 - the write function you can provide any
02:40 - text whatever you want to write to the
02:44 - file so let's say I just want to write
02:47 - this line of string to my text file
02:51 - which I am creating so I can just paste
02:53 - this text here and then after writing to
02:57 - a file when you are finished working
02:59 - with the file you use once again this a
03:03 - fetch and then call a method called
03:06 - closed on it now what does this close
03:09 - function do so this close function is
03:12 - used to close the file and immediately
03:16 - free up any system resources used by
03:20 - your file handler which is F H and it's
03:24 - a good practice to use this whenever you
03:28 - are done with the handling of your file
03:31 - so always remember to use this close
03:34 - function after you are done with the
03:36 - handling of your file so this is a good
03:39 - practice but I would say you must call
03:41 - this function and that's it so this W
03:45 - mode if the file demo dot txt doesn't
03:49 - exist it's going to create the file and
03:52 - then it's going to write this text into
03:55 - the file so W mode is responsible for
03:58 - creating the file also and if the file
04:02 - already exists it will overwrite the
04:05 - previous string by the string which you
04:08 - are writing using this write function so
04:11 - let me just run this code and you will
04:13 - keep eye on this project because this
04:16 - file will be created inside this project
04:20 - so I'm going to right click and then run
04:22 - this test file and you will see as soon
04:25 - as I run this test
04:27 - while there is one more file created
04:30 - here which is demo dot txt and when I
04:33 - click on this file you can see the same
04:37 - text appears here which we have written
04:40 - using the write function now if you want
04:43 - to provide the line breaks you can
04:45 - provide them using backslash N and I'm
04:49 - going to once again run the code so
04:51 - remember when the file doesn't exist the
04:54 - W mode is going to create the file and
04:57 - if the file already exists which it does
05:00 - now then it's going to overwrite it so
05:03 - I'm going to run the program once again
05:04 - and see the content of this demo dot txt
05:08 - and you can see this string is split
05:11 - into two lines which is done by this
05:15 - backslash n so let me just split the
05:18 - screen so you will see the demo in the
05:22 - real time so on the right hand side I
05:25 - have my demo dot txt file and on the
05:28 - left hand side I have this code on which
05:30 - I am working on so let's write something
05:33 - else in this file so instead of writing
05:35 - this big line of text into the file what
05:39 - I want to do now is I want to use a for
05:43 - loop to print 10 lines into this demo
05:47 - dot txt file so I'm going to use for
05:50 - loop for that and I'm going to just
05:53 - write for I in range and let's say the
05:58 - range is 10 and then we will call our
06:02 - write function using this FH file
06:05 - handler and then what I want to write
06:07 - here is let's say this is line number
06:11 - modulus D and I will just replace this
06:15 - mod D with the line number and then I
06:19 - will just provide the line break after
06:22 - that and in the previous videos we have
06:25 - already seen that when you use this
06:28 - modulo symbol and then give some value
06:31 - here for example I then this mod D will
06:35 - be replaced by this I right so let's run
06:39 - the code and
06:40 - see what happens now so I'm going to run
06:42 - this code and now you will see that this
06:46 - code prints this is line number zero
06:50 - this is line number one because the
06:53 - range starts from zero so in order to
06:55 - print the line number from 1 what we can
06:59 - do here is we can use this parenthesis
07:03 - here let me just move this to the side
07:05 - so inside the parenthesis we can use I
07:09 - plus 1 so we can add 1 every time this
07:12 - value of I is printed so it will start
07:16 - from wanna so let's run the code once
07:18 - again and you can see now it prints this
07:21 - is line number 1 line number 2 3 4 up to
07:25 - 10 now you might have already observed
07:27 - that whenever I run the code this demo
07:31 - dot txt file is overwritten every time
07:35 - when I run this code so the older text
07:39 - is overwritten by the new text now in
07:43 - order to avoid the overwriting of the
07:45 - text what we can do is we can use a
07:48 - special mode which is a here and a
07:53 - stands for append and this append mode
07:56 - is used to append the text to the file
08:00 - so let's replace this W mode with the a
08:04 - mode now okay and you can see this is
08:08 - the previous content of the demo dot txt
08:11 - file and now when I run the code you
08:14 - will see the previous content is staying
08:18 - there and the new content is appended to
08:21 - the same file so a we use to append to
08:25 - the existing content of the file now let
08:29 - me go to the list of modes once again
08:31 - and you will see there is a special mode
08:34 - W plus also which means if you want to
08:37 - read and write at the same time you use
08:41 - this W plus mode and this mode is going
08:45 - to create a new file if the file doesn't
08:48 - exist otherwise a file already exists
08:52 - it's going to overwrite too
08:54 - file which already exists also you will
08:58 - see a special mode B here which is used
09:01 - for the binary files such as images or
09:04 - other binary files this R and R plus
09:08 - mode we will see in the next video and
09:11 - I'm going to show you how to read from
09:14 - the file using these modes in Python in
09:17 - the next video so let's go to our code
09:19 - once again and in the videos in which I
09:22 - have shown you how to use exception
09:24 - handling I told you we can use try with
09:28 - the finally keyword so try and we can
09:31 - enclose this for loop inside the try
09:34 - block and let's do this and then in the
09:38 - finally we can add the closing of this
09:43 - file and what does this finally do if
09:46 - you remember this finally block is
09:48 - always called in the case exception is
09:51 - thrown by this code or if exception is
09:55 - not thrown so this F H dot close is
10:00 - definitely will be called whenever we
10:03 - use this finally keyword in order to
10:06 - call the F H dot close function so you
10:10 - can either use this kind of code in
10:13 - order to work with your file handler and
10:16 - then use this close function with this
10:19 - file handler at the end of the handling
10:21 - of the file otherwise items provide the
10:25 - shorter form of writing the same type of
10:29 - notation and this notation is you use a
10:32 - keyword width and then you call open
10:36 - function and you can provide the same
10:39 - type of argument here for example demo
10:43 - dot txt and append and then you use as
10:47 - keyword and then you write the name of
10:50 - the file handler for example F H as you
10:54 - have done here and then you provide this
10:57 - colon and inside this width statement
10:59 - you work with your code for example we
11:01 - work with the file writing with this for
11:06 - loop so this whole
11:08 - code including the try and finally block
11:11 - is equivalent to this kind of code which
11:15 - is the shorter form of writing the same
11:18 - code so this width statement is going to
11:21 - always call this closed method with your
11:24 - file handler when you are done with the
11:28 - handling of your file so you don't need
11:31 - to explicitly call this try finally
11:34 - block in order to work with your file
11:37 - this is enough to work with the file so
11:41 - either use this notation or this
11:44 - notation both are equivalent to each
11:47 - other now the last thing which I want to
11:49 - show here is let me just use the width
11:52 - statement in order to work with this
11:54 - demo dot txt file is for example you
11:58 - don't want to create this demo dot txt
12:01 - file into the current project instead
12:03 - you want to create this file into some
12:06 - folder on your computer so let's say I
12:09 - want to create this file inside this
12:11 - folder which is inside my C directory so
12:15 - I can just copy this whole part from
12:18 - here and then I can just paste this part
12:21 - with the backslash here and the
12:24 - important thing to note here is on
12:26 - Windows you always need to use the
12:28 - double backslashes in order to provide
12:32 - the file path okay so use these double
12:36 - backslashes to provide the file path so
12:39 - see inside the C directory I have this
12:41 - files folder and inside the file folder
12:44 - right now you can see this is empty and
12:47 - now when I run this code let me just
12:50 - change the mode to W which is for write
12:53 - mode and I'm going to run the code and
12:56 - as soon as I run the code this demo dot
12:59 - txt file is created here and you can
13:01 - also see the content of the file on the
13:03 - right side which is this is line 1 up to
13:07 - this is line number 10 so this is how
13:10 - you can create a text file and write
13:12 - into it using Python in the next video
13:15 - I'm going to show you how to read from a
13:17 - file and work with the content of the
13:20 - file
13:21 - tuned and I'm going to see you in the
13:24 - next video