00:01 - hello and welcome back to the new video
00:03 - of the maven tutorial Series so till now
00:06 - we have covered the theoretical section
00:08 - of these uh cache course and now from
00:12 - this video onwards we will uh be
00:14 - actually doing some coding uh stuff
00:16 - inside our IDE and as I told you uh
00:20 - these today today's IDE comes with the
00:24 - inbuilt uh Maven implementation Maven
00:27 - support so you can use any of the IDE
00:29 - like the IntelliJ IDE vs code IDE but if
00:34 - you ask me I would prefer you IntelliJ
00:36 - IDEA because it is uh developed by jet
00:40 - Brands which is one of the popular
00:41 - company and I personally like IntelliJ
00:45 - IDEA if if I am doing some uh stuff
00:48 - related
00:49 - projects using Java okay so uh I would
00:53 - also suggest you to download the
00:55 - IntelliJ IDEA if you are following me
00:57 - and if you are if you want to follow
00:59 - this course okay so I'm assuming that
01:02 - you are you have already downloaded
01:04 - IntelliJ IDEA if not let me just quickly
01:06 - give you uh over you how you can
01:08 - download it just come here and write
01:11 - download
01:14 - IntelliJ IDEA
01:17 - if you hit enter first link comes from
01:20 - jetband itself just click on it
01:23 - and you will get to the IntelliJ IDEA
01:26 - download page uh now according to your
01:29 - operating system you can choose anywhere
01:31 - either Windows Mac OS Linux and I am
01:35 - currently now I am using Windows 11
01:36 - that's why I will click on Windows and
01:39 - there are two editions of this IDE one
01:42 - is Ultimate one and one is Community
01:43 - Edition uh so I will download the
01:46 - Community Edition because it is the free
01:48 - one and open source also and but the
01:51 - ultimate one is the you get more
01:54 - features and 30-day trial trial also so
01:57 - if you want you can download but it is
01:59 - paid I want you can compare all these uh
02:01 - features that you get in a paid one and
02:04 - a free one also so go ahead and click on
02:06 - download exe file or zip file whatever
02:08 - you want it will start download it is
02:11 - around 700 MB uh it depends upon your
02:14 - download speed it will get downloaded
02:17 - and just go ahead and click next next
02:19 - your IDE will get installed in your
02:21 - system okay I will doing cancel because
02:23 - I have downloaded already okay so
02:27 - assuming that you have downloaded this
02:29 - idea and if you if you want to follow
02:32 - along this code let's get let's go in
02:35 - our IDE and create our first Maven
02:37 - project okay all right let's go
02:42 - so I will come into my IDE first time if
02:46 - you are opening this you will see one
02:48 - window like this and there are no
02:50 - project here because since I work
02:52 - working along Java so there are some
02:54 - Java budgets also in kotlin budgets also
02:55 - so ignore this one you just click on uh
02:59 - projects tab click on new project and
03:02 - you just have to name your project right
03:05 - so I will write my
03:09 - first mavin app I'll adjust my first
03:13 - Maven okay so uh select the location uh
03:18 - wherever you want to store this project
03:20 - so I generate paper I will just go ahead
03:25 - into my desktop I will create one folder
03:29 - name as maven and inside that I will
03:33 - store my project okay you can choose
03:35 - anywhere anywhere you want uh so the
03:38 - language of this development is Java
03:40 - build system is a maven remember build
03:43 - system to say selected as Maven uh and
03:47 - because we are working with Maven itself
03:49 - and we need jdk so here uh whatever jdks
03:54 - which are installed in your system it
03:55 - will show all those jdk over here select
03:57 - whatever jdk you want I will go with the
04:00 - latest one 19 and if if there is no jdk
04:03 - listed over here you can just go ahead
04:05 - and download the jdk and if there is any
04:08 - jdk downloaded install downloaded and
04:10 - installed in your PC already just go
04:12 - ahead and add jdk folder and give the
04:15 - path to the IntelliJ IDEA where your jdk
04:18 - resides okay
04:20 - I will just go with 19 add sample code
04:23 - Okay add one settings uh I don't need
04:27 - anything okay and I will just hit create
04:32 - all right
04:34 - it is working like let it finish it will
04:38 - download the plugins which are required
04:40 - for the maven project to run it is
04:43 - downloading here you can see the
04:44 - background task I will show you waiting
04:46 - for Maven import completion and I'm
04:49 - having plugins will get downloaded Okay
04:52 - so
04:54 - but if you are running this first time
04:56 - it will take time some time let it be uh
05:00 - by the time I will give you the IDE over
05:03 - you if you are using first time uh so
05:06 - this is how the IntelliJ IDEA looks like
05:09 - uh here you have the project tab where
05:11 - all those uh directories are listed over
05:14 - here in a such a beautiful manner you
05:16 - can switch a switch between this idea
05:18 - Java or and here's our main file main
05:21 - domain.java file where uh our Java code
05:23 - is written just a simple hello world
05:25 - which is given by IntelliJ IDEA itself
05:28 - just to quick start our the development
05:31 - process and here is a project tab you
05:33 - can hide and unite is so that you can
05:36 - get the more view of this
05:39 - your file and after that uh one more is
05:44 - one more thing is here you can see Maven
05:46 - Maven tab is there if you click on it it
05:48 - will show you all those life cycles uh
05:52 - and the life cycles I hope you watched
05:54 - the previous video where we have
05:55 - discussed all those like uh build life
05:57 - cycles clean validate compile test and I
06:00 - have given you the theoretical knowledge
06:03 - of that these all these life cycles also
06:05 - you can come and I will show you how to
06:08 - use this tab also uh but first I guess
06:12 - yeah it's over and plugins also here you
06:14 - can see clean compiler deploy install
06:16 - jar all this plugins are also there we
06:19 - will have separate plugins video okay
06:23 - now uh I guess the processing is done
06:26 - yeah our project is ready to go and what
06:30 - we have done uh is we have created our
06:33 - first project now we have to understand
06:35 - the dependencies okay so I hope you
06:38 - watched the previous video uh where I
06:40 - discuss about how to add these
06:41 - dependencies and how dependent
06:43 - dependencies looks like what are the
06:45 - types of dependencies okay so let's go
06:48 - and create our first dependencies so if
06:51 - you recall uh I have told you that to
06:54 - create independencies how to manage the
06:56 - dependencies or you have one file called
06:59 - palm.xml okay so this is our Maven
07:02 - project you can see we have one pom.xml
07:05 - file just double click on it it will
07:07 - open that form.xml file so since this is
07:10 - a file extension is dot XML so extreme
07:13 - XML files contains the tags okay so
07:16 - these are the tags so so the parent tag
07:18 - is the project one so under which all
07:21 - these uh tags are written so our parent
07:24 - tag is Project under which model version
07:26 - is there uh this is XML scheme namespace
07:29 - schemas which are written on in the web
07:33 - itself if you go go on this site you can
07:36 - found all the schemas and
07:40 - group ID is there artifact ID for our
07:43 - project artifact ID is the project name
07:45 - itself and version is given by the
07:47 - intelligida itself okay and some
07:50 - properties of our project
07:53 - all right this is the file which is
07:56 - generated by the integration idea and
07:58 - given to us so now if I want to create
08:01 - some dependencies in my project how can
08:05 - I add dependencies over here okay so you
08:08 - see uh
08:11 - you just have to
08:13 - wait a second okay so now
08:17 - if you want to create some dependencies
08:19 - inside this so there are many ways to
08:22 - create the differential one way is
08:23 - straightforward you can you just go here
08:25 - and write
08:27 - dependencies so it will create the
08:29 - dependencies tag and uh after that uh
08:33 - and one thing uh we have the
08:35 - dependencies as our parent tag inside
08:38 - which all those dependencies reside is
08:40 - here as you can see dependencies is the
08:43 - parent tag under which dependency tag is
08:45 - there so we have to write the dependency
08:47 - type okay we write dependence C okay and
08:54 - uh the thing because I love Italian idea
08:57 - is this it will automatically give me
08:59 - the group ID and artifact ID that I want
09:01 - to enter so let's enter uh let's create
09:04 - the spring framework uh dependency for
09:06 - our project I will write at a artifact
09:09 - ID as spring
09:11 - slash
09:12 - spring
09:15 - sprayng spring slash code
09:20 - okay
09:22 - uh
09:25 - Let It Be
09:27 - uh the version where you use this
09:32 - okay I am getting error dependency
09:37 - okay
09:39 - fine uh so you see this is the one way
09:43 - you can create the dependencies you you
09:45 - just you just need to go ahead and write
09:47 - start writing in this uh like if I write
09:50 - J unit uh that is one word uh
09:53 - dependencies uh wait wait let me clear
09:56 - this out so that it is get that we are
09:59 - writing this for the first time okay J
10:03 - junit dependency this is our
10:07 - this is over there yes so I have I have
10:11 - already added junit dependency in my
10:13 - project okay so this is the one way you
10:16 - can add the dependencies but here you
10:18 - have to uh know the name of that
10:21 - artifact uh article ID means the
10:23 - dependency name to be precise and again
10:27 - the rest rest of the things is easy it
10:30 - will automatically ship the cursor to
10:31 - the group ID and come to the version and
10:33 - it would automatically add the scope
10:35 - here you can see I have not written the
10:37 - scope tag into it has automatically
10:39 - added the scope telling that uh that
10:42 - please use this junit dependencies for
10:44 - my project uh when to use in the test
10:47 - phase because J unit is the testing uh
10:49 - a related Library Auto Tool okay so here
10:53 - you can see we have created one
10:55 - dependencies so now I will give you one
10:57 - another way how you can add the
11:00 - dependencies right so if you go to the
11:03 - uh this
11:05 - code
11:07 - if you go into generate and it will if
11:11 - you go to the
11:14 - manage a dependency template uh okay so
11:18 - it will give you the dependency template
11:20 - I don't know the template I just need uh
11:23 - wait a second
11:25 - manage dependencies okay so nothing to
11:28 - show I guess we do it okay so add
11:33 - dependency button is there if you click
11:34 - on it uh it will show you the this tab
11:37 - so our project name is there my first
11:40 - Maven and only stable and now here here
11:44 - you can see the search button is search
11:45 - bar is there you can search any
11:48 - framework that you want in your project
11:50 - over here you just need to write spring
11:54 - if you want to use spring in your
11:57 - project and one more thing uh these all
12:00 - implementation are done by the ID
12:02 - IntelliJ IDEA you don't have to worry
12:05 - about it you just go ahead and search
12:07 - the dependency name and again if you
12:09 - want to search any dependencies uh you
12:11 - just need to go and go to the maven
12:14 - Repository
12:16 - repository here you can see all these
12:19 - dependencies you can see uh any
12:21 - dependencies that you want to search you
12:23 - just go here and light spring
12:26 - okay and hit search
12:29 - Spring contact spring core all the
12:32 - dependencies will come and these uh
12:34 - IntelliJ IDEA is integrated this
12:36 - functionality inside their IDE so that
12:39 - you can come here and write the spring
12:41 - and get that spring if you want the
12:43 - spring uh you can again you can select
12:47 - the scope of this I Integrity has given
12:50 - me the scope to compile so I will set it
12:53 - as compile and again you have version
12:55 - you if you you want to use the previous
12:58 - version you can go ahead and use
12:59 - previous version also I will go with the
13:02 - latest one or the IntelliJ IDEA that uh
13:04 - provided me and if I want this spring I
13:08 - have selected the version I am good to
13:10 - go and I will just click on ADD
13:13 - so after I click on add this
13:17 - dependencies you can see these two tags
13:19 - are being added inside my uh palm.xml
13:23 - file okay so now uh if this is the two
13:27 - way by which you can add the
13:29 - dependencies right so if I go into
13:31 - inside my Maven and if I go inside my
13:34 - life cycle and I will just click on
13:36 - install
13:37 - okay it will run my uh maving command
13:41 - and you can see it it's giving me the
13:44 - error I guess could not find the
13:46 - artifact okay so J unit uh is not
13:50 - found I have to use that
13:54 - okay okay okay wait a minute so I will
13:57 - just remove this dependencies
14:00 - I guess right Let It Be layer okay so it
14:06 - doesn't find my dependency of that junit
14:09 - okay I will click on install again
14:12 - now you can see there is no folder right
14:14 - it will here you can see process
14:17 - finished with exit code 1 our build
14:20 - failure why so I'm getting the errors oh
14:24 - okay okay okay
14:28 - wait a minute guys
14:32 - okay
14:37 - to rerun the maven using okay okay for
14:41 - more information wait a minute guys I
14:44 - will be back
14:53 - dependencies so that doesn't work for
14:57 - that let me just add one more
14:59 - dependencies so that you can
15:03 - uh get what I'm trying to tell you J
15:07 - unit I will add the dependency of the J
15:09 - unit itself
15:12 - uh let me go ahead and add
15:16 - okay it's getting added
15:21 - okay
15:23 - so
15:29 - okay fine now uh you can see uh inside
15:33 - my this root folder uh previously there
15:36 - are two two or two folders okay life
15:39 - cycle and plugin only but as soon as I
15:41 - create this J unit dependencies and and
15:44 - my reload and I reload my Maven project
15:47 - it will
15:49 - it has created one more folder named
15:51 - dependencies inside which uh junit
15:55 - dependencies there okay so you can see
15:57 - as I as I added J unit dependencies over
15:59 - here you can see j18 dependencies also
16:02 - added my memory deposit direct folder
16:04 - directory structure and if I uh now if I
16:07 - go ahead and insert my life cycle and
16:10 - click on install
16:11 - uh it should go ahead and get this
16:14 - dependency and install it and yes build
16:17 - success Target project is also created a
16:20 - Target folder is also created we'll see
16:23 - what is Target we have a separate video
16:25 - on this uh what are the classes and how
16:28 - the this actual works we'll see
16:31 - but for this video I hope you got some
16:35 - idea about this form.xml file how to add
16:38 - dependencies now one more thing if you
16:40 - want to delete the dependency if you are
16:42 - just going inside this dependencies tab
16:44 - and uh in future you want to delete this
16:48 - dependencies you no more required J unit
16:50 - inside your project you just go ahead
16:52 - and come here J unit you click on the
16:54 - junit uh you you come over three three
16:57 - dots and you have the remove you can
16:59 - remove and as soon as you click on this
17:01 - you just have to come here and load
17:03 - mapping changes it will reload your
17:06 - project and see all the any dependencies
17:08 - got added or removed if this dependency
17:10 - as soon as I load my project that
17:13 - dependencies folder is gone because no
17:16 - more dependencies are required for our
17:17 - project okay as soon as you add no
17:19 - dependencies new dependencies folder
17:21 - will get created over here so I hope you
17:24 - got
17:25 - some idea how to add or manage the
17:29 - dependencies inside the IntelliJ IDEA
17:31 - and what is form.xml file and we'll
17:35 - continue this project we'll create one
17:37 - Java project and uh I'll see you in one
17:39 - live demonstration of when by creating
17:41 - one project using Maven okay so thank
17:44 - you for watching this video and I will
17:45 - see you in the next one