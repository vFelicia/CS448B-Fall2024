00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last two videos we have
00:07 - seen how we can detect the lane lines on
00:10 - the road using open CV now till now we
00:14 - have only worked with this image and in
00:18 - this video we are going to try to apply
00:21 - what we have written not on an image but
00:25 - with the video frames but you have
00:28 - already learned in the previous videos
00:31 - that a video frame is like an image so a
00:35 - video contains many number of frames so
00:39 - if we apply the same technique on each
00:42 - frame we will be able to detect these
00:45 - lane lines on the video frames also so
00:49 - let's apply that concept on our script
00:52 - what we have till now so right now I
00:56 - have added this test dot mp4 video
00:59 - inside my project so let me show you how
01:02 - it looks like so our video looks like
01:06 - this so we are going to apply all these
01:07 - concepts which we have applied on an
01:09 - image on this video so let's get started
01:13 - so I hope you have this code which we
01:17 - have written in the last two videos the
01:19 - only thing we need to do here is we need
01:22 - to read the video instead of an image
01:25 - and then apply those concepts on the
01:30 - frame instead of an image so we till now
01:34 - have two functions region of interest
01:36 - draw the line and we have this code so
01:39 - this all code we are going to enclose
01:42 - inside the function so that it will be
01:46 - easier to apply all this code on the
01:50 - video frames now as you already know
01:52 - that this will not be used because we
01:57 - are reading the videos so we don't need
01:59 - to read the image obviously so we are
02:02 - going to comment these two lines out so
02:05 - we don't need to convert BGR to RGB
02:09 - because we are going to use this native
02:13 - CV to lie
02:13 - not the matplotlib library of which we
02:18 - have converted this BGR to RGB image so
02:22 - now we are going to define a function so
02:24 - let's define this function and I'm going
02:26 - to name this function as process and
02:28 - it's going to take an argument which
02:31 - will be the image argument and all this
02:36 - code which is under this which we have
02:38 - written in the last video we are going
02:40 - to enclose this code inside this process
02:44 - function we don't need these two lines
02:46 - because we are not going to use
02:48 - matplotlib for processing this video so
02:51 - I am going to remove these two lines and
02:53 - I'm going to just give space here for
02:59 - this code so it can be enclosed inside
03:02 - this function now at last or at the end
03:06 - of this function we are going to just
03:08 - return this image with lines so we are
03:13 - going to return this image with lines
03:15 - using this process function that means
03:18 - on every frame we are going to draw the
03:20 - lines and return it using this process
03:22 - function next we are going to read the
03:24 - video using the video capture functions
03:27 - so I'm going to declare a variable cap
03:29 - is equal to CB 2 dot video capture and
03:34 - then we are going to just pass one
03:37 - argument which will be our video file
03:40 - which is test dot and before in our case
03:44 - so test dot mp4 and then once we have
03:48 - this video we are going to check if the
03:51 - video frame is available using the while
03:55 - loop so let's use this while loop and we
03:57 - are going to check if cap dot is open is
04:03 - valid or not so is opened and this
04:07 - function is going to return the boolean
04:09 - value so if this video frame is still
04:12 - available is going to return true and
04:14 - whatever we write inside the while loop
04:17 - is going to be executed now in the next
04:20 - line we are going to just read every
04:23 - frame so we all know from our previous
04:27 - videos that this cab dot read returns to
04:32 - result or two variables one is ret and
04:36 - the other is the frame and you're going
04:41 - to just say cap dot read and then we are
04:45 - going to apply our process function on
04:47 - this frame so we are going to once again
04:50 - take this frame variable and we are
04:54 - going to overwrite this frame with the
04:57 - lines on the frames so this we are going
05:01 - to get from our process functions let's
05:03 - call the process function and pass the
05:06 - frame variable inside it okay so this
05:10 - frame is going to go to the process
05:12 - function it's going to process
05:14 - everything and then the final result
05:17 - which we get is going to be saved once
05:20 - again into the frame variable with the
05:22 - actual lines on the frame in the next
05:25 - line we are going to just show our
05:26 - result using cb2 dot I am show method
05:30 - and we are going to just pass the frame
05:32 - variable here in the next line we are
05:35 - going to just write the code for the
05:37 - quitting from this loop so we are going
05:40 - to just say if CB 2 dot wait key is
05:45 - going to be 1 and then we are going to
05:49 - apply the end operator and then write
05:51 - 0xff for the cross-platform
05:54 - functionality and then we are going to
05:57 - just say is equal to so Rd so whenever
06:01 - somebody presses the Q key then we are
06:07 - going to exit from this loop and then in
06:10 - the next line we are going to just say
06:12 - break so break out of the loop the last
06:15 - two line in the last two line outside
06:17 - this loop we are going to just call the
06:22 - release function on the cap variable and
06:26 - we are going to destroy all the windows
06:29 - in the cv2 so we are going to just say
06:31 - destroy all windows that's it hopefully
06:35 - this is going to work so let's just run
06:38 - this script once again and let's see
06:40 - what happens and here we got the error
06:43 - and it's coming from this line which is
06:45 - CV to dot I am sure we forgot to give
06:49 - the first argument here which will be
06:51 - the name of this window you're going to
06:53 - just say frame here and let's run this
06:57 - script once again and let's see what
06:59 - happens and you can see on this video on
07:02 - this Lane line or lines are drawn right
07:07 - so this is the result which we were
07:10 - expecting we can improve this result by
07:13 - adjusting few variables so we are going
07:17 - to first of all press Q to quit and
07:19 - let's change some of these values here
07:23 - in the half line transform so we are
07:26 - going to just say that the max line gap
07:28 - is going to be hundred we are going to
07:31 - reduce the threshold value to fifty and
07:34 - draw a value to two okay inside this
07:37 - half lines P method and let's run this
07:41 - code so let's see what result we get
07:43 - this is also okay let's improve it a
07:46 - little bit more in the canny edge
07:49 - detection we can reduce this threshold
07:53 - value here to 120 the second threshold
07:56 - value and let's run this code once again
07:58 - and now we get the better result
08:01 - so the problem might be the edge
08:05 - detection so we have reduced our second
08:10 - threshold and now we get the better
08:12 - result you can see on this middle lane
08:16 - the lines are drawn clearly so this is
08:19 - how you can write a simple script to
08:21 - detect Lane lines on the road I hope you
08:25 - have enjoyed this video and I will see
08:27 - you in the next video
08:36 - you