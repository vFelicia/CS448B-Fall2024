00:00 - hey what's going on guys welcome back to
00:01 - our YouTube channel this is John from
00:03 - programming knowledge and in this video
00:06 - guys we're going to discuss what is
00:07 - pointers and how we can use pointers
00:10 - inside our C program okay so if you're
00:13 - excited guys please make sure to watch
00:14 - the full video we're gonna be learning a
00:17 - lot in this particular video and in the
00:19 - succeeding videos about pointers and
00:22 - guys if you are new here in our YouTube
00:24 - channel I am inviting you to subscribe
00:26 - if you like contents about programming
00:28 - so I am inviting you to subscribe press
00:30 - the notification bell so you'll get
00:32 - updated whenever we have a new upload so
00:35 - as I've said guys we're gonna be talking
00:37 - about pointers in C programming so
00:41 - basically pointers in C are you know
00:44 - easy and fun to learn so there are some
00:47 - C programming tasks that are perform
00:49 - more easily with pointers and there are
00:53 - other also tasks such as dynamic memory
00:55 - allocation cannot be performed without
00:58 - using pointers so it becomes necessary
01:02 - to learn pointers to become a perfect C
01:07 - programmer perfect C programmer so if
01:15 - you want to be like almost perfect C
01:17 - programmer so it is necessary for us to
01:21 - learn pointers okay and let's start
01:24 - learning them in simple and easy steps
01:27 - so as you know every variable is a
01:30 - memory location and every memory
01:33 - location has its own address defined
01:37 - which can be accessed using the
01:40 - ampersand symbol so I think we already
01:43 - use this particular symbol before in our
01:46 - previous tutorials but we're going to
01:48 - you know tackle deeper
01:50 - what is this particular symbol and how
01:53 - we can use this in you know working with
01:57 - pointers and it is you know denoting an
02:01 - address in memory meaning the ampersand
02:05 - and for example we're going to define
02:08 - here or create a program that could show
02:13 - the capability of this operator and the
02:18 - basic access to or basic you know access
02:24 - to the pointer address so for example we
02:26 - have a variable in VAR one and then we
02:31 - have char var two which is the length
02:35 - for example is 10 so basically guess as
02:40 - I've said this particular variables
02:42 - these variables has location or has a
02:46 - specific location in our memory and
02:48 - every memory location has its own
02:51 - address so in order for us to verify
02:54 - that we could try to print the address
02:58 - or memory address of these variables so
03:00 - we're going to use printf function and
03:04 - then in here we're going to say address
03:08 - of r1 is % X so this is the format space
03:19 - of format specifier when we're trying to
03:23 - display the address of the variable so %
03:28 - X and then we're going to specify a new
03:32 - line here and then comma and then of
03:34 - course we need to use the ampersand
03:38 - symbol and of course and the name of our
03:40 - variable say for example T var 1 so the
03:44 - address of var 1 : NN % X the format
03:48 - specifier format specifier and in a
03:51 - foreign specifying ampersand and the
03:53 - name of our variable 1 and we could do
03:58 - also the same for the second one or
04:01 - second variable var two so % X and then
04:05 - this will be var - so this is basically
04:08 - guest trying to test if this particular
04:12 - variables has you know we will just
04:15 - display the address of this variable
04:20 - okay so before we run our program let's
04:22 - change first this because I have
04:26 - got to type number one because this is
04:29 - this is supposing that this particular
04:32 - variable has the length of 10
04:34 - so that's char var 2 and then open and
04:39 - close square brackets and then 10 okay
04:44 - so let's try to build and run our
04:46 - program and as you can see it's going to
04:49 - display the address of var 1 is 6 1f e
04:54 - 1c and the second one will be F e 1 2 so
05:00 - that's basically the address of the
05:02 - variables var1 and the var 2 so a
05:08 - pointer variable is a variable whose
05:10 - value is the address of another variable
05:14 - okay so for example direct access of the
05:18 - memory location
05:19 - now like any variable or constant you
05:22 - must declare a pointer before using it
05:25 - to store variable address so the typical
05:30 - or you know the general form of a
05:32 - pointer variable declaration is just
05:34 - like this we need to specify the type
05:36 - and then the master is or star symbol or
05:41 - asterisk in other other terms and then
05:44 - of course the variable name so that's
05:48 - how to declare a pointer variable so
05:53 - again we need to specify the type and
05:55 - then a stirry symbol and then the
05:59 - variable name so here the type or type
06:07 - is the pointers base type a and it must
06:10 - be a valid C data type and of course the
06:14 - variable name or the var name is the
06:17 - name of the pointer variable and as you
06:21 - can see guys this particular symbol a
06:23 - stirry symbol is sometimes used to
06:26 - declare or use for multiplication
06:29 - process or multiplication operation
06:33 - right but in this particular case it is
06:35 - being used as to declare a pointer
06:38 - variable okay
06:40 - now in order for us to declare pointer
06:47 - variable based on this particular
06:49 - declaration form so we could say
06:52 - something like int and then percent or
06:55 - I'm in the mastery symbol and then the
06:58 - name of our variable so this will be
07:03 - pointer pointer to an integer okay and
07:12 - then we have for example double and then
07:16 - the mastery symbol DP and this is
07:21 - basically the pointer to a double we
07:28 - also have like float and then FP this
07:33 - will be obviously pointer pointer to a
07:39 - float and another thing CH and then this
07:46 - will be pointer obviously to a character
07:51 - so the actual data type of the value of
07:54 - all pointers is you know a long extra
07:58 - decimal number that represents the
08:01 - memory address so whether we declare it
08:04 - as in we declare it as double we declare
08:07 - it as float or character so it's going
08:10 - to do it's going to return a long
08:14 - hexadecimal number that represents the
08:16 - memory address now the only difference
08:19 - between pointers of different data type
08:22 - or data types is the data type of the
08:26 - variable or constant data pointer points
08:29 - to so for example this particular
08:32 - variable points to this variable one
08:36 - then it's going to be a bit different
08:38 - because we are referencing to an int
08:42 - variable so let me show you that how you
08:45 - can you know use pointers we could
08:48 - remove this lines
08:51 - hey in var1 we could assign a value to
08:56 - this like 20 and then this this will be
09:00 - the actual actual variable declaration
09:07 - so this particular variable has the
09:12 - value 20 and then we could declare a
09:17 - pointer variable so in and then asterisk
09:22 - IP so this is pointer variable
09:32 - declaration so you get to see the
09:35 - difference between this declaration the
09:40 - pointer variable uses the symbol as the
09:43 - recipe and then of course in order for
09:45 - us to store the address of the variable
09:48 - 1 into the pointer variable IP we could
09:53 - use IP variable equals the ampersand
10:00 - symbol and of course the VAR okay so
10:05 - basically guys we're just passing the
10:08 - memory address of this particular
10:10 - variable 1 into the pointer variable IP
10:14 - okay so for example we could print the
10:17 - address of our var 1 so printf address
10:26 - of var 1 we could use % X as the format
10:35 - specifier and then backslash n for a new
10:39 - line and then use the ampersand symbol
10:44 - and then var 1 so let's try to declare
10:48 - or I mean display first the address of
10:51 - the VAR one and then we could also just
10:54 - do the same print the address or the
10:59 - value of the pointer variable IP
11:05 - so the value of IP and then percent X
11:13 - backslash N and then the variable IP so
11:19 - let's try this clean and build our
11:21 - program and it should you know displayed
11:25 - the same hex on the hexadecimal value so
11:28 - address of var one and six 1f e 1 4 and
11:33 - then the value of IP is you know 6 1f e
11:37 - 1 4 so basically we're just trying to
11:41 - display or I mean store the memory
11:44 - address of var1 into the pointer
11:48 - variable IP ok and of course if you want
11:53 - to access the value using a pointer you
11:58 - could try to modify our program to
12:05 - access the value access the value using
12:13 - the pointer variable so printf and then
12:20 - value of pointer variable IP so for
12:31 - example % the backslash N and then Astor
12:40 - is IP so basically we're just trying to
12:43 - access the value of this particular
12:46 - pointer variable so let's try this clean
12:51 - and build our program and as you can see
12:55 - here we have the address of var 1 6 1 f
12:59 - e 1 4 and the value of the pointer
13:02 - variable or I'm in the address of IP or
13:06 - you know the pointer variable IP 6 1f e
13:09 - 1 4 and also here we could say that the
13:12 - value of this is 20 which is also the
13:16 - same
13:17 - with our variable one so that's how easy
13:21 - for us to you know use the pointers
13:24 - inside our C program so thank you for
13:26 - watching guys and see you in the next
13:29 - video