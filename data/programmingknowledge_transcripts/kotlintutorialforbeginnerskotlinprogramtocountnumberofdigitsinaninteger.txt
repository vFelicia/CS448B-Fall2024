00:00 - in this video uh we we would do some
00:02 - examples on the uh on the things we have
00:06 - learned okay so what i would recommend
00:09 - is
00:09 - you just watch the video when i uh
00:13 - announce the
00:14 - problem statement and then do it by your
00:16 - yourself
00:17 - and then you can play it again and check
00:20 - the solution okay so we would continue
00:23 - with our first example
00:25 - to
00:27 - count
00:28 - number of digits
00:32 - in an integer
00:37 - okay so
00:39 - like
00:41 - there is some integer or a number given
00:44 - okay suppose one two three four
00:46 - so
00:48 - i have to count
00:49 - the number of digits in the
00:51 - number
00:53 - so
00:54 - let's
00:56 - code for that
00:58 - so i'll write the main function
01:01 - and inside the main function
01:05 - there is a number
01:10 - and suppose that number is one two three
01:12 - four five six seven
01:14 - okay
01:15 - now uh i'll declare a count
01:19 - i'll declare a count and in at every
01:21 - loop i'll increase the count by one okay
01:25 - so count is equals to zero at the start
01:29 - so uh
01:32 - what is the basic logic behind this
01:35 - like we have to use loop
01:37 - and i trade the loop
01:39 - until
01:41 - uh some some condition or something is
01:43 - evaluated to false okay so
01:47 - i i can use while loop i can use any
01:50 - loop in this but i'll use while loop
01:52 - okay
01:53 - so uh and
01:55 - counting of digit okay so at every tens
01:58 - place there is a new digit every ten
02:00 - hundred place so when i divide the
02:02 - number by ten
02:06 - so the number of digits get reduced by
02:08 - one
02:10 - okay
02:11 - and
02:12 - um
02:15 - when i divide by 10 divided by 10
02:18 - there is no decimal
02:20 - uh
02:21 - anything taking place because the number
02:23 - is integer okay so when i divide one two
02:25 - three four five six seven
02:27 - by uh ten the answer is one two three
02:30 - four five six not one two three four
02:31 - five six point five seven
02:33 - okay
02:34 - so i'll use while loop
02:37 - and the condition would be
02:39 - number uh not equal to zero
02:42 - okay so while the number is not equal to
02:44 - zero
02:45 - i'll
02:47 - i'll divide the number by ten
02:50 - and store it in number
02:52 - or num
02:53 - and i'll increase the
02:55 - count
02:59 - okay
03:00 - so
03:02 - what happens here is after first
03:04 - iteration num will be divided by 10 and
03:06 - its value will be
03:08 - one two three four five six
03:11 - then the count is incremented to one
03:13 - after the second iteration
03:15 - the
03:16 - value
03:17 - num would be um one two three four five
03:20 - and uh the
03:22 - that is incremented to to after the
03:24 - third iteration the number would be
03:26 - incremented to one two three four and so
03:28 - on so after the
03:30 - seventh iteration the number would be
03:31 - increment after the sixth iteration
03:33 - number would be incremented to one
03:34 - number would be
03:36 - uh one and the count is incremented to
03:40 - six
03:41 - and again at the seventh iteration the
03:45 - encounter is incremented to 7 and the
03:47 - num becomes 0 so again women when
03:51 - then then the test expression is
03:52 - evaluated to false and the loop
03:54 - terminates okay
03:56 - so i can write a print statement here
04:03 - number of digit
04:08 - in
04:09 - num is
04:10 - or i can say in
04:13 - num
04:18 - is
04:21 - count
04:23 - okay so when i run this program
04:27 - the
04:28 - answer the order output should be
04:31 - seven
04:33 - so let's see
04:53 - [Music]
04:55 - okay so the number of digits in zero now
04:59 - why it is showing zero here because we
05:01 - have uh done all the calculation and we
05:04 - have divided num by 10 and so on and
05:06 - then becomes zero so what i'll do is
05:09 - i'll change here
05:12 - i'll
05:14 - take a value
05:15 - number
05:17 - that would be equal to one two three
05:18 - four five six seven it is the input
05:21 - and then
05:23 - i'll
05:25 - introduce a variable num that would be
05:27 - equal to our number
05:30 - okay and now here i can do number
05:34 - now when i run this program
05:39 - i can see that
05:41 - it works on pretty well the number of
05:43 - digits one two three five six seven is
05:45 - seven
05:46 - okay moving forward
05:54 - in the next example
05:55 - we would write a kotlin program to
05:58 - reverse a number
06:03 - okay
06:04 - so
06:05 - what i should do for reversing a number
06:10 - for reversing a number uh i can do
06:14 - is what i can do is i can
06:18 - introduce a lot of variables okay
06:21 - so it is not a
06:23 - uh right choice because we don't know
06:26 - the
06:29 - uh
06:30 - count of count uh the number of digits
06:32 - in the integer okay
06:34 - so what would we do is uh
06:38 - we would first
06:40 - like when we divide the number by 10
06:44 - okay so the remainder
06:47 - remainder we get is like when we divide
06:49 - one two three four five six seven by ten
06:51 - so the remainder is seven here
06:53 - okay when we divide it pattern
06:57 - so uh
06:59 - like this is the this must be this would
07:01 - be the first digit of the reverse number
07:06 - so let's go ahead and think as we code
07:09 - so there is a variable number this which
07:12 - is the output which is the input let's
07:14 - say it's one two three four okay so then
07:17 - i'll and we introduce a variable num
07:21 - which is equals to the number
07:24 - now
07:25 - uh
07:25 - i'll increase a variable
07:28 - reversed and
07:31 - for now it is zero
07:33 - okay
07:34 - so i'll introduce a while loop
07:36 - while
07:37 - uh num is
07:40 - not equal to
07:41 - zero
07:42 - okay
07:43 - now uh
07:47 - i'll introduce a value a variable
07:51 - digit
07:53 - okay
07:54 - and digit this digit is equals to
08:04 - okay
08:06 - now
08:07 - this is the
08:08 - last digit or the
08:10 - four in in the first iteration
08:13 - so uh
08:15 - the reverse number
08:18 - the reversed number
08:21 - would be equals to the old reverse
08:23 - number which is zero for now
08:25 - okay into 10
08:28 - into 10
08:30 - and plus the digit
08:34 - so now when we come to the second
08:36 - iteration
08:37 - so the old reverse number is multiplied
08:39 - to 10
08:40 - and shifted one bit uh left side and
08:44 - then the digit is added okay so
08:47 - from this the number could be reversed
08:49 - and
08:50 - at the end i divide the number by 10
08:53 - okay
08:54 - so it helps in like when
08:57 - in the next iteration okay
09:00 - so i'll just explain this code once
09:02 - again
09:02 - uh in this program while loop is used to
09:05 - reverse a number as given
09:08 - as
09:09 - i'll say
09:11 - first the remainder of num divided by 10
09:14 - is stored in the variable digit now
09:17 - digit contains the last digit of num
09:19 - that is 4.
09:22 - then the digit is added
09:25 - to the variable reversed after
09:26 - multiplying it by 10 so multiplication
09:29 - by 10 adds a new place in the reverse
09:32 - number
09:33 - one place multiplied by 10 gives you
09:35 - tenth place okay so 10th plus gives you
09:38 - 100 and so on so in this case uh
09:41 - reversed contains 0 into 10 plus 4
09:44 - equals to 4.
09:46 - so num is then divided by 10
09:49 - so that now it contains the first three
09:52 - digit that is one two three
09:53 - after second iteration digit equals to
09:55 - three reverse equals to four into ten
09:58 - plus three forty three
10:00 - and num is equals to twelve after third
10:02 - iteration the digit equals to 2
10:05 - okay
10:06 - and reverse equals to 43 into 10 plus 2
10:09 - that is 432 and num is equals to 1 and
10:13 - after the fourth iteration
10:15 - the digit equals to 1
10:16 - reverse equals to 4 and 432 into 10 plus
10:19 - 1 that is 4 3 2 1 and num is equal to 0
10:22 - now as num equals to 0 the test
10:24 - expression fails and while loop exists
10:27 - exits and reverse reverse already
10:29 - contains the reverse number that is 4231
10:32 - okay so before running this program
10:36 - i'll write a print statement
10:39 - print
10:44 - the
10:45 - reversed
10:46 - number is
10:54 - okay
10:54 - now i run this program
11:00 - i can see that the reverse number is
11:02 - 4231 okay so this is all for this video
11:05 - stay connected