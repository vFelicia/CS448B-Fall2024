00:00 - so first of all what is redis so reddis
00:03 - is an open-source BSD licensed Advanced
00:07 - inmemory key Value Store where keys can
00:10 - contain data structures such as strings
00:13 - hashes lists sets and sortage sets so
00:18 - it's an inmemory key value store with
00:21 - persistence that means RIS can be used
00:25 - as a database or a caching layer or a
00:29 - message broker now I already said that
00:32 - it's BSD licensed that means it's open
00:36 - source now redis is written in C and
00:39 - it's nosql database now what is nosql
00:44 - nosql is an informal Loosely defined
00:48 - term for non-relational structured data
00:52 - storage systems like mongod DB mcash cou
00:57 - DB or Cassandra so following in the
01:00 - footsteps of uh other nosql databases
01:03 - such as cassendra couch DB or mongodb
01:07 - radis allows the user to store vast
01:11 - amount of data without the limits of
01:14 - relational databases so in nosql
01:17 - databases data can be stored in
01:20 - non-relational way now what does the
01:22 - name Radice mean redis stands for remote
01:26 - directory server it is often referred to
01:29 - as a data structure server since the
01:32 - keys can contain strings hashes lists
01:35 - sets and sorted sets so because the keys
01:39 - can contains these type of different
01:42 - data structures it's often referred as a
01:46 - data structure server right so the name
01:49 - come from remote directory server now
01:52 - what is radis used for so as I already
01:56 - mentioned that it's an advanced key
01:58 - Value Store that can function as a nosql
02:02 - database or as a memory cache store to
02:05 - improve performance when serving data
02:07 - that is stored in system memory and also
02:11 - it can be used as a message broker so it
02:14 - can be used in place of caching systems
02:17 - such as mam cached now you must be
02:19 - wondering how to interact with radis so
02:23 - redis can be installed on a server and
02:27 - it can be interacted with uh command
02:30 - line tool or command line interface
02:32 - which is called radis CLI so using this
02:35 - radis CLI we can interact with our redis
02:39 - server now this redis client can be used
02:43 - on any machine and then when we open
02:46 - this redis client which is a command
02:48 - line client uh the first line will look
02:52 - like this so redis then this kind of
02:54 - angle bracket this we will see in the
02:58 - coming videos how to install redis and
03:01 - how we can use redis now let's talk
03:04 - about some of the history about redis so
03:07 - in early 2009 a developer called
03:11 - salvator Sanfilippo he was an Italian
03:14 - developer by the way started the redis
03:18 - project at that time he was working on a
03:21 - realtime web analytics solution and
03:24 - found that myell could not provide the
03:27 - necessary performance so in June 200
03:30 - redis was deployed in production for a
03:33 - website called log.com which was a
03:37 - realtime web analytics website then in
03:41 - March 2010 a company called VMware hired
03:45 - s philipo to work full-time on reddis
03:48 - although Reddit remains as BSD licensed
03:52 - subsequently VMware hired some of the
03:55 - other developers who also contributed
03:58 - majorly to assist assist on the project
04:01 - so this was a brief introduction about
04:03 - radis and from the next video we will
04:06 - see how we can install redis and how to
04:09 - use redis hey guys in this video I'm
04:11 - going to show you how you can download
04:14 - and install and use redis on your Ubuntu
04:17 - operating system so let's get started so
04:21 - first of all what is redis so redis is
04:23 - an open-source inmemory data structure
04:26 - store which is also used as uh cash or a
04:32 - message broker uh in various
04:36 - applications right so it's basically a
04:39 - key value uh pair database mostly I use
04:43 - it as a caching layer in my
04:47 - applications uh you can also use it as a
04:50 - message broker so let's see how we can
04:52 - install redis so when you go to your
04:56 - favorite browser and search for install
04:58 - redis
05:00 - uh the first link which you will see
05:03 - here will be from redis
05:06 - doio and here you can see the title
05:09 - installing red is so just click on that
05:12 - title and then you have this install
05:16 - reddis on Linux uh link here so I'm
05:19 - going to click on this link and you have
05:22 - uh the procedure on how you can install
05:26 - reddis on your Ubuntu operating system
05:30 - so if you want to use uh apt install to
05:35 - install redis then this these are the
05:38 - commands if you are installing redis on
05:41 - a Docker container you might need need
05:44 - this uh prequest it to uh install reddis
05:48 - uh because in some containers you have
05:51 - some minimal distributions
05:54 - right I generally prefer the second
05:58 - option which which is installing redis
06:01 - using the snap package manager right so
06:06 - the command is easy snap already comes
06:10 - with the newest version of open 2 so you
06:13 - can just give the single command and
06:15 - reddis will be installed so I'm going to
06:17 - copy this pseudo snap installed redis
06:20 - and then open my terminal so to open the
06:23 - terminal I can just press control alt t
06:26 - on my open to operating system and it
06:28 - opens the terminal or you can go to the
06:30 - application and click on Terminal and
06:33 - it's going to open the terminal just
06:35 - paste the command which is sud sudo snap
06:38 - install redis press enter and give your
06:40 - ubuntu's password which you use to log
06:42 - to your Ubuntu operating system and then
06:45 - press enter which is going to start the
06:48 - installation of redis on your open 2
06:53 - operating system it will be finished
06:55 - really fast so redis is installed on on
06:59 - your W operating system so once redis is
07:03 - installed using the snap command you can
07:07 - enable redis using snap uh itself right
07:11 - so just write
07:13 - pseudo
07:14 - snap enable and then redice it's going
07:18 - to enable the redis service right now in
07:23 - order to start the redish using snap you
07:26 - can just write uh pseudo snap
07:30 - start and it's going to start redis
07:33 - right so you can see uh redis has been
07:36 - started right if you want to stop it you
07:40 - can use uh stop command if you want to
07:44 - restart redish you can just use uh
07:48 - restart
07:50 - command and it's going to restart the
07:53 - redis service using snap right so these
07:55 - are few commands you can use to enable
07:59 - and start redis using snap because we
08:01 - have installed redis using snap on our
08:05 - open2 operating system
08:07 - right so once uh redis Service uh is
08:13 - running you can also check the status
08:16 - also by using this command pseudo snap
08:22 - Services right so just give Pudo snap
08:24 - Services it's going to show you all the
08:28 - statuses of all the services uh which
08:32 - have you have installed using snap right
08:34 - so redis server is already here and it's
08:38 - enabled and its current status is active
08:43 - right now how to connect to the redis
08:48 - server so in order to connect to the
08:50 - redis server you have this command
08:53 - generally if you have installed the
08:55 - redis using apt install you would use uh
09:00 - radis hyphen CLI right but if you have
09:05 - installed radis using snap this command
09:08 - will not work so you can see this
09:10 - command is not recognized because you
09:14 - need to use redis do CLI if you have
09:19 - installed redis using snap right so just
09:24 - write redis do CLI and you are connected
09:27 - to your local Red This Server right I
09:31 - can just press contrl C in order to come
09:34 - out of uh this CLI if you want to uh
09:38 - give the same name or if you want to use
09:42 - same name right uh like uh redis hyphen
09:46 - CLI you can create an alas for redis do
09:51 - CLI right so just write U pseudo
09:57 - snap alas
10:00 - then the name of our rist CLI is radius.
10:05 - CLI and then just right redis hyphen CLI
10:10 - and then press enter so the ls is
10:12 - created and now you can use uh redis
10:16 - hyphen CLI to connect to your uh redis
10:19 - server and use it like this okay so this
10:24 - is how uh you can uh use redis on your
10:29 - obuntu operating system if you are not
10:32 - happy with the alas you can also unalias
10:35 - it by just uh giving this command on
10:39 - Alas and then give this uh give this
10:44 - redish hyphen CLI and it's going to unal
10:48 - it right so let me just uh use redis CLI
10:53 - and then when you give your ping command
10:57 - it's going to in turn give you the pong
11:01 - output this is how you know that red is
11:05 - uh is working fine right as I said redis
11:09 - is a key value uh pair database for
11:13 - example so you can set uh a value for
11:16 - any key by using the set command so just
11:19 - write set and then the name of your key
11:21 - let's say the name of the key is test
11:24 - and the value
11:26 - is my value for example right so just
11:30 - write my value and then press enter so
11:34 - we have created a key called test and
11:38 - its value is my value right in order to
11:42 - get the value of uh test key just write
11:45 - get and the name of the key which is
11:48 - test and it's going to give you the
11:51 - value for that key right you can just
11:54 - write exit to exit out of your uh redish
11:57 - CLI and from now on you can um just uh
12:03 - use redis CLI to interact with your
12:06 - redish server on your UB 2 operating
12:08 - system so this is how you can download
12:12 - install and use redis on your UB 2
12:14 - operating system I hope you enjoyed this
12:17 - video and I will see you in the next
12:18 - video hey guys welcome to the next video
12:21 - on red tutorial for beginners in the
12:23 - last few videos we have seen how we can
12:25 - download and install redis now further
12:28 - videos I will be making on my Linux
12:31 - operating system that is my Ubuntu
12:33 - operating system because more frequently
12:37 - or most frequently This redis Server is
12:40 - installed on a Linux machine and it's
12:44 - used from a Linux machine so it's will
12:47 - be more appropriate to go further with
12:50 - this Linux operating system but all the
12:52 - command which I'm will be using on this
12:55 - Linux operating system using the command
12:57 - line are applicable on on the Windows
12:59 - terminal also and the Mac terminal also
13:03 - so the command will not change and you
13:05 - just need to start the redis server and
13:07 - reddis CLI on your Windows or Mac OS and
13:11 - then follow these uh instruction which
13:14 - I'm giving on my ubu operating system so
13:18 - if you are on Windows or Mac you just
13:20 - need to follow the same uh steps you
13:23 - just need to open two terminals on your
13:27 - operating system it can be Mac or uh it
13:30 - can be uh your windows and of course the
13:34 - Linux and on one terminal you just need
13:37 - to start the redis server so I'm going
13:41 - to just start the reddis server here and
13:44 - on the other one you just need to start
13:47 - the redis CLI okay so looks simple right
13:53 - the same step you need to do on your
13:55 - windows or your Mac okay so once our
13:59 - server is running we can uh minimize
14:02 - this and start working to interact with
14:05 - this server using the redis CLI okay now
14:09 - let's start with the data types which
14:12 - are there in redis and then we will see
14:16 - how we can use one of the data type
14:18 - which is string so basically there are
14:21 - five data types which we can use in
14:24 - redis and as I already told you that
14:27 - redis is a key value storage so the key
14:31 - is a printable ask key right and it can
14:36 - be up to 512 megabyte so it can take a
14:41 - really big uh key for example and it
14:45 - should be a printable ask key and then
14:47 - we can see the data types of values so
14:51 - the values Can Be Strings and then uh
14:55 - the containers of strings so they can be
14:59 - hashes or lists or sets or sorted sets
15:03 - right so the key are printable as Keys
15:07 - we can uh use printable ask keys for
15:09 - keys and for values we can use strings
15:13 - hashes lists sets and sorted sets right
15:18 - and this uh reddish string can be up to
15:21 - 500 12 megabyte okay now let's start
15:26 - with the Practical example example so we
15:31 - will start with the basics and we will
15:34 - try to set some values and get some
15:36 - values so for example I have set some
15:40 - values already to this uh reddish uh
15:44 - server so what I will do is to get all
15:48 - the keys which are set you just need to
15:51 - write keys and then the pattern which uh
15:56 - is estx here so estx is is a wild card
15:59 - and it's going to uh search all the keys
16:03 - which are saved in your database and
16:06 - then give you the result so for example
16:09 - I have set two keys which is name and
16:13 - name two and uh it has given me both the
16:17 - keys which I have saved right so in
16:20 - order to uh see all the keys which are
16:23 - saved in your redest database you just
16:26 - need to write keys and S
16:29 - right now as I already uh told you that
16:33 - to set some uh value as a string you
16:37 - just need to use set and then a key for
16:41 - example in this case I'm going to write
16:44 - name three because name and name one is
16:48 - already set so I'm going to just set the
16:51 - third key which is name three and then
16:54 - I'm going to give some name right and
16:57 - then press enter and then once again I
17:00 - will just write Keys ASX and now I can
17:04 - see there are three keys stored in my
17:08 - database right so set is to set a string
17:12 - value and as you have already guessed
17:16 - from my previous videos I've shown you
17:18 - this command which is get command and
17:21 - whatever key uh you will write here it
17:24 - will give you the value of that key
17:26 - which is Mark in this case right in the
17:31 - same way you can do name two get name
17:33 - two and it's going to give you the value
17:35 - of name two okay so get and set we are
17:38 - already clear now there is a delete
17:42 - command Dell okay so using a dell and uh
17:46 - the key name we can delete some key
17:49 - value pair so for example I want to
17:51 - delete name uh two for now and then I
17:55 - will just press enter it's going to give
17:58 - give me the number of uh Keys affected
18:02 - and in this case there is only one key
18:05 - with the name to and now when I just do
18:10 - this command which is Keys estx now it
18:14 - just gives me two values which is name
18:17 - and name three and because name two key
18:21 - is already deleted so I will not see
18:24 - this uh name two again right in the same
18:27 - way for for example I want to delete uh
18:31 - name three key then also I can do dell
18:36 - and then name three and then press enter
18:40 - and I can see the result one key
18:42 - affected and then now only one key left
18:47 - which is name okay so uh this is how you
18:51 - can delete some value right now let's
18:54 - set uh these names once again so for
18:56 - example name Tom and once again do the
18:59 - get for example get name now you will uh
19:03 - see that the key value of name is
19:08 - overwritten with the name Tom so
19:11 - previously the value of name was Mark
19:15 - you can see here and now it's Tom so
19:19 - whenever you set uh the value of
19:24 - previously uh set key then whatever
19:27 - value you will give for this key will be
19:31 - overwritten right so value will be
19:33 - overwritten for that key now for example
19:36 - if we want to delete all the values
19:38 - which are stored in our redist database
19:40 - then we can use flush all command so for
19:43 - example I will set some more values uh
19:47 - to see this example for example name two
19:50 - is equal to John and then I'm going to
19:54 - give name 3 is equal to Max so now we
19:59 - have three names so we can uh just give
20:01 - keys and Asis to see that so we have
20:05 - three keys stored right now for example
20:08 - I want to delete all these Keys then I
20:11 - can give flush all so just write flush
20:15 - all command and then it's going to
20:18 - delete all the values so it says okay
20:20 - and then once again when we give keys
20:23 - estx then you can see empty list or set
20:28 - so all the values are deleted using
20:31 - flush all commands so these are some of
20:34 - the most frequently used uh commands
20:38 - which we can use with the strings in the
20:40 - next video also we will see some of the
20:43 - more commands which we can use with the
20:46 - string values hey guys welcome to the
20:49 - next video on RD tutorial for beginners
20:51 - in the last video we have seen how we
20:53 - can use some of the command with the
20:55 - string values now in this video also we
20:58 - will see some more command which we can
21:00 - use with the string values in radis so
21:05 - let's get started first of all I will
21:07 - show you uh one command which is valid
21:10 - in Linux terminal also which is the
21:13 - clear command so when you do uh clear
21:17 - it's going to clear your terminal right
21:19 - so you can see when I have given the
21:22 - clear command is going to clear the
21:24 - terminal and basically what it does is
21:27 - it just give some of the some space uh
21:31 - in between your uh last command which
21:34 - you have executed and this uh after this
21:38 - clear okay so now uh you can see this
21:42 - terminal is totally empty now right and
21:46 - now we can uh start uh executing some of
21:49 - the other command so right now our uh
21:52 - database is totally empty I think so we
21:55 - can check it with keys estx and now
21:58 - let's set some uh values and this time
22:01 - uh we can uh use a command which is
22:05 - called the set ex okay and this set ex
22:11 - is the command uh which we can use with
22:14 - second so you just need to write set ex
22:18 - and this means set the value with the
22:21 - expiry of the key okay and then for
22:24 - example I just give the key and
22:28 - then I need to give some seconds so you
22:30 - can see the next option I need to give
22:34 - here is the number of seconds I want uh
22:37 - this uh key to live in my reddish
22:41 - database and after that it will be
22:43 - automatically deleted so for example 10
22:45 - second I want to give here and then I
22:49 - want to give the value of it for example
22:52 - Max okay now uh when I just uh press
22:58 - enter it's going to say okay and when I
23:02 - just get name it's there right and then
23:06 - there is a command called TTL and then
23:09 - you can use uh the key with this and it
23:13 - says two and what is this two so TTL is
23:17 - the command uh for time to live so it
23:21 - will check uh for how much time or how
23:25 - long it's uh this key is going to live
23:28 - okay and it says 2 seconds okay so this
23:31 - is time to live and then the key and
23:36 - then uh it returns us uh 2 second
23:38 - because 8 8 second has already passed
23:42 - after after giving this command and once
23:45 - again for example I will just say get
23:48 - name and it's no longer there right
23:52 - because we have just set uh 10c expiry
23:57 - on this key
23:58 - so after 10 second it will be
23:59 - automatically deleted right for example
24:02 - I will just give a 50c expiry for
24:06 - example here so 50 Max and then I will
24:11 - just give a TTL and then name and then
24:15 - you can see it shows 44 second once
24:19 - again 40 second and then it will show
24:23 - you the seconds uh for which this key is
24:27 - going to to live okay and after 36
24:30 - second it will be deleted right so these
24:32 - are two more command which you can use
24:36 - with the string right now let's set one
24:39 - more value for example Set uh name 2 and
24:45 - name two is equal to Tom okay and uh now
24:50 - uh we can uh for example uh overwrite
24:53 - this value so I told you whenever you
24:55 - write something like this set name name
24:58 - two and some other name for
25:01 - example John then it'll overwrite the
25:06 - value of name two for example I take
25:10 - name two as my key and give some other
25:13 - value it will overwrite but if you don't
25:14 - know uh if uh name two is there and if
25:18 - you don't want to overwrite uh name two
25:22 - then you can use this command called set
25:24 - NX and this set NX first of all check
25:28 - if the this key is available or not and
25:31 - if this key is not available then only
25:34 - it's going to uh you know create this
25:36 - key otherwise it's going to just ignore
25:40 - right so let's uh give this command and
25:44 - it says zero zero because uh no key is
25:48 - affected due to this command that means
25:52 - uh when we do get uh name
25:56 - two we can see
25:58 - this name is not overwritten because
26:01 - this command is used or will be
26:04 - successful when this key is not
26:08 - available in the database right if it's
26:11 - available then it's going to just ignore
26:15 - and if it's not available then it's
26:16 - going to create a new value for example
26:19 - I will just give a set n x 3 and this
26:24 - value is not available uh there so
26:28 - I will just give some other name and it
26:31 - says integer one that means one value is
26:35 - affected and then I will just do keys
26:39 - estx to see the values and and I can see
26:43 - name two is there and name three is
26:46 - there that means this was successful
26:48 - right and I can also get the value from
26:52 - uh get name three also and I can see
26:56 - that value is there let let me clear
26:58 - this uh terminal now if you want to know
27:00 - the length of the value stored in the
27:03 - key then you can just use St Str l n
27:08 - command okay and then the key name for
27:10 - example name two and it's going to give
27:13 - you the length of uh that key that means
27:17 - for example I do get name two here you
27:21 - can see it's a three character word and
27:23 - that's the length of uh this value right
27:26 - and that's the result result here okay
27:29 - now for example if we want to set
27:30 - multiple values with the same command we
27:34 - use M set so just use M set and then the
27:38 - key and the value for example this time
27:40 - I want to uh uh insert some numers so I
27:45 - will just say num one and I will uh just
27:49 - give 50 here and then after a space I
27:53 - will just write num two and then I will
27:56 - say 60 here here num three and for
28:00 - example 70 and so on right and then
28:03 - press enter and it says okay and then
28:06 - when I say keys keys
28:11 - estx it's going to give me name three
28:13 - and name two which were already there
28:15 - and then num one and num two because
28:19 - here you can see I have given the same
28:21 - key two times right so num one was there
28:24 - num two and num two I have given two
28:27 - times let's see the value inside the num
28:29 - two so num 2 get num
28:33 - 2 and let's see the value inside it so
28:36 - the value inside is is the last set
28:39 - value so whatever is the last uh set
28:43 - value uh you will set for this key it
28:46 - will show you that uh value here right
28:50 - so once again for example I will uh just
28:54 - give mset M set and then num three here
29:01 - and then give the value of for example
29:03 - 60 here and then once again do the key
29:06 - estx it's going to give me name three
29:09 - name num three num two name two and num
29:13 - one right so right now I have two names
29:17 - and three numbers inside my database now
29:20 - if you want to set the expiry in
29:23 - millisecond there is a command called P
29:26 - set X and then it takes uh the value in
29:30 - millisecond you can see in the
29:32 - intellisense also right so I'm not going
29:35 - to set any value uh here but I just
29:38 - wanted to show you this command also
29:40 - exist uh which will take the value of
29:44 - seconds in milliseconds right so this is
29:47 - p set X okay now there is a one more
29:52 - command which is called
29:54 - decr and in NCR uh which we use to
29:59 - increment and decrement the value of
30:02 - some key so for example I want to
30:04 - increment the value of uh key num one so
30:08 - let's see the value first of all so
30:11 - value of num one is right now 50 and
30:16 - then we can just write uh d
30:20 - c num one and then press enter and now
30:26 - the value becomes 4 49 right it will
30:29 - give you the result and when you give
30:31 - get num one it's going to give you the
30:33 - value 49 so it this decr command will
30:37 - decrement the value by one and if you do
30:41 - I NCR command to the num one for example
30:46 - once again the value will become uh 50
30:49 - so incr and D ECR is to decrease and
30:53 - increase the value by one okay let me
30:56 - clear this ter terminal once again now
30:59 - there is one more command to uh
31:02 - increment or decrement the value by some
31:05 - number and this is for example uh I and
31:09 - C are by so I andc by and the key name
31:15 - for example num one once again and I
31:18 - want to increment the value of num one
31:21 - Pi 5 so earlier it was 50 right and then
31:25 - it's going to become 55 because I have
31:27 - incremented the value by five in the
31:31 - same way I can do decr by and on the
31:36 - same number num one and for example I
31:39 - want to reduce the value by 30 right and
31:42 - then press enter and now it becomes 25
31:45 - so get num one and the result or the
31:50 - value inside it is 25 now the last
31:53 - command I want to show here is the
31:56 - append end command so let me uh just uh
32:02 - set one more value for example set and
32:05 - then uh the key name for example I will
32:08 - name it as my key okay and the value
32:13 - here I want to set is hello okay and
32:18 - then press enter and then get uh my key
32:24 - it's hello right now there is a append
32:26 - command so I can just use a p p and d
32:30 - append and as the name suggest I can
32:33 - append something to the key right so I
32:36 - want to append uh to my key so I will
32:39 - just write the key name and whatever
32:42 - string you want to append here so for
32:45 - example in double quotes I will just
32:47 - give a space here and then I will just
32:50 - write World here okay and then press
32:52 - enter and you can see uh the number of
32:55 - characters I think for the new value
32:58 - right so once again get my
33:01 - key and it's going to give me hello
33:04 - world so space world is appended to the
33:10 - my key right so append is used to append
33:13 - a string so these are some of the other
33:15 - command which you can use with the
33:17 - string values hey guys welcome to the
33:20 - next video on reddis tutorial for
33:22 - beginners in the last two videos we have
33:24 - talked about string values in red R now
33:28 - in this video I'm going to show you how
33:29 - you can use hashes as values in radius
33:34 - now first of all what are hashes hashes
33:37 - are map between the string fields and
33:40 - string values hence they are perfect
33:43 - data type for representation of objects
33:46 - in red is every hash can store up to 4
33:49 - billion field value pairs now you may
33:54 - ask that I have talked about key value
33:56 - Val pairs but what are these field value
34:00 - pairs right so let me show you a slide
34:04 - and then you will be able to understand
34:06 - in a better way so this uh was the slide
34:09 - similar kind of slide I have shown you
34:11 - in the string uh data type also right so
34:15 - in the hashes we are talking about
34:17 - hashes now so in the case of hashes the
34:21 - keys are same which are printable ask
34:24 - key you can see here but in the case of
34:26 - string we were using string uh array
34:29 - here right and that string array was
34:32 - about
34:33 - 512 megabyte right now in the case of of
34:38 - hashes we use this kind of map of field
34:43 - value right so field is this one and
34:47 - value is this one okay in the cases of
34:50 - string it was like a like only a string
34:54 - value right so I will give you an
34:56 - example for example I want to store uh
35:00 - students uh database or students uh uh
35:04 - info data then what I can do here is I
35:08 - can uh say student one as a key so
35:12 - student one as a key and then for
35:14 - example student has what uh attribute
35:17 - student has for example name soame age
35:21 - in which class he is so here uh field
35:26 - can be name and then for example name is
35:29 - equal to mark value one can be Mark
35:32 - right age is the field two for example
35:35 - in this case and then uh for example 15
35:39 - is the value to here right surname can
35:42 - be field three here and then whatever
35:45 - the surname of the student uh it will be
35:48 - value three right so uh for every
35:52 - student we can uh just provide this kind
35:55 - of map for his uh information so this is
36:00 - how uh hash data type as value work in
36:04 - redis right now let's take a practical
36:07 - example and then we will be able to
36:10 - understand this concept so I'm going to
36:13 - just start the reddish CLI and let me
36:16 - see what are the keys there so I'm going
36:19 - to just write Keys pattern and these are
36:21 - all the keys so I'm going to flush all
36:24 - so let me uh flush all here so all the
36:28 - keys will be deleted and now I'm going
36:31 - to clear this uh CLI and let's start
36:35 - with the hashes right so as we have seen
36:40 - in the case of uh strings we can just
36:43 - use this set command to set a key value
36:47 - pair now in the case of hashes we can
36:50 - use hm set to set a key field value
36:57 - uh pair right so for example we were
37:00 - talking about uh student information
37:03 - database right so just write hmet H
37:07 - stands for hashes here mset we have
37:10 - already seen in the case of strings also
37:12 - right so just write hm set and then uh
37:15 - for example ST1 for student one and then
37:20 - for example I will just write name is
37:23 - equal to Max right and then I can also
37:28 - give the second field value pair right
37:31 - so for example his age is equal to 15
37:34 - and then uh for example class in which
37:37 - class he is so he is in for
37:40 - example eighth class okay this is just
37:44 - an example so this is students one
37:48 - information let me just give this minus
37:51 - here so we will be able to understand
37:53 - properly and then when I press enter is
37:56 - going to say okay and to get this uh
38:00 - value there are two ways of getting so
38:04 - you can just say h get and the key name
38:08 - for example
38:09 - Stu minus one is the key name and you
38:13 - can give the field name whatever field
38:15 - you want to uh get or you can just uh
38:18 - say get uh key name and here get we have
38:22 - already seen in the case of uh strings
38:25 - also and you just need to add a h before
38:28 - it and then the student key name it says
38:32 - error because we just need to give the
38:35 - field name also so what field we want to
38:38 - get so we want to get for example name
38:41 - of student one it says Max here right
38:45 - now if you want to get all the
38:47 - information about student one you can
38:50 - just say h get all okay and here you can
38:56 - just just give the student one key name
38:59 - and it's going to give you all the You
39:02 - Know Field value uh information about
39:05 - the student one so for example name max
39:08 - age 15 Class 8 okay so let's add one
39:14 - more student for example so once again
39:17 - this command H hm set student uh two and
39:22 - then the name for example Tom
39:27 - age is 12 for example and class is 7
39:32 - okay press enter and once again you can
39:36 - get the information about the student 2
39:38 - using Stu minus 2 right so let me clear
39:42 - the terminal so in this way you can um
39:46 - just uh set the hash value and get the
39:50 - hash value right now uh there is one
39:54 - more command for uh for example H exists
39:59 - and this will uh tell you if the field
40:03 - inside this hash sets exists or not so
40:06 - just write H exists and then the key
40:10 - name for example
40:12 - St minus one and then uh for example I
40:16 - am searching for
40:20 - surname okay and surname field does not
40:23 - exist in student one info right and then
40:26 - I press enter it says integer zero so
40:31 - there is no information about uh the
40:34 - surname of student one right in the case
40:38 - of name this name exists right name
40:41 - field exist in this uh student one uh
40:45 - hash set so when I just give this value
40:50 - then it says integer one that means it
40:53 - exists so zero it doesn't exist one it
40:56 - exist right now uh for example I want to
41:00 - delete a value what I can do I can just
41:04 - say HD L and it says uh first of all I
41:10 - need to give the key name so
41:13 - ST1 and I want to delete for example
41:16 - class from it so I'll just write class
41:20 - and then I can just press enter right
41:24 - and then I I can just to H get all and
41:29 - the student one key and now you can see
41:33 - class doesn't exist here anymore right
41:37 - for example I want to uh set once again
41:40 - the same value I can uh just write hm
41:45 - set and then the same student Stu 1 and
41:50 - then Class 8 okay and then press enter
41:54 - it says okay and once again again H get
41:57 - all student one and now once again the
42:01 - class is added here okay so you can add
42:04 - uh and delete uh the values from this uh
42:08 - hash like this so for deleting you use H
42:13 - Dell and then once again for setting you
42:15 - just add this field value pair now there
42:19 - is one more command called H set NX so H
42:25 - set n x so this this command is used for
42:31 - setting the field value if the field
42:34 - doesn't exist so if the field doesn't
42:36 - exist this command will be successful
42:39 - and if the field exist this command will
42:42 - not be successful so for example I will
42:45 - just say
42:46 - ST1 name so name field already exists
42:50 - right and I will just uh give some other
42:52 - name to the student one right and and it
42:56 - says zero so this command is not
42:59 - successful because this command will be
43:02 - successful only in the case of the field
43:05 - not available right so if I do the same
43:09 - command and I know that surname is not
43:12 - there so I will just write surname and
43:14 - some
43:16 - surname and then press enter it returns
43:20 - uh integer one that means it has created
43:23 - this field value inside this student uh
43:27 - set right so once again when I
43:31 - do get all
43:33 - ST1 now this student one also have
43:36 - surname information now as in the case
43:38 - of uh string we were using keys right so
43:42 - we were writing Keys ASX right same you
43:47 - can use for example H Keys here and then
43:52 - the key name for
43:54 - example uh whatever key you want to give
43:57 - here
43:58 - [Music]
43:59 - ST1 and it gives all the fields in that
44:04 - hash so by field I mean the name and for
44:08 - example age class and surname only the
44:11 - field not the value of those fields so
44:14 - it will only return the fields of that
44:18 - key whatever we provide here now as in
44:21 - the case of string values we were having
44:25 - DCR decrement or incr for incrementing
44:29 - the value so the same is available in
44:34 - the case of hashes also so for example I
44:37 - want to increase uh the age of some
44:40 - student by some number I can do that so
44:44 - just write H and then I
44:48 - Inc by and then the key name
44:52 - St minus1 for example and the field name
44:56 - is age I want to increment his age and
44:59 - then right now the age is 15 for example
45:02 - and I want to increase the age by two
45:06 - and then press enter and then once again
45:08 - when I do Edge get all
45:12 - S1 now you can see the age becomes 17
45:16 - right so in order to increment the value
45:20 - you just write h i and C are by and the
45:23 - key and the field which which you want
45:26 - to increment now if you want to know all
45:28 - the values of a particular key then we
45:32 - can just write at Wells and then the key
45:37 - name
45:38 - ST1 it will just give you the values of
45:42 - that field value pair right so right now
45:47 - it's not giving name or age or class or
45:50 - surname it's only giving the values of
45:52 - them which is Max and then 178 and the
45:56 - surname value right so H vals is for
46:00 - Value okay now if you want to know the
46:03 - length of uh some hash for example I
46:07 - will just give this command
46:10 - hle n and then the ST1 the key name
46:14 - minus one it'll return you uh the number
46:18 - of fields in that hash okay so press
46:22 - enter and it returns four so I know that
46:26 - student one key has four number of field
46:30 - name age class and surname so I uh can
46:34 - just verify that with that okay so four
46:37 - field so it will return number four now
46:40 - uh the last command I want to show here
46:42 - is hm get so let me clear the terminal
46:46 - and then I just want to write hm get and
46:51 - it will give you the result whatever
46:54 - Fields you want so for for example for
46:57 - ST1
46:58 - ST1 uh for example I just want to know
47:01 - the name of uh that student I I don't
47:05 - want any other information about that in
47:07 - student but only the name then it will
47:10 - give me the name right and for example I
47:13 - just want to know the name and age even
47:16 - though the student hash contains surname
47:19 - and class also but I just want to know
47:22 - the name and age it will just give me
47:24 - the name and age
47:26 - when I use hm get then the key name and
47:29 - the field name I want to see so the
47:31 - field name I want to see right now is
47:34 - name and age so I just give name and age
47:36 - and it will give me the result of those
47:39 - field only so in this way you can use
47:41 - hashes in redis hey guys welcome to the
47:44 - next video on reddis tutorial for
47:45 - beginners in this video we will learn
47:48 - how to use redis lists so first of all
47:51 - what are redish lists so redest lists
47:55 - are simply lists of strings sorted by
47:59 - their insertion order right so as I
48:04 - already said that a redice list is
48:06 - simply a list of string which are sorted
48:09 - by their insert order so a list would
48:12 - have a head on the top and tail on the
48:16 - bottom right now in this list we can
48:20 - insert any element from the top also and
48:23 - from the bottom also right right so a
48:27 - element can be inserted to a list from
48:30 - the top or from the bottom now sometimes
48:33 - you see lists in a horizontal way right
48:38 - not in a vertical way but on a
48:41 - horizontal way right now if you see a
48:44 - list in a horizontal way your head will
48:48 - be on the left hand side right so your
48:52 - head will be on the left hand side and
48:54 - your tail will be on the right hand side
48:57 - right so Radice have some command for
49:01 - example L push L push means the left
49:06 - push that means we want to push an
49:09 - element from the head right left and
49:13 - head are same in the case of uh list so
49:18 - this is how reddish lists work it's
49:21 - simply a list with the insertion order
49:25 - now let's see how we can use lists in
49:29 - reddis so I'm going to start a terminal
49:31 - I have already started my reddish server
49:34 - so I'm going to just start the redish
49:36 - CLI here and then press enter and I want
49:40 - to show you one more redis command which
49:44 - is a reddis CLI command and I thought
49:47 - this would be interesting to you so I'm
49:49 - going to open our next terminal and here
49:53 - also I will just give a redis c C
49:55 - command and I will give an argument here
49:58 - so I will just give monitor command here
50:02 - okay so monitor so reddish CLI Monitor
50:06 - and what this monitor is going to do is
50:09 - it's going to monitor all the commands
50:10 - which you are executing from your CLI so
50:14 - for example let me give a keys estx
50:19 - command here right and now you can see
50:22 - it's uh showing us that we have have uh
50:26 - given this command keys ASX at this time
50:30 - this is a a time stamp at which this
50:34 - command is given okay so this is the
50:36 - time stamp at which this command is
50:38 - given and this is the command which we
50:40 - have given right so let's uh do flush
50:45 - all here and then press enter and you
50:49 - can
50:50 - see this flush all command is uh printed
50:54 - here so this is kind of for monitor
50:56 - right so this is going to monitor what
50:59 - are the command you are giving to your
51:03 - redis server okay so let's start with
51:07 - the redis list so first of all uh how we
51:11 - can create a reddis list so you can
51:14 - create a redis list by just uh giving
51:19 - this command you just need to give L
51:22 - push right so L push means left push
51:27 - that means we want to insert an element
51:29 - from the top right from the head okay
51:32 - and then we just need to give uh any uh
51:36 - key here for example key here I'm going
51:38 - to give num for numbers right and the
51:42 - first key I want to insert here will be
51:45 - for example one okay so first number
51:49 - right you can even uh insert multiple
51:53 - values here for this key for for this
51:55 - list for example 2 3 and four okay and
51:59 - then press enter and these four uh
52:03 - elements are inserted to the list in uh
52:07 - this order right now to see all the
52:11 - values in the list you use l range
52:14 - command so just use
52:17 - l range and then the name of the key for
52:21 - example number in our case and then you
52:24 - give the uh you know start and stop
52:27 - value for the range now reddest list
52:29 - index start from zero so for example
52:31 - starting value we can give zero here and
52:35 - let's say we want to just see uh the
52:37 - values in the list from 0 to 10 okay and
52:41 - then press enter and it shows us these
52:44 - values from 4 3 2 and one right so
52:51 - because we were pushing the values from
52:54 - the top we have pushed one first right
52:59 - so it will be pushed from the top one
53:02 - and then we have pushed two so the Top
53:05 - Value will become two now when we push
53:08 - two here and that's why it's our reverse
53:11 - order of numbers right so first uh we
53:15 - have pushed one and then we have pushed
53:17 - two at the top and then we have pushed
53:20 - three at the top and at the last we have
53:22 - pushed four at the top so that's why the
53:25 - number four is at the top of the list
53:27 - and number one is at the bottom of the
53:30 - list right now if we want to push uh
53:34 - number five on the top we can just do uh
53:38 - L push here so just do L push and the
53:42 - key name and then for example I will do
53:45 - number five here right and then press
53:47 - enter and once again I will do L range
53:51 - you can see five is at the top now if
53:53 - you want to remove the value from from
53:55 - the top you give the L pop command Okay
54:00 - so L pop command is going to remove the
54:03 - value from the left hand side left hand
54:05 - side means from the top okay so lpap pop
54:09 - is going to pop the value from the top
54:12 - and in this case our key is numb and you
54:15 - can see it has popped five from the top
54:18 - that means our uh list is now up to four
54:21 - okay so let's give the same command L
54:23 - range 0 to 10 and now our list is 1 2 3
54:27 - 4 because we have removed five from the
54:30 - top okay let me clear the
54:33 - terminal and uh then I'm going to show
54:36 - you one more command so let's start with
54:38 - the L range so we have right now four
54:42 - elements in the list now there is a r
54:46 - push command and R Pop command also okay
54:50 - so when you do R push that means right
54:54 - push that means means from the bottom
54:56 - you are pushing some numbers right so
54:59 - from the bottom for example I want to
55:01 - push uh the value five here okay first
55:04 - of all I just need to give the key a
55:07 - name and then From The Bottom I want to
55:09 - push the number five and then press
55:11 - enter and I will do L range on again you
55:15 - can see uh this value goes at the bottom
55:19 - five goes at the bottom because we have
55:21 - R push we have used this command R push
55:24 - R push push means from the bottom P push
55:27 - from the bottom right from the right
55:29 - hand side of the list okay that's why
55:33 - this five goes at the bottom okay once
55:36 - again let's uh do this R push and let's
55:40 - push six at the bottom and once again do
55:44 - L range like and you can see in the list
55:47 - you have the six at the bottom so in red
55:50 - is this list is sorted by the insertion
55:54 - order right if you push from the right
55:57 - it will go at the bottom and if you push
56:00 - from the left it will go at the top and
56:03 - for uh left push you use l push and for
56:07 - right push you use R push now as we have
56:10 - seen in the case of lpop L poop is going
56:13 - to pop the value from the top R poop is
56:16 - going to pop the value from the bottom
56:19 - so just give our pop here and then the
56:23 - key name and it's going to pop six from
56:26 - the list which is from the bottom right
56:29 - let's do lrange command once again and
56:31 - now you can see six is gone from the
56:34 - list in the same way let's do our pop
56:37 - once again and now five is gone from the
56:40 - list so once again let's do L range and
56:44 - now we have a list of four numbers right
56:48 - let me clear the terminal here now let's
56:50 - give lrange command once again and now
56:54 - there is a command called L Len okay
56:57 - this means left length and name of the
57:00 - key for example it's going to give you
57:02 - the length of the list in our case this
57:07 - length is equal to the number of element
57:09 - in the list okay so L Len is for knowing
57:13 - the length of the list now for example
57:16 - if you want to get some value at some
57:19 - index you just do L index command okay
57:23 - and then the name of the key and the
57:26 - index so index start from zero so 0 1 2
57:31 - 3 okay so for example we want to uh get
57:35 - number two here at index 3 so we will
57:38 - just say index three okay and it's going
57:42 - to give you the number one because index
57:45 - starts from zero so 0o 1 2 and three so
57:49 - index 3 is the value one here okay let's
57:53 - do index zero here and it's going to
57:56 - give us the value four now there is one
57:58 - more command called L set so you can use
58:01 - l set and the key name and then you can
58:05 - give the index at which you want to
58:07 - insert a value right so for example I
58:11 - want to insert the value at the very top
58:14 - so the very top is the index zero right
58:18 - and then the value itself so I want to
58:21 - insert the value at the zeroth index and
58:24 - the value is five and then when I just
58:27 - press enter it says okay and when I do L
58:31 - range you can see at the top at the
58:34 - zeroth index this value four is replaced
58:38 - by value five right so the size of the
58:42 - list Remains the Same but the value is
58:45 - replaced at the zero index and now the
58:49 - new value is five here now let me push
58:52 - some more values here so L push you can
58:55 - do R push also wherever you want so uh L
59:00 - push num and for example I want to push
59:03 - uh number six here and then number seven
59:07 - and number eight here okay and let's do
59:10 - L range and you can see all the values
59:14 - are here right now sometimes you don't
59:17 - know the range or the length of your
59:21 - list so for example you just to uh 0 to
59:25 - three here and it's going to just give
59:28 - you uh 0 to three values right now if
59:31 - you don't know the length of your uh
59:34 - list you can give L range and then 0 to
59:39 - minus one so let's give this command and
59:42 - you can see it gives all the elements in
59:44 - the list so when you do L range the key
59:48 - name 0 to minus one is going to give you
59:52 - all the element in the list right this
59:55 - was giving the values from 0 to 10th
59:58 - index so if our list is of length 20
60:03 - this is going to give you only 10 values
60:05 - 0 to 10 right but this is going to give
60:08 - you all the 20 values if you your list
60:12 - length is 20 now let me clear this uh
60:16 - terminal and let's go to the next
60:18 - command so the next command is
60:21 - L push X and that means L push if the
60:27 - key exists okay so the left push if the
60:30 - key exists so we know that uh we have
60:33 - created a list with the key uh num right
60:38 - so let's do first of all this L range
60:40 - right and then we will give this L push
60:45 - X okay and this means that insert to
60:50 - this list for example uh this key exist
60:54 - already so insert to the list if this
60:57 - key already exist which you are
60:59 - providing here okay and this is the left
61:02 - push so we want to push one more value
61:05 - to the top so let's push nine at the top
61:09 - and because this key num exists this
61:13 - command is successful right so let's do
61:15 - L range once again and this key is
61:19 - inserted at the top let's say we do L
61:23 - push X for a key which doesn't exist for
61:27 - example let's say we have a key for
61:31 - subjects so let's say the key is sub
61:35 - here and we want to push some keys for
61:38 - example uh once again one 2 3 4 5 okay
61:43 - but this key doesn't exist right and
61:46 - then when we press enter it returns zero
61:50 - because this command is not successful
61:53 - because this command checks whether this
61:56 - key exist or not and if this key exists
62:00 - then it's it's pushing these values on
62:04 - the top right but because this key
62:07 - doesn't exist this command fails and
62:10 - there is no uh list will be created now
62:13 - the next command I want to show here is
62:16 - L insert before or after so you just do
62:20 - L insert here and then the key name for
62:24 - example num here and you have the option
62:28 - before or after so before after are the
62:31 - keyword for example I use the keyword uh
62:34 - before here so I'm going to just write
62:37 - before and the pivot name pivot name is
62:42 - this element okay so I want to insert
62:47 - the value before two for example okay so
62:51 - let me uh write two here and the value
62:56 - is this time for example
62:59 - 55 okay so L insert the key name and you
63:04 - can use this keyword before or after
63:06 - here and then uh the pivot and then the
63:10 - value and once again I do press enter
63:14 - and you can see now the list size is
63:16 - nine and when I do L range 0 to minus
63:20 - one you can see this uh 55 is inserted
63:25 - before two right before two is the index
63:30 - from the left right because we have done
63:33 - the L insert okay so before two is
63:37 - inserted 55 right you can do after also
63:41 - so for example I want to insert after
63:46 - three okay let's insert after four so
63:51 - after five we want to insert insert the
63:54 - value four you can see uh after five
63:58 - there is three right so after five there
64:01 - is a value three and we want to insert
64:03 - four value four here and now our list is
64:07 - of size 10 and you can see now after
64:11 - five comes four okay and above three
64:16 - comes four okay so this L insert is used
64:20 - to insert the value before or after some
64:25 - value so these are some of the
64:26 - frequently used command with redis list
64:29 - hey guys welcome to the next video on
64:30 - redis tutorial for beginners and in this
64:32 - video we will learn what are sets and
64:34 - how to use sets in redice so first of
64:38 - all what are sets so reddish sets are an
64:43 - unordered collection of unique strings
64:47 - right so by unique I mean whatever
64:51 - values set contains they are all unique
64:55 - so no repetition is allowed here okay
64:59 - and they are unordered uh uh you know
65:02 - list so they are not ordered and they
65:05 - are unique so let's uh see how we can
65:08 - use sets in uh practice so I have
65:13 - already started my red server and on my
65:16 - CLI first of all let me uh just clear
65:20 - all the keys which I already have so so
65:24 - I will just say keys and I have only one
65:28 - uh key which I'm going
65:29 - to flush all and now let's create a set
65:35 - okay so to create a set you can just use
65:39 - S for set and then add okay so s add and
65:44 - then give any a name any name to a key
65:47 - so for example my set is a key here and
65:51 - then you can add members here one or
65:55 - many okay so for example I want to have
65:57 - a set of numbers so let me say this is
66:01 - my first set so I will name it set one
66:03 - my set one and let's say I add here 1 2
66:08 - 3 4 for example okay and I just uh press
66:14 - enter which is going to create a set and
66:17 - add these four numbers now here I have
66:21 - provided four different numbers right so
66:24 - they are all unique and to view uh the
66:27 - members of a set you just do s members
66:32 - okay so s members and the key name my
66:35 - key name is my set one and you can view
66:38 - all the members of the set right now for
66:42 - example in this set I want to add one
66:44 - more value so I just say s add and then
66:49 - my set one and I want to add three here
66:53 - right and I already know that here I
66:56 - already have three in my set and I want
66:59 - to uh you know add one more uh three to
67:03 - the set which is not allowed right so
67:05 - it's going to give me zero in return
67:08 - that means this three is not added to
67:11 - the set because three is already there
67:14 - okay we can just prove with this by
67:16 - using S members uh and then the set name
67:20 - so you can see set is not changed the
67:23 - values in the set remains same because
67:26 - uh they must be unique okay on the other
67:28 - hand when I do s set 5 which is a new
67:32 - member in the set I can just uh verify
67:36 - this so you can see this time it's added
67:39 - and you can verify it with this value if
67:42 - you get one here that means the number
67:45 - is added to the set and if you get zero
67:47 - here that means number is not added to
67:50 - the set right now for example if I want
67:54 - to know how many uh values are there in
67:59 - the set so how many members are there in
68:01 - the set so I can just do s
68:04 - card and then the name of the set my set
68:09 - one okay my set one and I can see there
68:13 - are five members in the set okay now uh
68:18 - let me create one more set so I have my
68:21 - set one let me clear the terminal first
68:24 - and now I will create a set two so set
68:29 - add or S add my set two here okay and
68:34 - let me add some more numbers here this
68:37 - time I will add for example 5 8 7 6 4
68:43 - and 9 in this set okay and then press
68:47 - enter and I can view this set by S
68:51 - members here and the key name s set two
68:55 - and you can see these are the member of
68:56 - second set right now if you have
68:59 - multiple sets you can substract one set
69:02 - from other using SD okay so you can use
69:07 - SD and this s diff command Returns the
69:11 - members of the set resulting from the
69:14 - difference between the first set and all
69:17 - other successive sets so this is the
69:19 - difference uh so I will just add my set
69:23 - one as my first set and then I will just
69:27 - uh give the second set as my set two
69:32 - okay and then press enter and it's going
69:35 - to give me the difference between these
69:37 - two set let me show you the values of uh
69:40 - the set one also so we can verify so you
69:44 - can see in the set one we have value 1
69:47 - to 5 and then in the set two we have
69:50 - values 4 5 6 7 8 9 so from SD it's going
69:56 - to give you the values which are there
69:59 - in the set one but they are not there in
70:03 - the set two okay so these values these
70:07 - three values are not there in the set
70:09 - two right but uh four and five are there
70:12 - in the Set uh two so they are discarded
70:16 - so SD is going to give you the
70:19 - difference that means whatever values
70:22 - are there in set set one and not there
70:25 - in set two now if you want to uh know
70:29 - the SD and save it into the third set
70:33 - for example then you can do that also so
70:36 - you can just write s diff and then store
70:39 - and then the destination so I'm going to
70:41 - save the difference in a new set so for
70:44 - example my set three right and then uh
70:49 - the difference between these two sets so
70:51 - my set one and my set two so these three
70:55 - values will be saved in the new set
70:59 - which is my set 3 okay press enter and
71:02 - then you can see by S members my set 3
71:07 - you can see all these values are saved
71:10 - in the set three which is the difference
71:12 - between my set 1 and my set 2 now you
71:16 - can do the union also Union of uh the
71:20 - set so for example I want to do Union I
71:23 - can just write s
71:26 - Union and the set name so my set one and
71:31 - my set two okay so I wanted to do the
71:35 - union of set one and set two and then
71:38 - press enter and it's going to give you
71:40 - uh these values so Union means whatever
71:45 - values which are there in the first set
71:48 - also and second set also the combination
71:51 - of that unique value right so all the
71:54 - unique value which are there in the
71:57 - first set and second set so uh these
72:01 - value were in the first set and these
72:05 - value which are unique in the second set
72:08 - so this is the combination of s Union
72:12 - okay and same you can do for storing so
72:15 - you can just write s Union store here so
72:19 - just write s Union store and I'm going
72:23 - to store it in set 4 for example so my
72:26 - set 4 the union of set one and set two
72:30 - right press enter and Union is saved I
72:33 - can do s member my set 4 and you can see
72:38 - now it has 1 to9 which is the union of
72:41 - set one and set two okay so in order to
72:44 - store use S Union store now if I want to
72:47 - remove some members from a set I can do
72:51 - s REM for removing uh a value from a set
72:55 - or member from a set and for for example
72:58 - I want to
72:59 - remove uh some member from set 4 and I
73:03 - want to remove for example nine okay and
73:06 - then press enter it's going to remove
73:09 - nine from the set four and I can do s
73:12 - members one once again and you can see
73:14 - nine is not there anymore okay you can
73:17 - remove multiple values for example 8 7 6
73:23 - and so on and these will be removed so
73:26 - now I have only up to five values
73:28 - because 8 76 are removed now for example
73:32 - I want to remove a random value from the
73:35 - set so I don't want to uh remove a
73:38 - specific value but I want to remove a
73:41 - random value so for example I can do s
73:44 - pop here to remove a random value from a
73:48 - set so my set 4 for example and for
73:52 - example I want to remove move only one
73:54 - value from here right so I can just uh
73:57 - press enter it says three so it has
74:01 - removed three from this set okay so
74:05 - let's do s member S4 and you can see
74:09 - three is no more there in the set four
74:13 - okay so it has picked a random value
74:16 - from this set and removed it okay I can
74:20 - give for example as poop uh my set 4 for
74:24 - for example I want to remove two random
74:26 - values so I can just do that and now it
74:31 - has removed four and one from the set
74:35 - and now my set is only of two values or
74:38 - two members 2 and five okay so s poop is
74:42 - to remove the random value from the set
74:46 - now let me clear this terminal and let
74:49 - me just print uh the values of set one
74:52 - and set 2 one once again so set one has
74:55 - 1 to 5 and set two have 4 to9 now there
74:59 - is a command called s inter and S inter
75:02 - command gets the element of a set after
75:06 - the intersection of all the specified
75:08 - set okay so it's going to give you the
75:10 - intersection of uh all the specified set
75:14 - so just do s enter for example my Set uh
75:20 - one and my set two and then press enter
75:25 - and it's going to give you the
75:26 - intersection intersection means uh these
75:29 - values are there in both the set so
75:32 - these are the intersection of both the
75:36 - sets so four and five are there in set
75:38 - one and set two so it's going to give
75:41 - you those value only and as we have seen
75:43 - in the case of s diff and S Union you
75:47 - can do uh for example as inter store so
75:52 - you can can store the intersection into
75:54 - a new uh set so s inter store and for
75:59 - example I want to save this in set five
76:02 - and then press enter and then I can just
76:06 - see the content of set five which is
76:08 - four and five which is correct now the
76:10 - last command I want to show here is s
76:13 - move command so s move and this command
76:16 - is used to uh you know transfer or move
76:20 - value or member from one set to to the
76:23 - another set right so for example I want
76:26 - to move
76:28 - one from my set one to my set two okay
76:33 - so I want to move this value to the set
76:36 - two so what I can do so first of all the
76:39 - source source is my set one and I want
76:43 - to uh move it to the destination which
76:46 - is my set two and I want to transfer the
76:50 - value one member one right so press
76:53 - enter it says one that means the
76:56 - operation is successful so let me see
76:59 - the S member or members of set two and
77:04 - now you can see one is moved to the set
77:08 - two earlier one was not there in the set
77:12 - two but now we have one in the Set uh
77:16 - two and let's see the contents of set
77:19 - one also so you can see one is no longer
77:23 - there in set one because it's moved from
77:26 - set one to set two so these are some of
77:29 - the most frequently used command in
77:33 - redis sets hey guys welcome to the next
77:36 - video on redis tutorial for beginners
77:38 - and in this video we will learn how we
77:40 - can use sorted sets in redis so first of
77:44 - all what are sorted sets so redish
77:47 - sorted sets are similar to The reddish
77:50 - sets with a unique feature that their
77:53 - members can be
77:55 - sorted now every member of a sorted set
77:59 - is associated with a score and based on
78:03 - this score their members can be sorted
78:07 - right so you can see in this diagram uh
78:10 - the redis key will remain the same as
78:13 - other uh patterns but here you can see
78:17 - uh a score here so you can define a
78:20 - score for example uh I will Define a
78:23 - score 100 and then the value associated
78:26 - with the score so the value associated
78:28 - with the score is value two and this is
78:32 - our member of a set and there is a new
78:35 - feature in the sorted set which is this
78:38 - score right so you can define a score
78:41 - and with this score you can define a
78:45 - member or a value associated with it and
78:48 - then on the basis of that we can sort
78:51 - the members of our set right so let's
78:55 - see in Practical how it works so I'm
78:58 - going to open my reddish CLI so the
79:01 - First Command we are going to learn here
79:03 - is Zed ad and the Z ad is used to create
79:09 - a set if it doesn't exist or add a
79:12 - member to this uh set if it already
79:16 - exists right so every command in sorted
79:20 - set will start with this character Zed
79:23 - and then whatever its function is the
79:27 - function name for example right so Zed
79:30 - add and then the key name for example my
79:32 - set one and the score so score is one
79:37 - and the value associated with it so
79:39 - value for example you want to associate
79:41 - it with the score one is a right in a
79:45 - similar way we can uh Define multiple
79:47 - score members here so score and the
79:50 - value associated with it two and B for
79:53 - example three is the third score and the
79:56 - value we want to associate with it is C
79:59 - and then they need not be in order so
80:03 - score can be five now and the value can
80:06 - be D here right or any other value right
80:10 - and then press enter and you can see
80:12 - four members are inserted in the sorted
80:17 - set now to get the members of ass sorted
80:21 - set you use Zed and then range command
80:26 - Okay as we have seen in the sets also
80:29 - and then what is your key name for
80:32 - example my set one and then starting
80:35 - value and the end value as we have seen
80:38 - in the case of sets also so in the case
80:41 - of sets we have seen that 0 and minus1
80:45 - are going to give all the values in the
80:47 - set right so press enter and you can see
80:51 - here uh all the values are printed here
80:55 - now you can see here the values are
80:59 - printed not the you know scores
81:02 - associated with them right so for
81:05 - example I once again write Zed add and
81:09 - then uh set one my set one and then for
81:13 - example I can just give score 100 here
81:16 - and then the value is e here right and
81:19 - then press enter and once again I will
81:22 - just give Z range my set one and then
81:26 - you can see all the values here or all
81:28 - the members here but these are not the
81:31 - scores these are just the uh order
81:35 - ordered number now if you want to know
81:38 - how many number of members are there in
81:40 - our set we can use Zed card here okay
81:45 - and the key name for example my set one
81:48 - and then press enter and I can see that
81:50 - there are five members in my sorted set
81:54 - right now in order to get the count of
81:57 - members in the sorted set with the
81:59 - scores within the given range we use Zed
82:03 - count okay and then uh the key name so
82:07 - my set one and the minimum and the
82:11 - maximum uh score value here so for
82:14 - example I want to get uh one to three
82:18 - here okay and then press enter and then
82:21 - it's going to count the number of values
82:24 - between this range right so for example
82:27 - I will just write 1 125 here and values
82:31 - are four because in between score one
82:35 - and score five there are four values
82:38 - including those scores now I can just
82:41 - write 1 to 50 here or 55 and still it's
82:45 - going to give us four values number of
82:48 - values because the last score we have
82:50 - Associated here is 100 so so when we
82:53 - write here 101 here and then press enter
82:57 - Then only it's going to give us five
83:00 - values and let's see we can give 99 here
83:05 - still it gives the four values so the
83:08 - Zed count is going to take the score
83:12 - values and then depending upon the score
83:14 - values it's going to give you the number
83:16 - of values uh in between these scores now
83:21 - let me clear the terminal and uh to
83:25 - remove any member from a set you use
83:30 - zedem and then the key name my set and
83:34 - the member so the member here will be
83:38 - the member value so not the score but
83:42 - the member so for example I want to
83:44 - remove the member B so I can just give
83:47 - the value of uh member B and then press
83:51 - enter and and once again I will just
83:53 - give this Zed range command and now it's
83:57 - giving the same answer because I haven't
83:59 - given the right key name so I must give
84:03 - uh ZM myet one here right and then it
84:08 - gives integer one that means the command
84:11 - is successful and once again the range
84:13 - and now you can see the value is removed
84:16 - from here now if you want to determine
84:18 - the index of a member in a sorted set
84:21 - you use Zed rank here so just give Z
84:24 - rank command and then my set one and the
84:28 - member name so for example D here and
84:31 - then press enter and it's going to give
84:34 - you the index of uh this D right so the
84:40 - index starts from zero so 0 1 2 right
84:44 - for example I want to see the index of
84:47 - uh e here and it's going to give me the
84:49 - index three and for example for member
84:52 - number a the index is zero now there is
84:54 - a zed rev rank command also so you can
84:59 - just write Zed rev rank here and this is
85:04 - the reverse rank right so uh the rank
85:08 - will be sorted according to the score so
85:10 - highest score is the zero Index right
85:14 - and then uh the lowest score is the
85:18 - maximum index okay so for example my set
85:22 - one and then the member name for example
85:25 - e is the rank zero here right because
85:29 - index of e is the highest rank rank is
85:35 - uh 100 for E right and it's the biggest
85:38 - rank that means the index for it will be
85:41 - zero because we are uh printing the
85:44 - reverse rank here okay for example you
85:47 - want to see the index of a it will be
85:51 - three because it's it's in reverse order
85:53 - now the last command I'm going to show
85:55 - you here is zcore command okay and then
86:00 - I can give the key name and the member
86:03 - name so for example I give the member a
86:07 - and then press enter is going to give me
86:10 - the score value of uh this member right
86:14 - so for example I want to see the score
86:16 - of uh member e and press enter it's
86:19 - going to give me 100 because score
86:21 - associated with e was 100 right and for
86:25 - example this value doesn't exist in our
86:29 - sorted set for example I just added or
86:32 - given the random value here and then
86:35 - press enter it's going to return the nil
86:38 - value which doesn't exist okay now let
86:42 - me clear the terminal let me show one
86:45 - more command to you so for example I
86:48 - just want to print the range of my set 1
86:54 - 0 to minus one and this is a CDE e and I
86:58 - want to add one more value here so I
87:00 - will just add uh Zed add and I want to
87:03 - add this value to my set one and add the
87:07 - score one and I want to add for example
87:10 - a a a a five times and then press enter
87:14 - and and it returns me one that means the
87:17 - value for this score is now set to a a a
87:21 - a instead of a for example right so let
87:25 - me do Z range once again and you can see
87:29 - here the new uh value is added here
87:33 - which is a a a a right and if you
87:37 - remember the score of a was also one
87:43 - right so let me give the same command
87:46 - now which is Zed score and this time I
87:50 - want to just see the score of of uh a
87:54 - which is one and then I want to see the
87:57 - score of a a a a which is also one so
88:00 - it's totally fine if you give a same
88:02 - score to multiple values right so for
88:07 - example I want to give one more value to
88:11 - this score for example bbbb and then
88:14 - press enter and once again the range I
88:18 - want to see this value is added and then
88:20 - I want to see see the score score of
88:23 - bbbb so
88:25 - bbbb and you can see the score is still
88:28 - one okay so it's totally fine to have uh
88:33 - one score for multiple values now what
88:38 - happens to the rank here so for example
88:41 - red rank for my Set uh one so my set one
88:46 - and then
88:48 - bbbb and the index here is two so so
88:52 - this is how uh sorted set works now
88:54 - there is one more command which is Zed
88:57 - range by
89:00 - score and then you can give the key name
89:05 - and then the score value minimum score
89:07 - for example one and then the maximum
89:10 - score for example I I'm going to give
89:12 - here two right and then press enter and
89:15 - I get here three values because uh there
89:19 - are three values associated ated with
89:22 - the score one and I think there was no
89:25 - score for two right so no value was
89:29 - associated with two so let's see 1 2 4
89:33 - for example and now I can see these
89:36 - values and C also so if you want to get
89:39 - values by the range of scores then you
89:43 - can use Z range by score okay so this is
89:47 - how you can use sorted sets in redis
89:51 - there are some more commands which are
89:53 - associated with sorted set you can just
89:56 - uh search for them and then practice
89:58 - them but these are some of the most
90:01 - frequently used command with the sorted
90:03 - sets hey guys welcome to the next video
90:06 - on red tutorial for beginners in this
90:09 - video we will learn how to use redis
90:11 - publish
90:13 - subscribe so redis publish subscribe
90:16 - implements the messaging system where
90:19 - sender is called the publisher and the
90:24 - receiver is called the
90:26 - subscriber right now in red is a client
90:30 - can subscribe to any number of channels
90:35 - so let me give you an example and let me
90:37 - show you how you can use radis publish
90:41 - subscribe so you can see I have opened
90:45 - three redish CLI terminals in three
90:49 - different terminals right so this is is
90:52 - ready CLI first terminal second terminal
90:54 - and third terminal now first of all I am
90:59 - going to subscribe to a channel so I can
91:02 - just write
91:04 - subscribe here and then it takes a
91:07 - channel name right and I can give any uh
91:12 - channel name for example redis or any
91:16 - other channel name so for example my
91:18 - channel and I can subscribe to this
91:22 - Channel okay so the name depends upon
91:25 - you right so for example I subscribe to
91:29 - the channel called redis and I just uh
91:33 - press enter so now this is or this
91:37 - terminal is subscribed to this Channel
91:42 - right now from the second CLI when I
91:45 - publish some message to this channel so
91:48 - let
91:49 - me publish something so to publish a
91:52 - message you can just use a keyword
91:55 - publish as we have seen in subscribe so
91:59 - to subscribe you use a keyword subscribe
92:02 - and then a channel name for publishing
92:05 - you use a keyword publish and the
92:07 - channel name on which you want to
92:09 - publish right so I want to publish on
92:13 - the reddish Channel and then your uh
92:17 - message for example hi right and I press
92:20 - enter and you can see on the
92:23 - subscriber uh it gets the same message
92:26 - so first of all uh it will uh just show
92:30 - you uh what kind of uh message is coming
92:34 - so it's a message and then on what
92:36 - channel it's coming and what is the
92:38 - message itself right now if you want to
92:42 - send a big message you can just uh
92:46 - enclose your message inside these double
92:49 - codes so for example
92:52 - hello world here and then press enter
92:56 - then it's received here okay now it's
93:01 - possible to subscribe to uh any number
93:06 - of channels right so you can see I'm
93:08 - subscribed to uh redis from one channel
93:12 - now I can uh just copy the same command
93:16 - in the next terminal here and then I'm
93:21 - sub subscribed to this channel so now
93:25 - there are two subscriber subscribed to
93:28 - one red channel so this is the channel
93:32 - and I'm subscribed to that channel right
93:35 - so there are two subscriber for the
93:38 - channel name reddis and when I just send
93:42 - uh hello world again for example
93:45 - now it is received by both the
93:49 - subscribers right so you can can see
93:52 - hello world is received here and hello
93:55 - world is received here okay so this is
93:59 - how uh publish subscribe method work in
94:03 - redis now when you are doing uh or using
94:08 - redis in the programming then uh uh it's
94:12 - really important or it's really useful
94:15 - so for example uh recently I created
94:18 - some kind of API where I wanted to
94:21 - listen for any event for Save in reddish
94:26 - so whatever is saved whenever some
94:29 - command comes and uh something is saved
94:32 - in redis I wanted to subscribe to that
94:36 - save event right and I have used this uh
94:40 - publish
94:41 - subscribe uh method from redis in that
94:45 - API and it worked fine so it's kind of
94:48 - listening to the trigger for example for
94:52 - uh saving the data or some delete
94:55 - deletion of data you can subscribe and
94:59 - then you will get uh this message on the
95:02 - next side which is subscribing and based
95:06 - on that uh subscription you can trigger
95:09 - some event okay now let me just uh close
95:14 - this CLI and once again uh open the ca
95:17 - once again and let me clear the terminal
95:19 - once again and there is command called P
95:22 - subscribe so you can do p subscribe and
95:25 - then it takes the pattern so for example
95:29 - I can just write R and then estx R estx
95:33 - here means any uh publisher when it's
95:37 - published on the channel name which
95:39 - start with r it will receive that
95:42 - message so for example uh I publishing
95:46 - uh this publish redis because this
95:50 - pattern matches this pattern so estx is
95:54 - some kind of a wild card here so uh it's
95:58 - whatever so for example I'm subscribing
96:00 - to R srix and I'm just publishing the
96:03 - same message again and you can see uh
96:06 - it's receiving that message because it's
96:09 - uh just matching the pattern whatever
96:12 - publisher publishes on the pattern which
96:17 - matches RS Trix for example R and
96:20 - whatever comes after R uh this is
96:24 - matching that pattern so it will receive
96:28 - that uh message for example I can uh
96:31 - just do something like this so I publish
96:34 - on uh RX for example this also matches
96:38 - this pattern right because we just want
96:41 - to uh match the first uh letter of that
96:46 - uh Channel and whatever comes after that
96:49 - it will be matched automatically so this
96:51 - is kind of a pattern matching in Radice
96:55 - so P subscribe is used to pattern
96:58 - matching and whatever uh publisher uh
97:02 - Channel matches that pattern it will be
97:06 - uh receiving that message so you can see
97:09 - this is receiving that message but this
97:11 - CLI is not receiving so because we have
97:14 - subscribed to a concrete uh channel here
97:18 - which is not a pattern so whenever we uh
97:23 - just give the redish channel itself then
97:27 - only it will receive the message and
97:29 - this automatically receives the message
97:32 - because here we are just matching the
97:35 - pattern okay so in this way you can use
97:38 - publish subscribe in redis I hope you
97:40 - have enjoyed this video