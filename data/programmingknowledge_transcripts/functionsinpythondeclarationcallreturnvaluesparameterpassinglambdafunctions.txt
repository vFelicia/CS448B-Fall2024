00:00 - in this video I'm going to show you what
00:02 - is a function in Python and how to use
00:04 - functions in Python so first of all what
00:08 - is a function so a function is a group
00:10 - of statements within a program that
00:14 - performs a specific task now functions
00:17 - can be of two types one is built-in
00:20 - function and other is user-defined
00:23 - function built-in function we have
00:26 - already seen that print is a built-in
00:28 - function or for example input is a
00:31 - built-in function or for example min is
00:34 - a built-in function and so on
00:37 - now usually function does one task at a
00:40 - time so you can see this print function
00:43 - only prints something whatever input you
00:46 - give here is going to print it input
00:49 - function takes some input from the user
00:52 - main function finds out the minimum out
00:54 - of some values so a particular function
00:58 - do one task at a time now let's see how
01:02 - we can define a function so to define a
01:05 - function you use a keyword de F and then
01:09 - you give the name of the function so
01:11 - name of function and after the name of
01:15 - the function you give these parentheses
01:17 - and you provide number of arguments or
01:21 - parameters so for example Arg 1 comma
01:26 - Arg 2 comma Arg 3 and so on so you can
01:32 - give any number of arguments to your
01:35 - function now after this ending
01:39 - parenthesis you give this colon and then
01:42 - under this function signature you write
01:46 - some statements which you want to
01:49 - execute when this function is called so
01:52 - for example if you want to print
01:53 - something you can print something or if
01:56 - you want to calculate something for
01:58 - example the product of two or three
02:01 - variables or a sum of two or three
02:04 - variables you can do under this function
02:07 - declaration so let's take an example of
02:10 - function and let's see how we can define
02:13 - real life function so I'm going to
02:16 - define a very simple function which is
02:19 - going to add two values so I'm going to
02:22 - name it as sum and for example it takes
02:26 - two values one is let's say Arg 1 and
02:29 - other is Arg 2 and then after the colon
02:34 - I want to add these two values so I can
02:37 - just write print here and then I can
02:41 - write R 1 plus R 2 so this is a very
02:46 - simple function which takes two
02:48 - arguments and then add these two
02:51 - arguments and print them so this is how
02:55 - you declare a user-defined function now
02:58 - after declaring a function you need to
03:01 - also call this function so in order to
03:04 - call the function you just use the name
03:07 - of the function and then you provide the
03:09 - arguments which is required by the
03:11 - function so our function requires two
03:14 - argument right now R 1 and R 2 so we are
03:17 - going to provide these two values let's
03:20 - say I want to provide 15 as the argument
03:24 - 1 and I will provide 60 as the second
03:27 - value now let's run the code and let's
03:30 - see what happens so when we run the code
03:32 - you can see our function prints 75 which
03:37 - is the sum of these two values which we
03:40 - have provided as an argument to this
03:44 - function now also if you remember this
03:47 - plus operator you can also use to
03:50 - concatenate two strings so I can use
03:54 - this sum function and this time I'm
03:56 - going to provide for example hello as
04:00 - the first parameter and then world as
04:03 - the second parameter and then I'm going
04:07 - to run the program and it's going to
04:09 - print hello world in addition we can
04:11 - provide to float numbers here for
04:14 - example I will provide 15 point 6 4 7
04:17 - and the second argument I'm going to
04:19 - provide is 80 point 2 5 8 and this is
04:23 - also allowed so I'm going to just run
04:26 - this code
04:27 - and it gives us the sum of these two
04:30 - values so this function sum is doing one
04:33 - single task which is to add two values
04:37 - whether it's a string or it's a number
04:41 - or it's a float value now you may also
04:44 - observe that when I provide for example
04:48 - as a first argument I will provide a
04:50 - string and as a second argument I will
04:53 - provide a number here will this work
04:56 - let's see so it's going to give us an
05:00 - error and this error says can't convert
05:03 - into object to string implicitly
05:06 - so this is a problem so to solve this
05:09 - problem we can provide here a simple
05:11 - condition and we are going to check the
05:14 - type of both the arguments so if type
05:17 - Arg 1 is not equal to type R 2 this
05:26 - should be Arg of 1 not easier 1 so let
05:30 - me just change this here and if the type
05:34 - of R 1 is not equal to R 2 we are going
05:38 - to just use this keyword which is return
05:42 - so this return keyword is used to return
05:46 - something so you can return for example
05:49 - 0 here or any string here and when you
05:52 - write this return function without and
05:54 - the value here it's going to return
05:58 - nothing but as soon as this return
06:00 - keyword is called nothing after that
06:04 - will be executed so even though you are
06:06 - returning nothing from here then also
06:08 - this statement will not be executed so
06:11 - whenever return is executed after that
06:15 - all the statements which are under the
06:17 - return will not be executed also we can
06:21 - print a message here that please give
06:24 - the args of same type okay and let's run
06:28 - the code now and you can see now it
06:32 - prints this message which says please
06:35 - give odds of same type so if these
06:39 - arguments are not of
06:41 - type whether it's integer or a string or
06:44 - a float value if the user provides first
06:48 - argument which is a string type and the
06:50 - second argument which is integer type
06:53 - then this condition will be true and
06:57 - this statement will be executed which is
07:00 - going to print this message and then
07:03 - return is called
07:04 - and after this whatever statements are
07:07 - there will not be executed so now as I
07:10 - said you can also return some values
07:12 - from a function and here when you don't
07:15 - give any values after this return
07:18 - keyword it's good not going to return
07:20 - anything but let's return the addition
07:24 - of two arguments using our return
07:27 - keyword so I'm going to use this return
07:30 - keyword here which is going to return
07:33 - the addition of these two values using
07:36 - this sum function so now what will
07:40 - happen is let's run the code once again
07:42 - and you can see this sum is executed
07:45 - this sum is executed this sum is
07:47 - executed but the result is not printed
07:50 - so in order to get the result out of
07:53 - this function when it returns something
07:56 - we need to save this return value in a
08:00 - variable so let's save this value into a
08:03 - variable and then you can use this
08:06 - variable to print the value of the sum
08:09 - so I can do something like this
08:12 - also you can directly and close this sum
08:16 - function inside a print function and
08:19 - then also it's going to print the sum of
08:23 - these two strings so either you can
08:26 - assign the result of this sum function
08:30 - which is returning the result into a
08:32 - variable or you can use directly this
08:36 - print function to get the result and
08:37 - print it so I'm going to use print with
08:41 - other two functions also
08:44 - so first print and the second print here
08:48 - and let's run the code once again and
08:52 - now you can see what
08:55 - happens so first of all it prints 75
08:59 - which is the addition of these two
09:00 - numbers which is returned by this sum
09:03 - function into a variable a and we are
09:07 - printing the sum using this print
09:10 - function here in the next result it
09:13 - prints hello world because this sum
09:16 - function now returns the concatenation
09:18 - of these two strings
09:20 - similarly this sum function is going to
09:22 - return the sum of these two float values
09:24 - and in the last result because the type
09:29 - of Hello is not equal to the type of 15
09:32 - then this message is printed because
09:35 - this condition is true in the last case
09:39 - and then return will be called and when
09:42 - this return is called we were printing
09:45 - whatever is returned from the sum
09:48 - function and you can see at last none is
09:51 - printed because at last this sum
09:54 - function is returning nothing because
09:57 - the type of these two arguments is not
10:00 - same so we were returning without any
10:02 - value and that's why none is printed
10:06 - here now there are few things to note
10:08 - here okay so the first thing is you can
10:12 - define a function using DEF keyword and
10:15 - then the name of the function and under
10:18 - these parentheses you provide the
10:21 - arguments so these two are called
10:24 - arguments so this is argument 1 and this
10:27 - is an argument 2 also you can use
10:30 - alternatively the name parameters for
10:33 - these two arguments so this is a
10:35 - parameter 1 and this is a parameter 2
10:38 - now it's possible to return from a
10:40 - function like you can return the
10:42 - addition of two values or it's also
10:45 - possible to return nothing from a
10:48 - function so when you use return without
10:51 - a value it's not going to return
10:53 - anything now when you use this function
10:55 - somewhere it's called calling a function
10:59 - now at last let's discuss about some of
11:03 - the benefits of using functions so the
11:06 - first benefit is function makes
11:09 - your code simpler because if you don't
11:12 - use function to execute this kind of
11:16 - code then you need to write this code
11:20 - again and again whenever you want to use
11:23 - this functionality at different places
11:26 - the second advantage is function makes
11:29 - your code reusable so the same code is
11:33 - used to add two integer values to
11:36 - concatenate two string
11:38 - to add two float values and it's also
11:42 - used to give the error if you provide
11:45 - the arguments of different types so that
11:48 - means you write the code once and use it
11:52 - multiple times and that results in
11:55 - faster development of the code so if you
11:59 - use a function you can develop your code
12:02 - much faster than if you don't use a
12:05 - function and the last but not the least
12:07 - advantage is when you declare functions
12:10 - you can test and debug your code in a
12:14 - better way so this is how you can
12:16 - declare and use functions in Python we
12:19 - will discuss some more properties which
12:21 - are related to functions in Python so
12:24 - let's get started so to start with I
12:27 - have a function called student which
12:30 - takes two arguments one is name and
12:32 - other is age and inside the function we
12:35 - just simply print the value of name and
12:39 - age using the print function and when we
12:42 - call this function with the name and age
12:46 - it's going to print this kind of output
12:49 - now Python allows us to set the default
12:53 - value of the arguments so after this
12:55 - name you can put equals to symbol and
12:59 - then put the default value whatever you
13:02 - want to set for the name for example if
13:05 - somebody doesn't provide any name then
13:09 - you can just say unknown name similarly
13:13 - we can set the default age here let's
13:16 - say default age is zero if somebody
13:18 - doesn't provide any age
13:21 - with the student function then the
13:24 - default value will be zero now instead
13:28 - of using this student function like this
13:31 - let's say I don't provide any argument
13:35 - to this student function and let's run
13:39 - the code and you can see if I don't
13:42 - provide any argument to this student
13:44 - function the default values are taken so
13:47 - the default values are used when you
13:50 - want to make sure that every argument in
13:53 - your function should have some value now
13:58 - let's say I just provide a name here and
14:01 - don't provide the age and let's run the
14:05 - program and now you can see the name is
14:09 - overwritten by the argument what we have
14:12 - provided here right so default value
14:15 - will be this one if no argument is
14:19 - provided similarly if we give the value
14:22 - of age and now we run the program the
14:26 - default age is replaced by the age which
14:29 - is provided using the arguments so this
14:32 - is how you can use default values with
14:35 - the arguments of the function so let me
14:38 - just remove these two default values and
14:41 - I'm going to give you the next example
14:44 - which is variable length arguments so
14:48 - let's say with the name and age I want
14:51 - to provide the list of scores which this
14:55 - student has scored for different
14:58 - subjects so as a third argument I'm
15:00 - going to provide argument called marks
15:04 - and somehow I want to provide a list of
15:08 - marks which is scored by this student
15:11 - and let me print the value of marks
15:15 - using this print function also now in
15:19 - Python you can use Asterix in front of
15:22 - your argument and this means that you
15:25 - can provide multiple arguments when you
15:27 - use this kind of notation so let's just
15:31 - provide for example we already provided
15:34 - the
15:35 - name and age here and let's provide
15:36 - different marks scored by this student
15:39 - so I can provide 95 for first subject
15:42 - than 70 for second subject than 80 for
15:46 - next subject than 50 for next subject
15:49 - and let's say we don't know how many
15:51 - subjects the student has taken we just
15:54 - have only the information about these
15:57 - four subjects which he has taken so we
16:02 - can provide the four values here and
16:04 - then let's run the code and now you can
16:08 - see name is Tom age is 22 and the value
16:12 - of marks is shown as a tuple okay so
16:17 - whenever you provide this Asterix in
16:19 - front of an argument you can provide the
16:22 - values for that argument using normal
16:25 - argument as you provide for normal
16:27 - argument so first two variables are
16:29 - associated with name and age and all the
16:32 - other variables which you provide here
16:35 - will be assigned to this marks variable
16:38 - because it has this asterisk in front of
16:41 - it so now you can also use a for loop in
16:45 - order to iterate over tuples so X in
16:49 - marks for example and then you can print
16:53 - every value or you can access every
16:56 - value inside this tuple and let me
16:59 - comment this print function and let's
17:02 - run the code once again and you can see
17:04 - for loop has printed all these marks
17:08 - which are there inside the list now if
17:11 - you want to use this type of variable
17:13 - length argument then I will suggest you
17:15 - to use this argument as the last
17:18 - argument of your function so that it
17:20 - will be clearer to the reader of the
17:22 - function that whatever you provide at
17:25 - the end will be the part of this last
17:28 - argument now you may ask that we have
17:31 - provided these marks for this student
17:35 - but for which subject these marks are
17:38 - given to the student now in Python you
17:41 - can also use double as tricks in front
17:44 - of your function argument and this means
17:47 - that now you
17:48 - can provide the key value pairs as a
17:51 - marks arguments so instead of using 95 I
17:56 - can also say that 95 is code in English
18:01 - let's say and then 70 is code in math
18:06 - and then let's say 80 is scored in
18:09 - physics and the 50 marks is code in
18:14 - biology so now when you use these double
18:18 - asterisks in front of your function
18:20 - argument you can provide these kind of
18:23 - key value pairs which are separated by
18:26 - this equal to symbol and how you can
18:29 - access these values so let's run the
18:31 - code and let's see what happens and now
18:33 - you can see only keys are printed and
18:35 - not the values of these subjects are
18:39 - printed so let's first uncomment this
18:42 - print function and let's see what type
18:46 - of value we are getting so whenever you
18:48 - use these double asterisks the values
18:51 - are given to you in the form of a
18:53 - dictionary okay so if you use single
18:57 - asterisks the values are given to you in
19:00 - the form of tupple but whenever you use
19:02 - these double asterisks and whenever you
19:04 - try to access this variable then this
19:07 - variable will be of type dictionary and
19:11 - you already know how to print the values
19:14 - of dictionary so you can just write
19:17 - marks dot a terms here and then here you
19:21 - can just write key comma value and then
19:26 - you can print the value of E and value
19:29 - so I'm going to just print key first of
19:31 - all and then I'm going to just give a
19:33 - space here and then I'm going to print
19:36 - the value right and now when we run the
19:40 - code it will give me first of all the
19:43 - key for example English math physics or
19:46 - biology and the value which is 95 70 80
19:51 - or 50 how to use lambda functions in
19:54 - Python in addition I'm going to show you
19:57 - how to use lambda functions with
20:00 - functions like map
20:01 - reduce and filter so let's get started
20:06 - so as we all know that python is a
20:09 - multi-paradigm language and it also
20:12 - supports functional programming and the
20:16 - lambda functions falls into functional
20:19 - programming paradigm so what are lambda
20:22 - functions and how to use lambda
20:24 - functions so lambda functions in Python
20:28 - are also called
20:29 - anonymous functions because they don't
20:32 - have any name sometimes they are also
20:36 - called one-line functions because they
20:39 - can be written in a single line of code
20:43 - so let's see how we can define a lambda
20:46 - function so as you can see here I have
20:49 - three normal function defined here one
20:52 - is the double functions which doubles
20:55 - whatever arguments you provide here
20:57 - second is a simple addition function and
21:00 - third function is the function which
21:02 - takes three arguments and provide the
21:05 - product of the three argument which are
21:08 - provided so let's see how we can convert
21:11 - these three functions into the lambda
21:14 - functions so the first function which we
21:16 - have is that double function so I'm
21:18 - going to once again write double as a
21:21 - variable and then I can use a special
21:24 - keyword called lambda to create a lambda
21:27 - function so as you can see here this
21:29 - double takes one argument which is X so
21:33 - to provide an argument in the lambda
21:35 - function you just write the name of the
21:38 - argument and then after the colon you
21:42 - write the body of the function so in our
21:46 - case this double function have this body
21:50 - which is return x x 2 so in lambda
21:55 - function if you want to return some
21:57 - value you don't need to use this return
22:01 - keyword you can directly write x x 2
22:06 - here so this lambda function is
22:09 - equivalent to this double function which
22:13 - is a normal function
22:15 - this w function takes one argument which
22:17 - is X which we are providing here and it
22:20 - returns the multiplication of X by two
22:23 - which we are writing after the Kulin now
22:28 - let's write the add a function using
22:31 - lambda function so I'm going to once
22:33 - again declare a variable called add and
22:37 - once again used lambda and this time
22:40 - this add takes two arguments so I can
22:44 - provide multiple arguments in lambda
22:47 - functions by comma as you do with the
22:50 - normal function so I will provide two
22:52 - arguments and then after the colon you
22:54 - just write whatever you want to return
22:58 - so we want to return X plus y so we can
23:01 - simply write x plus y here and that's it
23:05 - so in a single line we can define the
23:08 - lambda function now the third function
23:11 - we want to provide here is the product
23:14 - function so I will declare a variable
23:16 - product and this time I just need to
23:18 - provide three arguments using the comma
23:21 - separator and after the colon I just
23:25 - provide the multiplication of these
23:28 - three values which is X multiplied by Y
23:32 - multiplied by said
23:34 - so all these three normal functions is
23:37 - equivalent to these lambda functions so
23:41 - I'm going to just comment these three
23:42 - functions out by pressing ctrl + forward
23:45 - slash and now let's see how to use these
23:48 - lambda functions so you create a lambda
23:51 - function and then assign the result into
23:55 - some variable and then you use these
23:57 - variable as you use the normal functions
24:00 - so I'm going to just use print to call
24:03 - the double variable and then using the
24:07 - parentheses I just provide the argument
24:10 - which this lambda function takes so this
24:13 - lambda function takes one argument which
24:15 - is X so I can provide the value of x
24:18 - here so let's say I want to provide 10
24:21 - as the value of x same I will do with
24:24 - the add a function and the product
24:27 - function
24:28 - so add a function takes two argument and
24:31 - the product function takes three
24:34 - argument so I can simply write these
24:37 - functions like this like a normal
24:39 - function and then I can just run my
24:41 - script and you will see it's going to
24:44 - give us the same result
24:46 - as the normal function gives us so the
24:50 - first is the double of ten second is the
24:54 - addition of these two numbers
24:55 - and third is the product of these three
24:57 - numbers now you might ask a question
25:00 - that these functions which we have
25:03 - defined normally we can also define
25:05 - these function in a single line because
25:08 - there is not much logic inside these
25:12 - functions so we can declare these
25:14 - functions like this and they are also
25:17 - the single line functions so why do we
25:21 - use lambda functions so the lambda
25:24 - functions are generally used with the
25:27 - functions which takes function as an
25:30 - argument or returns function as the
25:35 - result so in functional programming
25:37 - functions are the first-class citizens
25:40 - that means we can pass the functions as
25:44 - the normal argument so as you can see
25:47 - here we have passed some static or
25:50 - constant value as an argument here but
25:53 - we can also pass the functions as an
25:56 - arguments and in addition you can also
26:00 - return a function from a function so
26:04 - instead of this multiplication you can
26:07 - create a function and return from a
26:10 - function and that's where these lambda
26:13 - functions are useful so let me give you
26:17 - some examples of where you can use
26:20 - lambda functions so as I said you can
26:23 - use lambda functions with the functions
26:26 - like filter reduce and map so let me
26:30 - illustrate how these functions work so
26:33 - I'm going to declare a list of some
26:36 - numbers so now I have created a list
26:38 - which have these six LM
26:41 - now let's see how to use a map function
26:44 - with a lambda function so there is an
26:46 - inbuilt function called map in Python
26:49 - which takes two argument one is a
26:52 - function and second is an iterative area
26:57 - below and we all know that collections
27:00 - like lists or tuples or the dictionaries
27:04 - are all iterative collections so we can
27:09 - use map keyword and then here we can
27:12 - define a lambda function so let's say I
27:14 - want to double each and every element of
27:17 - this list so I can define a function
27:20 - which takes one argument X and then we
27:25 - are going to return that double of this
27:28 - value so this is the function which we
27:30 - have passed to this map function because
27:33 - the first argument which map expects is
27:36 - the function the second is the iterate
27:41 - able collection so we are going to pass
27:43 - this list as the second value let me
27:46 - define let's say my list here so it will
27:50 - be more clearer so I'm going to just
27:53 - pass this my list as the second variable
27:57 - so what this map function is going to do
27:59 - is it's going to apply this lambda
28:02 - function to each and every element of
28:05 - this list which is basically going to
28:09 - double the value of each and every
28:11 - element of the list now let's assign the
28:14 - result of this map function into our
28:17 - variable so I am going to assign the
28:19 - result into some variable and then I am
28:22 - going to print the result first of all
28:25 - so this variable contains the map
28:29 - function so let's see first of all what
28:32 - is the result and then I'm going to show
28:34 - you how to get the result which we are
28:37 - expecting so you can see here whenever
28:38 - you want to print the value of map it's
28:42 - going to just give you this kind of
28:45 - result so how we can get the list out of
28:49 - this map value in order to get the list
28:54 - out of this
28:55 - value you need to cast this value into a
28:59 - list and how to convert this value into
29:02 - a list you use a list function and then
29:05 - pass the result of the map function as
29:09 - an argument of this list function let's
29:12 - run the program once again and you will
29:15 - see now that the result is a list and in
29:20 - the result every element of the list is
29:23 - doubled so basically what this map
29:26 - function has done is it has applied this
29:30 - function to each and every value of the
29:34 - list and this function just doubles each
29:38 - and every value of the list now you
29:40 - might say that this is a very simple
29:42 - function which we are applying to the
29:45 - list so let's make things little bit
29:48 - complex and let's say now I have two
29:52 - lists one is my list 1 and other is my
29:56 - list too and this other list contains
30:00 - some other set of elements so let me
30:03 - just change the values which this second
30:07 - list contains and let's say using this
30:09 - map function I want to add each and
30:13 - every element of these two lists and
30:16 - create a third list with the addition of
30:20 - let's say 2 + 1 + 5 + 4 8 + 7 10 and 8
30:26 - like this so how can I create a map
30:29 - function to achieve this so let's say
30:33 - this is a variable B and here inside the
30:37 - lambda function we gave the second
30:39 - argument which is Y so it takes two
30:42 - argument and then it adds the value of x
30:47 - + y so we can do like this and then as
30:50 - the second argument we are passing the
30:52 - first list and also as the third
30:55 - argument you can pass the second list
30:59 - here so now what this map function is
31:01 - going to do is it's going to take the
31:03 - first element of the first list and the
31:06 - first element of the second list
31:09 - and then it's going to apply this
31:11 - function to the first elements of both
31:14 - these lists which is to add these two
31:17 - numbers so let's see what is the result
31:20 - which we get using this map function so
31:23 - I'm going to just convert the answer or
31:26 - the result into a list and then I'm
31:29 - going to just pass this B variable as an
31:31 - argument of this list and then we are
31:33 - just printing the results so let's run
31:35 - the code and let's see what happens so
31:37 - you can see we get the list which adds
31:40 - the value of these two lists and creates
31:44 - a new list so you can see 2 plus 1 is 3
31:46 - here 5 plus 4 is 9 then 8 plus 7 is 15
31:52 - and so on so this is how you can use
31:55 - lambda functions with map function now
31:58 - let's see how to use a filter function
32:01 - so I'm going to use this special
32:02 - function which is called filter and this
32:05 - filter functions takes two argument but
32:09 - what is special about this filter
32:11 - function is it takes a function as the
32:13 - first argument which gives us a boolean
32:17 - result so instead of adding two numbers
32:20 - and returning this filter function is
32:22 - expecting a function which gives us the
32:25 - boolean result so let me minimize this
32:28 - so let's say we want to filter the even
32:31 - values from this list so how we can
32:34 - achieve this using the filter function
32:37 - so as I said this takes a function as
32:40 - the first argument so you can use lambda
32:42 - and how to find out the even values you
32:46 - pass an argument and then you return X
32:48 - modulo 2 is equal to 0 so this X modulo
32:53 - 2 is going to give us 0 whenever the
32:57 - number is even otherwise is going to
33:00 - give us 1 so this is the first argument
33:02 - and the second argument we can pass here
33:04 - is this for example the first list here
33:07 - and now I'm going to assign the result
33:11 - into a variable and let's print the
33:14 - value of C now using the list function
33:18 - so list and as an argument I'm going to
33:20 - pass C here
33:22 - let's run the code and let's see what's
33:24 - the result and you can see you just get
33:27 - the even values filtered out from this
33:31 - first list which is two eight and ten
33:35 - now let me give you one more example of
33:38 - filter so let's say you want to filter
33:41 - out from the second list which values
33:44 - are greater than five so all the values
33:47 - which are greater than five we want to
33:50 - filter out so we will pass X as an
33:53 - argument and let's say this is the D
33:56 - variable so this lambda function takes X
33:58 - as an argument it's going to return true
34:01 - so let me just write the syntax here so
34:05 - it's going to return true if the value
34:08 - of x is greater than five else it's
34:12 - going to return the false so else we can
34:15 - just write false here so if you want to
34:18 - write if an else condition inside alarm
34:21 - the function you write something like
34:24 - this so this is the syntax of if and
34:27 - else so if the value of x is greater
34:30 - than five it's going to return true
34:32 - otherwise it's going to return false so
34:36 - let's run this code and let's see what
34:38 - happens let me just replace the C by D
34:40 - and I'm going to run this file and you
34:44 - will see the result here so in this list
34:48 - you will see eight ten and nine are
34:51 - greater than five that's why we got this
34:55 - result if we write here greater than and
34:58 - equal to and once again run the code
35:01 - it's going to give us four values
35:03 - including five here so this is how you
35:06 - can use filter function with the lambda
35:09 - functions now let's see how we can use
35:12 - one more function which is called the
35:15 - reduced function so in order to use the
35:18 - reduce function we need to import a
35:21 - special module which is Fung tool so
35:25 - let's import this module and this module
35:27 - is called func tools so we are going to
35:31 - write from func tool import reduce so
35:34 - what we are basically saying
35:36 - we need a reduced function from this fun
35:40 - tool module and now you can use a
35:44 - reduced function so I'm going to declare
35:46 - a variable E and then I can use this
35:49 - reduced function which also takes two
35:52 - argument one is the function and other
35:55 - is the iterative collection so let's
35:58 - define a function first of all which is
36:00 - the lambda function and this lambda
36:02 - function is going to take let's say two
36:04 - values x and y and what it's going to
36:08 - return is the sum of X plus y here now
36:12 - as the second argument I'm going to pass
36:14 - my list variable here so what a reduce
36:17 - function does is it takes first two
36:20 - element of the list and then apply the
36:23 - function which you have written here
36:25 - which is going to add first two element
36:29 - and then it's going to store the result
36:31 - in X variable and take next element into
36:34 - the Y variable so seven plus y is going
36:38 - to give us whatever result and once
36:40 - again it's going to apply the result and
36:42 - then going to add the next number to the
36:46 - result so let's see what result we get
36:49 - using this reduced function so I'm going
36:52 - to once again use print and then we can
36:54 - directly print the value of the reduced
36:58 - function which is e so let's run this
37:00 - code once again and you will see this
37:03 - result which is 37 now 37 is the sum of
37:08 - all these elements inside this my list
37:12 - so let me explain you once again what
37:14 - this reduced function is doing so first
37:17 - of all because we are passing two
37:20 - arguments here in the lambda function
37:22 - it's going to take first two element of
37:25 - your collection which is two and five
37:27 - and then apply this code or statement to
37:31 - these two elements which is two plus
37:34 - five and we will get seven as the result
37:38 - now once again it's going to take seven
37:40 - as the first argument which is the sum
37:42 - of these two numbers and eight as the
37:45 - second argument which is why here and
37:48 - then apply
37:50 - this logic once again to seven and eight
37:53 - which gives us 15 and once again this 15
37:57 - will be passed as X and 10 will be
38:01 - passed as Y and once again the addition
38:04 - of 15 and 10 will happen which will make
38:07 - it 25 and so on so this is how you can
38:10 - use lambda functions in Python and this
38:14 - is how you can use lambda functions with
38:17 - map filter and reduce functions so I
38:21 - hope you have enjoyed this video and I
38:23 - will see you in the next video