00:00 - hey guys welcome to the next video on
00:01 - Python thread tutorials for beginners in
00:04 - the last video I have given you a brief
00:06 - introduction about threads and threads
00:09 - in Python in this video we will discuss
00:12 - about a module called thread module now
00:16 - if you remember in the last video I have
00:19 - told you that thread module is
00:22 - considered as deprecated in Python 3 but
00:27 - if we want to use thread module in
00:29 - Python 3
00:30 - we can still use thread module using
00:34 - module called underscore thread and this
00:38 - is for backward compatibility so I just
00:42 - want to give you a brief demo about
00:45 - thread module in Python 3 so you will
00:48 - have some idea about thread module in
00:51 - Python 3 so let's get started so first
00:54 - of all in order to use thread module you
00:58 - need to import it and then generally you
01:02 - will write thread but in order to use
01:05 - the thread module in Python 3 you need
01:08 - to use the underscore thread here okay
01:11 - so thread module is not directly
01:14 - available but it's available using this
01:17 - underscore thread module and for
01:20 - printing and giving some delay to our
01:24 - functions we are going to import a
01:27 - module called time now using thread
01:30 - module it's possible to use functions in
01:33 - separate threads so we are going to
01:36 - create a function and then we are going
01:39 - to execute this function in separate
01:42 - threads so let's define our functions
01:45 - and I'm going to name my function as
01:47 - print underscore epoch and if you don't
01:51 - know what is a pape it pork is the start
01:55 - of January 1st 1970 and we are going to
02:00 - try to print the number of seconds from
02:04 - apoc till now and inside this function
02:07 - we are going to provide two arguments
02:10 - first is the name of
02:13 - you're a thread so I'm going to just
02:16 - write name of thread and the second
02:21 - argument we are going to give is the
02:23 - delay okay so this is your custom
02:27 - function you can provide any name here
02:30 - and any number of arguments here and now
02:34 - inside this function first of all I'm
02:35 - going to create a counter so I'm going
02:39 - to just write count and I'm going to
02:42 - initialize this count with zero now
02:45 - inside this function what I'm going to
02:47 - do is I'm going to loop around and
02:50 - inside the loop I'm going to provide
02:53 - some delay so we will be able to see the
02:56 - thread execution so let me just provide
02:59 - the while loop here and we are going to
03:03 - just check whether this count is less
03:06 - than three and inside this while loop we
03:08 - are going to sleep for some time using
03:10 - that time module so I'm going to just
03:14 - write time dot sleep and we are going to
03:18 - just pass this delay argument inside
03:20 - this sleep function so I'm going to just
03:22 - write delay here which will be the delay
03:26 - in seconds so for example if I provide
03:29 - the delay of 1 then our while loop will
03:33 - sleep for one second now after this we
03:36 - are going to increment our counter so
03:39 - I'm going to just write count and then
03:41 - plus equals 1 which is going to
03:44 - increment the value of counter by 1 now
03:47 - after this in order to see whether our
03:50 - thread is working or not we are going to
03:53 - print something so let's print something
03:56 - using the print function so what we want
03:59 - to print so let's say we want to print
04:01 - the name of the thread whatever name we
04:04 - will provide for the thread and then I'm
04:08 - going to just give some indicator here
04:12 - let's say this is some line and then we
04:15 - are going to print that time since
04:17 - Apoc so in order to print time since
04:20 - epoch we will use this time module and
04:23 - then we just need to use the time for
04:27 - inside the time module so using this
04:29 - print function we will know which thread
04:32 - is executed and at what time it's
04:36 - executed so now we have our function and
04:39 - now this function we want to execute
04:42 - inside the thread so in order to execute
04:45 - this function inside the thread first of
04:47 - all I'm going to use this thread module
04:49 - and there is a special function inside
04:52 - this thread module which is called a
04:55 - start new thread function so I'm going
04:57 - to use that function so let's just call
05:01 - this function which is start and discord
05:03 - new underscore thread now if you hover
05:06 - over this function and when I press ctrl
05:10 - on Windows or command on Mac and then I
05:13 - hover over this function you will be
05:16 - able to see the signature for this
05:19 - function so this function takes three
05:21 - arguments 1st argument is the function
05:24 - which we want to execute inside the
05:26 - thread second argument is args which we
05:30 - provide to our function as tuples so 2nd
05:34 - argument we need to provide as tuples
05:36 - and inside this tuple we will provide
05:39 - the number of argument which we want to
05:41 - provide to our function and third
05:44 - argument is that kW adds option and this
05:47 - kwr is an optional dictionary for the
05:51 - keyword arguments so let's provide the
05:54 - function name first of all and our
05:56 - function name which we want to execute
05:58 - is print underscore epoch and you need
06:02 - to remember that you need to provide
06:04 - this function name without any
06:06 - parentheses
06:07 - okay so just provide the function name
06:10 - as the first argument second is the
06:14 - number of arguments so we have provided
06:17 - two arguments for this print a pop
06:19 - function so we need to give these two
06:22 - argument in the form of tuples so first
06:25 - argument let's say is the name of the
06:28 - thread so we are going to just say that
06:30 - this is the thread 1 which will be the
06:34 - name of this thread and the second
06:36 - argument is the delay in seconds so
06:39 - let's say I want to provide
06:41 - 1 second delay in the while loop so it
06:45 - will sleep for one second
06:47 - this delay we are providing in order to
06:50 - see the thread execution because thread
06:53 - execution is so fast that it will be
06:55 - difficult to see the execution of
06:57 - threads without this delay now I told
07:01 - you that the third argument is the
07:03 - optional argument so we will not provide
07:05 - the third argument to the start new
07:08 - thread so this statement is going to
07:10 - create a new thread and it's going to
07:13 - execute this function inside this new
07:16 - thread so till now we only have one
07:18 - thread so let's create the second thread
07:20 - and to create the second thread you need
07:22 - to repeat this function which is start
07:25 - new thread and then you need to give the
07:28 - name to your thread so I'm going to give
07:30 - the name thread two and let's just
07:33 - change the delay so here I'm going to
07:35 - provide the delay of 3 second to the
07:38 - thread 2 so now we have created two
07:41 - threads and this function will be
07:44 - executed in both the threads so let's
07:47 - see if this code works or not so I'm
07:50 - going to just run the script and you
07:53 - will see as soon as I run the script it
07:55 - exits without printing anything and this
07:59 - is because thread takes some time to be
08:02 - created and we need to wait for the
08:05 - thread creation so we need to provide
08:08 - some mechanism to wait for the thread
08:11 - creation and this wait we can provide in
08:14 - two ways one is we can just provide the
08:18 - blank input function which waits for the
08:20 - input
08:21 - so using this input function we will
08:23 - wait for some time until these threads
08:26 - are created and now we will see if this
08:30 - works or not so let's run this script
08:32 - once again and let's see what happens
08:34 - so you can see now you will be able to
08:37 - see these print statements and you will
08:40 - see that first of all thread 1 is
08:43 - executed and then thread 1 is executed
08:46 - once again because we have provided only
08:49 - one second delay between the loop inside
08:53 - this thread so
08:55 - thread one will be executed faster than
08:57 - thread two so first of all thread one is
09:00 - executed and the o'clock time is printed
09:03 - and once again this thread one is
09:05 - executed because the delay time is less
09:08 - and then thread two is executed and the
09:11 - Epoque time is printed here and then
09:13 - thread one is executed once again and at
09:16 - the end you will see that thread two is
09:18 - executed two times because you can see
09:21 - that here we have the counter limit
09:24 - which is less than three so let's try to
09:27 - increase this limit to five and let's
09:29 - see how many times this print statement
09:32 - is printed so let's run the program once
09:36 - again and let's see what happens so once
09:38 - again this thread one is executed two
09:42 - times and then thread two and then
09:44 - thread one is executed three times once
09:47 - again and then tried to comes and you
09:49 - can see rest of the threads are executed
09:52 - then so here you can see thread one is
09:55 - executed one two three four five times
09:58 - and thread two is executed also five
10:01 - times so in this way you can start
10:03 - multiple threads and execute different
10:06 - functions inside those threads now I
10:10 - told you there is another way of waiting
10:13 - and this is by providing the while loop
10:17 - so I'm going to just provide wild one
10:20 - and inside this while loop I'm going to
10:23 - wait forever so I'm going to just say
10:27 - pass and this is an infinite loop which
10:30 - is like waiting so I'm going to just
10:33 - close this script first of all and then
10:37 - run the script once again and then you
10:40 - will see the same effect which you have
10:42 - seen in the case of input function also
10:45 - now here one more thing to consider is
10:48 - the return of this function so if this
10:52 - function which you want to execute
10:54 - inside the thread returns successfully
10:57 - the thread will silently exit but when
11:01 - your function terminate unexpectedly
11:03 - then unhandled exception will be thrown
11:06 - and the strike trace
11:09 - of that exception will be printed on the
11:12 - terminal so if this function throws then
11:15 - strike trace will be printed and this
11:18 - will be an unhandled exception so in
11:21 - order to avoid this unhandled exception
11:24 - you can also provide the try catch block
11:27 - here
11:28 - so here you can provide try and then I'm
11:31 - going to provide some space here and
11:33 - here also and after this code I'm going
11:36 - to just write accept and inside the
11:40 - accept you can provide any error so you
11:43 - can print that this is an error so
11:46 - inside this print function you can just
11:48 - write that this is and or anything which
11:53 - you want to write inside this accept
11:56 - block you can write using the print
11:58 - function or whatever you want to do in
12:00 - order to handle this exception you can
12:02 - do inside that accept block so let's run
12:06 - this script once again and let's change
12:08 - the delay here so I'm going to provide
12:10 - the delay of 2 seconds and here I'm
12:13 - going to provide the delay of let's say
12:15 - 4 seconds and let's run the script once
12:18 - again and this script runs and you can
12:22 - see after 2 seconds the thread one print
12:25 - statement is executed and then after 4
12:28 - second thread to print statement is
12:30 - executed and this tried execution you
12:34 - will be able to see in those intervals
12:36 - so this is how you can use thread module
12:39 - in Python 3 I hope you've enjoyed this
12:42 - video and I will see you in the next
12:45 - video