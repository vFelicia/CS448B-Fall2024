00:00 - today we are going to discuss some more
00:03 - interview questions that are related to
00:05 - the C programming language and this is
00:08 - the part four of us the interview
00:10 - question series so let's start first
00:15 - question is what are static variables so
00:21 - the variables that are declared using
00:24 - the keyword static are known as static
00:27 - variables they have a property of
00:31 - preserving their value even after they
00:34 - are out of their scope such variables
00:37 - have this hope restricted to the
00:40 - function in which they are declared let
00:43 - us understand the use of the static
00:45 - variables with the help of an example
00:48 - here we have taken a function whose name
00:52 - is fun
00:52 - it takes no arguments and has integer as
00:56 - a straight old ace in its body we have
01:00 - declared an integer variable count with
01:03 - the keyword static and have initialized
01:06 - it to zero so now count will house all
01:09 - the properties of the static variable in
01:12 - the very next statement we have
01:14 - incremented discount and then we have
01:17 - returned the value of this count
01:19 - now inside the main function there are
01:23 - two printf statements and both are doing
01:26 - that they are calling this function one
01:29 - and at the same time they are printing
01:32 - the value of sound so the output is one
01:37 - - how is this possible
01:40 - various functions one is called for the
01:42 - first time this static int count
01:45 - variable is initialized to zero and its
01:49 - value is incremented so now count will
01:52 - hold one and this one will be printed
01:55 - using this printf statement here now
01:58 - since sound is a static variable so it's
02:02 - value is preserved
02:04 - now when the function one is called for
02:07 - the second time
02:08 - then here the value of counters not
02:11 - again initialize to zero but its
02:13 - previous value is preserved that as one
02:16 - now one is incremented and now the count
02:19 - variable will hold the values new now
02:22 - this new will be printed using this
02:25 - printf statement over here so the output
02:29 - wicket is one and two next question
02:34 - differentiate between the log and the
02:36 - log function in C so as we know that
02:40 - both these functions are used to
02:43 - dynamically allocate the memory in free
02:45 - programming language what is the
02:48 - difference between them first we will
02:50 - take a look at melot melot doesn't
02:53 - initialize the allocated memory
02:55 - thus the memory that is being
02:58 - initialized by Mello holds the garbage
03:00 - value Manoff takes only one argument and
03:04 - battles the size of the memory block to
03:08 - reserve the remedy it's in taxes void
03:12 - astrick Maalox with in parantesis the
03:16 - size of the memory block the next is
03:20 - shell off cannot initializes the
03:23 - allocated memory block to zero so the
03:26 - memory that is initialized by Kelo will
03:29 - hold the value 0 and not the garbage
03:31 - values now it takes two arguments one is
03:35 - the number of the blocks to be allocated
03:37 - and the other is the size of each block
03:41 - if syntax is void asterisk L of the
03:46 - number of the blocks that need to be
03:49 - allocated comma the size of each block
03:53 - next question is differentiate between
03:57 - actual parameters and formal parameter
04:01 - formal parameter or variable and it's
04:04 - tight as they appear in the prototype of
04:07 - the function or method actual parameter
04:11 - the variable or expression corresponding
04:14 - to a formal parameter that appears
04:18 - in the function or metric coil in the
04:21 - coiling environment
04:22 - naigus understand this with the help of
04:25 - an example here we are using recursion
04:30 - to calculate the factorial of a given
04:33 - number so factorial is the name of our
04:36 - function that accepts 1 integer argument
04:38 - in and it's radon type is also in video
04:42 - this int n is the formal parameter as it
04:46 - is appearing in the prototype of the
04:49 - function factories inside its body we
04:54 - have calculated the factorial with it if
04:57 - n is greater than equals 1 return n into
05:02 - factorial n minus 1 which is nothing but
05:04 - the recursive calling in return one
05:07 - inside the main we have a printed
05:10 - statement in which we are printing the
05:12 - value that has been returned by this
05:15 - factorial function and we are passing a
05:18 - value to it here we have past fights so
05:21 - this file becomes the actual parameter
05:24 - as it is corresponding to the formal
05:28 - parameter n and it appears in the
05:32 - function pole here we are calling the
05:34 - factorial function and we have passed 5
05:37 - so it is an actual parameter next
05:41 - question what is the preprocessor
05:44 - directive in C C preprocessor is just a
05:49 - pitch substitution tool it instructs the
05:53 - compiler to do the required
05:55 - pre-processing before the actual
05:58 - compilation can be done all the
06:00 - pre-processors commands begin with a
06:03 - hash symbol this is the hash symbol a
06:06 - fountain it gets executed before the
06:10 - actual C program is being executed
06:13 - examples hash define that substitutes of
06:18 - preprocessor macro and hash include that
06:21 - inserts a particular header from
06:24 - the fight there are other examples of
06:27 - the preprocessor directive also next
06:29 - question what is an eye an array is a
06:33 - data structure that stores multiple
06:36 - elements of the same data type that is
06:39 - it stores the homogenious elements it
06:43 - resolves the memory in a sequential
06:45 - manner one after the other
06:47 - any leader structures are traffic data
06:51 - structure thus the memory size once
06:54 - defined cannot be changed later on in
06:57 - the program there are three types of
07:01 - arrays namely one dimensional array two
07:05 - dimensional array and multi-dimensional
07:07 - life examples
07:09 - int a within square brackets we have
07:13 - specified 2 so 2 is the size of a deal
07:17 - and after the execution of this
07:19 - statement an array of integer data type
07:23 - a will be created which has a size of
07:27 - two within the square brackets the
07:31 - dimensions are mentioned since there is
07:34 - only a single square bracket it means it
07:36 - is a one dimensional array similarly in
07:39 - the very next statement we have
07:41 - mentioned in math 3 and in the other
07:46 - square brackets its against which is
07:49 - used to declare a two dimensional array
07:51 - this will declare a two dimensional
07:54 - array like a form of a matrix which will
07:57 - have three rows and three columns so
08:00 - total of nine elements will be stored in
08:02 - math next question with the statement is
08:08 - better in terms of efficiency and by x
08:13 - equals x plus 1 or X plus plus so X plus
08:19 - plus is efficient than X equals 2x plus
08:23 - 1 because it is just a single
08:27 - instruction to the compiler
08:29 - while the others is
08:31 - so increment operator is doing a single
08:34 - instruction to the compiler which is
08:37 - more efficient next question is what are
08:42 - the limitations of scanner function in C
08:45 - so the limitations of scanner function
08:49 - are asked for use the scanner function
08:52 - cannot work with the string of
08:54 - characters it is not possible to enter a
08:58 - multi-word strength into a single
09:01 - variable using the scanf function
09:04 - suppose you have a variable in which you
09:07 - want to store your name in that case it
09:11 - is required that after the first and
09:14 - last name a space is needed but if you
09:18 - are using the scanf function to store
09:20 - your whole name in a single release then
09:23 - it is not possible because channeis
09:26 - ridges terminate with strings as soon as
09:29 - it encounters a space character and it
09:33 - will only show your first name so to
09:36 - counter this problem the biggest
09:38 - function is used which tweets with
09:41 - spaces and tabs as a part of the input
09:44 - space and it's terminated only when the
09:47 - Enter key is pressed next question write
09:52 - a program to swap two numbers without
09:55 - using the road variable so here we have
09:59 - declared two integer type of variables a
10:02 - and B is initially holding the value of
10:05 - 10 while B is holding the value of 20
10:08 - after swapping we need a to hold the
10:11 - value 20 and B to void the value 10
10:14 - there is a printf statement that is used
10:17 - to print the current values of a and B
10:19 - which is 10 and 20 respectively then
10:22 - there is a treatment that takes that in
10:25 - a 2 system of E and B so the sum of a
10:31 - and B that is 10 plus 20 which is
10:34 - nothing but 30 will be stored in a after
10:38 - the execution of this statement
10:40 - the very next statement
10:43 - States as B will hold the difference of
10:46 - a and B so a which is now holding 30 and
10:51 - be with us
10:53 - still holding 20 will be stored in B
10:56 - that is 30 minus 20 which gives the
10:59 - value of B as 10 over here in the next
11:04 - statement even told the difference of a
11:07 - minus B status it will store the value
11:10 - of scale with us protein minus the value
11:14 - of B with a step which gives the value
11:17 - of a as 20 so the current value of a is
11:22 - 20 well that of B is 6 and this will be
11:26 - printed when this printf statement is
11:29 - executed not we can see that the values
11:32 - of a and B are tracked and mode variable
11:36 - is used