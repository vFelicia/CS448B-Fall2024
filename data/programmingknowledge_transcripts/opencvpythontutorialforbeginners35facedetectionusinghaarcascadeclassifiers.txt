00:00 - hey guys welcome to the next video on
00:02 - open CV tutorials for beginners using
00:04 - Python in this video we are going to
00:07 - discuss about the basics of face
00:09 - detection using har feature based
00:12 - Cascade classifiers so object detection
00:16 - using har feature based Cascade
00:19 - classifiers is an effective object
00:22 - detection method proposed by Paul viola
00:26 - and Michael Jones in their people now
00:29 - har feature based cascades classifier is
00:32 - a machine learning based approach where
00:35 - a cascade function is trained for a lot
00:39 - of positive and negative images now what
00:42 - are these positive and negative images
00:45 - so first a classifier is trained with a
00:49 - few hundred sample views of particular
00:52 - object that is a face or a car or any
00:56 - other object that is called a positive
01:00 - example so whatever you want to detect
01:02 - if you train your classifier with those
01:05 - kind of values so for example if you
01:08 - want to detect face then you need to
01:11 - train your classifier with the number of
01:13 - images which contain faces so these are
01:16 - called the positive images which
01:18 - contains the object which you want to
01:21 - detect similarly we want the classifier
01:24 - to train with the negative images that
01:27 - means the images which doesn't contain
01:30 - the object which you want to detect so
01:33 - in our case for example we want to
01:36 - detect the face then the image which
01:39 - doesn't contain the face then it is
01:42 - called the negative image and if the
01:44 - image contains face or number of faces
01:47 - then it's called the positive image and
01:49 - after a classifier is trained it can be
01:52 - applied to a region of interest in an
01:55 - input image and the classifier outputs a
01:59 - 1 if the region is likely to show the
02:03 - object or a 0 otherwise so let's see how
02:06 - we can use hard Cascade detection in
02:09 - open CV so open CV comes with
02:13 - Treena as well as a detector so if you
02:16 - want to train your classifier for any
02:19 - object for example a watch or a car or
02:23 - train or anything then you can use this
02:28 - classifier also on open CV github page
02:33 - you can find some trained classifier XML
02:37 - files so let me show you these
02:39 - classifiers on the open Seavey's github
02:42 - page so here is the open CV repository
02:47 - and inside this repository you can see
02:50 - this data folder and then go to har
02:54 - Cascades I will just share the link with
02:57 - you in the description so you can
02:59 - directly navigate to this website and
03:03 - this location and you can see plenty of
03:06 - trained the classifiers are available
03:10 - inside this repository so for our
03:13 - example we want to detect the face so we
03:16 - are going to use this train the
03:20 - classifier which is called hard crack
03:22 - cascade underscore frontal face
03:25 - underscore default dot XML file so you
03:28 - just need to open this file and then
03:31 - download it you can just click on the
03:34 - raw icon here this button and once this
03:39 - raw file is open you can just right
03:42 - click and save it on your computer so
03:46 - you can just say save page as and then
03:49 - you can just save this inside your open
03:53 - CV project so I have already saved this
03:56 - file inside my open CV project you can
04:00 - see this file here which is an XML file
04:03 - which I have downloaded using this
04:06 - repository so as you can see here I have
04:08 - this code which is the minimal code to
04:11 - load an image and show it using open CV
04:14 - window now in the next step what I'm
04:18 - going to do is before this reading we
04:21 - are going to just define our classifiers
04:25 - so because it's a face classifier I am
04:27 - going to
04:27 - name by variable as face gasps Kade and
04:31 - then in OpenCV there is a method called
04:35 - so I'm going to just call this method
04:37 - and there is a method called Cascade
04:41 - classifier so this is this method called
04:45 - Cascade classifier where you can provide
04:49 - your classifier name which is the XML
04:53 - file so just provide your trained a
04:55 - classifier file name in our case it's
04:58 - hard cascade underscore frontal face
05:01 - underscore default dot XML so once we
05:05 - have our classifier we read the image
05:09 - and then because this classifier will
05:11 - work with the grayscale images we are
05:14 - going to convert our image into a
05:16 - grayscale image and it will be really
05:19 - easy to convert our image to a grayscale
05:22 - image now once we have our grayscale
05:24 - image the next step is to detect the
05:27 - faces inside this image so for that we
05:31 - are going to declare this variable let's
05:33 - say faces and then we are going to use
05:36 - this result which we got using this
05:40 - Cascade classifier and then we can call
05:45 - a method called detect multi-scale so we
05:49 - are going to just call this method which
05:52 - takes pure argument first is the image
05:55 - so we are going to provide our grayscale
05:58 - image here and the second argument we
06:01 - are going to use here will be the scale
06:03 - factor so the scale factor parameter
06:07 - specifies how much the image size is
06:10 - reduced at each image scale so to start
06:14 - with we are going to provide one point
06:16 - one value here and then the next
06:19 - parameter which we are going to provide
06:21 - here will be the min neighbors parameter
06:25 - so min neighbors parameter is going to
06:27 - specify how many neighbors each
06:30 - candidate rectangle should have to
06:33 - retain it so we are going to provide
06:36 - this value for here to start with and if
06:39 - it
06:40 - doesn't give us the proper result we are
06:43 - going to change it and the last step
06:45 - here will be to iterate over all the
06:48 - phases which we have detected and then
06:50 - draw a rectangle on them so this phase
06:54 - variable will be the vector of rectangle
06:56 - where each rectangle contains that
07:00 - detected object in our case this will be
07:02 - the detected phase so the rectangle may
07:05 - be partially outside the original image
07:09 - if it's on the corner so that if the
07:12 - object or the face is on the corner then
07:17 - this rectangle may be little bit outside
07:20 - the original image so we are going to
07:22 - iterate over this faces object and here
07:27 - we are going to get the parameter X
07:31 - comma Y comma W comma H which means the
07:36 - values of x and y and the width and
07:40 - height of the rectangle of the object in
07:43 - our case this is the faces right so we
07:48 - got all the four parameters for drawing
07:52 - the rectangle and then we can just call
07:55 - C v2 dot rectangle method to draw the
08:00 - rectangles the first parameter here will
08:02 - be the image the second parameter will
08:05 - be the point one which will be X comma Y
08:08 - which we got using this faces vector and
08:13 - then we need to give the second point
08:16 - which will be X plus W comma y plus hide
08:23 - okay and then the next two parameters
08:27 - are the color and the thickness so we
08:30 - are going to give the color 255 comma 0
08:33 - comma 0 here and the thickness to start
08:36 - with we are going to give 3 here that's
08:39 - it so it's this simple to detect faces
08:43 - inside the images using haar cascade
08:46 - classifiers so now I'm going to run this
08:50 - code and let's see what happens so you
08:53 - can see this
08:54 - is the face so this is how you can
08:56 - detect the face or a multiple number of
08:59 - faces inside an image let's try to
09:02 - detect the face inside a video so I'm
09:06 - going to just close this window and now
09:10 - we are going to try to detect the face
09:12 - inside a video so this will be nothing
09:16 - different than this approach we just
09:18 - need to apply this approach on each and
09:21 - every single frame so instead of this
09:26 - code we are going to use the video
09:30 - capture method to capture the video so
09:32 - you can see I have this test dot mp4
09:35 - video here so we are going to define a
09:38 - cap variable is equal to CB 2 dot video
09:43 - capture and then in the parenthesis we
09:46 - are going to provide the test dot mp4
09:50 - file here or if you have the camera you
09:53 - can provide 0 here as the parameter and
09:57 - then all this code we are going to just
10:00 - enclose inside a while loop so we are
10:03 - going to just say that while cap dot is
10:09 - opened
10:10 - so if cap dot is opened is going to give
10:13 - us a true value then we are going to
10:17 - read the frame so underscore let's say
10:22 - the parameter name will be I am G in
10:26 - this case also normally we take the
10:29 - variable name frame here because we are
10:31 - reading each and every frame and then
10:34 - I'm going to just say cap dot read okay
10:38 - so cap dot read this means we are
10:41 - reading every frame and let's enclose
10:45 - this code also inside this while loop so
10:48 - I'm going to just provide a little space
10:51 - here so basically we are getting every
10:55 - frame and then applying the same
10:57 - procedure on each and every frame and at
11:01 - last outside our while loop we are going
11:03 - to release our cap so we are going to
11:07 - just
11:08 - cap dot release and here instead of
11:12 - using this CB 2 dot weight key you're
11:15 - going to provide a condition if CB 2 dot
11:19 - wait key and in the parents's we are
11:23 - going to provide 1 & 0 X F F is equal to
11:27 - or D and we are going to listen for the
11:32 - key Q so if somebody presses the key Q
11:37 - then we are going to break out of this
11:40 - while loop so let's run this script and
11:44 - let's see what happens when we run the
11:46 - same script on our video so this is the
11:48 - video and this is in this video so you
11:52 - can see in this video the face is
11:54 - detected in real time in the real live
11:57 - video so this is how you can use hard
12:00 - based Cascade classifiers to detect
12:03 - faces or any other object inside an
12:07 - image I hope you have enjoyed this video
12:09 - and I will see you in the next video
12:19 - you