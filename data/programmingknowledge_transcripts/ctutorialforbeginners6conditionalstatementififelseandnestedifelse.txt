00:00 - hey guys welcome to programming
00:01 - knowledge in this video we'll be looking
00:03 - at conditional statement toward our
00:06 - conditional statements what are
00:08 - conditions basically conditions are
00:10 - those set of rules which define a
00:12 - particular procedure to be followed so
00:14 - do I mean by that let's take an example
00:17 - suppose you want to sort out all those
00:19 - files which you created yesterday from
00:22 - the cedral or from the desktop so the
00:25 - way we do that is we take all the files
00:27 - you look at the date when it was created
00:30 - and then if it matches is today's date
00:32 - we put that inside separate folder or
00:34 - else you leave it or you put it in
00:36 - search of another folder doesn't matter
00:38 - though our only focus is they are
00:40 - putting dual spines which were created
00:42 - yesterday into a separate folder so when
00:46 - you're checking whether the date matches
00:48 - or not they are actually performing a
00:50 - conditional operation but that is SWAT
00:52 - and useful operators or conditional
00:54 - statements loop so conditional operators
00:56 - work like if something is there and you
00:59 - read follow a some procedure or else you
01:02 - need to follow some other procedure
01:04 - which may or may not be defined if it is
01:06 - not define you need not do anything if
01:08 - it is defined you need to follow that
01:10 - procedure so it is like if something
01:13 - then you do something so do procedure
01:17 - one suppose and then else what you need
01:20 - to do those do procedure two or you can
01:25 - leave it right this does not need to be
01:29 - defined so this is not important what is
01:32 - important is this condition this
01:34 - condition if that something is satisfied
01:37 - then only you need to do procedure one
01:39 - or else you need not do anything all you
01:42 - need to do some other set of statements
01:43 - which are defined so that this whole
01:46 - conditional statement work and the same
01:49 - goes that C++ also so the very different
01:52 - conditions it matters you put an if and
01:54 - then inside a pair of parenthesis you
01:56 - put a conditional statement and here you
02:01 - have a block so this cloth is different
02:04 - from this block Here I am writing it so
02:07 - this is if block so this executes only
02:12 - when that condition
02:13 - if satisfied and then if this condition
02:16 - fails in our example suppose some other
02:19 - file came up which was created one year
02:21 - ago so what you need to do you need not
02:23 - do anything or else if you want you can
02:25 - put it inside a another clock that is up
02:27 - to you should do that is else if that
02:30 - condition fails you have an inner clock
02:32 - you need to follow this particular
02:33 - procedure so this set of statements or
02:37 - this set of rules executes only when
02:39 - this rule is true or this conditional
02:43 - statements evaluate to true or else it
02:46 - follows this else block so the way you
02:49 - define conditions is by using operators
02:53 - called relational operator relational
02:55 - operators just give the relation between
02:57 - two operands so these are same as the
03:00 - mathematical relations you have a
03:01 - greater than you have a less than you
03:04 - have a greater than or equal to less
03:06 - than or equal to and then you haven't is
03:09 - equal dude this is is equal to so do not
03:14 - get confused with a single equal to sign
03:16 - we use so by declaring variables I told
03:19 - that int a equal to 10 means a whole
03:22 - star value of 10 so this single equal to
03:25 - operator there is known as the
03:27 - assignment operator and this double
03:30 - equal to is the is equal to operator so
03:33 - the differences when you tell a equal to
03:37 - 10 and a equal to equal to 10
03:39 - this means that assign the value 10 to 8
03:43 - so this is what this statement and this
03:46 - statement means compared a and 10 and
03:49 - check its equality so this is what it
03:54 - means so this double equal to means that
03:58 - you will take the value of a you will
04:00 - take 10 you compare it and if both are
04:03 - equal then you say it's true or else if
04:05 - we tell that it's false so this single
04:09 - equal to operator just means that you
04:10 - put this 10 inside this memory location
04:12 - a that's what it needs
04:14 - here under point loaders MD equal to a
04:17 - this and L so here even though it
04:22 - mathematically both the statements are
04:24 - same then equal to
04:25 - cannot be processed because all this
04:28 - wants the left hand side to be memory
04:30 - location whatever the right hand side is
04:33 - it can be memory location it can be a
04:34 - constant value it can be anything so
04:36 - whatever it is it has to go into the
04:39 - left hand memory location by using this
04:42 - operator which is the assignment
04:43 - operator and this double equal to
04:45 - operator can work either way so even if
04:48 - you put n equal to equal to a this is
04:50 - the same meaning it tastes and it takes
04:52 - a value of 8 compares it and if they are
04:54 - equal it's going to tell yes but as it's
04:56 - going to tell you so these are the
04:58 - operators and you have an engine
05:01 - operator this is double equal to which
05:03 - is equal to and then you are not equal
05:06 - to not is basically this exclamation
05:08 - mark over here this is not equal to so
05:11 - these are the operators you use to check
05:13 - the conditions so let us look at a quick
05:16 - program let us make some program that
05:18 - save or to check whether the person is
05:21 - eligible to let's say drive a vehicle or
05:24 - not so for the legal age for driving
05:26 - vehicle Society ninis so let's take
05:29 - whether a person is eligible to drive
05:31 - the McClure Orange Tom put an oath or
05:35 - not whether is an eligible voter or not
05:37 - we can do that so let's start by writing
05:40 - the input statements so first we ask the
05:44 - name enter the nib is going to enter the
05:47 - name you know name is going to be a
05:49 - string so string name I don't know the
05:51 - name that's why I'm going to leave it
05:53 - blank and I'm going to take in the name
05:55 - over here so C in name and now I'm going
06:00 - to take the age of that person so let's
06:03 - say C
06:06 - enter okay enter your age over here now
06:13 - I'm going to take the ages years so let
06:17 - us mention that also over here in in
06:20 - years something at time so I'm going to
06:23 - get the a genius number of years is
06:25 - going to be in integer so I'm just going
06:29 - to put an int age and then I'm going to
06:32 - get the age all right well now I need to
06:36 - check in condition so what is going to
06:38 - be a condition I want to tell that the
06:40 - user can't rise awake Lord put the Earth
06:43 - only face above 18 years of age so way
06:46 - we do our chance you put an F and then
06:49 - inside this pair of brackets you put the
06:51 - condition the condition as if his age is
06:55 - greater than or equal to 18 or not
06:59 - you are going to check that and then if
07:01 - his age is greater than 18 then you put
07:05 - a statement right let's say you are
07:09 - eligible to wood or drive a car
07:14 - something good right
07:16 - he said Isabelle if he is greater than
07:18 - or equal to 18 he sensible things you
07:21 - can just print fun okay sorry you are
07:31 - not eligible something like that what
07:35 - we're done we have just taken a name we
07:37 - have taken the age you have complete the
07:39 - age and we are checking whether the age
07:41 - is greater than or equal to 18 or not so
07:44 - if he is greater than or equal to 18 or
07:47 - if it's a major you are going to tell
07:50 - that he is eligible to vote or drive a
07:52 - car or any vehicle or else you're going
07:55 - to say that you are not eligible so
07:58 - that's how you do that let's try and
08:00 - execute this program so here let's say
08:02 - enter the name something that John and
08:04 - enter your age 12 so here it says sorry
08:08 - you're not eligible let me put in new
08:10 - line after this statement so that you
08:13 - don't get confused with the compilers
08:15 - output
08:17 - and here so let's say some other name
08:23 - let's say hari and enter your 8 this is
08:28 - going to be 21 so here you can see you
08:31 - are eligible to vote or drive a car
08:33 - right so this is a simple program you
08:36 - have written so here you can also do
08:38 - another check
08:39 - right so suppose the person who is using
08:43 - a program is and not if I think wants to
08:45 - check the validity of your program
08:48 - supposing wants to do something like he
08:51 - wants to put negative integers or
08:52 - something so age is always positive
08:54 - right Duprey you do that is first you
08:56 - check whether the ages watch it or not
08:59 - so the way you do that is if H is
09:01 - greater than 0 if it is a positive
09:04 - number then only check it so all these
09:07 - statements go inside this
09:09 - right if the his particular age is legal
09:13 - then only you can check that right if he
09:16 - is providing some negative number you
09:18 - cannot check that so here I am just
09:20 - going to indent this thing so that it
09:22 - looks nice
09:25 - you also try to in dental program so
09:27 - that you can understand what you're
09:29 - writing so this is this from this block
09:32 - to this block this is another if this is
09:35 - else inside this if block so all these
09:37 - statements are inside this statement or
09:39 - else you say um
09:44 - co2 please enter a valid age right so it
09:51 - is not valid - why is not a valid age
09:54 - right so you take only positive integers
09:58 - as ages and you're checking whether that
10:00 - age is 18 or not if it is equal to or
10:03 - greater than eating it you're saying
10:05 - that you're eligible to vote or drive a
10:07 - car or else you're telling that you're
10:09 - not a believer so here now you can
10:11 - execute and try out this program it is
10:14 - better to execute after every condition
10:17 - you write right because when you are
10:19 - writing a bigger program it is it will
10:21 - be a good practice to actually check
10:23 - when you're putting a condition so that
10:24 - validates your program even more faster
10:26 - and will be able to easily debug your
10:29 - program so here let's say I enter the
10:32 - name that stick of some other name let's
10:33 - say Jack and enter the age let's try
10:37 - something naughty now let's write minus
10:39 - 120 and enter so here it says please
10:42 - enter a valid age so you can have many
10:45 - checks like that so you can have so Mady
10:48 - is going to endure something weird in
10:50 - the thousand years or 2,000 years you
10:52 - can check that also the age should be
10:55 - less than thousand or less than 2000
10:57 - something for that we are going to need
11:00 - another set of operators which I'll be
11:02 - talking in the next video but you can do
11:04 - that inside this if also so I can check
11:07 - over here also if age is less than let's
11:10 - say put some maximum 800 right so let's
11:13 - say 1 or 5 or 1 or 2 maximum 1 or 2 so
11:16 - if it is less than 1 or 2 then only you
11:18 - need to execute this statement so ctrl X
11:22 - and it goes inside this
11:26 - and let me Indian this properly
11:31 - you
11:34 - right so if a just less amount of this
11:38 - audience you are again going to say the
11:40 - same thing so just control C and then
11:43 - over here inside this if you putting is
11:45 - this else so that is how simple
11:49 - conditional statements are just going to
11:52 - play with conditions so here I'm
11:54 - checking your it is a positive number
11:55 - and Here I am checking whether it's too
11:57 - big if it is too big I am Telling that
11:59 - please enter evaluate and if it's too
12:02 - small also I am Telling that please
12:03 - enter validate and here if it lies
12:07 - between the range of 1 201 because 102
12:11 - is a maximum weight so I put less than
12:13 - hundred - this goes up 101 and greater
12:16 - than 0 starts from 1 so from 1 201 it's
12:20 - going to check and if that age is
12:22 - greater than or equal to 18 it's a it's
12:24 - going to say that you are able to would
12:26 - arise it's going to say if you are not
12:28 - eligible so that is how you perform a
12:31 - conditional check
12:32 - so this statements which are written
12:35 - inside an F so I have written an F
12:37 - inside F so this F is the mainus inside
12:40 - this I have written this and inside this
12:42 - I have written this F well stated
12:44 - so this consular is actually known as
12:47 - let me write somewhere over here okay on
12:50 - top I read this is known as nested if to
12:53 - knit conditional statement so this is
12:58 - what this is called us now if I enter
13:01 - bigger Langley than 100 and 105 or 200
13:06 - so that will say you are not you are not
13:10 - entering the validate and even if I
13:12 - enter some negative numbers also you are
13:14 - it's going to tell that you are not
13:16 - entering the validation so that is how
13:18 - you play with conditional statements you
13:20 - try writing a program which will
13:22 - segregate whether a number is odd or
13:24 - even or not I know this is a very simple
13:26 - program you will find it in the internet
13:28 - but just try it on own so let me give
13:30 - you a hint and even number then divided
13:36 - by 2 gives remainder 0 and that's it you
13:44 - knew your condition so this is the only
13:46 - condition I'm going to give you
13:48 - take a number and then you are going to
13:50 - determine whether it's an even number on
13:52 - or an odd number and this is the him so
13:55 - if an even number is divided by 2 it
13:57 - will be given for matter as 0 and then
14:00 - if it is an odd number it's going to be
14:02 - some of the remainder women is going to
14:04 - be one so you can try that you can try
14:06 - writing that program in the next video
14:08 - we will be talking about some other
14:11 - operators which we'll be using in our
14:13 - conditional statements so till then
14:16 - happy coding