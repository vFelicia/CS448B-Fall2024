00:00 - hey guys welcome to the next video on
00:02 - Python unit testing too tall for
00:03 - beginners using PI test in this video
00:06 - I'm going to show you how to use
00:08 - fixtures with PI test so let's get
00:11 - started so to start with on the left
00:14 - hand side I have this student DB class
00:17 - now as you can see here in the init
00:19 - method I am just initializing a member
00:22 - variable which is data is equal to none
00:25 - and then it has two methods one is
00:28 - connect method and other is get data
00:31 - method now this connect method takes one
00:34 - argument which is data file now if you
00:37 - can see on the right hand side I have
00:40 - written two tests for this student DB
00:44 - and I have first of all imported this
00:48 - class and then I have initialized this
00:51 - class student DB and then I'm calling
00:54 - the connect method here now in the
00:57 - connect method argument I'm giving this
00:59 - data dot JSON as an argument so let me
01:04 - show you what this data dot jason
01:07 - contains so this data dot jason contains
01:10 - the data of the student so it has this
01:14 - element called students which contains
01:17 - this array which contains different data
01:21 - about different students so right now I
01:24 - have two student data here one is ID one
01:29 - Scott Pass and other is ID to mark and
01:33 - fail
01:34 - so using this connect method I'm just
01:36 - opening this data dot JSON file and then
01:41 - I'm just loading this JSON file as the
01:46 - dictionary so as you can see here I'm
01:49 - using the JSON module which I have
01:51 - imported at the top and whenever I call
01:54 - Jason dot load it's going to convert
01:56 - this JSON dot file into the dictionary
01:59 - and then I have this method called get
02:02 - data' which takes one argument which is
02:04 - the name of the student now this name I
02:08 - am going to search in the dictionary
02:10 - which I got using the connect math
02:13 - third and if this name which is provided
02:16 - as an argument is contained in the
02:20 - students data then I'm going to just
02:22 - return this student dictionary so once
02:26 - again as you can see here I'm just
02:28 - importing the student dot DB class and
02:31 - then I'm just initializing the student
02:33 - DB and then I'm just calling the method
02:37 - called connect and in the connect method
02:39 - I'm giving the data dot JSON as an
02:42 - argument which is this file which
02:44 - contains the student data and in the
02:47 - next step I'm just calling the get data
02:50 - method from the student DB class and I'm
02:54 - giving the name of the students here so
02:57 - you can see the name of the student is
02:59 - caught that's why I am giving Scott here
03:02 - and in the next test I am giving the
03:04 - mark name which is the second name here
03:06 - and then using these assert statement I
03:09 - am just checking whether this ID which I
03:13 - got using the Scott data is equal to the
03:18 - ID which is there in the JSON file or
03:21 - not same assert I have written for the
03:23 - student's name and the students result
03:26 - and similar test I have written for the
03:30 - second name or second student which is
03:34 - mark now as you have already seen to
03:37 - make things simpler I have just used
03:40 - this JSON file as the database file but
03:45 - in real-life situations you might be
03:47 - having some other databases like MySQL
03:50 - or PostgreSQL or MongoDB or any other
03:53 - database and you might want to test your
03:55 - database so the same approach you can
03:58 - use whenever you are trying to use the
04:01 - real database so let's first of all run
04:05 - these tests and let's see what's the
04:07 - result here so I'm going to just run
04:09 - these tests and you can see both tests
04:12 - passed here now let's talk about the
04:15 - problems with these two test cases now
04:19 - you might have already guessed that we
04:21 - are repeating ourselves so we are
04:24 - initializing this database twice for the
04:27 - two tests
04:27 - but let's say we have thousands and
04:30 - thousands of tests then you have to
04:33 - initialize this database thousand times
04:35 - so the first problem is the code
04:38 - repetition the second problem is
04:41 - whenever you want to initialize your
04:44 - database for example thousand time these
04:47 - initializations are resource intensive
04:49 - so they will be costlier to your system
04:53 - on which you are running these test
04:55 - cases because they are consuming your
04:58 - resources so what can be the solution
05:01 - here so you can use two type of
05:04 - solutions in these type of cases the
05:07 - first approach is by using the setup and
05:10 - teardown methods now this setup and
05:13 - teardown method falls into the category
05:15 - of classic xunit style setup if you are
05:20 - familiar with other testing frameworks
05:23 - like unit tests or knows these methods
05:27 - might be familiar to you so first of all
05:30 - we will see how to solve this problem
05:32 - using the setup and teardown methods and
05:36 - then we will see how to solve this
05:38 - problem using PI test fixtures so we
05:42 - already know the problem so to solve
05:45 - this there is a method called a setup
05:49 - and the teardown module method so I'm
05:52 - going to just write setup underscore
05:55 - module and this takes one argument which
05:59 - is module and then here inside this
06:03 - method you can initialize your resources
06:07 - so let me define a global DB variable
06:11 - and I'm going to initialize it with none
06:15 - and then I'm going to just use this
06:19 - initialization inside this setup module
06:21 - so whenever you write the setup module
06:24 - as it is then PI test is going to
06:27 - understand that this is a setup method
06:30 - and it's going to execute this code
06:33 - before executing your tests so what I
06:36 - have done is I have defined the global
06:39 - DB variable
06:41 - means I need to indicate inside the
06:44 - setup method that this is the global
06:46 - variable and that means now inside this
06:50 - DB we have our database instance so we
06:55 - don't need this initialization in these
06:57 - two test cases now and now we can use
07:00 - this DB instance to call the get data
07:04 - method to get the data about particular
07:07 - student so this is the setup module
07:10 - method there is also a teardown method
07:12 - which we can define here so just write d
07:15 - EF teardown underscore module and then
07:18 - inside the parentheses you give the
07:22 - module as an argument and inside the
07:25 - staredown module you can close your
07:27 - connections or free your resources
07:30 - whatever you want to do after your test
07:32 - you can do in that teardown module so I
07:37 - don't have any close method inside this
07:40 - database class so let me create some
07:44 - dummy closed method here so I'm going to
07:47 - just say def closed and then I'm going
07:52 - to just use pass here so it's just a
07:56 - blank method and let me just provide the
07:58 - parentheses here so let's say we want to
08:00 - use this closed method to free our
08:02 - resources or close the connection with
08:05 - the database you can do this by just
08:07 - calling this method so DB dot close and
08:11 - this is going to free your resources and
08:13 - let's just print something yes so we
08:17 - know that these two methods are called
08:20 - so here I'm going to just say that this
08:24 - is a setup method and then inside the
08:30 - teardown module method we are going to
08:32 - just replace this set up by teardown so
08:35 - we know that when this set up method is
08:38 - called and when this teardown method is
08:42 - called so once again this setup module
08:45 - and teardown module will be recognized
08:48 - automatically by our PI test and then
08:50 - this code will be called at the starting
08:54 - of your PI
08:55 - and this code will be called at the end
08:57 - after all your tests have been passed or
09:01 - failed then this teardown module test
09:04 - will be called so let's run the test
09:06 - once again and you will be able to see
09:09 - that this setup method is called first
09:13 - and after the execution of the tests
09:16 - this teardown method is called and we
09:19 - can recognize it by using this print
09:22 - statement now if you haven't already
09:24 - recognized I have used this - s or
09:27 - hyphen s option to allow the print
09:30 - method to execute this print statements
09:33 - so if you want to allow your print
09:35 - statements to be printed on the console
09:38 - you need to use this - s flag to be more
09:43 - clear I'm going to just remove the - B
09:46 - from here so it will be more here so you
09:49 - can see it's setup is called first and
09:50 - then you will see two dots here which
09:53 - means two tests has been executed and at
09:57 - the end this teardown method has been
10:00 - called to free any of the resources
10:02 - which you might want to free or close
10:04 - that connection with the database so
10:06 - this is called the setup and teardown
10:08 - method now let's talk about the Python
10:12 - fixtures so instead of using the setup
10:15 - and teardown methods PI tests allows us
10:19 - to write the Python fixtures which will
10:22 - automatically be called at the starting
10:25 - and the end of your tests so instead of
10:28 - writing all this code what I can do here
10:31 - is I have first of all imported this PI
10:34 - test and then I'm going to define a
10:37 - method which I will call it DB because
10:41 - as you can see here all these tests are
10:43 - just using that DB instance so we want
10:47 - to somehow pass this DB instance to our
10:51 - tests and then I'm going to provide
10:53 - these parentheses and inside this method
10:55 - I want to do the same so I will just
10:57 - call this setup code here and let me
11:01 - just remove all this code from here and
11:04 - at the end what I want to do here is I
11:07 - want to just return this
11:08 - me instance which I got from the student
11:12 - TB class I don't need this global
11:15 - declaration here because there is no
11:17 - global variable and for now let's just
11:20 - comment this code so to declare a
11:23 - fixture you just need to add this
11:25 - decorator at the top of your method
11:29 - which is PI test dot fixture and now
11:32 - what I want to do here is I want to pass
11:34 - this DB instance as an argument of both
11:38 - these test cases so now what will happen
11:41 - is PI test will recognize that this is
11:44 - your fixture and then whatever you
11:47 - return from your fixture will be passed
11:50 - using this argument to your test cases
11:54 - so let's run our test and let's see what
11:57 - will happen when we run those tests so
12:01 - you can see both these tests has been
12:04 - passed but you will also observe one
12:06 - more thing and this is that this setup
12:10 - is called twice which is a problem as we
12:13 - have discussed we don't want to call
12:15 - this setup twice we just want to call
12:17 - the setup at the beginning of our tests
12:21 - so how to solve this problem so to solve
12:24 - this problem we can tell PI test that
12:26 - this is a module wide fixture so we just
12:30 - want to call this fixture once at the
12:32 - starting so to do this we just need to
12:36 - write scope is equal to and then just
12:39 - write module here and then we are going
12:43 - to just run our test once again let's
12:46 - see what happens so now you can see the
12:49 - setup is called only once and that's
12:52 - what we wanted right we just wanted to
12:55 - call this setup at the beginning of our
12:58 - test and not at the beginning of each of
13:01 - the tests now let's see how we can add
13:03 - the teardown functionality so I'm going
13:06 - to just use this code after this return
13:10 - and then I'm going to uncomment this
13:13 - code and then let's remove this
13:17 - commented code and to call the staredown
13:19 - code which is written
13:21 - yeah at the end of your tests what you
13:24 - can do here is you can replace this
13:27 - return by yield so when your test will
13:30 - start it's going to execute the code
13:32 - until yield and at the end of your test
13:36 - this code will be executed so let's see
13:40 - what will happen when we run the code
13:42 - once again so let's just call the PI
13:46 - test once again and you can see setup
13:49 - has been called and at the end of your
13:51 - tests teardown has been called so let me
13:56 - just clear the terminal and let's run
13:58 - this PI test command once again without
14:01 - - vivo burst so we will be more clear
14:05 - and you can see first of all setup has
14:07 - been called and then your test has been
14:10 - executed which are indicated by these
14:12 - two dots and after your tests this
14:15 - teardown code has been executed so this
14:18 - is how you can use fixtures and setup
14:21 - and teardown methods with your PI test
14:25 - test cases I hope you have enjoyed this
14:27 - video and I will see you in the next
14:30 - video
14:39 - you