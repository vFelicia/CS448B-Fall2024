00:01 - hello and welcome back to the new video
00:02 - of the Java tutorial Series so today we
00:05 - have completed the oops Concepts and now
00:08 - it's time for the exercise uh so
00:10 - exercise on oops Concepts uh head over
00:13 - to this link uh just
00:15 - type this link in your browser and you
00:18 - will be redirected to this page which is
00:20 - hacker rank page and here you can see uh
00:23 - some basic challenges on the oops
00:25 - Concepts in a Java animating this one
00:27 - Java inheritance to abstract class
00:28 - interfaces method overriding method over
00:32 - adding two instance of keyword so we can
00:35 - try solve this questions on your own but
00:39 - I will be uh taking for the first five
00:42 - questions of this
00:44 - challenges and you can try all these
00:47 - challenges but you can also try easy
00:49 - medium
00:50 - and hard you can set a difficulty level
00:53 - as whatever you want uh I'll be solving
00:56 - easy ones and so in this video we will
00:59 - be talking Java inheritance one and Java
01:01 - inheritance to solution to these
01:03 - problems
01:04 - okay so the problem statement is using
01:07 - inheritance one class can acquire the
01:09 - properties of others consider the
01:11 - following animal class so they have
01:13 - given us animal class which has one
01:15 - method wild walk and which is printing I
01:18 - am walking and this class has only one
01:20 - method walk and next time we want to
01:23 - create a bird class that also has a fly
01:27 - method we do this using extend keywords
01:29 - okay so they have created one one more
01:32 - class A bird which actually extends the
01:34 - animal and which has its own method fly
01:37 - and I'm flying is the
01:39 - print statement which is written inside
01:41 - this fly method and finally we create
01:43 - the bird object that can both fly and
01:46 - walk okay so they have one class
01:49 - solution inside which they have written
01:52 - main method and inside main method they
01:54 - have created the object of the bird
01:56 - class
01:57 - and using that object they have called
01:59 - walk and fly method and obviously this
02:03 - two methods will print I am working and
02:05 - I am flying this means that a bird
02:08 - object has all the properties that
02:10 - animal object has as well as some
02:12 - additional unique properties okay the
02:14 - the code above is provided for the for
02:17 - you in the editor you must add a sync
02:19 - method
02:20 - to the bird class then modify this main
02:23 - method accordingly so that the code
02:25 - prints the following line Okay so
02:28 - the expected output should be I am
02:30 - working I am flying and I am singing
02:32 - okay so they have provided us this code
02:35 - editor
02:36 - okay and we are expected to write one
02:40 - more method for the bird class
02:42 - which is sing method as you can see over
02:47 - here okay so
02:50 - we will write something
02:53 - reward
02:56 - thing
02:57 - and inside this method we will simply
03:01 - write system
03:04 - dot out
03:06 - Dot
03:10 - print Ln
03:14 - and inside this method I will write what
03:17 - we have to write I am singing I will
03:19 - copy this string and paste it over here
03:25 - okay okay this is the method that it has
03:28 - to write okay and okay and then modify
03:32 - the main method accordingly so that the
03:35 - code prints the following lines okay so
03:38 - I have to modify the solution class also
03:40 - and here bird dot thing is there okay
03:45 - now I guess it should print I'm singing
03:48 - I am submitting the code
03:51 - before that I will run the code okay let
03:54 - me just log in through my Google account
03:58 - foreign
04:14 - I will submit the code
04:19 - yes compiler message success now we
04:22 - congratulations so you have solved this
04:24 - challenge
04:25 - okay so this is about the Java
04:28 - inheritance one problem we will look
04:31 - into the Java inheritance second problem
04:32 - also
04:36 - wait let me open this in new tab
04:46 - okay
04:49 - okay for the Java inheritance second
04:52 - problem uh the problem statement is
04:54 - writer write the following code in your
04:56 - code editor below a class name
04:57 - arithmetic
04:59 - with the method name
05:01 - add that text to integer as a parameter
05:04 - and Returns the integer denoting their
05:06 - sum okay
05:08 - so let me write it down here comment
05:12 - what we have to do
05:14 - okay we have to write one class name
05:17 - arithmetic okay
05:20 - class
05:22 - arithmetic
05:24 - inside that class uh we have to write on
05:28 - method name as ADD
05:32 - one method should be there
05:36 - method
05:38 - and which accepts two parameters I and T
05:42 - comma int two integer parameters and
05:45 - then it Returns the sum
05:49 - and it is returning the sum of the two
05:52 - numbers okay and a class name Adder that
05:55 - inherits from a super class name
05:57 - arithmetic okay uh class name header an
06:01 - Adder class should be there one Adder
06:04 - class
06:12 - header class which inherits the
06:14 - properties of the arithmetic class okay
06:16 - so we have
06:18 - inherits
06:21 - inherits the
06:25 - arithmetic class
06:28 - okay and your classes should not be
06:31 - public okay so we don't have to write a
06:34 - class as a public because one class is
06:37 - already declared as a public list which
06:39 - is solution okay the input input format
06:41 - is you are not responsible for reading
06:43 - any input from this STV in unlock code
06:46 - step will be test your submission by
06:48 - calling the add methods okay this is the
06:50 - normal line output format should be you
06:52 - are not dismissible for printing any
06:53 - anything to STD out your your ad method
06:56 - must return the sum of its parameter
06:58 - okay the sample out sample output they
07:00 - have given as my superclass is
07:02 - arithmetic and 42 13 is 20 okay
07:08 - Okay so
07:11 - write your code here okay so first of
07:14 - all let me create one arithmetic class
07:18 - okay
07:20 - abstract
07:24 - arithmetic
07:28 - abstract
07:32 - CLA s s class
07:36 - arithmetic
07:38 - and inside this class I will write
07:43 - public
07:46 - abstract
07:49 - int
07:50 - add
07:52 - and this is going to accept two
07:55 - parameters final
07:58 - in a
08:00 - and final int
08:04 - B
08:06 - okay so this is the abstract method so I
08:09 - don't need to write
08:12 - the body of this method that's so
08:17 - okay and now uh I have to declare one
08:20 - another
08:22 - method
08:24 - or class
08:26 - okay inside this solution class I will
08:30 - just
08:31 - so it I can't edit inside this
08:36 - solution class okay let me create my own
08:38 - class in IntelliJ IDEA
08:41 - I will name it as in
08:45 - inheritance
08:48 - to
08:52 - I will get my main method and I will
08:57 - simply copied my arithmetic class that I
09:00 - have written over here
09:02 - copy
09:04 - paste okay now we have implemented the
09:08 - arithmetic man and we have also
09:10 - implemented the add method which Returns
09:12 - the sum and now we have to overwrite
09:17 - this method inside our main public
09:19 - method that is public class sorry
09:21 - inheritance to
09:23 - so we will write
09:25 - public
09:27 - in
09:29 - add
09:31 - and which accepts two parameter
09:34 - Final
09:36 - in a
09:38 - comma
09:41 - final
09:43 - in b
09:45 - and it performs simply the addition of
09:48 - the two numbers it will return
09:51 - a plus b okay and one more thing uh it
09:56 - it is extends this arithmetic class okay
10:01 - now it's okay now inside our main method
10:06 - we will simply create the object of this
10:09 - inheritance class in here it is to
10:13 - obj one is equals to new inheritance
10:17 - and using this object we will call this
10:19 - add method
10:21 - to call this method we will simply write
10:24 - obj one dot add and we'll pass two
10:28 - numbers let's suppose
10:33 - uh two numbers can maintaining 10
10:36 - comma 20.
10:40 - okay so now I guess that is the work
10:43 - that we have to do inside this problem
10:45 - statement we have to just
10:47 - uh create one abstract class arithmetic
10:51 - and one hashtag method which will simply
10:54 - perform addition of the two numbers and
10:57 - that we have done over here
10:59 - and we will create one object of that
11:01 - class and we'll call it and pass the
11:03 - parameters okay now I will run this
11:05 - method around this class sorry not
11:08 - method
11:09 - and okay okay wait wait wait I have to
11:15 - okay I have to write this entire code
11:18 - inside one print statement because the
11:21 - method doesn't printing anything
11:23 - okay and I will simply copy this
11:28 - and paste Insider
11:30 - when statement and now if I run this
11:33 - question
11:34 - class Java class 30 is getting minted on
11:38 - the console yes because the addition of
11:39 - the 20 and 10 is 30. so this is pretty
11:42 - much about this problem statement Java
11:45 - inheritance to okay so we will discuss
11:49 - uh other problems also Java abstract
11:52 - Java interface method overriding method
11:54 - overriding two uh in our upcoming video
11:56 - so thank you for watching this video