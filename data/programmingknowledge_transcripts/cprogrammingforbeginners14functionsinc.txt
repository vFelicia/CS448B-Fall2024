00:01 - hello guys welcome to the next video
00:02 - tutorial on C programming for beginners
00:05 - and in this video I'm going to show you
00:07 - how you can use function in C and what
00:11 - is a function so first of all what is a
00:15 - function a function is a piece of code
00:19 - or a block of code which we can use to
00:22 - perform a particular task for example
00:27 - adding two numbers you may uh wish to
00:31 - add two numbers uh multiple times in
00:34 - your program and you can define a
00:37 - function for this to add uh two numbers
00:42 - and you can use your function again and
00:44 - again uh or you can call your function
00:47 - again and again inside uh any other
00:50 - function so let's
00:52 - see how we can declare function but
00:56 - first of all I must uh say
01:01 - that every C program has at least one
01:05 - function and this function is called
01:08 - main right in the starting of this
01:11 - series I have told you that this main is
01:15 - a function okay and every program has at
01:19 - least one function and this function is
01:23 - called Main and whenever you execute
01:25 - your program C uh searches for this main
01:30 - function and execute uh whatever inside
01:34 - this so function
01:37 - uh more or less looks like this itself
01:41 - it has a return type it has the name of
01:44 - the function uh this is a inbuilt name
01:47 - in C which is main but you can Define uh
01:51 - user defined function and give it any
01:54 - name and then comes this bracket and
01:56 - then curly braces so let's see how
02:00 - what is uh the definition or Declaration
02:05 - of this function for example so this is
02:08 - how you declare a function this is not
02:12 - actual declaration but that this is some
02:15 - pseudo uh declaration I will declare a
02:17 - function in a
02:19 - moment so function you can declare first
02:22 - of all you must have the type of
02:25 - function which uh it returns and then
02:29 - you give the name to your function and
02:32 - then in the bracket you can pass
02:35 - argument or
02:37 - parameters like this of some type and
02:41 - inside your curly braces you write your
02:43 - code okay so I will just comment this
02:47 - for now so that we can
02:50 - U see as a reference see it as a
02:55 - reference right now you can Define your
02:59 - function above above your main function
03:01 - or below your main function but uh there
03:05 - is a difference in using or declaring
03:07 - your function above and below which I'm
03:10 - going to tell you but let's take an
03:12 - example for example we want to add two
03:15 - numbers using a function so how we can
03:19 - do
03:20 - it or let's take a rather more simple
03:24 - example than this also we want to print
03:28 - something using a function
03:30 - okay so for example I have told you that
03:35 - function start with a return type and
03:38 - this time we for example we don't want
03:41 - to return anything then we write void
03:45 - void means we are not returning anything
03:48 - right then comes the name of the
03:51 - function this name you can Define
03:54 - anything for
03:56 - example
03:58 - my
04:00 - function name any name you can give it
04:04 - and then comes your uh bracket like this
04:09 - and it can take some parameters and it
04:12 - cannot uh I mean it you it's your wish
04:16 - if you want to give some parameters to
04:19 - this function or not it depends upon
04:22 - your
04:22 - requirement right now we don't want to
04:25 - pass any uh parameters but we will see
04:28 - how we can use par parameters with
04:30 - function in the next videos so just uh
04:35 - for now we will not pass any parameter
04:38 - to the function right and then comes
04:41 - these two curly braces and now in this
04:45 - function I want to perform some code for
04:48 - example I want to print something print
04:51 - F and we can
04:54 - say we
04:57 - are inside need
05:01 - a function right and end line okay now
05:07 - for example you want to you know do some
05:12 - more stuff for example adding some uh
05:15 - two numbers for example you want to add
05:19 - uh two numbers and show the sum so you
05:22 - can just write
05:25 - print
05:27 - F this should be print F not print F and
05:33 - then you can write
05:37 - sum sum is equal to and then you can
05:41 - write
05:42 - percentage D and then you can add two
05:46 - numbers for example
05:48 - 10+ 52 this is just an example I'm
05:52 - giving you
05:53 - so so you can just uh write your code
05:58 - inside a function any code any numbers
06:01 - of of line you can write inside a
06:03 - function and then you can call this
06:05 - function in your main and for calling
06:09 - your
06:10 - function you just need to copy the name
06:13 - of the function as it is just copy this
06:15 - name and then inside your main function
06:19 - which is this one you just paste it here
06:23 - okay and then give a semicolon here and
06:27 - what this do is
06:30 - this function
06:31 - name replace is replaced by this code
06:35 - okay so whenever you call a function
06:38 - this code is also called in place of
06:42 - this function so in indirectly we are
06:46 - calling this code in here inside our
06:50 - main function okay and The Logical name
06:54 - we have given to this function so that
06:58 - more or less
06:59 - the name of the function should reflect
07:03 - the code which we are writing okay now
07:07 - we will run the code compile and run the
07:10 - code and it says sum is equal to 62
07:14 - which is this line sum is equal to 62
07:19 - and then it write V are inside a
07:21 - function right so what happens
07:25 - here your programs starts from here and
07:30 - goes to the second line and then comes
07:34 - here and it sees that there is a
07:36 - declaration of function so it remembers
07:39 - that this is a function uh which we have
07:42 - declared and
07:45 - whenever our main function calls this uh
07:48 - function we need to execute these lines
07:52 - and because we are calling this function
07:55 - inside our main it will execute this
07:58 - okay you can use this function multiple
08:01 - times inside your code also like this
08:05 - like this three times and for example I
08:09 - will just change this line so that we
08:13 - can see it more clearly and you can see
08:17 - some 62 we are in the function some 62
08:20 - we are in the function three times okay
08:24 - so this shows that you can call a
08:27 - function multiple times in your code and
08:30 - that is the uh basic usage of function
08:35 - so function makes your code really
08:39 - readable and fast to execute
08:43 - and uh you can perform this function or
08:47 - call this function again and again so
08:50 - this makes your code uh really short and
08:54 - understandable and concise
08:57 - okay now some people also like to call
09:03 - this function below your the main
09:05 - function here and there is no uh I mean
09:10 - difference uh in declaring the function
09:13 - below your main or above the main but if
09:16 - you want to uh declare your function
09:19 - below your main you just need to
09:22 - prototype your function
09:25 - just copy this here and paste the
09:29 - Declaration here right and I will show
09:32 - you if you don't do this what happens if
09:36 - I don't prototype this I will just
09:38 - delete this and compile try to compile
09:41 - my program it still runs
09:45 - but when you prototype your function
09:49 - then you are just saying your C program
09:53 - that there is a function called my first
09:58 - function name
10:00 - uh which we are going to Define
10:03 - somewhere in our code so your C programs
10:06 - comes here and sees there is a uh
10:09 - function with a name my function name
10:12 - which is defined in our code so it goes
10:17 - from here to here and see the definition
10:21 - of the function this is the definition
10:23 - of the function and this is called the
10:26 - prototyping of the function or forward
10:28 - de deration of the function and then it
10:32 - goes here and whenever your main calls
10:36 - your function it knows that this
10:39 - function is defined here okay so it's a
10:43 - good practice whenever you define a
10:46 - function below your main just prototype
10:50 - it like this and what is what uh I mean
10:54 - by prototyping you just need to copy
10:57 - this from void
10:59 - to the function not the curly braces but
11:03 - from here to here and just paste it here
11:06 - and give a semicolon here after this
11:10 - okay and run it once again it will
11:13 - execute
11:15 - fine so this is how you can use
11:17 - functions in C uh there are different uh
11:21 - kind of function for example function
11:23 - which takes parameter or function which
11:26 - returns some value which I will show
11:29 - show you in the next videos so I hope
11:31 - you have enjoyed this video please wrate
11:32 - comment and subscribe and bye for now