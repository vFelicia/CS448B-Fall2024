00:00 - hello guys welcome to the Android SQLite
00:02 - database tutorial for beginners in this
00:05 - video series I'm going to show you how
00:08 - you can get started with SQLite using
00:11 - Android we will look in this video
00:14 - series how we can create a database and
00:18 - perform some database queries like
00:22 - insertion updation or deletion or other
00:26 - basic queries on SQLite database using
00:30 - Android so let's get started and let's
00:34 - see some important stuff regarding
00:37 - SQLite on Android so first of all what
00:43 - is SQLite as you all know SQLite is our
00:47 - database which is an open source
00:49 - database so you can use it for free and
00:52 - it's a relational database okay and the
00:58 - most important feature about SQLite
01:01 - database is it's a local database so it
01:05 - doesn't require any server or any ODBC
01:09 - or JDBC queries for query or connection
01:14 - for its you know functionality it's just
01:17 - you can say it saves its data into a
01:20 - text file and it's saved locally on your
01:25 - you can say mobile device or your tablet
01:29 - or whatever Android device you are using
01:32 - and Android comes with the built in
01:36 - SQLite database implementation so you
01:39 - don't need to install any extra
01:42 - libraries to use SQLite with Android and
01:47 - the last point is to create update a
01:53 - database in your Android application you
01:56 - can create a subclass of a class called
01:59 - SQLite open helper this is a class which
02:04 - will help us to create and you know
02:07 - manage our SQLite database now enough
02:13 - the theory let's go to the practical
02:16 - part and let's start with creating our
02:19 - app from scratch so just open your
02:24 - Android studio we are going to start a
02:26 - new Android application and we will name
02:28 - our application as SQLite app for
02:34 - example and then click Next or select
02:38 - your minimum SDK as you already know how
02:42 - to select it click Next and I'm going to
02:45 - select a blank activity next and main
02:49 - activity is OK for me so I'm going to
02:51 - finish now once your basic app is
02:55 - created what we are going to do is we
02:58 - are going to create a class for handling
03:03 - the SQLite database so go to your app
03:08 - folder and in the app folder go to the
03:10 - Java folder and inside here go to the
03:14 - package in which your main activity is
03:18 - there so this is a package in which my
03:21 - main activity is there so just go to the
03:23 - package
03:24 - and right-click this package and we are
03:26 - going to create a new Java class and we
03:29 - will name it as database helper class ok
03:38 - and click OK and this is a basic blank
03:43 - class and in here as we have discussed
03:48 - we want to create or we want to extend
03:53 - this class using our SQLite open helper
03:58 - so just go here and just write extend
04:04 - SQLite open helper ok and it will show
04:10 - some error because we haven't imported
04:13 - the classes related to this SQLite open
04:17 - helper so just click alt enter and just
04:21 - click this button called import class
04:26 - and it's
04:26 - to import this class okay
04:30 - still it's showing error because we need
04:34 - to create or implement some of the
04:37 - method from it so you will be able to
04:40 - see a small bulb red bulb here you just
04:44 - need to click this bulb and then you
04:48 - just need to click implement methods and
04:51 - there are two important method related
04:54 - to this class which are on create and on
04:56 - upgrade you are going to select both of
04:59 - them and click OK
05:01 - and one more thing which is required is
05:05 - to create a default constructor so once
05:09 - again click this red bulb here and just
05:14 - choose create constructor matching super
05:17 - ok and we are going to select first of
05:20 - them and just create it ok so we have
05:24 - successfully created our database helper
05:27 - class which extends from our SQLite open
05:32 - helper which is the main class for
05:34 - handling SQLite and we have some basic
05:38 - methods here and a constructor now for
05:43 - creating our database first of all we
05:46 - need a database name now let's see how
05:53 - we can you know of how we are going to
05:56 - create our database and what will be the
05:58 - name of our database and all other stuff
06:01 - so for this for example to start with we
06:07 - are going to create a SQLite database
06:09 - like this and the name of the database
06:13 - will be student dot DB the SQLite
06:18 - database is not case-sensitive so you
06:22 - can use upper cases and smaller cases
06:25 - are together and it's not case sensitive
06:29 - so case doesn't matter in SQLite okay so
06:32 - the our database name will be a student
06:35 - dot DB and it's going to contain four
06:38 - columns first 4i
06:40 - d for the student second is the name of
06:43 - wonder student third is the surname or
06:45 - last name for the student and fourth
06:48 - column will be the marks scored by the
06:51 - student and we are going to create
06:53 - database or insert some data like this
06:57 - so ID will can be one two three four for
07:00 - example name surnames and Marx code by
07:04 - this student and in this video we will
07:07 - just see how we can create this database
07:09 - which is student dot DB and create the
07:13 - table this table for our database okay
07:18 - so now what we are going to do is let's
07:22 - declare some variables so that we can
07:27 - define the name of our database so let's
07:29 - declare our variable which we are going
07:34 - to assign the database name okay so
07:37 - let's declare public static final string
07:40 - and let's declare a variable name called
07:42 - database underscore name and we will
07:47 - assign the name of our database for
07:49 - example student dot DB student dot DB
07:57 - and I have told you that case doesn't
08:01 - matter you can you know write student
08:03 - dot DB don't like this or in capital it
08:07 - doesn't matter it's going to treat them
08:11 - as same okay and second what we are
08:17 - going to do is we are going to declare
08:19 - our table name so this will be our table
08:24 - name and let's give the name to our
08:29 - table as student data table or student
08:36 - table which will resonate perfectly with
08:40 - our table and as we have discussed this
08:45 - table is going to contain four columns
08:48 - one two three four and for simplicity
08:52 - let's key
08:54 - all the variables as string first column
08:57 - name was ID
08:59 - okay so ID for the student and the table
09:06 - name is column name is ID right so or
09:11 - you can do something like this call
09:14 - underscore one call one is ID and
09:18 - similarly column two column 3 column 4
09:21 - so like this column 2 column 3 column 4
09:26 - first day first column was ID 2nd column
09:30 - was name 3rd column was surname and 4th
09:38 - column was marks ok so these are the
09:45 - four column this is our table name and
09:48 - this is our database name now in order
09:51 - to create our database first what we are
09:56 - going to do is we are going to in the
09:59 - constructor we are going to create our
10:02 - database so we need to call a function
10:05 - which creates the database right so for
10:10 - simplicity let's reduce our constructor
10:13 - which only takes this context ok and as
10:19 - you can see here the superclass
10:22 - we can just give the name of our
10:25 - database our database name is this
10:28 - variable pass it here
10:30 - third is factory we are going to pass
10:34 - null here and the version for example
10:37 - version is equal to 1 now whenever this
10:40 - constructor is called your database will
10:44 - be created
10:45 - ok now in order to create the table
10:50 - inside your database we are going to
10:54 - create a table whenever this on create
10:59 - method of this class is called ok so you
11:03 - can see the SQLite database class is the
11:06 - argument in
11:07 - oncreate right so we can just take this
11:11 - DB which is a variable of SQLite
11:14 - database dot execute SQLite or exact XQ
11:22 - light or sq so take this instance DB and
11:29 - call a method called dot exact SQL and
11:37 - what it does is it executes whatever
11:40 - query you pass inside this method as an
11:46 - argument so it takes the string variable
11:51 - or a string query so here you can
11:54 - prepare your create table query and then
11:58 - whenever it's called it's going to
12:00 - execute this query and it's going to
12:02 - create this table okay so let's write
12:06 - our query for example create the table
12:13 - name source create table and the table
12:17 - name in our case is this one so you can
12:21 - use this concatenation operator to
12:24 - concatenate this and then inside your
12:29 - brackets your column names comes right
12:32 - so first column name is ID or you can
12:37 - just take these these names column 1
12:42 - column 2 column 3 and column 4 here so
12:45 - inside double quotes and plus plus you
12:49 - can write column 1 and then let's write
12:53 - our query first and let's forget about
12:56 - these variables so let's understand
12:59 - first how this query is written and then
13:03 - we can insert these variables here
13:05 - ok so just write create table and your
13:10 - table name and then in the brackets
13:12 - comes the ID which is the first column
13:16 - name and then comes the attributes of
13:19 - this column
13:21 - so it will be integer and it's going to
13:28 - be my primary key by primary three means
13:34 - the unique key which you will be able to
13:37 - identify the tail rose okay and then
13:42 - it's going to Auto increment Auto
13:48 - increment means it's going to increment
13:51 - automatically even if you don't provide
13:53 - any data for it okay the second column a
13:57 - name is name itself and the attribute or
14:01 - the data type for this is text for
14:04 - example the third column will be surname
14:08 - and the data type is text for it also
14:14 - and the fourth column is the marks
14:18 - column so marks and let's create it as
14:26 - integer so we have created a table using
14:29 - this query so this query is create table
14:33 - and your table name is student table and
14:35 - in the brackets we have provided four
14:38 - columns to it ID which is a primary key
14:41 - and it's going to auto increment name
14:43 - which is a text surname which is a text
14:46 - and mark which is integer datatype okay
14:52 - now one more thing which we can do is in
14:56 - the upgrade method we can once again
15:00 - call this exact SQL so this is the
15:04 - object we can use dot exact SQL and in
15:10 - here we can just drop our table if it
15:15 - exists in case of upgradation
15:17 - so drop table
15:26 - if exist and the table name is this one
15:34 - so you can just copy and paste like this
15:39 - okay and once again we are going to
15:44 - create this table so you can now
15:48 - directly call on create here on create
15:51 - and pass this DB instance now once this
15:56 - is done what we are going to do is this
15:59 - is just for checking we are going to
16:01 - write a single line of code so that our
16:05 - database is created and the table is
16:08 - created also so just go to the
16:12 - constructor once again in here and just
16:16 - create an instance of SQLite database
16:19 - which is the same as this and we will
16:22 - name it as DB is equal to this dot get
16:29 - write table database okay and what it's
16:33 - going to do is it's going to create your
16:35 - database and table and in next video we
16:39 - are going to remove this line we have
16:41 - because we are going to write our code
16:43 - to insert the data into the database so
16:48 - this is just for checking our database
16:50 - helper code is done I think just one
16:53 - more little change which I would like to
16:56 - do is this key spelling is wrong it
17:00 - should be ke by instead of ka Y and now
17:03 - what we are going to do is we are going
17:05 - to take this database helper class and
17:10 - create an instance of this database
17:12 - helper class in our main activity dot
17:14 - Java class so copy this last name go to
17:18 - your main activity dot Java file and
17:20 - create an instance so write the name of
17:23 - your class and the instance name for
17:26 - example my DB and now in our on create
17:32 - method of main activity dot Java file
17:35 - you can just create a new instance so my
17:39 - DB
17:40 - new and then new database helper okay
17:46 - and this takes one argument which is the
17:49 - context so you can just write this and
17:53 - everything will be fine now once
17:56 - everything is done what it's going to do
17:58 - is it's going to call the constructor of
18:00 - this database helper class and what we
18:04 - are doing in the constructor in the
18:06 - constructor we are creating the database
18:08 - right and the table okay so once this
18:12 - constructor is called this code is
18:15 - called and it's going to create the
18:17 - database and the table for you okay so
18:21 - let's run our program now our app is
18:25 - running so you can see this activity
18:28 - which is blank activity and it's not
18:31 - going to do anything right now but what
18:34 - it has done is once this activity is
18:38 - invoked it's going to call your oncreate
18:42 - method in your main activity and in turn
18:45 - it's going to call this constructor and
18:47 - this constructor is going to create a
18:50 - database and your table inside your
18:54 - database now to check where your
18:58 - database is created or not how you can
19:01 - check and where where is the location of
19:04 - this database so let's see where can we
19:08 - find this database so go to your Android
19:11 - studio and in here go to this tab called
19:16 - tool and then go to Android and click
19:20 - Android device man monitor okay so click
19:25 - Android device monitor and once your
19:28 - Android device monitor is open you will
19:31 - be able to find your project name in
19:35 - here so my project name or my app name
19:38 - is SQLite app and I can find my app here
19:42 - you can see SQLite app okay
19:45 - once you select this go to the right
19:48 - hand side and in here
19:50 - choose File Explorer form from here
19:53 - okay and in this file explorer' go to
19:56 - the category called data and open it and
19:59 - once again search for the category
20:02 - called data so data go to data and
20:05 - inside data there will be a folder once
20:07 - again called data so go inside that
20:10 - folder open this folder and now you can
20:13 - find your app name here also so my app
20:17 - name is SQLite app I can see here and I
20:21 - will open this folder here and I can see
20:25 - a folder called database and inside this
20:28 - database I can see my database name
20:32 - which is student dot DB so now I know
20:36 - that my database is created now if you
20:41 - are more curious about you know seeing
20:44 - inside this database and you want to see
20:48 - or if the table is really created or not
20:51 - or if once we are going to insert some
20:55 - data you want to see the data if it's
20:57 - there or not I will show you a simple
21:00 - trick which will help you you can export
21:04 - this database to your local PC ok so
21:09 - right now it's in your Android device so
21:12 - you can explore port this database on
21:15 - your PC and then you can you know query
21:19 - this database or you can see inside this
21:21 - database what's inside this database ok
21:25 - so this is just for checking the content
21:27 - of your database by transferring this
21:29 - database to your local PC and see what's
21:32 - inside it so just select your database
21:35 - in my case student dot DB and you will
21:39 - be able to see this small button here
21:41 - which says pull a file from our device
21:45 - so click this and it's going to open a
21:48 - file explorer and then you can select
21:51 - your choose chosen location and save it
21:57 - on your chosen location for example I am
22:00 - going to save it on the desktop and it's
22:03 - going to save it there and then
22:07 - what you can do is you can you know if
22:10 - you have SQLite installed on your
22:12 - windows you can just open your terminal
22:15 - and you can see inside this database one
22:20 - more helpful a tool I'm going to show
22:25 - you in order to see inside this database
22:28 - and this tool is called SQLite manager
22:31 - which is a Firefox plug-in so if you
22:34 - have Firefox browser it's going to help
22:37 - you a lot what you can do is you can
22:41 - open your Firefox browser and go to the
22:44 - settings here and go to add-ons and
22:47 - search for an add-on called SQLite and
22:52 - it's going to search for this SQLite
22:56 - many the manager zero point eight point
22:59 - three you just need to install it just
23:01 - install it and then restart your browser
23:05 - and once your browser is restarted you
23:09 - can go to settings once again and then
23:12 - go to customize here and in here you
23:16 - will be able to see this tool SQLite
23:18 - manager you can draw drag and drop this
23:21 - in to your you know tools here and then
23:26 - exit customize and now you will be able
23:30 - to open this from here so just open
23:32 - SQLite manager click OK and now you can
23:37 - browse your database so my database is
23:40 - on the desktop and make sure you select
23:43 - all files from here ok so you will be
23:46 - able to see this dot DB file ok so
23:49 - select all files from here and select
23:52 - your database and open and now you can
23:55 - see this database and there is a table
23:57 - called student table which we have
24:00 - created and this table is containing
24:04 - four columns ID name surname and marks
24:08 - code by the student ok and you can
24:11 - browse the type integer txt text integer
24:15 - which we have provided and our ID is a
24:18 - primary key you can see so
24:20 - database content you can see using this
24:24 - SQLite manager okay so this is a simple
24:28 - little trick which you can use in the
24:31 - last video we have seen how we can
24:33 - create a database which is a SQLite
24:36 - database using Android now in this video
24:39 - we are going to see how we can insert
24:41 - some data into our table inside that
24:45 - SQLite database so let's get started
24:50 - first of all go to your activity main
24:53 - dot XML file and go to the design tab
24:57 - there in the last video we have created
25:00 - this is a blank activity right so go to
25:03 - that activity and then we are going to
25:06 - drag and drop some text views here and
25:10 - added texts here so that we can use them
25:14 - to insert some data so what I'm going to
25:17 - do is I'm going to drag three large text
25:19 - here
25:20 - and three plain text and now we are
25:26 - going to change these large text label
25:30 - as the column names of our table so
25:34 - first is name second is surname and
25:36 - third is marks
25:47 - if you want you can change the ID names
25:52 - of these text views and added text also
25:56 - so for example this is for text view for
25:59 - name
26:09 - now you may be thinking that we have
26:12 - four columns in our table first is ID
26:16 - second is name
26:17 - third is unsername and fourth is mark
26:19 - but we have taken only three you know
26:23 - three variables here or three text views
26:25 - where is the ID text field and added
26:29 - text if you remember we have defined ID
26:34 - as Auto increments so it will increment
26:38 - automatically when you insert some data
26:41 - inside your table so we don't need to
26:44 - add this ID specifically okay now what
26:49 - we are going to do is we are going to
26:51 - take a button and we are going to change
26:54 - the text to add data and we are going to
26:59 - check change the ID to button add for
27:05 - example okay and that's it for the
27:09 - design part now what we are going to do
27:12 - is if you remember in the last video we
27:15 - have created a class for handling our
27:18 - database and the class name was database
27:22 - helper class so go to that class this
27:26 - was the code which we have written in
27:28 - the last video and now just go below and
27:34 - now we are going to create a new method
27:37 - to insert data so let's create this
27:41 - method this will be the public method
27:44 - and it's going to return boolean and we
27:49 - will name our method as insert data for
27:54 - example and we are going to add three
27:57 - arguments to this method first is for
28:01 - name second is for surname and third is
28:03 - for marks right so let's add
28:10 - now once this is done what we are going
28:14 - to do is first of all we are going to
28:16 - create the instance of SQLite database
28:19 - but if you remember last time we have
28:22 - added in the constructor of this
28:25 - database helper this extra line so that
28:27 - we can see the database created okay so
28:34 - now it's time to remove this line so
28:38 - just cut it from here and the
28:41 - constructor will be like this okay so
28:44 - just remove that extra line and you can
28:46 - paste the same line here because we are
28:49 - going to create use this SQLite database
28:52 - instance in our insert data method
28:56 - okay so just paste it here now the
29:01 - second thing which we need here is the
29:04 - instance of a class called
29:07 - content value so just write content
29:10 - value and the variable name is equal to
29:15 - new content value just press alt enter
29:20 - to import the required classes and now
29:25 - we are going to take this content value
29:27 - instance and we are going to put some
29:30 - data into the columns so just write
29:33 - content value dot put and it takes two
29:38 - argument first is the column name in
29:41 - which you want to insert data and second
29:44 - is the value itself so our column name
29:48 - first column name for name was column
29:50 - two you can see here so column two comma
29:55 - the value which we are going to pass so
29:57 - this is the value which we are going to
30:00 - pass here okay in a same way we will do
30:03 - the same for column three or the surname
30:09 - column and the marks column right and
30:13 - this will correspond to the value
30:16 - surname and marks value okay now once
30:21 - this is done we can just
30:24 - insert our data using this DB instance
30:28 - DB dot insert and this takes three
30:35 - arguments first is the table name so our
30:40 - table name is this variable so copy this
30:43 - and pass it here
30:45 - second is null and third is our content
30:50 - values okay which we have created okay
30:56 - now how can we know that the values are
31:00 - really inserted into the table or not
31:03 - okay so what we can do is this insert
31:07 - method you can control and just click
31:11 - this method and you can see here in case
31:14 - of error this method returns -1 and if
31:20 - it's successful this method returned and
31:23 - inserted a row value okay so if the data
31:27 - is not inserted this method is going to
31:30 - return -1 to us so what we can do we can
31:35 - define long and then result is equal to
31:39 - the result because this insert returns
31:44 - the result as minus 1 or the inserted
31:47 - value and then we can return this if we
31:52 - can check if this value is minus 1 so if
31:56 - result is equal to minus 1 is equal to
32:02 - minus 1 then we are going to return
32:05 - false else we are going to return true
32:08 - now once this method is created we can
32:12 - just go to our main activity dot Java
32:15 - file here and in here we can define 3
32:21 - added text variables because we have
32:25 - created an outer and added text so we
32:27 - are going to create 3 valuables for
32:30 - added texts and one variable for our
32:33 - button ok
32:42 - you
32:45 - once these three variables are created
32:49 - what we are going to do is inside our on
32:52 - create method we are going to cast all
32:54 - these four variables three added text
32:57 - and one button
33:05 - you
33:09 - now once our casting is done we can use
33:14 - this button add data variable to call
33:17 - some action right so what we are going
33:21 - to do we are going to create our method
33:24 - public void add data and inside this
33:31 - method we can take this button add
33:34 - variable and call a set on click method
33:37 - so set on click method and in here new
33:43 - on click listener now inside this on
33:48 - click method what we can do is we can
33:50 - call our insert data method here using
33:56 - the instance of this data helper class
34:01 - so in the last video we have created
34:04 - this instance my data so just take this
34:07 - dot insert data now as an argument for
34:12 - this insert data we need three arguments
34:17 - right so we can see it needs three
34:20 - argument first is name value second is
34:22 - surname value and third is mark value
34:24 - right so we will go to the main activity
34:27 - and in for this insert data what we can
34:30 - do is we can take the value from added
34:33 - text so just take the first added text
34:37 - which is added name dot get text dot to
34:44 - string okay the second value will be
34:49 - added surname dot get text dot to string
34:56 - and the third argument will be added
35:01 - mark dot get text dot to string and
35:08 - don't forget to close this and once is
35:13 - it is successful what we can do is we
35:17 - can check if it's successful or not by
35:20 - declaring a boolean variable so
35:23 - bull is inserted is equal to right
35:31 - because this insert data method return
35:33 - boolean value we have made this method
35:36 - to return boolean value if the data is
35:39 - inserted it's going to return true
35:41 - otherwise false so if this is true that
35:49 - means data is inserted right so we can
35:52 - just display some message
36:02 - you
36:06 - otherwise if it returns false then we
36:09 - can print the negative message
36:17 - code for inserting data is done one
36:20 - thing which is remaining is just called
36:24 - this method inside the oncreate method
36:26 - of your main activity so that this
36:30 - method will be called whenever we click
36:33 - this add data button okay and now we are
36:38 - going to run our program so now our app
36:40 - is running and you can see three added
36:42 - texts so we are going to add some name
36:45 - surname and mark
36:51 - and once our data is inserted we can
36:55 - click this add data button and this is
36:58 - going to show at the message if it's
37:00 - inserted or not so click this and it
37:03 - says data inserted right now in the last
37:06 - video I have shown you the trick how you
37:09 - can check whether it's really into
37:11 - inserted or not using this Android
37:14 - device monitor I'm not going to show you
37:17 - how you can do it once again but just
37:20 - follow the trick as we have done in the
37:23 - last video and you will be able to see
37:26 - the data so I'm going to go to my
37:31 - database and I'm going to save this
37:34 - database to my local PC and now I can
37:39 - see this database using the SQLite
37:41 - manager as I have shown you in the last
37:44 - video and now you can see this data is
37:49 - inserted in our database right so in
37:55 - this way you can insert data into your
37:57 - database using Android I hope you've
38:01 - enjoyed this video in the next video
38:03 - we are going to see how we can display
38:06 - this data because it's not convenient to
38:08 - go every time to the database and see it
38:11 - in the Escalade manager so we are going
38:13 - to create some code to display the data
38:17 - using some button in the last video we
38:20 - have seen how to insert data into SQLite
38:24 - database using Android in this video we
38:27 - will see how we can get all data from
38:31 - SQLite database table and show it on
38:35 - your Android so let's get started first
38:39 - of all what we are going to do is we are
38:42 - going to take a button and this button
38:45 - we are going to use to view all data so
38:49 - I'm going to change the text as view all
38:54 - and the button ID I'm also going to
38:58 - change as button now once our button is
39:01 - created what we are going to do is we
39:03 - are going to create a method to get all
39:06 - the table data so we are going to go to
39:09 - our database helper class which we have
39:13 - developed in the last videos and inside
39:16 - this database helper class what we are
39:20 - going to do is we are going to create a
39:21 - new method and this method we are going
39:24 - to call it as get all data which will be
39:27 - a public method and it's going to return
39:30 - a class or instance of a class called
39:33 - cursor and this cursor class we will see
39:37 - what this is but let's create our method
39:41 - first so get all data and it's not going
39:48 - to take any argument for now and inside
39:51 - we will write a query to get all the
39:56 - data now this cursor will show some
40:00 - errors so you just need to press alt
40:02 - enter to import that loss which is
40:06 - cursor class and now what we are going
40:08 - to do is we are going to create the
40:11 - instance of database class just as we
40:16 - have done in the last video you can just
40:18 - copy this first line from the function
40:22 - insert data from the last video and
40:24 - paste it in this new function and then
40:28 - we will create an instance of a cursor
40:32 - class so this is our cursor class and we
40:36 - will name it as for example rs4 result
40:40 - and then we will take an instance of our
40:43 - database and then we will call a rock
40:47 - very on this database so rock weary and
40:53 - if you are know how to query SQLite
40:58 - database you may know how to query all
41:01 - the data from the table so this is a
41:05 - simple query I'm going to write which is
41:09 - select all astir extends for all right
41:15 - from your table so our table name is
41:19 - table name itself which we have defined
41:22 - in the last video so plus table name and
41:26 - then it takes an argument which we are
41:32 - going to pass it as null for now and now
41:35 - we just need to return the instance of
41:39 - this cursor which is our es right so
41:42 - return our es now you may be wondering
41:45 - what this cursor class does you can
41:49 - press ctrl + click on this cursor and
41:52 - you will reach to this cursor class and
41:56 - this cuz a class is an interface which
41:59 - provides the random readwrite access to
42:03 - your result okay so you can see here we
42:06 - are querying the database and the result
42:09 - we are storing it in this cursor
42:13 - instance and using this we have the
42:17 - access to our data right so our get all
42:20 - data is created now we are going to go
42:23 - to our main activity dot Java class and
42:28 - in here first of all we will create the
42:31 - variable for view all button right if
42:34 - you remember we have created this view
42:36 - all button so we will create an instance
42:39 - for this here so
42:43 - and now we will cast this button
42:52 - now once we have casted our button we
42:56 - can use this button object to call set
43:00 - on click listener right let's create a
43:02 - method so it will be a public method and
43:06 - we will say this will return nothing and
43:11 - we will name it as view all method it
43:16 - takes no arguments and in here we can
43:21 - call the object of our view all button
43:24 - and then we can call set on click
43:27 - listener set on click listener and
43:30 - inside this we will create a new on
43:35 - click listener and when this button is
43:40 - clicked we want to perform some action
43:43 - right so what we are going to do here is
43:46 - we are going to get all the data using
43:50 - this function which we have just created
43:52 - which is get all data right so we will
43:56 - use the instance of our database helper
44:00 - class which is my DB which we have
44:03 - created dot get all data right and we
44:08 - are going to save it in the cursor
44:10 - because its returns an object of cursor
44:13 - right
44:15 - now this has some properties this object
44:19 - have some properties if we call this
44:23 - object and we can get the count of the
44:28 - lines so get count and this is the
44:32 - result count we are getting if this is
44:35 - equal to zero then it means that there
44:40 - is no data available for us right from
44:43 - this get all data by querying to the
44:47 - database and then we have to show some
44:50 - message so right now I'm just writing a
44:54 - comment and we are going to create a
44:56 - method for showing message in some
44:59 - moment and then we are going to return
45:02 - if there is no result then we are going
45:05 - to show error and return otherwise if
45:09 - there is some result then we are going
45:13 - to create some string buffer and then we
45:18 - are going to display this data so we are
45:22 - going to create an instance of string
45:23 - buffer and we will name it as buffer is
45:27 - equal to new string buffer and then we
45:33 - are going to get all the data one by one
45:37 - using this re s object and how we can do
45:40 - it we can use a while loop and as a
45:46 - condition of this while loop we can take
45:49 - this re s object and we can call a
45:53 - method move to next so dot move to next
46:00 - it moves your cursor to the next result
46:04 - okay and then we are going to get this
46:07 - result and we will store it in the
46:12 - buffer right so buffer dot append and in
46:17 - this buffer we can append the result
46:23 - okay and how we can append this we can
46:27 - write the name of our call
46:29 - so our first call name was ID and then
46:34 - this :
46:36 - and then plus we will use this re s
46:41 - object and then we are going to get the
46:46 - string so get string and then we will
46:50 - pass an index of the column and the
46:54 - index of the column starts from 0 and if
46:57 - you remember our table was containing
47:01 - four columns one was ID second was name
47:04 - third was surname and fourth was mark so
47:08 - index of ID will be 0 index of her name
47:11 - will be 1 index of surname will be 2 and
47:15 - index of marks will be 3 okay so that's
47:20 - what we are going to do so index of ID
47:22 - is 0 that's why we are giving here 0 and
47:26 - then we can just give or change the line
47:33 - to next and we will do the same for the
47:36 - other columns also so
47:43 - of name was one index of surname was two
47:47 - and index of marks is three and let's
47:51 - give double line break to the last
47:55 - column so that when next data is printed
47:59 - it's printed after all line break and
48:02 - then we want to show all the data so
48:05 - let's write the comment
48:07 - so let's create a new method which will
48:10 - be also a public method and it will
48:14 - return nothing so void the method name
48:20 - will be show message it's going to take
48:27 - two argument first is the title and
48:33 - second is the message itself
48:35 - okay so string message and in here we
48:45 - are going to create an instance of a lot
48:48 - dialog builder so just write alert
48:51 - dialog thought builder and we will name
48:59 - it as builder is equal to new a lot
49:04 - dialog dot builder and it takes the
49:09 - argument which is the context so this
49:14 - itself and using this builder we can
49:18 - create a lot dialog ok so we can set our
49:23 - title and set message using this builder
49:27 - to a lot dialog so let's create first of
49:33 - all let's use this builder to set cancel
49:38 - label so set is canceled label so that
49:41 - we can cancel it after its use and then
49:47 - we will set the title so builder dot set
49:52 - title and title will be the title which
49:57 - we get from this argument and then we
50:02 - will set the message so builder dot set
50:06 - message and message will be this message
50:11 - which we will get in the argument ok and
50:14 - then we can just call show method on
50:19 - this
50:21 - this will show our dialogue okay
50:24 - dialogue or alert dialogue so let's just
50:27 - copy this so message function here and
50:31 - first of all if no data has found what
50:35 - we are going to do is we are going to
50:37 - show some message so the title of this
50:40 - message box will be error and we will
50:46 - display nothing found or you can say no
50:54 - data found okay and when the data is
50:59 - found in here we can just show some
51:04 - message that data the dialogue title and
51:11 - the second argument will be the buffer
51:14 - and we need to convert this buffer into
51:17 - the string so just called to string on
51:20 - it okay and now our code is done one
51:25 - more thing which remains is we need to
51:27 - call this view all method inside our on
51:31 - create methods so just copy this view
51:33 - all method and paste it inside your on
51:38 - create method of your main activity okay
51:42 - now let's run our program so our app is
51:48 - running now and when we click this view
51:51 - all button we will be able to see the
51:55 - data so right now we only have one
51:59 - student data so it's showing ID one and
52:03 - name surname and age and we can add some
52:08 - more data for the student
52:18 - and let's add this second student data
52:21 - here and I'm going to click this add
52:24 - data button and data is inserted and now
52:28 - you all the data and now we have two
52:31 - student data ID 1 and ID - ok so in this
52:36 - way you can insert some more data and
52:38 - then using this view all button you will
52:41 - be able to see all the data here and in
52:46 - this video we will see how we can update
52:48 - data in SQLite database using our
52:53 - Android app till now we have seen how to
52:56 - insert data into the SQLite database and
53:00 - how to view it and let's add one more
53:03 - button here and this button we are going
53:06 - to use to update the data so I'm going
53:09 - to change the name as update and one
53:11 - more thing we want to do is if you
53:14 - remember our database table contains 4
53:17 - columns first one was ID second one was
53:21 - name surname and the maths code by the
53:25 - student right and to update the data we
53:29 - need a unique reference of the row so
53:34 - that we can you know tell SQLite that we
53:38 - want to delete the data from this row
53:42 - particular row right because names can
53:47 - be same so if you want to change the
53:50 - name of one person which shares the name
53:54 - with the other person then the data can
53:57 - be changed for both the names if you
53:59 - don't know what is the unique you know
54:03 - row or unique column in this
54:06 - okay so ID we have defined as a unique
54:12 - column for this database table so what
54:16 - I'm going to do is I'm going to quickly
54:18 - add this ID text view and you know added
54:23 - text so that we can enter the ID also so
54:27 - now I have added this ID added text
54:30 - and textview here right now we are good
54:34 - to go
54:34 - so next thing you need to do is we need
54:38 - to create a function in our database
54:42 - helper dot Java class which we have
54:44 - created in the last videos so let's go
54:47 - to database helper dot Java file and in
54:52 - here till now we have created insert
54:54 - data and get all the functions right we
54:57 - will create one more function here and
54:59 - we will call it as update data okay so
55:05 - it will be public and will return
55:08 - boolean so we need to know if the data
55:11 - is really updated or not so we are going
55:14 - to return boolean and we say this
55:17 - function name is update data okay
55:25 - arguments it's going to take is it's
55:28 - going to take four arguments 1st
55:31 - argument we are going to pass here will
55:35 - be string ID 2nd is the string name so
55:42 - basically I want to pass all the four
55:47 - column data to it because our table
55:51 - contains four columns ID name surname
55:54 - and marks right so I am going to pass
55:57 - all the four column data I am going to
56:00 - take it from added text and pass it in
56:03 - this function right now in here
56:06 - what we are going to do is as we have
56:08 - done in the insert data function first
56:11 - of all we will create a SQLite database
56:14 - instance so I'm going to copy this from
56:17 - here to here and second we are going to
56:20 - create an instance of content value okay
56:25 - so let's create that and then as we have
56:30 - done in this insert data function that
56:34 - we were putting whatever data is passed
56:38 - from the argument to this content
56:42 - content
56:44 - using put right so let's do it
56:48 - and one more column we need to add here
56:51 - and this will be for column one right
56:56 - this will be column one and it's IB in
57:01 - our case right because this contains
57:05 - extra ID here now the only difference in
57:09 - this function and the insert data
57:11 - function is the method we are going to
57:15 - use now so just take your database
57:17 - instance now and then call update here
57:22 - and this update will update your date
57:26 - whatever argument you pass here first
57:28 - argument it takes is the name of your
57:30 - table okay so give the name of your
57:34 - table this is our table name of if you
57:36 - remember we have declared table name
57:38 - here right so first argument is the
57:42 - table name right second is the content
57:47 - value so it takes second argument as
57:50 - content value so we take this instance
57:54 - of content value and pass it here third
57:58 - argument is the condition which we want
58:01 - to pass here so what we want to do we
58:05 - want to update data on the basis of for
58:09 - example ID because ID is our unique
58:12 - primary key here and on the basis of
58:15 - primary key we can differentiate data so
58:18 - in here we will write ID is equal to
58:21 - question so we will you know ask
58:25 - whatever ID is passed using this ID
58:29 - parameter we are going to query this and
58:32 - fourth is the value on the basis of
58:34 - which we want to update our data so this
58:38 - is the column name on the basis of which
58:41 - we want to update the data and our
58:43 - column name is ID so you can just write
58:47 - here column name ID is equal to question
58:49 - mark and then in here fourth argument
58:53 - let's go inside this update so just
58:56 - hover over control and
58:58 - click and see it takes the whole
59:00 - argument as the string array right so we
59:05 - will go back and pass string array here
59:09 - right so we can just right here in the
59:13 - curly braces we just pass our ID and we
59:19 - want to pass the new instance of it so
59:22 - new string ID okay
59:26 - and if everything goes well we want to
59:30 - return return true to know that if the
59:38 - data is really updated or not now this
59:41 - is done so what we are going to do is we
59:44 - are going to move to our main activity
59:47 - dot Java file and in here we will
59:50 - declare one more button variable which
59:54 - will be our button for updating so
59:59 - button update okay and then we are going
60:05 - to take this button instance and we will
60:09 - cast it as a button using the ID so the
60:13 - idea of this button is button itself
60:16 - right now so let's change the ID to
60:19 - button underscore update or something
60:21 - like this button underscore update so we
60:28 - know that this button is for update
60:30 - right then we will go to main activity
60:33 - dot Java we already had declared our
60:36 - button for updating so take this button
60:40 - go to your oncreate method where you
60:43 - have typecasted all other tools or
60:48 - widgets is equal to button so we have
60:53 - done casting this button and now we are
60:56 - going to create a function and this
60:58 - function will be public I am going to
61:00 - declare this function here itself void
61:05 - update data for example it's not going
61:09 - to take any argument
61:11 - and inside this function what we are
61:14 - going to do is we are going to take this
61:16 - button and call set onclicklistener on
61:20 - it so got set on click listener and
61:24 - inside this new on click listener and
61:29 - inside this we just need to call our
61:36 - update function from our database helper
61:40 - so this was update function the name was
61:44 - little bit wrong so let's update make it
61:48 - update function right and now what we
61:52 - are going to do is you know mean
61:55 - activity log Java file inside this on
61:57 - click method we will declare a boolean
62:00 - to check if the data is updated and we
62:04 - will name it as is updated is equal to
62:09 - and now we are going to take about my
62:11 - database instance which we have created
62:14 - in our previous videos from our database
62:18 - helper class right so my DB dot of death
62:23 - data and now this update data function
62:26 - takes 4 argument as we know ID name
62:29 - surname and age right and in here we
62:34 - need to declare one more added text
62:37 - variable for ID because we have created
62:41 - this new added text here which is added
62:44 - text ID so let's create one more
62:47 - variable for added text in our main
62:50 - activity dot Java file so that's add for
62:54 - example added text for ID okay and then
63:03 - we take this added text and add to our
63:07 - on create method and we will cast it
63:12 - same as we have done for other added
63:15 - text in the previous videos but the ID
63:17 - here will be for added text ID right so
63:22 - edit text ID
63:24 - right and now we can take this added
63:28 - text ID and pass it in our update data
63:32 - method here dot get text right so it
63:38 - will take the text from the edit text
63:40 - and it will pass to this function same
63:44 - we will do for all of our other added
63:48 - text which was for name surname and
63:51 - marks
63:58 - and the reason why it's showing error
64:01 - because we need to convert this get text
64:04 - to strengths right so dot to string okay
64:10 - add this to other variables also
64:16 - so basically what we have done we have
64:19 - called our update data function and we
64:22 - have passed whatever we are getting from
64:25 - added text right now if this function
64:32 - returns true which is update data then
64:35 - so we will check if Bob is update is
64:42 - equal to true then what we are going to
64:48 - do we are going to show some message
64:53 - right so we can take these messages from
64:57 - our last video by the way in the last
64:59 - video I forgot to give this double equal
65:02 - to so when we are checking equality we
65:06 - need double equal to single equal to we
65:09 - need in case of assigning the values
65:12 - right so I'm going to copy these
65:15 - messages from here and I'm going to
65:19 - paste it here okay so now we will say
65:25 - data is updated or data is not updated
65:30 - in case if it returns false the data are
65:37 - not updated okay
65:39 - now just copy this function and paste it
65:44 - inside our oncreate method so that it
65:47 - can be called when this on treat method
65:50 - is called and now we are ready to run
65:53 - our program so let's run it so now our
65:56 - program is running and we can see when
66:00 - we click this view all button which we
66:02 - have created in the last video that we
66:04 - have two rows of data one is ID one and
66:09 - name is mark and surname is denser and
66:12 - second is Dom right for example I want
66:16 - to update the first letter of the name
66:19 - math I want capital M here instead of
66:23 - small m and same I want to do for this
66:27 - Bentsen here right so what we are going
66:29 - to do we are going to just write the
66:32 - name here so I have corrected the
66:35 - spelling or in the name instead of small
66:38 - M I have added capital lemons instead of
66:41 - small B I've added capital B and other
66:45 - things remain same marks remain same and
66:48 - if you remember the ID of this name mark
66:52 - is 1 this is important here because on
66:55 - the basis of ID we are adding the data
66:58 - right and now we can click this update
67:02 - button just click this update and it
67:05 - says data updated okay so let's check
67:09 - the data once again by view all and now
67:11 - you can see the mark name mark with the
67:16 - capital M and the surname Benson with
67:19 - capital B so our data is updated
67:23 - successfully right so in this way you
67:26 - can update the data in the SQLite
67:30 - database using your Android app and in
67:32 - this video we will see how to delete
67:34 - data in SQLite database using our
67:38 - Android app so let's get started till
67:41 - now we have seen how to insert data how
67:43 - to update data and how to view data in
67:46 - SQLite database so let's add a new
67:49 - button and we will call this button as
67:52 - delete data so let's change the text of
67:57 - this button as delete and the button ID
68:01 - will change it to button delete okay now
68:07 - once we have this button what we are
68:10 - going to do is we are going to go to our
68:13 - database helper class which we have made
68:17 - in our previous videos and in this class
68:21 - we will create a new function and we
68:23 - will call it as delete data function or
68:27 - method as we say in Java so let's call
68:31 - it a public function which will return
68:34 - integer and we will call it as delete
68:37 - data function for
68:39 - sample and it will take one argument and
68:43 - this argument will be the ID of our
68:48 - table okay
68:50 - so we know that we have four columns as
68:53 - I always mentioned in our database table
68:57 - one is ID name surname and age this
69:00 - table we have been working on and we
69:04 - want to delete the data on the basis of
69:07 - ID because ID is our primary key here
69:12 - primary key means the unique identifier
69:16 - on the basis of which we can recognize
69:18 - the data which we want to affect in this
69:23 - case we want to delete this data right
69:25 - so that's why this function delete data
69:29 - will take this ID as an argument now the
69:34 - first thing which we will do is we are
69:36 - going to create the SQLite database
69:39 - object using this get writable database
69:44 - which we have done in the last videos
69:46 - also right so just copy this and paste
69:51 - it here okay and the next thing is we
69:55 - will take this database instance to
69:57 - delete the data
69:59 - so take DB here and we are going to call
70:04 - delete on this database instance and
70:10 - this delete takes three arguments one is
70:15 - the name of your table so let's press
70:18 - ctrl and go inside this delete function
70:21 - first of all and well let's see what it
70:24 - takes
70:24 - so this delete function takes the name
70:26 - of your table and then second argument
70:29 - is the bearclaw's and the third argument
70:32 - is the value which you want to pass as a
70:35 - string array and in return it returns
70:39 - the number of affected rows if the data
70:43 - is deleted or number of rows which are
70:48 - deleted otherwise if no data is deleted
70:51 - it returns
70:53 - zero okay so we are going to use this
70:57 - return integer to check how many rows
71:00 - are affected or if any rows are affected
71:04 - or not and on the basis of this we can
71:06 - print the result right so we will come
71:10 - back to our database helper class and
71:12 - first argument we will pass it as the
71:15 - table name our table name is student
71:17 - table so we will take the table name
71:19 - variable and pass it as a first argument
71:23 - second argument is the clause and laws
71:27 - is in this case is we want to delete the
71:30 - data on the basis of ID right and the ID
71:36 - column name in our case is ID here right
71:39 - so you can take this ID and we want to
71:43 - ask for the ID so we will ask what is
71:47 - the IB like this ID is equal to question
71:50 - and then this question mark will be
71:55 - replaced by the value we are going to
71:57 - pass here as a third argument so this
72:00 - will be the news string array and here
72:07 - we will pass the ID the value of ID
72:10 - which we take from here and this is
72:14 - going to delete your data now we are
72:17 - seeing here I am really returning
72:19 - integer so you can just write return
72:22 - because this delete method in the SQLite
72:27 - database class returns the integer right
72:31 - so this is the method we want to create
72:35 - in database helper class now what we are
72:37 - going to do is we are going to go to our
72:39 - main activity dot Java class where we
72:44 - will write a code for the button press
72:49 - right so first thing we are going to do
72:52 - is we are going to declare one more
72:55 - button variable and we will name it as
72:58 - button delete for example and now we are
73:01 - going to cast this button in our on
73:03 - create method so in here and
73:07 - to copy this and I'm going to just cast
73:11 - this button delete and change the ID so
73:15 - ID dot button delete okay now next thing
73:21 - is as we are always do is we will create
73:25 - a function which will be a public
73:29 - function and it's going to return
73:31 - nothing and we will name it as delete
73:35 - DITA function and it's going to take no
73:38 - argument and in here what we are going
73:42 - to do is we are going to take our button
73:43 - delete variable dot set on click
73:49 - listener and we will create a new on
73:53 - click listener and in here what we want
73:57 - to do is we just want to call our delete
74:00 - data function right so here what we are
74:06 - going to do is we are going to declare
74:08 - an integer variable and we will call it
74:11 - as deleted rows right is equal to and
74:18 - then we are going to take the object of
74:21 - our my database class or database helper
74:25 - class which is my DB in our my case dot
74:29 - we will call this delete data function
74:32 - which we have created just now right and
74:35 - that this takes one argument which is ID
74:39 - so let's see what is the ID of this
74:43 - added text ID so this is added text ID
74:48 - itself right so we will just write edit
74:53 - text ID
74:54 - okay now we are going to take the text
74:57 - from it so we will call get text
74:59 - function here and then we are going to
75:02 - convert this into string right so
75:06 - whatever this function returns we will
75:10 - check how many in number of rows are
75:12 - affected if this deleted rows not equal
75:17 - to zero that means
75:20 - ROS are deleted or better we can say is
75:25 - greater than zero okay if this is
75:28 - greater than zero then what we are going
75:31 - to do I will copy this to save some time
75:34 - and we are going to create a toast which
75:39 - will show the message like this data
75:44 - deleted and if this deleted row is equal
75:49 - to 0 so if number of rows deleted is
75:53 - equal to 0 or less than 0 then we say
75:57 - they turn not deleted okay so this is
76:05 - our function which we want to create in
76:07 - our main activity dot Java file and
76:11 - don't forget to copy this and paste it
76:15 - in your oncreate method so call this
76:17 - function in your oncreate method and now
76:21 - we are going to run this program so
76:24 - let's run it so now our app is running
76:28 - first of all let's see what data we have
76:32 - so we will click view all and right now
76:36 - we have two rows right one is ID one and
76:41 - one is ID 2 so let's delete this ID 2
76:46 - data for example right so what we need
76:49 - to do is we will just go to this ID
76:51 - added text and we will just write 2 here
76:56 - okay and now what we are going to do is
77:00 - we will just click delete and it says
77:05 - data deleted and we will see once again
77:09 - all the data so we will click view all
77:11 - and now only one row is remaining here
77:16 - so that means it has deleted of a row
77:20 - number 2 or ID 2 data okay in the same
77:24 - way if you write here 1 and click delete
77:27 - it will delete the row 1 or row with ID
77:32 - 1
77:34 - in this way you can delete the data in
77:36 - SQLite database using your Android app I
77:40 - hope you have enjoyed this video please
77:42 - rate comment and subscribe and bye for
77:43 - now
77:51 - you