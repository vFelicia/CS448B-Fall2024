00:00 - welcome to programming knowledge so in
00:02 - this video we are going to discuss about
00:04 - asynchronous operations and dot okay so
00:08 - the question that arises is why a
00:11 - synchronous operations so the answer to
00:14 - that would be a synchronous operation
00:16 - select your program keep running while
00:19 - waiting for another operation to finish
00:22 - okay so let's say for example we want to
00:26 - store data in our server so this type of
00:30 - operation doesn't execute instantly but
00:32 - might take some time depending upon the
00:35 - internet speed or size of data etcetera
00:37 - so if we don't use a synchronous
00:41 - operation user will have to wait until
00:44 - our program is interacting with the
00:46 - server which will create a bad user
00:49 - experience so to prevent that we use a
00:52 - synchronous operations and for this
00:55 - purpose dart provides us three special
00:58 - keywords to use they are future a sink
01:01 - and a weight so first we are going to
01:06 - discuss about future ok so our future
01:10 - represents the result of an asynchronous
01:13 - operation and can have two states only
01:16 - either uncompleted State or completed
01:20 - State so how this works is when we call
01:23 - an asynchronous function it returns a
01:27 - uncompleted future and then future is
01:31 - waiting for the functions a synchronous
01:34 - operation to finish or throw an error
01:37 - and soon as it finishes or throws error
01:41 - the future state changes from
01:43 - uncompleted to completed ok so let's
01:47 - take an example and the key word future
01:52 - we have capital F in it ok so let's say
01:56 - we have a future method a future
01:58 - function we call it switch user data
02:09 - and what it basically does is with
02:12 - return future dot delayed okay so this
02:19 - means that using this delayed method we
02:23 - can delay the process for sometimes that
02:25 - is equivalent to sleep in
02:28 - multi-threading in Java or in any other
02:31 - common programming language
02:33 - I mean object-oriented programming
02:35 - language okay so then we have another
02:38 - class called duration and it takes all
02:41 - the time parameters that is seconds
02:45 - minutes hours days okay so for now
02:48 - suppose we assume that our program will
02:52 - take two seconds to interact with the
02:55 - server so I'll give it a seconds and
03:00 - that is two that means I this will wait
03:04 - for two seconds and then start executing
03:06 - okay and we are doing this because we
03:10 - have assumed two seconds to be the time
03:12 - of our program to be interacting with
03:15 - the server okay so after this we have an
03:18 - unnamed function which contains the code
03:21 - that will be executed after this delay
03:24 - of duration two seconds and simply I
03:28 - wanna print data okay so this is our
03:33 - function now we can also specify the
03:37 - return type of the future okay now over
03:40 - here in this first user data I have a
03:43 - return keyword but it is not actually
03:45 - returning any data it is simply printing
03:48 - the word data that means I am not
03:51 - returning anything and if I am not
03:53 - returning anything then we all know the
03:55 - keyword which is void which means this
03:58 - function will not return any data now
04:00 - I'll comment this out for now okay now
04:05 - after that I will call this method set
04:08 - user data
04:13 - and after that I can say have a print
04:17 - statement
04:20 - switching user data okay so now let's
04:25 - try running this okay so now you can see
04:32 - we have fetching user data first and
04:35 - then data but actually according to the
04:39 - convention we have first called fetch
04:41 - user data which is this method so this
04:43 - should be printed first so that means
04:46 - our delay function is working fine and
04:49 - that is how the asynchronous functions
04:53 - work that means over here if there is a
04:56 - delay of 2 seconds it will not wait for
04:59 - 2 seconds to execute the rest of the
05:02 - code it will directly start executing
05:04 - the rest of the code and as soon as this
05:07 - finishes and the future states become
05:11 - completed and it hardly affects the rest
05:15 - of the execution of the program so then
05:18 - this function is called an asynchronous
05:20 - function ok that means our program is
05:24 - still running and not caring about the
05:27 - completion of this function means the
05:30 - completion of execution of this function
05:33 - ok so this is how we use futures ok so
05:38 - the next thing that we are going to
05:40 - discuss is a sink and a weight so these
05:43 - keywords provide a declarative way to
05:46 - define a sync function and use their
05:48 - result ok so let's say this function
05:52 - remains same and instead of printing
05:54 - data now it actually returns something
05:57 - and which is eventually a string okay so
06:01 - means after 2 seconds data will be
06:03 - returned ok now if it is returning
06:05 - string I need to change this to string
06:09 - okay
06:10 - and now after that over here I will
06:14 - create another method which is string
06:18 - and I'll call it user message
06:23 - okay anything that we like and then what
06:28 - it basically does is where data is equal
06:33 - to fetch user data means we are calling
06:40 - this method okay and then I am simply
06:45 - printing this or simply returning a
06:48 - string because we have a string return
06:51 - type here return data and now in our
06:57 - main method all we'll do is we remove
07:00 - all these things and we write print user
07:09 - msg okay now over here you can see it is
07:13 - giving us an error so all we can do is
07:15 - surround return side quotes and do
07:18 - string interpolation okay so now dart
07:22 - will infer that it is a strength so now
07:25 - let's try running this and see what is
07:27 - the output okay so as according to doc
07:36 - convention the output should be data but
07:38 - instead of that we are getting a future
07:41 - of string that means as I earlier said
07:44 - if we execute our future it returns a
07:47 - future and that is in uncompleted state
07:51 - and it is expecting to be completed or
07:54 - thrown error okay so now over here you
07:57 - can see what basically happened was that
08:00 - this function was executed and as this
08:03 - is a synchronous operation it didn't
08:05 - wait for this function to finish and
08:08 - returned the data and why and since this
08:12 - this was not yet finished it returned
08:15 - the uncomplete state of future and that
08:18 - is why we are getting such type of
08:21 - output okay so this is what we call a
08:24 - uncompleted future okay now completed
08:27 - whew
08:27 - has a proper accurate value okay
08:31 - so I hope you are understanding what I
08:33 - am trying to say and now to prevent such
08:36 - type of error what we need to do is we
08:39 - will use the asynch and await keyword
08:41 - okay so what a weight keyword basically
08:44 - does is that it will wait for this
08:49 - function to execute or basically it will
08:51 - wait for this functions future to be of
08:55 - completed states okay and then this a
08:59 - weight function is giving an error over
09:01 - here and that is because a weight
09:03 - function never goes without a sync
09:06 - function okay a sink and of it always go
09:09 - together okay if we write a wait and
09:12 - don't write a sync it will give us an
09:14 - error however whilst versa will not give
09:17 - an error and and that is because a sync
09:20 - is just allowing that function to use of
09:24 - it and then if we don't use of it then
09:26 - that is not a problem but if we use a
09:29 - wait and we have not allowed that
09:31 - function to use of it then that thing
09:34 - will give us a problem okay I hope you
09:38 - are understanding these things now as
09:40 - you can see this is now a synchronous
09:43 - function and over here also you have
09:46 - seen ah a synchronous function but the
09:48 - difference between these two are
09:49 - synchronous functions were this a
09:52 - synchronous functions a function returns
09:54 - a future while this a synchronous
09:56 - function is returning a string and that
10:00 - is why we are getting our error over
10:01 - here because asynchronous functions
10:06 - always return our future okay so instead
10:10 - of string this will now be future string
10:24 - so now it is a future string and since
10:28 - it also will now return over here
10:32 - uncompleted state of future and we want
10:35 - a completed state of future that means
10:37 - we want some actual result we will use a
10:40 - weight over here also and now since this
10:43 - is using a weight we need to give a sink
10:46 - over here keep in mind a sink as always
10:49 - after the ending parenthesis and before
10:54 - the opening curly braces okay so now
10:58 - let's try running this program and now
11:00 - instead of getting this instance we
11:03 - should be able to see this data being
11:06 - printed so let's see and you can see as
11:13 - soon as the execution is completed it
11:16 - waits for two seconds and then data is
11:18 - being printed so it is waiting for two
11:20 - seconds because over here we have used
11:22 - of it which is making the program stop
11:25 - for two seconds until this has a
11:27 - completed state of future and the same
11:30 - goes over here so this were all the
11:34 - basics about future are synced and away
11:37 - okay so I hope everything was clear
11:40 - thank you