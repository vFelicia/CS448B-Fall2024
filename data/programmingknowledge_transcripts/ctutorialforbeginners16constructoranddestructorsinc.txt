00:01 - hello guys in this video I'm going to
00:03 - teach you about Constructors and
00:05 - destructors in
00:06 - C and I'm also going to show you how you
00:09 - can Define Constructors and destructors
00:13 - and what is the purpose of Constructor
00:15 - and destructors in C so what is a
00:19 - Constructor a Constructor is a special
00:22 - method in the class which we use to
00:27 - instantiate some values or
00:30 - instantiate some method let's see what
00:35 - uh I mean by instantiation or
00:39 - uh
00:41 - initialization
00:43 - okay first of
00:45 - all whenever you declare a Class
00:51 - C will create a Constructor and
00:54 - Destructor for you even if you don't
00:58 - Define a Constructor and Destructor by
01:01 - yourself so for example we have defined
01:04 - this class in the last video this is a
01:07 - box class which has the member variable
01:09 - length bread height
01:11 - LBH and the volume we were it has the
01:14 - member method volume and we were
01:17 - calculating the volume and we were using
01:20 - the instance of this class to calculate
01:23 - the volume right so this class we
01:26 - have uh written last time so this class
01:31 - also has a Constructor and Destructor
01:34 - which is created by C internally for you
01:39 - even if you haven't defined any
01:41 - Constructor and
01:43 - Destructor and the biggest or the
01:46 - important property of Constructor is it
01:50 - has the same name as your class name
01:55 - okay so how you can define a Constructor
01:58 - just give a ex specify for example
02:02 - Public
02:06 - public it should be public and then the
02:10 - name of the class our name of the class
02:14 - is box you see here so Constructor has
02:17 - always the same class same name as your
02:21 - class name and just remember that
02:25 - Constructor don't return anything your
02:28 - method return
02:30 - uh the values and even if they don't
02:33 - return the value they return null or
02:37 - nothing and we will uh add here in
02:42 - returning value as void if they don't
02:44 - return anything but the Constructor
02:47 - never returns anything okay so just
02:50 - remember that but they can take
02:53 - parameters so for taking parameters you
02:56 - can pass those parameters inside these
02:58 - brackets and you can also write some
03:02 - code inside the Constructor in between
03:06 - these
03:07 - two curly Braes okay
03:12 - now I already uh told you that
03:15 - Constructors are initialized
03:18 - automatically whenever you create an
03:21 - instance of a class so to see this let's
03:25 - see an example okay so what I'm going to
03:28 - do is I will
03:31 - say console
03:34 - dot right
03:37 - line and I will
03:40 - say in this double quote
03:48 - The Constructor
03:54 - is initialized okay now even if if I am
04:01 - not using this Constructor in my class
04:06 - here I I have just defin defined uh this
04:10 - object of this class okay so I haven't
04:14 - called this Constructor specifically
04:16 - right
04:18 - but whenever you run your program
04:21 - whenever you create even a object of the
04:24 - class so let's try and comment this code
04:28 - first okay so you will better
04:34 - understand
04:39 - okay so now we only have the object
04:44 - definition box and box one is equal to
04:48 - new box so we have created an instance
04:50 - of a class and when ever you create an
04:54 - instance of a class Constructor is
04:57 - automatically called so just just when I
05:00 - run this
05:01 - program you will see this message the
05:05 - Constructor is initialized right so at
05:09 - the time of making the object this is
05:12 - automatically called okay now let's see
05:16 - the definition of Destructor Destructor
05:19 - is
05:20 - also created if you don't create a
05:24 - Destructor by yourself c will create a
05:28 - Destructor for you
05:31 - and the structors are also having the
05:33 - same name as your class name
05:38 - okay so let's see how we can Define the
05:41 - structure we just
05:44 - need the till they sign just uh search
05:48 - for this till they sign here it's on
05:55 - above your tab button okay and then the
05:59 - same name of the class which is box and
06:03 - then
06:05 - just the
06:07 - parameter brackets and then these
06:11 - semicolons okay so this is your
06:18 - distructor and Destructor is also called
06:21 - whenever your object goes out of scope
06:25 - so you created your object and in the
06:28 - next SL
06:30 - you your object has gone out of scope
06:33 - because you are not using this object
06:36 - anymore anywhere else in the in in your
06:39 - code so the structure is called
06:43 - automatically when your object goes out
06:46 - of scope okay so let's try to see this
06:50 - Behavior also I will just copy this U
06:54 - console. right line and I will
06:57 - say uh
07:03 - the destructor is
07:08 - called and when I run the
07:11 - program you see here it's
07:18 - initialized and it's not showing any
07:20 - message of the destructor why because
07:25 - you have this console. readline code
07:29 - and this is holding this D structor to
07:33 - not to be called and unless and until
07:36 - this is there your object will not uh go
07:42 - out of context so let me just comment
07:45 - this line console. read line read key
07:49 - and we just only have the definition of
07:52 - this object which is box box one is
07:55 - equal to new box right now I will press
07:58 - contr f F5 to run my program so just uh
08:02 - run your program with control F5 okay
08:06 - and now you will see here the
08:09 - Constructor is initialized and when the
08:12 - when your object or instance goes out of
08:15 - the scope that means it as soon as it
08:18 - reaches here the end of the main program
08:21 - your object is out of scope now and it
08:24 - call it calls this Destructor and it
08:27 - shows the message Destructor is called
08:31 - okay so just for the demonstration that
08:35 - the this Constructor and destructors are
08:37 - called automatically whenever you create
08:41 - an instance of a class and whenever you
08:45 - go out of scope of your instance okay
08:50 - now this
08:52 - definition of uh Constructor is not
08:55 - doing much right it's just printing a
08:58 - message
08:59 - and you hardly do this in your coding
09:03 - that you want to print the message
09:05 - whenever you define your Constructor
09:07 - there are more useful ways to use
09:10 - Constructor and the most important use
09:13 - of Constructor is it is used to
09:17 - initialize the
09:19 - variables in your class okay or
09:23 - initialize values in your class so let's
09:26 - see how we can initialize values in the
09:30 - class
09:31 - so in here I have the basic definition
09:35 - of the Constructor public box and these
09:38 - curly braces and what I can do is I
09:43 - can Define or initialize length breadth
09:47 - and height using Constructor so let's
09:49 - see how I'll write
09:53 - double and I will
09:56 - say L A or
10:00 - length
10:02 - then double BR for breadth
10:08 - and double hi for height okay
10:14 - and now I will initialize whenever I
10:17 - create a Constructor I will initialize I
10:20 - want to initialize length breadth and
10:22 - height so how can I do this I will use
10:26 - this this is a special keyword which
10:30 - shows that your whatever you are calling
10:33 - is an instance of this box okay so
10:36 - indirectly it's an instance of your
10:39 - class in which you are in do
10:46 - L is equal
10:49 - to l a so whatever user will give the
10:54 - value of La it will be assigned to your
10:59 - length in the same way I will Define
11:04 - three length breadth height
11:09 - here right this do B this do H so now
11:16 - what we are intending to do is whenever
11:20 - I defined uh a instance of class so see
11:24 - here whenever I change the definition of
11:29 - Constructor and I pass parameters here
11:32 - now your definition or here you will see
11:35 - the till day or error and when you hover
11:39 - over this class it shows that it is
11:43 - expecting the parameters in these
11:46 - brackets okay so now you need to give uh
11:51 - these parameters three parameter which
11:53 - can be double values okay so I will give
11:58 - three parameter MERS here for example 46
12:01 - for
12:03 - length 60 for breadth and 20 for height
12:09 - okay and I as soon as I have given these
12:12 - three parameters the error is gone right
12:17 - so just remember this you always or most
12:22 - important use of Constructor is to
12:25 - initialize the values or initi ize the
12:30 - variables in the class okay so now
12:35 - because you have defined this
12:37 - Constructor which expect three
12:38 - parameters you need to Define an
12:41 - instance of class like this box box and
12:45 - the box one is equal to new box and pass
12:48 - these three length breadth and height
12:51 - here because you are passing three
12:53 - parameters and now you don't even need
12:56 - to initialize the them length breadth
13:00 - and height from here you already have
13:03 - initialized it in the Constructor so
13:05 - this has reduced your code right and it
13:09 - will work fine when you run the program
13:12 - even you haven't initialized the the
13:15 - length breadth and height explicitly now
13:18 - I will run the
13:20 - program and it doesn't show up because
13:24 - this console. read line is not there so
13:26 - I uncomment it on again I run the
13:29 - program and shows volume of the box is
13:33 - whatever is the volume
13:36 - right so in this way you can use
13:39 - Constructors and destructors in
13:42 - C and once again Constructor and
13:46 - Destructor are called automatically even
13:49 - if you don't Define them by
13:53 - yourself and the most important use of
13:56 - Constructors are to initialize the
13:59 - values okay so I hope you have
14:02 - understood the basic concept of
14:04 - Constructor and Destructor and I hope
14:06 - you have enjoyed this video please write
14:08 - comment and subscribe and bye for now