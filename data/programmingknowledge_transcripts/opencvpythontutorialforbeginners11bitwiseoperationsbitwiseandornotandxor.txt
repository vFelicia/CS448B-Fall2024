00:00 - hey guys welcome to the next video on
00:02 - open CBT tool for beginners using Python
00:04 - in this video we will talk about bitwise
00:08 - operations on images using Python and
00:11 - OpenCV so bitwise operations can be very
00:16 - useful when working with masks masks are
00:20 - binary images that indicates the pixel
00:23 - in which an operation is to be performed
00:27 - so let's see how we can perform bitwise
00:31 - operations on images so to start with I
00:36 - have here one image which is image
00:40 - underscore one dot PNG file and let me
00:43 - show you the image also so this image is
00:46 - half black and half white
00:49 - now the second image I'm creating using
00:53 - numpy so first of all I have used n P
00:56 - dot zeroes and I'm just creating this
00:59 - image with the same dimension as this
01:02 - image underscore one is having so 250
01:06 - comma 500 is the dimension of this image
01:10 - and the number of channels are 3 and
01:13 - this code is going to create a black
01:16 - image as you might already know from our
01:19 - previous videos now this code is just
01:25 - creating a white rectangle inside the
01:30 - black image which we got from numbers
01:32 - zeroes array okay so this is the
01:36 - dimension of the rectangle inside your
01:39 - black image and the color of the
01:41 - rectangle will be white because this is
01:46 - 255 comma 255 comma 255 and we are
01:51 - taking thickness as minus 1 that means
01:53 - your rectangle will be filled with white
01:56 - color now here I'm just showing both the
02:01 - images using imshow method and this code
02:04 - you might already know what this is
02:06 - doing from our previous videos so let me
02:10 - run this code and let's see what happens
02:12 - first of all
02:13 - so when we run this code you will see
02:17 - first image is this one which we have
02:21 - created using the numpy is zero so this
02:24 - is I am g1 and this is the black image
02:28 - and we are just creating a white
02:30 - rectangle inside this number zeroes
02:34 - image and this is the second image which
02:37 - is half black and half white now we want
02:42 - to perform some bit wise operations on
02:46 - these two images so let's see how we can
02:50 - perform these bitwise operations on
02:52 - these two images so to perform these
02:56 - bitwise operations we have some methods
03:00 - inside the opencv library so the first
03:04 - method will be bit and so I am going to
03:07 - just create a variable called a bit and
03:10 - with let's say like this and the method
03:16 - inside OpenCV is CB 2 dot bit wise
03:20 - underscore and so this bitwise
03:24 - underscore and takes several arguments
03:27 - as you might see here the source of the
03:31 - first image the source of the second
03:33 - image and the destination which is none
03:36 - by default and the mask which is also
03:40 - optional so we are going to just provide
03:43 - our images here so I'm going to provide
03:45 - the I am g2 here first of all as the
03:49 - first argument and the second image will
03:51 - be I am g1 and once we perform this
03:56 - bitwise and operation on these two
03:59 - images we are going to show the result
04:02 - in the form of window so I'm going to
04:05 - create one more window which is CB 2 dot
04:09 - I am show and I'm going to name this
04:13 - window as let's say bit and and the
04:19 - second argument will be our variable bit
04:22 - and which we got from the operation
04:26 - bitwise and
04:27 - on these two images so let's run this
04:29 - code once again and let's see what
04:31 - happens so now as a result we have the
04:35 - third image so let me just open all the
04:38 - images so this is our first image this
04:41 - is the second image and the last one is
04:44 - the result which is the bit and
04:47 - operation on these two images so now you
04:50 - might already know how the logical end
04:53 - works but those of you who might not
04:56 - know how the logical end works let me
05:01 - show you the truth table of logical end
05:04 - so this is the truth table of logical
05:08 - end and if the input a and input b b is
05:14 - 0 then we get the result 0 okay if input
05:19 - a and input b either of them is 0 then
05:26 - also we get zeroes right the result 1 we
05:30 - will only get when both the sources are
05:34 - 1 so a and B are 1 then only we will get
05:38 - a 1 in case of end logic so same and
05:43 - logic will work here so this is the
05:48 - zeroes array right so we have created
05:51 - this black region from the zeros so here
05:55 - in these images black is performing as
05:59 - zeroes and the white part is performing
06:03 - as one so when 0 and 0 the result will
06:09 - be 0 right so from this truth table we
06:13 - have seen when the input is 0 and 0 the
06:17 - result is 0 same here we are seeing so
06:21 - when the image is black and black we get
06:25 - the result black when the input is white
06:27 - and black this means 0 and 1 the result
06:30 - will be once again 0 using the logical
06:34 - end but when the input will be white and
06:38 - white that means 1
06:41 - one the result will be wide that means
06:44 - the one okay so the only reason region
06:48 - white here is the result of this white
06:52 - and this white and the resulting image
06:55 - you can see here and all the other part
06:58 - is black because the end operation on
07:02 - zero and zero is zero and zero and one
07:06 - is also zero so this is how a bitwise
07:10 - end works let's see how bitwise or and
07:14 - other operation works so I'm going to
07:17 - just comment this code and now we are
07:21 - going to just create the bitwise or
07:24 - operation so for that I'm going to just
07:29 - instead of writing bit and I'm going to
07:32 - just write bit or and instead of bitwise
07:36 - and we are going to just write bit wise
07:39 - or here and then we will simply call
07:43 - this image using I am sure method so we
07:48 - are just calling here bit or now let's
07:54 - run the code once again and let's see
07:56 - the result so you can see the result
08:00 - here so let's see the truth table so in
08:02 - the logical or if only one input is 1
08:06 - then the result will be 1 so either A or
08:09 - B is 1 or both are 1 then the result
08:13 - will be bar 1 and if both inputs are 0
08:16 - then the result will be 0 so same you
08:20 - will be able to see here so when the
08:25 - first source and the second source is 0
08:29 - the result is 0 but when the first
08:33 - source and second source is 1 or white
08:37 - the result is white when the first
08:41 - source and the second source is 0 and 1
08:45 - or black or white the result is once
08:48 - again 1 or white here ok so this is how
08:51 - the logical or work
08:54 - on the image now let's see how the XR
08:59 - operation work on those images I'm going
09:03 - to once again comment this code and at
09:07 - this time I'm going to just perform the
09:10 - XOR operation on these two images
09:20 - and now we are going to run this code
09:24 - once again and you will see this kind of
09:27 - result so once again let's see how the
09:31 - XOR logic works so when both the inputs
09:35 - are 0 or both the inputs are 1 then we
09:41 - will get the 0 and if either a or b is 1
09:46 - then only we will get the result 1 so
09:50 - same you will be able to see here so
09:53 - when both first and second source is 0
09:58 - the result is 0 when both the first and
10:02 - second source is 1 you can see here and
10:06 - here the result is once again 0 here
10:10 - right but when the input is 0 and one
10:13 - result will be 1 and in this case also
10:16 - the black and white will result in the
10:19 - white image which is the logical XOR
10:24 - operation so once again let's close this
10:28 - and now let me show you how the not
10:31 - operation work so I'm going to just
10:34 - comment this code and then I'm going to
10:38 - just use the bitwise not so here bit not
10:44 - let's say we will perform the bit knot
10:47 - on the first image and the second image
10:50 - so I'm going to just write bit not on
10:53 - the first image because it only takes
10:56 - one argument bit not is just the
11:00 - opposite of the source so if you get the
11:04 - input 0 then the result will be 1 if you
11:08 - have the input 1 the result will be 0 so
11:12 - the opposite of the input so let's
11:15 - perform this operation on image 1 an
11:18 - image 2 and let's comment this code and
11:22 - we are going to just show these two
11:25 - result windows using the I am show
11:28 - method and also I need to change
11:32 - this name otherwise we will face
11:36 - problems and here also I haven't changed
11:40 - the name of these I am sure windows so
11:43 - let's change the name of these windows
11:46 - and let's run the code once again and
11:49 - now you will get these results so we
11:54 - will get the first result so the first
11:57 - bit not one is the not of the first
12:02 - image and bit not two is the not
12:06 - operation on the second image so you can
12:08 - see wherever we have white we got black
12:11 - and wherever we have black we got white
12:14 - so just the opposite of the input here
12:18 - also wherever we have the black region
12:20 - we got the white image here and wherever
12:24 - we have the white pixel we got the black
12:28 - pixel so this is how bitwise not
12:30 - operation works on the images so these
12:34 - are some of the bitwise operations which
12:37 - you can perform on your images and as I
12:41 - said bit wise operations can be very
12:44 - useful when working with masks which we
12:46 - will see in the later videos so stay
12:49 - tuned and keep watching these videos and
12:52 - I will see you in the next video
13:02 - you