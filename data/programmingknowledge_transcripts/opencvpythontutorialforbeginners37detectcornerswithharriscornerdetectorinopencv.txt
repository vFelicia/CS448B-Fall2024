00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we are going to try
00:07 - to understand how we can find out the
00:09 - corners inside an image using a method
00:13 - called harris corner detection now first
00:17 - of all what are corners so corners are
00:20 - the region in the image with large
00:23 - variation in intensity in all the
00:26 - direction
00:26 - now this Harris corner detector was
00:29 - first introduced by Chris Harris and
00:32 - Mike Stefan's in their paper in 1988 now
00:39 - detecting corners using Harris corner
00:42 - detector contains three main steps so
00:46 - the first step is to determine which
00:48 - windows produces very large variation in
00:53 - intensity when we move in the X
00:57 - direction and the y direction now what
01:00 - are windows here so windows in this case
01:04 - means that let's say we want to just
01:07 - find out this corner here so windows
01:10 - will be your small box here and then you
01:15 - check for the intensity when you move in
01:19 - the vertical direction and also in the
01:25 - horizontal direction so you check for
01:28 - the change or large variation in the
01:32 - intensity when you move in the X
01:34 - direction and when you move in the Y
01:37 - direction in the second step with each
01:40 - such window which we found a score R is
01:44 - computed so this R value which is
01:48 - computed is going to give us the
01:50 - estimate or give us an idea about where
01:54 - this corner is located depending upon
01:58 - the value of R and in the third step
02:01 - after applying a threshold to this score
02:05 - the important corners are selected and
02:08 - marked so let me explain you all these
02:12 - steps
02:13 - one by one what do I mean by detecting
02:17 - the windows and calculating the value of
02:20 - ours
02:21 - let's see step by step so as I said in
02:25 - the first step we determine which
02:26 - windows produces very large variation in
02:30 - the intensity in the X direction and in
02:34 - the Y direction so let's say a window or
02:37 - a Center is located at the position X
02:41 - comma Y and let's say the intensity of
02:45 - the pixel at this location is I X comma
02:49 - Y so if this window is slightly shifted
02:54 - to a new location and let's say this
02:57 - displacement is u comma V then the
03:01 - intensity of the pixel at this location
03:04 - will be X plus U and Y plus B because
03:10 - our displacement is u comma V so we are
03:14 - just adding it to the x value and the y
03:17 - value and hence the difference between
03:21 - the shifted intensity and the original
03:25 - intensity will be the difference in the
03:28 - intensities of the windows shift so for
03:33 - a corner this difference will be very
03:36 - large and that's how we detect the
03:40 - corners using this Harris corner
03:43 - detection method now as you can see here
03:48 - this value will be given in the ii u
03:54 - comma V format so we have to maximize
03:57 - this function for the corner detection
04:00 - and this we can achieve by applying a
04:03 - Taylor expansion to this equation which
04:07 - is given here and by using some
04:10 - mathematical steps so I'm not going to
04:13 - go deep into the mathematical steps but
04:17 - after applying the Taylor expansion you
04:20 - will get this kind of approximate value
04:24 - where M is equal to
04:27 - this value and here in this equation IX
04:31 - and iy are the image derivatives in the
04:35 - X and y direction respectively so this
04:39 - can be easily found out using the CV dot
04:45 - Sobel method in open CB now comes the
04:50 - second step and in this step we find out
04:54 - or calculate the score for R so this R
04:58 - is equal to this value and M we have
05:01 - already seen how we can get this M value
05:06 - in the first step right so in this
05:10 - equation Det M is equal to lamda 1
05:16 - multiplied by lambda 2 and trace M is
05:20 - equal to lambda 1 plus lambda 2 where
05:24 - lambda 1 and lambda 2 are the eigen
05:27 - values of M so again if you want to go
05:30 - into the details you can refer to some
05:33 - book or you can go to the Wikipedia page
05:36 - to learn more about this equation so
05:40 - once we got the value of R then based
05:44 - upon the value of R we can make some
05:47 - decision and this we can do in the third
05:51 - step so if the value of R is very small
05:55 - that means the value of lambda 1 and
06:00 - lambda 2 are also very small and we can
06:04 - conclude that the region is a flat
06:07 - region and not the corner if the value
06:11 - of R is less than 0 that means lambda 1
06:15 - is very large in comparison to lambda 2
06:18 - or vice versa and that means it's an
06:22 - edge and not the corner and if the value
06:26 - of R is large which happens when lambda
06:30 - 1 and lambda 2 are large and this means
06:34 - that this region is a corner so if the
06:38 - value of R is very large
06:41 - that means the region is a corner and
06:44 - that's how Harris corner detector
06:46 - detects if it's a corner or a edge or a
06:50 - flat area so this was the theory about
06:53 - Harris corner detector let's see how we
06:56 - can use this Harris corner detection
06:59 - concept inside OpenCV using our Python
07:05 - code so I have this script already
07:09 - written here so just import cb2 and
07:12 - numpy and then we are reading this image
07:15 - called cross board underscore image dot
07:18 - PNG using i'm read method and after we
07:22 - read this image I'm just showing the
07:25 - original image so we have the original
07:28 - image and the output at the end to
07:31 - compare now in the next step I'm
07:34 - converting this image into a grayscale
07:37 - image to get the better results and
07:40 - because this see v2 dot Corner Harris
07:45 - method takes the grayscale image in the
07:50 - float32
07:52 - format that's why we need to convert our
07:56 - image into float32 format so that's why
08:00 - we are using numpy dot float32 to
08:03 - convert this image into floating-point
08:07 - values because our corner harris method
08:11 - which we are going to use in the next
08:13 - step is going to take this kind of value
08:16 - and not the value which comes directly
08:20 - from the conversion of this image to the
08:23 - grayscale image so this step is
08:26 - necessary for the harris corner method
08:30 - and in the next step we are just
08:33 - applying the CB 2 dot corner harris
08:37 - method which takes few arguments first
08:40 - is our image in the floating point so
08:44 - this we have passed and the second
08:47 - parameter here is called the block size
08:50 - so here I have given the value 2 here so
08:53 - block size
08:55 - means the window in the first step so we
08:59 - have seen we have to define the window
09:01 - right so for example we define this
09:05 - block size 2 that means neighborhood
09:07 - size is equal to 2 that means for each
09:10 - pixel value block size multiplied by
09:14 - block size that means 2 by 2
09:16 - neighborhood is considered the next
09:20 - parameter here is called the K size and
09:23 - it's the aperture parameter for the
09:25 - Sobel operation and then we have the
09:29 - next parameter here and this next
09:32 - parameter is called the K which is the
09:36 - Harris detector free parameter in the
09:39 - equation so after applying this Harris
09:44 - Corner method to our image we get this
09:48 - destination image and to get the better
09:52 - result we need to dilate this result so
09:56 - we apply CB 2 dot dilate method on our
10:01 - image which we get using the Harris
10:05 - corner so this image are marked to the
10:08 - dilated corners and then in the next
10:11 - step we are reverting back to the
10:13 - original image with optimal threshold
10:17 - value and we are just just marking all
10:21 - our corners with this color so basically
10:26 - we want to mark all the corners with the
10:28 - red color here and in the next step we
10:32 - are just showing our result in the I am
10:36 - show window and at last we are
10:39 - destroying all the windows so let's run
10:41 - this code and let's see what happens
10:43 - when we run this code and we will see
10:47 - the results so you can see this is the
10:50 - original image which have so many
10:52 - corners and all the corners are detected
10:58 - and it's marked with this red color here
11:03 - so this is how you can find out and mark
11:06 - all the corners using
11:09 - Harris corner detection in OpenCV I hope
11:12 - you have enjoyed this video and I will
11:14 - see you in the next video
11:24 - you