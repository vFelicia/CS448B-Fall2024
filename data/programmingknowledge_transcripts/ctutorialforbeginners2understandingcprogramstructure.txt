00:01 - hello guys welcome once again in the
00:02 - last video I have shown you how you can
00:05 - uh download and
00:07 - install code blocks IDE to develop your
00:11 - C++
00:13 - programs and I have also shown you how
00:16 - to create your first C++ program
00:22 - and you have seen that code blocks has
00:26 - automatically generated this code for
00:30 - for us okay now in this video I will
00:34 - explain what this code does so line by
00:40 - line I will explain what is the meaning
00:42 - of uh each and every line of this code
00:47 - so you will be able to understand what
00:49 - is what and why it is important to write
00:53 - this lines of
00:56 - code so we will start with with the
00:59 - first line
01:00 - the first line starts with this hash
01:06 - include and it
01:09 - includes this file so this hash include
01:15 - and C++ is called a
01:18 - preprocessor directive and what it does
01:22 - is it
01:24 - include the
01:26 - predefined header file so think
01:30 - this as a file which is already present
01:34 - in C++ and this file is included by
01:41 - writing hash include and whenever you
01:44 - write or when you want to include some
01:48 - file you include it in
01:51 - these greater than and less than sign
01:55 - like this okay so the first line means
02:00 - include a
02:02 - pre-processor directive so this is a
02:05 - pre-processor directive and this Pro
02:07 - pre-processor directive include this
02:10 - file which is already present in your
02:15 - C++ program so this is by default okay
02:19 - and when you include this this will
02:21 - include the header file and what this
02:25 - header file will contain this header
02:28 - file will contain some
02:30 - function which will be useful for us to
02:34 - develop our code
02:37 - okay now we come to the next line so
02:43 - this line using Nam space standard says
02:48 - uh
02:49 - C++ that we are going to use the
02:53 - standard library to uh do our work for
02:59 - example
03:01 - the C out here belongs to the standard
03:06 - Library okay
03:11 - so what these two line means is first
03:15 - line is to include the file okay and
03:20 - this line
03:22 - says there is somewhere
03:27 - STD class or STD namespace in this file
03:32 - and in so include this namespace STD
03:37 - from this file okay and we are going to
03:41 - use some function from this namespace
03:46 - which are present in this
03:48 - file to perform our code okay now in the
03:55 - next
03:57 - line This int Main function is declared
04:02 - so every C++
04:05 - program
04:06 - has
04:08 - one and only one main function and this
04:13 - main function tells
04:17 - C++ that here from here you need to
04:21 - start your program okay so the main is
04:26 - the main entry point of the C+ Plus+
04:30 - program to
04:31 - execute and if you see
04:34 - here there is int written before this
04:38 - main function so this int shows what
04:43 - kind of return it is expecting right
04:49 - so int main is a function and every
04:53 - function
04:54 - start with this curly bracket and end
04:59 - with this closing curly bracket okay so
05:03 - whenever you write a function start with
05:05 - this curly bracket and close with this
05:09 - curly bracket so C++ knows that this is
05:12 - a function and C++ always start with a
05:16 - main function right and what does int
05:20 - mean that it's expecting a integer to
05:23 - return
05:25 - so you can see here we are returning
05:29 - zero which is an integer when our
05:33 - program is
05:35 - successfully compiled and run okay so
05:40 - zero it is a default value for Success
05:45 - so whenever you write zero and your
05:49 - program reaches here that means C++
05:53 - knows that the execution of your program
05:57 - is successful right that's why we are
06:00 - returning
06:02 - zero and for now
06:06 - just take it as a convention that you
06:09 - need to return zero at the very end of
06:13 - your main
06:16 - function and because we are returning an
06:20 - integer here this will be integer right
06:26 - and now we come to this line so what
06:29 - what this line does is this line prints
06:34 - a string which is written after
06:39 - this greater than greater than sign
06:43 - okay so see out is
06:47 - present or C out is a function or an
06:52 - object in this iost stream file and what
06:57 - is the function of the C out is
06:59 - to Output whatever is written after this
07:05 - greater than greater than sign okay so
07:11 - this to greater than signs or
07:14 - symbol means or this greater than
07:18 - greater than symbol are called insertion
07:22 - operators okay so it this whatever you
07:27 - write after this in double Cotes will be
07:31 - printed as an outp output on your
07:35 - terminal when you run your program and
07:38 - once again you have this insertion
07:42 - operator and then you have this
07:46 - endl this endl means end line so this
07:52 - code
07:54 - tells and this is used with SE out so if
07:59 - if you write C out then only you can
08:03 - write endl okay so this line will or
08:08 - this code will tell your C out function
08:13 - that you need to change the line after
08:17 - you see this endl okay so once again I
08:22 - will compile my code I will go to build
08:25 - and I will click build and my program is
08:30 - built successfully right and now I will
08:34 - run my program and you can see hello
08:37 - world is written here okay and now for
08:43 - example I will just copy this code and
08:46 - paste it once
08:47 - again then you see what happens once
08:51 - again I will save my code and build it
08:56 - once
08:58 - again
09:00 - and once this is built I'm going to
09:04 - write it so Z error 0 warning I'll run
09:08 - my code and you can see there
09:11 - are there is Hello World printed two
09:14 - times because I have written two times
09:19 - see out hello world
09:21 - endl now to show the use of this endl
09:26 - I'm going
09:27 - to exclude this endl from the first line
09:32 - okay and in the second line I will leave
09:36 - it as it is once again I will save my
09:40 - code and build the code once again zero
09:43 - error zero warning run it and now you
09:47 - see here without
09:50 - endl your
09:52 - line is not changed so hello world is
09:58 - proceed did by second hello world so
10:02 - that is the use of endl and the line
10:07 - okay so that whatever you want to print
10:11 - in the next line you can write endl and
10:16 - then it will print to the next line you
10:20 - can also change uh line or you can also
10:24 - go to the next line by
10:27 - using some
10:29 - other function or some other code
10:32 - also which is like this so you can
10:37 - write slash N and sln
10:42 - is read as a as one letter and it
10:49 - says the code to change the line so this
10:53 - means new line okay and this will also
10:58 - work
10:59 - work in the same manner as this endl
11:03 - works so I will once again save it
11:07 - and I will build my program once again
11:11 - and first of all I will close this
11:12 - running program save
11:16 - build and when the build successful run
11:19 - it and you can see this sln is
11:24 - also performing the same task as endl
11:31 - okay and
11:33 - now this program is running I want to
11:37 - show you some more basic things when you
11:41 - start your programming one most
11:44 - important thing is the comments so
11:48 - whenever you write your program and
11:52 - generally when you write your program
11:55 - you should write some comments M so that
12:00 - other user can understand your program
12:04 - so for
12:06 - example at the top of this line include
12:10 - which is a pre-processor I will give two
12:14 - slashes which will tell our code that do
12:18 - not perform whatever I write from after
12:22 - these two backs slashes so whatever I
12:26 - write I can write
12:31 - program
12:34 - to
12:37 - show
12:39 - hello world and this line will not be
12:45 - executed by the code because this
12:48 - two slashes tells C++ not to perform
12:52 - this line okay so comment this line
12:56 - after two slashes is called comment
12:59 - and this comments are you can use to
13:03 - explain your code to the other user
13:06 - whoever is reading your code this makes
13:10 - uh your code readable okay so this is
13:15 - one way to write comment the other way
13:19 - is to write comment is you can uh just
13:24 - write this star first of all
13:29 - start with this slash star and then once
13:34 - again the star and then once again this
13:40 - slash okay so whatever you write in
13:43 - between this slash star star slash is
13:50 - also be taken as not to execute
13:57 - okay so there there are two ways to
14:00 - comment in your code one is SL SL is one
14:03 - and other is this slash star star slash
14:09 - okay so in this way you can make your
14:13 - code more
14:16 - readable so I hope you understood this
14:19 - basic functionality and basic
14:22 - description of this code in the next
14:24 - video I will show you some more codes so
14:29 - please stay tuned and please rate
14:30 - comment and subscribe and bye for now