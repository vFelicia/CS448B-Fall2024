00:00 - hey guys little program acknowledged in
00:02 - this video we'll be talking about
00:04 - inheritance and see business well
00:07 - inheritance in C++ or any programming
00:10 - language it is not different from what
00:14 - we know about the inheritance right so
00:16 - what do we know about inheritance if
00:18 - predecessors shared some of his
00:20 - properties with the successor so say a
00:22 - father has a green eye and maybe the son
00:25 - will also have a green eye because of
00:27 - inheritance of genes right but that is
00:29 - what we know about inheritance then in
00:32 - programming - there is no difference in
00:35 - the function it darisha parent class and
00:38 - there are Chinese classes which inherits
00:40 - some properties from the parent cluster
00:42 - that is what you need in streets in
00:44 - programming and we will see how to do
00:46 - that in C Christmas now why do we need
00:48 - in irritants we'll say I have a class so
00:52 - here I have an animal class so I have
00:55 - some properties in the private section
00:56 - and I have some properties in the public
00:58 - fiction and now I want to create ten
01:01 - elements well it's pretty easy like so
01:03 - since we know but it is what we can do
01:05 - this
01:05 - we'll just say animals you will eat 10
01:08 - yo created ten animals now let's say I
01:12 - want to create ten tigers and Kate dogs
01:15 - also and they all have these similar
01:18 - properties but the only difference is
01:20 - that the tiger will also have an inner
01:22 - method called roux which will print
01:29 - roaring and similarly a dog will have
01:33 - pie right so how do we do that well if
01:37 - you think you are copying the classes
01:40 - and then creating two different classes
01:43 - for tiger and top and then the
01:45 - fraternities in the similar way then I
01:47 - prom it will work but an efficient way
01:50 - would be don't inherit the properties
01:52 - from these animals
01:53 - well if you see I didn't talk both are
01:56 - animals with so both have species named
02:00 - both have an H both eat put sleep but
02:03 - the only difference is that the tiger
02:05 - woods and the dog perks so if you can
02:09 - take advantage of all these properties
02:11 - from fun class
02:13 - and I had whatever extra features you
02:14 - want to add then that solves a problem
02:17 - of creating a subclass rate so what I
02:22 - mean is say I have the class tiger and
02:26 - then I have some method like public void
02:30 - rule and then this is this going to
02:32 - print out truly mother consumer now see
02:37 - it I want this table to have all the
02:41 - properties of an animal it should have a
02:43 - species name it should have some age and
02:46 - then it should eat it to sleep because
02:47 - those things so you can just pop it down
02:50 - but an efficient way would be to inherit
02:53 - them and how do we inherit something
02:54 - well we'll just put this golden over
02:57 - here and then put public animals and
03:01 - we'll talk about what this means right
03:03 - so for now this is how we can inherit
03:06 - the properties of an animal and now if
03:08 - you create a tiger you will have the
03:11 - properties of the animal as well as the
03:14 - title so I can do TDOT eat which is
03:17 - basically defined in this animal class
03:19 - it is not defined in the style class and
03:21 - I can also do t dot Road
03:23 - what is also valid now if you're under
03:27 - string does not mimic type yeah that's
03:30 - because I did not use using namespace
03:32 - STD booboo lose that and now here you
03:40 - can see eating and Treviso eating this
03:42 - from this thing from animal class and
03:44 - roaring us from the tiger tails well if
03:49 - you want to create a dog it is very
03:51 - similar you can this to class talk of
03:54 - the sick animal and here you can just
03:59 - say public
04:04 - why but it says party on a consider then
04:14 - right so now if you run this when you
04:16 - didn't eat all objects so you can do
04:19 - that from there's a dog D and D don't
04:24 - eat it on park because the notice for
04:27 - the tiger thing you can say D done by
04:30 - and I had done this you will get similar
04:32 - results you'll see eating and then bite
04:35 - so dot effect went enough inheritance
04:38 - you can take advantage of all the
04:41 - features which are defined in the
04:43 - painting class or you have something
04:44 - called basically different names for
04:46 - this would be some language its consumer
04:48 - class and then it's also called as a
04:51 - base class it's called a painting class
04:53 - and there are many names and then this
04:55 - one also has signal new so this is
04:57 - called a child class and then this is
05:00 - corridor and inherited class or
05:03 - something so basically we'll just stick
05:05 - with parent child because that switched
05:07 - ontology and that's how inheritance
05:10 - works and she presents that simple and
05:13 - now we just talk about these things and
05:15 - uh we also see how to take full
05:20 - advantage of inheritance in later videos
05:22 - because it's not a fun video topic
05:25 - inheritance is very fast and then there
05:27 - are many I xx of individual so we'll see
05:30 - what these things are in this video we
05:32 - see how two basic inheritance in this
05:35 - video and then we'll see how to do
05:39 - multiple inheritance and all those kinds
05:42 - of complex stuff and later video 3 so
05:44 - first of all talking about this this
05:47 - will specify wait to inhale and this
05:49 - class will specify from from here to
05:53 - here so this is to bear and this is from
05:56 - vessel we just write it down
05:58 - this will specify fair it tiger do I
06:02 - have to hear it and the other one from
06:05 - fear do I have to do so
06:12 - other things we are specifying what we
06:14 - are seeing this you create a class title
06:16 - which will inherit all the properties
06:20 - which it can delete it
06:22 - well there are some restrictions we'll
06:23 - talk about that but this statement this
06:27 - particular line means to create a class
06:29 - title which will inherit whatever it can
06:32 - generate from this class which is uneven
06:34 - and put everything in the public section
06:36 - so that is what it means
06:38 - so public makes it doesn't mean that
06:40 - everything is going to inherit it is
06:41 - going to go into the public it means
06:43 - that whatever it inherits just inherit a
06:47 - structure so if you see here you have
06:49 - private and publicly so when you are
06:52 - inherited it as a public inheritance
06:55 - what you are doing this you are just
06:56 - maintaining the structure so a private
06:59 - anyway doesn't like in Harrogate so if
07:01 - you have anything else that is going to
07:03 - get into that section and public things
07:05 - will go into the public section then you
07:07 - can do private here you can do something
07:10 - like private what this will mean is it
07:12 - doesn't maintain the structure it will
07:14 - just put everything inside the private
07:15 - section so all everything it inherits go
07:18 - to the private section and these methods
07:21 - are long not accessible from here to now
07:24 - if you run this ok I rented in the tiger
07:30 - class so let's just make dog as private
07:32 - and now if I try to run this I will be
07:34 - getting a dated right because I have
07:36 - made it private inheritance that means
07:39 - whatever I can inherit I'll put
07:41 - everything in the private section
07:42 - something like this will be created
07:44 - instead of memory and these two things
07:47 - will go inside here private doesn't need
07:56 - it
07:56 - so Pilate members don't get in unit 8
07:59 - they're private to that particular class
08:01 - what get inherited this public and
08:03 - protected so remember protected classes
08:07 - well we talked about protected very
08:10 - briefly over there because we know that
08:13 - protector is better understood in
08:15 - irritants so we'll talk about that not
08:17 - well protected is basically when you
08:19 - have something which you don't want to
08:22 - share with objects but you want them to
08:24 - be inherited
08:25 - this I I don't want species and age to
08:28 - be access from objects of this class
08:31 - well create an animate object I don't
08:34 - want the species and age to be I just
08:38 - from that object but I want those things
08:40 - to be inherited so at that point of time
08:43 - I will make these two things as
08:46 - predicted members who protected means I
08:49 - cannot access with an object but I can
08:51 - inherit them so what I can do here is
08:54 - instead of private so let me just do
08:56 - this I can just protect the rear so and
09:01 - now actually these two things go inside
09:05 - tiger and tofu if I do something the
09:08 - public here
09:09 - well I told you it maintains two
09:12 - structures right so if I do public here
09:15 - and then I'll just put it under the
09:16 - method its oh no it said age which is
09:21 - basically said they'd so H then this age
09:26 - you can see here age is actually coming
09:28 - here which is basically not defined in
09:31 - the sky Douglas but it got inherited
09:33 - from this protect Utley f1 in this
09:35 - animal so if I do this is equal to
09:38 - weight it is going to work and what we
09:41 - can do here is I'll just read Tiger TV
09:45 - and if I - t dot sorry T dot set each to
09:50 - something like ten and then we can also
09:53 - do till date so say int gate age
10:00 - written nature and if we try to print
10:05 - that each so fantasy out
10:07 - TDOT age sorry do you don't get age and
10:12 - if I look in the console you will be
10:14 - symptom which were set here and that age
10:17 - is actually derived from this animal
10:20 - classified and now if I try to create
10:22 - something like animal or even tiger if I
10:24 - put tiger dot age I won't be able to
10:28 - access it so if I do T dot a is equal to
10:30 - 10 I'm getting error so it says if we
10:34 - look in the debug console it says that
10:36 - any animal age is protected so that
10:39 - means that I cannot change that it is
10:41 - like a private member to the object but
10:44 - it's like a public member for the
10:46 - inheritance so that that's what
10:48 - protected it so this is for the privates
10:51 - of this I did you change this is for the
10:53 - private thing but protected it means
10:56 - that it can be inherited
10:58 - cannot be accessed by objects public
11:02 - means that it can be accessed with
11:03 - objects as well as it can be inherited
11:05 - into other dresses so that's all about
11:09 - basic inheritance in C++ so again I said
11:12 - he kept this will specify weight to it
11:15 - so if I don't protect it here what is
11:17 - going to happen if I do protected here
11:19 - everything is going to go inside the
11:21 - protected function so why do we want to
11:23 - do that so let's say I want to create
11:25 - another thing member for knowledge say
11:28 - tiger baby it's the baby of discharge so
11:31 - if I want to inherit something from this
11:33 - I can do something like this public
11:35 - either which is completely I don't know
11:38 - what is happening something from here is
11:40 - going to get in in detail insert the
11:42 - tiger and something from Tiger is going
11:45 - to get inherited inside this class which
11:47 - is called tiger baby and that is how
11:49 - inheritance works and that's how it
11:52 - boosts your programming right so the
11:55 - next video we will talk about other
11:58 - types of inheritance and how to
12:00 - effectively inherit something and we'll
12:02 - talk more about how constructors and
12:05 - destructors work in putting them happy
12:08 - coding