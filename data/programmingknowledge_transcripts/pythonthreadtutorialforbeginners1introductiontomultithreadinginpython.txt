00:00 - hey guys welcome to the first video on
00:02 - Python thread tutorial for beginners in
00:05 - this video I'm going to give you a brief
00:07 - introduction about threads so first of
00:11 - all what is a thread so a thread is an
00:14 - individual and separate unit of
00:16 - execution that is the part of a process
00:19 - now what is a process a process is
00:23 - simply our running program so for
00:27 - example if you run a browser it's a
00:29 - process if you run a video game it's a
00:32 - process now inside this process multiple
00:37 - threads can work together to accomplish
00:40 - a common goal and threads allows the
00:44 - program to run in parallel that is the
00:47 - single most important benefit of using
00:51 - threads so let me give you an example so
00:55 - when you play a video game it has to
00:58 - handle few tasks for example it has to
01:01 - handle the graphics and the user
01:03 - interface and if you are playing the
01:05 - multiplayer game it has to handle the
01:08 - networking and all those things it has
01:12 - to handle in parallel because it has to
01:16 - remain responsive at all the times so
01:20 - how does this videogame handles those
01:22 - parallel tasks a simple answer is
01:26 - threads it can assign one thread for
01:29 - graphics one thread for user interface
01:32 - and other thread for networking so by
01:36 - using threads the beauty game can always
01:38 - remain responsive and it can run the
01:42 - task in a parallel way now let me
01:46 - explain threads using this diagram so
01:50 - you can see this whole blue box here is
01:53 - a process and the threads exists inside
01:58 - this process so in this process you can
02:02 - see three threads now inside those
02:06 - threads you can see there is a code and
02:10 - local variable so a thread
02:14 - is a light-weight process that exists
02:18 - inside the process also a thread is a
02:22 - sequence of control flow the difference
02:25 - between the thread and the process is
02:28 - that the thread exists entirely inside
02:33 - the process and share its resources so
02:37 - let's say inside this gray box we have
02:39 - the global variables that each thread
02:42 - will be able to share those global
02:46 - variables and in addition each thread
02:49 - can have its own local variables and its
02:54 - own control flow to work with those
02:57 - local and global variables now a single
03:01 - process may have multiple threads of
03:04 - execution and as I already said that
03:07 - threads are useful when an application
03:10 - wants to perform many concurrent tasks
03:13 - on a shared data now let me give you one
03:18 - more example so think about a browser it
03:21 - has to handle the landing pages or the
03:25 - animations or if you want to open
03:28 - multiple website on different tabs and
03:31 - you want to run video in one tab and if
03:36 - you want to do another task in other tab
03:39 - most of the time the browser always
03:42 - remains responsive and the browser can
03:46 - handle multiple tasks at the same time
03:49 - so it uses threads to always remain
03:52 - responsive now there are two different
03:55 - kinds of threads one is a kernel thread
03:59 - and other is a user space thread or a
04:03 - user thread now kernel threads are the
04:07 - part of operating system while userspace
04:10 - threads are not implemented in kernel
04:14 - the userspace threads can be seen as an
04:18 - extension of function concepts in
04:20 - programming languages now each process
04:24 - have at least one
04:27 - and that is the main thread so if you
04:30 - don't even create a thread inside a
04:33 - process it has at least one thread and
04:36 - that is process itself now let's talk
04:40 - about the advantages of using threading
04:43 - so the first advantage is multi-threaded
04:46 - programs can run faster on computer
04:48 - systems with multiple CPUs because these
04:52 - threads can be truly concurrent on
04:55 - multiple CPU computer systems the second
04:59 - advantage is the program can remain
05:01 - responsive to input at all the times
05:05 - this is true both for single and
05:08 - multiple CPU computer systems now the
05:12 - third advantage is threading allows to
05:16 - do something else while a thread is
05:19 - waiting for IO tasks or any other tasks
05:23 - to complete so it always remains
05:27 - responsive the next advantage is some
05:30 - programs are easy to express using
05:33 - concurrency which leads to elegant
05:36 - solution and as a result they are easier
05:39 - to maintain and debug so some programs
05:42 - or some processes are inherently
05:45 - concurrent in nature and the next
05:48 - advantage is threads of process can
05:52 - share the memory of global variable so
05:55 - as I have already shown you in the
05:57 - diagram previously that multiple threads
06:00 - can share the memory of the global
06:02 - variables at the same time so if a
06:05 - global variable is changed in one thread
06:08 - this change is valid for all the threads
06:12 - a thread can have local variables also
06:16 - as we have seen in the diagram now let's
06:20 - talk about some of the issues or
06:22 - challenges you will face while
06:24 - programming threads for a program the
06:27 - first challenge is the scheduling so to
06:31 - execute a threaded program it must
06:34 - rapidly switch between threads so a
06:37 - program should be able to switch between
06:39 - threads of
06:40 - gently and conveniently the second issue
06:44 - or challenge is the resource sharing so
06:48 - as I told you that multiple threads can
06:52 - share the same memory of the global
06:55 - variables so since threads share this
06:59 - memory and other resources it must be
07:03 - careful because operation performed in
07:06 - one thread could cause problem in
07:08 - another thread the next challenge you
07:11 - could face is of synchronizing of the
07:15 - threads so threads often need to
07:17 - coordinate their actions and as a
07:20 - software developer you may have heard
07:23 - about race condition of threads which
07:27 - means the outcome depends on the order
07:29 - of thread execution and often for
07:32 - synchronization we use locking
07:35 - primitives now that was the general
07:38 - description about threads now let's talk
07:41 - about the threads in Python so in Python
07:45 - a thread is an object like any other
07:48 - object that can hold data this object
07:51 - can also be used to run with methods the
07:54 - object also can be stored in the data
07:57 - structures and this object can also be
08:00 - passed as a parameters to the methods
08:04 - also in Python our thread can also be
08:07 - executed as a process and during the
08:11 - lifetime of a thread it can have various
08:13 - states now in Python there are two
08:16 - modules which supports the usage of
08:18 - threads and these two modules are thread
08:21 - module and treading module now there is
08:24 - one thing to note here is that the tread
08:28 - module has been considered as deprecated
08:32 - for quite a long time so often users are
08:35 - encouraged to use that threading module
08:38 - instead of the thread module so if you
08:41 - will see in Python 3 that thread module
08:44 - is directly not available but indirectly
08:47 - you can use underscore thread to use the
08:51 - thread module and this is to remain
08:53 - backward
08:54 - with the previous versions of the Python
08:58 - now the difference between the thread
09:00 - module and the threading module is that
09:02 - the thread module treats the thread as
09:05 - the function while the module threading
09:08 - is implemented in an object-oriented way
09:11 - so in the next videos I will show you
09:14 - how to use these two modules in Python
09:17 - to create threads and handle threads in
09:20 - Python so that's it for this video I
09:24 - will see you in the next video
09:34 - you