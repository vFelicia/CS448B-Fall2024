00:00 - hey what's going on guys welcome back to
00:01 - our YouTube channel and welcome to this
00:04 - video this is John from programming
00:06 - knowledge and in this video guys we're
00:08 - gonna talk about the C go-to statement
00:12 - okay so so far we have discussed the if
00:15 - statements and how it is used in C the
00:19 - control statement execution based on
00:22 - some conditions or decisions now the
00:26 - flow of execution also depends on other
00:29 - statements which are not based on
00:31 - conditions that can you know control the
00:34 - flow and of course C supports a unique
00:38 - form of statement that is you know go to
00:41 - go-to statement which is used to branch
00:45 - unconditionally within a program from
00:48 - one point to another point inside our C
00:51 - program so although this is not a good
00:53 - habit to use you know go-to statement in
00:56 - C but there may be some situations where
00:59 - we can use the go-to statement and it
01:04 - might be you know desirable to make use
01:06 - of the capability of the go-to statement
01:10 - so the go-to statement is used by
01:13 - programmers to you know change the
01:16 - sequence of execution of AC program by
01:20 - shifting the control the different part
01:23 - of the same program so I think I have
01:26 - mentioned this before in our you know
01:29 - tutorial series that the execution of a
01:32 - C program is sequential you know like if
01:36 - you have statements from line 6 here 7 &
01:41 - 8 & 9 so it will try to execute from
01:44 - line 6 7 8 9 then sequentially okay but
01:51 - you know we have this go-to statement to
01:55 - control that particular flow we can go
01:57 - to the a certain point of our program by
02:00 - using the go-to statement so basically
02:03 - this basic syntax our go-to statement is
02:05 - like this we have this particular syntax
02:11 - or go-to statement
02:14 - so we have this keyword doto and
02:18 - labelled okay and then of course we need
02:21 - to add label at some point in our
02:23 - program
02:23 - okay and of course the long version of
02:28 - this syntax is like this the P show you
02:31 - are real quick so we have like a few
02:35 - lines and then we have the label and
02:39 - then we have the statement and every
02:43 - time the program meets or found the
02:47 - go-to statement so it will try to find
02:50 - the label that has been specified in
02:53 - this particular line so go to label and
02:55 - then it will skip the lines or
02:58 - statements between or other you know
03:01 - other statements and it will go directly
03:03 - to the label and it will execute the
03:08 - statements below the label in our C
03:13 - program now we can implement this and of
03:18 - course guys it can also be used to this
03:22 - is a forward jump in our program because
03:27 - we have specified the go-to statement
03:29 - and then it forwarded to the label
03:31 - statements below okay but it could be
03:35 - also the backward jump of the programs
03:38 - for example after execute execution of
03:42 - some lines it will jump into this
03:46 - particular label so after execution it
03:49 - will jump to this level that's why it is
03:52 - called the backward jump in our C
03:55 - program so say for example if you have
03:57 - like no other label available here so it
04:01 - will jump the program execution from
04:03 - here and then go back to line 9 so
04:06 - that's how the backward jump inside our
04:09 - C program so let me just clarify this it
04:15 - is called backward if you know the go-to
04:19 - label is here and then it will try to
04:22 - jump on top or the lines before that
04:25 - go-to label
04:27 - it will execute all the statements under
04:30 - this hay and it is called forward John
04:34 - if the label is here
04:37 - so after this or after execution of this
04:43 - line it will try to go to this
04:45 - particular line label and it will
04:49 - execute the statements under this
04:52 - project particular label so now let's
04:55 - try this and let's just build a
04:58 - practical or simple implementation of
05:01 - this go-to statement so let's just
05:05 - remove this and then we can try to ask
05:09 - for an age just like what we have from
05:12 - the previous video and then we can try
05:14 - to add the labels for example G and this
05:19 - will be the label name okay and then of
05:23 - course we have a statement under this
05:26 - particular label so print F so for
05:30 - example we will try to execute this if
05:35 - the age is 18 so like you are eligible
05:42 - or something okay then we can try to add
05:47 - the new line here and then of course we
05:51 - can try to add another label so another
05:55 - label name and we can print you are not
06:01 - eligible okay something like this and we
06:06 - can also add the new line here okay and
06:13 - then of course we do have the statement
06:16 - to ask for the age so enter your age
06:21 - okay and then semicolon and then we can
06:26 - use the scanf function to get the actual
06:31 - value from the user so presently which
06:34 - which is these format specifier again
06:35 - and then 1% and the variable name which
06:40 - is ade
06:41 - and of course we can have the condition
06:44 - right here like if the variable H is
06:48 - greater than or equal to 18 then you can
06:54 - use the statement go to the label G okay
07:00 - and else we can go to the label s okay
07:08 - now as you can probably observe here we
07:11 - are using if-else but we don't have the
07:14 - curly braces right so you can do the if
07:17 - an else statement like this without the
07:21 - curly braces because we only have one
07:24 - line in this particular or after the
07:27 - condition we have only one line and over
07:30 - all so else we only have one line but if
07:34 - you have like five lines here you have
07:37 - to add the curly braces okay so in C
07:41 - programming it like understood if there
07:44 - is like one line to execute so there's
07:46 - no need to use the curly braces okay now
07:49 - we can try to run this and see how it
07:55 - works
07:55 - for example build and run our
07:57 - application and try to evaluate and see
08:04 - how this particular program works so
08:08 - basically it executed line G and line s
08:14 - right so you are eligible and you are
08:17 - not eligible now if we try to go or
08:20 - input number 18 right here so it will
08:24 - try to execute again the line 9 10 11
08:34 - and of course it's gonna you know ask
08:38 - for the age again right so it starts
08:42 - from this particular line 9 which is the
08:44 - label
08:45 - G because we have specified if the age
08:49 - is greater than or equal to 18 then it
08:52 - will try to go to label
08:54 - now if you try to go to or input 16 so
09:01 - it will try to go to label or yeah 911
09:05 - which has the label s right and it will
09:11 - just display you are not eligible and it
09:14 - it did not execute the statement from
09:17 - line 9 or line 10 it directly I'll go to
09:23 - 11 line or line 11 which has the label s
09:28 - and then it printed out the statement
09:33 - you are not eligible and also it also
09:36 - adds the or I mean asked the age again
09:39 - and then it asks for the input from the
09:44 - user
09:46 - hey we can try this one more time so for
09:49 - example 15 so it's going to execute all
09:54 - the lines starting from 911 with the
09:59 - label name s okay so guys as I mentioned
10:07 - earlier that the the go-to statement is
10:11 - a unique form of statement okay and
10:14 - sometimes it is not advisable to use
10:18 - go-to statement in your C program but
10:20 - there are situations or conditions that
10:22 - you might want to use this particular
10:25 - go-to statement so for example if the
10:30 - you if you want to skip some of the
10:33 - lines in your program so let's try that
10:37 - okay so like for example you have
10:43 - statements like this printf and then
10:50 - this is the end of the program okay and
10:59 - then
11:02 - we can go like start abusing s we can
11:09 - add a label here e and then it will
11:13 - execute you know e instead of s so
11:20 - basically after this condition returns
11:25 - false then it will execute this and it
11:28 - will call the label e and then execute
11:31 - that this is the end of our program so
11:35 - let's try that execute our exit our
11:38 - program first and then build and run so
11:46 - let's try to input first 18 so it's
11:51 - going to you know execute from 9 9 until
11:58 - line 15 and then if we try to input 10
12:03 - then it's gonna say this is the end of
12:06 - the program ok so I think that's all
12:12 - there is to it in this tutorial guys and
12:14 - I hope that's clear on how to use the
12:16 - go-to statement in C so again this is
12:20 - quite useful in some situations and if
12:23 - you have questions please let me know in
12:25 - the comment section below and we will
12:26 - try to answer your queries and again
12:29 - guys thank you for watching and see you
12:31 - in the next video