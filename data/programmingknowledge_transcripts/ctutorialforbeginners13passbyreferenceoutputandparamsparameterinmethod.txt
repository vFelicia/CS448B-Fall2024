00:01 - hello guys welcome once again in the
00:02 - last video I've shown you how to pass
00:05 - parameters to your methods and how to
00:07 - return
00:08 - values now in this video I'm going to
00:11 - show you how to pass parameters by
00:15 - reference and how to pass parameters
00:19 - by output and in addition I will also
00:24 - show you how to pass arrays to your
00:27 - methods by using the key keyword params
00:31 - so let's get started till now we have
00:34 - seen that how we can pass the parameters
00:39 - to the method by value now for example I
00:42 - have a simple method which is public
00:46 - static void my function and I'm
00:49 - passing an integer to this method and
00:54 - I'm just assigning a value of 10 to this
00:59 - integ
01:00 - which is my
01:02 - parameter okay now I'm calling this um
01:07 - uh function here so what I'm doing is
01:09 - I'm just declaring another integer Y in
01:12 - my main function and I assign this
01:15 - integer integer variable a value of zero
01:18 - and I I will pass this integer to my
01:21 - function which is uh this here this
01:25 - parameter I'm passing it as Y and I want
01:29 - to see
01:30 - what is the value of y now so I will
01:35 - just print this by using console do
01:38 - right line so what do you think will be
01:41 - the value
01:43 - of y or what will be the printed value
01:47 - here will it be 10 because what we are
01:51 - doing is we are passing this integer
01:54 - here and now the whatever integer we
01:57 - pass we assign the value of 10 to this
02:01 - integer or will it be
02:04 - zero because it's initialized as zero Y
02:08 - is initialized as zero so let's see by
02:11 - running our program what is the output
02:14 - and the output is zero okay so now what
02:19 - is the meaning of this the meaning of uh
02:23 - this is because we are passing by
02:27 - values so whenever you pass uh any
02:31 - parameters to your function by value
02:34 - it'll just copy the
02:37 - value
02:39 - here and then
02:43 - so whenever you pass this y to here it's
02:47 - a it's a copy of Y okay and not its
02:52 - address so what whenever you pass the
02:55 - copy of Y here and this y will now be be
03:00 - x and x is equal to 10 but this value
03:04 - will remain the same because it's this Y
03:07 - is a copy and not the actual address
03:12 - which we are
03:13 - passing so another way of passing a
03:18 - parameter to a method is pass by
03:21 - reference and the PA pass by reference
03:25 - means we are passing the memory location
03:28 - of a variable
03:30 - in a method right so let's see how we
03:34 - can use reference
03:38 - here we just need
03:40 - to give this keyword RF here and now you
03:47 - are telling your method that take the
03:50 - reference or the address of the variable
03:53 - which you pass
03:54 - here and then assign to that address the
04:00 - value of 10 so it's not a copy we are
04:03 - just taking the address and assigning
04:06 - the new value to the address and we are
04:09 - not just copying the value to the copy
04:14 - right so as you can see it's showing you
04:18 - the error here but when
04:22 - you use the keyword here this reference
04:26 - in front of Y this error will go okay
04:30 - and earlier our result was Zero but now
04:34 - see what happens I will run the program
04:37 - and now the value is 10 so by
04:42 - passing by reference you are passing the
04:46 - address of your variable so
04:51 - whatever whatever is the value is
04:54 - assigned to this will be directly
04:56 - assigned to the address of the variable
04:59 - you are passing and if you don't use
05:02 - this reference you are passing by value
05:05 - and it's just a copy you are assigning
05:08 - to your variable and it will not be
05:11 - assigned to the address of that variable
05:16 - so this is passing by reference now
05:19 - let's assume that for example I have a
05:24 - function uh this function name is
05:28 - uh
05:32 - my Cal which is my calculation and what
05:37 - we want to do is we want to take the sum
05:41 - and we want to take the product and we
05:44 - want to print it okay so I will declare
05:48 - two variables int X and
05:51 - int
05:53 - Y and I
05:55 - will
05:57 - declare here another integer here which
05:59 - is ADD and which is the addition of X
06:05 - and Y X +
06:08 - Y and I want to return this
06:14 - okay so I will
06:17 - say return add right and here it will be
06:23 - returning integer so I will return here
06:27 - in I will remove this
06:31 - and
06:33 - so I will also declare two variables
06:37 - here
06:38 - red
06:40 - and let's
06:44 - say a or let's say a is equal to 45
06:51 - comma B is equal to
06:55 - 67 okay and I pass this A and B here a
07:00 - comma
07:03 - B okay and this method name is changed
07:08 - now so it's my Cal and we will comment
07:12 - this
07:17 - out and here comes the
07:20 - comma and this will go so what this will
07:24 - do you already know from the last videos
07:27 - that this will add the these two numbers
07:30 - and it will return the addition of these
07:32 - two numbers and you can just print it
07:36 - print the addition here right like
07:40 - this and addition will be printed so
07:45 - addition is 112 for 45 and
07:48 - 67 now suppose you
07:52 - want the addition of two numbers and the
07:55 - product of two numbers or the
07:58 - subtraction of or two numbers you can
08:01 - only return one value by using this
08:06 - return type right
08:09 - but how you can manage if you want two
08:12 - results from a method for example
08:15 - addition and a product there is a
08:18 - keyword called out from which you
08:22 - can you can access two output from a
08:26 - function so let's see how we can use
08:29 - this out
08:32 - parameter so in here what I'm going to
08:34 - do is I will declare two more parameter
08:38 - or I will pass two more
08:40 - parameter and I will
08:42 - say the third parameter is
08:48 - int
08:49 - sum and the fourth parameter is
08:55 - int fro for product right right and then
09:01 - I will say sum is equal to x + y and
09:06 - product is equal
09:09 - to X multili by
09:13 - y okay and now I don't want to return
09:18 - anything because whenever you want to
09:22 - return two value you can use the
09:25 - keyword out here so use keyword out here
09:30 - and keyword out here okay and now what
09:34 - this is doing is let me change the
09:36 - return type because we are not returning
09:38 - anything so we will write void here okay
09:42 - so now what this method is doing is we
09:46 - are passing two parameters here and what
09:49 - it does is it
09:51 - will take the addition of these two
09:54 - numbers and save it into this third
09:57 - variable and
09:59 - take the product of these two number and
10:01 - save it into this product variable and
10:04 - because of this out parameter or out
10:08 - keyword this method knows that this is
10:13 - the output we are expecting okay so
10:17 - whenever you add the out keyword here it
10:21 - will s
10:23 - your your method with st the values
10:27 - inside these par parameters and you can
10:30 - access these parameters in the main
10:33 - function okay so let's see how we can
10:36 - access these two
10:38 - parameters so now our
10:42 - function
10:44 - has four parameters right so we
10:48 - have first and second number one and
10:51 - number two and we
10:54 - want
10:55 - in some par some parameter which is I
10:59 - will initialize as zero and
11:04 - in product parameter which also I
11:08 - initialize by zero okay
11:11 - and we are passing A and B as a number
11:15 - so we are already passing A and B and
11:18 - these sum and product we we can pass it
11:21 - here as a third variable and as a fourth
11:26 - variable so now what whatever is the
11:30 - multiplication of your two
11:36 - numbers will be
11:38 - stored here and here right and you just
11:42 - need to use out keyword here also while
11:46 - calling this function okay and this
11:50 - error is
11:51 - gone
11:53 - so what we are doing here we are passing
11:56 - these two numbers A and B and we are
11:59 - summing those those two numbers save it
12:01 - into this variable sum and pass it here
12:04 - as a third parameter and we can access
12:07 - this sum parameter by another variable
12:12 - sum and now this value is stored here
12:15 - and it's same with the product we are
12:18 - calculating the product saving it here
12:21 - and we are accessing it with our product
12:24 - variable now for example I want to show
12:28 - the result so I can
12:32 - say
12:35 - sum is equal to a place
12:39 - folder which is
12:43 - zero
12:48 - and product is equal to place folder
12:54 - which will be one and some we'll pass as
12:59 - a first argument here and product as
13:05 - second okay so now we can output two
13:11 - parameter at the same time and now when
13:14 - we run the this program it shows the sum
13:17 - of these two numbers is this and product
13:21 - of these two numbers is this so whenever
13:24 - you want to Output more than one value
13:29 - from a method you can use this keyword
13:32 - out and you can store those values in
13:36 - those parameter which you initialize
13:38 - with this out keyword and while calling
13:41 - just use this out once again and you
13:44 - need one more parameter to access this
13:50 - that value from your method so you need
13:55 - every each parameter here and now this
13:58 - value is stored here and you can access
14:00 - it while you you can print it or you can
14:04 - use it into your
14:06 - code now how you can pass an array to
14:13 - your method that's
14:17 - next so to pass an array to an method
14:21 - let's delete all this code here and
14:26 - let's delete all this code here also and
14:29 - let's delete all the parameters here and
14:34 - let's say this method is
14:37 - our
14:40 - array method okay and we want to pass
14:45 - array to the this method
14:48 - right so you can pass array like this
14:52 - for example you want to pass an array of
14:54 - string so you can
14:56 - write string and this two square
15:02 - brackets and for example you can name it
15:06 - as names okay and what you want to do is
15:12 - for example you want to print all these
15:15 - names so I will I can use for each Loop
15:19 - which I have already discussed
15:22 - earlier in the last videos and I can
15:25 - print this so I can say by these curly
15:30 - braces I can
15:33 - say string
15:36 - name
15:39 - in
15:41 - names and I can print it
15:45 - like console
15:47 - dot right
15:51 - line and I can print this name here okay
15:56 - and suppose I want to show the size of
16:00 - uh the array also so I can
16:03 - write console
16:06 - dot right
16:09 - line and I can
16:17 - say
16:18 - array
16:22 - size is equal to and in placeholder we
16:26 - can pass this
16:29 - so like
16:31 - this
16:33 - names dot length so this names. length
16:38 - will return the length of your array
16:42 - which is the number of element in the
16:44 - array now whenever you want to pass an
16:49 - array to this to this um
16:53 - method you can do it like this and there
16:57 - is a keyword called
17:00 - params params which will help you to
17:05 - pass arrays to the method efficiently so
17:10 - let's say that we are not using params
17:13 - right now and we are just passing it
17:16 - like this
17:18 - okay so I will declare an array here
17:21 - first of
17:22 - all so I have the array which is my
17:27 - array and I have four parameters or four
17:31 - values inside my array and the values
17:34 - are for zero index name one for one name
17:38 - two name three and name four okay and I
17:41 - want to pass this array here so for
17:45 - example I don't want to pass anything to
17:48 - my
17:50 - method and I will just use it like this
17:54 - this is showing me the error right or
17:58 - this quickly
18:00 - line and this means that I have to
18:04 - pass an array to this method but
18:09 - whenever you use params
18:13 - keyword here so you have added params
18:16 - keyword here you can see here this twily
18:20 - line or error is gone and you you can
18:23 - even run your program and it shows array
18:28 - size zero because you you are not
18:31 - passing any array here so array size is
18:34 - zero and it's not even showing any error
18:38 - and it's not printing any names because
18:40 - you haven't passed anything but it's not
18:43 - showing any error right so by using
18:47 - perams you can you can pass your array
18:52 - efficiently and it
18:54 - will if you even not uh pass any
18:58 - argument here or any parameter here will
19:01 - not show the error now suppose we pass
19:06 - this array here which is my
19:09 - array
19:11 - then when you run the program it will
19:14 - print the names which is name 1 2 3 and
19:18 - four it will also show the array size
19:21 - which is four so we are printing just
19:23 - the same right so by using this keyword
19:27 - you can pass array efficiently to your
19:32 - method now there is one more way you can
19:35 - pass parameters to this array or you can
19:38 - pass a list of array to this method like
19:42 - this so you
19:45 - can
19:46 - pass first name for example N1 like this
19:50 - second name
19:53 - N2 inside
19:56 - this here and third parameter and three
20:01 - for
20:03 - example and whenever you pass this
20:08 - because of you are using this patterm uh
20:11 - keyword here it will take these three
20:14 - params as a list of array so this is the
20:18 - uh value at index one value at index
20:22 - value at index 0o 1 and two and when you
20:25 - run the program it will run fine it will
20:28 - even print your names and it will even
20:32 - print the size of the array so you can
20:35 - pass your
20:36 - collection like this also whenever you
20:39 - use this
20:41 - params
20:42 - okay now there are some rules of using
20:46 - params as a
20:48 - parameter in a method okay so what is
20:52 - the rule you can only declare other
20:56 - parameter for example int
20:59 - X before this param parameter so this
21:04 - param parameter should be the last
21:08 - parameter in the method okay so you
21:11 - cannot do it like this this is allowed
21:14 - but if you want to do it like this you
21:17 - want to pass parameter after your param
21:20 - parameter this will not work and this is
21:24 - not allowed okay so this is the first
21:27 - rule and the second rule is you
21:30 - cannot pass two params in the same
21:34 - method so suppose you want to pass this
21:38 - one param and second param like this
21:41 - which is with some other parameter name
21:45 - it's not allowed you can only pass one
21:50 - par parameter in a method these are the
21:54 - two uh rules you can say of using param
21:57 - keyword
21:59 - so in this way you can
22:02 - use reference parameters output
22:06 - parameters and the parameters with
22:09 - keyword param and you can pass array
22:13 - using this in cop so I hope you have
22:16 - enjoyed this video please rate comment
22:18 - and subscribe and bye for now