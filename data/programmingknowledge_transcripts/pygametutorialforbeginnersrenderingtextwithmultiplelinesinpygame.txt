00:03 - hey everyone today we're gonna again
00:05 - display text on pie game window but in
00:07 - several lines so that would make use of
00:10 - some basic python but with pygame so
00:13 - that's going to be a little different
00:15 - than what we usually do to display text
00:17 - on screen let's get to the code right
00:19 - away i'll import by game
00:22 - i'll initialize it
00:25 - write pi game dot init
00:28 - then i'll set up the screen i'll write
00:30 - screen equals spy game dot display dot
00:33 - set mode and let the screen size be 800
00:36 - comma 500
00:38 - then i'll given the caption i'll write
00:39 - pygame.display.setcaption
00:42 - let the caption be text
00:46 - then i'll get to the while loop i'll
00:48 - write while true
00:51 - for events
00:54 - empiregame.event.get
00:59 - if
01:01 - events
01:02 - dot type equals pi game dot quit
01:06 - then i'll call the quit function by pi
01:08 - game and i'll quit
01:11 - then i'll fill the screen with some
01:12 - color i'll write screen dot fill
01:18 - and let it be pink
01:22 - and then i'll update i'll write pie game
01:25 - dot display
01:27 - dot update
01:28 - so
01:29 - we're done with the basic structure
01:31 - let's get to the main code now since i
01:33 - want to display some text i need to
01:35 - define that so let me take this variable
01:38 - text
01:40 - that will be equal to a string
01:43 - i will write hello
01:45 - everyone
01:49 - slash n so i need to indicate that there
01:51 - is a new line beginning we are trying
01:56 - to display
02:01 - text on pie game window
02:06 - okay
02:07 - so that's my text that's that is what i
02:09 - want to display on
02:11 - the screen
02:13 - since i want to display the text like
02:16 - usual i'll have this font variable i'll
02:19 - write pi game dot font
02:22 - dots is font
02:25 - and let the font be ink free
02:28 - you can take any font
02:30 - and the font size b16 you can take any
02:33 - font size
02:36 - now just think what would be different
02:39 - while rendering text in different lines
02:41 - how would it be different from just
02:43 - displaying text on screen
02:45 - so when we display text on screen
02:47 - usually you might have noticed if the
02:50 - sentence is a bit long
02:52 - it runs out of the screen and it is not
02:54 - visible
02:55 - so we need to check after rendering each
02:57 - word on screen if the screen is ending
03:00 - here
03:00 - if not we can print the next word in the
03:03 - same line else we would move to the next
03:05 - line
03:06 - okay so for that i would need to define
03:09 - this display text function i'll write
03:12 - def
03:14 - display
03:15 - underscore text
03:17 - and i'll given the argument surface on
03:20 - the surface on which i want my text then
03:23 - the text the message i want to see on
03:25 - the screen
03:26 - the position pos
03:29 - the starting position of my text from
03:31 - where i want my text to start
03:33 - the font of the text and the color
03:36 - okay
03:38 - so in this function i would get the word
03:40 - separately in a list and render them one
03:43 - by one while checking the screen's ends
03:46 - okay so for that i'll have this
03:48 - collection
03:50 - variable i'll write collection equals
03:53 - for
03:54 - word
03:55 - in text
03:57 - dot split lines
04:01 - so what i have done is this text dot
04:04 - split lines would
04:06 - split this text the message you have
04:08 - passed in to the argument
04:11 - into several lines into several elements
04:13 - of a list so hello everyone would be one
04:16 - element of the list and we are trying to
04:18 - display text on phi game window would be
04:20 - another element of that list
04:22 - that's what we have
04:24 - and we would be traversing this list so
04:27 - it has two elements right now
04:29 - and then to get each word here what i'll
04:32 - do is word
04:34 - dot split
04:37 - i'll given the argument as the space
04:41 - and i'll put this entire thing in a in
04:44 - square brackets so that it becomes a
04:46 - list
04:47 - so basically this would be a 2d list as
04:50 - the text split lines would already give
04:52 - you a list and in that list you further
04:55 - use the split method that makes another
04:57 - list of words for each sentence okay
05:01 - now to given space between different
05:04 - words
05:05 - i will have the space variable i'll
05:07 - write space equals font dot size
05:10 - i'll given the space as argument
05:14 - and zero so font.size and
05:18 - any character in the argument
05:20 - would give you a tuple which has the
05:22 - width and height of that character you
05:24 - get that right
05:25 - for a font
05:27 - two characters would not possibly have
05:29 - the same width and height
05:31 - so zero would give you the
05:33 - zeroth element of that tuple would give
05:35 - you the width and the first element of
05:38 - that tuple would give you the height
05:40 - right now i am just working with the
05:41 - height because that is the amount of
05:43 - space i want to leave between in between
05:46 - two words while rendering two words
05:49 - okay then i have this x comma y
05:53 - equals position
05:55 - so this x and y would keep a track of
05:58 - current position and it would be used
06:00 - for checking if the screen has ended and
06:03 - to move to the next line okay now
06:06 - traverse this collection 2d list i'll
06:09 - write for lines in collection
06:14 - and for words and lines
06:18 - now i will render the text i'll write
06:21 - word underscore surface
06:25 - equals font
06:27 - dot render
06:29 - words comma true i want anti-aliasing to
06:32 - be true and the color that i passed
06:35 - in the argument for this function that
06:37 - will be passed here
06:39 - so i have rendered this text the word
06:44 - i am accessing each word now and i have
06:46 - rendered this word
06:48 - on a text
06:50 - on a surface on a rectangular surface
06:52 - now after rendering we use split usually
06:56 - but before that i need to check if there
06:58 - is still space or the word would be
07:00 - rendered in new line okay
07:03 - so for that i'll get the width and
07:05 - height of the surface i just rendered
07:09 - i'll write word underscore with
07:12 - word underscore height equals
07:15 - surface
07:17 - get size
07:18 - so this would give me two variables the
07:20 - width and height of the rectangular
07:23 - surface that was just
07:25 - declared and
07:27 - i'll check if there's a need to go on to
07:29 - the next line so i'll write if
07:33 - x plus
07:34 - word width
07:37 - is greater than equal to 800
07:41 - so x was my initial position from where
07:43 - i wanted to start the text and adding
07:46 - that to the word width
07:48 - would
07:49 - be like the entire width of the text
07:52 - if it is greater than or equal to 800
07:55 - now that position
07:57 - that x coordinate if it is greater than
07:59 - equal to 800 the width of my screen
08:02 - okay then what i'll do is i'll
08:05 - reassign x
08:06 - i'll write x equals position
08:10 - zero
08:11 - the x coordinate of the first word
08:14 - and for y since i want to go to the next
08:17 - line i'll increment y
08:19 - by the word height okay i hope you get
08:21 - it
08:22 - that to move on to the next line there
08:24 - is no such thing while rendering text on
08:26 - pi game any lines no lines are there so
08:29 - i'll increment y by word height so that
08:32 - will give me a new line okay
08:35 - now after checking the condition i can
08:37 - use the blood function i'll write
08:39 - surface
08:40 - dot blit
08:42 - word surface
08:44 - comma x comma y so x comma y would be
08:47 - the position where i want this
08:48 - rectangular surface this word surface to
08:50 - be there
08:52 - and so i got the rectangular
08:54 - surface on the screen
08:56 - and to update x every time
08:59 - i will increment it by the word width
09:02 - and space that was the width of the
09:05 - space okay
09:06 - so let me write this down i'll write x
09:09 - plus equals
09:11 - word width
09:13 - plus space
09:15 - okay
09:17 - now outside this inner
09:19 - for loop i'll reassign x
09:22 - if the line is finished but there's
09:24 - still space then you need to go to the
09:26 - next line okay that's what a new line
09:29 - means
09:31 - so
09:32 - i'll reassign x i'll write x is equals
09:34 - to position zero and i'll increment y by
09:37 - word height just what we did when the
09:40 - screen
09:41 - ended okay
09:43 - that was our function display text
09:46 - function
09:47 - so inside this while true loop i'll call
09:49 - on to this function after screen dot
09:52 - fill
09:53 - i'll write display
09:55 - underscore
09:56 - text
09:57 - i'll pass in the argument screen is the
09:59 - surface i want my text on
10:02 - i have the message i want to print as
10:04 - text variable
10:06 - so text would be that message
10:09 - and i'll start from 20 comma 20
10:12 - that position
10:13 - then i have also declared the font
10:16 - variable and let the color be purple for
10:19 - the text
10:21 - okay so this was it for this program
10:24 - let's run this and see if we get the
10:27 - text in two different lines
10:33 - so you can see that we have our text in
10:35 - two different lines
10:37 - so after hello everyone there is still
10:39 - space but since
10:41 - i have a new line
10:43 - so the next line was printed onto a
10:46 - different line okay
10:48 - cool so
10:49 - we got the text as we wanted it to
10:53 - now what if you don't have just two
10:55 - lines but a complete paragraph and you
10:57 - are out of lines the screen height is
11:01 - completely filled
11:03 - here we managed to get the text on a new
11:05 - line when we were out of screen with
11:08 - but what if we run out of height you
11:10 - might think of resizing the screen
11:12 - think about this try to write a program
11:15 - to solve this problem
11:16 - i hope you understood whatever we did in
11:19 - this program
11:20 - thank you