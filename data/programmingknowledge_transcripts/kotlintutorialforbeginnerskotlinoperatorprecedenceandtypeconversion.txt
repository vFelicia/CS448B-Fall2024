00:00 - in the previous video we have discussed
00:02 - about various operators in kotlin
00:05 - so
00:06 - now we will discuss about
00:08 - what happens if
00:10 - one or more than one two or more than
00:12 - two
00:13 - operators
00:14 - occur simultaneously in the same
00:17 - statement
00:19 - what i mean to say is
00:22 - like i'll just mention
00:24 - a
00:25 - function
00:27 - having very variable
00:31 - or value x
00:34 - as having 20
00:36 - value y having
00:40 - 30
00:41 - and variable z having a value of 40.
00:46 - so
00:47 - i am asking you that what happens when
00:53 - okay i'll just make it better
00:56 - what happens when i'll assign reassign x
00:59 - plus equals to
01:02 - z
01:04 - into y
01:06 - what happens then
01:08 - and i'll then
01:09 - print l
01:12 - so what would be the output of this
01:15 - particular
01:16 - function
01:17 - how can we decide that
01:19 - there are two
01:21 - equa
01:23 - two operators simultaneously like we are
01:26 - assigning the value of x as x plus
01:30 - z into
01:32 - y so we cannot say that we here use the
01:37 - uh board mass
01:38 - okay
01:39 - so what we do here how we determine the
01:43 - output so we there is a order of
01:46 - precedence
01:48 - so we can treat it like the preference
01:50 - order so the post fix has the most
01:54 - preference order
01:56 - so i'll just
01:57 - quickly explain to you what is postfix
01:59 - and prefix so we have discussed about
02:02 - the increment and the decrement operator
02:03 - right the plus plus and the minus minus
02:05 - operator that increase or decrease the
02:07 - value by one
02:09 - so the post phase and the prefix
02:11 - increment and decrement of operator
02:14 - are a plus plus and plus plus a
02:17 - so a plus plus is the postfix and plus
02:19 - plus a is the prefix increment operator
02:22 - okay so the original value of a is
02:24 - returned at first and then a is
02:27 - incremented by one
02:29 - so just read it out
02:31 - and i'll be explaining it in more detail
02:34 - at later part of this video okay so i'll
02:37 - just continue with this so the higher
02:40 - highest preference is of the most fixed
02:42 - uh
02:45 - operator and the second highest
02:47 - preference is of prefix
02:50 - operator the multiplicative operator is
02:53 - the into the divide and the modulus okay
02:56 - it has the third most
02:59 - or uh or preference okay
03:02 - and then comes the additive operator of
03:04 - the plus and the minus and then comes
03:06 - the comparison operator when we do the
03:08 - comparison and all and then comes the
03:11 - equality operator and at last there are
03:14 - the assignment operators
03:16 - okay so this has the least priority
03:20 - okay
03:22 - so
03:22 - here your body mass logic would be true
03:25 - but uh if it would be n2 equals to and z
03:29 - plus y it won't be true so i'll just
03:32 - quickly
03:33 - run the program and
03:37 - till then we will discuss
03:39 - what would be the value of x
03:42 - so
03:43 - as we can see that the multiplicative
03:47 - operator has the higher preference
03:49 - so the
03:51 - okay so the output is 10 20 120 okay so
03:55 - we can see that the multiplicative
03:58 - operator has the higher preference so uh
04:00 - firstly the
04:02 - multiplication would happen
04:04 - and the code will look will look like x
04:07 - plus equals to z into y what is z into y
04:10 - it is uh 120 1200
04:13 - okay so x
04:15 - plus equals to
04:17 - 1 1200 so the reassigned value of x
04:21 - should be the
04:22 - previous value of x plus the 1200 and
04:25 - what is the previous value of x the
04:27 - previous value of x is 20 so the
04:28 - reassigned value of x is 120 as we saw
04:32 - in the output
04:34 - okay
04:35 - so it is i guess it is clear to all of
04:38 - you so we will just work on one more
04:43 - such
04:44 - example
04:46 - where variable a is 40 variable b is
04:49 - also 40.0 okay so it is a double type
04:53 - and
04:55 - there is a value c that is equals to
04:58 - plus plus a
05:00 - minus minus minus b
05:03 - okay so now what is b
05:07 - so now we will discuss first and then we
05:09 - will see the output
05:12 - so here is 40 b is 40.0 a is 40.0 now
05:16 - we can see that the prefix
05:19 - operator has the most
05:21 - uh
05:22 - the highest order
05:24 - okay also we have seen here that in the
05:27 - prefix the value of a is incremented by
05:31 - 1 and then it returns the value okay in
05:33 - the post fit
05:35 - postfix the value of a is written in the
05:38 - first and then the
05:40 - a is incremented by one so
05:43 - what i am saying trying to say here is
05:45 - uh that
05:47 - here the
05:48 - the plus plus a returns the incremented
05:51 - value okay so the plus plus a is the
05:54 - incremented value
05:57 - so
05:58 - it has the highest
06:00 - order of precedence
06:02 - so
06:04 - like i can say that c is equals to plus
06:06 - plus a will be 41.0
06:10 - and minus minus b would be
06:13 - 39.0
06:16 - so when i run this program
06:18 - i should be able to see the output as
06:21 - 2.0
06:24 - okay
06:24 - and here it is
06:26 - so we were right
06:28 - so
06:29 - we can conclude the order of precedence
06:32 - and we can say that it's just a
06:34 - preference order by which the operators
06:36 - are designed this decided okay
06:39 - now we will come to this
06:41 - increment and
06:43 - decrement operator
06:46 - and what is the what is the meaning of
06:49 - prefix or postfix operator so
06:52 - uh when i define
06:53 - uh
06:55 - variable
06:58 - alpha
06:59 - and
07:00 - assign its value as 23
07:03 - okay
07:03 - and what i'll do is i'll just
07:07 - print ln
07:08 - and
07:10 - a plus plus
07:11 - sorry alpha plus plus
07:15 - so what result do you expect so
07:18 - mostly you would be expecting
07:22 - uh 24
07:23 - but that's not true
07:25 - the
07:26 - output
07:27 - is 23
07:29 - isn't that shocking so what i mentioned
07:32 - about the postfix operator was that the
07:35 - original value of a is written at first
07:37 - so when i
07:38 - run this program the
07:40 - alpha plus plus returns the original
07:42 - value of alpha but at the end of this
07:46 - line or at the starting of the next line
07:48 - the value of alpha is incremented by 1
07:51 - so
07:52 - when i print the value of alpha here
07:56 - what will happen is so
07:58 - here it at line 36 the the output would
08:02 - be 30 24 23 and here at line 37 the
08:07 - output would be 24
08:10 - okay that's just because the prefix and
08:12 - the postfix
08:14 - so what would happen
08:16 - if
08:17 - instead of alpha plus plus i'll print
08:20 - the value of plus plus alpha
08:24 - okay so
08:27 - the prefix operator increases the
08:31 - value instantly by 1 and then returns
08:33 - the value so the output of this would be
08:37 - 24 only
08:40 - okay because it is a
08:41 - prefix operator
08:43 - okay it is 25 because after that the
08:46 - alpha of
08:47 - the value of alpha
08:49 - is changed to 24 and then we have
08:52 - increased it one more time so it is 25
08:55 - okay so you can note here that it is
08:57 - implemented and then returned and in the
09:00 - postfix it is written and then
09:03 - incremented
09:04 - okay now we will move to the
09:07 - type conversion
09:08 - so what do you mean by type conversion
09:10 - basically if uh i know nothing about uh
09:13 - cotton i just know english so what what
09:16 - one should mean by type conversion one
09:18 - should one would mean that we have to
09:20 - convert the type
09:22 - okay so uh what i what will happen if i
09:26 - have to convert like i have a is as 40
09:30 - and i have to convert it into an integer
09:33 - so how will i do so so i'll con
09:38 - create a variable
09:39 - and
09:40 - name it as a int
09:44 - okay
09:45 - and
09:46 - give it a value of
09:48 - a which is the original operator and
09:52 - add
09:53 - two int function to it
09:56 - okay so what it did what it what it did
09:59 - is uh it
10:01 - created the
10:02 - value of a into two int
10:06 - so it just transferred the value of a to
10:08 - int
10:09 - so now the a int variable is of integer
10:12 - type
10:14 - okay so when i print the value of
10:19 - end
10:23 - okay just i'll just hide this code
10:27 - and when i print the value of a int it
10:29 - should be
10:30 - 40 instead of 40.0
10:34 - okay
10:35 - so uh
10:37 - the it it is used many times so when i
10:41 - suppose i have a someone's phone number
10:43 - uh stored
10:45 - like an integer
10:47 - phone number
10:50 - as integer
10:54 - okay so now what i have to do is i have
10:56 - to store this integer
11:00 - store this integer
11:02 - as a string because um
11:06 - but just i have to do so so what i'll do
11:08 - is i'll just
11:11 - create a
11:12 - another variable
11:14 - which is phone string
11:18 - and
11:20 - what i'll do is i'll just give it a
11:22 - value of phone number dot to string
11:25 - okay and i'll when i hover over it and
11:28 - it has the data type of string
11:31 - so
11:32 - you might all have
11:34 - somewhat somewhere heard about the sky
11:37 - values
11:39 - a s i sky values
11:43 - if you haven't heard about it just
11:45 - google it and then
11:46 - resume the video okay so what what if i
11:50 - have a character
11:52 - any character i have
11:55 - any character and i want its sky value
11:58 - what will i do
12:02 - so
12:02 - i have a character suppose a
12:05 - and i want its sky value so what i'll do
12:07 - is i'll just print ln and
12:10 - a
12:11 - dot oh sorry
12:13 - character dot to int
12:16 - so
12:22 - it will when i run this program
12:27 - it will just show the
12:29 - sky value of a
12:32 - okay so the sky value of a is 97 when i
12:35 - want the sky value of exclamation mark
12:38 - i'll run the program and the sky value
12:40 - of exclamation mark is
12:43 - 33
12:45 - okay
12:46 - so that's all for this video guys thank
12:48 - you for watching this video and stay
12:50 - tuned for more