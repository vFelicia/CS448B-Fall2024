00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last video we have seen
00:06 - how we can perform simple threshold
00:10 - nsync item using various threshold link
00:13 - needs so we have used Treach binary
00:17 - threshold is fresh trunk fresh 2-0 tries
00:21 - to 0 inverse so these were all the
00:24 - simple threshold in technique now in
00:27 - these thresholding techniques we were
00:30 - setting a global value of our threshold
00:34 - so in this example for example here the
00:37 - global value of threshold is 50 here 200
00:41 - here 127 so we were setting in simple
00:45 - threshold link the global value and this
00:48 - means that it is same for all the pixels
00:53 - in the image now in this video we are
00:57 - going to learn how to use adoptive
00:59 - threshold in the adoptive threshold amad
01:03 - where the threshold value is calculated
01:07 - for the smaller region so the threshold
01:11 - is not global for every pixel but it's
01:15 - calculated for a smaller region and
01:18 - therefore there will be different
01:21 - threshold value for different regions
01:24 - now why do we need this type of adoptive
01:28 - thresholding so using simple
01:31 - thresholding might not be a good idea in
01:34 - all the conditions so there might be
01:36 - conditions where the image has different
01:39 - lighting conditions in different regions
01:42 - and in those cases where the lighting
01:46 - conditions in the images varies from
01:50 - point to point in those cases we might
01:53 - want to use adoptive threshold in
01:57 - adoptive threshold 'uncle Q lates
02:00 - the threshold for a smaller region of
02:03 - images so we get different threshold ik
02:06 - bail use for different regions of the
02:09 - same image and as a result adoptive
02:12 - thresholding
02:13 - gives us better results for images with
02:17 - varying illumination so let me show you
02:20 - the problem with simple threshold n't
02:26 - illumination at different regions so I
02:30 - have this image called pseudo cou dot
02:32 - PNG which I'm loading using I'm read
02:35 - method and then I'm just showing this
02:38 - image using I'm show method and then
02:41 - let's use the simple thresholding
02:43 - technique which is tresh binary for this
02:47 - and we have set the global threshold
02:50 - value of 127 here and then we will see
02:54 - the result after this threshold is
02:58 - applied to the image so I'm going to run
03:01 - this program and let's see what happens
03:04 - so this is our original image and then
03:07 - this is the result which we got so on in
03:12 - the result you can see when we apply a
03:14 - same global threshold value some of the
03:19 - region of this image is black and other
03:22 - region of this image is visible right so
03:27 - because the image have different
03:30 - illumination value at different regions
03:33 - that's why we see half of the image
03:36 - which have the good illumination and we
03:40 - don't see half of the image which
03:42 - doesn't have the better illumination so
03:46 - in that case it's the better idea to use
03:49 - adaptive thresholding so let's see how
03:52 - we can use adaptive thresholding so here
03:55 - what I'm going to do is I'm going to
03:56 - declare a variable called th2 and then
03:59 - we use a CV dot adoptive threshold so
04:04 - this is the method which we are going to
04:06 - use for performing adopting Thresh
04:09 - holding and this takes few arguments so
04:12 - first is the source so our source is the
04:16 - image variable now the second parameter
04:18 - here is the max value so the max value
04:22 - is the non zero value assigned to the
04:25 - pixels for which the condition is
04:27 - satisfied so in our case the maximum
04:31 - value which we can provide to a pixel is
04:34 - 255 and we cannot go more than that
04:37 - right now the third parameter here is
04:41 - the adoptive method so this adoptive
04:45 - method is going to decide how the trash
04:48 - holding value is calculated and there
04:51 - are two types of adoptive methods which
04:54 - we can use so the first method is called
04:57 - CB 2 dot adoptive thrash mean C so what
05:03 - is the meaning of this adoptive thrash
05:05 - mean underscore C so using this method
05:09 - the threshold value is the mean of the
05:12 - neighborhood area and here is the
05:15 - documentation of these two methods so
05:18 - adoptive thrash means C gives us the
05:21 - threshold value using this function and
05:26 - this is going to give us the mean of the
05:29 - block size multiplied by block size
05:31 - neighborhood of X comma Y minus C which
05:35 - is the constant and the second adoptive
05:39 - threshold type is this one which is
05:42 - adoptive trash Gaussian underscore C and
05:45 - in this adoptive threshold in the
05:48 - threshold value is the weighted sum of
05:51 - neighborhood values where weights are
05:54 - the Gaussian window so let's use the
05:57 - first adoptive method which is the
06:01 - adoptive trash mean underscore C now the
06:04 - next parameter here is the threshold
06:06 - type so the threshold type which we are
06:09 - going to use is the trash binary which
06:12 - we have also seen in the last video also
06:16 - and then the next value is the block
06:19 - size so block size decides the size of
06:23 - the neighborhood area so here we are
06:26 - going to give the block size 11 and the
06:30 - next parameter here is the value of C so
06:34 - we have seen that we need to give the
06:37 - value of C also when we
06:40 - use the adoptive thresh mean see and
06:43 - adoptive thresh gaussian see so this is
06:46 - the value of c which we are going to
06:48 - give and c is just a constant which is
06:52 - subtracted from the mean in the case of
06:55 - this adopted thresh mean method or the
06:59 - weighted mean in the case of gaussian
07:02 - adoptive threshold
07:04 - okay so constant we are going to give
07:07 - here is two and now what we are going to
07:11 - do is we are going to just load this
07:14 - image which we got after applying this
07:18 - adaptive thresholding and let's just
07:21 - comment the other window so we will just
07:25 - see the original image and the adaptive
07:29 - thresholding result I am going to run
07:31 - this code and you can see the original
07:35 - image here and the result of adoptive
07:39 - thresholding which looks much better
07:41 - than the simple threshold link technique
07:45 - so let's uncomment this also so I'm
07:48 - going to uncomment this so we will see
07:52 - all the three result at the same time so
07:54 - this is the original image and you can
07:57 - see the simple thresholding gives us
07:59 - this value using the global threshold of
08:04 - 127 and adoptive thresholding gives us
08:08 - this value or this image which is much
08:12 - more readable than the simple
08:15 - thresholding technique image so this is
08:18 - how you can use adoptive trash mean see
08:20 - method in a same way we are going to use
08:24 - the other adaptive thresholding
08:27 - technique which is called adoptive trash
08:31 - Gaussian C so instead of this we are
08:35 - going to use adoptive thresh gaussian c
08:38 - and then all the parameters we are going
08:42 - to leave as same and let's load the
08:46 - result of this type of thresholding
08:49 - which is stored in th 3 so let's run
08:53 - this code and let's see what
08:54 - happens so we have already seen this
08:58 - image which is the simple thresholding
09:01 - this is the result of the adoptive
09:04 - thresholding mean see and this is the
09:08 - result of adaptive thresholding Gaussian
09:11 - underscore C so both of the result looks
09:14 - good because the adoptive threshold
09:17 - again gore-ism calculates the
09:19 - thresholding value for different regions
09:22 - so the trash holding value is not global
09:25 - for each and every pixel of the image
09:28 - and we have seen the two adoptive
09:31 - methods which are available in adoptive
09:33 - thresholding so in this way you can use
09:36 - adaptive thresholding in open CV using
09:39 - Python I hope you have enjoyed this
09:41 - video and I will see you in the next
09:43 - video
09:51 - you