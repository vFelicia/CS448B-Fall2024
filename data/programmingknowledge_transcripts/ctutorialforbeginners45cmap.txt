00:01 - hello guys welcome to the next video
00:02 - tutorial on C++ programming for
00:04 - beginners and in this video we will see
00:07 - what are STD maps and how to use maps in
00:14 - C++ so first of all what uh what is a
00:18 - map in
00:20 - C++ so map or maps are associative
00:25 - containers that stores element formatted
00:29 - by combination of key values and the
00:32 - mapped value so unlike vectors which uh
00:38 - maintains their uh values on the basis
00:41 - of
00:42 - index the maps maintains uh their values
00:47 - on the basis of key so maps are
00:51 - associative
00:53 - containers and if you
00:55 - know or if you have learned about
00:58 - associative array or associative uh sets
01:02 - you know that uh in
01:05 - association of uh sets or arrays there
01:09 - is a key and on the basis of key you can
01:13 - assign the value to a container now
01:16 - let's uh see how we can uh you know
01:20 - declare a map in
01:22 - C++ so to include a map what you need to
01:26 - do
01:27 - is you need to include a library called
01:33 - map so
01:37 - include
01:39 - map okay and now to declare a map you
01:43 - can just declare a map using STD map and
01:48 - then in these angular brackets you can
01:52 - Define your key and value uh data types
01:58 - so first uh argument in this uh angular
02:02 - brackets is the key data type for
02:05 - example we can define a key data type as
02:10 - integer like int or float
02:15 - or
02:18 - STD string it can be key can be anything
02:21 - string character integer or float now
02:25 - for our example we will Define uh key as
02:28 - uh integer
02:30 - and the value as for example
02:35 - string okay so suppose we want to make a
02:40 - map of some student based upon their ID
02:46 - okay so using this map we can do this so
02:51 - ID we will save in the form of integer
02:54 - and that will be the key of our map and
02:58 - the names we will save as strings right
03:02 - and let's um name our map variable as
03:08 - name map
03:11 - okay now to use map or to insert values
03:15 - in the
03:17 - map it's very simple to insert value in
03:20 - a map like this so just take uh variable
03:25 - and then in the square brackets you just
03:28 - provide the key because uh our first
03:33 - element or First Data type here we have
03:35 - defined is the key data type so key is
03:39 - integer in our case so in this square
03:42 - bracket we Define the key for example
03:45 - key is equal to 1 and then we Define the
03:50 - value after equal to so we will assign
03:53 - the value to this key which is one for
03:57 - example Tom and in the same way we can
04:01 - uh add more elements to the map
04:18 - okay so now we have defined a map of
04:23 - some
04:24 - values and uh here 1 2 3 4 5 are called
04:30 - the key of our map and the names are
04:35 - called values right now depending on the
04:39 - key we can access the values for example
04:43 - we want to access the value of uh the
04:47 - map where key is equal to 4 okay so we
04:51 - can just write STD see
04:55 - out and the name of uh our map variable
05:00 - so
05:01 - name map for example and then you can
05:06 - just call this key using the square
05:09 - bracket for example three and
05:13 - then once again
05:16 - STD end line okay and now once I run the
05:25 - code it gives me the value Mark right
05:29 - because key I have Associated to Mark is
05:33 - three now because maps are
05:38 - associative you cannot provide the
05:41 - duplicate key to two values so for
05:45 - example uh someday you decide that we
05:49 - will assign uh key 4 or or key for the
05:56 - name John and the name some other name
06:00 - also okay so in this case the first
06:06 - assignment will be valid so there is
06:10 - there are no duplicate keys or you
06:12 - cannot create duplicate keys inside a
06:15 - map okay so for example I will try to
06:18 - access the value of name map 4 and run
06:23 - the program it will only give me the
06:26 - last assigned value okay and and not the
06:31 - previous values okay so it's not
06:34 - possible to uh you know have two similar
06:39 - keys because you cannot duplicate keys
06:42 - in map right because they are
06:45 - associative now in order to uh iterate
06:50 - over the map what you can do is you can
06:54 - uh uh use uh iterator so there is uh
06:59 - special class iterator and using which
07:03 - you can iterate over the map so using
07:06 - for Loop you just need your
07:26 - map okay so this is called the iterator
07:31 - and we can iterate over these values
07:34 - like this so first of all in the
07:38 - iterator we can print the key using this
07:42 - iterator like this so just copy the
07:45 - iterator and the key is accessed by the
07:49 - function called first okay and the value
07:54 - is accessed by a function called SE
07:59 - second okay so this is key and the value
08:04 - is it
08:07 - do
08:10 - second and here we can uh make it little
08:15 - bit
08:16 - fancy like this okay and now when I run
08:20 - the
08:27 - program it gives me error because this
08:30 - is a pointer so I should use these
08:34 - arrows here instead of uh dot
08:40 - notation and now when I run the
08:43 - program I can print the values with keys
08:47 - and values so key is equal to 1 then uh
08:53 - the name associated with this key is Tom
08:57 - when key is equal to two name associated
08:59 - with is Max key is equal to three name
09:02 - associated with it is Mark like this so
09:05 - it will iterate over whole map and show
09:08 - you the values right now you can also
09:13 - print the size of the map like this so
09:17 - the name of the map
09:20 - dot
09:23 - size okay and this function will give
09:26 - you the size of the map
09:28 - so
09:35 - run run it once again and it says Map
09:38 - size is equal to 5 okay so the size
09:42 - function gives you or returns you the
09:44 - size of the
09:46 - map now there is uh uh an other function
09:51 - called
09:52 - arrays or first let's uh see the
09:56 - function called clear and clear as we
09:59 - have seen
10:00 - in Vector it clears the map so now you
10:05 - will uh you know after clearing the map
10:08 - you will uh just empty your map so I
10:12 - will call this clear here and then we
10:15 - check the size of the map after clearing
10:18 - the map and the result will be zero okay
10:23 - so Map size become zero after clearing
10:26 - your map so it deletes all the key
10:29 - uh value pairs
10:33 - okay now there is an other way to uh
10:38 - insert the values to a map right and
10:43 - that is let me commment this and that is
10:46 - using a function called insert so
10:49 - just uh the name of your map
10:54 - dot insert and it takes a pair so there
10:59 - is something called
11:02 - STD pair and using this STD pair you
11:07 - can create a pair of two data types so
11:12 - our pair is integer and string pair
11:15 - because our map is you see integer and
11:20 - string pair right so I will give the
11:23 - integer and string pair here and then in
11:26 - the brackets you can give a uh the key
11:30 - first and then the name
11:39 - okay it'll print this uh other values in
11:44 - the map or it will add the these other
11:47 - values with key six and seven to the map
11:50 - okay now for example you want to search
11:54 - something inside a map how can you do it
11:58 - there is a function which you can call
12:00 - over your
12:03 - map and that's called uh find function
12:07 - and the
12:13 - iterator it and
12:17 - then your uh value
12:23 - so second because second as we have seen
12:28 - in this for Loop indicates the value
12:31 - okay so it will find the value five
12:34 - inside your map and store it in this
12:36 - iterator and using this iterator you can
12:39 - uh find the second value of uh this so I
12:42 - will close this and run it once
12:45 - again and you can see key found and the
12:49 - value assigned to the key five is
12:54 - Patrick you can see here also
12:57 - right on this iterator using this
13:00 - iterator you can even delete the value
13:03 - after finding the value here okay so for
13:07 - example I want to delete the value where
13:10 - key is equal to 5 so what I can do is I
13:13 - can just call a function on this map
13:17 - called Erase will erase the key value
13:21 - pair where uh value is equal to five
13:26 - because we are finding value here right
13:29 - once again we will uh run our
13:32 - program and now you can see here in the
13:36 - for Loop it has printed all the values
13:39 - except the value five because we have
13:41 - already erased this value
13:44 - right now there are some other
13:47 - interesting uh interesting functions in
13:50 - map for example if you want to check if
13:54 - the map is empty or not so you can just
13:58 - I will just call
14:01 - is empty and on the map you can just
14:05 - call this function called empty map
14:11 - dot empty and it gives you the value
14:14 - true or false and if uh it returns true
14:18 - then map is empty otherwise it's not
14:21 - empty so right now our map is not empty
14:24 - so it returns zero right but for example
14:28 - we clear our map after clearing our
14:35 - map
14:37 - clear and now I I'll run the
14:41 - program now it returns one because our
14:44 - map is empty right so in this way you
14:49 - can use map