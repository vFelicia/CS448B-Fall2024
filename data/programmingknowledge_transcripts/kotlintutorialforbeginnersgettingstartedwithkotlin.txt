00:00 - okay so uh now we will
00:03 - jump right into with starting with
00:05 - kotlin so uh in this training uh we will
00:08 - like mostly structure this as we will uh
00:12 - study first about kotlin we will master
00:14 - kotlin and then we will
00:17 - go to the android studio and build some
00:19 - app
00:20 - okay so
00:22 - what is a program
00:24 - let's let's go to the basics
00:28 - so you can think of a program as a
00:30 - series of instruction
00:32 - for the system to perform some action
00:35 - okay so i give some instruction a series
00:39 - of instruction
00:40 - such as a is equals to this b is equals
00:42 - to this and then perform a plus b
00:45 - and then print what is a plus b so this
00:47 - is a program for example you could write
00:50 - a program that creates a birthday card
00:52 - in the program you could write an
00:54 - instruction to print congratulatory text
00:57 - or calculate someone's age from their
00:58 - birth year
01:00 - okay so that is a program
01:03 - what is a programming language
01:06 - just like you use human language to
01:08 - communicate with another person you use
01:10 - programming language to communicate with
01:12 - the operating system of the computer
01:14 - fortunately programming language are
01:16 - less complex than human languages and
01:19 - quite logical
01:20 - so you might be thinking that english or
01:22 - hindi is very easy why do we need to
01:24 - study c plus plus or kotlin or java
01:28 - they are
01:29 - not
01:30 - they are very typical so they are not
01:32 - typical when we will end this
01:35 - uh
01:36 - journey of our kotlin you you will be
01:39 - very you will be master in kotlin
01:42 - so
01:44 - and they are logical
01:46 - like when i say is equals to 5
01:48 - that means a is equals to 5 that does
01:50 - not mean anything else okay so android
01:53 - apps are written in kotlin programming
01:55 - language kotlin is a modern
01:57 - language created to develop
01:59 - created to help developers write code
02:01 - efficiently with
02:03 - a few errors as possible
02:05 - okay so that's why we have choose kotlin
02:08 - so what was the creation of hotline why
02:10 - was
02:11 - uh you might have seen in the previous
02:14 - video
02:14 - that in 2019 the kotlin the kotlin was
02:18 - made as a
02:19 - official language
02:21 - for the app development
02:22 - so how the kotlin was created kotlin was
02:25 - invented to solve a developer's
02:26 - challenge of chat trend
02:29 - they needed a simpler tool than java to
02:32 - work with their main product called
02:34 - intellij idea
02:36 - totally written in it the guys
02:38 - investigated the alternatives stayed
02:40 - unsatisfied and decided to invent their
02:44 - own language so
02:46 - at the start
02:48 - the android apps were made in c plus
02:52 - and then they moved to java and they
02:54 - were pretty comfortable in java but what
02:56 - was the problem was the problem was the
02:58 - main problem was the java code in java
03:01 - was very redundant and there are many
03:02 - problems so
03:04 - one day google called
03:06 - zed brains
03:07 - that they should look into the matter
03:10 - so what jetbrains does did
03:13 - they invented their own language
03:16 - so cotwin was invented to solve
03:18 - developer challenge of jetbrains
03:21 - they needed a simpler tool than java to
03:23 - work with their main product called
03:25 - intellij idea
03:26 - the guys investigated the alternative so
03:29 - they invented their own language okay
03:33 - so the main key features of kotlin are
03:36 - the kotlin offer a number of advantage
03:39 - in using or learning it okay question
03:42 - programmers have access to all java
03:44 - frameworks and libraries while having
03:46 - the ability to write more clear and
03:50 - concise code so portland is like just a
03:52 - kid of java
03:54 - so it has all the frameworks all the
03:56 - libraries of java
03:58 - and it has a more it is a modern
03:59 - language so it is a it has a less
04:03 - a clear and concise code
04:05 - they can use both languages while
04:07 - building a mobile solution
04:09 - and easily migrate their projects if
04:11 - needed so
04:12 - if i am writing a code
04:15 - in particularly in kotlin like i am
04:17 - building a
04:18 - mobile app
04:20 - uh so i can build a mobile app while
04:23 - using kotlin and java both
04:24 - simultaneously
04:26 - i can write one code in java
04:28 - another code in kotlin and mix matches
04:30 - if if needed
04:32 - okay so why
04:34 - are we using kotlin
04:37 - so the main
04:38 - reasons are
04:40 - kotlin is java based kotlin has a
04:43 - familiar program kotlin has string
04:45 - insertion
04:47 - kotlin uses autocast
04:50 - kotlin has arguments and equals
04:53 - kotlin has expression and property so
04:56 - i'll be explaining each of them what uh
04:57 - what does java base mean kotlin
04:59 - programming language programming
05:01 - language is a
05:04 - is
05:06 - uh more recognizably
05:08 - like
05:09 - it has a
05:11 - java based
05:13 - programming language
05:15 - so
05:17 - it is more usable like java is a very
05:20 - old programming language and
05:22 - java environment and platform in kotlin
05:25 - basically runs on java environment and
05:27 - platform
05:28 - okay
05:29 - this means that existing
05:31 - java based project can seamlessly run on
05:33 - this language
05:36 - okay so what is familiar program so the
05:39 - syntax or and the basic structure of
05:41 - this programming language
05:42 - are extremely easy and familiar
05:46 - the reason being kotlin is java based
05:48 - programming language and the syntax
05:51 - makes use of
05:54 - domain object oriented programming
05:55 - domain
05:57 - okay these are the most familiar syntax
05:59 - and language of coding
06:02 - so
06:02 - what is string insertion view we will be
06:04 - looking into it in the
06:07 - next videos but i'll cover it
06:12 - so uh
06:15 - like
06:16 - um
06:18 - the string used in kotlin is same as
06:20 - java and very simple and familiar way of
06:23 - making changes in coding
06:26 - okay so the other three we will be
06:29 - looking into it in a while
06:31 - so just hang on
06:34 - okay so the features of kotlin
06:38 - okay huh
06:39 - we have
06:40 - uh
06:41 - learned we have studied the
06:45 - definition of kotlin or we have studied
06:48 - kotlin in the uh second video or the
06:51 - third video
06:52 - okay so it has very um much more
06:56 - technical terms like kotlin is a cross
06:58 - platform statistically typed general
07:00 - purpose programming language with type
07:02 - inference
07:03 - okay so we will be looking into these
07:05 - terms now
07:06 - so what is a cross platform language
07:09 - so a cross platform language can be used
07:12 - in any operating system so the code
07:14 - written in kotlin on windows can be
07:15 - executed on mac os as well as linux as
07:18 - well as
07:20 - any other operating system and vice
07:22 - versa
07:23 - okay
07:24 - and there is
07:25 - statistically type so what is a
07:27 - statistically typed
07:28 - language
07:30 - so a statically typed language is a
07:33 - language
07:34 - where variables variable types are known
07:37 - at the compile time such as java c or c
07:39 - plus plus in most of these languages
07:42 - type must be expressed in expressively
07:45 - indicated by the programmer
07:47 - okay so before compiling the code uh the
07:51 - we have we know the
07:53 - variables variable type use
07:56 - okay so this means that the language is
07:58 - able to tell the data type of any
08:00 - variable during the compile time and
08:02 - does not allow a variable to have
08:04 - values of different data types in a
08:06 - simple program
08:08 - so
08:09 - i have defined an integer a is equals to
08:12 - five
08:13 - so before compiling the program the
08:15 - compiler knows that a is an integer that
08:18 - simply means that
08:20 - okay so what is type inference
08:22 - this means that the language can
08:24 - automatically detect the data type
08:26 - so when i define any variable a is
08:29 - equals to 5 the language is able to
08:33 - able to detect the data type such as
08:36 - the data type of a is an integer
08:38 - okay what is a jvm java virtual machine
08:42 - so jvm is an extract machine
08:45 - it is a specification that provides
08:47 - runtime environment in which java byte
08:49 - code can be executed so we will be
08:51 - looking more into it in a while
08:54 - but
08:56 - overall
08:57 - jvm is a virtual machine an abstract
09:00 - machine
09:01 - that provides a runtime environment for
09:03 - java so java x java code is executed in
09:06 - it
09:07 - by it
09:10 - so that it enables
09:12 - the computer to run java programs or
09:14 - similar language such as kotlin that are
09:16 - also compiled by java bytecode so it
09:18 - helps run the program
09:21 - jvm are available for many hardware and
09:23 - software platform
09:26 - that is jvm platform dependent jvm is
09:28 - platform dependent
09:30 - okay
09:31 - so what are the operations of jvm the
09:33 - jvm loads code
09:35 - like i have written the code in the
09:36 - compiler what now the jvm loads the code
09:39 - the it verifies the code it executes the
09:41 - code and it provides the runtime
09:43 - environment
09:45 - okay so that's all for this video stay
09:47 - tuned