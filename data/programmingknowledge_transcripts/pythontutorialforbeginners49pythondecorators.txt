00:00 - hey guys welcome to the next video on
00:02 - Python to tool for beginners in this
00:04 - video I'm going to show you what our
00:05 - decorators in Python and also I'm going
00:09 - to show you how to use decorators in
00:11 - Python but before starting with this
00:14 - video I will suggest you to watch the
00:16 - last two videos in which I have talked
00:18 - about the basics of functional
00:20 - programming in Python so let's get
00:23 - started with the decorators so first of
00:27 - all what are decorators so decorators
00:30 - wraps a function and modify its behavior
00:36 - in one way or another without changing
00:40 - the source code of the actual function
00:44 - so let's see in practice how to declare
00:48 - and use decorators so first of all what
00:52 - I'm going to do is I'm going to define a
00:54 - very simple method and I'm going to name
00:58 - it as a say hello for example which
01:01 - doesn't take any argument and it just
01:05 - prints hello world let's say now let's
01:08 - say I want to decorate this function say
01:10 - hello and I want to print some kind of
01:14 - string before and after the printing of
01:17 - hello world without changing the code of
01:22 - the function so here we can declare that
01:27 - decorators so I'm going to declare a
01:30 - decorator function for this and I'm
01:33 - going to name it as decorator underscore
01:36 - func
01:36 - and this decorator function is going to
01:39 - take one argument and that this argument
01:41 - will be a function now we have seen in
01:44 - the last video that we can return a
01:47 - function from a function or we can pass
01:51 - the function as an argument of another
01:54 - function so inside this function I'm
01:57 - going to declare one more function and
01:59 - I'm going to name it as wrapper
02:02 - functions which takes no argument and
02:05 - inside this wrapper function what I want
02:07 - to do is I want to call a function which
02:10 - is passed as an argument of the decor
02:13 - data function and then at last I just
02:16 - want to return this function so I'm
02:18 - going to just call return and I'm going
02:20 - to return the wrapper function without
02:23 - the parentheses so in the case of
02:25 - closures we have seen that we can return
02:29 - the inner function without the
02:32 - parentheses and that makes them the
02:34 - closures now let's say we are going to
02:36 - pass the say hello function as an
02:39 - argument of this decorator function and
02:41 - this function will be called here so in
02:44 - order to print something before and
02:46 - after this string hello world we can
02:50 - print something here also so here we can
02:54 - just write let's say we want to print X
02:58 - and we want to print this X 20 times
03:01 - let's say so we can just write this kind
03:04 - of notation and after the execution of
03:07 - function I want to print let's say Y 20
03:11 - x so this is the simplest form of
03:13 - decorator which takes function as an
03:17 - argument now in order to call this say
03:21 - hello function with the decorator I am
03:23 - going to declare one variable and I'm
03:26 - going to name it as hello and then I'm
03:29 - going to call the decorator function and
03:32 - I told you that this decorator function
03:34 - takes the function as an argument so we
03:37 - can pass the say hello function as an
03:39 - argument to this decorator function
03:42 - which will be passed here and it will be
03:46 - called here now in the last video in
03:48 - case of closures we have seen that
03:51 - because this decorator function is
03:54 - returning the inner function that means
03:57 - this variable will contain the inner
04:00 - function so we can call this hello with
04:04 - these parentheses and because this
04:07 - wrapper function doesn't take any
04:09 - argument so we can call it like this and
04:11 - let's run the code and let's see what
04:14 - happens so when we run the code you can
04:16 - see before the hello world string we
04:20 - have printed X 20 x and after the hello
04:25 - world we have printed
04:27 - I twenty times so this is a simple form
04:31 - of decorator and this is how you can use
04:34 - decorators in Python but Python also
04:37 - provides the simple way of declaring
04:40 - this kind of notation so instead of
04:44 - using this line of code I'm going to
04:46 - comment this line of code and also this
04:51 - line of code because instead of doing
04:54 - this you can use this kind of notation
04:56 - so just above your function in which you
05:00 - want to apply the decorator you use at
05:02 - the rate symbol and then the name of the
05:06 - decorator which you want to apply to the
05:08 - function and this notation above the
05:11 - function is equivalent to this kind of
05:14 - notation and now we can directly use
05:16 - this function say hello without the use
05:20 - of these two lines of code so let me run
05:24 - the code once again and let's see what
05:26 - happens
05:27 - and the result is the same so this is
05:30 - how the decorator works so let's go
05:33 - through the definition once again so
05:35 - decorators wraps the function and modify
05:40 - its behavior in one way or another
05:43 - without changing the actual code of the
05:48 - function so this decorator have changed
05:50 - the behavior of this function without
05:54 - even changing the actual code of this
05:58 - function now one question which may
06:00 - arise here is can we use more than one
06:03 - decorator with the same function so
06:07 - let's try to declare two decorator
06:10 - functions so we are going to declare two
06:12 - decorator functions and this decorator
06:15 - function I am going to name it as
06:16 - decorator X and the second function I am
06:19 - going to name it as decorator y
06:22 - so the first decorator function is going
06:25 - to decorate your function with the x
06:28 - value and the second decorator is going
06:31 - to decorate your function with the value
06:34 - Y so we are going to replace this by Y
06:37 - now here above your function
06:40 - you can use the decorator X and then
06:44 - also you can use the decorator Y above
06:48 - it so I'm going to just write at the
06:50 - rate decorator Y and this notation is
06:54 - perfectly fine
06:55 - so you can use one or more decorators
06:58 - with a single function so let me run the
07:01 - code and let's see what happens I'm
07:02 - going to run this code and you can see
07:05 - what happens so first of all the Y
07:08 - decorator has wrapped the function with
07:12 - Y's and then after that comes the X
07:16 - decorator which have decorated the
07:18 - function with X values and then your
07:23 - actual string is printed which is hello
07:25 - world now one thing to note here is the
07:29 - order of that decorator in which they
07:32 - are used so now we will try to just
07:35 - exchange the places of the decorator x
07:39 - and y and now let's run the code and
07:42 - let's see what happens so before it was
07:44 - printing y first and then the X when
07:47 - this decorator was used at the top and
07:51 - then the X decorator was used and now
07:53 - when we run the code the opposite of
07:56 - that will happen now if you want to see
07:58 - the equivalent notation of this using
08:02 - decorators so I'm going to just comment
08:04 - these decorators from here and let's try
08:07 - to use this kind of notation with our
08:09 - decorators so I'm going to just
08:11 - uncomment this code and this time what
08:13 - I'm going to do is I'm going to use this
08:16 - decorator x with the say hello and I'm
08:21 - going to enclose this notation inside
08:25 - that decorator Y so I can use this kind
08:28 - of notation which is equivalent to this
08:31 - kind of notation also so I'm going to
08:34 - run the code and you can see because
08:36 - decorator Y is the outermost decorator
08:40 - here it's going to just print the value
08:43 - of y and then we have the decorator X
08:46 - which is going to print the value of x
08:48 - and then our actual string if we
08:50 - exchange the places of decorator
08:53 - X
08:54 - and decorator why then the order of the
08:59 - printing will also change so now this
09:02 - was the very basic decorator example so
09:05 - let me remove this example and let me
09:09 - give you one more example so instead of
09:11 - using this function let me give you one
09:14 - more example so I'm going to declare a
09:16 - function called
09:17 - divide which is going to take two
09:20 - arguments let's say x and y and what
09:23 - it's going to do is it's going to return
09:26 - the value of the division of X divided
09:30 - by Y and let me remove these decorators
09:34 - from here so in the last say hello
09:36 - example over say hello function was not
09:39 - taking any argument and now we are
09:42 - giving our divide function to arguments
09:46 - that means we need to change the wrapper
09:49 - function here also so I'm going to name
09:51 - my decorator as decorator divided which
09:54 - takes a function and I'm going to change
09:57 - the wrapper function and now this
10:00 - wrapper function is going to take two
10:02 - values which is the value of x and y you
10:04 - can also write a and B it doesn't matter
10:07 - it just takes two values and instead of
10:11 - this kind of notation let me print the
10:13 - values of a and B first of all so inside
10:16 - this print function I'm going to just
10:18 - write divide and then we are going to
10:22 - pass the value of a comma and comma B so
10:26 - we are going to print the value of a and
10:28 - B and then we are going to check if the
10:30 - value of B is 0 or not so I'm going to
10:34 - just say if B is equal to 0 then we are
10:38 - going to print the message that division
10:40 - with 0 is not allowed and also we are
10:45 - going to return immediately from this
10:48 - function otherwise if the value of B is
10:50 - not equal to 0 then we are going to
10:53 - return the division of a by B so once
10:56 - again without changing the actual
10:58 - function which is divide we have changed
11:01 - the behavior of this function which is
11:03 - divided using this decorator function
11:07 - the last thing which we need to do here
11:10 - is to call our decorator function above
11:13 - our normal divide function and now I can
11:17 - use this divide function normally so I
11:18 - am going to just use this divide
11:21 - function inside the print and I'm going
11:24 - to pass two values here let's say 15 and
11:28 - 5 and let's run the code and it's going
11:31 - to print first of all this line which is
11:33 - printed using this statement which says
11:36 - divide a and B which is divide 15 and 5
11:40 - and then because the value of B is not
11:44 - equal to 0 that means this value is
11:48 - returned with the result 3 which is the
11:51 - division of 15 by 5 now let's change the
11:55 - value of B and we are going to just give
11:58 - 0 as the value of B or Y here and I'm
12:02 - going to run the program once again and
12:04 - now you can see that this statement is
12:09 - printed which says the region with 0 is
12:11 - not allowed and because this function is
12:15 - not returning anything or you can return
12:17 - 0 from here it doesn't matter and I'm
12:20 - going to run the code it prints 0 here
12:23 - so this is how you can use decorators
12:26 - with the function which takes some
12:29 - arguments and return some values now let
12:33 - me give you one more real-world example
12:35 - which we can use with decorators so
12:38 - instead of our divide function now let's
12:43 - say what I want to do is I want to
12:45 - declare a function I'm going to just
12:48 - name it as my func which takes one
12:51 - argument or number so this will be a
12:54 - number and then this function calculates
12:57 - the sum of the number from 1 to the
13:01 - number which we provide here so let's
13:03 - say we provide 10 here so this function
13:06 - is going to give us the sum of the first
13:08 - 10 numbers and now I'm going to declare
13:11 - a variable called sum which I initialize
13:15 - it with zero and in the next line I'm
13:18 - going to use for I in
13:20 - some range and this range will be the
13:23 - number which is provided plus 1 because
13:26 - range starts from zero and not from 1
13:29 - that's why I'm adding 1 here in the
13:32 - range if I want to calculate the sum of
13:35 - first 10 numbers let's say and if I
13:38 - provide 10 here then range will give you
13:41 - until 9 that's why I'm adding 1 here and
13:44 - then inside this for loop I'm going to
13:47 - just do some plus equals I and at last
13:52 - I'm going to just return the value of
13:55 - the sum now till now we have seen how to
13:58 - create decorator functions for the
14:01 - functions which takes no argument or for
14:04 - the function which takes some argument
14:06 - and we want to use these argument inside
14:10 - the wrapper function but at times you
14:12 - need to write a decorator function which
14:16 - will be a generic decorator function
14:19 - which means the decorator function which
14:21 - I'm going to create here will be used
14:23 - with not only this function but the
14:26 - other function which can take this
14:28 - argument on multiple number of argument
14:30 - or no argument so let's see how we can
14:33 - write a generic decorator function so
14:36 - let's say I want to measure the timing
14:39 - of this function how much time this
14:42 - function takes in order to execute this
14:46 - code and timings we can measure with any
14:50 - function so it doesn't matter that we
14:52 - need to use this function to calculate
14:55 - the timing you can also use the
14:58 - decorator function which I am going to
14:59 - create with the other functions also to
15:03 - measure the timing of those functions so
15:06 - because it's a timing decorator so I'm
15:08 - going to name it as timing and it takes
15:12 - once again the function as an argument
15:13 - and because we don't know which argument
15:17 - the function is going to take right now
15:20 - this function takes one argument but it
15:23 - doesn't matter you need to measure the
15:25 - time of the function which takes one
15:28 - argument or two argument or three
15:30 - argument or no argument so that's why in
15:32 - that case we can use
15:34 - this kind of notation Astrix odds here
15:37 - and then comma double Asterix kW args
15:42 - here and these two arguments makes your
15:44 - wrapper function independent of the
15:47 - number of argument which will be
15:49 - provided with this function and in order
15:53 - to calculate the timing of the function
15:56 - we need to import a module so let's
15:58 - import a module so I'm going to just
16:00 - write from time import time so there is
16:04 - an inbuilt time function which we can
16:07 - use to get the time and now under this
16:10 - wrapper what I'm going to do is I'm
16:12 - going to just declare a variable called
16:16 - start and I'm going to save the value of
16:19 - current time here
16:20 - so whenever you call this time with the
16:23 - parent says it's going to give you the
16:25 - current time now in the next line what I
16:27 - want to do is I want to just create a
16:30 - new variable which I will call it as
16:33 - result and I am going to assign the
16:37 - result of this function so let's call
16:39 - this function with the variables which
16:42 - we have provided into the wrapper
16:44 - function so because we don't know which
16:47 - argument comes with this function so we
16:50 - are going to just pass these argument as
16:52 - it is into the function argument which
16:55 - is passed as an argument of your
16:58 - decorator let's provide the indent here
17:00 - so this will be satisfied and then in
17:03 - the next line we are going to just print
17:06 - that time elapsed so I'm going to just
17:09 - say elapsed time and then this curly
17:13 - bracket and you already know we can call
17:16 - a format method on the string and here
17:20 - as an argument we just want to give the
17:23 - result of the start time and the end
17:26 - time so let's declare the end of time
17:29 - also after the function execution is
17:31 - completed we are going to measure the
17:33 - current time once again and then we are
17:36 - going to just say and the time which is
17:39 - stored in the end variable minus the
17:43 - start time and it's going to give us the
17:45 - time elapsed in the execution of
17:48 - dysfunction and at last because this
17:51 - function or the other function can also
17:53 - return some value at last we are going
17:55 - to return the result which we have
17:58 - calculated so I'm going to just write
18:00 - return this result so this is the
18:03 - generic timing function which you can
18:05 - use with any function whichever you like
18:09 - so I'm going to just decorate my
18:12 - function using at the rate the timing
18:16 - decorator and then I'm going to call
18:19 - this my function inside the print method
18:21 - so print
18:22 - my function and let's say I want to
18:25 - calculate the sum of first 20,000 values
18:30 - and I'm going to run the code and here
18:33 - in the result you will see zero point
18:35 - zero in the elapsed time because this
18:38 - value is very small and elapsed time is
18:41 - approximately equal to zero for the
18:44 - smaller values because we are just
18:47 - iterating over the smaller value but the
18:50 - sum is the exact sum so let's increase
18:53 - this value by two zeros and let's also
18:57 - print the value of start time and end
19:00 - time here so I'm going to just print the
19:02 - value of the end time and the start time
19:06 - so we know that what is the starting
19:09 - time and what is the ending time and I'm
19:11 - going to run the program once again and
19:13 - now you will be able to see that this is
19:17 - the starting time and this is the ending
19:20 - time and you will be able to see some
19:23 - time elapsed in the execution of this
19:27 - function and when I increase one zero
19:29 - here so you will be able to see two
19:32 - seconds is taken now for the calculation
19:35 - of the sum of this number so you can use
19:39 - this timing decorator in order to
19:41 - calculate the time of execution of any
19:45 - other function other than this also so
19:48 - this is how you can use decorators in
19:50 - Python I hope you've enjoyed this video
19:53 - and I will see you in the next video