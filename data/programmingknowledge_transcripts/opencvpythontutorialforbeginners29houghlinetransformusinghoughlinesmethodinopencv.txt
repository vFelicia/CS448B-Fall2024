00:00 - hey guys welcome with the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last video we have seen a
00:07 - brief Tori introduction about half line
00:10 - transform so I have told you that open
00:14 - CV implements two kind of half line
00:16 - transforms one is a standard half line
00:20 - transform using half lines method and
00:23 - the second is the probabilistic half
00:26 - line transform using half lines capital
00:30 - P method so we are going to use the half
00:35 - line method in this video and see how we
00:38 - can use this half line method to detect
00:41 - the lines inside an image using half
00:45 - transform now I also told you that there
00:50 - are four steps associated with half
00:53 - transform so the first step was the edge
00:57 - detection step using any edge detection
01:00 - method preferably canny edge detection
01:03 - the second step is the mapping of edge
01:07 - points to the half space and store these
01:11 - edge point to an accumulator the third
01:14 - step was the interpretation of
01:16 - accumulator to yield lines of infinite
01:19 - length and the fourth step was the
01:22 - conversion of these lines to the finite
01:26 - lines so let's say we have this image of
01:30 - this Sudoku dot PNG and you can see all
01:34 - these lines here which we want to
01:37 - detects so this is a line and this is
01:39 - the line so all these lines we want to
01:42 - detect using the half line tour and
01:44 - transformed so I have already written
01:46 - this code so I am going to go step by
01:50 - step to explain how this code works so
01:55 - in the first step you just need to
01:57 - import the normal c v2 and the numpy as
02:00 - NP then here I am just reading this
02:04 - image using I am read method and the
02:08 - next step I'm converting this image into
02:11 - a grayscale image and storing it
02:13 - into this variable which is great
02:16 - because for Kenny edge detection it's
02:19 - preferred to have grayscale images
02:22 - rather than your normal colored images
02:26 - now in the next step we are applying the
02:31 - Kenny edge detection method on this
02:33 - grayscale image so here this cb2 dot
02:36 - kenny method takes these arguments 1st
02:40 - argument is the image 2nd and 3rd
02:42 - argument is the first threshold and the
02:45 - second threshold so I'm giving the first
02:47 - threshold as 50 and the second threshold
02:50 - here as 150 and the 4th argument here
02:54 - and giving aperture size is equal to 3
02:57 - now in the next step I'm using this half
03:02 - lines method this is the normal Hough
03:05 - transform method which is implemented in
03:08 - OpenCV now this half line method takes
03:13 - few argument the first argument is the
03:16 - image so we are just just passing this
03:21 - edge detected image to the first
03:25 - argument of this half lines method the
03:29 - second argument here is the row value
03:31 - this row value is the distance
03:34 - resolution of the accumulator in pixels
03:37 - normally it's taken as 1 the third value
03:41 - is the theta value which is the angle
03:45 - resolution of accumulator in radians so
03:49 - for that we are just using numpy so NP
03:52 - dot pi divided by 180 so this is also
03:56 - typical in this method and the next
03:59 - argument here is the accumulator
04:01 - threshold parameter so what does this
04:05 - mean it's a threshold so only those
04:08 - lines are returned that get enough wood
04:11 - that means that those lines will be
04:14 - returned which have threshold greater
04:17 - than this value so starting value I have
04:20 - taken here as 200 as threshold so now
04:25 - this half lines method is going to
04:27 - to return the output vector of lines now
04:31 - I have explained you how polar
04:34 - coordinate works for the Hough transform
04:38 - in the last video so these lines will be
04:42 - in the polar coordinate so each line is
04:46 - represented by two or three element
04:48 - vectors either Rho and theta or Rho
04:52 - theta and words so as you can see this
04:56 - is the output vector of lines so I'm
04:59 - going to iterate over each and every
05:02 - line vector and what it gives is the
05:06 - first element of this line is going to
05:10 - give you these two values row comma
05:13 - theta it's going to give you row comma
05:16 - theta or row comma theta comma boat
05:19 - right so right now I'm using just two
05:23 - parameters here Rho comma theta so Rho
05:27 - is the distance from the coordinate zero
05:31 - comma zero which is the top-left corner
05:34 - of the image and the theta is the line
05:37 - rotation angle in radians so all this
05:42 - Rho and theta I have explained you in
05:44 - the last video and we have seen how we
05:47 - can represent these Rho and theta values
05:50 - in the half space so first of all what
05:55 - we are going to do is once we get the
05:57 - Rho and theta value is we are going to
06:00 - just get the COS theta value and the
06:04 - sine theta value because we want to
06:07 - convert these polar coordinates into the
06:10 - normal Cartesian coordinates for the
06:14 - line method because this line method as
06:17 - you can imagine takes these coordinates
06:20 - right which are the Cartesian
06:22 - coordinates so this is the point 1
06:25 - parameter and this is the point 2
06:27 - parameter so x1 y1 and x2 y2 so first of
06:32 - all we are just getting the COS theta
06:35 - value and theta here is this theta so
06:39 - cos theta we are just
06:41 - to a and the sine theta value we are
06:44 - just assigning to B and we are just
06:49 - multiplying this a to the row so this
06:53 - will give us the x0 value and the by
06:56 - zero value when you multiply B by row so
07:02 - this Row is this row value so this X 0
07:06 - and y 0 is going to give you the origin
07:09 - which is 0 comma 0 or top-left corner of
07:13 - the image but we want the lines not the
07:19 - top-left corner of the image so how we
07:23 - can get these x1 and y1 coordinate and
07:27 - x2 and y2 coordinate this is given in
07:31 - this equation so once you get your x0
07:35 - and y0 value you can get the value of x1
07:39 - and y1 coordinate using this equation so
07:43 - you just need to typecast everything
07:45 - into integer so this equation x1 value
07:49 - stores the rounded off value of the row
07:52 - as I have shown here so they say RA
07:56 - represent row so row multiplied by cos
07:59 - theta cos theta we have already taken in
08:03 - the a variable so we are essentially
08:05 - here multiplying the row multiplied by
08:10 - cos theta minus thousand multiplied by
08:13 - sine theta sine theta value is the value
08:17 - of the B right so x0 plus thousand
08:22 - multiplied by minus B here okay y1 we
08:26 - get using this equation so y1 is equal
08:30 - to int in the bracket y0 plus thousand
08:34 - multiplied by a which is essentially
08:37 - this equation which is row multiplied by
08:40 - sine theta plus thousand multiplied by
08:43 - cos theta so these two values are going
08:47 - to give you the first coordinates and
08:49 - similarly we are going to get the x2 and
08:52 - y2 coordinate using these two equations
08:54 - so here everything is same just this -
08:59 - is new right so in this equation you
09:04 - just need to replace a plus by minus and
09:06 - you get the x2 Lu same you have to do in
09:11 - the case of y2 so in this equation if
09:15 - you just replace this plus by minus you
09:17 - will get the y2 value and we have
09:20 - already seen how to use the CB - dot
09:23 - line method it takes a few argument as
09:27 - you can see here first is the image so
09:30 - image is our original image second is
09:33 - the x1 and y1 coordinate which is the
09:35 - first point comma the second point so as
09:38 - you already know that a line is a
09:42 - collection of point so you need at least
09:45 - two point to create a line right so this
09:49 - is the coordinate of the first point and
09:51 - this is the coordinates of the second
09:53 - point the next argument here is the
09:56 - color so color I have taken simply zero
09:59 - comma zero comma 255 and the last
10:01 - parameter here is the thickness of the
10:04 - line which I have taken to here and the
10:07 - next line of code you already know I
10:11 - think so after this line we come out of
10:14 - the loop and we are just plotting all
10:17 - the lines using this loop on the
10:21 - original image and once we get all these
10:24 - lines on the original image we are just
10:26 - showing it using I am show method and at
10:30 - the last we are just destroying our
10:32 - window once we are done with the image
10:35 - so let's run this code and let's see
10:38 - what happens so I'm going to run this
10:40 - code and you can see all these lines are
10:44 - plotted here let's see the canny edge
10:49 - detected image also so I'm going to just
10:53 - after the canny edge detection I'm going
10:55 - to once again add this I'm show method
10:59 - to show the canny edge detected image
11:02 - also so you can see here this is the
11:06 - canny edge detected image
11:08 - all the edges are detected and based
11:10 - upon all these lines which are detected
11:14 - here these lines are drawn but the
11:18 - problem here is these lines are of
11:21 - infinite length so there is no end to
11:24 - this line this these lines just go from
11:26 - the start or the corner of the image to
11:30 - the other corner of the image so you can
11:33 - see they start from here and go to the
11:36 - next corner
11:38 - they don't just stop here
11:41 - so in this half transform you see that
11:46 - even for the line with two argument it
11:49 - takes a lot of computation and we don't
11:52 - even get the correct result
11:55 - so this problem can be solved using the
11:59 - other method which is implemented using
12:02 - this half line P method which is the
12:06 - probabilistic half line transform which
12:09 - I'm going to show you in the next video
12:11 - so how we can get the better result
12:14 - using half line P method we are going to
12:17 - see in the next video so we are going to
12:20 - apply the half line P method on the same
12:23 - image and we will compare the result so
12:27 - that's it for this video I am going to
12:29 - see you in the next video
12:39 - you