00:00 - hello guys welcome once again in this
00:02 - video I'm going to teach you about
00:04 - method hiding in cop in the last video
00:07 - we have learned how inheritance Works in
00:11 - cop so for example I have a base class
00:14 - called FC FC stands for first class and
00:18 - it has a public method called display
00:23 - and what this public method is doing
00:25 - simply it's showing a message and in
00:29 - this case it's showing
00:32 - FC colon colon display that means we are
00:36 - in FC class which is our base class now
00:41 - for example we have second class which
00:45 - is our derived class SC stand for second
00:49 - class and which is inheriting first
00:53 - class which is FC right so this is our
00:58 - derived class and this is our
01:00 - Base Class and base class has one method
01:04 - called display right now in the main
01:08 - method I just created
01:11 - the instance or object of the second
01:15 - class which is a derived class and I
01:20 - display the message okay because second
01:24 - class is inheriting the first class its
01:27 - methods are a available
01:30 - for use in the second class also that's
01:33 - why I'm using object. display because
01:37 - this second class can also access this
01:40 - method okay and when I run the
01:44 - program as expected it will show this
01:47 - message as FC colon colon display so
01:52 - let's wait for the
01:58 - console
02:00 - and it shows as a expected FC colon
02:04 - colon
02:05 - display now suppose for some unknown or
02:09 - weird reason second class don't want to
02:13 - use this method which is display and
02:18 - second class want to have its own
02:21 - display me method it want to display its
02:24 - own message rather than using the
02:26 - display message or display method from
02:30 - the B Base Class so for example it makes
02:34 - a bold effort
02:38 - to just have this display method in
02:43 - itself also so now our second
02:46 - class which is a derived class also has
02:50 - this display method so let me change
02:52 - this to s. display which is second class
02:56 - Colin display this is first class col
02:59 - display and this is second class coding
03:02 - display so what do you think now will
03:06 - happen this message will be shown or
03:09 - this message will be shown let's see
03:12 - what happens I will run the
03:19 - program add
03:23 - bills and we have the message SC which
03:27 - is second class colon colon dis play
03:30 - Okay
03:33 - so this class is hidden by the derived
03:38 - class by using this method but look at
03:42 - this there is a green squiggly line here
03:46 - right and this uh line showing the
03:49 - warning to the user that method or my
03:54 - project. example doc. display hide the
03:58 - inherited member which is fc. display
04:03 - okay so if you do this c will warn you
04:08 - about this that you are hiding this
04:10 - method
04:12 - and so you will see this green line in
04:16 - order to remove this warning what you
04:19 - can do is you can use in front of this
04:23 - void a keyword called new so this new
04:27 - keyword tells C that I want to or second
04:32 - class want to create uh its own display
04:36 - method right so now when you run the
04:41 - program it even it still shows this SC
04:45 - do display or at C display but the error
04:50 - or the warning is gone okay so now this
04:55 - kind of Declaration whereever deriv
04:58 - class want
05:00 - to hide the original method which is
05:04 - there in the base class then it can
05:07 - create its own method with the same name
05:11 - okay and it can it can hide this
05:14 - method okay now for
05:18 - example for some other
05:21 - reason some other user don't want to use
05:25 - this you want to use this only even if
05:28 - you have clared this so how can you show
05:32 - this after having or after method hiding
05:37 - of
05:38 - this test based class so there can be
05:44 - two or three ways of doing this first
05:48 - way let's commend this and first way
05:52 - what you can do is you can call your
05:55 - base class in here so what you you can
05:59 - do is you can write
06:02 - base base means this class base is your
06:07 - base class and you are in the derived
06:10 - class so this base keyword automatically
06:12 - knows that you are indicating to the
06:17 - parent or to the base class so when I
06:21 - hover over this you can see here in the
06:23 - message that it's indicating FC class
06:26 - which is our Base Class so you can write
06:29 - base
06:30 - dot
06:33 - display okay and I will just
06:36 - give this bracket and semicolon and when
06:40 - I run this program it shows FC which is
06:43 - our Base Class colon colon display okay
06:47 - so whenever you want to display this uh
06:52 - Base Class method even if you have
06:55 - defined your method hiding method in the
06:58 - derived class also so then you can do it
07:02 - like this there are there is other way
07:05 - of doing uh the same
07:08 - thing and I will show you in a moment
07:11 - this second method so what you can do
07:15 - here is you can typ
07:19 - cast your
07:21 - second class as first class so what you
07:26 - can do here you have your object
07:29 - C object is equal to new SC so you have
07:33 - this object okay so what you can do is
07:36 - you can just copy your first class which
07:39 - is your base class and then you can
07:43 - just type Class cast
07:46 - this object as a first class okay and
07:51 - just
07:52 - give these brackets and just you can
07:55 - write
07:58 - Dot
08:02 - so it should not look like this but this
08:05 - will come this FC will come in the
08:08 - bracket and now you have the these
08:12 - brackets so now when you give the dot
08:16 - you have the display method right so you
08:19 - can display this method like this and
08:22 - you can commment this
08:24 - line so what this code will do is it
08:29 - will typ cast your object as a base
08:34 - class and you already know that your
08:38 - derived class is just a special case of
08:42 - your base class right so derived class
08:47 - already have all the method or access to
08:50 - all the method and variable in the base
08:53 - class right and derived class can also
08:57 - have its own method but it has all the
09:01 - uh access to its uh
09:03 - public Base Class method right so this
09:07 - is called typ casting uh your object and
09:12 - when I run the program it will show FC
09:14 - full conon display right and it will not
09:17 - show SC which is second class colon
09:20 - conon
09:21 - display okay now third way of doing this
09:26 - the
09:26 - same is so what you can do is I will
09:31 - just commend this once again and we are
09:36 - going to use the third method so what
09:38 - you can do is you can just copy your
09:41 - base class name which is FC in our case
09:46 - and I can make it a
09:49 - object so I will write obj and let me
09:54 - come in this line also so I will D
09:57 - Define an object of my base class and I
10:01 - will make an instance of
10:06 - new
10:07 - SC okay so derived class I will create
10:12 - an instance of second class which is
10:15 - derived class as an object of first
10:20 - class okay and I will uncommon this and
10:24 - when I run the program it'll give you
10:27 - the same result f see colon colon
10:30 - display okay so what you have done is
10:33 - you have created the instance of your
10:37 - base class as a child class or a derived
10:43 - class
10:45 - okay but if you might be wondering that
10:50 - the reverse is Al also possible that you
10:53 - can do
10:55 - SC and here you
10:57 - can derive this SC instance from first
11:01 - class which is your base class it will
11:03 - show you an error and the error shows
11:07 - that cannot implicitly convert your base
11:11 - class to
11:12 - your child class or derived class okay
11:16 - so this is not possible why this is not
11:18 - possible because
11:22 - your base class or your base
11:25 - class have or you you can create the
11:29 - instance of Base Class as a child class
11:32 - but you cannot create
11:36 - uh child class instance as a base class
11:41 - okay so this is the third method you can
11:45 - use right so you have
11:48 - three uh types of code from which you
11:52 - can call your base class method even if
11:57 - you have declared or redeclare this uh
12:02 - same method in your derived class right
12:06 - now for example I have a third class so
12:10 - I will copy and I will paste it here and
12:15 - I will write that this is a third class
12:18 - which is TC TC stand for third class and
12:22 - it is
12:23 - inheriting second class okay
12:26 - SC okay and and I will just copy this TC
12:32 - and paste it here so
12:35 - this class also has the method display
12:38 - and it shows TC display okay and now I
12:44 - will create an object of this TC
12:49 - class and now I will run the program and
12:52 - I will just write object do display so
12:56 - what method will be called let's see
12:59 - so tc. display will be called right so
13:04 - you can hide this method also so which
13:08 - is derived class from the FC but now you
13:13 - are your second class is your base class
13:18 - in the case of third class and now you
13:21 - can even override or you can even hide
13:25 - the method of your derived class like
13:29 - this by deriving from the derived class
13:34 - okay so I hope you have understood the
13:36 - basic concept of method hiding in cop
13:40 - and I hope I hope you have enjoyed this
13:42 - video please wait comment and subscribe
13:44 - and bye for
13:45 - now