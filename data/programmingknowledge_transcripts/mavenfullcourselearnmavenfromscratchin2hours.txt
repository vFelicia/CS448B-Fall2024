00:00 - so hello and welcome to the new series
00:02 - of Naval so today uh this video onwards
00:06 - we will be learning uh Maven what is
00:08 - Maven and why it is used so basically
00:11 - this is a crash course type course
00:13 - wherein this course is definitely a
00:16 - beginner friendly course uh the people
00:18 - who don't have any knowledge uh
00:20 - previously has knowledge regarding the
00:22 - maven so this is a beginner friendly
00:23 - course uh so yeah this is the in this
00:27 - video we'll be talking uh the course
00:29 - flow the course introduction how this
00:32 - course is going to be covered what are
00:35 - the topic that I I will be teaching you
00:36 - okay so let's get started so first thing
00:40 - first you you would ask me what is Maven
00:43 - and why to learn it okay
00:45 - so to answer it uh I haven't answered
00:48 - over here you can see Maven is a popular
00:50 - build automation tool for Java based
00:52 - project that helps and manage and
00:55 - organize the software development
00:56 - process so you know the software
00:59 - development process there is lot being
01:01 - covered in inside in making of the
01:04 - software right right starting from the
01:06 - planning till the testing part a lot of
01:09 - phases comes wherein it uh like our
01:11 - agile methodology is there in which
01:13 - iteration iteration over iteration the
01:16 - software is uh produced and optimized
01:19 - right so for that uh we required some
01:22 - project management or the build
01:24 - automation tools so there there comes
01:28 - Maven it is a popular build automation
01:31 - tool for Java based project so so when
01:35 - you create a Java project so you can use
01:37 - a maven for build automation tool okay
01:40 - so let's move forward it provides a
01:43 - standard way to define a project
01:45 - dependency uh build processes and
01:48 - project structure making it easier for
01:50 - developer to manage and maintain complex
01:52 - Java application so
01:55 - considerable scenario you are building
01:58 - one project and you you let's suppose
02:01 - you have implemented 10 dependencies in
02:03 - your project right so you have used 10
02:06 - different libraries in your project to
02:08 - build your project and so their
02:11 - dependencies right in your project so
02:13 - you have to mention those dependencies
02:15 - you have to write the version version
02:17 - which you are using for the for your
02:19 - project right so let's suppose you have
02:22 - used uh let me write it over here I have
02:25 - used 10 dependency when you are writing
02:27 - which version to use for the
02:29 - dependencies okay
02:31 - so this is a manual traffic manual task
02:34 - that you do uh when you write a project
02:37 - when you work on your project so what
02:39 - Maven does is you tell the maven that
02:42 - these are the dependencies you are
02:44 - implementing in your project and rest
02:46 - the man Maven will go to do the work
02:49 - okay so let's suppose you are
02:51 - implementing uh spring you are using
02:53 - spring framework in your project all
02:56 - right so uh I'm just giving one example
02:58 - if you are implementing spring version 4
03:01 - so you have a written spring version 4
03:03 - is there so now the string version 5
03:05 - comes uh in near future and then you
03:08 - have to again come and uh change those
03:10 - dependencies and you have to write again
03:12 - do the modification inside your code so
03:15 - that is pretty hectic part and that
03:18 - Maven covers over here having covers all
03:20 - the dependencies and it will
03:22 - automatically do all those upgradation
03:24 - part in your project okay so that is how
03:27 - this second Point works and manual uh
03:31 - handles your dependencies okay so third
03:33 - point is Maven uses a declarative
03:35 - approach to configuration and relies on
03:37 - XML files called palm.xml to describe
03:40 - the project structure dependencies and
03:43 - build processes okay so there is one
03:46 - important file in when when we talk
03:48 - about the maven is form.xml okay so in
03:52 - this file you have to create when
03:53 - whenever you are using Avenue in your
03:55 - project you know so in this file what it
03:57 - contains it's its project structure
03:59 - dependencies and build processes so
04:02 - these are the core structure of your
04:04 - project right so without dependencies
04:06 - your budget can't work you have how the
04:08 - project structure is gonna work for the
04:10 - build processes of the project is going
04:12 - to there so this is a pretty uh
04:15 - imported file for your project so we
04:17 - will have one separate video on a
04:19 - form.xm how what it covers and how why
04:22 - it is important we'll cover all that
04:24 - energy in detail okay so next point is
04:26 - it also offers a vast variety of Open
04:29 - Source libraries and plugins that can be
04:31 - easily integrated in your budget okay so
04:34 - so to so to understand this point so you
04:37 - just go in your browser whatever browser
04:39 - you are using and write maven
04:43 - leggings
04:45 - and of the very first link that you can
04:48 - see is uh there is a official Maven
04:50 - Apache org you can open this and you can
04:53 - see these are the these are the plugins
04:56 - that Maven Maven has okay reporting
05:00 - plugins have their core plugins are
05:03 - there so you can check out their uh all
05:06 - those uh description is also there uh
05:09 - and one one good thing is the get and
05:12 - get a positive link is uh also there you
05:15 - can check that out we will be covering
05:17 - uh again we have one separate video on
05:19 - this this one also plugins and one more
05:21 - thing is Maven repositories right so you
05:24 - go in your browser and write Maven
05:26 - repositories
05:29 - just hit enter and as you can see very
05:32 - first is the official link for the
05:34 - management repository you go there and
05:37 - yeah you can see this this section
05:40 - contains the new in Maven so this is the
05:42 - latest version you can see when it is
05:45 - released and these are the new
05:47 - repositories of mavic we again we cover
05:50 - water repositories in having in detail
05:52 - we have one separate video on that and
05:54 - on that as well okay
05:56 - we'll cover that one also okay so let's
06:00 - move forward and
06:02 - and see what are the features of Naval
06:05 - okay so first feature is again
06:08 - dependence dependency management so as I
06:11 - said having simplifies the management
06:12 - project management of the project
06:14 - dependencies by providing a centralized
06:16 - repository of libraries and framework it
06:19 - automatically downloads and manage the
06:21 - dependency as I said here instead of you
06:24 - writing the those dependencies manually
06:27 - Maven does all all this tasks
06:29 - automatically by itself and which makes
06:32 - it easy to update our dependencies
06:34 - without worrying about the conflicts all
06:37 - right so next is Project standardization
06:39 - my employees a standard project
06:41 - structure that is widely adopted in the
06:44 - Java Community the standardization makes
06:46 - it easier for the developer to
06:48 - understand to contribute to the project
06:49 - even they are new to them okay so as I
06:53 - said it's beginner friendly as well so
06:55 - you have you can learn it okay easily
06:57 - and build automation Maven automates the
07:00 - build process makes it easy to come pile
07:02 - test and package the project and
07:04 - developers can Define the build goals
07:07 - and execute them in a single command as
07:09 - well we'll see how we can do it we will
07:12 - create one project using Java and using
07:15 - Maven as well okay and next is plugin
07:18 - system so Maven has a powerful plugin
07:20 - system that enables the developers to
07:22 - extend the functionality of the build
07:23 - process okay so there are many plugins
07:26 - available that can be easily integrated
07:27 - into projects to perform the specific
07:29 - task a task incense for example to a
07:33 - perform such as generating the
07:36 - documentation deploying the applications
07:38 - or running the test
07:39 - so all these we can do by using using
07:42 - this plugins we will see how we can we
07:44 - can do this okay and next is consistent
07:47 - builds Maven ensure consistent builds
07:49 - across the different environment by
07:50 - using the declarative approach to
07:52 - configuration declarative approach in
07:53 - the sense we create one pom.html file as
07:56 - I said here in inside which we are
07:58 - writing our dependencies project
07:59 - structure and build processes as well
08:01 - okay
08:02 - and uh last one is integration with ID
08:05 - so this is a pretty good feature of
08:09 - Maven Maven integrates with the popular
08:11 - ID such as Eclipse IntelliJ IDEA
08:13 - netbeans Visual Studio code which makes
08:15 - it easy to manage a project within ID so
08:17 - you don't have to worry about where I
08:19 - can use the maven so in the market we
08:22 - have a very popular IDs as of these days
08:25 - like video Studio code IntelliJ IDEA
08:28 - Eclipse you can use Maven with this ID
08:32 - itself the maven is integrated inside
08:35 - this IDs
08:37 - okay and so overall Maven simplifies the
08:40 - development software development process
08:42 - and makes it easier for the developer to
08:43 - manage the complex Java based project
08:47 - okay so enough about Theory uh so in the
08:51 - previous video we have talked about the
08:53 - course introduction I have given you
08:55 - some theoretical overview of the maven
08:57 - what is Maven what are the features of
08:59 - the maven and as I said you in this
09:01 - video we will be talking about the tools
09:03 - that you have to install in your PC to
09:06 - get started you uh working with the
09:08 - maven okay so first thing first you need
09:11 - Java uh because it's a Java based uh
09:15 - tool mavenous so you require Java in
09:18 - your PC so to install Java uh you can
09:22 - just go here and in your browser and
09:24 - just write down wait
09:28 - download
09:30 - Java
09:32 - jdk okay so first thing uh first link
09:37 - will come from Oracle itself okay just
09:40 - open it and here you can see uh
09:43 - whichever operating system that you are
09:45 - using select according to according to
09:48 - that uh if you are using Windows select
09:50 - windows or Linux or Mac OS right now I'm
09:53 - using Windows 11 so I will select
09:54 - Windows here and I will again in any of
10:00 - these three options available you can
10:02 - download anyone uh so I like to install
10:04 - the direct installer for that Java and I
10:08 - will just click click here and it will
10:10 - start downloading the jdk file for my PC
10:14 - okay so I will not download it again as
10:18 - I have downloaded okay so wait a minute
10:22 - let me cancel it after uh downloading
10:26 - this uh wait a minute I will show you
10:29 - right uh just in case uh it is
10:33 - downloading uh now okay so if you have
10:36 - if you guys are uh liking this series so
10:39 - do hit that like button and share with
10:41 - you share it with your friends who wants
10:43 - to learn Heaven okay uh okay wait uh as
10:46 - I told you I have already installed jdk
10:49 - in my PC so you don't uh need to do
10:52 - anything or you just come here come at
10:54 - this site and click on the x24 x64
10:58 - installer and click on this link it will
11:01 - start download the jdk file for for the
11:04 - latest version which is 19 for now at
11:07 - the time of recording of this lecture
11:09 - and that is the exe file that is
11:12 - executable file okay just go inside your
11:14 - uh
11:16 - um egg file explorer and go inside uh
11:18 - your C drive and after C drive you can
11:22 - go inside your program files and inside
11:24 - program files you can find Java Java
11:26 - folder is being created okay after the
11:29 - installation just open the Java file you
11:31 - can see jdk 19 is here installed in my
11:35 - PC and I will just go double click on
11:38 - that folder and after in this folder uh
11:41 - as you can see bin folder is there okay
11:43 - so you just double click on it and
11:45 - inside these all these Java files are
11:48 - jdk files are there so you just need to
11:51 - click on this address box and click Ctrl
11:54 - C so to copy this path and after copying
11:57 - this path just go come in come in even
12:00 - start and write edit
12:02 - edit okay so after writing edit you can
12:05 - see edit the system environment
12:06 - variables is uh best match console over
12:09 - here you just click on it and this
12:11 - window will pop up and after here here
12:13 - you can click on this edit environment
12:15 - variables and so now you have two
12:18 - options you can set this environment
12:21 - variable path for the user variables
12:23 - like this is my user if you have if you
12:26 - are using multiple users in your inside
12:28 - your windows you know then you can
12:31 - choose this path so and if you are using
12:33 - only single user in your windows you can
12:36 - choose the system variables as I prefer
12:39 - system variables because in in some
12:41 - cases there are multiple users inside
12:43 - your PC then you have to create that
12:47 - separate separate path for the each user
12:49 - so instead of creating that you just
12:52 - come over a system variables and click
12:54 - on the path
12:55 - click on edit Nikon new and just paste
12:59 - paste this okay so this path you have to
13:02 - paste it over here oh I will not pasting
13:04 - pasting as I have already done that part
13:06 - you just paste it over here click on OK
13:09 - and just to ensure
13:12 - come here here path as well click on
13:15 - edit click on new click Ctrl V to paste
13:20 - it and just say okay okay and
13:24 - Okay so you have to say okay okay and
13:28 - you will get out of this window and
13:30 - after doing all these things uh you can
13:32 - see exe file is also downloaded just
13:35 - open I will show you and I will not
13:37 - install as I I will install my PC
13:39 - already
13:41 - okay so here you can see it is giving me
13:44 - a message that it is already installed
13:46 - on the PC do you want to reinstall it I
13:48 - will say no you just go ahead and say
13:50 - SCS yes or next next so the Java will be
13:53 - installed on your PC that's it
13:55 - okay so this is a about Java okay so
13:59 - after installing Java uh you have to
14:01 - check whether all everything is good you
14:03 - have your path is set up and you are
14:06 - good to go for the first checklist of
14:08 - our tools so for that verification you
14:11 - just come on come on start and click
14:13 - right click and as you can see terminal
14:16 - is here you can click on that and the
14:19 - terminal will get open and you just
14:21 - write one command Java
14:23 - minus minus words
14:26 - hit enter and it should show the Java
14:30 - version that you have installed right
14:32 - now in your PC okay so if everything
14:35 - goes fine you should see this message or
14:38 - else if there are again some messages
14:40 - where Java is not recognized as a
14:43 - command in that case you want you should
14:47 - you have you should miss some steps you
14:50 - go back and check this video again and
14:53 - try to install again okay so this is for
14:56 - our first Tool uh the second tool is of
14:59 - course Maven you are learning Maven you
15:01 - have to install Navin in your PC right
15:03 - so click on the new tab and just type
15:07 - download maven
15:10 - sorry my typo
15:14 - have it okay so first link come which is
15:17 - official link from Apache
15:19 - you will just open this and after
15:21 - opening this these are the six system
15:23 - requirements uh just pause the video and
15:26 - see what are the system requirements
15:27 - that you require as you see first
15:30 - request system requirement is jdk itself
15:32 - that we have downloaded in our first
15:34 - step so we are good to go for the jdk uh
15:37 - so there is no memory requirement so as
15:41 - many memory you have it's fine uh this
15:43 - requirements is there so you
15:45 - approximately 10 MP is required to have
15:47 - an installation itself so I guess no one
15:51 - is is there who doesn't have 10 MB of
15:54 - space inside this disk okay an operating
15:57 - system no minimum requirement uh startup
16:00 - scripts are included such as shell
16:01 - scripts and windows batch file so
16:04 - operating system you can use anyone
16:06 - okay so here you can see they have given
16:09 - four options you can download any one uh
16:12 - I personally like binary zip archive
16:14 - file so I will just come here and click
16:17 - on this link the this will download the
16:19 - Apache Maven zip file uh once installed
16:23 - I will go and
16:25 - click open when done
16:27 - or instead I will go inside my downloads
16:30 - folder I will click here okay so this
16:33 - you can see so first of all I need to
16:36 - extract this extract all uh I will
16:40 - browse just extract online yes
16:43 - and click on OK so it will extract
16:46 - everything what is inside that zip file
16:48 - so here you can see uh this file is
16:51 - being extracted uh I will just do one
16:55 - thing uh I will just
16:58 - cut this out and after cutting this I
17:00 - will come inside my C drive come inside
17:02 - my program files and inside my Java
17:07 - folder itself that we have seen all
17:09 - right
17:11 - program files inside Java I will paste
17:14 - that here itself okay
17:17 - I will paste it paste an extracted
17:19 - folder over here and now you have to do
17:22 - one thing we have to do is to click on
17:25 - it click on bin and whatever inside is
17:28 - click on this path Ctrl C okay wait
17:32 - Ctrl C you have to copy that part and
17:35 - again come into the start and write edit
17:39 - edit edit the system where environment
17:41 - variables environment variables and just
17:44 - go inside path click on edit click on
17:49 - new and paste that path and just press
17:53 - OK and come
17:56 - down here and come here click on new
18:00 - click on control V and click OK OK
18:06 - and again okay so this part is done we
18:10 - have set the environment variables now
18:13 - I'm doing this we have to check whether
18:16 - everything is okay so for that again we
18:19 - have one command so let me just restart
18:22 - my terminal so that it knows the maven
18:25 - is installed in your PC okay and so the
18:27 - command is m v n minus minus
18:32 - virgin
18:34 - okay uh there is no in
18:38 - if you need to run this program listen
18:40 - Okay so Java home is a environment
18:43 - variable is not defined correctly so
18:46 - first let me go and rectify this error
18:49 - and I will come back
18:51 - okay so the problem that causes that
18:55 - Maven dot is is the internal command
18:58 - error so uh we have done all this right
19:02 - so we come into the edit we go into this
19:05 - environment variables and we are going
19:08 - inside our path we are on edit and we
19:10 - are adding that path over here okay so
19:13 - this part this thing we have done
19:16 - correctly okay after that I I hope you
19:18 - got this so one thing uh if you come
19:21 - over inside your terminal and just write
19:25 - mvn minus minus version and wait for a
19:29 - second okay now
19:32 - instead of what Maven does is mavin come
19:35 - here inside our environment variables
19:37 - and check for the one variable name and
19:39 - Java home so we have to create that Java
19:42 - home variable so how to create it again
19:44 - come inside your edit and click come
19:48 - here and just click on new and set the
19:52 - variable name as Java underscore
19:56 - home
19:58 - all caps and the value should be the
20:00 - folder all right so the folder is as I
20:04 - showed you jdk 19 so don't go inside the
20:07 - bin just get this much path Ctrl C and
20:13 - get inside your variables and Ctrl V and
20:16 - just click OK after clicking OK so you
20:19 - can see one variable will got created
20:21 - over here and as that same variable you
20:24 - have to create over here as well Java
20:26 - home and this is the variable and once
20:28 - you create click on OK click on ok just
20:31 - come clear this out come inside your
20:33 - terminal and just write mvn minus minus
20:36 - version and hit enter so now I hope you
20:39 - see Apache 11 3.9.0 and this is the
20:43 - binary code and the maven home this is
20:47 - and the Java version is also telling us
20:49 - and it is also telling us where Java is
20:51 - installing this PC and some default
20:54 - local and platform encoding you tf8 okay
20:57 - and the OS number always name is also
20:59 - telling us okay so this main information
21:01 - it gives you I hope you also get this
21:05 - information when when you try to run
21:07 - this command okay so we have done
21:10 - installing mavin then shot in Java and
21:13 - we now again we required git okay so why
21:17 - to why to use git git is a very powerful
21:21 - word version controls management tool
21:25 - okay so you just come here itself and
21:28 - now right
21:29 - download it and hit enter so first thing
21:33 - uh first link you see is the official uh
21:36 - from git distributed it is the new
21:40 - distributed is the new Center Line okay
21:42 - so you can see it automatically detects
21:44 - your OS and gives you the link
21:48 - for the Euros so once you click on the
21:51 - download for Windows uh click here to
21:53 - download the latest yes click here to
21:56 - download and it will download the 50 mb
21:58 - file which is like the executable file
22:01 - once it it got downloaded you just click
22:04 - on it uh let let the default
22:07 - installation be there click on okay okay
22:09 - next next this will install git in your
22:12 - PC successfully and once it installed it
22:16 - is very powerful tool we will see when
22:19 - we are started using Maven and build
22:23 - started building some projects using
22:25 - Maven and Java you can see uh it is
22:29 - downloaded just click on it and go next
22:32 - next and install this tool as well okay
22:36 - and last last checklist is any IDE your
22:40 - preference you if you want vs code you
22:43 - can use vs code if you want Eclipse you
22:46 - can use Eclipse you can you can also use
22:51 - I guess very much powerful and very good
22:55 - looking IDE just my personal opinion not
22:58 - nothing else you can use your your own
23:00 - IDE or all this IDE comes with a
23:04 - building Maven implementation or the
23:07 - support you can say so if you have
23:10 - followed this all these tools you have
23:12 - installed then you are pretty much good
23:14 - to go for the next video and I'll see
23:16 - you in the next video and thank you for
23:18 - watching this video
23:19 - so till now we have covered about
23:23 - your post introduction and the software
23:26 - that are required for running the maven
23:29 - projects on your PC all right so for
23:33 - this video uh we'll be discussing about
23:35 - Maven life cycle and basic mapping
23:37 - commands uh so these are the commands
23:40 - that you must know to work with the
23:43 - maven project and how actually the maven
23:46 - life cycles means how the projects that
23:49 - has been you built using Maven works or
23:52 - throughout its life cycle okay right
23:55 - from the validation and till the
23:58 - deployment Point okay we will cover all
24:00 - the points over here okay so Maven is a
24:03 - quick introduction for those who haven't
24:06 - seen previous videos uh Maven is a
24:09 - powerful project management tool that is
24:10 - based on form that is Project object
24:12 - model uh used for project build
24:15 - dependencies and documentation it is a
24:18 - tool that can be used for building and
24:20 - managing any Java projects okay and
24:23 - Maven makes the day-to-day work of Java
24:25 - developers species and help with the
24:27 - building and running of any Java based
24:30 - projects so if you are trying to build
24:32 - any uh project that uses Java then you
24:35 - can go for the maven it will quickly do
24:39 - your uh all the tasks of managing those
24:42 - dependencies building the project and
24:45 - documentation part
24:46 - okay and so let's go and see one by one
24:51 - uh each point so first point comes is uh
24:55 - the default Maven life cycle consists
24:57 - eight major steps of phases for
24:58 - compiling testing building and
25:00 - installing a given Java project as a
25:03 - square below so these are the eight
25:05 - steps so I should validate compile test
25:07 - package integration test verify install
25:10 - and then deploy okay so first is
25:13 - validate in this step it validates the
25:17 - project if the project structure is
25:18 - correct for example it checks if all the
25:21 - dependencies have been downloaded and
25:23 - are available in the local repository so
25:26 - we'll see what is local depository and
25:28 - repository and what is the form.xml file
25:30 - so we'll have a separate video on format
25:33 - XML file will where when we will be
25:35 - discussing all each and every tags of
25:37 - that XML file and in detail we see how
25:41 - how the form.xml is important in Maven
25:45 - okay so next is compile it compiles the
25:49 - source code and converts the java.java
25:51 - files to dot class files so as since we
25:54 - are using Java programming language to
25:57 - build our project so there there must be
25:59 - a DOT Java files that you create for
26:01 - your project so that those dot Java
26:04 - files need to be converted into the dot
26:06 - class file that is the byte code uh
26:08 - which is machine understandable for the
26:11 - Java converts jvm converts to be a more
26:14 - precise and it and it stores the classes
26:17 - in the Target slash classes folder so
26:19 - this is the folder where uh all those
26:21 - dot Java files are converted into the
26:23 - dot class files and got stored in the
26:26 - Target and then inside Target folder
26:29 - there is a classic directory where it
26:31 - stores okay so next is the test it it
26:35 - runs unit test for the projects so you
26:37 - at this phase it will run the unit test
26:40 - that you have defined for your project
26:42 - and we'll see how to define it and how
26:45 - to use it and how to run it okay so
26:47 - package this this step packages the
26:50 - compiled code and in a distributable
26:52 - format like jar and ojar or work so it
26:56 - converts the if that code into the
27:00 - distribute distributable format like jar
27:02 - and War
27:04 - okay so integration testing uh it runs
27:07 - the integration test for the project
27:08 - we'll see how it runs the integration
27:11 - testing also and where the next step is
27:14 - verify this step runs checks to verify
27:17 - that the project is valid and with
27:19 - so-called quality standards so the
27:21 - quality standards are being checked in
27:24 - the verification via step and then comes
27:26 - the installation step this step installs
27:28 - the package code to the local Maven
27:31 - repository there is there is one local
27:33 - manual repository where all these uh
27:36 - packaged code is being installed over
27:39 - there okay and then is the next deploy
27:41 - it copies the packaged code to the
27:44 - remote repository for sharing it with
27:46 - with other developers so you last comes
27:50 - the deployment phase so where it
27:51 - converts the code to the back it copies
27:54 - the package code to the report remote
27:56 - repository by using which you can share
27:59 - that share it with other developers
28:01 - which are there in your team or company
28:04 - okay so these are some uh maven life
28:09 - cycle build life cycles and then
28:12 - comes we'll see how some basic mapping
28:15 - commands Okay so first comes the mvn
28:18 - clean okay it cleans the project and
28:20 - removes all files generated by the
28:22 - previous build so when you do perform
28:25 - one build it creates that folder and
28:29 - when when you again do some changes and
28:31 - you again build that project again
28:34 - install that project then it again
28:36 - creates that those folders again so if
28:38 - you're using MV and clean it cleans the
28:41 - project and removes all those previous
28:42 - build build files
28:44 - okay so and and mvn compile it compiled
28:47 - the source code of the project again mvn
28:50 - test compile it compiled the test Source
28:53 - Code mvn test run the test for the
28:56 - project uh they do a defined and mvn
28:59 - package creates the jar uh or warp file
29:02 - for the project and convert it into the
29:04 - distributable format as we discussed
29:06 - above and mvn install uh deploys the
29:09 - package jar applied to the local
29:11 - repository and MV and side generate the
29:14 - project documentation so
29:17 - next is ambient validate validate
29:19 - deposits form and configuration so as I
29:23 - did as I told you form file uh form dot
29:26 - XML file is the very important file for
29:28 - the maven projects again we see in depth
29:31 - with one separate video
29:33 - so stay tuned so mvn uh idea uh colon
29:37 - idea colon generate project generates
29:40 - the project files for the IntelliJ IDEA
29:42 - or Eclipse so if you are using any IDE
29:44 - uh that is Intel GID or Eclipse any one
29:47 - of this so you can use this
29:49 - come on all right so I mean release uh
29:54 - perform performs the release build okay
29:56 - and mbn last come mvn deploy it copies
29:59 - the package jar or War files to the
30:01 - remote repository after compiling
30:03 - running and test and building the
30:04 - project
30:06 - okay and so oh so this is the command
30:11 - that we write mvn green install uh and
30:15 - why we write clean because uh it by
30:18 - using this clean uh we can remove all
30:20 - those previous build files and it will
30:22 - remove all those uh files which are pre
30:25 - uh came from the previous build it will
30:27 - delete and creates the new uh files for
30:31 - the new build okay so this is the idea
30:34 - behind the maven life cycle and having
30:38 - basic Maven commands so till now we have
30:40 - covered uh what is Maven uh yes we've
30:44 - seen the softwares that are required
30:47 - we've seen a covered life cycles and
30:49 - basic mapping commands so and now we
30:53 - will see the maven dependencies in this
30:55 - video and on next video onwards we will
30:58 - be creating an actual project and we
31:01 - will see all this theory that we have
31:03 - learned till this video uh how we can
31:05 - Implement in that uh create or the
31:08 - actual project okay so you'll see the
31:11 - map independent dependencies in this
31:13 - video okay
31:15 - so first thing Maven simplifies the
31:17 - creation and the management of the
31:18 - dependency by using a centralized
31:20 - repository that contains a vast
31:22 - collection of Open Source libraries and
31:24 - framework to create and manage
31:26 - dependencies in Maven we have to follow
31:28 - these steps okay so we'll see the step
31:32 - by step how we can create or manage the
31:34 - dependencies in the
31:36 - Maven project Okay so
31:38 - first step is
31:41 - Define the dependencies okay so the
31:43 - first step is to define the dependencies
31:45 - in the projects form.xml file so as I
31:48 - said as I told you in the previous video
31:50 - also pump.xml file is very important for
31:53 - the maven projects this is the file
31:55 - where all those uh project related
31:57 - dependencies and are being defined in
32:00 - this file if you if you forward or if
32:03 - you not Define any dependencies that you
32:06 - have used inside your project and you
32:08 - don't mention over here inside the
32:10 - computer then the project will not work
32:12 - since their dependency will be not
32:14 - implemented inside your build okay so
32:17 - the this file is important and you have
32:19 - to define the dependencies first inside
32:21 - this file itself okay the form.xml file
32:25 - is an XML file that contains a project
32:27 - configuration information including the
32:29 - dependencies so uh it also contains the
32:32 - configuration information of the Blue
32:34 - Project also okay so to Define our
32:36 - dependencies you need to specify the
32:37 - group ID the artifact ID and a version
32:40 - of the dependencies okay uh for example
32:43 - we'll see one example over here you can
32:45 - see one snapshot of the dependency for
32:48 - example to add a screen framework
32:49 - dependency to your project you need to
32:51 - add the following form.xml so imagine
32:53 - one project you are building and you are
32:56 - trying to add the spring framework in
32:58 - your project then you have to write this
33:00 - many nine of code to tell your uh
33:03 - project from.xml file or or Maven that
33:08 - you are using the screen framework and
33:10 - add this dependency in my project okay
33:12 - so the root tag will be dependencies
33:15 - inside which a dependency tag is there
33:17 - and inside this uh dependency tag you
33:20 - create all one dependency itself okay so
33:23 - as you can see uh we need group ID
33:25 - artifact ID and the version of the
33:27 - dependency so we first Define group ID
33:30 - tag and we'll write all dot spring
33:32 - framework
33:33 - and we tell the I mean that this is the
33:37 - screen framework that we are trying to
33:39 - use you know in my project in artifact
33:41 - ID
33:48 - you are trying to use in your project
33:50 - will specify that version also over here
33:52 - and this is how you you create or Define
33:55 - a dependency in your palm.xml file and
33:58 - Maven will understand that hey you are
34:01 - trying to use swing framework audio
34:02 - project okay let me add this dependency
34:05 - in your project okay
34:08 - how to resolve the dependency okay
34:11 - once the dependency is defined now you
34:14 - know how to define the dependency in the
34:16 - palm.xible file Maven will automatically
34:18 - download and resolve dependencies from
34:21 - the central repository Maven checks if
34:23 - the dependency is already downloaded in
34:25 - the local repository and if not it it
34:28 - downloads from the central repository so
34:30 - there are two repositories are there one
34:33 - is local repository and one is Central
34:34 - repository okay so local repositories
34:37 - where your all the dependencies resides
34:40 - or downloaded dependency and the central
34:42 - depository as well all those uh
34:46 - dependencies are there and it first the
34:49 - maven win check okay so manual will
34:51 - check okay so you need fixed spring
34:53 - framework it will check in the local
34:55 - repository whether spring framework is
34:57 - already downloaded over there or not if
35:00 - it is not downloaded in the local
35:02 - apology it will go inside the central
35:04 - repository and download the screen
35:06 - framework and add this dependence
35:08 - dependent dependency in your project for
35:11 - the local repository okay so this is how
35:14 - the dependencies are resolved in the
35:17 - manual okay so dependent is dependency
35:19 - scope okay so dependencies in Maven can
35:22 - we have different Scopes okay so Scopes
35:24 - are different which determine when and
35:26 - where the dependency is being used okay
35:29 - so you define the dependencies you
35:31 - resolve the dependencies now we have to
35:32 - define the scope of the dependence
35:34 - dependency okay the four means Copa
35:36 - compiled provided runtime and test the
35:39 - scope can be specified in the dependency
35:42 - declaration all right so where we Depend
35:44 - and declare the dependency inside this
35:46 - dependency tag for example to specify
35:49 - the dependency is only required for the
35:51 - testing you would add the following
35:53 - pump.xml so imagine one
35:56 - testing tool okay so junit is a testing
35:59 - Tool uh you required for the testing of
36:01 - the Java project so you are trying to
36:04 - add the dependency for the junit so
36:06 - think about it you when you required
36:09 - obviously when the testing phase come of
36:11 - the earth testing phase will come for
36:13 - your project then and then only you
36:15 - require junit right so you can Define
36:17 - that scope of test here inside the
36:21 - dependency tag itself there and by
36:23 - telling the maven that hey use this
36:26 - junit framework only for the testing
36:29 - phase okay so you are defining the scope
36:32 - you are limiting the scope of that
36:34 - framework in the testing phase itself
36:36 - okay so these this is how you dependency
36:39 - scope is being resolved okay so next
36:42 - comes how to manage that dependency okay
36:45 - so Maven project says provides several
36:48 - goals to manage the dependencies
36:50 - including adding and removing or
36:52 - updating the dependencies for example to
36:55 - update a dependency you can use the
36:57 - following command Okay so
36:59 - Navin does this uh thing of managing the
37:04 - dependencies automatically Okay so
37:07 - it will add it will remove it will
37:09 - update your dependencies automatically
37:12 - okay so to update your dependencies uh
37:14 - you can use this following command mvn
37:16 - version colon use latest version okay so
37:20 - you are telling the maven that hey uh do
37:24 - one thing update all those dependencies
37:27 - to them to their latest versions
37:30 - okay so if you are using three
37:33 - dependencies my win will go and update
37:36 - all those three dependencies into the
37:38 - latest version and it will do
37:39 - automatically okay so this will update
37:42 - all the project dependency to the latest
37:43 - version available in the central
37:45 - repository okay in summary uh in short
37:48 - defining and managing dependencies in
37:51 - Maven is simple process that is mostly
37:53 - done through the projects formed.xml
37:55 - file again I'm saying Bomb Dot XML file
37:58 - is very important and Maven provides a
38:00 - centralized repository and several goes
38:02 - to simplify the management of
38:04 - dependencies in Java based projects
38:06 - okay
38:10 - okay
38:10 - so we'll see uh now the types of
38:14 - dependencies now till now we have
38:16 - covered how The dependencies Works what
38:19 - are the different fields of dependencies
38:21 - now we'll see types of dependencies all
38:23 - right so in Maven there are several
38:26 - types of dependencies that can be
38:27 - defined in the projects formed by the
38:29 - XML file these these dependence
38:31 - dependencies will specify the libraries
38:33 - or the framework that is being used in
38:35 - our projects all right so first is
38:38 - compile dependencies these dependencies
38:40 - are required for the project to compile
38:42 - and build correctly now when download
38:44 - these dependencies and add them to the
38:46 - projects class path these dependencies
38:49 - dependencies are also packed packaged
38:52 - with projects output jar or War file
38:55 - okay so these are the early early
38:58 - dependencies that we require first to
39:00 - compile your project these dependencies
39:02 - which are required and comes inside the
39:04 - compile dependencies within a provided
39:07 - difference independent dependencies this
39:09 - dependency are required for the project
39:11 - to compile but they are expected to
39:14 - provide it by the runtime environment
39:16 - okay so example of such dependencies are
39:19 - servlets API and JSP API these
39:23 - dependencies are not packaged in the
39:25 - projects chart okay so the compile
39:27 - dependencies are packaged with the jar
39:29 - and but the oil dependencies are not
39:32 - packaged with the jarab or file whatever
39:35 - you file you are creating okay so next
39:37 - is runtime dependencies these
39:39 - dependencies are required for the
39:41 - project to run but not required for the
39:43 - project to compile okay so first uh two
39:47 - dependencies that we have seen those are
39:49 - required for early okay so when your
39:51 - project compiles the that time these
39:55 - dependencies are required but after
39:56 - compilation when the project will run
39:59 - for those we have different dependencies
40:01 - that dependencies come under the runtime
40:03 - dependencies right so these dependencies
40:05 - are added to the password at runtime but
40:09 - they are not packaged again these are
40:11 - also not packaged with the jar or file
40:13 - foreign
40:15 - now your project run okay so now come
40:18 - test dependencies so which are required
40:20 - for the testing purposes okay so these
40:22 - dependencies are required for the
40:23 - Project's tests but not required for the
40:25 - project to compile or run as I said
40:27 - there is no use of these test
40:29 - dependencies for the compilation part
40:30 - and the Running part okay so these
40:33 - dependencies are added in the class path
40:35 - when running tests but again these are
40:38 - also not packaged with the jar or file
40:40 - okay so next comes system dependencies
40:42 - these dependencies are not available in
40:45 - the central Maven repository and are
40:47 - required to be manually installed on the
40:50 - local machine to include the system
40:52 - dependencies in the project you must
40:54 - specify the path to the deficiency in
40:57 - the jar file okay so these are the
41:00 - dependencies that are not provided in
41:02 - the man and Central repository you have
41:04 - to do them these tasks manually if you
41:08 - are using any system dependencies you
41:10 - this is the thing that you have to do
41:11 - manually there is no way to do this
41:14 - automated of automated manual okay so
41:17 - next import dependencies these
41:19 - dependencies are used to import the
41:21 - dependencies from other Maven projects
41:24 - when importing a dependency Maven will
41:26 - use imported projects form protection
41:28 - file to download and manage the
41:30 - dependency okay so if you are trying to
41:33 - use another Maven Project's dependencies
41:35 - so at this time import dependencies will
41:39 - come into the picture Okay so imagine
41:41 - when you have one project and you are
41:43 - trying to you have you want the another
41:46 - Maven projects dependencies so input
41:49 - dependencies will come into the picture
41:50 - they will go inside that projects from
41:53 - dot XML files they will see uh what are
41:56 - the what are all dependencies that the
41:58 - other project is depending
41:59 - and applying it will get those all
42:03 - dependencies and it will automatically
42:05 - as those dependent dependencies in your
42:07 - project so these are types of the input
42:10 - input dependencies import dependencies
42:12 - okay so in summary understanding that is
42:15 - different types of dependencies in Maven
42:16 - is essential to properly manage the
42:18 - project dependencies and ensure that the
42:20 - project compiles runs and tests
42:22 - correctly so why I'm taking this
42:26 - theoretical lectures first you have to
42:28 - understand what are you know what is
42:30 - dependencies but you don't know what is
42:32 - compile dependencies for a dependencies
42:34 - you first you have to understand these
42:36 - are types of the dependencies then and
42:37 - then only you can go into go and create
42:40 - a maven project and
42:42 - work on it okay so I guess this is the
42:47 - pretty much theoretical part that you
42:49 - want to understand before you get your
42:51 - hand dirty on the mining projects
42:53 - okay so on the next video onwards we'll
42:56 - be
42:57 - creating our new Maven projects using
43:01 - IntelliJ IDEA or Eclipse any ID that I
43:04 - can choose so you you also can choose
43:07 - any ID or those IDs are come with Maven
43:11 - integration in inbuilt just a
43:14 - visualization part will be different
43:16 - okay so till now we have covered the
43:18 - theoretical section of these uh cache
43:21 - course and now from this video onwards
43:24 - we will uh we're actually doing some
43:27 - coding stuff inside our IDE and as I
43:31 - told you uh this today today's ID comes
43:35 - with the inbuilt uh Maven implementation
43:38 - Maven support so you can use any of the
43:40 - IDE like IntelliJ IDE vs code IDE but uh
43:45 - if you ask me uh I would prefer you
43:48 - IntelliJ IDEA because it is uh developed
43:51 - by jetbance which is one of the popular
43:53 - company and I personally like IntelliJ
43:57 - IDEA if if I'm doing some uh stuff
44:00 - related
44:01 - projects using Java okay so I would also
44:05 - suggest you to download the IntelliJ
44:07 - IDEA if you are following me and if you
44:10 - are if you want to follow this course
44:11 - okay so I'm assuming that uh you are you
44:15 - have already downloaded IntelliJ IDEA if
44:17 - not let me just quickly give you uh
44:19 - overview how you can download it just
44:21 - come here and write download
44:26 - IntelliJ IDEA
44:28 - if you hit enter first link comes from
44:32 - jetband itself just click on it
44:35 - and you will get to the IntelliJ IDEA
44:38 - download page uh now according to your
44:41 - operating system you can choose anywhere
44:43 - either Windows Mac OS Linux and I am
44:46 - currently now I am using Windows 11
44:48 - that's why I'm uh click on Windows and
44:51 - there are two editions of this IDE one
44:54 - is Ultimate one and one is Community
44:55 - Edition uh so I will download the
44:58 - Community Edition because it is the free
45:00 - one and open source also and but the
45:03 - ultimate word is the you get more
45:05 - features and 30-day trial trial also so
45:08 - if you want you can download but it is
45:10 - paid I want you can compare all these uh
45:13 - features that you get in a paid one and
45:15 - a free one also so go ahead and click on
45:18 - download exe file or zip file whatever
45:20 - you want it will start download it is
45:23 - around 700 MB uh it depends upon your
45:26 - download speed it will get downloaded
45:28 - and just go ahead and click next next
45:30 - your IDE will get installed in your
45:33 - system okay I will doing cancel because
45:35 - I have downloaded already okay so
45:39 - assuming that you have downloaded this
45:40 - idea and if you if you want to follow
45:43 - along this code uh let's get let's go in
45:47 - our IDE and create our first Maven
45:49 - project okay all right let's go
45:54 - so I will come into my IDE first time if
45:57 - you are opening this you will see one
45:59 - window like this and there are no
46:02 - project here because since I work
46:04 - working on Java so there are some Java
46:06 - budgets also in kotlin budgets also so
46:08 - ignore this one you just click on
46:10 - projects tab click on new project and
46:14 - you just have to name your project right
46:17 - so I will write my
46:23 - I'll adjust my first Maven okay so uh
46:28 - select the location uh wherever you want
46:30 - to store this project so I didn't build
46:33 - paper I will just go ahead into my
46:38 - desktop I will create one folder name as
46:41 - maven and inside that I will store my
46:45 - project okay you can choose anywhere
46:47 - anywhere you want uh so the language of
46:50 - this development is Java build system is
46:53 - a maven remember build system to say
46:56 - selected as Maven uh and because we are
46:59 - working with Maven itself and we need
47:02 - jdk so here uh whatever jdks which are
47:06 - installed in your system it will show
47:07 - all the jdk over here select whatever
47:10 - jdk you want I will go with the latest
47:12 - 119 and if if there is no jdk listed
47:15 - over here you can just go ahead and
47:17 - download the jdk and if there is any jdk
47:20 - downloaded install downloaded and
47:22 - installed in your PC already just go
47:24 - ahead and add jdk folder and give the
47:26 - path to the IntelliJ IDEA where your jdk
47:30 - resides okay
47:32 - I will just go with 19 add sample code
47:35 - Okay add one settings uh I don't need
47:39 - anything okay and I will just hit create
47:44 - all right
47:46 - this is working like let it finish it
47:50 - will download the plugins which are
47:52 - required for the maven project to run it
47:55 - is downloading here you can see the
47:56 - background task I will show you waiting
47:58 - for Maven import completion and the
48:01 - maven plugins will get downloaded Okay
48:04 - so
48:06 - but if you are running this first time
48:08 - it will take time some time let it be uh
48:12 - by the time I will give you the IDE over
48:15 - you if you are using first time uh so
48:18 - this is how the IntelliJ IDEA looks like
48:20 - uh here you have the project tab where
48:23 - all those uh directories I've listed
48:26 - over here in a such a beautiful manner
48:27 - you can switch a switch between this
48:29 - idea Java or and here's the main file
48:32 - main domain.java file where uh our Java
48:35 - code is written just a simple hello
48:37 - world which is given by IntelliJ IDEA
48:39 - itself and just to quick start our
48:41 - development process and here is a
48:44 - project tab you can hide and an ID so
48:48 - that you can get the more view of this
48:51 - your file and after that uh one more is
48:56 - one more thing is here you can see Maven
48:58 - Maven tab is there if you click on it it
49:00 - will show you all those life cycles uh
49:04 - and the life cycles I hope you watched
49:06 - the previous video where we have
49:07 - discussed all those like uh build life
49:09 - cycles clean validate compilation and I
49:12 - have given you the theoretical knowledge
49:15 - of that these all these life cycles also
49:17 - you can come and I will show you how to
49:20 - use this tab also uh but first I guess
49:23 - yeah it's over and plugins also here you
49:26 - can see clean compiler deploy install
49:28 - jar all this plugins are also there we
49:31 - will have separate plugins video okay
49:34 - now uh I guess the processing is done
49:38 - yeah our project is ready to go and what
49:41 - we have done uh is we have created our
49:44 - first project now we have to understand
49:46 - the dependencies okay so I hope you
49:49 - watched the previous video uh where I
49:51 - discuss about how to add these
49:53 - dependencies and how dependent
49:55 - dependencies looks like how what are the
49:57 - types of dependencies okay so let's go
50:00 - and create our first dependencies so if
50:03 - you recall uh I have told you that to
50:06 - create a dependencies how to manage the
50:07 - dependencies or you have one file called
50:11 - palm.xml okay so this is our Maven
50:14 - project here you can see we have one
50:16 - pom.xml file just double click on it it
50:19 - will open that form.xml file so since
50:21 - this is a file extension is dot XML so
50:24 - extreme XML files contains the tags okay
50:28 - so these are the tags so so the parent
50:30 - tag is the project one so under which
50:32 - all these uh tags are written so our
50:35 - parent tag is Project under which model
50:38 - version is there uh this is XML scheme
50:40 - namespace schemas which are written on
50:44 - in the web itself if you go go on this
50:47 - site you can found all those schemas and
50:51 - uh
50:52 - group ID is there artifact ID for our
50:55 - project artifact ID is the project name
50:57 - itself and version is given by the
50:59 - Integrity itself okay and some
51:02 - properties of our project
51:04 - all right this is the file which is
51:08 - generated by the integer idea and given
51:10 - to us so now if I want to create some
51:14 - dependencies in my project how can I add
51:17 - dependencies over here okay so you see
51:20 - uh
51:22 - you just have to
51:25 - wait a second okay so now
51:29 - if you want to create some dependencies
51:31 - inside this so there are many ways to
51:33 - create the differential one way is
51:35 - straightforward you can you just go here
51:37 - and write
51:38 - dependencies so it will create the
51:41 - dependencies tag and uh after that and
51:45 - one thing uh we have the dependencies as
51:48 - our parent tag inside which all those
51:51 - dependencies beside is here as you can
51:54 - see dependencies is the parent tag under
51:56 - which dependency tag is there so we have
51:58 - to write the dependency tag okay we
52:01 - write dependent C
52:04 - okay and uh the thing because I love
52:08 - Italian idea is this it will
52:11 - automatically give me the group ID and
52:12 - artifact ID that you want to enter so
52:14 - let's enter uh let's create the spring
52:16 - framework uh dependency for our project
52:19 - I will write at a artifact ID as spring
52:22 - so slash
52:24 - spring
52:27 - SP ing spring slash code
52:32 - okay
52:34 - uh
52:36 - Let It Be
52:39 - uh the version where you use this
52:44 - okay I am getting error dependency
52:47 - okay
52:51 - it's fine uh so you see this is the one
52:54 - way you can create the dependencies you
52:56 - you just you just need to go ahead and
52:58 - write start writing in this uh like if I
53:02 - write J unit uh that is one word uh
53:05 - dependencies uh wait wait let me clear
53:08 - this out so that interview had a get
53:10 - that we are writing this for the first
53:12 - time okay J
53:15 - junit dependency this is our
53:19 - this is over there yes so I have I have
53:23 - added added junit dependency in my
53:25 - project okay so this is the one way you
53:28 - can add the dependencies but here you
53:30 - have to uh know the name of that
53:33 - artifact uh article ID means the
53:35 - dependency name to be precise and again
53:39 - the rest of the links is easy it will
53:42 - automatically ship the cursor to the GOP
53:43 - ID and come to the version and it would
53:45 - automatically add the scope here you can
53:48 - see I have not written the scope tag
53:49 - into it has automatically added the
53:51 - scope telling that uh man in that please
53:54 - use this junit dependencies for my
53:57 - project uh when to use in the test phase
53:59 - because J unit is the testing uh
54:01 - a related library or the tool okay so
54:04 - here you can see we have created one
54:07 - dependencies so now I will give you one
54:09 - another way how you can add the
54:12 - dependencies right so if you go to the
54:15 - uh this
54:17 - code
54:19 - if you go into generate and it will if
54:23 - you go to the
54:26 - manage a dependency template uh okay so
54:30 - it will give you the dependency template
54:32 - I don't know what the template I just
54:33 - need uh wait a second
54:37 - manage dependencies okay if you have
54:39 - nothing to show I guess we do it okay so
54:44 - add dependency button is there if you
54:46 - click on it uh it will show you that
54:48 - this tab so our project name is there my
54:52 - first Maven and only stable and now here
54:55 - you can see the search button is search
54:57 - bar is there you can search any
55:00 - framework that you want in your project
55:02 - over here uh you just need to write
55:05 - spring if you want to use ping in your
55:09 - project and one more thing uh these all
55:12 - implementation are done by the ID
55:14 - IntelliJ IDEA you don't have to worry
55:17 - about it you just go ahead and search
55:19 - the dependency name and again if you
55:21 - want to search any dependencies uh you
55:23 - just need to go and go to the maven
55:26 - Repository
55:28 - repository here you can see all these
55:31 - dependencies you can see uh any
55:33 - dependencies that you want to search you
55:35 - just go here and like spring
55:38 - okay and hit search
55:41 - Spring contact spring core all the
55:44 - dependencies will come and these uh
55:46 - IntelliJ IDEA is integrated this
55:48 - functionality inside their IDE so that
55:51 - you can come here and write the spring
55:53 - and get that spring if you want this
55:55 - spring uh you can again you can select
55:59 - the scope of this I intelligide has
56:01 - given me the scope to compile so I will
56:04 - set it as compile and again you have
56:06 - version you if you you want to use the
56:09 - previous version you can go ahead and
56:11 - use previous version also I will go with
56:13 - the latest one or the IntelliJ IDEA that
56:16 - provided me and if I want this spring I
56:20 - have selected the version I am good to
56:22 - go and I will just click on ADD
56:25 - so after I click on add this
56:29 - dependencies you can see these two tags
56:31 - are being added inside my
56:34 - form.xml file okay so now uh if this is
56:38 - the two way by which you can add the
56:41 - dependencies right so if I go into
56:43 - inside my Maven and if I go inside my
56:46 - life cycle and I will just click on
56:48 - install
56:49 - okay it will run my uh maving command
56:53 - and you can see it it's giving me the
56:56 - error I guess could not find the
56:58 - artifact okay so J unit uh is not
57:02 - found I have to use that
57:06 - okay okay okay wait a minute so I will
57:08 - just remove this dependencies
57:12 - I guess right let it be there okay so it
57:18 - doesn't find my dependency of that junit
57:21 - okay I will click on install again
57:24 - now you can see there is no folder right
57:26 - it will here you can see process
57:29 - finished with exit code 1 our build
57:32 - failure why so I'm getting there oh okay
57:36 - okay okay
57:40 - wait a minute guys
57:44 - okay
57:49 - to rerun the maven using okay okay for
57:53 - more information uh wait a minute guys I
57:56 - will be back
58:05 - dependencies so that doesn't work for
58:09 - that let me just add one more
58:11 - dependencies uh so so that you can
58:15 - uh get what I'm trying to tell you J
58:19 - unit I will add the dependency of the J
58:21 - unit itself
58:24 - uh let me go ahead and add
58:27 - okay it's getting added
58:33 - okay
58:35 - so
58:41 - okay fine now uh you can see uh inside
58:45 - my this root folder uh previously there
58:48 - are two two or two folders okay life
58:51 - cycle and plugin only but as soon as I
58:53 - create this J unit dependencies and and
58:56 - my reload and I reload my Maven project
58:59 - it will
59:01 - it has created one more folder named
59:03 - dependencies inside which uh junit
59:07 - dependence is there okay so you can see
59:09 - as I as I added J unit dependencies over
59:11 - here you can see given a dependencies
59:13 - also added my memory deposit direct
59:16 - folder directory structure and if I uh
59:18 - now if I go ahead and insert my life
59:21 - cycle and click on install
59:23 - uh it should go ahead and get this
59:26 - dependency and install it and yes build
59:29 - success Target project is also created a
59:32 - Target folder is also created we'll see
59:35 - what is Target we are having separate
59:37 - video on this uh what are the classes
59:39 - and how the this actual works we'll see
59:43 - but for this video I hope you got some
59:47 - idea about this form.xml file how to add
59:50 - dependencies now one more thing if you
59:52 - want to delete the dependency if you are
59:54 - just going inside this dependencies tab
59:56 - and uh in future you want to delete this
60:00 - dependencies you no more required J unit
60:02 - inside your project you just go ahead
60:04 - and come here J unit you click on the
60:06 - junit uh you you come over three three
60:09 - dots and you have the remove you can
60:11 - remove and as soon as you click on this
60:13 - you just have to come here and load
60:15 - mavic changes it will reload your
60:18 - project and see all that any
60:20 - dependencies got added or removed if
60:22 - this dependency as soon as I load my
60:24 - project that dependencies folder is gone
60:27 - because no more dependencies are
60:29 - required for our project okay as soon as
60:31 - you add no dependencies no dependencies
60:33 - folder will get created over here so I
60:36 - hope you got
60:37 - some idea how to add or manage the
60:41 - dependencies inside the IntelliJ IDEA
60:44 - and what is form.xml file and we'll
60:47 - continue this project so so in the
60:49 - previous video we we have actually
60:51 - started with creating a new project
60:53 - using Maven and that too in a eclipse uh
60:56 - not Eclipse uh IntelliJ IDEA IDE so I
60:59 - hope you have uh watched the previous
61:02 - video and you got some idea how to
61:04 - create a maven project inside IntelliJ
61:06 - IDEA you can use any any IDE of your
61:08 - choice uh but for this tutorial series I
61:11 - have choose IntelliJ IDEA uh okay so you
61:15 - can use anyone uh so I hope you watched
61:17 - that previous video where we have
61:18 - talking about the dependencies how we
61:21 - create the dependencies in our palm.xml
61:23 - file via pawn.xml file is necessary uh
61:26 - to create and what is the importance of
61:28 - it so now uh we in this video we will
61:32 - focus give focus on this plugin sections
61:34 - okay so we have done with the life cycle
61:36 - we have done with the dependencies now
61:38 - for this video we will start with
61:39 - plugins all right so let's go
61:43 - okay so let's understand the theoretical
61:47 - past first okay the maven plugins are
61:50 - central part of the balance framework it
61:52 - is used to perform specific goal
61:54 - according to according to Apache Maven
61:56 - there are two types of Maven plugins
61:58 - okay so to perform a specific task Maven
62:02 - has created
62:03 - Apache 11 has created Frameworks or dick
62:06 - or they call them as plugins so to so
62:09 - you can use that plugin and perform some
62:12 - tasks for the for which they are they
62:15 - have they are created right so basically
62:17 - there there are two types of plugins in
62:19 - Maven one is build plugin and one is
62:21 - reporting plugin okay so water will
62:23 - build plugins these are these plugins
62:25 - are executed at the time of build okay
62:28 - so when you are executing when you are
62:31 - building your project these uh the
62:34 - plugins which are used a are known as
62:37 - plugins build plugins and the reporting
62:39 - plugins are these plugins are executed
62:41 - at the time of site generation when your
62:44 - site is actually or the project or when
62:46 - your project is getting generated and
62:49 - the plug is at that the at that time the
62:51 - plugins which are required are known as
62:53 - the reported plugins we'll see uh each
62:55 - one uh one by one okay so let's go and
62:59 - check what are the maven core plugins
63:01 - okay uh so here you can see uh these are
63:06 - some Maven code plugins first one is
63:08 - clean uh what it does is clean up the
63:11 - after build okay so if I will give you
63:14 - an example okay we will say one by one
63:16 - right so inside my plugins folder you
63:19 - can see clean okay so this is our first
63:21 - clean plugin uh so plugin and here you
63:25 - can see clean clean clean help if you
63:28 - double tap on clean help it will uh give
63:30 - you the this you can see okay so it's
63:35 - like a help you can see uh it it will
63:37 - tell you what it does is clean clean is
63:39 - the goal which means the bill this
63:41 - attempt to clean a project working
63:42 - directory out there that was generated
63:44 - at that build time okay and if you
63:46 - double click on clean clean uh so to
63:49 - demonstrate this first I have to build
63:51 - this project okay so to build uh I will
63:53 - go inside my life cycle and double click
63:55 - on install uh so that my target uh
63:59 - folder will get created over here you
64:02 - can see a Target folder will get created
64:04 - uh okay each time when I run the
64:08 - lifecycle command install the target
64:11 - folder will get created in and inside
64:13 - which all our files are there and what
64:16 - clean does is it will remove or delete
64:19 - the previous build okay so to remove
64:22 - this this is I have now previous build
64:24 - okay and now some changes I have done
64:26 - over here imagine I have done I have
64:28 - added dependence I have done some
64:30 - Project work and and now I have to again
64:32 - generate that so before generating them
64:34 - I will clean I will double click on this
64:37 - it will again run that command
64:40 - now you can see Target folder will get
64:42 - removed uh since uh the clean command
64:44 - will clean up the after build okay and
64:47 - the compile water compiler dial is it
64:49 - compiles the Java source code okay so
64:51 - these compile compile here you can see
64:54 - so again next plugin is compiler uh it
64:57 - will it will compile all the Java files
64:59 - like here you can see a main.java file
65:01 - is there it will compile those Java
65:03 - files and create the dot class files for
65:05 - the respective Java files okay and next
65:08 - is deploy deploys the artifact to the
65:11 - remote repository okay so in our
65:13 - previous video also we have discussed
65:15 - what is local repository and what is
65:17 - remote repository okay so uh so what the
65:20 - deploy command does is it will deploy
65:23 - not command it plugins what does it what
65:26 - it does is deploys the artifact to the
65:28 - remote repository okay and failsafe is
65:31 - runs the junit integration uh test with
65:34 - the isolated class for class loader so
65:37 - isolated class loader uh you can see
65:40 - what are these
65:43 - command does is
65:47 - okay so uh generated uh classes are
65:50 - there generated sources are there okay
65:53 - so what it does is uh it install runs
65:57 - the junit integration test so the
65:59 - testing part of our project is done uh
66:03 - using that plugin fail shape and to next
66:06 - come install it installs the build
66:08 - artifact into the local repository okay
66:10 - and then resources plugin is there which
66:14 - copies the resources to the output
66:16 - directory for including in the jar okay
66:19 - so if you if I go here and I will check
66:22 - resources okay so this plugin is there
66:26 - so you can see again there are so many
66:29 - uh here resources copy resources which
66:32 - is help resources resources and
66:34 - resources test resources uh I will run
66:37 - one command for you so that you can
66:40 - understand okay so this command is
66:44 - okay so now
66:47 - next command is site it generates a site
66:50 - for the current project okay so the site
66:53 - command is it generates one site for our
66:55 - current projects that we have
66:57 - working with okay so if I go here and
67:00 - click side site
67:05 - again in a lot of work it will do it
67:07 - will download from the central
67:08 - repository of Maven all the required
67:11 - things and after that it is a long
67:13 - process for the first time when you run
67:16 - this okay and I I might get one error uh
67:18 - because I have not set up this project I
67:21 - have till now okay so we'll do that in
67:23 - our upcoming videos the purpose of this
67:25 - video is just to understand what are the
67:28 - plugins and available in the Bible okay
67:30 - so again these are the two the rest of
67:33 - the appliance are there which are also
67:35 - one is junit uh and it's verifies the
67:38 - existence of the certain conditions so
67:40 - the condition that we did Define and it
67:43 - it is useful for the integration testing
67:45 - so to understand this plugin you have to
67:47 - know first what is integration testing
67:49 - what is testing also unit testing also
67:52 - so okay so we will cover all this when
67:55 - we are at the uh
67:57 - ending part of this series because there
68:01 - we have one once project where we are uh
68:04 - has done some work in that budget and we
68:07 - are trying to test that project using
68:09 - this uh
68:10 - plugins also okay and so I hope for this
68:14 - video you have understood what are
68:16 - magnet plugins so for this video we'll
68:18 - be seeing how to create and manage a
68:21 - multi-module projects in Maven right so
68:24 - till now we have covered uh we have seen
68:27 - the maven projects uh that is the only
68:30 - single one Maven project right uh you
68:33 - just go here you create the maven
68:35 - project uh you modify the palm.xml file
68:39 - you add some dependencies you you know
68:41 - how how to deal with the plugins you
68:44 - know what is a maven life cycle now we
68:47 - we in this video we'll be seeing how
68:49 - seeing how to create a multi module
68:52 - project inside mavic okay so to do do
68:56 - that uh let me just first create a new
68:59 - project
68:59 - so that I can explain you clearly a new
69:04 - project
69:05 - let me call it as
69:08 - my site okay so my site
69:13 - is the project name of my
69:19 - okay so my site is my project name so I
69:22 - am using Java I'm using maven
69:25 - Oracle 19 and let me just go ahead and
69:29 - create my project on this window
69:34 - okay so here I hope you got some idea
69:40 - about what is happening over here okay
69:42 - so now we have created our project and
69:45 - build is also successful created our
69:49 - Java file main file is also here okay so
69:53 - now
69:55 - if you go ahead and create a
69:58 - multi-module what is what is the meaning
70:00 - of multi-model yeah it it's it is
70:02 - nothing but a module you are creating
70:05 - modules of of your project inside your
70:08 - big project all right so uh I will give
70:10 - you an example uh so look at here our
70:14 - main
70:15 - parent tag is my site and under which we
70:20 - are creating uh now I will show you the
70:23 - three three new categories for three new
70:26 - models to be precise for our my site
70:29 - parental so we'll use YouTube
70:31 - for the utilities classes and we use a
70:35 - core here our our logic will be there
70:39 - and I will use a UI module I can create
70:42 - where all the UI part of my project will
70:46 - be there okay so you see uh this
70:50 - hierarchy right one parent tag is there
70:52 - under which three modules are being
70:55 - created and each module will have their
70:58 - own Java classes or Java files uh
71:02 - to which they are implementing right so
71:05 - let me go ahead and create all these
71:07 - modules
71:08 - fine to create a module inside a maven
71:11 - project in IntelliJ IDEA you just come
71:13 - here and click on your my site project
71:16 - name whatever you are given click right
71:18 - click new and you can see module is
71:21 - there click on module and name your
71:23 - model okay so our first module name is
71:26 - okay my YouTube Let me call it as my
71:30 - YouTube
71:31 - okay uh Java will be there Maven will be
71:34 - there and uh this time you can see one
71:36 - Intel idea is asking for the parent tag
71:39 - if you click over over it you can see
71:42 - two uh
71:44 - the options are there one is none that
71:46 - means this is a there is no parent tag
71:49 - for this module this is a alone
71:51 - Standalone model and forever now I am
71:54 - using I want this module to come under
71:57 - the my site project
71:59 - okay so to do this I will select the
72:02 - parent as my site and I will go ahead
72:04 - and create my module
72:06 - okay so here you can see as soon as I
72:10 - create my util pack module you can see
72:14 - my util folder is there created and and
72:18 - inside which it has its own pom.xml file
72:21 - and one Palm dot XML file which is our
72:25 - main projects form dot XML file that is
72:27 - my sites form productsable file if you
72:30 - if I open this form.xml file which is a
72:32 - parent tag you can see here also uh one
72:36 - module tag is being created and under
72:38 - which uh they have created my util
72:41 - module tag which is which states that
72:44 - hey this is the parent tag for these
72:47 - many modules okay so this my site is my
72:50 - parent tag for my util
72:58 - XML file we can see one parent tag is
73:01 - getting created over here and it it
73:03 - states that hey this is my YouTube model
73:08 - module's parent is my site okay so the
73:11 - artifact ID is there group AD is there
73:14 - and version is there okay so this is how
73:17 - we differentiate between uh
73:19 - who is parent and who is child a child
73:22 - in the sense with who is module which
73:24 - comes under the that parent okay so this
73:27 - is for the parent and this is for the
73:28 - child or to be precise it's for the
73:31 - model OKAY modules form.xml file and it
73:33 - is parents mock pump.xml file okay so
73:37 - the first I have created uh then I have
73:40 - to create a core again the same uh
73:43 - pattern you will follow you will go
73:45 - ahead and create the module and this
73:47 - time I will write my core
73:50 - okay and everything will be same my side
73:53 - will be like this and you can see uh
73:57 - sorry for the typo or it should be my my
74:00 - yeah I hope you understand where you
74:02 - just go ahead and again you write my
74:05 - slash
74:07 - UI I guess UI
74:10 - that you are trying to create
74:14 - yeah UI so my UI
74:17 - create it okay so now you can see this
74:21 - is our main main and this is uh YouTube
74:24 - UI core all these pack modules are being
74:28 - created okay so let me just clear it out
74:31 - so that you guys can understand uh
74:33 - clearly okay so what I will do is I will
74:37 - show how you can use the classes of one
74:40 - model inside the another module okay so
74:43 - till now we have created the model and
74:46 - now we will see how to manage those
74:48 - models and how to use the different
74:51 - classes of different models inside the
74:53 - different models okay so let me just go
74:57 - ahead and create one packaging structure
74:59 - over here inside YouTube so to create a
75:02 - just right click on it click on new
75:05 - and
75:07 - very small package
75:11 - just come here my util SRC
75:15 - main Java okay so this you can right
75:19 - click on this and you can create package
75:21 - okay so all dot pack example Dot
75:25 - utilities I will name this package as
75:28 - utilities and inside this package I'll
75:32 - create one Java class and name it as
75:36 - my utils
75:39 - okay so you can see a utility inside my
75:42 - utility module I have created one
75:45 - package name as utilities and inside
75:47 - that package I have created one class my
75:49 - utils okay so just to understand the
75:52 - basic uh stuck how workflow how this
75:56 - works I will create one method over here
75:59 - okay so so this method will be public
76:03 - static
76:04 - it should not return anything so the
76:07 - return type should be avoid public
76:09 - static wider and the method name should
76:12 - be a print name and it will accept one
76:15 - string string as the parameter from the
76:17 - user string name
76:19 - okay and after that HD
76:23 - string and after inside this it will
76:27 - just simply prints
76:29 - the name of the user by grating them
76:35 - hello
76:37 - there
76:39 - and just append the name that we are
76:42 - getting from the user okay
76:46 - hello there and we'll just write
76:50 - welcome
76:51 - just to great message for the user so
76:54 - this is the this method we will do okay
76:57 - so we have created uh one package inside
77:00 - which we have created one class and this
77:02 - class implements these methods which is
77:04 - print name which is taking one string
77:06 - and just printing that string by the
77:10 - some
77:11 - other words okay
77:14 - and now if I go now I have one this
77:18 - method to be used inside my core module
77:21 - okay so how can I do that I I just go
77:24 - inside my core model I will go inside my
77:26 - source I will go inside my main Java and
77:29 - I will come over here
77:32 - and now
77:34 - if if you see here also I have this main
77:38 - class so first of all to use this class
77:42 - which is written inside the util module
77:44 - I have to add the dependency of my util
77:48 - model inside my core model okay so how
77:51 - to add the dependencies I hope you know
77:53 - we have discussed in our previous module
77:55 - previous uh lectures also so to declare
78:00 - the dependency inside the MU mu core
78:03 - model we will go inside the pump file of
78:05 - the MU core and we'll introduce one tag
78:09 - name and dependencies as the parent tag
78:11 - and inside which we have dependency tag
78:13 - and will artifact ID as
78:17 - mu
78:18 - core not mu code you will add the
78:22 - my util
78:25 - .com.example and okay fine so we have
78:29 - added the dependencies of the util
78:33 - module inside the MU codes form.xml file
78:37 - so after creating this dependency you
78:39 - just come over here inside the main file
78:41 - of this
78:43 - mu core and if you come over here and we
78:46 - just write
78:49 - that
78:50 - class name what is the class name I if I
78:53 - can recall
78:54 - my utils
78:57 - my utils DOT
79:00 - okay first you have to import that
79:03 - package
79:05 - okay so the to import import
79:09 - what what is the package name I forgot
79:17 - just come over here product dot example
79:21 - dot utilities
79:26 - okay wait let me check the
79:30 - okay so we don't need to import I guess
79:34 - that is not required over here so we
79:37 - have done we have implemented this
79:39 - method over here and you are trying to
79:41 - access that method inside the another
79:42 - model which is a mu core core module
79:45 - which is over here and to access it uh
79:49 - we just need to
79:54 - we just need to again
79:56 - reload all the maven
79:58 - by this okay so if I go inside my Maven
80:03 - Maven code not automatic code Maven life
80:06 - cycle and we'll say
80:10 - okay and this
80:14 - okay so here you can see uh since we
80:18 - have added the dependencies of mu util
80:21 - model inside the MU core module we have
80:24 - to load
80:25 - we have to load Maven changes okay so if
80:29 - you click over here load the maven
80:31 - changes it will
80:33 - it will get all those
80:35 - update parts that we have done it will
80:38 - create a maven will load all this stuff
80:41 - and after that you can just come over
80:44 - here and rights out and just to create
80:49 - the utilities
80:51 - my utils
80:54 - my YouTube's Dot
80:57 - print name now you can see we are
80:59 - getting that print name and here here it
81:01 - is asking to give the name as a
81:04 - parameter so we'll pass
81:08 - uh
81:10 - what is so we can we can addicts
81:14 - Alex we can pass okay and now I really
81:18 - don't think this is needed
81:20 - Okay so
81:24 - why am I getting air over here cannot
81:26 - result
81:29 - okay okay so since the return type is
81:32 - white so we don't need to write inside
81:35 - this
81:36 - we just need to call that method because
81:38 - the print Line Print statement is in
81:41 - still inside that method so that's why
81:43 - we don't need to write again Swiss out
81:45 - okay and import integration is also
81:48 - importing that model inside of this and
81:51 - now if I go ahead and click on run it
81:54 - should print
81:55 - hello world first and then this method
81:58 - call will be executed where
82:01 - here you can see Hello World and after
82:04 - that hello there Alex welcome okay so
82:07 - hello world is getting printed from here
82:08 - here itself if we if you don't get
82:11 - confused I will just comment it out
82:13 - uh now you can see only uh hello there
82:16 - Alex welcome should we get printed over
82:18 - here yeah it is it is printing so here
82:22 - you can see we are creating multiple
82:24 - modules uh so we'll given I will give
82:27 - you one scenario okay so this is a this
82:30 - is a web application that you are trying
82:31 - to build and there are multiple models
82:33 - inside this okay so so all the utility
82:35 - classes are there inside with this
82:38 - module all the UI related stuff you keep
82:40 - inside this UI module and are the core
82:42 - or the logic part where you are trying
82:44 - to implement in your website is comes
82:46 - over here okay so all you can create
82:49 - them separate modules and to use to have
82:52 - the accessibility inside models to
82:54 - modules if one module is trying to use
82:57 - the utilities of another module so here
83:00 - we have seen we have created one package
83:03 - and inside which we have created one
83:05 - class and these class method we are
83:07 - trying to access inside the MU code that
83:10 - that too we have also can do just we
83:12 - need to add the dependencies for that uh
83:15 - module inside the Target Model in which
83:18 - we are trying to access that
83:21 - uh utilities okay as you can see we have
83:25 - added the dependencies so this is how uh
83:29 - we can manage and create the
83:31 - multi-module projects inside Maven so
83:34 - till now we have covered in our previous
83:37 - video we have covered about uh how we
83:39 - can create and manage a multimodal
83:41 - projects uh and we have also seen one
83:45 - example by creating one project of with
83:48 - Maven and we have created util core and
83:51 - UI all these modules and we have seen
83:53 - how one model's uh functionality or the
83:56 - classes so we can use in inside the
83:58 - another model that part we have covered
83:59 - inside uh in our previous video I hope
84:02 - you I hope you watch that video if you
84:04 - don't please go and watch that video and
84:07 - then come come again in this video and
84:09 - watch this okay so for this video we
84:11 - will be uh starting uh to create a web
84:14 - application with Maven so till now we
84:17 - have covered how to create a simple
84:19 - Maven project
84:21 - whether it is multi-module or not single
84:24 - model okay but now we have going to
84:27 - create a web Maven project with a web
84:31 - application okay so we are creating a
84:33 - web application okay so let's go and in
84:35 - our IDE
84:37 - so this is the first screen that you
84:40 - will see uh I will just go ahead and
84:43 - click on the new project so you to do
84:46 - that but now you can see uh once you are
84:49 - opening for the first time you can click
84:51 - on the new project uh you see uh various
84:55 - uh generators over here like Maven
84:57 - javafx kotlin compose Android you just
85:01 - click on the mavina arch type and just
85:03 - name your project so I'm gonna name it
85:06 - name my project as
85:09 - my
85:11 - first
85:14 - web app okay so you can name anything to
85:18 - your project uh that's not any problem
85:20 - if you want to create git repository you
85:23 - just click checkbox this I don't want to
85:27 - go inside get GitHub part okay so for
85:30 - that I will not check that checkbox and
85:34 - if you want to create a new reposit a
85:37 - new folder you want to create for this
85:39 - project then you can go ahead uh let me
85:43 - just create one more new folder so that
85:45 - you can manage this project because we
85:48 - require this project for your next
85:50 - upcoming videos also I am going to
85:51 - create one new folder in my desktop name
85:54 - as
85:56 - my
85:57 - first
86:01 - web
86:03 - app
86:05 - okay so this is my folder name I'm
86:08 - creating okay and inside which
86:11 - I am going to create my project okay uh
86:15 - jdks you select whatever jdk you have in
86:18 - your PC uh if you don't have go ahead
86:21 - and download the jdk and or else you if
86:24 - you have just you can add add your jdk
86:26 - also and a catalog Let It Be internal
86:29 - don't choose default or Maven Central
86:32 - and now it most important part is Arch
86:36 - type you have to select the arch type
86:38 - right so you just go get into this drop
86:41 - down list and select the maven archetype
86:44 - web app because we are trying to create
86:46 - a web app right web application so for
86:49 - that we have we will be creating an uh
86:52 - type of web app and after that version
86:54 - Let It Be One
86:56 - no more uh
86:59 - Edition we have to do additional
87:01 - properties not required okay just go
87:03 - ahead and create the project
87:06 - okay before for let the intelligent idea
87:09 - sync the project and download the
87:12 - required files and generate the project
87:14 - okay so it is generating the project
87:16 - once you see the success message of
87:19 - build success in your console your
87:22 - project is successfully created right
87:24 - now uh you do one thing now you have
87:29 - created this web application right so I
87:33 - will tell you the structure of this web
87:36 - application okay so now for the first
87:39 - time you see in our previous video for
87:42 - the multi-module the structure uh is not
87:45 - looking like this there are different
87:46 - structure defined for each type of arch
87:49 - type that you have selected okay so we
87:51 - have selected web app type of web app so
87:53 - for the web app this structure is
87:56 - followed okay so you have Source folder
87:58 - main folder under which resources and
88:00 - web app folder is there and under web
88:02 - folder web IMF and under web INF
88:06 - index.jsp and web
88:08 - web.xml folder is there and inside
88:11 - web.xml uh it is an XML file and the
88:14 - display name display name tag is there
88:16 - and answered with Arch type created web
88:18 - application so it is defining or it is
88:21 - telling that we have used Arc Type of
88:23 - web application and
88:26 - and inside our index.jsp we have HTML
88:31 - tag a body tag and inside body tag hello
88:33 - world and you can modify this hello
88:35 - world uh with whatever you want you you
88:39 - can go ahead and write your name as
88:40 - hello world
88:43 - welcome to
88:46 - programming
88:50 - okay
88:51 - so uh here's the thing that you can edit
88:56 - it is a it is HTML you can add more tags
89:00 - like H1 tag is also there in HTML I hope
89:03 - you remember and okay so H1 tag and
89:08 - we'll write uh
89:10 - your name
89:12 - whatever you want to write over here you
89:15 - can write and you can modify this
89:17 - index.jsp file and this index for JSP
89:20 - file will get executed once we deploy
89:23 - this web app on any server uh we will be
89:27 - deploying this and we will be creating
89:28 - the war file also for this project in
89:31 - our upcoming videos for this video uh I
89:34 - hope you understand how we can create a
89:37 - web application in Maven okay and so let
89:41 - me just quickly go inside my Bomb Dot
89:43 - XML file and
89:46 - I will tell you what are the what are
89:48 - the difference between this
89:50 - this and our normal Maven project okay
89:53 - so you can see when I create the this
89:56 - project using the archetype as web app
89:59 - this dependency is automatically
90:01 - inserted by the IntelliJ IDEA okay or to
90:04 - be more precise it's by Maven okay so
90:07 - Maven has addressed dependency to the J
90:11 - unit automatically when we create but
90:13 - when we create the normal Maven project
90:14 - there is no dependency tag over there
90:16 - you have to go and use the dependencies
90:19 - that you are required this is the one
90:21 - difference between that and one more
90:23 - difference packaging type is also added
90:25 - as War we'll discuss what is War uh
90:28 - packaging type in upcoming videos okay
90:31 - and version uh other thing is pretty
90:34 - much simple and
90:36 - okay so let's go and
90:39 - go inside our Maven Tab and inside of
90:42 - this and life cycle we will try to
90:45 - create the package of this okay so uh
90:48 - double click on the package
90:52 - yeah now most of you will get this error
90:56 - okay cannot access default fields of
90:59 - properties okay so most of you might get
91:03 - this error how to rectify this error I
91:06 - will tell you that first of all let me
91:08 - go and open my when
91:11 - previous project where the code to
91:14 - rectify this error is there okay so I'm
91:17 - going to inside my desktop uh I will go
91:21 - desktop demo web application
91:25 - demo web app let me go and click OK I
91:29 - will open this in a new window this is a
91:31 - demo web application that I have created
91:33 - previously so you go here and
91:37 - plugin management
91:40 - okay so this this type of cannot access
91:45 - the default fields of properties is a
91:47 - error come because we have not added the
91:50 - plugins inside our build
91:53 - and that plugins we have to add
91:56 - over here and if you add this plugin
91:59 - manual then go ahead and again click on
92:02 - package by this time it will run
92:06 - smoothly and you can see build success
92:09 - our build is got created and Target
92:12 - folder is also got created and this war
92:16 - file is also created by Banning our
92:19 - package command Okay so
92:23 - so that's it for this video I hope you
92:26 - got the idea how we can create a web
92:29 - application using Maven uh okay and in
92:33 - our upcoming video we will be deploying
92:36 - this web app in an Apache Tomcat server
92:40 - and we'll see how we can deploy it and
92:43 - how to manage that application web
92:46 - application on the Apache Tomcat server
92:48 - we'll see that one as well uh so in our
92:51 - previous video we have talked about how
92:53 - we can create a web application using
92:56 - Maven and we have created one web
92:58 - application now in this video uh what we
93:01 - what we are going to do is we are trying
93:04 - we will be going to integrate the Apache
93:07 - Tomcat with IntelliJ IDEA and using that
93:11 - Apache Tomcat server we will be
93:12 - deploying our web application on Apache
93:15 - Tomcat all right so we are going to
93:18 - deploy our this project that we have
93:21 - created in in our previous video uh to
93:24 - the Apache Tomcat alright so for that uh
93:27 - first
93:29 - I am going to just clean this previous
93:32 - build so that there are no errors will
93:36 - be produced we can go from the beginning
93:38 - so that you guys can understand more
93:40 - clearly all right uh uh all right so
93:43 - let's go ahead and
93:46 - first we need to integrate Apache Tomcat
93:49 - with the IntelliJ IDEA for that you need
93:52 - to download Apache Tomcat in your PC
93:55 - first okay so go ahead and inside your
93:57 - blogger and write search for
94:00 - Apache Tomcat
94:04 - and here you can see download tab is
94:07 - there you just click on it click on this
94:09 - download and after you have uh comment
94:12 - come inside this binary distribution
94:13 - under code you can click on the any one
94:17 - of this file I just prefer if you have
94:19 - 64-bit Windows just click on this ZIP
94:21 - file and it will download it it just 24
94:24 - 12 Mb file it will get downloaded
94:27 - depending upon your download speed and
94:30 - once it get downloaded uh just open that
94:35 - okay once it got downloaded uh you just
94:39 - go ahead and
94:42 - once it got downloaded you just go
94:44 - inside your downloads and double click
94:46 - on this and inside this you can see one
94:48 - folder is there
94:51 - one folder is there Apache Tomcat
94:54 - 9.0.72 oh and inside which all the files
94:58 - regarding the Apache Tom cadas are there
95:00 - you just uh come here and copy this
95:03 - click on copy and go where go the for go
95:09 - add folder where all your programs all
95:11 - your code all your softwares you store
95:14 - okay I I personally prefer Instagram
95:16 - program files I go here and as as you
95:19 - can see I have pasted that folder over
95:21 - here itself you just come here inside
95:23 - your program files and Ctrl V to paste
95:27 - your
95:28 - that Apache don't get file over here
95:30 - okay as you can see I have pasted over
95:32 - here and after doing that okay now you
95:37 - go inside your IDE and click on this uh
95:41 - settings
95:42 - button and after that click on plugins
95:46 - after clicking on plugin uh go to the
95:49 - marketplace where all the plugins are
95:52 - available and you just write
95:55 - smart Tomcat
95:58 - okay and you see when this one plugin
96:02 - double click on it and click on install
96:04 - you I have already installed if for the
96:07 - first time you see your install button
96:10 - you just click on install yeah within
96:12 - seconds it will go it will get installed
96:14 - and after click uh getting installed you
96:16 - click on apply and click on OK and
96:19 - that's it you have installed the plugin
96:21 - okay so the next step next step is come
96:25 - here and you just click here and edit
96:27 - the configuration
96:29 - clicking on the edit configuration you
96:32 - just come a new window will be appeared
96:34 - over here and plus I on this plug plus
96:36 - icon click and after that you can see
96:40 - now smart Tomcat uh button is there you
96:43 - can just click on it okay and after
96:45 - clicking on the smart Tomcat button
96:48 - okay and now for the first time you
96:51 - don't see anything over here right see
96:54 - tab is empty if you can follow follow
96:56 - along with me you can see this tab is
96:59 - empty so just click on configure and
97:01 - after clicking on the configure click on
97:04 - this plus plus icon and now you go
97:08 - inside the folder where you have stored
97:11 - the Apache Tomcat uh for my case I have
97:14 - stored inside in program files Apache
97:16 - tomcat and this is please select the
97:19 - root folder don't select this folder
97:21 - select the root folder under which all
97:24 - the bin config libraries logs stem files
97:27 - 10 folders are there all right select
97:29 - this click on OK
97:31 - click on OK and after creating that uh
97:34 - this will get created automatically uh
97:36 - location will be fetched version will be
97:39 - fetched and name name is also get
97:41 - getting created Okay click on apply
97:43 - click on OK I already have configured
97:45 - one so I will delete this one and after
97:47 - creating this click on OK
97:51 - so now you can see this name will be get
97:54 - created and the rest of the thing
97:56 - IntelliJ IDEA will do for you you don't
97:59 - need to worry about that and click on
98:01 - apply and click on OK
98:04 - okay so now you can see one unnamed uh
98:08 - Apache Tomcat configuration is here okay
98:11 - and now this configuration will come
98:14 - over here and if you follow along this
98:17 - uh now you go inside your Maven and
98:20 - double click on your package
98:22 - okay
98:26 - uh so wait uh I forgot to tell you one
98:29 - thing just click on clean
98:31 - first you need to compile uh double
98:34 - click on compile
98:37 - okay uh after you see build success now
98:40 - you click on the package
98:45 - okay so after clicking on package you
98:47 - see build success okay now we are good
98:50 - to go and if you just click here
98:54 - run button
98:56 - by selecting the Tomcat server that we
98:59 - have just created and now you can see
99:02 - one URL will be given to you you just go
99:05 - ahead and copy that URL if you don't
99:09 - want to copy just click or click on the
99:10 - right click on it and open it will give
99:12 - you the list of the browsers that are
99:15 - available inside your PC uh okay so in
99:18 - my case I will just copy and I will go
99:20 - inside my
99:22 - web browser and I will go here and I
99:25 - will just paste this
99:27 - okay so after pasting that uh when the
99:31 - website get loaded you can see Hello
99:33 - World welcome to programming and your
99:34 - name is getting printed why so because
99:37 - we have created a we have modified our
99:40 - index.jsp uh okay so you can see your
99:44 - name is there hello world hello world
99:46 - programming is there if you if you
99:48 - modify this now instead of saying hello
99:51 - welcome to programming if you want to
99:52 - say only Hello World just go ahead and
99:54 - delete that and uh click on this button
99:57 - run a name and stop and rerun it will
99:59 - stop that server and again rerun that
100:02 - server and after you can you can see uh
100:04 - now
100:05 - we just close this and refresh it
100:08 - now you can see this this uh welcome
100:11 - programming got deleted uh this is how
100:14 - you modify your website and deploy your
100:18 - website on uh Apache Tomcat server using
100:21 - the IntelliJ IDEA in which comes we have
100:25 - used one plugin known as smart Tomcat
100:28 - so I hope you got the idea how we can
100:32 - create a web app with Maven and how we
100:36 - can deploy our website on Apache Tomcat
100:39 - using one in IntelliJ plugin name as
100:42 - smart so now in this video we will see
100:45 - uh some hot questions or
100:49 - frequently Asked question in the maven
100:51 - interview questions if you are applying
100:53 - for any job uh which job requires a
100:57 - maven as a job requirement so
101:00 - so the interview in interview you can ex
101:03 - expect these kind of questions been
101:04 - asked okay so we'll answer each question
101:06 - one by one and try to solve
101:10 - then as well okay so let's go and take
101:14 - our first question first question is
101:16 - what is Maven okay so Maven is a project
101:19 - management tool it is based on com which
101:22 - is Project object model uh we have also
101:25 - covered uh separate videos on form if
101:28 - you haven't checked that go ahead and
101:29 - check where we have discussed all the
101:33 - prior details regarding the pump file
101:36 - wire pump file is important in Maven
101:38 - okay so the next question is what
101:40 - aspects are managed by parent Maven
101:42 - sorry okay so the aspect data management
101:46 - is builds documentation reporting scms
101:50 - release and distribution these are the
101:53 - various aspects which are managed by
101:55 - Maven okay so what are the advantages of
101:58 - using Maven why we use mavin okay so the
102:02 - very first Advantage is no need to add
102:05 - Char file in each project it creates the
102:08 - right direct directory structure and it
102:12 - builds and deploys the project and it
102:14 - also manages manages our dependencies
102:16 - and plugins so seamlessly that we need
102:20 - that we need not need to worry about our
102:23 - dependencies as well okay so that is one
102:26 - of the advantages of Maven as well okay
102:28 - so the water of the command to check the
102:30 - maven version okay so the command is NV
102:33 - n space minus version or else you can
102:37 - also type mvn let me write it out m v n
102:42 - minus V or or you can write mvn space
102:47 - minus version any one of this can
102:51 - you can write any one of these you have
102:54 - to find the maven version you are
102:56 - currently using okay so next question is
102:59 - what does the build tool do
103:03 - okay so it generates the source code if
103:06 - the auto generated code is used okay and
103:09 - it generates the documentation from
103:11 - source code okay and another user its
103:14 - compiles our source code also which is
103:16 - written in a Java
103:18 - okay so the package is compiled code
103:21 - into jar or zip file this is one of the
103:24 - uh uses of the build tool and it also
103:27 - installs the packaged code in the local
103:30 - repository server repository or the
103:32 - central repository okay so now next
103:35 - question is what is the difference
103:37 - between and and Maven so and is a
103:41 - toolbox whereas the maven is a framework
103:43 - right and it is and and is mainly a
103:47 - build tool and Maven is mainly a project
103:50 - management tool and and there is no life
103:53 - cycle and in Maven we have life cycle
103:55 - and we have also seen or what are the
103:57 - different phases of the life cycle also
103:59 - and and doesn't have formal conventions
104:02 - and Maven has a convention to place
104:04 - source code and compiled code Etc uh and
104:09 - this procedural and Maven is declarative
104:11 - why declarative because we declare our
104:13 - dependencies in the form.xml file right
104:15 - and and if and scripts are not reusable
104:18 - whereas the maven plugins are reusable
104:21 - we can use my own plugins as and when
104:23 - required okay so defa seventh question
104:26 - is Define Arc Type
104:28 - okay so what is Arc Type in Maven oh it
104:33 - is a in Maven that type it is a maven
104:37 - plugin which is designed for creation of
104:39 - the project structure so as we have seen
104:42 - in a previous video when we are trying
104:44 - to create the web application we have
104:46 - selected the arch type as web app so it
104:48 - is nothing but the structure that is
104:50 - predefined by the maven so if you start
104:52 - if you want to create a web application
104:54 - you just go ahead and select the arctab
104:56 - as web application there are many more
104:58 - archipers are there you can select
105:01 - according to your requirement okay so
105:04 - the next question is what is the purpose
105:07 - of mvn clean command Okay so the command
105:10 - it so the ambient link command removes
105:13 - the target directory before starting of
105:15 - a build process okay so imagine one
105:18 - scenario if you have created if you are
105:20 - build one project the target project
105:23 - will get created and next time you do
105:25 - some modification and your try again
105:27 - trying to create that build so in order
105:30 - to delete the previous Target folder
105:34 - command so that the previous build
105:37 - Target folder will get removed from the
105:40 - directory and after that you can again
105:43 - build the project and again the target
105:45 - project Target folder will be get
105:46 - created
105:48 - okay so next is uh what are the build
105:52 - phases in Maven okay so what are the
105:55 - different build phases here so first is
105:58 - validate compile test package
106:00 - integration test verify install and then
106:03 - deploy each one of these build phases
106:05 - are covered in depth in now in our
106:07 - previous previous video of this tutorial
106:10 - series you can go ahead and watch that
106:13 - videos as well and next one is what is a
106:16 - repository in maven
106:19 - okay so what is a repository in
106:24 - Mary this is our last question okay so
106:28 - the repository is a directory or a place
106:31 - where all the jars and form.xml files
106:34 - are stored okay so the mainly the
106:36 - repositories are of three three times we
106:38 - have seen on a seen our in our videos as
106:41 - well one is local repository one is
106:43 - Central repository and one is uh remote
106:45 - repositories okay so these are the type
106:48 - three types of repositories are there in
106:50 - mavina okay so these are the hot or uh
106:54 - frequently asked questions in the maven
106:56 - interviews okay so if you are preparing
106:59 - for the marriage interviews you go ahead
107:01 - and uh
107:03 - check these videos uh check this our
107:07 - Maven tutorial series and learn the
107:09 - maven thank you
107:11 - foreign