00:00 - hello guys welcome to the next video on
00:02 - maven tutorial for beginners in the last
00:05 - three videos we have seen how we can
00:07 - download and install maven on our
00:10 - Windows operating system and how we can
00:13 - create our first maven project using
00:16 - command line or command prompt now most
00:19 - of the times Java developers uses some
00:23 - kind of ID to create maven project there
00:28 - are few maven IDE s propellers nowadays
00:32 - which are eclipse netbeans or IntelliJ
00:36 - now I'm going to use Eclipse IDE which
00:40 - already comes with integrated maven you
00:44 - know environment so we don't need to
00:47 - install any extra plugin for you know
00:52 - creating our maven project and it's also
00:55 - one of the most popular ide for java
00:59 - developers now if you don't know how to
01:03 - install eclipse i'm going to paste a
01:07 - link for the video in which i have shown
01:10 - how we can download install eclipse for
01:14 - developing java so if you don't know
01:16 - just click that link and you will be
01:19 - good to go now let's create our first
01:22 - maven project using Eclipse IDE
01:26 - and then we are going to see the details
01:29 - of pom.xml so just to open your Eclipse
01:35 - IDE and then go to files here for the
01:38 - first time whenever you you know see
01:41 - this Eclipse IDE it's going to show you
01:44 - this kind of a welcome message and you
01:47 - can click this left top button here to
01:51 - you know see the Eclipse environment and
01:54 - you can close it something like this now
01:57 - in order to create a maven project you
01:59 - can go to files here or file here and
02:02 - then go to new project don't choose Java
02:05 - project but just choose project and in
02:09 - here just search for maven or you can
02:12 - scroll down
02:13 - and you will be able to see this
02:14 - category called maven and this maven
02:18 - category we have this maven project ok
02:22 - so just select maven project and click
02:24 - Next and for now we are going to create
02:29 - the simple project and we are going to
02:34 - skip archetype that's the same thing we
02:37 - have done a last time we have created
02:39 - the simple java project without any web
02:42 - application right so just select this
02:45 - checkbox and leave this checkbox as it
02:49 - is okay so these checkbox must be
02:52 - checked and the third should not be
02:54 - checked okay and then click Next and in
02:58 - here once again it's going to ask us for
03:02 - the group ID artifact ID version
03:05 - packaging as we have already seen in the
03:08 - last video what is group ID and what is
03:10 - artifact ID right so I'm going to just
03:13 - give the group ID comm dot code bind and
03:19 - the artifact ID for example a one demo
03:24 - ok the version is good for us which is
03:29 - zero point zero point one snapshot
03:31 - because we are developing this project
03:34 - right now and it's in development phase
03:37 - and packaging is jar and leave
03:41 - everything else d fault and just click
03:43 - finish here now eclipse is going to
03:47 - create this maven project for us in few
03:50 - seconds you can see this maven demo
03:53 - project is created and inside this maven
03:56 - demo project we have some you know
04:00 - packages here so there are 4 packages
04:03 - you can see here the first two are for
04:06 - your project files for example this
04:10 - source / main / Java is for your source
04:16 - file and then you have the source / main
04:20 - / say sources and this will contain the
04:24 - resources for your
04:26 - Java project right resources like maybe
04:29 - some pictures or some other kind of
04:33 - resources some XML files or you know it
04:36 - can be anything now the other two are
04:39 - for the test
04:41 - you know whenever we create some maven
04:45 - project it's also creating the test you
04:49 - know environment for us right
04:51 - so the third is source slash test slash
04:55 - Java and it's going to contain your test
04:59 - source files right and the fourth is
05:02 - source slash test slash resources and
05:06 - it's going to contain the resources for
05:09 - your test okay and the folder structure
05:12 - is something like this so if you see
05:16 - inside our source folder we have our
05:19 - main directory and our test directory
05:22 - and we also have this pom dot XML file
05:26 - now let's open this pom dot XML file so
05:30 - just click on it or double click it and
05:33 - it's going to open this pom dot XML and
05:37 - it's going to show you this kind of
05:40 - overview for pom dot XML now to see this
05:44 - form dot XML in the XML format you can
05:47 - go here and select this last option
05:50 - which says bomb dot X center and we will
05:53 - see this bomb dot XML in the normal you
05:56 - know XML format and inside this you can
06:00 - see these four elements here first is
06:04 - the group ID which we have given second
06:08 - is the artefact ID which we have given
06:10 - already and third is the version which
06:13 - we have given so this pom dot XML
06:16 - contains the information of the project
06:19 - which we are working on and it uses this
06:23 - group ID artifact ID and version for
06:27 - that okay now let's create a class
06:32 - sample class to you know understand how
06:37 - this maven
06:38 - works better so I will just select my
06:42 - source slash or main slash Java package
06:46 - here and I will right-click on it and
06:49 - then I will just go to new and I'm going
06:53 - to create a new class here and in here
06:56 - I'm going to give the package name same
06:59 - as I have already given so comma dot
07:03 - code bind and the name of the class for
07:08 - example I'm going to name it as app ok
07:11 - and everything else I am going to leave
07:13 - it as default and I'm going to just
07:16 - click finish and it's going to create
07:19 - this app dot Java class in my comm dot
07:24 - code bind package here ok now to just
07:29 - take the look at this project we are
07:33 - going to just create a very simple
07:34 - method inside this class so just write
07:38 - the public and for example it's going to
07:41 - return string and we can name our method
07:46 - as sample for example and just give
07:51 - these round bracket which takes no
07:53 - arguments and we are going to return
07:55 - some dummy values so just write return
07:58 - and let's say we are returning sample
08:02 - for example this sample string ok so
08:06 - it's not really complicated you know
08:10 - method we are creating here we just want
08:12 - to understand how maven works that's why
08:15 - we have just created this you know
08:18 - placeholder kind of method here okay now
08:22 - for creating the test case for this what
08:25 - I'm going to do is I'm going to go to
08:27 - source slash test slash Java this is the
08:30 - third package here right and I'm going
08:33 - to right click here and go to new and
08:36 - this time I'm going to go to the others
08:39 - category here so go to other and in the
08:42 - other I will be able to find this
08:45 - category called j-unit ok so this is the
08:49 - j-unit category
08:52 - and we will just create a J unit test
08:55 - case for our project so just select this
08:58 - J unit test case and click Next and just
09:03 - leave this as a default and in here we
09:08 - will give the package name same as we
09:10 - have given earlier so just calm dot code
09:13 - bind and then the name of our test will
09:19 - be for example app test okay and then
09:23 - click finish here and it's going to ask
09:26 - you this you know information it says J
09:32 - unit 4 is not on the build path do you
09:35 - want to add it so for now we don't want
09:38 - to add anything and why I am going to
09:41 - explain you in some moment right so just
09:45 - say not now and then click OK and now
09:49 - you can see our app test the java class
09:54 - is created with this sample test and if
09:58 - you can see here it's showing us a bunch
10:01 - of errors so why we are seeing these
10:05 - errors here because we don't have J unit
10:09 - jar file in our dependency parts or
10:13 - build parts you can see so in normal
10:16 - cases whenever we are not using maven as
10:19 - our build management system in normal
10:22 - cases what on developer will do is it's
10:25 - he is going to download this jar file
10:28 - and add it to the build path for the J
10:33 - unit right and then these errors can be
10:36 - gone right but maven allows us to add
10:41 - the dependency of in our pom dot XML
10:45 - file so that this dependency will be
10:49 - automatically downloaded and added to
10:53 - your project and let's see how we can do
10:57 - this so you can see these are some
10:59 - errors so to remove these errors what we
11:03 - can do is we can just
11:05 - go to our pom dot XML file here and in
11:09 - here just below this version element we
11:12 - are going to add our element called
11:15 - dependency
11:16 - okay so just write dependencies and then
11:20 - inside this dependencies element we need
11:24 - to add the dependencies for the J unit
11:27 - because our project requires this J unit
11:30 - jar file to compile our test now maven
11:35 - has this online repository from where it
11:39 - can download all the dependencies which
11:43 - we can mention here but what are the
11:47 - things we have to mention here so for
11:51 - simplicity just go to your browser and
11:55 - search for maven j-unit dependency okay
12:00 - so just search for maven j-unit
12:02 - dependency and click search and the
12:05 - first result you will see here will be
12:08 - from maven our MV and repository dot-com
12:13 - slash artifact /j unit /j unit so just
12:18 - click this link here and in here you can
12:22 - see all the you know maven you know
12:26 - files or jar files depending on the
12:29 - version of this and the top one is the
12:32 - latest version of this J unit release
12:36 - right so just click this top version
12:39 - which says release and in here we can
12:43 - see the dependency for this J unit so
12:48 - this is the simple way of searching the
12:51 - dependency for any you know jar file or
12:54 - any fear framework
12:56 - ok so simply just search for the maven
13:00 - and then the kind of you know dependency
13:03 - you are looking for for example J unit
13:05 - and then search for maven g-unit
13:08 - dependency and you can search for its
13:11 - dependencies something like this so just
13:13 - copy this dependency from here and go to
13:17 - your pom
13:18 - xml file and paste it here okay and what
13:22 - this dependency contain it's also
13:26 - containing the group ID so this j-unit
13:30 - you know framework whenever it's created
13:33 - g-unit people has given it some you know
13:37 - group ID artifact ID and the version we
13:41 - are using okay and as soon as you will
13:46 - hit save here just observe what is going
13:50 - on in here it's going to add all the jar
13:54 - files which is j-unit jar file version
13:59 - 14.12 for you automatically okay so i'm
14:03 - going to just click Save and whenever I
14:06 - click Save you can see it has downloaded
14:10 - this maven dependency for us and inside
14:13 - this maven dependency we have the j-unit
14:16 - 4.12
14:17 - jar file inside this maven dependency
14:21 - and this happened due to the addition of
14:25 - these dependencies which we have added
14:28 - for g-unit and now when we go to our app
14:31 - test a java class you will see all the
14:35 - errors will go related to you know J
14:39 - unit jar files right so once again we
14:43 - can do this so I'm going to remove these
14:46 - dependencies and when I click Save here
14:50 - see what happens here so I'm going to
14:53 - click Save and now all the maven
14:57 - dependencies are removed from our
14:59 - project and once again when we go to our
15:02 - app test dot Java class it's going to
15:06 - once again give us these errors okay so
15:09 - once again add these dependencies here
15:12 - and click Save and it's going to
15:16 - download all the dependencies and added
15:18 - in the project ok so this is how you can
15:24 - create your first maven project inside
15:27 - your Eclipse IDE and this is how these
15:30 - dependencies
15:31 - work in maven so that's it for this
15:36 - video we are going to see some more
15:39 - features in the later video so stay
15:41 - tuned and please rate comment subscribe
15:42 - and bye for now