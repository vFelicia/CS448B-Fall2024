00:00 - in this video I'm going to show you how
00:01 - you can use a built-in function called
00:04 - super in your Python classes so let's
00:08 - get started so to start with I have two
00:11 - classes here one is the parent class and
00:14 - other is the child class and here parent
00:18 - class acts like a superclass and the
00:21 - child class acts like a subclass which
00:23 - is inheriting from the parent class now
00:26 - both these classes have this init
00:30 - function and you already know what does
00:32 - this init function do it is the first
00:34 - function which is called when an
00:37 - instance of a class is created and here
00:40 - I'm just creating the object from the
00:42 - child class now what do you think will
00:45 - happen well that this constructor will
00:48 - be called or this constructor will be
00:51 - called because we are inheriting from
00:53 - the parent class into the child class so
00:56 - let's find out so I'm going to run this
00:58 - code and it prints child in it that
01:01 - means this statement under the child
01:04 - class init method is executed and this
01:08 - method is not executed now in some cases
01:11 - you might want to pass some parameters
01:15 - also into your superclass for example
01:18 - I'm just going to give this example
01:21 - let's say I want to pass a argument
01:24 - called name here and then I will just
01:27 - print the value of name how can I call
01:31 - this init function using this child
01:35 - class instance so it turns out that
01:37 - there is a function called super in
01:41 - Python that allows us to refer to the
01:45 - superclass implicitly now this super
01:49 - function is a built-in function which
01:52 - returns a proxy object that allows you
01:55 - to refer to your superclass so let's try
02:00 - to use this super function so you just
02:02 - use the keyword super and then give
02:05 - these parentheses because this is a
02:07 - function and then this super function
02:10 - will return the proxy object of the
02:12 - superclass that
02:13 - means I can use this dot operator to
02:16 - call the init method from the superclass
02:20 - so this notation means super dot in it
02:24 - means we are calling the init method
02:26 - from the parent class and that means we
02:29 - can pass the name from here so let's
02:32 - just pass this now I am going to just
02:33 - write max here and now I'm going to run
02:37 - this code and now you will see that
02:40 - child in it is printed using this
02:42 - statement first of all and then using
02:45 - the super function the init method of
02:48 - the parent class is called and then this
02:52 - name is passed here and it prints parent
02:55 - in it and the name whatever name we have
02:58 - provided here so this super function
03:00 - allows us to refer to the superclass now
03:04 - let me show you one more thing which is
03:06 - called the method resolution order and
03:08 - you can find this method resolution
03:11 - order by using your class names or child
03:15 - last name dot underscore underscore mro
03:19 - so just write underscore underscore
03:21 - Amaro underscore underscore and this
03:24 - statement I'm going to use inside the
03:25 - print function so we can see the result
03:28 - what it returns so I'm going to run the
03:31 - code now and you can see it returns this
03:34 - kind of order so as the name suggests mr
03:37 - o stands for method resolution order and
03:41 - this is the order in which the methods
03:44 - are called inside your child class or
03:49 - the parent class and this order means
03:51 - that all the method in the child class
03:54 - will be executed first and then all the
03:58 - method in the parent class will be
04:01 - executed now there are some rules based
04:04 - upon which this order is calculated and
04:08 - these rules are the first rule is the
04:11 - method inside your subclass are always
04:14 - called first and then whatever the
04:18 - method inside the base class they will
04:21 - be called and the second rule is related
04:24 - to multiple inheritance so let me just
04:26 - create
04:27 - the second parent class and I'm going to
04:29 - name it as parent 2 and here also I'm
04:32 - going to just write parent 2 here and
04:34 - let me inherit from the parent to also
04:39 - in the child class right and let's run
04:42 - the code once again and now you will see
04:44 - this order so once again child is
04:47 - printed and then the parent and then
04:51 - prayer in two and then the object so the
04:54 - second thing on which the amaro depends
04:56 - upon is the order in which you inherit
05:00 - from the parent class or the superclass
05:03 - so in our example we were inheriting
05:05 - from the parent class first of all and
05:08 - then parent too and in the same order
05:12 - this amaro also will be decided so all
05:15 - the method in the child class will be
05:17 - executed first and then all the methods
05:20 - inside the parent class whatever you use
05:23 - first here will be executed and then
05:26 - whatever superclass you right after that
05:29 - those method inside the class or
05:32 - superclass will be executed next and
05:35 - then at last this is the base object now
05:38 - let's try to just reverse this order and
05:41 - once again let's run the code and you
05:45 - will see that this order will be
05:46 - reversed so the method resolution order
05:49 - will tell you which class method will be
05:52 - executed first and then the order of all
05:56 - the methods from the super classes now
06:00 - one more interesting thing which you
06:02 - will observe here is this output so I
06:05 - said that this super function is used to
06:08 - refer to the superclass and now we have
06:12 - two super classes that means multiple
06:15 - inheritance and you will see here that
06:18 - only one output is printed which is from
06:22 - the init method inside the parent too
06:26 - and this statement is not printed which
06:30 - is inside the init method inside the
06:32 - parent class so how to solve this
06:35 - problem so if you have multiple
06:38 - inheritance then you
06:41 - you need to manually call these
06:44 - init:function
06:45 - using the class name so let's say I want
06:49 - to call the init function first fall
06:51 - from the parent to class I will use
06:53 - parent to dot in it and then you need to
06:57 - give also the self as the first
07:00 - parameter and the second which is the
07:03 - name in the same way you use the second
07:06 - class which is parent dot init function
07:10 - and then first parameter is the self and
07:13 - then you can pass any other name for
07:15 - example Tom here and let me run the code
07:18 - and you will see it calls first of all
07:21 - parent to init function and we have
07:23 - passed Max here as the name and then it
07:26 - calls the parent one init function with
07:29 - the name Tom which is printed here also
07:32 - so this is how you can use super
07:34 - function in Python