00:00 - hey guys welcome to the next video on
00:02 - docker tutorial for beginners
00:05 - in the last few videos we have seen the
00:07 - fundamentals
00:08 - of using docker files docker images
00:11 - and docker containers now in this video
00:14 - i want to give you
00:15 - a concrete example of using
00:18 - the docker container so i'm going to
00:21 - give you
00:22 - a real world example of how you can
00:25 - really use docker containers and how
00:29 - these docker containers are really
00:31 - useful in certain situations
00:34 - so we are going to uh compile and run a
00:37 - c
00:38 - plus plus program inside a docker
00:40 - container
00:41 - now you might say that compiling and
00:44 - building a c
00:46 - plus program on your host operating
00:48 - system
00:49 - is also easy so why do we need
00:52 - a container so consider a situation
00:55 - in which you have a seek plus plus
00:57 - program and you want to compile
00:59 - a c plus plus program with different
01:02 - version of gcc let's say now
01:06 - it's really hard to maintain different
01:08 - version of gcc
01:10 - on your linux or windows operating
01:14 - system
01:14 - but using docker containers it's really
01:18 - easy
01:19 - to use and compile your program
01:23 - in different gcc versions using docker
01:27 - containers
01:28 - also let's say you want to develop a c
01:30 - plus plus program which works on
01:32 - multiple operating system or you want to
01:35 - compile your c plus plus program for a
01:38 - cross platform
01:40 - application so docker containers are
01:42 - really useful for
01:44 - c plus plus cross platform development
01:47 - with
01:47 - containers with containers you can
01:50 - choose a target
01:52 - with a platform that runs completely
01:54 - different operating system
01:56 - other than your host operating system
02:00 - or the system on which you are
02:01 - developing so let's say you are
02:03 - just working on your windows operating
02:05 - system but you want to compile your c
02:07 - plus
02:08 - program on a linux operating system or
02:11 - any special
02:12 - version of linux operating system you
02:15 - can do it easily with the docker
02:17 - container
02:18 - so let's start with our example so as
02:21 - you can see
02:22 - on my visual studio code i have opened
02:25 - a docker folder and inside this docker
02:27 - folder i have this
02:28 - directory d1 which we have created in
02:30 - the previous video
02:32 - and now i'm going to create a new
02:33 - directory inside
02:35 - this docker directory and i'm going to
02:39 - name this directory as d2
02:43 - and now i'm going to just go inside this
02:46 - d2 directory so let's go inside
02:49 - this t2 directory and here inside this
02:52 - d2 directory i'm going to
02:54 - create a new cpp file let's say
02:57 - so you can use touch on the terminal or
03:00 - you can just
03:00 - click on new file here and then just
03:03 - create a new
03:05 - cpp file with the extension cpp
03:09 - i'm going to name my file as main dot
03:11 - cpp
03:12 - and as soon as you create a cpp file
03:15 - inside
03:16 - your visual studio code editor it's
03:18 - going to give you the suggestion for the
03:20 - c
03:20 - plus extension so i'm going to install
03:22 - this c plus plus extension
03:24 - so now this c plus plus extension is
03:26 - installed
03:27 - and this c plus plus extension is going
03:29 - to help me to work
03:32 - with the c plus file inside my visual
03:36 - studio code editor
03:37 - so what i'm going to do here is inside
03:40 - my
03:41 - main.cpp file i'm going to just write a
03:44 - very simple
03:45 - program here which just prints
03:48 - hello docker container so normally what
03:51 - you will do on your host machine if you
03:54 - have
03:55 - g plus plus or gcc you can compile
03:58 - your c plus program using g
04:02 - plus plus right so you can see i have
04:05 - this main.cpp so i can compile this
04:08 - program using
04:10 - g plus plus hyphen o
04:13 - and then the executable file name which
04:15 - i want to
04:16 - create let's say i want to just give the
04:19 - name
04:20 - test to my file and then my
04:23 - main.cpp file right so
04:26 - i'm going to just press enter which is
04:29 - going to create this executable file you
04:31 - can see here also
04:32 - i'm going to do ls here also so you can
04:35 - see this executable file
04:37 - and now you can just run this test
04:40 - executable file or binary file using
04:44 - this
04:44 - command dot forward slash and the name
04:46 - of your binary file and it's going to
04:48 - print
04:49 - hello docker container and i want to
04:52 - create a docker container and i want to
04:55 - compile
04:56 - my c plus program inside my docker
04:59 - container
04:59 - and i want to run my c plus
05:02 - program inside my docker container this
05:05 - is what i have done
05:07 - in my host machine not inside my docker
05:10 - container right
05:11 - so let me just clear the terminal
05:14 - and inside my d2 directory where my c
05:18 - plus file is there or my cpp file is
05:21 - there
05:22 - i'm going to create a docker file so i'm
05:25 - going to just
05:26 - uh right click and i'm going to just
05:28 - create
05:29 - this docker file here
05:32 - and then press enter and i can remove
05:35 - this test
05:37 - binary file because i don't need it for
05:41 - my docker container now if you don't
05:43 - know which
05:44 - base image you want to use so for
05:47 - example if you want to use
05:48 - gcc to compile your c plus plus program
05:52 - you can go to docker hub and search for
05:55 - gcc here and when you search for gcc
05:59 - you will be able to find the official
06:03 - gcc image here you can see docker
06:06 - official image
06:07 - or let's just press enter and
06:10 - see what result it gives so you can see
06:13 - the official image is this one with this
06:17 - official image tag and it has more than
06:20 - 10 million
06:21 - downloads so i'm going to just click on
06:23 - this
06:24 - gcc uh link and
06:27 - you can see when you just scroll down
06:30 - what are the tags
06:31 - you can use with gcc also
06:34 - you can see how you can pull this gcc
06:37 - base image
06:38 - using docker so the name is really
06:40 - simple gcc
06:42 - so what we are going to do is we are
06:43 - going to just write
06:46 - from and then our base image i'm going
06:48 - to use
06:49 - here is gcc now the
06:52 - version or the tag i want to use here
06:56 - is the latest or you can choose
07:00 - the tags which are available here so you
07:02 - can choose
07:04 - 10.2.0 or 10.2
07:07 - or from all these uh tags which are
07:10 - available
07:10 - here you can also go to tags section and
07:13 - see
07:14 - the more specific tags you want to use
07:17 - for your c plus plus program so now once
07:20 - we have the base image
07:22 - the next step is to copy our current
07:24 - folder
07:25 - which contains our cpp code into the
07:28 - docker image
07:29 - under the file system where
07:32 - we want to copy this so for copying our
07:37 - local files into the docker image
07:40 - we use this copy command okay and as you
07:44 - can see it suggest us
07:46 - uh that we need to provide the source so
07:48 - source in our case
07:50 - is dot because we want to copy all the
07:53 - files
07:53 - from the current folder and the
07:55 - destination will be the destination
07:57 - inside
07:59 - the file system of your docker image in
08:02 - our case
08:02 - it's gcc so in gcc base image
08:06 - file system you will find this
08:09 - path which already exists there so you
08:12 - can
08:13 - just write user forward slash src
08:16 - which is already there inside the file
08:19 - system of
08:20 - gcc base image okay so
08:24 - as i said this command is going to copy
08:27 - all the files which are there
08:28 - in your local directory to
08:32 - this directory inside your docker
08:36 - image okay now if you want to copy some
08:39 - specific
08:40 - file then you can do this also you can
08:43 - just write
08:44 - main dot cpp and then you can copy
08:48 - a specific file into the
08:51 - folder which should already exist
08:54 - inside your image which you are using
08:58 - right so for now for simplicity i would
09:01 - just want to
09:01 - copy all the files from the color
09:03 - current directory
09:05 - to user forward slash source forward
09:08 - slash
09:09 - the directory which we are going to
09:10 - create so let's say we want to create
09:13 - this directory where we want to copy all
09:15 - the files cpp
09:16 - test let's say so this path already
09:18 - exists
09:19 - in the file system and this is the
09:21 - folder name which we want to
09:23 - create and copy our local files
09:26 - to this folder in the docker image
09:30 - right now we are going to define the
09:32 - work directory so
09:34 - we can just use this work
09:37 - there keyword to define the
09:40 - working directory in which you want to
09:43 - work
09:44 - now okay so because we want
09:47 - to work inside this directory because
09:50 - we are copying our c plus file inside
09:53 - this directory
09:54 - we are going to set our work directory
09:57 - as
09:57 - this one that means when you run any
10:01 - command it's going to run inside
10:04 - this directory which you set as work
10:06 - directory
10:07 - now in the next step i want to run
10:11 - the command which will compile the c
10:14 - plus
10:14 - program using this main.cpp so
10:18 - now i can just give the g plus plus
10:21 - command then
10:22 - hyphen o as the flag and
10:25 - let's say i want to name my binary as
10:28 - test
10:28 - and the file name which i want to
10:30 - compile is main
10:32 - dot cpp so this run command is going to
10:35 - compile
10:37 - my c plus program inside my cpp test
10:40 - directory
10:41 - under user source folder right
10:44 - now in the next step i'm going to give
10:46 - the command
10:47 - using cmd which will be the command
10:50 - which i want to run
10:51 - inside the container so this is going to
10:55 - run the program output from the previous
10:57 - step into our container so this
11:01 - works like this as you have already seen
11:03 - in the last video also
11:05 - if you want to run your binary you can
11:06 - just give dot forward slash and the name
11:09 - of your binary which is
11:10 - test right so this binary is going to
11:14 - be uh run using this cmd command
11:18 - inside our container so that's it that's
11:20 - how you can
11:21 - create this docker file to compile your
11:23 - c plus plus program and
11:25 - run it now let's build our docker file
11:28 - to create an image
11:29 - for that you can just give sudo docker
11:33 - then your build command so
11:37 - build and then the build context and
11:39 - then you can provide
11:40 - hyphen t to provide the name of your
11:43 - image i'm going to
11:44 - name my image as cpp underscore
11:48 - test for example and then you can also
11:51 - give the tag
11:52 - to your image let's say i want to
11:54 - provide the tag one
11:56 - to my image okay so this is going to
11:59 - create
12:00 - a docker image using the docker file
12:03 - so you can see it has pulled the base
12:05 - image in the first step
12:07 - then copied our files from the local
12:10 - directory to the directory which we have
12:12 - defined
12:13 - and then it has set the work directory
12:16 - and then in the next step it has
12:17 - compiled our
12:18 - c plus program and in the last step
12:22 - we have set the test
12:25 - binary to run when we run our container
12:28 - so now let's list out all the images you
12:31 - can just give
12:33 - docker images command for that and you
12:36 - will see
12:36 - that this repository is created about a
12:39 - minute
12:40 - ago and this is the image id for
12:43 - that image right so now we want
12:47 - to run our container using this image
12:51 - so for that we have seen in the last
12:52 - video we can give the sudo
12:55 - docker run command and then i'm going to
12:58 - give
12:59 - the hyphen hyphen rm flag
13:02 - and this rm flag causes docker to remove
13:06 - automatically the container if it
13:08 - already exists so if the container which
13:11 - we are going to
13:12 - run already exists then it's going to
13:15 - remove that container
13:16 - and then it's going to re-run that
13:19 - container
13:20 - so this command is handy when you want
13:22 - to
13:23 - just run only one container at a time
13:26 - and then i'm going to give this it flag
13:29 - with hyphen so i t
13:30 - flag for running this container in the
13:33 - interactive mode
13:35 - and then your image
13:38 - so you can give this image name cpp test
13:41 - here
13:42 - or image id also you can give so i am
13:44 - going to
13:45 - give the image name which is cpp
13:48 - underscore
13:49 - test with the tag so tag we have
13:52 - provided
13:53 - is one okay so here as i said you can
13:56 - give the image id
13:57 - or the repository name and the tag
14:00 - and then when you run this docker
14:03 - container
14:04 - it's going to print hello docker
14:06 - container that means we ran
14:08 - the test binary inside our docker
14:11 - container
14:12 - right now as i said you can change this
14:15 - tag
14:16 - instead of latest you can choose the
14:18 - version of gcc you want to use
14:21 - for compiling and running your c plus
14:23 - programs so that's why
14:25 - this docker and docker containers will
14:28 - help you to
14:29 - just cross compile in cross platform
14:32 - applications
14:33 - now let's say you want to compile your c
14:35 - plus plus program using
14:37 - the c lag compiler instead of gcc
14:40 - okay so we want to compile our program
14:43 - using
14:44 - c lag compiler instead of gcc so let me
14:47 - clear
14:48 - this terminal and let me go one
14:51 - directory up here and i'm going to
14:54 - create a new directory so i'm going to
14:55 - just write mkdir
14:58 - d3 and inside this d3 directory
15:02 - what i want to do is i want to just have
15:05 - the same
15:06 - cpp file so i will just copy this cpp
15:09 - file into the d3
15:11 - directory also and then we are going to
15:14 - create
15:15 - a docker file inside this d3 directory
15:19 - so let's create this docker file here
15:23 - so now let's move to the docker hub
15:25 - website and let's search for
15:27 - c lang if we have something related to c
15:30 - lang compiler on docker or not so i'm
15:33 - going to just write c
15:34 - lang here and as i remember
15:38 - there is no official a base image for c
15:41 - lang
15:41 - on the docker hub so what we can do
15:45 - we can use the base images we already
15:47 - have
15:48 - on our system and then we can install
15:51 - the c line compiler on
15:52 - that base image so i'm going to just
15:56 - give this
15:57 - sudo docker images command and
16:00 - from these images let's say we will use
16:04 - this ubuntu latest
16:06 - or ubuntu 20.04 to compile our
16:09 - c program inside the ubuntu base image
16:12 - using the clang
16:14 - compiler okay so what i'm going to do is
16:17 - i'm going to just uh write this kind of
16:21 - docker file i'm going to explain you all
16:24 - the steps one by one
16:25 - so we want the base image ubuntu with
16:28 - the tag
16:29 - latest because we already have
16:32 - downloaded or pulled this image in the
16:34 - previous videos so we don't
16:36 - need to pull it once again now in the
16:39 - next step
16:40 - i'm running apt get y update
16:43 - and apt get install update
16:47 - to update apps on the base image so
16:49 - that's what you do
16:51 - when you want to install any
16:54 - software on your ubuntu operating system
16:57 - so
16:57 - this command is going to update the apps
17:00 - on the base image
17:02 - now in the next step using this apt get
17:05 - hyphen y
17:06 - install c lang command we want to
17:09 - install c
17:09 - lag on our base image which is ubuntu
17:13 - right the next step are relatively
17:16 - easier because we have seen
17:18 - these steps in the other docker files
17:21 - also so we want to copy all the files in
17:25 - the current
17:25 - directory into this directory inside
17:29 - our base image and then we want to set
17:33 - the work there which is the same
17:36 - where we have copied our c plus files
17:39 - and then to compile your c plus
17:43 - program using c lang you can just
17:46 - replace the gcc
17:47 - with c lang plus plus and the
17:50 - rest of the command will look like same
17:53 - as you have seen in the case of gcc
17:55 - also so you can see g plus plus hyphen
17:58 - node test
17:59 - main dot cpp and here also you can
18:03 - give this command the only thing i want
18:05 - to change here is
18:06 - the main dot cpp the file name here
18:09 - okay because our binary name is test we
18:12 - are going to just run this
18:14 - binary using this command so this
18:17 - is going to run inside our container
18:20 - okay
18:21 - in the d3 folder i have created this
18:23 - docker file to compile
18:25 - my c plus plus program using c lag and
18:28 - i'm going to run this
18:30 - now so let me clear the terminal once
18:32 - again
18:33 - so now let's build our docker image
18:35 - using this
18:36 - docker file so for that i need to go
18:38 - inside the d3
18:40 - directory and then i'm going to give the
18:44 - docker build command with
18:47 - the context or in the current directory
18:50 - and then hyphen t to give the name of
18:54 - my image so let's say i want to give
18:58 - the name to my image as c lang
19:00 - underscore cpp
19:02 - and the version or the tag which i want
19:04 - to provide here is
19:05 - let's say 1.0.0 okay
19:09 - so let's build our image using this
19:11 - command
19:12 - so now as you can see the build of this
19:14 - image is successful
19:16 - with the name c lang underscore cpp
19:19 - and the tag 1.0.0
19:22 - so let's run the container for this
19:25 - image using the docker run command so
19:27 - i'm going to just provide
19:29 - sudo docker
19:32 - run oops by mistake i pressed ctrl
19:36 - c that's why it break so let me
19:39 - just give this command once again and
19:41 - then give this
19:43 - image name with the tag 1.0.0 so we want
19:47 - to run our container using
19:48 - this image so let's press enter now
19:54 - and as expected we see hello
19:57 - docker container that means we
20:00 - successfully
20:01 - ran this binary file
20:04 - which is compiled using c lang in
20:08 - our container and the output is printed
20:11 - now let's say you want to change
20:13 - something in the output so
20:15 - instead of let's say hello docker
20:17 - container
20:18 - i just want to print hello world
20:21 - here okay so i will just save this uh
20:25 - program and then i can just build it
20:28 - again but this time i will build it
20:32 - with the different tags so let's say i
20:34 - just did
20:35 - the minor change so i will just change
20:38 - the tag as
20:39 - 1.0.1 so let's build this image
20:43 - which is going to be built really fast
20:45 - and now let's
20:47 - run this image using this docker run
20:50 - command but
20:50 - don't forget to change the tag because i
20:53 - have changed
20:54 - the tag for the image also to 1.0.1
20:59 - so here also i'm going to change the tag
21:00 - for the image and then press
21:02 - enter which is going to run this program
21:05 - and it prints
21:06 - hello world so how simple is this
21:09 - so this is how you can compile and run
21:13 - your c plus programs using docker
21:16 - containers
21:17 - so as i said i just wanted to give you a
21:20 - real world example
21:21 - same thing you can do for your java
21:24 - programs or any other programs
21:27 - which you want to run in different
21:29 - environments
21:31 - so i hope you enjoyed this video and i
21:33 - will see you in the next video