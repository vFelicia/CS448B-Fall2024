00:01 - hello guys welcome to the next video
00:02 - tutorial on C++ programming for
00:04 - beginners and in this video we will see
00:07 - what are vectors in
00:09 - C++ and how we can use vectors in
00:13 - C++ so what is a vector a vector is a
00:17 - sequential container same as an array so
00:22 - array can contain more than one element
00:25 - of same data type at the same time
00:28 - similarly you can can use Vector to uh
00:33 - contain collection of data which is of
00:37 - same data type but there is a difference
00:41 - between the simple array and the vector
00:44 - and the difference is whenever you
00:47 - declare a simple array like this you
00:50 - need to define the size of the array or
00:53 - initialize uh with some size and it's
00:57 - really hard to change the size of uh
01:00 - the array or simple array
01:04 - dynamically but vectors whenever you use
01:08 - vectors you can change the size of these
01:12 - Vector uh
01:14 - dynamically okay so that's the main
01:17 - difference between simple array and
01:20 - vectors but in addition vectors comes
01:25 - with uh their own functionality or
01:28 - functions uh which can be used in much
01:32 - broader way than a simple array so let's
01:37 - see how we can declare a vector so to
01:40 - declare a vector you need to include a
01:42 - vector Library so
01:45 - include vector and then to declare a
01:49 - vector you just need to call
01:54 - STD vector and then in these angular
01:58 - bracket you need need to give the do
01:59 - data type so I if I want to have the
02:02 - collection of integer value I will give
02:05 - the data type int or
02:09 - STD
02:11 - string I need to give the string uh
02:14 - Library add the same string Library here
02:17 - but you uh understood the concept right
02:20 - or float values or something like this
02:24 - so for example I want to have the a
02:26 - vector of integer values then comes the
02:30 - name V and just you can end it with
02:36 - semicolon otherwise you can initialize
02:39 - it with some value so if you initialize
02:43 - this vector by 10 it means that it has
02:46 - the initial size of 10 so you can store
02:49 - 10 values or you can give or you can
02:53 - initialize Vector with no value and we
02:56 - can add these values dynamically
03:00 - so to add values to a vector you just
03:03 - need to uh have the name of the vector
03:07 - dot push back and this is the method
03:11 - which we use to add the element to the
03:16 - vector from the back so from the end of
03:21 - the uh Vector
03:24 - right so now what we are going to two
03:33 - is we are going to add some element to
03:37 - it for example we want to add a a value
03:41 - of 10
03:43 - here so the the first value of this
03:46 - Vector is 10 and we can add in a similar
03:50 - way different values for example
03:53 - 20 30 and
03:57 - 40 so similar to AR is the index of the
04:01 - vector start from 0 1 2 3 okay now in
04:06 - order to get the size of the vector so I
04:10 - told you their size can be changed
04:12 - dynamically so now the the the vector
04:15 - size becomes uh four
04:18 - right so let's print the size of the
04:22 - vector now
04:25 - int and then we can
04:28 - write Vector
04:32 - size is equal to and then we can use
04:37 - this Vector name dot there is a function
04:41 - called
04:42 - size which we can use to print the size
04:47 - of the vector so now whenever you run
04:50 - the
04:51 - program you see the vector size is equal
04:53 - to
04:54 - 4 and let's see we will place this uh
05:00 - Vector size here and let's see whenever
05:04 - we add two values what is the size of
05:06 - the vector and then whenever you have
05:10 - four values so the vector size whenever
05:13 - we add two values the vector size is two
05:16 - and after adding to other other values
05:20 - the vector size is four so its size is
05:23 - changing dynamically
05:25 - right now to uh iterate or to access the
05:30 - values in the vector you can use Simple
05:34 - for Loop for example 4 in um I is equal
05:40 - to
05:41 - 0 I should be less than the size of the
05:45 - vector which is this
05:47 - one right so size of the vector we can
05:50 - get it from here and
05:55 - i++ right and you can iterate over this
05:58 - vector
06:00 - like this so we will just write
06:03 - vector and then the index I told you
06:06 - index start from zero and then in here
06:12 - we will give some space and then we can
06:15 - access the value using these square
06:19 - brackets and then the index okay similar
06:22 - to
06:23 - arrays and here I forgot this and run
06:28 - the program and and it prints the index
06:31 - so index zero value is 10 index one
06:35 - value is 20 index 2 value is 30 index 3
06:38 - value is 40
06:40 - right the same F uh you know result you
06:43 - can get using the function called Vector
06:47 - so the name of the vector dot at and
06:51 - this is also this takes the index of the
06:57 - uh element and then
07:00 - using this also you get the same result
07:03 - so run the program and you get the same
07:07 - result now to erase any value from a
07:12 - vector you can uh use a function or you
07:17 - can use the function called arrays so my
07:21 - vect
07:22 - DOT arrays and this arrays you can see
07:27 - when you hover over this it takes the
07:32 - position of the element you want to
07:36 - delete now there is a trick to uh erase
07:39 - the element so there is something called
07:43 - iterators which I will teach you in uh
07:45 - some other video but whenever you do
07:48 - something like V
07:53 - Dot begin it means that you want to uh
08:00 - give the iterator from the starting so
08:04 - this is the like uh indicating the start
08:08 - position of the vector so for example I
08:13 - want to delete uh this 10 which is at
08:16 - index uh zero which is the first po
08:20 - value of the vector this will indicate
08:24 - the first value of the vector right so
08:28 - let's uh
08:30 - try
08:32 - to erase the first value and then we
08:36 - will iterate over the vector once again
08:40 - right so now let me give uh some space
08:44 - also so that we know that uh this
08:53 - is okay so we have given some space Here
08:58 - and Now now we will run the
09:00 - program and now you can see
09:03 - the initial uh size of vector was 4 and
09:08 - the values were 10 20 30 40 but after
09:11 - erasing the first value using my Vector
09:16 - do erase and um in argument my V do
09:21 - begin it has deleted or erased the first
09:25 - value which was 10 from the
09:27 - vector in a similar way you can
09:31 - use my
09:34 - do
09:36 - end to delete the last value for example
09:40 - we want to delete this 40 which was the
09:43 - last value we have inserted then run the
09:46 - program and
09:49 - now I think it has deleted it will
09:52 - delete the last value
09:55 - but there is some problem here and the
09:58 - problem
10:00 - is you can't use and directly but what
10:04 - you need to do is you just need to write
10:08 - my
10:09 - DOT begin and then give the or add the
10:16 - index which you want to delete so for
10:19 - example I write um begin
10:23 - do2 and now when I run the
10:26 - program you see it has deleted the
10:31 - second index value right so the set the
10:36 - value at second index is 01 2 so the
10:39 - value at index 2 is 30 so if you want to
10:44 - delete the value at index 2 then you
10:48 - just need to write begin + 2 similarly
10:52 - whenever we write begin + three so
10:56 - the value at the start starting plus the
11:02 - uh value you want to delete so index of
11:05 - the uh value you want to delete so if
11:07 - you want to delete the value at index 3
11:11 - then you just write begin plus three
11:14 - okay run the program and it it deletes
11:18 - the last value like
11:20 - this
11:21 - okay now for example you want to delete
11:26 - the value on the basis of uh the value
11:30 - for example you want to delete the value
11:34 - 30 from the vector how you can do
11:40 - it what you can do is um we will
11:44 - add uh other another library to remove
11:50 - uh which includes this include algorithm
11:54 - which has the method called STD remove
11:57 - and then we are going going to copy this
12:00 - arrays function once again and in here
12:04 - in the arrays we will write some
12:08 - arguments so this argument will be
12:11 - STD
12:15 - remove and so this is a function which
12:19 - we can use to remove some value from a
12:22 - vector right and in here it takes three
12:26 - arguments the first value the last value
12:29 - and the value itself right so inside
12:33 - this STD remove just you just give my V
12:38 - do begin begin comma and then just copy
12:43 - the vector name Dot
12:48 - and and the value you want to delete
12:52 - right so we want to delete the value 30
12:55 - so next argument will be 30 because we
12:59 - want to delete based on the value of the
13:03 - uh Vector right and then just after the
13:07 - ending of the remove you just need to
13:10 - write comma and then once again my do
13:15 - end and I'm going to comment
13:19 - this and run the
13:22 - program and this has removed the value
13:25 - 30 from our Vector right so we have no
13:29 - value
13:31 - 30 okay so we have seen how to erase
13:35 - value how to erase uh value based on the
13:39 - value so we how to erase on the basis of
13:43 - index how to erase on the basis of value
13:46 - like this now if you want to erase all
13:51 - the values from the vector or if you
13:53 - want to clear the
13:56 - vector so you want to delete all the
13:59 - values from the vector what you can do
14:02 - is I will just I'm going to comment this
14:05 - out
14:07 - and what I'm going to do is to remove
14:10 - all the values from the vector I can
14:13 - just use the vector name
14:18 - dot clear okay and what this basically
14:23 - do is it'll clear all the values from
14:27 - the vector
14:29 - and that means there will be no values
14:32 - whenever you call this method on the
14:36 - vector vector will be empty okay so run
14:40 - the
14:41 - program and for the first time it has
14:44 - the four value but uh after deleting or
14:47 - clearing this Vector we have nothing
14:50 - inside our uh Vector so it hasn't
14:53 - printed anything so for example we all
14:56 - we call this uh size of the vector after
15:01 - clearing this uh uh data after this my
15:05 - v.
15:06 - clear it'll show that the vector size is
15:10 - equal to zero now
15:12 - right so this you can call whenever you
15:15 - want to delete everything from from the
15:18 - ve
15:19 - Vector now there is a function to check
15:24 - if your vector is uh totally empty or
15:29 - not and this method is called uh
15:35 - v.m and it Returns the Boolean value so
15:40 - you can just write my V
15:45 - dot
15:51 - dot Mt my. Mt and this returns of
15:57 - Boolean value true or false so to check
16:01 - whether your vector is empty or not we
16:06 - can just write
16:09 - is
16:14 - Vector empty we are checking if the
16:17 - vector is empty and run the program and
16:21 - it returns zero
16:24 - right so whenever your of it returns
16:30 - zero it means your vector is not empty
16:33 - right now whenever we uncomment this
16:38 - clear uh clear function on the vector
16:41 - now see the result is Vector empty it
16:45 - returns one one means yes and zero means
16:49 - no right one means true and zero means
16:54 - false so now after
16:57 - clearing all all the values from the
16:59 - vector vector becomes empty so it will
17:03 - give one and whenever we commment this
17:07 - so we are not clearing the values all
17:09 - the values and run the program it says
17:12 - is Vector empty it returns zero so it
17:15 - says no Vector is not empty it has some
17:18 - value because we haven't cleared all the
17:20 - values from the
17:22 - vectors so there
17:25 - are many functions in this a vector
17:29 - class which you can use so you can just
17:31 - write your vector name and Dot and you
17:35 - can uh you know see there are so many
17:38 - method to array and
17:42 - empty data you can see add back pop back
17:49 - so there are so many function which you
17:52 - can use from this vector class so just
17:56 - just uh you know uh choose a function
18:00 - and try to use it in your um you know in
18:05 - your program and you will be good to go
18:08 - because practice uh is the thing which
18:11 - will make you perfect so I hope you have
18:14 - enjoyed the video please rate comment
18:16 - and subscribe and bye for now