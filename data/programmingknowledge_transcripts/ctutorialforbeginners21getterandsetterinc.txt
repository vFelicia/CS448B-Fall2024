00:00 - hello guys in this video I'm going to
00:02 - teach you about Setter and getter method
00:05 - in C so to start with for example I have
00:09 - a class called book and this book book
00:14 - class have three public variables public
00:18 - in ID which is a book
00:21 - ID public string book name and public
00:27 - int number of pages which which is
00:30 - assigned to a value of
00:33 - 250 now
00:35 - in objectoriented programming it's a bad
00:40 - idea to declare your variables as public
00:45 - members of the class and why it's a bad
00:49 - idea or it's bad practice to declare
00:52 - your variables
00:55 - public because for example our book
00:59 - class
01:00 - is here right and book ID cannot be
01:05 - negative right and book name cannot be a
01:09 - null in in normal
01:13 - circumstances and number of pages you
01:17 - cannot change the number of pages right
01:20 - book A book contains a certain number of
01:23 - pages you cannot change the uh number of
01:26 - pages in the book right now for for
01:30 - example if you declare them public
01:33 - members variables of the class
01:37 - what the other user can do is other user
01:42 - can declare the instance of a class
01:45 - called B is equal to new
01:51 - book and then he can access your ID for
01:57 - example B dot
02:03 - ID and he can
02:06 - assign negative values to the ID for
02:11 - example minus 10 and it will be
02:15 - perfectly valid but in real situations
02:20 - the ID cannot be negative right book ID
02:23 - cannot be negative and when I want to
02:26 - print this ID I can even print this
02:31 - and console
02:34 - dot
02:37 - WR right
02:40 - line and I can say
02:48 - here
02:49 - book ID is and then my
02:56 - placeholder and then I can say
03:01 - book ID I can call this book ID here
03:04 - right and when I run the this code it
03:08 - will work perfectly fine even though uh
03:12 - it's not allowed to set the book
03:15 - ID a negative value right in the same
03:20 - way somebody can even assign a null
03:24 - value to the book each and every book in
03:28 - for example we are taking the example of
03:30 - book so have you seen any book having
03:34 - the null value but in this case when you
03:38 - um declare your book variable public
03:43 - what some other user can do B do book
03:48 - name and he can assign this a
03:52 - null and this means that your book don't
03:57 - have any name
04:01 - book name is null so you can just call
04:06 - this and run the
04:08 - program and program runs fine but it's
04:11 - not valid in real conditions right the
04:14 - book name cannot be null in the same way
04:19 - somebody uh in real situations when you
04:23 - have declare a book class it has a
04:25 - certain number of pages you cannot
04:27 - change the number of pages or user user
04:31 - should not be able to change the number
04:32 - of pages but look at here B do number of
04:37 - pages and I can change it to 300 3,000
04:42 - even and I can
04:45 - call
04:49 - book pages is number of
04:54 - pages and the user can be able to change
04:59 - even the number number of pages which is
05:00 - not
05:01 - allowed so that's why it's not a good
05:05 - idea to declare
05:08 - your members of your class as a public
05:13 - members so it's a good practice to
05:17 - declare your member variables as private
05:20 - okay so what I can
05:23 - do
05:25 - private and whenever I declare my
05:31 - variables as
05:32 - private what will happen is so let's see
05:36 - what happens I declare all the book
05:41 - member variables as private as soon as I
05:45 - declare them private you see your
05:49 - assignments are invalid now so you
05:53 - cannot directly access these variables
05:58 - so when you hover over here
06:00 - it says that this
06:02 - U book. ID is inaccessible due to
06:07 - protection level because this is a
06:10 - private member of a Class A Private
06:13 - member cannot be accessed outside your
06:17 - class okay so this is a class and this
06:20 - is the boundary of a this private member
06:23 - and it cannot be used outside the class
06:27 - so this is one level of
06:30 - protection you have given to the
06:33 - variables now nobody will be able to
06:36 - access them
06:37 - directly but if nobody should be able to
06:42 - access them directly how can you assign
06:46 - a name to a book or assign some other
06:50 - values to a book so what we use is a
06:56 - Setter and get getter method and what
06:59 - are these Setter and getter method these
07:02 - are nothing but a way of indirectly
07:07 - accessing your uh variable private
07:11 - variables and protecting your private
07:15 - variables uh against invalid conditions
07:20 - so for example I will declare the setter
07:24 - and getter method for ID how we can uh
07:27 - declare a Setter and getter method
07:30 - so first of all we will declare a set
07:33 - method of our variable ID so it start
07:38 - with
07:42 - public and what it return it will return
07:46 - integer because our ID is an integer
07:48 - right public int and when then we say
07:54 - set
07:55 - ID
07:58 - okay so Setter method how we can Define
08:02 - these Setter
08:03 - method generally we add the set before
08:08 - your variable name okay and then this
08:11 - set method takes an argument in ID for
08:16 - example or
08:18 - ID and what it will do
08:23 - is let me give this bracket once
08:27 - again and what is will do is it will
08:31 - return an integer okay or this will not
08:36 - return an integer a bag bag your pardon
08:40 - it will be void and the get method will
08:43 - return the value so it is it is declared
08:47 - like this public void set ID and it just
08:52 - has set and the name of your variable
08:55 - and what you need to do here is take
08:58 - your uh
09:00 - private member variable so you can uh
09:05 - access it like
09:07 - this this dot
09:10 - ID is equal to this
09:14 - ID okay in the same way to declare a get
09:19 - method what you need to do is you need
09:22 - to
09:24 - do public get and the name of the ID
09:29 - so get ID and what it does is it returns
09:35 - an integer and why it returns an integer
09:39 - because it it has to return the ID of
09:43 - the book
09:45 - right so in the code we will just
09:52 - return return this do ID okay so
09:57 - indirectly we are returning this
10:00 - variable so this set method is used to
10:03 - set the value and get method is used to
10:07 - uh return the value or access the value
10:09 - of it but we have still or user can
10:13 - still give the negative value to ID
10:18 - right so what this method can do is
10:23 - if
10:24 - your ID
10:28 - or this
10:30 - ID is less
10:33 - than
10:35 - zero then we can print a message so I
10:39 - will just copy this and we can
10:43 - say
10:45 - the ID is not valid or ID is yeah so
10:51 - the
10:53 - book ID is
10:57 - not valid
11:00 - so now we have added a protection
11:04 - against the negative values okay so
11:07 - no user should be able
11:11 - to assign a negative value to
11:16 - your variable ID
11:20 - right but even this will also will be
11:25 - able to assign the negative value to the
11:28 - idy it will just uh go here it will see
11:32 - okay ID is less than zero and it will
11:35 - print it and it will assign it so what
11:38 - we can do is we can throw an
11:41 - exception so how to throw an exception
11:45 - just
11:47 - write
11:50 - throw
11:55 - new
11:57 - exception okay and what this will do is
12:01 - it will throw an exception by saying
12:04 - this message and then it will this
12:07 - condition will not be reached okay so
12:11 - let's try to set the value of
12:15 - uh value of ID a negative value okay so
12:21 - let's say
12:23 - B do set value set
12:27 - ID is equal to Min -
12:33 - 10 - 10 okay and how you can get this ID
12:39 - by calling this get ID method and what
12:43 - it will return it Returns the ID right
12:46 - so ideally it should return whatever is
12:49 - assigned to the ID I'll run the program
12:52 - and as soon as I will I run the program
12:56 - it's not showing any result and it
12:58 - throws an exception see it throws an
13:02 - exception and it says the book ID is not
13:06 - valid which is our message right and it
13:10 - doesn't go even to the next uh next code
13:15 - so in this way we can protect
13:18 - our variables by assigning invalid
13:23 - values okay the same we can do uh for
13:28 - book name so I will copy this
13:31 - uh set and get values and paste it here
13:35 - and now it will
13:37 - be
13:39 - set book name and
13:45 - get book name okay and this is a string
13:52 - variable book name is a string variable
13:55 - so we will pass
13:57 - string book
14:01 - name
14:03 - and then in the get method it will
14:08 - return uh string right and we will
14:12 - return book name and in the set
14:16 - method what we uh have uh said earlier
14:19 - that book cannot be null or empty book
14:23 - name cannot be null and empty so what we
14:26 - can do is in the if condition
14:30 - we can
14:31 - say what we can say
14:40 - string
14:41 - dot is null or empty this is a property
14:46 - in uh string to check if your string is
14:50 - null or empty okay so if my book name is
14:55 - null or empty I can say the book
15:03 - name name is not valid so I can thr this
15:07 - exception or otherwise if I get
15:12 - this valid name I will just assign the
15:16 - value of book to my private variable and
15:20 - I can access this like access it like
15:22 - this so let's
15:26 - assign book ID positive
15:29 - and once again let's
15:31 - assign book name a null value okay book
15:37 - name I can
15:39 - say
15:41 - null and let's try to access this so I
15:46 - say book
15:50 - name is and I will call this go get book
15:55 - method and I will run the program and
15:58 - once again and it's expected to throw
16:00 - the er error and it says the book name
16:03 - is not valid it's throwing this
16:05 - exception but
16:07 - whenever I pass the valid name for
16:11 - example I pass the
16:14 - name c
16:18 - shop tutorial book and now I will run
16:22 - the
16:24 - program it prints that book is book name
16:28 - is c tutorial book okay so in this way
16:33 - we can protect
16:35 - our variables which are uh fragile or
16:40 - which are uh which have the capacity to
16:45 - be to take invalid values we can protect
16:48 - them using Setter and getter method in
16:52 - the same way for accessing this number
16:55 - of pages we can only Define a get value
17:00 - and we can we uh avoid
17:05 - uh defining the set value so whenever we
17:11 - Define a get value for number of pages
17:14 - we can only get the number of pages and
17:16 - we cannot be or the user cannot be able
17:19 - to set the number of pages
17:22 - right so what we can do
17:26 - here we can say
17:29 - public this will be our public int
17:32 - method okay public int get number of
17:36 - books and what it will
17:39 - do
17:41 - return this DOT number of pages so it
17:45 - will just return the number of pages and
17:48 - nobody can assign the number of pages to
17:51 - it okay so I can
17:56 - just P do do get number of
18:01 - pages and I will run the program it will
18:03 - run fine number of pages is book name is
18:07 - 250 I can say
18:11 - book pages is so now it says book pages
18:16 - is
18:17 - 250 so always remember that whenever you
18:23 - need to declare variables in the
18:26 - class try to make them private and try
18:30 - to access them with the getter and
18:32 - Setter values it's always a good
18:35 - practice so I hope you have understood
18:37 - the basic concept of Getters and Setters
18:40 - and I hope you have UND uh enjoyed this
18:43 - video please writ comment and subscribe
18:44 - and bye for now