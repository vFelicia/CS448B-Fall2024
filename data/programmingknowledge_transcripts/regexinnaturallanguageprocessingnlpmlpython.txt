00:00 - hello guys welcome to this tutorial and
00:02 - this one we are going to talk about
00:03 - physics or regular expressions it's a
00:06 - very important tool to have in your
00:07 - natural language processing journey
00:08 - we're going to use it a lot and it's
00:11 - very very important they can't tell you
00:12 - how much important is first let's take a
00:14 - look at the definition according to
00:16 - Wikipedia and we do have expression
00:18 - regex or rigid expression sometimes
00:20 - called rational expression is a
00:23 - theoretical computer science and formal
00:25 - language theory a sequence of characters
00:27 - that define a search pattern usually
00:29 - this pattern is then used by string
00:31 - searching algorithm let's find our find
00:34 - and replace operations on string or for
00:36 - input validation so a long search word
00:39 - this is a sequence of characters ahead
00:41 - pattern characters that can define and
00:44 - find patterns in text replace them and
00:47 - search for them so what's my ability to
00:49 - do in this very busy physics is covering
00:52 - the regex functionality in python and
00:54 - there is expands and the grouping of the
00:56 - matrix and an important thing to mention
00:59 - here is physics is not a python thing
01:01 - it's already implemented in all the
01:04 - languages and basically every every
01:06 - language try to implement reduce in it
01:08 - so it's not only in Python it's found in
01:11 - all the programming languages so first
01:13 - of all it's in Portuguese library from
01:15 - Python and this physics module is in
01:17 - your module in Python
01:19 - there was the re module you might find
01:22 - other tutorials in put on re this is
01:24 - also the regular expression library but
01:27 - wizard is a new one and it's going to
01:29 - replace re eventually so it's pretty
01:32 - used this one so let's define the text
01:34 - this is the tweet basically hello guys
01:36 - this is my first tweet and as you see
01:38 - here we have some hashtags and we need
01:40 - to extract them our main feature or our
01:43 - main goal in there is to attract the B
01:45 - hashtags from the text so first of all
01:47 - let's see the first function we are
01:49 - going to deal with is find all find the
01:51 - all function is a function that you pass
01:54 - a shrink or a regular expression and it
01:57 - find it inside some kind of text so it's
01:59 - search for the hash tags inside tweet
02:01 - and it finds all the hash tags like if
02:03 - you count them there's one two three
02:05 - four five and six and these are the six
02:07 - hash tags that can be found and fixed
02:09 - but what if we search for another
02:12 - like MLB going to find it and these
02:15 - these operations does not have anything
02:17 - interesting in them actually string
02:19 - functionality already do this with
02:22 - without any headache or Frederick's but
02:24 - let's keep doing we will know later how
02:27 - to use the power of Frederick's there's
02:29 - a function called sub which is basically
02:31 - the same offered place in the string
02:33 - except that it accepts regular
02:35 - expression and it can go further than
02:37 - just replacing some text in the strength
02:39 - so we passed the string that we want to
02:41 - substitute we're going to change and you
02:43 - want to change it by what they the
02:46 - string that you want to change it so
02:48 - here we basically change all the
02:50 - hashtags into an underscore and you can
02:52 - see here all the hashtags has been
02:53 - translated to an underscore and there is
02:55 - a function called split this is pretty
02:57 - much the same as the restraining the
02:59 - split function but it also accepts
03:01 - regular expressions so it will come in
03:02 - handy when we introduce the regular
03:05 - expressions over in our veterans so
03:06 - let's take a look at the regular
03:08 - expressions or button these are the
03:10 - veterans here
03:11 - the regular expression pattern and this
03:13 - is its functionality like for example a
03:15 - to z or a suit in line you basically
03:17 - tell the regular expression that you
03:19 - search for our character in the
03:21 - characters from A to Z and these are in
03:23 - small letters in lowercase so he will
03:25 - only search for the lowercase characters
03:27 - the dot operator the operator basically
03:30 - search for any character except for the
03:33 - new line here the /w match any word
03:35 - character like you all the characters
03:36 - from A to Z either small other cases or
03:40 - lowercase it match either of them and
03:42 - all the numbers and the underscore the
03:44 - the inverse of this is the d /w but in
03:47 - an uppercase basically any character
03:49 - that does not mention here like all the
03:51 - characters that are not 8z and 0 to 9
03:54 - and underscore like apt for example or
03:56 - hashtag and in this kind of stuff
03:57 - backstory is the boundary between the
03:59 - words physically spaces the fact the /s
04:02 - match any single white character like a
04:04 - space for a new line or return or any of
04:06 - these if you make an S in our case it
04:08 - matches any non-white character and
04:10 - these are the backslash T backslash n
04:12 - backslash R these are all the newline
04:15 - and the tab characters that's using your
04:17 - normal files a backslash D basically is
04:19 - a decimal number it's just for any
04:21 - digits from 0 to 9 the anchor here
04:24 - search-form that matches the
04:26 - start of the string and the lower sign
04:27 - matches the end of the string so so
04:31 - let's make use of these three good
04:32 - expression like for example here we will
04:34 - find all the hashtags followed by /w
04:38 - small the /w basically is any character
04:41 - so we are going to search for any
04:43 - hashtag followed by one character in the
04:45 - tweet so when you run this so you can
04:48 - find that it catches all the hashtags
04:50 - and the following characters so you can
04:52 - see here that we have mood for now we
04:54 - have one word one hashtag forward by a
04:57 - character if we add on the capture so we
04:59 - will have two characters if we had three
05:02 - and so on but what if you want to make
05:03 - it like generic like for example a
05:05 - character or more through this there is
05:07 - the repetition cases there's a liquor
05:10 - exhibitions actually for this kind of
05:11 - stuff also like you can see the question
05:13 - mark basically what's what this
05:15 - exhibition tell is that it's going to
05:17 - search for are you be and why what can
05:20 - be there or not so the character that is
05:23 - followed by question mark is optional it
05:25 - can be there or not the asterisks make
05:27 - the character right before it it will be
05:29 - appearing zero or more times so the
05:32 - difference here is that it will only
05:34 - appear once ordered una beer like it's
05:36 - only once or nothing and the Asterix
05:38 - here tools that we are going to have
05:40 - either a character and we cannot have a
05:42 - character we can have multiple
05:43 - characters the blood sign tells that are
05:45 - going to have one or more deaths
05:48 - so we cannot we cannot have zero
05:50 - character of the why you have to have at
05:52 - least one character so these view three
05:55 - a wild card you can you can say that
05:57 - because you don't have to specify
05:59 - specific number of characters of course
06:01 - except for this one you have to have one
06:03 - character but what if you say for
06:05 - example you need to have three exactly
06:07 - characters the for example for the
06:10 - digits for example so this one says we
06:13 - need a digit and we need to have three
06:15 - of them there's also different cases
06:18 - where you have like fruits number three
06:20 - or more or three to five these is
06:22 - basically you know like growing by
06:24 - number you need a specific number of
06:26 - values so let's go and try to extract
06:28 - the hashtags once more
06:30 - so we now say that we need the hashtag
06:32 - followed by one or more character so
06:35 - that is that's it
06:36 - that's how
06:37 - the the hashtags of course you can have
06:40 - hashtags like more complex like for
06:42 - example having a hyphen or something so
06:45 - this is the basic way of extracting idea
06:48 - hashtags also we can extract the words
06:50 - in the same fashion like for example you
06:52 - search for a character or more which is
06:54 - basically the words notice here the
06:55 - exclamation mark is not it does not
06:58 - appear here and we have here at
07:00 - explanation mark and also we have a
07:01 - comma and they does not appear here so
07:04 - this is basically only extract the words
07:06 - inside your text so let's do some
07:09 - operation if we need for example to
07:10 - substitute all the hashtags with a
07:13 - hashtag word capital hashtag word this
07:15 - will be useful in the national language
07:17 - processing for example if you need to
07:18 - like replace specific characters or
07:21 - specific patterns of specific words to
07:23 - remove them like in this case for
07:26 - example fee we need to change the
07:27 - hashtags into a a hashtag word so you
07:31 - can see you see how to use it using the
07:33 - sub function you define the regular
07:35 - expression and then you use the words or
07:38 - the expression also that you can replace
07:40 - them by in this expression we change all
07:43 - the white space into the underscore and
07:46 - basically all the non characters like
07:48 - exclamation mark and the comma and all
07:50 - these can serve or change it into
07:51 - underscore as you can see so another key
07:53 - concept to talk about is the grouping
07:55 - character like for example here let's
07:57 - say that we want to search for Python
07:59 - but with a lower case for a upper case
08:03 - so you can use this expression which is
08:04 - basically the square pieces here use the
08:08 - square braces here means any of the
08:10 - inside capsules like you have you can
08:12 - have B capital or be small and you can
08:16 - you see there for example you have Ruby
08:17 - that ends either with Y or E this for
08:21 - example mean all the vowels you can have
08:23 - any unfolds this for example match all
08:26 - the numbers from 0 to 9 this matches all
08:28 - the character from A to Z and lower case
08:30 - this matches all the character from A to
08:32 - Z bugs
08:32 - upper case this match all the characters
08:35 - small lower case and upper case and
08:36 - number and if we use anchor here inside
08:40 - this square pieces so this means any
08:42 - characters except for these characters
08:45 - so it match any except for the royals
08:47 - here also it match a
08:49 - except for in dishes so let's see a
08:52 - simplification on them here we have some
08:54 - text - the graph language I love to
08:56 - write and by what a cool language button
08:59 - is and the Pyramids of Giza are so huge
09:01 - you can see here that here we have
09:03 - Python start with B Y and B Y also is a
09:06 - shortcut for Python and here we talk
09:08 - about Python but here we talk about the
09:09 - Burmese so what if we need to do like
09:11 - for example X classification that this
09:14 - side whether or not this input text is
09:17 - about pythons talking about Python so it
09:19 - going to be in our interest or not so
09:21 - let's take a look at this for the text
09:23 - in text we're going to loop in this text
09:25 - ray and for each text we will have a
09:28 - regular exhibition that finds all the
09:31 - Python text versions so let's walk
09:33 - through this expression first we have
09:35 - the Python word this is the character
09:37 - this is the expression that we talked
09:39 - about video so this will match Python
09:41 - either with B capital or a small letter
09:43 - and this is our character here the or
09:46 - operation can be used also with regular
09:48 - expression so you can use multiple
09:50 - expressions and the expression will
09:52 - match either of them so now we have also
09:55 - another expression which is basically
09:57 - matched by the by word either be capital
10:00 - for P small but this this expression
10:02 - need to be ended with the boundary as
10:05 - you can recall the backslash B here
10:08 - means a boundary of words so backslash B
10:11 - here means that this will be a word and
10:13 - will not have any following text so for
10:15 - example the pyramids here it's B Y but
10:18 - it has four main characters so this is
10:20 - not a boundary this is a words here
10:23 - characters so it does not it will not be
10:25 - matching here so if the Python detected
10:26 - they going to print this interesting
10:28 - because this is a phrase that they're
10:30 - interested in else we are not going to
10:32 - print as we're going to print on so here
10:35 - you can see that the Python is a great
10:36 - language is interesting it is indeed
10:39 - have a Python inside it this I love to
10:41 - read in by interesting what's a cool
10:43 - language Python is but you can see here
10:45 - that the pyramids is not it does not
10:47 - mention any of these regular expressions
10:48 - as you can see so another examples let's
10:52 - see some examples on the regular
10:53 - expression for example here we have some
10:55 - text for this example we search for
10:57 - regular word but only in the font of the
11:00 - text like the very first character so
11:01 - here's the regular expression for this
11:03 - search for the regular that is only at
11:05 - the beginning of the text so we have to
11:08 - layer again we have first one here and
11:10 - we have the second one here but we're
11:11 - also only interested in this one we need
11:13 - to capitalize this one so let's see the
11:16 - output of this cell and you can see here
11:17 - this bigger expression the first
11:19 - character got capitalized of the later
11:21 - one was not changed that backslash came
11:24 - here you can see here because this
11:26 - string have multiple lines so the
11:27 - backslash n because it's lies so let's
11:30 - see you can search for a number for
11:31 - example here we need to search for a
11:33 - year so it's almost 2020 so happy new
11:36 - year so we'll search for any digits that
11:39 - have four of them like for example it's
11:41 - almost 2020 Happy New Year for all of
11:45 - you for example so let's see what the
11:48 - elbows will be it will only parse the
11:50 - number that is that has three digits at
11:53 - full digit story so it's the year here
11:55 - let's see another example here we need
11:57 - to change the numbers inside the text
11:59 - into just the word number you can change
12:01 - here any character between zero and nine
12:04 - one or more of them will be changed by
12:06 - the word number and this is pretty
12:08 - useful when we come later into sentiment
12:10 - analysis and text classification as we
12:12 - will talk about this later actually but
12:13 - it's very useful to have inside your
12:16 - tools so let's take a look at another
12:18 - case here for example see we have this
12:21 - text we extract the email from the text
12:23 - and we also need to know the details of
12:26 - the email okay like for example here we
12:29 - need to extract from this text the
12:31 - username and the company so let's take a
12:33 - look at this expression we're going to
12:35 - use search function of the regular
12:36 - expression and what search does
12:38 - basically it's allowed us to extract
12:40 - group of the regular expression notice
12:42 - here that we use the odd before the
12:44 - string to emphasize that this is a row
12:46 - string like but to them if we have any
12:49 - characters inside it do not deal them
12:50 - like for example the backslash N and a
12:52 - backslash R and all these kind stuff do
12:54 - not treat them as a newline character
12:56 - just treat them as normal character it's
12:57 - a wrong string let's take a look at the
13:00 - expressions of ad the parenthesis here
13:03 - emphasizing group so this is a group one
13:05 - and this is a group 2 sorry this is a
13:08 - group 2 so what we are searching for
13:10 - here is we search for any basically a
13:13 - character or dot and notice here that we
13:16 - the backslash dot here to emphasize that
13:18 - this is a literal dot because if you use
13:22 - a dot without a backslash here we said
13:24 - any week it's like we're saying
13:25 - basically any character but we use the
13:28 - slash to emphasize that we search for
13:29 - the explicitly leap dot the death star
13:32 - dot and also we are going to add the -
13:34 - because the username may have - so the
13:37 - username in half I - or a dot for any
13:40 - character and one or more of them okay
13:42 - so this would be followed by a at and
13:45 - then we will have the address here and
13:47 - basically the address or the company
13:49 - will be the same as the username so
13:51 - inside the email address and this result
13:54 - will be saved in a match and in this
13:56 - match you can have the group function
13:58 - which basically return the whole
14:00 - expression the this whole expression and
14:02 - there is a group one which basically
14:04 - return the first group which is the
14:06 - first parentheses and group two which is
14:08 - returned the second parentheses or the
14:11 - second group so let's take a look at the
14:12 - output and you can see here it returns
14:14 - the the match group which is basically
14:17 - the whole regular expression that we
14:18 - match it and then the first group which
14:20 - is the username and the second group
14:22 - which is the company so that's pretty
14:24 - much it for this video so let's recap
14:25 - what we have done so far we have we now
14:27 - know how to define regular expression
14:29 - have to search for a battery inside of
14:31 - text and how to process text patterns
14:33 - and how also to extract useful
14:34 - information from text and in the next
14:37 - video we are going to start making a
14:39 - hands-on project where we are going to
14:41 - extract useful information from tweets
14:43 - so see you guys in the next one