00:00 - hello guys welcome to the next video
00:02 - tutorial on C programming for beginners
00:04 - and in this video we will see what are
00:07 - structures in C and how we can use
00:11 - structures in C so the first question is
00:15 - what is a structure in
00:19 - C uh in C a structure is a collection of
00:25 - different uh variable which are grouped
00:28 - together to make uh make some
00:32 - logical uh group so for example I want
00:35 - to make a structure of a
00:39 - student uh there is no direct variable
00:42 - uh I can uh uh give to define the
00:46 - attribute for a student so that I know
00:49 - that this uh attribute is for some
00:52 - particular student there can be many
00:54 - students and there can be uh you know I
00:57 - have to declare so many uh
01:01 - variables and in the end when I have so
01:04 - many variables I can get confused uh
01:08 - which which variable is assigned to
01:12 - which student so structures make it very
01:17 - easy to uh Define if you have a group of
01:22 - variable to which you want to bind uh in
01:27 - a logical group so let's see how we can
01:31 - uh uh declare a structure in C so
01:35 - structure you just uh need to use struct
01:39 - keyword in U to define a structure and
01:43 - then the name of the structure for
01:45 - example student and then comes these uh
01:49 - curly braces I just need to change the
01:52 - fonts so then comes these uh curly
01:56 - braces here and then inside these curly
02:00 - braces you can Define your variable so
02:04 - what attributes the
02:07 - students can have he can have his ID his
02:12 - or her so this ID can be an integer so I
02:16 - will Define int
02:19 - ID then a student can have his uh name
02:25 - so I can Define string as a name so
02:32 - string for example
02:34 - car
02:36 - uh pointer I can Define it as
02:41 - name hello guys welcome to the next
02:43 - video tutorial on C programming for
02:45 - beginners and in this video I will teach
02:47 - you what is a structure in C and how we
02:51 - can use structures in C now what is a
02:56 - structure structure is a group of
02:59 - variabl
03:00 - which you can group uh together to make
03:03 - a logical uh you know variable for
03:07 - example you want to Define some database
03:10 - of uh some student or you want to uh uh
03:14 - create some record of a student or some
03:17 - students uh it will be very difficult to
03:20 - Define variables to each student and
03:24 - then if in the end if you have many
03:27 - variables containing the student requir
03:30 - uh it can get a little bit messy but uh
03:34 - we can uh make this situation better by
03:38 - using structure so structure is a
03:42 - logical uh group of variables so to
03:46 - define a structure for example I want to
03:48 - define a structure of student uh to
03:51 - define a structure we use a keyword
03:54 - called
03:55 - struct and then we uh give the name name
03:59 - of the structure for example I give the
04:02 - name to my structure as
04:04 - student and then comes curly braces and
04:08 - inside these curly braces you define
04:11 - your attributes for this student
04:16 - structure okay so for example what
04:20 - attributes or what traits a student can
04:23 - have a student can
04:25 - have uh his ID which can be integer ID
04:30 - student ID can be integer so I defined
04:33 - integer then student have his name which
04:37 - can be character and student can have
04:40 - his score or marks which can be in
04:43 - percentage and percentage we will Define
04:46 - it as a floating uh point so uh he can
04:50 - have these three attributes or these
04:52 - three traits right now for each student
04:56 - we can Define this uh a different uh you
05:00 - know instance of a structure and we can
05:03 - use structure uh to make a logical group
05:07 - of these three variable for a particular
05:10 - student okay now once you define uh the
05:13 - structure this kind of structure you can
05:16 - use it in your main function like this
05:19 - so whenever you define a structure you
05:21 - need to call it inside your main
05:23 - function and how you can call it you can
05:27 - just copy the name of the structure and
05:30 - struct keyword itself and then give the
05:34 - name to this student structure right so
05:39 - for example you will give this student
05:43 - structure
05:45 - name record one for example this uh
05:51 - indicates the student rec student record
05:55 - of student one for example right now
05:59 - this is is the variable you define for
06:03 - this student structure so this can be a
06:07 - treated the student can be treated as a
06:10 - data type in this case and structure is
06:13 - a key keyword which tells that it's a uh
06:17 - student data type which is a structure
06:21 - okay and this is your variable name just
06:24 - uh think it think it like this okay now
06:27 - whenever you want to assign some value
06:30 - to this record which is a uh instance of
06:35 - uh the student structure instance means
06:38 - one uh part of this
06:40 - student uh then how you can do it you
06:44 - can just do it simply like this so you
06:47 - just need to take this
06:49 - record and you for example you want to
06:53 - assign ID to this uh record you just
06:56 - need to use this dots separate data and
07:00 - you will be able to see the
07:02 - member variables of this uh student uh
07:07 - structure you can see automatically in
07:09 - code blocks okay so these ID name and
07:15 - percentage are called the members of the
07:18 - structure okay and you can call them
07:21 - using this dot separator of but after
07:25 - this variable okay so for example
07:28 - student ID
07:30 - is equal to uh one for example I have
07:34 - assigned one to record one and student
07:38 - uh name so I will once again use this do
07:44 - name and then I can assign any name to
07:47 - this
07:50 - student but if you remember in the last
07:52 - video when I uh teach you what are
07:55 - strings I taught you how you can copy a
07:58 - string
07:59 - to uh you know a character array right
08:03 - or you can assign or copy a string you
08:06 - can just use a function called
08:09 - St
08:11 - St cpy which is string copy and then you
08:16 - can use uh this thing so the first
08:21 - argument of this function is the
08:24 - destination where you want to assign the
08:26 - value and second uh uh argument is the
08:30 - value itself for example the value
08:34 - is John so basically what we have done
08:38 - is we have assigned John as a value to
08:42 - this uh name variable record. name
08:46 - variable okay and the third we can
08:49 - assign percentage like the same so
08:52 - record
08:53 - one dot
08:56 - percentage is equal to for example
09:00 - example uh
09:05 - 70.2 okay these are the percentage
09:08 - scored by him okay now once you assign
09:13 - uh these uh values to the structure or
09:17 - the to the instance of the structure you
09:19 - can access these values also using uh
09:23 - your print uh uh print function so just
09:28 - use print and then you can just call for
09:32 - example
09:34 - ID so
09:38 - uh you can just write ID is equal to
09:46 - percentage
09:48 - D and then you can just give the space
09:52 - uh and just write name is equal to
09:58 - percentage
10:00 - s and just gives a little bit more space
10:03 - and then just
10:06 - write percent is equal to uh percentage
10:11 - F okay so this is for holding the
10:15 - decimal value this is for holding the
10:16 - string this is for holding uh the
10:19 - floating point right and we will give
10:22 - the line break here also and then we
10:25 - will assign or we can we can access the
10:28 - value
10:29 - which we have assigned just by like same
10:34 - as we have assigned the values so
10:35 - record. ID will give you the ID record.
10:39 - name will give you the
10:41 - name and record do percentage record 1.
10:46 - percentage will give you the percentage
10:49 - okay like
10:51 - this so let's uh break this print into
10:56 - few lines so we can see it easy easily
11:00 - okay so we can access these values like
11:04 - this okay so let's try and run the
11:07 - program and hopefully it doesn't contain
11:09 - any errors and you can see ID is equal
11:12 - to 1 name is equal to John and
11:15 - percentage is equal to 70.1 1999 which
11:19 - is
11:20 - 70.2 right so in the same way you can uh
11:25 - Define different instance of this
11:29 - student structure and you can maintain a
11:31 - record of the student for example uh you
11:35 - define uh some different structure so I
11:38 - will just copy the same and paste it
11:41 - below to uh Define a second uh
11:44 - record and this record I will name it as
11:47 - record two everywhere I will just change
11:51 - it record two record two record two here
11:55 - also record two so I will just copy
11:58 - record to for the student two okay and
12:02 - the ID now is uh two the name will
12:06 - change for example Mark and the
12:09 - percentage also changes for example
12:15 - 91.3 okay and now we have two records of
12:21 - the student student with uh student ID 1
12:26 - and student with student ID 2 so
12:29 - logically we have two record for
12:31 - students right run the program and now
12:35 - it so says ID is equal to 1 name John
12:39 - percentage 70 something ID is equal to
12:42 - two name Mark percent uh 90.1 point
12:46 - something right so in this way you can
12:50 - uh
12:50 - Define as many instances of this
12:53 - structure as you want and you can uh you
12:56 - know create uh
12:59 - uh record for the
13:02 - student or so this is one way of using
13:07 - structure there's one more way of using
13:10 - structure uh in C and this is by
13:15 - directly giving the name to your student
13:19 - uh structure for example I can just
13:23 - delete this line from
13:25 - here and instead of giving giving the
13:29 - name to this uh uh student variable here
13:34 - I can just give the name at the
13:38 - Declaration of this student structure
13:40 - for
13:42 - example
13:46 - record right and then this record will
13:50 - be my variable name okay so the student
13:55 - is the structure and record will be the
13:58 - variable able name of your uh structure
14:01 - okay and then you can use this record to
14:06 - uh uh you know access the value or
14:09 - assign the values to this record for
14:12 - example here you can just replace
14:15 - record like
14:17 - this and it will work like same so you
14:19 - don't need to declare this record inside
14:23 - your main this can be also declared like
14:26 - this and this will be your variable name
14:28 - and you don't need to declare inside
14:30 - your main and when you run the program
14:32 - it'll run fine it'll give you the output
14:36 - so in this way you can use structures in
14:41 - C and uh try uh you know using
14:45 - structures uh by yourself and try
14:48 - practicing uh using structures and you
14:51 - will be good to go so I hope you have
14:53 - enjoyed this video please wait comment
14:55 - and subscribe and bye for now