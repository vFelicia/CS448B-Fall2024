00:00 - hello guys welcome to this course on
00:02 - introduction to threads in Java now what
00:06 - are the objective of this course the
00:08 - first objective is to give you the
00:10 - overview of threads in Java and this
00:14 - video is all about that in the next
00:17 - video we will see how to create our
00:20 - first application which uses threads and
00:23 - we will get familiar with the Java
00:27 - thread syntax and API and when we have
00:31 - the knowledge of how to create threads
00:34 - in Java we will move to little advanced
00:38 - topics in Java threads like
00:40 - multi-threading synchronization or
00:43 - thread rules and some of the advanced
00:46 - topics now first of all we need to know
00:50 - the difference between multitasking and
00:55 - multi-threading now what is multitasking
01:00 - multitasking refers to the computer's
01:03 - ability to perform multiple jobs
01:06 - concurrently and one of the examples you
01:11 - can say is your UNIX system or your
01:14 - operating system itself so for example
01:18 - your computer can run different
01:22 - processes like you open Google Chrome
01:25 - you open PDF viewer or you open some
01:29 - presentation you want to see a video in
01:32 - some media player so these are all
01:35 - different processes and the ability of
01:39 - your computer to handle these different
01:42 - processes or different tasks is called
01:45 - multitasking right now on the other hand
01:49 - a thread is a single sequence of
01:52 - execution within a program and we will
01:56 - see what this means in the later slides
01:59 - but I will give you an example of thread
02:02 - for example your computer is running
02:06 - some browser for example Google Chrome
02:08 - and this is considered to be a process
02:12 - so Google Chrome is a program
02:14 - right now whenever you want to open
02:17 - multiple tabs these tabs are working in
02:21 - parallel right and to achieve that you
02:25 - can say these tabs are working on the
02:28 - treads right so a thread is a single
02:32 - sequence of execution in a program so
02:35 - you can say different tabs in your
02:38 - browser are different threads and your
02:42 - browser itself is a program so
02:46 - multi-threading refers to multiple
02:48 - threads of control within a single
02:51 - program for example multiple tabs and
02:53 - each program can run multiple threads of
02:57 - control within it as I have given you an
03:00 - example of this browser now what is the
03:04 - difference between concurrency and
03:07 - parallelism now consider you have one
03:12 - CPU in your computer and you want to run
03:16 - two processes
03:17 - now how your CPU manages this is using
03:24 - concurrency so your CPU allocates the
03:28 - priority to the processes and whichever
03:31 - process have the more priority at the
03:35 - given time of interval it is executed
03:38 - first so whenever your CPU have some you
03:43 - know time to execute the second program
03:46 - and it has the priority it runs the
03:49 - second then the first then the second so
03:51 - it utilized the full capacity of your
03:54 - CPU now in the other case for example
03:58 - you have two CPUs and you want to run
04:01 - two processes you can run one process on
04:05 - a single CPU right so process one on CPU
04:09 - one and process two one CPU two and
04:12 - these processors are independent of each
04:15 - other so this in this case we can say
04:19 - this is parallelism and this is
04:22 - concurrency right now
04:27 - two terms one is process and one is
04:31 - thread and what is the difference
04:33 - between threads and processes
04:35 - once again I give you the example of the
04:39 - CPU so you have single CPU and as I have
04:43 - given you an example in earlier slides
04:45 - your CPU can run different processes for
04:48 - example process one is your PDF view or
04:53 - some kind of PDF your process
04:56 - two is your media player process three
04:59 - is your browser for example google
05:01 - chrome process for is some kind of
05:04 - presentation is running on it right so
05:07 - these are different processes running on
05:10 - it so what is a process and executing
05:14 - instance of a program is called process
05:17 - so process one process to process three
05:19 - and process four so these are the
05:22 - executing instances of a program now a
05:26 - thread is a subset of a process so for
05:30 - example we take the process 3 which is
05:34 - running Google Chrome and this process
05:39 - can run different threads for example
05:42 - different tabs are running on the basis
05:45 - of different threads right so a single
05:49 - process for example google chrome is
05:52 - running different tabs for example
05:55 - different threads right so a thread is a
05:58 - subset of a process now threads shares
06:03 - the address space of the process that
06:07 - created it so processes have its own
06:11 - address space so this process have its
06:14 - own address space this process have its
06:17 - own address space and other processes
06:19 - also have their own address space but
06:23 - multiple threads share the address space
06:27 - of a process so different threads in
06:31 - this process will share the address
06:33 - space of this process right so this is
06:39 - the difference between processes
06:41 - and threads now there are threads good
06:46 - for so there are different situation in
06:49 - which threads are good so first of all
06:54 - to maintain the responsiveness of the
06:56 - application during a long-running task
06:59 - so for example you write a program which
07:03 - collects some data from some device and
07:06 - you want to give this data on the basis
07:10 - of requests from client for example
07:12 - right so you want to collect the data in
07:16 - parallel with the catering of the
07:19 - clients request so in this situation you
07:25 - can use threads right second is to
07:28 - enable the cancellation of separable
07:31 - tasks for example you are collecting
07:34 - data with two devices and you no longer
07:37 - want the data from one device so you
07:40 - want to cancel this task right but you
07:42 - don't want to you know cancel the task
07:45 - which is collecting the data from the
07:48 - first device right so you can cancel
07:51 - this thread using you know some piece of
07:55 - program or code right now the next is
07:59 - some problems are inherently parallel so
08:04 - you cannot do anything about this for
08:07 - example I have given you the example of
08:09 - tabs right you want to run two tabs or
08:15 - two videos in two different tabs of your
08:18 - browser and both are running in parallel
08:22 - so how will your browser handle this you
08:24 - it can create a thread for that right
08:28 - next is to monitor the status of some
08:31 - resource for example your database or
08:35 - some API is and system demands it like
08:39 - your swing applications in Java demands
08:43 - it right so these are the situation in
08:47 - which you can use threads now what is an
08:52 - application thread so as we all know
08:55 - that whenever our Java program is
08:58 - created its run on the JVM which is Java
09:03 - Virtual Machine right so whenever we
09:06 - execute a java application the JVM which
09:12 - is Java Virtual Machine creates a thread
09:14 - object whose task is to define a main
09:18 - method and it starts the thread as we
09:23 - all know every Java program has at least
09:26 - one main program and only one main
09:29 - program so whenever you create or
09:32 - whenever you execute this program your
09:36 - JVM creates the threads whose task is to
09:39 - define this mean method right now the
09:44 - thread executes the statements of the
09:47 - program one by one until the method
09:50 - returns or this thread dies right now in
09:56 - the last how we can create multiple
10:00 - threads in our program so each thread
10:04 - has its private runtime stack and if two
10:09 - threads execute the same method each
10:13 - will have its own copy of local variable
10:17 - the method uses however all threads see
10:21 - the same dynamic memory okay so two
10:26 - different threads can act on the same
10:29 - object and the same static field corn
10:32 - currently now how we can create the
10:37 - threads in Java this we will see in the
10:40 - next video programmatically how we can
10:42 - create the Java threads by writing some
10:46 - program right but basically there are
10:50 - two ways to create our own thread object
10:55 - one is sub classing from the thread
10:59 - class so there is a thread class in Java
11:03 - and then instantiating the new object
11:08 - of this class okay so sub classing from
11:11 - a class called thread and we will
11:14 - instantiate a new object of this class
11:16 - and then we can create the thread or
11:19 - otherwise there is an interface called
11:22 - runnable so implementing this runnable
11:26 - in interface will create a thread also
11:30 - but in both cases we need to call this
11:33 - method call run which should be
11:37 - implemented right so this run should be
11:40 - implemented in both cases and this is
11:44 - what we are going to see in the next
11:46 - video how we can create our first
11:49 - program using threads so that's it for
11:52 - this video I hope you will see the next
11:54 - video also so please rate comment and
11:56 - subscribe and bye for now