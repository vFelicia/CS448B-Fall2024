00:00 - hello guys welcome to the first video
00:02 - tutorial on Python programming for
00:04 - beginners and in this video I'm going to
00:06 - give you a introduction to Python and
00:10 - how you can download and install python
00:12 - on your Windows operating system so
00:15 - let's get started so python is widely
00:19 - used general purpose high level language
00:23 - and it's design philosophy emphasizes
00:26 - code
00:27 - readability and it's uh Tex allows
00:30 - programmers to express Concept in fewer
00:34 - lines of code than would be possible in
00:38 - language such as C so let me give you a
00:43 - little overview of python first so
00:48 - python is a scripting
00:51 - language and it includes objectoriented
00:55 - uh Concepts also and it's a portable and
00:58 - very powerful langage language and it's
01:02 - often called a programming language for
01:06 - beginners because it's really easy to
01:08 - Learn Python and it's really easy to
01:12 - implement if you have little codes or a
01:15 - little concept that you want to
01:17 - implement very fast you can use Python
01:20 - to implement them and it has mixed
01:24 - features like uh programming languages
01:26 - like Java and pearl screen
01:30 - streams and what are the uses of python
01:35 - uh it can be used to make system
01:38 - utilties that can be used to make guies
01:42 - guis stands for uh graphical user
01:46 - interface and there are some idees which
01:49 - you can use or which there are some
01:52 - platform which you can use uh to create
01:55 - GUI
01:56 - so this these are some of the um
02:00 - platform on which you can make GUI
02:03 - application for example QT uh platform
02:08 - or Windows platform or gtk platform you
02:12 - can make interactive guies using python
02:16 - you can also uh use Python to make
02:20 - internet scripting uh as a internet
02:24 - scripting language and you can also use
02:28 - python as a embedded scripting language
02:30 - even you can use python as a database
02:34 - programming language artificial
02:36 - intelligence and image processing so
02:39 - there are widely used uh you know
02:43 - implementations of python and you can
02:45 - use python in many uh you know many
02:49 - fields so it's very good idea to Learn
02:53 - Python and it's really easy to uh Learn
02:56 - Python that's why you can uh you know
02:59 - you know Learn Python uh if you are a
03:02 - beginner in programming okay so let's uh
03:07 - see how we can install python on our
03:10 - Windows operating system so just open
03:13 - your favorite uh browser and search for
03:17 - Python and the first link here you will
03:19 - find is uh
03:23 - www.python.org
03:24 - this is the official website of python
03:28 - just click here
03:31 - and in here you will be able to see uh
03:34 - the overview of python by
03:37 - browsing uh these tabs but the tab we
03:42 - are interested in right now is this
03:44 - download
03:46 - tab and in here there are two versions
03:50 - one is the very latest version and one
03:53 - was uh little bit slightly older version
03:57 - but very stable version also what we are
03:59 - going to do is we are going to download
04:02 - this latest version so I'm going to just
04:06 - click this download button and it'll
04:09 - download this python 3.4.1 at the time
04:13 - of making this video this is the latest
04:16 - version uh and once this um download is
04:20 - complete we will be able to install
04:23 - python on our system so now download is
04:26 - complete I will just run this
04:32 - and it's preparing to install
04:36 - and this is the first option or first
04:39 - wizard python set of wizard you will be
04:42 - able to see and for now I just want to
04:46 - uh use install for all users and I will
04:49 - click
04:50 - next and in here this is the default
04:54 - location where python will be installed
04:57 - and this is the name of the folder
04:59 - because it's three uh version 3.4 so the
05:02 - folder name will be python 34 okay just
05:06 - click
05:08 - next and
05:10 - then uh these are all the utilities
05:14 - which will be
05:15 - installed uh if you want to customize
05:17 - you can customize it but I will leave
05:19 - them as default and I will click
05:23 - next and this installation will start
05:27 - and it's saying that it will take
05:28 - several minutes to install python so you
05:31 - need to wait until it's uh process is
05:35 - going on and once the process
05:38 - completes I will uh go through the next
05:41 - steps so let's wait for some time and I
05:44 - will pause the video for
05:46 - now so while this process is going on I
05:51 - will give you brief uh uh of compilation
05:56 - and uh how this Python language uh
06:00 - interprets or compile itself okay
06:05 - so if you have learned any other
06:09 - languages like C C++ or Java uh you know
06:13 - that this language is a compile you know
06:18 - first you need to compile this uh file
06:22 - like Java or some other uh program and
06:25 - then once you compile your program it
06:28 - will uh produce use a executable file
06:32 - and then you can run this executable
06:34 - file and you will be able to see this
06:36 - kind kind of a result but python is a
06:41 - interpreted language that means you
06:44 - don't need to compile your Python
06:48 - program because it's a interpreted
06:50 - language it'll directly you or you will
06:54 - be able to run directly your program and
06:56 - it is a runtime compilation it will do
07:00 - so if if any error
07:02 - occurs you will be able to uh see them
07:05 - only at run time okay so there is no
07:09 - need to compile or there is no feature
07:12 - to compile uh your code in Python it
07:16 - will just execute your program
07:19 - directly so this is the little
07:21 - difference between the programming
07:24 - languages like Java C or
07:27 - C++ uh that in those languages you need
07:32 - to compile your program but in Python
07:35 - instead it's a interpreted language so
07:39 - you don't need to compile this it will
07:41 - be uh executed at
07:44 - runtime okay
07:47 - now our uh installation is finished so I
07:50 - will just click
07:55 - finish now once your installation is
07:58 - complete you will be able to go to your
08:00 - start menu here and you will be able to
08:03 - see python in these options otherwise
08:07 - you can go to all programs and in here
08:10 - you will be able to see Python and
08:13 - whatever version you have downloaded for
08:15 - python so I can see this folder called
08:18 - python do python space 3.4 which is a
08:22 - version for python I have installed and
08:25 - when I click this folder I can see uh
08:28 - few uh files here so there is something
08:33 - called python command
08:35 - line and I will click this first python
08:38 - command line first and this is a command
08:41 - line uh Tool uh which you can use to
08:45 - execute your python uh scripting langu
08:48 - or python programs right so for example
08:52 - I want to execute something here uh what
08:56 - I can do I can just print something
08:59 - thing so I will write
09:03 - print and in the
09:05 - brackets in the earlier version before
09:08 - three uh or uh before version three uh
09:11 - you don't need to give these uh brackets
09:14 - to execute your uh message but after
09:18 - version three you need to use these uh
09:21 - brackets in order to uh uh print your
09:24 - message like using print function so
09:28 - print is a built-in function to print
09:30 - your uh string or whatever you uh write
09:34 - in these brackets so I will just use
09:37 - double quotes and I will write
09:42 - hello hello world and when I press enter
09:46 - it will give me hello world right so
09:50 - there are something you will notice when
09:53 - I have printed hello world
09:56 - that first you don't need any semicolon
10:00 - or any ending uh uh ending um
10:04 - declaration in Python so if you have or
10:08 - if you are used to some uh languages
10:10 - like C C++ or Java you know uh that you
10:15 - need to end your line uh using
10:19 - semicolons right but in in your Python
10:23 - program you don't need to use semicolons
10:26 - here and the other thing I have already
10:29 - told you that you don't need to uh
10:32 - compile your program you just hit enter
10:35 - and it will run your program
10:38 - right so this is a command line tool the
10:43 - same functionality you can
10:47 - use a GUI tool also uh to write the
10:51 - program so if you uh want to develop
10:54 - your uh program using command line you
10:57 - can use this python command line I will
11:00 - just close it for now and I can even use
11:03 - or python even provides a GUI which is
11:07 - called
11:08 - idle to program uh python so I will just
11:13 - go to this folder once again and I will
11:16 - click this idle python
11:19 - GUI and it will open the same shell
11:23 - command but it's more interactive and
11:27 - you will be able to see the same
11:30 - uh same uh command line structure here
11:35 - now for starting because I think these
11:39 - fonts are a little bit smaller so I can
11:42 - make them bigger by going into the
11:46 - option configure idle and in here I can
11:49 - change the font size of uh my
11:55 - shell right so for example I want to
11:58 - increase it to 16 so that I can see
12:03 - better and you can also see better let's
12:07 - make it um 18 even so you will be able
12:11 - to see more
12:12 - better okay so once this is
12:16 - done uh in here also you can just write
12:20 - [Music]
12:22 - print and in the brackets you can just
12:25 - give your message for
12:28 - example
12:30 - hello world and whenever I have uh or
12:35 - when I write this you will be able to
12:37 - see different colors for different uh
12:41 - you know structure so because print is a
12:44 - function it will be uh highlighted in
12:47 - different color and hello world is a
12:50 - string so it will be uh highlighted in
12:53 - green color for example so this uh in
12:56 - this way you can read the program uh in
12:59 - a better way and this is why we
13:03 - generally use this python GOI or which
13:06 - is called idle to program okay and I
13:10 - press enter and it gives me once again
13:14 - the result hello world
13:21 - right hello guys welcome to the second
13:23 - video tutorial on Python programming for
13:26 - beginners in the last video I have given
13:28 - you new introduction to Python and I
13:31 - have shown you how you can install
13:33 - python on your Windows operating system
13:36 - and uh I have given you a little example
13:38 - how you can use this python IDE called
13:42 - idle for the first time okay so in this
13:47 - video I'm going to continue and I'm
13:49 - going to show you how you can use
13:51 - numbers and a math in Python so if uh
13:58 - you are are familiar with this last time
14:02 - I have shown you how to open this by
14:04 - shell right if you don't know uh how to
14:08 - open this shell once again I'm going to
14:10 - tell you you just need to go to your
14:12 - start menu and just go to python folder
14:16 - and just start this idle python guy from
14:19 - here and it will open uh this kind of
14:23 - buy shell or python shell here now let's
14:26 - get started and let's see how we can
14:29 - uh math in
14:32 - Python so uh like simple mathematics
14:36 - python can also do the Maths for you so
14:40 - for example you want to add 5 + 98 will
14:45 - give you the answer one3 you want you
14:48 - can even
14:50 - add minus values so
14:54 - minus
14:56 - 34 Plus
14:59 - four for example and will give you the
15:01 - answer 30 okay in the same way you can
15:05 - do the
15:07 - subtraction
15:08 - 56
15:10 - minus 34 it will give you the answer and
15:13 - it will also uh give you the negative
15:17 - value to provide the value such as for
15:21 - example 34 minus 56 will give you the
15:25 - negative value okay now for division
15:29 - uh what you can do uh you can just write
15:34 - uh for example 21 divided by so this is
15:39 - the symbol we use for divisions which is
15:42 - slash for example 27 uh 21 by 7 is three
15:47 - which gives you the answer and if you
15:50 - want to divide the number and get some
15:54 - decimal values for example 23 divided by
15:58 - 7 will give you 3.28 something right so
16:03 - this will also give you decimal values
16:06 - now for example you don't want uh this
16:11 - these decimal values after the division
16:13 - you just want to uh see the whole value
16:17 - or the integer what you can do you can
16:20 - just write 23 double slash 7 and this
16:25 - will give you the whole number which is
16:27 - three okay you can even so this this
16:32 - number is a integer and what is an
16:34 - integer integer is the whole number
16:37 - right you can even use decimal values
16:40 - which are called float in programming
16:43 - float values are values which have some
16:45 - decimal points for example
16:48 - 57.
16:50 - 2345 or whatever divide
16:54 - by 3.
16:57 - 22222 okay press enter and we give you
17:00 - an answer so you can even divide decimal
17:03 - values like this okay and remember this
17:07 - whenever you want to get the whole
17:09 - number just do double
17:12 - slashes now for
17:15 - multiplication multiplication is also
17:17 - simple for example you want to multiply
17:19 - two number 56 multiply so for
17:22 - multiplication you use this ASX symbol
17:26 - or star symbol simply so this star
17:29 - symbol or stic symbol will be used as a
17:32 - multiplication symbol okay so 56
17:36 - multiplied by four is 224 so you can use
17:40 - multiplication like
17:42 - this okay now for example you want to
17:46 - get the F exponent of some number what
17:49 - in what is an exponent exponent is
17:52 - something like for example two exponent
17:56 - 3 is 2 multiply by 2 * 2 okay so 2 into
18:02 - 2 into 2 this is the exponent so you can
18:07 - do it like this and it will give you the
18:09 - answer but if you want the exponent for
18:13 - example 2 to the power 15 how we can do
18:17 - you can do something like this two
18:20 - multiplied by two multi mly this by two
18:23 - MTI by two multip by two 15 times and
18:27 - this will be ly right
18:29 - so the simple way to find the exponent
18:31 - is use double asri or double stars and
18:36 - then the power so 2 to the^ 15 is 3 27
18:42 - 68 okay or 2 to the power 5 is 32 so
18:49 - this double star or double s you can use
18:53 - to get the power or exponent of your
18:58 - numbers
18:59 - okay now you may be wondering what may
19:03 - be the order of uh your operations which
19:07 - operation will take place when you have
19:10 - multiple multiple operation at the same
19:13 - time for example I want to
19:16 - do three multiply it by
19:21 - four
19:23 - plus
19:25 - 5
19:27 - minus uh
19:30 - six and then divided
19:33 - by one or not one but two for example so
19:38 - what will be the order will three into
19:42 - four will happen first or 4 + 5 will
19:46 - happen 4 + 5 will happen first or 5 - 6
19:51 - will happen first or what is what will
19:53 - be the priority okay or what will be the
19:56 - order of this operation
19:59 - so uh like simple mathematics uh if you
20:04 - remember when you are in school and or
20:08 - if you are in school still you know this
20:11 - uh basic formula called
20:14 - p m b a
20:17 - s okay so this is the
20:20 - order in which your operations will take
20:23 - place and this pieace time for
20:27 - parenthesis e stands for exponents m
20:31 - stands for multiplication d stands for
20:33 - division a stands for addition and S
20:37 - stands for subtraction okay and the way
20:40 - you remember this is you can just uh
20:44 - abbreviate it as please excuse my dear
20:47 - on sell if you want to remember this
20:51 - order okay and so this will be the uh
20:56 - priority or this will be the order of
20:58 - your operation so if you want to
21:01 - prioritize something en close that those
21:05 - operation in the parentheses so you want
21:08 - to do three
21:10 - plus four and then
21:14 - multiplication or you want to multiply
21:17 - by uh five then the priority of this
21:21 - addition is uh the most important or or
21:25 - this will happen first because this
21:27 - operation is closed in parenthesis and
21:30 - then this will happen
21:34 - Okay and then the the uh order will be
21:40 - like P MB a s if you can remember so for
21:45 - example I want to do something like this
21:48 - divide
21:50 - by um 6 -
21:54 - 2 then the parenthesis priority will be
21:58 - first and then the multiplication and
22:02 - then the division and if you have some
22:05 - subtraction then this will happen at the
22:08 - last
22:12 - okay hello guys welcome to the third
22:15 - video tutorial on Python programming for
22:17 - beginners and in this video I'm going to
22:19 - show you how to use variables in Python
22:24 - so I'm assuming that you don't have any
22:28 - prior programming knowledge so uh I'm
22:32 - going to uh tell you the basics of
22:34 - variables first so basically what is a
22:38 - variable variable is a container for
22:43 - some value this value can be an integer
22:47 - this value can be a string of words this
22:50 - value can be a float value or different
22:53 - kind of values so what is a variable
22:57 - variable is container for the values so
23:02 - for
23:03 - example how you can declare variable in
23:07 - Python first of all you need to give a
23:10 - name of the variable so for example I
23:13 - can declare a name of a variable like
23:18 - my
23:20 - variable is equal to and this is equal
23:23 - to sign you use between the value and
23:26 - the name of the variable okay okay so
23:30 - this is the name of the variable is
23:32 - equal to you can assign some value to
23:34 - the variable for example 30 now my
23:38 - variable has the value of 30 so my
23:43 - variable is a container for the value 30
23:46 - right and generally it's the convention
23:50 - that whenever you use or declare a
23:52 - variable it's not necessary but it's a
23:55 - good programming habit that you uh
23:58 - separate your uh variable name if you
24:03 - have uh something like my variable the
24:07 - first word of your variable name starts
24:10 - from small letter and then the second
24:13 - word first letter starts from big or a
24:17 - capital case and the other letters are
24:20 - small
24:22 - and this way it will work like for
24:25 - example I want to give the variable name
24:27 - is equal my variable name it will be
24:31 - like this okay so it's like camel case
24:36 - it's called a camel case uh declaration
24:39 - so start with small letter and then the
24:44 - second letter uh second word first
24:46 - letter is the capital third word first
24:50 - letter is the capital just like this
24:52 - okay so just follow the convention like
24:55 - this it's not necessary but it's good
24:58 - now when I press enter now my variable
25:01 - has the value of 30 so once again when I
25:06 - uh call
25:07 - [Music]
25:09 - my variable and press enter it gives me
25:13 - 30 because my variable is equal to 13
25:16 - now now python is a case sensitive
25:20 - language so if you write my with a
25:24 - capital m
25:30 - variable and press enter it will give
25:33 - you an error because this variable name
25:37 - is different from this variable name
25:40 - because this is case sensitive so just
25:43 - remember
25:45 - this okay so these are the two things
25:50 - now why we exactly use variable in any
25:56 - programming language so variables are
26:00 - generally used uh whenever you don't
26:04 - know what values you are going to deal
26:07 - with so for example you are going to
26:10 - deal with uh some values which are
26:14 - inputed by the users now first of all uh
26:19 - this variable you can use it as for
26:22 - example for adding something so I can
26:25 - just
26:26 - call my
26:31 - variable
26:33 - plus so plus 34 and it will give me the
26:37 - result uh yeah this is you see I haven't
26:42 - spelled this my variable correct so it
26:44 - gives me an error okay so
26:48 - my
26:50 - variable plus 34 and it gives me 64 okay
26:56 - so now you can perform math operation
26:58 - using this variable also okay now the
27:02 - real use of this variable you can uh you
27:06 - can perform every math operation on this
27:08 - variable because it has some value which
27:12 - is an integer right so you can do a
27:16 - variable to the power or
27:20 - exponent uh three it give the answer and
27:24 - in the same way it will give you an
27:25 - answer for every uh MTH operation now
27:29 - the real use let's see some use for
27:33 - variable so for example I declare a
27:36 - variable
27:38 - called
27:41 - uh
27:43 - value okay and this value is equal to
27:47 - whatever user inputs from uh the user uh
27:53 - input okay so how you can provide a user
27:56 - input in Python you just use a inbuilt
27:59 - function called
28:02 - input so this is a inbuilt function in
28:05 - uh uh python which will allow you to
28:09 - enter any value so you can just
28:13 - write enter the
28:16 - value but there is a problem with this
28:21 - that this input whatever user enters
28:24 - will be a string okay
28:28 - so let me give you an example when I
28:31 - press enter now it give me the prompt
28:34 - that enter the value and I can enter any
28:37 - value for example 15 and press enter and
28:41 - now this value which is a variable value
28:46 - has the value of 50 so whenever I call
28:50 - Value it has the value of 50 but notice
28:53 - this value is a string it's uh between D
28:57 - this single codes so whenever I want to
29:02 - uh perform some addition so Value Plus
29:06 - something 20 it'll give me an error see
29:10 - it give me an error why it's giving me
29:12 - an error because this value which is 50
29:17 - is a string because whenever we use
29:20 - input function to input value it takes
29:23 - this value as a string okay and whenever
29:27 - you see something thing in single code
29:29 - that means it's a string whenever you
29:32 - have the single quotes around your value
29:35 - it's a string okay now in order to
29:37 - convert your uh string to an integer you
29:41 - can cast uh the string so I'm going to
29:45 - just copy this just you can just copy
29:47 - this and paste it here and in order to
29:51 - cast this value to an integer what you
29:54 - do just go before your or input so value
29:59 - is equal to just write int so this is
30:02 - type casting of string to the
30:05 - integer okay and just close it from here
30:10 - okay so when you do this this uh will be
30:15 - your string so uh input will be taken as
30:18 - a string and this int will convert your
30:22 - string to the integer okay and now when
30:27 - you press enter and you give some value
30:29 - for example 60 value is equal to 60
30:33 - and now you call
30:36 - Value not well
30:39 - but value it has the value of 60 and
30:43 - notice that earlier this 50 is uh
30:47 - enclosed in single gos but this time
30:49 - it's not enclosed in single goes that
30:51 - means it's a number right now I can
30:55 - perform some math operation on this like
30:58 - like
30:58 - this Value
31:01 - Plus uh
31:04 - 50 * by 60 something it will not give me
31:09 - an error this time so always remember
31:12 - whenever you want an integer as a input
31:15 - you need to cast this into the integer
31:19 - and Casting means to convert your string
31:24 - to the integer you can cast this to the
31:27 - flo Val value
31:29 - like this for example you can just copy
31:33 - this once again paste it here and you
31:36 - can cast this like
31:40 - uh float so float is a decimal point
31:45 - value okay so you can cast your value as
31:48 - a float and now when you enter you can
31:51 - just try
31:52 - 50. 134 whatever and then call Value
31:58 - it has the value of 50 points whatever
32:02 - okay
32:04 - so variables are useful whenever you
32:08 - don't know what values you are going to
32:10 - deal with
32:17 - okay hello guys in this video I'm going
32:19 - to show you how to use buil-in modules
32:22 - and functions in Python so if you have
32:27 - remembered that in the previous videos I
32:31 - have shown you how to calculate the
32:35 - exponent of some values so for example I
32:38 - want 2 to the power three I can use two
32:42 - and then these two estx and then I can
32:45 - write three and this means two to the
32:47 - exponent three and it gives me the value
32:50 - of eight okay but there is a easier way
32:55 - of doing the same thing and and this is
32:58 - by using a buil-in functions which are
33:01 - provided by python so what uh is a
33:05 - function first of all if you are new to
33:08 - programming a function is a piece of
33:12 - code which execute some function or some
33:17 - logic okay so a function is a piece of
33:20 - code which executes some logic so for
33:23 - example you want to calculate the
33:25 - exponent of two
33:28 - like this you can do it like this or you
33:30 - can use a buil-in function which execute
33:33 - a exponent function right so you can
33:38 - use p w which is power and this uh
33:45 - function takes two arguments first is
33:49 - the value which is two and then the
33:51 - exponent which is three or this means 2
33:55 - to the^ 3 and it also gives you the
33:59 - value
34:01 - uh8 which is same and it's more easier
34:04 - to use uh this and it's more easier to
34:07 - understand this expression rather than
34:10 - this because it's more descriptive right
34:14 - now how do you know that what are the
34:18 - buil-in function in Python okay so if
34:23 - you don't know what are the built-in
34:25 - function there is a command to know what
34:28 - are all buil-in functions in Python and
34:33 - what is this command this command is you
34:36 - just need to write
34:37 - D and then get these two brackets and
34:41 - these two brackets just
34:43 - write double
34:46 - underscore and then just
34:48 - write build ins and then double un
34:53 - underscore once again and you just need
34:55 - to give this command
34:58 - and what this command just press enter
35:00 - and what this command will return this
35:03 - command will return all the built-in
35:05 - function which you can use in Python
35:08 - okay so for example I was using p which
35:11 - is a power function and you can find
35:15 - this P function here okay this is the
35:19 - power function so you can see you can
35:22 - calculate hacks there is a
35:25 - function called abs to calculate
35:28 - absolute value so for example I want to
35:30 - calculate I will use Ab s and I will
35:36 - write uh
35:37 - 18.
35:39 - 666 and press enter it gives me the
35:44 - absolute value of
35:46 - ABS uh this should be little bit
35:49 - different I think it should be like
35:54 - this and okay so it's giv me the
35:58 - absolute value of U the number okay or
36:04 - you can uh use this print to print
36:07 - something or you can find this Len
36:11 - function to find the length of a string
36:13 - so I can use Ln and give some strings
36:19 - for example I can
36:21 - write hello which is uh five letter
36:26 - strings one
36:28 - 2 3 4 five right and this length will
36:32 - return the length of this word which
36:34 - gives five
36:36 - right so uh and there are some other
36:40 - useful functions like minimum maximum
36:45 - slice so these are all the built-in
36:48 - functions in uh python
36:53 - now once you know the function that okay
36:55 - this function exist here
36:58 - now how you can know that uh what is the
37:02 - functionality of this function right so
37:05 - to know the functionality of the
37:07 - function what you need to
37:10 - do you can use a built-in function
37:13 - called help this help okay so for
37:17 - example you want to know what this uh
37:20 - function
37:22 - called Max does okay so what you can do
37:26 - you can just write
37:28 - help and then in the brackets you can
37:31 - just write the name of the function for
37:33 - example you want to know what this
37:35 - function Max does we just write help and
37:37 - in the bracket just write Max okay and
37:41 - press enter and this Max you can see
37:45 - here so this help is that uh this Max is
37:50 - a function which can takes uh more than
37:54 - one argument multiple arguments and it
37:57 - gives the I think maximum value of those
38:01 - uh uh arguments right
38:04 - so you can see it with a single iterable
38:09 - argument returns its largest item okay
38:13 - so now I know that when I use a function
38:17 - called Max and I can give multiple
38:21 - argument uh 4 comma 2 comma 1 comma 5
38:26 - comma
38:28 - eight and when I press enter it gives me
38:31 - the maximum value which is eight right
38:34 - so in this way you can use this help
38:37 - function to find out what these other
38:41 - built-in function uh does or what is the
38:45 - use of these builtin functions right now
38:49 - this is about the uh function buil-in
38:54 - function now there is something called
38:56 - buil-in modu
38:57 - modules okay and these built-in modules
39:01 - are the extra modules which contains
39:04 - extra functions or extra functionalities
39:08 - which you can use whenever you use or
39:12 - whenever you include these modules so
39:15 - for
39:16 - example uh you want to know uh or you
39:21 - want to calculate the square root of
39:24 - some value so there is a module called
39:29 - so for example you want to um know the
39:32 - square root of something so there is a
39:35 - module called math you can use it for
39:39 - this so to include a module you need to
39:43 - import this module and how you can
39:45 - import just
39:47 - write import and this is the keyword to
39:49 - include a module and then the name of
39:52 - the module which is for example math in
39:56 - our case and when you press enter now
39:59 - you have included this module now how
40:02 - you can use the function inside this
40:04 - module you can just uh you write the
40:08 - name of this module which is math Dot
40:13 - and then you can use all them you can
40:16 - see there are different options uh which
40:20 - you can use with this module called math
40:23 - you can see here right so whenever you
40:28 - right dot it will give you some options
40:31 - you can see and this options you can
40:35 - scroll it by um up and down Keys okay so
40:41 - this math module has this much amount of
40:45 - built-in functions right you can scroll
40:47 - up or scroll down and what function I'm
40:50 - you I'm want to use I want to search for
40:53 - square root so there is a square root
40:57 - yeah okay so I can use square
41:00 - root uh I have pressed enter so uh this
41:05 - give
41:06 - me uh some value so once again
41:11 - math.sqrt
41:13 - and then I can find the square root of
41:16 - any number for example I want to find
41:18 - the square root of nine will will give
41:20 - me the answer three so in this way there
41:23 - are some built-in module also and this
41:26 - these will module also have some
41:28 - function buil-in functions and you can
41:31 - import these built-in module using a
41:34 - keyword import and the name of the
41:35 - module and then you can use these
41:38 - modules like the name of the module and
41:41 - the functions which it
41:43 - contains now sometimes these uh modules
41:48 - uh are you know uh hard to uh you know
41:53 - spell or write so what you can do you
41:56 - can Define your own variable for these
41:59 - module names for example I can declare a
42:03 - variable
42:05 - called
42:07 - uh square
42:10 - root which is equal to this
42:15 - math.sqrt
42:17 - okay now whenever you use square root uh
42:23 - variable you can perform the same
42:26 - functionality for example I want to find
42:29 - out the square root of 9 it will give me
42:31 - three so you can replace these built-in
42:34 - functions in module by your variable
42:38 - using this equal to
42:40 - sign okay and now you have your own
42:42 - variable which can
42:44 - calculate the uh square root or any
42:47 - other
42:53 - function hello guys welcome to the fifth
42:55 - video tutorial on Python program
42:57 - programming for beginners and in this
42:58 - video I'm going to show you how you can
43:01 - save your program or how you can save
43:03 - your Python program to use this program
43:07 - in uh the future so for example U you
43:12 - want to save your Python program and run
43:14 - it uh uh whenever you need in future how
43:18 - you can do it I'm going to show you in
43:20 - this video so till now we were using
43:22 - this python shell and whatever code we
43:25 - uh write in this python shell it will
43:27 - execute this uh code very well but it's
43:31 - not able to save your program so
43:34 - whenever you just close this python
43:36 - shell your program is gone it's and it's
43:39 - not saved anywhere so let's try to make
43:44 - a new file or new python file so that we
43:48 - can use this python file whenever we
43:51 - need and we don't even need to worry
43:53 - about closing this shell okay so how you
43:57 - can do this is you just need to open
44:00 - this python shell you already know that
44:02 - you can just open this python Shell by
44:04 - going to your python folder and just
44:07 - open idle python GUI from here and this
44:10 - is that idle idle python guy which is a
44:13 - python shell so just open it and just go
44:17 - to file here and just click new
44:20 - file and this will open a new file and
44:23 - you can save this file as uh python file
44:26 - but first you need to write some code in
44:28 - here so I'm just giving you an example
44:31 - how you can make this python file and
44:33 - how you can run it so for example we
44:36 - want to calculate the maximum of three
44:39 - values what you can do here is uh you
44:43 - can calculate the maximum of three
44:46 - [Music]
44:48 - values like this so I have already shown
44:53 - you how you can uh take the input for by
44:57 - using this input function and how you
44:59 - can convert this input to an integer by
45:02 - just typ casting this uh string value
45:05 - which you get from the input to the
45:08 - integer and save it into a variable so
45:11 - in the same way we I have three valuable
45:14 - x y and Zed which are taking inputs from
45:17 - the user and what I'm going to do is I'm
45:20 - just simply calculating the maximum
45:23 - value of these three number which you
45:25 - have user has entered and I'm going to
45:28 - print this maximum so maximum I'm
45:31 - calculating this from a function called
45:33 - Max which I have shown you in the last
45:35 - video it can take any number of argument
45:38 - right now I have only three argument
45:41 - because I want to compare three numbers
45:43 - and calculate the maximum value so let's
45:46 - try to save this first so you just need
45:49 - to save this program in order to run it
45:51 - so you just need to go to file and just
45:54 - click save as and in here
45:57 - choose your path for the python file and
46:01 - just WR give the name of your python
46:03 - file or example test and make sure that
46:09 - this here save as type is python file
46:12 - here which is py file or pyw file and
46:17 - save your file and now once your file is
46:21 - saved you can just run it just go to
46:23 - this Run tab and you can just click this
46:26 - run module or F5 key okay so I'm going
46:31 - to run module and this will run my
46:34 - module like this so I'm going to give uh
46:37 - three numbers for example 22 second
46:40 - number 33 third number 44 and gives me
46:44 - the answer that maximum of these three
46:46 - values is 44 right I can uh do this uh
46:51 - in a better way that I can
46:55 - print something first that the result is
46:59 - or
47:01 - the max of
47:06 - three
47:10 - three values
47:13 - is and it depends upon you how you can
47:16 - run this is just an example okay so how
47:19 - you want to make your program you are
47:22 - free to make it and this is just an
47:25 - example how you can save your file
47:27 - but still uh it doesn't solve our
47:30 - purpose because it's uh running our code
47:34 - in the shell and we cannot you know uh
47:38 - always uh run our program and you we
47:42 - cannot open our python shell everywhere
47:46 - you know you want to run your python
47:48 - file as an executable file right you
47:51 - don't don't need to uh you know open
47:54 - this python shell every time you need to
47:56 - run your Python program and how you can
48:00 - run your program directly
48:04 - is you just need to go to the folder
48:07 - wherever you have uh saved your python
48:11 - file so I have saved my python file here
48:14 - but there is a little correction you
48:16 - need to make in this program and what is
48:20 - the correction because it's taking three
48:23 - inputs and it will take the three inputs
48:26 - and it's going to print this uh answer
48:30 - and just after uh you know uh giving you
48:34 - the answer or printing the answer it
48:36 - will instantly exit so what you need to
48:40 - do just need to give something so that
48:43 - it can stay so just write
48:47 - input and this is in put and in here you
48:53 - can just give a string that
48:58 - please
49:01 - press enter
49:04 - to exit and this will you know keep your
49:08 - screen on and until and unless you press
49:11 - enter it will not exit just save your
49:15 - program once again just go to file and
49:17 - save it and then go to the python file
49:21 - wherever you have saved your python file
49:24 - okay just go to the python file you can
49:26 - right click
49:28 - and you can
49:30 - open if you going to if you are going to
49:34 - open it it will open it in the python
49:38 - terminal and this will run your program
49:40 - directly you don't even need to use this
49:43 - python shell or what you can do you can
49:45 - just directly double click it and it
49:47 - will open your Python program and it
49:49 - will give you the option please enter
49:51 - first number I will enter first number
49:54 - 11 second number 43 third number
49:59 - 43 and when I press enter it'll give me
50:02 - the answer which is 43 the max of three
50:06 - values is 43 and now it will give me uh
50:11 - this option that
50:13 - press enter to exit and when I press
50:17 - enter or any other
50:20 - key I will exit from my python code okay
50:25 - so once again then you can save your
50:28 - python file by going to this uh uh file
50:31 - Tab and make a new file and just save
50:34 - your file once you have done uh writing
50:38 - your code you just need to save your
50:41 - file as a py file so you just need to go
50:43 - to uh file and save as and you just need
50:48 - to give a name to your file and make
50:50 - sure that it's a python uh file type
50:54 - okay and once your file is is uh ready
50:57 - you just need to or once your code is
50:59 - ready you just need to save it and once
51:02 - you have saved your file you just need
51:05 - to go to the file and run it if you have
51:09 - remembered I have shown you in the first
51:11 - video uh that python uh doesn't compile
51:17 - your program python directly runs your
51:20 - program so you don't need to compile
51:23 - your program it will run your program
51:26 - directly okay and if any error occurs in
51:30 - your program it'll give you the answer
51:34 - at the run time but and not at the
51:36 - compile time so this is why you can run
51:39 - your python file directly like this by
51:41 - double clicking
51:45 - okay hello guys welcome to the sixth
51:47 - video tutorial on Python programming for
51:50 - beginners and in this video I'm going to
51:52 - show you how you can use strings in your
51:55 - Python program
51:57 - efficiently so I think I have shown you
52:00 - uh in the earlier videos how to use
52:02 - strings uh very briefly but in this
52:05 - video I'm going to uh take this string
52:08 - in
52:09 - detail so I have this uh python file uh
52:14 - I have shown you uh in the last videos
52:16 - that how you can make python files and
52:19 - run them uh using this run Command right
52:24 - so I have this python file and I have
52:26 - have this python shell open so I'm going
52:28 - to write my code here and I will see the
52:32 - result in this shell okay so how to use
52:37 - strings in Python so there are three
52:41 - method or three ways you can use strings
52:45 - and I'm going to show you all three
52:47 - ways so consider this
52:50 - example we have three variables a b and
52:54 - c and all three of them I have assigned
52:58 - a string one
53:00 - string which is assigned to variable a
53:04 - uh is enclosed in single codes right the
53:09 - second string is enclosed in double
53:12 - codes right and the third string which
53:16 - is assigned to C is enclosed in three or
53:21 - triple codes and I'm going trying to
53:24 - print all three of them them one by one
53:27 - so I want to print a print B and print C
53:30 - and let's see what happens so first of
53:33 - all I'm going to save my program and
53:36 - then I will just run this module or
53:39 - press F5 to run
53:41 - it and when I press uh this run I will
53:45 - see the result here and the result will
53:49 - be the same so you can print the same
53:54 - string in three ways
53:57 - either you can use single quote or you
54:00 - can do or you can use uh double quotes
54:03 - or you can use triple Cotes to print the
54:07 - string and the result will always be
54:10 - same in
54:11 - Python now suppose you want to uh
54:17 - use for example this is a string
54:20 - enclosed in single code and you want to
54:22 - use some single code here so for for
54:26 - example I want to uh say uh I'm a single
54:31 - CED
54:33 - string
54:36 - and for example I want to use a word
54:39 - called um don't which also take a single
54:44 - code here this kind of single code and
54:48 - when I use the single
54:49 - code which uh with the string which is
54:52 - enclosed already in single code then
54:57 - what you your Python program will
54:59 - interpret is your string starts from
55:03 - here and your string ends here and this
55:06 - will be uh some alien to your python you
55:11 - know Python program
55:13 - because uh it will think that this
55:16 - single codes uh is start from here and
55:19 - ends here so this is a string and what
55:23 - is this it's not recognized by the
55:26 - python
55:27 - so whenever you want to use single code
55:30 - in the string which is already there
55:33 - inside the single code you can use a
55:37 - Escape character and what is the escape
55:40 - character in uh python Escape character
55:44 - in Python is backs slash so just use
55:47 - this back slash and now you can
55:51 - see that uh your back backs slash is
55:57 - hiding or it's saying python that we
56:00 - want to use single code inside the
56:04 - string okay and this is called Escape
56:07 - character so in the same way when you
56:11 - want to use double code in the string
56:14 - which is already there in the double
56:16 - quotes for example here I want to use
56:18 - double quote the same problem will come
56:21 - here your Python program will see that
56:24 - your string starts here and ends here
56:27 - and this will be not this will not be
56:30 - recognized by your Python program so
56:33 - here also you can use back slash to hide
56:36 - or to uh you know say python that we are
56:40 - using double quotes but it's the part of
56:43 - the string and it's not starting or
56:45 - ending of the string
56:48 - okay in a same manner you can uh you
56:51 - know use single code
56:54 - here and and you can use this back slash
56:59 - to uh show this backs slash or double
57:03 - quotes here now I will save my program I
57:06 - will just click control s and run it
57:10 - once again F5 and you can see the answer
57:15 - is like this so I'm a single quoted
57:19 - string and this single code is visible
57:21 - now here and uh just remember that this
57:25 - is just a Escape character so this will
57:28 - not be printed this will help your
57:31 - single code to print but this will not
57:33 - be printed in the same way you can see
57:36 - it's printing this uh double quote here
57:40 - because we are using Escape character
57:43 - and in the same way it will work uh in
57:45 - the third string like this now
57:49 - suppose you want to print this uh this
57:55 - Escape character
57:57 - so you have some string which uses this
57:59 - and you want to print here this backs
58:03 - slash how you can do
58:06 - it you just need to use wherever you
58:10 - need to you know print this backs slash
58:14 - so for example I will use backs slash
58:16 - here and let's see first of all what
58:19 - will be the result for example I want to
58:22 - print back slash here here and here and
58:25 - I will save my program and run it by
58:29 - pressing F or this run python module it
58:35 - will show me this backslash here right
58:40 - but better way is to just
58:45 - use double slash let's see what happens
58:48 - when we use double slash I will save it
58:51 - and run the
58:53 - program and now it shows
58:56 - back slash like this so it's always
59:00 - better to use double slash whenever you
59:03 - want to print this single back slash
59:06 - here okay
59:10 - now suppose you want to print the length
59:13 - or you want to find out the length of
59:16 - your string what you can do you can use
59:18 - a buil-in function called
59:20 - Len and I think I have already uh you
59:24 - know shown this function to you but once
59:27 - again I'm going to show you so I want to
59:30 - find the length of uh the string a I can
59:33 - just use Len and I will pass
59:36 - my variable a as an argument and I can
59:40 - save it and I I can run
59:42 - it I run it here once
59:46 - again and now it says 34 so the length
59:51 - of my string a is 34 okay so in the same
59:55 - way you can find the length of uh B and
59:59 - C also
60:02 - right
60:04 - now suppose I have string a for example
60:09 - I have string a like
60:13 - this hello and space and string B is
60:19 - like
60:21 - that hello world okay and how can I join
60:26 - these strings I can join these strings
60:30 - just like you just need to use a and
60:35 - plus and B so plus is called a
60:39 - concatenation operator here and what
60:42 - this plus does it just adds or
60:45 - concatenate these two string A and B I
60:48 - will save the program and run it once
60:51 - again and it gives me the answer hello
60:54 - worlds right so this plus concatenates
60:59 - your string you can see here now for
61:03 - example I have this um I have this I
61:07 - will just delete this and I have this
61:10 - variable
61:11 - a and I want to print it 10 times and I
61:16 - don't want to use you know a and then
61:23 - plus a once again a
61:26 - I want to print it 10 times or suppose I
61:29 - want to print it 100 times there is a
61:31 - short way to print uh this uh a 100
61:35 - times or whatever number of times what
61:38 - you need to do is you just need to use
61:41 - your variable which contains your string
61:44 - and
61:46 - then give a estri symbol here so give
61:50 - this asri symbol and then the number of
61:54 - time you want to iterate for example I
61:56 - want to print hello 10 times I can just
61:59 - give 10 here and I can save the program
62:03 - and I can run it once again and now you
62:06 - can see it has printed hello 10 times
62:09 - this I can do uh you know I can change
62:11 - it to 100 and it will print hello 100
62:14 - times just run it now you can see it has
62:18 - printed this hello 100 times right this
62:23 - is a short way of printing
62:25 - your same string again and again okay
62:32 - now suppose I have uh string which is a
62:38 - so I have this word for example hello
62:40 - which is assigned to a and I have the
62:44 - other variable B and I assign a number
62:47 - two to this or five to this okay and I
62:52 - want to print hello five in a single
62:56 - line how can I do this I can for example
63:01 - I can try to write it like this
63:04 - A+ B but let's see what happens when I
63:08 - run this I will save it and I will run
63:12 - this and it gives me the error because
63:16 - my variable a is of type string and my
63:21 - variable B is of type integer and I
63:24 - cannot add or can concatenate these two
63:29 - variables because they B has a different
63:33 - data type and a has a different data
63:35 - type now in order to print uh this these
63:39 - two uh variables together or value of
63:41 - the these two V variables together what
63:45 - I can do is I can typ cast my B which is
63:49 - a integer to the string and to convert
63:52 - my integer to string what I can do is I
63:55 - can just do
63:57 - Str Str and I can enclose this B
64:00 - variable in this function called Str Str
64:04 - and what this Str Str does is it
64:06 - converts
64:07 - your argument into a string okay and now
64:12 - when I save this and run this it will
64:15 - run fine hello file
64:22 - right hello guys welcome to the sth
64:24 - video tutorial on Python programming for
64:27 - beginners and in this video I'm going to
64:29 - show you what are lists and how to use
64:32 - lists in Python so as the name suggest
64:36 - list is a collection of values and how
64:40 - you can declare list in Python you just
64:43 - need to give the name of the list for
64:46 - example I want to have the list of names
64:50 - so I can give uh the variable name for
64:53 - list as
64:56 - names is equal to and then the square
64:59 - bracket and this square bracket will
65:02 - contain the collection of
65:06 - values and it's totally valid that this
65:10 - collection can you know initialize as
65:13 - Zer value zero values so the list can
65:18 - have zero values also and it can have
65:22 - maximum values for example 10 or
65:25 - hundreds of values so for example I
65:28 - initialize this list like this and this
65:32 - list is initialized as a blank list okay
65:36 - and when I call this names list once
65:39 - again it's a empty list because I
65:42 - haven't provided any value to the list
65:45 - okay so it's totally valid that you
65:48 - initialize your list
65:50 - empty now to initialize list with some
65:54 - values what you can do is you can just
65:57 - write the name of the list once
66:00 - again and then you can give the values
66:05 - inside your list like this so for
66:09 - example I want to have the collection of
66:14 - names
66:16 - comma some other
66:20 - name comma some other name
66:27 - and this can go on and on and on right
66:32 - so it depends upon you what uh number of
66:36 - values you want to have in the list and
66:38 - when I press enter your name variable
66:42 - which is a list is initialized with
66:44 - these values now when you call this
66:47 - names variable once again it has these
66:51 - three
66:52 - values now there is a term called in
66:55 - index in Python for list which indicates
66:59 - the position of the values in your list
67:04 - so the position of this first name in
67:08 - the list in as any other good language
67:12 - starts from zero it doesn't start from
67:14 - one but it starts from zero and this is
67:18 - called the index of your list so the
67:23 - index of this list or the index of this
67:27 - name Mark is zero index of this name
67:31 - John is one and index of this name Julie
67:36 - is two and on the basis of index you can
67:40 - even call these values for example I
67:44 - want to print out this first value
67:46 - called Mark I can just write name of my
67:50 - list names and then just give the index
67:55 - so the index zero is for Mark right and
67:59 - when I press enter it returns me the
68:02 - value Mark in the same way when I call
68:06 - index is equal to two names two it'll
68:10 - give me Julie because it starts from 0 1
68:13 - 2 right
68:16 - now there is a very interesting uh thing
68:20 - in Python is that you can even have
68:24 - index back backwards also right so the
68:28 - forward index starts from 01 2 and the
68:31 - backward index starts from -1 -2 -3 and
68:37 - if this has more values -4 - 5 and so on
68:41 - right because why this starts from minus
68:45 - one and this forward index starts from
68:48 - uh zero because you cannot have minus Z
68:52 - from backwards right so this index will
68:57 - be minus one this index will be minus
69:00 - two this index will be minus three and
69:02 - you can even call these values on the
69:05 - basis of backward index also for example
69:08 - I want to print this name Julie on the
69:11 - basis of backward index I can just do it
69:14 - like this I can just give the backward
69:17 - index which is - one which starts from
69:21 - minus one right backward index starts
69:23 - from minus one and this Sprints Julie
69:26 - once
69:27 - again so always remember if you want to
69:31 - uh start from or you want to have the
69:35 - forward index just starts from 0 1 2 and
69:39 - if you want to you know have the values
69:42 - from the back backward index you can you
69:45 - start from minus one min-2 minus 3 and
69:48 - so on okay for example you want to call
69:51 - name Mark you just need to give
69:55 - names and the backward index minus 3 and
69:59 - it will give Mark
70:02 - right now in order to add values more
70:06 - values to your
70:08 - list what you can do is you can just
70:12 - call the variable or your list name and
70:17 - then you just write Dot and just
70:22 - write append and in this print bracket
70:25 - you just pass the value which you want
70:28 - to add to your list so I want to add one
70:31 - more
70:33 - value to my name list and I press enter
70:38 - now this name which is a name of the
70:41 - list do append which is a function
70:44 - built-in function in Python has appended
70:48 - or added one more values to my names
70:53 - list and now when I print
70:55 - my names list it has four values and it
70:59 - has added this extra name to my list
71:04 - okay now for example you want to add
71:08 - list into a list so for example I have
71:12 - some other list
71:15 - called um age for example ages or age
71:21 - and I have
71:25 - some ages here 23
71:29 - comma 12 comma 32 comma for example 11
71:35 - okay so I have a list of names and I
71:40 - have the list of age right and I assign
71:43 - this list and now I want to
71:46 - add uh the age to my a names list how
71:51 - can I add I can just write
71:55 - names which is the name of my name list
71:59 - right
72:02 - dot
72:04 - extend and in the bracket you
72:07 - pass your second list so you can just
72:11 - pass this like this and press enter and
72:15 - it's totally valid and now when you call
72:18 - this name list you
72:21 - have extra list of age here so there is
72:26 - a interesting fact about uh python list
72:29 - is it can contain different data types
72:34 - so it's not necessary that you your list
72:37 - only uh if you initialize list by string
72:40 - values it only has to contain uh you
72:43 - know string values you your list can
72:47 - contain string values also or the
72:51 - integer values or float values or any
72:54 - other data type Val vales and it's
72:56 - totally fine in Python okay so you can
73:00 - Define diff uh you know different data
73:03 - type list also okay so just remember
73:08 - this now you must have or you could have
73:12 - done the same uh thing for example you
73:16 - want to add uh or first of all I will
73:19 - show you how you can remove items from a
73:22 - list okay so to remove remove a item
73:26 - from a list what you need to do is for
73:28 - example my list name is names I want to
73:32 - remove some items so I will just write
73:35 - names
73:36 - dot remove and in the bracket I will
73:40 - just give the item value for example I
73:44 - want to remove this name Patrick from
73:47 - the list okay I will just say name which
73:51 - is the name of my list do remove and
73:54 - then the value which you want to remove
73:57 - and press enter and once again I will
74:00 - call names and now
74:03 - the value Patrick is gone from the list
74:09 - right so in this way you can remove list
74:13 - from your you know not remove list but
74:17 - remove values from a from your list in
74:21 - Python now for example
74:26 - uh you want to print a list you can just
74:28 - call Print method so it's uh you know
74:32 - you can call your list using this print
74:34 - method also so you can just write names
74:38 - and press enter and will give print the
74:41 - list of name like this only okay now in
74:44 - order to uh print multiple lists for
74:49 - example I have the list called names and
74:52 - I have initialized this list called ages
74:54 - also right so I can just separate my
74:56 - list by
74:58 - comma and I will just add one more list
75:02 - and it'll print two lists from me first
75:05 - list is for names till here and second
75:09 - list of pages still here right so you
75:14 - can either you use single list or
75:19 - multiple list or print them like this
75:23 - okay now in order to uh get uh you know
75:28 - I have shown you how you can get uh the
75:30 - maximum value minimum value or um the
75:35 - length of the strings in the last video
75:38 - right on the list also you can call
75:41 - length matter Len and you can find the
75:45 - length of the list like you just call Al
75:49 - and built-in function and
75:51 - just pass the list name as an argument
75:56 - right and it will give the length of the
75:58 - string which is seven right 1 2 3 4 5
76:03 - six 7 right so if the list contains
76:06 - seven values it will return seven this
76:08 - is the length of the list
76:11 - okay now you can even uh print for
76:17 - example max if uh it applies to your
76:21 - list you can even uh call this method
76:26 - it will give an error because my list is
76:29 - a mixed list right but the same method
76:33 - Max and I apply to the list called age
76:38 - it'll give me the answer 32 right
76:42 - because my list of age only contains the
76:45 - integer values and the maximum values of
76:48 - this is 32 okay so you can also apply
76:53 - built-in function on list
76:58 - also hello guys welcome to the eighth
77:01 - video tutorial on Python programming for
77:03 - beginners and in this video I'm going to
77:05 - show you how to use slicing in Python so
77:10 - as the name suggests slicing we can use
77:13 - it for you know separating a slice from
77:16 - a list so for example I have a a list
77:20 - like this and I will call it my list and
77:25 - contains some integer values from 0 to 9
77:29 - and I press enter and it allocates this
77:32 - uh 0 to n values to my list and I can
77:37 - just see this by printing the list so it
77:41 - has 0 to N9 values now suppose I want uh
77:45 - to print only or I want only the values
77:50 - of from 4 to 7 how can I get this these
77:54 - values values from my list so what I can
77:59 - do is I can just use my list and then in
78:04 - the square bracket I will start from the
78:09 - value which I want to print so for
78:11 - example four and then I give this um
78:15 - colon and then I give the ending value
78:20 - till whatever value I want to print for
78:23 - example eight
78:25 - and I press enter and it prints from
78:29 - four to just before the
78:32 - value you want to print
78:37 - so you if you remember this index of the
78:40 - list starts from zero right so index uh
78:44 - is zero here 1 2 3 4 5 6 7 8 9 right so
78:53 - to print your
78:55 - values this starting value whenever you
78:59 - write it includes the index of the value
79:04 - you want to print okay so when you write
79:07 - four it'll includes 0 1 2 3 4 so it will
79:12 - print the value from four and it will go
79:15 - to8 four five 6 7 8 but it excludes this
79:21 - value and it only prints up to seven
79:25 - okay now suppose uh you want to print uh
79:30 - uh something like you want to print to
79:33 - the end
79:35 - from 5 to 9 how you can do it you can
79:39 - just do it like my
79:43 - list and you can just write five and
79:49 - because this will print if you write
79:52 - here nine this will print up to eight
79:55 - right because uh whenever we have
79:58 - written eight here it was printing up to
80:00 - seven value right and remember this is
80:03 - the index not the values the these
80:06 - values can be string data type or any
80:09 - other data type right so this these
80:13 - value has nothing to do with these uh
80:15 - index values okay these are the position
80:18 - which you want to print okay so in order
80:21 - to uh print from five to 9 you need to
80:24 - add one more to your slice and then
80:29 - it'll print from five to nine okay so
80:33 - remember if you want to go from some
80:37 - value in the middle to the end just add
80:40 - one to the index here okay so you want
80:44 - to print nine then just print 10
80:48 - here
80:50 - now as I have already told you that uh
80:54 - you not only can have the list or you
81:00 - can not only uh can uh print the index
81:05 - slice the index uh for the integer array
81:09 - or list but any string list also so for
81:13 - example I
81:16 - have a list like
81:18 - this of character for
81:21 - example
81:23 - characters and and then I want to uh
81:27 - print or slice these uh list uh
81:30 - characters right so how you can do it I
81:35 - will just write name my uh List names
81:39 - and then in the square bracket I will
81:41 - just write 2 to uh three for example I
81:46 - want to print 2 to three it will just
81:49 - print second value because uh it skips
81:54 - the Third value
81:55 - right so 0 1 2 it includes the two and
82:01 - it skips the value which you give here
82:04 - so it will only print to uh C here right
82:09 - for example I want to go to the end I
82:12 - will just write
82:17 - 224 it gives list like this now for
82:21 - example uh there is a short way of doing
82:24 - doing this if you want to
82:26 - print from five to the end what you can
82:31 - do I have this my list here I will copy
82:34 - and paste it here and in the square
82:36 - bracket what you can do you can just
82:38 - write five and semicolon and leave the
82:41 - other part of this slice and when you
82:43 - press enter it will just print uh the
82:47 - values from five to 9 to the end of your
82:49 - list okay now for example you do
82:55 - the same thing but you leave the first
82:58 - part and just
83:00 - uh go up to the last part it will print
83:04 - from start to the end okay so for
83:08 - example I want to print once
83:12 - again uh colon or to the fifth value and
83:18 - it will
83:19 - print from the starting to the fifth
83:22 - value okay
83:25 - now this will uh be true for the
83:29 - negative sequence also so I have already
83:32 - told you in the last video that you can
83:35 - um in the list you can have the index
83:38 - negative index from the backward of from
83:41 - the back right so what you can do
83:45 - is uh you can just use this list and you
83:48 - can just say - uh 4 to-
83:54 - 2 and press enter it will give you the
83:58 - values from so this is minus1 min -2 and
84:03 - it will skip this value and it will
84:05 - print here and then we have -1 -2 - 3
84:10 - minus 4 and minus 4 is this one right so
84:16 - it will print this one and it will print
84:18 - this one but it will not print this one
84:20 - because it will skip this right as we
84:23 - have seen in this positive or forward uh
84:26 - forward
84:28 - indexing in a similar way it will uh
84:31 - this also works for the blank sequence
84:35 - for example - 6
84:40 - to blank and it will print from four to
84:44 - 9 okay and it will be same for uh if you
84:50 - leave the first part and uh want to
84:52 - print the last part
84:55 - okay
84:56 - now if you want to print the whole array
85:00 - you just can do it like this but you can
85:04 - also do it like just give a square and
85:07 - give this semicolon here it will also
85:10 - give you the whole
85:11 - array
85:13 - okay
85:16 - now there is one more thing you can do
85:19 - with your list is for example I have my
85:22 - list
85:24 - and I want to print the values for
85:29 - example I want to
85:30 - print
85:32 - 0o 3 six in some sequence okay so you
85:37 - want to skip some values and you want to
85:40 - print only some other values so what you
85:42 - can do here you can just write zero
85:47 - which is a starting index and to 10 so
85:50 - you want to print from zero to the end
85:55 - and there is a optional value you can
85:58 - give here and you can give the value
86:02 - here which you want to skip so for
86:04 - example you want to
86:06 - skip 0 1 2 3 here so you want to print 0
86:12 - 3 and six and 9 what you can do
86:16 - here you can skip the value by two okay
86:20 - and when you print here it will print
86:23 - zero
86:25 - 2 4 6 8 okay so it prints here and it
86:31 - skips the first value and second value
86:33 - it prints uh skips the third value and
86:37 - fourth value it prints and just like
86:39 - this right so for example I can once
86:42 - again skip two values at a time instead
86:46 - of two I can write three here and press
86:48 - enter it will give 03
86:52 - 69 okay and there is a very short way of
86:57 - doing this
86:58 - is you can just uh write the skip value
87:04 - number of index you want to skip and
87:06 - just leave
87:08 - these things or these uh Parts blank
87:12 - here and will print the same value okay
87:16 - so this is optional it's not necessary
87:18 - to use this but if you use this it will
87:21 - skip uh you know those values like this
87:27 - okay and you can do it with the negative
87:30 - index also for example you can just
87:33 - leave this and write two here it will
87:38 - print from the back word to
87:42 - the front right so it when you write -2
87:48 - it'll start from 9 and then -2 it will
87:53 - print 7
87:54 - and then five and three and one okay so
87:57 - if you want to print backwards just give
88:00 - this sequence in negative okay once
88:03 - again you want to print backward
88:07 - skipping third value or three
88:10 - values just do it like this 9 6 3 0 okay
88:18 - so in this way you can use sequence in
88:21 - Python there's more to sequence which
88:23 - will I will discuss in later
88:27 - videos hello guys welcome once again
88:30 - till now I have been showing you uh
88:33 - basic but very important concepts of
88:36 - python now from this video we are going
88:38 - to uh write some code in our python file
88:44 - and from this video we are going to
88:46 - write some useful code and uh this video
88:50 - I will start from uh showing you how
88:54 - additional statement works and in this
88:57 - video I'm going to specifically take if
89:00 - statement in
89:02 - Python so let's get started I have this
89:05 - um test. python file which I made uh if
89:10 - you don't know how to make the test of
89:12 - python file you just need to go to file
89:14 - in the shell and just click new file and
89:19 - then just save your file at your
89:23 - specified location
89:25 - by uh some name okay and you will be
89:29 - having this type of file so my python
89:33 - file name is test test. py
89:38 - now the conditional statement which uh
89:42 - I'm going to take uh let's see how if
89:44 - statement works so for example I want to
89:49 - find out the absolute value of number
89:54 - how can I find out by using a if
89:57 - statement so for example I write uh
90:01 - variable which takes an input so I ask
90:05 - the user to enter an input and I convert
90:08 - it to an integer and will be saved in
90:12 - the variable called n okay now I want to
90:15 - find out the absolute value of that
90:18 - number so what I can do is I can use if
90:22 - statement and how you can uh declare if
90:25 - statement just write if and then the
90:29 - condition okay so here comes
90:34 - the condition this is a pseudo code I'm
90:37 - writing so we are going to replace this
90:40 - condition by a real condition and then
90:43 - in here so always remember when you
90:47 - write code in Python it's uh indentation
90:51 - is really necessary so
90:54 - if you uh write any condition for
90:57 - example if if you give another code for
91:01 - example uh I want to print
91:04 - something what it will do
91:07 - is this statement uh sees the
91:11 - indentation and let me give you an
91:13 - example first and then I will illustrate
91:17 - the basic concept of indentation so I
91:21 - want to find out the absolute number
91:23 - right
91:24 - so in the condition I can write n if n
91:28 - is less than 0 so this is a condition
91:33 - I'm checking if uh user enters the value
91:37 - n Which is less than zero what I'm going
91:40 - to do is I'm going to
91:44 - print
91:45 - print uh the value absolute value so I'm
91:49 - going to just
91:51 - write uh the
91:58 - absolute
92:01 - value
92:03 - of and then the I can just uh use comma
92:08 - to give the value of N and once again I
92:11 - can use comma to you know separate this
92:15 - string and I can write
92:17 - is
92:20 - is and let me make a little bit
92:24 - figure is and then I can just separate
92:27 - it by one other comma and I can just
92:30 - write minus and if if the uh value is
92:33 - less than zero right so let's uh save
92:37 - this program just control s to save the
92:41 - program and I will run the prr run
92:43 - module or
92:45 - F5 and it says invalid
92:48 - syntax and why it says invalid syntax
92:52 - here is because in here after if
92:56 - condition you need to give colon here
92:59 - okay so this is taken as a condition and
93:04 - after colon it uh it indicates that this
93:08 - condition ends here and then the
93:10 - statement start from here once again
93:12 - save it and run
93:14 - it and then it will run in this shell
93:18 - and it's
93:20 - asking uh the user to enter a number I
93:22 - will enter negative number minus 3 and
93:26 - press enter and it gives
93:28 - me uh the absolute value of Min -3 which
93:32 - is three okay now for
93:36 - example I want I I I enter a positive
93:39 - number what happens then okay so I will
93:42 - run it once again and this time I enter
93:46 - last 10 and now nothing happens because
93:50 - this condition we are checking is less
93:54 - than or we are checking for the number
93:56 - less than zero so this uh will print
93:59 - this and just remember always that
94:02 - always provide an indentation here okay
94:06 - if you don't provide this uh small space
94:09 - or tab here and just you know write your
94:13 - code here with no space here and save
94:16 - your program and run it let's see what
94:21 - happens so it says EXP expected and
94:24 - indented block right so always provide
94:28 - an indentation and it it's you know show
94:31 - you the place where the error is coming
94:34 - in a red you know red highlight okay so
94:38 - always provide just give a tab uh
94:42 - before your statement after if condition
94:47 - okay or after
94:48 - any any uh logic which you
94:52 - write so now this is considered as a
94:56 - statement okay and if you uh if you
94:59 - write this if a statement or like this
95:02 - it will consider this line as a
95:05 - different code and it will not come as a
95:08 - statement of if condition okay now for
95:11 - example I provide the positive number
95:14 - and I also want to give the absolute
95:16 - value of this positive number so what I
95:19 - can do is I can just give else condition
95:25 - else so your statements start from you
95:30 - know with no space here but so if your
95:34 - condition is if and then we have the uh
95:38 - else condition so your condition start
95:41 - from no space but the statement inside
95:45 - your condition starts with the
95:47 - indentation or space here just give a
95:49 - tab and it will give you this uh space
95:54 - okay so once again I want to print out
95:56 - the absolute value of a number now I
95:59 - want to check whether number is positive
96:02 - so if the number is not negative which
96:05 - is this condition if number is less than
96:08 - zero which mean number is negative this
96:11 - will be printed else if the number is
96:14 - positive because this condition is not
96:17 - true that means definitely the number is
96:19 - positive I want to uh print out the
96:22 - absolute value of this positive number
96:25 - right so I will just print it like this
96:27 - absolute value of this should be
96:31 - value n is positive because the absolute
96:35 - value of positive number is positive
96:38 - right so now when I save the program and
96:43 - run
96:45 - it and it says invalid syntax once again
96:49 - why because I also need to give this
96:52 - colon here
96:54 - right now once again save it and run
96:57 - your
96:58 - program and it gives me uh this question
97:03 - mark with a number I give 10 once again
97:06 - and it says absolute value of 10 is 10
97:10 - so this is the basic syntax of if
97:13 - statement your um you give if as a
97:18 - keyword for checking the comparison or
97:21 - uh comparison and you compare some
97:25 - values so right now we are comparing our
97:28 - value which user enters from zero and if
97:31 - it's less than zero we print this else
97:35 - anything else uh will be covered by this
97:39 - statement and always uh remember that
97:42 - your um uh if statement or L statement
97:46 - with will uh have no space here but your
97:50 - actual you know uh code which you write
97:53 - in if statement or else statement will
97:56 - be uh will'll have to have this kind of
97:59 - indentation here indentation means space
98:01 - or tab
98:03 - okay and it's not necessary that you can
98:07 - only give one line of code inside your
98:09 - if condition you can just give multiple
98:13 - lines of code inside your if condition
98:17 - uh I will
98:21 - just make it little bit prettier
98:24 - so it can have you know multiple line of
98:28 - statement your if if condition or your
98:31 - else condition uh this is just an
98:34 - example I'm giving but this will be some
98:36 - logical code which you have to write
98:38 - here and in a similar way you
98:41 - can just uh give this here right here
98:46 - right so you can have multiple statement
98:50 - in else
98:51 - condition now one one more thing to uh
98:55 - remember here is whenever you want to go
99:00 - outside so now want you want to do some
99:03 - other operation for example I want to do
99:08 - uh I want to add two numbers
99:10 - n or uh some I will declare a variable
99:15 - called
99:16 - sum uh sum of two for example this is my
99:22 - variable name and and I add
99:25 - 50+ 60 okay and I want to print
99:32 - it print and then I want uh just print
99:38 - this sum of these two numbers right so
99:42 - if I do it like this for example I do it
99:45 - like this what will happen let's see I
99:49 - save it and run my program
99:54 - and I give
99:56 - a negative number minus 9 for example
100:01 - and it gives me uh these values which is
100:06 - which it execute these values okay but I
100:09 - wanted to print uh uh this number also
100:13 - after the U my F's condition so how I
100:18 - can uh you know show or how I can tell
100:21 - python that my my else condition is now
100:25 - closed or my this if El condition is now
100:29 - over and I want to print this now so
100:34 - your next code should start from once
100:38 - again with no space okay
100:42 - so this is this will be considered as a
100:45 - different code and it will not be
100:47 - included in these condition uh
100:50 - conditional statements right and now
100:53 - when I save it I will save it and then I
100:59 - give minus 8 for example yeah I need to
101:02 - give minus 8 and now you see it gives me
101:07 - the absolute value which execute this
101:09 - code and then it execute my another code
101:12 - this code which I want to execute after
101:15 - my if condition okay so just if you want
101:19 - to end your s statement and you uh you
101:22 - know want to write some other code just
101:25 - start from no space so indentation is
101:28 - really very important in Python if you
101:33 - uh you know write or give this
101:35 - indentation incorrectly your python code
101:38 - will give any error or some error okay
101:42 - so this is the if else condition in
101:48 - Python hello guys welcome once again in
101:50 - the last video I have shown you how to
101:52 - use IFL statement in Python so I have
101:55 - given you a little brief introduction
101:57 - how to use IFL statement but there's
102:00 - more to IFL statement which is u l if
102:04 - statement and nested uh IFL statement so
102:09 - let's see how we can use uh those two so
102:13 - for example I'm going to just uh take a
102:16 - new example so I'm going to delete all
102:19 - these
102:20 - stuff and for example I want to compare
102:26 - some names this time I want to have a
102:28 - variable called
102:30 - name and I want to take a input from a
102:34 - user that uh he will give me a name and
102:40 - then I will compare the name and I'm
102:42 - going to show the result okay so what I
102:46 - can do is I want to compare the name
102:49 - right uh so in my if condition I will
102:51 - compare my name if my name and to
102:54 - compare equality you use double equal
102:58 - not this but double equal sign here okay
103:01 - so always remember if you want to uh
103:04 - compare the equality of two string or
103:06 - two values you just use not single uh
103:10 - equal to but you use double equal to if
103:14 - you use single equal to this means
103:16 - assignment so assign so this single
103:19 - equal to means that assign the value
103:22 - whatever user enters to the name but if
103:25 - you use double equal to it means that
103:27 - you want to compare the two values okay
103:31 - so I want to compare this value to for
103:33 - example name called Mark and I can say
103:39 - uh
103:43 - print the name entered is the
103:52 - name entered is and then comma name for
103:59 - example okay now I want to check some
104:04 - more names if the user enter some uh
104:07 - other names right so for example if a
104:11 - user enter some other name I want to
104:13 - check it so how I can check it just I
104:16 - can check it by L if condition okay so
104:20 - there is a condition called else if this
104:23 - L if means else if okay and then I can
104:27 - check one more condition for example
104:30 - this
104:31 - name is this
104:36 - time
104:37 - John and then I will print uh some other
104:43 - value so I will uh just print the name
104:47 - of John here so the name entered is John
104:51 - in a same similar way I can
104:53 - have multiple F Els conditions like this
104:59 - and just don't remember to give the
105:02 - intent and then for example some other
105:05 - name I can compare
105:07 - or some other name I can
105:12 - compare okay so if you want to uh
105:17 - compare different conditions you can can
105:20 - use l if condition and and else if
105:25 - the condition is false what I can do I
105:28 - can just print that the name
105:32 - entered
105:36 - is not valid for
105:38 - example not valid okay and now I've
105:44 - saved the program and when I run
105:50 - this it ask me to enter a name Al so for
105:53 - example I enter a name mark it says the
105:57 - name entered is Mark okay once again
106:00 - when I run the program once
106:03 - again and this time I enter some other
106:06 - name for example Tom and press enter it
106:10 - says name entered is Tom because it goes
106:14 - here so what's uh the flow of the
106:16 - program so we are checking or we are
106:19 - asking the user to enter any names when
106:22 - the user user enters any name this name
106:25 - goes in this name variable and then the
106:30 - program comes to this place to compare
106:32 - this name to the name called Mark and
106:35 - the if the name is Mark it'll print this
106:41 - okay otherwise it will go on to check uh
106:46 - that if the name is John and if the name
106:48 - is John it goes here and it print this
106:52 - otherwise it will check if the name is
106:54 - Julie and it will print this okay so in
106:59 - this way you if else statement works or
107:03 - else if or if else else if else if else
107:07 - if else so L if means else if and you
107:12 - can uh compare multiple condition using
107:15 - L if
107:17 - right now for
107:20 - example
107:21 - I want to uh you know have multiple if
107:27 - condition inside my if condition okay so
107:30 - it's called nested if condition okay and
107:34 - I uh tell the user to enter any name and
107:40 - if this name is
107:44 - um let's uh say name uh we assign this
107:48 - value this name to for example
107:54 - we have this name is equal to
107:58 - [Applause]
108:00 - animal
108:02 - animal and then this I declare another
108:07 - variable
108:09 - uh animal name for example animal name
108:15 - and this animal name
108:17 - is
108:19 - dog okay so I have a name which is
108:23 - animal and then I have animal name is
108:26 - equal to dog so first of all I want to
108:28 - compare if the name is animal okay so if
108:33 - the name is
108:34 - animal then I will I want to do some
108:38 - some other I want to check some other
108:40 - condition in this uh animal condition so
108:45 - I will just I can just uh give one more
108:49 - condition to check if this animal Nam
108:53 - is equal to so double is equal to dog
108:59 - okay
109:01 - dog and don't forget this colon and then
109:04 - I will uh print
109:07 - here so if your if statement starts from
109:12 - here in the last video I've shown you
109:13 - that you need to give the um indentation
109:17 - here okay if you write so let me show
109:21 - you print
109:24 - you can just uh print valid
109:28 - animal
109:30 - valid animal okay so why this
109:34 - indentation here is more important is
109:39 - because for example I can just
109:45 - write print uh like this without I only
109:51 - give this indentation
109:53 - so I can
109:55 - say uh
110:00 - name enterd
110:04 - is animal okay so see the indentation
110:08 - here here
110:10 - indentation so this statement belongs to
110:14 - this if condition and this print
110:16 - statement belong to this condition
110:19 - because this comes in the line of this
110:23 - if statement right so whatever you write
110:26 - here in the line of this it will be the
110:30 - condition of or valid condition of this
110:33 - and it will print this one and if uh you
110:39 - know animal name is dog it'll go here
110:43 - and it'll print valid animal so what do
110:46 - you think what happens let's see what
110:48 - happens I will just run my program save
110:51 - it
110:54 - and it says valid animal name entered is
110:57 - animal right
111:00 - so uh and just remember that whenever
111:06 - you want to give uh the statement or
111:09 - quote for this if condition just uh make
111:13 - sure that this is in line with
111:16 - this if and whenever you want to give
111:19 - the code for this if condition you just
111:23 - give your uh statement in this uh or
111:27 - along this line okay so indentation just
111:30 - remember indentation and this is called
111:34 - the nested if else condition so what we
111:37 - have done we have
111:39 - checked if uh this name is equal to
111:43 - animal and if name is equal to animal
111:46 - then we say that U We compare one more
111:50 - condition that if animal name is do
111:53 - and then we print this or in the case of
111:57 - name any this animal name is not dog we
112:02 - can just
112:04 - say else and I can just print one more
112:09 - condition
112:13 - print animal
112:15 - name I can just uh print animal name in
112:23 - valid okay so this is my if else
112:27 - condition inside my another if condition
112:30 - so this is like a parent if and this is
112:33 - like a child if else condition okay so I
112:37 - just change this name some other name
112:39 - cat for
112:41 - example and I save it and I run
112:45 - it and invalid expression because here I
112:49 - forgot the colon save run it once
112:54 - again and now it will print animal name
112:58 - is invalid because it goes here it seees
113:01 - okay name is equal to animal so I go to
113:04 - this condition but animal name is not
113:07 - dog here it's cat so it's it goes in
113:10 - this condition and it says animal name
113:13 - is invalid and then it just print the
113:16 - name entered is animal okay so in this
113:19 - way you can use else if and nested LF
113:24 - statement in
113:28 - Python hello guys welcome once again in
113:31 - this video I'm going to show you how to
113:32 - use comparison operators and logical
113:36 - operators in python in the last few
113:39 - videos I've been showing you how to use
113:41 - if else statement in Python and this is
113:45 - the continuation uh you may say but uh
113:51 - these comparison operators and logical
113:53 - operators you can uh not only use with
113:57 - these ifs El statement but in general
114:00 - also you can use
114:02 - them so first of all comparison
114:06 - operators comparison operators as the
114:08 - name suggests we use for comparing
114:12 - values now there are these uh comparison
114:17 - operators which are available in Python
114:20 - which are less than and which is
114:22 - indicated by this symbol second is less
114:25 - than or equal to which is which are
114:27 - indicated by less than sign and equal to
114:31 - and greater than greater than equal to
114:34 - double equal to indicates that you want
114:36 - to check the equality and this
114:38 - exclamation mark equal to means that you
114:41 - want to check the
114:43 - non-equality okay now there are some
114:46 - logical
114:47 - operator operators which by which you
114:50 - can perform some logical uh operations
114:53 - between uh some values for example you
114:58 - want to check uh you have two uh
115:01 - variables and you want to check or two
115:05 - conditions and you want to check both
115:06 - the condition and you want that both the
115:09 - conditions has to be true you use and
115:14 - condition and using and condition uh it
115:17 - means that you are checking for all the
115:20 - conditions in this case we are checking
115:23 - this condition has to be true and this
115:26 - condition has to be true otherwise it
115:28 - will say
115:30 - false uh in the opposite or the opposite
115:34 - of and is R not exactly opposite but the
115:38 - logically opposite of and is or um and
115:42 - or means either one condition is true
115:46 - then it will give you true so let's see
115:50 - how we can use it so first of all for
115:54 - example you want to check the less
115:58 - than condition I can just uh copy this
116:02 - and in my shell I can run it and I can
116:05 - print I want to print if this is
116:09 - true print
116:13 - true okay and I will press enter two
116:17 - times and this true has to be
116:22 - enclosed in double quotes right press
116:27 - enter and it says true because nine is
116:30 - less than 10 right in a similar way I
116:34 - can check uh these functionality but
116:37 - this time I'm not going to use if
116:39 - condition but yeah you can use all these
116:42 - operators with if conditions okay so for
116:45 - checking uh less than or equal to we can
116:48 - just TR write directly write in the
116:51 - shell and and press enter and it gives
116:54 - true okay so this means less than or
116:59 - equal to so 9 is less than uh 10 so this
117:03 - condition is true so that's why it's
117:05 - giving true to us and always remember
117:08 - that you uh have to use less than first
117:12 - and followed by this equal to let's see
117:15 - what happens when you say 9 equal to
117:19 - less than 10 and it gives syntax error
117:24 - so always use less than first and then
117:28 - equal to sign in order to avoid any
117:30 - problems in a similar way you can just
117:33 - check uh the greater than so if 9 is
117:37 - greater than 10 which is false so it
117:39 - will give us false right 9 is greater
117:42 - than equal to 10 which is also false and
117:47 - now we are checking the equality which I
117:49 - have shown you in the last video which
117:50 - is false nine is not equal to 10 and
117:54 - let's check if 9 is not equal to 10 this
117:58 - exclamation mark and equal to uh checks
118:01 - for the non-equality so it will be true
118:04 - yes and if 9 is less than we have
118:08 - already checked it okay now we have end
118:13 - conditions right so for example I want
118:15 - to check whether 9 is less than 10 and 9
118:20 - is not equal to 10
118:22 - so I want to check whether these two
118:26 - conditions are true at the same time
118:29 - okay and I press enter and it gives me
118:33 - true
118:35 - and let's
118:37 - uh let's check for some other condition
118:42 - so this condition is true in this case
118:45 - which is 9 is less than uh 10 and this
118:49 - is also true because 9 is not equal to
118:51 - 10 so it gives true for example I delete
118:56 - this uh not equal to and uh write equal
118:59 - to here so one condition is false here
119:02 - which is 9 is not equal to 10 because we
119:05 - are checking for two condition to be
119:07 - true at the same time it'll give me
119:09 - false because this condition is true but
119:12 - this is false right so whenever you use
119:16 - end operator your program expects that
119:20 - both the conditions or what whatever
119:22 - conditions you are um giving are true so
119:27 - you can even give three conditions for
119:30 - example I want to check the
119:35 - non-equality
119:36 - and so it's not necessary that you only
119:39 - can only give two conditions you can
119:42 - even give three four five or whatever
119:45 - conditions okay and it's totally
119:48 - fine okay in a similar way you can use
119:52 - or to check whether either of the
119:56 - condition is true if this condition is
119:58 - true or this condition is true in this
120:01 - case both the conditions are true so it
120:04 - gives true but when we give this uh
120:08 - statement where one condition is true
120:10 - which is 9 is less than 10 which is true
120:13 - but N9 equal to equal to or equal to 10
120:17 - which is not true it will still give
120:20 - you uh
120:22 - I have I must have used or here right
120:26 - because we are checking for
120:28 - or so it gives us true right so in this
120:33 - way you can uh use comparison operator
120:35 - and logical operators there is some more
120:39 - things uh you can check uh and these are
120:43 - is and in conditions or is and in
120:46 - operators whatever you want to say so
120:50 - for example I want to check I have a
120:54 - string
120:55 - string equals to equal to uh what you
121:00 - can say AB b c d e okay so our string
121:05 - equal to AB bcde e and I want to check
121:08 - if
121:10 - uh a is present in string or not so
121:16 - a
121:19 - in string and and it gives us true so
121:24 - what this in uh operator does is it
121:28 - checks whether this variable contains
121:31 - this uh value or character or not uh in
121:36 - in such way right so in a similar way
121:40 - you can search for B or C or any
121:44 - conditions okay so for example you want
121:47 - to check where the a b is present it
121:52 - gives us true but whenever you give a c
121:56 - it will give you false because A and C
121:59 - are not together present
122:02 - here now suppose you have two list one
122:05 - list is called a is equal
122:08 - to uh 1 comma 2 comma 3 and b equal to
122:17 - same list
122:19 - okay um B
122:22 - and there is operator called is so
122:26 - whenever you we use a is B it will give
122:31 - you false but for example you declared
122:36 - uh uh uh list C = to D = to 1 2 3 will
122:45 - give you true because it checks whether
122:49 - these two or two two values are equal
122:53 - exactly equal or not these are
122:57 - these A and B are equal by values but
123:03 - they are not logically equal that's why
123:06 - it will give you false
123:08 - but this we have already you know
123:12 - assigned or assigned c equal to D or we
123:16 - have assigned D to C equals this value
123:20 - that's why it will give us
123:22 - uh true so let's check
123:24 - C is B and it will give us true okay so
123:30 - in this way you can use logical
123:32 - operators comparison operators and is in
123:36 - operator in
123:41 - Python hello guys welcome once again in
123:43 - this video I'm going to show you how to
123:45 - use Loops in Python and I'm going to
123:48 - show you how you can use a while loop
123:52 - and for Loop in Python so these are two
123:55 - kinds of Loop in Python you can uh use
123:59 - uh to iterates some values so first of
124:02 - all Let's uh see what is a loop a loop
124:07 - is a piece of code which help you to
124:12 - iterate or to you know repeat a piece of
124:16 - code again and again without rewriting
124:20 - the same piece of code again again and
124:22 - again so loop as the name suggests is a
124:27 - piece of code which will help you to you
124:30 - know write or Implement some piece of
124:33 - code again and again unless and until
124:35 - some condition is true so let's see how
124:39 - a y Loop work in uh python first so for
124:44 - example I have a variable called a which
124:47 - is equal to
124:49 - zero and so let's let see how while uh
124:53 - loop declaration uh works so for
124:56 - declaring a while loop you just need to
124:59 - write while and then the condition comes
125:03 - uh which needs to be true if you want to
125:06 - go out of the loop so for example I want
125:09 - that if a is less than five then I want
125:14 - to implement this okay so once again I
125:19 - forgot the colon
125:22 - yeah my Loop has this colon okay so I
125:26 - want that if a is less than five I want
125:30 - to Loop uh the value of a okay so I want
125:34 - to
125:35 - print
125:37 - a okay
125:41 - and because this condition is U you know
125:44 - never be true if I don't uh increment
125:48 - the value of a so I'm going to increment
125:50 - the value of a like this so a + = to 1
125:56 - this is same as writing uh for
126:01 - example uh a is equal to a + 1 this is
126:07 - same as uh this one but you can write
126:11 - this in short like this right and I will
126:15 - just execute this while loop and the
126:18 - result is 0 1 2 3 4 five okay so you you
126:23 - haven't printed this uh 0 to four uh
126:28 - integers uh you know you just have
126:32 - written this one line of code to print
126:34 - all these numbers so while loop or Loop
126:38 - help you to you know Implement a piece
126:41 - of code or again and again right so what
126:46 - happens
126:47 - here you we have already declared a is
126:50 - equal to Z
126:52 - and then your code goes here and it sees
126:55 - it's a while loop and it checks this
126:57 - condition a is less than five because a
127:01 - is zero and 0 is less than five so it
127:03 - will print uh this zero value here once
127:08 - again it goes to a while loop once again
127:12 - and because I was increasing it by one
127:15 - now value of a becomes one so a is 1
127:20 - Which is less than five so it will print
127:22 - one here with this code and it will
127:25 - increment a once again and now a is two
127:29 - and two is less than five so once again
127:32 - it will print two and same as for three
127:35 - but as soon as uh five comes here and
127:40 - five is not less than five then it will
127:42 - not print five because this condition is
127:45 - false now so it will go out of the loop
127:48 - so this in this way this while loop
127:52 - works now let's see some real life
127:56 - example or some practical example of Y
128:00 - Loop so for example I have this example
128:04 - where I have a is equal to Z and S is
128:08 - equal to or a is equal to 1 and S is s
128:11 - is equal to zero and I'm telling the
128:15 - user to enter some value okay so enter
128:20 - number to add to the sum okay and
128:23 - entered zero to quit Okay so I'm uh
128:28 - telling user to enter some value so that
128:31 - I can make the sum or otherwise if you
128:33 - want to quit just uh enter zero and then
128:38 - I will I'm checking whether a is equal
128:42 - to zero if a is not equal to zero then
128:46 - I'm going to uh take this uh value of s
128:52 - and then I'm asking the user to enter a
128:56 - number and then I will add this uh
128:59 - number to my sum s stands for sum and a
129:03 - stands for a number and then I will
129:06 - print the sum like this okay so this is
129:09 - a little example which is more practical
129:13 - in real life uh situations and I will
129:17 - run this and now it will run so I'm
129:22 - asking enter the number to add to the
129:25 - sum if you enter zero you will be quit
129:28 - or you will quit the uh quit the program
129:32 - and current sum is zero so for example I
129:36 - enter 300 okay and now current sum
129:40 - becomes
129:41 - 300 okay and for example I enter
129:47 - minus uh 2 or 340
129:52 - then current sum becomes 40 okay so it
129:56 - will go on keeping the sum or making the
130:00 - sum plus 80 so
130:03 - it'll add to this 80 once again and then
130:08 - for example 120 it will add 120 to the
130:11 - sum so this code will help us to make uh
130:17 - sum of numbers which user will enter but
130:22 - as soon as I enter zero you see
130:25 - here uh then the while loop is no more
130:30 - valid because this condition becomes
130:32 - false and
130:35 - then user will exits so when I press
130:40 - zero the sum is 160 which is true and
130:45 - while loop is ended and condition is
130:47 - false and I'm I'm out of loop okay
130:52 - so in this way you can use while Loops
130:55 - now there is one more kind of loop in uh
130:59 - python uh which are called for Loop and
131:03 - for example I have a list called B is
131:06 - equal
131:07 - to in the list I have 2 comma 4 five
131:11 - some numbers okay I'm just taking some
131:16 - random numbers here and for example I
131:19 - want to print all these numbers in the
131:22 - list but one by one
131:25 - okay so what I can do I can use a for
131:28 - Loop and for Loop how I can declare with
131:32 - just this four and then I will declare a
131:36 - variable which will hold the value of
131:40 - these elements one by one okay so for
131:45 - example I new M this is defined by me
131:50 - okay and what this does is this will
131:53 - hold the value of uh elements in the
131:57 - list one by one and then write in this
132:01 - in operator I have shown you how it
132:04 - works in the last video if you don't
132:06 - know and then just write B which is our
132:11 - list which contains these values okay
132:15 - and then what I'm going to do once again
132:19 - I forgot this colon
132:22 - I somehow I keep on forgetting this
132:24 - colum and then I will
132:27 - print num because this num holds the
132:33 - value well holds uh the list value one
132:39 - by one okay and I will just execute it
132:43 - and you see my print function prints the
132:48 - values in the list one by one by one
132:51 - right so in this way you can use for
132:54 - Loop and while loop and both of the loop
132:59 - you can use interchangeably so it's uh
133:02 - you know both Loop Works uh in the same
133:07 - way
133:08 - but the while loop the difference is in
133:12 - between while loop and for Loop is why
133:15 - when you are using while loop it uh you
133:18 - know uh it waits for the condition to to
133:21 - be true and it will keep on executing
133:24 - your code while your condition is true
133:28 - right and if condition is false it will
133:30 - go out of the loop and for Loop there is
133:34 - no uh you know condition it will just
133:37 - list out the you know values you give
133:40 - here
133:43 - okay hello guys welcome once again in
133:46 - this video I'm going to show you what is
133:48 - a function how to use a function and why
133:52 - we use function in Python so first of
133:56 - all what is a
133:58 - function so let's see what is a
134:01 - definition of function a function is a
134:05 - group of statement that together
134:08 - performs a specific task so basically we
134:13 - write a function to do a particular task
134:18 - again and again without reason writing
134:21 - the same code again and again and
134:24 - functions make your code
134:28 - readable and you know uh maintainable
134:32 - maintainable means uh if you want to uh
134:36 - you know change something in your code
134:40 - by writing functions it's easy to
134:43 - maintain your code okay so always
134:45 - remember whenever you want to write a
134:50 - specific uh logic or code again and
134:54 - again or more than once use a function
134:58 - instead okay so let's see how we can
135:02 - define a
135:03 - function so in Python you can define a
135:07 - function like this you need to use
135:10 - a uh keyword which is Def and then uh
135:16 - you give a space and give a function
135:19 - name and then in the brackets you give
135:24 - uh something called
135:26 - arguments okay so whatever you give in
135:29 - the brackets these are called arguments
135:33 - and there is no limits to arguments
135:36 - arguments uh you can Define any number
135:39 - of argument which you want to pass to a
135:42 - function and then a
135:45 - semicon and then comes the statements
135:48 - statements are the piece of code which
135:51 - you write inside a
135:53 - function now suppose I want to make a
135:57 - function to print uh hello to some name
136:03 - so either I can do print as we have been
136:08 - seeing that I can use print and I can
136:12 - say
136:16 - hello hello and the name for example I
136:19 - want to say hello Mark
136:22 - right
136:23 - so and I can print it but for example I
136:27 - have 25 names or 100 names which I want
136:32 - to say hello and I don't want to rewrite
136:35 - this print again and again by the way
136:38 - this print is also a function and we are
136:41 - passing the string as an argument to
136:44 - this print but print is a built-in
136:46 - function which I have shown you in the
136:48 - previous video what are built-in
136:50 - functions and how to use built-in
136:52 - function now let's make our function and
136:57 - what function we Define are called user
137:00 - defined function so we will Define a
137:02 - function for example call we will call
137:04 - our function Def and then name our name
137:08 - of our function will be hello for
137:12 - example okay and what we are going to do
137:15 - we are going to pass a variable so you
137:18 - can name your variable or any name you
137:21 - can give any name to your variable for
137:24 - example name or X or why or whatever you
137:31 - want to give an
137:34 - argument you can name your argument uh
137:38 - depend depending upon your wish so uh I
137:42 - will name my argument as name because
137:45 - it's more logical because I want to
137:47 - print name right and then I give this
137:51 - colon okay now after this colon inside
137:56 - the function we write statement so what
137:58 - we want to do we want to
138:01 - print hello and the name whatever we
138:05 - pass in a function right so we will say
138:09 - hello and print and then we pass this
138:13 - argument whatever argument will you will
138:15 - pass you will pass this argument to the
138:18 - print function and then what we want
138:21 - that uh we want to print hello and
138:24 - whatever name we will pass okay now I
138:28 - will just uh run this function or how we
138:31 - can use this function so function is
138:34 - defined now okay now how we can use this
138:38 - function we can can just call this
138:40 - function
138:42 - hello and then we can pass a name which
138:46 - is a string right so we want to pass uh
138:51 - function which takes a string okay so
138:54 - for example I say
138:56 - Mark okay and I press enter and it says
139:00 - hello Mark okay and once again I can
139:05 - just once again call
139:08 - hello and this time I pass a different
139:11 - name for
139:13 - example John and it says hello John and
139:18 - in a similar way you can pass any name
139:20 - it print other names also so what this
139:26 - for function has done for us it makes
139:30 - our code really you know readable
139:33 - because we are not R writing this uh
139:38 - piece of code which is print for example
139:40 - suppose you want to uh perform uh you
139:44 - know 10 or 20 line of code in one go and
139:50 - this these 20 line of code perform a
139:53 - particular logic and you don't want to
139:56 - you know write rewrite these 20 line of
139:58 - code again and again so you can use a
140:01 - function instead to enclose these 20
140:04 - line of code and then you can use this
140:07 - function so that you don't have to write
140:10 - this 20 line of code again again again
140:12 - and again you can just call a function
140:14 - by its name if it takes an argument you
140:17 - can pass the argument and then it will
140:20 - give you the
140:21 - result right now it's not necessary that
140:25 - you always has to pass any argument you
140:28 - can define a function without any
140:31 - argument also right so always remember a
140:36 - function can have zero argument or any
140:41 - number of arguments minimum is zero or
140:44 - no argument and maximum is depending
140:48 - upon you okay
140:52 - now uh there is
140:56 - a and one more thing I want to say here
140:59 - is function don't uh take only strings
141:03 - they can take numbers so let's uh make a
141:08 - little bit useful function to add two
141:12 - numbers so I will just Define a function
141:16 - by DF and I will uh name my function as
141:20 - add function okay and this will take two
141:24 - argument for example X and Y so I will
141:27 - just separate my arguments by a comma
141:31 - and then I will give a give this colon
141:35 - here and then I want to print the result
141:39 - okay so what I can say is I can
141:44 - return and return means giving the
141:48 - answer okay simply giving the answer and
141:51 - what I want to return I want to return
141:54 - the addition of x + y okay and now I
142:00 - will press enter two times that means my
142:03 - function is defined now I can use this
142:07 - function to add two values so I will
142:09 - call this function add and I want to add
142:13 - for example 100 and
142:17 - 500 okay and what with will what this
142:21 - will do it will add 100 500 and it will
142:26 - return the answer
142:29 - so if when it Returns the answer you can
142:32 - save your answer in some other variables
142:35 - for example I can define a variable
142:37 - called sum and I can save this sum in
142:41 - this variable okay so for example I
142:45 - Define a variable called sum 1 is equal
142:47 - to add 100 comma 500
142:51 - and I can press enter now my sum is in
142:54 - my sum one variable so I can print my
142:57 - sum one like this sum one and it gives
143:01 - 600 so what this function has done for
143:05 - us add function it has taken X and Y so
143:09 - X is assigned or 100 is assigned to X
143:13 - and 500 is assigned to Y and then it
143:17 - adds the value of X and Y which is 100
143:20 - plus 500 and it gives the result return
143:24 - the result and when a function return
143:27 - any result you can save it into another
143:31 - variable okay so it has saved uh this
143:35 - result into the sum variable and it
143:39 - returns and same thing you can do again
143:42 - and again so for example you want to add
143:46 - some other numbers for example 234 and
143:51 - 333 you can do it like this and you can
143:55 - call sum two and give will give you the
143:58 - result
144:01 - okay hello guys in the last video I have
144:03 - shown you how to use and how to define a
144:07 - function in Python in this video also
144:10 - I'm going to continue with functions and
144:12 - I'm going to show you how to use some
144:14 - other features in functions like default
144:17 - parameter and multiple parameters in
144:20 - function so let's get started in the
144:23 - last video I've shown you how you can
144:25 - declare a function so you can declare a
144:28 - function in Python like this def for
144:32 - example I want to make a function to
144:35 - print out the score of a student so I
144:37 - can
144:40 - say
144:41 - student uh score for example this is the
144:45 - name of my function and in this uh
144:48 - brackets I can pass parameters right for
144:51 - example name and score okay and then
144:56 - this colon and inside this uh function
145:00 - we can write the definition or the code
145:04 - to our function for example I want to
145:06 - print something print the student name
145:10 - and score I can just
145:14 - write
145:19 - the
145:20 - or something like name scored this much
145:24 - amount of uh marks so I can just write
145:28 - name and then comma and
145:34 - then
145:36 - scor and then
145:42 - comma this should be score right not
145:47 - scare comma marks right
145:57 - and this is simple you have already
146:00 - understood I think the concept of uh you
146:04 - know defining the function and how to
146:07 - print these values right and if I call
146:10 - this function it will just give me the
146:15 - answer for example I pass a name as Mark
146:19 - and
146:20 - score as
146:23 - 70% and it says marks Cod this much
146:27 - amount of marks right but sometimes you
146:30 - want that uh there are some default
146:34 - value which are already initializing
146:37 - these parameters for example in the case
146:40 - of
146:41 - databases it's a bad idea to save blank
146:46 - values or null values in the database so
146:49 - and you cannot depend upon the user that
146:53 - he can Define or you cannot you know be
146:57 - sure that user will Define a parameter
147:01 - for every function so what you can do in
147:05 - Python is you can Define default
147:07 - parameter so once again I'm going to
147:10 - take this function but I will initialize
147:14 - this function with some value so that it
147:17 - will not be null at any point for
147:20 - example Tom as name and score is equal
147:26 - to zero for example right
147:30 - now I can just print the score and name
147:35 - and the default value will remain just
147:38 - the same right and my function is
147:42 - defined and now when I use this function
147:46 - and even if I don't pass any parameter
147:50 - generally you have to pass the parameter
147:52 - when you define a function and when you
147:54 - define a function with parameters but
147:57 - when you initialize a function with
147:59 - default value you uh even skip passing
148:03 - the values to your parameter and once I
148:07 - call this function it says Tom scored
148:10 - zero marks because Tom is a default
148:13 - value and score of Tom is zero okay so
148:17 - Tom is a default name and zero is
148:20 - default Mark and so you can ask what is
148:24 - the purpose of this the purpose of this
148:27 - is if the user will not pass any value
148:31 - as an argument then default value will
148:34 - be taken otherwise if the user enters
148:37 - some valid name for
148:41 - example
148:42 - Mark and 85 marks and once again you can
148:50 - see it's printing marks code 85 marks
148:53 - okay so it has overwritten this tomor as
148:57 - Mark the name it has
149:01 - overwritten as Mark and the score is
149:04 - overwritten by 85 right now you can
149:10 - choose to you know pass the first
149:12 - parameter and skip the second parameter
149:15 - for example you can just pass Mark here
149:20 - and it says marks Code Zero marks
149:23 - because this it has taken as the first
149:27 - parameter and it has over it in the name
149:31 - but we haven't passed our score so it
149:33 - will take the score as default which is
149:35 - zero so it will print like this now for
149:38 - for example you want to pass this score
149:41 - and you want the name to be default what
149:44 - you can do once again take the
149:47 - function and this time just right
149:51 - score is equal to 99 for example it says
149:56 - Tom scored 99 marks right so Tom is the
150:00 - default value here and 99 is uh
150:04 - overwritten uh or zero is overwritten by
150:08 - 99 which you passed okay so this is
150:12 - about default uh parameter passing now
150:17 - there is a concept of uh passing
150:20 - multiple parameters to a function and
150:25 - how you can pass these multiple
150:27 - parameter for example uh you I will take
150:31 - the same example of
150:33 - student and you want to pass some
150:37 - parameters so I want to pass uh name of
150:41 - the student and I want to pass multiple
150:45 - score of the student for example
150:47 - students has um scored uh you know marks
150:52 - in language marks in programming marks
150:56 - in maths or marks in some other subject
151:00 - and you want to pass the parameters but
151:03 - you don't know the number of subject uh
151:07 - you know student uh is uh you know
151:11 - taking so what you can do in this
151:14 - condition you can just
151:17 - use the name as it is but for example
151:23 - you want to pass multiple scores you can
151:26 - just use
151:28 - estx and this estx says python
151:33 - that this parameter will be
151:37 - passed one as one parameter also or
151:40 - multiple parameters also so one or more
151:43 - parameter so our estx says uh to the
151:48 - python that this score can be multiple
151:51 - also or even it can be uh one also
151:55 - okay and it's saying
152:01 - invalid invalid uh syntax let's see
152:04 - what's the
152:06 - error yeah I have
152:08 - forgotten the def keyword to define a
152:13 - function so I will Define a function Def
152:16 - and then I will call This And once again
152:20 - I can
152:21 - print uh for example I will print first
152:25 - of all the
152:27 - name
152:29 - print name and then I will
152:34 - print
152:39 - scores okay and I will just call this
152:43 - function for example
152:46 - student and I will pass uh name
152:50 - [Music]
152:51 - as once again
152:53 - Mark and scores for example he has
152:57 - taken uh language course so he scored 55
153:02 - marks in this language course he has
153:04 - taken uh Math course he has scored 77
153:08 - marks he has taken uh programming course
153:11 - he scored 90 marks he has taken other
153:16 - courses physics 67 marks or multiple
153:19 - courses okay so this is a wild card kind
153:23 - of Entry which says you can pass one or
153:27 - more parameters right and you see it has
153:31 - printed first of all the name of the
153:34 - student which is Mark and then
153:38 - these these marks as a tuple if you
153:42 - don't know what is a tuple tle is just
153:44 - like a list but you cannot addit a list
153:48 - or you cannot even delete an element
153:52 - from a list you can just read this
153:55 - element from a tle right so tle is just
153:59 - like a list but the only difference is
154:02 - you cannot modify or delete any elements
154:04 - from this tle so this is uh tle right so
154:12 - in this way you can uh even uh pass
154:16 - multiple values using this estx and it's
154:19 - not necessary that you need or to pass
154:21 - only two parameters you can just pass
154:24 - one parameter for example
154:26 - dep score something like this
154:31 - asri
154:33 - score it will be valid I forgot this
154:37 - called
154:39 - colon like
154:43 - this
154:44 - and what's the problem here
154:52 - so okay I left some indent here which
154:56 - it's saying unexpected indentation okay
155:01 - and you want to
155:03 - print
155:07 - score it will be totally valid when you
155:11 - uh call this function score and you can
155:15 - pass multiple values one comma 3 some
155:19 - some marks multiple
155:21 - marks
155:24 - right and it will give you a
155:27 - toule so in this way you can pass
155:30 - default parameters to a function and you
155:33 - can pass multiple parameters to a
155:36 - function in
155:38 - Python hello guys in this video we are
155:40 - going to learn about creating classes
155:44 - and using classes in Python now we all
155:47 - know that python is an objectoriented
155:51 - programming language and in
155:54 - objectoriented programming language a
155:57 - class is an extensible program code
156:01 - template for creating object providing
156:05 - initial values of states and
156:08 - implementations of
156:10 - Behavior now this definition of class
156:14 - you may think that you know what is this
156:18 - so let me give you
156:20 - example suppose you want to create a
156:23 - class or you want to save some data uh
156:27 - for a person now person has some
156:31 - attribute for example first name last
156:35 - name and uh for example you want to
156:38 - print uh the person's name so a class
156:43 - can also have
156:46 - member functions or member methods right
156:51 - so we are going to take this example of
156:54 - person and we are going to create a
156:58 - person class and we are going to uh give
157:00 - the attribute to this class as first
157:03 - name and last name and we will try to
157:06 - print the person's name okay so let's
157:10 - see how we can create a class in Python
157:15 - now in Python the class is created by
157:18 - using the word
157:20 - word class itself and then you give the
157:24 - name to the class in our case we want to
157:27 - give uh the name to the class is
157:31 - person so we will give this person name
157:36 - to the class and then this colon comes
157:40 - and inside this class you can
157:44 - Define member functions or member
157:48 - variables
157:50 - now how you can uh Define member
157:52 - functions in a class you just need to
157:57 - give for example I want to uh print the
158:01 - name first name and last name of the
158:04 - person I can create a I can create a
158:09 - method to print this so I can create a
158:13 - function like this
158:16 - print full name for example this is the
158:21 - function name but we all know that
158:23 - function whenever we want to define a
158:25 - function we use def in front of a
158:28 - function right and then we can pass some
158:32 - argument
158:34 - here
158:35 - now whenever we use a function inside a
158:40 - class the first argument we give to the
158:44 - member function is a keyword called self
158:50 - and this self is nothing but a pointer
158:55 - or the self points to the class itself
158:59 - okay so this class whenever we create an
159:03 - instance of a class which I'm going to
159:05 - show you how you can create an instance
159:08 - or object of a class this self point to
159:12 - the object of the class so just wait for
159:15 - a while and you will understand and then
159:18 - you
159:20 - the name of the argument so for
159:23 - example first name
159:27 - and
159:29 - last
159:30 - name okay then
159:34 - colon and then you can give the
159:37 - definition to the class so for example I
159:41 - want to um set the value of first name
159:46 - and last name so what I can do is I can
159:49 - use use the same keyword
159:52 - self to call the first name variable and
159:57 - last name variable of the class this
160:00 - should
160:02 - be last right and then we use a DOT
160:08 - separator to call them so for example we
160:11 - want to set the first name we just use
160:14 - self and first name is equal to First
160:20 - name and
160:22 - then in a similar way we can just Define
160:26 - the second variable or SEC setting the
160:29 - second variable which is last name so
160:33 - self. last name is equal to last name
160:36 - okay it's better
160:39 - to rename this function as set full name
160:44 - okay so what this function is doing it's
160:48 - setting the first name and last name to
160:51 - the variables in a class or member
160:54 - variables in a class which are first
160:56 - name and last name so whatever argument
160:59 - you pass here first name and last name
161:01 - will be passed to the member variable of
161:06 - the class which are also first name and
161:08 - last name okay now we have already
161:13 - created this class and now we are going
161:16 - to create a second member fun function
161:19 - to print this
161:22 - um first name and last name or full name
161:25 - okay so we will Define a second function
161:28 - called
161:32 - print full
161:34 - name and this will not take any argument
161:39 - and we are just going to
161:44 - return or we are just going to print uh
161:49 - the first name and last name okay so we
161:52 - are going to
161:54 - print here first name so to call any
162:00 - member function or member variable of a
162:02 - class you just need to use self and self
162:06 - just indicates that it's a member
162:10 - variable or member of a class okay so
162:13 - always use self and we are going to
162:15 - print uh self. first name which is the
162:18 - first name and then we can just give a
162:23 - little space here to separate them first
162:27 - name and last name and then you can just
162:30 - take the last name and print
162:33 - it now in order to create an instance of
162:37 - a class so how you can create an
162:40 - instance of a class this is just a
162:44 - definition of the class right you have
162:46 - done defined the definition of the class
162:50 - right now in order to create the
162:52 - instance of a class so that we can use
162:55 - this
162:56 - class we can use this class by creating
163:00 - the instance of the class so whenever
163:03 - you want to end the class and you want
163:06 - to execute in this class just remember
163:08 - that you start from
163:11 - the corner here right so and don't
163:15 - forget about indentation in uh this
163:19 - class declaration so when you start with
163:22 - no indentation here then you are in the
163:25 - new line and you are outside the class
163:28 - okay now in order to create a instance
163:31 - of uh the class or object of the class
163:35 - we can just Define the object name for
163:41 - example
163:43 - person
163:46 - name so this is the object name or
163:49 - instance name of a class we want to give
163:52 - and then is equal to the name of the
163:57 - class and then this these brackets okay
164:03 - and this will create the object of
164:06 - person
164:07 - class with a name person
164:11 - name okay so let's try to run the
164:14 - program and let's see if it contains any
164:17 - error or not save okay and it doesn't
164:22 - contain any error so it's running fine
164:25 - but we want to use the member function
164:28 - of the class so how we can use this
164:32 - member function of a class we can use
164:35 - the member function of a class using
164:38 - this instance of the class or object of
164:41 - the class okay so just take the object
164:44 - of the class and in the next line we
164:48 - just copy the object of the class
164:51 - Dot and then we can see there are two
164:55 - options which are member functions of
164:58 - the class print full name and set name
165:01 - so I'm going to take set
165:03 - name set name of the class function so
165:07 - this is the member function of a person
165:09 - class and we are accessing this member
165:12 - function using the instance or object of
165:15 - the class okay and in between we give
165:18 - dots separator so that now this instance
165:22 - can call the member functions or member
165:27 - variable of the class and now we can set
165:31 - the first name and last name for
165:37 - example programming is the first name
165:42 - and knowledge is this last
165:47 - name okay okay so we have set the first
165:51 - name and last name of the person and
165:57 - just remember that this is used as a
166:00 - default so this uh will be automatically
166:04 - taken by by your class and these are the
166:08 - two important uh you know two important
166:13 - argument which you need to uh pass and
166:16 - this will be taken automatically okay
166:19 - so self is by default for a member
166:23 - function invisible in a sense that we
166:27 - you just need to pass the other
166:30 - arguments except for the self argument
166:34 - so first name we passed as programming
166:37 - and last name we passed as knowledge so
166:40 - this is
166:42 - setting the first name and last name of
166:44 - a person now in order to print this name
166:49 - we can once again use the instance or
166:51 - object of a class dot we can call the
166:55 - second function of a class called print
166:58 - name which takes no argument
167:03 - right and now let's try to save the
167:06 - program and run this so run this and
167:11 - what it's
167:13 - saying it's
167:16 - saying that
167:21 - this member function which you are
167:24 - calling which is print full name doesn't
167:28 - have any argument which is zero argument
167:31 - right takes zero argument but one was
167:36 - given right
167:39 - so I intentionally leave the self in
167:43 - this function so that we can see this
167:46 - error so always remember you have to at
167:51 - least pass self whenever you define a
167:56 - member function in a class so if even if
168:01 - it doesn't take any parameter or
168:03 - argument you need to pass self to a
168:06 - member function okay now when I save the
168:10 - program and run it it will run fine
168:14 - right and it prints the name programming
168:17 - space knowledge
168:19 - which I wanted to print right so always
168:23 - remember few
168:25 - things whenever you define a member
168:28 - function in a class always use self as a
168:32 - first argument and then give your rest
168:37 - of the
168:38 - argument and even if your function or
168:42 - member function doesn't take any
168:44 - argument you just or you must pass at
168:48 - least one argument which is self okay on
168:53 - what is self self is just a pointer to
168:58 - the class instance so this self is
169:03 - pointing to this person name and this is
169:07 - called class instance and whenever we
169:10 - create the class instance it will assign
169:13 - this person here at the place of self
169:18 - and then
169:20 - it will be name will be set as person
169:23 - name which is this instance do first
169:25 - name Person name. last name and then
169:30 - whenever we call this function it will
169:32 - print person name do first name person
169:36 - name do last
169:38 - name so in this way you can use or you
169:42 - can create classes in Python there is
169:46 - lot more uh in defining an creating or
169:49 - using classes in Python this is just uh
169:53 - starting or create how to create a class
169:55 - in Python so I will uh show you how to
170:00 - uh use other uh functionalities in class
170:04 - in later videos and hopefully you
170:08 - understood the concept of the
170:12 - class hello guys in the last video I've
170:14 - shown you how to use classes in Python
170:18 - now in this video I'm going to show you
170:21 - how you can use Constructors and
170:24 - destructors with classes in Python these
170:28 - Constructor and Destructor are also
170:30 - called initialization and deletion
170:34 - member functions of the class so first
170:37 - of all let's see how we can use
170:39 - Constructor in Python and the last video
170:42 - I have given you a small little example
170:45 - of class and how to create a class CL
170:49 - and we have created a person class and
170:52 - we have created two member Function One
170:54 - member function to set the values and
170:57 - other member function to print the name
171:02 - right so first member function we named
171:05 - it as set full name and in this function
171:08 - we we were passing two arguments first
171:11 - name and last name and this print full
171:15 - name member function we were using to
171:19 - print the name of the person and then I
171:23 - have shown you how you can create an
171:26 - instance or object of a class uh like
171:29 - this and how to use these member
171:32 - function like this using the instance of
171:34 - the glass now I'm going to take the same
171:38 - example to show you how you can use
171:41 - Constructor with this same
171:44 - class
171:45 - so first of all to define a con structor
171:49 - you just use normal function definition
171:53 - with DF and then you
171:56 - give double
171:59 - underscore in it then double underscore
172:03 - and give the bracket and give colon here
172:07 - and in here as any other uh member
172:11 - function you can perform any task so for
172:14 - example I want to uh print something
172:19 - that
172:21 - uh our class is created for example so
172:26 - I'm just printing our class
172:31 - is
172:33 - created not like this but class
172:37 - is
172:39 - created right so first of all what is
172:44 - the use of this
172:47 - Constructor generally in programming
172:50 - languages Constructors are used to
172:53 - initialize the value okay so whenever
172:57 - you create the instance of a class so we
173:00 - are creating the instance of a class
173:02 - here as soon as you create the instance
173:05 - of a class this Constructor is called
173:09 - immediately so you don't need to
173:11 - explicitly call The Constructor of a
173:15 - class you may call it or you may not
173:17 - call it but don't forget to give the
173:21 - self argument as I have shown you in the
173:24 - last video that you need to uh use this
173:27 - keyword self with every member function
173:30 - of a class and this indicates to the
173:33 - instance of a class so program person
173:38 - name will be replaced by selfia in the
173:41 - last video I've shown you so as soon as
173:44 - I create an instance of a class this in
173:49 - it member function will be
173:52 - automatically called so you don't need
173:54 - to explicitly call this member function
173:59 - so I'm going to run this save
174:03 - run and you can see here it gives us the
174:07 - result our class is created even though
174:11 - we haven't called
174:13 - our init member function
174:16 - explicitly it's printing first this our
174:20 - class is created that means as soon as
174:23 - you create this instance of a class this
174:28 - member function is called right so
174:32 - always
174:33 - remember the Constructor definition is
174:37 - reserved here with double underscore in
174:40 - it and this also ends with double
174:43 - underscore so this is the reserve
174:46 - keyword in Python to called Constructor
174:50 - you cannot give any definition or any
174:52 - name to the Constructor it's reserved
174:55 - which is this one in a same way we can
175:00 - use Destructor to destroy the instance
175:03 - of a class okay so and destructors are
175:08 - also called whenever a instance is out
175:13 - of scope so let me show you how you can
175:17 - call Destructor
175:19 - first so Destructor also you can just
175:23 - Define it as a normal function with two
175:27 - underscore
175:29 - D and this these two underscores and
175:33 - then just call Self here keyword and
175:39 - then give colon
175:42 - here and then you can just uh
175:48 - write the functionality of the code so
175:52 - for example I will
175:55 - print
175:58 - uh I can print our class instance is
176:02 - destroyed so
176:05 - our
176:11 - class
176:13 - object is
176:19 - destroyed and this is also reserved in
176:23 - Python with double uncore deel and uh
176:27 - this also ends with double
176:31 - underscore and this function is also
176:33 - automatically called whenever your class
176:38 - or in class instance goes out of scope
176:42 - out of scope means that this uh class
176:47 - instance is is no longer used so in here
176:51 - after this code our class instance scope
176:55 - is completed because this is no longer
176:59 - used in further code because there is no
177:02 - code obviously right then whenever this
177:06 - uh class or person name goes out of
177:09 - scope this deletion member function will
177:12 - be called automatically and it uh just
177:16 - basically the use of this Destructor or
177:19 - deletion member function is to a garbage
177:24 - collection kind of U uh use so it just
177:28 - collects the garbage or all the
177:32 - resources and destroy all the resources
177:35 - which are used by this instance which is
177:38 - person name so I will just save my
177:40 - program and run
177:42 - it and you can see here whenever I I
177:48 - just created
177:52 - this it's not printing this deletion
177:57 - member message here but whenever you can
178:00 - you use the instance of a class
178:06 - dot underscore uncore
178:09 - deleting so underscore deletion
178:13 - member and then whenever you run this
178:19 - this is printed our class object is
178:21 - destroyed so whenever you use this um
178:25 - deletion member function it destroys all
178:29 - the resources which are used by your
178:32 - class instance okay so this is the use
178:36 - of this Destroyer or
178:39 - Destructor
178:41 - now it's not uh you know compulsory that
178:44 - you cannot pass any uh argument with
178:47 - this
178:48 - initialization you can pass argument for
178:51 - example I can pass uh for example I can
178:53 - pass any argument uh for example I want
178:56 - to pass ID of uh the person I'm I want
179:01 - I'm using or I want to print the name of
179:04 - so I want to initialize the ID of a
179:07 - person like this I can just uh pass this
179:11 - argument with my initialization member
179:14 - function and then I can just use self
179:18 - dot
179:20 - ID is equal to
179:23 - ID and then I can call this
179:27 - ID uh in my Destructor also so for
179:31 - example uh this Destructor can also take
179:34 - some arguments and we can call this
179:37 - self. ID for example I will print this
179:39 - ID here and then I can just print the
179:44 - message right so it's not necessary that
179:47 - uh our
179:49 - initialization or our Constructor has to
179:52 - uh has to initialize with no argument it
179:56 - can take any number of argument as an
179:59 - initialization but whenever you give
180:01 - this argument in the initialization here
180:04 - uh then whenever you create the instance
180:07 - you need to pass the that argument here
180:11 - so we are creating the instance here and
180:14 - because the initialization takes this
180:16 - one argument which is ID we are passing
180:19 - five as an ID here in the
180:22 - initialization okay so this is how you
180:26 - can initialize it and now whenever you
180:29 - run your program once
180:33 - again you can see here our class is
180:36 - created once again and as soon as this
180:39 - this class is created we are setting the
180:42 - ID of a person as we pass in the
180:46 - Constructor which is here and then self.
180:50 - ID is set here and whenever we call the
180:53 - destructor we are once again calling the
180:56 - ID of uh the person which is this one
180:59 - and then printing the message this one
181:02 - right so in this way you can use
181:05 - Constructor and Destructor or
181:07 - initializer or and
181:12 - deletion hello guys in this video I'm
181:14 - going to show you what is inheritance
181:17 - and what are are subclasses and super
181:20 - classes in Python so we all know that
181:24 - python is an object oriented programming
181:27 - language and inheritance is one of the
181:30 - most important Concepts in object
181:34 - oriented programming
181:36 - language now what is
181:38 - inheritance inheritance allows us to
181:41 - define a class in terms of another class
181:46 - which makes it easier to create and
181:48 - maintain our
181:50 - application so for example uh you have
181:53 - created a class which is generic in
181:58 - nature and you want to you reuse it
182:01 - again and again in different situations
182:04 - you can use
182:06 - inheritance to uh you know show or
182:10 - inherit some of the trades or all the
182:14 - trades from the class to your a class
182:19 - which you want to make so you don't need
182:22 - to write a class from the scratch you
182:26 - can inherit from the super class the
182:30 - class from which we are inheriting is
182:33 - called a super class and the class which
182:36 - is inheriting is called a subass so let
182:40 - me give you an example for example I
182:43 - create a class which I call this is a
182:51 - parent parent okay and this class
182:56 - has two values or two
183:02 - variables value one is equal
183:07 - to uh let's say it's a string so I say
183:12 - this
183:14 - is value
183:16 - one and and in the same way I will
183:21 - Define value two this should be value
183:25 - right so I will Define value two
183:30 - variable which is the second member
183:33 - variable of this class and this is value
183:36 - two okay
183:41 - now for example I want to
183:45 - reuse the variables which are their
183:49 - member variables which are there in the
183:51 - parent class and I want to create a
183:54 - second class and I want to reuse these
183:58 - member variables in other class how we
184:01 - can do it so I will
184:04 - Define uh second
184:07 - class for
184:09 - example class and I will name it
184:14 - as
184:15 - child and this class class wants to
184:20 - reuse these member variables from the
184:23 - parent
184:26 - class so what I can do is I can inherit
184:30 - from the parent class in the child class
184:34 - and to inherit the parent class in the
184:38 - child class we just use these two
184:41 - brackets and inside these two brackets
184:44 - we just pass the name of the class from
184:47 - which we want to inherit so in this case
184:50 - we want to inherit from this parent
184:52 - class so we can just
184:55 - pass this parent class name and in the
184:58 - brackets right now we can use this
185:04 - values from the instance of our child
185:08 - class so for example I don't want to do
185:12 - anything here I can just write Pass and
185:16 - Pass if you don't know what is pass pass
185:19 - is just a
185:21 - placeholder so uh you know it doesn't do
185:26 - anything but if suppose you don't want
185:30 - to implement your class and you want to
185:33 - uh leave your class as it is then pass
185:38 - will help you to avoid any errors so
185:41 - let's see what happens when we don't use
185:44 - pass here and I will save my program and
185:48 - run
185:50 - it and it says unexpected indent this
185:55 - indent should not be here run it once
186:01 - again so it shows an error and what is
186:05 - the error because we haven't given uh
186:09 - pass here it uh expect or
186:12 - python expect that we Define some you
186:17 - know definitions of member variables or
186:21 - member functions here so what we can use
186:24 - is we can use pass in order to avoid any
186:29 - errors now whenever we want to uh make a
186:34 - child class instance for
186:38 - example child like this is equal
186:43 - to and we want to make the instance of
186:46 - this child class we can make it like
186:51 - this so we just can make the instance
186:55 - child you can just give underscore to
186:59 - differentiate this instance from this
187:02 - class but let's uh first create an
187:06 - instance of the parent class and then we
187:09 - will create the instance of
187:14 - child parent
187:17 - and parent is equal
187:21 - to
187:23 - parent so we have created the instance
187:25 - of parent class and from this instance
187:28 - we can call parent dot value one which
187:34 - is this one and we just want to print
187:37 - this parent. value one so we can
187:42 - just
187:44 - print and inside our print we can just
187:48 - pass this
187:49 - parent. print one
187:53 - here and let's uh say we will Define it
187:57 - this child class later so I will just uh
188:01 - run this once
188:03 - again and it prints this is value one
188:07 - okay in a similar manner you can call
188:10 - second value from parent and this you
188:13 - already know
188:15 - right now suppose child instance want to
188:19 - use value one and value two I create the
188:22 - instance of child and because I'm
188:25 - inheriting from my parent class this
188:28 - value one or and value two which are
188:32 - member member variables of this parent
188:35 - class is available to use from the
188:39 - instance of child class also
188:42 - because by inheritance we are allowing
188:47 - the the super class which is this parent
188:50 - class from which we are inheriting so
188:53 - the class from which we are inheriting
188:55 - is called super class and the class
189:00 - which is inheriting from Super class is
189:03 - called
189:05 - subclass so from this instance we can
189:09 - call
189:10 - this member Val values or variables from
189:15 - the parent
189:16 - class so I can just once again copy this
189:21 - uh print value one but this time I will
189:25 - use the instance of child class and you
189:30 - can see here I haven't implemented
189:32 - anything in the child glass
189:35 - except the inheritance right so I will
189:39 - just run the program once
189:41 - again and it it prints this double times
189:47 - so for example I delete this to
189:50 - illustrate this example clearly I will
189:54 - once again run this and it prints this
189:58 - is value one and this is value two which
190:00 - is printed by the instance of child
190:03 - class right that means uh we can use the
190:09 - member variables or member values of
190:13 - parent class when we inherit from parent
190:16 - class to a child class right now you can
190:21 - inherit from multiple classes so for
190:25 - example you have parent class one you
190:29 - have parent class
190:33 - two and uh you want
190:36 - to inherit from both the classes you can
190:40 - inherit from parent one like this comma
190:45 - parent two like this okay so you can
190:49 - even inherit from two classes or
190:52 - multiple classes at the same time you
190:55 - just need to separate those parent class
190:58 - by this
191:00 - comma okay so just remember this so in
191:03 - this way you can use inheritance in
191:07 - Python and I hope you have enjoyed this
191:09 - video please wait comment and subscribe
191:11 - and bye for now