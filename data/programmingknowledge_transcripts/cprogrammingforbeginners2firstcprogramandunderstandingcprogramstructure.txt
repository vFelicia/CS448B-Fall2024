00:01 - hello guys welcome to the second video
00:02 - tutorial on C programming for beginners
00:06 - in the last video I have shown you how
00:08 - you can download code blogs which is a
00:11 - C++ IDE in which we are going to uh
00:15 - develop our C code and we are going to
00:19 - compile and run and test our code using
00:23 - this code blogs now in this video I'm
00:26 - going to show you how you can create
00:28 - your first c pro program and what is the
00:33 - program structure of this C program so
00:38 - let's get started first of all open your
00:40 - code blocks and then go to file and to
00:45 - create a new program you just need to go
00:48 - to new and then here you can go to the
00:54 - project so go to
00:56 - project and in here you can uh find find
01:00 - few options but the option we are
01:04 - interested in is console applications so
01:07 - select this option called console
01:10 - application and click
01:13 - go and then it will show some
01:18 - uh message you can read this and you can
01:22 - click next and now we are going to
01:25 - create a c program so make sure that
01:29 - this C is selected here and click next
01:34 - and in here you need to give the name to
01:38 - your project so for example I want to
01:41 - give name to my project as
01:46 - my
01:47 - prog okay so this is the name of the
01:50 - project what name of the project depends
01:53 - upon you whatever name you want to give
01:55 - you can give it to the project and by
01:58 - browsing this you can uh change the
02:01 - directory in which you want to save your
02:04 - program so I will leave it as default
02:06 - but you can change it and just note this
02:10 - path so that you can see the source file
02:13 - if you want to see okay and click
02:18 - next and this is uh generally is showing
02:22 - the basic information about your project
02:25 - that it's going to use gnu GCC compiler
02:29 - which which we are going to use to uh
02:32 - compile our application and it's going
02:35 - to create two uh version of your project
02:38 - one is called debug and other is called
02:41 - release for now it's not necessary to
02:44 - know all these things because uh we are
02:47 - beginners right so just click
02:52 - finish and when you click finish you
02:55 - will not see anything on this uh window
03:00 - but on the right hand or left hand side
03:03 - on the project tab make sure it's
03:06 - project tab you will be able to see a
03:09 - project name which is given by by you
03:12 - and a folder called source and inside
03:15 - this folder there is a file called C do
03:19 - uh main. C right and once you click this
03:23 - file maid. C you will be able to see the
03:27 - hello world program here
03:31 - now you can press control and scroll
03:35 - your mouse to make your code you know
03:39 - font size bigger or smaller so in order
03:43 - to make it bigger just press your
03:45 - control and scroll your mouse okay so
03:49 - I'm making it a little bit larger so
03:52 - that you can
03:53 - see and this is the basic structure of
03:56 - the
03:57 - program uh and it's called called hello
04:00 - world program it's automatically created
04:04 - by code blocks for us so let's see we
04:09 - will go line by line and let's see what
04:13 - uh this code means so the first line of
04:17 - or rather first two lines which start
04:20 - from this hash symbol are called
04:24 - pre-processor command there are other
04:27 - pre-processor command also but these are
04:29 - the very most basic pre-processor
04:33 - command and a pre-processor
04:36 - command
04:38 - include
04:40 - includes a header file into your project
04:44 - so whenever you create a c
04:48 - program there is already some files
04:52 - which we need to include in our project
04:56 - in order to write a program and this
05:00 - pre-processor uh command which is this
05:04 - hash include includes the file name
05:07 - which you give here and this are the
05:10 - most uh important files which uh we need
05:13 - to create a simple program and the first
05:16 - file is called stdio which stand for
05:20 - standard input output and this file is
05:24 - responsible for taking the input or
05:27 - printing outputs like this print app uh
05:31 - which I'm going to describe you in a
05:33 - moment so this
05:36 - function function also I will uh explain
05:38 - you in a moment but this uh is due to
05:44 - inclusion of this file now there is a
05:47 - file called STD lib which is this file
05:52 - and this file also we need to include
05:56 - because main whenever you write a c
05:59 - program and whenever you compile and run
06:01 - try to run this program your uh compiler
06:06 - or whenever you run Pro run your program
06:11 - your compiler sees the main function or
06:14 - searches for the main function in your
06:17 - project and this is like a entry point
06:20 - to your uh program so this main is the
06:25 - part of standard li. Edge so these are
06:29 - called pre-processor
06:31 - compiler
06:33 - now this int
06:36 - main is a function and it's a very basic
06:41 - function and it's
06:43 - a built-in function which uh every
06:47 - program must have and by this mean C++
06:52 - knows that it is the entry point of your
06:57 - program so every project object must
07:00 - have at least and only one main uh
07:06 - function and what is a function function
07:10 - is a piece of
07:12 - code which you can you know execute for
07:17 - now you just need to know about this uh
07:21 - is a function is a piece of code which
07:24 - you need to uh you know which you need
07:27 - to execute some piece of code okay and
07:32 - the most basic function is Main and most
07:36 - important also function is main Now
07:39 - function has uh two or three basic uh
07:43 - things one is a return type which is int
07:47 - int stand for
07:48 - integer so this is int int is a data
07:53 - type which stands for integer and this
07:57 - main is the name of the function which
07:59 - is is by default uh you have to give in
08:03 - small letters and this bracket takes an
08:07 - argument and for now we are not passing
08:10 - any argument so it's empty so every
08:14 - program must have this main function and
08:19 - because we are returning
08:21 - integer we need to end our program with
08:25 - return Z return zero is just like a
08:29 - success for your main program so for now
08:33 - you just need to know that if you return
08:35 - zero and if you reach till this point
08:39 - your program has run
08:41 - successfully okay now print
08:45 - F this printf is a part of standard io.
08:52 - file so there is a function in this file
08:56 - called printf and this printf helps
08:59 - helps us to print a string on the
09:03 - terminal okay so this is a print F and
09:08 - inide this bracket whatever you write
09:11 - inside this print F in double code so
09:16 - always remember you need to write in
09:18 - double quod inside the brackets whatever
09:21 - you write it will be printed on the
09:23 - terminal so for now you are writing
09:25 - hello world so it will be printed on the
09:28 - terminal now this back
09:32 - sln changes the
09:35 - line which I'm going to demonstrate in a
09:38 - moment so this will not be printed but
09:41 - this is a special uh you know string or
09:45 - character which will help you to change
09:49 - the line of your uh you know
09:53 - print now every line ends with this
09:59 - semicolon so this semicolon tells C that
10:04 - this line of code is ending here and
10:07 - from the next line we are going to write
10:10 - another line of code okay and every
10:15 - function is started with these opening
10:19 - and closing curly
10:21 - braces
10:23 - okay so this is the basic structure of a
10:26 - c program now once you you have
10:29 - understood you can see every line is uh
10:33 - starting or ending with the semicolon
10:36 - and it's uh not necessary that you need
10:39 - to give this kind of indentation you can
10:43 - you know write a line of code here or
10:46 - like this or you know position doesn't
10:51 - uh you know it's not important you can
10:54 - you give two line gap between two codes
10:58 - or you know two lines of code or
11:01 - whatever but in order to uh you know
11:04 - show or make your program
11:07 - presentable there is a you know design
11:10 - of a code which is uh best uh looking so
11:15 - this in this way your program looks good
11:18 - that's why we write it like this now in
11:22 - order to run your program you need to
11:25 - compile your program and in the last
11:28 - video I have sh shown you or I have told
11:30 - you what is compilation compilation
11:34 - helps your programs to convert this
11:38 - program into the machine language which
11:42 - your machine can understand this is the
11:45 - code which is readable by human but it's
11:49 - not understandable by the computer so
11:53 - compiler will help us to convert this
11:56 - code which is human readable to convert
11:59 - it into machine readable code and how
12:02 - you can compile your code there are
12:05 - three buttons in code blocks which is
12:09 - this one build run and build and run at
12:13 - the same time so to build your program
12:16 - build means compile compile and builds
12:19 - are same so whenever you click this
12:23 - build it will compile your program now
12:27 - there is one tab here
12:29 - and this tab also has this option called
12:32 - build run and run and build so you can
12:36 - go here also and build your program now
12:40 - I'm in order to build your program you
12:42 - always need to save your program first
12:45 - so always click this save icon so to
12:49 - make sure that your pro program is saved
12:52 - and then click this build button and
12:55 - this whenever you click this build
12:57 - button the out output of your
12:59 - compilation will be shown in this build
13:03 - log and if you don't see any error here
13:07 - you see here zero errors zero
13:11 - warnings and this means that a program
13:15 - contains zero errors and zero warnings
13:19 - so compiler also helps us to check
13:22 - whether our
13:23 - program is or we have written our
13:27 - program correct or not
13:29 - okay now once your program is uh
13:32 - compiled successfully with zero or
13:35 - errors you can run your program with
13:38 - this green button just click this button
13:41 - and now our program is running and it
13:43 - prints hello world and then it prints
13:47 - some uh
13:48 - something which uh doesn't interest us
13:53 - it's uh just thrown by uh you know
13:56 - terminal so this is is what we are
13:59 - Printing and it's just uh saying that uh
14:02 - press any key to continue and whenever
14:05 - we press any key this terminal will go
14:08 - so this means our program is running
14:13 - successfully
14:15 - now if you want to build and run your
14:18 - program at the same time you can just
14:21 - click this button uh and this button
14:23 - build and run will build your program
14:26 - also and run your program when I click
14:28 - this it will build and run my program at
14:31 - the same
14:32 - time now whenever you do some mistakes
14:37 - in writing your
14:39 - code your compiler will give an error
14:43 - for example by mistake I left some
14:47 - unknown
14:48 - characters here after my print app print
14:52 - F function here and after the semicolon
14:56 - which is unknown to uh the C
14:59 - compiler so whenever we save our program
15:02 - and compile it this will give us
15:07 - compilation error you see error and it's
15:11 - showing expected semicolon before a
15:15 - return right and it's not we haven't
15:19 - given semicolon here so it's uh giving
15:22 - us the error we added semicolon but
15:24 - still it's unknown to uh your C programs
15:28 - so once again I compile
15:31 - it and it will still give us error
15:35 - because it says error this word is
15:40 - Undeclared right so whenever you write a
15:44 - code which is unknown to C it will give
15:47 - you the error and this red mark where or
15:51 - from where which line this error is
15:54 - coming from so in this way you can check
15:58 - whether you have written uh the correct
16:01 - uh program or not so this is to check
16:04 - also you compile a program to check
16:07 - whether you have written something uh
16:09 - good or good or you have written
16:11 - something which is correct and to
16:15 - convert your program into the machine
16:17 - language and this to run the program you
16:20 - just click this button and it will run
16:22 - the program so this is how the C
16:26 - structure of program program looks like
16:30 - and this is how it works so I hope you
16:33 - have enjoyed this video please wait
16:34 - comment and subscribe and bye for now