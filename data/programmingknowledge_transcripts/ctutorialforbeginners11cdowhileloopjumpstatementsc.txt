00:00 - hey guys welcome to programming
00:01 - knowledge in this video we'll be looking
00:03 - at do by loop and also the jump
00:05 - statements and c-plus please let's get
00:08 - started in the previous video we looked
00:10 - at four loops and while loops right so
00:12 - let me just write down their basic
00:14 - structure so you have a counter you have
00:17 - a condition and then you have a growth
00:20 - rate of four the counter so that this
00:22 - critical condition becomes false at some
00:24 - point of time right time for while loop
00:26 - you define the condition inside a
00:29 - parenthesis and then you have the body
00:31 - of the loop where you define the growth
00:34 - rate of the particular cut fountain
00:36 - right so now if you observe if this
00:40 - particular condition is false at the
00:42 - beginning itself this whole loop is not
00:44 - going to run right so what I am talking
00:46 - about is if I declare some variable like
00:50 - int I equal to zero and in place of this
00:53 - condition if I give eyes less than zero
00:55 - and this growth can be anything so let's
00:58 - say I equal to I plus 10 something like
01:00 - that so now if you see the starting
01:03 - value of I is zero so once this
01:05 - condition is checked it is false so this
01:08 - whole loop is not going to execute this
01:09 - will so if I write something like this
01:13 - is the for loop statement so this whole
01:18 - statement is not going to be executed at
01:20 - all if you just start a new line also so
01:22 - this is the escape sequence of the new
01:24 - line so now the same will happen with a
01:28 - while loop also so if I just say J equal
01:31 - to 0 let me just write down the same set
01:33 - of condition so J is less than 0 and the
01:36 - growth will be J equal to JM Preston
01:39 - right and let me write on that
01:41 - particular statement so see out let me
01:44 - just copy this thing right and this one
01:50 - will be the while loop statement so if I
01:53 - execute this particular program I won't
01:56 - be getting anything so now if I just try
01:58 - to execute it you will be saying that I
02:00 - have a blank output right I don't have
02:02 - anything over here
02:03 - so what if I want to execute this
02:07 - particular statement or what is this
02:09 - particular set of statements inside the
02:11 - loop at least once
02:13 - sometimes you're given a middle and then
02:16 - you are asked to choose something from
02:17 - that right so you you have something
02:20 - like this you have choose your option
02:25 - and then you have first one second one
02:28 - third one and so on so this will
02:31 - continue and then you will be given a
02:33 - choice and you can enter your choice
02:35 - so in programs like this these are
02:37 - called menu driven programs these are
02:39 - called menu driven programs and in
02:43 - programs like this what happens is you
02:46 - need to execute this whole set of
02:48 - operations at least once if I directly
02:50 - press three over here let's say three
02:53 - means exit rate so you have some
02:55 - functions in one and two and three is
02:57 - exits so if I press three I should exit
02:59 - out of a program but for that to happen
03:01 - this whole set of code should execute at
03:04 - least once right so in this kind of
03:06 - loose that doesn't happen it will
03:09 - directly stop when this particular
03:12 - condition is false so in the beginning
03:14 - itself the condition is false it is
03:16 - going to break out of the loop so in
03:20 - such kind of situations what we are
03:22 - going to do is we are going to use the
03:24 - do-while loop then you can do that with
03:27 - these loops also by using the jump
03:29 - statements but since you are not talked
03:31 - about the jump statements till now I
03:33 - will be talking about them shortly so
03:35 - now we will be using the do-while loop
03:37 - the while loop is relatively easier to
03:39 - use than jump statements so also pointed
03:42 - or less you are going to write do and
03:44 - inside this you will be defining the
03:46 - body of the loop so this is actually a
03:49 - loop right so here inside I will be
03:51 - defining the loops body and then you
03:55 - will write while and then the condition
03:57 - right so what happens here is first you
04:01 - check the condition and execute the
04:03 - statements in these loops right in this
04:05 - loop what happens is first to execute
04:07 - the statements and then check for the
04:09 - condition that is the only difference
04:11 - between these four and while loops and
04:13 - this do-while loop all let us execute
04:16 - this particular same program so let's
04:18 - take int a equal to zero and the same
04:21 - condition which is K is less than zero
04:25 - and let me just copy on this particular
04:28 - statement inside the loops body right
04:33 - and this is the do-while loop now if I
04:37 - execute this particular program you will
04:39 - be seeing that this has executed once
04:41 - this is the do I look what happened is
04:43 - before checking for case less than zero
04:46 - it first executed whatever is dead in
04:48 - sentence and then it went for this
04:50 - particular condition check which it
04:52 - turned out to be false that's right
04:53 - broke out of the loop so in places where
04:56 - you need to execute the loop at least
04:58 - once in such cases where you have this
05:01 - kind of menu kind of thing you you are
05:03 - going to use the do-while loop it is
05:05 - going to be very useful and very easy to
05:07 - use such so let us quickly write is from
05:10 - all menu-driven program I will show you
05:12 - what I am talking about
05:14 - so this one is going to be a menu driven
05:17 - program for choosing between addition
05:19 - and subtraction so let's say I do and
05:23 - then inside this I am going to ask for a
05:26 - choice so choose one for addition and
05:34 - for traction and I'll be getting a
05:40 - number so in choice let's call it Nancy
05:44 - in choice and then now I can switch the
05:48 - choices as I told you so I can use as a
05:50 - switch case or if else I will go to a
05:51 - phrase because I only two numbers to
05:54 - compare so if choice equal to one then
05:59 - what you are going to do is you are
06:00 - going to ask for two numbers or enter
06:03 - number one and I'll get a number in ten
06:10 - one see in n1 and the same thing goes
06:13 - for number two also and two and two and
06:20 - over here number two well we can
06:22 - actually put this thing outside because
06:24 - for both addition and subtraction since
06:27 - we're dealing with only two numbers I am
06:29 - just going to put these two because
06:31 - really doesn't
06:31 - whether choices what not to write there
06:33 - anyway going to ask for the two numbers
06:36 - for identify addition or subtraction
06:38 - relating this the which is going to
06:40 - change this our print statement so I'm
06:43 - just putting it outside the conditions
06:45 - over here and then if charge equal to
06:48 - one what we need to print s we need to
06:49 - print the addition or the sum so since I
06:52 - only one statement I'm going to skip
06:54 - those curly braces and then the somnus
06:59 - so we can directly print the son or you
07:03 - can have even store it inside one of the
07:05 - variables and then print it I'm not
07:07 - going to do that and the same goes for
07:09 - the difference also right so if choice
07:13 - equal to two then you print the
07:16 - difference so give friends this n1 minus
07:21 - n2 and over here so I is equal to two
07:25 - and you can use else--if over here so
07:27 - instead of checking if you put two if
07:29 - what will happen is if you first check
07:31 - for this and again check for this but if
07:33 - you put an else if what will happen is
07:35 - if this condition is satisfied it won't
07:37 - check for this one now or if you have a
07:40 - hierarchy of condition so if you have
07:41 - ten conditions if the second man is
07:44 - satisfied it will directly skew to the
07:45 - next iteration so what happens over here
07:48 - is if you put all ifs or all tenets even
07:51 - if the second condition is satisfied it
07:53 - is going to check for all the ten
07:54 - conditions so else if is a better choice
07:57 - when you have two distinct choices right
07:59 - so now after printing this what we are
08:02 - going to do is we are going to ask for
08:04 - the user whether he wants to continue a
08:06 - good so do you want to continue he's
08:12 - going to look either yes or no I am just
08:14 - going to take one character so now once
08:19 - you take the character what will happen
08:21 - is it will be limited to the scope so if
08:23 - I write something like let's say con and
08:26 - then it's kind stands for continue
08:28 - cannot use the word continue because
08:30 - it's a keyword I will be talking about
08:31 - that shortly let's just say current
08:34 - means continue it so now if I just take
08:37 - in current what will happen is this
08:40 - particular video bill will be limited
08:42 - only to this
08:43 - the highlighted braces which you are
08:45 - seeing here so if you want to compare
08:48 - that that is not possible right because
08:50 - the vial which we are writing is outside
08:53 - this one right so why be right outside
08:55 - this body of the loop so we need this
08:58 - variable to be accessible outside the
09:00 - body of the loop so we don't want to
09:02 - access it outside everything else right
09:04 - we don't want to access this variable
09:07 - outside everything so what they burnt
09:10 - those we are just going to put this one
09:11 - over here inside the main function so
09:17 - what will happen is it will be limited
09:18 - to this main function but since we are
09:20 - not dealing with other functions we are
09:23 - just using this particular one as a
09:25 - function variable that is it belongs to
09:28 - this particular function and then it can
09:30 - be accessed from anywhere in the
09:32 - function since this Y also is inside the
09:35 - function it can access this continued
09:37 - variable now if you had written it over
09:40 - here it could not have access to it so
09:42 - now we are going to do it until he says
09:44 - no or till he keeps saying this both are
09:47 - equivalent statement you can do either
09:49 - corn is not equal to less or you can say
09:52 - all sorry corn is not equal to no till
09:55 - then you need to continue or else you
09:58 - need to continue till he keep saying
09:59 - this so both of them are right you can
10:01 - do either one of them
10:02 - and now if I execute this so it's asking
10:06 - for the choice I'm going to save one
10:08 - enter number one twelve twelve so the
10:11 - sum is 24 I want to continue yes if I
10:14 - put two and then boil it well so the
10:17 - difference is zero and now I press again
10:20 - it is going to stop so now you see how
10:23 - the do-while loop can be used when if
10:26 - you are using the for wide loop that is
10:28 - also possible but it's quite clumsy to
10:31 - implement as compared to this particular
10:34 - two value so now let's talk about the
10:37 - jump statements right here this we don't
10:41 - need this so first jumps it now we are
10:43 - going to look at this continue so what
10:46 - continue does is it will skip a
10:48 - particular iteration so let me show you
10:51 - an example so for int I equals 1 I is
10:54 - less
10:55 - equal to ten and I placed this and
10:59 - inside this loop I am going to print
11:01 - something let's say let's just print I
11:04 - write and then a new line also no you
11:08 - know the output right it is going to
11:10 - print all the numbers from 1 to 10 so
11:12 - now what I need is I don't want the
11:14 - value of Phi to be printed in the output
11:16 - I want all the numbers except 5 so one
11:20 - way you can do is you can do something
11:22 - like if I is not equal to 5 then you
11:26 - print all these things so this is also
11:28 - one of the ways to get the output what I
11:31 - actually said so here you can see all
11:34 - the numbers are getting printed except 5
11:36 - but in some scenarios where what we need
11:40 - to do is meaning instead of writing
11:43 - everything in an if-else loop we can
11:46 - directly skip the statements if that
11:48 - number is not 5 right sorry if the
11:51 - number is 5 we what the mean is if I
11:55 - have some set of statements over here so
11:58 - let's say we have this one statement 1
12:03 - and then I have another statement over
12:05 - here so statement 2 let me add a new
12:08 - line over here so that you can
12:10 - differentiate so after every ie there is
12:13 - going to be a statement valid statement
12:14 - 2 but if I want that all to be executed
12:18 - only when I is not equal to 5 what I
12:21 - need to do is I need to put everything
12:22 - inside a particular inside the body of
12:25 - inflow great so I need to do something
12:27 - like this and then here so inside this
12:30 - body of the if loop I'm going to get all
12:32 - these statements printed only if the
12:34 - number is not fine the easier way to do
12:37 - is what we can do is we can skip the
12:38 - statements right so if I use Phi we can
12:41 - skip the statements so the way you skip
12:43 - the statements is this stays as it is
12:46 - but once I equal to 5 what I am going to
12:48 - do this and just going to hit continue
12:52 - so what this will do is if is equal to
12:55 - Phi you it won't care about the next
12:57 - statements it won't care about any other
12:59 - statements inside it is just going to
13:01 - skip the I tration and go over to the
13:02 - next one so this is true with every loop
13:05 - so even if you have the continue inside
13:09 - the if and then you have some statement
13:11 - over here let's say continue is three
13:18 - good something like this so this
13:23 - statement won't be executed at all that
13:26 - once the continue is in contact it just
13:29 - directly going to skip everything and
13:31 - just going to the next iteration so now
13:33 - if I put this you will be getting the
13:35 - same output okay I did not put this yeah
13:40 - now if you see I have one two three four
13:43 - and then why you did not print anything
13:46 - at all and then six seven eight nine ten
13:47 - right so that is then you look and it
13:50 - escaped me it's just going to skip the
13:51 - statements once it's not required so
13:54 - every statement escaped so next thing we
13:57 - are going to learn about this
13:58 - break break is almost same like continue
14:02 - what it does it's just going to brave or
14:04 - continue is just going to skip the
14:06 - iteration it is just break is going to
14:08 - completely skip the loop itself
14:10 - so once breakers and contents is going
14:12 - to come outside the loop if I write
14:14 - something like the new has executed this
14:21 - is outside the loop right so this
14:22 - particular statement is outside the loop
14:24 - and also executed you'll be saying that
14:28 - all the statements are printed only up
14:31 - to 5 once 5 cent quoted it's like
14:34 - directly broken out of the loop and then
14:36 - it says loop as executed so that is the
14:38 - use of break statements so you you have
14:41 - encountered the break already right and
14:43 - switch case so this is what happens once
14:45 - a key s is satisfied you are just going
14:47 - to break out of the whole switch case if
14:49 - they don't pay for what is going to
14:51 - happen is it's going to follow all the
14:53 - statements which are associated with
14:54 - every switch case below that order so
14:57 - the next statement we're going to learn
14:59 - is about the go-to statement so what
15:02 - go-to is it's basically collecting kind
15:06 - of a thing so you have a label so let's
15:09 - call something like let's call it label
15:11 - and then you have a set of statements
15:13 - inside this label so you have C out
15:16 - hello and then nación so you have these
15:19 - two statements right or let me just
15:22 - and space over here so these two
15:24 - statements I'm going to be printed
15:26 - side-by-side I don't have a new line
15:27 - over here so now what will happen is I
15:30 - want to execute these statements again
15:34 - and again when I press something so
15:36 - remember the do-while loop we can do the
15:39 - same thing with the go-to statement also
15:40 - it's not exactly a you can act like a
15:43 - loop so let's say I have some media but
15:47 - over here let's call it ain't I so I'm
15:50 - going to take an eye and then if I is
15:56 - equal to let's say some number let's say
15:58 - 12 or 7 something like this so if I use
16:02 - this particular number I want the whole
16:05 - thing to be executed again right so
16:07 - whatever do is go to this particular
16:09 - label what this does is it will directly
16:13 - switch the control from here to
16:16 - over here it will directly go from here
16:18 - to here or you can go from here to
16:20 - bottom of it it can go from this
16:22 - particular place to anyplace in the
16:24 - whole program or the whole function you
16:27 - can at least skip all the statements you
16:29 - can either go backwards or even forwards
16:32 - it completely depends upon your program
16:35 - but here what will happen is they'll let
16:37 - press some other number except 7 this
16:40 - whole statements are going to be
16:41 - repeated again and again so once I press
16:43 - ENTER you are saying welcome to
16:45 - programming knowledge I press 9 in 10 so
16:48 - here you see it stopped now if I press 7
16:52 - it's going to continue again and again
16:54 - so let's say 7 until you see the same
16:57 - set of statements of executed 7 7 till I
17:01 - press 7 it's going to repeat and then
17:03 - you press something else it's going to
17:05 - stop so that is about the go-to student
17:08 - and then you have another statement
17:10 - called exit statement so what exit does
17:13 - is it directly breaks the whole program
17:16 - your program is going to end but it's
17:18 - not a function directly so you need to
17:20 - have another header file to executed so
17:23 - that header file is known as this
17:25 - standard library header file so it is
17:27 - htd li b which ran for sunday library
17:30 - but it's a c header file so it's named
17:33 - and C++ is CS TLB
17:36 - so you need to type a C STD Li B so this
17:40 - is a header file and inside this you
17:42 - have the exit function so let's say I
17:44 - want to exit right after this one so I
17:46 - just pressing exit 1 means exit with an
17:49 - error and exit zero means it's just
17:50 - going to exit without any error so let
17:52 - me show that if I execute this you can
17:56 - see it just ended with return 0 that is
17:59 - the exit code which are passed over here
18:02 - so it went on without any errors but now
18:04 - if I put 1 and exit so here you can see
18:07 - process returned 1 that is the exit code
18:10 - so one main cemented right so here you
18:13 - can see it's terminated with a status
18:15 - one that is red color it means that it
18:17 - will turn it on normally so that is all
18:20 - for this video in the next video we'll
18:21 - be looking at functions