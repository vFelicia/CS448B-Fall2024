00:01 - okay so hello and welcome back to the
00:04 - new video of the maven tutorial Series
00:05 - so for this video we'll be seeing how to
00:09 - create and manage a multi-module
00:11 - projects in Maven right so till now we
00:14 - have covered uh we have seen the maven
00:17 - projects uh that is of only a single one
00:20 - Maven project right uh you just go here
00:23 - you create the maven project uh you
00:26 - modify the palm.xml file you add some
00:29 - dependencies you you know how how to
00:32 - deal with the plugins you know what is a
00:34 - maven life cycle now we we in this video
00:37 - we'll be seeing how seeing how to create
00:40 - a multi module project inside mavic okay
00:44 - so to do that uh let me just first
00:47 - create a new project
00:49 - so that I can explain you clearly a new
00:53 - project
00:54 - let me call it as
00:58 - my site okay so my site
01:02 - is the project name of my
01:09 - okay so my site is my project name so I
01:11 - am using Java I'm using maven
01:14 - Oracle 19 and let me just go ahead and
01:18 - create my project on this window
01:23 - okay so here I hope you got some idea
01:29 - about what is happening over here okay
01:32 - so now we have created our project and
01:35 - build is also successful created our
01:38 - Java file main file is also here
01:41 - okay so now
01:44 - if you go ahead and create a
01:47 - multi-module what is what is the meaning
01:49 - of multi-model yeah it it's it is
01:51 - nothing but a module you are creating
01:54 - modules of of your project inside your
01:57 - big project all right so uh I will give
02:00 - you an example uh so look at here our
02:03 - main
02:05 - parent tag is my site and under which we
02:09 - are creating uh now I will show you uh
02:12 - three three new categories for three new
02:15 - models to be precise for our my site
02:18 - parent tag so we will use util for the
02:22 - utilities classes and we use a core
02:25 - where our our logic will be there and I
02:29 - will use a UI module like and create
02:31 - where all the UI part of my project will
02:35 - be there okay so you see uh this
02:39 - hierarchy right one parent tag is there
02:42 - under which three modules are being
02:44 - created and each module will have their
02:47 - own Java classes or Java files uh
02:51 - to which they are implementing right so
02:54 - let me go ahead and create all these
02:56 - modules
02:57 - fine to create a module inside a maven
03:00 - project in IntelliJ IDEA you just come
03:02 - here and click on your my site project
03:05 - name whatever you have will click right
03:07 - click new and you can see module is
03:10 - there click on module and name your
03:12 - module okay so our first module name is
03:15 - okay my util let me call it as my
03:19 - YouTube
03:20 - okay uh Java will be there Maven will be
03:23 - there and this time you can see one
03:26 - Intel idea is asking for the parent tag
03:28 - if you click over over it you can see
03:31 - two uh
03:33 - the options are there one is none that
03:35 - means this is a there is no parent tag
03:38 - for this module this is a alone
03:40 - Standalone model and for but now I am
03:43 - using I want this module to come under
03:46 - the my site project
03:48 - okay so to do this I will select the
03:51 - parent as my site and I will go ahead
03:53 - and create my module
03:55 - okay so here you can see as soon as I
03:59 - create my util pack module you can see
04:03 - my util folder is there created and and
04:07 - inside which it has its own pom.xml file
04:11 - and one Palm dot XML file which is our
04:14 - main projects from dot XML file that is
04:16 - my sites form.xml file if you if I open
04:19 - this form.xml file which is of my parent
04:22 - tag you can see here also uh one module
04:26 - tag has been created and under which uh
04:28 - they have created my util module tag
04:31 - which is which states that hey this is
04:34 - the parent tag for these many modules
04:37 - okay so this my site is my parent tag
04:40 - for my util
04:47 - XML file we can see one parent tag is
04:51 - getting created over here and it it
04:53 - states that hey this is my util module
04:57 - module's parent is my site okay so the
05:00 - artifact ID is there group AD is there
05:03 - and version is there okay so this is how
05:06 - we differentiate between uh
05:08 - who is parent and who is child child in
05:11 - the sense with who is module which comes
05:13 - under the that parent okay so this is
05:16 - for the parent and this is for the child
05:18 - or to be precise it's for the model OKAY
05:21 - modules form.xml file and it is parents
05:24 - mob pump.xml file okay so the first I
05:28 - have created uh then I have to create a
05:30 - core again the same uh pattern you will
05:33 - follow you will go ahead and create the
05:35 - module and this time I will write my
05:37 - core
05:39 - okay and everything will be same my side
05:42 - will be this and you can see uh
05:46 - sorry for the typo or it should be my my
05:49 - yeah I hope you understand you just go
05:52 - ahead and again you write my slash
05:56 - UI I guess UI
06:00 - that you are trying to create
06:03 - yeah UI so my UI
06:06 - create it okay so now you can see this
06:10 - is our for main main and this is uh util
06:13 - UI core all these pack modules are being
06:17 - created okay so let me just clear it out
06:20 - so that you guys can understand uh
06:22 - clearly okay so what I will do is I will
06:26 - show how you can use the classes of one
06:30 - model inside the another module okay so
06:32 - till now we have created the model and
06:35 - now we will see how to manage those
06:37 - models and how to use the different
06:40 - classes of different models inside the
06:42 - different models okay so let me just go
06:46 - ahead and create one packaging structure
06:49 - over here inside util so to create a
06:51 - just right click on it click on new
06:54 - and
06:56 - very small package
07:00 - just come here my util SRC
07:04 - main Java okay so this you can right
07:08 - click on this and you can create package
07:11 - okay so org dot pack example Dot
07:15 - utilities I will name this package as
07:17 - utilities and inside this package uh
07:21 - I'll create one Java class and name it
07:23 - as
07:25 - my utils
07:28 - okay so you can see a utility inside my
07:32 - utility module I have created one
07:34 - package name as utilities and inside
07:36 - that package I have created one class my
07:38 - utils okay so just to understand the
07:41 - basic uh stuck how workflow how this
07:45 - works I will create one method over here
07:48 - okay so so this method will be public
07:52 - static
07:53 - it should not return anything so the
07:56 - return type should be void public static
07:58 - wider
08:00 - and the method name should be a print
08:01 - name and it will accept one string
08:05 - string as the parameter from the user
08:07 - string name
08:09 - okay and after that HD
08:12 - string and after inside this it will
08:16 - just simply prints
08:18 - the name of the user by grating them
08:24 - hello
08:26 - there
08:28 - and just append the name that we are
08:31 - getting from the user okay
08:35 - hello there and we'll just write
08:39 - welcome
08:40 - just to great message for the user so
08:43 - this is the this method we will do okay
08:46 - so we have created uh one package inside
08:49 - which we have created one class and this
08:51 - class implements these methods which is
08:53 - print name which is uh taking one string
08:55 - and just printing that string by the
08:59 - some
09:00 - other words okay
09:03 - and now if I go now I want this method
09:07 - to be used inside my core module okay so
09:11 - how can I do that I I just go inside my
09:14 - core model I will go inside my source I
09:16 - will go inside my main Java and I will
09:19 - come over here and now
09:23 - if if you see here also I have this main
09:27 - class so first of all to use this class
09:31 - which is written inside the util module
09:33 - I have to add the dependency of my util
09:37 - model inside my core model okay so how
09:40 - to add the dependencies I hope you know
09:42 - we have discussed in our previous module
09:44 - previous uh lectures also so to declare
09:49 - the dependency inside the MU mu core
09:52 - model we will go inside the pump file of
09:54 - the MU core and we will introduce one
09:58 - tag name as dependencies as the parent
10:00 - tag and inside which we have dependency
10:02 - tag and will artifact ID as
10:06 - mu
10:07 - core not mu core we will add the
10:11 - my util
10:14 - .com.example and okay fine so we have
10:18 - added the dependencies of the util
10:22 - module inside the MU codes form.xml file
10:26 - so after creating this dependency you
10:28 - just come over here inside the main file
10:30 - of this
10:32 - mu core and if you come over here and
10:35 - you just write
10:38 - that
10:39 - class name what is the class name I if I
10:42 - can recall
10:43 - my utils
10:47 - my utils DOT
10:49 - okay first we have to import that
10:52 - package
10:54 - okay so the to import import
10:58 - uh what what is the package name I
11:01 - forgot
11:06 - just come over here product dot example
11:10 - dot utilities
11:15 - okay wait let me check the
11:20 - okay so we don't need to import I guess
11:23 - that is not required over here so we
11:26 - have done we have implemented this
11:28 - method over here and we are trying to
11:30 - access that method inside the another
11:32 - model which is Mu core core module which
11:35 - is over here and to access it uh we just
11:39 - need to
11:43 - we just need to again reload all the
11:46 - maven
11:47 - by this okay so if I go inside my Maven
11:52 - mapping code not automatic or Maven life
11:55 - cycle and we'll say
11:59 - okay and this
12:03 - okay so here you can see uh since we
12:07 - have added the dependencies of mu util
12:10 - model inside the MU core module we have
12:13 - to load
12:15 - we have to load Maven changes okay so if
12:18 - you click over here load the maven
12:20 - changes it will
12:22 - it will get all those
12:24 - update parts that we have done it will
12:27 - create a maven will load all this stuff
12:30 - and after that you can just come over
12:33 - here and it's out and just to create the
12:39 - utilities
12:40 - my utils
12:43 - my utils DOT
12:46 - print name and now you can see we are
12:48 - getting that print name and here here it
12:51 - is asking to give the name as a
12:53 - parameter so we'll pass
12:59 - what is so we can we have Alex
13:03 - we can pass okay and now I know we don't
13:07 - think this is needed
13:09 - Okay so
13:11 - [Music]
13:13 - I am getting error over here cannot
13:15 - resolve better
13:18 - okay okay so since the return type is
13:21 - white so we don't need to write inside
13:24 - this
13:25 - you just need to call that method
13:27 - because the print Line Print statement
13:29 - is in still inside that method so that's
13:32 - why we don't need to write again this
13:34 - out okay and import intelligent is also
13:37 - importing that module inside of this and
13:40 - now if I go ahead and click on run it
13:43 - should print
13:44 - hello world first and then this method
13:47 - call will be executed where
13:50 - here you can see Hello World and after
13:52 - that hello there Alex welcome okay so
13:56 - hello world is getting printed from here
13:57 - here itself if we if you don't get
14:00 - confused I will just comment it out
14:02 - uh now you can see only uh hello there
14:05 - Alex welcome should we get printed over
14:07 - here yeah it is it is printing so here
14:10 - you can see we are creating multiple
14:13 - modules uh so we'll given I will give
14:16 - you one scenario okay so this is a this
14:19 - is a web application that you are trying
14:20 - to build and there are multiple models
14:22 - inside this okay so so all the utility
14:24 - classes are there inside with this
14:27 - module all the UI related stuff you keep
14:29 - inside this UI module and or the core or
14:32 - the logic part we are you are trying to
14:34 - implement in your website is comes over
14:35 - here okay so all you can create them
14:38 - separate modules and to use to have the
14:41 - accessibility inside models to modules
14:44 - if one module is trying to use the
14:46 - utilities of another module so here we
14:49 - have seen we have created one package
14:52 - and inside which we have created one
14:54 - class and these class method we are
14:57 - trying to access inside the MU code that
14:59 - that too we have also can do just we
15:01 - need to add the dependencies for that uh
15:04 - module inside the Target Model in which
15:07 - we are trying to access that
15:10 - uh utilities okay as you can see we have
15:14 - added the dependencies so this is how we
15:18 - can manage and create the multi-module
15:21 - projects inside Maven I hope you got
15:24 - some idea and thank you for watching
15:26 - this video