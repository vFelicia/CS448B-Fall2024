00:00 - in this video we are going to study
00:02 - about the loops in kotlin
00:05 - so before studying
00:07 - the loops the first question that should
00:09 - arise is
00:10 - why are the loops used or
00:13 - why should we use the loop so
00:17 - when i have to print
00:20 - the numbers from 1 to 10
00:23 - or i have to print
00:26 - a variable
00:28 - that is i and increase the variable
00:30 - after each print statement so
00:32 - what i can do is i can write a variable
00:36 - that is equals to 1
00:37 - okay and then i can write a print
00:40 - statement
00:42 - to print i and then i can increase the i
00:46 - okay
00:47 - and
00:49 - i can
00:50 - repeat the same block of code
00:52 - again and again
00:53 - to
00:56 - execute the statement
00:57 - okay
00:58 - so if i said if i said i have to print
01:01 - all the natural numbers from 1 to 10
01:05 - so firstly i have to
01:07 - repeat the particular block of code
01:09 - again and again and
01:11 - i cannot know where to stop
01:14 - or i have to pers manually
01:17 - count the number of iterations
01:19 - so uh like i have here you written the
01:23 - code and it prints all the natural
01:25 - numbers from one to five so this is
01:28 - a redundant quote and uh it requires a
01:31 - lot a lot of
01:33 - um
01:34 - a lot of
01:36 - like
01:37 - i have to count the
01:40 - the number of iterations and it is a
01:42 - redundant code so
01:43 - what could we do
01:45 - to make it less redundant
01:48 - and uh short code and organized code so
01:51 - we can use
01:52 - loops instead of repeating the same
01:54 - block of code again and again
01:57 - so what is a loop a loop is something
01:59 - repeating itself okay so when you listen
02:03 - to song you put them on loop so what it
02:06 - does it it repeats the song
02:10 - after the song is completed
02:13 - okay so there are three types of looping
02:15 - loops in kotlin for loop while loop and
02:18 - do while loop
02:20 - so
02:21 - let's say we want to print all the
02:23 - natural numbers from 1 to 10
02:27 - okay
02:28 - so firstly
02:30 - we can see
02:32 - what is the syntax
02:34 - for for loop
02:36 - so the syntax is
02:40 - 4
02:41 - and here is the condition
02:43 - and then the loop starts
02:46 - okay
02:47 - and
02:48 - then the code ends
02:51 - and
02:52 - between this
02:54 - there is a particular
02:55 - code sequence
02:58 - that got that gets repeated in each
03:00 - iteration
03:02 - okay so we use the keyword for
03:04 - and then we introduced some parameters
03:06 - that
03:07 - uh checks the
03:09 - the condition and increase the iterator
03:12 - and initialize the iterator okay and
03:15 - then at the end we close the curly
03:17 - braces and
03:19 - the code inside the curly braces gets
03:22 - repeated
03:23 - at each iteration
03:26 - okay
03:27 - so
03:29 - let's say we want to
03:31 - print all the natural numbers from 1 to
03:33 - 10 ok so we know that loop repeats a
03:36 - particular code sequence
03:38 - now we also need something to count from
03:41 - 1 to 10 hence a counter is needed
03:44 - that must be incremented incremented at
03:47 - each iteration
03:49 - okay
03:50 - so
03:51 - uh
03:51 - as we have already discussed the syntax
03:53 - for for loop let's go ahead and
03:56 - make a code to print all the natural
03:58 - numbers from 1 to 10 okay so i'll write
04:01 - for
04:02 - now
04:04 - remember we have learned about the ins
04:06 - in
04:07 - in
04:08 - statement in kotlin
04:10 - so i will
04:12 - introduce the iterator here
04:14 - okay so for
04:17 - the iterator
04:19 - must
04:20 - like
04:21 - if it not if it is not initialized
04:24 - outside the for loop it is okay so i'll
04:27 - i'll initialize i here
04:29 - and use the in operator
04:31 - okay so i in now 1 to 10
04:34 - okay
04:35 - as i mentioned if i have to
04:39 - for particular condition one to ten i
04:42 - use the inoperator and the two dots okay
04:44 - so for i in one to ten
04:47 - okay and then i have to just go ahead
04:50 - and print i
04:52 - okay
04:53 - so when i
04:55 - run this
04:56 - function
04:57 - or on this particular block of code
05:00 - i can see that
05:02 - it prints all the natural numbers from
05:04 - one to ten
05:06 - okay
05:08 - so uh
05:10 - there are some points that i would like
05:12 - to point out
05:13 - like for in the for loop there is no
05:16 - need to initialize the iterator as i
05:18 - already mentioned
05:20 - and there is no need to increase the
05:22 - operator in for loop okay so you can see
05:25 - that i haven't have not write the
05:28 - i plus plus here
05:30 - okay because
05:32 - when i write i plus plus here we can
05:33 - show we can see that there is a
05:37 - error and it shows that well cannot be
05:39 - reassigned
05:40 - so whenever i enter in the for loop
05:43 - i vary value i is created and it is
05:46 - assigned the
05:48 - particular
05:49 - number that that the loop is given going
05:53 - on okay so it is a value not a variable
05:56 - in for loop
05:57 - the i although its value changes after
06:00 - each iteration but it is a value not a
06:03 - variable okay so the default increment
06:05 - of an iterator is
06:07 - ah one
06:09 - so as you uh might have seen that
06:13 - iterator after each iteration increase
06:15 - by one not by two naught by three so
06:17 - whatever i have to
06:18 - print all the odd numbers in 1 to 20
06:21 - so then i have to
06:24 - iterate i in 1 to 20
06:27 - and i have to also increase the
06:29 - iterator by 2 so for increasing the
06:32 - iterator by 2
06:33 - we need to use the step function so i'll
06:36 - just write here step 2
06:38 - now what the step function does is it
06:40 - increases the iterator by 2 so when i go
06:42 - ahead and run this function
06:45 - we can see that after each iteration the
06:47 - iterator increases by 2 and hence prints
06:50 - all the odd numbers from 1 to 20.
06:54 - okay
06:55 - now whatever i have to
06:59 - print all the natural numbers from 10 to
07:01 - 1
07:02 - not from 1 to 10
07:04 - so you might think that
07:06 - i can write here
07:08 - 10.1
07:10 - okay
07:12 - so when i go ahead and
07:14 - run this
07:15 - function
07:21 - you can see that
07:23 - it just exits it just exits with
07:28 - code 0 okay why why why it happens
07:31 - because
07:32 - at the particular point when it enters
07:35 - the for loop it is assigned the
07:37 - it is checked that
07:39 - if it is in ten or ten to one okay
07:42 - it must be greater than or equal to 10
07:46 - and less than or equal to 1 so there is
07:48 - no integer that is greater than equal to
07:50 - 10 or less than equal to 1
07:53 - okay and i would like to mention one
07:55 - thing also
07:56 - whenever i define
07:57 - anything like this okay i just mentioned
08:00 - it 11. so whenever i defined anything
08:02 - like this the by default um
08:05 - value assigned to i is the first value
08:08 - here okay so in this case the by default
08:11 - value assigned to i is 10. now uh
08:14 - getting back to our original question
08:16 - that what if i have to
08:18 - print all the statements from 10 tool so
08:21 - i will use the down 2 function
08:23 - so for out i in
08:31 - instead of the two dots i'll use down
08:34 - two
08:35 - and one
08:36 - so
08:37 - in this we can see that the i should be
08:41 - less than equals to 10 and greater than
08:43 - equals to 1 so now when i go ahead and
08:47 - print this
08:50 - we can see that it prints all the
08:52 - natural numbers from 10 to 1
08:55 - so that is about the
08:57 - down to function
08:59 - okay
09:02 - so
09:04 - in the next video we will see about
09:07 - the wide and the dual loops in cotton
09:09 - this is all for this video thank you