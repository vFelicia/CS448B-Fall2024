00:00 - Haggai is valuable discourse on Jenkins
00:03 - to troll for beginners so let's get
00:05 - started so first of all what is Jenkins
00:08 - so Jenkins is an open source automation
00:12 - server written in Java one can also say
00:15 - that Jenkins is a CI server where CI
00:19 - stands for continuous integration and
00:21 - what is CI we are going to see in
00:24 - details in the next slide now what
00:27 - Jenkins does so Jenkins is used to
00:31 - detect the changes whatever you commit
00:34 - using your version control systems such
00:37 - as subversion or gate or any other
00:40 - versioning system and it performs some
00:43 - tasks on your code when it detects some
00:48 - changes in your code so what tasks
00:51 - Jenkins can perform repeatedly so
00:54 - Jenkins can perform for example if you
00:57 - have a code it can build your code it
00:59 - can test your code it can even deploy
01:02 - your code and even package or integrate
01:06 - your code whenever it detects some
01:09 - changes in your version control system
01:13 - or in your code now let's talk about
01:16 - some of the history behind the Jenkins
01:19 - so Jenkins is a fork of original hudson
01:24 - project and it was under development
01:27 - since 2005 now Hudson was the first
01:32 - release by a developer called kohsuke
01:36 - kawaguchi of Sun Microsystems and in
01:40 - 2010 Oracle bought Sun Microsystems due
01:45 - to this some naming dispute occurred and
01:48 - hudson was renamed to Jenkins now Oracle
01:53 - continued the development of Hudson as a
01:57 - branch of the original and the Jenkins
02:00 - became the folk of Hudson now you can
02:03 - find more about Jenkins on Jenkins - CI
02:06 - dot o-r-g but nowadays this website is
02:10 - transferred to a website called Jiang
02:13 - Kayne's dot io so if you enter this URL
02:17 - on your browser it will be redirected to
02:21 - Jenkins dot IO now before diving deep
02:24 - into Jenkins we need to understand what
02:27 - is CI or continuous integration so the
02:32 - basic concept of CI is a CI server
02:35 - continuously integrates newly checked in
02:39 - code into a build that we have already
02:42 - discussed so Jenkins detects those
02:45 - changes using the version control system
02:49 - and perform some tasks on them for
02:52 - example building or testing or
02:54 - integration tests or deploying those
02:56 - bills and so on so you can see in the
03:00 - second step of continuous integration I
03:03 - have written it runs unit tests and
03:06 - rejects the build if they fail so a
03:09 - continuous integration system detects
03:13 - and runs the unit tests and it detects
03:16 - the failure and if a failure occurs
03:19 - during the unit text or integration
03:22 - tests or any kind of test its going to
03:25 - reject that build and it's going to send
03:28 - the information to the developer or the
03:31 - maintainer
03:31 - of that code now for example your unit
03:35 - tests or whatever test audio whatever
03:37 - build you are making is successful then
03:42 - a continuous integration system is going
03:45 - to deploy your build to other servers so
03:49 - continuous integration is also referred
03:52 - as build automation so you may ask what
03:56 - does this really mean so at regular
04:00 - interval or regular frequency ideally
04:04 - every commit you do in your version
04:07 - control system your continuous
04:09 - integration system is going to integrate
04:11 - your system that means all changes up
04:15 - until that point are combined into that
04:18 - project it's going to build your code so
04:21 - the code is compiled into executable or
04:25 - a package it's going to
04:27 - test your code so you can automate your
04:30 - test and you can write your test suit
04:32 - which is going to be run by your
04:35 - continuous integration system and if all
04:38 - the previous steps are successful your
04:41 - code will be deployed that means it will
04:44 - be loaded onto a system where the
04:47 - developer can interact with it so now
04:51 - let's talk about some of the benefits or
04:54 - the advantages of a CI system so CI
04:58 - system enables us in immediate birth
05:02 - detection so both will be detected if
05:05 - some test fails or your build fails and
05:09 - then the CA system is going to deploy
05:11 - your code if your test and your build
05:16 - passes so at any given point you have a
05:18 - deployable system now next is you have
05:22 - the record of evaluation of your project
05:25 - so for example how many times your build
05:28 - succeeded or your test succeeded and at
05:31 - what change or at what point your build
05:35 - failed or your unit tests failed it's
05:37 - going to you know get the record of
05:40 - everything so you can see it later
05:43 - and you can just view the quality of
05:48 - your code now the next benefit of a CI
05:51 - system is it's going to detect the
05:53 - system development problem at very early
05:56 - stage so because you can run Jenkins
06:01 - repeatedly for example our developer
06:04 - checks in his code using gate or
06:07 - subversion or any versioning system it's
06:10 - going to run every job which you have
06:13 - made for example for building your code
06:16 - or your integration test or your unit
06:20 - test or any other test is going to run
06:23 - immediately and if anything fails you
06:28 - can even get the report of that using an
06:30 - email or it will generate some kind of
06:34 - message to your a server so everybody
06:38 - will know some error has
06:40 - occurred during the bill or the test of
06:42 - your code so everybody will be able to
06:47 - take the action at the earliest as a
06:49 - result you have the reduced risks of
06:52 - cost schedule and budget okay so when
06:56 - you detect the problem earlier obviously
06:59 - you are going to save on cost and your a
07:02 - time and your budget and the last but
07:05 - not the least is the measurable and
07:08 - visible code quality so using a jenkins
07:11 - or any other CI system you will be able
07:15 - to you know visibly see the code quality
07:18 - of your project now let's see using some
07:22 - picture how does it all happens so you
07:27 - can see here are your developers which
07:31 - are going to develop some code and they
07:34 - are going to commit their code into the
07:37 - code repositories such as mercurial or
07:41 - gate or subversion and this commit of
07:46 - changes of code will be automatically
07:49 - detected by Jenkins so whenever
07:52 - developer commits his code is going to
07:56 - automatically be detected by the Jenkins
08:00 - and what Jenkins will do is going to run
08:04 - some test whatever test you have created
08:08 - to run on Jenkins for example the unit
08:12 - test or integration test or system test
08:14 - or any other kind of test is going to
08:17 - just run those tests and give you the
08:20 - test results and if the build is
08:24 - successful and tests are successful it's
08:26 - going to just you know transfer your
08:31 - executable file into some artifact
08:34 - repository or it's going to deploy your
08:37 - software onto some other server for
08:41 - examples on some cloud server where you
08:44 - want to use it so here the code is
08:48 - committed and then at a regular interval
08:51 - the Jenkins tests
08:53 - the repository and then it runs the test
08:56 - on those codes using your repository and
09:00 - if everything is successful is going to
09:03 - create the executable and then it will
09:07 - save those executable in your artifact
09:10 - repository or it will deploy your code
09:13 - onto some other server so now let's talk
09:17 - about why Jenkins and not any other CI
09:21 - system there are many other CI system
09:23 - available but why Jenkins
09:26 - so in Jenkins you can create plugins so
09:30 - these plugins are very modular and
09:32 - Jenkins plugin extensively makes Jenkins
09:36 - to adopt too many systems so you can
09:40 - install Jenkins on many systems for
09:44 - example Linux or Windows or Mac
09:46 - operating operating system or any other
09:49 - system and it's plug-in system is really
09:53 - modular so you can install whatever
09:55 - plug-in you want to support that kind of
09:59 - build or that kind of functionality
10:01 - whatever you want now the second is
10:04 - Jenkins provide everything for a robust
10:08 - continuous integration system which
10:11 - helps a lot for team that practice agile
10:15 - now agile is software development
10:19 - techniques which are used widely across
10:23 - many companies and many are teams in
10:27 - order to coordinate their work so this
10:30 - is completely another topic agile
10:33 - methodology but if you are a software
10:36 - developer you may not know what agile is
10:40 - the next is Jenkins continuously
10:42 - provides access to the working copies of
10:45 - the software which supports the agile
10:48 - principle once again so if your team is
10:51 - working in an agile environment such as
10:54 - sprints or you have scrum or any other
10:59 - agile mythology then Jenkins will fit
11:02 - perfectly in your system the next is
11:07 - Jenkins is released under MIT license so
11:11 - it's an open-source CI system that means
11:16 - you can use it freely
11:18 - the next is there is a large support of
11:21 - community and thorough documentation so
11:25 - whatever you need to know about Jenkins
11:28 - most probably it will be answered by the
11:31 - support community or you will find it in
11:35 - the documentation of Jenkins and the
11:38 - last point is as I already stated that
11:41 - it's really easy to write a plug-in in
11:44 - Jenkins and if you write a plug-in in
11:47 - jenkin it can be used by other community
11:49 - members or everyone who will use Jenkins
11:52 - that makes Jenkins really powerful in a
11:55 - way that community members creates those
11:59 - plugins and they can be used by
12:01 - everybody who wants to use them and last
12:05 - point I want to add here is if anything
12:07 - goes wrong you can fix it so it's so
12:11 - modular Jenkins is so modular that you
12:14 - can fix your problem by yourself
12:17 - so what Jenkins can do Jenkins can
12:20 - generate reports it can integrate with
12:23 - many different version control systems
12:26 - it can push to various artifact
12:30 - repositories it can deploy directly to
12:34 - your production or test environment it
12:37 - will notify the stakeholders of the
12:39 - build status using email or any other
12:43 - messaging system and many more so this
12:47 - is the brief introduction about Jenkins
12:50 - and in the next video we will see how we
12:53 - can install the Jenkins on different
12:55 - operating systems and then we will go
12:58 - for the hey guys in this video I'm going
13:01 - to show you how you can download and
13:03 - install Jenkins on your Windows 10
13:05 - operating system so first of all let's
13:07 - talk about the prerequisite of
13:09 - installing Jenkins on your Windows 10
13:12 - operating system in order to install
13:14 - Jenkins you need to have Java 7 or above
13:17 - so make sure you have the latest version
13:19 - of Java
13:20 - and then once you have Java installed
13:22 - then you are ready to install Jenkins so
13:26 - I have already installed Java 10 on my
13:28 - Windows 10 operating system and I'm
13:30 - assuming that you also have the latest
13:31 - version of Java so once you have Java
13:34 - installed just open your favorite
13:36 - browser and search for Jenkins and the
13:38 - first language will appear here will be
13:40 - from Jenkins dot IO so we are going to
13:42 - click on this link so once you are on
13:45 - this Jenkins website you just need to
13:47 - click on the Downloads button here and
13:49 - on the downloads page you just need to
13:51 - scroll down a little don't click on
13:53 - downloads yet we are going to see which
13:56 - are the versions which are available for
13:58 - Jenkins so when you scroll down you will
14:01 - see different versions of Jenkins one is
14:05 - the LTS version and other is the weekly
14:07 - release so we are going to use the long
14:11 - term support version and the latest
14:14 - version is 2.10 7.2 and in here we are
14:19 - going to choose the windows option so
14:22 - here you will see the windows option now
14:25 - one thing you need to keep in mind is
14:27 - when you are installing Jenkins on
14:29 - Windows it is good to run Jenkins as a
14:32 - service so it starts automatically
14:34 - without requiring any user to login the
14:39 - easiest way to install Jenkins on
14:42 - Windows is by using Windows installer
14:45 - but if you are an advanced user you can
14:49 - also download the Jenkins food war file
14:52 - and then you can deploy it on servlets
14:57 - like GlassFish or tomcat but for our
15:00 - purpose we want to just learn so we are
15:03 - going to use the windows installer so
15:07 - I'm going to just click on windows here
15:09 - and once you click on windows option you
15:11 - will see this message which says thank
15:13 - you for downloading windows stable
15:15 - installer and you can see here it will
15:18 - download it as a zip file so I'm going
15:20 - to wait for the download to complete so
15:22 - now the download of this zip file is
15:23 - completed so I'm going to minimize the
15:25 - browser and
15:26 - to go to my downloads folder where I
15:28 - have downloaded this zip file and now
15:31 - I'm going to just open this zip file and
15:34 - in here I will be able to see this
15:36 - Windows installer package so I'm going
15:40 - to double click on this windows
15:41 - installer package which is going to
15:43 - start the Jenkins installation so I'm
15:46 - going to minimize this folder explorer
15:47 - and you can see Jenkins 2.10 7.2 setup
15:53 - window so on this welcome window we
15:55 - don't need to do anything we just need
15:57 - to click Next here and this will be the
16:00 - default location where Jenkins will be
16:02 - installed so if you don't have the good
16:03 - reason to change it just leave it as
16:05 - default and then click Next and then
16:08 - click install and then just click yes
16:11 - we're just going to start installing
16:14 - Jenkins and in the end you will see this
16:16 - message which says completed the Jenkins
16:18 - setup wizard click finish button to exit
16:22 - the setup wizard so I'm going to click
16:24 - finish so now Jenkins is installed on
16:26 - your system and it will ask in which
16:28 - browser you want to open it so I'm going
16:30 - to click on Google Chrome and you can
16:35 - see on a port localhost 8080 you will be
16:39 - able to see this kind of window so if
16:42 - this window doesn't open automatically
16:45 - you just need to go to your favorite
16:47 - browser and then just write localhost
16:50 - colon 8080 so let's copy this here and
16:54 - just paste it here so HTTP colon forward
16:58 - slash forward slash localhost colon 8080
17:01 - the default port is port 8080 and I'm
17:05 - going to just click on this and then you
17:08 - will be able to see this kind of window
17:10 - okay so if it doesn't open automatically
17:13 - you can just browse on localhost port
17:15 - 8080 now first thing in order to unlock
17:18 - Jenkins you just need to provide the
17:21 - initial admin password and this password
17:24 - is set in this directory so just copy
17:28 - this part here and then I'm going to
17:32 - open my folder explorer and I'm going to
17:34 - paste this path and you will see this
17:37 - file here which is in
17:39 - I'll admin password so you just need to
17:42 - open this initial admin password here so
17:47 - I'm going to just open it into my editor
17:49 - so I'm going to open it in the notepad
17:52 - and you just need to copy this initial
17:55 - password and then I'm going to minimize
17:57 - this window and I'm going to provide my
18:00 - initial password and then click continue
18:02 - now in the next step you will see a
18:05 - customized Jenkins window so there are
18:09 - two options here install suggested
18:11 - plugins and the second option is select
18:14 - plugins to install so I'm going to
18:16 - choose this option which says install
18:18 - suggested plugins which is going to
18:20 - install the most suggested plugins in
18:23 - your Jenkins installation so you can
18:26 - just click on install suggested plugins
18:28 - and this is going to start installing
18:31 - the suggested plugins so you can see
18:33 - there is a plugin for gate here there is
18:37 - a plugin for subversion plugin for
18:39 - github LDAP email extension and some
18:44 - other plugins so right now I don't have
18:46 - get installed on my system or LDAP
18:49 - installed on my system or even as a such
18:52 - slave so if it shows some error it's
18:55 - okay so once all the plugins are
18:58 - successfully installed on your Jenkins
19:01 - you will be automatically redirected to
19:04 - this page which says create first admin
19:07 - user so you just need to create the
19:10 - admin user credentials here so user name
19:14 - let's say I'm going to take it as admin
19:17 - here and password whatever you want I'm
19:20 - going to give some password and then I'm
19:24 - going to confirm my password and here
19:26 - I'm going to give the full name for
19:29 - example admin once again and the next
19:33 - thing is email so I'm going to provide
19:35 - the email and after providing each and
19:38 - every credential you just need to click
19:39 - Save and finish which is going to say
19:42 - Jenkins is ready start using Jenkins so
19:46 - I'm going to just click on this button
19:48 - we say start using Jenkins and you will
19:52 - see the
19:53 - kind of window so if you see this kind
19:55 - of window that means Jenkins is fully
19:58 - installed on your system and Jenkins is
20:02 - running on your system now if you want
20:05 - to see more about Jenkins you will be
20:08 - able to see it inside your C directory
20:11 - and inside the C direct you just need to
20:14 - go to Program Files x86 and there will
20:16 - be a Jenkins folder here and inside
20:19 - Jenkins folder all the plugins are there
20:22 - so you can see the plugins folder and
20:24 - all the plugins are here and all the
20:29 - files related to Jenkins will be stored
20:32 - here so if you want to dig deeper into
20:34 - Jenkins you can always come to this
20:36 - directory and see what's happening so
20:39 - this is how you can install Jenkins on
20:41 - your Windows 10 operating system hey
20:44 - guys in this video I'm going to show you
20:45 - how you can download and install Jenkins
20:47 - on your Ubuntu or Debian based operating
20:51 - system so in order to install Jenkins so
20:54 - you need to have Java installed on your
20:56 - system but we will look into the
20:59 - documentation which version of Java is
21:01 - required to install Jenkins from the
21:05 - Jenkins website so first of all just
21:09 - open your favorite browser and search
21:11 - for Jenkins and the first link which
21:14 - will appear here will be from Jenkins
21:16 - dot IO so I'm going to click on this
21:19 - link and once this website is open there
21:23 - is a documentation given to install at
21:26 - Jenkins on Linux or Debian based
21:28 - operating system and this documentation
21:31 - you can find in the documentation
21:32 - section so I'm going to click on the
21:35 - documentation section and then just
21:38 - click on use Jenkins now when I scroll
21:43 - down a little under user handbook
21:46 - section I can see this section which
21:49 - says installing Jenkins so I'm going to
21:52 - click on this link and then you will see
21:56 - this section which is installing Jenkins
21:59 - I'm going to put this link in the
22:02 - description so you can directly click on
22:04 - this link and come to this page
22:07 - now let's see the prerequisite of
22:09 - installing Jenkins so here these are
22:13 - some of the system requirements and then
22:16 - you can see software requirement and
22:18 - here you can see Java 8 either Java
22:22 - runtime environment or Java development
22:25 - kit is fine right so first of all we are
22:29 - going to install Java 8 and then we are
22:33 - going to install the Jenkins on our
22:36 - Ubuntu operating system now when I
22:39 - scroll down a little you will see the
22:42 - installation process for different
22:43 - operating systems for example Mac OS or
22:47 - Windows operating system and when you
22:50 - scroll a little bit more you will see
22:52 - the section for Linux Debian forward
22:55 - slash open - and these are the steps you
22:59 - need to follow in order to install
23:02 - Jenkins so we will execute these steps
23:05 - after we install the Java version so I'm
23:08 - going to just minimize this browser and
23:10 - I'm going to open the terminal
23:12 - just press ctrl alt T in order to open
23:15 - the terminal or you can open the
23:17 - terminal from here also
23:18 - so once the terminal is open to install
23:22 - the java 8 i'm going to use the PPA and
23:26 - this command also i'm going to give you
23:28 - in the description so the first command
23:30 - is this sudo add - apt - repository PPA
23:36 - colon web app 8 team four slash java and
23:41 - then press enter and then keep your open
23:44 - twos password and then press enter and
23:46 - once again press enter and once this
23:49 - command is finished I'm going to paste
23:51 - the second command in order to install
23:52 - Java 8 so this is the second command
23:55 - which is sudo apt install Oracle - Java
23:58 - 8 - Installer press ENTER in order to
24:02 - install Java 8 so now we can see this
24:05 - message here which says Oracle JDK 8 is
24:08 - installed on my system and then there is
24:12 - an important message here and this
24:14 - message says to set Oracle Java JDK 8 as
24:18 - default we need to install
24:20 - Oracle - Java 8 - set - default so we
24:25 - are going to run this command which is
24:28 - given in the example which is this one
24:30 - so I'm going to just copy this command
24:32 - in order to set Java 8 as the default
24:36 - Java version so just copy this command
24:39 - which is sudo apt install Oracle - Java
24:42 - 8 - set - default and paste on to your
24:46 - terminal and then press ENTER and then
24:50 - press Y and once this command is
24:53 - finished we are going to check the Java
24:55 - version so I'm going to just write Java
24:57 - - - version and then press ENTER and
25:02 - this command gives us some problem I can
25:05 - see could not create Java Virtual
25:07 - Machine so instead of giving double - I
25:10 - think the command is Java - version and
25:14 - you can see this version Java version
25:16 - one point eight point zero point
25:17 - something so if you see this version
25:21 - here that Java eight is installed on
25:23 - your system so let's clear the terminal
25:26 - so I'm going to clear the terminal so
25:29 - now let's start with the installation of
25:31 - Jenkins so when you go to this page and
25:35 - you will see these commands somehow
25:37 - these commands did not worked for me so
25:41 - I found on internet some commands which
25:43 - worked for me so the first command is
25:46 - this one so I'm not going to follow and
25:49 - copy and paste these commands because
25:51 - these did not work for me
25:54 - I'm going to copy this command and these
25:57 - commands I'm going to give you in the
25:58 - description also so we are going to give
26:02 - the first command and then press ENTER
26:04 - and then give your open to password and
26:07 - then the second command which is this
26:11 - one just copy and paste and then press
26:13 - ENTER and now the third command which is
26:18 - to update
26:23 - and now the fourth command which is to
26:26 - actually install Jenkins which is sudo
26:30 - apt-get install Jenkins and then press Y
26:34 - and you can see this command is also
26:38 - finished so in order to check whether
26:41 - Jenkins is really installed or not you
26:44 - can open your browser and hear Jenkins
26:47 - generally starts on localhost port 8080
26:50 - so I'm going to just write local host :
26:55 - 8080 and then press Enter and you will
26:59 - be able to see this kind of page which
27:01 - says unlock Jenkins so here we are going
27:05 - to provide the initial password which is
27:08 - saved at this location so we are going
27:12 - to go to this location but first of all
27:14 - I want to show you some more command in
27:17 - order to just many Jenkins on open to so
27:21 - because Jenkins is installed as a
27:24 - service on your Boone to operating
27:26 - system you can always use a system CTL
27:32 - status for example if you want to check
27:35 - the status Jenkins
27:38 - okay so with this system CTL command you
27:42 - can start Jenkins or stop Jenkins or see
27:45 - the status of Jenkins or restart Jenkins
27:48 - also so when I give this command sudo
27:50 - systemctl status Jenkins and then press
27:53 - enter it's going to give me the status
27:56 - of Cheng concerned right now it's active
27:58 - and running and for example I want to
28:03 - restart or start my Jenkins once again
28:05 - instead of status I can just right start
28:08 - if I want to restart it I can just right
28:12 - here restart and it's going to be
28:16 - restarted so all these commands are for
28:18 - future references if you want to restart
28:21 - or stop in order to stop you can just
28:23 - right stop here so just write stop and
28:27 - Jenkins will be stopped
28:28 - so these commands are for the future
28:31 - reference whenever you want to just
28:33 - manage your Jenkins or stop or restart
28:35 - chain
28:36 - now let's finish the installation
28:38 - process so you can see on this page it
28:40 - says unlock Jenkins and you will see
28:43 - this part here and on this part the
28:47 - initial admin password is saved so I'm
28:49 - going to just copy this part whole part
28:52 - and then go to the terminal once again
28:55 - and then I'm going to let's let me clear
28:58 - the terminal first of all and here I'm
29:02 - going to just write cat and then just
29:04 - paste this part which I have copied from
29:07 - here which is this one and in this file
29:10 - your initial password is there and cat
29:13 - is used to just output the content of
29:16 - the file so I'm going to just do this
29:19 - and says permission denied so I will do
29:22 - this with the sudo in front of it so I'm
29:25 - going to just write sudo and then press
29:27 - Enter
29:27 - and you can see this password here so
29:30 - you can just directly copy this file
29:32 - password right click copy or what you
29:36 - can do is you can also use the G added
29:39 - command so instead of cat you can just
29:42 - write G add it this is the graphical
29:45 - editor and here you will find the same
29:49 - password and then you can just copy and
29:52 - then you just need to paste this
29:54 - password here so once you have pasted
29:57 - your initial password I'm going to just
29:58 - click continue and I don't want to save
30:02 - anything and in here I can see two
30:05 - options for customizing Jenkins one is
30:08 - install suggested plugins and other is
30:11 - select plugins to install so I'm going
30:13 - to choose the first option which says
30:15 - install suggested plugins so I'm going
30:18 - to click on this option we're just going
30:20 - to start installing and the suggested
30:22 - plugins here so you can see different
30:25 - kind of plugins will be installed for
30:27 - gate for example subversion or LDAP or
30:32 - Gradle and other plugins now keep in
30:36 - mind I don't have a gate or a subversion
30:39 - or LDAP yet installed on my Ubuntu
30:42 - operating system so it's okay if you
30:44 - don't have these installed previously so
30:48 - we will just in
30:50 - all the plugins and whenever we want
30:52 - some software for example get or
30:55 - subversion or LDAP or anything we will
30:58 - install it later
30:59 - so I'm going to wait for this plug-in
31:02 - installation to complete so now the
31:04 - installation of all the plugins are
31:05 - complete and this page is redirected to
31:08 - this window where it says create first
31:12 - admin user so we are going to create our
31:15 - first admin user so you can provide any
31:18 - name I'm going to just provide username
31:21 - admin here you can provide any name and
31:23 - then give her some password which you
31:27 - can remember and which is strong so I'm
31:29 - going to give some password here and I'm
31:33 - going to repeat my password and now I'm
31:36 - going to give the name for example admin
31:40 - once again and now I'm going to give the
31:44 - email ID email address and then I'm
31:48 - going to just press this button which
31:50 - says save and continue and you can see
31:53 - this message which says instance come
31:55 - figuration Jenkins URL which is this one
31:59 - which is localhost 8080 which is OK for
32:02 - us for now so just leave it as default
32:04 - and then press save and finish and you
32:07 - will be able to see this message which
32:10 - says Jenkins is ready your Jenkins setup
32:13 - is complete start using Jenkins so we
32:16 - are going to just press this button
32:17 - which says start using Jenkins and now
32:23 - if you see this kind of interface you
32:25 - know that Jenkins is working fine on
32:28 - your system so this is how you can
32:31 - install a Jenkins on your open to
32:34 - operating system
32:36 - hey guys in this video I'm going to show
32:37 - you how you can download and install
32:39 - Jenkins on your Mac operating system now
32:43 - in order to install Jenkins we need to
32:44 - have Java installed on our system and we
32:47 - will see which version of Java we are
32:50 - required to install Jenkins on Jenkins
32:53 - page so let's get started and let's see
32:56 - how we can do it so first of all open
32:58 - your favorite browser and search for
33:00 - Jenkins and in here the first link which
33:04 - will appear here will be from Jenkins
33:06 - dot IO so I am going to click on this
33:08 - link and once you are in this website
33:11 - you just need to go to the Downloads
33:15 - button so I'm going to click on the
33:16 - Downloads button and then you will come
33:19 - to this Downloads web page right let's
33:22 - see the requirements of installing
33:24 - Jenkins on our Mac so in order to see
33:27 - that you just need to go to the
33:29 - documentation page I'm going to open
33:31 - this documentation page on the next tab
33:34 - so documentation page and then use
33:37 - Jenkins so just click on documentation
33:39 - and then click use Jenkins and in here
33:43 - we will just scroll down a little and we
33:46 - will just find the section which says
33:49 - installing Jenkins and I'm going to
33:51 - click on this and once you click on this
33:55 - we will see the prerequisite of
33:57 - installing Jenkins so here you can see
34:00 - the system requirements and under this
34:02 - you can see the software requirements
34:04 - and the software requirement says ja8
34:07 - either Java runtime environment or Java
34:10 - development kit is fine so we need to
34:13 - have Java 8 installed in order to use
34:17 - Jenkins on our Mac so I already have
34:20 - Java installed on my system if you don't
34:23 - you just need to install it now once you
34:26 - have done this we are ready to install
34:28 - Jenkins so just come to the downloads
34:30 - page and then just scroll down a little
34:33 - don't click on the download button we
34:35 - will just go down and we will search for
34:39 - the section which says Mac OSX now you
34:42 - can see here there are two categories
34:45 - here one is the weekly build so this is
34:48 - the most
34:49 - latest bill you can get for Jenkins and
34:53 - other is the LTS version which is long
34:56 - term support version so we are going to
34:59 - download and install the LTS version so
35:01 - just go under the LTS of section and
35:05 - then choose the Mac OSX so just click on
35:08 - this Mac OS X and this is going to start
35:11 - the download of this Jenkins two point
35:15 - one zero seven which is the latest
35:17 - LTS version dot pkg files so I'm going
35:21 - to wait for this download to complete so
35:24 - now the download of this dot pkg file is
35:27 - complete so I'm going to double click on
35:28 - this
35:29 - pkg file and now I'm going to minimize
35:32 - the browser and you can see here the
35:34 - Installer for Jenkins has been started
35:36 - so here I just need to click continue
35:38 - and the next step is to agree with the
35:41 - license terms and conditions so I'm
35:43 - going to just click on continue button
35:45 - and I'm going to just click agree and on
35:48 - this next step you will be asked how do
35:50 - you want to install the software install
35:53 - for all users of this computer so this
35:56 - is OK for me so I'm going to just click
35:57 - on continue and in the next step it says
36:00 - this will take around 74 megabyte of
36:03 - space on your computer and then click
36:06 - install to perform the standard
36:08 - installation so I'm going to just click
36:10 - on install button and here I just need
36:14 - to give my Mac's password so I'm going
36:16 - to give my Mac's password and I'm going
36:18 - to just say install software and this is
36:21 - going to start the installation process
36:23 - for Jenkins
36:24 - so I am going to wait for the
36:26 - installation to complete and once the
36:32 - installation is complete you will see
36:34 - directly on your default browser on the
36:38 - localhost port 8080 this Jenkins page
36:43 - will start automatically and it will say
36:46 - please wait while Jenkins is getting
36:48 - ready to work ok so it will start
36:51 - automatically on localhost port 8080 so
36:56 - if it doesn't start you can just write
36:58 - on your favorite browser localhost port
37:01 - 8080 and you will see this kind of junk
37:04 - in space and the first step is to unlock
37:08 - Jenkins
37:09 - so the initial admin password for
37:13 - Jenkins which is required here is saved
37:17 - on this location so you need to just
37:21 - copy this initial admin password from
37:24 - this location and then you just need to
37:28 - paste it here in the admins password so
37:31 - I'm going to just copy this part and
37:33 - once you have copied this parks just
37:36 - open your terminal and in here you just
37:38 - need to write sudo and then cat and then
37:42 - just paste this part and then press
37:44 - ENTER and give your Mac's password here
37:47 - and then press ENTER and then you will
37:51 - see this password here so you just need
37:53 - to copy this password which is this one
37:57 - in your case it can be different and
37:58 - then just paste this password here and
38:02 - then press Continue
38:04 - so just paste the password you have
38:05 - copied and then press Continue now on
38:08 - the next step you will be asked to
38:10 - customize Jenkins so there are two ways
38:13 - of doing this you can click this button
38:16 - which says install suggest as plugins or
38:18 - you can click this button we say select
38:21 - plugins to install so we will choose the
38:23 - first option which says install
38:25 - suggested plugins and I'm going to click
38:28 - on this button which is going to start
38:30 - installing the suggested plugins these
38:33 - plugins are for example gate or LDAP or
38:38 - subversion plug-in or Gradle plugin so
38:41 - these are some of the suggested plugins
38:43 - which are suggested by chang keynes to
38:45 - us
38:46 - so I will just wait for the plugins to
38:49 - install it will take some times to
38:51 - install each and every plugin so I'm
38:53 - going to wait for that and once each and
38:56 - every plug-in is installed we will be
38:59 - redirected to create our admin
39:02 - credential so I'm going to wait for that
39:04 - so now all the plugins are installed on
39:06 - the Jenkins and I will be redirected to
39:09 - this create first admin user page
39:13 - automatically so after installing all
39:16 - the plugins you will see this page which
39:18 - says create first admin user so I'm
39:21 - going to create the first admin user and
39:23 - I'm going to just say username is admin
39:26 - you can give any name here user name
39:29 - here and then give any password here and
39:31 - then repeat the password and then give
39:36 - your full name I'm going to just write
39:37 - and win once again but you are free to
39:40 - give any name which you like and here
39:43 - you just need to give your email
39:44 - whatever you like so I have given my
39:46 - email address and then I'm going to just
39:49 - press save and finish which is going to
39:51 - save this admin user and password and
39:55 - I'm going to just say never for this
39:57 - website and you will see this message
40:00 - which says Jenkins has ready start using
40:03 - Jenkins so I'm going to just click on
40:05 - this button we say start using Jenkins
40:07 - and you will see the Jenkins interface
40:12 - here right so here you can create your
40:15 - first job by clicking this button and
40:17 - then you can install other plugins to
40:21 - manage the users which we will cover in
40:24 - the later video so I'm going to click on
40:26 - this link which says create new jobs and
40:29 - from here you can create a different
40:33 - kind of jobs for example freestyle
40:35 - project or pipeline or multi
40:37 - configuration project or any other kind
40:41 - of project so this we are going to see
40:43 - later so this is how you can download
40:46 - and install Jenkins on your Mac
40:47 - operating system hey guys welcome to the
40:50 - next video on Jenkins tutorial for
40:52 - beginners in the last few videos we have
40:55 - seen how to install Jenkins on variety
40:58 - of operating systems
41:00 - like Windows Mac OS and Linux operating
41:03 - system now moving forward I'm going to
41:07 - use my u bun to operating system in
41:09 - order to demonstrate Jenkins
41:12 - functionalities because most commonly
41:15 - and most frequently Jenkins is used on a
41:19 - Linux operating system but having said
41:22 - that if you are running a Jenkins on
41:24 - Windows or Mac operating system you can
41:28 - also follow along with this series
41:32 - because most of the time we will be
41:34 - working with this Jenkins UI on a
41:37 - browser so it doesn't matter on which
41:40 - operating system I'm working on now if
41:43 - you want to practice Jenkins on a Linux
41:48 - machine it's also easy if you have
41:50 - Windows or Mac operating system what you
41:53 - can do is you can install VirtualBox or
41:56 - VMware Player which are the software
41:59 - using which you can install Linux or any
42:02 - other operating system virtually on your
42:05 - Mac or your Windows operating system I
42:08 - have already made some videos on how you
42:12 - can install Ubuntu on VirtualBox and
42:15 - VMware Player so if you want to use
42:18 - Ubuntu or any other Linux system
42:20 - virtually on Windows then you can
42:24 - install VirtualBox or VMware Player and
42:26 - install Linux and then install Jenkins
42:30 - on it and you can follow along with this
42:33 - series so in this video I'm going to
42:35 - show you how you can create your first
42:37 - Jenkins job so let's create our first
42:40 - Jenkins job so what I'm going to do in
42:44 - this Jenkins job is I have a Java
42:46 - program on my operating system which I
42:50 - want to build and run using Jenkins and
42:53 - I'm going to show you how you can do it
42:55 - using your first Jenkins job so to
42:58 - create a Jenkins job you can either
43:00 - click on this link which says create new
43:03 - jobs or you can click on this option
43:06 - which says new item so I'm going to
43:08 - click on this option which says create
43:10 - new job and then you will see
43:13 - an interface which says enter and item
43:16 - names so I'm going to give my Jenkins
43:18 - job name as hello world here
43:23 - okay now you will be able to see few
43:25 - options under this name so there is a
43:29 - freestyle project pipeline multi
43:32 - configuration project folder and other
43:34 - options so to start with we are going to
43:37 - start with the freestyle project so just
43:40 - choose the freestyle project and then
43:42 - click OK and once your job is created
43:45 - you will be able to see this kind of a
43:48 - window here so first we need to
43:51 - configure our Jenkins job so the first
43:54 - thing here is the general tab and here
43:58 - you can provide a simple description
44:00 - about your job so what this job is going
44:03 - to do is going to build and run java
44:11 - program let's see so here you can
44:13 - provide a simple description about your
44:15 - project and also you can preview your
44:19 - you know description here so it will be
44:22 - shown like this on your job window we
44:27 - can configure it and change this thing
44:29 - in the future so that we will be able to
44:32 - use the HTML tags also in the
44:35 - description and now let's move to the
44:38 - next section so under the description
44:40 - you will be able to see discard old
44:43 - builds when you build your Jenkins job
44:46 - or github project or this project is
44:49 - parameterised for now we will not be
44:53 - using any of these options so just leave
44:55 - everything as unchecked and we will move
44:58 - to the next section which is source code
45:00 - management now by default you will see
45:04 - three options here one is a none second
45:07 - is git and third is a subversion so for
45:10 - now we will choose the none option
45:12 - because we will not be using any source
45:16 - control management system for this video
45:19 - but in future we will be using gate or
45:21 - subversion in order to a pull the source
45:26 - code from the
45:27 - github for example and then how to build
45:30 - or run the test on it so just choose the
45:34 - none option here and then we will move
45:36 - to the build triggers you can also click
45:40 - on this option which will just lead you
45:43 - to this category now here you will see
45:47 - few options first option is trigger
45:49 - bills remotely we will see this in the
45:52 - next video
45:53 - build after other projects are built
45:56 - this also we are going to see in the
45:57 - next video the third option is build
46:00 - periodically so we are going to choose
46:02 - this option for this video and the next
46:05 - option is github hook trigger for gate
46:07 - SCM polling and pool SCM which is for
46:12 - the source code management system so
46:15 - these option we are going to see in the
46:18 - future when I am going to show you how
46:20 - you can configure gate and other options
46:23 - into your champions now by the name you
46:27 - can just guess that this option is going
46:29 - to build or you know run your test
46:33 - periodically but how we can configure
46:35 - our Jenkins to run periodically so for
46:39 - the help you can just click on this
46:43 - question mark here and then you will be
46:46 - able to see all the options which you
46:48 - can use here so you can see this field
46:53 - follows the syntax of Crone
46:55 - right so for example when I write
46:58 - Asterix
46:59 - Asterix Asterix Asterix Asterix using
47:03 - spaces so 5 X tricks and between them I
47:06 - have used spaces this means that I want
47:09 - to run my Jenkins job every minute and
47:12 - when you do this you will be able to see
47:16 - the hint here so it says do you really
47:19 - mean every minute when you say estwick
47:22 - sighs tricks s tricks s tricks and then
47:25 - it says perhaps you meant other option
47:27 - right so this when you write 5 time
47:31 - Asterix with the spaces in between them
47:33 - it means that you want to run your
47:35 - Jenkins job every minute now if you want
47:38 - to read more you can
47:40 - read this whole document so you can see
47:44 - in the help window here this Asterix
47:46 - means these five options so the first s
47:50 - tricks here means the minute the second
47:53 - X tricks is for the hour
47:55 - third is for the date of month fourth is
47:57 - the month and fifth is the day of the
48:00 - week right and you will be able to see
48:03 - also some examples here when you scroll
48:07 - down a little so for example if you want
48:10 - to run your Jenkins job every 15 minutes
48:13 - you can use this option for example so
48:16 - I'm going to just copy this and paste it
48:19 - here and now it says would last have run
48:22 - at Saturday at this time and the next
48:25 - time will be 15 minutes after that okay
48:29 - so if you have any confusion you can
48:31 - read this document and you can also use
48:34 - these example in order to run your
48:38 - Jenkins job so to start with we are
48:40 - going to start building our Jenkins job
48:44 - every minute so we are going to just
48:48 - give 5 s tricks here ok and you can once
48:51 - again collapse this helped window when
48:54 - you click on this question mark here
48:56 - once again now let's go to the build
48:58 - environment which is this option so the
49:01 - first option here is delete workspace
49:03 - before build starts so we don't want to
49:07 - delete our workspace so we will not
49:10 - check this option second is use secret
49:12 - text and file we will see this option
49:15 - later
49:15 - third is abort the build if it's stuck
49:19 - we can also use the use it later at
49:22 - timestamp on the console output this we
49:25 - can use it but I'm going to skip this
49:27 - for now because we want to build a very
49:30 - simple Jenkins job and I'm going to skip
49:33 - also the last option so I don't want to
49:35 - check any of the check boxes in the
49:38 - build environment now the next option is
49:41 - the build option and here you can just
49:44 - choose which type of weld you want to
49:46 - perform so if you are on Windows you can
49:49 - choose this option which says execute
49:51 - windows batch command which is the
49:54 - windows terminal if you are on Mac or
49:57 - Linux you can choose this option which
49:59 - says execute shell which is like
50:02 - executing command on your terminal now
50:05 - what we want to do in this execute shell
50:09 - so let me show you what I want to build
50:11 - here so in my home folder I have a
50:14 - directory called Java sample and in this
50:18 - directory I have a file called hello
50:21 - world dot java and when I open this file
50:24 - I have a simple hello world program
50:26 - written here which only prints hello
50:29 - world right so I want to build this
50:33 - program using Jenkins so to build this
50:37 - program I know that I can use Java C
50:40 - command to compile my Java program so
50:43 - I'm going to just copy the path where
50:45 - this file is located which is in this
50:50 - location which is home my username and
50:53 - this Jenkins sample project and I'm
50:57 - going to just CD to this directory so CD
51:01 - to the Java samples directory now here I
51:04 - can just run Java C command in order to
51:08 - compile my HelloWorld dot Java file
51:11 - right so this is going to compile my
51:15 - code and to run my HelloWorld the
51:18 - program I can just use Java and then
51:22 - hello world which will be the executable
51:25 - file so these three lines what they are
51:28 - going to do first of all we are going to
51:30 - change directory to the Java samples
51:33 - directory and then Java C is going to
51:36 - compile my HelloWorld dot Java file and
51:39 - then Java HelloWorld is going to run my
51:43 - program so after doing this you can just
51:46 - press on save which is going to save
51:49 - your configuration and if you want to
51:52 - change this configuration in future you
51:55 - can always go to this option so on the
51:59 - left hand side you will be able to see
52:00 - this option which says configure and
52:03 - when you press on this option this
52:06 - configuration window
52:07 - we'll open once again where we have done
52:10 - our configuration right and when you
52:12 - click on this option which says Jenkins
52:15 - you will come to the Jenkins home page
52:18 - now in here you will see first of all
52:21 - that there is no build here and the
52:27 - status of this build is shown by this
52:31 - glowing Sun right and our project name
52:35 - is or our Jenkins job name is hello
52:37 - world now we have configured our Jenkins
52:42 - job to run every minute right
52:45 - so I'm going to click on this Jenkins
52:47 - job for now and you can see even if we
52:51 - haven't started any Jenkins job it has
52:56 - already started my Jenkins job and the
52:59 - status here is a red ball which means my
53:04 - job has failed ok so we will see how so
53:10 - we will see why my job has failed so
53:13 - what I can do here is I can click on
53:16 - this job you can just click on this and
53:18 - you will see this kind of window and it
53:21 - says red here which means failed and
53:24 - when you want to see more about your
53:27 - build status you can always go here
53:29 - which says console output which is going
53:32 - to show what exactly happened and now in
53:36 - the console output you will be able to
53:38 - see what happened while running your job
53:42 - and why your job failed so in here I can
53:45 - see this message so while performing
53:48 - this step which is Java see
53:51 - helloworld.java it says this message so
53:55 - error is error while writing hello world
53:58 - hello world class
54:00 - permission denied and this most probably
54:03 - happens when Jenkins doesn't have
54:06 - permission as a pseudo user on a Linux
54:09 - machine most probably on Windows it will
54:12 - run fine but on Linux we need to provide
54:15 - Jenkins the sudo privileges so let's
54:19 - change the su
54:20 - your privileges so let's go to the hello
54:23 - world and you can see already there are
54:25 - three bills because we have configured
54:27 - to run Jenkins every minute so don't
54:30 - worry about this what we are going to do
54:33 - is we are going to open the terminal
54:35 - to open the terminal I can just go here
54:38 - and just search for the terminal or
54:41 - press ctrl alt T on my Ubuntu operating
54:45 - system and first of all what I need to
54:48 - do here is I need to open a file using a
54:51 - pseudo privileges so just write sudo and
54:55 - then /e TC for a slash su dois okay so
55:00 - I'm going to give you this command in
55:01 - the description also so just write sudo
55:04 - and then any tool which can open and
55:08 - edit your file for me I'm going to use G
55:12 - edit or you can use nano or VI or the
55:15 - best would be sudo VI sudo okay so just
55:20 - write sudo G added /e tc4 / su doors and
55:25 - then press enter and then give your
55:27 - windows password or Damian's password
55:30 - and then at the end I'm going to just
55:33 - give a little space here and then at the
55:37 - end I just need to just give Jenkins
55:41 - user all the privileges and I want to
55:45 - just give no password here so that it
55:48 - will not ask for the password
55:50 - okay so just provide this line in your
55:54 - open to operating system in order to
55:56 - provide Jenkins the sudo command
55:59 - privileges right and then just save this
56:03 - and then close this and now I'm going to
56:06 - go to the configure section once again
56:09 - and in here instead of writing Java C
56:14 - something like this I can always give a
56:17 - sudo to compile my program so just write
56:22 - sudo in front of Java C and if you are
56:24 - on Windows most probably you won't be
56:27 - needing this sudo command so just skip
56:29 - the sudo command if you are on Windows
56:31 - right so I'm going to save
56:34 - yes once again and I'm going to build my
56:37 - program so this button is going to build
56:40 - your program immediately so it will not
56:43 - wait for the prebiotic trigger to you
56:46 - know build your Jenkins job it'll build
56:49 - your Jenkins job immediately so you can
56:51 - see now our job shows a blue ball
56:56 - this means the last build was successful
57:00 - so let's go inside this build and then
57:03 - go to the console output and you can see
57:05 - now it prints hello world right so once
57:10 - again I'm going to go to my job and you
57:13 - can see previous all the previous jobs
57:16 - have failed because we haven't provided
57:19 - Jenkins the sudo privileges but now you
57:22 - can see this is the periodic bill which
57:25 - has been started and it's successful so
57:29 - in this section you can see the times at
57:32 - which your bill started and what was the
57:35 - status of bills using the color of these
57:39 - balls and when you go on the main page
57:43 - when you click on champions here you
57:45 - will be able to see blue ball here which
57:48 - means that last build was successful and
57:52 - when you see this kind of rainy cloud
57:56 - here and you when you hover over this
57:59 - cloud you will see the status of last
58:02 - five bills so you can see it says build
58:05 - stability three out of last five bills
58:09 - failed right and when I run this build
58:13 - few times once again so when I want to
58:16 - just run this Jenkins job five times so
58:21 - that the last five bills will be
58:24 - successful so you can see four out of
58:27 - five are now successful and now you can
58:31 - see this icon has changed so now the
58:34 - icon is like sunny and little bit cloudy
58:38 - and it says one out of five bill have
58:41 - failed right so it shows the last five
58:44 - build and once your last five bills
58:48 - are successful or were successful then
58:51 - you will see the whole Sun here so I'm
58:54 - going to refresh this page and I'm going
58:57 - to go to the build here and let's see if
59:01 - the build has been started or we will
59:03 - start in manually using build Now button
59:05 - and it's going to start the build and
59:09 - you can see last five bills are
59:11 - successful now and when I go to the
59:14 - Jenkins home page you can see this
59:16 - bright Sun here and you can see the
59:19 - message here which says no reason bill
59:21 - failed so here this I can always so
59:26 - shows the status of last five build and
59:30 - this will show if your job is in
59:35 - progress or it's already is failing or
59:39 - last build was successful if it's blue
59:42 - now in this table you will also see some
59:44 - other sections here so this is the
59:47 - section where last build occurred so for
59:50 - example 8.9 second ago last build was
59:54 - occurred and this was the build number
59:56 - 14 and last failure was three minutes
60:00 - ago which was in build number nine and
60:03 - by default this status doesn't refresh
60:07 - by itself there is a small option here
60:10 - on the right-hand side top and you can
60:13 - click on this which says enable auto
60:16 - refresh and this is going to enable the
60:19 - auto refresh after a few seconds so you
60:22 - will be able to see the most refreshed
60:25 - status here okay so you can see it
60:28 - refreshes after a few seconds and you
60:31 - can see the status last build last
60:34 - success was 47 seconds ago and last
60:37 - failure was 4 minute 47 seconds ago so
60:41 - this is how you can create your first
60:42 - Jenkins job hey guys welcome to the next
60:46 - video on Jenkins to troll for beginners
60:48 - in the last video we have seen how we
60:51 - can create our first Jenkins job now in
60:54 - this video we are going to see how we
60:56 - can configure our Jenkins job so that we
60:59 - can run our Jenkins job
61:02 - remotely or how to chain the job
61:05 - execution so let's see them one by one
61:09 - so I have created this hello world
61:12 - Jenkins job in the last video so I'm
61:15 - going to click on this job and then I'm
61:19 - going to click on configure to change
61:21 - the configuration of this Jenkins job
61:24 - now when you reach in the configuration
61:26 - area just click on build triggers and
61:29 - what this build periodically trigger was
61:32 - doing is it was triggering our job in a
61:36 - periodic way depending on the Kron
61:39 - scheme we have provided here now let's
61:42 - say we want to trigger our job remotely
61:45 - then for that we can choose this option
61:48 - which says trigger build remotely so I'm
61:52 - going to choose this checkbox and I'm
61:54 - going to uncheck this build periodically
61:57 - checkbox and here you can see this
62:01 - option which says authentication token
62:04 - and you will also see this message which
62:07 - is a very helpful message which says use
62:10 - the following URL to trigger build
62:12 - remotely so this will be the URL format
62:16 - you can use to trigger the build
62:19 - remotely so I'm going to copy this URL
62:22 - and I'm going to paste it into the next
62:26 - tab so here first option here is Jenkins
62:30 - URL so here you can give the IP address
62:34 - of your server for example right now
62:37 - it's localhost so I can just write
62:40 - localhost and then the port is port 8080
62:44 - or if you have the IP address of this
62:47 - server then you can write the IP address
62:50 - of the server so for the local host
62:52 - instead of localhost I can just write
62:54 - 127.0.0.1 or any other server IP address
62:59 - on which this server is working on now
63:03 - the next thing here is the token name in
63:06 - capital so this token name is I'm going
63:10 - to go to my Jenkins job configuration
63:12 - and this token name
63:14 - is the token name which you will provide
63:17 - here so for example you can provide any
63:21 - complex password or anything here which
63:25 - will be your token name so let's say I
63:27 - just write here one two three four five
63:31 - and I'm going to save my configuration
63:34 - and then I'm going to go to my next tab
63:39 - and instead of the token name I will
63:42 - just provide the token name which I have
63:43 - given for my Jenkins job which is one
63:46 - two three four five right now let's go
63:49 - to the Jenkins job once again and I'm
63:52 - going to go to the home page of Jenkins
63:54 - here you can see the last success was in
63:58 - build 24 and when I click on this job
64:02 - you will be able to see the build
64:04 - history so the last job was 24 so let me
64:10 - go to the next tab and I'm going to just
64:12 - give this URL and then press ENTER which
64:16 - is going to execute my job so I'm going
64:19 - to just give my username and password
64:23 - here once again and then I'm going to
64:26 - just say remember me for this computer
64:28 - and then login and once you do this and
64:31 - when you go to that Jenkins job and when
64:34 - you refresh it you can see the last
64:37 - build pause bill 25 which is triggered
64:42 - using this URL okay so once again I'm
64:47 - going to refresh it and I'm going to
64:50 - just give this URL once again on the
64:53 - next tab and then press enter and you
64:56 - will see in a few seconds the new build
64:59 - occurs so this is how you can trigger
65:01 - your build remotely now the next thing I
65:05 - want to show here is how we can change
65:07 - our Jenkins job execution so let's say
65:11 - we have a scenario that we have created
65:14 - this Jenkins job which was compiling the
65:18 - Java program and running it right so
65:22 - let's say we want to create few Jenkins
65:24 - job one Jenkins job we want to create is
65:27 - to build
65:28 - our Java program second is to run our
65:32 - jug of Java program and in the third
65:35 - Jenkins job let's say we want to just
65:37 - display the success message so for that
65:40 - we need to create two more Jenkins job
65:43 - and first of all we need to change the
65:45 - name of this Jenkins job which is hello
65:49 - world so we will just rename it to
65:53 - HelloWorld build first of all and then
65:55 - we will create HelloWorld run Jenkins
65:58 - job and HelloWorld success message
66:01 - Jenkins job or solo world message job so
66:04 - let me show you how you can rename your
66:07 - Jenkins job so you can see the option
66:10 - here rename which you can use to rename
66:13 - your Jenkins job so instead of using
66:15 - HelloWorld Jenkins job name I want to
66:18 - rename it as HelloWorld build so I'm
66:21 - going to just write hello world build
66:23 - and then I'm going to just click on
66:26 - rename which is going to rename my
66:29 - Jenkins job to hello world build now
66:32 - let's create two more Jenkins job one is
66:35 - hello world run so I'm going to just
66:38 - click on new item and here I'm going to
66:41 - give the name of my Jenkins job this
66:43 - will be the hello world run now one more
66:46 - way of creating the Jenkins job if the
66:49 - jobs are relatively similar then you can
66:52 - copy the configuration of the old
66:54 - Jenkins job into the new Jenkins job
66:57 - using a copy feature and when you scroll
67:01 - down here you will see this option which
67:04 - says copy from and here we can just
67:07 - write hello world build which is the
67:10 - chenkin job from which we want to copy
67:13 - the configuration to hello world run job
67:16 - and when you click OK all the
67:19 - configuration of hello world build will
67:22 - be copied to this Jenkins job which is
67:25 - hello world run and here we can just
67:29 - change the description so this job is
67:32 - only going to run the Java program so
67:35 - I'm going to just change it to run Java
67:37 - program and when I go down a little and
67:41 - in here I'm going to remove this line
67:43 - because this line was compiling or
67:46 - building our Java program and this we
67:50 - are already doing in the hello world
67:52 - build Jenkins job and this is hello
67:55 - world run so I'm going to just remove
67:57 - this and I just want to run the
67:59 - executable file which was created by a
68:01 - hello world build and this is the hello
68:04 - world run Jenkins job and now I'm going
68:07 - to click on build triggers and instead
68:10 - of using this option which says trigger
68:12 - build remotely we want to build our
68:15 - Jenkins job after the success of the
68:20 - previous job which is hello world build
68:24 - so I'm going to just copy the name of
68:27 - the Jenkins job after which I want to
68:30 - execute this hello world run Jenkins job
68:33 - so after hello world build I want to run
68:36 - hello world
68:37 - run Jenkins job so just check this
68:40 - checkbox and just write the name of the
68:42 - chenkin job after which you want to
68:44 - execute your hello world run Jenkins job
68:48 - and then I'm going to just save my
68:51 - configuration and I'm going to go to the
68:53 - home page and you can see there are two
68:56 - jobs now one is hello world build and
68:59 - another is hello world run I need to
69:02 - change the configuration of hello world
69:04 - bill also because now we just want to
69:07 - build our Java program using this
69:11 - Jenkins job and not run it so I'm going
69:13 - to just remove the description here for
69:15 - run I just want to build Java program
69:18 - and in the build trigger let's say we
69:20 - want to just trigger this build remotely
69:24 - or we will just click on the build now
69:26 - button and execute the bill so I will
69:28 - not change this and when you scroll down
69:31 - a little from here I will just remove
69:34 - this Java HelloWorld command because
69:36 - this we are doing in HelloWorld run
69:39 - Jenkins jobs so I'm going to just remove
69:42 - this last command and save this so now
69:45 - both the Jenkins job have been created
69:48 - you can create one more Jenkins job and
69:51 - chained it in a similar fashion so let's
69:53 - create one more champions job
69:55 - and this Jenkins I want to name it as
69:57 - hello world let's say message okay so
70:01 - this is going to just print the message
70:03 - of the execution and I'm going to just
70:08 - say freestyle project and I'm going to
70:11 - just say okay I'm not going to copy the
70:13 - configuration and in the description I'm
70:16 - going to just this play message and in
70:20 - the source code code management I will
70:23 - leave it as none in the bill triggers
70:25 - this will be executed after the hello
70:29 - world run Jenkins so I'm going to just
70:31 - check on this checkbox which says build
70:34 - after the other project build and here
70:36 - I'm going to just write hello world run
70:40 - I'm going to choose this option which
70:42 - says hello world run so this Jenkins job
70:45 - will run after hello world
70:47 - run Jenkins job is executed and now I
70:50 - will just scroll down a little and in
70:52 - the build section I will just choose
70:54 - execute shell and here I will just echo
70:58 - something so I will just write echo and
71:00 - in the double quotes I will just print
71:04 - something which I can recognize so I'm
71:06 - going to just print these echo messages
71:11 - and here in between the lines I want to
71:15 - just say success let's say and now I
71:19 - will just save my job
71:21 - and when I go to the home page now we
71:25 - have three Jenkins job
71:27 - HelloWorld build HelloWorld run and
71:29 - hello world message so let's just start
71:32 - the build of hello world build Jenkins
71:35 - job so for that I can just click on this
71:38 - little arrow here and I can just say
71:40 - build it now which is going to start the
71:43 - build of hello world bill and you will
71:46 - see after some time you can see this is
71:49 - in the queue so hello world run is in
71:52 - the queue so as soon as my hello world
71:55 - build is completed the hello world run
71:58 - will be executed and now you can see
72:00 - hello world message in the is in the
72:02 - queue because hello world run is
72:05 - completed so hello world message will be
72:08 - executed after the execute
72:09 - of helloworld run and when i refresh
72:12 - this page now you can see here build
72:16 - number 27 last build was build number 26
72:19 - and then after this build was successful
72:23 - hello world run Jenkins job was
72:26 - triggered and you can see the build
72:28 - number 1 was triggered and after the
72:31 - success of hello world run hello world
72:34 - message was triggered which is triggered
72:37 - by the success of the hello world run
72:40 - and let's see the messages also so let's
72:44 - go to the hello world build first of all
72:46 - and then let's see a build number 27 and
72:49 - console.log and it just build the hollow
72:53 - world Java program it's a success and
72:56 - now let's go to the hollow world run
72:58 - which is going to just execute our
73:01 - executable file and let's see in the
73:03 - console it prints hello world it
73:06 - executes our hollow world executable
73:08 - file using Java HelloWorld command and
73:10 - in the last Jenkins job which is going
73:15 - just to print some message we can just
73:18 - go here hello world message and then
73:21 - when we go to the console output of this
73:23 - you can see this echo command and it
73:26 - echos success so this is how you can
73:29 - change your job execution on success or
73:33 - failure of the last build hey guys
73:37 - welcome to the next video on Jenkins
73:38 - tutorial for beginners in this video we
73:41 - will see how we can do the Jenkins
73:43 - integration with git and github so let's
73:47 - get started I'm going to minimize the
73:49 - browser first of all and if you are
73:51 - following this video series in the last
73:54 - videos we have created this Java samples
73:57 - project and inside this Java sample
74:00 - project we have a HelloWorld dot Java
74:02 - file and this is the output of that file
74:07 - now let's say we want to commit this
74:10 - project to get and then we want to push
74:13 - the changes to the github repository
74:17 - first of all I am going to show you how
74:19 - you can do it and then we will see how
74:22 - we can create a
74:23 - Jenkins job out of it now if you are new
74:26 - to get and github in the last video I
74:29 - have shown you how you can install gate
74:31 - and configure github on your open to
74:34 - operating system so just watch the last
74:36 - video of this series and you will be
74:39 - good to go so for committing my file on
74:41 - gate let me open the terminal first of
74:44 - all so I'm going to just press ctrl alt
74:47 - T to open the terminal and first of all
74:49 - I will just CD to my Java samples
74:52 - directory and in order to initialize a
74:55 - git project in this directory I can just
74:59 - give this command get in it and then
75:02 - press ENTER and this directory will be
75:06 - added to the gate now in order to see
75:10 - the status of all the file I can just
75:13 - give this command get status and then
75:16 - press ENTER and you will see this
75:18 - message which says untracked file
75:20 - because we haven't added and committed
75:23 - these files to get so let's do that so
75:26 - to add these files to get we just need
75:29 - to write get add and the file names one
75:33 - by one HelloWorld dot class space
75:36 - HelloWorld dot Java and this will add
75:39 - both these files to the gate and let's
75:43 - to get status was once again and now you
75:46 - will see both the files and the message
75:48 - is changes to be committed so let's
75:52 - commit these files so to commit on gate
75:55 - you just need to give this command gate
75:58 - commit minus m2 give the message and
76:02 - here you can give any message which you
76:05 - want to provide for your comments so for
76:07 - example first Java commit let's say or
76:12 - any other message which you like to give
76:15 - to your commit and once again we can
76:17 - commit these files one by one so just
76:20 - give the first file name and then space
76:23 - and then give the second file name and
76:25 - then press ENTER which is going to
76:27 - commit these files to the gate now let's
76:32 - check the status once again so gate
76:33 - status and you can see nothing to commit
76:37 - working three clean so now we have
76:40 - committed these files to get but in
76:42 - order to push them to get hub we need to
76:45 - create a repository on github so I'm
76:48 - going to go to the browser and I'm going
76:50 - to go to github.com and log in with my
76:53 - credentials there and here I will just
76:55 - click on start a project let's say I
76:59 - just want to give the name Java hello
77:02 - world and then you can give the
77:04 - description here which is optional but
77:07 - for now I'm going to leave everything as
77:09 - default and I'm going to just press on
77:11 - create repository which is going to
77:13 - create a blank repository for me now in
77:16 - here you will see our to help messages
77:19 - one is to create a new repository on the
77:22 - command line and other is to push an
77:25 - existing repository from the command
77:28 - line so we have already created our gate
77:31 - repository so we will push this
77:34 - repository using command line so we will
77:36 - choose the second option which is this
77:38 - one and for that we need these come on
77:41 - so I'm going to just copy the first
77:43 - command which is going to just add the
77:46 - remote origin to my project so this is
77:50 - my project and I have already committed
77:52 - these two files to my gate and to add it
77:56 - to my remote origin I just need to give
78:00 - this command git remote add origin and
78:02 - the URL of your git repository which is
78:06 - this one or simply you can copy this
78:10 - command which will be enough so once you
78:13 - have copied and pasted this command just
78:15 - press Enter
78:16 - so this command is successful now let's
78:18 - copy the second command in order to push
78:20 - our changes to the repository so I'm
78:23 - going to just copy the second command
78:25 - and go to the terminal just right click
78:28 - paste
78:29 - and then press Enter and this is going
78:32 - to push our changes to the github first
78:35 - of all we need to give our github
78:38 - credentials here so first of all the
78:41 - username and then press Enter and second
78:45 - is the password and then press enter and
78:48 - now your
78:50 - files will be pushed to your repository
78:54 - so once you have done that I'm going to
78:56 - just go to this repository which I have
79:00 - created and I will see these two files
79:02 - which I have committed to the gate in
79:05 - this folder which I am working on so
79:08 - once you have created your repository on
79:10 - github you can go to Jenkins and let's
79:13 - create a new project here and here I'm
79:16 - going to just give the same name which
79:18 - my repository has which is Java
79:21 - HelloWorld and then I'm going to choose
79:24 - the Freestyle project and I'm going to
79:26 - click OK and in the description I will
79:29 - just say Java HelloWorld example and
79:31 - rest everything we will leave as default
79:34 - and now click on source code management
79:36 - and because we are working with gate so
79:39 - now we will click on the get option and
79:42 - here you can give your git repository
79:46 - URL so to get the git repository URL you
79:50 - can just go to your repository and click
79:54 - on this green button which says clone or
79:57 - download and then just copy this URL
80:00 - from here and then paste this URL here
80:04 - which is repository URL and now we will
80:08 - scroll down a little and here it says
80:10 - branches to the build so by default you
80:14 - can see there is only one branch in our
80:17 - github repository which is master branch
80:21 - so we will leave this as default but if
80:25 - you want to have multiple branches in
80:28 - your github and then you want to clone
80:31 - for example a development branch or any
80:34 - other branch you just need to give the
80:37 - branch name of your repository here
80:40 - which you want to clone ok so right now
80:43 - we only have the master branch so we
80:45 - will leave this as default and next
80:49 - option is repository browser so we will
80:51 - also leave it as default and now we will
80:54 - go to the build triggers and for now I
80:57 - will leave everything as default but we
81:00 - will see how we can choose this option
81:02 - with sales pol SCM
81:04 - or other get option in a moment but
81:07 - first of all I want to show the simple
81:09 - way of just cloning and building your
81:12 - Jenkins job so just leave everything as
81:15 - default in your build triggers and then
81:18 - built-in environment also I'm going to
81:20 - leave everything as default now in the
81:23 - build option we will choose execute
81:25 - shell here and here we will give the
81:27 - commands to compile our HelloWorld dot
81:30 - Java program so we will just say Java C
81:35 - HelloWorld dot Java which is or Java
81:39 - file which is this one so we want to
81:42 - compile this one and then we want to
81:45 - just run this file so for running we
81:49 - will just use Java HelloWorld and by now
81:52 - I think you already know what these
81:54 - commands are doing and let's go to the
81:58 - build environment once again so here in
82:01 - the build environment you will see few
82:03 - options so first option is delete
82:05 - workspace before build start and this is
82:09 - important for us so I'm going to show
82:11 - you what this is in a moment but first
82:14 - let me add save this job first of all
82:17 - and once your job is created let's go to
82:21 - the home page and in here let's build
82:24 - this job so I'm going to just click on
82:27 - this arrow button and I'm going to just
82:29 - say built now and now the build of this
82:33 - job will start we are going to just go
82:36 - inside this Java HelloWorld and you can
82:39 - see here our build is successful so I'm
82:41 - going to go inside this pill and I'm
82:43 - going to go to the console output and
82:45 - here you will see more details so first
82:50 - of all you will see the location where
82:53 - your github repository is cloned and
82:56 - this is the location where your github
82:58 - repository is cloned right and you can
83:01 - see in the next command
83:03 - it has cloned our github repository and
83:06 - after the cloning these two command has
83:10 - been executed so first was the Java C
83:14 - HelloWorld dot Java which is used to
83:17 - compile our
83:18 - hello world program and then Java space
83:21 - HelloWorld which have resulted in this
83:24 - output which is hello world and our job
83:27 - is finished with success so this is how
83:31 - you can clone your repository and you
83:34 - can just build your job using github
83:37 - repository now let's go to this location
83:39 - which is the default
83:41 - Jenkins location where your repository
83:45 - has been cloned okay so I'm going to
83:49 - just just copy this path from here and
83:52 - I'm going to go to the terminal and open
83:54 - the next terminal and I'm going to just
83:56 - give CD and whatever part you have
83:59 - copied and I'm going to just press ENTER
84:01 - here and I'm going to do LS here and you
84:04 - can see both of your file are here so
84:08 - hello world our class is there and
84:10 - HelloWorld dot Java is there now let's
84:13 - see if some more configuration options
84:15 - for our Jenkins jobs so I'm going to go
84:18 - to my Jenkins job and I'm going to go to
84:20 - the configuration now and once again in
84:24 - the configuration I'm going to go to the
84:27 - build environment and I'm going to
84:29 - choose this option which says delete
84:32 - workspace before bill start so this is
84:36 - going to delete this workspace before
84:40 - our bill start so this is the workspace
84:43 - of Jenkins and if you choose this option
84:46 - this is going to delete the workspace
84:49 - before this Jenkins job starts right so
84:52 - I'm going to save the job and build it
84:55 - once again and hopefully this will also
84:58 - be successful and I'm going to go to my
85:01 - job and then see the console output and
85:04 - you can see building in workspace once
85:08 - again and then first of all it has
85:11 - deleted our before space and once again
85:14 - cloned our repository ok so this is the
85:17 - extra step when you choose the delete
85:19 - workspace option now let's see some more
85:23 - configuration options so I'm going to go
85:26 - to the configuration of my Jenkins job
85:29 - and this time I'm going to go to
85:32 - build triggers and in the build triggers
85:35 - I'm going to choose this option which
85:37 - says Paul SCM and this option works
85:40 - similar to the build periodically option
85:44 - which works on the Kron mechanism so if
85:47 - you give five asterisks here this is
85:52 - going to pull every minute to your
85:54 - repository for any changes and if you
85:57 - have done any changes to your github
85:59 - repository this is going to detect your
86:02 - changes and if there is any change then
86:05 - it's going to build your job once again
86:09 - so let's save this job so to trigger
86:13 - this job now what we need to do is we
86:15 - need to do some changes to our github
86:19 - using git so in this project what I'm
86:23 - going to do is in my Java samples
86:26 - project where I have committed my Java
86:28 - HelloWorld files using git I'm going to
86:31 - do LS once again and you can see there
86:34 - is no read me into my repository so I'm
86:37 - going to add a readme file into my
86:39 - retrieve a positive so to do that I'm
86:42 - going to use the touch command so just
86:44 - right touch read me dot M D which is the
86:49 - readme file name and then press ENTER
86:51 - and do LS and you can see this readme
86:54 - dot MD is created and to edit this file
86:58 - I'm going to just write G add it G edit
87:01 - is the editor you can choose any editor
87:04 - you want and then the file name which is
87:06 - readme dot MD and once this editor is
87:11 - open I will just copy and paste some
87:14 - readme content into this readme dot MD
87:19 - file and now I'm going to just give the
87:23 - gate status command so just give the
87:25 - state status and you can see this there
87:28 - is one file which is untracked so we are
87:31 - going to add this to the gate first of
87:34 - all so get add and the file name once
87:37 - again and then I'm going to commit this
87:40 - file once again do the gate status and
87:42 - then let's get commit
87:45 - so get commit - em and in the message
87:49 - you can just write read me added and
87:55 - then the file which you want to commit
87:57 - which is read me down to M D and then
87:59 - press ENTER and now we just need to push
88:02 - our changes to github and for that we
88:05 - will use the gate Porsche
88:06 - - you origin/master command and then
88:09 - press enter and this will push our
88:12 - changes to github and once again give
88:14 - the github credentials and the password
88:17 - and then press enter and our changes are
88:20 - pushed to get hub so you can see here
88:23 - that this readme file is there and all
88:27 - the content of readme file is visible
88:29 - now and on the Jenkins job when i
88:32 - refresh this you will see this third job
88:36 - is triggered and you can see it's
88:39 - working so you can just click on the
88:42 - third job and I will go to the console
88:45 - output and you can see it's just say
88:48 - started by SCM change which means it is
88:52 - started by the change in our repository
88:56 - which is pulled every minute
88:58 - and once this change is detected then
89:03 - it's going to start the cloning of your
89:06 - git repository and your Jenkins job will
89:09 - be built after that so this was the
89:12 - option to pull your a github repository
89:14 - every one minute and if the changes are
89:18 - detected then it's going to trigger the
89:21 - build and your Jenkins job will be
89:25 - executed so this is how you can
89:27 - integrate git and github with Jenkins
89:30 - hey guys welcome to the next video on
89:33 - jankins tutorial for beginners in this
89:35 - video I'm going to show you how we can
89:37 - create users in Jenkins till now we only
89:41 - have one user which is admin user which
89:45 - we have created at the time of
89:47 - installation of Jenkins now generally in
89:50 - teams we have different users with
89:54 - different rules so for example a
89:57 - software team can have a tee
89:59 - lead which can be a admin then we have
90:03 - developers QA guys or testers or we can
90:07 - have the operation skies or DevOps guys
90:10 - who are responsible for the provisioning
90:13 - and the deployment of the software so
90:16 - for that we need to give the credentials
90:19 - to those users so they can log in with
90:23 - their account and then they will be able
90:25 - to configure and build their own jobs so
90:28 - let's see how we can create users in
90:30 - Jenkins so just go to the home page of
90:34 - Jenkins and then just click on manage
90:37 - Jenkins and once this manage Jenkins
90:40 - page opens just scroll down until you
90:44 - have found the section which is called
90:48 - manage users so just click on manage
90:51 - users and you can see there is only one
90:54 - user is there till now so we will create
90:58 - a new user to create a new user you just
91:01 - need to click on create user and then
91:04 - you just need to give the user name of
91:07 - that user you can say use a 1 and the
91:12 - password of that user and this password
91:15 - the user will be able to change later so
91:19 - you can just provide the initial
91:21 - password here and then just provide the
91:24 - confirmation of the password and then
91:26 - provide the full name of the user for
91:29 - example a user 1 once again and then
91:32 - provide the email address of the user
91:34 - and then click create user this is going
91:37 - to create the new user let's create one
91:41 - more user so this time this user will be
91:44 - user 2 and then I'm going to quickly
91:48 - provide the password confirm password
91:51 - and then the full name this will be user
91:56 - 2 for example and then the email ID and
92:00 - then create user which is going to
92:02 - create the user so now we have two users
92:05 - so you can see we are logged in with the
92:09 - admin user so let's log out
92:12 - and then let's log in with the user 1
92:15 - credentials so just give the username
92:18 - and password of that user and then just
92:22 - log in and now you can see I'm logged in
92:25 - with the user 1 account now you can see
92:29 - a little arrow icon here beside the user
92:33 - 1 name so you just can click on that and
92:37 - just click on the configure option and
92:40 - once you click on that here you can
92:43 - provide some more configuration option
92:46 - for this user 1 account
92:49 - so some description what is his title or
92:52 - what is his job and then API token so
92:56 - you can see the API token this we will
93:00 - discuss in the later videos how we can
93:03 - use the API token for the user but you
93:06 - should know you can find this API token
93:08 - here and then the credentials the email
93:12 - ID and the password can be changed later
93:15 - from here so user 1 can change his
93:19 - password from here
93:21 - and also the ssh public keys so if this
93:24 - user has to authenticate with his keys
93:27 - then you can provide the public key here
93:31 - and if you want some help
93:33 - you can just click on this question mark
93:36 - and you will be able to see some hint
93:39 - here so this says list as a search
93:42 - public keys that are associated with the
93:45 - user these keys can be used for example
93:48 - by Jenkins CLI so Jenkins CLI we are
93:52 - going to see how we can use Jenkins CLI
93:55 - in the later video so if you are curious
93:58 - about Jenkins CLI then we will see it
94:02 - later so this is how you can provide the
94:04 - configuration for the user in Jenkins
94:07 - and after the configuration you can just
94:10 - save the configuration and then the
94:13 - configuration will be saved now let me
94:16 - log out once again and let me login with
94:18 - the admin credentials once again and you
94:21 - can see the admin
94:24 - the access to view all the project and
94:27 - when I log in with the user one account
94:31 - or user to account he also have the
94:34 - access to view all the project here in
94:37 - addition you can see the manage Jenkins
94:40 - option for the user one also and when I
94:43 - click on that this user have all the
94:46 - access to change the configuration of
94:49 - the system or change the global security
94:53 - or he have the access to do anything
94:55 - which admin user can do and this can be
94:59 - a problem for example this user one is a
95:02 - developer and he has all the admin
95:05 - rights and this is sometimes not
95:08 - desirable the admin right must lie in
95:10 - the hands of the admin only so for that
95:15 - we have the option to install some
95:17 - plugins and then provide the access to
95:20 - the roles which this user have so we
95:24 - will see how we can install this plug-in
95:27 - to assign roles or manage roles or
95:30 - manage users in the next video
95:33 - hey guys welcome to the next video on
95:36 - Jenkins to troll for beginners in this
95:39 - video we will see how we can install
95:41 - plugins in Jenkins now this video will
95:45 - be the continuation of the last video in
95:49 - which we have created that the users and
95:51 - we faced a problem the problem was all
95:55 - users were having same access to all the
96:01 - projects and we wanted to restrict the
96:04 - access to the user based upon his role
96:08 - so for that we wanted to install some
96:13 - plug-in and this plugin we will install
96:17 - in this video so to install plugins in
96:19 - Jenkins we need to go to the manage
96:23 - Jenkins page so just click on manage
96:26 - Jenkins and then when you scroll down
96:29 - you will be able to see at this section
96:31 - which says manage plugins so just click
96:35 - on the manage plugins section
96:37 - and you will be able to see four tabs
96:41 - here first tab is for updates so
96:44 - whatever plugins are already installed
96:47 - at the time of installation you will see
96:50 - the update information of the plugins
96:54 - which have the updates so if you want to
96:57 - update
96:58 - for example this Apache HTTP components
97:01 - client plugin you can just check on this
97:05 - and then you can say download now and
97:09 - install after restart but we want to
97:12 - install a new plugin so we will go into
97:16 - this section which says available so in
97:19 - available section there are many plugins
97:22 - which are available and for now to
97:24 - restrict the access of the project to
97:28 - the users and groups we need to install
97:31 - a plug-in called role based
97:33 - authentication strategy so you can just
97:37 - filter the these plugins using this
97:40 - search box so just right role for
97:43 - example and all the plugins will be
97:46 - shown which have the keyword role and
97:49 - there is only one plug-in available
97:51 - which is role based authentication
97:53 - strategy and this is the plugin we want
97:56 - to install so we will check this
97:58 - checkbox and if we want to know more
98:00 - about this role based authentication
98:02 - strategy plugin I will right click on
98:04 - this link and I will open this in the
98:07 - next tab or new tab and you will be able
98:10 - to see more information about this
98:14 - plugin so you can see this is the
98:16 - website plug-in Scott Jenkins dot IO
98:19 - roll strategy and you can see about this
98:23 - plug-in and you can see the introduction
98:26 - about this plugin so this plugin adds
98:28 - our new role based criteria to use and
98:31 - fast in user management so it can create
98:35 - global roles it can create project roles
98:38 - it can create slave roles and also
98:41 - assigning these roles to the user so
98:44 - here also you will be able to find more
98:47 - information about this plugin and how to
98:50 - use this plugin
98:51 - also you will be able to see the
98:53 - documentation about this plugin when you
98:56 - scroll down now there are two ways of
99:00 - installing plugins one way is to search
99:03 - in your Jenkins in the available tab and
99:06 - you will be able to find the plug-in and
99:09 - then we will click this button which
99:11 - says download now and install after
99:14 - restart or the the second way of
99:18 - installing the plug-in is I'm going to
99:20 - show you so for example we want to
99:22 - install this dependency which says
99:25 - matrix authentication strategy I'm going
99:27 - to open this in the next tab and in this
99:30 - tab you will be able to see when you
99:32 - scroll down the latest release of this
99:37 - plugin so I'm going to click on the
99:39 - latest release which is going to
99:41 - download the dot HPI file so this
99:44 - plug-in is called matrix out dot HP a
99:48 - file is the plugin
99:50 - right so we are going to save this
99:52 - plugin and once this file is downloaded
99:55 - this HPI file is downloaded we will go
99:58 - to the Jenkins and you will be able to
100:00 - see this Advanced tab here and in the
100:03 - Advanced tab when you scroll down a
100:05 - little you will be able to see this
100:07 - option which says upload plugins and you
100:11 - will be able to just click on this
100:14 - button it says browse and then just
100:16 - select your HPI file and upload this
100:19 - file and in this way you will be able to
100:22 - install that plug-in also now we are
100:25 - going to install our plugin using the
100:28 - Jenkins in the available tab so I'm
100:31 - going to once again search for the role
100:34 - based authentication strategy I'm going
100:38 - to just check on this check box and I'm
100:41 - going to click on this button which says
100:42 - download now and install after restart
100:45 - and then you will be able to see this
100:47 - page which says installing plugins or
100:50 - upgrades and then it says role based
100:53 - authentication strategy downloaded
100:56 - successfully we need to restart our
100:59 - Jenkins so we will just check on this
101:01 - checkbox which says restart Jenkins
101:05 - installation is complete so I'm going to
101:07 - just check on this checkbox so it's
101:10 - going to restart the Jenkins once this
101:12 - plug-in is installed so I'm going to
101:15 - wait for some time until this Jenkins is
101:17 - restarted and now I can see this message
101:20 - which says please wait while Jenkins is
101:22 - getting ready to work after the restart
101:25 - and now the Jenkins has been restarted I
101:27 - think so we need to login with our
101:29 - credentials and I'm going to say login
101:32 - and after I log into the Jenkins I'm
101:35 - going to go to the manage Jenkins
101:38 - section so I'm going to click on manage
101:40 - Jenkins and then I will go to the manage
101:45 - plugins section and then once the
101:47 - plug-in is installed you will be able to
101:50 - see it in the installed tab so I'm going
101:53 - to click on installed and then I'm going
101:56 - to search for role based authentication
101:59 - strategy you can see this plug-in here
102:02 - which says role based authentication
102:04 - strategy so this plug-in is now
102:07 - installed so now we can use this plug-in
102:10 - and this we will see in the next video
102:13 - how we can use the role based
102:15 - authentication strategy plug-in to
102:18 - restrict Jenkins project access to the
102:21 - users and group using rules hey guys
102:25 - welcome to the next video on Jenkins
102:27 - tutorial for beginners in this video I'm
102:29 - going to show you how to restrict
102:31 - Jenkins project access to the users and
102:34 - group using roles now this video will be
102:38 - the continuation of the last video in
102:40 - which I have shown you how to install
102:42 - the plugins in Jenkins and we have
102:45 - installed the special plugin to restrict
102:48 - the project access to the user which was
102:52 - role based authentication strategy
102:54 - plugin so you can see in manage Jenkins
102:57 - when you go to the manage plugins and
103:00 - then you will go to the installed
103:03 - section here and you can search for role
103:07 - here and if you have in your installed
103:11 - section this plugin which is role based
103:13 - authentication strategy then this video
103:16 - will be beneficial to you
103:18 - otherwise you need to install this
103:20 - plugin so once you have this plugin
103:23 - installed let's start using this plugin
103:26 - to restrict the project access to the
103:29 - user so once again I'm going to go to
103:31 - the manage Jenkins and first of all let
103:35 - me create some users so that we can
103:37 - restrict the project access to them so
103:41 - I'm going to go to the manage users
103:43 - first of all so right now I have admin
103:46 - user and I have one more user which is
103:49 - user dot one let me create some more
103:53 - users so I'm going to create user dot
103:56 - two and then the password for user two
104:01 - and the full name I'm going to just
104:04 - leave it as same user dot two and the
104:07 - email address and then create user and
104:10 - I'm going to create one more user user
104:13 - three and the password and the full name
104:16 - user dot three same I will leave it as
104:19 - default and then the email ID so now we
104:23 - have three users user dot one user dot
104:27 - two and user dot three now let's go to
104:31 - the manage Jenkins once again and this
104:35 - time just go to the section called
104:37 - configure global security and once you
104:40 - are in configure global security section
104:43 - make sure that this option is already
104:45 - checked which is enable security and
104:48 - then just scroll down and in the
104:51 - authentication section you will see a
104:54 - new option here which is role based
104:56 - strategy this will appear after the
104:59 - installation of the plug-in which was
105:01 - role based authentication strategy so we
105:04 - are going to check this option and then
105:08 - save it so once you have checked the
105:11 - option role based strategy in configure
105:14 - global security when you will scroll
105:16 - down now you will see a new option which
105:19 - is manage and assign roles so I'm going
105:23 - to just click on this option which says
105:25 - manage and assign roles and here we have
105:29 - three options
105:30 - manage roles assign roles
105:32 - and roll strategy macros so I'm going to
105:35 - go to the first section here and here
105:37 - you will see the global roles global
105:40 - rules are the rules which are globally
105:43 - configured for example admin is a global
105:46 - role let's create a new global role for
105:49 - example employee is a global role we
105:53 - will just add it and for employees we
105:56 - just want to give the overall read
105:58 - access to the global role employee and
106:01 - we want to give the view access to the
106:05 - employee role and all other X's we don't
106:09 - want to give for example credentials or
106:11 - agent creation or job creation for the
106:15 - employees for now I'm not giving any
106:18 - access to the employee role now when I
106:22 - scroll down a little you will see
106:24 - project roles so under this project
106:26 - roles section you can provide the
106:29 - project-based roles and authentication
106:33 - so for example we have a Java developer
106:35 - role so I'm going to just write Java
106:38 - - developer and in the pattern you can
106:42 - provide the access of the Jenkins job
106:46 - based upon this pattern - the Java
106:48 - developer for examples so let's say any
106:50 - project which start with the keyboard
106:52 - Java is accessible to this role Java
106:56 - developer so I'm going to just write the
106:59 - pattern of that which is Java dot
107:02 - Asterix this means that any name any
107:07 - Jenkins job name which starts with Java
107:10 - will be accessible to this role which is
107:12 - Java developer so I'm going to add this
107:15 - role and I'm going to provide all the
107:19 - access for this Jenkins job to the Java
107:23 - developer so now the Java developer role
107:28 - is created let's create one more role
107:32 - which is for example we have intern in
107:35 - our team so I'm going to just write
107:38 - intern and intern will have the access
107:42 - to the projects which start with
107:45 - hello so all the project which starts
107:48 - with hello intern will have the access
107:51 - to only those projects I'm going to just
107:54 - give the access to the role intern now
107:58 - let's add one more project role here for
108:00 - example tester so the tester will have
108:05 - only the axis of the project whose name
108:09 - start with a test for example ok so I'm
108:14 - going to just add this tester role and
108:16 - then I will provide the access to these
108:20 - type of project to the tester so once
108:23 - these roles are created and you have
108:25 - given all the access for this project to
108:28 - the roles then you can save your
108:32 - configurations and we will verify this
108:35 - configuration by just going again to the
108:38 - manage roll section and you can see
108:40 - employee role is there and our three
108:44 - project roles are there also which will
108:46 - have the access to these kind of
108:49 - patterns now I will just come out I will
108:53 - just click on manage and assign roles
108:55 - once again and this time I will go to
108:58 - the assign roles section and in here in
109:02 - the global roles we only have the user
109:04 - admin here so we will add some more
109:06 - users here for example user dot 1 is the
109:11 - first user we will add and then user dot
109:16 - 2 is the second user and user dot 3 is
109:21 - the third user and let's say all of them
109:26 - are employees so the global role we are
109:29 - assigning to user 1 user 2 and user 3 is
109:32 - employees so none of them have the admin
109:36 - role now I will scroll down and here
109:40 - under item roles I will once again add
109:43 - the users first of all so user dot one
109:47 - and then use a dot two and user dot
109:53 - three now let's say user one is a Java
109:57 - developer
109:58 - user two is an intern and user three is
110:02 - a tester so I will just check the rolls
110:04 - which is belonging to the user and then
110:08 - I will save this configuration once
110:10 - again and I will verify this by just
110:13 - going again into the assigned roles and
110:16 - you can see user 1 user 2 and user 3
110:19 - have the employee global role and user 1
110:23 - is a Java developer user 3 is a tester
110:27 - and user 2 is an intern now once you
110:31 - have done that I will just go to my
110:34 - Jenkins home page and you can see I'm
110:37 - logged in as an admin so I can see every
110:41 - project here and when I log out here and
110:45 - I will just log in with user 1
110:48 - credential and I'm going to log in and
110:51 - you can see user 1 was a Java developer
110:54 - so user 1 can only see the project we
110:58 - start with the keyword Java so Java
111:01 - HelloWorld and Java job I'm going to log
111:06 - out and now I'm going to log in with the
111:10 - user to credentials so user dot 2 and
111:14 - the password and login and you can see
111:16 - user 2 was an intern right so user 2
111:20 - will have the access to all the Jenkins
111:22 - job which start with the keyword hello
111:24 - so hello world build the world message
111:28 - hello world run and let's see what
111:31 - project does use a 3 1/2 so user dot 3
111:36 - and then I'm going to login with his
111:38 - credentials and user 3 doesn't have any
111:42 - project because we don't have any
111:45 - Jenkins job related to the tester so
111:49 - when I login with the admin credentials
111:52 - you can see there is no Jenkins job
111:55 - which start with the keyword test so
111:58 - let's create one Jenkins job so I'm
112:00 - going to just click on new item and I'm
112:04 - going to just say test project 1 ok so
112:10 - test project 1 and it
112:12 - we'll be a freestyle project and I'm
112:14 - going to just click OK and in the
112:17 - configuration I will leave this
112:18 - configuration as blank because we just
112:21 - want to test this Jenkins job if you use
112:24 - a3 has the access to this Jenkins job or
112:27 - not so I'm going to just save this
112:29 - Jenkins job and I will go to the home
112:32 - page once again so now we can see we
112:34 - have one new Jenkins job it start with
112:37 - the keyword test so I'm going to log out
112:41 - once again and I'm going to log in with
112:43 - the user 3 credentials and now you can
112:47 - see user 3 have the acces to the project
112:51 - which start with the keyword test so in
112:55 - this way you can use the role based
112:57 - authentication strategy plugin and in
113:01 - this way you can restrict the Jenkins
113:04 - project access to the users and group
113:07 - using their rules hey guys welcome to
113:11 - the next video on Jenkins tutorial for
113:13 - beginners in this video we will see how
113:15 - to do some of the basic configurations
113:18 - in champions using a section called
113:22 - configure system in many Jenkins so when
113:25 - I click on manage Jenkins there is a
113:28 - section called configure system and here
113:31 - we can do some of the basic
113:34 - configurations about Jenkins so we will
113:38 - start from the top the first option here
113:40 - is home directory and you will see the
113:44 - location of your shangkun's home
113:47 - directory in the file system so when I
113:51 - copy this path and when I open the
113:54 - terminal and I will see T to this part
113:58 - you will be able to see all the you know
114:01 - configurations file or Jenkins related
114:05 - files are present inside this directory
114:08 - so you will see config dot XML file you
114:12 - will see job's directories nodes
114:15 - directories plugins directory is where
114:17 - all the plugins will be installed or the
114:20 - users directory and the workspace
114:23 - directory so all the
114:25 - figurations related to jenkins you can
114:29 - do here and when I click on this
114:32 - question mark here beside this option
114:35 - you will be able to see more information
114:37 - about this option so by default
114:39 - Jenkins stores all of its data in this
114:43 - directory on the file system there are a
114:47 - few ways to change the Jenkins home
114:49 - directory so this is the procedure which
114:51 - is given here to change the home
114:53 - directory of this Jenkins so if you have
114:56 - the good reason to change it you can
114:58 - follow these instructions to change the
115:01 - home directory now second option here is
115:04 - system message so this is the message
115:07 - you can show on the home page of Jenkins
115:10 - so for example I can just write some
115:15 - message here this is my Jenkins home
115:20 - page let's say ok and I will just save
115:24 - this option and when I save this option
115:27 - you will be able to see this message is
115:30 - displayed on the top of your home page
115:34 - above all the Jenkins job so I will once
115:38 - again go to the configure system and
115:41 - this system message also supports the
115:44 - HTML tags now you can see a little
115:48 - section here which says plain text this
115:51 - is the support format which this box
115:55 - will support now we can change it to
115:58 - support the HTML so for that we need to
116:01 - go to the manage Jenkins option once
116:04 - again and then go to the configure
116:06 - global security and inside the configure
116:09 - global security you will be able to find
116:12 - a section called
116:14 - markup for meta and by default it's
116:17 - plain text here selected we can choose
116:21 - the safe HTML here and then we can just
116:25 - save this option and once you save this
116:28 - option we can just refresh this
116:31 - configure page and now you will see here
116:36 - safe hTML is displayed here so this is
116:39 - that
116:39 - fault format which this message will
116:43 - support so for example now I can use the
116:47 - HTML tags here for example I want to
116:49 - just show this message in h1 tag so I
116:54 - can just use this h1 tag here h1 and
116:58 - then I can preview this message from
117:01 - here so I can just click here and this
117:04 - message will be displayed like this on
117:06 - my home page let me save it and let's
117:09 - verify this so you can see it's shown in
117:11 - the h1 tags now this system message so
117:16 - this is how you can just display the
117:19 - system message here now the next option
117:21 - here is the number of executors and for
117:26 - example this number is 2 by default that
117:30 - means that 2 jobs can run parallely on
117:34 - this Jenkins right if I can change it to
117:38 - 5 then it will allow the 5 jobs to run
117:42 - parallely so you can change this number
117:45 - from here number of executors the next
117:47 - option is labels this is a little bit
117:50 - detailed concept when we use the master
117:55 - slave concept and nodes we will see how
117:58 - to use labels so I'm going to leave this
118:00 - for now we will see how labels work in
118:04 - the future lectures now the next section
118:08 - here is the usage and by default the
118:11 - usage here is use this node as much as
118:15 - possible because we only have one
118:18 - Jenkins node which is this node that's
118:22 - why the default option is use this node
118:25 - as much as possible but when we will
118:28 - learn how to create nodes and how to
118:30 - provide labels to our nodes then later
118:34 - we will be able to choose this option
118:36 - which says only build jobs with labels
118:39 - expression matching this node so this we
118:43 - will learn later when we will see how to
118:46 - create nodes and how to assign labels to
118:49 - our nodes so for now I will leave it as
118:52 - default for
118:53 - or more information you can just click
118:55 - on this question mark and you will see
118:59 - some more description about this usage
119:02 - section so controls how Jenkins
119:05 - schedules build on this node okay so you
119:09 - can read more about this option here now
119:13 - the next option is the quite period now
119:17 - the quiet period it's in second I'm
119:20 - going to just click on the question mark
119:22 - once again and here it says when this
119:25 - option is checked newly triggered bills
119:28 - of this project will be added to the
119:31 - queue but the Jenkins will wait for the
119:35 - specified period of time before actually
119:38 - starting the bill so Jenkins will be it
119:41 - for example for five seconds before
119:44 - starting this build so sometimes for
119:47 - example you use the source code
119:49 - management system and you're committing
119:52 - will take some time or you when you push
119:55 - your code it takes some time to you know
119:59 - get into your github repository or for
120:03 - any other reason for example your jobs
120:05 - takes some time to start you can specify
120:09 - this quiet period here so that your jobs
120:13 - or your build will start after the
120:16 - specified periods so by default it's
120:20 - five but you can change it in future
120:22 - when you feel that your Jenkins will
120:25 - need more time to start so just provide
120:28 - the quiet period here this will be in
120:31 - second so after five second your build
120:34 - will start after the triggering of this
120:38 - job now the next option here is SCM
120:41 - checkout retry count so this is the
120:45 - option where for example you are using
120:48 - your SCM source code management system
120:51 - let me go to the home page and let me
120:54 - show you one example so I will go into
120:57 - one Jenkins job here and I will go to
121:01 - the configuration section here and then
121:04 - I will scroll down for the Bell
121:07 - triggers and you will see poll SEM
121:10 - option here so when I select this poll
121:13 - SEM or a github hook trigger for gates
121:17 - SEM polling then this is the option for
121:22 - number of tries so this Jenkins will try
121:26 - to connect to your github for example
121:29 - this much number of times right now it's
121:33 - zero but for example you set it to 5
121:36 - then Jenkins will try 5 time to connect
121:39 - to your github before giving or showing
121:43 - some error now the next option is
121:45 - restrict project naming so let's see
121:49 - this option also so by default it's
121:51 - default now you can choose the pattern
121:55 - option here or you can choose a role
121:58 - based strategy option here also so let's
122:02 - see what this pattern option do so I'm
122:04 - going to click on this question mark and
122:06 - you can see some description here it
122:09 - says define a pattern or a regular
122:12 - expression to check whether the job name
122:15 - is valid or not so for example I define
122:18 - some pattern here for the naming of my
122:21 - chenkin job so let's say I define Java
122:24 - dot Asterix that means my jankins job
122:28 - which I will be able to create will
122:31 - start from Java and not any other
122:35 - keyword so let me save this option and
122:38 - once this is saved let me try to create
122:41 - a new Jenkins job and let's say I just
122:45 - you know give some name here and
122:48 - instantly you will see this message
122:51 - which says Deb does not match the job
122:54 - name convention pattern which is Java
122:57 - dot estwick which means that your
123:00 - Jenkins job name should start with this
123:02 - Java keyword so let's say I will just
123:04 - start the name with Java keyword and now
123:08 - I can see that there is no warning here
123:11 - ok any other pattern it's going to show
123:14 - this warning here ok so this pattern
123:18 - option you can use
123:20 - to give some kind of pattern for the
123:24 - naming for now I will just choose it as
123:27 - default so I'm going to just revert it
123:31 - back to the default option but if you
123:35 - want you can just change it to anything
123:38 - you want in the future okay now next
123:42 - section here is the global properties
123:45 - and in the global properties you will
123:48 - see two options here one is environment
123:51 - variables so here you can give all the
123:53 - environment variables which you want to
123:55 - give to your Jenkins job globally for
123:58 - example so let's say I want to give
124:02 - let's say Java home environment variable
124:05 - I can give it from here so I can give
124:09 - the value of this Java home environment
124:12 - variable and the name from here okay or
124:15 - any other environment variable which you
124:18 - want to use in your champions job
124:21 - execution you can give it from here now
124:25 - the next option here is the tool
124:28 - location so this is the tool location so
124:32 - for example you want to use some tool
124:34 - let's say get so the binary apart for
124:38 - this gate you can give it from here now
124:41 - the next section here is the pipeline
124:43 - speed durability settings and this we
124:47 - will see in the future videos I'm going
124:50 - to skip this section for now and then
124:52 - you have the usage statistics option
124:55 - which will help make Jenkins better by
124:58 - sending the anonymous usage statistics
125:01 - and crash reports to the chain keynes
125:04 - project so if you want this option you
125:07 - can check it or uncheck it according to
125:09 - your needs and then next section is the
125:12 - time Stamper system clock time format
125:15 - and elapsed time format this is the
125:18 - format which a Jenkins will support but
125:22 - you can see in the details you can
125:24 - support any other format which is given
125:29 - here so here you can just define the
125:32 - time format which you want to
125:34 - so now in the next section you will be
125:36 - able to see the chenkin location before
125:40 - that there is administrative monitor
125:43 - configuration and you will be able to
125:46 - see this option which says enable
125:48 - administrative monitoring and here you
125:52 - can see administrative monitoring are
125:54 - the warnings shown to chenkin
125:57 - administrator about the state of jenkins
126:00 - interface so you can check these option
126:03 - whatever warning you want to see so for
126:05 - example you want to see the dependency
126:08 - warning or you want to see the invalid
126:10 - plugin warning or if you want to see
126:13 - that this usage pawning all the warnings
126:15 - you can set up from here by default
126:18 - every warning is selected but let's say
126:21 - if you want to skip some warning you can
126:23 - just uncheck this option and then this
126:26 - warning will not be shown to you let's
126:29 - go to the next option here which is the
126:32 - chenkin location by default we are using
126:35 - the localhost but you can give any host
126:38 - name instead of this localhost
126:42 - now next option is the admin email
126:45 - address you can provide your admin email
126:48 - address here and then you have that
126:50 - github server options so if you want to
126:53 - add some keys for your github server you
126:58 - can provide those keys or you can give
127:01 - the name of your guitars over here and
127:04 - then provide the github servers
127:06 - credentials from here we will see this
127:10 - later how we can do it and then you have
127:14 - the github enterprise server so if you
127:17 - are using some private servers to host
127:19 - your repositories like github private
127:22 - repository then you can add the
127:25 - information about that here now the next
127:28 - section is the pipeline model definition
127:30 - this we will see when we will see the
127:32 - pipeline's how pipelines works then you
127:35 - have the built in mouth plug-in options
127:38 - so whatever plugin you have just
127:40 - installed or whatever plugins there is
127:43 - in your Chongqing's there are some
127:47 - options you
127:48 - can said for those plugins here for
127:50 - example so get plugin or subversion
127:54 - plugin shell plug-in extend email
127:57 - notification plug-in and any other you
128:00 - know information you can give it here so
128:04 - you have the email notification SMTP
128:06 - server configuration you can do it from
128:10 - here so these are some of the basic
128:13 - configuration you can do for your
128:16 - Jenkins as an administrator hey guys
128:20 - welcome to the next video in Jenkins to
128:22 - troll for beginners in this video we
128:24 - will see how we can build or test a
128:26 - simple maven project using Jenkins so
128:30 - let's see how we can do it so what I
128:32 - have is I have a simple maven project
128:36 - inside my maven workspace directory and
128:39 - the name of my maven project is my app
128:42 - this my app project i have created using
128:45 - the maven website so once you are on the
128:50 - maven dot apache dot o-r-g
128:52 - you can just go to use section here and
128:56 - inside this use section you will be able
128:57 - to see this this five-minute test and I
129:01 - have used all the commands here to
129:04 - create a project so this section I have
129:06 - used so I have used this command which
129:08 - created the my app directory where my
129:13 - maven project is there so if you want to
129:16 - follow along you can just give this
129:19 - command and then this my app directory
129:22 - will be created with the maven project
129:25 - so once you have this project let's open
129:29 - the terminal first of all and I'm going
129:31 - to just go to this directory and what we
129:35 - can do here is for example we can give a
129:37 - mbn clean and test command and then
129:43 - press Enter which is going to clean our
129:46 - project and then run the test inside
129:49 - this maven project and you can see all
129:52 - the tests are runs and there is no
129:53 - failure and build is successful so let's
129:56 - say we want to execute this clean and
129:59 - test goals
130:00 - using Jenkins and first of all we want
130:03 - to check our code into github and then
130:06 - we want to for example clone the code
130:09 - from the github repository into our
130:12 - Jenkins and then execute these goals how
130:15 - we can do it let's see so first of all
130:18 - for that I need to create a github
130:21 - repository so I will go to the github
130:24 - and I will log in with my credentials
130:26 - here and once you are logged in with
130:28 - your credentials I'm going to just click
130:30 - on this button which says start a
130:32 - project and in the repository name I'm
130:34 - going to just write my app and now I'm
130:38 - going to just leave everything as
130:40 - default and I'm going to just click on
130:42 - create repository so now my github
130:45 - repository is created and now you can
130:48 - see you have two options here one is
130:50 - create a new repository on command-line
130:52 - and second is push existing repository
130:55 - from the command line so we will use the
130:59 - first option here first of all we will
131:01 - initialize the get into our project and
131:04 - then we will come at everything and then
131:06 - push it to our git repository so let's
131:09 - do that if you want help then you can
131:13 - just follow these commands we will just
131:16 - execute the similar kind of commands on
131:19 - the terminal so this is our maven
131:22 - project I'm inside my maven project so
131:24 - I'm going to just write get init command
131:27 - which is going to initialize get inside
131:29 - this directory and then I'm going to
131:31 - just write get status to know the status
131:35 - of this directory so I can see there are
131:38 - two directories here and one file here
131:41 - so I'm going to add this to the gate so
131:43 - I'm going to just write get add and then
131:47 - I'm going to just add target for example
131:50 - and then source and then palm dot XML
131:54 - alternatively you can also write get add
131:58 - dot which is going to add everything
132:00 - which is there inside your project
132:03 - directory so I'm going to do that and
132:05 - then press ENTER and once again I'm
132:07 - going to give the gate status command
132:09 - and you can see these all files are
132:13 - added
132:14 - to the gate now so one thing which is
132:17 - remaining is to commit everything into
132:20 - the gate so we will do that I'm going to
132:23 - just right gate commit - M and then the
132:28 - message for the committing for example
132:31 - my first maven commit and then you can
132:37 - just give a space here and then right
132:40 - dot which is going to commit every file
132:43 - inside your project okay so gate commit
132:47 - - M then the message then this dot and
132:50 - then press enter and everything will be
132:53 - committed into gate so I'm going to once
132:56 - again give the gate States come on and
132:59 - now you will see on the branch master
133:02 - everything is clean so we are ready to
133:05 - just push this project to our github
133:08 - repository now at this point you just
133:11 - need to copy this command which is gate
133:14 - remote add and then whatever is your
133:18 - repository URL dot git and this is going
133:23 - to add the remote origin for the github
133:25 - to your project okay so I'm going to
133:28 - just copy and paste this command which
133:31 - is git remote add origin and whatever is
133:34 - your repository URL and then press enter
133:38 - and this repository is added and now I'm
133:42 - going to push everything to my github
133:45 - repository using this command which is
133:47 - get push - u origin master and I'm going
133:51 - to just paste this command and then
133:53 - press Enter and this is going to ask for
133:56 - my username for github and my password
133:59 - for the github and now everything will
134:02 - be pushed to my github repository so
134:06 - let's check whether everything is there
134:08 - or not so I'm going to just once again
134:11 - click on my repository which I have just
134:14 - created and now you will see everything
134:16 - is pushed to my github repository and
134:19 - this is the message which we have given
134:22 - at the time of committing and you can
134:24 - see we have committed this two minutes
134:26 - ago
134:27 - okay so now once your project is there
134:31 - on the github let's create a Jenkins
134:34 - project first of all so I'm going to
134:36 - just click on new item and here I'm
134:39 - going to just write first maven project
134:42 - and I'm going to use the Freestyle
134:44 - project for now there are plugins
134:46 - available on Jenkins which makes it
134:50 - easier to create and run a maven on
134:53 - Jenkins but for now I'm going to just
134:56 - use this option which says freestyle
134:59 - project and I'm going to click on OK
135:02 - and in the description I'm going to just
135:03 - write first maven project and then I'm
135:05 - going to just check this option which
135:08 - say is a github project and then I'm
135:11 - going to copy the URL of my github
135:14 - repository and I'm going to just paste
135:16 - this URL and then I'm going to leave
135:18 - everything as default and in the source
135:20 - code management I'm going to choose gate
135:23 - option here and once again I can just go
135:27 - here and click on this green button and
135:29 - copy the URL here for my repository and
135:33 - I can paste it here okay I don't need
135:36 - any credentials for now and the branch
135:39 - I'm using is the master branch you can
135:42 - see I only have one branch in my project
135:46 - which is the master branch but if you
135:48 - have different branches you can provide
135:51 - your branch name here instead of master
135:54 - and now I will leave everything as
135:56 - default and here you can choose
135:59 - different kind of build triggers for now
136:02 - I'm going to just choose this option
136:05 - which says get hook trigger for gate @cm
136:08 - polling and then in the build
136:10 - environment I'm going to choose this
136:12 - option which says delete workspace
136:13 - before build start which is going to
136:16 - delete our workspace and then run the
136:19 - goals on our maven project ok so just
136:22 - check this checkbox and then we will
136:26 - move to the build section here and
136:28 - inside the belt section there is a
136:31 - special section for maven which is this
136:34 - one which says invoke top-level maven
136:37 - targets so we are going to use this
136:39 - option here
136:41 - and if you want to see the more advanced
136:44 - option you can click on this button
136:46 - which says advanced and here you can
136:49 - give the Palmer file directory path if
136:51 - this file is located somewhere other
136:55 - than in your default project path okay
136:58 - and then you have more options here for
137:01 - example JVM options or properties to
137:04 - give here for now we will just provide
137:07 - the goals for our maven project which is
137:09 - clean and test using the space here and
137:14 - then I'm going to save my Jenkins job
137:18 - and let's run our Jenkins job and let's
137:21 - see if it works fine or not so I'm going
137:23 - to just click on this build
137:25 - now option which is going to start the
137:28 - Jenkins build and then I'm going to
137:30 - click on the playlist eree option which
137:33 - is going to show me my console output so
137:35 - I'm going to click on console output and
137:37 - you can see first of all we will see
137:41 - that default path where this project is
137:44 - checked out so you can see wire live
137:47 - Jenkins workspace and then inside the
137:51 - workspace this project will be created
137:53 - jenga's project and then our git
137:57 - repository will be cloned and you can
137:59 - see already maven is running the test
138:03 - here and once the tests are successful
138:06 - at the bottom we will see if it's
138:09 - successful we will see the message
138:11 - success otherwise we will see the
138:14 - message failure okay so once again I'm
138:16 - going to go back and I'm going to go to
138:19 - my project here and you can see this
138:22 - build is successful now so everything
138:25 - ran successfully now let's say we are
138:28 - going to define a goal which is not
138:32 - available inside your maven project so
138:37 - we will define some goal which doesn't
138:40 - exist and let's see what happens then so
138:42 - I'm going to just say some goal and I'm
138:47 - going to save this and then let's see
138:50 - what happens I'm going to just start the
138:52 - build again
138:53 - and I'm going to just go to the Bell
138:56 - history of this Jenkins build and then
139:00 - console output and you can see once
139:02 - again the repository will be cloned and
139:06 - now you will see the failure because
139:09 - there's some gold gold doesn't exist so
139:11 - it's going to show us this error message
139:14 - and then the last message here will be
139:18 - the failure and once we will go to the
139:21 - home page of Jenkins now you will see
139:23 - this red ball I can here because our
139:26 - last build was unsuccessful ok so just
139:30 - give the proper goes here which are
139:35 - logical so clean and test are running
139:40 - for our maven project so we will just
139:43 - give those goals here and once again run
139:47 - the build and you will see the build
139:50 - will start and in the console output
139:53 - everything will be checked once again
139:55 - and then you can see success once again
139:59 - so this is how you can test and run a
140:02 - simple Mayman project on cheng canes
140:04 - using github hey guys welcome to the
140:07 - next video and jenkins to troll for
140:09 - beginners in this video i am going to
140:11 - show you how you can send email
140:13 - notifications using Jenkins so first of
140:16 - all in order to send email notifications
140:18 - using Jenkins you need to know the SMTP
140:22 - server details of your email provider
140:25 - which you want to use in your Jenkins so
140:29 - this you can easily find on internet you
140:31 - just need to search for SMTP server list
140:34 - and you will be able to find all the
140:36 - informations about the SMTP server on
140:40 - one of the websites like this so let's
140:44 - say I want to use the Gmail as my email
140:48 - provider to send that notifications so
140:51 - you can see SMTP server details of Gmail
140:54 - is given here so this information I'm
140:57 - going to use in order to configure the
141:00 - email notification in Jenkins so I'm
141:03 - going to go to my Jenkins home page and
141:05 - then I'm going
141:06 - to go to manage Jenkins and inside this
141:09 - configure system window you will be able
141:12 - to find the email notification setting
141:15 - at the very bottom so you will be able
141:18 - to see this section which says email
141:21 - notification and just above this section
141:24 - you will be able to see this section
141:27 - also which is extended email
141:30 - notification so this extended email
141:33 - notification is a plugin which you have
141:37 - already installed at the installation of
141:39 - your Jenkins so if you have chosen
141:43 - install suggested plugins then this
141:46 - plugin will be installed in your Jenkins
141:49 - and you will be able to see this option
141:51 - but for now I'm going to use the default
141:54 - option which is the email notification
141:57 - option which is at the very bottom so
142:01 - here you will be able to see this option
142:05 - which says SMTP server so SMTP server
142:08 - for Gmail is smtp.gmail.com so I'm going
142:14 - to just give this information here and
142:18 - then you just need to give the default
142:22 - user email suffix the default email user
142:25 - suffix of Gmail is at the rate gmail.com
142:28 - and then you will be able to see this
142:32 - advanced setting button you just need to
142:35 - click it and then just check this
142:37 - checkbox which says use SMTP
142:39 - authentication and now you just need to
142:43 - give your user name and password
142:45 - username is your email address from
142:48 - which you want to send your emails so I
142:53 - will give my gmail address here so it
142:56 - can be anything for example example at
142:59 - the red gmail.com and then you need to
143:03 - give the password of that email address
143:07 - so I'm going to give the password of
143:09 - that email address and then I'm going to
143:13 - just check this checkbox which says use
143:15 - SSL and the SMTP port let's see what is
143:18 - the SMTP port for that
143:20 - so SMTP port for this gmail so is 465 so
143:26 - I'm going to use this port here and then
143:28 - you will be able to see this section
143:31 - which says reply to I'm going to leave
143:33 - this as blank and you can also test your
143:36 - configuration for your email by sending
143:40 - a test email to any address so here in
143:44 - the test email recipient you just need
143:47 - to give the email address of the
143:49 - recipient so I'm going to give here the
143:52 - recipient email address and then I'm
143:55 - going to just press on this button which
143:57 - says test configuration and then it's
144:01 - going to send this email so you can see
144:04 - this message which says email was
144:06 - successfully send now in some cases you
144:10 - may also encounter some errors which can
144:13 - be resolved by just going to your email
144:15 - account by turning on an option which is
144:18 - called allow less secure apps so you
144:21 - will be able to see this kind of option
144:24 - and you just need to turn it on and you
144:27 - will be able to send emails from your
144:31 - Gmail account to any other email so once
144:35 - you have done the email notification
144:37 - configurations and you have tested your
144:39 - configurations you can just save your
144:41 - configurations and once your
144:43 - configuration is saved you can just go
144:45 - to the Jenkins job in which you want to
144:49 - use this email notification so I'm going
144:52 - to just use this Jenkins job it says
144:56 - hello world build and then I'm going to
144:59 - go to the configuration of this job and
145:01 - then I will scroll down and I will go to
145:05 - the section which is called post build
145:08 - actions and then when I just click on
145:12 - this list I will be able to see two
145:15 - options related to email notification
145:18 - one is editable email notification this
145:21 - is a plug-in so we haven't configured
145:24 - this plug-in yet so we will use this
145:27 - option which is email notification we
145:30 - have done the configuration for this off
145:32 - so just use this option which says
145:34 - email notification and then you will be
145:36 - able to see this kind of option for
145:39 - recipents so you can just give the email
145:43 - address to which you want to send an
145:46 - email when your build fails and you can
145:50 - see this is the option which is enabled
145:52 - by default it says send email for every
145:56 - unstable bill that means when your build
145:58 - is failed then this email will be sent
146:02 - so I'm going to just save this
146:04 - configuration and let me just break the
146:07 - configuration also so my Jenkins job
146:10 - will fail so right now let's say this
146:15 - bill is Java see helloworld.java I'm
146:19 - going to just change the name of this
146:22 - file which doesn't even exist
146:24 - so this pay bill will fail and then
146:27 - email notification will be sent so I'm
146:29 - going to just click on build now and you
146:32 - can see the build has been started I'm
146:34 - going to go inside this build and
146:36 - console output and you can see this bill
146:39 - is failed and after this Java C command
146:44 - is failed you will be able to see this
146:47 - option which say sending email to
146:49 - whatever email you have used and when
146:53 - you go to your gmail account you will be
146:57 - able to see this kind of email and then
147:00 - you will be able to find more details in
147:03 - this text here about your Jenkins so
147:07 - this is one way of sending email
147:09 - notifications using Jenkins the more
147:12 - advanced way can be by installing some
147:16 - plugin related to email notifications so
147:21 - you can once again go to many Jenkins
147:23 - and we have already installed a plug-in
147:26 - at the time of installation which is
147:29 - email editable email notification right
147:32 - so I'm going to just scroll down where I
147:35 - will find editable email notification
147:39 - which is this option this one and here
147:45 - also you can give the same
147:48 - options for example for abscess MTP you
147:51 - will be able to give smtp.gmail.com and
147:55 - then default user a suffix is the same
147:59 - at the rate gmail.com and then in the
148:04 - advanced setting you will have the same
148:06 - type of settings for example this is
148:09 - your email address from which you want
148:12 - to send an email and then this is your
148:15 - password for your email and then this is
148:19 - the advanced email properties which I
148:22 - will leave as default and then I will
148:25 - choose use SSL checkbox and then in the
148:28 - SMTP port I will just use 465 and you
148:33 - can do some more settings here one thing
148:36 - you can do here is you can add the
148:38 - default recipents here whatever
148:41 - recipents you want to use for your email
148:44 - so I'm going to add one recipe which I
148:47 - have also used in the last section and
148:51 - then I'm going to save this
148:53 - configuration and once my configuration
148:56 - is saved I can once again go to let's
149:00 - say I'm going to go to the next Jenkins
149:02 - job now and then I'm going to go to
149:05 - conduct configuration of this Jenkins
149:06 - job and then in the post build actions
149:11 - this time I will use this option which
149:13 - says editable email notifications so
149:16 - just use this option and then you will
149:20 - be able to find all these fancy options
149:23 - which you can change at any time
149:25 - important for us is for example project
149:29 - recipient list here so by default its
149:32 - default recipents you can give any other
149:35 - email address here and if you want to
149:37 - know more here you will be able to find
149:41 - more details here so it says you just
149:44 - need to add a CC : here or BCC : here so
149:48 - I'm going to add that CC and then coolin
149:52 - and then the email address and then I
149:55 - will scroll down and in the advanced SEC
149:58 - setting you will be able to find more
150:01 - settings
150:01 - so you can see trigger is failure and
150:05 - the email will go to the developers so
150:09 - we haven't added any developer email we
150:12 - have we have added the recipient email
150:15 - so I'm going to use this recipient email
150:17 - list and I'm going to remove the
150:20 - developers from here and then I'm going
150:22 - to just save this configuration and once
150:26 - you're a Jenkins build will fail it will
150:28 - send the email to the recipient list so
150:33 - in this way you can configure your
150:35 - Jenkins to send email notifications hey
150:39 - guys welcome to the next video on
150:41 - Jenkins to troll for beginners in this
150:43 - video we will see what is a Jenkins
150:46 - pipeline and how to use pipelines in
150:50 - Jenkins so first of all what is a chanc
150:54 - ins pipeline so a Jenkins pipeline is a
150:59 - suit of plugins which supports
151:02 - implementing and integrating continuous
151:05 - delivery pipelines in Jenkins now to
151:09 - explain this I will reopen this diagram
151:12 - which I have shown you in the
151:14 - introduction of Jenkins so every change
151:17 - which you make in your software so for
151:20 - example you are a developer and you make
151:23 - the changes in the software and you push
151:28 - those changes into your code repository
151:31 - in our case for example we will take
151:34 - that kit repository right now the job of
151:37 - Jenkins here is to build your code in a
151:41 - reliable manner and then you may be
151:44 - having a different kind of testing for
151:47 - example unit testing or integration
151:48 - testing or different kind of testing so
151:51 - the job of Jenkins is to test your code
151:54 - and then at last deploy your code and
151:58 - even transfer this code into artifact
152:02 - repository and if you want to know more
152:04 - about Jenkins pipeline the documentation
152:08 - on the Jenkins website about pipeline is
152:11 - the best so just search for Jenkins
152:14 - pipeline
152:15 - and then you will be able to see this
152:18 - URL which is Jenkins dot IO 4 slash dog
152:21 - four slash pipeline just click on this
152:24 - link and then you will be able to get
152:27 - all the details about pipeline on this
152:31 - page and when you scroll down you will
152:33 - be able to see this section which says
152:36 - what is a Jenkins pipeline and then if
152:40 - you want to learn more about pipelines
152:43 - then you can read this section so in
152:46 - simple words a pipeline is a script
152:50 - which gives Jenkins a series of jobs to
152:54 - do in a pipeline like manner and if you
152:58 - read this line the definition of Jenkins
153:00 - pipeline is written into a text file
153:04 - called a Cheng Keynes file ok so we will
153:08 - create a Jenkins file in our repository
153:11 - or Jenkins allows us to write Jenkins
153:16 - file directly into the configuration of
153:19 - our Jenkins job and there are two ways
153:23 - of writing this Jenkins script which is
153:28 - declarative and scripted pipeline and
153:32 - you will be able to get more details
153:35 - about declarative script and scripted
153:38 - pipeline syntax here on this page itself
153:41 - so when you scroll down you will be able
153:43 - to see this flow diagram of Jenkins and
153:47 - when you scroll down more you will be
153:50 - able to see this section which says
153:52 - declarative pipeline fundamentals and in
153:56 - this video I'm going to show you exactly
153:57 - this so how to use declarative pipeline
154:00 - in Jenkins
154:02 - so in declarative pipeline syntax the
154:04 - pipeline block define all the work done
154:07 - throughout the entire pipeline so this
154:10 - is the simple syntax which allows us to
154:14 - define different stages and then inside
154:17 - the stages you can define different
154:18 - steps and all this starts with this
154:22 - keyword pipeline and then this is a
154:25 - groovy sandbox syntax so if you are a
154:28 - family
154:29 - with that then it will be more helpful
154:32 - so you use the keyword pipeline and then
154:36 - in these curly brackets you use agent ne
154:40 - and this means execute this pipeline or
154:44 - any of its stages on any available agent
154:48 - so every detail about the script you
154:52 - will be able to find here so for example
154:55 - there is a section called stages and
154:58 - inside the stages you can define
155:00 - different stage so for example there is
155:03 - a stage for Bill here there is a stage
155:05 - for tests here and there is a stage for
155:08 - deploy here right so we will be using
155:12 - this syntax into our Jenkins job now
155:16 - let's take a real use case which we can
155:19 - implement on our Jenkins job so if you
155:23 - remember we have created a maven project
155:26 - in the last videos and I have pushed
155:28 - this code on to the github repository so
155:33 - let's say we want to test this maven app
155:36 - and then we want to compile this maven
155:40 - app and we want to package this maven
155:42 - app using this Jenkins pipeline how we
155:45 - can do this using Jenkins let's see so
155:50 - I'm going to go to the Jenkins homepage
155:52 - and I'm going to create a new item here
155:55 - and this new item will be for example
155:58 - pipe line demo for example and in here
156:02 - you will choose this section it says
156:05 - pipe line okay so give the name of your
156:07 - Jenkins job and choose the pipeline
156:10 - section from here and then click OK
156:13 - which is going to create your Jenkins
156:15 - job and then in the general you can
156:16 - provide any description about your
156:18 - project I'm going to skip all this and
156:21 - then here we are going to say our job is
156:27 - a github project so we are going to just
156:29 - click on this check box and then we can
156:33 - just copy this URL and then paste it
156:37 - here so this is a project URL and I'm
156:40 - going to scroll down we are going to
156:41 - skip this section for now which
156:43 - is build triggers you can define any
156:46 - triggers you want later but the most
156:50 - important section here is the pipeline
156:52 - section which we are going to use so in
156:55 - the definition you will be able to see
156:57 - two options here one is a pipeline
156:59 - script another is pipeline script from
157:02 - SCM so we are going to see the first
157:04 - option first of all which is pipeline
157:07 - script and this enables us to define the
157:10 - script here in this section if you
157:14 - choose the pipeline script from SCM then
157:18 - you can define a Jenkins file in your
157:21 - project itself so I have already defined
157:24 - this Jenkins file in my project but for
157:29 - now I'm not going to use this Jenkins
157:31 - file this Jenkins file I'm going to show
157:34 - how to use this Jenkins file from your
157:36 - github repository in the next video so
157:40 - for this video let's say this file
157:43 - doesn't exist so we are going to create
157:46 - this pipeline script here in our
157:50 - champions job configuration itself so
157:54 - for doing things faster I'm going to
157:57 - just copy this syntax which is given on
158:00 - the Jenkins documentation page so I'm
158:03 - going to just copy this and I'm going to
158:05 - paste everything here so the basic
158:09 - syntax is pipe line and then these curly
158:12 - brackets and you write agent any and I'm
158:16 - going to make this a little bit bigger
158:18 - so you can see this in a better way and
158:21 - then you write stages and inside the
158:23 - Stratos you define your stages for
158:26 - example so let me just change the script
158:30 - and now so instead of build what I want
158:33 - to do is I want to clone my gate
158:36 - repository so I'm going to just say
158:38 - clone repo here which is going to clone
158:42 - the github repository and inside the
158:45 - steps section you can define any shell
158:49 - script commands here so for example here
158:52 - you will write SH key word before
158:55 - executing your command
158:57 - and this Sh means your shell if you are
159:00 - running this Jenkins on Windows then you
159:03 - will write BNE 80 here which is the
159:06 - batch command ok so right now we are on
159:09 - Linux so we will use SH but if you are
159:12 - on Windows you can write B 80 here okay
159:17 - so SH and then in the double quotes what
159:20 - we are going to do is we are going to
159:22 - clone our git repository so the command
159:25 - for that is get clone and then the URL
159:30 - of your get repository so I'm going to
159:33 - just click on this green button copy
159:35 - this URL from here and then paste it
159:39 - here so this is going to clone the
159:41 - repository now in the next step what we
159:44 - are going to do is we are going to clean
159:47 - our project using the maven clean
159:51 - command so I'm going to just write SH
159:52 - and then maven clean command is MVN
159:56 - clean and then you need to give the part
160:00 - of your project because when you clone
160:04 - your agate project there will be a
160:07 - directory which is cloned which is my
160:10 - app and the part you can give here using
160:14 - this flag minus F and then the directory
160:18 - name which is my app in our case so the
160:22 - command is ambient clean minus F and
160:24 - then the part of this directory which is
160:28 - cloned this is the relative part that's
160:30 - why I haven't written the whole path
160:32 - here if you want to write the whole path
160:35 - or if you want to know the whole path
160:37 - I'm going to show you how to see the
160:39 - whole path also but just write this
160:42 - command here so this is going to clean
160:44 - our project now we are going to test our
160:47 - project now we are going to run the test
160:50 - on this project so for that we can just
160:54 - write SH and then we when we can just
160:57 - write MV n test minus F and then the
161:02 - path of your repository which is my app
161:05 - in our case and then to deploy I'm going
161:09 - to use the
161:10 - mimin package command so Sh and in the
161:13 - double quote I'm going to just write MVN
161:17 - package space minus f' and then my half
161:22 - which is the part of this directory ok
161:25 - so in the first stage we are cloning
161:29 - this repository and cleaning it so let's
161:31 - just write and clean okay so clone repo
161:36 - and clean it and in the second stage we
161:40 - are going to run the test so we have
161:42 - written this command and in the third
161:44 - step we are going to deploy our project
161:47 - and I'm going to use this command for
161:50 - that which is mem package and I'm going
161:52 - to repeat once again so if you are on
161:54 - Windows this SH keyword will be replaced
161:59 - by BA T keyword okay so because I am on
162:04 - Linux I'm using SH command and now I'm
162:07 - going to just save my configuration and
162:10 - once my configuration is saved I'm going
162:13 - to just build my job using this button
162:16 - which says build now and now the build
162:19 - will start you can see Bill has been
162:22 - started let me just minimize this and
162:24 - you will be able to see your builder
162:26 - stages here so this view will show you
162:30 - which stage is executed right now so the
162:35 - clone and cleaning is done so first step
162:39 - is successful because we are seeing the
162:41 - green box here and now you can see at
162:44 - the end of this step this step was
162:47 - successful and the second step was
162:49 - successful which was the test so the
162:52 - cleaning and the test was successful but
162:56 - our deploy command have failed and let's
163:00 - see what is the reason for that so for
163:02 - finding out the reason I'm going to just
163:05 - click on this build history and then I'm
163:07 - going to go to the console output and
163:10 - you can see this is the directory where
163:13 - this project is cloned so I'm going to
163:16 - open a new terminal I'm and I'm going to
163:18 - just write CD and this part and when I
163:21 - do LS here you can see
163:23 - there is my app directory which is
163:27 - cloned here and then we have run the
163:30 - clean command which was successful you
163:33 - can see build was successful and then we
163:36 - ran the maven test command which was
163:40 - also successful you can see all the
163:42 - tests were run and build was successful
163:45 - but at the package stage some problem
163:49 - occurred and you can see directly here
163:52 - the mistake
163:53 - which I have made intentionally here so
163:56 - you can see the command was mbn package
163:59 - - f and the part and the part is false
164:03 - here so you can see my - a p1 p is
164:08 - missing from this command so let's
164:10 - correct our mistake and then we will run
164:15 - our job once again so I'm going to go to
164:17 - the configuration once again and then we
164:20 - will correct our mistake which is
164:23 - correcting the spelling of the my app
164:26 - part and we are going to save this
164:29 - configuration once again and I'm going
164:31 - to run the build once again and then you
164:34 - will be able to see the second build and
164:37 - now you can see this build has failed
164:40 - miserably so let's see the reason behind
164:43 - this why this bill failed so I'm going
164:47 - to just go to this build and then I'm
164:49 - going to go to the console output and
164:52 - then you can see the clone and then I
164:56 - can see this message which says fatal
164:59 - destination part my app already exists
165:02 - and is not empty directory so in our
165:06 - first build when we have cloned our
165:10 - project this directory was created and
165:13 - because this directory is already there
165:16 - the cloning once again will fail because
165:22 - this directory already exists so for
165:25 - this clone command to be successful we
165:28 - need to remove this directory and then
165:30 - once again clone it from the github
165:34 - repository so we are going to go to the
165:37 - configuration once again so I'm going to
165:38 - go to the configuration and then I'm
165:41 - going to go to the pipeline script once
165:43 - again I'm going to just maximize it and
165:45 - in the first step before the cloning
165:48 - what we can do here is we can just write
165:52 - SH and then we can just write RM which
165:57 - is the remove command and then I'm going
166:00 - to just add these flag RM minus RF which
166:03 - is going to recursively force the
166:07 - removal of all the files and then I'm
166:10 - going to give the name of my directory
166:14 - which is my app in our case so this
166:17 - command is going to remove this
166:19 - directory and then run the clone command
166:22 - so once again the cloning will take
166:25 - place and then this my app will be
166:28 - freshly created or freshly cloned into
166:32 - your Jenkins directory so let's save our
166:36 - configuration and let's build the job
166:39 - once again so I'm going to just press on
166:41 - build now and I'm going to minimize this
166:44 - browser once again and now I can see the
166:50 - build number here
166:52 - third build and then till now are
166:55 - cleaning and cloning is successful and
166:59 - now this test stage is also successful
167:01 - and now deploy stage is running and
167:04 - hopefully it will also be successful so
167:08 - once you see all the stages green here
167:11 - that means your Jenkins build is
167:14 - successful and you can see the time
167:17 - which it took to execute every stage so
167:22 - for the cloning and cleaning stage it
167:24 - took 6 second for testing stage it took
167:27 - a second and for the packaged stage it
167:31 - took 8 second as well now if you want to
167:34 - see more logs of every stage for example
167:39 - I want to see the loss of this stage I
167:41 - can hover over it and I can click on the
167:44 - log button here and you will see all the
167:48 - logs related to this stage
167:50 - so if you want to see the test logs then
167:54 - you can just click here and view all the
167:57 - log related to the test stage which is
168:00 - similar to view console output okay so
168:05 - this console output is showing every log
168:09 - from every stage but if you want to see
168:12 - the individual log from every stage then
168:15 - you can see it from here
168:17 - okay and then you will have the good
168:20 - overview of your Jenkins pipeline
168:24 - because you will see what happened in
168:28 - every stage which stage is failing and
168:31 - if some stage is failing what are the
168:34 - logs
168:35 - showing here and based upon these logs
168:39 - you will be able to you know take some
168:42 - steps whatever stage is failing you can
168:45 - directly view that log and then you can
168:48 - take some steps and fix it so at last
168:52 - you will be able to see all the stages
168:55 - green that means your project is
168:58 - successfully build tested and deployed
169:01 - so this is how you can use Jenkins
169:04 - pipeline using your Jenkins job
169:06 - configuration now in the next video I'm
169:09 - going to show you how you can add this
169:12 - jenkins file to your maven repository
169:16 - for example or any other repository and
169:19 - then how to use this jenkins file from
169:22 - your github into your Jenkins job hey
169:27 - guys welcome to the next video and check
169:29 - his tutorial for beginners in the last
169:32 - video we have seen what is Jenkins
169:34 - pipeline and we have also seen how to
169:37 - use pipelines in Jenkins using this
169:41 - pipeline script which we have defined
169:44 - into our champions job configuration now
169:49 - in this video I'm going to show you the
169:50 - second option of using pipeline script
169:54 - which is pipeline script from HCM okay
169:59 - so in the last video I have shown you
170:01 - how you can create this kind of Pi
170:04 - line script inside your Jenkins
170:07 - configuration now there is one more way
170:10 - of creating your Jenkins file which is
170:14 - you can create a Jenkins file into your
170:16 - github repository and then use the
170:20 - second option which says pipeline script
170:23 - from SCM which is more convenient so
170:26 - let's see how we can use pipeline script
170:28 - from SCM so we will take the same
170:32 - project which we have used in the last
170:35 - video which is the maven project and
170:37 - there is one special file which I have
170:41 - created here which is Jenkins file this
170:44 - Jenkins file name typically start with
170:47 - the capital J and without any spaces you
170:51 - just need to write Jenkins file here and
170:54 - when I click on this file you will be
170:57 - able to see the pipeline script so this
171:00 - is the pipeline script which I have
171:01 - written into my champions file which
171:04 - resides in my maven project on my github
171:08 - repository so the syntax is almost same
171:12 - so your jenkees file start with the
171:15 - keyword pipeline and then in these curly
171:18 - brackets
171:18 - you have the agent any and then you
171:22 - define the stages so in this script we
171:26 - have three stages one is maven clean
171:30 - other is the testing stage which is
171:33 - maven test and the last stage is maven
171:37 - package okay now if you notice here we
171:41 - haven't used any git clone command which
171:45 - we have used in the last video so let's
171:47 - compare these two script first of all so
171:51 - you can see in the first stage what I
171:54 - was doing is I was using the shell
171:58 - command first of all to remove the my
172:01 - app directory which is created by
172:03 - cloning our github repository and then
172:08 - we were cloning our github repository
172:11 - once again and then we were running the
172:15 - maven clean command into
172:18 - the specified folder which is my app now
172:21 - when you use jenkins file in your github
172:24 - repository you don't need to use this
172:28 - remove command you don't need to use
172:30 - this clone command because when you
172:32 - choose this option jenkins will allow
172:35 - you to give the part of the github
172:38 - repository from where it will clone your
172:41 - repository so we will see this example
172:44 - in a few seconds but let's see the
172:47 - script first of all so you can see i
172:50 - have just run the maven clean command
172:53 - and that's it so this will work similar
172:57 - to this script which we have written in
173:00 - the configuration but with the lesser
173:03 - steps so we have removed these two steps
173:06 - and you don't even need to provide this
173:09 - - f flag because this maven clean will
173:14 - be executed inside your my app directory
173:17 - automatically ok so syntax is also much
173:21 - more cleaner here just maven clean come
173:24 - on
173:24 - maven tests come on and maven package
173:27 - command ok so let's see how we can use
173:31 - this jankins file into our Jenkins job
173:35 - so what I'm going to do here is I'm
173:37 - going to create a new Jenkins job so we
173:40 - will see from the start how to use this
173:43 - Jenkins file so I'm going to just name
173:45 - my Jenkins job as pipeline demo - and
173:50 - then I'm going to choose pipeline here
173:52 - and I'm going to choose ok so once your
173:55 - Jenkins job is created we will just say
173:58 - it's a github project and we will give
174:01 - the URL of our github repository here
174:04 - and then we will scroll down and in the
174:09 - pipeline section this time we will
174:11 - choose the second option which says
174:12 - pipeline script from SCM and now you
174:16 - will see these configuration steps here
174:19 - and the first option here is SCM so as
174:22 - SCM we are going to choose the gate
174:25 - SCM so just choose gate from here so
174:28 - once you choose gate here you will be
174:30 - able to see the
174:32 - repository URL so you can give your
174:34 - repository URL here so I'm going to just
174:37 - copy my git repository URL by clicking
174:42 - this button and copying the URL and
174:44 - pasting here and then once you click
174:48 - anywhere outside this box you will be
174:51 - able to see this error is gone and the
174:54 - credential I don't need but you can set
174:56 - it from here and then you can see a
174:59 - branch specifier so by default my
175:03 - project have only one branch which is
175:06 - the master branch but if you have
175:08 - multiple branches then you can define
175:12 - whatever branch you want to use for this
175:16 - Jenkins job so I'm going to leave this
175:17 - master as default but if you have some
175:21 - other branch you can specify here ok and
175:24 - now you will be able to see the script
175:27 - part so because our Jenkins file script
175:31 - resides on the root of our project so we
175:35 - don't need to change the path of this
175:39 - script you can see once again this or
175:41 - Jenkins file resides on the root of my
175:45 - projects way directly inside my my app
175:48 - directory if this Jenkins file reside
175:51 - inside some folder or some complicated
175:54 - folder structure then you can give the
175:58 - relative path of your Jenkins file
176:01 - script from here now last option here is
176:05 - light paid checkout so I will leave this
176:08 - as default and now I'm going to just
176:11 - save my Jenkins job and I will try to
176:15 - run my chenkin job so I'm going to just
176:18 - click on build now which is going to
176:20 - start my build and you can see all the
176:23 - stages one by one will be shown here so
176:27 - the checkout SCM is successful and it
176:31 - took three seconds and now the mvn clean
176:35 - command is going on and it's also
176:37 - successful and it took seven seconds and
176:40 - now the test command is going on and it
176:42 - took 13 second to execute but
176:45 - successful and now the last stage which
176:48 - is the packaged stage is going on and
176:52 - once it's finished and if you see all
176:55 - the boxes green that means your Jenkins
176:58 - job is successful and all four stages
177:01 - has been executed successfully you can
177:05 - also see the logs here and straightaway
177:09 - you will observe that this option is
177:11 - more easier than using or creating your
177:15 - pipeline script into your Jenkins
177:17 - configuration so the advantage of using
177:20 - the Jenkins file into your project is
177:24 - you can change this Jenkins script
177:27 - anytime and you can directly check your
177:30 - code or commit your code and push your
177:32 - code and if your bill triggers are
177:36 - properly set you don't need to do
177:39 - anything Jenkins will take care of
177:41 - everything and it will automatically
177:44 - execute every stage and give you all the
177:48 - results so this is how you can use
177:50 - pipeline script from your github
177:53 - repository using jenkins file hey guys
177:57 - welcome to the next video on jenkins
177:59 - tutorial for beginners in this video we
178:01 - will discuss about how we can create the
178:04 - slave nodes in jenkins and we will also
178:08 - see what is a master and slave node so
178:13 - let's get started so first of all what
178:16 - is a master node the master node is
178:19 - wherever your shangkun's
178:22 - is running it's your master node now
178:25 - this single Jenkins server which is a
178:28 - master node is not enough to meet
178:31 - certain requirements for example
178:33 - sometimes you might need several
178:35 - different environments to test your
178:38 - bills this cannot be done on your master
178:41 - slave for example and for that you may
178:44 - want to create a slave node one other
178:48 - scenario can be if you want to build a
178:50 - larger or heavier project on your
178:54 - Jenkins job then your Jenkins server
178:57 - cannot simply hand
178:59 - the entire load of that job so in that
179:02 - scenario you can also just create a
179:04 - dedicated slave node to run that heavy
179:08 - build on that node so let's see how we
179:13 - can create a slave node on our
179:15 - shangkun's
179:15 - so just go to the home page of Jenkins
179:19 - and we will go to the manage Jenkins
179:21 - section and once this manage Jenkins
179:23 - section is open you just need to search
179:26 - for the section which is called manage
179:29 - nodes so I'm going to just click on this
179:32 - option which says manage node and you
179:34 - can see there is a master node which is
179:37 - the Jenkins on which you are working on
179:40 - this is already there and we need to
179:44 - create for example a slave node now for
179:48 - this example I will be using SSH methods
179:52 - so for example I have extra machine here
179:56 - which is also an Ubuntu machine and let
179:59 - me know inside this machine and I'm
180:01 - going to use this machine as a slave
180:03 - node and I will connect to this slave
180:07 - node using my master node on SSH so make
180:10 - sure that you have already installed
180:13 - open sss server on your slave node so
180:17 - your master can connect to it on SSH now
180:22 - we are going to create a new node so I'm
180:25 - going to just click on new node here and
180:27 - you can give any name to your node so
180:30 - for example I'm going to just write
180:32 - Ubuntu underscore 16 for because my open
180:37 - two version is sixteen point four on the
180:40 - slave and underscore agent for example
180:43 - okay so this will be the name of your
180:46 - node Ubuntu 16.4 underscore agent and
180:50 - this will be a permanent agent so I'm
180:52 - going to just click on this option and
180:55 - then click ok we're just going to create
180:58 - this node and here in the configuration
181:02 - section of this node you just need to
181:05 - provide some information so at the top
181:08 - you have the name of your node and next
181:10 - you can give
181:12 - description about this note what it's
181:15 - going to do for example for example it's
181:17 - going to build some Java job or maven
181:20 - builds or any other bills which it's
181:23 - going to execute the third option is
181:25 - number of executors so number of
181:28 - executors means number of parallel job
181:32 - which the slave can handle so for now we
181:36 - have a one job we can just enter two
181:39 - here which means it will be able to
181:41 - handle two jobs at the same time now the
181:45 - next option here is a remote root
181:48 - directory so the remote root directory
181:51 - is the directory where you want to save
181:53 - all the Jenkins related file on your
181:56 - slave node so I'm going to open my slave
181:59 - node and I'm inside my home folder here
182:03 - on the slave and let's create our
182:05 - directory which we are going to use in
182:08 - our master configuration so I'm going to
182:11 - just write mkdir Jenkins on the slave
182:15 - node right so mkdir Jenkins and then I'm
182:18 - going to just go to the Jenkins file
182:21 - using CD Jenkins and then I'm going to
182:24 - just write PWD and this is the location
182:27 - where I want to save all the files
182:30 - related to Jenkins okay so this is on my
182:33 - slave this directory I'm going to just
182:35 - copy this part and I'm going to just
182:38 - paste this path as a remote root
182:40 - directory so all the Jenkins related
182:43 - files or build information will be
182:47 - generated inside this directory on the
182:50 - slave node now next option here is a
182:53 - label so let's click on this question
182:56 - mark and let's see what a label is so
182:58 - label are used to group multiple agent
183:01 - into one logical group so this is a
183:05 - simple definition of a label so for
183:08 - example I'm going to create multiple
183:10 - open to slaves so I can give a label
183:13 - here open to okay so whenever I will use
183:17 - this label open to one of the open to
183:21 - node will be used to execute the Jenkins
183:26 - job
183:26 - and here you can see for example if you
183:29 - have multiple windows agent and you have
183:32 - a job that must run on Windows you can
183:35 - give this label on your chenkin job
183:38 - figuration and then one of the slave
183:42 - node which have the label windows will
183:46 - handle that job so labels are used to
183:50 - group multiple agent into one logical
183:54 - group for Windows for example you can
183:57 - give windows labels all of your Ubuntu
183:59 - nodes you can give open to label or any
184:02 - other logical label which you can use to
184:06 - group those kind of nodes so in my case
184:09 - I'm going to give this label Ubuntu here
184:11 - and I'm going to just minimize this
184:14 - explanation and the next section here is
184:17 - the usage for now I'm going to use use
184:20 - this node as much as possible there are
184:22 - other option also for example this
184:25 - option which says only build job with
184:27 - label expression matching this node so
184:30 - if you use this one then if your Jenkins
184:35 - configuration will have ubuntu label
184:38 - then only this node will be used to
184:42 - execute that job so I'm going to just
184:44 - use use this node as much as possible
184:47 - now the next option here is launch
184:50 - method and there are a few options here
184:53 - one is launch agent wire execution of
184:56 - command on the master we are going to
185:00 - use the next option which is launch
185:02 - slave agent wire SSH okay so I'm going
185:06 - to just use the second option which says
185:08 - launch slave agent by a SSH so just
185:12 - select this option and then this is the
185:15 - host name so hostname we will just go to
185:18 - our slave machine and here we can just
185:21 - give if config command and then press
185:24 - ENTER and here you will be able to see
185:28 - the hostname which is the IP address of
185:30 - the slave machine and I'm going to just
185:33 - give this host IP address here now in
185:38 - order to verify
185:40 - if ssh is working from your slave to
185:43 - your master you can open the command
185:45 - line on the master and then you can just
185:48 - write ssh and then the username to which
185:51 - you want to connect so i want to connect
185:53 - for example this user which is a code
185:56 - bind here so i'm going to just write
185:58 - code bind at the rate the IP address
186:03 - which you have copied from the slave
186:04 - which is 192.168.1.2 see this kind of
186:11 - message I'm going to just say yes and
186:13 - then press Enter which is going to ask
186:16 - for your slaves password so this is the
186:19 - login password which you use to login to
186:22 - your slave machine which is this machine
186:25 - okay so this machine's password you need
186:28 - to give here I'm going to give my slave
186:30 - machines password and now I'm logged in
186:33 - to my slave machine using SSH okay if
186:38 - this is working then this connection
186:41 - will also work so just use the host IP
186:44 - address here and in the credentials
186:46 - right now we don't have any credentials
186:48 - here so we will add some credentials so
186:50 - just click on add option here and then
186:53 - click on Jenkins and when you just click
186:56 - here in front of kind there are few
186:58 - options here one is username with
187:01 - password other is darker option and next
187:04 - is SSH username with private key so you
187:08 - can use any one of these method and for
187:12 - now we are going to just use the first
187:14 - method which is username and password so
187:16 - we will provide the username and the
187:18 - password
187:19 - so username is code bind this is the
187:22 - username of my slave machine and then
187:26 - I'm going to give the password of my
187:28 - slave machine which I use to login to
187:31 - the slave and then I'm going to just
187:34 - click Add here and then I'm going to go
187:36 - to the credentials you can see by
187:38 - default none is selected here you just
187:41 - need to select the new credentials which
187:44 - you have recently created so I have
187:47 - created these credentials I'm going to
187:49 - just choose the credentials which I have
187:51 - created now the next option here
187:54 - host key validation strategy so this is
187:57 - important you just need to just select
188:00 - this option which says manually trusted
188:03 - key verification strategy okay
188:05 - so just click on this option which says
188:08 - manually trusted key verification
188:10 - strategy in the option host key
188:13 - verification strategy and this step is
188:16 - important otherwise you will face the
188:18 - problem and the next option here is
188:20 - required manual verification of initial
188:24 - connection just leave this unchecked
188:26 - this is also important you just need to
188:29 - leave this as unchecked now the next
188:33 - option here is the availability if you
188:36 - want to see the advanced option you can
188:39 - just click on this option also for your
188:41 - launch method for example the port on
188:45 - which SSH is connected this can be
188:47 - different if you want and then the JVM
188:49 - options and Java path and other options
188:51 - here if you want to set them you can set
188:54 - it from here now in the availability
188:57 - section you will be able to see three
188:59 - options I'm going to leave it as default
189:01 - which is keep this agent online as much
189:04 - as possible now the next section here is
189:07 - the node properties and here you can set
189:09 - the environment variables if you want on
189:12 - your slave node for example Java home or
189:16 - maven home or any environment variable
189:20 - which you want you can set it from here
189:21 - on your slave and the next option here
189:24 - is the tool location and this tool
189:27 - location for example if you want to set
189:29 - the default gate location of your slave
189:33 - here you can set it from here but I will
189:35 - leave both of them as default okay which
189:38 - is unchecked and then I'm going to just
189:41 - click on the Save button and you will be
189:45 - able to see this option and it says the
189:49 - agent is offline some message will be
189:52 - displayed here and when you click on the
189:55 - nodes option here you will see this new
189:57 - node is created but it's offline and you
190:00 - will be able to see this big cross
190:02 - symbol in red which means your agent is
190:05 - still offline so
190:07 - to make it online you just need to click
190:09 - on this slave agent which you have
190:11 - created and then click on the launch
190:14 - agent but I'm going to just click on the
190:17 - launch agent button which is going to
190:19 - connect to my machine and you can see
190:22 - the authentication is successful here
190:25 - and I will scroll down a little and it's
190:29 - doing some work and it says agent
190:32 - successfully connected and online so at
190:35 - the end if you see this message which
190:37 - says agent successfully connected and
190:39 - online that means this agent is working
190:42 - fine and it's online so once again I'm
190:45 - going to click on this nodes option and
190:47 - now you will be able to see this Red
190:50 - Cross is gone and this agent is now
190:54 - online now one important thing to note
190:57 - here is you need to have Java 8 or more
191:01 - installed on your slave machine so make
191:04 - sure that Java version 8 or more is
191:08 - installed on your slave otherwise it
191:10 - will fail complaining about Java version
191:14 - or something if you have the older
191:16 - version of Java once you're a slave
191:18 - agent is online we are going to see how
191:21 - we can create a Jenkins job and use this
191:24 - slave agent so what I'm going to do is
191:27 - I'm going to create a new Jenkins job
191:29 - and I'm going to just say test slave 1
191:34 - for example and this will be a freestyle
191:37 - project and I'm going to just say ok and
191:39 - this Jenkins job is created for now I'm
191:42 - going to just leave everything as
191:44 - default I'm not going to give any
191:46 - description here but when you scroll
191:48 - down you just need to choose this option
191:51 - which says restrict where this project
191:54 - can be run so this is important you just
191:56 - need to choose this option in order to
191:59 - select the name of your slave agent ok
192:03 - so your slave agent name is Ubuntu 1 6-4
192:08 - agent in my case this is the slave agent
192:12 - name and I can also see the label name
192:15 - ok so you can either give the label name
192:18 - of your slave agent or
192:20 - you can give the actual name of your
192:23 - slave agent I'm going to choose the
192:24 - second option here which is the slave
192:26 - agent name okay and then I will scroll
192:31 - down and for now I will just execute a
192:34 - simple shell command here on the slave
192:37 - agent and I'm going to just say echo and
192:40 - then I will just say this message is
192:46 - executed on slave node so I will just
192:52 - execute this message in my Jenkins bill
192:55 - and I'm going to save this and for now
192:58 - what I'm going to do is I'm going to go
193:00 - to my slave and I'm going to just go to
193:03 - the Jenkins location which is this
193:05 - location which I have set where all the
193:07 - files related to Jenkins are saved and
193:10 - you can see slave dot jar is already
193:13 - saved here when we have tried to connect
193:17 - to this slave right and there is a JDK
193:20 - directory also so now when I just build
193:24 - this job so now my job is building and
193:28 - I'm going to school and see the console
193:30 - log here and you can see everything is
193:33 - successful and this build was successful
193:36 - and now once again I'm going to go to my
193:39 - slave and do LS once again and you can
193:41 - see workspace directory is created when
193:44 - I have executed this build here and
193:46 - inside the workspace there will be my
193:51 - job name which is test slave 1 you can
193:54 - see the name of my Jenkins job is Tesla
193:56 - 1 and on my slave node inside the
194:00 - Jenkins directory which I have given
194:02 - inside the workspace this job name is
194:05 - also created there so that means
194:07 - everything is working fine and this job
194:10 - is executed on the slave machine and not
194:14 - on my master machine which is where my
194:17 - Jenkins is actually running right so
194:21 - everything is executed on the slave
194:23 - machine now so this is how you can
194:25 - create a slave node using Jenkins and
194:28 - you can connect to the slave node in
194:30 - Jenkins hey guys welcome to the next
194:33 - video on Jenkins -
194:34 - for beginners in the last video we have
194:37 - seen how we can create a slave agent in
194:40 - Jenkins and launch the slave agent via
194:43 - SSH now in this video I'm going to show
194:47 - you how we can create a slave agent and
194:50 - launch this slave agent via a method
194:54 - called Java Web Start now in the last
194:58 - video we have seen how to create a Linux
195:00 - slave agent and in this video I'm going
195:03 - to show you how you can create a Windows
195:06 - slave agent so let's get started now
195:10 - before starting and before launching our
195:13 - slave agent why our Java Web Start we
195:16 - need to do some settings and I'm going
195:19 - to show you how to do these settings so
195:22 - first of all go to the manage Jenkins
195:25 - section and once the manage Jenkins
195:29 - section is open go to configure system
195:33 - settings so just click on configure
195:35 - system and once the configure system
195:38 - settings are open you just need to
195:40 - scroll down until you find this section
195:44 - it says Jenkins location now by default
195:48 - this Jenkins URL is set to HTTP colon
195:52 - forward slash forward slash localhost
195:55 - port 8080 and you will see this small
196:00 - warning here also which says please set
196:03 - a valid host name instead of localhost
196:06 - so if you have the host name for your
196:10 - Jenkins server then you can give this
196:13 - host name here otherwise we will give
196:16 - the local IP address of this server
196:20 - instead of the local host okay so to
196:24 - know the local IP address I'm going to
196:27 - just open the terminal and I'm going to
196:28 - just write if config command and then
196:32 - press Enter
196:33 - which is going to give me the local IP
196:35 - address which is this one so I'm going
196:37 - to replace this local host by this IP
196:42 - address okay so if you have the host
196:46 - name for your Jenkins server you can
196:48 - write
196:48 - the hostname here if you have the IP
196:51 - address of your Jenkins server just
196:54 - write the IP address here instead of
196:56 - localhost and this is important for this
197:00 - particular step to launch your slave
197:03 - agent wire Java Web Start and now I'm
197:07 - going to save my configurations and once
197:11 - the configurations are saved now we are
197:14 - ready to create our new slave node so
197:17 - once again I'm going to go to the manage
197:19 - Jenkins section and I'm going to choose
197:22 - the section called manage nodes and you
197:25 - can see our master node is there and the
197:29 - second node is this node which is open
197:32 - to which we have created in the last
197:33 - video which is offline right now because
197:35 - my slave is not running right now so
197:38 - that's why it's offline so let's create
197:41 - a new node so I'm going to just click on
197:44 - the new node option and here I'm going
197:47 - to give the name of my node I'm going to
197:49 - just give the name Windows 8 because the
197:54 - slave is running on the Windows 8
197:58 - operating system so I'm going to just
198:00 - give the name Windows 8 underscore agent
198:04 - ok and then you can just choose this
198:07 - option which says permanent agent if you
198:10 - want to copy the existing node then you
198:13 - can also choose the option which is
198:15 - called copy existing node but right now
198:17 - we don't have any Windows agent that's
198:20 - why I have just chosen this option which
198:23 - says permanent agent and now I'm going
198:25 - to just click on OK and you will see
198:29 - this section here so most of the options
198:33 - which are shown here we have discussed
198:35 - in the last video so I'm going to go
198:38 - through all of them one by one really
198:40 - fast so the name is Windows 8 agent
198:43 - description whatever you want you can
198:45 - describe here number of executors we
198:49 - will take number of executors as two
198:52 - which means that this Windows agent will
198:55 - be able to run two parallel jobs and
198:59 - then we need to provide the
199:02 - maude root directory and this will be
199:04 - the directory where all of your Jenkins
199:07 - related file will be saved on your
199:09 - Windows slave agent so I already have
199:13 - created directory inside my C folder on
199:18 - my Windows slave agent and I'm going to
199:21 - just copy this part from my window slave
199:24 - agent and I'm going to paste it here
199:26 - okay and the label we already know what
199:30 - is label from the last video so I'm
199:31 - going to just give this label here which
199:35 - is Windows you are free to give any
199:37 - other label which you wish to provide
199:40 - here usage I'm going to just leave it as
199:43 - default which is use this node as much
199:45 - as possible and you will be able to see
199:48 - this option which is launch agent via
199:52 - Java Web Start okay so if you don't see
199:56 - this option which is launch agent via
199:59 - Web Start you just need to go to the
200:03 - settings once again so this is when you
200:06 - don't see this option which is launch
200:08 - agent via Web Start you just need to go
200:11 - to your dashboard and once again go to
200:13 - manage Jenkins and then go to configure
200:17 - global security and inside the configure
200:21 - global security options you just need to
200:23 - scroll down until you find the agents
200:27 - section so this is the agents section
200:30 - and by default this is disabled ok so
200:35 - what you need to do is you just need to
200:37 - choose the random option here otherwise
200:40 - if you want to provide the fixed port
200:42 - here you can just choose this option
200:44 - which is fixed and then you can just
200:47 - give any port which you want to use ok
200:50 - but I prefer using the random port so
200:53 - I'm going to just choose this option and
200:55 - I will suggest you to choose this option
200:58 - here and then only you will see this
201:02 - option in your node creation which is
201:05 - launch agent via web start ok so if this
201:09 - option is disabled you will not see the
201:12 - option in your launch method
201:15 - so I'm going to just save these settings
201:18 - and then once you see this method you
201:21 - just need to choose this method from
201:23 - here and then leave everything as
201:25 - default and the availability I am going
201:29 - to just leave it as default also which
201:31 - is keep this agent online as much as
201:33 - possible
201:34 - and the environment variables and tool
201:36 - location we have discussed in the last
201:38 - video I'm going to leave them as default
201:41 - which is unchecked and I'm going to save
201:43 - all the settings and you can see Windows
201:47 - 8 agent is created and right now it's
201:51 - offline so I'm going to just click on
201:54 - this option and this text says connect
201:58 - agent to Jenkins
202:00 - via one of these two methods so there
202:03 - are two method you can use to connect to
202:06 - your Windows agent one is open this URL
202:12 - on your Windows agent and then click on
202:15 - this button which is going to connect to
202:18 - your chenkin server otherwise the second
202:21 - option is you just need to copy this
202:24 - command and run it on to your Windows
202:28 - agent terminal so we are going to choose
202:31 - the second option and we are going to
202:33 - run this command on to our Windows
202:36 - terminal so to open this Jenkins server
202:40 - on the windows slave I can just use this
202:45 - IP address until Windows eight agent
202:49 - which is also this address but you need
202:51 - to replace this localhost by the IP
202:54 - address of your Jenkins slave or the
202:57 - host name of your Jenkins slave ok so
203:00 - I'm going to copy this address until
203:02 - Windows eight agent like this and I'm
203:06 - going to open the browser on my windows
203:08 - slave agent so this is the browser which
203:11 - is running on my windows slave agent and
203:13 - I'm going to just paste this URL there
203:17 - which is going to open this Jenkins web
203:21 - page on your windows slave agent right
203:24 - now before using this command we need to
203:27 - save this
203:29 - agent Dodd jar file which you can
203:31 - download from this link so you just need
203:34 - to click on this agent dot jar link I
203:37 - will suggest you to just save this agent
203:41 - Gaad char on your Jenkins folder
203:45 - wherever you have created your Jenkins
203:47 - folder for saving all the Jenkins
203:49 - related files so I'm going to save it
203:51 - here which I have provided as the root
203:55 - directory for my slave also ok so let me
203:59 - save this file so now what I'm going to
204:01 - do is I'm going to open the terminal on
204:03 - my windows slave agent so I have opened
204:06 - this terminal on my windows slave agent
204:09 - and first of all I will CD into this
204:12 - folder where I want to save all my
204:15 - Jenkins related files which is C colon
204:18 - slash Jenkins
204:19 - so once I'm into this folder where my
204:22 - agent dot char is there I'm going to
204:25 - just copy this command which I can see
204:28 - on my windows slave using the Jenkins IP
204:32 - address okay so I'm going to just copy
204:35 - this command make sure that this is not
204:38 - local host this is the host name or the
204:40 - IP address of your Jenkins machine so
204:44 - I'm going to just copy this whole
204:47 - command and paste it into my windows
204:51 - terminal and then press ENTER and this
204:55 - is going to run this agent and once you
204:58 - see this info it says connected then
205:01 - your windows slave is connected to your
205:05 - Jenkins server so make sure you see this
205:08 - connected message and then you can
205:10 - directly go to your Jenkins master
205:14 - server which is this one and I'm going
205:17 - to open the nodes here so you can see we
205:20 - have created this node right now so I'm
205:22 - going to go to the nodes and you will
205:24 - see this cross symbol is removed from
205:28 - the windows 8 agent that means this
205:32 - agent is now online which is Windows 8
205:35 - agent so let's use this agent to create
205:38 - a Jenkins job so I'm going to go to the
205:41 - home folder and I'm going to
205:43 - create a new job and let's say this will
205:46 - be my Windows test one and then I'm
205:51 - going to choose the freestyle project
205:53 - and I'm going to just click OK which is
205:55 - going to create this job and once this
205:57 - job is created in the general settings I
206:00 - will leave description as default which
206:03 - is blank and then I'm going to scroll
206:05 - down a little and I'm going to choose
206:07 - this option which says restrict where
206:09 - this project can run and this time I'm
206:12 - going to use the label which I have
206:14 - given to my Windows slave agent which is
206:18 - Windows so this is the label you can
206:20 - also choose the agent name directly
206:23 - which is Windows 8 agent but this time
206:25 - I'm going to choose this one which is
206:27 - Windows label ok so I have chosen this
206:31 - Windows label here and then I will
206:34 - scroll down I will skip everything I
206:37 - just want to test whether this slave is
206:39 - running or not so under the build
206:41 - section I'm going to just choose this
206:43 - option which says execute windows batch
206:46 - command so just choose this option which
206:49 - says execute windows batch command
206:51 - because we are running this Jenkins job
206:54 - on our Windows operating system ok and
206:57 - then I think windows understand that I
207:00 - could come on so I'm going to just write
207:02 - echo this command will run on your
207:10 - windows slave so I'm going to just
207:14 - execute this command on my windows slave
207:16 - and if you want to see in which
207:18 - directory we are working in we can use
207:21 - the CD command CD command is same as PWD
207:26 - command in your Linux operating system
207:28 - so this will print the present working
207:31 - directory on your Windows operating
207:34 - system so now I'm going to save this job
207:38 - and once the job is created I'm going to
207:40 - just build it this job which is going to
207:43 - start building the job and I will just
207:45 - go to the console output of this job and
207:48 - you will be able to see the output of
207:51 - the CD command you can see the CD
207:54 - command is executed and the CD come
207:56 - output is this one so we have chosen C
208:01 - colon slash Jenkins as our root
208:05 - directory so this is the root directory
208:06 - and then Jenkins will create a workspace
208:10 - directory inside your root directory and
208:13 - then you will see your Jenkins job name
208:16 - which is windows test1 in our case you
208:18 - can see here also and the next command
208:22 - we have executed is echo and whatever
208:25 - text we have written here which is also
208:27 - executed successfully so it has echoed
208:30 - the sentence and then at last we can see
208:33 - the success message that means our
208:35 - Jenkins job is build successfully and on
208:39 - your Windows slave you can also see that
208:43 - there will be our remoting directory
208:46 - created and there will be a workspace
208:48 - directory created and inside your
208:50 - workspace directory your Jenkins job
208:54 - name directory will also be created so
208:57 - you can see windows test1 is created
209:00 - which is same as your champions name so
209:05 - this is how you can create a Jenkins
209:08 - slave and launch this slave agent via a
209:12 - method called Java Web Start hey guys
209:16 - welcome to the next video on Jenkins to
209:18 - troll for beginners in this video I'm
209:20 - going to show you how you can
209:21 - parameterize your built-in jenkins now
209:25 - sometimes it is necessary or useful to
209:28 - have bills to take one or more
209:32 - parameters and Jenkins allow you to
209:35 - parameterize your build so that you can
209:38 - provide one or several parameters at the
209:41 - time of building your job so let's see
209:44 - how we can do it so we are going to
209:47 - create a new Jenkins job so I'm going to
209:50 - just click on a new item and then I'm
209:53 - going to give the name to my job which
209:56 - is parameterised project and then we are
209:59 - going to choose the Freestyle project
210:01 - and I'm going to click OK here which is
210:03 - going to create our Jenkins job so once
210:07 - your job is created I will
210:09 - this description as default which is
210:12 - blank and then to parameterize your
210:15 - build you will see in this general
210:18 - section under the description there is
210:21 - an option called this project is
210:23 - parameterised okay so you just need to
210:26 - choose this option which says this
210:28 - project is parameterised here you can
210:32 - add several type of parameters for
210:34 - example boolean parameter or choice
210:37 - parameter or credentials parameter and
210:39 - you can see there are several parameters
210:42 - which you can choose from this list so
210:45 - we are going to choose let's say string
210:47 - parameter for now and here let's say at
210:51 - the time of building our job we want the
210:53 - user to provide the platform on which
210:55 - this Jenkins job is running so in the
210:58 - first option which asked us to provide
211:00 - the variables name we will just provide
211:02 - the platform keyword here which is the
211:06 - variable name which we will use in our
211:09 - build and you can also provide the
211:11 - default value of this parameter let's
211:14 - say the default value of this parameter
211:16 - is Linux it's optional so if you don't
211:20 - provide any default value it's okay but
211:23 - if you want you can provide the default
211:26 - value from here and also the description
211:28 - is also optional so if you want to
211:31 - provide the description you can provide
211:32 - it from here or you can leave it as
211:34 - default and there is one more option
211:37 - here which says trim the string if you
211:40 - check this option you can see what it
211:44 - does so a strip white spaces from
211:46 - beginning and the end from the string so
211:49 - we have added one parameter to our
211:53 - shangkun's build and then I will leave
211:57 - the other sections as default and in the
212:00 - build section I'm going to just choose
212:02 - this option which says execute shell if
212:05 - you are using Windows you can choose
212:07 - execute Windows batch command from here
212:09 - and here I'm going to just echo the
212:12 - parameter which is provided by Jenkins
212:15 - to us so to echo a parameter on Linux
212:19 - you can use dollar symbol and then the
212:22 - pair
212:22 - the name which is in our case the
212:26 - parameter name is plate form okay so
212:29 - just copy this parameter name and after
212:33 - this dollar symbol just write your
212:36 - parameter name and this is going to just
212:40 - print the value which you will provide
212:44 - for your parameter so I'm going to save
212:47 - this job and once the job is saved I'm
212:51 - going to just execute this bill so now
212:55 - one new thing you will see here is
212:57 - normally you will see this text as
213:00 - billed but because we have provided some
213:04 - parameters for this bill so it says here
213:07 - built with parameters okay
213:09 - so just click on this job and on the
213:13 - right hand side you will see here this
213:15 - build requires parameters and the
213:18 - default value of this variable or
213:20 - parameter platform we have given Linux
213:22 - here so let's change this default value
213:25 - let's say we want to just give UNIX
213:28 - value for our platform variable and I'm
213:32 - going to just click on this a build
213:34 - button which is going to build our job
213:37 - with that parameter and I'm going to
213:39 - just go to the console output to see if
213:43 - it's successful or not so you can see
213:46 - this echo command is executed with the
213:49 - parameter which we have provided which
213:52 - is Unix
213:53 - okay so this is how you can provide the
213:56 - parameters to your Jenkins build now I'm
214:00 - going to go to the configuration once
214:02 - again so if you have a different
214:06 - operating system some operating system
214:09 - for example if you are using the same
214:12 - echo command on your Windows operating
214:16 - system you can use these modeler symbol
214:22 - in front and the back of your parameters
214:26 - so on Windows you need to provide this
214:28 - mod in front and at the end of your
214:31 - parameter then it will be executed
214:34 - without giving you problems so this is
214:36 - for Windows so I'm going to just provide
214:39 - this hash which is a comment and I'm
214:41 - going to just write Windows here so for
214:45 - Windows you need to use this mod symbol
214:49 - in front and end and on Mac I think this
214:51 - dollar will work if this dollar doesn't
214:55 - work then we can also use for example
215:00 - echo and then dollar and in these curly
215:04 - brackets your parameter name which is
215:07 - plateform so in some operating system
215:10 - this type of syntax is valid so you can
215:12 - also use this type of syntax now let's
215:15 - choose some more parameters from here so
215:19 - one parameter we have already provided
215:21 - which is a string parameter let's
215:23 - provide the second parameter and this
215:26 - parameter will be a choice parameter so
215:29 - you can choose from a list of the
215:33 - choices which you give here so the
215:35 - variable name I'm going to give here is
215:38 - choice itself and here you can give your
215:42 - choices so for example a B C be
215:48 - something like this if you want to
215:50 - choose some other kind of variable name
215:52 - you can just choose linux' and and then
215:56 - Windows or Mac or UNIX or any other so
216:02 - this type of choices you can provide in
216:05 - this choices box one by one on every
216:09 - line so every line is a choice here and
216:13 - I'm going to leave this description as
216:15 - default and let's echo this choice
216:17 - parameter also so I'm going to just
216:20 - write choice from here and then I'm
216:22 - going to just save this build and once
216:25 - again I'm going to click on build with
216:27 - parameters and you can see there are two
216:29 - parameters present now one is the
216:32 - platform parameter other is the choice
216:35 - parameter so platform I will leave as
216:37 - Linux and the choice I will just choose
216:40 - D here and then I'm going to click on
216:44 - build which is going to build my job and
216:47 - then
216:47 - I'm going to go to the console output
216:50 - and you can see it has echoed Linux
216:53 - first of all and then echoed D is
216:55 - executed which we have chosen from the
216:58 - choice parameters so this is how you can
217:01 - parameterize your job or build in
217:04 - Jenkins hey guys welcome to the next
217:07 - video on Jenkins tutorial for beginners
217:09 - in this video I'm going to show you how
217:11 - to use Jenkins CLI and more specifically
217:16 - I'm going to show you how you can run
217:18 - your Jenkins job using Jenkins CLI so
217:23 - let's get started so first of all what
217:25 - I'm going to do is I'm going to just
217:27 - click on manage Jenkins here and when
217:30 - you scroll down you will be able to see
217:32 - this option which says Jenkins CLI and
217:35 - so once you are in this Jenkins CLI
217:38 - section you will be able to see this
217:40 - command which you can use to get help on
217:43 - using Jenkins CLI now when you want to
217:48 - use Jenkins - for example build your job
217:52 - or add job to view or there is a list of
217:56 - command which you can use with Jenkins
217:58 - CLI you just need to click on the
218:02 - specific command which you want to
218:03 - execute for example I want to execute
218:05 - build command I can just click on this
218:09 - build command and then this is the
218:11 - command which I can use to build my job
218:14 - with some flags and the description of
218:17 - these flags are given here so let's use
218:23 - this Jenkins CLI command to build
218:27 - Jenkins job so first of all you need to
218:29 - download this Jenkins - CLI jar file and
218:34 - you can download it by clicking on this
218:36 - Jenkins CLI jar file and you can save it
218:40 - on your computer first of all and once
218:43 - this Jenkins CLI jar is downloaded you
218:46 - can copy this Jenkins CLI jar at the
218:51 - comfortable location and then use this G
218:54 - jar to execute the command which is
218:57 - given here so let me open the terminal
219:00 - first of all
219:01 - I will first fall create a jenkins
219:04 - directory so mkdir jenkins and i want to
219:10 - move this Jenkins CLI jar file into this
219:14 - directory so this is in my downloads
219:16 - folder so I'm going to just write MV and
219:21 - then I will just move this jar file
219:26 - which I have downloaded from the
219:29 - Downloads folder to this Jenkins folder
219:32 - so I'm going to just give this command
219:35 - which is going to move this jar file
219:38 - into the Jenkins folder so I'm going to
219:40 - just CD to the Jenkins folder now and
219:43 - you can see this Jenkins CLI dot char is
219:46 - there so now I can use this command to
219:50 - build a job so let's see what job we can
219:54 - build so I have this job which is Java
219:57 - HelloWorld and let's build this job
220:00 - using the Jenkins CLI so the job name is
220:04 - Java HelloWorld so I'm going to just
220:08 - first of all copy this command up to job
220:11 - and then I'm going to just paste this
220:15 - command on my terminal and instead of
220:18 - job here you just need to give the name
220:21 - of your chenkin job which you want to
220:23 - build so the name of the Jenkins job is
220:25 - Java HelloWorld which I will provide
220:28 - here and then press ENTER and of course
220:32 - this will fail because our Jenkins
220:35 - require the permission so right now we
220:38 - are logged in with the admin credentials
220:40 - that's why we need to give the admin
220:43 - credentials in case you want to execute
220:46 - your job without the credentials you can
220:49 - go to manage Jenkins and then go to
220:53 - configure global security and once you
220:56 - are in the configure global security
220:58 - there is a option under authentication
221:01 - we have previously chosen this option
221:04 - which is role based strategy right so if
221:07 - you want to disable this authentication
221:10 - you can choose this option which says
221:12 - anyone can do
221:13 - and save this configuration and once
221:17 - this configuration is saved this command
221:20 - will work because now we don't need any
221:23 - credentials to run the Jenkins job so
221:27 - once again I'm going to give this
221:29 - command and this time you can see it's
221:33 - successful and it hasn't given any error
221:36 - to us but you can see this command
221:38 - doesn't give any result it just executes
221:41 - and then no result is printed and when
221:45 - you go to the location where your
221:48 - Jenkins job is there on this Jenkins UI
221:51 - you will see this Jenkins job is
221:54 - executed but no result is printed here
221:57 - so for example you can see I have five
222:00 - bills right now and when I execute this
222:03 - command once again and I will refresh
222:06 - this web page you will be able to see a
222:10 - sixth build is executed successfully
222:12 - here so now in case you want to see the
222:15 - output of your build on the terminal
222:18 - itself what you can do is you can go to
222:21 - this command once again from where you
222:24 - have copied and you can see there are a
222:27 - bunch of flags you can provide so the
222:30 - flag minus F is going to show you the
222:35 - output of your Jenkins job so I'm going
222:39 - to just give the minus F flag with my
222:43 - command and then press Enter and you can
222:46 - see started Java HelloWorld build and
222:49 - you will be able to see here also the
222:52 - seventh build is executed successfully
222:55 - on the Jenkins UI also and some output
222:58 - is printed here also it's a started Java
223:02 - HelloWorld seventh build and that build
223:04 - status was successful now if you want to
223:07 - see more verbose output you can use this
223:11 - flag which is minus V and you can see
223:14 - this flag is used with minus s so we
223:18 - will give this flag which is minus V
223:21 - with minus s and then press enter and
223:24 - you can see started
223:27 - the belt number eight and you will see
223:30 - all the console output which you see
223:33 - generally on your Jenkins job so when I
223:37 - just refresh this and I will go to the
223:40 - console output here so this is the
223:43 - output which you see in the console
223:45 - output this output will be shown on the
223:49 - terminal also same output will be shown
223:52 - here and once again the build status is
223:55 - successful now in order to use this
223:58 - Jenkins CLI command with the
224:00 - authentication you just need to go to
224:02 - the manage Jenkins section once again
224:05 - and then go to configure global security
224:08 - and this time we will enable the in
224:11 - authentication the logged in user can do
224:14 - anything so you need to just choose this
224:17 - option
224:18 - it says logged in user can do anything
224:20 - and now you also need to check this
224:23 - option which says allow anonymous read
224:25 - access so this is important you need to
224:28 - check this option and this option as
224:31 - well which is logged in user can do
224:33 - anything and then I'm going to save this
224:36 - configuration and this time with this
224:40 - command so let me clear the terminal
224:42 - first of all so I'm going to clear the
224:44 - terminal and with this command which we
224:47 - have used to build the Java HelloWorld
224:50 - Jenkins job we will use the username so
224:54 - I'm going to just write - - user name
224:57 - and space the username is admin in my
225:02 - case and then to provide a password you
225:05 - just need to give this flag which is - -
225:09 - password and space your password so my
225:12 - password here is root so I'm going to
225:15 - give my password and then press ENTER
225:18 - and this is going to start the build you
225:20 - can see Java HelloWorld
225:22 - ix build was started and it's ended
225:27 - successfully so the build status is
225:29 - success here so in order to provide the
225:32 - credentials you just need to use these
225:34 - two flag which is username your username
225:37 - and - - password your password so now
225:41 - let me show you one more thing which is
225:43 - to execute a parameterised Jenkins job
225:46 - using command line so I'm going to go to
225:50 - my Jenkins home here and I'm going to
225:54 - choose a project which I have created in
225:57 - the last video which shows how to use
225:59 - parameters in your chenkin job and its
226:03 - name was parameterised project now if
226:07 - you don't know how to create a
226:09 - parameterised Jenkins job you need to
226:12 - see the last video so I'm not going to
226:14 - create a new job I'm just going to use
226:17 - the Jenkins job which I have created
226:19 - earlier so in this chenkin job we have
226:23 - this build with parameters option and
226:25 - there are two parameters here one is
226:28 - platform and other is choice so I'm
226:31 - going to just use this Jenkins job name
226:34 - first of all and I'm going to go to the
226:37 - terminal and let me clear the terminal
226:40 - and I'm going to use the same command
226:42 - but this time the project name is
226:44 - different so instead of Java HelloWorld
226:46 - the project name is parameterised
226:49 - project which is this one and in order
226:53 - to provide the parameters you need to
226:55 - give the flag which is minus P so at the
227:00 - end just add minus P and then your
227:04 - parameter name so the parameter name I
227:07 - have is first of all platform and it's
227:11 - better to use double quotes if you have
227:14 - single word then you can avoid these
227:17 - double quotes but I prefer to use these
227:20 - double quotes even if this is a single
227:23 - word string so here I'm going to just
227:26 - try it Linux now once again I'm going to
227:29 - just use minus P flag for providing the
227:32 - second parameter and the second
227:35 - parameter is a choice here so I'm going
227:37 - to once again use minus P choice which
227:40 - is the parameter name and then the
227:42 - parameter value so for example I want to
227:45 - just give C here as a choice and then
227:48 - I'm going to just press Enter
227:49 - which is going to execute
227:52 - this job you can see the job is executed
227:54 - and you can see it has echoed the Linux
228:00 - keyword and the C letter and the build
228:04 - was successful so this is how you can
228:07 - provide the parameters to your Jenkins
228:11 - job using Jenkins CLI so this is how you
228:15 - can use Jenkins CLI to execute your
228:18 - Jenkins build hey guys welcome to the
228:21 - next video on Jenkins tutorial for
228:22 - beginners in this video I'm going to
228:24 - show you how we can create a multi
228:27 - branch pipeline project in Jenkins so
228:30 - first of all what is a multi branch
228:32 - pipeline project so the multi branch
228:36 - pipeline project type enables you to
228:38 - implement different jenkins files for
228:41 - the different branches of your project
228:46 - now generally in the software teams
228:48 - which is working alone our project
228:51 - different developers can work on
228:54 - different features so let's say our team
228:57 - is working on a project called my app
228:59 - and we have a few developers in this
229:03 - team and master branch is generally the
229:07 - final product right which is going to be
229:11 - run in the production now when the
229:14 - developers work on some features they
229:17 - generally create a branch out of this
229:20 - git repository so for example here when
229:24 - you click on branches option here I have
229:27 - one branch which is feature one so in a
229:29 - normal software project whenever some
229:32 - developer works on some feature he
229:35 - creates a branch and when this feature
229:38 - is implemented he or she merges this
229:41 - feature into the master branch now at
229:43 - the time when this feature is going on
229:45 - and the developer is working on how can
229:49 - he test this feature using Jenkins as
229:52 - well as the master branch so multi
229:56 - branch pipeline project allows us to
229:59 - test all the branches of your project at
230:02 - the same time using Jenkins
230:05 - so let's create a multi branch pipeline
230:08 - project in jenkins and then we will see
230:10 - how it works so just click on new item
230:14 - here and then give any name to your
230:18 - Jenkins project for example multi
230:22 - pipeline project and then scroll down
230:26 - and you will be able to see this option
230:28 - which is multi branch pipeline so select
230:31 - this option and then click OK so my
230:33 - multi branch pipeline project is created
230:35 - and here you can give some description
230:38 - about your project and in the branch
230:41 - source you can give the URL of your
230:45 - github project so here you can just
230:48 - click on add source and click on git and
230:51 - then just copy the URL of your github
230:56 - repository by just clicking on clone or
230:59 - download and then copy this URL from
231:02 - here and then paste it here where it
231:05 - says project repository I don't need to
231:08 - provide any credentials because this
231:10 - project is publicly available but if you
231:13 - want to add your credentials you can add
231:15 - it from here and then in the next
231:17 - section you will see behaviors and there
231:21 - is this option which is automatically
231:23 - enabled which is discover branches so
231:26 - your Jenkins job is going to
231:28 - automatically discover your branches and
231:32 - then run your test on all the branches
231:36 - now it's important to notice here is I
231:40 - have this Jenkins file here in my
231:43 - project right so make sure that this
231:46 - Jenkins file is there we have already
231:48 - seen how we can add this Jenkins file to
231:51 - our github project in the previous video
231:53 - so I'm not going to tell you how to do
231:56 - this but make sure that your project
231:58 - have this Jenkins file and then when you
232:01 - scroll down you will be able to see this
232:04 - section which says build configuration
232:07 - and in the mode you will be able to see
232:09 - only one option here which is jenkins
232:11 - file and you need to provide the part of
232:14 - your jenkins file here and because my
232:16 - jenkins file is on the
232:19 - root directory so I don't need to change
232:22 - the path of this Jenkins file right now
232:25 - when you scroll down more you will be
232:27 - able to see scan multi-branch pipeline
232:30 - trigger and for now we only have one
232:33 - trigger which is periodically if not
232:36 - otherwise run so when you check on this
232:39 - check box you can run the scan on your
232:43 - project every minute or every 2 minute
232:45 - or every you know this time period which
232:49 - is given in the list okay so for example
232:52 - I can just set it to every 5 minute then
232:56 - Jenkins will scan your project every 5
232:59 - minutes and it will just look whether
233:03 - your project have any extra branch or
233:05 - not and if you have committed any
233:07 - changes then it will run the test on
233:10 - every branch of your github project now
233:13 - rest of the thing I will leave them as
233:16 - default because we don't need to use
233:18 - them for now so orphan item strategy we
233:22 - will not be using and then health
233:25 - metrics we can just click on this and
233:27 - you can see there is a one health matrix
233:30 - which is child item with worst health
233:33 - pipeline libraries we don't have any
233:35 - pipeline libraries so we are going to
233:37 - leave this as default and then the
233:40 - pipeline model definition we also don't
233:43 - have any model definitions so I'm going
233:45 - to leave it as default so what we have
233:48 - given here in the configuration the URL
233:51 - of our project and make sure that you
233:54 - have the jenkins file in your github
233:57 - project so just choose or leave it as
233:59 - default which is jenkins file and then
234:02 - click on Save button and as soon as you
234:06 - press the Save button you will see a
234:09 - scan will start on your multi branch
234:12 - project and this scan is scanning the
234:16 - branches in your github project and you
234:19 - will be able to see two tasks which are
234:22 - parallel running here one on the master
234:26 - branch you can see one on the master
234:27 - branch is running and other scan tasks
234:30 - is running on the feature branch
234:32 - and the same branches are available in
234:35 - my github project also so I have feature
234:38 - one branch and the master branch that's
234:41 - why there are two tasks running to scan
234:44 - them and when I click on my project here
234:47 - you will be able to see two jobs here
234:51 - which are running one is the master
234:54 - branch job and other is the feature
234:57 - branch job and you can individually
234:59 - click on every job so I'm going to click
235:02 - on the master job here and you can see
235:04 - this job is going on and you will be
235:07 - able to see the stages of this job which
235:10 - are currently running so this job is
235:12 - successful you can see and we can also
235:15 - go to the feature branch job also and
235:18 - you can see it's also successfully
235:21 - tested so that's why both of them
235:24 - showing the success now let me show you
235:27 - how you can create a new branch in gate
235:29 - and push it to your github project and
235:32 - how this trigger works so I'm going to
235:36 - open the terminal first of all and then
235:38 - I am going to CD to my project so I'm
235:42 - going to just see the to my project in
235:46 - which I'm working on I have already
235:47 - checked out my project here now to view
235:52 - all the branches in your project you can
235:54 - give this command git branch and then
235:58 - press enter and it's going to show you
236:00 - all the branches in your project so I
236:01 - have two branches right now in my
236:04 - project one is master and other is
236:06 - feature one so let's create one new
236:08 - branch so in order to create a new
236:10 - branch you just need to give this
236:12 - command git branch and your branch name
236:15 - so so let's say I'm going to create a
236:17 - feature branch two here so I'm going to
236:20 - write feature two and then press Enter
236:23 - and now we are going to list all the
236:26 - branches once again and now you can see
236:29 - there are three branches in my project
236:31 - so one is master branch and other two
236:33 - are feature branches now in order to
236:36 - push this branch to your github
236:37 - repository you can give this command git
236:40 - push origin and then your branch name so
236:45 - my branch knee
236:46 - is feature 2 and then press enter and
236:49 - you can see this branch is now pushed to
236:52 - our github repository so we can verify
236:54 - it by going to our github repository and
236:57 - then refreshing this web page and I'm
237:00 - going to once again click on branches
237:02 - and you can see our new branch is
237:04 - visible here which is feature two okay
237:07 - so now once we have the new branch we
237:10 - can trigger them with some web hooks
237:13 - like JIRA or get bucket but right now we
237:16 - don't have any web hook so we are going
237:19 - to just press on this button which says
237:20 - scan multi branch pipeline now so I'm
237:24 - going to just click on this and then I'm
237:26 - going to scroll down a little and you
237:28 - can see there is a new task running here
237:32 - which is for the feature branch too and
237:35 - when i refresh this webpage so I'm going
237:38 - to refresh this Jenkins webpage and now
237:40 - you can see this feature branch to
237:43 - Jenkins task is running right so when I
237:46 - click on this feature branch to this
237:49 - build is running and you can see all the
237:52 - tasks are here running and the build is
237:56 - successful now so now you have three
237:59 - branches and you can see the result of
238:02 - three branches in your Jenkins
238:05 - repository so this is how you can create
238:07 - a multi branch pipeline project in
238:09 - Jenkins I hope you've enjoyed this video
238:11 - please rate comment subscribe and bye
238:13 - for now