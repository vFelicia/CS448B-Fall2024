00:00 - hey guys welcome to this course on
00:02 - Python programming for beginners so why
00:05 - Learn Python because using python you
00:08 - can build almost anything python can be
00:12 - used for web development game
00:13 - development computer vision robotics
00:16 - graphical user interface development and
00:20 - also python is the number one language
00:24 - of choice for machine learning data
00:27 - science and artificial intelligence so
00:30 - the goal of this course is to provide
00:32 - you the working knowledge of Python
00:34 - Programming we will start with the
00:37 - basics starting from the installation of
00:39 - python on your operating system and then
00:41 - we will learn all the basic concepts in
00:44 - Python Programming like variables data
00:46 - types operators control statements Loops
00:50 - strings functions and also python
00:54 - collections like lists tuples sets and
00:58 - dictionaries then we will move to the
01:01 - object oriented programming Concepts in
01:04 - Python so in this section we will start
01:07 - with what is object oriented programming
01:10 - what are classes and objects and then we
01:13 - will cover the concepts like
01:14 - encapsulation inheritance polymorphism
01:17 - abstraction and excess specifiers also
01:22 - we will see some Advanced object
01:24 - oriented programming topics like
01:26 - abstract classes and compositions next
01:29 - we will see how we can handle exceptions
01:32 - using Python Programming then we will
01:35 - move towards some Advanced topics like
01:38 - python iterators generators decorators
01:41 - and also we will cover some functional
01:44 - programming Concepts using python I will
01:47 - also cover how you can debug your python
01:49 - code and also we will see how to use pip
01:52 - which is a python package management
01:55 - system to install and manage your
01:58 - software packages written in Python now
02:01 - if you want to see the whole list of
02:03 - topics which will be covered in this
02:06 - video course then you can see the
02:09 - description of this video and you will
02:11 - be able to see all the topics which will
02:13 - be covered in this video so by the end
02:16 - of this course you will be able to apply
02:19 - whatever you have learned in this course
02:21 - in your own projects or for applying for
02:25 - a Python programming job so what are you
02:28 - waiting for let's get started in this
02:31 - video I'm going to give you a brief
02:33 - introduction about python so let's get
02:35 - started so first of all what is python
02:38 - so python is a high level dynamically
02:41 - typed programming language
02:44 - python support multiple programming
02:47 - paradigms including object oriented
02:50 - imperative functional and procedural
02:54 - Styles now python is a interpreted
02:56 - language so what do we mean by
02:59 - interpreted to understand this we need
03:02 - to understand the difference between the
03:04 - compiled languages and the interpreted
03:07 - languages so some languages like C C
03:10 - plus plus Java are all translated by
03:14 - running the source code through a tool
03:17 - called compiler this compilation of
03:20 - source code results in a very efficient
03:23 - byte code that can be executed any
03:25 - number of times now interpreted
03:28 - languages like python in contrast must
03:31 - be parsed interpreted and executed each
03:35 - time the program is run thereby greatly
03:38 - adding the cost of running the program
03:41 - so a compiled language takes the entire
03:44 - our program as a single input and
03:47 - converts it into machine code or byte
03:49 - code which is stored in a file called a
03:53 - binary file on the other hand
03:54 - interpreted languages like python takes
03:57 - the single instruction as single input
04:00 - and execute that instruction now
04:03 - compiled languages run faster because
04:06 - compilation is done before the execution
04:08 - on the other hand interpreted programs
04:11 - run slower because compilation and
04:15 - execution takes place
04:16 - simultaneously in case of python even
04:19 - though it's a interpreted language but
04:22 - it's really fast now python supports
04:24 - Dynamic data types and to understand
04:27 - this we need to understand the
04:28 - difference between statically typed
04:31 - programming languages and dynamically
04:33 - typed programming languages
04:36 - so at statically typed programming
04:39 - languages do the type checking at the
04:41 - compiled time as opposed to the real
04:44 - time and dynamically typed programming
04:47 - languages do type checking at run time
04:51 - as opposed to compile time so let's say
04:54 - you declare a variable X is equal to 9
04:58 - in python python will do its type
05:00 - checking at runtime whether it's a
05:02 - integer or a string or a double value
05:05 - all will be done at the run time now
05:09 - python is independent from platforms
05:12 - that means it's a cross platform
05:14 - programming language that means you can
05:17 - run your python code on Windows Linux
05:20 - Mac or on any other Unix operating
05:23 - system now python focuses on faster
05:26 - development time so python code has a
05:28 - very natural style to it which makes it
05:31 - easy to read and understand thanks to
05:33 - the lack of semicolons and braces so we
05:36 - don't use semicolons or braces in Python
05:40 - that means faster development time
05:42 - especially when you are doing some
05:44 - prototyping work python is a highly
05:47 - readable language and has a clean visual
05:50 - layout so if a developer writes a very
05:53 - efficient Python program it's like
05:56 - reading English language now python have
05:58 - high level internal object data types
06:01 - and have automatic memory management and
06:05 - at last python is free and open source
06:07 - that means you don't need to pay
06:09 - anything to start learning python now
06:12 - let's talk about some history about
06:13 - python so python was conceived in late
06:18 - 1980s and its implementation began in
06:22 - December 1989 by a developer called
06:26 - Guido van Rossum in Netherlands as a
06:30 - successor of a programming language
06:32 - called ABC Now Guido van Rossum worked
06:35 - at go Google from 2005 to December 2012
06:40 - where he spent half of his time in the
06:42 - development of Python programming
06:45 - language and nowadays van rusam is
06:47 - working in a company called Dropbox and
06:50 - from where this python name come from
06:52 - rusam chose the name python since he was
06:56 - a big fan of Monty Python's Flying
06:59 - Circus so python was first publicly
07:01 - released in February 1991 and python.org
07:06 - which is the official website of python
07:09 - was released in the time period between
07:12 - 1996 and 1997. in the year 2001 python
07:17 - software Foundation was created and
07:19 - found russum remained the principal
07:22 - author of python his continuing Central
07:25 - role in Python development is reflected
07:28 - in the title given to him by python
07:31 - Community which is benevolent director
07:34 - of life now what is a benevolent
07:36 - director of life this is a title given
07:39 - to small number of Open Source software
07:42 - development leaders typically the
07:44 - project Founders who retain the final
07:47 - say in the dispute or arguments within
07:51 - the community so why I learn python
07:54 - because python is fun to use scripting
07:57 - language and as I said python is a
08:00 - multi-paradigm programming language
08:01 - which supports object oriented
08:04 - imperative functional programming and
08:06 - procedural styles that means it's highly
08:10 - recommended for the educational purpose
08:13 - so majority of educational institutes
08:16 - use python as the first language which
08:19 - they teach to their students and why
08:21 - it's the first choice of educational
08:24 - institutes because it's very easy to
08:26 - learn and it runs on any platform now
08:29 - python is very powerful scalable and
08:33 - easy to maintain programming language
08:35 - which enable High productivity and it
08:38 - has lots and lots of inbuilt libraries
08:40 - which a developer can use Python is also
08:43 - used as a glue language which acts as a
08:46 - interactive front-end for the languages
08:48 - like C and C plus plus so when you
08:50 - develop in Python it reduces the
08:52 - development time it reduces the code
08:55 - length it is easy to learn and use as a
08:59 - developer it is easy to understand codes
09:02 - it is easy to do team projects in Python
09:05 - and it's really easy to extend to other
09:08 - languages if you are using python so
09:11 - where can you use python so because
09:13 - python is a general purpose programming
09:16 - language it is used in many web
09:18 - development framework for example Django
09:21 - and flask recently became very popular
09:24 - for web development now python is also
09:28 - widely used in scientific Computing Data
09:31 - Mining and machine learning and
09:34 - continued growth and demand for machine
09:37 - learning developers may be driving the
09:40 - popularity of python now as I said
09:43 - python is used as a scripting language
09:45 - that means if you are doing prototyping
09:49 - it's really efficient to use python
09:51 - python is also used in the development
09:54 - of graphical user interfaces embedded
09:58 - applications gaming and devops tools and
10:02 - at last as I said because python is
10:05 - really easy to learn it's used for
10:08 - educational purposes as the first
10:11 - programming language for t teaching
10:13 - programming now the question arises
10:15 - which version of python should You Learn
10:18 - Python 3 or python 2 so I would
10:21 - recommend Python 3 since it's more
10:24 - modern and it is a more popular option
10:27 - at this point of time so I will be
10:30 - teaching this course in Python 3. so
10:33 - this was a brief introduction about
10:34 - python from the next video I'm going to
10:37 - show you how to install Python and how
10:39 - to use python as a programming language
10:42 - in this video I'm going to show you how
10:44 - to install Python 3 on your Windows 10
10:46 - operating system so let's get started so
10:49 - first of all open your favorite browser
10:51 - on your Windows 10 operating system and
10:53 - then search for Python and the first
10:55 - link which will appear here will be from
10:57 - python.org so we are going to click on
10:59 - that link and once this python.org
11:01 - website is open you just need to scroll
11:03 - down a little until you see this
11:05 - downloads section and you can see at the
11:08 - time of making this video python 3.7.0
11:11 - is the latest version of python
11:13 - available so we are going to click on
11:16 - this link which says Python 3.7.0 and
11:18 - you will be redirected to this page
11:21 - which says Python 3.7.0 and now I'm
11:23 - going to scroll down until I see the
11:26 - files here and you will see there are
11:29 - various kinds of installer available
11:30 - here we are going to install the python
11:33 - using the executable installer so we are
11:35 - going to choose this option which says
11:36 - Windows x86 hyphen 64 executable
11:40 - installer and now I will wait for this
11:43 - executable to be downloaded and once
11:45 - this executable is downloaded you just
11:47 - need to click on this exe file and I am
11:50 - going to minimize the browser here so
11:52 - you can see Python's 3.7.0 setup window
11:54 - has been started and on the first window
11:57 - you will see two options here one is
12:00 - install now and other is customize
12:03 - installation so what we are going to
12:05 - choose is this option which says
12:07 - customize installation because when you
12:10 - choose this install now option python
12:12 - will will be installed at this path
12:15 - which I don't want to use you can see
12:18 - it's a long path which I don't want to
12:20 - remember so I will use this option which
12:24 - says customize installation and I will
12:26 - also check this option which says add
12:27 - python 3.7 to path so now let's click on
12:31 - customize installation and next you will
12:33 - see this optional feature window and you
12:36 - can see there are some optional feature
12:38 - which this python installer will install
12:41 - for example documentation pip it will
12:44 - install which is a python package
12:46 - manager idle IDE python test suit and
12:50 - other feature it's going to install so
12:52 - I'm going to leave everything as default
12:53 - and then I'm going to click next and now
12:55 - this next window will open which says
12:58 - Advanced option here I'm going to check
13:00 - this option which says install for all
13:03 - users and I am going to leave other
13:05 - check boxes as checked and then you will
13:08 - see this section here which says
13:10 - customize install location so I want to
13:12 - install python on my C directory so what
13:14 - I'm going to do is I'm going to open the
13:16 - windows Explorer and I'm going to go to
13:19 - the C directory here
13:21 - and once the C directory is open I'm
13:23 - going to right click here and I'm going
13:24 - to create a new directory and I'm going
13:26 - to name this directory as Python and
13:29 - then I'm going to press enter
13:31 - and this path I am going to give here in
13:34 - the customize install location so I am
13:37 - going to just give this path which says
13:39 - C colon slash Python and then backslash
13:43 - Python 3 7.37 here means that we are
13:47 - going to install 3.7 version of python
13:50 - so now python will be installed at this
13:52 - location on my computer and then I'm
13:54 - going to click on the install button
13:56 - here and then you will see the
13:57 - installation will start and it will be
13:59 - finished in a few seconds so just wait
14:01 - for the installation to complete and
14:03 - after some time I can see this message
14:04 - which says setup was successful so I'm
14:06 - going to click on this close button
14:08 - which is going to close this installer
14:10 - so now in order to check whether python
14:12 - is installed on our Windows operating
14:14 - system or not we are going to search for
14:16 - python here and you will see few options
14:19 - here one is this python 3.7 terminal
14:23 - other is Idle IDE so first of all we are
14:27 - going to click on this option which says
14:29 - python 3.7 64-bit which is going to open
14:32 - this kind of terminal so this is a
14:35 - python terminal and here we can for
14:38 - example print something so I am going to
14:39 - just write print and in the parenthesis
14:41 - and in between the double quotes I can
14:44 - just write hello world and then press
14:47 - enter which is going to in return print
14:50 - hello world that means python 3.7
14:53 - terminal is working so I am going to
14:55 - close this terminal now and once again
14:57 - I'm going to search for python here and
14:59 - this time I'm going to select this
15:01 - option which says idle okay so just
15:03 - select this option which says idle and
15:06 - in the parenthesis python 3.7 64 bit so
15:09 - this idle is an IDE which comes with
15:12 - python installation at the time of
15:14 - installation we have chosen this option
15:16 - to install idle that's why we can see
15:19 - this option here and also this is an
15:21 - interactive shell so you can once again
15:23 - write a print and inside the parenthesis
15:25 - you can just write for example once
15:28 - again hello world and then press enter
15:31 - and it is going to give you this kind of
15:33 - output here so now python interactive
15:36 - shell is working and idle IDE is also
15:38 - working so I'm going to close this idle
15:41 - IDE and now I want to check whether
15:43 - python is working using my command
15:46 - prompt or not so I'm going to right
15:47 - click on this Windows button and then
15:50 - I'm going to click on command prompt
15:53 - and here I'm going to first of all write
15:55 - Python and then press enter and you can
15:58 - see this python option is working now
16:01 - even on your command prompt right so
16:04 - here also you can just write print and
16:07 - inside the parenthesis you can just
16:09 - print hello
16:11 - world and then press enter and it prints
16:14 - hello world in return so now we have
16:16 - successfully installed python on our
16:18 - Windows 10 operating system in this
16:21 - video I'm going to show you how to use
16:23 - mathematical operators and how to do
16:27 - basic math in Python so first of all we
16:31 - will open the idle IDE so just search
16:34 - for python once again I have shown you
16:37 - this method in the last video also so
16:40 - just search for the python once again
16:42 - and in the last video I have shown you
16:44 - how to install a python and with the
16:47 - python installation this idle is also
16:50 - installed right so we are going to open
16:53 - this idle IDE now some of you who are
16:56 - familiar with python and have some
16:58 - experience with python may think that
17:01 - why am I using this python idle IDE
17:04 - because there are many better Ides and
17:08 - editors available for the development of
17:12 - python so don't worry I'm going to show
17:15 - you everything how to install other Ides
17:19 - which are preferred in the development
17:21 - of python step by step but for now we
17:24 - will start with this idle IDE so the
17:27 - first thing which I want to do here is I
17:29 - want to increase the font size first of
17:32 - all in the idle IDE because this may be
17:36 - not visible to some of you you can
17:39 - change the font size by just changing
17:42 - this number and I'm going to change it
17:45 - to for example 18 and bold so we will be
17:49 - able to see our fonts in a better way so
17:52 - now everything is set so let's get
17:54 - started with the programming so let's
17:57 - start with the basic math operations so
18:00 - let us say I want to add something so I
18:02 - can just write number plus which is
18:05 - operator and the other number and then
18:08 - press enter and you will get the result
18:11 - of this expression now let's try the
18:14 - subtraction so let us say I want to
18:16 - subtract 60 minus 50 and then press
18:20 - enter and it gives the result let's do
18:23 - the negative subtraction so I am going
18:25 - to just write 60 plus 50 and then press
18:29 - enter and it's going to return me the
18:32 - negative value now let us do the
18:34 - division so for example I want to divide
18:37 - 50 by 3 I'm going to press enter and you
18:41 - can see it gives me a float value or a
18:44 - decimal value and if you are familiar
18:46 - with other languages like Java or C plus
18:49 - plus this may appear little bit strange
18:51 - to you because when you do the same
18:54 - operation in Java or C plus plus with
18:57 - this division operator you will get the
19:01 - different answer which is 16 and not
19:04 - these decimal float value so if you want
19:07 - to just get an integer value and not the
19:10 - decimal value out of the division then
19:13 - you you can write this expression which
19:15 - is 50 double forward slash 3 okay and
19:19 - then press enter and now you get 16
19:22 - which is a whole number or an integer
19:25 - this type of division is also called the
19:28 - floor division in which you get the
19:31 - whole number as the answer and the
19:34 - decimal value is truncated out of your
19:38 - answer so if you want to get the exact
19:40 - value out of the division in decimal
19:42 - values also then you can use this
19:46 - expression which is single forward slash
19:48 - operator and if you want to do the flow
19:50 - division then use these two forward
19:53 - slash symbols now its also possible to
19:56 - divide two decimal values so decimal
19:58 - values in Python and most of the other
20:02 - languages are called the float values so
20:05 - here instead of 50 I can just write 50.0
20:09 - divided by three point zero which is
20:14 - also valid or I can write
20:16 - 50.0 divided by 10 and then press enter
20:21 - which gives me 5.0 and when I write the
20:25 - integer which is 50 divided by 10 it
20:28 - will also give me this value which is
20:31 - 5.0 now let us try some multiplication
20:33 - so if you want to do multiplication in
20:36 - Python you use a number and then this
20:39 - asterisk symbol and then second number
20:42 - and then press enter and this is going
20:46 - to multiply these two numbers so this is
20:49 - the multiplication operator which we can
20:52 - use to multiply two numbers now this is
20:55 - what we are doing here is for example
20:58 - multiplying two numbers or dividing two
21:01 - numbers or addition of two numbers or
21:03 - subtraction of two numbers in Python
21:06 - it's called expression okay so 50
21:09 - multiplied by 10 is an expression and I
21:12 - have already told you you that these
21:15 - symbols for multiplication or division
21:17 - are called operators now the number on
21:21 - which you are doing these mathematical
21:24 - operations are called operands so 50
21:27 - here is an operand then here is an
21:30 - operand or three here is operand and 50
21:33 - here is operand now here 50 and 10 are
21:36 - also called literals because they are
21:39 - constant values so what we have learned
21:41 - till now this is an expression this is
21:46 - an expression or 50 divided by 3 is an
21:49 - expression the number on which you
21:52 - operate on are called operands and these
21:56 - symbols which you can use to multiply
21:59 - divide add or subtract are called
22:02 - operators and these numbers are also
22:06 - called literals when they are constants
22:09 - now let us try some modulo operations so
22:13 - for example I am going to just write 10
22:16 - modulus 3 here what it is going to give
22:20 - us is the remainder of the division of
22:23 - these two values so 3 multiplied by 3 is
22:27 - 9 which leaves the remainder 1 and that
22:31 - is the result we are getting okay let us
22:33 - try it once again so for example I will
22:36 - divide 21 divided by 5 it will give me
22:40 - the answer 4.2 but when I do 21 modulo 5
22:46 - and then press enter it is going to give
22:48 - me the remainder of the division of two
22:52 - values now there is another interesting
22:55 - operator which is called exponent
22:57 - operator which you can use for the
23:01 - exponent values so for example I want to
23:04 - get the result of 2 to the power 5 how
23:07 - can I do it so I can just write 2 and
23:10 - then double as tricks and then 5 which
23:13 - means 2 to the power 5 and then when I
23:16 - press enter it is going to give me 32 or
23:20 - I can just write a 10 and then I can
23:24 - just write double Asterix and then for
23:27 - example 10 once again and then press
23:29 - enter it is going to give me the result
23:31 - of 10 to the power 10. now it is also
23:34 - possible to do these mathematical
23:36 - operations on more than one number so
23:39 - for example I can write 5 plus 5 plus 6
23:42 - Plus 9 and it will give me the result of
23:46 - the addition of these four numbers and
23:48 - it's also possible to use different type
23:51 - of operator in one expression so I can
23:54 - write 5 plus 9 minus 6 multiplied by 10
24:00 - for example and it is going to give me
24:02 - the result of this expression now there
24:05 - is one question which may arise here is
24:07 - for example once again I am going to do
24:09 - 5 plus 9 minus 6 my multiplied by 10 and
24:16 - divided by 20 and press enter here it is
24:21 - going to give me this value but how this
24:23 - value is calculated what operation is
24:27 - executed first is the multiplication is
24:30 - done first or is the division done first
24:34 - or the addition took place first or the
24:37 - subtraction took place first so I have
24:39 - this table and here you can see the
24:43 - Precedence of these operators so in this
24:46 - table highest precedence is at top and
24:50 - lowest is at bottom that means
24:53 - parenthesis have the highest priority
24:56 - and then the exponents have the priority
24:59 - and then the multiplication and division
25:02 - operators have the same priority here
25:05 - and at last the subtraction and addition
25:09 - have the same priority but whenever you
25:12 - use these operators which are in the
25:15 - same box in a same expression then
25:19 - whatever operator you use on the left
25:22 - have the highest priority and whatever
25:25 - operator you use on the right have the
25:29 - lower priority so in this table
25:31 - parentheses have the highest priority
25:33 - and the addition and the subtraction
25:35 - have the lowest priority and for example
25:39 - if you use multiplication and division
25:41 - in the same expression then the priority
25:44 - is decided which operator is appearing
25:48 - on the left so if the operator is
25:50 - appearing on the left it has the highest
25:52 - priority then the operator which are on
25:55 - the right side so let us take an example
25:57 - of that so for example
26:07 - so first the addition of these two
26:09 - number will happen and then the division
26:12 - of these two numbers will happen because
26:14 - parentheses have the highest priority
26:17 - and then the result of these two numbers
26:20 - will be multiplied by 6 because
26:23 - multiplication have the highest priority
26:26 - out of these two operators which are
26:30 - minus and multiply so multiplication
26:33 - operator have the highest priority and
26:36 - at the end the subtraction of the result
26:39 - will take place so let us press enter
26:42 - and let's see what's the result so the
26:44 - result here is 11 and how we get this
26:47 - result here so 5 plus 9 is 14 and the
26:52 - division of these two number is one by
26:55 - two so six will be divided by 2 which is
26:58 - 3 and then at last 3 will be subtracted
27:02 - from this result which is 14 which will
27:05 - give you 11. once again for example you
27:08 - use 60 multiplied by 20 divided by 30
27:15 - and then press enter it will give you 40
27:18 - but in which order this calculation will
27:21 - happen first of all this multiplication
27:23 - will takes place because in the table we
27:26 - have seen that multiplication operator
27:29 - and division operator have the same
27:31 - priority and that's why the priority
27:33 - will be decided from left to right now
27:37 - if you want to learn the order of
27:39 - Precedence between the operators then
27:42 - you can use this keyword which is p e m
27:45 - d a s p stands for parenthesis e stands
27:50 - for exponents m stands for
27:52 - multiplication d stands for division a
27:56 - stands for addition and S stands for
27:59 - subtraction OK so you can either
28:02 - remember this name which is Pam Das or
28:07 - you can use this sentence which I have
28:09 - written here so please excuse my dear
28:13 - Aunt Sally and you need to remember the
28:17 - first letter of each word here and the
28:20 - first letter of every word for example P
28:22 - here stands for parenthesis is here
28:25 - stands for exponent m and d here stands
28:29 - for multiplication and division A and S
28:32 - here stands for addition and subtraction
28:35 - so for remembering you can either use
28:37 - this sentence or you can remember this
28:40 - keyword in this video we will talk about
28:43 - python variables and types so first of
28:47 - all what is a variable so according to
28:51 - Wikipedia in computer programming a
28:54 - variable is a storage location paired
28:57 - with an Associated symbolic name also
29:01 - known as variable name or identifier
29:03 - which contains some known or unknown
29:08 - quantity of information
29:10 - referred to as value now in simple words
29:14 - a variable is a named place in the
29:18 - memory where a programmer can store data
29:22 - and later retrieve this data using the
29:26 - variable name
29:28 - now the programmer get to choose the
29:30 - name of this variable which is declared
29:33 - and programmer can change the content of
29:36 - this variable in the later statements so
29:39 - let's see how we can define a variable
29:42 - in Python so you can define a variable
29:45 - using any name for example you can give
29:48 - my int as a name and then using an
29:52 - assignment operator which is this equal
29:54 - to symbol you can assign some value to
29:58 - this variable for example 9 and when I
30:01 - press enter this value 9 is assigned to
30:05 - this variable which is my end and now on
30:09 - I can just get the value of this
30:12 - variable using the variable name so when
30:16 - I write my int and then press enter it
30:19 - gives me the value which is assigned to
30:22 - this variable now as I told you in the
30:25 - first introduction video of this course
30:28 - that python is completely object
30:31 - oriented and it's not statically typed
30:34 - so you do not need to declare the
30:37 - variables before using them or you do
30:41 - not need to declare the type of the
30:44 - variable and further every variable in
30:47 - Python is an object so if you have
30:50 - learned some other languages like C C
30:53 - plus plus Java or other statically typed
30:56 - languages you may have observed that
31:00 - before writing the variable name they
31:03 - give the type of the variable for
31:06 - example in other languages for defining
31:08 - integer they have to first Define the
31:10 - data type of that variable and then they
31:13 - Define the variable name and then they
31:16 - assign any value to it but in Python you
31:19 - don't need to Define this data type here
31:21 - and whenever you define a variable you
31:23 - need to assign some value to it so that
31:26 - python will be able to and understand
31:28 - the type of data you want to store in
31:32 - this variable so this type of notation
31:34 - when I press enter here it's going to
31:37 - give me error which says invalid syntax
31:40 - because this type of variable
31:42 - declaration is not allowed in Python now
31:46 - there are some rules which you need to
31:48 - follow in order to declare a variable in
31:51 - Python and these rules are a variable
31:53 - must start with a letter or underscore
31:58 - okay so you cannot start the variable
32:02 - name with a number or some unknown
32:06 - symbol the second rule is a variable
32:08 - must consist of letters numbers and
32:12 - underscores and no other special symbol
32:16 - and the third rule is variables are case
32:21 - sensitive so let me show you the demo of
32:23 - all the rules which are related to
32:25 - Declaration of variables in Python
32:28 - so let us say we have defined this
32:30 - variable my int I cannot get the value
32:34 - of my end when I write for example my
32:38 - with capital letter and then in here and
32:42 - it is going to give me an error because
32:45 - variables in Python are case sensitive
32:48 - so this variable name is different from
32:51 - this variable name now as I told you you
32:54 - can define a variable starting with the
32:56 - letter it's totally valid so let us
32:59 - Define this variable age is equal to 10
33:01 - which is valid you can also Define a
33:04 - variable with the combination of letters
33:07 - and numbers and it's also totally valid
33:11 - but a variable name cannot start with a
33:14 - number so when you write something like
33:16 - this and assign some value to it it's
33:19 - going to give you an error which is a
33:22 - syntax error so a variable name cannot
33:24 - start with a number a variable name can
33:28 - start with underscore and it's totally
33:31 - valid but apart from underscore when you
33:34 - use some special character for example
33:37 - hash age is equal to 10 it's not valid
33:40 - so whenever you try to get the value of
33:42 - age it's not going to give you the value
33:46 - which is stored inside this variable
33:49 - also you cannot use any other special
33:52 - symbol between the variable names so for
33:56 - example I can write H dot 22 here is
33:59 - equal to 22 which is not a valid syntax
34:03 - because we have used this dot symbol in
34:07 - between the variable declaration so
34:10 - these are some of the ground rule in
34:12 - order to declare a variable in Python
34:16 - now apart from that there are some
34:18 - reserved words in Python which also you
34:22 - cannot use in order to declare a
34:24 - variable for example these are some of
34:27 - the words which you cannot use in order
34:30 - to declare a variable for example and
34:33 - Del for is raised you cannot use to
34:38 - declare a variable so let's say I'm
34:40 - going to go to idle once again and I
34:43 - declare a variable called for is equal
34:46 - to 10 it's not valid it says it's a
34:50 - invalid syntax because 4 is a reserved
34:54 - word in Python so now we have learned
34:57 - some rule about declaring the variables
34:59 - so let's declare some variables in
35:02 - Python so first of all I am going to
35:04 - declare an integer variable which takes
35:08 - an integer and then I'm going to declare
35:11 - a float variable which takes a decimal
35:15 - value and then I can also declare in
35:17 - Python a complex value for example my
35:22 - complex is equal to 1 J and then press
35:26 - enter and it's also totally valid where
35:29 - J in this value is the imaginary part of
35:33 - this complex number now you can also use
35:36 - e to indicate the power of something so
35:39 - for example I declare a variable my num
35:42 - and you can write this notation like
35:44 - this so 10 to the power 10 is totally
35:48 - valid okay and when you try to access
35:51 - this value of my num it is going to give
35:54 - you the value of 10 to the power 10 you
35:57 - can also write the capital E here so
36:00 - when I write my num is equal to 10
36:03 - capital E 10 and then press enter and I
36:07 - try to access the value which is stored
36:09 - in this variable you can see it gives me
36:12 - the same result now in order to declare
36:14 - a string variable for example my string
36:17 - I can use double quotations for example
36:21 - I want to write some name here it is
36:24 - totally valid so I am going to just get
36:25 - the value which I stored inside this my
36:29 - string variable and it gives me this
36:31 - name Max I can also use single quotation
36:34 - in order to assign string to the
36:37 - variable so I will use now single
36:40 - quotation and this time I just change
36:42 - the name to Tom it is also totally valid
36:46 - so when I write my string once again it
36:49 - gives me the value Tom now you may have
36:52 - noticed one more thing here is
36:54 - reassignment of the variable is possible
36:57 - so first I have assigned the value Max
37:00 - to this variable my string and then I
37:03 - have reassigned some other value Tom to
37:06 - the same variable my string so
37:09 - reassignment is possible so for example
37:12 - let us say what I am going to do is I am
37:14 - going to take my float variable and then
37:17 - what I'm going to do is I want to assign
37:20 - in this variable the value which is
37:22 - stored in my int variable so I'm going
37:25 - to just write my int here and then press
37:27 - enter and let's see what is the value
37:30 - inside my float now and you can see it
37:33 - gives us the value 10 but you may ask
37:36 - that we have declared this variable name
37:39 - as my float so we are expecting the
37:43 - float value inside this my float
37:46 - variable name but it's giving me the
37:49 - value 10 so in order to convert integer
37:53 - value into a float value you can use
37:56 - type casting so I can just write my
37:59 - float here is equal to then you write a
38:03 - keyword float here and then inside the
38:06 - parenthesis you can write the name of
38:07 - the variable which is my int and then
38:10 - when I access the value of my float here
38:13 - it is going to give me 10.0 which is a
38:17 - float value so in order to convert
38:20 - integers into float you can use this
38:24 - keyword float here now if you want to
38:26 - convert a float value into an integer
38:29 - you can just write for example my int is
38:34 - equal to int and then inside the
38:37 - parenthesis you can write the variable
38:39 - name for example my float here and then
38:42 - press enter and then I can see the value
38:46 - which is stored inside guide this mind
38:49 - variable and it is an integer now let me
38:51 - show you one last thing which is to find
38:53 - out the type of any variables so you use
38:57 - a keyword called type and in the
39:00 - parenthesis you use the variable name
39:03 - for example my int and then press enter
39:05 - and it will give me the type of the
39:09 - value which is stored inside this
39:12 - variable so you can see integer is
39:14 - stored inside this variable my int once
39:18 - again type and then parenthesis and now
39:21 - I want to know the type which is stored
39:24 - in the my float variable and you can see
39:27 - it will give me float as an answer so we
39:31 - know that in my float variable float
39:34 - value is stored once again we will see
39:37 - what value is stored in this my num
39:40 - which is an exponent value right so I am
39:43 - going to just write type and then I am
39:46 - going to just write my I num now and
39:49 - then press enter and it gives me a float
39:52 - value and At Last I want to see what
39:55 - type is stored in this my string
39:58 - variable so I can just write my string
40:01 - here and then press enter and you can
40:03 - see the value which we get here is Str
40:07 - which stands for string that means in my
40:10 - string string value is stored now it's
40:13 - totally possible to use the operators
40:16 - with variables so I want to add the
40:18 - value stored in my int plus my float
40:23 - here and this will give me 20 because my
40:27 - end have the value 10 and my float have
40:29 - the value 10.10 so the result is 20.0
40:33 - here so this is how you can use
40:35 - variables and types in Python in this
40:38 - video we will see how to use print
40:40 - function in order to print output on the
40:44 - console in various different ways and I
40:47 - am also going to show you how to take
40:48 - user input using python so we have
40:52 - already seen that in Python we can use
40:55 - this print function in order to print
40:58 - something and we have already printed
41:00 - hello world at the time of installation
41:04 - right and when I press enter it's going
41:07 - to print hello world on the console now
41:09 - some of you might wonder what is this
41:12 - print
41:13 - so print is a inbuilt function in Python
41:18 - so python has a number of inbuilt
41:21 - function and print is one of them so
41:24 - here print is a function
41:27 - and then inside the parenthesis what you
41:31 - give here is called a parameter or an
41:35 - argument okay so hello world is an
41:38 - argument which is a string argument
41:41 - right so let us try to give in this
41:44 - print
41:45 - an integer argument let us say I just
41:49 - provide 25 here and it will print this
41:52 - number once again
41:53 - let us say I am going to write print and
41:56 - then I want to execute some expression
41:58 - 50 multiplied by 60 and then press enter
42:03 - print function is also able to do this
42:05 - now let us say I want to Output some
42:08 - more complex formatted string so let us
42:12 - say I want to print on the console 50
42:14 - multiplied by 10 is equal to 60. how can
42:19 - I do this so let's see how we can do it
42:21 - so I can write print here and then
42:23 - inside these double quotes you can write
42:26 - your string for example 50 multiplied by
42:29 - 10 and then in print function you can
42:32 - give multiple arguments using this comma
42:35 - separator so here I can just write 50
42:39 - multiplied by 10 and let me put equals
42:43 - symbol here inside this string and then
42:46 - press enter and now it prints 50
42:49 - multiplied by 10 equals 500 and you can
42:54 - also provide more than one argument to
42:57 - this print function so for example I can
43:01 - just write hello here and then in the
43:04 - second argument I will just provide the
43:06 - space between hello and world and in the
43:09 - third argument I will just say World
43:11 - here and this print function will
43:13 - concatenate all these string values and
43:16 - give you the output in this format now
43:19 - let's say you want to also provide this
43:21 - value here which is 50 and 10 instead of
43:23 - string you want to provide some value
43:27 - which you take from a variable so for
43:30 - example you declare a variable X is
43:33 - equal to 50 here and then Y is equal to
43:37 - 10 and you want to use these two
43:39 - variables instead of this static string
43:42 - so how you can achieve this you can
43:45 - achieve this in various different ways
43:47 - so let me show you the first way so I
43:49 - can write print and then in the double
43:52 - quotes this is your string so whenever
43:55 - you use this double quotes and whenever
43:57 - you write something in between this
44:00 - double quotes it becomes a string so
44:02 - after this string I will provide a DOT
44:04 - here and wait for some seconds and as
44:07 - soon as you do this you will be able to
44:09 - see various different hints here which
44:12 - are provided so these are all the
44:14 - inbuilt methods which you can use with
44:18 - the string so you can use find method
44:22 - you can use format method so for now we
44:25 - are going to use this format method with
44:27 - string so you can just click on this
44:29 - format method so let's say I will
44:31 - provide X as the first argument y as the
44:36 - second argument and I want to see the
44:40 - output of X multiplied by y in the third
44:44 - argument now how you can print the value
44:46 - of x y and the multiplication of X Y
44:49 - using this blank string so it turns out
44:54 - that you can use these curly brackets
44:57 - inside this string and you can give some
45:01 - index here so index starts from zero so
45:03 - this index is index 0 and then I am
45:07 - going to provide space and then this
45:10 - asterisk symbol to provide this kind of
45:12 - format so we want to achieve this format
45:14 - here right so just write 0 in the curly
45:18 - bracket space asterisk and once again
45:21 - curly bracket and this time we are going
45:23 - to provide the index 1 and the result
45:25 - will be transferred to index 2. why
45:30 - because here the index starts from 0 so
45:32 - X will be transferred to the index 0 y
45:36 - will be transferred to the index 1 and
45:39 - the multiplication of X and Y will be
45:41 - transferred to index 2 here so let me
45:44 - press enter here and you can see it
45:47 - prints the string which we desire now
45:50 - once again I'm going to write this print
45:51 - function and once again I am going to
45:53 - give this parenthesis and you can see
45:55 - the hint here so I want to use this SCP
45:59 - keyword now inside the string so how can
46:02 - I use this so I will just close this
46:05 - parenthesis and once again I want to
46:07 - print hello world so I will just write
46:09 - hello and then I'm going to provide the
46:11 - comma and inside the double quotes I am
46:15 - going to just write word here and then
46:17 - in the last argument you can provide
46:20 - this keyword SCP is equal to and inside
46:23 - the double quotes you can provide some
46:25 - separator to separate the hello from
46:28 - world so I want to just give this string
46:31 - to separate hello from world and now I
46:34 - am going to press enter and you can see
46:36 - this string is separating the keyword
46:39 - hello from the world now in Python you
46:42 - can also use C style string formatting
46:45 - to create a new formatted string so let
46:48 - me show you how we can do it so I am
46:50 - going to declare a variable called name
46:52 - and I am going going to assign some
46:54 - value to it for example Max here and
46:56 - then press enter and now I am going to
46:59 - just write print function and in the
47:02 - parenthesis I want to just greet this
47:05 - name so I can just write double quotes
47:10 - hello here and then if you are familiar
47:12 - with C style string formatting then you
47:15 - may know this modulo s symbol which is
47:18 - used to print strings right and then
47:21 - after this double quote you just need to
47:24 - provide once again this modulo symbol
47:26 - and then you need to provide the
47:29 - variable name which you want to replace
47:32 - instead of this modulo s so in our case
47:35 - we want to replace this modulo s by name
47:39 - variable and I'm going to press enter
47:42 - and you can see it prints hello Max now
47:46 - let us say I also have the age of this
47:49 - person so the age is let us say 22 and
47:53 - once again I am going to use this print
47:55 - function and inside the parenthesis I
47:59 - want to say hello to the name including
48:02 - the age so I can just write hello and
48:05 - then modulo s here and then I'm going to
48:08 - print the age of this person I can just
48:12 - write r u modulo d which is used to
48:16 - print the integer values and then I'm
48:19 - going to just write here's old
48:21 - and after the double quotes I can just
48:24 - write modular and this time I cannot
48:27 - simply provide this name argument like
48:30 - this I must provide the name in the form
48:33 - of a tuple and what is a tuple a tuple
48:37 - is a fixed size list and we are going to
48:40 - see in the future videos how to use
48:43 - tuples but for now just remember that a
48:46 - tuple is a fixed size list okay so
48:51 - inside these parenthesis once again I
48:54 - can provide first of all the name and
48:56 - then as a second value in the Tuple I
48:59 - can provide the age variable and now I'm
49:02 - going to press enter and now you can see
49:05 - it prints hello Max are you 22 years old
49:09 - so this is how also you can use these C
49:13 - styled string formatting in Python I
49:17 - want to give you one more example of
49:19 - float here so I can just write for
49:22 - example this person's marks so I am
49:24 - going to just write marks is equal to
49:27 - and let us say I want to provide these
49:28 - marks in the floating point so I can
49:31 - give this modulo F here and then after
49:34 - this modulo I can just give the mark So
49:37 - 92.5 and then press enter and you can
49:41 - see it prints the marks now one more
49:43 - little thing which we can do here is we
49:46 - can limit the number of decimal values
49:48 - which we want to see after this point so
49:51 - we can write the same printf function
49:54 - and same argument and in order to limit
49:58 - the number of digits after the decimal
50:01 - you just need to write after F Dot and
50:05 - some number for example 2 oops I do not
50:08 - want to see this output I wanted to see
50:11 - the output after the decimal value so
50:15 - once again I think this should be this
50:18 - point should be before F so I just need
50:21 - to write Dot and 2 before F I think and
50:25 - then press enter and now it limits the
50:28 - number of digits after this decimal
50:31 - point now the last thing I want to show
50:33 - here is how you can allow the user to
50:37 - provide some input so for example I will
50:39 - declare a variable called value and then
50:43 - I can use equals and then I am going to
50:45 - use a inbuilt function which is called
50:48 - input so input is also an inbuilt
50:52 - function which allows you to take user
50:54 - input so here I can just write as the
50:58 - first argument and then I will provide
51:00 - this colon here and that's it you just
51:03 - need to press enter here and now you can
51:05 - see this terminal is asking us the same
51:08 - question which we have written here so
51:11 - let us say I just provide 50 here and
51:13 - then press enter Then what is going to
51:15 - happen is this 50 is going to be
51:19 - assigned to this variable which is value
51:22 - so now when you just use this value
51:26 - variable you can see this 50 is assigned
51:29 - to this value variable you will also see
51:32 - that this 50 is a string and not a
51:35 - number right because it's enclosed in
51:39 - single quotes so how you can assign 50
51:42 - to this value using the user input so
51:46 - what we can do here is once again I'm
51:48 - going to use this value variable and
51:52 - what we can do here is we can type cast
51:55 - the output of input so you can just
51:58 - write int and then here inside the
52:02 - parenthesis you can just write and now
52:04 - when I press enter and provide 50 and
52:07 - then press enter and see the value now
52:10 - it's an integer right so you can type
52:13 - cast the output of this input function
52:15 - which provides us the string and this
52:19 - int method is going to convert the
52:22 - string into an integer and then give us
52:25 - the result instead of this end you can
52:27 - also use a float keyword here so let me
52:30 - show you this example also so I am going
52:33 - to just copy this and paste it here and
52:36 - instead of using the int I am going to
52:39 - just write float here okay and then
52:43 - press enter and I'm going to provide
52:45 - this time 100 here and then press enter
52:47 - and then I'm going to just print the
52:50 - value of the value variable and now it
52:54 - prints the answer in floating points so
52:57 - this is how you can use print function
52:59 - to print the output on the console and
53:02 - input function to take the input from
53:05 - the user in this video we will discuss
53:07 - about built-in functions and modules in
53:11 - Python so the python interpreter has a
53:15 - number of built-in functions modules and
53:18 - type that are always available that
53:21 - means you can use them at any time and
53:24 - we have already used some of the
53:26 - built-in functions in Python so first of
53:29 - all we have used the print built-in
53:32 - function we have already used the input
53:35 - built-in function we have already used
53:37 - the int which is used to type cast a
53:41 - float or a string into an integer right
53:44 - we have already used a built-in function
53:47 - called float which is used to convert an
53:50 - integer to a float value or a string to
53:53 - a float value now python has a list of
53:56 - these inbuilt function and you can find
53:59 - this list by going to the python.org
54:02 - website and then clicking on the docs
54:06 - section and you can choose the version
54:08 - you have installed so we have installed
54:10 - the latest version which is 3.7.0 and
54:14 - you can even choose your language which
54:17 - are available here now when you click on
54:19 - this link which says Library reference
54:21 - and says you will be able to see this
54:23 - page which says python standard library
54:25 - and then when you scroll down here you
54:28 - will be able to see the introduction
54:30 - about Python and the second section here
54:32 - is about built-in functions so I'm going
54:35 - to click on this built-in function link
54:37 - and here you will be able to see all the
54:40 - built-in functions in Python so this is
54:43 - the list of all the built-in functions
54:45 - which you can use in Python and if you
54:49 - want to know more about these functions
54:51 - for example I want to know what this Max
54:54 - function does I can click on this
54:56 - function and then you can get the help
54:58 - about this function so what this
55:01 - function does and how it can be used in
55:03 - Python all the information is given here
55:08 - now let's go to the terminal and let's
55:10 - see how we can use some of these
55:13 - built-in functions so first of all how
55:15 - you can list out all these built-in
55:17 - functions and types in a python there is
55:21 - a built-in function to list out all the
55:23 - built-in functions and types which is
55:26 - dir and then double underscore and then
55:30 - you write build ins and then once again
55:33 - double underscore and then close the
55:35 - parenthesis and then press enter and
55:38 - it's going to give you the list of all
55:40 - the built-ins available in Python so for
55:43 - example from this list we have already
55:45 - used this function called float print
55:48 - and then we have already used this
55:50 - function int and input also so let's use
55:53 - some more functions so in the previous
55:55 - videos I have shown you how to calculate
55:57 - the power of a number so you use these
56:01 - double asterisks in order to calculate
56:03 - the power of any number and you can see
56:06 - you get the power of 2 to the power 10.
56:09 - now python also have a built-in function
56:12 - called pow here you can give as a first
56:16 - argument the number and as the second
56:19 - argument you can provide a number which
56:21 - you want to use as a power and when I
56:23 - press enter it gives me the same result
56:27 - let's use some other built-in function
56:29 - for example Len Len you can use to find
56:33 - out the length of any string so I can
56:36 - write LEM and inside the parenthesis I
56:39 - can just write any string here for
56:42 - example hello and it will give me the
56:44 - length of the string so this string
56:47 - hello have five letters inside it that's
56:50 - why it's giving me length 5. now there
56:53 - is a built-in function called help using
56:56 - which you can get some help about any
56:59 - function so I can write help here and
57:02 - inside the parenthesis I can just write
57:06 - the function name so for example I want
57:08 - to know what this Max function does so I
57:12 - can just write Max here and then press
57:14 - enter so it gives me the signature of
57:16 - Max so how it's used and then it will
57:19 - provide me some description about the
57:21 - function so what it does so you can see
57:24 - here it Returns the biggest item right
57:27 - so I can just write Max here and inside
57:30 - the parenthesis I can give the list of
57:33 - items here for example 1 2 8 9 4 and 5
57:40 - and when I press enter it's going to
57:42 - give me the maximum value out of this
57:45 - list so you can use this help built-in
57:48 - function in order to know more about all
57:50 - the other built-in functions now till
57:52 - now we have talked about the built-in
57:55 - functions which are available in Python
57:57 - now let's talk about some of the
57:59 - built-in modules which are available in
58:02 - Python now what is a module I'm going to
58:05 - describe in the later videos but for now
58:08 - let's see how to import a built-in
58:10 - module in Python and how to use them so
58:14 - there is a built-in module called math
58:16 - and to import it you just use a keyword
58:19 - called import and then the module name
58:24 - for example math and press enter and
58:27 - it's going to import this module into
58:30 - our interpreter now you can use this
58:34 - math keyword and then you can write Dot
58:37 - and wait for some seconds and you can
58:39 - see it gives me all the list which are
58:42 - available inside this math module so let
58:46 - us say I want to find out the square
58:47 - root of any number I can use a function
58:51 - called s q r t here and then this gives
58:56 - me the square root of a number so for
58:59 - example I want to find out the square
59:01 - root of 100 and then press enter it
59:04 - gives me the answer 10. now once again
59:07 - as I said you can use a built-in
59:09 - function called help in order to know
59:11 - the signature of this function so I can
59:14 - just write math dot SQ RT and then press
59:19 - enter and it's going to give me some
59:21 - help about this function so you can see
59:24 - it Returns the square root of x and the
59:27 - signature looks like this now if you
59:30 - want to print all the methods and tiles
59:33 - available inside this built-in module
59:36 - you can once again use this built-in
59:39 - function dir and then in the parenthesis
59:42 - write the name of the module so this
59:45 - time we will write math here and then
59:47 - press enter and it gives me the list of
59:49 - all the available
59:51 - functions available inside this math
59:54 - module and you can see all these
59:57 - functions which are available inside
59:58 - this module so you can just use a COS
60:01 - function from here Pi function from here
60:04 - radians or tan function from here so
60:07 - this is how you can use built-in
60:09 - functions and modules in Python in this
60:12 - video I'm going to show you how you can
60:14 - write your first python script in the
60:17 - form of dot py file and execute it
60:21 - but not just by idle but I am going to
60:25 - show you various different ways you can
60:28 - execute this python file which you will
60:31 - create so let's get started so first of
60:33 - all I'm going to show you how you can
60:35 - create your python file using idle so
60:38 - first of all open your idle IDE and just
60:41 - go to file here and you will be able to
60:45 - see this option here which says new file
60:48 - and then you will be able to see this
60:50 - kind of window opens which is a python
60:53 - file editor now first of all we are
60:56 - going to save this file so let's save
60:57 - this file you can save this file at any
61:01 - directory or any path wherever you want
61:04 - so for this first file I am going to
61:06 - name it as Hello dot p y so dot p y is
61:10 - the python extension and hello is the
61:13 - name of our file so I'm going to save
61:16 - this file first of all and you can see
61:18 - it saved at my desired location
61:20 - so in this file let's write some python
61:24 - code so let us say I want to create a
61:26 - program in which I will ask the user to
61:29 - input three numbers and as the output I
61:32 - want the maximum out of these three
61:35 - numbers which is inputted by the user so
61:39 - how can I do this so as we have already
61:41 - seen you can define a variable in Python
61:44 - like this so I'm going to Define a
61:46 - variable X is equal to and we also know
61:49 - that there is a inbuilt function in
61:52 - Python called input to take the user
61:54 - input and then in the double quotes so
61:56 - we are going to ask the user that he
61:58 - needs to enter the first number so enter
62:02 - first number and in a similar way I am
62:05 - going to ask the user to enter the
62:07 - second number and the third number let
62:10 - me change the variable name here so
62:12 - instead of X this variable will be Y and
62:15 - the last variable will be Z and this is
62:19 - the third number and this is the second
62:23 - number but when I write the input like
62:26 - this this may give us some problem the
62:29 - problem is input function gives us a
62:33 - string and we need to convert the string
62:36 - into a integer or a float so let us
62:41 - convert this number into a float values
62:46 - so you can use another inbuilt function
62:48 - which is float and then this string will
62:53 - be converted to float so I am going to
62:55 - do the same for other two numbers now in
62:59 - order to get the maximum numbers out of
63:01 - these three numbers we have seen there
63:03 - is a inbuilt function in Python which is
63:06 - called Max and we are going to use this
63:09 - Max function but first of all we need to
63:12 - print something so we will just write
63:15 - the max value is and then we can
63:20 - calculate relate the maximum value and
63:22 - print it from here so we can use this
63:24 - comma and then we can use this inbuilt
63:27 - function which is Max and then we will
63:30 - just pass these three values which is X
63:33 - Y and Z so will this program work let's
63:37 - see so first of all before doing
63:40 - anything you need to once again save
63:43 - this file okay so right now you can see
63:46 - there is a little asterisk symbol here
63:50 - in front of my file which means my file
63:53 - is not saved so you need to first of all
63:56 - save your file and then you will see
63:58 - this Asterix is gone that means our file
64:01 - is saved so let's run our code so if you
64:04 - want to run this python file using your
64:08 - idle IDE you just need to click on the
64:12 - Run button here and then choose the
64:15 - third option which says run module so I
64:18 - am going to click on run module
64:20 - and after some time you will be able to
64:23 - see this output printed on the idle IDE
64:28 - so it says enter the first number which
64:31 - we have written in our code you can see
64:34 - this line is executed first of all so we
64:38 - will enter some number I am going to
64:40 - just write 50 here and then press enter
64:42 - and then it asks us to provide the
64:45 - second number so let us say this number
64:48 - is 90 and now we need to give the third
64:52 - number so I am going to just give 1 0 1
64:55 - here and then press enter and it says
64:58 - the max value is 1 0 1 which is correct
65:02 - but in real world you will not have this
65:06 - idle IDE installed everywhere
65:09 - so how can I run my hello.py file so I'm
65:14 - going to minimize this idle IDE for now
65:18 - and I am going to go to the location
65:20 - where I have saved this Hello dot py
65:23 - file okay so just go to the location
65:26 - where you have saved your Hello dot py
65:29 - file and now you just need to double
65:32 - click on this Hello dot py file so I am
65:36 - going to just double click on this
65:37 - hello.py file and you can see as soon as
65:41 - I double click on hello.py it opens this
65:46 - program in our terminal okay so once
65:49 - again I am going to close this terminal
65:51 - and I am going to double click on my
65:54 - hello.py file and it opens our program
65:58 - in our terminal so once again I'm going
66:01 - to give three inputs here let us say 1 1
66:04 - 0 enter 55 enter 200 and enter as soon
66:11 - as you press enter this window
66:14 - disappears so why this window disappears
66:17 - because after the execution of your
66:19 - program this terminal immediately closes
66:22 - so we need to provide something in our
66:25 - program in order to avoid the closing of
66:28 - this terminal and how we can do this we
66:31 - can do this using our input method which
66:35 - is a inbuilt method right and here we
66:38 - can just type press
66:41 - any
66:42 - key
66:44 - to exit so what will happen here is
66:47 - after printing the result your terminal
66:50 - will wait for the user input and once
66:54 - the input is given by the user then only
66:57 - the terminal will exit so let's test our
67:00 - program once again but before this don't
67:03 - forget to save this program so I am
67:05 - going to just save my program and then I
67:07 - am going to open the folder where I have
67:10 - saved this hello.py file and once again
67:13 - I'm going to double click on this hello
67:16 - Dot py and I'm going to give three
67:19 - numbers here
67:21 - and then I am going to press enter and
67:23 - it prints 99 which is the maximum out of
67:26 - three numbers
67:28 - and at last it asks us to press any key
67:31 - so I am going to press any key for
67:33 - example Z and then press enter and this
67:37 - terminal disappears so now the question
67:39 - is how does this python file is executed
67:44 - without compiling this file so the
67:48 - answer of this question I have already
67:50 - given in the introduction video and the
67:53 - answer is python is a interpreted
67:57 - language and not the compiled language
68:01 - so what happens in normal languages like
68:04 - Java C plus plus C you have a source
68:08 - code and this source code you need to
68:11 - compile in order to convert this source
68:14 - code into an executable file for example
68:18 - you have a hello.java file you need to
68:21 - compile this Java file in order to
68:24 - convert it into a Hello dot class file
68:27 - which is a x executable file and when
68:30 - you run this hello.class file hello
68:32 - world or whatever program you have
68:34 - written will be executed
68:36 - now in the case of python because it's a
68:39 - interpreted file you just need to create
68:42 - this Hello dot py file and you just need
68:46 - to run it you don't need to compile this
68:48 - file and that is the difference between
68:50 - interpreted languages like Python and
68:54 - the compiled language like Java C plus
68:57 - plus or C now there is one more way
68:59 - using which you can run your python file
69:02 - and that is by using your command prompt
69:06 - so I'm going to open my command prompt
69:08 - I'm going to right click on this Windows
69:11 - icon and then I'm going to open this
69:14 - command prompt from here so make sure
69:16 - that this command prompt is able to
69:19 - understand this python command so first
69:22 - of all type python on your command
69:25 - prompt and then press enter and if it
69:28 - shows you this output like Python and
69:30 - the version of python then python is
69:33 - working on your command prompt so this
69:36 - command prompt is Windows command prompt
69:38 - and not the python shell which we have
69:42 - installed so this is a Windows command
69:45 - prompt right now let me make this
69:47 - terminal little bit bigger so we will be
69:50 - able to see what I'm typing so I'm going
69:53 - to change the font size to let's say 24
69:56 - here so now we will be able to see
69:59 - what's happening you can just write quit
70:02 - and then these two parentheses and then
70:05 - press enter and you will come out of
70:08 - this command prompt so you need to come
70:10 - out of your command prompt in order to
70:13 - execute your python file now in here
70:16 - what you need to do is you need to copy
70:19 - the path of your python file so I am
70:23 - going to right click here and then go to
70:25 - the properties and then in the
70:26 - Securities I'm going to just copy full
70:29 - path of this python file up to dot
70:33 - python okay so I have copied full part
70:37 - of this python file and now what I need
70:40 - to do is I need to just write python
70:42 - here okay so just write Python and then
70:46 - paste the path which you have copied so
70:49 - I am going to just paste the path which
70:51 - I have copied and then press enter and
70:54 - you can see our program is executed so I
70:57 - am going to just give quickly three
71:00 - numbers and it gives us the maximum of
71:03 - these three numbers now I will just type
71:05 - any letter here and then press enter and
71:08 - I will come out of this terminal
71:11 - there is one more way of executing your
71:15 - file and this is you need to just give
71:18 - this command which is CD and then your
71:21 - directory path so up to your directory
71:24 - you just need to copy this path from
71:27 - here okay so you just need to copy this
71:29 - path and then after CD you just need to
71:32 - give space and then paste this path
71:35 - without your Hello dot py file okay so I
71:40 - haven't given the Hello dot py file name
71:43 - here and now press enter which will
71:46 - change your directory to your python
71:50 - directory so now we are inside our
71:53 - python directory from here you can
71:56 - directly give Python and the name of
71:59 - your file which is Hello dot py and then
72:02 - press enter and once again the program
72:05 - opens so we can just give three inputs
72:08 - here and the result is shown once again
72:11 - I am going to just type any key or any
72:13 - letter here with for example R and then
72:16 - press enter and now I'm out of this
72:19 - program so this is how you can run your
72:21 - python script on any terminal you don't
72:24 - need any IDE or any other special
72:28 - software in order to run your python
72:31 - script you can run it on your terminal
72:34 - or directly click on the python file
72:37 - till now we have been using idle IDE in
72:41 - order to develop our python code now the
72:44 - reason behind why I was showing to code
72:48 - in Python using idle in the first few
72:51 - videos because I wanted that you get
72:54 - familiar first with python interpreter
72:58 - so now whenever you want to test some
73:01 - functionality in Python you don't need
73:03 - to open any IDE or any editor you can
73:07 - just open your terminal and then test
73:10 - that functionality until you wanted to
73:13 - test something terminal or python
73:16 - interpreter was okay but when you want
73:19 - to develop a big project using python we
73:24 - need to use some kind of IDE
73:27 - stands for integrated development
73:30 - environment in order to develop such
73:33 - kind of projects so in this video I am
73:36 - going to show you how to install pycharm
73:39 - on your Windows 10 operating system
73:41 - which is the most popular IDE today used
73:45 - by developers to develop python code so
73:49 - let's get started and let's see how we
73:51 - can install pycharm on our Windows 10
73:54 - operating system so open your favorite
73:57 - browser and search for pycharm and the
74:00 - first link which will appear here will
74:02 - be from
74:03 - jetbrains.com forward slash pycharm so
74:07 - jetbrains is the company behind this IDE
74:11 - and this company which is jet brains is
74:13 - famous for making very good Ides so jet
74:18 - brains has also created some other Ides
74:20 - like Android Studio IntelliJ IDEA
74:24 - webstorm and many other Ides which are
74:27 - popular between developers nowadays
74:30 - so we are going to just click on this
74:32 - link so now we are inside this
74:34 - chadbrains.com website and here you will
74:37 - be able to see this logo pycharm and you
74:41 - will be able to see this download button
74:43 - here so I'm going to click on this
74:45 - button which says download now and then
74:48 - you will be redirected to this page
74:50 - which is for downloading pycharm so here
74:54 - you can select your platform whether you
74:56 - are working on Windows or Mac or Linux
75:00 - and what we want to download is we want
75:03 - to download the community version of
75:05 - pycharm this community version you can
75:08 - see is free and open source so you can
75:11 - download and install it with no cost if
75:15 - you want to download the professional
75:17 - version then you need to pay some money
75:20 - to Jet brains in order to use it and as
75:24 - soon as you click on download button
75:26 - this download of pycharm community
75:29 - version Dot exe file will start so I
75:33 - will wait for this file to be downloaded
75:36 - so now this exe file is downloaded on my
75:39 - Windows operating system so I am going
75:40 - to double click on this exe file
75:42 - and I'm going to minimize the browser
75:44 - and now you can see pycharm setup wizard
75:47 - has been started so here you just need
75:50 - to click next and this is the location
75:52 - where pycharm will be installed on your
75:54 - system so it will be installed inside
75:56 - your C directory then program files
75:59 - jetbrains and then there will be a
76:02 - directory created which will be called
76:04 - pycharm Community Edition whatever
76:07 - version you have downloaded so I'm going
76:09 - to click next now on this next window
76:12 - you will see two options one is to
76:14 - create a shortcut so we are going to
76:17 - choose this option which says 64-bit
76:19 - launcher now the second option here is
76:22 - create associations and I am not going
76:25 - to check this checkbox because I don't
76:27 - want that on my computer every dot py
76:31 - file to be associated with the pi charm
76:35 - so I will leave this unchecked and the
76:37 - next option here is download and install
76:40 - the JRE
76:41 - x86 by jet brains there is no harm in
76:45 - this so I am going to check this check
76:47 - box and I am going to click next and now
76:49 - I am going to click on the install
76:51 - button
76:53 - so this is going to start installing
76:55 - pycharm on my Windows 10 operating
76:57 - system so I need to wait for some time
77:00 - until this installation is finished so
77:03 - now the installation of Pi charm
77:05 - Community Edition is finished on my
77:07 - Windows 10 operating system and you can
77:09 - also see there is a pycharm shortcut
77:12 - which is created on my desktop
77:15 - now I will check this checkbox which
77:17 - will start the pycharm IDE and I am
77:19 - going to click finish which is going to
77:22 - launch the pycharm IDE now for the first
77:25 - time when pycharm starts it will ask you
77:28 - this question whether you want to import
77:30 - any settings from the previous
77:32 - installation of pycharm we don't have
77:35 - any previously installed pycharm so we
77:38 - are going to just leave this as default
77:40 - which says do not import setting and
77:43 - then click OK and then you will see this
77:45 - license terms and conditions window if
77:48 - you agree with all these license terms
77:51 - and conditions then just click accept
77:53 - and one more window appears here which
77:56 - is for data sharing so I am going to
77:59 - just say don't send and now you can see
78:02 - pycharm IDE has been launched so for the
78:05 - first time it will ask you which UI
78:08 - theme you want to use you want to use
78:10 - the darkular which is the Dark theme or
78:13 - the IntelliJ theme which which is the
78:15 - light theme so I am going to choose this
78:17 - light theme which is intelligent theme
78:20 - and then I am going to just click on
78:22 - next and on this next window you will
78:24 - see some featured plugin so for now I'm
78:27 - not going to install any of the plugin
78:29 - I'm going to just say start using
78:32 - pycharm which is going to start the
78:35 - pycharm so now pycharm IDE has been
78:38 - started so let's create a new project
78:40 - here so I'm going to click on new
78:42 - project and now we need to give the
78:44 - title of this project and pycharm will
78:47 - ask you where you want to save this
78:49 - project so I am going to just give the
78:51 - name to my project so let's name our
78:54 - project as hello world and then I'm
78:58 - going to just click on create button
79:00 - which is going to create our python
79:03 - project so now you can see pycharm IDE
79:05 - has been started so you can see the
79:09 - first thing you will see here is tip of
79:11 - the day I am going to just close this
79:13 - tip of the day and I am going to
79:15 - maximize my IDE window and you can see
79:19 - our project is shown on the left hand
79:22 - side so let us create a python file and
79:25 - we are going to just run some code using
79:28 - this python file so we need to just
79:30 - right click on our project and then
79:32 - click on new and then choose a python
79:36 - file from here and now we just need to
79:38 - give the name to our python file for
79:40 - example hello without any extension so
79:43 - you don't need to provide any extension
79:45 - when you choose this option which says
79:48 - python file and now click OK and now you
79:52 - can see on the left hand side that this
79:54 - file is created which is Hello dot py
79:57 - this dot py extension is added by pi
80:01 - charm for us and now on this editor for
80:03 - example let's print hello world once
80:06 - again so I'm going to just print the
80:08 - hello world you already know how to
80:11 - print hello world right and once you
80:12 - have written your code you just need to
80:14 - save your code by pressing Ctrl s and
80:17 - now you can just right click on your
80:19 - file and choose this option which says
80:22 - run hello so I am going to just click on
80:25 - this option which says run hello and you
80:28 - can see this output is printed on this
80:31 - run window so this is how you can
80:33 - install pycharm on your Windows 10
80:36 - operating system in this video we will
80:39 - talk about using strings in Python but
80:42 - before that I want to show you something
80:44 - and that is how to comment your code in
80:49 - python or how to write a comment in
80:53 - Python so for example I have this line
80:56 - of code which is used to print hello
80:59 - world on Terminal now for some reason I
81:01 - don't want to execute this line of code
81:04 - then I can convert this statement into a
81:07 - comment and how do I do this you can
81:09 - just add an Asterix in front of your
81:13 - code and this makes your statement a
81:15 - comment a comment means that now this
81:20 - line of code will not be executed by
81:24 - python so let's run our code and let's
81:27 - see what happens so you can see now it
81:29 - doesn't print hello world because now
81:33 - this is a comment now generally we use
81:36 - comments in order to provide some
81:38 - information about some functionality or
81:42 - what we'd want to do with our code so
81:44 - let me remove this line and because it's
81:46 - a python strings video we can just write
81:49 - after this hash symbol python strings
81:53 - right and this means that this is a
81:56 - comment and this line will not be
81:58 - executed by the python interpreter now
82:01 - there is one more way of giving a
82:04 - comment in Python which is by writing
82:07 - the double quotes three times and this
82:10 - is also a comment so when you write for
82:13 - example python strings this is also a
82:17 - command so this will also not be
82:20 - executed by python interpreter so what
82:23 - is the difference between this hash
82:25 - comment and the comment with these three
82:29 - double quotes
82:31 - so it turns out that using these double
82:34 - quotes you can write multiple line
82:37 - comments so for example I want to write
82:40 - a multiple line comment let's say I want
82:42 - to write python string
82:45 - tutorial I can write this multiple line
82:48 - comment using these triple double quotes
82:51 - so let us get started and let's see how
82:54 - we can use strings in Python so I'm
82:57 - going to declare a variable and this
83:00 - variable I am going to assign hello
83:03 - World here right and to print this hello
83:07 - world we can just write print inside the
83:10 - parenthesis we can use this x variable
83:14 - and when we run the code it runs so we
83:16 - already know how to use this kind of
83:20 - string in Python the second way of
83:23 - creating a string is you can use the
83:26 - single quotes instead of double quotes
83:28 - and this is also a valid string so this
83:33 - will also work so let me just print this
83:38 - also which is Hello World using single
83:41 - codes and when I am going to run this it
83:45 - is going to give me the result
83:47 - let me remove the spaces between the
83:50 - print and these parentheses so let us
83:52 - say you want to add a single code into
83:55 - this hello world string so let us say I
83:58 - want to just write hello single quote s
84:01 - hellos world so this is totally possible
84:04 - in Python so whenever you surround your
84:07 - string using double quotes you can just
84:10 - add this single quote without any
84:12 - problem but when you do the same with
84:16 - this string this will give you a problem
84:18 - because now python thinks that your
84:22 - string starts from here and ends at this
84:26 - place just after hello and this will be
84:29 - seen as some kind of garbage by python
84:32 - so in order to use these single quotes
84:34 - inside the string which uses single code
84:37 - you use a Escape character and the
84:41 - Escape character in Python is backslash
84:45 - okay so when you add a back slash Dash
84:48 - in front of a character python
84:50 - interpreter knows that it's a Escape
84:52 - character so this will be treated as a
84:56 - valid string so let me just print the
84:59 - result and you can see it prints the
85:01 - same result now
85:03 - let's say I want to use a double quote
85:06 - in this string which uses double code
85:09 - already so I am going to just give a
85:12 - double quote here and the same problem
85:15 - arises which we have seen in the string
85:18 - with single code so to escape this you
85:20 - can also use backslash and the problem
85:23 - will be gone let us run the program and
85:26 - it gives us this hello world with double
85:30 - quotes so you can print this double
85:32 - quote using this Escape character which
85:36 - is backslash now let us say you want to
85:38 - print a string with a backslash itself
85:40 - so I can add a backslash here and I want
85:44 - to add a backslash here and let's save
85:46 - the code and let's run it and let's see
85:49 - if it runs or not so it turns out that
85:51 - you can use this kind of notation in
85:53 - Python also when you use double
85:55 - backslashes here and here let's see what
85:59 - happens so when we run the code it will
86:02 - give us the same result because one
86:05 - backslash is a Escape character and
86:08 - other backslash is the part of the
86:11 - string so it will print the same result
86:13 - so you can use this for escaping this
86:17 - character or you can remove this the
86:20 - result will be same so now let me edit
86:23 - these two strings and I am going to use
86:26 - hello here with the capital H and I'm
86:29 - also going to assign a hello to the Y
86:33 - variable with a small H here now python
86:37 - provides us some inbuilt functions which
86:40 - you can use with strings so this is a
86:42 - string right so you can use some methods
86:46 - related to strings on the X and Y
86:50 - variable so let's see what are these
86:53 - methods so after the X I can just press
86:56 - Dot and you can see so many suggestions
86:58 - is given to us by pi charm and this is
87:03 - called Intel Essence which is provided
87:05 - by pi charm to us and intellisense means
87:08 - that whenever you type something pycharm
87:12 - will try to suggest you some supporting
87:15 - code for whatever you are typing so
87:17 - let's use some method which are
87:19 - suggested to us so I'm going to use this
87:22 - capitalize method so let us use this
87:25 - capitalize method with the X and Y
87:27 - variable and let's see what happens so I
87:30 - am going to run the code and you can see
87:32 - now the upper string is printed same but
87:35 - the lower string is printed with a
87:38 - capital H in front of it so this
87:40 - capitalize method capitalizes the first
87:44 - letter of the string now lets see what
87:48 - are some of the other method which we
87:51 - can use so there is a method called
87:53 - upper and also there is a method called
87:57 - dot lower so let me just rewrite this
88:02 - hello in all capitals and let us run the
88:06 - code now and you can see in the result
88:08 - the upper method has converted our
88:11 - string into all upper letters and the
88:15 - lower method has converted our string
88:18 - into all lower letters now in Python
88:21 - everything is an object so using these
88:24 - square bracket you can extract each and
88:26 - every letter based upon their index so
88:29 - for example I write index 0 here and in
88:33 - the Y I am going to use the same square
88:36 - bracket and I am going to write 1 here
88:39 - which is the index 1 and let me run the
88:41 - code and it prints the first character
88:44 - of the string because it at index 0 and
88:48 - here you can see the second character of
88:51 - the string which is at index 1. so
88:54 - always remember indexes starts from 0
88:56 - not from one now in Python you can also
88:58 - get the sub string out of a string so
89:02 - here inside these square brackets I can
89:05 - just write that I want a substring out
89:08 - of this complete string first three
89:12 - letters of this string so I can just
89:15 - start from 0 and I can just say I just
89:18 - want to stop at 3 that means we will get
89:23 - I think the first three character of the
89:25 - string also let me add some spaces into
89:28 - the second string here and in Python
89:31 - there is a method called strip so I am
89:35 - going to just use this strip method and
89:37 - let us run the code first of all and
89:39 - let's see what happens
89:40 - so you can see first of all this print
89:43 - has printed first three letter of this
89:47 - string so you can see this notation
89:49 - means that we are telling python to give
89:52 - a substring starting from 0 until 2
89:57 - until the index 2 okay and we are saying
90:00 - that we want to stop at index 2 that is
90:04 - why we write 3 here now if you want to
90:07 - just print h e l l we can write here 0
90:11 - to 4 and then we can run the code and
90:15 - then we get h e l l if you want to get
90:19 - only e l l you can write 1 to 4 here and
90:24 - then it will give you e l l out of this
90:28 - string and this is how you can strip
90:30 - your string so strip means the spaces
90:33 - from the start and end will be stripped
90:36 - of this string now let me show some
90:38 - other method related to the strings so
90:42 - first method I want to show here is
90:44 - there is a method called is lower and
90:48 - then there is a method called is upper
90:53 - and then there is a method called dot
90:57 - replace which is used to replace some
91:01 - character inside the string so let us
91:03 - say I want to replace Capital H by let
91:07 - us say J and the last method I want to
91:10 - show is how to split the string but that
91:13 - we will see in a moment so let us run
91:15 - this code and the first result says
91:18 - false because this string is not lower
91:22 - when we write all letters in lower case
91:26 - then only it will give us true otherwise
91:29 - this method is lower will give us false
91:32 - now let us rerun the code and now it
91:35 - gives us true because now every letter
91:38 - in the string is lower second method
91:41 - gave us true because we were checking
91:43 - whether every letter in this string is
91:46 - capital or not the next method replace
91:49 - is used to replace the character if it
91:52 - is there in your ring and replace it
91:55 - with this character if this character is
91:58 - found in your string so this Capital H
92:01 - is not present in our string right so
92:05 - let us just add this Capital H into our
92:09 - string and let's see what is the result
92:11 - so now the capital H is replaced by
92:15 - capital J here in the result the next
92:18 - method which you can use with the string
92:20 - is a split method so you can write y Dot
92:24 - split and this is used to split your
92:28 - string using any character so I am going
92:31 - to once again write hello comma
92:35 - World here and I want to split this
92:38 - string using this character which is
92:41 - comma so I can just write using single
92:44 - quote this comma and once I run the code
92:48 - you can see it gives us an array of two
92:51 - members one is hello and other is world
92:54 - with a space right because we have
92:57 - splitted our string using this character
93:00 - that is why the space is here right so
93:03 - that is why you can see this space here
93:06 - also in the second element of this array
93:09 - so there are number of methods which are
93:11 - associated with string which you can use
93:13 - and for knowing all these method you
93:16 - just need to write your variable which
93:18 - contains a string and then just write
93:21 - Dot and you will be able to see the
93:23 - suggestions which you can use with the
93:27 - strings so you can use the title method
93:29 - for example or you can use the translate
93:32 - method or you can use use all these
93:36 - method which are available here okay so
93:39 - just see all these suggestions and see
93:41 - what you can use from these method also
93:45 - if you don't have any variable in which
93:48 - you have assigned your string you can
93:50 - directly take your string for example
93:51 - hello and then you can just write dot
93:54 - after this hello and once again you will
93:56 - see all the suggestions because this
93:59 - hello is also a string let me show you
94:02 - one last thing which you can use with
94:04 - string very quickly so you can write
94:06 - print here and then if you want to print
94:09 - this hello for example 10 times how will
94:13 - you do this so you can just write for
94:15 - example X comma X comma X this is how
94:20 - you can do this let's say you want to
94:22 - print this hello hundred times how you
94:25 - can do this so there is a trick in
94:28 - Python which you can use and this is
94:30 - using these asterisks you can print the
94:34 - string multiple times so for example I
94:37 - want to print this hello 10 times I can
94:40 - just write my string variable name
94:42 - Asterix the number of time I want to
94:45 - iterate this string so let me run the
94:48 - code and you can see now this hello is
94:52 - printed 10 times let me provide the
94:54 - space here so there will be a space
94:57 - between the two Hollows right let us say
95:00 - I want to print hello hundred times then
95:03 - I can just write 100 here and then run
95:06 - the code and it will print this hello
95:09 - hundred times on the terminal so this is
95:12 - how you can use strings in Python in
95:15 - this video we will talk about the
95:17 - Boolean values comparison operators and
95:21 - The Logical operators in Python
95:24 - so first of all what is a Boolean value
95:27 - so in Python Boolean values are two
95:31 - constant objects which are true and
95:35 - false
95:36 - now for this demonstration I will be
95:38 - using a python interpreter and in
95:42 - pycharm you can open the python
95:44 - interpreter by going down at the bottom
95:48 - and you will be able to see this option
95:51 - which says python console so just click
95:55 - on this python console option which is
95:58 - going to open the python console and you
96:02 - can move this bar up and down in order
96:05 - to expand your console right so let me
96:10 - just clear this console so we will start
96:13 - from the top so in order to clear this
96:16 - console you can right click and then
96:18 - just say clear all and it's going to
96:21 - clear the console and let me resize this
96:24 - console up to the top and let me just
96:28 - minimize this section also so as I said
96:31 - Boolean in Python are two constants
96:34 - objects which are true true and false so
96:37 - how you write true and false in Python
96:40 - you write true with a capital T
96:44 - and press enter this is a true value and
96:48 - false you write with a capital false
96:51 - this is a false value now if you write
96:54 - true with small T this is not recognized
96:58 - by python also when you write false with
97:03 - small F this is also not recognized by
97:06 - python now generally we use Boolean
97:09 - values in order to find out the result
97:12 - of some condition now let us say you
97:15 - have two numbers and you want to find
97:17 - out which number is greater out of these
97:21 - two numbers you can use a comparison
97:23 - operator to compare these two numbers
97:26 - and the result will be shown as a
97:30 - Boolean value now the next question
97:32 - arises what is a comparison operator
97:36 - so in Python these are some of the
97:40 - comparison operators you can use so you
97:43 - can use this double equals to check the
97:47 - equality between two values you have
97:51 - this not equal operator with this
97:54 - exclamation mark and equals which you
97:58 - can use to check the non-equality
98:00 - between two values there is a greater
98:03 - than operator and there is a less than
98:05 - operator and also there is a greater
98:08 - than equals operator and the less than
98:10 - equals operator now examples of each of
98:13 - these operators I have given here so how
98:16 - to use these operators as I said if you
98:18 - have two values let's say two integers X
98:22 - and Y to compare these two integers
98:24 - whether they are equal or not you write
98:27 - on the left hand side first variable and
98:31 - on the left hand side second variable
98:33 - and in between you use the comparison an
98:37 - operator it can be equal to operator or
98:40 - non-equality operator or greater than or
98:44 - less than or greater than equals or less
98:47 - than equals operator so let's see how we
98:50 - can use these operators in real python
98:53 - environment
98:55 - so let's say I want to check whether 10
98:58 - is greater than 9 or not and when I
99:02 - press enter it's going to give me true
99:05 - because 10 is greater than 9. now once
99:08 - again let's check if 10 is less than 9
99:12 - or not and it will give me a false value
99:15 - which is also a Boolean result also we
99:18 - can check equality between two values so
99:21 - we can just write 100 is equal to 100 or
99:26 - not and it will give us true once again
99:29 - we can check if 100 a is equal to 99 it
99:32 - will give us false in the same way you
99:35 - can also check for the non equality so
99:37 - for non equality you use this
99:39 - exclamation mark equals and then press
99:42 - enter it will say true because 100 is
99:47 - not equal to 99 the same operation you
99:51 - can also perform with some variable so
99:54 - let us say I have a variable called X
99:56 - whose value is 20 and I have a variable
100:00 - called Y and I assign 30 to it and let's
100:04 - say I want to check whether the value in
100:07 - the x is greater than or equal to the
100:10 - value which is there in y then I can
100:13 - write this kind of a statement and when
100:16 - I press enter it's going to give me
100:18 - false because 30 is not greater than or
100:24 - equal to X so let's assign a value which
100:28 - is 30 into our variable X
100:32 - and now let's check whether X
100:37 - and now let's check whether X is less
100:41 - than or equal to y or not and when I
100:45 - press enter it's going to give me true
100:47 - because we know that X which is 30 is
100:53 - not less than y but it's equal to Y and
100:58 - this condition is true now you can also
101:01 - compare two strings using these
101:04 - operators so let's say I have a string
101:06 - called hello and I want to check whether
101:10 - the hello value is equal to some other
101:13 - value for example hello in double quotes
101:16 - or not and it will return me true that
101:20 - means whether you write hello in single
101:22 - code or hello in double quote both these
101:26 - values are same in Python now also we
101:29 - have seen in the last video where we
101:31 - have seen how to use strings that
101:34 - whenever for example I write a string I
101:37 - can use this dot operator in order to
101:41 - call some functions related to Strings
101:43 - so some of these functions returns a
101:47 - Boolean value so for example we can
101:49 - check whether this hello all letters are
101:52 - in uppercase or not and once I press
101:54 - enter it says false or I can check
101:57 - whether in this hello all letters are in
102:02 - lower case or not this will give me true
102:04 - or I can test whether in this hello
102:07 - string all letters are alphabets or not
102:12 - this is going to give me true because
102:15 - all letters are alphabets now if I check
102:19 - whether in the string whether there is a
102:22 - alpha numeric value or not I can use
102:25 - this method which says is Al num and
102:29 - this will check whether in my string
102:30 - there is a alpha numeric value or not
102:32 - now the next question you may ask is for
102:35 - example I want to evaluate evaluate two
102:38 - conditions at the same time let us say I
102:41 - want to evaluate whether 10 is greater
102:46 - than 9 and I want to evaluate whether 20
102:50 - is less than 15 or not so how can I
102:56 - evaluate these two conditions at the
102:59 - same time so for those type of
103:01 - comparison we use that logical operators
103:04 - and there are three logical operators
103:06 - which we can use in Python an end
103:10 - operator
103:11 - an or operator and a not operator
103:16 - so this end operator you can use to
103:20 - evaluate two conditions and it will
103:22 - return true only if both conditions are
103:26 - true okay so let's say you have two
103:30 - conditions X condition and Y condition
103:33 - then if you use this and operator then
103:38 - in order to get true out of these two
103:40 - conditions both conditions have to be
103:43 - true in the case of or it will return
103:45 - true if one of these conditions is true
103:50 - so whether X is true or Y is true it
103:54 - doesn't matter but if only one condition
103:56 - is true this will give us true value and
104:00 - the not operator will return the
104:02 - opposite of what we have so if some
104:06 - condition returns us true then when we
104:10 - use not operator then not operator will
104:13 - make this false so let's try all these
104:16 - three of operators in Python so I said I
104:20 - can use an end operator to check whether
104:23 - this value is true as well as this value
104:27 - is true or not so when I press enter it
104:30 - returns as false because even though the
104:34 - first condition is true which is 10 is
104:36 - greater than 9 but the second condition
104:38 - is not true right so in case of end both
104:43 - conditions should be true in order to
104:46 - get the True Result once again when I
104:49 - use the same conditions and instead of
104:51 - end I use the or operator it will return
104:55 - me true because one of these conditions
104:58 - is true which is 10 is greater than 9
105:01 - even though the other condition is false
105:04 - now let's say we make both conditions
105:06 - true and we use R and when we press
105:09 - enter it's going to still returns us
105:12 - true so the minimum requirement of or is
105:15 - there should be at least one condition
105:18 - which evaluates to true now let's see
105:21 - how we can use the not operator so I can
105:24 - write not and then I can check whether
105:27 - 10 is
105:29 - greater than 9 or not and when I press
105:33 - enter it returns as false because we
105:36 - know that 10 is greater than 9 and not
105:40 - makes it false so it returns us false
105:43 - once again if we check whether 10 is
105:47 - less than 9 or not it's going to return
105:49 - this true because 10 is not less than 9
105:55 - and this condition will return false and
105:58 - not will make it opposite which is true
106:02 - so in this way you can use Boolean
106:04 - values comparison operators and logical
106:07 - operators in Python in this video we
106:10 - will learn how to use if else statements
106:13 - in Python
106:14 - so first of all what is a if statement
106:18 - so a if statement is used to execute a
106:22 - statement or a block of code if and only
106:26 - if a condition is fulfilled
106:29 - so first of all let's see the syntax of
106:33 - if statement
106:35 - so let's say I declare a variable called
106:38 - X whose value is 100 and then I am going
106:42 - to check whether the value in X is equal
106:45 - to 100 or not
106:47 - so I can use this keyword if and then if
106:51 - you have seen the last video in which I
106:53 - have shown you how to use comparison
106:55 - operators and logical operators then you
106:58 - will know that for equality we use a
107:03 - double equal symbol and then I'm going
107:06 - to just check it against 100. now after
107:09 - the condition you need to give this
107:11 - colon in order to tell python that this
107:14 - condition is finished and you need to
107:17 - press enter and you will see that there
107:21 - is a indent given to our code and you
107:25 - can see this cursor is here which is
107:28 - four spaces away from this start or one
107:33 - tab away from the start and here I can
107:36 - just for example print the value of x so
107:41 - I can just say x is
107:44 - equal to and then after the comma X and
107:49 - let me save this code and run this code
107:51 - and you can see on the Run window here x
107:54 - is equal to 100 is printed because this
107:58 - condition which we are checking using
108:00 - the if statement is true which means
108:03 - whatever code or statement or block of
108:05 - code you will write under if it will be
108:10 - printed
108:11 - let us say this condition is not
108:14 - fulfilled so I am going to just say that
108:17 - X is not equal to 100 which is a false
108:21 - condition and when I run the code now it
108:24 - doesn't print anything because this
108:27 - condition is not fulfilled and that's
108:30 - why this statement is not executed now
108:34 - let us talk about the indentation little
108:36 - bit
108:37 - so indentation in Python is the way of
108:40 - marking a block of code so you can see I
108:45 - have given four spaces indentation here
108:48 - so one two three four or if you are
108:51 - using pi charm when you press enter
108:53 - after an if condition you will see that
108:57 - automatically this cursor is pointing
108:59 - here which is four spaces away from the
109:02 - starting point so this means that
109:05 - whatever you write after these four
109:07 - spaces or a tab is the part of this if
109:11 - statement
109:13 - now if you are familiar with C or C plus
109:16 - plus this indent acts like a curly
109:19 - bracket in C or C plus plus so in Python
109:22 - you don't use the curly bracket to
109:25 - define a block of code you use
109:28 - indentation to define a block of code so
109:31 - I can write this statement like this
109:33 - also so I am going to just say x is
109:37 - equal to and in the next line I can just
109:40 - give one more print function and I will
109:43 - print X from the next line and you can
109:46 - see here also I have given indentation
109:49 - after this starting point and this means
109:52 - that these two lines are the part of
109:55 - this if statement so let me change the
109:58 - value of x is equal to 99 and when I run
110:00 - the code it will print X is equal to and
110:04 - in the next line it prints 99 using this
110:08 - line of code so you may ask what happens
110:10 - when I will write this print function
110:15 - here and let us say we want to print
110:17 - finish here
110:19 - okay and let me run the code and let's
110:22 - see what happens so it prints finish now
110:25 - let me just change this condition and I
110:28 - am going to just say 100 here and let's
110:30 - see what happens now
110:32 - so now only finish is printed because
110:36 - this line of code is not the part of if
110:40 - condition only statement which you write
110:43 - after four spaces will be the part of
110:47 - the if condition like this line and this
110:49 - line of code but if you don't give any
110:51 - indentation here that means that this
110:55 - line of code is not the part of the if
110:58 - statement now let us take another
110:59 - scenario and this time I want to check
111:02 - whether the value of x is a positive
111:06 - value or a negative value so I will
111:09 - start from here and I will give one more
111:12 - if statement here and I will just check
111:14 - whether X is greater than 0 or not and
111:19 - then give this colon to indicate python
111:22 - that I have finished this condition and
111:25 - then if it is greater than 0 then I am
111:29 - going to print that X is positive now if
111:33 - X is not positive and if it has a
111:37 - negative value I need to somehow print
111:39 - that X is a negative value and for this
111:44 - you use a else statement so here you can
111:47 - write else and once again you need to
111:50 - give the colon here and then under this
111:54 - else statement once again you provide
111:56 - four spaces or a tab indent and you can
112:00 - once again write print and this time we
112:04 - can write X is negative this means
112:07 - whenever
112:09 - this condition is false and if and only
112:13 - if this condition is false then only the
112:18 - else part will be executed so whatever
112:21 - code or block of code you write under
112:24 - else that will be executed if and only
112:28 - if the condition here is false so saying
112:32 - the value of x which is 100 which is
112:34 - obviously greater than 0 it is going to
112:37 - print that X is a positive value now
112:40 - when I change the value of x is equal to
112:43 - minus 100 here and once again I execute
112:47 - the code first of all it prints that X
112:50 - is minus 100 here because first of all
112:53 - this condition is checked and obviously
112:56 - minus hundred is not equal to 100 so
112:58 - this condition is true so these two
113:01 - lines of code are executed because this
113:04 - condition is true and here because this
113:07 - condition is false the that's why this
113:10 - statement is not printed and the
113:13 - execution of code goes to the else
113:15 - condition and then this line of code
113:19 - will be executed which is X is negative
113:22 - and you can see here and this line of
113:25 - code is independent of both these if
113:27 - statements and that's why it will be
113:30 - printed always now as we have seen from
113:33 - our last video that we can provide
113:36 - multiple conditions using a logical
113:40 - operators so we can hear also write that
113:45 - if X is not equal to 100 or if the value
113:49 - of x is less than 0 let us write here x
113:54 - is less than 0 then only we want to
113:59 - print this statement so once again when
114:03 - we run the code in this case both the
114:05 - conditions are true that's why this is
114:07 - printed if we write here that X should
114:09 - be greater than 0 then also this will be
114:14 - executed because one of the condition is
114:17 - true and because in the case of or we
114:20 - only need to satisfy one condition out
114:22 - of multiple conditions in the case of
114:25 - end when I write end here and run the
114:28 - code now you can see this is not
114:32 - executed because one condition is true
114:35 - here and other is false and in the case
114:39 - of end we need to satisfy both the
114:42 - conditions and then only these two
114:45 - statements will be executed or this
114:48 - block of code will be executed so this
114:51 - is how you can use if else statements in
114:54 - Python now in this video I am going to
114:55 - show you how to use l if statement with
114:58 - if else statements and how to use nested
115:01 - if statements in Python so let's get
115:05 - started so what I am going to do is I am
115:07 - going to declare a variable and I I am
115:09 - going to ask the user to enter
115:12 - some name
115:13 - so I am going to just write
115:16 - enter name here
115:19 - and when the user enters this name I
115:23 - want to compare this name with some
115:26 - predefined names so in the last video we
115:29 - have already seen how to use if
115:31 - statement so I can just write name is
115:35 - equal to and I can compare it with some
115:37 - name so let's compare it with a name
115:39 - called Max here and I will give this
115:42 - colon here and once the name matches
115:45 - this name I am going to print the name
115:48 - so I am going to just write name
115:50 - entered is and whatever the name
115:54 - provided by the user so I will just use
115:56 - this name variable here
115:59 - this we have already seen in the last
116:01 - video
116:02 - now in Python you can also use a l if
116:06 - statement and the signature of L is if
116:09 - statement is you can just write l f here
116:12 - and then you can provide some other
116:15 - condition which returns Boolean so I can
116:19 - once again here write if the name
116:22 - matches some other name for example Leo
116:26 - and once again I'm going to just print
116:29 - the name entered by the user and this L
116:32 - if condition I can use any number of
116:35 - time after the if let me match this name
116:39 - to some other different names for
116:43 - example Roy
116:44 - and the last name will be
116:47 - Ali so if the name matches Max this
116:51 - statement will be executed if the name
116:54 - matches Leo this statement will be
116:57 - executed if the name matches Roy this
116:59 - statement will be executed and if the
117:02 - name matches Ali this statement will be
117:04 - executed now if the name entered by the
117:07 - user does not matches any of these names
117:10 - then we can use a else statement so we
117:15 - can just write else here and we can just
117:19 - print a message here so the name entered
117:22 - is invalid so this message will be
117:24 - printed when the name entered by the
117:27 - user does not match any of the name I am
117:30 - checking here
117:32 - so let's run the code and let's see what
117:34 - happens so now my code is running and
117:37 - I'm going to give the name Max here for
117:40 - example and then press enter and it
117:43 - prints this message which says the name
117:45 - entered is Max using this statement
117:49 - now once again when I run the program
117:52 - and this name matches let's say some
117:56 - other name Ali and then when I press
117:59 - enter it prints the name entered is Ali
118:02 - which means this statement is executed
118:06 - and let me run the program once again
118:09 - and when I give some random string here
118:13 - it prints the name entered is invalid
118:16 - now let us say the name entered by the
118:19 - user is Max and this condition evaluates
118:22 - to true then this statement will be
118:24 - executed and the other conditions which
118:27 - we have given using L if statement will
118:31 - not be evaluated so let us say we will
118:35 - write Max here also so this condition
118:38 - and this condition is same right
118:41 - checking for the same name and when I
118:43 - run the program and when I write Max
118:46 - here only one statement is printed which
118:50 - is this one so we can see when this
118:52 - condition returns true only one
118:55 - statement is executed and none of the
118:59 - other conditions are even evaluated now
119:02 - the important thing to note here is you
119:04 - cannot start with a l if statement you
119:08 - need to start with the if statement so
119:12 - you need to write a if statement and
119:14 - check the condition first and then only
119:17 - you will be able to write L if condition
119:19 - now its possible to use multiple if
119:24 - condition and then this l f will become
119:28 - the part of this if condition and this
119:31 - will be the separate if condition so
119:34 - when I run the code once again and when
119:37 - I write Max here is going to print 2
119:42 - statements One is using this and other
119:45 - is using this because this if condition
119:48 - and this if condition are two different
119:51 - if conditions and once you use l if so I
119:56 - am going to use l f here then this LF is
119:59 - the part of this if condition so this is
120:03 - how you can use if statement with L if
120:06 - statement and else statement now let's
120:09 - see how to use the nested if statement
120:12 - so I am going to declare a variable
120:15 - called X and the value I will assign to
120:19 - X is 10 and then I am going to write an
120:22 - if condition and here I am going to just
120:25 - evaluate where the x is less than 0 and
120:30 - when X is less than 0 I am going to just
120:32 - print that X is negative else if the
120:37 - value is not less than 0 so I am going
120:40 - to just write else
120:41 - then I'm going to just print X is
120:44 - positive now let's say I also want to
120:46 - evaluate if the x value is a even number
120:50 - or an odd number if the x value is
120:54 - positive so under the else I can once
120:58 - again write if and then we can just
121:01 - evaluate this condition that if x modulo
121:07 - 2 is equal to 0 which means that when x
121:14 - modulo 2 returns a 0 that means it's a
121:18 - even number so we can print X as even
121:23 - otherwise in the else condition I can
121:25 - just write else X is odd so in this if
121:31 - condition I am checking if the value of
121:33 - x is less than 0 or not and if this
121:36 - condition is not satisfied then I am
121:38 - checking whether X is up up even number
121:43 - or X is a odd number so if you remember
121:46 - indentation here is very important so
121:49 - this if condition falls under the else
121:54 - condition right so this if condition and
121:58 - this else is the part of the else
122:01 - statement so because we have provided
122:04 - this four space indent here whatever
122:07 - code you write with this indent is a
122:11 - block of code and what we are
122:13 - essentially doing here is we are nesting
122:15 - one if else condition inside the other
122:19 - if else condition you can also reverse
122:22 - this condition checking and you can also
122:24 - say if x is greater than or equal to 0
122:28 - then the value of x is positive
122:32 - otherwise the value of x is negative and
122:36 - this statement you can write under the
122:40 - if condition also and this is also a
122:43 - nested if else statement and let me run
122:46 - this program
122:48 - and you can see X is a positive value
122:51 - because X is equal to 10 and X is a even
122:55 - value so once this condition is true
122:59 - this statement will be printed and
123:02 - whatever if condition is there inside
123:05 - the parent if statement that will also
123:08 - be executed and this condition is
123:11 - checked first of all and obviously this
123:13 - condition is true in this case when X is
123:16 - equal to 10 because when you do x modulo
123:19 - 2 it is going to give us the remainder 0
123:22 - and that is why X is a even value and
123:26 - that is why it is printing X is even
123:29 - here so it is totally possible to use
123:31 - one FL statement inside the other FL
123:35 - statement and this type of FL statement
123:38 - are called nested if else statement in
123:42 - this video I'm going to show you how to
123:44 - use lists in Python so first of all what
123:48 - are lists
123:50 - so list in Python is a kind of
123:52 - collection which allows us to put many
123:56 - values in a single variable
123:59 - you can also say that list is an ordered
124:03 - set of values so let's define a list so
124:06 - I'm going to just say x is equal to and
124:10 - you can define a list inside these
124:12 - square brackets and inside the list you
124:15 - provide some values so for example I am
124:17 - going to provide the values 3 comma 5
124:20 - comma 4
124:22 - comma 9 comma 7 comma ten so this is how
124:26 - you can create a list in Python and when
124:29 - I press enter it's going to create a
124:31 - list and when I just use x to get the
124:35 - list is going to provide me all the
124:38 - values in the list now these values
124:40 - which are inside the list are called
124:42 - elements so 3 is an element or 5 is an
124:46 - element or all these values in this list
124:49 - are all called elements and all these
124:52 - elements are ordered by their index now
124:56 - index as I already said in the previous
124:58 - videos also always starts from 0. so we
125:03 - can fetch the value which is at index 0
125:07 - using this square bracket once again
125:09 - with the variable name and then when I
125:12 - write index 0 it's going to give me the
125:16 - element which is saved at index 0. so
125:20 - looking at this list 3 is at index 0 5
125:25 - is at index 1 4 is at index 2 and so on
125:30 - so let's say I want to get the value
125:33 - which is at index 4 0 1 2 3 4 so I'm
125:39 - going to just write x square bracket 4
125:43 - and it is going to give me 7 which is
125:45 - saved at index 4. now it's not necessary
125:48 - that list must contain all the same data
125:51 - type elements so for example I can also
125:54 - declare a variable called Y and in this
125:57 - I can save some name for example Max I
126:02 - can ah save integer let us say one I can
126:06 - save a decimal value let us say 15.5 I
126:10 - can save other list inside this list
126:12 - using these square brackets for example
126:15 - 3 comma 2 so one list can contain
126:18 - different type of data types with any
126:20 - number of elements so when I press enter
126:23 - and this time I want to get the value
126:26 - which is at index 0 it's going to give
126:29 - me Max and once I want to get the value
126:32 - which is saved at index 3 then it's
126:36 - going to give me this list which I have
126:39 - saved at index 3. now when you try to
126:43 - access the index which is not there so I
126:46 - am going to just write Y and then I'm
126:48 - going to say 100 and this value is not
126:52 - present in this list at this index so
126:55 - I'm going to press enter and it's going
126:57 - to give me the error which says list
126:59 - index out of range now if you want to
127:02 - get the length of the list you can use
127:05 - the inbuilt function in Python which is
127:07 - Len and then your list name so for
127:10 - example I want to find out the length of
127:13 - list X is going to give me 6 it's going
127:17 - to give me 6 because you can see here
127:19 - this list contains six elements or I
127:22 - want to get the length of the second
127:25 - list which is y and it's going to give
127:27 - us 4 because this list contain four
127:30 - elements now it is also possible to
127:32 - insert and remove elements from the list
127:36 - so for example I am going to use x which
127:38 - has 6 element till now and I am going to
127:41 - insert the seventh element so I can use
127:43 - a method called insert and you can see
127:46 - this method takes an index and the
127:50 - object name so I'm going to choose this
127:51 - and the index at which I want to insert
127:54 - the value is at index 2 and the value I
127:58 - want to insert is some string for
128:00 - example Tom and I'm going to press enter
128:03 - and I'm going to print the values inside
128:06 - the X list then you can see now this
128:10 - list has seven elements and Tom is
128:14 - inserted at the index 2 because we have
128:16 - inserted this value at the index 2. in a
128:20 - similar way you can remove something
128:22 - from a list also so to remove something
128:24 - you can use your variable name for
128:27 - example x dot remove and the value you
128:31 - want to remove so for example once again
128:32 - I want to remove this name which I have
128:35 - inserted at index 2 and once again when
128:38 - I print the value of x it is going to
128:41 - give me these values now let's say the
128:44 - list contains two element which are
128:48 - exactly the same so I am going to insert
128:49 - one more element at index 1 and this
128:53 - element will be 3 for example and now my
128:56 - list contain double 3 here and if I want
128:59 - to remove this 3 so I am going to just
129:02 - call this remove function once again and
129:04 - I will say 3 here and then press enter
129:06 - you can see only 1 3 is removed from
129:10 - this list so you can see these three are
129:13 - at index 0 and index 1. so this value is
129:16 - removed which is at index 0 and this
129:20 - will remain in this list so if a list
129:23 - contains duplicate values it's going to
129:25 - remove the value from the left and also
129:29 - remove is going to remove only one
129:31 - object which is found first in the list
129:34 - now if you try to remove move the
129:36 - element which is not there in the list
129:38 - so I am going to remove something which
129:41 - is not even there in this list then it's
129:43 - going to give us this error which says
129:45 - that this is a value error and it cannot
129:49 - remove this value from the list now
129:51 - there is one more function with the list
129:54 - which is a pop method and this we can
129:57 - use to remove the values from the last
129:59 - so you can see our list was previously
130:02 - having six elements and 10 was the last
130:06 - element and when you use this function
130:09 - which is pop it is going to pop this 10
130:12 - from the list and now let's see the
130:14 - content of the list so now this list
130:17 - contain only five element and the last
130:19 - element is now removed once again when
130:22 - you use this pop method it's going to
130:24 - remove the seven and now our list only
130:27 - contains four elements now let's say you
130:30 - want to delete the whole list so I'm
130:32 - going to declare a list and this list
130:35 - will contain few values and then I will
130:39 - press enter and you can see the values
130:41 - of list and now I can use a function
130:43 - called Del and then the name of the list
130:47 - and this function is going to delete
130:48 - this list so I'm going to just press
130:51 - enter and then once again try to access
130:54 - the values inside this variable and now
130:57 - it says the name Z is not defined
131:01 - because delete function has deleted this
131:03 - list now once again I'm going to create
131:05 - this list Z and now there is a function
131:08 - called clear which is used to remove all
131:12 - the values from the list so I'm going to
131:14 - just press enter and then try to access
131:16 - the value of Z and you can see this list
131:20 - is now empty because we have used the
131:22 - clear function which is used to empty
131:25 - the list let me show you few more
131:26 - functions related to list so let's say I
131:30 - can use x and the values inside X are
131:33 - three five four nine and I can use a
131:36 - function called sort to sort all these
131:39 - integer values inside the list and once
131:42 - I press enter now now you can see all
131:46 - the values are sorted and you can see
131:48 - all the values are sorted in ascending
131:50 - order you can also use this method x dot
131:54 - reverse and it's going to reverse all
131:57 - the values so once I use the reverse
131:59 - function and then when I try to get all
132:02 - the values inside the list you can see
132:04 - all the values are now reversed there is
132:07 - also a function called append and here
132:10 - you can append anything to your list so
132:12 - I am want to append 10 to my list and
132:15 - when I try to access this list you can
132:18 - see at last this 10 is appended in my
132:21 - list also if you want to copy one list
132:23 - into another you can use let's say I'm
132:26 - going to declare a variable called
132:29 - s here and I want to copy all the values
132:32 - from X list I can use x dot copy
132:38 - and this is going to copy all the
132:40 - content of my X list into this new
132:43 - variable called s so you can see all the
132:46 - values are copied into the variable s so
132:49 - let me append something into my list
132:52 - once again so I'm going to append 10
132:54 - once again and now my list looks like
132:56 - this and there is a function called
132:59 - count using which you can count the
133:02 - number of element which are there in the
133:05 - list so I want to find how many number
133:07 - of 10 are there in the list is going to
133:10 - return Me 2 and once again I want to
133:13 - count how many threes are there in the
133:16 - list it's going to return me 1. let's
133:18 - say I want to count how many hundreds
133:20 - are there in my list and it's going to
133:22 - return 0. so this is how you can use
133:24 - lists in Python you can also use the
133:28 - list name and then Dot and see all the
133:31 - methods which are available related to
133:34 - list here and you can use these method
133:37 - which you see here
133:38 - in this video we are going to see how to
133:40 - use tuples in Python so first of all
133:44 - what are tuples
133:46 - so tuples are very similar to lists that
133:49 - is they are used to store the collection
133:51 - of elements in a single variable but
133:55 - there is a very important difference
133:56 - between them and that difference is
133:59 - tuples are immutable immutable means
134:04 - once tuples are created they cannot be
134:08 - changed or the content in them cannot be
134:11 - changed so let's see how we can declare
134:14 - a tuple so I am going to declare a
134:16 - variable called X and I am going to
134:18 - assign some values to it now in case of
134:22 - list we have seen we used the square
134:24 - brackets in the case of tuples we use
134:27 - these parentheses in order to store the
134:30 - list of elements so I can just write 1 5
134:34 - 3 4
134:36 - and 8 for example and then press enter
134:39 - and it is going to create a tuple now in
134:42 - order to print the Tuple you can use x
134:44 - and it's going to print this Tuple now
134:47 - as I said tuples are similar to lists in
134:51 - some ways and that means you can call a
134:54 - tuple element by a index in Tuple so all
134:59 - the Tuple elements are arranged by their
135:01 - index and when you want to for example
135:05 - get the first element here you give the
135:08 - index 0 and then press enter and it's
135:11 - going to give you the value which is
135:14 - saved at index 0 let us get the value
135:17 - which is saved at index 4 and I am going
135:21 - to press enter and you can see it gives
135:23 - 8 which is saved at index 4. now when I
135:27 - try to give a index which is not there
135:29 - for example 100 it is going to give us
135:32 - error which says index error Tuple index
135:35 - out of range now as I said tuples are
135:38 - immutable that is you cannot change the
135:41 - content of a tuple if they are
135:43 - initialized once so let us try to test
135:46 - this so I am going to just assign the
135:48 - value at index 0 which is let's say 2
135:52 - and I'm going to press enter and you can
135:55 - see it says type error Tuple object does
135:58 - not support item assignment that is you
136:02 - cannot assign any other value to a tuple
136:07 - element if they are once initialized now
136:11 - that also means that you cannot use some
136:14 - of the functions which you used with
136:16 - lists in the tuples for example you
136:19 - cannot remove any element you cannot
136:21 - append any element you cannot change any
136:24 - element so for example when I write X
136:27 - here and then press dot you can see
136:30 - there are few methods which are
136:33 - available with the Tuple and most
136:36 - important is this count method so let us
136:39 - try to use this count method and I want
136:41 - to know how many number of 8 which are
136:45 - there in this Tuple and it will give me
136:47 - 1 because 8 is only present once in this
136:49 - Tuple if 8 is present twice in this
136:52 - double here you will see the result two
136:54 - now in order to get the length of the
136:57 - Tuple you can use the inbuilt function
136:59 - which is l e n and then the Tuple name
137:01 - and then press enter and it's going to
137:03 - give you the length of the Tuple now in
137:06 - the previous video I have told you that
137:08 - you can save multiple data type values
137:11 - in lists let's see if we can do the same
137:14 - with tuples or not so I am going to give
137:17 - the parenthesis I am going to give the
137:19 - first value as integer second value as
137:22 - string third value as for example the
137:27 - decimal value and I am going to press
137:29 - enter and I'm going to get the value of
137:33 - y and you can see it's totally possible
137:36 - to say save multiple data type values in
137:39 - a tuple so now I have declared two
137:42 - tuples one is X and other is y so let's
137:45 - print X and Y is once again very quickly
137:48 - and now what we want to do is we want to
137:51 - use a concatenation operators so as I
137:55 - said tuples are immutable but let me
137:57 - Define a third Tuple here and I want to
138:01 - add X Tuple and Y Tuple here and I want
138:05 - to assign the value to Z is it possible
138:08 - let's check so I am going to just once
138:11 - again see the contents in the Z variable
138:14 - and you can see when you use this plus
138:18 - operator or concatenation operator it is
138:22 - going to join these two Tuple and create
138:24 - a new Tuple with the combination of the
138:28 - values of both these tuples now there is
138:31 - one interesting thing which you can do
138:33 - with a tuple which is you can declare a
138:36 - variable and let me Define a tuple with
138:40 - only one element and I am going to just
138:42 - give High here and then after this
138:45 - element I am going to provide comma here
138:48 - so this is important I have provided
138:50 - this comma and I haven't provided the
138:53 - second element in the Tuple and I can
138:55 - use an Asterix here and I can use some
138:59 - value here so let us say I have provided
139:02 - 5 here and I am going to press enter and
139:05 - then I am going to see the values inside
139:07 - this a variable and now you can see a
139:11 - high string is saved five times in a
139:14 - variable in the form of a tuple so you
139:18 - can once again get this value at index 2
139:22 - for example and its going to give you
139:23 - the value which is stored at index 2
139:26 - which is high itself you can also use a
139:28 - inbuilt function called Max here to get
139:31 - the maximum value out of a tuple so max
139:34 - and I have provided X double here and
139:38 - you will be able to see it will give us
139:40 - the maximum value stored in that Tuple
139:43 - and you can see here 8 is the maximum
139:46 - value which is there inside the Tuple we
139:48 - can also get the minimum value using m i
139:51 - n function and it's going to give you
139:53 - the minimum value which is stored inside
139:55 - the Tuple and also you can use our Del
139:58 - function to delete a tuple so let us say
140:01 - I want to delete this Tuple which is z
140:03 - here so I can just write the name of the
140:05 - Tuple after the El and space and then
140:08 - press enter and now once again when I
140:11 - try to get the value of Z it is going to
140:13 - give me error which says name Z is not
140:16 - defined so in order to delete the Tuple
140:19 - you can use the Del function so this is
140:21 - how you can use tuples in Python in this
140:24 - video we are going to learn how to use
140:26 - sets in Python so first of all what are
140:30 - sets so a set is an unordered collection
140:33 - with no duplicate elements and no
140:37 - indexing so let's see how we can use
140:40 - sets in Python so you can declare a
140:44 - variable and then is equal to and you
140:47 - define the elements in set in a curly
140:50 - bracket so you can Define multiple
140:52 - values here for example 1 comma 2 comma
140:56 - 5 comma 4 comma 7 comma 9 but keep in
141:01 - mind that set cannot have duplicate
141:04 - values so each value in set must be a
141:09 - unique value so for example what happens
141:11 - when we Define a set with some duplicate
141:14 - values so I am going to just declare
141:17 - this set and press enter here and this
141:20 - set is created now whenever I try to
141:23 - access the values inside the set a then
141:27 - it's going to give me this set and you
141:30 - can see
141:31 - the two which was a duplicate which we
141:34 - have defined here is removed from this
141:37 - set so a set always have unique values
141:41 - and if you define a set with duplicate
141:43 - values it's going to remove the
141:46 - duplicate values and only save the
141:50 - unique values in the set so let's see
141:53 - some of the methods related to sets and
141:56 - the first method is as always Len method
142:00 - and you can find the length of a set
142:02 - using this Len method and the name of
142:05 - the set which Returns the length of a
142:08 - set you can also use add function so a
142:13 - DOT add to add a element in a set so I
142:18 - want to add 10 for example into my set I
142:22 - can use this and then press enter and
142:24 - once again when I try to get the values
142:26 - inside this set a you can see 10 is
142:30 - added to this set but this 10 will only
142:33 - be added if it's already not there in
142:36 - the set if it's already there in the set
142:38 - nothing will happen so let us try to add
142:41 - once again 10 to this set which already
142:44 - have a set and once again you will see
142:47 - that nothing happens inside the set
142:50 - because 10 was already there now if you
142:52 - want to add multiple values in a set you
142:55 - can use a update method so you can call
142:58 - this method which is update and then
143:02 - inside the curly brackets you need to
143:04 - provide these multiple values
143:07 - so let us add some values into this set
143:11 - so I am going to add 15 18
143:15 - 17 let's say and 14 okay and then press
143:19 - enter and now I will see the values
143:22 - inside the set and you can see all these
143:25 - values are added to the set you can also
143:28 - remove the values from the set so I can
143:31 - use a method called remove and let's say
143:35 - I want to remove 18 from the set I can
143:39 - just give the element and then press
143:41 - enter and once again I will try to
143:43 - access the set and you can see 18 is
143:46 - removed from this set now there is a
143:49 - method called discard also so let's see
143:52 - how we can use this method this card
143:54 - Works similar to remove method so for
143:57 - example I want to remove this 17 from my
144:02 - set I can write 17 here and it works
144:05 - fine right so when I try to access the
144:09 - value of a 17 is removed so what is the
144:12 - difference between a discard method and
144:15 - a remove method so our remove method
144:18 - whenever you use a remove method and you
144:22 - try to remove an element which is not
144:25 - there in the set for example I will try
144:28 - to remove 100 which is not there in the
144:30 - set it's going to throw an exception and
144:33 - it says key error hundred now if you try
144:36 - to do the same thing using a discard
144:38 - method so I'm going to use a DOT discard
144:42 - here and try to discard 100 from the set
144:46 - which is not there in the set it's not
144:49 - going to give me any error and that's
144:52 - the difference between this card and
144:54 - remove so remove throws an error when a
144:58 - element is not there but this card
145:00 - doesn't throw any error it's not going
145:03 - to do anything if the value is not there
145:06 - in the set now there is a pop method
145:09 - also you can use with set so I'm I can
145:13 - use this pop method and then press enter
145:15 - and what is going to do is it is going
145:19 - to remove any random element from your
145:23 - set so it's not necessary that is going
145:26 - to remove the element from the left hand
145:28 - side or the right hand side it will
145:31 - remove any random element from the set
145:34 - also for example I will declare a set of
145:37 - names let's say
145:42 - and if you want to clear the set you can
145:45 - use a clear method so I can use this
145:48 - clear method in order to empty this set
145:51 - so now when I try to access the values
145:54 - inside the set you can see it's an empty
145:57 - set with no values if you want to delete
146:00 - a set you can use a Del function and
146:03 - then the name of your set and then press
146:05 - enter and once you delete it when you
146:09 - try to access it it is going to give you
146:11 - an error that name is not defined now
146:14 - you can also create a set using a set
146:18 - Constructor so instead of these curly
146:20 - brackets you can write set and in the
146:24 - double parenthesis so you need to
146:26 - provide the double parenthesis here in
146:28 - order to create a set using the set
146:31 - Constructor so this is also going to
146:34 - create this set called name and when I
146:37 - try to access the values inside the set
146:39 - name you can see it has created this set
146:42 - of name names also you can convert a
146:45 - list into a set so let me Define a
146:48 - variable called Z and then I can use a
146:51 - set Constructor and inside these
146:54 - parentheses I can use the square
146:56 - brackets which we use generally with
146:58 - lists and then you can Define your list
147:02 - here and then press enter and this list
147:05 - will be converted to a set and you can
147:09 - see the result here now similar to the
147:12 - mathematical set operations like Union
147:15 - intersection difference symmetric
147:18 - difference you can also use these
147:20 - mathematical operations related to set
147:23 - on the python sets also so let's see how
147:26 - we can use this mathematical set
147:28 - operations on our python sets so let me
147:33 - once again Define a set I have already
147:35 - one set which is a which contains these
147:39 - values for example and I will Define a
147:41 - set B
147:43 - with some other set of values so I am
147:46 - going to define a set with for example
147:51 - so that is the content of the set B okay
147:55 - so now I have two sets and on these two
147:58 - sets I want to perform some set
148:01 - operations which are also used in
148:04 - mathematics so you can find out the
148:06 - union of two sets using operator called
148:10 - R okay so when I write a
148:14 - and this pipe symbol which is called r b
148:18 - it's going to give me the union of these
148:21 - two sets and what is the Union
148:24 - so Union of two sets contain all the
148:28 - elements that are there in the set a or
148:31 - in the set B so or here is important
148:35 - right so I am going to press enter and
148:38 - you can see it's going to give me the
148:41 - union of A and B that means the set
148:44 - contains all the elements that are there
148:47 - in set a or in set B also I can use a
148:52 - method called Union instead of this or
148:54 - operator so I can use a variable dot
148:58 - Union there is a method called Union and
149:02 - then you can write B here and then press
149:04 - enter which is going to give you the
149:07 - same answer okay so you can either use
149:10 - this Union method or this or operator
149:14 - now let's see how we can find out the
149:16 - intersection between two sets so in
149:20 - order to find out the intersection you
149:22 - use a and this operator end and then
149:26 - your next set which is B here so what is
149:30 - an intersection of two sets so
149:32 - intersection of two sets contains all
149:35 - the element that are there in both the
149:39 - set that means set a and set B okay so
149:43 - when I press enter you can see it gives
149:47 - me two elements inside the set and these
149:51 - two elements are there both in the a set
149:55 - and the B set that's why we get only two
149:58 - values because these two values are
150:01 - there in set a and set B also again you
150:04 - can use a method called intersection so
150:06 - a
150:07 - intersection and then B which is going
150:11 - to give me the same answer so either you
150:13 - can use this method or you can use this
150:15 - operator now let's find out the
150:18 - difference between two sets so what is a
150:21 - difference between two set a difference
150:24 - of two sets contains all the elements
150:27 - that are in a but not in B okay so you
150:32 - can find out the difference by this
150:34 - minus operator here so when you write a
150:37 - minus B you will be able to get the
150:40 - difference between these two sets and
150:42 - this result will contain all the
150:44 - elements that are in a but not in B you
150:48 - can also use B minus a and then is going
150:53 - to give you other result because this
150:55 - time it's going to give you a set which
150:58 - contains all the elements that are there
151:00 - in B and not in a so difference between
151:04 - set a minus B is totally different from
151:09 - B minus a and also you can use a
151:12 - difference method so a
151:14 - then you can call a difference method B
151:17 - and it's going to give you the same kind
151:20 - of answer you can see here and also you
151:23 - can call B dot difference
151:27 - a and it's going to give you the another
151:30 - answer of B minus a now you can also
151:33 - find out the symmetric difference
151:35 - between two sets and what is the
151:38 - symmetric difference between two sets
151:41 - a symmetric difference between two sets
151:43 - contains all the elements that are
151:46 - either in set a but not in set b or they
151:52 - are there in set B but not in set a so
151:56 - this is the symmetric difference and you
151:58 - can find out the symmetric difference
152:00 - using this cap symbol and then B so a
152:04 - cab B I don't know what is the exact
152:07 - name of this symbol you can find out by
152:10 - yourself and when you do this it is
152:13 - going to give you the symmetric
152:14 - difference between a and b and whenever
152:18 - you find out the symmetric difference
152:20 - then when you do for example B
152:24 - this cap symbol a it is going to give
152:28 - you the same answer because symmetric
152:30 - difference give you same answer whether
152:33 - you give a cap b or B cap a the answer
152:36 - will be always same also you can use a
152:40 - method symmetric difference so you can
152:42 - use this method called symmetric
152:45 - difference B and it is going to give you
152:48 - the same kind of result now one last
152:50 - thing I want to show here is sets are
152:53 - not indexed or ordered so whenever you
152:57 - want to find out for example a and the
153:00 - value at index 0 it's going to give you
153:03 - an error because there are no indexes in
153:07 - a set and they are not ordered by any
153:11 - index so sets are unordered collection
153:14 - of values now if you want to find out
153:17 - what all other methods you can use with
153:20 - sets you can create a set and then write
153:22 - the name of your set and then press dot
153:25 - here and you will be able to see this is
153:27 - the list of all the methods which you
153:29 - can use with the sets also if you want
153:33 - to list out all the methods which you
153:36 - can use with sets you can use this
153:38 - inbuilt function dir and then you can
153:41 - provide any set name here which is your
153:45 - variable name and then press enter and
153:47 - once again it's going to print the list
153:49 - of all the method which you can use with
153:51 - the sets so this is how you can use sets
153:54 - in Python in this video I am going to
153:56 - show you how to use dictionaries in
153:58 - Python so first of all what are
154:00 - dictionaries
154:02 - so dictionaries in Python are like
154:04 - associative lists or a map
154:08 - now you can think of dictionary as a
154:12 - list of pairs so let me show you how to
154:15 - define a dictionary so you can Define
154:17 - any variable name and to define a
154:20 - dictionary first of all you use these
154:22 - curly brackets and inside these curly
154:25 - brackets you provide a list of key value
154:29 - pairs
154:30 - so let's provide the list of key value
154:32 - pairs so first key is name and the name
154:37 - is Max
154:38 - the second key is for example age
154:43 - and the age of Max is let's say 14
154:48 - and we can also write here in which year
154:51 - he was born so we can just write here
154:54 - and he was born in
154:57 - 2004 for example and I'm going to press
155:00 - enter here and once again I'm going to
155:03 - just access the values inside this
155:06 - dictionary which is D and you can see
155:08 - our dictionary is created now
155:11 - so as I said dictionary is a list of key
155:14 - value Pairs and all these values which
155:17 - you see here before this colon
155:20 - are called keys so name is a key here
155:23 - here is a key here and age is a key here
155:28 - and whatever values you see after the
155:31 - colon are called values so max is a
155:34 - value 2004 is a value and 14 is a value
155:39 - and you can access the values from a
155:41 - dictionary based upon their keys so for
155:44 - example I have this Dictionary d i can
155:48 - use the square bracket and the key name
155:50 - for example I want to get the name value
155:54 - I can just give the name key here and
155:57 - then press enter and it's going to
155:59 - return me the associated value related
156:01 - to key name in the same way you can use
156:05 - other Keys also for example age and I'm
156:09 - going to press enter and it's going to
156:11 - give me 14 which is the value so age is
156:14 - a key here and 14 is the value now what
156:18 - type of data types you can store in a
156:20 - dictionary
156:21 - so as key you can Define any data type
156:24 - so let me Define a new dictionary here
156:28 - then I'm going to give these curly
156:29 - brackets and as I said you can define a
156:33 - string value as key also you can define
156:36 - a number as a key for example 15 colon
156:40 - 15. let's try the float values so I'm
156:43 - going to just write
156:45 - 15.1 colon
156:47 - 15.1 this is also allowed in dictionary
156:51 - so you can use string values you can use
156:54 - integer values you can use decimal
156:57 - values as key and also let's try the
157:01 - Boolean value so you can use the Boolean
157:04 - values also as keys and you can use a
157:09 - tuple also as a key so I'm going to just
157:12 - give a tuple 2 comma 3 and then I'm
157:15 - going to assign a value of 5 to this key
157:18 - and as values also you can use string
157:21 - values or decimal values or integer
157:23 - values or a Boolean values or any kind
157:26 - of collection you can use as a value so
157:29 - I am going to press enter here and now
157:32 - to access let us say we want to access
157:33 - the value for this key which is this
157:37 - Tuple so I'm going to just enter this
157:40 - Tuple inside these square brackets and
157:43 - it's going to return me 5.
157:45 - or I can just provide inside the square
157:48 - bracket
157:49 - true here and then press enter and it's
157:52 - going to return me the value which is
157:55 - associated with it which is true itself
157:57 - or I can just write here 15
158:01 - and it's going to return me 15 in turn
158:04 - because 15 is associated with this value
158:06 - which is also 15. now what happens when
158:09 - a key is not there and we try to access
158:11 - it so I am going to just access 100 from
158:15 - this e dictionary it's going to give us
158:18 - error that this key is not present in
158:21 - the dictionary you can also use the Len
158:23 - method to find out the number of items
158:26 - in the dictionary and you can see it
158:29 - says five items are there in the
158:30 - dictionary e and we can count this item
158:33 - so this is one item two item three item
158:36 - four item and the fifth item is here or
158:39 - in other words you can also say that Len
158:42 - function is going to return you the
158:44 - number of key value pairs which are
158:47 - stored in our dictionary you can also
158:50 - use for example I'm going to use my D
158:53 - dictionary now and you can also use a
158:57 - method called get and then you can give
159:00 - the key name name here in the
159:03 - parenthesis so let us say I want to get
159:05 - the value associated with the name key I
159:08 - can get it like this and it's going to
159:10 - give me the value associated with the
159:14 - name key you can also add a new key so
159:17 - this D dictionary you can see there are
159:20 - right now three key value Pairs and I
159:23 - can add one more key value pair so to
159:26 - add a key value pair you need to just
159:29 - write D and in the square bracket you
159:32 - just need to give the name of the new
159:34 - key so I'm going to just write
159:37 - so name here which is the name of the
159:39 - new key in the dictionary D and then you
159:42 - need to give the value associated with
159:45 - that key so when I press enter and once
159:49 - again when I try to access the values
159:51 - inside the dictionary now you can see
159:55 - that surname is added to your dictionary
159:59 - now if you want to remove any key value
160:01 - pair from a list then you can use d dot
160:05 - pop method and then the name of the key
160:08 - which you want to remove let's say we
160:10 - want to remove the surname once again
160:12 - which we have added and you can just
160:14 - press enter and now you can just print
160:17 - the values inside the now you can see
160:20 - the surname key value pair is removed
160:24 - you can also use a clear function so
160:26 - let's see what's there in the E
160:29 - dictionary so these are the values
160:31 - inside e dictionary I can use e dot
160:34 - clear to clear the values inside made
160:37 - the E dictionary so once again when I
160:40 - try to access e it will give me the
160:43 - empty dictionary also you can delete the
160:47 - dictionary using Del function and the
160:49 - name of the dictionary and when I press
160:52 - enter and when I try to access this
160:54 - dictionary e once again it's going to
160:56 - say that this name is not defined you
160:59 - can also update the values in a
161:00 - dictionary so this is my dictionary and
161:03 - I want to update the name for example so
161:05 - I can use the dictionary name and then
161:08 - the key here for example name and the
161:11 - new name I want to associate with this
161:14 - key is let us say a new name here and
161:18 - when I try to access this dictionary
161:20 - once again you can see the name is
161:22 - changed you can also use a method called
161:26 - update to update this key value pair so
161:29 - once again I want to change the key
161:32 - value pair which is name so I can give
161:34 - this curly bracket and then give the key
161:37 - value pair which I want to change so
161:39 - name and the new name will be Max once
161:43 - again and once again when I try to
161:45 - access the dictionary it will give me
161:47 - this dictionary and you can see the name
161:49 - is updated now now there is a function
161:52 - in dictionary called keys
161:55 - which is used to list out all the keys
161:58 - of that dictionary so you can see it
162:01 - will list out all the keys of the
162:03 - particular dictionary there is also a
162:06 - function called values which will list
162:09 - out all the values of that dictionary if
162:13 - you want to list out all the key value
162:14 - pairs you can use the function called
162:17 - items here and it will give you the key
162:20 - value pair list now the last function I
162:23 - want to show here is let me list out the
162:25 - content of the dictionary first of all
162:28 - so there is one more function which you
162:30 - can use here is which is pop item and
162:33 - you don't need to give any argument with
162:35 - this pop item when you press enter it's
162:38 - going to remove the last key value pair
162:41 - which you have added or updated so here
162:44 - we have updated this name key value pair
162:47 - that's why this is removed and now when
162:50 - you try to see the content of the
162:54 - dictionary this name key value pair is
162:57 - removed so this is how you can use
162:59 - dictionaries in Python in this video we
163:01 - will talk about the slice function in
163:03 - Python and also we will talk about how
163:06 - to use negative numbers with index in
163:10 - Python so let's get started so first of
163:12 - all I'm going to declare a list
163:27 - so now we have three variables first is
163:30 - a list second is a tuple and third is a
163:34 - string now there is a function called
163:36 - slice which you can use with your list
163:39 - tuples and strings to slice something
163:43 - out of your collection so to use this
163:46 - slice I'm going to declare a variable
163:49 - and then I'm going to use this function
163:51 - which is slice and you can provide some
163:53 - parameters in the parenthesis here so
163:56 - the first parameter you can provide here
163:58 - is for example start the second
164:01 - parameter you can provide here is the
164:04 - end and the third parameter you can
164:06 - provide here is the step so let's say I
164:10 - want to get out of this list the numbers
164:14 - from 0 to 4 so as a first argument we
164:17 - can Define our numbers 0 which is the
164:21 - first index and at the end index we can
164:24 - Define 5 and then I am going to press
164:26 - enter and once again I'm going to use my
164:28 - list variable and pass this x variable
164:31 - which contains the slice object which is
164:34 - returned by this function here and then
164:38 - press enter and you can see here it
164:40 - gives me the values from 0 to 4 so the
164:43 - first argument in the slice function is
164:46 - the index from where you want to start
164:49 - the next parameter is the index of the
164:51 - element before which you want to stop
164:54 - okay so if you want to stop at 4 you
164:57 - provide the index 5. if you want to stop
165:00 - at index 5 you will you will provide the
165:04 - stop value as 6 okay so it will be
165:07 - always one more than what you want now
165:11 - there is a short notation for achieving
165:14 - the same also and for that you can use
165:18 - your list and inside the square bracket
165:21 - you can provide the start value and the
165:24 - end value and then press enter and it's
165:26 - going to give you the answer but instead
165:29 - of comma I need to provide the colon
165:32 - here and then it will give me the answer
165:34 - okay so here you can use colon to give
165:38 - the start value and the end value and
165:41 - also an optional value which you can
165:43 - give as a third parameter which we will
165:45 - see in a moment okay so this is the
165:49 - short notation of creating slice in
165:53 - Python so as I said this is the start
165:55 - value and this is the end Value Plus 1
165:58 - okay so let me show you something I have
166:01 - a list here and you can see here I have
166:04 - written you have the variable a it can
166:07 - be a list it can be a tuple or it can be
166:10 - a string and inside the square brackets
166:12 - you give the start value and the end
166:15 - value separated by this colon symbol and
166:19 - what it's going to give you is the items
166:21 - from start through and minus 1 okay so
166:26 - whatever end value you will give here
166:28 - you will get the value and minus 1. you
166:31 - can also use this notation so start
166:33 - colon and without giving the end value
166:37 - and also reverse is possible so you can
166:40 - give only the end value and not the
166:42 - start value and also this notation is
166:45 - possible so we will see one by one how
166:47 - to use all these notations
166:50 - so first of all I will give once again I
166:53 - will use the Tuple now and this time I'm
166:56 - going to just give the start value let's
166:57 - say I want to start from 4 here and then
167:01 - colon and then press enter and it's
167:03 - going to give me the result from index 4
167:05 - until the end of this Tuple once again
167:08 - let me give the end value so instead of
167:11 - using this value before colon this time
167:15 - I will give the value after the colon
167:17 - and I will leave the start value blank
167:19 - and here let's say I just want to go
167:22 - before 6 so I am going to press enter
167:24 - and you can see it will give me the
167:27 - result from 0 to 5 that is end value
167:31 - minus 1 right so until 5 and also you
167:34 - can give this kind of notation so this
167:36 - time I am going to use the string
167:38 - variable and you can use colon without
167:41 - giving the start and end value and when
167:44 - I press enter it's going to give me the
167:46 - whole string let's say if with this
167:48 - string I want to provide part and end
167:51 - value let's say 0 to 5 and then press
167:54 - enter is going to give me a string from
167:57 - 0 to 4. so this slice functionality you
168:01 - can use with the tuples lists and also
168:04 - with the string or essentially whatever
168:07 - collection which have the indexes you
168:10 - can use this kind of slides notation
168:12 - with those kind of collections now in
168:15 - addition with the start and end value
168:16 - you can also give the step values so let
168:19 - me just print the value of a once again
168:22 - and you can see the values inside the A
168:26 - and let's say I want to get out of this
168:29 - list 0 2 4 6 8 okay so essentially I
168:35 - want the every second value from the
168:38 - list so what I can do here is I can give
168:40 - the variable name and then start to end
168:43 - so from 0 to index 9 and the third
168:48 - argument here you can give is the step
168:52 - so let us say I want to get the every
168:53 - second value so I can give 2 here and
168:55 - then press enter and it returns Me 0 2 4
169:00 - 6 8. now let's say I want to get every
169:04 - third value so I can write 3 here and
169:07 - it's going to give me 0 3 6 okay in a
169:11 - similar manner if I want to get the
169:14 - every fourth value I can write 4 here
169:16 - and then press enter it gives me 0 4 8.
169:20 - also if you don't want to give this
169:23 - range from start to end you can leave
169:25 - the start and add in the value as blank
169:28 - and then press enter and it's going to
169:30 - give you the same result now in Python
169:33 - you can use indexes with the negative
169:36 - numbers also so let me explain what I
169:39 - mean by negative number index
169:42 - so let's say I have a string called
169:44 - python it have these character p y t h o
169:49 - n you already know that you can access
169:52 - the P character or P letter using the
169:56 - index 0 and the y letter using the index
169:58 - 1 and the T letter using the index 2 so
170:01 - this is the positive Index right you can
170:04 - also use the negative index which starts
170:06 - from the right hand side so it starts
170:09 - from n and the index you can give here
170:12 - is from minus 1 so the last index here
170:16 - will be minus 1 then minus 2 minus 3
170:20 - minus 4 minus 5 and minus 6 here so
170:24 - let's use these kind of indexes and
170:27 - let's see how we can use them so we have
170:30 - this string here and let us say I want
170:32 - to get this value which is 9 which is
170:35 - the last letter of the string so I can
170:38 - use C and here inside the square bracket
170:40 - I can give minus 1 and then press enter
170:43 - and it's going to give me the last
170:45 - letter of the string if I give minus 2
170:49 - here it will give me the second last
170:51 - letter okay so the negative index start
170:55 - from the right hand side and it goes
170:58 - from minus 1 till the end of the string
171:01 - now let's use this negative number index
171:04 - with the list which we have so we have
171:07 - this a list and we can use a and then we
171:11 - can give a colon colon minus 1 which is
171:14 - going to give you all the numbers in the
171:17 - reverse order in the list so our list
171:20 - was starting from 0 to 9 it will give us
171:23 - 9 into 0 in the reverse order now let us
171:26 - say if you want to get the first two
171:29 - item in the reverse order so this is
171:32 - when you use this minus 1 as the third
171:36 - parameter it will give you everything in
171:38 - the reverse order okay so minus 1 as the
171:42 - step value is used to give everything in
171:46 - the reverse order so when you give for
171:48 - example 1 here and leave the end
171:51 - parameter empty is going to give you you
171:54 - can see one zero so as you can see our
171:58 - list starts from 0 1 and it's going to
172:00 - give us the reverse order values so it
172:03 - is going to give us one zeros because
172:06 - here we have given one and it's the end
172:09 - value for this reverse string because we
172:12 - have used the minus 1 here let's take
172:15 - some more examples so instead of the
172:18 - start value I can give minus 3 here and
172:21 - then press enter and you can see it
172:23 - gives us 8 and 9 which are the last two
172:26 - items of the list in the reverse format
172:30 - okay because our index in Reverse start
172:33 - from -1 minus 2 minus 3 and we we are
172:37 - skipping the minus three option because
172:40 - we have seen that we just take the end
172:44 - minus 1 right so minus 1 minus 2 and
172:48 - these will be given to us in the reverse
172:51 - order because we have used minus 1 here
172:54 - now you can also give for example minus
172:57 - 3 as the start value so I am going to
173:00 - give the minus 3 as the start value and
173:02 - then press enter and it's going to give
173:04 - us 0 to 7 right so 0 to 7 except 8 and 9
173:10 - in the reverse order so because 3 this
173:13 - time is the start value and end value is
173:17 - until thus
173:20 - so because 3 this time is the start
173:23 - value so we go from minus 1 minus 2
173:27 - minus 3 so minus 3 is this index and
173:32 - this is the start value so we get 0 to 7
173:36 - in the reverse order so this is how you
173:39 - can use slice function and negative
173:42 - values with indexes in Python in this
173:45 - video I'm going to show you how to use
173:47 - Loops in Python and we will start with
173:51 - the while loop
173:52 - so first of all what is a loop so a loop
173:57 - allows us to repeat over some block of
174:00 - code again and again until and unless
174:04 - some condition is met
174:06 - now let us see how to use while loop in
174:09 - Python so let us say I am going to
174:11 - declare a variable called I and I am
174:13 - going to initialize it with the value 0
174:16 - and to use a while loop you use this
174:19 - keyword and then you provide some
174:21 - condition
174:22 - so let us say I want to check whether
174:24 - the value inside the I variable is less
174:30 - than 5 or not okay and as in the case of
174:35 - if also we have seen we provide after
174:37 - the condition this colon symbol and then
174:40 - in the next line we write the code which
174:44 - we want to perform again and again until
174:48 - this while loop condition is true so
174:52 - let's say we want to just print
174:55 - something and we will print that the
174:58 - value of I is and then we will print the
175:03 - value of I like this also I want to
175:06 - change the value of I with every step so
175:10 - I will change the value of I using this
175:12 - expression which is I plus equals 1.
175:16 - this essentially mean that we want to
175:20 - just add 1 every time whenever this code
175:25 - is executed also we can say that we want
175:28 - to perform this operation I is equal to
175:30 - I plus 1. so this statement is similar
175:35 - to this statement let me provide some
175:37 - spaces here now in here also you will
175:40 - observe that I have provided some
175:41 - indentation here and indentation means
175:45 - that these two lines of code is the part
175:48 - of while loop okay so when I want to
175:52 - write something outside the while loop I
175:55 - will start from here with no indentation
175:57 - and let us say I want to just print that
176:01 - we are finished and now let me run the
176:04 - code and let's see what's the result and
176:06 - you will see here first of all this
176:09 - string is executed which is the value of
176:11 - I is and then the value of I is printed
176:16 - which is 0 1 2 3 and 4. so as you can
176:21 - see here that we have in initialized I
176:23 - is equal to two so the initial value of
176:25 - I is 0. now when we come to this code
176:28 - and when this condition is checked here
176:31 - the value of I is 0 Which is less than 5
176:36 - that means this condition is true and
176:39 - that means that these two lines of code
176:41 - which are under while loop will be
176:44 - executed so this line is executed where
176:47 - value of I is printed which is I is
176:49 - equal to 0 and this line of code
176:52 - increments the value of I by 1 so when
176:55 - this line of code is executed now the
176:57 - value of I becomes 1 because previously
177:00 - it was 0 and once again this program
177:03 - flow grows to the starting to evaluate
177:06 - this condition and this time the value
177:08 - of I is 1 Which is less than 5 and the
177:11 - condition is true once again and again
177:13 - this line is of code is executed and
177:17 - this line of code is executed and the
177:19 - value of I is incremented by one once
177:21 - again and the value of I becomes 2 here
177:24 - and this will happen again and again
177:28 - until the value of I becomes 5. and when
177:33 - the value of I becomes 5 this condition
177:36 - will be false and that means this code
177:40 - will not be executed this code will only
177:43 - be executed when the while loop
177:46 - condition is true and then at last this
177:48 - line of code is printed which is
177:51 - finished while loop now let me give you
177:54 - one more example of while loop and I
177:57 - will start from the top once again and
177:59 - this time I will declare a variable
178:00 - called num and I will initialize this
178:02 - value by 0 and also I will declare a
178:07 - variable called sum an initial value of
178:09 - sum is also zero now here first of all I
178:12 - will ask the user to enter a number so I
178:15 - am going to just write and also I will
178:18 - ask the user if he or she wants to exit
178:20 - from the loop he can enter zeros and
178:25 - then in the next line I will start with
178:28 - my while loop and I will give the
178:30 - condition if the number so if the number
178:34 - I am going to write number is not equals
178:37 - to 0 we want to perform some operations
178:41 - and what operation we want to perform we
178:44 - want to ask the user to provide any
178:47 - number and we will transfer this number
178:50 - into the variable num so here I will
178:52 - first of all write input and then I will
178:55 - ask the user to provide the number and
178:58 - when the user provides the number I want
179:00 - to convert it to a float value so I will
179:03 - just type cast this input to a float
179:06 - value and then this number will be
179:09 - assigned to the variable num now here
179:13 - don't forget to give the colon and in
179:15 - the next line what I will do is I will
179:17 - just use my sum variable and I will just
179:20 - add the number value to the sum so I can
179:25 - just write sum is equal to sum plus num
179:29 - and this means that initially the value
179:31 - of sum will be 0 and then this number
179:33 - will be added to the sum and until this
179:37 - Loop runs we will get the sum of all the
179:41 - numbers which is entered by the user and
179:44 - At Last I am going to just print the
179:46 - value of sum so now what do you think
179:48 - will happen so in this condition we are
179:51 - evaluating that num should not be equal
179:54 - to 0 and then only this code will be
179:58 - executed and we have provided the
180:00 - initial value of number is equal to 0 so
180:04 - this condition will never be met and
180:07 - this statement will never be executed so
180:11 - we need to provide the initial value of
180:14 - num is equal to 1
180:15 - and then whenever the user provides the
180:19 - value this one will be overwritten by
180:22 - the value which is provided by the user
180:25 - so this time when we run the code
180:28 - you can see first of all the program
180:31 - asks us to provide a number so I will
180:34 - provide 100 here and then press enter
180:37 - and you can see the sum is printed which
180:40 - is equal to hundred once again we will
180:43 - provide some number and then press enter
180:45 - and now you can see sum is equal to 150
180:48 - once again we will provide one number
180:51 - and then press enter and now the sum is
180:55 - one zero five zero now let us say we
180:57 - provide a number is equal to 0 and then
181:00 - press enter you can see that our while
181:03 - loop is finished because 0 is not equal
181:06 - to 0 that means a false condition and
181:10 - then the flow of program comes out of
181:13 - the loop and then the other while loop
181:16 - will be executed which is this while
181:18 - loop and that is why this output is
181:20 - printed we can also write that sum is
181:24 - equal to so we know that this is the sum
181:27 - so sum equals and then after the comma
181:30 - we will print the value of sum and once
181:32 - again when we execute the code
181:37 - and once I want to exit from the code I
181:40 - can use 0 to exit so 0 and then press
181:43 - enter and I come out of this Loop now
181:45 - python also supports the else statement
181:48 - to be associated with the loop statement
181:52 - so what I mean by the else statement to
181:56 - be associated with the loop statement is
181:59 - that I can use after the end of this
182:02 - while loop condition I can use here else
182:05 - and after the colon I can provide some
182:08 - code which I want to execute once this
182:11 - Loop is finished okay so I can write
182:15 - here that I want to print for example
182:18 - finished sum so let me run the code once
182:21 - again
182:22 - and I will quickly provide some numbers
182:25 - here and which will provide the sum and
182:28 - when I provide 0 here
182:31 - then we come out of the loop and you can
182:33 - see this finished sum string is printed
182:36 - using this else so once your program
182:38 - comes out of the loop this else
182:41 - statement will be executed similarly we
182:43 - can go down and here also instead of
182:46 - writing this finished while loop we can
182:49 - also give else statement here so I am
182:51 - going to just write else and after the
182:54 - colon here I need to provide the
182:57 - indentation so four space indentation
183:00 - one two three four and everything will
183:03 - be ok and once I run the code and first
183:06 - of all I will provide 0 here to see if
183:09 - this is executed and you can see this
183:11 - else condition is called once your while
183:15 - loop is finished now also you can
183:18 - provide some condition here which is
183:20 - always true so for example I can write
183:22 - true here and this means that while loop
183:26 - evaluates to True every time and this
183:30 - means that this
183:31 - statement will be executed forever so
183:35 - this is also possible but you need to
183:37 - think carefully what do you want to do
183:39 - do you want to execute this code
183:42 - infinitely or do you want at some time
183:45 - that this condition will be false so
183:48 - this is how you can use while Loops in
183:51 - Python in this video we are going to see
183:53 - how to use for Loops in Python so first
183:56 - of all what are for loops
183:58 - so a for Loop is used to iterate over a
184:03 - sequence and that sequence can be a list
184:06 - or a tuple or a dictionary or a set or a
184:10 - string so for that I'm going to declare
184:13 - some variables and the first variable is
184:16 - a which is a list second variable is B
184:19 - which is a tuple third is C which is a
184:23 - set fourth is a string and fifth
184:26 - variable is e which is a dictionary now
184:29 - before seeing the syntax of for loop I
184:33 - am going to show you how to use in
184:35 - operator in Python because it's used in
184:38 - for Loop
184:39 - so I'm going to first of all use print
184:42 - and then I'm going to use 0 and then use
184:47 - in operator and then I'm going to use
184:49 - this first variable which is a which is
184:52 - a list right and let's see what happens
184:55 - when I try to run this code so it prints
184:58 - true so in operator will give you true
185:01 - or false depending upon whether this
185:05 - value is present in your sequence or not
185:08 - so for example when I write 100 here
185:11 - which is not present in the list it's
185:13 - going to return as false so this you can
185:16 - use with the Tuple also let me just use
185:20 - it with Tuple and let's use one here and
185:24 - I'm going to run the program it prints
185:26 - true once again
185:30 - also we can use in operator with strings
185:33 - so I can write D here but for that I
185:36 - need to convert this one into a string
185:39 - so now when I run the code it will give
185:42 - me true now let's see how to use a for a
185:46 - loop in Python so for loop as I said we
185:49 - can use with some sequence so let's use
185:52 - it with a which is a list so I can write
185:56 - X in a and a is a list in this case and
186:02 - then I can just print the value of x and
186:06 - let's see what happens first of all when
186:09 - we just write this kind of a for Loop so
186:12 - we are going to run the program and what
186:14 - it does is it prints the values from 0
186:17 - to 5 which is the element present inside
186:21 - the list so for Loop is going to iterate
186:24 - over your list one by one and this in
186:28 - operator is going to check whether this
186:30 - value is there in your sequence or not
186:33 - in this case in our list or not so first
186:36 - of all when for Loops start it will
186:38 - transfer the first value which is 0 into
186:41 - X and then it checks whether X is in
186:45 - this list a or not and then it's going
186:48 - to print the value of x which is 0 and
186:50 - once again program sequence goes here
186:52 - and once again the next value is
186:55 - transferred to X which is 1 and once
186:58 - again this condition is validated if 1
187:01 - is in this list a or not and then the
187:04 - value of x is printed which is 1 and
187:06 - this iteration goes on and on until 5 is
187:10 - reached which is the last value in the
187:12 - list so 5 is printed and after that
187:14 - there is nothing inside X and then the
187:17 - program flow comes out of this Loop you
187:19 - can also use this for loop with the
187:22 - Tuple also so let's try it with Tuple
187:24 - and let's see what happens and it's
187:26 - going to print the same values also with
187:29 - the set let's see what happens so I am
187:33 - going to run the program once again and
187:34 - it prints 0 to 5 once again because
187:37 - these are the content of the set also
187:40 - once again let's try to use this for
187:43 - loop with the string and let's see what
187:45 - happens and it's going to print out the
187:48 - content of this string which is 0 1 2 3
187:52 - 4 5 and it prints them one by one now
187:55 - with the dictionary we use this for Loop
187:58 - in a little bit different way so for
188:01 - example I will write the variable name
188:03 - which is a dictionary and then let's say
188:06 - I want to just print all the keys inside
188:10 - this dictionary then I can write e dot
188:13 - keys and then we have all the keys using
188:16 - this function and when I run the code
188:18 - it's going to print all the keys inside
188:20 - your dictionary also when you use the
188:24 - function called dot values is going to
188:28 - print out all the values inside your
188:30 - dictionary you can see Max and the age
188:33 - 20. now let's say you want to print out
188:35 - all the key value pairs which are there
188:38 - in your dictionary you can use a
188:40 - function called items and this is going
188:43 - to give you keys and values right so I
188:46 - can just write key
188:47 - comma
188:49 - value here and then I can print the
188:52 - value of key first of all key and let's
188:55 - provide some space here and then let's
188:58 - print out the variable value here okay
189:00 - and when I run the code it's going to
189:03 - give you first of all key and then the
189:06 - value once again key and then the value
189:09 - so in order to print out the keys and
189:11 - values from a dictionary you can use
189:14 - this kind of notation now you can also
189:16 - use a function called range so let me
189:18 - show you how to use this function which
189:21 - is range which returns us the values
189:24 - starting from 0 so there is a function
189:27 - called range here and in here you can
189:30 - provide a number and this range is going
189:33 - to return the number starting from 0 to
189:37 - 5. so whatever number you write here the
189:39 - range array will be returned from 0
189:41 - until that number except whatever number
189:45 - you write here okay so let me just try
189:48 - to print out the value values which is
189:50 - there in the X and when I try to print
189:53 - this is going to return me from 0 to 5
189:57 - and you can see here 6 is not printed
189:59 - because the range will give us the value
190:02 - except that value which you write here
190:04 - you can also provide the start value
190:06 - here so let's say I want to start from 2
190:09 - and I want to go until 5 I can write
190:12 - something like this and now you can see
190:14 - now it start printing from 2 to 5. also
190:18 - you can give a third parameter here
190:20 - which is a step parameter so I can give
190:23 - 3 here for example and let's say I want
190:26 - to write 30 here and let's run the code
190:30 - and now what is going to return is it
190:33 - starts from 2 because we have given the
190:36 - start value 2 here and it's going to go
190:38 - until 29 because we have given 30 value
190:42 - here right and this is the step so every
190:46 - third value will be printed after 2 here
190:48 - so 5 will be printed then 8 then 11 14
190:53 - 17 20 23 26 and 29 every third value
190:57 - right if you write here 2 then we will
191:02 - increment in the step of 2 so this is
191:04 - how you can use range function with your
191:07 - for Loop also as I said in the last
191:10 - video you can use else statement with
191:13 - your Loops so I can also write else here
191:18 - and then after the colon in the next
191:20 - line I can print something or I can
191:22 - execute some statement so for now I will
191:25 - just print finished
191:28 - and then I'm going to run the code and
191:31 - once the loop is finished you can see
191:33 - this else statement is executed which
191:36 - prints finished so else statement will
191:39 - be executed once your for Loop is
191:41 - finished so in this way you can use for
191:43 - Loops in Python in this video I'm going
191:45 - to show you how you can use break and
191:48 - continue keywords with your python loops
191:51 - so to start with I have here two Loops
191:54 - one is a for Loop and other is a while
191:57 - loop now this for Loop takes a list and
192:00 - then print every element out of this
192:03 - list using this print function
192:06 - in a similar way while loop evaluates
192:09 - the value of I if it is less than 5 then
192:13 - it is going to print the value of I and
192:15 - then increment the value of I by 1. now
192:19 - this is all normal and we have already
192:21 - seen this kind of code now you can use a
192:24 - break keyword with your Loops in order
192:27 - to terminate the execution of loop
192:30 - immediately
192:31 - so let's see how we can use break
192:34 - keyword first and then we will see how
192:36 - to use continue keyword so here I'm
192:39 - going to give a condition inside my for
192:42 - Loop and I am going to just evaluate
192:44 - whether X is equal to 3 or not and if x
192:49 - is equal to 3 I am going to use this
192:52 - break keyword in the same way I'm going
192:55 - to use this if condition inside my while
192:58 - loop also but instead this time I'm
193:01 - going to evaluate I is equal to 3 and if
193:03 - I is equal to 3 then I am going to use
193:06 - this break inside this if condition so
193:09 - let's run the code and let's see what
193:10 - happens and you can see in the for Loop
193:13 - it has only printed 0 1 2 even though
193:17 - this for Loop is supposed to print from
193:19 - 0 to 5 it has printed until 2 from 0
193:24 - because as soon as this x value becomes
193:28 - 3 and we call break here the loop is
193:33 - terminated immediately and our program
193:35 - will come out of the loop immediately as
193:38 - soon as this break keyboard is called in
193:41 - the case of this while loop also as soon
193:43 - as this I value becomes 3 we are calling
193:47 - the break keyword and as soon as this
193:49 - break keyword is called our Loop is
193:52 - broken and the execution of code will
193:56 - come out of this Loop so until 2
193:59 - everything was okay but as soon as the
194:02 - value becomes 3 this break is called and
194:05 - then we come out of the loop let me just
194:09 - print a line here in order to separate
194:12 - these two Loops so we know that from
194:17 - where one is starting right so I am
194:20 - going to once again run the code and you
194:22 - can see for Loop prints from 0 to 2 and
194:25 - also while loop prints from 0 to 2. if
194:28 - you change the value here for example
194:30 - here you want to Avail is equal to 2 or
194:33 - not and here you want to evaluate if x
194:36 - is equal to 4 or not and then you break
194:39 - out of the loop and once again when I
194:42 - run the code you can see the for Loop
194:44 - runs only two iteration for 0 and 1 and
194:49 - as soon as the value of x becomes 2 we
194:52 - call the break keyword and we come out
194:55 - of this Loop and in the case of while
194:58 - loop as soon as this value of I becomes
195:00 - 4 we come out of the loop so the value
195:04 - from 0 to 3 is printed now let's see how
195:07 - we can use a continue keyword instead of
195:10 - this break keyword so instead of this
195:13 - break keyword I will use a keyword
195:16 - called continue here and also in the
195:18 - while loop also I'm going to use this
195:20 - keyword called continue and I'm going to
195:23 - run the program and let's see what
195:25 - happens
195:26 - so now when you see here so you can see
195:29 - here for Loop starts from printing 0 1
195:32 - and as soon as the value of x becomes 2
195:35 - this condition is met and this continue
195:39 - is called and as soon as this continue
195:42 - keyword is called Everything whatever
195:45 - code comes after this continue keyword
195:49 - will be skipped and your program
195:51 - execution goes once again to a for Loop
195:54 - for the next value so you can see in
195:58 - case where X is equal to 2 and continue
196:01 - is called this statement is not executed
196:06 - because as soon as we execute continue
196:10 - in our Loop then that iteration is
196:13 - skipped and all the code after the
196:17 - continue will not be executed okay so we
196:20 - go to the next iteration so that's why 2
196:24 - is not printed because this was kept in
196:27 - case of 2 and then directly 3 is printed
196:31 - and then 4 and 5 is printed in case of
196:34 - while loop also as soon as the value of
196:37 - I becomes 4 you can see 4 is not printed
196:42 - here you can also change this value to 2
196:45 - and then I'm going to run the program
196:47 - once again and you can see while loop
196:50 - prints 0 1 and why it prints 0 and 1 so
196:54 - because as soon as the value of I
196:56 - becomes 2 this continue keyword is
196:59 - called and after that this iteration is
197:02 - skipped and also because this iteration
197:05 - is kept these two lines of code are not
197:09 - executed and because this line of code
197:12 - is not executed that's why the value of
197:15 - I is not incremented and the value of I
197:18 - always remains 2 and that's why this
197:22 - becomes a infinite Loop right so instead
197:25 - of increment the value of I at the last
197:28 - line we can increment the value of I
197:30 - just after this condition check whether
197:34 - I is less than 5 or not and then we run
197:38 - the code now you can see it prints 1 3 4
197:43 - and 5. so now What's Happening Here is
197:46 - initially the value of I is equal to 0
197:49 - and this condition is evaluated and then
197:53 - we first increment the value by 1 and
197:57 - that's why it starts with the printing
198:00 - of one by using this print function and
198:03 - as soon as I is equal to 2 this continue
198:06 - is called and that is why here 2 is not
198:10 - printed because as soon as the value of
198:12 - I becomes 2 this continue is called and
198:15 - every code or every statement after the
198:18 - continue will be skipped for that
198:21 - iteration that's why 2 is not printed
198:24 - here so in this way you can use break
198:27 - and continue keywords with Loop in this
198:30 - video I'm going to show you what is a
198:32 - function in Python and how to use
198:34 - functions in Python so first of all what
198:37 - is a function so a function is a group
198:40 - of statements within a program that
198:43 - performs a specific task now functions
198:46 - can be of two types one is built-in
198:50 - function and other is user defined
198:53 - function built-in function we have
198:55 - already seen that print is a built-in
198:58 - function or for example input is a
199:01 - built-in function or for example Min is
199:04 - a built-in function and so on now
199:07 - usually function does one task at a time
199:10 - so you can see this print function only
199:13 - prints something whatever input you give
199:16 - here it is going to print it input
199:18 - function takes some input from the user
199:21 - Min function finds out the minimum out
199:24 - of some values so a particular function
199:28 - do one task at a time now let's see how
199:32 - we can define a function so to define a
199:35 - function you use a keyword Def and then
199:38 - you give the name of the function so
199:41 - name of function and after the name of
199:44 - the function you give these parentheses
199:47 - and you provide number of arguments or
199:51 - parameters so for example a r g one
199:54 - comma a r g two comma a r g three and so
200:01 - on so you can give any number of
200:03 - arguments to your function
200:06 - now after this ending parenthesis you
200:09 - give this colon and then under this
200:13 - function signature you write some
200:16 - statements which you want to execute
200:19 - when this function is called so for
200:22 - example if you want to print something
200:23 - you can print something or if you want
200:26 - to calculate something for example the
200:28 - product of two or three variables or a
200:32 - sum of two or three variables you can do
200:35 - under this function declaration so let
200:38 - us take an example of function and let's
200:40 - see how we can Define our real life
200:44 - function so I am going to define a very
200:46 - simple function which is going to add
200:49 - two values so I am going to name it as a
200:52 - sum and for example it takes two values
200:56 - one is let us say ARG one and other is
201:00 - ARG two and then after the colon I want
201:05 - to add these two values so I can just
201:08 - write print here and then I can write
201:11 - ARG one plus R2 so this is a very simple
201:16 - function which takes two arguments and
201:19 - then add these two arguments and print
201:23 - them so this is how you declare a user
201:26 - defined function now after declaring a
201:29 - function you need to also call this
201:32 - function so in order to call the
201:34 - function you just use the name of the
201:36 - function and then you provide the
201:38 - arguments which is required by the
201:41 - function so our function requires two
201:43 - argument right now ARG one and R2 so we
201:46 - are going to provide these two values
201:49 - let us say I want to provide 15 as the
201:52 - argument one and I will provide 60 as
201:56 - the second value
201:57 - now let us run the code and let's see
201:59 - what happens so when we run the code you
202:02 - can see our function prints 75 which is
202:07 - the sum of these two values which we
202:10 - have provided as an argument to this
202:13 - function now also if you remember this
202:16 - plus operator you can also use to
202:20 - concatenate two strings so I can use
202:24 - this sum function and this time I am
202:26 - going to provide for example hello as
202:30 - the first parameter and then world as
202:33 - the second parameter and then I'm going
202:36 - to run the program and it's going to
202:38 - print hello world in addition we can
202:41 - provide to float numbers here for
202:43 - example I will provide
202:46 - 15.647 and the second argument I am
202:49 - going to provide is
202:50 - 80.258 and this is also allowed so I am
202:54 - going to just run this code and it gives
202:57 - gives us the sum of these two values so
203:01 - this function sum is doing one single
203:04 - task which is to add two values whether
203:08 - it's a string or it's a number or it's a
203:12 - float value now you may also observe
203:14 - that when I provide for example as a
203:18 - first argument I will provide a string
203:20 - and as a second argument I will provide
203:23 - a number here will this work let's see
203:27 - so it is going to give us an error and
203:30 - this error says can't convert int object
203:33 - to string implicitly so this is a
203:36 - problem
203:37 - so to solve this problem we can provide
203:40 - here a simple condition and we are going
203:42 - to check the type of both the arguments
203:45 - so if type ARG one
203:50 - is not equal to type ARG two this should
203:56 - be ARG of 1 not agr1 so let me just
203:59 - change this here and if the type of Arc
204:04 - one is not equal to R2 we are going to
204:08 - just use this keyword which is return
204:12 - so this return keyword is used to return
204:15 - something so you can return for example
204:18 - 0 here or any string here and when you
204:22 - write this return function without any
204:25 - value here it's going to return Nothing
204:27 - But as soon as this return keyword is
204:31 - called nothing after that will be
204:34 - executed so even though you are
204:36 - returning nothing from here then also
204:38 - this statement will not be executed so
204:41 - whenever return is executed after that
204:44 - all the statements which are under the
204:47 - return will not be executed also we can
204:51 - print a message here that please give
204:54 - the args of same type okay and let's run
204:58 - the code now
204:59 - and you can see now it prints this
205:03 - message which says please give args of
205:06 - same type so if these arguments are not
205:10 - of same type whether it is a integer or
205:13 - a string or a float value if the user
205:16 - provides first argument which is a
205:18 - string type and the second argument
205:20 - which is a integer type then this
205:24 - condition will be true and this
205:27 - statement will be executed which is
205:30 - going to print this message and then
205:32 - return is called and after this whatever
205:35 - statements are there will not be
205:38 - executed so now as I said you can also
205:40 - return some values from a function and
205:43 - here when you don't give any values
205:46 - after this return keyword it's not going
205:49 - to return anything but let's return the
205:53 - addition of two arguments using a return
205:57 - keyword so I'm going to use this written
205:59 - turn keyword here which is going to
206:02 - return the addition of these two values
206:05 - using this sum function so now what will
206:09 - happen is let us run the code once again
206:12 - and you can see this sum is executed
206:14 - this sum is executed this sum is
206:16 - executed but the result is not printed
206:20 - so in order to get the result out of
206:23 - this function when it returns something
206:26 - we need to save this return value in a
206:29 - variable so let us save this value into
206:32 - a variable and then you can use this
206:36 - variable to print the value of the sum
206:39 - so I can do something like this also you
206:43 - can directly enclose this sum function
206:46 - inside a print function and then also it
206:50 - is going to print the sum of these two
206:53 - strings so either you can assign the
206:56 - result of this sum function which is
206:59 - returning the result into a variable or
207:04 - you can use directly this print function
207:06 - to get the result and print it so I am
207:08 - going to use print with other two
207:12 - functions also so first print and the
207:17 - second print here
207:19 - and let's run the code once again
207:22 - and now you can see what happens so
207:26 - first of all it prints 75 which is the
207:29 - addition of these two numbers which is
207:31 - returned by the sum function into a
207:35 - variable a and we are printing the sum
207:38 - using this print function
207:40 - here in the next result it prints hello
207:43 - world because this sum function now
207:46 - Returns the concatenation of these two
207:48 - strings similarly this sum function is
207:51 - going to return the sum of these two
207:53 - float values and in the last result
207:56 - because the type of hello is not equal
208:00 - to the type of 15 then this message is
208:04 - printed because this condition is true
208:07 - in the last case and then return will be
208:11 - called and when this return is called we
208:14 - were printing whatever is returned from
208:17 - the sum function and you can see at last
208:20 - none is printed because at last this sum
208:23 - function is returning nothing because
208:26 - the type of these two arguments is not
208:29 - same so we were returning without any
208:32 - value and that is why none is printed
208:35 - here now there are few things to note
208:37 - here okay so the first thing is you can
208:41 - define a function using def keyword and
208:45 - then the name of the function and under
208:48 - these parentheses you provide the
208:51 - argument so these two are called
208:53 - arguments so this is our argument one
208:56 - and this is an argument two also you can
208:59 - use alternatively the name parameters
209:02 - for these two arguments so this is a
209:04 - parameter one and this is a parameter
209:07 - two now it's possible to return from a
209:09 - function like you can return the
209:12 - addition of two values or it's also
209:14 - possible to return nothing from a
209:17 - function so when you use return without
209:20 - a value it is not going to return
209:22 - anything now when you use this function
209:25 - somewhere its called calling a function
209:28 - now at last let us discuss about some of
209:32 - the benefits of using functions so the
209:36 - first benefit is function makes your
209:39 - code simple pillar because if you don't
209:42 - use function to execute this kind of
209:46 - code then you need to write this code
209:49 - again and again whenever you want to use
209:53 - this functionality at different places
209:55 - the second Advantage is function makes
209:58 - your code reusable so the same code is
210:03 - used to add to integer values to
210:06 - concatenate to string values to add to
210:09 - float values and it is also used to give
210:13 - the error if you provide the arguments
210:16 - of different types so that means you
210:19 - write the code once and use it multiple
210:23 - times and that results in Faster
210:26 - development of the code so if you use a
210:29 - function you can develop your code much
210:32 - faster than if you don't use a function
210:35 - and the last but not the least Advantage
210:38 - is when you declare functions you can
210:40 - test and debug your code in a better way
210:44 - so this is how you can declare and use
210:46 - functions in python in the last video we
210:49 - have seen how to declare functions and
210:51 - how to use functions in Python in this
210:54 - video also we will discuss some more
210:56 - properties which are related to
210:58 - functions in Python so let's get started
211:02 - so to start with I have a function
211:04 - called student which takes two arguments
211:07 - one is name another is age and inside
211:11 - the function we just simply print the
211:14 - value of name and age using the print
211:17 - function and when we call this function
211:20 - with the name and age it is going to
211:24 - print this kind of output now python
211:27 - allows us to set the default value of
211:30 - the arguments so after this name you can
211:33 - put equals to symbol and then put the
211:37 - default value whatever you want to set
211:39 - for or the name for example if somebody
211:43 - doesn't provide any name then you can
211:46 - just say unknown name similarly we can
211:50 - set the default age here let us say
211:52 - default age is zero if somebody does not
211:55 - provide any age with the student
211:59 - function then the default value will be
212:03 - zero
212:04 - now instead of using this student
212:07 - function like this let's say I don't
212:09 - provide any argument to this student
212:13 - function and let us run the code and you
212:17 - can see if I don't provide any argument
212:19 - to this student function the default
212:22 - values are taken so the default values
212:25 - are used when you want to make sure that
212:29 - every argument in your function should
212:32 - have some value now let's say I just
212:35 - provide a name here and don't provide
212:39 - the age and let's run the program
212:42 - and now you can see the name is
212:46 - overwritten by the argument what we have
212:49 - provided here right so default value
212:52 - will be this one if no argument is
212:55 - provided similarly if we give the value
212:58 - of age and now we run the program the
213:03 - default age is replaced by the age which
213:06 - is provided using the arguments so this
213:09 - is how you can use default values with
213:12 - the arguments of the function so let me
213:15 - just remove these default values and I
213:18 - am going to give you the next example
213:20 - which is variable length arguments
213:24 - so let's say with the name and age I
213:27 - want to provide the list of scores which
213:31 - this student has scored for different
213:35 - subjects so as a third argument I'm
213:37 - going to provide a argument called marks
213:42 - and somehow I want to provide a list of
213:44 - marks which is scored by this student
213:48 - and let me print the value of marks
213:52 - using this print function also now in
213:55 - Python you can use Asterix in front of
213:59 - your argument and this means that you
214:01 - can provide multiple arguments when you
214:04 - use this kind of notation so let's just
214:08 - provide for example we already provided
214:11 - the name and age here and let's provide
214:13 - different marks scored by the student so
214:16 - I can provide 95 for first subject then
214:19 - 74 second subject then 80 for next
214:23 - subject then 50 for next subject and
214:26 - let's say we do not know how many
214:28 - subjects the student has taken we just
214:31 - have only the information about these
214:34 - four subjects which he has taken so we
214:38 - can provide four values here and then
214:41 - let us run the code
214:43 - and now you can see name is Tom age is
214:47 - 22 and the value of marks is shown as a
214:52 - tuple okay so whenever you provide this
214:55 - Asterix in front of an argument you can
214:58 - provide the values for that argument
215:00 - using normal arguments as you provide
215:03 - for normal argument so first two
215:05 - variables are associated with name and
215:07 - age and all the other variables which
215:10 - you provide here will be assigned to
215:13 - this marks variable because it has this
215:16 - asterisks in front of it so now you can
215:19 - also use a for Loop in order to iterate
215:23 - over Tuple so X in marks for example and
215:28 - then you can print every value or you
215:31 - can access every value inside this Tuple
215:35 - and let me comment this print function
215:37 - and let us run the code once again and
215:40 - you can see for Loop has printed all the
215:43 - these marks which are there inside the
215:46 - list now if you want to use this type of
215:49 - variable length argument then I will
215:51 - suggest you to use this argument as the
215:54 - last argument of your function so that
215:56 - it will be clearer to the reader of the
215:59 - function that whatever you provide at
216:02 - the end will be the part of this last
216:05 - argument now you may ask that we have
216:08 - provided these marks for this student
216:11 - but for which subject these marks are
216:14 - given to the student
216:17 - now in Python you can also use double as
216:20 - tricks in front of your function
216:22 - argument and this means that now you can
216:25 - provide the key value pairs as a marks
216:29 - arguments so instead of using 95 I can
216:33 - also say that 95 is scored in English
216:37 - let's say and then 70 is scored in math
216:43 - and then let's say 80 is scored in
216:46 - physics and the 50 marks is scored in
216:51 - biology so now when you use these double
216:54 - asterisks in front of your function
216:57 - argument you can provide these kind of
217:00 - key value pairs which are separated by
217:03 - this equal to symbol and how you can
217:06 - access these values so let's run the
217:08 - code and let's see what happens and now
217:10 - you can see only keys are printed and
217:12 - not the values of these subjects are
217:16 - printed so let us first uncomment this
217:19 - print function and let's see what type
217:23 - of value we are getting so whenever you
217:25 - use these double asterisks the values
217:27 - are given to you in the form of a
217:30 - dictionary okay so if you use single
217:33 - asterisks the values are given to you in
217:36 - the form of Tuple but whenever you use
217:39 - these double asterisks and whenever you
217:41 - try to access this variable then this
217:44 - variable will be of type dictionary and
217:48 - you already know how to print the values
217:51 - of dictionary so you can just write
217:54 - marks. items here and then here you can
217:58 - just write key comma value and then you
218:03 - can print the value of key and value so
218:06 - I am going to just print key first of
218:07 - all and then I am going to just give a
218:10 - space here and then I am going to print
218:13 - the value right and now when we run the
218:16 - code it will give me first of all the
218:19 - key for example English math physics or
218:22 - biology and the value which is 95 70 80
218:27 - or 50. now before starting our object
218:30 - oriented programming journey in Python
218:33 - let's discuss about what is the
218:36 - difference between the procedural
218:38 - programming and the object oriented
218:41 - programming so you will have the better
218:44 - idea why we use object oriented
218:47 - programming now traditional programming
218:49 - languages such as C or Pascal were
218:53 - called procedural programming languages
218:56 - or structural programming languages
218:59 - where the basic unit was functions now
219:03 - programming in these type of procedural
219:06 - languages
219:07 - involves choosing a data structure
219:11 - and then designing the algorithm and
219:15 - then Translating that algorithm into a
219:18 - code so if this sounds little bit
219:20 - confusing let me try to explain it with
219:23 - an example so let's say you have been
219:25 - given a task to create a program for a
219:30 - passenger who wants to travel from one
219:33 - place to the another place using a cab
219:37 - service so if we think from the point of
219:40 - view of procedural programming what we
219:42 - do in the procedural programming is we
219:45 - create some global data structure which
219:50 - holds the data so here for example we
219:53 - create some kind of data structure which
219:56 - can hold the data for example in case of
219:59 - cab service which cap service is it or
220:04 - which type of cab is it and at what
220:07 - location this cab is tending all these
220:09 - kind of data we store 4 in a desktop
220:13 - structure in a global environment now
220:16 - after storing the data we design an
220:20 - algorithm so let's see what kind of
220:22 - algorithm we can develop in the
220:26 - procedural programming language for our
220:28 - cab booking service so this is a pseudo
220:31 - code which I have written so first of
220:33 - all the passenger will open the app from
220:38 - which he can book a cab and then he will
220:41 - book the cab and once the cab is booked
220:44 - he will wait for the cab and then once
220:47 - cab arrives he will sit in the cab and
220:51 - then he will reach to his or her
220:53 - destination and at the end he will pay
220:56 - the fare of the cab and this is the
220:59 - pseudo code of that algorithm and then
221:02 - we will translate this algorithm into
221:05 - actual code in procedural programming
221:08 - language now in these type of procedural
221:10 - program having languages we concentrate
221:13 - on creating the functions and the major
221:16 - drawback of using these functions is
221:20 - that data and operations on the data are
221:24 - separated that means we need a
221:27 - methodology to send this data to these
221:32 - functions so here we need to send this
221:36 - data which we have saved globally into
221:39 - these functions and these functions take
221:42 - this data either as argument or as a
221:44 - global variable and then perform some
221:47 - actions on this data and give you some
221:51 - result now these kind of functions are
221:53 - passive what do I mean by passive here
221:56 - that is these kind of function cannot
221:59 - hold any information inside them so once
222:03 - you give the data they are able to give
222:06 - you the result back after performing
222:08 - some operations but they can cannot save
222:12 - or hold the state or the data so that if
222:16 - you want to use that data in some other
222:19 - place in your code then it will be very
222:22 - difficult using these kind of functions
222:25 - which you use in procedural programming
222:27 - now let's look at the object oriented
222:31 - approach of doing things so in object
222:34 - oriented programming languages like C
222:37 - plus plus or Java or python the basic
222:40 - unit is class now if we take the same
222:44 - example of a passenger who wants to
222:47 - travel from one place to another using a
222:51 - cab service using object oriented
222:53 - programming thinking which depends upon
222:56 - the creation of object we can create
223:00 - different kind of objects for example
223:03 - for a cab we can create a class called
223:06 - cab and then we can create a class for
223:09 - cab driver and the third class we can
223:12 - create for a passenger okay so a class
223:16 - you can create for any real life object
223:19 - it can be a car it can be a motorbike it
223:22 - can be a book or employee or a person so
223:26 - object oriented programming allows us to
223:28 - create object so first of all what is a
223:31 - class so a class refers to a blueprint
223:34 - in which we can have
223:37 - data and methods okay so for example for
223:42 - our cab class what attributes this cab
223:46 - class can have for example a cab service
223:49 - which cab service we want to take
223:51 - what is the make of the cab it is it a
223:55 - Toyota or a BMW or a Volkswagen cab at
224:00 - which location this cab is right now
224:02 - what is the number plate of that cab so
224:05 - the passenger can recognize this cab so
224:09 - all these things which I have written
224:12 - here are called Data because they can
224:16 - hold some kind of data number plate has
224:19 - number plate data location have
224:21 - geolocation data may have the make data
224:25 - cab service can have a data like Uber or
224:29 - any other cab service and the other
224:31 - thing which a class can have are called
224:35 - method so earlier we have seen that we
224:38 - can create functions and when these
224:40 - functions you use inside a class they
224:43 - are called method okay so functions
224:46 - inside a class are called method now the
224:50 - data inside this this object or class is
224:54 - called attributes or the member
224:57 - variables which can hold some data and
225:01 - using this class we can create object of
225:05 - the cab class which means we can create
225:08 - different object using a same class and
225:12 - how to create object using classes we
225:15 - will see in the next video in the real
225:17 - life example so don't worry if you don't
225:20 - understand how these things works I will
225:23 - give you a real life example so you will
225:25 - be able to understand in a better way
225:28 - now what is an object an object is a
225:31 - software unit that combines data and
225:34 - methods okay so we have this data here
225:38 - and then we have the methods inside the
225:41 - class and object is able to combine both
225:45 - of them which is data with the methods
225:49 - now these objects for example a cab
225:51 - object object and the passenger object
225:53 - can exchange the data between them also
225:57 - so data is interchangeable between for
226:02 - example the passenger object and a cab
226:05 - object so let's rewind once again what
226:09 - we have learned about object oriented
226:11 - programming
226:12 - so the basic unit in object oriented
226:15 - programming is a class and a class
226:18 - refers to a blueprint which can have the
226:22 - data and methods Now using a class we
226:27 - can create objects and what is a object
226:30 - object is an instance of a class and
226:34 - each object can have its own data and
226:38 - Method and an object is able to store
226:40 - the state of some kind so at which
226:44 - location this cab is right now so this
226:48 - is a state and an object is able to
226:51 - store that state now in procedural
226:53 - programming if you remember there is no
226:56 - relation between the data and the method
226:59 - right we need to provide the data to the
227:03 - method which are separate entities in
227:05 - the procedural programming language now
227:07 - these data members are called attributes
227:11 - or member variables us and these
227:14 - functions which you define inside a
227:16 - class are called Methods and what are
227:19 - some of the key differences between
227:21 - procedural programming language and
227:24 - object oriented programming language the
227:26 - first is the unit in procedural
227:28 - programming language is function and on
227:31 - the other hand in object-oriented
227:33 - programming the unit is class the second
227:36 - is the procedural programming
227:38 - concentrate on creating functions while
227:41 - object oriented programming starts from
227:44 - isolating classes and then they can have
227:48 - data and methods inside it in procedural
227:53 - programming language the data and the
227:55 - functions are separate and in object
227:58 - oriented programming language data and
228:00 - methods are not separate they are the
228:03 - part of a single object of a class now
228:07 - if all this seems to be little confusing
228:10 - to you don't worry you You are not alone
228:13 - and I will try to solve this confusion
228:17 - in the next video in which I will tell
228:20 - you how to create the classes and how to
228:23 - use classes in Python in this video I'm
228:26 - going to show you how you can create
228:28 - your first class in Python now if you
228:32 - haven't seen my last video in which I
228:35 - have discussed what is object oriented
228:38 - programming and what are classes I will
228:41 - highly recommend you to watch that video
228:43 - because this will be a continuation of
228:46 - that video
228:48 - so let's create a class in Python so for
228:52 - that I will create a new project so
228:55 - let's create a new project in pycharm so
228:58 - just click on file here and then click
229:00 - on new project
229:01 - and then the project name I'm going to
229:04 - give here is oops and then I will just
229:07 - click on Create and I will choose this
229:11 - option which says open in current window
229:13 - and also this option which is added to
229:17 - currently opened project which is going
229:19 - to create this project in this window
229:22 - itself which is already open so now you
229:25 - can see we have a empty project here and
229:29 - inside this project let's create a
229:31 - python file so right click on the
229:33 - project and then new and then we are
229:35 - going to create a new file and let's
229:38 - create a class called car so I'm going
229:42 - to name the file name as car because we
229:45 - are going to create the car class
229:49 - now in order to create a class in Python
229:52 - you use a keyword class
229:55 - and then you give the name to your class
229:59 - so the class name in our case is car and
230:02 - then you give this colon and for example
230:06 - I write here a keyword called pass now
230:11 - when you write this keyword after the
230:14 - Declaration of a class this means that
230:17 - it is a empty class you can also use
230:21 - this pass keyword to create an empty
230:24 - method so this keyword pass is used to
230:28 - create an empty class or an empty method
230:32 - now here after the class declaration
230:34 - let's see how we can create an instance
230:38 - of a class so it's really easy to create
230:40 - an instance of a class so let's create a
230:42 - first object and I'm going to name it as
230:45 - Ford which is a car brand and then you
230:48 - use your car class name and use these
230:52 - parentheses here okay so this here Ford
230:57 - is an object or you can also say it's an
231:01 - instance of the Class Car in a similar
231:05 - way we can create multiple objects for
231:07 - example Honda is another car brand and
231:12 - you can create the Honda object using
231:15 - this class car once again you can create
231:19 - a new object for example Audi and then
231:22 - you can once again use this car class to
231:25 - create this object
231:27 - so what we have done till now we have
231:30 - created three object from the class car
231:34 - now in the previous video I have told
231:36 - you that you can associate some data
231:39 - with your object so let's associate some
231:43 - data so for example Ford we can
231:46 - associate uh attribute called speed
231:49 - right so we can assign the speed for
231:54 - example 200 here for a Honda we can
231:58 - assign speed let us say 220 and for Audi
232:04 - we can assign the speed let us say 250.
232:08 - so speed here is called the attribute
232:10 - and whenever you create an empty class
232:13 - using this pass keyword you can add
232:16 - these attributes on the fly so you can
232:20 - see we have added these attribute after
232:23 - the Declaration of the class and of
232:27 - after the creation of the objects let's
232:30 - add some more attribute to these
232:33 - instances or the objects so a car can
232:36 - have the color so I'm going to just
232:39 - write color and the Ford has let's say
232:43 - the red color and let me just copy and
232:47 - paste here and let us say the Honda have
232:52 - the blue color
232:54 - and we have the Audi of black color so
233:00 - once again color is an attribute here
233:02 - now if you want to print these attribute
233:05 - you can use this print method and then
233:08 - for example we want to print the speed
233:11 - of Ford and the color of Ford then we
233:17 - can do it like this and let's run the
233:19 - code so in order to run this code first
233:22 - of all when you create a new project and
233:24 - a new python file you need to right
233:27 - click on this file and then click on run
233:31 - the file name whatever is your file name
233:33 - my file name was car so you can see now
233:37 - the result is printed here first is the
233:40 - speed and second is the color of an
233:45 - instance Ford similarly you can print
233:47 - the color and speed of Honda and Audi
233:51 - objects also now if you want to change
233:53 - some attribute it's also possible so
233:57 - let's say I want to change the speed of
234:00 - Ford object so I'm going to use Ford dot
234:03 - speed once again and this time I want to
234:07 - assign 300 speed to this attribute let's
234:11 - say we also want to change the color of
234:14 - the forward object so I am going to just
234:17 - use 4 dot color and this time I want to
234:21 - use the color blue here and let's once
234:24 - again we will try to print the color and
234:29 - speed of the object fold
234:31 - and now you can see this result so
234:34 - before the speed was 200 and the new
234:37 - speed is 300 for the object forward and
234:40 - before the color was red and the new
234:43 - color is blue for this object forward
234:45 - now if you have followed the last video
234:48 - this speed and color is the data so
234:52 - speed and color are the variables which
234:54 - holds some data inside them but still we
234:58 - haven't added any Behavior or methods to
235:02 - our class car and that we will do in the
235:06 - next video now let's create a new class
235:09 - because
235:10 - understanding classes in any language is
235:14 - difficult so let me give you another
235:16 - example so this time I'm going to create
235:19 - a new python class and I'm going to name
235:22 - this python class as a rectangle and
235:26 - then press OK which is going to create
235:28 - this class and to create a class you
235:31 - already we know you use the keyword and
235:34 - the name of the class and then the colon
235:36 - and we will also make this class an
235:40 - empty class using this pass keyword and
235:43 - in order to create an instance I'm going
235:45 - to just write rect 1 which is the first
235:50 - object using the rectangle class and
235:54 - then I'm going to create rect 2 which is
235:58 - the second object using this rectangle
236:01 - class and now what are the attributes
236:04 - which we can relate to the rectangle a
236:08 - rectangle have a width and the height so
236:11 - let's add the rivet and height so let me
236:15 - use the first object and let us say
236:17 - height is 20 for the rectangle 1 and
236:21 - then we are going to use the second
236:24 - object and once again we are going to
236:26 - add the height for the second rectangle
236:30 - let's say the height of second rectangle
236:33 - is 30 similarly we can add the width to
236:38 - the rectangle so width is equal to let
236:41 - us say its 40 and rect 2 object have the
236:47 - width let's say 10. so what we have done
236:49 - here we have created a rectangle class
236:53 - and then we have created two instances
236:55 - of the rectangle class rect 1 and rack 2
236:59 - which are also called objects and then
237:02 - we have added some attributes to our
237:06 - objects which are height and width now
237:09 - let's say you want to calculate the area
237:11 - of these two rectangles I can use the
237:15 - print method and then what is the area
237:17 - of the rectangle it's the multiplication
237:20 - of the height and the width right so I
237:25 - can use this rectangle one object and
237:29 - then I can call the height and width of
237:33 - this object and this will give me the
237:36 - area of the rectangle 1 using this
237:40 - multiplication operator similarly I will
237:44 - do the same for the object 2 here and
237:48 - let us run the code and if you remember
237:49 - what we need to do if we create a new
237:52 - python file we need to right click on
237:55 - the file and then click on run right so
237:59 - once the file is running you can choose
238:03 - from here which file you want to run but
238:05 - at least once you need to right click on
238:08 - the file and just click on run whatever
238:10 - file name you have so you can see the
238:13 - area of rectangle 1 is 800 and the area
238:17 - of rectangle 2 is 300 so this is how you
238:21 - can create a very simple class in Python
238:24 - in this video I am going to show you how
238:26 - to use init method in Python and how to
238:30 - use a keyword called self in Python so I
238:34 - will continue with the class which I
238:36 - have created in the last video and this
238:40 - was the class which we have created and
238:42 - we have used this special keyword pass
238:45 - there and pass we were using to create
238:48 - an empty class now I'm going to remove
238:52 - this pass and I'm going to add a method
238:55 - called init here so I'm going to just
238:59 - write Def and then underscore underscore
239:02 - init and then press enter and you can
239:06 - see this init method is created here so
239:10 - this is like a normal method with double
239:13 - underscore in front and back of this
239:17 - init keyword and you will also see the
239:20 - self keyword is already added as the
239:24 - first argument of this method now this
239:27 - init method serves as a Constructor for
239:31 - the class so usually it is used to
239:35 - initialize some attributes or some
239:39 - functions because this is the first
239:42 - method which will be called when you
239:45 - create an instance of a class so here we
239:49 - are creating an instance of a class and
239:52 - this init method will be the first
239:54 - method which will be called when this
239:57 - object or instance will be created so
240:01 - let's check what I am saying so let's
240:03 - say I want to print inside this init
240:05 - method that the underscore underscore
240:09 - init underscore underscore is called and
240:15 - let me run this code so I will change
240:16 - this to car and then run this code and
240:20 - now when I see this result you will see
240:23 - this line is called three times because
240:27 - we have created three instance from the
240:30 - same class okay so every time this
240:33 - instance is created this print is called
240:37 - and that is why this line is printed
240:40 - three times and everything else will be
240:44 - printed after that whatever we were
240:46 - printing for example speed or color of
240:48 - the car will be printed after that now
240:52 - one important thing to notice here is I
240:55 - said init serves as a Constructor it's
240:59 - not a Constructor although it would be
241:02 - tempting to call this init method as a
241:04 - Constructor actually it's not a
241:07 - Constructor but it behaves like a
241:10 - Constructor because in it is the closest
241:14 - thing we are going to get in Python to a
241:17 - Constructor because it is the first
241:20 - method which is called whenever an
241:24 - instance is created now if you are
241:26 - familiar with other object oriented
241:28 - programming languages like Java and C
241:31 - plus plus there is a destruct also in
241:35 - those kind of languages with classes now
241:38 - python doesn't have any Destructor
241:41 - because python has an automatic garbage
241:45 - collections so you don't need a
241:47 - Destructor in Python because python will
241:50 - take care of anything which should be
241:52 - taken care of now as I said usually init
241:56 - method is used to initialize something
241:59 - so instead of initializing the value of
242:03 - speed and initializing the value of
242:06 - color let me just comment this code
242:09 - first of all so I'm going to select
242:11 - whatever I want to comment and then I
242:13 - can press Ctrl forward slash to comment
242:17 - all the line you can also go to code and
242:20 - then use this option which says comment
242:23 - with line comment and you can see the
242:25 - shortcut for that control plus forward
242:28 - slash okay so this is going to comment
242:30 - your lines of code and now I want want
242:34 - to use the speed as the initialization
242:37 - value so after the self keyword I can
242:41 - give the next parameter which is speed
242:45 - here and then the third parameter is the
242:49 - color here and now to print the value of
242:52 - speed and color I can use once again
242:54 - print and then first of all I am going
242:57 - to print the speed and then I am going
243:00 - to print the color attribute and as soon
243:04 - as you do this and when you try to run
243:07 - this program it will give you an error
243:09 - so let me run the program and it will
243:11 - give me the error it says in it missing
243:15 - two required positional argument which
243:18 - is speed and color okay so once you
243:22 - create an init method and provide any
243:26 - arguments other than self self is
243:29 - automatically provided by python
243:32 - whenever you you create an instance of a
243:35 - class but other than self when you write
243:38 - for example speed and color arguments
243:41 - here you need to provide those argument
243:43 - at the initialization of your class so
243:48 - here first we will give the speed inside
243:51 - these parentheses for example 200 and
243:54 - then the color for example red here okay
243:58 - same we need to do for the other two
244:03 - instantiation of the car class so let me
244:07 - do it for the second instance and also
244:11 - for the third instance and now let's run
244:15 - the code once again and let's see what
244:17 - happens so now you can see everything
244:21 - works fine and no error is given to us
244:24 - and you will also see because this print
244:28 - is called first you can see the speed is
244:32 - printed first and then the color color
244:34 - and then this line is printed after that
244:37 - and that means we will get the speed
244:39 - color and this line three times for
244:43 - every instance with different values
244:46 - whatever values you have provided for
244:49 - the instantiation of your car class now
244:52 - usually you provide these arguments
244:55 - because you want to initialize the value
244:57 - of speed so let's try to access the
245:01 - value of the Ford object speed and color
245:05 - so let me just uncomment this code and
245:08 - let's run this code and it will give us
245:11 - an error you can see this says that car
245:14 - object has no attribute called speed
245:17 - right so what is the error because we
245:21 - have provided these attribute speed and
245:24 - color but we haven't assigned these
245:26 - values to any attribute inside this car
245:30 - class earlier what we have done is we
245:33 - have have assigned the speed value to a
245:37 - speed attribute and the color value to
245:39 - the color attribute but we have already
245:41 - commented those codes so how can we
245:44 - assign the speed and color to the car
245:47 - object so it turns out that you can use
245:51 - the self keyword and then using the self
245:54 - keyword you can assign the value to the
245:57 - current object so self is essentially
246:00 - the current object okay its similar to
246:04 - using this in C plus plus or Java if you
246:08 - are familiar with those two languages so
246:11 - you use self Dot and then the name of
246:14 - the attribute for example is paid in our
246:16 - case is equal to whatever argument you
246:19 - provide for Speed so we have provided
246:21 - the same argument which is speed is
246:23 - itself once again I can use self to set
246:27 - the value of color here so self dot
246:31 - color is equal to color let me remove
246:34 - this semicolon because it is not
246:35 - required and now when I run this code
246:39 - you will see that there is no error now
246:43 - so because we have now used the self
246:46 - keyword to set the attributes of speed
246:49 - and color so we can easily access the
246:52 - values of the speed and color using any
246:55 - object of the car class so let me once
246:58 - again minimize this so now let's talk
247:00 - about the self keyword here so whenever
247:04 - you create a class the first argument of
247:07 - every method you need to provide this
247:10 - keyword self now it's not necessary to
247:13 - provide this same keyword which is self
247:16 - but it is a convention to write this
247:18 - self as the first parameter the first
247:21 - parameter can be for example a b c it
247:25 - does not matter but you need to use this
247:27 - ABC here also as self and it will be
247:31 - totally fine but it's a convention that
247:34 - we use the self keyword in order to
247:37 - indicate that this is the current object
247:40 - so every method you will create you need
247:43 - to give this self keyword as the first
247:46 - argument of your method inside a class
247:49 - now you may also observe that here when
247:52 - I am initializing this class instance I
247:56 - am not providing any self keyword so
247:59 - even though in the init method I have
248:01 - provided three arguments I am only
248:04 - providing two arguments here so it turns
248:07 - out that you don't need to provide the
248:09 - first argument which is self it will be
248:12 - automatically be provided to your class
248:15 - so you just need to give the next
248:18 - argument whatever argument you give
248:20 - after the sell so we have given speed
248:24 - and color after the self argument so we
248:26 - just need need to provide those
248:28 - arguments after whatever you use after
248:31 - this keyword called self so let's do the
248:33 - same thing with our second class which
248:35 - is the rectangle class and here also we
248:38 - have created this empty class so let's
248:41 - remove this pass keyword and instead of
248:44 - this pass keyword we will use this init
248:47 - method which is Def underscore
248:49 - underscore init underscore underscore
248:52 - and here after the self we will provide
248:56 - the height as the second argument and
248:59 - the width as the third argument OK and
249:04 - then we are going to initialize the
249:07 - attributes height and width using this
249:10 - self keyword so self dot height is equal
249:14 - to height self dot width is equal to
249:19 - width okay so this is how you can
249:22 - initialize your attribute using this
249:25 - init method and now now when you do this
249:28 - you don't need to initialize these
249:31 - values like this you can directly
249:34 - initialize this height and width using
249:37 - these parentheses so let me provide
249:40 - these values let us say 20 and 60 for
249:43 - the first rectangle and let us say 50
249:46 - and 40 for the second rectangle and when
249:50 - we run this code let me just change the
249:53 - file here and then run the code and you
249:56 - will see it will print the area once
249:59 - again here so this init method is used
250:02 - to initialize your attributes or
250:05 - whatever you want to initialize at the
250:07 - start of your class you will do all
250:11 - those initializations inside this init
250:15 - method so this is how you can use init
250:17 - method and self keyword in Python in
250:20 - this video also we will discuss more
250:22 - about init method and the self keyword
250:25 - so let's get started started so here I
250:28 - have a very simple class called hello
250:30 - and in this class I have a method called
250:33 - init and I'm just instantiating this
250:36 - class and creating an object out of this
250:39 - hello class
250:41 - now the first question which may arise
250:43 - is what if I don't want to use this self
250:47 - keyword you can see directly that there
250:50 - is a red squiggly line appears here
250:53 - which means an error and this we can
250:56 - also see when we run the program so when
250:58 - we run the program it's going to give us
251:01 - this error which says init takes zero
251:04 - arguments but given one now you may ask
251:08 - why it's saying that we have given one
251:11 - argument to the initialization of this
251:14 - hello class so as I said in the last
251:17 - video that self is automatically passed
251:20 - when you initialize a class and that's
251:23 - why it says that one argument is given
251:27 - but in it takes zero argument because
251:29 - here we haven't given any argument
251:32 - inside these parentheses so self is
251:36 - absolutely
251:38 - important so you need to give the self
251:40 - now the second question you may ask is
251:43 - can I create multiple init method inside
251:46 - a class so let's see if it's possible or
251:49 - not so here I am going to give this pass
251:52 - keyword which means that this init
251:55 - method is an empty method and let me
251:58 - create a second init method and this
252:01 - time I want to add one more parameter
252:04 - here let us say name okay so we have
252:08 - provided two init methods here and let's
252:11 - see what happens so this is the
252:14 - instantiation of class where I haven't
252:16 - given any argument to this instantiation
252:21 - so I am going to run the program and
252:23 - what it says it says in it missing one
252:27 - required positional argument which is
252:30 - name so it turns out that it's not
252:34 - possible to provide multiple in it
252:37 - methods in your python class if you
252:42 - provide multiple init method in your
252:44 - python class the init method which you
252:46 - define at last will be considered as the
252:51 - main init method and other will be
252:54 - overwritten okay so whatever init method
252:58 - you define at last that signature of
253:01 - init method will be valid and all the
253:04 - other init method which you will create
253:07 - will be overwritten by the last init
253:10 - method okay so let's provide the
253:13 - argument name here so I am going to just
253:16 - provide one argument here and then run
253:19 - this code and it works perfectly fine
253:22 - okay let me just reverse this order so
253:26 - instead of using this init at the top I
253:29 - will use the init which does not take
253:31 - any parameter at the bottom now okay and
253:35 - we provide this argument and let us run
253:38 - the code
253:39 - and now once again we get the error
253:42 - which says in it takes one positional
253:45 - argument but two were provided so one
253:49 - positional argument means that this init
253:52 - only takes the self argument and nothing
253:55 - else but here self is provided
253:58 - automatically but we are providing an
254:01 - extra parameter here which is not
254:04 - required and that means this init which
254:07 - we have defined later is valid and this
254:11 - previous init is not valid so always
254:14 - remember it's not allowed to use
254:16 - multiple init method in the python class
254:20 - but if you do this the last init method
254:23 - will be a valid init method and all the
254:27 - other init method will be the invalid
254:30 - init method now one more question you
254:32 - may ask here what if I want to create
254:35 - both kind of instances one which takes
254:39 - no argument here and other which takes
254:42 - one argument or multiple arguments here
254:46 - so the answer is in my previous video in
254:49 - which I have shown you how to provide
254:51 - default value to your arguments so let's
254:56 - say I provide a default value to my
254:58 - argument here
255:00 - now I will create two instances of the
255:05 - same class one takes no argument and
255:09 - other takes one argument and when I run
255:11 - this code no error appears here okay so
255:15 - if you want to create a init method with
255:18 - multiple parameters you can either use
255:21 - this default value for your init method
255:25 - parameters or what you can do here is
255:28 - you can use this parameter which takes a
255:31 - tuple so in the previous video we have
255:33 - seen that we can provide an argument
255:36 - with Asterix in front of it and this
255:40 - means that we can provide multiple
255:42 - parameters to our method here and when
255:46 - we run the code it's also valid we can
255:49 - also provide multiple parameters here
255:52 - and it will also be totally valid so I'm
255:56 - going to run the program once again and
255:58 - you can see it's totally valid so if you
256:00 - want want to provide multiple parameters
256:02 - to your init method you can use this
256:06 - kind of notation or you can provide the
256:08 - default value to your parameter or the
256:13 - last thing you can use is you can use
256:15 - for example this type of argument which
256:18 - takes the keyword so KW args here okay
256:23 - and this also we have seen whenever you
256:26 - use this kind of notation that means you
256:29 - want to provide the dictionary right key
256:32 - value pair so let me provide some kind
256:35 - of key value pair let us say name is
256:38 - equal to some kind of name here and then
256:41 - let me run the code and its totally
256:43 - valid it does not give us any error so
256:46 - even though multiple init methods are
256:48 - not allowed in Python you can use these
256:51 - type of notations in order to give
256:54 - variable length argument in your init
256:57 - method now let me just remove all the
257:00 - parameters from here and this
257:03 - instantiation from here also and let us
257:06 - take the next question
257:08 - so let us say I want to remove this pass
257:11 - keyword from here and here I want to
257:15 - initialize some values so self dot name
257:19 - is equal to let us say we will provide
257:22 - some name so I am going to provide a
257:25 - argument called name and cell dot name
257:29 - is equal to name here
257:30 - and then let us say self dot age here
257:34 - and we provide some value which is not
257:38 - taken from the argument but we provide
257:41 - some static value here is it allowed yes
257:45 - it's totally allowed right so if you
257:48 - want to provide some default value for
257:51 - your attribute you can absolutely
257:53 - provide that without even passing it as
257:57 - an argument so it's not necessary that
258:00 - all the attribute values you need to
258:02 - provide from this argument list you can
258:06 - provide any default or static value here
258:08 - which is not coming as an argument so I
258:11 - hope that clarifies some more details
258:14 - about this init method in this video we
258:16 - will learn how to use encapsulation in
258:19 - Python
258:20 - encapsulation is one of the most
258:23 - important principle in object oriented
258:26 - programming so let us get started I will
258:28 - be using this car class and the
258:30 - rectangle class which we have been using
258:33 - in the previous videos also and let me
258:36 - remove these print statements because we
258:40 - do not want them right now now let us
258:42 - say we want to change the value of speed
258:45 - so if you want to change the value of
258:47 - speed you can simply take your object
258:51 - for example Ford dot your attribute name
258:54 - for example speed and then you can
258:56 - directly change it for example 300 and
258:59 - when I run the program it's going to
259:01 - print the new speed which is 300
259:04 - initially we have set the speed to 200
259:07 - in here we can also put lets say the
259:10 - speed as string which is very stupid but
259:14 - will it work it works you can see here
259:16 - and this can break the function in which
259:18 - the speed is used so therefore it is
259:21 - very important that we protect our data
259:24 - and only give the access to our data to
259:29 - the other users so encapsulation is
259:31 - particularly important when you want to
259:34 - give your code to some other people
259:37 - because they might want to change your
259:39 - code so let's see how we can encapsulate
259:42 - our code so to encapsulate our code we
259:46 - create functions so let us create a
259:48 - first function which is to set the value
259:51 - of speed so I am going to just say set
259:54 - underscore speed and inside the
259:57 - parenthesis it is going to take self as
260:00 - the first argument which is the default
260:01 - and second is the value of speed so so I
260:06 - can say value here right and then once
260:10 - we have the value of speed we can just
260:12 - call Self dot speed is equal to Value
260:17 - similarly we can create a get method for
260:21 - the speed so right now we have created
260:23 - the set method to set the speed and now
260:26 - we are going to create a get method to
260:29 - get the speed and in order to get the
260:32 - speed we do not need to pass any
260:35 - argument we just need to return this
260:38 - speed which is already set so we can
260:41 - just write return and then self dot
260:44 - speed so we have created two functions
260:46 - set and get these are also called Setter
260:49 - and getter for the attribute which is
260:52 - speed in our case so let us use these
260:55 - functions instead of this kind of
260:58 - setting of data so first of all I'm
261:00 - going to call this Ford object dot set
261:04 - speed method out of this object and then
261:07 - I am going to pass the new speed using
261:09 - this set method now in order to get the
261:12 - speed I can write instead of this 4 dot
261:15 - speed I can just write the four dot get
261:18 - speed which is going to give me the
261:21 - speed of this forward object so I am
261:24 - going to run the code and you can see it
261:27 - prints the speed which we have set using
261:30 - the set method but still will this
261:33 - protect your data let's see so I am
261:36 - going to once again try to use 4 dot
261:40 - speed and then I will try to set the new
261:44 - value of of speed will it be a problem
261:47 - no so you can see when I try to get the
261:50 - speed the new speed is set and we want
261:53 - to prevent this kind of setting of data
261:56 - using this equals to symbol so we need
262:00 - to somehow make our attribute private
262:04 - now if you are familiar with other
262:06 - object oriented programming languages
262:08 - like Java or C plus plus they use the
262:12 - keywords like public private or
262:15 - protected in order to mark their
262:17 - attributes or the member variables as
262:20 - the private or public or protected but
262:23 - python doesn't have any of these
262:26 - keywords so how we can make our data
262:29 - private so let me give you first of all
262:31 - an example so I am going to go to this
262:34 - class which is hello and here I'm going
262:37 - to set some values so first value is for
262:41 - example self dot a is equal to 10
262:46 - second value is self dot underscore B is
262:51 - equal to 20 and the third value is self
262:55 - dot underscore underscore C is equal to
262:59 - Thirty so we have created three member
263:02 - variables in this hello class one is a
263:06 - second is underscore B and the C is with
263:10 - two underscores in front of it and let
263:13 - us try to access all these three values
263:16 - so I am going to just use the print
263:19 - method and then the hello object dot a
263:23 - and similarly I will use this print to
263:27 - get the value of dot underscore B and
263:33 - also dot underscore underscore C and let
263:37 - us try to run this program and let's see
263:40 - what happens and you can see here the
263:42 - first value which is printed here is 10
263:44 - which is the value inside the a variable
263:47 - so this code was executed successfully
263:49 - now we can see here that 20 is also
263:53 - printed that means this code is also
263:55 - executed successfully but at the time of
263:58 - underscore underscore C when we want to
264:01 - use this underscore underscore C outside
264:06 - the class it says hello object has no
264:10 - attribute called underscore underscore C
264:13 - and this is the point so underscore
264:16 - underscore you can use to make your
264:19 - attribute private okay so this is a
264:22 - convention there is no keywords like
264:25 - private in Python that's why python uses
264:28 - this kind of convention in which
264:31 - whenever you use double underscores it
264:34 - makes your data private when you use
264:37 - single underscore that also means that
264:39 - it's a private variable but this is only
264:41 - a convention Nothing Stops you to change
264:44 - the value of underscore or B or
264:48 - accessing the value of underscore B ok
264:50 - so if you truly want to make your data
264:54 - private then use double underscore in
264:57 - front of your variable when you use
265:00 - single underscore that means it's a
265:03 - partially private variable and it's only
265:06 - a convention ok so let us go to our car
265:10 - class once again and now we know that we
265:13 - can add double underscore in front of
265:17 - our variable name so we have two
265:19 - variables here one is speed so let us
265:22 - add double list underscore in front of
265:24 - speed and also let us add double
265:26 - underscore in front of this color
265:29 - variable to make both of them private so
265:32 - I'm going to change this value of speed
265:34 - in getter and Setter also and now let's
265:37 - try to access this value using this
265:40 - forward object which is underscore
265:42 - underscore speed now let us try to run
265:44 - our program so I am going to change the
265:46 - file and then run our program and you
265:48 - will see that it's going to give us an
265:51 - error and this error says the car object
265:54 - has no attribute called color because
265:56 - this variable color is private now also
266:00 - you will observe that the value of the
266:04 - speed is 300 which is set by this set
266:08 - function even though we have set the
266:11 - speed again to 400 using this underscore
266:14 - underscore speed but this speed is not
266:18 - changed right so we cannot change the
266:21 - speed using this underscore underscore
266:23 - variable because now it's a private
266:26 - variable and that means we cannot change
266:28 - the value using this variable we need to
266:32 - use this set function in order to change
266:35 - the value of the speed also if you want
266:38 - to use this underscore underscore color
266:41 - here and let us run the code this will
266:44 - also give you an error because this
266:46 - underscore or underscore color is
266:47 - private so either you can remove this
266:51 - code or you can create the setter and
266:53 - get a method for the color also so let's
266:57 - create the setter and get a method for
266:59 - the color
267:03 - and now we can access the value of color
267:05 - using the get color method right so
267:10 - instead of this gets speed we can just
267:12 - write 4 dot get color and it's going to
267:16 - give us the value of color and now you
267:19 - can see that there is no error and the
267:22 - speed here is 300 which we have set
267:24 - using the set speed method and the color
267:28 - is red which is the color we have given
267:30 - using this argument in the Constructor
267:34 - and this type of restricting your data
267:36 - access using functions is called
267:39 - encapsulation let's do the same thing
267:42 - with our rectangle class also and let's
267:45 - create the setter and get a method
267:47 - inside the rectangle class so you
267:50 - already know we can use this Define and
267:55 - then we can first of all set for example
267:58 - set the height first of all and then we
268:01 - can give the value of height here and
268:03 - then cell roof
268:05 - dot height is equal to height right and
268:10 - do not forget you need to give double
268:12 - underscore in front of your attributes
268:15 - in order to make them private so I am
268:18 - going to do just that and let's create
268:22 - the get height method also
268:28 - so now we have created the setter and
268:31 - getter for the height and let's do the
268:33 - same for the width also
268:40 - so now you have made the height and
268:42 - width as private and we have created
268:44 - Setter and getter for the height and
268:47 - width and now in order to calculate the
268:49 - area we can Define one more method here
268:51 - which is the area method so let us
268:54 - create the area method here and this
268:56 - area method is not going to take any
268:58 - argument we are just going to return the
269:01 - multiplication of the height so self dot
269:05 - height multiplied by self dot underscore
269:10 - underscore width okay which will give us
269:13 - the area of this rectangle and we can
269:16 - call this area method instead of using
269:18 - this kind of notation so rect 1 dot area
269:22 - and rect 2
269:26 - dot area also let us run The Code by
269:30 - changing the file name here and run this
269:33 - code and you can see the area is printed
269:36 - now so this is how you can use
269:38 - encapsulation in python in the last
269:40 - video we have seen how to use
269:42 - encapsulation in Python and we have also
269:46 - seen how we can declare private member
269:48 - variables in Python to declare a private
269:52 - member variable we use double underscore
269:56 - in front of your variable name and this
269:59 - variable becomes private but the
270:02 - question is what exactly is a private
270:05 - member variable
270:06 - so a private member variable is private
270:09 - to the class that means you can use this
270:13 - private member variable inside the class
270:16 - but as soon as you use it or access it
270:21 - outside the class it will give you an
270:24 - error so you cannot access a private
270:27 - member variable outside a class and the
270:31 - example we have already seen so here you
270:33 - can see I try to access this private
270:35 - member variable outside the class and
270:38 - when I run the code it says that there
270:42 - is no underscore underscore C attribute
270:46 - for this hello object why because
270:50 - whenever you create an instance and if
270:54 - the member variable is private this
270:57 - private member variable is invisible to
271:00 - your object so you cannot access the
271:03 - private member variable outside the
271:05 - class by but can we use this private
271:08 - member variable inside the class let's
271:11 - see so I am going to declare one more
271:14 - method here and I'm going to name it as
271:17 - public underscore
271:20 - method and this doesn't take any
271:23 - argument but what we have learned about
271:26 - the methods in a class that even though
271:29 - you don't pass any argument to the
271:33 - method you have to provide at least one
271:36 - argument which is the self argument and
271:38 - what is self self is the current object
271:41 - so let me just print something here
271:45 - quickly for example
271:47 - public here so can we use this private
271:51 - member variable inside this method let's
271:54 - see so I am going to just write self dot
271:58 - underscore underscore C and then I'm
272:02 - going to run this code and let me
272:04 - comment this line because this was
272:06 - giving us an error and instead we can
272:10 - use this public method so I can use an
272:16 - instance of hello which is hello Dot
272:19 - Public method and let's run the code now
272:23 - and you can see there is no error that
272:26 - means you can use your private member
272:28 - variables inside the class or any method
272:31 - of the class now the other question is
272:34 - what is a public member variable like a
272:38 - here so a is a public member variable
272:41 - because it doesn't contain any
272:43 - underscore underscore in front of it and
272:46 - that means you can use this public
272:48 - member variable inside the class as well
272:52 - as outside the class so if I want to use
272:55 - this public member variable inside the
272:58 - class also I can just use self dot a and
273:03 - then run the code and it's totally fine
273:05 - it doesn't give us any error let's print
273:08 - the value of those two member variables
273:12 - and once again run the code and it will
273:15 - print the value of a and c and then this
273:17 - message which we are printing here which
273:19 - is public here now the next question is
273:22 - how we can define a private method in
273:26 - the class so let's see how we can define
273:28 - a private method you already know most
273:32 - probably which is by using double
273:34 - underscore in front of your method name
273:37 - so for example underscore underscore
273:40 - private
273:42 - underscore method and then I'm going to
273:47 - just print something inside this method
273:49 - let's say private so this is a private
273:53 - method and how you can define a private
273:55 - method using these double underscore in
273:58 - front of the name of your private method
274:01 - and the Restriction will be the same on
274:03 - the private methods also so let's try to
274:06 - access this private method outside the
274:08 - class so I have this hello instance and
274:10 - when I press dot here you will see there
274:14 - is no suggestion for this private method
274:17 - because pycharm already know that this
274:20 - is a private method so it doesn't show
274:23 - this method in the suggestion when you
274:25 - use this object outside the class but
274:28 - let's try the brute force and let's try
274:31 - to use this method outside the class and
274:35 - when I run this code you will see once
274:38 - again you will get an error which says
274:40 - hello object has no attribute viewed
274:43 - underscore underscore private method so
274:46 - private methods also you cannot use
274:49 - outside the class but inside the class
274:52 - absolutely you can use your private
274:55 - methods so how to use your private
274:57 - methods inside the class so you can use
275:01 - your private method inside the class
275:03 - using once again a self keyword so you
275:07 - write self Dot and then your method name
275:11 - for example private method and that's
275:14 - how you can call your private method
275:15 - inside the class using cell so any
275:19 - method you want to call inside a class
275:22 - you do it once again using this self
275:25 - keyword as you do with your member
275:28 - variable and once again when I run the
275:30 - code now it prints private using this
275:34 - statement and this statement is executed
275:38 - when we call this private method from
275:40 - here so I hope this will video will
275:43 - clarify some more doubts about the
275:45 - private member variables and private
275:48 - methods in Python in this video we will
275:51 - talk about python inheritance so first
275:54 - of all what is inheritance in Python so
275:58 - classes in Python can be extended
276:01 - creating new classes which retains the
276:05 - characteristics of a base class
276:08 - and this process is known as inheritance
276:11 - now in simple words the idea behind
276:15 - inheritance is that a new class can
276:19 - borrow the behaviors and methods from
276:24 - the another class now The Inheritance
276:27 - involves two types of classes one is a
276:32 - super class and other is a sub class
276:36 - now the sub class inherit members of the
276:41 - super class on top of which it can add
276:44 - its own members for example any other
276:48 - member methods or variables so here
276:51 - subclass is the one who is doing the
276:55 - borrowing of the members and the super
276:57 - class is one from which subclasses
277:01 - borrows these kind of member methods and
277:05 - variables now if this inheritance sounds
277:09 - to be little bit confusing to you let me
277:12 - give you an example so I said in
277:15 - inheritance there are two type of
277:17 - classes one is a super class and other
277:21 - is a sub class
277:23 - now in this example I have taken polygon
277:27 - as a super class and two classes
277:31 - rectangle and triangle as the sub
277:35 - classes now if you see carefully what is
277:38 - the relationship between the rectangle
277:41 - and polygon and triangle and polygon so
277:46 - rectangle is a polygon right and the
277:50 - triangle is also a polygon that means
277:53 - the rectangle can inherit some
277:56 - properties from the polygon class also
278:00 - triangle can inherit some properties
278:03 - from the polygon class and the
278:06 - relationship between the superclass and
278:08 - the subclass is defined by a
278:12 - relationship called is our relationship
278:15 - so rectangle is a polygon and triangle
278:20 - is a polygon also that means means that
278:24 - rectangle and triangle can inherit from
278:28 - the polygon class so in inheritance the
278:32 - subclasses have a is a relationship with
278:37 - the super classes so let me give you one
278:40 - more example so as a superclass you can
278:42 - take an animal class and then as
278:46 - subclasses you can create a dog class
278:49 - cat class rat class because all of them
278:54 - are animals so dog is an animal cat is
278:59 - an animal rat is an animal so always
279:02 - remember when you use inheritance there
279:05 - is ah is our relationship between
279:08 - superclass and the subclass now let us
279:11 - take our real life example and let me
279:14 - try to explain you this concept with
279:17 - some code so I'm going to create a new
279:20 - project in my pycharm IDE and this I am
279:23 - I am going to name it as inheritance and
279:26 - I will choose this option open in
279:28 - current Widow and also this option which
279:30 - says add to the current opened project
279:32 - which is going to create the project in
279:34 - the same window so now this project is
279:37 - created so I'm going to go inside this
279:40 - project and I'm going to create a new
279:42 - python file here and I'm going to name
279:44 - this file as polygon because we are
279:48 - going to create a polygon class and
279:51 - inside this polygon dot py file let's
279:55 - first create a class called polygon and
279:59 - inside this polygon class what are the
280:01 - attributes which we want to add here so
280:05 - rectangle and triangle what are the
280:08 - common things which they both have they
280:11 - both have the width and the height so we
280:14 - are going to first of all create a
280:17 - variable called width and we will
280:20 - initialize it by a value none the non
280:24 - keyword is used whenever you want to
280:26 - assign nothing to your variables right
280:30 - in the same way I'm going to use height
280:34 - and I'm going to assign none to that
280:37 - also now what I'm going to do is I'm
280:40 - going to create a method here so let me
280:42 - Define a method using Def and I am going
280:47 - to use this method to set the values of
280:50 - width and Heights and this method is
280:52 - going to take two argument one is the
280:55 - width and the other is the height right
280:58 - now if you remember in the last video I
281:01 - have shown you how to make your variable
281:04 - private so you use double underscore in
281:08 - front of your variables to make them
281:10 - private so I'm going to add this double
281:12 - underscore in front of width and height
281:14 - that means these two variables are
281:17 - private Now using the set values method
281:21 - I am going to just set the values of the
281:24 - height and width so
281:27 - self dot underscore underscore width is
281:31 - equal to width and self dot underscore
281:36 - underscore height is equal to height so
281:40 - this is the polygon class which we have
281:42 - created and it's a super class in our
281:46 - case right and now let us Define two sub
281:49 - classes one is a rectangle and other is
281:54 - a triangle so let us Define other class
281:56 - called rectangle and inside this
281:59 - rectangle I am going to Define one
282:01 - method let us say this method is a area
282:05 - method and this area method is going to
282:08 - give us the area of the rectangle and
282:11 - what is the area of the rectangle the
282:13 - area of the rectangle is the
282:16 - multiplication of the width and the
282:19 - height similarly I am going to Define ah
282:22 - triangle class also so let me Define the
282:24 - triangle class here and let us say this
282:27 - triangle class also have this method
282:30 - which is area now what is the area of a
282:33 - triangle the area of the triangle is the
282:37 - multiplication of width and height
282:39 - divided by two so we are going to divide
282:42 - the multiplication of width and height
282:44 - by 2 this is the area of the triangle so
282:47 - now we have defined three different
282:49 - classes and we are saying that polygon
282:52 - is the super class and rectangle and
282:55 - triangle is our sub classes now how we
283:00 - can inherit the properties of the super
283:04 - class which is polygon into our sub
283:07 - classes which is rectangle and triangle
283:09 - so in order to inherit from one class to
283:14 - another you use this parenthesis and
283:17 - inside the parenthesis you write the
283:20 - name of your super class and that means
283:23 - your rectangle is inheriting from the
283:28 - polygon class similarly when we write
283:32 - this parenthesis and the polygon class
283:35 - here that means triangle is inheriting
283:39 - from the polygon class now when a
283:42 - subclass inherits from a superclass the
283:45 - superclass member variables and methods
283:48 - are accessible also using the sub class
283:53 - also so let me give you an example so I
283:55 - am going to create the instance of a
283:59 - rectangle first of all so let me just
284:02 - write rectangle so this is the rectangle
284:04 - instance and let us create a triangle
284:08 - instance also
284:10 - and now once we have triangle and
284:12 - rectangle instance let's use this
284:15 - rectangle instance and when you write
284:17 - dot here you can see intellisense says
284:20 - that area is available for this object
284:24 - and set value is available for this
284:28 - object so when you use set value you can
284:30 - see we haven't defined the set Value
284:33 - method inside the rectangle but because
284:36 - we are inheriting from the polygon class
284:40 - into our rectangle class all the members
284:44 - of the polygon class are available using
284:48 - the rectangle object also and what this
284:50 - method takes it takes the width and
284:53 - height so we are going to provide the
284:55 - width and let us say height 50 and 40
284:58 - and once again we are going to use the
285:01 - triangle object and we use the set
285:05 - values and this time also let us say I
285:07 - am going to provide the same values here
285:09 - and what does this set Value method is
285:12 - doing it's just setting the values of
285:15 - width and height inside the polygon
285:18 - class now in order to calculate the area
285:21 - we can call the area method from the
285:24 - rectangle and the triangle class so
285:26 - let's just do that and I am going to do
285:29 - this inside a print method and I am
285:32 - going to just call the rectangle object
285:35 - dot area which does not take any
285:38 - argument and same I am going to do for
285:41 - the triangle object also so triangle dot
285:45 - area so what do you think will happen
285:48 - now so let us run the code and let's see
285:50 - what will happen so I am going to right
285:52 - click on this file and I'm going to just
285:54 - choose run a polygon and it's going to
285:57 - run the program and you will see it
285:59 - gives us an error and what is the error
286:02 - the rectangle object has no attribute
286:05 - rectangle underscore underscore width
286:09 - that means because this width and height
286:13 - are private member variables of the
286:17 - polygon class they are not accessible
286:20 - from the subclass which is the rectangle
286:24 - class and the triangle class so you
286:27 - cannot inherit the private members from
286:31 - the super class into the subclass so
286:36 - what is the solution here so what we can
286:39 - do here is we can create the getter
286:42 - methods for the width and the height so
286:47 - I am going to do exactly that so let us
286:49 - Define a method called def get
286:53 - underscore width as going to take no
286:57 - argument and is going to return the
287:00 - value of the width so using self we can
287:03 - access the value of underscore
287:05 - underscore width in the same way we can
287:08 - define a matter third call get
287:10 - underscore height here and it is also
287:13 - not going to take any argument but we
287:15 - are going to return the value of the
287:18 - height here so self thought underscore
287:21 - underscore height so now we have created
287:23 - the getter methods for the width and
287:27 - height and these getter methods are the
287:30 - public members why they are public
287:33 - because we haven't used the double
287:35 - underscore in front of these two methods
287:38 - and these two methods now we can use in
287:43 - place of these private member variables
287:46 - which we were trying to inherit in the
287:51 - subclass using the super class so
287:55 - instead of underscore underscore width
287:57 - we can write self dot get width and also
288:02 - here instead of underscore underscore
288:04 - height we can use get height similarly
288:08 - we will do the same for for the triangle
288:10 - class so get width and the get height
288:14 - dot get height now let's run the program
288:19 - again and let's see what happens
288:21 - and now when I run the code it gives me
288:24 - the area of rectangle using this print
288:28 - line statement and then it is going to
288:30 - give me the area of triangle which is
288:32 - exactly the half using this line of
288:35 - statement so let me once again minimize
288:38 - this and let us recap what we have
288:41 - learned
288:42 - so we have created a super class and two
288:46 - subclasses super class is polygon and
288:49 - sub classes are rectangle and triangle
288:52 - and in order to inherit from the super
288:55 - class you just use parenthesis and the
288:58 - name of your superclass and that means
289:00 - in our example rectangle is inheriting
289:03 - from the polygon class
289:06 - next what we have learned is all the
289:09 - public member variables or the methods
289:13 - are accessible from the subclass from
289:17 - the super class so set Value method and
289:21 - get Value method is accessible because
289:24 - they are public methods but underscore
289:28 - underscore width and underscore
289:30 - underscore height are not accessible
289:32 - because they are the private member
289:34 - variables so you cannot inherit the
289:37 - private member variables into your sub
289:40 - classes now we have seen this example in
289:44 - which we have created two instance of
289:47 - the classes one is rectangle objects
289:49 - from the rectangle class and the other
289:51 - is triangle object from the triangle
289:54 - class and first of all we have used the
289:56 - set method which is coming from the
289:58 - polygon class its not the part of the
290:01 - rectangle or the triangle class to set
290:04 - the values of width and height and then
290:07 - we have just called the area method from
290:11 - these two classes in order to give us
290:14 - the area so this set method is used to
290:18 - set the value so it has set the value of
290:20 - width and height and using this get
290:23 - method get width and get height this
290:27 - value is returned and this value is
290:29 - returned into the sub classes and then
290:33 - the multiplication of these two values
290:36 - gives us the area here and the
290:39 - multiplication of these values divided
290:41 - by 2 gives the area of the triangle here
290:44 - so this is how you can use inheritance
290:46 - in Python
290:48 - hey guys welcome to the next video on
290:50 - Python tutorial for beginners in this
290:52 - video we will discuss how to create
290:55 - modules in Python now in the previous
290:58 - videos I have already discussed briefly
291:02 - about built-in modules and how to import
291:06 - a built-in module you use a import
291:08 - keyword and then you use the name of the
291:12 - built-in module in Python built-in means
291:15 - this module is already present in Python
291:19 - so we can use these built-in module in
291:22 - order to perform some functionality so
291:25 - for example this math module helps us to
291:28 - perform some mathematical operations
291:31 - now first of all what is a module
291:35 - so it turns out that a module is nothing
291:39 - but a python file now to prove my point
291:44 - let me just hover over this math module
291:49 - and just press control and then hover
291:52 - over it so right now I'm pressing Ctrl
291:55 - and I'm hovering my mouse over this math
291:57 - on the pycharm IDE and now I'm going to
292:01 - click it
292:02 - and when I click it you will see this
292:05 - module is nothing but a file right and
292:09 - inside this module we have number of
292:12 - functions which we can use for example a
292:16 - COS function or a tan function or many
292:21 - different functions which we can use
292:23 - from this math module so a module is
292:27 - nothing but a python file now if a
292:30 - module is nothing but a python file why
292:33 - don't we create a module and it turns
292:37 - out that python allows us to create our
292:40 - own modules so let's create our own
292:43 - modules and let me show you how you can
292:46 - create your own module and right now you
292:49 - can see in my project there is only one
292:52 - file which is Hello dot py and it's
292:55 - empty right now
292:57 - Now to create a module I'm going to just
293:00 - create a new file so right click and
293:02 - then new python file and this module I'm
293:05 - going to name it as my functions and
293:08 - then
293:09 - press OK and this file is created so now
293:12 - I have two files in my project one is my
293:15 - functions and other is hello.py so let's
293:18 - say I want to create some functions
293:20 - inside this my functions.py file so
293:25 - let's create some function I'm going to
293:27 - very quickly create some very basic
293:31 - functions which you already know in
293:35 - python so so let's say add function
293:38 - which Returns the addition of two
293:41 - numbers and also let's create let's say
293:44 - multiply functions so multiply and this
293:48 - is going to just give the product of two
293:51 - numbers so let's say this is our module
293:54 - and it has two functions now somehow I
293:58 - need to use these two functions from my
294:02 - functions.py file into this Hello dot py
294:07 - file now as you can see these two files
294:11 - are in the same directory right so I can
294:14 - import this my functions file using
294:18 - import and then the name of the file
294:20 - which is my functions and that's it so
294:24 - in order to import a module you just
294:27 - write a keyword called import and then
294:30 - you just write the name of the file
294:33 - without the extension p y OK so you
294:36 - don't need to provide any extension here
294:38 - and then I can use this function so
294:41 - let's say I want to print my function
294:44 - which is the file name so whatever file
294:47 - name you give here you need to use the
294:50 - file name here dot you will see all the
294:54 - functions in the file are now visible in
294:57 - the other file which is hello.py so
294:59 - let's use this add function and I'm
295:02 - going to just give two parameters here
295:05 - and also let us use the multiply
295:07 - function from the my functions files so
295:11 - the file name and the method name or the
295:15 - function name and let's give two
295:18 - parameters here also and that's it so
295:21 - it's that simple to create your own
295:24 - modules and import them into other files
295:28 - in Python now when I run this program is
295:32 - going to give me the addition and the
295:34 - product of these two argument which I
295:37 - have provided here
295:39 - now let us say your my functions file is
295:45 - in some other directory so let me create
295:47 - a directory so I'm going to right click
295:49 - here and then I'm going to create a
295:52 - directory and I'm going to name it as
295:53 - dir and then click ok
295:57 - and now I'm going to move this my
296:00 - functions.py file into the new directory
296:04 - so I am going to just right click and
296:06 - cut from here this file and I'm going to
296:08 - just paste this file into the dir
296:11 - directory okay so let me just click OK
296:15 - here and as soon as I do this you will
296:18 - see here pycharm is intelligent enough
296:21 - to refactor this code and now it has
296:24 - given us the correct import okay so if
296:28 - this my functions file is in some
296:32 - directory then you use this type of
296:35 - notation so you write from and then your
296:37 - directory name and then import keyword
296:41 - and then your file name so you can see
296:43 - this is the directory name and this is
296:46 - the file name so I use from directory
296:49 - name import file name and when I run the
296:52 - code once again it's going to give me
296:54 - the same answer now now there is one
296:58 - more way of writing the same notation
297:00 - and that is using the import so use
297:04 - import keyword and then write the name
297:07 - of your directory dot the name of your
297:10 - file so directory dot the file name and
297:14 - then you use this name in place of your
297:19 - my function name okay and once again
297:23 - when you run the code it runs fine now
297:26 - sometimes you might feel that this is a
297:29 - long name and python have the solution
297:32 - for it also so it turns out that you can
297:37 - rename your file using a keyword called
297:42 - as so after the import so import
297:46 - directory name dot file name as and then
297:50 - you can provide your name for example my
297:53 - functions I will just name it as MF okay
297:57 - and now I can use this MF name instead
298:00 - of this big name
298:03 - and this will also work fine so either
298:07 - you can import from your file which is
298:11 - inside the directory using this notation
298:13 - or you can use this notation you can
298:16 - also write as in front of this notation
298:20 - also so from directory name import file
298:24 - name as whatever name you want to give
298:27 - here and this you can use to call your
298:30 - function using this dot notation now
298:33 - this was the easy stuff and I have just
298:37 - written here the two functions and then
298:40 - imported these two functions into the
298:43 - other file but what if if I have
298:47 - multiple classes I haven't shown you how
298:50 - to import files which have classes in
298:54 - them so let's see how to import the
298:56 - python files which have classes inside
298:59 - them so I'm going to close these two
299:01 - files and in the last video I have shown
299:05 - you how to use inheritance in Python and
299:09 - we have created this class polygon and
299:12 - two other classes which is triangle and
299:15 - the rectangle class and this might be
299:17 - right now the perfect candidate to
299:21 - import into some other file
299:24 - so I'm going to create two more file one
299:27 - is the rectangle file so I'm going to
299:30 - just right click and create a python
299:32 - file and I'm going to name it as
299:33 - rectangle and I'm going to create one
299:37 - more file with the name of triangle so
299:39 - right click new python file and the name
299:43 - is triangle Dot py and let me create the
299:47 - fourth file which I am going to name it
299:49 - as Main and this will be our main file
299:53 - in which we will import all these
299:55 - classes so in my polygon class I will
299:58 - just leave this polygon class and I will
300:01 - just transfer this rectangle class into
300:05 - the rectangle dot py file and this
300:08 - triangle class into triangle dot py file
300:12 - and also this was the instantiation of
300:16 - the rectangle and triangle class which
300:18 - we have done so I will transfer this
300:21 - code into our main dot py file ok so now
300:26 - we have a polygon dot py file in which
300:29 - we have the polygon class
300:32 - and then we have the rectangle class
300:34 - inside rectangle Dot py and also we have
300:37 - the triangle class into the triangle dot
300:41 - py file and rest of the code we have
300:45 - inside the main Dot py
300:47 - now when you go to the rectangle dot py
300:50 - you will see that it's inheriting from
300:54 - the polygon class that means we need to
300:57 - import polygon class into the
301:00 - rectangle.py file so how to import it
301:03 - you can use from and then the file name
301:07 - which is polygon and then use import
301:10 - keyword and use the name of the class
301:13 - which is polygon and you will see that
301:16 - this error is gone and same we will do
301:19 - inside the triangle dot py file in order
301:23 - to import the polygon class into the
301:28 - triangle dot py file so this is the file
301:31 - name so from file name import the class
301:35 - name now when I go to the polygon class
301:37 - we don't need to import anything here
301:39 - because it's a super class and there is
301:41 - no import needed here let's go to the
301:44 - main dot py file and here you will see
301:47 - red the squiggly line under rectangle
301:51 - and triangle class because we haven't
301:53 - imported this triangle Dot py and the
301:56 - rectangle dot py into our main dot
301:59 - python file so the procedure is same
302:02 - from your file name which is first of
302:06 - all rectangle import the name of the
302:10 - class which is rectangle same we will do
302:13 - for the triangle class so from the
302:17 - triangle file name triangle dot p y and
302:21 - then import and then the name of the
302:23 - triangle class and you will see as soon
302:26 - as you do this the arrow is gone so now
302:30 - there is no red squiggly line under any
302:34 - of the code
302:35 - so now let's run the code so I'm going
302:38 - to just go to the main.py file and I'm
302:42 - going to right click on this main.py
302:44 - file and I'm going to just click on run
302:47 - main which is going to run the program
302:49 - and it's going to print the result which
302:52 - is the area of rectangle and the area of
302:57 - the triangle so in this way you can
302:59 - import the py file which have classes
303:02 - inside them so this is how you create
303:05 - your own modules in Python and import
303:08 - them into other python files in this
303:12 - video we will talk about multiple
303:14 - inheritance in Python so first of all
303:17 - what is multiple inheritance
303:20 - so the ability of a class to inherit
303:24 - from more than one class is called
303:27 - multiple inheritance and in Python a
303:31 - class can inherit from more than one
303:34 - class so let's see an example which
303:36 - shows us how to inherit from multiple
303:40 - classes now I will be using this example
303:43 - which I have already shown you in the
303:46 - video where I have shown you inheritance
303:48 - in Python so there is a class called
303:51 - polygon which is a superclass and the
303:55 - other two classes are triangle class and
303:58 - the rectangle class which are the
304:00 - subclasses and these two classes are
304:03 - inheriting from the polygon class and I
304:07 - have also one more python file which is
304:09 - main Dot py and in this main dot py I am
304:14 - just importing these two rectangle and
304:18 - triangle class and creating an instance
304:20 - out of of them and then setting the
304:23 - value of width and height and then we
304:25 - are printing the area of the rectangle
304:28 - and the triangle so if you haven't seen
304:30 - the last two videos just watch those
304:32 - videos because I will be using the same
304:34 - code in order to show you how to use
304:37 - multiple inheritance so let's get
304:39 - started so what I am going to do is I'm
304:41 - going to create a new python file here
304:44 - and I'm going to name my file as a shape
304:47 - and I'm going to use this shape dot py
304:51 - to create a class called shape so let me
304:55 - create a class quickly and I'm going to
304:58 - name it as shape and this method I'm
305:01 - going to define a private variable
305:03 - called color and I'm going to initialize
305:07 - it with the value none and then I'm
305:10 - going to define the setter and getter
305:11 - for this color attribute so let's define
305:14 - those
305:24 - so now we have defined the setter and
305:26 - getter for this color attribute now if
305:29 - you remember what I told you about
305:31 - inheritance and that is whenever you
305:34 - want to do inheritance between a
305:36 - superclass and the subclass there is a
305:38 - is a relationship between the subclass
305:41 - and the superclass so rectangle is a
305:46 - shape and triangle is also a shape so
305:49 - that means we can also use this shaped
305:52 - class as the super class in rectangle
305:55 - and the triangle classes so let us use
305:59 - the shape class into the rectangle and
306:03 - triangle class as the superclass so
306:06 - first of all I am going to import this
306:08 - shape class from the shape file so let
306:13 - us import this and same I will do in the
306:17 - Triangle class also and now how to
306:20 - inherit from multiple classes into our
306:23 - sub classes so we have already inherited
306:25 - from the polygon class and in order to
306:28 - add one more class here you just need a
306:31 - comma separator and the name of your
306:34 - class so this is how you inherit from
306:37 - multiple classes you just use the
306:40 - parenthesis and then the name of your
306:43 - classes separated by the comma that
306:46 - means the triangle class is inheriting
306:49 - from the polygon class as well as the
306:53 - shape class the same we will do in the
306:57 - rectangle class I will just provide the
306:59 - comma here and then I will just write
307:01 - shape here and now I will go to the main
307:04 - dot py file and once you do the multiple
307:07 - inheritance that means all the public
307:09 - methods of the shape class is available
307:14 - in the subclasses which are triangle and
307:17 - the rectangle so I can use this kind of
307:21 - notation first of all I am going to use
307:23 - rectangle class to call the method
307:27 - called set color so I am going to set
307:29 - color from here and let us say the
307:32 - rectangle color is red and then I'm
307:36 - going to use the triangle object to call
307:40 - the set color method once again and the
307:42 - color I want to provide here is let us
307:45 - say blue OK and in order to get those
307:48 - two color values we can once again write
307:51 - print the instance name which is
307:54 - rectangle dot get color
307:57 - and same we will do for the triangle
308:00 - object also so print
308:03 - triangle dot get color and that's it so
308:08 - now all the public method of the shaped
308:12 - class is also available in our rectangle
308:16 - and the triangle classes and we can use
308:19 - all the public methods of this shape
308:22 - class into the sub classes and let us
308:25 - run the code and let's see what happens
308:27 - so the code is running and you can see
308:30 - it prints red and blue using these two
308:34 - statements so this is how you can do
308:37 - multiple inheritance in Python in this
308:40 - video I am going to show you how you can
308:42 - use a built-in function called super in
308:46 - your python classes so let's get started
308:49 - so to start with I have two classes here
308:52 - one is the parent class and other is the
308:55 - child class and here parent class acts
308:59 - like a super class and the child class
309:01 - acts like a subclass which is inheriting
309:04 - from the parent class
309:05 - now both these classes have this init
309:10 - function and you already know what does
309:12 - this init function do it is the first
309:14 - function which is called when an
309:17 - instance of a class is created and here
309:20 - I'm just creating the object from the
309:22 - child class
309:23 - now what do you think will happen will
309:26 - this Constructor will be called or this
309:29 - Constructor will be called because we
309:31 - are inheriting from the parent class
309:33 - into the child class
309:35 - so let's find out so I am going to run
309:37 - this code and it prints child in it that
309:41 - means this statement under the child
309:43 - class init method is executed and this
309:48 - method is not executed now in some cases
309:51 - you might want to pass some parameters
309:54 - also into your super class for example
309:58 - I'm just going to give this example let
310:01 - us say I want to pass a argument called
310:04 - name here and then I will just print the
310:08 - value of name how can I call this init
310:12 - function using this child class instance
310:16 - so it turns out that there is a function
310:18 - called super in Python that allows us to
310:23 - refer to the super class implicitly now
310:28 - this super function is a built-in
310:30 - function which returns a proxy object
310:34 - that allows you to refer to your super
310:38 - class so let's try to use this super
310:41 - function so you just use the keyword
310:43 - super and then give these parentheses
310:46 - because this is a function and then this
310:49 - super function will return the proxy
310:50 - object of the super class that means I
310:53 - can use this dot operator to call the
310:57 - init method from the superclass so this
311:01 - notation means super dot init means we
311:04 - are calling the init method from the
311:06 - parent class and that means we can pass
311:09 - the name from here so let's just pass
311:12 - this name I am going to just write Max
311:14 - here and now I am going to run this code
311:17 - and now you will see that child in it is
311:21 - printed using this statement first of
311:23 - all and then using the super function
311:26 - the init method of the parent class is
311:30 - called and then this name is passed here
311:34 - and it prints parent in it and the name
311:37 - whatever name we have provided here so
311:39 - this super function allows us to refer
311:41 - to the super class now let me show you
311:45 - one more thing which is called the
311:46 - method resolution order and you can find
311:49 - this method resolution order by using
311:52 - your class name so child's last name dot
311:56 - underscore underscore mro so just write
312:00 - underscore underscore mro underscore
312:02 - underscore and this statement I'm going
312:04 - to use inside the print function so you
312:07 - can see the result what it returns so I
312:10 - am going to run the code now and you can
312:12 - see it returns this kind of order so as
312:15 - the name suggests mro stands for method
312:19 - resolution order and this is the order
312:22 - in which the methods are called inside
312:26 - your child class or the parent class and
312:30 - this order means that all the method in
312:33 - the child class will be executed first
312:36 - and then all the method in the parent
312:39 - class will be executed now there are
312:42 - some rules based upon which this order
312:46 - is calculated and these rules are the
312:50 - first rule is the method inside your
312:52 - subclass are always called first and
312:56 - then whatever the method inside the base
312:59 - class they will be called and the second
313:02 - rule is related to multiple inheritance
313:05 - so let me just create the second parent
313:08 - class and I'm going to name it as parent
313:10 - 2 and here all also I am going to just
313:13 - write parent 2 here and let me inherit
313:16 - from the parent 2 also in the child
313:19 - class right and let us run the code once
313:22 - again and now you will see this order
313:25 - so once again child is printed and then
313:28 - the parent and then parent 2 and then
313:32 - the object so the second thing on which
313:35 - the mro depends upon is the order in
313:38 - which you inherit from the parent class
313:41 - or the super class so in our example we
313:44 - were inheriting from the parent class
313:47 - first of all and then parent 2 and in
313:51 - the same order this mro also will be
313:54 - decided so all the method in the child
313:56 - class will be executed first and then
313:59 - all the methods inside the parent class
314:02 - whatever you use first here will be
314:05 - executed and then whatever super class
314:07 - you write after that those method inside
314:11 - the class or super class will be
314:13 - executed next and then at last this is
314:16 - the base object now let's try to just
314:19 - reverse this order and once again let's
314:22 - run the code and you will see that this
314:25 - order will be reversed so the method
314:28 - resolution order will tell you which
314:30 - class method will be executed first and
314:34 - then the order of all the methods from
314:37 - the super classes
314:39 - now one more interesting thing which you
314:41 - will observe here is this output
314:44 - so I said that this super function is
314:48 - used to refer to the super class and now
314:52 - we have two super classes that means
314:54 - multiple inheritance and you will see
314:57 - here that only one output is printed
315:01 - which is from the init method inside the
315:05 - parent two and this statement is not
315:09 - printed which is inside the init method
315:11 - inside the parent class so how to solve
315:15 - this problem so if you have multiple
315:18 - inheritance then you need to manually
315:22 - call these init function using the class
315:27 - name so let's say I want to call the
315:29 - init function first fall from the
315:31 - parent2 class I will use parent 2 dot
315:35 - init and then you need to give also the
315:38 - self as the first parameter and the
315:41 - second which is the name in the same way
315:44 - you use the second class which is parent
315:47 - dot init function and then first
315:51 - parameter is the self and then you can
315:53 - pass any other name for example Tom here
315:56 - and let me run the code
315:58 - and you will see it calls first of all
316:00 - pair in two init function and we have
316:02 - passed Max here as the name and then it
316:06 - calls the parent one init function with
316:09 - the name Tom which is printed here also
316:12 - so this is how you can use super
316:14 - function in Python in this video I'm
316:17 - going to show you what is composition
316:19 - and how to use class composition in
316:23 - Python so to start with I have two
316:26 - classes here one is an employee class
316:29 - and other is the salary class now in the
316:33 - salary class I have this init method
316:35 - which takes two argument p and bonus and
316:38 - it sets these two arguments to the
316:41 - member variables of this class also I
316:44 - have a method called annual salary which
316:46 - is used to calculate the salary
316:49 - now in the employee class I have this
316:51 - Constructor which takes four arguments
316:54 - which is name age pay and bonus
316:59 - now what do you think can we apply
317:01 - inheritance here the answer is no
317:04 - because there is no is our relationship
317:06 - between salary and employee so employee
317:10 - is not a salary and salary is not an
317:13 - employee but somehow I want to delegate
317:15 - the responsibility of calculating the
317:18 - employee's salary to the salary class
317:21 - because calculating salary is in itself
317:24 - is a big task I have just simplified
317:27 - this class in the form of just
317:30 - calculating the annual salary but the
317:33 - employee can have his own taxes or he
317:37 - has taken some leaves or many factors
317:40 - affects the salary of an employee so
317:44 - this salary calculation let us say we
317:47 - want to delegate to the salary class but
317:49 - whose salary is this this salary is the
317:52 - employee's salary so we know that we
317:55 - cannot use inheritance here but we can
317:58 - use a a concept called composition here
318:02 - and the composition means that we are
318:06 - just delegating some responsibility from
318:09 - one class to the another class so how to
318:12 - delegate this responsibility we can just
318:15 - create one more variable here for
318:19 - example self dot obj underscore salary
318:23 - which is the salary object we are going
318:26 - to create using the salary class okay
318:30 - and this salary class takes two
318:33 - parameters one is pay another is bonus
318:36 - which we are already providing using the
318:40 - employee init method so I am going to
318:42 - just pass this pay comma the bonus into
318:47 - the salary class so we are instantiating
318:50 - the salary class inside the employee
318:53 - class so here one class which is an
318:57 - employee class acts like like a
319:00 - container of the other class which acts
319:03 - like a Content okay so salary class is
319:07 - the content and the employee class is
319:10 - the container of this salary class now
319:13 - in order to calculate the total salary
319:15 - we can Define one more method here and
319:17 - I'm going to just say total underscore
319:20 - salary and then what we are going to do
319:24 - is we are going to call our object
319:27 - salary member variable because this
319:30 - gives us the object of the salary so I
319:33 - am going to just call object salary and
319:36 - we can call this method from the salary
319:38 - class which gives us the annual salary
319:40 - and now I am going to just create the
319:44 - object of this employee class so let me
319:47 - just write EMP is equal to employee
319:51 - which takes four parameter first is name
319:54 - second is the age third is the p a so
319:59 - let us say p is fifteen thousand and the
320:03 - bonus is ten thousand and now I just
320:06 - want to print the total salary of this
320:09 - employee so I can just write print and
320:12 - then EMP object dot the total salary
320:17 - which is total salary method and you can
320:19 - see here this total salary is returning
320:22 - let me just use the return keyword also
320:25 - because we are returning this annual
320:27 - salary from the salary class using this
320:30 - total salary method so let's run the
320:33 - code once again and let's see what
320:34 - happens and you can see annual salary is
320:37 - printed and this annual salary is
320:39 - calculated using the salary class so
320:43 - what this employee class has done it has
320:47 - delegated some responsibility to the
320:51 - other class which is the salary class
320:53 - which gives us the annual salary of an
320:57 - employee and this here is called
321:00 - composition now one interesting thing
321:02 - which you will notice here is we are not
321:05 - instantiating salary here we are just
321:08 - instantiating the salary inside an
321:12 - employee class so as soon as you delete
321:15 - an instance of an employee the salary
321:19 - class instance will be automatically
321:21 - deleted so whenever you want to delegate
321:24 - some responsibility of one class to the
321:28 - another class it's called composition
321:30 - one more example of composition can be a
321:34 - book class and a chapter class so a
321:39 - chapter is not a book and book is not a
321:42 - chapter but we can delegate some
321:45 - responsibility from a book class to the
321:48 - chapter class so this is how you can use
321:50 - composition in python in the last video
321:53 - we have seen how to use composition
321:55 - between classes in Python in this this
321:59 - video I am going to show you how to use
322:01 - class aggregation between classes in
322:04 - Python now if you haven't watched my
322:07 - last video in which I have shown you how
322:09 - to use class composition in Python I
322:13 - will highly recommend you to watch that
322:15 - video because I will be using the same
322:18 - code to demonstrate how aggregation
322:22 - Works in Python so in the last video we
322:26 - have created two classes one is an
322:29 - employee class and other is the salary
322:32 - class and then we have used the salary
322:35 - class inside the employee class and we
322:39 - have seen how composition Works in
322:41 - Python so employee class is delegating
322:44 - some part of its responsibility to the
322:48 - salary class and that is called the
322:50 - composition now in composition the
322:53 - relationship between the classes which
322:55 - have some Association is represented by
322:58 - a keyword part off so salary is the part
323:03 - of employee so the keyword we use in
323:06 - composition is part of now let's see how
323:09 - we can use aggregation instead of
323:12 - composition between these two classes so
323:15 - let us say I will not use this salary
323:17 - class inside the employee class but what
323:22 - I am going to do is I'm going to pass an
323:25 - instance of salary here so I'm going to
323:27 - just write salary and this will be the
323:31 - object of salary glass which I am going
323:34 - to pass in the init method of the
323:39 - employee class so let's create an object
323:42 - of the salary so I am going to just
323:45 - write salary here is equal to the salary
323:48 - class and we will instantiate the salary
323:52 - class by these two argument which we
323:55 - have given in the last video to the
323:57 - employee class so I'm going to just copy
324:00 - these two arguments and paste it here
324:02 - and I'm going to remove this comma here
324:04 - so now what we are doing here is we are
324:07 - first of all instantiating the salary
324:10 - class and now the salary class we can
324:13 - pass to the Constructor of the employee
324:16 - class and this is the object which we
324:19 - have passed using the salary class
324:22 - object and then I'm going to take the
324:24 - solute class object and I'm going to
324:26 - assign the salary class object to the
324:28 - member variable of the employee class
324:30 - which is obj underscore salary now
324:34 - because we are passing the salary object
324:36 - that means this member variable is the
324:39 - salary member object and we can call any
324:41 - public method from the salary class
324:44 - using this member variable now so let's
324:47 - run the code and let's see what happens
324:48 - and we get the same result as we have
324:51 - seen in the last video in the
324:53 - composition example so what we have done
324:56 - differently here so instead of using
324:59 - this salary class inside the employee
325:01 - class we have first created an instance
325:04 - of the salary class and then we have
325:06 - passed this instance to the employee
325:10 - Constructor which can be used inside the
325:13 - employee class and this type of
325:15 - relationship is called aggregation now
325:18 - let's see what are the special
325:19 - properties of the aggregation the first
325:23 - property is the relationship between the
325:27 - associated classes in aggregation is
325:30 - defined by the keyword has ah so
325:34 - employee has a salary because now we are
325:36 - first of all creating the salary object
325:38 - and then passing it to the employee so
325:42 - now we are not directly using salary
325:44 - inside the employee class the second
325:47 - property of aggregation is the
325:50 - associated classes have
325:52 - unidirectional Association so we are
325:55 - just passing salary object to the
325:59 - employee class we are not passing
326:02 - employee object to the salary class so
326:05 - it is a unidirectional Association only
326:08 - salary can be passed to employee not the
326:12 - other way around and the third property
326:14 - of aggregation is we have created the
326:17 - salary object and the employee object so
326:20 - both these objects are independent of
326:23 - each other so if one object dies the
326:27 - other survive so both the object are
326:30 - able to survive individually so these
326:32 - are the three properties of aggregation
326:34 - now let us see the difference between
326:36 - the composition and the aggregation so I
326:39 - am going to split the screen so I am
326:40 - going to just right click on this tab
326:43 - and I will say split vertically and here
326:46 - I'm going to open the example of the
326:50 - composition so on the right hand side I
326:52 - have the example of composition and on
326:55 - the left hand side I have the example of
326:57 - aggregation let me just maximize this so
327:00 - you can see it and now let's discuss
327:03 - about the differences between the
327:06 - composition and aggregation
327:08 - so the relationship in composition is
327:12 - defined by a keyword called part of so
327:17 - salary is the part of employee
327:21 - in aggregation there is no part of
327:24 - relationship but the relationship is
327:26 - defined by the keyword called has ah so
327:29 - now in aggregation we are defining the
327:31 - instance of salary and then passing it
327:34 - to the employee class and salary is not
327:38 - the part of the employee class we are
327:40 - just passing it to the employee class so
327:44 - aggregation we use has our relationship
327:46 - and in composition we use part of
327:49 - relationship the second difference is
327:52 - when you delete the employee object the
327:56 - salary object will be automatically be
327:59 - deleted so salary object is dependent on
328:04 - the employee class but in aggregation
328:07 - the salary object and the employee
328:10 - object are individually independent so
328:14 - they can survive individually if one
328:16 - object dies then it doesn't matter that
328:19 - the other object dies because we have
328:21 - created these object individually now in
328:25 - composition both salary and employee are
328:28 - interdependent on each other but in
328:31 - aggregation the relationship is
328:34 - unidirectional so the association
328:36 - between the employee and the salary
328:39 - object is unidirectional we can only
328:42 - pass the salary to the employee class
328:45 - but we cannot pass the employee object
328:48 - to the salary class so these are the
328:51 - three major differences between
328:52 - composition and the aggregation in this
328:56 - video we will talk about creating
328:58 - abstract classes in Python so let's get
329:01 - started so to start with I have here two
329:05 - classes one is a shape class another is
329:08 - a square class in shape class I have two
329:11 - empty methods one is area and other is
329:15 - perimeter and I'm using shape as a super
329:19 - class and square as a sub class and
329:22 - square class is inheriting from the
329:25 - shape class now in this example I want
329:27 - to do two things one is I don't want to
329:31 - allow the other users to create an
329:35 - instance of a shape class because shape
329:37 - class acts like a template for the
329:41 - square class so I don't want to allow
329:43 - those users to create an instance of
329:46 - this shape class so let's see right now
329:49 - if we can create an instance of this
329:52 - shape class or not so I am going to just
329:54 - write shape is equal to shape and when I
330:00 - run the code my code runs fine that
330:02 - means right now I'm able to create an
330:05 - instance of the shape class which I
330:08 - don't want the second thing is I want to
330:11 - make sure that both these methods which
330:14 - are there inside the shaped glass are
330:18 - implemented inside the square class so I
330:21 - want to make sure that whoever is using
330:24 - the shape class he or she must Implement
330:28 - these two methods inside the subclass so
330:32 - how can I achieve these two things now
330:35 - it turns out that abstract classes are
330:37 - just made for that so how to create an
330:40 - abstract class in Python the fact is
330:42 - python on its own doesn't provide any
330:46 - abstract class but don't worry there is
330:49 - a built-in module in Python which we can
330:52 - use to create an abstract class so let's
330:56 - import this built-in module first so I
330:58 - am going to just write from a b c C
331:01 - import capital A B C comma abstract
331:05 - method so these are the two things we
331:08 - need to import from this module now this
331:12 - module ABC stands for abstract base
331:15 - classes and this allows us to create the
331:19 - abstract classes so how we can create an
331:22 - abstract class using this ABC module so
331:26 - what we need to do here is we need to
331:28 - inherit from the ABC module into the
331:33 - shape class okay so shape class is
331:36 - inheriting from the ABC module now once
331:39 - this shape class inherit from the ABC
331:42 - module the second thing what we need to
331:45 - do here is we need to add a decorator
331:48 - here and how to add a decorator we just
331:51 - need to use at the rate and then the
331:54 - name of this abstract method which is
331:57 - like this and let me use this abstract
332:00 - method third decorator on top of this
332:04 - parameter method also so what this
332:06 - abstract method decorator does is it
332:09 - makes these two methods abstract and
332:12 - what is an abstract method an abstract
332:15 - method is a method which you must
332:17 - Implement in the subclass so when you
332:21 - run the code now it will give us this
332:23 - error which says can't instantiate
332:26 - abstract class shape with the abstract
332:29 - method so once you create any of your
332:32 - class method as abstract then your class
332:36 - becomes the effect class and then you
332:40 - cannot instantiate this class like this
332:43 - so our first goal is achieved that we
332:46 - cannot instantiate this shaped class now
332:49 - because this class is now an abstract
332:52 - class and how to create an abstract
332:55 - class you just need to import the ABC
332:58 - module and then you just need to add add
333:01 - this decorator on top of your method and
333:04 - if you do this even with one method in
333:06 - your class then your class becomes
333:09 - abstract so now we have removed the
333:12 - instantiation of this shape class but
333:14 - now when I try to instantiate this
333:17 - Square object from the square class
333:20 - let's see what happens so this Square
333:22 - class takes one argument which is the
333:24 - side of the square and let me run this
333:27 - code and once again it gives us an error
333:30 - and this error says can't instantiate
333:33 - abstract class square with abstract
333:36 - methods so that means that whenever you
333:39 - inherit from a class which is an
333:42 - abstract class and if this class contain
333:45 - any abstract methods then the subclass
333:48 - have to implement the methods which are
333:52 - abstract so this method area is an
333:55 - abstract method and this method
333:57 - parameter is also an abstract method
334:00 - that means we have to provide the
334:02 - implementation of these two method
334:05 - inside our sub class so I am going to
334:08 - provide the implementation of area first
334:12 - of all into the subclass and area I am
334:15 - going to just return as the
334:17 - multiplication of the sides right so
334:20 - self dot underscore underscore side
334:23 - multiplied by itself so self dot
334:27 - underscore underscore side and let us
334:29 - say for now I will remove this abstract
334:31 - decorator from the parameter method and
334:35 - let's run the code once again and you
334:38 - can see it runs fine so there is no
334:40 - error when we instantiate this class
334:43 - when we Implement all the abstract
334:46 - method into your subclass so right now
334:49 - there is only one abstract method which
334:51 - is area into the shape class which we
334:54 - need to implement in the subclass and
334:57 - that we have done so we see no error
334:59 - here now let's add add this decorator
335:01 - abstract method on top of this parameter
335:04 - method also and once again when I run
335:07 - the code it will give me once again this
335:09 - error and it's going to give me the same
335:11 - error which says can't instantiate the
335:14 - abstract class square with the abstract
335:16 - method perimeter so we also need now to
335:20 - implement this method also so let's just
335:24 - implement this parameter method inside
335:27 - the subclass once again and what is the
335:30 - perimeter it's four times the size of
335:34 - your Square so self dot underscore
335:37 - underscore size and now we have
335:39 - implemented both of them and once again
335:42 - when we run the code it runs fine
335:45 - let us also try to print the area and
335:48 - parameter of the square so I am going to
335:50 - just use this object to call the area
335:53 - method and in the next line I'm going to
335:56 - just use print to once again call this
335:59 - object and this time I will call the
336:01 - perimeter method and let's run the code
336:04 - once again and it prints the area of the
336:07 - square and the perimeter of this Square
336:10 - so let us rewind what we have learned
336:12 - till now so in Python you can define an
336:16 - abstract class by importing this module
336:19 - and this abstract method and this ABC
336:23 - stands for abstract base classes and you
336:26 - need to inherit from this a b c into the
336:30 - class which you want to make abstract
336:31 - the second thing which you need to do is
336:34 - you need to provide this decorator at
336:36 - the rate abstract method on top of at
336:39 - least one of the methods inside your
336:43 - abstract class that may makes your class
336:45 - abstract and what are the properties of
336:48 - the abstract class you cannot
336:50 - instantiate an abstract class so you
336:53 - cannot create an object of this abstract
336:55 - class and you need to implement all the
336:59 - abstract method into the subclass which
337:03 - is inheriting the abstract class so this
337:05 - abstract class acts like just a template
337:09 - for other classes which wants to inherit
337:12 - from this shaped class so this is how
337:14 - you can use abstract classes in Python
337:17 - in this video we will learn how to use
337:20 - exception handling in Python
337:23 - so first of all what are exceptions
337:26 - so an exception is an event which occurs
337:29 - during the execution of a program that
337:33 - disrupts the normal flow of the program
337:37 - so basically exception is an unexpected
337:41 - event which disrupts the normal flow of
337:46 - the program so let me show you some
337:49 - examples of exceptions which may occur
337:52 - during the execution of a program so to
337:56 - start with I'm going to open the pie
337:58 - charm python consoles and then I'm going
338:00 - to maximize this pycharm python control
338:03 - and let me also just clear this terminal
338:08 - so we will start from the top so let's
338:11 - say we have a number and we divide this
338:13 - number by zero and when we press enter
338:16 - it's going to give us this exception
338:19 - which says 0 division error so this zero
338:23 - division error is an exception when you
338:26 - divide anything by 0 in Python let me
338:30 - show you some more examples so let's say
338:32 - I want to add a number and a string
338:37 - let's say 10 plus 10 but this 10 is an
338:41 - integer and this 10 is a string and when
338:45 - I run the command it says type error
338:48 - unsupported operand types for INT and
338:51 - string so we cannot add a number and a
338:55 - string in Python so this type error is
338:58 - another kind of exception
339:01 - let's say I am going to just use a
339:04 - variable name a b c which I haven't
339:08 - declared till now and when I press enter
339:11 - it's going to once again give me this
339:13 - exception which says name errors name
339:17 - ABC is not defined which is true because
339:20 - we haven't defined the name ABC but we
339:23 - are calling this variable which we
339:25 - haven't defined so we get this exception
339:28 - which says name error next let me Define
339:31 - a variable and I'm going to assign some
339:34 - Tuple values here 1 and 2 and now what I
339:38 - want to do is I want to call
339:40 - some method so you can see some methods
339:43 - are available for this Tuple now let's
339:47 - call some random method using this Tuple
339:51 - variable it'll give us an error which
339:53 - says attribute error Tuple object has no
339:56 - attribute whatever attribute I have
339:59 - provided here so this attribute is not
340:01 - present in the Tuple object also when
340:05 - you call a method let me call some other
340:09 - method which is not there and once again
340:11 - when I press enter once again I get this
340:15 - error which says attribute error because
340:17 - this function is not present in the
340:20 - Tuple object so these are all exceptions
340:24 - in Python attribute error or name error
340:27 - or type error or zero division error all
340:31 - are exceptions in Python now if you want
340:34 - to see more exceptions you can use the
340:37 - help inbuilt method and then you can
340:40 - write white belt ends and then press
340:43 - enter it gives me the name error once
340:45 - again because I need to first of all
340:48 - import this built-in module so import
340:52 - built-ins and I'm going to once again
340:54 - use help and inside the parenthesis
340:57 - built in and then press enter which is
341:00 - going to give me this kind of output and
341:02 - when I go at the top of this output so
341:05 - let me just scroll at the top and here
341:09 - you will see under the classes there is
341:12 - an object class and under the object
341:14 - class there is a base exception class
341:17 - and under the base exception comes the
341:19 - exception class and under the exception
341:21 - there is a big list of exceptions which
341:24 - you can see here so zero division error
341:27 - we have already seen or when you scroll
341:30 - down name error we have already seen so
341:33 - all the exceptions which python May
341:35 - throw are all listed here so if you want
341:38 - to see the list of all the exceptions
341:40 - you can just give this method which is
341:44 - help built in but before that you need
341:47 - to import this built-in module and then
341:49 - it's going to show you this kind of
341:52 - output and and you will also be able to
341:54 - see all these exceptions in Python now
341:57 - let me show you a real life example of
342:01 - exceptions in Python so what I'm going
342:03 - to do is I'm going to Define some
342:06 - variables here so first variable is
342:08 - result and I'm going to initialize it
342:10 - with the value none and then I'm going
342:14 - to declare two variables let's say a
342:17 - which takes an input and we want to ask
342:21 - the user to provide some numbers so
342:23 - let's say number one using the variable
342:28 - a and in the same way I'm going to
342:30 - declare a variable B which also asks the
342:33 - user to provide a second number but you
342:36 - already know that this input will return
342:38 - the string so we can just convert the
342:42 - string into a float let us say so I am
342:45 - going to just cast the output output of
342:48 - this input string to a float value and
342:52 - then what I want to do is I want to save
342:54 - the division of the two numbers A and B
342:58 - into the result so a divided by B I want
343:02 - to save it into the result and then at
343:05 - last I would just want to print the
343:08 - value of the result now let's run this
343:10 - program so right click run the file name
343:13 - and then let me provide some numbers
343:16 - here so 5 and 6 and press enter it is
343:21 - going to give me the result which is the
343:24 - division of these two numbers let me run
343:26 - the program once again
343:28 - and this time I will provide 10 and the
343:31 - second number is equal to 0 here and we
343:34 - know that when we divide some number y 0
343:37 - we get this exception which says 0
343:41 - division error and you will also observe
343:44 - that as soon as this error is thrown so
343:47 - this error comes from this line line
343:50 - five so when you click on this line it
343:52 - shows us that this error is coming from
343:55 - this line which is the division of these
343:57 - two numbers and as soon as this
344:00 - exception occurs all the code which we
344:03 - want to execute after that will not be
344:06 - executed so we were printing this result
344:09 - here but it's not printed let me print
344:12 - something else here so I am going to
344:14 - just say end and once again I am going
344:17 - to run the program I am going to provide
344:20 - the same inputs here and you can see
344:23 - neither this statement is printed nor
344:27 - the end is printed so whenever an
344:30 - exception occurs python stops whatever
344:33 - it is doing so in our case whenever this
344:37 - exception is thrown at this line both
344:40 - these statements will not be executed
344:43 - and why these two lines of code will not
344:45 - be executed because we haven't handled
344:49 - this exception so python allows us to
344:52 - handle the exception which we are not
344:55 - doing right now that's why it stops
344:58 - everything whenever this exception
345:01 - occurs so how to handle these type of
345:03 - exceptions so you can handle these type
345:06 - of exceptions using a try accept
345:10 - keyword so just write try and then under
345:14 - the try you write whatever you want to
345:16 - test and then you write accept keyword
345:19 - here so just write accept and then under
345:22 - the accept you write some code which you
345:26 - perform when the exception is thrown so
345:29 - I'm going to just say this error which
345:32 - is float division error okay so this is
345:36 - what I am going to print and don't
345:37 - forget to put colon in front of accept
345:40 - and try so let me run the code and let
345:44 - me give the same condition so 10 and
345:46 - second is 0 and this time you will see
345:49 - that this exception is not thrown and
345:52 - the result is also printed and the end
345:55 - line is also printed you can see here
345:58 - and also this line is executed which
346:02 - comes from the accept statement which
346:06 - says float division error so whenever
346:08 - you use try accept no notation first of
346:12 - all your code under a try will be
346:14 - evaluated and if it throws some
346:17 - exception then whatever code you write
346:19 - under the accept will be executed and
346:22 - then all the other statements will be
346:24 - executed whatever comes after this try
346:27 - accept code so this time no error is
346:31 - thrown and we have handled this error
346:34 - and you can see clearly it says that
346:37 - float division by zero which means it
346:40 - comes to the accept condition so now we
346:43 - are handling this error which is zero
346:46 - division error now in other condition
346:48 - when this error is not thrown so we will
346:52 - just give some valid value 10 and 5 so
346:55 - no zero division error will be thrown
346:59 - and when I press enter you will see that
347:02 - result will be printed and and will be
347:05 - printed by these two lines but no accept
347:08 - statement will be printed so this
347:11 - statement is not executed because this
347:15 - code has not thrown any error because
347:17 - there is no error occurred now as I have
347:20 - shown you that all the exceptions are
347:24 - under exception class so we can also
347:27 - write here exception and then we can
347:31 - just write this notation exception as e
347:35 - and this will show us more details of
347:39 - the error okay so I'm going to just
347:42 - write here error is equal to and then I
347:47 - am going to just print whatever the
347:49 - content of e is and once again when I
347:52 - run the code and I will give the number
347:56 - with the 0 here and you will see it
348:00 - prints this error which says float
348:03 - division by zero so this is printed
348:06 - using this e keyword which shows us the
348:09 - correct error I have also shown you that
348:12 - this exception is the base class of zero
348:15 - division error so for example when I
348:18 - will try to know the type of this error
348:22 - E and when I run the code once again and
348:25 - let me provide this input once again you
348:28 - will see that this error is of type 0
348:31 - division error so we know that this
348:34 - exception is thrown from this class so
348:36 - instead of writing this generic
348:38 - exception class we can also use this
348:42 - zero division error here and now
348:44 - whenever this specific error is thrown
348:48 - then only this will be printed here so
348:52 - let me run the code once again and let
348:54 - me give this input here and you will see
348:57 - once again this line of code is printed
348:59 - using this statement and that means zero
349:02 - division error is caught by this line of
349:06 - code and then the statement under that
349:08 - is printed now let's say this line of
349:11 - code throws some other kind of error
349:14 - other than zero division error so let me
349:17 - just remove this type casting of float
349:20 - here that means it's going to throw us
349:22 - some other kind of error which is not
349:25 - zero division error and let me run the
349:27 - code now and I will provide two numbers
349:31 - here once again
349:33 - and you will see that now this error is
349:37 - different which is type error which says
349:40 - unsupported type string and Float so why
349:44 - is this happening we are catching the
349:47 - exception using this accept keyword but
349:50 - we are only catching the zero division
349:53 - exception we are not catching the type
349:56 - error exception that's why our program
349:59 - is stopped and these two lines of code
350:02 - is not executed so you need to either
350:06 - use the Base Class of the exception
350:08 - which is this one exception and when you
350:11 - run the code and when you write these
350:14 - input it will be handle and you can see
350:17 - this time type error is caught it's not
350:21 - a zero division error but the type error
350:23 - which comes because the type which we
350:26 - have provided here is string and we are
350:29 - dividing string by a float value which
350:33 - throws this error so if you want to
350:35 - catch all the exceptions you use this
350:37 - base class but it's not a good practice
350:40 - you need to have information about your
350:43 - exceptions so I'm going to once again
350:45 - write this zero exception error here and
350:48 - what I can do more here is I can add one
350:52 - more accept statement here and this time
350:55 - instead of zero division error I can say
350:58 - catch also type error okay so I'm going
351:03 - to just write type error and here zero
351:06 - division error so we know from where
351:09 - this error is coming and when I run the
351:11 - code once again and when I give the
351:14 - inputs
351:15 - you will see that this error is coming
351:18 - from this line of code so this accept
351:23 - statement is catching your exception
351:26 - which is type error now when I just add
351:29 - this type cast of float once again and
351:33 - when I run the code once again and when
351:35 - I provide 10 and 0 once again you will
351:38 - see this error is caught by the other
351:41 - accept statement which is this statement
351:44 - which is used to catch the zero division
351:49 - error so you can also provide multiple
351:52 - accept statement in order to catch
351:55 - multiple exceptions in Python so this is
351:59 - how you can do exception handling in
352:02 - Python there is more to exception
352:04 - handling which I will cover in the next
352:06 - video in the last video we have seen how
352:09 - to use exception handling in Python and
352:11 - we have seen how to use this try accept
352:14 - statement and in order to catch the
352:17 - exceptions now in this video also we
352:20 - will talk more about exception handling
352:23 - in Python and we will talk about else
352:26 - and finally statement with this try
352:30 - except statement so I will be using the
352:33 - same code which I have used in the last
352:35 - video so I will highly recommend you to
352:37 - watch the last video If you haven't seen
352:40 - that now to start with at the end of
352:43 - this try accept statement we can also
352:46 - use the else statement so you can just
352:49 - write else and for now I will just print
352:54 - here for example underscore underscore
352:56 - else underscore underscore and also we
353:00 - can use a keyword called finally with
353:04 - our try accept statement and here also I
353:08 - am going to just print underscore
353:11 - underscore finally underscore underscore
353:14 - so what what does this else and finally
353:17 - statement do let's see by running our
353:20 - program so I am going to run the program
353:22 - and now I'm going to give some valid
353:25 - input so that our program will not throw
353:28 - any error so I'm going to just divide 10
353:31 - by 5 and then press enter and you will
353:35 - see what is printed here so first of all
353:37 - else is printed then finally is printed
353:40 - and then the result is printed using
353:42 - this print statement and then at the end
353:45 - this and string is printed so in this
353:49 - scenario there was no exception thrown
353:52 - by the code that's why none of these
353:55 - exception statements are printed so you
353:58 - can use else statement whenever your
354:01 - code does not throw any exception so
354:04 - whenever your code doesn't throw any
354:07 - exception else statement will be
354:10 - executed but when this finally statement
354:14 - is executed so let me give you one more
354:17 - scenario and then we will discuss about
354:20 - the finally statement and this time I am
354:23 - going to intentionally write 0 here
354:25 - which is going to throw the exception
354:27 - and I'm going to press enter and you can
354:30 - see Zero division error is thrown which
354:34 - is caught here and this statement is
354:37 - printed first and then this finally
354:40 - keyword is printed using this statement
354:42 - and at the end these two lines of code
354:45 - are executed so once again let's talk
354:48 - about the else statement you can see
354:50 - whenever your code throws an exception
354:54 - then this else statement will not be
354:58 - executed the else statement will only be
355:00 - executed whenever your code doesn't
355:03 - throw any exception but what's with
355:06 - finally statement so we have seen in the
355:09 - case of exception this finally is
355:12 - printed and in the case of no exception
355:15 - all also this finally is printed so this
355:17 - finally statement is guaranteed to be
355:20 - executed by the exception occurs or does
355:24 - not occurs so the only code which is
355:28 - guaranteed to be executed in all these
355:31 - lines is the finally statement finally
355:34 - statement is always executed whether
355:38 - your code throws any error or it doesn't
355:41 - throw any error now in which cases you
355:45 - might want to use this finally statement
355:48 - so sometimes whenever you use files you
355:52 - need to close these files after opening
355:57 - them whether the exception occurs or not
355:59 - it is mandatory to close your files and
356:03 - in those cases you can use this finally
356:06 - statement the next example is for
356:09 - example you are using any database and
356:12 - you are opening that database is right
356:16 - and for some reason your connection is
356:19 - lost with your database then the
356:22 - exception is thrown and in the final
356:25 - statement you can reconnect to your
356:27 - database using the reconnect code of the
356:31 - database so in finally statement you
356:34 - would want to execute that code which
356:37 - you think that have to be executed
356:40 - whether error happens or does not
356:43 - happens so in all those scenarios you
356:46 - can use the finally statement now the
356:48 - next question arises is whether we can
356:51 - use this else and the finally statement
356:54 - without the accept statement the answer
356:58 - is you can already see here no so you
357:02 - cannot use this else statement without
357:05 - the accept statement so you have to use
357:07 - accept in order to use this else
357:11 - statement but when I remove the accept
357:15 - and the L statements you can see there
357:18 - is no error now so you can use the try
357:21 - and finally without the use of accept or
357:25 - the else statement because the code
357:28 - under finally will always be executed
357:31 - whether your code throws any error or
357:34 - not so it's independent of this accept
357:38 - statement or the else statement so this
357:42 - is how you can use else and finally
357:44 - statements with the try and accept
357:47 - keywords now in this video I am going to
357:50 - show you how to raise an exception in
357:53 - Python now raising an exception is
357:56 - similar to through an error or exception
357:59 - in the languages like Java or C plus
358:03 - plus
358:04 - so python allows us to use a keyword
358:07 - called raise and that raise statement or
358:12 - keyword allows the programmer to force a
358:16 - specific exception to occur
358:19 - so let's get started and let's see this
358:21 - raise statement with an example so to
358:24 - start with I have created a class called
358:27 - coffee cup which have a init method
358:30 - which takes one argument which is the
358:32 - temperature and I am just initializing
358:35 - the value of temperature using this init
358:37 - method and this coffee cup class also
358:40 - have one more method which is called
358:42 - drink coffee and inside this bring
358:45 - coffee method I have some conditions so
358:48 - if the temperature is greater than 85
358:51 - then I print coffee is too hot if the
358:55 - temperature is less than 65 then I print
358:57 - coffee is too cold and if the
359:01 - temperature is between 65 and 85 then I
359:06 - print that coffee is okay and here I
359:10 - have created an instance of coffee cup
359:12 - class with an argument which is 75 to
359:15 - start with and I'm just calling this
359:18 - method drink coffee from this object so
359:21 - let us run the code and let's see what
359:22 - happens so because the 75 is neither
359:25 - satisfying this condition nor this
359:28 - condition so the answer which is printed
359:31 - here is coffee okay to drink now when I
359:35 - provide for example 101 temperature
359:38 - value here and when I run the code once
359:41 - again it will say coffee too hot if I
359:45 - say coffee temperature is 10 it says
359:48 - Coffee to cold now in these two
359:51 - situations when the coffee is too hot or
359:55 - the coffee is too cold I can also throw
359:58 - an exception and show the user some kind
360:01 - of message so instead of printing that
360:05 - coffee is too hot I can use a keyword
360:08 - called raise and then I can use any
360:12 - class of exception so we can use the
360:15 - exception class or any sub class of
360:18 - exception and you can see this exception
360:21 - class comes in this built in module so
360:24 - I'm going to just use this exception
360:27 - which is the base class
360:29 - and same I am going to do here when the
360:34 - coffee is cold and I'm going to comment
360:36 - these two print statements and now when
360:40 - I run the code it throws an exception
360:43 - without any error so it throws an
360:46 - exception and after that the execution
360:48 - of program stops so right now
360:51 - temperature is 10 which satisfies this
360:55 - condition so this exception is thrown
360:58 - and that is why we see this exception so
361:01 - in Python we can throw an exception
361:03 - using this keyword raise and this
361:07 - exception class or any sub class of this
361:10 - exception class now in the last video
361:12 - also I have shown you how to see all the
361:15 - subclasses which are under the exception
361:17 - class to see them you can just open your
361:20 - python console and in the python console
361:24 - you just need to import built-ins and
361:28 - then press enter and now you use a
361:31 - method called help and inside the help
361:35 - method you use this keyword built-ins
361:38 - and then press enter which is going to
361:40 - give you a big list here and when you
361:43 - scroll up at the top you will see
361:46 - classes here and under the classes you
361:48 - will see base exception and we have used
361:51 - this class which is exception you can
361:54 - see here so to raise an exception you
361:56 - can use this exception class or any sub
362:00 - class under this exception so you can
362:02 - use arithmetic error or you can use
362:05 - Rizzo division error buffer error
362:07 - whatever error is appropriate for your
362:11 - exception you can use from this list so
362:16 - right now I have just used the exception
362:19 - class which is the base class to throw
362:21 - an exception here instead of exception I
362:23 - can also use for example
362:26 - exception called value error which is
362:29 - also the sub class of this exception
362:32 - class and now when I run the code it
362:35 - will show me the value error so this is
362:38 - the one way of throwing an exception in
362:41 - Python now with these exceptions you can
362:43 - also pass an argument inside the
362:46 - parenthesis so you can write exception
362:48 - and then in the parentheses you can
362:51 - write the message whatever you want to
362:54 - show when this exception is thrown so
362:57 - here I can just write copy is too hot
363:00 - and for the another exception I am going
363:03 - to just say coffee to cold and when I
363:07 - run the code because it's a value
363:10 - exception which comes from this
363:12 - statement it shows the value error
363:15 - exception and then the message which we
363:18 - want to show so we are just showing
363:20 - coffee to cold so here it also prints
363:23 - the same message which we have given as
363:26 - the first argument of this exception
363:29 - class so you can either raise an
363:31 - exception with the Base Class exception
363:33 - or the subclass of the Base Class
363:36 - exception for example value error and
363:39 - you can also give an optional argument
363:41 - here which is the message which will be
363:43 - displayed at the time when this
363:46 - exception is thrown so this is how you
363:48 - can raise or throw an exception in
363:50 - python in the last video we have seen
363:53 - how to raise an exception in Python
363:55 - using this raised keyword and we have
363:59 - seen how to raise an exception using the
364:03 - base class which is exception or the
364:05 - subclasses of this exception class for
364:07 - example the value error or any other
364:10 - error which is the subclass of this
364:12 - exception now in this video I am going
364:15 - to show you how you can create your
364:17 - custom exception classes and use them to
364:21 - raise exception in Python so let's get
364:24 - started so I am going to create a custom
364:27 - exception class here so let let me
364:30 - create a class and I'm going to name it
364:32 - as coffee to hot exception and to create
364:36 - your own custom exception class you need
364:39 - to inherit from the exception class so
364:43 - you just need to provide exception as
364:45 - the superclass yeah inside the
364:47 - parenthesis and then after the colon you
364:51 - can just Define the init method to
364:54 - provide the message so it takes one
364:57 - argument for example MSG which stands
365:01 - for message and now what we need to do
365:03 - is we need to pass this message to the
365:07 - Constructor of this exception class and
365:10 - how to do that you can do that using the
365:13 - super function so you can use super and
365:16 - then call the init function here which
365:20 - means we are calling the init method of
365:22 - this exception class using this super
365:25 - function and we just need to pass the
365:29 - message which comes as an argument of
365:32 - your custom exception class to the super
365:34 - class which is the exception class and
365:37 - that's your custom exception class now I
365:41 - can pass this class instead of this base
365:45 - exception class similarly to create the
365:49 - coffee to cold class I can once again
365:53 - write coffee to cold here and instead of
365:56 - using this subclass of exception I can
365:59 - give here my own custom exception class
366:02 - so let's run this program and let's see
366:04 - what happens so because right now the
366:07 - temperature which we have provided here
366:08 - is 10 which means This falls in this
366:12 - condition which says Coffee to cold so
366:15 - we are seeing this exception which says
366:18 - Coffee to cold and then it is going to
366:22 - show us this message which says coffee
366:24 - too cold now we have made this exception
366:26 - class explanatory enough so that we
366:30 - don't require this coffee too cold
366:32 - message instead of this coffee to cold
366:34 - message we can give some more
366:37 - information for the user for example we
366:40 - can write here coffee temperature and
366:43 - then we can provide the information of
366:46 - the coffee temperature which the user
366:48 - has provided so self dot underscore
366:51 - underscore temperature and same we can
366:54 - provide in the coffee to hot exception
366:58 - message one more thing which we need to
367:01 - do here is we need to convert this
367:03 - temperature into a string so we can use
367:06 - this mesh third Str to convert from the
367:11 - integer or the float value to the string
367:14 - value so this is just the type casting
367:16 - from the integer to the string and now
367:20 - we are going to run our program and see
367:22 - what's the result here so you can see
367:25 - now the result says Coffee to cold
367:28 - exception and then it shows the
367:30 - temperature which is provided by the
367:33 - user let us say just temperature we
367:35 - change from 10 to 100 and once again run
367:37 - the code now its going to say coffee to
367:40 - hot and is going to display the
367:43 - temperature of coffee which is 100 here
367:46 - so let's rewind what we have learned
367:48 - about creating our own custom exception
367:52 - class so in order to create your own
367:54 - custom exception class you need to
367:57 - inherit from this exception base class
368:00 - or the super class and then you can
368:02 - create any custom class with any name
368:06 - and for passing the message which you
368:08 - provide as the first argument of your
368:10 - exception you can just create an init
368:14 - method which takes this message and pass
368:16 - it to the init method of your super
368:20 - class which is the exception class so
368:23 - this is how you can create your own
368:25 - custom exception classes and use them to
368:28 - raise that exception in Python in this
368:32 - video we will talk about this special
368:34 - keyword which is underscore underscore
368:37 - name underscore underscore and we will
368:40 - see in which situations we use this
368:43 - keyword and why do we use this special
368:47 - if statement which is name is equal to
368:50 - underscore underscore main underscore
368:53 - underscore
368:55 - so let's get started so to start with
368:58 - you can see I have two files here one is
369:02 - my math Dot py and other is test dot py
369:06 - both the files are in the same directory
369:10 - in my project so now what I will do here
369:14 - is I will Define a very simple method
369:16 - which is ADD which takes two argument A
369:21 - and B and it is going to return the sum
369:25 - of A and B so we have already seen how
369:28 - to create these kind of simple functions
369:31 - and now what I am going to do is I'm
369:33 - going to use this print function to call
369:36 - this add function and here I am going to
369:40 - just give two numbers here so nothing
369:44 - special about this code now what I am
369:46 - going to do next is I am going to import
369:48 - this file which is my math dot py file
369:52 - into the test Dot py and now I'm going
369:56 - to just use print and then I'm going to
369:59 - use this module name which is my math to
370:02 - call this function which is there inside
370:04 - this
370:06 - mymath.py file and then I'm going to
370:09 - provide two values here once again into
370:12 - this add function so let us say 7 and 6.
370:16 - now let me run this test dot py file
370:19 - first in which I am importing this my
370:22 - math dot py file so right click and then
370:25 - run test which is going to run this
370:28 - program and what you will see here is it
370:31 - prints 26 which is the sum of 10 and 16
370:36 - which is printed using this print
370:38 - statement and then you will see 13 which
370:42 - is printed using this print statement
370:44 - which is the sum of these two numbers
370:47 - which we have provided in test dot py
370:51 - now I have a simple question is this a
370:54 - correct response because I just want to
370:57 - call the add method from
371:01 - mymath.py file into the test Dot py and
371:06 - I don't want to print any result which
371:09 - is coming from this print statement
371:12 - because I just want to use mymath.py as
371:16 - a module and we just want to use the
371:19 - functions inside this my math dot py
371:22 - file not any special code which is
371:25 - written here so that's where we use the
371:28 - special condition which is if underscore
371:31 - underscore name underscore underscore is
371:33 - equal to underscore underscore main
371:35 - underscore underscore and under this
371:38 - condition we use whatever code we want
371:41 - to execute and this name is a special
371:45 - built-in keyword in Python whose value
371:48 - is equal to either the module name which
371:51 - is my math or its value is equal to
371:53 - underscore underscore May in underscore
371:56 - underscore so under what condition the
371:59 - value of underscore underscore name
372:01 - becomes the module name and in what
372:04 - condition underscore underscore name
372:06 - underscore underscore contains this
372:08 - value which is mean so whenever you run
372:11 - this my math dot py file as the main
372:15 - python file so whenever I run this file
372:19 - which is
372:20 - mymath.py file then the value of name
372:24 - becomes this which is underscore
372:27 - underscore main underscore underscore
372:30 - let's print the value of this variable
372:33 - and then we will see how this value
372:36 - changes in different conditions so once
372:39 - again I am going to run this code and
372:42 - you will see the value of this special
372:44 - variable becomes underscore underscore
372:47 - mean underscore underscore so whenever
372:50 - you will run this my match dot py as the
372:54 - main file then on only the value of this
372:56 - special keyword underscore underscore
372:58 - name underscore underscore becomes this
373:01 - mean value now if I import this my math
373:05 - module into some other file for example
373:08 - test Dot py and then use the functions
373:11 - from this module then let's see what
373:15 - happens so I am going to just right
373:17 - click on the test dot py now and then
373:20 - I'm going to run it and you will see the
373:23 - value of this underscore underscore name
373:27 - underscore underscore is now is equal to
373:30 - the name of your module okay so my
373:34 - module name is my math dot py so here it
373:38 - just prints the module name and you will
373:41 - also see that because we have provided
373:43 - this condition this statement is not
373:46 - executed and only the statement which we
373:50 - have written here is executed because
373:53 - this condition checks for the name value
373:56 - which checks whether we are running this
374:00 - my math dot py file as the main file or
374:04 - we are importing this file into the
374:06 - other file and we are just using the
374:08 - functions inside that module so this
374:11 - condition is similar to for example main
374:15 - method in the C plus plus or the Java
374:20 - programming language and what does the
374:22 - main method do in those two languages
374:24 - the main function is the main entry
374:27 - point of your program so this condition
374:31 - is performing the same operation we can
374:34 - run these two files using the terminal
374:36 - also so in py term you can just click on
374:39 - this option which says terminal which
374:42 - opens the terminal in your pycharm IDE
374:45 - in the same folder in which you are
374:48 - currently working in and then I can use
374:51 - this python command to call this my
374:55 - imath dot py file first of all so I'm
374:58 - going to just use mymath.py which is
375:01 - going to run this mythmath.py and you
375:05 - can see if we run this mymath.py as the
375:09 - main file then the value of this special
375:11 - keyword name becomes main otherwise when
375:15 - we are going to run this test dot py
375:18 - file in which we are just importing this
375:22 - mymath.pi file and then when I press
375:24 - enter you will see that now the value of
375:28 - this name variable becomes the name of
375:33 - your module which is my math so in this
375:35 - way you can use the special condition in
375:38 - Python in this video I am going to show
375:40 - you how you can create a text file in
375:43 - Python and write in it so let's get
375:46 - started so to start with we use a
375:50 - built-in function which is open and it
375:53 - takes two argument first is the name of
375:57 - the file which we want to create or read
375:59 - so let's say I want to just create a
376:03 - file which is demo dot txt in the same
376:07 - folder in which I am working in so you
376:10 - can see I'm working in my file handling
376:12 - project and there is only one file there
376:15 - which is test Dot py and this demo dot
376:19 - txt file will be created in the same
376:22 - folder now the second argument which we
376:24 - want to give here is the mode so there
376:27 - are several types of modes which we can
376:30 - use with this open function to work with
376:35 - the files so let me show you the list of
376:37 - some of these modes so you can see on
376:41 - the left hand side I have listed the
376:43 - modes so you can use the r or R Plus or
376:48 - W or W plus or a or b now R is used to
376:54 - read from the file file and if you don't
376:57 - provide any mode to this function then
377:01 - the default mode is the read mode now if
377:04 - you want to write to a file you use this
377:07 - write mode with a keyword W so we are
377:11 - going to use this W keyword in order to
377:15 - write to the file so let's use this W
377:18 - keyword here and then this open function
377:22 - returns a file object so let's store
377:26 - this file object into a variable now
377:30 - generally we call this file object a
377:34 - file Handler and using this file Handler
377:37 - we can work with the file on which we
377:41 - are working on so this file Handler will
377:43 - be used to work on this file which we
377:47 - want to create now in the next line I
377:50 - will just use this file Handler and then
377:53 - I can call some methods here you can see
377:57 - there is a list of methods I can call on
378:00 - this file Handler which is returned by
378:03 - this open function so to write into a
378:07 - file I can use the write function and
378:12 - here inside the write function you can
378:15 - provide any text whatever you want to
378:18 - write to the file so let's say I just
378:21 - want to write this line of string to my
378:25 - text file which I am creating so I can
378:28 - just paste this text here and then after
378:31 - writing to a file when you are finished
378:34 - working with the file you use once again
378:37 - this FH and then call a method called
378:41 - close on it now what does this close
378:45 - function do so this close function is
378:48 - used to close the file and immediately
378:51 - free up any system resources you used by
378:56 - your file Handler which is FH and it's a
379:00 - good practice to use this whenever you
379:04 - are done with the handling of your file
379:07 - so always remember to use this close
379:09 - function after you are done with the
379:12 - handling of your file so this is a good
379:14 - practice but I would say you must call
379:17 - this function and that's it so this W
379:20 - mode if the file demo dot text doesn't
379:24 - exist it's going to create the file and
379:28 - then it's going to write this text into
379:31 - the file so w mode is responsible for
379:34 - creating the file also and if the file
379:37 - already exists it will override the
379:41 - previous string by the string which you
379:43 - are writing using this write function so
379:47 - let me just run this code and you will
379:49 - keep I on this project because this file
379:52 - will be created inside this project so I
379:55 - am going to right click and then run
379:57 - this test file and you will see as soon
380:01 - as I run this test file there is one
380:04 - more file created here which is demo Dot
380:07 - txt and when I click on this file you
380:11 - can see the same text appears here which
380:14 - we have written using the write function
380:17 - now if you want to provide the line
380:20 - breaks you can provide them using
380:22 - backslash n and I'm going to once again
380:25 - run the code so remember when the file
380:28 - doesn't exist the W mode is going to
380:31 - create the file and if the file already
380:33 - exists which it does now then it is
380:37 - going to overwrite it so I am going to
380:39 - run the program once again and see the
380:41 - content of this demo.txt and you can see
380:44 - this string is split into two lines
380:48 - which is done by this backslash n so let
380:52 - me just split the screen so you will see
380:55 - see the demo in the real time so on the
380:59 - right hand side I have my demo dot txt
381:02 - file and on the left hand side I have
381:04 - this code on which I am working on so
381:07 - let's write something else in this file
381:09 - so instead of writing this big line of
381:13 - text into the file what I want to do now
381:16 - is I want to use a for Loop to print 10
381:20 - lines into this demo.txt file so I'm
381:24 - going to use a for Loop for that and I'm
381:28 - going to just write for I in range and
381:33 - let us say the range is 10 and then we
381:36 - will call our write function using this
381:39 - FH file Handler and then what I want to
381:42 - write here is let us say this is line
381:46 - number modulus D and I will just replace
381:50 - this mod D with the line number and then
381:54 - I will just provide the line break after
381:58 - that and in the previous videos we have
382:01 - already seen that when you use this
382:04 - modulo symbol and then give some value
382:07 - here for example I then this mod D will
382:10 - be replaced by this I right so let us
382:14 - run the code and let's see what happens
382:17 - now so I am going to run this code and
382:19 - now you will see that this code prints
382:23 - this is line number 0 this is line
382:26 - number one because the range starts from
382:29 - zero so in order to print the line
382:32 - number from 1 what we can do here is we
382:36 - can use this parenthesis here let me
382:39 - just move this to the side so inside the
382:42 - parenthesis we can use I plus 1 so we
382:45 - can add 1 every time this value of I is
382:49 - printed so it will start from 1 so let
382:52 - us run the code once again and you can
382:54 - see e now it prints this is line number
382:58 - one line number two three four up to ten
383:01 - now you might have already observed that
383:04 - whenever I run the code this demo dot
383:07 - txt file is overwritten every time when
383:11 - I run this code so the old text is
383:15 - overwritten by the new text now in order
383:19 - to avoid the overwriting of the text
383:21 - what we can do is we can use a special
383:25 - mode which is a here and a stands for
383:29 - append and this append mode is used to
383:33 - append the text to the file so let's
383:35 - replace this W mode with the a mode now
383:41 - okay and you can see this is the
383:43 - previous content of the demo.txt file
383:46 - and now when I run the code you will see
383:50 - the previous content is staying there
383:54 - and the new content content is appended
383:56 - to the same file so a we use to append
384:01 - to the existing content of the file now
384:05 - let me go to the list of modes once
384:07 - again and you will see there is a
384:09 - special mode W plus also which means if
384:12 - you want to read and write at the same
384:15 - time you use this W plus mode and this
384:20 - mode is going to create a new file if
384:23 - the file doesn't exist otherwise a file
384:26 - already exists it is going to overwrite
384:29 - to the file which already exists also
384:33 - you will see a special mode B here which
384:36 - is used for the binary file such as
384:39 - images or other binary files this R and
384:43 - R plus mode we will see in the next
384:46 - video and I'm going to show you how to
384:49 - read from the file using these modes in
384:52 - python in the next video so let's go to
384:54 - our code once again and in the videos in
384:57 - which I have shown you how to use
384:59 - exception handling I told you we can use
385:02 - try with the finally keyword so try and
385:06 - we can enclose this for Loop inside the
385:10 - try block and let's do this and then in
385:14 - the finally we can add the closing of
385:18 - this file and what does this finally do
385:21 - if you remember this finally block is
385:24 - always call in the case exception is
385:27 - thrown by this code or if exception is
385:31 - not thrown so this FH Dot close is
385:36 - definitely will be called whenever we
385:39 - use this finally keyword in order to
385:42 - call the FH Dot close function so you
385:46 - can either use this kind of code in
385:49 - order to work with your file Handler and
385:52 - then use this close function with this
385:54 - file Handler at the end of the handling
385:57 - of the file otherwise python provide the
386:00 - shorter form of writing the same type of
386:04 - notation and this notation is you use a
386:08 - keyword width and then you call open
386:12 - function and you can provide the same
386:15 - type of arguments here for example demo
386:19 - dot text and append and then you use as
386:23 - keyword and then you write the name of
386:26 - the file Handler for example f h as you
386:29 - have done here and then you provide this
386:32 - colon and inside this width statement
386:35 - you work with your code for example we
386:37 - work with the file writing with this for
386:42 - Loop so this whole code including the
386:45 - try and finally block is equivalent to
386:48 - this kind of code which is the shorter
386:51 - form of writing the same code so this
386:55 - width statement is going to always call
386:57 - this close method with your file Handler
387:01 - when you are done with the handling of
387:04 - your file so you don't need to
387:07 - explicitly call this try finally Block
387:10 - in order to work with your file this is
387:14 - enough to work with the file so either
387:17 - use this notation or this notation both
387:20 - are equivalent to each other now the
387:23 - last thing which I want to show here is
387:25 - let me just use the width statement in
387:28 - order to work with this demo.txt file is
387:32 - for example you do not want to create
387:34 - this demo.txt file into the current
387:37 - project instead you want to create this
387:40 - file into some folder on your computer
387:43 - so let's say I want to create this file
387:46 - inside this folder which is inside my C
387:49 - directory so I can just copy this whole
387:52 - path from here and then I can just paste
387:56 - this path with the backslash here and
387:59 - the important thing to note here is on
388:01 - Windows you always need to use the
388:04 - double backslashes in order to provide
388:07 - the file path okay so use these double
388:11 - backslashes to provide the file path so
388:14 - C inside the C directory I have this
388:16 - files folder and inside the file folder
388:20 - right now you can see this is empty and
388:23 - now when I run this s code let me just
388:26 - change the mode to W which is for right
388:29 - mode and I'm going to run the code and
388:31 - as soon as I run the code this demo.txt
388:34 - file is created here and you can also
388:37 - see the content of the file on the right
388:39 - side which is this is line one up to
388:43 - this is line number 10. so this is how
388:45 - you can create a text file and write
388:47 - into it using python in the last video
388:50 - we have seen how to create a file in
388:53 - Python and how to write content in that
388:57 - file in Python now in this video I am
389:00 - going to show you how you can read the
389:02 - content of a text file using python
389:06 - now if you remember in the last video I
389:09 - have told you that you can use this open
389:12 - function to open any text file and this
389:16 - open function takes two argument first
389:18 - is the path of the file with the exact
389:22 - name of the file so because this
389:25 - demo.txt file is in the current folder
389:28 - in which I am working in that's why I
389:31 - haven't provided any exact path I can
389:34 - just give the file name here but if you
389:37 - have the full path then you can provide
389:39 - for example C colon backslash and then
389:42 - whatever is the folder name and then the
389:46 - file name so either you can provide the
389:48 - exact path of this file with the file
389:51 - name or you can provide the file name if
389:56 - this file is present in the same
389:58 - directory in which your python script is
390:01 - there now the second argument which this
390:04 - open function takes is the more mode of
390:07 - opening this file so we have seen in the
390:11 - last video when we write w here or a
390:15 - here that means we want to write or
390:18 - append to the file now in order to read
390:21 - from the file this mode here should be R
390:25 - which is the read mode in the last video
390:27 - we have seen this table in which we have
390:30 - seen that we can use this r or R plus
390:33 - mode in order to read the file or if you
390:37 - want to read and write at the same time
390:38 - you can use this R plus mode now if you
390:42 - see here I have also written here that R
390:45 - is the default mode so when I don't give
390:49 - any argument here as the second argument
390:51 - which is for the mode then also the
390:54 - default mode is the read mode so let's
390:58 - see how we can read this file which is
391:00 - demo dot txt file and the content of
391:03 - file is shown here so in order to read
391:06 - the file you use the file Handler and
391:09 - then use the function for example read
391:11 - which is used to read the whole file now
391:15 - in order to print the content of the
391:17 - file you need to use this print function
391:20 - so this FH dot read will provide the
391:24 - string and then using this print
391:27 - function we can print that string so
391:30 - let's run the code and let's see what
391:31 - happens so you can see it prints the
391:35 - whole content of the file now let me
391:37 - minimize this window once again now let
391:40 - us say if you provide some file path
391:44 - which doesn't exist so this file name
391:47 - doesn't exist in the current folder and
391:51 - when I try to read this file let's see
391:53 - what happens so it is going to throw an
391:56 - error and this error says that no such
391:59 - file or directory so if you try to open
392:02 - a file which doesn't exist it will
392:05 - through an error so you need to give the
392:08 - exact name of the file in order to read
392:12 - it now here we can also be more specific
392:17 - and we can also say that this is a read
392:20 - mode in which I want to open this file
392:23 - and once again when I run the code it's
392:25 - going to read the content of this file
392:28 - now let us say I just want to read the
392:31 - first word of first line here so let's
392:34 - say I want to just read the first four
392:36 - character of this line one then I can
392:39 - just write 4 here which will read the
392:42 - first four character of the line one now
392:46 - if we just want to read the first two
392:49 - words of this line one then you can see
392:53 - the number of character here 4 for this
392:56 - and then there is a space so five
392:58 - character and then I as is two character
393:02 - more so 5 plus 2 7 so when we write 7
393:05 - here then it is going to read the first
393:09 - two word of this line one now let us say
393:12 - I want to read the whole line so instead
393:15 - of some words or some characters I want
393:18 - to read the whole line then I can use a
393:21 - function called read line and this read
393:24 - line function is going to read the first
393:26 - line of the text which is present in my
393:29 - file so I am going to just run the code
393:31 - and you can see it reads the first line
393:34 - of my text file now if you want to read
393:37 - the next line then you need to use this
393:41 - readline function once again and when I
393:44 - run the code once again it is going to
393:46 - print the second line and so on so if
393:49 - you want to print the three lines then
393:51 - you use this function three times now
393:54 - let us say you want to read some
393:56 - characters of the line one then you can
393:59 - once again write the number of character
394:01 - which you want to read and then run the
394:03 - code and it will print the first four
394:05 - character of the first line and you will
394:09 - observe that when I use this read line
394:12 - function once again the string starts
394:14 - from the ending of the first line so in
394:18 - the first line we have just used the
394:21 - first four characters of the first line
394:23 - now pointer will be set to the end of
394:28 - this first four characters so when you
394:30 - use the read line function once again
394:32 - it's going to start where the first line
394:35 - has ended so first line has ended at the
394:38 - end of the fourth character and then
394:41 - it's going to read the space and then
394:44 - all the line characters which are there
394:46 - so in the second readline statement it
394:48 - has printed this kind of text which is
394:51 - after the first four characters and in
394:54 - the third read line because we haven't
394:56 - provided any argument here so it has
394:58 - printed the whole line here so let me
395:00 - minimize this now let us say you want to
395:03 - read all the lines of this file l in the
395:07 - form of the list so you want to read the
395:11 - 10 lines of this file in the form of
395:14 - list you can use a function called dot
395:18 - read lines so here you just need to
395:21 - write dot read lines and this function
395:24 - is going to give you the list of every
395:28 - line in the text so let me run the code
395:30 - first of all and you can see this is the
395:33 - list which starts from a square bracket
395:35 - and the first element of the list is the
395:39 - first line with the backslash n which is
395:42 - the line break comma the second element
395:45 - of the list is the second line of the
395:49 - text which we are reading from here so
395:51 - now we know that this read lines
395:53 - function Returns the list so we can also
395:56 - call some index of this list so let us
395:59 - say I just want to read the fifth line
396:02 - of this text then I can just write index
396:07 - 4 because index starts from 0 right so
396:10 - let me run the code once again and it
396:12 - prints this line which is at the line
396:15 - five now let's say I want to read the
396:18 - last line I can just say 9 and it's
396:21 - going to print the line number 10 of
396:25 - your text file let me minimize this once
396:27 - again
396:28 - now let us say you want to read all the
396:32 - lines of this text one by one and do
396:37 - some operations on each and every line
396:40 - one by one so you can use a for Loop for
396:43 - that to iterate over the lines one by
396:47 - one so for let us say line in your FH
396:50 - which is the file Handler and then you
396:54 - can print the line one by one so you can
396:56 - call this variable which is line here
397:00 - and now let's run the code and it's
397:03 - going to iterate over this text line by
397:06 - line and every line is printed one by
397:09 - one using this print line statement so
397:12 - let's say you want to count the number
397:13 - of characters in every line you can use
397:16 - this function which is l e n function
397:18 - which is used to count the length of a
397:21 - string and when I run this code now it's
397:24 - just going to print the number of
397:25 - characters in every line so now once
397:29 - again let us say you want to count the
397:31 - number of words in every line so we can
397:35 - use a function on this line variable
397:38 - which is a function called split so line
397:41 - dot split which is going to split your
397:45 - line on the basis of character you
397:47 - provide as an argument here so let us
397:50 - say I want to split the line on the
397:52 - basis of a space so let me run the code
397:55 - once again and now you will see that
397:58 - it's going to give me the list of each
398:00 - and every word of every line so this is
398:05 - the first element of the first list and
398:08 - then the second element third element
398:09 - and fourth element and The Fifth Element
398:12 - so if you want to count the number of
398:14 - words in every line then once again we
398:17 - can enclose this code into a function
398:21 - called Len ok so this length is going to
398:25 - give you the length of this list and
398:28 - when I run the code once again it is
398:30 - going to print the number of words in
398:33 - every line of this text file so if you
398:36 - want to count the number of words in
398:38 - every line you can split the words using
398:41 - the space and then using this Len
398:44 - function you can just find the length of
398:47 - the list which is returned by this split
398:50 - function or if you want to just see the
398:52 - list of words in every line then you can
398:56 - just use this function without the Len
398:59 - function and it is going to give you the
399:01 - list of each and every word of every
399:04 - line of your text file and of course to
399:07 - make things easier you can also use this
399:10 - with notation which I have also told you
399:12 - in the last video so you can write width
399:15 - and then this open function and in the
399:18 - open function you give these two
399:20 - argument which is the name of the file
399:22 - and the mode and then you can use as FH
399:26 - for example and then you can execute
399:29 - whatever code you want to execute using
399:31 - this file Handler for example once again
399:33 - I want to read the content of the file
399:36 - once again so using this with statement
399:38 - you don't need to use this FH Dot close
399:42 - function because this width function is
399:45 - going to take care of closing of this
399:48 - Handler by itself so this whole code is
399:51 - equivalent to the code which you write
399:54 - whenever you use the try finally block
399:57 - with this code also so this is also
400:01 - possible so let me just remove this code
400:03 - and let's run the code once again it's
400:06 - going to give me the same result as we
400:08 - have seen earlier so in this way you can
400:11 - read the text files in Python in this
400:15 - video I am going to show you how to
400:16 - handle Json values in Python so first of
400:20 - all what is Json so Json is a text
400:23 - format which stands for JavaScript
400:25 - object notation and Json is a syntax
400:30 - which is used for storing and exchanging
400:34 - data now if you want to know more about
400:37 - Json what is Json and how to create
400:40 - jsons and what value you can store in
400:43 - Json then I have created a whole video
400:46 - about that so you can watch that video
400:49 - and understand more about Json so let's
400:51 - get started with this tutorial and let's
400:54 - see how we can use Json in Python so to
400:58 - use Json in Python you use a inbuilt
401:02 - package which is called Json so you need
401:05 - to import this inbuilt package which is
401:09 - Json now let us say I have a python
401:12 - dictionary so let me create a dictionary
401:15 - in Python which have let us say
401:26 - so this is a dictionary in Python so in
401:29 - order to convert this dictionary into
401:31 - Json you use this Json keyword which we
401:36 - have imported here and then call a
401:39 - method called dumps so this dumps method
401:42 - we can call here to convert some python
401:45 - values to a Json value and we will pass
401:49 - this dictionary variable a here and in
401:52 - order to print the value of Json we can
401:55 - use this print method so I am going to
401:57 - enclose this Json dot dumps method
402:01 - inside our print function now let us run
402:04 - this code and you will see that this
402:07 - Json dot dumps function has converted
402:10 - Your Dictionary into our Json value so
402:15 - this is our Json text format now the
402:18 - next question which can arise here is
402:20 - what data types this dumps function
402:23 - takes as an argument so it takes a
402:27 - dictionary we already know now but what
402:30 - are the other data types which we can
402:32 - pass as an argument to this dumps
402:35 - function so it turns out that you can
402:38 - provide majority of your collections and
402:41 - your data types as an argument to this
402:44 - dumps function so you can provide
402:46 - dictionary here list Tuple string int
402:50 - float or a Boolean value any value you
402:53 - can provide here I think sets you cannot
402:56 - provide as an argument here but other
402:58 - than sets you can provide any other
403:01 - format as an argument to this dumps
403:05 - methods so let me show you how you can
403:07 - provide all these values into this Json
403:10 - dot dumps function so here in the first
403:14 - print statement I have provided the
403:16 - dictionary in the second print statement
403:18 - I have provided the list in the third we
403:21 - have provided Tuple in the fourth
403:23 - statement we have provided the string
403:25 - and then the integer and then float
403:27 - values and then we have provided the two
403:29 - Boolean values false and true and at
403:33 - last we have provided this none keyword
403:36 - to this dumps function so let's run the
403:40 - code and let's see what happens so
403:42 - everything runs fine so that means you
403:45 - can convert from this Json dot dumps
403:47 - function a dictionary or a list or a
403:51 - tuple or a string or a decimal or a
403:54 - float or a Boolean value into a Json
403:57 - value and all these are valid Json
404:01 - values now let me go once again to this
404:03 - dictionary method and here also as the
404:07 - Json values you can provide any type of
404:10 - values which I have shown here so you
404:13 - can use inside this dictionary for
404:15 - example another dictionary so I can just
404:18 - write
404:24 - so we can also provide a tuple here so
404:26 - let's run this code and it's totally
404:28 - valid so you can see our dictionary is
404:31 - now converted to our Json value now this
404:34 - dumps function also takes few other
404:36 - parameters also so we can also provide a
404:40 - parameter called indent here so you need
404:43 - to write indent is equal to and then
404:45 - after that you can write some number
404:47 - here so if you want to give the indent
404:50 - of 4 to each and every element of your
404:53 - Json then you can write indent is equal
404:56 - to 4 and let me run the code once again
404:58 - and now you can see this Json is printed
405:03 - into a pretty format and the indentation
405:07 - here indentation means this indentation
405:09 - is four spaces for each and every
405:13 - element of your Json so if you want to
405:15 - print your Json into a pretty format
405:18 - then you can just write indent is equal
405:21 - to and the number of indents you want to
405:24 - give so let us say I want to provide
405:26 - just two indents here and let me run the
405:28 - code once again and you will see now
405:30 - this only have the two indents for every
405:34 - element of this Json also you can
405:37 - provide a parameter called separators
405:40 - and as the separators let's say first
405:43 - value I want to provide here is a DOT
405:46 - value and the space here and the second
405:48 - value I want to provide here is this
405:51 - equals to symbol so what this separators
405:54 - argument does is it will replace your
405:57 - commas with this dot notation and your
406:02 - colons with this equals to notation and
406:05 - when I run the code you can see now the
406:09 - colon is replaced by the equals to
406:12 - symbol and the comma is replaced by this
406:16 - dot symbol so you can use separators
406:18 - like this also but I will not prefer to
406:22 - use these kind of notation the orange
406:24 - additional notation is the one which I
406:26 - prefer to use which is with commas and
406:29 - these colons one more thing you can use
406:31 - here is the sort keys so you can just
406:35 - write sort Keys here and whenever you
406:38 - write true here it's going to sort your
406:41 - Json according to their alphabetical
406:44 - order so you can see right now your keys
406:47 - are assembled in non alphabetical order
406:51 - so they are assembled in a random manner
406:54 - but when you give sort Keys is equal to
406:57 - True here and I am going to run the code
406:59 - you can see age comes first then the
407:02 - marks and then the name and then the
407:05 - object so now your keys are assembled or
407:08 - sorted in the alphabetical order when
407:11 - you use this kind of notation now let us
407:14 - try to save this Json value into a Json
407:17 - file so in the last video I have shown
407:19 - you you can use this with statement and
407:22 - then you can use open function and we
407:26 - can provide a file name here for example
407:29 - demo dot Json so Json file always have
407:33 - the extension dot Json and the second
407:37 - value we will provide here is the mode
407:39 - so we want to write to the file so
407:42 - that's why we have used W here as f h
407:46 - and then using this FH we can write to
407:51 - this file which we have created so we
407:53 - can pass this Json dot dumps function
407:56 - here and now your dictionary a will be
408:00 - converted into a Json and then this Json
408:03 - will be saved into this demo.json file
408:07 - you can see here I am working inside
408:09 - this file handling project and here I
408:12 - only have dot py file and when I run
408:16 - this code you will see there is one more
408:18 - file which will be created here which is
408:21 - demo.json so I can open this file here
408:24 - and here you will see all our Json
408:28 - values are saved in this demo dot Json
408:32 - file so we have provided these values
408:36 - into the demo.json file let me just
408:39 - split the screen so you will be able to
408:41 - see it correctly so we have provided the
408:44 - name here so name is here age is here
408:47 - Max is here and then the object is here
408:51 - and also the pass is also here so this
408:55 - is how you can write your Json values
408:58 - into a file now let's see how we can
409:01 - read the Json values from a file so I am
409:05 - going to remove this dictionary from
409:08 - here and instead of using this right
409:10 - mode I'm going to just use read mode
409:12 - which we use to read from the file and
409:16 - the file we already have so let's say we
409:18 - want to read all this data which we have
409:20 - written into this file and now instead
409:22 - of using this line I need to use FH dot
409:26 - read function here and to print the
409:29 - content what we have read from this file
409:31 - we can use the print function so I am
409:34 - going to enclose this FH dot read into
409:37 - the print function and let's run the
409:40 - code first of all and when I run this
409:42 - code you can see it prints all the
409:45 - content of this Json now one thing which
409:48 - you need to observe here is this FH dot
409:51 - read function is going to give you a
409:53 - string value so to confirm that we can
409:56 - just write type here and we will just
409:59 - see the type of this FH dot read
410:02 - function and I'm going to run the code
410:04 - let's see what's the answer so you can
410:07 - see this read replies you in the form of
410:10 - string so in order to convert the string
410:13 - into some possible format you use a
410:16 - function called Json dot loads so I am
410:19 - going to save the string into uh let us
410:22 - say a variable Json underscore Str this
410:26 - is the variable name and we will assign
410:28 - whatever we read from the file into this
410:31 - variable and now what we can do here is
410:34 - we can convert the string into our Json
410:37 - value using a method called json.loads
410:41 - so let me create a variable once again
410:43 - so Json value is the variable name and
410:47 - then I can use this Json keyword which
410:50 - we have imported dot loads function so
410:54 - just use the loads function and then
410:56 - pass the string as an argument of this
410:59 - loads function so this loads function
411:02 - takes a string and converts it into a
411:05 - Json value so now let's print the type
411:09 - of the Json values I am going to just
411:12 - write print type and then we use the
411:15 - Json value argument here and then once
411:18 - again run the code and you will see now
411:21 - the Json value data type is the
411:23 - dictionary so because now it is a
411:25 - dictionary we can parse some values from
411:28 - it so let us say from this Json value
411:31 - dictionary we want to get the name so
411:35 - name here we have stored is Max so we
411:38 - can just give the key here name and then
411:42 - run the code it's going to give us the
411:45 - value associated with the name which is
411:48 - Max so this Json dot loads function we
411:52 - use to convert from a Json or a string
411:55 - value into a python dictionary so this
411:58 - is how you can handle Json values in
412:01 - Python in this video I am going to show
412:03 - you what are iterators in Python and how
412:06 - to use iterators in Python and at the
412:10 - end I'm also going to show you how you
412:12 - can create your custom iterator class in
412:15 - Python so let us get started and let's
412:19 - see first of all what is an iterator but
412:23 - before that we need to understand what
412:25 - is iteration so what is iteration and
412:29 - act of going over a collection is called
412:32 - iteration now what kind of collections
412:36 - we are talking about we have already
412:37 - seen some kind of collections like lists
412:40 - tuples dictionaries sets and other kind
412:44 - of Collections and till now what we have
412:48 - seen is we can use a for Loop to iterate
412:51 - over a collection so till now what we
412:54 - have learned is for example I am going
412:55 - to declare a collection which is list in
412:59 - this case and I am going to just add
413:02 - some values inside the list and once I
413:05 - declare the list I can iterate over this
413:08 - list using a for Loop so let's say for I
413:12 - in the collection name and then you can
413:15 - just write
413:17 - print here to print each and every value
413:19 - of this collection a so this for Loop
413:22 - iterate over each and every element in
413:26 - the collection and then print the value
413:29 - using this print statement now let's
413:31 - talk about the iterators so what is an
413:35 - iterator iterator is an object which can
413:39 - be used to iterate over a collection now
413:43 - this iterator object has two special
413:46 - methods first is underscore underscore
413:50 - iter underscore underscore and second is
413:54 - underscore underscore next underscore
413:56 - underscore so iterators have these two
413:59 - special methods one is eater and this
414:03 - iter method is going to get you the
414:06 - iterator and in the next method is going
414:09 - to give you the next value using this
414:13 - iterator now collections like lists or
414:16 - dictionary or or Tuple are all iterative
414:20 - collections that means we can iterate
414:23 - over them and all these collection
414:25 - objects have a special method called
414:29 - iter which is used to get the iterator
414:32 - from these collections so let me show
414:36 - you first of all these two methods
414:38 - inside a collection so when you use dir
414:42 - inbuilt function and give any collection
414:45 - as an argument here and when I press
414:48 - enter you will see a list of functions
414:50 - here and when I scroll little bit right
414:54 - here you will see a special function
414:56 - which is i t e r so all these
414:59 - collections like lists or dictionary or
415:02 - Tuple have this iter method and we can
415:06 - call this ITR method to get the object
415:10 - of the iterator and we can call this
415:13 - underscore underscore iter method using
415:16 - a special method called iter without
415:19 - underscore in front and back of it so
415:23 - let me just show you what I am saying so
415:26 - I am going to declare a variable i t
415:29 - which stands for iterator and then I'm
415:31 - going to use a special method called
415:34 - iter without underscore and this iter
415:38 - method is used to get the iterator so I
415:43 - can just pass my collection here as an
415:46 - argument and this iterator method is
415:49 - going to give me the iterator object of
415:52 - this collection which I was talking
415:54 - about which is underscore underscore
415:57 - iter underscore underscore so let me
416:00 - just press enter and now we have the
416:03 - iterator object and this iterator object
416:05 - we can use to call all the values in the
416:09 - collection so let's once again print the
416:12 - values of our a list and this has these
416:16 - six values and now I can use a special
416:19 - method called Next here to get the first
416:23 - value of this collection so I am going
416:25 - to just pass the i t which is the
416:29 - iterator which we have got from this
416:31 - iter method and then press enter and you
416:35 - will see it will print the first value
416:37 - of your list now once again when you
416:41 - call this next using this i t variable
416:45 - is going to give you the next value of
416:49 - the list and when you call it again and
416:52 - again it is going to iterate over your
416:54 - list and give you the values of the list
416:58 - one by one so let's get all the values
417:02 - so this is the second last value which
417:03 - is 9 and then at last it's going to
417:06 - print the last value which is 7. now at
417:09 - this point iterator has iterated over
417:12 - all these six values after that when you
417:15 - call this next method 1 once again over
417:18 - this i t variable then it is going to
417:20 - give you this exception which says stop
417:24 - iteration so when your iterator is
417:27 - exhausted then it's going to give you
417:30 - the exception which is stop iteration
417:33 - now as I said the collections like list
417:35 - dictionary or Tuple have this iterative
417:39 - object that means we can use the for
417:42 - Loop to iterate over these collections
417:46 - so for Loop uses the same iterator
417:49 - mechanism to iterate over all these
417:52 - elements of the collection now many a
417:55 - times in your programming Development
417:57 - Career you will have to write a class in
418:01 - order to iterate over some kind of
418:04 - collection so let me show you how you
418:06 - can create your custom iterator class so
418:09 - let me minimize this python console in
418:13 - the pycharm IDE and I will just comment
418:16 - these two two methods so as I said an
418:20 - iterator always have these two special
418:22 - methods one is underscore underscore ETA
418:26 - underscore underscore and the second is
418:29 - underscore underscore next underscore
418:32 - underscore so in order to create your
418:35 - own iterator class you need to implement
418:37 - both these methods so let's create and
418:40 - iterate a class and I'm going to just
418:43 - name my class as list iterator class and
418:47 - in this list iterate a class first of
418:49 - all I'm going to Define uh init method
418:53 - and this init method is going to take
418:55 - any type of list or any type of
418:58 - collection which is iterateable and then
419:00 - inside this init method I'm going to
419:02 - just call a self to create a member
419:07 - variable here and I'm going to name my
419:09 - member variable as dot underscore
419:12 - underscore list and I'm going to just
419:15 - pass the value of a let us name this a
419:18 - as list also so we will be clear so list
419:21 - is equal to list the second member
419:24 - variable which I want to create here is
419:26 - the index variable so the second
419:29 - variable is the index variable which is
419:32 - the index of the list or the collection
419:35 - and let us give the initial value of
419:37 - this index now as I said in order to
419:39 - create an iterator class you need to
419:41 - implement these two methods which are
419:44 - underscore underscore i t e r method
419:48 - first of all and in this method we are
419:50 - just going to return the value of cell
419:53 - so this underscore underscore iter
419:55 - method is going to give you the iterator
419:58 - and let us also implement the method
420:02 - which is underscore underscore next now
420:06 - in this next method first of all when
420:09 - this next method is called what we want
420:11 - to do is we want to increase the value
420:13 - of index so let's call our index member
420:16 - variable and let us increase the value
420:19 - of index by 1 and the next thing which
420:22 - we want to do here is we want to send
420:24 - the value at this index so we can just
420:28 - return so let me call return first of
420:30 - all and then self dot your list name
420:35 - whatever is your list and then inside
420:37 - these square brackets we call the index
420:40 - which we have incremented by one so self
420:43 - dot underscore underscore index so this
420:46 - statement is going to give you the
420:49 - current value at this Index right now
420:52 - and that's basically it so I am going to
420:55 - just say my list is equal to list
420:58 - iterator and this list iterator takes an
421:01 - argument which is a collection right so
421:04 - let me create a list collection and I'm
421:07 - going to name my list as a and here I am
421:11 - going to provide some values inside the
421:14 - list so let us say we have these six
421:17 - values inside the list and now we can
421:20 - just pass this list as an argument of
421:24 - our list iterator so once we have this
421:27 - list iterator object we can call
421:30 - iter method in order to get the iterator
421:35 - object which is this one so let me
421:37 - create one more variable which is i t
421:40 - and then I'm going to call this iter
421:43 - method and I'm going to pass my my list
421:46 - object as an argument of this iter
421:48 - method so now I have the iterator object
421:51 - of this list using this list iterator
421:54 - class and now I can use the print
421:58 - methods let me call a print method and
422:01 - then I can call the next method to
422:04 - iterate over the list using the i t
422:07 - variable so let's run this code once
422:10 - again and you will see it is going to
422:12 - print the first value of the list which
422:16 - is 1. let's print it two more times and
422:20 - let us run the code once again and you
422:22 - can see it is going to give you the next
422:23 - two values of the list so now we know
422:26 - that this next is going to call every
422:28 - time the next value from this list so
422:32 - let's print all the values of the list
422:34 - using this next method and you can see
422:38 - it prints all the values of this list
422:40 - now when I want to go beyond this after
422:44 - the list iterator is exhausted and let
422:48 - us run the code you will see it's going
422:50 - to give me this error which says list
422:52 - index out of range but this is not the
422:56 - problem of the iterator is the problem
422:59 - of the list now what I have shown you
423:01 - when I have shown you the example of
423:04 - this list iterator in the python console
423:08 - whenever your iterator is exhausted it
423:12 - throws the stop iteration error or
423:14 - exception so let's raise the same kind
423:16 - kind of stop iteration exception using
423:19 - our class also so I will go to the next
423:23 - method of my class and here I can give a
423:27 - condition and this condition checks
423:30 - whether the value of index so self dot
423:33 - underscore underscore index is greater
423:36 - than or equal to the length of your list
423:40 - so length and the list name is self dot
423:45 - underscore underscore list and when this
423:47 - condition is true we are going to raise
423:51 - an exception so let's use the raise
423:53 - keyword and the exception which we want
423:56 - to raise here is the top iteration
423:58 - exception so let's throw this exception
424:01 - or raise this exception and what this
424:03 - condition is basically going to do is
424:05 - until the last index which is for
424:08 - example in this list the last index is
424:11 - 5. so until the last index everything
424:14 - will be okay but as soon as the this
424:17 - index becomes 6 which is the length of
424:21 - your list also so the length of the list
424:24 - which have six element is 6 but index
424:27 - will go up to 5 because the index starts
424:30 - from zero so as soon as this index
424:33 - becomes is equal to the length which
424:36 - means the iterator has been exhausted we
424:39 - can also write double equals to here as
424:42 - soon as the value of index becomes the
424:44 - length of the list we can throw this
424:47 - exception so let's run this code once
424:50 - again and you can see we have used this
424:53 - next method seven times so at the last
424:55 - print statement is going to give us the
424:58 - error so first of all let me remove the
425:00 - last statement and let us run the code
425:03 - as going to run fine so you can see
425:05 - everything is fine but as soon as I call
425:08 - this last next method and I know that my
425:12 - iterator is exhausted and when I run the
425:15 - code once again it's going to raise an
425:17 - exception which is top iteration now one
425:21 - more thing which I said which you can
425:22 - use with your iterators is the for Loop
425:27 - so let's try to use this for Loop and
425:30 - I'm going to just write for I in your
425:33 - iterator which is i t which we have got
425:36 - using this iter method and let me
425:38 - comment this code also and now I can
425:42 - print each and every element inside the
425:45 - list a so I'm going to just write print
425:48 - I here and let me remove this code from
425:51 - here so you can see the list also and
425:54 - this for Loop also and I am going to run
425:56 - this code once again and you can see
425:58 - this for Loop has it rated over our list
426:02 - which we have provided as an argument of
426:05 - this list iterator class and you can see
426:09 - all the values inside the list have been
426:12 - printed using this for Loop so in this
426:15 - way you can create your own iterate a
426:18 - class in python in the last video we
426:21 - have seen how to use iterators in Python
426:24 - now in this video we are going to learn
426:26 - how to use generators in Python so first
426:30 - of all what are generators so generators
426:33 - are the simple way of creating iterators
426:37 - now simply put a generator is a function
426:40 - that Returns the iterator object on
426:44 - which we can iterate upon so let me give
426:48 - you an example of generators and then we
426:51 - will see why it's a simple way of
426:54 - creating iterators so what I'm going to
426:56 - do is I'm going to create a simple
426:57 - function my func and inside this
427:01 - function I will use a special keyword
427:03 - called yield instead of return now after
427:06 - this keyword yield let's say I want to
427:09 - return some values so I'm going to write
427:12 - first of all a and then once again I'm
427:15 - going to use Yale and I'm going to use B
427:18 - here and once again I'm going to use
427:21 - this keyword yield and again I'm going
427:24 - to return C here so if your function
427:27 - contains at least one yield keyword then
427:31 - this function is called a generator
427:34 - function so how this yield keyword is
427:37 - different from the return
427:40 - so in the case of return the statement
427:43 - is immediately terminated entirely so
427:47 - after return you cannot do anything
427:49 - inside a function because after using
427:52 - this return keyword the statement is
427:54 - terminated entirely but the yield
427:57 - statement pauses the function and saving
428:00 - the state of that function so let me
428:03 - demonstrate what I said so I am going to
428:06 - create a variable X and I'm going to
428:10 - just assign the value of my function to
428:13 - this variable X now on this x I can use
428:17 - a next function so as I said whenever
428:21 - you use at least one yield keyword
428:23 - inside your function it becomes a
428:27 - generator and I also said when you use a
428:30 - generator it Returns the iterator object
428:34 - so this my function generator function
428:36 - Returns the iterator object which we are
428:39 - saving in inside the X variable and you
428:43 - can provide this x variable which is a
428:46 - iterator object as an argument of this
428:48 - next function which is going to give you
428:51 - the first value which you use with the
428:55 - yield keyword so let me just run the
428:57 - code so right click and then run the
428:59 - file and you will see it's going to give
429:01 - you the first value which you use with
429:03 - the yield keyword now after that let's
429:07 - say we use this next function two more
429:11 - times then it's going to give you the
429:14 - next value and once again when you use
429:16 - the next function it's going to give you
429:18 - the next value so it's like using the
429:21 - iterator on which you can use the next
429:24 - function but it's much simpler to use
429:28 - because you just need to use this yield
429:31 - keyword instead of implementing the iter
429:35 - method and the next method inside your
429:38 - class which we have done in the last
429:41 - video now after using next three times
429:44 - because we only have used this yield
429:47 - three time let's use the next function
429:51 - fourth time because now in the fourth
429:54 - time your iterator is already exhausted
429:57 - and let's see what happens so you will
429:59 - see it's going to give you this
430:02 - exception which says stop iteration
430:04 - which we have already seen in the case
430:07 - of iterators also which I have shown you
430:10 - in the last video so generators are
430:12 - similar to iterators but they are more
430:17 - simple to use and create so you don't
430:20 - need to throw any exception the
430:22 - generator will take care of throwing
430:25 - this Exception by itself so what is the
430:27 - difference between iterators and
430:29 - generators so as we have seen in the
430:32 - last video that in order to create an
430:35 - iterator class we need to implement two
430:38 - methods which are iter method and the
430:43 - next method so if you haven't seen the
430:45 - last video I will recommend you to watch
430:47 - that last video in which I have shown
430:49 - you how to create the iterator class so
430:52 - whenever you need to implement the
430:54 - iterators they are more lengthy and
430:57 - sometimes counter intuitive now in the
431:00 - case of generators the methods like iter
431:04 - and next are automatically implemented
431:07 - so this generator which we have
431:10 - implemented here will return the
431:12 - iterator object on which we can iterate
431:15 - upon so now what's the role of this
431:18 - yield keyword so whatever value you will
431:21 - write after the yield keyword it is
431:24 - going to return that value and
431:25 - immediately after that it's going to
431:27 - save the status of your function so that
431:31 - means for example whenever we call this
431:35 - next function for the first time with
431:38 - this x value then it is going to return
431:41 - the first value which you use with the
431:44 - yield keyword as soon as you do that
431:47 - your function is going to save the
431:50 - status of this iterator that means the
431:53 - iterator is at a and then whenever you
431:57 - call the next method once again your
432:00 - generator is going to remember that last
432:02 - time it has returned the first value and
432:05 - now it's the time to return the next
432:07 - value and this will go on and on until
432:11 - you use this yield keyword so let me
432:15 - give you one more example let's say I
432:16 - will declare a variable n and the
432:19 - initial value of n is 1 and then I'm
432:22 - going to just yield this value and for
432:25 - the first time and also above the yield
432:29 - keyword I'm going to print the value of
432:32 - n so I'm going to just give the string
432:35 - and after this string I'm going to just
432:37 - print the value of n same statement I am
432:41 - going to use before the other Yale
432:43 - keywords also and before using this n
432:46 - keyword with other yields statements I'm
432:50 - going to increase the value of n by 1
432:53 - every time so before the next Yale I am
432:56 - going to increase the value of 1 once
432:58 - again and before the last yield also I'm
433:02 - going to increase the value of n once
433:05 - again so we have used yield three times
433:08 - and every time we are increasing the
433:11 - value of N and let us use the same
433:15 - initialization of my func and also I
433:18 - will use this print statement three
433:20 - times and when I will do this I am going
433:23 - to run the program and you will see what
433:25 - happens so let me use this next function
433:27 - only once and when I run the code it
433:30 - prints the print statement using this
433:33 - print statement and then gives you the
433:36 - value of n which is 1 at the first yield
433:40 - then we have increased the value of n by
433:42 - 1 so now the value becomes 2 so when we
433:46 - call the next method once again is going
433:51 - to give you the value of N and also it's
433:54 - going to print the next print statement
433:56 - so let me just move this below this
434:00 - expression so we will see the increment
434:03 - here also and similar we will do with
434:07 - the third yield statement so when I use
434:10 - this next third time is going to print
434:13 - the third value so basically your yield
434:16 - keyword is saving the status after it
434:20 - Returns the value associated with it and
434:23 - it resumes the status whenever you use
434:26 - the next next function now let me show
434:29 - you one more thing and that is how you
434:32 - can use this yield keyword with the for
434:35 - Loop so let's say I will create a for
434:38 - Loop and I will say a for I in some
434:43 - range and let us say this range is up to
434:46 - 5 and after this I want to print the
434:49 - value of I for example so here I will
434:53 - print the value of I and then what I am
434:56 - going to do is inside this for loop I am
434:59 - going to return the value of I so now we
435:03 - don't need this n variable so every time
435:06 - from the for loop I am just returning
435:09 - the value of I in each iteration and
435:14 - let's see what happens so let me use
435:17 - this next function only once and you
435:20 - will see it's going to first print the
435:22 - value of I which is 5 here which is
435:25 - little bit strange I thought I have
435:28 - written here range here but it was
435:31 - something else so let's rewrite range
435:34 - function here inside this we have
435:36 - provided 5 as the range and once again
435:39 - when we run the code it's going to print
435:42 - the value of I which is 0. now every
435:45 - time you use this next function it's
435:48 - going to give you the next value of I
435:51 - which is 0 1 2 until the 5 so let me
435:56 - just run this code once again and you
435:58 - will see it's going to give you the
436:00 - value until this for Loop is valid and
436:03 - as soon as you go outside the range it's
436:06 - going to give you this exception which
436:09 - is stop iteration exception so
436:12 - everything in generator is working
436:13 - similar to the iterators which we have
436:16 - seen in the last video so how about we
436:20 - recreate the class which we have written
436:23 - in the last video when I have shown you
436:25 - the iterator's example which is list
436:29 - iterator class so I'm going to write a
436:33 - similar code to iterate over this list
436:36 - of numbers so what I want to do is I
436:39 - want to realize this code using the
436:42 - generators so let me just split this
436:44 - editor so you will see iterators and
436:47 - generators side by side so I'm going to
436:50 - close this from here so on the left hand
436:52 - side we have a generators file and on
436:56 - the right hand side we have the
436:57 - iterators file so let me just remove
437:00 - this code from here and what I'm going
437:03 - to do is I'm going to create a new
437:04 - function and I'm going to name it as
437:07 - list iterate a function with the smaller
437:12 - L and smaller I so this function takes a
437:16 - list as we have seen in the case of list
437:19 - iterators which was taking a list as the
437:24 - argument so here also we are going to
437:26 - give this argument which is list and
437:30 - inside this function what I'm going to
437:31 - do is I'm going to use a simple for Loop
437:34 - for I in and I will iterate over the
437:38 - list which we have provided as an
437:41 - argument so we will iterate over this
437:43 - list using the for Loop and then we are
437:46 - going to yield the value of I every time
437:51 - when we iterate over this list using
437:54 - this for Loop and that's it so it's that
437:57 - simple to recreate the whole class of
438:02 - iterators using this generator so the
438:05 - biggest Advantage here when we create
438:07 - the generator is we do not need to
438:10 - implement this iter method or this next
438:15 - method and we also don't need to raise
438:19 - this exception from our function or a
438:22 - class whenever we create the generator
438:25 - the generator function will take care of
438:28 - the stop Exception by itself so the only
438:32 - thing which remains now is we just need
438:35 - to create a list so we will use the same
438:38 - list as we have used with the list
438:42 - iterator class and instead of this class
438:45 - I will just replace it with this list
438:48 - iterator function and you don't need to
438:51 - do anything so you don't need to use
438:53 - this iter method to get the iterator
438:56 - object this function is going to return
438:58 - the iterator object by itself so now we
439:02 - just need to call the print function and
439:05 - the next function and inside the next
439:07 - function we just need to pass this
439:10 - variable which we have got from this
439:13 - generator function which we have created
439:16 - and when we run this code so I'm going
439:18 - to right click and run this code once
439:20 - again it's going to give you the first
439:23 - value of the list which is 1 and when
439:26 - you do this several time let us say we
439:30 - call this function six times which is
439:33 - the length of your list also is going to
439:36 - iterate over your list and print each
439:38 - and every value
439:40 - which we have inside the list now if you
439:43 - use this value seventh time that means
439:46 - our iterator is exhausted is going to
439:48 - automatically throw the stop iteration
439:51 - error so we don't need to create or
439:53 - raise this top error by ourselves
439:56 - generate a function will take care of it
439:58 - by itself now as we have seen in the
440:01 - last video also we can use a for loop
440:04 - with the iterators so you can also write
440:08 - for X in your my list variable and then
440:14 - you can print the value of x every time
440:17 - and this is going to give you the same
440:20 - result and you can see it gives us the
440:23 - same result which is all the elements of
440:26 - your list which you have provided here
440:28 - so now this whole list class is
440:33 - performing the same operation as this
440:36 - small piece of code which we call
440:39 - General generators so let's discuss the
440:42 - advantages of using generators first we
440:45 - have already seen that generators are
440:47 - easy to implement second is generators
440:50 - are more efficient if you want to
440:53 - perform the same logic with the normal
440:55 - function so let's say you want to
440:58 - perform the same functionality which is
441:01 - to iterate over the list of these
441:03 - numbers and let's say this list is big
441:07 - enough let us say this list length is 1
441:11 - million then if you are using the normal
441:13 - function your normal function has to
441:15 - store all the 1 million values inside
441:19 - that list variable and that's not very
441:22 - memory efficient but whenever you use
441:25 - this kind of generators they are more
441:29 - memory efficient because they are not
441:31 - going to store 1 million values in the
441:34 - variable your generator function is
441:36 - going to work on the values one by one
441:39 - so let's say you want to stream some
441:42 - data let's say you want to stream a
441:43 - video and you don't know the length of
441:46 - the video then in those cases the
441:50 - generators are much efficient because
441:52 - they will work upon your stream in steps
441:57 - it's not going to wait for your stream
441:58 - to come entirely and then work upon it
442:01 - so generators are good to work with
442:04 - streams also so these are the few
442:06 - advantages of using generators in Python
442:10 - so that's how you use and create
442:12 - generators in Python in this video I'm
442:15 - going to show you how you can pass the
442:17 - command line arguments to your python
442:19 - script so to start with I have a script
442:23 - called my parser.py and in order to pass
442:27 - the command line arguments to this dot
442:30 - py file first of all we need to import a
442:34 - built-in module which is called ARG
442:37 - parse module now using this ARG bars
442:40 - module we can parse the parameters which
442:44 - is passed using the command line to this
442:48 - script so let's see how we can parse
442:52 - those parameters so first of all I'm
442:55 - going to declare a variable called
442:57 - parser and then I am going to use this
443:01 - ARG parse keyword which we have imported
443:03 - and there is a special class here which
443:06 - is called argument parser which we are
443:09 - going to use now this argument parcel
443:12 - class takes an optional parameter which
443:15 - is the description which we will see
443:18 - little bit later so the first step is to
443:20 - initialize your parser the second step
443:24 - is to add the parameters which you want
443:28 - to parse so this we will see in a bit
443:31 - but let's see the next step which is
443:34 - actually passing the arguments which is
443:37 - passed using the command online so let
443:40 - me declare one more variable which will
443:43 - be our arguments which we want to parse
443:46 - and then we will use this parser
443:48 - variable which we have created and call
443:50 - the method called parse R so now once
443:54 - you have used this method pass args with
443:58 - this parser variable then you will have
444:01 - all your arguments into this odds
444:04 - variable so let's run this script and
444:07 - let's see what happens when we run this
444:09 - script so in order to open the terminal
444:12 - in pycharm you can just click on this
444:15 - option which says terminal and this is
444:17 - going to open the terminal in the
444:19 - pycharm IDE now it depends in which
444:22 - project you are working in so if you see
444:25 - some other location which is opened
444:27 - using this terminal you just need to
444:30 - provide the path where your project is
444:32 - so I am going to right click on my file
444:35 - and then I'm going to copy the path of
444:38 - this file so right click and copy path
444:40 - and I will just do CD and I will paste
444:44 - this path which I have copied and I will
444:46 - remove the name of the file because I
444:48 - just want to CD to the directory in
444:51 - which I am working in so now I am in the
444:54 - directory in which this my parser.py
444:58 - file is present now in order to run this
445:00 - python script I can use this python
445:03 - keyword and then the name of my file
445:06 - which is my parser dot py file now
445:09 - whenever you import the ARG pass module
445:12 - and you initialize this module there is
445:15 - a special help parameter which is
445:17 - available so you can write minus H here
445:21 - and then press enter and you will see
445:23 - that this help parameter is
445:26 - automatically present whenever you
445:29 - import this Arc pass module and
445:32 - initialize it so this is one way of
445:34 - running your script you can also run
445:36 - your script on your windows or Linux
445:39 - terminal the process is same so you need
445:42 - to CD to the directory in which you are
445:44 - working in so I'm going to once again
445:46 - copy the path and paste it here and once
445:51 - I'm in this directory I will just write
445:53 - Python and the name of the script which
445:56 - is my parser and then hyphen H which is
446:00 - for help and it's going to give me the
446:03 - same kind of result so you can run your
446:05 - python script either on the Windows
446:08 - command prompt or in the pycharm the
446:11 - choice is totally yours so I'm going to
446:13 - use this pycharm terminal so let me
446:16 - minimize this terminal for now now as I
446:18 - said you can pass some argument here in
446:22 - the argument parser class so the
446:25 - argument which you can provide here is
446:27 - the description which is the description
446:29 - you want to give whenever somebody runs
446:32 - this script so this is going to be the
446:34 - description whenever you run your file
446:37 - on the terminal so I'm going to once
446:39 - again run this python file and you can
446:43 - see the description is printed here now
446:45 - now how to pass the command line
446:47 - arguments so you can pass two kinds of
446:51 - arguments as the command line arguments
446:53 - one are called positional arguments and
446:57 - other are called optional arguments so
447:00 - first of all we will see how to pass the
447:02 - positional arguments so in order to pass
447:05 - the positional argument you use your
447:07 - parser variable and then call a method
447:11 - called add argument here and first of
447:14 - all inside the add argument you gave the
447:17 - name of your argument for example I want
447:19 - the user to provide two numbers and I
447:22 - want to perform some mathematical
447:24 - operations on these two numbers so I can
447:26 - store these two numbers into some
447:29 - variables and these variables I can
447:32 - Define here so the first variable name I
447:34 - want to provide here is num1 and then as
447:38 - the second argument you provide the help
447:40 - parameter so in the help what you do is
447:44 - you provide some help about the argument
447:47 - which you want to receive from the user
447:51 - in the same way I can provide the number
447:53 - two argument and I can just change the
447:56 - name of the argument 2 and the help
447:59 - description of argument 2. now the third
448:02 - parameter or argument which I want to
448:04 - provide using command line is the
448:07 - operation so let's say we want that user
448:10 - should provide some kind of mathematical
448:13 - operations to work with so in the help I
448:16 - can just write provide operator so these
448:20 - are the three argument which I want the
448:22 - user to provide now once these three
448:24 - arguments are provided by the users
448:26 - these three arguments will be parsed
448:29 - using this function and then all these
448:32 - three argument list will be assigned to
448:35 - this args variable so we can just print
448:37 - the value of this ARG variable and let's
448:41 - see what is the content inside the args
448:44 - so I'm going to open the terminal once
448:46 - again so after the python keyword and
448:48 - the name of your script you provide the
448:51 - first number which is let's say 84 the
448:55 - second number let's say it's uh 41 and
448:59 - the operator so let's say I want to
449:01 - provide the operator plus to add these
449:04 - two numbers and then I'm going to press
449:05 - enter and you will see this print
449:09 - statement is going to print the value of
449:12 - number one which is 84 the value of
449:16 - number 2 which is 41 and the value of
449:20 - operation which is plus here you will
449:23 - also observe that all these three
449:26 - numbers are present in the form of
449:29 - string so in order to work on these
449:31 - numbers we need to convert these numbers
449:34 - first into a float value or the integer
449:38 - value and then only we will be able to
449:40 - work on these numbers so how we can
449:43 - provide the type of these two numbers so
449:47 - that our script understands that these
449:51 - are the numbers and not the strings so
449:53 - the way in which you provide the type of
449:55 - the argument is using the type keyword
449:59 - here and then you provide whatever type
450:02 - you want for your argument or the
450:05 - parameter so here I have written type is
450:08 - equal to float and in the second
450:10 - argument also I have written type is
450:12 - equal to float and by default the type
450:15 - is string so if you don't provide any
450:18 - type it's a string so now we have
450:20 - provided the type to our first two
450:22 - numbers and let's run the script once
450:24 - again so now you will see that these
450:27 - values are no longer string values but
450:31 - now they are some float values also
450:35 - whenever you run the script with minus H
450:39 - keyword word which is the help keyword
450:41 - it is going to show that these are the
450:44 - positional arguments which is required
450:47 - by the script which is number one number
450:49 - two and operation and also we can use
450:53 - minus H as the help and also it's going
450:56 - to give us the description of this
450:58 - script which we have provided here so
451:01 - now we can perform some mathematical
451:03 - operations on the arguments so let's
451:06 - perform some mathematical operations on
451:08 - the arguments so we can extract these
451:11 - argument using the args keyword and then
451:14 - calling the name of the variable which
451:16 - we have provided so args dot number one
451:19 - is going to give you the value of number
451:22 - one so what I want to do here is I want
451:24 - to know the operation first of all so
451:27 - ask dot operation and if this operation
451:30 - is equal to plus then I will just add
451:34 - these two numbers so I'm going to just
451:36 - say args dot num 1 plus args dot num2
451:42 - now after adding these two numbers I
451:44 - need to save these numbers into a
451:46 - variable so let us create a variable
451:48 - called result here and I will initialize
451:51 - this result by none so initial value of
451:54 - result is none and then we will assign
451:57 - the addition of the two numbers to the
451:59 - result parameter and then at the end we
452:02 - will just print the value of the result
452:05 - and the same I will do for the other
452:07 - operations also so let's define some
452:10 - more operations second operation I want
452:12 - to provide here is the subtraction third
452:15 - operation I want to provide here is the
452:17 - multiplication and let us say fourth
452:19 - argument I want to provide here is the
452:22 - power of operation so here I can use a
452:26 - inbuilt function which is pow and then I
452:30 - will just pass the first number as the
452:32 - first parameter so args dot num 1 and
452:36 - the second number as the second
452:38 - parameter so now let's run the script
452:40 - once again and let's see what happens
452:42 - when we run this script once again so I
452:45 - am going to provide the same parameters
452:47 - 84 41 and operation plus here and then
452:51 - press enter and you will see the result
452:55 - here is the addition of these two
452:57 - numbers because our plus condition is
453:00 - met for the operation and then it is
453:03 - going to just add these two numbers and
453:05 - print the result we can make this result
453:08 - little bit more sensible by just saying
453:12 - this is our result so I am going to just
453:14 - say result colon and then provide the
453:17 - comma here and once again let's run the
453:20 - same script with the minus operation
453:23 - this time so I am going to provide the
453:25 - minus operation now and then press enter
453:27 - and it's going to still give me the
453:29 - addition this is strange because I think
453:31 - I have done some mistake here which is I
453:35 - haven't provided or changed these
453:38 - operators from from here so in the case
453:41 - of minus I need to provide the hyphen
453:44 - here and in the case of multiplication I
453:45 - need to provide the asterisks here so
453:48 - let's run the code or script once again
453:51 - with minus and now you will see as a
453:54 - result you will see the subtraction of
453:57 - these two numbers let's run the script
454:00 - with pow and then press enter and it's
454:03 - going to give me the power of operation
454:05 - of these two numbers so this is how you
454:08 - can provide the positional parameters
454:10 - now as the name suggests these are the
454:13 - positional parameters that means every
454:16 - parameter have its own position and this
454:20 - position is defined by the Declaration
454:23 - here so the first position is for the
454:26 - number one second position is for number
454:28 - two and the third position is for this
454:31 - operation parameter so if you change the
454:34 - position for example I will provide the
454:38 - plus operator first and then these two
454:41 - numbers this will give me an error and
454:44 - it will say that I was expecting a
454:47 - number as the first argument but you
454:50 - have provided some string parameter here
454:52 - also if you don't provide any parameter
454:56 - so I'm going to just say first two
454:58 - numbers I will provide but operations I
455:01 - haven't defined then also it's going to
455:04 - give me an error and this will say that
455:07 - operation is not defined because we
455:09 - haven't defined any operation here so it
455:12 - is going to give us an error so there is
455:15 - one way of solving this error which is
455:17 - by providing the default value and in
455:20 - order to provide the default value you
455:22 - use the keyword default and then provide
455:24 - the value of it so let's say by default
455:27 - the operation is plus always and when I
455:31 - run this code once again it's going to
455:33 - still give me this error because these
455:36 - are the positional arguments we can not
455:39 - change the position of this argument and
455:42 - we cannot provide the optional values
455:45 - here and that's where the optional
455:48 - parameters comes in so using these
455:50 - optional parameters you can provide the
455:53 - optional values so let me show you how
455:55 - you can provide the optional parameters
455:58 - so the way you provide the optional
456:00 - parameters is by simply adding double
456:03 - hyphen symbol in front of your
456:07 - parameters so I have provided double
456:09 - hyphen symbol in front of each and every
456:12 - argument which is provided to the script
456:15 - and let us go to the terminal once again
456:17 - and this time we need to provide the
456:21 - name of the parameter which is hyphen
456:24 - hyphen num 1 space the value of it for
456:28 - example 80 and then we need to provide
456:30 - the second number which is hyphen hyphen
456:32 - num 2 and then after the space the value
456:36 - of number two and let's say I don't want
456:38 - to provide the operation now and when I
456:41 - press enter here it's still going to
456:43 - give me the result which is plus because
456:47 - now we have the default value of
456:49 - operation which is plus and if I don't
456:53 - provide the value using these command
456:56 - line arguments then the default value of
456:59 - this operation will be taken which is
457:02 - plus if we provide any argument here so
457:06 - hyphen hyphen let's say operation and we
457:09 - will provide the value of operation let
457:11 - us say minus here that is going to give
457:14 - us the subtraction of these two values
457:17 - so whatever argument you will provide
457:20 - here the default value is overwritten by
457:23 - that value so this is how you can use
457:25 - the optional parameters and in order to
457:28 - use the optional parameters you also
457:31 - need to give the name of your optional
457:33 - parameters now whenever you use the
457:36 - optional parameters it depends upon you
457:39 - at which position you want to use these
457:43 - optional parameters so I can use for
457:46 - example num1 at First Position operation
457:49 - at the second position let's say
457:51 - operation is multiply now and then I
457:55 - will provide the num2 at the third
457:58 - position it doesn't matter now because
458:01 - the position is irrelevant here because
458:05 - we are providing the name of the
458:08 - variable and then the value so value
458:11 - will be passed using the name variable
458:14 - and not by the position now there is one
458:16 - more notation which you can use with
458:19 - these optional parameters and this is
458:22 - the short form of whatever parameter
458:26 - name you want to give so let's say I
458:28 - want to give n as the number one and let
458:32 - us say I want to give I as number 2 and
458:35 - for operation I want to provide this
458:38 - letter O so this is the short form of
458:41 - these three values so n is for number
458:45 - one I is for number two and O is for
458:48 - Operation and also in front of each and
458:51 - every letter here we need to provide a
458:54 - single hyphen so either you can provide
458:56 - this kind of notation with uh
458:59 - explanatory keyword and double hyphen or
459:02 - a single letter and a single hyphen in
459:06 - front of it so now in order to use this
459:08 - kind of notation what I can do here is
459:11 - first of all let me call Python and the
459:13 - name of my script and let's say first of
459:16 - all we call the help and you will see
459:19 - this helps shows this letter also which
459:22 - is minus H or help and for our
459:26 - parameters we have minus n or the number
459:29 - one minus I or number two or minus o or
459:34 - operation so the way we provide these
459:37 - shorthand notation is we just need to
459:39 - write the name of the notation which is
459:41 - minus n for number one let's provide the
459:45 - value of number one and minus I for
459:48 - number two so you use this equal to
459:50 - symbol in between the value and your
459:54 - shorthand notation not the space so this
459:57 - time I am using the equals to symbol so
460:00 - I equals 70 and the value of minus o is
460:05 - equal to let us say plus this time and
460:08 - then press enter and it's going to give
460:10 - you the addition of these two numbers so
460:13 - for this shorthand notation you use the
460:15 - equal to symbol not the space in between
460:18 - the name and the value so this is how
460:21 - you can provide the command line
460:22 - arguments to your python script in this
460:26 - video I'm going to show you how to use
460:28 - Lambda functions in Python in addition I
460:31 - am going to show you how to use Lambda
460:34 - functions with functions like map reduce
460:37 - and filter the so let's get started
460:41 - so as we all know that python is a
460:44 - multi-paradigm language and it also
460:47 - supports functional programming and the
460:51 - Lambda functions falls into functional
460:54 - programming Paradigm so what are Lambda
460:57 - functions and how to use Lambda
461:00 - functions so Lambda functions in Python
461:03 - are also called Anonymous functions
461:06 - because they don't have any name
461:10 - sometimes they are also called one line
461:13 - functions because they can be written in
461:16 - a single line of code so let's see how
461:20 - we can define a Lambda function so as
461:22 - you can see here I have three normal
461:25 - function defined here one is the double
461:28 - functions which doubles whatever
461:31 - arguments you provide here second is a
461:34 - simple addition function and third
461:36 - function is the function which takes
461:38 - three arguments and provide the product
461:41 - of the three argument which are provided
461:44 - so let's see how we can convert these
461:47 - three functions into the Lambda
461:49 - functions so the first function which we
461:51 - have is the double function so I am
461:53 - going to once again write double as a
461:56 - variable and then I can use a special
461:59 - keyword called Lambda to create a Lambda
462:02 - function so as you can see here this
462:04 - double takes one argument which is X so
462:08 - to provide an argument in the Lambda
462:10 - function you just write the name of the
462:14 - argument and then after the colon you
462:18 - write the body of the function so in our
462:21 - case this double function have this body
462:25 - which is return X multiplied by 2. so in
462:30 - Lambda function if you want to return
462:32 - some value you don't need to use this
462:35 - return keyword you can directly write X
462:39 - multiplied by 2 here so this Lambda
462:43 - function is equivalent to this double
462:47 - function which is a normal function so
462:50 - this double function takes one argument
462:52 - which is X which we are providing here
462:54 - and it Returns the multiplication of X
462:58 - by 2 which we are writing after the
463:02 - colon now let's write the add function
463:05 - using Lambda function so I am going to
463:08 - once again declare a variable called add
463:12 - and once again use Lambda and this time
463:15 - this add takes two arguments so I can
463:19 - provide multiple arguments in Lambda
463:22 - functions by comma as you do with the
463:25 - normal function so I will provide two
463:27 - arguments and then after the colon you
463:30 - just write whatever you want to return
463:33 - so we want to return X Plus y so we can
463:36 - simply write X Plus y here and that's it
463:40 - so in a single line we can Define the
463:43 - Lambda function now the third function
463:46 - we want to provide here is the product
463:49 - function so I will declare a variable
463:51 - product and this time I just need to
463:53 - provide three arguments using the comma
463:56 - separator and after the colon I just
464:00 - provide the multiplication of these
464:03 - three values which is X multiplied by y
464:07 - multiplied by Z so all these three three
464:10 - normal functions is equivalent to these
464:14 - Lambda functions so I am going to just
464:16 - comment these three functions out by
464:19 - pressing Ctrl and forward slash and now
464:22 - let's see how to use these Lambda
464:24 - functions so you create a Lambda
464:26 - function and then assign the result into
464:30 - some variable and then you use these
464:33 - variable as you use the normal functions
464:36 - so I'm going to just use print to call
464:39 - the double variable and then using the
464:42 - parenthesis I just provide the argument
464:45 - which this Lambda function takes so this
464:48 - Lambda function takes one argument which
464:50 - is X so I can provide the value of x
464:53 - here so let us say I want to provide 10
464:56 - as the value of x same I will do with
465:00 - the add function and the product
465:02 - function so add a function takes two
465:05 - argument and the product function takes
465:09 - three arguments and so I can simply
465:11 - write these functions like this like a
465:14 - normal function and then I can just run
465:16 - my script and you will see it's going to
465:19 - give us the same result as the normal
465:23 - function gives us so the first is the
465:27 - double of 10 second is the addition of
465:29 - these two numbers and third is the
465:31 - product of these three numbers now you
465:34 - might ask a question that these
465:37 - functions which we have defined normally
465:39 - we can also Define these function in a
465:42 - single line because there is not much
465:45 - logic inside these functions so we can
465:48 - declare these functions like this and
465:51 - they are also the single line functions
465:54 - so why do we use Lambda functions so the
465:59 - Lambda functions are generally used with
466:02 - the functions which takes function as an
466:05 - argument or returns function as the
466:10 - result so in functional programming
466:12 - functions are the first class citizens
466:16 - that means we can pass the functions as
466:20 - the normal argument so as you can see
466:22 - here we have passed some static or
466:25 - constant value as an argument here but
466:28 - we can also pass the functions as in
466:32 - arguments and in addition you can also
466:35 - return a function from a function so
466:40 - instead of this multiplication you can
466:43 - create a function and return from a
466:45 - function and that's where these Lambda
466:49 - functions are useful so let me give you
466:52 - some examples of where you can use
466:55 - Lambda functions so as I said you can
466:58 - use Lambda functions with the functions
467:01 - like filter reduce and map so let me
467:05 - illustrate how these functions work so I
467:08 - am going to declare a list of some
467:11 - numbers so now I have created a list
467:14 - which have these six elements now let's
467:17 - see how to use a map function with a
467:19 - Lambda function so there is a inbuilt
467:22 - function called map in Python which
467:25 - takes two argument one is a function and
467:29 - second is an iterative variable and we
467:33 - all know that collections like lists or
467:37 - tuples or the dictionaries are all
467:41 - iterative collections so we can use map
467:44 - keyword and then here we can Define
467:47 - alarm the function so let us say I want
467:50 - to double each and every element of this
467:53 - list so I can define a function which
467:56 - takes one argument X and then we are
468:00 - going to return the double of this value
468:03 - so this is the function which we have
468:05 - passed to this map function because the
468:09 - first argument which map expects is the
468:13 - function the second is the iteratable
468:16 - collection so we are going to pass this
468:18 - list as the second value let me Define
468:21 - let's say my list here so it will be
468:26 - more clearer so I am going to just pass
468:28 - this my list as the second variable so
468:32 - what this map function is going to do is
468:34 - it's going to apply this Lambda function
468:37 - to each and every element of this list
468:41 - which is basically going to double the
468:45 - value of each and every element of the
468:47 - list now let's assign the result of this
468:50 - map function into a variable so I am
468:53 - going to assign the result into some
468:55 - variable and then I am going to print
468:58 - the result first of all so this variable
469:02 - contains the map function so let's see
469:06 - first of all what is the result and then
469:08 - I am going to show you how how to get
469:10 - the result which we are expecting so you
469:13 - can see here whenever you want to print
469:15 - the value of map it's going to just give
469:19 - you this kind of result so how we can
469:22 - get the list out of this map value in
469:28 - order to get the list out of this map
469:30 - value you need to cast this value into a
469:34 - list and how to convert this value into
469:37 - a list you use a list function and then
469:40 - pass the result of the map function as
469:44 - an argument of this list function let's
469:48 - run the program once again and you will
469:50 - see now that the result is a list and in
469:55 - the result every element of the list is
469:59 - doubled so basically what this map
470:01 - function has done is it has applied this
470:06 - function to each and every value of the
470:09 - list and this function just doubles each
470:13 - and every value of the list now you
470:16 - might say that this is a very simple
470:17 - function which we are applying to the
470:20 - list so let's make things little bit
470:23 - complex and let us say now I have two
470:27 - lists one is my list one and other is my
470:32 - list two and this other list contains
470:35 - some other set of elements so let me
470:39 - just change the values which this second
470:42 - list contains and let's say using this
470:45 - map function I want to add each and
470:48 - every element of these two list and
470:51 - create a third list with the addition of
470:55 - let us say 2 and 1 and 5 and 4 8 and 7
471:00 - 10 and 8 like this so how can I create a
471:04 - map function to achieve this so let us
471:08 - say this is a variable B and here inside
471:11 - the Lambda function we give the second
471:14 - argument which is y so it takes two
471:17 - argument and then it adds the value of X
471:22 - and Y so we can do like this and then as
471:25 - the second argument we are passing the
471:27 - first list and also as the third
471:30 - argument you can pass the second list
471:34 - here so now what this map function is
471:36 - going to do is it is going to take the
471:38 - first element of the first list and the
471:41 - first element of the second list and
471:44 - then it's going to apply this function
471:46 - to the first elements of both these
471:50 - lists which is to add these two numbers
471:53 - so let's see what is the result which we
471:56 - get using this map function so I am
471:59 - going to just convert the answer or the
472:02 - result into a list and then I'm going to
472:04 - just pass this B variable as an argument
472:07 - of this list and then we are just
472:09 - printing the results so let's run the
472:11 - code and let's see what happens so you
472:13 - can see we get the list which adds the
472:16 - value of these two lists and creates a
472:19 - new list so you can see 2 plus 1 is 3
472:22 - here 5 plus 4 is 9 then 8 plus 7 is 15
472:27 - and so on so this is how you can use
472:30 - Lambda functions with map function now
472:33 - let's see how to use a filter function
472:36 - so I'm going to use this special
472:37 - function which is called filter and this
472:41 - filter functions takes two argument but
472:44 - what is special about this filter
472:45 - function is it takes a function as the
472:49 - first argument which gives us a Boolean
472:52 - result so instead of adding two numbers
472:55 - and returning this filter function is
472:58 - expecting a function which gives us the
473:01 - Boolean result so let me minimize this
473:03 - so let's say we want to filter the even
473:06 - values from this list so how we can
473:09 - achieve leave this using the filter
473:11 - function so as I said this takes a
473:14 - function as the first argument so you
473:17 - can use Lambda and how to find out the
473:19 - even values you pass an argument and
473:22 - then you return x modulo 2 is equal to
473:26 - zero so this x module 2 is going to give
473:30 - us 0 whenever the number is even
473:33 - otherwise is going to give us 1. so this
473:36 - is the first argument and the second
473:38 - argument we can pass here is for example
473:41 - the first list here and now I am going
473:44 - to assign the result into a variable and
473:48 - let's print the value of C Now using the
473:52 - list function so list and as an argument
473:55 - I am going to pass C here let us run the
473:58 - code and let's see what's the result and
474:00 - you can see you just get the even values
474:04 - filtered out from this first list which
474:07 - is 2 8 and and 10. now let me give you
474:12 - one more example of filter so let's say
474:15 - you want to filter out from the second
474:18 - list which values are greater than 5 so
474:22 - all the values which are greater than 5
474:24 - we want to filter out so we will pass X
474:28 - as an argument and let us say this is
474:30 - the D variable so this Lambda function
474:33 - takes X as an argument it is going to
474:36 - return true so let me just write the
474:39 - syntax here so it is going to return
474:41 - true if the value of x is greater than 5
474:46 - else it is going to return the false so
474:49 - else we can just write false here so if
474:53 - you want to write if and else condition
474:55 - inside a Lambda function you write
474:58 - something like this so this is the
475:00 - syntax of if and else so if the value of
475:04 - x is greater than 5 it is going to
475:06 - return true otherwise it is going to
475:09 - return Falls so let's run this code and
475:12 - let's see what happens let me just
475:14 - replace the C by D and I am going to run
475:17 - this file and you will see the result
475:20 - here so in this list you will see 8 10
475:25 - and 9 are greater than 5 that's why we
475:29 - got this result if we write here greater
475:32 - than and equal to and once again run the
475:36 - code it's going to give us four values
475:38 - including 5 here so this is how you can
475:41 - use filter function with the Lambda
475:44 - functions now let's see how we can use
475:47 - one more function which is called the
475:51 - reduce function so in order to use the
475:53 - reduce function we need to import a
475:57 - special module which is Fung tool so let
476:00 - us import this module and this module is
476:03 - called func tools so we are going to
476:06 - write from Fung tool import reduce so
476:09 - what we are basically saying is we need
476:12 - a reduce function from this Fung tool
476:16 - module and now you can use a reduce
476:19 - function so I am going to declare a
476:22 - variable e and then I can use this
476:24 - reduce function which also takes two
476:27 - argument one is the function and other
476:30 - is the iterative collection so let's
476:33 - define a function first of all which is
476:36 - the Lambda function and this Lambda
476:38 - function is going to take let's say two
476:40 - values X and Y and what it is going to
476:43 - return is the sum of X Plus y here now
476:47 - as the second argument I am going to
476:49 - pass my list variable here so what
476:51 - reduce function does is it takes first
476:55 - to element of the list and then apply
476:58 - the function which you have written here
477:00 - which is going to add first to element
477:03 - and then it's going to store the result
477:06 - in X variable and take next element into
477:09 - the Y variable so 7 plus Y is going to
477:13 - give us whatever result and once again
477:16 - it is going to apply the result and then
477:18 - going to add the next number to the
477:22 - result so let's see what result we get
477:24 - using this reduce function so I'm going
477:27 - to once again use print and then we can
477:29 - directly print the value of the reduce
477:33 - function which is e so let's run this
477:35 - code once again and you will see this
477:39 - result which is 37 Now 37 is the sum of
477:43 - all these elements inside this my list
477:47 - so let me explain you once again what
477:49 - this reduce function is doing so first
477:52 - of all because we are passing two
477:55 - arguments here in the Lambda function it
477:58 - is going to take first two element of
478:00 - your collection which is 2 and 5 and
478:03 - then apply this code or statement to
478:06 - these two elements which is 2 plus plus
478:10 - 5 and we will get 7 as the result now
478:13 - once again it is going to take 7 as the
478:16 - first argument which is the sum of these
478:17 - two numbers and 8 as the second argument
478:21 - which is y here and then apply this
478:25 - logic once again to 7 and 8 which gives
478:29 - us 15 and once again this 15 will be
478:32 - passed as X and 10 will be passed as Y
478:37 - and once again the addition of 15 and 10
478:40 - will happen which will make it 25 and so
478:44 - on so this is how you can use Lambda
478:46 - functions in Python and this is how you
478:50 - can use Lambda functions with map filter
478:53 - and reduce functions in this video I am
478:57 - going to show you how to use nested
478:58 - functions and closures in Python so
479:02 - let's get started so we will start with
479:05 - the nested functions so in Python we can
479:09 - Define and the nested function that
479:12 - means we can define a function inside a
479:15 - function so let me give you this example
479:18 - and in this example this function which
479:21 - is the outer function takes some text or
479:24 - message as the argument and I have
479:27 - defined one more function inside the
479:31 - outer function and I named it as inner
479:34 - function which prints the value of the
479:37 - text which we have passed in the outer
479:40 - function and we are just calling the
479:43 - inner function in the outer function
479:46 - scope so this function is declared
479:49 - locally inside the outer function and we
479:53 - are just calling this inner function
479:55 - inside this outer function now in other
479:58 - words we can also say that this outer
480:01 - function is an enclosing function and
480:04 - this inner function is the local
480:07 - function of the this outer function and
480:11 - now when I call this outer function and
480:13 - let me run the code it's going to just
480:15 - print the value which we have passed as
480:19 - an argument so we have just passed this
480:22 - text argument which is once again passed
480:24 - to print statement of inner function and
480:27 - because we are calling this inner
480:29 - function inside this enclosing function
480:31 - it prints the value using this statement
480:34 - so when you declare one function inside
480:37 - the another function it's called the
480:41 - nesting of functions let me give you one
480:44 - more example of the nested function and
480:47 - I have defined this pop function which
480:50 - is our outer function or enclosing
480:53 - function and here I have defined a
480:57 - function called get last item which is
481:01 - our inner function or the local function
481:03 - to the pop function now this pop
481:06 - function takes the list as an argument
481:08 - and we have defined find a local
481:11 - function inside this pop function and
481:13 - what this local function get last item
481:15 - does is whenever you pass a list as an
481:18 - argument to this local function it is
481:21 - going to find out the last element of
481:24 - the list and return the last value of
481:27 - this list so here this is the last index
481:31 - of the list and then it is going to
481:34 - return the last item of the list which
481:36 - is passed as an argument now you may
481:38 - already know that you can call a
481:40 - function called remove on your lists
481:43 - which is used to remove some item from
481:48 - the list so I'm just calling remove
481:50 - function on the list and as an argument
481:52 - of the list I am passing the function
481:55 - which finds out the last element of the
481:58 - list so this is going to give us the
482:01 - last element of the list and this last
482:03 - element will be removed from the list
482:06 - and At Last I am simply returning the
482:09 - list which is passed as an argument to
482:12 - the pop function so let us say this is
482:14 - the list on which we are working on
482:15 - which have five elements and we are
482:18 - calling pop function on this list again
482:21 - and again three times so let me run the
482:24 - code and let's see what happens so you
482:26 - can see when first pop is called it's
482:29 - going to remove the last element which
482:30 - is 6 from the list and then whenever the
482:34 - second pop is called it's going to
482:36 - remove the four and whenever the third
482:39 - pop method is called it's going to
482:41 - remove the three and so on so this is
482:44 - how you can use nested functions in
482:46 - Python now let's talk about the closures
482:50 - so I am going to use the same nested
482:53 - function example which I have shown you
482:55 - earlier so this is the nested function
482:58 - now in order to convert this nested
483:00 - function into a closure what we need to
483:03 - do here is we need to return the inner
483:07 - function without the parentheses so the
483:11 - thing to note here is we do not need to
483:15 - return this inner function with the
483:18 - parenthesis we need to return this inner
483:20 - function without any parenthesis and
483:23 - this is the simplest example of the
483:26 - closure so what is a closure so a
483:29 - closure is a function whose return value
483:32 - depends on the value of one or more
483:35 - variable which are declared outside the
483:39 - function so in this example this text
483:41 - variable is declared outside the inner
483:46 - function and the value of this inner
483:49 - function depends on this text variable
483:52 - which is declared outside this inner
483:56 - function and that makes it a closure and
483:59 - closure have a special property that
484:02 - this closure function object remembers
484:05 - the value in the enclosing scope even if
484:09 - if they are not present in the memory so
484:13 - I will explain you that but let me just
484:15 - show you how to use this outer function
484:18 - which now uses the closure so I'm going
484:21 - to declare a variable a which means
484:24 - because this outer function is returning
484:26 - the inner function that means a contains
484:29 - now the inner function so we can use
484:32 - this a as the function so in order to
484:35 - use this a as the function we can just
484:37 - call this a using the parenthesis
484:40 - because this function does not take any
484:44 - argument so we are not passing any
484:45 - argument here but we will just call it
484:48 - as a function because this outer
484:50 - function is just returning the inner
484:53 - function so let us run the code and
484:55 - let's see what happens when we run this
484:57 - code so you can see it prints hello
484:59 - which is printed using this print
485:01 - statement whenever we call this a
485:05 - function so if I just call this a
485:08 - function without the print method also
485:11 - it's going to print the hello because
485:13 - here we are just using the print to
485:17 - print the text which is passed using the
485:21 - outer function now as I said closure is
485:24 - a function object that remembers the
485:26 - value in the enclosing scope even if
485:30 - they are not present in the memory so
485:33 - our enclosing scope is the outer
485:35 - function so even if we delete the outer
485:38 - function after declaring the statement
485:42 - and if the a contains this inner
485:45 - function and now let us say I am going
485:48 - to just delete the outer function so
485:52 - this statement is going to delete the
485:53 - outer function and let me call this out
485:55 - of function once again after the
485:57 - deletion of this function that means it
486:00 - is going to throw us an error which will
486:02 - say that this function is already
486:05 - deleted so we cannot call this function
486:09 - and now let's see the magic of the
486:11 - closure so even if we deleted the outer
486:15 - function and we cannot call the outer
486:18 - function but before deleting we have
486:21 - created a variable which contains the
486:24 - value of inner function and now I am
486:26 - just calling the inner function with
486:28 - these parentheses and let's see what
486:31 - happens so I am going to just run this
486:33 - code and it is going to print hello even
486:36 - after we have deleted the outer function
486:39 - so this means that this variable a is
486:43 - storing some kind of state of inner
486:46 - function even if the outer function is
486:49 - deleted and that is the magic of the
486:53 - closures so a closure function is able
486:55 - to remember the values which are
486:57 - declared outside the function also so
487:01 - this is our closure function and it's
487:03 - able to remember the value which are
487:05 - declared which is text outside the
487:08 - function and that's the beauty of
487:11 - closures now let me give you one more
487:13 - example of the closure so we will be
487:16 - able to understand it in a better way so
487:19 - here I have defined a function called
487:22 - nth power and I pass one argument here
487:26 - which is an exponent and inside this nth
487:30 - power function I have defined a local
487:32 - function which also takes one argument
487:35 - and then what it returns is is the power
487:40 - of whatever argument we pass here and
487:43 - this exponent is coming from the outer
487:46 - scope which is as an argument of the
487:48 - outer function which is nth power so
487:52 - base is coming from the inner local
487:55 - function and the exponent is coming from
487:58 - the outer scope and we are just
488:01 - returning this power of which is a local
488:04 - function without any parenthesis once
488:07 - again so this is very important you
488:09 - return the function without the
488:12 - parenthesis now I can declare some
488:14 - variable first of all I am going to
488:16 - declare a variable called Square and
488:18 - then we will call this nth power
488:21 - function and we will just pass the value
488:24 - 2. so now this exponent becomes 2 here
488:28 - which is also passed to the inner
488:30 - function or the local function so here
488:33 - the value of 2 is saved that means
488:36 - whenever we call the square function it
488:40 - is going to give us the square of
488:42 - whatever number we are going to pass as
488:46 - an argument to this Square so let us try
488:49 - it once and let's see what happens so I
488:52 - am going to just print and then call
488:55 - this Square function which takes an
488:58 - argument and I am going to first of all
489:00 - find out the square of 2 and I am going
489:03 - to run this program and you can see it's
489:06 - going to give us the square of this 2 b
489:09 - because now the square function is going
489:13 - to give us the square of the number
489:16 - which we will pass as an argument here
489:18 - so this 2 is passed to the inner
489:21 - function because this nth power gives us
489:24 - the inner function because it Returns
489:26 - the inner function so now this 2 which
489:29 - we are passing in the square is passed
489:33 - as the base of this inner function and
489:37 - that is why we are getting the square of
489:39 - the number which we pass here so let's
489:42 - find out the square of some more numbers
489:45 - so I am going to just pass 3 4 and 5
489:49 - here and I am going to run the code once
489:52 - again and you will see that it is going
489:54 - to give us the square of 2 3 4 and 5. so
489:59 - once again we have seen that the closure
490:02 - function is remembering the value which
490:06 - is declared outside the scope which is
490:08 - exponent now whenever I use this
490:12 - function once again so let me declare
490:13 - one more variable and this time I want
490:16 - to declare a cube here and once again
490:19 - I'm going to use the nth power to find
490:22 - out the cube of numbers so now this 3 is
490:25 - passed as an exponent here and this
490:28 - exponent is going to be passed inside
490:30 - the inner function so exponent value is
490:33 - 3 here that's why we are going to get
490:35 - the cube of the number which we are
490:38 - passing as the base argument of this
490:42 - inner function so now this is the inner
490:45 - function and we can once again call the
490:48 - print to call the cube method this
490:51 - should be Cube not Q so Cube and then we
490:55 - can find out the cube of 2 and let us
490:57 - find out the cube of 3
491:01 - four and five also so let us run the
491:04 - code once again and now you will see
491:07 - here the cube of the numbers are printed
491:10 - whatever numbers we are passing as an
491:12 - argument of this Cube function so in a
491:16 - way this Cube or this Square variable is
491:19 - holding the status of the inner function
491:23 - and that's something we have also seen
491:25 - in the case of classes the classes are
491:28 - able to remember the state of the
491:30 - variables and the methods which are
491:33 - declared inside the classes so closures
491:35 - are sometimes used in place of the
491:38 - classes which only have usually one
491:41 - method inside them because this one
491:44 - method we can already Define in the
491:47 - closure also and it's able to remember
491:50 - the state so closures can be used in
491:53 - place of the classes which have fewer
491:56 - method generally one method inside them
491:59 - the closures are also used used heavily
492:02 - in the case of decorators in Python so
492:06 - decorators we are going to learn in the
492:09 - next video and I'm going to show you why
492:12 - decorator use closures and how to use
492:16 - closures with the decorators and the
492:19 - third advantage of closures are they are
492:23 - sometimes more efficient than the normal
492:26 - functions so the closures are sometimes
492:29 - also used for the code efficiency and
492:33 - the faster working of code so this is
492:36 - how you can use closures in Python in
492:39 - this video I am going to show you what
492:40 - are decorators in Python and also I'm
492:43 - going to show you how to use decorators
492:46 - in Python but before starting with this
492:49 - video I will suggest you to watch the
492:51 - last two videos in which I have talked
492:53 - about the basics of functional
492:55 - programming in Python
492:58 - so let's get started with the decorators
493:01 - so first of all what are decorators so
493:05 - decorators wraps a function and modify
493:09 - Its Behavior in one way or the another
493:14 - without changing the source code of the
493:18 - actual function so let us see in
493:21 - practice how to declare and use
493:24 - decorators so first of all what I'm
493:27 - going to do is I'm going to define a
493:29 - very simple method and I'm going to name
493:33 - it as a say
493:35 - hello for example which doesn't take any
493:38 - argument and it just prints hello world
493:42 - let's say now let's say I want to
493:44 - decorate this function say hello and I
493:47 - want to print some kind of string before
493:50 - and after the printing of hello world
493:53 - without changing the code of the
493:58 - function
493:59 - so here we can declare the decorators so
494:04 - I am going to declare a decorator
494:06 - function for this and I am going to name
494:08 - it as decorator underscore func and this
494:12 - decorator function is going to take one
494:14 - argument and this argument will be a
494:17 - function now we have seen in the last
494:19 - video that we can return a function from
494:24 - a function or we can pass the function
494:27 - as an argument of another function so
494:31 - inside this function I am going to
494:32 - declare one more function and I am going
494:35 - to name it as wrapper functions which
494:39 - takes no argument and inside this
494:40 - wrapper function what I want to do is I
494:43 - want to call a function which is passed
494:46 - as an argument of The Decorator function
494:49 - and then at last I just want to return
494:52 - this function so I am going to just call
494:54 - return and I'm going to return the
494:56 - wrapper function without the parenthesis
494:59 - is so in the case of closures we have
495:02 - seen that we can return the inner
495:06 - function without the parenthesis and
495:08 - that makes them the closures now let us
495:11 - say we are going to pass this say hello
495:12 - function as an argument of this
495:15 - decorator function and this function
495:17 - will be called here so in order to print
495:20 - something before and after this string
495:24 - hello world we can print something here
495:27 - also so here we can just write let us
495:31 - say we want to print X and we want to
495:34 - print this x 20 times let us say so we
495:38 - can just write this kind of notation and
495:41 - after the execution of function I want
495:44 - to print let us say y 20 times so this
495:47 - is the simplest form of decorator which
495:50 - takes function as an argument now in
495:53 - order to call this say hello function
495:56 - with The Decorator I am going to declare
495:59 - one variable and I am going to name it
496:02 - as hello and then I am going to call The
496:06 - Decorator function and I told you that
496:08 - this decorator function takes the
496:10 - function as an argument so we can pass
496:12 - the say hello function as an argument to
496:16 - this decorator function which will be
496:18 - passed here and it will be called here
496:22 - now in the last video in case of
496:24 - closures we have seen that because this
496:28 - decorator function is returning the
496:30 - inner function that means this variable
496:33 - will contain the inner function so we
496:37 - can call this hello with these
496:40 - parentheses and because this wrapper
496:42 - function does not take any argument so
496:44 - we can call it like this and let us run
496:47 - the code and let's see what happens so
496:50 - when we run the code you can see before
496:52 - the hello world string we have printed x
496:57 - 20 times and after the hello world we
497:01 - have printed y 20 times so this is a
497:05 - simple form of decorator and this is how
497:08 - you can use decorators in Python but
497:11 - python also provides the simple way of
497:14 - declaring this kind of notation so
497:19 - instead of using this line of code I'm
497:21 - going to comment this line of code and
497:25 - also this line of code because instead
497:28 - of doing this you can use this kind of
497:30 - notation so just above your function in
497:34 - which you want to apply The Decorator
497:36 - you use at the rate symbol and then the
497:40 - name of The Decorator which you want to
497:42 - apply to the function and this notation
497:45 - above the function is equivalent to this
497:49 - kind of notation and now we can directly
497:51 - use this function say hello without the
497:55 - use of these two lines of code so let
497:58 - let me run the code once again and let's
498:01 - see what happens and the result is the
498:04 - same so this is how the decorator works
498:07 - so let's go through the definition once
498:09 - again so decorators wraps the function
498:13 - and modify Its Behavior in one way or
498:18 - another without changing the actual code
498:22 - of the function so this decorator have
498:25 - changed the behavior of this function
498:28 - without even changing the actual code of
498:33 - this function now one question which may
498:35 - arise here is can we use more than one
498:39 - decorator with the same function so let
498:42 - us try to declare two decorator
498:45 - functions so we are going to declare two
498:47 - decorator functions and this decorator
498:50 - function I am going to name it as
498:52 - decorator X and the second function I am
498:54 - going to name it as decorator y so the
498:58 - first decorator function is going to
499:00 - decorate your function with the x value
499:04 - and the second decorator is going to
499:06 - decorate your function with the value y
499:09 - so we are going to replace this by y now
499:13 - here above your function you can use the
499:17 - decorator X and then also you can use
499:21 - the decorator y above it so I am going
499:24 - to just try it at the rate decorate a y
499:27 - and this notation is perfectly fine so
499:30 - you can use one or more decorators with
499:33 - a single function so let me run the code
499:36 - and let's see what happens I am going to
499:37 - run this code and you can see what
499:40 - happens so first of all the Y decorator
499:44 - has wrapped the function with y's and
499:49 - then after that comes the X decorator
499:52 - which have decorated the function with X
499:55 - values and then your actual string is
499:59 - printed which is hello world now one
500:02 - thing to note here is the order of the
500:05 - decorator in which they are used so now
500:08 - we will try to just exchange the places
500:12 - of The Decorator X and Y and now let's
500:16 - run the code and let's see what happens
500:17 - so before it was printing y first and
500:21 - then the X when this decorator was used
500:24 - at the top and then the X decorator was
500:27 - used and now when we run the code the
500:30 - opposite of that will happen now if you
500:33 - want to see the equivalent notation of
500:35 - this using decorator so I am going to
500:38 - just comment these decorators from here
500:41 - and let us try to use this kind of
500:43 - notation with our decorator so I am
500:45 - going to just uncomment this code and
500:48 - this time what I'm going to do is I'm
500:49 - going to use this decorator x with the
500:54 - say hello and I am going to enclose this
500:58 - notation in inside that decorator wire
501:01 - so I can use this kind of notation which
501:05 - is equivalent to this kind of notation
501:07 - also so I am going to run the code and
501:10 - you can see because the equator Y is the
501:13 - outermost decorator here it's going to
501:16 - just print the value of y and then we
501:19 - have The Decorator X which is going to
501:21 - print the value of x and then our actual
501:24 - string if we exchange the places of
501:28 - decorator X and decorator y then the
501:32 - order of the printing will also change
501:36 - so now this was the very basic decorator
501:39 - example so let me remove this example
501:43 - and let me give you one more example so
501:46 - instead of using this function let me
501:48 - give you one more example so I am going
501:50 - to declare a function called divide
501:53 - which is going to take two arguments let
501:56 - us say X and Y and what is going to do
501:59 - is it is going to return the value of
502:03 - the division of x divided by Y and let
502:07 - me remove these decorators from here so
502:10 - in the last say hello example our say
502:13 - hello function was not taking any
502:15 - argument and now we are giving our
502:18 - divide function two arguments that means
502:22 - we need to change the wrapper function
502:24 - here also so I am going to name my
502:27 - decorator as decorator divide which
502:29 - takes a function and I am going to
502:31 - change the wrapper function and now this
502:35 - wrapper function is going to take two
502:37 - values which is the value of X and Y you
502:39 - can also write a and b it does not
502:42 - matter it just takes two values and
502:45 - instead of this kind of notation let me
502:48 - print the values of A and B first of all
502:51 - so inside this print function I am going
502:53 - to just write divide and then we are
502:56 - going to pass the value of a comma comma
502:59 - and comma B so we are going to print the
503:02 - value of a and b and then we are going
503:04 - to check if the value of B is 0 or not
503:07 - so I am going to just say if B is equal
503:11 - to 0 then we are going to print the
503:13 - message that division with 0 is not
503:18 - allowed and also we are going to return
503:21 - immediately from this function otherwise
503:24 - if the value of B is not equal to 0 then
503:27 - we are going to return the division of a
503:29 - by B so once again without changing the
503:33 - actual function which is divide we have
503:35 - changed the behavior of this function
503:38 - which is divide using this decorator
503:41 - function and the last thing which we
503:44 - need to do here is to call our decorator
503:47 - function above our normal divide
503:50 - function and now I can use this divide
503:52 - function normally so I am going to just
503:54 - use this divide function inside the
503:58 - print and I am going to pass two values
504:01 - here let us say 15 and 5 and let's run
504:05 - the code and it's going to print first
504:07 - of all this line which is printed using
504:09 - this statement which says divide A and B
504:13 - which is divide 15 and 5 and then
504:16 - because the value of B is not equal to 0
504:20 - that means this value is returned with
504:24 - the result 3 which is the division of 15
504:28 - by 5. now let us change the value of B
504:31 - and we are going to just give 0 as the
504:34 - value of b or Y here and I am going to
504:38 - run the program once again and now you
504:40 - can see that this statement is printed
504:44 - which says division with 0 is not
504:47 - allowed and because this function is not
504:50 - returning anything or you can return 0
504:53 - from here it does not matter and I am
504:55 - going to run the code it prints 0 here
504:58 - so so this is how you can use decorators
505:01 - with the function which takes some
505:04 - arguments and return some values now let
505:08 - me give you one more real world example
505:10 - which we can use with decorators so
505:13 - instead of our divide function now let's
505:18 - say what I want to do is I want to
505:20 - declare a function I am going to just
505:23 - name it as my func which takes one
505:26 - argument or number so this will be a
505:29 - number and then this function calculates
505:32 - the sum of the number from 1 to the
505:36 - number which we provide here so let's
505:38 - say we provide 10 here so this function
505:41 - is going to give us the sum of the first
505:43 - 10 numbers and now I am going to declare
505:46 - a variable called sum which I initialize
505:50 - it with 0 and in the next line I am
505:53 - going to use for I in some range and
505:57 - this range will be the number which is
505:59 - provided plus one because range starts
506:02 - from zero and not from one that's why
506:04 - I'm adding 1 here in the range if I want
506:08 - to calculate the sum of first 10 numbers
506:12 - let us say and if I provide 10 here then
506:15 - range will give you until 9 that's why
506:18 - I'm adding 1 here and then inside this
506:20 - for loop I am going to just do sum plus
506:24 - equals I and At Last I am going to just
506:28 - return the value of the sum now till now
506:32 - we have seen how to create decorator
506:34 - functions for the functions which takes
506:37 - no argument or for the function which
506:40 - takes some argument and we want to use
506:42 - these argument inside the wrapper
506:46 - function but at times you need to write
506:49 - a decorator function which will be a
506:52 - generic decorator function which means
506:54 - The Decorator function which I am going
506:56 - to create here will be used with not
506:59 - only this function but the other
507:01 - function which can take this argument on
507:04 - multiple number of argument or no
507:06 - argument so let's see how we can write a
507:08 - generic decorator function
507:10 - so let's say I want to measure the
507:13 - timing of this function how much time
507:16 - this function takes in order to execute
507:20 - this code and timings we can measure
507:24 - with any function so it does not matter
507:26 - that we need to use this function to
507:30 - calculate the timing you can also use
507:32 - The Decorator function which I am going
507:34 - to create with the other functions also
507:38 - to measure the timing of those functions
507:40 - so because it's a timing decorator so I
507:43 - am going to name it as timing and it
507:46 - takes once again the function as an
507:48 - argument and because we do not know
507:51 - which argument the function is going to
507:54 - take right now this function takes one
507:57 - argument but it does not matter you need
508:00 - to measure the time of the function
508:02 - which takes one argument or two argument
508:04 - or three argument or no argument so that
508:07 - is why in that case we can use this kind
508:09 - of notation as trick X args here and
508:13 - then comma double Asterix KW args here
508:17 - and these two arguments makes your
508:20 - wrapper function independent of the
508:22 - number of argument which will be
508:24 - provided with this function and in order
508:28 - to calculate the timing of the function
508:30 - we need to import a module so let us
508:33 - import a module so I am going to just
508:35 - write from time import time so there is
508:39 - an inbuilt time function which we can
508:42 - use to get the time and now under this
508:45 - wrapper what I am going to do is I am
508:47 - going to just declare a variable called
508:51 - start and I am going to save the value
508:54 - of current time here so whenever you
508:56 - call this time with the parenthesis it
508:59 - is going to give you the current time
509:01 - now in the next line what I want to do
509:03 - is I'm want to just create a new
509:05 - variable which I will call it as result
509:09 - and I am going to assign the result of
509:12 - this function so let us call this
509:15 - function with the variables which we
509:18 - have provided into the wrapper function
509:20 - so because we do not know which argument
509:22 - comes with this function so we are going
509:25 - to just pass these argument as it is
509:28 - into the function argument which is
509:31 - passed as an argument of your decorator
509:33 - let us provide the indent here so this
509:37 - will be satisfied and then in the next
509:39 - line we are going to just print the time
509:42 - elapsed so I am going to just say
509:44 - elapsed time and then this curly bracket
509:49 - and you already know we can call a
509:52 - format method on the string and here as
509:55 - an argument we just want to give the
509:58 - result of the start time and the end
510:01 - time so let us declare the end time also
510:04 - after the function execution is
510:06 - completed we are going to measure the
510:08 - current time once again and then we are
510:11 - are going to just say end the time which
510:14 - is stored in the end variable minus the
510:18 - start time and it is going to give us
510:20 - the time elapsed in the execution of
510:23 - this function and at last because this
510:26 - function or the other function can also
510:28 - return some value at last we are going
510:30 - to return the result which we have
510:33 - calculated so I am going to just write
510:35 - return this result so this is the
510:38 - generic timing function which you can
510:40 - use with any function whichever you like
510:44 - so I'm going to just decorate my
510:47 - function using at the rate the timing
510:51 - decorator and then I am going to call
510:54 - this my function inside the print method
510:56 - so print my function and let us say I
511:00 - want to calculate the sum of first 20
511:04 - 000 values and I am going to run the
511:07 - code and here in the result you will see
511:09 - 0.0 in the elapsed time because this
511:13 - value is very small and elapsed time is
511:16 - approximately equal to 0 for the smaller
511:19 - values because we are just iterating
511:23 - over the smaller value but the sum is
511:26 - the exact sum so let us increase this
511:29 - value by two zeros and let's also print
511:33 - the value of start time and and time
511:35 - here so I'm going to just print the
511:37 - value of the end time and the start time
511:41 - so we know that what is the starting
511:44 - time and what is the ending time and I
511:46 - am going to run the program once again
511:48 - and now you will be able to see that
511:52 - this is the starting time and this is
511:55 - the ending time and you will be able to
511:57 - see some time elapsed in the execution
512:01 - of this function and when I increase 1 0
512:04 - here so you will be able to see two
512:07 - seconds is taken now for the calculation
512:10 - of the sum of this number so you can use
512:14 - this timing decorator in order to
512:16 - calculate the time of execution of any
512:20 - other function other than this also so
512:23 - this is how you can use decorators in
512:25 - Python in this video we will talk about
512:28 - operator overloading in Python now you
512:31 - might already know that everything is an
512:34 - object in Python so when I want to know
512:37 - the type of this number two it's going
512:39 - to show this kind of output and this
512:42 - means that 2 is an object of the Class
512:45 - end now when I once again want to know
512:49 - the type of let us say 2.0 it's an
512:54 - object of class float when I want to do
512:58 - the same operation with the string this
513:01 - string is an object of class string so
513:05 - everything is an object in Python now
513:09 - have you ever wondered that when you do
513:12 - 2 plus 2 it's going to give us the
513:16 - addition of two numbers and when I add
513:20 - two strings let's say two and then I am
513:23 - going to use the same operator which is
513:25 - plus operator with the other string it's
513:29 - going to give me the concatenation of
513:32 - these two string values so the same
513:35 - operator plus is working differently
513:38 - with different type of objects the same
513:42 - you might have observed with the
513:45 - multiplication operator which is this
513:48 - asterisk so when I use this Asterix or
513:50 - multiplication operator with a string
513:53 - and let us say I write 3 here it is
513:55 - going to print this given string three
513:58 - times but the same operator when I will
514:00 - use with the two numbers it is going to
514:03 - give me the different Behavior which is
514:05 - the multiplication of these two numbers
514:07 - so the same operator Asterix is
514:10 - functioning differently with different
514:13 - kind of data or in other words we can
514:17 - say that this Asterix operator or this
514:20 - plus operator are overloaded for
514:25 - different kind of objects so whenever
514:27 - this plus operator is used with two
514:31 - numbers it's going to give us the sum of
514:33 - these two numbers and whenever this
514:36 - operator is used with the string it's
514:38 - going to give us the concatenation of
514:40 - these two strings so both these
514:42 - operators are overloaded for handling
514:46 - different kind of data so this is the
514:49 - overloading of the built-in operators
514:52 - now we might also think that if this is
514:56 - possible can we overload The Operators
515:00 - by our custom classes so let me create a
515:04 - class and I am going to name it as the
515:08 - number class which is going to take one
515:12 - argument so let me Define a Constructor
515:14 - here so underscore underscore init
515:16 - underscore underscore and this is going
515:19 - to take one argument which is the number
515:21 - and I am going to just write self dot
515:26 - num is equal to num so this is the
515:29 - simple class which we have created and
515:32 - now I am going to create two instance of
515:35 - this same class so number and I am going
515:38 - to give the number one let us say here
515:40 - and then I am going to create a second
515:43 - object of this class and this time I am
515:45 - going to give the number 2 here so is it
515:49 - possible that we can use let us say n 1
515:52 - plus and 2 so let us try this and it is
515:56 - going to give us this error which says
515:58 - unsupported operand type for plus number
516:03 - and number so because python doesn't
516:05 - know how to use this plus operator with
516:08 - your or class objects is going to give
516:11 - us this error which is unsupported
516:14 - operand type and whatever is the
516:16 - operator you are using so it turns out
516:19 - that we can overload these kind of
516:21 - operators in Python by implementing some
516:25 - inbuilt methods in our class so we
516:29 - already know that whenever we want to
516:31 - implement a Constructor in Python we use
516:35 - this init method so I'm going to create
516:38 - a very simple class and I'm going to
516:40 - name it as a and this will be a blank
516:44 - class so this is a very simple class in
516:47 - Python and when I use our dir function
516:51 - which is a built-in function with this
516:54 - class let's see what happens so I am
516:57 - going to just press enter and it is
516:59 - going to print some methods here which
517:02 - are inbuilt method so here not all
517:04 - methods are visible so I am going to
517:07 - assign this value of d i r a to a
517:12 - variable a and then we will see in the
517:16 - right hand side in this inspector here
517:18 - and this is the a variable and you will
517:21 - see the list of all the inbuilt methods
517:24 - which are associated or which you can
517:27 - Implement them so for example we have
517:30 - implemented the init method in order to
517:32 - have the functionality similar to
517:35 - Constructor but there are other methods
517:38 - here too so there is a Str method or Le
517:42 - method which is less than method or any
517:45 - method which is not equal to method and
517:48 - many other methods which we can
517:50 - Implement here in our class so now I
517:54 - have given enough Theory to U and let's
517:57 - try to see with an example how to
518:00 - overload an operator in Python so here I
518:05 - have created a class which I call Circle
518:08 - kill and this takes one argument which
518:12 - is the radius of the circle and I have
518:14 - created the setter and get a method for
518:17 - this radius variable and in the third
518:20 - method I am just calculating the area of
518:24 - the circle using the radius and I have
518:27 - also used a inbuilt module which is math
518:30 - in order to get the value of pi so using
518:34 - this expression I am just calculating
518:36 - the area of the circle now I have
518:39 - created two objects of this class with
518:42 - two different radiuses so in the first
518:45 - object I have given the radius 2 and in
518:48 - the second object I have given the
518:50 - radius 3 and from the theory which we
518:52 - have learned till now we already know
518:55 - that this expression will not work with
518:59 - these two objects so when I run this
519:01 - code it's going to give me the error
519:03 - which says unsupported operand error so
519:06 - now we are going to overload this plus
519:08 - operator in this circle class now in
519:12 - order to overload a particular operator
519:15 - let us say plus you need to implement
519:18 - Associated method in your class so with
519:22 - this plus operator there is a special
519:24 - method which we need to implement in our
519:27 - class and I have given the list of all
519:29 - the methods which is associated with The
519:32 - Operators so with the plus operator you
519:35 - need to implement this special method
519:38 - which is underscore underscore add
519:40 - underscore underscore in order to
519:43 - overload minus you use this method in
519:46 - order to overload the multiplication you
519:49 - use this method so here is the operator
519:52 - which we want to overload and here I
519:56 - have given the method name which you
519:59 - need to implement in your class in order
520:02 - to overload this operator in Python so
520:05 - there is this list which you can use
520:08 - with all these operators so you can
520:10 - overload the mathematical operators in
520:14 - Python you can also overload the bitwise
520:17 - operators in Python like and or or
520:21 - bitwise write shift or bitwise left
520:24 - shift and also you can overload the
520:28 - comparison operators in Python using
520:31 - these Associated methods with these
520:35 - operators so now we want to overload
520:37 - this plus operator so we will implement
520:39 - this add method into our class so let's
520:43 - implement this add method into our class
520:46 - and implementing this method is really
520:49 - simple you just need to define a special
520:53 - method which is underscore underscore
520:54 - add underscore underscore and this add
520:58 - method is going to take two arguments
521:00 - one is self you already know and the
521:03 - other is the object of the other
521:06 - instance so this second argument is the
521:09 - object of the circle class and now
521:13 - inside this method I am going to just
521:15 - return first of all I will just use this
521:18 - circle as the Constructor and what I
521:21 - want to do I want to add let's say the
521:24 - radius of the two objects which are
521:27 - provided one is the self object and
521:30 - other is the object which is provided
521:33 - using this argument so I am going to
521:36 - just say self dot underscore underscore
521:39 - radius plus the circle object radius so
521:43 - let us use this circle object and then
521:45 - Dot and then underscore underscore
521:48 - radius so basically I am adding the
521:51 - radius of the two objects one is this
521:55 - circle object and other is the radius of
521:58 - the self which is the current class so
522:00 - as soon as you implement this method add
522:03 - using these two arguments then this
522:07 - operation is is going to work in Python
522:11 - so because we have overloaded the plus
522:13 - operator using this add method now this
522:17 - operation is going to work so let me
522:20 - just assign the addition of these two
522:23 - objects into a third variable and this
522:26 - variable I am going to name it as C3 and
522:29 - using this C3 let us say I want to print
522:33 - the radius of the circle so I am going
522:36 - to just use the print method and then
522:40 - I'm going to use the C3 object and I'm
522:44 - going to call a get radius method from
522:48 - this object and let's print the radius
522:50 - of C1 and C2 also so here I am going to
522:53 - just write c 1 and here I am going to
522:56 - just write C two so we are printing the
522:58 - radius of all these three objects and I
523:01 - am going to run the program now and you
523:04 - can see here the radius of the first
523:06 - object is 2 because we have provided two
523:09 - as an argument here the second is three
523:12 - because we have provided 3 as an
523:14 - argument here and because we have
523:16 - created this third object using the
523:19 - overloading of this plus operator where
523:21 - we were just adding the radius of both
523:25 - the objects that's why we got 5 years so
523:28 - 2 plus 3 is equal to 5 and this addition
523:32 - we have done using this expression so we
523:35 - have added the radius of the current
523:38 - class and the object which is passed
523:42 - using this argument so this is how you
523:45 - can overload the operators in Python by
523:48 - implementing the associated methods
523:51 - which are available in Python so let us
523:54 - say now we want to overload the less
523:58 - than and the greater than operator so
524:01 - for the less than operator we use this
524:04 - LT method and for the greater than
524:07 - operator we use this method called GT so
524:12 - let us Implement these two method inside
524:15 - our classes so I am going to just copy
524:18 - this add method two times and first of
524:22 - all I am going to replace this by LT
524:25 - Which is less than and the second method
524:28 - I am going to replace by GT which is
524:31 - greater than and we want to see if the
524:34 - radius of the circle is greater than the
524:37 - second radius which is provided using
524:39 - this object or not so first is less than
524:42 - so we are going to provide this operator
524:44 - and second is greater than so we are
524:47 - going to provide the other operator
524:49 - which is greater than operator and now
524:52 - this less than and greater than function
524:53 - is going to give us the Boolean value if
524:57 - this radius is less than this radius
525:01 - then is going to return us true
525:03 - otherwise it is going to return us the
525:06 - false so I already have the two instant
525:08 - sense of two classes and if I want to
525:11 - compare these two classes I can just
525:13 - write c one and I will use the less than
525:17 - operator here and then C 2 and also I am
525:22 - going to use the greater than operator
525:25 - here and let's run the code and let's
525:28 - see what happens so now it is going to
525:30 - give us this value which is the
525:32 - Constructor of the circle so how can we
525:34 - get the Boolean value you just need to
525:37 - remove this Constructor from here so you
525:40 - just need to remove the name of the
525:43 - class and now I'm going to run the code
525:45 - once again and now you will see true and
525:48 - false so we were checking if c one
525:50 - radius is less than C2 and it gives us
525:53 - true and once again we were checking if
525:55 - c one radius is greater than C2 and it
525:58 - has given false to us also we can check
526:02 - the third object for example c 3 here if
526:05 - c 3 is greater than C2 or not and most
526:08 - probably is going to give us true and it
526:11 - is correct here so you can see it's that
526:13 - simple to overload any operator in
526:16 - Python using these built-in methods so
526:20 - you just need to find out the associated
526:23 - method related to that operator and then
526:26 - you just need to implement that method
526:29 - related to that operator in addition you
526:33 - can also Implement some other methods
526:35 - which are available with the class so
526:38 - once again when I'm going to print the
526:41 - dir with any of the object let us say C1
526:45 - and I am going to run this program and
526:48 - you can see the list of the functions
526:50 - which you can Implement inside your
526:53 - class so add is already there but you
526:55 - can also implement this dish method or
526:58 - dir method or any of these methods which
527:02 - are available here so repr method or Str
527:06 - method any method you can Implement
527:09 - inside your class in order to Avail the
527:13 - functionality associated with that
527:16 - method so at last let us try to
527:18 - implement one of the method which are
527:21 - associated with the class so let us say
527:24 - we want to implement this method which
527:26 - is the Str method so I am going to just
527:29 - minimize this and I am going to just
527:31 - copy this function and once again paste
527:34 - here and instead of greater than I am
527:37 - going to just Implement now the Str
527:39 - method now this Str method only takes
527:42 - one argument which is self so I am going
527:44 - to just remove the second argument and
527:47 - here in the return value I can just
527:51 - return some string for example so I can
527:54 - just say Circle
527:56 - area and I am going to return the area
527:58 - of the circle so I am going to use this
528:01 - concatenation operator and then I'm
528:04 - going to convert the area into the
528:07 - string and then I am going to just use
528:09 - self dot area which is going to give us
528:12 - the area of that Circle so once you have
528:15 - implemented this Str method in your
528:18 - class you can simply use it like this
528:21 - dir method so I can just write Str and
528:25 - then the name of your object which you
528:28 - have created and let us run the code and
528:30 - let's see what happens so I am going to
528:32 - just see the result now it prints circle
528:35 - area and it is going to print the area
528:38 - of the circle I just need to provide
528:41 - equals to symbol here so we will be able
528:44 - to see it in a prettier way so you can
528:47 - see the area of the circle is printed
528:50 - similarly you can print the area of the
528:53 - other two Circle which is circle 2 and
528:56 - Circle 3 and let us run the code once
528:59 - again it is going to print as the area
529:01 - of all these circles so this is how you
529:04 - can use operator overloading in Python
529:07 - in this video we will talk about a
529:10 - command line tool which is called pdb
529:13 - which we use to debug our python script
529:18 - now pdb stands for python debugger and
529:21 - it is already installed whenever you
529:25 - install python on your operating system
529:27 - so you don't need to install a pdb
529:31 - separately if you have python installed
529:34 - it will work on your terminal now you
529:38 - might wonder why I'm using pdb if I
529:43 - already have the pycharm IDE and I can
529:46 - debug my code on the pycharm IDE
529:50 - now in real life situations most
529:53 - probably you will run your python script
529:56 - on some kind of a server now generally
530:00 - on these servers you don't have the
530:03 - luxury of using an IDE you will have to
530:07 - use the terminal in order to debug your
530:10 - python script and that's why I wanted to
530:13 - show you how to debug your python script
530:16 - using the command line tool which is pdb
530:20 - now to start with I have this simple
530:22 - python script which asks the user to
530:26 - input two numbers and these numbers will
530:30 - be saved in these two variables which is
530:32 - X and Y now we are using a function
530:36 - called add to add these two values and
530:40 - then we are just transferring the result
530:42 - into this Z variable and we are just
530:45 - printing the value of Z
530:47 - now in order to open the terminal in the
530:50 - pycharm IDE you just need to click on
530:53 - this option which says terminal
530:55 - and if you don't want to use this
530:58 - terminal you can also use a Windows
531:02 - command prompt or Linux terminal or if
531:05 - you are working on Mac OS you can also
531:07 - work on the Mac terminal so what you
531:11 - need to do is you just need to copy the
531:14 - path of your file where you are working
531:18 - and then you just need to CD to the
531:21 - directory in which you are working in so
531:23 - I'm going to just CD to the directory in
531:26 - which my python script is there and then
531:28 - the command will be same to run and use
531:31 - pdb on your terminal so you can use the
531:35 - Windows command prompt or this terminal
531:37 - which is available in the pycharm or any
531:40 - other terminal which is available on
531:43 - your operating system so I'm going to
531:45 - use this terminal which is available in
531:48 - the pi charm now I'm going to move this
531:51 - terminal to the right hand side so we
531:54 - will be able to see the code and the
531:57 - command terminal at the same time now in
531:59 - order to run your script you already
532:01 - know that you just need to give this
532:03 - command which is Python and the name of
532:07 - your script in my case the name of my
532:09 - script is debugging dot py so I'm going
532:13 - to just press enter and then it's ask me
532:16 - to provide the first number I'm going to
532:19 - provide the first number and then I'm
532:21 - going to provide the second number which
532:23 - is going to give me the sum of these two
532:26 - numbers so here it prints three three
532:28 - four four which is not the addition of
532:31 - these two numbers now some of you might
532:33 - already know what is the problem with
532:36 - this code and how to solve it but we
532:40 - will use the debugger to find out what
532:43 - is the problem and how to solve this
532:46 - problem so that whenever we enter two
532:49 - numbers it's going to give us the proper
532:52 - sum of these two numbers and not the
532:55 - other answer now in order to start the
532:58 - debugging on your python script you can
533:01 - provide this command so you can give
533:03 - python hyphen M pdb and the name of your
533:07 - script so my script name is debugging
533:10 - Dot py and then I'm going to press enter
533:12 - and now you will be able to see this
533:15 - kind of interface and you will be able
533:17 - to see pdb printed here and there is a
533:21 - cursor blinking here and this python
533:24 - debugger which is python pdb starts from
533:27 - the first line of code which you have on
533:31 - your script so we are on this line which
533:35 - is this line in our script which is the
533:38 - Declaration of this add function now the
533:41 - first thing you need to know in order to
533:44 - work with this pdb interface is the help
533:47 - command so you can give this help
533:50 - command here or you can give the H
533:53 - keyword which means the help command so
533:56 - I'm going to give the full help keyword
533:58 - here and then press enter which is going
534:01 - to give us the list of each and every
534:03 - command which you can use with the pdb
534:07 - so these are all the commands which you
534:09 - can use with pdb the most important
534:13 - command which we will be using
534:15 - frequently is the next command or
534:18 - shortcut of the next is n or we will be
534:21 - using the step command or the S keyword
534:25 - for the step command otherwise we will
534:28 - be using the C keyword or the continue
534:31 - command these are the three most
534:33 - frequently used command to work with the
534:37 - pdb now you can see you can type help
534:40 - and the name of the command in order to
534:43 - know more about that command so I'm
534:45 - going to just write help here and the
534:48 - name of the command let's say I want to
534:50 - just know more about the next command so
534:53 - the next command continue execution
534:55 - until the next line in the current
534:57 - function is reached or it returns so in
535:01 - this way you can get the help about each
535:03 - and every command which you have here
535:06 - now once again we are going to find out
535:08 - at which position pdb is right now we
535:12 - already know that pdb is on this line
535:15 - but there is a command called where or
535:19 - you can also write w to find out where
535:22 - right now your pdb is so I'm going to
535:26 - just write where and it's going to show
535:28 - on which line your pdb is currently
535:31 - standing so now I'm going to give the N
535:34 - keyword you can also give the next
535:36 - command here and I'm going to press
535:37 - enter and it's going to go to the next
535:41 - line which is this line which is the if
535:45 - name is equal to main so now we are on
535:49 - this line right once again when I press
535:52 - enter it's going to execute the last
535:55 - executed command so we have executed
535:58 - last this next command so if you press
536:01 - enter directly without entering any
536:04 - command it's going to execute the last
536:06 - executed command so now we are on this
536:10 - line which is this one which takes the
536:14 - input from the user and you will also be
536:17 - able to see on which line this code is
536:19 - so this line is at the seventh line now
536:23 - once again I'm going to press help here
536:26 - and then press enter and now I want to
536:28 - use this continue command so this
536:30 - continue command is used to continue the
536:34 - execution of your script from the point
536:37 - where you are right now so we are right
536:40 - now at this line which is line number
536:42 - seven and if I press C or if I type
536:46 - continue which is this keyword and I
536:49 - press enter then my program is going to
536:53 - execute and it will ask me the phone
536:55 - most number so I am going to provide the
536:58 - first number let's say 2 and then I'm
537:00 - going to provide the second number which
537:02 - is 3 and then when I press enter it's
537:05 - going to execute the program and it's
537:08 - going to print the result which is 23 in
537:11 - this case which is wrong and after the
537:14 - script is finished the pdb is going to
537:17 - restart the execution from the top so
537:20 - you can see this line the program is
537:22 - finished and will be restarted so once
537:25 - your program is finished the pdb is
537:28 - going to restart it from the starting
537:31 - point from where it has started so I am
537:34 - going to quickly provide the end command
537:37 - for next and once again next and I'm
537:40 - going to once again press next and
537:43 - provide the number which is 3 this time
537:46 - so now we are on this line which is the
537:48 - line number 8 which is this line so the
537:51 - execution of this line is finished now
537:54 - there is a print command in in pdb so
537:57 - you can just write print and the name of
538:00 - the variable so I'm going to just write
538:02 - X here because this line is already
538:05 - finished and it's going to give me the
538:07 - value of x so when I press enter it's
538:10 - going to print 3 which is the value of x
538:13 - once again I'm going to press the N
538:16 - command or the next command and then I'm
538:18 - going to provide the second number which
538:21 - is 4 this time and I'm going to print
538:24 - the value of the Y now so till now
538:27 - nothing seems to be wrong with this code
538:30 - so let me just press h for the help once
538:34 - again and we are going to see the list
538:36 - of commands once again and now I want to
538:39 - use this command which is what is
538:42 - so I'm going to just write what is and
538:47 - the name of the variable which is X okay
538:50 - so earlier we have printed the value of
538:53 - x which is 3 and now I'm writing what is
538:57 - X so we want to know what type of value
539:00 - is inside X so I'm going to just press
539:03 - enter now and once you do that you will
539:07 - see that X is an instance of class
539:11 - string and we wanted to enter the number
539:14 - right so now we know what is the problem
539:17 - so because input function is going to
539:21 - return the string value and this add
539:24 - function is just concatenate these two
539:27 - string values and it's not adding the
539:31 - two numbers so what is command is going
539:33 - to give you the information about the
539:36 - variable or the function but we will
539:39 - continue our debugging so you can see
539:41 - here right now we are on on this line
539:43 - which is this line so now I want to go
539:47 - inside the add function in order to
539:49 - inspect if it's working fine or not so
539:52 - we are on this line where add function
539:55 - is called so I can use this command
539:58 - which is the step command or I can use
540:01 - the shortcut which is s in order to step
540:04 - into the function where we are right now
540:08 - so I'm going to just type step here and
540:11 - then press enter and you will see we are
540:13 - here on the Declaration of add function
540:17 - once again and if we Type n or next once
540:21 - again we will go to the next line of
540:24 - this function which is this line which
540:26 - we use to add the value of X and Y so
540:31 - this command step or this letter s can
540:33 - be used to step into your function or
540:38 - step into your class if you are using
540:40 - class it's going to step into 2 or
540:43 - inside that function so now I'm going to
540:46 - just press n to go to the next line and
540:49 - this is the return sum line and now we
540:52 - already know what's the problem so we
540:54 - can press C or continue in order to
540:57 - continue the execution of this program
540:59 - so I'm going to press C and then press
541:01 - enter which is going to continue the
541:03 - execution of the program and it has
541:05 - printed the result and also it has
541:09 - restarted the pdb once again from the
541:12 - starting of the script so now let's
541:15 - correct this code and in order to
541:17 - convert the input into int or the float
541:21 - you can just type cast the string to end
541:24 - using this int function so I am going to
541:27 - just use this in function in front of
541:30 - both the input values so now we know
541:33 - that our script is most probably going
541:36 - to run fine so let's try to set the
541:39 - breakpoint at this line because both the
541:42 - values will be available at this point
541:44 - and we will know the values of X and Y
541:47 - at this point so we will be able to see
541:50 - the type of both the values so first of
541:53 - all what is a break point so when you
541:55 - set a breakpoint at some line the
541:58 - program is going to stop exactly at this
542:01 - line so generally we have seen that if
542:04 - you start the pdb it's going to start
542:06 - from the beginning of your script but if
542:10 - you set the breakpoint the execution
542:12 - will only stop at the line where you
542:15 - have set the breakpoint so once again
542:17 - I'm going to press h to get the help and
542:20 - I will see which command can I use to
542:23 - set the breakpoint so there is this
542:26 - command called Break which I can use to
542:29 - set the breakpoint so let me get the
542:31 - help about the break and it's going to
542:33 - give us the description about the break
542:36 - command so you can use the break keyword
542:39 - or the b letter in order to set the
542:41 - breakpoint so you can see it takes these
542:44 - arguments so in order to set the
542:46 - breakpoint you just need to write break
542:48 - and then the line number on which you
542:50 - want to set the breakpoint so let's say
542:53 - I want to set the breakpoint on the line
542:55 - number nine so I can just write break
542:58 - and then 9 and then press enter which is
543:01 - going to set the breakpoint on line
543:03 - number nine now I can give the continue
543:07 - command in order to continue the
543:09 - execution of the script and now when I
543:12 - press continue it's going to first ask
543:14 - for these two values so I'm going to
543:16 - quickly give the value of first number
543:19 - and the second number and then when I
543:21 - press enter it's going to stop at this
543:24 - line where we have set the break point
543:27 - right so right now we are on this line
543:31 - which is line number nine and now I can
543:33 - give this command which is what is X and
543:37 - once again it says that the type of this
543:40 - x is string so so what might be the
543:44 - problem the problem is after changing
543:48 - our script we haven't restarted the pdb
543:52 - we haven't exited the pdb and restarted
543:56 - the pdb so this script is not loaded
543:58 - after we have edited the code right so
544:02 - in order to quit the pdb you give the
544:05 - quit command or the queue letter so just
544:08 - press q and then press enter which will
544:11 - allow you to come out of pdb and let me
544:14 - run the debugging once again so you can
544:16 - once again give this command python
544:18 - hyphen M pdb debugging Dot py and then
544:22 - press enter which is going to restart
544:24 - the debugging and now this script is
544:27 - loaded once again with the correct code
544:31 - which is end so now let me just uh put
544:34 - the break point on the line number 10
544:36 - which is this line and now I'm going to
544:39 - press C to continue and I'm going to
544:41 - give these two two numbers let's say and
544:44 - you can see the program is halted on the
544:46 - line on which we have set the break
544:48 - point on so once again I'm going to give
544:51 - the what is command and the name of the
544:54 - variable which is X and then press enter
544:56 - and now you will see the type of X is
544:58 - now int and we have solved the problem
545:02 - so we can simply press C to continue and
545:05 - see the result and you can see it prints
545:07 - the result which is 8 which is the
545:09 - addition of 3 and 5 so our debugging was
545:13 - successful and we are now seeing the
545:16 - expected result which we wanted to see
545:19 - so this is how you can use pdb to debug
545:21 - your python script now there are few
545:24 - more ways of using pdb with your python
545:27 - script so let's see those other ways in
545:30 - which we can use the command pdb with
545:33 - our python script so I'm going to press
545:34 - Q in order to exit out of the debugging
545:38 - so the second way of using pdb is to
545:41 - import the pdb inside your script so I
545:44 - can just import the pdb library inside
545:49 - our script and then in order to set the
545:52 - breakpoint I can use pdb dot set Trace
545:57 - so this will set the break point on the
546:01 - next line after this line so I'm going
546:04 - to just clear the terminal by right
546:06 - clicking and then pressing clear buffer
546:08 - and once again to start the debugging I
546:11 - just need to give this python command
546:13 - and the name of my script so once you
546:15 - have this import inside your script and
546:18 - you have this code inside your script
546:20 - you don't need to give the pdb command
546:22 - you just need to run your script
546:24 - normally with the python command so my
546:27 - program execution is here which is
546:29 - running the program normally so I'm
546:31 - going to just grip the value of X and Y
546:34 - which is 3 and 4 and it's going to stop
546:37 - the execution at this line which is just
546:41 - after the set Trace code okay so because
546:45 - we have set the breakpoint on this line
546:47 - using this line of code it's going to
546:50 - stop at this point and once again I'm
546:53 - going to use for example what is command
546:56 - and I want to see the value of x and
546:59 - it's going to show us the type of X
547:01 - which is end so this is the other way of
547:04 - using pdb in your script some people
547:07 - also like to use pdb directly at the
547:11 - point where they want to set the
547:13 - breakpoint and the benefit of using this
547:15 - type of code is if you are using any
547:18 - linting tool it's going to warn you on
547:21 - the same line so the developer will know
547:24 - that he needs to remove this line
547:26 - because linting will fail because there
547:29 - is a semicolon here and we are using two
547:32 - line of code in the same line so it's
547:35 - going to give us the warning and that's
547:37 - how the developer will know that he
547:39 - needs to remove this line so he is going
547:41 - to remove move this line after the
547:44 - script is working fine so this was the
547:46 - second way I'm going to quit out of the
547:49 - pdb once again and let me show you the
547:52 - last way of debugging your code with the
547:54 - pdb command so I'm going to clear the
547:57 - terminal and now I'm going to just give
548:00 - this python command which is going to
548:02 - open the python shell and here you just
548:04 - need to import the script which you are
548:07 - working with so I'm working with the
548:10 - debugging script and then import the pdb
548:15 - and once you have imported your script
548:17 - and the pdb module you can just use pdb
548:22 - in order to start the debugging of your
548:24 - script so pdb dot run and under the
548:28 - brackets or under these parentheses you
548:31 - just need to give the name of your
548:33 - script so my script name is debuggings
548:36 - and then you need to provide at which
548:38 - point you need to start the debugging so
548:41 - let me enclose this code inside a new
548:44 - function so let me Define a new function
548:46 - and I'm going to name it as Main and
548:49 - this is going to be my main function and
548:51 - inside the main function I'm going to
548:53 - execute all the script and I'm going to
548:56 - just call this main function inside this
549:00 - if condition and here on the python
549:02 - shell I can just write debugging dot the
549:05 - function which I want to call so I'm
549:07 - going to just call the main function and
549:10 - then I'm going to press enter and once
549:12 - again it shows me that debugging doesn't
549:15 - have this main method because after
549:17 - saving I haven't restarted the pdb once
549:20 - again so let me just quit once again
549:22 - quickly and let me just quickly close
549:24 - this terminal and restart this terminal
549:26 - and once again I'm going to give the
549:28 - python command which is going to start
549:31 - the python shell and I'm going to import
549:33 - the pdb and the script once again and
549:36 - now I can just give the pdb dot run
549:38 - command and then give the name of the
549:41 - script on which I want to work on which
549:44 - is debugging and then I'm going to call
549:46 - the main method inside the debugging and
549:49 - then press enter and once again give the
549:51 - N command which is for the next which is
549:53 - going to start the debugging of your
549:55 - code so this is how you can use the pdb
549:58 - command in order to debug your python
550:00 - script in the last video we have seen
550:03 - how to debug our python script using
550:06 - python debugger or pdb now in this video
550:09 - I am going to show you how you can debug
550:11 - your python script using pycharm IDE so
550:14 - to start with I have this python script
550:16 - which takes two user input both numbers
550:20 - and I have created this add function
550:23 - which just add these two numbers and
550:26 - return the sum and using this print
550:28 - function I'm just printing the sum of
550:30 - these two numbers now let's run this
550:32 - code normally without any debugging and
550:36 - I'm going to just give two numbers here
550:38 - 44 and 55 and it's going to give me me
550:42 - this kind of output which is wrong
550:44 - because the sum of 44 and 55 is not
550:47 - obviously four four five five now some
550:50 - of you might already know the problem
550:52 - with this code but let's debug it with
550:56 - the help of the Python debugger so in
550:58 - order to start the debugging in pycharm
551:00 - ide you just need to click this icon
551:03 - which looks like a bug and when you
551:06 - hover over it it will say debug so I'm
551:09 - going to click on this debug button
551:11 - which is going to start the debugging of
551:13 - my program so you can see here this
551:15 - debugging window is opened and this
551:17 - debugging window have two sections one
551:20 - is console section and other is debugger
551:24 - section so right now we are in the
551:26 - console section where we can provide the
551:28 - user inputs and see the output of our
551:32 - python script just like the normal
551:34 - output now there is also a debugger
551:37 - window where you will be able to analyze
551:40 - the variables and all the the frames of
551:43 - your program so I am going to go to the
551:46 - console window and here I'm going to
551:48 - provide the first number and the second
551:51 - number and I'm going to press enter and
551:53 - it prints the sum of these two numbers
551:55 - which is not correct but our python
551:58 - script is finished executing now in
552:00 - order to debug this python script we
552:03 - need to set the breakpoint at which the
552:06 - execution of the program will stop and
552:09 - we will go step by step after this point
552:12 - so I am going to set the break point at
552:14 - this line which is line number 13 at
552:16 - which my main function is called and
552:19 - then click on this line where you want
552:21 - to set the set point and you will be
552:23 - able to see this red circle logo which
552:26 - means that we have set the breakpoint at
552:29 - this point so let's start the debugging
552:31 - once again and you will see because we
552:34 - have set the break point here the
552:36 - program execution is stopped at the line
552:39 - number 13 and how you know that the
552:42 - execution is stopped at line number 13
552:45 - you will be able to see under frames
552:47 - this line which is highlighted and you
552:50 - can see the line number is 13. so at
552:53 - this point the program execution is on
552:56 - the line number 13. also you will be
552:59 - able to see these kind of icon on top of
553:03 - this window so the first icon here is
553:06 - the step over icon which you can click
553:09 - to step over your code the second icon
553:12 - is step into icon using which you can
553:15 - step inside your function or a class on
553:20 - which you are currently on the third
553:22 - icon is step into my code so generally
553:25 - if you use this option which is step
553:27 - into and your program contains some
553:30 - inbuilt or built-in functions then it is
553:33 - going to go into those built-in function
553:36 - and this other option which says tap
553:38 - into my code is going to only step
553:41 - inside your your code and not into the
553:44 - built-in functions or the classes there
553:46 - are few more I can share one is four
553:49 - step into and other is step out which we
553:52 - are going to see later also under this
553:55 - variables section you will be able to
553:57 - see the values of your variables so
554:00 - first of all I'm going to click this
554:02 - button which says step over you can also
554:04 - press f8 to step over so I'm going to
554:07 - click this button and because my program
554:09 - asks the user to provide some input I
554:13 - will go to the console and provide those
554:16 - inputs so I'm going to just give 33 as
554:18 - the first number and 55 as the second
554:21 - number and then once again I'm going to
554:23 - press enter which is going to print the
554:25 - output and we come out of the debugging
554:28 - so now you know that this breakpoint is
554:32 - not helping us so we are going to remove
554:34 - this breakpoint and we are going to set
554:36 - our breakpoint here on the line number
554:39 - nine so here we will be able to see the
554:43 - values inside the variable X and Y so
554:46 - that we know what's the problem inside
554:49 - our code so let me start the debugging
554:52 - once again and once again I am going to
554:54 - give these two inputs 33 and 44 let us
554:59 - say and then you can see our program
555:01 - execution is stopped at this breakpoint
555:03 - and you will be able to see the values
555:06 - of your X variable and the Y variable
555:10 - now immediately you will see that this x
555:14 - value is the string and also this y
555:17 - value is the string and whenever we use
555:19 - this plus operator with two strings it
555:22 - is going to give us the concatenation of
555:25 - those two strings also in the variables
555:29 - you will be able to see the list of
555:31 - variables and the type of those
555:33 - variables and the values inside those
555:36 - variables so you can see X has string
555:40 - type and the value is 33 3 and Y has
555:43 - also the typed string and the value is
555:46 - 44. now I told you that you can use this
555:50 - button to step into your code so I'm
555:52 - going to click on this button which says
555:55 - step into my code which is going to step
555:58 - inside this function so our program
556:01 - execution was on this line this was the
556:04 - break point we have set and when I
556:06 - clicked the step into my code it has
556:09 - stepped into the function add if I would
556:14 - have pressed the step over button then
556:16 - my program execution will go to the next
556:18 - line and not inside this add function so
556:23 - because I have pressed this button which
556:24 - says step into my code that's why it
556:27 - goes inside the function so here also
556:30 - you will be able to see the values of
556:33 - your X variable and Y variable and also
556:36 - you will be able to see the value of the
556:38 - sum when you just click the step over
556:41 - button and here you will be able to see
556:44 - the value of sum which is three three
556:46 - four four which is the concatenation of
556:48 - these two numbers so immediately you
556:50 - will know that you are not adding these
556:52 - two numbers you are just concatenating
556:55 - two strings which gives you this kind of
556:58 - result so once you have pointed out the
557:01 - problem in your code we are going to
557:03 - stop our debugging so there is this red
557:06 - button here which is a square button I
557:08 - am going to click on this which is going
557:10 - to stop that debugging now in order to
557:13 - fix this code I can just type cast this
557:15 - input which is a string into the integer
557:18 - and with the second variable also I am
557:21 - going to do the same and now let's start
557:23 - the debugging once again and once again
557:26 - I am going to give the two numbers 33
557:29 - and 44 and press enter and the program
557:33 - execution will stop at the breakpoint
557:35 - and now you will be able to see the
557:38 - values here which is 33 and 44 and under
557:41 - variables you will be able to see the
557:44 - type of these two numbers which is now
557:46 - end so both are int values I am going to
557:50 - step over now so last time we have
557:52 - stepped into the function which is the
557:54 - add function this time I'm going to just
557:57 - press the step over button which is
557:59 - going to not go inside the add function
558:02 - but just tap over to the next line and
558:05 - you will be able to see the value of Z
558:08 - here which is 77 which is the correct
558:11 - sum of these two numbers so this is how
558:14 - you can use pie charm to debug your
558:16 - python script in this video we will talk
558:18 - about a special tool called python pip
558:22 - so we are going to see what is python
558:24 - pip and how to use Python pip so let's
558:28 - get started so first of all what is
558:31 - python pip
558:32 - so pip is a command line tool for
558:36 - installing and managing python packages
558:39 - which are generally found on a special
558:42 - index called python package index now if
558:46 - you want to know more about python
558:47 - package index you can visit on a website
558:51 - called Pi Pi dot o r g p y p i dot o r g
558:56 - and you will be able to get more
558:58 - information about python package index
559:01 - on this website so what is python
559:03 - package index python package index or Pi
559:07 - Pi is a repository of software for
559:10 - Python programming language now Pi Pi
559:13 - helps you to find and install software
559:16 - developed and shared by the python
559:20 - Community you can get more details about
559:22 - Pi Pi by clicking on this link or this
559:27 - link which are shown on the home page of
559:30 - Pi Pi and you can see at the time of
559:32 - making this video there are almost more
559:36 - than 150 000 project available on this
559:40 - index and if you want to search for any
559:43 - special project you can search it using
559:46 - this search text box so let's see how we
559:50 - can use Python pip using command line so
559:54 - generally whenever you have installed
559:57 - python on your windows or any other
560:00 - operating system pip will be installed
560:02 - with the same installation of python so
560:06 - if you have installed Python 3.4 or
560:09 - above most probably the python pip will
560:13 - be already installed on your operating
560:16 - system now to check which version of pip
560:19 - is installed on your system you can give
560:22 - this command python hyphen hyphen
560:24 - version and then press enter and it's
560:27 - going to show you the version of pip
560:30 - installed on your system so you can see
560:32 - pip
560:34 - 10.0.1 is installed on my Windows
560:37 - operating system and the python version
560:39 - which it supports is 3.7 now the first
560:43 - thing which you need to know about this
560:46 - tool called pip is how to use this tool
560:49 - so to know more about this tool you can
560:53 - give this command python hyphen hyphen
560:55 - help and it's going to show you the
560:59 - commands which you can use with this
561:02 - command line tool so here you can see
561:04 - the usage you give the PIP command and
561:07 - then one of these command either install
561:10 - download uninstall list show and all
561:14 - these other commands in order to install
561:16 - a package or uninstall a package or get
561:19 - to know more about a particular package
561:22 - also there are some general options here
561:25 - which you can read so for example if you
561:27 - want to get help you give these options
561:29 - or if you want to print the verbose
561:32 - output you can use these options and if
561:35 - you want to know the version you can use
561:37 - these option and all these other options
561:39 - are available with this command line
561:42 - tool which is PIP so let me clear this
561:45 - command prompt with the command called
561:48 - CLS and I'm going to first of all go
561:51 - into the python shell using python
561:53 - command and in here I'm going to import
561:56 - a special package called flask and I'm
561:59 - trying to see if it's already there or
562:02 - not so I'm going to press enter and it's
562:04 - going to show me this error which says
562:07 - module not found error so this module
562:10 - flask is not right now recognized by my
562:14 - python interpreter so let me just exit
562:17 - from this interpreter by just pressing
562:20 - exit and now I'm going to just give CLS
562:24 - so in order to know more about a
562:26 - particular package you give this command
562:28 - python
562:29 - search and the name of the package so in
562:34 - my case I want to just search for a
562:36 - package called flask and I'm going to
562:39 - press enter and it's going to give me a
562:41 - big list of package which are related to
562:45 - flask so because flask is a popular
562:47 - package on python package index that's
562:51 - why you can see so many options for the
562:54 - flask package so I'm going to once again
562:56 - clear the terminal and I'm going to
562:59 - install this package which is flask so
563:03 - in order to install the package you give
563:06 - this command pip install and the name of
563:09 - the package and then press enter and
563:12 - it's going to start downloading this
563:15 - package so now you can see this package
563:17 - is successfully installed on my system
563:19 - and you can see the version which is
563:22 - installed is flask
563:25 - 1.0.2 now in order to know more about a
563:28 - particular package we which you have
563:30 - already installed you can give this
563:33 - command so in order to know more about
563:36 - the package which you have already
563:38 - installed you give PIP show and the
563:41 - package name and when I give this
563:43 - command you can see the name of the
563:44 - package is flask the version which is
563:47 - installed is 1.0.2 and there is a brief
563:51 - summary of this package also which is
563:53 - available here and the home page for
563:56 - this project is also available here who
563:58 - is the author and all the other details
564:01 - about this package which you may find
564:03 - useful are given here using this command
564:06 - which is PIP show and the package name
564:09 - now after installing a package I am
564:11 - going to verify if this package is
564:14 - available using the python shell or not
564:17 - and once again I'm going to try to
564:19 - import this package which is flask and
564:22 - then press enter and you will be able to
564:25 - see now I don't see any error so if you
564:29 - don't see any error this means that this
564:32 - package is successfully installed and in
564:35 - future you will be able to import this
564:37 - package to use it on any of your python
564:40 - script which you create after installing
564:43 - this package so let me once again exit
564:45 - from the python shell and let me clear
564:49 - the command prompt once again now in
564:52 - order to list out all the packages which
564:54 - are installed on your system you can
564:55 - give this command which is PIP list
564:58 - which is going to print the list of all
565:00 - the packages which is already installed
565:02 - on your system now in order to uninstall
565:06 - any package you just need to give this
565:08 - commands pip and install and the name of
565:11 - the package for example I want to
565:13 - uninstall this package which we have
565:16 - installed which is flask and I'm going
565:18 - to press enter and you can see it says
565:20 - uninstalling flask and it will ask you
565:23 - whether you want to proceed or not so
565:25 - you just need to press Y in order to
565:27 - proceed and once you press y its going
565:30 - to just uninstall that package from your
565:34 - system and at the end you will see this
565:36 - message which says successfully
565:37 - uninstalled and the package name which
565:40 - you have uninstalled you can once again
565:43 - give this command pip list and now you
565:45 - can see flask is no more in the list of
565:48 - installed packages so this is how you
565:51 - can use Python pip in order to install
565:53 - and manage your python packages in the
565:57 - last video I have shown you how you can
565:58 - install and manage your packages using
566:02 - python pip now in this video I'm going
566:05 - to show you how you can install and
566:08 - manage your pip packages using pycharm
566:12 - IDE so here I have a very simple opencv
566:16 - python script which I use to load this
566:20 - image which is python logo.png file now
566:23 - in order to run this script I need to
566:26 - import this package which is called CV2
566:30 - and this package is available on python
566:34 - package index so let me just open the Pi
566:38 - Pi dot org website and let me search for
566:42 - opencv here and when I search for opencv
566:45 - you will be able to see multiple opencv
566:48 - related packages but the one I want to
566:51 - install is this one which is opencv
566:54 - hyphen python so I'm going to click on
566:57 - this package to see more details about
566:59 - this package so you can see the latest
567:01 - version of this package at the time of
567:04 - making this video is
567:07 - 3.4.3.18 and in order to install this
567:10 - package with Pip you just need to run
567:13 - this command which is PIP install opencv
567:16 - hyphen python now in order to import
567:19 - this opencv hyphen python on your
567:24 - pycharm IDE what you need to do is just
567:27 - create your project and write your code
567:31 - and then go to the file and then go to
567:35 - the settings so just choose the settings
567:37 - option here and once the settings option
567:41 - is open you will be able to see
567:43 - different categories here you need to
567:46 - choose this category which says project
567:48 - colon the name of your project and then
567:52 - click on Project interpreter Now by
567:56 - default some packages are already
567:58 - available here which is pip and setup
568:01 - tools and we want to install a special
568:05 - package which is opencv hyphen python so
568:09 - in order to add this package you just
568:11 - need to click on this plus button so I'm
568:15 - going to click on this plus button and
568:17 - you will be able to see this search bar
568:20 - here so here you just need to search for
568:23 - the package you are looking for so I
568:26 - have just entered opencv hyphen python
568:29 - here and the first option which is
568:32 - available here I have just selected it
568:35 - and you can see this is the same package
568:37 - which we have seen on the python package
568:41 - index website so let's match this once
568:44 - again so here you can see the latest
568:46 - version is
568:47 - 3.4.3.18 and here also the latest
568:50 - version is the same and the description
568:53 - is also same so wrapper package for
568:56 - opencv python bindings and here also the
568:59 - description is same so this is the
569:02 - package we want to install if you want
569:05 - to see the GitHub repository also I am
569:07 - going to just scroll here and then I'm
569:10 - going to open the GitHub page from the
569:12 - Pi Pi website for this opencv hyphen
569:15 - Python and this GitHub URL is also same
569:20 - which we are seeing on the pi charm IDE
569:24 - so now we know that we need to install
569:26 - this package which is opencv hyphen
569:29 - python so we just need to click on this
569:32 - button which says install package which
569:35 - is going to install this package for
569:38 - your project and after some time you
569:41 - will be able to see this message which
569:42 - says package opencv hyphen python
569:46 - installed successfully so I'm going to
569:48 - just close this window and after closing
569:51 - this window you will be able to see that
569:54 - this opencv is now visible in your
569:57 - project interpreter and now we are going
570:00 - to click once again OK and once you
570:03 - click OK you will be able to see here at
570:06 - the bottom some processes are running
570:08 - which is the process of importing this
570:12 - Library into your project and after some
570:14 - time you will see that this red squiggly
570:17 - line for the error has disappeared from
570:21 - the import CV line so now we will be
570:25 - able to run this code so let's run this
570:29 - code and let's verify if everything is
570:31 - working fine so I'm going to just right
570:33 - click and then click on run the project
570:36 - name on the file name and it has opened
570:39 - the picture which I want to open which
570:42 - is this python logo picture so this is
570:46 - how you can install and manage your pip
570:48 - packages using pycharm IDE in this video
570:52 - we will talk about global variables
570:55 - local variables and non-local variables
570:59 - so let's get started so to start with I
571:02 - have a very simple function which is
571:04 - func and here it has one print statement
571:08 - which is printing the value of x but you
571:12 - can see here X is not defined locally
571:15 - inside the function instead I have
571:18 - declared X outside the function and I am
571:22 - just assigning the value to X just
571:25 - before calling the function here so what
571:28 - do you think will happen so let us run
571:30 - the code and let's see what happens
571:32 - so because this x is declared globally
571:37 - and it's in the global scope so first of
571:41 - all your function will search for the
571:43 - value of x inside the function in the
571:45 - local scope and if it doesn't find the
571:49 - value X inside the local scope it is
571:52 - going to see outside the local scope in
571:55 - the global scope for the value of x and
571:58 - we have defined this value of x outside
572:01 - the function in the global scope so this
572:03 - print statement will take the value of x
572:05 - from the global scope and that's why
572:08 - it's printing Global using this print
572:11 - statement now let us modify this
572:13 - function little bit so I am going to
572:15 - define a local X inside the function and
572:19 - I am going to assign a new string to it
572:21 - so let us say this is a local value so I
572:24 - am going to assign the string to the X
572:28 - so now we have X variable inside the
572:31 - local scope of the function and also we
572:35 - have another X variable outside the
572:38 - function in the global scope so what do
572:41 - you think now will happen so let's run
572:43 - the code and let's see what happens so
572:45 - you can see here it's going to print
572:46 - local because the variable will take the
572:51 - local value or local value have more
572:54 - priority than the global value so
572:58 - whatever variable is declared nearer to
573:02 - the use of this variable that variable
573:06 - value will be used and that's why the
573:09 - local is printed because it's declared
573:11 - nearer to the use of this x which is
573:15 - inside the local scope of this function
573:18 - now let us print the value of x outside
573:22 - the function so in the global scope I
573:26 - want to print the value of x once again
573:28 - and let's run the code and let's see
573:30 - what happens so this local is printed
573:34 - using this print statement and the
573:36 - global is printed using the print
573:39 - statement which is outside the function
573:41 - so right now things are easy to
573:44 - understand when you declare this value X
573:47 - outside a function in the global scope
573:49 - and call the value of x using print then
573:53 - it's going to print the global and
573:56 - whenever you use the variable inside the
574:00 - function in the local scope it's going
574:02 - to print the local variable value which
574:05 - is local to the function so this means
574:09 - variable X which you have declared
574:11 - inside the function is the local
574:13 - variable and this variable X which you
574:17 - have declared outside the function is
574:20 - the global variable
574:22 - now let us make things little bit
574:24 - interesting and I want to just print the
574:27 - value of x before even assigning the
574:31 - value local to it so right now I want to
574:34 - do something like this so until this
574:37 - print statement I haven't declared the
574:39 - value of x locally so using this print
574:42 - statement the value of x is supposed to
574:45 - be taken from the global variable which
574:48 - is this variable and then once we have
574:51 - declared the value of x locally then
574:55 - this print statement is going to print
574:57 - the value of x using the local variable
575:01 - but when we run the code it's going to
575:03 - give us the error and it is going to say
575:06 - that this is Unbound local error which
575:10 - is local variable X referenced before
575:14 - the assignment so right now what we are
575:16 - trying to do is we are trying to mix the
575:19 - global and the local variables and
575:22 - python is not able to understand whether
575:25 - X is a local variable or X is a global
575:30 - variable so to solve this problem we
575:32 - need to State explicitly that this x
575:35 - which we want to call using this print
575:38 - statement is the global value right so X
575:44 - here we want to take from the global
575:46 - value so to state that we can use a
575:51 - keyword called Global and then the
575:54 - variable name so by writing this kind of
575:57 - expression we are telling python that X
576:00 - is declared globally outside the
576:04 - function and we want to take the value
576:07 - of x globally so using this statement we
576:10 - are just stating that use the value of x
576:13 - using the global scope now when we run
576:17 - the code it's going to run fine so now
576:20 - you can see it has printed global here
576:22 - so let me just change this print
576:25 - statement so we will be able to
576:26 - understand what is happening really here
576:30 - so I am going to just assign some number
576:33 - to the print statement let's say this is
576:36 - number one print statement and then this
576:39 - is number two print statement
576:43 - and this is number three print statement
576:47 - so we are going to know which value is
576:50 - printed using which print statement so I
576:53 - am going to run the code once again and
576:55 - now you can see first print statement
576:57 - which is this one is going to print
576:59 - Global because until here the value of x
577:03 - is taken from the global scope so it's
577:05 - going to print the value of x which is
577:08 - global which is defined here now you can
577:11 - see here we are reassigning the value of
577:14 - x and we are just saying that now we
577:18 - want to assign local to this x variable
577:21 - but still this variable is the global
577:25 - variable because we have explicitly
577:27 - stated here that take the value of x
577:30 - from the global variable So This Global
577:33 - variable value will be reassigned and
577:37 - now this Global variable value is local
577:40 - because we have reassigned the new value
577:43 - inside the global variable X and in the
577:47 - third print statement because we have
577:49 - already changed the value of x here now
577:52 - the new value of x will be local and it
577:56 - will be accessible from the global scope
577:59 - also so this also prints local so once
578:03 - again when you use this expression you
578:05 - are telling your local function that use
578:09 - the value of x from the global scope so
578:13 - now whenever you reassign some other
578:16 - value to X this is not the local
578:19 - declaration you are just reassigning the
578:22 - value to the global variable which is X
578:26 - here okay so once you have changed the
578:28 - value of x to local it will stay there
578:32 - that's why here also it has printed the
578:36 - value of x is equal to local now let us
578:39 - talk about the non local variables so
578:42 - non local variables behave almost
578:45 - similar to Global variables but they
578:48 - have some differences so let us say I
578:52 - will Define instead of saying that this
578:54 - is a global variable I am going to say
578:57 - that this is a non-local variable and
579:00 - when I run the code it's going to
579:01 - complain and this is going to say that
579:04 - this is a syntax error and no binding
579:07 - for non-local variable is found so non
579:12 - local variable bindings you can only do
579:15 - inside the nested function so generally
579:19 - you use non local variables inside the
579:22 - nested function you cannot use this non
579:25 - local keyword instead of the global
579:28 - keyword so let's see how we can use the
579:31 - non local variables inside the nested
579:34 - function so what I am going to do here
579:36 - is let us say I am going to define the
579:40 - value and let us say this time I want to
579:42 - to just use the value of x as numbers so
579:47 - here I am going to assign X is equal to
579:49 - 20 so this x is in the global scope and
579:53 - I'm assigning 20 to it and then I'm
579:55 - going to once again inside the function
579:57 - I am going to declare a local X and I am
580:01 - going to assign 50 to 8 and then I am
580:04 - going to Define one more function inside
580:07 - this function and I am going to name it
580:10 - as let's say in a function and let me
580:13 - just add the def keyword and then inside
580:17 - this inner function what I am going to
580:19 - do is I am going to define a non local
580:22 - variable once again X and then what I am
580:26 - going to do is I am going to reassign
580:28 - the value of x is equal to 100 so what I
580:32 - have done I have declared this X Global
580:35 - variable and assign 20 to it and inside
580:38 - the function also I have declared one
580:40 - local X variable and I have assigned the
580:43 - fifty to it and inside the inner
580:45 - function of this function I have defined
580:47 - a non local variable which is X and I
580:50 - have assigned the value 100 to 8. so now
580:53 - what we are going to do here is we are
580:55 - going to call this inner function inside
580:59 - our outer function which is the funk
581:03 - function okay so this is the inner
581:06 - function and we are calling this inner
581:08 - function inside this function which we
581:11 - have declared so now what do you think
581:13 - will happen so let us run the code and
581:15 - let's see what happens so this first
581:18 - print statement which is this one is
581:21 - going to print 50 because until now
581:24 - before calling the inner function the
581:28 - value of x will be taken from the local
581:31 - scope because we haven't stated here
581:34 - explicitly that X is a global variable
581:38 - so the value of x will be taken from the
581:41 - local scope right so we haven't written
581:44 - here that value of x is a global
581:47 - variable x value right so that is why
581:51 - the value of x will be taken from the
581:54 - local scope and that's why it's printing
581:57 - 50 here using the first print statement
582:00 - now here we have called the inner
582:04 - function that means the value of non
582:07 - local variable is assigned to 100 and
582:11 - once again we are calling the value of x
582:13 - so here inside the inner function we
582:16 - have defined the non local variable that
582:19 - means it is not a global variable so it
582:22 - is not changing the value of the global
582:25 - variable or its not using X from the
582:29 - global scope but this x will be taken
582:32 - from the local scope so this x will be
582:36 - overwritten by 100 values this is the
582:40 - new value we are assigning to our local
582:43 - variable which is X right so that is why
582:46 - its just giving us 100 using this print
582:50 - statement so this non-local keyword you
582:54 - generally Define inside the nested
582:57 - functions to state that we want to take
583:01 - the value of x from the local scope of
583:05 - the outer function not the global scope
583:08 - so this x is essentially this x which is
583:12 - defined inside this function and we are
583:15 - just reassigning the value of x to 100
583:18 - and that is why it is printing 100 here
583:21 - and also you can see this print
583:23 - statement which is printing the value of
583:26 - global X which is this one that's why
583:30 - it's printing 20 so because we are not
583:32 - using this Global X inside the functions
583:36 - because we have just used the local
583:38 - variable X inside the function and then
583:40 - we have reassigned the value of 100 to
583:43 - this local variable this X is not going
583:47 - to change and that is why it is printing
583:49 - 20 here now let's see what will happen
583:51 - when we change this keyword non-local to
583:55 - Global and once again I am going to run
583:58 - the code so now let's go to the function
584:00 - and here we have defined the local X
584:04 - which is different from the global scope
584:07 - so until here the value of x will be
584:11 - taken from the local scope so this print
584:14 - statement because we haven't called the
584:16 - inner function before this so the value
584:20 - of x will be taken from the local scope
584:23 - so here it is going to print 50. now
584:26 - after this print statement we are just
584:28 - calling the inner function and inside
584:30 - this inner function we are just saying
584:32 - that take the value of x from the global
584:36 - scope not the local scope so using this
584:40 - expression we are saying that they take
584:43 - the value of x from the global scope so
584:46 - this value will not be affected by this
584:50 - reassignment because now we are changing
584:54 - the value of the global X and not the
584:58 - local X so that's why when you call this
585:01 - print statement the value of x will be
585:04 - taken from the local scope so using this
585:07 - print statement when you call X it's
585:09 - going to take the local value of x
585:12 - because this inner function has no
585:15 - effect on this value of the local X and
585:20 - that's why it's printing 50 once again
585:23 - using this print statements so this x
585:26 - value will come from the local X and not
585:29 - from the global X and the last print
585:32 - statement is going to print 100 because
585:35 - this is the global X we are talking
585:38 - about and we have already changed the
585:41 - value of global X to 200 using this
585:45 - expression that's why it's printing 100
585:47 - here so there is a difference between
585:50 - non-local and the global variables if
585:54 - you write here non-local then here this
585:57 - value will be treated as the local
586:00 - variable so here we are changing the
586:03 - value of the local variable of x if you
586:08 - declare this as the global variable then
586:11 - we are changing this value which is in
586:13 - the global scope so this is how you can
586:16 - use Global variables local variables and
586:20 - non-local variables in Python I hope you
586:23 - have enjoyed this video I will see you
586:25 - in the next video