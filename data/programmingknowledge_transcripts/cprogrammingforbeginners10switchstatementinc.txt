00:00 - hello guys welcome to the next video on
00:02 - C programming for beginners and in this
00:05 - video I'm going to show you how you can
00:07 - use switch statement in C now in the
00:10 - last two videos I've been showing you
00:12 - how to use f Els conditions and multiple
00:15 - F El conditions in C and switch
00:19 - statements are also condition based
00:22 - statements but they are little uh
00:24 - different in a sense that uh you can use
00:30 - uh conditions with uh switch statement
00:34 - but conditions might must be constant
00:38 - conditions so let me give you an example
00:41 - and then you will understand how uh
00:44 - switch statement Works in C so first of
00:48 - all we will see how switch statements
00:52 - are declared in C okay so the basic
00:57 - syntax of switch statements is like this
01:00 - this okay so I will just delete this for
01:04 - now and so that you can you know see
01:09 - what is the basic uh switch statement uh
01:13 - code so switch statement start from this
01:17 - switch keyword and then comes these two
01:20 - brackets and in here comes the
01:23 - expression expression is something which
01:26 - you want to you know validate on the
01:29 - basis of some case right now inside
01:34 - these two curly braces comes some cases
01:39 - so case and then some constant
01:42 - expression I will give you an example uh
01:45 - this is just the syntax I want to show
01:48 - you
01:49 - so case and then comes some condition or
01:53 - constant expression right and then comes
01:57 - this colon and in side or down uh under
02:03 - this uh case comes the statement or the
02:07 - code which you want to execute here
02:10 - right now after this code is executed
02:14 - you break this switch statement with
02:18 - this break keyword so this is an
02:22 - optional uh
02:25 - keyword sometimes you don't need this
02:27 - break sometimes you need uh this break
02:29 - and I will tell you where exactly you
02:33 - need this break and where you don't need
02:35 - this break right in the same way you can
02:38 - have multiple cases inside your switch
02:42 - conditions and whenever you
02:46 - know whatever condition is not covered
02:50 - by your case is covered by this default
02:54 - so if none of the case is uh true this
02:59 - will be executed which is a default case
03:03 - so default case starts with this keyword
03:06 - default colum and then your case now
03:11 - let's see an example and then we will be
03:15 - able to understand it much better so for
03:19 - example uh we want to calculate the
03:22 - grade of a student and on the basis of
03:26 - grade we want to give some message or
03:29 - print some message for example
03:33 - int and let's say student scores some
03:37 - marks so I will name my variable as
03:41 - marks and on the basis of marks you want
03:45 - to decide if the student uh is excellent
03:50 - or whatever good or very good or he has
03:55 - scored poor grades Okay so so now we use
04:00 - switch
04:03 - statement switch and I told you then
04:07 - comes then an expression and this
04:10 - expression will be our Mark Mark
04:15 - because uh on the basis of this Mark we
04:19 - are going to
04:20 - evaluate uh some cases and on the basis
04:23 - of cases we will execute some code but
04:26 - first of all let's assign some value to
04:29 - mark for for
04:30 - example uh
04:32 - 90% of Mark or 80 or whatever you want
04:36 - to decide right now Mark is our
04:40 - expression which we will evaluate the
04:43 - value of Mark we will evaluate and then
04:46 - comes these two curly braces and inside
04:50 - these curly braces comes the case right
04:53 - case and then your uh mark value so
04:59 - different value of Mark we can evaluate
05:02 - right now Mark is equal to 90 but for
05:04 - example Mark can be 80 or 70 or 60 or
05:09 - whatever right so for example Mark is uh
05:14 - equal to
05:16 - 90 then we want to
05:19 - print
05:22 - print print F and we want to print this
05:26 - is an excellent grade right
05:35 - excellent okay and then the same
05:38 - semicolon and then we will
05:43 - break okay now comes the second case for
05:48 - example in in this case we want to
05:51 - evaluate Mark is equal to 80 right and
05:57 - let me give some indents here
06:03 - and when grade is 80 or for example 75
06:08 - we'll say that he has
06:12 - scored very good grade for example okay
06:16 - so we will
06:18 - print instead of excellent we will
06:22 - print very good okay in the similar way
06:28 - uh you can just add break
06:32 - here and break is nothing but a keyword
06:36 - which breaks uh this switch case and I
06:39 - will explain you what it does but let me
06:42 - add two more
06:44 - conditions and these two conditions will
06:48 - be first is uh 60% of marks and then we
06:53 - will say good the grades are good or we
06:59 - we will say 50% of Mark and or 40% of
07:05 - Mark and we will say grades
07:08 - are okay or poor or whatever this is
07:12 - just an example or
07:16 - otherwise we will say if the grades are
07:19 - not 90 or 75 or 60 or 40 that can be
07:24 - grade which uh is not covered by these
07:28 - cases then we will have the default
07:32 - case default and this case covers any
07:36 - value other than covered by these cases
07:40 - right so we will
07:47 - print
07:50 - grade
07:56 - un a available okay
08:00 - okay so let's uh you know run this
08:05 - program and let's see uh how it works
08:08 - okay so I will just compile and run this
08:11 - program and it says excellent right and
08:17 - that's what it must do
08:20 - because you see Mark is equal to 90 so
08:24 - it assigns uh Mark is equal to 90 right
08:29 - and then we are checking the value of 90
08:32 - using this switch statement and because
08:35 - Mark is 90 it goes to this case case
08:39 - where Mark is equal to 90 then it prints
08:43 - this message and what this break does is
08:46 - it if if the case is fulfilled then we
08:50 - want to break out of this switch
08:53 - statement and we won't don't want to
08:55 - execute any other uh statement other
08:58 - than or whatever is fulfilling our case
09:02 - right so it prints excellent and it
09:04 - breaks out of the switch statement and
09:08 - whenever your C program sees this break
09:10 - statement it jumps out of your switch
09:13 - case right at the end of the switch case
09:18 - okay now for example our marks are
09:24 - 75
09:26 - then let's see what's the answer or what
09:30 - what it prints it prints very good which
09:33 - is true right so in the case of 75 it
09:37 - Mark is equal to 75 and it s it uh
09:41 - search for the case for 75 it's if the
09:45 - case 75 is present it will print your uh
09:49 - value or it will execute whatever code
09:51 - you will write here and then it will see
09:54 - uh this break keyword and it jumps out
09:57 - of this switch statement but the
10:01 - important thing here is the case 90 is
10:05 - not executed because the code inside
10:08 - this case 90 is not executed because the
10:12 - case is not uh 90 marks Mark is 75 the
10:16 - value of Mark we are checking right so
10:19 - value of Mark is not 90 value of Mark is
10:22 - not 60 value of not Mark is not 40 but
10:25 - value of Mark right now is uh 75 that's
10:30 - why we have executed this code or C has
10:34 - executed this code but other codes are
10:38 - not executed okay so on the basis of
10:43 - these cases you can Define multiple
10:45 - cases and whatever case is fulfilled at
10:48 - a
10:49 - time that code will be executed or code
10:54 - inside that case will be executed
10:56 - otherwise code will not be exec executed
11:00 - okay now you may ask uh that this code
11:06 - can be 95 also and then also the student
11:10 - has scored uh excellent marks right so
11:15 - in order to do this for example for
11:18 - covering 95 grade or other grades for
11:23 - example like
11:24 - this and if the grade is 95
11:29 - still we want to print this uh excellent
11:33 - grade so what you do you just use case
11:38 - 95 and you
11:40 - don't execute any code inside this case
11:44 - and you don't give any break here so
11:47 - this means whenever you give a case
11:50 - without any code and without any break
11:53 - here it this means that this and
11:57 - this uh the conditions which are covered
12:02 - and if either of those conditions are
12:06 - fulfilled then this code will be
12:09 - executed okay so if the Mark is equal to
12:13 - 95 it sees here that case 95 and it
12:18 - jumps to the next case and it's uh
12:23 - because it's not breaking anywhere so it
12:26 - jumps to the next case right if there
12:29 - will be a break
12:32 - here this kind of break keyword and it
12:35 - jumps out out of your switch code but
12:38 - because we are not giving here this
12:41 - break it jumps to the next condition and
12:44 - executes the next statement which is
12:47 - print excellent so let's see what
12:49 - happens when grades are
12:52 - 95 and we will compile our code and it
12:55 - says excellent and this is what we were
12:58 - expecting
13:00 - because there is no break inside this
13:04 - case 95 so it jumps to the next case uh
13:09 - in the series of cases but in this same
13:14 - way you can provide same cases for for
13:18 - example
13:20 - 97 or even
13:23 - 85 you can do 85
13:27 - here
13:30 - 85 and all those four cases will covered
13:34 - or will be covered by this statement
13:39 - okay in a similar way whenever you want
13:42 - to have very good uh grade you can cover
13:48 - 70 or 75 also so 70 or 75 without giving
13:55 - this break keyword break keyword break
13:59 - your statement and go out of your
14:01 - statement okay for example grade is
14:05 - right now
14:07 - 75
14:09 - 75 and we will compile and run the
14:11 - program it says very good right so you
14:15 - can cover different cases and execute a
14:19 - same
14:20 - statement using or without using this
14:24 - break uh keyword okay so this is how you
14:29 - uh use switch cases in C programming I
14:32 - hope you have understood the basic
14:34 - concept of switch cases and I hope you
14:36 - have enjoyed this video please rate
14:38 - comment and subscribe and bye for now