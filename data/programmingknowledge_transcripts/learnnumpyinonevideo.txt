00:00 - hey guys welcome to the video on numai
00:02 - tutorial for beginners so first of all
00:05 - what is numai so numai is the
00:08 - fundamental package needed for
00:10 - scientific Computing with
00:13 - python it is a open-source Library which
00:16 - contains a powerful n dimensional array
00:19 - object which we will see in the later
00:22 - videos and it also contains basic linear
00:26 - algebra functions basic forer transform
00:29 - function s sophisticated random number
00:33 - capabilities and also this Library
00:35 - contains tools for integrating with the
00:39 - languages like C and C++ code now this
00:43 - Library also contains Advanced array
00:46 - slicing methods to select array elements
00:49 - and it also have several convenient
00:52 - array reshaping methods so in other
00:56 - words we can say that numai is a python
00:59 - library for array oriented Computing
01:04 - besides its obvious scientific uses
01:06 - numai can also be used as an efficient
01:11 - multi-dimensional container for generic
01:14 - data now as I said numai has a powerful
01:18 - n-dimensional array object this object
01:22 - is an N dimensional array of homogeneous
01:26 - data types with many operations being
01:29 - perf formed in compiled code for
01:32 - performance so this Library gives better
01:36 - performance when you use it with array
01:39 - oriented Computing now there are several
01:42 - important differences between numpy
01:45 - arrays and the python standard sequences
01:49 - like lists or tles which we are going to
01:52 - see in the next video also numpy arrays
01:56 - have a fixed size modifying the size
02:00 - means creating a new array in numpy
02:04 - additionally numpy arrays must be of the
02:07 - same data type but this can include
02:10 - python object also now the next question
02:13 - you may ask is numpy is suited for what
02:17 - kind of applications so numpy can be
02:20 - used for many applications including
02:23 - image processing signal processing
02:26 - linear algebra and multiple other
02:30 - functionality is included in numai so it
02:34 - can be used for several other
02:36 - functionalities so it is also said that
02:39 - numai is the foundation of the Python
02:43 - scientific stake now you may also ask
02:46 - why do we need numpy so we already have
02:51 - sequences in Python such as lists or
02:54 - tles or many other sequences to handle
02:58 - data with with the standard python
03:01 - Library so why do we actually need numpy
03:05 - so the answer is python does numerical
03:08 - computation slowly in comparison to
03:11 - numai so whenever you want to do metrix
03:16 - computation for example you have a
03:19 - matrix of th000 cross th000 and you want
03:23 - to multiply this Matrix then python
03:28 - Triple Loop takes more than 10 minutes
03:31 - in comparison to numai which only takes
03:35 - around 0.3 seconds so whenever you want
03:39 - to do Matrix computation or n
03:41 - dimensional array computation numai
03:45 - library is more efficient than even the
03:49 - python standard library and that's why
03:52 - it is used so this was a brief
03:55 - introduction about numai now how can we
03:58 - install nump I on our Windows operating
04:03 - system or Mac operating system or Linux
04:06 - operating system so right now I'm
04:08 - working on a Windows operating system
04:11 - but the procedure for installing numpy
04:13 - will be the same for Mac or Linux
04:17 - operating system so the basic thing
04:20 - which you need to install numpy library
04:23 - is PIP so if you have Pip then you will
04:27 - be able to easily install called numpy
04:31 - now on Windows whenever you have
04:33 - installed python on your Windows
04:36 - operating system pip was already
04:38 - installed on your Windows operating
04:40 - system with the installation of python
04:43 - on other operating systems like mac and
04:46 - Linux you can install pip and then
04:49 - install numpy using pip now those of you
04:53 - who don't know what is pip pip is a
04:56 - package management system which is used
04:59 - to install and manage software packages
05:03 - written in Python so let's install numpy
05:06 - using pip so I'm going to give this
05:09 - command pip and then install and then
05:13 - whatever package you want to install so
05:15 - for example I want to install numpy so I
05:17 - will write numpy here so pip install
05:19 - numpy and then press enter which is
05:22 - going to install numai on my Windows
05:26 - operating system so now you can see the
05:28 - process of installing of numpy library
05:31 - is started by pip so you can see now
05:35 - numpy is installed on my Windows
05:37 - operating system so now I can uh just go
05:41 - into the python interpreter so I will
05:44 - just write Python and then press enter
05:47 - which will allow me to use the numpy
05:50 - library so I'm going to just write
05:54 - import numai as NP and then press enter
06:00 - which is going to give me no error if
06:04 - you give this command on your python
06:07 - interpreter without installing numpy
06:10 - this import is going to give you some
06:13 - kind of error now let me give you a very
06:17 - basic example of converting a normal
06:21 - list into a numy array so let me just uh
06:27 - create a normal list I'm going to name
06:30 - it as n list which stands for normal
06:34 - list and then I'm going to assign some
06:37 - value to this list so let's add some
06:40 - values here let's say 1 2 3 4 five and
06:46 - six so there are six elements inside our
06:50 - list and then I'm going to press enter
06:53 - now in order to convert this list into
06:56 - the numpy array I'm going to just just
06:59 - create one more variable I'm going to
07:03 - say it is a
07:04 - NP array and then I'm going to convert
07:09 - this list into an array so I'm going to
07:12 - use this NP keyword dot array and then
07:18 - as an argument I'm going to pass my list
07:22 - into this array function so n list is
07:26 - the name of the list and then press
07:29 - enter And now when I see the content of
07:33 - an array it's going to give me the numpy
07:38 - array now I can also use print method in
07:42 - order to print the content of NP array
07:46 - so let's do that and you can see it's
07:49 - going to print the content of numpy
07:52 - array now one thing to notice here is
07:56 - that these elements inside this array
08:00 - does not contain comma between these
08:04 - elements because it's a special array
08:08 - which is called ND array and numpy's
08:11 - Main object is the homogeneous
08:14 - multi-dimensional array called ND array
08:17 - and this is that kind of array so this
08:21 - was the very basic example of numai now
08:24 - if you have installed Anaconda package
08:28 - on your windows operating system or Mac
08:30 - operating system or Linux operating
08:32 - system you don't need pip to install
08:35 - numpy you can directly import numai
08:39 - inside your Jupiter notebook or spider
08:43 - IDE and start using it now if you want
08:46 - to use numpy on py charm let me show you
08:51 - how to use numpy on your py charm IDE so
08:56 - this is the py charm IDE and here I have
08:59 - created a blank project which is called
09:02 - numpy samples now in order to add numpy
09:06 - to your project what you need to do is
09:09 - you need to just click on this file
09:11 - option on your pycharm IDE and then you
09:14 - just need to go to the settings and once
09:17 - the settings window opens what you need
09:20 - to do is you need to go to the project
09:24 - colon whatever is the name of your
09:27 - project so go under project
09:29 - and whatever is the name of your project
09:33 - and then click on Project interpreter so
09:36 - I have already clicked on this project
09:39 - interpreter and here you can uh see pip
09:42 - is there and setup tools is there so
09:45 - here on the right hand side you will see
09:48 - this plus symbol so you just need to
09:50 - click on this plus symbol and once you
09:53 - click on this plus symbol just search
09:56 - for numai here so I'm going to search
09:58 - for numpy and then you will be able to
10:01 - see this numpy here and the version
10:05 - which will be installed on your py Cham
10:09 - IDE so on the right hand side you will
10:11 - see the description about numai and
10:15 - whatever version which will be installed
10:17 - so at the time of making this video
10:20 - 1.16.0 will be available for py charm so
10:24 - I'm going to just click on install
10:26 - package which is going to install the
10:28 - numpy package for this project on your
10:32 - py charm IDE and once you see this green
10:35 - bar here which says package numpy
10:38 - installed successfully you can close
10:40 - this window and then click okay here and
10:44 - now you can uh create a python file so
10:46 - let me create a very simple python file
10:51 - and inside this python file what I'm
10:53 - going to do is I'm going to just write
10:55 - import napai as NP and then let's create
11:00 - a list so I'm going to name my list as L
11:04 - is equal to let's add just uh two
11:07 - elements 1 comma 2 here and then in
11:10 - order to convert this list into a numpy
11:14 - list we just need to use
11:18 - np. array and then pass our list to this
11:22 - array function and then you will be able
11:24 - to print the content of NP array using
11:28 - the
11:29 - print function so I'm going to just
11:31 - write n p list inside the print function
11:35 - and let's run this uh script by just
11:38 - right clicking and just selecting the
11:41 - Run whatever file name you have and you
11:44 - will be able to see the output here in
11:47 - the terminal below so this is how you
11:50 - can install numpy on your py charm ID so
11:53 - you can use pyam IDE or anaconda
11:56 - distribution or even you can use your
12:00 - plain terminal in order to develop your
12:04 - numpy script now to go ahead I will be
12:08 - using the py charm IDE but you are free
12:11 - to use any other IDE or the editor so in
12:15 - the py charm IDE what I'm going to do
12:17 - first is I'm going to just open the
12:20 - python console by clicking on this
12:22 - symbol which says python console and I'm
12:24 - going to maximize this console because
12:27 - we will be using this python console for
12:31 - this lesson so we have already added the
12:34 - numpy library to our project and we can
12:37 - import the numpy library to the python
12:40 - console also so I'm going to just write
12:42 - uh import numpy as NP and then what we
12:48 - are going to do in this video is we are
12:50 - going to try to compare the python list
12:53 - to the numpy array and we will see the
12:56 - similarities or the difference between
12:58 - the numpy array and the python list so
13:01 - to start with I'm going to declare a
13:04 - python list and let's assign some values
13:08 - to the list let's say 1 2 3 and I'm
13:11 - going to declare the numpy array and I'm
13:13 - going to name it as Na and we are going
13:17 - to just say np. array and we will pass
13:21 - the list content to the array function
13:25 - so we have numpy array and the python
13:29 - list and they contain same number of
13:33 - elements now what is the basic operation
13:35 - we perform with the list or an array we
13:38 - iterate over the list and the array so
13:42 - we are going to iterate over the list
13:45 - first of all so for I in L and we are
13:49 - going to print the value of I and let's
13:52 - see what happens when we iterate over
13:55 - the list so result is expected it's
13:58 - going to print the content of the list
14:01 - and same we will do with our numpy array
14:05 - which is to iterate over this uh array
14:09 - and the result is same as the list so we
14:13 - can iterate over the numpy array or the
14:16 - python list using a fall Loop so at this
14:19 - point these two things look similar now
14:23 - let's try to add some elements to the
14:26 - list and the numpy array so first of all
14:30 - in order to add something to the list
14:33 - let's say I'm going to declare the
14:35 - variable L1 and I'm going to add
14:39 - something to the list and this we can do
14:42 - with the concatenation operator so let's
14:46 - say we want to add four to our list and
14:50 - then transfer the result into L1 and
14:53 - when we see the content of L1 you will
14:56 - be able to see that 4 is is added or
14:59 - appended to the list now there is one
15:02 - more way in which you can append an
15:04 - element to the list and that is by using
15:08 - the append function so let's say I want
15:11 - to append five to this list L1 I can do
15:15 - that and see the content of the list so
15:18 - now our list contains 1 2 3 4 five so
15:21 - five elements let's try to do the same
15:25 - with the numpy array so I'm going to
15:28 - just use the
15:31 - na1 and then I'm going to try to
15:35 - concatenate the na a with some elements
15:39 - so let's try to add four to the numai
15:42 - array and I'm going to just see the
15:44 - content of any1 and you can see this is
15:47 - not the expected result so in case of
15:50 - numpy array when we use this plus
15:53 - operator it will do the vector addition
15:57 - so basically what we are doing is we are
15:59 - adding four to each and every element of
16:03 - the array so as we already know that the
16:05 - content of the numai array was 1 2 3 and
16:08 - when we add four to each element it
16:11 - becomes five 6 and 7 and that is the
16:15 - result you are seeing here so in this
16:17 - way nump array and list behave little
16:20 - bit differently now let's try to use the
16:23 - upend method on the numpy array so I'm
16:26 - going to just write na Dot
16:29 - append and we will try to append uh
16:32 - let's say eight to our list and then
16:34 - press enter and it's going to give us
16:36 - error because this upend method is not
16:40 - even there inside the numpy array so at
16:44 - this point it looks like that uh lists
16:47 - are winning over the numai array but as
16:51 - soon as we try to do the vector addition
16:54 - or
16:55 - Matrix operations we will see see the
16:58 - differences between the numai array and
17:01 - the python list so as I told you in the
17:04 - last video that generally we use numai
17:09 - to do operation on the nend dimensional
17:12 - array so for example if you want to do
17:15 - the vector addition of the let's say
17:17 - numpy array to itself what we can do
17:20 - here is I'm going to declare one more
17:22 - variable na A2 and then we can do na a
17:27 - plus n a and it's going to give us the
17:31 - vector addition of these two arrays so
17:33 - I'm going to just see the content of na2
17:37 - and you can see it has given us the
17:39 - vector addition of na+ Na which is 1 + 1
17:43 - is equal 2 2 + 2 is equal 4 and 3 + 3 is
17:47 - = 6 now in case of list as you have
17:51 - already seen that when we perform the
17:54 - concatenation operator it's going to
17:57 - just append to itself so let's try to do
18:01 - that also so I'm going to declare the L2
18:04 - variable and I'm going to just do the
18:07 - concatenation of l+ L and when we try to
18:11 - see the content of L2 it's just the
18:14 - appending of those two lists but it's
18:17 - not the vector addition so if you want
18:19 - to perform the vector addition on the
18:22 - list what we can do is we can uh just
18:24 - Define uh L3 variable and we we will
18:28 - assign the empty list here and then we
18:31 - will iterate over the list using the for
18:34 - Loop so for I in L and then we are going
18:39 - to just say L3 do append and we are
18:43 - going to append I + I which is this uh
18:48 - variable to the list three or L3
18:52 - variable and then when we see the
18:54 - content of L3 you will see the expected
18:58 - result which is 2 46 which is the vector
19:01 - addition of L + L now let's try to uh
19:05 - multiply a scalar with the vector so we
19:09 - have a numpy array and I will just
19:12 - multiply it by two so I'm going to just
19:15 - write uh two ASX Na and then press enter
19:20 - and I can see the error because na
19:22 - should be in capital so once again I'm
19:24 - going to just write 2 multiplied by NA
19:27 - and then press enter and it's going to
19:29 - give us the multiplication of Scala
19:32 - which is two with the vector which is
19:35 - numi array the similar operation when we
19:38 - perform on the list let's try to do that
19:40 - so 2 multiplied by L and then press
19:44 - enter you can see the result is the
19:47 - repetion of L multiplied by whatever
19:50 - scalar you write here so L is just uh
19:54 - repeated two times in case of
19:56 - multiplication so so in case you want to
19:59 - do the scalar multiplication with the
20:02 - vector once again you need to iterate
20:05 - over the list and you need to multiply
20:08 - each and every element of the list by
20:10 - two as we have done with the vector
20:13 - addition let's try something else so
20:16 - let's say we want to find out the power
20:19 - of something so I'm going to just say na
20:23 - a and then we already know that when we
20:26 - use double Ed STS it means na to the
20:28 - power whatever we write here so na to
20:31 - the^ two and what we get here is the
20:35 - squared result of every element so 1 4 9
20:40 - here and when we do the same thing with
20:43 - the list it's going to give us some
20:46 - errors so let's see what error we get
20:49 - and you can see this operation is not
20:51 - supported so we cannot perform this kind
20:54 - of power operation on our list so if you
20:57 - want to perform this power operation on
20:59 - the list you need to use the for Loop
21:03 - once again and in that way numpy arrays
21:07 - are little bit uh easier to use and you
21:10 - just need to use the operation whatever
21:13 - you want to perform and this operation
21:16 - will be performed on each and every
21:18 - element of the list now you can imagine
21:22 - if you want to perform the similar
21:24 - operation vector addition or addition of
21:27 - scale and the vector or the power
21:30 - operation to each and every element of
21:33 - uh Matrix which is a two-dimensional
21:36 - array then how difficult it will be to
21:40 - perform on a list and how easy it is to
21:43 - perform on a numpy array so if you want
21:48 - to square each and every element of the
21:50 - list you can just write for I in L and
21:54 - then what you can do is you can uh just
21:57 - uh Square each and every element of the
21:59 - list so I'm going to just write print
22:02 - here and then I'm going to just say I
22:06 - multiplied by I and it's going to give
22:09 - us the square result of each and every
22:12 - element of the list which is 1 149 and
22:15 - you can uh just uh append this result to
22:19 - a new list which will give you the uh
22:22 - similar result as we have seen in the
22:24 - case of numpy array now let's say you
22:27 - want to perform from the square root on
22:29 - each and every element you can use uh
22:32 - sqrt function and then pass your nipai
22:37 - array variable to it and it's going to
22:39 - give you the square root of each and
22:41 - every element you can also find out the
22:45 - log of each and every element so you can
22:47 - uh just say log and then pass the numpy
22:50 - array here and you will uh find out the
22:53 - log of each and every element you can
22:56 - even find the exponential of each and
22:58 - every element using the EXP function and
23:03 - then passing the nump array to it and
23:06 - you can see it has given us the
23:08 - exponential of each and every element so
23:10 - here we have seen some similarities and
23:13 - some differences between the python
23:16 - lists and numpy arrays but this doesn't
23:19 - mean that numpy array are better or
23:23 - python list are not better both have
23:27 - their importance
23:28 - sometimes you need python list and other
23:31 - times you need numpy arrays usually you
23:34 - can tweet a python list as an array but
23:38 - you can treat NPI array as a vector that
23:41 - means you can perform the vector
23:44 - operation on the numpy array and as we
23:47 - have already seen to do operations on
23:50 - every element of the list we need to use
23:53 - the for Loop and in case of numpy array
23:57 - we can do it in much easier way Loops
24:00 - are slower than numpy array operations
24:04 - that's why also we use napai arrays so
24:08 - at the end I will just say that if you
24:10 - want to perform these kind of
24:11 - mathematical operations on a list or an
24:16 - array numpy is not just more efficient
24:19 - it is more convenient to use because you
24:22 - get a lot of uh vector and metrix
24:25 - operations for fee which sometimes
24:27 - allows us to avoid unnecessary work
24:30 - which is required in the case of python
24:32 - list in this video we will see some of
24:34 - the basic operations which are related
24:37 - to numpy arrays so let's get started I
24:39 - have already imported numpy into this
24:43 - python console and now I'm going to
24:45 - create few numpy arrays so first of all
24:49 - let's create the first numai array and
24:54 - this array will be the one-dimensional
24:56 - array and this will contain three
24:58 - elements 1 2 3 pretty simple we are
25:02 - going to create the second numpy array
25:05 - and this time this array is going to
25:06 - take two Dimensions so first of all
25:10 - inside the square bracket I'm going to
25:12 - add one more square bracket and here I'm
25:15 - going to just write 1 comma
25:24 - 2 now as we have talked in the last
25:27 - video
25:28 - that numpy array is somewhat similar to
25:33 - uh python list in terms of iterating
25:36 - over them so this means they have some
25:39 - index so we can uh just uh fetch an
25:43 - element of an array using its index so
25:47 - let's say I want to get the first
25:51 - element which is one from the array a
25:55 - then I can just write uh a a square
25:58 - braet 0 which will give me the element
26:01 - at zero index so working with this
26:04 - onedimensional array is simple we can
26:07 - just give the index here and it will
26:09 - give you the element related to it but
26:12 - when it comes to two dimensional array
26:16 - what we can do so similar to the list
26:19 - when we uh just want to fetch the zeroth
26:23 - element of the list it's going to give
26:25 - us this result which is the first
26:29 - element of the array which is this list
26:33 - 1 comma 2 now let's say you want to get
26:35 - this element which is one which is at uh
26:38 - first row and First Column then what you
26:41 - can do here is you can add one more
26:43 - index which means we want to get the
26:46 - element at the first row and First
26:49 - Column and it's going to give us uh one
26:52 - similarly you can uh give any other
26:55 - index and it's going to give you the
26:57 - element related to it and you need to
26:59 - notice one thing here is because the
27:01 - index starts from zero so when we uh
27:04 - give 1 comma 1 here it's going to give
27:07 - us four now there is a function called
27:10 - Matrix also in uh the numai which we can
27:14 - use instead of array which is going to
27:17 - give us the multi-dimensional array so
27:20 - I'm going to just uh show you how you
27:23 - can create the Matrix uh using numpy so
27:27 - you can just write uh NP do Matrix and
27:32 - here you can give the same type of
27:35 - elements let's uh just copy this uh
27:39 - array and then paste it here and when I
27:43 - print the content of M it's going to
27:46 - give us the same result as we get in the
27:51 - case of array now in the numpy
27:53 - documentation it is recommended that we
27:55 - use uh arrays is so we will not bother
27:59 - much about the Matrix but I just wanted
28:02 - to show you that there is a method
28:05 - called Matrix which you can use to
28:08 - create Matrix or multi-dimensional array
28:12 - now there is one more notation which you
28:14 - can use to get the similar kind of
28:17 - result for getting some value of some
28:21 - position and this time what I'm going to
28:23 - do is I'm going to use B and then let's
28:25 - say I want to get the element at zero
28:30 - Index right so I'm going to just write 0
28:32 - comma 0 and notice here I have used two
28:36 - square brackets but there is a shorter
28:39 - notation which is 0 comma 0 which
28:42 - appears more like Matrix operation so
28:45 - when I do this it's going to give me one
28:47 - which is the same result as we have seen
28:50 - here in the case of indexes similarly
28:53 - when I do
28:56 - B1 comma one it's going to give us the
28:59 - result four now as I said numpy array
29:02 - behaves similar to The numpy Matrix that
29:05 - means we can perform the Matrix
29:08 - operations on the numpy array also so
29:11 - what I'm going to do is I'm going to
29:13 - just say B do T which is going to give
29:17 - us the transpose of this Matrix so let's
29:22 - print out the content of uh the numpy
29:25 - array B also so the original content of
29:29 - the napai array B was this one and after
29:32 - transposing the result is this one now
29:36 - there is a property called shape which
29:38 - we can use to get the dimension of the
29:40 - numpy array so let's say I'm going to
29:44 - just write B dot shape here and then
29:48 - press enter and it's going to give us
29:51 - this result which is 3 comma 2 so this
29:56 - array is having three rows and two
30:00 - columns one row two row and three row
30:05 - and number of column is 1 and two now
30:08 - let's say we want to transfer the
30:10 - transpose of B into a new variable so
30:13 - I'm going to just write uh B Dot and
30:16 - assign it to C and now we want to see
30:19 - the shape of uh this C numai array it's
30:24 - going to give us this result which is
30:26 - two comma 3 which means that now C array
30:32 - contains two rows and three columns now
30:35 - when I have created these two arrays A
30:38 - and B I told that a is the
30:41 - onedimensional array and B is
30:44 - two-dimensional array and there is a
30:47 - property also to verify this and it's
30:49 - going to give us the dimension number of
30:53 - a particular ND array and this property
30:56 - is called n andm so I'm going to just
30:59 - use B do NM and then press uh enter and
31:04 - it says that Dimension number of B is
31:08 - two which means it's a two-dimensional
31:10 - array and when I do the same operation
31:14 - with
31:15 - the array one then it's going to give us
31:19 - one which means that this a array have
31:24 - the dimension number of one which is
31:25 - onedimensional array now there is a
31:28 - property called size so I'm going to
31:30 - just write B do size and this property
31:33 - size is going to give us the number of
31:35 - all the element present in the array so
31:38 - this array B contains six element 1 2 3
31:42 - 4 5 6 that's why it gives us result six
31:46 - similar operation when we do on the
31:50 - array a then it's going to give us three
31:53 - because it only contains three elements
31:56 - total now there is one more property
31:59 - which is called D type is going to give
32:01 - us the data type of an array so I'm
32:04 - going to just write a. D type and it's
32:08 - going to give us D type is equal to int
32:12 - 32 also in the case of B it's going to
32:17 - give us int 32 so let's uh print out D
32:21 - type of the array B and it's going to
32:24 - also give us in32 that means means each
32:28 - and every element of this array is of
32:32 - data type integer now in order to create
32:36 - the array with the floating values what
32:39 - we can do here is so I'm going to just
32:41 - declare one more variable D and then I'm
32:44 - going to create one more array and this
32:47 - time I want to create the array with the
32:51 - floating values so what you can do here
32:54 - is as you may expect that you can can
32:57 - provide the floating values here
33:00 - 1.2 and then I'm going to press enter
33:03 - and when I just want to know the data
33:07 - type of uh this D it's going to give us
33:11 - this result which is float 64 or there
33:14 - is one more way of creating an array
33:17 - with floating points which is np. array
33:22 - and then what you can do is let's say we
33:25 - just provide uh one and two here and you
33:28 - want to convert the array of integer
33:32 - into the array of floats then what you
33:35 - can do here is you can provide comma and
33:38 - provide one more argument which is the
33:41 - type and then provide the value of it so
33:45 - NP do float 64 and then press enter and
33:52 - once you uh see the content of this r e
33:56 - it's going to give us this kind of
33:58 - notation one point 2 point and this
34:01 - means the array contains float 64 values
34:05 - so this we can confirm from the data
34:08 - type of e and you can see it contains uh
34:12 - elements of uh type float 64 now there
34:16 - is one more property of the numai array
34:19 - which we can use here is item size so
34:23 - this is a property and it's going to
34:26 - give us the size of each and every
34:29 - element of this array so because this
34:32 - array B contains integers and we all
34:36 - know that integer takes four bytes and
34:40 - that's what it's showing here in case an
34:43 - array contains floating value let's say
34:45 - uh this e which contains floating values
34:48 - let's see the item size of uh this r e
34:53 - it's going to give us uh the result 8
34:56 - which means that the size of each
34:58 - element in the array in bite is 8 now
35:02 - there are some basic function available
35:04 - for the numpy array so let me uh print
35:07 - out the content of B once again so this
35:10 - is our B numpy array and let's say we
35:14 - want to find out the minimum of all the
35:17 - elements present inside this array so we
35:20 - can use this method a. Min which is
35:24 - going to give us the minimum value and
35:26 - to get the maximum value you can uh just
35:28 - write a do Max function and it's going
35:31 - to give us the maximum of the array a
35:35 - now similarly we can find the minimum of
35:39 - uh the array B also so Min function
35:43 - which is going to give us the minimum
35:44 - value present inside the array B and to
35:48 - get the maximum value you can uh just
35:50 - write B do Max and it's going to give us
35:53 - the maximum value present inside this
35:56 - array AR which is six which is this one
35:59 - if you want to get the sum of elements
36:01 - you can use uh the sum function so a do
36:04 - sum which is going to give us the sum of
36:07 - the array A and B do sum which is going
36:11 - to give us the sum of the array B now
36:15 - let's say you want to find out the sum
36:17 - of a particular XIs so when you see
36:19 - vertically this is the AIS zero and when
36:23 - you see the array horizontally this is
36:26 - the is 1 so let's say we want to find
36:29 - out the sum of the Matrix B and we want
36:33 - to find out the sum of AIS 0 so I'm
36:36 - going to just write AIS is equal to 0
36:41 - here and then press enter and you can
36:43 - see it gives us 9 and 12 so from where
36:47 - does this 9 and 12 come from 1 + 3 is =
36:51 - 4 and 4 + 5 is = 9 so this is the sum of
36:56 - of these three elements and similarly 12
37:01 - is the sum of these three elements and
37:03 - because we have said that we want the
37:05 - sum of x's is equal to zero which is the
37:08 - vertical sum of the array elements now
37:12 - in case when I write here x is is equal
37:16 - to 1 it's going to give us this result
37:20 - which is the sum in horizontal way which
37:23 - is called the XIs 1 so 1 + 2 is is = 3 3
37:28 - + 4 is = 7 and 5 + 6 is = 11 so this is
37:33 - called the XIs one and when you see
37:36 - vertically it's called the AIS zero so
37:39 - these are some of the basic properties
37:41 - and methods related to numpy arrays in
37:45 - this video I'm going to show you how you
37:47 - can uh use numpy to create some specific
37:52 - array and also we will see how we can
37:55 - reshape our numpy array and some of the
37:58 - properties related to shaping your
38:02 - arrays so first of all let me show you
38:04 - the first method and this method is np.
38:09 - zeros and if you have guessed correctly
38:12 - this method we use to initialize a
38:16 - specific array with some Dimension so we
38:18 - are going to give some Dimension here as
38:20 - an argument so let's say 2x3 and this is
38:24 - going to give us an array of specific
38:27 - Dimension and all the values inside this
38:32 - uh array are zeros so all the values or
38:35 - Elements which this array contains are
38:38 - all zeros there is one more method which
38:42 - is called NP do ones and here you can
38:46 - give the same type of argument let's say
38:48 - 3x 2 and it this is going to give you an
38:53 - array all initialized with the value one
38:56 - so you can see all the values here are
39:00 - one now if you want to initialize the
39:03 - value with some data type you can also
39:06 - use let's say np. ons and you can
39:10 - provide an extra argument here which is
39:13 - called D type is equal to so just write
39:16 - D type is equal to and whatever data
39:20 - type you want to give here you can
39:21 - provide here so let's say NP do in
39:27 - 16 and this dtype argument is going to
39:29 - make sure that this one is of this data
39:34 - type now there is one more method which
39:37 - is called np. Mt so this method you can
39:41 - use to provide some shape let's give 3x3
39:47 - and this empty method is used to create
39:51 - uninitialized data so the content is
39:54 - undefined and once again I'm going to
39:56 - going to give the same command it's
39:58 - going to give us the array of these
40:00 - dimensions and here also you can provide
40:02 - the dtype let me give the list here you
40:05 - can also give the list instead of uh
40:08 - this Tuple and then as an extra argument
40:11 - you can provide the D type is equal to
40:15 - np. int 16 and then press enter and you
40:19 - can see now it's going to initialize
40:22 - these values with the random integers
40:26 - once again when you give the list
40:27 - without this argument dtype and I'm
40:31 - going to just provide some Dimensions
40:33 - here in the form of uh list it's going
40:36 - to once again give us uh this Dimension
40:39 - with all ones but always remember that
40:42 - empty unlike zero does not set the array
40:45 - values to zero and this means that this
40:48 - may therefore be marginally faster now
40:51 - the next method I want to show here is
40:54 - the a range method to create create an
40:56 - array of particular range so here you
41:00 - can provide some range let's say we want
41:02 - to provide the range from 1 to 5 and
41:07 - then press enter now this a range acts
41:10 - similar to the range method in Python so
41:15 - it's going to create this array but it's
41:18 - going to exclude this five this is the
41:21 - property of range also you can also
41:23 - provide the interval in which you want
41:26 - to see this array so you can uh just say
41:30 - I want to see this array in the interval
41:32 - of 0.5 then you will get the array in
41:35 - the interval of 05 or in the steps of
41:39 - 0.5 now there is one more method which
41:41 - is called np. Lin space and this method
41:46 - is used to create an array by specifying
41:49 - the range and the number of elements so
41:52 - first of all we are going to provide the
41:54 - range so once again I'm going to to
41:56 - provide the range between 1 to 5 and
42:00 - then press enter so you can see in the
42:02 - result it Returns the evenly spaced
42:06 - number over the specified interval and
42:09 - in our case this interval is 1 125 and
42:13 - we got 50 values which are evenly spaced
42:17 - values you can also provide an extra
42:20 - argument in this function and this is
42:23 - the number of samples you want to
42:25 - generate the default sample is 5050 as
42:27 - you have seen here this is the default
42:30 - sample so if you don't provide any
42:33 - number here it will generate the evenly
42:36 - spaced array of sample 50 but if you
42:40 - want to provide your specific number
42:43 - let's say we want to just generate an
42:45 - array of 10 values then we can uh
42:48 - provide this third parameter here and
42:51 - now you will just get the array of 10
42:56 - evenly spaced values once again if you
42:59 - provide here five it's going to give you
43:02 - only five evenly spaced value which is 1
43:05 - 2 3 4 5 if you want to create an array
43:08 - of random numbers you can use np.
43:11 - random. random and provide your
43:14 - Dimensions here and what you will get in
43:16 - return is an array of random numbers
43:19 - which are in between zero and one now
43:22 - let me show you how you can reshape an
43:25 - array so I'm going to create an array of
43:28 - uh zeros so let me just assign this
43:31 - result to a variable let's say this is C
43:34 - variable so first of all let's see the
43:36 - content of uh this array C and now I
43:40 - want to reshape this array so there is a
43:44 - method called r. reshape which you can
43:48 - use to change the dimension of this
43:51 - array so earlier this array was of
43:55 - Dimension 2X three and now I want to
43:57 - change the dimension to 3x 2 let's say
44:01 - so now once you do this the array
44:05 - Dimension will be changed to 3x two
44:09 - which means three rows and two columns
44:12 - you can also change it to let's say 6 by
44:15 - 1 so I'm going to just say 6 by 1 and
44:19 - this is going to give you an array of
44:21 - 6x1 but you need to make sure that all
44:26 - all these reshaping Dimension confirms
44:29 - to the original Dimension so for example
44:32 - you just give a dimension which is not
44:36 - confirmed by the original array let's
44:39 - say seven here and you will get this
44:42 - error which says cannot reshape array of
44:44 - size six into the shape 7 7 by 1 let me
44:49 - give you one more example so this time
44:51 - I'm going to create a new variable D and
44:54 - this time I'm going to use uh On's
44:56 - method so this is On's method and I want
45:00 - to create an array of let's say 1X 9 and
45:06 - then press enter which is going to give
45:08 - me an array of 1x 9 and all the values
45:12 - here are ones now when I use a reshape
45:15 - method on this uh D array so let's use
45:18 - this reshape method and let's give the
45:20 - dimension let's say I want to give here
45:22 - the dimension of 3x -1
45:26 - and then press enter you will see this
45:29 - array will be reshaped to 3x3 array so
45:34 - why this is happening so because we have
45:37 - provided the second parameter as minus1
45:41 - which means that it will be determined
45:44 - based on the actual condition
45:46 - automatically so this array was
45:48 - containing nine element and this means
45:52 - that your Matrix will be resized to 3x3
45:56 - Matrix so now you can see when you see
46:00 - the content inside D you can see the
46:02 - original array never changes you cannot
46:06 - change the size or shape of the original
46:10 - array you can just reshape it and then
46:13 - assign it to a new variable so when you
46:16 - do this I'm going to just reshape it and
46:18 - then assign it to a new variable e and
46:22 - then see the content of e now once again
46:24 - let me create an array
46:26 - of all zero of Dimension 3x 1 let's say
46:30 - and there is a method called V stake and
46:33 - S stake so V stake is used to stake
46:36 - multiple arrays in vertical Direction
46:40 - and one thing to notice here is the
46:42 - dimension so the dimension of an array
46:44 - must be matched so here you can see e
46:47 - which is of the dimension 3x3 and we
46:51 - have a new array F which have the
46:53 - dimension 3x 1 so so let me uh just
46:57 - create one more variable let's say it's
47:00 - G variable and then I can use NP
47:05 - Dov stack and I can provide as an
47:09 - argument both the arrays so I have the
47:13 - array e and I have the array F and it
47:16 - gives us error because this I need to
47:18 - give in the tle so the error says it
47:22 - takes one positional argument but I have
47:24 - provided two because this I need to give
47:28 - inside a tle or a list so these argument
47:32 - I will provide as a tle and then press
47:34 - enter and now you will see this error
47:37 - this error says all the input array
47:40 - Dimension except for the concatenation
47:43 - AIS must match exactly so because this
47:47 - is the 3X3 array and we want to add the
47:50 - new array vertically which is not
47:53 - possible because in the 3X3 metrix matx
47:56 - you cannot add the Matrix of 3x 1 if
47:59 - this Matrix is of 1x 3 then this is
48:03 - possible so let's create the array of 1x
48:07 - 3 so this should be 1x3 not 3x 1 so I'm
48:11 - going to reshape it once again or let's
48:14 - just uh change the dimension it should
48:16 - be 1x3 in order to use the V stake with
48:20 - the array of 3x3 so now once again we
48:24 - will see the cont of H so now we can
48:27 - once again use this bake method and this
48:31 - time I'm going to pass H here instead of
48:34 - f which is of Dimension 1x3 and then
48:38 - press enter and this time I don't get
48:40 - any error and once again when I see the
48:43 - content of G it's going to give us the
48:46 - combination of the Matrix e and H so
48:51 - this method V stake can be used to stake
48:54 - multiple arrays in vertical Direction
48:58 - there is one more method which is at
49:00 - stake which you can use to stake
49:02 - multiple arrays in horizontal Direction
49:06 - and there our F array will work so now
49:10 - when I create one more variable I and I
49:13 - will use the H stake method and here I
49:18 - will provide as an argument the array e
49:22 - which is of Dimension 3x3 and the array
49:27 - F which is of Dimension 3x 1 not 1x3 not
49:32 - like this but it's of Dimension 1x3 so
49:36 - it's like this right and then press
49:39 - enter and I will see the content of I
49:41 - and now you will see these two arrays
49:45 - are staged horizontally now if you give
49:48 - the array of wrong Dimensions here so
49:51 - for example I give H here instead of f
49:55 - which is is like this and then press
49:57 - enter it's going to once again give me
50:00 - an error which says all the input array
50:02 - Dimension except for the concatenation
50:04 - AIS must match exactly and At Last I
50:09 - want to show you two more method and
50:12 - they are H split which is called
50:15 - horizontal split and V split which is
50:18 - called vertical split and I want to
50:21 - split this array in the horizontal
50:24 - format so what I'm going to to do here
50:26 - is I'm going to use the method H split
50:30 - and here I can first of all give the
50:32 - name of the array which is G in my case
50:36 - and then I can give the number of splits
50:39 - for example I want to split this array
50:41 - in three different arrays then I can
50:44 - provide this number three here and then
50:46 - press enter and now you can see the
50:49 - result so this result contains three
50:52 - different arrays 1 two and three now
50:57 - let's say I want to split this array I
51:00 - which looks like this in the vertical
51:02 - Direction so I want to just separate
51:06 - this this and this in three different
51:08 - arrays so I can use once again NP
51:12 - dovit method and first argument is the
51:17 - name of the array and second argument is
51:19 - the number of arrays you want so when I
51:22 - press enter it's going to give me three
51:25 - different array which are split in
51:28 - vertical Direction so that's it for this
51:30 - video I hope you have learned something
51:32 - new this time