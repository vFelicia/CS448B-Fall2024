00:00 - in this video I'm going to show you what
00:02 - our decorators in Python and also I'm
00:05 - going to show you how to use decorators
00:07 - in Python so let's get started with the
00:11 - decorators so first of all what our
00:13 - decorators so decorators wraps a
00:18 - function and modify its behavior in one
00:22 - way or another without changing the
00:26 - source code of the actual function so
00:31 - let's see in practice how to declare and
00:34 - use decorators so first of all what I'm
00:38 - going to do is I'm going to define a
00:40 - very simple method and I'm going to name
00:43 - it as a say hello for example which
00:47 - doesn't take any argument and it just
00:51 - prints hello world let's say now let's
00:54 - say I want to decorate this function say
00:56 - hello and I want to print some kind of
01:00 - string before and after the printing of
01:03 - hello world without changing the code of
01:08 - the function so here we can declare that
01:12 - decorators so I'm going to declare a
01:16 - decorator function for this and I'm
01:19 - going to name it as decorator underscore
01:22 - func and this decorator function is
01:24 - going to take one argument and this
01:26 - argument will be a function now we have
01:29 - seen in the last video that we can
01:32 - return a function from a function or we
01:37 - can pass the function as an argument of
01:39 - another function so inside this function
01:42 - I am going to declare one more function
01:44 - and I'm going to name it as wrapper
01:48 - functions which takes no argument and
01:51 - inside this wrapper function what I want
01:53 - to do is I want to call a function which
01:56 - is passed as an argument of the
01:59 - decorator function and then at last I
02:01 - just want to return this function so I'm
02:03 - going to just call return and I'm going
02:06 - to return the wrapper function without
02:08 - the parentheses so in the case of
02:11 - closures we have seen
02:13 - that we can return the inner function
02:17 - without the parentheses and that makes
02:19 - them the closures now let's say we are
02:22 - going to pass the say hello function as
02:24 - an argument of this decorator function
02:27 - and this function will be called here so
02:30 - in order to print something before and
02:32 - after this string hello world we can
02:36 - print something here also so here we can
02:40 - just write let's say we want to print X
02:43 - and we want to print this X 20 times
02:47 - let's say so we can just write this kind
02:50 - of notation and after the execution of
02:53 - function I want to print let's say Y 20
02:57 - times so this is the simplest form of
02:59 - decorator which takes function as an
03:02 - argument now in order to call this say
03:06 - hello function with the decorator I'm
03:09 - going to declare one variable and I'm
03:12 - going to name it as hello and then I'm
03:15 - going to call the decorator function and
03:18 - I told you that this decorator function
03:20 - takes the function as an argument so we
03:23 - can pass the say hello function as an
03:25 - argument to this decorator function
03:28 - which will be passed here and it will be
03:32 - called here now in the last video in
03:34 - case of closures we have seen that
03:37 - because this decorator function is
03:39 - returning the inner function that means
03:43 - this variable will contain the inner
03:46 - function so we can call this hello with
03:50 - these parentheses and because this
03:53 - wrapper function doesn't take any
03:54 - argument so we can call it like this and
03:57 - let's run the code and let's see what
03:59 - happens so when we run the code you can
04:02 - see before the hello world string we
04:06 - have printed X 20 x and after the hello
04:11 - world we have printed Y 20 x so this is
04:15 - a simple form of decorator and this is
04:19 - how you can use decorators in Python but
04:22 - Python also provides the simple way of
04:25 - declaring this kind
04:27 - of notation so instead of using this
04:31 - line of code I'm going to comment this
04:34 - line of code and also this line of code
04:37 - because instead of doing this you can
04:40 - use this kind of notation so just above
04:43 - your function in which you want to apply
04:46 - the decorator you use at the rate symbol
04:49 - and then the name of the decorator which
04:52 - you want to apply to the function and
04:55 - this notation above the function is
04:57 - equivalent to this kind of notation and
05:01 - now we can directly use this function
05:03 - say hello without the use of these two
05:07 - lines of code so let me run the code
05:10 - once again and let's see what happens
05:12 - and the result is the same so this is
05:16 - how the decorator works so let's go
05:19 - through the definition once again so
05:21 - decorators wraps the function and modify
05:25 - its behavior in one way or another
05:29 - without changing the actual code of the
05:34 - function so this decorator have changed
05:36 - the behavior of this function without
05:40 - even changing the actual code of this
05:44 - function now one question which may
05:46 - arise here is can we use more than one
05:49 - decorator with the same function so
05:53 - let's try to declare two decorator
05:55 - functions so we are going to declare two
05:58 - decorator functions and this decorator
06:01 - function I am going to name it as
06:02 - decorator X and the second function I am
06:05 - going to name it as decorator y so the
06:08 - first decorator function is going to
06:11 - decorate your function with the x value
06:15 - and the second decorator is going to
06:17 - decorate your function with the value Y
06:20 - so we are going to replace this by Y now
06:23 - here above your function you can use the
06:28 - decorator x and then also you can use
06:32 - the decorator Y above it so I am going
06:34 - to just write at the rate decorator Y
06:37 - and this notation is perfectly fine
06:41 - so you can use one or more decorators
06:43 - with a single function so let me run the
06:47 - code and let's see what happens so I'm
06:48 - going to run this code and you can see
06:50 - what happens so first of all the why
06:54 - decorator has wrapped the function with
06:58 - Y's and then after that comes the X
07:02 - decorator which have decorated the
07:04 - function with X values and then your
07:08 - actual string is printed which is hello
07:11 - world now one thing to note here is the
07:14 - order of that decorator in which they
07:18 - are used so now we will try to just
07:21 - exchange the places of the decorator x
07:25 - and Y and now let's run the code and
07:27 - let's see what happens so before it was
07:30 - printing Y first and then the X when
07:33 - this decorator was used at the top and
07:36 - then the X decorator was used and now
07:39 - when we run the code the opposite of
07:42 - that will happen now if you want to see
07:44 - the equivalent notation of this using
07:47 - decorators so I'm going to just comment
07:49 - these decorators from here and let's try
07:52 - to use this kind of notation with our
07:55 - decorators so I'm going to just
07:56 - uncomment this code and this time what
07:59 - I'm going to do is I'm going to use this
08:02 - decorator x with the say hello and I'm
08:06 - going to enclose this notation inside
08:10 - that decorator Y so I can use this kind
08:14 - of notation which is equivalent to this
08:17 - kind of notation also so I'm going to
08:19 - run the code and you can see because
08:22 - decorator Y is the outermost decorator
08:26 - here it's going to just print the value
08:29 - of y and then we have the decorator X
08:31 - which is going to print the value of x
08:33 - and then our actual string if we
08:36 - exchange the places of decorator X and
08:40 - decorator Y then the order of the
08:45 - printing will also change so now this
08:48 - was the very basic decorator example so
08:51 - let me remove this example
08:54 - let me give you one more example so
08:57 - instead of using this function let me
08:59 - give you one more example so I'm going
09:01 - to declare a function called divide
09:04 - which is going to take two arguments
09:06 - let's say x and y and what it's going to
09:10 - do is it's going to return the value of
09:13 - the division of X divided by Y and let
09:17 - me remove these decorators from here so
09:21 - in the last say hello example over say
09:23 - hello function was not taking any
09:26 - argument and now we are giving our
09:29 - divide function two arguments that means
09:32 - we need to change the wrapper function
09:35 - here also so I'm going to name my
09:37 - decorator as decorator divided which
09:40 - takes a function and I'm going to change
09:43 - the wrapper function and now this
09:46 - wrapper function is going to take two
09:47 - values which is the value of x and y you
09:50 - can also write a and B it doesn't matter
09:53 - it just takes two values and instead of
09:56 - this kind of notation let me print the
09:59 - values of a and B first of all so inside
10:02 - this print function I'm going to just
10:04 - write divide and then we are going to
10:07 - pass the value of a comma and comma B so
10:11 - we are going to print the value of a and
10:14 - B and then we are going to check if the
10:16 - value of B is 0 or not so I'm going to
10:19 - just say if B is equal to 0 then we are
10:23 - going to print the message that division
10:26 - with 0 is not allowed and also we are
10:31 - going to return immediately from this
10:34 - function otherwise if the value of B is
10:36 - not equal to 0 then we are going to
10:38 - return the division of a by B so once
10:42 - again without changing the actual
10:44 - function which is divided we have
10:46 - changed the behavior of this function
10:49 - which is divided using this decorator
10:52 - function and the last thing which we
10:54 - need to do here is to call our decorator
10:58 - function above our normal divide
11:01 - function and now I can use this divide
11:03 - function normally so I am going to just
11:05 - use this divide function inside
11:08 - the print and I'm going to pass two
11:11 - values here let's say 15 and 5 and let's
11:15 - run the code and it's going to print
11:17 - first of all this line which is printed
11:20 - using this statement which says divide a
11:22 - and B which is divide 15 and 5 and then
11:27 - because the value of B is not equal to 0
11:31 - that means this value is returned with
11:35 - the result 3 which is the division of 15
11:38 - by 5 now let's change the value of B and
11:42 - we are going to just give 0 as the value
11:45 - of B or Y here and I'm going to run the
11:49 - program once again and now you can see
11:52 - that this statement is printed which
11:55 - says the region with 0 is not allowed
11:58 - and because this function is not
12:01 - returning anything or you can return 0
12:04 - from here it doesn't matter and I'm
12:06 - going to run the code it prints 0 here
12:09 - so this is how you can use decorators
12:11 - with the function which takes some
12:14 - arguments and return some values now let
12:18 - me give you one more real-world example
12:21 - which we can use with decorators so
12:24 - instead of our divide function now let's
12:28 - say what I want to do is I want to
12:30 - declare a function I'm going to just
12:33 - name it as my funk which takes one
12:37 - argument or number so this will be a
12:40 - number and then this function calculates
12:43 - the sum of the number from 1 to the
12:47 - number which we provide here so let's
12:49 - say we provide 10 here so this function
12:51 - is going to give us the sum of the first
12:54 - 10 numbers and now I'm going to declare
12:57 - a variable called sum which I initialize
13:01 - it with zero and in the next line I'm
13:03 - going to use for I in some range and
13:07 - this range will be the number which is
13:10 - provided plus 1 because range starts
13:13 - from 0 and not from 1 that's why I'm
13:15 - adding 1 here in the range if I want to
13:19 - calculate the sum of 4
13:22 - first 10 numbers let's say and if I
13:24 - provide 10 here then range will give you
13:27 - until 9 that's why I'm adding one here
13:30 - and then inside this for loop I'm going
13:33 - to just do some plus equals I and at
13:37 - last I'm going to just return the value
13:40 - of the sum now till now we have seen how
13:43 - to create decorator functions for the
13:46 - functions which takes no argument or for
13:50 - the function which takes some argument
13:52 - and we want to use these argument inside
13:55 - the wrapper function but at times you
13:59 - need to write a decorator function which
14:02 - will be a generic decorator function
14:04 - which means the decorator function which
14:07 - I'm going to create here will be used
14:09 - with not only this function but the
14:11 - other function which can take this
14:14 - argument on multiple number of argument
14:16 - or no argument so let's see how we can
14:19 - write a generic decorator function so
14:21 - let's say I want to measure the timing
14:25 - of this function how much time this
14:28 - function takes in order to execute this
14:32 - code and timings we can measure with any
14:36 - function so it doesn't matter that we
14:38 - need to use this function to calculate
14:41 - the timing you can also use the
14:43 - decorator function which I am going to
14:45 - create with the other functions also to
14:49 - measure the timing of those functions so
14:52 - because it's a timing decorator so I'm
14:54 - going to name it as timing and it takes
14:57 - once again the function as an argument
14:59 - and because we don't know which argument
15:03 - the function is going to take right now
15:06 - this function takes one argument but it
15:09 - doesn't matter you need to measure the
15:11 - time of the function which takes one
15:14 - argument or two argument or three
15:15 - argument or no argument so that's why in
15:18 - that case we can use this kind of
15:20 - notation as tricks Oggs here and then
15:24 - comma SS tricks KW args here and these
15:28 - two arguments makes your wrapper
15:31 - function independent of the number of
15:34 - argument which will be
15:35 - with dysfunction and in order to
15:39 - calculate the timing of the function we
15:42 - need to import a module so let's import
15:44 - a module so I'm going to just write from
15:46 - time import time so there is an inbuilt
15:51 - time function which we can use to get
15:54 - the time and now under this wrapper what
15:57 - I'm going to do is I'm going to just
15:59 - declare a variable called start and I'm
16:03 - going to save the value of current time
16:05 - here so whenever you call this time with
16:08 - the parent says it's going to give you
16:11 - the current time now in the next line
16:13 - what I want to do is I want to just
16:15 - create a new variable which I will call
16:18 - it as result and I am going to assign
16:22 - the result of this function so let's
16:24 - call this function with the variables
16:28 - which we have provided into the wrapper
16:30 - function so because we don't know which
16:32 - argument comes with this function so we
16:35 - are going to just pass these argument as
16:38 - it is into the function argument which
16:41 - is passed as an argument of your
16:44 - decorator let's provide the indent here
16:46 - so this will be satisfied and then in
16:49 - the next line we are going to just print
16:52 - that time elapsed so I'm going to just
16:55 - say elapsed time and then this curly
16:59 - bracket and you already know we can call
17:02 - a format method on the string and here
17:06 - as an argument we just want to give the
17:08 - result of the start time and the end
17:12 - time so let's declare the end time also
17:15 - after the function execution is
17:17 - completed we are going to measure the
17:19 - current time once again and then we are
17:22 - going to just say end time which is
17:25 - stored in the end variable minus the
17:28 - start time and it's going to give us the
17:30 - time elapsed in the execution of this
17:34 - function and at last because this
17:36 - function or the other function can also
17:38 - return some value at last we are going
17:41 - to return the result which we have
17:44 - calculated so I'm going to just write
17:46 - return this result so they
17:48 - the generic timing function which you
17:51 - can use with any function whichever you
17:54 - like so I'm going to just decorate my
17:58 - function using at the rate the timing
18:02 - decorator and then I'm going to call
18:05 - this my function inside the print method
18:06 - so print my function and let's say I
18:10 - want to calculate the sum of first
18:14 - 20,000 values and I'm going to run the
18:17 - code and here in the result you will see
18:20 - 0.0 in the elapsed time because this
18:24 - value is very small and elapsed time is
18:27 - approximately equal to 0 for the smaller
18:30 - values because we are just iterating
18:33 - over the smaller value but the sum is
18:37 - the exact sum so let's increase this
18:40 - value by 2 zeros and let's also print
18:43 - the value of start time and end time
18:46 - here so I'm going to just print the
18:48 - value of the end time and the start time
18:52 - so we know that what is the starting
18:55 - time and what is the ending time and I'm
18:57 - going to run the program once again and
18:59 - now you will be able to see that this is
19:03 - the starting time and this is the ending
19:06 - time and you will be able to see some
19:09 - time elapsed in the execution of this
19:12 - function and when I increase one zero
19:15 - here so you will be able to see two
19:18 - seconds is taken now for the calculation
19:21 - of the sum of this number so you can use
19:25 - this timing decorator in order to
19:27 - calculate the time of execution of any
19:30 - other function other than this also so
19:33 - this is how you can use decorators in
19:36 - Python