00:00 - hello guys welcome to Java fix tutorial
00:02 - for beginners using SQLite database in
00:05 - this video series I will start with
00:08 - creating a Java effects project and I'm
00:11 - going to connect it with SQLite database
00:14 - and then further we will move towards
00:17 - creating a login page using SQLite in
00:20 - JavaFX and how we can insert delete or
00:25 - update data in SQLite database using
00:28 - Java effects and in the later videos we
00:31 - will also see how we can use SQLite and
00:35 - jar effects controls like buttons or
00:38 - text text boxes or tree view or list
00:41 - view or combo box with SQLite database
00:45 - now in this first video I will start
00:48 - with creating a new SQLite database and
00:51 - we will download a SQLite jar which is
00:56 - required to connect to SQLite database
01:00 - using JavaFX okay so let's get started
01:04 - now there are many ways of creating
01:07 - SQLite database on your Windows
01:09 - operating system or on Linux or Mac OS
01:13 - what I like is I would like to have a
01:17 - plugin in my Firefox browser which
01:21 - allows me to create a SQLite database
01:24 - using SQLite manager which it provides
01:28 - so what I'm going to do is I'm going to
01:31 - open my Firefox browser and I will click
01:34 - on this button on the right and I will
01:37 - just click this add-ons button and in
01:41 - here I will search for SQLite and it's
01:44 - going to show you all the result and we
01:47 - are interested in this first result
01:49 - which says SQLite manager ok so just
01:53 - click install and it's going to download
01:57 - and install this SQLite manager and it's
01:59 - going to say restart your web browser so
02:03 - I'm going to restart my Firefox web
02:05 - browser and once it's restarted SQLite
02:09 - is added to your Firefox browser now how
02:13 - to
02:13 - search for this Escalade manager so now
02:17 - once again go to this open menu and you
02:20 - can see here Escalade manager is added
02:23 - to your options here ok now if you don't
02:28 - find this Escalade manager here you may
02:31 - need to go to customize and in here you
02:35 - will find this Escalade manager and then
02:39 - you just need to drag and drop this into
02:42 - your open menu so for example this is
02:45 - Escalade manager you can just drag and
02:47 - drop this in here ok and then you will
02:51 - be able to see this Escalade manager ok
02:54 - so once everything is finished you just
02:57 - go to this open menu and open this
03:00 - Escalade manager now for the first time
03:02 - when you open this SQLite manager it's
03:04 - going to look something like this so to
03:08 - create a new SQLite database you can
03:11 - just go to database at the top and you
03:14 - can just say create database or
03:16 - otherwise you can go to this icon and
03:19 - select this icon and it's going to
03:22 - prompt you to create a new database now
03:25 - for example we are going to create a
03:26 - database called employee DB ok and click
03:32 - OK and it's going to ask you to save
03:35 - this database at some specified location
03:38 - so just select some location which you
03:41 - can remember and just say create folder
03:44 - and now your SQLite database will be
03:47 - created so you can see my SQLite
03:50 - database is shown at the top here and
03:53 - when you go to the location where you
03:56 - have saved your database it'll look
03:58 - something like this
03:59 - so my database name with the extension
04:02 - of SQLite now it's not necessary that
04:05 - your SQLite database must have this
04:09 - extension SQLite it can have the
04:11 - extension dot DB or some other extension
04:14 - but in the case of SQLite manager it
04:17 - creates the database with this extension
04:19 - which is s collide ok so now we are
04:24 - going to create a table inside this
04:27 - SQLite database so just go to this table
04:30 - category and there your database name
04:32 - and then right click and just click this
04:34 - option which says create table and in
04:37 - here first of all we are going to give
04:39 - the name to our table for example
04:41 - employee ok
04:43 - and in this employee table I'm going to
04:45 - create some columns for example first is
04:48 - ID second is name third is surname
04:53 - fourth is age and we are going to create
04:57 - two extra fields for username and
05:00 - password ok so just write username and
05:03 - the next field is password okay and then
05:07 - give the data type to all of them
05:09 - first ID is an integer type the name is
05:13 - text type surname is text age is integer
05:18 - username is text and password is text ok
05:23 - and in here you can choose your primary
05:25 - key from here so let's say our primary
05:28 - key is ID and in here you can choose if
05:31 - you want your ID to be auto incremented
05:35 - or not so let's say yes we want that it
05:38 - should increment with every insert and
05:40 - you can choose if you want to allow the
05:44 - null or not and if you want to allow the
05:47 - unique or not so I will leave them as
05:50 - default and I will just say ok and it's
05:54 - going to create this table inside the
05:58 - database just click yes and now you can
06:01 - see employee database is created and you
06:05 - have these columns inside your database
06:07 - right so just select your table and go
06:10 - to browse and search option here and now
06:13 - we are going to insert some values in
06:15 - this table so just click this option
06:18 - which says add and now let's add some
06:20 - values for example the ID name is for
06:24 - example Toms
06:26 - name is something and age for example 22
06:31 - and user name for now let's say it's
06:34 - deaths and password is also test for now
06:38 - ok and click OK
06:40 - and click OK and it's going to add this
06:43 - first row inside your table ok so now
06:47 - you have one database and inside your
06:49 - database you have this employee table
06:52 - with one row of data now second step to
06:56 - connect your SQLite database with your
07:00 - Java effects application is to have a
07:04 - SQLite JDBC jar file so just go to your
07:10 - browser once again and search for SQLite
07:13 - JDBC jar ok and search for this and the
07:19 - first option which will appear here will
07:21 - be from bit bucket dot o-r-g slash X
07:25 - serial slash Escalade - JDBC so just
07:30 - select this first option from here and
07:33 - it's going to give you these option and
07:36 - we are interested in the latest release
07:40 - which is at the top so just select this
07:43 - SQLite - JDBC and whatever the latest
07:46 - version is and download this jar file
07:50 - and save it somewhere so I have saved
07:53 - this jar file at the same place as my
07:57 - database so I know that this is a jar
08:00 - file I need to use ok so now we have all
08:04 - the required things to create our Java
08:07 - effects project using SQLite database in
08:12 - the last video I've shown you how to
08:14 - create your SQLite database and how you
08:17 - can download this SQLite JDBC jar to add
08:22 - to your project now in this video I'm
08:27 - going to show you how you can create
08:28 - your first Java effects project and
08:31 - connect it with SQLite database so let's
08:35 - get started I'm going to use Eclipse IDE
08:38 - for this tutorial series but you can use
08:41 - either NetBeans or IntelliJ for the same
08:44 - purpose also
08:45 - ok so let's create our first Java FX
08:48 - project so I'm going to go to file new
08:52 - others
08:53 - and in here I will choose the JavaFX
08:56 - project and click Next and in here I'm
08:59 - going to give the name to my JavaFX
09:02 - project we are going to create a login
09:03 - app so I will name it as login app ok
09:08 - and click finish and our project is
09:12 - created and it contains the application
09:16 - package and this mean dot Java class and
09:19 - application dot CSS class what we are
09:22 - going to do in this project is we will
09:24 - try to follow the MVC pattern or Model
09:28 - View controller pattern which is a
09:30 - standard in making you eyes and for that
09:34 - we are going to create a controller
09:37 - class model class and for example login
09:41 - dot F XML file so right click on your
09:44 - application package and we are going to
09:46 - add a new F XML file so go to others and
09:51 - choose from here and the JavaFX category
09:54 - a new F XML document and click Next and
09:58 - we are going to name it as login ok so
10:02 - login dot F XML and click finish and
10:05 - this login dot F XML is added to your
10:08 - project now we are going to add some
10:11 - classes right click on your application
10:13 - package once again and add loss and this
10:17 - class we are going to name it as for
10:19 - example SQLite connection and this class
10:22 - we are going to use to prepare a
10:26 - connection for SQLite with our project
10:29 - ok now we are going to go to our login
10:33 - dot F XML file and right click here and
10:36 - go to source and in here go to the last
10:39 - option which says generate controller
10:42 - and it's going to create a controller
10:45 - class for us and its name is login
10:47 - controller ok and I'm going to click OK
10:51 - and it's going to create this login
10:52 - controller the Java class for us now we
10:55 - are going to create the model class so
10:59 - right click on your application package
11:01 - once again create a new class and this
11:04 - time we are going to name it as log
11:06 - in model class okay and click finish so
11:11 - these are the classes we are going to
11:13 - require to create our project we have
11:16 - login controller dot Java class login
11:19 - model or Java class main dot Java class
11:22 - SQLite connection dot Java class and
11:25 - login dot F XML file which we have
11:28 - recently created ok now the first thing
11:31 - what I'm going to do is I'm going to go
11:33 - to my main dot Java class and what it's
11:36 - doing it's doing nothing but creating a
11:38 - scene and it's adding the scene to our
11:42 - stage and it's going to display the
11:45 - stage now we want to launch our login
11:48 - dot F XML file from here so instead of
11:52 - using this border pane root is equal to
11:55 - new bada pane I'm going to add this line
11:58 - of code which launches this login dot F
12:02 - XML file when we run our project and fix
12:06 - the import so click on this bulb and
12:09 - import parent and once again click on
12:12 - this bulb and import F XML loader so now
12:15 - we have included this line of code which
12:18 - launches our login dot F XML file which
12:21 - is this file which we have created and
12:23 - just remove this 400 and 400 from the
12:28 - scene constructor because it provides
12:31 - the default size and we don't want to
12:33 - provide the default size we want the
12:35 - size of our login dot F XML file right
12:39 - so this is our code in main dot Java
12:43 - file now next what we are going to do is
12:46 - we are going to go to our SQLite
12:48 - connection dot Java file and in here we
12:51 - are going to create public static
12:54 - methods so just write public static
12:58 - method and what it's going to do is it's
13:01 - going to return data type called
13:04 - connection and we are going to name our
13:08 - function as for example connector and we
13:12 - are going to import this library called
13:15 - Java dot SQL dot Astrix
13:20 - okay so import this and now we are going
13:23 - to write some code inside this connector
13:25 - method so just add our try/catch block
13:28 - first and inside this try-catch block we
13:32 - are going to add these three lines okay
13:36 - the first line of this code is class dot
13:38 - for name and inside the brackets you
13:42 - need to pass this constant string which
13:44 - is constant and you need to exactly
13:47 - right
13:48 - the same constant lines so just right o
13:51 - RG dot sqlite dot JDBC okay and the case
13:57 - should be same and what this for name
14:01 - function does it returns the class
14:03 - object associated with the class or
14:06 - interface which is given as a string
14:09 - argument so we are going to call this
14:12 - JDBC class in order to connect to the
14:16 - SQLite database right now create an
14:19 - instance of connection right so just
14:23 - write connection give the name to your
14:25 - connection object is equal to driver
14:27 - manager dot get connection and inside
14:31 - the brackets just pass this string which
14:34 - is JDBC : SQLite : your database name
14:39 - now this database name you can give in
14:42 - two ways first way is to just copy the
14:46 - part where your database is present for
14:50 - example this is the path where my SQLite
14:53 - database is present which I have created
14:54 - in the last video and I'm going to just
14:57 - add this part in here okay so our part
15:02 - looks something like this which is in C
15:05 - folder and just add these double /f
15:10 - instead of single forward slash so that
15:13 - this error will be gone so the first way
15:16 - is to directly give the part of your
15:18 - SQLite file and then it's going to
15:22 - connect to this database using this path
15:25 - okay otherwise if you want to add this
15:29 - database to your project what you can do
15:33 - here is you can
15:34 - delete the path and just leave the name
15:36 - of your database which is employed DB
15:40 - dot SQLite in my case and then go to the
15:44 - location where this database is present
15:47 - and then drag and drop this database
15:50 - inside your login project okay so it
15:54 - should be the login project not inside
15:57 - the source folder not inside the
15:59 - application package you need to drop
16:03 - this under your project okay and click
16:07 - copy and it's going to add this database
16:11 - inside your project so just remember
16:14 - it's not inside the source it's inside
16:17 - our project folder okay
16:20 - now what if this line of code does is it
16:23 - searches for the database which we have
16:25 - provided here in the parent folder
16:28 - inside your project and if it's found
16:31 - then it's okay otherwise it's going to
16:33 - create this database with this name
16:37 - inside your project folder okay so it's
16:41 - better to have your own database inside
16:43 - the folder now one more thing we are
16:46 - going to do here is we are going to
16:48 - return in the catch block null because
16:51 - if this method throws then we are going
16:54 - to return null here okay so this is the
16:58 - code which we will write in the SQLite
17:01 - connection method which contain only one
17:03 - method which we use to connect to the
17:06 - database now next step is to go to your
17:09 - login model dot Java class so go to this
17:13 - class which I have created for the model
17:16 - so go to this login model dot Java class
17:19 - and in here we are going to create a
17:22 - constructor first and at the top we are
17:26 - going to create an object for this
17:28 - connection
17:29 - okay so just copy this connection from
17:32 - here and go to your login model and at
17:35 - the top create an instance of connection
17:39 - and inside this login model dot Java
17:41 - class also we are going to import this
17:44 - class called Java dot SQL dot
17:47 - Astrix okay and now your error will be
17:51 - gone related to this connection now
17:54 - inside your constructor take this
17:57 - connection object and then call the
18:01 - SQLite connection class so just call
18:04 - this connection class and then call this
18:08 - method which we have created which is
18:10 - connector and just close it now if you
18:14 - see this function which we have created
18:16 - in the SQLite connection class which is
18:19 - connector it's going to give you null if
18:22 - this code throws right so we need to
18:26 - handle this null situation also in this
18:29 - constructor for the model so just say if
18:33 - our connection is equal to null then
18:36 - what we are going to do we are going to
18:38 - just exit our application because if the
18:42 - connection is not successful it's no use
18:45 - to run our application right so now we
18:49 - are going to create one more method and
18:52 - I'm going to name it as is DB connected
18:57 - and it's going to return a boolean value
18:59 - so just return a boolean from here and
19:02 - inside this method what we are going to
19:05 - do is we are going to take this
19:07 - connection object and we are going to
19:09 - call a method called is closed on it and
19:13 - what this is closed method does is it's
19:16 - going to give you a boolean value so
19:19 - it's checking that whether your
19:21 - connection is closed and if it's closed
19:24 - is going to give you the true value
19:27 - otherwise if the connection is
19:29 - successful it's going to give you the
19:32 - false value and we need to add this code
19:35 - inside a try-catch blocks so just add a
19:38 - try-catch block around this code so it's
19:41 - not going to give you the error okay so
19:44 - in here we are just going to return this
19:48 - connection is closed and we are going to
19:51 - check the negative condition so if the
19:53 - connection is not close then we are
19:55 - connected otherwise we are going to
19:57 - return false so these are the two method
20:00 - we are
20:01 - to require in the login model dot Java
20:03 - class now let's go to our login
20:06 - controller dot Java class and in here
20:10 - first of all we are going to implement
20:11 - the initialize able interface and it's
20:16 - going to ask you to implement a method
20:18 - which is initialized so just implement
20:21 - this method from here and inside this
20:24 - class first of all what we are going to
20:26 - do is we are going to create an instance
20:28 - of login model class so just write
20:31 - public login model and give the name to
20:35 - your object which is login model itself
20:38 - is equal to new login model ok so we
20:43 - have created an instance of login model
20:48 - ok now what we are going to do is we are
20:50 - going to create a label here so just add
20:54 - this line of code which is at the rate F
20:57 - XML and then in the next line just add
21:00 - this variable called is connected which
21:04 - is of label type and which is private
21:07 - inside this log in controller class and
21:11 - just import this label from JavaFX scene
21:15 - control ok now go to your initialize
21:19 - method and take this login model and
21:23 - then write if and inside this if
21:27 - condition just call this login model dot
21:31 - is DB connected method and this is the
21:35 - method which we have created in the
21:37 - login model right so if the DB is
21:41 - connected then we will show in this
21:44 - label that our database is connected so
21:47 - just write is connected dot set text and
21:52 - then you can just write here connected
21:56 - else we are going to display in the
21:59 - label that our connection is not
22:02 - successful so you can just write not
22:05 - connected so this will be the code for
22:08 - your login controller class now we can
22:13 - move to the login
22:15 - F XML file so right click on your login
22:18 - dot F XML file and open it with scene
22:21 - builder and once this scene builder is
22:23 - open just click on the anchor pane here
22:27 - and first of all we are going to give
22:29 - some width to this anchor pane so just
22:32 - go to layout and in here just give the
22:35 - profit is equal to 300 and pref height
22:38 - is equal to 300 also and press enter and
22:41 - it's going to give you this kind of
22:43 - frame here now next what we are going to
22:46 - do here is we are going to go to the
22:48 - controls section here and we are going
22:51 - to take a label and just resize your
22:56 - label and go to the properties and we
22:58 - are going to change the font size of it
23:00 - so go to this property called font here
23:03 - and change the font to for example 18
23:06 - okay and I'm going to just remove this
23:09 - text on the label and I'm going to say
23:13 - that this is our status okay so text is
23:17 - status here and we can change the color
23:21 - also for example red now select your
23:24 - label and go to the code section here so
23:27 - go to this category called code for your
23:31 - label and as a FX ID we need to give the
23:34 - same ID which we have given in here in
23:37 - the controller class so our label name
23:40 - is is connected we are going to give the
23:42 - same name in here as a FX ID okay now
23:46 - one last thing which is remaining here
23:48 - is connecting our controller from this F
23:51 - XML file so go on the left hand side and
23:55 - click this option called controller and
23:58 - from here you can choose your controller
24:01 - which is application dot login
24:03 - controller okay and then save everything
24:07 - in the scene builder so save everything
24:10 - and go to your Eclipse IDE and right
24:13 - click on your project and refresh
24:16 - everything now one last and most
24:18 - important thing which is remaining here
24:20 - is to add the SQLite JDBC jar file which
24:24 - we have downloaded in the last video
24:27 - which is this file
24:28 - right so to add this jar file what we
24:31 - need to do is we need to go to this
24:34 - section which says JRE system library ok
24:39 - so inside your project you will find
24:41 - this JRE system library and right click
24:44 - on it and then go to build path and then
24:48 - click configure build path and in here
24:51 - we are going to just click this option
24:54 - which says add external jars and then
24:58 - search for this jar file ok so wherever
25:02 - you have saved this jar file which we
25:04 - have downloaded in the last video just
25:06 - select this SQLite - JDBC jar file and
25:11 - then open and what it's going to do is
25:15 - it's going to add this SQLite JDBC jar
25:18 - file into your libraries and click OK
25:22 - ok now let's run our application and now
25:27 - it says connected ok so our code is
25:31 - working successfully now go to your
25:34 - SQLite connection dot Java class in
25:37 - which we have written our SQLite
25:39 - connection and in the catch block you
25:43 - can just write this out and you can
25:48 - print the exception here why we are
25:51 - doing this because let's say we have
25:53 - provided some location for this database
25:55 - which doesn't exist ok so this is the
25:59 - location of the database which doesn't
26:02 - exist because our data base is in the
26:05 - main folder and not in the image folder
26:07 - right and save your code and run it and
26:10 - you can see this image slash employee B
26:13 - dot SQLite does not exist in C folder ok
26:17 - so if you give the wrong path it's going
26:21 - to throw the error and it will be
26:23 - printed using this system dot out print
26:26 - line code ok because what we are doing
26:30 - here inside our model constructor that
26:32 - we are exiting from our code and if your
26:36 - SQLite class throws then it will be
26:39 - exited and you will never
26:41 - know what happened okay otherwise you
26:43 - can also add a message here so you can
26:47 - print message under this if condition
26:50 - before exiting that the connection is
26:53 - not successful right so once again the
26:57 - part is wrong and you run your code and
27:01 - you can see here it's printing
27:04 - connection not successful so you know
27:07 - it's throwing and you are seeing the
27:10 - error here so let's change the database
27:13 - path to the actual path of the database
27:16 - and run it once again and now it runs
27:20 - successfully okay now one more thing I
27:23 - want to show you here is when you
27:26 - right-click your project and go to the
27:28 - properties you will find in resources
27:30 - the path to your project in the location
27:34 - just copy this location and open the
27:37 - location of your project in the folder
27:40 - Explorer so this is the location where
27:43 - my project is and you can see employee
27:45 - DB dot SQLite is there okay now let's
27:49 - say that we change the name of the
27:53 - employee be for example employee DB one
27:57 - okay and let's see what happens so save
28:00 - your code and run it and you can see
28:05 - here it's still saying us connected but
28:08 - the DB name is changed so what happened
28:11 - here so what happened here you can go to
28:14 - your project once again and you can see
28:17 - that there is a new database created
28:20 - with the name employ DB 1 dot SQLite
28:24 - right so this is going to create a new
28:28 - database if it doesn't find the disturb
28:31 - ace it creates the new database in your
28:34 - project folder and then it tries to
28:37 - connect it and that's why your
28:39 - connection is successful but you are
28:41 - never going to you know query this
28:44 - database because you don't have any
28:45 - table here you can see the size is zero
28:48 - but our original database size is 96 KB
28:52 - because we have created in the last
28:54 - do a table inside this database so just
28:58 - remember this thing also if the database
29:01 - name is wrong then it's going to create
29:03 - a new database with the wrong name for
29:06 - you in the same folder
29:08 - okay so just provide the exact name for
29:12 - your database here in the last video we
29:15 - have written some code to connect our
29:17 - JavaFX app to SQLite database and we
29:22 - have created some classes for our login
29:25 - page which were login controller dot
29:28 - Java login model or Java SQLite
29:32 - connection dot Java and login dot F XML
29:36 - right now we are going to complete this
29:39 - login functionality in this video so
29:42 - first of all what we are going to do is
29:44 - we are going to open our login dot F XML
29:47 - file so right click on it and open with
29:49 - scene builder I have already opened it
29:51 - and in here we are going to add some
29:54 - controls so that we can check the
29:57 - username and password against our
30:01 - database values ok so what I'm going to
30:04 - do is I'm going to add some controls
30:08 - here so first control will be our text
30:11 - field which will be for the username and
30:14 - the next control will be a password
30:17 - field which will be for the password and
30:20 - I'm also going to add a button here so
30:23 - just add this button now select your
30:26 - both text fields and the button and we
30:31 - are going to go to the properties and in
30:33 - here we are going to change the font of
30:35 - these text field and the buttons and we
30:38 - are going to make it 18 okay and now we
30:42 - will give some prompt text to the user
30:45 - named text so select your user name text
30:50 - field which is the top one and then go
30:52 - to the property here and in the prompt
30:55 - text property you can just write user
30:59 - name okay and it's going to show here as
31:03 - a prompt text and the same we will do
31:06 - for the password
31:08 - feels so just right a prom text for
31:10 - example password okay and press enter
31:14 - and next what we are going to do here is
31:17 - we are going to select our user name
31:20 - text field and go to the code category
31:23 - and we are going to define the ID for
31:28 - the username text field so for example I
31:31 - will just write txt user name okay and
31:35 - same we will do for the password so the
31:39 - ID here will be txt password and I will
31:44 - just select my button and I'm going to
31:46 - change its text to login so just write
31:50 - login on the button text here so our
31:53 - design is complete so you can save our F
31:56 - XML file by going to the file and just
31:58 - click save here or just hit ctrl s for
32:02 - saving your file and then go to your
32:05 - Eclipse IDE and refresh your project and
32:10 - you can see all these text fields and
32:13 - IDs are added to your login dot F XML
32:17 - file now what we are going to do next is
32:20 - we are going to go to our login model
32:24 - dot Java class right and in here we are
32:27 - going to create a new method and this
32:30 - method we are going to name it as is
32:32 - login method and it's going to return a
32:35 - boolean value also so just write public
32:38 - boolean is login and as a argument we
32:44 - are going to pass two arguments here for
32:46 - checking username and password so just
32:49 - write string user and the second
32:52 - argument will be string Pass okay and
32:56 - just close this method here and now what
33:00 - we are going to do is we are going to
33:02 - add our try catch block and just above
33:06 - our try catch block what we are going to
33:09 - do is we are going to define some
33:11 - variables
33:12 - okay so first variable will be the
33:15 - prepared statement variable and you can
33:18 - name it
33:20 - prepared statement itself and the second
33:23 - variable will be the result set
33:27 - okay so just declare this variable
33:29 - called result set and name the object as
33:33 - same and now we are going to declare a
33:36 - string variable and we are going to name
33:39 - it as query because we are going to
33:42 - prepare our squarey and assign it to
33:45 - this query variable okay
33:48 - and in here we are going to write some
33:50 - query to query the database so what we
33:53 - want to write here we want to select
33:55 - username and password from our table
33:58 - right so we can write select Asterix
34:02 - from our table name and if you remember
34:06 - we have created this database in the
34:08 - last video and just open this database
34:11 - from your project where you have defined
34:15 - your database inside your project so
34:18 - just open it from there and you can see
34:20 - we have this employee table inside our
34:23 - database so just call this database
34:26 - inside this query and then we will add
34:29 - our where clause here so just write
34:31 - where your username column name so our
34:36 - username column name is username and
34:39 - password column is password here okay so
34:42 - we are going to use these column names
34:45 - just write user name is equal to
34:49 - question mark and password is equal to
34:53 - question mark also okay so what this
34:57 - query is basically doing is it's
34:59 - querying your database and squaring your
35:03 - table employee and it's searching for
35:06 - the username and password whatever we
35:10 - provide from these argument user and
35:14 - password right now go inside your try
35:16 - block and take your prepared statement
35:18 - and we are going to create a prepared
35:22 - statement from the connection so just
35:24 - use equals and then if you remember in
35:27 - the last video we have defined this
35:30 - connection object so take this
35:32 - connection object
35:33 - and then call a method called
35:36 - preparedstatement
35:37 - which takes a string argument which is
35:40 - our query so just pass our query
35:43 - variable here and then close the code
35:46 - and then once again take your prepared
35:49 - statement and then call a method called
35:52 - set string and it takes two argument
35:57 - also one is the parameter index and
36:00 - other is the value so parameter index is
36:04 - for the username and password and here
36:07 - index start from one so the index for
36:11 - username will be one and index for
36:14 - password will be two okay so just write
36:17 - one and then we will pass this string
36:21 - variable which we are taking from the
36:23 - argument as a first argument in a same
36:26 - way just copy the same code and as a
36:28 - second index we are going to pass this
36:31 - password okay and now we are going to
36:35 - take this result set object and paste it
36:39 - here and then just write your prepared
36:44 - statement dot execute query okay and now
36:49 - you can take this result set to see what
36:54 - is the result inside it so you can just
36:57 - write if result set dot next and then
37:02 - you can just go inside the if statement
37:06 - and you can return true from here okay
37:11 - now what this result set is doing so
37:14 - once your prepared statement is prepared
37:18 - and then it executes this query with
37:21 - these values so user will be replaced
37:24 - here at the place of this question mark
37:27 - password will be replaced here at the
37:29 - place of this question mark and then
37:31 - your query is executed and your result
37:34 - will be saved here now if it returns any
37:39 - result using this next method on results
37:44 - that we will find if it is
37:47 - returning any result or not okay so if
37:51 - we have a result more than one it's
37:54 - going to go inside this if condition and
37:56 - then we know that our username and
37:59 - password is correct okay otherwise what
38:03 - we are going to do is we are going to
38:04 - just write else and then we are going to
38:07 - return false here and in the catch block
38:11 - also we are going to return false if
38:14 - some exception occurs we want to show
38:17 - that username and password is not
38:19 - correct now finally when you have
38:22 - written your code it's a good practice
38:25 - to close your prepared statement and
38:28 - result set so just add a finally
38:31 - statement here so if you know with try
38:36 - and catch you can also write this
38:38 - finally statement which is always
38:41 - executed if you have any exception or if
38:46 - you don't even have any exception this
38:48 - line of code inside this finally is
38:51 - always executed so take your prepared
38:55 - statement object and then call a closed
38:58 - method on it and same we will do for the
39:02 - result set so just use result set dot
39:05 - close now if you can see here this
39:09 - prepared statement dot closed and
39:11 - results at dot close is giving us this
39:14 - error so what this error is first of all
39:18 - we need to initialize this prepared
39:20 - statement with null and also the result
39:25 - set with null and then just click this
39:28 - bulb here and then use the first option
39:32 - which says add through declaration is
39:34 - going to add this option before your
39:38 - method which is throws exception okay
39:41 - and then this error will be gone so now
39:45 - our is login method inside our login
39:49 - model is complete so let's go to the
39:52 - login controller dot Java class and in
39:55 - here we are going to define two text
39:58 - fields so let's declare the text field
40:01 - so I'm going to just copy and paste
40:03 - something like this and in here we will
40:06 - just add a text field from here and for
40:10 - the second text field also we are going
40:13 - to add this text field so this text
40:16 - field we are going to assign the same
40:19 - name as we have assigned in the effects
40:21 - ml file so select your user name text
40:25 - field and take the name which you have
40:28 - assigned as a effects ID in the code
40:31 - section and then paste in front of the
40:34 - first text field variable and then take
40:38 - your password FX ID which you have
40:42 - defined here and paste it in front of
40:44 - this second text field now let's define
40:47 - a method in which we are going to check
40:50 - this username and password so it's going
40:54 - to be a public void login method for
40:59 - example so just write login and it's
41:02 - going to take this action event method
41:05 - so just add action event and then event
41:09 - as an argument and then close this
41:13 - method and inside this method what we
41:16 - are going to do is we are going to take
41:18 - the text from our text username and text
41:22 - password and we are going to check this
41:25 - so just call if and then using your
41:28 - login model object which we have created
41:31 - in the last video inside the controller
41:33 - just take login model and call the
41:37 - method which we have just created which
41:39 - is is a login method right and in here
41:43 - it takes username and password so we can
41:46 - use these text field so just use text a
41:49 - user name dot get text and second text
41:56 - field text password dot get text okay
42:03 - and then close your if statement and
42:07 - it's going to show you this error so we
42:09 - need to enclose this in our try catch
42:12 - block and
42:13 - we'll be gone and then if this is login
42:17 - method returns us the true value we can
42:21 - set to the labels so we have declared in
42:24 - the last example a label variable we are
42:26 - going to use the same label and then in
42:30 - here we are going to set some text here
42:33 - for example username and password is
42:38 - correct else we are going to set the
42:41 - different methods so just write else and
42:44 - we are going to take same label and this
42:47 - time we will just say that username and
42:51 - password is not correct so just write is
42:55 - not correct and in the catch block also
42:58 - you can just paste the same code which
43:02 - you have written in the else condition
43:04 - okay so if it throws some error then we
43:07 - can also display user name and password
43:10 - is not correct now one last thing which
43:13 - is remaining here is you need to connect
43:16 - this method to the button click event so
43:19 - just copy this method name
43:21 - go to your F XML file select your button
43:24 - and then go to the code and in here in
43:28 - the on action category just select this
43:31 - login method and save your code and then
43:35 - go to your project and then refresh your
43:38 - project and then let's run our project
43:42 - so our app is running now so let's give
43:45 - some random username and password and
43:47 - let's check what message it shows so
43:50 - just click login and it says username
43:53 - and password is not correct and now
43:55 - let's give the correct username and
43:57 - password and correct user name and
43:59 - password in our database table is test
44:02 - and test
44:03 - you see username is equal to test and
44:06 - password is equal to test so when we
44:09 - give username is equal to test and the
44:13 - password is equal to test and when we
44:17 - click login now it says username and
44:19 - password is correct okay so what this
44:23 - app is doing it's basically querying
44:25 - your database table
44:27 - and it matches these values against your
44:30 - table values and if these values are
44:32 - correct it's going to show us user name
44:34 - and password is correct otherwise in the
44:37 - case when we give the random value and
44:39 - click login it's going to give us login
44:42 - is fail or user name and password is not
44:45 - correct till now we have seen how to
44:48 - connect our Java flex application with
44:51 - SQLite database and how we can create
44:54 - this login frame using SQLite and our
44:59 - JavaFX application right and whenever
45:02 - somebody gives his username and password
45:05 - and click login button it says username
45:09 - is correct or not
45:11 - okay now in this video we will see how
45:14 - we can open a new window whenever this
45:18 - login is successful okay so on the
45:21 - successful login we want to open a new
45:23 - window for example it could be for the
45:26 - user of window right so let's get
45:29 - started now see how we can do this so
45:33 - till now we have created this login
45:35 - controller login model and SQLite
45:37 - connection dot Java class and login dot
45:40 - F XML file now first of all we are going
45:44 - to create one more F XML file and this F
45:47 - XML file we are going to name it as for
45:50 - example user so user of the successful
45:54 - username and password
45:56 - this will be the user you know user page
46:00 - okay so just name it as user and just
46:04 - click finish and right click on your
46:07 - user dot F XML file go to source and in
46:12 - here generate controller and just click
46:16 - OK so now we have user dot F XML file
46:19 - and use a dot controller dot Java file
46:22 - write the model for this we are going to
46:25 - create in the next video because in this
46:27 - video we just want to open this user F
46:31 - XML file and we are also going to see
46:34 - how we can transfer the user data from
46:38 - one frame to another
46:40 - okay so for example we want to display
46:43 - the username on the you know user F XML
46:47 - file whenever user logs in so let's see
46:50 - how we can do it now first of all what
46:53 - we are going to do is we are going to go
46:56 - to our user controller dot Java class
47:01 - and in here first of all we will just
47:05 - implement the initialize able write and
47:08 - then add the unimplemented methods and
47:12 - then we are going to create a label here
47:16 - and this label will be for the username
47:21 - for example okay so just right at the
47:25 - rate FX ml and then private label for
47:32 - example user lb l for user label okay
47:37 - and add the imports for the label and
47:42 - now we are going to create one more
47:45 - function here and this will be public
47:48 - void once again and this will take one
47:52 - argument which will be a string and we
47:56 - will say its user now whenever the user
47:59 - logs in I want to show his name on the
48:03 - label of this other of XML file which we
48:07 - are going to open so we will just take
48:09 - this label and then we will call a
48:12 - method called set text here and then we
48:16 - will just set this user from here okay
48:19 - so this is our controller code now what
48:24 - I'm going to do is I'm going to open my
48:26 - user dot F XML file and then open with
48:31 - scene builder and in here we have the
48:36 - anchor pin let's delete this anchor pin
48:39 - and just add some new container here we
48:43 - can take a border pins for example okay
48:47 - so just take this border pin and drag
48:49 - and drop and border pain has
48:53 - these six component top left center
48:55 - right and bottom it's I think five right
48:59 - now in here in the border pain what I'm
49:02 - going to do is I'm going to add a label
49:05 - so just search for the label control
49:10 - here and I'm going to add it in the
49:14 - middle for example okay
49:16 - well let's add on the for example top
49:20 - right and then in here I'm going to
49:24 - change the name of this label so I will
49:27 - just take the same name which I have
49:29 - given here and then go to code and then
49:34 - in the effects ID just paste this ID
49:38 - here okay and save it and once again go
49:42 - to the property and here instead of
49:44 - label I want to just say user welcomes
49:49 - for example okay now the next thing is
49:52 - to connect this app XML file with our
49:56 - user controller dot Java class right so
49:59 - go to controller here and then choose
50:02 - your application dot user controller and
50:05 - now save you're good okay and after
50:09 - saving just refresh your project and now
50:14 - we will go to the login controller dot
50:17 - Java class and in the last video we have
50:21 - written a code and we have created this
50:24 - function and in this function we are
50:26 - testing whether the username and
50:28 - password are correct and if the username
50:30 - and password are correct then we were
50:32 - printing the username and password is
50:36 - correct on the label on login frame
50:39 - right so in here what I'm going to do is
50:43 - if the username and password is correct
50:45 - which is this if condition then I'm
50:48 - going to go inside the safe condition
50:51 - and in here I'm going to write the code
50:54 - to open this new user dot F XML file so
50:58 - what we need to do here you can go to
51:01 - the main dot Java file and from here you
51:05 - can just
51:06 - copy this code we will use this code
51:09 - more or less as it is but we are going
51:12 - to change something here so just copy
51:15 - this code from here from Maine dot Java
51:17 - and go to the login dot controller dot
51:20 - Java class and in here what we are going
51:23 - to do is first of all we will add stage
51:27 - so just add stage here stage and the
51:32 - name of the stage for example we will
51:34 - take this name right primary stage is
51:37 - equal to new stage ok now the next thing
51:42 - we want to do here is we want to just
51:45 - take this F XML loader and we will
51:48 - create a new instance of this effects ml
51:51 - loader so just write FX ml loader loader
51:55 - is equal to new effects ml loader and
52:01 - then take this loader and instead of
52:05 - this FX ml loader just paste it here ok
52:08 - so what we are doing we are just
52:11 - creating an instance of loader first and
52:13 - then calling the load method onin and
52:16 - instead of login not FX ml we will just
52:19 - call user dot effects ml because it's
52:23 - the name of our effects ml file right
52:25 - just import the stage here and now what
52:30 - we are going to do is instead of using
52:32 - parent we will use pane here so just
52:35 - change parent to pain okay and then
52:40 - import pain and then what we are going
52:43 - to do is we will go to the end of this
52:46 - load function here just before this last
52:50 - bracket you just add a dot and then add
52:54 - open stream from here and then you can
52:57 - now once again see it's showing the
53:00 - error and this is due to it can throw an
53:03 - exception so we need to catch it so just
53:06 - click this bulb here and then you can
53:09 - add a catch Clause to the surrounding
53:13 - try ok because we already have the try
53:16 - catch we just need to add this more one
53:19 - more
53:20 - catch block here so just click ad catch
53:22 - Clause to surrounding try and now the
53:26 - error will go okay now on the next line
53:29 - of Declaration of this pain what we are
53:33 - going to do is we are going to declare
53:35 - our user controller class okay so just
53:39 - call user controller and name it has use
53:42 - a controller for example is equal to and
53:45 - then what we are going to do is first of
53:47 - all we will in the bracket we will call
53:50 - our user controller so we are going to
53:52 - cast the user controller first so just
53:55 - call user controller and then after this
53:58 - bracket what we are going to do is we
54:00 - will take our loader and just paste our
54:02 - loader here and then we will call a
54:04 - method called get controller okay
54:08 - so just add this method which says get
54:10 - controller okay and now we have the
54:13 - instance of our user controller class
54:17 - right which is this one and it has this
54:21 - method which we have created let's
54:23 - change the name I forgot to change the
54:26 - name of this method so this method name
54:30 - we can say get user for example okay and
54:34 - just save it and then go to your login
54:38 - controller dot Java class and in here
54:41 - just copy your user controller object
54:44 - from here and on the next line you can
54:47 - just call this get user function okay
54:51 - and as an argument it takes the string
54:54 - so we want to display the user name from
54:58 - here so user name we can get from this
55:01 - text box which was for the user name so
55:05 - just take text user name dot get text
55:07 - just copy this code from here and just
55:09 - paste here as an argument for get user
55:14 - okay
55:15 - so now I think our code is complete so
55:18 - we can save everything and run our code
55:21 - and now we are going to give the user
55:23 - name and the password which was test and
55:26 - test as we have seen in the last video
55:29 - and then just click login and it's going
55:32 - to open this new
55:33 - no and you can see the name test is
55:36 - appeared on the label right this is due
55:40 - to because we have provided username
55:43 - test here if we if the username was
55:46 - different here for example some name
55:47 - then that name will be displayed here
55:50 - and you can also add a label here which
55:54 - says welcome whatever the user name for
55:57 - example test okay so in this way you can
56:01 - open a new window when your login is
56:05 - successful and then you can display the
56:07 - user name on this label of the new
56:10 - window in this video we will see how we
56:13 - can hide our first window when we open
56:17 - the second window so for example we have
56:20 - our login window here and when I log in
56:25 - and log in is successful is going to
56:27 - open the second window but the first
56:30 - window which is the login window is not
56:33 - hidden so I want to hide this and then
56:36 - open this and we will also see how can
56:39 - we create a sign out button so that when
56:43 - we press this sign out button is going
56:45 - to open our login window once again so
56:48 - let's get started first of all what I'm
56:51 - going to do is I'm going to go to my
56:55 - user controller dot Java class which I
56:57 - have created in the last video okay this
57:00 - is the user window once user logs in
57:03 - then this is the controller for the user
57:06 - dot F XML file right now in here I'm
57:09 - going to create a method for the button
57:12 - click event okay
57:14 - so I will name my method as for example
57:18 - sign out method
57:20 - okay so sign out okay and it takes one
57:26 - argument which is action event so just
57:29 - add action event and give the name to
57:32 - your event here and then what it does
57:36 - it's going to just open the last window
57:40 - right but first of all we need to hide
57:44 - our login window so
57:47 - go to your login controller dot java
57:50 - class and this is the method which we
57:52 - are using on the successful login and
57:55 - password right and we are opening from
57:58 - here the new window which is user window
58:02 - using this code so go inside this method
58:06 - and inside this if condition just above
58:10 - the Declaration of your stage what we
58:12 - are going to do here is just write node
58:15 - and this is Java effects scene node okay
58:20 - so this will show the error so first of
58:23 - all import this Java FX dot scene dot
58:26 - node
58:27 - okay so just imports Java FX dot scene
58:31 - dot node and now in close this node
58:34 - inside these brackets and then call this
58:37 - argument called
58:38 - event here and then call get source and
58:42 - then once again and close this code
58:46 - inside the brackets here and then call a
58:50 - method called dot get seen so just call
58:54 - this get seen here and then call a
58:57 - method called a get window here and then
59:01 - you have your window so you can hide it
59:04 - so you can call a method called
59:06 - hide here okay so this is the code to
59:10 - hide your stage okay and now let's run
59:15 - our code and let's see if this login
59:18 - window is hidden using this code or not
59:21 - so I'm going to save everything and run
59:23 - my code and I'm going to give my
59:26 - username test and password test and I
59:29 - will click login and now you can see
59:32 - this login window is hidden right now we
59:35 - want to do the same for the user window
59:41 - right so we want to create a button
59:43 - which we can click and we can go to the
59:45 - login window so for that we have created
59:48 - this user controller dot Java and in
59:52 - here we have the sign out method which I
59:55 - have created just a moment ago so in
59:58 - here what I'm going to do is I'm going
60:00 - to
60:00 - my login controller Java class and I
60:03 - will copy all this code from here right
60:07 - so this is the same code which I'm going
60:09 - to use to you know open the login window
60:13 - ok so just use this code from node to
60:17 - the end of your stage show ok
60:20 - so copy it and now go to your user
60:23 - controller and go to your sign out
60:25 - method and paste it there and it's going
60:28 - to show this error we want to remove
60:31 - this user controller you know
60:33 - declaration from here because we are not
60:36 - passing any you know parameter from one
60:39 - window to another so just remove this
60:41 - user controller definition here and we
60:45 - will also remove this call of the
60:48 - function which was get user which we
60:50 - have created in the last video so now
60:52 - this is your code okay now in here we
60:57 - want to call the login dot F XML file
61:01 - from the user right so just call a login
61:06 - dot F XML file and this code throws some
61:11 - error so you need to enclose your code
61:14 - inside a try-catch block so just add a
61:19 - try-catch block here and inside your try
61:23 - catch block just enclose this code so so
61:27 - just paste it here okay and your error
61:30 - will go okay so just write this code
61:35 - here and now one thing remains is we
61:38 - need to add a button to our user dot F
61:41 - XML file so just open your user dot F
61:45 - XML file using scene builder and once
61:48 - your user dot F XML file is open first
61:51 - of all what we are going to do is
61:53 - because it's a border pain which we have
61:56 - used in the last video and in the last
61:59 - video if you remember we added this
62:01 - label so what we are going to do first
62:03 - here is we will right click on our label
62:06 - from here and then we will wrap it in
62:10 - the H box so just go wrap in and
62:14 - then choose hbox okay so it's going to
62:17 - wrap your label in a horizontal box and
62:22 - now take a button and place it inside
62:25 - your horizontal box here okay
62:28 - and now what we are going to do is we
62:31 - are going to name our button as for
62:33 - example sign out right and then go to
62:40 - code here and in here on action we are
62:44 - going to give the sign out method which
62:47 - we have created right this is the sign
62:49 - out method which we have created now
62:51 - save your code and then go to your
62:55 - Eclipse IDE and then refresh your
62:58 - project once again so refresh it and now
63:02 - you are ready to go so just run your
63:05 - project and it opens my login window so
63:10 - I will give my username and password for
63:12 - example test and test and when I click
63:15 - login it opens my user window and login
63:19 - window is hidden and when I click Sign
63:22 - Out it opens my login window and user
63:25 - window is hidden right so in this way
63:29 - you can create a sign out button and
63:31 - hide one bin window when you open the
63:34 - second window so I hope you have enjoyed
63:36 - this video please rate comment subscribe
63:37 - and