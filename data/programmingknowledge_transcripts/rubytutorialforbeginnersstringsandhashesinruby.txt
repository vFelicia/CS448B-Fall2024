00:00 - hello everyone welcome to programming
00:01 - knowledge i again welcome your
00:03 - programming knowledge today we are going
00:04 - to start with some uh continue with some
00:06 - more basic data structures in build data
00:08 - structures and ruby so let's start with
00:10 - so let's create a string a and type it
00:13 - as hello world now simply we can print
00:17 - the string
00:17 - onto the console by using put s a so
00:21 - you can first you can type ruby ds dot
00:25 - rb
00:25 - and this would run the program and it
00:27 - says hello world perfectly fine
00:29 - you could also initialize the string
00:31 - using the
00:32 - string inbuilt class string dot news
00:35 - hello
00:37 - world okay now instead of
00:40 - a i'm printing i am printing
00:44 - b and now i clear this
00:47 - and i'll say put sb and it says hello
00:51 - dot hello world and i like it's
00:54 - the same output as the previous one so
00:56 - hello world hello world are perfectly
00:58 - fine
00:58 - now i can type put s a is equal to b if
01:02 - they both are equal so it should return
01:04 - true so it returns true so it return
01:07 - perfectly fine so it returns perfectly
01:09 - fine true is the correct answer for this
01:12 - now you could also type put as a dot
01:15 - length
01:16 - so let's see the output of this so it
01:19 - turns out to be 11
01:20 - good yeah now you could also do a dot
01:23 - size
01:24 - you can and the both of them turn 11. so
01:27 - the both of them work with the
01:28 - same thing so now you can
01:32 - you can also type a
01:36 - dot uh one thing i i'll show you there
01:39 - is a method and now
01:40 - uh just for a second you can comment
01:42 - both of them
01:45 - okay i'll comment out and i'll make an
01:48 - array c and this is an array
01:52 - one two three and i'll put a c dot
01:55 - include include
01:58 - uh what does it include what i want to
02:00 - check does it include two
02:02 - okay so i'll
02:06 - it returns true okay so yes it includes
02:09 - two
02:09 - the same way you can do it for strings
02:13 - also
02:15 - so you can do this both same way you can
02:16 - do it for strings also so
02:18 - i'll do a dot include
02:22 - this character so it should
02:27 - return true the same it turns for this a
02:29 - also
02:30 - so the include method is used for both
02:32 - strings and arrays
02:34 - now uh since i don't need this
02:39 - okay so i'll remove this yeah so now
02:42 - what i can do
02:43 - uh you want to increase the access the
02:46 - first character you can
02:47 - please say a of zero so this would give
02:50 - you the particular index so
02:51 - i'm showing you this gives me first
02:53 - character now
02:54 - to access the last character you can do
02:57 - either a
02:58 - dot length minus 1 so
03:01 - this would also work perfectly fine okay
03:04 - it does stay it gives you the last
03:05 - character but you could also use
03:07 - negative slicing and
03:08 - string uh string like in ruby there is a
03:11 - negative slicing which returns you from
03:12 - the end
03:13 - okay minus one is the last one minus two
03:16 - minus three minus four you keep on going
03:17 - like
03:18 - this okay so i'll show you oh it also
03:20 - gives the last character
03:22 - so this is all two ways you can
03:24 - manipulate strings in ruby
03:27 - uh now one we are left with some another
03:30 - command such as some basic is
03:32 - a dot up case okay
03:36 - and a dot uh
03:42 - put s a dot down case first i'll do one
03:44 - by one
03:47 - now a dot up case returns upper string
03:49 - and a dot down
03:50 - case returns the
03:56 - lower case so by default it was lower
03:58 - okay now i'll do a
04:00 - dot down a dot up case
04:03 - and i'll do put s a so
04:06 - here you might see sorry so now here you
04:10 - see
04:10 - that i did a dot up case but then put s
04:14 - a then turned out to be the one in the
04:16 - upper
04:18 - upper capital letters so for that you
04:20 - need to do you put an explanation mark
04:21 - which is all
04:22 - uh now this would what it will do this
04:26 - it will now do the inbuilt operation
04:29 - within that string so see the output of
04:32 - this
04:33 - now it converts the default a to up case
04:37 - as well
04:37 - okay so so this is good
04:41 - so now we can move to hash maps
04:44 - so hash maps is like
04:47 - grades is equal to new
04:51 - okay now you can do
04:55 - grades of n
04:58 - is equal to a plus
05:01 - and grades of nine
05:05 - is equal to a and grades of eight
05:11 - is equal to b now let's put s
05:16 - grades
05:22 - so here is the hash map for the 10 is a
05:24 - plus 9 is a and 8 is b
05:26 - now let's put as grades of n okay
05:30 - uh this should give
05:33 - us a plus perfectly fine so this is how
05:35 - we can you use it
05:37 - but what if i do grades of seven
05:41 - so rates of seven is not defined
05:44 - and when i run this it gives me nothing
05:48 - so to avoid that you can use dates
05:52 - for default if it is not default
05:55 - i'll do improve okay now this would turn
06:00 - out to be improved
06:01 - now i'll run this again and it says
06:04 - improve
06:04 - okay so this is how i can set the
06:08 - default value
06:09 - okay now i can uh use uh
06:12 - this is good now i comment this out
06:16 - a is dot new and b
06:19 - is equal to hash dot mu
06:22 - now a of 0 is equal to 1
06:25 - just assigning some random values or let
06:27 - this be a
06:28 - b of 0 is also
06:32 - a okay
06:36 - yeah now i'll do put s
06:40 - i'll put s a
06:43 - and put s b
06:51 - so initialize constant b
06:56 - uh like line number 15
07:01 - okay let me check what's the issue so
07:04 - uh like there was some like it was like
07:07 - i might have not saved the file
07:09 - uh like uh a is regular dot new b is
07:12 - going to hide dot new a of zero zero a
07:14 - and b of zero
07:15 - a when i put s a and b okay
07:18 - so basically when i put s a n input is b
07:21 - so both of the same are equal both of
07:22 - the hash maps are equal
07:24 - so i can also compare them using an
07:26 - equal to operator so
07:27 - this gives out the output true okay
07:31 - now now we could also
07:35 - like now it's perfectly fine
07:38 - now let's move to this this hashtag as
07:40 - well
07:41 - now i can do put s
07:45 - great start length
07:50 - so this would give me the same like
07:56 - okay i had to uncomment this sorry yeah
08:00 - so now i'll put great short length it's
08:02 - three and i'll do
08:03 - great sort size it would also return me
08:06 - three
08:07 - now i can do put s
08:13 - great dot to underscore a and
08:19 - and it should may return like this as a
08:21 - string oh sorry it converts this to an
08:23 - array so this is also fine so this is
08:27 - how you can do it
08:28 - and one thing because i converted this
08:32 - uh this to an array okay so i told you
08:35 - uh you could also
08:37 - if you want to see in other way around
08:38 - you could do this
08:44 - you can store this inside a variable
08:49 - x
08:53 - and you can print x
08:56 - okay so this is how we can do it
09:00 - okay so this is how you convert into an
09:02 - array and
09:04 - one uh one small exercise we can have
09:07 - right now
09:08 - uh you could also do
09:12 - this as well put a
09:15 - s grade dot has underscore value
09:19 - so this worked as like i told you
09:22 - the one like we had in uh like string
09:24 - that is include
09:25 - so it does it has a value 10 as a key
09:31 - okay so okay let's uh
09:36 - okay so this is returning false
09:39 - this is our value sorry so this is how
09:42 - you can do it
09:42 - so 10 is not a value it is a key so for
09:46 - that
09:47 - you can run this true okay
09:50 - so this is how you can do it for key and
09:52 - value so by mistake
09:53 - i had like so like dated for uh
09:57 - as key and it has value so you can
09:59 - understand book here value
10:01 - so let's move to a very small size since
10:04 - we covered strings and hash map in this
10:06 - string is equal to hello world so let's
10:08 - create a program
10:09 - to crown the frequency so first creates
10:12 - a frequency as a hash map frequency
10:15 - is equal to hash frequency
10:18 - is equal to hash dot
10:22 - new so this would maintain the frequency
10:26 - by initially the frequency should be
10:28 - frequency dot default
10:30 - is equal to zero now we do a
10:34 - s dot e kind of scope care
10:37 - we'll make a do and i have the
10:40 - value okay okay i have the value
10:44 - then frequency dot val
10:48 - plus equal to equal to 1 and i can end
10:52 - this loop
10:52 - and simply put as frequency
10:55 - now let me clear this loop and run this
10:58 - so here i have got all the frequency of
11:00 - the particular graph
11:01 - so thank you everyone for watching this
11:03 - so it was a simple exercise
11:05 - make sure you uh do this else it will
11:07 - throw error this
11:08 - will throw error because you need to
11:10 - initialize frequency of default to
11:12 - zero else it will throw arrow because uh
11:15 - either you can also put a tricast
11:16 - statement if statement
11:18 - it inside this but this is a better way
11:19 - of doing it so thank you everyone for
11:21 - watching this
11:22 - so uh i hope to see you again in the
11:25 - next
11:25 - thank you