00:00 - hello guys in this video I'm going to
00:02 - show you what is inheritance and what
00:05 - are subclasses and super classes in
00:09 - Python so we all know that python is an
00:13 - objectoriented programming language and
00:16 - inheritance is one of the most important
00:19 - Concepts in objectoriented programming
00:23 - language now what is
00:26 - inheritance inheritance allows us to
00:29 - define a class in terms of another class
00:34 - which makes it easier to create and
00:36 - maintain our
00:37 - application so for example uh you have
00:41 - created a class which is generic in
00:46 - nature and you want to you reuse it
00:49 - again and again in different situations
00:52 - you can use
00:53 - inheritance to uh you know show or
00:58 - inherit some of the the trades or all
01:01 - the trades from the class to your class
01:06 - which you want to make so you don't need
01:09 - to write a class from the scratch you
01:13 - can inherit from the super class the
01:18 - class from which we are inheriting is
01:20 - called a super class and the class which
01:23 - is inheriting is called a
01:26 - subass let me give you an example for
01:29 - for example I create a class which I
01:33 - call this is a
01:38 - parent parent okay and this class has
01:45 - two values or two
01:49 - variables value one is equal
01:54 - to uh let's say it's a string so I say
02:00 - this
02:01 - is value
02:04 - one and in the same way I will Define
02:09 - value two this should be value right so
02:14 - I will Define value two variable which
02:18 - is the second member variable of this
02:22 - class and this is value two okay now
02:30 - for example I want to
02:32 - reuse the variables which are their
02:36 - member variables which are there in the
02:39 - parent class and I want to create a
02:42 - second class and I want to reuse these
02:46 - member variables in other class how we
02:49 - can do it so I will Define uh second
02:54 - class for
02:56 - example class and I will name it as
03:03 - child and this class wants to reuse
03:08 - these member variables from the parent
03:14 - class so what I can do is I can inherit
03:18 - from the parent class in the child class
03:22 - and to
03:23 - inherit the parent class in the child
03:26 - class we just use these two brackets and
03:30 - inside these two brackets we just pass
03:33 - the name of the class from which we want
03:35 - to inherit so in this case we want to
03:38 - inherit from this parent class so we can
03:41 - just
03:42 - pass this parent class name and in the
03:46 - brackets right now we can use this
03:51 - values from the instance of our child
03:55 - class so for example I don't want to do
03:59 - anything here I can just write Pass and
04:04 - Pass if you don't know what is pass pass
04:07 - is just a
04:09 - placeholder so uh you know it doesn't do
04:14 - anything but if suppose you don't want
04:17 - to implement your class and you want to
04:21 - uh leave your class as it is then pass
04:25 - will help you to avoid any errors so
04:29 - let's see what what happens when we
04:31 - don't use B here and I will save my
04:35 - program and run
04:38 - it and it says unexpected indent this
04:42 - indent should not be here one it once
04:48 - again so it shows an error and what is
04:52 - the error because we haven't given uh
04:56 - pass here it uh expect
05:00 - python expect that we Define some you
05:05 - know definitions of member variables or
05:08 - member functions here so what we can use
05:11 - is we can use pass in order to avoid any
05:17 - errors now whenever we want to uh make a
05:22 - child class instance for
05:26 - example child like this is equal
05:31 - to and we want to make the instance of
05:33 - this child class we can make it like
05:39 - this so we just can make the instance
05:43 - child you can just give underscore to
05:46 - differentiate this instance from this
05:50 - class but let's uh first create an
05:53 - instance of the parent class and then we
05:57 - will create the instance of child
06:04 - parent and parent is equal
06:08 - to
06:10 - parent so we have created the instance
06:13 - of parent class and from this instance
06:16 - we can call parent dot value one which
06:21 - is this one and we just want to print
06:25 - this parent. value one so we can just
06:32 - print and inside our print we can just
06:35 - pass this
06:37 - parent. print one
06:40 - here and let's uh say we will Define it
06:44 - this child class later so I will just uh
06:48 - run this once
06:50 - again and it prints this is value one
06:54 - okay in a similar manner you can call
06:58 - second value from p
07:00 - and this you already know
07:02 - right now suppose child instance want to
07:07 - use value one and value two I create the
07:10 - instance of child and because I'm
07:13 - inheriting from my parent class this
07:16 - value one or and value two which are
07:19 - member member variables of this parent
07:23 - class is available to use from the
07:26 - instance of child class also because
07:30 - because by inheritance we are allowing
07:34 - the super class which is this parent
07:37 - class from which we are inheriting so
07:41 - the class from which we are inheriting
07:43 - is called super class and the class
07:47 - which is inheriting from Super class is
07:50 - called
07:53 - subclass so from this instance we can
07:56 - call this member Val values or variables
08:02 - from the parent
08:03 - class so I can just once again copy this
08:10 - print value one but this time I will use
08:13 - the instance of child
08:15 - class and you can see here I haven't
08:19 - implemented anything in the child class
08:23 - except the inheritance right so I will
08:26 - just run the program once again
08:30 - and it it prints this double times so
08:35 - for example I delete this to illustrate
08:38 - this example clearly I will once again
08:43 - run this and it prints this is value one
08:46 - and this is value two which is printed
08:49 - by the instance of child class right
08:53 - that means uh we can use the member
08:57 - variables or member Val use of parent
09:01 - class when we inherit from parent class
09:05 - to a child class right now you can
09:09 - inherit from multiple classes so for
09:13 - example you have parent class one you
09:16 - have parent class
09:21 - two and you want to inherit from both
09:26 - the classes you can inherit from
09:30 - parent one like this comma parent two
09:34 - like this okay so you can even inherit
09:38 - from two classes or multiple classes at
09:41 - the same time you just need to separate
09:44 - those parent class by this
09:47 - comma okay so just remember this so in
09:51 - this way you can use inherit in Python
09:55 - and I hope you have enjoyed this video
09:57 - please wait comment subscribe and bye
09:59 - now