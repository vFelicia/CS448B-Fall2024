00:00 - hey guys welcome to the next video in
00:02 - Python thread tutorial for beginners in
00:04 - this video we will see how thread
00:07 - synchronization works in the case of
00:09 - multi-threading in Python and we will
00:12 - talk about how to use locks in the case
00:15 - of thread synchronization so first of
00:19 - all what is thread synchronization so
00:22 - thread synchronization is defined as the
00:24 - mechanism which ensures that whenever
00:27 - two or more threads are executed in
00:31 - parallel or concurrently and if they are
00:35 - sharing the same resource in that case
00:39 - all the thread should not work
00:42 - simultaneously or parallely on the same
00:45 - resource so let me explain the thread
00:48 - synchronization problem with the diagram
00:51 - so in this diagram you can see there are
00:54 - three threads and all these threads are
00:57 - sharing the same resource it can be a
01:00 - global variable for example so as long
01:03 - as all these threads are accessing the
01:06 - shared resource one by one not at the
01:09 - same time everything will work fine but
01:13 - the problem arises when two or more
01:15 - threads try to access the same global
01:18 - variable or shared resource at a
01:21 - particular time and this kind of
01:25 - situation is called the race condition
01:27 - so a race condition occurs when two or
01:31 - more threads can access the same shared
01:35 - data and they try to change the value of
01:38 - this same shared data at the same time
01:42 - and whenever this kind of race condition
01:44 - occurs the value of the variables may be
01:48 - unpredictable because if two threads are
01:52 - working on the same global variable at
01:55 - the same time you will never know which
01:57 - thread has worked on this variable so
02:00 - the result is the unpredictable value of
02:03 - a variable now let me explain this
02:06 - problem with an example so I have this
02:09 - sample code in which in the first line
02:11 - I'm importing threading module
02:13 - and in the second line I'm just
02:16 - declaring a global variable now I have
02:19 - two functions here one is thread tasks
02:22 - and other is mean task now inside this
02:25 - thread task function I want to increment
02:28 - the value of x every time by one so this
02:32 - is the code for this and I want to
02:34 - increment this value by one ten times so
02:38 - that's why I have used this for loop in
02:40 - the range 0 to 9 so it's going to
02:44 - increment the value of x 10 times inside
02:47 - this loop now because this X is a global
02:50 - variable I have just added this global
02:54 - keyword in front of X so our function
02:57 - knows that this X is not a local
03:00 - variable it's a global variable so this
03:03 - function is simple enough it just
03:06 - increments the value of x 10 times
03:08 - inside the loop and this X is this
03:12 - global variable which we have declared
03:15 - outside this function now in the main
03:18 - task what I'm doing is I'm creating two
03:21 - instances using the threading module
03:23 - with the help of thread class this we
03:26 - have already seen in the last video how
03:28 - to create threads using threading module
03:31 - so nothing new in this I have created
03:34 - two instances t1 and t2 and I'm passing
03:38 - the target is equal to the function name
03:40 - which is this function which is tried a
03:43 - task so both the threads will call the
03:47 - same function tried task and then I'm
03:49 - just starting both the threads with the
03:52 - help of start function and then I'm just
03:55 - using the join methods on both of the
03:58 - instances now here inside our main if
04:01 - condition I'm just calling our main task
04:05 - in which our threads are created and
04:08 - executed and then at last I want to
04:11 - print the value of x when all the thread
04:13 - execution has been completed so let's
04:16 - run this script and let's see what
04:18 - happens so you can see here the result
04:20 - here is 20 which is expected because we
04:23 - are incrementing the value of X 10 times
04:27 - using two threads so the value of X will
04:29 - be incremented ten times by thread t1
04:33 - and ten times by 22 and as a result the
04:37 - value of X becomes 20 but as soon as I
04:41 - increment the value of this range let's
04:45 - say this is 10,000 and I want to just
04:48 - execute this program once again there is
04:51 - no problem until now we can just run
04:55 - this program again I mean again we will
04:57 - not see this problem because we are
05:00 - incrementing the value of x 10,000 times
05:04 - with a single thread so we have two
05:07 - threads and the result is 20 thousand
05:10 - which is absolutely fine
05:12 - now let's increment the value of range
05:14 - once again 200 thousand and now I want
05:18 - to show you the problem so as soon as
05:21 - you do this you can see that the thread
05:25 - synchronization problem occurs so here
05:28 - you can see the result is not two
05:30 - hundred thousand which we were expecting
05:32 - because for such large value this
05:35 - scenario of thread synchronization is
05:38 - happening so the two threads try to work
05:43 - on the same variable at the same time
05:45 - and as a result the value of x is
05:49 - unpredictable so this thread
05:51 - synchronization problem you will see
05:53 - when you try to work on a same variable
05:56 - multiple number of times so in this case
05:59 - we have a hundred thousand iterations
06:03 - and both the threads try to iterate over
06:06 - the same variable using two threads and
06:09 - the result is unpredictable let's try to
06:13 - execute this once again so you can see
06:15 - the result is always different every
06:18 - time I execute this program because the
06:22 - result is unpredictable so how to solve
06:25 - this problem so one way of solving this
06:28 - problem is by using the locks so first
06:31 - of all let me just change this program
06:33 - and try to use locks in this Python
06:37 - script so to use locks what you can do
06:40 - is you can
06:41 - their local variable here for example
06:44 - lock is equal to threading dot class
06:49 - called lock so this is going to give you
06:52 - an instance of lock now this lock clasp
06:55 - have to method one is acquire and other
06:59 - is released now acquire method is used
07:02 - to lock and release method is used to
07:06 - release the lock so let me just complete
07:09 - this script and then I will explain what
07:13 - does these functions do so what I'm
07:16 - going to do is I'm going to pass this
07:17 - lock instance as an argument of the
07:20 - thread task function so I'm going to
07:22 - just write as is equal to and then we
07:26 - will just pass over lock instance as an
07:29 - argument of this treaded task
07:32 - same we will do for the second thread
07:36 - and because we have passed this argument
07:39 - we need to add this argument here also
07:41 - so I'm going to just pass the lock
07:43 - instance as an argument of this function
07:46 - and now at last what we are going to do
07:49 - is just before we change the value of
07:53 - the global or the shared data we use
07:57 - this lock variable and call the method
08:01 - called acquires and just after you
08:04 - finished changing the resource or the
08:07 - shared data you use a method called lock
08:11 - dot release so once again we have passed
08:15 - this lock instance which we got from
08:17 - this lock class as an argument of this
08:21 - function so this is the lock instance
08:23 - and there are two main method inside
08:26 - this lock class which are acquire and
08:29 - release this acquire method you use to
08:32 - acquire the lock this lock can be
08:35 - blocking or non blocking so this acquire
08:39 - method takes one argument which is true
08:42 - or false by default the value of
08:45 - argument is true which means that this
08:49 - acquire is blocking by default so what
08:53 - does this lock dot acquire
08:55 - we'll do it locks the axis of the shared
08:58 - variable in our case this is X and at
09:02 - this time only one thread can work on
09:05 - this variable whatever thread have the
09:09 - access to this function at a particular
09:12 - time so until and unless one thread
09:16 - execution is completed on this variable
09:19 - after that this lock is released that
09:22 - means that the other thread can work on
09:24 - this variable using the lock once again
09:28 - so whenever second thread wants to try
09:32 - to access this variable it will just
09:34 - lock the access to this variable first
09:36 - of all and then work on this variable
09:39 - whatever you want to do you want to
09:41 - increment the value or change the value
09:43 - of x and then release the lock and
09:46 - releasing means that we once again want
09:50 - to allow the other thread to work on
09:53 - this shared resource so this mechanism
09:56 - will allow only one thread to access
09:59 - this shared resource at a particular
10:02 - time so the Treader synchronization
10:05 - problem will not occur so now let's just
10:08 - run the program once again and let's see
10:11 - what's the result so you can see this
10:12 - problem and this problem is coming most
10:15 - likely because of this problem because
10:19 - we haven't provided ours as the tupple
10:23 - so we need to provide the sog as our
10:26 - tupple so always remember whenever you
10:28 - want to pass any argument using this
10:30 - args keyword you need to pass them as
10:33 - tupple so once again I'm going to just
10:36 - try to run this program and you can see
10:39 - the result is whatever we expected so
10:42 - because we are incrementing the value of
10:45 - x hundred thousand times and there are
10:48 - two threads which are working on the
10:50 - same variable so we get the two hundred
10:53 - thousand result which is expected now
10:56 - let me run this program again and again
10:59 - and you can see every time now we get
11:02 - the expected result which is two hundred
11:05 - thousand so this is how
11:08 - you can solve that thread
11:10 - synchronization problem using locks so
11:15 - this is how you can use locks to
11:18 - synchronize your threads in Python I
11:20 - hope you have enjoyed this video and I
11:22 - will see you in the next video