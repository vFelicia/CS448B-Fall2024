00:00 - in this video we will talk about a
00:02 - command line tool which is called pdb
00:05 - which we use to debug our python script
00:10 - now pdb stands for python debugger and
00:14 - it is already installed whenever you
00:17 - install python on your operating system
00:20 - so you don't need to install a pdb
00:23 - separately if you have python installed
00:26 - it will work on your terminal now you
00:30 - might wonder why I'm using pdb if I
00:35 - already have the pycharm IDE and I can
00:39 - debug my code on the pycharm IDE
00:42 - now in real life situations most
00:46 - probably you will run your python script
00:49 - on some kind of a server now generally
00:52 - on these servers you don't have the
00:55 - luxury of using an IDE you will have to
00:59 - use the terminal in order to debug your
01:03 - python script and that's why I wanted to
01:06 - show you how to debug your python script
01:08 - using the command line tool which is pdb
01:13 - now to start with I have this simple
01:15 - python script which asks the user to
01:18 - input two numbers and these numbers will
01:22 - be saved in these two variables which is
01:25 - X and Y now we are using a function
01:28 - called add to add these two values and
01:32 - then we are just transferring the result
01:34 - into this Z variable and we are just
01:38 - printing the value of Z
01:40 - now in order to open the terminal in the
01:43 - pycharm IDE you just need to click on
01:46 - this option which says terminal and if
01:49 - you don't want to use this terminal you
01:52 - can also use a Windows command prompt or
01:56 - Linux terminal or if you are working on
01:58 - Mac OS you can also work on the Mac
02:01 - terminal so what you need to do is you
02:05 - just need to copy the path of your file
02:09 - where you are working and then you just
02:12 - need to CD to the directory in which you
02:14 - are working in so I'm going to just CD
02:17 - to the directory in which my python
02:20 - script is there and then the command
02:22 - will be same to run and use pdb on your
02:25 - terminal so you can use the Windows
02:27 - command prompt or this terminal which is
02:30 - available in the pycharm or any other
02:33 - terminal which is available on your
02:36 - operating system so I'm going to use
02:38 - this terminal which is available in the
02:41 - pie charm now I'm going to move this
02:43 - terminal to the right hand side so we
02:46 - will be able to see the code and the
02:49 - command terminal at the same time now in
02:52 - order to run your script you already
02:53 - know that you just need to give this
02:56 - command which is Python and the name of
02:59 - your script in my case the name of my
03:02 - script is debugging dot py so I'm going
03:05 - to just press enter and then it's ask me
03:08 - to provide the first number I'm going to
03:11 - provide the first number and then I'm
03:13 - going to provide the second number which
03:15 - is going to give me the sum of these two
03:18 - numbers so here it prints three three
03:21 - four four which is not the addition of
03:24 - these two numbers now some of you might
03:26 - already know what is the problem with
03:28 - this code and how to solve it but we
03:32 - will use the debugger to find out what
03:36 - is the problem and how to solve this
03:39 - problem so that whenever we enter two
03:42 - numbers it's going to give us the proper
03:44 - sum of these two numbers and not the
03:47 - other answer now in order to start the
03:50 - debugging on your python script you can
03:53 - provide this command so you can give
03:55 - python hyphen M pdb and the name of your
04:00 - script so my script name is debugging
04:02 - Dot py and then I'm going to press enter
04:05 - and now you will be able to see this
04:07 - kind of interface and you will be able
04:10 - to see pdb printed here and there is a
04:14 - cursor blinking here and this python
04:16 - debugger which is python pdb starts from
04:20 - the first line of code which you have on
04:23 - your script so we are on this line which
04:27 - is this line in our script which is the
04:31 - Declaration of this add function now the
04:34 - first thing you need to know in order to
04:36 - work with this pdb interface is the hell
04:40 - help command so you can give this help
04:43 - command here or you can give the H
04:46 - keyword which means the help command so
04:48 - I'm going to give the full help keyword
04:51 - here and then press enter which is going
04:53 - to give us the list of each and every
04:56 - command which you can use with the pdb
04:59 - so these are all the commands which you
05:02 - can use with pdb the most important
05:05 - command which we will be using
05:07 - frequently is the next command or
05:11 - shortcut of the next is n or we will be
05:14 - using the step command or the S keyword
05:17 - for the step command otherwise we will
05:20 - be using the C keyword or the continue
05:23 - command these are the three most
05:25 - frequently used command to work with the
05:29 - pdb now you can see you can type help
05:32 - and the name of the command in order to
05:35 - know more about that command so I'm
05:37 - going to just write help here and the
05:40 - name of the command let's say I want to
05:43 - just know more about the next command so
05:46 - the next command continue execution
05:48 - until the next line in the current
05:50 - function is reached or it returns so in
05:53 - this way you can get the help about each
05:56 - and every command which you have here
05:58 - now once again we are going to find out
06:00 - at which position pdb is right now we
06:05 - already know that pdb is on this line
06:08 - but there is a command called where or
06:12 - you can also write w to find out where
06:15 - right now your pdb is so I'm going to
06:18 - just write where and it's going to show
06:21 - on which line your pdb is currently
06:24 - standing so now I'm going to give the
06:26 - end keyword you can also give the next
06:28 - command here and I'm going to press
06:30 - enter and it's going to go to the next
06:33 - line which is this line which is the if
06:37 - name is equal to Main in so now we are
06:41 - on this line right once again when I
06:45 - press enter it's going to execute the
06:47 - last executed command so we have
06:50 - executed last this next command so if
06:53 - you press enter directly without
06:55 - entering any command it's going to
06:58 - execute the last executed command so now
07:01 - we are on this line which is this one
07:05 - which takes the input from the user and
07:09 - you will also be able to see on which
07:11 - line this code is so this line is at the
07:14 - seventh line now once again I'm going to
07:17 - press help here and then press enter and
07:20 - now I want to use this continue command
07:22 - so this continue command is used to
07:25 - continue the execution of your script
07:27 - from the point where you are right now
07:31 - so we are right now at this line which
07:34 - is line number seven and if I press C or
07:38 - if I type continue new which is this
07:41 - keyword and I press enter then my
07:44 - program is going to execute and it will
07:46 - ask me the first number so I'm going to
07:49 - provide the first number let's say 2 and
07:52 - then I'm going to provide the second
07:53 - number which is 3 and then when I press
07:57 - enter it's going to execute the program
07:59 - and it's going to print the result which
08:02 - is 23 in this case which is wrong and
08:05 - after the script is finished the pdb is
08:09 - going to restart the execution from the
08:11 - top so you can see this line the program
08:14 - is finished and will be restarted so
08:17 - once your program is finished the pdb is
08:21 - going to restart it from the starting
08:23 - point from where it has started so I'm
08:27 - going to quickly provide the N command
08:29 - for next and once again next and I'm
08:33 - going to once again press next and
08:35 - provide the number which is 3 this time
08:38 - so now we are on this line which is the
08:40 - line number eight which is this line so
08:43 - the execution of this line is finished
08:45 - now there is a print command in pdb so
08:49 - you can just write print and the name of
08:52 - the variable so I'm going to just write
08:54 - X here because this line is already
08:57 - finished and it's going to give me the
08:59 - value of x so when I press enter it's
09:02 - going to print 3 which is the value of x
09:05 - once again I'm going to press the N
09:08 - command or the next command and then I'm
09:11 - going to provide the second number which
09:13 - is 4 this time and I'm going to print
09:17 - the value of the Y now so till now
09:20 - nothing seems to be wrong with this code
09:23 - so let me just press h for the help once
09:27 - again and we are going to see the list
09:28 - of commands once again and now I want to
09:31 - use this command which is what is
09:35 - so I'm going to just write what is and
09:39 - the name of the variable which is X okay
09:42 - so earlier we have printed the value of
09:45 - x which is 3 and now I'm writing what is
09:49 - X so we want to know what type of value
09:52 - is inside X so I'm going to just press
09:55 - enter now and once you do that you will
09:59 - see that X is an instance of class
10:03 - string and we wanted to enter the number
10:07 - right so now we know what is the problem
10:10 - so because input function is going to
10:13 - return the string value and this add
10:16 - function is just concatenate these two
10:20 - string values and it's not adding the
10:23 - two numbers so what is command is going
10:26 - to give you the information about the
10:28 - variable or the function but we will
10:31 - continue our debugging so you can see
10:33 - here right now we are on this line which
10:36 - is this line so now I want to go inside
10:40 - the add function in order to inspect if
10:43 - it's working fine or not so we are on
10:45 - this line where add function is called
10:48 - so I can use this command which is the
10:52 - step command or I can use the shortcut
10:54 - which is s in order to step into the
10:58 - function where we are right now so I'm
11:01 - going to just type step here and then
11:03 - press enter and you will see we are here
11:06 - on the Declaration of add function once
11:10 - again and if we Type n or next once
11:14 - again we will go to the next line of
11:16 - this function which is this line which
11:19 - we use to add the value of X and Y so
11:23 - this command step or this letter s can
11:26 - be used to step into your function or
11:30 - step into your class if you are using
11:33 - class it's going to step into or inside
11:36 - that function so now I'm going to just
11:39 - press n to go to the next line and this
11:42 - is the return sum line and now we
11:44 - already know what's the problem so we
11:46 - can press C or continue in order to
11:49 - continue the execution of this program
11:51 - so I'm going to press C and then press
11:53 - enter which is going to continue the
11:56 - execution of the program and it has
11:58 - printed the result and also it has
12:01 - restarted the pdb once again from the
12:05 - starting of the script so now let's
12:07 - correct this code and in order to
12:10 - convert the input into int or the float
12:13 - you can just type cast the string to end
12:16 - using this int function so I am going to
12:19 - just use this in function in front of
12:23 - both the input values so now we know
12:26 - that our script is most probably going
12:28 - to run fine so let's try to set the
12:31 - breakpoint at this line because both the
12:34 - values will be available at this point
12:36 - point and we will know the values of X
12:39 - and Y at this point so we will be able
12:42 - to see the type of both the values so
12:45 - first of all what is a break point so
12:47 - when you set a breakpoint at some line
12:50 - the program is going to stop exactly at
12:54 - this line so generally we have seen that
12:56 - if you start the pdb it's going to start
12:59 - from the beginning of your script but if
13:02 - you set the breakpoint the execution
13:04 - will only stop at the line where you
13:07 - have set the breakpoint so once again
13:10 - I'm going to press h to get the help and
13:13 - I will see which command can I use to
13:16 - set the breakpoint so there is this
13:18 - command called Break which I can use to
13:21 - set the breakpoint so let me get the
13:24 - help about the break and it's going to
13:26 - give us the description about the break
13:29 - command so you can use the break keyword
13:31 - or the b letter in order to set the
13:34 - breakpoint so you can see it takes these
13:36 - arguments so in order to set the
13:38 - breakpoint you just need to write break
13:41 - and then the line number on which you
13:43 - want to set the breakpoint so let's say
13:45 - I want to set the breakpoint on the line
13:47 - number nine so I can just write break
13:50 - and then 9 and then press enter which is
13:54 - going to set the breakpoint on line
13:56 - number nine now I can give the continue
13:59 - command in order to continue the
14:01 - execution of the script and now when I
14:04 - press continue it's going to first ask
14:06 - for these two values so I'm going to
14:09 - quickly give the value of first number
14:12 - and the second number and then when I
14:14 - press enter it's going to stop at this
14:17 - line where we have set the break point
14:19 - right so right now we are on this line
14:23 - which is line number nine and now I can
14:26 - give this command which is what is X and
14:29 - once again it says that the type of this
14:33 - x is string so what might be the problem
14:36 - them the problem is after changing our
14:41 - script we haven't restarted the pdb we
14:45 - haven't exited the pdb and restarted the
14:48 - pdb so this script is not loaded after
14:51 - we have edited the code right so in
14:55 - order to quit the pdb you give the quit
14:58 - command or the queue letter so just
15:01 - press q and then press enter which will
15:04 - allow you to come out of pdb and let me
15:06 - run the debugging once again so you can
15:09 - once again give this command python
15:10 - hyphen M pdb debugging Dot py and then
15:14 - press enter which is going to restart
15:16 - the debugging and now this script is
15:20 - loaded once again with the correct code
15:23 - which is end so now let me just uh put
15:26 - the break point on the line number 10
15:29 - which is this line and now I'm going to
15:31 - press C to continue and I'm going to
15:34 - give these two numbers let's say and you
15:36 - can see the program is halted on the
15:39 - line on which we have set the breakpoint
15:41 - on so once again I'm going to give the
15:44 - what is command and the name of the
15:46 - variable which is X and then press enter
15:48 - and now you will see the type of X is
15:51 - now int and we have solved the problem
15:54 - so we can simply press C to continue and
15:57 - see the result and you can see it prints
16:00 - the result which is 8 which is the
16:02 - addition of 3 and 5 so our debugging was
16:05 - successful and we are now seeing the
16:08 - expected result which we wanted to see
16:11 - so this is how you can use pdb to debug
16:14 - your python script now there are few
16:16 - more ways of using pdb with your python
16:20 - script so let's see those other ways in
16:22 - which we can use the command pdb with
16:25 - our python script so I'm going to press
16:27 - Q in order to exit out of the debugging
16:30 - so the second way of using pdb is to
16:33 - import the pdb inside your script so I
16:36 - can can just import the pdb library
16:40 - inside our script and then in order to
16:44 - set the breakpoint I can use pdb dot set
16:48 - Trace so this will set the break point
16:52 - on the next line after this line so I'm
16:56 - going to just clear the terminal by
16:58 - right clicking and then pressing clear
17:00 - buffer and once again to start the
17:02 - debugging I just need to give this
17:04 - python command and the name of my script
17:07 - so once you have this import inside your
17:10 - script and you have this code inside
17:11 - your script you don't need to give the
17:14 - pdb command you just need to run your
17:16 - script normally with the python command
17:19 - so my program execution is here which is
17:21 - running the program normally so I'm
17:24 - going to just grip the value of X and Y
17:27 - which is 3 and 4 and it's going to stop
17:30 - the execution at this line which is just
17:33 - after the set Trace code okay so because
17:37 - we have set the breakpoint on this line
17:40 - using this line of code it's going to
17:42 - stop at this point and once again I'm
17:45 - going to use for example what is command
17:48 - and I want to see the value of x and
17:51 - it's going to show us the type of X
17:54 - which is end so this is the other way of
17:56 - using pdb in your script some people
17:59 - also like to use pdb directly at the
18:03 - point where they want to set the
18:05 - breakpoint and the benefit of using this
18:07 - type of code is if you are using any
18:10 - linting tool it's going to warn you on
18:13 - the same line so the developer will know
18:16 - that he needs to remove this line
18:19 - because linting will fail because there
18:21 - is a semicolon here and we are using two
18:24 - line of code in the same line so it's
18:27 - going to give us the warning and that's
18:29 - how the developer will know that he
18:31 - needs to remove this line so he is going
18:34 - to remove this line after the script is
18:37 - working fine so this was the second way
18:39 - I'm going to quit out of the pdb once
18:42 - again and let me show you the last way
18:45 - of debugging your code with the pdb
18:47 - command so I'm going to clear the
18:49 - terminal and now I'm going to just give
18:52 - this python command which is going to
18:54 - open the python shell and here you just
18:57 - need to import the script which you are
19:00 - working with so I'm working with the
19:02 - debugging script and then import the pdb
19:07 - and once you have imported your script
19:09 - and the pdb module you can just use pdb
19:14 - in order to start the debugging of your
19:17 - script so pdb dot run and under the
19:21 - brackets or under these parentheses you
19:24 - just need to give the name of your
19:26 - script so my script name is debuggings
19:29 - and then you need to provide at which
19:31 - point you need to start the debugging so
19:34 - let me enclose this code inside a new
19:36 - function so let me Define a new function
19:39 - and I am going to name it as Main and
19:41 - this is going to be my main function and
19:44 - inside the main function I am going to
19:45 - execute all the script and I'm going to
19:48 - just call this main function inside this
19:52 - if condition and here on the python
19:54 - shell I can just write debugging dot the
19:57 - function which I want to call so I'm
19:59 - going to just call the main function and
20:02 - then I'm going to press enter and once
20:04 - again it shows me that debugging doesn't
20:07 - have this main method because after
20:09 - saving I haven't restarted the pdb once
20:13 - again so let me just quit once again
20:15 - quickly and let me just quickly close
20:17 - this terminal and restart this terminal
20:19 - and once again I'm going to give the
20:21 - python command which is going to start
20:23 - the python shell and I'm going to import
20:25 - the pdb and the script once again and
20:28 - now I can just give the pdb dot run
20:31 - command and then give the name of the
20:34 - script on which I want to work on which
20:36 - is the debugging and then I'm going to
20:38 - call the main method inside the
20:40 - debugging and then press enter and once
20:42 - again give the N command which is for
20:44 - the next which is going to start the
20:47 - debugging of your code so this is how
20:49 - you can use the pdb command in order to
20:52 - debug your python script now in this
20:54 - video I'm going to show you how you can
20:56 - debug your python script using pycharm
20:58 - IDE so to start with I have this python
21:01 - script which takes two user input both
21:04 - numbers and I have created this add
21:07 - function which just add these two
21:10 - numbers and return the sum and using
21:13 - this print function I'm just printing
21:14 - the sum of these two numbers now let's
21:17 - run this code normally without any
21:19 - debugging and I'm going to just give two
21:23 - numbers here 44 and 55 and it's going to
21:27 - give me this kind of output which is
21:29 - wrong because the sum of 44 and 55 is
21:32 - not obviously four four five five now
21:35 - some of you might already we know the
21:37 - problem with this code but let's debug
21:40 - it with the help of the Python debugger
21:43 - so in order to start the debugging in
21:45 - pycharm ide you just need to click this
21:48 - icon which looks like a bug and when you
21:51 - hover over it it will say debug so I'm
21:54 - going to click on this debug button
21:56 - which is going to start the debugging of
21:58 - my program so you can see here this
22:00 - debugging window is opened and this
22:02 - debugging window have two sections one
22:05 - is console section and other is debugger
22:09 - section so right now we are in the
22:11 - console section where we can provide the
22:13 - user inputs and see the output of our
22:17 - python script just like the normal
22:20 - output now there is also a debugger
22:22 - window where you will be able to analyze
22:25 - the variables and all the frames of your
22:29 - program so I'm going to go to the
22:31 - console window and here I'm going to
22:33 - provide the first number and the second
22:36 - number and I am going to press enter and
22:38 - it prints the sum of these two numbers
22:41 - which is not correct but our python
22:43 - script is finished executing now in
22:46 - order to debug this python script we
22:48 - need to set the breakpoint at which the
22:51 - execution of the program will stop and
22:54 - we will go step by step after this point
22:57 - so I am going to set the break point at
22:59 - this line which is line number 13 at
23:02 - which my main function is called and
23:04 - then click on this line where you want
23:06 - to set the set point and you will be
23:08 - able to see this red circle logo which
23:11 - means that we have set the breakpoint at
23:14 - this point so let's start the debugging
23:16 - once again and you will see because we
23:19 - have set the break point here the
23:21 - program execution is stopped at the line
23:24 - number 13 and how you know that the
23:27 - execution is stopped at line number 13
23:30 - you will be able to see under frames
23:32 - this line which is highlighted and you
23:36 - can see the line number is 13 so at this
23:39 - point the program execution is on the
23:42 - line number 13. also you will be able to
23:44 - see these kind of icon on top of this
23:48 - window so the first icon here is the
23:51 - step over icon which you can click to
23:55 - step over your code the second icon is
23:58 - step into icon using which you can step
24:01 - inside your function or a class on which
24:05 - you are currently on the third icon is
24:08 - step into my code so generally if you
24:11 - use this option which is step into and
24:13 - your program contains some inbuilt or
24:16 - built-in functions then it is going to
24:19 - go into those built-in function and this
24:22 - other option which says tap into my code
24:24 - is going to only step inside your code
24:27 - and not into the built-in functions or
24:30 - the classes there are few more I can
24:33 - share one is four step into and other is
24:36 - step out which we are going to see later
24:38 - also under this variables section you
24:41 - will be able to see the values of your
24:44 - variables so first of all I'm going to
24:46 - click this button which says step over
24:48 - you can also press f8 to step over so
24:52 - I'm going to click this button and
24:53 - because my program asks the user to
24:56 - provide some input I will go to the
24:58 - console and provide those inputs so I'm
25:02 - going to just give 33 as the first
25:03 - number and 55 as the second number and
25:07 - then once again I'm going to press enter
25:09 - which is going to print the output and
25:11 - we come out of the debugging so now you
25:14 - know that this breakpoint is not helping
25:17 - us so we are going to remove this
25:19 - breakpoint and we are going to set our
25:21 - breakpoint here on the line number nine
25:25 - so here we will be able to see the
25:27 - values inside the variable X and Y so
25:31 - that we know what's the problem inside
25:34 - our code so let me start the debugging
25:37 - once again and once again I'm going to
25:39 - give these two inputs 33 and 44 let us
25:44 - say and then you can see our program
25:46 - execution is stopped at this break point
25:48 - and you will be able to see the values
25:51 - of your X variable and the Y variable
25:55 - now immediately you will see that this x
25:59 - value is the string and also this y
26:02 - value is the string and whenever we use
26:04 - this plus operator with two strings it
26:07 - is going to give us the concatenation of
26:10 - those two strings also in the variables
26:14 - you will be able to see the list of
26:16 - variables and the type of those
26:18 - variables and the values inside those
26:21 - variables so you can see X has string
26:25 - type and the value is 33 and Y has also
26:29 - the type string and the value is 44. now
26:33 - I told you that you can use this button
26:35 - to step into your code so I am going to
26:38 - click on this button which says step
26:41 - into my code which is going to step
26:43 - inside this function so our program
26:46 - execution was on this line this was the
26:49 - break point we have set and when I
26:51 - clicked this step into my code it has
26:54 - stepped into the function add if I would
26:59 - have pressed the step over button then
27:01 - my program execution will go to the next
27:03 - line and not inside this add function so
27:08 - because I have pressed this button which
27:10 - says step into my code that's why it
27:12 - goes inside the function so here also
27:15 - you will be able to see the values of
27:18 - your X variable and Y variable and also
27:21 - you will be able to see the value of the
27:23 - sum when you just click the step over
27:26 - button and here you will be able to see
27:29 - the value of sum which is three three
27:31 - four four which is the concatenation of
27:33 - these two numbers so immediately you
27:35 - will know that you are not adding these
27:37 - two numbers you are just concatenating
27:40 - two strings which gives you this kind of
27:43 - result so once you have pointed out the
27:46 - problem in your code we are going to
27:48 - stop our debugging so there is this red
27:51 - button here which is a square button I
27:53 - am going to click on this which is going
27:55 - to stop the debugging now in order to
27:58 - fix this code I can just type cast this
28:00 - input which is a string into the integer
28:03 - and with the second variable also I am
28:06 - going to to do the same and now let's
28:08 - start the debugging once again and once
28:11 - again I am going to give the two numbers
28:13 - 33 and 44 and press enter and the
28:18 - program execution will stop at the break
28:20 - point and now you will be able to see
28:23 - the values here which is 33 and 44 and
28:26 - under variables you will be able to see
28:28 - the type of these two numbers which is
28:31 - now int so both are int values I am
28:35 - going to step over now so last time we
28:37 - have stepped into the function which is
28:39 - the add function this time I am going to
28:42 - just press the step over button which is
28:44 - going to not go inside the add function
28:47 - but just tap over to the next line and
28:51 - you will be able to see the value of Z
28:53 - here which is 77 which is the correct
28:56 - sum of these two numbers so this is how
28:59 - you can use pie charm to debug your
29:01 - python script I hope you have enjoyed
29:03 - this video and I will see you in the
29:05 - next