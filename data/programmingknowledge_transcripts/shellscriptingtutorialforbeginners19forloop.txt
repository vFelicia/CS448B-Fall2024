00:00 - hey guys welcome to the next video on
00:02 - shell scripting tutorial for beginners
00:03 - in this video we will learn how to use
00:06 - for loops in shell scripting now if all
00:09 - loops are also used to loop over some
00:12 - lists of values and then execute the
00:17 - command in the loop now let's see first
00:20 - of all what is the basic syntax of for
00:22 - loop and then we will see some examples
00:25 - so there are several syntaxes we can use
00:28 - with carloads and i'm going to show you
00:31 - some of them so these are some of the
00:34 - basics in texas we can use in the paw
00:37 - loop so the first syntax here is we use
00:41 - the for keyword and then we declare a
00:43 - variable and then we use the keyword in
00:46 - once again and then we gave the list of
00:49 - values it can be for example 1 2 3 4 5
00:54 - or it can be in the list format which we
00:57 - will see a little bit later when we will
00:59 - see the examples right you can even give
01:03 - the files as an input here right so
01:07 - file1 file2 Oh file 3 and we can even
01:10 - give some Linux or UNIX command here as
01:13 - an input ok and then we have the do and
01:18 - done keywords in between we execute some
01:21 - commands right now the next way of using
01:26 - the for loop is similar to as we have
01:29 - seen in for example in C programming so
01:32 - we use 3 expression in between these
01:36 - brackets and the first expression can be
01:39 - used to initialize the value second is
01:43 - to compare or if the condition is
01:46 - fulfilled we check this in the second
01:49 - expression and in the third expression
01:51 - for example we can increment the value
01:54 - which we have declared in the first
01:56 - expression right so this is the other
01:59 - way of using for loops right so let's
02:03 - take some examples to understand the for
02:06 - loop in a better way so let's take the
02:10 - most basic example so for example I want
02:13 - to
02:13 - I create some numbers and I want to
02:17 - print them so I can just write the
02:20 - numbers like this so whatever number I
02:22 - want to you know iterate on I can just
02:25 - give the numbers separated by the spaces
02:29 - so for example I want to give five
02:31 - numbers then I can give these five
02:33 - numbers here one two three four five
02:35 - right and in the do and done keyword in
02:39 - between these two keywords I can echo
02:42 - the numbers using the variable so I can
02:46 - just use the dollar symbol here and
02:49 - instead of variable I can declare any
02:51 - variable for example I or any variable
02:55 - name whatever you want to give yes for
02:57 - example I use I here right and that's
03:00 - where you'll be like in print from here
03:02 - okay and let's run the script and let's
03:05 - see how it works so I will run the
03:08 - script and it prints the number one two
03:10 - five pretty simple right
03:12 - now in case of longer ranges for example
03:17 - you want to iterate over hundreds of
03:20 - values this method is not you know very
03:24 - beautiful because you need to write
03:26 - every number and then iterate over it
03:29 - right so if you have bash version
03:33 - greater than three then you can use this
03:38 - kind of notation also so you can give
03:42 - any range in between these curly
03:44 - brackets so for example I want to
03:46 - iterate over one to ten I can just write
03:49 - one and then double dot and then ten
03:53 - here and this means that we want to
03:55 - iterate over the range of one to ten
03:59 - okay and then once again let's run the
04:02 - script and let's see what happens and
04:04 - you can see the result is the printing
04:09 - of one to ten numbers right so this is
04:12 - how also you can give any range between
04:15 - any numbers right now there is one more
04:18 - way of using this range so this will
04:24 - work f-from
04:26 - one to ten so this is the starting value
04:28 - and this is the ending value and then
04:30 - you need to use two dots here now if you
04:34 - add two more dots then you can give the
04:38 - increment by which you want to increase
04:40 - the value for example I want to increase
04:42 - the value by two every time this range
04:46 - is looped over then I can write to here
04:49 - right so basically what this range means
04:53 - is the first value here is the start
04:57 - value then double dot and then second
05:00 - value is the end value and then the
05:03 - third value of the dot is the increment
05:06 - we want to give so I want to give the
05:09 - two increment right so let's run the
05:13 - script once again and let's see what
05:15 - happens and you can see it start with
05:18 - one because our initial value is one and
05:20 - then the value is incremented by two
05:24 - whenever we loop over this for loop so
05:28 - every time we loop we increment the
05:31 - value by two right if you want the value
05:35 - of starting from zero you can do that
05:38 - also so let's run the script and now we
05:42 - have the number zero two four six eight
05:45 - there now also you can do this but
05:48 - remember this kind of notation you can
05:50 - use with the version more than 4.0 or
05:55 - bash right now you may ask how we can
05:59 - you know print or how we can know the
06:03 - version of bash we are using this is
06:06 - pretty simple so you can just echo this
06:09 - by using a keyword called bash version
06:13 - this is the keyword which you can use to
06:17 - print the version of bash so once again
06:19 - I run the script and I can see I have
06:22 - the bash version 4.3 point 11 right so
06:27 - this notation will work on my you know
06:30 - bash script but if it's lesser than 4
06:34 - then this notation may not work in your
06:37 - case and if you
06:39 - are using this notation then you need to
06:42 - have minimum version three or more okay
06:46 - so I have four point three so both of
06:49 - the notation works with my bash script
06:53 - now let's see the other way of using for
06:56 - loop in scripting okay so instead of
06:59 - this notation I told you we can use
07:01 - these double bracket notation and in
07:05 - between we can give three expressions
07:06 - right so let's declare for example I and
07:11 - initialize it with zero right
07:14 - and then by semicolon we can separate
07:17 - these command or expressions and then in
07:20 - the next expression we will check
07:22 - whether this value of I is less than
07:26 - five or not and then we can increase the
07:30 - value of I by one every time we loop
07:34 - over this loop right so this is the
07:38 - first expression in which we are
07:39 - initializing the value of I with zero in
07:43 - the second expression we are comparing
07:44 - or evaluating this expression whether I
07:49 - is less than five or not and then we are
07:52 - incrementing the value of I as we do in
07:55 - normal programming right so you already
07:58 - know how to do is so let's clear the
08:02 - terminal I'm going to clear the terminal
08:03 - and run the script once again and you
08:07 - can see it prints from zero to five
08:09 - right because the value of I begins from
08:13 - zero and it evaluates whether the value
08:17 - is less than five and if the value is
08:20 - equal to five or greater than five then
08:23 - this will not be executed okay so this
08:28 - is how also you can use the for loops
08:30 - now in the next video I am going to show
08:32 - you how we can use for loops with files
08:34 - and commands so stay tuned and please
08:36 - welcome and subscribe and bye for now