00:00 - so hello guys
00:01 - in this video tutorial series we will be
00:04 - making an endless runner game for
00:06 - android devices using unity engine
00:09 - this series will be completely beginner
00:11 - friendly so if you haven't done any game
00:14 - development before then also you can
00:16 - follow along
00:18 - we will cover each and everything
00:20 - in this series from downloading and
00:22 - installing unity to exporting our
00:25 - project to android devices
00:27 - so first of all to download unity engine
00:31 - open up your browser
00:33 - and search
00:34 - unity
00:35 - download unity hub
00:38 - so
00:39 - click on this first link
00:42 - which is unity3d.com slash get unity
00:46 - slash download
00:47 - so on this page you can find
00:50 - a download button to download unity hub
00:53 - you can also download unity directly but
00:56 - unity hub will help us to manage our
00:58 - projects and
01:00 - other ui versions
01:01 - very easily
01:03 - which i will show you in a moment so
01:05 - click on this download unity hub
01:07 - button and download unity hub after that
01:11 - install unity hub i have already
01:13 - downloaded and installed it
01:15 - that's why i'm not going to do it again
01:18 - so it is as simple as downloading and
01:20 - installing any other software so it
01:22 - should be pretty straightforward
01:25 - so
01:26 - download unity hub after downloading
01:28 - unity hub it will look like this
01:32 - your projects feed would be empty
01:35 - because you would have not created any
01:37 - projects
01:38 - so we will quickly
01:40 - talk about some tabs
01:43 - so here it is a learn tab so here
01:46 - there are
01:48 - there are lots of tutorials
01:51 - which you can
01:52 - watch
01:54 - from unity
01:56 - and this is a community
01:59 - forums and blogs
02:01 - and here it is installs
02:03 - so here we can download
02:06 - different unity versions currently i
02:07 - have downloaded 2019.4.20
02:11 - f1 lts
02:12 - this lts means long term support
02:16 - so
02:17 - whenever we download any version
02:19 - it is recommended to download lts
02:21 - version so that we don't face any
02:23 - difficulties in future
02:25 - we will download
02:27 - a new version
02:28 - in a moment but first of all we have to
02:30 - do
02:31 - some
02:32 - necessary things so first of all we have
02:35 - to generate a license
02:37 - so click on this settings button
02:40 - and then here you can
02:42 - click on license management
02:45 - i have already activated a personal
02:47 - license but
02:49 - you you would not have this
02:52 - so you have to login in your unity
02:55 - account
02:56 - to generate license so click on login
03:00 - so it will
03:01 - prompt you to the
03:03 - [Music]
03:04 - so here you can sign in with your email
03:07 - and password
03:08 - if you haven't created unity id yet so
03:11 - click click here create one and you can
03:14 - create it easily it is as simple as
03:16 - creating a any gmail account
03:20 - so once i will login
03:22 - then i then we will continue
03:26 - so i have logged into my unity account
03:29 - so from here we can click on activate
03:32 - new license
03:34 - here we can choose either unity personal
03:36 - or unity pro
03:38 - for this series the personal would be
03:41 - more than enough
03:42 - if you are running any enterprise or
03:45 - big companies which is making
03:48 - more than 100 000 per year
03:51 - then you have to
03:53 - take subscription of unity but for in
03:56 - our case it is fine to download unity
03:59 - personnel
04:00 - and from here it will ask
04:03 - for these two options so just click on
04:06 - this i don't use unity in a professional
04:08 - capacity
04:09 - or if you use it
04:11 - for a professional capacity then
04:15 - click on this first option
04:17 - and
04:18 - click on done
04:19 - i have already
04:21 - activated my account
04:23 - so that's why i am not going to do it
04:24 - again
04:25 - but you have to just click on done and
04:27 - your license will be created
04:30 - so after doing that
04:32 - you would be able to download new unity
04:34 - versions
04:36 - so here click on install step
04:39 - and from here we can add new unity
04:41 - versions so click on add button here
04:46 - and it will ask you to
04:49 - download any of these versions
04:52 - so these are official releases and these
04:55 - are alpha releases
04:56 - and
04:59 - early versions of unity which are in
05:02 - testing mode
05:03 - so
05:04 - it is
05:06 - recommending us to download this lts
05:08 - version which is long term support
05:10 - version so we will click on next
05:14 - and from here
05:15 - if you have
05:17 - not installed any ide on your computer
05:20 - then click on this will download
05:22 - microsoft visual studio community
05:25 - edition
05:26 - 2019
05:27 - you can also use vs code with unity
05:30 - but for this series we will use visual
05:33 - studio so go ahead and download this
05:37 - click on this
05:38 - checkbox
05:40 - and we will be making
05:42 - this game for android so we need to
05:44 - install android build support
05:47 - so expand this and
05:49 - make sure you have selected this check
05:52 - boxes android sdk and ndk tools and open
05:55 - jdk
05:56 - so it your
05:58 - selection should look like this
06:01 - so if you are done
06:05 - then you can hit on next
06:08 - and
06:10 - it will ask us for
06:13 - accepting terms and condition so go
06:16 - ahead and read these terms and
06:17 - conditions
06:18 - and
06:20 - click on next and you will you will be
06:22 - able to download
06:24 - it will take some time to download this
06:28 - unity version on your computer
06:31 - after downloading this we will be able
06:33 - to create
06:35 - new projects i have i have already this
06:38 - version
06:39 - 2019.4.20 f1 which is fine because our
06:43 - game is not very complicated
06:46 - so
06:47 - the version will not matter that much so
06:51 - you can download any version
06:53 - so now we will click click on project
06:55 - step
06:57 - and from here we will create a new
06:59 - project so click on new
07:02 - [Music]
07:05 - and then it will ask
07:08 - us to create either 2d or 3d or there
07:12 - are many other options like universal
07:14 - render pipeline
07:16 - which is not the topic of this video so
07:18 - we will be making a 2d game
07:21 - so click on 2d
07:23 - and from here we can name our project so
07:26 - this this will be an endless runner game
07:29 - so go ahead and name you can name it
07:32 - whatever you want i will name it
07:34 - endless
07:39 - android
07:43 - and you can save your project anywhere
07:46 - i am going to save it in f drive
07:50 - and in unity projects 3d folder
07:54 - actually you can save it anywhere you
07:55 - want so go ahead and click on create so
07:58 - it will create a new project so in this
08:01 - video we will talk about different tabs
08:04 - in unity engine and we will get familiar
08:06 - with
08:07 - the editor
08:08 - so
08:10 - since we are developing our game for
08:12 - android
08:13 - then we have to change this aspect ratio
08:16 - so click on this game window this game
08:19 - window
08:20 - is a
08:22 - preview window for our game so
08:24 - whenever we hit this play button then
08:26 - our game will be played in this window
08:29 - so
08:30 - we will be developing this game in
08:32 - portrait mode so click on this
08:35 - free aspect and
08:37 - change it to
08:39 - 1920 by 1080 portrait
08:43 - so it will
08:44 - change itself from free aspect to
08:47 - portrait mode
08:49 - but
08:50 - when you click on this you will not get
08:52 - these many options
08:54 - because our current project is
08:57 - on a pc platform so you have to convert
09:02 - platform from pc to android so to
09:04 - convert the platform we have to first of
09:07 - all click on file and click on build
09:10 - settings
09:11 - then
09:12 - you will have this icon
09:14 - on this pc mac and linux standalone
09:17 - option
09:18 - so go ahead and click on android and hit
09:22 - switch platform here you will get switch
09:24 - platform button like this so
09:27 - click on android and hit switch platform
09:30 - so your platform will be switched
09:32 - from pc to android and then you will get
09:35 - these options
09:36 - for different aspect ratios
09:40 - so it will take some time to switch
09:42 - platforms so once you have switched the
09:45 - platform then
09:46 - [Music]
09:48 - turn it into
09:49 - a portrait mode
09:51 - so let's talk about different tabs so
09:54 - first of all it is a scene view
09:57 - so in the scene view
09:59 - we can add different game objects
10:01 - so everything in unity is game object
10:05 - so
10:06 - just like here it is main camera so it
10:09 - is also a game object
10:11 - which contains some transform properties
10:14 - like position rotation scale
10:17 - and every green object
10:20 - contains some components so
10:23 - for this game object main camera it has
10:26 - camera camera component we can add
10:30 - different components
10:32 - by clicking on add component unity has
10:35 - many components
10:37 - so
10:38 - this was a c view in which we can add
10:41 - our
10:43 - game objects
10:45 - uh it is then next comes our
10:48 - game view so i have already talked about
10:51 - it
10:52 - so the in this in the game view we can
10:54 - preview our game so whenever we hit play
10:56 - button then this will preview our game
10:59 - we can see the game being played here
11:03 - so
11:04 - next comes our hierarchy so in the in
11:07 - the hierarchy we can see
11:09 - the different game objects that we have
11:11 - created
11:12 - currently
11:13 - it has main camera
11:16 - and
11:16 - we can see as many
11:19 - game objects as we create here
11:22 - so like if i right click here and create
11:25 - an empty game object so i i will click
11:28 - on create empty
11:30 - so we can see that it is added in
11:33 - hierarchy
11:35 - next up is
11:37 - our project step here
11:39 - so in the project step there is an
11:41 - assets folder
11:43 - so in this assets folder we can
11:46 - keep our scenes scripts animation
11:50 - prefabs and etc
11:52 - so it will
11:53 - be more manageable
11:55 - for a bigger games so whenever our
11:58 - projects gets bigger
12:00 - we will be able to manage it efficiently
12:03 - so we will create some folders right now
12:06 - so that
12:08 - we can manage our project so
12:11 - click on this asset folder and
12:15 - right click and create
12:17 - then folder
12:19 - and we will name it
12:20 - prefabs
12:22 - prefabs
12:25 - so what are prefabs in unity so prefabs
12:28 - are
12:30 - like you have to create the prefabs only
12:32 - once
12:33 - and then you can use it as many time as
12:36 - you want and whenever you want to change
12:38 - the
12:40 - game objects
12:42 - that are prefabs then you have to only
12:44 - change the original prefab that you have
12:47 - here
12:48 - it is a little bit confusing but we will
12:51 - see it in
12:53 - upcoming videos
12:54 - so next up we will create another folder
12:57 - for
12:58 - scripts so create
13:01 - scripts folder
13:06 - in which we will
13:08 - add our scripts
13:11 - so next is our console tab
13:15 - so in the console
13:16 - we can see
13:18 - if
13:18 - our script has any error or warning it
13:22 - will be displayed here
13:24 - so we will be able to see and
13:28 - debug it
13:31 - so
13:32 - this was a brief instead of introduction
13:34 - uh and
13:36 - i forgot about this tab this is an
13:38 - inspector tab so in which we can see
13:42 - the properties of the game object so our
13:45 - game object
13:46 - let's click on main camera so main
13:49 - camera has some properties and
13:51 - components like
13:52 - transform
13:54 - camera component and audio listener
13:57 - so this camera component has some
13:59 - properties so
14:01 - these components and properties are
14:03 - displayed in this inspector view
14:06 - inspector tab
14:09 - so this was a quick introduction of the
14:12 - tabs in unity
14:14 - so to create our player we will right
14:17 - click on hierarchy
14:20 - and uh
14:22 - okay so first of all we will create our
14:25 - sprite for the player
14:27 - so
14:28 - go ahead and click on assets folder
14:31 - right click and create
14:33 - a new folder
14:34 - and call it sprites
14:41 - inside that right click and then create
14:46 - sprites and then square
14:50 - and let's keep
14:52 - the name as square
14:54 - now click on this sprite
14:56 - and change
14:59 - its sprite mode to single from polygon
15:03 - and
15:04 - hit on apply
15:07 - then we can drag and drop this
15:11 - square sprite in our scene view
15:14 - so drag and drop
15:17 - this into our scene and
15:19 - we will rename this to player so to
15:22 - rename any game object in unity
15:25 - we can hit f2
15:27 - so hit f2 and rename it to player
15:33 - so now we can change its color
15:37 - by
15:38 - changing the color value color property
15:40 - in the sprite renderer component
15:43 - of our player sprite so click on this
15:45 - color
15:47 - and you can
15:49 - give it
15:50 - any color you want i will
15:52 - give it slightly darker color
15:57 - so now we will create
15:59 - a ground so click on this player
16:02 - and press ctrl d
16:04 - so it will duplicate our player
16:07 - and rename it
16:09 - so press f2 and
16:11 - rename it to crown
16:17 - now we will change the position of our
16:19 - ground so first of all we will change
16:21 - the scale
16:22 - so
16:25 - y scale y scale should be 5
16:30 - and
16:31 - x scale would be 20
16:34 - and then
16:36 - go
16:37 - on to the same view and
16:40 - click on this move tool here there are
16:42 - different tools in unity like hand tool
16:45 - move tool rotate and scale
16:49 - in this are for ui rectangle tool
16:52 - so click on this move tool and press
16:55 - ctrl hold ctrl and
16:58 - drag our ground
17:00 - [Music]
17:01 - slightly below
17:03 - so now we can see that our ground is
17:06 - below the player
17:07 - so now click on the ground and we can
17:10 - change
17:11 - the color of ground also so click on
17:13 - this color
17:14 - and change
17:17 - its color from
17:20 - white to something
17:22 - oranges you can color it anything you
17:24 - want
17:26 - so
17:28 - now we will change the main camera color
17:32 - so which is this background color so to
17:34 - change this background color from blue
17:36 - to
17:37 - anything you want you have to click on
17:39 - this background
17:41 - and you can change it from here
17:44 - so
17:51 - let's make it
17:54 - white
17:56 - and we will change the ground color to
18:01 - it like this
18:03 - you can color it anything you want
18:08 - so we have now created our player and
18:10 - our round so in this video we will add
18:14 - jump functionality
18:16 - for our player
18:18 - so first of all
18:19 - we have to add colliders to our player
18:22 - and ground
18:23 - colliders we we add collider so that we
18:26 - can detect collisions between our player
18:29 - and ground and between our player and
18:31 - obstacles
18:33 - so click on this player and
18:36 - here in this inspector tab click on add
18:39 - component
18:40 - and search for
18:43 - box collider
18:45 - and click on this box collider 2d to add
18:50 - box collider 2d
18:52 - to our player
18:54 - next up we will also add box collateral
18:58 - to our ground
19:00 - so
19:01 - in the same view we can also see
19:03 - colliders
19:04 - so click on add component and hit
19:07 - box collider 2d
19:09 - so we can see this green line
19:12 - this green border is our box collider
19:16 - so
19:18 - for the player
19:19 - to detect ground we
19:21 - have to also
19:24 - add another collider
19:27 - so click on
19:28 - add component and
19:31 - click on box collider 2d
19:33 - so for this second collider
19:36 - click on same view and
19:39 - zoom in a little bit
19:41 - so that we can save our player
19:43 - and click on this edit collider button
19:47 - now you can edit the boundaries of our
19:50 - collider
19:51 - so click on this bottom
19:53 - [Music]
19:54 - edge and drag it little bit further
20:00 - so
20:01 - we are doing this to detect
20:03 - ground check so if our player
20:06 - is standing on ground then
20:09 - we will
20:10 - be able to
20:12 - retrieve
20:13 - the boolean value that it is
20:16 - grounded and if it is not
20:18 - on ground that means the player is
20:21 - currently in jump state then we will get
20:25 - is grounded to
20:26 - false
20:27 - so to detect
20:30 - the equalizer
20:31 - we have to make this second collider
20:34 - which is a little bit bigger
20:36 - then the first one we have to make it is
20:38 - trigger
20:39 - so whenever we make a collider it is
20:42 - triggered then
20:44 - we can
20:44 - [Music]
20:46 - we can
20:47 - retrieve the
20:49 - information
20:50 - of the game object that
20:53 - it hits
20:54 - so we will make it
20:56 - as is is trigger
20:59 - so now
21:01 - we will add some tags to our crown and
21:04 - our player
21:06 - so basically tags are used to identify
21:09 - the game object in our script
21:11 - so click on this ground
21:14 - and here uh in the tag uh
21:18 - click on this untapped and click on
21:21 - add tag
21:22 - and we will add
21:24 - a new tag
21:26 - so
21:27 - click on this plus icon and
21:29 - name it as ground
21:31 - [Music]
21:34 - and hit on save
21:37 - so now once again click on ground and
21:40 - change it
21:42 - from contact to numb
21:45 - now
21:46 - do the same for the player but
21:48 - this time we don't have to create a new
21:51 - tag because unity already has
21:53 - a player tag so click on this layer tag
21:57 - to edit
22:01 - so after adding player tag to the player
22:05 - we can create our movement script
22:07 - so click on the scripts folder
22:10 - and
22:11 - right click then create a new
22:13 - c sharp script
22:15 - and name it player movement
22:23 - and hit enter
22:25 - so the scripting language for unity is c
22:28 - sharp so we will
22:29 - write our game logic in this language
22:33 - now double click on this player moment
22:35 - script
22:40 - so if you have installed visual studio
22:43 - while
22:44 - installing unity then it will open up
22:47 - our script in visual studio
22:50 - but
22:52 - if you are using any other ide
22:55 - then it will open up
22:58 - this
23:00 - solution in that id if you have
23:02 - configured
23:03 - it with unity
23:05 - so we will quickly talk about these two
23:07 - functions
23:09 - which are
23:11 - void start and void update so void start
23:14 - is called
23:16 - uh at the beginning of
23:19 - our game so it is called only once
23:23 - and this wide update is called
23:26 - per frame means if you are if your game
23:29 - is running at 60 fps then it will be
23:32 - called
23:34 - uh 60 times per
23:36 - second
23:38 - so we will quickly make some variables
23:41 - for our player moment script
23:44 - first variable is private
23:46 - so private
23:50 - it will be a boolean so bull
23:53 - and
23:55 - is
23:57 - grounded
23:59 - so this
24:01 - is grounded variable
24:03 - will
24:04 - help us to determine whether our player
24:08 - is
24:08 - standing on
24:10 - ground or not
24:11 - so whenever our game starts
24:15 - our is grounded variable would be false
24:20 - by default
24:25 - and
24:25 - [Music]
24:29 - now we can create another variable
24:34 - for our players jump force
24:37 - so create private no this time we will
24:40 - make it public so that we can
24:43 - change its value from
24:45 - inspector
24:48 - so make private float
24:51 - jump
24:53 - force
24:56 - and
24:58 - we
24:58 - will add the jump force value from
25:01 - inspector
25:03 - so
25:04 - save this script and
25:07 - go into unity
25:09 - and now
25:10 - we can add this script
25:12 - to our player
25:16 - so click on player and add player
25:18 - movement script to
25:20 - the player
25:22 - now we can see that our jump force
25:24 - variable is visible here because we have
25:27 - made it public
25:29 - and
25:30 - our is grounded variable is private
25:33 - that's why it's not
25:35 - appearing here so whenever we make any
25:38 - variable private it is
25:41 - not visible in the inspector
25:43 - we can also add serializable field
25:47 - serializable field serialize field
25:49 - to make it visible in our inspector
25:54 - now you can see
25:56 - first of all we have to save the script
25:58 - and
25:59 - [Music]
26:00 - now
26:03 - our is grounded variable is also visible
26:06 - in our inspector so whenever you want to
26:09 - make any variable private and
26:11 - you also want to uh
26:13 - make it visible in the inspector then
26:15 - you have to add this serialize field
26:18 - so
26:19 - now we will
26:20 - add this
26:23 - we will add a rigid body component to
26:25 - our player
26:26 - so we can use unity's physics engine
26:30 - so what
26:31 - will it do is
26:34 - whenever we add a physics
26:37 - rigid body 2d component
26:39 - rigid body 2d
26:41 - so
26:42 - our player will be affected by gravity
26:45 - so right now
26:47 - if i hit play
26:48 - then you can see
26:50 - that our player will fall down
26:54 - like this
26:56 - so now we are using the unity's physics
26:59 - engine
27:01 - so click on this constraint and
27:04 - phrase rotation on z axis
27:07 - so our
27:08 - player
27:09 - does not
27:11 - our player will not be able to rotate on
27:15 - the z axis
27:18 - so now
27:19 - we can start creating our
27:23 - jump functionality
27:26 - so
27:26 - [Music]
27:27 - the unity has some functions for
27:31 - detecting
27:33 - collide collisions
27:35 - so
27:35 - [Music]
27:36 - make a
27:38 - private
27:40 - one trigger
27:43 - enter 2d
27:46 - so it will be called whenever
27:48 - our
27:49 - player will enter any
27:52 - uh
27:54 - our player will collide with any
27:57 - game object
27:58 - so whenever our
28:00 - player collides with
28:02 - any game object then we will check if
28:07 - if our
28:10 - our player
28:14 - here it is a collision so we will
28:18 - copy it and
28:20 - paste it our collision dot
28:22 - compare tag
28:26 - so
28:27 - if
28:30 - our player
28:31 - collides with ground
28:34 - with the game object with ground tag
28:39 - then we will make is grounded
28:45 - is equals to
28:46 - true
28:51 - and
28:52 - same as this we will create another
28:56 - function called on trigger exist
28:59 - exit
29:00 - so
29:02 - private void ontrigger accept 2d
29:05 - copy this if statement
29:08 - and paste
29:09 - it here
29:11 - we can
29:14 - make this
29:15 - is grounded variable false whenever
29:18 - our
29:20 - player
29:20 - exit from the
29:23 - whenever our player
29:24 - exists from
29:28 - our ground
29:29 - so make it false
29:34 - now
29:35 - we are able to
29:37 - detect the ground check so in the update
29:41 - function
29:42 - we will check for input so let's make an
29:46 - if statement
29:47 - and
29:49 - say in if input dot
29:52 - get mouse button down
29:57 - and
29:59 - in the
30:00 - brackets
30:06 - 0 and and we will also check for
30:11 - ground
30:12 - so if is grounded
30:16 - so
30:17 - what it want to say is that
30:21 - if
30:22 - the player presses
30:24 - uh
30:25 - right
30:26 - left mouse button and end is grounded so
30:29 - if both are true then and then this is
30:33 - if statement will be executed
30:35 - so
30:37 - uh this get mouse button down 0 also
30:40 - works with
30:42 - touch input so whenever we tap on this
30:45 - screen it will also
30:48 - take it as true
30:50 - so whenever
30:52 - this is
30:53 - done then we will add
30:55 - some force some upward force to our
30:58 - player so for that we have to get our
31:02 - players rigid body so
31:04 - let's make a private variable private
31:09 - rigid body 2d
31:12 - and
31:13 - name it as player
31:16 - so to get our
31:18 - players rigid for a 2d component we will
31:22 - go in start
31:24 - function and
31:26 - we will
31:27 - say
31:28 - player
31:32 - is equals to
31:33 - get component
31:37 - and the component we want to get is
31:39 - rigid body
31:43 - 2d
31:43 - and we will
31:46 - close this statement with semicolon
31:49 - so
31:50 - this statement will
31:53 - uh get our rigid body to the component
31:56 - from
31:56 - player
31:57 - and it will assign it to this player
32:00 - variable
32:01 - so now we can add
32:03 - an upward force to our player so
32:07 - type in player dot add force
32:12 - and it will take
32:14 - an argument as
32:16 - vector 2
32:17 - so
32:18 - make a new
32:20 - vector 2
32:22 - so vector 2
32:23 - has
32:24 - two
32:25 - two values which is x and y so
32:29 - we don't want to add any
32:31 - force in x axis so
32:34 - uh make it 0 and for
32:37 - y axis
32:39 - we will
32:40 - add jump force
32:44 - into
32:45 - we will multiply it with some scale
32:48 - factor so let's say 100
32:51 - so
32:52 - it will add
32:54 - this force
32:56 - in y-axis
32:58 - so our player movement script is uh
33:02 - completed
33:04 - so
33:04 - save it and go into the unity
33:10 - now
33:10 - click on player
33:13 - and
33:16 - add jump force value here so we will
33:20 - start with 5
33:22 - and let's hit play
33:28 - so whenever we hit
33:31 - our left mouse button then it will jump
33:35 - it will also work with a touch input
33:38 - so currently it is a bit high
33:41 - so we will make it three
33:44 - and hit play
33:49 - now
33:50 - okay let's make it 4.
33:55 - so
33:58 - we can see that
34:00 - currently whenever player is
34:02 - standing on ground then our is grounded
34:05 - variable is true
34:07 - and
34:08 - as as soon as i press the left mouse
34:11 - button it will jump and our is grounded
34:14 - variable will be
34:15 - false so
34:17 - now you can see it is false and whenever
34:19 - it touches the ground then it will be
34:22 - true
34:24 - so this was a
34:25 - jump functionality
34:28 - for our player so
34:29 - we have created
34:32 - player movement in this video so in this
34:34 - video we will create
34:35 - obstacles for our game
34:38 - so to create obstacle click on sprites
34:40 - folder
34:43 - and drag and drop the square sprite into
34:46 - the hierarchy
34:49 - so
34:50 - now we can see that our
34:53 - uh square sprite which is our obstacle
34:56 - so let's rename it to obstacle
34:59 - so it is above our player
35:02 - that's why we cannot see it
35:05 - so click on
35:06 - the player
35:09 - sorry click on the obstacle and
35:13 - drag it to the right of the player
35:17 - and we can also change its color
35:20 - so click on
35:22 - obstacle and then
35:24 - change its color
35:26 - from white
35:29 - to something red
35:33 - you can
35:35 - you can give it any color you want
35:40 - so
35:41 - now we can
35:43 - change the scale of the obstacle so make
35:46 - it
35:47 - 5 on the y axis
35:53 - and
35:56 - now
35:56 - that we have created our obstacle
36:00 - uh we can also add a box collider today
36:03 - to our obstacle
36:05 - so let's add the box called electrode
36:08 - and
36:09 - make it as is trigger
36:11 - so that we can detect
36:13 - the collisions with our player
36:18 - so
36:19 - now we can make our obstacle as a prefab
36:24 - so
36:26 - we can click on our prefab folder
36:29 - but before that
36:31 - click on the obstacle and reset its
36:34 - transform so click right click on
36:36 - transform and
36:38 - hit reset so it will set its position to
36:42 - 0 0 0
36:43 - and it will also reset its scale so
36:46 - click on
36:48 - a y-axis scale and
36:51 - change it to 5 once again so now click
36:54 - on this obstacle
36:56 - and drag and drop
36:57 - it into our prefabs folder
37:02 - so let's drag and drop it
37:04 - so now we can see
37:07 - that
37:08 - this obstacle has become has become
37:13 - blue so that means that it is now a
37:15 - prefab
37:18 - so
37:19 - now that we have created our obstacle we
37:22 - can delete it because we have created
37:25 - a prefab out of it
37:27 - so
37:29 - now we can create a spawner to spawn our
37:32 - obstacle
37:34 - so before we create our spawner let's
37:37 - create a
37:38 - uh
37:40 - obstacle script so right click and
37:42 - create a c subscript and name it as
37:45 - obstacle
37:48 - so
37:49 - obstacle and hit enter
37:51 - then open it up in visual studio
37:57 - so
38:00 - let's double click it and open it up in
38:03 - visual studio
38:05 - so now we will make some
38:08 - variables
38:10 - so now we will create some variables
38:13 - so we will create a speed variable for
38:16 - our of our obstacle so create public
38:19 - float
38:20 - speed
38:23 - and we will change its value from the
38:26 - inspector
38:27 - so now in the update method
38:29 - we can modify our obstacles position
38:34 - so
38:35 - to access the position we can
38:38 - write transform dot position
38:41 - so
38:43 - so that we can modify the position
38:46 - at each
38:48 - frame
38:49 - so
38:50 - write transform.position
38:53 - and we will make it
38:56 - equals to
38:59 - 3
39:00 - so let's make it equal to vector 3 dot
39:03 - left so that we can move our
39:06 - obstacle from right to left that means
39:10 - towards our player so let's make it
39:12 - vector 3 dot left
39:16 - and we can multiply this
39:18 - with our speed variable so let's
39:21 - multiply it
39:22 - with our speed variable
39:26 - and we can also multiply it
39:30 - with time dot delta time
39:33 - in fact we have to multiply it with time
39:35 - dot delta time
39:37 - so that we can make our game frame rate
39:40 - independent
39:42 - uh that means if our game is running at
39:45 - 60 fps
39:47 - then
39:48 - also our speed our speed
39:52 - would be constant and
39:54 - if our frame if our frame rate is higher
39:57 - than that then also our speed uh will be
40:01 - constant
40:02 - so it uh the frame rate will not affect
40:06 - our speed
40:07 - that's why we are multiplying our uh
40:11 - speed with
40:12 - time dot delta time
40:14 - so now we have to add plus sign in front
40:17 - of
40:18 - this equal so that we increment
40:23 - our position
40:25 - obstacles position
40:27 - to
40:28 - the speed variable each frame
40:31 - so after doing that we can save this
40:34 - script and
40:36 - go to the unity editor
40:38 - and now if we hit play
40:42 - so
40:44 - first of all let's
40:46 - drag
40:47 - let's add the script to our
40:51 - obstacle prefab so add component
40:55 - and search for obstacle and add it
40:57 - and for now we will
41:00 - uh
41:01 - make speed as
41:02 - 4
41:03 - so let's type in 4
41:06 - and
41:08 - then if we hit play then we can see that
41:11 - our
41:12 - obstacle will move from right to left
41:14 - but
41:15 - we can draw a dragon drop our obstacle
41:18 - and move it
41:19 - to the right
41:22 - and a little bit downwards
41:24 - so now if we hit on play
41:31 - so
41:32 - now we can see that our obstacle is
41:35 - moving from right to left
41:38 - so
41:40 - so that now we have created the obstacle
41:43 - we can create the spawner to spawn
41:46 - our obstacle at random height
41:50 - so
41:51 - to create a spawner
41:54 - we will right click in the hierarchy and
41:57 - create an empty game object
41:59 - and we will rename it to
42:02 - spawner so rename it to spawner
42:07 - and hit enter
42:09 - so
42:12 - now
42:13 - we will drag it to the right
42:16 - of the player
42:18 - so
42:19 - we will try we will
42:21 - make its y position to zero
42:24 - and zero position to zero
42:28 - and now we can create a script for it so
42:32 - create
42:32 - a new c subscript
42:34 - and call it
42:36 - spawner
42:39 - and
42:40 - hit enter
42:44 - and
42:45 - click on
42:46 - this spawner and drag and drop this
42:48 - script
42:49 - to it
42:50 - and now double click on spawner script
42:53 - to open it
42:55 - in visual studio
42:57 - now to instantiate our
43:00 - obstacle we need
43:02 - a reference
43:03 - so we will make a public game object
43:06 - because our obstacle is of type game
43:08 - object
43:09 - so we will name it as obstacle
43:13 - now we also need a minimum height and
43:16 - maximum height for our obstacle
43:19 - so
43:20 - let's create a public variable so that
43:23 - we can modify it in inspector so public
43:26 - float
43:27 - mean height
43:29 - and
43:30 - we will copy it
43:32 - so let's copy it
43:34 - and
43:36 - paste it
43:37 - and then we will change it to max height
43:41 - so
43:42 - [Music]
43:43 - for the
43:45 - min height for the max height
43:49 - we will
43:50 - say
43:52 - let's first add our first
43:56 - add our min height
43:58 - so we will default it to
44:01 - minus
44:02 - 3.5 f
44:05 - and for the max height
44:07 - we will say
44:08 - minus 5f
44:13 - so
44:13 - for the max height we will say minus 5f
44:19 - but
44:22 - here
44:27 - here we can see that
44:29 - our max height would be minus 3.5 f and
44:33 - mean height would be minus 5 because
44:37 - they have minus sign in front of them
44:41 - so
44:43 - in the update method
44:46 - we can
44:48 - make a timer to check
44:52 - to check the time intervals
44:55 - between each spawn
44:58 - so let's create a public variable
45:01 - so we will create a public variable
45:05 - so create public float
45:09 - public float
45:11 - and we will name it time to spawn
45:14 - so
45:15 - create time to spawn
45:20 - and we will default it to 1.5 seconds
45:24 - so after 1.5 seconds it will spawn a new
45:28 - obstacle
45:30 - so now create another variable
45:35 - as private
45:38 - float
45:41 - timer
45:43 - so that we can keep track of
45:47 - the timer
45:49 - so
45:50 - we will check
45:51 - in our update method
45:55 - that if
45:58 - our timer
46:01 - is greater than
46:03 - time to spawn
46:07 - then
46:09 - we will instantiate our obstacle so we
46:12 - will create a new game object and we
46:14 - will name it as
46:16 - new obstacle
46:18 - so we will name it as a new obstacle
46:24 - and now we will
46:26 - make it equal to instantiate
46:30 - and in the
46:31 - parenthesis we will say obstacle so it
46:34 - will instantiate
46:36 - the obstacle
46:38 - which is our obstacle prefab
46:41 - and after instantiating the new obstacle
46:44 - we can modify its position so we will
46:47 - say new object
46:49 - dot transform
46:51 - so the transform dot
46:54 - position
46:56 - is equals
46:57 - to transform dot position
47:00 - that means the
47:01 - position of this spawner
47:04 - and
47:05 - we will
47:06 - also add a new vector 3 so type in new
47:10 - vector 3
47:13 - and
47:14 - we don't want to modify its x
47:17 - value so make it as 0
47:20 - and
47:22 - we will
47:24 - make
47:25 - the y value
47:26 - between randomize between two numbers
47:29 - which is
47:31 - uh
47:32 - mean height and max height so that we
47:35 - can get a random height for our obstacle
47:39 - so let's pass in min height and max
47:42 - height
47:44 - and for the z we can pass in zero
47:48 - and now we also need to destroy this new
47:52 - obstacle
47:53 - after some time
47:55 - so we can do this by
47:59 - typing destroy
48:00 - the destroy is
48:02 - inbuilt method in unity so
48:05 - type in destroy
48:08 - then
48:09 - pass in the game object that we want to
48:11 - destroy so new obstacle
48:14 - and the time
48:16 - after which we want to destroy that
48:19 - so let's say 10 seconds
48:24 - so
48:25 - after doing all of this we can reset our
48:28 - timer
48:30 - to zero
48:33 - so
48:34 - now we can reset our timer to zero
48:37 - now we can save this script
48:43 - and
48:48 - so now go back to unity and
48:58 - we can save the script and
49:02 - click on this spawner
49:04 - and
49:06 - we can see that
49:08 - there is an obstacle field so drag and
49:10 - drop the obstacle prefab
49:13 - into that
49:14 - field and now
49:17 - we can hit play
49:20 - so
49:21 - it will spawn
49:23 - the obstacle
49:25 - at random height
49:26 - but it no it is not spawning so
49:30 - let's see what is the error
49:34 - so
49:37 - let's go to the vs visual studio code
49:42 - and
49:45 - let's find out what is happening
49:51 - so
49:52 - here after
49:55 - the if statement
49:57 - we
49:58 - we have to add
50:02 - one line which is
50:04 - time timer equals to
50:07 - timer plus equals to time dot delta time
50:11 - because we need to increment our timer
50:14 - uh on each frame
50:17 - so we will increment it by time dot
50:19 - delta time so now if we
50:22 - go back to unity
50:25 - and hit play
50:28 - then
50:29 - we can see that now
50:32 - our obstacles are spawning
50:35 - at random height but
50:37 - they are spawning
50:39 - in front of the ground right now
50:42 - so
50:45 - we can
50:46 - see that they are spawning in front of
50:48 - the ground
50:50 - that
50:51 - they are not spawning in front of the
50:53 - ground but they are rendering in front
50:55 - of the ground
50:57 - so now to make the obstacle
51:00 - spawn behind the ground we have to
51:03 - change the ordering layer
51:06 - of our ground so
51:10 - let's click on the
51:13 - obstacle no let's click on the ground
51:17 - and change its order in layer
51:21 - to
51:22 - 1 from 0 so let's change it to 1
51:26 - so that
51:27 - it renders above
51:29 - everything else
51:31 - so
51:32 - now
51:33 - if we hit play
51:35 - then we will be
51:36 - able to see that our
51:39 - obstacles are now spawning behind the
51:41 - ground
51:42 - so
51:44 - as you can see
51:46 - they are spawning behind the ground
51:52 - so
51:53 - in this video we have added our obstacle
51:55 - so now we can see
51:57 - that whenever our player collides with
52:00 - any obstacle
52:02 - then
52:05 - we have this game over message in the
52:08 - console
52:09 - so now we will
52:11 - create a game over screen
52:13 - so whenever our player collides with the
52:16 - obstacle then the
52:18 - game will be freezed and our play our
52:21 - game over screen
52:23 - will appear
52:24 - so to create
52:26 - that screen we need to click on
52:28 - hierarchy
52:30 - and create a new ui element and we will
52:33 - create a panel
52:36 - so
52:37 - it will automatically create canvas and
52:39 - event system
52:41 - so to render any ui element in unity we
52:43 - need canvas
52:46 - click on this panel and rename it to
52:49 - game over panel
52:51 - so let's rename it to game over panel
52:57 - now we will right click on this game
52:59 - over panel and create a new ui element
53:02 - and we will
53:03 - this time create a button
53:05 - and we will rename this button to retry
53:12 - now we can see that our canvas is quite
53:16 - big bigger than our main camera so to
53:19 - fix that click on canvas
53:22 - and change its render mode from screen
53:25 - space overlay to screen space camera and
53:28 - click on this pixel perfect
53:31 - and as a render camera drag and drop our
53:33 - main camera into this slot
53:36 - and now you can see that our canvas is
53:39 - same as our main camera
53:41 - so now we will also change its ui scale
53:44 - mode so click on this ui scale mode and
53:47 - change it
53:48 - from constant pixel size to
53:50 - scale with screen size
53:52 - and we will give
53:54 - the reference resolution as 1920 by 1080
53:57 - so let's
53:59 - say 19
54:01 - 20
54:04 - by 1080
54:10 - so we will
54:13 - click on this match parameter and we
54:15 - will make it
54:16 - as 0.5
54:21 - so it will scale the ui elements
54:23 - according to the screen size
54:30 - now
54:31 - we will click on this
54:33 - text and
54:35 - we will rename it to retry
54:40 - now
54:41 - click on this red try button and
54:44 - change its width
54:46 - to
54:50 - let's say 600
54:53 - by 400
54:58 - or let's say
55:02 - 600 by 200
55:05 - now drag and drag this retry button
55:08 - slightly upward
55:12 - we can
55:13 - see that
55:15 - our ui elements are rendering behind
55:18 - this player and everything else so to
55:21 - fix this
55:22 - click on the canvas and change its
55:25 - ordering layer to one
55:29 - now
55:32 - click on this text and
55:34 - we can change its font size
55:37 - so let's make it
55:39 - 100
55:41 - and now click on this best fit
55:45 - we can also make it bold
55:48 - and we will change its color
55:52 - so
55:56 - now we can also add
55:58 - shadow to this text so click on add
56:01 - component and
56:04 - add
56:05 - a shadow and
56:07 - we can set this effect distance
56:15 - now we can also give
56:17 - this shadow to this button
56:23 - and play with the effect distance to
56:27 - get the desired result
56:30 - now we will duplicate this retry button
56:32 - so press ctrl d
56:35 - and we will rename it to
56:37 - main
56:40 - now we will also change the text
56:44 - to main
56:48 - and we will
56:49 - drag this main
56:51 - button slightly below
57:00 - now we can
57:02 - go to the obstacle script and
57:06 - we will comment this
57:08 - debug.log line
57:14 - and now
57:16 - whenever our game
57:18 - is over then we will
57:21 - freeze our game so we will say time dot
57:25 - time scale
57:29 - is equals to 0
57:31 - so it will freeze our game
57:34 - now we can go to the game manager script
57:37 - and we will
57:39 - create a variable for our game over
57:41 - screen
57:43 - so create public game object
57:47 - and then game over
57:52 - screen game over screen
57:55 - so at the start of our game
57:59 - our game over screen would not be
58:01 - visible
58:02 - so let's say game was screen
58:06 - dot set active
58:09 - and pass in
58:10 - false
58:14 - now we will check
58:16 - for the game over in the update method
58:18 - so if
58:21 - is game over
58:22 - so
58:24 - when our
58:25 - game is over
58:27 - then we will copy this statement
58:31 - and
58:32 - we will paste it here and we will say
58:34 - game over screen dot set active to true
58:41 - and also whenever
58:43 - our game starts we will reset the time
58:47 - scale to 1
58:48 - so let's say time dot
58:52 - time scale
58:54 - is equals to
58:55 - 1
58:58 - now we will also make a separate
59:01 - function for
59:03 - retry
59:04 - so let's make a new function
59:08 - public
59:10 - void
59:11 - and name it as retry
59:18 - now we will use unity scene management
59:21 - and to use that we need to add the
59:24 - namespace
59:25 - at the top of the script
59:27 - so right using
59:31 - unity engine
59:33 - dot
59:35 - scene management
59:38 - and now whenever we press the retry
59:40 - button we can say
59:42 - scene management
59:45 - scene manager dot
59:53 - set active scene
59:56 - sorry we will say scene manager dot load
59:59 - scene to load the scene
60:02 - and we will pass in scene manager
60:05 - dot
60:06 - get active scene
60:09 - so it will get the current scene
60:12 - and we will get its name
60:17 - so
60:19 - now it will
60:21 - restart our
60:23 - scene
60:24 - and our game over screen
60:27 - will now
60:29 - become false
60:31 - so let's go back to the unity
60:36 - and
60:41 - here we can change the canvas
60:45 - reference resolution
60:47 - to 1080 by 1920
60:52 - 1080
60:53 - by
60:54 - 1920
60:57 - because it is
60:59 - portrait mode
61:01 - now
61:03 - we can drag and drop our
61:05 - game over panel to this game over screen
61:09 - field
61:10 - and now we can see that whenever we
61:14 - hit play
61:16 - then
61:20 - when we collide with the
61:22 - obstacle then
61:24 - the game will be freezed and
61:27 - our game over screen
61:29 - will appear
61:30 - now
61:31 - currently these buttons are not working
61:34 - so to make them work we need to click on
61:38 - this retry button
61:40 - and
61:42 - we will click on this on click
61:46 - list and
61:47 - we will hit this plus icon
61:50 - and
61:51 - in this slot we will drag our game
61:53 - manager
61:54 - game object
61:56 - and we will select
61:59 - retry function from the game manager
62:01 - script
62:02 - so whenever we click on this retry it
62:05 - will execute that function
62:07 - currently it will give us an error
62:09 - because we haven't
62:10 - added this scene to our project yet
62:13 - click on the file and build setting
62:16 - then click on
62:17 - scenes and add our sample scene to that
62:22 - to this window
62:24 - and now
62:25 - ctrl s to save
62:27 - and now when we hit play we can
62:31 - see that whenever we collide
62:33 - with the
62:34 - obstacle it brings up the
62:37 - game over screen and when we click on
62:39 - this retry it will
62:41 - restart the game
62:46 - so we can see that
62:49 - now currently this main
62:51 - menu button is not working but we will
62:53 - make it work hello guys so in the
62:55 - previous video we have created the
62:58 - game over screen
63:00 - so currently you can disable this
63:03 - game over panel
63:05 - like this
63:07 - now
63:08 - before we create the scoring system
63:12 - we will change some settings in this
63:14 - spawner
63:15 - so
63:17 - for the time to spawn i have assigned
63:20 - 1.8 and for mean height minus 4 and for
63:24 - max height minus 2.2 you can play around
63:27 - with this values
63:29 - if you want
63:30 - but
63:31 - these are the values that i am going to
63:34 - use
63:35 - in this game
63:37 - so now to make this scoring system we
63:40 - will first make
63:41 - the ui for our score
63:45 - so right click on the canvas and create
63:48 - new ui element
63:50 - and this time create a text
63:53 - and we will rename it
63:55 - to
63:57 - score
64:00 - now
64:03 - click on this
64:04 - icon here
64:05 - and
64:07 - click here
64:09 - top center
64:10 - to anchor it
64:13 - onto the
64:14 - top center of our canvas
64:18 - now
64:19 - we will change its width and height
64:22 - so
64:24 - select this rect tool
64:28 - now we can change its width
64:31 - so we will make it
64:35 - as the
64:36 - width of the canvas
64:38 - and for the height
64:41 - we will
64:44 - type in 300
64:48 - or let's make it 200
64:52 - now move this
64:55 - score text
64:57 - to
64:58 - the upper side of our canvas
65:02 - and
65:03 - we will write score
65:09 - by default
65:11 - change it to bold and for the font size
65:16 - we will go with
65:21 - let's say 80
65:26 - now
65:28 - click on this alignment
65:30 - and align it
65:33 - horizontally and vertically to the
65:36 - center
65:38 - now
65:39 - click on this best fit
65:42 - now we will
65:45 - change its color to red
65:50 - we will give it an outline
65:53 - so
65:54 - type in outline
65:58 - now we will also give it a shadow
66:02 - and change the effect distance
66:21 - now
66:22 - we have created our ui for displaying
66:25 - this score
66:27 - so now
66:28 - go to the game manager script
66:31 - and we will make a public variable to
66:34 - refer to reference the
66:36 - score text
66:38 - so make a public
66:40 - text
66:43 - so if your
66:44 - if it doesn't suggest you this text then
66:48 - you have to include this
66:50 - name space here using unity engine dot
66:52 - ui
66:54 - so we will name our variable as
66:58 - score text
67:00 - score txt
67:04 - and we will also make another variable
67:07 - which is private
67:10 - float
67:12 - and score
67:15 - so it will keep track of our score
67:19 - so now
67:20 - at the beginning of our game our
67:23 - score
67:24 - would be zero
67:28 - so
67:29 - make it 0
67:30 - now
67:32 - in the update method
67:34 - we will increment our score variable so
67:37 - let's increment
67:39 - it by time dot delta time
67:44 - so time dot delta time
67:50 - now
67:52 - in the update method we will also change
67:55 - the
67:56 - score text
67:57 - so let's write score text
68:01 - dot text
68:03 - so we are accessing the
68:06 - text property of our
68:09 - score text component
68:11 - so
68:12 - let's go to the unity
68:14 - and click on this
68:17 - score text
68:19 - and we can say see that we are accessing
68:22 - this text
68:24 - property
68:25 - of this text
68:27 - component
68:29 - here
68:30 - so
68:32 - now we will make it equal to
68:36 - score
68:40 - plus
68:44 - our score variable
68:51 - so
68:52 - we are adding a string and
68:55 - if load
68:57 - so now let's save this script and
69:00 - go back to the unity
69:03 - and now
69:04 - we have to assign this score text to our
69:08 - game manager so let's drag and drop this
69:11 - score text to
69:13 - the game manager's score text field
69:17 - now hit play button
69:21 - and you will see that our
69:24 - score is
69:25 - increasing
69:27 - but it is displaying the float value
69:30 - so we have to convert this float
69:33 - into an integer
69:35 - so let's get back to the script
69:38 - and we will here
69:40 - type cast this score variable which is
69:43 - float into integer
69:46 - so let's
69:48 - type cast it
69:50 - from score from float to integer
69:53 - now save this script and go back to the
69:55 - unity
69:58 - now
69:59 - if we hit play
70:02 - then
70:03 - we can see that now it only displays
70:07 - the integer values
70:10 - so
70:11 - that's it for this video we have
70:14 - implemented the
70:15 - scoring system for our game
70:18 - so in this video we are going to create
70:20 - a pause menu
70:22 - so we are going to duplicate the game
70:25 - over screen to create our
70:28 - pause menu screen because it's quite
70:30 - similar
70:31 - so to first of all to create the pause
70:34 - menu we have to create a pause button
70:37 - so let's
70:38 - duplicate this retry button
70:40 - so press ctrl d to duplicate
70:43 - and drag it
70:45 - outside of this
70:47 - game over panel
70:49 - so
70:51 - now you can see
70:53 - let's rename it to pause
70:58 - and we will also rename its text
71:02 - so
71:03 - we will use this
71:05 - or kind of symbol
71:07 - for this pause button
71:09 - you can find this
71:11 - key on
71:13 - on the backward slash on the keyboard
71:16 - so after that we will resize this button
71:19 - so let's make it 100 by 100
71:25 - and we will also align it to
71:28 - left
71:30 - and
71:32 - now
71:33 - we will go into the scene view
71:36 - double click on the pause and
71:38 - we will resize this text
71:41 - boundaries so that it can fit well
71:54 - okay
71:54 - and we will also disable the shadow for
71:57 - the text
72:01 - now you can see it's it is looking like
72:04 - a pause button
72:05 - so
72:07 - now
72:08 - click on this move tool
72:11 - and we will
72:14 - actually let's just type in the values
72:16 - so click on the pause button and
72:19 - for the position x we will say 90
72:22 - and for the position y we will say minus
72:25 - 90
72:26 - so it will be positioned at
72:29 - the left
72:30 - left side of our screen
72:33 - so
72:35 - now that we have created the pause
72:37 - button
72:39 - we can
72:41 - go into the game manager script
72:46 - now we also have to create
72:49 - the reference for our
72:52 - button
72:53 - so let's make a public
72:56 - okay so since it's a button then we
72:59 - we will call it by
73:01 - the on click event so let's make a
73:05 - public function
73:08 - public white
73:10 - pause game
73:17 - and
73:20 - here we will
73:24 - say that time dot time scale
73:30 - is equals to 0
73:32 - because we want to pause the game
73:35 - and
73:37 - we will also create a public variable
73:40 - for our
73:41 - pause menu
73:42 - public
73:44 - game object
73:47 - then pause
73:50 - menu
73:53 - and
73:56 - at the start of our game
74:00 - we will say
74:01 - pause menu
74:04 - dot
74:06 - set active
74:10 - set active to false
74:15 - and whenever we pause our game then we
74:18 - will say
74:20 - let's just copy this
74:24 - so
74:27 - copy
74:28 - and we will paste it here
74:32 - and we will say pause menu dot set
74:34 - active to true
74:41 - and we will also create two more
74:43 - functions
74:45 - so let's create a public
74:49 - void
74:52 - resume
74:56 - resume game
74:59 - so
75:00 - in this function
75:02 - we will first of all
75:03 - disable the pause menu screen so
75:07 - let's
75:08 - make it false now
75:13 - after setting it to false
75:15 - we have to also
75:17 - make this time dot time scale equal to
75:19 - one
75:21 - so let's make it one
75:24 - time dot
75:26 - time scale
75:28 - equal to 1
75:31 - so whenever
75:33 - whenever
75:34 - we press the resume button
75:36 - our game will be
75:39 - resumed from the
75:40 - pause state
75:42 - so we will also create a quit function
75:47 - let's make a public
75:49 - void
75:51 - quit
75:54 - game
75:55 - for now there will be only two buttons
75:58 - in our pause menu
76:00 - so for the quit button we have to just
76:02 - type in application
76:04 - dot
76:05 - quit
76:09 - and
76:10 - whenever we
76:11 - press the quit button it will quit our
76:15 - game
76:17 - now we have created all
76:21 - the necessary functions for our
76:24 - pause menu
76:25 - now we have to create this pause menu ui
76:29 - so let's get back to the unity editor
76:33 - now
76:35 - we will duplicate this game over panel
76:37 - so press ctrl d
76:40 - and
76:42 - we will rename it to
76:44 - pause
76:47 - menu
76:51 - now
76:53 - make it active
76:56 - we forgot to
76:58 - save this script so let's save it
77:09 - now we will also change the
77:12 - text on these two
77:15 - first of all let's rename this retry
77:18 - button to resume
77:24 - and this main button to
77:27 - quit
77:31 - and
77:33 - change the text
77:36 - to
77:37 - resume
77:41 - and
77:43 - quit
77:44 - to quit
77:50 - now we will make this quit button a
77:53 - little bit smaller
77:55 - so let's make it 500
78:01 - and
78:04 - we'll also
78:05 - adjust its
78:06 - shadow
78:13 - okay
78:14 - so
78:15 - now you can also
78:17 - change the background color of
78:20 - our
78:21 - pause menu
78:23 - panel
78:29 - okay
78:31 - so
78:32 - now we will assign the
78:34 - functions
78:35 - to the buttons
78:37 - now click on this pause button and
78:41 - here
78:43 - the game
78:44 - game manager object is already assigned
78:47 - so let's
78:50 - go to the game manager script and
78:54 - choose the pause game function
78:59 - now
79:00 - for the pause menu
79:03 - click on this resume button
79:06 - and
79:07 - we will choose
79:09 - resume game function
79:12 - for the quit
79:15 - we will add the
79:17 - on click event
79:19 - and drag and drop the game manager
79:21 - object
79:23 - and
79:24 - select quit game function
79:30 - now
79:32 - our pause menu is ready
79:34 - so
79:38 - we have to also assign this pause menu
79:40 - to
79:41 - the
79:42 - game manager object game object
79:45 - so let's drag and drop this
79:49 - and
79:51 - we will also disable this
79:53 - by default
79:56 - now save and
79:58 - now we can click on the play button
80:04 - and
80:05 - let's click on this pause so you can see
80:07 - that our game is paused
80:10 - now
80:11 - if we click on this quit button nothing
80:13 - will happen
80:14 - because we are in the editor mode
80:17 - so whenever we export our game to
80:20 - android device then we will be able to
80:23 - quit our game
80:24 - now let's click on the resume
80:27 - so it will resume
80:32 - hello guys so in this video we are going
80:34 - to create a main menu for our game
80:37 - in the previous video we have created
80:39 - this
80:40 - pause menu
80:41 - so that whenever we click on this pause
80:44 - button
80:45 - our game will be paused and we can
80:47 - resume or quit
80:49 - now we will create a main menu
80:52 - so that whenever we start the game
80:55 - the main menu will be shown first
80:57 - and then we can choose
80:59 - to play the game or quit currently we
81:02 - will implement only two functionalities
81:05 - with and play
81:07 - but later on we can
81:08 - add high score and options
81:12 - so to create a main menu we have to
81:14 - create a new scene
81:16 - currently we have this sample scene you
81:18 - can also rename this to level or game
81:21 - whatever you want but we will create a
81:23 - new scene
81:25 - so let's create a
81:26 - new scene
81:31 - and we will name it as main
81:35 - menu
81:39 - now double click on it to open
81:43 - now
81:44 - we want to change the background color
81:46 - of this main menu
81:48 - so click on this background
81:50 - property
81:52 - and change it to
81:54 - something white
81:56 - you can make it
81:59 - like whatever you want
82:02 - we will also create a
82:04 - button here
82:06 - so let's go into the ui and then button
82:10 - it will automatically create the canvas
82:13 - and event system
82:15 - we have already talked about these two
82:18 - so we will choose
82:20 - screen space camera as our render mode
82:24 - and we will drag and drop our main
82:26 - camera
82:28 - and here we will click on this pixel
82:30 - perfect
82:32 - so for the
82:34 - ui scale mode we will go with
82:36 - scale with screen size so it will scale
82:39 - our canvas according to the
82:41 - screen resolution
82:44 - so we have to provide this reference
82:46 - resolution so let's say
82:49 - 1920 by 1080 then because we are in
82:53 - portrait mode then we have to give
82:56 - 1080 by 1920
82:59 - and here
83:01 - we will say
83:03 - 0.5
83:07 - now we will rename this button to play
83:11 - so let's rename it to play
83:17 - we will make it little bit bigger
83:23 - let's go with 300 by
83:34 - let's go with
83:35 - 400 by
83:39 - 200 okay
83:41 - now we will also change the text on the
83:44 - button
83:45 - so let's make it
83:47 - as play
83:49 - we will choose the font style as the
83:51 - bold
83:52 - and
83:54 - let's increase the
83:57 - font size
83:59 - we can
84:00 - make it 200 and we can also click on
84:03 - this best fit
84:06 - so it will
84:08 - fit our text according to the size of
84:11 - this button
84:13 - now
84:14 - it is already centered
84:17 - we will also
84:19 - change its color
84:21 - if you want
84:22 - but
84:24 - let's change it to completely black
84:28 - now we will also give it a
84:31 - shadow
84:34 - and
84:38 - let's adjust this effect distance
84:48 - now you can also change the effect color
84:51 - of the shadow but
84:54 - this looks quite well
84:57 - now we will
84:58 - also give the shadow to
85:02 - our
85:03 - button
85:05 - and
85:08 - change the factory distance
85:16 - okay so now we will also reposition our
85:20 - button
85:22 - let's click on the button and
85:26 - okay so let's
85:28 - click on this move tool and drag it
85:32 - little bit upward
85:36 - okay this is good
85:39 - now we will duplicate this button
85:42 - so let's press ctrl d
85:45 - and we will rename this to quit
85:50 - and we will also change the
85:55 - text on the button
85:58 - quit
86:01 - and
86:02 - let's reposition it
86:05 - okay so we have only selected the text
86:08 - we have to select this whole quit button
86:16 - okay so if we want to give a title to
86:19 - our game then
86:20 - we need to
86:22 - hold
86:23 - display and quit button slightly below
86:27 - so let's select them
86:30 - by holding shift
86:34 - and we will drag them downwards
86:41 - we can add the title if we want and we
86:43 - can also add
86:44 - high score
86:47 - now
86:48 - we will make this quit button
86:51 - little bit smaller
86:55 - okay
86:56 - so it's looking
86:58 - quite good
86:59 - now you can also
87:01 - add a title by just right clicking on
87:04 - canvas and
87:06 - adding a symbol text element
87:08 - so we will call it as
87:11 - our
87:14 - first game
87:18 - or you can call it whatever you want
87:21 - and
87:25 - will increase its size it is currently
87:27 - not visible because the text box is
87:31 - quite small
87:33 - let's click on this
87:35 - rect tool
87:36 - and we can
87:38 - expand this
87:41 - and
87:42 - we will also
87:44 - reposition our
87:47 - title
87:51 - so now
87:53 - click on this text and
87:55 - we will and i align it to center both
87:58 - horizontally and vertically
88:00 - now you can see that
88:03 - it's looking quite good
88:05 - we can also change its color
88:08 - let's click on this best fit
88:10 - i can also
88:13 - change its color
88:16 - then we can also give it a shadow
88:21 - like this
88:29 - you can also increase the font size
88:36 - okay
88:37 - let's
88:38 - name it as endless runner
88:46 - okay
88:48 - that is good
88:50 - now that we have created the
88:52 - main ui of our main menu
88:56 - then we can
88:58 - save it
88:59 - and we have to also add this main menu
89:03 - scene to our build settings click on
89:05 - build settings
89:07 - and drag and drop this
89:08 - main menu to our
89:12 - build setting
89:13 - this scene
89:14 - list
89:16 - so now we can create a main menu script
89:20 - so click on the script folder right
89:22 - click create a new shop script
89:26 - and call it as main
89:29 - menu
89:33 - double click on it to open it up
89:35 - individual studio
89:38 - now we are going to use unity's ui
89:42 - so using add this namespace using unity
89:46 - engine
89:48 - dot ui
89:55 - okay so
89:56 - we can we are you also we are also going
89:59 - to use the
90:01 - scene management so let's
90:04 - include that as well unity engine
90:08 - dot scene management
90:11 - in fact we are
90:13 - we will not
90:14 - be using this ui
90:17 - unity engine dot ui namespace
90:20 - but we we are going to use this unity
90:23 - engine dot scene management
90:25 - so
90:27 - let's create some functions for our
90:29 - buttons
90:31 - let's create a public
90:35 - white
90:37 - play
90:39 - game
90:45 - and here we can say
90:47 - scene manager
90:52 - dot load scene
90:55 - and here we can pass in the name of
90:58 - our scene
90:59 - so
91:01 - in this
91:03 - we have to copy the scene name
91:09 - click on this sample scene click on f2
91:12 - ctrl c
91:14 - and then we can paste this
91:16 - scene name here
91:19 - you can also rename this sample scene to
91:22 - label or something like that
91:26 - and for the quit button which is
91:28 - quite simple
91:31 - public
91:33 - let's just copy it from our
91:35 - game manager script
91:37 - we have already created this quit button
91:40 - functionality here
91:43 - so let's copy it
91:49 - okay
91:53 - now we have created the main manuscript
91:56 - so let's get back to the unity
92:00 - and
92:01 - we can assign this main manuscript to
92:04 - our canvas so let's assign it
92:08 - now click on this
92:10 - button
92:12 - ctrl press ctrl and you can select both
92:15 - of them at the same time
92:17 - and we will add this on click
92:20 - event
92:21 - and
92:22 - drag and drop the canvas
92:25 - so for the play button
92:28 - we will choose the
92:30 - play function play game function
92:33 - and for the
92:35 - quit button
92:36 - we will choose
92:38 - quit but quit game function
92:41 - now our
92:43 - setup is ready so we can hit play
92:48 - this quit button will not work
92:51 - in the editor but once we export our
92:53 - game to android it will fit our game
92:56 - whenever we click on this
92:58 - let's click on play
93:05 - now we have to also
93:07 - assign our
93:09 - main menu
93:10 - a main menu button a function
93:13 - that can
93:15 - redirect us to main menu whenever we
93:19 - lose the game
93:21 - so let's add that functionality also
93:25 - let's get back to the game manager
93:27 - script
93:28 - and
93:30 - here we will create a new function
93:34 - so let's create a public
93:37 - void
93:40 - main
93:48 - menu and here we will say scene manager
93:56 - dot load scene
93:58 - and
93:59 - we will give it
94:02 - the name of our main menu scene
94:05 - which is
94:06 - main menu
94:08 - you have to type in the correct name
94:11 - otherwise it will not work
94:14 - so let's copy it from here
94:19 - and paste it
94:22 - okay so it is
94:24 - done
94:25 - now save this script and go back to the
94:28 - unity
94:30 - and now we can
94:32 - go to the sample scene
94:35 - and
94:37 - in the pause menu
94:39 - we have
94:41 - a
94:42 - resume and quit button but
94:44 - in the game over panel we have this main
94:46 - button
94:48 - so let's add a on click event
94:51 - and
94:52 - drag and drop the game manager game
94:55 - object
94:56 - and select
94:57 - main menu
94:59 - function
95:01 - and it is done
95:02 - so now let's hit play
95:06 - and
95:07 - we can see that
95:10 - we can now
95:12 - go back to the main menu
95:14 - and we can play our game
95:17 - hello guys so in the previous video
95:20 - we have created this main menu in our
95:23 - game
95:24 - now in this video we are going to create
95:27 - some sound effects for our game like
95:29 - jump and hurt
95:31 - so for this we are going to use a
95:33 - software called bfxr
95:36 - which is used to make 8-bit sounds
95:40 - now to download this software
95:43 - uh open up your browser and search for
95:45 - bfxr download
95:47 - and
95:48 - click on this first link
95:51 - and from here we can download it
95:54 - either for windows or mac
95:57 - so click on windows
96:01 - and it will automatically download these
96:03 - file
96:04 - you can install it as you install any
96:07 - other software it is pretty straight
96:09 - forward
96:10 - i have already downloaded and installed
96:13 - it
96:13 - so
96:15 - you can install it and after installing
96:18 - double click on it to open it up
96:24 - you will see this kind of interface
96:27 - when you open
96:28 - this program
96:30 - there are various buttons
96:32 - there are some pre-built sounds
96:36 - that we get out of the box
96:38 - which is
96:40 - pickup coin laser
96:42 - explosion power etc
96:45 - we can also create a randomized sound
96:48 - by
96:49 - clicking on this randomize button
96:52 - and
96:54 - we can also
96:56 - we can also
96:57 - modify these properties for each sound
97:00 - currently
97:02 - we are on this jump sound so we for the
97:07 - you can uh
97:08 - explore this software more
97:10 - but for our game we just need two sounds
97:14 - which is
97:15 - uh which are jump and
97:17 - halt
97:18 - so we will use this uh
97:20 - pre-built
97:21 - sounds
97:23 - now to create a new sound we just have
97:25 - to click on this
97:27 - button
97:29 - of the
97:30 - jump
97:32 - or
97:32 - heart or
97:34 - whichever you want to create
97:37 - currently the jump
97:38 - sound is already created
97:40 - uh
97:41 - but i will create it anyways
97:43 - so click on this jump button to create
97:46 - jump sound
97:48 - and you can click on this play to play
97:51 - the sound
97:53 - and you can preview it
97:54 - and you can also change the
97:57 - properties of this sound
98:01 - now i will delete delete this jump
98:05 - to and i will use this
98:07 - first one
98:09 - and i will also create uh
98:13 - now first of all we will export this
98:16 - created sound effect
98:18 - now to export any sound effect we have
98:21 - to click on this export wav
98:26 - now
98:26 - we will export it on our desktop so
98:30 - click on save
98:32 - you can see that
98:34 - our sound
98:36 - is exported
98:38 - now
98:40 - we will also create a heart sound for
98:43 - our game so let's click on this hit or
98:46 - heart
98:47 - you can preview this and modify it as
98:50 - always you can also
98:52 - choose different synths
98:54 - from here like triangle tangent or sine
98:59 - but i will use this default one so i
99:02 - will
99:04 - cancel this jump
99:06 - and export
99:08 - the heart sound
99:11 - so click on export wave
99:13 - and
99:15 - we will save it on the desktop
99:17 - now we can close this program you can
99:20 - of course
99:22 - explore this more if you want
99:25 - but
99:26 - it is the two these two sounds are
99:28 - enough for our game
99:30 - you can also create some other sounds if
99:33 - you want
99:34 - so after creating these sounds
99:37 - go back to the unity editor and here in
99:40 - the assets folder we will create a new
99:43 - folder for
99:45 - keeping our
99:46 - sounds
99:48 - so let's name it as
99:50 - sounds
99:53 - and in here
99:55 - let's drag and drop these two sounds so
99:59 - select these two
100:01 - and
100:02 - drag
100:03 - them into the
100:05 - unity editor and in the sounds folder
100:09 - it will import it
100:12 - now you can preview it from here also by
100:15 - clicking on this play button
100:18 - now
100:19 - we have to
100:21 - go into this
100:24 - sample scene you can rename this scene
100:26 - but i have not renamed it
100:29 - you can rename it to level one or
100:31 - something like that
100:33 - but for now it is okay so we will uh
100:38 - we are here in our main emcee
100:41 - so we will drag and drop these two
100:43 - sounds
100:45 - into our scene
100:49 - so sit and drag and drop these two and
100:52 - it will create
100:55 - two game objects and they will
100:58 - contain this
100:59 - audio source component
101:01 - and as the audio clip it will be our
101:04 - sound itself
101:06 - now
101:07 - these two are created on
101:10 - the position 0 0 0 which is totally fine
101:13 - you can put it anywhere you want
101:15 - and
101:16 - these components are these companies
101:19 - component which is audio source is
101:21 - responsible
101:23 - for
101:24 - this
101:25 - playing this sound
101:27 - now our main camera
101:29 - already
101:30 - has a audio listener
101:33 - so
101:33 - which is used to
101:37 - listen the sound in our scene
101:40 - produced by the audio source
101:43 - now
101:44 - once we have created these two sounds
101:48 - to game objects
101:49 - then we will go to
101:51 - our player movement script
101:54 - and we will reference it
101:56 - so
101:57 - let's make a public variable
102:00 - so public
102:03 - audio source
102:05 - [Music]
102:07 - and we will name it as jump
102:11 - sound
102:13 - [Music]
102:16 - now let's
102:17 - save it
102:19 - and
102:25 - after that click on the player
102:35 - it is compiling
102:38 - so click on the player
102:40 - and
102:41 - you can see that the player movement
102:43 - script
102:44 - has this
102:46 - jump sound field
102:48 - so drag and drop the
102:52 - jump
102:53 - game object
102:55 - into this slot
102:57 - so now we will
103:00 - play this jump sound whenever our player
103:03 - jumps
103:05 - and
103:07 - we have to
103:09 - do few settings here
103:11 - we will shift to select these two sound
103:14 - so select these two
103:16 - and uh and take this play on away
103:20 - so they will not play whenever our scene
103:23 - starts
103:25 - but they will play whenever we call them
103:28 - from our script
103:29 - so make sure that
103:31 - this play on awake is
103:33 - not selected
103:35 - for both of them now
103:39 - we will also give a tag to
103:42 - our obstacle
103:44 - so let's create a tag
103:47 - as
103:48 - o p s d
103:51 - you can create
103:53 - a tag with
103:55 - whichever name you want
103:57 - but i will
103:59 - create this stack with
104:01 - obst name
104:04 - now
104:05 - we will assign it to the obstacle
104:07 - breaker
104:10 - now
104:12 - we want to
104:13 - play this sound whenever our player
104:16 - jumps so
104:17 - in the player movement script we will
104:20 - play whenever we tap on the screen
104:23 - so
104:25 - let's
104:28 - say some sound dot play
104:35 - now
104:38 - it will play the jump sound whenever our
104:40 - player jumps or we
104:42 - tap on the screen
104:45 - so
104:45 - now we want to play this jump
104:49 - hurt sound whenever our player collides
104:51 - with the
104:52 - obstacle
104:53 - so let's first of all reference this
104:59 - right sound so
105:00 - obviously audio source
105:03 - is sound
105:10 - now we want to play
105:12 - if
105:13 - the
105:15 - collided
105:17 - object is
105:19 - [Music]
105:20 - uh
105:21 - obstacle so
105:23 - copy this if statement and paste it here
105:26 - and we will
105:27 - say equalizer dot compared to
105:30 - obs
105:31 - [Music]
105:32 - then we want to play this sound
105:36 - sound
105:38 - dot play
105:43 - but it will not play the sound currently
105:45 - because we are making
105:47 - time dot time scale
105:49 - equal to zero
105:51 - in
105:52 - the obstacle script
105:55 - here
105:56 - so we will not make it zero
106:01 - so comment it
106:06 - now
106:08 - we can
106:10 - go back to the game manager script
106:13 - and here we can say that
106:16 - if
106:17 - the
106:18 - [Music]
106:19 - game is not over so not
106:22 - [Music]
106:23 - easily more so if the game is not over
106:29 - then we want to increase
106:31 - the score
106:37 - and
106:40 - now we will also make the
106:44 - obstacle
106:47 - speed
106:49 - to zero
106:50 - so to do this we will say
106:54 - if
106:56 - game manager because it is a static
106:58 - variable so we can access it from here
107:01 - also
107:02 - game manager.
107:05 - so
107:06 - if the game is not over
107:08 - then and then we want to
107:12 - increase the position of the obstacle
107:18 - so we will increment it
107:21 - whenever the game is not over
107:26 - now after that
107:31 - it will work
107:32 - so
107:33 - let's save this and go back to unity
107:37 - now we can
107:38 - click on this player
107:40 - and drag and drop this
107:44 - hit sound to this it's it's sound field
107:49 - now click on play
107:55 - and
107:57 - now it will play the sound
107:59 - whenever
108:01 - it collides with the obstacle
108:06 - now
108:08 - we can say we can see that the
108:11 - spawner is spawning the obstacles
108:21 - so we will also
108:24 - check here if the game is over or not
108:27 - so let's check
108:30 - if
108:42 - in front of it
108:44 - so we want to spawn the obstacle if the
108:47 - game is not over
108:51 - past it here
108:54 - save this script and
109:01 - now
109:03 - we can see that
109:05 - it will not spawn the obstacle if the
109:07 - game is over
109:10 - okay
109:15 - our sounds are working perfectly
109:18 - hello guys in the previous video we have
109:20 - created the sound effects for our game
109:23 - and in this video we are going to create
109:25 - a high score system for our game we are
109:27 - going to use uh unity's player flash for
109:30 - this
109:30 - it is an easy way to store the data on
109:33 - our device locally
109:35 - so
109:36 - we will first of all create the ui for
109:38 - high score so
109:40 - let's go into the main menu and expand
109:43 - this canvas object and in here
109:46 - duplicate this title text and we will
109:48 - rename it to high score
109:50 - so let's say name it
109:53 - now
109:54 - after that we will also reposition it to
109:57 - the bottom of the screen
110:00 - somewhere around here
110:03 - let's change the text
110:05 - to high score
110:11 - click on this best fit
110:14 - and let's also resize the text area
110:19 - to make it in one
110:22 - line and after that let's go into the
110:25 - main manuscript to
110:27 - reference this high school text
110:30 - so create a variable public
110:33 - text
110:35 - i score txt
110:41 - and
110:42 - after that save this script
110:44 - and
110:45 - let's go back into unity
110:49 - and
110:51 - wait for it to compile
110:53 - and after that click on the canvas and
110:55 - drag and drop the high score into the
110:57 - high score txt field
111:00 - and now
111:02 - let's go into the game manager script
111:04 - and here when we are setting the score
111:08 - we will say player press
111:11 - dot
111:12 - set int
111:13 - you can also set float and string we
111:16 - will give it a string which is
111:19 - a key
111:20 - to access this which is high score and
111:25 - we will set it to the current score
111:28 - and this score is currently float so
111:31 - let's type cast it to integer
111:36 - now we want to
111:38 - change the high score only if this score
111:41 - is less than
111:42 - the high score
111:44 - so let's say if
111:46 - our score
111:48 - is
111:49 - less than
111:50 - uh i'm sorry it is greater than
111:53 - player price
111:54 - dot
111:55 - get it
111:57 - and we will get this particular key
111:59 - which we have created which is high
112:02 - score
112:04 - and we will also pass in the default
112:07 - value as 0
112:09 - so
112:09 - whenever our score is greater than the
112:12 - previous high score it will reset
112:15 - the
112:16 - high score key
112:18 - to that score
112:20 - now
112:22 - save this script
112:24 - and
112:25 - in the main manuscript
112:28 - we will say that high score text
112:32 - dot text
112:34 - is equals to
112:37 - is equals to player facts
112:40 - so
112:42 - let's say player preps
112:45 - dot
112:46 - get integer
112:48 - and we will
112:50 - get that key which we have created which
112:53 - is high score
112:55 - and we will also pass in the default
112:57 - value
112:58 - as 0
113:00 - and we also need to convert this into a
113:02 - string
113:04 - so let's
113:05 - say tostring
113:07 - [Music]
113:10 - okay so
113:13 - now in the
113:15 - uh game manager script
113:17 - we have to also type cast this code to
113:20 - integer because it is currently flowed
113:23 - [Music]
113:26 - okay
113:29 - so save the script and go back to the
113:32 - unity
113:36 - and
113:37 - let's play the game
113:44 - we can see that our high score is 0
113:47 - but we want to also display the high
113:49 - score
113:50 - in front of the actual high score
113:53 - let me
113:54 - simplify it so we will
113:57 - add a
113:58 - high score
114:02 - string
114:03 - in front of the
114:05 - actual high score
114:09 - okay
114:10 - so
114:12 - that's it let's save it
114:14 - [Music]
114:15 - and go back to the unity
114:19 - now let's play the game
114:21 - now
114:23 - you can see that it is currently
114:24 - displaying high score as zero let's play
114:26 - the game
114:28 - and
114:29 - score
114:32 - so
114:32 - it is displaying two as a high score
114:36 - let's try to score
114:41 - okay let's try again
114:44 - okay so now it is
114:46 - four so it will display as four
114:50 - and you can
114:53 - reset the player press by going into the
114:56 - edit and
114:57 - clear all player player brackets and
115:00 - click on yes to delete all the
115:02 - player flaps
115:04 - and it will reset the
115:06 - data in the
115:08 - player tracks
115:10 - hello guys so in the previous video we
115:12 - have created the high school system for
115:14 - our game
115:16 - and in this video we are going to export
115:18 - our game to the
115:19 - android platform
115:21 - first of all we have to change some
115:23 - settings so click on the file
115:26 - and
115:28 - go into the build settings
115:30 - after that click on the player settings
115:34 - and in here
115:36 - we can change the company name
115:38 - currently it is default company you can
115:41 - also change it to whatever you want
115:44 - you can also change the name of the game
115:47 - and
115:49 - we can also change the
115:51 - version
115:52 - so every time you update the game
115:55 - you may want to increase this
115:58 - and let's
116:01 - select the icon for our game
116:05 - and i will select this
116:06 - [Music]
116:08 - knob icon
116:10 - which is a default one
116:13 - so you can also make your own custom
116:15 - icon
116:16 - obviously you will make your own icon
116:19 - for your game you can set it there
116:22 - now in the resolution and presentation
116:26 - make the default orientation as portrait
116:30 - so our game will be played in the
116:33 - portrait mode only
116:35 - and we are not going to publish this
116:37 - game so
116:39 - these settings are
116:41 - currently okay
116:43 - after that make sure you have installed
116:45 - the android build support while
116:48 - installing the unity
116:50 - and
116:51 - click on the build
116:52 - and you can save this
116:54 - apk wherever you want currently we are
116:57 - saving it into the desktop and in the
116:59 - new folder
117:01 - so save it
117:03 - and it will take some time
117:06 - to build the project
117:08 - make sure you have an active internet
117:11 - connection
117:13 - because it will require the internet
117:15 - connection to build our project
117:19 - so
117:21 - it may take some more time for you so
117:24 - please wait while it is building
117:27 - for now the this
117:29 - series this beginner series is
117:32 - completed
117:34 - we may add some extra things in the
117:36 - future like double jump functionality
117:39 - and simple store system etc
117:42 - but for now it is
117:45 - completed as a beginner series
117:50 - now let's wait for the gradle
117:53 - build to complete
117:58 - and after
117:59 - that you can see that our
118:01 - app is in the new folder and you can
118:04 - install this app into your android
118:07 - device
118:08 - and
118:09 - you can play it on your own device
118:13 - okay
118:14 - so that was it for this video
118:18 - thank you for watching this video