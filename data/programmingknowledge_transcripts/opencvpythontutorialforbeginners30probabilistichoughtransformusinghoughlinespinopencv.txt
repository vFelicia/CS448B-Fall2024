00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last video we have seen
00:06 - how to use standard Hough transform
00:09 - using half lines method in open CV now
00:14 - in this video we are going to see how to
00:16 - use probabilistic half line transform
00:19 - using a method called Hough lines
00:21 - capital P method in open CB so let's go
00:26 - to our editor and this was the code we
00:29 - have written last time and we have used
00:31 - half lines method for detecting lines
00:35 - inside this image which was the Sudoku
00:39 - image so let's run this example really
00:43 - fast to see what was the result which we
00:46 - got last time so this was the result
00:49 - which we got last time and the problem
00:52 - with this result is you can see these
00:55 - lines just go from one end to the other
00:58 - end and in this kind of Hough transform
01:02 - you will be able to see that even for
01:06 - the lines which have a two argument it
01:10 - takes a lot of computation so in open CV
01:14 - there is also a method called half lines
01:19 - capital P which stands for probabilistic
01:22 - half lines transform and this
01:25 - probabilistic half line transform is an
01:28 - optimization of the normal Hough
01:32 - transform which we have seen in the last
01:35 - video so let me close this example and
01:39 - let's open the example which we are
01:42 - going to see in this video and you can
01:44 - see in this example we have used this
01:48 - Hough lines capital P method so when we
01:52 - use this half lines capital P method it
01:55 - doesn't take all the points into
01:58 - consideration instead it takes only the
02:01 - random subset of the points which is
02:04 - sufficient for the line detection so
02:07 - let's go through this code from the top
02:10 - to the end so as you
02:13 - can see I have imported these two
02:15 - packages cb2 and numpy as NP and then
02:21 - I'm reading this image so Doku using i'm
02:23 - reed method and then i'm converting this
02:27 - image to the grayscale image using CVT
02:31 - color method in cb2 now the next step is
02:34 - to find out the edges of the images this
02:38 - we have also seen in the last video so
02:41 - until here everything is same so once we
02:45 - got the edge detected image using Kenny
02:48 - edge detection instead of using the half
02:51 - lines method we are now using this half
02:55 - lines capital P method and it takes few
02:59 - arguments the first argument is your
03:02 - edge detected image the second argument
03:04 - is the Rho which is the distance
03:06 - resolution of the accumulator in pixels
03:09 - the third argument is the theta value
03:12 - which we have taken n P dot pi divided
03:16 - by 180 which is the angle resolution of
03:20 - the accumulator in radians the next
03:23 - value is the threshold so right now we
03:26 - have taken this threshold as 100 and
03:29 - this threshold is the accumulator
03:33 - threshold parameter which means that
03:36 - only those lines are returned that get
03:39 - enough word that means greater than the
03:43 - threshold value the extra 2 AG argument
03:47 - here are a little bit different from the
03:51 - half lines method so you can see all
03:53 - these arguments are almost same these
03:58 - four arguments but there are two extra
04:01 - arguments here or parameter here which
04:04 - we need to provide so the first
04:06 - parameter here is the min line length
04:10 - and this we have taken hundred so this
04:13 - min line length is the minimum length of
04:16 - the line which means that line segments
04:19 - shorter than this length which is
04:22 - hundred in our case will be rejected the
04:26 - next argument
04:27 - is the maximum line gap and it is the
04:31 - maximum allowed gap between the line
04:34 - segments to treat them as a single line
04:38 - so these are the two extra argument we
04:41 - have taken and this half lines capital P
04:44 - method is going to return again the
04:47 - output vector of the lines but the
04:50 - difference between this return value
04:53 - from half line P method and the half
04:57 - line method is you can see here this
05:01 - line at index 0 is going to directly
05:05 - give you the values of x1 y1 and x2 y2
05:09 - which are the two points which we will
05:12 - be able to join and we will be able to
05:14 - draw the line using CB 2 dot line method
05:17 - in the last video I have shown you that
05:20 - you have to do so much calculation in
05:23 - order to find this x1 y1 and x2 y2 and
05:27 - this probabilistic 1/2 line transform
05:31 - method is going to do our job easy and
05:34 - it's going to directly give us these
05:37 - four values so you don't need to do
05:38 - anything you just need to pass these x1
05:41 - y1 and x2 y2 value to the CB 2 dot line
05:45 - method so CB 2 dot line method is going
05:49 - to take the first argument which is the
05:51 - image and then the second argument is
05:54 - the point 1 coordinate which is x1 and
05:57 - y1 which we got from the line variable
06:01 - at index 0 and the third parameter here
06:05 - is the point two which are the
06:07 - coordinate of the point two which is
06:09 - here x2 and y2 the next argument here is
06:14 - the color which we have taken right now
06:17 - 0 comma 255 5 comma 0 and the last
06:22 - parameter here is the thickness of the
06:25 - line so we have taken 2 here and the
06:29 - next three line are going to just show
06:31 - this image first of all all these lines
06:34 - which we found out are drawn on the
06:38 - image this image which is the original
06:41 - and then we are just showing this image
06:44 - after drawing all the lines which we got
06:47 - using half lines P method on the
06:50 - original image and then we are just
06:54 - loading this image using this I'm show
06:57 - method and then after we are done we are
06:59 - just destroying all the windows so let's
07:02 - see what result we get after this script
07:07 - is run so I'm going to run the script
07:09 - and this is the canny edge detected
07:13 - image and this is the image you got when
07:18 - you apply this half lines P method on
07:21 - your canny edge detected image so you
07:25 - can see these lines are no longer going
07:28 - to the end to end these are more you
07:34 - know accurately detecting all the lines
07:37 - which are there in this Doku image you
07:42 - can see some lines are broken here so
07:45 - that's why these lines are not even you
07:49 - know drawn because they are not even
07:51 - detected by any edge detection so this
07:54 - one or this one are not detected by
07:57 - canny edge detection so that's why these
08:00 - lines are not drawn so let me show you
08:02 - these results side by side so this was
08:05 - the result which we got after applying
08:07 - the hoff line transform method which is
08:11 - Huff lines on our Kenney edge detected
08:14 - image and you can see all these lines
08:16 - here and this is the result which we got
08:20 - after applying Huff lines
08:22 - P method which is the probabilistic
08:25 - Hough align transform so these two
08:29 - methods are available in open CV to
08:32 - detect these lines in an image now let's
08:37 - go back to our script and here instead
08:40 - of this image which is the pseudo cou
08:43 - dot PNG image I have one more image
08:45 - which is called Road dot jpg and this is
08:51 - the image which contains a road and
08:54 - inside
08:54 - Road we have some lane lines so you can
08:58 - see this result now here which is the
09:02 - road and these are the lane lines which
09:06 - are detected using this half lines P
09:10 - method so in case of lane line detection
09:14 - you can use this half line P method but
09:17 - you need to decide your ROI or region of
09:21 - interest because you can see some lines
09:24 - are detected here here here and here so
09:27 - you just need to you know define your
09:31 - line of interest region and you will be
09:35 - able to detect all the lines or lane
09:38 - lines on the road so maybe in the next
09:41 - video we are going to see how we can
09:45 - detect these Lane lines on the road
09:48 - accurately without these noises which we
09:52 - are seeing here on the other part of the
09:57 - image so we just need to detect these
10:00 - Lane lines and nothing more
10:03 - and we will do the same on our video so
10:07 - on the video in which these lane lines
10:11 - are there and we just need to
10:13 - continuously detect these lane lines so
10:15 - in the case of let's say self-driving
10:18 - car you need to detect these lane lines
10:21 - we are going to see how to detect these
10:24 - lane lines so that's it for this video I
10:27 - will see you in the next video
10:38 - you