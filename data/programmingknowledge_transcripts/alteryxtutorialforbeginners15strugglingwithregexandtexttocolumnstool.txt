00:00 - hello everyone welcome to altrex videos
00:02 - in this video we are going to talk about
00:05 - a tool that is known as the regex tool
00:07 - in ultrix
00:09 - so regex is basically stands for regular
00:12 - expressions and that helps us to
00:14 - find for particular values
00:17 - in the
00:18 - uh table okay
00:20 - so here is a few uh small setup that i
00:23 - have done for the rejects tool this is
00:25 - how a rejects tool looks and it is a
00:27 - part of the parse tab in the ultrix so
00:31 - here is the rejects tool that's present
00:34 - it is used to leverage the regular
00:37 - expression syntax to pass match or
00:39 - replace the data
00:41 - so for the regex tool first of all the
00:43 - data must be present so i have taken a
00:44 - data that is the consumer segment data
00:46 - from the output excel sheets that we
00:48 - have already prepared in the previous
00:50 - videos
00:51 - in case you have not watched the videos
00:52 - i would recommend you to watch them to
00:54 - better understand what we are doing over
00:56 - here
00:57 - so once i have taken the data from the
00:59 - input data tool then
01:01 - let me just delete it once
01:03 - the next thing is to go to this parts
01:05 - tab and grab this regex tool over here
01:07 - okay
01:08 - now what we are going to do is connect
01:10 - these anchors like this
01:13 - and in the regex tools configuration
01:15 - we have the first option that is the
01:18 - configure the
01:20 - column to pass so here you can just
01:22 - select the column which we want to parse
01:24 - so what i'm gonna do is i'm just going
01:26 - to go with the customer name column that
01:28 - i want to parse
01:30 - next is in format to convert option we
01:33 - have to add the regular expression so
01:37 - here is the perl5 rejects syntax that
01:40 - has been followed
01:42 - by this regular expressions in case you
01:44 - do not know about the regular
01:45 - expressions and want to read about it
01:47 - then how can you go with it you can
01:50 - simply just go to google
01:53 - and here you can just search for
01:55 - regex
01:57 - alteryx reject stool altricks are
01:59 - basically regexaltrix
02:01 - so if you just uh search for it you
02:03 - would get the first link that is
02:05 - help.ultrex.com
02:07 - that would give you the official altrix
02:09 - documentation for this tool and in this
02:12 - official documentation you will find
02:14 - this link that is perl regular
02:15 - expression syntax you can just click on
02:17 - this link and here is all the
02:20 - information that you need to know about
02:21 - the regular expressions before working
02:23 - on them like everything that um every
02:26 - syntax of regex that is being used is uh
02:30 - shown over here okay
02:33 - so you can take your time and read it
02:35 - understand it well and then come back to
02:37 - this video so
02:39 - let me just quickly show you that how
02:41 - these regular expressions are going to
02:43 - work
02:44 - here what we have is the plus sign which
02:46 - is the button that is used to access the
02:48 - common regular expressions that we may
02:50 - need while creating the expression
02:53 - so if you just click on this plus icon
02:56 - we would be seeing these operations like
02:58 - if you want to match for a single
02:59 - character you want to
03:01 - match for zero or more characters or one
03:03 - or more characters you want to measure
03:05 - the start of the word end of the word
03:07 - beginning with line ended line and so on
03:09 - these are all the regular expression
03:11 - syntax that have been given to you
03:13 - next is the case insensitive option
03:17 - just a second here is this case in
03:19 - sensitive option which is checked by
03:21 - default that means
03:22 - um
03:24 - the
03:25 - searches that would be happening through
03:27 - regular expression would not distinguish
03:28 - between the upper case and the lowercase
03:30 - letters right
03:32 - next we have is the output where we have
03:34 - the output method which is used uh when
03:37 - parsing
03:38 - to configure the related properties like
03:40 - what you want to do once the expressions
03:42 - have been matched so we have four
03:45 - methods that are available the first one
03:47 - is replace so it means that we want to
03:50 - replace the expression
03:52 - that we have searched with a second
03:55 - expression now where you want to find
03:57 - the second expression that is in the
03:59 - replacement text you can enter the
04:00 - replacement text
04:02 - uh that we want
04:04 - the original expression to be replaced
04:06 - with again we have this
04:08 - plus that would uh allow you to
04:11 - actually
04:12 - find the entire text or just the
04:14 - particular character
04:16 - to be replaced okay the common regular
04:18 - expressions again that are needed
04:20 - and then we have the copy unmatched text
04:23 - to output if you want to copy it to the
04:25 - output as well that also you can do
04:27 - otherwise you can just remove it
04:29 - next option that we have in this output
04:31 - is the tokenize method that is used to
04:33 - split the incoming data using a regular
04:36 - expression
04:37 - it works
04:39 - in similar to the next tool that we have
04:41 - is the texture columns tool so we would
04:42 - be working more with the texture columns
04:45 - tool so i'm not going to explain
04:46 - everything over here
04:48 - and
04:50 - it has um
04:52 - some options like
04:54 - if you just select it tokenize method
04:56 - then you can see we have different
04:58 - options like a split to columns option
05:00 - like you want to split a single column
05:03 - of data at each instance to the
05:05 - specified delimiter into the multiple
05:07 - columns
05:08 - and what would be the extra behavior or
05:10 - the behavior of the extra columns like
05:12 - you want to drop them with the warning
05:13 - you want to drop them without warning or
05:15 - you want to show an error before
05:17 - dropping the columns
05:19 - then there is this output root name
05:22 - which is actually the original name of
05:24 - the column
05:25 - that we are going to use
05:27 - and if you want to split a single column
05:29 - of data at each instance of the
05:31 - specified delimiter into multiple rows
05:33 - then this option needs to be checked
05:36 - third method we have is the parse method
05:39 - uh it is used to separate the expression
05:41 - into new columns and set the name type
05:43 - size and expression for the new columns
05:47 - a new column is created in the output
05:49 - columns table with the its name its
05:52 - particular data type its size and the
05:54 - expression which is automatically
05:56 - populated so you can just specify name
05:58 - type and size
06:01 - last but not the least we have is the
06:02 - match
06:04 - option that is used to append a column
06:06 - containing a number that is one if the
06:09 - expression is matched and zero if it did
06:11 - not match
06:12 - now um
06:13 - column id column name for match status
06:16 - that means a new column would be created
06:18 - so what would be the name of the column
06:19 - that you can specify over here by
06:21 - default it is taken as order id
06:22 - underscore matched
06:24 - right um
06:26 - and there is this option of error if not
06:28 - match so if the expression is not
06:30 - matched and you want to generate some
06:32 - kind of an error that it would generate
06:34 - by checking on this option or by
06:36 - unchecking it okay
06:37 - so let's just see uh the practical
06:39 - application of this regular expression
06:41 - but before that let me just get a look
06:43 - of how the data is looking
06:46 - so here it is we are using the customer
06:48 - name
06:50 - in the customer name field we have um
06:53 - different customer names
06:56 - starting with different letters right so
06:57 - let's just go to the regular expression
06:59 - field
07:00 - and i wanted to start with
07:03 - any single character should be z
07:06 - okay
07:08 - and uh i just want a match column to be
07:10 - there that
07:12 - there should be a column uh that should
07:14 - be name underscore matched
07:19 - that if it is matched it should show me
07:21 - one otherwise it should show me a zero
07:24 - and click on run
07:26 - now wait for a few seconds till it's
07:28 - been run
07:32 - here now we can see that we are getting
07:34 - this name matched option where the
07:35 - results are false there should be some
07:37 - true results in order to get that what
07:39 - we are going to do is grab the browse
07:41 - tool over here
07:43 - and in this browse tool
07:45 - let's just run it once again run the
07:48 - workflow
07:50 - now in the browse tool uh we are going
07:52 - to go with the last record that is the
07:55 - name matched record so all are false
07:57 - that means
07:58 - uh there were no records that had z in
08:01 - them
08:02 - right so let me just append my query
08:04 - just modify my query a little bit
08:07 - and here get a instead of set
08:10 - run it
08:12 - so here what we have done is added a and
08:15 - in this case uh check the option of
08:17 - error if not matched so if there is no
08:19 - matching in the first record itself then
08:22 - the error would be there so let me just
08:24 - turn it
08:25 - so this is what we are getting as the
08:27 - error because the first letter was not a
08:30 - that is why it didn't match the
08:32 - expression and the error was there and
08:34 - it has finished its running in just 1.4
08:37 - seconds
08:38 - okay uh so this is how the regular
08:41 - expressions work now let us move on to
08:44 - the next tool that we have and that is
08:46 - the
08:47 - text to columns tool so let me just
08:49 - create a new workflow and in this
08:51 - workflow what i'm gonna do is just copy
08:54 - paste this
08:55 - input
08:56 - data okay so let's just copy it
08:59 - and paste it
09:04 - and grab this text to columns tool
09:07 - over here so it would give me the um
09:12 - freedom to just you know
09:14 - uh
09:15 - split the columns like we have the order
09:17 - id column in which hyphen can act as a
09:19 - delimiter so i want to split this column
09:21 - so let's just go to this
09:23 - tool select order id column the
09:26 - delimiter specified needs to be hyphen
09:28 - the number of columns that needs to be
09:30 - created is three
09:31 - and uh leave if there are any extra
09:34 - columns then leave it in the last column
09:36 - and output root name is going to be
09:38 - order id right let's just click on run
09:42 - and now what we can see is a total of 24
09:45 - fields
09:48 - so here what we are getting order id 1
09:52 - order id 2 and order id 3 since there
09:54 - were only three things so three have
09:56 - been shown over here in case there were
09:58 - multiple uh hyphens like let me just
10:02 - decrease the number of columns to 2 and
10:04 - click on run then what would happen is
10:08 - we would be getting order id 1 and in
10:10 - the last column the combination of both
10:12 - of them like order id 2 and 3 with a
10:15 - hyphen is present over here if you want
10:17 - to rename the column you can just rename
10:19 - it simply
10:21 - uh using the tools that we have seen in
10:23 - the past so um any kind of a renaming
10:26 - that you want to perform that you can do
10:28 - so that's all for this video in which we
10:29 - looked about the digix tool and the
10:31 - takes two columns tool
10:34 - in the parse tab of the altrix that's
10:35 - all for this video thanks for watching