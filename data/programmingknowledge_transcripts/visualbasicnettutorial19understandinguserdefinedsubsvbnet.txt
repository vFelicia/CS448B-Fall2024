00:01 - hello guys welcome once again in this
00:02 - video I will show you how to use user
00:05 - defined Subs with your Visual Basic
00:08 - Windows Form application so I have
00:11 - created this simple uh project Visual
00:15 - Basic Windows Form application project
00:18 - and I have taken a button and I have
00:20 - changed the text of this button as
00:22 - execute sub so make a project and just
00:26 - take a button here and if you want you
00:28 - can change the text of this button and
00:31 - now I will double click this button and
00:33 - I reach to the button click event of
00:38 - this button and if you notice that this
00:42 - button click is also a kind of a sub so
00:45 - what is a sub a sub is a code or piece
00:50 - of code which executes when you call it
00:55 - from some other function or other sub or
00:59 - or from some
01:02 - class so let me show you how to create
01:04 - sub first so you can create Sub in
01:08 - between from the starting of the class
01:11 - to the end of the class but not in
01:15 - between some other sub so just if you
01:19 - want to create sub
01:21 - just just we will go below our previous
01:26 - sub which is button click and I will
01:28 - write
01:35 - private
01:37 - sub and you give the name to your sub so
01:42 - I give the name to my sub as ADD and you
01:47 - give these bracket and when you press
01:50 - enter it will automatically create the
01:53 - end of the sub okay so for example I
01:58 - will
02:00 - create two integer variables so I will
02:04 - write
02:08 - dim
02:10 - a
02:17 - as integer okay and in the same way I
02:21 - will just copy this and paste it here
02:25 - once again and this second will
02:28 - be integer B and I will just paste it
02:34 - once again
02:36 - and I will name it as the
02:42 - integer sum for example okay and what I
02:47 - want to do is I want to show this sum in
02:50 - the form of a message so I will
02:54 - write message
02:58 - box Dot
03:05 - show and in the message box I write
03:12 - here the addition so
03:16 - the I will
03:21 - write sum is equal to a +
03:27 - b and I will just copy the sum and I
03:31 - will
03:35 - say the sum
03:39 - of two
03:42 - number
03:44 - is and I'll give this and sign and I
03:49 - will write
03:51 - sum
03:53 - okay so now I want this piece of code to
03:58 - be executed Ed when I click this button
04:02 - so what I need to do is I just need to
04:06 - call this sub from my button click event
04:10 - so once again I go to this button double
04:12 - click it and I just call this function
04:15 - or sub I say
04:19 - add and this ad is same name as this ad
04:24 - now when I run the
04:26 - program and when I click this button it
04:31 - says sum of two number is zero because
04:34 - we haven't
04:36 - initialized are integers okay so I will
04:41 - give some value to the integer for
04:44 - example some
04:47 - value and to the second integer also I
04:50 - will give a
04:52 - value and now when I run the
04:58 - program you see it will give the sum of
05:01 - these values and you also observe that
05:05 - you
05:06 - haven't written any code for the
05:10 - addition of these numbers you have just
05:13 - called the sub function from here and it
05:17 - execute the whole code which is there in
05:21 - the sub now why and when you use
05:25 - sub when you have or when you want to
05:30 - execute the same code again and again in
05:34 - your program then you use Subs so when
05:39 - you use a
05:41 - same code or you when you want to use
05:44 - same kind of code again and again more
05:48 - than once in your program then you use
05:51 - sub so that you you just need to create
05:56 - this function or sub once and you can
05:59 - call call it with this one line of code
06:02 - this
06:04 - whole code you don't need to write again
06:07 - and again this one line will execute all
06:10 - the code so that's why we use Subs now
06:15 - one more thing with sub is you can pass
06:20 - parameters with sub so what I mean by
06:25 - parameters so we have created this sub
06:29 - and
06:31 - now sometimes we want that this value
06:35 - should be defined by the user and this
06:39 - should not be fixed so how can I do
06:44 - this the way we can do this is for
06:50 - example I will take two text
06:54 - boxes text box one and text box two
07:02 - and in this sub function I will pass two
07:06 - parameters or two arguments so in this
07:10 - brackets or parenthesis you
07:14 - write
07:18 - by
07:28 - well and then you write the name of
07:32 - your value so for example I write
07:37 - a
07:40 - as
07:45 - integer and I will pass second
07:48 - argument by well also and
07:53 - B
07:55 - as
07:58 - integer
08:02 - so you notice that I have written by
08:06 - well declaration here by Val means by
08:09 - value so we are passing these argument
08:12 - by value and now we are not going to use
08:17 - this predefined integer we just delete
08:20 - it and we will pass this with the help
08:23 - of this these
08:26 - parameters so we have already called
08:28 - this uh
08:30 - function or sub here and we just need to
08:35 - pass these
08:36 - arguments so how we pass these arguments
08:40 - we pass this argument with the help of
08:42 - these text boxes so the name of the text
08:45 - box is textbox one so I will just pass
08:51 - this textbox one
08:55 - dot text as a first argument
09:01 - and you notice it's taking two arguments
09:03 - so and the second argument would
09:08 - be text box 2 which is
09:12 - my name of the text box two
09:16 - okay so I have passed these two
09:20 - arguments whatever I have I will write
09:23 - in the text box one and whatever I will
09:26 - write in the text box two this function
09:29 - add will take these two uh
09:33 - numbers and then it will perform the
09:37 - addition like this and give the result
09:41 - and show us the message so now let's try
09:44 - and run the
09:46 - program and I will write for example 34
09:51 - here 45 here and I say execute sub and I
09:56 - will click this button and it gives me
09:58 - the sub sum of these two
10:01 - numbers
10:03 - so our sub become flexible in the way
10:07 - that we can pass the parameters user
10:11 - defined parameters from these text
10:14 - boxes so I think you have understood the
10:19 - basic concept of sub one more thing I
10:23 - want to uh tell you is we have used this
10:27 - private with R sub you can also use the
10:32 - public function with or public
10:36 - method with the this sub and what this
10:41 - public and private tells uh the code is
10:45 - or tells this uh form is that if you
10:49 - declare the sub as a public then you can
10:52 - use the sub add function to the other
10:56 - Visual Basic form class but if this uh
11:03 - sub which is created by you is private
11:07 - then you cannot use it in
11:10 - other Visual Basic
11:14 - classes so this private and public you
11:18 - need to choose carefully whenever you
11:20 - define your
11:22 - subs so I hope you have understood the
11:25 - basic concept of Subs in the next video
11:28 - I will show you how to use functions and
11:31 - how functions are different from Subs so
11:34 - stay tuned and please rate comment and
11:36 - subscribe and bye for now