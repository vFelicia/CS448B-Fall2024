00:00 - hey what's up lace welcome back to our
00:01 - YouTube channel and welcome to this
00:03 - video this is John from programming
00:06 - knowledge and in this video guys we're
00:07 - gonna discuss about the logical
00:11 - operators and of course the assignment
00:13 - operators so previously we have
00:16 - discussed this relational operators so
00:19 - we have like six relational operators
00:23 - the equal or checking if value is equal
00:27 - to some value also and then not equal we
00:31 - have also greater than less than and
00:33 - then we also have greater than or equal
00:36 - to and we also have less than or equal
00:39 - to some value so this is quite useful
00:42 - guys if you are using the control
00:45 - statement in C say for example if
00:48 - statement and then you want to check if
00:52 - a certain value is equal or not equal to
00:57 - some value so for example if variable X
01:02 - is equal equal to 2 so basically we're
01:05 - just checking if this particular
01:07 - variable or the value of this X is equal
01:11 - to 2 or we can reverse that we can check
01:15 - if this particular viable variable it's
01:18 - not equal to 2 and of course you can use
01:21 - other operation or operators like
01:25 - greater than less than or we could also
01:30 - double check for greater than or equal
01:33 - to or less than or equal to so basically
01:35 - guys this operators is like just
01:38 - checking the relationship or if the
01:43 - certain value is greater than another
01:45 - value or it is equal to another value
01:48 - okay now let's move on to the next one
01:51 - which is the assignment operators
01:53 - so basically guess there are a lot of
01:56 - assignment operators in C programming
02:00 - language ok so the first one will be the
02:04 - equal sign ok this is one of the most
02:07 - common assignment operators in C
02:11 - programming so
02:13 - for example you want to assign so as
02:16 - I've said guys this is for assignment
02:18 - operators assignment operators okay so
02:24 - basically this is useful if you want to
02:26 - set a value to a variable okay so for
02:30 - example X and then if you want to make
02:32 - this like five or the value of X is
02:35 - equal to five you can do that by using
02:37 - this particular assignment operator
02:39 - equal symbol okay that's easy and the
02:42 - second one is plus equal so we have this
02:48 - also plus equal and then it basically
02:52 - means guys that it increments the value
02:55 - and then assign it to the de variable
03:01 - okay so if I simply want to make this
03:04 - like X and then plus equal to two so
03:12 - basically let's try this we can remove
03:15 - this code right here we can use the
03:21 - increment then assign so basically like
03:26 - we set a value for x we set it to five
03:31 - and then we can have it like X plus and
03:35 - then equals to three and then we can use
03:41 - the printf function and we can display
03:45 - the result further salsa for example did
03:50 - value yes the format specifier and then
03:59 - of course the comma and then the X
04:04 - variable okay and then semicolon at the
04:07 - end of this line save this and then
04:09 - compile and build or build and run our
04:12 - application so basically as you can see
04:17 - here the value is 8 so this is the doing
04:23 - of the plus equals two
04:26 - so big basically what it means that it
04:30 - add three to the variable X and then of
04:34 - course it the result of that is assigned
04:37 - to variable X also okay so this is
04:40 - basically just incrementing the value of
04:43 - our via variable and of course we also
04:46 - have the X minus equals to first of all
04:51 - 1 okay so basically it is the complete
04:55 - opposite of this one because this is for
04:57 - incrementing and this is for bickerman
05:01 - okay and of course we do have other
05:05 - operators for this particular topic
05:09 - which is the assignment operators we
05:12 - also have X for example x or x equal to
05:17 - two you can also do that and basically
05:21 - the division also okay you can do also
05:27 - the modular part modulo symbol and then
05:33 - equal and then so for someone too and
05:36 - there are others for example % 4 I mean
05:45 - X and then and and symbol and equal
05:53 - symbol and then of course the value that
05:56 - you want to assign so this is basically
05:59 - bit bitwise and assign assignment so
06:04 - we're not gonna use that for now so
06:06 - basically our currently concerned as
06:09 - this operations we can have the
06:13 - increment the first one is equal and
06:16 - then of course the increment decrement
06:18 - and then multiplied multiplication then
06:20 - assign and we also have divide in a sign
06:23 - we also have modulo and assign so that's
06:26 - basically how the assignment operators
06:30 - work so the last
06:33 - thing that we want to discuss here is
06:36 - all about the logical operators so
06:39 - logical operators provides three
06:43 - mechanism that we can test more than one
06:46 - condition to make a particular decision
06:49 - so these are the end and symbol so
06:55 - meaning it is logical and logical and
07:00 - and let me show you that later on what
07:07 - this means logical end and of course we
07:10 - also have this bar bar and this is
07:16 - logical operator or logical or and then
07:21 - of course we have the negation or not
07:24 - symbol okay
07:26 - so logical or and then this is end and
07:33 - of course logical not okay
07:36 - so let me show you how this works this
07:39 - three logical operators now let's try to
07:42 - use the logical operators so for example
07:45 - the first one the logical and operator
07:48 - so we have your variable X which is set
07:51 - to eight or the value is eight and then
07:54 - we can check if this particular value is
07:56 - or the for the particular value variable
07:59 - X is greater than 5 so we can do that by
08:04 - using the if statement and then X is it
08:08 - less than or greater than five so if X
08:13 - is greater than 5 then we can display
08:19 - something in our in our screen or output
08:23 - something so we can do printf and of
08:26 - course the value is greater than greater
08:31 - than 5 right so we could build and run
08:35 - this and see the output
08:37 - of our program and of course it's a
08:39 - general display the value is greater
08:42 - than fine okay
08:44 - so what if the value is
08:47 - for okay so obviously there will be no
08:53 - output because this the condition right
08:57 - here turns to be false because the
09:00 - actual value of x is now 4 so no
09:05 - statement has been executed for this
09:07 - particular program now we can use
09:11 - logical operators and in this particular
09:14 - scenario so for example you want to
09:16 - check that the value of X should be
09:20 - greater than 5 but less than 10 okay so
09:27 - we could check if the variable X is
09:30 - greater than 5 but less than 10 and we
09:34 - can do that by using the logical and
09:38 - operator so double ampersand and X and
09:44 - then less than 10 okay we could do that
09:47 - and of course if we try to run this
09:58 - still there is no output because the
10:02 - value of x is 4 so we can try 6 here
10:07 - build and run our application so the
10:13 - value is greater than 5 and we should
10:17 - add here that the value is less than 10
10:24 - okay build and run our application so
10:28 - the value is greater than 5 and it is
10:31 - less than 10 now what if it is 11 so
10:37 - obviously it's going to display nothing
10:41 - in our screen because the conditions of
10:44 - this particular statements is not met ok
10:47 - so that's how you can use the logical
10:50 - and operator and of course when we say
10:53 - and
10:57 - basically it means that it should be the
11:00 - both of the statement or both of this
11:03 - condition should be true in order for
11:06 - this statement to be executed okay and
11:09 - you can also use the logical operator or
11:13 - in this particular scenario so it
11:18 - doesn't matter if the X is greater than
11:23 - 5 or X is less than 10 it should you
11:28 - know execute the statement that we have
11:30 - here okay so for example you run this
11:36 - okay
11:38 - so we have the values greater than 5 and
11:40 - less than 10 and we can try like 20 or
11:49 - maybe use the value 20 in our X so let's
11:53 - try this
11:54 - save and then build and run okay and as
12:02 - you can see we still have or we still
12:05 - get the output the value is greater than
12:07 - 5 and less than 10 that's because this
12:10 - particular statement here returns true
12:13 - so it doesn't matter if this particular
12:16 - statement here is false so as long as
12:18 - there is a true returns either of this
12:23 - statement so there should be statement
12:27 - printed or executed inside this
12:29 - particular if statement okay so I think
12:32 - that's all there is to it guys for this
12:34 - tutorial and in the next video we're
12:37 - going to discuss deeper with this
12:39 - particular if statement and of course if
12:41 - you want to learn more about C
12:43 - programming you can try to watch our
12:45 - video tutorial series in C for beginners
12:48 - so see you guys in the next video and
12:50 - thank you for watching