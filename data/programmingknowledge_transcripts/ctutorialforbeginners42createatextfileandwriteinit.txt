00:00 - [Music]
00:00 - hello guys in this video I'm going to
00:02 - show you how you can create a file in
00:05 - C++ and write in this text file in
00:09 - C++ so there are three classes in C++
00:13 - which you can use to input and output
00:17 - characters into a text file and these
00:20 - three files are first is called of
00:25 - stream which is a class which you can
00:28 - use to write on a
00:30 - file second class is called if stream
00:34 - which you can use to read from a file
00:37 - and third class is called
00:39 - fstream which you can use to read and
00:43 - write from a file or to the file so we
00:47 - are going to use this
00:49 - third uh class which is
00:52 - fstream okay so what we are going to do
00:55 - first of all we need to include this
00:57 - fstream class into our project so just
01:01 - include this fstream into your project
01:05 - now in order to create a file we already
01:08 - know that we need to use this class
01:11 - called o stream so just take o stream in
01:16 - order to create a text file and first of
01:19 - all we will create an instance of this o
01:22 - stream for example I can name my
01:26 - instance as
01:27 - my file or simply file it depends upon
01:33 - you what name you want to give to your
01:36 - instance now in order to create a file
01:41 - you just need to take this
01:43 - instance then Dot and you need to call
01:47 - the inbuilt function called
01:50 - open which takes constant character
01:53 - string as an argument and which we will
01:59 - give as the name of the text file so for
02:02 - example I can say
02:05 - my text Dot txt will be the name of my
02:11 - file and whenever you open your file or
02:16 - create a file you just need to close it
02:20 - in order to you know safely close your
02:26 - file so always remember whenever you
02:30 - open a file you need to close it this is
02:34 - a rule of
02:38 - thumb and it doesn't take any argument
02:41 - okay I will compile my
02:44 - program and compile successfully and
02:47 - what I need to do is I will go to my
02:50 - project folder so this is my project
02:52 - folder it will uh contain my project
02:56 - file and a folder called bin which
02:59 - contains the the binary file in this bin
03:02 - there will be a debug folder if you are
03:05 - in debug mode or a release folder if you
03:08 - are in release mode so I'm in debug mode
03:11 - so this will be the folder where my
03:14 - executable file
03:16 - resides and this is my executable file
03:20 - and watch carefully what happens when I
03:23 - run this program for from here and I
03:27 - have used
03:28 - stdc get to pause the screen otherwise
03:32 - screen will disappear as soon as uh it's
03:36 - uh go it goes out of scope so I will I
03:41 - have included this intentionally to
03:43 - pause the screen okay so I will go to
03:47 - the executable file in the folder and I
03:50 - will just double click it and it doesn't
03:54 - output anything to the terminal but you
03:57 - can see it has created a file called
03:59 - text file which is blank right now so
04:04 - it's blank right now right once again I
04:07 - will delete this my
04:09 - text. text file and I will run it once
04:12 - again and watch carefully here double
04:14 - click and it has created a text file
04:17 - here okay now once you have created a
04:21 - text file you can write into the text
04:24 - file simply
04:27 - by copying the instance of this
04:30 - and between open and close functions you
04:33 - just need to insert some text so just
04:37 - take the instance called file and just
04:40 - use this
04:43 - uh brackets or triangular brackets or
04:46 - whatever you want to say there and then
04:50 - you just can just give your string or
04:53 - sentence here so this is my
05:02 - first text file and in order to change
05:07 - the line you just need this back slash
05:11 - and
05:11 - n and this back slash and N will change
05:17 - your line on which you are working on so
05:22 - for example I want to create some other
05:25 - line I can just copy it copy it and copy
05:28 - it so then I will be having four lines
05:34 - one below another if I use this
05:39 - sln so let's see what happens if I don't
05:43 - use this slash
05:46 - n and I will just use one line one 2 3
05:52 - and four and I will compile my
05:56 - program and I will go to the folder
05:59 - where where my binary is once again once
06:02 - again I will check there is no text in
06:05 - this text file right now I'm going to
06:08 - run this file so I will run this double
06:11 - click it and it runs and now I'm going
06:15 - to open my text file once again and you
06:18 - can see it has my text but this text
06:23 - is in one line and it's not changing the
06:27 - line AC which I want right so in order
06:32 - to change the line you just need this
06:35 - backs slash once again and and so this
06:38 - back slash uh n will change your line
06:43 - This simply means next line okay compile
06:47 - your
06:48 - program and I will run it once again and
06:51 - open my text file once again and now I
06:55 - have four lines one below another
07:00 - right now in this way you can create a
07:05 - file and write into the file but
07:08 - generally there is uh one more good
07:11 - practice people uh use which is this
07:17 - one so whenever you open your file
07:21 - always check if the file is open and
07:24 - then perform some activity on that file
07:28 - so just use
07:31 - if and then just check the condition if
07:36 - this file dot just call is open isore
07:42 - open and this is a function which
07:45 - returns a Boolean value true or false
07:48 - and if the file is open it returns true
07:52 - or if uh the file is closed it returns
07:56 - false so always check whether your file
07:59 - is open then only perform some action to
08:04 - this file okay so it's a good practice
08:07 - to check whether this file is open first
08:11 - and then perform some
08:14 - activity and there is one more thing you
08:17 - don't need even need to use this extra
08:21 - line to create a file which is file.
08:25 - open this will uh this is uh of course
08:28 - more explain
08:30 - as a code but in order to create a file
08:33 - you can just uh create it with the
08:36 - creation of instance you don't even need
08:38 - this F this
08:40 - line in order to create the file so this
08:44 - will work fine and it will create a uh
08:48 - file and it'll write the text file once
08:51 - again uh text in it once
08:54 - again so what I'm going to do I'm going
08:57 - to compile this go to the folder I will
08:59 - delete this file once
09:03 - again and I will run it once
09:06 - again and terminal is not showing
09:09 - anything because we are not printing
09:12 - anything to the
09:13 - terminal but we are creating this text
09:16 - file right I'll open this text file once
09:19 - again it has the same text but these are
09:22 - the some good practice always check
09:27 - whether your file is open and then
09:29 - perform the action on this file always
09:35 - okay and it's better to you know include
09:39 - this close code inside your if
09:43 - condition so that as soon
09:46 - as the writing into the file is complete
09:50 - it flushes all the you know all the file
09:55 - streams and it flushes all the uh C
09:59 - directors in this
10:02 - file so in this way you can create a
10:05 - text file using C++ and write in it in
10:08 - the next video maybe I will show you how
10:11 - you can read from a text file so stay
10:14 - tuned and please wait comment and
10:15 - subscribe and bye for now