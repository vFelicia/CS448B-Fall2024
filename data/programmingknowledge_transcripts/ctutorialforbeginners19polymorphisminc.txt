00:00 - hello guys in this video I'm going to
00:02 - teach you about polymorphism in cop
00:06 - polymorphism is also one of the very
00:09 - important Concept in objectoriented
00:12 - programming which C is poly morphism
00:16 - allows us to invoke derived class
00:19 - methods through a base class reference
00:22 - during runtime so let's see an example
00:26 - for example I have a base class which is
00:29 - called a drawing class so I have this
00:33 - Base Class called Drawing and it has one
00:36 - method called Draw and what this method
00:39 - does is it simply prints a message and
00:43 - this is a
00:44 - message uh this message says this is
00:47 - just a generic drawing object now from
00:51 - our previous videos we already know how
00:55 - we can Define the derived classing
00:58 - classes using
01:00 - this Base Class which is drawing class
01:03 - so for example I want to derive a class
01:07 - or I want to define a derived class
01:10 - called line which inherits from this
01:13 - Base Class drawing okay so I will
01:16 - declare this uh derived class called
01:20 - line public class line which inherits
01:23 - from your base class drawing okay and it
01:27 - also has a public method called Draw and
01:31 - it has its own
01:33 - message and message say says this is a
01:37 - line okay now I want I will derive two
01:42 - more classes from this base class so I
01:45 - will copy and paste this P derived class
01:48 - once again and the second derived class
01:51 - I will say it's a
01:54 - circle and the message I will change it
01:57 - as this is a circle okay in this draw
02:00 - method and the third derived class will
02:06 - be
02:07 - square and in the Square draw method I
02:11 - will print this is a square so we have
02:15 - one Base Class and we have three derived
02:19 - class line square and circle and they
02:23 - have their own draw method
02:26 - right now I will for example I want
02:30 - to declare an instance of my base class
02:37 - and this instance will be an array of uh
02:41 - the Base Class okay so how can I declare
02:45 - an array of Base Class instances so I
02:49 - will just copy my base class and I will
02:51 - give these square brackets and I will
02:54 - give the name to my object I will say d
03:00 - the
03:02 - obj which is drawing object is equal to
03:07 - new drawing object okay so I'll will
03:12 - just copy it and paste it here and for
03:15 - example this array contains four
03:19 - elements so I can pass four
03:24 - here like this okay now for example I
03:29 - want to give this object an instance of
03:34 - a line class an instance of circle class
03:39 - and an instance of square class so what
03:42 - I can do is I can say
03:47 - obj zero element or obj the index
03:53 - zero is equal
03:55 - to
03:57 - new line class
04:00 - okay and uh this will be like
04:05 - this in the same way I
04:09 - can declare an instance of scare Circle
04:13 - and square classes and even I will
04:16 - declare the instance of Base class so I
04:20 - will say 0
04:21 - 1 2 three and this is
04:26 - our
04:28 - Circle
04:30 - and this
04:32 - is square okay so our Base Class object
04:37 - has an instance of line which is a
04:40 - derived class and this is absolutely
04:43 - possible right we can have an instance
04:46 - of derived class as an object right of
04:51 - as an object of our base class right as
04:55 - we have seen in the last video so I have
04:58 - first object as an instance of line
05:01 - Second object as an instance of circle
05:03 - third object as an instance of square so
05:06 - these all three are derived classes and
05:09 - I even have the instance of drawing
05:12 - class which is our base class and now
05:15 - for example I want to call draw methods
05:18 - from each of uh these classes base and
05:22 - derived classes so I can
05:25 - use for each Loop you may know from the
05:30 - last video how to use for each Loop and
05:33 - I will
05:34 - say for
05:36 - each and the condition
05:39 - is
05:43 - drawing D for example
05:47 - or
05:50 - Draw in my object which is this one so
05:56 - it will take one by one it will go
05:59 - through to object by object depending
06:02 - upon the index of the
06:06 - object and here I will give the
06:09 - statement and what I will do here I will
06:13 - just take this
06:15 - draw object here and I will just call
06:19 - draw method so draw dot
06:25 - draw so let's see what is the result of
06:29 - this um code I will run my
06:39 - program and what this is doing is it's
06:43 - printing this is a generic drawing
06:45 - object this is a generic drawing object
06:48 - four time times right and it's uh true
06:52 - because
06:53 - uh we are not
06:56 - even hiding our method which is a base
07:00 - class method which we have seen in the
07:02 - last uh video so we have just created an
07:06 - instance of drawing and we are just uh
07:10 - giving them the instances of our derived
07:13 - classes so by default it will go to the
07:18 - base class and it will print this four
07:21 - times right now for example you
07:25 - want that from your base class object
07:28 - you want want to call these methods you
07:32 - want to call the draw method in line
07:36 - class draw method in circle class and
07:40 - draw method in square class you can do
07:43 - it by
07:45 - using polymorphism right so what you uh
07:50 - need to do here is you need to declare
07:55 - this object you need to change the
07:57 - Declaration of this method draw draw in
08:00 - the Base Class like this so just write
08:05 - public virtual so this virtual keyword
08:09 - will say that you can redefine this
08:14 - draw in the base classes right so this
08:18 - is the word this is uh uh this the use
08:22 - of this virtual method virtual
08:26 - keyword now in my derived classes I will
08:29 - say I will override this Base Class
08:34 - method so how can I override I will go
08:38 - to my derived class which is line and in
08:41 - this draw method in line derived class I
08:46 - will declare it like
08:52 - public
08:56 - override and this should be over
09:00 - over right okay so this keyword will
09:06 - tell this derived class that you are
09:09 - overriding this Base Class method by its
09:12 - own method and I will do the same in my
09:17 - circle derived
09:20 - class here public override void and in
09:23 - my
09:26 - Square derived class method draw
09:29 - okay now what I have done I have given
09:33 - the keyword draw keyword virtual to my
09:36 - Base Class method and I have given the
09:39 - keyword override to my derived class
09:41 - method this
09:43 - virtual virtual keyword tells the base
09:47 - class that somewhere whenever you
09:51 - declare a deriv class you can override
09:54 - this method by using override meth
09:58 - override key key word right now this
10:02 - main code will remain same and let's see
10:05 - what is the result now I'll run the
10:08 - program and see the result now you have
10:14 - this is a line which is a draw method in
10:18 - line class this is a circle which is a
10:20 - draw method in circle class this is a
10:23 - square which is a draw method in square
10:26 - class and you have this is just a
10:29 - generic draw object which is a method
10:32 - Base Class method
10:34 - right so in this way this is the basic
10:37 - concept of
10:39 - polymorphism and what I have said in the
10:43 - beginning polymorphism allows us to
10:46 - invoke deriv class method through a base
10:50 - class reference during runtime right so
10:54 - we
10:55 - have we have
10:57 - invoked the D dve class method like this
11:02 - from a base class so we have
11:06 - invoked from from a base class we have
11:09 - in invoked the method draw from our
11:13 - derived classes like this okay so this
11:17 - is how polymorphism
11:20 - works and where it comes handy it comes
11:24 - handy when you need to assign a group of
11:27 - object to an array and then invoke each
11:31 - of their methods so this is useful in
11:36 - those
11:37 - situation okay so I hope you have
11:40 - understood the basic concept of
11:42 - polymorphism and I hope you have enjoyed
11:44 - this video please RIT comment and
11:46 - subscribe and bye for now