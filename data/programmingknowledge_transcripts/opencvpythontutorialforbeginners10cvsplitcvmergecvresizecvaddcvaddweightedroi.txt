00:00 - hey guys welcome with the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will see some of
00:07 - the basic and automatic operations on
00:10 - images using open CV so let's get
00:14 - started so here I have this code some of
00:17 - this code you already know so you
00:19 - already know how to read the images
00:20 - using I am read method and then show it
00:24 - inside a window using I am show method
00:26 - and destroy all windows using this
00:29 - destroy all windows method but this code
00:32 - in between is little bit new so let me
00:35 - explain line by line what this code does
00:38 - so when you have this image using I am
00:42 - read method or any other method you can
00:45 - use these attributes like shape size and
00:49 - D type to get different values from this
00:54 - image so image dot shape is going to
00:57 - return a tuple which contains the number
01:01 - of rows columns and the number of
01:05 - channels in this image the image dot
01:08 - size will return the total number of
01:11 - pixel which are there inside the image
01:14 - and image dot D type is going to return
01:18 - the data type of the image which you
01:22 - have obtained now here if you want to
01:25 - split your image in three channels then
01:29 - you can use CB 2 dot split method and
01:32 - pass your image as an argument it's
01:34 - going to give you the BG our channel of
01:37 - your image now if you have a BG our
01:40 - channels and you want to merge those BG
01:44 - a channel into an image then you can use
01:47 - CB 2 dot merge method and pass these BG
01:52 - our channels in the form of tupple and
01:54 - it's going to give you the image which
01:57 - you can load using I am show method so
02:01 - let's run this code and let's see what
02:04 - we are getting using these attributes so
02:08 - you can see this messy 5 dot jpg image
02:12 - is loaded
02:13 - and here you can see first of all the
02:16 - shape of the image so the shape returns
02:19 - the number of rows number of columns and
02:21 - the number of channels so number of rows
02:24 - here is 342 columns are 548 and number
02:29 - of channels are 3 here the number of
02:33 - pixel which we have calculated using the
02:36 - size is this number which is 5 6 2 2 4 8
02:40 - and the data type of an image is you
02:44 - into 8 so sometimes you need to debug
02:48 - the data type of your image and this
02:52 - attribute will be very useful in those
02:55 - cases and you need to debug if for
02:58 - something is correct or wrong and
03:00 - because we have splitted this method
03:03 - using the split and we merged these BGR
03:07 - channels using this merge method so we
03:11 - will at the end get the same image which
03:14 - we have at the beginning here in this
03:18 - code so there is no change in the code
03:21 - so once again let me just load this
03:24 - image and now let's talk about the ROI
03:28 - of an image so ROI stands for region of
03:33 - interest so sometimes you need to work
03:36 - with certain region of the image so
03:39 - let's say you only want to work with the
03:43 - face here or you only want to work with
03:46 - this ball ok so this is called the
03:49 - region of interest or in short form it's
03:53 - called
03:53 - ROI so let's say we want to just work
03:58 - with this ball here so this will be our
04:02 - region of interest or ROI and I want to
04:07 - just copy this ball to other place in
04:11 - this picture so I want to just copy this
04:15 - ball and place it on the other place
04:18 - let's say somewhere here ok so how we
04:22 - can do this so I already have the
04:26 - coordinates or
04:27 - the ball but you already know how to get
04:30 - the coordinates of some place in the
04:33 - image we have already discussed this in
04:36 - our previous video so I'm not going to
04:38 - show you how to obtain those coordinates
04:42 - but let's say I have those coordinates
04:45 - of the ball so I'm going to create a
04:47 - ball variable and we have our image so
04:50 - we will take our image and there are
04:53 - certain numpy indexing features which we
04:57 - can use here so I'm going to just write
05:00 - 280 colon 340 which is going to give you
05:06 - one point on the ball which is the upper
05:12 - left-hand side of this ball and then we
05:15 - will give 330 here : 390 which is going
05:21 - to give us the bottom right hand corner
05:25 - of this ball okay so now we have this
05:29 - ball so this this indexing is going to
05:33 - copy this ball all the pixels of this
05:37 - ball and then now we have the ball so we
05:40 - can place this ball on any place on this
05:44 - messy image which we are reading so what
05:48 - we can do is we can once again use I am
05:51 - G and using those numpy indexing
05:56 - features we can place this ball at some
06:00 - other place so let me just give those
06:04 - indexes here so let me give 273 : 3 3 3
06:10 - I have already tested this code so
06:12 - that's why I know exactly where I want
06:15 - to place this ball but if you are not
06:19 - sure where to place this ball then you
06:22 - might have to first calculate or know
06:26 - the coordinates where you want to place
06:28 - this ball and you already know how to
06:30 - find out the coordinates on an image and
06:33 - you will be able to place that ROI or
06:39 - interest of region
06:41 - some other place so what I'm doing here
06:44 - is I have just copied the ball and then
06:49 - I am placing the ball on this coordinate
06:54 - okay so I just need to just assign our
06:57 - ball on this coordinate and then this
07:01 - ball will be copied to this index on the
07:04 - image so let's see what happens when we
07:07 - run the code so now you can see we have
07:10 - to copy this ball and we have placed
07:12 - this ball here on the image so this is
07:17 - how you work with the ROI or region of
07:21 - interest okay so let me close this
07:25 - window now the next thing which I want
07:28 - to show here is how you can add two
07:31 - images so for that I need one more image
07:34 - so you can see in my project I have this
07:39 - messy five dot jpg and I have this other
07:42 - image which is OpenCV - logo dot PNG
07:46 - file which is of the same size as the
07:50 - messy dot jpg image so I'm going to just
07:54 - write I am g2 and then once again CB -
07:59 - dot I am read method and then I'm going
08:03 - to give the name of this file which is
08:07 - open CV - logo dot PNG file okay so this
08:12 - is this file so this file we are reading
08:16 - and then there is a method called add
08:20 - okay so we are going to use this method
08:23 - here let's use this method CV to dot add
08:29 - and this method I'm going to show you
08:32 - what it does in a moment but this method
08:36 - takes two arguments first is the first
08:39 - numpy array so let me show you what this
08:41 - method do first of all so this is the
08:44 - add method inside your CV - package you
08:48 - can also see the documentation on the
08:52 - open CV
08:54 - Najee and what it does is it calculates
08:57 - the pre elements sum of two arrays or an
09:01 - array and a scaler okay so here we can
09:06 - just pass our two arrays which we got
09:10 - from the I am read method and pass here
09:14 - as the first and the second argument so
09:18 - I am G and I am G two are the one and
09:22 - two parameter and there are some other
09:25 - parameters also like output array input
09:29 - array mask and int which is the data
09:32 - type which we which are set by default
09:35 - so we are not going to set them so we
09:39 - are just using CB to dot add method on
09:42 - these two images and then I just want to
09:46 - assign the new image which we have added
09:49 - to a new variable let's say this is DST
09:52 - for destination image and then we are
09:57 - going to just show this image using this
10:00 - I am show method okay so we have two
10:05 - images let me show you those images one
10:07 - by one first of all so this is the first
10:09 - image I have and the second image is
10:12 - open see we have logo which is like this
10:14 - one okay
10:15 - so those two images we have and when I
10:19 - run this code after adding those two
10:22 - images using add method you will see
10:25 - first of all you will see this error
10:28 - when why this error is coming because
10:31 - you will see here that the size of those
10:36 - two input is not matching okay so in
10:40 - order to add two images you need to have
10:44 - the images or the arrays of same size
10:47 - and then only you will be able to add
10:50 - those two images so let's resize those
10:53 - two images into a size which is common
10:59 - to both of them so you what we are going
11:02 - to do next is we are going to resize
11:04 - those images so once again I'm going to
11:06 - just you
11:07 - I am G variable so what I get after the
11:11 - resizing I will once again assign to
11:13 - this I am G variable and there is a
11:16 - method called C v2 dot resize and this
11:22 - helps us to resize the image so first of
11:25 - all we need to give the source which we
11:27 - want to resize and then we are going to
11:29 - give the size which we want to get so
11:34 - the number of columns and number of rows
11:36 - we can give here let's say we want to
11:39 - just resize this image to 5 1 to 2 comma
11:42 - 5 1 2 which is the number of rows and
11:45 - number of columns right same we will do
11:49 - with the next image so I am g2 and then
11:53 - once again see v2 dot resize and then
11:58 - the source here will be image 2 and the
12:02 - size which we want here is again 5 1 2
12:06 - comma 5 1 2 in the form of couple so we
12:09 - have resized this image and this image
12:12 - which are of different sizes to the same
12:15 - size and now let's run the code once
12:18 - again and now you will see that these
12:22 - two images are merged now ok so you will
12:27 - be able to see the hand here and a
12:29 - little bit foot and here the ball of
12:34 - this image 1 which is messy 5 and then
12:38 - we have the second image which is OpenCV
12:41 - which is added to the first image so
12:45 - this is how you can add to image using
12:49 - OpenCV now there is one more method
12:51 - which is called
12:52 - add weighted okay so this add method is
12:56 - going to just add these two images but
12:59 - if you want to add the weight for
13:00 - example you want to give the weight 90
13:02 - percent to the first image and 10
13:05 - percent to the second image there is one
13:07 - more method so let's go to the
13:08 - documentation once again and there is
13:11 - this method called add weighted method
13:14 - okay so this add weighted method takes
13:18 - several arguments here you can see first
13:21 - is the source of the first array and
13:25 - second argument is the alpha value alpha
13:28 - is the weight which you want to give to
13:31 - the first image okay the third argument
13:34 - is the source - so in our case this will
13:36 - be the image - the first argument is the
13:39 - beta beta is the weight which you want
13:43 - to give to the second image right so
13:46 - this weight you can even can give from
13:49 - zero to one anything and this gamma is
13:53 - the scalar value which you want to
13:55 - provide and this the second last
13:57 - parameter is the destination and the
14:01 - last is the D type or the data type here
14:03 - okay so this is the formula which this
14:08 - method is going to use so source
14:11 - multiplied by alpha and source 2
14:15 - multiplied by beta plus gamma so this is
14:17 - the method which will be used using
14:21 - these arguments or simply you will use
14:24 - this kind of methods source multiplied
14:26 - by alpha plus source 2 multiplied by
14:29 - beta plus gamma which is the scalar you
14:32 - can add to the image okay
14:35 - so let's use this method so I'm going to
14:37 - just copy this method and then comment
14:40 - this and go to the next line and instead
14:43 - of using add I'm going to use the ad
14:46 - weighted method okay so the first
14:50 - argument is the source which is the
14:52 - first source which is IMG in our case
14:55 - second argument is the weight so first
14:58 - this is the messy image right so we want
15:02 - to just give the weight here 90 or you
15:05 - can just give point 9 here and for the
15:09 - second image we want to give the weight
15:12 - 0.1 okay so the sum of this weight and
15:16 - this weight will be 1 and also we are
15:20 - going to give the gamma value here as 0
15:23 - so we don't want to add any scalar value
15:25 - to this ad weighted method so the next
15:29 - value here will be 0 which is the value
15:32 - of gamma and let's run this code and you
15:35 - can
15:35 - see now now we have our messy image
15:38 - which is dominant here because it has
15:41 - the weight Oh point nine which is 90% of
15:44 - the two and the opencv image have the
15:49 - weight 0.1 which is 10% of the two okay
15:53 - so the opencv image is light and the
15:56 - messy image is a little bit you know
16:00 - dominant here you can just give point
16:04 - five and point five so the weight of the
16:06 - two images will be the same and now you
16:09 - will see those two images in the same
16:14 - domination
16:15 - okay so 50/50 percent now let's say we
16:18 - want to increase this value of OpenCV to
16:20 - 0.8 and the messy image weight will be
16:24 - 0.2 then the dominant image here will be
16:28 - OpenCV and in the background kind of
16:31 - thing you will see this messy image so
16:33 - this is how you can add two images with
16:36 - their weight and the skaila and that's
16:40 - it for this video so in this video you
16:42 - have seen some of the basic operations
16:44 - on the images and some of the are
16:47 - automatic operations on the images which
16:50 - you can do using OpenCV so I hope you've
16:53 - enjoyed this video and I will see you in
16:55 - the next video
17:04 - you