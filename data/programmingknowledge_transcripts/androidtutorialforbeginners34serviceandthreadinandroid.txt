00:01 - hello guys welcome to the next video
00:02 - tutorial on Android app development for
00:04 - beginners in the last video we have seen
00:06 - what are services in Android and how we
00:10 - can create a started service in Android
00:13 - now in this video we will talk about
00:16 - using services with
00:18 - threads so in the last video I've told
00:21 - you that service is a background task
00:26 - which will run in the background and
00:28 - which has nothing to do with your
00:31 - UI but still it's the part of your
00:34 - process it's not a different process so
00:37 - it will run inside your main
00:41 - process now for example if your service
00:45 - has some blocking action for example you
00:49 - wait for uh some time in a synchronized
00:52 - manner then it will block your user
00:57 - interface actions for this time because
01:00 - it's the part of your process and it's
01:03 - not running in the different thread so
01:06 - let's see what uh this error is which
01:10 - I'm talking about and then we will see
01:13 - how we can solve this problem using
01:16 - threads with
01:17 - services so first of all uh I will start
01:21 - with my uh last uh project which I've
01:25 - created in the last video for uh
01:27 - starting services and stopping surfaces
01:30 - so I will uh take the same project so
01:33 - first of all what I'm going to do is I'm
01:34 - going to take a text addit in my
01:37 - activity and I will change the layout
01:40 - width of this text as fill parent for
01:43 - example and this text edit I will use to
01:46 - give some input from the user side while
01:49 - my service is running okay now what I'm
01:53 - going to do is I'm going to go to my
01:56 - service class so this was the class
01:58 - which I created in in the last video
02:00 - which extends from the service and I
02:04 - have shown you how to create this on
02:06 - start command and on Destroy method and
02:10 - this I binder and on create method so
02:14 - first of all I will go inside my on
02:17 - start command and in here what I'm going
02:19 - to do is I'm going to create some code
02:22 - which takes uh some time or it will
02:25 - block my service for some time so I will
02:29 - uh take a
02:31 - synchronized and I will pass this
02:34 - context to it and inside my synchronize
02:37 - I will wait for some time so I will call
02:40 - a method called wait and it takes time
02:44 - in milliseconds so for example you want
02:47 - to give time for 10 seconds you can just
02:50 - give
02:52 - 10,000 okay so for us uh I think 20
02:57 - second will be enough to wait
03:00 - and whenever you add this weight method
03:03 - you need to include a TR catch block to
03:07 - handle this method so just surround this
03:10 - by TR catch block and everything will be
03:14 - okay so what this uh code will do is it
03:18 - will
03:19 - uh wait for 20 second in a synchronized
03:23 - manner so it will block your service for
03:25 - 20 second and it will not uh allow your
03:30 - user interface to do anything so let's
03:33 - run uh this uh app and let's see what
03:36 - happens so my app is running now and for
03:39 - example now I can input some text here
03:43 - right and I can delete some text from
03:46 - here but observe when I click this start
03:50 - button I will click the start button and
03:53 - then my service will start and when my
03:56 - service will start I cannot enter
03:59 - anything inside this added text because
04:03 - uh the code is waiting for 20 second and
04:07 - it will give this message something like
04:10 - this that your app isn't responding you
04:13 - want to wait or you want to close the
04:15 - app for example I will wait for some
04:17 - time because I know my service will run
04:20 - for uh 20 second and after 20 second
04:23 - this uh service will be destroyed and I
04:26 - can once again give this input once
04:29 - again okay so I think you understand the
04:31 - problem when I click or when I start the
04:34 - service which is blocking I cannot
04:36 - perform any task in my UI this is the
04:40 - problem and you will get this uh message
04:43 - called your uh uh app is not responding
04:46 - do you want to close or you want to wait
04:49 - so now to solve this problem what we can
04:52 - do is we can create our service or we
04:55 - can start our service inside a different
05:00 - thread okay so when we use or when we
05:03 - start our service in a thread it's
05:06 - independent from our main process and
05:09 - this will solve our problem so let's see
05:12 - how we can solve it so I will go to my
05:15 - uh the service class once again and
05:19 - inside my the service class I will
05:22 - create uh class which will handle my
05:26 - thread so final class
05:30 - and this will be the thread class so
05:33 - the thread and uh this class will
05:39 - contain one variable which I will call
05:43 - it as start ID or service ID better okay
05:48 - so service ID and this we will see why
05:52 - I'm doing this and now I will create a
05:55 - Constructor so the
05:58 - thread this is my Constructor and I will
06:02 - pass one argument here and this will be
06:05 - same as service ID and what I want to do
06:09 - is whatever I pass as a Constructor
06:12 - argument I want to uh pass it to this
06:16 - variable so I will just write this dot
06:21 - service ID is equal to service
06:25 - ID
06:27 - okay now what I'm going to to do is
06:30 - because I want to create a thread out of
06:32 - it I will implement the runnable method
06:36 - okay so implements
06:40 - runable and when you implement runable
06:44 - to your class you need to implement a
06:46 - method called run so just click this
06:48 - bulb here and implement this run method
06:52 - okay and inside my run method what I'm
06:56 - going to do is I'm going to just cut
06:59 - this code which I have written in my
07:01 - onart command and paste it here inside
07:05 - my run method okay now there's one more
07:10 - thing that there can be multiple
07:12 - Services running in your app right and
07:16 - how will you know that which service you
07:20 - want to uh end or close so what we can
07:25 - do here is uh just after this
07:30 - try catch block inside my synchronized I
07:33 - can uh call a method called stop self
07:37 - okay and this uh will stop the service
07:41 - okay and it can take an an argument
07:45 - which is the service ID so whenever you
07:48 - create a service your Android uh system
07:53 - will create a service ID for this and
07:56 - using the service ID we can close uh
07:59 - this service okay so just add this uh
08:03 - code here now this service ID where can
08:06 - you find it you see in your on start
08:09 - command there is a parameter called
08:11 - start ID and this will be your service
08:14 - ID so now we have created the code for
08:18 - our thread now we can uh create a thread
08:22 - and start it and then try to run our
08:25 - program so I will create a thread object
08:29 - thread is equal
08:31 - to new
08:33 - thread and I will call my custom thread
08:38 - class so the thread and it takes one
08:41 - argument which is the service ID so I'm
08:44 - going to provide this start ID here okay
08:48 - and now I just simply need to use this
08:50 - uh thread object to start the thread so
08:53 - thread do start it will start the thread
08:58 - right now I'm going to run my program
09:01 - once
09:02 - again and my app is running once again
09:06 - now so you can observe I can enter some
09:09 - text without starting the service and
09:12 - when I start the
09:14 - service and still I can enter this uh
09:18 - text here okay so because this uh
09:21 - service is running in different thread I
09:24 - can perform actions in the UI and my
09:27 - service is running in the background in
09:29 - different threads so both action can be
09:31 - done at the same time and after 20
09:35 - second you will see the service
09:36 - destroyed method which is coming from
09:39 - this code which is this stop self uh uh
09:43 - method right so you can perform your
09:47 - actions in UI and you can start the
09:50 - service and you can still perform your
09:52 - actions in the UI so in this way you can
09:56 - use threads with your ser services in
09:59 - Android I hope you enjoyed this video
10:01 - please rate comment subscribe and bye
10:03 - for now