00:00 - so hello welcome back to the new video
00:01 - of the maven tutorial Series so till now
00:04 - we have covered uh what is Maven uh yes
00:08 - we've seen the softwares that are
00:10 - required we've seen a covered life
00:12 - cycles and basic mapping commands so and
00:16 - now we will see the maven dependencies
00:18 - in this video and on next video onwards
00:21 - we will be creating an actual project
00:25 - and we will see all this theory that we
00:27 - have learned till this video uh how we
00:29 - can Implement in that uh create or the
00:32 - actual project okay so we'll see the map
00:35 - independent dependencies in this video
00:37 - okay
00:39 - so first thing Maven simplifies the
00:41 - creation and the management of the
00:42 - dependency by using a centralized
00:44 - repository that contains a vast
00:46 - collection of Open Source libraries and
00:48 - framework to create and manage
00:50 - dependencies in Maven we have to follow
00:52 - these steps okay so we'll see the step
00:56 - by step how we can create or manage the
00:58 - dependencies in the
01:00 - Maven project Okay so
01:02 - first step is
01:05 - Define the dependencies okay so the
01:08 - first step is to define the dependencies
01:09 - in the projects form.xml file so as I
01:13 - said as I told you in the previous video
01:14 - also com.xml file is very important for
01:17 - the maven projects this is the file
01:19 - where all those uh project related
01:21 - dependencies and are being defined in
01:24 - this file if you if you forgot or if you
01:27 - not Define any dependencies that you
01:30 - have used inside your project and you
01:32 - don't mention over here inside the pump
01:34 - product semen then the project will not
01:36 - work since that dependency will be not
01:38 - implemented in inside your build okay so
01:41 - the this file is important and you have
01:43 - to define the dependencies first inside
01:45 - this file itself okay the com.xml file
01:49 - is an XML file that contains the project
01:51 - configuration information including the
01:53 - dependencies so it also contains the
01:56 - configuration information of the web
01:58 - project also okay so to Define our
02:00 - dependencies you need to specify the
02:01 - group ID the artifact ID and a version
02:04 - of the dependencies okay for example
02:07 - we'll see one example over here you can
02:09 - see one snapshot of the dependency for
02:12 - example to add a spring framework
02:13 - dependency to your project you need to
02:15 - add the following form.xml so imagine
02:18 - one project you are building and you are
02:19 - you are trying to add the spring
02:21 - framework in your project then you have
02:24 - to write this many line of code to tell
02:27 - your project from.xml file or or Maven
02:31 - that you are using the screen framework
02:34 - and add this dependency in my project
02:36 - okay so the root tag will be
02:38 - dependencies inside which a dependency
02:40 - tag is there and inside this dependency
02:44 - tag you create all one dependency itself
02:47 - okay so as you can see we need group ID
02:50 - artifact ID and the version of the
02:51 - dependency so we first Define group ID
02:54 - tag and we'll write all dot spring
02:56 - framework with uh we tell the man that
03:00 - this is the screen framework that we are
03:02 - trying to use you know in my project and
03:04 - the artifact ID
03:08 - and the version of this version of which
03:12 - stream version you are trying to use in
03:14 - your project will specify that version
03:16 - also over here and this is how you you
03:18 - create or Define a dependency in your
03:21 - form.xml file and Maven will understand
03:23 - that hey you are trying to use swing
03:26 - framework audio project okay let me add
03:28 - this dependency in your project okay
03:33 - how to resolve the dependency okay
03:35 - once the dependency is defined now you
03:38 - know how to define the dependency in the
03:40 - palm.xible file Maven will automatically
03:42 - download and resolve dependency from the
03:45 - central repository Maven checks if the
03:47 - dependency is already downloaded in the
03:49 - local repository and if not it it
03:52 - downloads from the central repository so
03:54 - there are two repositories are there one
03:57 - is local repository and one is Central
03:58 - repository okay so local repositories
04:01 - where your all the dependencies resides
04:04 - or downloaded dependency and the central
04:06 - depositories where all those
04:10 - dependencies are there and it first the
04:13 - maven win check okay so maybe we'll
04:15 - check okay so you need fixed spring
04:17 - framework it will check in the local
04:19 - repository whether spring framework is
04:21 - already downloaded over there or not if
04:24 - it is not downloaded in the local
04:26 - repository it will go inside the central
04:28 - repository and download the spring
04:30 - framework and add this depend dependence
04:32 - dependent dependency in your project for
04:35 - the local repository okay so this is how
04:38 - the dependencies are resolved in the
04:41 - Marion okay so dependent is dependency
04:44 - scope okay so dependencies in Maven can
04:46 - be have different Scopes okay so Scopes
04:48 - are different which determine when and
04:51 - where the dependency is being used okay
04:53 - so you define the dependencies you
04:55 - resolve the dependencies now we have to
04:57 - define the scope of the dependence
04:58 - dependency okay the four main scope are
05:00 - compiled provided runtime and test the
05:04 - scope can be specified in the dependency
05:06 - declaration all right so where we
05:08 - declare the dependency inside this
05:10 - dependency tag for example to specify
05:13 - the dependency is only required for the
05:15 - testing you would add the following
05:17 - pump.xml so imagine when
05:20 - testing tool okay so J unit is a testing
05:23 - tool you required for the testing of the
05:25 - Java project so you are trying to add
05:28 - the dependency for the J unit so think
05:31 - about it you when you require the J unit
05:33 - obviously when the testing phase come of
05:35 - your testing phase will come for your
05:37 - project then and then only you require
05:39 - junit right so you can Define that scope
05:42 - of test here inside the dependency tag
05:45 - itself there and by telling the maven
05:49 - that hey use this junit framework only
05:52 - for the testing phase okay so you are
05:55 - defining the scope you are limiting the
05:57 - scope of that framework in the testing
06:00 - phase itself okay so these this is how
06:03 - your dependency scope is being resolved
06:05 - okay so next comes how to manage the
06:08 - dependency okay so Maven project says
06:11 - Maven provides several goals to manage
06:13 - the dependencies including adding and
06:16 - removing or updating the dependencies
06:18 - for example to update a dependency you
06:20 - can use the following command Okay so
06:23 - mavin does this
06:26 - thing of managing the dependencies
06:28 - automatically Okay so
06:31 - it will add it will remove it will
06:33 - update your dependencies automatically
06:36 - okay so to update your dependencies you
06:39 - can use this following command mvn
06:40 - version colon use latest version okay so
06:44 - you are telling the maven that hey uh do
06:48 - one thing update all those dependencies
06:51 - to them to their latest versions
06:54 - okay so if you are using three
06:57 - dependencies Maven will go and update
07:00 - all those three dependencies to the
07:02 - latest version and it will do
07:03 - automatically okay so this will update
07:06 - all the positive dependency to the
07:07 - latest version available in the central
07:09 - repository okay in summary in short
07:12 - defining and managing dependencies in
07:15 - Maven is simple process that is mostly
07:17 - done through the projects form.xml file
07:19 - again I'm saying pong.xml file is very
07:22 - important my Maven provides a
07:24 - centralized repository and several goes
07:26 - to simplify the management of
07:28 - dependencies in Java based projects okay
07:34 - okay so we'll see uh now the types of
07:38 - dependencies now till now we have
07:40 - covered how The dependencies Works what
07:43 - are the different phases of dependencies
07:45 - now we'll see types of dependencies all
07:48 - right so in mavin there are several
07:50 - types of dependencies that can be
07:51 - defined in the projects form.xml file
07:54 - these these dependent dependencies will
07:56 - specify the libraries or the framework
07:58 - that is being used in our projects all
08:00 - right so first is compile dependencies
08:03 - these dependencies are required for the
08:05 - project to compile and build correctly
08:07 - now when download these dependencies and
08:10 - add them to the projects class path this
08:12 - depend this dependencies are also packed
08:15 - packaged with the projects output jar or
08:18 - War file okay so these are the early
08:22 - early dependencies that we require first
08:24 - to compile your project these
08:26 - dependencies which are required are
08:27 - comes inside the compile dependencies
08:29 - within a provided dependency dependent
08:31 - dependencies this dependency is are
08:34 - required for the project to compile but
08:37 - they are expected to provide it by the
08:39 - runtime environment okay so example of
08:42 - such dependencies are servlets API and
08:46 - JSP API these dependencies are not
08:48 - packaged in the projects chart okay so
08:51 - the compiled dependencies are packaged
08:53 - with the jar and but the provider
08:55 - dependencies are not packaged with the
08:57 - jar of War file whatever the file you
08:59 - are creating okay so next is runtime
09:02 - dependencies these dependencies are
09:04 - required for the project to run but not
09:07 - required for the project to compile okay
09:09 - so first uh two dependencies that we
09:12 - have seen those are required for early
09:14 - okay so when your project compiles that
09:18 - that time these dependencies are
09:19 - required but after compilation when the
09:22 - project will run
09:23 - for those we have different dependencies
09:25 - that dependencies come under the runtime
09:27 - dependencies right so these dependencies
09:29 - are added to the class part at runtime
09:32 - but they are not packaged again these
09:35 - are also not packaged with the jar or
09:36 - oil
09:39 - now your project run okay so now come
09:42 - test dependencies so which are required
09:44 - for the testing purposes okay so these
09:46 - dependencies are required for the
09:47 - projects tests but not required for the
09:49 - project to compile or run as I said
09:51 - there is no use of these test
09:53 - dependencies for the compilation part
09:55 - and the Running part okay so these
09:57 - dependencies are added in the class path
09:59 - when running tests but again these are
10:02 - also not packaged with the jar or file
10:04 - okay so next comes system dependencies
10:06 - this dependencies are not available in
10:09 - the central Maven repository and are
10:11 - required to be manually installed on the
10:14 - local machine to include the system
10:16 - dependencies in the project you must
10:18 - specify the path of to the dependency in
10:21 - the jar file okay so these are the
10:24 - dependencies that are not provided in
10:26 - the mail and Central repository you have
10:29 - to do them these tasks manually if you
10:32 - are using any system dependencies you
10:34 - this is the thing that you have to do
10:35 - manually there is no way to do this
10:38 - automated oh automated manual okay so
10:41 - next is import dependencies these
10:44 - dependencies are used to import the
10:45 - dependencies from other Maven projects
10:48 - when importing a dependency Maven will
10:50 - use imported projects form dot XML file
10:53 - to download and manage the dependency
10:54 - okay so if you are trying to use another
10:57 - Maven Project's dependencies so at this
11:01 - time import dependencies will come into
11:04 - the picture Okay so imagine when you
11:06 - have one project and you are trying to
11:08 - you have you want the another Maven
11:11 - projects dependencies so input
11:13 - dependencies will come into the picture
11:14 - they will go inside that projects
11:16 - from.xml files they will see uh what are
11:20 - the what are all dependencies that the
11:22 - other project is depending uh applying
11:25 - it it will get those all dependencies
11:28 - and it will automatically add those
11:30 - dependent dependencies in your project
11:31 - so these are types of the input import
11:34 - depends import dependencies okay so in
11:37 - summary understanding that if different
11:39 - types of dependencies in Maven is
11:41 - essential to properly manage the project
11:43 - dependencies and ensure that the project
11:45 - compiles runs and tests correctly so why
11:48 - I'm taking this theoretical lectures
11:50 - first you have to understand what are
11:53 - you know what is dependencies but you
11:56 - don't know what is compile dependencies
11:57 - for a dependencies you first you have to
11:59 - understand these are types of the
12:01 - dependencies then and then only you can
12:02 - go into go and create a maven project
12:06 - and
12:06 - work on it okay so I guess this is the
12:11 - pretty much theoretical part that you
12:13 - want to understand before you get your
12:15 - hand dirty on the management projects
12:18 - okay so on the next video onwards we'll
12:20 - be
12:21 - creating our new Maven projects using
12:25 - IntelliJ IDEA or Eclipse any ID that I
12:29 - can choose so you you also can choose
12:31 - any ID or those IDs are come with Maven
12:35 - integration in inbuilt just a
12:38 - visualization part will be different
12:40 - okay so thank you for watching this
12:42 - video and I will see you in the next one