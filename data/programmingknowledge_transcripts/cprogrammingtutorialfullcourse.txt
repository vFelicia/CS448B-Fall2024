00:00 - C programming language is considered as
00:03 - the mother of all programming languages
00:04 - present in the software industry
00:06 - anywhere you go see programming language
00:09 - is the most basic and very important
00:11 - aspect which the recruiters are looking
00:13 - for hi this is John from programming
00:16 - knowledge and welcome to this video
00:18 - tutorial Series where you will learn how
00:20 - to go about programming in c language in
00:24 - this tutorial we will discuss mostly the
00:26 - important parts of C programming
00:28 - language so these are the topics that
00:30 - are included in our CE programming
00:32 - language tutorial Series so firstly
00:34 - we're going to discuss the history of c
00:36 - and then to be followed by the
00:38 - installation of C so I'm going to guide
00:41 - you through all the steps needed to
00:43 - start about programming in C programming
00:46 - language to be followed by data types
00:48 - and variables of course we're going to
00:50 - discuss the importance of data types and
00:52 - variables in C and to be followed by C
00:57 - tokens
00:58 - to be followed by preprocessor
01:00 - directives and of course we're going to
01:02 - learn the how to write our first program
01:04 - in C programming language
01:06 - and of course to be followed by control
01:09 - structures so as we all know if you are
01:12 - coming from other programming language
01:14 - you already have knowledge on control
01:17 - structures so we're going to discuss
01:19 - that right here and then of course loops
01:23 - we're going to discuss loops and then
01:25 - pointers
01:27 - and to be followed by functions and then
01:30 - we're going to learn about escape
01:33 - sequence in C
01:35 - and after that one will be the data
01:38 - structures and of course we're going to
01:41 - discuss strings
01:43 - followed by structures and Union to be
01:46 - followed by memory allocation and lastly
01:49 - is the Sorting algorithms so we're going
01:52 - to discuss that also in this particular
01:54 - tutorial series
01:56 - so now let's talk about the history of C
01:59 - language so history of C language is
02:02 - interesting to know here we are going to
02:04 - discuss a brief history of the C
02:06 - language
02:07 - C programming language was developed in
02:09 - 1972 by Dennis Ritchie at Bell
02:12 - Laboratories of atnt or American
02:15 - Telephone and Telegraph located in the
02:18 - USA Dennis Ritchie is known as the
02:21 - founder of the C language it was
02:23 - developed to overcome the problems of
02:25 - previous languages such as B bcpl and
02:28 - other languages
02:30 - initially C language was developed to be
02:32 - used in Unix operating system it
02:35 - inherits many features of previous
02:36 - languages such as B and bcpl
02:41 - C was originally first implemented on
02:44 - the dec PDP 11 computer so PDP 11 is a
02:48 - series of 16-bit mini computers sold by
02:51 - digital Equipment Corporation from 1970
02:54 - into the 1990s C programming language is
02:58 - known for its flexibility and
02:59 - versatility allowing maximum control
03:02 - with minimal commands
03:05 - so now let's talk about the features of
03:07 - C language
03:09 - C programming language is the way to use
03:12 - language and it provides many features
03:14 - that we're going to discuss in this
03:16 - particular video
03:18 - number one it is simple
03:20 - C is a simple language in a sense that
03:22 - it provides a structured approach to
03:25 - break the problems into parts
03:27 - number two machine independent or
03:30 - portable
03:31 - so unlike Assembly Language C programs
03:34 - can be executed on different machines
03:36 - with some machine specific changes
03:38 - therefore C is a machine independent
03:41 - language
03:43 - three mid-level programming language
03:46 - although C is intended to do a low level
03:49 - programming it is used to develop system
03:51 - applications such as kernel driver and
03:54 - others it also supports the features of
03:57 - high programming language and that is
03:58 - why it is known as mid-level language
04:02 - number four structured programming
04:04 - language
04:05 - C is a structural programming language
04:07 - in a sense that we can break the program
04:08 - into Parts using functions so it is easy
04:11 - to understand and modify functions also
04:14 - provide code reusability
04:17 - number five Reach Library see language
04:20 - provides a lot of built-in functions
04:22 - that make the development faster
04:25 - number six memory management it supports
04:29 - the future of dynamic memory allocation
04:31 - in C language we can freely allocate the
04:34 - memory at any time by calling the free
04:36 - function
04:37 - number seven speed
04:40 - the compilation time and execution time
04:42 - of C language is fast since there are
04:44 - lesser built-in functions and hence the
04:48 - Lesser overhead
04:49 - number eight pointer C provides the
04:52 - future pointers we can directly interact
04:55 - with the memory by using the pointers we
04:57 - can use pointers for memory structures
05:00 - functions array and others
05:04 - number nine recursion
05:07 - in C we can call the function within the
05:09 - function it provides code reusability
05:13 - for every function recursion enables us
05:16 - to use the approach of backtracking
05:18 - number 10 extensible
05:22 - C language is extensible because it can
05:24 - easily adapt new features
05:27 - now that we're done talking about the
05:29 - features and history of C programming
05:32 - language we can now go to the
05:33 - installation of C in Windows operating
05:36 - system now there are multiple ways we
05:39 - can install C programming language in
05:42 - our computer system so the most basic
05:44 - way is to install torbuzi in our
05:47 - computer system
05:49 - also if you're familiar with the Eclipse
05:52 - IDE you can directly download GCC
05:55 - compiler and include
05:58 - see nature to our Eclipse IDE and
06:01 - continue working on or executing C
06:03 - programs as I've said guys there are
06:05 - multiple ways of installing C program
06:07 - into our computer system and one way of
06:10 - doing it is to install turbo C plus plus
06:13 - or you can use the Eclipse IDE and then
06:17 - include the GCC compiler and also you
06:20 - can do it online there are there are
06:22 - many platforms that can help you develop
06:25 - C program online and then one way of
06:29 - doing it is also
06:31 - um
06:32 - installing code blocks so if you go to
06:34 - your browser and try to search for code
06:37 - blocks and then this is the first link
06:40 - that you will get
06:42 - and it will redirect you to
06:44 - codeblocks.org and code blocks is an IDE
06:48 - that will help us to write programs
06:51 - especially for C C plus plus and Fortran
06:56 - ID the good thing about code blocks is
06:58 - it is a cross-platform and open source
07:02 - meaning we can use it freely to develop
07:04 - our CA programs so the first thing that
07:07 - we're going to need guys is to download
07:09 - this of course in order for us to
07:11 - install and start writing or receive
07:15 - programs so there are two options here
07:18 - we can download it from this link and of
07:21 - course we can also download it from this
07:24 - particular link here so let's just try
07:27 - this one the upper one and then
07:30 - there are options to download the binary
07:33 - release we can download the source code
07:37 - and we can also retrieve source code
07:39 - from SVN okay the first thing that we're
07:42 - going to need now is to download the
07:44 - binary release
07:45 - okay you click on that and here we can
07:48 - see that we can install it on Windows XP
07:51 - Vista Windows 7 Windows 8 and Windows 10
07:56 - and we can install it also in Linux
07:59 - operating system
08:01 - be it 32 or 64-bit
08:04 - and also we can use it on Mac OS X and
08:09 - because we're using Windows operating
08:10 - system for now so let's just click on
08:12 - that
08:14 - and then here we can see all the options
08:16 - or all the links
08:18 - that we can download the code blocks we
08:23 - can download only the setup we can only
08:25 - or we can also download the Nan admin
08:29 - no setup and then we can also code
08:32 - blocks with this Ming W setup so if you
08:37 - want you can download this particular
08:39 - one code blocks and then the current
08:41 - version is 17.12 Ming w setup.xesa
08:47 - and then we can download it from
08:49 - sourceforge or first hub
08:52 - so
08:53 - try that
08:55 - and then let's just wait for the
08:57 - download to complete in order for us to
09:00 - install this particular IDE and then
09:03 - after installation of course we can
09:05 - write our first program in say
09:09 - programming language So currently it is
09:12 - 86.2 MB and then we're just going to
09:14 - wait for a few seconds for the download
09:16 - to complete and I think it won't take
09:20 - that much time
09:22 - and we're halfway there
09:25 - there you go so we can just install this
09:28 - particular IDE so
09:30 - click on this
09:37 - and yes
09:44 - next
09:45 - I agree
09:47 - and then
09:49 - we don't want to touch anything here
09:51 - if you are an advanced user you can try
09:55 - to modify the installation but for now
09:57 - since we're beginners let's try to click
10:00 - on next and then install this is the
10:02 - destination folder and then install
10:17 - so there you go installation is complete
10:20 - so do you want to run code blocks now of
10:22 - course yes
10:28 - so gnu's GCC compiler has been detected
10:32 - so that's okay
10:38 - and file associations we are being asked
10:42 - here if we want to associate C and C
10:44 - plus plus files for this particular IDE
10:46 - so
10:47 - uh yes associate code blocks with C or C
10:51 - plus plus files and then okay
10:53 - so there you have it we now have the
10:55 - installation of code blocks and so for
10:58 - this particular video guys we're going
11:00 - to talk about
11:01 - our first
11:03 - um
11:04 - program or C program so basically we
11:08 - also discuss how to install code blocks
11:10 - and here you can see I'm using Code
11:13 - blocks to create our C program okay so
11:17 - here we have the basic
11:21 - basic program or basic C program
11:24 - okay and before that we or I'm going to
11:28 - show you how to create project here in
11:30 - code blocks IDE so the first thing that
11:34 - we're going to need is to create a
11:35 - project so instead of using this
11:38 - particular
11:39 - um
11:40 - file test.c we're going to close that
11:43 - and then create our new project so let's
11:47 - go to file in the new
11:50 - and then there's an option here for
11:53 - creating our project
11:54 - so basically all we have to do is Select
11:58 - here
11:59 - a type of application that we want so so
12:02 - for example we're going to just create a
12:07 - basic application or basic say program
12:10 - so let's try to find that here in this
12:13 - options
12:15 - so we're going to select the first one
12:17 - which is the console application because
12:21 - we're going to start with a very basic
12:24 - application
12:25 - single and then next so it should be C
12:32 - project title will be
12:34 - programming knowledge
12:38 - tutorials
12:40 - and then let's just
12:42 - select the actual directory to you uh
12:45 - directory to use so let's just say the
12:48 - documents and then we're going to
12:52 - um
12:53 - create a new file here or a new
12:55 - directory see projects
12:59 - then okay and then next
13:02 - and then we don't want to mess around
13:05 - here so just basically finish the wizard
13:09 - for now so finish
13:11 - so we have here our project programming
13:14 - knowledge tutorials and we have here the
13:16 - sources and by default uh it created
13:20 - this particular file
13:23 - main.c so as you can see we have here
13:26 - some parts or pre-populated code for us
13:31 - so we have the very basic structure of a
13:35 - basic C application so if you try to run
13:39 - this
13:40 - let's just let's just try to run this
13:42 - first before we go any further with our
13:45 - tutorial so let's just run and then it
13:48 - it uh it will ask to build our project
13:53 - so of course yes
13:55 - and then there you go you can see here
13:58 - uh the hello world text so basically
14:02 - what this program is doing is just
14:05 - printing hello world string or text into
14:08 - our monitor or this particular console
14:11 - so press any key to continue
14:16 - or you can just close this particular uh
14:19 - command prompt
14:20 - Okay so
14:23 - uh let's uh if you want to make the text
14:26 - or the code bigger you can just control
14:29 - scroll
14:30 - by using your keyboard and your mouse of
14:33 - course so I'm just going to make it
14:35 - bigger so that you will you will be able
14:38 - to see what what I am doing here with
14:41 - our project so first I'm going to
14:45 - discuss first the
14:47 - parts of this particular program or
14:49 - basic program C so basically we have the
14:53 - lines one and two
14:56 - so basically it is the like import
14:59 - statement of this particular program so
15:03 - it is basically uh saying that we need
15:06 - this files and we need to include this
15:10 - in our new program or new file uh main.c
15:14 - so we have here the include
15:18 - and then
15:20 - stdio.h and include STD
15:24 - lib.h so basically these are header
15:28 - files okay so these are files and we
15:31 - need uh functions from those files so
15:34 - for example we have here the functions
15:37 - printf here
15:39 - so this particular function is inside or
15:43 - can be found in
15:45 - sddio.h file okay and
15:50 - here we also have the uh in Main
15:54 - as you can see here so the in main is
15:57 - the main function this is the entry
16:00 - point of every program in C language so
16:04 - in normal terms it is basically the
16:07 - entrance and every time we run our
16:10 - project it will try to find the main
16:13 - function of our
16:17 - project so
16:19 - it should have like one main function
16:22 - for in in order for us to run our uh
16:26 - program so in main so basically it says
16:30 - that the return type is an INT and then
16:33 - everything
16:34 - uh inside this curly braces open and
16:37 - close curly braces is part of this
16:40 - particular function mean and we have two
16:43 - lines here so print F and then semicolon
16:48 - and then return zero and then semicolon
16:51 - so these are the lines of our
16:54 - uh in main function
16:57 - so
16:59 - in order to terminate a line you need to
17:01 - add semicolon at the end of that
17:03 - particular line so just like this here
17:05 - and of course uh just like
17:08 - right after this return zero so now I'm
17:12 - going to explain what this function does
17:15 - so the printf is a function used to
17:18 - print data on the console so basically
17:22 - we're just selling our program to Output
17:24 - hello world and then
17:27 - um it should return zero so return zero
17:32 - statement it means that the return
17:35 - execution status of this particular
17:38 - program
17:39 - and the zero value is used for
17:43 - successful execution and one for
17:46 - unsuccessful execution so let's try to
17:51 - run this again
17:53 - anyway you can just run or build and run
17:57 - your project or you can just run it by
18:01 - pressing this particular run button
18:04 - okay so as you can see here we have this
18:07 - particular
18:08 - um string or output hello world and if
18:12 - you try to
18:12 - add a new line for our program printf
18:17 - and then everything that we want to
18:20 - display it should be inside the double
18:23 - quotes okay
18:25 - see programming
18:27 - is awesome
18:30 - okay
18:32 - and then of course we need to end these
18:35 - uh and this particular line by adding
18:37 - the semicolon at the end
18:38 - and then save
18:41 - you can just build and run
18:44 - so as you can see here
18:46 - hello world and then CA programming is
18:49 - awesome so notice that we have added
18:53 - this particular character here
18:55 - backslash n so we're just styling the
18:59 - program to add another line or to go on
19:02 - to a new line after printing the hello
19:04 - world or the hello world string this one
19:08 - and let's try this
19:10 - also for this particular second line
19:14 - and build and run
19:17 - okay so as you can see after printing
19:20 - the C programming is awesome it added a
19:22 - new line here which you can see as a
19:25 - space between C programming awesome text
19:28 - and process return zero so uh there are
19:33 - others uh there are other
19:35 - texts or other keywords also for this
19:38 - instead of using
19:41 - um slash or backslash n
19:44 - you can use backslash t for tab or for
19:49 - tabbing so let's try that
19:51 - save and then build and run
19:55 - so as you can see there is a significant
19:58 - space between programming word and the
20:02 - word is
20:03 - so this will come in handy if you're
20:05 - trying to work with like a tabular data
20:09 - so uh backslash D will be uh like very
20:14 - useful for you because it will format
20:16 - The Columns for you
20:18 - and I as I've said it will be a great
20:22 - help
20:23 - so the next uh thing that we want to
20:26 - talk about is the order of execution in
20:30 - every C program so basically if we have
20:33 - like four lines here
20:35 - to print something in our screen like
20:39 - this
20:42 - so as I've said
20:44 - in C program it is executing in order
20:48 - line by line so this will be the first
20:51 - one or the first line to be executed
20:53 - and then the second line to be executed
20:56 - the third line to be executed and the
20:59 - fourth line to be executed so so for
21:03 - example I'll try to make this
21:05 - two
21:07 - and then three or I mean three
21:12 - and then four
21:14 - let's try to build and run this
21:18 - so we have the output as
21:21 - um hello world
21:22 - hello two hello number three and hello
21:26 - number four so basically all the
21:29 - statements are executed in order line by
21:33 - line so so for example we have or we
21:36 - want to draw something in the screen
21:40 - so like we want to draw a triangle
21:48 - so here
21:49 - and then another one here
21:54 - and then another one
21:57 - just to show you
22:00 - these sequence of execution of this
22:03 - particular C program
22:05 - so right here another
22:09 - um
22:10 - slash
22:12 - and then here
22:16 - and maybe here
22:20 - and another one another line or vertical
22:24 - line
22:25 - and also here and we need to add the
22:30 - new line
22:31 - or line break for this
22:34 - print statements
22:36 - and we can make this or add like the
22:40 - underscore
22:42 - and let's try to build and run this
22:45 - and you can see we have the triangle
22:48 - displayed in our screen and that means
22:51 - that the lines
22:52 - has been printed or has been executed in
22:55 - order line per line so if we try to make
22:59 - changes and instead of pressing it here
23:04 - let's space it before printing the first
23:07 - line
23:09 - so the output will be like this a funky
23:13 - looking shape
23:14 - that's because we execute the first
23:18 - statement
23:19 - to have like the forward slash the
23:21 - underscore and then the vertical and
23:24 - that's why we have an output like this
23:27 - so just bear in mind that in every
23:30 - program it is executing line per line
23:34 - okay so now let's try to discuss
23:37 - placeholders okay
23:40 - placeholders for different data types so
23:44 - there are in programming there are types
23:47 - or data types that we want to work with
23:49 - so for example string we have characters
23:51 - we have integer we have float and other
23:56 - data types so so for example you want to
23:59 - display
24:01 - string you just have to like say hello
24:04 - world
24:06 - and this is
24:08 - this is a string
24:13 - let's just remove this okay save and run
24:17 - and build
24:18 - so we now have like the output of our
24:22 - programming lower this is a string
24:25 - but if you want to try it or if you want
24:28 - to print
24:30 - a number so say for example
24:33 - 32.
24:36 - so let's try this
24:40 - run and build and as you can see
24:44 - we have
24:45 - returned negative 10 7 3 4 8 1 or 1 8
24:51 - and 1 9.
24:53 - so basically what this means is that
24:55 - there's uh something wrong with our
24:57 - program because as I've said before
25:00 - zero it should be the standard or the
25:03 - return if the
25:06 - program
25:07 - runs smoothly or there's no Pro there's
25:11 - no problem while running our program so
25:14 - basically here we have negative so it
25:16 - means we have problems
25:17 - right and we can see here that
25:21 - um
25:22 - note expected constant Char but argument
25:25 - is of type int as you can see here so uh
25:30 - basically we cannot directly display
25:32 - number by using this so we can use
25:36 - pastel placeholder for that so this will
25:39 - be for our placeholder
25:42 - so instead of using directly 32 here we
25:46 - can say
25:49 - percent
25:50 - and then d
25:53 - so D is for
25:55 - integer
25:57 - so if you want to display integer you
26:00 - might want to uh use the percent D
26:03 - placeholder and then inside this printf
26:06 - statement you need to add the comma and
26:10 - then of course the value that you want
26:12 - to be printed so percent D and then
26:16 - comma and then the actual value that you
26:19 - want to be printed so let's try that
26:23 - build and print or build and run and as
26:26 - you can see here processor turns zero
26:29 - and then we have here the value 32.
26:32 - so let's try
26:34 - this one more time backslash n
26:38 - build and run and here we can see uh we
26:42 - can see clearly what is happening here
26:44 - so hello world this is a string and the
26:47 - value 32. so that's the purpose of
26:52 - percent D is a placeholder for an
26:55 - integer value another one we have for
27:00 - large integers so for example there are
27:03 - like a very large number or very large
27:05 - integer
27:07 - the keyword for that or the placeholder
27:10 - for that is LD which stands for
27:15 - large
27:17 - integer okay so for example you have
27:20 - like
27:22 - um very big integer right here okay so
27:26 - that's the placeholder percent LD and
27:29 - then of course we also have
27:31 - four decimal values or float values
27:35 - so for example you want to say 32.5
27:40 - or 30 yeah 30 32.5 this is for again
27:46 - decimal
27:47 - or float value
27:50 - okay
27:53 - let's just say float value here
27:56 - so percent f
27:58 - percent D4 integer percent LD for large
28:01 - integer percent f for float number
28:05 - and another one for
28:08 - large float
28:12 - okay so this will be for
28:15 - large float
28:17 - and then another one for so for example
28:20 - you want to display a character
28:24 - in
28:26 - you want to display like
28:29 - letter A
28:31 - so the placeholder for that is percent C
28:35 - and then the actual value that should be
28:38 - uh
28:40 - type in inside the single code
28:43 - characters so this will be for a Char or
28:47 - character
28:48 - and then another one is for the string
28:51 - so so for example you want to display
28:53 - hello world this is a string and then
28:57 - uh you want to display that you can also
29:00 - use percent s
29:02 - for the placeholder for that so
29:05 - you can say
29:08 - hello from printf
29:12 - okay so this will be for our
29:15 - string so basically string is just a
29:18 - series of characters meaning uh string
29:22 - is just composed of several characters
29:24 - so for example this one h e l l o and f
29:29 - r o from and so on you you get the idea
29:33 - but basically all these placeholders can
29:36 - be used to display different values or
29:39 - different types of values the integer
29:43 - large integer float large float
29:46 - character and string so let's try to
29:50 - display this and maybe add the backslash
29:53 - n here
29:54 - and here also here
29:57 - here
29:58 - here
30:00 - and here so
30:03 - build and run
30:06 - there you go you can see here
30:09 - the output of our program
30:12 - and we did not
30:15 - specify directly the values of this
30:18 - figures so instead we're using printf
30:21 - and then the placeholder so for example
30:24 - percent D for integer percent D for
30:27 - large integer and so on and in this
30:30 - tutorial guys I want to talk to you guys
30:31 - about variables in C now when we're
30:35 - using C programming language
30:37 - a lot of times we're going to be dealing
30:39 - with data so there's going to be
30:41 - different data values or different
30:43 - information that we're going to want to
30:45 - keep track and use inside of our
30:48 - programs
30:49 - and sometimes it can be difficult to
30:51 - maintain and keep track of all that data
30:55 - and that's where variables come in
30:57 - so basically variable is essentially a
31:00 - container where we can store different
31:02 - pieces of information
31:04 - so different data values we could sort
31:06 - of things like numbers or texts or
31:09 - characters and these variables make it a
31:13 - lot easier for us to keep track and
31:15 - manage all the data in our C program so
31:18 - I'm going to show you guys basically how
31:20 - variables work or how variables can be
31:23 - useful and how we can use them in RC
31:26 - programs but down here I have a very
31:29 - basic program so I'm basically
31:33 - just printing out a little story
31:35 - so it says their ones was a man named
31:38 - Mike he was 50 years old
31:41 - he really liked the name Mike but did
31:44 - not like being 50.
31:46 - so this is a simple program we're just
31:48 - printing out a bunch of different lines
31:50 - of text and then when I run this program
31:56 - you'll see we print out the actual story
31:58 - so over here we have the actual uh story
32:02 - and this is great okay but let's say
32:07 - that I'm reading through my story and
32:09 - I'm reading through my program and I'm
32:12 - thinking to myself hmm I think I want to
32:15 - change the character's name
32:17 - so instead of calling the character Mike
32:19 - why don't we call him like John in order
32:22 - to make that change
32:24 - so I'm gonna have to look through my
32:26 - entire program and find every place
32:28 - where we mention the character's name so
32:32 - right here is one so change it to join
32:41 - and
32:43 - remember keep looking here and there is
32:45 - another one
32:49 - so we'll change this to John right so I
32:51 - had to manually go through and change
32:53 - every instance of the character's name
32:55 - to John so let's say that's okay that's
32:59 - uh that sounds pretty good
33:01 - but maybe I'm thinking I want to make
33:04 - the character a little bit younger
33:07 - so instead of like 50 years old
33:11 - so let's change it to maybe 30.
33:15 - 30 years old instead of 50 years old
33:18 - okay we're going to change the hit here
33:21 - he was 30 years old and also in here the
33:26 - last line of our story
33:29 - so that's 30 instead of 50. if I was to
33:34 - run this program then all that
33:35 - information will be updated and will now
33:38 - have new story okay so here's the
33:43 - problem though I'm dealing with a very
33:45 - short story so I mean this is four lines
33:47 - we only mentioned the character's age
33:50 - and name only twice
33:53 - but imagine if I have uh if I was
33:55 - writing out a huge C program that had
33:59 - hundreds of lines in the story
34:02 - so story had hundreds of lines and maybe
34:04 - we mentioned the characters uh name
34:06 - hundreds of times they're mentioned
34:09 - their age hundreds of times and if we
34:12 - wanted to change the characters uh age
34:15 - or name I would have to go through and
34:18 - manually change it every single location
34:20 - and that would take forever
34:23 - and it would be a huge drag for us to
34:27 - change all the instances of the name of
34:30 - our character and also for our uh for
34:32 - the age of our character so basically
34:34 - that's not a good way for us to manage
34:36 - and maintain the data for our programs
34:38 - okay uh basically you have two pieces of
34:41 - data that we're working with and
34:43 - consistently in this program the
34:45 - characters age and the character's name
34:49 - what I want to show you guys now is how
34:52 - we can use variables to better keep
34:53 - track I mean manage these pieces of
34:56 - information so remember a variable is
34:58 - basically just a container where we can
35:01 - store some data
35:02 - so I want to create two variables which
35:05 - will store the character's name in the
35:07 - character's age and I'll show you guys
35:10 - how this can make our program a lot
35:12 - easier to manage up here before the
35:17 - print statement
35:18 - I'm just going to make a new line and
35:21 - I'm going I'm going to come over here
35:23 - and I'm going to create a variable now
35:25 - whenever we create a variable in C we
35:27 - have to see a couple of a couple pieces
35:29 - of information the first thing we have
35:31 - to tell see is that
35:33 - what type of information we want this
35:36 - variable to store
35:37 - now I'm going to get into the different
35:39 - data types that we can represent and see
35:42 - more in the next tutorial but for now
35:44 - just know that there's a bunch of
35:45 - different types of data that we can
35:47 - store and see can see we can sort of
35:50 - things like numbers characters we can
35:54 - store text we can store decimal numbers
35:56 - all sorts of all sorts of stuff like
35:58 - that in our case I'm going to store the
36:00 - character's name and the characters age
36:04 - basically just a collection of
36:06 - characters so in order to create this
36:08 - variable the first thing that I have to
36:10 - see
36:11 - that I want to create a variable that's
36:13 - going to store some characters and to do
36:17 - that I'm just going to type out Char
36:19 - here
36:21 - just like that and basically uh telling
36:24 - C we're going to store characters in
36:27 - inside of this variable so after we type
36:30 - our chart I want to
36:32 - type the name of the variable that I
36:34 - want to create remember that the
36:36 - variable is a container and it's a good
36:39 - idea for us to give these containers
36:41 - descriptive names
36:43 - and those names so basically let us know
36:47 - what that variable is storing inside of
36:49 - it so I'm going to call this uh
36:51 - character name
36:56 - now what I want to do is basically I
36:59 - want to store multiple characters so
37:01 - over here we're telling C
37:03 - that uh I want to store a character but
37:07 - in C we can also store instead of just
37:09 - uh instead of just storing like one
37:12 - single character we can store a bunch of
37:14 - characters
37:15 - and that would be kind of like you know
37:17 - name
37:19 - so there's like four characters in here
37:23 - so in order for us to store a bunch of
37:25 - characters inside of this particular
37:27 - variable
37:28 - after we type the character variable
37:30 - name we're gonna have to make an open
37:33 - and close square brackets
37:35 - and that's gonna tell C that we want to
37:38 - store a bunch of characters inside of
37:41 - this part particular variable so Char
37:44 - character name open and close square
37:46 - brackets
37:48 - um I'm gonna set this equal to something
37:50 - so I'm I am essentially assigning a
37:52 - value to this particular variable and
37:55 - I'm just going to make an open close
37:57 - quotation marks
37:58 - so equals and then quotation marks and
38:01 - inside of here we're going to type out
38:03 - the value that we want to store
38:05 - so in my case I'm just going to store
38:07 - the character's name which is John and
38:11 - then as always in C we're gonna have to
38:13 - end this off with a semicolon
38:16 - so all right uh basically
38:19 - what I did here was I created a variable
38:22 - and I told C that I want to store in the
38:25 - variable
38:26 - I wanted to store a character and I give
38:29 - this variable a name character name and
38:33 - then I use this open and close square
38:35 - brackets
38:37 - to tell C that I wanted to store a bunch
38:41 - of characters not just one
38:44 - now what we can do is we can make
38:46 - another variable to store the
38:48 - character's age
38:49 - so in this case
38:52 - we're gonna do something similar but
38:54 - we're gonna want to store a number
38:56 - and there's a bunch of different ways
38:58 - that we can store numbers in C but for
39:01 - our purposes we're starting age so we're
39:04 - gonna use something called an integer
39:06 - and
39:08 - an integer is basically just a whole
39:10 - number so I'm just going to type out in
39:12 - here in and that basically stands for
39:16 - integer
39:17 - and now we're going to give this name
39:21 - so I'm going to call this
39:23 - character age
39:27 - and I'm gonna set this equal to a number
39:30 - so in our story the age is 35 so I'm
39:34 - just gonna type out 35 there and now we
39:38 - can again end this off with a semicolon
39:42 - so I have here two variables this one
39:45 - storing the character
39:48 - name and this one is for our age now the
39:54 - question becomes how we can use this
39:56 - inside our program
39:58 - well basically what we can do is we can
40:01 - print them out alongside with uh with
40:03 - this text and we can actually use this
40:06 - printf function
40:07 - in order to do that so I'm going to show
40:09 - you guys how to do this and then we're
40:11 - gonna talk about it so basically I'm
40:13 - gonna go over here
40:15 - and as you can see we have here the
40:18 - character name which is John okay so we
40:21 - can replace this with percent s so
40:25 - percent s is basically a placeholder
40:28 - so after this
40:31 - um we're going to add comma here and
40:34 - then we're gonna add the character name
40:37 - variable
40:39 - so basically we're telling C that we're
40:42 - going to print
40:43 - this particular text and percent s is
40:47 - just a placeholder that will uh Auto
40:50 - automatically be replaced by the value
40:53 - of our variable character name so we
40:56 - have the
40:59 - first instance of the character name
41:02 - and then right here we also have we also
41:08 - need to replace this with percent s and
41:10 - then add comma and then character name
41:13 - because we want to replace that with our
41:16 - value of our variable character name
41:18 - which is John
41:19 - and of course
41:22 - like here we also need to replace this
41:26 - with
41:28 - the actual value of our character age so
41:32 - what we can do here is just we can add
41:35 - percent D so percent T is also a
41:39 - placeholder for printing the integer
41:44 - um so this is like a teacher integer
41:48 - character age plus 35 and then percent D
41:50 - and then we're gonna add comma here
41:55 - so and then character H the same thing
41:59 - here
42:01 - character age
42:03 - and then we're going to replace this
42:05 - with percent d
42:08 - a placeholder for integer so if we try
42:10 - to run our program so let's do that
42:13 - build and run
42:14 - and
42:16 - we will we should have the
42:21 - so we have a process return so I think
42:23 - we have something where we have an error
42:27 - with our program so let's try to debug
42:29 - this
42:31 - so warning format s expects for uh
42:34 - argument type of character
42:37 - but argument two let's type in that's
42:41 - basically because we didn't add the
42:44 - uh square brackets there so
42:47 - build and run
42:49 - so there you go
42:50 - we have now the output there one other
42:54 - ones was a man named John he was 35
42:56 - years old he really liked the name John
43:00 - but did not like being 35 and of course
43:02 - every time you can if you want to change
43:04 - something with this story so for example
43:08 - instead of John we will say Michael
43:12 - and we can change also the age
43:16 - like 40
43:18 - and then
43:21 - um
43:22 - save that and then build and run
43:25 - so as you can see here we now have the
43:28 - updated story so Michael and then 40
43:32 - years old so the good thing about
43:34 - variable is that we can reuse this
43:37 - into our entire program so we have every
43:41 - time we have changes here all the
43:43 - variables or all the value
43:46 - should be reflected in our uh the rest
43:50 - on our program so in in our case we have
43:54 - updated all the values for our story and
43:58 - in this video guys we're gonna talk
43:59 - about variables and of course we will
44:02 - have a deeper
44:05 - um discussion on how to declare
44:07 - initialize and assign values
44:10 - to our variables
44:12 - so basically guys like most programming
44:15 - languages C uses in processes variables
44:18 - and in C
44:20 - variables are just like human readable
44:23 - names for the computers memory addresses
44:25 - used by a running program
44:28 - so basically guys the advantage of using
44:31 - variable is it is making our life easier
44:35 - to store
44:36 - read and change the data within the
44:40 - computer's memory
44:41 - by allowing the
44:44 - or by allowing us to associate easy to
44:46 - remember labels for that particular
44:48 - memory addresses
44:51 - so at first uh it is easier to imagine
44:55 - that variables
44:57 - are just placeholders for values
45:01 - much like in mathematics so you can
45:04 - think of a variable as a as being
45:07 - equivalent to its assigned value so for
45:10 - example if you have a variable that is I
45:13 - and then initialize or set equal to so
45:18 - for example four
45:20 - so by that you can say that I
45:25 - Plus
45:26 - 1 will be equal to
45:29 - 5 so there you go
45:32 - so
45:34 - now let's talk about how to declare a
45:39 - certain variable in RC program
45:41 - so basically all we have to do guys say
45:44 - for example if we try to declare an INT
45:48 - or as a for example in and then some
45:52 - number
45:55 - okay and then you have to end it with
45:58 - the semicolon that signifies that it is
46:01 - the end of this particular line
46:05 - so this statement
46:07 - tells the compiler to create a variable
46:11 - called some number and Associate it with
46:15 - a memory location on the computer
46:18 - so we are we're also telling the
46:20 - compiler that the type of data that will
46:22 - be stored at that address and in this
46:25 - case it is the int
46:27 - we have to remember also that in C we
46:30 - must specify the type of data that the
46:32 - variable will store because it will tell
46:35 - the computer
46:36 - like how much the total memory to set
46:38 - aside for that particular
46:41 - um variable or set of data something
46:43 - like that now you can also
46:46 - declare
46:49 - multi-variables in one statement just
46:51 - say for example in
46:53 - N1
46:55 - and then you have like N2 and then N3
46:59 - and then end it with a semicolon
47:03 - to signify that it is the end of this
47:06 - particular line so that's basically how
47:09 - to declare a variable so you can do it
47:12 - like this and if you have like multiple
47:14 - variables to declare you can just do it
47:17 - like this for as long as it is the same
47:19 - type okay so in N1 and then N2 and N3 so
47:24 - we're just telling the compiler to
47:26 - declare this particular variable and all
47:29 - of this variable
47:31 - um the type is int okay and of course
47:36 - you can
47:37 - assign a value to that particular
47:40 - variable later on using a statement like
47:42 - so for example
47:44 - sum
47:47 - number equals to three okay
47:51 - so basically this is the Declaration of
47:54 - our variable sum number but this this is
47:57 - the assigning of value so we're just
48:00 - basically assigning value three to our
48:03 - variable sum underscore
48:07 - number so the assignment of a value to a
48:10 - variable is called initialization so
48:12 - we're just basically initializing the
48:14 - value of this variable sum number equal
48:17 - to 3 or something like that and of
48:20 - course you can just maybe
48:23 - you can uh declare initialize and assign
48:28 - value
48:29 - at the or in one line or something in
48:34 - the same time so int age equals to
48:37 - for something like that so you can
48:39 - declare the value or the variable and
48:42 - then assign value to that particular
48:45 - valuable uh variable so okay and of
48:49 - course you can assign variables to the
48:53 - value of another variable so it means
48:56 - say for example N1 you can assign the
49:00 - value of H into this by just using the
49:03 - variable H something like that or you
49:05 - have to modify it with like add 10
49:09 - okay so age and then plus 10 or
49:13 - something like that and if you want to
49:15 - display this all you have to do is use
49:18 - the function printf
49:20 - and then you can
49:22 - uh
49:24 - say the age
49:27 - is percent D and as you can remember
49:30 - this is the placeholder
49:34 - for in so percent D and then you have to
49:37 - specify the variable so for example N1
49:42 - so let's try this and see me call into
49:45 - this so compile and run
49:49 - so the age is 14 so that's because the
49:54 - N1 now holds the value of H plus the
49:58 - value 10 so it makes it 14.
50:02 - okay and of course you can assign
50:05 - multiple variables to the same value
50:07 - with one assignment so so for example N1
50:10 - and 2 and N3 you can
50:13 - assign it like this
50:16 - so I'm just showing you guys how to
50:20 - assign values to this particular
50:22 - variable so say for example N1 equals N2
50:26 - equals N3 and this should equal to
50:31 - um eight okay so let's try this in
50:37 - and as you can see
50:39 - the value is eight
50:42 - okay but if you try to display also N2
50:45 - and entry it will get also the value
50:47 - eight so you can assign multiple
50:50 - variables to the same value with uh one
50:54 - statement so now I'm gonna talk about
50:56 - naming the variables because they're uh
51:00 - in naming
51:01 - or I mean in C we have to
51:05 - remember that there are naming rules
51:08 - that we have to follow
51:11 - so one of the rules
51:14 - that we have to remember is that
51:18 - um
51:19 - the variable name
51:23 - must not
51:25 - start with a digit so basically you can
51:30 - you cannot say in and then one age I
51:34 - cannot do that because as our general
51:37 - rule you cannot start your variable name
51:40 - with a digit okay
51:43 - and of course the second one is
51:47 - spaces
51:50 - not allowed
51:52 - in names so you can say in and then
51:57 - space my age
51:59 - you can't do that because that's not
52:01 - allowed in C
52:03 - and
52:04 - uh dollar sign not allowed
52:10 - so
52:12 - or any special characters for that
52:14 - matter so only
52:18 - letters
52:21 - digits and of course semicolon allowed
52:25 - in our variable name and of course the
52:29 - last one will be
52:31 - the
52:33 - Reserve keywords you can't use
52:39 - Reserve keywords
52:42 - so that's basically so for example you
52:45 - you want to name a variable in Main
52:49 - something like that you can't use this
52:51 - variable name because this is a reserved
52:54 - keyword meaning it is a primary keyword
52:57 - used by c as you can see here
53:01 - so now let's talk about the four major
53:05 - uh of four basic data types in C so
53:10 - there are four basic data types in C
53:12 - that's
53:12 - [Music]
53:13 - um
53:14 - int
53:16 - and then we have jar or characters and
53:21 - then float and then we have
53:23 - the
53:25 - double type okay so int is a type that
53:30 - stores integers in the form of whole
53:33 - numbers
53:35 - so any number that is whole so you can
53:39 - um
53:41 - say it like in age equals
53:45 - 10
53:48 - or maybe
53:51 - 11
53:54 - um 20
53:56 - for as long as it is a whole number so
54:00 - it should be a whole number between 2
54:04 - billion
54:06 - 147
54:07 - million
54:09 - 468 or 648 something
54:14 - so negative and
54:17 - that's inclusive
54:20 - um
54:21 - positive for a 22 billion
54:25 - um 147 million and 483
54:29 - 10647
54:31 - so that's the
54:33 - um
54:34 - length of the in if you want to use this
54:38 - particular
54:39 - type in so that's
54:42 - the in should be between that number or
54:44 - those numbers
54:46 - so
54:48 - the next one is the chart type so chart
54:51 - is just a series of character
54:54 - or a single character so the first of
54:57 - the way of declaring a character or a
55:01 - chart is you have to use star keyword
55:05 - and then so for example letter one
55:09 - equals a
55:11 - there you go
55:12 - you have to enclose it with single code
55:15 - and it signifies that it is a single
55:18 - character or something like that and of
55:21 - course you can have like a series of
55:24 - characters so for example like what we
55:27 - have previously Char and then character
55:30 - name
55:33 - and then you have to use the square
55:37 - brackets for that motor and
55:40 - so for example
55:43 - John okay
55:45 - so that's basically how to declare or
55:48 - how to use the Char keyword
55:52 - okay
55:53 - and the next one is float so basically
55:56 - float is a short for floating point
56:00 - and it Stores
56:03 - um representations of real numbers both
56:06 - integer and non-integer values
56:09 - and the way on how to declare that is by
56:13 - using
56:14 - the keyword float
56:19 - and then maybe you can
56:21 - um
56:22 - declare it as
56:24 - uh
56:28 - float pi equals 3.14
56:33 - something like that so you can declare
56:35 - your float values by using
56:37 - that keyword float and Then followed by
56:41 - the
56:43 - keyword or the variable name which is
56:46 - for example in this case D Pi which is
56:50 - three point
56:52 - fourteen okay and of course we can use
56:56 - also the
56:58 - data type
57:00 - double if you want
57:02 - so double is so for example
57:05 - um salary
57:07 - equals ten thousand
57:11 - 10 000 something like that
57:14 - and basically if you want to use
57:16 - normally all you have to do is use this
57:18 - keyword double and then the name of your
57:21 - variable name server in this case salary
57:23 - and then click there or initialize it
57:26 - with a double value something like that
57:30 - okay and
57:32 - if you have any doubts to the amount of
57:35 - memory I should actually used by any
57:37 - variable
57:38 - you can use the the size of operator to
57:42 - find out for sure
57:43 - so you can like uh use the
57:49 - keyword
57:51 - size of and then
57:55 - the variable age okay so so for example
58:01 - for that
58:03 - um you can get the actual amount of
58:06 - memory allocated in that particular
58:10 - variable and in this video guys we're
58:12 - gonna talk about the scope of a variable
58:16 - and of course we're going to talk about
58:18 - the operators in C and how we can use
58:21 - them so let's go ahead and talk about
58:24 - the scope of a variable so basically a
58:28 - scope is a region of the program and the
58:31 - scope of variable refers to the area of
58:34 - the program where the variables can be
58:36 - accessed after its declaration so
58:39 - basically in the Seer program we have
58:42 - like three different
58:45 - scope or different location that we can
58:48 - declare our variables so the first one
58:52 - is inside the function or a block so we
58:56 - have the first one will be the
59:00 - um local variable here we go
59:03 - we can declare
59:04 - a variable inside our function the
59:09 - second one the second one will be the
59:11 - global variable
59:13 - okay and of course we can also declare
59:18 - a variable inside the function parameter
59:22 - so
59:23 - function parameters
59:25 - okay so that's all the area that we can
59:29 - like declare the variables and set the
59:33 - values to it so but basically we do have
59:37 - like only the two that is most common
59:42 - although we are
59:43 - most of the time I'm setting the
59:47 - function parameters and declaring
59:50 - variables to it like almost every
59:53 - function but yeah the most common way of
59:57 - you know declaring a variable is the
60:00 - local and Global local and Global
60:03 - variable so again when we say Global or
60:08 - Global variable it is a
60:10 - a variable that is declared inside a
60:15 - particular function or a block of
60:17 - function so a variables that are
60:19 - declared within the function block and
60:21 - can be used only within the function is
60:24 - called local variable so this is how we
60:27 - can
60:29 - um implement this in our C program so
60:33 - for example in here we're going to
60:38 - declare by the way guys this is a
60:42 - um
60:43 - comment and the way to make comment in C
60:47 - program is by using the domain slash so
60:50 - this means this is this is a single line
60:52 - comment and of course we do have the
60:56 - um slash and then the asterisk and then
60:59 - asterisk and then forward slash so this
61:03 - is multi-line comment so you can like
61:06 - add comments in between these lines and
61:10 - uh this double double slash will be the
61:14 - single line comment okay so I hope you
61:17 - get the idea of this comments and
61:20 - basically Guys these comments can will
61:22 - not be interpreted by RC program
61:25 - okay so as I've said we're going to
61:28 - discuss or we're going to declare a
61:30 - local variable here
61:33 - local variable definition
61:37 - and initialization
61:40 - initialization right there I'm just
61:43 - going to remove this single line comment
61:45 - okay so in uh the the way to declare a
61:51 - variable in C is like in
61:56 - or this is the type of information that
61:59 - we want to save so in and then so for
62:03 - example the variable name is X and we
62:05 - can do it like this Y and then Z so
62:10 - basically what we're doing here is
62:12 - declaring three variables of in type
62:15 - okay so this is the variable definition
62:19 - and of course we can initialize it by
62:23 - saying x equals to 10.
62:27 - okay x equals to 10 and
62:31 - y equals
62:34 - X plus five
62:38 - and then we can also say Z equals
62:42 - y
62:44 - y variable plus 1 okay
62:48 - so that's how we can
62:50 - declare a variable and initialize the
62:54 - value into the variable so this is the
62:58 - definition
62:59 - in x y z and then of course the actual
63:03 - initialization initialization which is
63:06 - right here x equals to 10 Y equals X
63:10 - plus 5 and then Z equals y plus one okay
63:15 - so of course you can always print this
63:18 - so for example print
63:20 - F and then value of
63:25 - uh so for example
63:28 - Z equals
63:31 - percent D remember percent D is just the
63:35 - placeholder for our integer value so the
63:39 - value of Z equals the C variable
63:43 - okay and then save and of course you can
63:46 - compile
63:48 - or build and run your C program so let's
63:52 - try that
63:54 - okay so we need to add the same column
63:58 - at the end of the line
63:59 - to mark that it is ending in this
64:02 - particular line so build and run
64:07 - and there you go the value of Z equals
64:11 - 16 because we set the x equals to 10 and
64:15 - then d y equals to X plus 5 and of
64:19 - course z equals
64:21 - um y plus 1 that will result to 16 okay
64:26 - so that's how you declare and initialize
64:29 - a local variable now let's go on with
64:32 - the global variable or Global scope of
64:35 - of a variable so variables that are
64:39 - declared outside of a function can and
64:41 - can be accessed inside the function is
64:43 - called Global variables so so for
64:46 - example you want to declare a global
64:49 - variable all you have to do is before
64:52 - the in main function okay right here we
64:56 - can declare
64:58 - the
65:00 - global
65:02 - variable
65:04 - okay
65:06 - and we can declare it like int age
65:12 - and then we have like the semicolon at
65:15 - the end of The Declaration okay in age
65:18 - and then C McCollin so Global variable
65:23 - initialization so after the um
65:26 - after defining a local variable the
65:29 - system or the compiler
65:31 - won't initialize
65:34 - the value or any value to our local
65:37 - variable so we have to initialize it by
65:41 - by ourselves like this
65:44 - so if we try to define the variables
65:47 - right here it won't have any initialize
65:51 - or initial value so we have to declare
65:54 - it like this x equals to 10 Y equals X
65:58 - plus 5 Z equals uh y plus one but
66:03 - uh Global variables get initialized
66:06 - automatically by the computer
66:09 - um or as by the compiler and
66:13 - um so for example if we declare the the
66:16 - variable type as in then the initial
66:19 - default value will be zero okay remember
66:23 - you have to remember that so the
66:25 - difference between Global and local
66:27 - variable is
66:29 - um
66:30 - whenever we declare the variable in our
66:34 - local scope
66:36 - it won't get any initial value so we
66:39 - have to initialize it by ourselves but
66:42 - the global variable is initialized by
66:44 - default
66:45 - depending on the type of value that we
66:49 - have saving our variable so for example
66:51 - in in then it will default or initial
66:56 - default value will be zero and if
67:01 - char
67:02 - so for example chart t
67:05 - so the default value will be
67:08 - um single code and then backslash
67:11 - zero and then backslash I I mean single
67:15 - code
67:16 - um of course when we say float
67:21 - load m
67:23 - so the initial value of that is equal to
67:26 - zero
67:27 - when we say double the initial value of
67:32 - that is also zero
67:35 - and when we say pointer
67:41 - uh the initial value of this is equal to
67:44 - null okay
67:47 - so you have to remember that whenever
67:50 - you declare a global variable there is a
67:54 - default value for our variables okay so
67:57 - as I've said
67:59 - um Global variables can be accessed
68:01 - inside our main function or any function
68:03 - so because this is a global variable
68:06 - right in this video guys we're gonna
68:08 - talk about the input and output in C
68:12 - programming language before we dive in
68:14 - into
68:17 - operators and how we can use operators
68:19 - in C programming language so basically
68:22 - we can use the function printf to
68:25 - display something in our screen just
68:26 - like what we have before so printf
68:30 - and then we can say hello world
68:34 - okay and then
68:37 - we can build and run this program and we
68:40 - can get the hello world string right
68:42 - here
68:44 - um we use the printf function for that
68:47 - and now we're going to talk about the
68:51 - input because we're we're trying to
68:54 - focus on the input
68:56 - because we're already familiar with the
68:59 - output side of C programming so we have
69:03 - used the printf to output something in
69:06 - our screen and then of course in order
69:08 - for us to ask input from the user we're
69:12 - going to use the scanf function okay so
69:15 - the way to use
69:17 - um scan a function we can say here
69:21 - we can ask for a particular number so
69:23 - please
69:24 - enter a number okay and then we can add
69:30 - the Escape character here for a new line
69:33 - and we can declare a variable here so so
69:37 - for example in a
69:39 - and then we can
69:41 - um get
69:43 - the value from the user by using the
69:46 - scanf function and then
69:49 - format specifier for our in variable or
69:53 - in value
69:54 - and comma and then of course
69:59 - the and symbol and the name of our of
70:03 - our variable a so basically what this
70:06 - means is that for taking the address of
70:08 - variable a and then assign a value to
70:12 - that address
70:14 - um whatever the the user has inputted
70:16 - okay
70:17 - so and then we're going to end this with
70:20 - the semicolon and let's try this let's
70:23 - try to display
70:25 - the value that comes from the user Okay
70:30 - so
70:31 - number
70:34 - the number is
70:37 - um
70:39 - percent D format specifier for our uh in
70:44 - value and then comma and then and then
70:47 - the name of our variable which is a
70:49 - okay and then semicolon so I remember to
70:53 - end
70:54 - every time or end every line with a
70:59 - semicolon okay and then we can build and
71:02 - run this application
71:05 - so there you go uh the program tried uh
71:10 - is trying to prompt us to input a number
71:13 - so so for example number five
71:16 - so number five is or the number is colon
71:21 - and then the value five which is coming
71:23 - from the user itself okay and now we can
71:28 - actually
71:30 - um as two numbers in the same line
71:33 - by using also the scanf function so in
71:36 - here we have like ask for a single
71:39 - number but what we can do is we can ask
71:43 - for
71:45 - um two numbers just like
71:48 - please enter any
71:51 - two numbers
71:54 - okay
71:56 - and then we're just going to use the
71:58 - same function percent
72:00 - I scan F and then percent d
72:03 - percent another percent d
72:07 - because we're asking two numbers and
72:09 - then in here we can say
72:12 - uh and symbol and then the value or the
72:18 - variable B which we will declare here on
72:22 - the top
72:23 - okay B
72:25 - and then we can declare another variable
72:27 - C and we can add the values or the
72:32 - numbers coming from the user so
72:36 - um the number
72:39 - where the value you see or the variable
72:41 - C we can assign a value to that which is
72:46 - the total of the two numbers A and B so
72:51 - that will be C equals a plus b so what
72:57 - we're doing here is that we're assigned
73:00 - we're just assigning the value of the
73:02 - total of A and B into RC variable okay
73:06 - so the total
73:09 - the total number is
73:13 - and then percent D and of course the
73:16 - value of RC
73:18 - okay which is again the total of our
73:21 - variables A and B okay so save this and
73:26 - then we can uh build and run our
73:29 - application
73:30 - so please enter any two numbers
73:36 - for example
73:38 - [Music]
73:39 - um
73:41 - one and two
73:44 - so the total number is three okay so
73:49 - again
73:51 - like five and
73:55 - um
73:56 - three
73:59 - so the total is eight okay so as you can
74:03 - see we are getting the two numbers five
74:07 - and three and then we're displaying the
74:10 - total which is eight okay so basically
74:14 - that's how you can ask or you know input
74:18 - something into our program because our
74:21 - program right now is asking for a uh for
74:24 - an input from our user okay and that's
74:29 - where we can you know uh apply the
74:32 - operators
74:34 - in our C program and we have different
74:39 - operators or type of offer operators in
74:42 - C
74:43 - so C programming language offers various
74:46 - types of operators having different
74:49 - functioning capabilities so the first
74:52 - one is the
74:55 - arithmetic
74:58 - operators
75:00 - so we have used the addition operator
75:05 - right there by you know assigning the
75:07 - value of a plus b into C
75:10 - okay and then we also have the
75:13 - relational
75:16 - relational operators
75:21 - okay let me resize this so you can
75:24 - uh clearly see it arithmetic operators
75:28 - and then
75:31 - we have relational operators and the
75:34 - third one will be logical operators
75:38 - the fourth one is assignment operators
75:46 - and fifth one will be increment
75:52 - increment and decrement operators
75:57 - I'm just gonna list it here so you can
75:59 - see all the type of operators in RC
76:02 - programming language so decrement
76:05 - operators and then we also have the
76:08 - conditional
76:10 - conditional
76:12 - operator we also have bitwise
76:17 - operators and then we have special
76:23 - operators
76:24 - so these are all the types of operators
76:28 - that we can use inside our C programming
76:31 - language and of course the first one is
76:33 - arithmetic so arithmetic operators
76:36 - include
76:38 - um
76:39 - it includes addition
76:41 - of course of course the symbol for that
76:43 - is the Plus
76:45 - right and then we also have subtraction
76:49 - symbol for that is Dash
76:52 - we also have multiplication and we can
76:55 - use the asterisk for that to multiply
76:57 - two numbers in our inside RC program and
77:00 - then of course we do have the division
77:03 - which is the forward slash forward slash
77:06 - symbol and of course we have the modulo
77:11 - and we can use the percent sign
77:14 - to like operate by using modulus okay
77:19 - now
77:20 - uh let's talk about the operators or
77:23 - arithmetic operators so for example you
77:25 - know uh addition
77:28 - so
77:30 - we can also like
77:34 - um
77:34 - in b equals
77:38 - um
77:39 - A minus
77:42 - B
77:43 - okay and then we can like
77:47 - have
77:49 - of course not we cannot redeclare it uh
77:52 - the B because we already declared it
77:54 - there
77:55 - so we can say it D equals a minus B and
78:00 - then we can see
78:02 - uh e and then
78:05 - um a times
78:08 - B
78:10 - and of course we can have the division
78:14 - and we're going to have like
78:17 - um use the float or we can use the
78:20 - double for that double
78:23 - um f equals
78:25 - 1 or a divided by B okay so these are
78:29 - they are all arithmetic operators that
78:31 - we can use inside our C program so
78:35 - basically you can add you can subtract
78:38 - you can multiply and you can
78:43 - um divide two numbers inside your C
78:48 - program so
78:50 - um so for example we're going to test
78:52 - this
78:53 - okay
78:55 - so in the
78:59 - in the I equals a minus B
79:03 - okay so we can display
79:07 - the total number is percent D and then
79:11 - the difference
79:15 - of the two numbers
79:21 - the difference
79:23 - the difference is
79:27 - of course we're going to use the
79:29 - different
79:30 - or the variable
79:33 - D for the difference
79:35 - and then we can use another one
79:38 - which is the product
79:40 - the product
79:43 - is percent
79:47 - um d
79:49 - and the next one is the quotient
79:55 - okay the quotient of two numbers is of
80:00 - course the
80:01 - uh variable F and then we can use the
80:05 - format specifier which is LF
80:09 - okay and then of course the variable F
80:13 - something like this so let's run our
80:17 - program
80:19 - okay and we can enter two variables here
80:22 - or two numbers which is for example five
80:25 - and three
80:28 - okay so the difference or the total
80:31 - number is
80:33 - the total number is eight the difference
80:36 - is two
80:38 - and we need to format this so we can see
80:41 - clearly
80:42 - so we can add percent or I mean
80:45 - backslash n
80:48 - for each line
80:49 - the difference the quotient and of
80:52 - course
80:53 - we need to have the product
80:57 - the product is percent D and then of
81:01 - course
81:02 - the variable e okay so again run a
81:06 - program build and run and then five and
81:09 - then three
81:10 - so the total is eight or five plus three
81:14 - is eight and then the difference is five
81:17 - minus two or five minus three is two and
81:19 - then the product is
81:22 - um fifteen five five times three is
81:24 - fifteen and then the quotient is
81:26 - uh one okay so there's only num or
81:31 - there's only one three in the value five
81:35 - okay and in this video guys we're gonna
81:37 - talk about how to use increment and
81:41 - decrement operators in a c program and
81:44 - later on if you still have time we're
81:46 - going to discuss or we're going to start
81:49 - discussing relational operators and how
81:52 - we can use inside or how we can use it
81:55 - inside our C program okay so basically
81:58 - guys increment and decrement operators
82:01 - are
82:02 - um useful operators and it is generally
82:05 - used to minimize the calculation
82:08 - so
82:10 - um let me show you an example
82:12 - so in order to increment a value inside
82:15 - EC program we do it like this
82:19 - plus plus and then the name of the
82:22 - variable
82:23 - let me do it here so you can see it
82:27 - clearly plus plus and then the variable
82:30 - okay plus plus and then the variable so
82:33 - it means
82:34 - that
82:36 - x equals X Plus 1 okay remember plus
82:43 - plus X means x equals uh X plus one and
82:50 - of course in the same manner when we say
82:52 - minus minus X it means
82:56 - that x equals x minus one okay
83:03 - so this is how you increment and
83:05 - decrement a value inside a c program but
83:09 - there is also a way
83:13 - um it is called the post fix
83:16 - it is post fixed because we place the
83:20 - operator or the plus symbol after the
83:23 - variable X plus plus but it it also
83:26 - means that
83:28 - um
83:31 - x equals X Plus 1. and of course when
83:36 - you say x minus minus you still it means
83:40 - x equals x minus one okay so you get
83:44 - idea this is how you increment and
83:47 - decrement
83:49 - um inside a c program okay now
83:54 - there's a difference or a slight
83:56 - difference between having plus plus X
83:59 - instead of X plus plus
84:02 - or minus minus X instead of minus x
84:06 - minus minus okay so I'm going to show
84:09 - you that in a simple program so
84:12 - basically what we're going to do here is
84:14 - we will have a two variable
84:18 - so two variable which is a
84:21 - which is equal to 5 and then B which is
84:26 - equal to 5 also so I'm going to show you
84:29 - the effect of postfix
84:31 - and
84:33 - prefix okay
84:35 - so again this one is the prefix
84:41 - okay
84:42 - and then this is post fix okay
84:48 - so let's comment this out
84:51 - so I'm going to show you the effect of
84:54 - postfix and prefix in this particular
84:57 - example so in a equals 5 and b equals 5
85:01 - also and then
85:05 - um in here we set we set the
85:09 - value of a n
85:12 - B
85:14 - equal to 5. okay so basically what we
85:19 - can do right now is
85:23 - print
85:24 - and
85:26 - decrement
85:29 - decrement
85:31 - each time okay
85:34 - and then
85:36 - uh we can use the
85:39 - variable a for our post fix use a for
85:43 - postfix
85:46 - and use b or variable B for
85:51 - prefix okay
85:54 - so we can do this by
85:57 - using the printf method
86:00 - and then
86:02 - um
86:03 - uh backslash n
86:05 - and then percent d
86:08 - okay and then present D because we're
86:12 - over having to display or we we're going
86:14 - to display both the value of a and b
86:18 - okay
86:20 - so
86:21 - we're going to use the postfix here A
86:25 - minus minus and then
86:27 - this one is four
86:30 - minus minus B so again this is postfix
86:33 - and this is prefix and then they are Set
86:37 - uh or or the value of these two
86:39 - variables
86:40 - are set a
86:43 - equals to 5 and b equals to five and
86:46 - then we can end this with a semicolon
86:49 - and of course we can do the same
86:53 - we can do the same we can do another one
86:57 - and
86:59 - uh one two three four five
87:04 - six there are six lines so we we only
87:08 - need five and I'm going to show you
87:12 - and demonstrate what is the effect of
87:15 - both fix and prefix
87:17 - so
87:18 - for you to understand here we have
87:22 - taken the value of a
87:25 - and then of course the taken the value
87:27 - of B and then we apply Force fix and
87:30 - prefix so if you try to run this build
87:33 - and run
87:36 - as you can see
87:38 - the value is 5 4
87:42 - three two one and
87:46 - the value of B is 4 3 2 1 0. so it means
87:54 - that if we use the prefix
87:58 - okay which is the case here minus minus
88:01 - B so it automatically
88:05 - um
88:06 - uh decrease the value of our variable by
88:10 - one whereas here
88:13 - it displays the value of a still 5 and
88:17 - then later on four and then in the third
88:21 - line three
88:22 - the fourth line two and the fifth line
88:25 - is uh one okay and then of course in the
88:31 - prefix it decreases the value by one and
88:36 - then four three two one and zero okay so
88:40 - that's how you uh do it the increment
88:44 - and decrement in a c program
88:47 - and this is quite useful if
88:50 - you know if you are working with for
88:52 - Loops which we will discuss later on in
88:55 - this particular series okay now let's
88:58 - move on to the next operator which is
89:01 - the relational operators
89:04 - if we have increment and decrement we
89:07 - also have the relational operators
89:10 - relational operators
89:13 - so basically there are like one two
89:16 - three four five six
89:21 - um relational operators and
89:24 - the the first one is equal equal
89:28 - okay so basically we're just checking if
89:31 - something is equal to or a variable is
89:35 - equal to some variable okay
89:39 - is equal to and then we have the
89:43 - exclamation point and then equal
89:47 - so it means is not equal
89:53 - so basically by this we're just checking
89:57 - if a certain value is not equal to
90:00 - another value
90:02 - and then of course we do have
90:04 - D greater than
90:08 - okay greater than
90:10 - and then we have less than
90:14 - and then of course we have the
90:16 - greater than or equal to
90:19 - so greater than
90:21 - [Music]
90:22 - greater than or equal to
90:26 - and less than or equal to
90:34 - okay so basically
90:38 - um
90:39 - we're just checking the relationship or
90:42 - like the relation between two values if
90:46 - it is equal if it is not equal if it is
90:49 - greater than less than or these two
90:54 - comparison relational or relational
90:56 - operator
90:58 - um greater than or equal to or less than
91:00 - or equal to a certain value okay and
91:04 - then of course
91:06 - um we can use this especially in a if
91:09 - statement in and we're going to discuss
91:13 - that later on in this particular Series
91:17 - so basically if you want to check if
91:20 - something is equal or not equal or
91:24 - greater than then we can use the
91:26 - relational operators so we have to
91:28 - remember this this is one of the most
91:30 - important Concept in programming
91:34 - so the relational operators okay and in
91:38 - this video guys we're gonna discuss
91:39 - about the logical operators and of
91:44 - course the assignment operators so
91:47 - previously we have discussed this
91:48 - relational operators
91:51 - so we have like six relational operators
91:55 - the equal
91:56 - or checking if a value is equal to some
91:59 - value also and then not equal we have
92:02 - also greater than less than and then we
92:06 - also have greater than or equal to and
92:09 - we also have less than or equal to some
92:12 - value so this is quite useful guys if
92:15 - you are using the control statement in C
92:18 - say for example if statement and then
92:22 - you want to check if a certain value is
92:27 - um equal or not equal to some value so
92:30 - for example if
92:32 - um a variable X is equal equal to two so
92:36 - basically we're just checking if this
92:39 - particular variable or the value of this
92:41 - x is equal to 2 or we can reverse that
92:46 - we can check if this particular variable
92:48 - uh variable is not equal to 2 and of
92:51 - course you can use other
92:54 - um operation or operators like greater
92:57 - than
92:59 - um less than or we could also double
93:02 - check for greater than or equal to or
93:05 - less than or equal to so basically guys
93:07 - this operators is like just checking the
93:12 - relationship or if the certain value is
93:15 - greater than another value or it is
93:18 - equal to another value okay now let's
93:22 - move on to the next one which is the
93:24 - assignment operators so basically you
93:26 - guys there are a lot of assignment
93:28 - operators in C programming foreign
93:32 - language okay so the first one will be
93:35 - the equal sign okay this is one of the
93:39 - most common assignment operators in C
93:43 - programming so for example you want to
93:46 - assign
93:47 - so as I said guys this is for assignment
93:49 - operators
93:53 - assignment operators okay so basically
93:56 - this is useful if you want to set a
93:59 - value to a variable
94:01 - okay so for example X and then if you
94:03 - want to make this like five or the value
94:06 - of x is equal to 5 you can do that by
94:09 - using this particular assignment
94:10 - operator equal symbol okay that's easy
94:13 - and the second one is
94:16 - um
94:17 - plus equal so we have this also plus
94:21 - equal and then
94:23 - um it basically means guys that it
94:26 - increments the value and then assign it
94:29 - to the
94:31 - um
94:32 - the variable okay so for example you
94:35 - want to make this like X and then plus
94:39 - equal
94:40 - to
94:42 - two
94:43 - so basically let's try this
94:46 - um we can remove this code right here
94:49 - we can
94:51 - use the increment
94:54 - then assign
94:56 - so basically like we set a value for x
95:02 - we set it to five and then we can have
95:05 - it like X Plus and then equals to
95:10 - 3
95:11 - and then we can use the printf function
95:15 - and we can display the result further so
95:18 - so for example
95:21 - um the value
95:24 - is
95:26 - the
95:28 - format specifier and then of course
95:32 - the comma and then the X variable okay
95:37 - and then semicolon at the end of this
95:39 - line save this and then compile and
95:42 - build
95:42 - or build and run our application
95:46 - so basically
95:48 - as you can see here
95:50 - the value is eight so this is the doing
95:55 - of the plus equals to three so basically
96:00 - what it means that it add three
96:03 - to the variable X and then of course it
96:06 - the result of that is assigned to
96:09 - variable X also okay so this is
96:12 - basically uh just incrementing the value
96:14 - of our variable and of course we also
96:17 - have the x minus
96:21 - um equals to
96:22 - for example one okay so basically it is
96:26 - the complete opposite of this one
96:28 - because this is for incrementing
96:31 - and this is for decrement okay and of
96:35 - course we do have other operators for
96:38 - this particular topic which is the
96:41 - assignment operators
96:43 - we also have X for example times or
96:47 - multiply equal to two you can also do
96:51 - that
96:52 - and basically the division also okay
96:57 - you can do also the modular part
97:02 - modulo symbol and then equal and then so
97:06 - for example two and there are others for
97:10 - example
97:13 - [Music]
97:13 - um
97:14 - percent for I mean X and then
97:18 - and
97:21 - um
97:22 - and symbol and equal
97:24 - uh symbol and then of course the value
97:28 - that you want to assign so this is
97:30 - basically a bit uh bit wise and
97:34 - um assign assignment so we're not gonna
97:36 - use that for now so basically our our
97:39 - currently concerned is this operations
97:43 - we can have the increment
97:45 - uh the first one is equal and then of
97:48 - course the increment the decrement and
97:49 - then multiply multiplication then assign
97:52 - and we also have divide and assign we
97:55 - also have modulu and assign so that's
97:58 - basically how the assignment operators
98:01 - work so the last uh thing that we want
98:06 - to discuss here is all about The Logical
98:09 - operators so logical operators provides
98:13 - um three mechanisms that we can test
98:17 - more than one condition to make a
98:19 - particular decision so these are the
98:24 - um and and symbol so meaning it is
98:28 - logical and
98:31 - logical and
98:34 - let me show you that
98:36 - later on what uh what this means logical
98:40 - and and of course we also have this bar
98:43 - bar
98:45 - and this is uh
98:48 - logical operator or logical or
98:52 - and then of course we have the negation
98:55 - or not symbol okay
98:59 - so logical or and then this is
99:04 - iron and of course logical
99:06 - not okay so let me show you how this
99:09 - works this three logical operators now
99:13 - let's try to use the logical operators
99:15 - so for example the first one the logical
99:18 - and operator so we have here variable X
99:22 - which is set to 8 or the value is eight
99:25 - and then we can check if this particular
99:27 - value is or the 40 particular value
99:30 - variable X is
99:34 - um greater than five so we can do that
99:35 - by using the if statement and then X
99:39 - is it less than or greater than 5
99:43 - so if x is greater than 5 then we can
99:48 - display
99:51 - uh something in our in our screen or
99:54 - output something so we can do printf and
99:57 - of course the value is greater than
100:02 - greater than five okay so we could build
100:06 - and run this and see the output of our
100:09 - program and of course it's gonna display
100:12 - the value is greater than five okay so
100:16 - what if the value is 4.
100:20 - okay so obviously there will be no
100:24 - output because
100:27 - uh this the condition right here uh
100:30 - turns to be false Because the actual
100:32 - value of x is now uh four so no
100:37 - statement has been executed for this
100:39 - particular program now we can
100:42 - use logical operators and in this
100:46 - particular scenario so for example you
100:47 - want to check
100:48 - that the value of x should be
100:53 - greater than 5 but less than
100:57 - 10 okay so we could check if the
101:01 - variable X is greater than 5 but less
101:04 - than 10 and we can do that by uh using
101:09 - the logical and operator
101:12 - so the double Ampersand and x and then
101:16 - less than 10 okay we could do that and
101:19 - of course
101:21 - um if we try to
101:26 - um run this
101:30 - still there's no output because the
101:34 - value of x is
101:36 - 4. so we can try six here
101:39 - build and run our application
101:44 - so the value is greater than five
101:47 - and we should add here that the value
101:51 - is
101:53 - less than
101:55 - 10 okay
101:56 - build and run our application
101:59 - so the value is greater than 5 and it is
102:03 - less than 10. now what if it is
102:07 - 11.
102:08 - so obviously it's going to
102:11 - display nothing in our screen because
102:14 - the conditions of this particular
102:17 - statements is not met okay so that's how
102:20 - you can use the logical and operator and
102:23 - of course when we say and
102:28 - um
102:29 - basically it means that it should be the
102:32 - both of the statement or both of this
102:34 - condition should be true in order for
102:37 - this statement to be executed okay and
102:41 - you can also use the logical operator or
102:45 - in this particular scenario
102:49 - so it doesn't matter if the
102:53 - um
102:54 - X is greater than 5 or X is less than
102:57 - 10.
102:59 - um it should you know execute the
103:01 - statement that we have here okay so for
103:04 - example you run this
103:09 - okay so we have the value is greater
103:11 - than 5 and less than 10. and we can try
103:17 - like
103:19 - 20 or maybe uh use the value 20 in RX so
103:24 - let's try this
103:26 - save and then build and run
103:33 - okay and as you can see we still have or
103:36 - we still get the output the value is
103:38 - greater than 5 and less than 10 that's
103:41 - because this particular statement here
103:44 - returns true so it doesn't matter if
103:46 - this particular statement here is false
103:49 - so as long as there is a true
103:53 - returns either of this statement so
103:56 - there is there should be statement
103:58 - printed or executed inside this
104:01 - particular if statement in this video
104:04 - guys I'm going to show you and teach you
104:06 - how to use
104:08 - um if statements in C programming
104:10 - language
104:11 - so I think from the previous video we
104:13 - have like touched the basic usage of if
104:17 - statement so we have tried if statement
104:20 - with the logical operators
104:23 - so the end the
104:26 - relational operators the you know
104:30 - greater than less than
104:32 - or less than or equal to another
104:34 - relational operators okay but in this
104:38 - particular video guys I'm going to go
104:40 - deeper with the if statement and how we
104:43 - can apply
104:45 - um if statement in RCA program and of
104:48 - course guys I want to show you the
104:50 - Practical approach on how to uh how you
104:52 - can Implement if statement in a c
104:55 - program so basically guys if statements
104:58 - in C is used to control the program flow
105:02 - based on some conditions so it is used
105:05 - to execute some statement code block if
105:08 - the expression is evaluated to true so
105:12 - otherwise it will get skipped and we
105:15 - will try to implement a simple or basic
105:19 - program
105:21 - utilizing the if statement so actually
105:23 - guys there are four different types of
105:25 - if statement in C so these are you know
105:29 - simple if statement we also have if else
105:33 - statement we also have nested if else
105:37 - statement and we also have
105:40 - else if ladder in C programming language
105:44 - but for now let's just focus on the
105:47 - simple if statement so basically the
105:51 - structure of if statement is just like
105:54 - this
105:57 - so we have this particular
106:00 - format or basic format of if statement
106:03 - in C we have if keyword and then open
106:07 - and close parenthesis and then inside of
106:10 - this open and close parenthesis is the
106:14 - test expression
106:16 - okay or the condition
106:19 - and then of course uh we should you know
106:23 - add curly braces open and close curly
106:26 - braces and then of course the statement
106:29 - to execute whenever the test expression
106:32 - or condition is met or in this
106:35 - particular case if this particular
106:37 - condition is evaluated into true okay so
106:43 - now let's try to implement a practical
106:46 - approach of an if statement
106:48 - so say for example you are developing a
106:51 - program
106:52 - or a software for a particular bar
106:56 - okay and then that particular bar only
106:59 - accepts
107:01 - customers that are over 18 years old and
107:04 - those customers that are below 18 years
107:07 - old are are not allowed to enter the
107:10 - establishment or the bar itself and we
107:12 - can create a very simple program for
107:14 - that and our program will accept the age
107:17 - of the customer and then it will
107:20 - evaluate the age and it will display a
107:23 - message based on that particular age so
107:26 - the first thing that we're going to
107:28 - declare here is the variable age which
107:31 - has the type of int and of course we
107:35 - need to display something on to the
107:37 - screen that says to input a number that
107:41 - pertains to the age of the customer so
107:45 - in order for us to do that we need to
107:48 - use the method printf and then in here
107:52 - we can say enter the customers
107:57 - the customer or enter the age of the
108:02 - customer
108:03 - okay then we can add colon and then
108:06 - space so we can have like the space for
108:09 - our
108:10 - um input page
108:12 - now we have this output and we need
108:15 - something
108:17 - to accept a number from our user so we
108:21 - can use the method I think we already
108:24 - used this before the scan F right so in
108:29 - here we need to specify the format
108:32 - specifier for our age which is
108:35 - um
108:36 - uh percent d
108:39 - with which pertains to the values that
108:43 - are of type in okay and then of course
108:47 - after this we need to add the comma and
108:52 - of course the variable age and of course
108:55 - we need to end this line with AC
108:57 - McCollin but the proper way of doing
109:00 - this is to add an a person one person
109:04 - symbol
109:05 - okay so basically what we're doing here
109:07 - is just we're getting the address of age
109:10 - and assigned value of that particular
109:13 - address
109:14 - uh using the value that has been
109:17 - inputted by the user okay and of course
109:21 - we can now apply our if statement with
109:24 - this particular age so the first thing
109:27 - that we're going to check if the age is
109:32 - greater than 18 okay so we can just copy
109:35 - and paste this age variable and then we
109:39 - can add the
109:42 - um logical operator greater than
109:45 - so basically what we're doing here is to
109:48 - check if the age is greater than 18 okay
109:53 - so there you go and then of course the
109:56 - statements
109:59 - statements to execute
110:02 - if condition is
110:05 - true okay so basically what we can do
110:09 - here is to
110:11 - screen
110:13 - um with the age
110:16 - the age
110:19 - is greater
110:24 - than 18
110:26 - okay and basically it pre uh it says or
110:30 - it means that the customer can enter the
110:33 - premises or the bar itself okay and of
110:37 - course we can also check if
110:40 - um
110:41 - the user or the age of the customer
110:45 - is equal to 18. okay we could also check
110:49 - that by using the logical operator
110:52 - or the relational operator equals n uh
110:56 - equal equal symbol so this is just
110:59 - um
111:00 - testing the age if it is equal to the
111:03 - value 18. so the first one is for
111:06 - testing the value H if it is greater
111:09 - than 18 in the second one if it is equal
111:11 - to 18 and then of course we need to
111:14 - display the corresponding
111:17 - output so the age is
111:20 - equal to
111:24 - 18 okay and then of course we can add
111:27 - another one for this
111:29 - so we can just copy and paste for this
111:32 - one we need to check if the age is less
111:36 - than 18. so this is another logical
111:40 - operator that we have discussed from the
111:43 - previous videos okay
111:44 - so greater than equal and then of course
111:47 - less than uh 18 and of course we can
111:52 - output here like
111:54 - minor is not allowed okay that's because
111:59 - the age of the customer is less than 18.
112:04 - and the general rule when it comes to
112:07 - Bar as minors are not allowed so
112:10 - basically what we're doing here is very
112:12 - simple program for that particular bar
112:16 - okay now we can try to run our program
112:18 - we can just you know build
112:23 - okay and then we can run our program
112:27 - and we have we can enter the age of the
112:31 - customer so for example the age of the
112:33 - customer is
112:34 - 18.
112:36 - so the age is equal to 18 okay so as you
112:42 - can see this is the only
112:44 - output or this uh this is the only
112:47 - statement that has been executed the age
112:49 - equal to 18 because the other one
112:53 - uh the other condition is not being met
112:56 - or not evaluated to True okay because
113:01 - uh their age is
113:03 - equal to 18 and of course this is
113:09 - um greater than 18 and of course this is
113:11 - less than 18. so we can try another one
113:15 - so for example the age is
113:19 - um 19.
113:21 - so the age is greater than 18 and of
113:25 - course
113:26 - again this is the only uh statement that
113:30 - has been executed because it uh the
113:33 - condition
113:34 - evaluated to true this is evaluated to
113:39 - false because the age is not equal to 18
113:42 - and this one is evaluated to false also
113:46 - because uh the age is not less than 18
113:50 - okay so you can try this one more time
113:54 - to check for the for example the age of
113:58 - the customer is
114:01 - 16.
114:04 - so the output is the minor is not
114:08 - allowed okay that's the practical way of
114:11 - using IF statement in C programming
114:14 - language in this video guys we're gonna
114:16 - talk about if else statements and of
114:19 - course we're going to discuss also the
114:23 - nested if else statements in C
114:25 - programming language now from the
114:28 - previous video we have created a simple
114:31 - application so we have assumed to create
114:33 - an application for a bar or
114:38 - establishment and then that particular
114:40 - program will ask for the age of the
114:43 - customer that is trying to enter the
114:46 - premises of the bar and of course we
114:50 - asked for the age right and we check for
114:53 - the age if it is greater than 18 then we
114:56 - display the age is greater than 18 and
114:59 - if the age is equal to 18 and we also
115:03 - displayed the age is equal to 18 but in
115:07 - case that the age is less than 18 then
115:10 - we print that minor is not allowed so
115:14 - basically guys this is a good
115:17 - um program but we can you know upgrade
115:20 - this this is not uh when it comes to
115:23 - code readability and
115:27 - um gold maintainability this is not a
115:30 - good practice when it comes to
115:33 - um you know checking a variable or a
115:35 - certain value of a variable so now let's
115:38 - just remove this lines
115:41 - okay
115:43 - and of course we have this first
115:45 - condition if and then we check for the
115:50 - age of the customer which is you know
115:53 - 18. so if the age is greater than 18 we
115:56 - display
115:58 - um the age is greater than eight and so
116:00 - I as I've said we can take this further
116:03 - by
116:04 - adding else statement right here so
116:07 - basically the if else statements in C is
116:12 - also used to control the program flow
116:16 - based on some condition and the only
116:18 - difference is it used to execute some
116:23 - statement code block
116:25 - if the expression is evaluated to true
116:28 - so it it will try to execute this
116:31 - particular
116:33 - um statement if this particular
116:34 - condition is true otherwise it will try
116:37 - to execute the statement
116:40 - of this particular
116:42 - else code block okay so in here we can
116:47 - try to display
116:49 - print f
116:51 - the age
116:55 - is
116:57 - less than
116:59 - or equal to 18 okay so as you can see
117:05 - um if we try to
117:07 - evaluate this so if age is greater than
117:11 - 18 so for example you have like 19 or
117:15 - you inputted 19 then of course
117:18 - automatically it will execute the
117:21 - statement that the age is greater than
117:23 - 18 right now basically if we try to
117:26 - input 18 so 18 is not greater than 18.
117:31 - so it will try to
117:34 - um
117:35 - execute the code block or the code or
117:39 - the statements inside this else code
117:41 - block because the condition
117:44 - right here returns false okay because
117:50 - um 18 is not greater than 18 and uh
117:55 - there you go it returns false okay now
117:59 - we can also add another condition right
118:02 - here so for example we want to check if
118:04 - the age is equal to 18 okay we can check
118:11 - if the age is greater than 18 and of
118:13 - course we can also check if the user or
118:16 - the age is equal to 15 and then
118:19 - otherwise it's it is less than 18
118:22 - and uh we can add another else statement
118:27 - right here but for now let's just you
118:29 - know add the
118:30 - another condition or condition
118:33 - evaluation
118:35 - test expression
118:37 - if the user or the age is equal to 18.
118:43 - okay so basically this particular
118:46 - statement
118:48 - um if this particular condition right
118:50 - here is false then it will try to
118:53 - evaluate
118:54 - one more time with this particular
118:56 - condition
118:57 - is the age equal to 18 so if that
119:01 - particular age is equal to 18 then we
119:03 - can display
119:04 - the age is equal to
119:09 - 18 right there
119:12 - but in case if the age is less than 18
119:15 - we can also
119:17 - um
119:19 - add the L statement right here
119:23 - and we can display that the age is less
119:29 - than 18 okay so as you can see we have
119:33 - you know implemented a practical
119:35 - implementation of if else statement and
119:38 - we can add you know the first if
119:41 - condition and then we can add another
119:44 - condition else if
119:47 - and then we can test this condition
119:49 - right here otherwise if this two
119:52 - conditions are returning false then we
119:55 - can you know execute the statements in
119:59 - this particular else block okay so we
120:02 - can try this we can run our program
120:06 - uh build and run
120:11 - so let's try it first the possibilities
120:15 - so for example the customer or the enter
120:18 - the age of customer for example 25
120:21 - so the age is greater than 18 so let's
120:25 - try to run uh this once again
120:29 - and you can try to input 18.
120:34 - so the age is equal to 18 okay so this
120:39 - particular condition right here returns
120:42 - true
120:43 - now we can also try to
120:46 - input
120:47 - the value which is you know less than 18
120:50 - so for example 16 and then of course the
120:53 - age is less than 18 okay so as you can
120:57 - see in this particular example there
120:59 - will be only one
121:02 - um block of code that will be executed
121:05 - so for example this one if this will
121:07 - return true the age is greater than 18
121:11 - then it will execute this statement
121:13 - right here or inside this ifs uh block
121:16 - then it will ignore the other
121:19 - um like the else if and the else now if
121:21 - it will return false then it will try to
121:25 - evaluate the expression inside here and
121:29 - if it is true or it will turn true then
121:32 - it will execute this statement and
121:34 - ignore the else
121:36 - if
121:38 - all of this statements or conditions
121:41 - here real return false then the else
121:45 - statement will be executed
121:48 - okay and it will you know try to print
121:51 - the age is less than 18. now there are
121:55 - cases that we need to
121:58 - check also for example inside this if
122:02 - statement we want to check if
122:06 - um the age is less than 25 okay less
122:10 - than 25
122:12 - uh although we have like the H is
122:14 - greater than 18 we want to check also if
122:17 - the age is
122:19 - um less than 25 so we could add also
122:23 - um
122:24 - if statement right here so this is like
122:26 - what we call nested
122:29 - if else
122:31 - statements
122:35 - okay nested if else statement so we can
122:39 - also check here if age is less than
122:43 - 25 okay and then we can display here
122:49 - print f
122:51 - and then
122:52 - the age
122:54 - is
122:57 - um
122:57 - greater than
123:01 - 18
123:03 - but less than
123:06 - 20
123:08 - .5 right
123:10 - less than 25
123:12 - and of course we can also add else
123:15 - statement here or else if like for
123:17 - example else if
123:20 - the age is
123:23 - greater than 25
123:28 - then we can say here print f
123:32 - the age is greater than
123:37 - 18 and three third and 25 so there are
123:43 - cases that you want to check
123:45 - this you know
123:48 - um if you want to like in the future you
123:51 - want to implement an application and you
123:55 - will try to check the values and
123:59 - somewhere in your code you need to check
124:01 - uh like the value in here and also you
124:06 - could also check if the value is less
124:08 - than 25 or greater than 25 so it is very
124:13 - useful when it comes to programming this
124:16 - particular nested if else statement so
124:18 - let's try to run this and before that
124:20 - I'm just going to add a uh backslash n
124:24 - right here
124:26 - so that we will have a new line
124:30 - after this particular code execution so
124:34 - let's try to build and run our app first
124:38 - in
124:40 - try to input a value that is over 18 so
124:45 - for example 23
124:48 - so the H is greater than 18 and there's
124:52 - another statement that has been executed
124:54 - right here the H is greater than 18 but
124:57 - less than 25 we can also you know run
125:01 - this once again and input 26
125:06 - so the age is greater than 18 and
125:09 - there's also a statement here the H is
125:11 - greater than 18 and
125:15 - greater than 25 okay and that's how you
125:20 - use the if else statement or
125:24 - um yeah if else statements in C and then
125:27 - of course if you have like many
125:29 - conditions that you want to check so you
125:31 - can also add
125:32 - another conditions right here
125:36 - okay and then another condition
125:41 - and
125:44 - um otherwise if there's if these
125:46 - conditions are not met then you can uh
125:49 - display or execute the statement inside
125:52 - this
125:53 - else code block okay now uh the nested
125:58 - if else statement requires only one if
126:02 - okay so you can use like uh two ifs here
126:07 - because it will try to separate the
126:11 - chain of if else if you use another if
126:15 - so what you can do is uh one if and then
126:19 - as if else if and also one else
126:24 - statement so it doesn't matter how many
126:27 - else if statement that you can add okay
126:31 - for as long as it is like has one if and
126:35 - has one else statement okay so and in
126:40 - this video guys we're going to do learn
126:43 - how to use ternary operators in C
126:47 - so basically guys the ternary operator
126:50 - is used to execute code based on the
126:54 - result of a binary condition
126:57 - so when we say ternary operators it is
127:00 - used to execute
127:02 - um code based on binary condition okay
127:07 - and it takes in a binary condition as
127:10 - input and which makes it similar to an
127:14 - if else control flow block so so for
127:17 - example guys from our previous tutorial
127:21 - we have discussed how to use if else
127:25 - statement okay
127:29 - so we have this kind of structure so for
127:31 - example we want to use this structure or
127:35 - code
127:35 - to get the maximum uh
127:39 - two values or two
127:42 - variables
127:45 - so if you want to like return the max
127:48 - value all you have to do is compare the
127:51 - two
127:52 - variable C and B
127:55 - so so for example if a is greater than b
127:59 - then of course a
128:02 - or Max will be assigned to a otherwise
128:07 - the max number will be
128:10 - the value of variable B Okay so
128:16 - the deternary operator guys instead of
128:19 - using IF else like this this is too long
128:23 - for a simple you know checking of value
128:27 - condition so the binary or ternary
128:31 - operator
128:32 - uses only single line or we can use the
128:35 - ternary operators in a single line and
128:38 - it returns a value so behaving uh
128:42 - similar to a function
128:44 - okay so let's try to see the syntax of
128:49 - the ternary operators in C so basically
128:52 - the syntax is like this
128:54 - but um
128:56 - result and then binary condition and
128:59 - then you have to add theme question mark
129:02 - and then you have like the value when
129:06 - the binary condition is true otherwise
129:10 - the value of uh you know
129:14 - value to be returned if the binary
129:17 - condition is false so we have to take
129:22 - note guys the deternary cannot be used
129:25 - to execute code so it must be either
129:28 - return in the function
129:32 - or set equal to a variable so you cannot
129:36 - use this like something like this
129:39 - so you cannot leave your ternary
129:40 - operator like this so it should be equal
129:44 - to or B set equal to a variable
129:47 - okay something like this or you can use
129:50 - it as a return in a particular function
129:54 - okay so let's try to implement a ternary
130:00 - operator
130:02 - so for example you want to check the max
130:05 - value so the long version is this if a
130:09 - is greater than b then assign the value
130:13 - of a to d Max and then otherwise assign
130:17 - the value of B to the max variable so as
130:21 - I've said
130:22 - we can you know make this a little
130:25 - shorter by using the ternary operators
130:28 - so in order for us to do that we just
130:30 - need to
130:32 - um
130:33 - so for example get the variable Max and
130:36 - then the binary condition
130:38 - is a
130:41 - is a greater than b
130:43 - okay
130:44 - so we can add the question mark there
130:48 - you go
130:49 - question mark and then the value to be
130:53 - returned if the binary condition is true
130:57 - so of course if a is greater than b then
131:01 - the max value is a right
131:05 - otherwise
131:08 - the value is b or the return or the max
131:13 - value is the value of variable b as I've
131:18 - said guys
131:19 - this is the
131:23 - um explanation of conditional or ternary
131:26 - operators in C
131:29 - so we have this variable and then we
131:33 - have the expression or the condition and
131:36 - then you have to add the question mark
131:38 - and then the value if true
131:41 - so it will return
131:43 - the resultant value into the variable
131:46 - and it will assign this value to this
131:49 - variable otherwise
131:51 - if the expression is false then the
131:54 - resultant value of
131:56 - uh you know the false then it will be
132:00 - returned as the value of the variable
132:01 - that we have added okay so we can check
132:05 - this right now we can remove this this
132:07 - is the long version
132:12 - and we can try to print this
132:16 - display the result
132:18 - the max
132:20 - value s and then format specifier which
132:25 - is we're using in so percent B and then
132:29 - of course the maps variable okay
132:35 - uh let's just remove this
132:41 - so clean and build or build and run our
132:44 - application
132:48 - so let's try this uh
132:52 - oh
132:54 - um we don't have like the value for a
132:59 - and b so let's try to assign values to
133:03 - this variable so for example a equals
133:07 - 15 and B was 16.
133:12 - okay so clean and build our application
133:17 - and um we'll try to
133:21 - all right
133:22 - get the output
133:25 - so the max value is 16 okay so we have
133:32 - here uh the B variable
133:35 - 16. so that's the
133:38 - value of Max variable that is being
133:42 - assigned because this particular
133:45 - condition returns false so that's why
133:49 - the value of B variable is being
133:51 - assigned to the max variable so we can
133:55 - also try this with the other
134:00 - um you know if the a is greater than b
134:02 - so like
134:04 - 20
134:06 - so obviously a is greater than b so
134:09 - let's try this
134:11 - exit this for now
134:14 - and then build and run our application
134:20 - so let's try this
134:23 - so there you go the max value is 20.
134:27 - so this condition
134:31 - um returns true
134:32 - because a which is the value is 20.
134:37 - and that's greater than b because B is
134:42 - the value is 16. so it Returns the value
134:46 - of a so like this
134:49 - so it ignores the second part
134:53 - which is the B because it returns true
134:56 - and then of course after
134:59 - after evaluation
135:01 - the value of a is being assigned to the
135:04 - max variable that we have here so it
135:07 - printed out that the max value is
135:10 - percent D and then which is 20. so let's
135:14 - try let's try this one more time
135:20 - just so you can see the output so the
135:22 - max value is 20. okay so this is quite
135:26 - useful if we only want to
135:30 - um
135:31 - check a certain value so like if you're
135:35 - planning to use if else then you might
135:38 - want to use the ternary operators which
135:41 - is like this
135:42 - so it will just save you
135:45 - um time it will save you of code space
135:49 - and I think it's clear
135:53 - rather than using the F and else
135:57 - statement so this is pretty
135:59 - straightforward when it comes to
136:02 - checking the value and assigning the
136:03 - value to the max variable okay so you
136:08 - just have to remember that it cannot be
136:10 - used to execute code you just have to
136:14 - set this equal to a variable or you can
136:17 - use this as a return value of a function
136:21 - okay and in this video guys we're gonna
136:24 - talk about the C go to statement okay so
136:29 - so far we have discussed the if
136:31 - statements and how it is used in C to
136:35 - control statement execution based on
136:38 - some conditions or decisions now the
136:42 - flow of execution also depends on other
136:44 - statements which are not based on
136:47 - conditions that can you know control the
136:50 - flow
136:50 - and of course C supports a unique form
136:54 - of a statement that is you know go to go
136:57 - to statement uh which is used to Branch
137:00 - unconditionally within a program from
137:03 - one point to another Point inside our C
137:07 - program so although this is not a good
137:09 - habit to use you know go to statement in
137:11 - C but there may be some situations where
137:15 - we can use
137:17 - the go to statement and it might be you
137:20 - know desirable to to make use of the
137:23 - capability of the go-to statement so the
137:27 - go-to statement is used by programmers
137:30 - to you know change the sequence of
137:32 - execution of EC program by Shifting the
137:37 - control to a different part of the same
137:40 - program so I think I have mentioned this
137:43 - before in our you know tutorial series
137:46 - that the execution of a c program is
137:49 - sequential
137:50 - you know uh like if you have statements
137:53 - from line six here seven and eight and
137:57 - nine so it will try to execute from line
138:00 - six seven eight nine ten sequentially
138:05 - okay but you know we have this uh go to
138:10 - statement to control that particular
138:11 - flow we can go to the a certain point of
138:15 - our program by using the go to statement
138:17 - so basically this basic syntax of go to
138:20 - statement is like this
138:24 - we have this particular syntax of our
138:28 - go-to statement
138:30 - so we have this keyword go to and
138:33 - label okay and then of course we need to
138:37 - add label at some point in our program
138:39 - okay and of course the long version of
138:44 - this syntax is like this
138:46 - let me show you real quick
138:48 - so we have like a few lines and then we
138:53 - have the label and then we have the
138:56 - statement
138:58 - okay and every time the program meets or
139:02 - found the go to statement so it will try
139:06 - to find the label that has been
139:08 - specified in this particular line so go
139:10 - to label and then it will skip the lines
139:13 - or statements between or other you know
139:17 - other statements and it will go directly
139:19 - to the label and it will execute the
139:24 - statements below the label in our C
139:28 - program now we can
139:31 - implement this
139:33 - and of course guys it can also be used
139:37 - to this is a forward uh jump in our
139:41 - program because we have specified the go
139:44 - to statement and then it forwarded to
139:46 - the label uh statements below
139:49 - okay but it could be also the backward
139:52 - jump of a program say for example after
139:56 - excuse execution of some lines
140:00 - it will jump into this particular
140:03 - um label so after execution it will jump
140:06 - to this label that's why it is called
140:08 - the backward jump in our C program so
140:12 - for example if you have like no other
140:14 - label available here so it will jump the
140:18 - program execution from here and then go
140:20 - back to line nine so that's how the
140:23 - backward jump inside our C program so
140:27 - let me just clarify this
140:30 - uh it is called backward if you know the
140:34 - go to label is here and then it will try
140:37 - to jump on top or the lines before that
140:41 - I'll go to label and it will uh execute
140:45 - all the statements under this okay and
140:48 - it is called forward jump if the label
140:51 - is here
140:53 - so
140:54 - after this
140:57 - or after execution of this line it will
140:59 - try to go to this particular
141:03 - um line label and it will execute the
141:06 - statements under this partic particular
141:09 - label so now let's try this and let's
141:12 - just build a practical or simple
141:16 - implementation of this go to statement
141:20 - so let's just remove this
141:23 - and then we can try to ask for an age
141:26 - just like what we have from the previous
141:28 - video and then we can try to add the
141:32 - label so for example G and this will be
141:36 - the label name okay and then of course
141:39 - we have a statement under this
141:42 - particular label
141:43 - so printf
141:45 - so for example we will try to execute
141:49 - this
141:50 - if the
141:52 - H is 18 so like you are
141:57 - eligible or something okay
142:01 - then we can try to add the new line here
142:05 - and then of course we can try to
142:08 - add another label
142:09 - so another label name and we can print
142:16 - um you are not eligible okay something
142:19 - like this
142:21 - and we can also add the new line here
142:27 - okay
142:29 - and then of course we do have the
142:32 - statement to ask for the age so enter
142:36 - your age okay and then semicolon
142:41 - and then we can use the scan F function
142:44 - to get the actual value from the user so
142:48 - percent D which is the formal specifier
142:51 - again and then one percent and the
142:54 - variable
142:55 - name which is age and of course we can
142:58 - have the condition right here like
143:01 - um if
143:03 - the variable age is greater than or
143:05 - equal to 18.
143:07 - then
143:09 - um you can use the statement go to
143:13 - the label G okay and
143:17 - else
143:19 - we can go to the label s okay now as you
143:25 - can probably observe here we are using
143:28 - IF else but we don't have the curly
143:30 - braces right so you can do the if and
143:34 - else statement like this without the
143:36 - curly braces because we don't we only
143:39 - have one line in this particular or
143:41 - after the condition we have only one
143:45 - line and also uh else we only have one
143:49 - line but if you have like
143:51 - five lines here you have to add the
143:53 - curly braces okay so in C programming it
143:58 - like understood if there's like one line
144:01 - to execute so there's no need to use the
144:03 - curly braces okay now we can
144:07 - try to run this and see how it works so
144:11 - for example build and run our
144:14 - application and
144:17 - try to evaluate
144:19 - and see how this particular program
144:22 - works so basically it
144:26 - uh executed line G and line S right so
144:31 - you are eligible and you are not
144:33 - eligible now if we try to go or input
144:36 - number 18 right here
144:39 - so it will try to uh
144:44 - execute again the line 9 10
144:49 - 11
144:51 - and of course it's gonna you know ask
144:54 - for the age again right so it starts
144:58 - from this particular line 9 which is the
145:00 - label uh G because we have specified if
145:04 - the H is greater than or equal to 18
145:07 - then it will try to go to label G now if
145:11 - you try to go to or input 16
145:16 - so it will try to go to label or yeah
145:20 - line 11 which has the label s right
145:25 - and it will just display you are not
145:28 - eligible and it it did not execute the
145:32 - statement from line nine
145:35 - or line 10 it directly I'll go to 11. uh
145:41 - line or line 11 which has the label s
145:44 - and then it printed out the
145:47 - statement you are not eligible and also
145:50 - uh it also adds the or I mean asked the
145:55 - H again and then it asks for the
145:59 - uh input from the user okay we can try
146:03 - this one more time so for example 15
146:06 - so it's going to execute all the lines
146:11 - starting from line 11 with the label
146:16 - name s okay so guys
146:21 - um as I've mentioned uh earlier
146:24 - that the the go to statement is a unique
146:28 - form of statement okay and sometimes uh
146:32 - it is not advisable to use go to
146:34 - statement in your C program but there
146:36 - are situations or conditions that you
146:39 - might want to use this particular go to
146:41 - statement so for example
146:44 - um
146:45 - if the you if you want to skip some of
146:49 - the lines in your program so let's try
146:52 - that
146:53 - okay so like for example you have
146:58 - statements
147:00 - like this
147:03 - printf
147:05 - and then
147:07 - this is
147:10 - the end of the program okay
147:15 - and then
147:18 - um we can go like
147:23 - instead of using S we can add a label
147:26 - here e
147:27 - and then it will execute you know
147:32 - um e instead of s
147:35 - so basically
147:37 - after this condition returns false then
147:42 - it will execute this and it will call
147:44 - the label e and then execute that this
147:48 - is the end of our program so let's try
147:51 - that
147:52 - execute or exit our program first and
147:55 - then build and run
148:01 - so let's try to input first 18
148:06 - so it's going to
148:08 - you know
148:10 - um
148:10 - execute from line nine
148:13 - until line 15 and then if we try to
148:17 - input 10 then it's gonna say this is the
148:21 - end of the program okay so I think
148:26 - um that's all there is to it in this
148:29 - tutorial guys and I hope that's clear on
148:31 - how to use the go to statement in C so
148:35 - again this is quite useful in some
148:37 - situations and in this video guys we're
148:39 - gonna talk about loops in C programming
148:42 - so sometimes it is necessary for the
148:44 - program to execute the statement several
148:48 - times and see Loops execute the block of
148:51 - commands in a specified number of times
148:54 - until a condition is met so in this
148:57 - video tutorial you will learn about all
149:01 - the the looping statements of C
149:02 - programming and along with their use so
149:07 - as you can see computer is the most
149:09 - um suitable machine to perform
149:11 - repetitive dust and it can tirelessly
149:15 - do a task tens of thousands of times
149:17 - okay and basically like every
149:21 - programming language has this particular
149:22 - feature to instruct to do such
149:25 - repetitive tasks with the help of
149:28 - certain form of statements so that's why
149:31 - we have this loops and then of course
149:33 - guys in C
149:35 - uh the C programming language supports
149:37 - like three types of Loops so we're going
149:41 - to discuss first uh while Loops okay
149:44 - so we have while Loops we have do while
149:50 - and of course we also have the for Loops
149:53 - okay so we're going to dissect each type
149:57 - of loop so that we could you know better
150:00 - understand how it works and uh how we
150:04 - can use these Loops in in a certain
150:06 - situation so basically guys
150:09 - when we say Loop
150:11 - I'm just going to show you a simple
150:14 - flowchart
150:15 - so we have here a simple flowchart that
150:18 - describes the nature of loop or Loops in
150:23 - general so we have like start and then
150:26 - we can declare a counter or a variable
150:29 - counter and then our program will try to
150:31 - evaluate the condition and then if the
150:34 - condition is you know returns true it
150:38 - could execute statements and then
150:41 - increment the counter and then uh again
150:45 - evaluate the condition if the like for
150:48 - example the increment counter is equal
150:51 - or you know greater than something and
150:54 - then execute statements
150:56 - uh increment counter and then
150:59 - evaluate condition and lastly if the
151:04 - condition is met then it will stop the
151:06 - execution of that particular Loop so
151:10 - basically guys a loop is just you know
151:12 - doing or executing repetitive statements
151:15 - inside our C program so there are like
151:20 - control statements we have uh statements
151:24 - that we can use
151:26 - so we have a break
151:29 - we can have like
151:32 - um continue and then of course we have
151:35 - the go to statement that we have
151:37 - discussed previously in our video
151:40 - tutorial series okay so as I've uh as
151:43 - I've said
151:45 - uh we will discuss first the while Loops
151:49 - in C programming okay so see why Loops
151:53 - statement allows to repeatedly run the
151:55 - same block of code until the condition
151:57 - is met
151:58 - and of course while loop is the most
152:01 - basic Loop in C programming and while a
152:06 - while while loop has one condition and
152:08 - it contains
152:10 - uh or it executes as long as the
152:13 - condition is true and then the condition
152:15 - of the loop is tested before the body of
152:18 - the loop is executed so
152:22 - the Syntax for our while loop is like
152:25 - this
152:26 - so we have the keyword while
152:30 - and then a condition so like it tests
152:35 - expression and then if this condition is
152:39 - like true then it will try to execute
152:43 - the statements inside this particular
152:47 - while loop okay now we have like we can
152:52 - have a very simple application for this
152:56 - so for example we will try to implement
153:01 - this
153:05 - me
153:06 - so we can declare like
153:09 - a variable so int n
153:12 - plus one
153:14 - and then times
153:18 - was 5 and then of course we can declare
153:22 - the while loop for our program like this
153:25 - and then open and close parenthesis
153:28 - and then we can say n is less than or
153:32 - equal to times
153:35 - okay
153:36 - so we have to add the curly braces for
153:40 - that and then inside this curly raises
153:43 - these are the statements that will be
153:46 - executed if this particular condition is
153:49 - true okay
153:51 - so it will try to print like
153:55 - C while
153:58 - loops
154:00 - and then we can add the
154:03 - percent or yeah percent D which is the
154:05 - format specifier for our in variable and
154:10 - then we can display the N okay and then
154:13 - of course we can
154:17 - we can increment the VAR uh the value of
154:20 - n by using the increment that we have
154:23 - discussed before which is n plus plus so
154:26 - basically this is just you know
154:29 - basically saying n equals n plus one
154:32 - okay I think uh we have already
154:36 - discussed that the N plus plus increment
154:38 - in our video uh previous videos okay now
154:43 - we have set the value n equals to 1 okay
154:47 - and then we have set the number of times
154:49 - the loop should be executed so that's
154:52 - basically five
154:54 - uh there should be five execution and
154:57 - then we
154:58 - added the while statement and then check
155:02 - the condition if n is less than or equal
155:05 - to times then uh execute this statements
155:11 - right here so we can try to check this
155:13 - build and run our application
155:17 - foreign
155:20 - to see the output of our program and I'm
155:24 - going to you know slowly explain to you
155:27 - what happens in this particular program
155:30 - so you can see the output and uh right
155:33 - here see y Loops one Cy Loops two and
155:37 - then three four and five and after uh
155:42 - five it no longer executed because it
155:46 - you know ended the loop Okay so
155:52 - I'm going to explain to you how we got
155:56 - this output so first thing
155:59 - as I've said we declare n equals to one
156:02 - so in this condition one is less than or
156:05 - equal to 5 which is the value of times
156:08 - so basically and of course it is true
156:11 - that 1 is less than or equal to 5 so
156:14 - that's why it executed this particular
156:17 - statement see while loops and then it
156:19 - displays the value 1 right here okay and
156:24 - then it incremented the value n so now
156:29 - the N becomes 2. okay and then it will
156:33 - uh go here in our condition once again
156:37 - so 2 is less than or equal to 5. so
156:41 - that's true because obviously 2 is less
156:44 - than or equal to 5.
156:47 - so that's uh it executes this statement
156:50 - right here see while loops and then the
156:54 - value of our n which is 2. again it
156:57 - incremented the N variable so uh the N
157:03 - now becomes three
157:05 - so after that one
157:07 - we will go back here in the condition is
157:10 - three
157:12 - equals or I mean less than or equal to
157:16 - five
157:17 - so that's true because 3 is equal to or
157:20 - I mean less than two five so that's why
157:22 - it uh printed the output right here see
157:28 - while loops and then the value of our n
157:30 - equals to three and now after that it
157:34 - incremented another time the n and the N
157:37 - becomes for now and it go back to the
157:40 - condition is 4 less than five
157:44 - so basically four is less than five
157:48 - obviously so that's why it printed out
157:51 - the Cy loops and then uh four the value
157:55 - over n and again incremented added one
157:59 - to the N variable and then the N now
158:03 - becomes 5 and then go back here and the
158:06 - condition is 5 less than or equal to 5.
158:11 - it returned
158:13 - uh true again because 5 is equal to five
158:17 - so it printed out C while loops and then
158:21 - the value of of our n which is 5. now it
158:26 - incremented another time the n
158:28 - variable and now the the N variable
158:31 - becomes 6 and it will go directly here
158:34 - in our condition
158:36 - is 6 less than or equal to 5.
158:40 - so it returns false because 6 is not
158:44 - less than or not even equal to 5 that's
158:46 - why it uh ended the loop and it never
158:51 - executed the uh this particular
158:55 - statements right here once again because
158:57 - six is not less than or equal to 5 which
159:01 - is the value of R times variable so in
159:04 - this video guys we're going to discuss
159:06 - another type of loop which is the do
159:08 - while
159:09 - so from the previous tutorial we already
159:11 - have discussed the while loop okay and
159:14 - then we implemented a simple iteration
159:17 - program where we could see the value of
159:20 - the variable each of the iteration of
159:23 - our while loop now the difference
159:24 - between while loop and do while is that
159:27 - the while loop will try to evaluate
159:31 - first the condition and then if this
159:34 - condition is you know returned true then
159:37 - it will execute the statement inside
159:39 - this particular while loop whereas when
159:43 - we are trying to use the do while loop
159:45 - then the statements inside the loop will
159:49 - you know execute at least once before
159:52 - the condition is being evaluated so the
159:56 - Syntax for that is like this we will
159:58 - just remove this for now
160:00 - all these lines of the Wilder from the
160:04 - previous tutorial
160:09 - okay so this is the format or basic
160:12 - format of the Dual statement
160:14 - or do I look in z
160:17 - so basically we have the do keyword and
160:20 - then open and close curly braces and
160:23 - then the statements or group of
160:25 - statements okay
160:27 - now
160:28 - after the curly braces then it will uh
160:32 - have this the while keyword and then
160:35 - open and close parenthesis with the
160:38 - condition inside it so as I've said
160:40 - earlier guys that this particular Loop
160:43 - will try to execute at least once before
160:47 - the condition is being evaluated okay so
160:52 - as you can see if you wanna like execute
160:54 - for some statements before you could
160:56 - evaluate the condition so so the Dual
161:01 - Loop is the way to go so we will try to
161:05 - create another program guys showcasing
161:08 - how this particular do while statement
161:11 - or do while looks like or how it works
161:14 - so basically guys we could
161:17 - um
161:18 - initialize some variables here so for
161:21 - example the n
161:23 - so int n equals one
161:26 - and then we can also
161:28 - uh declare another variable which is
161:31 - times
161:33 - so basically what we are doing here or
161:36 - what we're declaring here is two
161:38 - variables
161:40 - for our uh do while and the n
161:44 - represents the number I mean the value
161:48 - of the iteration or the value of the
161:51 - variable each iteration and then of
161:53 - course the times is the number of times
161:56 - the loop should execute okay
162:00 - now inside our do while or do statement
162:04 - we could
162:06 - add
162:08 - a printf statement here
162:11 - and then you could say C do while loops
162:18 - and then the format specifier
162:22 - percent D backslash n
162:25 - and of course uh the N variable okay so
162:31 - we have this printf statement so
162:34 - basically what what we're trying here is
162:36 - we're trying to display the value of n
162:40 - every
162:42 - um you know execution of this particular
162:45 - statements okay and in here below the
162:49 - Sprint F statement we could increment
162:52 - the n
162:55 - by you know uh using this statement and
162:58 - equals n plus one or you could simply
163:03 - use the N plus plus version of this
163:07 - particular statement so n equals n plus
163:10 - one so again every iteration we would
163:13 - try to increment the value of our n plus
163:16 - one and then inside here
163:20 - um the while and then open close
163:21 - parenthesis we could
163:24 - add the condition so for our condition
163:27 - you can add the n and then less than
163:31 - or equal to the number of times we want
163:36 - this while loop or do while to be you
163:40 - know executed okay so I think that's all
163:44 - for this
163:45 - um do while statement so we could try to
163:48 - run our program
163:50 - and then build and run
163:54 - and see how this particular program
163:56 - works okay so basically guys I will try
164:00 - to
164:02 - explain it to you how this or how we got
164:04 - this
164:07 - output so
164:10 - from the initial
164:12 - value of RN we have uh
164:17 - executed the do statement right here so
164:21 - we printed out like the value is C do y
164:25 - Loops then present T and then the value
164:28 - of our n is one okay so after this
164:33 - iteration
164:34 - we increment the value of RN by 1 so
164:39 - that's n equals n plus 2 okay or I mean
164:45 - 1 n plus one and then the semicolon and
164:48 - then of course we will try to evaluate
164:51 - this in our condition so 2 is less than
164:54 - or equal to times which is 5.
164:58 - so of course 2 is less than five so that
165:01 - makes sense and then it will try to
165:05 - execute the statements inside the
165:09 - uh there's curly braces okay then printf
165:13 - see do while loops and then of course it
165:16 - will try to to Output the value two okay
165:20 - after this
165:22 - the N will be incremented again by one
165:25 - so n equals n plus one so the value now
165:29 - or the N value now becomes
165:32 - um three and then evaluate it in our uh
165:37 - open and close parenthesis so 3 less
165:41 - than or equal to five so obviously three
165:45 - is less than five
165:47 - so it will try to implement or execute
165:50 - again the statement inside our clear
165:53 - basis and then display three
165:58 - this will be the line
166:00 - uh tree and then of course it will
166:03 - increment again the value n and it the
166:05 - end becomes 4 now and then uh evaluated
166:09 - once again is 4 less than or equal to 5.
166:14 - so
166:15 - basically four is you know less than
166:19 - five so it will execute the statement
166:22 - print F again display the value for
166:25 - and then
166:27 - um
166:28 - increment again the n
166:30 - it becomes
166:33 - five and then after that it will try to
166:37 - evaluate the statement is less or n is
166:40 - less than equal to five
166:42 - so we have set now the value to five so
166:45 - five
166:46 - is equal to 5 so it will try to execute
166:52 - this statement once again and if the
166:54 - five value now becomes
166:57 - or the end value now becomes 6 because
166:59 - we try to increment it here so 6 will be
167:03 - evaluated inside our while statement
167:06 - then 6 is less than or equal to 5 so
167:10 - that's basically not true because of
167:13 - course obviously 6 cannot be less than
167:16 - or cannot even be equal to 5 so that's
167:20 - why it will try to end the loop
167:25 - because the condition returns
167:30 - false already okay so that's how the do
167:33 - while statement works and guys make sure
167:37 - that um
167:39 - there's like infinite
167:43 - um end of your look because there are
167:45 - cases that you know the condition will
167:48 - not be evaluated uh into false at some
167:51 - point in our program so that will make
167:54 - it like the infinite Loop
167:57 - so the concept of infinite infinite note
168:01 - so be careful to place a
168:04 - condition here that will try to or like
168:08 - will be evaluated false at some point in
168:10 - our program because you don't want to
168:13 - have the infinite Loop because uh the
168:16 - program will run
168:19 - infinitely and you don't want that it
168:21 - would you know consume the memory of
168:23 - your computer so that's why you you need
168:26 - to be
168:27 - careful with the infinite Loop so make
168:31 - sure again
168:32 - to add a condition that will be
168:34 - evaluated as false at some point in your
168:37 - program and in this video guys we're
168:39 - going to discuss another type of loop
168:42 - which is uh for Loop so from the
168:45 - previous tutorials we have like
168:48 - um discussed already what is while loop
168:50 - what is do while and how it can be used
168:52 - in RC programming or C programs so as
168:57 - I've said guys in this video we're going
168:58 - to discuss for loops and of course we're
169:00 - going to describe the syntax of for
169:02 - loops
169:03 - okay so the Syntax for for Loops guys is
169:08 - like this I'm going to copy and paste
169:11 - this here
169:14 - so we have here the four keyword
169:18 - and then we have the open and close
169:20 - parenthesis in which we have we can you
169:23 - know there uh there are like three
169:27 - um statements that are available for us
169:30 - so the first one is the init or
169:35 - initialize
169:36 - and then the second
169:39 - statement is the condition
169:42 - and the third one is increment or it
169:46 - could be also decrement okay so this
169:50 - three statements inside this open and
169:53 - close parenthesis is separated by
169:55 - semicolon okay and of course guys each
169:59 - of this statement plays you know a big
170:03 - role in our for Loop
170:06 - okay now we can try to implement our
170:09 - very simple for Loop so for example
170:11 - let's
170:13 - um declare a variable for our for Loop
170:17 - um inside the initialize statement
170:20 - because you know initialize a variable
170:24 - right here like for example int
170:26 - x equals zero so we could do that here
170:31 - we could initialize our variable into
170:34 - something like zero or it could be one
170:37 - if you want to start
170:39 - [Music]
170:39 - um
170:41 - one
170:42 - so basically guys it is the uh the same
170:45 - as declaring the variable here so in X
170:48 - zero so you could also do that here
170:53 - um
170:54 - initialize the value to X so this 2 is
170:58 - just the same so basically we're just
171:01 - declaring the variable and setting the
171:03 - initial value say for example 0 or 1.
171:07 - now the second statement
171:10 - for this particular uh for Loop
171:13 - um we could you know
171:15 - add the condition
171:17 - so the condition is something like this
171:20 - we could check if the X variable is less
171:27 - than or equal to five just like what we
171:30 - have from the while loop and do while
171:33 - loop so we're checking if the value of
171:36 - the variable is less than or equal to 5
171:39 - and of course the last part or the last
171:42 - statement for this particular open and
171:44 - close parenthesis for Loop you could you
171:46 - know
171:46 - add the increment or it could be the
171:50 - decrement depending on the initialize
171:53 - the condition of course in your for Loop
171:56 - so for example we want for now is to
171:58 - increment so you could actually do this
172:00 - like this x equals X plus one inside the
172:06 - for Loop and then of course guys the
172:09 - statements
172:11 - inside the curly braces so the
172:14 - statements you know you could execute
172:16 - statements right here so for example
172:19 - printf
172:21 - the value of x
172:25 - column and then the format specifier
172:28 - percent d
172:30 - boxlash n to have a new line then
172:35 - specify our variable X and then
172:38 - end this off with e semicolon just like
172:42 - this so guys basically what we're trying
172:44 - is to display the value of the variable
172:47 - X each iteration of this particular Loop
172:51 - so we could you know build and run this
172:53 - application
172:55 - and see how it works now we have this
172:58 - output the value is one the value is two
173:03 - the value is three the value is 4 and 5.
173:07 - so guys I'm going to explain to you
173:10 - how we come up with this output so at
173:14 - first guys you know we declare the
173:17 - variable
173:19 - X and initialize the value into one so
173:22 - now the value for our X is one okay
173:27 - so value of RX is what um
173:34 - one
173:35 - okay
173:37 - and then
173:39 - um
173:41 - let me write first is equal or X is
173:44 - equal or less than or equal to five
173:48 - and then
173:49 - increment
173:52 - okay
173:53 - so say for example at the first
173:56 - iteration of this for Loop we have
173:59 - initialized the value into one or you
174:02 - add a value of x into one
174:04 - and then we try to evaluate the
174:07 - statement is X is less than or equal to
174:10 - 5.
174:11 - so of course X is less than
174:16 - uh five since the value of x equals to
174:19 - five so this returns uh true
174:23 - then it will
174:25 - um execute the statement
174:28 - uh the value
174:31 - the value of X it should be X right
174:35 - there
174:37 - is
174:39 - one okay and after this after execution
174:42 - of this particular statement it will
174:44 - increment the value of our X so at the
174:47 - second iteration it will be
174:51 - two okay so of course 2 is less than
174:54 - five so that's basically the
174:58 - um
174:59 - condition will return true
175:01 - and then of course
175:04 - it will display the value of x is 2
175:10 - and then another iteration three
175:13 - so three is less than or equal to five
175:16 - right
175:20 - and obviously
175:22 - the
175:24 - 3 is less than 2 5 so basically uh it
175:28 - will return true
175:30 - and then display
175:32 - this statement
175:35 - and
175:37 - um until the X will become six
175:43 - okay six and then it will evaluate is
175:47 - six
175:49 - less than
175:51 - or equal to five so basically this is
175:55 - false and then it will terminate
175:59 - the loop or it will end the loop itself
176:03 - so that's how we got this
176:05 - um output the value is one two three
176:08 - four and five so this particular output
176:11 - guys is incremented so the value of our
176:14 - X is increment
176:16 - like one two three four and five but
176:19 - anyway guys we could you know make it
176:21 - like five four three two one and we will
176:24 - initialize our variable x uh differently
176:28 - so for example let's try to revise our
176:33 - um for look and we will start from five
176:37 - okay so the initial value of our X is
176:40 - equal to five
176:41 - and of course we will check if
176:45 - so for example is X is greater than or
176:49 - equal to one so now we're doing the
176:53 - reverse
176:54 - of the increment
176:55 - and of course guys you can you know add
176:59 - the increment statement just like this x
177:03 - equals to x minus 1 and of course you
177:06 - can use the
177:07 - post increment that we have discussed
177:10 - from earlier videos in this particular
177:12 - uh Series so you could do it like this
177:16 - x minus minus and then we could you know
177:19 - display the value of r x
177:23 - okay so let's try this once again
177:26 - and build and run our application and of
177:30 - course we're going to get the reverse
177:32 - output
177:34 - okay so we have here the initial value
177:37 - five and then four and then three and
177:40 - then two and then one okay
177:43 - so guys of course you can always try to
177:48 - you know add another for Loop inside
177:50 - this Loop
177:52 - so as what we have from the previous
177:56 - tutorial so we have like the nested if
177:58 - and else statement and of course guys
178:00 - you could always uh you could also have
178:03 - nested for Loops or nested while Loops
178:06 - in your program so for example like this
178:08 - you could you know
178:11 - um add another for Loop here so for
178:13 - example in y
178:17 - um is we will set the initial value to
178:21 - 1.
178:24 - okay initial value into one and then we
178:27 - could
178:29 - um
178:30 - try to evaluate the statement say for
178:33 - example is y
178:37 - um less than or equal to X something
178:40 - like this and then we could add the
178:43 - increment y plus plus okay
178:48 - and then open and curl open and close
178:50 - curly braces and then of course we could
178:52 - display the value of our
178:55 - X and Y so the value of x for example
179:01 - percent D and value of y
179:07 - is
179:09 - something like this
179:11 - the value of x is percent D and then the
179:15 - value of y is
179:18 - percent D again
179:22 - okay and then we could also specify the
179:24 - value of r y okay so we could you know
179:28 - build and run our application
179:30 - and of course we will get this
179:33 - particular output so the value of x from
179:37 - uh
179:40 - initial value over X is 5 right so it
179:44 - will try to run five times and then it
179:47 - will try to display one two and one two
179:51 - three four and five for our value of are
179:54 - y okay and then of course we have the
180:01 - um four
180:03 - and then we also have three and then you
180:06 - also have one and uh two and one so you
180:10 - could do that guys as I've said you can
180:12 - do
180:14 - um nested for Loops or nested Loops in
180:17 - your
180:17 - C program so you could increment you
180:21 - could use decrement inside your lobes
180:25 - okay so and guys if you want to practice
180:28 - more about using Loops you could you
180:30 - know try to create different patterns
180:33 - for example you want to print a
180:35 - rectangle or
180:36 - um triangle you could display uh
180:40 - inverted triangle by using the
180:44 - um astery symbol so you could do that by
180:46 - using your loops and in this video guys
180:49 - we're going to discuss how we can use
180:51 - switch multiple selection statement
180:54 - inside RC program
180:56 - so from the previous tutorials guys we
180:59 - have learned how to use if we also have
181:01 - learned how to use if else and of course
181:04 - how to use the nested if else statement
181:07 - inside RC program
181:09 - now occasionally there will be an
181:12 - algorithm that you know will contain a
181:15 - series of decisions in which a variable
181:18 - or expression is tested separately and
181:21 - the output or the statement or the
181:24 - actions that could be taken depends on
181:27 - the series of decisions this is what we
181:30 - call multiple selection and C provides
181:32 - the switch multiple selection statement
181:34 - to handle such decision making so now
181:38 - let's try to look at the basic syntax of
181:40 - switch statement
181:42 - so the switch statement guys starts with
181:45 - the keyword switch and then open close
181:48 - parenthesis
181:49 - and open close curly braces and inside
181:53 - this open close parenthesis is the
181:57 - variable
181:58 - so variable of interest
182:03 - so the output guys or the statements
182:05 - that are executed depends on the value
182:09 - of this particular variable here
182:11 - so we have here switch statement or
182:14 - switch keyword in an open close
182:15 - parenthesis and then the variable or
182:18 - expression and then of course open close
182:20 - parenthesis and inside this open close
182:23 - parenthesis guys are the case label okay
182:27 - so so for example you want to check for
182:31 - the value of one
182:33 - and then it should be followed by the
182:36 - break keyword which means that it
182:40 - signifies the end of this particular
182:42 - case one okay and then you could you
182:46 - know add several case label here so for
182:48 - example case two and then you could add
182:51 - the break statement you could also add
182:54 - another case label three and then the
182:57 - break statement
183:00 - um and of course you need to add the
183:03 - default case
183:04 - so the default case guys will serve or
183:07 - will be executed if
183:10 - there's no case label that satisfies the
183:13 - VAR uh the value of our variable or
183:15 - expression so for example we have here
183:18 - one two and three and the input is four
183:21 - so it's gonna you know uh execute the
183:25 - default value or the default uh
183:28 - statement default case now you could
183:30 - inside this particular case we could
183:34 - execute some statements for example you
183:38 - have chosen
183:41 - case one
183:43 - so we could end this with the semicolon
183:45 - so we could do the same for the other
183:46 - cases
183:48 - so like this
183:52 - so in this particular case
183:55 - you have chosen case two and you have
183:58 - chosen
184:00 - three
184:02 - and the default is
184:08 - you haven't
184:11 - you have not chosen
184:14 - from the
184:18 - values one and two and three so one two
184:25 - you have not chosen
184:28 - a value
184:33 - in one two three
184:39 - okay so we can try this guys and of
184:41 - course we need to add a variable here
184:44 - so in
184:45 - input and then we could you know uh
184:51 - scan F or ask the input from the user so
184:54 - present the
184:58 - and then the variable input
185:02 - Ampersand and then input
185:05 - okay and then guys we could uh paint
185:11 - please choose a number
185:20 - one two
185:24 - or three
185:26 - okay so let's try this
185:33 - okay so let's try to build and run our
185:36 - application
185:39 - so we have uh we have to update this so
185:42 - variable of interest is of course the
185:44 - input okay so let's replace this with
185:48 - the input and then build and run our
185:51 - application
185:53 - so as you can see it's going to
185:56 - run and we need to input
186:01 - a number
186:02 - here
186:05 - so please choose a number between one
186:07 - two and three so for example we choose
186:10 - where we input one
186:12 - so you have chosen case one
186:16 - okay and then let's try another one
186:20 - so for example three
186:23 - so you have chosen case three so
186:26 - basically guys it uh executed the
186:30 - statement under this particular case
186:32 - label okay and so for example you have
186:36 - inputted or you have
186:38 - uh
186:40 - selected number four instead of the
186:43 - values one two and three so it's going
186:46 - to uh execute the statement under the
186:50 - default case okay so you have not chosen
186:53 - a value in one two and this is uh should
186:57 - be three
186:59 - and we could also use letters and
187:01 - characters inside our switch case
187:03 - statement and basically here in our
187:06 - example we're using the intite as the
187:09 - data type for our variable of interest
187:11 - input and then we're setting the
187:15 - um case labels into int1 and then into
187:19 - and then in three and then we're
187:21 - executing statement based on the value
187:23 - of our input
187:25 - okay but as I've said we could use
187:27 - characters or letters and say for
187:31 - example you want your user to input
187:32 - letter A
187:34 - um you want your user to input letter b
187:36 - and then you could execute statement
187:39 - based on that particular letter so for
187:42 - for now let's try to implement this
187:44 - inside our program we want our user to
187:47 - input letters a b or c and then we could
187:51 - you know output different statements
187:54 - based on that particular character
187:57 - so now we could display instead of
187:59 - please choose a number we could you know
188:02 - say here enter
188:05 - a letter you could select a b or c and
188:11 - then
188:12 - um based on this particular letter we
188:15 - could output or
188:18 - um execute commands or execute statement
188:21 - okay and then we're going to use the
188:24 - method
188:26 - um get
188:29 - get char
188:31 - okay so this will return the in
188:36 - um equivalent of the letter or the
188:38 - character that the user has inputted
188:40 - okay and then we could try this inside
188:43 - our switch uh statement
188:45 - so instead of using case one we could
188:48 - say here case
188:50 - a
188:52 - and then here we could
188:55 - use case b
188:58 - and of course here we could choose or
189:02 - set the case C so every time the user
189:06 - types in the a so it should print you
189:09 - have chosen option
189:14 - a
189:16 - so we could copy and paste this
189:20 - so B and then of course
189:23 - uh you have chosen option C
189:29 - and in our default
189:31 - wrong
189:33 - option
189:35 - okay so we could try this let's try to
189:38 - run or build and run our program
189:43 - so enter a letter A
189:46 - for example we type in a
189:49 - so you have chosen option A so let's try
189:54 - this once again
189:56 - so for example the letter that has been
189:59 - or the user inputted is B
190:02 - we have chosen B
190:06 - let's try this once again
190:08 - so for example the user types in D and
190:12 - then it will display wrong option okay
190:16 - and then of course guys you can make it
190:18 - this way also so for example you want to
190:22 - um add also the lowercase of letter A so
190:27 - case and then the lowercase version of a
190:31 - so you could do it like this so you have
190:34 - case a and then case with the lowercase
190:38 - a and then you could also do the same
190:41 - with the B
190:44 - and then you could add the lowercase
190:47 - B here and of course you could also uh
190:52 - do the same for your C
190:54 - so lowercase C lowercase b lowercase
190:59 - um a so it's going to you know
191:04 - um execute base on this it doesn't
191:08 - matter if it is uppercase a or lowercase
191:11 - a so let's try this once again
191:15 - so for example we want B
191:18 - so you have josen option V
191:22 - okay
191:24 - now let's try this another time
191:27 - and then C lowercase C so you have
191:30 - chosen option C okay so I think
191:36 - um it is clear to you how to use the
191:37 - switch case statement in C programming
191:40 - and in this video guys we're going to
191:41 - discuss and I'm going to teach you how
191:43 - to implement functions in our C program
191:46 - so basically guys is C function is a
191:50 - self-contained block of statements that
191:53 - can be executed repeatedly whenever we
191:55 - need it so
191:57 - um if you think about it it is just you
191:59 - know a group of statements that we could
192:02 - call and we could use repeatedly within
192:06 - RC program so in this particular video
192:09 - guys we're going to discuss the benefits
192:11 - of using the functions in C program we
192:14 - will also
192:16 - discuss two types of functions in C
192:21 - um also the parts of function
192:23 - the function prototype the function
192:26 - definition and of course we're going to
192:29 - discuss also how to call a function
192:32 - inside our C program and lastly we will
192:36 - Implement a basic program to illustrate
192:38 - the addition of two numbers using user
192:42 - defined function so if you're excited
192:45 - guys please make sure to watch the full
192:46 - video you will learn more in this
192:49 - particular video tutorial and by the way
192:52 - guys if you are new here in our YouTube
192:54 - channel and you like content about
192:56 - programming so go ahead make sure to
192:59 - subscribe and press the notification
193:01 - Bell so you'll get updated whenever we
193:03 - have a new upload regarding different
193:05 - programmings or different topics so we
193:08 - have topics python Java javafx C
193:12 - programming and many many other topics
193:15 - regarding programming so now let's try
193:18 - to talk about the benefits of using
193:20 - function in C so there are a lot of
193:23 - functions that you know we could
193:25 - associate in using function inside RC
193:30 - program so the first one is modularity
193:34 - so when we are using functions it could
193:37 - provide modularity in our code so it
193:41 - means that we could you know Define
193:42 - different functions we could readily
193:45 - call our functions and
193:48 - we could call this particular function
193:51 - if we need it or we need to execute
193:54 - certain statements and of course guys
193:57 - the function also provides a reusable
194:00 - calling it will save us a lot of space
194:04 - and you know it could be our code could
194:08 - be you know read uh more readable
194:12 - um by using this particular function
194:13 - feature
194:15 - so that's readable or reusable code
194:21 - and then in large programs debugging and
194:25 - editing tasks is easy with the use of
194:28 - functions so functions uh make it easy
194:33 - for us to implement our programs so the
194:37 - program can be modularized into smaller
194:39 - parts that's what I have said earlier
194:42 - that we could you know develop a certain
194:45 - module inside our C program and then we
194:47 - could call that particular module or
194:49 - statements or group of statements if we
194:52 - need in a particular situation
194:55 - and number
194:57 - um the the next one is separate function
195:00 - independently can be developed according
195:03 - to the need so so for example guys we
195:05 - could group our statements depending on
195:07 - the need or you know depending on the
195:10 - the function or or the purpose of that
195:13 - statement so we could group that
195:15 - statements and uh place it inside our C
195:18 - function so actually guys there are two
195:21 - types of functions in C so the first one
195:24 - is
195:26 - um let me type it here
195:29 - type of functions
195:31 - we have the first one built in function
195:39 - okay so built-in function
195:42 - um of course the system provided these
195:44 - functions and stored in the library
195:47 - therefore it is called Library functions
195:50 - so we have like we are using scan F
195:54 - printf uh strc py
196:00 - um
196:00 - strlwr is the RC MP
196:04 - Str Len it's the arcat and many more
196:07 - functions that are already available for
196:10 - us whenever we try to run a program so
196:13 - from the previous tutorials we have used
196:15 - the printf
196:17 - so as you can see this particular
196:18 - function we did not
196:21 - um implement this the system provided it
196:24 - for us the printf and this particular
196:26 - function will let us display
196:30 - um certain
196:32 - um objects or statements that we want is
196:34 - we want to display inside our C program
196:38 - so to use these functions you just need
196:41 - to include the appropriate C header file
196:45 - so that's why we have here the include
196:48 - statement at the top of our program so
196:51 - basically we're including all the
196:53 - necessary function that we could use
196:55 - inside our C program and of course guys
197:00 - the the second type of
197:04 - um method is what we called the user
197:08 - defined functions
197:10 - user defined functions
197:14 - okay so user defined user defined
197:17 - functions these are the functions that
197:19 - are defined by the user at a time of
197:22 - writing the program so that's basically
197:25 - us or the programmer
197:27 - that you know Define the
197:31 - functions okay and then of course the
197:34 - same with the
197:35 - a built-in function we can you know
197:37 - readily use this particular functions
197:40 - inside RC program now there are there
197:43 - are also parts of our function in C
197:47 - programming language we have the
197:50 - function declaration
197:54 - we also have the definition
197:58 - and we also have the function called
198:02 - so this is basically the
198:05 - actual slow of the function we have the
198:09 - function declaration declaration
198:12 - and then we have the definition we have
198:14 - of course the function call if you want
198:17 - to use that particular
198:19 - function so we have here for example
198:23 - Syntax for function declaration so we
198:27 - could
198:28 - um
198:29 - this will be the
198:32 - function declaration
198:36 - this is just an example guys on how you
198:38 - could
198:39 - declare a certain function
198:42 - so the Syntax for that is data type
198:46 - and then function name
198:49 - and then of course open and close
198:52 - parenthesis and then in here you can
198:55 - specify the parameter list okay or the
198:59 - variables that we want to use inside
199:01 - this particular function
199:05 - so our example of that is like this
199:08 - int which is the data type and of course
199:11 - addition
199:12 - which is the
199:15 - name of our function so addition and
199:18 - then the return type is int and then of
199:21 - course the list of parameters and in
199:24 - this case we don't have any parameter in
199:27 - this particular function addition so we
199:30 - also have the function definition this
199:32 - is actually what the
199:35 - actual function would look like
199:39 - so this will be function declaration or
199:41 - I mean function definition
199:45 - okay so we could uh this the basic
199:49 - syntax to this is return type
199:55 - and then the function name
199:58 - and then function arguments
200:04 - and then curly braces
200:08 - so it should include the close or open
200:11 - and close curly braces and then inside
200:13 - here is the body of the function or
200:18 - simply the statements that we want to
200:20 - execute inside this particular function
200:21 - so whenever we want to call this
200:23 - function this will be the statements
200:27 - that that you know would be executed
200:30 - inside this particular
200:32 - function so in order for us to call a
200:35 - function inside our C program we just
200:38 - need to specify
200:40 - the method name and of course we need to
200:44 - supply parameters if there's a if there
200:48 - are any and we would also need to
200:51 - specify the return type of our function
200:53 - so now let's try to
200:56 - Implement a simple program that you know
200:58 - that could illustrate
201:01 - the addition of two numbers
201:03 - um using user defined function so we
201:06 - have here the main function right and
201:09 - then in here after the main or after the
201:12 - closing curly brace of our main function
201:14 - we could create
201:17 - we could create our own function right
201:20 - here
201:21 - let me close this first so you can uh
201:24 - you know see better
201:27 - so we could add a function here
201:30 - returning
201:32 - the total of two numbers
201:36 - okay so we could declare it like this
201:39 - int and then addition
201:44 - open and close current uh parenthesis
201:46 - and then open and close curly braces and
201:49 - of course guys as I've said this is this
201:51 - will be the body of our function so in
201:54 - here we could
201:55 - um
201:56 - Define local variables
202:01 - okay so local variables
202:08 - so for example we we have in Num one
202:12 - equals 10.
202:14 - and then you know two equals five okay
202:18 - so these are local variables meaning
202:22 - these are the variables that are
202:24 - declared and defined inside the addition
202:27 - method or function okay so we could see
202:31 - here return and then num1
202:35 - plus num two okay
202:38 - so that's the statement that we want to
202:41 - execute when whenever we try to call the
202:44 - addition method
202:46 - or I mean function so inside our main
202:49 - function we could call this
202:51 - um
202:52 - method addition so we could declare a
202:55 - variable here in answer
202:58 - and then we could say answer equals and
203:02 - then the addition so basically whatever
203:06 - the the return value of this addition
203:10 - method it will be assigned into our
203:13 - answer variable and of course we could
203:16 - print
203:17 - or display this particular value so we
203:21 - could say the total of
203:24 - two numbers
203:27 - yes and then in the format specifier or
203:31 - just you know percent the
203:33 - and then the answer
203:36 - which is the answer variable okay so we
203:41 - could you know build and run our
203:43 - application application
203:47 - and then we have here the output the
203:50 - total of two numbers is 15 okay so
203:55 - that's how the function works and as you
203:57 - can see here we have defined our
204:00 - function with the statements inside our
204:04 - C function to return the total of the
204:07 - number one and number two and then
204:10 - inside our main function we have
204:12 - declared the answer and then the type is
204:16 - in of course because the in is should
204:19 - correspond to the return type of this
204:22 - particular function and then answer
204:24 - equals the addition and then the last
204:27 - thing that we need here is to display
204:31 - the total of two numbers and in this
204:34 - case 10 and 5 which makes it you know
204:39 - the value or the output is 15. so and in
204:44 - this video guys we're going to learn how
204:46 - to use C form function arguments or
204:49 - parameters inside our function so from
204:52 - the previous tutorial we have learned
204:54 - how to define and declare our function
204:58 - inside our C program and of course we
205:00 - have learned how to use the basic syntax
205:02 - to create a function and implemented a
205:06 - simple function that could add two
205:09 - numbers okay so as I've said guys in
205:12 - this video we're going to focus on the
205:14 - function arguments or function
205:15 - parameters so while calling a function
205:18 - the arguments can be passed to a
205:20 - function in two ways so there there are
205:24 - two ways on how we could pass the
205:27 - parameters or the arguments into the
205:30 - function so the first one will be call
205:33 - by value and the second one is called by
205:39 - reference
205:41 - okay so in call by value way the actual
205:45 - parameter is past the function and then
205:48 - new memory area created for that
205:51 - particular path parameters and then it
205:54 - can be used only within that function
205:57 - and the actual parameters cannot be
205:59 - modified in the call by value uh way of
206:04 - you know passing the the argument into
206:07 - our function while call by reference so
206:10 - instead of copying a variable an address
206:13 - is passed to a function as parameter and
206:17 - then we could use the address operator
206:19 - which is the Ampersand symbol I know
206:23 - you're already familiar with this so
206:26 - address operator is used in the
206:28 - parameter of the called function and of
206:32 - course the changes in the function
206:33 - reflect the change of the original
206:36 - values so we could understand this
206:40 - better if we try to implement our
206:42 - function
206:43 - by you know creating a simple project or
206:46 - simple application that could
206:48 - demonstrate the call by value or call by
206:52 - reference so first let's try to create
206:57 - a program
206:59 - that would pass the argument us or it
207:02 - could call by value so the first thing
207:05 - that we're going to need is of course to
207:08 - it's actually the same with the
207:12 - program or I mean function that we have
207:14 - created from the previous tutorial but
207:18 - the difference is that in this
207:20 - particular video we're going to use
207:21 - parameter or argument so the first
207:25 - variable that we're going to declare
207:27 - here is
207:29 - the
207:30 - answer
207:31 - so the type is in and then we have the
207:35 - variable
207:37 - um name num1
207:40 - so the value is five
207:42 - and then in num2 and then the value is
207:48 - 10 okay
207:51 - and of course guys we could declare the
207:53 - function so for example we could
207:58 - um create the
208:01 - function right after this closing curly
208:03 - brace of our main function
208:06 - so the first thing of course is the
208:09 - return type and in this case in and then
208:12 - the name of our function which is
208:14 - addition
208:15 - and we could say here in a and in b
208:21 - asically it means that this particular
208:24 - function would accept two parameter int
208:28 - B and
208:31 - okay and then in here we can return the
208:34 - value or the total value of these two
208:37 - parameters so a plus b okay and of
208:42 - course guys we could declare the
208:45 - function right here so we could you know
208:48 - add the function declaration here
208:50 - function declaration
208:54 - so you could say here in addition and
208:57 - then this particular function is going
209:00 - to take two parameters in num1 and in
209:03 - num2 so as you can see here guys this is
209:06 - only the function declaration okay and
209:09 - this is the function definition
209:15 - function definition
209:20 - again this is function declaration
209:23 - declaration and function definition
209:28 - so now we could try to call our function
209:32 - by value so for example we can say here
209:38 - um
209:39 - answer
209:40 - and then equals
209:43 - addition
209:45 - which is the method or the function that
209:47 - we have created here
209:49 - and then we could pass along the values
209:53 - of num1 and
209:56 - okay so let me explain this first for
209:58 - you so it would be clearer for you
210:01 - so we have here the parameter num1 num2
210:04 - as I've said in call by value
210:07 - the actual parameters cannot be modified
210:11 - because num1 and num2 is it won't change
210:16 - um even if we you know change the
210:19 - parameters here but in a and b so the
210:23 - value of num1 and num2 would not change
210:25 - even if we try to modify this in A and B
210:28 - inside our addition function so the
210:33 - actual parameter is passed to a function
210:35 - and then new memory will be created for
210:39 - our parameters e uh in a and in the uh
210:43 - in B okay
210:45 - and of course we could display here the
210:49 - result so printf and then of course
210:54 - the statement the addition
210:57 - or you could
211:00 - say the total of two numbers
211:03 - is
211:06 - and then the format specifier percent d
211:09 - and then the variable answer okay and
211:14 - then we could you know clean and build
211:16 - our application or build and run
211:19 - and it should display the output
211:22 - something like this the total of two
211:24 - numbers is 15. okay so you get the point
211:28 - this is the calling of function by value
211:33 - okay now if we want to try to call the
211:37 - function by reference as I've said we're
211:40 - going to use the
211:43 - Ampersand symbol
211:46 - so Ampersand symbol or it is the address
211:49 - operator
211:51 - and we're going to use that in our
211:53 - parameter of the called function so
211:57 - let's let's try to implement a function
212:00 - that you know could call by reference
212:03 - and you should see by now how you how
212:06 - uh the call by reference and call by
212:09 - value is different
212:11 - so the same thing we're going to declare
212:15 - the
212:16 - method here
212:18 - the return type is in and then the name
212:20 - is Edition and then it's going to take
212:23 - two parameters with type in okay and
212:27 - then we could uh also use this in answer
212:30 - and then the same value for example
212:34 - and now guys instead of just using this
212:38 - num1 and num2 we could add the address
212:41 - operator
212:45 - the Ampersand symbol or the address
212:46 - operator in C programming so basically
212:49 - guys uh we're sending
212:52 - or we're passing the
212:54 - address of this particular variable into
212:57 - our function so so whenever we change
213:00 - this value in inside our function it's
213:03 - going to reflect the value of our num1
213:07 - and num2 okay so
213:11 - um
213:11 - we have here the Ampersand or address
213:15 - operator and then we call the
213:18 - function right here
213:21 - and then display the answer and of
213:24 - course we need to add the
213:26 - asteroid symbol
213:30 - for this uh variable here
213:34 - or the argument and then
213:37 - um one for the other variable B so this
213:41 - means that it is the operator that is
213:44 - used as a pointer to a variable
213:46 - so it's going to point the address to
213:50 - that particular value of num1 or num2 so
213:55 - of course we need to add this also here
213:58 - and of course for our variable
214:01 - num okay and then
214:04 - as I've said if we want to change the
214:07 - value of num two
214:09 - here in inside our function we could do
214:11 - that and it's going to reflect the
214:13 - changes of this num2 and num1 variable a
214:18 - and then of course we could
214:20 - still use the asteroid symbol here
214:24 - and let's try to run our program for now
214:28 - so build and run and it's going to
214:30 - answer or it's going to the output this
214:33 - way the total of two numbers is 15.
214:37 - okay so let's try to modify the
214:42 - um num1 and num2
214:45 - right for example
214:48 - inside this particular
214:50 - function we're going to change the value
214:53 - of our
214:56 - variable a so instead of
214:59 - 5 it's going to like maybe six okay so
215:04 - we could do that
215:05 - by using
215:07 - this particular
215:10 - um
215:11 - variable
215:12 - argument we could add here the
215:18 - um variable a and then we could say six
215:22 - then see me call semicolon at the end
215:25 - and we could try to display the value of
215:29 - our a so
215:31 - the value
215:33 - of a and then percent D and it should
215:38 - you know the variable a correspond to
215:41 - the variable num1 right so we could copy
215:44 - and paste this so notice that num1
215:46 - equals to 5 here okay so let's see
215:50 - what's the output of this so build and
215:53 - run our program
215:55 - so as you can see we have you the the
215:58 - output
215:59 - the total of two numbers is 16 and the
216:03 - value of a is six but as you can see
216:07 - here a corresponds to the num1 right
216:10 - num1 so we have here num one plus the
216:13 - five and then we change the value of
216:16 - num1 by using the the reference of
216:19 - variable a and then we set it to six
216:22 - that's why we're getting six here and
216:24 - then the total of our addition is six
216:27 - okay so and in this video guys we're
216:29 - gonna learn how to use arrays inside our
216:32 - C program so basically guys we can
216:35 - declare variables to hold single element
216:37 - or single value inside RC program so for
216:41 - example like this
216:43 - page or ink page and then we could
216:47 - assign it to a value file for example
216:50 - like this so this particular variable
216:53 - will hold
216:54 - the value 5 for a single value file and
216:59 - then it's going to assign to the
217:02 - variable age now what if you want to
217:05 - store like 50
217:08 - um series of values
217:10 - like there are
217:13 - um 50 page that what uh that we want to
217:16 - save for example there are like 50
217:19 - persons that we want to save the ages
217:21 - then uh this particular declaration and
217:25 - statement will not suffice because we're
217:28 - going to like declare it one by one so
217:32 - for example in age two and then six and
217:36 - then in age
217:37 - three equals seven
217:41 - in in
217:44 - age four was like 10 and so on so
217:50 - basically guys this is not a good
217:51 - programming practice to declare multiple
217:55 - variables or yeah multiple variables to
217:58 - hold a single set or single type of data
218:02 - so that's why we need the capability of
218:06 - an array so basically guys the array is
218:09 - a data structure in Z programming which
218:12 - can store a fixed size sequential
218:15 - collection of elements of the same data
218:19 - type so in this case guys we're just you
218:21 - know collecting and saving
218:24 - um the same data type of data which is
218:27 - in now what we can do here is we can
218:31 - Define an array and then we could set
218:34 - the lens say for example we want to save
218:37 - um 50
218:38 - edges right and then we could save the
218:42 - age into that particular array so let me
218:44 - show you an example so this is
218:48 - how you can create an array inside your
218:50 - C program so basically the first
218:53 - um thing is you have to specify the type
218:57 - of your data that you want to save in
218:59 - that particular array and then the array
219:02 - name so basically this is just like the
219:05 - variable name so you have to label your
219:09 - container
219:10 - and then of course you have to specify
219:12 - uh specify the type of data that you
219:15 - want to save in this particular array
219:16 - and then you have to add the square
219:19 - brackets
219:20 - and this signifies that this particular
219:23 - variable is an array and then inside uh
219:27 - this particular square bracket you can
219:29 - declare the size or you know specify the
219:33 - size or how many values that this
219:36 - particular variable could hold okay so
219:40 - in a typical C program you could do it
219:44 - like this so for example the type is in
219:47 - right and then you could say ages or age
219:50 - right
219:51 - so this is the RNA and then this square
219:56 - brackets and then you have to specify
219:59 - the size so for example five so you want
220:02 - to collect five values or five age or
220:07 - five persons okay so again this is the
220:10 - type in you have to specify the type and
220:13 - then you have to specify the RNA the the
220:16 - variable name and then of course square
220:18 - brackets and then the size of your array
220:22 - or basically the amount of values that
220:27 - this particular array could hold so
220:30 - after this you can say equals and then
220:33 - you can specify the array or the
220:35 - elements of your array so for example we
220:38 - could take all these values five six
220:41 - seven and ten so
220:43 - five
220:45 - six
220:47 - seven and ten and for example because
220:51 - our array contains or should contain
220:53 - five elements you can add another one
220:56 - here for example
220:58 - um
220:59 - eight or something okay so again this is
221:03 - how you can create an array of
221:06 - um values so in is the data type and
221:10 - then of course we have the r name and
221:13 - then square brackets with the size five
221:17 - uh for example your array should be fine
221:21 - and then equals and then the curly
221:25 - braces open and close curly braces and
221:27 - then the actual element value for
221:30 - example in this particular statement we
221:33 - have five six seven ten and eight so
221:38 - that's how you can initialize an array
221:40 - in C program now you can
221:45 - access this particular
221:48 - um or this elements or these values by
221:51 - using what we called index so in C
221:55 - programming or any other programming
221:57 - with um
221:59 - um arrays you could access the values by
222:03 - using index so this index is zero based
222:08 - zero base it means that it will start
222:12 - it will start with zero okay so meaning
222:17 - uh if you want to access the value five
222:20 - so you you have to use
222:23 - um zero index okay
222:27 - this will be
222:30 - foreign
222:32 - and then this will be one
222:35 - this will be two this will be three
222:39 - and this will be
222:41 - um four
222:43 - so again if you want to access or get
222:45 - the value of this particular element you
222:48 - have to use the zero value of your index
222:51 - and then one for the six two four seven
222:55 - three four ten and
222:58 - um four four eight so let me show you
223:01 - that how that works
223:04 - so for example you want to display the
223:06 - value uh six okay so all you have to do
223:10 - is use the printf statement and then
223:15 - um Google quotes and then percent
223:18 - B the format specifier for our
223:22 - um integer values and then comma of
223:24 - course and then you could use the name
223:27 - of our
223:29 - um
223:30 - uh what do you call this array so ages
223:33 - and then we can
223:36 - specify the square bracket and then
223:39 - index of the element that we want to use
223:43 - so for example six so we want to use the
223:46 - index one for that to be able to get the
223:49 - value of six so let's try this uh
223:54 - build and run a program
223:56 - so as you can see the output is six as
224:01 - you can see here six right now if you
224:04 - want to get the value 10
224:06 - you have to use the
224:10 - um index free for that because I as I
224:13 - said the value is equivalent to the
224:16 - index 3 of our particular array so build
224:21 - and run a program and it should output
224:24 - the value 10 which sits on the index 3
224:29 - of our array so that's how you can
224:31 - access the value from our array now say
224:35 - for example you want to change the value
224:37 - of this array right so we have here five
224:40 - six seven eight or five six seven ten
224:43 - and eight and then if if you want to
224:45 - change the value of
224:47 - for example in this one find the first
224:49 - element all you have to do is specify
224:52 - the index also sorry previous
224:56 - indexes
225:06 - that's significance
225:11 - so for example we want to display this
225:14 - what will be the value of our index zero
225:19 - so we could test that by using the
225:21 - printf statement and then instead of
225:24 - three you could specify the value 0 or
225:28 - index 0 here so let's try this build and
225:32 - run
225:33 - and as you can see here instead of 5 the
225:36 - initial value of our uh index 0 it
225:41 - returns 11 because we assign it or we
225:45 - modify it by using the element or index
225:48 - 0 equal to the 11 which is uh that's why
225:54 - we are getting the 11 value here now
225:57 - this is particularly useful guys or if
225:59 - you want to work with the array
226:04 - um one of the best structure or the best
226:07 - statement that you could use to iterate
226:09 - the array is by using the for Loops or
226:13 - Loops inside our C program so we could
226:15 - say this here for example for
226:20 - so we're gonna use the for Loop
226:22 - statement here and we can specify for
226:25 - example
226:26 - um link index equals to zero
226:31 - we want to start with zero because as
226:33 - I've said the index of our array is zero
226:37 - base it will start with the zero number
226:41 - okay so index equals zero and then
226:44 - semicolon and we're going to say here uh
226:47 - here index
226:50 - um less than the actual value of our
226:55 - array or any size of our array so 5 less
226:59 - than five
227:01 - so another semicolon and then index plus
227:05 - plus okay
227:08 - and inside the for Loop we could display
227:11 - the element of our array so we could use
227:15 - this printf statement
227:17 - and then we could use the index variable
227:22 - here
227:23 - and then
227:24 - change this
227:27 - we could say index
227:30 - equals percent B
227:34 - format specifier and then
227:38 - um we could say
227:40 - equal to percent B and then of course
227:45 - the actual value of our array index
227:50 - so in here we could specify the index
227:53 - okay so it should display the index
227:57 - current index and then it should display
228:00 - the actual value of that particular
228:03 - index so we could build and run our
228:06 - program
228:09 - um let me add first the backslash n or
228:13 - new line
228:15 - um State sequence new line and then it
228:19 - should display this particular output so
228:23 - at index 0 we have divided 11 at index
228:26 - one we have the value 6.
228:29 - right
228:31 - index 0 is 11 because we already
228:34 - modified our array
228:37 - specifying the array or index 0 should
228:40 - be equal to 11 and then at index 1 equal
228:43 - to 6 right here uh index 2 should be
228:47 - equal to 7 index 3 is 10 index four is
228:51 - eight okay so that's how easy for us to
228:54 - access and change the value of our array
228:57 - and that's how we can Define our multi
229:02 - or I mean single
229:04 - um Dimension or one dimension array
229:07 - inside our C program and in this video
229:09 - guys we're gonna talk about
229:11 - multi-dimensional arrays in our C
229:14 - program so from the previous tutorial we
229:16 - have learned how to use the basic array
229:20 - so we have implemented one dimensional
229:22 - array we try to display the contents of
229:27 - an array by using the for Loop and of
229:30 - course we declare and initialize one
229:33 - dimensional array from the previous
229:35 - tutorial now as I've said from this
229:37 - tutorial we're going to learn how to
229:39 - work with multi-dimensional array so
229:42 - basically guys multi-dimensional array
229:44 - works like the same with the
229:47 - one-dimensional array but the difference
229:49 - is that it contains the array contains a
229:54 - set of arrays so in C programming
229:56 - language it will allow us or it allows
229:59 - us to use multi-dimensional arrays and
230:02 - the Declaration or multi-dimensional
230:05 - Declaration for that is by using the
230:08 - type of force as I've said from the
230:10 - previous tutorial if you want to store
230:14 - multiple values
230:16 - you have to use arrays and in order for
230:19 - you to declare an array you have to
230:22 - specify the type of that particular
230:25 - array so you have to specify the type
230:28 - and then of course the name
230:30 - of the array and then you have to
230:33 - specify the size here so for example
230:36 - size
230:38 - now this is
230:40 - um good for uh one dimensional array so
230:44 - you have to specify the type the name
230:46 - and of course the size of your array now
230:50 - comes the multi-dimensional array or
230:53 - two-dimensional array so you could do it
230:55 - like this
230:57 - so size 2 and then this is the size one
231:01 - so this is how you
231:04 - declare multi-dimensional array or
231:07 - two-dimensional array inside our C
231:09 - program so the type of course you don't
231:12 - you know you don't want to forget that
231:14 - the size of or I mean the type of the
231:18 - value that you want to save in this
231:20 - particular array so and then the name
231:23 - and then of course the size one and then
231:27 - the size two now if you want to create
231:32 - three-dimensional array you could do it
231:34 - like this
231:36 - size 2 I'm in size three
231:40 - so you have square brackets for your
231:43 - size one square brackets for your size
231:45 - two and square brackets for your size
231:49 - three so again this is how you can
231:51 - declare your multi-dimensional array but
231:55 - you know the simplest form of
231:57 - multi-dimensional array is by just
231:59 - specifying two
232:01 - sizes and basically guys this uh this
232:05 - will represent the
232:07 - columns and rows of your
232:11 - array or multi-dimensional array because
232:14 - multi-dimensionally works like a table
232:16 - so size 1 will be your
232:19 - number of rows and the size two will
232:24 - represent the number of columns so let's
232:28 - try this let's try to declare and
232:31 - initialize a multi-dimensional array
232:35 - so following this particular declaration
232:38 - type
232:39 - so the first thing is of course the type
232:42 - so in and then we could say here A or a
232:47 - variable name a this is the name of our
232:49 - array multi-dimensional array and then
232:52 - of course we can specify the size for
232:54 - our row so for example three
232:57 - right there and then the size of our
233:00 - columns or number of columns so that's
233:04 - basically like four and then you could
233:07 - uh you know initialize this by using the
233:09 - equal sign and then open and close curly
233:12 - braces so in this inside this curly
233:16 - basis we could declare or initialize the
233:19 - values for our rows and columns as I've
233:24 - said
233:25 - multi-dimensional arrays are you know
233:28 - composed of
233:30 - arrays right there okay so you could add
233:34 - array of values right here
233:36 - this will represent the row one of our
233:41 - array
233:42 - so like for example zero
233:46 - um one
233:48 - and then
233:51 - two and then three
233:54 - okay so again this is for uh
233:58 - initializing
234:03 - the
234:04 - row
234:07 - initializing the row index by zero okay
234:12 - so we could access this by using the
234:16 - index 0
234:17 - okay and for example basically we
234:23 - declare it here like three so we need to
234:26 - add more
234:28 - arrays to this so open and close curly
234:32 - braces
234:35 - and another one
234:37 - to make it you know the length is three
234:42 - so in here we could display or add four
234:46 - and then five and then six and then
234:49 - seven
234:51 - okay
234:52 - and then the other row will have eight
234:57 - then nine
234:59 - and then 10 and then 11. okay so
235:03 - basically we now have declared and
235:06 - initialize our
235:08 - multi-dimensional array so the three
235:11 - here represent this rows three rows and
235:16 - as you can see here we have declared
235:18 - four columns so it should count or I
235:23 - mean you know the column star from this
235:25 - 0 for 8 and then
235:28 - one five nine two six ten three seven
235:33 - eleven so this will D4 the the eight and
235:38 - the zero represents the column zero and
235:44 - then one five and nine represents column
235:46 - one so why this is representing column
235:52 - zero that's because our index is you
235:55 - know
235:56 - um
235:57 - is zero base or meaning it will start
236:01 - um Counting from zero so this will be
236:04 - the column zero the column one the
236:06 - column two and the column three okay and
236:12 - of course
236:14 - um
236:15 - we could
236:16 - try to display the value of this we
236:20 - could access the values of our
236:22 - multi-dimensional arrays by using the
236:24 - indexes of the columns and rows so for
236:28 - example we want to change the value of
236:36 - the values that we could get from
236:39 - the Row 2 and
236:44 - column three
236:46 - so basically the value of or the value
236:49 - that we could get from
236:51 - our array index 2 and 3 is 11 because
236:58 - this is the Row 2 and this is column
237:02 - three so zero one two three so we get
237:07 - the 11 or the value 11. so if you want
237:11 - to change this to something like eight
237:15 - so we could do it or assign a value to
237:17 - this by eight so it should display 11 or
237:20 - I mean 8 instead of 11 so we could try
237:23 - that
237:24 - so print F and then
237:27 - present D which is the format uh format
237:31 - specifier for our in value so we could
237:34 - specify the array index
237:37 - um two and then index three so if you
237:41 - try to compile and run our program we
237:45 - should get now the value
237:48 - um eight
237:50 - value eight as you can see here that's
237:53 - because we already modified the value
237:57 - inside the array of index 2 and 3. so
238:02 - let's try to comment this
238:05 - and then compile and build our program
238:09 - and as you can see we're getting 11
238:11 - that's because that's the initial value
238:14 - of the array index 2 and 3. now we could
238:20 - we use array or I mean like we could use
238:23 - Loops here to access and change the
238:28 - value of our
238:30 - array or multi-dimensional array and of
238:32 - course because we're using
238:33 - multi-dimensional array we could also
238:35 - use nested Loops to change and access
238:39 - the values of our array so so for
238:42 - example
238:44 - we could declare for Loop here
238:47 - and this is for example int and then row
238:52 - equals zero and then
238:56 - our row is less than or yeah rho is less
239:01 - than
239:03 - um
239:04 - for example
239:08 - um two or three
239:11 - okay
239:12 - and then row plus plus so basically
239:15 - we're iterating from 0 1 and 2 because
239:21 - we're we only have
239:23 - like three rows but we starting we're
239:27 - starting from zero so let's make uh
239:30 - that's making it like the value of our
239:34 - row should only be within two not three
239:39 - that's why we're using single or I mean
239:42 - um less than three right here
239:45 - and then of course we could make another
239:48 - loop for our column so int column and
239:54 - then equals to zero
239:56 - and then column
240:02 - is less than four
240:05 - and then
240:07 - we're going to say here column
240:13 - plus plus okay and then of course we
240:15 - could use this particular print a printf
240:18 - statement
240:20 - to display the values of our array
240:24 - so percent D we could use here the
240:29 - array name
240:31 - which is a because we're using the array
240:33 - name a so a and then
240:38 - um
240:39 - we're going to specify here the columns
240:42 - and rows so percent
240:45 - D and then here percent d
240:48 - equals percent
240:51 - D so inside here we could specify the
240:56 - row
240:57 - and then the column
240:59 - and of course the value of that
241:04 - particular row and column
241:06 - okay so this will be row and of course
241:08 - this will be column okay so again we're
241:12 - just trying to get the value of uh
241:16 - inside our array represented by this
241:18 - particular row and column okay so these
241:21 - are the indexes the row and columns so
241:24 - let's try to build or compile and run
241:27 - our program and we're getting this
241:29 - particular output right here but we
241:31 - don't want that let's try to add a
241:34 - backslash
241:36 - and to add a new line every execution
241:41 - so as you can see here we have all the
241:43 - values coming from our array so array
241:47 - and then we have index 0 0 so the value
241:49 - is
241:51 - um zero right there as you can see and
241:54 - then a 0 1 so the value is 1 a 0 2 is 2.
242:02 - a 0 3 is 3 and A1 and a one zero is four
242:09 - and so on so that's how you can uh
242:12 - that's how you can use the
242:15 - multi-dimensional array inside our C
242:17 - program okay and I think that's clear
242:20 - enough how you could iterate and modify
242:25 - your multi-dimensional array by using
242:28 - for loops and in this video guys we're
242:30 - going to learn how to use array as a
242:33 - function parameter so from the previous
242:36 - tutorials we already implemented
242:38 - functions that could take few parameters
242:41 - and then return a value based on the
242:45 - parameter that we have passed to the
242:48 - function now in this particular video
242:51 - guys we're going to learn how to pass
242:53 - the array as a function parameter and of
242:57 - course we already know how the RF Works
243:01 - inside our C program we already
243:04 - implemented a simple program that
243:08 - demonstrates the capability of using
243:11 - array we already implemented a
243:14 - multi-dimensional array and even
243:17 - iterated the content or the elements of
243:21 - our array now we could take that further
243:24 - by using a function and in this video
243:27 - guys I'm going to show you how you can
243:29 - sum up the values of your array and then
243:32 - we're going to use a function for that
243:35 - so as I've said we're going to pass the
243:39 - array as a function parameter so here
243:41 - inside our C program we could declare a
243:46 - new variable or a new array so so for
243:49 - example int
243:51 - and then my number array
243:57 - okay so my
244:00 - um my number array is the name of our
244:02 - array and then it should take in or has
244:06 - the size of say for example six
244:10 - so the number of elements is six right
244:15 - we could specify the values inside our
244:18 - curly braces
244:20 - now we could
244:23 - um specify the values 23 30
244:28 - 21
244:30 - 18
244:34 - um let's say 17.
244:37 - one two three four five and another one
244:40 - for our last element so for example 25
244:44 - so these are all the elements of our
244:47 - array and then we're we're going to sum
244:51 - up the value of this
244:53 - by using a function so what we can do
244:57 - here is to add a function
245:00 - above the main function or whatever we
245:04 - could also insert function right after
245:06 - the main function so for example
245:10 - uh the function will return the total so
245:14 - it should say int this is the return
245:17 - type
245:18 - and then the name of our array so total
245:21 - value of array
245:24 - so this will be in the name of our
245:26 - function total value of array so again
245:29 - this is the return type
245:31 - and this will represent the total value
245:35 - of the elements that we have here so
245:38 - total value of array and then of course
245:40 - we need to specify the
245:43 - argument or the parameters and because
245:47 - we're trying to sum up the value of R of
245:51 - our array we could
245:54 - specify that the first parameter is an
245:57 - array okay so say for example int and
246:02 - then number array
246:04 - and this is the first parameter and
246:08 - represents the my number array here okay
246:11 - and then we could
246:13 - also specify the size of the array so
246:17 - basically we have six here so we could
246:21 - say here in and then size
246:24 - and again this will represent the size
246:27 - of our my number array and of course we
246:31 - need to add curly braces inside
246:34 - and inside this function we could add
246:38 - the logic to add all the elements
246:40 - of our array and then return the sum or
246:45 - the total so we could say here int total
246:50 - equals
246:52 - zero
246:54 - okay that that's the initial value of
246:57 - our total variable and then we could
247:00 - um
247:01 - try to iterate the elements of our array
247:05 - by using the for Loop statement
247:06 - statement
247:08 - the same uh for Loop that we have
247:12 - implemented from the previous tutorials
247:15 - okay so for Loop so we can say here in I
247:19 - equals the zero and then I is less than
247:24 - the size of our array and then
247:29 - um I plus plus
247:31 - and then inside the for Loop we could
247:34 - say
247:35 - sum or total equals
247:39 - um total Plus
247:42 - the number array
247:45 - right there and then we could specify
247:49 - the index
247:51 - which is we're gonna use I so this is
247:54 - the variable I that we have declared
247:57 - inside our for Loop
248:00 - so number array and then the index I
248:03 - okay and of course guys this is the same
248:07 - uh the same with this particular line
248:11 - we could write it with this particular
248:15 - um line total equals
248:19 - R plus equals and then a number array
248:23 - and then of course specify the index of
248:26 - that particular number array so again
248:29 - this particular line is the same with
248:32 - this line or we are all we are doing
248:34 - here is trying to
248:37 - accumulate the total of our number array
248:42 - right here so after the total plus
248:45 - equals number array we could return the
248:48 - value of the total so by using the
248:53 - return statement and then of course the
248:55 - variable total okay
248:58 - okay so I think our function or our
249:01 - function total value of array is already
249:03 - set we could Now call this particular
249:06 - function
249:07 - uh inside our main function right here
249:11 - so basically for us to call that
249:14 - particular function all we have to do is
249:17 - use the name which is total value of
249:20 - array
249:21 - so total value of array
249:25 - right there
249:27 - and then open and close and then we're
249:30 - going to supply the parameters which is
249:34 - the first one is the array
249:37 - for the my number of my number array so
249:41 - my number array and then of course the
249:45 - second parameter is the size of the
249:50 - um
249:51 - array which is 6 right there and then of
249:54 - course this particular function returns
249:57 - in which is the total we could uh catch
250:00 - the value by using also int and then you
250:04 - could say here sum equals the return of
250:08 - this function that has the parameters
250:11 - array and the size of the array and then
250:14 - right after that one we can print the
250:16 - sum of all the elements so print F and
250:20 - then
250:21 - we could say here the total
250:25 - value is
250:28 - you could use the percent d
250:30 - and then
250:32 - backslash n
250:34 - and then comma and then of course
250:37 - specifying the sum variable okay and now
250:40 - we could compile and run our program
250:46 - so I think we have an error here because
250:49 - we use the comma so we need to remove
250:52 - that and compile and run again our
250:55 - program so it should say here the total
250:59 - value is
251:01 - 134 which is the total of this
251:05 - particular value uh elements here from
251:08 - our my number array okay so we could
251:13 - also add function or I mean add element
251:15 - to this particular array so it should
251:18 - say
251:19 - after 25 we could add like for example
251:23 - 50 and then another one
251:26 - um
251:27 - 25
251:28 - so basically the length of our array or
251:31 - the size of our array should be 8
251:34 - because we already added two elements
251:37 - the 50 and 25 and of course we need also
251:41 - to change
251:43 - this particular
251:45 - parameter here it should say also eight
251:48 - okay
251:49 - so let's try to compile and run our
251:52 - program and as you can see here
251:56 - the value is now
251:58 - 205 okay so let me explain to you in
252:02 - details how this works
252:05 - so first
252:07 - we Define the elements of our my number
252:11 - array and the size of this or the number
252:14 - of elements of this particular array is
252:16 - 8 right there and then right after that
252:19 - we call the function total value of
252:22 - array and then we pass in the my number
252:26 - array as the parameter and of course the
252:29 - second parameter is 8 which is the size
252:32 - of our number array now for the total
252:36 - value of array function as you can see
252:39 - here it takes two parameters the array
252:43 - and of course the size of the array and
252:47 - then inside here we
252:50 - initialize and declare the total
252:52 - variable equal to zero and then we
252:56 - iterate
252:58 - the my number array or number array by
253:01 - using the for Loop and then we use the I
253:04 - as the index variable so I equals to
253:07 - zero and then I is less than to the size
253:11 - that we have specified then I plus plus
253:14 - and then of course
253:15 - in order to get the total of the
253:18 - elements we're using total equals uh
253:24 - total plus number array so basically
253:27 - this is the same with this line total
253:30 - plus equals number array and then
253:34 - specify the I index so so for example
253:40 - this particular I
253:42 - um
253:43 - the value of I is 0 then it's going to
253:46 - get the value 23 and then I value 1 it
253:51 - should get the 30 I value 2 is 21 I
253:55 - value
253:56 - 3 is 18 and so on so you get the idea
254:01 - and then of course after that we get the
254:05 - um total value and then of course return
254:08 - that to this particular
254:10 - variable sum and the last thing is we
254:14 - display that the total value is and then
254:17 - specify the sum of all the elements that
254:20 - we have from this number array okay in
254:24 - this video guys we're going to discuss
254:26 - what is pointers and how we can use
254:29 - pointers inside our C program okay so if
254:32 - you're excited guys please make sure to
254:33 - watch the full video we're gonna be
254:35 - learning a lot in this particular video
254:37 - and in the succeeding videos about
254:39 - pointers so basically pointers in C are
254:44 - um you know easy and fun to learn
254:46 - so there are some C programming tasks
254:49 - that are performed more easily with
254:51 - pointers and there are other also tasks
254:55 - such as dynamic memory allocation cannot
254:57 - be performed without using pointers
255:01 - so it becomes necessary to learn
255:03 - pointers to become a perfect C
255:07 - programmer
255:09 - so if you want to be like almost perfect
255:12 - C programmer so it is necessary for us
255:16 - to learn pointers okay and let's start
255:19 - learning them in simple and easy steps
255:22 - so as you know every variable is a
255:25 - memory location
255:26 - and every memory location has its own
255:31 - address defined which can be accessed
255:34 - using the Ampersand symbol so I think we
255:38 - already use this particular symbol
255:39 - before in our previous tutorials but
255:43 - we're going to you know tackle deeper
255:45 - what is this particular symbol and how
255:48 - we can use this in
255:51 - um you know working with pointers and it
255:55 - is you know denoting an address in
255:57 - memory meaning the Ampersand and for
256:02 - example we're going to Define here or
256:04 - create a program that could
256:06 - um
256:07 - showcase the capability of this operator
256:11 - and the
256:13 - basic
256:15 - access to or basic you know access to
256:19 - the pointer address so for example we
256:21 - have a variable in
256:23 - var1 and then we have char
256:28 - VAR 2 which is the length for example is
256:32 - 10.
256:33 - so basically I guess as I've said this
256:36 - particular variables these variables has
256:40 - location or has a specific location in
256:42 - our memory and every memory location has
256:46 - its own address so in order for us to
256:48 - verify that we could try to print the
256:52 - address or memory address of these
256:54 - variables so we're going to use printf
256:58 - function and then in here we're going to
257:02 - say address of VAR 1
257:07 - is
257:10 - percent X so this is the format special
257:14 - uh format specifier when we're trying to
257:18 - display the address of the variable so
257:22 - percent X
257:24 - and then we're going to specify a new
257:27 - line here and then comma and then of
257:29 - course we need to use the Ampersand
257:33 - symbol and of course the the name of our
257:35 - variable say for example the VAR one so
257:39 - the address of var1 colon and then
257:42 - percent X the formats up format
257:44 - specifier and then of course specifying
257:47 - Ampersand and the name of our variable
257:49 - one and
257:53 - um we could do also the same for the
257:55 - second one or second variable var2
257:58 - so percent X and then this will be VAR
258:02 - two so this is basically guys trying to
258:05 - test if this particular variables has
258:08 - you know we will just display the
258:12 - um address of this variable okay so
258:16 - before we run our program let's change
258:18 - first this because I have
258:20 - I forgot to type number one because this
258:24 - is uh this is supposing that this
258:27 - particular variable has the length of 10
258:29 - okay so that's Char Bar two and then
258:33 - open and close
258:35 - um square brackets and then
258:38 - um 10 okay so let's try to build and run
258:41 - our program
258:42 - and as you can see it's going to display
258:45 - the address of var1 is 6 1
258:49 - fe1c and the second one will be
258:53 - fe12 so that's basically the address of
258:57 - the variables var1 and the VAR 2. so a
259:03 - pointer variable is a variable whose
259:05 - value is the address of another variable
259:09 - okay so for example direct access of the
259:13 - memory location now like any variable or
259:16 - constant you must declare a pointer
259:19 - before using it to store a variable
259:22 - address so the typical or you know the
259:26 - general form of pointer variable
259:28 - declaration is just like this we need to
259:30 - specify the type and then the
259:34 - um asterisk or star symbol or asterisk
259:36 - in other other terms and then of course
259:40 - the variable name so that's how to
259:45 - declare a pointer variable so again we
259:49 - need to specify the type and then
259:51 - asterisk symbol and then the variable
259:55 - name so here
260:00 - the type or type is the pointers base
260:03 - type okay and it must be a valid C data
260:07 - type and of course the variable name or
260:10 - the VAR name is the name of the pointer
260:13 - variable and as you can see guys this
260:17 - particular symbol has to resemble is
260:19 - sometimes used to declare
260:22 - um or use for multiplication process or
260:25 - multiplication
260:26 - operation right but in this particular
260:29 - case it is being used as to declare a
260:33 - pointer variable okay
260:35 - now
260:37 - in order for us to declare
260:40 - um
260:41 - pointer variable based on this
260:44 - particular declaration form so we could
260:47 - say something like int and then percent
260:49 - or I mean the asteroid symbol and then
260:53 - the name of our variable so this will be
260:57 - um
260:59 - pointer
261:02 - pointer to an integer
261:06 - okay and then we have for example double
261:10 - and then the
261:13 - Master symbol DP and this is basically
261:17 - the pointer to a normal
261:22 - we also have like float
261:25 - and then FP
261:28 - this will be obviously pointer
261:32 - pointer to a float
261:36 - and another thing
261:39 - ch
261:40 - and then this will be a pointer
261:44 - obviously to a character
261:47 - so the actual data type of the value of
261:50 - all pointers is you know a long
261:53 - hexadecimal number that represents the
261:55 - memory address so whether we declare it
261:59 - as in we declare it as double we declare
262:02 - it as float or character so it's going
262:05 - to do uh it's going to return
262:07 - a long hexadecimal number that
262:10 - represents the memory address now the
262:14 - only difference between pointers of
262:16 - different data type
262:18 - or data types is the data type of the
262:21 - variable or constant data pointer points
262:24 - to so for example this particular
262:27 - variable points to this variable one
262:31 - then it's going to be a bit different
262:33 - because we are referencing to an in
262:37 - variable so let me show you that how you
262:40 - can you know use pointers we could
262:43 - remove this lines
262:46 - okay in var1 we could
262:50 - assign a value to this like 20 and then
262:54 - this this will be the
262:56 - actual
262:59 - actual variable declaration
263:02 - so this particular variable has the
263:07 - value 20 and then we could
263:11 - um declare a pointer variable
263:15 - so in and then asterisk IP
263:20 - so this is pointer
263:26 - variable declaration
263:29 - so you get to see the difference between
263:31 - this declaration
263:34 - the pointer variable uses the symbol as
263:37 - the risk okay and then of course in
263:40 - order for us to store the address of the
263:43 - variable one into
263:45 - the pointer variable IP we could
263:49 - use IP variable equals
263:53 - the Ampersand symbol and of course the
263:58 - VAR okay so basically guys we're just
264:02 - passing the memory address of this
264:04 - particular variable one
264:06 - into the pointer variable IP okay so for
264:11 - example we could print the address of
264:13 - our var1 so printf
264:20 - address
264:22 - of var1
264:25 - we could use percent
264:28 - X as the format specifier
264:32 - and then boxlash n for new line and then
264:37 - um use the Ampersand symbol and then
264:40 - var1 so let's try to declare or I mean
264:43 - display first the address of the var1
264:48 - and then we could also just do the same
264:50 - pin the address
264:53 - or the value of the pointer variable IP
265:00 - so the value of
265:03 - IP
265:04 - and then percent
265:07 - X
265:08 - boxlash n and then
265:11 - the variable IP so let's try this clean
265:16 - and build our program
265:18 - and it should you know display the same
265:20 - hexade hexadecimal value so address of
265:24 - var1 is 6 1 fe14 and then the value of
265:29 - Ip is you know 6 1 Fe
265:33 - 1 4. so basically we're just trying to
265:36 - display or I mean store the memory
265:39 - address of var1 into the pointer
265:43 - variable IP okay and of course if you
265:47 - want to access the value using a pointer
265:54 - um we could
265:57 - try to modify our program to access the
266:02 - value
266:06 - access the value using the pointer
266:09 - variable
266:11 - so printf and then
266:15 - value of
266:18 - pointer variable IP
266:25 - so for example percent
266:29 - d
266:31 - backslash n and then asterisk IP
266:37 - so basically we're just trying to access
266:38 - the value of this particular pointer
266:42 - variable so let's try this
266:46 - clean and build our program
266:48 - and as you can see here we have the
266:51 - address of
266:54 - var161fe14 and the value of the pointer
266:57 - variable or I mean the address
266:59 - of Ip or you know the pointer variable
267:03 - ip61 fe14 and also here we could say
267:07 - that the value of this is 20 which is
267:11 - also the same with our variable one so
267:14 - that's how uh easy for us to you know
267:17 - use the pointers inside our C program in
267:21 - this video guys we're going to be
267:22 - discussing what is strings in C and how
267:25 - we can take advantage of the usage of
267:28 - this particular strings and then of
267:30 - course we're going to be dealing with
267:32 - the different functions that we could
267:35 - use in order to work with our strings in
267:39 - our C programming language now if you
267:41 - are new here in our YouTube YouTube
267:43 - channel and you want content about
267:46 - programming I am inviting you to
267:48 - subscribe and press the notification
267:50 - Bell so you'll get updated whenever we
267:52 - have a new upload so without further Ado
267:55 - let's uh Dive Right into our topic which
267:58 - is the strings in C programming so
268:01 - basically guys when we say string in C
268:04 - programming it is the one dimensional
268:06 - array of characters this is called
268:09 - strings
268:10 - in other terms this is just you know a
268:13 - group of characters
268:16 - um logically grouped together and then
268:18 - and then there should be a sense why
268:22 - we're grouping these characters together
268:24 - and this is terminated by a null
268:28 - character backslash zero so actually yes
268:32 - there are two types of or two ways to
268:35 - declare string in C programming
268:38 - okay so we could declare it like this
268:42 - basically guys we have here the basic
268:44 - structure of our
268:47 - um
268:48 - starter program so hello world program
268:50 - so I'm just going to delete that and
268:53 - we're going to initialize or declare
268:57 - string in C programming so you could do
269:01 - it like this you could
269:03 - specify the type as chart or car
269:07 - and then of course the name of your
269:10 - variable so you could name it something
269:12 - like this name and then you can specify
269:16 - here the
269:18 - um length of your
269:21 - array of
269:23 - characters so for example six and then
269:26 - in here we could
269:29 - um
269:30 - add the different characters for this
269:34 - particular string so we could say here
269:38 - for example h
269:41 - comma
269:43 - and then we're going to specify another
269:44 - character
269:46 - so first you have to specify single code
269:49 - and then the character and then single
269:52 - code to close that particular
269:54 - literal string and then another comma
269:59 - and then single code the character again
270:02 - single code comma
270:04 - and then
270:06 - single code another character
270:11 - okay so you get the idea on how you
270:13 - could you know
270:15 - um declare your
270:17 - string variable in C programming so I'm
270:21 - just going to continue working with this
270:23 - so we have
270:26 - um declared six so as I've said from the
270:30 - beginning you have to or or the string
270:33 - it is the one-dimensional array of
270:36 - characters and it should be terminated
270:38 - by a null character so null character in
270:41 - C is backslash zero okay so basically
270:46 - now we know we do have the string name
270:49 - and then we need to close this one up
270:52 - so this is how we could
270:55 - um declare
270:57 - our string in C programming language and
271:02 - actually guys you could do it also like
271:04 - this so for example
271:07 - um you don't need to specify the length
271:10 - so chart and then you can say here last
271:13 - name
271:15 - and then all you have to do is
271:18 - um declare it as an array but you don't
271:21 - have to specify the length here for
271:24 - example five or six or something like
271:26 - that so all you have to do is
271:30 - um
271:31 - initialize this with a with an actual
271:34 - value for example Hopkins
271:39 - something like this
271:42 - okay and then close it with semicolon so
271:45 - basically guys it means the same thing
271:47 - if we declare the string like this
271:50 - or if you want to declare the string
271:53 - like this and of course we can all um
271:57 - try to display this all we have to do is
272:01 - print
272:03 - and print F and then we can say here
272:07 - the name is and then we need to
272:12 - add the format specifier so percent s
272:15 - for a string
272:17 - and then the new line specifier
272:20 - and then comma and then the actual value
272:23 - or string or the variable that we want
272:25 - to display which is the name something
272:28 - like this and then semicolon
272:31 - and we could also do the same for the
272:33 - last name so printf and then open and
272:36 - close parenthesis
272:38 - the last name is
272:41 - percent again percent s
272:44 - the format specifier for say and then
272:47 - new line
272:48 - and
272:50 - comma
272:51 - then the actual variable which is last
272:55 - name
272:55 - so we could try this add this the the
272:58 - same column at the end of the line that
273:01 - denotes that this is the end of this
273:03 - particular line okay so make sure you do
273:07 - that because the compiler would complain
273:09 - if you did not specify the end of a
273:13 - certain line so now we could build and
273:17 - run our program and it should display
273:20 - your string like this the name is hello
273:24 - as we have specified in our variable
273:28 - name and then the last name is Hopkins
273:32 - as you can see here okay so that's a
273:35 - good start on how we could
273:38 - um start working with our string in C
273:41 - programming language now there are
273:44 - functions as I've said there are
273:46 - functions that we could use if we want
273:49 - to work with our string more so for
273:53 - example what if you want to to copy a
273:57 - string
273:59 - concatenate the string get the length of
274:02 - the string so we could do that we could
274:05 - also compare strings if you uh if you
274:08 - like to compare your strings so all we
274:10 - have to do guys we need to include
274:13 - um a header file which is string.h so
274:18 - this
274:20 - header file
274:23 - contains all the functions that we need
274:25 - if you we want to work with string
274:30 - in uh you know deeper sense
274:35 - so string
274:37 - and then H as I've said this will
274:39 - contain all the functions that we need
274:42 - um like for example the SDR copy SDR
274:46 - concatenate CR land
274:49 - or if you want to get the length of a
274:52 - certain variable so for now let's just
274:54 - try this
274:56 - this is for display display
275:00 - the value of our string right and then
275:04 - of course
275:06 - uh here we could
275:08 - use functions
275:11 - to our
275:13 - string okay so perhaps the first
275:16 - function that we could use is the SDR
275:19 - copy so the keyword for that is SDR
275:24 - SDR and then c b y so as you can see
275:29 - here we have the other suggestions the
275:34 - SDR copy right here
275:36 - so we could click on that and then in
275:38 - here we can specify the string so let me
275:42 - explain first what this means
275:47 - so the SDR copy function takes in two
275:50 - parameters so the first one will be the
275:53 - destination or the string that the
275:59 - copy of a value will be stored in and
276:02 - then the second function I mean the
276:04 - second argument will be the source of
276:08 - um
276:09 - or I mean the source string okay so
276:12 - again it will take two parameter this
276:16 - strcpy
276:18 - it's the first parameter will be the
276:20 - destination string
276:22 - the second parameter will be the source
276:25 - string okay so so for example in this
276:30 - um program I'm going to declare another
276:33 - string here
276:34 - and then
276:36 - um you can say here
276:39 - s t r
276:41 - and then
276:43 - full name
276:45 - for example this is just for a sake for
276:48 - the sake of example
276:51 - okay
276:52 - so for example this will be
276:56 - um maybe
276:57 - [Music]
277:00 - uh I don't know maybe 13.
277:04 - okay so we don't set the value for this
277:07 - for now and all we have to do is use our
277:10 - SDR copy
277:12 - function and then we need to specify the
277:16 - destination
277:17 - string so for now let's use this SDR
277:21 - full name as the destination string
277:23 - right there and then comma
277:27 - and then of course we need to specify
277:29 - the source string
277:31 - okay
277:32 - and then the source string
277:36 - will be
277:38 - um
277:39 - maybe the the last name
277:43 - okay
277:47 - now if we want to display the value of
277:51 - set or SDR full name then we could use
277:54 - the printf statement and then we could
277:58 - say here the full name
278:01 - is and then percent s again
278:04 - backslash n for the new line and comma
278:09 - for
278:11 - the actual value SDR full name right
278:15 - there
278:16 - and then end this up with the semicolon
278:20 - okay and then we could clean and build
278:23 - this just to see the result of our
278:25 - program
278:26 - and in here we have
278:30 - an error
278:32 - okay
278:33 - so we copied the actual value of our
278:38 - variable instead of using last name so
278:42 - let's just
278:43 - um
278:45 - modify this
278:47 - so instead of Hopkins it should be last
278:51 - name here okay
278:53 - so clean and build our program and it
278:56 - should be okay for now and as you can
278:58 - see here
278:59 - we have the display
279:01 - so the last name or the name is hello as
279:05 - you can see and then the last name is
279:07 - Hopkins and the full name is Hopkins and
279:12 - these two is identical that's because we
279:16 - already we just copied the value of last
279:19 - name and assign the value to the SDR
279:24 - full name okay so that's how easy for us
279:27 - to copy strings inside our C program so
279:30 - there are there are other functions as
279:32 - well if you want to explore more about
279:35 - this so for example the other function
279:38 - that we could use is SDR
279:43 - say A T or C SDR cut
279:46 - so this will concatenate the string or
279:51 - two string so basically it will just
279:53 - takes two parameters the the first one
279:58 - and the second parameter and then it
280:01 - should you know combine these two string
280:03 - to to
280:05 - form a new string so let me show you
280:07 - that so let's just
280:09 - use this SDR cut and then
280:14 - maybe we'll just use the name and then
280:16 - the last name
280:18 - so the first string will be named
280:21 - okay and comma and then we need to
280:24 - specify also d
280:27 - um
280:28 - what they call this
280:30 - the
280:33 - string
280:34 - or the second string which is the SDR
280:38 - full name
280:40 - okay
280:42 - and then
280:45 - um semicolon
280:48 - okay and then after this we could
280:52 - display the value of our name
280:57 - so all we have to do now is copy this
281:00 - and paste it this here
281:03 - and let's click and build our program so
281:06 - first now let's just
281:09 - um
281:10 - close this
281:13 - close the output the output first and
281:16 - then clean and build our program
281:20 - and it should display here
281:23 - what we have done so far so the name is
281:26 - hello the last name is Hopkins the full
281:29 - name is Hopkins and as you can see here
281:32 - the name is hello Hopkins
281:35 - so as you can see it concatenated the
281:39 - name and then the last name so the the
281:42 - name got the value of hello and then the
281:45 - last name got the value of Hopkins okay
281:48 - so I think that's all there is to it for
281:51 - this tutorial and if you want to learn
281:53 - more about strings all the functions you
281:56 - could explore the documentation so if
281:59 - you want to know more about the
282:03 - different
282:04 - functions available in
282:07 - this string that H header file you could
282:13 - visit this website and then you can see
282:17 - here the commonly used string functions
282:22 - so we already have
282:24 - [Music]
282:26 - use the SDR cpy SDR CAD
282:31 - and of course the other most common you
282:35 - commonly used string function is getting
282:38 - the length of your string okay and in
282:41 - this video guys we're gonna be learning
282:43 - structures in C
282:46 - so we're going to explore what is
282:49 - structures and how we could you know use
282:52 - structures inside our C program so
282:55 - basically guys when we say structure it
282:58 - is a user user defined data type
283:02 - um it is used to store a collection of
283:05 - different kinds of data so in a sense it
283:10 - could be something similar to an array
283:13 - so basically it is like a collection the
283:17 - only difference is that an array is used
283:20 - to store the same data types so in an
283:23 - array if you want to save an integer
283:25 - value so you have to make sure that all
283:29 - the elements of that particular array is
283:32 - also int or integer and if you want to
283:35 - store double so it should have double or
283:40 - it should you know contain all double
283:43 - elements while if you want to use
283:47 - structure you could declare multiple
283:53 - um date type inside this particular
283:56 - collection so in order for us to use
284:01 - um structure in C we're gonna be using
284:03 - this particular keyword
284:05 - Strat
284:07 - okay so this is how we could create a
284:12 - structure in C programming so struct so
284:15 - variables inside the structure are
284:18 - called members of the structure okay so
284:22 - now let's try to define a structure in C
284:26 - so they're very example we want to
284:30 - um
284:31 - try to declare a strap courses so all we
284:36 - have to do is specify the keyword
284:39 - strap
284:40 - okay and then this is going to you know
284:43 - make sense later on if we want to access
284:46 - the members of this particular struct so
284:50 - for now let's just stick to this strap
284:53 - is the keyword that we could use to you
284:56 - know declare or Define a structure in C
284:59 - so again that's the keyword strap and
285:03 - then we can specify the structure name
285:08 - so this could be any any name that you
285:11 - want to for example we could name this
285:13 - courses
285:15 - okay
285:18 - so this particular courses
285:20 - uh this will contain different variables
285:23 - okay so as you can see here we have
285:26 - added curly braces opening and closing
285:29 - curly braces and then at the end of the
285:33 - closing curly brace this semicolon that
285:36 - signifies the end of this particular
285:38 - line okay and then inside here as I've
285:42 - said we could have multiple variable
285:45 - type okay so for example
285:50 - number one
285:52 - will be
285:54 - Char or car and then we could name this
285:58 - for example website
286:00 - and then the length is 50.
286:04 - okay and then semicolon
286:08 - and another one
286:10 - car
286:12 - or Char and then subject will be
286:16 - the length 50
286:19 - and then
286:21 - the last one uh the last one will be
286:23 - about price
286:25 - okay so as you can see here guys we have
286:29 - this truck courses
286:32 - and then it contains
286:34 - three different data types
286:37 - of variables so we have here website
286:40 - with land 50 subject Lan 50 and then
286:43 - price which is uh an in or or of type in
286:48 - okay that's how easy for us to you know
286:51 - Define a structure in C now we could
286:55 - um
286:56 - uh access this the struct
287:01 - courses but basically we need to move
287:05 - this outside of our main function
287:09 - so we have to move this
287:12 - I'll just have to cut and paste this
287:16 - so it should be outside our main
287:18 - function
287:19 - because we're going to declare or I mean
287:22 - access the
287:25 - shot from this main function right here
287:29 - okay
287:31 - so you could think of this uh if you are
287:34 - into
287:35 - object-oriented programming you could
287:37 - think of this as a class for now but um
287:40 - this is different
287:41 - because this is a structure which is a
287:44 - collection of you know different
287:46 - variables or different data types but
287:49 - you could think of this as you know an
287:53 - object or a class for now and then we
287:56 - could access this inside our main
287:58 - function so in order for us to access
288:00 - that we just need to
288:03 - specified name
288:06 - of our
288:08 - strap inside our main function so all we
288:11 - have to do is use again the struct
288:13 - keyword
288:16 - like this and then
288:18 - the name of the strap which is courses
288:22 - okay and then
288:25 - um
288:25 - we could assign an alias to this if for
288:29 - example
288:31 - course or maybe see a big letter c
288:34 - okay
288:36 - big letter C okay and then semicolon so
288:39 - that's how we could
288:42 - um
288:42 - access this courses struck inside our
288:46 - main function so all we have to do is
288:48 - like
288:50 - um use this track keyword and then the
288:53 - name of our struct which is courses and
288:55 - then assign assign an alias to this uh
288:58 - strap
288:59 - okay and then after that one we could
289:03 - initialize
289:06 - perhaps our
289:08 - variables
289:11 - okay or members of this strap
289:14 - so all we have to do is we could say
289:16 - here initialization
289:19 - we could now access the members of The
289:23 - Struck courses by using this Alias so
289:26 - initially for example
289:30 - SDR copy
289:32 - okay so I believe I I have already
289:35 - showed you how you could
289:38 - um assign a value to a string because
289:40 - we're going to be assigning value to
289:42 - this website so this is a string
289:44 - collection of
289:46 - um characters
289:48 - so Str cpy and then we're gonna say here
289:52 - C
289:55 - and then website so as you can see here
289:59 - we have the access to all the members of
290:04 - the courses struck so we're going to use
290:08 - the website first and then we're going
290:11 - to assign a value here for example
290:15 - triple w
290:16 - [Music]
290:18 - programming knowledge something like
290:21 - that
290:22 - so basically what we're doing here
290:25 - um.com we're just doing here is
290:29 - um Warrior jazz
290:31 - getting the website
290:36 - member and then assign a value to that
290:38 - which is the triple w dot
290:41 - programmingknowledge.com and after this
290:44 - we could you know access the this value
290:47 - by using this member of struck so later
290:52 - on we will try that but for now let's
290:54 - just move to the next member so again
290:58 - we're going to use SDR copy
291:02 - SDR cpy and then now we're going to use
291:07 - the
291:08 - subject
291:10 - subject
291:13 - so this the subject will be
291:16 - introduction
291:18 - to C programming
291:24 - so that will be the subject for this
291:25 - particular course so again we're just
291:28 - doing here
291:30 - um we're just getting the subject member
291:33 - of our strap and then assign a value to
291:36 - that which is this
291:38 - string introduction to C programming
291:42 - okay and of course the other one or the
291:46 - last one will be the price
291:49 - so what we do here is use the C Alias
291:52 - that and then
291:55 - price
291:57 - and then we could assign a value here
291:59 - for example we want to
292:02 - um specify a value or a price here like
292:05 - 15 or something
292:07 - and then after that after initialization
292:10 - of course we can use these values right
292:14 - here
292:15 - so all all we have to do is we can say
292:18 - here print so we could use printf
292:20 - statement
292:22 - and then we could say here website
292:27 - percent
292:29 - um semicolon our colon and then present
292:31 - s
292:33 - and then we're going to add new line
292:36 - here
292:38 - comma and then the member of our
292:43 - strap so C Dot and then website okay and
292:48 - then semicolon at the end so we're going
292:51 - to do the same for the other members
292:54 - so
292:56 - the next
292:58 - one is the subject
293:01 - so percent s
293:05 - and then backslash n
293:08 - and then
293:09 - we're going to access the subject member
293:14 - of struck and then the last one will be
293:16 - printf
293:19 - I'm in the price
293:21 - so price
293:23 - we're going to do the same here percent
293:27 - um d That's the format specifier for our
293:31 - uh integer values
293:33 - so C dot price okay and then semicolon
293:39 - at the end of this line to denote that
293:42 - this ends with this semicolon okay so
293:46 - now let's try this let's uh build and
293:49 - run a program and we are we're having an
293:53 - error here
293:54 - are respected
293:56 - because expected that's because
294:00 - um we didn't we did not add the
294:02 - semicolon here
294:04 - okay Rocky mistake build and run and as
294:08 - you can see here we now have
294:11 - the values displayed here in our console
294:15 - so the website is triple
294:17 - www.programming.com and then subject is
294:21 - Introduction to C programming and the
294:24 - price is 15
294:25 - so that's how easy for us to use struck
294:28 - in C and then we could you know make
294:32 - this
294:34 - um collection of different variables and
294:37 - then we could assign values initialize
294:39 - and then we could also change if we want
294:42 - to change the values after
294:43 - initialization and then after that we
294:46 - could display the values or the actual
294:48 - values of the members of our struck and
294:52 - in this video guys we're gonna learn how
294:54 - to use unions Insider C program so from
294:58 - the previous tutorial we learned how to
295:01 - define and use structure and then we
295:05 - also implemented different methods or
295:08 - different functions that we could use
295:10 - whenever we are working with structure
295:13 - right so at this point in time we will
295:17 - be learning how to use Union also so
295:20 - basically Union and structure is almost
295:23 - the same but there's a significant
295:25 - difference that we will discuss later on
295:27 - so the thing about struck is or the
295:31 - thing about structure is that we can
295:33 - store different data types in different
295:36 - memory location
295:37 - but when we say Union we can store
295:40 - different data types in the same memory
295:43 - location so that being said
295:47 - um if we try to Define Union a union is
295:51 - a special data type available in C that
295:54 - will allow us to store different data
295:56 - types in this um in the same memory
295:58 - location so you can define a union with
296:01 - many members but only one member can
296:05 - contain a value at any given time that's
296:09 - because we store the data inside the
296:14 - same memory location so in other words
296:16 - all the members of the Union share the
296:21 - same memory location that's why every
296:24 - time we set a value to a particular
296:26 - member of the Union other values will be
296:29 - over
296:30 - um
296:31 - will be erased and then replaced with
296:33 - the new value of a particular member
296:39 - so to Define a union you must use the
296:43 - union statement so from the previous
296:46 - tutorial we use track for the structure
296:49 - but in the case of defining a union we
296:52 - will Define a union by using the union
296:55 - statement in the same way as you did
296:58 - while defining the structure and the
297:02 - union statement defines a new data type
297:04 - with more than one member for your
297:07 - program so basically it looks like this
297:12 - but
297:14 - um instead of a struck you're gonna use
297:16 - Union okay so that's Union
297:22 - and then of course the name of your uh
297:25 - Union for example data right there
297:29 - and then you have to add open and close
297:32 - curly braces that signifies that all the
297:36 - variable inside this curly braces
297:39 - is a member of the Union data
297:45 - okay and then of course we can
297:48 - Define the members here so the same
297:51 - thing with our structure so that being
297:54 - said we can say here int I
297:58 - okay and then we can also
298:02 - um add float
298:04 - f
298:06 - and that's it for example Char SDR
298:10 - and basically for example the length for
298:13 - this is like 10.
298:16 - okay so let me show you first how this
298:20 - particular Union works
298:23 - so
298:24 - the union tag is optional actually and
298:28 - each member definition is a normal
298:31 - variable definition so such as I or int
298:34 - I or float
298:37 - um f
298:38 - or any other valid variable definition
298:40 - and at the end of the Union's definition
298:42 - before the final semicolon
298:46 - you can specify one or more Union
298:49 - variables but is but it is optional
298:53 - so you can also say here the name of
298:57 - your union is like
299:01 - um data okay so you can refer to this
299:04 - data and then you can now add you now
299:08 - have the access to the members of your
299:10 - Union by using this reference okay now a
299:14 - variable of data
299:16 - type can store integer
299:21 - float or string of characters so it
299:26 - means a single variable and then same
299:29 - memory location can be used to store
299:31 - multiple types of data so you can use
299:34 - any built-in or user-defined data types
299:37 - inside a union based on your requirement
299:39 - so it depends on you so the memory
299:42 - occupied by a union will be large enough
299:45 - to hold the largest member of the Union
299:50 - so for example in this particular code
299:54 - data type will occupy 20 by or I mean 10
299:58 - bytes of memory space because this is
300:01 - the maximum space which can be occupied
300:04 - by a character string now we can display
300:08 - the values
300:10 - of this Union so for example we try to
300:14 - display all the I mean
300:17 - any value coming from this Union so at
300:21 - first we could you know refer to the
300:24 - members by using this reference so data
300:29 - that and then we could say here
300:32 - I then we could initialize this value
300:35 - into for example
300:37 - um five like that and then we could
300:41 - print the value of I so here we could
300:44 - say
300:45 - the value of I
300:49 - yes and then of course we need to have
300:52 - the
300:53 - format specifier for our I Okay so
301:00 - d and then we could add also the new
301:03 - line
301:04 - and then
301:06 - comma and then of course data Dot I okay
301:13 - and then semicolon so let's try to run
301:17 - our program so basically let's hope that
301:21 - we won't have problems so build and run
301:24 - a program and as you can see here the
301:28 - value of I is 5. so we were able to set
301:34 - the value of our data
301:37 - I member and initialize it to five now
301:43 - take a look at this
301:46 - for example we set the value of float
301:49 - into a something
301:51 - into some value for example data that
301:56 - f
301:57 - equals to for example let's say 22
302:02 - or maybe like eight
302:07 - okay and then
302:10 - um
302:10 - we could
302:12 - try to maybe add 8.5 here
302:17 - just to make sure that it is kind of
302:19 - like float value
302:21 - so we set the value of our F into
302:26 - 8.5
302:28 - so we could you know build and run our
302:31 - application
302:34 - and as you can see here
302:37 - we're getting the value of I is
302:40 - something like this
302:44 - okay so the value of I is something like
302:48 - this
302:49 - that's because
302:51 - the value has been you know corrupted
302:54 - when we try to set the member F into
303:00 - something like 8.5 and as you can
303:03 - probably remember that the members of
303:08 - the union shared the same memory
303:10 - location so that's why if we try to
303:13 - change the value of a certain member
303:15 - then it will override the value of the
303:20 - other member so that's why it's somehow
303:23 - corrupted or value of I here and we're
303:27 - getting this random number like this but
303:31 - the purpose of using Union actually is
303:34 - to have a some sort of a value at a
303:39 - certain point of time so for example if
303:42 - we want to make use of the union we
303:44 - could try to display the value of I
303:48 - right here after the initialization so
303:52 - the value of I is and then we're getting
303:54 - the the value of I remember here and
303:59 - then also if you want to you know
304:01 - display the value of the float f
304:05 - uh value or remember from this Union
304:08 - then we could what we could do here is
304:11 - change this into f
304:14 - that's the form of specifier for a float
304:17 - value and then we could say here the we
304:21 - want to display the member F from the
304:25 - data Union so we could actually get the
304:29 - correct value right after this so let's
304:31 - try to run this
304:34 - so build and run our application and as
304:38 - you can see here
304:39 - that we're getting the value of our I is
304:43 - 5 so let's change this instead of I this
304:47 - is member f
304:51 - and this is member I because this is a
304:57 - member of this Union
304:59 - so let's build and run our application
305:01 - and we're getting this output the value
305:04 - of member I is equal to 5 and then the
305:08 - value of member f is equal to 8.5 so
305:12 - that's basically the correct value that
305:14 - we're getting or we're setting here in
305:16 - our main function okay so I think that's
305:20 - all there is to it for this tutorial and
305:22 - a sort as a sort of summary or review we
305:25 - have learned how to use Union Insider C
305:28 - program and then we learn that we can
305:32 - store different data types in the same
305:34 - memory location by using this Union
305:37 - keyword and then store different
305:40 - variables with different data types and
305:44 - um yeah we also set and initialize the
305:47 - value of the members of our Union and
305:51 - then also display the values
305:54 - individually right here in our C program
305:57 - and in this video guys we're going to be
305:59 - be discussing type def in C programming
306:03 - so as a sort of review in the previous
306:06 - tutorial we have learned how to use
306:09 - unions and how to implement unions
306:12 - inside our C program and we also have
306:17 - implemented a simple solution or simple
306:19 - program that implements the
306:24 - capability of unions in C so as I've
306:27 - said in this video we're going to be
306:28 - discussing type Def and yeah I'm going
306:31 - to show you how you can use typedef
306:33 - inside your program or C program so
306:38 - basically guys C is such a dominant
306:41 - language of its time and even now that
306:45 - even you can name those primary data
306:49 - type of your own and can create your own
306:53 - name data type by blending data type and
306:58 - its qualifier so it means that we could
307:01 - create our custom name for our qualifier
307:04 - or custom name for our primary data type
307:09 - and then we can use the keyword type def
307:12 - right here and this is a
307:17 - keyword
307:19 - implemented to tell the compiler for
307:22 - assigning an alternative name
307:24 - to the existing data types this keyword
307:30 - type def typically employed in
307:34 - association with user-defined data types
307:37 - in cases if the names of data types turn
307:40 - out to be a little complicated or
307:43 - intricate for a programmer to to get or
307:48 - to use within a programs of their cases
307:51 - that a particular data type or a name of
307:55 - a particular data type is like
307:58 - complicated and it's not easy to be used
308:02 - inside a program so that's where the
308:04 - type def comes in so it can be used to
308:09 - make the naming of our data types or
308:12 - variables in C a lot a lot easier so the
308:17 - typical format for implementing this
308:19 - type Dev keyword is like this
308:22 - we can
308:25 - use the type def keyword
308:30 - just like that and then we could specify
308:33 - the existing
308:36 - names
308:39 - of
308:41 - data types
308:43 - or data type
308:45 - data type
308:46 - okay and then of course right after that
308:49 - is the alias
308:53 - user given
308:56 - name so
308:59 - again we're gonna use the type def
309:01 - keyword and then of course the existing
309:04 - names of data types so there are like
309:07 - int signed in unsigned
309:11 - um char
309:13 - and other primitive data types inside
309:16 - our C program and then of course we're
309:18 - going to add the user given name which
309:23 - is uh the custom name that we want to
309:26 - name this particular
309:30 - um existing names uh data type so it
309:33 - this is going to make sense later on if
309:37 - you try to implement this inside RC
309:39 - program so for now just think of this as
309:42 - the syntax of
309:44 - defining or how to name our existing
309:48 - data types
309:49 - so type Def and then existing names of
309:52 - of data type and then Alias or the user
309:56 - given name so we could
310:00 - um add here a sample snippet
310:03 - so like this type def okay and then sign
310:10 - long
310:12 - okay
310:13 - and we're going to give this
310:18 - um user given name as as long
310:21 - okay so basically guys if you have or if
310:25 - you are trying to Define assign long
310:29 - um data type so it's going to be
310:32 - complicated or like it's going to have a
310:36 - long
310:38 - um name because you can do it like this
310:41 - sign
310:43 - long and then say for example variable
310:47 - one and then sign long var2 sine
310:53 - long VAR 3 and so on so as you can see
310:58 - the name of this particular variable or
311:00 - the data type
311:03 - um has like signed and then long keyword
311:06 - so it's going to take up more space take
311:09 - more uh we're going to type more text
311:13 - inside our program instead of just using
311:16 - it like this so all we have to do is
311:20 - Define it like type Def and then sign
311:24 - long and then as long and then we could
311:27 - implement this
311:31 - set of like that
311:33 - we could Implement that by using
311:35 - something
311:36 - as long
311:38 - and then G
311:40 - okay
311:41 - so basically what we're doing here is
311:44 - that we're we're just getting this Alias
311:46 - from there and then
311:50 - um it's going to include all the data
311:53 - types or existing names of data type
311:55 - here so the S long is associated with
311:59 - this right here so we can declare or
312:03 - yeah create a variable with the sign
312:06 - long data type something like that and
312:09 - then of course we could add a variable
312:13 - just like this
312:15 - it will allow us to create two variables
312:17 - name
312:18 - G and D which will be of type
312:24 - sine long and this quality of sign long
312:28 - is getting detected from s long
312:31 - okay which already defined the meaning
312:34 - of Islam or as long in your program
312:37 - which is this particular meaning sign
312:40 - long okay and right after that
312:44 - we could make this or the concept of
312:47 - type type def can be implemented
312:50 - for defining a user-defined data type
312:54 - with a specific name and type
312:57 - and this type def can also be used with
313:01 - structure
313:03 - of C language and of course we already
313:07 - have
313:08 - tackle demonstrated how we can use strap
313:12 - inside RC program so basically what we
313:15 - could do here
313:17 - as I've said we could add or use this
313:21 - keyword type def in our structure
313:24 - so
313:25 - the syntax is like this
313:28 - all we have to do is type in
313:32 - type Def
313:34 - and then strap
313:37 - and then say for example student
313:41 - so this particular struct is named a
313:44 - student and then
313:47 - it has like the
313:50 - members of this truck is
313:54 - of type Char and then say for example s
313:58 - name which is the name of the student
314:02 - okay and then we could say here in s
314:09 - H okay so this particular struct saved
314:14 - um a
314:16 - data which is the name and the age of
314:20 - the student and of course we could
314:24 - add an alias to our struct so for
314:27 - example stood
314:29 - okay
314:31 - so just like that and then of course we
314:34 - could use this track inside our main
314:36 - so for now let's get rid of this
314:40 - so what we could do here is we could say
314:43 - stood
314:45 - and then
314:47 - St something like that and then we can
314:50 - see here
314:53 - printf
314:55 - and then enter student details
314:59 - okay
315:00 - you could add a new line here
315:06 - semicolon and then we could copy and
315:09 - paste this
315:13 - you can see here
315:17 - enter student name
315:23 - and we're going to
315:26 - add a tab slash T and then we could what
315:30 - we could do here is use the scanf
315:32 - function
315:35 - so percent s and then we're going to be
315:38 - passing the SD Dot
315:42 - s name
315:44 - so all we're doing here is just
315:46 - assigning a value of this SDS name
315:51 - coming from our user
315:54 - okay and then second line or the second
315:58 - information that we need is all about
316:00 - the age of the student
316:03 - so enter the
316:06 - age
316:09 - okay so we should add backslash n right
316:12 - here
316:13 - to add a new line
316:17 - okay
316:18 - so what we can do here is scan F and
316:22 - then
316:24 - percent
316:27 - the
316:28 - okay and then we can say here SD dot h
316:35 - okay
316:36 - and then print f
316:40 - um
316:42 - just like this
316:45 - backslash and for a new line and then we
316:48 - can say here input
316:50 - done okay
316:53 - and of course we could display this if
316:56 - we want to you know to get all the
317:00 - information that we have entered the
317:02 - name and the age of the student okay but
317:06 - for now let's let's uh let's just try
317:09 - this
317:10 - build and run our program
317:13 - okay so we have here the output enter
317:17 - student details so the first name or the
317:20 - the first option will be the name
317:22 - so we can say here John
317:25 - and then the second option is the H so
317:30 - enter the age of the students for
317:32 - example the age of the student is 18.
317:35 - and then
317:37 - yeah we need to add
317:42 - um it says here that the main.xe has
317:45 - stopped working
317:46 - we need to add the
317:52 - um Ampersand here and then build and run
317:55 - our program once again
317:57 - so I hope this work this would work
317:59 - right now
318:00 - so John and then the age of the student
318:03 - will be 18. so input done okay so
318:08 - basically guys we could
318:11 - um
318:12 - Define our strap with the use of type
318:15 - def
318:17 - um
318:18 - keyword just like this and you see as
318:22 - you can see here we Define our
318:26 - um
318:27 - stood
318:30 - um Alias right here and then we we use
318:33 - that stood aliens right here to name our
318:38 - variable St and then from that our SD we
318:43 - could access the members by using the
318:46 - dot symbol so St that and then the
318:49 - members of our struck student okay and
318:54 - in this video guys we're going to
318:55 - discuss what is file handling in C and
319:00 - then I'm going to give you a basic
319:03 - example we're going to create a program
319:05 - on how to handle files inside our C
319:09 - program so basically guys
319:11 - um see file is input or output functions
319:14 - handle data on our secondary storage
319:18 - devices such as our hardest and C can
319:23 - handle the files as stream oriented data
319:27 - or system-oriented data or binary files
319:32 - so again guys we're going to focus on
319:35 - this so the first one will be
319:38 - stream oriented
319:43 - data files and the second one will be
319:47 - system oriented
319:51 - data files okay so when we say stream
319:55 - oriented data files
319:57 - the data is
320:01 - the data is stored
320:04 - in the same
320:06 - manner as it appears
320:11 - on the screen okay so I I hope you can
320:14 - see that the input output operations
320:18 - like buffering data conversions take
320:22 - place automatically while system
320:25 - oriented data files
320:28 - the data files are more closely
320:33 - associated
320:37 - with the operating system and data
320:41 - stored in memory without converting into
320:45 - text format so this is going to make
320:48 - sense later on when we try to implement
320:50 - our very simple file handling Insider C
320:54 - program now there are five major
320:58 - operations that can be performed on
321:01 - files so this will be
321:06 - again I'm just gonna list it uh list it
321:09 - here just for you to see because I think
321:12 - it would be much clearer if you can see
321:15 - all the details all the things that I'm
321:20 - talking here so see file operations
321:27 - so
321:28 - the first one will be creation of a new
321:31 - file
321:33 - the second will be opening
321:36 - the third one will be reading
321:39 - the fourth
321:41 - yeah fourth one will be writing
321:45 - data
321:48 - you know file
321:50 - and last
321:52 - will be closing a file so these are the
321:58 - five major
322:00 - file operations the first one is great
322:03 - again creation the second is opening so
322:06 - we could open an existing file
322:09 - and then we could read the contents
322:13 - and then write data into a file so for
322:16 - example in your program you want to save
322:17 - an information so you could write data
322:20 - into a file okay and then of course
322:24 - whenever we are opening a file we need
322:27 - to close it after using it inside our
322:30 - program okay so the steps there will be
322:36 - steps for us to set up the file
322:39 - operations
322:40 - so these are the steps for
322:45 - processing a
322:47 - file
322:49 - so number one will be declare
322:54 - a file pointer
322:56 - so this is important
322:59 - so we need to declare a file pointer
323:01 - variable
323:03 - and then this will be our variable that
323:07 - we we're going to use whenever we want
323:09 - to work with our files and then after
323:11 - that one we need to open
323:15 - a file
323:17 - using
323:19 - F open
323:22 - method or function Okay so
323:26 - after that we're going to process
323:30 - this will be number three
323:33 - process the file using the suitable
323:38 - function
323:40 - right here
323:41 - and number four will be closing
323:46 - close the file using F close
323:50 - function also so if we want to work with
323:55 - files inside our C program we want or we
324:00 - we might want to check this
324:03 - steps for processing our files so we
324:07 - need to declare a file pointer variable
324:09 - and then we're going to open the file
324:12 - using the F open function right here
324:16 - and then process the file using the
324:19 - suitable function
324:21 - so for example we want to
324:24 - iterate through the lines uh inside the
324:27 - file if you want to save or maybe write
324:31 - information into the file you can do
324:33 - that here in step three meaning you
324:35 - could process the entire content of that
324:38 - particular file and then right after
324:41 - processing maybe uh you need to close
324:45 - the file or not maybe you must
324:47 - uh close the file after closing or after
324:52 - processing it inside our C program so
324:55 - basically guys there are a lot of
324:57 - functions that we could use when when we
324:59 - say
325:00 - um we're processing a file so to handle
325:03 - files in C
325:06 - file input or output functions available
325:09 - in the stdio library are the following
325:13 - so I'm just gonna list it also here for
325:17 - you to see
325:18 - so we also we already discussed the the
325:22 - two functions
325:25 - the first one will be F open and the
325:28 - second one be uh the second one will be
325:30 - F close there are also uh functions such
325:35 - as get C
325:38 - which means
325:39 - um we read a character from a file and
325:43 - then we also have put C
325:46 - so this function put C writes a
325:50 - character into a file and then also we
325:53 - have get W which means we need to read
325:58 - an integer
325:59 - from a file and then we also have put W
326:03 - so write an integer
326:06 - and we're going to use this later on
326:09 - this particular functions okay so you
326:12 - need to be familiar with this again if
326:15 - you want to read characters from a file
326:18 - you need to use this get C and then if
326:21 - you want to write
326:22 - character it into a file you you need to
326:26 - use put C and get W gets the integer
326:30 - and put W write an integer into a file
326:34 - and then we also have f printf
326:38 - so F printf
326:41 - prints formatted output into a file and
326:46 - we also have F scan f
326:49 - so reads formatted input from a
326:53 - file we also have F gets right here
326:58 - so F gets a read string of characters
327:02 - from a file and we also have
327:08 - the next one will be F puts and then the
327:13 - last one is f e o f so F puts right
327:19 - string of characters into a file and
327:21 - then we also have feof so it will
327:25 - detects end of file marker in a single
327:29 - file okay now
327:33 - as a sort of
327:35 - example we're going to implement a
327:38 - simple opening and closing of a file and
327:41 - maybe writing a
327:44 - specific text or something into our
327:48 - file so we're gonna do that right here
327:50 - so at first we need to
327:53 - remember the the steps for processing a
327:57 - file we need to declare a file pointer
328:00 - so in order for us to do that we're
328:02 - going to have to follow this syntax
328:07 - right here I'm just going to copy and
328:09 - paste it here file open so as I've said
328:13 - we're going to use this function f open
328:15 - and these are the possible
328:21 - um
328:21 - parameters that you could use okay so to
328:26 - put it simply we could use this
328:30 - we could declare a pointer variable so f
328:35 - p and then see me colon and then we're
328:39 - going to use that pointer variable
328:42 - and then
328:43 - use the F open function
328:46 - right here and then we could say here
328:50 - file name
328:52 - that
328:53 - txt and then another
328:58 - parameter and then we're going to use
329:00 - here W so w means that the file is being
329:03 - open for writing and if the file does
329:07 - not exist then uh there will be new file
329:13 - um created Okay so
329:16 - um let's just return zero for now
329:20 - okay
329:23 - after that
329:26 - we could close our file
329:30 - okay
329:32 - if we open the file we can also close
329:35 - this so what we what we need is to use
329:39 - the F close function and then
329:42 - passed in the
329:44 - pointer variable which is FP right here
329:49 - okay and
329:51 - right after opening the file and before
329:54 - closing the file this is where the
329:57 - processing of the file uh processing of
330:00 - the file happens
330:02 - processing of the files right here
330:06 - cross and uh processing
330:10 - okay so inside of processing we could
330:12 - just simply
330:14 - if you remember we have different
330:17 - functions
330:18 - so get C put C
330:21 - F printf so we're going to use this
330:26 - so for now let's just say
330:28 - uh
330:30 - F print F okay and then open and close
330:34 - and then semicolon and inside here we
330:38 - can specify the pointer variable which
330:41 - is FP and then of course
330:44 - um
330:46 - percent s
330:50 - percent s
330:52 - where is it
330:55 - percent s there you go and then
330:59 - hello world
331:03 - where okay hello world
331:07 - there you go so after this
331:11 - we could save our
331:15 - file and then
331:17 - build and run okay so for now we're
331:22 - getting process return zero it means
331:25 - that the execution of the program is
331:30 - successful so we're going well we're
331:33 - trying uh we're going to try to open the
331:37 - um
331:38 - file that we have created and as you can
331:42 - see here I have my
331:46 - project right here
331:48 - from documents code blocks projects and
331:51 - then programming knowledge and then if
331:53 - we try to open this we can see the text
331:57 - hello world okay so there you have it on
332:01 - how you can write files or write lines
332:03 - of strings into our file by using this
332:08 - simple program right here and I think
332:11 - that's all there is to it in this video
332:13 - in the next tutorial we're going to read
332:18 - um text inside our
332:21 - files and then display it in our
332:25 - maybe console or we want to if we want
332:29 - to process the contents of the file
332:31 - Insider C program in this video guys
332:33 - we're going to continue working and
332:37 - discussing file handling in C
332:40 - programming so from the previous
332:42 - tutorial so actually this is part two of
332:45 - the file handling video tutorial and in
332:48 - the previous tutorial we discussed the
332:51 - basics of file handling and also discuss
332:55 - the five major operations that can be
332:57 - performed
332:59 - um on a file so for example the creation
333:01 - as the first operation and then opening
333:05 - Reading Writing and closing a file and
333:10 - also we discuss the steps for processing
333:13 - a file so basically if you want to
333:17 - handle files inside your C program
333:21 - you need to declare a file pointer
333:24 - variable as the first step and then the
333:28 - second step will be opening a file using
333:31 - the F open function and then right after
333:34 - that one process the file so for example
333:37 - you want to count the number of lines
333:40 - um inside of that particular file or you
333:44 - want to add something to that file you
333:46 - can do that so that's the processes or
333:49 - processing of the file and then of
333:52 - course closing the file using the F
333:55 - close function and from the previous
333:58 - tutorial also we briefly discussed the
334:02 - different functions that we could use
334:03 - when we are handling files in C so for
334:06 - example the get C the putsy
334:10 - um get W and put W and the other
334:13 - functions so in this video guys I'm just
334:16 - going to show you how you can read
334:20 - the content of a file and display it in
334:23 - your simple program so we're just going
334:26 - to use this main function right here so
334:29 - I have here the main.c
334:31 - um file yeah main.ca file and then we're
334:35 - just gonna use this main function right
334:38 - here just to get the contents of our
334:42 - file so as you can probably remember
334:44 - from the previous tutorial we already
334:46 - created the file inside our file system
334:50 - and let me show you that
334:54 - okay so I have here the file and then
334:57 - file name that text and it contains the
335:00 - text
335:02 - um
335:03 - hello world as you can see here so this
335:06 - is written from our C program and in
335:10 - this video we're going to read this by
335:12 - using also our C program so in order for
335:16 - us to again if we want to handle files
335:19 - in RC the first step is to declare a
335:23 - pointer variable so the pointer variable
335:27 - goes like this so we need to
335:30 - call on this file class and then add the
335:35 - semicolor I mean the
335:38 - asterisk or star symbol as you can see
335:41 - here and then of course the name of your
335:44 - variable so I'm just gonna name it file
335:47 - name and then semicolon at the end so
335:50 - this is our
335:53 - pointer variable
335:56 - as I've said this is the first step
336:00 - for handling
336:02 - files in C we have to declare a pointer
336:07 - variable and then
336:09 - The Next Step
336:12 - since we're getting the content of a
336:15 - file I just want to assign the content
336:17 - of a file into a single variable so for
336:20 - example I'm just going to declare here
336:22 - another variable uh car or Char CH or
336:27 - the name of the variable is CH and then
336:30 - I'm just going to assume the length
336:32 - um
336:33 - 100 there you go and then semicolon so
336:37 - basically this particular variable will
336:40 - hold
336:41 - the contents of our file okay
336:46 - next line will be
336:48 - using the file name variable right here
336:51 - which is our pointer variable
336:54 - and then the second step in the process
336:57 - is of course open the file by using F
337:00 - open function we already use this
337:03 - function from the previous video so in
337:06 - here we're just going to specify uh
337:09 - specify the name of the file which is
337:12 - file name that text as you can see here
337:15 - so that will be file name that txt and
337:20 - then we're gonna use the
337:23 - um
337:24 - R symbol okay that's basically
337:29 - um reading the file name or I mean the
337:33 - file coming from our file system
337:36 - and then the next step is of course if
337:40 - we want to print the contents of our
337:42 - file so we're just going to use the
337:44 - printf function right here
337:47 - and then specify
337:50 - the
337:52 - um
337:54 - format specifier percent s
337:56 - because we're going to display
337:59 - um character or strings of character
338:02 - here coming from our file and then comma
338:05 - and then uh we discuss the function
338:10 - uh in the previous tutorial if gets
338:13 - F gets
338:16 - okay so basically this function
338:20 - um
338:21 - read string of characters from a file
338:25 - and this particular function takes a few
338:31 - parameters so for example we're just
338:32 - gonna
338:34 - um
338:35 - specify the parameters here
338:38 - so
338:40 - for example
338:45 - the variable ch
338:47 - that's the variable that will hold the
338:50 - contents of our file and then so for
338:53 - example 50
338:55 - this is the count of characters that
338:59 - we're going to allow to be saved in our
339:03 - Char CH variable and then of course the
339:08 - file name
339:09 - okay
339:12 - and as always if you are working with
339:15 - file since we're opening the file here
339:17 - we need to use also the closing function
339:22 - which is f plus right here and then
339:26 - we're going to specify the file name
339:30 - right here okay so for example the file
339:35 - name
339:36 - and that's about it
339:39 - and we can run our program right now
339:42 - let's just save this and build and run
339:47 - so it's going to Output hello world so
339:52 - for example just to show you a basic
339:55 - example let's just fill out our file
340:01 - hello world
340:03 - this
340:05 - here's a string
340:08 - from a file
340:12 - so we're just going to
340:15 - um this this
340:17 - so save and let's run again our program
340:23 - okay so as you can see here hello world
340:26 - comma and then this is a string coming
340:29 - from a file as you can see here so
340:32 - basically we successfully
340:36 - um read or get
340:38 - the contents of our file name.txt file
340:44 - okay so now there are other operations
340:48 - that you may want to do in your
340:53 - um
340:54 - file so for example you want to like
340:58 - count the number of lines that's
341:00 - possible again this particular symbol
341:03 - right here is uh like opening a file in
341:08 - a read mode okay so R that's basically
341:12 - what we use here
341:14 - so
341:16 - as I've said there are also other
341:17 - functions that we could use when trying
341:19 - to handle files in our C program
341:23 - and of course fgets is one of them but
341:27 - there are also so for example we have
341:31 - um
341:32 - get C
341:34 - so this reads a character from a file
341:41 - okay we also have
341:44 - um get w
341:46 - so this will be for reading an integer
341:52 - and we also have
341:55 - um fgets that's what we used here
341:58 - so F gets reads
342:02 - string
342:04 - string of characters
342:07 - from a file okay and then of course
342:11 - there are other functions that you could
342:14 - use to write
342:16 - this is right
342:19 - thing into the file so we have
342:26 - um put C
342:29 - um
342:29 - [Music]
342:31 - put w
342:33 - so basically put C writes a character a
342:37 - file and then put W write an integer to
342:40 - a file and then we have
342:43 - f printf
342:46 - for writing
342:47 - and we also have
342:50 - um f puts
342:52 - okay
342:53 - to write
342:56 - string of characters into a certain file
343:00 - so I hope you understand the basics of
343:04 - handling files in C and in this video
343:07 - we're going to be learning enumeration
343:09 - or enum in C so enumeration or enum is a
343:14 - user defined or user-defined data type
343:17 - and we can use Insider C program so it
343:19 - works like almost the same with strap so
343:23 - as you can probably remember from our
343:25 - previous tutorials we already discussed
343:28 - and used struct inside our C program so
343:32 - as I've said in this video we're going
343:33 - to be learning enumeration so that's
343:35 - that's where our Focus
343:37 - should be enumeration so enumeration is
343:40 - mainly used to assign names to integral
343:44 - constants and these names make program
343:48 - is easy to read and maintain so I'm
343:52 - gonna be showing you a graphic right
343:54 - here on how we can declare instantiate
343:58 - and operate with enumeration Insider C
344:02 - program so basically guys this is how we
344:06 - can
344:07 - um
344:08 - declare
344:09 - the enumeration right here so
344:12 - declaration we have this keyword enum
344:16 - and then the name of our enum variable
344:19 - so in this case days of week okay and
344:23 - then we have different states we have
344:25 - seven different states here that starts
344:27 - from the value zero the second will be
344:31 - one and the last one will be six so
344:35 - um all of this States these are called
344:38 - enumerators so this is just the list of
344:42 - constants separated by commas so this
344:45 - will help us to make our program easy to
344:48 - read and maintain because all of these
344:50 - enumerators are already already listed
344:53 - here so we know what values to get what
344:58 - values to assign to a certain variable
345:01 - if we want to use this inside our C
345:04 - program now after that declaration we do
345:08 - have this instantiation
345:09 - so in in sensation part we have also the
345:13 - name or the keyword enum right here and
345:16 - then of course the enum variable that we
345:20 - have declared
345:22 - uh on top so for example this one there
345:24 - is a week as you can see here and then
345:27 - of course we need to assign an object of
345:30 - enum days of week so basically guys this
345:33 - day
345:34 - is is just an object of our days of week
345:39 - in um as you can see okay and then right
345:42 - after that instantiation we can now use
345:45 - that in enumeration or enum
345:48 - um here in operation so for example you
345:51 - want to like assign a value to our
345:54 - object
345:55 - so they equals and then the value of our
346:00 - um enum that we want to use so for
346:03 - example this one in this case we specify
346:06 - that it should be Wednesday right here
346:11 - okay
346:12 - so
346:14 - we could assign the value just like that
346:18 - now we can use this inside RC program as
346:22 - I've said because we're dealing with
346:24 - enumeration or economic so we can
346:28 - um
346:29 - use our IDE to create
346:32 - our simple program implementing the
346:36 - enumeration or enum in C so for example
346:40 - we want to
346:42 - um
346:42 - like implement
346:45 - the days of a week
346:48 - so as I've said in our declaration we
346:51 - can use the
346:52 - enum
346:54 - keyword right here by the way guys you
346:57 - can declare enum locally
347:01 - you can declare
347:04 - enum locally
347:08 - or inside a function
347:13 - right here or
347:15 - you can do it here before our main
347:18 - function
347:20 - globally
347:22 - declare
347:24 - our enum
347:27 - okay so for example what we want to do
347:30 - this globally
347:33 - so our keyword enum right here and then
347:36 - the name of our
347:38 - for example in this declaration we have
347:42 - the enum keyword and then the name of
347:44 - our variable so days of week so for
347:47 - example in our case we're just going to
347:49 - use the week
347:52 - variable name and then inside here we
347:55 - can declare inside the curly braces so
347:58 - make sure you use curly braces and then
348:00 - semicolon at the end
348:03 - of this particular line to to signifi
348:06 - signify that it is the end of this
348:09 - particular line so inside here we can
348:13 - declare for example for Monday
348:17 - Tuesday
348:19 - Wednesday
348:21 - Thursday
348:26 - uh uh Friday
348:29 - Saturday
348:34 - and Sunday so that's how we can declare
348:38 - our enum variable
348:42 - again you have to use the enum keyword
348:45 - and then the name of our enum which is
348:47 - in our case here week and then open and
348:51 - close curly braces and you can declare
348:54 - the enumerators here and of course you
348:56 - have to specify the semicolon at the end
348:59 - of this particular line now in using
349:01 - this particular enum we can do it here
349:05 - inside a main function so we could
349:07 - again I use the enum keyword and then
349:11 - our
349:12 - name of our enum which is weak as you
349:15 - can see here so take note of that that
349:18 - we use the enum keyword and then the
349:21 - name of our enum and we can assign an
349:24 - object to this so for example day okay
349:27 - so
349:29 - that's how you can
349:31 - specify our enum object so enum keyword
349:36 - the name of our enum and then an object
349:40 - of our enum which is day
349:42 - so for example you want to assign a
349:45 - value to this so they
349:47 - equals for example Wednesday
349:52 - so
349:53 - you can just use
349:55 - wed
349:57 - and
350:01 - just three letters if you want but
350:04 - anyway you can use also the full
350:07 - um names of your contents but in our
350:10 - case we're just going to use the three
350:12 - letters to have like a uniform
350:15 - constant names okay so here we can use
350:19 - so for example Wednesday and then of
350:22 - course you can print this you can
350:25 - specify the
350:28 - percent the here and of course the
350:33 - object of our enum okay so let's try to
350:36 - run this and see how our
350:39 - uh what the output of our program so
350:43 - as you can see here we're getting two
350:47 - the value of our object is 2 because as
350:52 - you can see
350:54 - um
350:55 - are enumerators or the state of our
350:58 - numerator starts from zero so zero one
351:03 - and two so that's why we're getting the
351:05 - value of our object here as two but if
351:10 - we want to change this for example Sun
351:13 - for Sunday
351:15 - then run on build our program
351:18 - so the output will be six so by default
351:22 - guys
351:24 - um the value of our enumerators will be
351:27 - if we we did not assign a value to our
351:31 - enumerators the default value of this
351:34 - will be zero this one will be one
351:39 - this will be two
351:42 - as you can see if we try to hover over
351:44 - our Mouse here in our constant so we're
351:48 - getting two
351:50 - um this is obviously three but we're not
351:54 - getting the
351:56 - um like the hover over display
352:01 - four this is
352:03 - five and this is six so that's how our
352:07 - state is being
352:09 - initialized by the compiler so it is
352:12 - getting like
352:14 - the uh getting default values zero until
352:17 - to the last
352:20 - um State minus one of our
352:23 - enumerators okay so if we try to
352:30 - um initialize or
352:33 - States so for example we want to make
352:37 - this
352:38 - one we could do that so Monday will be
352:41 - one
352:43 - Tuesday is two
352:45 - Wednesday is three
352:49 - um
352:50 - Thursday is four
352:52 - Friday will be five
352:54 - Saturday will be six and Sunday will be
352:59 - seven so
353:01 - remember earlier
353:04 - we are getting
353:06 - two coming from Wednesday because that's
353:09 - the default state of our constant
353:11 - Wednesday
353:12 - but if you try to assign the value to
353:15 - our enum object here into Wednesday
353:18 - let's try to
353:20 - see the output
353:22 - okay
353:24 - so instead of 2 now we're getting the
353:28 - value free because
353:31 - we initialize already our variable and
353:36 - it's not assigning a default
353:38 - value
353:41 - to our States now here's an interesting
353:44 - facts about initialization of enum so if
353:49 - there are like two enum names
353:52 - um
353:53 - we can declare same value
353:57 - for example you want to declare value
353:59 - for Monday Tuesday we can like
354:03 - make this value one and one so it
354:07 - doesn't matter for this particular
354:09 - example because
354:11 - this is
354:14 - um allowed in C programming so we can
354:16 - have two
354:17 - uh enum names with the same value okay
354:22 - so for example
354:25 - we can
354:28 - comment this one out and we can try to
354:31 - display the value of our constant so
354:35 - percent
354:37 - d
354:40 - instead of day we can use Monday
354:46 - and
354:47 - um to stay there you go
354:50 - so build and run a program
354:53 - and we're getting this
354:56 - error right here
354:58 - okay
355:00 - we're getting that output because we
355:03 - have specified our PDF statement like
355:05 - this but if we wanna have uh we want to
355:09 - display the correct value then we're
355:12 - going to use this percent the percent D
355:14 - and then comma in between and then we're
355:17 - just gonna
355:19 - specify the two variable Monday and
355:22 - Tuesday and click and build and run our
355:24 - program and as you can see here we're
355:28 - getting values one and one so that's one
355:33 - of the interesting fact about declaring
355:36 - or enum variable we can use the same
355:39 - state or the same value for our constant
355:42 - so it doesn't matter in C that's because
355:44 - it is allowable in C okay