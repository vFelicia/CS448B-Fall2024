00:00 - hey guys welcome to the next video on
00:02 - Jenkins to troll for beginners in this
00:05 - video we will see what is a Jenkins
00:07 - pipeline and how to use pipelines in
00:11 - Jenkins so first of all what is a
00:15 - Jenkins pipeline so a Jenkins pipeline
00:19 - is a suit of plugins which supports
00:23 - implementing and integrating continuous
00:26 - delivery pipelines in Jenkins now to
00:30 - explain this I will reopen this diagram
00:33 - which I have shown you in the
00:35 - introduction of Jenkins so every change
00:38 - which you make in your software so for
00:41 - example you are a developer and you make
00:45 - the changes in the software
00:48 - and you push those changes into your
00:51 - code repository in our case for example
00:54 - we will take that kit repository right
00:57 - now the job of Jenkins here is to build
01:00 - your code in a reliable manner and then
01:04 - you may be having a different kind of
01:07 - testing for example unit testing or
01:09 - integration testing or different kind of
01:12 - testing so the job of Jenkins is to test
01:15 - your code and then at last deploy your
01:18 - code and even transfer this code into
01:22 - artifact repository and if you want to
01:25 - know more about Jenkins pipeline the
01:28 - documentation on the Jenkins website
01:31 - about pipeline is the best so just
01:35 - search for Jenkins pipeline and then you
01:38 - will be able to see this URL which is
01:40 - Jenkins dot IO 4 slash dog forward slash
01:43 - pipeline just click on this link and
01:46 - then you will be able to get all the
01:49 - details about pipeline on this page and
01:53 - when you scroll down you will be able to
01:55 - see this section which says what is a
01:58 - Jenkins pipeline and then if you want to
02:02 - learn more about pipelines then you can
02:05 - read this section so in simple words a
02:09 - pipeline is a script which gives Jenkins
02:13 - a series of jobs to do in a pipeline
02:17 - like manner and if you read this line
02:20 - the definition of Jenkins pipeline is
02:23 - written into a text file called a
02:27 - Jenkins file okay
02:29 - so we will create a Jenkins file in our
02:32 - repository or Jenkins allows us to write
02:36 - Jenkins file directly into the
02:40 - configuration of our Jenkins job and
02:43 - there are two ways of writing this
02:46 - Jenkins script which is declarative and
02:51 - scripted pipeline and you will be able
02:55 - to get more details about declarative
02:57 - script and scripted pipeline syntax here
03:01 - on this page itself so when you scroll
03:04 - down you will be able to see this flow
03:06 - diagram of Jenkins and when you scroll
03:10 - down more you will be able to see this
03:13 - section it says declarative pipeline
03:15 - fundamentals and in this video I'm going
03:18 - to show you exactly this so how to use
03:20 - declarative pipeline in Jenkins
03:23 - so in declarative pipeline syntax the
03:25 - pipeline block define all the work done
03:28 - throughout the entire pipeline so this
03:31 - is the simple syntax which allows us to
03:35 - define different stages and then inside
03:38 - the stages you can define different
03:39 - steps and all this starts with this
03:43 - keyword pipeline and then this is a
03:46 - groovy sandbox syntax so if you are
03:50 - familiar with that then it will be more
03:53 - helpful so you use the keyword pipeline
03:57 - and then in these curly brackets you use
04:00 - agent any and this means execute this
04:04 - pipeline or any of its stages on any
04:08 - available agent so every detail about
04:11 - the script you will be able to find here
04:15 - so for example there is a section called
04:18 - stages and inside the stages you can
04:21 - define different stage so for example
04:24 - there is a stage for build here there is
04:26 - a stage for test here
04:28 - and there is a stage-four deploy here
04:31 - right so we will be using this syntax
04:34 - into our Jenkins job now let's take a
04:38 - real use case which we can implement on
04:41 - our Jenkins job so if you remember we
04:45 - have created a maven project in the last
04:48 - videos and I have pushed this code on to
04:51 - the github repository so let's say we
04:55 - want to test this maven app and then we
04:59 - want to compile this maven app and we
05:02 - want to package this maven app using
05:04 - this Jenkins pipeline how we can do this
05:08 - using Jenkins let's see so I'm going to
05:11 - go to the Jenkins homepage and I'm going
05:14 - to create a new item here and this new
05:17 - item will be for example pipe line demo
05:22 - for example and in here you will choose
05:24 - this section it says pipe line okay so
05:27 - give the name of your Jenkins job and
05:30 - choose the pipe line section from here
05:32 - and then click OK which is going to
05:35 - create your chenkin job and then in the
05:37 - general you can provide any description
05:39 - about your project I'm going to skip all
05:42 - this and then here we are going to say
05:45 - our job is a github project so we are
05:50 - going to just click on this check box
05:52 - and then we can just copy this URL and
05:56 - then paste it here so this is a project
05:59 - URL and I'm going to scroll down we are
06:02 - going to skip this section for now which
06:04 - is build triggers you can define any
06:08 - triggers you want later but the most
06:11 - important section here is the pipeline
06:14 - section which we are going to use so in
06:16 - the definition you will be able to see
06:18 - two options here one is pipeline script
06:21 - another is pipeline script from SCM so
06:25 - we are going to see the first option
06:26 - first of all which is pipeline script
06:29 - and this enables us to define the script
06:32 - here in this section if you choose the
06:36 - pipeline script from SCM then you can
06:39 - define a Jenkins file
06:42 - in your project itself so I have already
06:44 - defined this Jenkins file in my project
06:49 - but for now I'm not going to use this
06:52 - Jenkins file this Jenkins file I'm going
06:55 - to show how to use this Jenkins trial
06:57 - from your github repository in the next
07:00 - video so for this video let's say this
07:03 - file doesn't exist so we are going to
07:07 - create this pipeline script here in our
07:11 - champions job configuration itself so
07:15 - for doing things faster I'm going to
07:18 - just copy this syntax which is given on
07:22 - the Jenkins documentation page so I'm
07:24 - going to just copy this and I'm going to
07:27 - paste everything here
07:29 - so the basic syntax is pipe line and
07:32 - then these curly brackets and you write
07:35 - agent any and I'm going to make this
07:38 - little bit bigger so you can see this in
07:41 - a better way and then you write stages
07:44 - and inside the straight is you define
07:46 - your stages for example so let me just
07:50 - change this script and now so instead of
07:53 - build what I want to do is I want to
07:55 - clone my gate repository so I'm going to
07:58 - just say clone repo here which is going
08:02 - to clone the github repository and
08:05 - inside the steps section you can define
08:08 - any shell script commands here so for
08:12 - example here you will write SH keyword
08:15 - before executing your command and this
08:19 - SH means your shell
08:21 - if you are running this Jenkins on
08:23 - Windows then you will write b8t here
08:27 - which is the batch come on ok
08:29 - so right now we are on Linux so we will
08:31 - use SH but if you are on Windows you can
08:35 - write dat here ok
08:38 - so SH and then in the double quotes what
08:42 - we are going to do is we are going to
08:43 - clone our git repository so the command
08:47 - for that is get clone and then the URL
08:51 - of your gate repository so I'm going to
08:54 - just
08:55 - click on this green button copy this URL
08:58 - from here and then paste it here so this
09:01 - is going to clone the repository now in
09:05 - the next step what we are going to do is
09:07 - we are going to clean our project using
09:11 - the maven clean command so I'm going to
09:13 - just write SH and then maven clean
09:16 - command is MVN clean and then you need
09:20 - to give the part of your project because
09:23 - when you clone your agate project there
09:28 - will be a directory which is clone which
09:30 - is my app and the parts you can give
09:34 - here using this flag minus F and then
09:38 - the directory name which is my app in
09:41 - our case so the command is ambient clean
09:44 - minus F and then the part of this
09:48 - directory which is clone this is the
09:50 - relative part that's why I haven't
09:53 - written the whole part here if you want
09:55 - to write the whole part or if you want
09:57 - to know the whole part I'm going to show
09:59 - you how to see the whole path also but
10:02 - just write this command here so this is
10:05 - going to clean our project now we are
10:08 - going to test our project now we are
10:10 - going to run the test on this project so
10:13 - for that we can just write SH and then
10:17 - we when we can just write MV n test
10:20 - minus F and then the path of your
10:25 - repository which is my app in our case
10:27 - and then to deploy I'm going to use the
10:31 - maven package command so SH and in the
10:35 - double quote I'm going to just write MV
10:37 - n package space minus f' and then my app
10:43 - which is the part of this directory okay
10:47 - so in the first stage we are cloning
10:50 - this repository and cleaning it so let's
10:52 - just write and clean okay so clone repo
10:57 - and clean it and in the second stage we
11:01 - are going to run the test so we have
11:03 - written this command and in the third
11:06 - step we are going to deploy our
11:08 - project and I'm going to use this
11:10 - command for that which is me package and
11:13 - I'm going to repeat once again so if you
11:15 - are on Windows this Sh keyword will be
11:19 - replaced by BA T keyword okay so because
11:25 - I'm on Linux I'm using SH command and
11:27 - now I'm going to just save my
11:30 - configuration and once my configuration
11:33 - is saved I'm going to just build my job
11:36 - using this button which says built now
11:39 - and now the build will start you can see
11:42 - Bill has been started let me just
11:44 - minimize this and you will be able to
11:46 - see your builder stages here so this
11:49 - view will show you which stage is
11:53 - executed right now so the clone and
11:57 - cleaning is done so first step is
12:00 - successful because we are seeing the
12:02 - green box here and now you can see at
12:05 - the end of this step this step was
12:08 - successful and the second step was
12:10 - successful which was the test so the
12:14 - cleaning and the test was successful but
12:17 - our deploy command have failed and let's
12:21 - see what is the reason for that so for
12:23 - finding out the reason I'm going to just
12:26 - click on this build history and then I'm
12:29 - going to go to the console output and
12:31 - you can see this is the directory where
12:34 - this project is cloned so I'm going to
12:37 - open a new terminal and I'm going to
12:40 - just write CD and this part and when I
12:42 - do LS here you can see there is my app
12:47 - directory which is cloned here and then
12:50 - we have run the clean command which was
12:53 - successful you can see build was
12:56 - successful and then we ran the maven
12:59 - test command which was also successful
13:02 - you can see all the tests were run and
13:04 - Bill was successful but at the package
13:08 - stage some problem occurred and you can
13:12 - see directly here the mistake which I
13:15 - have made intentionally here so you can
13:17 - see the command was mbn package -
13:22 - and the part and the part is false here
13:25 - so you can see my minus a P 1p is
13:29 - missing from this command so let's
13:32 - correct our mistake and then we will run
13:36 - our job once again so I'm going to go to
13:38 - the configuration once again and then we
13:41 - will correct our mistake which is
13:44 - correcting the spelling of the myapp
13:47 - part and we are going to save this
13:50 - configuration once again and I'm going
13:52 - to run the build once again and then you
13:55 - will be able to see the second build and
13:58 - now you can see this build has failed
14:01 - miserably so let's see the reason behind
14:04 - this why this bill failed so I'm going
14:09 - to just go to this build and then I'm
14:11 - going to go to the console output and
14:13 - then you can see the clone and then I
14:17 - can see this message which says fatal
14:20 - destination part my app already exists
14:23 - and is not empty directory so in our
14:28 - first build when we have cloned our
14:31 - project this directory was created and
14:34 - because this directory is already there
14:38 - the cloning once again will fail because
14:43 - this directory already exists so for
14:46 - this clone command to be successful we
14:49 - need to remove this directory and then
14:52 - once again clone it from the github
14:55 - repository so we are going to go to the
14:58 - configuration once again so I'm going to
15:00 - go to the configuration and then I'm
15:02 - going to go to the pipeline script once
15:04 - again I'm going to just maximize it and
15:07 - in the first step before the cloning
15:09 - what we can do here is we can just write
15:13 - SH and then we can just write RM which
15:18 - is the remove command and then I'm going
15:21 - to just add these flag RM minus RF which
15:25 - is going to recursively force the
15:28 - removal of all the files and then I'm
15:31 - going to give the name of my
15:34 - directory which is my app in our case so
15:37 - this command is going to remove this
15:41 - directory and then run the clone command
15:43 - so once again the cloning will take
15:47 - place and then this my app will be
15:49 - freshly created or freshly cloned into
15:54 - your Jenkins directory so let's save our
15:57 - configuration and let's build the job
16:00 - once again so I'm going to just press on
16:02 - build now and I'm going to minimize this
16:05 - browser once again and now I can see the
16:11 - build number here
16:13 - third build and then till now are
16:17 - cleaning and cloning is successful and
16:20 - now this test stage is also successful
16:23 - and now deploy stage is running and
16:26 - hopefully it will also be successful so
16:30 - once you see all the stages green here
16:32 - that means your Jenkins build is
16:35 - successful and you can see the time
16:39 - which it took to execute every stage so
16:43 - for the cloning and cleaning stage it
16:46 - took 6 second for testing stage it took
16:48 - a second and for the packaged stage it
16:52 - took 8 second as well now if you want to
16:56 - see more logs of every stage for example
17:00 - I want to see the loss of this stage I
17:02 - can hover over it and I can click on the
17:05 - log button here and you will see all the
17:09 - laws related to this stage so if you
17:12 - want to see the test logs then you can
17:16 - just click here and you all the log
17:19 - related to the test stage which is
17:22 - similar to view console output ok so
17:27 - this console output is showing every log
17:30 - from every stage but if you want to see
17:33 - the individual log from every stage then
17:36 - you can see it from here ok and then you
17:40 - will have the good overview of your
17:43 - Jenkins pipeline because you
17:47 - we'll see what happened in every stage
17:50 - which stage is failing and if some stage
17:54 - is failing what are the laws showing
17:57 - here and based upon these logs you will
18:01 - be able to you know take some steps
18:03 - whatever stage is failing you can
18:06 - directly view that log and then you can
18:10 - take some steps and fix it so at last
18:13 - you will be able to see all the stages
18:16 - green that means your project is
18:19 - successfully build tested and deployed
18:22 - so this is how you can use Jenkins
18:25 - pipeline using your Jenkins job
18:28 - configuration now in the next video I'm
18:31 - going to show you how you can add this
18:34 - Jenkins file to your maven repository
18:37 - for example or any other repository and
18:40 - then how to use this jenkins file from
18:44 - your github into your Jenkins job so
18:48 - stay tuned and please rate comment
18:50 - subscribe and bye for now