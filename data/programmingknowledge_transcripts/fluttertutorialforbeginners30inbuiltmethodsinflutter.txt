00:00 - welcome to programming knowledge so in
00:03 - this video we are going to discuss
00:05 - about of inbuilt function in flutter
00:07 - which is
00:08 - set state okay so what set state
00:12 - does is it informs flutter that the
00:15 - internal state of application has
00:17 - changed
00:18 - and probably we should rebuild the
00:21 - current
00:21 - interface means the current screen that
00:24 - the user is
00:25 - seeing which means that whenever we call
00:28 - the set state function this
00:30 - build method is executed once again
00:33 - okay so we will see what happens when we
00:36 - don't use set state and how set state
00:38 - comes to the rescue
00:41 - okay so first of all i'll remove that
00:43 - list
00:44 - i'll remove the entire body we don't
00:46 - need it over here
00:49 - okay and now i'll add our body a simple
00:52 - text in the center
00:59 - the child is a text the text is
01:05 - count okay so let's create a
01:08 - count variable over here
01:13 - that is zero now i'll increase the
01:18 - size so that it is visible so i'll add
01:21 - the style parameter it takes a
01:24 - text style widget okay and then over
01:27 - there we have
01:28 - font size okay so i can make the font
01:32 - size
01:32 - 20 now let's format it
01:35 - save it
01:39 - and you can see we can see a 0 in the
01:40 - center okay so now
01:42 - what i am basically trying to do is
01:45 - whenever i click on this button
01:47 - instead of printing fab pressed
01:51 - the counter should increment okay so
01:54 - this is exactly same as the starting
01:57 - project that we get when we create a
01:59 - flutter app
02:00 - okay so for that the simple process
02:03 - would be
02:07 - uh we can keep this print statement
02:11 - okay so the simple method would be we
02:13 - can write
02:14 - count plus plus
02:18 - now let's save this so
02:21 - now if i click on this button the
02:23 - counter should
02:25 - increment so let's see
02:28 - and you can see the print statement is
02:32 - executing
02:33 - but this count statement is not
02:35 - executing
02:36 - and that and i can say that by seeing
02:39 - in the counter over here it is still
02:42 - zero
02:43 - okay so now uh what happened over here
02:46 - was that we
02:47 - the incrementing operation was done
02:51 - but that was that is happening
02:53 - internally
02:54 - and it is not reflected on the screen
02:57 - okay so this is when we use set state
02:59 - now what happened over here was that the
03:02 - value of count changed
03:04 - internally but the interface has no
03:08 - response to it so to give so to get a
03:13 - so to get a expected response
03:16 - on the screen we can use the set state
03:18 - method
03:19 - so what i'll basically do is i'll simply
03:22 - use a
03:23 - write a set state
03:26 - over here
03:29 - so now another thing we can use this set
03:32 - state only when we use a stateful widget
03:34 - if we try using set state in a stateless
03:37 - widget
03:38 - probably it will not work and give you
03:39 - some errors
03:41 - okay so now over here what will happen
03:44 - that as soon as the
03:46 - value of count will be changed the set
03:48 - state method will be called
03:50 - and that means as i told you just now
03:54 - that the
03:55 - build method will be called and since
03:57 - the
03:58 - build method will be executed again this
04:00 - center will be executed again and then
04:02 - over here the new value of
04:04 - count can be seen okay so now let's
04:09 - try running this
04:16 - okay so now if i click on plus you can
04:20 - see the
04:21 - value is changing over here okay so that
04:24 - means we are getting the
04:26 - expected response okay so this is
04:29 - this is the place when we use set state
04:32 - okay
04:33 - now if you want you can keep this
04:38 - function inside set state also
04:41 - okay so it hardly cause changes anything
04:44 - but the general convention is to keep it
04:47 - inside set state
04:48 - the factors which actually change the
04:51 - state of the application should be kept
04:54 - inside
04:54 - the set state method okay so now let's
04:58 - save this again
05:01 - and then again it should work fine
05:04 - okay so you can see this was about set
05:07 - state it is a very important function
05:10 - and it
05:10 - will help you in a lot of places
05:14 - okay so the next method that we are
05:16 - going to discuss about
05:18 - uh it is not a discussion but rather an
05:21 - overview so the next method that we will
05:24 - see
05:24 - is the init state okay so
05:28 - it is a similar to uh like
05:31 - onstart that we have in android if
05:33 - anyone is coming from android background
05:36 - so what it basically does is it
05:39 - it is generally used for initializing
05:42 - some controllers and parameters
05:45 - some global keys that we have in flutter
05:48 - okay so you might not be knowing what is
05:50 - a controller what is a global key in
05:52 - flutter but we will come to that later
05:54 - okay so to initialize such things we
05:57 - have a
05:58 - inbuilt function called init state
06:01 - okay and then over here it always have
06:04 - has a statement called a super
06:06 - dot in its state so now this is super
06:08 - comes from the concept of
06:10 - oops a concept of inheritance so what
06:13 - basically
06:14 - is happening over here is that init
06:17 - state is already a method that is
06:19 - existing somewhere inside the flutter
06:21 - code okay
06:22 - and over here if we write super dot init
06:25 - state that means we are
06:26 - overriding that init state method in
06:30 - our init state method and that is the
06:32 - same reason we have
06:34 - a at the rate override over here okay
06:37 - so now in this init state first of all
06:39 - we have
06:41 - reference to the actual init state which
06:43 - is inside the flutter code
06:45 - that function will be executed and then
06:48 - after that
06:48 - all the initialization that
06:56 - we want to do okay so
07:00 - over here only we deal with the shared
07:02 - preferences
07:03 - checking if a user has logged in
07:05 - previously like we have the remember me
07:07 - feature
07:08 - all those stuffs
07:12 - work within its state okay
07:15 - so then the next method that i am going
07:17 - to discuss about is
07:19 - the dispose method so it is similar to
07:24 - uh on stop method if you are coming from
07:27 - an android background
07:29 - okay so what it basically does is it it
07:32 - is used for
07:34 - closing all the existing things means uh
07:37 - disposing all the controllers disposing
07:40 - all the global keys
07:42 - again we will discuss about controllers
07:45 - and
07:45 - global keys later but since we are
07:48 - initializing them it is
07:50 - kind of understood that it is necessary
07:52 - to dispose them as well
07:54 - okay so for the same reason we have this
07:56 - dispose method over
07:58 - here and now the trick part is that over
08:01 - here we
08:01 - after this super statement we write all
08:05 - the code
08:05 - but in dispose we write all the code
08:08 - before the super statement
08:11 - and the reason is that when this method
08:13 - is called
08:14 - this page this my home app
08:17 - means like this class will stop
08:19 - completely
08:22 - okay so i hope you understood about the
08:24 - three methods
08:25 - init state dispose
08:28 - and set state okay and you can always
08:31 - refer to the documentation for a
08:33 - detailed explanation and better
08:35 - understanding
08:37 - thank you