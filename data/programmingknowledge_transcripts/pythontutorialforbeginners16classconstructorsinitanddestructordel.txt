00:01 - hello guys in the last video I shown you
00:03 - how to use classes in Python now in this
00:07 - video I'm going to show you how you can
00:10 - use Constructors and destructors with
00:13 - classes in Python these Constructor and
00:17 - Destructor are also called
00:19 - initialization and deletion member
00:22 - functions of the class so first of all
00:25 - let's see how we can use Constructor in
00:29 - Python in the last video I have given
00:31 - you a small little example of class and
00:35 - how to create a class and we have
00:37 - created a person class and we have
00:40 - created two member Function One member
00:42 - function to set the values and other
00:45 - member function to print the name right
00:50 - so first member function we named it as
00:53 - set full name and in this function we we
00:57 - were passing two arguments first name
00:59 - and last name and this print full name
01:03 - member function we were using to print
01:07 - the name of the person and then I have
01:11 - shown you how you can create an instance
01:14 - or object of a class uh like this and
01:18 - how to use these member function like
01:21 - this using the instance of the glass now
01:24 - I'm going to take the same example to
01:26 - show you how you can use Constructor
01:29 - with this same
01:32 - class
01:33 - so first of all to define a Constructor
01:36 - you just use normal function definition
01:41 - with DF and then you
01:44 - give double
01:46 - underscore in it then double underscore
01:50 - and give the bracket and give colon here
01:54 - and in here as any other member function
01:59 - you you can perform any task so for
02:02 - example I want to uh print
02:06 - something that
02:09 - uh our class is created for example so
02:13 - I'm just printing our class
02:18 - is
02:21 - created not like this but class
02:25 - is
02:27 - created right so first of all what is
02:32 - the use of this
02:34 - Constructor generally in programming
02:38 - languages Constructors are used to
02:41 - initialize the value okay so whenever
02:45 - you create the instance of a class so we
02:48 - are creating the instance of a class
02:50 - here as soon as you create the instance
02:53 - of a class this Constructor is called
02:56 - immediately so you don't need to EXP
02:59 - explicitly call The Constructor of a
03:02 - class you may call it or you may not
03:05 - call it but don't forget to give the
03:09 - self argument as I have shown you in the
03:11 - last video that you need to uh use this
03:15 - keyword self with every member function
03:17 - of a class and this indicates to the
03:21 - instance of a class so program person
03:26 - name will be replaced by selfia in the
03:28 - last video I've shown
03:30 - so as soon as I create an instance of a
03:34 - class this init member function will be
03:40 - automatically called so you don't need
03:42 - to explicitly call this member function
03:47 - so I'm going to run this save
03:51 - run and you can see here it gives us the
03:55 - result our class is created even though
03:59 - we haven't called
04:01 - our init member function
04:04 - explicitly it's printing first this our
04:08 - class is created that means as soon as
04:11 - you create this instance of a class this
04:15 - member function is called right so
04:19 - always
04:21 - remember the Constructor definition is
04:25 - reserved here with double underscore in
04:28 - it and and this also ends with double
04:31 - underscore so this is the reserve
04:34 - keyword in Python to called Constructor
04:38 - you cannot give any definition or any
04:40 - name to the Constructor it's reserved
04:43 - which is this one in a same way we can
04:47 - use Destructor to destroy the instance
04:51 - of a class okay so and destructors are
04:56 - also called whenever our in stance is
05:00 - out of scope so let me show you how you
05:05 - can call distructor
05:07 - first so Destructor also you can just
05:11 - Define it as a normal function with two
05:15 - underscore
05:17 - D and this these two underscores and
05:21 - then just call Self here keyword and
05:27 - then give colon
05:30 - here and then you can just
05:35 - uh write the functionality of the code
05:40 - so for example I will
05:43 - print
05:46 - uh I can print our class instance is
05:50 - destroyed so
05:53 - our
05:58 - class
06:01 - object
06:05 - is
06:07 - destroyed and this is also reserved in
06:11 - Python with double undor deel and uh
06:15 - this also ends with double
06:19 - underscore and this function is also
06:21 - automatically called whenever your class
06:26 - or in class instance goes out of scope
06:30 - out of scope means that this uh class
06:35 - instance is no longer used so in here
06:39 - after this code our class instance scope
06:43 - is completed because this is no longer
06:46 - used in further code because there is no
06:49 - code obviously right then whenever this
06:54 - uh class or person name goes out of
06:57 - scope this deletion member function will
07:00 - be called automatically and it uh just
07:03 - basically the use of this Destructor or
07:06 - deletion member function is to a garbage
07:11 - collection kind of U uh use so it just
07:16 - collects the garbage or all the
07:19 - resources and destroy all the resources
07:22 - which are used by this instance which is
07:25 - person name so I will just save my
07:28 - program and run it
07:31 - and you can see here whenever I just
07:37 - created
07:40 - this it's not printing this deletion me
07:44 - member message here but whenever you can
07:48 - you use the instance of a class
07:53 - dot underscore uncore
07:57 - deleting so underscore deletion
08:00 - member and then whenever you run
08:05 - this this is printed our class object is
08:09 - destroyed so whenever you use this um
08:13 - deletion member function it destroys all
08:16 - the resources which are used by your
08:20 - class instance okay so this is the use
08:23 - of this Destroyer or
08:27 - Destructor now
08:29 - it's not uh you know compulsory that you
08:32 - cannot pass any uh argument with this
08:36 - initialization you can pass argument for
08:38 - example I can pass uh for example I can
08:41 - pass any argument uh for example I want
08:44 - to pass ID of uh the person I'm I want
08:49 - I'm using or I want to print the name
08:52 - off so I want to initialize the ID of a
08:55 - person like this I can just uh pass this
08:58 - AR argument with my initialization
09:01 - member function and then I can just use
09:04 - self dot
09:08 - ID is equal to
09:11 - ID and then I can call this
09:15 - ID uh in my Destructor also so for
09:18 - example uh this Destructor can also take
09:22 - some arguments and we can call this
09:24 - self. ID for example I will print this
09:27 - ID here and then I can just print the
09:31 - message right so it's not necessary that
09:35 - uh our
09:37 - initialization or our Constructor has to
09:40 - uh has to initialize with no argument it
09:43 - can take any number of argument as an
09:46 - initialization but whenever you give
09:49 - this argument in the initialization here
09:52 - uh then whenever you create the instance
09:55 - you need to pass the that argument here
09:58 - so so we are creating the instance here
10:01 - and because the initialization takes
10:03 - this one argument which is ID we are
10:06 - passing five as an ID here in the
10:10 - initialization okay so this is how you
10:14 - can initialize it and now whenever you
10:17 - run your program once
10:21 - again you can see here our class is
10:24 - created once again and as soon as this
10:27 - this class is created we are setting
10:29 - the ID of a person as we pass in the
10:34 - constructure which is here and then
10:37 - self. ID is set here and whenever we
10:40 - call the destructor we are once again
10:43 - calling the ID of uh the person which is
10:46 - this one and then printing the message
10:49 - this one right so in this way you can
10:52 - use Constructor and Destructor or
10:55 - initializer or and
10:58 - dele in Python and I hope you have
11:01 - enjoyed this video please writ comment
11:02 - and subscribe and bye for now