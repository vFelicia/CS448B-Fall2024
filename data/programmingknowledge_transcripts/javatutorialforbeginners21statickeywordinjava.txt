00:00 - hello guys welcome to the next video
00:02 - tutorial on Java programming for
00:04 - beginners and in this video we will see
00:06 - what does the static keyword do in a
00:10 - class so in the last videos which I been
00:15 - showing you you may have seen the usage
00:18 - of this keyword static with some member
00:21 - method or member variables of a class
00:25 - and you may be curious what is the
00:27 - meaning of this this is not uh you know
00:30 - just we are putting like this it has
00:33 - some meaning so the meaning behind the
00:36 - static keyword is whenever you declare
00:41 - your member as static the static member
00:45 - belongs to the class instance instead of
00:50 - uh some specific instance of a class so
00:54 - let me give you an example and then we
00:56 - will see it once again so I have a class
00:59 - class called hello and which contains
01:02 - two method one is a static method and
01:05 - other is a non-static method static
01:08 - method means I have added static keyword
01:11 - to this and this method is not doing
01:14 - much it's just um taking string as an
01:17 - argument and it's returning this string
01:20 - in as whatever we pass back and the S
01:25 - same method we are using here it has uh
01:29 - different name which is do something
01:31 - else and this does not have any static
01:35 - keyword in it okay so whenever we
01:40 - declare the instance of a class for
01:44 - example
01:46 - hello hello is equal to
01:51 - new
01:53 - hello the static member is shared by so
01:58 - whenever you create create an instance
02:00 - you can create many instance of for
02:05 - example hello hello one hello 2 the
02:10 - static member method will be shared by
02:14 - every instance okay and the static
02:19 - member only belongs to the class not to
02:22 - the instance so it will not belong to
02:24 - the instance of a class but it will only
02:27 - belong to the CL class itself so if you
02:32 - want to do something like this
02:36 - say
02:37 - dot do something which is a static
02:41 - method and we want to pass uh some
02:45 - message
02:49 - hi YouTube for example it it will work
02:53 - and it will uh work fine but it will
02:57 - give some warning here and the warning
02:59 - war is the static method do something
03:03 - from the type hello should not be access
03:07 - accessed in static way okay so
03:12 - you cannot access or you can access this
03:16 - but it's a wrong way of accessing this
03:19 - method which is declared as static
03:23 - method so for accessing your static
03:26 - method whatever you define as static you
03:30 - can access this method directly from a
03:33 - class like hello. do something and this
03:36 - is the right way and once you do this
03:40 - your warning message will be gone okay
03:45 - but a non-static method when you try to
03:48 - access so this Hello is my class name
03:52 - dot do something is not something else
03:55 - is not available in this class right so
04:00 - this method is not available or cannot
04:04 - be accessed directly with the class name
04:08 - but whenever you add a static before
04:11 - your method name or CL variable name
04:14 - it's a accessed from the class itself so
04:18 - do something is exess from the class and
04:22 - do something else which is not a static
04:25 - method cannot be accessed by directly by
04:30 - this class you can you see there is no
04:32 - do something else
04:35 - but this nonstatic method is available
04:40 - through the instance of a class okay so
04:46 - basically the non-static methods are
04:49 - available or can be accessed using the
04:51 - instance of a class and the static
04:54 - method should be accessed using the
04:58 - class itself not the instance
05:05 - okay so this is the correct way of using
05:09 - uh a
05:10 - static uh class or static method and
05:13 - this is the correct way of using
05:16 - non-static method you can even declare
05:19 - some variable as static for
05:23 - example
05:26 - public
05:27 - static uh int age for
05:32 - example and then whenever you want to
05:36 - access by this instance you can just uh
05:40 - for example Hello dot dot
05:45 - age whenever you want to assign some
05:48 - value to the age let's see what happens
05:52 - so it's okay right now but it's once
05:56 - again showing the warning that the
05:58 - static Fe field hello H should be
06:00 - accessed statically right once again we
06:04 - Define a different U instance of this uh
06:10 - class hello hello one and we assign some
06:15 - different value here for
06:18 - example
06:20 - 20 or 50 right and we will uh print
06:26 - hello age once again so say this
06:30 - o and we will print this hello
06:34 - age here and we will print this hello
06:38 - age here
06:39 - also with this instance okay and for now
06:44 - let's comment this these two and when we
06:47 - run the
06:49 - program it gives you the same I mean the
06:53 - answer
06:55 - but it's preferred that because it's uh
07:00 - uh instance or not the instance but it's
07:03 - the X member of the class you need to
07:08 - use it like this not by instance but
07:12 - using the class
07:14 - itself
07:18 - okay so whenever you want to declare a
07:23 - variable or a method static just access
07:28 - them using a class and whenever you are
07:32 - using non-static method or variable
07:35 - access them with the instance of a
07:38 - class so I hope you have enjoyed this
07:41 - video please wait comment and subscribe
07:42 - and bye for now