00:00 - hello everyone welcome to new view js3
00:02 - tutorial
00:03 - in today's tutorial we are going to get
00:04 - start with the view js3
00:06 - so vue.js 3 is an upgradation version to
00:09 - view js2
00:10 - so it is a little bit different but if
00:13 - you have followed my previous tutorial
00:15 - on view gs2 then it would be very easy
00:17 - for you to migrate yourself into vue.js3
00:20 - so let's carry on with viewjs3 so let's
00:23 - start with the starting template today
00:25 - we will uh
00:26 - surely cover all the basic things which
00:29 - are different from vue.js too
00:31 - and how it made a difference to us and
00:33 - we would all
00:35 - adapt us to those changes so let's get
00:37 - started with the tutorial
00:39 - so today is the title is starting with
00:41 - view js3
00:42 - and the description is like in this
00:43 - tutorial we will add view js3 inside an
00:46 - html page
00:47 - that means installation and render the
00:50 - component on front end
00:51 - we will make a counter app to understand
00:53 - the same plus we will
00:54 - understand all the basic differences and
00:57 - we will
00:58 - be able to differentiate ourselves with
01:00 - all those things using view jsp
01:02 - so first this is a vs code editor it has
01:05 - an index1.html file
01:07 - and it i'll rename this file as
01:10 - index1.js
01:12 - so it has two files one is index1.html
01:15 - and index1.js
01:17 - now what we can do we can add a
01:19 - bootstrap
01:20 - the starter template to our html page
01:23 - for an easy start so it would be a quick
01:26 - start for us
01:27 - so you can simply move to this link
01:30 - bootstrap 5 then start inside the
01:32 - starter template
01:33 - you can directly click on copy and
01:37 - click on paste here okay
01:40 - so then we will be able to run this page
01:43 - and uh like we what we can do
01:47 - we can like this we can reveal in file
01:51 - explorer
01:52 - and when we move to file explorer we can
01:54 - copy this path
01:56 - and we can move to our browser and we
01:59 - can uh
02:00 - paste it here and inside that we have a
02:03 - folder tutorial one or you can click on
02:06 - index1.html and this will open the page
02:09 - and let's okay bye i'm really sorry i
02:12 - had copied this incident
02:13 - index 1.js so let me remove this
02:18 - now i'll save this yeah so index
02:21 - one dot html has been and i'll refresh
02:23 - this page so here you can see the
02:25 - template has started now i will remove
02:28 - the title to
02:29 - learn view three
02:33 - three and index one so this would be the
02:36 - title
02:37 - and i can move this comments
02:40 - and what we'll do then simply
02:44 - i'll move this heading and now this
02:46 - looks perfectly fine
02:48 - what i'll do i'll add view js3 to this
02:51 - script has been added
02:53 - so i can copy this script and add it
02:55 - here and then
02:56 - i refresh the page and i click on
02:59 - inspect
03:00 - so this would give me inspect and
03:02 - console here you can see you are running
03:04 - a development
03:05 - build of view so make sure to run
03:07 - production this would ensure that view
03:09 - has been installed perfectly fine
03:11 - now what we can do we can create a
03:14 - simple
03:14 - app and first we would also add the
03:18 - index
03:18 - one.jscript also script is equal to
03:21 - source
03:24 - is equal to index one dot gs
03:28 - and then i can close this tag sorry
03:33 - sorry for the mistake yeah now i can
03:35 - close this tag and inside this i can
03:38 - do console.log
03:42 - script started
03:47 - so this would be perfectly fine when i
03:49 - refresh this page
03:51 - so here you can see the console.log
03:53 - statement has started script started
03:56 - so perfectly fine now what we can do
04:00 - now we can add a view gs3 component
04:04 - so for that what we need to define
04:08 - we need to find a component and then we
04:11 - would
04:11 - render that component on the front end
04:14 - so
04:15 - let's start how we can define
04:18 - so it would have two things one is the
04:21 - data and another is the methods
04:23 - so this is uh like this is very much
04:26 - same
04:27 - and how we did in the or like how we
04:30 - used to do that in the
04:32 - view too also but this time we are going
04:34 - to mount the component
04:36 - okay so okay i'll just show you how you
04:38 - do that
04:39 - so what you can do you can make constant
04:43 - okay before that what you can do you
04:45 - create a div here
04:47 - inside a body
04:50 - div id is equal to my app
04:54 - okay now you let this div be as it is
04:58 - okay now what you can do you can do
05:01 - constant
05:02 - my app component
05:05 - component is equal to
05:08 - this is the json object okay now what
05:10 - you can do
05:11 - you can do a constant
05:16 - my app is equal to view
05:21 - dot create
05:24 - view dot create
05:27 - app okay and inside this
05:31 - you can put my app component
05:34 - dot mount so this time we are going to
05:37 - mount and we would give the id
05:39 - of my app so let's move to the page and
05:42 - then refresh it
05:44 - and you have successfully mounted this
05:47 - component
05:48 - so when i click here my
05:52 - app so here you can see a component has
05:55 - been seen
05:56 - okay so this is an empty component we
05:59 - have not ensured anything inside that
06:01 - but just an empty component so i will
06:04 - show you how we like
06:05 - in view two we should define the element
06:08 - inside the el
06:09 - tag that element we are referring so we
06:11 - need to define the id or a class but
06:13 - here now we mount the component using
06:16 - this syntax that is u dot create app my
06:18 - amp dot component and mount the
06:20 - component
06:20 - and we stored inside inside the variable
06:22 - my app and
06:24 - by default my app component
06:28 - this is my app component and the id my
06:31 - app
06:31 - is as the same name is as my app so
06:34 - that we so the view component so that it
06:37 - doesn't create any confusion to you
06:40 - now the second difference here we come
06:42 - is a data
06:43 - this time a data is a constructor so
06:46 - so that we render the data as on on
06:50 - on construction that is on
06:51 - initialization so it is like a
06:54 - pre data construction for us and then we
06:56 - return an object
06:58 - for the data and this this time we
07:00 - return a count is equal to zero
07:02 - and inside this what we do
07:06 - we make a button okay or we simply print
07:09 - the value of count
07:11 - so this would be an easy task for us and
07:13 - let's refresh the page and see
07:14 - so here we can see the count is zero and
07:16 - we have a zero also
07:18 - so perfectly fine okay and now what we
07:21 - can do
07:24 - we can make this count inside a button
07:30 - you called me
07:33 - you called this button
07:37 - count times
07:41 - so we call this button zero times when
07:45 - we click on it nothing happens
07:46 - okay and
07:49 - we create another button okay before we
07:52 - do that
07:52 - let's call some method so methods we
07:55 - call again
07:56 - methods so methods is a json object
08:01 - good and we call a method increment
08:04 - and this time what we call this
08:08 - dot count plus equal to 1 perfectly fine
08:12 - okay now on
08:15 - this click click functionality this
08:18 - should be
08:19 - at the rate click is equal to
08:24 - increment
08:28 - increment okay now we refresh
08:32 - the page okay now we refresh the page
08:36 - and what we observe
08:38 - that when we click you click this button
08:40 - one times four times
08:41 - five times eight times and nine times
08:43 - ten times eleven times
08:44 - now for the same what we can do we can
08:48 - create a reset button
08:52 - at the right click is equal to reset
08:57 - and you can type
09:00 - reset for the same we need to define a
09:04 - reset method
09:07 - and this time it says this dot count
09:12 - is equal to zero so perfectly fine and
09:14 - when we refresh the page
09:17 - you call me one time two times three
09:18 - times and when i click on reset
09:20 - it turns out to be zero again back to
09:22 - zero then i click on it and
09:24 - reset then it turns reset now what i can
09:26 - do
09:27 - here i'll show you one thing i'll click
09:29 - on this like i've clicked this on 15
09:31 - times
09:32 - now i refer to my app dollar data
09:37 - please look at the console on the right
09:39 - side
09:41 - data dot count it turns out to give out
09:44 - to be the value of 15
09:46 - and when i call my app dot
09:49 - increment okay
09:53 - so okay sorry for the mistake my
09:55 - app.increment
09:57 - so it says function increment okay now
10:01 - what you can do uh
10:06 - you can call my app
10:11 - this is a function reset okay so here
10:14 - you can
10:15 - tell you can also look at the functions
10:17 - and the count
10:19 - from here so this is a very good way
10:22 - a nice way to call the functions and
10:25 - this is how we
10:27 - call we can have a look at them okay
10:30 - and today we are going to build a date
10:32 - picker and a time picker and view js
10:35 - so let's get start with today's tutorial
10:37 - so air f3 files this is the official
10:39 - website of vue.js
10:41 - you can copy the cdn from here then you
10:44 - have bootstrap page then this is
10:45 - our app directory so these are the two
10:48 - files app.html and app.js
10:51 - so we will be linking app.html to app.js
10:54 - and then we would build our
10:55 - time picker then again and then after
10:57 - that we would see the date picker
10:59 - so very two important components and
11:02 - these are very useful when we
11:03 - are opting for a slot scheduling or
11:06 - scheduling or something using a time or
11:07 - a date
11:08 - so they are very helpful so we can get
11:10 - start with that here
11:12 - now so before that we can move to the
11:15 - bootstrap page
11:16 - inside the starter template we can click
11:18 - on right side copy
11:19 - we can copy this html and paste it here
11:22 - you can remove this option too since
11:24 - this
11:25 - is not needed and then we can also
11:28 - remove this
11:28 - comments as well and we can uh
11:32 - save this and when we click on app.html
11:35 - we can see this page is perfectly
11:37 - working fine
11:38 - and we have a h1 heading then after this
11:41 - what we can do
11:43 - we need to add the cdn okay we will copy
11:46 - the cdn
11:47 - and we can paste it here and this is
11:51 - perfectly and
11:52 - when we refresh this page or ctrl shift
11:55 - i
11:55 - we can take inspect element and we can
11:58 - see on console that you are running a
12:00 - development build of view
12:02 - and this is what we needed as per our uh
12:04 - as per our desiration that we needed
12:06 - view to run a development mode
12:08 - uh development mode is a little bit
12:10 - different from the production mode that
12:11 - it gives us the warnings and console
12:13 - logs
12:14 - so that is helpful for us while building
12:17 - an application
12:18 - but if you want something very very much
12:20 - optimized then you should use production
12:22 - after the development that should be
12:24 - after the development
12:25 - now we can move to our page and we can
12:29 - change the title
12:31 - we can change this to view date
12:35 - date picker and time
12:38 - picker so this is perfectly fine
12:42 - and we can add a script
12:45 - below that script source is equal to
12:48 - have dot js perfectly fine and we can
12:51 - close
12:52 - the script tag and inside tab.js okay
12:55 - i'll remove this for a time
12:56 - me and i can simply type console.log
13:02 - so i uh i'll type console.log
13:05 - script started
13:10 - okay so when we refresh this page
13:13 - yeah so here you can see the script has
13:15 - started and plus we have built the page
13:17 - now what we can do you can first create
13:20 - our app component
13:22 - so this this constant my app
13:25 - so this is my component
13:28 - component here perfectly fine this organ
13:31 - json object
13:32 - and what i'll do constant
13:37 - my app is equal to
13:41 - view dot create
13:44 - app my component
13:50 - dot mount so i'll use dot mount for this
13:55 - and what i'll do i use dot mount
14:01 - and i'll use hash my app
14:05 - and this would here you can see that
14:08 - okay fail to mount an app target
14:10 - selector hash my app well this would be
14:12 - failure or because uh i have not defined
14:16 - i'll move this heading and i'll not
14:19 - define
14:19 - a div here right now so there
14:22 - id is equal to my app
14:29 - and i would close this close this div
14:32 - and i would refresh this page
14:34 - now here you can see and i'll type my
14:37 - app
14:40 - dot data
14:44 - okay i'll put a dollar sign so
14:48 - so till now uh what i want to show you
14:51 - that
14:51 - since that we don't have any data that
14:53 - would be an empty object
14:54 - but this recognized as my app okay so it
14:57 - has
14:58 - all the view components like uh
15:00 - attributes and methods
15:02 - so what we defined here at the line
15:04 - number seven so this is perfectly fine
15:06 - now what we can do we can define a data
15:10 - or methods is given by a json object so
15:13 - that would be empty we are not defining
15:16 - any methods and data would be an
15:18 - a data constructor and we need to return
15:25 - return a json object
15:29 - and then what we do return a json object
15:33 - and we'll define my time
15:37 - we can define this on a null component
15:39 - and my date
15:41 - as a null component too
15:45 - so this is perfectly fine and let me
15:47 - refresh the page
15:50 - i got this at error line number though
15:52 - syntax error okay
15:54 - so app.js client number five column
15:58 - number fifteen
15:59 - okay okay i had a semicolon before the
16:02 - return
16:03 - statement so that would one issue so let
16:05 - me close this
16:06 - and refresh the page so i have something
16:08 - good
16:09 - so why my app dollar data
16:13 - so now you can see
16:16 - that this is our data and it has two
16:19 - target values that is my time and my
16:21 - date
16:22 - which are initially null so let's bind
16:24 - them using time picker
16:26 - so now i have input
16:31 - type is equal to time
16:35 - and then perfectly fine and then i'll
16:39 - type
16:39 - my time value but this won't work
16:43 - because i have to combine this using v
16:46 - model is equal to my time
16:50 - so let's close this page and okay i'll
16:53 - put this inside the h1 tag
16:57 - okay sorry people mistake h1 tag
17:00 - and uh
17:05 - yes my time
17:09 - now i'll refresh this page perfectly
17:11 - fine
17:12 - now using the arrow keys since this i'm
17:14 - using firefox you can
17:15 - change the time and then you can change
17:18 - the minutes
17:20 - now when i choose am this is a good
17:23 - this is am and i choose pm it
17:26 - automatically changes to 14
17:28 - when i make this as a change dynamically
17:30 - updated
17:32 - and i'll use am now so this works
17:34 - perfectly fine
17:35 - so this is how the time picker works uh
17:38 - this is how time picker works and i'll
17:40 - comment this out now
17:42 - since we don't uh we'll move to the date
17:44 - picker
17:48 - for date picker what you can do input
17:51 - type is equal to date
17:54 - and we model
17:57 - i'll model this with my date
18:01 - and i close this tag
18:04 - and inside the h1 tag h1
18:08 - i'll give my date and close this
18:12 - okay now when i refresh the page
18:18 - i'll just choose a date so here i see
18:20 - when i choose a date perfectly fine
18:22 - i can choose the year and month so this
18:25 - changes
18:26 - and as the date also changes so
18:29 - month changes perfectly dynamically
18:31 - updating so everything is updated
18:33 - dynamically
18:34 - and this is how we build a date picker
18:36 - and time picker so today we are going to
18:38 - learn about props and components
18:40 - so components are like custom html
18:43 - elements
18:43 - which we can make in vue.js and we can
18:46 - register those components so
18:47 - so that would increase our reusability
18:50 - in our application
18:51 - so this is a good concept which will you
18:54 - find in other
18:55 - front-end frameworks as well so this is
18:56 - a custom http like
18:58 - for easiness the components are custom
19:00 - html templates
19:01 - and we can use them so like not html
19:04 - templates we can call them as
19:06 - custom html tags which we can use them
19:08 - for reusability
19:10 - in our application and the props is by
19:12 - passing data
19:13 - from parent component to child component
19:15 - so we would make our own
19:17 - props and component and i will show you
19:20 - the same
19:21 - so first we can create a new file that
19:23 - is index
19:25 - three dot html okay so
19:28 - you can create this file or i can name
19:31 - this as
19:33 - p p and c dot html
19:37 - so pnc stands for props and components
19:40 - and we can
19:40 - create a new file that is p okay
19:44 - i'll name this as props dot js
19:48 - props and components
19:51 - dot js okay and you can
19:55 - you can also like you can rename this
19:58 - as well and you can type props
20:04 - and components
20:07 - dot html okay now what you can do
20:11 - you can console.log
20:16 - script added so this would be
20:20 - like a confirmation for you script added
20:23 - and you can create your html page here
20:28 - and inside this html page you can put a
20:31 - like this is your html page and you can
20:34 - use this
20:35 - and like what i'll do i'll remove this
20:39 - like yeah this is perfectly fine i'll
20:42 - remove this css
20:43 - this script as well and i'll give this
20:46 - as
20:47 - tight as props and components
20:51 - props and components
20:56 - okay now what you can do you can
21:01 - at the bottom of your body you can add a
21:02 - script tag
21:04 - and add a source is equal to props
21:08 - and components procs and components
21:13 - dot js component.js
21:17 - and then you can close this tag
21:22 - profs and companies.js and then you can
21:24 - close this tag and refresh the page
21:27 - and you have props and companies.html
21:30 - and then
21:30 - you can right click inspect element
21:34 - and console you will see the script has
21:37 - been added
21:38 - so the script is added now what you can
21:40 - do now you can
21:42 - like the script is added now it works
21:44 - perfectly fine now
21:46 - we can create our own component for that
21:49 - what we can do
21:50 - we can move to props and complex.js and
21:53 - you can type
21:56 - first you can type constant
22:00 - app okay view
22:04 - dot create app
22:08 - and we can close this an empty json
22:12 - object okay then we can
22:15 - app dot mount
22:18 - okay and we can give this a
22:22 - id app so we need to define an id
22:25 - app here so we'll give a div
22:28 - id is equal to app and then we can close
22:32 - this tag
22:34 - so then we can refresh this so view is
22:36 - not defined
22:37 - because we have not added the cdn yet so
22:40 - we can copy the cdn
22:41 - and paste it here so let's
22:45 - refresh the page okay sorry let's
22:46 - refresh this page
22:48 - and here you can see the script added
22:49 - and a component has been mounted
22:52 - but now we are going to create our own
22:55 - component
22:56 - a component and for our creating our own
23:00 - component what you need to do you need
23:01 - to type
23:02 - app.component because we are registering
23:06 - a new component and you need to type
23:08 - this as my card
23:11 - so this is your card and what it defines
23:15 - it will have two things so
23:18 - it will pass a json object and
23:21 - here you will have two things one is the
23:23 - props
23:25 - props is equal to
23:30 - title and props
23:33 - and is equal to title and then you will
23:35 - have a template
23:37 - for the same and you will type a tick
23:40 - symbol
23:41 - the tick symbol is below the escape key
23:44 - and you will return
23:45 - div okay
23:48 - dave
23:52 - dip and then you can return a h4 tag
23:55 - or h1 tag
23:59 - and you can render the title here
24:03 - title okay so
24:06 - the prop you will be getting from the
24:08 - parent company you can render the title
24:10 - at here using template
24:12 - now let's move to the html page and
24:15 - like everything is working till now
24:16 - perfectly fine no error so
24:18 - so what we can do we can add our own
24:20 - prop
24:21 - so let this be our prob be my
24:25 - card so this is a custom html template
24:29 - tag we are using and this is and inside
24:31 - this we are going to pass the title
24:34 - hello world
24:37 - okay let's close this and refresh the
24:39 - page here you can see
24:41 - i have a hello world and when i
24:44 - right click here inspect element so here
24:47 - you can see
24:50 - okay i'll show you so here you can see
24:54 - that what we rendered there like what we
24:58 - rendered
24:59 - like here you can see that i have my
25:01 - card html tag
25:03 - but this on conversion turns out to be
25:05 - this
25:06 - the div id h1 title h1 and div and the
25:09 - title is the props to title the data we
25:11 - are passing from the parent component to
25:13 - the child so here we are passing the
25:14 - data
25:15 - title hello world and my card so we can
25:18 - also find
25:18 - uh pass some more data that is
25:22 - likes is equal to 25
25:26 - okay and uh let the date
25:31 - uh like likes is equal to 25 and
25:34 - let's get category
25:37 - is equal to let this be like programming
25:42 - okay so what you can do so this is the
25:46 - data we are passing
25:47 - uh but so far we don't have like we
25:50 - don't have we have not mentioned the
25:51 - data we are getting
25:53 - so we need to define likes
25:58 - okay this likes
26:01 - so we have defined likes which we'll be
26:03 - getting
26:04 - and the category also category
26:08 - so we are also getting the category and
26:10 - now inside our html
26:12 - what we can do we can use this
26:16 - so h1 is the title then we can have
26:20 - a p tag saying liked by
26:25 - this much likes
26:29 - like by this much likes and people and
26:32 - we can close this
26:33 - p tag okay and then
26:37 - what we can do we can also give
26:40 - a category
26:43 - a category and then we can say
26:48 - okay we can give category and type
26:58 - so when we refresh the page so here you
27:01 - can see
27:01 - hello world programming liked by 25
27:04 - people so this is a good concept
27:06 - but how we increase the usability yes we
27:08 - can increase the reusability
27:10 - we can create own my card
27:14 - okay and then close the tag
27:18 - and then title is equal to
27:21 - uh software okay
27:25 - and the let the likes be
27:32 - 50 and the
27:35 - category you can add
27:39 - category
27:42 - is equal to tech so let's refresh the
27:45 - page and now you can see
27:47 - we have another card saying software
27:49 - tech and lagged by 50 people
27:51 - so this is how we use props and
27:53 - components to increase the reusability
27:55 - in
27:55 - an application so this is an ex advanced
27:58 - concept
27:59 - in today's tutorial we are going to
28:00 - design a calculator app using vue.js
28:03 - using the eval statement so let's
28:06 - take uh this one this time i'm using
28:08 - sublime text editor
28:09 - so this is a very basic component i have
28:12 - created
28:12 - and this is my app galaxy component and
28:16 - like this is my this is a view gs
28:18 - component
28:19 - and i have mounted this on the id that
28:22 - is
28:22 - my app calc and this is the
28:25 - calculator.html and this is the id given
28:27 - below
28:29 - so this is like a very basic component i
28:31 - have rendered on the front end and it is
28:32 - very much common to my previous
28:34 - uh like tutorials how i rendered them
28:38 - on the front end so it is very common
28:40 - and easy and it's very basic
28:41 - so i've already made this so that it
28:43 - saves our time and we can already get
28:45 - started we should we could have a quick
28:47 - start to a tutorial
28:48 - so you can move to the project directory
28:51 - click on this html page right click
28:54 - inspect
28:54 - and this would return you the on console
28:57 - that you are running a development
28:58 - builder view
28:59 - so make sure to use production bit so
29:02 - that's perfectly fine
29:03 - so no issue so what you can do
29:07 - you can make a form and
29:10 - inside this form you can add so
29:14 - i'm using some line like for this time
29:16 - like it's
29:17 - like i've already have a huge font size
29:20 - so it's to give you a better visibility
29:23 - so now in this you can give input
29:27 - input and the type is going to be text
29:30 - and name is equal to query
29:34 - and id is equal to query
29:37 - and we are going to remodel this
29:42 - we model this is equal to
29:45 - query so you can
29:49 - and you can remove this to avoid any
29:52 - confusion like
29:53 - it's not needed as of now so
29:56 - you can remove this and what you can do
29:59 - calci.js so now what you can do
30:04 - oh you can build query
30:09 - and give empty parenthesis
30:13 - okay now you can refresh the page
30:17 - and fail desired direct model
30:20 - okay i made a spelling mistake so this
30:23 - was v
30:23 - model and you can
30:27 - you can refresh this page so it works
30:29 - perfectly fine
30:31 - and now what you can do that i have a
30:33 - data query which is an empty string i
30:35 - have already
30:37 - mounted this on the front end and what i
30:39 - can do
30:41 - i can type for you
30:44 - using the paragraph tag
30:49 - you searched your query
30:53 - is this query inside the parenthesis
30:57 - which would give
30:58 - us the value so now let's refresh the
31:01 - page
31:01 - and your query is 2 plus 3
31:04 - into 5 so this works perfectly fine okay
31:08 - now okay i forgot to put an r your query
31:12 - is this
31:13 - now for the same what you can do you can
31:16 - put input type is equal to submit
31:21 - and the value you can give is to
31:24 - calculate
31:28 - okay and you can give a hr
31:32 - tag below so
31:35 - this was just for demonstration purpose
31:37 - like to give an overview
31:39 - and here it knows works perfectly fine
31:41 - your query is two plus three
31:43 - star five now if i want to like if i
31:47 - want to evaluate this query so i should
31:49 - use an eval statement
31:51 - so i should use an eval statement and
31:53 - how can i use this
31:54 - is first i need to define a form and
31:57 - direct
31:58 - submit dot prevent
32:02 - is equal to my my method
32:06 - so this should call my method there in
32:09 - uh like my method
32:11 - or you can define this my
32:14 - eval function okay my eval
32:18 - you need to define this my eval here
32:21 - my eval and
32:24 - this is a function which is going to be
32:27 - called
32:29 - and what you need to do
32:33 - okay so you need to define my eval
32:36 - function
32:37 - and what you need to do console
32:40 - dot log this dot query
32:45 - okay so first we will just console.log
32:48 - this dot query so let's
32:50 - type this are we getting at the back at
32:52 - the mounted part or not
32:54 - two thrust and here we see we have
32:58 - already got the query that is 2 plus 3
33:00 - into 5
33:01 - so we've already got this so it's
33:03 - working perfectly fine
33:05 - so what we can do we can evaluate this
33:07 - using the eval
33:08 - and let what we can do console.talk
33:15 - uh let's we should take an another
33:17 - parameter that
33:18 - result and we
33:21 - can also keep this as an empty string
33:24 - and
33:25 - what we can do we can assign this result
33:29 - this dot result is equal to
33:33 - eval
33:36 - this dot query okay
33:39 - and then we can your query is this
33:43 - and what you can do simply you can put
33:46 - this
33:48 - this is equal to
33:52 - result i hope this is perfectly fine
33:56 - so let's refresh the page i can call
33:59 - already copy this and refresh the page
34:02 - so 2 plus 3 star 5 is equal to 17 so
34:05 - this is how we can
34:06 - use this so we can now remove this
34:09 - console.log statement
34:10 - it was just for the debugging part now
34:13 - we can store these results and for
34:16 - storing this result we can use an added
34:18 - data structure
34:20 - that is calculations
34:25 - and this is the calculations part and
34:28 - we can push this result after query this
34:32 - dot calculations dot push
34:36 - we are going to define a push function
34:38 - and what we are going to do define
34:41 - a query
34:44 - a query so we are defining a json object
34:47 - so that's
34:48 - that this dot query
34:51 - and we are going to define a result
34:55 - and this is going to be this dot result
35:00 - and what we can do uh
35:04 - we can also push one thing uh
35:07 - like time
35:10 - okay and this is date
35:16 - to string
35:19 - so i hope this works perfectly fine yes
35:22 - so
35:23 - let's refresh this page and what we can
35:25 - do
35:27 - we can render this
35:31 - on our front end calculations
35:36 - okay so let's refresh this page 2 plus 3
35:39 - star
35:40 - 5 so we are storing this and this is
35:44 - already showing us the time
35:46 - then let me change the query always
35:49 - rolling this
35:50 - so we are already storing this
35:51 - calculations
35:54 - and yes so this works perfectly fine and
35:57 - we can use a v for loop
36:00 - on the front end so for that we can use
36:07 - unordered list
36:10 - and we can use li
36:14 - v for item
36:20 - in calculations calc
36:24 - calculations
36:28 - okay so we can
36:32 - define we can close this and we can
36:34 - define
36:37 - item dot query
36:42 - is equal to item
36:46 - dot result
36:51 - and we can define item
36:56 - so this is calcium.js and we can have
36:58 - item dot
36:59 - time okay so let's refresh the page
37:05 - we can create two plus 3
37:08 - okay 2 plus 3 is equal to 5
37:13 - calculations book i made a spelling
37:14 - mistake this is calculations
37:18 - yeah now perfectly fine 2 plus three
37:22 - yeah so here we maintain the history
37:24 - plus the result
37:26 - we make another calculations yes we make
37:29 - some another calculation
37:33 - so this is how we make calculation and
37:35 - storing them in history
37:36 - so this is how we design a calculator
37:38 - app and
37:40 - we can also use the last result and we
37:43 - by indexing so
37:45 - we can modify them when we click on the
37:47 - last result so last
37:48 - could also become available so this is
37:51 - how we manipulate
37:52 - data in view js and this is a simple
37:55 - design how we can design a calculator
37:57 - app using the power and maintain the
37:59 - history as well
38:00 - so you could integrate this with the
38:02 - backend and store these history in a
38:04 - database as well
38:05 - we are going to learn about form
38:07 - validation in this tutorial
38:09 - so form validation is very important
38:11 - part and
38:12 - we would process the form validation
38:14 - like this is a very important part using
38:16 - view js and it is like one of the core
38:19 - topics in ugs
38:20 - so let's get started this tutorial so
38:23 - this is our project directory we have
38:24 - two files form.html and form.js i've
38:27 - already mounted the
38:28 - component so this is very similar you
38:30 - can refer to my previous tutorial and it
38:32 - is the very same thing
38:34 - which i always work with the same kind
38:37 - of components like component has been
38:39 - made data methods
38:40 - and i have mounted this on the id it
38:43 - just showing
38:44 - small error you can ignore this error
38:46 - but
38:47 - if you want to like get rid of this so
38:49 - inside
38:51 - the head tag you can put meta
38:54 - this better attack casted is equal to
38:56 - utf-8
38:57 - so this is this would remove this error
39:01 - so you know it works perfectly fine
39:03 - and at the same time you can observe
39:05 - that i have no i have you just
39:07 - installed so let me put view js
39:11 - and installation i will click on version
39:14 - three point
39:15 - x and then i would click on cdn
39:20 - installation then cdn and then i can
39:23 - copy this link
39:25 - of the cdn i can get start with the
39:27 - vue.js
39:28 - perfectly fine so i can put this at the
39:32 - bottom of my
39:33 - tag and i can put script
39:37 - type is equal to text comma javascript
39:39 - is perfectly fine and i need to define a
39:41 - source
39:41 - this is form dot form dot
39:45 - js form.js
39:49 - so perfectly fine now i can refresh the
39:51 - page and i can get start with the
39:53 - tutorial
39:54 - so i'm going to define form validation
39:58 - so let's make a small form and we
40:04 - we need to define form and then submit
40:09 - dot prevent is equal to check form
40:15 - okay and this is a form and i've already
40:19 - defined a check form function i'll
40:21 - define a check form
40:24 - check form
40:27 - and i'll define three things
40:31 - one is the name which is
40:35 - null okay
40:38 - which is null another is the age
40:41 - which is also null okay
40:45 - and another is the gender
40:48 - okay which is also null
40:52 - okay so you can
40:56 - for your simplicity you can define the v
40:59 - name b
41:00 - name and v8 vgender so that you can
41:02 - refer to this
41:03 - using vue.js okay and
41:07 - the first condition what we are going to
41:08 - define first we will define
41:11 - if this dot rename
41:16 - and this dot v
41:19 - age and this dot
41:22 - v gender then you can simply
41:27 - return true
41:31 - and simply return true and at the same
41:34 - time
41:35 - i'll have an errors which is
41:38 - uh which will store the errors and this
41:43 - dot errors so if this is true so what we
41:48 - need to define
41:50 - if this is true then what we can do
41:53 - this dot errors this
41:57 - is going to empty adding okay and then
42:02 - if uh what i mean like what i mean to
42:06 - say
42:07 - you can like okay
42:10 - i just got a little bit confused if dot
42:12 - this dot b
42:13 - name if it exists if this also exists
42:16 - and this also exists
42:17 - then you simply return true else
42:21 - you can restart this dot errors is equal
42:23 - to empty array
42:25 - and if not this dot rename
42:30 - okay then you need to define
42:35 - this dot errors
42:38 - dot push
42:42 - name name required
42:47 - okay and in the same way we'll have
42:50 - three conditions
42:53 - if this dot b h
42:56 - then i'll put age required
43:00 - and this dot v gender
43:03 - and i'll put gender required
43:07 - gender required okay
43:10 - so i have put three conditions for the
43:13 - form validation
43:15 - okay and this i hope this is perfectly
43:18 - fine
43:19 - so you must be confusing why i did this
43:21 - because
43:22 - you don't want to accumulate errors
43:23 - again and again that for every condition
43:26 - you need to check if this thing of all
43:28 - the three exists then you return
43:29 - true then you put this dot errors is
43:32 - equal to
43:32 - you make an empty array and you try
43:35 - making checking for each condition in
43:37 - this
43:37 - okay so this is how we work and i have
43:40 - put three conditions
43:42 - so this look a pretty clean code and
43:44 - let's move
43:45 - forward with this so next in form.html
43:50 - you can define input
43:55 - type is equal to text and
43:58 - you need to just remodel this
44:03 - is equal to we name and
44:07 - in the same way you can define input
44:11 - type is equal to h oh input type is your
44:14 - number because age is a number and you
44:17 - need to define this with
44:19 - v model with h v model
44:24 - is equal to this and you need to define
44:28 - two radio buttons
44:29 - input type it is equal to radio
44:33 - name is equal to gender
44:36 - okay and v model
44:39 - that's why i told you to give them a
44:41 - name with v
44:43 - v model is equal to v
44:46 - gender okay and
44:52 - value is equal to male 1
44:56 - in the same way you can give input type
44:58 - is going to radio names you don't do we
45:00 - need models will
45:01 - be gender and value is equal to female
45:04 - so let's refresh our form so i hope we
45:07 - are getting all the things
45:09 - yes so we are getting the things and we
45:12 - need to
45:12 - define labels okay okay and
45:16 - for that what we can do
45:19 - input type is go to radio uh
45:24 - oh we need to define a radio button
45:27 - so for that first for the above two we
45:31 - can define a placeholder
45:33 - and for the last one we need to define a
45:36 - radio
45:37 - uh we need to define a radio button okay
45:40 - so for this what we can give
45:44 - placeholder enter
45:47 - your name
45:52 - and for this let's refresh so here you
45:55 - have a placeholder enter your name
45:58 - and for the next one i can give place
46:01 - holder
46:02 - is going to enter your
46:05 - age okay now
46:12 - for
46:14 - now for the other two uh sorry for the
46:16 - interruption now for other two we can
46:18 - give an id
46:20 - is equal to mail and
46:23 - id you can give this a value as female
46:27 - and
46:28 - id is equal to
46:31 - female and you need to define two labels
46:35 - one is the you can put a break statement
46:38 - here
46:40 - break statement here okay
46:43 - and you can put a label label
46:48 - made and you can put label for
46:53 - mail and label
46:57 - for female
47:02 - so that's uh how we define the form and
47:06 - when we refresh so we have got our form
47:09 - okay now
47:12 - that's a like id is equal to female
47:16 - label for male is perfectly fine
47:23 - and when we refresh so
47:27 - this is working perfectly fine but i'm
47:29 - assuming that i'm missing with the
47:30 - female label
47:31 - so let me check to define a female tag
47:36 - inside this label
47:37 - that was i was missing so let me refresh
47:40 - page so i have
47:41 - works perfectly fine so what you need to
47:44 - define uh
47:45 - just for the simplicity i'll define
47:49 - a paragraph
47:52 - and i'll say
47:57 - you selected your details
48:01 - so this is just for the your details is
48:04 - your details are we name
48:09 - vh
48:12 - and be gender
48:18 - okay so let me refresh the page and i'll
48:20 - show you
48:21 - this is uh my name this is my age and
48:24 - this is my gender
48:25 - so this works perfectly fine but what we
48:28 - if
48:29 - we forget to fill anyone so for that you
48:32 - need to define
48:33 - a input type of to submit
48:36 - input type is always submit and you need
48:39 - to define
48:40 - a value
48:44 - a value which says submit
48:47 - okay now
48:51 - what i will show you you uh i have to
48:54 - define errors so for that i'll do
49:01 - i i give a v if condition if errors dot
49:04 - length is greater than 0
49:06 - because i need to show the condition
49:10 - on the front end so how i'll show you
49:12 - i'll show you
49:16 - so for that what you need to define
49:19 - you need to define
49:22 - div v if
49:27 - errors dot length
49:31 - is greater than zero this means there
49:34 - are some errors and i close this div
49:39 - and i'll use the ul tag
49:42 - and i'll close this ul and li
49:47 - tag and the style is equal to
49:50 - i'll give style is equal to color red
49:54 - okay and i'll give a v for loop v
49:57 - for
50:00 - v for is equal to
50:04 - item in errors
50:07 - you can give item
50:10 - okay or simply you can change this to
50:13 - error and
50:14 - if you want to change this to error then
50:16 - you have to change this to as
50:17 - error as well okay your error
50:20 - in error so let me refresh the page
50:24 - okay there's another property errors for
50:26 - tested but not
50:27 - defined on instance
50:32 - error because i defined to do this this
50:35 - this was error
50:36 - that was a spelling mistake so let me
50:39 - refresh the page
50:40 - so now i hope the spelling has been
50:42 - corrected so let's go to this part
50:44 - yeah so your name is
50:49 - python and if i forget to sum
50:52 - age required gender required so age is
50:55 - 45 then gender required so this was i
50:58 - was doing the same part this was
51:01 - initialized and if so
51:04 - when something i remove the name i have
51:07 - the
51:08 - age and gender so name required so this
51:10 - is how we handle
51:12 - form handling in view js we are going to
51:14 - learn about how to fetch an api using
51:16 - vue.js
51:17 - so what you can do you can move to the
51:19 - bootstrap website and click on get
51:21 - starter template
51:22 - and you can copy this template and you
51:24 - can paste this uh
51:26 - in advice i'm html and what you can do
51:29 - you can paste on this website and
51:33 - you can refer to this so to fetch an api
51:37 - we are going to first i'll give this a
51:38 - title advice app
51:41 - advice app and what i'm going to do i'm
51:45 - going to use another dependency that is
51:47 - axios axos is very similar to
51:50 - fetch uh you can use access or fetch
51:52 - it's up to you
51:53 - uh i'll show you how to do this using
51:55 - fetch
51:56 - so this is the api we are going to use
51:59 - advice like json api this is a free api
52:01 - which returns an api
52:02 - and it would you can fetch and advise
52:04 - the idea and you can search and advise
52:06 - so this is how we do it and we will uh
52:09 - first we will
52:10 - try to initialize make a simple one then
52:13 - we can
52:13 - get back to the like how we fetch an api
52:16 - so what you can do
52:17 - uh you can move to this uh get a website
52:21 - uh that is axios uh you can use axial so
52:24 - exercise is
52:25 - basically used to fetch apis so what you
52:29 - can do
52:29 - uh you can move to this link
52:32 - and and you can you click here
52:36 - and what you can do you can simply add
52:39 - this script
52:40 - this is uh so this is accessment.js
52:44 - so you can simply copy this script
52:48 - and you can use this in your project
52:51 - so at the below you can use this so
52:54 - axle is there now what you can do you
52:56 - can also put
52:57 - vue.js in your project and you can
53:00 - install vue.js you can click on view 3.x
53:06 - so then you can click on get started
53:09 - and you can click on three point x
53:13 - and you can click on installation so
53:15 - this is how we're going to get cdn for
53:17 - the vue.js
53:19 - and you can copy this script tag and you
53:22 - can paste this in your html page
53:24 - then we can add our own script tag that
53:26 - is script
53:29 - script and we can give a typo to text
53:32 - from javascript javascript is perfectly
53:34 - fine we can
53:35 - give a source that is advise
53:38 - advice app dot js
53:42 - so we have used both the things that is
53:45 - axios
53:45 - and the script a script tag using advice
53:49 - app.js we have used both the things
53:51 - so this would particularly help us so
53:53 - axos is used to catch an api i'll show
53:55 - you how you fetch one
53:57 - so let's make a form uh then we can
54:01 - fetch the api using access okay so let's
54:05 - move with the code then first you need
54:07 - to like i'll show you one thing
54:09 - what you can do in this advice app.js
54:13 - you can do
54:14 - constant my app component
54:18 - and you can give a data app component
54:22 - and you can give a data
54:27 - and you can return a json object
54:31 - okay now you can return a json object
54:33 - plus you will have some methods
54:36 - uh methods is going to be one that will
54:38 - say fetch
54:39 - api okay so effect api is going to be
54:42 - with the method
54:44 - and what you can do you can uh
54:48 - create some data that is you can create
54:50 - some null data
54:51 - that is response
54:56 - response is equal to an mg json object
54:59 - okay
55:00 - and this is how you you will do it and
55:04 - like you can do response data
55:07 - is equal to empty json object okay now
55:10 - what we can do
55:11 - we will first fetch an api using axios
55:15 - and you we can mount this hours as well
55:18 - constant my app
55:23 - is equal to view
55:26 - dot create app
55:30 - my app component dot
55:34 - mount so you can use the mount
55:36 - functionality
55:37 - and you can give my app as the id so
55:41 - in this you can give an div div
55:45 - id is equal to my app
55:48 - okay so this is how we do it and we
55:52 - right now for just the sake that we want
55:55 - when we open our
55:56 - application so let me move to this page
55:59 - so what you can do you can right click
56:01 - and you can right click and
56:02 - uh open containing copy file path
56:07 - and you can paste this path here so this
56:10 - is your js file
56:11 - okay i meant to open the html file you
56:13 - can click on copy file path and you can
56:16 - open this html page so this is how we
56:19 - open the page and you can right click
56:21 - and inspect element
56:22 - so here you can see everything looks
56:24 - perfectly fine
56:25 - we are good to go with our code so axos
56:28 - has installed
56:29 - and now what i want to do that
56:33 - when i open my application so i already
56:35 - want
56:36 - this dot this fetch api function to be
56:38 - called automatically
56:40 - so for that what you can do you can use
56:42 - the inbuilt functionality there is one
56:44 - more thing mounted
56:46 - so mounted means that you call this
56:49 - method
56:50 - you call this method automatically when
56:52 - your page gets loaded or when the
56:54 - component gets loaded
56:55 - so we want our response to be displayed
56:58 - automatically as we open the website so
57:00 - we don't want something to be clicked
57:02 - so we can call this dot patch api
57:06 - so this dot fetch api will be
57:08 - automatically called when we open the
57:10 - page so
57:11 - for that what i can do console
57:15 - dot log
57:18 - com we can do mounted
57:21 - okay so this would be automatically
57:23 - called let's refresh the page and here
57:24 - you can see
57:25 - it says mounted so this is automatically
57:27 - called this function method has been
57:29 - automatically called
57:30 - as soon as we load the component so the
57:33 - next what we can do
57:35 - we can uh we can use some response
57:39 - so let's see how we get a response from
57:41 - the api
57:43 - so this is the api we can open this api
57:46 - and here you can see that this
57:50 - api returns a json object which says
57:53 - slip
57:53 - id is equal to one one six and advises
57:55 - you to one of the top five requests
57:57 - people have is that they this is
57:58 - just an advice and with that we have an
58:01 - id
58:02 - so let's see how we we fetch the api
58:06 - so let's copy this https request
58:09 - and let's put this so we if
58:12 - our this api is constant so we
58:16 - can put this above our code api
58:19 - is equal to this so this is our constant
58:22 - api
58:23 - so it will remain forever for this code
58:25 - and we could
58:27 - just modify it as well so what we can do
58:31 - what we can do we can we can do
58:35 - uh so we want this function we want the
58:38 - we want we want to
58:39 - wait for an api response so what we will
58:41 - do we will make this function
58:43 - asynchronous
58:44 - that is we would wait for this function
58:46 - to load and complete
58:48 - if we make this function asynchronous
58:49 - then we can use an await
58:51 - keyword that is await a wait for the
58:54 - response
58:55 - we need to wait for the response and for
58:57 - that we would do
58:58 - axios dot get
59:04 - api so we are calling dot get api
59:08 - and if we get an api then we will have
59:10 - two things that is
59:11 - then the next thing we will do and
59:15 - plus catch error so
59:18 - if we have an error so we can make a
59:20 - function to call the error
59:21 - error is equal to console dot
59:26 - console
59:29 - dot log error okay
59:33 - so this would automatically confirm the
59:35 - error
59:36 - if if there is no error then we will
59:38 - proceed with the
59:39 - then functionality then we would get the
59:42 - response
59:44 - response okay and
59:48 - we want to do this
59:51 - dot response data
59:55 - is equal to response
59:58 - dot data okay so this is how we do it
60:01 - and we can
60:03 - what we can do we can just simply
60:07 - do this response
60:11 - data okay so let's refresh the page
60:14 - move to our app and this is our app
60:18 - now here you can see just for a
60:21 - automatic automatically we load this
60:23 - page and we get the
60:24 - response data okay so what we can
60:28 - do uh we can
60:31 - we can create a front end
60:34 - so this is how we fetch an api and we
60:36 - can render this
60:37 - using bootstrap so i'll show you quickly
60:40 - how we do it
60:41 - you can move to the bootstrap and you
60:43 - can look for cards
60:47 - okay and in this you can copy this
60:52 - and you can first give an h1 tag
60:59 - and you can say advice
61:03 - i have and you can give a style is equal
61:07 - to text
61:09 - a line is equal to center
61:13 - okay and let's refresh this okay sorry
61:16 - let's refresh this and we get advice app
61:19 - and now
61:19 - we can create a card we can paste the
61:23 - card here
61:24 - and we can we can remove this image
61:28 - because we don't need it and we can
61:32 - so we can advise for the day
61:39 - day is something we can call this advice
61:43 - for the day is
61:44 - and what we can do uh we have two things
61:49 - so this is we can remove this
61:52 - and we can give 2p
61:55 - class so one is the id
61:58 - and another is the like we are do so
62:01 - what we can do
62:02 - uh what we can do like we have a
62:06 - response data this is perfectly fine
62:08 - and we can create two things
62:12 - one is id so let this be null
62:17 - and another is the text so this should
62:20 - be also null
62:21 - and what we can do this dot response
62:24 - data is able to respond to data
62:26 - and we can do this dot id
62:30 - okay so let me show you one thing
62:34 - so we have a slip and id
62:37 - so we can do response just one.data.slip
62:42 - okay and you can
62:46 - you can do this as well response or data
62:48 - dot id
62:49 - uh okay i'll show you one thing
62:54 - i'll not make this complicated this dot
62:56 - id is this good too
62:59 - i just wanted to show you so i kept an
63:01 - empty json object
63:03 - response.data.slip dot id
63:06 - okay and this dot
63:10 - text is equal to the same thing
63:14 - and i'll copy this and paste it here
63:18 - advice
63:21 - and i'll put a comma here and here i'll
63:24 - put
63:25 - id
63:28 - and text
63:32 - okay so let me i think i have done
63:35 - enough
63:36 - for this and let me refresh so here you
63:38 - can see
63:40 - you get a card advice for the day is a
63:42 - advice number you get 150 you try using
63:44 - an old idea
63:46 - so this is how you fetch an api and you
63:48 - i have a responses to any card
63:50 - and you can just make it more simple
63:54 - number advice
63:58 - advice id and advice
64:02 - text
64:06 - and you can just simply
64:11 - so you can simply you can simply put a
64:14 - bolt back around it
64:16 - so if you want you can make it bold
64:23 - so you can also make this bold as well
64:28 - and you can just remove this response
64:31 - data because we don't need it
64:33 - and you can style is equal to
64:37 - margin zero auto
64:41 - margin zero auto so let me refresh the
64:44 - page
64:45 - so here you can see so
64:48 - advice text okay let me inspect element
64:52 - and i have given than zero
64:56 - okay so i've given uh i have given uh
64:59 - like
64:59 - i've given this to the okay let me
65:03 - remove this
65:04 - and let me remove this yes perfectly
65:07 - fine
65:08 - so this is how we fetch an api advice
65:10 - for the day is advice id is 198
65:12 - saying is the shower so we already get
65:15 - the response on the back end and
65:16 - displayed on the front end so this is
65:17 - how we do it
65:18 - today we are going to take the help of
65:20 - this api that at api.deviceslip.com
65:24 - and we are going to make a search we
65:26 - feature so basically
65:28 - we are going to search advice using this
65:30 - simple api so we will put
65:33 - put an input query from the user and we
65:36 - will be searching the advice using the
65:37 - same
65:38 - so let's do let's see how we can do that
65:42 - so we are going to do we are going to
65:43 - create a search searching a device
65:45 - feature
65:46 - and we are going to take a dynamic input
65:48 - and we are going to then
65:49 - render the data using the list group of
65:51 - the bootstrap
65:52 - and we will see how we can do that and
65:54 - we are going to fetch a very dynamic
65:56 - data so we don't know how much data we
65:57 - are going to get and we are going to
65:58 - render the same
66:00 - so for that i have already made the
66:01 - boilerplate index.html and index.js
66:05 - so for this what we can do we can create
66:07 - a div class is equal to call md6
66:11 - just for responsiveness just for the
66:13 - responsive part i'm doing this
66:15 - and then inside this what you can put
66:17 - you can put
66:18 - style is equal to margin one ram auto
66:23 - okay you can give a padding of one ram
66:25 - and for the same
66:26 - uh you can this is perfectly fine
66:30 - and what you can do you can give a class
66:33 - text center okay
66:36 - you can remove this as no and then you
66:39 - can give a feature
66:40 - h1 and h1 you can give
66:44 - a search advice
66:47 - okay so this looks perfectly fine and
66:49 - for this you can give
66:52 - style is equal to text align center
66:55 - and you can give a margin 0 auto okay
66:58 - so you can also give a one name order
67:00 - for that okay and
67:02 - when we refresh this page on our so we
67:04 - get a search advice at the center and
67:06 - there is already a container which you
67:07 - can
67:08 - we can see okay if you want to see the
67:10 - container you can give
67:12 - a border you can give a border
67:15 - one ramp solid okay and
67:19 - black i hope this is this is a shorthand
67:22 - property and if this would make you show
67:24 - the
67:24 - like this is very too much the one ram
67:26 - is too much you can give
67:28 - like one pixel is perfectly fine instead
67:31 - of ram
67:32 - okay now let's refresh this page so here
67:34 - you see the search advice okay
67:35 - in the same way what we are going to do
67:37 - we are going to give
67:38 - input type is equal to search okay
67:42 - so input type is equal to search and
67:46 - we are going to give a class is equal to
67:48 - form
67:49 - form control
67:53 - and in another way we are going to
67:54 - another input that is
67:56 - input type is equal to submit
67:59 - and for this we are going to give a
68:02 - class of button button primary
68:04 - we are going to clear class is equal to
68:06 - button
68:08 - button primary
68:11 - and what we are going to do style
68:15 - we are going to give a style of display
68:16 - block and then we are going to give a
68:19 - margin
68:20 - of 1 ram on auto
68:23 - okay so this is perfectly fine and we
68:26 - had to put all this input type
68:29 - inside a form okay so now we have
68:32 - already put this
68:33 - inside the form so this is perfectly
68:36 - fine we have to put this inside the form
68:38 - and what we need to do we have to put
68:41 - this inside a form
68:42 - and then we have to make a tab and then
68:46 - we have to do
68:46 - that submit submit
68:50 - dot prevent is equal to
68:54 - get data okay and
68:58 - when we make uh we'll make a method
69:01 - which says inside our methods we are
69:03 - going to build
69:04 - a get data which is going to be
69:06 - asynchronous is
69:07 - async because we will wait for the api
69:10 - response async
69:11 - get data and for that
69:15 - what we can do okay uh console
69:20 - console dot log
69:23 - this dot query okay but we haven't made
69:27 - the query and for this
69:28 - query is going to be null
69:31 - perfectly fine we are going in the right
69:33 - direction and
69:34 - in this we need to define
69:37 - we need to remodel this v model
69:42 - you do the query at the component so i
69:45 - hope you all are getting this because
69:47 - you would be
69:48 - pretty much efficient so let's we make
69:51 - thing and let me type hello okay we have
69:54 - error at line number seven
69:56 - okay let me see index.js line number
69:59 - seven
70:01 - okay so so this is methods
70:07 - okay yeah
70:10 - so we are doing perfectly fine
70:15 - async so let me refresh this page
70:19 - so let me i have error let me check
70:22 - okay the error was that that i had
70:25 - basically missed a curly brace tag here
70:28 - so i had missed that i'll show you i
70:29 - highlight where i had missed i had made
70:31 - a miss because this was the early track
70:33 - for the json object for the return
70:34 - statement and this was the curly braces
70:36 - for the data
70:36 - now let me save and refresh so it's
70:39 - perfectly fine and i'll type
70:41 - live so here you see i have the response
70:44 - live
70:44 - at the back end so like not uh so as the
70:48 - component has the
70:49 - data so now what i want to do i'll make
70:52 - empty json array using data
70:54 - okay and this is a mt json array
70:57 - so now what i'll do i'll do a weight
71:00 - axios dot get okay
71:04 - so when i get this okay i'll get this
71:07 - i'll make two
71:08 - things one is the dot
71:11 - then part okay and another is the dot
71:14 - catch part
71:15 - so inside the catch part i'll simply do
71:17 - error
71:18 - error and i'll do
71:23 - and i'll do console console
71:26 - dot log error okay and in this then part
71:31 - i'll do response i'll get the response
71:34 - okay response and i'll do
71:39 - this dot data is equal to response
71:42 - dot data and one thing i need to mention
71:45 - here when i move to this and i'll get
71:47 - so the slips is the json array we are
71:49 - getting so we'll do response dot data
71:52 - dot slips okay and then
71:56 - what i can do i do console.log
71:59 - this dot data okay so let me refresh
72:04 - and oh i forgot to hit the api
72:07 - so for how to hit the api you can do
72:09 - copy this
72:10 - and you can or you can copy this this
72:13 - you can copy this and you can put it
72:17 - here
72:18 - but i'll show you one thing how you put
72:20 - it
72:21 - so for this you need to okay
72:24 - so here you can see the query has to be
72:27 - this so what i need to do i need to
72:28 - define a curly symbol here
72:30 - and should be this dot query and very
72:33 - simple
72:34 - okay so let me refresh and let me put
72:38 - life so here you can see i have a json
72:41 - array
72:42 - okay so it says data so this is how we
72:46 - get the data inside the json array
72:49 - okay so what i can do in a inside my
72:52 - html page what i can do
72:54 - i can simply print this data okay uh
72:57 - let's try one more thing once again how
72:58 - we get the data
73:00 - but it's going to be very unformatted
73:02 - let's refresh
73:03 - rdt here you can see the empty json
73:05 - array i hope it's perfectly fine okay
73:07 - i'll do one thing
73:08 - okay uh then let me put live
73:12 - and here you can see we get a very
73:14 - unformatted data this data is very much
73:16 - same
73:16 - we are getting here okay but this data
73:20 - unformatted data is of
73:21 - or no use if we don't format it so what
73:24 - we can do
73:25 - we i'll use list group of bootstrap
73:28 - so i'll copy this url class is good list
73:31 - group
73:32 - and inside my html i'll put it here
73:35 - and i'll have only list item
73:38 - and we i'll do a v4 loop okay
73:43 - and for that i'm going to do item
73:46 - in i'll do item
73:50 - comma index
73:53 - index in data so data what we are
73:56 - getting
73:57 - and i'll do i'll print two things
74:00 - index starts from zero so i'll do index
74:03 - plus
74:04 - one okay i'll put a dot
74:07 - then item
74:12 - okay and i'll do item
74:15 - and what i did to do one thing i should
74:19 - make sure
74:20 - because we had do item dot id or slips
74:22 - so what do you want so we want advice so
74:24 - we'll do item
74:26 - dot advice okay
74:30 - so this is perfectly fine let me close
74:32 - the page
74:33 - and refresh this live
74:36 - perfectly fine we don't need we don't
74:40 - need this uh unformatted data so what we
74:43 - can do
74:44 - this is perfectly fine let's refresh and
74:47 - do once again
74:48 - let's refresh and we say live we get the
74:52 - data in a formatted way
74:54 - so this is how we do it and this is how
74:56 - we get the dynamic data
74:58 - and this is how we render in the view
75:00 - chair so thank you everyone for watching
75:02 - this tutorial
75:04 - i hope uh this has this is very clear uh
75:07 - then you can move this console.log
75:09 - statement it's not needed
75:11 - and this is how we did render the data
75:13 - on the front end so thank you everyone
75:15 - for watching this tutorial
75:16 - uh so so thank you everyone