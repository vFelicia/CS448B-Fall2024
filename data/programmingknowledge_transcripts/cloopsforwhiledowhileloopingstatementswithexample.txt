00:00 - this is john from programming knowledge
00:02 - and in this video guys we're going to
00:03 - talk about
00:04 - loops in c programming so sometimes it
00:07 - is necessary for the program
00:10 - to execute the statement several times
00:13 - and c loops execute a block of commands
00:16 - in a specified number of times until
00:19 - a condition is met so in this video
00:21 - tutorial
00:22 - you will learn um about all the the
00:25 - looping statements of c
00:27 - programming and along with their use
00:30 - so as you can see computer is the most
00:33 - um suitable machine to perform
00:36 - repetitive tests and it can tirelessly
00:39 - do a task tens of thousands of times
00:42 - okay
00:43 - and basically like every programming
00:45 - language has this particular feature
00:48 - to instruct to do such repetitive tests
00:51 - with the help of certain form of
00:53 - statements
00:54 - so that's why we have this loops and
00:57 - then of course guys
00:58 - in c uh the c programming language
01:01 - supports like
01:02 - three types of loops so we're going to
01:05 - discuss first
01:06 - uh while loops okay so we have
01:09 - while loops we have do while
01:14 - and of course we also have the for loops
01:17 - okay so we're going to dissect
01:21 - each type of loop so that we could you
01:23 - know better understand how it works and
01:27 - how we can use these loops in in a
01:29 - certain situation
01:31 - so basically guys when we say
01:34 - loop i'm just going to show you a simple
01:38 - flowchart
01:39 - so we have here a simple flowchart that
01:42 - describes
01:43 - the nature of loop
01:46 - or loops in general so we have like
01:49 - start
01:50 - and then we can declare a counter or a
01:52 - variable counter
01:54 - and then our program will try to
01:55 - evaluate the condition
01:57 - and then if the condition is you know
02:00 - returns true
02:02 - it could execute statements
02:05 - and then increment the counter and then
02:09 - again evaluate the condition if the like
02:12 - for example the increment counter
02:14 - is equal or you know greater than
02:17 - something and then execute statements
02:20 - uh increment counter and then
02:23 - uh evaluate condition and lastly
02:27 - uh if the condition is met then it will
02:30 - stop
02:30 - the execution of that particular loop
02:34 - so basically guys a loop is just you
02:35 - know doing or executing
02:38 - repetitive statements inside
02:41 - our c program so there are like
02:44 - uh control statements we have uh
02:48 - statements that we can use
02:50 - so we have a break
02:54 - we can have like um continue
02:57 - and then of course we have the go to
03:00 - statement that we have discussed
03:02 - previously
03:03 - in our video tutorial series okay so as
03:06 - i've
03:07 - as i've said we will discuss first the
03:11 - while loops in c programming okay
03:15 - so see while loops statement allows to
03:18 - repeatedly
03:19 - run the same block of code until the
03:20 - condition is met
03:23 - and of course while loop is the most
03:25 - basic
03:26 - loop in c programming and while
03:30 - a while loop has one condition and it
03:32 - contains
03:34 - uh or it executes as long as the
03:37 - condition is true and then
03:39 - the condition of the loop is tested
03:41 - before the body of the loop
03:42 - is executed so
03:46 - uh the syntax for our while loop is like
03:49 - this
03:51 - so we have the keyword while
03:55 - and then a condition so
03:58 - like it test expression and then if this
04:01 - condition
04:02 - is like true then it will try to
04:06 - execute the statements ins
04:09 - inside this particular while loop
04:13 - okay now we have like we can
04:17 - have a very simple application for this
04:20 - so for example we will try
04:24 - to implement this
04:29 - okay so we can declare like
04:33 - a variable so in n
04:37 - equals 1 and then
04:40 - times plus five
04:44 - and then of course we can declare the
04:46 - while loop
04:47 - for our program like this and then open
04:50 - and close parenthesis
04:52 - and then we can say n is less
04:56 - than or equal to times
04:59 - okay so we have to add the
05:03 - curly braces for that and then inside
05:05 - this curly braces
05:08 - these are the statements that will be
05:09 - executed if this particular condition
05:12 - is true okay so
05:16 - it will try to print like
05:19 - c while loops
05:24 - and then we can add the percent
05:28 - or yeah percent d which is the format
05:30 - specifier for our
05:32 - in variable and then we can display the
05:35 - n okay and then of course we can
05:41 - we can increment the var uh the value of
05:44 - n by using the increment that we have
05:47 - discussed before which is
05:49 - n plus plus so basically this is just
05:52 - you know
05:53 - basically saying n equals n plus
05:56 - one okay uh i think uh we have already
06:00 - discussed that the n plus plus increment
06:03 - in our video uh previous videos okay
06:06 - now we have set the value n
06:09 - equals to one okay and then we have set
06:12 - the number of times the loop should be
06:14 - executed so that's basically five
06:18 - uh there should be five execution and
06:21 - then we
06:23 - added the while statement and then check
06:26 - the condition
06:27 - if n is less than or equal to
06:30 - times then execute
06:34 - this statements right here so we can try
06:36 - to check this
06:37 - build and run our application
06:43 - and try to see the output of our program
06:47 - and i'm going to you know slowly explain
06:50 - to you
06:51 - what happens in this particular program
06:54 - so you can see the output right here cuy
06:58 - loops
06:58 - one see why loops two and then three
07:02 - four and five and after
07:06 - uh five it no longer executed
07:09 - because it you know ended the
07:13 - loop okay so
07:16 - i'm going to explain to you how we got
07:20 - this output so first thing
07:24 - as i've said we declare n equals to 1 so
07:26 - in this condition
07:27 - 1 is less than or equal to five which is
07:30 - the value
07:31 - of times so basically and of course it
07:34 - is true
07:35 - that one is less than or equal to five
07:38 - so
07:38 - that's why it executed this particular
07:41 - statement
07:42 - c while loops and then it displays the
07:45 - value one right here okay and then
07:49 - it incremented the value n so
07:53 - now the end becomes two okay and then
07:56 - it will go here in our condition
08:00 - once again so 2 is less than or equal to
08:04 - 5. so that's true because obviously
08:07 - 2 is less than or equal to 5.
08:11 - so that's uh it executes this statement
08:14 - right here
08:15 - cuy loops and then the value of our n
08:18 - which is
08:19 - two again it incremented the n
08:23 - variable so the
08:26 - n now becomes three so after that one
08:31 - we will go back here in the condition is
08:34 - three
08:36 - equals or i mean less than or equal
08:40 - to five so that's true because three is
08:43 - equal to
08:44 - or i mean less than two five so that's
08:46 - why it uh printed
08:48 - the uh output right here
08:51 - c while loops and then the value of our
08:54 - n equals to 3
08:55 - and now after that it incremented
08:58 - another time the n
09:00 - and the end becomes 4 now and it go back
09:03 - to the condition
09:05 - s4 less than 5. so
09:09 - basically 4 is less than 5 obviously
09:13 - so that's why it printed out the c
09:16 - while loops and then 4 the value of our
09:19 - n and again incremented
09:23 - added one to the end variable and then
09:26 - the n now becomes five and then go back
09:30 - here in the condition
09:31 - is five less than or equal to
09:34 - five so it uh it returned
09:37 - uh true again because five is equal to
09:40 - five
09:41 - so it printed out c while loops and then
09:45 - the value of of our n which is five
09:49 - now it incremented another time the n
09:53 - variable and now the the end variable
09:55 - becomes six
09:57 - and it will go directly here in our
09:59 - condition
10:00 - is six less than or equal to five
10:05 - so it returns false because six is not
10:08 - less than
10:09 - or not even equal to five that's why it
10:12 - uh ended the loop and it never
10:15 - executed the uh
10:19 - this particular statements right here
10:20 - once again because six is not
10:22 - less than or equal to five which is the
10:26 - value of our times
10:27 - variable we're going to discuss another
10:30 - type of loop which is the do while
10:32 - so from the previous tutorial we already
10:34 - have discussed the while loop
10:36 - okay and then we implemented a simple
10:39 - iteration program
10:41 - where we can see the value of the
10:44 - variable each of the iteration of our
10:46 - while loop
10:47 - now the difference between while loop
10:49 - and do while is that
10:50 - the while loop will try to evaluate
10:54 - first the condition
10:56 - and then if this condition is you know
10:58 - return true
11:00 - then it will execute the statement
11:02 - inside this particular
11:04 - while loop whereas when we are trying to
11:07 - use the do while loop
11:08 - then the statements inside the loop
11:11 - will you know execute at least once
11:14 - before
11:16 - the condition is being evaluated so
11:19 - the syntax for that is like this we will
11:21 - just remove this for now
11:23 - all these lines of the while loop from
11:27 - the previous tutorial
11:32 - okay so this is the format or basic
11:35 - format of the
11:36 - do while statement or do while loop in
11:39 - c so basically we have the do keyword
11:42 - and then open and close
11:44 - curly braces and then the statements
11:48 - or group of statements okay now
11:52 - after the curly braces then it will
11:56 - have this the while keyword and then
11:58 - open
11:59 - and close parenthesis with the condition
12:01 - inside
12:02 - it so as i've said earlier guys that
12:05 - this particular loop
12:06 - will try to execute at least once before
12:10 - the condition
12:11 - is being evaluated okay
12:14 - so as you can see if you wanna like
12:17 - execute first some statements before you
12:19 - could
12:20 - evaluate the condition so
12:23 - so the dual loop is the way to go
12:27 - so we will try to create another program
12:29 - guys
12:30 - showcasing how this particular do while
12:33 - statement or dual loop
12:35 - looks like or how it works so basically
12:38 - guys we could
12:40 - um initialize some variables here so for
12:43 - example the
12:44 - n so int n equals one
12:50 - and then we could also uh declare
12:53 - another variable which is times
12:57 - so basically what we are doing here or
12:59 - what we are declaring here is two
13:01 - variables
13:03 - for our um do while and the
13:06 - n represents the
13:09 - number i mean the value of the iteration
13:12 - or
13:13 - the value of the variable each iteration
13:16 - and then of course the times
13:18 - is the number of times the loop
13:21 - should execute okay now inside
13:24 - our do while or do statement
13:28 - we could add
13:31 - a printf statement here
13:34 - and then you could say c
13:38 - do while loops and then the
13:42 - format specifier
13:45 - percent d backslash n
13:48 - and of course uh the n
13:52 - variable okay so we have this
13:56 - printf statement so basically what what
13:58 - we're trying here is
13:59 - we're trying to display the value of
14:02 - n every um you know execution
14:07 - of this particular statements okay
14:10 - and in here below this printf statement
14:13 - we could
14:14 - increment the n
14:18 - by you know using this statement and
14:21 - equals
14:22 - n plus one or you can simply use
14:26 - the n plus plus version
14:29 - of this particular statement so n equals
14:32 - n
14:32 - plus one so again every iteration
14:36 - we would try to increment the value of
14:38 - our n plus
14:39 - one and then inside here
14:43 - the while and then open close
14:45 - parenthesis we could
14:47 - add the condition so for our condition
14:50 - you could
14:51 - add the n and then less than
14:55 - or equal to the number of times
14:58 - we want this while loop or do while to
15:02 - be
15:02 - you know executed okay so i think that's
15:06 - all for this um do while statement
15:10 - so we could try to run our program
15:13 - and then build and run
15:17 - and see how this particular program
15:19 - works
15:21 - okay so basically guys i will try to
15:25 - explain it to you how this or how we get
15:27 - this
15:30 - output so from the initial
15:35 - value of rn we have
15:40 - executed the do statement right here so
15:44 - we printed out like the value is c
15:48 - do y loops then percent t
15:51 - and then the value of our n is one
15:54 - okay so after this iteration
15:58 - we um increment the value of our n
16:01 - by one so that's n equals
16:04 - n plus two okay or i mean one
16:08 - n plus one and then the semicolon
16:11 - and then of course we will try to
16:13 - evaluate this in our condition
16:15 - so two is less than or equal to times
16:19 - which is
16:20 - five so of course 2 is less than
16:23 - 5 so that makes sense and then it will
16:26 - try
16:27 - to execute the statements
16:30 - inside the this curly braces
16:34 - okay then printf c do while loops
16:38 - and then of course it will try to to
16:40 - output the value
16:42 - two okay after this
16:45 - the n will be incremented again by
16:48 - one so n equals n plus one so the value
16:52 - now or the
16:52 - n value now becomes um
16:55 - three and then evaluate it in our
16:59 - uh open and close parenthesis so
17:03 - three less than or equal to five
17:06 - so obviously three is less than
17:09 - five so it will try to implement or
17:12 - execute
17:13 - again the statement inside our current
17:16 - basis
17:17 - and then display three
17:21 - this will be the line uh three
17:24 - and then of course it will increment
17:26 - again the value n and it
17:28 - the end becomes four now and then uh
17:31 - evaluated once again is four
17:34 - less than or equal to five
17:37 - so um basically four
17:40 - is uh you know less than five so it will
17:44 - execute the statement printf again
17:46 - display the value 4 and then
17:51 - increment again the n
17:54 - it becomes 5
17:57 - and then after that it will try to
18:00 - evaluate the statement is less or n is
18:03 - less than equal to five
18:06 - so we have set now the value to five so
18:08 - five
18:10 - is equal to five so it will try to
18:14 - execute the statement once again and if
18:17 - the
18:18 - five value now becomes or the end value
18:21 - now becomes six because
18:22 - we try to increment it here so six
18:25 - will be evaluated inside our while
18:28 - statement
18:29 - then six is less than or equal to five
18:33 - so that's basically not true because of
18:36 - course obviously
18:37 - six cannot be less than or cannot even
18:40 - be
18:41 - equal to 5 so that's why it will try to
18:46 - end the loop because
18:50 - the condition returns false
18:53 - already okay so that's how the do well
18:57 - statement
18:58 - works and guys make sure that
19:01 - um there's like infinite
19:05 - um end of your loop because there are
19:08 - cases
19:08 - that you know the condition will not be
19:12 - evaluated
19:13 - into false at some point in our program
19:16 - so that will make
19:17 - it like the infinite loop
19:20 - so the concept of infinite infinite load
19:24 - so be careful to place a
19:28 - condition here that will try to or like
19:31 - will be evaluated false at some point in
19:33 - our program
19:35 - because you don't want to have the
19:36 - infinite loop because
19:39 - the program will run
19:42 - infinitely and you don't want that it
19:44 - would you know consume the memory of
19:46 - your computer
19:47 - so that's why you you need to be
19:50 - careful with the infinite loop so make
19:54 - sure again
19:55 - to add a condition that will be
19:57 - evaluated as false at some point in your
20:00 - program
20:00 - yes we're going to discuss another type
20:03 - of loop
20:03 - which is a for loop so from the previous
20:07 - tutorials we have like
20:09 - um discuss already what is white loop
20:12 - what is do while and how it can be used
20:14 - in rc programming or c programs
20:18 - so as i've said guys in this video we're
20:20 - going to discuss for loops and of course
20:22 - we're going to describe the syntax of
20:24 - for loops
20:25 - okay so the syntax for for loops guys
20:29 - is like this i'm going to copy and paste
20:32 - this here
20:36 - so we have here the four keyword
20:40 - and then we have the open and close
20:42 - parenthesis
20:43 - in which we have we can you know there
20:46 - uh there are like three um statements
20:50 - that are available for us so
20:53 - the first one is the init
20:56 - or initialize and then the second
21:00 - um statement is the condition
21:04 - and the third one is increment
21:07 - or it could be also decrement
21:10 - okay so this three statements inside
21:13 - this
21:14 - open and closed parenthesis is separated
21:16 - by semicolon
21:18 - okay and of course guys each of this
21:22 - statement plays you know a big role in
21:26 - our
21:26 - for loop okay now we can try to
21:29 - implement our very simple for loop so
21:32 - for example
21:33 - let's um declare a variable
21:36 - for our for loop um inside the
21:40 - initialize statement
21:42 - we could you know um initialize a a
21:45 - variable right here like for example
21:47 - in x equals
21:51 - zero so we could do that here we could
21:54 - initialize our variable
21:56 - into something like zero or it could be
21:59 - one if you want to start um
22:01 - [Music]
22:03 - one so basically guys it is
22:06 - the same as declaring the variable here
22:09 - so
22:09 - index so you could also
22:12 - do that here um
22:16 - initialize the value to x so
22:19 - this 2 is just the same so basically
22:22 - we're just declaring the variable and
22:24 - setting the initial value say for
22:26 - example 0
22:27 - or 1. now the second statement
22:32 - for this particular for loop
22:35 - we could you know add the condition
22:39 - so the condition is something like this
22:42 - we could check if the
22:46 - x variable is less than or equal to
22:50 - 5 just like what we have from the while
22:53 - loop
22:54 - and do y loop so we're checking if
22:57 - the value of the variable is less than
22:59 - or equal to five
23:01 - and of course the last part or the last
23:03 - statement for this particular open and
23:06 - closed part is this for loop you could
23:07 - you know
23:08 - add the increment or it could be the
23:12 - decrement depending on
23:13 - the initialize the condition of course
23:17 - in your for loop so for example you want
23:19 - for now
23:19 - is to increment so you could actually do
23:22 - this like this
23:23 - x equals x plus
23:27 - one inside the for loop and then of
23:30 - course guys
23:31 - the statements inside the
23:34 - curly braces so the statements you know
23:37 - you could
23:38 - execute statements right here so for
23:40 - example printf
23:43 - the value of x
23:46 - colon and then the format specifier
23:50 - percent d
23:52 - backslash n to uh have a new line
23:56 - then specify our variable x and then
24:00 - end this off with each semicolon just
24:03 - like this
24:04 - so guys basically what we're trying is
24:06 - to display the value of the variable x
24:09 - each iteration of this particular loop
24:12 - so we could you know
24:14 - build and run this application
24:17 - and see how it works now we have this
24:20 - output the value is one the value is two
24:25 - the value is three the value is four
24:28 - and five so guys i'm going to explain to
24:30 - you how
24:32 - we come up with this output
24:35 - so at first guys you know we declare the
24:39 - variable x and initialize the value into
24:44 - 1 so now the value for our x is
24:47 - one okay so value of
24:51 - rx is what um
24:54 - [Music]
24:56 - one okay and then
25:00 - [Music]
25:03 - let me write first is equal or
25:06 - x is equal or less than or equal to five
25:10 - and then uh increment
25:14 - okay so so for example
25:17 - at the first iteration of this for loop
25:20 - we have
25:21 - initialized the value into one or yeah
25:24 - the value of x into one
25:26 - and then we try to evaluate the
25:29 - statement is
25:30 - x is less than or equal to five
25:33 - so of course x is
25:36 - less than uh five since
25:39 - the value of x equals to 5 so this
25:42 - returns
25:44 - true then it will
25:47 - execute the statement the value
25:53 - the value of x which should be x right
25:56 - there
25:59 - is one okay
26:02 - and after this after execution of this
26:04 - particular statement it will increment
26:06 - the value of
26:07 - our x so at the second iteration
26:11 - it will be two okay so
26:14 - of course two is less than five so
26:17 - that's basically
26:18 - the um condition will return true and
26:24 - then of course
26:26 - it will display the value of
26:29 - x is two and then another iteration
26:33 - three
26:35 - so three is less than or equal to five
26:39 - right
26:42 - and obviously the
26:46 - three is less than two five so basically
26:49 - uh it will return
26:50 - true and then display
26:54 - this statement
26:57 - and until
27:00 - the x will become 6.
27:06 - six and then it will evaluate is
27:09 - six less than
27:13 - or equal to five so basically this is
27:16 - false and then it will terminate
27:21 - the loop or it will end the loop itself
27:24 - so that's how we got this
27:26 - um output the value is one two three
27:30 - four and five so this particular output
27:33 - guys is
27:34 - incremented so the value of our x is
27:37 - increment
27:38 - like one two three four and five but
27:41 - anyway guys we could
27:42 - you know make it like five four three
27:44 - two one
27:45 - and we will initialize our variable
27:48 - x differently so for example
27:52 - let's try to revise our for loop
27:56 - and we will start from 5
27:59 - okay so the initial value of our x is
28:02 - equal to five
28:03 - and of course we will check if
28:07 - so for example is x is
28:10 - greater than or equal to one so
28:13 - now we're doing the reverse of the
28:16 - increment
28:17 - and of course guys you can you know add
28:20 - the increment statement just like this
28:24 - x equals to x minus one and of course
28:27 - you can use the
28:29 - post increment that we have discussed
28:32 - from earlier videos in this particular
28:34 - uh series so you could do it like this
28:38 - x minus minus and then we could you know
28:41 - display the value of our
28:44 - x okay so let's try this once again
28:48 - and build and run our application and of
28:51 - course we're going to get
28:53 - the reverse output
28:56 - okay so we have here the initial value
28:59 - five and then four
29:00 - and then three and then two and then one
29:04 - okay so guys of course you can always
29:09 - try to you know add another for loop
29:12 - inside this
29:13 - loop so as what we have
29:17 - from the previous tutorial so you have
29:18 - like the nested
29:20 - if and else statement and of course guys
29:22 - you could also uh you could also
29:24 - have nested for loops or nested while
29:27 - loops in your program so for example
29:29 - like this
29:30 - you could you know um add another for
29:33 - loop here so
29:34 - for example in y
29:38 - um is we will set the initial value to
29:44 - one okay initial value into one
29:48 - and then we could um
29:51 - [Music]
29:52 - try to evaluate the statement say for
29:55 - example
29:56 - is y um
29:59 - less than or equal to x something like
30:02 - this
30:03 - and then we could add the increment
30:06 - y plus plus okay
30:10 - and then open and open and close curly
30:12 - braces and then of course we could
30:14 - display
30:15 - the value of our x
30:18 - and y so the value of x for example
30:23 - percent d and value of
30:26 - y
30:29 - is something like this
30:33 - the value of x is percent d and then the
30:36 - value of
30:38 - y is percent b
30:41 - again okay and then we could
30:45 - also specify the value of our y
30:48 - okay so we could you know build and run
30:50 - our application
30:52 - and of course we will get this
30:54 - particular
30:55 - output so the value of x from
30:59 - uh
31:00 - [Music]
31:02 - initial value of our x is five right so
31:06 - it will try to run five times
31:08 - and then it will try to display one two
31:11 - and
31:12 - uh one two three four and five for our
31:14 - value of
31:15 - our y okay and then of course
31:19 - we have the
31:23 - um four and then we also have three
31:27 - and then we also have one and uh two
31:30 - and one so you could do that guys as
31:33 - i've said you can do
31:35 - um nested for loops or nested loops in
31:38 - your
31:39 - c program so you could increment you
31:43 - could use decrement
31:44 - inside your loops okay so and
31:48 - guys if you want to practice more about
31:51 - using loops you could you know
31:53 - try to print different patterns for
31:54 - example you want to print
31:56 - a rectangle or um triangle you could
32:00 - uh display uh inverted triangle by using
32:03 - the um asterisk symbol so you could do
32:07 - that by using your
32:09 - loops okay so i think that's all there
32:11 - is to it guys for this tutorial and i
32:13 - hope
32:14 - you learned something and if you have
32:16 - questions as always you can
32:18 - ask questions in the comment box below
32:21 - so thank you for watching guys
32:22 - and see you in the next video