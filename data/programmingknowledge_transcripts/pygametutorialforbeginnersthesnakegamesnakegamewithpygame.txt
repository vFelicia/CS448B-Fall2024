00:00 - hey everyone in this video we will make
00:03 - our first video game the snake game
00:05 - if you haven't heard of it then it's a
00:08 - game where there's a snake you move it
00:10 - around the screen
00:11 - in order to eat the food
00:13 - you should not bite yourself
00:15 - while going in several directions and
00:17 - also you should not collide with the
00:19 - boundaries simple
00:21 - let us think through how we would carry
00:23 - out all this and try to write an
00:25 - algorithm
00:26 - so i have this list of steps that we
00:29 - would need to carry out
00:31 - to make the snaking okay cool
00:35 - our snake must have an initial position
00:37 - you get that right
00:39 - it should it should have a start
00:40 - position so let's define that
00:42 - it should also have a body it can be
00:45 - done using a list basically
00:47 - it would be a few rectangles at
00:49 - consecutive coordinates i hope you can
00:51 - imagine that the body of the snake would
00:53 - be nothing but a few rectangles
00:56 - arranged in line one after the other
00:59 - we would also define the food position
01:01 - which would be randomly picked every
01:03 - time the snake eats the food cool
01:06 - so for random picking of the spot we
01:08 - would also need the random module
01:11 - then we would also keep track of the
01:12 - score and increase the size of the snake
01:14 - whenever it eats the food
01:16 - fine
01:17 - we would define a game over function
01:19 - whenever the snake touches the
01:20 - boundaries or bites itself we would show
01:23 - game over on the
01:24 - screen also we would need to handle the
01:27 - movements of the snake by key inputs we
01:29 - would use the key module here cool
01:32 - so these are the seven parts we would
01:35 - need to build and then we would put them
01:37 - together to make this snake game work
01:39 - so first we will initialize the snake's
01:41 - start position initial position also let
01:44 - me define the rate at which the snake
01:46 - moves the refresh rate fine
01:49 - then this is the clock object that we
01:52 - would use for the frame rate
01:55 - now according to the second point of the
01:57 - algorithm let the snake have a body we
02:00 - would need a body for this thing
02:02 - basically the snake's body would be
02:04 - consecutively arranged rectangles on the
02:05 - same line as i said before i have
02:08 - initially taken two rectangles you can
02:10 - take more
02:12 - a smaller initial size would help you
02:14 - notice the increase in size of the snake
02:16 - after it eats the food
02:18 - for the food we have this random
02:20 - coordinates taken
02:22 - then they are multiplied by 10 because
02:25 - we want
02:27 - no overlapping with the edges
02:29 - so that the snake doesn't go very close
02:31 - to the edges
02:32 - as we are going to set a condition of
02:34 - the game over if the snake touches the
02:37 - edges
02:39 - i have taken this food boolean so that i
02:42 - can decide when to increase the size of
02:44 - the snake
02:45 - you will understand this when we make
02:47 - use of it
02:50 - and then the score variable is set to
02:52 - zero now i have this find a function for
02:55 - displaying the score on screen just like
02:58 - we displayed text on screen
03:00 - created a font rendered it used rec to
03:03 - get the text on surface then use split
03:06 - this was just getting the text but the
03:09 - main part is in the game loop
03:11 - that is incrementing the score every
03:13 - time the snake
03:14 - eats the food
03:16 - after this i have the game over function
03:19 - i'll define the game over function this
03:21 - two is just for getting the text in the
03:23 - mid screen
03:24 - once the game is over
03:27 - once the game over conditions are met
03:30 - they are also defined in the game loop
03:32 - cool
03:33 - this time dot sleep is used to pause the
03:35 - program for two seconds and quit
03:37 - automatically once the game is over
03:40 - according to the next step in the algo
03:42 - we need to handle movements of the snake
03:45 - for that i have taken two variables the
03:47 - ir which decides what direction to move
03:50 - in presently
03:51 - let it have an initial direction
03:55 - and dir underscore next which keeps the
03:58 - track of the input given
04:01 - now we have the game loop the events
04:03 - loop we saw the little program of the
04:05 - key module in the second video for
04:07 - example
04:08 - that even sloop is pretty similar to
04:11 - this one
04:13 - i have set the variable next underscore
04:16 - dir as the
04:18 - pressed arrow key
04:20 - so when i press up
04:22 - the next dir becomes up
04:26 - and similarly for left it becomes left
04:30 - and now i have two sets of conditions
04:34 - now this set of condition updates the
04:36 - current direction
04:37 - if the current one isn't a complementary
04:40 - arrow key please understand
04:43 - this means if the arrow key press is
04:45 - down
04:46 - while the snake is going up no changes
04:49 - will occur as right now while traveling
04:51 - along the y axis the only next possible
04:54 - move can be in the x directions
04:56 - same with the rest of the directions
04:58 - like if you are traveling in the x
05:00 - direction
05:02 - okay in the x axis you cannot
05:06 - reverse your direction cool
05:10 - and this condition now
05:12 - is for moving the snake just as we move
05:15 - the object in the last video depending
05:17 - upon the key pressed the coordinate of
05:19 - the snake's position is changed
05:22 - then we would try to increase the length
05:25 - of the snake every time it eats the food
05:27 - so i would insert every coordinate the
05:29 - snake travels through and pop all except
05:32 - the time when the food and snakes
05:34 - coordinates overlap okay i hope you got
05:37 - that
05:39 - this time i would change food to false
05:41 - so that i can pick a new spot for
05:43 - drawing the
05:44 - once i've done that then again i set
05:47 - food to true
05:49 - also when snake and food coordinates
05:51 - overlap the snake
05:53 - eats the food i will increase the score
05:58 - great we are almost done here all i am
06:01 - left with is the drawing my f is drawing
06:04 - my figures and setting up the
06:07 - game over conditions
06:08 - let me draw the snake
06:10 - it is quite obvious we would repeatedly
06:12 - draw the rectangles using a for loop
06:15 - and this is to draw the food
06:18 - now there are three game over conditions
06:21 - touching boundaries along x axis that is
06:23 - going because beyond 0 to 600 minus 10
06:27 - i have written 600 minus 10 so that you
06:30 - can understand that it is the size of
06:32 - the screen minus the size of one block
06:34 - of the snake's body okay similarly for
06:36 - the y-axis it's the second condition and
06:39 - the third condition is when snake bites
06:41 - its own body okay it's same like
06:44 - overlapping with the food coordinates
06:45 - here
06:47 - it's just that
06:49 - we have taken a for loop and the game
06:52 - over function will be called if the
06:53 - snake's first block overlaps with any of
06:56 - its rest of the body coordinates okay
06:58 - that's why i have started with the
07:00 - i've started with the
07:02 - first position not the zeroth position
07:04 - of of the
07:06 - list okay cool
07:09 - now the show score is called all the
07:11 - time i want to see the score score on
07:13 - the screen all the time
07:15 - and then we have updated it
07:18 - use the dot update
07:20 - and
07:21 - use the tick to set the frame rate cool
07:25 - let's run this program and check if
07:27 - everything works fine what all we need
07:29 - to check is if the snake moves freely
07:32 - then if the fruit is re-spotted once
07:35 - eaten at a random spot also we would
07:38 - check that the game conditions
07:40 - game over conditions are working fine
07:44 - we would also check that the snake size
07:47 - increases every time it eats the food
07:50 - so let's run this and check out this
07:52 - four or five conditions
08:00 - so now if i run this i can see my snake
08:02 - moving in several directions eating the
08:04 - food food is getting re-spotted
08:06 - cool and
08:08 - yeah the score is also getting
08:10 - updated and let me see if it gets bumped
08:15 - into a wall the game should be over
08:17 - before that you can see that the snake
08:19 - is longer in size than it was before
08:23 - cool
08:24 - so let me bump it into a one wall
08:27 - yeah the game is over cool
08:31 - and the screen also went away
08:32 - after my game was over so
08:35 - this game can be more enhanced you can
08:38 - print why the game was over or you can
08:40 - put in some music when the game is over
08:42 - using the mixer module
08:44 - make a different function and call it in
08:46 - the game over function this was the very
08:49 - basic snake game made by pygame thank
08:52 - you