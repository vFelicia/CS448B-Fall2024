00:00 - hey guys welcome to the next video on
00:02 - python tutorial for beginners in this
00:04 - video we are going to learn how to use
00:06 - sets in Python so first of all what are
00:10 - sets so a set is an unordered collection
00:13 - with no duplicate elements and no
00:17 - indexing so let's see how we can use
00:20 - sets in Python so you can declare a
00:24 - variable and then is equal to and you
00:27 - define the elements in set in our curly
00:31 - bracket so you can define multiple
00:33 - values here for example 1 comma 2 comma
00:36 - 5 comma 4 comma 7 comma 9 but keep in
00:41 - mind that set cannot have duplicate
00:45 - values so each value in set must be a
00:48 - unique value so for example what happens
00:51 - when we define a set with some duplicate
00:55 - values so I'm going to just declare this
00:57 - set and press enter here and this set is
01:00 - created now whenever I try to access the
01:04 - values inside the set a then it's going
01:08 - to give me this set and you can see the
01:12 - two which was a duplicate which we have
01:15 - defined here is removed from this set so
01:18 - a set always have unique values and if
01:22 - you define a set with duplicate values
01:24 - it's going to remove the duplicate
01:27 - values and only save the unique values
01:31 - in the set so let's see some of the
01:34 - methods related to sets and the first
01:37 - method is as always le n method and you
01:41 - can find the length of a set using this
01:43 - le n method and the name of the set
01:46 - which returns the length of a set you
01:49 - can also use add a function so a dot add
01:54 - to add a element in a set so I want to
01:59 - add 10 for example into my set I can use
02:02 - this and then press Enter and once again
02:05 - when I try to get the values inside the
02:07 - set a you can see 10 is added to
02:11 - this set but this time will only be
02:14 - added if it's already not there in the
02:16 - set if it's already there in the set
02:19 - nothing will happen
02:20 - so let's try to add once again ten to
02:23 - this set which already have a set and
02:25 - once again you will see that nothing
02:29 - happens inside the set because ten was
02:31 - already there now if you want to add
02:33 - multiple values in a set you can use
02:36 - update methods so you can call this
02:39 - method which is update and then inside
02:42 - the curly brackets you need to provide
02:45 - these multiple values so let's add some
02:48 - values into this set so I'm going to add
02:52 - 15 18 17 let's say and 14 okay and then
02:59 - press enter and now I will see the
03:02 - values inside the set and you can see
03:04 - all these values are added to the set
03:07 - you can also remove the values from the
03:10 - set so I can use a method called remove
03:14 - and let's say I want to remove 18 from
03:18 - the set I can just give the element and
03:21 - then press Enter and once again I will
03:23 - try to access the set and you can see 18
03:26 - is removed from this set now there is a
03:29 - method called discard also so let's see
03:32 - how we can use this method this card
03:35 - works similar to remove method so for
03:38 - example I want to remove this 17 from my
03:42 - set I can write 17 here and it works
03:45 - fine right so when I try to access the
03:49 - value of a 17 is removed so what is the
03:52 - difference between a discard method and
03:55 - a remove method so our remove method
03:58 - whenever you use a remove method and you
04:02 - try to remove an element which is not
04:05 - there in the set for example I will try
04:08 - to remove 100 which is not there in the
04:10 - set it's going to throw an exception and
04:13 - it says key error 100 now if you try to
04:16 - do the same thing using a discard method
04:19 - so I'm going to use a dot discard here
04:23 - and try to discard
04:25 - hundred from the set which is not there
04:28 - in the set it's not going to give me any
04:31 - error and that's the difference between
04:33 - this card and remove so remove throws an
04:36 - error when element is not there but this
04:40 - card doesn't throw any error it's not
04:43 - going to do anything if the value is not
04:46 - there in the set now there is a pop
04:49 - method also you can use with set so I'm
04:52 - I can use this pop method and then press
04:55 - enter and what it's going to do is it's
04:58 - going to remove any random element from
05:03 - your set so it's not necessary that is
05:06 - going to remove the element from the
05:08 - left hand side or the right hand side it
05:10 - will remove any random element from the
05:14 - set also for example I will declare a
05:17 - set of names let's say
05:22 - and if you want to clear the set you can
05:26 - use a clear method so I can use this
05:28 - clear method in order to empty this set
05:31 - so now when I try to access the values
05:34 - inside the set you can see it's an empty
05:37 - set with no values if you want to delete
05:40 - a set you can use a de L function and
05:43 - then the name of your set and then press
05:45 - Enter
05:46 - and once you delete it when you try to
05:49 - access it it's going to give you an
05:51 - error that name is not defined now you
05:54 - can also create a set using a set
05:58 - constructor so instead of these curly
06:01 - brackets you can write set and in the
06:04 - double parentheses so you need to
06:06 - provide the double parentheses here in
06:09 - order to create a set using the set
06:11 - constructor so this is also going to
06:14 - create this set called name and when I
06:17 - try to access the values inside the set
06:19 - name you can see it has created this set
06:22 - of names also you can convert a list
06:25 - into a set so let me define a variable
06:28 - called Zed and then I can use a set
06:31 - constructor and inside these parentheses
06:35 - I can use the square brackets which we
06:38 - use generally with lists and then you
06:40 - can define your list here and then press
06:43 - ENTER and this list will be converted to
06:47 - a set and you can see the result here
06:50 - now similar to the mathematical set
06:53 - operations like Union intersection
06:56 - difference symmetric difference you can
06:59 - also use these mathematical operations
07:02 - related to set on the Python sets also
07:05 - so let's see how we can use this
07:07 - mathematical set operations on our
07:11 - Python sets so let me once again define
07:14 - a set I have already one set which is a
07:17 - which contains these values for example
07:20 - and I will define a set B with some
07:24 - other set of values so I am going to
07:26 - define a set with for example
07:31 - so that is the content of the set be
07:34 - okay so now I have two sets and on these
07:38 - two sets I want to perform some set
07:41 - operations which are also used in
07:44 - mathematics so you can find out the
07:46 - union of two sets using operator called
07:50 - or okay so when I write a and this pipe
07:55 - symbol which is called or B it's going
07:59 - to give me the union of these two sets
08:02 - and what is the Union so union of two
08:06 - sets contain all the elements that are
08:09 - there in the set a or in the set B so or
08:14 - here is important right so I'm going to
08:17 - press ENTER and you can see it's going
08:20 - to give me the union of a and B that
08:23 - means this set contains all the elements
08:26 - that are there in set a or in set B also
08:31 - I can use a method called Union instead
08:34 - of this or operator so I can use a
08:37 - variable dot Union there is a method
08:41 - called Union and then you can write B
08:44 - here and then press ENTER which is going
08:46 - to give you the same answer okay so you
08:49 - can either use this Union method or this
08:52 - or operator now let's see how we can
08:56 - find out the intersection between two
08:59 - sets so in order to find out the
09:01 - intersection you use a and this operator
09:04 - end and then your next set which is B
09:09 - here so what is an intersection of two
09:11 - sets so intersection of two sets
09:14 - contains all the element that are there
09:17 - in both the set that means set a and set
09:21 - B okay so when I press ENTER you can see
09:26 - it gives me two elements inside the set
09:30 - and these two elements are there both in
09:34 - the a set and the B set that's why we
09:38 - get only two values because these two
09:40 - values are there in set a and set B also
09:43 - again you can
09:45 - use a method called intersection so a
09:47 - intersection and then B which is going
09:51 - to give me the same answer so either you
09:53 - can use this method or you can use this
09:56 - operator now let's find out the
09:58 - difference between two sets so what is a
10:01 - difference between to set a difference
10:04 - of two sets contains all the elements
10:07 - that are in a but not in B ok so you can
10:13 - find out the difference by this minus
10:15 - operator here so when you write a minus
10:18 - B you will be able to get the difference
10:20 - between these two sets and this result
10:23 - will contain all the elements that are
10:25 - in a but not in B you can also use B
10:30 - minus a and then is going to give you
10:34 - other result because this time it's
10:36 - going to give you a set which contains
10:38 - all the elements that are there in B and
10:41 - not in a so difference between set a
10:46 - minus B is totally different from B
10:49 - minus a and also you can use a
10:52 - difference method so a then you can call
10:56 - a difference method B and it's going to
10:59 - give you the same kind of answer you can
11:02 - see here and also you can call a B dot
11:06 - difference a and it's going to give you
11:09 - the another answer of B minus a now you
11:13 - can also find out the symmetric
11:15 - difference between two sets and what is
11:18 - the symmetric difference between two
11:20 - sets a symmetric difference between two
11:23 - sets contains all the elements that are
11:26 - either in set a but not in set B or they
11:32 - are there in set B but not in set E so
11:36 - this is the symmetric difference and you
11:39 - can find out the symmetric difference
11:40 - using this cap symbol and then B so a
11:44 - cap be I don't know what is the exact
11:47 - name of the symbol you can find out by
11:50 - ourselves and when you do this it is
11:53 - going to give you the symmetric
11:54 - difference between a and B and whenever
11:58 - you
11:58 - find out the symmetric difference then
12:01 - when you do for example be this cap
12:05 - symbol a it's going to give you the same
12:09 - answer because symmetric difference give
12:11 - you same answer whether you give a cap B
12:15 - or B cap a the answer will be always
12:17 - same also you can use a method symmetric
12:21 - difference so you can use this method
12:24 - called symmetric difference B and it's
12:28 - going to give you the same kind of
12:29 - result now one last thing I want to show
12:32 - here is sets are not indexed or ordered
12:35 - so whenever you want to find out for
12:39 - example a and the value at index 0 it's
12:42 - going to give you an error because there
12:45 - are no indexes in a set and they are not
12:49 - ordered by any index so sets are
12:53 - unordered collection of values now if
12:56 - you want to find out what all other
12:58 - methods you can use which sets you can
13:01 - create a set and then write the name of
13:03 - your set and then press dot here and you
13:06 - will be able to see this is the list of
13:07 - all the methods which you can use with
13:10 - the sets also if you want to list out
13:14 - all the methods which you can use with
13:17 - sets you can use this inbuilt function
13:20 - dir and then you can provide any set
13:23 - name here which is your variable name
13:26 - and then press Enter and once again it's
13:28 - going to print the list of all the
13:29 - method which you can use with the sets
13:32 - so this is how you can use sets in
13:34 - Python I hope you've enjoyed this video
13:37 - and I will see you in the next video