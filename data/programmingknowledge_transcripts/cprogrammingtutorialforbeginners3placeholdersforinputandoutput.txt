00:00 - hey what's going on guys welcome back to
00:01 - our YouTube channel and welcome to this
00:03 - video so this is part three of our C
00:06 - programming tutorial series and in the
00:09 - previous video we have discussed the
00:11 - basic structure of our C program so we
00:15 - have discussed the import statement the
00:18 - main function and then of course the
00:20 - lines to be executed by a program inside
00:23 - our main function
00:24 - so the next thing that we want to talk
00:28 - about is the order of execution in every
00:31 - C program so basically if we have like
00:34 - four lines here to print something in
00:39 - our screen like this so as I've said in
00:45 - C program it is executing in order line
00:50 - by line so this will be the first one or
00:53 - the first line to be executed and then
00:55 - the second line to be executed the third
00:58 - line to be executed and the fourth line
01:01 - to be executed so suffering someone will
01:04 - try to make this two and then three or I
01:10 - mean three and then four let's try to
01:16 - build and run this so we have the output
01:20 - as hello world hello - hello number
01:26 - three and hello number four so basically
01:29 - all the statements are executed in order
01:33 - line by line so say for example we have
01:37 - or we want to draw something in the
01:40 - screen so like we want to draw a
01:44 - triangle so here and then another one
01:52 - here and then another one just to show
01:59 - you the sequence of execution of this
02:04 - particular C program so right here
02:08 - another
02:10 - [Music]
02:12 - / and then here and maybe here and
02:22 - another one another line or vertical
02:25 - line and also here and we need to add
02:29 - the new line or line break for this
02:35 - print statements and we can make this or
02:40 - I'd like the underscore and let's try to
02:44 - build and run this and you can see we
02:47 - have the triangle displayed in our
02:50 - screen and that means that the lines has
02:54 - been printed or has been executed in
02:56 - order line per line so if we try to make
03:01 - changes and instead of placing it here
03:05 - let's face it before printing the first
03:09 - line so the output will be like this
03:13 - funky-looking shape that's because we
03:17 - execute the first statement to have like
03:21 - the /d underscore and then the vertical
03:25 - and that's why we have an output like
03:27 - this so just bear in mind that in every
03:31 - program it is executing line per line
03:35 - okay so now let's try to discuss
03:38 - placeholders okay placeholders for
03:43 - different data types so there are in
03:46 - programming there are types or data
03:48 - types that we want to work with it so
03:50 - for example string we have characters we
03:53 - have integer we have float and other
03:57 - data types so so for example you want to
04:00 - display string you just have to like say
04:04 - hello world and this is this is a string
04:15 - let's just remove this okay save and run
04:18 - and build so we now have like the output
04:22 - of our programming over this is a string
04:26 - but if you want to try it or if you want
04:29 - to print a number so say for example 32
04:36 - so let's try this run and build and as
04:43 - you can see we have returned negative 10
04:48 - 7 3 4 8 1 or 1 8 + 1 9 so basically what
04:55 - this means is that there's something
04:57 - wrong with our program because as I've
04:59 - said before zero should be the standard
05:03 - or the return if the program runs
05:09 - smoothly or there's no prod there's no
05:12 - problem while running our program so
05:15 - basically here we have negative so it
05:17 - means we have problems right and we can
05:21 - see here that note expected constant
05:25 - char but argument is of type int as you
05:28 - can see here so basically we cannot
05:31 - directly display number by using this so
05:35 - we can use pre-salt placeholder for that
05:39 - so this will be for our placeholder so
05:44 - instead of using directly 32 here we can
05:47 - say % and then D so d is for integer so
05:58 - if you want to display integer you might
06:01 - want to use the percent D placeholder
06:05 - and then inside this printf statement
06:07 - you need to add the comma and then of
06:11 - course the value that you want to be
06:13 - printed so % D and then comma and then
06:18 - the actual value that you want to be
06:21 - printed so let's try that build and
06:25 - print or build and run and as you can
06:27 - see here
06:28 - processor turn zero and then we have
06:31 - here the value 32 so let's try this one
06:37 - more time backslash n build and run and
06:40 - here we can see we can see clearly what
06:44 - is happening here
06:45 - so hello world this is a string and the
06:48 - value 32 so that's the purpose of
06:53 - percent D is a placeholder for an
06:56 - integer value another one we have for
07:01 - large integers are for example there are
07:04 - like a very large number of very large
07:06 - integer the key word for that or the
07:10 - placeholder for that is LD which stands
07:15 - for large integer okay just a first of
07:20 - all we have like very big integer right
07:25 - here okay so that's the placeholder
07:28 - percent LD and then of course we also
07:31 - have four decimal values or float values
07:35 - so for example you want to say thirty
07:39 - two point five or at @ 32.5 this is for
07:45 - again
07:46 - this is mine or float value okay let's
07:54 - just say float value here so percent f %
08:00 - deep for integer % LD for large integer
08:03 - % F for float number and another one for
08:09 - large float okay so this will be four
08:16 - large float and then another one for so
08:21 - first of all you want to display a
08:23 - character and you want to display like
08:30 - letter a so the placeholder for that is
08:34 - percent C and then the actual value that
08:39 - should be
08:41 - type in inside the single called
08:44 - characters so this will be for a chart
08:48 - or character and then another one is for
08:51 - the string so for example you want to
08:54 - display hello world this is a string and
08:56 - then you want to display that you can
09:01 - also use percent s for the placeholder
09:05 - for that so you can say hello from
09:11 - printf okay so this will be for our
09:16 - string so basically string is just a
09:19 - series of characters meaning string is
09:23 - just composed of several characters so
09:26 - first of all this one h-e-l-l-o and F
09:30 - are all from and so on you get the idea
09:33 - but basically all these placeholders can
09:37 - be used to display different values or
09:40 - different types of values the integer
09:44 - large integer float large flow character
09:48 - and string so let's try to display this
09:52 - and maybe add clip backslash n here and
09:55 - here also here here here and here so
10:04 - build and run there you go you can see
10:09 - here the output of our program and we
10:14 - did not specify directly the values of
10:18 - this figures so instead we're using
10:22 - printf and then the placeholder suffer
10:25 - sample % D for integer % D for large
10:28 - integer and so on so I think that's it
10:30 - for this particular tutorial