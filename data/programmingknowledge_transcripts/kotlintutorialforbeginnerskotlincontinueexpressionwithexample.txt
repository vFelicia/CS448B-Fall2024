00:00 - in this video
00:01 - we will see what is uh
00:03 - continue in kotlin continue in kotlin
00:06 - and then we will see an example uh to
00:10 - calculate the sum of n natural number
00:12 - using for loop okay
00:15 - so
00:16 - uh what is continue
00:20 - and uh in which cases continue is used
00:23 - so suppose you are working with loops
00:26 - and
00:27 - sometimes you want to skip the current
00:30 - iteration of the loop okay
00:33 - so in such case continue is used the
00:35 - continue construct skips the current
00:37 - iteration of the enclosing loop
00:39 - and
00:40 - the control of program jumps to the end
00:44 - body of the loop okay
00:46 - so let us now see that how continue
00:49 - works
00:52 - so
00:53 - yeah
00:54 - it is almost
00:56 - always used with if else construct
00:59 - so for example there is a
01:01 - file
01:03 - some x test expression
01:09 - and test expression one i can say and
01:13 - then there is a loop which has some code
01:16 - this one
01:18 - okay
01:18 - and then after some set of code there is
01:21 - a statement
01:22 - that if test expression
01:27 - 2 is true okay
01:29 - then i have to
01:31 - i i'll say i have to continue
01:35 - and
01:37 - i'll just end the loop here and then the
01:40 - f statement here and there is some
01:42 - another block of code say code two
01:45 - okay
01:47 - so uh what is happening here okay i'll
01:50 - just
01:50 - end my
01:52 - while loop okay so what is happening
01:54 - here is uh
01:55 - if the test expression 2 is evaluated to
01:59 - if the text expression 2 is evaluated to
02:01 - true
02:02 - continue is executed which skips all the
02:05 - codes inside the while loop after the
02:06 - iteration which is the code two block
02:09 - okay
02:10 - so uh
02:13 - like
02:14 - there is some code one that is going to
02:16 - be executed after the while statement
02:18 - and then
02:20 - if the test expression two is true then
02:23 - it is going to go to the end of this
02:25 - viral block
02:27 - and skip the code too okay
02:30 - so uh
02:33 - and if
02:34 - there is something with
02:36 - the
02:38 - if there is a do uh do while loop okay
02:41 - so there would be a do while loop like
02:43 - do
02:44 - code one if
02:46 - a test expression two is true uh
02:48 - continue and then there is another set
02:50 - of code and there is a then there is a
02:52 - while statement
02:54 - while
02:56 - test
02:57 - expression
02:59 - one
03:00 - so
03:01 - now what what happens when when the test
03:04 - expression do is true
03:06 - that
03:07 - the the continue is going to be called
03:09 - and uh then it is going to be skipped to
03:12 - the while statement and then the test
03:14 - expression one is going to be checked
03:16 - and then it if it holds true then it
03:19 - will go to the uh do loop okay so let us
03:23 - go through the
03:24 - uh jump to the example
03:26 - of continuing kotlin
03:29 - okay okay
03:31 - so uh suppose there is a for loop
03:34 - uh from one to five
03:38 - and uh
03:39 - if i is
03:41 - uh
03:43 - if i is greater than one or less than 5
03:46 - yeah if i is greater than 1 and less
03:48 - than 5 we have to continue
03:50 - okay so i'll just
03:55 - write the code
03:58 - one main
04:04 - for
04:05 - i in
04:08 - for
04:10 - i
04:11 - n one two five
04:15 - and then if
04:18 - uh
04:19 - okay
04:21 - i
04:21 - i'll
04:22 - include println
04:27 - um
04:30 - i
04:32 - always
04:35 - printed
04:38 - okay
04:39 - then
04:41 - if
04:45 - i is greater than one
04:51 - and
04:55 - i is less than
04:57 - 5
04:58 - okay which is equal in
05:01 - all case except when i is 1 and 5 okay
05:06 - so in this case i'll say that continue
05:12 - continue okay
05:14 - and then i'll
05:16 - again write a print statement
05:18 - which says println
05:22 - uh dollar
05:24 - i
05:26 - not
05:27 - always
05:28 - printed
05:30 - okay so when i go ahead and
05:33 - run this program
05:39 - what i can see is when when we run the
05:42 - program
05:54 - okay so when we can when we run this
05:56 - program it says that one always rented
05:58 - one not always printed two always
06:00 - printed three always printed four always
06:02 - printed five always printed and then
06:04 - five not always printed
06:07 - okay so uh when the value of i is
06:10 - greater than one and less than five
06:12 - continue is executed which skips the
06:15 - execution of this this this code println
06:19 - i is not always printed okay however the
06:22 - statement this this statement println i
06:25 - is always printed is executed in each
06:27 - iteration of the loop because this this
06:29 - statement
06:30 - this this statement exists before the
06:33 - continue construct
06:35 - okay
06:37 - so
06:38 - now now we will see a some
06:41 - like real life example of it so let's
06:44 - say i have to
06:46 - i have to calculate
06:49 - the sum
06:51 - of
06:52 - positive numbers only
06:59 - so uh before that
07:01 - we will
07:02 - calculate
07:05 - the sum of
07:08 - first and natural numbers
07:14 - okay so for calculating the sum of first
07:16 - and natural numbers
07:18 - uh
07:19 - the the what we can do is
07:22 - we can
07:23 - use a for loop or any kind of loop okay
07:26 - so uh let's say i i have to make a
07:29 - program using the for loop so i'll write
07:32 - the code and explain
07:34 - okay so let's say
07:36 - i i'll i have i am declaring
07:39 - the variable num
07:42 - and i am giving the value of 100 okay so
07:44 - i have to calculate the sum of first
07:46 - hundred natural numbers okay so there is
07:49 - a value and uh let's say there is a
07:52 - variable sum which is initialized as
07:55 - zero for the uh in the starting
07:57 - okay
07:58 - so for
08:01 - i n
08:02 - one two num
08:04 - okay so i in one two num now what what
08:08 - uh what are we going to do is i am going
08:10 - to
08:11 - do sum is equals to sum
08:13 - plus i
08:14 - okay so i am going to add i in sum and
08:17 - equate it
08:19 - with it so uh
08:20 - in order to write the code of it sum
08:23 - plus equals to
08:25 - i
08:27 - so this is the
08:29 - sum equals to sum plus i
08:31 - so now whenever the loop iterates uh
08:34 - every time
08:35 - the particular number is going to add
08:37 - with the sum okay
08:39 - so at the end i'll
08:42 - print
08:44 - print the sum
08:46 - so
08:47 - uh i'll print
08:49 - [Music]
08:52 - sum is equals to
08:55 - sum
08:57 - now when i run this program
09:00 - i should see the uh
09:02 - sum of first
09:04 - 100 natural numbers
09:06 - so the sum of first hundred natural
09:08 - number is uh five zero five zero
09:12 - okay
09:13 - so uh now i have to
09:16 - calculate the sum of
09:18 - only positive numbers from one two
09:20 - hundred
09:20 - so now i have to do make some changes
09:23 - with in this program so what i'll do is
09:28 - i'll
09:31 - this this block of code is fine okay so
09:34 - there is some integer
09:38 - and
09:45 - okay
09:47 - so
09:50 - from 0 to 100 i have to calculate
09:53 - the sum of
09:55 - positive numbers only
09:57 - so if before
09:59 - including the sum
10:01 - if
10:02 - the
10:03 - number is uh
10:05 - okay sorry
10:07 - i have to mention here odd
10:10 - okay my bad
10:11 - i have to calculate the sum of odd
10:12 - numbers only so from 1 to 100 i have to
10:14 - calculate the sum of odd odd numbers so
10:17 - if the number is even
10:19 - i have to
10:21 - continue okay i have no i have to skip
10:24 - the
10:25 - rest of code so what is the condition
10:27 - for for a number to be even so the
10:29 - condition is
10:30 - number must be
10:35 - when the number is divided by 2 the
10:36 - remainder must be 0
10:38 - okay so when the number is even
10:41 - i should continue
10:47 - and now when i run this program
11:00 - okay so if i if i
11:03 - should be even then i uh when divided by
11:06 - 2 the remainder should be 0 okay
11:09 - so
11:10 - when i divided by 2 and i is even we
11:12 - should continue and when i is not even
11:14 - that is odd we will skip to this
11:17 - block of code and calculate the sum so
11:19 - when i run this program i can see that
11:22 - the sum of odd numbers from 1 to 100 is
11:25 - 2500
11:27 - okay so that's all for this video stay
11:29 - tuned