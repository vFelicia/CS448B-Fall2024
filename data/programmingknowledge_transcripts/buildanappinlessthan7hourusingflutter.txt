00:01 - welcome to programming knowledge so this
00:04 - is the first video in the series wherein
00:06 - we together will make any Commerce
00:08 - application from scratch and by starting
00:11 - from scratch I mean that we will first
00:14 - design the application and then build it
00:16 - means we will start from an empty screen
00:18 - and build our way up to a complete
00:21 - application
00:22 - so for Designing we are going to use
00:24 - figma and for the front end part as it
00:27 - is an application we will use flutter
00:28 - because by that will we can use a single
00:32 - code base for Android apps as well as
00:34 - iOS and since we have already used
00:37 - Firebase as a backend once when we were
00:40 - making the Instagram clone okay so this
00:43 - time the backend stack will be PHP and
00:47 - MySQL now another very popular backend
00:50 - stack is node.js and mongodb and we
00:53 - shall be keeping that for our next
00:55 - series
00:56 - okay so let's set everything up now
01:00 - firstly you need to know flutter if you
01:02 - don't know flutter you can refer to my
01:04 - videos on uh flutter for beginner the
01:08 - link will be in the description a
01:10 - suggestion would be to update the
01:12 - flutter as there was a major release
01:14 - flutter 2.2 is out there is almost no
01:17 - change in the coding techniques it have
01:19 - but it has a support for flutter web and
01:22 - flutter desktop well it is has the
01:25 - stable release of flutter web flutter
01:27 - web was already available in beta
01:29 - version earlier okay so that is
01:32 - regarding flutter now for the back end
01:35 - part that is in PHP and MySQL I will be
01:39 - using plain PHP to make the API so I'll
01:41 - be not using any framework that is
01:44 - larval or Lumen because that will be
01:46 - extra work now to code in PHP you need
01:50 - you can install xampp okay so it is a
01:54 - very excellent software it has it is the
01:57 - most popular PHP development environment
01:59 - as you can see in this only you will get
02:01 - the PHP environment as well as MySQL and
02:05 - since uh I am in Mac OS Big Sur there
02:09 - was some difficulties with xampp so I
02:12 - have changed to map so you can also use
02:15 - this as an alternative for zamp okay it
02:18 - also has the complete development setup
02:21 - for PHP that is you will get PHP in here
02:25 - and MySQL in here okay and then for
02:28 - Designing you need to have figma so for
02:31 - figma you don't need to download it but
02:34 - I suggest you download it and you need
02:37 - to create an account and after that you
02:39 - can start designing
02:41 - now those who don't want to do the PHP
02:45 - part means the back end part can skip it
02:47 - as I will be hosting the apis that I
02:51 - make online and which will be available
02:53 - for anyone to use for some time okay but
02:55 - I will suggest that you do the back end
02:58 - part as well because I will be
03:00 - explaining all the things I'll do and
03:02 - buy this by the end of this series you
03:04 - will be able to learn the new
03:06 - programming language or maybe a tech
03:09 - stack so I just suggest you should
03:11 - follow entirely do not skip any part
03:15 - okay so now that you know about
03:18 - everything let's see how the map server
03:21 - looks so the xampp server will also be
03:24 - same or instead there will be four
03:26 - sections where you can
03:29 - go and you can start and then map you
03:32 - just you can start the map server just
03:34 - from here
03:35 - so it will take a while
03:39 - now once it is done you can start coding
03:42 - in PHP you need to make a you will you
03:45 - need to have the PHP files in a specific
03:48 - folder in xampp as well you need to have
03:52 - your files in a specific folder okay and
03:55 - that is in the applications section you
03:58 - will see there is a folder called map
04:00 - okay and in the case of xampp there will
04:04 - be a folder called zamp so
04:07 - yes so there is the folder called map
04:10 - and then either you are on map or on Sam
04:13 - you will have a folder called htdocs
04:16 - okay so this is a very important folder
04:18 - over here only we will code in we will
04:21 - make our apis okay and store it over
04:23 - here
04:25 - okay you will get a hang of it once we
04:27 - start coding the back end thing okay and
04:31 - for the
04:33 - database you already have it since our
04:36 - server is running we can simply go to
04:39 - localhost
04:41 - colon 8888 if you are on map if you are
04:45 - on zamp that is where then you will be
04:48 - probably on localhost 8080 or 336 and
04:52 - then you give a dash and then write PHP
04:54 - my admin
04:56 - and then you have your entire PHP setup
05:00 - over here so PHP my admin is uh is like
05:03 - SQL workbench we use it to view our
05:06 - database okay so over here we will
05:08 - create our database and store stuff
05:11 - Okay so I hope you understood what is
05:15 - map if you have some if you have some
05:17 - difficulty understanding there is no
05:19 - issue when we start actually coding you
05:22 - will see how everything works in sync
05:25 - okay so in the next video we shall start
05:28 - with the designing thank you
05:31 - so in this video we are going to start
05:33 - designing our application okay so for
05:36 - that I'll open figma I have already
05:37 - installed the desktop portion okay and
05:40 - then you can go over here and create a
05:43 - new project I have already created one
05:46 - and over here I have
05:47 - selected a palette of colors which I
05:50 - will be using throughout my application
05:52 - okay and now I'll I am planning to call
05:56 - the project better buys
05:58 - so the figma project will be of the same
06:01 - name the database will be of the same
06:03 - name and the application will also be of
06:05 - the same name okay so let's create a add
06:10 - a screen over here so for that we need
06:12 - to go in the frames section then click
06:15 - on frames and then over here we can use
06:19 - iPhone 11 Pro or
06:22 - iPhone 10 screen okay so using figma is
06:26 - very easy you just need to follow along
06:29 - this video and you will also get a hang
06:31 - of it
06:33 - okay so this is a screen now if you want
06:36 - to see how it will look on big screen
06:37 - you just need to click over here which
06:39 - is this is
06:40 - for prototyping and now you can see the
06:44 - screen over here just give it a moment
06:46 - until it is loading
06:48 - okay and for now it will be a
06:51 - big white screen okay so we will not be
06:53 - able to see anything because since our
06:55 - project is only a wide screen till now
07:00 - so let's start first when I'll add a
07:03 - text over here
07:05 - okay so for that I need to click on this
07:08 - and then I'll write
07:12 - better buys
07:14 - okay now I want this to be somewhere
07:18 - over here
07:20 - now I'll be adding the grid okay so that
07:23 - I it is easier for me to design okay so
07:26 - I'll add a grid now you can see the grid
07:27 - comes over here now instead of this I'll
07:30 - use another method that is columns okay
07:33 - so now I want to have 12 columns having
07:36 - 12 columns is the best because you can
07:39 - divide it by two you can divide it by 4
07:41 - you can divide it by 3 you can divide it
07:43 - by six so it will help in
07:46 - maintaining uniformity
07:48 - okay this is the most standard practice
07:50 - now I wanted to have a margin from both
07:54 - sides 50.
07:55 - okay so 50 seems way too much I'll make
07:58 - it 40.
08:00 - okay and the gutter can be of 10 okay
08:03 - gutter means the distance between these
08:05 - two
08:07 - okay maybe I'll make it 30.
08:10 - yes so this seems fine now with this we
08:15 - will align everything on this margin
08:17 - okay so I'll
08:19 - put it over here
08:22 - now let's increase the size over here in
08:26 - the text section you can increase the
08:28 - size by going over here or you can
08:31 - simply select it and click on the upward
08:33 - arrow button it will
08:35 - automatically increase so I will call it
08:38 - better buys the font I think
08:42 - it will be better if it is Poppins
08:48 - let's see I don't know which one is
08:50 - better okay so this seems decent let it
08:53 - be like this for now I'll change its
08:55 - color
09:00 - so uh the better bias is over here maybe
09:03 - I'll make it little bit more bigger so
09:07 - 21 or 22 53 okay
09:11 - cool now after that I'll add a circle
09:16 - means as in for profile so to add a
09:20 - circle or any object you can simply
09:22 - click then it will create another option
09:25 - is you drag
09:27 - okay another option is you drag and make
09:30 - a circle of your choice okay and now
09:34 - while doing this if you it is actually
09:36 - an ellipse means it can have a different
09:39 - minor Arc and major arc but if you want
09:42 - to be an exact Circle you just need to
09:45 - click shift and it will automatically
09:46 - force it to be a
09:48 - proper circle with equal measure Arc and
09:51 - minor minor Arc okay so now that we have
09:55 - a circle
09:59 - I am planning on aligning it with this
10:01 - so to align both things horizontally
10:04 - I'll use the horizontal align section
10:07 - okay so it has aligned everything
10:09 - horizontally if it was one or below
10:12 - another then I would have used this so
10:14 - these signs make it very clear if I
10:17 - click on this then they all will be
10:20 - aligned with the top as
10:23 - uniform if I click on this then there
10:25 - will be in aligned as a bottom uniform
10:29 - and if I do this then Center as uniform
10:33 - okay so now since that is done I'll
10:36 - move it I'll move the circle to the
10:39 - right so for that you just need to
10:41 - select it and click on the right button
10:43 - and if you want to take a bigger lip
10:44 - lips you click on shift and right button
10:47 - so I hope I am making sense
10:50 - in starting you will have a little bit
10:53 - difficulty but
10:55 - by doing you can
10:57 - get used to it okay so uh knowing figma
11:02 - is a very you can use it to your
11:05 - advantage because figma is very powerful
11:08 - and most of the designers are now
11:10 - getting inclined towards figma then
11:13 - rather than Adobe XT or sketch
11:16 - okay so now what will be the use of this
11:18 - circle is we will show the user's
11:20 - profile over here if it if he is logged
11:23 - in then we will show His Image over here
11:25 - and if not then we will for now just
11:28 - show option to login means a common
11:31 - person's photo
11:34 - okay means the icon that we have in
11:38 - Android to depict that it is a person
11:40 - okay so we shall show that over here for
11:42 - now
11:43 - okay so I think I'll push it little bit
11:48 - up because it was having a lot of white
11:52 - space above now I again need to align it
11:57 - Okay cool so now after this
12:01 - I'll create categories
12:04 - so for categories I think I'll again use
12:07 - a circle
12:08 - okay
12:11 - so
12:13 - let's create categories like this
12:18 - now I want four is enough I guess
12:22 - so
12:24 - if you want to expand it you select all
12:26 - and then you pull it from the side so
12:30 - now you can see the width is also
12:32 - changing and so we don't want this
12:36 - I'll push it manually
12:38 - [Music]
12:40 - uh somewhere over here
12:44 - then
12:53 - so it will automatically tell you if the
12:56 - distance is equal or not okay so now we
12:58 - have four sections over here and I want
13:02 - one more
13:03 - so but that needs to be half gone inside
13:07 - so by this user will know that there is
13:11 - another category for me to go and check
13:13 - out
13:15 - okay uh I hope you understand what I'm
13:17 - trying to do over here now I want this
13:20 - little bit bigger so I'll make it 53 450
13:24 - or maybe a 60.
13:27 - I'm sorry for that so maybe 60 sounds
13:30 - better
13:33 - on the height to be 60.
13:36 - cool
13:45 - [Music]
14:01 - [Music]
14:09 - [Music]
14:15 - okay so this looks decent enough this
14:18 - will be our category
14:26 - okay so let us add some colors to it and
14:30 - before that I'll make sure that it is
14:33 - separated evenly over here I can go and
14:36 - click on tidia so now the difference
14:39 - between them is equal now I want it to
14:42 - be a little bit lower so that we have
14:45 - enough space between these two
14:47 - okay
14:50 - okay this looks fine
14:53 - maybe I'll reduce its size a little bit
15:01 - I think 45 works
15:05 - 45 bucks
15:07 - I'll push it a little bit below and to
15:10 - the side
15:16 - okay so while designing you need to
15:19 - experiment so that you get the best fit
15:22 - okay now let's add some colors to it so
15:25 - that it looks better
15:28 - I'll add a color oh so this is a dropper
15:31 - Icon by this if you now point the cursor
15:34 - or anything it will pick up its color
15:36 - you can see on in this circle over here
15:39 - so if I click go to this color palette
15:41 - it picks its color but I'll go to this
15:44 - palette I'll select this color and that
15:46 - color is automatically applied over here
15:50 - now
15:51 - instead of solid I'll make it linear
15:54 - okay
15:56 - and then I'll means linear means I want
16:01 - to apply a gradient okay and I want to
16:04 - apply it like this that the maximum
16:06 - color is over here and on this side
16:09 - there is almost no color
16:12 - okay means it is it gives us a fading
16:14 - effect okay this seems nice
16:19 - similarly over here I'll add another
16:21 - color
16:23 - the color is going to be this color and
16:25 - instead of solid it is gonna be linear
16:27 - now similar to linear we also have
16:30 - radial angular Diamond so you understand
16:32 - what it means radial means it will be
16:35 - circular fading angular means you can
16:38 - fade it at a certain angle and Diamond
16:41 - means it will be faded from the Four
16:43 - Corners okay so now let's change the
16:47 - direction means I don't want it to be
16:50 - vertical I want it to be fading
16:53 - horizontally
16:54 - so I did that
16:56 - now save it now for the next one I'll
16:58 - apply the next color
17:01 - okay and then again from solid to linear
17:07 - no linearly I have
17:10 - done this one as well
17:14 - now for the fourth one
17:17 - this is the color again I'll change it
17:20 - from solid to linear you understand the
17:23 - drill I think by now
17:28 - this is not straight so it won't look
17:30 - good now you can see if I drag it to
17:35 - drag it far away the shade also starts
17:38 - decreasing okay so if it depends on how
17:41 - close you keep it so as to get the
17:44 - desired effect
17:45 - okay so this is also done now in the
17:48 - last one I again
17:50 - start the first one
17:52 - solid will change to linear
17:55 - okay
17:56 - I'm sorry
17:57 - what happened yes so the solid will
18:00 - change to linear the linear will
18:04 - change from vertical to horizontal yes
18:08 - now it is done
18:11 - [Music]
18:12 - so now if you look at this it looks
18:15 - better now if we add some images over
18:18 - here then it will be more appealing okay
18:21 - so for that I'll need some time to
18:24 - decide on the content uh anyways I
18:26 - wanted to let you know that in better
18:27 - buys we will only be selling green
18:29 - vegetables okay so so it will look
18:32 - better now this will be the categories I
18:36 - will be adding the images and the
18:39 - content over here in the next video and
18:41 - then we will continue with the design
18:42 - and once we are have made a significant
18:45 - progress in the design we shall start
18:48 - coding it
18:49 - okay I hope you understand
18:53 - thank you this will be for the video
18:54 - thank you so in this video we are going
18:57 - to continue designing our application
19:00 - so I'll open up figma
19:03 - now in the previous video we have
19:05 - designed detail here over here we were
19:07 - planning to show the items and over here
19:09 - will be the users
19:11 - image
19:12 - okay so now let's so now over here you
19:16 - can see the colors are not that
19:19 - significant okay so to make it little
19:21 - bit more attractive what I am gonna do
19:24 - is I'm gonna cover it with a bigger
19:26 - Circle okay so now uh in the previous
19:30 - video you might have seen I was
19:33 - able to drag a copy like this so to do
19:37 - so all you need to do is select the
19:39 - figure or whatever and then click on
19:42 - shift plus option and then drag it down
19:45 - then
19:46 - if you drag it down you will get an
19:48 - exact copy over here okay
19:51 - so I hope you understand this now I'm
19:54 - gonna change it from linear to solid and
19:57 - I'm gonna increase its height I'll make
20:01 - it maybe 70. so now I have a bigger
20:03 - circle now I'll add stroke to it now
20:06 - stroke basically means the Border okay
20:08 - I'll make the border of width 2 and the
20:11 - border of color or which is inside this
20:14 - okay and now I'll remove the color from
20:18 - middle so that we just
20:22 - I'll show you
20:24 - now if you bring it here it's opacity
20:27 - decreases I have brought the opacity to
20:30 - zero percent so now we just have the
20:32 - Border like this
20:33 - okay now I am gonna take this border and
20:37 - put it over here
20:39 - so now
20:41 - I'll select I selected the circle which
20:44 - is the Border then the inside circle now
20:47 - once both are selected I am gonna make
20:49 - sure they are on the same axis
20:51 - horizontally and vertically so now once
20:55 - that is done you can now see this looks
20:58 - little bit better
21:00 - okay so I'm gonna do the same for all
21:03 - the four
21:04 - now it is very simple I'll
21:07 - select this then again shift option and
21:10 - drag I'll get another one okay now again
21:14 - I'll select the inside and the outside
21:16 - one both the circles make it
21:19 - horizontally aligned and vertically
21:21 - aligned
21:23 - and then I'm gonna change the color of
21:25 - the outer one
21:27 - so over here we were using the second
21:29 - color so I'll again go to the second
21:31 - palette and select it now I have it with
21:34 - the second color
21:36 - again for the third one I'll do the same
21:39 - [Music]
21:41 - you can see over here it is not aligned
21:43 - so by doing this we make sure that
21:45 - everything is aligned properly
21:48 - sorry I need to select the outer one
21:53 - then again I'll change the color of the
21:55 - stroke it will be the third one
22:04 - now I'll do the same for the fourth one
22:09 - drag it and make a bring a new one then
22:12 - select both then align it vertically and
22:16 - horizontally and then finally change the
22:19 - color
22:20 - okay
22:22 - do this and then the last one
22:30 - okay so you can see that if I drag it it
22:33 - is getting outside the screen okay so
22:36 - this is our screen and this ellipse is
22:38 - outside so now what will happen that
22:40 - even if we unselect it we are able to
22:41 - see the entire thing but what I want is
22:44 - that this is also cut into half with a
22:47 - proportional to the inside Circle Okay
22:49 - so
22:50 - I'll revert the changes into revert we
22:52 - have command Z in mac and Ctrl Z in a
22:57 - Windows I'll drag it little bit okay I'm
23:00 - sorry I'll
23:04 - I'll drag it a little bit to this side
23:07 - and then I'll use the right arrow to
23:10 - make it position so that then it will
23:13 - not leave the
23:15 - screen it will still be inside the
23:18 - screen so then if I uh
23:21 - if I am not if it is not selected I am
23:24 - only able to see half of it means only
23:27 - the part that is on the screen
23:30 - okay so you understood what I was trying
23:32 - to explain
23:34 - now again I'll select the outer one
23:37 - change the
23:39 - color of the stroke to the first one
23:41 - okay now if I go and see it looks little
23:45 - bit better okay so now finally let's add
23:48 - the images of the vegetables over here I
23:50 - was able to get a few images of the
23:53 - vegetables
23:55 - so it was a
23:57 - long process I had to download images
24:00 - from Google then remove background from
24:02 - it okay so but it is done
24:05 - now I'll
24:07 - first I'd like to have broccoli so again
24:10 - I'll create a copy of it because I might
24:13 - use it somewhere else so shift command
24:15 - create a new one and then drag it inside
24:18 - the screen
24:19 - okay now I'll
24:21 - arrange it
24:24 - okay and I'll make a
24:27 - little bit small as well
24:30 - so now I'll bring it over here and see
24:34 - how things are
24:35 - let's make the height to
24:37 - 50 okay it has completely left the
24:40 - screen
24:41 - and now if I put it here
24:44 - how does it look
24:46 - okay it looks better but maybe I'll make
24:48 - it little bit more small so let's say
24:51 - 40.
24:53 - sorry it became for
24:55 - meant it to be 40. so okay this looks
24:59 - fine now so now again I'll put it in
25:01 - Center so to so since figma is very
25:04 - powerful it will automatically assist
25:06 - you and notify you when you are in
25:08 - center you can see the Orange Line okay
25:11 - and even and if you don't want to use
25:13 - that then we are again gonna use our
25:15 - these tools I'm gonna select this the
25:17 - circle above that and the Outer Circle
25:20 - then
25:21 - align all of them horizontally align all
25:24 - of them vertically
25:27 - okay now next let's take another
25:30 - vegetable
25:32 - okay let's take spinach
25:35 - again drag and create a new one bring it
25:38 - inside the screen again I should
25:40 - directly do 40 over here
25:46 - and you can see the image seems fine
25:49 - [Music]
25:51 - I'll bring it to the center
25:55 - and we have our
25:58 - spinach over here
26:01 - now next
26:03 - let's take capsicum
26:11 - okay again I'll make it I it's hard to
26:14 - be 40.
26:17 - nice
26:18 - now this foot is little bit too small
26:21 - I'll make it 60 let's say
26:24 - okay 60 seems fine
26:28 - this is just for the designing purpose
26:30 - once the design is finalized I'll make
26:33 - them all of the same size
26:36 - okay so let's see how does this look
26:39 - okay it it might be a little bit bigger
26:43 - let's see how it looks if it is a little
26:45 - bit bigger
26:46 - okay now I need to align it in the
26:49 - center
26:50 - that is a very important thing okay so
26:53 - now it is in Center
26:54 - [Music]
26:56 - okay but if you look closely there is
26:59 - little bit space over here compared to
27:01 - the left side I am gonna push it little
27:04 - bit over here now although the image is
27:06 - not in center but it feels it is in
27:08 - center and the feeling is more important
27:11 - okay
27:13 - so this is done
27:16 - now let's take beans
27:19 - create a new one drag it inside the
27:21 - screen
27:22 - again as we already have the height of
27:25 - 40 over here and here I'll directly make
27:27 - it 40.
27:29 - okay and then try to put it over here
27:33 - let's see
27:37 - so it is in the center
27:39 - yes this looks fine
27:45 - now next I'm gonna use bitter guard
27:51 - again I'll directly make the height to
27:53 - 40.
27:55 - so 40 it is and it is little bit hidden
28:00 - behind the screen
28:01 - okay so this is very important it gives
28:03 - the gist that there are more items on
28:06 - the right hand the user should scroll
28:10 - okay so now this is how the items are
28:13 - going to look this is how it will look
28:16 - okay now let's add the names of it
28:27 - so to add the name I'll click on text
28:29 - then text or a better way would be to
28:35 - select this text and drag and create a
28:39 - new one and then over here I can say
28:42 - broccoli now this is very big let's give
28:47 - it a smaller size 12 seems fine and from
28:49 - middle I'll make it light so you can see
28:52 - the stroke is a little bit lighter now
28:55 - that is what I was looking for
28:58 - okay so now you can see I have the text
29:01 - below it is in the it is aligned they
29:04 - all are on the same axis and this and
29:07 - this amount of space is enough I guess
29:10 - okay so first is broccoli
29:13 - then there is
29:15 - okay so this is the center
29:18 - a notch
29:20 - no since the length of spellings are
29:22 - different it is
29:24 - gonna change after you change the name
29:26 - so let's first change the name only
29:29 - capsicum
29:30 - [Music]
29:32 - so again this now this is in Center
29:36 - [Music]
29:43 - beans
29:47 - okay and the last one but not the least
29:50 - is bitter guard
29:54 - okay so now if this is not visible over
29:56 - here you can check the spelling over
29:58 - here
30:00 - also since you are designing Laura
30:02 - mipsum would have also done the
30:04 - have served would have solved the case
30:07 - okay
30:08 - so now we have the name over here
30:11 - so I think the items look fine for now
30:15 - in the next video we are going to add
30:18 - the trending section and the bottom one
30:22 - okay so see you in the next video thank
30:24 - you so in this video we are going to
30:27 - continue designing our e-commerce
30:29 - application
30:30 - so as I told in the previous video in
30:32 - this video we are going to add a
30:35 - trending section okay so let's get
30:37 - started I'll copy the text over here
30:42 - and I'll call it most popular let's say
30:46 - for now okay and this is medium I want
30:50 - to reduce the size a little bit so I'll
30:53 - make it 20 and then I'll make this semi
30:58 - bold so that the order of inheritance is
31:01 - there this is the most important thing
31:03 - then after that this is important
31:06 - okay now I'll create a square
31:09 - so I'll
31:10 - create it like this
31:16 - [Music]
31:24 - let's say this this is the width and
31:28 - height being somewhere around
31:31 - this okay now I want to make the borders
31:35 - to be curved so let's say I give it a
31:38 - edge of 14 15th so over here if you want
31:42 - to give the corners a radius means if
31:45 - you want to make a rounded Corners you
31:48 - write the degree over here okay so now
31:51 - you can see this is
31:53 - rounded at the corners okay now let's
31:56 - add the color so we have our color
31:59 - palette over here I will use the first
32:01 - color
32:01 - okay now let's see how it looks
32:07 - okay so this looks fine uh I'll change
32:10 - the way we
32:12 - display the color instead of solid I'll
32:15 - make it radial and then I'll
32:19 - pull it over till here okay so by this
32:22 - what happened that the color will be
32:24 - concentrated in the center okay so now
32:28 - you can see that
32:29 - now let's let's add the the item okay so
32:34 - since we have already used five of the
32:36 - items over here I am gonna use the sixth
32:39 - item that is the Cucumber so I'll create
32:42 - a copy
32:44 - and then add it inside the screen so
32:49 - let's see
32:55 - I'll make it a little bit bigger
33:04 - okay so this seems fine now let's add
33:08 - the name and price so for that I'll
33:12 - create another box over here
33:15 - this will be of the same size as of
33:20 - the
33:23 - bigger box okay now I'll
33:26 - make its height a little bit less
33:29 - somewhere around let's say
33:35 - okay so this seems fine now let's see
33:41 - okay so now you can see this is rounded
33:44 - at the top but not at the bottom because
33:47 - it is
33:49 - because we have added another Square
33:51 - another box on top of it okay so the box
33:56 - which was behind it got covered okay so
33:59 - now so to fix this what we are going to
34:01 - do is we are going to add border radius
34:04 - to this as well so now if I directly
34:07 - write 15 over here it gets added on all
34:09 - the four sides which is which is what uh
34:13 - which I don't need so I'll change it
34:15 - back to zero and then if I click on this
34:17 - I get to add the individual
34:20 - border radius okay so I want for this
34:23 - angle so I'll add 15 over here so you
34:25 - can see
34:26 - this part is
34:28 - rounded now this this this value is for
34:32 - this part so again over here also I
34:34 - learned 15 and so now you can see these
34:38 - two corners have a border radius but
34:42 - these two don't okay and that is what uh
34:44 - we want exactly okay so now let's add
34:48 - let's change the color
34:51 - we'll add a little bit
34:54 - less blackish color okay so this is how
34:58 - it will look now let's add the text okay
35:03 - so I'll bring our text here now you can
35:06 - see if you drag it it has gone at the
35:09 - back okay so now you need to double
35:11 - click or right click on it and then
35:15 - select bring to front Okay so now it
35:17 - comes to the front now I'll change the
35:20 - value to cucumber
35:23 - okay now I shall reduce its size maybe
35:28 - I'll make it
35:30 - 15 15 seems fine
35:32 - okay so 15 is all right now let's push
35:37 - it a little bit to the right okay now
35:41 - another text that we are gonna have is
35:44 - the price so let's say
35:47 - rupees
35:49 - 40
35:51 - per page okay now I am gonna reduce this
35:56 - size
35:58 - even further okay and change it from
36:01 - medium to light
36:04 - okay so this seems fine now I'll add a
36:08 - icon over here by using which we can
36:10 - directly add it to the cart
36:13 - so for that I already have a cart icon
36:16 - over here
36:16 - [Music]
36:17 - now you you can directly import all
36:20 - these icons from this figma project okay
36:22 - the link will be in the description so
36:25 - I'm again gonna copy it
36:28 - create a new one and once it is created
36:30 - I am gonna add it to the project
36:33 - okay
36:36 - I'm sorry
36:37 - yeah so now let's
36:40 - increase its size it will be of 25 okay
36:43 - now you since this is an SVG I can
36:46 - change its color and I'm gonna do it so
36:49 - I changed it to the
36:52 - um color we are using throughout the
36:54 - application so this is how it will look
36:56 - this seems fine
36:59 - okay now I'll
37:01 - select the entire thing
37:03 - shift option create a new one now again
37:06 - it came out of the screen so I'm gonna
37:08 - let it be inside and drag it
37:12 - okay so this will be something like this
37:15 - now I'll change the color as we have
37:18 - four different colors so I'm gonna make
37:21 - it back to solid and the color is gonna
37:24 - be this then again change it to radial
37:27 - and okay sorry so over here only I'll
37:31 - have to change it to this color so this
37:33 - is done
37:34 - okay now let's change the item
37:37 - instead of cucumber let's make it a
37:40 - capsicum okay
37:52 - I'm gonna put it inside I'm gonna reduce
37:55 - the size to let's say 70.
37:58 - okay where the hell did it go now so 70
38:01 - is very small I'm gonna make it 150 okay
38:04 - so 150 seems fine now 150 also feels
38:08 - small so I'm gonna make it 170 or maybe
38:11 - 200.
38:13 - so 200 is what it is so this looks fine
38:17 - now I'll change from
38:20 - I'm sorry I'll change the I was about to
38:24 - select the text okay so I'll
38:27 - I'm sorry
38:30 - so I'll select the text and change the
38:33 - value from cucumber to capsicum
38:38 - and the price from 40 to let's say 80
38:42 - okay
38:44 - so this is how it is going to look so
38:47 - now if you come here this is how it will
38:50 - look let's add image over here okay this
38:52 - has been waiting from the long time so
38:54 - to add an image the shortcut is shift
38:57 - command k
38:59 - okay
39:01 - so now I have the option I have already
39:04 - cropped an image in circular
39:08 - okay now I want it to be of the same I'm
39:12 - sorry I want it to be of the same size
39:15 - as this circle this is 45 so I'm gonna
39:18 - convert this to 45
39:20 - okay and then just place it on top of it
39:27 - okay so this is done
39:31 - so this is how it is going to look now
39:34 - at the bottom I'll have a navigation bar
39:36 - okay so I have already created one
39:41 - means I have not created one I already
39:44 - have the icons that will use
39:51 - okay so this is the home search card
39:54 - profile and menu okay so we shall see
39:58 - what are the items that are going to be
40:00 - inside it later
40:03 - now again this has gone to back I need
40:05 - to bring it to front
40:06 - now this is a little bit to the right
40:09 - so I'll bring it to left now this is
40:13 - home
40:15 - home should be below this
40:18 - okay
40:19 - now similarly we have search
40:24 - Now search should be in black color the
40:27 - color will change to Green for the
40:29 - selected fragment
40:31 - okay now this is
40:34 - cart
40:41 - now this is profile
40:48 - and the last one is
40:52 - menu
41:00 - so we have our bottom navigation bar now
41:04 - over here I shall add reviews okay
41:09 - reviews for now if I come up with
41:11 - something more uh
41:13 - suitable for the empty space then I'll
41:16 - add that if you have any suggestions you
41:18 - can drop it off in the comment box okay
41:22 - so I'll
41:25 - copy this and write
41:29 - I'm sorry I am sorry
41:37 - what's the word around
41:40 - okay means that that means basically the
41:44 - reviews
41:45 - I'll copy this text over here
41:52 - now I'll add it to 15 from all the sides
41:58 - okay cool
42:02 - [Music]
42:04 - so this is that
42:07 - and now let's add a image over here for
42:10 - the user whose review this is okay
42:15 - now this image over here seems pretty
42:17 - big so I'll change it to 20 okay this
42:20 - seems fine now the name of the customer
42:23 - whose review this is going to be for now
42:26 - I'll put my name
42:28 - rishabh Kumar
42:32 - okay uh let's change it from light to
42:35 - medium because the name should be of
42:38 - more significance than the
42:40 - comment and then to get the comment time
42:43 - we have
42:46 - a website called lorem ipsum.io which is
42:49 - our lorem ipsum generator
42:51 - so I'll copy this much from there I
42:55 - think this should be fine copy
42:57 - okay now I'll have a text over here
43:03 - and then paste it
43:06 - okay so now first change it from medium
43:09 - to light
43:10 - reduce its
43:12 - size
43:14 - okay
43:15 - so after that we align it
43:19 - how it should look
43:24 - break a line here and here
43:28 - and this is done
43:31 - I think this seems fine
43:37 - or maybe I'll reduce the
43:40 - size a little bit more
43:44 - so the size didn't reduce actually it
43:47 - was selected in the wrong way so this
43:49 - seems fine
43:51 - I'll have to take it back
43:54 - so now
43:59 - this is how you add random text in
44:01 - design while designing so this is done
44:04 - now we need to add stars for that I have
44:08 - already downloaded svgs of star I'll
44:11 - again do shift command k
44:13 - okay now I have star one and star you
44:17 - don't need to worry about these items
44:19 - you can down import it from the figma
44:22 - project this project will be in the
44:26 - description
44:28 - Okay so
44:31 - [Music]
44:34 - let's talk about star
44:40 - this is star one this is star I'll make
44:43 - it of size okay so we need to lock it
44:46 - now by locking I mean that the height
44:50 - and width will be of the same proportion
44:52 - as it is now okay if it is not locked
44:55 - and then I change the height then only
44:56 - height will change and no change will be
44:58 - in the width but since it is locked if I
45:00 - change the height to 30 the width also
45:03 - changes to 30 okay so it will be in
45:05 - proportion that is the main gist of this
45:08 - so 30 is way too big I'll make it 15.
45:12 - okay 15 15 seems fine
45:15 - copied four times
45:19 - [Music]
45:23 - okay so that means I gave 4 star out of
45:26 - 5 now then again this star
45:30 - I'll bring it here
45:33 - now you can see the heightened widths
45:35 - are same so again I lock it change it to
45:37 - 15.
45:38 - and boom
45:40 - it is done
45:44 - so
45:45 - our review section is also done this
45:49 - should change automatically or maybe I
45:51 - will add a scroll feature that we can
45:53 - decide later but our home screen is done
45:56 - for now now you might be thinking why
45:58 - are we not making the user register or
46:01 - login at start so because that is not a
46:04 - standard practice you can see any
46:06 - e-commerce applications they will force
46:09 - you to login or create an account only
46:11 - when you are going to order not until
46:13 - you order so we will also ask the user
46:16 - to create an account or login to the old
46:18 - account when they are going to order
46:21 - Okay so until then the user should be
46:24 - able to see everything okay so with this
46:27 - hour this screen is done
46:29 - we will meet in the next video thank you
46:31 - so in this video we are going to
46:34 - continue designing our e-commerce
46:36 - application
46:37 - so I'll open figma
46:41 - thank you
47:04 - okay so once it is fired up we'll
47:06 - continue so in this video we are going
47:09 - to make the details screen means if we
47:12 - click on any of the items over here or
47:15 - on these items we should be able to see
47:18 - our description page okay so let's start
47:21 - we know how to copy we click on shift
47:24 - option and then drag and we get a new
47:26 - one
47:27 - okay now I I don't need these things
47:33 - okay so I'll select them all
47:35 - and remove them I will keep the
47:39 - bottom navigation bar because that is
47:41 - how I plan to proceed so let's change
47:44 - its color
47:46 - okay so I'm gonna give this color so you
47:49 - will see that in the entire project I am
47:51 - gonna use only this palette okay because
47:54 - it will provide more uniformity to a to
47:58 - our application okay so now I need to
48:01 - have a back icon over here so for that
48:04 - I'll open our material outlines okay
48:07 - I'll add a link to this as well in the
48:09 - description
48:12 - okay so once it is opened if you go in
48:14 - the navigation section you can see all
48:16 - the icons so I'll select this one
48:20 - then command C to copy if you are on
48:23 - Windows then Ctrl C and then simply I'll
48:26 - paste it over here now in that that
48:29 - everything is inside a frame means by
48:32 - frame I refer to this purple boundary
48:34 - that it has if you double click on it it
48:36 - will go inside the frame and select the
48:39 - actual item I'll remove it away from the
48:42 - frame okay and then finally I'll delete
48:45 - this Frame
48:46 - okay now I want this to be white in
48:50 - color so here it is
48:52 - now I want it over here
48:55 - okay
48:58 - nice so next I want the item that is
49:02 - clipped to be displayed here means the
49:05 - name okay so I'll create a new text view
49:09 - or you can you see how convenient this
49:12 - is to copy from previous one
49:15 - okay now I will change its color to
49:17 - white and then this will be
49:21 - broccoli
49:23 - okay now this should be in the center so
49:27 - I'll bring it over here
49:29 - now to make it in the center I'll simply
49:31 - click on this and it will be in the
49:33 - center now I just need to match these
49:36 - two so I'll shift it a little bit
49:38 - upwards and then these two are on the
49:41 - same line now okay so now let's proceed
49:45 - I'll add a square over here
49:46 - now if you don't uh there are two
49:49 - options to create a square I'll click on
49:52 - this and then drag and create a square
49:55 - simple
49:57 - or I can simply click and get the square
49:59 - and then
50:01 - edit it
50:02 - to the desired shape I want okay so I'll
50:06 - try I did the second one
50:09 - I want to tell here I'm sorry it should
50:11 - it should touch the bottom navigation
50:14 - bar
50:15 - again at top it should be till here
50:21 - okay this seems fine now I'll add a
50:23 - border to it only on the top so you know
50:26 - we can add a uh individual border radius
50:31 - so for this corner I'll again make it
50:33 - 15. and for this corner as well I'll
50:36 - make it 15. now I want it to have a
50:39 - white color I'll do that
50:41 - can with this we are ready
50:44 - now let's see how it looks I'll start
50:47 - the preview
51:00 - okay so this is the first screen only
51:04 - now let's navigate from here to this
51:08 - screen from the screen to the screen
51:10 - which in designer's term is called
51:12 - prototyping okay so over here this is
51:15 - design and then you have the Prototype
51:17 - section okay now what you need to do is
51:20 - you simply need to go and select this
51:22 - the circle not the image but the circle
51:26 - circle would do better the Inner Circle
51:29 - to be more specific okay
51:32 - now in this uh once this circle is
51:35 - selected you can see a big dot a bold
51:38 - dot over here so all you need to do is
51:40 - click on that and then drag it to the
51:42 - screen where you want it to navigate to
51:44 - on clicked okay and then over here you
51:47 - have different options on how to animate
51:50 - the transition from the screen to the
51:53 - screen like move in move out for now
51:55 - I'll let it be in instant you can try
51:58 - the other things on your own okay so
52:02 - with this now I'll go back to design so
52:06 - now over here if I click on Broccoli I
52:09 - am taken to the taken to the next screen
52:12 - okay so the prototyping worked okay now
52:16 - let's add a big image of broccoli
52:19 - so again create a new one put it inside
52:23 - the screen
52:28 - okay so the image size is
52:31 - perfect in itself
52:33 - okay this looks decent enough
52:36 - now let's add the price
52:38 - so
52:40 - I'll select this one
52:42 - and again bring it over here
52:46 - over here as you as I just as we
52:49 - discussed in one of the previous videos
52:51 - that all our things will be Beyond this
52:55 - first reddish line okay so now over here
52:59 - I'll add price
53:01 - let's say 200 rupees per kg
53:05 - okay so this is our price
53:09 - I'll I'll push it little bit downwards
53:12 - okay now you can see that this square is
53:15 - getting selected every time I come here
53:17 - but I don't want that I don't want this
53:20 - Square to get selected sorry not a
53:23 - square this rectangle to get selected so
53:25 - what I can do is I will simply come over
53:27 - here and click on this lock icon so once
53:31 - we have locked this now you see if I
53:33 - hover over here it is not getting
53:36 - selected and if I remove this then if I
53:39 - over over here then it will be able to
53:42 - be selected okay so for now we don't
53:45 - need that so I'll lock it okay
53:49 - now let's add a description
53:51 - of the product so again create a new one
53:54 - bring it over here
54:01 - okay I wanted to be till here
54:05 - okay now let's edit
54:17 - okay so I'll copy it
54:21 - paste it once again so we have a long
54:24 - text
54:25 - now let's change the color
54:28 - will be green
54:30 - okay and let's see if 10 works maybe
54:34 - I'll increase its size a little bit okay
54:37 - 12 seems fine
54:40 - now I don't need this much of a
54:42 - description okay when we make the app we
54:45 - will limit the user to add
54:47 - only a certain number of characters in
54:51 - description
54:52 - okay so this is done so this is our how
54:55 - our screen looks until now now we need
54:58 - to add an option to buy now or add it to
55:01 - cart and then order multiple things
55:03 - together so let's do that as well I'm
55:07 - gonna add a square box again
55:14 - let's say
55:16 - okay this size seems
55:18 - fine
55:21 - okay I'm gonna give it a our again the
55:24 - primary color and I'm gonna add a border
55:27 - radius of 5 on all the sides okay so
55:30 - that it's
55:31 - uh Corners are smooth and okay now I'll
55:35 - again add this text over here
55:40 - I need to bring it to the front Okay
55:43 - once done I'll change its color to white
55:46 - and then the text will be saying
55:52 - by now
55:54 - okay now I don't need it to be medium
55:56 - I'll make it light reduce the size
56:01 - to 15 15 seems fine now I'll make it uh
56:05 - align all the things
56:08 - horizontally and vertically
56:10 - okay so now once this is done I'll
56:12 - select both
56:14 - select the button and create a new one
56:18 - okay
56:19 - and then again uh to in this one I'll
56:23 - add a stroke the stroke will be of width
56:26 - 1.5 where stroke is nothing but the
56:28 - Border I'll give it our primary color
56:31 - okay
56:32 - uh remove the fill color
56:36 - and then I'll select the text and make
56:38 - it our primary color and this text will
56:41 - say
56:43 - add to cut
56:48 - okay
56:50 - now again these things need to be in the
56:53 - center
56:54 - so I'll align it
56:56 - okay so this is how it looks I think we
56:59 - need a little bit more white space from
57:01 - the bottom navigation bar so I'm gonna
57:03 - push it a little bit upwards
57:06 - so select it and then click on the
57:11 - up Arrow Okay so
57:13 - now this looks better
57:16 - now over here we are gonna display the
57:18 - seller's information so for that I am
57:22 - gonna select the design of a review over
57:25 - here okay and over here we'll basically
57:28 - have sellers
57:30 - description or review something about
57:34 - the seller let's we'll decide that later
57:37 - once we develop we'll see which one is
57:39 - more convenient at that point okay so
57:42 - beside the name there should be seller
57:45 - written on it okay so that the people
57:47 - understand I'll I'll reduce I'm sorry
57:52 - I'll reduce its rating from 4 star to 3
57:56 - star okay
58:01 - see and then I'll add its address over
58:05 - here let's say
58:07 - l Road
58:09 - SNP area
58:17 - so this is uh the market in jamshedpur
58:21 - okay so now I'll make it
58:25 - from light I'll change it to two medium
58:27 - to make it more significant
58:30 - as compared to the
58:33 - text that we have over here okay which
58:36 - we will decide later is gonna be the is
58:39 - gonna be related to the seller or a
58:43 - review about the seller okay so we can
58:46 - decide that later once we reach the
58:48 - point to do so and with this this screen
58:52 - is done as well okay so this screen also
58:55 - looks pretty decent
58:57 - okay this will be the description of our
59:00 - products
59:02 - okay so now for practice I suggest you
59:05 - create for all the other items as well
59:07 - in the next video we will start with the
59:10 - back end make these two screen make the
59:13 - prepare the back end required for these
59:15 - two screens make the front end that is
59:18 - our flutter application for these two
59:20 - screens and then we shall again start
59:22 - with figma so thank you
59:25 - so in this video we are actually gonna
59:28 - start coding we are going to prepare our
59:30 - back end
59:31 - for the project okay so for that I'll
59:34 - fire up map
59:36 - okay so I I'll start
59:39 - it will take a few seconds
59:41 - okay so this is an ad that comes along
59:44 - with map you can simply close it it is
59:46 - of no use okay once it is started I will
59:49 - minimize it okay so this is the default
59:53 - homepage of mamp and it opens
59:55 - automatically as soon as your map server
59:58 - starts
59:59 - so we can close this now you what we
60:03 - need to do is go inside finder inside
60:05 - applications inside the map folder
60:08 - inside HD docs we need to create a new
60:12 - folder so over here I have created one
60:14 - called better Buys so I'm gonna open
60:16 - this folder in our vs code and then
60:18 - start coding Okay so
60:22 - I'm sorry not the terminal but the vs
60:24 - code and then I'll open the folder
60:26 - better buys
60:28 - okay so now we can actually start coding
60:33 - so over here I am first gonna create a
60:36 - folder called includes because over
60:38 - inside this all the files will be there
60:41 - that will be included in other files
60:43 - okay so I am gonna create a database dot
60:48 - PHP okay so this only this class will be
60:52 - allowed to connect with the database and
60:54 - interact with the database we are gonna
60:57 - create use the instance of this database
61:00 - class that we create right now for
61:03 - interacting for storing data in our
61:05 - database for retrieving data from our
61:07 - database so you can refer to this as a
61:09 - helper class okay so let's start
61:13 - now to start we start a PHP file by
61:16 - giving this angle bracket a question
61:18 - mark and writing PHP okay and after this
61:22 - we start so now first I am gonna create
61:24 - a few Global variables they are
61:27 - basically the credentials required to
61:29 - connect with the SQL Server so to create
61:32 - uh Global variables we simply write a
61:34 - Define
61:36 - and then the name I'm gonna call it host
61:40 - okay
61:42 - and then the value for now it is
61:44 - localhost
61:46 - and then
61:49 - um then there needs to be username
61:53 - okay anyone with any amount of
61:56 - experience in MySQL would know that the
62:00 - host username password and DB name is
62:03 - required to connect with the
62:05 - MySQL server Okay so
62:08 - I am Define and this is password
62:13 - and the password is empty for the time
62:16 - being because since it is running on
62:18 - localhost we don't need a password
62:19 - security is not an issue as generally it
62:22 - often is a development server
62:25 - okay so again Define and then over here
62:29 - DB name
62:31 - okay
62:33 - and we are gonna call it
62:35 - better
62:37 - underscore
62:39 - buys okay so uh you need to understand
62:42 - that in PHP we use Pascal case uh in
62:46 - Pascal case what basically happens that
62:48 - we separate uh two words by a underscore
62:52 - uh and in camel case we start the next
62:55 - word with her with the capital letter so
62:57 - you understand
62:59 - the difference between camel case and
63:01 - Pascal case and in PHP we will use
63:04 - Pascal case Okay because that is the
63:06 - standard practice now I'll start the DB
63:08 - class now commenting is the same as in
63:11 - any other programming language as most
63:13 - of the programming language
63:15 - we start the
63:18 - class
63:19 - okay so if we write the keyword class
63:22 - name
63:25 - okay now I'll create a connection means
63:28 - connection will be a variable that will
63:30 - connect with the SQL now I want it to be
63:33 - secure so I'll make it private
63:36 - okay I know you I I assume you have the
63:39 - idea of access modifiers private public
63:41 - and protected we are gonna see private
63:45 - and public both in this video okay so
63:47 - I'll create a connection variable
63:50 - so it is also like python you don't need
63:53 - to write the data type it will
63:56 - automatically be assigned once we assign
63:58 - some value to it okay now we will create
64:01 - a Constructor for this class as
64:03 - Constructor will be in called from other
64:05 - other places we it will be public and
64:09 - for Constructor we will give two
64:11 - underscores and then right
64:13 - construct okay so in PHP we don't
64:17 - actually write the file name but we give
64:19 - two underscores and use the keyword
64:21 - construct
64:23 - okay and as soon as the object is
64:26 - created it is known that the Constructor
64:29 - will will be executed so what I'm gonna
64:32 - do is I'm gonna create a connection
64:34 - inside the inside the Constructor okay
64:38 - not inside the Constructor but we are
64:39 - gonna create another method I am gonna
64:41 - call it inside the Constructor so that
64:44 - means that as soon as you create an
64:46 - object the object is automatically
64:49 - connected with the database okay so for
64:52 - that I'll create create a new method uh
64:55 - I am calling the method over here and
64:58 - then we'll create it let's call it
65:00 - open DB
65:03 - connection
65:04 - okay so this is the method name and this
65:08 - is how we call a method we use the
65:10 - keyword this and then opendb connection
65:12 - if we are in the same class if we are
65:15 - not in the same class then over here
65:16 - would be the name of the object of this
65:19 - class okay so now actually let's create
65:22 - this function
65:23 - so to define a function we write a
65:26 - public or private as per the case and
65:29 - then the keyword function and then the
65:31 - name of the function which is opendb
65:36 - connection
65:40 - okay so let's add a few comments so it
65:43 - is
65:45 - easier to understand this is the
65:48 - Constructor
65:49 - and over here we are creating
65:53 - connection with the DB
65:57 - so let's start I'll write
66:00 - this
66:03 - connection
66:05 - means I am referring to this variable
66:06 - over here and as I have already
66:09 - and discussed that we use the keyword
66:12 - this to refer to variables or functions
66:15 - inside the same class so this connection
66:17 - and then we all have a predefined method
66:21 - that is called my
66:23 - sqli
66:27 - connect
66:29 - so this is a predefined method in PHP it
66:32 - takes four things first is host which is
66:36 - this variable over here
66:39 - then username
66:43 - then password
66:48 - and then the DB name
66:51 - okay so this will connect this will
66:54 - create a connection with the SQL
66:57 - database
66:58 - okay now we need to check if it has
67:00 - connected properly or not so we'll use
67:02 - an if else condition if else is same as
67:05 - in any other programming language we
67:08 - write then now inside this we write
67:11 - mysqli
67:13 - connect
67:16 - error so if this returns some value that
67:20 - means there was an error in connecting
67:22 - with the database so we write the die
67:26 - and then
67:28 - connection
67:30 - error and the connection error being
67:33 - mysqli
67:37 - connect error
67:40 - okay so now uh
67:43 - I'll I'll explain this line to you so
67:46 - there's the die keyword over here is
67:47 - used to stop the execution of the code
67:49 - as soon as the PHP compiler Encounters
67:53 - this word the die it will this will be
67:56 - the last line to be executed okay
67:59 - so means that it can be basically
68:03 - oh it referred as a finish that we have
68:07 - in Android okay
68:09 - now connection error this is the string
68:11 - and then with comma we have separated
68:13 - and then we actually print the error
68:16 - that occurred okay so if no if there is
68:19 - no error then nothing will be printed
68:21 - okay and that means the connection is
68:23 - create once this is done
68:26 - let's proceed
68:29 - so after this I am gonna create a
68:31 - function that executes the SQL command
68:34 - I'm gonna call it query and it takes a
68:37 - parameter called
68:38 - as given so the definition will take
68:43 - parameters by just writing the name uh
68:47 - preceded by a dollar sign okay so now
68:50 - I'll create a variable result that will
68:53 - have the result of this query so to
68:56 - run this query we first needed to call
68:59 - our connection
69:02 - okay because that is the SQL connection
69:04 - and then we have
69:06 - query
69:07 - okay and then inside this query we write
69:09 - we give the SQL so now this connection
69:12 - instance executes this SQL query
69:15 - okay and then the result is stored in
69:19 - this result variable so we check if not
69:23 - dollar result
69:27 - so this means that no result was
69:29 - received that means the query didn't
69:32 - execute properly so then again we write
69:34 - a die
69:37 - query fails
69:40 - okay and then we simply print the query
69:43 - and the query is stored in the variable
69:46 - name SQL
69:47 - okay and if not we simply return the
69:51 - result okay return dollar
69:53 - result so returning the value is similar
69:57 - to any other programming language okay
70:00 - this is
70:03 - executing
70:07 - SQL
70:09 - query
70:12 - okay so now the next function is to get
70:15 - the array of results suppose we have a
70:19 - select method or similar to that method
70:21 - then it it is supposed to return uh
70:24 - return few values so to get them we will
70:27 - we are creating this function public
70:29 - function
70:30 - and it will be called Fetch
70:34 - array okay and then this will take this
70:37 - result okay this result is nothing but
70:40 - this that we return from this function
70:42 - because this is the result that the
70:45 - query has given and we are taking that
70:46 - result and then extracting the values
70:48 - from it and returning to the
70:51 - developer or the function that or the
70:53 - place where this function is called okay
70:56 - so first I'll check if
70:59 - dollar result
71:02 - I'm sorry num rows means the number of
71:06 - rows
71:07 - is greater than 0 that means it actually
71:10 - has some value sometimes what happens
71:12 - that it doesn't return anything so then
71:15 - the number of rows will be equal to or
71:18 - equal to 0 and in that case we don't
71:21 - want to run this method as it is gonna
71:23 - crash so then I am gonna create a while
71:26 - loop
71:27 - and then what it is going to do is row
71:33 - is equal to Dollar result
71:38 - fetch
71:39 - a sock
71:42 - so what this basically means is that
71:44 - this row is a variable and every time it
71:46 - will fetch the associated value means
71:49 - the this dollar result
71:52 - Arrow fetch Ashok means it will fetch
71:55 - the associated data okay then over here
71:59 - I'll create a variable called result
72:04 - array
72:06 - okay to create an array we just to give
72:08 - a square brackets like this and then we
72:11 - add row to it okay so what this line
72:15 - basically does is creates a variable
72:17 - called creates an array of named result
72:20 - array and it adds row to it okay so this
72:23 - might seem weird at the first but once
72:26 - you start coding you will get used to it
72:29 - okay so once this is done
72:33 - we return the
72:36 - result error now you might get confused
72:38 - with that we created this variable or
72:41 - use this for the first time inside our
72:43 - inner parenthesis but we are returning
72:45 - it in the outer parenthesis so it is
72:48 - like python the first time you use it it
72:51 - is declared and it can be used in entire
72:53 - function
72:55 - Okay so this method is
72:59 - fetching list
73:01 - of data from the
73:05 - SQL query
73:07 - result
73:09 - okay now next function is to fetch a
73:12 - single data mean sometimes we select a
73:14 - specific and we know that there is gonna
73:17 - be only one row of data so in those
73:19 - cases we will use this function so it is
73:23 - called public function
73:27 - fetch row and then this also takes
73:30 - result
73:32 - and over here also we need to check if
73:35 - the number of rows is greater than zero
73:37 - or not
73:37 - so
73:40 - result
73:41 - num rows
73:46 - okay sorry there is no parentheses num
73:49 - rows is greater than 0 and if it is
73:53 - then we simply return
73:57 - result
73:58 - fetch a sock
74:04 - because this time we know that only one
74:06 - data is going to be returned so we
74:08 - simply
74:09 - directly return it
74:12 - and add a tab over here format it
74:16 - now this method is fetching
74:20 - uh
74:22 - single
74:24 - row of data
74:27 - from the SQL
74:30 - query
74:31 - okay now the last function is going no
74:35 - this is not the last function but this
74:37 - is the function called Escape value so
74:40 - what happens that sometimes when we are
74:43 - entering data to data when entering some
74:45 - value to database the value is not in
74:48 - the proper format okay so this function
74:50 - will prove that the fun that the data
74:54 - that we are trying to save in the
74:56 - database is in proper format or Not by
74:59 - proper format means it should be UTF 8
75:01 - utf-8 mb4 or something like that if it
75:04 - is not then this should automatically
75:07 - reject okay so public function I will
75:10 - call it
75:11 - escape a value I don't call it it is
75:13 - widely called
75:16 - by this okay so it takes a value
75:22 - and then we simply write return
75:26 - and dollar this we refer to our
75:29 - connection again
75:30 - and then we see
75:34 - real Escape string
75:38 - okay dollar
75:40 - value
75:42 - so this is sometime also used to remove
75:44 - the additional data that additional
75:47 - values that PHP address that PHP adds to
75:51 - the data like end-of-line character and
75:54 - other characters like that okay so this
75:57 - is gonna do that
76:03 - checks proper format
76:05 - of data
76:07 - okay so once this is done
76:10 - I think we just need to now close the
76:13 - database
76:15 - okay so once this is done the last
76:18 - function is to close the database so
76:20 - I'll call public function
76:24 - close connection
76:27 - and then over here we simply write this
76:33 - connection
76:35 - close
76:38 - and this
76:41 - closes the
76:44 - connection with
76:46 - SQL which we created right over here
76:49 - okay so now let's format it
76:56 - okay so it is formatted
76:59 - now what I'm gonna do is I am gonna
77:01 - create an instance of this database
77:04 - right over here
77:05 - call it database is equal to
77:09 - new database
77:13 - okay so this database is the name of the
77:17 - class okay so what I basically did was
77:20 - create a object called database with a
77:22 - small D of this class database with
77:25 - capital D so by this when I import this
77:28 - class in any other file I already have
77:30 - an instance of it and I can directly
77:33 - start using it so
77:36 - I save it and with this our database
77:39 - class is complete okay now we are gonna
77:42 - use only this instance to connect or to
77:45 - run the SQL queries get data from our
77:48 - database and everything okay so in the
77:50 - next video we shall actually start
77:52 - creating the classes and apis thank you
77:55 - so in this video we are going to
77:58 - continue prepare our backend so I have
78:00 - opened the design and kept it on me so
78:03 - that I can use it for future references
78:05 - I have fired up my map server and opened
78:10 - the phpmyadmin so you just need to write
78:12 - localhost and for its band slash and
78:16 - then a PHP my admin okay so then your
78:19 - PHP my admin will be available now let's
78:22 - open our code editor and start contain
78:24 - coding okay
78:27 - so in the previous video we completed
78:30 - our database helper class in this video
78:32 - we are gonna create a model class and by
78:35 - model class
78:37 - I mean the class that will actually
78:40 - store the values of a table that will be
78:43 - in our database so the first model class
78:46 - that we are gonna create is of seller
78:48 - because seller will have the option to
78:52 - add products and then those products
78:55 - will be visible to the customer or the
78:57 - normal users of the app and then they
78:59 - can order it and all the other stuff
79:02 - that happens in an e-commerce
79:04 - application will happen there
79:06 - so let's continue
79:08 - so for that first I need to create the
79:11 - table and before that I need to create
79:13 - the database so I'll create a new
79:15 - database
79:17 - we will call it better buys
79:20 - and that is what we call over here yes
79:23 - so the this name and this name should
79:25 - match only then this database file will
79:28 - be able to connect with this database
79:30 - instance
79:31 - so now this better bias is created now
79:34 - let's create the first table so the
79:37 - first table is gonna be sellers
79:41 - okay that will have the information of
79:43 - the seller
79:44 - okay now the first property will be ID
79:48 - which is gonna be primary
79:51 - okay and it should be Auto incrementing
79:54 - so I am hoping you all are familiar with
79:57 - the basic operations in SQL if not you
79:59 - can go to w3school
80:01 - and have a look at it so w3scope is a
80:06 - very good content for beginners you can
80:09 - use it
80:11 - to get a hang of what we are doing okay
80:13 - so learn MySQL you can go it over here
80:16 - and have a look at all the things okay
80:20 - so now we first have the ID then we will
80:24 - have name then we will have password
80:27 - okay after that image
80:30 - I need two more columns
80:33 - okay
80:35 - so after this I will have address okay
80:38 - because you can see in design we are
80:42 - gonna so that show the address of the
80:45 - seller and then a description about them
80:48 - okay so description also
80:51 - needs to be there okay so now ID will be
80:55 - of type integer name however cannot be
80:58 - integer and it will be a worker of
81:00 - length 250. now you might be hoping why
81:03 - are we using worker and not using worker
81:05 - one or sorry or it was verified to
81:09 - whatever it was but we are not using
81:11 - that because in phpmyadmin we actually
81:14 - don't have that you can see we only have
81:16 - worker over here okay so that is the
81:18 - reason now password will also be a
81:21 - worker of 100
81:23 - okay image will be worker
81:26 - 100
81:27 - address will be worker of 250 okay
81:31 - because address can be long sometimes
81:34 - and then description description might
81:36 - be longer so it will be 500 and now the
81:40 - giving 252 name makes no sense I'll make
81:42 - this 100 as well no name should
81:45 - generally cross be more than 100
81:47 - characters I guess okay so this is done
81:50 - now let's save this
81:53 - and we have our first table over here
81:56 - that is seller so you can see all the
81:59 - data will be listed here and we can see
82:01 - the structure of our table by going in
82:04 - the structure section so you see how
82:06 - useful this phpmyad one is okay so now
82:10 - since we have the table let's go to PHP
82:13 - and create its model class okay so now
82:16 - I'll create another folder over here
82:19 - sorry not inside this
82:22 - but over here
82:24 - and we'll call it models
82:27 - okay and then inside model the first
82:29 - class is gonna be seller dot PHP
82:33 - okay so now let's actually start coding
82:35 - you we know that we start any PHP code
82:38 - by writing this
82:40 - then after that what I want is to
82:44 - include my database file over here so
82:46 - that I can use it to interact with the
82:48 - database okay so for that we will follow
82:51 - some steps we write a DS and we get
82:54 - directory separator over here
82:58 - okay
83:03 - sorry separator
83:05 - we get the directory separator so it
83:07 - will give us a special character that is
83:09 - used to separate between directories
83:11 - then we will get the base directory
83:15 - so we are getting base directory
83:18 - dynamically because over right now we
83:20 - know that it is on localhost 888 but
83:23 - later it will be hosted somewhere else
83:26 - okay so it is always useful to get the
83:28 - base directory dynamically
83:30 - and to do so we write
83:34 - a real path
83:36 - so this is a function in PHP okay which
83:40 - gives us the path then the directory
83:43 - name so their name
83:46 - okay and then
83:49 - we write double underscore I'm sorry
83:53 - double underscore file
83:57 - okay then separated by a directory
84:01 - separator
84:03 - and then uh two dots which means that to
84:07 - go one folder up
84:10 - okay these are basic unix commands
84:15 - Dot directory separator okay so we end
84:18 - it to the directory separator so what it
84:21 - basically does is it gets the location
84:24 - over here then we have a directory
84:27 - separator okay and then after that there
84:30 - are two dots which in Linux or or Unix
84:34 - system altogether means to go one folder
84:37 - up so the folder above model is better
84:39 - wise okay so now we have the location of
84:42 - over here the base directory stores the
84:45 - location of our projects base which is
84:47 - better buys folder okay so I hope you
84:49 - get the gist
84:52 - now after that I'll write require once
84:54 - so require once is again a keyword in
84:57 - PHP it is used to load up PHP file in
85:01 - the file which is which it is being
85:03 - called in okay so over here I'll first
85:06 - access my base dir okay so to get uh so
85:10 - to get to the base base of the project
85:14 - okay then after that we have the folder
85:16 - called includes okay this folder
85:18 - includes then after that we want the
85:21 - directory separator okay because without
85:24 - that we won't be able to enter the
85:26 - includes file now once we add the
85:29 - directory separator we did enter the
85:31 - base file uh includes file I'm sorry I
85:35 - forgot the dollar over here and then
85:38 - inside this we have
85:40 - database dot PHP
85:43 - okay so what this means is that we were
85:47 - at base directory which is better buys
85:49 - okay over here there was already a
85:52 - directory separator that means we were
85:53 - inside better wise then we looked for
85:56 - includes folder which is over here then
85:58 - we again added a directory separator
86:00 - which means we went inside the includes
86:03 - folder and then we called the file
86:05 - database.php so with this in the file
86:08 - seller.php we have database.php okay so
86:12 - now let's actually start creating the
86:14 - class so for that
86:16 - we use the keyword class
86:18 - seller okay so we need to document this
86:21 - as well
86:25 - including
86:30 - database okay so class is seller
86:34 - now after that we are gonna have some
86:36 - variables first the table name okay so
86:39 - let's make the variable private where we
86:41 - store the table name because the table
86:43 - name will not be accessed anywhere
86:45 - outside this class
86:48 - okay so private
86:50 - dollar table
86:52 - and then the table name over here is
86:55 - sellers so
86:57 - sellers
86:58 - okay then we create all the data types
87:01 - that we did public
87:03 - ID then we have name password image
87:07 - address description okay
87:11 - name
87:13 - image
87:15 - okay sorry afternoon we have password
87:20 - password then
87:22 - image
87:24 - then address and description
87:31 - okay then after this the next thing is
87:34 - to create a Constructor okay so in the
87:37 - last video we saw how to create a
87:39 - Constructor
87:40 - we write public
87:43 - function then to underscore
87:45 - construct
87:48 - and we don't need to have anything
87:50 - inside this for now but creating a
87:52 - Constructor is compulsory in PHP 5.8
87:55 - okay now after that we will create a
87:58 - validate params function which we will
88:00 - use to validate the parameters okay that
88:03 - means that this function is going to be
88:05 - used when we store some value in the
88:08 - data types over here to check if the
88:10 - value actually exists or not okay
88:15 - so public function
88:19 - validate params
88:21 - and then it will take a value
88:25 - as a parameter
88:27 - and if it is
88:29 - not empty okay
88:33 - value
88:35 - we return
88:38 - true else will return
88:42 - false okay so this is basically a helper
88:45 - function okay so it one way is to write
88:49 - it like this and easier way would be
88:52 - to Simply write
88:54 - return
88:57 - not empty
89:00 - and the value
89:02 - so what this will do is that if this is
89:05 - true it returns true which we are
89:07 - actually doing over here and if it is
89:08 - false it will return false
89:12 - okay
89:13 - so now let's
89:15 - add some documentation
89:17 - Okay so
89:20 - validating if
89:21 - params
89:23 - exist or not okay now the next function
89:27 - is to actually save data in the database
89:31 - saving
89:33 - new data in database
89:40 - okay so for that we write public
89:43 - function
89:45 - register
89:49 - seller
89:51 - okay the name makes sense
89:54 - then we create a variable of database
89:57 - okay
90:00 - dollar database
90:03 - okay so we have already included
90:05 - database we are creating a variable of
90:07 - that over here
90:09 - okay now we are gonna manage this data
90:14 - data data members okay so I'll write
90:20 - dollar this ID
90:23 - is equal to trim
90:26 - HTML special cars
90:30 - strip tags
90:33 - and dollar this
90:35 - ID
90:37 - okay so I'll explain what this line does
90:39 - so one by one so first we have strip tag
90:43 - so what it basically does is it will
90:45 - remove all the tags that we have in HTML
90:48 - XML or PHP so that means that if this
90:51 - variable has some tags on it this will
90:54 - remove and give the value without tags
90:58 - okay then after that we have HTML
91:00 - special cache so what it does is it
91:03 - converts
91:04 - variables like this uh greater than or
91:08 - less than or
91:10 - slash or something like that to HTML
91:13 - entities okay so that it is able to be
91:17 - saved in the database and then we have
91:19 - trim so what trim does is it removes
91:21 - white spaces and other identified items
91:24 - from both the sides okay so we are gonna
91:27 - do this for this for all the five we
91:30 - don't need ID here because we will
91:33 - create a new database because we'll
91:35 - create a new row and then it will
91:37 - automatically be assigned uh ID because
91:40 - ID is primary and it is auto
91:43 - incrementing okay so this is gonna be
91:46 - name
91:48 - afternoon we have other four parameters
91:55 - so after name we have password
92:03 - after password there's image
92:08 - after image there's address
92:13 - and after that is this description
92:19 - okay so now once we have checked all the
92:22 - values we are going to store it in the
92:24 - database and for that we need to write a
92:27 - SQL query so here we write insert
92:31 - into
92:32 - then dollar this
92:35 - table and then inside of bracket the key
92:38 - names that are Key password
92:41 - image
92:43 - address description
92:48 - then values means we want to assign uh
92:53 - the values that we write inside this
92:55 - parenthesis to these key values okay in
92:58 - the same order okay so now I want to
93:01 - break the stress so now the value should
93:03 - be inside quotes so I'll give that and
93:06 - then I want to break the string and add
93:08 - some PHP code over there okay so what
93:11 - I'm gonna do is I'm gonna add two double
93:14 - quotes
93:15 - okay so what it does is that the first
93:18 - quote ends this starting code and the
93:21 - second quote starts this ending code and
93:24 - in between this I can add my PHP code
93:28 - okay so over here I am gonna write
93:31 - database
93:35 - Escape value
93:38 - I'm sorry caps lock was on
93:44 - Escape value
93:48 - dollar this
93:51 - name
93:52 - okay so in the previous video you have
93:55 - seen that we created a helper class
93:58 - called Escape value to check if the
94:01 - string is
94:02 - means the string is Justified to be
94:06 - stored in the database or not okay then
94:08 - we give a comma copy this for four times
94:11 - and then simply change the value over
94:13 - here
94:17 - image
94:19 - address
94:22 - and the description now since this is
94:26 - the last one we don't need a comma over
94:28 - here
94:28 - okay so what this is the SQL query and
94:32 - what it basically does is it inserts a
94:35 - row into this table while assigning
94:39 - these key values
94:41 - these
94:43 - means that these Keys these values so I
94:47 - hope you understand this is not so tough
94:49 - but still if you are having any problem
94:51 - you can look into W3 schools okay now we
94:55 - have the SQL query we need to now run it
94:58 - okay so now since running it is again
95:01 - related to database we will need
95:03 - database over here okay so first let's
95:06 - create a variable to store it
95:09 - seller
95:11 - saved okay so now we write a database
95:16 - query
95:17 - okay so we had a function called
95:21 - query over here okay that takes an SQL
95:24 - and executes it okay so in this query we
95:27 - are gonna give this SQL
95:30 - okay now
95:32 - if it is if
95:34 - [Music]
95:35 - the
95:38 - I'm sorry if the seller is saved we
95:42 - return
95:44 - database
95:47 - last
95:49 - insert
95:51 - ID okay so last insert ID basically
95:54 - means that the ID given to the last
95:57 - column that was inserted and since this
95:59 - is the last column that was inserted it
96:01 - will return the ID assigned to that
96:04 - column automatically by SQL because it
96:06 - is Auto in incrementing okay so you will
96:09 - understand later why I am uh
96:12 - taking this so
96:15 - let's let's move on for now
96:18 - else
96:20 - false okay so with this this function is
96:24 - done in this function what we are
96:26 - basically doing is we are creating a
96:29 - global instance of database we are
96:31 - refining all our
96:34 - data members then we are creating an SQL
96:37 - query that will I am sorry
96:40 - I am we are creating an SQL query that
96:43 - will store all these values okay and
96:45 - then we are finally executing it
96:47 - checking if it has some error if it has
96:49 - error we return false okay there is a
96:52 - return statement and if it has no error
96:54 - then we return the last insert ID
96:58 - okay so I hope you understand
97:02 - so with this we have made the model
97:07 - class now let's create a variable of it
97:09 - or uh more appropriate term would be an
97:13 - object like we created over here for our
97:16 - database class okay so I'm gonna write
97:20 - seller
97:22 - is equal to new seller
97:25 - okay so now once this is created in the
97:29 - next video we shall actually create an
97:32 - API means we will use this seller class
97:35 - to create an API and save the data in
97:38 - our database okay because right now we
97:40 - just have a function we don't know how
97:42 - to call it and
97:43 - ah all the other stuffs related to that
97:46 - okay so thank you so in this video we
97:50 - are gonna make the register APF that
97:52 - means that we will make an API for a
97:55 - seller to register on the app okay so
97:58 - let's get started I'll create a new
98:01 - folder called API okay then inside this
98:04 - I'll create another folder called seller
98:07 - okay and then inside this there will be
98:09 - a new file called
98:11 - register dot PHP okay
98:15 - so now let's start writing our API so
98:19 - for that you know to start we first
98:21 - write PHP any PHP file starts with this
98:26 - okay then the next thing that we have is
98:29 - a header okay so first let me write all
98:32 - then I'll explain each one of them one
98:35 - by one okay so first one is
98:40 - Access Control
98:44 - sorry
98:46 - allow
98:47 - origin and this is type star
98:53 - okay then the next one is
98:56 - content type
99:01 - and this is gonna be
99:04 - application Dash Json
99:10 - okay then the next
99:13 - thing is
99:16 - access
99:18 - control
99:21 - allow
99:23 - method
99:25 - and this is gonna be post
99:31 - and the last one is Access Control allow
99:36 - headers
99:38 - and this is gonna be origin
99:44 - content
99:45 - type
99:47 - and accept
99:50 - okay so let's go through each one of
99:52 - them one by one first there is this
99:54 - keyword header so what is the function
99:57 - of headers so it controls what response
100:00 - is sent to the client header controls
100:03 - what will be the response sent to the
100:06 - client okay then inside this the first
100:09 - header is Access Control allow origin
100:12 - and that is the star that means to check
100:15 - for the origin which all Origins are
100:17 - allowed okay so by origin I mean the
100:20 - starting part of the domain like for now
100:23 - we have localhost colon and for it so
100:26 - that is our origin okay and after that
100:28 - whatever we add those are the child
100:31 - parts of the domain okay so over here by
100:34 - writing star it means that we allow all
100:36 - all the origins to send requests to this
100:40 - file okay so over here if I write
100:43 - localhost and then for it then only this
100:46 - domain can send request to me okay and
100:49 - any other domain means not me but but to
100:54 - this file and any other domain then
100:56 - localhost colon for its will not be able
100:59 - to send request to this file okay
101:03 - now after that there is content type and
101:06 - that is application Json so it means
101:09 - that the
101:11 - content will be of the a format Json
101:14 - okay so the response will be in the Json
101:17 - format okay now after that we have
101:19 - access control allow method post so it
101:23 - decides so over here it is defined which
101:26 - type of request will it allow there are
101:28 - many types of requests but there are
101:31 - four majorly used that is get post
101:34 - delete and put okay so over here we are
101:38 - gonna use post we will see all the other
101:41 - types of requests and we will see and we
101:44 - will also learn when and how they are
101:46 - used okay and then we have access
101:49 - control allow headers and that is origin
101:52 - content type accept so you don't need to
101:54 - worry about this line This is used to
101:59 - handle
102:01 - pre-flight
102:03 - request
102:05 - okay so this is used to handle
102:08 - pre-flight request and by pre-flight
102:10 - request I mean that there this is the
102:12 - small request sent before the actual
102:15 - request okay so in an API first there is
102:18 - a small request sent that is the
102:20 - pre-flight request and then its response
102:24 - is handled by this header and after that
102:28 - the actual request comes
102:31 - okay so I hope you understand the use of
102:33 - all the all the headers now let's
102:36 - proceed
102:38 - so now we need to include this seller
102:41 - class in our
102:43 - register.php so we'll write include once
102:46 - okay so now over here you might have
102:50 - seen I had written require once now over
102:52 - here it is include once so they have no
102:56 - difference absolutely no difference
102:58 - except when it comes about error
103:01 - handling okay so you can see a search on
103:03 - Google what is the difference between
103:05 - include and require in PHP you will get
103:08 - the same answer that there is no
103:10 - difference there is only some difference
103:12 - when there is an error when error occurs
103:16 - because of this include or require okay
103:19 - so now include once
103:21 - this folder that is the
103:24 - seller then again API folder and I'm out
103:28 - of it so now I am in better buys folder
103:30 - and from there I'll go to models folder
103:35 - and from there too seller dot PHP now
103:39 - this needs to be be inside
103:43 - quotes
103:45 - okay so now you might have seen that
103:48 - over here I was using a directory
103:50 - separator and over here I am using
103:52 - uh this referencing method so we can use
103:56 - both but it is suggested you always
103:58 - stick to this method that is dynamically
104:01 - creating the
104:03 - directory and stuff okay
104:06 - so after this now uh over here we have
104:10 - seen that only post method is allowed
104:13 - for this API okay so now let's do a
104:16 - check that if the method is post or not
104:18 - okay so for that I'll write if
104:22 - dollar server so this is a reserved
104:26 - array that we have in PHP its store or
104:30 - all the details about the server and
104:32 - over here only we have a
104:34 - data type data member called request
104:39 - method
104:43 - okay so if the request method is of
104:47 - type post
104:49 - and then it is all right and if it is
104:52 - not then we shall we should send an
104:55 - error so over here also you can notice
104:57 - it is similar to JavaScript we can use
104:59 - three equal to server here now let's
105:02 - send the error first and then we can add
105:05 - the stuff over here so for handling the
105:08 - error we write die
105:11 - header
105:14 - http
105:17 - Dash 1.1
105:21 - 405
105:24 - request method
105:27 - not allowed
105:29 - so what this means is that we add this
105:33 - header that is this will be the response
105:35 - this is the Response Code which is 5405
105:38 - which basically means request method is
105:40 - not allowed but we added a string as
105:43 - well and then we have this die over here
105:46 - so die basically stops the execution of
105:49 - the code when the PHP compiler executes
105:53 - die it doesn't go to the next line it
105:55 - ends the program then and there okay so
105:58 - this will be the case when the request
106:00 - is not of the type post but suppose if
106:03 - it is of type post then we shall take
106:06 - all the data and then store it to our
106:08 - database so let's do that
106:11 - okay so firstly over here in
106:15 - seller you can see that we need five
106:18 - things name password image
106:21 - address and description okay so there is
106:24 - a bug
106:28 - and here as well I don't know how
106:33 - address description address description
106:38 - address description okay
106:42 - so we need the name password image
106:45 - address and description okay so let's
106:48 - check for that so we write if
106:52 - seller dollar seller so this seller is
106:56 - the object that we created over here
107:03 - okay so this is the object and then we
107:06 - call the method
107:09 - validate
107:14 - params
107:15 - okay which is nothing but
107:18 - this method over here validate
107:21 - okay so over here also the spelling is
107:23 - wrong
107:27 - validate params and then over here we
107:31 - write
107:33 - post so post is another reserved array
107:37 - that PHP has and it has all the data
107:39 - sent via the post request okay so post
107:44 - and then we write the keyword that is
107:47 - name so if the post method has name okay
107:53 - then we need to assign it to the
107:56 - variable that we have in seller class
107:58 - that is name okay so we will do this by
108:02 - writing seller
108:05 - name
108:08 - dollar
108:09 - post
108:12 - name
108:14 - okay and if name is not there since name
108:17 - is unnecessary
108:19 - option means it is required for the API
108:23 - to have the value for name so if it is
108:26 - not present we will return an error so
108:30 - for that we write echo echo is used for
108:32 - printing anything in python or in a PHP
108:36 - not python I am extremely sorry Echo
108:39 - then we have Json and code
108:42 - okay so this is used to encode and add
108:44 - it to just Json that being said it takes
108:47 - an array so for that we create a new
108:50 - array we create an array by using the
108:52 - keyword array okay and then we add key
108:54 - value key uh key value pairs to it okay
108:58 - so I'm gonna add
109:00 - success
109:03 - and then we don't give colons over here
109:05 - we use the this arrow that is equal to
109:08 - and angle bracket
109:11 - okay and then we I'll give a message
109:18 - name is
109:22 - required
109:24 - okay and then die so that it stops
109:27 - executing here only okay so what this is
109:30 - gonna do is if the if the request has a
109:34 - key value pair of name then it is Gonna
109:37 - Save that value in our seller object
109:40 - otherwise it is gonna send an error okay
109:45 - now the same is gonna be done for
109:47 - password
109:52 - okay so over here it is password
109:58 - password
110:01 - with a capital p
110:03 - okay
110:06 - so name password
110:12 - now we have name we have password
110:14 - image address and description so I think
110:18 - we also need email or mobile number or
110:22 - we can have both okay so that it is
110:24 - easier for
110:26 - uh the seller to login okay because you
110:30 - can't basically login just with password
110:32 - we can't create that type of a system
110:35 - that is no that can be done but that is
110:38 - not
110:39 - efficient okay so I'll add another
110:41 - property that is email and that I'll add
110:44 - after name
110:46 - okay
110:49 - and that is gonna be email
110:51 - it is gonna be of type worker 100
110:56 - save
110:58 - okay so now if it is added here so we
111:01 - need to add it here as well after name
111:03 - we are gonna have public
111:06 - email
111:10 - okay now after name
111:15 - it is gonna be
111:17 - email after name here it will be email
111:22 - after name here it will be
111:26 - email so
111:28 - it is over here
111:30 - here
111:31 - here
111:33 - and in the data type Okay so email data
111:36 - email data member is added
111:41 - okay so now let's uh
111:44 - take that
111:46 - from the post request so over here it is
111:49 - going to be email
111:53 - with a capital
111:55 - e so email is required okay so now name
112:00 - is name is required email is required
112:02 - password is required next we have a
112:05 - image okay so to so image is a file so
112:09 - the code is little bit different for it
112:12 - okay so it goes like first we create a
112:15 - folder so I'm gonna call it seller
112:18 - images folder okay and that is gonna be
112:24 - assets I'm gonna create a new folder
112:27 - called assets
112:28 - and there will be another folder uh
112:31 - folder called seller images
112:35 - okay so let's create a folder
112:40 - not over here but over here
112:43 - okay
112:47 - bring it out
112:49 - move
112:51 - so now inside assets I am gonna have a
112:54 - new folder called
112:56 - seller
112:58 - images okay
113:00 - so now this asset is gonna contain
113:02 - images which I don't want to add in my
113:05 - version control so I'm gonna create a
113:07 - new file and call it dot get
113:11 - ignore okay so this is a specific type
113:14 - of file that our Version Control that is
113:16 - get understand over here we write all
113:19 - the files that we want to ignore while
113:21 - adding the project to Version Control so
113:24 - over here in that case it is assets
113:27 - so assets with our Dash means that this
113:30 - folder including all the things that are
113:31 - inside this will not be added in Version
113:34 - Control and you can see that its color
113:36 - has become a little bit dim that is
113:38 - because it is added in good techno git
113:40 - ignore and it is not a part of the
113:42 - Version Control okay so I hope you get
113:45 - my point so now we have created the
113:48 - folder
113:49 - now means we have decided with the name
113:51 - not created the folder now we check if
113:54 - the folder exists or not so
113:57 - is okay so that means it checks if it is
114:02 - a directory or not
114:05 - seller images folder so if it is not
114:08 - what we are going to do is we are gonna
114:09 - make the directory
114:13 - seller images folder
114:21 - okay now we are gonna check that our
114:24 - post request has that file or not so for
114:27 - that another if and over here we write
114:29 - is set means it there is a set that
114:34 - exists inside the array that we give
114:37 - inside this parentheses okay so now
114:39 - there is another array reserved by PHP
114:42 - that stores all the files sent in a
114:45 - request so that is called files okay so
114:48 - we are gonna check if it has image okay
114:51 - so what it basically does is it checks
114:53 - if this file array has a key named image
114:57 - or not
114:58 - okay
114:59 - so if it doesn't have image we don't do
115:03 - anything because image is not compulsory
115:05 - okay but if it does have then we need to
115:08 - save it so let's write code for saving
115:10 - the image okay so let's get the file
115:13 - name
115:16 - okay and that is dollar files
115:19 - image
115:22 - name
115:24 - then we get the files temporary
115:27 - address okay so we write file
115:32 - DMP
115:34 - and that is dollar files
115:39 - image
115:43 - temp name so this will send the entire
115:45 - address along with the name of the file
115:53 - let's see
116:07 - okay so then we get the extension of
116:10 - this file because we are not sure if it
116:13 - is a PNG or a JPEG so for that we write
116:17 - extension
116:19 - okay and that is end
116:23 - of explode
116:27 - Dot
116:29 - comma dollar file name
116:32 - so what it does is it explodes file name
116:35 - based on this dot that means it will
116:38 - split the name based on this Dot and
116:41 - return an array okay so if it splits uh
116:45 - based on the dot it is understandable
116:47 - that the last value is gonna be the
116:49 - extension and that is what we get if we
116:52 - use end okay so this end function
116:54 - Returns the last value of any array
116:57 - inside it so by that we get the
117:01 - extension over here now let's create the
117:03 - new file name
117:07 - so the new file name is gonna be seller
117:11 - email okay because emails are unique we
117:14 - need that
117:16 - okay sellers email then we do string
117:19 - concatenation
117:24 - profile
117:28 - and then we add the extension
117:35 - okay now we have the new file name now
117:37 - let's finally
117:39 - save it so for that we have a function
117:42 - in
117:42 - PHP called move upload file and then
117:46 - over here we use file TMP
117:50 - comma
117:52 - seller images folder
117:56 - dot means we go inside that folder by
117:59 - this Dash and then we use the new file
118:03 - name
118:04 - okay so once this is done
118:07 - we'll add the address to the data type
118:10 - so data member so that we can save it in
118:12 - our database and using the address we
118:15 - can display it in our apps so seller
118:20 - image is gonna be
118:23 - seller
118:24 - images
118:29 - new file name
118:32 - okay so this is done our image will be
118:36 - stored now after image
118:40 - we have address and description so we
118:42 - need to take that as well so I'll again
118:45 - copy this
118:49 - paste it
118:52 - and then the first one is address
118:57 - so address address
119:01 - with a capital a
119:03 - is required
119:06 - okay description is also required
119:15 - and description with a capital D
119:18 - okay so if there is an error in this API
119:21 - these messages will be displayed
119:23 - accordingly so we need to keep in mind
119:26 - what is the message and the message has
119:28 - no grammatical errors okay so now at
119:32 - this point if the code is running that
119:34 - means it has got all the
119:37 - data members value now let's finally
119:40 - save it so for that we write if
119:44 - dollar ID that will be the last insert
119:47 - ID
119:48 - okay last insert ID that we are saying
119:50 - that we are returning here
119:53 - if this method is successfully executed
119:55 - so for that we write
120:00 - seller
120:02 - register seller okay so if this method
120:05 - is successfully executed it returns an
120:07 - ID okay that will be anything if it not
120:10 - then it returns false and then this if
120:13 - condition will not be executed
120:17 - so if it is executed then we give the
120:21 - response as
120:22 - Echo
120:24 - okay we don't need to write all this I
120:27 - can simply copy it
120:36 - okay the response is gonna be one okay
120:39 - we are uh
120:41 - keeping away our means assembling a
120:44 - format that of success means zero there
120:46 - is an error and we should display this
120:48 - message in our phone and if the success
120:51 - is one that means the API has executed
120:55 - successfully and if you want to display
120:56 - this message display or do the stuff
121:00 - after that okay
121:03 - so that is over here it is gonna be
121:07 - seller
121:09 - registered
121:13 - okay and if not I am sorry
121:18 - and if not then first I need to
121:23 - set the Response Code HTTP Response Code
121:26 - means the code that it is gonna send in
121:29 - response that is 500 okay
121:38 - now over here it is again gonna be zero
121:41 - and it will be
121:43 - internal
121:46 - server error okay which is basically
121:50 - what 500 stands for
121:52 - okay so with this our API is complete
121:56 - so in this video we are gonna continue
121:58 - with our PHP backend okay so I have the
122:02 - design already open
122:04 - okay I'll simplify up my map server so
122:08 - once it has started we'll open our code
122:11 - editor and continue with the coding
122:14 - okay so I already have better buys open
122:16 - over here
122:18 - now in the previous video we have
122:21 - completed the code for our register API
122:25 - now it's time to run it okay so for
122:29 - running it we are gonna use a
122:32 - application called Postman okay so if
122:35 - you don't have it you can simply go to
122:38 - this link postman.com and download it
122:41 - and even if you don't want to download
122:43 - it that's all right because you can use
122:45 - it in the browser itself okay but I have
122:49 - it downloaded over here with me so I'll
122:52 - open it now I'll create a new request
122:55 - okay so over here this type will be post
122:58 - because you can see in the code editor
123:01 - we are allowing only post requests
123:05 - okay so I've changed it to post
123:08 - now I need to write the URL so first it
123:11 - is gonna be
123:13 - localhost
123:15 - colon
123:17 - tilt it because as I have already told
123:21 - map runs on localhost and for it okay
123:25 - then we write the name of the folder
123:27 - that is better
123:29 - buys okay and then after better buys we
123:33 - have API then seller and then
123:36 - register.php so we write API
123:40 - then seller then
123:43 - register dot PHP
123:46 - okay so now if I send a request
123:52 - okay so it is giving me internal server
123:55 - error so that means there is some error
123:57 - in the code
123:57 - Okay so
124:01 - I don't think it is over here let's
124:04 - check our model class
124:09 - so I don't think it is here either now
124:12 - let's check our database class okay so I
124:15 - can say it over here only it I have a
124:18 - typing error so it will be localhost
124:21 - okay then it should be public function
124:24 - Constructor not just public Constructor
124:27 - I am extremely sorry
124:28 - okay and after that this shouldn't be a
124:31 - comma but a DOT because string
124:34 - concatenation in PHP happens with a DOT
124:37 - same over here
124:39 - okay so now if I try to format it
124:43 - yes it has formatted as PHP should be
124:47 - Okay so
124:49 - this is fine now let's save this
124:52 - okay then again we go to our Postman
124:55 - send a request
124:58 - and then it is saying name is required
125:01 - Okay so
125:03 - that is exactly as we wanted it to be
125:06 - okay so first it checked if the server
125:08 - method is post or not which is true so
125:11 - we can change it to get and see what is
125:14 - there that we get so we get four zero
125:17 - five request method not allowed which is
125:19 - exactly the same as we write over here
125:22 - 405 request method not allowed
125:25 - so I'll change it back to post
125:28 - okay and then it is telling name is
125:31 - required so this error occurs when name
125:35 - is not there okay so
125:37 - let's give it a name so in a post
125:39 - request we don't uh give values in
125:42 - params button body and inform data okay
125:46 - so over here
125:48 - I'll give the key as a name okay now
125:51 - keep in mind this
125:54 - spelling and this spelling should agree
125:56 - exactly the same okay so the name of
125:59 - seller is gonna be
126:01 - rishabh Kumar that is my name
126:04 - okay then after that I also need to give
126:06 - an email
126:08 - so email and email is gonna be
126:12 - rishabh at the rate
126:14 - gmail.com okay
126:17 - then after that password
126:22 - so I'll give a simple password for now
126:26 - although it is not suggested to use such
126:29 - type of passwords anywhere okay then
126:31 - after that I need to give a seller image
126:34 - and even if I don't it should work fine
126:36 - okay so I'll skip this for the moment
126:40 - okay so for that I'll
126:43 - add the name and then unselect this so
126:45 - that later I can add a image but if not
126:49 - also then it is not an issue okay then
126:53 - after that we need to give an address so
126:56 - the address is
126:58 - so the address is gonna be the same as I
127:01 - have written in Sigma
127:04 - because that is our legit address
127:08 - so I'm gonna cooperate
127:11 - go to postman and then paste it
127:16 - okay then after that we have
127:19 - I guess we have description okay so we
127:22 - have description
127:26 - we write the description
127:28 - and for description again
127:31 - we'll use lorem sum
127:36 - okay now after description it should
127:39 - save okay so let's see if that is the
127:42 - case or not
127:44 - so I'll click on send and it is again
127:48 - giving me an internal server error
127:50 - okay so let's see what is the error now
128:01 - okay so the error is
128:04 - this is the error message that means
128:07 - this function is causing errors so let's
128:09 - get inside the seller okay and then
128:12 - inside seller this is server because I
128:15 - am using a function last insert ID and
128:17 - it is not in my database class so it is
128:20 - giving an error okay so for now I'll
128:22 - just make it true
128:25 - okay
128:27 - just true
128:28 - later we will add the last insert ID
128:32 - again okay and maybe even not if that is
128:35 - not required in some cases it is so it
128:38 - is suggested to always use that okay so
128:40 - now it is done now let's send
128:44 - and it is still giving an error let's
128:46 - see what is it
128:49 - okay so let's go to database
128:52 - and and we need to add a password over
128:55 - here I am extremely sorry it was not
128:57 - needed in Sam so I forgot that in map it
129:01 - is required you can see over here uh the
129:04 - password should be root okay so once
129:07 - this is done
129:08 - I think now it should work okay so I'll
129:11 - open it again so I'll open Postman
129:15 - yeah and click on send
129:17 - and it gives us a message seller is
129:20 - registered okay and now if we go to our
129:23 - database
129:25 - and inside sellers we can see our seller
129:28 - the seller name is rishab Kumar email
129:30 - password
129:31 - address and description
129:34 - okay so now you can see that the
129:37 - password is quality which is visible to
129:41 - everyone who has access to your database
129:43 - and can read the password then uh login
129:46 - with login as this user and then
129:49 - change things okay so this is not a
129:52 - suitable way to store the data means in
129:56 - which the password is human readable
129:58 - okay so to avoid that we are gonna hash
130:01 - it and to Hash it we are gonna use Big
130:04 - Crypt okay so Big Crypt is a file that
130:07 - means decrypt is md5 hashing okay you
130:11 - can read more about it by simply typing
130:13 - md5 or backcrypt in Google and get to
130:15 - know about it it is a type of hashing
130:17 - which will convert a human readable
130:20 - sentence or keys to something and means
130:23 - a lot of number so that human cannot
130:26 - understand that and decoding it back to
130:30 - the human readable
130:32 - human readable string will take lots and
130:35 - lots of time okay so for so let's
130:38 - implement this in our project so what
130:40 - I'm gonna do is open this
130:43 - be crypto.php okay copy the entire code
130:51 - and then inside our includes folder I am
130:55 - gonna create a new file called
130:58 - baycrypt dot PHP okay and inside this
131:02 - I'm gonna paste it
131:04 - okay then save it close it and now we go
131:08 - to our seller.php along with the
131:11 - database we include the bcrypt
131:16 - okay over here the name changes to
131:19 - decrypt
131:25 - now let's see how to Hash it okay
131:29 - so over here you can see we can hash
131:32 - password simply by writing bcrypt dot
131:35 - hash password okay so I'll copy it and
131:39 - where we are storing the password in our
131:41 - database which is
131:44 - over here I am gonna write
131:50 - over here I'm gonna paste bcrypt dot
131:53 - hash password and this
131:56 - password
131:58 - okay so now let's save this
132:00 - and let's try to send a request again
132:03 - okay so now if I send it
132:07 - okay it is giving me an error
132:10 - so I think this is because of okay so
132:14 - this was the error I'm sorry
132:17 - now let's see
132:23 - so the seller is registered now if we go
132:27 - and open our database okay we need to
132:30 - refresh it the password here is
132:33 - something like this this is the hash the
132:35 - version of quality only because you can
132:38 - see in our request the password is still
132:39 - quality but it is in database stored in
132:42 - such a manner that normal human being
132:45 - cannot understand what this actually
132:47 - means okay so in this way your data
132:50 - becomes more becomes more secure okay
132:53 - and that is a plus point
132:56 - okay so with this we created a API to
133:00 - register the users okay but there is
133:02 - still one flow and the flow is that
133:05 - there are user multiple users with the
133:09 - same email which is not the ideal case
133:11 - okay and the next flow is that we have
133:15 - this extension dot PHP which we don't
133:18 - want okay we simply want to write the
133:20 - seller register and that's it not the
133:23 - dot PHP okay so we will see how to fix
133:26 - both of these in the next video thank
133:29 - you
133:30 - so in this video we are gonna fix the
133:33 - bugs that we discussed in the previous
133:34 - video so the first one that we are going
133:37 - to tackle is check if the email is
133:39 - unique or not so for that we'll go in
133:41 - the seller model class okay over here
133:44 - I'll create a new function okay I can
133:46 - remove this
133:52 - now I'll create a new function
133:55 - to check if email is
134:00 - unique
134:01 - or not okay so
134:04 - public
134:06 - function
134:09 - check unique
134:12 - email
134:14 - okay then there will be Global dollar
134:17 - database
134:19 - okay then we are we need to check the
134:22 - email
134:24 - so for that we need this okay we need to
134:28 - trim our email means make the email data
134:31 - ready for interacting with database okay
134:34 - I have already explained the meaning of
134:37 - these three functions in one of the
134:39 - earlier videos okay so now let's write
134:42 - our SQL code the SQL code is gonna
134:45 - select all the rows which have email as
134:49 - the email entered in the API so for that
134:52 - I will write select
134:55 - ID
134:57 - from Dollar this
135:00 - table
135:01 - where
135:03 - email is equal to then single quotes
135:06 - double quotes then two Dot
135:10 - and then simply this email
135:15 - okay I'll paste it over here
135:18 - now let's run this SQL command so for
135:20 - that
135:22 - result is equal to database
135:27 - query
135:31 - SQL okay so now we will get the result
135:34 - now let's get the row so
135:38 - so let's get the values that this result
135:41 - has okay so for that
135:44 - I'll write
135:46 - user ID
135:49 - okay
135:52 - so means the because since we are
135:55 - extracting only the ID I am naming the
135:57 - variable user ID that makes the most
135:59 - sense then database
136:02 - and then inside our database class we
136:04 - had a function to get only one row uh
136:07 - getting only one row and that is called
136:09 - Fetch row okay so we are gonna use that
136:13 - database fetch row and inside this we
136:16 - will give our result okay so now if
136:20 - there is any uh other idea with the
136:24 - email that is entered by the user then
136:27 - that's that user's user ID should be
136:29 - stored in this user ID so we just need
136:31 - to check if this is empty or not if this
136:33 - is empty that means that this this email
136:36 - doesn't exist in our database that means
136:38 - it is unique and if it is not empty that
136:41 - means that this email already exists in
136:44 - our database and hence it is not unique
136:48 - so for that I'll write if
136:51 - empty
136:54 - dollar user ID
136:57 - we return true
136:59 - else we return
137:01 - false okay and I we have already
137:04 - discussed an easier method to do this
137:07 - we simply write
137:09 - return
137:10 - this so if this is empty that means it
137:13 - is true so it will return true if it is
137:16 - not empty it will return false it is
137:18 - understandable
137:20 - okay so this is done now let's clear our
137:23 - database and then try running the API
137:25 - again
137:27 - okay so this is the database I'll check
137:29 - all
137:30 - delete
137:32 - yes
137:34 - so now my database is empty my table is
137:37 - empty
137:38 - okay now let's finally call the API okay
137:41 - so the first time it should work
137:46 - okay and it did so we got the result as
137:51 - seller registered okay and then in our
137:54 - database we got one
137:56 - okay so we made a mistake over here we
137:59 - created the function but we didn't call
138:01 - it so even though we have the function
138:05 - it will still work means it will still
138:08 - not work that means there might be users
138:12 - with uh might there might be more than
138:15 - one users with the same email okay which
138:18 - is the case right now so I'm sorry for
138:21 - that we have created the function we
138:23 - need to call it now okay so for that
138:26 - let's go in the code in our API
138:29 - okay where we are saving the data
138:32 - so before saving I want to check that if
138:34 - it is unique or not if the email is
138:37 - unique or not so for that I'll simply
138:39 - write Tiff
138:40 - seller and then the function name and
138:43 - the function name is check unique email
138:45 - if the
138:47 - if this returns true okay then we
138:51 - proceed with saving the data
138:55 - okay
138:57 - else we return an error Okay so
139:01 - the error this is gonna be this
139:05 - this is going to be four zero one that
139:07 - means it is unauthorized and the message
139:10 - is gonna be
139:11 - email already
139:13 - exists
139:16 - okay so let's save this
139:18 - now I'll again clear my database
139:23 - okay so it is already cleared now it
139:26 - should work the first time
139:29 - okay
139:31 - so it did work we have seller registered
139:33 - now if I call the API again then it
139:36 - shouldn't work okay and it didn't it is
139:38 - saying success zero and the message is
139:40 - email already exists so now with this we
139:43 - have prevented our database from having
139:48 - uh use a more multiple users with a
139:51 - single email ID okay
139:53 - so this error is fixed now let's
139:56 - Commit This and move forward to the next
139:59 - error
140:00 - okay so for that I will simply write
140:04 - get status that checks what all changes
140:06 - have been done then get add then a DOT
140:09 - that means add all the changes to the
140:11 - staging area then if again we write get
140:14 - status it is in green that means they
140:16 - all have been added to staging area then
140:18 - we commit the changes so get commit Dash
140:21 - m stands for message and then with a
140:23 - course we write the message the message
140:25 - is gonna be checking
140:27 - email is
140:30 - unique
140:33 - or not okay and then with this it is
140:36 - committed now I'll push it to my GitHub
140:38 - and the link will be in the description
140:40 - so get push
140:44 - and it is pushed okay so the second
140:47 - error was that we don't want this dot
140:50 - PHP over here in our API okay so for
140:53 - that we are gonna create a new file in
140:55 - our root folder
140:57 - okay and that is gonna be dot h t a c c
141:01 - e x s s h t access okay I will bring it
141:05 - to the root move
141:08 - so this is a special type of file that
141:11 - PHP understands and over here we write
141:13 - some
141:14 - different kind of kind of code you we
141:16 - don't need to understand that okay means
141:19 - means it is better if you understand
141:21 - that if you don't understand then there
141:23 - is not an issue there are there are
141:24 - basically four lines we can remember it
141:26 - okay so we write so let's start we write
141:30 - rewrite
141:32 - engine
141:34 - on
141:36 - then rewrite
141:40 - cond as in condition rewrite condition
141:42 - and that is gonna be a percentage sign
141:44 - curly braces
141:48 - request
141:50 - file name
141:52 - okay file name
141:55 - then we'll leave our space exclamation
141:57 - mark Dash D
142:00 - then the right condition again a
142:05 - percentage sign request file name
142:08 - okay then after that we give a backslash
142:12 - dot PHP
142:14 - then space Dash f
142:16 - and then after that we write rewrite
142:21 - okay I'm sorry it is Dash f
142:28 - now after that we write
142:30 - rewrite
142:32 - and then rule
142:35 - then we give a
142:38 - exponent
142:39 - open parenthesis inside this we write
142:42 - dot abstract then we come out of
142:45 - parenthesis give a dollar to leave a
142:47 - space
142:48 - dollar one dot PHP okay so this is done
142:52 - now let's save this
142:54 - okay
142:55 - so now if I remove this dot PHP then
142:59 - also this API should work okay
143:02 - so and it does okay now if we didn't had
143:05 - this file and I removed dot PHP then it
143:08 - will not work okay but since we have
143:11 - this h t axis even if we give the dot
143:15 - PHP extension or we don't give it this
143:17 - will work
143:18 - okay so we have fixed both layers
143:22 - this was for the video thank you
143:26 - so in this video we are gonna continue
143:28 - preparing our back end okay so let's
143:31 - start I already have everything fired up
143:33 - okay so the map server is running I have
143:36 - figma open here okay I also have the
143:39 - database open with me then
143:42 - uh Postman to run our apis okay and the
143:46 - code Editor to actually code
143:48 - okay so let's get started so the next
143:52 - thing that we are gonna do is we are
143:54 - gonna
143:55 - uh make an API for the seller to log in
143:59 - okay so a seller can register seller
144:01 - will also need to login okay so suppose
144:04 - if the seller has an account on one
144:07 - device and he installs the same app on
144:09 - another device okay so over there he is
144:12 - not gonna create another account but
144:13 - he's gonna log into the same account so
144:15 - let's write code for that
144:19 - okay so it is login function over here
144:23 - foreign
144:28 - we'll create a instance of our database
144:35 - okay then for login we will take the
144:38 - email and password
144:40 - okay so or do we have mobile number
144:43 - okay so since mobile number is not there
144:45 - we'll stick with email only okay if you
144:48 - want you can change email to mobile
144:50 - number because some vendors might not
144:53 - have an email but all of them will have
144:55 - a
144:56 - uh what do I say the mobile number okay
144:59 - so for logging in we will use email and
145:02 - password so I'll copy it from here and
145:05 - paste it over here so that in this
145:07 - function as well we prepare these
145:11 - values to be
145:13 - uh added in the query okay in the SQL
145:16 - query so let's check that okay so I'll
145:19 - write SQL
145:23 - select
145:25 - star from
145:27 - this
145:30 - database sorry this table I'm sorry uh
145:34 - where
145:35 - email
145:37 - is equal to
145:42 - well this email
145:45 - so I will copy it from here
145:47 - paste it over here okay so now we have
145:51 - the you uh seller whose email
145:53 - corresponds with the email entered by
145:56 - the seller in our front end okay so now
145:59 - after that once we have the details of
146:01 - the seller we are gonna check if the
146:03 - password matches or not okay so first
146:06 - let's run this so for that we write
146:09 - result this is a database
146:13 - query because we have seen to run the
146:16 - query we will call this query function
146:20 - that we have created in our database
146:22 - class so once we get the result let's
146:24 - fetch the row so let's call it seller
146:28 - and this is database
146:33 - okay so what was the function name
146:36 - okay so it is fetch row
146:39 - so we will fetch row
146:42 - and over here we need to give the result
146:45 - okay so that this function fetches the
146:48 - first row from uh this this result
146:51 - variable okay so now since we have the
146:55 - result we will check if the seller
146:57 - exists or not okay so for that there is
147:00 - another method in PHP which is called
147:03 - empty it checks if uh if the if the
147:07 - variable inside this parenthesis is
147:09 - empty or not okay so over here this will
147:12 - be seller so if it is empty that means
147:15 - the seller doesn't exist so we can
147:18 - simply return a string that says seller
147:25 - um
147:27 - doesn't
147:30 - exist okay
147:33 - else we have a seller so then we will
147:36 - check the password okay so for that
147:39 - again I'll have to open the
147:42 - uh decrypt
147:46 - documentation so
147:52 - I'll simply go to the GitHub link from
147:55 - where we have copied the code okay so
147:57 - over here to check the password we have
148:00 - decrypt check password and it returns
148:02 - true or false so this is what we are
148:05 - gonna do we are gonna write if
148:08 - password
148:13 - decrypt check password and then over
148:16 - here will be our password that is stored
148:19 - in database so that is inside a seller
148:22 - and over here we are calling it password
148:25 - so the key value is password and we
148:30 - check it with the value entered by the
148:34 - a user so that is this
148:38 - okay so now if it is true that this
148:40 - means that password matches
148:43 - else
148:46 - we simply return
148:51 - password doesn't
148:54 - match
148:56 - okay
149:04 - and over okay so this is not like this
149:08 - yes and if it matches and then we will
149:11 - simply return the user's details okay so
149:15 - that is return
149:18 - seller okay so now our function is ready
149:22 - let's create the API endpoint
149:25 - okay so for that inside the seller
149:27 - folder only I'll create a new file we'll
149:29 - call it login dot PHP okay and now let's
149:35 - copy some part of the code from the
149:37 - register.php
149:38 - so all these things will be the same
149:41 - this is also gonna be a request of type
149:44 - post
149:46 - okay so we copy this as well
149:53 - now we are gonna take email and password
149:55 - as the
149:58 - input so I'll copy the validation
150:02 - function for those two only uh not a
150:05 - function but the validation conditional
150:07 - code that is if else so I'll copy these
150:10 - two
150:12 - uh paste it over here okay so this means
150:15 - that once this uh API endpoint is called
150:18 - it will check if the email is given or
150:20 - not if the password is given or not if
150:22 - not then the else condition will be
150:24 - executed and there is a die that means
150:27 - the execution will stop then and there
150:28 - okay so it means that this will reach
150:32 - this state okay it will reach line 25
150:36 - only when the request has email and
150:39 - password both okay so now once that is
150:42 - done we should we shall get the value
150:46 - okay
150:47 - so
150:49 - I'll call it simple s because the seller
150:53 - is already the object name okay so
150:57 - seller and then the function name the
150:59 - functions name is login
151:05 - okay so login
151:07 - now we check the type simply so if
151:12 - get a type
151:14 - so get a type Returns the type of the
151:18 - variable and it is s and if it is equal
151:22 - to string okay that means if it is
151:26 - string then that means either this is
151:28 - returned or this is returned okay
151:31 - because this is a array and if this is
151:34 - returned then this if condition over
151:36 - here will be false so if it is true that
151:39 - means some error has occurred and we
151:41 - shall
151:42 - send a message accordingly Okay so
151:45 - I don't need a die here because this is
151:47 - the last stiff else okay so the success
151:50 - is zero and the message is gonna be
151:52 - nothing but dollar s
151:55 - okay and then we will set the response
151:58 - type as HTTP
152:00 - Response Code and that is four zero two
152:05 - okay and else if this is not a string
152:08 - then it has to be an array and if it is
152:11 - an error then we simply
152:14 - uh change the response code to 0 success
152:17 - to 1
152:19 - and the messages
152:23 - login successful
152:28 - okay and the
152:31 - user or sorry a seller
152:36 - is dollar s
152:39 - okay so let's format it save it now
152:43 - let's try running this API
152:46 - so for that we open Postman okay I'll
152:49 - copy this link
152:50 - and then
152:53 - paste it over here and it is only gonna
152:55 - change from a register to login because
152:57 - the folder directory is exactly the same
153:00 - as register only the file name has
153:02 - changed that means the last value and we
153:05 - don't need a DOT PHP because we already
153:07 - have HT access so I changed its method
153:11 - from get to post then in inside body
153:14 - inside form data first let's check if we
153:17 - have some data or not
153:19 - okay so our database is empty so let's
153:22 - first register the user and that is
153:24 - rishof Kumar okay so the email over here
153:27 - is rishabad gmail.com and password is
153:30 - quality so
153:32 - let's see
153:37 - now once this is done I'll go and check
153:40 - my database refresh it and we have the
153:44 - user over here so now let's try logging
153:46 - in
153:48 - Okay so
153:49 - for that over here firstly simply call
153:53 - like this and it says email is required
153:56 - as I told you it will not execute until
153:58 - we have given both the things so email
154:00 - is
154:01 - gmail.com
154:07 - okay so now password is also required
154:12 - and the password was quality
154:15 - now let's see what is the response
154:18 - so it it is it has got some error
154:22 - let's see what is that
154:39 - okay
154:44 - seller login offices okay so I think
154:48 - let's change it to array I think the
154:51 - string is written in some other format
155:02 - now if I click on send still there is
155:06 - some error so I'll have to look into it
155:09 - okay so I found the error okay so over
155:13 - here you can see we first need to give
155:15 - the password and then the hashed
155:17 - password button my code I have first
155:20 - given the hashed password and then the
155:23 - normal password so I think that is the
155:25 - reason for there
155:27 - so I'm gonna fix it
155:33 - I saved it now let's see
155:39 - and this API is working it says success
155:43 - and the messages login successful and we
155:47 - have the seller over here so now if I
155:49 - change the password and then click on
155:51 - send
155:54 - then it says password doesn't match okay
155:57 - and now again I'll click on send and see
156:04 - okay so login successful now let's I'll
156:07 - try to change the email
156:09 - and see so it says seller doesn't exist
156:12 - so I think it is working properly uh
156:15 - login API is done
156:18 - now although there is one thing I don't
156:20 - want I don't want to return the password
156:24 - of the user so let's do that for so for
156:27 - that I will do a quick Google search uh
156:30 - how to remove
156:32 - value
156:34 - a pair from PHP error
156:40 - okay how to delete an array element
156:42 - based on the key in a PHP so I think
156:46 - this is the answer
156:51 - so we have unset okay so we write like
156:56 - this
156:57 - okay so now let's try that so I'll write
157:00 - unset
157:03 - and then I'll write
157:06 - seller
157:10 - password
157:13 - so now this password value will be
157:16 - removed from this seller array so let's
157:21 - format it save it
157:26 - okay and then if I run this I think the
157:29 - password will not be returned this time
157:31 - so let's see
157:42 - and it isn't so I think with this our
157:45 - login API is done so I'll commit it
157:49 - so I'll check the status uh these
157:53 - changes are not committed so I'll add
157:55 - them all to the staging area then again
157:57 - I'll check the status and both both are
158:00 - added in the committing staging area so
158:03 - now I'll commit it
158:07 - with a message login API created
158:14 - okay and then push it
158:16 - so with this our login API is done in
158:19 - the next video we shall proceed further
158:21 - thank you
158:22 - uh so in this video we shall start with
158:26 - storing our products okay so for that
158:29 - first I'll open my database so in this
158:32 - we are gonna create a new table and that
158:34 - is gonna be uh products
158:38 - I'm sorry
158:39 - we are gonna create a new table and its
158:42 - name is gonna be products okay so first
158:46 - is gonna be ID that is gonna be primary
158:51 - okay and it should be Auto incrementing
158:53 - it is of integer data type okay then
158:56 - after that we have seller ID okay so
158:59 - this is a foreign key uh in the comments
159:03 - I'll write foreign key uh linking to
159:07 - seller table
159:10 - okay so you should know the basic
159:13 - terminology of dbms if you don't you can
159:16 - simply do a Google Search and get to
159:18 - know all about it okay then the name of
159:20 - the product
159:22 - uh image of the product okay then after
159:25 - that I think we need more four columns
159:28 - so I'll add those
159:30 - okay then after image we have price per
159:34 - kg okay so the price then we have
159:38 - description
159:40 - okay not a space
159:46 - okay it does encryption
159:49 - then we have interaction
159:53 - count okay so this this parameter will
159:56 - uh help us generate the trending thing
160:00 - or what we have called here yes so this
160:03 - will help in the most popular in getting
160:06 - us the most popular list okay so by this
160:09 - what I mean is that every time uh the
160:13 - product is added in the cart or ordered
160:15 - we will increment its value by one and
160:18 - thus by getting the
160:20 - uh getting to and thus with the highest
160:23 - number of interaction count will be the
160:25 - most popular and then uh others arranged
160:27 - in descending order okay so this is it
160:30 - and after that we don't need a time okay
160:32 - so now this name is gonna be worker of
160:36 - let's say 100 characters at Max images
160:39 - again Wanna Be worker of 100 characters
160:41 - at Max uh price per kg is also gonna be
160:46 - worker 100 characters Max and
160:50 - description is gonna be Bearcat let's
160:53 - say thousand characters at Max because
160:55 - descriptions are large now interaction
160:57 - count is gonna be integer only okay so I
161:00 - think this is done our table is created
161:02 - okay
161:06 - so we can see the structure we have ID
161:08 - seller ID name image
161:11 - price per kg description and interaction
161:14 - count okay so I I forgot one thing in
161:17 - starting it should be zero okay
161:20 - so
161:22 - uh we will go to default as defined zero
161:27 - so that this means that if we don't give
161:28 - any value to this uh by default it will
161:31 - be assigned a value of 0. so let's save
161:34 - this again with this our products table
161:37 - is ready okay so now let's create create
161:40 - a model class in our
161:42 - PHP so for that I'll open up up the VS
161:46 - code
161:50 - okay inside the models folder I'll
161:52 - create a new file that is
161:57 - products dot PHP
162:01 - okay and then this will also have these
162:05 - things at the start
162:07 - okay we can remove the B Crypt because
162:11 - we have not gonna store any passwords
162:13 - here okay then let's create a class and
162:16 - the class is class product
162:22 - okay we need to give a capital P because
162:24 - class name starts with the capital okay
162:27 - then after that we will Define the uh
162:31 - keyword key values I mean the uh names
162:35 - of the data members Okay so
162:40 - first we have a private variable that is
162:43 - our table name
162:45 - private dollar table
162:48 - and that is gonna be products
162:51 - then we have
162:53 - ID
162:56 - we have seller ID
163:01 - we have the
163:03 - name
163:06 - we have image
163:12 - we have price per kg
163:18 - we have description
163:24 - and last we have interaction count Okay
163:27 - so
163:29 - interaction
163:32 - count after this we have a Constructor
163:35 - and validate params function this is
163:38 - same in both in all the model classes so
163:41 - I'll simply copy it and paste it over
163:44 - here then the next thing is uh storing a
163:48 - product okay so we'll create a method
163:51 - for that first let me format it
164:10 - okay so I don't know why this is
164:12 - happening
164:14 - means like the format thing is not
164:16 - working
164:17 - okay anyway it is formatted now now
164:19 - let's create the function to store the
164:22 - details of the product so I'll call a
164:26 - public function
164:29 - add product
164:31 - okay then as always this is gonna have a
164:34 - global instance of our database
164:40 - okay and then we will take all these
164:43 - properties accept ID and then prepare
164:46 - them to be added in the query so that is
164:48 - done by adding these three things that
164:50 - is stream HTML special cache and strip
164:54 - tags we have discussed about all all of
164:57 - them in one of the video okay so the
165:00 - first is seller ID
165:03 - so this is gonna be seller ID
165:07 - then after that we have another five so
165:09 - I'll copy it and paste it five times
165:14 - and then simply change the name
165:36 - so this is the description and then this
165:39 - is interaction count
165:41 - okay so this was the reason why the
165:44 - formatting was not working I forgot to
165:47 - give a dollar sign over here okay so now
165:50 - once this is done let's store it in our
165:52 - database so for that we again write an
165:54 - SQL command SQL
165:57 - will not select but
166:00 - insert uh into dollar this
166:06 - table and then we write the key names
166:08 - that is a seller
166:10 - ID name
166:14 - image
166:16 - price per kg okay then description
166:23 - then enter okay we don't need to add the
166:26 - interaction count because it will be 0
166:28 - by default okay description now we need
166:31 - to check for spellings because if the
166:34 - spelling doesn't match it will crash
166:37 - so it does match okay values
166:41 - then over here I'll break the string I
166:45 - have already discussed these purpose of
166:48 - these six characters in one of the video
166:50 - you can look into it okay then after
166:52 - that over here we write
166:55 - this
166:57 - thing okay we call the method Escape
167:00 - value which is in our database class
167:02 - okay database Escape value this name
167:05 - okay so first it is gonna be seller ID
167:11 - I'm sorry seller added and there will be
167:13 - a comma and now after this another four
167:15 - and the last one will not have a comma
167:18 - then the
167:20 - name
167:24 - image price per kg
167:27 - and the description
167:31 - okay so once this is done let's save our
167:33 - database so
167:35 - save this Row in our table I am sorry we
167:39 - can't save the database so database
167:44 - query
167:45 - and SQL so now if we check if
167:50 - result means if it has a something that
167:54 - means the it has been executed
167:56 - successfully then we return
168:00 - true
168:03 - else will turn false so if everything is
168:07 - correct it should format itself
168:09 - automatically and it did now let's save
168:12 - this okay so with this our function is
168:15 - created uh we shall create the end point
168:17 - in the next video thank you so in this
168:20 - video we are gonna create the end point
168:22 - to store the details of a product okay
168:26 - so I'll open my editor now inside this
168:30 - seller folder which is inside API folder
168:33 - I'll create a new file and call it add
168:35 - dot PHP okay so now I'll open my
168:39 - register.php and copy code from here
168:42 - okay till the if condition
168:46 - now over here instead of seller this is
168:49 - gonna be product okay and the type is
168:51 - still gonna be post okay
168:55 - now let's copy the IELTS block
168:57 - okay that which is the case when the
169:00 - request is not uh post request Okay so
169:05 - and this is done now if the request is
169:08 - post then we need to take a few data and
169:10 - then process them accordingly so in the
169:13 - products model class you can see that
169:17 - for adding a product we need five things
169:19 - that is seller ID name image price per
169:22 - kg and description
169:25 - sorry so let's take this value so for
169:29 - that I'll again open register okay and
169:32 - then I'll copy the first one
169:36 - first means validating parameters if
169:40 - else condition or the conditional block
169:42 - okay now over here instead of seller it
169:45 - is gonna be product okay let's check if
169:48 - we have created this object or not okay
169:52 - so uh you can see that we have not
169:55 - created an object for this class product
169:57 - so let's do that uh before that I'll add
170:00 - a comment over here uh storing
170:03 - product details okay
170:07 - class ends
170:10 - and then object I'm sorry
170:16 - okay and then I am gonna call it product
170:20 - is equal to new product with a capital p
170:26 - I am sorry
170:28 - uh this needs to be capital P okay so
170:32 - the object is created now I'm gonna use
170:35 - that over here so product and this is
170:38 - also gonna be product and we first uh
170:41 - first we need the seller ID so I'll
170:44 - simply copy it uh paste it over here
170:47 - post should have seller ID it should be
170:50 - saved in the seller ID variable of the
170:52 - product object and if it is not there
170:55 - then we give a message that seller ID is
170:58 - required
171:01 - oh sorry it was already there
171:04 - okay so now we need a similarly for four
171:08 - others so I'll copy it four times means
171:12 - actually paste it four times copy it
171:14 - once so after after seller ID we have
171:18 - name so let's uh check the uh let's
171:22 - validate the parameters for this as well
171:25 - so this is gonna be name over here also
171:28 - name
171:29 - and this is gonna be name is required
171:33 - okay then uh then after that we have
171:37 - image okay so for image the process is
171:40 - not same so we'll do that at last let's
171:43 - first validate parameters for this price
171:45 - per kg and a description
171:48 - okay so over here I'll write price per
171:51 - kg price per kg price per kg and over
171:54 - here it is gonna be
171:58 - price per kg is required okay and then
172:02 - after that we have description
172:04 - Okay so
172:07 - let's add for this as well this is gonna
172:10 - be description description
172:13 - and over here also it's gonna be
172:15 - description with a capital D okay so now
172:18 - we don't need these
172:21 - now let's store the image so we have
172:24 - already stored an image which was the
172:26 - seller's image in our register API so I
172:30 - am gonna copy the code from there and
172:32 - edit it as per hour requirement okay so
172:35 - this was the part
172:37 - okay I'll even comment it uh saving
172:42 - picture of
172:46 - seller okay
172:48 - so this is done
172:50 - um
172:52 - now over here after name
172:55 - saving picture
172:57 - of product okay now this is gonna be
173:01 - this is not gonna be seller images
173:03 - folder this is gonna be product images
173:05 - folder over here also name changes to
173:09 - product images now I'm gonna copy paste
173:13 - simple okay so then again file name is
173:17 - gonna be same file temp is gonna be same
173:19 - extensions gonna be same now new file
173:21 - name will change we don't have a seller
173:24 - email over here but we do have a seller
173:26 - ID so I think I'll use that instead of
173:30 - this okay now
173:34 - instead of profile it's gonna be
173:37 - product
173:39 - okay
173:40 - and then after this I'll also add the
173:45 - name name of the product okay so for
173:48 - that I'll copy this
173:51 - paste it over here
173:54 - product name and then the extension and
173:57 - then we are saving it to product images
173:59 - folder not seller images folder then the
174:02 - new file name then this is called
174:04 - Product images not the seller images
174:07 - okay now if this is
174:10 - not available if image is not available
174:12 - then we shouldn't proceed because in
174:15 - product the image of product is
174:17 - compulsory okay so that is why I am
174:20 - gonna give an error message if if the
174:24 - picture is not present so I'm gonna say
174:28 - photo is required
174:34 - okay so now once we have everything
174:37 - let's actually save it to our database
174:40 - so I'll write if
174:43 - product
174:44 - and then I'll check the function name it
174:47 - is ADD product
174:49 - okay so over here
174:52 - this simply returns true or false okay
174:55 - no problem so now if add product returns
174:58 - true that means the product has been
175:00 - added successfully so we simply need to
175:03 - return this
175:05 - and the success is gonna be one that
175:07 - means true and the message is gonna be
175:10 - product successfully added
175:17 - okay so it is gonna be you
175:23 - and this needs to be capital P okay else
175:26 - that means it is it has returned false
175:29 - so I'll
175:30 - uh change the success to zero and the
175:34 - message gonna be
175:37 - internal server error and the Response
175:41 - Code will be 500 which is
175:44 - used for internal server error so I'm
175:46 - gonna write http
175:51 - Response Code and that is 500.
175:55 - okay so with this this API is done now
175:58 - let's try running this okay so I'll save
176:01 - it then I'll open my Postman
176:05 - okay now I'll copy this URL and then
176:08 - we'll I'll create another request okay
176:11 - it is gonna be of type post and then
176:14 - this is gonna be add instead of login
176:17 - because you can see the folder structure
176:21 - is entirely same just to the last file
176:24 - name is changing okay so it has changed
176:26 - from login to ad and so is our URL okay
176:30 - so now if I click on post it is giving
176:35 - me internal server error let's see why
176:42 - okay so it is not working because the
176:45 - spelling is wrong there needs to be an s
176:48 - or what makes more sense is this remains
176:51 - same and I change the name of the file
176:54 - only okay because product makes more
176:57 - sense rather than products okay so this
177:01 - is done now let's try running the API so
177:05 - it is saying seller ID is required so we
177:08 - go inside body inform body we write
177:10 - seller ID and that is one because in our
177:15 - login API the idea of seller is one
177:19 - okay then after that name that is the
177:21 - product name so it is gonna be cucumber
177:24 - okay
177:26 - and then after that we have image and we
177:29 - want to send a file okay so image and
177:32 - then I'll add a cucumbers image
177:36 - okay
177:38 - now after that we have price per kg okay
177:43 - so uh let's say it is 40.
177:48 - and then after that we have description
177:50 - okay so for that we are gonna use lorem
177:53 - ipsum and we have seen in one of the
177:55 - videos uh this website called lorem
177:58 - ipsum.io so it has means it provides you
178:03 - lorem ipsum for your use okay
178:06 - so I'm gonna copy it
178:12 - then in my description I'm gonna paste
178:16 - it okay
178:18 - so this is done we have added the
178:21 - description now let's try
178:25 - calling this API okay so I'll click on
178:28 - send and then let's see what happens
178:30 - okay so you can see product successfully
178:33 - added okay now let's check our database
178:36 - okay uh means if the data has been
178:40 - entered correctly or not okay so if I
178:43 - refresh I'm able to see the ID is one
178:45 - seller IDs one name is cucumber image is
178:49 - not here but we have price per kg and
178:52 - description okay so image should be
178:55 - there let's see what's the problem okay
178:57 - so this is still uh seller but we want
179:00 - need to but it needs to be product
179:03 - okay so I'll save it then in my database
179:07 - I'll delete it okay
179:10 - and then again I'll call my API so let's
179:14 - see this time
179:16 - now the product is
179:19 - successfully added let's go and check
179:21 - again and you can see now this time we
179:23 - have our product images
179:26 - but there is a error you can see that
179:29 - this dot between the name and the
179:32 - extension is missing so I'll add it over
179:34 - here and then fix this problem in my uh
179:37 - code okay so where we are saving the new
179:40 - file names okay so after this we need to
179:44 - give a dot but I missed that okay so
179:47 - I'll add it straight away now if the
179:50 - error is over here then it might also be
179:53 - in the registered API so let's go and
179:56 - check over there
179:58 - okay over here also we have not given uh
180:02 - the dot okay so I
180:04 - gave that now it is done
180:10 - okay
180:16 - so I think this is done
180:18 - okay so with this our
180:21 - API is ready we can now save product uh
180:25 - not we but the sellers can now save the
180:27 - their product to the database okay so
180:31 - this was for the video thank you so in
180:34 - this video we are gonna continue with
180:36 - our back end and then and today we are
180:39 - gonna make an API to get the list of all
180:42 - the sellers okay so that we can show it
180:44 - to the user and then the user will
180:47 - select one his favorite uh seller and
180:51 - then we will show all the products that
180:53 - that seller has okay so let's get
180:56 - started with it so inside
180:58 - uh let's go inside the seller table okay
181:02 - so over here I'll create a function to
181:05 - get the list of all the sellers okay so
181:08 - let's get started
181:12 - method to return the list of sellers so
181:18 - I can close this for now
181:21 - okay so let's start so it's public
181:26 - function
181:29 - uh all
181:31 - sellers
181:35 - okay then over here we will have a
181:38 - instance of our database
181:40 - then our SQL query is gonna be
181:44 - select and let's see what all data what
181:47 - all key value pairs are needed so for
181:51 - that I'll open my uh database so as to
181:54 - see what all values we actually have at
181:56 - the moment
181:58 - Okay so
182:00 - I don't know how its theme got changed
182:09 - okay so now it looks better so I'll go
182:12 - in my better buys table inside seller uh
182:16 - I think by just giving the name image
182:21 - and the address would be enough okay so
182:24 - what I am planning to do is to show a
182:28 - list of Sellers and then uh with the
182:32 - basic details and from there user can
182:34 - select any of the seller and then we
182:36 - will be displaying the products for
182:38 - which we have already designed the
182:39 - screen so I think the ID name
182:43 - image and address would do so we'll get
182:47 - only these things
182:49 - ID name
182:51 - image
182:53 - address
182:54 - ID name image address we need to keep a
182:59 - close look on the spellings if we mess
183:01 - up the spellings everything is
183:03 - gonna go Haywire so we will so the query
183:06 - select ID name image address
183:10 - from
183:12 - this
183:14 - table okay so this is our very basic
183:17 - query now let's run it so it is result
183:23 - database
183:25 - query
183:28 - SQL and once we run this we will get a
183:32 - result with all the tables so we will
183:34 - then fetch the fetch all the rows and
183:37 - for that in our database class we
183:39 - already created a function that is
183:41 - called
183:42 - fetch array so what we are gonna do over
183:45 - here is simply return
183:49 - database
183:53 - our result instance okay so now what it
183:57 - will do is it will fetch all the columns
184:00 - and then return it as an array and that
184:03 - will in turn be returned by this
184:06 - function okay so now let's create an API
184:09 - to call this function so inside API I am
184:13 - gonna create a new folder that will be
184:15 - Global or general so I'll call it
184:17 - General and inside this I'll create a
184:20 - new file that is sellers I'm sorry it
184:24 - needs to be sellers dot PHP
184:26 - so I'm gonna rename it
184:29 - sellers dot PHP
184:33 - now it is gonna be like this with slight
184:36 - changes means all the apis are almost
184:38 - the same we have very slight changes
184:41 - here and there
184:42 - so I'll copy this paste it over here
184:45 - this is gonna be get because we are
184:48 - fetching the details from the database
184:50 - and not adding anything or performing
184:53 - any query on the database so the most
184:56 - suitable type of request is gonna be the
184:58 - get request and the table
185:01 - here being used is the seller table so
185:04 - over here instead of getting the product
185:08 - table I'm gonna get the seller table
185:11 - okay so it is just a seller
185:14 - now after this we have this condition to
185:18 - check if it is of the mentioned type or
185:21 - not so let's do that over here it is
185:24 - gonna be get
185:26 - okay and then if it is not we have a
185:29 - else
185:31 - else we return this
185:33 - okay now after this we can simply call
185:37 - that function and get the list so I'm
185:39 - gonna write
185:41 - uh
185:43 - Echo
185:45 - Json encode
185:48 - array
185:51 - success
185:53 - one
185:55 - so
185:57 - this is gonna be sellers
186:00 - and it is seller which is the object of
186:05 - this class yes seller
186:07 - and then the function name
186:11 - okay so that is all sellers so
186:15 - I write it over here
186:19 - and this is done
186:21 - so what basically happened over here was
186:23 - that we checked if it is a get request
186:25 - if it is a get request then we give the
186:28 - output as success is one and as in the
186:31 - sellers we get the list of all the
186:34 - sellers and directly return it okay so
186:36 - the API is ready now let's try running
186:38 - it so for that I'll open my Postman okay
186:42 - so this is the
186:43 - address of our API so I'm gonna simply
186:47 - paste it and change the last part so
186:50 - inside API we are inside a folder called
186:53 - gen so it is gonna be gen and then we
186:56 - are in the file sellers so I'm gonna
186:59 - write sellers okay so now let's hit send
187:03 - and see
187:05 - and we did get the list list of all the
187:08 - sellers so right now we only have one
187:11 - seller now let's try creating another
187:13 - seller Okay so
187:18 - instead of reshuff Kumar
187:22 - it is gonna be
187:25 - ayush
187:29 - Singh and it can be ayush
187:32 - and the password instead of 40 can be
187:34 - one two three four five six although it
187:36 - is not suggested okay and the address
187:40 - can be the same description can be the
187:42 - same and then let's register it
187:46 - Okay so
187:50 - seller registered and now if we get the
187:53 - list of all the sellers then we are
187:54 - getting two sellers first one is rishabh
187:57 - Kumar and the second one is sync so with
188:01 - this the API is complete we have an API
188:05 - to get the list of all the sellers okay
188:07 - which we can use in the screen to
188:09 - display the list of the sellers for the
188:11 - user to choose okay so this was for the
188:14 - video thank you
188:16 - so in this video we are gonna make an
188:19 - API that will get us the list of
188:22 - products per seller okay so that means
188:25 - that we will give the seller ID and then
188:28 - we will get all the products that that
188:31 - particular seller has added okay so
188:34 - let's get started okay so in in the
188:38 - product dot PHP we will create a new
188:41 - function for the same
188:42 - Okay so
188:45 - method to return the
188:49 - list of products
188:53 - per seller
188:56 - Okay so
188:59 - uh this is gonna be
189:02 - public function
189:04 - get
189:06 - products per
189:08 - seller
189:09 - okay now as usual we are gonna have a
189:13 - global instance of our database
189:16 - now after that all we need over here is
189:19 - a seller ID so I'm gonna copy it from
189:23 - there to here
189:25 - okay now after that we can write our
189:28 - query so that is gonna be
189:33 - select start from
189:36 - this
189:40 - table
189:42 - where
189:45 - seller ID is equal to then single quotes
189:49 - okay then double quotes to break the
189:52 - string and then
189:54 - two dots to insert some value in between
189:57 - so that is gonna be this seller ID so
190:01 - I'm gonna copy and paste simple
190:04 - now
190:05 - uh let's simply run this query and get
190:08 - the list of products so that is very
190:10 - similar to what we did over here in the
190:14 - all sellers function okay we got the
190:18 - result and then we fetched the list from
190:21 - it so I'm gonna do the same
190:25 - simply paste it over here so again this
190:28 - function is done now let's make an API
190:31 - for it
190:32 - so over here we are again gonna create a
190:34 - new file
190:36 - and that is gonna be products dot PHP
190:40 - okay now again this is will be very
190:44 - similar to what we have in sellers okay
190:47 - only that we will have a parameter that
190:51 - is the seller ID
190:52 - okay so this is gonna be get over here
190:54 - we don't need seller but we need the
190:57 - product okay
190:58 - and then we are checking that if the
191:01 - method is get okay now the another thing
191:03 - that we need to check is that if we have
191:06 - given the seller ID or not because if we
191:09 - don't have the seller ID we will not be
191:10 - able to get the products because we saw
191:14 - that in the query we need the
191:16 - seller ID okay
191:18 - so again for checking there is a simple
191:22 - block of code and that is this one
191:25 - simply copy paste over here this is
191:29 - gonna be product but this is not gonna
191:31 - be posted this is gonna be get because
191:33 - it is a get request
191:37 - okay so I'll change it and this is not
191:40 - gonna be description but the seller ID
191:44 - so seller ID seller ID and seller ID and
191:49 - over here also we will write that seller
191:52 - ID is required so now if it comes to
191:55 - line 18 that means that seller Ida is
191:58 - there and then we simply return the
192:01 - list of sellers okay so for that I write
192:04 - Echo
192:08 - Json encode
192:11 - and then array
192:15 - then success
192:17 - and that is gonna be one and
192:21 - products that is gonna be a product that
192:25 - is the object of product class and then
192:28 - the function name so the function m is
192:31 - get products per seller so I'm gonna
192:33 - copy that
192:35 - paste it over here and
192:39 - let's see so I'm sorry let's save this
192:45 - okay over here is an error it needs
192:47 - there is a simple spelling mistake I am
192:50 - sorry for that
192:52 - format this
192:54 - save this
192:55 - okay so this is done now let's try
192:58 - calling it so
193:06 - I am gonna call it
193:09 - again this is gonna be a get request
193:12 - I'll paste it and instead of seller this
193:15 - time it is gonna be products or product
193:18 - yes we have a product with us and also
193:21 - we need to give the seller ID so that we
193:24 - give in the params section okay please
193:28 - note that if we are sending a get
193:30 - request we send the parameters in params
193:33 - because that will in turn go as a part
193:36 - of the URL so you will see now see as
193:39 - soon as I write seller ID over here it
193:41 - gets added in in the URL itself and the
193:45 - value for it as well okay so now let's
193:49 - send this and see and we got the product
193:53 - now since uh the seller one is reshuff
193:58 - and in that idea I actually have only
194:01 - one product so that is why we are seeing
194:04 - only one product okay now uh later when
194:07 - we add more products we will be able to
194:09 - see them subsequently so with this this
194:14 - API is also complete now you uh might be
194:17 - thinking okay first let's add Version
194:20 - Control to it and then we'll discuss
194:32 - thank you
194:35 - and point for getting products per
194:40 - seller
194:42 - okay so what I was saying is that you
194:45 - might be thinking that these products
194:48 - and sellers are very uh insecure apis
194:52 - means if anyone knows the URL they can
194:54 - get all the data and might be misuse it
194:58 - okay so we are gonna add security to it
195:01 - and for that we will be using JWT
195:04 - authentication so we will be seeing
195:06 - later in these in this series okay so in
195:10 - the next video we shall start with the
195:13 - front end part okay so this was for the
195:16 - video thank you so as I said in the
195:19 - previous video in this video we shall
195:22 - start with developing the flutter part
195:24 - so before we dive right into the code I
195:27 - just want to open figma and show you a
195:29 - few things so uh I added two new screens
195:32 - okay and I'll tell you how the flow is
195:35 - gonna be so far means prototyping means
195:39 - deciding how the flow is gonna be we
195:41 - need to go in the prototyping section
195:43 - okay then now from here everything is
195:45 - very simple I select this screen now if
195:48 - I want now if this screen is clicked I
195:51 - want to go on the seller screen so what
195:53 - I'm gonna do is I'm gonna select this
195:55 - big white circle and drag it to the
195:58 - screen to the next screen where I want
196:01 - it to go okay now over here I have many
196:04 - options to choose I am just gonna make
196:06 - it smart animate okay
196:10 - now so this is done so now what will
196:12 - happen then that if we click on this
196:14 - screen in figma preview we will be taken
196:16 - to this screen and now over here if I
196:19 - click on this item I want to go on the
196:22 - product screen so that is how our flow
196:24 - is gonna be that if I click on any of
196:27 - the seller I will be able to see all the
196:30 - products that that seller has okay and
196:34 - then after that if any of the product is
196:36 - clicked
196:37 - and then we will for sure go to its
196:40 - product details okay so with this our
196:44 - very basic prototyping is done let's see
196:51 - okay so now if I click on this screen I
196:54 - am taken to the category screen and you
196:58 - saw how the better buys which was in
197:00 - Center flew to the top left corner this
197:03 - is called hero animation and we shall be
197:05 - doing it okay and then after that if I
197:08 - click on this I am taken to the product
197:10 - screen and now if I click on any of the
197:13 - products I am able to see its details so
197:17 - this is what our flow is gonna be for
197:19 - now so let's open
197:23 - vs code and start coding Okay so
197:27 - first I'll create a new project
197:37 - I am gonna write flutter
197:40 - create better
197:43 - buys
197:44 - so this will create a flutter project
197:46 - with the name better buys
197:49 - okay so this will take a few seconds
197:52 - and in the meantime I have opened my
197:55 - emulator
197:56 - you can open your simulator
197:59 - or the you can connect your real device
198:03 - with it okay so now once this is built
198:06 - I'll open this folder okay means this
198:09 - project
198:26 - okay so once it is open I'll simply
198:29 - start building it
198:33 - main dot dot
198:36 - over here we have all the starting code
198:40 - okay so I'll go to run run without
198:42 - debugging
198:46 - and now it has started running so this
198:49 - is the initial project that flutter
198:51 - comes with if I click on this the value
198:54 - is gonna change over here so we are
198:56 - gonna remove this and directly start
198:59 - with our splash screen so I'll remove
199:03 - all the unnecessary code
199:05 - this complete my home it is not required
199:12 - okay now I'll remove this comments as
199:15 - well
199:17 - and I also want to remove this debug
199:20 - mode Banner that we have over here
199:23 - so for that we have a key value property
199:27 - called debug show checked mode Banner
199:30 - I'm gonna make it false
199:35 - okay and after this I'm gonna create a
199:39 - new folder inside my lib folder okay
199:42 - that is gonna be screens
199:44 - okay and then inside this I'm gonna
199:46 - create a new file that is gonna be
199:49 - splash screen
199:51 - dot dot
199:53 - okay so now this screen is created over
199:55 - here I'll import the flutter material so
199:59 - import
200:02 - material dot flutter a dot dot I'm sorry
200:12 - okay then after that I'll create a
200:14 - stateless widget
200:16 - okay that is gonna be called splash
200:20 - screen
200:21 - okay then instead of returning a
200:24 - container we are gonna return a scaffold
200:26 - because every screen should have a
200:29 - scaffold then a scaffold has a home
200:32 - okay so now the home is gonna be a
200:36 - container
200:41 - and inside the container we are gonna
200:44 - have a child
200:46 - and the child is gonna be text and the
200:48 - text is
200:51 - splash screen
200:53 - okay so this is done
201:00 - okay
201:05 - so I don't know why it is giving another
201:13 - okay so it doesn't have a home but it
201:15 - has a body I am extremely sorry for that
201:21 - okay so the body is gonna be a container
201:25 - okay
201:26 - and now we have this I'm gonna import it
201:29 - in our main.dot and add it in the home
201:32 - so that as soon as the app starts we are
201:34 - able to see this screen which is in turn
201:37 - our splash screen so to import any local
201:40 - files the standard practices if you
201:43 - leave a line and use referential
201:45 - operator
201:47 - okay so I'm gonna write import dot slash
201:50 - that is a instance of this class then
201:54 - inside this we in this folder I'm sorry
201:57 - then inside this we have the screens
201:58 - folder and then we have the splash
202:02 - screen okay and now over here instead of
202:05 - my home page it is gonna be
202:09 - Flash
202:11 - green
202:13 - okay so this is done
202:16 - and now over here instead of this I'm
202:19 - gonna use an arrow operator
202:23 - okay because that is better and that is
202:26 - also recommended
202:28 - so this is done let's save this
202:36 - okay so once this is complete we can see
202:40 - splash screen but it is in the top left
202:42 - corner and it is almost hidden by the
202:45 - notch okay so we'll fix so that is not
202:47 - an issue but uh we got to say that our
202:50 - screen is intact okay so let's see the
202:54 - design the first thing we notice is the
202:56 - background color so let's get back to
202:59 - design so I'm gonna get this color and
203:02 - that is this okay so now inside our
203:06 - splash screen the container has a
203:10 - parameter called color okay and then it
203:13 - will take a color
203:14 - color class and then I can simply write
203:17 - the code of the color so now what
203:19 - happens is that this color uh requires a
203:23 - hexadecimal now even though it is a
203:25 - hexadecimal the color will color class
203:28 - will read it as a string okay so to
203:31 - convert so to make the color class read
203:33 - it as an hexadecimal all we need to do
203:36 - is add a zero xff okay so this FF stands
203:41 - for opacity and this is the format in
203:44 - which this color understands okay so now
203:48 - if I save this this color should be
203:49 - applied on our screen so let's see
203:55 - okay and it is only applied to this part
203:58 - I am sorry
204:01 - I'll remove this
204:03 - now let's see
204:06 - and the color is applied to the entire
204:08 - screen okay now in Center we need a
204:11 - better voice in text okay so for that
204:14 - I'm gonna have a child and the child is
204:17 - a text the text says better buys
204:22 - okay and the text should be in the
204:24 - center so for that I'm gonna write
204:26 - alignment
204:28 - and then from the alignment enum
204:34 - I am gonna use Center
204:38 - okay so this is done
204:41 - let's save this
204:43 - and now we can see better Buys in the
204:45 - center well although this font and color
204:48 - is very different from what we have here
204:50 - so you can see the font we have over
204:52 - here is Pacifico okay so now to add this
204:56 - font in our project we are gonna use a
204:58 - package that is Google fonts package
205:03 - okay so for that I'm gonna write to
205:06 - Google fonts flutter
205:09 - so this will take us to the package I am
205:12 - extremely sorry
205:14 - okay so I am extremely sorry for that so
205:16 - the first link that is pub.dev has this
205:19 - package that is Google fonts okay so I'm
205:23 - gonna copy it and simply paste it in my
205:25 - pub spec.tml file
205:29 - so in pubspec.tml inside dependencies
205:33 - I'll place this and save this and then
205:36 - Pub get should automatically start
205:38 - running and it did okay so this is the
205:42 - package that we are going to use we can
205:43 - use this to add any kind of font all we
205:46 - need to do is in the style inside text
205:49 - widget we just need to write Google
205:51 - fonts and the font name okay so the
205:54 - proper instructions of installing is
205:56 - over here
205:58 - okay and this is the package that we add
206:00 - so I copied it uh we'll have to wait for
206:04 - a few seconds for this to complete
206:06 - running
206:08 - so once this is done we'll open our
206:10 - splash screen
206:12 - and over here I'll simply paste it
206:16 - so now let's apply the Pacifico font in
206:19 - our text so simply we are gonna go here
206:22 - right style and then
206:25 - Google fonts Dot passy FICO
206:33 - okay
206:36 - so now let's wait for this Google phone
206:38 - to recognize Pacifico because it runs on
206:41 - real time in the on the internet
206:43 - so it will take a few moments
206:48 - okay so once it has recognized let's
206:51 - save this and see
206:58 - okay so now you can see once it has
207:01 - completed we get a bunch of Errors over
207:04 - here and that is because we added a
207:06 - package and didn't restart it so the
207:09 - next time when we restarted so or just
207:12 - started we will not be seeing these
207:15 - errors but anyways the font is applied
207:18 - now we just need to change the color and
207:21 - its size so
207:23 - for that inside this we have a property
207:25 - called color
207:28 - okay and that takes up color
207:32 - now again we need to get the color from
207:34 - our Sigma file so I'll simply copy this
207:38 - uh paste it over here and and the color
207:42 - class will not understand so I'll have
207:44 - to add 0x for FF in front of it okay and
207:48 - then along with this I'll also change
207:50 - the size
207:52 - okay so the size is gonna be 20 let's
207:55 - see how it looks if it is not in
207:58 - accordance with our design we shall
208:00 - change it again
208:01 - so let's format it
208:05 - so once it is formatted let's save it
208:10 - okay and now you can see a better buys
208:13 - is here but it is very small I shall
208:16 - increase the size let's make it to 25
208:19 - okay so over here it is actually the
208:22 - pixels size
208:24 - okay so it can be a little bit more
208:26 - bigger
208:28 - let's make it 27 and this looks fine
208:32 - okay this is looking very aesthetical
208:35 - now in the next video we shall continue
208:37 - to the next screen okay so this was for
208:40 - the video thank you so in this video we
208:43 - shall continue with the front end I
208:46 - moved from the simulator to my real
208:49 - device because running simulator and
208:52 - recording at the same time was making my
208:54 - system run slow okay so let's get
208:57 - started uh in the splash screen uh you
209:01 - can see there are two errors like this
209:03 - okay so means these are not errors but
209:06 - are warnings and the warning says prefer
209:09 - const with constant Constructors okay so
209:12 - what it basically means is that if I add
209:14 - const in front of it the error will be
209:17 - gone which is
209:18 - in a way the correct way to do so
209:22 - okay so format it save it
209:25 - now after that what I want is that once
209:28 - the better buys appear I want to show a
209:31 - small text below it that will say
209:33 - loading sellers okay so let's do that so
209:37 - for that this text I am going to wrap it
209:39 - up in a content in a column
209:42 - okay let's save it
209:44 - and as soon as I put it inside a column
209:47 - it goes to the top so let's bring it in
209:49 - Center so for that we write alignment
209:52 - main access alignment and the main axis
209:57 - alignment has an enum also of the same
210:00 - name main axis alignment
210:05 - and then in that I'm gonna select Center
210:08 - okay then again save it and now it
210:11 - should be in the center
210:16 - okay and it is now below it I'll add a
210:20 - progress icon and then the text okay so
210:24 - for that I am gonna add a circular
210:30 - a progress indicator
210:32 - okay so let's see
210:37 - okay so we did get a circular progress
210:40 - indicator but this is not how we want it
210:42 - to be so let's see if I can change the
210:45 - size
210:47 - okay so we can't let's see what are the
210:49 - properties that we have we can change
210:51 - the color
210:52 - and the key and the value color okay so
210:56 - we are gonna change the value color
210:59 - and that is always a stopped animation
211:05 - okay and then this is gonna be of type
211:08 - color
211:10 - and it is gonna be color
211:14 - and this very color
211:17 - okay so I think over here also we need
211:21 - to give const
211:23 - no
211:25 - I think this is because okay so we need
211:28 - to give a const over here and this
211:31 - warning will go
211:33 - okay still there is the warning
211:38 - okay let's see what it is
211:40 - add const modifier so I did that okay so
211:44 - it was telling to add it over here now
211:47 - we still have some error okay we don't
211:49 - need a const over here so you can see
211:52 - these are the new changes that has been
211:54 - added in the latest version of flutter
211:58 - that is this is the solar basically the
212:00 - null safety things okay which means that
212:03 - to stop the app from crashing even if
212:06 - something is not so that is why we add
212:09 - these checks every here and there so
212:11 - this is not such a big thing you can
212:13 - simply hover on the warning and it will
212:16 - automatically tell you what to do so
212:18 - let's save this
212:20 - and now our animation color is the same
212:23 - as of this text okay so now let's try
212:26 - decreasing its size so for that I'll
212:29 - wrap it up in a sized box and the sized
212:32 - box will have a height of
212:34 - uh let's I'm sorry it will have a
212:38 - height of
212:40 - let's say 20.
212:43 - okay
212:46 - so now it is again giving us error I
212:49 - think we need to add const over here
212:52 - okay
212:54 - and then over here it is giving error we
212:57 - don't need the const keyword Okay so
213:00 - we need to follow the warnings Okay so
213:04 - it is there is no such way that you can
213:07 - automatically remember it okay so also
213:10 - change the width to 20 so that the
213:14 - progress dialog becomes more of a
213:18 - circular type because right now uh when
213:21 - only the height is changed it has become
213:23 - an ellipse which is not at all looking
213:26 - good on the screen
213:29 - so let's do it and here's the icon has
213:33 - become little bit smaller so the dialog
213:35 - is now smaller let's see if I can change
213:37 - the width of the width of that thing so
213:43 - the options that I have is key
213:46 - okay no
213:48 - not over here but over here let's see
213:51 - the options that we have we have the
213:53 - color we have key
213:55 - we have the stroke width so we need to
213:58 - change it to 0.5 let's see how it looks
214:02 - okay so save it
214:09 - okay this is way too much Fint so I'll
214:12 - change it to it
214:17 - let's see how that looks
214:23 - okay I'll make it maybe one 1.5
214:28 - Okay so
214:30 - let's save this yes so now it looks fine
214:34 - okay over here it might not look proper
214:38 - to you because I am using the free
214:40 - version of wiser but in your phone or on
214:43 - your emulator you will be able to see
214:45 - the Perfect Design okay so after this
214:49 - after this we have our to text
214:53 - okay
214:59 - we have a text and it says
215:03 - loading
215:04 - sellers
215:08 - all right
215:10 - so this is
215:12 - done let's save this
215:17 - and again we need to add const over here
215:20 - to remove the this warning Okay so this
215:24 - is also done let's save this
215:27 - now we have loading sellers over here I
215:30 - want to push it a little bit down and
215:32 - make it in the
215:34 - and give it a font of our secondary
215:36 - color that secondary text that is
215:39 - Poppins okay so let's do those things
215:44 - so over here I'm gonna write Style
215:48 - and then it is gonna be
215:52 - Google fonts
215:58 - dot Poppins
216:05 - okay
216:07 - so now the text will be in the Poppins
216:10 - format
216:13 - Okay so
216:14 - just hold on for a second for this
216:17 - Google to search the font Poppins
216:22 - okay so what is happening over here is
216:25 - that we have given constant Google
216:28 - phones dot Poppins is not const so if I
216:31 - remove the const from there the error is
216:33 - gone okay so these all might be new to
216:37 - you when once you start coding you will
216:39 - get a hang of all such new things that
216:42 - has been introduced okay so now it is in
216:45 - the Poppins font let's push it a little
216:48 - bit down so for that you can either use
216:51 - a container or a padding I'll use
216:54 - padding in this case so instead of all
216:56 - it is gonna be only and ins and over
216:59 - here it is gonna be top and it is not
217:01 - gonna be eight but five so I want to
217:04 - push it down by five uh pixels so for
217:10 - that I'll leave a space of 5 pixels at
217:12 - the top means that means in between okay
217:15 - so loading Sellers and this is this now
217:17 - I directly don't want the people to see
217:21 - the progress dialog and the loading
217:24 - sellers so what I want is for them to
217:26 - see better buys for two to three seconds
217:28 - and after that we show this loading
217:32 - Sellers and actually start loading the
217:34 - sellers means sending requests to our
217:36 - server okay so for that
217:39 - what I'm gonna do is I'm gonna create a
217:41 - key value pair okay so for that I'm
217:44 - gonna need to change it from stateless
217:46 - to stateful because we are gonna have uh
217:49 - dispose methods and stuff okay so for
217:52 - that I'll over here create int
217:55 - show
217:57 - loading
217:59 - sellers
218:02 - as false okay and not end we can use a
218:05 - pool over here because it is either
218:07 - gonna be a false or true Okay so
218:10 - now if
218:12 - now if that show loading show loading
218:16 - sellers is true then only we will show
218:19 - the progress dialog and the text to
218:21 - loading seller so what I'm gonna do is
218:23 - I'm simply gonna add an if condition
218:25 - over here
218:26 - show loading
218:31 - sellers
218:33 - okay so if this is true then only the
218:37 - progress dialog will be visible
218:40 - and the text
218:42 - okay so let's format this
218:46 - and save it
218:48 - and you can see the both the two things
218:52 - are now invisible and once uh two
218:55 - seconds pass we want to show those two
218:58 - things and actually start loading the
219:01 - seller so let's do that thing so for
219:04 - that uh over here I'll call the function
219:08 - init State we have discussed about init
219:11 - state in one of the videos in the
219:13 - flutter Series so if you don't know what
219:15 - is in its state what is the use of init
219:17 - State I I recommend you go and look and
219:20 - do that so what we are gonna do is we
219:23 - are gonna write
219:26 - over here only timer
219:31 - so timer is uh is a is a widget means
219:37 - not a widget but a functional class that
219:39 - we get inside material okay or not
219:42 - Material let's see what it is
219:47 - I think it is of the class a sink so it
219:52 - will automatically tell you to import
219:54 - the library yes so it is timer is
219:56 - available in the class async okay now
219:59 - over here you can see this is showing an
220:02 - error and this is again because of null
220:04 - safety because what null safety says is
220:07 - that if you are creating a variable of
220:12 - tie of a defined class means not using
220:15 - VAR or const then you should Define it
220:19 - at the same moment so there are two
220:21 - options that we can do to get rid of
220:23 - this error either I put a question mark
220:26 - over here so that means that even if it
220:28 - is not defined we don't care about it so
220:32 - what will happen is that when the dart
220:35 - compiler starts executing it will say
220:37 - that this is a question mark okay and if
220:40 - it is a question mark then it will not
220:42 - care that the variable following that
220:45 - question mark is defined or not so this
220:47 - is one way and the other way is writing
220:50 - VAR so VR is a generic term and Nova and
220:54 - thus the compiler forgoes that if either
220:56 - it is defined or not so it doesn't care
220:59 - about that for the moment
221:01 - so let it be War we will see the other
221:04 - type in in the near future okay so now
221:07 - over here I will write timer is equal to
221:10 - new timer
221:12 - okay and then I think uh this timer
221:15 - takes a few things that is the duration
221:18 - okay so for duration I'm gonna use the
221:20 - duration widget
221:23 - okay and in duration I'm gonna
221:26 - give seconds as three so we don't need
221:29 - the new over here because we are in
221:32 - flutter so now we have given duration
221:34 - three
221:35 - and then after that what we have let's
221:38 - see what are the two things it takes uh
221:40 - on function callback okay so over here
221:43 - it takes a function
221:47 - so what is basically happening over here
221:49 - that we are creating this timer which
221:51 - will wait for three seconds and as soon
221:53 - as three seconds is over it will run
221:55 - this function and all we want to do over
221:57 - here is change the value of show loading
222:00 - sellers to true
222:04 - true
222:06 - all right
222:07 - so this is done
222:10 - and now in case someone cancels it or or
222:15 - even if we don't cancel it once we want
222:17 - we get away from the screen means once
222:20 - we close the app or navigate to other
222:22 - screen I want this timer to get canceled
222:25 - and for that we have a method called
222:27 - dispose we have also discussed about
222:29 - dispose in one of our flutter videos so
222:32 - if you don't know please go and look
222:35 - have a look at that video
222:37 - Okay so
222:39 - uh dispose
222:42 - now in this pose we write everything
222:45 - before the Super the reason is will you
222:47 - will also understand when once you go
222:49 - and look at the video so over here it is
222:51 - gonna be timer
222:53 - dot cancel
222:56 - okay so this is done
222:58 - now
223:00 - okay we don't need to give a semicolon
223:03 - over here this is the new format okay so
223:06 - if you are writing in a narrow function
223:08 - you don't need to give a semicolon and
223:11 - you just need to give a comma and then
223:13 - the next line of statement okay and what
223:15 - I Wanna Do Is Write set
223:18 - ok so that once the value is changed I
223:23 - am setting the state so that the build
223:26 - method gets executed again and at that
223:30 - time the show loading sellers will be
223:32 - true and if that is true then we will be
223:35 - able to see the sized box and this text
223:38 - so you are under so I hope you are
223:40 - understanding the flow in which I am
223:42 - going so let's format everything uh save
223:45 - it or all right better do a full restart
223:53 - okay so I'll do a full restart
224:02 - okay so it is so it uh it waited for
224:07 - three seconds and then it started
224:09 - showing loading sellers Okay so
224:13 - why is it giving a warning over here uh
224:16 - prefer const with duration characters so
224:19 - what I'm gonna do is add a const over
224:20 - here
224:22 - okay uh are we getting any other errors
224:25 - so what is this
224:27 - prefer Dynamic okay I will prefer
224:29 - dynamic
224:33 - okay let's see what are the other errors
224:36 - that we have or the warnings so there
224:39 - are no more warnings so what I'm gonna
224:40 - do is I'll do a restart okay
224:50 - this will take some time
225:05 - so once this is done it is now once
225:07 - three seconds are over we are able to
225:09 - see the loading icon and the text
225:12 - loading seller so what is gonna happen
225:14 - is that as soon as these two things
225:16 - appear we are gonna send a request to
225:19 - get uh the list of server list of
225:22 - sellers to our backend and then once we
225:25 - get to the list we are gonna navigate to
225:27 - another screen and show the list of
225:29 - sellers so that is what we are gonna do
225:31 - in the next video thank you
225:34 - so in this video we are gonna fetch the
225:37 - list of Sellers from the server so for
225:40 - that I actually uh as I told in the
225:44 - first video I have hosted it on my
225:47 - private server and you all can access
225:49 - the link so this is the seller's link
225:54 - okay so if I click on send I am able to
225:57 - get the list of sellers so if you didn't
226:01 - do the back end part you can directly
226:04 - use this API and if you did the back end
226:07 - part I suggest you use your own
226:09 - localhost API okay so let's get started
226:14 - so what I'm gonna do is I'm gonna import
226:17 - another package and and that will be
226:20 - called HTTP so as to send the flutter
226:25 - requests
226:26 - okay requests from flutter
226:29 - and in my database I have added four of
226:32 - the characters okay so for you to use
226:40 - so this is the dart package that we have
226:43 - over here
226:44 - it is also null safety so we can use it
226:47 - means if it is not null safety then you
226:50 - are gonna get a lot of warnings in your
226:52 - compiler okay so then again I will add
226:55 - it in my Pub spec dot EML file
227:00 - save it
227:03 - and until it is running I'll add a few
227:05 - comments here and there so as to make a
227:08 - sense of the code
227:20 - so this is initializing the timer
227:28 - disposing the timer
227:33 - this is the title
227:37 - okay
227:39 - and this is the
227:42 - loading animation
227:48 - and this is the loading text
227:53 - okay so while we were doing this our
227:56 - package has also been added okay so uh
228:01 - for all the server requests I'm gonna
228:03 - create a separate file and all the
228:05 - server requests we are gonna write it in
228:08 - that file so for that inside a lab I am
228:11 - gonna create a new file and that will be
228:13 - called
228:13 - a server
228:15 - Handler dot dot
228:19 - okay so over here first I'll import http
228:26 - okay as http
228:30 - now I'm gonna create a class server
228:33 - Handler
228:40 - okay and then over here I'm gonna paste
228:43 - my base URI
228:47 - not URI but URL I am sorry base URL
228:56 - and that is gonna be this part uptail
229:01 - API
229:03 - so I'll copy the
229:05 - entire thing
229:07 - okay
229:08 - and then simply paste it over here
229:13 - okay so this is done now I'll create a
229:16 - function to get the list of sellers
229:26 - okay and since we the server request
229:29 - will take some time it is gonna be of a
229:32 - return type future and future of list
229:35 - and the list is gonna be sellers okay so
229:39 - right now we don't have a class called
229:40 - seller so we need to create that so
229:43 - inside this label folder I'm gonna
229:45 - create a new folder called models
229:48 - okay and inside model I'm gonna have
229:51 - seller
229:54 - so over here it is class seller
229:59 - now uh so let's say now a database what
230:02 - are the values that seller actually has
230:05 - so this is ID
230:11 - the name
230:18 - okay email image address and description
230:22 - string name email
230:27 - image
230:30 - address
230:34 - and the
230:36 - description
230:38 - okay so these all are done now we need
230:41 - to initialize this so that is why it is
230:43 - an error as I told in null safety so
230:45 - what I'm gonna do is I'm gonna write
230:48 - it like this
230:50 - okay
230:58 - so now the error is gone although we
231:00 - will still create a Constructor
231:02 - and that is a seller
231:05 - okay dot from map and this is gonna take
231:09 - a map of type
231:12 - string and dynamic and we'll call it map
231:16 - and over here we are gonna write this
231:18 - dot ID is equal to int dot parse
231:26 - map ID okay because because in Postman
231:30 - you can see the ID is coming as a string
231:33 - so we need to parse it to an integer
231:37 - okay so this is done now similarly I
231:40 - will have for the rest 5 so
231:45 - I will simply copy paste it
231:49 - okay so I'll change the names
231:53 - this is gonna be named this is gonna be
231:56 - name
231:58 - email
232:00 - and email
232:03 - image and match
232:07 - address over here and over here so these
232:11 - values are gonna be the key names of
232:14 - your uh
232:16 - what do I say in this response okay and
232:21 - a description
232:22 - this is the description okay so now you
232:26 - can see this is giving an error and a
232:28 - warning everything because first and
232:31 - I'll remove this int from here
232:34 - okay because that is not required
232:36 - because we are storing it in a string
232:38 - type and if we write interrupt parse
232:41 - then the returned answer is gonna be of
232:44 - type integer and that is why it is
232:46 - showing an error
232:47 - okay so let's fix this
232:56 - now after that it is showing a warning
232:58 - that it is of
233:00 - don't access members with this okay so
233:06 - okay so now the error is gone
233:12 - so now you can see that the linting and
233:16 - flutter is damn strong they all they
233:18 - tell you directly what to do and what
233:20 - not to do so and that is very helpful so
233:24 - our seller model class is now created
233:27 - now I'm gonna import it in in the server
233:30 - Handler okay so as I told for local
233:33 - Imports we leave a line and use
233:35 - referential operators so import
233:39 - then we have the folder models
233:43 - and inside model we have seller so now
233:46 - since we have imported seller this
233:48 - seller should work okay and then we
233:54 - get
233:55 - sellers so this is gonna be the function
233:58 - name okay and it is gonna be of type
234:00 - async because we have future over here
234:03 - okay
234:05 - and then now since we are
234:11 - to the server so they're my there are
234:14 - very high probability that there is
234:16 - gonna be some error so we better
234:18 - surrounded with our try catch
234:24 - okay and before that I might like to
234:28 - know that a print
234:42 - so this is how it is gonna be
234:45 - now this get sellers is
234:49 - giving an error because we are not
234:51 - returning anything so so let's get to it
234:53 - so we are gonna create a list of seller
234:56 - and that is gonna be sellers okay let's
235:00 - initialize it
235:02 - and return it
235:05 - okay now in between we will do the post
235:09 - request so every request returns a
235:12 - response of type response okay so this
235:15 - response is an HTTP package response
235:18 - we'll call it response and we use the
235:21 - await function here because the request
235:23 - is gonna take some time HTTP dot get
235:29 - okay and then this takes a URI yes so it
235:33 - takes a URI so what we need to do is URI
235:35 - dot parse and then we write our string
235:38 - over here so the string is gonna start
235:40 - with our base URL so I'll simply do
235:44 - string interpolation
235:47 - okay then after base URL uh we have gen
235:51 - and we have
235:52 - seller so let's check gen and sellers
235:56 - cool so this is it now let's simply
235:59 - print response for now okay okay so why
236:02 - is it giving an error
236:12 - so now I am simply gonna write print
236:16 - response
236:20 - dot body so let's see what is the
236:23 - response we get and to see what is the
236:26 - response we will need to call this
236:28 - function okay so before that let's see
236:31 - what are the warnings this could be
236:34 - final so let's make it final and what is
236:37 - the warning over here ignore avoid print
236:39 - on this line okay so this is just a
236:43 - linting thing because
236:45 - that is not that big an issue use reach
236:48 - row to rethrow a chord
236:50 - exception okay so we will use retro
236:53 - so the rethrow basically means that we
236:56 - already have an exception and we want to
236:58 - throw it somewhere else so either you
237:00 - can do it to throw e but that is not uh
237:03 - syntactically correct I I have a habit
237:06 - that's why I wrote but you should always
237:08 - use rethrow okay that is the better way
237:11 - so this is done now in our splash screen
237:14 - I'm gonna call that function so before
237:17 - that I need to import it so you can see
237:20 - the hierarchy first to the dot Imports
237:23 - then the flutter or flutter respective
237:25 - packages import and then the
237:29 - local Imports so import
237:34 - and then again I'll get out of this
237:36 - folder and we have our server Handler
237:40 - okay cool
237:43 - so now over here after this set State I
237:46 - also want to run another method that is
237:49 - get sellers
237:53 - okay so we call this method as well now
237:56 - we need to create this method
237:59 - void get
238:01 - sellers
238:04 - so you can see over here inside an arrow
238:07 - function we only use commas and not
238:10 - semicolon this is a very new thing so uh
238:14 - please don't freak out and means go with
238:16 - the flow
238:18 - so server Handler
238:24 - Dot
238:26 - get sellers
238:28 - okay and then we get the response in
238:30 - then because it is a future okay and we
238:34 - get the error in dot catch error so if
238:37 - there is some error for now I'll simply
238:39 - print it later we will create custom to
238:42 - custom notification toasts for it we
238:44 - will see most probably in the
238:47 - next or two three videos later okay so
238:50 - for now I simply wanna print the error
238:53 - and print the value so so just as to
238:56 - check what is happening although now it
238:58 - will be null because we are not
239:00 - returning anything actually we are
239:03 - returning an empty empty string empty
239:06 - array over here so we will over here
239:08 - also ignore print okay
239:11 - it it is giving such error because uh
239:15 - printing the responses uh not suggested
239:18 - I'm sorry for this
239:19 - means
239:21 - the compiler expects you to do something
239:24 - not just simply print it
239:31 - so we will try to avoid the warnings as
239:34 - much as possible
239:35 - now let's restart
239:38 - okay so let's see what is the response
239:41 - there might be some errors so
239:44 - let's see
239:56 - okay
239:58 - server Handler environment no host
240:00 - specified
240:02 - no host specified I think I need to add
240:05 - a
240:06 - HTTP in the starting
240:09 - okay so that might be a error in Postman
240:12 - it is done automatically
240:16 - okay so let's let's do it again and see
240:39 - okay so we did get the response okay so
240:43 - now let's simply parse it
240:46 - okay so let's see what is the type of
240:49 - body so the body is of type string we
240:51 - need to convert it to Json okay so for
240:55 - that what I'm gonna do is I'm gonna use
240:58 - a function called Json decode okay for
241:01 - that we need to import convert convert
241:04 - Library which is provided by Dot
241:12 - ok so we have the convert library now
241:15 - let's convert it
241:21 - uh we'll call it sellers
241:25 - dynamic
241:28 - sellers is equal to
241:31 - Json dot decode
241:38 - response
241:41 - dot body
241:44 - Dot
241:46 - okay so this is it we get the response
241:52 - and then we get the sellers
241:58 - okay so what is basically happening over
242:00 - here that we are converting this string
242:03 - to Json okay and then we are getting the
242:06 - sellers list from it okay so let's see
242:10 - why is this giving an error undefined
242:13 - value Json so I already did import Json
242:17 - convert
242:18 - okay so then this was an error I'm sorry
242:21 - okay so that is gone now Dynamic sellers
242:25 - the name sellers is already defined Okay
242:28 - so
242:29 - sellers list okay and instead of dynamic
242:33 - I'm gonna make it okay let it be dynamic
242:37 - or maybe a list okay
242:40 - so now
242:43 - for uh map
242:46 - m in
242:49 - Sellers List means getting each value
242:52 - from this list what we are gonna do is
242:55 - we are gonna convert it of time convert
242:57 - it to type seller and store it inside
242:59 - sellers list so for that I'll write
243:02 - sellers dot push
243:05 - or I think it was add yes add and then
243:09 - I'm gonna write seller Dot from map and
243:14 - the map is gonna be m
243:16 - okay
243:18 - so now once this is done uh there is
243:21 - gonna be some issues with the type
243:22 - casting okay so let's see what it is
243:30 - the argument type map Dynamic cannot be
243:33 - assigned to map string dynamic
243:36 - okay so I think over here we have map
243:39 - string Dynamic I'm gonna make it Dynamic
243:43 - only okay so this hardly changes
243:46 - anything
243:47 - and let's save that
243:50 - and this over here
243:54 - so now let's see if the if we are
243:57 - returning something sensible or not
243:59 - so let's
244:01 - wait for the
244:03 - system to hot restart
244:10 - so it did restart and we got to four
244:13 - instances of seller that means this
244:15 - function is complete we are getting the
244:18 - response we are converting it and then
244:21 - we are sending it back to the place
244:24 - where it was called okay which was this
244:26 - screen and over here we have the print
244:29 - statement and this print statement is
244:31 - printing this thing so it is pretty neat
244:34 - now what happens is that once we get the
244:37 - sellers we want to navigate to the
244:40 - seller's screen okay so for that first
244:43 - I'll create a new file over here and
244:47 - that will be called sellers screen
244:51 - dot dot
244:54 - now inside this again I'll import the
244:56 - flutter material
245:05 - and then create a stateless widget for
245:07 - now okay
245:18 - okay again I missed
245:21 - the closing codes over there
245:24 - okay that is why so I'll create a state
245:27 - class widget for now and that is gonna
245:29 - be seller's screen okay so over here
245:33 - again this is the screen so we can't use
245:35 - a container directly we need to have
245:37 - scaffold okay cool and inside the
245:40 - scaffold we have body
245:43 - now the body has a container
245:46 - and the container will have an alignment
245:49 - of Center
245:56 - okay
245:58 - and then there is gonna be a child which
246:01 - is a text widget which will see say a
246:04 - seller's screen
246:07 - okay so this is done
246:12 - let's save this
246:15 - okay
246:16 - now
246:17 - I'll also create a route for it so
246:26 - public
246:27 - static
246:29 - okay we don't have public over here I
246:32 - think static const
246:35 - the route name is enough and the route
246:37 - name is gonna be
246:39 - uh sellers
246:41 - screen
246:43 - okay so this is done now let's add this
246:46 - route in our main dot dot file okay so
246:49 - over here I'm sorry over here first we
246:52 - will need to import the
246:54 - seller's screen so import screens
247:01 - and the seller screen
247:04 - okay now over here we have another
247:07 - method called routes okay which takes a
247:11 - map okay and the first one is gonna be
247:14 - first route is gonna be a seller's
247:18 - screen
247:21 - dot route name
247:23 - and it has gonna return
247:26 - sellers screen
247:34 - okay
247:35 - so it is not simply like this but with a
247:38 - context or if you don't want the context
247:41 - that is uh advised that you use an
247:45 - underscore okay that this is called a
247:47 - placeholder Okay so
247:50 - yeah so now over here we have a warning
247:54 - prefer const okay I will prefer const
247:57 - over here also I will have to prefer
248:00 - const
248:01 - okay so the warning is gone yes so the
248:05 - route is now added now let's actually do
248:08 - the routing
248:12 - okay so for that in the splash screen
248:15 - once we get this what I'm gonna do is
248:18 - Navigator
248:21 - dot off
248:27 - context okay dot pop and push
248:33 - named
248:35 - and the name is gonna be the route name
248:37 - so to get the route name we need to
248:39 - import that screen so import
248:45 - and the screen is a seller's screen okay
248:49 - so over here I'm gonna write
248:52 - sellers screen
248:58 - dot route name
249:00 - okay
249:01 - so this is done now we can
249:04 - remove this avoid print thing okay
249:07 - so okay this seems fine now let's try
249:13 - running this so what is gonna happen is
249:16 - that as soon as we get to the list of
249:18 - sellers it should go to the category
249:20 - screen so let's see if that works or not
249:40 - okay so you can see as soon as we got
249:42 - the
249:43 - a list of sellers it went to seller
249:46 - screen okay I'm sorry my mail has opened
249:53 - yeah so I'll run it again
250:00 - so now it is better buys okay and once
250:04 - it starts now it has sent the request it
250:06 - got the response and it uh successfully
250:09 - came to the seller screen so now in the
250:11 - next video we shall make the UI for this
250:14 - okay
250:15 - so this was for the video thank you so
250:19 - in this video we are gonna continue with
250:21 - the flutter part of our project so up
250:24 - until the previous video we have made
250:26 - the splash screen added animation to it
250:29 - okay and while the animation was running
250:32 - we were fetching the list of Sellers and
250:34 - once we had the list of sellers we were
250:37 - moving to the seller screen
250:40 - so this part is done so now today what
250:43 - we are gonna do is we are gonna make the
250:45 - UI of the seller screen so means we
250:48 - actually have the UI we just need to
250:49 - implement it means write flutter code
250:51 - for it so this is the UI that we are
250:54 - gonna make so let's start uh so we'll
250:57 - start from the top and over here we have
250:59 - better buys and the user's image so for
251:02 - now in place of users image it is gonna
251:05 - be a simple Circle okay because we will
251:08 - have to make a separate pipeline for
251:10 - user because uh we are gonna ask the
251:14 - user to login or sign up only when they
251:18 - are checking out from the app Okay so
251:21 - until then the user can be anonymous and
251:24 - can be verified so we will be we will
251:27 - have to tackle both the situations and
251:29 - we will have to write certain different
251:30 - types of code for that so we will be
251:32 - doing later in this project for now I am
251:34 - just gonna put a simple Circle and move
251:37 - on with the seller's UI
251:39 - so let's start
251:41 - so this is obviously in the seller
251:43 - screen over here we have child I'll
251:46 - remove it I need to give a comma over
251:49 - here
251:50 - okay now after this this container will
251:53 - have a child and the child is gonna be a
251:55 - column
251:57 - okay
251:58 - cool now inside column we will have
252:01 - children
252:02 - now the first child is gonna be a row
252:05 - and the row will have these two items
252:07 - okay so in a row uh two items are
252:10 - displayed one after another means one
252:12 - next to another okay so the first item
252:15 - as I just said is gonna be a row
252:19 - okay then the row has children's
252:22 - now the first children is gonna be a
252:24 - text and the text is
252:26 - better buys
252:28 - okay
252:31 - let's save this
252:33 - okay so it is better by this over here
252:36 - at the top that is we will fix this but
252:38 - before that let's add a circle towards
252:41 - the right so for that I am gonna create
252:43 - a container
252:46 - okay now container we it has a
252:50 - decoration and the decoration is a box
252:52 - decoration
252:55 - okay now inside this box or decoration
252:57 - we have a property called shape and then
253:00 - over here we can give the shape from the
253:03 - box the shape in them and we want to
253:05 - make it Circle so it is circle
253:08 - okay now let's give it a certain height
253:11 - and width okay so the height is gonna be
253:15 - 50 and the width as well is gonna be 50.
253:19 - so if we want a regular Circle we need
253:22 - to give the height and breadth has same
253:24 - if we don't we are gonna get an ellipse
253:26 - okay so I hope my point is clear over
253:29 - here
253:30 - so now uh the circle is here but I think
253:35 - we need to add some color to it okay so
253:38 - let's do that over here inside
253:40 - decoration I'll add color
253:42 - and the color is gonna be from the color
253:45 - cenum
253:46 - colors dot let's say pink for now okay
253:49 - this is just for testing we will be
253:51 - changing it to an uh a suitable color
253:54 - means that which suits the eye okay so
253:57 - now you can see this is uh means
254:00 - sticking to the previous item but I want
254:02 - them to be at the two corners so for
254:05 - that inside row we have another property
254:07 - that is called main axis alignment so in
254:10 - a row the main axis is horizontal axis
254:13 - and the cross axis is the vertical axis
254:16 - and the vice versa is in column so in
254:19 - row in main axis alignment we again have
254:21 - a main axis alignment enum and I am
254:23 - gonna give space between so what space
254:27 - between basically does is leaves the
254:29 - maximum space that it can get between
254:31 - the objects okay so now you can see the
254:35 - once this loads they both are
254:37 - at that at the two corners okay so now
254:41 - we have a bunch of warnings
254:44 - so I think adding a const over here
254:46 - would do for now
254:48 - yes okay over here also we will add a
254:51 - constant it will be done
254:55 - so both the warnings are gone now let's
254:57 - uh make it like our UI so for that in
255:02 - the row
255:04 - uh what I'm gonna do is I'm gonna uh
255:08 - add a padding means surround it with a
255:10 - padding and the padding is gonna be
255:14 - let's say symmetrical okay so you might
255:18 - be knowing there are three types of
255:20 - padding that is symmetrical means we
255:23 - give one value for a horizontal axis one
255:25 - volume one value for vertical then we
255:28 - have an only parameter that is for all
255:31 - the four sides separately and then and
255:33 - all for all the four at once okay so I
255:36 - have already made videos on these you
255:38 - can just go and look over there so let's
255:41 - give a padding horizontally of 20.
255:46 - okay and let's see how it looks
255:48 - okay now let's bring it down a little
255:51 - bit so it is vertical
255:54 - vertical is gonna be 30.
256:03 - uh I think a little bit more
256:08 - okay uh now let's edit this better buys
256:12 - okay so once we get back to the design
256:16 - we can see that the better biases of the
256:20 - font
256:21 - Poppins and a semi bolt so let's do that
256:25 - okay so for that we need to import our
256:28 - Google fonts package
256:30 - so that is Google fonts
256:33 - dot dot
256:35 - now over here where we have the text
256:37 - inside this we are gonna add Style
256:41 - Okay so
256:43 - style and it is sorry with a capital G
256:49 - Google fonts
256:55 - dot Poppins
256:59 - okay and now once we have Poppins over
257:02 - here we can't have const because this
257:04 - style is not constant it will give us
257:06 - error so I think all these things are
257:10 - pretty much understood by now
257:12 - okay why is it showing an warning so
257:16 - Google fonts doesn't exist I think
257:19 - Google font might exist
257:22 - okay I think I am messing with the name
257:31 - Google fonts
257:34 - Okay Google fonts it is
257:40 - let's see yes Google fonts and then we
257:42 - have Pacific over there over here it is
257:44 - Poppins now inside this we first need to
257:47 - change the font weight
257:54 - okay so the font of it
257:57 - is gonna be
258:06 - okay so the error is because I have not
258:09 - closed it over here so this is a silly
258:12 - mistake I I don't know why I make so
258:14 - much time
258:15 - uh so font to it and then let's make it
258:18 - 500 and see how it looks
258:22 - so the
258:25 - let's wait for this to finish okay so
258:27 - the font is applied uh
258:30 - now let's increase its size so for that
258:33 - we have font size and the size is gonna
258:35 - be 20 I guess
258:39 - let's see how this looks
258:42 - after that we can decide
258:45 - or what is the size that we have here so
258:47 - it is 23 okay okay no problem
258:59 - thank you
259:02 - so let's save this and see
259:05 - okay I think I will make it to 23 only
259:11 - okay now I need to change the color to
259:14 - this
259:15 - so let's select it
259:17 - and then over here inside color
259:20 - we give the color
259:22 - using the color class
259:25 - so like so many times I am using the
259:27 - word color
259:29 - now over here we can
259:34 - so now we have given the colors let's
259:38 - see if it is applied or not okay so it
259:40 - did apply uh
259:42 - but uh I think there is more spacing in
259:46 - both the sides okay then it is
259:49 - over here so let's add that okay so
259:52 - horizontal I'm gonna make it from 20 to
259:55 - 30. okay
259:59 - now instead of pink I'm gonna make it
260:03 - oh okay so that it is like a blanked and
260:07 - means not eye catching and not
260:10 - disturbing the feel of the app okay so
260:12 - these all are material UI Basics which
260:15 - every developer should know okay so this
260:18 - is done
260:20 - now after this we shall start with the
260:22 - list of sellers okay so for that let's
260:26 - get out of this Row first so this row is
260:29 - inside padding okay I'm gonna comment it
260:32 - so that it is better
260:35 - header so this is the header over here
260:40 - cool now after this we are gonna have
260:43 - the list of
260:45 - sellers
260:47 - okay so for that what I'm gonna do is I
260:50 - can use a list view but I prefer using a
260:53 - column Okay so
260:55 - I'll create a column now again as we all
260:59 - know column has children
261:01 - now instead of a map what I'm gonna do
261:04 - is we have the sellers over here I guess
261:07 - okay so first we need to send the seller
261:12 - from splash screen and receive it in the
261:14 - seller screen so let's do that first
261:17 - so over here we are sending it okay now
261:23 - over here we can send the arguments by
261:26 - writing arguments and the argument is
261:28 - gonna be
261:29 - value
261:32 - okay
261:36 - so this is done now we need to receive
261:39 - these values okay so for that first I'll
261:43 - import the seller class over here
261:45 - otherwise it is gonna give us lots of
261:48 - warnings
261:49 - so we go inside models
261:52 - and then we have a seller dot dot okay
261:58 - so now let's I'll create a list inside
262:00 - the build method not inside the class
262:03 - because of null safety it is better you
262:05 - do it over here if you do it over here
262:07 - you will have to make it a VAR type of
262:11 - variable and then whenever you use we
262:14 - will have to use the ask keyword so that
262:16 - is a lot of work instead of that I will
262:18 - be creating the variable in the build
262:20 - method itself
262:22 - okay so we are gonna get a list a list
262:25 - of seller
262:27 - okay and I'm gonna call it sellers
262:30 - and we get it from model route
262:38 - dot off
262:42 - and inside this we have context
262:45 - dot settings I guess
262:48 - yes settings dot arguments
262:53 - okay so we got the sellers now let's
262:56 - type Caster test Service as a list of
263:01 - seller
263:03 - okay so what we are actually doing over
263:06 - here is we are getting the arguments
263:07 - over here and now we simply can't store
263:10 - it inside a data type of inside a
263:13 - variable of type list seller so we are
263:15 - typecasting this argument as uh list
263:18 - seller because we already know that the
263:21 - argument that we are gonna get over here
263:23 - is at the end gonna be of type list
263:26 - seller okay so over here it is giving a
263:29 - error and that is because of null safety
263:31 - so I told you null safety will
263:37 - is a lot of trouble okay so what I
263:40 - basically did was add us added a
263:42 - question uh exclamation mark over here
263:45 - okay so by that what it means that if
263:48 - this part is null it will not execute
263:50 - after it okay so by that we prevent
263:53 - Tanner
263:55 - okay so this is done now let's use this
263:57 - sellers so for that inside this children
264:00 - I'm gonna write sellers
264:05 - dot map
264:09 - okay so means like I'll get each item
264:13 - and do something to it and then I again
264:15 - convert it to list
264:18 - okay so now uh to check if everything is
264:21 - working or not over here I'm gonna
264:22 - return a simple
264:24 - container container
264:27 - I'm sorry not alignment container of
264:29 - height
264:31 - uh 50.
264:34 - end of color
264:40 - s
264:41 - dot blue
264:45 - okay so this is just to see if this
264:47 - thing is intact or not okay so once this
264:51 - is done okay so now it is of course
264:53 - gonna give an error because we need to
264:55 - come from splash screen to have some
264:58 - value for this okay so let's do a full
265:00 - restart
265:10 - and we get a blue section over here
265:13 - these are four items actually but they
265:15 - are not separated so we are unable to
265:18 - make the difference okay so now I'm
265:21 - gonna create an item for it so now the
265:23 - item for it is in itself gonna be pretty
265:26 - long so I'm not gonna keep it in the
265:28 - same file it will increase the length of
265:31 - code and that will in turn make it very
265:33 - hard to navigate and fix errors so for
265:35 - that I'm gonna create a new uh folder
265:39 - ah that will be called widgets okay and
265:42 - inside this I'm gonna create a new file
265:44 - that will be called seller
265:47 - item dot dot
265:50 - okay so I have a seller item now let's
265:54 - import material
265:57 - dot dot
266:00 - okay uh now after this over here let's
266:03 - okay sorry first let's create a
266:07 - a class over here that is a stateless
266:09 - class
266:10 - okay again I forgot the codes over here
266:14 - now let's create a stateless class over
266:16 - here and that is gonna be called a
266:19 - seller item
266:22 - okay and then it will again
266:24 - return a variable uh container of height
266:28 - 50 and this time of color pink
266:36 - okay
266:40 - now let's add it inside the seller
266:42 - screen so let's import this
266:46 - so for this let's get out of the screens
266:49 - folder go inside with this folder
266:53 - and then select the seller item okay and
266:57 - now over here instead of returning this
267:01 - I am simply gonna return the
267:04 - seller item
267:09 - okay so this is done
267:12 - let's save this and it turned pink okay
267:16 - so prefer const we will prefer const
267:22 - now this seller item needs this e okay
267:26 - so let's take it okay because that has
267:28 - the details of seller and we need that
267:31 - inside our item to display it okay so
267:34 - first we'll import the model class
267:39 - that is inside models folder
267:42 - and then we have seller now over here
267:45 - I'm gonna create
267:47 - a seller and that is seller
267:51 - okay now uh we can use this Constructor
267:55 - only this is the by default Constructor
267:57 - so what I'm gonna do is add a comma add
268:01 - add the rate required which means it
268:03 - cannot be avoided
268:06 - required this
268:09 - dot seller
268:11 - okay so with this it is done
268:14 - this dot seller
268:17 - seller can't have a value of null
268:20 - Okay so
268:22 - add required I did add required okay so
268:25 - I guess the way of writing required has
268:28 - changed or something
268:29 - okay I'll remove the const from here
268:32 - cool now we have a warning over here so
268:35 - to fix that
268:36 - I'm gonna add final to it and then over
268:39 - here we can again add const okay so you
268:42 - might be seeing that I am doing
268:44 - something then changing then doing it
268:45 - back because I am also not that well
268:48 - acquainted with null safety I just
268:50 - follow all the warnings that come up and
268:52 - act accordingly okay so now over here as
268:55 - if that is a named parameter we need to
268:59 - give the name okay
269:05 - invalid const value e we can't have a
269:08 - const over here anymore okay so this is
269:10 - done
269:14 - let's do a full restart
269:17 - okay now inside this seller class I want
269:20 - all the container to have some margin
269:23 - Okay so
269:29 - what I'm gonna do is I'm gonna add
269:30 - margin okay and the margin is const
269:34 - engine sets
269:36 - Dot
269:38 - all I think for the time being 10.
269:43 - let's see so now we get four items over
269:46 - here now we shall continue with the UI
269:49 - in the next video thank you so up until
269:52 - the previous video we have made uh our
269:56 - splash screen getting the list of
269:58 - Sellers and then routing to the splash
270:01 - seller screen so you can see over here
270:04 - now today we are gonna continue making
270:07 - this screen look like this screen okay
270:10 - so let's get started so these all are
270:13 - basically our seller items so I'm gonna
270:15 - make changes in that okay so I'll give
270:18 - it let's say a height of 200
270:22 - okay so now the height is appropriate
270:25 - but we are getting a render flexor and
270:27 - the error is because I am not using a
270:30 - list but I am using a column with a map
270:32 - function so in the seller screen you can
270:36 - see that the list of sellers is a column
270:38 - and not a list okay so to fix this what
270:42 - I'm gonna do is I'm gonna surround this
270:45 - container the topmost column okay with a
270:50 - another widget and the widget is single
270:53 - child scroll View
270:57 - okay so now once I add this then let's
271:00 - save this and now we shouldn't get this
271:02 - error okay so now you can see the error
271:05 - is gone and it is scrollable as well
271:08 - okay so now after this let's add border
271:11 - radius to it so let's see what is the
271:14 - Border radius that we apply over here
271:16 - and it is 10 as you can see so let's
271:19 - apply the same okay so for that we will
271:22 - create a decoration
271:24 - and then the decoration will be a box
271:27 - decoration widget
271:31 - okay now since we have Boxer decoration
271:35 - the colors can't be outside so we'll
271:38 - move it inside the decoration and then
271:41 - finally apply the Border radius so for
271:43 - that we have another parameter called
271:45 - border radius and then it will take a
271:48 - border radius dot circular widget okay
271:53 - and the radius is gonna be 10 as in 10
271:55 - pixels
271:57 - okay let's format it save it
272:00 - and now we get the Border as we get
272:04 - rounded borders and the radius is 10
272:06 - pixel okay so now the next thing is the
272:09 - colors okay so you can see all these
272:12 - items have different colors so I'm gonna
272:14 - create a list of this colors and then
272:18 - send it to this item okay so now the
272:21 - list of colors is gonna be constant so
272:23 - as per the standard practice it should
272:25 - be inside our init State and for that we
272:29 - need to convert it from a stateless to a
272:31 - stateful widget
272:33 - okay and then over here I am gonna call
272:35 - init state
272:40 - okay now over here I'm gonna create a
272:43 - list
272:45 - color
272:46 - seller
272:48 - items background
272:52 - color okay let's initialize it now I'll
272:57 - add values to it inside in its state
273:00 - okay so over here I'm gonna write
273:02 - sellers
273:05 - seller items
273:07 - seller items background color dot add
273:11 - and then over here another color so now
273:13 - as I have already discussed for color we
273:16 - always start with 0 xff now this FF can
273:20 - change that is actually the alpha value
273:22 - you can look for different types of
273:24 - alpha value on the internet okay so the
273:27 - first color we can find it over here so
273:30 - I'm simply gonna copy it paste it over
273:33 - here and there are gonna be three more
273:35 - like this okay so now this second item
273:39 - I'm gonna copy the color paste it on the
273:42 - second row
273:44 - okay so yes this is correct
273:48 - now let's copy this
273:52 - paste it over here and the last one
273:57 - okay so I'll copy it
274:01 - and paste it okay so this is done now
274:04 - this is giving us a warning and the
274:07 - warning will be gone if we add a const
274:11 - over here okay so let's add a const
274:17 - so you can see as soon as I add the cons
274:20 - to the
274:21 - error is gone const is the keyword which
274:25 - means constant okay now let's send this
274:28 - color to these items so for sending
274:31 - first we need to receive it over here
274:33 - okay
274:34 - so for that I'm gonna create another
274:36 - widget
274:38 - color and I'm gonna call it background
274:41 - color
274:42 - now I'm gonna take it in my Constructor
274:45 - so first we need to give required
274:47 - because it is final this Dot background
274:51 - color
274:53 - okay
274:57 - now let's format it okay and over here
275:00 - instead of color I'm gonna make it
275:03 - background color
275:10 - so we have background color
275:12 - okay
275:13 - now we need to give a background color
275:16 - in our seller screen okay so let's do
275:18 - that
275:21 - over here we will have another named
275:24 - parameter that is background color and
275:27 - then over here I'm gonna give let's give
275:29 - one color for starting and then we will
275:32 - figure out a way to give the color
275:35 - according to a pattern okay so I'm gonna
275:38 - say seller
275:40 - items background color and then zero
275:43 - okay means as in the first item
275:49 - now give it a minute to understand okay
276:18 - okay so there is a small error over here
276:21 - I need to give another
276:23 - closing parenthesis so now the error is
276:25 - gone okay now let's do a full restart
276:28 - okay so that both get saved at the same
276:31 - time
276:32 - okay so let's see
276:38 - now the splash screen is here it is
276:40 - loading the sellers and yes we get the
276:43 - first color applied to all the four now
276:45 - we need to apply uh one two three four
276:49 - in accordance with the list okay so
276:51 - let's create another method that will
276:54 - return the index
276:56 - okay so for that I'm gonna make another
276:58 - method and
277:00 - get color index
277:04 - and this will take the
277:07 - index means the index of seller item
277:10 - okay so like uh zero one two three it
277:14 - will work fine but what if it is more
277:16 - than that okay so what I'm gonna do is
277:19 - I'm gonna simply uh
277:22 - return
277:24 - index
277:27 - mod 4.
277:30 - okay so now with this what will happen
277:33 - that the remainders can be zero till
277:35 - three that are four items and we have
277:37 - four items over here and now that I
277:40 - think of it we don't need to create a
277:42 - separate function for here for just this
277:45 - small piece of code I am gonna directly
277:48 - apply it over there
277:50 - Okay so
277:53 - overhead instead of
277:56 - this what I'm gonna do is index modulus
278:00 - 4 now index we will get off Norm here so
278:03 - what I'm gonna do is sellers
278:05 - dot index of e okay so now we get the
278:10 - index and then we apply modulus 4 and
278:13 - then whatever is the remaining we send
278:15 - it as our background color okay so I
278:18 - hope you understood this calculation
278:20 - part now let's save this and see
278:23 - okay so you can see this is working fine
278:25 - four different colors are applied to all
278:27 - the four now after this if there were
278:30 - more items also the pattern would be
278:33 - same okay so I hope you understood now
278:36 - since now that the background is done
278:39 - let's add content okay before content
278:42 - you can see the margin towards the right
278:44 - or left or very less as in in the UI it
278:48 - is little bit more and among each other
278:51 - as well okay so let's fix that first
278:53 - okay so instead of margin All I'm gonna
278:57 - make it symmetric
279:00 - and then gonna make it vertical
279:04 - so vertical it is gonna be 15
279:08 - okay because if it is 15 then over here
279:10 - it is gonna be 30 15 from this item 15
279:14 - from this item so you need to do the
279:17 - calculations accordingly and then
279:19 - horizontal let's make it 20.
279:24 - let's see how it looks
279:28 - okay so there is little bit more
279:34 - let's make it 30
279:38 - okay this is fine now
279:41 - but okay I'll I'll let it be 20 only if
279:46 - there is more space left I'll bring it
279:48 - back to 30. okay so you need to do this
279:51 - little tweaks on your own because it is
279:54 - not that as you design the screen and
279:57 - all those things are always gonna be
279:59 - same for an actual device okay what I
280:03 - mean is that this is the screen size
280:05 - that we have taken for our design but
280:08 - the screen size in actual development is
280:11 - a little bit less so we need to means do
280:14 - little bit tweakings here and there
280:16 - accordingly okay I hope you get ma get
280:18 - the just what I am trying to say so in
280:21 - this video we are gonna continue with
280:23 - our seller screen UI okay so let's
280:26 - directly get to it okay so now uh we are
280:30 - gonna add the content to these items
280:34 - okay so the layout is gonna be simple
280:36 - this is gonna be a road so this will be
280:39 - the first item of the row this will be
280:41 - the second item of the row and now
280:43 - inside the first row we will have a
280:45 - column where columns first item is gonna
280:48 - be the name columns second item will be
280:50 - the address and the third item will be
280:53 - the rating now since we don't have a
280:56 - rating for now we will simply write no
280:59 - rating okay so let's get started so for
281:02 - that I'll go inside my seller item
281:05 - inside this container I'll create a
281:07 - child the child is gonna be a row
281:10 - okay
281:13 - now the row now let's
281:16 - the
281:19 - just one minute yes so the row text
281:22 - children
281:23 - okay
281:25 - now the first child is gonna be text and
281:28 - the text is simply gonna be seller
281:31 - dot name
281:35 - okay and the next one is gonna be our
281:38 - image so I'm gonna write image
281:41 - dot Network
281:43 - and then seller Dot image
281:49 - okay so now why are we getting an error
281:52 - over here and that is because of null
281:54 - safety so I'll add a exclamation mark
281:57 - over here and here as well
282:00 - okay
282:02 - so this is because in our seller in our
282:06 - seller dot dot we had this question mark
282:09 - everywhere so that is the reason
282:11 - okay so now we are getting an error okay
282:15 - that let's see okay so that is because
282:17 - our URL is incomplete because what we
282:21 - are getting from the database is just
282:23 - the partial URL the base part I need to
282:27 - add it myself so for that I'll go inside
282:30 - server Handler
282:32 - copy this URL okay so this is our base
282:36 - URL and then paste it over here so over
282:38 - here I'll use again string interpolation
282:42 - okay so first I'll add sorry first I'll
282:46 - add quotes then
282:48 - uh curly brackets then I give a dollar
282:51 - over here
282:52 - okay which marks it as string
282:55 - interpolation and then I write this now
282:58 - instead of API this is gonna be assets
283:01 - because I have created a assets folder
283:03 - where I am storing all the images on the
283:06 - server okay so now once this is done
283:09 - let's do a restart
283:12 - okay now I'll do a full restart
283:19 - so it will again give better because the
283:22 - spelling over here is wrong I am I'm
283:23 - sorry for that
283:41 - okay so now you can see the image has
283:43 - started loading now give it a minute
283:46 - once we give it a few seconds and then
283:49 - all the images will be loaded okay
283:52 - so now since we have the images we are
283:55 - good to go okay so now I want this image
283:58 - to be on the rightmost corner okay so
284:02 - for that in a row what I'm gonna do is
284:05 - I'm gonna give main axis alignment
284:08 - ok
284:09 - so main axis alignment and the main axis
284:14 - alignment is gonna be space between
284:21 - mint is gonna be
284:23 - space between
284:25 - okay so that it will leave all the space
284:27 - in between the two items
284:31 - so now you can see the image is pushed
284:33 - to the right but not so much to the
284:37 - right I wanted to have a little bit
284:39 - margin towards the right so for that
284:42 - what I'm gonna do is I'm gonna wrap this
284:45 - image with a
284:47 - let's say padding okay and then instead
284:50 - of all I'm gonna make it only and then
284:52 - it is gonna be only in the right
284:56 - now instead of it let's make it 10 and C
285:00 - okay
285:02 - so now I have margin over here
285:06 - okay so this looks pretty decent I I'll
285:09 - try increasing
285:11 - let's make it 15.
285:14 - okay so now this is fine but then the
285:18 - text over here is little bit small
285:20 - okay so anyways let's see what we can do
285:23 - now let's get to the content part so
285:27 - I'll remove this text instead of that
285:29 - I'm gonna add a column over here
285:32 - ok now the column is gonna have children
285:36 - the children will first have a text the
285:39 - first text is gonna be the name
285:42 - so seller Dot
285:45 - name then a question mark As we just saw
285:48 - for null safety then the
285:52 - address and then the then our text
285:55 - simply saying no rating so seller Dot
285:59 - address and then over here our text that
286:04 - says
286:05 - no rating
286:08 - okay now over here I can add a const
286:11 - because it is constant it is not
286:13 - changing
286:14 - okay let's see how it looks
286:18 - so I was hoping for some I was expecting
286:21 - that there will be some error okay so
286:24 - this is mainly because of the address so
286:27 - we will deal with address later first
286:30 - let's make the name as we have in the UI
286:33 - okay
286:36 - so for that I'm gonna wrap it with a
286:39 - padding
286:41 - and the padding is gonna again be only
286:44 - and then I want
286:46 - from left to B5
286:51 - from top to be 10
286:55 - and from right
286:58 - now I don't want anything from right
287:00 - okay so let's see
287:03 - now I'm gonna make it little bit more
287:06 - from Top it is gonna be 20 from left it
287:09 - is gonna be twenty
287:14 - from Top let's make it 50.
287:18 - okay
287:19 - so this is done now let's add a
287:22 - decoration so for that I'm gonna use
287:25 - style now the style is gonna be off
287:28 - Google font so let's first import that
287:30 - import
287:34 - Google fonts dot dot
287:39 - okay now
287:43 - over here the style
287:48 - is gonna be Google fonts
287:53 - okay and then let's see what is the font
287:56 - that we are using in our design
288:00 - so it is Poppins so we are gonna use
288:04 - pop-ins over here p-o-p-p-i-n-s
288:13 - okay
288:14 - so
288:16 - this is fine
288:24 - so just to give it a minute to format
288:36 - yes now I'll add a color okay and the
288:40 - color is gonna be black
288:48 - so for that I'll use the color cenum
288:51 - color dot black and then let's give a
288:54 - size of
288:56 - what we had over here it is 18 so let's
289:00 - give it 18 and see
289:02 - whereas I think we might need to change
289:05 - it so first let's see
289:17 - okay now this this image over here is
289:20 - making lots of trouble
289:23 - okay so give me a minute I'll change it
289:25 - for now I'll make it only three items
289:28 - okay so I have deleted this seller now
289:31 - later once I finish this video I will
289:35 - add another lady with a different
289:38 - picture of the same size as others okay
289:42 - so first I'll do a full restart and get
289:46 - and this this item will be removed Okay
289:50 - so
289:51 - let's see
289:57 - okay and you can see there are now only
289:59 - three items I removed the
290:02 - the lady who was here okay because the
290:05 - image was not what we needed and it was
290:08 - causing lots of error now the image will
290:10 - load slowly I have little bit network
290:12 - issues today okay so for now this name
290:16 - name is done okay let's see so the name
290:20 - needs to be bold and little bit little
290:22 - bit more towards the right and less
290:26 - towards the bottom okay so instead of 50
290:30 - I'm gonna make it 30 instead of 20 I'm
290:33 - gonna make it 25
290:37 - and the text is gonna be bold so to for
290:40 - to for making it bold we use Font weight
290:45 - okay and then we have font weight enum
290:49 - dot bold
290:53 - okay
290:55 - now let's see
290:59 - so this is fine now let's add the
291:03 - address
291:05 - okay
291:06 - so for that
291:08 - I'm gonna use this let's save it
291:13 - then again it is giving us an error now
291:16 - there is a way so that this sticks
291:20 - inside uh specified
291:23 - height only uh width only so let's see
291:26 - how to do that for that I'm gonna do a
291:28 - simple Google
291:40 - not Android
291:57 - foreign
292:19 - it with a container or a sized box
292:24 - okay so that is one method
292:27 - next method is we use over float text
292:31 - overflow ellipses
292:34 - but for that Max lines okay so I'll try
292:37 - that because I haven't used that earlier
292:39 - Okay so
292:42 - Max lines is gonna be two and then
292:47 - overflow
292:48 - is gonna be overflow
292:55 - so it was text overflow dot ellipsis
293:05 - cool let's see
293:09 - if there was absolutely no change
293:12 - so let's add it to add a container to it
293:17 - container of width
293:20 - let's say 100
293:28 - okay now it is fine I I'll make it 120
293:36 - 140
293:42 - okay let me add the same padding over
293:44 - here as well
293:47 - because you can see the text is not
293:49 - aligned so we can't means guess the
293:52 - correct width okay so from Top it is
293:56 - just gonna be 10
293:58 - but from the left it is gonna be same
294:02 - okay
294:05 - or maybe I'll make it 20.
294:08 - and from Top it is gonna be five
294:15 - and now let's see the width so let's try
294:19 - making it 150
294:21 - cool 160.
294:24 - still cool 180.
294:30 - so now it is giving errors so let's see
294:32 - 170.
294:35 - I'll gain error 160
294:38 - 5
294:43 - 164.
294:47 - okay so we stuck with 164.
294:53 - and if we have more than that then it is
294:56 - giving us three dots
295:00 - okay
295:04 - so left is again gonna be 25 because now
295:07 - it is looking ugly it should all be on
295:10 - the same alignment well that is a basic
295:12 - principle in designing I was just trying
295:15 - something out
295:17 - okay
295:18 - let's do a full restart and then we will
295:21 - add this no rating little bit below
295:27 - foreign
295:33 - do anything let's add the style to this
295:37 - address
295:38 - so for that I'm gonna use the style then
295:40 - again
295:42 - Google font dot Poppins
295:48 - okay
295:51 - and then
295:54 - and inside Poppins
295:59 - I'm gonna copy these three
296:02 - okay it is Google fonts
296:06 - then let's copy these three now the font
296:09 - size is gonna be 13
296:14 - we don't need the font weight but the
296:17 - color
296:19 - I'm sorry for that but
296:21 - let's continue okay so now this is in
296:25 - pop-ins okay now let's add this thing to
296:30 - our no ratings as well
296:34 - now we can't have const over here since
296:37 - we are using Google fonts we have
296:39 - discussed about it earlier
296:40 - okay
296:42 - no rating now let's align it align
296:48 - text align
296:55 - dot start
296:58 - okay let's see
297:02 - okay so it is in the starting only the
297:05 - entire space is this much so what I'm
297:08 - gonna do is I am again gonna surround it
297:10 - with a container or a sized box would do
297:13 - in this case as well so width is again
297:18 - gonna be
297:19 - 164.0
297:26 - now again I will have to add the padding
297:31 - okay not this one I need to add this one
297:38 - now since we are adding padding I can't
297:40 - use a sized box over here
297:43 - okay so you see how we keep on changing
297:46 - widgets according to our necessity
297:51 - so now we have no ratings over here I
297:53 - want I don't want it to be black but to
297:56 - be gray so that it clearly marks that it
298:00 - is not a primary text that I want to the
298:03 - users to focus on but a secondary text
298:06 - which is there just fulfilling its
298:09 - purpose
298:10 - okay so with this
298:12 - I okay here is some error let's see okay
298:17 - so I think in the name only by mistake I
298:19 - have added an extra space I will remove
298:22 - it from the database okay with this our
298:25 - screens UI is complete it looks somewhat
298:29 - uh as we have expected but not exactly
298:32 - we will have to work onto it so uh let's
298:37 - see what are the changes we can do in
298:39 - the next video thank you
298:41 - so in this video we shall continue with
298:43 - our better buys project so up until now
298:47 - we have created the splash screen and we
298:50 - were displaying the list of sellers okay
298:53 - so you can see over here
298:55 - we can see the list of sellers now we
298:59 - shall move forward and then if we click
299:02 - on any of the seller item we should be
299:04 - taken to this page
299:06 - okay so let's start with that
299:09 - so for that first I'll create a new
299:11 - screen okay so over here inside screen
299:14 - it is
299:17 - products
299:19 - product screen
299:21 - dot dot
299:26 - okay I'll first import material
299:32 - then create a stateless class
299:36 - that is
299:39 - product screen
299:43 - okay and over here instead of container
299:45 - it will be a scaffold
299:50 - okay and the scaffold will have a body
299:53 - and the body for now is gonna be a
299:55 - container
299:59 - okay and the container will have a child
300:03 - and the child is a text and the text
300:07 - says
300:08 - product screen okay so this can be
300:11 - referred as a boilerplate code
300:14 - very basic okay so let's save this
300:18 - now in seller screen you can see that I
300:22 - created a static route name so I'll do
300:24 - the same for product screen over here
300:27 - I'm gonna write static
300:31 - route name
300:33 - and it is gonna be
300:37 - product
300:38 - screen
300:41 - okay now I'll add this route name in our
300:45 - main dot dot okay so over here first I
300:48 - need to import it
300:49 - so import screens
300:53 - and then it is a product screen
301:07 - okay now over here in inside routes I'll
301:11 - inside routes sorry I'll add
301:15 - product
301:17 - screen dot route name
301:23 - this is gonna be const
301:27 - product screen
301:31 - all right so we have attached the screen
301:34 - to our main fragment now let's navigate
301:38 - to that screen
301:41 - okay so for that
301:44 - we will go in our seller item which is
301:47 - this item
301:48 - okay so now if we click on this we
301:51 - should go to the product screen so I'll
301:53 - go to the container okay so this is the
301:57 - container I guess yes so now over here
302:01 - I'll wrap it with a gesture detector
302:08 - and the gesture detector detects our
302:12 - gesture and the gesture is gonna be on
302:15 - tap means we want some action
302:18 - on tap and the action is very
302:22 - small means we just need to navigate so
302:24 - I'm gonna write Navigator
302:27 - dot off
302:29 - context
302:32 - push named and for name again we're
302:36 - gonna need to import that screen okay so
302:39 - over here I'm gonna write import
302:46 - and then in two screens
302:49 - and then inside the screen it is gonna
302:51 - be product screen
302:54 - and yes over here I'm gonna write
302:58 - product screen
303:00 - dot route name and then I wanna pass the
303:03 - seller which is clicked okay so which in
303:06 - this case is seller so I am simply gonna
303:09 - pass it as an argument so for that I'll
303:12 - use the named parameter arguments and
303:15 - over here I'll simply pass seller
303:19 - okay
303:20 - so with this the navigation is done now
303:23 - it should work let's do a full restart
303:25 - to check
303:36 - yes so now if I click on this
303:40 - I am taken to the product screen since
303:43 - no alignment is mentioned it has gone to
303:45 - the top left corner but the navigation
303:48 - is working properly okay so that is one
303:51 - thing now uh before continuing we need
303:54 - to get the uh products okay so for that
303:58 - we need to do an API call and as I have
304:02 - promised I have hosted the API which
304:05 - gives us the list of product
304:07 - okay it is hosted at who is reshope.com
304:10 - Slash PK and then the other
304:15 - a part of the URL so if you send a
304:19 - request to it get request you will get
304:21 - the list of products so now let's do
304:24 - this from within the app okay so for
304:26 - that first I need to create a product
304:29 - item so let's do that inside the model
304:32 - I'll create a new file and that is
304:35 - product dot dot
304:41 - Okay so
304:43 - this is gonna be class product
304:48 - then enter ID and seller ID string name
305:00 - string name
305:01 - okay then we have image price per kg
305:05 - description so
305:08 - string image
305:11 - and price
305:14 - per kg because we use camel case over
305:18 - here price per kg is gonna be like this
305:20 - and then we have the
305:23 - description
305:26 - okay and then we have interaction count
305:33 - right so now there are actually two to
305:36 - three methods of creating a class I'll
305:38 - see which one I am using okay so over
305:42 - here I am using this type of Declaration
305:45 - so I'll use the same over here because
305:48 - it is always good to maintain uniformity
305:51 - throughout the app
305:58 - um
306:02 - so now
306:04 - over here we have seller from Maps over
306:06 - here it is gonna be
306:08 - product
306:10 - from map
306:11 - and then we are gonna get a map of
306:14 - dynamic dynamic
306:17 - map
306:18 - let me check if it was Dynamic yes so it
306:21 - is dynamic okay so the first thing is ID
306:25 - so it is again into Dot
306:29 - path
306:31 - map ID
306:34 - now similarly we have seller ID
306:40 - and over here it is gonna be seller
306:43 - underscore ID because that is the key
306:47 - name over here then we have name and
306:49 - image so
306:51 - name is gonna be map
306:57 - and images gonna be
307:01 - image okay then after that we have price
307:04 - per kg so it will be like this
307:10 - price per kg
307:16 - then we have description
307:22 - over here also it is gonna be
307:24 - description
307:25 - and then we have interaction count
307:34 - all right so our product classes uh
307:38 - product model class is created now let's
307:41 - call the API okay or before calling
307:45 - first we need to add a loading screen
307:47 - over here so let's do that first
307:50 - okay in the products screen
307:55 - okay we have a container now inside the
307:58 - container uh
308:01 - I'm gonna again copy it from the splash
308:04 - screen how we had it over there
308:06 - Okay so
308:09 - we have a sized box okay so I'll copy
308:13 - this
308:15 - from splash screen to the product screen
308:18 - over here instead of it is gonna be a
308:21 - column
308:24 - column with children so the first child
308:27 - is gonna be a sized box
308:30 - okay
308:31 - and the next one is gonna be loading
308:35 - sellers
308:36 - okay so over here instead of sellers it
308:38 - is gonna be product
308:42 - loading
308:47 - products
308:49 - and we need to import Google font
308:54 - yes okay let's format this over here it
308:59 - is giving us a warning
309:01 - avoid unnecessary containers okay that
309:04 - is actually correct
309:06 - we don't need a container because we
309:09 - already have a column okay so let's save
309:11 - this
309:14 - and it is over here so I need to bring
309:16 - it to the center so for that I'll use
309:19 - main access alignment
309:25 - okay and then it has an enum main axis
309:28 - alignment
309:37 - Dot Center
309:42 - okay so after that we also have cross
309:45 - access alignment when we are talking
309:48 - about column this is our main access
309:50 - alignment and this is our cross access
309:52 - alignment
309:53 - so we also have a cross axis
309:57 - alignment and that also has a cross
310:00 - access enum
310:06 - Dot Center so we brought this in Center
310:10 - as well
310:13 - okay
310:18 - cool now let's format this and save this
310:23 - and we have it over here okay so
310:27 - actually what is happening that the
310:28 - column is taking only this much space we
310:31 - wanted to take the entire width okay so
310:34 - now we will again have to bring back our
310:37 - container okay and in the container we
310:41 - will give it a width
310:45 - okay and the width off media query
310:53 - dot off
311:02 - dot I guess settings
311:13 - no it is the size okay and then
311:17 - the width
311:21 - or something yes so with
311:28 - thank you
311:32 - cool
311:33 - so now that we have the
311:36 - entire width let's see how it looks
311:43 - okay so now you can see it is in the
311:45 - center and this will keep on loading
311:48 - once uh we have the products means once
311:51 - we get the response from the server we
311:53 - shall display the products over here
311:55 - okay so that we shall see in the next
311:58 - video thank you
312:01 - so in this video we shall continue from
312:03 - where we left off in the previous video
312:05 - so up until the previous video when we
312:08 - click on any of the item we get a screen
312:10 - and in the center it says loading
312:13 - products so now let's write the server
312:15 - function to actually load the products
312:18 - okay so for that we already have our
312:21 - product class over here okay so let's go
312:24 - inside server Handler and I have already
312:27 - imported the product class over here so
312:30 - let's create a function to get the list
312:32 - of products
312:33 - okay so this will be a
312:36 - future
312:39 - of list
312:42 - list of products
312:45 - okay
312:49 - sorry
312:50 - yes and over here the function name can
312:53 - be get
312:55 - products
312:57 - per seller
313:00 - okay then I'll take the seller ID as
313:03 - well because
313:05 - that is required you would remember as
313:08 - we did in the API
313:10 - we need the seller ID to get the
313:13 - products of the seller okay so now let's
313:16 - actually write the function okay so
313:20 - first we surround it with our try catch
313:24 - because we are using because we are
313:28 - interacting with the server there might
313:30 - be some error Okay so
313:34 - now over here I will create an empty
313:36 - list of product
313:46 - okay now let's
313:48 - call write the server function so for
313:51 - that I'll create a response variable
313:54 - response
313:57 - is equal to a weight HTTP dot get
314:01 - okay then we have URI
314:04 - dot parse and then we have the function
314:07 - so we'll again use the string
314:09 - interpolation we add the base URL I'm
314:12 - sorry
314:13 - so we write this till day sign in
314:16 - JavaScript
314:18 - so we have a dollar then base URL
314:26 - okay so our base URL is still apis and
314:30 - now in the API after apis we have gen
314:35 - product and then
314:37 - seller ID and then the seller ID okay so
314:41 - I have already hosted this API so you
314:44 - can directly use this API or the API
314:46 - that you guys have made okay watching
314:50 - the previous parts of the video
314:53 - okay so now over here instead of seller
314:56 - ID is equal to one this is gonna be
314:58 - again seller ID which we take over here
315:01 - in the function using string
315:03 - interpolation
315:04 - okay so with this this is done
315:08 - okay
315:12 - now it is giving us an error over here
315:14 - yes so that is gone so now after this
315:17 - line we have the response so now the
315:20 - rest of the part is gonna be similar as
315:22 - above so I am simply gonna copy this
315:28 - paste it over here and do the
315:30 - changes okay so I can call this
315:35 - products list and this is gonna be
315:38 - products okay
315:43 - and then over here instead of Sellers
315:46 - List It is gonna be products list and
315:48 - instead of sellers it is gonna be
315:50 - products instead of seller it is gonna
315:52 - be product
315:54 - okay and over here also we are gonna
315:56 - return
315:58 - products
316:02 - all right so with this we have this
316:05 - function that gets us the list of
316:07 - products per seller Okay so
316:11 - let's comment it getting list
316:15 - of products
316:18 - per seller okay so if I write it if I
316:22 - give two dashes then that means it is a
316:24 - comment if I give 3 that means it is a
316:26 - documentation okay so like if you see if
316:29 - I hover around this we get this so this
316:33 - is the documentation of this future so
316:36 - now similarly when we will use get
316:38 - products per seller somewhere else and
316:40 - we hover over it we will get getting
316:42 - list of sellers per seller okay so even
316:45 - if you don't know what this does just by
316:47 - hovering on it you will get this
316:48 - documentation and you will know that
316:51 - this function Returns the
316:53 - list of products per seller okay so I am
316:56 - I hope this is making sense
317:00 - okay so we have our function now now
317:03 - let's go to the products screen where we
317:06 - actually call it
317:09 - okay
317:11 - so over here I have already imported
317:13 - products in the model seller the model
317:16 - product and server Handler so I was
317:19 - trying something that is why all these
317:21 - things are already imported okay so
317:24 - before we start let's get rid of this
317:26 - warning
317:27 - so over here we have container we can
317:30 - change it with sized box I think that
317:33 - will be the solution
317:36 - okay just add this ignore thing for now
317:39 - okay we'll see what can be done later
317:42 - now we need to call the function so for
317:45 - that I'll convert this stateless to a
317:48 - state full widget okay now uh in from
317:53 - the seller item we need to send the
317:55 - seller details in the product screen so
317:58 - that we can get the seller ID and then
318:00 - call this function which we just created
318:02 - in a server Handler because if you
318:05 - remember we are taking a seller ID over
318:07 - here okay so I'll open my seller item
318:13 - and over here you can see uh the entire
318:17 - thing is wrapped with a gesture detector
318:19 - and in the on tap section I have pushed
318:22 - it to product screen dot route name and
318:25 - I have already added the argument as
318:27 - seller okay means this seller so now
318:30 - let's get this seller in our product
318:32 - screen okay so as you have seen we need
318:36 - to get this inside the build method okay
318:39 - so over here simply I'm gonna write
318:42 - product product
318:45 - is equal to modal route
318:51 - dot off
318:57 - context
319:02 - dot settings
319:07 - dot arguments
319:12 - okay and then I type casted to product
319:17 - okay so with this we have our okay sorry
319:21 - we are sending a seller right yes we are
319:25 - sending a seller I can't simply store it
319:27 - inside product I'm extremely sorry this
319:30 - was
319:30 - my mistake so this is seller
319:35 - the variable name is also seller and we
319:38 - are will Typecast it to
319:40 - seller
319:47 - okay so now over here again because of
319:50 - null aware I need to add a question mark
319:52 - okay then that error is gone now once we
319:56 - have the seller let's call the our
319:58 - function that we wrote in server Handler
320:01 - okay so for that I am simply gonna write
320:03 - over here avoid
320:06 - get products per seller
320:10 - okay and over here simply server Handler
320:19 - dot get
320:22 - products per seller and now if you can
320:24 - see if I hover on it I am getting
320:26 - getting list of products per seller so
320:30 - you can see that documentation which we
320:32 - wrote over here by three dashes is
320:36 - showing over here okay so you see that
320:38 - is very helpful if someone else reads
320:41 - your program and doesn't know what this
320:43 - function is so they can easily know it
320:46 - okay then over here in this I get a
320:48 - seller ID so int
320:50 - seller ID in this function
320:53 - okay and that is gonna be the seller ID
320:57 - dot then
320:59 - okay where we get the response and Dot
321:02 - catch error okay in case of any error so
321:05 - for now I am simply gonna print the
321:07 - error
321:12 - okay let me just format it
321:21 - yes so now over here also instead of
321:24 - doing anything I'll simply print the
321:26 - value so as to check if the function is
321:28 - working properly or not and then post
321:32 - that we will
321:33 - do the UI changes most probably in the
321:37 - next video okay so let's call this
321:39 - function over here inside the build
321:42 - method because over here only we have
321:44 - the seller and this method needs a
321:47 - seller ID Okay so
321:51 - is get products
321:54 - per seller and the seller ID is gonna be
321:56 - seller dot ID
322:00 - okay
322:03 - okay so I think I need to give a
322:06 - question mark over here because of the
322:08 - null aware
322:09 - okay there is another method where we
322:11 - don't need to see give the question mark
322:14 - maybe I'll show that in the next model
322:16 - class that will create okay so for now
322:19 - I'll do a full restart
322:25 - now we are on the splash screen
322:29 - we got the seller so now if I click on
322:31 - any of the sellers so over here you can
322:34 - see we are getting the products of that
322:36 - seller instance of product means we have
322:39 - these many products one two three four
322:42 - five okay so we are getting the products
322:46 - of the seller in this screen so this
322:48 - function is working the one which we
322:51 - wrote in our server Handler okay so in
322:54 - the next video we will update the UI
322:57 - accordingly okay so see you in the next
323:00 - video thank you
323:01 - so up until the previous video we were
323:04 - getting the list of products but not
323:06 - updating the UI okay so let's do that in
323:10 - this video okay so for that let's open
323:12 - our product screen now over here I'll
323:15 - create a global variable that will store
323:17 - our products so it is gonna be a list
323:21 - of product
323:24 - and we can call it products
323:27 - okay and now I'll initialize it with a
323:30 - empty
323:31 - list okay now over here where we are
323:35 - getting the value let's store it inside
323:37 - this variable and I also want to update
323:40 - the state so that according to that I
323:43 - can means remove the circular indicator
323:47 - that is that comes on the screen okay so
323:50 - for that I'll remove this and give a
323:52 - bracket over here because we are gonna
323:54 - use a set state
323:57 - so set state
324:00 - and then inside this I'll
324:02 - update the value so products
324:06 - is gonna be value
324:12 - okay so we have done we are done with
324:16 - this now since we are using set State we
324:18 - will have to add this inside and if
324:21 - block so that it executes only once
324:24 - because if we don't do so it will keep
324:26 - on executing constantly and and that
324:30 - many server requests would be sent and
324:33 - after a time it will hit a timeout and
324:36 - then there will be bugs okay so for that
324:39 - I'll create another Boolean variable so
324:41 - Bool
324:43 - first exec and this is true okay so if
324:49 - first exec is true then only we call
324:51 - this function get products per seller so
324:56 - if
325:02 - if
325:04 - first first exec then we are getting the
325:07 - get products per seller
325:10 - okay
325:14 - and then I also want to make it to false
325:18 - so that it doesn't keep on executing
325:20 - after the first time
325:23 - so it becomes first exec is equal to
325:27 - false
325:30 - okay so let me just format this
325:39 - yes so now over here we are getting the
325:42 - products and storing it inside products
325:45 - variable so now over here what we can do
325:47 - is we can check if the products variable
325:50 - has some value and if it has some value
325:52 - then we don't want to show this circular
325:54 - progress indicator or the text that say
325:58 - says loading products okay so for that
326:00 - I'll simply over here add an if if
326:05 - products
326:11 - Dot
326:13 - length
326:15 - is greater than zero
326:20 - okay
326:22 - no sorry if the
326:24 - better than this it would be if the
326:28 - products
326:29 - if the products is equal to null then
326:32 - only show this
326:36 - and this
326:39 - okay because if it is not null then we
326:41 - don't want to show this we actually want
326:43 - to show the products that we got okay so
326:47 - let me just format this and do a full
326:50 - restart
327:03 - okay so now if I click on this Albert
327:05 - Einstein
327:15 - nothing is happening okay so I think it
327:19 - got it got the product pretty fast
327:22 - anyways just to confirm I'll add a print
327:25 - over here
327:28 - okay so that I know that it actually got
327:30 - the products
327:32 - foreign
328:05 - okay so it got the products pretty fast
328:09 - that's why we were not able to see the
328:11 - loading icon but if the network was
328:14 - little bit slow we would see that and as
328:16 - soon as we would get the products then
328:19 - uh we would then that would disappear
328:22 - okay so now that we have the products
328:24 - let's start designing it okay so for
328:27 - that
328:28 - I'm gonna open the figma file yes so now
328:32 - you can see this is how our products
328:34 - screen should look so we'll start from
328:37 - the top first is this uh better buys and
328:40 - the image over here so if you would
328:43 - remember this is the exact same thing as
328:46 - we had in the seller screen so what I'm
328:49 - gonna do is I'm simply gonna copy from
328:51 - there and paste over here before that
328:53 - I'll add comments to it
328:57 - loading widgets
329:01 - okay now over here after product let's
329:05 - add that so for that I'll go to the
329:07 - seller's screen
329:09 - and inside the scaffold inside the
329:13 - children we have this
329:14 - header so I am simply gonna copy it
329:25 - okay so it is still here
329:30 - copy it
329:32 - paste it over here
329:42 - okay so now we got it in the center and
329:45 - that is uh because the loading widgets
329:49 - were aligned to the center okay so then
329:52 - that
329:54 - doesn't look good so what I'm gonna do
329:56 - is I'm gonna wrap these two items in a
329:58 - separate column that will be a part of
330:00 - the bigger column okay so over here
330:03 - first I'll make the main axis alignment
330:06 - to start or simply just removing it will
330:09 - also do because
330:10 - start is what is set by default okay and
330:15 - over here the loading widgets I'll
330:16 - remove this because I don't need it
330:20 - and now over here I'll select these two
330:22 - then use the refactor tool which in my
330:25 - condition is shift option r
330:28 - and now refractoring available great
330:33 - so I'm gonna create a column
330:36 - myself then add children
330:45 - okay and then inside this I'm gonna add
330:48 - these two items
330:56 - over here okay now let me just format it
330:59 - yes okay so over here you can see if the
331:02 - products is null then only this column
331:04 - will be visible
331:06 - okay and now what I'm gonna do is I'm
331:09 - gonna apply main axis as a center to
331:12 - this item okay so that it doesn't hinder
331:15 - the parent column okay so over your main
331:18 - access alignment so again over here I'll
331:22 - use the main access alignment enum
331:32 - and I want to make it sent
331:36 - okay
331:38 - so now this issue is solved and we also
331:42 - have our starting part cleared okay
331:45 - sorted out so we have this
331:48 - now let's redesign this so
331:51 - we have the products now we just simply
331:54 - want to display it like this
331:56 - okay so for this I can either use a row
332:00 - or a list view so using row is very
332:04 - similar to how we use the column while
332:07 - displaying the sellers so over here
332:09 - instead of that I am gonna use a
332:12 - a list okay so
332:16 - over here
332:20 - list of items
332:23 - let me check if there was some title no
332:25 - okay
332:29 - so over here it is simply gonna be a
332:31 - list View
332:33 - I think I'll use Builder because
332:37 - why not list View
332:39 - dot Builder
332:42 - okay and then it has an item Builder
332:46 - so it will definitely because it is a
332:48 - builder it will definitely take a
332:50 - context
332:51 - okay and it will return a item so the
332:55 - item is gonna be a container for now
332:57 - okay a container
333:00 - means just like a placeholder I am
333:02 - adding it okay so I think this takes
333:05 - something more than build context yes
333:08 - so over here in the documentation you
333:10 - can see it takes the context as well as
333:12 - the index okay
333:14 - so index so now the error should be gone
333:17 - now we need to add a few more things to
333:20 - this Builder
333:21 - okay there are a few required things let
333:24 - me just go through all
333:27 - yes so I need to add the item count so
333:30 - the item count is gonna be
333:32 - products Dot
333:36 - I think it is products Dot
333:39 - length yes so I always get confused
333:42 - between length and size okay so now over
333:46 - here we have this now in this container
333:48 - I am simply
333:49 - uh gonna write
333:51 - like
333:54 - height is around
333:56 - 50.
333:58 - okay width is around 50 and a margin
334:05 - okay and the margin is gonna be
334:08 - agent sets not all 5.0
334:15 - okay let me just format this
334:22 - yes so once we have formatted this let's
334:26 - see how it looks
334:42 - okay
334:48 - okay so it is giving us a bunch of
334:50 - errors
334:52 - let me check
334:55 - okay because we need to give it a has
334:58 - size okay so what I'm gonna do is I'm
335:01 - gonna wrap it with a sized box okay and
335:03 - the height is gonna be
335:06 - let's say 50.
335:24 - okay so we are getting the container
335:26 - over here we are not able to see because
335:28 - no color is there so I think I'll add
335:31 - some color colors Dot pink okay
335:44 - yes so we are getting it over here
335:48 - so you can see these are our items
336:00 - okay now over here this is like actually
336:04 - a particular column over here I'll
336:06 - increase the height so it becomes
336:10 - little bit more clear
336:14 - yes so you can see these are like a
336:18 - vertical list but I want a horizontal
336:20 - list because the design suggests
336:23 - horizontal list so over here inside this
336:26 - I think we have a axis or scroll
336:30 - Direction yes so we have a scroll
336:32 - Direction and it takes an axis I guess
336:35 - yes it takes an axis which is again axis
336:39 - is an enum and then horizontal
336:41 - okay
336:43 - so you see it is not possible to
336:45 - remember all the things you just need to
336:47 - have good amount of practice to figure
336:49 - out which one it is okay so now you can
336:52 - see it is in
336:54 - it is in a row okay so now in the next
336:58 - video we shall design each item okay so
337:01 - this was for the video thank you so up
337:04 - until the previous video we were getting
337:06 - the list of products but not updating
337:08 - the UI okay so let's do that in this
337:11 - video okay so for that let's open our
337:14 - product screen now over here I'll create
337:17 - a global variable that will store our
337:19 - products so it is gonna be a list
337:22 - of product
337:25 - and we can call it products
337:29 - okay and now I'll initialize it with a
337:31 - empty list okay now over here where we
337:36 - are getting the value let's store it
337:38 - inside this variable and I also want to
337:41 - update the state so that according to
337:44 - that I can means remove the circular
337:47 - indicator that is that comes on the
337:50 - screen
337:51 - okay so for that I'll remove this and
337:53 - give a bracket over here because we are
337:56 - gonna use the set state
337:58 - so set state
338:02 - and then inside this I'll
338:04 - update the value so products
338:08 - is gonna be value
338:14 - okay so we have done we are done with
338:17 - this now since we are using set State we
338:20 - will have to add this inside and if
338:23 - block so that it executes only once
338:25 - because if we don't do so it will keep
338:28 - on executing constantly and and that
338:32 - many server requests would be sent and
338:34 - after a time it will hit a timeout and
338:37 - then there will be bugs okay so for that
338:40 - I'll create another Boolean variable so
338:43 - Bool
338:45 - first exec and this is true okay so if
338:50 - first exec is true then only we call
338:53 - this function uh get products per seller
338:57 - so if
339:04 - if
339:05 - first first exec then we are getting the
339:09 - get products per seller
339:12 - okay
339:16 - and then I also want to make it to false
339:20 - so that it doesn't keep on executing
339:22 - after the first time
339:24 - so it becomes first exact is equal to
339:29 - false
339:32 - okay so let me just format this
339:41 - yes so now over here we are getting the
339:44 - products and storing it inside products
339:46 - variable so now over here what we can do
339:49 - is we can check if the products variable
339:51 - has some value and if it has some value
339:54 - then we don't want to show the circular
339:56 - progress indicator or the text that say
339:59 - says loading products okay so for that
340:02 - I'll simply over here add an if if
340:07 - products
340:10 - foreign
340:12 - Dot
340:15 - length
340:17 - is greater than 0
340:22 - okay
340:24 - no sorry if the
340:26 - better than this it would be if the
340:29 - products
340:31 - if the products is equal to null then
340:34 - only show this
340:38 - and this
340:41 - okay because if it is not null then we
340:43 - don't want to show this we actually want
340:45 - to show the products that we got
340:48 - okay so let me just format this and do a
340:52 - full restart
340:59 - foreign
341:05 - okay so now if I click on this Albert
341:07 - Einstein
341:17 - nothing is happening okay so I think it
341:21 - got it got the product pretty fast
341:24 - anyways just to confirm I'll add a print
341:26 - over here
341:29 - okay so that I know that it actually got
341:32 - to the products
341:48 - okay let me do a full restart
342:07 - okay so it got the products pretty fast
342:10 - that's why we were not able to see the
342:13 - loading icon but if the network was
342:15 - little bit slow we would see that and as
342:17 - soon as we would get the products then
342:21 - uh we would then that would disappear
342:23 - okay so now that we have the products
342:26 - let's start designing it okay so for
342:28 - that
342:30 - I'm gonna open the figma file yes so now
342:33 - you can see this is how our products
342:36 - screen should look so we'll start from
342:39 - the top first is this uh better buys and
342:42 - the image over here so if you would
342:44 - remember this is the exact same thing as
342:47 - we had in the seller screen so what I'm
342:50 - gonna do is I'm simply gonna copy from
342:52 - there and paste over here before that
342:55 - I'll add comments to it
342:59 - loading widgets
343:02 - okay now over here after product let's
343:06 - add that so for that I'll go to the
343:09 - sellers screen
343:10 - and inside the scaffold inside the
343:14 - children we have this
343:16 - header so I am simply gonna copy it
343:26 - okay so it is still here
343:32 - copy it
343:33 - paste it over here
343:44 - okay so now we got it in the center and
343:47 - that is uh because the loading widgets
343:51 - were aligned to the center okay so then
343:54 - that
343:55 - doesn't look good so what I'm gonna do
343:58 - is I'm gonna wrap these two items in a
344:00 - separate column that will be a part of
344:02 - the bigger column okay so over here
344:05 - first I'll make the main axis alignment
344:07 - to start or simply just removing it will
344:10 - also do because
344:12 - start is what is set by default okay and
344:16 - over here the loading widgets I'll
344:18 - remove this because I don't need it and
344:22 - now over here I'll select these two then
344:24 - use the refactor tool which in my
344:27 - condition is shift option r
344:30 - and no refractoring available great
344:34 - so I'm gonna create a column
344:37 - myself then add children
344:47 - okay and then inside this I'm gonna add
344:49 - these two items
344:57 - over here okay now let me just format it
345:00 - yes okay so over here you can see if the
345:04 - products is null then only this column
345:06 - will be visible
345:07 - okay and now what I'm gonna do is I'm
345:10 - gonna apply main axis as a center to
345:13 - this item okay so that it doesn't hinder
345:16 - the parent column okay so what are your
345:19 - main
345:20 - access alignment so again over here I'll
345:23 - use the main access alignment enum
345:33 - and I want to make it sent
345:37 - okay
345:39 - so now this issue is solved and we also
345:43 - have our starting part cleared okay
345:47 - sorted out so we have this
345:50 - now let's redesign this so
345:53 - we have the products now we just simply
345:55 - want to display it like this
345:58 - okay so for this I can either use a row
346:01 - or a list view so using row is very
346:06 - similar to how we use the column while
346:08 - displaying the sellers so over here
346:11 - instead of that I am gonna use a
346:14 - a list okay so
346:18 - over here
346:22 - list of items
346:25 - let me check if there was some title no
346:27 - okay
346:30 - so over here it is simply click on be a
346:33 - list View
346:35 - I think I'll use Builder because
346:38 - why not list View
346:41 - dot Builder
346:43 - okay and then it has an item Builder
346:48 - so it will definitely because it is a
346:50 - builder it will definitely take a
346:52 - context
346:53 - okay and it will return a item so the
346:57 - item is gonna be a container for now
346:59 - okay a container
347:02 - means just like a placeholder I am
347:04 - adding it okay so I think this takes
347:07 - something more than build context yes
347:10 - so over here in the documentation you
347:12 - can see it takes the context as well as
347:14 - the index okay
347:16 - so index so now the error should be gone
347:19 - now we need to add a few more things to
347:22 - this Builder
347:23 - okay there are a few required things let
347:26 - me just go through all
347:28 - yes so I need to add the item count so
347:31 - the item count is gonna be
347:34 - products Dot
347:38 - I think it is products Dot
347:40 - length yes so I always get confused
347:43 - between length and size okay so now over
347:47 - here we have this now in this container
347:49 - I am simply
347:51 - uh gonna write like
347:56 - height is around
347:58 - 50.
348:00 - okay width is around 50 and a margin
348:07 - okay and the margin is gonna be
348:10 - agent sets not all
348:13 - 5.0
348:17 - okay let me just format this
348:24 - yes so once we have formatted this let's
348:28 - see how it looks
348:49 - okay so it is giving us a bunch of
348:52 - errors
348:53 - let me check
348:57 - okay because we need to give it a has
348:59 - size okay so what I'm gonna do is I'm
349:02 - gonna wrap it with a sized box okay and
349:05 - the height is gonna be
349:08 - let's say 50.
349:25 - okay so we are getting the container
349:28 - over here we are not able to see because
349:30 - no color is there so I think I'll add
349:32 - some color colors dot pink okay
349:46 - yes so we are getting it over here
349:49 - so you can see these are our items
350:02 - okay now over here this is like actually
350:06 - a particular column over here I'll
350:08 - increase the height so it becomes
350:11 - little bit more clear
350:16 - yes so you can see these are like a
350:19 - vertical list but I want a horizontal
350:22 - list because the design suggests
350:24 - horizontal list so over here inside this
350:28 - I think we have a Axis or scroll
350:31 - Direction yes so we have a scroll
350:34 - Direction and it takes an axis I guess
350:36 - yes it takes an axis which is again axis
350:41 - is an enum and then horizontal
350:43 - okay
350:44 - so you see it is not possible to
350:47 - remember all the things you just need to
350:49 - have good amount of practice to figure
350:51 - out which one it is okay so now you can
350:53 - see it is in
350:55 - it is in a row okay so now in the next
350:59 - video we shall design each item okay so
351:02 - this was for the video thank you
351:05 - so in the previous video we saw how to
351:07 - apply the gradient now in this video
351:10 - let's apply it in our project okay
351:13 - before that you could see here I have
351:16 - added a new file called colors.dot and
351:19 - over there I have added the four colors
351:21 - which are the these colors okay
351:25 - so now let's
351:28 - move to this product screen okay so now
351:32 - over here we are getting a horizontal
351:35 - list now let's design the item okay so
351:38 - for that again over here I'll create a
351:40 - new file and I'll call it
351:43 - product
351:45 - item dot dot
351:50 - okay
351:51 - and it will import material
351:58 - okay now for now it will be a stateless
352:01 - widget
352:03 - okay
352:06 - so it is product item now it will
352:08 - receive a product so for that I need to
352:11 - import the product model
352:18 - we have product.ok now over here I am
352:22 - receiving the product so
352:25 - final product
352:31 - okay now let's receive this over here so
352:34 - over here I'm gonna write required
352:40 - this dot product
352:45 - okay so now we are taking this product
352:48 - in the parameter
352:49 - so let's continue over here in this
352:53 - container I'll simply
352:56 - change the color so the color being
353:02 - colors dot this okay and I'm gonna give
353:07 - it a
353:09 - height of let's say 100
353:12 - and the width is also gonna be 100
353:16 - okay so to make a proper Circle we need
353:19 - to have the height and width as same
353:22 - otherwise it will become an ellipse okay
353:24 - although now it will look like a square
353:26 - okay so let's
353:28 - uh call this from inside this list okay
353:32 - so for that I'll go to my product screen
353:36 - and over here first I need to import
353:38 - this item okay so over here I'll write
353:42 - import
353:45 - then widgets
353:50 - and then over here I have product title
353:54 - okay and now where we are calling this
353:57 - list let's go to that place
354:02 - yes so list of items so over here in the
354:05 - item Builder instead of the container
354:08 - what I'm gonna do is I'm gonna call this
354:10 - product item
354:12 - so I'll select this container
354:16 - and change it to product item
354:19 - now this takes a product okay so all I
354:24 - need to do is
354:25 - from the products list
354:30 - I am gonna get the product at the
354:34 - certain index
354:36 - okay
354:37 - sorry this is a named parameter
354:46 - okay
354:48 - let me see yes so now I'll format this
354:53 - and save this
355:00 - so we can see we have a list since it
355:03 - has no padding we are unable to
355:05 - separate okay but you can see that this
355:08 - item is successfully being called from
355:11 - the product screen so now all we need to
355:13 - do is we need to design this
355:16 - okay so for that first I'll create a
355:19 - decoration
355:22 - and the decoration has a box or
355:24 - decoration
355:27 - okay
355:29 - now inside this box uh decoration first
355:33 - of all the shape is gonna be Circle so
355:36 - for that we have box shape
355:40 - dot Circle
355:43 - okay
355:47 - now I also want to have the index of
355:51 - this product in the products list so
355:53 - that I can get the color at that index
355:56 - okay so for that in the product item
355:59 - I'll take the index as well so final
356:06 - and product index
356:11 - okay and over here you know inside our
356:13 - Constructor again I'll add required this
356:17 - dot product index
356:20 - okay over here this should be a DOT
356:24 - okay now let's add the index in our
356:27 - product screen as well so along with
356:30 - products I have product index
356:34 - and that is nothing but the index that
356:37 - we get in this function
356:39 - okay so now that we have the index with
356:44 - us
356:45 - okay
356:46 - why is it giving an error
356:50 - let me check the name okay so the error
356:52 - is gone so what happens that in my
356:54 - system because I am recording at the
356:56 - same time running an emulator so my
356:58 - system lags sometime so now if I do a
357:02 - full restart
357:04 - uh we then by then we will be getting
357:07 - the index in our product item okay so
357:10 - now since we have the index using that
357:12 - we can get the colors okay
357:16 - so for that first I need to import this
357:20 - colors over here okay so for that
357:24 - here I'll write import
357:28 - and then utility
357:31 - and then I have colors
357:33 - okay now over here I'll apply the color
357:37 - okay and the color is gonna be from the
357:40 - list that is
357:42 - uh primary colors okay
357:46 - primary colors
357:51 - okay and then for the index we have the
357:54 - index over here
357:56 - but since we have only four colors over
357:59 - here what I'm gonna do is I'm gonna
358:00 - divide the index by uh four okay and not
358:04 - get the question but the remainder
358:06 - because if I divide any number with the
358:09 - with 4 the remainders can be zero one
358:12 - two and three and that is the maximum
358:16 - index that we have in our primary color
358:18 - so this is zero index first index second
358:20 - induction third index so I hope this is
358:23 - making sense
358:26 - okay so now that we have it uh let's see
358:31 - how it looks okay so I'll save it
358:38 - now if I click on Albert Einstein so I
358:42 - am getting uh
358:43 - items with different colors now I'll add
358:46 - some margin to it
358:48 - Okay so
358:50 - for that over here I'll have a padding
358:56 - okay uh better than padding would be
358:59 - margin
359:03 - so margin
359:07 - const Edge insects
359:10 - dot all uh not all dot Horizon dot
359:15 - symmetric
359:16 - and then I'll just give horizontal
359:19 - margin so horizontal
359:23 - and let this be 5 for now let's see how
359:26 - it looks
359:34 - okay this looks
359:35 - uh pretty decent
359:38 - so now let's apply the gradient okay so
359:41 - for that we have a gradient
359:44 - parameter and over here we can give a
359:46 - linear gradient
359:48 - now if you would remember in the
359:51 - previous video we need to give a begin
359:53 - and end and a list of colors okay so the
359:57 - begin
360:03 - for that I'll again use the alignment
360:08 - alignment Dot Center
360:12 - alignment dot I think send okay
360:16 - just let me get rid of this
360:29 - alignment
360:31 - Dot Center left
360:33 - okay and we want to end at
360:40 - alignment Dot Center right
360:43 - okay and then I need to give the colors
360:46 - so the colors is again gonna be a list
360:49 - and the first color is gonna be our
360:52 - primary color
360:54 - okay
360:57 - and then it is again gonna be the same
360:59 - colored with opacity
361:02 - okay so over here we have with opacity
361:05 - and this is gonna be 0.0 okay
361:09 - because uh if you look in the design
361:13 - you'll understand so over here we have
361:16 - this product item
361:19 - now if you look at its color uh for at
361:24 - the starting it is the color that we
361:26 - have and at the end it is the same color
361:29 - but the opacity has changed from hundred
361:31 - percent to zero percent okay so this
361:34 - gradient will start with a color and
361:36 - dissolve to transparent okay so that is
361:40 - the basic idea over here
361:42 - let me save this
361:52 - I don't need this color over here okay
361:55 - because I'm applying gradient so you can
361:58 - see the gradient has been applied
362:00 - successfully
362:01 - okay
362:03 - so
362:04 - the next thing that we will do is add
362:07 - this circular
362:09 - uh ring on top of it okay in the next
362:13 - video
362:14 - so thank you
362:16 - so up until the previous video we have
362:19 - added gradient to it so now in this
362:23 - video let's add this circular ring to it
362:26 - okay so before we go there I have done
362:30 - little bit changes which I want to show
362:32 - you so earlier I was like it was written
362:36 - like products is equal to equal to null
362:39 - then this was executed I have replaced
362:42 - it with is empty okay so is empty is a
362:46 - better way to do so
362:48 - to check if there is some item
362:50 - in the list or not and the layer in the
362:53 - header the padding was for top and
362:56 - bottom it was 50 50 so I have converted
363:00 - it from symmetric to only and in bottom
363:03 - I have given 20 DP padding okay so these
363:07 - are the two changes that I did now let's
363:10 - continue and add a ring to this item
363:13 - okay so for that I'll open product item
363:17 - now there are multiple ways we can add
363:20 - this I'll use the stack method okay so
363:24 - for that what I'm gonna do is I'm gonna
363:26 - uh wrap it with a column okay and then
363:30 - rename this column to stack
363:34 - now over here inside stack I'm again
363:37 - gonna create a container
363:43 - it's height is gonna be 120 and it's
363:49 - width is gonna be 120 as well because
363:53 - over here the height is 100 so I want to
363:57 - add 10 DP 10 pixel margin on the left
364:01 - and 10 pixel margin on the right so
364:03 - which in total makes 120 so that is why
364:06 - the height and width 120
364:09 - now after that I have decoration the
364:11 - decoration is gonna be box
364:14 - in decoration
364:17 - okay then inside boxer decoration the
364:21 - first thing that we have is shape
364:24 - okay so the shape is gonna be box shape
364:29 - dot Circle
364:31 - okay then after that we simply have the
364:35 - Border
364:36 - and the border is going to be border dot
364:39 - all
364:41 - and then again the color is gonna be our
364:45 - primary color that we have over here so
364:47 - I'll simply copy this
364:50 - and over here color I'll apply it
364:54 - so this is our color let's save this
365:07 - okay now over here instead of symmetric
365:09 - I'll make it all and instead of 5 I'll
365:12 - make it 10. let's save it
365:17 - okay in all we don't need a horizontal
365:22 - okay let's see
365:24 - and you can see we have the margin I
365:26 - just want to make this a little bit
365:28 - thick so over here I'll add a width okay
365:33 - and the width is gonna be uh let's say
365:35 - three picks
365:39 - okay so let's see
365:42 - so this looks uh pretty decent as we had
365:45 - over here
365:46 - okay so now uh let's add the name of the
365:50 - item that we have okay so that is we
365:53 - will get the name from this item product
365:56 - okay so for that I am gonna wrap uh wrap
366:01 - this stack with a column
366:04 - okay now the stack is the
366:09 - image section
366:12 - okay and then after that we have
366:16 - product name
366:18 - and that is simply gonna be a text and
366:21 - inside this we are gonna have product
366:25 - dot name
366:27 - okay and now since because of null
366:30 - safety I need to add this
366:33 - now let's see
366:36 - okay so it is giving us errors because
366:39 - of the height so in our uh product
366:42 - screen
366:43 - over here where the height of the sized
366:48 - box is 100 I'm gonna make it 150.
366:54 - okay and it looks so it is done now
366:59 - now
367:01 - let's add The Styling and all the stuff
367:04 - to it okay so for that we have Style
367:09 - now let's check the phone
367:12 - so the font over here is Poppins so for
367:15 - that I'll need to import our Google
367:17 - fonts so import
367:21 - Google fonts
367:23 - dot dot okay and over here I'll apply it
367:27 - to it
367:28 - Google fonts
367:31 - dot Poppins
367:39 - okay
367:43 - let's format it
367:46 - and while it is formatting over here you
367:48 - can see the uh
367:50 - color the size is 12 and the color is
367:55 - this okay so I'll copy the color as well
367:58 - okay so over here let's apply the color
368:03 - so the color is again gonna be a color
368:05 - class then 0x double f and the color
368:12 - okay along with this we have font size
368:17 - and that is one of the 12.
368:21 - okay now over here I can add a const
368:26 - so that this warning will go
368:32 - okay let me
368:34 - see
368:49 - yes so now once all the errors are gone
368:51 - let me save this
368:55 - okay so we get it but I think the
368:59 - uh font size could be a little bit more
369:02 - bigger so I'll make it 15 okay this
369:05 - looks better now I'll add some padding
369:07 - to it so wrap with a padding and the
369:11 - padding will be only okay and I want to
369:16 - padding only from the top because it is
369:18 - sticking to the item
369:20 - okay let's apply it
369:26 - again there is an issue so I'll increase
369:29 - the size furthermore
369:31 - I'll make it 160.
369:35 - and we have it over here
369:37 - now over here you can see these items
369:40 - are sticking as well okay so for that
369:43 - I'll wrap up this stack with a
369:47 - with uh with a container I guess yes and
369:51 - then in this container I'll add a margin
369:54 - and the margin is again gonna be a edge
369:58 - in sets
370:00 - dot all or maybe better than all will be
370:04 - horizontal
370:06 - sorry not horizontal but symmetric
370:09 - inside that we have horizontal
370:12 - and I think five will do let's see
370:22 - yes so I think this looks fine this is
370:25 - how our item looks okay now the last
370:28 - thing is to add the image so let's do
370:32 - that okay so I need to go in the center
370:36 - child okay so which is this container
370:39 - now after a decoration we will have item
370:42 - called child
370:44 - yes okay and the child is gonna be a
370:47 - image dot Network
371:01 - okay now let's see in our seller item
371:05 - however we're displaying the image
371:07 - okay
371:10 - so over here you can see we have this as
371:13 - our starting part and
371:16 - then we add the name of the image okay
371:19 - so I'll do the same thing over here
371:22 - now instead of seller it is gonna be
371:25 - product dot image
371:31 - okay so let me format this and now if I
371:35 - save this the image will appear over
371:36 - here it will take some time okay so it
371:39 - was it didn't take it was pretty fast
371:43 - okay so now uh I want to add little bit
371:46 - margin on both of the sides so for that
371:49 - I'll add padding
371:51 - padding const
371:54 - engine sets
371:57 - dot all
372:01 - and 5.0
372:03 - little padding
372:05 - okay so that the items are pushed
372:08 - towards the center okay so this looks
372:11 - fine and with this we have this item
372:14 - okay now uh I am trying to make the UI
372:19 - roughly like what we have designed once
372:22 - the main functionalities are complete we
372:25 - will
372:26 - do all the literally design tweakings
372:29 - that we need to do to make it exactly
372:32 - like the design okay so this was for the
372:35 - video thank you
372:38 - so in this video we are going to
372:40 - continue with our mobile app for the
372:43 - project better buys okay so up until the
372:46 - previous video we have made the splash
372:48 - screen and we also have the sellers
372:51 - screen okay and if we click on any of
372:54 - the seller we go to the products that
372:57 - they offer the products screen basically
373:01 - okay so now over here we have the
373:05 - products okay the list of products uh
373:08 - this image is not loading I don't know
373:10 - why I think I think the image is no more
373:14 - on my server I'll put it but okay so we
373:17 - have the products now let's make a
373:20 - screen where we show the details or if
373:23 - if you if you remember from our design
373:26 - uh just give me a minute let's let me
373:28 - bring the design yeah so if you remember
373:31 - from the design we have this product
373:34 - screen and then we have the product
373:36 - details screen okay so here we intend to
373:40 - show the details of this products okay
373:42 - if you remember the Prototype was
373:46 - ok so I don't think the Prototype is
373:50 - here but I'll tell you what the general
373:52 - idea was so if we click on any of the
373:54 - product we need we will come to this
373:56 - product details
373:58 - page and over here we can see the
374:00 - details of the product we can add it to
374:02 - cart and we can buy now so yes the most
374:06 - popular and what's the word around is
374:08 - still remaining and we'll get back to it
374:10 - once we have sufficient data like for
374:13 - most popular we need to know what uh who
374:16 - which product has the most interaction
374:18 - count and until then we can't make this
374:21 - and then subsequently this as well okay
374:24 - so this is the
374:27 - ah product details screen and we are
374:29 - gonna make the UI for it now okay and
374:32 - along with this when we click over here
374:34 - the interaction count should also be
374:37 - increased okay so let's get started
374:41 - so first I'll create a new screen okay a
374:45 - new file in the screens folder it will
374:47 - be called Product
374:49 - details screen
374:53 - I'm sorry
374:56 - product details
374:59 - screen dot dot
375:02 - okay now over here we'll now over here
375:05 - we will create a stateless widget okay
375:08 - so the idea is that we always create a
375:10 - stateless widget and convert it to
375:12 - stateful widget whenever needed so the
375:14 - class name is also gonna be the same
375:17 - product screen details
375:19 - okay now all these are warning because
375:22 - we have a missing import statement so
375:25 - import
375:26 - material
375:29 - okay and the warning is gone now over
375:32 - here inside this container I'll simply
375:34 - create a child and a text that says
375:37 - product
375:43 - product
375:45 - details screen so as so as to check if
375:49 - the navigation is working properly or
375:52 - not okay so this is not that is all
375:54 - gonna be there but this is just for
375:56 - checking okay so I'll save this now
375:59 - another thing that I miss over here is
376:01 - creating the route name so I'm gonna
376:03 - write static const
376:06 - route name and it is gonna be
376:10 - product details
376:13 - screen okay
376:16 - so now that we have that let's add this
376:19 - route in our
376:20 - app widget okay and inside the routes
376:25 - section so for that first we need to
376:27 - import it so I am simply gonna write
376:29 - import screens
376:33 - and product details screen dot dot okay
376:37 - and similarly over here I am gonna add
376:40 - product
376:41 - details
376:45 - I'm sorry
376:47 - product details
376:52 - screen Dot
376:55 - okay why is it not changing the color
376:57 - did I not save this okay so you can see
377:00 - the spelling is wrong over here actually
377:03 - so
377:04 - it needs to be you
377:07 - okay just please forgive me for this
377:10 - so yes okay let me save this
377:14 - and now we have product details screen
377:19 - route name
377:31 - okay is the names to your own product
377:34 - screen details okay I am sorry
377:40 - so
377:42 - product screen actually it should be
377:45 - product details screen so the naming
377:47 - convention here only is not right
377:50 - so let me just change it product details
377:54 - screen
377:58 - product
378:01 - details screen let me save this and now
378:05 - over here I think it should be fine
378:07 - product details screen dot route name
378:10 - and then over here we get a con context
378:13 - but since we not don't need it I have
378:16 - put an underscore over here and then
378:18 - over here it is product details screen
378:22 - okay so the part then means
378:25 - main.tap is done let's format it save it
378:29 - now we need to navigate from this
378:33 - section so this is actually a product
378:37 - item this is the widget that we created
378:40 - over here okay so
378:42 - this is the container I guess this is
378:45 - the column that has all the data means
378:47 - like the image in the background and the
378:50 - title okay let's confirm so this is the
378:53 - image section and this is the product
378:55 - name so yes so column is our
378:58 - parent widget so what I am gonna do is
379:01 - I'm gonna refractor it and add a
379:05 - container a widget on top of it and the
379:07 - widget is gonna be nothing but our
379:09 - gesture detector okay and then if on tap
379:14 - so on tap what I'm gonna do is
379:19 - simply write
379:21 - and Navigator
379:24 - dot off
379:26 - context
379:28 - dot push named
379:32 - and the name is gonna be product details
379:35 - screens route name so let me import that
379:38 - over here
379:39 - import
379:42 - then in screens we have product details
379:45 - screen so over here it is gonna be
379:47 - product details screen route name
379:52 - comma and I also want to send the
379:55 - product as the argument okay
379:58 - so and the argument is nothing but
380:00 - product
380:02 - great so let me format this
380:07 - it is almost formatted okay I need to
380:10 - give a semicolon over here now let me
380:13 - format it it is done let's save it
380:17 - okay now I'll do a full restart
380:26 - okay I click on the seller Albert
380:29 - Einstein and then if I click on cucumber
380:32 - we have product details screen so it is
380:35 - giving warning because we don't have
380:37 - like a proper scaffold over here but the
380:40 - navigation is working that is confirmed
380:43 - Okay so let's add a scaffold over here
380:47 - since it is a new screen okay now
380:52 - does the scaffold have a child or a body
380:55 - yes so it has a body
380:58 - and the body is gonna be a container
381:04 - okay
381:06 - now let's give a background color to
381:09 - this container to see the size that it
381:12 - is taking
381:15 - okay I don't think we can give it we can
381:18 - give it a color
381:19 - so let's take any random color for
381:21 - testing
381:23 - control option F to format and then save
381:27 - it and yes it is taking the entire
381:29 - screen so that is actually what we
381:31 - wanted now if I add an app bar
381:35 - okay
381:37 - app bar
381:41 - and then I add a title to it and the
381:45 - title takes a text or a text widget so
381:48 - it takes a widgets over here it is gonna
381:50 - be a text widget and let's say
381:54 - title
381:55 - okay let's just see what happens
382:00 - okay so we have a title over here now in
382:03 - the design you can see the title is
382:05 - nothing but the product name
382:08 - and we have a back arrow over here so
382:11 - let's make that so for that first we
382:15 - need the product name over here in the
382:17 - product details screen so we will import
382:20 - the product that we are sending via this
382:24 - Navigator okay so over here first I'll
382:27 - import the model product
382:29 - import
382:31 - come out of screens folder go inside
382:33 - models folder and import product so this
382:37 - is a general convention the app level
382:39 - the global level Imports go at the top
382:42 - and app level go below it and if dot
382:46 - level Imports are there then it goes
382:48 - above this okay so
382:51 - that is that now we have our product
382:53 - over here
382:55 - product product is equal to model
383:00 - model route
383:03 - of
383:06 - context
383:08 - okay then we have settings
383:11 - and then we have arguments and then as
383:15 - to Typecast it as product
383:19 - okay
383:21 - so I think it is not settings
383:26 - I don't know why it is giving an error
383:28 - let's see how we did it earlier so in
383:30 - the product screen we took the seller so
383:33 - we just need to give a semi uh question
383:36 - mark exclamation mark over there okay so
383:40 - uh in development it is not necessary
383:42 - that you know everything that is how you
383:44 - learn
383:47 - so I think it is not settings
383:52 - I don't know why it is giving an error
383:54 - let's see how we did it earlier so in
383:56 - the product screen we took the seller so
383:59 - we just need to give a semi uh question
384:02 - mark exclamation mark over there okay so
384:06 - uh in development it is not necessary
384:08 - that you know everything that is how you
384:10 - learn
384:11 - okay so now that we have the product
384:13 - over here instead of giving that I can
384:17 - simply write product Dot
384:20 - its name so now that we have we are
384:24 - coming from cucumber it should be
384:27 - cucumber I think we need I need to give
384:29 - an exclamation mark over here
384:32 - let me format it let's save it and we
384:35 - have cucumber over here so this is fine
384:39 - now
384:42 - how to change this icon so there is a
384:47 - name I am not remembering it so what
384:49 - I'll do is I'll check all the options
384:51 - that we have
384:53 - okay one thing that we can change for
384:55 - now is the background color let's take
384:57 - the background color from here okay
385:00 - let's go and design and this is the
385:02 - background color
385:04 - okay let me copy it
385:07 - okay
385:08 - then we go back in our code and over
385:11 - here I add color
385:14 - then 0 x FF for opacity and then the
385:19 - color code okay let's save this and see
385:22 - so we have the color and we can remove
385:26 - this color from here for now we don't
385:28 - need it
385:30 - because since we have other items we
385:32 - will be able to verify if it is working
385:35 - or not
385:36 - so we already have this back icon over
385:39 - here because we are using push named
385:41 - okay since we are using push named if we
385:44 - go back we can go from the screen it is
385:46 - coming so that is why back is possible
385:48 - and that is why flutter has
385:49 - automatically added a back icon over
385:51 - here now uh since I am running it on an
385:55 - iOS simulator it is coming like this but
385:57 - if I would have been running it on an
386:00 - Android simulator it would have come
386:01 - like we have in our design okay so
386:05 - either we can leave it like that or we
386:08 - can change it I am gonna change it but
386:12 - that is like your choice what do you
386:14 - want to do
386:21 - leading okay so leading is the widget
386:24 - that we leading is the named parameter
386:26 - that has a widget
386:28 - so I'll use the icon widget inside that
386:31 - icons
386:32 - enum and from that enum I'll take the
386:36 - back
386:37 - I can
386:39 - so let me see what are the
386:42 - back arrow
386:49 - okay so no
386:51 - Arrow let's see what all arrows we have
386:54 - over here
386:57 - yeah so we just need the arrow back
387:00 - okay and it should be of color white
387:06 - color needs to be colors White
387:13 - okay and I need need to give a closing
387:18 - parenthesis over here let me format it I
387:22 - think it needs to go with a const
387:28 - so yes the warning is gone now I need to
387:31 - give a comma over here so it is the
387:34 - standard practice to give a comma if you
387:37 - have more than two named parameters or
387:40 - even unnamed parameters
387:43 - so construct a color from lower prefer
387:47 - const with a constant Constructor
387:49 - okay so let's add cost I will prefer
387:52 - const
387:55 - let's format it save it
387:57 - and yeah there we have it
388:01 - okay so now that we are done with this
388:04 - let's come to
388:06 - this section
388:08 - okay
388:10 - let me Zoom it out a little bit Yeah so
388:14 - first you can see we have this big image
388:16 - in the center so let's do that
388:20 - okay now inside body there will be a
388:24 - child the child is gonna be a image
388:28 - Network
388:30 - because we have a image URL now let me
388:34 - see how I am displaying the images over
388:36 - here yes so as I hoped there is a
388:39 - previous URL okay so this is generally
388:42 - how I do it
388:45 - so I'll copy it from here paste it over
388:47 - here
388:50 - simple
388:51 - let me format it
388:54 - save it and it is in the corner so we
388:58 - don't want that
389:04 - okay now since uh the design is on
389:08 - broccoli I am gonna change the item as
389:11 - well bro to broccoli from cucumber okay
389:14 - so now that we have added an icon over
389:16 - here what we forgot was to
389:19 - and like action to it what will happen
389:21 - if I click on that icon so let's do that
389:25 - so again I'm gonna refactor it wrap it
389:28 - with a widget and gesture detector
389:33 - now you can also change this icon to an
389:36 - icon button widget but I prefer gesture
389:39 - detector so it is your choice basically
389:42 - it is nothing more than that so on tap
389:47 - and on tap I want navigate
389:55 - dot of context
389:57 - to pop I guess
390:01 - yes it is
390:04 - pop
390:06 - great
390:07 - so now this is done let me format it
390:09 - save it
390:11 - yes let's see if the back button works
390:13 - it works
390:15 - now where is broccoli so do we have
390:18 - broccoli yeah
390:20 - so now let's
390:23 - fix this so it is again over here giving
390:26 - a warning to maybe
390:29 - avoid unnecessary containers okay okay
390:34 - there is okay then let's remove it for
390:37 - now
390:38 - we can always add it back when we need
390:40 - it so I am removing the container
390:44 - and the warning now let's see it's hype
390:48 - let's increase its height
390:50 - is gonna be media query dot of context
390:56 - dot size
390:59 - dot height
391:02 - into two by three so what I am doing is
391:06 - I am taking the entire screen size and
391:08 - then I am allotting two third of the
391:11 - screen size to this image so what this
391:14 - will so what this will do is whenever
391:17 - the screen size changes it will not
391:19 - impact how the image looks okay so that
391:22 - is why it is very important to use
391:24 - Dynamic sizing over here so let me
391:27 - format it save it
391:31 - okay now I think we also have to like
391:35 - tell the image to expand and that is fit
391:40 - and the fit is again box fit
391:45 - Dot cover I guess
391:50 - let's see
391:52 - yes so this is how we want it but the
391:56 - images actually not very sharp it is
391:58 - very blunt so I will be updating the
392:01 - image images but for now like we can we
392:04 - understand the gist okay so I don't want
392:07 - it two by three that is way too big I
392:09 - don't have space for anything else
392:12 - so what I'm gonna do is I'm gonna change
392:16 - it to
392:18 - uh one by two okay so that will only be
392:21 - half of the space let's see
392:25 - or maybe one by three
392:29 - okay then again it is very small let's
392:31 - come back to one by two
392:34 - okay we are continuing with this for now
392:36 - we can again change it later
392:39 - okay so now in the design we have the
392:42 - image and then we have the
392:45 - price so let's add the price and now we
392:49 - again have to add back the container or
392:52 - better than container we simply start
392:54 - with adding a column
392:56 - and let's see if it is pushed to the top
392:59 - okay so what generally happens is that
393:01 - as soon as you add a column it is
393:03 - already in like top aligned so all the
393:06 - items that you might have had in the
393:08 - center will automatically be pushed to
393:10 - the top but since this is an image and
393:13 - it is kind of taking this much space
393:16 - so it is not being pushed okay you will
393:18 - understand what I am trying to say as
393:19 - soon as I add the
393:21 - text
393:24 - okay and the text is gonna be our
393:29 - product
393:32 - dot price per kg
393:37 - okay
393:39 - okay so I don't think we need it over
393:41 - here we need it
393:43 - over here
393:51 - okay it is okay so basically the error
393:54 - is that
393:55 - it is a integer so what I am gonna do is
393:59 - I'm gonna Typecast it so what for that
394:04 - okay just give me a moment first I'll
394:07 - add it inside quotes then add curly
394:09 - braces in front of it and then add a
394:13 - dollar sign
394:14 - so now it is an integer but since it is
394:16 - inside course it will automatically be
394:18 - typecasted to a string so let me save
394:21 - this and you can see this much space is
394:24 - already left so what we can say is that
394:27 - the image is taking from this place till
394:30 - this place okay which is way too much of
394:34 - uh like size so we need to fix that so
394:37 - the solution is that we update the image
394:40 - actually
394:41 - and I think I'll do that and then
394:44 - continue with the video so
394:46 - hang on
394:50 - until the previous video
394:53 - we were working on the product details
394:57 - screen okay and over there we were
394:59 - trying to display the product image but
395:01 - since the image was compressed so the
395:06 - image was getting pixelated when we were
395:08 - trying to display it in uh product
395:11 - details screen where the size of image
395:15 - was comparatively larger than what we
395:17 - had in pro pro product screen okay so
395:20 - what I did was I did add an image okay
395:24 - and I'll show you how I did it
395:27 - so first let's go to server Handler
395:31 - where I am getting all the products okay
395:34 - so over here what I am gonna do is I am
395:37 - gonna print it once so that you can see
395:40 - how I am getting the response over here
395:43 - so print
395:45 - response Dot body
395:50 - let me format it then we can do a full
395:53 - restart to see
395:56 - okay
396:00 - so it is loading the sellers let's go to
396:04 - Albert Einstein
396:05 - okay so over here you can see that I am
396:09 - getting an image and after that I am
396:11 - getting an uncompressed image okay and
396:15 - that is inside another folder products
396:18 - uncompressed images and the same product
396:20 - name okay so now I have done it on the
396:25 - server and was not able to record it but
396:27 - I will give you a gist of how to do it
396:30 - if you want to do so so this is the API
396:34 - okay this is the last Point till where
396:37 - we have written so all you need to do is
396:39 - simply go inside models inside product
396:42 - Okay add another variable over here and
396:46 - when you create an add product with this
396:48 - image there will be another uncompressed
396:50 - image similarly in the SQL also after
396:53 - image there will be uncompressed image
396:55 - okay and over here since it is Select
396:58 - star we don't need to worry about it
396:59 - along with this
397:02 - in the apis
397:05 - okay inside the Gen because General and
397:08 - the products okay uh uh no over not over
397:12 - here actually I'm sorry inside API
397:15 - inside seller and when we go to add
397:20 - along with this image we will also take
397:24 - another image that is the uncompressed
397:26 - image which will comparatively be larger
397:28 - in size and thus larger in dimension and
397:31 - thus pixelation will not happen
397:34 - okay and along with this you also need
397:36 - to alter the database and add a key
397:38 - value pair for the side image okay so
397:41 - the process is pretty simple we have
397:43 - done for some other properties earlier
397:46 - you can look in those videos if you are
397:48 - still not clear okay so let's get back
397:52 - to our code editor now over here we are
397:55 - getting an uncompressed image let's add
397:58 - that key value pair in our product model
398:02 - so I'll add another string over here
398:05 - okay and I'll call it uncompressed
398:09 - image
398:11 - okay and over here below image I'll add
398:15 - that uncompressed image
398:18 - okay and get it from the same Json with
398:21 - the key name
398:23 - uncompressed image with a underscore
398:27 - so now that we have our match let me
398:30 - save this now that we have our image in
398:33 - the product details screen instead of
398:37 - product image I am gonna use
398:39 - uncompressed image
398:43 - okay instead of typing so much
398:49 - yeah
398:51 - so we have our uncompressed image let me
398:54 - format it save it and I don't think we
398:58 - need this print anymore
399:00 - and anyways it is giving us a warning
399:03 - okay so that is that and with that I
399:07 - remember that in main yes I might have
399:10 - forgot to add the const so let's fix
399:13 - that
399:15 - once that is done let's do a full
399:17 - restart we don't need Main and those
399:20 - things
399:23 - okay
399:27 - so let's go in Albert Einstein the
399:30 - seller now as we were seeing the
399:34 - broccoli last time let's see if there is
399:37 - any change
399:38 - and you can see that the images like far
399:42 - more better than what it was earlier
399:45 - okay so this is one thing done okay so
399:50 - now let's move continue with the rest of
399:53 - the design so before that I noticed one
399:56 - thing over here and that is that it has
399:58 - curvy edges
400:00 - okay so let's try to achieve this
400:05 - okay let's go back over here
400:09 - now we have this app bar we don't wanna
400:12 - touch that we have this column
400:16 - okay now let's surround it with a
400:18 - container again we'll refractor it wrap
400:21 - it with a container okay and now in this
400:24 - container let's give it a color okay or
400:28 - maybe inside the decoration we take a
400:31 - boxel decoration
400:33 - okay and over here we give it a color
400:36 - just as to check if the thing is
400:39 - happening properly or not so color
400:42 - s dot Amber
400:46 - is fine
400:47 - okay and then after that okay first
400:50 - let's save it and see
400:52 - so we have the color now let's give it a
400:55 - border radius
400:57 - uh border radius
401:00 - and there is something only yeah over
401:02 - here only
401:04 - okay now over here we need to give it in
401:07 - top left
401:08 - okay now it takes a radius okay so it
401:12 - takes a radius now I'm not sure how the
401:16 - radius is but we just can try so radius
401:20 - dot circular yeah okay so this is how we
401:24 - can do it radius Dot circular so what I
401:28 - am trying to tell over here is that it
401:29 - is not necessary for you to know
401:32 - everything all you need to do is have
401:34 - some common sense and do it and try
401:36 - until you stumble to the
401:38 - best option there okay now let me format
401:43 - it save it
401:45 - and we have a very slight border radius
401:48 - let me change that I'm gonna make it 50.
401:51 - okay so over here is a significant
401:53 - border radius now I want the
401:57 - same for I guess top right yeah
402:01 - so top right
402:03 - again it is gonna be radius
402:06 - dot circular
402:08 - and 50 is actually too much I'm gonna
402:11 - make it 40.
402:13 - okay
402:16 - let's see so 40 seems fine
402:19 - this is also gonna be 40.
402:23 - yes so now uh we have this black white
402:28 - space over here we don't want that we
402:31 - want the same color as we have over here
402:33 - so uh we can't actually add a background
402:36 - color to it but we can do other stuff we
402:39 - can wrap it inside another container and
402:41 - give that a color okay so that is
402:44 - exactly what I'm gonna try right now
402:45 - before that I'll let me just fix this
402:48 - warning and it is again for const
402:53 - Okay so let me wrap it inside our
402:56 - container
402:58 - now since it is a container the
403:00 - refractoring tool will not show a
403:02 - container so I'm gonna take widget and
403:04 - then call it a container
403:08 - okay the container will have a color the
403:10 - color that is this color
403:13 - okay
403:16 - so
403:18 - here we go
403:20 - let me format it save it and we have the
403:24 - color over here we don't need this Amber
403:26 - anymore
403:29 - okay sorry we need to make it white
403:32 - actually
403:37 - yeah but now if you see we have a line
403:41 - over here and that is nothing but the
403:43 - elevation of app bar so all we need to
403:45 - do is go inside app bar
403:48 - and make the elevation as zero
403:51 - or 0.0 since it is a
403:54 - double
403:56 - yeah so we can see that it all is same
403:59 - and we have it as we had it in the
404:03 - design so that is cool we don't need
404:08 - this Amber anymore
404:12 - okay sorry we need to make it white
404:14 - actually
404:19 - yeah but now if you see we have a line
404:23 - over here and that is nothing but the
404:25 - elevation of app bar so all we need to
404:28 - do is go inside app bar
404:30 - and make the elevation as zero
404:34 - or 0.0 since it is a
404:37 - double
404:38 - yeah so we can see that it all is same
404:42 - and we have it as we had it in the
404:46 - design so that is cool
404:50 - one thing done we can say that
404:53 - okay now this image still looks pretty
404:56 - big to me what I'm gonna do is I am
404:59 - gonna deduct
405:03 - 20 from it let's see
405:09 - okay later let's let it be like that we
405:12 - can leave it like that for now so let me
405:15 - add some documentation means
405:18 - basic stuff so that someone else who
405:21 - looks at this code directly and is not
405:23 - watching the video is able to understand
405:25 - so this container is for
405:29 - the background color
405:32 - and this is our main container
405:39 - okay
405:41 - now this is actually adding the
405:44 - uh curves but that is not important this
405:48 - is important this is the product image
405:55 - so that is that now this is the
405:59 - product
406:01 - price
406:03 - per kg
406:06 - okay
406:08 - per kg
406:11 - and it needs to be capital P so over
406:15 - here it is 120 but in the design it is
406:18 - rupees and followed by kg
406:21 - so we can do that since it is already in
406:25 - string interpolation
406:27 - rupees and then a space then the price
406:32 - and then per kg
406:35 - let me save this
406:38 - okay so this looks fine now I don't want
406:42 - it in the center I want it in the right
406:44 - so again where is our column yeah so it
406:47 - is over here now I'm gonna make all its
406:49 - Child Left aligned so the since it is a
406:52 - column the vertical axis is the main
406:54 - axis so I'm gonna write main axis
406:55 - alignment and then from the main axis
406:58 - enum okay I'm gonna write start so let's
407:03 - see if this works or not
407:05 - okay it didn't
407:08 - I don't know why so what we can do is
407:11 - inside the uh surround this text with
407:15 - the widget and that widget can be a
407:18 - sized box
407:20 - okay now the only purpose that size box
407:23 - services that we can give it a size so I
407:27 - am gonna give it a width
407:29 - and the width is gonna be uh media query
407:33 - dot off
407:36 - dot size
407:39 - dot width
407:42 - okay
407:44 - so that is there
407:48 - and now you can see it is to the left so
407:52 - what happened over here was that
407:54 - originally uh the text has taken the
407:58 - entire space but now since we surrounded
408:01 - it with a sized box the sized box took
408:03 - the entire space and the text to inside
408:06 - it only took the space as much as it
408:08 - required so our purpose here is done
408:13 - okay now
408:15 - let's style this text before that I want
408:18 - to leave some space towards the left so
408:21 - what I am gonna do is there are two
408:23 - things that I can do actually over here
408:25 - I can surround this text with a padding
408:28 - okay and that is not uh the way to go we
408:31 - can simply change the sized box to a
408:34 - container so that we get the width and
408:37 - the padding in the same
408:41 - in the same widget okay so over here I
408:43 - wanna add padding and the padding was
408:46 - like Edge in sets
408:48 - as in sets only because we only want it
408:52 - from the left and left and I'm gonna
408:55 - give it 50 pixels
409:01 - okay we can
409:03 - this seems fine for now
409:09 - so the warning is also gone now over
409:12 - here in this child text
409:15 - let's start styling it so
409:19 - style and there is this text Style
409:22 - now I think the font that we are using
409:26 - is Poppins and I think I already have
409:30 - Google fonts in here let me check yes we
409:34 - have
409:36 - so let me import that
409:39 - import
409:41 - Google fonts dot dot
409:44 - now over here instead of text style it
409:48 - is gonna be Google fonts Dot
409:52 - Poppins I guess yeah so it is gonna be
409:56 - Poppins and inside this let us give it a
410:00 - color
410:02 - sorry
410:06 - what is that called
410:08 - is it color or text color
410:12 - okay so it is color I don't know why it
410:14 - was not showing over there on its own so
410:18 - we are gonna use the same color
410:22 - okay now if you are asking where I if
410:24 - you wanna know where I am getting all
410:26 - these things the design file is in the
410:29 - link so you can go over there and just
410:32 - have a look yourself then after that we
410:35 - need to mention the font size the font
410:37 - size
410:39 - I'm sorry the font size can be
410:44 - 10.0
410:47 - let us refactor it save it and see how
410:50 - it looks
410:51 - and it doesn't look good
410:54 - so what I am gonna do is I am simply
410:57 - gonna pick everything from here so the
410:59 - size is 220 and the font weight is
411:03 - medium so let's simply just do that and
411:07 - see if it looks decent or not and then
411:11 - we will do little bit tweakings
411:12 - ourselves so font size is there and then
411:16 - font to it
411:17 - then again we have the font to 18 num
411:22 - okay and then
411:25 - the options are
411:29 - bold let's see bold because medium is
411:32 - not an option over here we will have to
411:35 - give 100 200 N values like that
411:39 - so this 120
411:42 - looks fine but I think we can increase
411:44 - its size a little bit more
411:49 - yeah so this looks better
411:51 - okay so with this the price per kg is
411:54 - also done now I'm gonna commit it over
411:56 - here so that
411:58 - if you watch the video or the good clock
412:00 - you will
412:01 - have a good idea so first I'll check the
412:05 - status
412:07 - add all the files to staging then again
412:09 - check if all the files are added and the
412:12 - end green means yes it has then I'm
412:14 - gonna commit it
412:20 - price
412:22 - per kg displayed
412:26 - and then I'm gonna push it to GitHub
412:32 - okay so this was for the video in the
412:35 - next video we shall add this and most
412:38 - probably the buttons we can't add this
412:40 - for now
412:41 - okay so or maybe we will add this and
412:45 - just add some random data and later on
412:47 - we can connect it with the API so I'll
412:50 - need to think what I need to do but
412:53 - see you in the next video okay so thank
412:56 - you for joining until the previous video
412:59 - we were able to display this image and
413:02 - the price per kg so in this video we are
413:05 - gonna make the rest of the UI and I have
413:08 - decided that I'll also make this UI and
413:11 - it will be static for now and once we
413:13 - make the apis for them we'll connect it
413:16 - with them
413:18 - so let's open our code editor I'll do a
413:21 - full restart
413:22 - to see if everything is working fine or
413:24 - not
413:30 - so we are getting the sellers now if I
413:32 - click on any seller their products are
413:36 - being shown
413:37 - okay I'll
413:39 - choose broccoli and then broccoli is
413:42 - being shown over here and its price so
413:45 - this is in product details screen and I
413:48 - think I have not added the font over
413:50 - here
413:51 - so
413:53 - I'm gonna do that now
413:56 - the style
413:58 - is gonna be Google Style
414:03 - sorry Google fonts dot Poppins
414:08 - okay I think
414:10 - this is enough
414:11 - so let me format it
414:17 - quite as taking some time to download
414:19 - this pop-ins
414:21 - okay so once this is done I'll do a full
414:23 - restart and we have our font over here
414:26 - so let's continue now next thing is we
414:28 - have to add a description over here okay
414:31 - so
414:32 - this is the product image product price
414:36 - per kg this is the container over here
414:39 - we are gonna add the
414:41 - description
414:44 - so description is again gonna be a
414:48 - text field sorry it is gonna be a
414:51 - container
414:53 - okay
414:54 - and the container inside this will have
414:58 - our text field because of the issue we
415:00 - faced over here now again I wanted Swift
415:03 - to be the entire screen width and the
415:05 - padding should be equal to the padding
415:07 - that we have given over here so that the
415:09 - entire text looks aligned so I'm gonna
415:12 - copy it paste it over here
415:15 - okay the error is because I'm missing a
415:18 - comma over here
415:20 - now inside this there is a text field
415:23 - okay sorry the child is a text field
415:28 - okay and the
415:30 - text is nothing but product Dot and
415:33 - description
415:35 - okay
415:36 - let's see how it looks
415:40 - so we are getting a description over
415:42 - here but it doesn't look pretty
415:45 - so let us fix that
415:48 - what I'm gonna do is I'm gonna make the
415:50 - padding 40 so that we get little bit of
415:54 - extra space
415:56 - okay and I want to leave the same amount
415:59 - of padding from right side as well so
416:02 - either I can change add a right over
416:04 - here or change this only to symmetric
416:07 - I'm Gonna Change it to symmetric
416:10 - and this is gonna be the horizontal axis
416:14 - yeah
416:16 - let me save this
416:18 - okay this looks better now I also
416:22 - need to add a padding from the top but I
416:25 - am not sure if I need it from the bottom
416:27 - I'm gonna add it from both sides for now
416:30 - but if later I don't need a tile again
416:33 - switch back to only
416:36 - so I think 10 should do let's see
416:41 - yes it looks fine
416:43 - now let's come to our text
416:45 - style and the style is again gonna be
416:48 - text Style
416:51 - sorry
416:52 - we don't want text style we want Google
416:55 - fonts dot Poppins
416:59 - okay
417:02 - now over here I am gonna change the
417:04 - color okay the color is gonna be this
417:07 - color
417:15 - okay
417:19 - now let me add a comma let's format it
417:21 - let's see okay so it has converted to
417:24 - Poppins but it is taking too much of
417:26 - space
417:28 - so what we can do is we can like remove
417:31 - some part of it for now like we can add
417:35 - a c more option if we want for that we
417:37 - can use the rich text field but I'm not
417:40 - gonna do that I am simply gonna clip
417:43 - certain part of the text okay but if you
417:46 - want to add the C more and see less
417:48 - option you can do that rich text is the
417:51 - way to do it
417:54 - Dot
417:55 - I think it was a subtext or substring
417:59 - yeah
418:01 - so I want from 0 to 120 let's see how
418:04 - much that is
418:07 - no it is way too less let's make it 150.
418:11 - because actually over here the
418:14 - description wouldn't matter if you think
418:16 - from the product perspective the
418:18 - vegetable picture in itself tells
418:21 - everything
418:23 - okay 180 is giving us five lines let's
418:27 - see how much were in was in the design
418:30 - it was near around five lines so I think
418:34 - the text is done for now
418:39 - let me format it save it so we have our
418:42 - text in place
418:44 - now after text we have a review section
418:52 - product
418:53 - review
418:55 - okay so over here first we have a
418:59 - container
419:02 - okay that is understandable
419:05 - now this container will have our
419:08 - decoration the decoration is gonna be
419:11 - boxer decoration
419:13 - okay and generally in
419:15 - decoration we always have Boxer
419:18 - decoration the color is gonna be Gray
419:21 - color again I'll use the colors enum
419:24 - colors dot Gray
419:27 - I'm sorry
419:29 - colors dot green let's see how this
419:32 - looks
419:35 - okay where is the container I think
419:38 - I need to specify a height so I'm gonna
419:41 - give it a height of
419:43 - 50 for now
419:47 - so this is our container and this is not
419:51 - the gray we want so we can use different
419:54 - versions of it by just adding numbers
419:56 - into the square bracket so the numbers
419:59 - are like 100 200 to 300 where 100 being
420:03 - the lightest shade and 800 or 900 being
420:06 - like and as you like increase the
420:09 - numbers the shades get darker that is
420:12 - the just so 200 is way too
420:16 - light I'm gonna make it four let's see
420:21 - now 4 is again too much let's make it
420:24 - three
420:25 - now let's check in our design I think
420:28 - three would do for them
420:30 - Okay so
420:35 - let's give it a width
420:37 - or instead of giving a Target we can
420:40 - simply apply padding from both the sides
420:42 - or maybe margin margin is the way to go
420:44 - because padding will again the
420:46 - background color will be in the padded
420:48 - area as well so margin is the way to go
420:51 - margin
420:54 - so I automatically put const over there
420:57 - because of because of the so many
421:00 - warnings that we got so now it has kind
421:03 - of become a habit so horizontal let's
421:07 - say 30.
421:11 - yeah so this looks fine
421:14 - um okay for now
421:17 - and the height can be 100
421:22 - see how much that is okay we can start
421:25 - with this for now we can again later
421:28 - change the height and margins if needed
421:31 - so now let's add border radius
421:37 - border radius dot circular
421:41 - Cs and 5.0
421:45 - okay let's see
421:48 - let's confirm it in our design
421:53 - I don't think it is 5 yes it is 15 so
421:58 - let's see
422:04 - yeah so the 15 here and 15 there is the
422:08 - same thing
422:10 - okay so now let's continue what I'm
422:13 - gonna do is I'm gonna take it to another
422:15 - screen so that I don't have to keep on
422:18 - Flipping
422:20 - if you want to look the design the
422:22 - design link should be in the description
422:24 - okay
422:26 - so now after let's come back here
422:29 - now
422:31 - that we have a container
422:34 - let's add the items that are inside it
422:36 - so along with this I am gonna add a
422:39 - padding over here so that the contents
422:41 - don't start appearing at the corner okay
422:45 - padding
422:47 - const engine sets all
422:51 - 10.0
422:54 - let's see
422:56 - okay I we will not see any visible
422:58 - change sorry for