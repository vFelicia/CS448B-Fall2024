00:00 - hey guys in this video we are going to
00:03 - look into a tool that is called Mongoose
00:06 - well when we are using a MongoDB library
00:10 - we are using for the crud operation but
00:15 - for using other functionality like
00:18 - validation typecasting is bit difficult
00:22 - in this so we are using a new library
00:26 - that is called Mongoose
00:28 - Mongoose is a NPM library that is used
00:31 - for Valdez and typecasting and also the
00:35 - crud operation that people come into it
00:39 - so let's start with our new project
00:43 - let's say we are going to create a new
00:49 - project name called Mongoose demo we go
00:57 - into new project
01:00 - Mongoose demo now we are going to
01:05 - initialize then pmn it
01:07 - by using NPM can eat sy after that we
01:20 - are going to go to this project by using
01:23 - code space dot now in this project we
01:34 - are going to initialize how are we going
01:36 - to start the script so for product
01:41 - sample first we are using node app and
01:47 - for EF purpose we're going he was not
01:51 - one app now let's create a new file
01:58 - export app dodgiest
02:03 - now here again we are going to install
02:09 - new libraries first we are going to
02:12 - install
02:13 - Nordman library for installing it npm
02:17 - install' testers save their step
02:22 - not one now we are going to install NPM
02:29 - Express and Mongoose
02:33 - for installing it we are going to use
02:35 - NPM yes I test Express space monkey in
02:45 - the meantime we are going to use all the
02:49 - configuration that is needed here
02:51 - let's same cons expressed differently
02:56 - require expressed and and we are going
03:06 - to use the app that is going to get
03:09 - required from experience as a function
03:12 - and we are going to listen to a port
03:15 - number let's say 3000 now for using
03:30 - mumbles into a project we are going to
03:33 - create a new folder let's say utils in
03:38 - this folder we are going to create a new
03:42 - file let's say DB torches and this while
03:46 - we are going to create a new Const
03:49 - Mongoose and we are going to require it
03:54 - from bangles after requiring it we are
04:01 - going to connect our MongoDB to our
04:06 - current project so for connecting it we
04:13 - are using connect function we have used
04:16 - in the Normandy with Trevor so we are
04:24 - going to require the
04:28 - so what means we are going to require
04:31 - the connection string that is here now
04:35 - let's copy it from here and we are going
04:38 - to paste it into the connect function in
04:43 - here we are going to replace the
04:46 - password that is given here and pasting
04:53 - it into the password field after pasting
04:59 - it we are going to use optional options
05:04 - that is given here like used minify to
05:10 - apology to true and used new URL Varsity
05:17 - true after that its is using if we are
05:27 - using the tan function here
05:29 - it returns a promise and if we used then
05:34 - it will give the successful result and
05:39 - if it is error it will give an error
05:52 - now for starting this file we are going
05:58 - to use the this file using requiring it
06:04 - from the file using this thing using
06:08 - required dot dot plus dot slash utils /t
06:16 - b and now if we run this project by
06:21 - using NPM run tear we can see that the
06:26 - connection is established now we are
06:30 - going to use the Mongols in our fight so
06:34 - we are going to remove this one because
06:36 - there is no need of it now we are going
06:39 - to create the model of a user so for
06:43 - creating a model we are going to use a
06:45 - term that's called schema so for this so
06:52 - for using a schema we are going to
06:54 - require it from the Mongols so let's say
06:58 - schema consists EEMA mongoose dot EEMA
07:06 - after that we are going to create a new
07:08 - schema use it so for creating it we are
07:12 - going to use any user schema variable
07:15 - and after that we are going to construct
07:22 - or use new operator and using the schema
07:28 - and here we are going to define the user
07:32 - schema so what are the information
07:35 - needed in the user is Emma
07:37 - so let's say we are using name so we
07:40 - start it will be it will be a type of a
07:42 - string so we are using string and it's
07:45 - required so we are using a required
07:48 - property of it that's it's a boolean so
07:52 - we are going to use true and if there is
07:57 - any like spaces before the name or after
08:01 - the name we are going to trim it
08:04 - so it would be it give a dream
08:07 - properties so we are using dream is to
08:12 - true and after that we are going to
08:17 - create a new document let's say is and
08:23 - in the A's we are going to deliver like
08:26 - what type is it so it's a type of number
08:29 - and it's also required into our project
08:38 - so after that we are also like that's it
08:45 - now it's a model so for creating a new
08:49 - model we are going to use cons product
08:52 - user and we are going to create a new
08:55 - model for creating a new model we are
08:57 - going to use Mongoose dot model and we
09:02 - we can give any name that's a string so
09:05 - let's say user and in here we are going
09:09 - to provide a schema that we have used
09:11 - the we are going to use user schema now
09:16 - we are going to instantiate a new user
09:19 - into our project so for instance ietting
09:22 - in the new user we are going to use a
09:25 - new user one and after that we are going
09:28 - to use new creators constructor and then
09:31 - we are going to use new user and in here
09:34 - we are going to perform now let's say we
09:39 - have provide a new name
09:40 - let's stay John Doe John till and it's
09:47 - Easy's let's say 21 after this we are
09:53 - going to save it for saving it we are
09:57 - going to user dot save that is Leon by
10:00 - the Mongols and it's in promise so we
10:04 - are going to use 10 and after that we we
10:07 - can see that if it is saved or not you
10:10 - can console got love with paste and if
10:13 - it's an error then we can perform an
10:16 - error operation
10:18 - not only we can see what's in there
10:20 - there now here you can see that it keeps
10:29 - the user and it automatically give the
10:33 - ID in the name and the is and the
10:36 - version of the document that is zero now
10:40 - if we see into our project we will see
10:44 - that it has been saved in the world
10:47 - no more DV so for thing we can go to the
10:53 - collection and here you will see that
10:59 - the user has been saved and the user
11:03 - collects that name is also given to it
11:07 - so now we are going to see how can we
11:11 - provide the validation here so if we
11:15 - want to validate that there is will be
11:17 - like only great 1518 or let's say we
11:22 - validate that error that the ears will
11:24 - be will not be less than zero or it's
11:28 - not a negative so for doing this we can
11:30 - use a method or a function called
11:34 - validate into it and in this if we
11:37 - provide like if value is less than zero
11:43 - it will throw an error so for throwing
11:46 - the error we can use throw new show new
11:53 - error and let's say yes must not be less
12:02 - negative so if we save it no first we
12:07 - have to change the value of it so let's
12:10 - say if we are right like minus 20 and
12:13 - now if I save it you will see that it
12:18 - gives an error that say s must not be
12:20 - negative so Mongoose can be used for
12:23 - performing like any validation that we
12:25 - require now if we add one more property
12:30 - let's say email
12:32 - so how can we check that in email is
12:35 - like a rock so it will be an string and
12:41 - it's also required into our jaw
12:45 - collection and full validation purpose
12:52 - there is a new there's a NPM library
12:57 - it's called validator so we are going to
13:00 - install it for install NPM I delegated
13:09 - so in the meantime we are going to use
13:11 - the how can you like we can see here
13:16 - like if people Fe don't display or don't
13:21 - in slide is in here and if we save it
13:25 - you will see it also gives an error here
13:32 - it says that yes is required and the
13:39 - part is is required and the message xnl
13:42 - so so now we are going to use neoliberal
13:48 - II called validator and in here we are
13:55 - going to require it from elevator now in
14:02 - here we are going to use validator
14:05 - validate function and the value that we
14:12 - provide and in here if validator thought
14:18 - is email value it will throw an error
14:31 - let's say it should be an email but
14:38 - validator that is email if it is right
14:41 - it will perform a true so in here we are
14:44 - going to use not operator so now if we
14:49 - provide like is can be 20 and if you
14:55 - provide like email to be John gmail.com
15:04 - and if we save it now we can see that it
15:11 - should be an email so it gives an error
15:15 - so that's how we can use so that's how
15:19 - can we use the Mongoose library into our
15:22 - folder so thank you