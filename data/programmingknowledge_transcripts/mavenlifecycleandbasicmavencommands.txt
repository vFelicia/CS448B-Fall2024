00:00 - hello and welcome back to the new video
00:01 - of the maven tutorial Series so till now
00:04 - we have covered about uh post
00:07 - introduction and the software that I
00:09 - required for running the maven projects
00:12 - on your PC all right so for this video I
00:17 - will be discussing about Maven life
00:19 - cycle and basic mapping commands so
00:22 - these are the commands that you must
00:23 - know to work with the maven project and
00:27 - how actually the maven life cycles means
00:30 - how the projects that is being you built
00:33 - using Maven works or throughout its life
00:36 - cycle okay right from the validation and
00:40 - till the deployment Point okay we will
00:42 - cover all the points over here okay so
00:45 - Maven is a quick introduction for those
00:48 - who haven't seen previous videos uh
00:51 - Maven is a powerful project management
00:52 - tool that is based on form that is
00:55 - Project object model used for project
00:57 - build dependencies and documentation it
01:00 - is a tool that can be used for building
01:02 - and managing any Java projects okay and
01:06 - Maven makes the day-to-day work of Java
01:08 - developers easys and help with the
01:10 - building and running of any Java based
01:13 - projects so if you are trying to build
01:15 - any project that uses Java then you can
01:18 - go for the maven it will quickly do your
01:22 - uh all the tasks of managing those
01:25 - dependencies building the project and
01:28 - documentation part
01:30 - okay and so let's go and see one by one
01:34 - uh each point so first point comes is
01:37 - the default Maven lifecycle consists
01:40 - eight major steps or phases for
01:42 - compiling testing building and
01:43 - installing a given Java project as a
01:46 - specified below so these are the eight
01:48 - steps first is validate compile test
01:50 - package integration test verify install
01:53 - and then deploy okay so first is
01:56 - validate in this step it validates the
02:00 - project if the project structure is
02:01 - correct for example it checks if all the
02:04 - dependencies have been downloaded and
02:06 - are available in the local repository so
02:09 - we'll see what is local depository and
02:11 - repository and what is the palm.xml file
02:13 - so we'll have a separate video on
02:15 - form.xml file will where when we will be
02:18 - discussing all each and every tags of of
02:21 - that XML file and in detail we see how
02:24 - how the form.xml is important in Maven
02:28 - okay so next is compiled it compiles the
02:32 - source code and converts the java.java
02:34 - files to dot class files so since we are
02:37 - using the Java programming language to
02:40 - build our project so there there must be
02:42 - a DOT Java files that you create for
02:44 - your project so that those dot Java
02:47 - files need to be converted into the dot
02:49 - class file that is the byte code which
02:51 - is machine understandable code the Java
02:54 - converts jvm converts to be a more
02:57 - precise and it and it stores the classes
03:00 - in the Target slash classes folder so
03:02 - this is the folder where all those dot
03:05 - Java files are converted into the dot
03:07 - class files and got stored in the Target
03:10 - and then inside Target folder there is a
03:13 - classes directory where it stores okay
03:15 - so next is the test it it runs unit test
03:19 - for the projects so you at this phase it
03:23 - will run the unit test that you have
03:24 - defined for your project and we'll see
03:27 - how to define it and how to use it and
03:29 - how to run it okay so package this this
03:32 - step packages the compiled code and in a
03:35 - distributable format like jar and ojar
03:37 - or what so it converts the yeah that
03:42 - code into the distribute distributable
03:44 - format like jar and War
03:47 - okay so integration testing uh it runs
03:50 - the integration test for the project uh
03:52 - we'll see how it runs the integration
03:54 - testing also and where the next step is
03:57 - verify this step runs checks to verify
04:00 - that the project is valid and with so
04:02 - called quality standards so the quality
04:05 - standards are being checked in the
04:07 - verification step and then comes the
04:09 - installation step this web installs the
04:11 - package code to the local Maven
04:14 - repository there is a look uh there is
04:16 - one local manual repository where all
04:17 - these uh packaged code is being
04:21 - installed over there okay and then is
04:23 - the next deploy it copies the packaged
04:26 - code to the remote repository for
04:28 - sharing with with other developers so
04:31 - here last comes the deployment phase so
04:34 - where it converts the code to the pack
04:36 - it copies the package code to the report
04:39 - remote repository by using which you can
04:42 - share that share it with other
04:43 - developers which are there in your team
04:45 - or company
04:47 - okay so these are some uh Maven life
04:52 - cycles build life cycles and then comes
04:55 - we'll see how some basic mapping
04:58 - commands Okay so first come the mvn
05:01 - clean okay it cleans the project and
05:03 - removes all files generated by the
05:05 - previous build so when you do perform
05:08 - one build uh it creates that uh folder
05:11 - and when when you again do some changes
05:13 - and we are you again build that project
05:16 - again install that project then it again
05:19 - creates that those folders again so if
05:21 - you're using MV and clean it cleans the
05:24 - project and removes all those previous
05:25 - build build files
05:27 - okay so an mvn compile it compiled the
05:31 - source code of the project again mvn
05:33 - test compile it compile the test Source
05:36 - Code mvn test run the test for the
05:39 - project uh they do are defined and mvn
05:42 - package creates the jar uh or warp file
05:45 - for the body and convert it into the
05:47 - distributable format as we discussed
05:49 - above and mvn install uh deploys the
05:52 - package jar file to the local repository
05:55 - and MV and side generate the project
05:57 - documentation so
06:00 - next is mvn validate validate the
06:03 - Project's form and con configuration so
06:06 - as I said as I told you pump file uh
06:08 - form dot XML file is the very important
06:10 - file for the maven projects again we see
06:13 - in depth with one separate video
06:16 - so stay tuned so mvn uh idea colon idea
06:21 - colon generate project generates the
06:23 - project files for the IntelliJ IDEA or
06:25 - Eclipse so if you are using any IDE uh
06:28 - that is Intel GID or Eclipse any one of
06:30 - this so you can use this
06:32 - command right so ambient release uh
06:37 - perform performs the release build okay
06:39 - and mbn last come mvn deploy it copies
06:42 - the package jar or War files to the
06:44 - remote repository after compiling
06:46 - running and test and building the
06:48 - project
06:49 - okay and so oh so this is the command
06:54 - that we write MV and clean install and
06:58 - why we write clean because uh it by
07:01 - using this clean we can remove all those
07:03 - previous build files and it will remove
07:06 - all those files which are pre uh came
07:08 - from the previous build it will delete
07:10 - and creates the new uh files for the new
07:14 - build okay so this is the idea behind
07:18 - the maven life cycle and Maven basic
07:21 - Maven commands so in our upcoming video
07:23 - we will see you we will start working
07:25 - with the maven actually and start start
07:28 - creating a project a basic project just
07:31 - to understand and just to give you clear
07:33 - idea or how Maven works we will start
07:36 - working on a project from the next video
07:39 - so thank you for watching this video and
07:40 - I will see you in the next one