00:00 - the last video we have
00:02 - write our first program and printed
00:04 - hello world
00:06 - so
00:07 - now what we are gonna going to do we are
00:09 - going to
00:11 - study how to initialize a variable
00:14 - or a value in kotlin so
00:16 - now we are going to create a new file so
00:18 - we are going to file
00:20 - and then go on new
00:21 - then go on kotlin class comma file slash
00:24 - file click on that
00:27 - click on file
00:28 - i am going to name this as variable
00:32 - and then hit enter
00:35 - okay
00:36 - so firstly i am going to
00:39 - write a program fun main
00:43 - where a
00:44 - is equals to
00:46 - 20
00:47 - okay so uh i have mentioned in the last
00:50 - video that i prefer to run program from
00:53 - here not here so what happens when i run
00:56 - the program from here
00:58 - so when i run program from here
01:02 - just let it build
01:04 - yeah so when i run program from here uh
01:07 - please note that the last program we
01:09 - wrote gets executed
01:11 - the hello world program
01:13 - and when i run program from here
01:15 - so the variable kt program runs and
01:19 - process finished and exited with code 0.
01:22 - so
01:23 - now we will discuss how to declare a
01:24 - variable in kotlin
01:26 - so to declare a variable in kotlin
01:28 - either where or val keyword is used so
01:33 - i have wrote where keyword and now i
01:36 - will use
01:37 - val
01:38 - keyword okay
01:42 - so these are two ways
01:44 - for declaring a variable
01:48 - so uh by a while mentioning
01:51 - a kotlin or starting with kotlin i have
01:54 - mentioned that kotlin is a statically
01:56 - typed language and it has a type
01:58 - inference so what does what did i mean
02:00 - by statically typed so before running
02:02 - the program
02:04 - before compiling the program
02:06 - the type of
02:08 - the variable is
02:10 - explicitly known by the compiler
02:13 - so uh when i compile the program the
02:16 - type of the variable is known by the
02:17 - compiler so the type of this is end i'll
02:20 - be explaining that in a while
02:22 - and
02:24 - kotlin has a type inference so what does
02:26 - that mean
02:27 - so when i hover over
02:29 - a
02:31 - so it tells me variable a is int
02:35 - so in kotlin
02:38 - the variable automatically
02:40 - tells its types that what type it is
02:42 - variable or value
02:45 - okay so
02:48 - now what is the difference between where
02:50 - and well
02:52 - so val has an immutable reference so
02:55 - when i declared a val value so
02:58 - when i go and change the value of b to
03:02 - 13. okay so
03:05 - it gives it it
03:07 - underlines it by red and gives an error
03:12 - so what did even hour over it and it
03:14 - says that well cannot be reassigned
03:17 - so i am going to come to that and hit
03:21 - alt plus enter
03:23 - and when i hit alt plus enter it gives
03:26 - give us a number of choices
03:28 - to proceed with and i click enter so
03:30 - what it does is it
03:32 - converts val to where so that i can
03:36 - reassign the value
03:39 - okay
03:40 - so we have
03:43 - now discovered what is where and well
03:45 - difference
03:47 - so where where variable has a mutable
03:49 - reference so the variable declared using
03:52 - where keyword can be changed later in
03:55 - the program
03:56 - and the variable declared using val
03:59 - keyword cannot be changed and
04:02 - it is similar to final variable in java
04:04 - if some of you might have
04:07 - learned java
04:09 - okay
04:10 - so
04:11 - what if i don't know the initial value
04:15 - of the variable so here i have
04:18 - initialized the variable a with some
04:20 - value but what if i don't know its value
04:23 - so
04:24 - if i have a variable
04:27 - name okay and i don't know what its
04:30 - value is but i do know it holds a string
04:33 - so i'll
04:35 - mention a colon and then type string
04:39 - so here we have created a variable with
04:42 - a type string
04:44 - that can be defined later at any point
04:47 - so
04:47 - now i want that the name should have a
04:50 - value
04:53 - pk
04:54 - so i'll give that give that the value
04:57 - okay
04:58 - so it
04:59 - now you can see that it is underlining
05:02 - is it by
05:03 - yellow so
05:05 - let's see what it is telling so now we
05:07 - are going to hit alt plus enter
05:10 - and it's saying that
05:13 - create it to value
05:14 - because it is not going to change so it
05:17 - is
05:19 - saying that it we can create it to value
05:21 - also
05:23 - now when i hit alt plus enter on going
05:25 - to the name it
05:27 - created the initialization
05:28 - initialization within itself
05:31 - why did it do that because
05:36 - the name was assigned just after the uh
05:40 - variable declaration so it don't have a
05:42 - sense and it makes the course code of
05:45 - more line
05:47 - okay
05:49 - so
05:50 - now we have understood that how to
05:52 - declare a variable
05:55 - uh there are two ways well and where
05:57 - keyword
05:58 - and
05:59 - how to declare it beforehand and not
06:01 - initialize it
06:03 - okay so how does that this code work so
06:05 - we are going to under a function which
06:07 - is
06:08 - which is has a name main
06:10 - okay so when i go to this where a equals
06:14 - to 20 so it creates a variable
06:16 - and a is the identifier by which this
06:19 - value has been identified
06:22 - okay so
06:24 - it is uh like a common
06:26 - nomenclature we follow
06:29 - for naming
06:30 - the identifiers so what we do is
06:33 - like
06:34 - when a
06:35 - variable has a short reference like in a
06:38 - function
06:40 - where the variable is used and at the
06:42 - end of function the variable is
06:44 - destroyed so we we can use their short
06:46 - variables such as a b c i
06:48 - yeah in for loop we use a variable and
06:52 - it is destroyed after the for loop is
06:54 - concluded so we can use short variable
06:56 - sort identifier there but
06:59 - when we
07:01 - make a large code so we uh
07:05 - we should it is a common practice that
07:07 - we should name the variable that
07:10 - such that we should name the identifier
07:12 - such that
07:14 - when we come after three or four months
07:16 - through the code three or four months
07:18 - when we wrote the code
07:19 - so we should know that uh why we why we
07:22 - created that variable and what the what
07:25 - that variables variable hold
07:28 - so
07:29 - i'll just introduce some common practice
07:32 - such that
07:34 - i have a application
07:37 - that stores a stores the mobile number
07:41 - so
07:42 - what i can do is i can
07:45 - create a identifier such as
07:47 - mobile number mobile
07:51 - number
07:54 - in from application
08:00 - okay so it is a string that initially
08:03 - holds
08:04 - a number
08:05 - 99999 okay so
08:08 - what i did here is i
08:11 - started with a
08:12 - small letter
08:14 - and then
08:15 - after every word i created a capital
08:18 - letter
08:20 - okay
08:20 - so it's just a common practice we
08:22 - recommend you to
08:24 - make your identifiers in this way okay
08:27 - otherwise that's fine you can use
08:28 - underscore
08:30 - so
08:31 - your
08:33 - variable
08:34 - identifier should start with a small
08:37 - case letter and it should not contain
08:41 - any other special letters under than
08:44 - any other special letters
08:46 - other than
08:48 - underscore
08:49 - so again you only use underscore and
08:52 - your variable identifier cannot start
08:55 - with an underscore
08:57 - okay so i hope that you like this video
09:00 - in the next video we are going to cover
09:02 - the data types
09:03 - and then we will proceed further thank
09:05 - you
09:09 - you