00:01 - hello and welcome back to the new way of
00:03 - the Java tutorial Series so today in
00:04 - this video we will be covering
00:05 - interfaces in Java
00:07 - which is used to achieve the
00:09 - abstractions in abstraction in Java okay
00:11 - so an interface in Java is a blueprint
00:13 - of the class
00:14 - it has the static constants and Abstract
00:16 - methods the interface in Java is a
00:19 - mechanism to achieve abstraction okay so
00:22 - there there can be only abstract methods
00:24 - in Java interface not not method body
00:27 - because we have seen earlier abstract
00:30 - methods doesn't have anybody uh
00:32 - it is used to achieve abstraction and
00:34 - multiple inheritance in Java so in when
00:37 - we are trying to when we are learning
00:39 - inheritance in Java at that time I have
00:41 - said uh multiple multiple entries is not
00:44 - supported in Java and we can achieve
00:47 - that multiple units in Java by using the
00:49 - interface by uh how we will see in this
00:53 - video itself
00:54 - in other words you can say that
00:56 - interfaces can have the abstract methods
00:58 - and variables it cannot have the method
01:00 - body okay and interface in Java is also
01:04 - represents a is a relationship as we
01:07 - have discussed in our in inheritance
01:09 - part and uh next up why we use
01:13 - interfaces in Java there are mainly
01:15 - three reason to use interfaces in Java
01:17 - it can be used to achieve the
01:19 - abstraction by interface we can support
01:21 - the functionality of the multiple
01:23 - unitings in Java and it can be used to
01:25 - achieve loose coupling
01:27 - okay so how to declare any interface
01:30 - okay so we'll see uh this how to declare
01:34 - when we bring some example of The
01:37 - Inheritance okay before that uh we need
01:39 - to understand some uh interface
01:41 - improvements that Java has done after
01:43 - the Java 8 release okay the Java
01:46 - compiler adds the public and Abstract
01:48 - keyword before the interface method and
01:51 - moreover it adds the public and static
01:53 - and final keywords before the data
01:55 - members in other words uh here you can
01:57 - see one example interface printable and
02:00 - int Min is equal to 5 and wordprint
02:02 - method is declared
02:04 - and uh what com compiler of the Java
02:08 - interprets is as uh this is the Java
02:11 - printable.java class dot Java class and
02:14 - this is the class which is created by
02:16 - the compiler so here we have written int
02:19 - mean is equal to 5 and what the Java
02:22 - compiler interprets is as public static
02:25 - final it adds the three uh keywords
02:27 - public static final if you heard before
02:30 - the Declaration of that
02:32 - variable whether you write it or doesn't
02:35 - don't write it it doesn't matter
02:37 - compiler will going to add these
02:39 - keywords before that Declaration of that
02:42 - variable and for the method it adds
02:44 - public abstract void okay
02:46 - and so here are some terms that you need
02:49 - to understand
02:50 - whenever a class
02:53 - a class in class A relationship is there
02:55 - it extends the okay this is the
02:57 - inheritance and whenever class
02:59 - implements in in interface and interface
03:02 - extends an interface okay we'll see one
03:05 - example of it okay so see we will see
03:08 - one real life example of the Java
03:10 - interface uh Bank example as we have
03:12 - discussed earlier okay
03:15 - so let me get into my IDE and I will
03:19 - create one new class
03:22 - okay by the name of interfaces
03:28 - let me increase my font size
03:31 - I will get my main method okay and now I
03:36 - have to declare one interface
03:38 - okay okay wait
03:41 - now if if I write one interface name is
03:47 - okay interface
03:51 - Bank
03:54 - and inside this interface I will
03:57 - create one float variable
04:01 - that is
04:03 - rate of
04:05 - invest rate of interest
04:09 - okay this is the method rate of interest
04:12 - and
04:15 - here you can see I have not written a
04:17 - float rate of I have simply written
04:19 - float rate of interest so what Java
04:22 - entropy interprets this method as
04:25 - uh here you can see I have discussed
04:27 - earlier also public abstract okay so it
04:31 - adds adds one two variables two keywords
04:34 - so before that public
04:37 - abstract
04:39 - float
04:42 - rate of
04:46 - interest
04:50 - this is what Java interprets it
04:53 - interbates as okay and now you know
04:57 - inside outside this interface
05:01 - I will write one class
05:05 - any class SBI
05:09 - which is implements
05:13 - Bank interface
05:15 - okay so and inside this wait a second
05:19 - why I am getting error duplicate class
05:22 - okay I will write Banks now it okay
05:25 - Banks okay and here IntelliJ IDEA is
05:29 - throwing some errors let me check why
05:31 - the class SBI must be either declared as
05:34 - app store called implement the abstract
05:36 - method rate of interest okay so this is
05:38 - here you can see we we didn't write any
05:40 - abstract keyword before it and if still
05:44 - that Java is throwing some error telling
05:46 - that this is an abstract method you have
05:48 - to implement this method inside this
05:50 - class okay so let
05:52 - us Implement that
05:55 - method public
05:58 - float
06:01 - rate of
06:03 - interest
06:07 - and for the body of this method I will
06:10 - simply return
06:12 - float value
06:14 - 9.15 f
06:17 - okay now it's not doing error and inside
06:22 - my main method I will create the object
06:26 - of that
06:27 - Banks interface
06:30 - oops sorry
06:33 - Banks
06:36 - obj1 is equals to new
06:39 - SBI okay and now
06:43 - here I will just simply print
06:49 - sbis
06:52 - rate of interest
06:56 - is
06:59 - and I will concat it with
07:03 - what is the object name object one dot
07:06 - rate of interest
07:08 - okay uh it was a throwing some errors
07:12 - duplicate class found okay SBI is Click
07:15 - we will write sbis
07:18 - it's okay
07:19 - okay and run interface
07:22 - access dot Java here you can see SBI is
07:25 - Roi is 9.15 9.15 here here we have
07:29 - declared it so this is how a interfaces
07:33 - Works in Java to implement that
07:35 - interface we have we have one keyword is
07:37 - there implements and to achieve the what
07:41 - we can say polymorphism we have we are
07:43 - writing extends keywords okay so these
07:45 - are some differences don't get confused
07:48 - inside this when the class when there is
07:50 - a relation between class and class
07:51 - extend keywords is there when there is a
07:54 - relation between
07:55 - uh class n interface implements keyword
07:57 - is there and when there is a
07:58 - relationship between interface and
08:00 - interface extend keyword is there okay
08:02 - so let's discuss how we can achieve the
08:05 - multiple inheritance in Java by using
08:07 - the interfaces okay
08:09 - so let me comment this out
08:13 - this code
08:18 - or else I will just remove this
08:21 - so that you don't get confused
08:24 - between the passcode and current code
08:26 - okay
08:28 - uh now if I create one
08:34 - interface okay interface
08:39 - and I will name that
08:42 - printable
08:43 - inside this I will write void
08:47 - one method which doesn't return anything
08:49 - and this is an abstract method because
08:52 - everything will return inside the
08:53 - interface is an abstract method okay and
08:57 - after that I will write in again one
08:58 - interface
09:00 - uh travel show
09:05 - s h o w a b l e is showable
09:09 - and inside this I will write void
09:15 - show method
09:16 - okay so these are two interfaces
09:21 - and now inside my this interface is
09:25 - class which which is public class I will
09:28 - create
09:33 - public
09:35 - void
09:38 - print
09:40 - okay now before that I have to write
09:45 - one keyword which is implements so that
09:48 - Javan does knows that we are trying to
09:51 - implement those interfaces inside this
09:53 - public class interfaces okay so the name
09:56 - of the two
09:58 - interfaces are printable and one is
10:02 - actually and
10:05 - an intelligent idea is showing some
10:07 - errors we have to
10:10 - okay we have to
10:13 - declare that
10:15 - show method also inside this because
10:19 - that method was abstract method okay
10:26 - showing theirs and inside this print I
10:30 - will write simply one random string
10:32 - let's suppose
10:34 - hello
10:36 - and inside this I will write
10:41 - um
10:42 - world
10:43 - okay and now inside this main method I
10:47 - will create the object of this
10:49 - interfaces class interfaces
10:53 - sorry
10:58 - this is object one is equals to
11:02 - new
11:04 - interfaces
11:06 - okay and now if I try to call those
11:09 - methods object1 dot print and obj1 Dot
11:14 - show
11:16 - okay and now if I run this class
11:19 - hello and World should get printed okay
11:22 - hello and world is getting printed so
11:24 - here you can see uh
11:26 - we are trying to achieve the multiple
11:28 - inheritance over here why so because uh
11:31 - this is one child class and these are
11:35 - two parent classes and we are trying to
11:38 - inherit these two parent classes inside
11:40 - one child class and which is the example
11:43 - of the multiple heritance Okay so
11:46 - this is how you can achieve multiple
11:48 - linear attention
11:49 - Java by using the interfaces and the
11:51 - keyword which is used to
11:54 - here do this is implements okay so this
11:57 - is pretty much about interfaces in Java
11:59 - I hope you got some idea about the
12:01 - interfaces in Java thank you for
12:02 - watching this video