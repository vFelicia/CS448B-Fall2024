00:00 - in this video we will learn how to use
00:02 - encapsulation in Python and capsulation
00:05 - is one of the most important principle
00:09 - in object-oriented programming so let's
00:12 - get started I will be using this car
00:14 - class and the rectangle class which we
00:16 - have been using in the previous videos
00:18 - also and let me remove these print
00:22 - statements because we don't want them
00:26 - right now now let's say we want to
00:27 - change the value of speed so if you want
00:30 - to change the value of speed you can
00:32 - simply take your object for example for
00:36 - dot your attribute name for example
00:39 - speed and then you can directly change
00:42 - it for example 300 and when I run the
00:44 - program it's going to print the new
00:47 - speed which is 300 initially we have set
00:49 - the speed to 200 in here we can also put
00:53 - let's say the speed as string which is
00:56 - very stupid but will it work it works
01:00 - you can see here and this can break the
01:02 - function in which the speed is used so
01:05 - therefore it is very important that we
01:07 - protect our data and only give the
01:10 - access to our data to the other users so
01:14 - encapsulation is particularly important
01:17 - when you want to give your code to some
01:21 - other people because they might want to
01:23 - change your code so let's see how we can
01:25 - encapsulate our code so to encapsulate
01:28 - our code we create functions so let's
01:31 - create our first function which is to
01:34 - set the value of speed so I'm going to
01:37 - just say set underscore speed and inside
01:41 - the parentheses it's going to take self
01:44 - as the first argument which is the
01:45 - default and second is the value of speed
01:49 - so so I can say value here right and
01:53 - then once we have the value of speed we
01:56 - can just call self dot speed is equal to
02:00 - value similarly we can create our get
02:04 - method for the speed so right now we
02:07 - have created the set method to set the
02:09 - speed and now we are going to create a
02:12 - get method
02:13 - to get the speed and in order to get the
02:16 - speed we don't need to pass any argument
02:20 - we just need to return this speed which
02:23 - is already said so we can just write
02:25 - return and then self dot speed so we
02:29 - have created two functions set and get
02:31 - these are also called setter and getter
02:34 - for the attribute which is speed in our
02:37 - case so let's use these functions
02:40 - instead of this kind of setting of data
02:43 - so first of all I'm going to call this
02:45 - for object dot set speed method out of
02:50 - this object and then I am going to pass
02:52 - the new speed using this set method now
02:55 - in order to get the speed I can write
02:57 - instead of this for dot speed I can just
03:00 - write the for dot get speed which is
03:04 - going to give me the speed of this ford
03:07 - object so I'm going to run the code and
03:10 - you can see it prints the speed which we
03:13 - have set using the set method but still
03:17 - will this protect your data let's see so
03:20 - I'm going to once again try to use for
03:23 - dot speed and then I will try to set the
03:28 - new value of speed will it be a problem
03:31 - no so you can see when I try to get the
03:34 - speed the new speed is set and we want
03:38 - to prevent this kind of setting of data
03:40 - using this equals to symbol so we need
03:44 - to somehow make our attribute private
03:47 - now if you are familiar with other
03:50 - object-oriented programming languages
03:52 - like Java or C++ they use the keywords
03:56 - like public private or protected in
04:00 - order to mark their attributes or the
04:03 - member variables as the private or
04:05 - public or protected but python doesn't
04:08 - have any of these keywords so how we can
04:12 - make our data private so let me give you
04:15 - first of all an example so I am going to
04:17 - go to this class which is hello and Here
04:21 - I am going to set some values so first
04:24 - value is for example self
04:27 - not a is equal to 10 second value is
04:31 - self dot underscore B is equal to 20 and
04:37 - the third value is self dot underscore
04:41 - underscore C is equal to 30 so we have
04:45 - created three member variables in this
04:48 - hello class one is a second is
04:51 - underscore B and the C is with two
04:55 - underscores in front of it and let's try
04:58 - to access all these three values so I am
05:01 - going to just use the print method and
05:04 - then the Hello object dot a and
05:08 - similarly I will use this print to get
05:12 - the value of dot underscore B and also
05:18 - dot underscore underscore C now let's
05:21 - try to run this program and let's see
05:24 - what happens and you can see here the
05:26 - first value which is printed here is 10
05:28 - which is the value inside the a variable
05:31 - so this code was executed successfully
05:33 - now we can see here that 20 is also
05:37 - printed that means this code is also
05:39 - executed successfully but at the time of
05:43 - underscore underscore C when we want to
05:45 - use this underscore underscore C outside
05:50 - the class it says hello object has no
05:54 - attribute called underscore underscore C
05:57 - and this is the point
05:59 - so underscore underscore you can use to
06:02 - make your attribute private okay so this
06:06 - is up convention there is no keywords
06:09 - like private in Python that's why Python
06:12 - uses this kind of convention in which
06:15 - whenever you use double underscores it
06:18 - makes your data private when you use
06:21 - single underscore that also means that
06:23 - it's a private variable but this is only
06:26 - a convention nothing stops you to change
06:29 - the value of underscore B or accessing
06:32 - the value of underscore B okay so if you
06:36 - truly want to make your data private
06:38 - then use double
06:40 - underscore in front of your variable
06:43 - when you use single underscore that
06:46 - means it's a partially private variable
06:49 - and it's only a convention okay so let's
06:53 - go to our car class once again and now
06:56 - we know that we can add double
06:59 - underscore in front of our variable name
07:02 - so we have two variables here one is
07:05 - speed so let's add double List
07:07 - underscore in front of speed and also
07:10 - let's add double underscore in front of
07:12 - this color variable to make both of them
07:15 - private so I'm going to change this
07:17 - value of speed in getter and setter also
07:20 - and now let's try to access this value
07:23 - using this ford object which is
07:26 - underscore underscore speed now let's
07:28 - try to run our program so I'm going to
07:30 - change the file and then run our program
07:32 - and you will see that it's going to give
07:35 - us an error and this error says the car
07:38 - object has no attribute called color
07:40 - because this variable color is private
07:43 - now also you will observe that the value
07:47 - of the speed is 300 which is set by this
07:52 - set function even though we have set the
07:55 - speed again to 400 using this underscore
07:59 - underscore speed but this speed is not
08:02 - changed right so we cannot change the
08:05 - speed using this underscore underscore
08:07 - variable because now it's a private
08:10 - variable and that means we cannot change
08:13 - the value using this variable we need to
08:16 - use this set function in order to change
08:19 - the value of the speed also if you want
08:23 - to use this underscore underscore color
08:26 - here and let's run the code this will
08:28 - also give you an error because this
08:30 - underscore underscore color is private
08:32 - so either you can remove this code or
08:36 - you can create the setter and getter
08:37 - method for the color also so let's
08:41 - create the setter and get a method for
08:43 - the color
08:47 - and now we can access the value of color
08:50 - using the get color method right so
08:54 - instead of this get speed we can just
08:57 - write for dot get color and it's going
09:00 - to give us the value of color and now
09:03 - you can see that there is no error and
09:06 - the speed here is 300 which we have set
09:09 - using the set speed method and color is
09:13 - red which is the color we have given
09:15 - using this argument in the constructor
09:18 - and this type of restricting your data
09:20 - access using functions is called
09:24 - encapsulation let's do the same thing
09:26 - with our rectangle class also and let's
09:29 - create the setter and getter method
09:32 - inside the rectangle class so you
09:34 - already know we can use this define and
09:38 - then we can first of all set for example
09:42 - set the height first of all and then we
09:45 - can give the value of height here and
09:47 - then self dot height is equal to height
09:53 - right and don't forget you need to give
09:56 - double underscore in front of your
09:58 - attributes in order to make them private
10:01 - so I'm going to do just that and let's
10:06 - create the get height method also
10:12 - so now we have created the setter and
10:15 - getter for the height and let's do the
10:17 - same for the width also
10:24 - so now you have made the height and
10:26 - width as private and we have created
10:29 - setter and getter for the height and
10:31 - weight and now in order to calculate the
10:33 - area we can define one more method here
10:36 - which is the area method so let's create
10:38 - the area method here and this area
10:41 - method is not going to take any argument
10:43 - we are just going to return the
10:45 - multiplication of the height so self dot
10:49 - height multiplied by self dot underscore
10:54 - underscore width okay which will give us
10:57 - the area of this rectangle and we can
11:00 - call this area method instead of using
11:02 - this kind of notation so wrecked one dot
11:05 - area and rect two dot area also let's
11:13 - run the code by changing the file name
11:16 - here and run this code and you can see
11:19 - the area is printed now so this is how
11:21 - you can use an capsulation in python to
11:25 - hide your data I hope you have enjoyed
11:27 - this video I will see you in the next
11:30 - video