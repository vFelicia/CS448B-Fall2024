00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python we have already seen how to use
00:07 - Huff line transform to detect lines in
00:10 - open CV in this video we are going to
00:12 - see how we can use half circle transform
00:15 - to detect circles in an image now as you
00:21 - can see here I have this small example
00:24 - which loads an image and shows it into
00:28 - the I am show window so let me run this
00:31 - code and let me show you how this image
00:33 - looks like so you can see there are so
00:37 - many Smarties here inside this image and
00:41 - all the Smarties are of circle form
00:45 - right they are not the perfect circles
00:49 - but they are in the form of circles and
00:53 - we want to detect all these circles
00:56 - forms inside the image we can use half
01:01 - circle transform for that so let's see
01:04 - how we can use this half circle
01:07 - transform to detect the circles in the
01:10 - image so a circle is represented
01:12 - mathematically by this equation which
01:15 - you see on your screen so here X Center
01:21 - and the Y Center are the coordinates of
01:24 - the center and R here is the radius of
01:28 - the circle so if you know these three
01:31 - parameters then you can draw a circle so
01:36 - those coordinates of the circle and the
01:38 - radius of the circle we need to detect
01:41 - so now let's see how Hough circle method
01:46 - is applied using open CV so you might
01:50 - observe here that I have created a copy
01:53 - of this original image which I have read
01:56 - using this I am a read method in the
01:59 - next step I'm going to just convert this
02:02 - image into a grayscale image so I'm
02:04 - going to just write gray is equal to C V
02:08 - dot C BT color which is
02:13 - to take two parameters first is the
02:16 - source and second is the method so we
02:19 - are going to convert the color BGR to
02:24 - Cree
02:24 - now in the next step because our
02:27 - half-circle method works better with the
02:31 - blurred images so we are going to create
02:35 - this blurred image using median blur so
02:38 - I'm going to just say gray so we are
02:42 - going to overwrite this gray variable
02:44 - with CB 2 dot median love which is going
02:49 - to take few arguments first is the image
02:53 - itself so we are going to pass in gray
02:55 - here and the second is the key size or
02:59 - the kernel size so we are going to
03:01 - initially provide the kernel size of 5
03:04 - here now we are going to apply our
03:08 - half-circles
03:10 - method so I'm going to declare this
03:14 - circles variable and then I'm going to
03:17 - just call this method which is called CV
03:20 - dot half-circles
03:23 - method so this is the method and you can
03:27 - see it takes few parameters we are going
03:30 - to give these parameters one by one
03:33 - first is the obvious one which is the
03:37 - image so we are going to provide the
03:40 - gray scale image here which is already
03:43 - blurred so the second parameter here is
03:46 - the method which we want to use
03:48 - currently the only implemented method is
03:52 - 1/2 gradient method so the choice is
03:56 - very simple here we are going to just
03:59 - provide this CV dot 1/2 gradient method
04:05 - the third parameter here will be a DP DP
04:09 - is the inverse ratio of accumulator
04:12 - resolution to the image resolution so
04:15 - for example when DP is equal to 1 the
04:18 - accumulator has the same resolution
04:21 - as the input image and if the DP is
04:25 - equal to 2 then accumulator has the half
04:28 - as big as width and the height so we are
04:33 - going to take this DP value as 1 the
04:38 - next parameter here will be min dist
04:41 - it is the minimum distance between the
04:44 - center of the detected circles okay so
04:48 - here we are going to give initially the
04:52 - value of 20 and later we will adjust
04:55 - this value if the circles are very near
04:59 - to each other the next parameter which
05:02 - we are going to give here is the value
05:04 - of parameter 1 and parameter 2 or param
05:07 - 1 or param two the param 1 is the first
05:11 - method specific parameter in case of 1/2
05:16 - gradient it is higher threshold of the 2
05:20 - passed to the canny edge detector param
05:25 - 2 is the second method specific to the
05:28 - method which we have provided here which
05:30 - is the half gradient method it is the
05:34 - accumulator threshold for the circle
05:37 - centers at the detection stage so we are
05:41 - going to provide the value of the
05:44 - paramon and param 2 here so let's start
05:47 - with the param 1 value and we are going
05:50 - to provide param 1 value is equal to 50
05:53 - and param 2 value is equal to let's say
05:58 - 30
05:59 - so those param 1 and param two
06:02 - parameters are specific to this method
06:05 - which we are using the next parameter
06:09 - which we are going to pass here is the
06:11 - min radius and the minimum radius is the
06:15 - minimum circle radius and we are going
06:19 - to just start with the 0 so we are going
06:21 - to say that anything which is greater
06:23 - than 0 we are going to just draw it and
06:28 - then we are going to provide the max
06:31 - radius if this max radius is
06:35 - greater than or equal to zero it uses
06:37 - the maximum image dimension if it's only
06:41 - greater than zero it returns Center
06:44 - without finding the radius so this also
06:47 - we are going to start with zero let me
06:50 - just break this function so you can see
06:52 - all the parameters here
06:54 - so this huff circle method is going to
06:57 - give us the circle vector which we can
07:00 - iterate upon but first of all we need to
07:04 - convert those circle parameters which we
07:07 - got using this circles variable that is
07:11 - X and y coordinate and the radius into
07:15 - an integer so to do that we are going to
07:19 - just declare a parameter called detected
07:23 - circles and then we are going to use
07:26 - numpy to convert them into an integer so
07:30 - I'm going to just say NP dot you in 16
07:34 - and then in the parentheses I'm going to
07:37 - just use NP dot around and we are going
07:42 - to pass our circles parameter which we
07:46 - got using the half circles method now in
07:50 - the next step we are going to iterate
07:51 - over those detected circles so we are
07:54 - going to just say 4 and because this
08:00 - circle vector is going to give us X Y
08:03 - and the radius we can directly just
08:06 - extract those values so we are going to
08:08 - just say X comma Y comma R and then in
08:13 - our detected circles and those circles
08:18 - will be at this index so 0 comma colon
08:22 - and then inside this for loop we are
08:25 - going to first of all draw the circle
08:27 - and also we are going to draw the center
08:31 - so to draw the circle we already know
08:35 - that we have this circle method
08:38 - available which takes pew parameter
08:40 - first is
08:42 - the image so we are going to pass the
08:45 - copy of this image here so let's pass
08:48 - this copy which is output the second
08:51 - argument here will be the center which
08:53 - are the coordinate of the center which
08:55 - we already got in the form of X comma Y
08:58 - so we will give them in the form of
09:02 - tuple the third argument is the radius
09:04 - so radius is extracted in the R
09:07 - parameter here so we are going to pass
09:09 - the radius here and then the next
09:13 - parameter will be the color so let's
09:16 - start with let's say green color and
09:21 - then the thickness so we are going to
09:23 - give the thickness of let's say three
09:26 - here similarly when we use the same
09:30 - circle method and we want to draw the
09:33 - center then we know that this is the
09:37 - center so these are the coordinates of
09:39 - the centre and if the radius is very
09:42 - small let's say - then it's going to
09:45 - just draw a small point right so that's
09:49 - why I have given very a small value for
09:52 - example - here so it's going to just
09:55 - draw a very small circle which will look
09:57 - like a dot on the circle that's why this
10:03 - value is very small and we are going to
10:07 - just say that this will be also three
10:09 - and let's change the color of this dot
10:12 - let's say this will be this color okay
10:16 - so we are just drawing those circle on
10:20 - the copy of the image which is called
10:24 - the output so let's run this code and
10:27 - let's see what happens when we run this
10:29 - code and you can see this dot is first
10:35 - of all drawn on each circle which is
10:38 - detected which is in the form of yellow
10:41 - and also in the form of green all the
10:45 - circles are drawn so you can see this
10:49 - circle is drawn so every circular shape
10:53 - is
10:55 - you know and closed by the detected
10:59 - circle we also strangely detected that
11:02 - this circle somehow because open C we
11:07 - think that this is also a circle I have
11:10 - one more image which is shapes dot jpg
11:13 - so we are going to just see that also so
11:18 - I'm going to just say shapes dot jpg let
11:22 - me show you this image first of all so
11:24 - it looks like this so it has only one
11:26 - circle and some other shapes right so we
11:30 - are going to just run this code once
11:32 - again and you can see it just detect
11:35 - this circle and it just draws a small
11:39 - dot on the center and all the other
11:42 - shapes are undetected
11:44 - so this is how you can detect the
11:47 - circles inside an image using half
11:51 - circle transform I hope you enjoyed this
11:54 - video and I will see you in the next
11:56 - video
12:04 - you