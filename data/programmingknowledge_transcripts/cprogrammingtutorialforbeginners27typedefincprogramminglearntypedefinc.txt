00:00 - hey what's up guys welcome back to our
00:01 - YouTube channel and welcome to this
00:04 - video this is John from programming
00:06 - knowledge and in this video guys we're
00:08 - gonna be discussing type def in c
00:11 - programming so as a sort of review in
00:15 - the previous tutorial we have learned
00:16 - how to use unions and how to implement
00:19 - engines inside our c program and we also
00:25 - have implemented a simple solution or
00:28 - simple program that implements the
00:32 - capability of unions in C so as I've
00:36 - said in this video we're gonna be
00:37 - discussing type def and yeah I'm going
00:40 - to show you how you can use type def
00:42 - inside your program or C program so
00:47 - basically guys C is such a dominant
00:49 - language of its time and even now that
00:53 - even you can name those primary data
00:58 - type of your own and can create your own
01:01 - name datatype by blending data type and
01:06 - its qualifier so it means that we could
01:10 - create our custom name for our qualifier
01:13 - or custom name for our primary data type
01:18 - and then we can use the keyword type def
01:21 - right here and this is a keyword
01:28 - implemented to tell the compiler for
01:31 - assigning an alternative name to the
01:34 - existing data types this keyword type
01:40 - def typically employed in association
01:43 - with user-defined data types in cases if
01:47 - the names of data types turn out to be a
01:50 - little complicated or into intricate for
01:54 - a programmer to get or to use within a
01:58 - programs of their cases that the a
02:01 - particular data type or a name of a
02:04 - particular data type is like complicated
02:08 - and it's not easy to be used inside a
02:11 - program so that
02:12 - swear the type def comes in so it can be
02:16 - used to make the naming of our data
02:20 - types or your variables in C a lot a lot
02:24 - easier so the typical format for
02:27 - implementing this type def keyword is
02:29 - like this we can use the type def
02:35 - keyword just like that and then we could
02:41 - specify the existing names of data types
02:51 - or data type data type okay and then of
02:57 - course right after that is the alias
03:02 - user given name so again we're gonna use
03:09 - the type def keyword and then of course
03:12 - the existing names of data type so there
03:15 - are like int sign in and sign char and
03:22 - other the primitive data types inside
03:25 - our c program and then of course we're
03:27 - going to add the user given name which
03:32 - is the custom name that we want to name
03:36 - this particular existing name data type
03:41 - site this is going to make sense later
03:45 - on if we try to implement this inside
03:47 - our c program so for now just think of
03:51 - this as the syntax of defining or how to
03:55 - name our existing data types so type def
03:59 - and then existing names of of data type
04:02 - and then alias or the user given name so
04:07 - we could add here a sample snippet so
04:12 - like this type def okay and then sign
04:18 - long okay and we're going to give this
04:27 - user given name us as long okay so
04:32 - basically guess if you have or if you
04:34 - are trying to define sign long data type
04:39 - so it's going to be complicated or like
04:43 - it's going to have a long name because
04:48 - you can do it like this sign long and
04:53 - then say for example of our variable one
04:56 - and then sign long var to sign long var
05:04 - three and so on
05:06 - so as you can see the name of this
05:08 - particular variable or the data type has
05:12 - like signed and then long key word so
05:15 - it's going to take up more space take
05:18 - more we're going to type more text
05:22 - inside our program instead of just using
05:25 - it like this so all we have to do is
05:28 - define it like type def and then sign
05:32 - long and then as long and then we could
05:36 - implement this set of like that we could
05:43 - implement that by using something as
05:45 - long and then G okay so basically what
05:52 - we're doing here is that we're we're
05:54 - just getting this alias from there and
05:56 - then it's going to include all the data
06:02 - types or existing names of data type
06:04 - here so the as long is associated with
06:08 - this right here so we can declare or
06:12 - yeah create a variable with a sign long
06:16 - data type something like that and then
06:18 - of course we could add a variable just
06:22 - like this it will allow us to create two
06:25 - variables named G and D which will be of
06:30 - type sign long and this quality of sign
06:36 - long is getting detected from
06:38 - aslam okay which already defined the
06:42 - meaning of this long or as long in your
06:45 - program which is this particular meaning
06:48 - sign long okay and right after that we
06:53 - could make this or the concept of type
06:56 - type def can be implemented for defining
07:01 - a user-defined data type with a specific
07:04 - name and type and this type def can also
07:09 - be used with structure of c language and
07:14 - of course we already have that called
07:18 - demonstrated how we can use strap inside
07:21 - our c program so basically what we could
07:25 - do here as i've said we could add or use
07:29 - this a keyword type def in our structure
07:32 - so the syntax is like this all we have
07:38 - to do is type in type def and then strap
07:45 - and then say for example student so this
07:51 - particular struck is named student and
07:54 - then it has like the members of the
08:01 - struck s of type char and then say for
08:06 - example s name which is the name of the
08:09 - student okay and then we could say here
08:15 - in s h okay so this particular strap
08:21 - saved a data which is the name and the
08:28 - age of the student and of course we
08:31 - could add an alias tour strap so for
08:36 - example student okay so just like that
08:42 - and then of course you could use the
08:43 - struck inside our main so for now let's
08:46 - get rid of this so what we could do here
08:50 - is we could say
08:52 - stood and then st something like that
08:58 - and then we can see here printf and then
09:04 - enter student details okay you could add
09:10 - a new line here see me : and then we
09:17 - could copy and paste this you can see
09:23 - here enter student name and we're going
09:33 - to add a tab /t and then we could what
09:39 - we could do here is use the scanf
09:41 - function so percent s and then we're
09:46 - gonna be passing the SD that s name so
09:53 - all we're doing here is just assigning a
09:56 - value of this SDS name coming from our
10:02 - user okay and then second line or the
10:06 - second information that we need is all
10:09 - about the age of the student so enter
10:13 - the age okay so we should add backslash
10:21 - n right here to add a new line okay so
10:28 - what we could do here is scan F and then
10:33 - percent B okay and then we could say
10:40 - here st dot h okay and then printf just
10:51 - like this backslash n for a new line and
10:57 - then we can say here input done okay
11:02 - and of course we could display this if
11:05 - we want to you know to get all the
11:09 - information that we have entered the
11:11 - name and the age of the student okay but
11:15 - for now let's let's just let's just try
11:18 - this build and run our program okay so
11:23 - we have here the output enters student
11:26 - details so the first name or the the
11:29 - first option will be the name so we can
11:32 - say here is John and then the second
11:36 - option is the H so enter the age of the
11:40 - students a very sample the age of the
11:42 - student is 18 and then yeah we need to
11:48 - add it says here that the main that XE
11:54 - has stopped working we need to add the
12:01 - ampersand here and then build and run
12:04 - our program once again so I hope this
12:07 - word this would work right now so John
12:10 - and then the age of the student will be
12:12 - 18 so input done okay so basically guys
12:18 - we could define our strap with the use
12:24 - of type def keyword just like this and
12:29 - si as you can see here we define our
12:35 - stood alias right here and then we use
12:41 - that stood alias right here to name our
12:47 - variable st and then from that our st we
12:52 - could access the members by using the
12:55 - dot symbol so st that and then the
12:58 - members of our struct student okay so if
13:02 - you have questions regarding the use of
13:05 - type def and how to work with this
13:08 - inside our strap you can comment down
13:10 - below in the comment section and once
13:13 - again guys thank you for watching and
13:15 - in the next video