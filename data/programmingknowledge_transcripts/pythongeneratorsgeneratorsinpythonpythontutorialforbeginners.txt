00:00 - in the last video we have seen how to
00:01 - use iterators in python now in this
00:04 - video we are going to learn how to use
00:07 - generators in python so first of all
00:10 - what are generators so generators are
00:13 - the simple way of creating iterators now
00:17 - simply put a generator is a function
00:20 - that returns the iterator object on
00:24 - which we can iterate upon so let me give
00:27 - you an example of generators and then we
00:30 - will see why it's a simple way of
00:33 - creating iterators so what I'm going to
00:35 - do is I'm going to create a simple
00:37 - function my funk
00:39 - and inside this function I will use a
00:42 - special keyword called yield instead of
00:45 - return now after this keyword yield
00:47 - let's say I want to return some values
00:50 - so I'm going to write first of all a and
00:53 - then once again I'm going to use yield
00:56 - and I'm going to use B here and once
00:59 - again I'm going to use this keyboard
01:01 - yield and again I'm going to return C
01:04 - here so if your function contains at
01:07 - least one yield keyword then this
01:11 - function is called a generator function
01:14 - so how this yield keyword is different
01:17 - from the return so in the case of return
01:21 - the statement is immediately terminated
01:25 - entirely so after return you cannot do
01:28 - anything inside a function because after
01:31 - using this return keyword the statement
01:34 - is terminated entirely but the yield
01:36 - statement pauses the function and saving
01:39 - the state of that function so let me
01:43 - demonstrate what I said so I'm going to
01:45 - create a variable X and I'm going to
01:49 - just assign the value of my function to
01:52 - this variable X now on this X I can use
01:57 - our next function so as I said whenever
02:00 - you use at least one yield keyword
02:03 - inside your function it becomes a
02:06 - generator and I also said when you use a
02:09 - generator it returns the iterator
02:13 - object so this myfunc generator function
02:16 - returns the iterator object which we are
02:19 - saving inside the X variable and we can
02:22 - provide this X variable which is a
02:25 - iterator object as an argument of this
02:28 - next function which is going to give you
02:30 - the first value which you use with the
02:34 - yield keyword so let me just run the
02:36 - code so right click and then run the
02:39 - file and you will see it's going to give
02:41 - you the first value which you use with
02:43 - the yield keyword now after that let's
02:46 - say we use this next function two more
02:50 - times then it's going to give you the
02:53 - next value and once again when you use
02:55 - the next function it's going to give you
02:58 - the next value so it's like using the
03:01 - iterator on which you can use the next
03:03 - function but it's much simpler to use
03:07 - because you just need to use this yield
03:10 - keyword instead of implementing the ITER
03:15 - method and the next method inside your
03:18 - class which we have done in the last
03:20 - video now after using next three times
03:23 - because we only have used this yield
03:27 - three time let's use the next function
03:30 - fourth time because now in the fourth
03:33 - time your iterator is already exhausted
03:36 - and let's see what happens so you will
03:39 - see it's going to give you this
03:41 - exception which says stop iteration
03:43 - which we have already seen in the case
03:46 - of iterators also which I have shown you
03:49 - in the last video so generators are
03:52 - similar to iterators but they are more
03:56 - simple to use and create so you don't
04:00 - need to throw any exception the
04:02 - generator will take care of throwing
04:04 - this exception by itself so what is the
04:07 - difference between iterators and
04:08 - generators so as we have seen in the
04:11 - last video that in order to create an
04:14 - iterator laws we need to implement two
04:18 - methods which are ITER method and the
04:22 - next method so if you haven't seen the
04:24 - last video I will recommend you to watch
04:27 - that last
04:27 - in which I have shown you how to create
04:29 - the iterator class so whenever you need
04:33 - to implement the iterators they are more
04:35 - lengthy and sometimes counter intuitive
04:39 - now in the case of generators the
04:41 - methods like ITER and next are
04:45 - automatically implemented so this
04:48 - generator which we have implemented here
04:50 - will return the iterator object on which
04:54 - we can iterate upon so now what's the
04:57 - role of this yield keyword so whatever
04:59 - value you will right after the yield
05:02 - keyword it's going to return that value
05:04 - and immediately after that it's going to
05:07 - save the status of your function so that
05:11 - means for example whenever we call this
05:14 - next function for the first time with
05:17 - this x value then it's going to return
05:20 - the first value which you use with the
05:24 - yield keyword as soon as you do that
05:26 - your function is going to save the
05:29 - status of this iterator that means the
05:33 - iterator is at a and then whenever you
05:37 - call the next method once again your
05:39 - generator is going to remember that last
05:41 - time it has returned the first value and
05:44 - now it's the time to return the next
05:47 - value and this will go on and on until
05:51 - you use this yield keyword so let me
05:54 - give you one more example let's say I
05:56 - will declare a variable n and the
05:59 - initial value of n is 1 and then I'm
06:01 - going to just yield this value and for
06:05 - the first time and also above the yield
06:09 - keyword I'm going to print the value of
06:11 - n so I'm going to just give the string
06:15 - and after this string I'm going to just
06:17 - print the value of n same print
06:19 - statement I'm going to use before the
06:22 - other yield keywords also and before
06:25 - using this n keyword with other yields
06:28 - statements I'm going to increase the
06:31 - value of n by one every time so before
06:35 - the next year I'm going to increase the
06:37 - value of one months again and before the
06:40 - last
06:41 - shield also I'm going to increase the
06:43 - value of n once again so we have used
06:46 - yield three times and every time we are
06:49 - increasing the value of n and let's use
06:53 - the same initialization of my funk
06:56 - and also I will use this print statement
06:59 - three times and when I will do this I'm
07:02 - going to run the program and you will
07:04 - see what happens let me use this next
07:06 - function only once and when I run the
07:09 - code it prints the print statement using
07:12 - this print statement and then gives you
07:15 - the value of n which is one at the first
07:19 - yield then we have increased the value
07:21 - of n by one so now the value becomes two
07:24 - so when we call the next method once
07:29 - again it's going to give you the value
07:32 - of n and also it's going to print the
07:34 - next print statement so let me just move
07:38 - this below this expression so we will
07:41 - see the increment here also and similar
07:44 - we will do with the third yield
07:48 - statement so when I use this next third
07:51 - time is going to print the third value
07:54 - so basically your yield keyword is
07:56 - saving the status after it returns the
08:00 - value associated with it and it resumes
08:03 - the status whenever you use the next
08:06 - next function now let me show you one
08:09 - more thing and that is how you can use
08:11 - this yield keyword with the for loop so
08:15 - let's say I will create a for loop and I
08:19 - will say for I in some range and let's
08:23 - say this range is up to five and after
08:27 - this I want to print the value of I for
08:31 - example so here I will print the value
08:34 - of I and then what I'm going to do is
08:36 - inside this for loop I'm going to return
08:39 - the value of I so now we don't need this
08:43 - n variable so every time from the for
08:46 - loop I'm just returning the value of I
08:50 - in each iteration and let's see what
08:55 - happens so let me use this next function
08:57 - only once and you will see it's going to
09:00 - first print the value of I which is 5
09:04 - here which is little bit strange I
09:06 - thought I have written here range here
09:09 - but it was something else let's rewrite
09:12 - range function here inside this we have
09:16 - provided 5 as the range and once again
09:19 - when we run the code is going to print
09:21 - the value of I which is 0 now every time
09:25 - you use this next function it's going to
09:28 - give you the next value of I which is 0
09:31 - 1 2 until the 5 so let me just run this
09:36 - code once again and you will see it's
09:38 - going to give you the value until this
09:41 - for loop is valid and as soon as you go
09:44 - outside the range it's going to give you
09:47 - this exception which is stop iteration
09:50 - exception so everything in generator is
09:53 - working similar to the iterators which
09:55 - we have seen in the last video so how
09:59 - about we recreate the class which we
10:02 - have written in the last video when I
10:04 - have shown you the iterators example
10:07 - which is list iterator class so I'm
10:11 - going to write a similar code to iterate
10:14 - over this list of numbers so what I want
10:18 - to do is I want to rewrite this code
10:20 - using the generators so let me just
10:23 - split this editor so you will see it
10:26 - readers and generators side by side so
10:29 - I'm going to close this from here so on
10:31 - the left hand side we have generators
10:34 - file and on the right hand side we have
10:36 - that iterators file so let me just
10:39 - remove this code from here and what I'm
10:42 - going to do is I'm going to create a new
10:44 - function and I'm going to name it as
10:47 - list iterate a function with the smaller
10:51 - L and smaller I so this function takes a
10:55 - list as we have seen in the case of
10:58 - lists iterators which was taking a list
11:02 - as the argument so here also we are
11:05 - going to give this argument which
11:08 - list and inside this function what I'm
11:10 - going to do is I'm going to use a simple
11:12 - for loop for I in and I will iterate
11:17 - over the list which we have provided as
11:20 - an argument so we will iterate over this
11:22 - list using the for loop and then we are
11:26 - going to yield the value of I every time
11:30 - when we iterate over this list using
11:33 - this for loop and that's it so it's that
11:36 - simple to recreate the whole class of
11:41 - iterators using this generator so the
11:45 - biggest advantage here when we create
11:47 - the generator is we don't need to
11:50 - implement this ITER method or this next
11:54 - method and we also don't need to raise
11:59 - this exception from our function or a
12:01 - class whenever we create the generator
12:04 - the generator function will take care of
12:07 - the stop exception by itself so the only
12:12 - thing which remains now is we just need
12:15 - to create a list so we will use the same
12:18 - list as we have used with the list
12:21 - iterator class and instead of this class
12:24 - I will just replace it with this list
12:28 - iterator function and you don't need to
12:30 - do anything so you don't need to use
12:32 - this ITER method to get the iterator
12:35 - object this function is going to return
12:38 - the iterator object by itself so now we
12:41 - just need to call the print function and
12:44 - the next function and inside the next
12:47 - function we just need to pass this
12:49 - variable which we have got from this
12:52 - generator function which we have created
12:55 - and when we run this code so I'm going
12:58 - to right click and run this code once
13:00 - again it's going to give you the first
13:02 - value of the list which is 1 and when
13:06 - you do this several time let's say we
13:09 - call this function 6 times which is the
13:12 - length of your list also is going to
13:15 - iterate over your list and print each
13:18 - and every value which we have inside the
13:21 - list
13:21 - now if you use this value seventh time
13:24 - that means our iterator is exhausted is
13:27 - going to automatically throw the stop
13:30 - iteration error so we don't need to
13:32 - create or raise this top error by
13:34 - ourself generator function will take
13:37 - care of it by itself now as we have seen
13:41 - in the last video also we can use a for
13:43 - loop with the iterators so you can also
13:47 - write for X in your my list variable and
13:53 - then you can print the value of X every
13:56 - time and this is going to give you the
13:59 - same result and you can see it gives us
14:02 - the same result which is all the
14:04 - elements of your list which you have
14:07 - provided here so now this whole list
14:11 - class is performing the same operation
14:14 - as this small piece of code which we
14:18 - call generators so let's discuss the
14:21 - advantages of using generators first we
14:24 - have already seen that generators are
14:26 - easy to implement
14:28 - second is generators are more efficient
14:31 - if you want to perform the same logic
14:34 - with the normal function so let's say
14:36 - you want to perform the same
14:39 - functionality which is to iterate over
14:41 - the list of these numbers and let's say
14:44 - this list is big enough let's say this
14:48 - list length is 1 million then if you are
14:52 - using the normal function your normal
14:53 - function has to store all the 1 million
14:57 - values inside that list variable and
15:00 - that's not very memory efficient but
15:03 - whenever you use this kind of generators
15:07 - they are more memory efficient because
15:10 - they are not going to store 1 million
15:12 - values in the variable your generator
15:15 - function is going to work on the values
15:18 - one by one so let's say you want to
15:20 - stream some data let's say you want to
15:22 - stream a video and you don't know the
15:25 - length of the video then in those cases
15:28 - the generators are much efficient
15:31 - because they will work upon your stream
15:35 - in steps it's not going to wait for your
15:38 - stream to come entirely and then work
15:40 - upon it so generators are good to work
15:43 - with streams also so these are the few
15:45 - advantages of using generators in Python
15:49 - so that's how you use and create
15:51 - generators in Python I hope you have
15:55 - learned something new this time and I
15:57 - will see you in the next video