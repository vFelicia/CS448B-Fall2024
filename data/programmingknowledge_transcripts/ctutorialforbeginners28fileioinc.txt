00:00 - hey guys welcome to programming
00:01 - knowledge in this video we will see how
00:04 - to handle
00:04 - files using c plus now what is
00:08 - file handling why do we need to handle
00:10 - files
00:11 - well whenever we are running a program
00:14 - where if we are taking some input from
00:16 - the user or
00:17 - let's say we are even generating
00:19 - something which is really important and
00:21 - we need to
00:22 - store those things like let's say in our
00:25 - snake game
00:27 - when we made that we had no provision to
00:30 - give a high score right because every
00:32 - time you run the game
00:33 - the score starts from zero and there's
00:35 - no way to know
00:36 - what was the highest score made till
00:38 - date using this
00:39 - game right so to counter such
00:43 - problems where you need to store data
00:46 - to a hard disk not in the ram because
00:48 - whatever you're doing in
00:50 - the program in its runtime it's
00:52 - everything is getting into the ram right
00:54 - nothing is going to be stored onto the
00:56 - disk
00:56 - but you do need something on the disk so
00:59 - that
00:59 - whenever you want the data back whenever
01:03 - you want to read the data back you have
01:05 - a way to read it back you don't have to
01:07 - you know again ask the user to enter
01:10 - everything or
01:11 - you know miss out some important things
01:13 - and all those things that is why
01:15 - we actually handle files we write files
01:17 - to store data so that
01:19 - it will be useful in the long term now
01:22 - everything in c plus as we know runs on
01:25 - streams so
01:26 - whatever we are doing with the operating
01:29 - system with the hardware everything runs
01:31 - on stream so you're already familiar
01:33 - with one of the stream known as
01:35 - iostream right input output stream which
01:38 - allows you to
01:39 - access your keyboard and mouse using c
01:41 - plus
01:43 - now for files you have another stream
01:46 - similar to this
01:46 - iostream which is known as the file
01:49 - stream so what will filestream allow you
01:51 - to do
01:52 - it will allow you to access the hard
01:54 - disk of the computer so that you can
01:56 - write
01:56 - files there so you can write many types
02:00 - of files using
02:01 - file stream which we'll be discussing in
02:03 - a later video
02:05 - but today we will start with something
02:07 - really simple
02:08 - which is nothing but the ascii files
02:10 - ascii files are nothing but
02:11 - what you see every day the dot txt files
02:14 - right so we will be writing ascii files
02:18 - today using file stream so let's quickly
02:20 - import that
02:21 - hash include f stream
02:24 - and here in f stream you have a class
02:28 - called left streams right so f stream is
02:30 - a class
02:31 - and there are two other classes so let's
02:33 - quickly talk about them one is known as
02:35 - the os stream and one is known as the if
02:38 - stream
02:40 - now what is f stream f stream is nothing
02:42 - but a class
02:43 - it will give you it will allow you to
02:45 - create a file object with which you can
02:48 - read write files
02:49 - right but of stream and if streams are
02:52 - nothing but
02:53 - inherited classes so these are nothing
02:55 - but children of this parent class
02:57 - and the use of them is pretty
02:59 - straightforward of stream is nothing but
03:01 - the output file stream
03:02 - so you use this whenever you want to
03:04 - write out files
03:05 - and if stream is nothing but the input
03:07 - file stream which
03:08 - you use when you want to read files when
03:11 - you want to
03:12 - take input from the file right so
03:15 - these are the two classes well these are
03:18 - useful
03:18 - for fasting because in the ff stream
03:22 - what you need to do is you need to
03:23 - provide something known as flags so let
03:25 - me just write it down here
03:27 - you have something known as flag
03:30 - which you need to provide to the fstream
03:32 - class to read
03:33 - to get a particular functionality of the
03:35 - file so when you want to read in a file
03:38 - you put a particular flag
03:39 - when you want to write out a file you
03:41 - put a particular flag and all those
03:42 - things
03:43 - we will be talking about that later but
03:45 - today we'll be seeing one of such flags
03:48 - so basically all these flags start with
03:50 - something like ios you have
03:51 - two colons and then you have
03:55 - a string over here so we will be talking
03:57 - about this flag today which was ios
04:00 - app which is nothing but appending flag
04:03 - and we'll see what append means in a
04:05 - short wheel right so
04:06 - the this is about the classes this is
04:09 - just an overview
04:10 - we'll dig deep into it in the future
04:12 - videos but today we will see how to
04:14 - quickly write a file how to read a file
04:17 - and what are the different ways to read
04:19 - from a file right
04:20 - so let's start with writing out to a
04:23 - file so
04:24 - uh for that what we need to do is create
04:26 - an object of of
04:28 - stream output file stream so of stream
04:31 - and our object is known going to be
04:34 - file right now to open a file what you
04:37 - can do is you can just say file dot
04:39 - open and inside this you can pass in
04:43 - the file's name so i'm just going to do
04:45 - test.txt
04:46 - well this file doesn't exist i'll just
04:48 - explain you in a moment what this does
04:51 - but basically for now you can say that
04:54 - this file doesn't
04:55 - exist on my computer it will be created
04:57 - by this of stream class
05:00 - now you can either use this method the
05:02 - dot open method
05:04 - or what you can do is you can directly
05:05 - call the constructor so you can just
05:08 - you know use this constructor you can
05:10 - just pass in the
05:12 - name of the file over here and that will
05:15 - do the same job as file.open so this
05:18 - is about opening a file opening is
05:20 - nothing but
05:21 - if if that file exists on your hard
05:24 - drive what will do
05:25 - is it will just load it into the ram so
05:28 - whatever changes you make to that file
05:31 - everything will be affecting the
05:34 - original file in the hard disk
05:35 - and once you close it it will be removed
05:38 - from the ram so that's how of stream
05:40 - works
05:40 - and another important thing is you need
05:44 - to always
05:44 - close the file so once you open a file
05:47 - it's really important that you close the
05:49 - file
05:49 - well this should be it's a large
05:51 - technically but i'm just putting this
05:53 - right now so that you guys remember
05:57 - that whenever you need to whenever you
05:59 - open a file you always close the file
06:01 - this is a must right so it won't affect
06:04 - your program much but
06:06 - what it's going to do is it's going to
06:08 - clean up the ram so you don't want your
06:10 - files dangling around the ram right so
06:11 - if you don't
06:12 - if you forget to close this file it will
06:14 - be present in the ram
06:16 - and it will be removed only when you
06:19 - restart your computer so
06:20 - that is the reason uh it's always better
06:23 - to close a file once you open it
06:24 - and that's about creating a file or
06:29 - opening a file so if if this file exists
06:31 - if this exists
06:33 - where does this file go it just goes in
06:35 - the same directory as this main file
06:37 - so i have this project saved in my
06:39 - desktop so if i go to my desktop and
06:41 - open that project
06:42 - it's youtube so here you can see
06:45 - main.cpp
06:46 - and well i had created this file before
06:49 - so let me just
06:50 - remove that so here you have main.cpp
06:53 - right so
06:55 - this is the directory where the file is
06:56 - going to come now if i just
06:58 - run this program if i just run this i'll
07:01 - be getting a successful run
07:03 - and if i go there i'll be seeing
07:05 - test.txt over here so this has been
07:08 - created right now
07:09 - once i run this program and it will be
07:10 - created whenever you run this program
07:12 - basically what happens is even if
07:14 - it exists it will just overwrite every
07:17 - everything in that file so if if i write
07:20 - something over here so if i write
07:21 - something like this as a test
07:23 - save that close that and again run this
07:27 - so i just run this again
07:30 - go back here open up test and you can
07:33 - see it's blank
07:34 - it's gone right so that is what happens
07:38 - when you open a file
07:39 - i will tell you how to save the previous
07:41 - contents but for now let's just talk
07:43 - about creating a file what happens is
07:45 - even if it exists it will be overwritten
07:47 - and a new file will be created in the
07:49 - same name
07:50 - right and it's just like you're just
07:52 - deleting it and creating it again with
07:54 - the same name
07:55 - and it will be always created in the
07:57 - same directory from where you run the
07:59 - program so since i'm running it from
08:01 - main.cpp so here i'm at main.cpp i'm
08:04 - running it from here it's creating in
08:06 - this directory
08:07 - and if you go to bin debug here you will
08:09 - have the exe file right so i've told you
08:11 - how to distribute your programs
08:13 - so this exe file will be created every
08:16 - time you compile your program
08:17 - and if i now double click on this the
08:20 - test.txt will be created in this
08:22 - directory now this is different from
08:24 - this one right so when i run main.cpp it
08:26 - will be created in this directory when i
08:28 - run this debug it will be created in
08:30 - this directory
08:31 - so basically if you don't provide
08:33 - directory what is going to happen is
08:34 - it's just going to
08:35 - create it in the same directory and if
08:38 - you want to
08:39 - create it in some other location so
08:41 - let's say
08:42 - um let's create it inside this obj so
08:45 - here you have a folder called debug
08:47 - right so i'll create
08:48 - one over here so you'll just need to
08:51 - provide this
08:52 - folders name so all i need to do here is
08:55 - i'll just say obj
08:56 - slash test.txt and if i run this
09:01 - and i'll be getting it over here so obj
09:04 - test.txt
09:06 - right so that's how you create files in
09:08 - different locations
09:10 - and whatever it suggests is that you
09:12 - don't worry much about the location so
09:14 - you just create the files and then move
09:15 - it to wherever you want right
09:17 - that's going to be really easy so that's
09:19 - one way or else you can just
09:21 - create it in the exact location you want
09:23 - and work with them it's
09:24 - up to you but for now this is how you
09:26 - create a file
09:28 - and now let's see how to write to the
09:30 - file we opened this
09:31 - in of strip mode right so you can write
09:33 - to this file
09:34 - so how do i write this well how do i
09:37 - write something to the console you do
09:39 - something
09:39 - like this right so cr this is a dash
09:42 - this is how you write to the console
09:44 - and let's say new line and
09:47 - this is on another line this is how you
09:50 - write to the console and if i run this
09:52 - what i will be getting is i'll be
09:54 - getting
09:54 - those lines onto my console now
09:58 - the way you write to a file is really
10:01 - simple what you need to do is you just
10:03 - need to remove this
10:04 - c out and place file over here so that's
10:06 - how you write
10:07 - something to the file this operator is
10:10 - all that matters because both of
10:11 - them are streams right and this is
10:13 - nothing but a stream operator this
10:15 - output stream operator that is why what
10:17 - you can do is you can just use this
10:19 - operator to write something to the file
10:21 - and now i just close this file if i run
10:23 - this
10:24 - i'll be creating a file of the name
10:26 - test.txt inside obj well i did not
10:29 - remove this well basically it will be
10:32 - created inside object you will have
10:34 - these content so if i go
10:35 - here so this is not the file so here you
10:37 - can see it's empty it's inside obj
10:41 - and here you have test which has those
10:44 - contents
10:45 - so this is how you write the file right
10:47 - so this is how simple it is to write to
10:49 - a file you just use the
10:50 - stream operator to write to the file and
10:53 - you must have guessed it
10:54 - reading a file is almost similar so now
10:57 - let's move on to reading files i'll just
10:59 - delete this i don't want
11:00 - my structure of the project to be messed
11:03 - up so i'll just keep this
11:04 - inside the same directory and
11:08 - now to read from a file what i can do
11:11 - will
11:11 - before going to reading from a file
11:15 - let's talk about appending to file what
11:17 - is appending
11:18 - well if i not change to this content it
11:20 - will be overwritten right so you just
11:21 - seen that
11:22 - whenever i use oaf stream our file will
11:25 - be deleted and a new file will be
11:27 - created in its place with the same name
11:29 - right so if i now remove this so let's
11:31 - say i remove this so this is on another
11:34 - line is the only content
11:35 - if i now run this i'll be getting that
11:38 - thing inside this file test.txt which
11:42 - has only one line now how do i
11:45 - add something to this i cannot add
11:47 - something right so if i just remove this
11:48 - and i add something
11:49 - else over here so if i just remove this
11:52 - i just keep this the word this over here
11:56 - and i run this you you know that it's
11:58 - just going to be overwritten over here
12:00 - everything else would be gone i just
12:01 - have this over here now
12:03 - now how do i tackle this well there is a
12:06 - flag as i told you
12:07 - in the beginning it's the appending file
12:10 - how to add flag is that
12:12 - you just put a comma in the constructor
12:14 - or in the open statement so if you are
12:16 - using the
12:18 - function to open it you just do the same
12:20 - thing over here so you just do test.txt
12:22 - put a comma and write whatever i'm going
12:25 - to write here
12:26 - right so here what i'm going to do is
12:29 - add the appending fact so ios these two
12:32 - colons and then you do app which will
12:35 - enable the file in append mode so what
12:38 - happens is that it is not going to
12:40 - whitewash the file
12:41 - the things are going to remain but
12:42 - whatever i'm going to
12:44 - add now are also going to be written
12:47 - over there now if i do something like
12:49 - [Music]
12:50 - this is some new content
12:54 - being added and uh just to differentiate
12:57 - let's keep it on a new line
12:59 - because if you don't keep it on the new
13:00 - line it just works like c out operator
13:02 - right
13:02 - if we don't keep a new line it's just
13:05 - going to write it
13:06 - beside that so that's the thing so if i
13:08 - just write this
13:09 - save this run this build and run this
13:12 - sorry
13:13 - and now if i go to my test.txt so that
13:17 - that is the file i've been writing to
13:19 - right so if i now open
13:20 - this here you can see that the new
13:22 - content has been added and the old one
13:24 - is being preserved
13:25 - so that is about appending files and now
13:28 - let's talk about reading from a file
13:31 - well to reading to read from a file it's
13:34 - almost straight forward what you need to
13:36 - do is just remove of stream and replace
13:38 - it to if stream so if stream is nothing
13:40 - but
13:41 - input file stream and how do you read
13:44 - from the console you do
13:45 - this right so you have variables called
13:47 - string s
13:49 - and you just read from the console like
13:51 - this
13:52 - and to read from a file just replace
13:55 - scene with
13:55 - file and that's going to allow you to
13:58 - read the file
13:59 - and now since i have a string here what
14:01 - is going to happen is it's going to read
14:03 - word by word now if i do c out
14:06 - s i'll be getting the first word so what
14:08 - is the first word over here
14:10 - in my file the first word is this right
14:12 - so i'll be getting this over here
14:14 - so if i run this i'll be getting this
14:16 - and now if i change this to a character
14:19 - if i do care and now if i run this i'll
14:22 - be getting the first characters
14:23 - which is t right now how do i read the
14:27 - whole file so basically what happens is
14:30 - that whenever you write a file whenever
14:32 - you do file.close
14:33 - what's going to happen is that the newly
14:35 - added content
14:36 - after that at the end of the file you
14:39 - have a special character which is not
14:41 - visible
14:41 - known as the end of the file character
14:43 - or the eof
14:44 - so eof is nothing but end of file
14:48 - and this is a character and while this
14:50 - is not reached we can just keep on
14:52 - looping
14:53 - so what we'll do is we'll run a loop and
14:56 - after every time we get a character
14:58 - we'll check
14:59 - whether it is the end of the file
15:00 - character or not once you reach the end
15:02 - of the file character
15:04 - you will just terminate the loop so how
15:06 - do i do that it's really simple
15:08 - i just do well let's just keep a string
15:12 - variable on the outside of the loop so
15:14 - that we don't create it every time
15:16 - so here what i'm going to do is while
15:19 - let me just put it on new line while
15:22 - file dot eof so while file.tf while
15:26 - file.tf has not been reached so for that
15:28 - i need to put not
15:29 - so while not file.erf while not file.
15:32 - has been reached what i can do is i'll
15:35 - just
15:36 - read the con word inside string and
15:40 - i'll just print out the string on a new
15:42 - line
15:44 - right straight forward now if i don't
15:47 - run this what i'll be getting is i'll be
15:49 - getting all of it so this
15:51 - this is some new content being added so
15:53 - all these other words in my
15:55 - file so that's how i get word by word if
15:57 - i need character by character
15:59 - it's almost the same thing i just change
16:01 - this to care run this again
16:03 - and i'll be getting every character in
16:06 - my
16:07 - file so this is how you read character
16:09 - by character
16:10 - and if you want to read line by line
16:12 - it's little bit different you
16:13 - don't read to the end of the file what
16:16 - you will do is
16:17 - you will just read the lines one by one
16:19 - and read till you
16:21 - reach the end of the file so what you do
16:22 - is i'll just
16:24 - show you it's just string s and here
16:26 - what i do is
16:27 - get line from the file inside s
16:30 - and while you can get the line if you
16:32 - don't get the line
16:34 - it's going to return false if you can
16:35 - get the line it's going to return true
16:37 - and i don't need this operator too so
16:39 - i'll just remove that
16:41 - and now if i run this i'll be getting
16:44 - the lines so this
16:45 - this is some new content added and then
16:47 - a new line that's because of this one
16:49 - right
16:50 - so here you can see it's just reading
16:52 - line by line
16:53 - so if i want to stop it somewhere so
16:55 - basically what this does is
16:57 - it's it's called a delimiter so what it
17:00 - does is you
17:01 - you have a line right so you have this
17:03 - line and you have this line
17:05 - how is it stored in the memory you have
17:07 - this special character which you know
17:08 - about right
17:09 - this is the slash n so this is how it's
17:11 - going to be stored so this
17:13 - when this character is reached it will
17:15 - consider this whole sequence as a new
17:17 - line but
17:18 - what if you want to consider this so if
17:20 - i just put this character
17:21 - in between i want to consider this one
17:23 - as in one line and
17:25 - this whole thing as another line so that
17:27 - can also be done
17:29 - using the delimiter so what you do is
17:31 - you just put a delimiter like
17:33 - i just put a space over here so that's
17:36 - going to be considered as the delimiter
17:38 - for stopping
17:39 - when uh and considering the whole
17:41 - sequence as a line
17:43 - basically the default is that slash n
17:46 - because
17:46 - that's what you consider a line right so
17:48 - whatever if
17:50 - if you write something like this and
17:51 - then you move to the next line so when
17:53 - you press
17:53 - enter that slash n is getting added so
17:56 - that is what you consider as a new light
17:58 - but basically if you want to consider
17:59 - something else as a new line this is how
18:00 - you do it
18:01 - and now if you just run this i will be
18:03 - getting every word that is because after
18:05 - every word i've given a space right so
18:07 - and this is
18:07 - the uh delimiter i've given and if i put
18:10 - something else which is not there so if
18:12 - i put this thing it is not there in my
18:14 - file right so that character is not
18:16 - there anywhere so
18:17 - the whole thing is going to be
18:19 - considered as a sequence now if i run
18:20 - this
18:23 - here you can see the whole thing has
18:24 - been considered as one single line
18:27 - right so that's how you can read from
18:30 - files you can write to files
18:31 - and it's all about the text file so
18:35 - you can do many operations like you can
18:38 - read
18:39 - you can count how many words are there
18:41 - or what you can do is you can
18:44 - read the files and see if some data is
18:47 - getting stored over there or
18:48 - some specific word is appearing in that
18:51 - file or not so all these things you can
18:52 - do
18:53 - let's quickly write a small program to
18:55 - do that what you can do is
18:57 - i'll just say of stream file file dot
19:00 - close
19:01 - never forget these two things when you
19:03 - open
19:04 - a file you need to close it and let's
19:06 - say we'll just
19:07 - say let's see out enter your name
19:11 - [Music]
19:13 - and i'll get a name here so string name
19:19 - c name so this is just like i'm just
19:21 - showing you how
19:22 - you can use the files this is just a
19:24 - simple example and here
19:26 - i will do another thing like see how
19:30 - enter your page
19:33 - and i'll just say in age
19:38 - and now what i'll do is i have already
19:42 - opened the file right so
19:43 - let me just move this down here i don't
19:45 - want to
19:46 - put this file in the memory right now so
19:49 - once i have all this information entered
19:51 - i'll open the file
19:53 - i will write this information to the
19:55 - file how do i write it i'll just say
19:57 - a name and a name
20:01 - new line it's just like this yet
20:03 - operator right um
20:05 - i hope that you're getting the
20:06 - similarity over here and then
20:08 - it's h and then the age
20:12 - that's it i'll just do file.close and
20:15 - well i did not give any name to the file
20:17 - so let's say
20:18 - details.t i'll use this name
20:23 - i'll build and run this i'll be getting
20:25 - what is your name
20:26 - it's tony you it's your age and say okay
20:29 - it's too much let's say 12 and i enter
20:32 - that
20:34 - i run that program now i go here i have
20:37 - this details.txt
20:39 - i open that and here i have my details
20:41 - so whenever i need this information
20:43 - again i will be having that information
20:45 - and i can just read from this well
20:47 - basically for these kinds of information
20:49 - this these are nothing but details right
20:50 - so you have
20:51 - uh name 208 stuff and something like
20:54 - that so
20:55 - you you can maintain a table like that
20:57 - so will that kind of
20:58 - stuff that this is just to store text
21:01 - data
21:02 - this is just to store ascii data there
21:04 - is actually another way another
21:06 - a better way to uh you know store
21:08 - information like this
21:10 - it's it's nothing like sql if you're
21:12 - familiar with sql sql is nothing but a
21:14 - database language but
21:16 - for now what we can do is we have
21:18 - something called binary files so what
21:20 - you can do is you have something called
21:22 - that files where you can write classes
21:25 - now why do we need to write a class well
21:28 - all these things if you want you can
21:29 - just create a class
21:31 - and then you can assign particular
21:33 - variables for that
21:35 - once you have a object of that class you
21:37 - can directly write that object inside
21:39 - the dot that file
21:40 - and you can access them this uh details
21:43 - thing that's how
21:45 - people do it because it's really easy to
21:47 - access in that way because
21:49 - once you have this one line you need to
21:52 - strip that line you need to
21:54 - you know get that last character and all
21:57 - these things so that
21:58 - kind of things won't be necessary right
22:00 - so that is the only reason people use
22:03 - dot dad files because once you have a
22:05 - class once you read it inside a class
22:07 - you can just do
22:08 - well it's just like you have something
22:10 - like person p
22:12 - and once i read this inside this what
22:14 - i'll do is i'll just do p dot
22:16 - name i'll get the name p dot h i'll get
22:19 - the age and something like that so p dot
22:21 - h will give me the h
22:22 - so that's how people do it and we'll see
22:25 - how to do that
22:26 - in the next video and till then happy
22:29 - coding