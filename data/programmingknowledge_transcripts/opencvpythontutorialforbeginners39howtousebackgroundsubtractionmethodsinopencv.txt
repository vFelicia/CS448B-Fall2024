00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we are going to see
00:07 - how to use background subtraction method
00:09 - in open CV so first of all what is
00:13 - background subtraction so background
00:16 - subtraction is common and widely used
00:19 - technique for generating the foreground
00:22 - mask which is also known as the binary
00:26 - image containing the pixels belonging to
00:30 - the moving object of a scene when these
00:34 - images are captured using a static
00:38 - camera and as the name suggests
00:40 - background subtraction calculates the
00:44 - foreground mask performing the
00:46 - subtraction between the current frame
00:49 - and the background model containing the
00:52 - static part of the scene so for example
00:56 - the background subtraction method can be
00:58 - used in the case of visitor counter
01:02 - where you have a static camera capturing
01:05 - the number of visitors and during or
01:08 - leaving the room or you have a traffic
01:12 - camera which wants to count the various
01:17 - telematic data from the moving car or
01:21 - moving car data which is captured by
01:25 - that traffic camera now there are
01:28 - several algorithms which were introduced
01:30 - for the purpose of this background
01:33 - subtraction and OpenCV has implemented
01:36 - few of them which we are going to see
01:38 - one by one so as you can see here I have
01:43 - this example which is a very simple
01:46 - example of just taking a video and then
01:50 - we are extracting each and every frame
01:53 - of that video and showing it into a
01:58 - window so you say I am show method I'm
02:00 - just showing each and every frame of
02:03 - that video so this you already know from
02:06 - the previous videos how to capture the
02:11 - video frames from
02:13 - a video file or the live camera so when
02:17 - I run this code you will see that there
02:20 - are few persons which are moving here
02:23 - and we want to detect all those moving
02:28 - persons which are moving in the image so
02:33 - for that we are going to use a few
02:35 - methods which are available in OpenCV so
02:39 - let's first write some code and I will
02:42 - explain you what this code is going to
02:45 - do so I'm going to define a variable
02:49 - after this line of code and I'm going to
02:53 - define a variable named F gbg4
02:57 - foreground/background and then i'm going
03:01 - to just call CV dot BG s e-g m so BG s
03:09 - e-g M and then I'm going to call a
03:12 - method called create background
03:14 - subtraction mo G method so this create
03:18 - background subtraction mo g method is a
03:21 - Gaussian mixture based background and
03:24 - foreground segmentation algorithm so
03:27 - using this line what we are doing is we
03:30 - are just creating a background object of
03:32 - the function using this method create
03:36 - background subtraction mo G now this
03:41 - method has some optional parameters like
03:45 - history number of Kos in mixtures and
03:49 - threshold but all of them are set by
03:53 - default so you don't need to set
03:55 - anything specifically unless you want to
03:59 - change some of the optional parameters
04:00 - so I'm going to leave everything as
04:02 - default and I'm not going to give any
04:05 - argument here for this method and then
04:09 - after I captured each and every frame
04:13 - inside this while loop what I'm going to
04:15 - do is I'm going to create a new variable
04:18 - called FG mask for foreground mask so
04:22 - I'm going to just write FG mask is equal
04:25 - to and for getting the four gram
04:27 - and masks we are going to just call a
04:31 - method called apply on this f G B G or
04:35 - the background subtractor image so we
04:38 - are going to just take F G B G and then
04:41 - we are going to call a method called
04:44 - apply here and it takes one argument
04:47 - which is the frame which we are
04:50 - capturing okay so we have applied this
04:54 - method and then we are just getting the
04:59 - foreground mask using the apply method
05:02 - on this background subtractor variable
05:06 - and that's it so this is your foreground
05:09 - mask so when I just use one more I'm
05:14 - show window and this is for the FG frame
05:18 - let's say so FG
05:20 - mask frame let's say okay so FG mask
05:24 - frame and we are going to just pass this
05:27 - argument here so let's see a what result
05:31 - we get after we apply create background
05:34 - subtractor mo g method so you can see
05:37 - this normal image here and also you will
05:42 - see these moving persons in the
05:47 - foreground mask right so you have
05:50 - subtracted the background from the floor
05:53 - ground and you can easily detect the
05:56 - moving persons here inside this image
05:59 - using this mask you will also observe
06:03 - that there is a very little noise not
06:07 - much when you use this kind of
06:09 - subtraction using Create background
06:13 - subtractor emoji method there is one
06:15 - more method which is called background
06:17 - subtractor mo g2 which is also Gaussian
06:21 - mixture based background and fro ground
06:24 - segmentation algorithm so let's use that
06:27 - method also so this method is directly
06:31 - available under cb2 so you just need to
06:34 - write CV dot create background
06:36 - subtractor mo G - okay and everything
06:40 - will
06:41 - remain the same so it's going to return
06:43 - you the background subtractor variable
06:46 - which you can use with this apply method
06:50 - to get the foreground a mask okay so
06:53 - let's see how this method performs so
06:57 - you can see the result which is quite
06:59 - different from the first method which we
07:02 - have used so in the previous case we
07:05 - have to create the background
07:07 - subtractive object and here in this
07:10 - method you have an option of detecting
07:13 - the shadows so there is an optional
07:16 - parameter which you can give into this
07:20 - method which is this create background
07:24 - subtraction emoji - which is called
07:26 - detect shadows so by default this detect
07:31 - shadows is true that's why you see the
07:35 - shadows there if you just write the text
07:38 - shadows is equal to false then it's good
07:41 - not going to detect the shadows so I'm
07:43 - going to just run the code once again
07:46 - and you can see now shadows are less
07:50 - visible right so let's run the default
07:54 - case once again so let's say we just
07:57 - write true here and you will see the
08:01 - shadows in the gray color right so these
08:05 - shadows in the gray color and when we
08:08 - just make it false so the text shadows
08:12 - false you will not see that gray color
08:15 - okay so shadows are displayed in the
08:19 - gray color so if you don't see any gray
08:21 - color then shadows are not detected this
08:24 - is a noise which is detected but not a
08:28 - shadow okay so this is the difference
08:32 - between the first background subtractive
08:35 - method and the background subtractor
08:37 - emoji - method there is one more method
08:41 - which is called the background
08:43 - subtractor G M G so this algorithm which
08:48 - we are going to use so let's use this
08:51 - method first of all which is called
08:55 - background subtractor G M G which is
08:59 - available under C V dot B G segment as
09:04 - the first method so just write BG s e-g
09:08 - m dot create background subtractor g mg
09:12 - method so this create background
09:14 - subtractor g mg method algorithm
09:16 - combines statistical background image
09:19 - estimation and p pre pixel by a scene
09:24 - segmentation let's see how this method
09:26 - performs when we just used this GMG
09:30 - method and when you will see here there
09:34 - is nothing on this foreground mask frame
09:38 - so to get the better result you need to
09:42 - apply morphological opening to the
09:44 - result to remove the noises so we are
09:48 - going to do just that so I'm going to
09:51 - just overwrite this F G mask frame using
09:57 - a method called CV dot morphology X this
10:02 - also we have seen in the previous videos
10:06 - right so the first parameter here will
10:10 - be FG masks parameter the second
10:13 - parameter here will be the OP so CB 2
10:19 - dot morph open we are going to use the
10:23 - morph open method and then the third
10:26 - parameter will be the kernel so we need
10:29 - to define the kernel also so for
10:32 - defining the corner let's define the
10:34 - kernel outside this while loop so I'm
10:36 - going to just write kernel which takes
10:40 - few argument first is the shape so we
10:43 - are going to say we want the more
10:46 - Eclipse shape so I'm going to just write
10:49 - more Eclipse and then the kernel size
10:54 - will be let's just 3 comma 3 ok so we
10:58 - are going to apply this kernel using
11:01 - this morphology X method and when we are
11:05 - going to run this code you can see
11:08 - these kind of results which are not as
11:11 - good as you have seen in the first
11:16 - method now let me show you the last
11:18 - background subtraction method which is
11:21 - called the background subtractor KNN
11:26 - method so this method is available under
11:31 - CV - directly so we are going to just
11:34 - comment this kernel code because for
11:37 - this method we don't need to define any
11:40 - kernel so we can just write CV dot
11:43 - create background subtractor and then at
11:46 - last you just need to write k + n in
11:49 - capital ok yeah and it also takes few
11:53 - optional parameters like history and
11:56 - other parameters but these are optional
11:59 - parameters so for now we are not going
12:01 - to set any parameter and let's see the
12:05 - result which we get using this KN method
12:08 - so I'm going to run this code and you
12:11 - can see this KN method result it also
12:14 - shows the shadows in the form of grey
12:17 - pixels so whatever gray pixels you see
12:21 - here in this image are the shadows in
12:25 - this method also there is an optional
12:27 - parameter which is called detect shadows
12:30 - which is set by default to true so when
12:33 - you make it false the shadows will not
12:36 - be detected so you can see no gray
12:39 - pixels are visible now when you make it
12:42 - true then the gray pixels will be
12:46 - visible and those gray pixels indicates
12:50 - the shadows right so these are the few
12:53 - methods which you can use for the
12:56 - background subtraction in OpenCV I hope
12:59 - you've enjoyed this video and I will see
13:01 - you in the next video