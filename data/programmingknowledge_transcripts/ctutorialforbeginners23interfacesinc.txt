00:00 - hello guys in this video I'm going to
00:03 - show you what is interface and how to
00:05 - use interface in C so let's see what is
00:10 - interface an interface contains
00:13 - definitions for a group of related
00:17 - functionalities that a class or a struct
00:20 - can Implement so in a way using
00:23 - interfaces we can invoke functions from
00:27 - different classes through the same inter
00:30 - interface reference whereas using
00:32 - virtual function we can invoke functions
00:35 - from different classes in the same
00:37 - interface hierarchy through the same
00:41 - reference so let's see how we can Define
00:45 - interface in cop and how we can use
00:48 - interfaces in
00:49 - cop so for the definition of
00:53 - interface how to define interface
00:56 - interface you can Define with a keyword
01:01 - interface and then the name of the
01:03 - interface I just I always like to uh
01:07 - declare the definition of the interface
01:10 - or name of the interface by starting
01:13 - with the capital I so that I know that
01:15 - it's an interface and for example I want
01:18 - to Define an interface
01:22 - for meters okay and then I just close my
01:31 - definition from here using these curly
01:35 - braces
01:40 - okay and so let's see what are the
01:43 - properties of intern interface this is
01:46 - how you can Define interface but how uh
01:50 - we can use members in interface let's
01:53 - see so the first thing is for example I
01:56 - Define
01:58 - int a in interface will it work let's
02:03 - compile our program and let's see if
02:05 - it's possible or not so I will just uh
02:09 - run this or start debugging this and I
02:12 - will see an error there is error and I
02:15 - will say no and it says interface cannot
02:18 - have fields that means you cannot have
02:24 - Fields like in a or bu something bu X or
02:29 - double double
02:30 - so you cannot have fields in interface
02:33 - you can only have methods in interface
02:38 - so let's define a method in interface so
02:40 - for example I want to define a method
02:45 - called
02:48 - Public
02:50 - public
02:54 - void
02:56 - print so I have defined this method in
02:59 - interface this should be
03:02 - public and then also when I compile this
03:07 - let's see what happens I'll run this and
03:11 - I will say no and this time also I get
03:14 - an error so I Define a method and then
03:18 - also it uh gives me an error and what it
03:21 - says the modify public is not valid for
03:25 - this item that means you cannot
03:28 - initialize the member methods or members
03:32 - of a interface with a access modifier so
03:36 - you just need to declare the method in
03:40 - the interface like this okay and now
03:43 - when you compile this or now when you
03:45 - run it it will work fine okay now for
03:51 - example you want to give any definition
03:54 - to your method in inside interface can
03:57 - we do this for example I'm I want
04:00 - [Music]
04:02 - to print
04:04 - something console
04:07 - dot
04:10 - right
04:13 - line and I want to print something here
04:18 - so I will just
04:20 - write
04:23 - print is it valid Let's see we run the
04:27 - program and it says
04:30 - error and let what's the error interface
04:33 - member cannot have definition so you can
04:36 - only Define the Prototype of a method
04:40 - inside interface and you cannot define
04:44 - the definition of the method inside
04:47 - interface so interface just contains the
04:52 - prototyping of method or prototypes of
04:55 - method okay now
04:59 - how we can use these interface so for
05:03 - example I will define a
05:06 - class class
05:13 - meter
05:15 - and so this class I
05:19 - Define and I will close these curly
05:24 - Braes and how we can use this print
05:27 - method or how we can give the definition
05:29 - of the print method we can just inherit
05:32 - from interface so this IM meter or this
05:36 - meter will inherit from this interface
05:39 - like this so how to
05:43 - define an inheritance of this
05:47 - interface you can just write like this
05:53 - colon and then IM meter okay and then
05:57 - you can just give the definition of of
05:59 - this
06:01 - method and now let's see I have the same
06:05 - prototype and the definition and here I
06:08 - want to give some
06:12 - console line right
06:18 - line will it be valid let's see
06:37 - so for example something I want
06:41 - to write here okay and when I run the
06:45 - program it still shows me error why
06:51 - because it's saying that this method
06:55 - does not have interface member
06:59 - definition
07:00 - so I have told you that interface
07:04 - definition or interface prototyping does
07:06 - not have access specifier but you when
07:08 - you provide the definition to the
07:10 - interface method you need to specify the
07:14 - specifier public specifier or member
07:17 - specifier and by
07:19 - default all interface members are public
07:24 - method okay so just remember this by
07:27 - default all interface members are public
07:32 - okay so just
07:35 - write public and when I run this it'll
07:39 - run fine okay because I'm not using this
07:43 - class in my main so it will not print
07:45 - anything but it doesn't give me any
07:48 - errors so that means I'm on the right
07:51 - path so this is how you can Define the
07:55 - Prototype of interface and how you can
07:59 - in har it from the interface and now you
08:03 - can just Define for example meter
08:08 - object
08:10 - meter m t is equal to new
08:19 - meter and I can use this object
08:23 - to print or to use the print method okay
08:28 - so you see I have access to this print
08:31 - method and I can just
08:34 - print like this run the program and
08:37 - prints whatever I want to print okay so
08:42 - this is how you can Define
08:45 - interfaces let's see if we have uh two
08:49 - interfaces at a
08:51 - time interface I
08:54 - meter one and IM meter 2 for example can
08:59 - I inherit from both of them in the same
09:03 - class let's see if we can do it meter
09:07 - interface one meter
09:10 - 1
09:12 - comma meter
09:15 - 2 so yes I can inherit from multiple
09:20 - interfaces in a same class okay now for
09:25 - example this meter one has method print
09:27 - one and this meter 2 has method print
09:31 - two so I can just Define two method
09:35 - inside my class print one and print uh
09:41 - two and I can say this
09:46 - is
09:48 - print meter
09:50 - 1 and the other is print meter
09:54 - 2 okay and so I can
10:01 - do multiple inheritance or I can inherit
10:04 - from multiple interfaces in a in my
10:06 - derived class and I can use this method
10:10 - like this so in the using the object I
10:13 - can print one I can use print one and
10:16 - even print two
10:19 - also and when I run the program both
10:22 - will run fine print meter one print
10:23 - meter 2 so that means I can inherit from
10:28 - multiple interfaces but in the last
10:32 - video I think or in the earlier videos I
10:34 - have shown you you cannot inherit from
10:38 - multiple base classes in your deriv
10:41 - class so if I say that you you have some
10:47 - one more
10:49 - class
10:52 - class
10:55 - meter some some class okay can you
11:00 - inherit from this and this in your
11:04 - example one let's
11:09 - see meter
11:11 - comma second class okay it will not uh
11:16 - be valid okay so you cannot inherit from
11:20 - multiple base classes or multiple
11:23 - classes but you can inherit from
11:25 - multiple
11:26 - interfaces okay so just let remember
11:30 - this
11:32 - fact now the question is can we Define
11:36 - the object of an interface so for
11:39 - example I will delete this class from
11:42 - here which I have used for the
11:45 - demonstration so for example I want to
11:47 - create the object of this meter one
11:51 - interface can I do this let's see IM
11:55 - meter 1 is equal to new ID meter 1 okay
11:59 - so when I do this as soon as I do this
12:03 - I get an error and it so shows an error
12:07 - cannot create an instance of abstract
12:10 - class or interface okay so it's logical
12:14 - also because your interface only
12:16 - contains definition but the
12:19 - implementation when you create an object
12:22 - uh and when you want to use this print
12:24 - one you cannot find the implementation
12:28 - or definition of the this print one only
12:31 - by using this IM meter right but what
12:36 - you can do is you can create a reference
12:40 - to interface which points to the object
12:45 - of your derived class so you can do it
12:48 - like this I meter one and what whatever
12:53 - you want to give the name is equal to
12:54 - new meter this is a class which is
12:58 - inheriting from meter 1 and here you
13:02 - have the definition of the
13:05 - member method of this meter one also
13:09 - okay so you can inher you can create an
13:12 - object which can point to the uh you can
13:16 - create an reference which points to the
13:18 - object of
13:20 - your derived class and you can use the
13:23 - method like this
13:25 - also so met dot you can see print one
13:30 - you can easily find this print one and
13:33 - you can print it okay but you cannot
13:38 - access print two
13:40 - here right because print two is a part
13:45 - of meter imer 2 interface and it's not a
13:48 - part of this IM meter one okay so only
13:52 - print one is
13:54 - available
13:56 - for the use right and you can do the
14:00 - same for
14:02 - the same for the meter to object also or
14:05 - meter to reference also you can use
14:10 - meter 2 i t is equal to new meter but
14:13 - this method will be print two because
14:16 - meter 2 only only have the prototype for
14:19 - print two and it will work fine
14:21 - here
14:23 - okay
14:25 - now can we Define same
14:30 - prototype in two different interfaces
14:34 - for example I have IM meter 1 IM meter 2
14:36 - I want to have only print method in
14:41 - meter 1 and meter 2 also in both the
14:44 - method okay so this method and this
14:48 - method are same in both the interfaces
14:52 - and this meter is inheriting from those
14:56 - uh two interfaces and I delete this um
15:01 - method definition also so I have meter
15:05 - one which has the member method print I
15:08 - also have interface meter 2 which I have
15:11 - the uh member method print to same
15:14 - method and I inherit from those those
15:17 - two interfaces in my meter class and I
15:20 - provide the definition of uh this print
15:24 - so can I do something like this
15:29 - so I can
15:31 - Define interface meter 1 I'm mat one and
15:36 - I will
15:38 - Define interface for meter
15:43 - 2 m
15:45 - 2 which points to the object of this um
15:49 - meter class and can we use this print in
15:53 - both cases mat 1. print
16:01 - and
16:03 - here met 2 do
16:09 - print okay and when you do it it's
16:12 - completely valid when you run the
16:15 - program you will see print meter 1 and
16:17 - print meter 1 two times right so you can
16:21 - have the same method name in two
16:25 - interfaces and you can Define you can
16:28 - give a same
16:30 - or you can Define one definition for
16:33 - both the method in your derived class
16:37 - and you can use it like this
16:39 - also so this is how you can uh Define
16:44 - interfaces and this is some of the rules
16:46 - how to use interfaces in
16:50 - C++ so let's uh let's do some
16:56 - revision how to define interfaces inter
16:58 - faes cannot contain Fields I have shown
17:01 - you it cannot contain Fields like int a
17:04 - or double A or string or something it
17:07 - only have methods okay then the second
17:12 - rule is interface member cannot have
17:15 - definition okay so you cannot give the
17:18 - definition of the method inside
17:22 - interface okay by default all interface
17:25 - members are public so you don't need to
17:30 - explicitly Define that it's a public
17:33 - method right you see here we haven't
17:36 - defined here public it's just void print
17:40 - but when you define the implementation
17:43 - of this method from the interface you
17:45 - need to give the public specifier or
17:47 - public modifier here access modifier I
17:50 - beg your pardon so you need whenever you
17:54 - give the definition of the member of the
17:57 - interface you need to give access
17:58 - specifier here right and the last is a
18:03 - class can inherit from multiple
18:05 - interfaces you you can see here we can
18:09 - inherit from multiple
18:11 - interfaces so I hope you have
18:14 - uh enjoyed this video please rate
18:16 - comment and subscribe and bye for now