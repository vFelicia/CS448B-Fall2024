00:00 - hey everyone so today we'd be talking
00:03 - about the music and mixer module in pi
00:05 - game they go very hand in hand
00:08 - the mixer module has many modules like
00:11 - music sound channel
00:13 - today we'll be talking about only the
00:15 - music module i could have
00:18 - used the sound module as well
00:20 - but the music module is more versatile
00:24 - they eventually turn out to be similar
00:26 - although the way they work is different
00:28 - so what the mixer module does is it
00:30 - helps to control playback of the
00:32 - streamed music
00:34 - we won't do anything tedious today we
00:36 - would just learn some functions by music
00:39 - module and write a code
00:41 - to understand how they work so the first
00:44 - function we have in music module is load
00:47 - as we had load an image module just like
00:51 - that here the load function loads the
00:53 - music file and prepares it for playing
00:55 - it doesn't play the music please note it
00:58 - doesn't play the music if music is
01:00 - already playing the load function would
01:02 - stop playing it and restart everything
01:06 - then next we have the unload function to
01:10 - unload the currently loaded music file
01:12 - and free up space and variable
01:15 - then we have the play function which is
01:18 - used to
01:19 - play the music once loaded
01:21 - so it takes in three arguments they're
01:23 - not mandatory but you can give at most
01:27 - three arguments
01:28 - so the first one is how many times you
01:30 - want to repeat the music
01:32 - which is called as loop it should be an
01:34 - integer then we have start position
01:37 - which should be a float from where the
01:39 - music should start
01:41 - that's what it mentions then we have
01:43 - fade underscore ms the time for which
01:46 - the music should fade to volume 0 in
01:48 - milliseconds please be careful while
01:50 - giving the arguments
01:52 - in pi game as there are many units of
01:55 - time in python
01:58 - then we have the rewind function which
02:01 - plays the audio file from the beginning
02:03 - it's very simple if audio is paused it
02:06 - remains paused if unpaused
02:08 - the music starts from the beginning
02:11 - now we have the stop function which
02:13 - stops the music
02:16 - please note that stop and unload are not
02:18 - the same
02:19 - then we have the pause function to
02:21 - temporarily stop the music then we have
02:24 - the unpause function
02:26 - to
02:27 - resume the music after it is paused
02:31 - then we have this fade out function it
02:34 - takes time argument for which music
02:36 - should fade out in milliseconds
02:38 - cool
02:40 - then we have some methods
02:42 - like the set volume get volume get busy
02:45 - set position get position let's discuss
02:47 - them one by one we have the set volume
02:50 - method
02:51 - which is used to set the volume of the
02:52 - audio
02:54 - we can know the current volume of the
02:56 - audio by
02:58 - checking the get volume
03:01 - we can
03:02 - know if the player is busy or not by
03:06 - using the get busy method it returns a
03:08 - boolean
03:11 - which is true when music is playing
03:14 - then we have the setposition
03:16 - method to
03:18 - set from
03:20 - to set the point from which playback
03:22 - should start playing
03:23 - then we have get position to get the
03:25 - time for how long the music is being
03:27 - played
03:28 - then we have this q function to enqueue
03:31 - a song to the current one
03:33 - once the current song is done playing
03:36 - the q function
03:38 - would play the next song
03:40 - automatically we can only enqueue one
03:44 - song at a time so i don't wanna write
03:48 - pygame.mixer.music over and over again
03:50 - so what i did is
03:52 - i wrote from pi game import mixer
03:56 - i initialized the mixer module loaded
03:58 - the song then i use the played fun play
04:00 - function to play it
04:02 - now we would see other functions later
04:04 - let's do the basic music streaming first
04:07 - then i have printed the boolean get busy
04:10 - to check whether the player is busy or
04:12 - playing or playing something or not
04:14 - then i have a loop
04:16 - a loop is not necessary because we don't
04:18 - have the screen displaying something or
04:20 - not here we don't have any events
04:24 - just to make the program more functional
04:26 - like an audio player i have done this i
04:29 - have taken an input
04:31 - like for p
04:34 - pause u to unpause r to rewind s to exit
04:39 - then i have these conditions
04:41 - to
04:42 - pause and pause rewind and exit
04:44 - accordingly according to the input
04:47 - so
04:48 - if i run it now
04:50 - you would hear an audio
04:52 - and
04:53 - it's the song dot mp3 it's right here in
04:56 - the python folder so let's run this code
04:59 - and see if we hear an audio
05:05 - [Music]
05:20 - so i press p
05:22 - and i get the answer as
05:24 - false
05:25 - as the player is no more streaming
05:28 - and it's no longer busy as i have paused
05:31 - the audio
05:33 - if i unpause it you'll
05:35 - see that the get busy function
05:38 - returns true
05:49 - so i've stopped the function
05:51 - and
05:52 - it returns false the get busy method
05:54 - returns false as
05:57 - the player is no longer playing
06:00 - the music
06:01 - now let's try using this cat volume
06:03 - method to get the current volume of the
06:05 - audio
06:06 - then i'd be setting the
06:08 - volume to 0.8 by using set volume method
06:12 - and check it again if the volume was set
06:14 - properly
06:16 - now let's run this
06:20 - so we have the volume to 0.9 which is
06:23 - almost
06:24 - one
06:28 - and then we have set the volume to 0.8
06:32 - so the volume comes out to be 0.8
06:35 - so yeah things are working as we want it
06:37 - to be
06:38 - now let's try getting the position for
06:40 - how long the audio has been playing
06:45 - [Music]
06:48 - [Laughter]
06:50 - [Music]
06:55 - so the audio has been playing
06:57 - from 1 milliseconds
06:59 - the output is 1 millisecond if more
07:02 - functions are been called out the time
07:04 - would increase
07:05 - now let's try doing the fade out
07:07 - function
07:09 - so i have written mixer dot music dot
07:11 - fade out and written
07:14 - 10 000 in the argument so i have given
07:17 - the argument of 10 seconds
07:19 - that is
07:20 - after 10 seconds the music should
07:22 - uh should fade away and stop
07:25 - since one second has thousand
07:27 - milliseconds
07:28 - so i've multiplied ten by thousand
07:31 - so let's check if the music fades away
07:34 - after 10 seconds
07:43 - [Music]
07:45 - [Laughter]
07:48 - [Music]
07:52 - so yeah the music did fade away after 10
07:55 - seconds and if i check for unpause now
08:00 - or let me check for rewind if i check
08:02 - rewind now it comes out to be false
08:04 - because the fade out function completely
08:07 - stops the audio
08:09 - player
08:10 - and hence the player is no longer busy
08:15 - now let's try the set position function
08:18 - i have given the argument as 120 seconds
08:21 - so i want the music to start from two
08:24 - minutes
08:25 - from the position two minutes let's see
08:28 - if the music starts midway
08:30 - let me run this
08:35 - [Music]
08:38 - so yeah the music starts midway
08:41 - that is from two minutes
08:43 - now let's use the q function
08:46 - uh i'd be writing
08:49 - mixer.music.queue
08:51 - and i've mentioned this next dot mp3
08:54 - it's also in the python folder you can
08:56 - see it over here
08:58 - i don't want to wait for like two
09:01 - minutes to listen to the entire song
09:04 - then i'd
09:05 - check if the song is cued and it has
09:08 - been played automatically so i'd set
09:10 - position as 170 seconds
09:14 - so that the song starts from the
09:16 - position 170 seconds
09:19 - so that i can skip the song okay so let
09:22 - me play this and see if the
09:25 - song has been cued
09:29 - [Music]
09:48 - ah
09:58 - so yeah the song gets unqueued and it
10:01 - has been automatically played without
10:03 - any indication
10:06 - this was all about the music
10:09 - module
10:11 - i hope you understood what
10:13 - always explained
10:15 - thank you