00:00 - welcome to programming knowledge so in
00:03 - this tutorial series we will learn about
00:05 - flutter so flutter is basically an open
00:09 - source UI development kit created by
00:12 - Google it is used to develop
00:14 - applications for Androids iOS Windows
00:19 - Etc
00:20 - so to get started open your browser and
00:23 - then open
00:24 - flutter.dev then click on get started
00:29 - and then over here the installation
00:32 - process is pretty much same I'll show
00:35 - the installation process for Mac OS and
00:38 - the windows users can ignore the xcode
00:41 - part okay so I will go to Mac OS
00:45 - and over here there is an option to
00:48 - download flutter underscore Mac OS
00:51 - underscore V
00:53 - 1.12.13 dot zip file so first of all we
00:57 - need to download the zip file okay now
01:00 - once downloaded we can
01:03 - unzip it wherever we want so I have
01:06 - unzipped it in my documents section
01:09 - under a folder called development tools
01:12 - over here I have unzipped the flutter
01:15 - SDK and I can see all my datas are over
01:18 - here
01:19 - ok so now for the development purpose
01:23 - one thing that is very important for
01:25 - both Windows and Mac users is Android
01:29 - Studio so first of all go and download
01:31 - Android Studio the
01:34 - process to download Android Studio is
01:36 - also mentioned over here in the Android
01:39 - setup section so while with the Android
01:42 - Studio is downloading let's discuss a
01:45 - little bit about flutter so flutter is
01:48 - one of the emerging development software
01:50 - because if we want to develop an
01:53 - application for both Android and iOS we
01:57 - had to keep two different code bases and
02:00 - double the work in maintaining the app
02:02 - and Bug fixes but with flutter a single
02:06 - code base runs on both the platform
02:08 - however to develop for iOS you will need
02:12 - a Mac OS system
02:14 - so once Android Studio has been
02:17 - installed we will try installing xcode
02:19 - so for that I'll go in the xcode section
02:23 - that is IOS setup and over there I'll
02:27 - just open my terminal and copy and paste
02:30 - both the lines one by one
02:33 - once done we need to export our path to
02:38 - the system so for that I'll copy this
02:42 - from here
02:43 - the export
02:45 - line will be different for Mac OS and
02:49 - windows so the windows users can
02:52 - check accordingly so I'll open my
02:55 - terminal and paste the command
03:01 - and over here I'll change this to
03:06 - users
03:09 - my username
03:12 - then the documents
03:15 - section
03:16 - and over there I have a folder called
03:19 - development
03:23 - tools
03:25 - and inside that I have flutter
03:28 - and Bin
03:30 - so I'll hit enter
03:33 - now I'll create a folder called flutter
03:36 - projects and all the projects that we do
03:38 - in flutter I'll store it over there so
03:41 - I'll I already have one I will just
03:44 - navigate to it
03:56 - now over here I'll write
03:58 - flutter
04:01 - doctor
04:03 - so then the doctor will start running
04:05 - and it will tell that if the everything
04:07 - is installed properly or not
04:10 - if you are running for the first time it
04:13 - might take a few moments so over here
04:16 - you can see we have Android tool chain
04:19 - some Android licenses are not expected
04:22 - not accepted and we have no connected
04:25 - device we can ignore this xcode error
04:28 - over here okay so the system is fine we
04:33 - can start working with flutter so to
04:36 - create a project
04:38 - we write the flutter
04:41 - create
04:43 - and then the project name keep in mind
04:45 - that a flutter project cannot have
04:47 - dashes and capital letters it can only
04:50 - have underscore and small letters then I
04:53 - will hit enter and it will start
04:55 - creating my project
05:00 - so once done
05:02 - open Android studio and then go to open
05:06 - an existing Android Studio project and
05:10 - then I'll simply navigate to flutter
05:13 - projects and the demo app that I have
05:15 - just now created and then I'll hit open
05:20 - so if you first open a flutter project
05:23 - it will ask you to download some
05:26 - extensions so click on download
05:30 - and once done we need to set up an
05:33 - emulator so for setting up an emulator
05:37 - we go to tools and then avd manager
05:42 - and over here I have already created a
05:45 - virtual device called flutter device and
05:50 - if you are new you can go to the create
05:53 - virtual devices and then select any of
05:57 - the preferred sizes you want
06:00 - click on next and then the Android
06:03 - version you want to use then click on
06:06 - next and give the
06:07 - divisor name okay so once done it it
06:12 - should appear something like this and
06:14 - then click on this green arrow button
06:17 - so if you click on the green arrow
06:19 - button you can see that the
06:23 - virtual device has
06:25 - started
06:30 - so once the emulator has been set up
06:34 - correctly you can run your application
06:36 - by clicking on the Run button over here
06:38 - it is not showing in my case because I
06:41 - don't have the sdks installed so the
06:45 - another method to run a flutter project
06:47 - is go to the terminal and then navigate
06:50 - to the project folder in K in this case
06:53 - it is demo and then write
06:56 - flutter run but before writing flutter
07:00 - run we can write flutter doctor to check
07:03 - if the Android device is connected
07:05 - properly so now you can see we have
07:08 - connected devices one available so now
07:11 - we will try running our app I'll write
07:13 - flutter
07:14 - run
07:16 - so once done don't quit the process and
07:20 - go to the emulator so you can see this
07:23 - is a prefabricated screen that comes
07:26 - with flutter and whenever I click the
07:29 - plus button
07:30 - over here the counter gets increased by
07:33 - one
07:34 - OK and now for Mac users
07:39 - you can also open the simulator and run
07:42 - the flutter code so now if we already
07:46 - have a project running and we want to
07:48 - quit it we just need to press Q
07:54 - and then it will say application
07:56 - finished now to open a simulator we
07:59 - write open
08:00 - space Dash a space simulator dot app and
08:05 - this will start a simulator on our
08:08 - screen and then again if we write
08:10 - flutter run then we can see the same
08:13 - application in our iPhone
08:16 - now before moving forward I would like
08:19 - to tell you that the programming
08:21 - language used by flutter is dot so that
08:25 - is a programming language that is
08:27 - developed by Google and it is a CL and
08:30 - it is client optimized okay so you can
08:34 - read more about dot by simply coming to
08:37 - dot dot d e v over here you see the
08:40 - documentations you can read about it
08:43 - and in the website we also have a
08:48 - environment to test our Dart code Okay
08:51 - so
08:53 - this was for the video see you in the
08:56 - next tutorial thank you
08:58 - welcome to programming knowledge so in
09:00 - this tutorial we will start with the
09:02 - basics of dot Dart is the official
09:05 - programming language that the flutter
09:07 - framework uses I will be using dot pad
09:10 - to write all my dots code
09:16 - so Every dart program's basic
09:19 - requirement is a main method main method
09:22 - is the entry point of every DART program
09:24 - we can write the main method like this
09:27 - main followed by a parenthesis set of
09:30 - parenthesis then curly braces and over
09:32 - here we write our code
09:35 - we can also add a void over here if
09:38 - needed
09:39 - void basically specifies that a method
09:42 - or function will not return anything we
09:45 - will study about functions in details
09:48 - later in this tutorial
09:50 - so after main method
09:53 - we let us discuss about print so to
09:56 - print anything on the console we use the
09:59 - keyword print and then the parenthesis
10:02 - then single quotes and then we can write
10:05 - the
10:06 - sentence that we want to be printed on
10:09 - the console so for this case I am
10:11 - writing
10:14 - programming knowledge
10:18 - and Then followed by a semicolon now if
10:21 - I run this program
10:23 - in my console I would be able to see
10:25 - programming knowledge
10:28 - so you can see programming knowledge is
10:30 - visible in my console now if I change
10:34 - the text over here the output in the
10:37 - console will also change
10:41 - suppose I write my own name and then
10:44 - click on run
10:46 - so now the console is showing my name
10:50 - like python we can also use double
10:53 - quotes and triple quotes to print blocks
10:55 - of statements
10:57 - after print let's discuss about data
11:00 - types so there are five to six primitive
11:03 - data types namely int for storing
11:07 - integer values float and double for
11:10 - storing decimal values cap for storing
11:13 - character string for storing group of
11:16 - characters and bull for storing Boolean
11:19 - values that is true and false now in dot
11:23 - there are four types of variable
11:25 - declaration the first type is static
11:28 - declaration in static declaration we
11:32 - write the data type
11:34 - for followed by the variable name let's
11:38 - call it V and then a semicolon
11:42 - we can store values to this variables by
11:45 - writing V
11:47 - is equal to and inside quotes
11:50 - reshuff
11:51 - over here we have written string that
11:54 - means the variable V can only store
11:57 - string values now let's try printing it
12:00 - so to print I'll write print
12:02 - V followed by a semicolon and now let's
12:05 - try running it
12:07 - so it is showing reshuff we can merge
12:11 - these two statements together so to
12:13 - merge we will write
12:18 - now again if I try running the program
12:21 - we will get the same output but over
12:24 - here it has changed from variable
12:26 - declaration to variable definition the
12:29 - basic difference between variable
12:31 - declaration and variable definition is
12:34 - that in variable declaration we tell the
12:36 - compiler that the program will have a
12:39 - variable V of string type but in
12:42 - variable definition we tell the compiler
12:45 - that the program will have a variable V
12:47 - of string type and reshuff will be
12:51 - stored in it
12:55 - after static declaration we have Dynamic
12:58 - declaration over here Dynamic refers to
13:01 - the data types that is a variable can
13:04 - store values of different data types we
13:07 - declare a dynamic variable by writing
13:10 - VAR V and then the values so in the
13:14 - first variable I am storing a string
13:17 - in the second variable I am storing an
13:20 - integer and in the third variable
13:24 - I am storing a decimal
13:27 - okay now I'll try printing them so I'll
13:30 - write print
13:33 - V
13:35 - then print V1
13:39 - then print
13:40 - V2
13:44 - now if I click on run
13:47 - I'll get I am getting the output as
13:49 - reshuff 10
13:51 - 69.69 over here where automatically
13:55 - changes to type of data stored in it and
13:58 - memory to the variables are allocated
14:01 - during the compile time and to check if
14:04 - I select V over here in the
14:07 - documentation I get string if I select
14:10 - V1 I get integer and if I select V2 I
14:15 - get double
14:16 - okay
14:17 - so after static declaration and dynamic
14:21 - declaration the third type of
14:23 - Declaration is constant declaration as
14:27 - the name suggests variable declared
14:30 - constants cannot be changed
14:33 - so to so to declare a constant value
14:37 - we write c o n s t const
14:40 - see is equal to 10.
14:44 - now we can print the constant values
14:49 - if I click on run it will give me 10 as
14:52 - the output and now if I try changing the
14:55 - values if I write C is equal to C plus 1
15:00 - and then if I print it
15:06 - it is giving me an error error this is
15:10 - compilation failed that is because I
15:13 - have tried to change the value of a
15:15 - constant variable over here
15:18 - ok so after this the last type of
15:22 - Declaration is again Dynamic declaration
15:25 - over here Dynamic refers to allocation
15:28 - of memory during runtime
15:31 - for example suppose we want to show the
15:34 - exact time when the program is executed
15:37 - then if we use where or string to store
15:41 - time then the value will be the time at
15:44 - which the program was compiled and not
15:47 - the time when the program was executed
15:50 - so in such cases we use Dynamic
15:53 - variables so to you create a dynamic
15:56 - variable we write
15:58 - Dynamic and then the variable V
16:01 - and then we can add the value as N1
16:05 - required
16:08 - okay
16:09 - so this was about variables I hope
16:12 - everything was clear thank you
16:16 - welcome to programming knowledge
16:19 - so today we will learn about type
16:21 - conversion
16:22 - so first let us try about converting
16:27 - string to integer but before that I
16:30 - would like to tell you one thing that
16:33 - for writing comments we can use double
16:36 - slashes and write an
16:39 - inline comment
16:41 - and we can also use slash followed by a
16:45 - star
16:46 - and then again star followed by space
16:50 - and then over here we can write blocks
16:53 - of code
16:57 - and then the final one is three slashes
17:01 - and over here we can write the
17:03 - documentation
17:05 - okay so back in the program let's try
17:08 - converting
17:11 - string
17:12 - to integer
17:14 - so to convert string to integer we write
17:18 - we create a variable where one and then
17:21 - I will write int dot parse and inside
17:25 - this will be my string value so suppose
17:28 - I enter 1.
17:32 - now to check if one has an integer value
17:36 - so we will write a sort
17:40 - 1
17:41 - equals
17:43 - digit 1.
17:46 - assert is a built-in function to verify
17:50 - that the thing is as required or not
17:53 - okay so now let's try adding some value
17:56 - to 1. if it is an integer it will add
17:59 - without any problems
18:15 - over here I have written the wrong
18:17 - spelling it will be assert
18:20 - now if I try to run the program
18:24 - you can see 11 is the output
18:27 - so over here you can see we have good
18:29 - when one as a string input then it has
18:32 - been converted to integer and then I
18:35 - have added 10 to it and then printed so
18:38 - 10 plus 1 is 11. now we will try to
18:42 - convert integer to
18:44 - string
18:50 - integer to string so for that I'll
18:53 - create a variable to store
18:56 - I will write 1
18:59 - is equal to 1 which is an integer dot to
19:03 - string
19:05 - okay now if I add some values it should
19:08 - be concatenated to the end of the
19:11 - variable so I will write 1
19:15 - Plus
19:17 - plus equal to
19:20 - Risha and now if I try printing it
19:25 - [Music]
19:35 - the output is one reshuff
19:38 - that means this integer 1 is converted
19:41 - to string and then Reserve is added at
19:45 - the end of the string 1. so this is how
19:48 - we convert an integer to string now to
19:53 - convert a decimal to string
19:57 - we have two methods
20:03 - first is the one similar to which we
20:06 - have seen just now where
20:08 - 1 is equal to
20:12 - 3.1234 that is the decimal or double
20:16 - value dot to string
20:20 - and the other method is where
20:24 - 1D is equal to
20:28 - 3.1234
20:31 - dot two string
20:35 - as fixed
20:39 - 2. so this basically means that the
20:43 - string will have only two decimal places
20:45 - so let's check that and you know to
20:48 - check that we use assert keyword
20:52 - and then we will write
20:54 - 1D
20:56 - is equal to
20:58 - so as we have converted it to string we
21:01 - will keep it inside quotes 3.12
21:05 - and now then we will try printing so
21:09 - we'll write one D
21:12 - now if I click on run the output should
21:14 - be 3.12
21:16 - so you can see the output is 3.12 so
21:20 - this is how we convert an integer to
21:23 - string string to integer decimal to
21:26 - string and also how to trim the decimal
21:29 - places
21:32 - after type conversion let's discuss
21:34 - about operators
21:36 - so let's start with unary operators so
21:40 - first I'll create a variable a and store
21:43 - tenant
21:45 - now to add some value to a we can write
21:49 - a is equal to
21:50 - a plus
21:52 - 10 so what this will basically do is add
21:55 - a 10 to a and then again store it inside
21:58 - the variable a
22:00 - let's check it by printing it
22:08 - so the output is 20. similarly we can do
22:12 - for minus
22:15 - the output is 0. and it will be same for
22:19 - multiplication as well as division
22:23 - so we can reduce the length of the code
22:26 - if we want so to reduce we will write a
22:28 - is equal to
22:30 - a
22:31 - plus equal to 10 so this will also do
22:35 - the same purpose that is to add 10 to a
22:38 - and then again store in it
22:41 - so if I run this the output should be 20
22:45 - similarly for minus for multiplication
22:48 - and for division
22:52 - next type of operators is
22:55 - increment and decrement operator so if I
22:58 - write print
23:01 - a plus plus
23:03 - and then again print
23:06 - a
23:08 - the output will be
23:10 - 10 and 11 that means first this
23:15 - statement got executed then the value of
23:18 - a was incremented by 1 and then s value
23:23 - became 11 and it got printed here but if
23:27 - I give the plus plus before a and then
23:30 - if I click on run the output will be 11
23:33 - and 11 that means before the execution
23:36 - of the statement a got incremented by 1
23:39 - as you can see in the console
23:41 - similarly for my decrementing we can use
23:44 - minus minus now if I click on run
23:49 - the output will be 10 and 9. that means
23:52 - first the statement got executed then
23:55 - the value was decremented and now
23:58 - similarly if I put minus minus before a
24:01 - and run it then the value will get
24:04 - decremented first and then the statement
24:07 - will be executed
24:09 - after unary operators we have relational
24:12 - operator
24:13 - so to learn about relational operator
24:16 - I'll create two more variables
24:19 - where B is equal to 5.
24:23 - where C
24:25 - is equal to 15 and one more variable
24:28 - where D
24:30 - is equal to 10 so to check equality
24:34 - between any two variables we write if
24:39 - a is equal to equal to D
24:43 - that means if a equals D then print
24:49 - true
24:55 - so the output is true and now if I
24:58 - change this D to B
25:02 - and then click on run
25:07 - now there is no output because we do not
25:09 - have an else condition so I'll write
25:11 - else
25:14 - print
25:18 - false
25:20 - now if I click on run the output should
25:22 - be false
25:25 - we will learn about if and else in
25:27 - details in the
25:30 - for future tutorials
25:34 - we will learn about if else in details
25:36 - later in this course
25:40 - so after checking equality there is an
25:43 - operator that checks for greater than
25:45 - equal to case
25:47 - so I if I write if
25:53 - a is greater than
25:55 - equal to B then the output should be
26:01 - print
26:04 - true
26:08 - else
26:10 - print
26:13 - false now if I run this the output
26:16 - should be true that is because the B has
26:20 - five Stone stored in it and a has 10
26:23 - stored in it so as 10 is greater than 5
26:27 - this condition is true and now if I
26:30 - change to D
26:32 - then again the output will be
26:35 - true because a has 10 stored in it and D
26:38 - has 10 stored in it so a is equal to D
26:42 - so the condition is true and now if I
26:45 - change it to C the output will be false
26:49 - because 15 is neither greater than nor
26:52 - equal to 10.
26:54 - now after this we have less than equal
26:57 - to
26:59 - and if we run this the output will be
27:03 - true that means 10 is less than 15 which
27:08 - is true and now if I change it to
27:13 - C itself then also the output will be
27:15 - true that is because 15 is equal to 15.
27:20 - now after this we also have
27:23 - only less than that means 15 we have to
27:26 - check if 15 is less than 15 so the
27:29 - output should be false as 15 is equal to
27:33 - 15 but not less than 15 and now if I
27:36 - change it to D the output will be true
27:39 - as 10 is less than 15. and if now I
27:44 - change it to greater than then the
27:46 - output will again be false as 10 is not
27:50 - greater than 15.
27:52 - so this is how we use relational
27:55 - operators
27:58 - now another type of operators is logical
28:01 - operators so there are three types of
28:04 - logical operators the first one is
28:06 - logical and
28:07 - and its symbol is
28:11 - and and it checks and it returns true if
28:16 - both the conditions are true otherwise
28:18 - it will return
28:20 - false
28:21 - so let me check if B is D is greater
28:25 - than b
28:26 - so if this is the condition let's see
28:29 - what is the output
28:32 - so the output is false as you can see D
28:35 - is less than C that means 10 is less
28:38 - than C that means this condition is
28:41 - false and this condition is true and as
28:44 - I told you and returns true only when
28:47 - both the conditions are true as one of
28:50 - the condition is false it returns false
28:52 - and the else statement gets executed and
28:55 - now if I change it to greater than that
28:57 - means now both the condition will be
29:00 - true and if I try to run it the output
29:03 - should be true and as you can see the
29:05 - output is true now the next type of
29:08 - logical operator is or operator and the
29:11 - sign is
29:12 - this now our operator returns true if
29:16 - any of the condition is true so suppose
29:19 - and if both the conditions is true it
29:22 - will always give true as the result so
29:25 - now if I run the output will be true
29:28 - and now if even if I make one of the
29:30 - condition false
29:32 - the output will still be true
29:35 - that means if one of the
29:38 - condition is also true the output is
29:40 - true and now if I make both the
29:42 - conditions false then the output will be
29:45 - false
29:47 - and then the final type of operator
29:50 - is not so over here if I write a is not
29:55 - equal to
29:57 - 10 then the output should be
30:00 - false but as you know the a is having 10
30:04 - stored in it so the output is false
30:07 - because 10 is equal to 10 and not not
30:10 - equal to 10 I hope are you on you are
30:12 - understanding
30:14 - so this was about operators see you in
30:17 - the next tutorial thank you
30:20 - welcome to programming knowledge in this
30:23 - tutorial we will continue with operators
30:26 - so the next type of operators are called
30:31 - null aware operators
30:36 - so for explaining this I'll create a
30:39 - class
30:41 - num
30:43 - and it will have a variable or you can
30:46 - also call data members num and it will
30:49 - have a value of 10. we will learn about
30:52 - class in Gradle detail later in this
30:55 - course
30:57 - now after that over here I'll create
31:01 - a variable and and to initialize a class
31:04 - we just write num that is the class name
31:07 - followed by parenthesis this is also
31:09 - called Constructor
31:12 - then after that we'll create an integer
31:15 - variable no
31:17 - and now we will check if
31:23 - n is not equal to null
31:27 - null stands for empty reference
31:31 - then no is equal to n dot num that means
31:37 - to get the data member num from the
31:41 - object n where n is an object of class
31:44 - num and then we will
31:47 - print
31:49 - n
31:57 - so now you can see when I print n it is
32:01 - showing instance of num and if I print
32:03 - No it should show 10.
32:07 - so you can see 10 is the output now
32:11 - suppose we have not initialized this
32:15 - and then if we try running then it will
32:18 - show null that means that no value is
32:22 - stored in n
32:24 - so now instead of if else we can use the
32:27 - null null aware operator
32:31 - so for that we will write
32:34 - n o is equal to n question mark dot num
32:41 - and try running it
32:45 - the output is again null but we over
32:48 - here we do not have to write the if else
32:50 - what it basically does is it checks that
32:53 - n is null or not if n is not null then
32:56 - it extracts the value from data member
33:00 - num and stores it inside and so now
33:02 - let's try see the difference by
33:04 - initializing n over here I'll write num
33:09 - now if I run this the output should be
33:12 - 10. so you can see the output is 10. now
33:16 - we will see another type of null aware
33:19 - operator
33:22 - so now I'll change it back to null
33:28 - and now along with this I'll add two
33:31 - question marks and give a 0 and now if I
33:35 - try running this
33:36 - the output will be 0 this means that if
33:40 - n is null then this will be the default
33:44 - value and if I again write num that
33:48 - means call The Constructor
33:50 - and try running then the value will be
33:53 - 10.
33:56 - and then the final type of null aware
33:59 - operator
34:01 - is this
34:04 - it is written by two question marks and
34:07 - then an equal to so for that I'll remove
34:11 - this class I don't need it anymore
34:14 - I'll create a integer variable no
34:18 - and not initialize it and now over here
34:21 - I'll write print
34:25 - no double question mark equal to 100
34:31 - what this basically does is if no is
34:34 - null then it will store 100 in it and
34:38 - now let's try running this
34:42 - so you can see 100 is stored in no
34:45 - now the last type of operators are
34:48 - ternary operator
34:50 - so I'll create a main method
34:55 - and I'll create an integer variable
34:59 - 5
35:01 - and another integer variable
35:06 - 6.
35:08 - and now for the ternary operator I'll
35:11 - create a Boolean value Bool
35:15 - ANS is equal to
35:18 - no greater than
35:20 - no one
35:22 - so this is the condition and if the
35:25 - condition is true we will set the value
35:27 - to true
35:29 - else the value will be false and now
35:32 - let's try printing the answer
35:42 - okay sorry the T will be small
35:54 - so you can see the output is false that
35:57 - means 5 is not to greater than 6. this
36:00 - type of expression is called ternary
36:03 - operator where three operators are used
36:05 - over here The Operators are A and S no
36:09 - and N 0 1 the functioning is this is a
36:12 - condition and if the condition is true
36:14 - then this part is executed else this
36:18 - part is executed so this was about
36:20 - operators
36:23 - after operators now we will move to
36:26 - conditional statements so in dot there
36:29 - are two types of conditional statements
36:31 - one is if else and the other one is
36:34 - switch case so to
36:38 - study about if else I'll create an
36:40 - integer variable you know and store 100
36:43 - in it and I want to print even if the
36:47 - number is even otherwise I want to print
36:50 - odd so for that I can use an if else so
36:53 - inside the if I'll try to divide it by 2
36:57 - and get the remainder
37:00 - and if the remainder is 0 that means it
37:03 - is completely divided by 2 that means it
37:06 - is an even number so I should print
37:10 - even
37:14 - otherwise
37:17 - I should print
37:19 - odd
37:24 - odd should be inside quotes
37:27 - and now if I run the program
37:29 - the answer should be even and now if I
37:31 - change it to 1001
37:34 - the output will be odd and now if I want
37:38 - to have more than one condition
37:41 - then over here I can write else if so
37:45 - for that I'll write else if
37:49 - n o
37:51 - divided by 3 and the remainder is equal
37:53 - to 0. then I will print
38:00 - divisible by 3.
38:06 - else
38:10 - print
38:12 - odd
38:15 - so now if I change the number to 99
38:19 - which is divisible by 3 you will see the
38:22 - output is divisible by 3. so if I run it
38:27 - the answer is divisible by 3 so this is
38:30 - how we use if else for checking some
38:34 - conditions you can add as many else if
38:37 - blocks you want but if and else
38:41 - block can only be used once
38:46 - after if else we have switch case
38:49 - so in switch case we use the keyword
38:52 - switch
38:54 - and then we need to pass a number or
38:57 - character that will be checked so I'll
38:59 - be using number in this case and then we
39:03 - will check the case a case 0 that means
39:06 - if n o is equal to 0 then I want to
39:10 - print
39:13 - zero
39:16 - zero should be inside quotes
39:21 - followed by a break
39:25 - break
39:27 - s the control outside of the switch case
39:31 - now after that I'll check for another
39:33 - Case Case 100
39:38 - that then print
39:42 - 100
39:46 - and then again a break
39:50 - and then finally we can have default
39:57 - and there we can print
40:00 - not 0 not 100
40:04 - and we don't need to give a break
40:07 - because we are as it is at the end of
40:11 - the switch case
40:13 - so now let's try running this program as
40:15 - the number is 99 the default case should
40:19 - be executed
40:23 - so if I run this the output is not 0 not
40:27 - 100 and now if I change it to 100
40:30 - the output should be 100.
40:34 - and if I change it to 0
40:41 - the output is zero so this is how we use
40:45 - conditional statements in Dot I hope
40:48 - everything was clear thank you
40:51 - welcome to programming knowledge so the
40:54 - next thing that we will study in Dart is
40:57 - loops so basically there are five types
41:01 - of loop the first Loop is for Loop
41:07 - so the syntax of for Loop is
41:10 - very much same
41:12 - as in other programming languages we
41:15 - have the keyword for and then we create
41:17 - a variable where I is equal to 0 that is
41:21 - initializing a variable then setting the
41:25 - range I is less than 10 and then
41:29 - increment or decrement and then inside
41:32 - this we write the code that we want to
41:35 - execute
41:37 - so for right now I will be printing
41:43 - programming knowledge
41:48 - and now if I click on run programming
41:51 - knowledge should be printed 10 times
41:54 - so you can see
41:56 - it has been printed 10 times so this is
41:59 - how we use for Loop another possible way
42:03 - to use for Loop is setting this value to
42:07 - 10 and checking that I is greater than
42:13 - 0 and instead of incrementing
42:16 - decrementing The Operators and now if I
42:19 - run this code the output will be exactly
42:22 - same so these are the two methods in
42:25 - which we can use for Loop the next type
42:29 - of loop is called for in Loop
42:34 - so I'll just remove this
42:42 - so for in Loop is basically used in
42:45 - collections we will study about
42:47 - collections later in this course but for
42:50 - now I'll just create a list
42:54 - and store one two three in it
42:57 - list is a type of collection that stores
43:00 - more than one values under the same name
43:04 - and now to run I'll write for
43:11 - where X where X is a variable that I
43:15 - have created in no that means X will
43:19 - have the have 1 2 3 every time the loop
43:23 - runs so now if I print
43:26 - x 1 2 3 should be printed
43:33 - so you can see the output is one two
43:36 - three now the next type of loop is for
43:39 - each Loop for each Loop is also used on
43:43 - collections so just for example I'll
43:47 - write n o that is the variable that we
43:50 - have created dot for each
43:55 - that is a method
43:57 - and inside that
44:00 - it returns and that is each value inside
44:04 - the no list and then it should perform
44:07 - some tasks so to write which task to
44:10 - perform the first given equal to then a
44:13 - right arrow and then we write the
44:16 - statement print
44:18 - and in this case
44:20 - so now if I click on run
44:23 - 1 2 3 should again be the output
44:26 - now suppose we want to call another
44:29 - function so for that I'll write avoid
44:33 - print num it takes a value num
44:38 - and then prints it to the console
44:43 - so now instead of this print statement
44:46 - I'll replace it with my method name that
44:49 - is print num and it takes a value num
44:52 - which is nothing else then n so now if I
44:57 - try to try to run this I will get the
45:00 - same output
45:03 - now the next type of loop is while loop
45:07 - so for that I don't need this function
45:15 - now I'll create a variable integer type
45:19 - variable Nom and initialize it to 5 and
45:23 - now I want to run a loop while
45:28 - num is
45:30 - greater than 0 so to run a while loop
45:34 - the keyword is while and now over here I
45:37 - will just simply print the number
45:41 - and then decrement the number by one
45:45 - and now if I run the loop I'll get the
45:49 - output 5 4 3 2 1 so this is how we use a
45:53 - while loop now the next type of loop is
45:56 - do while loop
45:58 - so for do while we first try to do
46:02 - and then inside that the code that every
46:06 - time the condition is true should be
46:08 - executed
46:09 - so I will just print the number
46:11 - then num minus minus
46:15 - and then after do we have while
46:19 - num greater than 0.
46:23 - and now if we run the code we will get
46:26 - the same output now the benefit of do
46:29 - while over while is that even if the
46:31 - condition is true
46:34 - even if the condition is false the loop
46:36 - gets executed once suppose the condition
46:39 - is suppose the number is -1 that is
46:42 - already less than 0 so now if I run the
46:46 - loop will get at least executed once so
46:50 - the output is minus 1 but if we use
46:54 - while instead of do while
46:56 - this will not get executed
47:06 - now if I click on run the console will
47:08 - be empty
47:11 - so this is the difference between while
47:13 - and
47:15 - do while now another thing that is
47:18 - important while studying Loops is
47:21 - break and continue we have seen break in
47:26 - switch cases and now we will see that
47:29 - in a more elaborate way the basic
47:32 - concept of break is that wherever break
47:34 - statement is executed the control comes
47:37 - out of the loop so suppose I have number
47:40 - 10 and I want to print only till 5 but
47:43 - my while loop has the condition till
47:47 - check still zero so what I'll basically
47:49 - do is I will check if
47:52 - num is equal to equal to 5
47:56 - then break
48:00 - and the print statement will also be
48:03 - there
48:04 - and the decrement statement also
48:08 - so now if I click on run it should only
48:10 - print till 6 I guess yes so you can see
48:14 - the
48:14 - output only till 6 is printed because as
48:17 - soon as num value became 5 this
48:20 - condition became true and break was
48:22 - executed so as soon as break was
48:24 - executed it came out of the loop
48:29 - so that was about loops I hope
48:32 - everything was clear thank you
48:35 - welcome to programming knowledge in this
48:37 - tutorial we are going to discuss about
48:39 - collections in Dart there are basically
48:42 - three built-in collections that ships
48:45 - with DOT one of them is list list is
48:48 - very similar to arrays that we have in
48:51 - most of the other programming languages
48:54 - we can define a list by writing the
48:57 - keyword list and then the name that we
48:59 - want to give to the list and a pair of
49:02 - square brackets so in this manner we
49:04 - have created a variable of list which
49:08 - has a name name
49:09 - and it has been initialized and it has
49:13 - no values in it and suppose if I want to
49:15 - initialize with certain values inside it
49:17 - then I can simply write them inside
49:20 - the square brackets and to add more than
49:22 - one value you can just separate them by
49:25 - a comma
49:28 - so over here I have a list name which
49:31 - has two values stored in it reshuff and
49:34 - RAM
49:35 - so list also follows the basic indexing
49:38 - concept that we have in most of the
49:41 - programming languages except Pascal
49:43 - Photon Etc
49:46 - that is the indexing starts at zero that
49:49 - means this rishab is stored at an index
49:52 - 0 and Ramesh is stored at index 1. so to
49:57 - print the values at a certain index we
49:59 - just need to write it inside the
50:02 - print statement and followed
50:04 - with a square brackets and inside square
50:07 - brackets we need to write the index and
50:10 - now if I click on run
50:12 - should be printed and now if I change
50:15 - the index from 0 to 1
50:18 - Ramesh should be printed
50:21 - and over here I can also change this
50:24 - list to VAR and it should not give us
50:28 - any error this is because that with the
50:32 - help of
50:33 - type inference uh automatically converts
50:36 - this variable name
50:38 - to a type or to a list type which has
50:41 - strings values stored in it now we can
50:44 - have values of more than one data type
50:48 - stored in the stored in the list so to
50:51 - do so if I write 100 which is an integer
50:54 - and if I also try to add a
50:56 - double value
50:58 - then this will work and it will not give
51:00 - us any error so if I click on 100 should
51:04 - be the output now suppose I want to Loop
51:07 - through each of the values then the most
51:10 - easiest way is to use a for each Loop so
51:13 - for that highlight where
51:15 - I
51:19 - in name
51:21 - and then inside this I'll just print
51:24 - I
51:26 - and then I should be able to see all the
51:28 - values that I have inside the list and
51:32 - now if I want I can also change the
51:35 - values at a certain index in the list so
51:38 - if I want to change the
51:42 - value at index 1 in the list
51:45 - name then I can just simply change it to
51:49 - Suresh and this should work
51:55 - and I can and it is not necessary to
51:58 - change a string value to another string
52:01 - value only we can give it a integer
52:04 - value also and now if I click on Run 1 2
52:06 - 3 should be displayed instead of Suresh
52:09 - so it is working fine and now suppose we
52:13 - want to have a list that only stores
52:16 - string then what we can do is we can
52:18 - change this where to list and after that
52:22 - inside angular brackets I'll Define the
52:25 - data type that means only string values
52:29 - should be there so you can see the red
52:32 - line below this integer and float values
52:35 - it is basically there because
52:37 - we have defined the list as as a string
52:41 - values container list and it cannot
52:43 - store integer and double
52:46 - so if I remove this then it will not be
52:49 - a problem
52:51 - now if I click on run rishab and Ramesh
52:55 - should be printed
52:59 - now let me change it back to war and
53:03 - I'll remove this comment and then I want
53:07 - to change the value
53:09 - at index 1 from Ramesh to one to three
53:12 - and then if I click on run
53:14 - then it is changing okay and now suppose
53:17 - I want I don't want to change the value
53:20 - at runtime so what I can basically do is
53:22 - I can put a const over here which makes
53:25 - the values stored inside the variable
53:27 - name as a constant so now you can see
53:31 - over here I am declaring the variable
53:33 - name as a constant and after that I am
53:35 - trying to change a value so if I run
53:38 - this it should give me an error
53:42 - so over here you can see uncut error
53:45 - unsupported operation indexed set and
53:49 - now if I comment this again and try to
53:52 - run this
53:53 - then this should not be an error
53:58 - now after that suppose I want to copy
54:01 - this list to another variable so for
54:03 - that I'll create a new variable end and
54:06 - I'll just simply write name and over
54:08 - here in the loop I'll change this name
54:11 - to n and now if I click on run the
54:15 - output will be same
54:17 - ok but now if I change the value of name
54:21 - means any value of the list name
54:26 - then the values in list n will also
54:29 - change
54:33 - okay so it is giving me an error because
54:35 - I have a const over here so I'll just
54:37 - remove the const for now for the
54:39 - explanation purpose
54:42 - so now if I click on run it is still
54:44 - giving me an error
54:48 - it is because I have missed a semicolon
54:51 - over here so now if I give the semicolon
54:53 - and run this again
54:55 - so over here you can see that if we
54:58 - change the values stored in the variable
55:00 - name then the values stored in variable
55:03 - n is also changing so basically over
55:07 - here it doesn't copy the set of values
55:09 - but both the list variables point at the
55:12 - same location that is the location of
55:15 - the data in the memory So to avoid this
55:18 - we have a special function that is
55:21 - prefabricated in dot known as
55:25 - spread operator JavaScript developers
55:28 - might be familiar with this so over here
55:31 - what we basically do is we surround the
55:34 - variable name with square brackets and
55:36 - before writing the variable name we just
55:38 - simply give three simple dots and now
55:41 - after assigning if we change the value
55:44 - of the previous list or the original
55:46 - list then it will not be reflected
55:50 - in the new list so now if I click on run
55:53 - the output should be reshuff and Ramesh
55:56 - so this is how we get the two different
55:59 - copies
56:00 - of a list
56:02 - so this was for list see you in the next
56:04 - tutorial thank you
56:07 - welcome to programming knowledge in the
56:09 - last tutorial we discussed about lists
56:12 - and in this tutorial we are going to
56:14 - discuss about another
56:16 - collection that is called set so suppose
56:19 - I want to define a set of elements so
56:22 - I'll write
56:23 - elements and to initialize a set we give
56:26 - a pair of curly braces and inside
56:29 - suppose I have two values for instance
56:32 - hydrogen
56:34 - and oxygen
56:38 - okay so now over here I have defined a
56:40 - set elements that has two values
56:42 - hydrogen and oxygen and to iterate
56:45 - through each value we can simply use the
56:47 - for each Loop so for that we write
56:50 - for where
56:52 - X in halogens
56:56 - then simply for now let's print the
56:59 - value
57:00 - okay now if I run this hydrogen and
57:03 - oxygen should be printed in the screen
57:06 - okay my mistake instead of elements I
57:08 - have written halogens over here
57:12 - so now if I run this hydrogen and oxygen
57:16 - should be printed okay so another
57:18 - feature of set is that if we have
57:21 - duplicate values then it gets
57:23 - removed automatically
57:26 - so for instance suppose I add another
57:30 - hydrogen
57:32 - okay and now if I try to run this we'll
57:34 - get a single hydrogen printed on the
57:36 - console okay so this is a feature of set
57:40 - that we use
57:42 - while programming in flutter okay so the
57:44 - next thing about set is that to
57:48 - initialize a set
57:50 - if we write something like this which is
57:53 - correct according to the basic
57:55 - convention okay now if I try printing
57:57 - its runtime type so first of all to
58:01 - print the runtime type
58:02 - we write element Dot
58:07 - runtime
58:09 - type
58:10 - and semicolon over here and now if I run
58:14 - this
58:15 - so it is giving me an error because an S
58:18 - is missing right over here
58:21 - and now if I run this the output is Hash
58:25 - map but our task was or our assumption
58:28 - was that this will initialize a set so
58:32 - this is a common mistake that everyone
58:34 - does okay so the curly
58:37 - curly braces stand for a hash map and if
58:42 - you want to initialize a set then we can
58:45 - just add a data type over here or the
58:48 - data type
58:50 - of the values which we are going to
58:52 - store and now if I run this this should
58:55 - change from hash map to Hash set okay
58:58 - and yet another method is
59:01 - we can write instead of where we write a
59:05 - set over here
59:07 - okay now if I run this the output will
59:09 - be again hash set
59:11 - OK and I can also predefine the data
59:15 - type that will be stored in that set by
59:18 - writing
59:20 - like this
59:22 - and now if I run the set again says hash
59:25 - set but instead of dynamic now it has
59:28 - string over here which means it can only
59:31 - store string values okay
59:34 - so moving on this was about set the next
59:38 - thing that we are going to discuss is
59:40 - map that is yet another collection
59:42 - provided by Dart and it is very much
59:45 - similar to dictionaries in Python and
59:48 - hashmap in Java and for different
59:51 - languages there is also some reference
59:53 - to this type of collection okay so you
59:56 - understand that how much important this
59:58 - map collection is okay so to create a
60:02 - map
60:03 - We rise for suppose say I create a map
60:06 - student okay that has a key value pair
60:09 - okay so the key is name
60:12 - and the value is my name
60:17 - okay then a comma then the another value
60:20 - that is another key that is H and the
60:24 - value is 20 so Mark over here I can
60:27 - store different
60:29 - data types as my key and as my value
60:32 - let's say the third value is email
60:36 - okay and the answer is my email
60:44 - okay so now over here I have a student
60:47 - map that has three key value pair the
60:50 - key is named the value is rishabh key is
60:52 - age the value corresponding to that is
60:55 - 20. the key is email and the value
60:58 - corresponding to it is my email okay and
61:02 - now suppose I want to print a particular
61:04 - value so that can be done using the key
61:08 - okay so suppose if I want to print my
61:10 - name so inside print I'll first write
61:13 - the map name and then inside square
61:15 - brackets
61:17 - I'll write the key name Mark over here I
61:20 - have my key as a string so the key over
61:23 - here is also a string okay and now if I
61:26 - run this reshuffs should be the output
61:31 - okay
61:33 - so this was about map and over here we
61:37 - finished the collections now moving
61:39 - forward the next thing that we are going
61:41 - to discuss is
61:43 - functions
61:46 - or you can also call them methods if
61:48 - they are inside a class so over here
61:51 - this void main is itself a method itself
61:55 - a function the most important function
61:58 - in any DART program this is where the
62:00 - compiler will start executing the code
62:03 - from okay so now suppose I create
62:06 - another function
62:08 - a very basic function
62:10 - called sum okay I am writing Dynamic
62:14 - before that that defines the return type
62:16 - and dynamic stands for the value will be
62:19 - assigned the data type will be assigned
62:21 - during run time okay so the return type
62:24 - will be
62:26 - dependent on the inputs that we give
62:28 - okay so if I write where N1
62:32 - comma of our N2
62:34 - okay now simply I just return there sum
62:38 - so I write N1 Plus
62:41 - N2
62:42 - and now over here I call this method and
62:45 - since it is returning some values so I
62:47 - need to store it in a variable or a
62:50 - shorthand of a shorthand method will be
62:52 - I directly surrounded with a print
62:54 - statement
62:55 - so that the return value directly gets
62:57 - printed
62:58 - and then sum I'll pass two values
63:02 - 1 comma 2 and now if I run this 3 should
63:06 - be the output okay and similarly as I
63:09 - have Dynamic over here it is not
63:11 - confined to integer only I can also pass
63:14 - a
63:15 - decimal value
63:18 - which will be considered as float over
63:21 - here and I get a float output and I can
63:24 - also pass a string over here
63:27 - so suppose I pass two strings
63:31 - Kumar
63:33 - and if I run this rishab Kumar will be
63:36 - the output that means string
63:37 - concatenation has taken place okay now
63:41 - the another feature about functions in
63:43 - Dart is that if we have a single line
63:46 - function then instead of writing it like
63:49 - this we can use the shorthand method
63:52 - that Dart provides that is giving an
63:55 - equal to sign then a right angle sign
63:58 - and then just writing the
64:01 - operation that we want to provide and in
64:03 - this case it is N1 Plus
64:06 - N2 and we don't need to write a return
64:08 - statement over here and now if I run
64:10 - this the output will be the same okay
64:13 - and let's again check it with an integer
64:16 - if I write one
64:17 - comma 2
64:22 - sorry now let's run this and you can see
64:25 - 3 is the
64:27 - output so this type of function is
64:30 - common in all types of programming
64:32 - language and this type of function is
64:34 - called
64:35 - positional functions that means the
64:38 - first parameter will be stored in the
64:41 - first variable
64:42 - defined inside the parenthesis and the
64:45 - second parameter will be stored in the
64:47 - second variable decided in the
64:49 - parenthesis
64:50 - okay and the next type of arguments are
64:55 - called named arguments where we do not
64:58 - need to worry about the order okay so to
65:02 - make it a named argument I'll just put
65:04 - curly braces
65:07 - in between the parenthesis and the
65:10 - variable names okay and now I can pass
65:13 - any value as per my choice okay so I I
65:16 - want to pass the N1 value so I will just
65:18 - write the key name give a colon and the
65:21 - value comma similarly for the other
65:23 - parameter I'll write N2 that is the key
65:25 - name
65:26 - and a value ok now similarly if I run
65:29 - this the output will be 3 again okay and
65:33 - now the basic flexible flexibility that
65:36 - it provides over here is that I can
65:39 - change the order in which I want my
65:41 - value to pass okay so suppose I want to
65:44 - pass N2 as
65:46 - reshuff
65:48 - and n one as
65:51 - Kumar so now my output will be Kumar
65:54 - rishabh ok but if we would have gone by
65:58 - the positional method then rishabh Kumar
66:02 - should have been printed but because we
66:04 - are using named arguments we are getting
66:06 - this flexibility to change the order of
66:09 - parameters
66:10 - that will give as an input to any method
66:13 - okay so this will be it for DOT deep
66:18 - dive in the next class we will start
66:20 - with exploring flutter and widgets that
66:23 - we have in flood
66:25 - thank you
66:28 - welcome to programming knowledge so in
66:30 - this tutorial we are going to discuss
66:32 - about all the files and folders that
66:34 - ships with a flutter package so as you
66:37 - can see the first folder is dot dot
66:40 - underscore tool so it has some basic
66:43 - tools that we use in our developer
66:45 - console and we will see what is a data
66:48 - developer console in one of the videos
66:50 - okay then the next folder is dot idea
66:54 - and it has the basic Android Studio
66:56 - configurations
66:58 - which are used when we run the project
67:00 - on an Android Studio IDE then after that
67:03 - we have dot vs code folder so this
67:06 - folder is created by vs code which is
67:08 - the IDE I am using right now and this
67:10 - folder will only be created when you
67:12 - change some default settings and we can
67:14 - ignore this for now then the next folder
67:17 - is the Android folder so as the name
67:19 - suggests it has all the files
67:22 - that supports the Android functionality
67:25 - so it is a super important folder it
67:27 - contains all the files which are used by
67:30 - flutter SDK to run our flutter app on
67:33 - Android devices and Android emulators it
67:36 - is a passive folder which is created by
67:38 - flutter itself and we generally don't
67:40 - need to change anything inside the
67:42 - folder except when we want some
67:44 - variation in Android and our IOS app
67:47 - then the next folder is the build folder
67:51 - so it is also an important folder it
67:54 - holds all the output files and the
67:57 - generated resources and it is also a
68:00 - passive folder then the next folder is
68:03 - IOS folder so it is also similar to
68:06 - Android folder except as the name
68:09 - suggests its Target device is iOS
68:13 - if you are using Windows then you may or
68:16 - may not have this folder as it is not
68:18 - allowed by windows but if you are using
68:21 - a Mac OS system you will be able to see
68:23 - this iOS folder and what it basically
68:27 - contains is an xcode project
68:29 - xcode is the official development ID for
68:32 - Apple devices then the next folder is
68:35 - the lib folder as the name suggests it
68:39 - stands for library and 90 percent of
68:41 - interaction that we will have with this
68:44 - or any flutter project is via this
68:47 - folder this is the folder where we add
68:50 - all our DOT files and
68:53 - write codes for our project
68:55 - then the next folder is the test folder
68:58 - and as the name suggests it is used for
69:00 - writing test for the project and that is
69:02 - done when we move from development to
69:05 - testing so it is not our main concern
69:08 - right now after that we have this dot
69:11 - get ignore and it has all the version
69:13 - control settings
69:16 - and if you don't know what is a Version
69:17 - Control then you can do a quick Google
69:19 - and get your answer then after that we
69:22 - have dot metadata and Dot packages so it
69:25 - is system generated and we don't need to
69:27 - worry much about them
69:29 - okay and then next we have this demo dot
69:34 - IML so it is a project it is the file
69:38 - that has the same name as the project we
69:40 - will not work with this file also it is
69:42 - just a file which works with internal
69:45 - dependencies and stuff and the similar
69:48 - goes to pubspec Dot Lock then the next
69:51 - one is pubspec dot tml so it is a file
69:55 - in which we will be working over here we
69:58 - can configure all the third party
69:59 - packages that the project will use
70:02 - similar to the app level build dot
70:05 - Gradle that we have in Android we also
70:08 - configure other things such as fonts
70:11 - location images and stuff
70:14 - then back to pubspec.log so pubspec Dot
70:18 - Lock is generated from pubspec.tml and
70:21 - it basically has a more structured
70:24 - settings than pubspec.tml okay so these
70:28 - were all the files and we also have a
70:31 - redmi DOT MD so over here we can specify
70:34 - something about our project and if we
70:36 - are sharing our project we can add some
70:38 - data over here so that the developer
70:41 - whom we are sharing to can read this and
70:43 - understand
70:45 - okay
70:47 - so these were all the files that we have
70:50 - in our flutter project and now let's
70:53 - open our main dot dot file okay and
70:57 - let's see what is our prefabricated
70:59 - application has okay so to run any
71:02 - flutter project I can simply go to run
71:04 - and then click on run without debugging
71:06 - we can also use this start debugging but
71:10 - it is a slower process okay because in
71:12 - debugging we need to add some break
71:14 - points and all okay and we are not in
71:16 - that complex level of flutter project so
71:19 - I will simply start with run without
71:20 - debugging and then over here you can see
71:23 - the debug console has opened and it is
71:25 - writing launching and the basic
71:27 - requirement is over here you can see I
71:29 - have a flutter device that means an
71:32 - Android device connected to my system
71:34 - OK and if you also want you can use an
71:37 - iOS emulator instead of an Android
71:40 - emulator
71:41 - okay but I'll go for an Android emulator
71:43 - right now
71:45 - and let's wait for the Builder to finish
71:47 - so once the application has started
71:49 - running we can see we got something like
71:51 - this on our emulator now the basic UI
71:55 - designing that we do in flutter is done
71:57 - via widgets that means that everything
72:00 - that we see on the screen is a tree of
72:02 - widgets for example the text that we see
72:05 - on the center is a widget the app bar is
72:08 - a widget and The Floating Action button
72:10 - is also a widget and they all are the
72:13 - branches of the root widget which is the
72:16 - screen which is also referred as
72:18 - scaffold in flutter okay so that means
72:22 - scaffold is the root widget
72:24 - and the center text Floating Action
72:27 - button app bar all are the branch
72:29 - widgets of the scaffold root widget
72:32 - okay and all these widgets have their
72:35 - sub widgets also like the app bar has a
72:38 - text widget that displays the text on
72:40 - the app bar the center widget also has a
72:44 - text widget which displays the text that
72:47 - you see on the center
72:49 - similarly The Floating Action button has
72:51 - an icon widget
72:53 - so as to specify which icon will be
72:56 - displayed on The Floating Action button
72:58 - and similarly we can also have a text
73:00 - widget if we want to display some text
73:03 - below this icon in our Floating Action
73:05 - button okay so now if we go to our main
73:09 - dot dot and if you look for build method
73:13 - over here you can see
73:15 - first of all we have the scaffold widget
73:18 - okay that means our parent Widget the
73:20 - root widget then we have the app bar
73:22 - widget which is a branch of the scaffold
73:25 - widget and then inside this F Bar widget
73:28 - we have another widget that is the text
73:30 - widget and over here we have with Z dot
73:33 - title
73:34 - that basically displays the
73:37 - text that we can see on the app bar then
73:40 - after that we have this body inside
73:42 - scaffold and body refers to the entire
73:46 - screen leaving the app bar ok then
73:49 - inside the body you can see Center
73:53 - that means the our elements will be
73:56 - displayed in the center then we have a
73:58 - child column main axis element we will
74:01 - discuss about these things in later in
74:04 - another tutorials then after that you
74:07 - can see we have our text widget over
74:09 - here and you have a text written you
74:11 - have pushed the button this many times
74:14 - which is similar to the text that we see
74:16 - in our
74:17 - Center widget okay then similarly this
74:21 - text also where we have dollar and
74:22 - underscore counter that stands for
74:24 - string interpolation which we have
74:26 - discussed in one of our Dart Deep dive
74:29 - videos what basically happens that the
74:32 - values stored in this counter variable
74:34 - will be displayed at this place
74:36 - after that we have this Floating Action
74:39 - button OK and it also takes an icon
74:41 - widget and it displays the add icon
74:45 - okay now over here you can see our
74:48 - application also has some functionality
74:51 - that means if I click on this plus
74:52 - button over here the value will keep on
74:56 - increasing okay so how does this happen
74:59 - this happens that inside the floating
75:02 - action button we have a parameter called
75:05 - on pressed okay which calls underscore
75:08 - increment counter which means whenever
75:10 - this on pressed method is called then
75:14 - this increment counter is referred to by
75:17 - the on pressed method so if you look in
75:20 - the file for this increment counter over
75:23 - here we can see that this underscore
75:25 - increment counter is a method and the
75:29 - underscore which we have before the
75:31 - method name or variable name refers to
75:36 - that it is a private member of the class
75:39 - okay so inside this method you can see
75:41 - we have something called set State we
75:43 - will discuss about this later and we are
75:45 - incrementing the value of underscore
75:47 - counter and it is the same counter which
75:50 - we are displaying in our text okay so
75:53 - now just to check I want to increment
75:57 - the value by 2 instead of 1 so I'll just
76:00 - write
76:02 - counter plus 2
76:07 - okay
76:09 - so now if I'll save this
76:13 - this will be build automatically over
76:15 - here you can see
76:20 - okay this will take a few minutes if you
76:22 - do it for the first time
76:28 - once done if you go back to your
76:30 - application and if you click on this
76:32 - plus then instead of incrementing by one
76:34 - it will increment by 2. okay so this is
76:38 - the basic structure of any flutter
76:41 - application we will start building the
76:43 - application from scratch in our next
76:45 - tutorial thank you
76:47 - welcome to programming knowledge so as I
76:51 - told in my previous video that in this
76:53 - video we are going to start making an
76:56 - application from scratch so for that
76:58 - first I'll select all the code that was
77:01 - free prefabricated by flutter and remove
77:03 - them okay and now in our Dart Deep dive
77:08 - videos we have seen that the maximum
77:10 - code that we were writing
77:13 - worth starting from this main method and
77:15 - which is true which is the most common
77:17 - convention that is followed from the
77:21 - functionality point of view which means
77:22 - for competitive coding or stuff like
77:25 - that
77:26 - but our Target is to show UI elements on
77:29 - the mobile screen and for that we need
77:32 - to follow the convention specified by
77:35 - the flutter team and that is to create a
77:37 - class and inherit certain properties
77:40 - now if you don't know what inheritance
77:43 - is it is basically inheriting features
77:46 - from a predefined class and we can only
77:49 - add features and use the predefined
77:52 - features but we cannot modify them
77:55 - okay so now let's say I create a class
77:59 - and to create a class we need to write
78:01 - the keyword class where C is small and
78:03 - then the class name for instance I give
78:05 - my class name as
78:07 - my app okay and then a set of curly
78:10 - braces and to inherit any other class we
78:14 - use the keyword extends okay and this x
78:17 - extends should be written after the
78:19 - class name and before the curly braces
78:22 - okay and the class that we are going to
78:26 - extend or inherit properties from is a
78:30 - class not created by us but provided by
78:32 - the flutter SDK which which you can see
78:36 - is added in our
78:38 - pubspec dot EML file over here you can
78:40 - see we have this dependencies section
78:43 - and the dependency that we have added is
78:45 - flutter
78:46 - okay
78:48 - so to import any Dart file in our
78:53 - uh main.dot or any other dot file okay
78:57 - so we write import there is a keyword
79:00 - import and then the file that we are
79:03 - going to use is material dot dot
79:08 - okay so as you can see it is inside the
79:13 - flutter package that means it is
79:15 - provided by flutter and what it
79:17 - basically has is a whole bunch of
79:20 - widgets to use
79:22 - and the Base Class widget which allows
79:25 - us to use this widgets is called as
79:29 - stateless widgets so over here I'll
79:31 - write stateless
79:34 - widget
79:37 - now stateless widget is not the only
79:40 - Base Class that allows us to use widgets
79:42 - in our
79:44 - custom defined class there are more
79:46 - which we will learn in other videos
79:49 - so now over here you can see I get a red
79:53 - line below this my app okay that means
79:56 - there is some error in the program and
79:57 - over here it is specifically because we
79:59 - are missing some methods and functions
80:02 - which should be inside this class and
80:04 - namely the build function okay so
80:07 - instead of this the another method that
80:11 - you can use is just write s t Okay and
80:14 - then the flutter will itself tell you to
80:17 - click suggest you to this flutter
80:20 - stateless widget and if you click on
80:22 - them then you can see it automatically
80:24 - creates a class over here you can give
80:26 - the class name
80:28 - okay that extends a stateless widget and
80:31 - inside this it has a class that is
80:34 - called build it takes a parameter that
80:37 - is build context and it returns a widget
80:39 - okay so over here it takes a near
80:41 - positional parameter that is context
80:44 - which is of type build context okay now
80:47 - it is having more red lines okay so the
80:50 - it is because we are not importing the
80:53 - material package over here okay so for
80:56 - that I'll again write material dot dot
80:58 - and once it is done you can see all the
81:00 - red lines are gone okay and now over
81:03 - here it is written return container okay
81:06 - so we will discuss about container a
81:08 - little later okay
81:11 - so now the first thing that we need to
81:15 - return
81:16 - is a material
81:19 - app
81:20 - okay a capital
81:24 - now which whose basic task is to show
81:27 - all the widgets that you write inside
81:30 - this as an UI element in the app
81:34 - now one thing you need to remember is
81:37 - that out of all the other named
81:39 - parameters that it takes
81:42 - one most important parameter is home
81:45 - okay and whatever Widgets or widget tree
81:49 - that we send as a value for this named
81:52 - parameter
81:53 - will be the first thing that will be
81:55 - loaded on the screen as we build the app
81:58 - okay and then later we can toggle to
82:01 - different screens which are in flutter
82:03 - is called rooting
82:05 - or routing for now let's just send a
82:09 - text with jet and to do that we write t
82:12 - e x t as in text and mark the capital T
82:16 - and it takes a string as the parameter
82:18 - which will be displayed on the screen so
82:20 - for now let's
82:21 - okay
82:24 - programming knowledge as the text
82:32 - okay now text widget also has other
82:36 - named parameters which we will use
82:39 - in the later videos okay but as you can
82:42 - see I have no name before this string
82:46 - and that is because it is a positional
82:48 - parameter which means it is compulsory
82:51 - to send okay and along with this we also
82:55 - have some named parameters okay which we
82:58 - will be using later and these are not
83:00 - necessary to send as we have discussed
83:02 - in our Dart deep type video
83:04 - now let's see this in action and for
83:08 - that we need to write
83:12 - a void mean
83:15 - okay and then inside this I'll write run
83:19 - app
83:21 - okay so this run app is also a method
83:24 - provided in material dot dot
83:26 - and then we need to write my app
83:30 - inside this run app method and then I
83:34 - also need to give a set of parentheses
83:37 - because I am passing it as a function so
83:40 - as to tell what it needs to run okay and
83:43 - now as you can see
83:46 - it is a one-liner method okay so we
83:51 - we will use another method to declare
83:54 - the function okay the one liner method
83:56 - okay so I'll just cut it from here
84:00 - and then I'll give an equal to a right
84:03 - angled bracket and then simply paste
84:06 - this
84:07 - okay and now if I run this I will be
84:10 - able to see something on my screen okay
84:13 - so I just need to save and it will hot
84:15 - reload automatically
84:20 - so as the app starts running you can see
84:23 - the text is in red and it has two yellow
84:26 - underlinings okay that means the code is
84:29 - not correct okay and that is because as
84:33 - we discussed in the previous video that
84:35 - the root of every widget Tree in flutter
84:37 - is a scaffold okay and over here you can
84:41 - see I am directly passing the text
84:43 - instead of scaffold okay so what you can
84:47 - do is you can
84:49 - uh pass a scaffold and inside scaffold
84:53 - you can pass a text as the body okay or
84:56 - else we will see this in the next video
84:58 - thank you
85:01 - welcome to programming knowledge so in
85:03 - the previous video we started discussing
85:06 - about stateless widgets material app and
85:09 - the text widget and we passed this text
85:12 - widget as a parameter to this home
85:15 - argument and then when we were running
85:18 - the application we were getting the text
85:20 - in red and it has two yellow lines below
85:24 - it okay and this generally happens when
85:26 - there is some error in the code so the
85:29 - error over here was basically that we
85:31 - were making the text as our home widget
85:34 - which is not correct because the home
85:37 - takes the root widget and as we have
85:39 - discussed in previous videos that the
85:41 - root widget needs to be a scaffold
85:43 - widget okay so instead of passing a text
85:48 - over here I'll pass a scaffold
85:53 - OK and now if I save this
86:00 - you can see that the text is gone and no
86:04 - error is present in the console okay so
86:07 - now let's add some widgets on our screen
86:10 - and the first thing that you will see in
86:13 - maximum mobile applications
86:16 - is an app bar
86:18 - so to add an app bar we write
86:21 - app Mark the small a app bar
86:26 - and it takes an app bar widget over here
86:29 - the A is capital
86:31 - okay
86:32 - now this app bar widget also takes a few
86:35 - parameters and as we want to
86:41 - give an app or a title we will call the
86:44 - title parameter and as we want our text
86:47 - as our title we will again use a text
86:50 - widget over here and as we have
86:52 - discussed in the previous video that
86:54 - text takes a string over here which is
86:56 - compulsory to give okay and that is also
86:59 - verified when you hover over it you can
87:02 - see that the documentation says that it
87:05 - takes a string data which is compulsory
87:07 - and then all the other values
87:09 - are inside curly braces that means they
87:11 - are named parameters and they are not
87:13 - necessary to give okay so now let's give
87:16 - this
87:17 - programming
87:21 - knowledge
87:22 - okay and now if I save this I will be
87:26 - able to see an app bar with the text
87:28 - programming knowledge on it okay and
87:32 - here you go you see you have a text
87:34 - programming knowledge and this blue
87:36 - check section is your app bar okay and
87:40 - now if you are wondering where did this
87:42 - blue color came from as we have not
87:44 - discussed or not specified any color
87:48 - over here so let me tell you that blue
87:51 - is the default color in every flutter
87:53 - application okay but if you want you can
87:55 - also give a custom defined color okay so
87:59 - to give a color you need to come out of
88:01 - the text widget okay but be inside the
88:05 - app bar widget and then call the
88:06 - property
88:08 - background color
88:10 - okay and then the background color takes
88:13 - a parameter called colors
88:17 - okay so now colors is an enum okay that
88:21 - has a collection of colors which is
88:23 - prefabricated with
88:25 - flutter and if you don't know what is an
88:28 - enum then that is not a problem as we
88:31 - will discuss about tenum in great detail
88:34 - in our upcoming videos okay so for now
88:36 - let's just say that colors is a keyword
88:39 - and if we hit dot then you can see all
88:42 - the colors that
88:45 - this colors enum has or that means the
88:49 - colors which are fabricated by flutter
88:51 - okay so let's say I choose red
88:55 - okay so now my background color is red
88:57 - and now if I again save this
89:01 - and go back to my application you can
89:03 - see the app bar color has
89:06 - changed to
89:07 - red
89:09 - okay then the next thing over here is
89:13 - okay before moving to the next thing you
89:15 - can see that all the code we are writing
89:18 - the maximum code is written in a single
89:20 - line okay and it is not very much
89:23 - formatted okay so to format you can give
89:27 - spaces manually here and there give
89:29 - enters press enters here and there but
89:31 - there is also a shortcut we can use a
89:34 - keyboard binding that vs code provides
89:37 - us okay to so to know what is the
89:40 - keyboard binding we need to go to code
89:43 - preferences keyboard shortcuts and then
89:46 - over here if you look for format then
89:49 - you will find a command called format
89:52 - document and then the key binding over
89:54 - here is your shortcut key so for me it
89:57 - is control
89:59 - command and F okay so I'll apply that
90:04 - in my main dot if I write
90:07 - Ctrl command F so you can see everything
90:10 - got formatted on its own okay so now the
90:15 - application looks more structured okay
90:19 - so now after the app bar
90:22 - we can also add a body
90:26 - okay so now this body is the space that
90:32 - is left after the app bar okay so the
90:35 - entire screen space excluding the app
90:37 - bar is our body okay so for now as we
90:41 - have seen in the prefabricated app we
90:43 - have our text and Center okay and so to
90:46 - display anything in Center we have a
90:48 - widget called Center so we will call
90:51 - that widget and then this widget also
90:53 - takes some parameters and over here you
90:56 - can see it takes a child parameter so I
90:59 - will call this child parameter and what
91:01 - all values it takes you can say it takes
91:03 - a widget
91:04 - and that is the child widget okay so for
91:07 - now let's just pass a text
91:09 - and now you all know that the text takes
91:14 - a compulsory parameter that is a string
91:16 - that gets printed and let's give my name
91:19 - okay you can give your name
91:22 - so now our body has a center and it has
91:26 - a text called rishab Kumar now again
91:28 - I'll format it and then save it
91:33 - okay so once saved you can see I have a
91:36 - text called rishabh Kumar in the center
91:38 - okay so over here you can see this is
91:42 - called a widget tree that means I have a
91:44 - scaffold as my root widget it has two
91:47 - branches app bar and center the first
91:49 - Branch app bar has another Branch text
91:53 - okay and it has on one more Branch as
91:56 - colors okay then the second branch that
91:59 - is body it has a child branch called
92:01 - text okay so this is how branches are
92:04 - increased and we design our
92:07 - app we design our application
92:10 - okay and now you can explore about more
92:13 - parameters more functionalities about
92:16 - app bar body and if you want to do so
92:18 - all you need to do is after the comma
92:21 - hit control space okay and then all the
92:24 - values that it takes will be available
92:26 - to you like the center text height
92:28 - Factor key and width Factor and in the
92:32 - app bar if we hit control space you can
92:35 - see it takes an actions actions icon
92:38 - theme
92:39 - automatically imply leading bottom okay
92:44 - so these are some functions that you can
92:46 - if you will hover around then you will
92:48 - ever be able to know what it is about so
92:50 - suppose if we choose bottom and if we
92:53 - over hover around bottom so then you can
92:55 - see this widget appears across the
92:57 - bottom of the app bar ok so for now
93:00 - let's try adding an icon and see where
93:02 - it appears okay so to add an icon we
93:05 - again call the icon widget
93:08 - okay and then this icon widget also
93:11 - takes iron compulsory parameter and that
93:13 - is an icon data okay so icon data is not
93:17 - something that we need to worry about
93:19 - that is present in icons
93:23 - enum okay so this is also an enum and we
93:27 - will study about enum for now enum is uh
93:29 - icons is just a keyword and if you hit
93:31 - enter you will be able to see a lot of
93:33 - icons that it has and for now let's just
93:36 - say add okay which is the plus sign as
93:40 - you can see over here
93:41 - okay and now it is still giving an error
93:45 - and if you Peak on the problem it says
93:48 - the argument type icon can't be assigned
93:50 - to a parameter type preferred
93:53 - size widget
93:56 - okay so this means that we can't give an
93:59 - icon to the bottom okay but that is not
94:02 - the problem over here I just wanted you
94:04 - to know how to explore all the other
94:06 - things that it has okay and so you can
94:09 - do that now
94:11 - okay and then we will add The Floating
94:13 - Action button and some functionality to
94:16 - this application in the next tutorial
94:18 - thank you
94:21 - welcome to programming knowledge so in
94:23 - this video we are going to discuss about
94:25 - two very important widgets okay which
94:28 - are not the UI elements but are very
94:30 - essential while designing the look of
94:33 - the screen okay and the first one is
94:35 - column and the basic use of column is
94:38 - that we can give more than one widgets
94:41 - to column and they all appear in a
94:43 - column that is one after another okay so
94:45 - to use a column first I'll remove this
94:48 - Center that I have over here
94:50 - and instead of that I'll write column
94:52 - okay and it takes a children and which
94:56 - is you can see over here of type widgets
94:59 - okay so inside this we can give a list
95:01 - of widgets that we want to display on
95:04 - the screen okay as the body
95:06 - so the first one is a text
95:10 - okay
95:15 - okay so this is a text
95:17 - now along with text I also want to add a
95:21 - button so first I'll give a comma and
95:23 - the next widget will be a button so to
95:26 - add a button in flutter we write flat
95:29 - button
95:30 - okay and it takes a parameter child as
95:34 - in what will be or written or displayed
95:36 - on that button okay so for now I'll just
95:39 - give a text
95:40 - and the text says
95:43 - press
95:44 - or just simple press
95:46 - okay and now you can see it has a yellow
95:49 - line below where it is written flat
95:50 - button and if you hover around it you
95:53 - can see the parameter on pressed is
95:56 - required that means this flat button
95:58 - requires the on pressed parameters and
96:02 - on pressed basically decides the
96:04 - functionality what will happen when this
96:06 - flat button is pressed okay and it takes
96:09 - a function it takes a function okay so
96:12 - you can define a function over here and
96:15 - then call it from here or what I'll do
96:17 - is I'll create Anonymous function like
96:19 - this and so since I don't want to do a
96:23 - lot of functionality I'll just print it
96:25 - in the console that the button is
96:27 - pressed so for that I'll write print
96:31 - and then inside that
96:33 - pressed
96:35 - ok
96:36 - now when I will first format it and then
96:40 - I'll save it so I would be able to see
96:42 - two things on my screen the first is a
96:45 - text with rishabh Kumar and after that
96:47 - I'll have a flat button which is calling
96:50 - press
96:51 - okay so just wait for a moment for the
96:54 - sink to finish
96:56 - so once finished you can see I have a
96:59 - text called rishabh Kumar and after that
97:02 - uh press so the background color of the
97:05 - button and the screen both are the same
97:08 - so we are not able to differentiate so I
97:11 - can add another property that this flat
97:13 - button provides and that is color
97:16 - okay so for color I told you there is a
97:19 - enum that is provided by flutter called
97:21 - colors and then I'll just simply write
97:23 - red
97:25 - okay again format it and save it
97:29 - so over here you can see I have a text
97:33 - called rishabh Kumar and below that I
97:35 - have a button press which has red
97:37 - background and if I press on it
97:40 - you can see
97:42 - I am getting over here presses presses
97:45 - okay so the text over here was pressed
97:47 - inside instead of pressed so I am
97:49 - getting the same in my console okay now
97:52 - I can also change the text color over
97:55 - here okay so for that I'll just write
97:57 - text color
97:59 - and the color can be again colors
98:03 - dot White
98:06 - okay I'll again save this
98:08 - so once done you can see my text is
98:12 - invite okay so I can keep on adding as
98:16 - many UI elements I want in this column
98:18 - okay so for instance I add another
98:22 - text
98:24 - okay and let's say it says
98:28 - programming
98:31 - foreign
98:34 - okay now if I again save this so below
98:38 - this flat button I'll get another text
98:40 - that says programming knowledge and the
98:43 - order which we in which we write the
98:45 - elements over here that will be the same
98:48 - order that we see on the screen okay
98:50 - that means first this text then this
98:53 - flat button and after that we will have
98:55 - this text
98:56 - programming knowledge
98:58 - okay so now uh this is how we can add
99:02 - more than one elements in a column okay
99:05 - now suppose I don't want this column to
99:08 - be over here but instead I want it to be
99:11 - inside the center
99:12 - okay so then we have a parameter that
99:16 - this column takes and that is called
99:18 - main axis alignment okay and for the
99:22 - column the main axis is the vertical
99:24 - axis and it takes and it also has an
99:28 - enum that is main axis alignment okay
99:31 - and then if you enter dot you can see
99:33 - all the options and as my task is to
99:35 - display on Center I'll just hit Center
99:37 - and then if I save this I will be able
99:39 - to see it in the
99:41 - Center
99:43 - so now you can see it is in the center
99:46 - now if you want you can also try
99:49 - different types of Min access alignment
99:51 - that is in this enum so I'll again hit
99:54 - the dot and let's try end okay so now if
99:57 - I save this let's see what happens
100:02 - so you can see everything is at that
100:04 - Tech at the
100:06 - end that is the bottom okay and then
100:09 - similarly you can also try something
100:11 - called
100:12 - start that will go at the start
100:16 - okay then we have space around that
100:19 - means it will take all the space
100:22 - so you can see the entire height has
100:25 - been covered by three widgets and the
100:28 - basically two text stand up button okay
100:31 - so this is called space around and then
100:33 - we also have space between
100:37 - so you can see the spaces are only
100:40 - between the elements
100:42 - okay that means below this programming
100:45 - knowledge we don't have any space and
100:47 - above this rishabh Kumar we don't have
100:49 - any space but the space is only between
100:52 - the elements okay so this is how we can
100:55 - play with the alignment of the columns
100:58 - for now I'll make it Center
101:02 - okay and then comma so now the text will
101:06 - be in sent okay so now you can see the
101:08 - text is again in center but you can see
101:10 - it is only the vertical Center and not
101:13 - the horizontal Center okay so there are
101:16 - two ways to bring it in the exact center
101:19 - okay so as I told you the column has
101:22 - main axis alignment as vertical axis and
101:26 - the cross axis alignment is the
101:28 - horizontal axis so along with main axis
101:32 - alignment you also have a cross axis
101:34 - alignment and over there you can write
101:37 - cross axis alignment which is also an
101:39 - enum
101:40 - Dot Center so then again it will be in
101:43 - the exact center
101:45 - and the other way to do is to wrap this
101:49 - entire column by a center widget okay so
101:51 - you can do it manually by creating a
101:53 - center and in the place of child we will
101:56 - pass this whole column or easier method
102:00 - is to go to code preferences and
102:04 - keyboard shortcuts and in the shortcuts
102:06 - look for sent uh refractor okay so you
102:10 - will get a certain Q binding for the
102:12 - refractor okay in my case it is Ctrl
102:15 - shift R so if I press Ctrl shift r i get
102:18 - the options wrap with Widget wrap with
102:21 - Center wrap with column okay and similar
102:24 - to that so I'll just wrap with Center
102:27 - okay and you can see it automatically
102:29 - adds a center and the child becomes the
102:31 - column and now if I'll save this I would
102:35 - be able to see the entire column in the
102:38 - center
102:39 - okay so here you go the everything is in
102:43 - the center okay so now similar to column
102:47 - we also have a row okay so for to
102:51 - demonstrate that I'll just copy all the
102:54 - children that I have over here
102:56 - okay
103:00 - and instead of a column
103:04 - okay I'll also need to remove this
103:10 - instead of a column I'll have a row
103:13 - okay so as you can understand by the
103:16 - name row adds one element after another
103:19 - towards the right mean starting from
103:21 - left towards the right okay so in in
103:24 - place of children if I again pass all
103:26 - those things
103:27 - I'll format it and save it so now I will
103:30 - be able to see all these three things
103:32 - one after another
103:35 - so now you can see we have a text over
103:38 - here and after that you have this button
103:41 - and then the programming knowledge text
103:43 - and if I again click on this press so
103:46 - the console is again logging presses
103:48 - means the functionality is fine
103:51 - and similarly over here also inside this
103:54 - row you have a main access alignment and
103:57 - you know how to use it and a cross
103:59 - access alignment
104:01 - okay and you can also wrap it with a
104:03 - center and it is already wrapped with a
104:05 - center so you can see it is already in
104:08 - the center according to the Cross axis
104:10 - alignment because for the row the main
104:13 - axis alignment is the horizontal axis
104:15 - and the cross
104:16 - access alignment is the vertical axis so
104:19 - as it is already inside Center the cross
104:21 - axis alignment is automatically Center
104:25 - okay and if I add main axis alignment
104:29 - main axis alignment
104:31 - as Center then it will be in the exact
104:33 - center of the screen
104:38 - and once reloaded we can see the row is
104:41 - in the center
104:43 - okay and so this is how we
104:46 - add more than one elements in the screen
104:49 - okay so this was for the tutorial thank
104:52 - you
104:54 - welcome to programming knowledge so in
104:57 - this video we are going to add some
104:59 - functionality to our application because
105:02 - till now what we have done is we have
105:04 - just added UI elements and we have seen
105:06 - different ways to add multiple UI
105:09 - elements but our application is not
105:11 - functional okay so to add functionality
105:15 - let's say that instead of print presses
105:19 - I want to display a toast okay so the
105:24 - first thing that toast is not
105:25 - prefabricated in flutter we need to
105:28 - add the extension okay and the place
105:31 - where you can find all the flutter
105:33 - extension is this panel is this website
105:38 - pub.dev and over here if you search for
105:41 - toast then you will find this toast
105:44 - 0.1.5 and there are other extensions
105:48 - also but I prefer to use this one okay
105:51 - so now you can see over here it is
105:53 - written how to use and then the first
105:56 - thing is this toast
105:58 - ah colon and then uh
106:01 - sine then 0.1.5 this is basically the
106:04 - line to install this dependency in our
106:07 - project now in most of the extensions
106:12 - how to download is not written over here
106:14 - so you can also find it in the
106:16 - installing section okay so I'll just
106:19 - copy it from here
106:22 - and as we discussed earlier we need to
106:26 - add all the extensions in our Pub spec
106:29 - dot tml file so over there I'll add this
106:32 - file
106:34 - okay inside this dependencies section
106:38 - and at the same line we have this
106:41 - flutter written okay now if I save this
106:43 - it will automatically
106:46 - start getting the extension in our file
106:48 - in our application
106:51 - okay so after this
106:53 - now we can use that extension in our
106:57 - application so to use that extension
107:00 - again in my readme you can see the first
107:02 - thing that we need to do is we need to
107:04 - import this package
107:06 - so I'll just copy it from here
107:09 - and I'll paste it below this so now this
107:13 - file is inside our
107:17 - application and now to use the now to
107:21 - display a toast we write to toast dot
107:23 - show and then the text
107:25 - that is message
107:26 - then the context and we have the context
107:30 - that is build context okay that we have
107:33 - in our every application
107:35 - okay then after that we have this
107:37 - duration
107:38 - then gravity then text color background
107:42 - color background radius and border okay
107:45 - so now you can see the background color
107:46 - has a default color of this so over here
107:50 - 0x stands for hexadecimal that means the
107:53 - code is in hexadecimal the last six
107:56 - digits stands for the color code and
108:00 - then the first two digits after X stands
108:03 - for opacity
108:05 - okay so now to display a toast we'll use
108:10 - this line
108:11 - so instead of console logging I'll write
108:17 - toast
108:20 - and Dot show and the message is
108:27 - toast demo
108:29 - okay so now let's try running this
108:32 - okay so once the application starts
108:35 - running if you click on this press
108:38 - so instead of showing anything it is
108:40 - giving me a list of Errors over here
108:43 - okay and the main error is unimplemented
108:46 - handling of missing static Target
108:48 - okay so this means that we are trying to
108:53 - add functionality in a stateless widget
108:56 - class okay so that means that is because
108:59 - the basic functionality of stateless
109:01 - widget is to just create a static page
109:04 - okay that means if this page is created
109:07 - like this then we can't change it while
109:10 - the application is running okay and if
109:12 - you want to display a toast then that
109:14 - means the look of the page will change
109:17 - and the page will not be static and that
109:20 - will defy the functionality of stateless
109:22 - widget okay so to solve that problem we
109:26 - have another base class in our material
109:28 - dot dot and that is called State full
109:31 - widget okay so you can see stateless and
109:33 - stateful they both are contrary and so
109:35 - is their features so to create a
109:38 - stateful widget we just write stf or
109:42 - something like that and over here you
109:43 - get flutter stateful widget and then
109:46 - let's give this class a name so let's
109:48 - say my
109:50 - home app okay so now you can see a class
109:53 - my home app is created and it extends
109:55 - stateful widget then inside this we have
109:59 - my home app state that is the App State
110:01 - okay and it calls a method called create
110:04 - State then after that we have another
110:06 - class
110:07 - called my home app State and it extends
110:09 - State okay so this is the basic code
110:12 - that we need to write for every stateful
110:15 - widget and flutter and vs code helps us
110:19 - in writing this okay and if you want to
110:21 - know what uh what are the
110:23 - functionalities of these functions then
110:25 - you can simply
110:27 - go to
110:29 - flutter
110:31 - okay and open the first link
110:36 - and then over here go to Docs
110:40 - okay so now instead of returning a
110:43 - container I want to return this scaffold
110:45 - that I have over here
110:47 - so I'll just cut it from here
110:51 - and paste it
110:54 - over here
111:01 - okay and now over here the home will be
111:04 - my this my home app class so I'll write
111:07 - my
111:08 - home app
111:10 - okay now I'll again format this
111:13 - and try running this okay instead of
111:16 - running I will reload this
111:19 - okay once reloaded you can see
111:21 - everything is still the same
111:23 - and now I'll remove this two texts okay
111:27 - just for now
111:31 - again run this
111:34 - okay so once the application starts
111:36 - running now if we click on press then we
111:39 - are able to see our toast so that means
111:42 - if we are inside a stateful widget we
111:45 - can change the state means the
111:47 - application is not static but it is
111:50 - suggested that when we don't need to
111:53 - change the state we should use stateless
111:55 - widget okay so now let's explore this
111:59 - toast a bit so over here you can see the
112:02 - it also takes more parameters and the
112:06 - duration is toast dot length short that
112:10 - is the default parameter the gravity is
112:12 - toast dot bat bottom that is also
112:14 - default and we can override it okay so
112:17 - for let's override the duration tool
112:20 - length long
112:21 - so I'll write
112:25 - duration
112:28 - toast Dot
112:31 - length long and now if I save this so
112:35 - now the text will be now the toast will
112:37 - be displayed for a longer period of time
112:40 - and you can see that
112:42 - okay similarly I can also override the
112:46 - gravity
112:47 - so I'll write gravity
112:51 - toast
112:52 - not Center
112:56 - first format it then save it
113:01 - and now if we display the toast so it is
113:04 - in the center but as you can see we have
113:07 - kept the button also in center and we
113:10 - are also displaying the toast in Center
113:12 - so that means according to Convention
113:15 - they both should overlap but when the
113:17 - toast is being displayed it is above
113:19 - this flat button so this is because the
113:22 - toast is being displayed at the center
113:24 - of the entire screen and this press
113:27 - button is at the center of this scaffold
113:30 - part means the whole screen except the
113:34 - app bar
113:35 - okay so similarly there are other
113:37 - properties also that is
113:39 - background color and I can give it a
113:42 - different color
113:46 - let's say red
113:52 - so now the toast is in red I can also
113:55 - change it to different color means we
113:57 - can play around
114:03 - now the toast will be in
114:06 - this color
114:07 - ok then we can also change the text
114:10 - color
114:12 - let's say
114:16 - colors dot black
114:24 - and now the text color is in Black
114:27 - okay so this is the difference between
114:30 - stateless and stateful widget like when
114:33 - we don't have any functionality in our
114:35 - application so it is suggested to use a
114:38 - stateless widget but when we need to add
114:40 - some functionality then we should go for
114:43 - stateful widget
114:45 - okay I hope everything was clear thank
114:47 - you
114:48 - welcome to programming knowledge so in
114:51 - this tutorial we are going to discuss
114:53 - about text with jets so text widget is
114:56 - one of the most used widget and we
114:59 - ourselves have been using it in two or
115:01 - three previous videos okay so today we
115:04 - will look deeper in text widget and see
115:06 - a few of the functionalities provided by
115:08 - the text widget okay so for that first I
115:11 - will remove this center from the body
115:16 - okay so I will just simply comment it
115:17 - out and then create another body okay it
115:21 - will be a center
115:24 - the center will have a text
115:27 - okay the center's child parameter will
115:30 - have a text
115:32 - and the text says
115:36 - programming knowledge
115:39 - okay now if I save this
115:42 - I'll get a text programming knowledge in
115:44 - the center
115:47 - okay you can see that
115:49 - okay now after this the next thing that
115:51 - we need to know is that we can constrain
115:54 - the number of lines that our text will
115:57 - be displayed okay like if I only want to
115:59 - display three lines then I have a
116:01 - property called Max lines okay and if
116:04 - you hover around it you can see it takes
116:06 - an integer value so let's say I only
116:07 - want to display three lines
116:09 - okay and now to break the line you can
116:13 - use backslash n okay so what I'm going
116:16 - to do is I am going to
116:18 - display programming knowledge four times
116:20 - in four different lines okay so
116:22 - according to the concept of this Max
116:25 - lines only three lines should be visible
116:28 - so let's check that
116:30 - okay
116:35 - okay so now I'll first format this and
116:38 - then save this
116:42 - okay so now you can see instead of
116:45 - printing five lines it is only showing
116:48 - three lines so this is how you can
116:50 - constrain the number of lines of your
116:53 - text okay then now I'll bring it back to
116:56 - single line
116:57 - okay just programming knowledge and the
117:00 - next thing that we are going to discuss
117:01 - is style that means how to apply styling
117:04 - to our text widget so there's a named
117:06 - parameter called style and it takes a
117:09 - text style widget okay so I'll write a
117:12 - text
117:13 - Style
117:15 - and now it also has some properties so
117:17 - the first property as you can see is
117:19 - background okay so background takes a
117:22 - paint very paint widget and till now we
117:25 - have not discussed about paint so I'll
117:27 - come back to that later then we have
117:30 - background color and you know we have an
117:32 - enum called colors then I can simply
117:35 - give red
117:36 - now if I save this the background of the
117:39 - text will be in red
117:42 - and you can see that
117:44 - okay similarly we have another property
117:47 - called
117:49 - text color
117:51 - no not the text color just simply color
117:54 - and then I can give colors
117:58 - dot white let's say that
118:01 - okay then again format it and save it
118:09 - so now you can see the text is in white
118:12 - color
118:13 - okay now the next property that we have
118:16 - over here is font weight
118:19 - okay font width and that means the size
118:22 - so if I give no sorry the font weight
118:25 - means The Styling like a bold italic and
118:29 - stuff like that so there's another enum
118:31 - called font weight okay and if I write
118:34 - font weight dot bold so now my text will
118:37 - be in bold okay now once I save this
118:41 - so you can see the text has become a bit
118:44 - bold
118:45 - okay now after this you have font size
118:51 - okay and you can give the size of the
118:54 - font of the current text widget okay so
118:57 - I'll give 20 let's say
118:59 - okay so now you can see the text has
119:01 - become a little bit larger okay you can
119:03 - increase
119:05 - the font size a little bit more so that
119:08 - the change is significant and you can
119:10 - observe it
119:13 - okay so now you can see the text has
119:15 - become bigger
119:17 - now the next property that we have is
119:19 - font style
119:22 - okay and it takes font style dot italic
119:26 - okay so suppose if you want to make the
119:28 - text italic
119:33 - and you can see our text has become
119:35 - italic
119:37 - okay so these were the basic about text
119:41 - and there are other properties also like
119:44 - overflow
119:46 - text align and there are many other soft
119:49 - wraps struct style text alignment and
119:52 - these are
119:53 - not important right now because once we
119:55 - know about containers and paddings then
119:58 - these properties will make more sense so
120:00 - once we cover those we will surely come
120:02 - back to this
120:04 - okay so now another type of text that we
120:08 - use and that is used majorly for styling
120:11 - that is called Rich Text Okay so I'll
120:14 - again comment this out
120:18 - I'll have another body
120:20 - ok so first center
120:24 - Center's child will be
120:27 - Rich Text Okay then Rich Text takes a
120:31 - text okay and the text should takes
120:34 - another widget and that is text span
120:38 - okay now text span takes a parameter
120:41 - called text okay which as the name
120:44 - suggests
120:45 - is a text okay and then one another
120:49 - thing that is style then again we have
120:52 - text style we discussed about it just
120:56 - now okay and then I give a color
121:00 - let's say
121:03 - colors Dot black
121:07 - okay now I need to
121:09 - give another closing bracket over here
121:11 - now I'll format it and save it
121:16 - okay so you can see we have our text
121:18 - over here called programming
121:21 - okay now the basic
121:24 - use of Rich text is to provide a
121:27 - different type of styling to different
121:29 - words in a string or in a sentence
121:32 - okay so over here the first word is
121:35 - programming and it is in text color
121:37 - black and if you want you can also
121:39 - change the color
121:41 - you can give it a size
121:45 - let's say 15
121:48 - okay so this is one word and now if you
121:51 - want to give another styling to the next
121:54 - word then you have another property
121:55 - called children
121:57 - okay and it should also be of type text
122:00 - span so I'll
122:02 - you define it over here then it takes a
122:05 - list okay now as we have defined it to
122:08 - be text span it only takes text spans
122:11 - widget
122:12 - so I'll write text span again inside a
122:15 - text span we have our text
122:18 - okay so text will again take a text okay
122:22 - now we can provide different styling to
122:24 - it okay so for now I'll just simply call
122:26 - copy this
122:29 - paste it over here and change the size
122:31 - to let's say 30.
122:33 - okay now once I save this you will be
122:36 - able to understand what is the
122:37 - difference
122:42 - okay so now you can see we have two
122:44 - different words but a single text okay
122:48 - now if I want I can also change this
122:50 - color
122:52 - okay and I should give a space over here
122:55 - so that it becomes more understandable
123:01 - and now you can see we have programming
123:03 - in
123:05 - this color and which is in a smaller
123:08 - size and knowledge in red color with
123:10 - with a bigger size okay and similarly
123:12 - you can add as many text spans as you
123:15 - want over here so I'll add another text
123:17 - span
123:21 - the text is let's say
123:25 - flutter okay and this should also have a
123:29 - space or whatever you like
123:32 - then again a style
123:36 - so the style will again be text Style
123:40 - color
123:43 - s dot let's say green
123:47 - okay and then we have font size of
123:54 - let's say 20
123:56 - okay now I'll format all these okay I
124:00 - need to give a comma over here
124:03 - there is some error
124:06 - okay I missed the closing bracket over
124:09 - here
124:10 - now I'll save this and then you can see
124:13 - another
124:15 - text that is flutter and it is in green
124:17 - color and it has a different size
124:20 - okay so you can see we have three
124:22 - different words but they are inside a
124:24 - single widget that is the rich text
124:27 - widget and they act as a single string
124:31 - okay so it's a real life uses in places
124:34 - like this like where you have a single
124:37 - text but a part of it is over here acts
124:40 - as a redirecting link okay like in our
124:43 - flutter application if I would click on
124:45 - this then I would open an another page
124:47 - okay and the rest of the text is just
124:50 - simple text and no changes are there on
124:52 - that okay so in such kind of scenarios
124:56 - Rich Text come to play okay and now
124:59 - another thing that I also want to cover
125:01 - in this video is like how to create
125:05 - uh how to separate widgets in different
125:07 - Dart files and use it in another dot
125:10 - file okay so for that first of all I'll
125:11 - create a new dart file I'll call it my
125:16 - home
125:18 - underscore app Dot
125:20 - Dot
125:21 - okay and now inside this my home
125:25 - app.i want this class to be there okay
125:28 - so I'll just copy everything or cut
125:31 - everything
125:33 - and paste it over here
125:35 - then now it is giving errors because I
125:37 - need to import material pack material
125:40 - dot dot
125:45 - okay now I'll save this
125:48 - and over here you can see this my home
125:51 - app is giving an error because this file
125:54 - doesn't know what is my home app okay so
125:56 - now we need to add this my home app.dot
126:00 - in our main dot dot file okay so for
126:02 - that again I will write import then Dot
126:06 - and slash that means to look in the
126:10 - current directory and then over here you
126:11 - can see as the suggestion says my home
126:14 - app.not okay so now inside my home app
126:17 - dot dot we had this my home app so now
126:22 - over here the error is gone and now if I
126:25 - save and run this no change will be
126:27 - there but now what we can say is our
126:30 - main dot dot is a bit more cleaner
126:33 - okay so you can see the same thing
126:36 - okay so that was for the video thank you
126:39 - welcome to programming knowledge so in
126:42 - this tutorial we are going to discuss
126:44 - about buttons so button is a very basic
126:48 - yet very important UI widget that
126:50 - flutter provides us okay so the first
126:53 - thing I'll comment this body out okay
127:00 - the next I'll add another body
127:03 - okay a center
127:06 - and child okay so now there are
127:10 - different types of buttons okay and we
127:12 - will discuss all of them and the first
127:14 - type of button is flat button okay so
127:18 - capital F A flat button okay and it
127:21 - takes a child okay so child is the
127:25 - widget that will appear on the button
127:27 - okay so you can give any widget okay so
127:30 - let's try with the text okay and the
127:33 - text says
127:35 - press me okay and if I save this I
127:38 - should be able to see a
127:40 - button that says press me okay now it is
127:44 - not restricted to text as I told it
127:47 - takes any widget I can even give an icon
127:52 - okay and then icon has an icons in them
127:55 - okay and then if you give a hitter dot
127:59 - then you can see all the icons that are
128:01 - already available okay for now I'll just
128:03 - give add that is a plus sign okay and
128:06 - now if I save this I would be able to
128:08 - see a flat button that has an icon Plus
128:12 - okay so you can see that
128:14 - ok now you can see this flat flat button
128:18 - has a yellow underlining okay and if you
128:20 - hover around it you can see one thing is
128:23 - missing and that is on pressed
128:27 - okay because over here you can see it is
128:30 - written that the parameter on pressed is
128:33 - required okay so let's provide that
128:36 - so basically on pressed is the
128:40 - takes a function that will be executed
128:43 - when the button is pressed okay so you
128:45 - can see it takes a function that is void
128:47 - that means it doesn't return anything
128:49 - and it and the function is run when the
128:52 - button is pressed okay so for now let's
128:54 - just create an anonymous function a one
128:58 - liner function and I'll simply print
129:04 - button pressed okay so that means
129:06 - whenever I'll press on this button
129:08 - button pressed will be written in my
129:11 - console okay so let's try this
129:16 - so now if I click on this plus over here
129:20 - you can see button pressed is being
129:22 - logged in my console if I go on pressing
129:25 - it will go on adding okay so this is an
129:28 - on pressed method okay so now it is not
129:31 - necessary to have a Anonymous function
129:34 - like this okay you can have a function
129:37 - in over here okay so let's say I call it
129:41 - void
129:44 - button action okay that means the action
129:47 - that button will do and then simply over
129:50 - here I write press print
129:55 - button pressed
129:57 - okay and now over here instead of
130:01 - calling this I can call that function
130:03 - okay so button
130:06 - action okay and we do not need to give a
130:09 - parenthesis because we are not actually
130:11 - calling that function but we are
130:13 - pointing to that function
130:15 - okay so then again hit save and now
130:19 - again we should see the same action okay
130:22 - so now if I hit plus so you can see
130:26 - it is again giving button press but
130:28 - along with that it is also giving some
130:30 - other logs okay so that is not our
130:33 - concern so you can see as many times I
130:37 - press the button that many times uh our
130:40 - console is being logged with button
130:42 - console okay so this you can use this
130:46 - way also okay now the problem occurs
130:48 - when you want to pass a certain
130:50 - parameter that means this function
130:52 - accepts a parameter let's say string
130:56 - name OK and it logs
131:01 - the name also okay that means name is
131:03 - required but over here since you are
131:06 - pointing you don't give a parenthesis
131:08 - okay and hence you can't pass a
131:13 - value okay so then what you need to do
131:16 - is you need to again click like the
131:18 - right like this okay and Anonymous
131:21 - function
131:22 - and then over here you can pass the
131:26 - parameter okay so for now let's say I am
131:27 - passing
131:29 - reshuff
131:31 - okay now if I save this everything
131:34 - should work fine but instead of console
131:36 - logging button pressed it should lock
131:38 - button pressed reshuff okay so let's try
131:42 - that
131:43 - and you can see button pressed rishab as
131:46 - being locked okay so this were the three
131:50 - methods in which you can
131:53 - write the functionality for this on
131:56 - pressed which takes a function okay so
131:58 - I'll bring it back to the
132:01 - original means the first one that we
132:05 - have written okay
132:06 - over here just
132:10 - print
132:14 - button pressed
132:16 - okay now the next thing that we are
132:19 - going to discuss is the color okay so
132:22 - color then as you know colors enum is
132:25 - there present in flutter and it has a
132:27 - certain colors over here you can select
132:29 - any one of them I am going to use red
132:32 - okay so now if I save this
132:36 - my button should be red in color okay
132:39 - and you can see that
132:42 - okay now similarly I have a
132:45 - parameter called colors brightness and
132:48 - it also has an enum brightness and
132:50 - brightness has two values dark and light
132:54 - okay so dark means that the button would
132:57 - be visible even in a dark surrounding
132:59 - okay
132:59 - so now if I run this you should see how
133:02 - the changes happen Okay so you can
133:07 - see the difference that the plus sign
133:09 - has become white instead of black okay
133:12 - and that is understandable when you have
133:15 - a black background white color is
133:17 - significant means you can point it out
133:19 - okay so that is what has happened over
133:21 - here and similarly if you change it to
133:23 - light okay that means the theming of
133:26 - that button will change for a light
133:29 - background okay and then
133:31 - you can see the button color is black
133:33 - that means if you have a bright
133:35 - background then this plus icon is
133:36 - noticeable okay and so is the case over
133:40 - here
133:42 - okay now the next thing that we have is
133:45 - a text color okay now now suppose if we
133:48 - have a text till now we don't have a
133:51 - text but if we have a text we can also
133:53 - provide some colors over here okay and
133:55 - you know how to add a text instead of
133:57 - passing icon as the child we can pass
134:00 - text as the child okay now the next
134:04 - feature that we are going to discuss
134:06 - about is enabling the button okay so
134:08 - like sometimes you might not want the
134:11 - button to be enabled at once but after
134:13 - some time it should be enabled okay so
134:15 - in that cases you need to disable the
134:18 - button okay so earlier we used to have
134:21 - an enabled parameter that used to take
134:24 - true or false means true for the button
134:26 - is enabled false for the button is
134:28 - disabled okay but in the latest flutter
134:31 - update it has been removed
134:33 - okay so the way around is
134:36 - instead of writing anything any function
134:40 - for on pressed if you write null
134:42 - then that means our button has become
134:45 - disabled okay so now if you save and run
134:49 - this you will not see any significant
134:51 - change okay but if we click on this you
134:54 - can see nothing is being logged in my
134:56 - console that means the button is
134:58 - disabled okay so now you can similarly
135:02 - add a disabled color like we had a color
135:05 - that was for when the button was enabled
135:07 - so disabled color is when the button is
135:10 - disabled so colors dot let's say this
135:14 - color okay so now since our button is
135:18 - disabled over here we should see this
135:20 - color and you can see that
135:23 - okay and similarly we have a disabled
135:26 - text color when we have a text as our
135:28 - child okay you can use that
135:31 - and then the
135:34 - last property in flat button is on Long
135:38 - pressed okay so on pressed when you
135:40 - simply click on the button and on long
135:42 - press when you keep on
135:45 - when you click and hold okay so let's
135:49 - see what this this long press takes and
135:52 - it also takes a function that is
135:54 - non-return type okay that means it
135:56 - doesn't return anything so again I'll
135:58 - create an anonymous function
136:00 - and simply I'll print
136:06 - button is pressed
136:09 - for long time
136:12 - okay now let's see this in action so now
136:15 - if I press and hold the button this text
136:18 - should be logged in my console okay so
136:21 - now if I press and hold you can see it
136:25 - is showing button is pressed for long
136:27 - time again if I press and hold same is
136:30 - the
136:31 - log in the console and now if I try just
136:34 - clicking it so it is not working and
136:36 - because over here we have made on
136:38 - pressed as null okay so I'll change it
136:40 - back to what it was
136:44 - print
136:51 - button pressed now if we run this you
136:55 - can say if I click on it then the log
136:57 - says button pressed and if I click and
136:59 - hold it says button is pressed for long
137:01 - time so this is how we add functionality
137:04 - to our button if you want you can
137:06 - display our toast over here call some
137:09 - function that does some complex
137:11 - calculations you can do whatever you
137:13 - want means all the functionality part
137:15 - you can add in this on pressed or on
137:17 - Long pressed as ever you want your
137:21 - button to react
137:24 - welcome to programming knowledge so in
137:27 - this video we are going to continue our
137:29 - discussion on buttons okay so the first
137:32 - thing I'll comment this out this is
137:35 - about flat button which we discussed in
137:37 - our previous video okay so the next type
137:41 - of button that we are going to discuss
137:43 - is the raised button okay so first I'll
137:46 - create a center
137:47 - and the child will be a raised button
137:51 - okay
137:53 - so the basic difference between flat
137:56 - button and waste button is that raised
137:58 - button looks a little bit elevated like
138:01 - floating on screen and flat button is
138:03 - infused on screen okay so if you go to
138:06 - stack Overflow you can find a very good
138:10 - example over here you can see this
138:12 - buttons are bulging out over here and
138:15 - these are basically raised buttons okay
138:18 - and then if you scroll down you can see
138:21 - over here the button seems to be infused
138:24 - like there is no difference between the
138:28 - button background and the
138:30 - rest of the body of the alert dialogue
138:33 - so the button seems to be infused in the
138:36 - dialogue and such type of buttons are
138:38 - flat button okay
138:40 - so
138:42 - so back in our project over here we have
138:46 - a rest button okay and rest button also
138:49 - takes an on pressed okay on press test
138:51 - compulsory for every button okay then
138:54 - over here also I'll add a simple
138:55 - Anonymous function that says
138:58 - button
139:01 - pressed
139:02 - okay and then I also need to give an
139:06 - child okay so again you can give any
139:09 - text widget I am giving an icon
139:12 - from the Icon Cinema and the icon will
139:14 - be add
139:16 - okay and you can see there's an error
139:18 - over here and that is because we are
139:20 - missing a parenthesis okay now I'll
139:22 - format it and save it so now you should
139:24 - be able to see a button that has a plus
139:28 - icon on it and you can see that and if
139:31 - you look closely you can see there is a
139:33 - little bit Shadow at the bottom and on
139:36 - the
139:37 - ah left side so that means the button is
139:41 - a little bit elevated from the screen
139:43 - okay so that is the Z axis we have the
139:46 - shadow in the Z axis representing that
139:48 - the button is a little bit elevated okay
139:50 - then we can apply the same properties
139:52 - that we have in our raised button like
139:55 - color Okay so the colors is again
140:00 - red so now the button will be in Red so
140:03 - an elevated button in red will be
140:05 - visible you can see that okay then
140:08 - similarly we have the
140:10 - color brightness okay then again it is
140:13 - let's say brightness
140:19 - dot dark
140:21 - okay and the rest of the features also
140:24 - like a disabled color and on long press
140:27 - okay so now the another property that we
140:31 - have over here is elevation okay
140:34 - elevation so that means how much Shadow
140:38 - will be there that means how much will
140:40 - be the length of the Z axis so let's say
140:42 - if I give 10 so now you can see there's
140:46 - a little bit Shadow now if I run this
140:48 - the shadow would be a little bit
140:50 - thicker OK so let's see that and you can
140:54 - see the shadow has become a little bit
140:56 - thicker and it is more significant now
140:59 - okay so this says that the button is a
141:02 - little bit raised and this actually over
141:05 - here acts as the shadow
141:08 - okay and now over here if I make this
141:11 - null the on pressed function as null so
141:15 - then let's see what is the difference
141:17 - like in flat button if we were making it
141:19 - null so no difference and the button was
141:22 - visible just the functionality was not
141:25 - there okay and that is because we have
141:26 - changed it to null but over here since
141:29 - we are making it null that means we are
141:31 - making the raised button disabled you
141:34 - can see the color automatically
141:36 - changes to our disabled type of thing
141:39 - okay and if you press then the
141:41 - functionality is also not there
141:44 - okay
141:45 - so now you can even try adding some
141:49 - disabled color okay so suppose if the
141:52 - button is disabled then the disabled
141:54 - color is let's say
141:56 - this okay so now if the since the button
142:00 - is disabled our color will be this okay
142:02 - and so now you can see the difference
142:06 - okay so this was about rest button and
142:08 - there are particular scenarios where we
142:11 - need flat button and we need raised
142:13 - button okay so you know where to use
142:15 - what okay
142:17 - now the next type of button that we are
142:20 - going to discuss is
142:22 - outline button okay
142:25 - so first things first
142:29 - I'll create a Body Center
142:34 - okay and the center has a child and the
142:37 - child is outline button so as the name
142:40 - suggests this button doesn't have any
142:42 - background it just have a has an outline
142:44 - okay so first of all on pressed and on
142:48 - pressed I'll create Anonymous function
142:50 - that simply prints in my console
142:56 - button pressed okay and it has a
143:01 - child
143:03 - okay that is again an icons
143:06 - so that all the buttons have the same
143:08 - icon like all the buttons that we have
143:10 - discussed till now
143:11 - icons dot add okay over here it will
143:15 - only be icon and not icons and now if
143:18 - you save this you should be able to see
143:20 - and button that only has an outline and
143:22 - the background will be same as the
143:25 - entire screen and you can see that this
143:28 - is our button when it has a boundary
143:31 - okay so this is the default width and
143:33 - height of every button you can change
143:36 - the width and height by using a
143:37 - container and we have not studied about
143:39 - container but we will
143:41 - okay so if I press you can see button
143:43 - pressed so everything is working fine
143:47 - now the next feature that we have in
143:50 - this outline button is first let's
143:52 - format this okay the next feature is
143:54 - border okay so in an outline button the
143:57 - most significant part is the border so
144:00 - we have a property a parameter called
144:02 - Border Side okay and it takes a border
144:05 - side with check OK and it is used for
144:08 - Designing the Border okay so basically
144:10 - this Border Side is used for all the
144:13 - four sides like in general cases when
144:16 - you give a border to something then you
144:19 - need to give four borders for top bottom
144:21 - right and left but since it is an
144:24 - outline button and in button we want to
144:26 - have the same border throughout so a
144:29 - single Border Side will only be applied
144:31 - to all the four sides ok so Border Side
144:34 - takes a color okay that is the color of
144:37 - the border so let's say I give
144:40 - red okay so now you can see the color is
144:43 - something grayish now if I save this the
144:46 - Border should be in a red color okay and
144:49 - you can see that
144:51 - over here the border is in red color
144:55 - now the next property is width okay that
144:59 - means the Border width and it takes a
145:03 - H I think double yes it takes a double
145:05 - value and the default width is one okay
145:09 - so if I make it to 5
145:11 - point zero then it should then the
145:14 - Border should be a little bit thick now
145:16 - Okay so and you can see that okay so the
145:20 - border is a little bit thick
145:23 - now the next thing that we have is a
145:26 - style
145:27 - okay so style is basically just if you
145:30 - don't want to show the border so if you
145:33 - click on Border style none the Border
145:35 - will disappear and Border style solid
145:37 - that is the default type means the
145:39 - borders border will be there ok so
145:42 - border is there so I will try border
145:44 - style dot none and now my border should
145:47 - be
145:47 - gone okay so there's some error I am
145:50 - missing a parenthesis over here
145:53 - okay again I'll format it and save it
145:56 - and now you can see the border is gone
145:59 - and to bring the water back I'll simply
146:01 - just
146:02 - remove this or you can give it border
146:04 - solid
146:06 - so that would also be fine and this is
146:09 - our
146:11 - outline button now over here also if you
146:14 - want you can add on Long pressed and all
146:17 - the other functionalities all the other
146:19 - things that we have seen in
146:21 - flat button and the same goes for raised
146:24 - button all the parameters that we have
146:26 - seen in the
146:27 - flat button can be applied in both rest
146:30 - button and Border outline button okay
146:33 - thank you
146:36 - welcome to programming knowledge so in
146:39 - this video we are going to discuss about
146:41 - icon button okay so as the name suggests
146:44 - icon button is a button that has an icon
146:46 - on it okay so for a style comment this
146:50 - Center out
146:52 - ok then we will create another body
146:56 - that is a has a center okay and the
147:00 - child of the center will be
147:02 - a icon button okay
147:06 - so in icon button the two important
147:10 - things are icon and the on pressed
147:13 - method okay
147:14 - so first icon and icon takes an icon
147:17 - widget okay and then inside icon we have
147:20 - an icons in them and if you hit the dot
147:24 - then you could see all the available
147:27 - icons okay so I'll simply go for ADD
147:31 - ok so now if you save this you can see a
147:35 - Plus on the screen okay and now you can
147:39 - see the yellow line persists because I
147:42 - told there is two necessary things that
147:45 - is the icon
147:46 - and the on pressed
147:50 - function okay so for now I it will do
147:53 - simply print my print in the console
147:56 - print
148:02 - button pressed okay I'll format it
148:04 - and save it
148:07 - okay so now if I click on this you can
148:10 - see it is being logged in my
148:12 - console
148:13 - over here okay so now like all the other
148:18 - different types of button it also has a
148:20 - color okay and the color over here is
148:23 - for the icon and not for the background
148:25 - okay so color takes a
148:27 - colors enum color which we can get from
148:31 - color Cinema and for now I'll give it
148:33 - red
148:34 - okay now I should see my icon in red
148:38 - okay
148:40 - and then you can also disable it
148:45 - and give it any another
148:48 - disabled color also okay if you like
148:54 - something like that
148:57 - okay so then the next thing that we have
148:59 - over here is icon size okay and as you
149:02 - can see it takes a double value and if
149:05 - you don't give it then the default value
149:07 - is
149:08 - 24 okay so I'll make it 40.0
149:13 - and now we should see the icon size
149:17 - has increased okay now the next thing is
149:21 - Splash color okay so Splash color is the
149:24 - color that will be that will appear when
149:27 - we press the button okay so
149:30 - again I'll give colors dot let's say
149:32 - some other color green
149:35 - okay so now let's see the difference
149:38 - now you can see if I hold this green
149:40 - color is there okay green color comes in
149:43 - the background
149:45 - okay
149:46 - so this was one thing then
149:50 - there's a padding okay and if you don't
149:54 - give the padding then also there is a
149:56 - default padding of
149:57 - eight from all sides okay so as you can
150:01 - see over here padding takes and
150:04 - Edge insets
150:07 - type okay so I will write
150:09 - Edge in sets ok now it has a few
150:12 - variations okay dot all for all the four
150:16 - sides then it has symmetric that is
150:19 - horizontal and vertical and then only
150:21 - that is top bottom right and left okay
150:24 - we generally use these three ok so for
150:27 - now I will go with all okay and I'll
150:30 - change the value from 8 to let's say a
150:32 - significance change will be 20.0
150:36 - ok so now let's see now if we press it
150:39 - the
150:40 - Circle should be larger okay
150:43 - and you can see that
150:45 - okay so now the next thing that we need
150:48 - to know about icon button is
150:50 - tool tip okay so this is
150:53 - this actually takes a string that
150:55 - describes the functionality of this
150:57 - button okay because this button does not
151:01 - have a text so sometimes the end user
151:04 - might not know the use of it okay
151:07 - so this helps to know what that button
151:10 - is used for okay so I'll give a string
151:12 - let's say
151:19 - description of the button okay so now if
151:22 - we save this okay and if the user
151:25 - doesn't know what this icon is for so if
151:27 - we press and hold then you can see this
151:30 - toast type of thing appears okay and it
151:33 - has the tool tip written on it okay so
151:36 - in this way the end user will know what
151:39 - that button is therefore okay
151:42 - so now over here you can see inside this
151:46 - icon button if I try adding some color
151:49 - so it is not there okay some background
151:52 - color I didn't mean color but background
151:56 - color okay so any background color or
151:58 - feature is not there okay so generally
152:01 - uh icon buttons don't support specifying
152:04 - a background color or other background
152:06 - decorations because typically the icon
152:09 - is just displayed on top of parents
152:12 - widget background okay so if you want to
152:16 - add a background or a background color
152:18 - so out of many ways to do so we will
152:21 - only discuss about the method discussed
152:23 - in the flutter docs and that is to use a
152:26 - ink widget
152:27 - ok so I will comment this child out for
152:30 - now okay
152:32 - I am sorry I'll comment this out okay
152:35 - then this Center takes another child
152:37 - and the child is a ink widget okay so
152:41 - ink is basically a convenience which it
152:43 - is generally used for Designing purpose
152:46 - okay so we'll see a little bit about ink
152:49 - also in this video
152:50 - okay so first the child and the child is
152:54 - icon okay I'm sorry an icon button
153:00 - then two important things icon so I'll
153:04 - give an icon
153:05 - of let's say Android
153:08 - I can start
153:10 - Android and the next important thing is
153:15 - on pressed
153:17 - okay for now it simply prints the
153:19 - console
153:23 - button pressed okay now I'll format it
153:26 - and save it and there will be no
153:29 - significant change just the logo changed
153:31 - because I have used icons dot Android
153:34 - over here so the Android icon is
153:37 - appearing
153:38 - okay so now to add the background color
153:40 - this ink widget takes another
153:43 - parameter that is decoration okay and
153:47 - decoration takes a decoration type
153:50 - widget Okay so
153:52 - decoration is the collective widget and
153:55 - it has many sub widgets inside it like
153:58 - boxer decoration image decoration and we
154:00 - will discuss about all of them okay for
154:03 - now the most useful over here would be a
154:06 - shape decoration OK because our main
154:10 - objective is to give a circular shape
154:12 - and add background color to it okay so
154:15 - shape decoration now as it is a shape
154:18 - decoration a shape becomes necessary and
154:22 - we want the button to be circular let's
154:24 - say so I will write
154:26 - Circle border
154:29 - okay and then it takes no parameter and
154:32 - then the main part to add a color
154:36 - and let us say I add color
154:38 - blue
154:40 - okay now I'll format it and save it so
154:43 - now a blue color
154:45 - should be yes you can see that okay so
154:49 - like this you can add a background color
154:51 - to your icon buttons okay so now since
154:55 - you are using an ink you can do many
154:57 - other things also like you can give it a
155:00 - height
155:01 - okay you can also give it a
155:04 - width and you can also give it a color
155:07 - so you can see if I give
155:10 - colors dot blue over here instead of
155:13 - giving it inside the shape decoration so
155:16 - then now it will give me error okay so
155:19 - if I try saving this
155:20 - and you can see the compiler has thrown
155:23 - error over here and that is because in
155:26 - flutter whenever we use that decoration
155:28 - then we can't give color outside the
155:32 - decoration okay that means in this ink
155:34 - if we are using the decoration then this
155:37 - color should be inside this decoration
155:39 - okay if we might not be using this
155:42 - decoration and then we give color then
155:44 - that is not a problem but if we are
155:47 - using decoration then the color should
155:48 - be inside decoration and not outside
155:51 - decoration ok just wait for the build to
155:55 - finish
155:55 - okay and then you can see it is
155:58 - an icon and a square
156:01 - type of box okay so this is the default
156:05 - shape that is the square and now you can
156:07 - apply those height and width and see the
156:10 - changes so this was about icon buttons
156:12 - thank you
156:14 - welcome to programming knowledge so in
156:17 - this video we are going to discuss about
156:19 - the last type of button and that is
156:22 - floating action button okay so to add a
156:26 - floating action button after the body we
156:29 - have another named argument that is
156:32 - floating
156:34 - action button and it takes a floating
156:38 - action button widget okay and it has a
156:42 - child
156:43 - okay and the child also takes a widget
156:45 - and for now I'll just give an icon
156:48 - the I can say icons add and as it is a
156:52 - button it also needs an on pressed
156:55 - method and for now I'll simply
156:57 - print in my console
157:00 - Floating Action button
157:02 - pressed okay this should be inside
157:06 - quotes
157:11 - okay
157:13 - so now for style formatted and then if I
157:16 - run I should be able to see a floating
157:19 - action button on my screen okay and you
157:22 - can see that the floating action button
157:24 - with the plus icon appears at the bottom
157:27 - right of the screen and that is the
157:30 - place where the floating action button
157:33 - is placed in Android and as well as in
157:37 - iOS
157:38 - okay so now this also has all the same
157:42 - functionalities like other buttons that
157:45 - is it takes a child it has an entrest
157:48 - which takes a function that returns void
157:52 - okay then it has a background color okay
157:54 - and if you don't give any color then it
157:57 - will be blue which is the default color
157:59 - of any flutter application
158:01 - okay and you can also change it to any
158:04 - color you like
158:05 - okay like now I am changing it to red
158:08 - and you can see the color has changed to
158:11 - Red now one more thing that I wanted to
158:14 - tell you about colors that we can change
158:17 - the intensity of that color
158:20 - if we want okay so for that all we need
158:23 - to do is inside square brackets if we
158:26 - write 300 then the intensity would be a
158:29 - little bit less
158:31 - okay and you can see that
158:33 - now if I write 100 it will be lesser
158:38 - okay so I am missing a this over here
158:41 - let's run this
158:44 - and you can see the intensity has become
158:46 - more lighter now if I change it to
158:50 - 900 and the intensity will increase and
158:53 - the color will appear much darker okay
158:55 - so the standard if we don't write any
159:00 - number then the standard number that is
159:03 - by default use this 500 okay and you can
159:07 - see that
159:09 - then the next thing in Floating Action
159:12 - button is the tool tip okay and that is
159:15 - similarly uh
159:17 - string that is displayed when we long
159:19 - press on the button
159:21 - okay so let's say tool tip
159:25 - now let's run this
159:28 - now if I press and hold so I'm able to
159:31 - see the tool tip that is the text in my
159:34 - tool tip argument okay
159:38 - so this was also the basic about
159:40 - Floating Action button now the next
159:43 - thing about Floating Action button is
159:45 - that sometimes instead of just an icon
159:48 - we also want a text alongside means next
159:51 - to the icon okay so then we can use the
159:54 - extended feature okay so for that we
159:57 - just need to write extended and extended
160:00 - doesn't take a child but it takes two
160:03 - other two different arguments first is
160:06 - the
160:06 - icon and the second one is text sorry it
160:12 - would be label yes so it takes a label
160:14 - and label takes a widget so we will pass
160:18 - our text widget okay and let's let the
160:22 - text say add
160:24 - so now again I format it and save it so
160:26 - now I should see a plus
160:29 - and then add written next to it and you
160:32 - can see that okay so this is how we can
160:35 - modify our Floating Action button okay
160:38 - now the next thing that I missed while
160:41 - discussing about flat button and rest
160:44 - button was that they also have a
160:46 - extended feature okay so let's discuss
160:50 - about that so coming to Flat button we
160:53 - have uh we simply write flat button and
160:57 - Dot icon okay so now this means that the
161:00 - flat button will first have an icon and
161:03 - then a label okay not just a child that
161:06 - takes a widget but it takes two
161:09 - different things first one is icon and
161:11 - the second one is a label okay so let's
161:14 - give it an icon I can say I can inside
161:18 - an icon widget from the Icon Cinema and
161:21 - let's say Android for now
161:23 - okay and the label is
161:25 - let's see what the label takes and the
161:27 - label takes of widget so we will pass a
161:30 - text widget okay and it says Android
161:35 - okay and on pressed simply a
161:40 - console logging that is
161:44 - button
161:46 - pressed okay
161:48 - now let's format it and save it
161:51 - and let's see
161:53 - okay so now you can see we have the flat
161:56 - button that is for and it has an icon
162:00 - and then the text okay so now it is not
162:02 - as we expected because we are using a
162:05 - ink okay so we don't need an ink right
162:08 - now
162:10 - and just remove it from here
162:13 - now let's run this so now that bluish
162:16 - background should be gone okay so this
162:19 - is our flat button but in a extended
162:23 - form that is by using this icon
162:25 - Constructor okay now if I press this the
162:28 - functionality is same okay and the same
162:31 - goes for
162:33 - raised button okay so if I write
162:37 - rest button then it also has an extended
162:39 - Constructor that is the dot icon
162:42 - constructive and it takes two things
162:44 - icons and label and rest all the
162:46 - features are same so let's see this also
162:52 - and you can see that let's apply some
162:54 - color so that it is more evident
163:00 - I'm sorry
163:02 - colors not red formatted save it
163:08 - and you can see that this is our
163:11 - raised button but it now instead of
163:13 - having a single child widget it has two
163:16 - things first one is icon and the second
163:18 - one is
163:19 - text and the functionality is intact
163:22 - okay so this was all about buttons in
163:25 - the next video we should discuss about
163:28 - some other widgets thank you
163:31 - welcome to programming knowledge so in
163:34 - this video we are going to discuss about
163:36 - a convenience widget which is the
163:39 - container can by convenience with that I
163:42 - mean that it is there for the developer
163:44 - to make his job uh much more easier okay
163:49 - so let's see how we use that okay so
163:52 - over here instead of this button I'll
163:54 - change it to just a simple text okay so
163:57 - that it is easier for you to understand
164:00 - uh text that says
164:05 - programming knowledge
164:07 - okay
164:09 - and now if I save this I should be able
164:12 - to see the text programming knowledge on
164:14 - the screen and you can see as it is
164:16 - wrapped by a center the text is in
164:19 - Center okay so first I'll correct the
164:22 - spelling
164:29 - okay now to wrap in our container I'll
164:32 - use my refractor key binding that is
164:35 - Ctrl shift R and then wrap with a
164:38 - container okay and if you don't have
164:40 - this key binding you can simply create a
164:43 - container and in the child you can place
164:46 - our place the text widget
164:48 - okay so now our container now our text
164:52 - is inside our container but we see no
164:55 - significant change okay so now let's add
164:59 - our color to The Container okay so for
165:01 - that I write color
165:03 - color is colors dot red okay so now the
165:06 - container area will be red in color so
165:08 - let's see that
165:10 - okay and you can see the container is in
165:14 - red color okay now you yes you can also
165:17 - apply the same thing by adding a text
165:19 - Style
165:20 - over here but suppose sometimes you
165:23 - don't have a text widget and some
165:25 - different kind of widget then this
165:27 - container comes into action okay so you
165:29 - can apply a color like this
165:31 - now the next thing that you can do is
165:34 - you can apply margins okay so for
165:36 - margins you need to write margin okay
165:39 - and then margin takes another type of
165:42 - widget which is Edge insets so I write H
165:45 - in sets okay and then it has a few
165:51 - Constructors first one is all okay that
165:54 - means whatever value you give inside
165:56 - this it will be applied to all the four
165:59 - sides okay and then the next important
166:02 - one is only that means we give
166:04 - individual margins for all the four
166:06 - sides and the next one is symmetric
166:09 - which means we give a margin which will
166:11 - be applied to the horizontal
166:14 - sides and another margin which will be
166:16 - applied to the vertical sides okay so
166:19 - basically now we just have a single
166:22 - child so this margin we will not be able
166:24 - to see any kind of significant
166:26 - difference but the thing where we can
166:29 - see significant difference is padding
166:32 - okay so we can also apply padding to a
166:35 - container so we have a padding parameter
166:37 - and it also takes
166:40 - Edge inserts geometry okay so I'll use a
166:44 - named Constructor Edge inserts dot all
166:46 - okay and then this all takes a double
166:50 - value okay so over here instead of
166:53 - value I will make it 10.0
166:57 - now if I save this I should be able to
166:59 - see padding all over the
167:02 - and all the sides of the text and you
167:05 - can see that the red color has a little
167:07 - bit bulged out okay and that is uniform
167:11 - in all the four sides okay now over here
167:13 - instead of all if I use
167:16 - symmetric so if I use symmetric then I
167:18 - have to mention that which
167:21 - which value is for which symmetric
167:24 - design okay so for let's say that 10 is
167:27 - for horizontal so I need to write
167:29 - horizontal and then 10 okay and
167:32 - similarly we have a vertical and in
167:35 - vertical I apply 20 so now you can see
167:38 - that the spacing in the both the sides
167:41 - right and left should be 10 and the
167:43 - spacing and top and bottom should be 20
167:46 - so let's see that
167:48 - and you can see the spacing over here
167:52 - and here is lesser as compared to
167:55 - these spacing okay so this is when
167:58 - symmetric comes to play and the last one
168:01 - which is only okay so now only as I said
168:05 - it takes a different parameter for all
168:07 - the four sides so over here we can't use
168:10 - horizontal and vertical but instead of
168:12 - that we need to use
168:14 - Left Right top and bottom okay so I
168:18 - let's see
168:20 - left and I'll apply 10 to left
168:24 - I'm sorry
168:26 - then right okay and write 20.
168:30 - then we have top 30 to top and bottom
168:37 - 42 bottom okay and then I'll close this
168:40 - over here and the comma now I'll format
168:43 - this and save this so you can see now
168:45 - there will be different spacing in all
168:49 - the four different sides okay so this is
168:51 - how you can apply padding and you will
168:53 - see the same behavior when we use for
168:56 - the margin okay when we use this Edge
168:58 - and sets for margin but the difference
169:00 - will be that if we have a color inside
169:02 - the container then that color will be
169:05 - applied only when we use padding and not
169:07 - when we use margin because the basic
169:09 - difference between margin and padding is
169:12 - that in margin we separate different
169:16 - widgets from each other and in padding
169:18 - we add spacing to a widget okay so over
169:22 - here we are adding spacing to that
169:24 - widget that means the size of that
169:26 - widget is increasing and our widget is
169:28 - container and in container we have
169:30 - applied the red color so in the entire
169:32 - spacing we can see the red color but
169:35 - instead if we were using margin then
169:37 - that meant that we are separating this
169:40 - widget from other widgets with uh some
169:43 - value that we have given over here so
169:45 - then the color
169:46 - if we have a color in the container
169:48 - would be confined to the exact area as
169:51 - it was before applying the margin okay
169:53 - so I hope this concept is clear now
169:56 - another small thing about this padding
169:58 - and margin is that you will see
170:00 - generally developers add a const over
170:03 - here
170:04 - okay so const stands for constant and
170:07 - the basic use of adding const over here
170:11 - is that it doesn't get build when we hot
170:14 - reload the program okay which means that
170:16 - if you are running an application and
170:19 - you open a page so if you open a page
170:23 - then this build method gets called okay
170:25 - now suppose if you are using an app and
170:28 - you have navigated to other page and
170:30 - when you are coming back to that page so
170:33 - instead of building all these things if
170:36 - it is a const over here so then this
170:38 - will not be builded again okay and if it
170:40 - is not being builded it will save little
170:42 - bit of time and the navigation will be
170:44 - faster the app interface will will be
170:48 - more smoother okay so you can use
170:50 - constant and you should use constant
170:53 - whenever you use paddings or margins
170:57 - now the next thing that we are going to
170:59 - discuss about is decoration okay so
171:02 - every container has a decoration okay
171:05 - and this decoration takes a box
171:08 - decoration widget okay so Decor is
171:10 - decoration is the root and it has many
171:13 - sub branches okay so over here in
171:16 - container the most suitable one would be
171:19 - box container okay
171:23 - I'm sorry it will be box decoration okay
171:27 - so in box decoration now if we have box
171:30 - decoration and I run try running this
171:32 - then it you can see it is giving me an
171:35 - error over here okay and you can see the
171:37 - error is also in our screen and that is
171:40 - because in flutter whenever we have a
171:42 - decoration then the color should be
171:45 - inside decoration
171:48 - that means this color red should not be
171:52 - over here but it should be inside this
171:54 - box decoration so over here in color
171:56 - I'll write
171:58 - colors dot red okay so now if I run this
172:02 - the error should be gone and I should be
172:04 - able to see the same exact thing as I
172:06 - was seeing before okay so you can see
172:09 - okay so padding is used when we only
172:11 - want to apply a padding okay and if
172:14 - anything other than padding then we need
172:16 - to go for container okay so this was
172:20 - about container and padding thank you
172:23 - welcome to programming knowledge now the
172:27 - next thing about decoration is that you
172:30 - can Define the shape of our container
172:33 - okay so by default the shape is
172:35 - rectangle if you want you can also make
172:37 - it to a circular type okay so for that
172:41 - we have a shape and the shape also takes
172:44 - an enum that is box shape okay and if
172:47 - you click on box shape dot then you can
172:50 - see we have two options one is rectangle
172:52 - and the other one is circle so if I
172:55 - change it to Circle and then save it so
172:58 - then you can see a few changes okay so
173:00 - it has became circular but you can see
173:03 - the text has moved out of the circle
173:06 - okay so that could be fixed by using
173:09 - padding and stuffs like that okay for
173:11 - now I'll make a change it back to
173:13 - rectangle
173:17 - now if I run this I should see the same
173:19 - thing again
173:20 - okay and I'll also remove this padding
173:22 - I'll make it all
173:25 - okay and then all the sides
173:28 - it should be 10.0
173:31 - I'll format it save it
173:35 - and you can see it is fine now sometimes
173:38 - what we require is to have rounded
173:42 - Corners in our rectangular shapes okay
173:45 - so for that we have another parameter
173:48 - which is inside this box decoration and
173:51 - that is border radius okay so border
173:54 - radius and this border radius takes a
173:58 - border radius geometry widget okay so
174:01 - for that we will use a named Constructor
174:03 - of Border radius so I'll write border
174:06 - radius
174:08 - and then circular okay so circular means
174:11 - the radius will be circular and inside
174:13 - circular as it is a circle we need to
174:16 - give a radius so I will give a radius of
174:18 - 10.0
174:19 - okay let us say
174:21 - formatted save it
174:24 - and you can see the corners have become
174:27 - a little bit
174:29 - rounded okay so this is how you can
174:31 - design
174:32 - things using the help of container okay
174:34 - so if you want to design any widget we
174:37 - can we simply surround it with a
174:38 - container and then add all the designs
174:40 - to The Container now we can also specify
174:44 - a height and width for a container okay
174:47 - so let's say I want to specify a width
174:49 - okay and I can specify of its net say as
174:53 - 500 okay now you can see the color of
174:56 - the container might have increased okay
174:59 - and you can see that
175:00 - now suppose you don't know what is the
175:04 - length of the screen and you want to
175:06 - take the entire length as the width of
175:08 - the container okay so then what you need
175:10 - to do is you need to write
175:13 - double
175:16 - dot Infinity okay so that means it will
175:18 - take all the space that is available now
175:21 - if I save this it should be same
175:24 - okay you can see that
175:26 - now you can see as we have taken the
175:29 - entire width the text has automatically
175:32 - moved to the start okay but that is not
175:35 - the requirement sometimes okay so now
175:37 - suppose if you want this text to be
175:39 - displayed in the center okay so then
175:41 - I'll come back to the text widget this
175:45 - part I have left when I we were
175:47 - discussing about text so we have a thing
175:49 - called text align okay so now in text
175:52 - align it takes a text align enum okay
175:55 - now if I you can see all the options so
175:58 - if I click on Center so now the text
176:01 - would be in the center
176:03 - and you can see that similarly if I make
176:06 - it end
176:10 - then the text should be in the end and
176:13 - that is the case
176:14 - Okay so
176:16 - this is how we apply width to a
176:19 - container and similarly we have the
176:21 - height
176:22 - okay height
176:24 - and then height Also let's say for not
176:26 - double dot Infinity
176:29 - okay now if I save this the entire body
176:31 - area should be red and you can see
176:35 - the rounded corners at all the four
176:38 - sides okay and now over here this is the
176:41 - perfect time to use a margin suppose I
176:43 - want to leave a margin from all the four
176:45 - sides okay so I'll write margin
176:50 - const
176:51 - and it takes an edge insect for now
176:54 - let's say all and 20.0
176:57 - so let's see what happens
177:00 - and now you can see from all the four
177:02 - sides margin of 20 has been left okay
177:06 - and as I said while discussing about
177:08 - padding when we add padding the color is
177:11 - also there and when we use margin the
177:13 - color vanishes okay means the entire
177:16 - decoration vanishes not just the color
177:19 - but the entire decoration
177:22 - okay so this was about container now
177:25 - another thing that we have in container
177:27 - is constraints okay and this constraint
177:30 - sticks a box constraints
177:33 - okay and then in box constraints we
177:35 - provide the constraint that like suppose
177:38 - if we have a
177:41 - screen that whose the size we don't know
177:44 - okay but we want to confine the height
177:46 - of the container then we can say the
177:48 - maximum height till which the container
177:50 - will extend is
177:52 - 300.0 okay and now let's save this and
177:55 - see what happens
177:57 - and you can see the maximum height is
177:59 - 300 okay no matter how much height is
178:03 - available in the screen the container
178:05 - will never take height more than 300
178:07 - okay even though we have allowed the
178:09 - container to take a height of infinity
178:11 - that means all the space available but
178:15 - still it will only take a height of 300
178:17 - that is the power of constraints
178:19 - okay and similarly we have a Min height
178:22 - okay that means this is the minimum
178:24 - height it will take the
178:26 - container can't take a lesser height
178:28 - than this okay so for now let's say 100
178:32 - okay and it will give you an error if
178:34 - you give the maximum height less than
178:36 - minimum height okay so I'll format it
178:38 - and save it and now let's see what
178:40 - happens and nothing happens that means
178:43 - everything is same but now if we try
178:47 - removing this height from here so you
178:49 - can see still there will be a 100.0
178:53 - height okay so this is the 100 height
178:55 - okay 100.0 height
178:58 - okay now if I again add the height
179:02 - as Infinity
179:04 - solid double dot Infinity
179:09 - so then it should again take the max
179:11 - height
179:12 - okay and it is taking the max height
179:14 - because we are providing it a height
179:16 - which exceeds Max height
179:18 - okay so this was the thing about height
179:21 - and similarly we have for width okay so
179:24 - suppose if I say Max width should only
179:27 - be 50. okay that means we can't have a
179:30 - width more than 50. so now let's see
179:34 - what happens and you can see this is the
179:36 - width
179:37 - okay only 50.0 pixels
179:41 - okay and similarly this is the max with
179:43 - those so similarly we have our main
179:45 - width okay and all the properties like
179:48 - if we remove the double dot Infinity
179:50 - then it will take the Min width and if
179:53 - we have the double dot Infinity for
179:55 - width then it will take the max width
179:57 - okay so this is the power of constraints
179:59 - and this is very useful when you want to
180:02 - confine a widget to a particular shape
180:05 - to a particular size
180:07 - okay so this was about uh container this
180:10 - is how we use container with all the
180:12 - widgets to apply size to
180:17 - provide a background color to provide a
180:19 - little bit decoration so this is where
180:21 - container comes into action okay now
180:24 - along with container we also have
180:26 - another convenience widget but that
180:29 - convenience widget is very confined very
180:31 - restricted we means we can use it only
180:34 - for one purpose okay so for now I'll
180:37 - remove all this decoration and thing
180:40 - once I'll remove the entire container
180:46 - okay and I'll format it save it
180:49 - so now again our text will be there in
180:52 - the center now the next widget which I
180:53 - was talking about is padding
180:57 - so as the name suggests it can only have
181:01 - a padding okay and you can see as the
181:03 - padding comes it already has a const and
181:06 - which justifies that it is also
181:10 - it is also recommended by the flutter
181:12 - team okay so now you can see as it is a
181:15 - padding we can only apply the padding
181:17 - and I'll make it let's say 20 and there
181:20 - will be no significant difference
181:22 - but still this is a convenience widget
181:25 - which we may need sometimes okay okay so
181:28 - padding is used when we only want to
181:31 - apply a padding okay and if anything
181:33 - other than padding then we need to go
181:35 - for container okay so this was about
181:38 - container and padding thank you
181:42 - welcome to programming knowledge so in
181:45 - this video we are going to discuss about
181:47 - images
181:48 - and the first type of image that we are
181:51 - going to discuss about is the asset
181:53 - image and as the name suggests the image
181:56 - will be an asset okay and an asset to
182:00 - the project means that the images in the
182:03 - folder where the project is or in the
182:05 - root where the project is so for that
182:08 - first I need to add a image in my root
182:12 - folder okay so for that I'll create a
182:13 - separate folder and I'll call it asset
182:17 - okay and then I'll paste any simple
182:20 - image okay so for now I'll this image
182:23 - seems fine I'll add it to the asset
182:26 - folder okay so the images now in our
182:29 - root
182:31 - directory of the project okay then the
182:34 - next thing that we need to do with every
182:37 - asset image to use it in the code is to
182:40 - add it in our pubspec.tml file okay so
182:44 - to add if you look you will see some
182:47 - commented code and you can see it over
182:49 - here okay so first we write assets and
182:53 - then the location of that image okay so
182:56 - I'll simply comment this out
182:58 - okay
183:00 - and then over here instead of this
183:04 - it will be asset and then the file name
183:08 - which is in this case reshock dot PNG
183:14 - sorry and then we need to save this and
183:16 - then you can see automatically over here
183:19 - the flutter pop get command will start
183:22 - running
183:24 - so once it is done we can start using
183:26 - the image in our code okay so for that
183:31 - in my my home app I'll remove the body
183:35 - okay for now
183:38 - and I'll create another new body okay
183:41 - and the body is a image
183:46 - and Dot asset okay so we are using the
183:49 - named Constructor of image okay and we I
183:53 - will surely post a video on Constructors
183:56 - class and objects in Dart okay so for
183:59 - now image is a class and it has a named
184:02 - Constructor that is dot asset okay so as
184:07 - it is an asset we can say it first takes
184:10 - the
184:11 - string name okay which is the required
184:13 - file which is the required parameter I
184:15 - am sorry okay so I'll pass the name and
184:19 - we simply just can't
184:21 - pass reshuff.png okay we also need to
184:25 - pass the folder because we have kept it
184:28 - in a separate folder and as I told asset
184:31 - refers to the
184:33 - data which is in the root root folder
184:36 - okay so I'll write
184:39 - asset and restart dot PNG okay so now if
184:43 - I save this I should be able to see my
184:44 - image on my mobile screen okay and you
184:47 - can see that
184:49 - okay so this one this is the image that
184:52 - I have added and the first thing that
184:55 - people tend to forget is to not add it
184:58 - in the prospect.tml and then they
185:02 - struggle a lot to fix their okay so that
185:05 - is one important thing that you should
185:07 - never neglect
185:08 - okay so then if we added the file name
185:12 - we added the image name first then the
185:15 - next property that we can add is height
185:19 - okay so our height will be of let's say
185:21 - 20.0
185:24 - height takes a double value so that's
185:26 - why I have added a DOT zero if I will
185:29 - not add it then also it is fine but
185:31 - adding the point 0 is a better practice
185:34 - okay so I'll save this and now my image
185:37 - size should have shrinked okay and you
185:41 - can see it has shrinked a little bit too
185:43 - much okay because the height is way too
185:46 - less
185:46 - I'll make it 100
185:51 - and you can see the image has images
185:54 - height has decreased and since the
185:56 - height has decreased the width has also
185:59 - decreased
186:02 - and as we are talking about width we
186:04 - have a property called width okay and we
186:07 - can give any value we want okay so for
186:09 - now suppose I give 50
186:11 - okay then uh since 50 is the smaller one
186:15 - then the scale right now will be 50.
186:17 - okay and you can see the image has
186:19 - shrinked even more
186:22 - okay so these were a few basic things
186:24 - now the next thing that we are going to
186:26 - discuss is the frame Builder so
186:30 - as the name suggests it builds the frame
186:33 - in which the image widget will be shown
186:36 - so frame builder then it takes uh it
186:39 - returns a method which has four
186:41 - parameters
186:42 - first one is build context okay so our
186:45 - build context will get
186:48 - uh let's call it context
186:51 - then the next thing is
186:54 - widget child
186:56 - and then in frame
186:59 - and
187:01 - Bowl was
187:03 - synchronously
187:07 - loaded
187:09 - okay I'll give a
187:11 - comma over here and then format it okay
187:14 - so now let's discuss what are these
187:17 - parameters over here so the build
187:19 - context Returns the current context okay
187:22 - then the widget child so it contains the
187:26 - default image widget which is guaranteed
187:29 - to be non-null because if we create an
187:33 - image asset then this is the required
187:35 - field we cannot neglect it we need to
187:37 - give this field and since we give this
187:39 - field there is some image that is played
187:42 - on the screen and therefore this child
187:45 - will never be null okay then the next
187:48 - thing is into frame so it contains the
187:51 - frame index it is of no use right now it
187:55 - basically comes in play when we display
187:56 - a gif or a video because what basically
188:00 - happens in a video or GIF is that the
188:03 - image frame keeps on changing
188:05 - continuously at very minute interval
188:08 - okay so when we want to change the frame
188:11 - in between a video or a gif then this
188:14 - Frame
188:14 - comes to play okay for now the frame
188:18 - value is null and as soon as we build it
188:20 - its value will become zero
188:24 - and for GIF or any other multi-frame
188:27 - image it will increase by one every time
188:29 - any new image is shown
188:33 - and when something is not important we
188:37 - change it with a underscore
188:40 - so that means it is just a placeholder
188:43 - it has no significance in the function
188:44 - but still we need it in the function
188:48 - definition okay then the next thing is
188:51 - was synchronously loaded
188:55 - okay so before discussing about this we
188:57 - need to understand what is the
188:59 - synchronous and the difference between a
189:02 - synchronous
189:03 - so for that I have found a Blog which
189:06 - beautifully explains about both and the
189:10 - difference so you can have a look at it
189:12 - later okay for now in simple terms what
189:15 - synchronous means is that the
189:17 - transmission of data was done
189:19 - immediately and as we are using it in
189:23 - images image widget so over here it
189:26 - stands for whether the transmission of
189:28 - asset image to the widget was done
189:31 - immediately or not so it is generally
189:34 - true but if it is not then you can
189:36 - display some other widget until it until
189:39 - the image is being loaded like a
189:41 - progress bar or stuff like that okay so
189:44 - these were about the four parameters now
189:46 - inside this function we need to return a
189:51 - widget that will be the frame of our
189:53 - image okay so for now
189:55 - I'll remove this okay and save this
190:03 - okay so we are getting an error because
190:05 - I have not yet passed anything I'll
190:09 - comment this out for the moment
190:14 - okay and then save it and run it again
190:18 - okay so you can see our images like this
190:21 - and now when we use frame Builder we
190:25 - return our widget that contains the
190:27 - image widget okay that acts as the frame
190:30 - for the image widget so for now let's
190:33 - just
190:34 - give some padding to it okay so return
190:37 - of padding that has a padding and the
190:41 - padding is first const
190:43 - Edge inserts
190:45 - all and from all the sides I want to add
190:48 - 10.0 okay and the child is our widget
190:53 - child which we get over here okay that
190:56 - means the current uh image widget okay
190:59 - then I'll format it and save it
191:04 - so now you can see the image has padding
191:08 - from all the sites okay so to make the
191:12 - change significant I'll change it to 100
191:15 - okay
191:16 - and you can see the image has
191:18 - automatically left 100 pixels padding
191:20 - from this side from top and even from
191:23 - bottom and right but it is not
191:25 - significant in the screen as we don't
191:26 - have any other widget okay now we can
191:30 - also change it to container and add some
191:32 - color and see if it works fine or not
191:35 - okay so container then the container has
191:38 - a color
191:40 - let's say colors dot red
191:43 - okay I'll save it
191:46 - and you can see the container is red in
191:49 - color and it has 100 pixel padding from
191:51 - all the four sides
191:55 - okay so now you can also try some
191:58 - different
191:59 - things in this if you want so the first
192:03 - is decoration for decoration we have a
192:06 - box decoration we have discussed all
192:08 - this in the previous videos okay and
192:11 - then since we are using our decoration
192:13 - we can't have a color outside
192:16 - okay it is like of a quick
192:19 - recapitulation
192:21 - so I'll paste the color over here and
192:24 - then I will also like to change the
192:26 - shape
192:27 - so the shape is in the box shape you
192:31 - know and I'll make it Circle okay now
192:34 - again formatted save it and let's see
192:36 - what happens
192:38 - and you can see the padding has become
192:40 - circular okay
192:42 - so this is how we use a frame Builder
192:46 - Okay so
192:47 - frame Builder is a very important thing
192:50 - when we deal with images and it is a
192:53 - thing where people generally make
192:55 - mistake so I hope all the concepts were
192:58 - clear till now we'll continue in the
193:00 - next video thank you
193:02 - welcome to programming knowledge so in
193:05 - this video we are going to continue
193:07 - where we left in the previous video we
193:09 - were discussing about images and to be
193:12 - more specific asset images and the last
193:14 - thing that we saw was the frame Builder
193:17 - okay so in this video we will discuss a
193:19 - few more properties of this image asset
193:22 - okay so for now I'll remove this
193:26 - height
193:27 - and the frame Builder okay and I'll
193:30 - surround this image with a container now
193:34 - you might think that if I wanted a
193:37 - container then I could have simply sent
193:39 - it returned it in my frame Builder but
193:42 - why am I surrounding this image asset
193:44 - with a container instead so the reason
193:47 - is when we return something from the
193:50 - frame builder then the entire frame acts
193:53 - as the image widget okay so if I apply
193:56 - any property to the image then that
193:58 - property will be applied to the entire
194:00 - frame which might be the container in
194:03 - our case so to avoid such type of
194:06 - situation we surround the image with a
194:08 - container okay so now for now I'll give
194:11 - the height and width to Infinity okay
194:14 - how it is
194:17 - double dot Infinity
194:20 - and the width is also
194:23 - double dot Infinity
194:26 - okay then I'll format it save it
194:30 - and you can see our images in the center
194:33 - okay so now the property that we are
194:36 - going to discuss about is fit okay so
194:39 - fit decides how to inscribe the image
194:43 - into the space allocated during layout
194:45 - so this is the function of fit okay so
194:48 - there are there is a enum that has all
194:51 - the types of fit and the enum is as the
194:54 - name as you can see in the suggestion it
194:56 - is box fit
194:58 - okay so the default type is contained
195:01 - okay that means the entire image will be
195:04 - in the container and no part will be
195:06 - clipped out
195:07 - okay so let's save this and see
195:10 - and you can see no significant change
195:12 - but you can also see that no part is
195:15 - clipped out we can see the entire
195:17 - circular thing in the screen okay so
195:20 - then the next type is cover
195:24 - okay so that means it will cover the
195:27 - entire container okay so let's save this
195:30 - and see
195:32 - and you can see it has covered the
195:35 - entire container that means the entire
195:37 - height and the entire width okay and if
195:41 - some part is clipped out then it will be
195:44 - clipped out only okay so it doesn't care
195:46 - if the image is being clipped out or not
195:48 - but the entire screen will be filled
195:51 - with the image
195:53 - okay then the next
195:55 - type is fill
195:57 - okay that means it will fill the
195:59 - container so let's see
196:02 - and you can see the image is neither
196:04 - clipped out and nor any space is left it
196:07 - took took the entire height it took the
196:10 - entire width but no part of the image
196:13 - was clipped out so what happened was it
196:16 - got extended and it got stretched in
196:20 - some directions so as to fit the
196:22 - requirements okay now the next thing is
196:27 - fit height okay so as the name suggests
196:30 - it will fit the height and it will not
196:33 - care about its width
196:35 - so let's see
196:37 - and you can see the height has been all
196:40 - the height has been taken up and the
196:43 - width is also taken because the image is
196:45 - big but you can see some part of the
196:48 - image got clipped on both the horizontal
196:51 - sides and that is what the flood flutter
196:54 - will not care about because right now we
196:56 - are using fit height so all it cares
196:58 - about is the height okay and similarly
197:01 - we have fit width okay so now all it
197:05 - will care is about the width and
197:07 - whatever happens to height flutter will
197:09 - not care okay so let's see and you can
197:11 - see the entire width is taken by the
197:14 - image and
197:15 - there is no significant change in the
197:17 - height but if the image was uh
197:20 - horizontally long image then you could
197:22 - see the significant change
197:24 - okay so this was fit width then the next
197:28 - one is none that means no change okay so
197:31 - it is equal to if it equal to null okay
197:34 - so the same image as it was before we
197:37 - had fit
197:39 - then the next part is scale down okay so
197:42 - what this basically does is it will
197:44 - shrink the image if required but it will
197:47 - never stretch the image okay so let's
197:50 - see
197:53 - and this also so shows no significant
197:56 - change but if we had some image that
197:59 - exceeded the length or the width then it
198:02 - would have automatically shrinked okay
198:04 - so to understand better we you can go to
198:07 - the official flutter box with enum and
198:11 - over there you can see with very good
198:13 - examples how these all work okay so the
198:16 - contain it contains the Box okay and it
198:20 - changes the its shrinks or increases the
198:25 - size of the child as required as needed
198:28 - okay and in box fit it covers the entire
198:31 - space in fill it it stretches such that
198:35 - all the spaces are filled and fit height
198:38 - it only cares about the height in fit to
198:40 - its it only cares about the width in
198:43 - none you can see no changes happening
198:46 - irrespective of the shape and size of
198:48 - the container and then is scaled down
198:51 - and you can see as the size changes its
198:54 - height is shrinking okay
198:57 - so this was about this fit thing okay so
199:01 - I'll remove it for now
199:03 - and save it
199:06 - so now we got the image back in the
199:09 - center now the next thing that we are
199:11 - going to discuss about is alignment
199:14 - okay so as we have seen in the text
199:18 - in the text widget over there we had a
199:20 - text align but over here we have a
199:23 - alignment enum
199:26 - okay and over here these are the options
199:29 - that we have so let's try top Center
199:32 - and then the image should be pushed to
199:36 - the top okay and you can see that
199:38 - similarly we have
199:40 - bottom center
199:44 - and the image is pushed at the bottom
199:46 - now if we had a image which had uh the
199:51 - width less than the
199:53 - screen size then we could also try
199:56 - bottom left and bottom right and the
199:59 - image will accordingly
200:01 - be placed at those positions
200:04 - okay so then after alignment the last
200:08 - thing that I want to discuss is repeat
200:11 - okay so sometimes you could see that a
200:14 - single image is being repeated in all
200:16 - the places okay means like in the entire
200:18 - screen of single images is repeated uh
200:21 - in column wise also and in rows wise
200:24 - also so that can be done using this
200:26 - repeat argument okay and it also has a
200:30 - image repeat enum okay and the first one
200:33 - let's say try repeat okay so that means
200:36 - that the image will be repeated in all
200:39 - the place available in the screen which
200:42 - is unused okay so let's see
200:45 - and you can see the images repeated over
200:48 - here because this was the unused space
200:50 - and the same goes for this bottom part
200:53 - because this was the unused space okay
200:56 - so this is what we can do with repeat
200:58 - now the next type is repeat X and it is
201:02 - for the x-axis that means the width so
201:05 - let's see
201:06 - and since we had no free space in the
201:09 - width so no repeat no repetition has
201:12 - taken place okay now let's try for
201:15 - repeat y okay that is for the y axis or
201:18 - the height
201:21 - so now you can see the same repetition
201:23 - took place as we saw in repeat okay so I
201:27 - hope you are able to relate all all
201:29 - these things together okay and then the
201:32 - last I press no repeat okay that means
201:35 - no repeat which is equal to null
201:38 - okay so you can see that
201:41 - okay so this was about image asset in
201:43 - the next video we will discuss about
201:45 - image Network
201:46 - thank you
201:48 - welcome to programming knowledge so in
201:51 - this video we are going to discuss about
201:53 - class and objects in Dart okay so if you
201:57 - don't know what is class and object you
201:59 - can refer to this website it has
202:01 - explained beautifully over here you can
202:03 - see we have a class car okay and then
202:06 - these objects are derived from this
202:09 - class okay so generally till now
202:11 - whatever we have done like whenever we
202:14 - wanted to store some value we created a
202:16 - variable and then that variable
202:18 - generally had some primitive data type
202:21 - like string integer and more like that
202:23 - okay but suppose if I want to have a
202:27 - collection of these primitive data types
202:30 - and refer to them as a single object
202:32 - then we use this class and objects okay
202:35 - so you can read more about this okay so
202:38 - back in our DOT pad to create a class we
202:43 - have a keyword class okay and then we
202:46 - write the class name over here I am
202:49 - writing point that is a very common
202:51 - problem that we see okay it means a
202:53 - common competitive coding question
202:56 - okay so I'll have two variables inside
203:00 - this
203:00 - N Text and end y okay both are primitive
203:04 - data type and any variable that is
203:07 - declared inside a class is called as
203:10 - data members okay so now uh it is
203:15 - recommended that whenever we create a
203:17 - class and have some data members then we
203:20 - should initialize it okay and to
203:23 - initialize we have a special function
203:26 - inside a class called Constructor which
203:29 - is used for initializing all the data
203:33 - members inside a class okay so now this
203:36 - Constructor doesn't have any return type
203:38 - and it has the same name as we have of
203:41 - the class okay so over here the class
203:43 - name is point
203:44 - then the Constructor name will also be
203:46 - point
203:48 - okay then we have created this method
203:52 - now inside this method what I am going
203:53 - to do is I'm gonna initialize my data
203:56 - members okay so for that I'll write X is
204:00 - equal to 0 and Y is equal to 0.
204:05 - okay so this is done
204:06 - Now to create a object of this class
204:10 - over here I will simply write the class
204:12 - name and then p means that is the object
204:15 - name which is very similar to how we
204:18 - created any other variable like int X so
204:22 - that means we have created a variable X
204:24 - of type end okay and over here if we
204:27 - give VAR that means that was also
204:30 - correct and so is the case over here
204:33 - even if we write v a r over here this
204:35 - will also work this is absolutely fine
204:37 - but for the timing I am gonna use Point
204:41 - okay so that it is
204:43 - clearer to understand okay so now to
204:46 - access any
204:49 - data members we simply write print
204:52 - P Dot X
204:54 - okay and let's try printing it so 0
204:56 - should be printed
205:01 - okay so you can see we got an error over
205:05 - here and the error is because we have
205:07 - just
205:09 - created the object but we have not
205:12 - initialized it okay so to initialize any
205:15 - object we need to write
205:18 - the
205:20 - class name and then parenthesis which is
205:23 - basically calling this Constructor okay
205:25 - that means as soon as this point P will
205:28 - be created then this point method will
205:30 - be called which is nothing but our
205:32 - Constructor so then our values will be
205:35 - initialized and the error will be not
205:37 - there so you can see the error is also
205:39 - null error that means the value is not
205:42 - assigned some proper quantity like this
205:45 - X and Y are null they don't have any
205:47 - value stored in them then we are that's
205:49 - why the compiler is not able to print
205:51 - the values
205:52 - okay so let's try running this now
205:57 - so now you can see the output is 0 for X
206:01 - as we have stored 0 in X okay so now if
206:03 - I change it to 10 then the output should
206:06 - be 10.
206:11 - and you can see that okay so now I'll
206:12 - remove this function for now
206:15 - we don't need function right now okay so
206:19 - this is one type of Constructor now we
206:21 - can have some parameters assigned also
206:24 - like suppose I am giving it a value in a
206:29 - okay and now over here when I call this
206:32 - Constructor now I need to pass this
206:34 - value a okay so let's say I pass 200
206:38 - okay so now over here what will happen
206:41 - that I am assigning the received value
206:44 - at a to this variable X so now if I
206:48 - print X I should be able to see the
206:50 - value that I have sent from here so
206:52 - let's see
206:55 - and you can see 200 is being printed
206:57 - similarly you can try for
207:01 - print P dot y
207:06 - now if I run this I should be able to
207:09 - see 200 and 0.
207:12 - okay now the next thing that we are
207:14 - going to see is uh like suppose I have
207:18 - the data members as X and Y and the
207:21 - parameters I am taking is also X and Y
207:24 - okay so like for first I need to prepare
207:27 - another parameter because over here I am
207:29 - expecting two parameters
207:31 - so now if I write if I want to assign
207:34 - this x value to this x conventionally I
207:38 - should write X is equal to X and same
207:41 - goes for y I should write Y is equal to
207:44 - Y so now at this point the compiler will
207:48 - be confused as to which
207:51 - X refers to which type of data like is
207:54 - this x the data member or the positional
207:56 - argument that we have over here and the
207:58 - same for this x that whether it is the
208:01 - positioner argument that we get over
208:04 - here or the data members okay so in such
208:08 - scenarios we have a special keyword
208:11 - called this so if I write this dot X and
208:15 - this dot y so that means if it is
208:19 - written this dot X that means I am
208:21 - referring to the data member of this
208:24 - class okay so if I write this inside
208:27 - this point class that means my this is
208:29 - referring to this class and this has a
208:33 - variable y has a data member X which is
208:36 - this one so in this
208:39 - data member this positional argument
208:41 - will be stored okay so now let's try
208:44 - removing this and see what is the error
208:53 - and you can see the it is showing null
208:55 - that means no value is assigned because
208:58 - over here these both are referred as the
209:02 - positional arguments okay so if I add
209:05 - this dot y then the error should be gone
209:08 - okay I should be able to see 200 and 100
209:11 - okay so you can see that so this is when
209:15 - this keyword comes to play okay so now
209:19 - this is one method to create a
209:21 - Constructor there is a simpler method
209:23 - that dot provides okay I'll remove this
209:26 - and I'll simply write Point okay and
209:30 - then inside this
209:31 - this dot X comma this dot Y and then a
209:36 - semicolon okay so this means that when
209:38 - we call the Constructor the value that
209:40 - we store over here will be stored in the
209:44 - parameter in the named argument that we
209:46 - have over here and which is eventually a
209:48 - data member so the value received over
209:52 - here will be directly saved in this data
209:54 - member okay so now if I run this we will
209:57 - not see any error and the
209:59 - answer will also be the same but you can
210:02 - see the lines of code has reduced and it
210:04 - is a much more simpler way okay so this
210:08 - is it
210:09 - now after that the next thing that we
210:13 - have in a class is a function okay so
210:15 - our class generally comprises of three
210:17 - things uh data members Constructor and
210:21 - some functions and the functions which
210:23 - are inside a class are called member
210:25 - functions and sometimes we also have a
210:28 - Destructor okay so if you don't know
210:30 - about a Destructor then as we have
210:32 - Constructor which is called at a star as
210:35 - soon as the object is initialized
210:37 - Destructor is called as soon as the
210:40 - execution of that object ends okay so we
210:44 - are not gonna discuss about the
210:46 - destructor because that is not
210:48 - used a lot but if you want to learn you
210:51 - can go to the official documentation of
210:53 - Dart okay so now we are going to create
210:56 - a member function okay so I'll first
210:59 - simply create a simple member function
211:01 - that will simply print some data okay
211:03 - and it will have it will not return
211:05 - anything so the return type is void and
211:08 - the method name is print data
211:10 - and since it is a one-liner function
211:13 - I'll write it like this print
211:15 - and then I'll use string interpolation
211:20 - okay and
211:21 - what so now if I run this I should be
211:25 - able to see
211:26 - 100 plus 200
211:28 - 200 plus 100 I'm sorry
211:31 - okay
211:33 - so
211:34 - you can see the output is not as we
211:37 - expected and that is because over here I
211:39 - have not called the method that is my
211:42 - mistake okay so to call any member
211:45 - function we first need to write the
211:46 - object name a DOT and then that member
211:50 - function okay
211:51 - so now let's try running this and then
211:53 - we should be able to get to the output
211:56 - okay and you can see the first to print
212:00 - statements give these two output and the
212:03 - last is this
212:04 - statement which is executing this
212:07 - function and over here we have the
212:09 - Sprint statement X Plus y so we are
212:11 - getting the value of x plus the value of
212:14 - y
212:15 - okay so this were the basics about class
212:18 - and objects in the next video we will
212:21 - discuss little bit more about the class
212:23 - and objects and then continue with our
212:25 - images thank you
212:29 - welcome to programming knowledge so in
212:32 - this tutorial we are going to continue
212:34 - our discussion on class and objects in
212:37 - dot okay so now we are going to discuss
212:39 - about named Constructors okay so
212:42 - sometimes we need to have more than one
212:44 - Constructor such as one which takes two
212:47 - input values and the other one which
212:49 - takes a map okay so that may vary
212:51 - according to your requirement okay so in
212:55 - those places what our what we do in any
212:58 - other programming language was to create
213:00 - another Constructor with the same name
213:02 - and over here the
213:04 - parameter will vary okay so that was the
213:07 - normal case that we had in Java C or
213:10 - Java or C plus plus okay but in that
213:13 - this will give us an error okay so the
213:17 - way to have more than one Constructor in
213:20 - a same class in dot is by using the
213:22 - named Constructor okay that means the
213:24 - Constructor will have an additional name
213:27 - to it okay so to create a cons named
213:30 - Constructor we first write our
213:32 - Constructor class name
213:34 - okay and then the additional name so
213:37 - let's say from map okay and as the name
213:40 - suggests that this will take a map of
213:43 - type string
213:44 - end and I'll call it map and then I'll
213:47 - store the value in this map to my data
213:50 - members okay so for that I'll write this
213:53 - dot X is equal to
213:55 - map and map will have a x value
213:58 - okay this dot y
214:00 - and then map will have a y value
214:04 - okay so this is done
214:06 - now let's try creating a point object
214:09 - using this Constructor okay so for that
214:12 - over here I'll first in
214:14 - the 10 object Point P1 and then to call
214:17 - this named Constructor we write point
214:20 - Dot from Mac
214:23 - okay and then over here as you can see
214:25 - over here we are expecting a map so we
214:28 - need to pass a map
214:30 - okay so for that I'll open curly braces
214:32 - and then the first value is X and let's
214:35 - say 10 and then the next value is y and
214:39 - I'll pass 20.
214:42 - okay then I'll close this bracket over
214:44 - here now over here you can see the type
214:47 - has been mentioned so it would be better
214:49 - if we mention the type over here also
214:51 - this is referred as a good practice okay
214:54 - so string
214:55 - end okay that means in this map the key
214:58 - will always be your string type and the
215:00 - value will always be of integer type any
215:02 - other data type will give us an error
215:04 - okay so now let's try calling this
215:06 - function on this P1 object okay so for
215:10 - that I'll write P1 Dot
215:12 - print data
215:15 - so now let's try running this and we
215:17 - should get 10 plus 20 as the output and
215:19 - you can see that
215:21 - so this is how we have more than one
215:23 - Constructor in the same class by using
215:27 - the named Constructor okay so now over
215:31 - here you can see this is
215:33 - how we create a named Constructor but
215:36 - this is not the best way actually there
215:39 - is another way and that is called
215:42 - initializer list okay so for that I'll
215:46 - remove this from here okay and let's see
215:49 - how we use an initializer list
215:52 - compose my con named Constructor is same
215:55 - Dot from map
215:58 - okay and it takes a map of type
216:02 - string and int
216:05 - and I call it map okay now instead of
216:08 - giving curly braces
216:11 - what I am going to do is I'll give a
216:13 - colon okay and then I'll initialize the
216:16 - value so I'll write X is equal to
216:20 - Map X
216:22 - okay and Y
216:25 - is equal to
216:28 - map y
216:31 - okay and then over here only we can call
216:33 - this print data method okay so let's see
216:36 - what happens
216:38 - print
216:39 - data
216:41 - okay so this means this method will be
216:44 - called after the value is stored okay so
216:47 - let's try running this I'll just remove
216:49 - this print data from here we should get
216:51 - the same output let's see
216:55 - and you can see we get the same output
216:57 - so over here you can see our lines of
217:00 - code are less and the work is also
217:04 - optimized that means uh before the code
217:07 - inside this Constructor starts running
217:09 - our data members are initialized okay so
217:13 - this is where initializer list comes to
217:16 - play okay and we don't use initial
217:19 - initializer list just to initialize but
217:22 - for other cases also like assert
217:26 - assert X greater than zero okay so that
217:30 - means it will check if x value is
217:33 - greater than 0 and if it is not then
217:36 - this Constructor will not run okay so
217:38 - assert is a special keyword that we have
217:41 - in that okay and the code will not pass
217:45 - from here until this condition is true
217:46 - okay if this condition is false then the
217:49 - execution will stop over here okay
217:53 - so this is done yes so now let's try
217:55 - running this I hope there are no errors
217:58 - okay and you can see there is an error
218:03 - okay so let's see what has happened
218:06 - okay so the error over here is that X
218:09 - and Y are not getting initialized okay
218:12 - so instead of writing it over here I'll
218:14 - write it
218:16 - I'll cut it from here remove this
218:20 - okay and over here I'll write the same
218:22 - thing okay now let's try running this
218:25 - and I think the error should be gone by
218:26 - now
218:28 - and there are still exists because we
218:31 - are calling this and this is not valid
218:34 - so now let's run this again
218:39 - okay so now you can see we get the
218:42 - output now the next thing that we are
218:45 - going to discuss in class is Getters and
218:48 - Setters we can use the same type of
218:50 - gutters and Setters that we use in any
218:53 - other object oriented programming
218:55 - language along with that there is
218:58 - another procedure that dot provides okay
219:01 - so to get a value we simply write the
219:06 - return type of the value and then the
219:09 - keyword get
219:10 - and then the name point x okay so
219:14 - suppose if I call point x I want the
219:17 - value of value stored in this data
219:20 - member okay so then simply I'll write
219:24 - this dot X okay so that means over here
219:27 - return keyword is applied implicitly
219:31 - okay so now let's try running this so
219:34 - I'll write print
219:37 - P Dot
219:40 - okay so as I told in the previous video
219:43 - we call all the methods inside of the
219:46 - class using the object of that class
219:48 - okay so now let's try running this and
219:51 - 200 should be printed below this
219:54 - and you can see that okay similarly we
219:57 - can write for y and get
220:01 - point Y okay
220:05 - and then this returns this dot y
220:08 - now similarly over here I'll print this
220:10 - print
220:12 - P dot get all
220:20 - sorry P dot point one
220:25 - let's run this and I should get 100 over
220:28 - here
220:29 - and you can see that now this getter is
220:33 - not only used for getting the data
220:35 - members we can use return customized
220:37 - answers also okay so suppose if I want
220:40 - to return a map of type string and
220:45 - and I'll call it get map
220:48 - okay then this should return a map of
220:52 - type
220:53 - string and then okay and the values will
220:57 - be X and that will have the value stored
221:00 - in the data member X okay and then it
221:03 - will have a value y
221:06 - again that will return the value stored
221:08 - in the data member y
221:10 - okay then I'll close this over here and
221:12 - as I said the return keyword is applied
221:15 - in these both implicitly okay so then
221:18 - again I'll call this method point
221:21 - P dot get map
221:24 - okay now let's try running this
221:28 - okay so it is giving us an error and
221:31 - that is because instead of print over
221:33 - here I have written points so now let's
221:35 - try running this
221:39 - and there we get the result it returns a
221:42 - map where X has value 200 stored in it
221:45 - and Y has a value 100 stored in it that
221:48 - is same as we have passed in our
221:50 - Constructor okay so this is how we use
221:53 - the gutters in dot okay now talking
221:57 - about setters
221:58 - for Setters also there's a different
222:00 - method that is provided by this dot so
222:04 - we simply write set that is a keyword in
222:06 - Dot and then
222:08 - point x okay Point capital x okay so now
222:13 - let's not give it a give the same name
222:16 - I'll write set X okay and then it
222:18 - expects an integer value I'll call it X
222:21 - and then as we know how to differentiate
222:24 - this dot X refers to the data number and
222:27 - this refers to the parameter that we get
222:30 - over here okay so now let's try calling
222:32 - this I'll call
222:34 - p
222:35 - dot set X
222:38 - okay and then it returns expects a value
222:40 - I'll give 500 okay and then simply P Dot
222:46 - print data
222:53 - okay now let's try running this
222:59 - okay so over here you can see we got an
223:01 - error so the error was instead of
223:03 - passing it as a parameter
223:05 - I pass it with an equal to sign okay so
223:08 - now let's try running this
223:11 - and you can see instead of 200 the value
223:13 - has now changed to 500 similarly we can
223:17 - set X set Y for the Y parameter and then
223:20 - similarly we can take a map and then map
223:23 - it to our data members like we did in
223:25 - the named Constructor part
223:27 - okay so this was about gutters and
223:30 - Setters and by this we complete the
223:31 - basics of class and objects in that
223:37 - okay so the next thing that I want to
223:39 - discuss is about enums okay so enum is a
223:43 - special type of class that represents
223:46 - fixed number of constant values okay so
223:49 - to create an enum okay so now suppose we
223:53 - have a payment status okay like the
223:56 - payment status will have three values
223:58 - and those three need to be fixed values
224:01 - okay so in those those cases we use an
224:04 - enum okay so for enum we write the
224:07 - keyword enum and then let's say payment
224:10 - status that is the example scenario that
224:13 - we have taken
224:14 - payment status
224:16 - okay and then this has three values
224:18 - first one is
224:21 - not pay
224:23 - then
224:25 - OTP
224:26 - and then paid
224:29 - okay so this can be the three members
224:32 - I'll give a semicolon over here
224:35 - comma over here
224:38 - I think we don't need a semicolon over
224:40 - here yes we don't need it so we have an
224:44 - enum over here that has three values not
224:46 - paid OTP sent and paid
224:48 - okay so over here we can create a
224:52 - object of this enum okay so for that
224:55 - I'll write final
224:57 - status and to store any value from this
225:00 - enum we first write the inum name that
225:03 - is payment status
225:07 - dot not sent
225:10 - not paid
225:12 - okay so now we have a status which will
225:16 - have a data type of payment status and
225:18 - it has a value
225:20 - you can see in our payment status if I
225:22 - click on this also
225:23 - we will get the same thing that is
225:25 - payment status status okay so the status
225:28 - right now is not paid now to check so
225:31 - this is actually used
225:34 - widely when we use a switch case okay so
225:37 - in switch case I have a status
225:39 - okay and then I'll
225:41 - I'm sorry
225:42 - in switch case we have a status and then
225:45 - over here the first case is
225:48 - case
225:49 - payment
225:50 - status
225:52 - dot not paid and if that is true then we
225:57 - want to to do something
226:02 - and then similarly for the other two
226:04 - statuses okay so now you might be
226:06 - thinking that why do we use uh enum even
226:10 - when we can simply write it use it as a
226:13 - string or as an integer okay so enum is
226:16 - used for standardizing the values okay
226:19 - so now suppose over here if you have the
226:23 - stay
226:27 - San Jose
226:41 - okay so now suppose over here the status
226:45 - is not paid
226:48 - okay and in the switch case we are
226:51 - checking switch and then case and the
226:55 - case is
226:56 - not paid
226:58 - okay so you can see this is a common
227:01 - mistake that we can do like over here we
227:04 - have a capital P over here we have a
227:06 - small p and using enum we can avoid all
227:09 - these types of mistake also so that is
227:13 - another benefit of using enum
227:15 - okay so that was about enum I hope
227:18 - everything was clear thank you
227:22 - welcome to programming knowledge so in
227:25 - this video we are going to discuss about
227:27 - error handling in Dot and you might be
227:30 - thinking why we are using this editor
227:32 - instead of the dart pad and the reason
227:34 - is that in dot pad it automatically
227:37 - handles the exception okay and as we are
227:40 - discussing about error handling so we
227:42 - need to see the errors okay not all the
227:46 - errors but maximum errors in the dot pad
227:48 - is handled by itself okay so the concept
227:52 - of error handling is same as in any
227:54 - other object oriented programming
227:55 - language okay we have a try
227:58 - and then we have a catch
228:01 - okay and then this catch block takes an
228:04 - exception and if you don't know what is
228:07 - an exception so that means that is a
228:10 - technical term used for errors okay so
228:13 - in your program if there is an error
228:15 - then it is referred to an exception okay
228:17 - so and in the catch block
228:20 - we deal with the
228:22 - exception
228:24 - okay so now let's try creating an error
228:27 - okay and without this try and catch
228:30 - block so I'll use the most popular
228:32 - example for errors for creating errors
228:35 - that is division by zero okay so I'll
228:38 - create a variable a 10 sorry it should
228:42 - be 10.
228:43 - and then
228:47 - and then another variable B that is zero
228:51 - and then in variable C I'll store the
228:56 - quotient
228:57 - so a by B
228:59 - okay and then I'll print C
229:02 - so now let's try running this and see
229:04 - what is the answer
229:08 - and you can see we are getting Infinity
229:10 - as the answer okay so that is because
229:13 - whenever we divide by zero in dot it
229:17 - automatically gets converted to a double
229:19 - value okay and in the double data type
229:22 - in dot we have a certain value for
229:25 - Infinity so as this will give an output
229:28 - Infinity so it is automatically
229:31 - converted into double and the infinity
229:33 - value is assigned to this variable C
229:36 - that is why we are getting Infinity as
229:39 - the output okay so to prevent from the
229:41 - changing of data types we need to add a
229:45 - tilde symbol over here so now let's try
229:48 - running this again okay and now since
229:50 - the it is not being converted we should
229:52 - get an error okay and you can see we are
229:55 - getting an error and as I told error is
229:58 - referred as exception so there is an
230:00 - unhandled exception
230:02 - and that is integer division 0 exception
230:05 - okay that means it is very much
230:07 - understanding that we have divided by
230:09 - zero and that is why we are getting this
230:11 - exception okay but now suppose this
230:14 - exception is in an app and the user sees
230:17 - this error message so he might not be
230:20 - able to understand what this means okay
230:23 - so at that places what we do is we
230:27 - surround them with a try and catch block
230:30 - okay so over here a try and every try
230:33 - block needs to be followed by a catch
230:35 - block okay and then it takes an e that
230:38 - is the extra exception and that will be
230:41 - an object of this exception okay and
230:44 - then instead of printing these
230:47 - things I'll simply print
230:51 - division
230:52 - by zero
230:55 - is not
230:57 - possible
230:59 - okay now let's try running this again
231:04 - and you can see that the catch blocker
231:08 - has been executed and it is printing
231:10 - division by zero is not possible okay so
231:13 - this is what happens normally in try and
231:15 - catch block the we keep the code where
231:19 - we expect to find some error inside the
231:22 - dry block okay and if some error is
231:25 - found then the terminal execution is
231:28 - terminated then and there and the catch
231:30 - block is executed instead okay so this
231:34 - is the use of try and catch block and
231:36 - this is how we generally use drawing and
231:38 - catch Block in most of the programming
231:40 - languages
231:41 - okay so now in that there is another
231:44 - thing that it provides us okay and that
231:46 - is for specific exception handling that
231:50 - means if it is a division by zero
231:52 - exception then we will handle it
231:54 - differently otherwise we will handle it
231:57 - differently
232:00 - okay so for that what oh I'll write over
232:03 - here is
232:04 - on okay so on is a keyword in Dot and
232:08 - then the exception name integer
232:13 - division by zero
232:17 - exception okay so if this is the case
232:20 - that means integer division by zero
232:22 - exception is the case then we will then
232:25 - this statement will be printed so let's
232:27 - try running this
232:31 - and you can see division by 0 is not
232:34 - possible that is inside our this on
232:36 - block okay now along with this let's try
232:39 - to let's try and check if we can have
232:42 - another catch block or not okay so now
232:45 - inside this I'll simply print
232:49 - another catch block
232:52 - and let's run this and see what happens
232:57 - okay so you can see only the on block is
233:01 - being printed and not the catch block
233:03 - means if the exception is of this type
233:06 - then only this block will be executed
233:08 - and not the catch block and if the
233:11 - exception is not of this type then only
233:14 - catch block will be executed okay so now
233:17 - let's create another exception I'll
233:19 - comment this out for now
233:23 - and I'll create a list let's say s is
233:28 - equal to 1 comma 2 comma 3 comma 4. and
233:32 - I'll try to print the value out of index
233:35 - okay so that means S4
233:38 - where the list has index only till three
233:41 - zero one two and three so let's try
233:44 - executing this and see
233:51 - and now you can see it is giving me some
233:53 - different type of Errors which is not
233:55 - actually an error but it is an warning
233:57 - and that is because over here I have
233:59 - forgot to give the data type now let's
234:01 - try running this again
234:04 - and you can see the error has been
234:07 - created over here and since it was not
234:09 - of this type so this block is not
234:11 - executed instead the catch block is
234:14 - executed okay so this is how we handle
234:17 - error specifically means handle error
234:20 - for specific exception in a specific way
234:23 - okay and suppose if we want to get an
234:26 - object over here also so after this what
234:30 - we need to do is simply write catch e
234:33 - okay so that means when this is the
234:35 - exception then the exception will be
234:37 - catched over here and then inside this
234:40 - we can do whatever we want to do with
234:41 - this e block
234:44 - okay so this was about try catch and
234:48 - this is specific error handling now the
234:51 - next thing that we generally discuss in
234:54 - error handling is a finally blocked okay
234:57 - so that means whether the try block is
235:00 - executed completely or if there is some
235:03 - exception and a catch block is executed
235:06 - no matter what is the case after this
235:09 - whole part is over
235:11 - finally block will always be executed
235:15 - okay so let's see
235:17 - print
235:20 - always executed
235:23 - okay and now let's try running this
235:29 - and you can see the catch block has been
235:31 - printed means the statement inside the
235:34 - catch block has been printed and the
235:36 - finally block has also been executed
235:39 - okay so this was the case when there is
235:41 - an error now let's see if there is not
235:44 - an error
235:46 - okay then as I said this drive block
235:49 - should be
235:51 - executed and then the finally block
235:53 - because that is always executed okay so
235:57 - this was about finally block
235:59 - okay so the last thing about exception
236:02 - that we need to discuss is creating a
236:04 - custom exception
236:06 - okay so for that I'll create a custom
236:09 - exception class okay since we are
236:11 - studying an object oriented programming
236:13 - languages most of our working will be
236:17 - done via class okay so I'll create a
236:21 - class
236:22 - age exception okay which will throw an
236:25 - error when the age is below zero which
236:28 - is not technically possible so class age
236:31 - exception implements okay so this is the
236:35 - way of inheriting another class
236:38 - properties okay or a abstract class to
236:41 - be more specific
236:42 - implements exception okay so we have an
236:45 - exception class already inside Dot okay
236:49 - now inside this all we need to do is
236:51 - create uh Define a method string e r r
236:56 - MSG or you can name it as an how you
236:59 - like
237:01 - okay so what it basically does is by
237:04 - implementing this exception we are
237:06 - basically able to throw this type of
237:09 - exception okay and whatever we do inside
237:11 - this doesn't matter with the throwing of
237:14 - exception okay this is our custom Choice
237:16 - what we want to do with it
237:18 - okay so over here this will simply
237:21 - return h
237:23 - cannot be zeros
237:26 - it cannot be less than zero
237:31 - okay
237:32 - so now over here
237:35 - let's see I'll remove this
237:40 - thing from here
237:42 - and now over here I'll
237:45 - create a variable a VRA is equal to
237:50 - minus 10.
237:52 - okay so that means if a stands for H so
237:56 - I'll check if a is less than
238:01 - 0 then I want to call this exception
238:05 - okay so to call this exception there is
238:07 - another keyword throw which creates an
238:09 - exception and throws it to the catch
238:12 - block if it has any or to the user if we
238:14 - don't surround it with a try and catch
238:16 - block
238:17 - so throw
238:19 - and then we write
238:21 - exception
238:24 - okay
238:25 - so now let's see what happens
238:33 - and you can see we got an exception the
238:37 - exception was thrown over here that's
238:39 - why the catch block got executed and the
238:42 - finally always gets executed okay so
238:45 - this was about error handling in dot
238:47 - thank you
238:49 - welcome to programming knowledge so in
238:52 - this video we are going to discuss about
238:53 - asynchronous operations in dot okay so
238:57 - the question that arises is why
239:00 - asynchronous operations
239:02 - so the answer to that would be a
239:04 - synchronous operation select your
239:06 - program keep running while waiting for
239:09 - another operation to finish
239:12 - okay so let's say for example we want to
239:16 - store data in our server so this type of
239:19 - operation doesn't execute instantly but
239:21 - might take some time depending upon the
239:24 - internet speed or size of data Etc
239:27 - so if we don't use asynchronous
239:30 - operation user will have to wait until
239:33 - our program is interacting with the
239:36 - server which will create a bad user
239:38 - experience so to prevent that we use
239:41 - asynchronous operations and for this
239:44 - purpose that provides us three special
239:47 - keywords to use they are future async
239:51 - and a weight
239:53 - so first we are going to discuss about
240:02 - Cronus operation and can have two states
240:04 - only either uncompleted state or
240:08 - completed state
240:10 - so how this works is when we call an
240:13 - asynchronous function it returns a
240:16 - uncompleted future
240:18 - and then future is waiting for the
240:21 - functions asynchronous operation to
240:24 - finish or throw an error and soon as it
240:28 - finishes or throws error the future
240:31 - State changes from uncompleted to
240:34 - completed
240:35 - okay so let's take an example
240:39 - and the keyword future
240:41 - we have capital f in it okay so let's
240:45 - say we have a future method uh future
240:48 - function we call it
240:50 - fetch user data
240:57 - and what it basically does is return
241:04 - future Dot
241:06 - delayed okay so this means that using
241:10 - this delayed method we can delay the
241:13 - process for some times that is
241:15 - equivalent to sleep in multi-threading
241:18 - in Java or in any other common
241:21 - programming language I mean object
241:23 - oriented programming language
241:25 - okay so then we have another class
241:28 - called duration and it takes all the
241:31 - time parameters that is seconds minutes
241:34 - hours days okay so for now suppose we
241:38 - assume that our
241:40 - program will take two seconds to
241:43 - interact with the server so I'll give it
241:46 - a
241:47 - seconds
241:48 - and that is to that means uh this will
241:53 - wait for two seconds and then start
241:55 - executing okay and
241:57 - we are doing this because we have
241:59 - assumed two seconds to be the time of
242:02 - our program to be interacting with the
242:04 - server okay so after this we have an
242:07 - unnamed function which contains the code
242:10 - that will be executed after this delay
242:13 - of duration two seconds
242:16 - and simply I want to print
242:19 - data
242:21 - okay so this is our function now we can
242:24 - also specify the return type of the
242:27 - future okay now over here in this fetch
242:30 - user data I have a return keyword but it
242:33 - is not actually returning any data it is
242:36 - simply printing the word data that means
242:39 - I am not returning anything and if I am
242:42 - not returning anything then we all know
242:43 - the keyword which is void which means
242:46 - this function will not return any data
242:49 - now I'll comment this out first now
242:53 - okay now after that I'll call this
242:56 - method search
242:58 - user data
243:03 - and after that I can say have a print
243:06 - statement
243:09 - switching user data
243:13 - okay so now let's try running this
243:20 - okay so now you can see we have fetching
243:23 - user data first and then data but
243:26 - actually according to the convention we
243:29 - have first called Fetch user data which
243:31 - is this method so this should be printed
243:34 - first so that means our delay function
243:36 - is working fine and that is how uh the
243:41 - asynchronous functions work that means
243:43 - over here if there is a delay of 2
243:46 - seconds it will not wait for two seconds
243:49 - to execute the rest of the code it will
243:52 - directly start executing the rest of the
243:54 - code and as soon as this finishes
243:58 - the future States become completed and
244:01 - it hardly affects the rest of the
244:04 - execution of the program
244:06 - so then this function is called an
244:09 - asynchronous function okay that means
244:11 - our program is still running
244:14 - and not caring about the completion of
244:17 - this function means the completion of
244:20 - execution of this function
244:22 - okay so this is how we use futures
244:26 - okay so the next thing that we are going
244:29 - to discuss is a sink and a weight so
244:32 - these keywords provide a declarative way
244:35 - to define a sync function and use their
244:37 - result okay so let's say this function
244:41 - remains same and instead of printing
244:44 - data now it actually returns something
244:46 - and which is eventually a string okay so
244:50 - means after two seconds data will be
244:52 - returned okay now if it is returning
244:54 - string I need to change this to string
244:58 - okay and now after that over here I'll
245:03 - create another method which is
245:06 - string
245:08 - and I'll call it user message
245:12 - okay anything that we like
245:16 - and then what it basically does is drag
245:19 - data
245:21 - is equal to fetch
245:26 - user data means we are calling this
245:29 - method
245:32 - okay and then I am simply printing this
245:36 - uh simply returning a string because we
245:39 - have a string return type here
245:41 - return
245:43 - data
245:45 - and now in our main method all we do is
245:48 - we remove all these thing and we write
245:52 - print
245:54 - user
245:59 - MSG
246:00 - okay now over here you can see it is
246:02 - giving us an error so all we can do is
246:04 - surround it inside quotes and do string
246:08 - interpolation okay so now uh Dart will
246:11 - infer that it is a string
246:13 - so now let's try running this and see
246:16 - what is the output
246:21 - okay so as according to the convention
246:26 - the output should be data but instead of
246:28 - that we are getting a future of string
246:30 - that means as I earlier said if we
246:34 - execute a future it returns a future
246:38 - and that is in uncompleted State and it
246:41 - is expecting to be completed or thrown
246:43 - error okay so now over here you can see
246:47 - what basically happened was that this
246:50 - function was executed and as this is a
246:52 - asynchronous operation it didn't wait
246:54 - for this function to finish and returned
246:58 - the data and why and since this this was
247:02 - not yet finished it returned the
247:05 - uncomplete state of future and that is
247:07 - why we are getting
247:09 - such type of output okay so this is what
247:12 - we call a uncompleted Future Okay and a
247:16 - completed future has a proper accurate
247:19 - value
247:19 - okay
247:21 - so I hope you are understanding what I
247:23 - am trying to say and now to prevent such
247:26 - type of error what we need to do is we
247:28 - will use the async and await keyword
247:30 - okay so what await keyword basically
247:33 - does is that it will wait
247:36 - for this function to execute or
247:40 - basically it will wait for this
247:42 - functions future to be of completed
247:45 - state
247:46 - okay and then this await function is
247:50 - giving an error over here and that is
247:51 - because a weight function
247:53 - never goes without a sync function okay
247:56 - a sync and of it always go together
247:59 - okay if we write a wait and don't write
248:02 - a sink it will give us an error however
248:04 - vice versa will not give an error and
248:07 - that is because a sink is just allowing
248:11 - that function to use of it and then if
248:14 - we don't use a bit then that is not a
248:16 - problem but if we use a weight and we
248:19 - have not allowed that function to use of
248:21 - it then that thing will give us a
248:24 - problem
248:25 - okay
248:26 - I hope you are understanding these
248:28 - things now as you can see this is now a
248:31 - asynchronous function and over here also
248:34 - you have seen a asynchronous function
248:36 - but the difference between these two
248:38 - asynchronous functions were this
248:40 - asynchronous functions a function
248:43 - returns a future while this asynchronous
248:45 - function is returning a string
248:48 - and that is why we are getting our error
248:50 - over here
248:53 - because asynchronous functions always
248:56 - return a future okay so instead of
248:59 - string this will now be future string
249:13 - so now it is a future string and since
249:17 - it also will now return over here a
249:21 - uncompleted state of future and we want
249:24 - a completed state of future that means
249:26 - we want some actual result we will use a
249:29 - weight over here also and now since this
249:32 - is using await we need to give a sink
249:35 - over here keep in mind async is always
249:38 - after the ending parenthesis and
249:42 - before the opening curly braces okay so
249:47 - now let's try running this program and
249:48 - now instead of getting this instance we
249:52 - should be able to see this data being
249:55 - printed
249:56 - so let's see
250:01 - and you can see as soon as the execution
250:03 - is completed it waits for two second and
250:06 - then data is being printed so it is
250:08 - waiting for two second because over here
250:10 - we have used a weight which is making
250:12 - the program stop for two seconds until
250:15 - this has a completed state of future and
250:19 - the same goes over here
250:21 - so this were all the basics about future
250:25 - async and await okay so I hope
250:28 - everything was clear
250:29 - thank you
250:32 - welcome to programming knowledge so in
250:35 - this video we will come back to flutter
250:37 - from Dot and continue our discussion
250:39 - where we left
250:41 - so in our last flutter video the love we
250:44 - discussed about image dot asset
250:47 - so in this video we are going to discuss
250:50 - about another type of image and that is
250:53 - image dot Network okay so what it
250:56 - basically means is that you can display
250:59 - any image from the internet in your
251:02 - flutter application
251:03 - okay so for that I'll remove this child
251:07 - completely from here
251:09 - add another chain and that is image
251:13 - dot Network
251:15 - okay and then we need to give a SRC
251:18 - which is actually the URL of the image
251:22 - okay so I have a URL copied you can pick
251:28 - any URL from the internet
251:32 - okay now if I save this I should be able
251:35 - to see this image on my screen and you
251:39 - can see this it is a simple image of a
251:42 - burger with a red background
251:45 - okay so now the properties that we
251:48 - discussed in image dot assets are also
251:51 - applicable in image.network and there
251:54 - are a few more things which were there
251:57 - which were present in image asset but I
251:59 - have
252:00 - intentionally left that to discuss in
252:02 - image.network because it makes more
252:05 - sense over here
252:06 - okay so for that first quick
252:08 - recapitulation about frame Builder so as
252:12 - I told as we discussed in our previous
252:15 - video frame builder takes four
252:18 - properties
252:19 - first is build context context
252:24 - then a widget child
252:30 - then uh frame
252:32 - and then Bool is
252:36 - async
252:38 - loaded
252:40 - okay and then it needs to return a
252:42 - widget
252:44 - okay so just to see the difference of
252:48 - this Frame Builder I'll simply add up
252:50 - padding
252:53 - okay and it will have a padding of let's
252:58 - say const
253:00 - its
253:02 - I'm sorry
253:06 - Edge inserts all
253:08 - and let's say 20.0
253:12 - and the child is our child widget over
253:15 - here
253:18 - okay
253:20 - so now I'll format this and run and
253:25 - let's see the difference
253:27 - okay so now you can see we have a
253:30 - padding of 20 from all the sides
253:32 - okay let's make it 40 so that the change
253:35 - is significant
253:39 - and you can see we have a spacing from
253:42 - all the sides and that is the padding
253:44 - okay
253:45 - so this is about frame Builder we have
253:48 - discussed it in the previous video about
253:50 - image dot asset now the next thing that
253:54 - we are going to discuss is a loading
253:57 - Builder Okay so the reason I have not
253:59 - discussed it in image dot asset because
254:01 - over there we don't actually load
254:04 - something we already have the image in
254:06 - our asset folder but while we are
254:09 - loading some image from Network which
254:11 - means we are
254:12 - re uh downloading stuff from some other
254:15 - servers so that might take some time to
254:18 - load okay so that is when we use the
254:21 - loading Builder
254:23 - okay so then loading Builder also takes
254:26 - uh build context
254:31 - okay I'll call it
254:33 - context
254:35 - then uh
254:37 - reject child
254:40 - and then image
254:43 - chunk
254:46 - I'm sorry image chunk
254:49 - event and that is
254:52 - the loading progress
254:55 - okay so this has all the data about the
254:58 - loading speed bytes already loaded and
255:02 - bytes remaining to load means all the
255:05 - numerical data means are stored in this
255:08 - image chunk event Okay so
255:11 - we can get all the data from this
255:13 - loading process okay anyways we are not
255:16 - going to discuss anything about that
255:17 - right now because that is not actually
255:20 - used that much okay so now over here we
255:24 - want to return our widget and that
255:26 - widget will be displayed until the image
255:28 - is being loaded from the server
255:31 - okay so for that I'll simply return
255:35 - inside our Center
255:40 - inside a center I'll have a child and
255:43 - that will be a text View
255:46 - okay and the text view says
255:51 - loading image
255:57 - okay and why is this texture giving an
256:00 - error
256:01 - okay so it should be a text not a text
256:04 - View
256:05 - I'm sorry
256:07 - now let's run this and see
256:11 - okay so you can see after some time the
256:14 - image is loaded okay now the next thing
256:17 - that I want to discuss is
256:19 - error Builder so that means this widget
256:22 - will be displayed when there is an error
256:25 - the widget that we return in error
256:28 - Builder Okay so error Builder it also
256:31 - takes a build context you will see in
256:35 - flutter whenever we are returning our
256:36 - widget we are generally taking a build
256:39 - context
256:42 - okay then an error object
256:46 - sorry object spelling is now
256:52 - and then a stack Trace
257:02 - about the error
257:07 - okay and then over here I'll return
257:12 - inside our Center
257:15 - the child will be
257:17 - text
257:20 - error
257:22 - occurred
257:25 - okay so now let's return this let's run
257:28 - this and before running I'll remove just
257:31 - one letter from here so that this URL is
257:34 - invalid and this error Builder should be
257:37 - called
257:38 - okay so let's see
257:48 - and you can see error record is written
257:50 - in the center and along with this you
257:53 - can also see in the terminal we are not
257:55 - generating any errors when which would
257:58 - be in the console if we don't have this
258:03 - thing right over here okay so let's see
258:06 - if I remove this error Builder
258:09 - and then if I try loading uh invalid URL
258:13 - we will get a error in over here in our
258:15 - console
258:17 - and you can see that and even on the
258:19 - screen so that means that the error
258:23 - handling has also been done internally
258:25 - when we use a error Builder
258:30 - okay so that was about image Network and
258:35 - all the other things that were discussed
258:37 - in image dot asset is also applicable in
258:39 - image.network these were a few new
258:41 - things
258:42 - okay so now these are not the only types
258:47 - of images that we have in flutter there
258:49 - are two more that is image dot file and
258:53 - image dot memory
258:55 - Okay so we will discuss about those when
258:59 - we cover little bit more about Basics
259:02 - like working with files in flutter and
259:05 - working with
259:07 - base64 and stuff like that okay so this
259:12 - was about image.network and now since we
259:16 - are discussing images
259:18 - there is another way to display an image
259:20 - inside a container okay and that is
259:23 - Insider decoration so Insider decoration
259:25 - we have our simple box decoration
259:29 - okay now this box decoration has a
259:32 - property image
259:34 - and this image takes a decoration image
259:38 - widget
259:39 - over here I'll write a decoration image
259:42 - and then inside the decoration image
259:45 - image is required part
259:47 - okay and then over here we simply can't
259:50 - write the URL for Network image or the
259:54 - path for asset image okay for that over
259:57 - here we have different widgets suppose
260:00 - if I want to display a asset image so
260:03 - I'll write asset image
260:05 - that is the widget name and then over
260:07 - here the first thing should be the
260:10 - path so that is asset
260:14 - and then G sharp dot PNG
260:18 - now let's run this and see
260:23 - and you can see the images over here now
260:26 - what will happen if we will apply
260:28 - padding to this container that will not
260:31 - be applicable for this image because
260:33 - this images are decoration to the
260:36 - container and not a
260:38 - child to The Container okay so there's a
260:41 - difference between decoration and a
260:43 - child okay now similarly for
260:48 - our Network image we have Network
260:51 - image and then over here goes the URL
260:55 - okay so you can add the URL over here
260:58 - and then it will be pretty much the same
261:01 - we we will be able to see the image on
261:04 - the screen okay and now uh we apply all
261:08 - the properties to the image
261:11 - like fit and stuff so that is not inside
261:16 - this asset image that is inside this
261:18 - decoration image okay so over here I'll
261:21 - I can have that fit and then all the
261:24 - other stuff that I had in image.asset
261:28 - and image.network not all but most of
261:30 - them okay so suppose if I write
261:35 - fit height and let's see what happens
261:38 - I'll format it save it
261:42 - and you can see the same properties as
261:44 - we discussed in image.asset okay so this
261:47 - was yet another way how to display a
261:49 - image in flutter okay the method you
261:53 - display an image may vary according to
261:55 - your needs
261:56 - so this was for the video thank you
262:00 - welcome to programming knowledge so in
262:03 - this video we are going to discuss about
262:05 - list views in flutter okay so list view
262:08 - is the scrollable widget the most
262:11 - commonly used scrollable widget that we
262:14 - use in flutter and inside that we show a
262:18 - child one after another okay so for that
262:21 - first thing that I'll do is I'll remove
262:24 - this
262:25 - decoration box decoration thing
262:29 - okay and then I'll not give the height
262:32 - to Infinity but to
262:34 - 300.0 okay so that a smaller size so
262:37 - that in less less child only we can see
262:41 - the scrollable effect
262:43 - okay so now let's give it a child and
262:46 - the child will be list View
262:48 - okay so now this list view takes our
262:52 - children same as we have in columns or
262:55 - rows
262:56 - okay now simply I give a text and that
262:59 - says
263:01 - programming
263:04 - knowledge
263:06 - I'll copy this
263:10 - and paste it a few times
263:14 - format it and now let's see what happens
263:19 - okay so now you can see I have
263:22 - this text printed four times but it we
263:26 - are not actually able to see the scroll
263:28 - level effect I'll reduce it to 50. now
263:31 - let's see what happens
263:33 - and yes you can see now we are having
263:36 - six texts over here but we can actually
263:39 - see only three and the rest are in
263:42 - scroll level so if I scroll I am able to
263:44 - see all the other lists okay so now yes
263:47 - it is not looking very beautiful but for
263:50 - understanding purpose it is adequate
263:53 - okay so this is the scrolling purpose
263:55 - now we can also change the scrolling
263:58 - direction we have a axis
264:01 - okay or let's say scroll Direction yes
264:05 - and it has a axis enum
264:08 - okay and then over here we have two
264:10 - values horizontal and vertical by
264:13 - default it is vertical we can change it
264:15 - to horizontal now let's see what happens
264:19 - and you can see it is scrollable in
264:23 - horizontal Direction
264:25 - okay so now another thing that we have
264:28 - in a list view is a padding okay so we
264:32 - can add a simple padding Go on stage
264:35 - insets
264:37 - all 10.0
264:40 - let's save and see what happens
264:44 - okay so over here the common confusion
264:47 - is that this padding is for in between
264:50 - each children but that is not the case
264:53 - actually it is for the entire list View
264:57 - okay so now ah generally when we use
265:01 - list view we actually have a list of
265:04 - items and then we want to show widgets
265:07 - according to that okay so now for that
265:10 - what we basically do is let's first
265:12 - consider having a list
265:14 - okay so I have a list of let's say type
265:17 - string
265:20 - and they are called list items
265:24 - okay and they have something like a
265:29 - comma b or maybe it will be better if I
265:33 - just make it comma 2 comma 3 comma 5 6 7
265:37 - 8 9 0. and change the type to int
265:43 - okay so now we have a list
265:46 - okay that has numerics one till zero
265:50 - again we want to display it in a list
265:52 - okay so over here this children over
265:56 - here we can we can't simply write
266:00 - list items
266:02 - okay because that is invalid because
266:04 - this children expects a list of
266:08 - widgets and what we are actually giving
266:11 - here is a list of integers okay so this
266:15 - is a common mistake that developers make
266:19 - okay so there's a way around what we can
266:21 - do is we can use the map function that
266:25 - we have in a list okay so what map
266:27 - basically does is it is like a for each
266:30 - Loop it will give you each item inside
266:33 - the list and then we can perform
266:35 - specific actions related to that okay so
266:38 - map and then over here this e will
266:41 - contain the integer means its integer
266:44 - one by one okay and then over here
266:47 - instead of null
266:49 - I want I will return the widget that I
266:53 - want to show here that I want to show in
266:55 - my list okay so I will simply write
266:57 - return
267:00 - a text widget Maybe
267:02 - okay and the text says
267:08 - count
267:10 - and then string interpolation e
267:15 - okay and then after that over here dot 2
267:18 - list
267:19 - okay so what we have basically done over
267:22 - here is that we have mapped all the
267:24 - items of list view okay and for every
267:27 - item we have returned our text widget
267:29 - and then we have finally converted all
267:32 - the widgets to our list and then that
267:35 - list is given as a children in this list
267:38 - View okay so now let's see what happens
267:43 - and you can see count one count two
267:46 - count three count four means as we
267:48 - expected it to be okay now suppose I
267:51 - want to give it a little bit spacing so
267:53 - what I'll do is
267:57 - I'll wrap it with a padding and all
268:00 - sides
268:01 - should be 10 and then if I save this
268:05 - so now you can see it is having some
268:08 - problems in spacing and padding I'll
268:10 - remove this for now okay that is just
268:12 - for understanding purposes so now you
268:15 - can see count one count two till from
268:18 - here till count to zero okay so this is
268:21 - how you display a predefined list of
268:26 - dynamic data type as a list of widgets
268:30 - using a list View
268:32 - okay then after that we also have a few
268:35 - things such as key okay so then it also
268:39 - takes a key now the basic use of keys
268:42 - that we can use the same key in any
268:45 - other list and then we can manage both
268:48 - the scrolling of both the lists at the
268:51 - same time okay so that is the basic use
268:54 - of key and then there are other things
268:57 - that we don't need as such but when we
269:00 - will do some projects then we will see
269:02 - all the other features of list view also
269:05 - thank you
269:07 - welcome to programming knowledge so in
269:11 - this video we are going to continue our
269:13 - discussion on list views in flutter so
269:16 - in the previous video we saw one method
269:19 - to use a list View
269:20 - in flutter in this video we are going to
269:23 - see another method and that is by using
269:25 - the Builder named Constructor that we
269:29 - have for list view in flutter
269:32 - okay so for that
269:34 - I'll first of all remove this list view
269:37 - from here
269:39 - and then I'll write list View
269:44 - dot Builder
269:46 - okay so now this builder takes a few
269:51 - parameters some parameters which are
269:53 - necessary to be given first is the
269:55 - length of the list okay so that is
269:58 - referred as item count
270:00 - okay and now we are referring to our
270:02 - this list items so I will give the
270:05 - length of that
270:07 - okay and we know to get the length of
270:09 - any list we have a
270:12 - keyword called length in flutter okay
270:15 - and then we need to give an item Builder
270:17 - okay that means how and how each item
270:21 - will look
270:22 - okay so now it takes a few parameters
270:26 - first is the build context as I said
270:29 - whenever we will be returning a widget
270:32 - or dealing with widgets we will be
270:35 - needing a context
270:37 - and to be more specific of build context
270:41 - okay so this is automatically returned
270:44 - in this item Builder okay and then the
270:47 - index okay means this index item is
270:50 - going to be displayed
270:52 - okay so now first of all I'll simply
270:56 - return our text
270:58 - and that prints count
271:03 - okay and then using string interpolation
271:07 - I'll write list items
271:15 - index
271:17 - okay now let's try running this
271:24 - and you can see we have one two three
271:27 - and then means we have given this much
271:30 - space only that is why it is happening
271:32 - like that now I'll remove this space uh
271:36 - height part from here now let's see
271:40 - and you can see we have this list over
271:43 - here okay now it is obviously not
271:46 - scrollable because we have ample space
271:48 - left
271:50 - okay so now this is an easier way uh to
271:55 - use the list view when we have the same
271:59 - widget for each item okay now since we
272:03 - are discussing about list view there is
272:05 - a special tile widget that is
272:08 - most commonly used in a list view okay
272:11 - and it is basically designed for being
272:14 - used by a list View and that is called
272:17 - a list type
272:21 - Okay so
272:23 - means its ideal purpose is to be the
272:26 - item of a list
272:28 - okay so first of all it takes a title
272:31 - okay and the title can title needs a
272:34 - widget so for now it is text
272:38 - count the same thing string
272:41 - interpolation
272:44 - list items
272:48 - index
272:50 - okay then along with a title it takes a
272:53 - subtitle then it can be anything it
272:56 - means it also needs to be a widget okay
272:59 - it can be any widget
273:01 - so text and anything like programming
273:04 - knowledge
273:06 - then after that it takes a leading okay
273:10 - that means on the in the left side in
273:14 - the at the starting of the screen if you
273:17 - want to display something okay so that
273:19 - is called leading create also takes a
273:21 - widget for now I'll display icon that is
273:24 - what standardly people do
273:27 - and then inside that I'll use the icon
273:29 - see now and then let's say
273:32 - done that will give us a tick mark
273:37 - okay I need to format I need to give a
273:41 - semicolon
273:43 - format this now along with the title
273:45 - subtitle leading we also have a trailing
273:48 - which will be in the opposite side of
273:51 - the leading which means at the end of
273:53 - the screen horizontally so I can also
273:56 - give this an icon widget
274:00 - okay inside that I'll use icons Dot
274:03 - close that will give me a cross sign
274:06 - okay now along with this we also have on
274:09 - press or on tap yes we have on tap and
274:13 - on long press
274:15 - so on tap that is like any other on tap
274:18 - it takes a function
274:20 - simply I'll print
274:24 - pressed
274:27 - list items
274:30 - index
274:37 - okay uh
274:39 - it is giving error because that is a
274:44 - string that is an integer and we are
274:46 - trying to display it inside
274:49 - a print statement and print only takes a
274:51 - string
274:52 - okay so the problem is gone
274:57 - okay so now let's see how it looks
275:02 - and you can see we get a list now as I
275:06 - told in leading we have given this a
275:08 - done which is our tick mark and in
275:11 - trailing we have given a close which is
275:13 - this cross mark then this part is our
275:16 - title this part is our subtitle and if
275:20 - we press on it we are getting pressed
275:22 - one pressed two or and similarly
275:25 - okay so this is a list type
275:31 - okay so now the last thing about list
275:34 - that I want to discuss is that it
275:37 - doesn't always need to be a proper list
275:41 - means suppose I have three different
275:43 - Columns of varied things I can't say
275:47 - that all the things are uniform all the
275:49 - things are coming from a list means
275:52 - there are different things
275:54 - but I want them to be scrollable okay so
275:58 - in those conditions what we can use is
276:01 - we can wrap our body with a widget
276:06 - called as single child
276:10 - scroll View
276:13 - okay so what it basically does is that
276:17 - its child whatever we give inside its
276:20 - child no matter how long it is they all
276:23 - will act as a single scrollable screen
276:27 - okay so this is a way around when you
276:30 - don't actually properly use a list but
276:33 - we can use all the properties of a list
276:37 - okay so this will be about lists
276:40 - thank you
276:42 - welcome to programming knowledge so in
276:45 - this video we are going to discuss about
276:48 - another type of list View and the
276:51 - dismissable feature which is generally
276:53 - associated with list View
276:56 - okay so let's start
276:59 - first of all in my body I'll give it a
277:02 - width of infinity
277:03 - so it says
277:05 - double
277:07 - dot Infinity
277:11 - okay and then the child is
277:13 - list View
277:16 - dot separated
277:18 - okay so this is another type of list
277:21 - view which has a separator Builder like
277:24 - in the list view dot Builder we only had
277:27 - an item Builder okay but over here in
277:30 - list view dot separated we also have a
277:32 - separator Builder which means every item
277:35 - in the list will be separated by the
277:38 - widget returned to this separator
277:40 - Builder okay so first of all let's add
277:43 - the item count and it will be
277:47 - list items
277:51 - dot length
277:54 - okay and then the item Builder is simple
277:57 - it takes a build context
278:06 - okay and it returns
278:12 - sorry wrong spelling returns
278:17 - all list Style
278:21 - okay and then over here in the title we
278:24 - can have
278:25 - text and the text says
278:30 - count
278:32 - then we'll use the string interpolation
278:35 - inside curly braces we will write
278:39 - list items
278:42 - and then the index oh I forgot to give
278:45 - an index over here this method also
278:48 - takes an index
278:51 - okay then I'll return this over here
278:55 - this will go over here now let's format
278:58 - this and now let's also give a separator
279:01 - Builder okay so when you hover around
279:03 - separator Builder you see we get a build
279:05 - context and an integer which is the
279:08 - index so this means that for every item
279:11 - we can specify a different divider
279:15 - okay that is the power of this separator
279:18 - Builder but over here we will simply use
279:20 - a single separator for all the items
279:23 - okay so build context
279:27 - context sorry that will be a comma
279:32 - int index
279:34 - and I'll use the arrow function and it
279:37 - returns a
279:38 - divider
279:39 - okay so we have not yet discussed about
279:42 - divider so divider is actually a widget
279:44 - that will just draw a faint horizontal
279:48 - line divider always draws a horizontal
279:51 - line in flutter so let's save this and
279:53 - see and now you can see we get the
279:57 - values and each value is divided by a
280:01 - divider okay so now you can see this is
280:04 - the standard color of divider but we can
280:06 - do a few changes with the divider like
280:08 - change the color
280:10 - so I can change the color to Colors dot
280:13 - red
280:16 - now let's format this and see what
280:18 - happens
280:20 - and now you can see we have the divider
280:22 - in
280:24 - red now similar to list view dot will
280:27 - direct also has a padding
280:30 - okay so we can give it a padding con
280:32 - sorry the const will be in small C
280:36 - const
280:38 - engine sets dot all
280:42 - and that can be 10.0
280:46 - so now let's format let's save it and
280:50 - then you can see each divider has a
280:52 - little bit space over here and that is
280:54 - because of the
280:55 - padding okay so this was about the list
280:59 - view separated which is the last type of
281:01 - list view okay so we also have a list
281:04 - view dot custom which takes a flavor
281:08 - delegate but still we have not discussed
281:11 - about sliver delegate so I'll
281:13 - do the list view dot custom part once we
281:16 - discuss the list view sliver delegate
281:19 - okay
281:20 - so moving on the next thing that we are
281:22 - going to discuss is about the
281:24 - dismissible feature okay so by that I
281:27 - mean that if I
281:30 - if I pull from end to start on a list
281:34 - item it should be dismissed or maybe
281:37 - over here it shows a delete icon and
281:39 - then if I pull it from the right to left
281:42 - the item gets dismissed okay so that is
281:46 - a very common feature that we see with
281:48 - list views okay so to do so
281:52 - over here in item Builder
281:55 - instead of returning a list tile I'll
281:57 - return another widget
282:00 - okay and that is dismissible
282:06 - okay so now again this is dismissible
282:09 - Will let's give it the child a card okay
282:13 - so a card is another type of widget it
282:16 - is very much similar to container
282:20 - only difference is that it has an
282:22 - elevation means it also has a height in
282:25 - the z-axis okay so then I'll give the
282:28 - child as a card okay then card will take
282:31 - a margin
282:34 - can the margin let's say
282:36 - Edge inserts symmetric
282:45 - I'm sorry as inserts Dot
282:48 - symmetric
282:51 - okay and then in horizontal
282:55 - we give it uh let's say 15.0 margin and
283:00 - then vertical
283:03 - we can give it a
283:06 - 4.0 margin
283:09 - I am doing so because we are already
283:11 - giving it a margin over here a padding
283:13 - over here that's why
283:15 - that's why I am reducing the margin
283:17 - vertically
283:19 - okay well let's format it
283:21 - now we have the card now inside this
283:26 - card we will add our child
283:29 - okay so the child will be for now a
283:32 - simple list tile
283:39 - okay and the title will be
283:43 - text
283:45 - that says
283:48 - count
283:50 - and then string interpolation
283:54 - list items
283:58 - index
284:01 - let's format this
284:03 - save it and see
284:06 - okay so you can see over here it says
284:09 - that key should not be equal to null
284:12 - okay is not true
284:15 - so that me that error is because this
284:18 - dismissible x are key
284:21 - which is not significant over here but
284:24 - it is necessary so over here I can
284:26 - simply write key and then
284:29 - key takes a key value okay so over here
284:33 - I can simply say value key
284:38 - okay and then over here it takes an idea
284:41 - I'll write one two three okay that means
284:43 - this value key means it will generate a
284:46 - key from this value and it is assigned
284:48 - to this key okay that is just for
284:51 - removing the error
284:53 - now let's save this
284:56 - and now you can see we have this card
284:59 - over here this elevated thing
285:02 - okay so now I think we should remove
285:04 - this separator Builder the purpose is
285:07 - understood over here and this
285:10 - can be changed to Builder
285:16 - okay so now you can see we have this
285:18 - card over here for each item
285:22 - okay now after this the next thing that
285:25 - I need to do is for dismissable I need
285:28 - to add a on dismissed property
285:31 - okay so over here after the key
285:34 - I'll write on dismissed and it takes a
285:38 - function which has the direction means
285:42 - the direction in which the item was
285:44 - dismissed
285:46 - and then for now I we can simply print
285:50 - the direction
285:53 - okay we can change it to according to
285:55 - the functionality needed later
285:58 - so let's save this
286:01 - and now let's try dismissing it
286:03 - so you can see this is dismissable and
286:07 - the value is being printed okay the
286:10 - direction is being printed so over here
286:12 - you can see dismiss Direction dot end to
286:14 - start which means this is the end this
286:17 - is the start and dismiss direction is an
286:19 - e num okay now if I do it from here so
286:23 - now you can see it is like
286:25 - start to end so I think you are
286:28 - understanding what I am trying to do
286:29 - over here this is the feature I was
286:31 - talking about we can simply remove an
286:34 - item from our list with a little bit of
286:37 - animation
286:38 - okay now however if I'll build this
286:41 - again I think all the items should
286:42 - return
286:44 - okay now let's rerun this that was
286:47 - giving us an error
286:53 - yes so you can see we have the list over
286:56 - here back now along with on dismissed we
287:00 - can specify a direction that will be
287:03 - used as the dismissed Direction like
287:06 - right now
287:09 - in the app you can see the item can be
287:12 - dismissed from end to start and can also
287:16 - be dismissed from start to the end but I
287:19 - want only to dismiss it from the end to
287:21 - start
287:22 - so in that case what we can do is inside
287:25 - this dismissible we can add a dismiss
287:29 - Direction
287:33 - okay not a dismissed Direction Just
287:35 - front Direction okay and over there over
287:38 - here we have just now seen we have our
287:40 - dismissed Direction enum
287:43 - like this and then you can see this is
287:46 - the these are all the values
287:48 - down means when we pull the item down
287:51 - and to start
287:52 - means the names explain themselves okay
287:56 - and I want this to only be valid for
287:59 - enter to start means the dismiss feature
288:02 - will only work when we try dismissing
288:04 - from the end to start
288:07 - okay now let's save this and see
288:10 - so now if I try dismissing it from this
288:13 - direction it will not work but however
288:16 - if I write is missing from the end to
288:19 - start it will force your work because we
288:22 - have restricted the direction from end
288:24 - to start only
288:26 - now
288:28 - when we are dismissing you can see we
288:30 - have this background over here now in
288:33 - flutter we can also
288:36 - specify what should be the background of
288:39 - every item when being dismissed okay so
288:42 - the general convention would be to add a
288:44 - delete sign okay so let's do that
288:48 - we have a background named parameter it
288:52 - will it takes a widget and for now it is
288:55 - a container
288:58 - okay
288:59 - now the container should have a color
289:03 - and the color is red
289:06 - okay
289:07 - let's format this first
289:09 - now it takes a child the child is an
289:12 - icon which will obviously be a delete
289:14 - icon so I'll use the icons here and then
289:18 - delete
289:20 - and then the color should be
289:24 - colors dot White
289:28 - okay and then the size can be around
289:32 - 40.0
289:36 - okay let's format this now after that I
289:39 - want the containers item to be aligned
289:42 - to the right because since we are
289:45 - dismissing it from the end to start
289:47 - where the end represents the right I
289:50 - want the child to be aligned at the
289:52 - right
289:53 - so I'll add the alignment as
289:56 - right so I'll use the alignment you know
290:02 - alignment Dot Center right that means in
290:07 - the center
290:09 - vertically and at the right horizontally
290:12 - okay and maybe let's add a padding from
290:15 - the end that is from the right otherwise
290:18 - the the
290:21 - delete icon will be at the end of the
290:24 - container means it will be sticking to
290:25 - the border of the container so let's add
290:29 - a padding
290:31 - and then again add a const before
290:34 - padding and margins because so it will
290:38 - not be belted again and again so const
290:43 - Edge insets
290:45 - dot only
290:47 - and it is only for right
290:51 - 20.0
290:54 - now let's save this and see
290:59 - so now when we dismiss this we can see
291:02 - we get this delete icon over here now
291:05 - this doesn't look very good because
291:09 - when we try to dismiss this it is not
291:13 - actually the card which is being
291:15 - dismissed it is a little bit surface
291:17 - beyond the cart which is dismissable
291:21 - okay so to fix that over here we can
291:23 - remove this padding from here
291:26 - and do a little bit design changes which
291:28 - is required but the purpose is fulfilled
291:31 - so I hope you understand how to use a
291:34 - dismissable
291:35 - okay and and one thing that I missed in
291:38 - dismissible was there is a confirmed
291:40 - dismiss option okay that means once the
291:43 - dismiss process has been done and still
291:45 - you want to confirm the user that are
291:48 - you sure you want to you want this to
291:51 - happen so then we can use this confirm
291:54 - dismiss
291:54 - okay
291:57 - so this will be for the video thank you
292:01 - welcome to programming knowledge so in
292:05 - this video we are going to discuss about
292:07 - a inbuilt function in flutter which is
292:10 - set State okay so what set state does is
292:14 - it informs flutter that the internal
292:17 - state of application has changed and
292:21 - probably we should rebuild the current
292:23 - interface means the current screen that
292:26 - the user is seeing which means that
292:29 - whenever we call the set State function
292:31 - this build method is executed once again
292:35 - okay so we will see what happens when we
292:38 - don't use set State and how set State
292:40 - comes to the rescue
292:42 - okay so first of all I'll remove that
292:45 - list I'll remove the entire body we
292:48 - don't need it over here
292:51 - okay and now I'll add our body a simple
292:54 - text in the center
293:01 - the child is a text
293:04 - the text is
293:06 - count okay so let's create the count
293:10 - variable over here
293:15 - that is zero
293:18 - now I'll increase the size so that it is
293:21 - visible so I'll add the style parameter
293:25 - it takes a text style widget
293:28 - okay and then over there we have font
293:31 - size
293:32 - okay so I can make the font size 20.
293:35 - now let's format it save it
293:40 - and you can see we can see a zero in the
293:43 - center okay so now what I am basically
293:46 - trying to do is whenever I click on this
293:48 - button instead of printing Fab pressed
293:52 - the counter should increment
293:55 - okay so this is exactly same as the
293:58 - starting project that we get when we
294:00 - create a flutter app okay so for that
294:04 - the simple process would be
294:08 - uh we can keep this print statement
294:13 - okay so the simple method would be we
294:15 - can write count plus plus
294:19 - now let's save this
294:22 - so now if I click on this button the
294:25 - counter should increment so let's see
294:30 - and you can see uh the print statement
294:33 - is executing but this count statement is
294:37 - not executing and that and I can say
294:40 - that by seeing in the counter over here
294:43 - it is still 0. okay so now uh what
294:48 - happened over here was that we the
294:50 - incrementing operation was done but that
294:53 - was that is happening internally and it
294:57 - is not reflected on the screen okay so
294:59 - this is when we use set State now what
295:02 - happened over here was that the value of
295:05 - count changed internally but the
295:08 - interface has no response to it so to
295:12 - give so to get a a
295:15 - so to get a expected response on the
295:19 - screen we can use the set State method
295:21 - so what I'll basically do is I'll simply
295:24 - use a write a set state
295:28 - over here
295:31 - so now another thing we can use set
295:34 - state only when we use a stateful widget
295:36 - if we try using set state in a stateless
295:39 - widget probably it will not work and
295:41 - give you some errors
295:43 - okay so now over here what will happen
295:46 - that as soon as the value of count will
295:49 - be changed the set State method will be
295:51 - called and that means as I told you just
295:56 - now that the build method will be called
295:58 - and since the build method will be
296:01 - executed again this Center will be
296:03 - executed again and then over here the
296:05 - new value of count can be seen
296:08 - okay so now let's
296:11 - try running this
296:18 - okay so now if I click on plus you can
296:22 - see the
296:23 - value is changing over here okay so that
296:26 - means we are getting the expected
296:28 - response
296:30 - okay so this is this is the place when
296:32 - we use set State okay now if you want
296:36 - you can keep this
296:39 - function inside set State also okay so
296:43 - it hardly cause uh changes anything but
296:46 - the general convention is to keep it
296:48 - inside set State the factors which
296:51 - actually change the state of the
296:54 - application should be kept inside the
296:57 - set State method
296:59 - okay so now let's save this again
297:03 - and then again it should work fine
297:06 - okay so you can see this was about set
297:09 - state it is a very important function
297:12 - and it will help you in a lot of places
297:16 - okay so the next method that we are
297:18 - going to discuss about uh it is not a
297:21 - discussion but rather an overview so the
297:24 - next method that we will see is the init
297:28 - state
297:28 - okay so it is similar to uh like on
297:33 - start that we have in Android if anyone
297:36 - is coming from Android background so
297:38 - what it basically does is it
297:41 - it is generally used for initializing
297:44 - some controllers and parameters some
297:47 - Global keys that we have in flutter okay
297:50 - so you might not be knowing what is a
297:52 - controller what is a global key in
297:54 - flutter but we will come to that later
297:56 - okay so to initialize such things we
297:59 - have a inbuilt function called init
298:02 - State okay and then over here it always
298:05 - have has a statement called super dot
298:08 - init state so now this is super comes
298:11 - from the concept of oops a concept of
298:13 - inheritance so what basically is
298:16 - happening over here is that init status
298:19 - already a method that is existing
298:22 - somewhere inside the flutter code okay
298:24 - and over here if we write super dot init
298:27 - state that means we are overriding that
298:30 - init State method in our init State
298:33 - method and that is the same reason we
298:35 - have a at the rate over right over here
298:38 - okay so now in the Senate State first of
298:41 - all we have a reference to the actual
298:45 - init state which is inside the flutter
298:47 - code that function will be executed and
298:49 - then after that all the
298:54 - initialization that
298:58 - we want to do
299:01 - okay so over here only we deal with the
299:03 - shared preferences checking if a user
299:06 - has logged in previously like we have
299:09 - the remember me feature all those stuffs
299:13 - work with init State okay so then the
299:18 - next method that I am going to discuss
299:20 - about is the dispose method so it is
299:24 - similar to
299:26 - uh on stop method if you are coming from
299:29 - an Android background okay so what it
299:32 - basically does is it it is used for
299:36 - closing all the existing things means uh
299:39 - disposing all the controllers disposing
299:42 - all the global Keys again we will
299:45 - discuss about controllers and Global
299:48 - Keys later but since we are initializing
299:51 - them it is kind of understood that it is
299:53 - necessary to dispose them as well okay
299:56 - so for the same reason we have this
299:58 - dispose method over here and now the
300:01 - trick part is that over here we after
300:04 - this super statement we write all the
300:07 - code button dispose we write all the
300:09 - code before the Super statement
300:12 - and the reason is that when this method
300:15 - is called this page this my home app
300:19 - means like this class will stop
300:21 - completely
300:24 - okay so I hope you understood about the
300:26 - three methods in its state dispose
300:30 - and set State okay and you can always
300:33 - refer to the documentation for a
300:35 - detailed explanation and better
300:37 - understanding
300:39 - thank you
300:42 - welcome to programming knowledge so in
300:45 - this video we are going to discuss about
300:47 - text field okay so text field is
300:50 - basically a widget in flutter which is
300:52 - used to take input from the user and by
300:56 - input I mean only text input okay so
300:59 - let's start
301:01 - so in the body
301:03 - inside our center with jet
301:07 - my child will be a textured
301:11 - sorry not a text with that but a text
301:13 - field
301:17 - okay then
301:19 - let's format it save it
301:23 - and now you can see we have our text
301:25 - field over here in the center okay so if
301:28 - I click on it then it gets selected and
301:30 - it is highlighted in blue color and then
301:33 - if I type anything it is shown in the
301:36 - screen
301:37 - okay so this is a text field now let's
301:40 - discuss about the properties
301:43 - of the text field
301:45 - okay so the first thing that we need to
301:48 - know is autocorrect so autocorrect is a
301:51 - named parameter that takes a Boolean
301:53 - value that is true
301:55 - or false and as the name explains itself
301:59 - it enables auto correction in that
302:01 - specific text field
302:04 - okay so this is one the next thing is
302:08 - auto focus
302:10 - okay so ah
302:12 - generally means at the starting
302:14 - autofocus is false but we can
302:18 - always make it true I mean that the
302:20 - default value of autofocus is false so
302:24 - what autofocus does over here is that if
302:27 - we open the screen and nothing else is
302:30 - selected then this text field will
302:32 - automatically be selected that means
302:35 - this text field will automatically have
302:38 - the focus okay so over here I'll
302:42 - try running this and then you can see
302:45 - this will have the focus automatically
302:47 - okay so let's wait for the Builder to
302:50 - finish
302:52 - and you can see it is automatically
302:54 - selected now if I remove this
302:58 - and then I try to restart this then that
303:02 - text field will not be selected
303:04 - automatically but we will have to do it
303:06 - manually
303:08 - okay so you can see as as we have
303:11 - commented out autofocus the text field
303:13 - is not selected and if we remove this
303:17 - comment then it will be selected
303:20 - so we need to do a hot restart
303:24 - and then you can see this text field is
303:27 - selected automatically
303:29 - okay so this was about autofocus now the
303:33 - next thing and we can say practically
303:35 - the most important thing in the text
303:38 - field is the controller
303:40 - okay so we are gonna discuss about
303:42 - controller so by using this controller
303:45 - we can get the value that we give us an
303:48 - input in the text field we can Define
303:51 - some preset value for the text field
303:54 - okay so let's see how to do those okay
303:57 - so to use a controller the for ideal way
304:01 - is to First Define a controller outside
304:03 - and then use it in the text field okay
304:06 - so let's see first of all I'll declare a
304:09 - variable and that is called
304:11 - text controller
304:14 - okay so now the next thing is to
304:17 - initialize it and as we discussed in our
304:20 - previous video to initialize the ideal
304:22 - ways using init state so inside in its
304:26 - state I will remove this comment
304:28 - and after the Super statement I'll write
304:31 - text controller
304:36 - is equal to text editing
304:44 - controller
304:49 - okay so now if you are thinking why it
304:51 - is a text editing controller so if you
304:53 - will hover over this controller you can
304:56 - see it takes a controller which is of
304:58 - type text editing controller okay so now
305:02 - since we have initialized it we also
305:04 - need to dispose it and for disposing we
305:07 - will again use the inbit function in
305:09 - flutter called dispose
305:18 - so now in this pose as we discussed in
305:21 - the previous video we write the dispose
305:24 - statements before the Super dot dispose
305:27 - so over here I'll write a text
305:28 - controller
305:32 - dot dispose
305:39 - okay so now our text controller is ready
305:42 - to use so I'll give that
305:45 - to this text field so text controller
305:48 - okay so now to trigger the printing
305:51 - function means to print the value inside
305:54 - this text field I'll add a floating
305:56 - action button
306:00 - so over here I'll simply used use an
306:03 - icon button
306:11 - and that sorry
306:14 - it has a icon
306:16 - and like for the icon I'll use the
306:20 - icon which it and inside that the icons
306:24 - enum and then I'll simply use that add
306:27 - icon which is the plus sign
306:31 - okay and then inside this I'll also
306:33 - write on pressed
306:36 - and in on pressed I'll print the value
306:39 - that is inside the text field
306:42 - okay so to print the value which is
306:45 - inside the text field we don't need to
306:47 - do much we simply write a print
306:49 - statement and then the controller name
306:53 - okay text controller
306:59 - dot text okay so this text actually has
307:04 - the text which is inside the text field
307:07 - means the text given as an input from
307:09 - the user and plus I also want to point
307:12 - out that the underscore which we have
307:15 - before text controller makes it a
307:18 - private variable okay so I have already
307:21 - discussed this it was kind of a reminder
307:23 - and it is recommended by flutter that
307:27 - wherever possible we should always use a
307:29 - private variables we should always use
307:32 - private variables so now let's try
307:35 - running this
307:36 - I'll save this
307:39 - now if I click on plus icon this should
307:42 - get printed on my console so let's see
307:47 - and it is giving us an error and the
307:50 - error is because we are initializing the
307:54 - text controller in init State and when
307:56 - we hot reload it basically only executes
307:59 - the build method but this init method
308:02 - and dispose method are not executed okay
308:05 - so this is a common mistake that many
308:07 - people make and the way to fix it that
308:09 - instead of hot reload we can do hot
308:12 - restart
308:13 - okay so once it has restarted now if I
308:16 - enter something let's say my name and
308:19 - press on this icon button over here so
308:22 - you can see the output is being printed
308:25 - on my console so this is how we use our
308:27 - controller to get the text that is given
308:30 - by the user and use it as and what
308:34 - according to your requirement okay so
308:37 - now the another thing that we can do
308:39 - using controller is to set an initial
308:43 - value a setup preset value
308:45 - okay so for that what I can do is in the
308:49 - text controller
308:53 - dot text I will give the preset value so
308:57 - let's say the preset value is
309:00 - programming
309:02 - knowledge
309:04 - so this means that whenever this screen
309:07 - will open that my home app dot dot
309:10 - screen will be the end screen seen by
309:13 - the user then over there in the text
309:16 - field the initial value will always be
309:19 - programming knowledge and then after
309:21 - that the user can change it as and
309:23 - however he likes OK so let's restart and
309:26 - see this
309:28 - okay so once the app has restarted you
309:31 - can see the text field already has a
309:33 - value and that is programming knowledge
309:35 - which was set bias over here
309:38 - okay so this is the use of controller in
309:41 - a text field now moving forward the next
309:45 - thing that we need to know is this
309:47 - enabled
309:48 - okay so enabled basically also takes a
309:52 - Boolean and it means that the text field
309:55 - is enabled or disabled for changing the
309:57 - values okay so by default it is always
310:00 - true
310:02 - but if we make it false then we will not
310:05 - be able to change the value of the text
310:07 - field okay so let's save this and see
310:11 - so now you can see it automatically got
310:14 - unselected and now if I try pressing
310:17 - this to select it or try typing anything
310:19 - nothing is happening because the enabled
310:22 - is false so now if we make it back to
310:25 - true or even remove this both are the
310:28 - same thing
310:30 - okay
310:31 - so let's save this
310:34 - and now if I try selecting this I am
310:36 - able to select and I am also able to
310:39 - edit so this was about enabled now the
310:44 - next thing is enabled interactive
310:47 - selection
310:49 - okay so this means that if the user long
310:54 - presses the text field then the entire
310:56 - text will get automatically selected and
311:00 - we will have an option to cut copy paste
311:02 - like the simple stuff that we do okay so
311:05 - this is by default true but if we want
311:08 - we can make it false okay so let's save
311:10 - this and see so now over here if I press
311:15 - and hold
311:16 - so then I get an option to select all
311:19 - and paste so if I select all then we
311:22 - have the option to cut copy and paste
311:24 - and now if I make it false then I will
311:27 - not be able to do these things
311:30 - so let's make it false I'll restart
311:38 - okay so now if I press and hold nothing
311:42 - is popping up over here like paste and
311:45 - select or stuff like that so those
311:48 - things are prevented like this
311:50 - okay so now the next thing is enable
311:54 - suggestion okay so this is basically a
311:57 - keyboard thing we can't see it on the
311:59 - emulator because the keyboard doesn't
312:01 - pop over here so what it basically means
312:04 - is that when you are typing something
312:06 - then it will show you suggestions just
312:09 - above the keyboard like that you would
312:11 - be seeing in many other apps if you type
312:13 - some something suggested keywords maybe
312:15 - three suggestions or four suggestions
312:17 - are showed just above the keyboard so
312:21 - that is by default true and if you want
312:24 - we can make it false
312:29 - okay so this was one thing
312:32 - now the next thing is
312:35 - keyboard type
312:38 - okay so keyboard type defines what type
312:41 - of keyboard should be used for that text
312:43 - field okay so for that we have a enum
312:47 - that is text input type
312:51 - okay so now this text input type has a
312:54 - few values
312:57 - okay so let's see
313:00 - so the first one is date time so it will
313:03 - automatically pop out a date time
313:05 - selector then we have an email address
313:07 - that means requests are keyboard with
313:10 - ready access to at the rate and Dot keys
313:14 - okay then we have a multi-line requests
313:17 - the default platform keyboard but
313:19 - accepts new line with the enter key
313:21 - pressed okay so what this means is that
313:24 - by default if when the keyword keyboard
313:27 - you press the enter key it basically
313:30 - sends the message or means moves to the
313:33 - next text or something like that but if
313:36 - we have a multi line then what will
313:38 - happen that if we click on the enter
313:40 - button it will go to the next line okay
313:43 - so I hope you are understanding then the
313:45 - next one is simple number that will show
313:47 - us a numeric keyboard
313:49 - then a phone then that will also show us
313:53 - a numeric keyboard with a ready access
313:54 - to asterisks and hashes
313:58 - then text that is a simple keyboard
314:00 - URL means it will have the ready access
314:03 - to
314:05 - backslash and Dot keys
314:07 - values and then means it is all possible
314:10 - enum values then visible password means
314:13 - it is generally used for entering
314:15 - password where we have both numbers and
314:18 - letters on the same screen okay so you
314:22 - can put anything according to your
314:24 - choice
314:24 - Let It Be email address for now
314:28 - okay so this was one thing
314:31 - and then the last thing that I want to
314:33 - discuss in this video is of secure text
314:37 - so that means that if we It Is by
314:40 - default always false but if we make it
314:43 - true then it is something like we see
314:46 - while entering passwords okay so if I
314:49 - save this
314:51 - then you can see our text has been
314:53 - obsecured
314:55 - okay so this was about text field now in
314:59 - the next video we will continue with the
315:01 - text field and discuss about decoration
315:04 - of the text field means whether it is a
315:07 - box what should be the hint text how to
315:10 - add a background color how to add a
315:13 - borders and stuff like that
315:15 - okay so this will be for this video I
315:18 - hope everything was clear thank you
315:22 - welcome to programming knowledge so in
315:25 - this video we are going to continue our
315:28 - discussion on text fields okay so in the
315:31 - previous video the last thing that we
315:33 - discussed was of secure text which means
315:37 - if we write something it will show us
315:39 - only dots okay that means if I write
315:43 - rishabh over here then instead of
315:45 - showing rishabh it is
315:47 - simply showing us the dots
315:50 - okay so I'll remove this for now
315:54 - the next thing uh rather important thing
315:57 - which we are going to discuss is
315:59 - decoration so means how we will decorate
316:02 - the text field so this decoration takes
316:05 - a widget called input decoration
316:10 - okay and then we will now discuss about
316:12 - the properties of input decoration okay
316:15 - so the first thing is content padding
316:18 - okay that means the padding which will
316:21 - be inside the text field means for the
316:24 - content inside the text field okay so as
316:27 - it is a padding it will take Edge insets
316:30 - so I'll write const
316:34 - inserts all and so as to Mark a
316:38 - significant change I'll make it
316:40 - 30.
316:43 - let's format and Save
316:45 - and now you can see we have padding 30
316:49 - pixels padding on top right left and all
316:53 - the sides so this is how content padding
316:55 - works okay now the next important thing
316:58 - is border okay means how to specify the
317:01 - Border so there are three options to
317:05 - specify border I'll use the most common
317:07 - one okay and that is
317:10 - outline
317:13 - input
317:15 - border
317:18 - okay so now this takes a border radius
317:23 - okay so for Border radius we'll use the
317:25 - Border radius dot circular named
317:28 - Constructor and I want to give it a
317:31 - radius of
317:32 - 20 from all the four sides
317:35 - okay and then another compulsory thing
317:38 - is to give a Border Side okay so even if
317:41 - you don't want to specify any thing
317:44 - inside the Border Side we still need to
317:46 - write
317:47 - simply Border Side means call The
317:51 - Constructor at least
317:53 - okay so this is an important step
317:56 - and it is rather a required step okay so
317:59 - now if I save this I should be able to
318:01 - see a border
318:02 - so now we can see we have the border
318:05 - around the text field okay and it has
318:07 - rounded Corners okay so it is not
318:10 - clearly visible let's add a padding over
318:12 - here
318:16 - and the padding is of 10 pixels from all
318:19 - the four sides yes so now it looks
318:22 - better so this is the
318:24 - Border Side now similarly we also have a
318:30 - enabled border okay the this also takes
318:34 - the same value and it is when this text
318:37 - field is selected okay and then
318:40 - similarly we have error border it also
318:43 - takes outline input border and it is
318:46 - when there is an error in that text
318:48 - field
318:49 - okay so these were the three types of
318:52 - border means three places where we use a
318:54 - border
318:56 - now suppose I want to add some color
318:59 - inside this text field okay so for that
319:02 - we have another property called fill
319:04 - color
319:05 - okay and let's decide our color let's
319:08 - say color start green
319:12 - okay and let's say dot with opacity
319:19 - okay so we don't have that feature now
319:21 - over here I'll simply give a 50.
319:24 - okay so now if I save this I should be
319:27 - able to see a greenish tint in my text
319:29 - field
319:31 - uh but it is not there because we mix
319:33 - missed something
319:35 - since we are giving a fill color we also
319:37 - need to tell the text field that it
319:40 - should be filled with the fill color
319:42 - okay so for that we have a failed
319:45 - parameter and it takes a Bool
319:48 - so I'll simply give it a true
319:50 - okay
319:52 - let's save this
319:55 - and now you can see our text field has a
319:58 - greenish tint okay means this fill color
320:00 - has been filled inside the text field
320:04 - okay now I'll remove this text from here
320:08 - okay and now we will add a hint text
320:11 - means as to depict what that text field
320:14 - is for and also the user will have ease
320:19 - in identifying what that text field is
320:22 - used for
320:23 - okay so let's say hint text
320:28 - and the hint text takes a string
320:35 - yes we can see it takes a string so
320:37 - let's give it a string and let's see
320:40 - enter name
320:45 - I'll save this
320:47 - and now we can see we have a hint text
320:50 - enter text and if you start typing
320:52 - anything it vanishes
320:55 - okay now we can also design uh style
320:58 - this text over here and for that we have
321:02 - a hint Style
321:06 - okay so the hand style takes our text
321:09 - style widget
321:12 - foreign
321:14 - [Music]
321:18 - red so let's see
321:24 - okay so it is giving us an error
321:26 - somewhere
321:27 - let's save this again
321:29 - and now we can see the hint text station
321:31 - right so we can change the hint text we
321:35 - can style the hint text like this now
321:39 - another thing that we have is a icon
321:42 - means sometimes for a design
321:45 - requirements we want an icon and a text
321:48 - field corresponding to it so for that we
321:52 - already have a icon parameter in our
321:55 - input decoration 300 takes a widget so
321:58 - since it is an icon I'll use an icon
322:00 - widget and then I'll use one of the
322:04 - already present icons okay so let's say
322:08 - icons dot person
322:14 - okay
322:22 - now let's save this
322:29 - and now you can see we have a icon of
322:32 - the person over here
322:34 - okay so this is how we use icons
322:37 - now the next thing that I want to
322:40 - discuss is a label text okay so
322:43 - sometimes the text Fields also have a
322:46 - label okay so simply label text it is
322:49 - very similar to hint text the label text
322:52 - takes a string and it is name
322:55 - okay and it also takes a style and that
322:58 - is a text type
323:00 - so label Style
323:03 - and it takes a text Style
323:08 - and let's give this some another color
323:11 - color dot
323:14 - let's say yellow
323:18 - okay the spelling is wrong over here
323:38 - okay so now we can see we have a label
323:41 - called name over here since my color
323:44 - colors are very contrasting we are not
323:46 - able to see that
323:48 - okay so this was the label text and
323:51 - label style now similar to this hint
323:54 - text hint style label text label style
323:57 - we have a prefix text
324:01 - and a prefix style and a prefix icon
324:05 - okay so the difference between simple
324:07 - icon and prefix icon is that in case of
324:10 - prefix icon this icon will be inside the
324:14 - text field and then before the text
324:16 - field we will have a small space for the
324:19 - text and that is the prefix text and
324:22 - similar to prefix text we also have a
324:25 - suffix text and a suffix Style
324:29 - okay so these are the four types of text
324:32 - that we can add in a text field
324:39 - okay so this was about input decoration
324:43 - and format this now back in the text
324:46 - field there are a few methods that we
324:49 - should know okay so the first method is
324:52 - on changed okay so this will be fired
324:55 - whenever the value of text field is
324:58 - changed okay so it receives a value
325:01 - and then the function okay so this value
325:04 - is the actual value in the text field
325:07 - means the present value in the text
325:09 - field Okay so
325:11 - to check I'll simply print the value
325:19 - okay so I'll save this
325:31 - okay so now let's enter something
325:34 - so you can see as I am typing here it is
325:36 - being printed over here because as soon
325:38 - as I start typing it means it is it has
325:42 - started changing okay so this on changed
325:45 - parameter is called so if I write
325:47 - whichever it will print after every
325:49 - keystroke because after every keystroke
325:51 - some value is being added or removed and
325:54 - that counts as a change
325:56 - okay so this is one method that we have
325:59 - now similar to this we also have another
326:02 - method on editing complete so this
326:06 - method is also very similar to this
326:08 - unchanged method okay so this method is
326:12 - called when we move to the next text
326:14 - field always submit the or we click on
326:18 - the submit button okay so this was on L
326:21 - on editing complete now after that we
326:25 - have on submitted okay so on submitted
326:28 - also when we click on the submit button
326:30 - this function is called okay so these
326:33 - are basically related to forms okay so
326:36 - this on submit function and on editing
326:38 - complete functions are used generally
326:41 - when we are working with forms
326:43 - okay so then after that the next feature
326:46 - is on tap and as the name suggests it
326:49 - will work whenever the text field is
326:52 - tapped okay then after it also takes a
326:55 - function similar to on changed okay and
326:59 - then the next
327:00 - thing that I want to talk is
327:03 - read only okay so this means that
327:06 - whether the we will be able to change
327:08 - the text present in the text field or
327:10 - not it is very much similar to enabled
327:14 - okay then after that we have style okay
327:17 - which takes a text style to design the
327:21 - text to style the text which will be
327:23 - given input
327:24 - from the user okay then after that we
327:27 - have text align
327:29 - okay so to align the text horizontally
327:32 - okay has a text align enum
327:36 - okay
327:40 - and then over here we can see we have
327:42 - these options Center so the text will be
327:44 - aligned in center and so in the end
327:47 - justify so the text will be justified
327:49 - wherever it seems right then left right
327:52 - start and means all the values are
327:54 - understandable
327:55 - now similar to text align we also have
327:59 - text align vertically okay because text
328:02 - align Works horizontally so there is
328:04 - another feature called text align
328:06 - vertical okay so in this we align the
328:09 - text vertically
328:11 - okay then after that we have this text
328:14 - input action okay so this uh depicts
328:18 - what will be what will happen when we
328:21 - click on the next button or the done
328:24 - button or the tick we have in our
328:26 - keyboard that displays on the screen
328:28 - okay so this text input action has a
328:32 - text input action in a enum
328:42 - okay and then continue action means it
328:44 - will go to the next field done action
328:47 - means it will call the submit function
328:50 - means it will automatically submit and
328:52 - then emergency call means these are some
328:54 - features it is not generally used but if
328:57 - you want we can you can give a read over
329:00 - here all the things are pretty
329:02 - descriptive
329:04 - okay so this was about a text input
329:06 - action and the last thing in text field
329:10 - would be
329:11 - text
329:12 - Direction
329:14 - okay so that means if we start typing
329:17 - how the text will start flowing in okay
329:20 - so by default it is left that means if
329:23 - we type the you the texts are flowing
329:26 - from the left if it is Center then the
329:29 - cursor will be in center and whenever we
329:31 - add something it will flow flow in both
329:33 - the sides and the same goes for right if
329:37 - with a text direction is right it will
329:40 - flow in
329:41 - from the right
329:44 - okay so I hope you are understanding all
329:46 - these things
329:48 - so these were the pretty much it about
329:51 - text field I hope everything was clear
329:54 - thank you
329:56 - welcome to programming knowledge so in
329:59 - this video we are going to create a
330:01 - small project by using all the things we
330:04 - have learned till now and we will also
330:07 - discuss about few other widgets in the
330:09 - go
330:10 - okay so the project that we are going to
330:12 - make is very simple we will simply have
330:15 - a text field that will take the input
330:17 - from user and then we will display the
330:19 - table of that input okay so the input
330:22 - over here is can only be a integer okay
330:26 - so let's start
330:28 - first I'll remove this entire body we
330:31 - don't need it
330:37 - then we also don't need this Floating
330:40 - Action button
330:42 - okay so now uh first we will
330:46 - uh write a container okay so this makes
330:50 - the most sense by starting the body with
330:52 - a container
330:54 - okay then con inside container we will
330:57 - have a child and the child will of
330:59 - course be a column
331:04 - okay so now this column takes children's
331:09 - let's format this and then our first
331:11 - child will be a text field to take the
331:14 - input
331:15 - so text field
331:17 - and then we will give this the same
331:20 - controller that we have used earlier
331:22 - while discussing about text field
331:24 - so that was text
331:28 - controller
331:31 - okay so now let's save this
331:36 - and we can see we have a text controller
331:39 - with programming knowledge written in it
331:41 - and that is because in the init State we
331:44 - have initialized the text of this
331:46 - controller with programming knowledge
331:49 - so I'll remove this or maybe I'll change
331:52 - it to 2 so that means that by default
331:54 - our program will show the table of 2.
331:58 - okay so let's save this and see
332:01 - and over here still it is programming
332:04 - knowledge because it is inside init
332:05 - state
332:06 - it is not
332:09 - executed again so we will do a full
332:12 - restart
332:17 - and it will take some time
332:20 - and we have 2 over here
332:22 - now let's add the table below that and
332:25 - so to add the table there are many ways
332:28 - the easiest way would be to use a list
332:31 - view okay so I'll simply write list View
332:37 - dot Builder
332:39 - and then this builder takes a few things
332:41 - first one is
332:43 - item count
332:45 - okay and we want to display the first 10
332:48 - values of the table
332:50 - then it takes a item Builder okay which
332:54 - takes a function with two values
332:56 - the first one is build context
332:59 - and I'll call it context
333:02 - the second one is index
333:04 - okay so now over here I'll simply return
333:07 - a
333:08 - list tie
333:10 - okay
333:11 - and in the list tile in the title
333:14 - section we will have the value okay so
333:17 - in title
333:18 - the title Takes A text will check
333:23 - okay and then over here we'll use
333:26 - string interpolation to multiply and
333:29 - display the values both at the same time
333:32 - okay so I can get the
333:35 - position by using this index
333:38 - so index now since index starts at 0 and
333:41 - we plan on showing our table from 1 we
333:44 - need to add 1 to the index
333:48 - okay and then we surround it with the
333:50 - brackets as in this gets executed first
333:53 - and then over here in this controller we
333:57 - have the value that is given as the
333:59 - input
334:00 - Okay so
334:02 - what we will do is we'll simply multiply
334:04 - it with
334:06 - text controller
334:09 - dot text okay so now this will not work
334:13 - because this text is in string type and
334:16 - to multiply we need an integer okay so
334:19 - to convert string to integer we have our
334:22 - inbuilt function in Dot and we have had
334:25 - one video on that so that is inter dot
334:28 - pass okay so anything any value inside
334:31 - this parse method gets converted to
334:34 - integer only if possible if it is not
334:37 - possible then it will give us an error
334:39 - okay so now let's try running this and
334:42 - see what is the output
334:44 - okay so you can see as soon as I tried
334:48 - to run this I got a bunch of errors
334:50 - and that is because over here we have
334:53 - tried to put our list view inside a
334:56 - column so column is also type of a list
334:59 - where we show values one after another
335:01 - and in list view the name justifies it
335:04 - shows values one after another so they
335:07 - both do the same thing and since they
335:09 - have been merged they Clash
335:12 - so to solve this what we can do is we
335:15 - can give the list view a specific height
335:18 - so that that means that our list view
335:21 - will only be in a section of 200 pixels
335:24 - okay any value of the list that exceeds
335:27 - that 200 range will be scrollable
335:31 - okay so to give the height the
335:34 - one or one option is to use a container
335:37 - okay and then other option which is also
335:41 - a very important option
335:43 - and that is called a sized box
335:47 - okay so I'll use a sized box so not only
335:51 - over here sized boxes used in all the
335:55 - places where we just need to specify the
335:57 - height and the width so sized box takes
336:01 - three parameters that is height width
336:03 - and child so child is already over here
336:07 - width is not required I'll simply give
336:11 - it a height of let's say 300 pixels okay
336:14 - so any value more than that that will be
336:17 - in the scrollable region
336:19 - okay so let's save this
336:23 - and then we can see we have the table of
336:26 - 2 over here the mathematics is correct
336:28 - means our this calculation is working
336:31 - fine
336:33 - and then you can see this table is only
336:36 - over till here okay all the rest Things
336:39 - Are scroll level that means it is not
336:42 - going beyond the 300.
336:45 - okay so this is the beauty of sized box
336:48 - it is used to specify height and width
336:51 - of almost every widget okay we can use
336:53 - it everywhere to specify a height and
336:55 - width
336:56 - okay so this is one possible way to
336:59 - solve the error the next possible way
337:01 - which makes more sense is to use all the
337:04 - extra space that is left okay means we
337:08 - have the text field till here then after
337:10 - this all this space is unused and we can
337:13 - use that to show the table
337:16 - okay so to get all the unused space we
337:20 - have another widget in flutter and that
337:23 - is called expanded
337:27 - okay so what it basically will do is
337:30 - that it will expand in all the region
337:32 - that is unused okay so since it expands
337:36 - it doesn't need a height it expanded
337:38 - only takes a child
337:41 - okay so now let's save this
337:45 - and you can see it took the or it took
337:48 - all the space that was left
337:50 - okay so now we can see the table is
337:53 - working fine now let's try to change the
337:56 - value and subsequently change the value
337:58 - of this table okay so for that we need
338:02 - to
338:03 - deal with this controller okay so now to
338:07 - confirm that the value has been changed
338:09 - means to tell the program to render the
338:12 - table according to the new value we will
338:14 - again add a floating action button
338:16 - okay so that will be let's say an icon
338:20 - button
338:23 - is
338:26 - inside a icon widget
338:32 - and the icon says icons dot done that is
338:37 - nothing but a tick mark and then after
338:40 - icon we have a on pressed method and
338:43 - then in this on pressed for now let's
338:45 - simply
338:47 - print the value
338:49 - so print
338:54 - text controller
338:58 - dot text
339:01 - okay so let's format this and save this
339:07 - okay so now once this is done I'll
339:10 - change the value from 2 to 3 and then
339:13 - press on this icon button and we get the
339:15 - new value over here
339:18 - so now this means that whenever we press
339:21 - on this that means we are telling the
339:23 - program that we have entered some new
339:25 - value and render the program according
339:27 - to it okay so now over here you can see
339:30 - in the list view it automatically takes
339:33 - the latest value present in the text
339:36 - controller okay so to render the new
339:40 - value all we need to do is call the set
339:42 - State once again and all the other works
339:45 - will be done on its own
339:46 - okay so let's try doing that
339:53 - over here whenever that tick button is
339:56 - pressed first of all we'll print the new
339:58 - value and then simply set state
340:05 - foreign
340:19 - and now you can see since our value was
340:22 - 3 it has automatically rendered the
340:24 - table of three now let's change it to 5
340:27 - press on this stick and you can see the
340:30 - values are updating automatically
340:33 - can give any vague value and that will
340:36 - also work okay so
340:39 - and this is how we combine few things
340:41 - and may work okay so now if you want you
340:46 - can decorate this text field if we can
340:48 - also decorate this list tile okay so
340:52 - this is how we link uh widgets together
340:55 - with each other and subsequently make a
340:58 - complete app that is ready to be
341:00 - published on Play Stores thank you
341:04 - welcome to programming knowledge so in
341:07 - this video we are going to discuss about
341:09 - grid View and flutter so grid view is
341:12 - nothing but a scrollable 2d array of
341:14 - widgets so let's directly jump into the
341:18 - code
341:19 - so we don't need this text controller in
341:22 - its state and dispose for now we neither
341:25 - need this
341:27 - body
341:28 - or The Floating Action button
341:31 - okay so now let's start creating grid
341:35 - view so the widget name is grid View
341:41 - now there are too many parameters in the
341:45 - grid view we will discuss only which are
341:47 - important and which are mostly used
341:50 - okay and if you want to know about all
341:52 - the other parameters you can of course
341:54 - refer to the documentation
341:57 - okay so the first parameter is a scroll
342:00 - Direction it is very similar to the one
342:02 - we had in list view it takes a value
342:05 - from an axis enum okay and it defines
342:09 - whether the list will be scrollable in
342:11 - horizontal direction or in vertical
342:13 - Direction by default its value is
342:16 - vertical
342:17 - okay then after that the next thing that
342:20 - we should know is reverse so this is a
342:23 - Boolean value if we give it to true if
342:25 - we give the value true then the list
342:28 - from which the grid view is generated
342:30 - will be reversed and if we give it as
342:34 - false then the list will not be reversed
342:36 - by default the value of reverses
342:39 - false so let's try giving it true and we
342:43 - will see what is the output
342:45 - okay now the next thing is controller
342:48 - okay so the the controller in Grid view
342:53 - takes a widget of type scroll controller
342:56 - so let's create a scroll controller
343:02 - now scroll controller is stored as a
343:06 - state variable and it is used when the
343:09 - state rebuilds that means when the set
343:12 - State method is called then flutter
343:15 - internally uses this scroll controller
343:18 - to get the position of user in that list
343:22 - view in that grid view okay so suppose
343:25 - if we are viewing a grid View and we are
343:28 - at the 100th row or the
343:33 - column okay so then that position is
343:36 - stored in scroll controller and now if
343:39 - internally due to some background
343:41 - actions set state is called the build
343:44 - method is re-rendered then instead of
343:47 - star instead of going back at the
343:51 - starting of the grid view the user will
343:54 - remain at that 100th column or row of
343:58 - the grid view okay so that is what a
344:00 - scroll controller is mainly used for
344:04 - and it comes with some parameters okay
344:07 - and that is initial offset value initial
344:11 - scroll offset so by this we can Define
344:14 - the
344:16 - offset that will already be on the left
344:20 - side or the top side of the scroll level
344:24 - Grid view okay that means if the grid
344:28 - view would start from 0.00 comma zero
344:32 - axis and if we set the initial scroll
344:35 - offset to 20 then if our scroll
344:39 - direction is vertical then it will start
344:41 - from 0 comma 20. if our scroll direction
344:44 - is Axis dot horizontal then it will
344:47 - start from 20 comma zero so I hope you
344:50 - are understanding what I am trying to
344:52 - say is some part the part that we Define
344:56 - over here in initial scroll offset will
344:59 - be left out will already be considered
345:01 - as scrolled
345:04 - okay so that is what initial scroll
345:06 - offset is used for and another thing is
345:10 - keep scroll offset that means to
345:13 - tell the system to use that scroll
345:16 - offset defined by the programmer or the
345:19 - developer
345:20 - okay so this was about controller
345:24 - now the next thing which is rather a
345:28 - very important thing is physics
345:31 - so physics takes a widget of scroll
345:34 - physics
345:37 - okay
345:39 - so now this scroll physics is not used
345:43 - that much but everyone should know what
345:46 - this scroll physics is
345:48 - for what this for scroll physics is used
345:51 - when is this used okay so it is used to
345:54 - determine how a scrollable widget will
345:57 - behave
345:59 - when the user reaches the maximum scroll
346:01 - extent or when the user stops scrolling
346:05 - okay means the action the reaction to
346:09 - every user action
346:12 - is defined in this scroll physics now
346:15 - the normal fee normal reactions that we
346:19 - see that if we stop scrolling the list
346:21 - stops if we click on it it gets selected
346:25 - so all those are predefined and we don't
346:27 - need to do anything
346:30 - and if we want we can change those
346:34 - okay so the next thing that we have is
346:36 - padding and then as we know padding
346:39 - takes an edge inserts the geometry value
346:42 - so let's give it a padding as inserts
346:45 - geometry dot all
346:50 - as inserts not all I am sorry as
346:53 - inserts.org 10.0
346:56 - okay so now the next thing is one of the
347:01 - most important thing in Grid View and
347:03 - that is grid delegate okay so uh
347:07 - delegate that controls the layout of the
347:09 - children within the grid view okay so
347:12 - graded delegate now there are many types
347:14 - of delegate the most commonly used
347:17 - delegate type is sliver grid delegate
347:21 - with fixed access count okay so don't
347:25 - get confused this is a single widget
347:27 - name okay so let's start typing sliver
347:32 - great delegate with fixed access count
347:36 - okay so now this means that our cross
347:40 - axis will be fixed
347:43 - so now over here it takes a few things
347:46 - the first one is cross access count so
347:49 - let's say I want a column of a row of
347:53 - three values a row should have three
347:55 - values
347:56 - so I'll write 3
347:58 - then after that we have a child aspect
348:02 - ratio so over here we Define what will
348:05 - be the aspect ratio of every child by
348:08 - default it is one
348:10 - point zero we can change it let's say or
348:14 - 1.0 seems fine if you want to change
348:17 - something you can
348:18 - okay so I'll remove the child aspect
348:21 - ratio now the next thing that we have is
348:23 - cross axis spacing and my next main axis
348:26 - spacing so this will this is used to
348:29 - define the spacing between each item
348:32 - cross axis spacing for the column wise
348:36 - for column wise and Main axis spacing
348:39 - for row wise
348:40 - okay so I hope all these things are
348:43 - clear
348:44 - and then another important thing or the
348:47 - rather the necessary thing is children
348:50 - means what we will show inside the grid
348:53 - View
348:55 - okay so now to display something first
348:58 - let's create a simple list
349:01 - a list of type integers
349:06 - call this call It Dummy
349:09 - and it has a few values
349:14 - it has eight values
349:18 - okay so now over here we will again use
349:20 - the mapped method so dummy
349:25 - dot map
349:29 - dot to list
349:31 - and now over here I want to return a
349:33 - container
349:37 - okay of
349:39 - I'm sorry container of height
349:44 - 100.0
349:45 - with 100.0
349:49 - color should be colors
349:52 - dot red
349:54 - alignment should be
349:57 - alignment Dot Center that means the
350:01 - child should be in the center of this
350:02 - container and the child is nothing but e
350:08 - okay so I'm sorry e should be inside the
350:11 - text
350:13 - and then I'll use a string interpolation
350:18 - which is better than using two string
350:21 - because we have more accessibility we
350:23 - can add more things in the string and
350:25 - all the stuff
350:26 - so let's format this save this see if we
350:30 - have some errors
350:31 - so now since we don't have any error we
350:34 - should be able to see all the values so
350:37 - now since the first thing that I would
350:39 - like to mention is that since we have
350:41 - written reverse as true then the first
350:44 - value 1 is starting in the last row so I
350:48 - hope you get my point it is not the last
350:51 - item but in the last row so this is a
350:55 - very clear confusion please don't get
350:57 - confused
350:59 - okay now let's try adding some spacing
351:03 - main axis spacing can be 20.0
351:10 - so we have the spacing over there now
351:13 - cross axis spacing can be 20.0 again and
351:16 - that also so we'll get some
351:19 - spacing over here
351:26 - now
351:27 - uh we need to know why is this grid View
351:31 - at the bottom
351:33 - Okay so
351:35 - let's try surrounding it with a column
351:39 - Maybe
351:40 - because column brings everything to the
351:42 - top
351:44 - so that will not work
351:51 - okay maybe if we remove this reverse
351:53 - then it should go at the top because the
351:57 - general practice the general behavior of
351:59 - flutter is to start from top and yes
352:02 - so uh as you saw and I also learned a
352:06 - new thing here if we use reverse then it
352:09 - also reverses the alignment it also
352:14 - reverses the position means instead of
352:17 - starting from Top it starts from bottom
352:19 - instead of being
352:22 - yeah start aligned it is and aligned so
352:25 - these are a few things that we learned
352:28 - today
352:29 - and I hope the concept of grid view is
352:32 - clear
352:33 - thank you
352:36 - welcome to programming knowledge so in
352:39 - this video we are going to discuss about
352:41 - two things which are very important
352:43 - while we develop and flutter so the
352:46 - first thing is Media query now what is
352:49 - media query and where does it comes in
352:50 - play
352:51 - so suppose you have an app okay and then
352:55 - that app has a container and you have
352:57 - given it a static height of 100 and a
353:00 - static width of 100 so now suppose if
353:04 - the tap runs on 10 different mobiles
353:07 - then that there is a very high
353:09 - probability that all those 10 mobiles
353:13 - will have different screen size
353:15 - so now suppose if someone has a big
353:18 - mobile then the 100 height and 100 width
353:22 - container will take a very small amount
353:25 - of space now suppose someone has a
353:28 - mobile with small screen size then that
353:30 - hundred
353:32 - as height and 100 as with 100 pixels
353:35 - will take a very large space
353:38 - okay so now you understand that as the
353:41 - screen size changes the look and feel of
353:44 - your app will also change and that is
353:47 - not a very good ux quality that is not
353:50 - at all a good quality that is a dismerit
353:52 - in your app it should never happen
353:54 - Okay so
353:56 - to avoid such kind of problems we have
354:01 - media query and flutter so by using
354:03 - media query we can get the current
354:06 - height and width of the mobile means the
354:09 - mobile on which the app is running and
354:11 - then we can render accordingly okay so
354:15 - now over here I have only one mobile so
354:18 - I will not I will not be able to show
354:21 - you some demo you can try on your own
354:23 - with a two three different devices
354:26 - okay so let's start I'll remove this
354:29 - grid view we don't need it anymore
354:32 - we also don't need this list
354:36 - okay so now our body will simply be a
354:40 - container
354:44 - can the height of container is 200
354:48 - the width of container is 200
354:52 - the color of container is red
355:00 - and let's format this save this
355:04 - so now we have a container like this
355:06 - let's bring this in Center
355:14 - okay sorry this will be small
355:17 - alignment Dot Center
355:25 - Okay so
355:27 - we need to surround it by a center I'm
355:30 - sorry
355:33 - yes we can also remove this
355:39 - so now we have a container of height 200
355:42 - and of width 200 in the center of the
355:45 - screen now on this screen means the
355:49 - screen of iPhone 11 it looks fine okay
355:52 - but now if I open on some older versions
355:56 - of iPhone like iphone 5 iphone 6 where
356:00 - the screen is only around
356:03 - 50 to 60 percent of what it is right now
356:06 - then this same container will take a
356:09 - very large amount of space in the
356:14 - screen so we don't want that to happen
356:17 - so to fix that we are gonna use media
356:20 - query and to use that we simply write
356:23 - media query
356:25 - dot off
356:27 - context dot size
356:30 - dot width
356:32 - divided by 3.
356:35 - okay so whatever the width is that will
356:38 - be divided by 3 and since we want it to
356:41 - be a square we will give the same to
356:44 - height oh sorry first was height so to
356:47 - get the width of the screen we write
356:50 - this media query dot off dot context dot
356:53 - size dot width okay so now let's save
356:56 - this
356:58 - okay so we still have a
357:02 - tangle I'll
357:04 - make it half
357:06 - okay so now over here the containers
357:11 - width is half of the Mobile screen so
357:15 - now uh suppose if we open in any other
357:19 - mobile then also the container's width
357:22 - will be half of the mobile okay so that
357:25 - means the height and widths are given
357:28 - dynamically so for different mobiles no
357:31 - matter what is the screen size the look
357:34 - and feel of your app will be same
357:37 - so this is how we get the width we can
357:40 - similarly get the height
357:43 - this will this line will return as the
357:46 - height of the current Mobile screen so
357:48 - right now the height of this container
357:51 - is half of the height of the screen
357:54 - so now we use a media query uh very
357:58 - rarely these are the no means we use
358:01 - media query only for getting the height
358:04 - and width so there are other uses of
358:06 - media query which are used very rarely
358:08 - and that is not that much important but
358:12 - if you are curious and you want to learn
358:14 - you can surely refer to the flutter
358:17 - documentation
358:18 - so now the next thing that I'm gonna
358:20 - talk about is navigation like we can
358:24 - practically make no app without
358:26 - navigation
358:28 - okay so let's create another screen
358:31 - so we can create a new class over here
358:35 - I'll simply write a stateless widget and
358:38 - then the name of the class but that is
358:41 - not suggested by flutter flutter says
358:44 - that in each file there should only be
358:47 - one state widget a class that extends
358:49 - straight to that no matter it is a
358:51 - stateful or a stateless widget
358:53 - okay so let's create another file
358:57 - we'll call it screen 2 Dot Dot
359:01 - now over here also I'll import material
359:04 - that is very important
359:06 - and then I'll create a stateless widget
359:09 - and I'll call it
359:11 - screen 2.
359:13 - now this has a scaffold
359:18 - and the body and in body
359:21 - inside a center widget we have a child
359:24 - that is at next and that says
359:28 - screen too
359:34 - okay so this is done
359:36 - now let's try navigating from screen one
359:39 - to screen two from our home app screen
359:42 - to the screen too so we need a button to
359:45 - trigger and the most easy way is to
359:48 - create a floating action button I'll
359:49 - simply create a floating action button
359:54 - okay on press to that is what we are
359:57 - gonna do
359:58 - now we need to specify the child I guess
360:02 - yes we have the child and the child is
360:05 - an icon and the icon is
360:11 - icons dot play that can also refer as a
360:15 - next
360:18 - okay we don't have anything called play
360:21 - so we can give any icon that is just for
360:25 - understanding purposes
360:28 - now now let's talk about navigation so
360:31 - to navigate there are two methods we
360:34 - will see both of them okay so on press
360:38 - means when it is pressed we want to
360:40 - navigate
360:41 - Okay so
360:43 - to navigate we write Navigator
360:47 - dot of context
360:50 - dot push
360:52 - so now consider navigation as a stack we
360:56 - push means we open another screen on top
360:59 - of the first screen then we have pop and
361:03 - push
361:04 - okay pop
361:09 - then we have pop and push okay so that
361:13 - means that the current screen will be
361:15 - popped and a new screen will be pushed
361:18 - so that is used when we don't want to
361:21 - navigate back to the previous screen
361:23 - okay and then we have this pop so that
361:26 - to close the screen and go to its parent
361:29 - screen means from where it was
361:31 - redirected okay so these are three
361:34 - methods that we need to know all the
361:36 - rest are not that necessary
361:38 - so the first one is push
361:41 - so now inside push we write the
361:45 - route name the class name where we want
361:47 - to push okay so for that we again have a
361:51 - material
361:53 - page route widget okay which takes a
361:59 - builder now since it is a builder it
362:01 - will always take a function which has a
362:04 - build context so this is almost a
362:07 - generalized thing in flutter wherever we
362:09 - see a builder it will take a function
362:11 - that
362:13 - has a built context might be there are
362:16 - some more added values but build context
362:18 - is always there
362:20 - Okay so
362:24 - context now I'll not simply call this
362:27 - context as it is not a good practice
362:31 - we write it build context
362:35 - and then over here we write the class
362:37 - name so our class name is screen two so
362:41 - over here we will simply write screen
362:45 - two
362:48 - okay so now this is done now if we click
362:51 - on The Floating Action button we should
362:54 - be redirected to screen two okay
362:57 - so if I click on this I am being
362:59 - redirected to screen 2. now since I said
363:02 - it is it acts like a stack and over here
363:05 - we have push that means this screen is
363:09 - on top of its parent screen that is the
363:11 - screen from which it has originated
363:13 - which is nothing other than Maya so now
363:16 - over here if we come back we can return
363:18 - to the
363:19 - screen from where it started okay
363:24 - so this is one thing now suppose I don't
363:26 - wanna return then I'll simply write pop
363:29 - and push
363:31 - okay now over here we have pop and push
363:34 - name so we'll also see what this named
363:37 - means
363:40 - okay now on screen two
363:43 - let's create another Floating Action
363:45 - button I'll
363:47 - okay uh Floating Action button
363:51 - that takes a child the child is again an
363:54 - icon
363:55 - and inside I can we will use the icons
363:58 - enum and this time let's use
364:01 - some other
364:03 - icon any icon will work
364:06 - and then over here on pressed
364:10 - we can simply write Navigator
364:15 - dot off
364:17 - dot pop
364:19 - okay so pop is used to return to the
364:22 - screen from where it has originated
364:25 - so this is all right
364:30 - I don't know what's the error over here
364:44 - okay
364:45 - there is some error okay this is not
364:48 - required no
364:51 - over here we have Push
364:54 - I am sorry for the glitch
364:56 - so now let's save this restart it
365:03 - so now over here if I click on this I am
365:06 - taken to the next screen and again if I
365:08 - click on the button I am taken back to
365:11 - the screen from where I started that is
365:13 - means we are popping that screen out
365:16 - okay and sorry for the icons they are
365:18 - not at all relatable
365:20 - okay so this is one method of navigation
365:23 - let's see another method of navigation
365:24 - and that is called named navigation okay
365:29 - so for that over here in our
365:32 - material app
365:35 - we need to specify the routes the named
365:38 - routes okay so for that it has a routes
365:43 - parameter that takes a map then the
365:47 - first one is the route name the key
365:50 - value is the route name I'll call it
365:52 - screen 2.
365:55 - okay and then it again takes a build
365:57 - context
366:01 - and then it will simply call screen
366:04 - 2.
366:09 - so now over here it is like this so now
366:12 - instead of writing so much so many
366:15 - things we'll simply write the Navigator
366:19 - dot off
366:22 - context dot push named
366:26 - so now push named and simply will write
366:28 - the route name which is nothing other
366:30 - than screen
366:32 - two
366:37 - okay so I think there is some error okay
366:40 - it will not be like this yes let's save
366:43 - this
366:45 - let's restart
366:49 - and now if I click on this it goes to
366:53 - the next screen and if I click on this
366:55 - then it pops back to the previous screen
366:57 - so the flow is still the same everything
367:00 - is working fine and this is the best way
367:04 - to navigate from one screen to another I
367:07 - personally prefer this way means
367:10 - creating a route giving it a name and
367:12 - then calling that name from
367:15 - all the places where I want to navigate
367:17 - and the more better version that I use
367:21 - is I don't write it over here
367:23 - okay I'll I write the route name for
367:27 - that screen inside that screen okay so
367:30 - over here I'll create a static constant
367:34 - route name
367:38 - okay and then over here I'm sorry
367:41 - and then over here I'll simply paste
367:43 - this
367:45 - okay so now by doing this I can avoid
367:48 - the chances of making a spelling mistake
367:50 - plus am I another classes will not know
367:53 - what is my route name okay so it is kind
367:57 - of protecting your data as well so now
367:59 - over here I'll write screen
368:02 - to
368:03 - dot route name since it is a static
368:07 - variable we can access it from
368:10 - throughout anywhere in our project
368:13 - so I'll save this
368:16 - and over here instead of calling screen
368:18 - 2 I'll simply call screen
368:21 - to
368:22 - dot route
368:24 - name
368:29 - so now let's save this see if everything
368:32 - works fine or not
368:37 - and then if I click on this I am taken
368:40 - to the next screen and then again if I
368:42 - click on this I am popped back to the
368:44 - previous screen
368:46 - okay so now this is how we use push name
368:49 - now if I write pop and push name okay so
368:53 - that means my initial screen will be
368:55 - popped and then that screen will be
368:57 - pushed so ultimately I will not be able
369:00 - to come back okay so now to check if
369:03 - that is working or not so if that is
369:05 - working fine we should get an error that
369:07 - we can't pop because there is no screen
369:10 - okay so I'll call this
369:12 - and then if I press back then it shows a
369:16 - black screen that means it is not
369:18 - showing the home screen but it has
369:20 - blacked out that means the parent which
369:22 - that has already been
369:24 - popped out
369:25 - Okay so
369:27 - I hope you are understanding the concept
369:29 - of push and pop and push named
369:32 - all those things I'll change it back to
369:35 - push nimt
369:37 - now this is this was about basic
369:40 - navigation between screens okay now the
369:43 - next thing and a very important thing is
369:46 - how to pass data from one screen to
369:49 - another okay so passing data from one
369:52 - screen to another is also pretty simple
369:54 - with a push push named pop and push
369:58 - named every all these types of
370:02 - navigation methods take a named
370:05 - parameter called arguments so now over
370:08 - here arguments can be anything you can
370:10 - send a list you can send a map you can
370:12 - send the object of some custom
370:15 - class you can send anything so this
370:18 - argument parameter is very flexible and
370:22 - that is the beauty of flutter it
370:23 - provides you more accessibility so right
370:26 - now I'll simply pass a string
370:28 - that says navigation
370:31 - it's working
370:35 - okay so now in my screen too I am
370:38 - sending this argument so let's see how
370:41 - to retrieve the data in screen too okay
370:44 - so inside our build method please note I
370:47 - am writing this inside my build method
370:49 - I'll create a variable
370:53 - arguments that will be my received
370:56 - arguments now over here we will write
370:58 - modal root
371:02 - so these are some keywords that has a
371:05 - specific meaning which will not be
371:07 - required in general development flow but
371:10 - if you develop something very much
371:13 - related to Native and something related
371:16 - to plugins means you are generating a
371:19 - plugin then we will then you will might
371:21 - have a to look closely to this model
371:23 - route but if you are generating simple
371:26 - hybrid mobile apps then this is not
371:29 - required then knowing the Deep knowledge
371:32 - about modal root is not required we can
371:34 - simply keep this in mind that model
371:36 - route contains all the datas that are
371:39 - transferred from one screen to another
371:40 - now the arguments are not the only thing
371:43 - there are many other things which are
371:45 - transfer internally from one screen to
371:47 - another okay but we will but we will be
371:50 - able to access only the arguments okay
371:53 - so let's see how we access that model
371:56 - route dot off context
371:59 - dot settings
372:01 - dot arguments
372:04 - okay so now by this I got the argument
372:08 - which I sent here navigation is working
372:11 - in screen 2. so now over here instead of
372:15 - displaying screen 2 I will display that
372:17 - argument
372:21 - let's save this restart
372:29 - now over here you can see navigation is
372:31 - working okay because this doesn't had
372:34 - any
372:35 - predefined value that means the value
372:38 - returned in that argument is being
372:41 - received properly and that is being
372:43 - displayed we can now as I told you it is
372:46 - very flexible we can pass anything
372:49 - so let's pass a map
372:52 - that says
372:56 - nothing is working nothing is working
372:58 - five times
373:00 - let's save this now let's see what is
373:02 - the output
373:04 - it should so show something like it is a
373:07 - list or something like that because it
373:09 - will not print the value that is
373:11 - directly inside that okay so it is
373:14 - giving us an error because over here the
373:17 - text takes a string type and that is a
373:19 - list of a string
373:21 - so let's change the value to argument 0
373:24 - that will return our screen that will
373:26 - return a string now over here arguments
373:29 - is a variable it doesn't know the
373:31 - flutter doesn't know that it is a
373:34 - list so the first method would be to
373:38 - change this to a list
373:41 - okay
373:43 - now another method is writing as a list
373:48 - so this as keyword is used for
373:51 - defining the type
373:53 - now to make it more specific I'll write
373:56 - string over here
373:58 - okay so now the error is gone let's
374:00 - resave that this
374:07 - and now if I click on this the first
374:10 - value of the list is displayed
374:15 - now let's change the first value
374:28 - let's save this
374:31 - now we can come back now if I click on
374:34 - this we can see Test 2 programming
374:36 - knowledge
374:37 - okay so you understood what is
374:39 - navigation and how we pass data
374:42 - through navigation and what are the
374:44 - different types of navigation and we
374:46 - also discussed about media query the
374:49 - most important use of media query that
374:51 - is dynamic rendering of widgets
374:54 - okay and I hope everything was clear
374:56 - thank you programming knowledge so in
374:59 - this video we are going to see how to
375:02 - send an HTTP request and then parse the
375:06 - response and update the UI accordingly
375:09 - so first let's remove all the extra code
375:12 - that we have over here we don't need the
375:16 - floating action button
375:18 - okay we don't need a body for now we'll
375:21 - create a new body
375:23 - and we don't need this screen too so
375:27 - I'll delete the screen too
375:29 - and then I need to remove it from my
375:31 - home app if I have it yes so I need to
375:35 - remove it from here
375:41 - I also need to remove it from here
375:46 - okay
375:48 - I need to remove the import from here
375:51 - also
375:52 - okay so let's save everything do a
375:55 - restart
375:57 - and yes so we have our empty screen
376:00 - so now to send an HTTP request if you
376:03 - don't know what is an HTTP request you
376:06 - can follow this link and read about it
376:08 - they have very excellent documentation
376:11 - now to send an HTTP request from a
376:15 - flutter app we need a third party
376:17 - package and the most popular packages
376:20 - HTTP you can see over here it has 1404
376:24 - likes one one zero Pub points and
376:26 - hundred percent popularity means this is
376:29 - most preferred by flutter developers
376:32 - another alternative can be do okay so do
376:36 - also has 99 popularity it is made by
376:40 - some flutterchina dot Club
376:43 - Okay so
376:44 - let's install flutter we will go in this
376:47 - installing section
376:51 - and then inside our dependencies we
376:54 - simply need to add this so we find our
376:57 - dependencies in pubspec.yaml
377:02 - over here below this store below that
377:06 - Cupertino icons we can paste anywhere
377:09 - save and then since I am using vs code
377:12 - it will automatically start flutter pup
377:15 - get
377:16 - okay so that means it is importing this
377:18 - dependency to our project so that will
377:21 - take a minute
377:24 - now after that let's see which API we
377:28 - are going to call from our app
377:30 - okay so I'll be using this Kanye dot
377:33 - rest API it is a free rest API for
377:36 - random Kanye West quotes okay so since
377:40 - it is free it is accessible to everyone
377:42 - and everyone can try the same
377:44 - so now over here you can see it says get
377:47 - and get is nothing but a type of an HTTP
377:51 - request okay so what get basically does
377:54 - it fetches data from this server means
377:57 - the link followed by the get request
378:00 - okay so I'll for now copy this link
378:04 - okay and if I paste it in my browser
378:08 - then that is also ultimately a get
378:10 - request only so let's see what is the
378:13 - response of this get request
378:16 - so over here uh doing this get request
378:18 - we get a quote I am the best and now if
378:21 - I refresh this it should change
378:24 - people always tell and then there are
378:26 - stuff okay so let's try implementing
378:29 - this in our app
378:31 - so we now have the http
378:35 - a package in our app so let's try
378:38 - calling this
378:40 - first we need to import http
378:43 - import http
378:47 - okay so it is not showing over here that
378:49 - means
378:50 - it has not installed correctly I need to
378:54 - run Pub get again so I'll do that we
378:57 - have a icon over here in vs code
379:01 - okay so once that is done now over here
379:04 - if I
379:07 - if I type import
379:10 - then HTTP so we can see HTTP slash HTTP
379:14 - dot dot now I am not simply gonna call
379:17 - all the methods I'll use a namespace
379:19 - that means reference to this package as
379:23 - http means everything inside this
379:27 - package will be used
379:29 - under this namespace okay so you'll
379:33 - understand what I am trying to say when
379:34 - I implement this okay so now let's try
379:37 - calling this rest API so for that
379:42 - in our class
379:44 - I'll simply create a future I have a
379:47 - video on what is the future and what is
379:49 - its use in flutter now since over here
379:52 - we are interacting with the internet we
379:54 - don't know how much time it will take so
379:57 - that is
380:00 - so that is the reason we can't
380:01 - immediately send the response we need to
380:04 - wait for the interaction with the
380:08 - internet to finish and then we will send
380:11 - a response and for the same I am using a
380:13 - future
380:13 - okay a future and that future should
380:16 - return a string that string will be
380:19 - nothing but this followed by code okay
380:21 - and then I'll call them name the method
380:24 - and get
380:27 - Kanye
380:29 - okay simple name
380:31 - now it needs to be a sync since we are
380:34 - dealing with future okay now a good
380:37 - practice is that whenever you interact
380:39 - with her Futures we need to surround
380:42 - whenever sorry whenever we interact with
380:45 - the internet uh we need to surround it
380:49 - with a try and catch so that when there
380:51 - is error it will not simply show a red
380:54 - screen on your mobile app but give some
380:56 - customized message which improves the
380:58 - user experience
381:00 - so I'll simply surround it with a try
381:02 - catch
381:06 - and then over here you can print T if
381:10 - you are making a real app most probably
381:11 - you will wanna show our toast
381:14 - so that is done now let's finally call
381:18 - this request so I'll copy this URL that
381:21 - I have over here now to call a get
381:23 - request means after every request we get
381:26 - a response okay so to store a response
381:29 - I'll create a response variable
381:32 - okay and then now let's call the get
381:35 - request this request let's call this get
381:38 - request
381:39 - okay so for that I'll simply write HTTP
381:42 - which is the namespace we used over here
381:44 - dot get so this dot get us uh refers to
381:50 - this get means over here in the
381:52 - documentation it says that we need to
381:55 - use a get request and that is why I am
381:57 - using a get request over here now the
382:00 - URL we copied right now https API dot
382:04 - Kanye dot rest
382:06 - okay so now we are getting a response
382:10 - okay so now if I hover over this get you
382:13 - can see it sends a future of response
382:16 - okay so that means as I said it will
382:19 - take an indefinite amount of time to
382:22 - interact with the internet we can't
382:24 - assume the time so that is why it is a
382:27 - future and we need to wait until we get
382:29 - some response and as we have discussed
382:31 - in our Dart tutorial to wait for the
382:34 - response we use the await keyword and
382:37 - since we are using a weight here we need
382:39 - to have a async keyword over here
382:42 - okay
382:44 - so now once this
382:47 - command is executed that means this
382:49 - command will take some time since we are
382:51 - using await that means the comma that
382:53 - means the controller which runs the code
382:56 - will not proceed until this
382:59 - statement is completely executed so once
383:01 - this is done then that means that this
383:04 - response
383:05 - has the response means this response
383:09 - which we will get from this API okay so
383:11 - this response variable will now have
383:13 - this response so before updating the UI
383:16 - let's try simply printing it to check
383:18 - that everything is working fine now uh
383:22 - if you would be knowing about rest apis
383:25 - you would know that a response doesn't
383:28 - only have this thing this is the body
383:30 - but it also has different things like
383:33 - the headers and other stuffs okay so
383:37 - this part where we have the actual
383:40 - response from the API that is the body
383:43 - okay so now let's get the body so
383:46 - instead of getting let's simply print
383:48 - the body to see if we have something or
383:51 - not
383:51 - so response
383:54 - dot body
383:55 - now I hope everything is clear
383:58 - okay so let's save this now inside the
384:01 - build method I'll simply call
384:03 - get Connie
384:12 - I'll restart
384:20 - and you can see it took a second or two
384:23 - and then after that we have the Response
384:26 - Code you took you can't look at a glass
384:29 - half full or empty if it's overflowing
384:32 - okay now if I'll
384:34 - save it again means that means I will do
384:37 - a refresh since on the refresh the build
384:40 - method is running I is executed again so
384:43 - this get Kanye method will be called
384:45 - again and
384:46 - we get a response
384:49 - okay so now since we have a response
384:52 - let's try
384:53 - updating our UI okay so over here this
384:56 - future needs to return our string so now
384:59 - over here uh my requirement is only this
385:03 - string but right now the body is
385:05 - printing this entire string okay so the
385:09 - body is in string format but if you look
385:11 - closely or you look in the browser it is
385:14 - actually a map a map which has a key and
385:18 - the value the value which we are
385:20 - interested in so to convert a string
385:23 - back to a map we need to use a dot
385:27 - package and so for that we will import
385:30 - that Dart package and that is called
385:32 - convert
385:35 - so this convert package allows you to
385:38 - convert uh
385:39 - uh a string to any other object
385:43 - or a object to a string okay so let's
385:47 - see how that happens
385:49 - I'll simply write
385:53 - where result
385:55 - is equal to Json now this Json is inside
385:59 - this dot dot convert Json dot decode
386:02 - okay so now string is the encoded thing
386:05 - if we convert a map to a string then the
386:09 - string is considered as an encoded as
386:11 - the encoded output of that Json variable
386:15 - Json value okay so since we have the
386:18 - string we need to decode we need to go
386:20 - back and over here I'll write response
386:24 - dot body
386:28 - and then instead of printing this I'll
386:32 - print
386:36 - result
386:38 - and then the key that we have over here
386:40 - that is quote so simply
386:44 - paste it over here
386:46 - format it and do a restart
386:54 - okay so now you see we only get the code
386:58 - part means instead of getting this
387:01 - entire thing as a string we have decoded
387:03 - it to a map
387:05 - and then we are printing the value for
387:07 - this key
387:09 - okay and now we want to return the same
387:12 - thing so I'll simply change this to
387:14 - return
387:16 - and now this get Kanye will return
387:19 - something so let's
387:22 - wait for that to return so then that
387:26 - means this method is called and when it
387:28 - finally returns then we go to this net
387:31 - then method so now the string sent over
387:34 - here is stored in this value okay so
387:37 - let's create another variable
387:40 - string
387:42 - coat
387:46 - and then over here I'll save
387:50 - the value to quote
387:54 - okay we don't need a semicolon over here
388:00 - so now once this get Kanye returns
388:03 - something it is stored in this code
388:06 - thing so now let's simply print the code
388:08 - thing so over here I'll write
388:12 - body the body is in Center
388:17 - and the center has a child which is a
388:20 - text widget and the text displays
388:22 - nothing but the
388:24 - Court
388:26 - so now let's do a hot restart and see
388:29 - what happens
388:34 - and you can see it gives us an error and
388:37 - that is because as I said interacting
388:40 - with internet it takes time but the
388:42 - execution doesn't stop over here and it
388:45 - keeps on running it keeps executing so
388:49 - one solution would be to add an await
388:52 - over here okay and the other solution is
388:54 - because I am not adding a weight over
388:56 - here because that is not a standard
388:58 - practice in if you do a real world
389:01 - project most probably all your con all
389:05 - your
389:06 - uh interactions with the internet will
389:09 - be in a separate file so what I'll do is
389:11 - over here I'll add a conditional
389:13 - statement
389:15 - so if this code is
389:19 - null
389:20 - so in that time
389:23 - I want you to show us circular
389:27 - progress indicator
389:29 - and once this quote is not null then the
389:33 - code should be printed so now what
389:35 - happens is that for the first time it
389:39 - will be null and then the circular
389:41 - progress indicator will keep on working
389:43 - now even after we get the value this
389:46 - will not update
389:48 - and to update the screen as we have
389:52 - discussed earlier we need to call the
389:54 - set State method so over here
389:57 - I'll write set state
390:01 - and then inside this the value
390:05 - means okay so everything is fine let's
390:08 - restart
390:11 - let's do a full restart
390:16 - okay so I think my internet speed is
390:19 - very fast that's why we are not able to
390:22 - see the progress indicator thing
390:26 - okay no no
390:28 - yes so the progress indicator is at
390:31 - the top so instead of conditional
390:35 - rendering over here
390:37 - I'll do it inside the center object
390:43 - so now let's see
390:52 - so you can see the circular progress
390:54 - indicator and as soon as we get the
390:57 - value the value gets updated
391:00 - okay and now you can see it is it will
391:04 - keep on updating it is not stopping and
391:07 - that is because we have a error in our
391:10 - program
391:11 - okay so the reason that it keeps on
391:15 - updating it is not stopping is that we
391:17 - are calling set State inside the build
391:20 - method so this is a very common mistake
391:23 - that people do that is calling set State
391:26 - method inside the build method so what
391:30 - is set State uh does is it re-renders
391:33 - the build method so if the set state is
391:35 - called it will re-render the build
391:37 - method and now while rendering it will
391:40 - again encounter set state so it will
391:43 - again start re-rendering so this will go
391:46 - to an infinite Loop
391:48 - okay so the way to fix this is to use an
391:51 - if else
391:52 - okay
391:54 - so I'll write Bool
391:58 - coat
392:00 - controller is equal to false
392:03 - so now this method should run only if
392:06 - the code controller is false
392:16 - okay otherwise this shouldn't run
392:19 - and now let's update the value of code
392:22 - controller to true
392:29 - okay so this means that the first time
392:32 - when the value of code controller is
392:34 - false
392:37 - uh this method will run and as soon as
392:40 - this runs this if condition runs the
392:42 - code controller's value is true so even
392:45 - after even though the set state is
392:47 - called and the build method starts
392:49 - rendering this if condition will become
392:51 - false and all this code will not get
392:53 - executed it will simply render this
392:57 - return statement okay so I hope
393:00 - everything is clear let's do a full
393:03 - restart
393:08 - and you can see it updated only once
393:11 - okay so yes now after this this will not
393:14 - update
393:17 - and it is not updating so I hope you
393:19 - understood what I did
393:22 - over here
393:23 - and you understood how to call a HTTP
393:27 - request how to parse the response over
393:32 - here and then update the UI accordingly
393:36 - update the UI always has set state in it
393:39 - so I hope all the concepts are clear now
393:42 - this is one Kanye dot rest which you can
393:46 - try another one which I also use which
393:49 - is also free is Chuck Norris
393:51 - so over here also you can call this
393:54 - request and you will get you will not
393:56 - only get a quote you will get multiple
393:58 - things you will get an URL for the image
394:02 - okay you will get an ID which you if you
394:06 - have any idea about databases you'll
394:08 - understand that every value has a ID
394:10 - URL which will be URL for this code
394:14 - and then a value which is the actual
394:16 - code so you can also try this if you
394:20 - want to
394:21 - okay so I hope everything was clear
394:23 - thank you
394:25 - welcome to programming knowledge so in
394:28 - this video we are going to discuss about
394:30 - bottom sheets in flutter so basically
394:33 - there are two types of bottom sheets in
394:36 - flutter the first one is persistent
394:38 - bottom sheet and the second one is model
394:40 - bottom sheet the difference between
394:42 - these two types of sheets are that in
394:45 - persistent bottom sheet the sheet
394:47 - remains on the screen even though we are
394:49 - not interacting with it
394:51 - whereas in model bottom sheet the sheet
394:54 - will hide if we are not interacting with
394:56 - it so let's start coding
395:00 - so first I'll remove all this
395:03 - code that we that we wrote while we were
395:07 - discussing about HTTP requests we don't
395:10 - need this anymore
395:16 - I'll also remove the unused Imports
395:26 - now once this is done in the center
395:29 - widget I'll add a the raised button
395:35 - and the child will be
395:39 - text that says
395:43 - show bottom
395:45 - sheet
395:48 - and then it will have an on pressed
395:51 - and that will show the bottom sheet so
395:55 - first let's start with model bottom
395:58 - sheet to display a modal bottom sheet we
396:01 - simply write show
396:03 - model bottom sheet
396:06 - now it takes two parameters that are
396:09 - necessary and the other ones are not
396:11 - necessary the first one is context and
396:13 - the context we have right over here this
396:16 - is the context so I'll simply write
396:19 - context
396:22 - and the next one is Builder
396:25 - so it takes a function which has a
396:28 - parameter of build context
396:34 - and now over here we return the widget
396:37 - that will be displayed as our bottom
396:39 - sheet so I'll simply return a
396:43 - container
396:45 - of
396:48 - height 400
396:51 - and the color to be
396:54 - red
396:57 - so now let's format this save this
397:02 - and now we have a button in center and
397:04 - if I click on this I am able to see the
397:07 - model bottom sheet so now as I said the
397:11 - sheet will hide if we don't interact
397:13 - with it so this is the bottom sheet
397:16 - let's not interact with this but
397:18 - interact with the remaining part so as
397:21 - soon as I click over here the bottom
397:23 - sheet hides
397:25 - so you understood what I was trying to
397:28 - say that the bottom sheet hides when we
397:31 - are not interacting with it and if that
397:34 - happens then that sheet is a modal
397:36 - bottom sheet
397:38 - okay now the next type of sheet is the
397:41 - persistent bottom sheet so for that we
397:45 - simply write show
397:47 - bottom sheet
397:50 - now format this save this
397:55 - now if I click on this okay so it is
397:58 - giving me an error so
398:01 - uh let's try another method to show a
398:05 - bottom sheet and the method is by using
398:08 - a global key so I'll write
398:11 - VAR
398:13 - scaffold
398:15 - key and that will
398:18 - be a global
398:21 - that will be a global key
398:27 - okay and the global key will be of type
398:31 - fold state
398:37 - okay and then I'll add this key to our
398:40 - scaffold
398:42 - so the key over here is
398:45 - scaffold key
398:47 - so now what this basically does is that
398:51 - right now this is our scaffold scaffold
398:54 - is the area in which the contents are
398:57 - displaced displayed like the app bar
399:00 - body the widgets inside the app bar
399:02 - widgets inside the body all those are
399:05 - displayed on the scaffold scaffold is
399:07 - like a canvas we can say it to be a
399:10 - canvas so by adding a key to the
399:14 - scaffold now we can access the state the
399:17 - context of this scaffold anywhere else
399:20 - by simply using this key
399:23 - okay and that is what we are gonna do
399:25 - over here to show the bottom sheet
399:28 - okay so I'll simply
399:31 - comment this now to show our bottom
399:33 - sheet first we write the global key name
399:37 - that is in our case scaffold key then we
399:42 - take the current state okay so now over
399:45 - here you can see with the scaffold key
399:47 - we can get three
399:49 - things first one is the context that is
399:51 - the current context the current state
399:54 - and the current widget that is being
399:56 - displayed
399:57 - so over here we need the current state
400:01 - and then on that we call show bottom
400:04 - sheet
400:06 - so now over here I'll return this same
400:09 - container let's see
400:13 - now I'll remove
400:15 - I'll remove the comment from here and
400:17 - then give a semicolon
400:20 - so now let's see
400:25 - now if I save
400:28 - and then if I click on this I am able to
400:31 - see see my bottom sheet so this bottom
400:35 - sheet is a persistent bottom sheet okay
400:39 - and by that if I don't interact with
400:42 - this part of the sheet even then this
400:45 - will not disappear so if I click
400:47 - anywhere over here the sheet Still
400:50 - Remains if you wanna close it uh
400:53 - programmatically we can do it by writing
400:55 - Navigator dot of context dot pop
400:59 - and over here in app we can simply slide
401:02 - it down
401:03 - like this
401:04 - so these are the two types of sheet that
401:08 - we have in flutter that is the
401:11 - persistent bottom sheet and the model
401:14 - bottom sheet so I hope the concept was
401:17 - clear thank you
401:19 - welcome to programming knowledge we are
401:22 - going to develop a daily task manager
401:26 - application
401:27 - and that is a rather a very simple
401:30 - application and that will Mark the end
401:33 - of this series
401:35 - so let's start
401:37 - first of all I'll delete all the extra
401:39 - things I had let's
401:42 - get this project back as it was when we
401:45 - first created it
401:47 - so I'll remove
401:49 - all these things
401:52 - okay save it
401:54 - in main also I'll remove all the code
401:56 - let's code it from scratch
402:06 - and I also need to remove the assets
402:08 - folder
402:12 - and along with that I would also need to
402:14 - comment this out
402:17 - and so I did
402:32 - okay so now over here you can see we are
402:36 - getting an error and this error
402:38 - generally happens because when we delete
402:40 - some file while the project is running
402:44 - so I'll comment this out first
402:47 - and then restart the app
402:52 - so run without debugging a test
403:02 - now let's start I'll first create a
403:05 - folder that will be screens
403:09 - and then in the screens will first have
403:12 - a
403:13 - home screen
403:15 - dot dot
403:19 - now let's first of all import material
403:24 - that is the most important thing
403:34 - then we'll first start with a stateless
403:37 - widget and we'll convert it to a
403:39 - stateful widget if needed so here is the
403:43 - home screen
403:46 - okay now it will have a root name that
403:48 - is
403:49 - like in the Boiler code
403:52 - so
403:55 - static const
403:59 - ant root name
404:01 - and that is home screen
404:06 - and now in my main dot dot I'll import
404:10 - it that is like writing the code that I
404:13 - have just commented and that I have just
404:15 - removed
404:17 - so we'll always use refer
404:20 - relative referencing while importing any
404:22 - package screens and then home screen
404:25 - now over here the home
404:31 - will be home screen
404:41 - okay so over here first we need to save
404:43 - this
404:47 - and then save this as well
404:50 - so now over here it will be a scaffold
404:57 - and then the let's add a simple app bar
405:04 - the app bar has our title
405:10 - that takes a text widget and the text
405:12 - wizard says
405:16 - task manager
405:20 - neat now in body
405:25 - I don't think like right now we need to
405:28 - add anybody first we need to add the
405:31 - feature to create tasks and then only we
405:35 - will be able to show tasks and showing
405:37 - tasks go in the home screen
405:40 - so Center
405:43 - simply a child with a text with gender
405:46 - that says no tasks
405:51 - added yet
405:55 - cool now let's add the root the button
406:00 - uh clicking on which we will be able to
406:02 - create a
406:05 - task so the best option would be to
406:08 - create a floating action button
406:10 - that will take a floating action button
406:13 - widget
406:22 - I am sorry
406:24 - so this will take a floating action
406:28 - and then over here the child will be an
406:31 - icon icon widget and then over here
406:34 - we'll use the icons in them and then
406:37 - the add button that is the plus sign
406:41 - okay now I'll give this icon a color of
406:44 - white
406:50 - let's format this
406:53 - then after that we have the background
406:55 - color so the color is let's decide a
406:59 - theme I am thinking we can go with
407:02 - yellow you can try anything else of your
407:05 - choice
407:06 - so this is yellow and then this will
407:10 - this is showing uh yellow underline
407:12 - because the on pressed parameter is
407:15 - required so let's add that on pressed
407:19 - and for now simply print
407:23 - Fab pressed
407:27 - let's format this hot
407:30 - restart this
407:35 - cool and it is giving us an error now
407:38 - check operator used
407:42 - null value in Main Line it
407:46 - well this seems fine to me I don't know
407:50 - whether actually is
407:54 - well that was not an
407:57 - error that was
407:59 - just some kind of a last lapse that
408:04 - happened in the
408:06 - okay so right now I'll remove the debug
408:09 - Banner debug so check the banner that is
408:11 - false
408:13 - let's save this now my app bars
408:18 - or let's make the entire theme blue that
408:21 - will be easier because the default theme
408:23 - of flutter is blue so colors blue
408:29 - let's save this and now if I click on
408:32 - this the on pressed method is working
408:35 - fine now what we want to do here is that
408:39 - whenever we click on that button it
408:41 - opens a new screen and over there we add
408:43 - the task or what would be better is that
408:48 - instead of opening a new screen we can
408:50 - open a bottom sheet okay since the last
408:53 - video was on bottom sheets it makes
408:55 - complete sense that we use bottom sheet
408:57 - instead of a new screen but if you want
408:59 - you can use a new screen also that is
409:02 - there is no such kind of
409:05 - uh design technique or rule that
409:07 - restricts from using a new screen
409:10 - okay so I'll simply
409:12 - write show model
409:16 - bottom sheet
409:20 - now it needs a context the context is
409:23 - context
409:25 - and then it has a builder the every
409:28 - Builder always has a build context
409:33 - and for now I'm sorry I was coding in
409:36 - JavaScript last night and for now let's
409:39 - simply return a container
409:44 - okay a container of
409:47 - a height let's say 500
409:50 - and the color
409:52 - let's say colors Dot
409:55 - blue
409:57 - cool let's save this
410:00 - and now if I click on this I am able to
410:03 - see a bottom sheet
410:06 - so let's not decide its height
410:10 - let's create the child and child will of
410:14 - course be a column
410:17 - because we are gonna add things one
410:19 - after another then it has a children the
410:21 - first one will be text
410:24 - that says add a task
410:32 - and task now it is looking very weird
410:36 - I'll maybe reduce the background color a
410:40 - little bit
410:42 - let's see
410:45 - maybe little bit more
410:50 - foreign
410:56 - better than what it was earlier we'll
410:58 - all will of course be changing designs
411:02 - later
411:03 - okay so let's add some Style
411:07 - now I was thinking let's add a custom
411:09 - font so for that I'll go to fonts
411:12 - google.com and decide a font and in the
411:16 - meantime I'll
411:18 - search for Google
411:20 - fonts
411:22 - flutter this is a package using which we
411:25 - can use all the
411:27 - fonts that are available on Google fonts
411:29 - so oh either you can go in the
411:32 - installing section copy and paste or
411:34 - there is a shortcut you simply click on
411:35 - this
411:36 - and then in your pubs pack.yml you have
411:39 - to
411:40 - paste it below Cupertino icons I paste
411:44 - it and I saved it
411:49 - to move this for now
411:53 - so now let's uh fix on a
411:56 - font
411:58 - and maybe we can go with I think we
412:02 - should go with montessor at okay so
412:05 - let's start
412:08 - adding the text all the text in this app
412:11 - will be in montessor at
412:13 - font okay so let's wait for this
412:18 - flutter Pub get to complete okay so it
412:21 - is now I'll add the import import
412:26 - Google fonts now the first text we can
412:30 - see over here the spelling is wrong as
412:32 - well
412:33 - task
412:36 - now in style we simply write to Google
412:40 - fonts
412:43 - Dot
412:44 - Mont select
412:47 - so now since we don't have any
412:49 - configuration to add inside we'll leave
412:51 - it like this
412:53 - formatted
412:57 - now over here also I'll add Style
413:04 - Google fonts
413:07 - dot Mount select
413:16 - and then
413:18 - over here I'll
413:20 - change the color I want the color to be
413:24 - white
413:26 - and the size
413:28 - to be
413:30 - 20 let's see
413:33 - now let's save this
413:55 - now after that over here we can see the
413:58 - font has changed to lato okay and over
414:03 - here also the this font is also Lotto
414:06 - now we also have our text in Center
414:10 - we'll
414:11 - change that later
414:13 - okay so the first
414:16 - first text is add task now after that I
414:21 - believe that this add task should be
414:24 - over here and a cross button over here
414:26 - which when we click on this model sheet
414:30 - should close however it will close if
414:32 - you click anywhere else then
414:36 - the model sheet okay so let's do that
414:39 - I'll wrap this text inside a row
414:44 - okay and then I'll give the main access
414:46 - alignment as space between
414:53 - knit
414:55 - now after that I'll have a icon
415:01 - the icon will be from the Icon Cinema
415:04 - and the name is icons close that is the
415:06 - cross sign
415:08 - Okay so
415:11 - now this is done now I'll add a gesture
415:15 - detector upon it wrap it I will check
415:18 - and that is
415:20 - gesture detector so now this gesture
415:24 - detector with jet it gives you the
415:28 - triggers for all the gestures that we do
415:31 - on a screen that is a single tap or
415:33 - double tap a triple tap a long tap a
415:36 - double long tap and all those things
415:38 - okay so for now I'll use on tap
415:46 - now over here it should simply close the
415:50 - model sheet and we for that we simply
415:53 - write navigator.pop
415:55 - Navigator dot I'm sorry Navigator
415:59 - dot off context
416:02 - what's happened
416:05 - and Dot pop
416:07 - cool
416:08 - now you might be thinking why didn't I
416:10 - use an icon button over here so that is
416:12 - because icon button comes with a uh
416:16 - inbuilt padding that we explicitly have
416:18 - to remove and that will that will be
416:21 - actually four lines of codeine over here
416:23 - it is only two lines of code so this is
416:27 - the better choice less number of less
416:30 - lines of code means a better code so now
416:34 - we have it here and this but we
416:36 - definitely need some padding over here
416:40 - so
416:41 - this container over here the main
416:43 - container the parent container will have
416:46 - a padding
416:47 - and then we should always write const
416:49 - before padding or margin I have already
416:52 - discussed about it you can look to the
416:54 - previous videos
416:56 - Edge in sets dot all
417:00 - sorry not 100.0 but 10.0 let's save this
417:06 - now first I need to close this open
417:09 - again and then it has a padding a decent
417:11 - padding
417:13 - and that is it now after row we can add
417:16 - our divider
417:17 - [Music]
417:23 - now let's save this and we should be
417:26 - able to see our divider
417:29 - and we have our divider if you look very
417:32 - closely I'll I'll
417:34 - change that so the width
417:37 - or we have something like that to see
417:40 - all the available parameters you can
417:42 - simply click on control space
417:44 - and then over here yes we have height so
417:47 - I'll make it
417:49 - 1.2
417:50 - just for testing let's see how it looks
417:56 - and this has become
418:01 - we'll have make it 10 let's see
418:07 - and damn it's not changing
418:12 - okay so that is not height we need to
418:15 - change the thickness I am sorry this
418:17 - kind of stops stops generally happen
418:19 - when you develop something
418:21 - there are plenty of widgets and you
418:24 - often get confused so there is no
418:27 - this is not such that bad a thing okay
418:31 - so now it is a bit thicker and this
418:33 - looks fine I will be after subsequently
418:36 - upgrading the uis And discussing it with
418:40 - you for now this will do
418:43 - now I don't need a comma here since we
418:46 - only have one parameter inside that so
418:49 - that is the basic that is a good
418:52 - practice actually that if you have a
418:54 - single parameter you don't give a comma
418:56 - if you have any if you have any number
418:59 - of parameters which are more than one
419:00 - you do give a comma
419:03 - okay so this is done after that I'll
419:06 - leave some space sized box
419:10 - okay and the space will be off
419:13 - let's say 20
419:16 - now after that I'll have a text field
419:21 - okay let's see
419:27 - so we have our text field over here but
419:30 - it looks very very weird
419:32 - okay so let's Design This
419:35 - so it also takes a decoration that
419:37 - decoration takes the input decoration
419:42 - now first for the Border I'll use an
419:46 - outline input border
419:50 - okay
419:52 - now this outline input border has a few
419:55 - things border radius that is the curve
419:58 - around the corners so for that we have
420:00 - another widget border radius dot
420:03 - circular and simply 5.0 would do
420:09 - now after that we have a Border Side
420:12 - means that over here in outline input
420:14 - border we give one border size and that
420:16 - is copied for all the four borders of a
420:18 - input field so simply Border Side
420:25 - and the borders color will be colors
420:29 - dot blue
420:36 - cool let's see
420:37 - so we have the Border over here now
420:40 - let's add a white color in between
420:45 - okay so that is the fill color
420:49 - and the color needs to be white
420:55 - and filled should be true
420:58 - for the fill color to show
421:02 - I think it's failed yes
421:05 - true
421:06 - it was going to become two
421:11 - let's save this
421:16 - and after that so it is white in between
421:19 - now let's add a hint
421:23 - so the hint text is in text takes a
421:27 - string or a text widget and it takes a
421:29 - string
421:32 - enter task
421:35 - and then again we have a hint style and
421:39 - the hint style will go with Google fonts
421:43 - dot Mont select
421:49 - now let this red line go actually it
421:53 - in real time connects with the internet
421:56 - that is what I am guessing for such kind
421:58 - of behavior I am not sure about it
422:01 - let's save this anyhow
422:11 - okay I don't know why it is acting weird
422:13 - let's give it a minute
422:22 - oh sorry the spelling is wrong
422:25 - Google fonts I'm extremely sorry the
422:27 - spelling was wrong and I thought it is
422:29 - some kind of a weird issue
422:32 - so this is also not that bad a thing
422:35 - okay so hint style and that is simple
422:39 - lato now I can add some tasks I can
422:42 - write the task over here now we need to
422:45 - have a complete button
422:47 - so so I'll instead of having a single
422:51 - complete button I'll have two buttons
422:53 - one is a reset button and the other one
422:56 - is the add button means that means add
422:59 - this task today for today
423:02 - okay so below this text field I'll have
423:06 - a
423:07 - row
423:12 - okay the rows children the children
423:15 - there are two children that is sorry we
423:19 - don't have simple button we have
423:22 - raised
423:24 - button
423:31 - now the child is
423:33 - text
423:35 - reset
423:39 - with a style of
423:41 - Google fonts
423:44 - dot montessor rack
423:49 - so only we need to give parentheses
423:52 - after that
423:54 - and we have a on pressed
423:59 - and this one pressed for now will simply
424:03 - print
424:06 - the set pressed
424:11 - now let's format this now I'll have
424:14 - another button like this so instead of
424:16 - copying I'll click shift option and
424:19 - arrow key down
424:22 - so then it Go gets copied
424:25 - save now over here instead of reset it
424:28 - will be add
424:29 - and over here also it will be add let's
424:31 - save this
424:33 - C
424:34 - and it looks
424:36 - completely atrocious
424:39 - so we need to fix that
424:46 - sized box
424:50 - a height of 20 would do
424:58 - now let's fix this so how how do we fix
425:01 - this
425:02 - well there are two
425:05 - methods I'll say first I'll wrap this
425:09 - with a sized box
425:12 - foreign
425:16 - box will have a width that is the entire
425:19 - width media query
425:22 - dot off context dot size
425:27 - dot width
425:29 - and height of let's say for now 200.
425:32 - we'll definitely reduce it to as much as
425:36 - it is required okay so now this raised
425:39 - button goes inside a container
425:42 - okay the container has a width of
425:47 - media query
425:51 - dot off context dot size
425:55 - dot width divided by 2 means half the
425:59 - screen size
426:00 - and then this entire thing minus 10 that
426:03 - will be added for the padding the
426:06 - padding will be 5. because 10 divided by
426:10 - 2 from for both the sides
426:12 - minus 10.
426:14 - okay so this is fine
426:17 - now same I'll do foreign
426:21 - container the container has a width of
426:25 - this
426:27 - cool now in this raised button let's add
426:30 - a background color
426:32 - or we simply call it color
426:35 - s dot blue
426:38 - and here it should be color is colors
426:43 - dot White
426:46 - now let's see what is left
426:51 - instead of sized box we'll have a
426:54 - container and then this container will
426:55 - have a padding from all the sides
426:57 - padding off
427:00 - sorry not science padding of const
427:04 - as inserts dot symmetric
427:11 - horizontal and that is
427:14 - 10.0
427:17 - let's see if it gives us some overflow
427:21 - errors or what
427:23 - and yes it does
427:25 - so the
427:26 - size of this buttons are apparently big
427:29 - and they are big by
427:32 - 20 pixels as I guessed in my calculation
427:35 - was a bit a little bit wrong this should
427:38 - be five
427:41 - okay and now let's see
427:48 - so still the error is there but it has
427:50 - reduced
427:52 - so
427:53 - better we add make it 20
427:57 - make it 20.
427:59 - for both
428:01 - save
428:03 - and then this is fine now you open the
428:06 - mobile on any screen and now you open
428:09 - sorry not the mobile you open the app on
428:11 - any screen size this will look
428:14 - same because we are using Dynamic width
428:18 - over here
428:19 - okay so now I don't think this 20 needs
428:22 - to be there it should be a mere 8
428:28 - foreign
428:36 - because the height is 200
428:39 - which is not at all required I don't
428:41 - think we need a height at all
428:44 - let's save and see
428:47 - yes so this looks fine when I click on
428:50 - reset reset is pressed when I click on
428:52 - ADD add Express now I don't need this
428:55 - height also over here so
428:58 - where we started the model sheet
429:03 - the high this is okay so the height was
429:05 - commented that means this is the default
429:08 - height now I am gonna uh Force some
429:12 - height to it
429:14 - that is gonna be 300 let's see
429:17 - and 300 is also more
429:20 - than required I'll make it 250.
429:24 - now let's see so this looks good now
429:29 - apparently there is a better color for
429:31 - the background than the color it is
429:33 - right now we will discuss that later for
429:36 - now our
429:37 - adding a task UI is complete so until
429:42 - the previous video we have created the
429:45 - basic structure and we have created the
429:48 - UI of the bottom sheet so let's continue
429:51 - now the first thing that we need to do
429:53 - is add a text controller to this text
429:56 - field and add functionalities to this
429:59 - button
430:00 - so for that I'll need to initialize the
430:04 - text editing controller inside in its
430:07 - state and then dispose it in the dispose
430:10 - method and all those methods are
430:12 - available only in stateful widget so
430:14 - I'll change this stateless widget
430:17 - to a stateful widget now I'll declare
430:20 - the controller so let's call it
430:24 - task controller
430:29 - now over here let's override the init
430:32 - state
430:36 - foreign
430:46 - task controller
430:51 - is equal to text editing
430:57 - controller
430:58 - and now we also need to override the
431:01 - dispose method
431:07 - and in the dispose method everything
431:09 - goes before this super statement as we
431:12 - have discussed in one of the previous
431:13 - videos
431:14 - so over here we will simply write a task
431:17 - controller Dot dispose
431:22 - now once this is done let's attach this
431:25 - text editing controller to our text
431:27 - field
431:28 - okay so for that we need to look for the
431:31 - text field over here we'll add the named
431:34 - parameter controller and that is our
431:37 - task controller
431:41 - okay
431:43 - so now this controller is added
431:47 - now let's add functionality to this
431:51 - reset button so over here it simply says
431:54 - print reset now instead of this I'll
431:57 - write task controller
432:02 - dotted text
432:03 - and then overwrite it to an empty string
432:07 - okay so now this should reset the
432:11 - text field text field yes so let's save
432:15 - this or do it a full restart so that the
432:18 - init State also gets executed
432:22 - so now once it has restarted if I click
432:25 - on this plus button I am able to see the
432:28 - bottom sheet now if I write something
432:32 - any scramble text and click on reset the
432:36 - text is getting
432:38 - overrided with an empty string as we
432:40 - have done over here okay so this buttons
432:43 - functionality is done now let's talk
432:45 - about adding the task
432:47 - so to add the task we first need to
432:51 - store the task now generally there are
432:54 - two methods to store the task first one
432:56 - is using database and we have SQL Lite
433:00 - as the database
433:01 - and the second method is using shared
433:04 - preferences
433:05 - so now in this app the data will change
433:09 - every day means the task for one day is
433:12 - written and then at the by the end of
433:14 - the day the task gets over okay so for
433:18 - that we don't need to go in that in the
433:22 - complex SQL systems we can simply use
433:26 - the shared preferences the memory of
433:29 - shared preference in the shared
433:31 - preference is stored inside the app so
433:34 - ultimately the size of app will become
433:37 - large if we use a shared preference to
433:39 - store everything when the data to be
433:42 - stored is too big and in those cases we
433:45 - use SQL light but over here since the
433:47 - data will only retain remain for a day
433:50 - and the next day it will be cleared or
433:52 - some other data will be added so it is
433:55 - completely safe to use shared
433:57 - preferences over here
434:00 - so for that we have a plug-in shared
434:03 - preferences it is given by a flutter so
434:07 - let's
434:08 - import it and then use it in our project
434:11 - so in our Pub spec dot tml below Google
434:14 - font so I'll paste it
434:16 - save it
434:18 - and then wait for the pub get to finish
434:21 - so once the pub gut has finished we can
434:24 - start using this shared preferences
434:27 - inside our project
434:30 - so
434:31 - for that first we need to import the
434:34 - shared preferences so simply over here
434:36 - I'll write
434:38 - import
434:43 - I'm sorry
434:46 - shared preferences and you can see it is
434:50 - not showing in the option so that means
434:54 - there was some error in this Pub get we
434:56 - should call it again most probably then
434:59 - the error will not be there this
435:01 - sometimes happens with vs code
435:07 - uh once done
435:09 - let's see if it comes now or not
435:13 - import
435:15 - shared preferences so we can see shared
435:19 - preferences
435:20 - dot dot now let's see how to use this
435:25 - so for that first thing you can see is
435:28 - we need to initialize the shared
435:31 - preference
435:32 - so over here they have initialized using
435:34 - a sink of it if you don't wanna use a
435:37 - sync a bit we can always use then method
435:41 - okay so let's see
435:47 - now whenever this ad is pressed
435:50 - I'll call
435:56 - method that is
436:00 - save data
436:03 - okay now let's create this
436:05 - save data
436:08 - okay so in all the override statements
436:12 - are together all the override methods
436:15 - are together I'll create this method
436:17 - which is not overriding any method above
436:19 - them
436:20 - so over here avoid save data
436:25 - and then first we need to initialize the
436:30 - shared preferences
436:32 - so shared preferences
436:36 - I'll call it prefs now since we use
436:39 - await we need to use a sync over here
436:44 - await shared preferences
436:52 - sorry
436:53 - not this
436:56 - over here also it will be shared
436:59 - preferences
437:02 - and over here also shared preferences
437:06 - and Dot get instance so now once this
437:10 - statement is executed we have our
437:12 - instance of shared preferences in this
437:15 - variable so now let's save the data
437:19 - so for saving Let's uh the most
437:25 - probable or the most standard practice
437:27 - would be to create a model class and
437:30 - then save the object as Json as Json in
437:35 - this shared preferences and then
437:37 - retrieve it from as Json and then parse
437:40 - it to the model and then display
437:42 - so we'll follow the same thing let's
437:44 - create a new folder
437:48 - model
437:50 - and then inside this folder we'll have
437:53 - task Dot
437:55 - dot so let's create
437:59 - class task
438:02 - so now this will have the task
438:08 - I'm sorry
438:10 - and we'll have the date so there is a
438:14 - variable in dot called date time that
438:16 - deals with the date and time
438:18 - so
438:19 - simply call the time
438:22 - so this is done now let's create its
438:25 - Constructor so task
438:29 - this dot task and this Dot
438:33 - time
438:37 - so now let's create another Constructor
438:40 - so there are two methods one that I have
438:43 - discussed in one of my videos that is
438:46 - called named Constructor that is Task
438:48 - Dot
438:50 - from Json or something like that so that
438:53 - is one method there is another method
438:55 - that is using the factory keyword
438:58 - Factory
439:00 - task Dot from map
439:04 - and now over here we'll take a map
439:09 - or we don't take a map we don't actually
439:11 - need a map we just need a task so let's
439:15 - call it from string
439:18 - and then over here we take a parameter
439:20 - string task
439:22 - and now like before when we were using
439:25 - named parameter task Dot from string
439:28 - without this Factory then we would have
439:31 - simply written this dot task is equal to
439:33 - this task and this dot time is equal to
439:35 - date time dot now but since we are using
439:37 - the factory one we'll return we need to
439:41 - have a return statement and then
439:43 - ultimately we'll be returning this
439:44 - Constructor
439:45 - so I'll write a return task
439:51 - and then over here I need to call the
439:54 - named parameters and that is a task and
439:56 - task is
439:58 - nothing but the task parameter that we
440:00 - get over here
440:02 - and then we have the time time is
440:04 - nothing but a date
440:06 - time
440:08 - dot now
440:11 - okay so this is done now by this by
440:15 - calling this method we can create a
440:17 - object of this class task now to store
440:21 - it in shared preferences we directly
440:23 - can't store a model class as it is not
440:27 - serializable so instead we will
440:31 - store it as a
440:34 - Json object or most probably a map that
440:38 - is also a Json type of thing
440:41 - just there are extra just there is a
440:43 - flexibility to add commas at the end if
440:46 - we want which we don't have in Json so
440:48 - that is only the difference between Json
440:49 - and a map in that so let's uh see
440:55 - now I want to return a map
440:58 - of
441:00 - string and dynamic
441:04 - of string and dynamic and that is return
441:09 - no sorry not return
441:11 - that this method can be called
441:15 - get map
441:24 - okay and then over here you return
441:29 - a map
441:32 - that has a name as task and the task is
441:35 - this dot task
441:38 - and then we need the time now there are
441:41 - we simply can't send this a date time
441:43 - object as that is again another object
441:46 - that can't be serialized so we have
441:49 - another parameter that is called
441:50 - milliseconds since Epoch so Epoch is a
441:53 - constant time and the difference from
441:55 - that till this variable the till the
441:58 - time that is stored in this variable is
442:00 - measured and sent and so this is two-way
442:03 - thing if we have the difference we can
442:05 - get the date time variable from now and
442:07 - if we have the date time variable we can
442:09 - get the milliseconds since Epoch from
442:11 - that there are milliseconds there are
442:13 - micro seconds you can use whatever we
442:15 - want so I'll simply use this dot time
442:19 - dot mili
442:22 - seconds since epoch
442:25 - so now by this I'll return this thing
442:29 - and now I also need another method so
442:33 - that it will take this map and then pass
442:36 - it to a task object over here we are
442:39 - parsing it from a string
442:41 - now we need to parse it from a map
442:46 - so task Dot
442:49 - from map
442:52 - and we need a map of type string and
442:57 - not Dynamic and let's call this map
443:01 - so over here I'll get the map from map
443:04 - task
443:06 - and the time will be
443:09 - date time Dot from milliseconds from
443:15 - milliseconds since Epoch and then the
443:19 - time is
443:20 - map
443:22 - time
443:23 - so as I told earlier this is a two-way
443:26 - process we can get the millisecond since
443:28 - Epoch from the time and we can get the
443:30 - date time from the value of milliseconds
443:33 - in support
443:34 - so milliseconds in support this variable
443:36 - is independent of the time zone you can
443:38 - read more about it if you want if you
443:40 - like
443:42 - so now I think the model class is ready
443:46 - now let's get back over here first let's
443:49 - import this model class import
443:52 - now whenever we are importing some
443:54 - project file we leave our line Gap and
443:58 - we use referential indexing so double
444:01 - dots backslash I can see model and
444:04 - inside that I can see task dot dot so
444:08 - this is the standard practice for
444:09 - importing all the flutter Imports or the
444:13 - external packaging ports are together
444:14 - one after leaving one line we use all we
444:17 - write all the
444:19 - project level Imports and if you have
444:21 - Dart level Imports we leave yet another
444:24 - line
444:26 - over here and that goes at the top so
444:28 - this is the standard practice that is
444:30 - followed and we will follow the same
444:34 - so now the save data
444:36 - uh let's
444:39 - let's create an object
444:42 - so I'll call it
444:45 - task
444:48 - is equal to task
444:51 - Dot from
444:54 - ma from sorry from string
445:00 - and then the string is
445:04 - task controller
445:07 - dot text
445:10 - okay so this dot text returns whatever
445:13 - value is in this text editing controller
445:17 - so now we have our task over here
445:19 - let's save it in the shared preferences
445:24 - so for that over here I'll write prefs
445:28 - dot put string
445:36 - okay I don't know it is put string or
445:38 - set string
445:40 - foreign
445:49 - task I guess
445:53 - okay and then we need to give the value
445:56 - so this we have a set string so we need
445:59 - to convert the value to string so for
446:03 - that I'll use a DOT package and as I
446:05 - told it will go at the top import
446:09 - convert
446:12 - so now we have Json this is Json Json
446:17 - keyword is inside this convert package
446:21 - json.10 code so over here you can see it
446:24 - takes a object of type Dynamic and
446:26 - encodes it to a string so Json dot
446:29 - encode and then over here we will give
446:31 - the map so T dot get map
446:37 - cool
446:40 - so now we have saved the data now once
446:44 - this is saved
446:47 - we can close the bottom sheet if we want
446:50 - so let's see let's see if it is saved or
446:53 - not
446:55 - also we can't possibly say it is saved
446:58 - or not we can see if there is some
446:59 - errors or not we will see if this is
447:01 - saved or not after this most probably in
447:04 - the next video so let's see enter some
447:06 - task
447:09 - demo task one
447:12 - and click on ADD
447:14 - unhandled exception missing plugin
447:16 - exception so you can see so this means
447:20 - that
447:21 - this shared preference is not found in
447:24 - the project and that is because we have
447:27 - added this shared preference while the
447:30 - project was debugging so the shared
447:33 - preference is added to the project but
447:35 - it has not been transferred to our
447:37 - mobile or the emulator that we use
447:41 - so let's close this and start it again
447:44 - run run without debugging
447:48 - select Dot and flutter
447:53 - now over here we can do one more thing
447:55 - that as soon as this task is created we
447:58 - empty the
447:59 - text controller so I'll write task
448:03 - controller
448:04 - oh I'm sorry the spelling is wrong
448:10 - task controller
448:13 - dot text and force it to an empty string
448:18 - so now if you would remember this
448:20 - underscore uh
448:23 - uh before any variable name makes the
448:27 - variable private
448:29 - okay and if we don't give an underscore
448:31 - then by default it is public
448:35 - so that was another thing that we have
448:37 - discussed in the starting of this series
448:40 - now let's wait for the build to finish
448:42 - and then let's see
448:46 - so now the build is finished let's just
448:49 - save this change that we made over here
448:55 - now let's add a task
448:58 - demo task one and if I click on add that
449:01 - text is getting removed and we you can
449:03 - see there is no change in the console
449:06 - but along with that there is no error as
449:09 - well
449:10 - so in the previous video we had we have
449:15 - we were saving the task
449:17 - okay so now there was an error that I
449:21 - made
449:21 - so over here while we are saving
449:25 - you can see that in the preferences I
449:28 - have given it a key of task so every
449:31 - time I add a new task this same task key
449:34 - is given to that task and hence the
449:37 - value which was
449:39 - stored prior to execution of this
449:43 - statement gets removed so ultimately
449:46 - what will happen that in our shared
449:47 - preferences we will only have the task
449:50 - that we saved the last
449:52 - so that would be an error so let's fix
449:55 - that so instead of right now instead of
449:59 - adding task let's first try to get to
450:01 - the task then we will convert the task
450:04 - into a list of tasks and then we will
450:07 - store it and then after that every time
450:10 - we add something we will retrieve the
450:12 - list we will add the item to the list
450:15 - and then
450:16 - we'll again save it to the shared
450:18 - preferences
450:20 - so let's get to the top first let's
450:24 - clear everything
450:25 - prefs
450:26 - dot remove
450:30 - and the keys task
450:35 - so now for now nothing much will happen
450:38 - but uh in the but during the last video
450:42 - we have executed this code so right now
450:46 - in our system we actually have a
450:49 - preferences with the key named as task
450:52 - and it has some value so let's first
450:54 - remove that before we start coding
450:58 - Okay so
451:00 - I'll save this
451:02 - and then over here I'll write any
451:05 - something gibberish then click on ADD
451:09 - now I'll click a few times just to
451:11 - confirm you know
451:13 - so now we don't have anything in our
451:16 - shared preferences so let's start coding
451:20 - the process in which we are planning to
451:22 - save the task
451:23 - so
451:27 - first we will get all the tasks
451:29 - so perhaps not get
451:33 - I don't know it was get or
451:38 - yes it was get string
451:42 - I'm sorry get
451:44 - string
451:45 - and the string is
451:48 - task
451:49 - okay and then when we get this okay
451:52 - sorry this is not uh
451:54 - future this returns a simple string so
451:58 - we'll get a string over here
452:01 - string tasks
452:03 - and that is this prep start get string
452:07 - now after that this task is in string
452:10 - format we need to decode it back to Json
452:13 - format and from there we can again get
452:16 - it into a list of objects which we don't
452:18 - need right now we will probably do that
452:21 - later
452:22 - Okay so
452:25 - Json
452:27 - and daughter decode
452:29 - and we have to decode
452:32 - tasks
452:35 - okay now this also returns a dynamic
452:39 - value so for now I'll store it in a list
452:42 - list and that is
452:45 - list
452:46 - and I'll be storing everything in this
452:49 - list
452:51 - okay so now since we have this list
452:55 - let's try printing something
452:58 - or maybe let's print this list so right
453:02 - now it should be empty or something like
453:04 - that so now once we have this list we
453:08 - will add the new task in that so list
453:12 - dot push
453:15 - foreign
453:27 - in JavaScript we have Push
453:32 - okay so now over here I'll simply add
453:35 - and Json and code T dot get map
453:41 - okay and then again I'll encode it and
453:44 - save it so prefs
453:47 - and Dot set string
453:49 - and the string is stored in task
453:54 - and the task is Json dot encode
453:59 - I'm sorry Json dot encode
454:06 - lists
454:08 - sorry it is list
454:12 - okay so I hope everything is clear we
454:15 - first retrieved all the tasks we
454:17 - converted it into a list
454:20 - okay and then in that list we
454:24 - uh added the last value and then we
454:27 - stored it so let's try running this and
454:29 - see
454:31 - so I think it will crash for the first
454:33 - time we'll have some bugs let's we'll
454:35 - fix that on our
454:37 - so I click on ADD and yes it has an
454:40 - error the gutter length was called on
454:45 - okay so if the so we want to
454:49 - execute this only if tasks is not empty
454:53 - so I'll use the
454:55 - null value operator and then I'll
454:58 - initialize this
454:59 - so now let's restart this
455:02 - although this error should occur only
455:05 - for the first time since then we didn't
455:07 - have anything here
455:10 - Okay so
455:16 - let's add some task
455:18 - some task
455:19 - click on ADD
455:23 - and again this error happened on line
455:26 - number 26
455:30 - foreign
455:34 - okay so this instead of this entire
455:37 - thing
455:38 - so we can't do it like this because
455:43 - this entire thing if this entire thing
455:46 - is null then only this will work but
455:49 - right now the situation over here is
455:51 - that this string is only empty
455:54 - so for that we'll use our ternary
455:57 - operator tasks
455:59 - equal to null if the task is null then
456:03 - we'll simply initialize it like this
456:06 - as this we have a semicolon over here
456:12 - okay now let's format this save this do
456:16 - a full restart
456:22 - so we start is done
456:26 - now let's add some task
456:30 - some task and then I click on ADD and
456:33 - then for now we are getting this and now
456:35 - if I click on this again so now I am
456:39 - so now the task was stored in the first
456:42 - time and in the second time it is
456:43 - retrieved and then so this line so this
456:47 - print statement executes
456:50 - executes and then this is printed on the
456:52 - console and then after that again we get
456:56 - this task added in the list and then we
456:59 - again store it in the shared preferences
457:01 - so I hope this five lines are clear to
457:04 - you now if I click on this again so some
457:06 - task will print and then once again some
457:08 - task will be added so two times it will
457:11 - print and three times it will be
457:14 - in the shared preferences so let's add
457:17 - some things new so if I click on ADD so
457:21 - now over here you can see some task is
457:23 - at once it is added and twice it is
457:26 - added and some task 2.0 will also be
457:29 - added but it is not being displayed over
457:32 - here so now if I
457:35 - make it three so now this means that uh
457:39 - some task 3.0 will be added to our
457:42 - preferences and everything prior to that
457:45 - will be displayed so let's see and if I
457:48 - click on ADD so I get some tasks some
457:51 - tasks some task 2.0 and then this 3.0 is
457:55 - also added but since the print statement
457:58 - is
457:59 - before the adding thing there so that is
458:02 - what is not printed now I can
458:05 - make it in both ways so now once before
458:08 - adding once after adding we can see
458:10 - everything
458:12 - so now let's see print add
458:14 - so now let's see the last one
458:18 - we have some tasks some okay sorry I
458:21 - didn't save it
458:25 - I'm extremely sorry
458:27 - so I'll have to make it five
458:29 - so now
458:30 - yes so let's see the last one so now in
458:34 - the last time we added some task 5.0 so
458:37 - that is also printed and prior to that
458:39 - we did 4.0 3.0 2.0 and 2 times some task
458:44 - so everything is being stored in the
458:47 - shared preferences and decoded easily
458:50 - okay so by this we complete the storing
458:54 - process and the storing process works
458:56 - fine now
458:57 - so I'll remove this and once it is
459:00 - restored I also want to clear the
459:03 - text field and
459:06 - hide this bottom sheet so for that I'll
459:10 - add another two lines
459:12 - task
459:14 - controller
459:15 - dot text
459:18 - is this
459:20 - and then Navigator
459:23 - dot off
459:28 - context
459:30 - dot pot
459:35 - so now this is done
459:38 - let's format this
459:55 - and save this
459:58 - so now if I add some tasks 6.0 so that
460:03 - will be saved and then this
460:05 - uh bottom sheet should close so let's
460:08 - click on that and you can see the bottom
460:11 - sheet is closed some task 6.0 is added
460:14 - and the text field is also
460:18 - empty that means it is ready to store
460:20 - another task so by this we complete the
460:23 - storing process
460:26 - let me add to the Version Control
460:38 - foreign
460:45 - saving is done we need to display the
460:48 - tasks over here
460:50 - okay so for that as soon as this screen
460:53 - opens we need to retrieve all the tasks
460:56 - and then convert it into the task object
461:01 - that we have in this model package a
461:04 - model package sorry not model model
461:06 - package and then we will create a widget
461:09 - and that will display all the tasks so
461:13 - let's start in the init State method
461:16 - I'll
461:17 - create a method get
461:20 - tasks
461:24 - okay
461:26 - so now I need to create this method
461:37 - so now again I'll
461:41 - call this shared preferences
461:47 - make it a sink
461:52 - okay then I'll
461:55 - get all the tasks over here
462:02 - now let's convert it into a list of
462:06 - type task
462:09 - so for that I'll create a global
462:12 - variable over here and that is
462:15 - tasks
462:16 - now I'll initialize it inside our init
462:20 - state or in get to tasks would also do
462:23 - because that method is being called
462:25 - inside in its state
462:26 - so
462:28 - tasks I have initialized
462:32 - now let's add value to this task so for
462:39 - I'll say
462:43 - Dynamic d
462:45 - in list
462:53 - and then over here I'll add that Dynamic
462:56 - D so
462:58 - tasks dot add
463:02 - and then over here it will be
463:07 - task
463:09 - Dot from map
463:11 - and then d
463:13 - so now all the tasks will be added let's
463:16 - simply print
463:17 - print
463:21 - so now actually over here we have one
463:25 - two three
463:27 - four five six seven
463:31 - in total seven tasks so this should
463:33 - print seven items
463:35 - so let's save this
463:39 - and once saved we should we need to do a
463:42 - full hot restart so that in its state
463:44 - will be executed again
463:51 - and once we'll do
463:53 - we get a error over here
463:58 - unhandled exception type string home
464:01 - screen 39
464:06 - so
464:14 - so I think there is some mirror over
464:17 - here I'll initialize it as list of
464:22 - task
464:26 - okay now if I do a full restart I don't
464:29 - think the error should be here
464:35 - so again it is showing some error okay
464:38 - so over here it is a type string is not
464:41 - a subtype of map string Dynamic so over
464:43 - here I am guessing
464:48 - uh this from map takes a value of map
464:51 - string Dynamic and D is dynamic so
464:56 - I don't know let's convert it to type
464:59 - map dynamic
465:06 - if I save this full restart
465:13 - and again it is still giving us an error
465:16 - let's go in the task
465:20 - so in from map
465:23 - we take a map of type string Dynamic so
465:26 - I don't understand what is there over
465:28 - here
465:29 - will have to check the type
465:33 - okay so let's convert it back to
465:37 - a dynamic and over here I'll add a print
465:40 - statement
465:42 - print D dot runtime type
465:45 - we have a
465:47 - method like that which will print the
465:50 - data type during the runtime
465:53 - Okay so
465:56 - let's save this
466:00 - let's do a full restart
466:07 - and so the error is that Dynamic d
466:11 - is of type string okay okay
466:15 - so I think what is happening is that
466:19 - there are two levels of encoding first
466:22 - the map is encoded to string and then
466:26 - that string is added to a list and then
466:27 - that list is encoded to a another string
466:30 - so over here only one decoding is
466:33 - happening so let's decode it once again
466:37 - so like when we decoded the list we got
466:40 - strings
466:42 - of
466:44 - of the map that we were encoding over
466:47 - here
466:49 - right Json encode
466:51 - list Json and code T dot get map okay so
466:55 - this encoding is uh decoded over here
466:59 - now let's decode this encoding okay so
467:03 - for that
467:05 - over here I'll write
467:07 - Json daughter decode
467:11 - d
467:13 - and we don't need this anymore
467:16 - so let's save this
467:20 - and do a full restart
467:24 - and I hope there is no error this time
467:26 - and yes there is no error so the error
467:29 - was because we were encoding two times
467:31 - and decoding only one time so now the
467:34 - error is fixed and we get all the
467:35 - instances one two three four five six
467:38 - seven so we have seven tasks so now the
467:42 - retrieving is also kind of done now we
467:45 - just need to display it on the screen
467:48 - and then uh add a ticker that will
467:51 - complete the task and then as soon as
467:55 - the date changes the previous task
467:58 - should get deleted automatically so that
468:02 - is what we are going to do
468:04 - so up until the previous video we have
468:07 - created task stored them and also
468:10 - retrieved them now let's display them on
468:13 - the screen okay so for that I'll remove
468:16 - this text that we have over here
468:21 - okay so or better that instead of
468:25 - removing I do conditional rendering that
468:28 - means if this tasks is empty then the
468:33 - center widget will be there otherwise we
468:35 - will display some other widget
468:37 - Okay so
468:41 - if tasks is equal to null that means we
468:44 - don't have any task then this Center
468:46 - widget seems appropriate and if we have
468:50 - something then let's display it so for
468:53 - that I'll use a column
468:57 - you can use a list view also
469:00 - I feel more comfortable with columns so
469:03 - in column we have children the children
469:05 - is
469:07 - task
469:09 - dot map
469:13 - dot to list so we have already discussed
469:16 - this method in one of the video where we
469:19 - were discussing about columns
469:20 - so for now let's return a container
469:26 - okay
469:28 - now the container will have a height of
469:31 - let's say 70
469:33 - and the width will be the entire bits of
469:37 - the screen media query
469:39 - dot off
469:41 - context
469:48 - dot size dot width
469:51 - okay
469:56 - don't know why it is yes so the error is
469:58 - gone
470:00 - now
470:01 - along with this inside it will have a
470:06 - child and the child will be a row or for
470:09 - now just let it simply be the text and
470:12 - the text is
470:14 - e dot task
470:18 - okay so the task
470:22 - now let's format this save the sense see
470:26 - how it appears
470:32 - so we can see all the tasks and it looks
470:34 - pretty ugly let's add some decoration to
470:38 - it
470:39 - so we'll call the decoration parameter
470:41 - will have
470:43 - boxer decoration
470:49 - okay now inside this we will first add
470:53 - the Border radius
470:54 - so border radius dot circular
471:01 - and then from all sides I wanted to be
471:04 - circular by
471:06 - five
471:08 - degrees or okay and then let's add
471:11 - border decoration style so
471:14 - border and the Border will use the
471:17 - widget border.all
471:20 - means that refers to all the sides
471:24 - now let's add color to this border the
471:26 - color color of Border will be black
471:29 - colors not black and it can be of width
471:34 - 0.5 let's see
471:37 - now let's format it save it and see how
471:40 - it looks I hope it looks better
471:44 - okay so it is looking better but still
471:47 - it needs a lot more refining let's add
471:50 - margin
471:52 - margin
471:54 - we always use const because we don't
471:57 - want this to re-render every time we
472:00 - called every time the set is state
472:03 - every time the set State method is
472:05 - called
472:07 - okay because it is not necessary
472:10 - so let's add a margin from all the sides
472:13 - to be
472:14 - 10 pixel
472:16 - okay so it looks better maybe I can
472:19 - change this to symmetric
472:22 - and horizontally we have 10
472:27 - pixel of margin but
472:30 - vertically I think only five will do so
472:34 - let's see
472:40 - yes this looks better
472:41 - now
472:43 - the text should be in Center so for that
472:46 - we have another widget that is alignment
472:49 - and then it also has any num alignment
472:52 - Dot Center
472:55 - Center left okay
472:58 - let's format this save this
473:02 - okay now let's add some padding over
473:04 - here
473:07 - so for that I'll simply copy this in vs
473:10 - code we have a shortcut shift option and
473:13 - down button then the all selected things
473:16 - are copied just below it and I'll change
473:19 - this to padding
473:21 - and instead of symmetric it will be only
473:27 - um
473:28 - and this will be left
473:31 - I'm sorry
473:33 - and now since we have only one parameter
473:35 - we don't need a comma it can be a one
473:37 - liner widget and let's save this
473:40 - and some padding is there okay
473:45 - now I think we were using the font Mont
473:48 - serat over here
473:50 - I think yes so we are using monster red
473:53 - so I need to add that
473:54 - over here as well Style
473:58 - Google fonts
474:01 - dot Mount Sarat
474:11 - okay let's format this
474:15 - now let's save this
474:18 - and the
474:20 - text is in the font of montessor act
474:24 - okay so now the basic UI is done now all
474:29 - we need to do is add a radio button over
474:32 - here and as soon as it is ticked Mark
474:34 - instead of radio button we can use a
474:36 - check box as soon as it is checked we
474:38 - will remove this task
474:41 - item from here
474:44 - okay and also from the shared
474:46 - preferences so for that I need to wrap
474:49 - this text around the row
474:52 - okay so like this let's save this now
474:56 - yes so there is no change in UI that's
474:58 - good
474:59 - now I'll add a check box
475:11 - okay
475:13 - now this checkbox needs some parameter
475:16 - for now I'll just give the required
475:18 - parameter because UI is my major concern
475:21 - the parameter value is required so let's
475:24 - add some value
475:26 - for now all will be false that means
475:29 - unchecked
475:31 - okay let's see what else is required
475:41 - I'll have to check it like this only
475:48 - might need to give it a key
475:53 - uh let's say the key key takes a value
475:57 - of any type so let's say
476:01 - a global key
476:04 - and over here we can
476:07 - leave it like this so let's format this
476:10 - save this it will show what is required
476:13 - or what not okay so we have the check
476:17 - box over here now we want this to go
476:20 - over here
476:21 - so for that we can either leave a add a
476:26 - sized box in between that is the
476:28 - inefficient method the efficient method
476:30 - would be to change the alignment main
476:33 - access alignment then the main axis
476:34 - alignment would be
476:37 - space between
476:38 - so it will leave all the space possible
476:41 - in between the two items
476:44 - okay so now you can see all our
476:46 - perfectly aligned to the right and all
476:48 - the tasks are perfectly aligned to the
476:50 - left
476:53 - so with this we complete the UI now
476:55 - we'll add functionality in the
476:58 - coming parts so let me add it to Version
477:01 - Control
477:17 - foreign
477:21 - so without further delay let's get into
477:24 - it
477:25 - so up until the last video we were able
477:29 - to save the tasks and also displayed now
477:33 - let's proceed so now while I was
477:37 - starting this project I saw error that
477:41 - when we first start this project the
477:44 - tasks don't appear
477:47 - okay so they they tend to be disappeared
477:50 - so we are retrieving the task over here
477:52 - but we are not able to see it on the
477:55 - screen however if I save the screen that
477:59 - means set status internally called and
478:02 - the build method is executed again I am
478:05 - able to see all the tasks that were
478:08 - saved so the problem over here is that
478:10 - we are retrieving the task but after
478:12 - that we need to do a set state so that
478:15 - all the tasks are visible on the screen
478:18 - so let's do that right away where we are
478:21 - getting all the tasks over here we can
478:23 - simply say set state
478:35 - so this is done
478:38 - now let's format this save this
478:44 - and now if I do a restart I should be
478:47 - able to see all the tasks
478:50 - so as soon as the tasks are retrieved it
478:55 - is displayed over here
478:56 - so now let's actually try completing the
479:01 - task means if this task is completed I
479:03 - check I click on this checkbox and the
479:05 - check box and this task gets removed
479:08 - from my task list okay so for that first
479:13 - we need to create a list
479:19 - list of Boolean
479:24 - okay that is
479:26 - tasks return
479:29 - now let's initialize it the same place
479:31 - where we get the tasks so over here I'll
479:35 - call that method
479:37 - call that
479:38 - variable sorry
479:40 - and then we have a special method in
479:44 - that that is called list dot generate
479:48 - so what it basically does is it
479:50 - generates a list based on two parameters
479:53 - first is the size of the list and second
479:55 - all the values that will be in that list
479:58 - so the list of this task done should be
480:01 - equal to the task list so I'll simply
480:04 - copy and paste
480:06 - dot length
480:14 - and then over here we get index
480:17 - and for each index I wanna return false
480:21 - means this task done will be a list of
480:24 - length this where each value is false so
480:30 - now we have the list
480:35 - let's save this and now let's come to
480:38 - our checkbox so this check box needs
480:41 - another variable that another required
480:44 - parameter that is on changed now this
480:47 - gives us a value
480:49 - means that is the current value of this
480:52 - checkbox true if it is ticked and false
480:54 - if it is not okay so let's
480:59 - do this so the value over here will be
481:03 - tasks
481:05 - done and inside that the index will be
481:09 - the same index of e in this tasks list
481:13 - so for that we have we'll simply use the
481:16 - index of method
481:18 - in the tasks
481:20 - I wanna get the index of
481:23 - e
481:24 - simple so now I get the index of V
481:27 - and at that value what is the
481:31 - corresponding value in tasks done list
481:34 - and when this is changed I'll change
481:36 - this value
481:40 - so inside a set State a set state is
481:43 - important because if we check this then
481:47 - internally the value will change but it
481:48 - will not reflect on the screen so that's
481:51 - why I'll put it inside a set state
481:54 - and over here
481:57 - this will be equal to VL
482:02 - now let's format this
482:09 - now once done
482:12 - I'll save this also
482:16 - and now since
482:18 - this method right now is null because
482:21 - this is
482:23 - called in get task and get task is
482:26 - called and instead we need to do a full
482:28 - restart so let's do that
482:33 - and once it is done okay so they are
482:36 - little bit lagging so once this is done
482:40 - if I click on this I should be able to
482:42 - see the tick mark
482:45 - cool
482:48 - so now let's do the save thing like that
482:53 - means that if I have done some task this
482:56 - is some task is completed so I check
482:58 - mark it
483:00 - some task 2.0 is also completed so I
483:04 - check this also now I want to save this
483:06 - changes that means when I open the task
483:09 - manager next time so I don't wanna see
483:12 - these two tasks as I have already
483:14 - completed them so for that we need a way
483:17 - to save the
483:20 - save this thing save the existing state
483:22 - of the application so for that I am
483:25 - gonna add a save button over here so
483:28 - let's do that
483:30 - so for that inside the app bar we have
483:34 - another parameter that is called actions
483:38 - can that it takes a list of widget means
483:41 - it
483:42 - will list of widgets that will be
483:45 - displayed here starting from right to
483:46 - left so we just need one and that is an
483:50 - icon button
483:57 - okay now this icon button takes an icon
484:00 - and the icon takes a icon Widget icon
484:03 - widget we use an icons enum and then we
484:06 - have an icon called
484:08 - save
484:10 - we can use that yes so this will be the
484:12 - icon
484:14 - and then we have a on pressed or on
484:18 - clicked here so we have one pressed over
484:19 - here
484:21 - so for now simply print
484:26 - save is clicked
484:31 - so once this is done let's format this
484:34 - save this
484:36 - now I should I am able to see the save
484:39 - button if I click on this save click
484:41 - this printed
484:43 - okay so now let's
484:45 - actually save the remaining tasks and
484:49 - remove the ones which are checked okay
484:53 - so for that I am gonna create a separate
484:55 - method
484:57 - this
485:00 - update pending
485:04 - tasks list
485:09 - and I'm gonna create a method over here
485:12 - with the same name
485:18 - and now first we need this shared
485:21 - preferences thing because we need to
485:23 - handle the preferences now a better
485:27 - method to handle shared preferences
485:29 - would be that we initialize it inside
485:31 - init State and make this preps variable
485:34 - Global so that the same variable we can
485:37 - use in update pending task list method
485:40 - get task method and
485:42 - save data method okay so that is a
485:46 - better approach now since we are using a
485:48 - weight we need to add a sync over here
485:52 - now let's create a list of
485:55 - task
485:58 - that is the pending list
486:09 - now let's Loop through all the tasks
486:13 - thank you
486:18 - so I'll write for VR I is equal to 0 I
486:22 - is less than
486:24 - tasks
486:28 - dot length
486:31 - I plus plus
486:33 - now okay I don't need a parenthesis
486:37 - this is a one liner so we don't need a
486:40 - parenthesis
486:41 - if not
486:46 - tasks
486:48 - done is I
486:53 - then we inside the pending list
486:58 - we add
487:00 - the task so that is
487:05 - tasks I
487:08 - so this is done
487:10 - and now
487:12 - after executing execution of this
487:15 - statement we get the pending list that
487:17 - means all the tasks which are not
487:19 - checked so then we finally save that in
487:22 - the shared preferences
487:25 - so for that pending we need to create a
487:28 - pending
487:29 - list encoded
487:32 - and over here we again use the list dot
487:36 - generate
487:40 - and the length will be pending list dot
487:43 - to length
487:47 - okay and then every time we return let's
487:51 - make this I every time we return Json
487:55 - dot encode
488:01 - uh
488:03 - pending list
488:05 - I dot get
488:09 - map
488:15 - so this is done now we need to save this
488:19 - encoded list because when we are getting
488:21 - the task we are decoding it twice so the
488:24 - first level of encoding is done over
488:26 - here now we'll do the second level of
488:27 - encoding prefer dot set string
488:33 - and the string name should be exactly
488:36 - the same as we have over here that is
488:38 - task
488:40 - task and the value is
488:43 - Json dot encode
488:49 - pending
488:51 - list encoded
488:54 - so now
488:57 - with this we remove the tasks which are
489:01 - marked check and also save the remaining
489:04 - one so after this we just need to call
489:06 - this method to get the fresh list of
489:08 - tasks and also display them
489:13 - so with this let's see if this works
489:19 - I'm gonna do a full restart
489:23 - okay
489:25 - so it has not restarted actually yes so
489:28 - now it is done now if I check some task
489:31 - and some task 4.0 means that means that
489:34 - I have completed these two tasks and
489:36 - then I save the state so those two
489:39 - disappear and then we have the remaining
489:41 - task so with this we conclude the
489:46 - 99 part of the application that we and
489:50 - at the morning of the day we list all
489:52 - the tasks that we want to do and but
489:55 - during the course of the day as soon as
489:57 - we complete the task we check them save
489:59 - them and then those tasks are gone
490:03 - so this is what a basic daily task
490:07 - manager application should be now the
490:10 - next thing that we can do is
490:14 - to add a to add a button at the bottom
490:18 - to clear all the tasks because suppose
490:20 - if you have some tasks
490:23 - and you are not able to kind of complete
490:26 - it
490:27 - in the same day or you completed them
490:29 - all and forgot to check mark them so and
490:32 - then the next day comes so over here we
490:34 - have will have a button that will simply
490:37 - remove all the tasks and then you will
490:39 - get a fresh screen to start the other
490:43 - tasks or start your other day
490:46 - so up until the last video we were able
490:48 - to create tasks
490:50 - mark them as completed and also save
490:53 - them so now as we discussed in the
490:58 - previous video that suppose if a person
491:00 - forgets to check all the things and the
491:03 - next day he wants to start fresh means
491:06 - add new tasks for that day so it would
491:09 - be a better user experience if we have a
491:12 - button by which we can clear all the
491:14 - existing tasks at once
491:17 - so let's do that
491:20 - so for that in the home screen in the
491:23 - app bar I'll add another icon button
491:28 - so in vs code we have a shortcut shift
491:31 - command and arrow down the exact thing
491:34 - gets copied below and now instead of
491:38 - save I'll
491:39 - add a delete
491:43 - icon okay and then on pressed
491:48 - simply prints
491:54 - put us
491:55 - now let's save this
491:59 - and we can see the delete button oh by
492:02 - this I remember that in the previous
492:04 - video I said that it goes from right to
492:07 - left which is wrong I am sorry it goes
492:10 - from left to right and over here you
492:13 - could see that as soon as the list
492:15 - extended the task manager which was in
492:17 - Center is now at the left corner so this
492:22 - is this happens automatically and that
492:24 - is good
492:26 - so let's proceed now if I click on this
492:29 - delete button press is being pressed uh
492:31 - printed and but actually I want to
492:35 - delete all these things over here
492:39 - so simply
492:42 - uh so simply over here only
492:47 - I'll create the shared preferences let's
492:51 - see if this can be a sync yes so this
492:54 - can be a sync so let's
492:56 - get my shared preferences variable over
493:00 - there
493:01 - okay or in other ways uh words create a
493:05 - preference and then
493:09 - to this I wanna set string
493:17 - and that is task
493:21 - and the value is
493:23 - Json dot encode
493:27 - and empty list
493:30 - that means all the things are
493:33 - removed nothing is inside this list and
493:36 - after that simply I'll call
493:39 - get task
493:41 - method
493:49 - okay I think it is good tasks
493:52 - so
493:56 - yeah so let us get tasks
493:58 - so now let's
494:01 - uh format this and save this
494:06 - and let's see if this works or not
494:10 - so I get four tasks now if I click on
494:13 - this delete button everything should be
494:15 - gone
494:17 - and yep it is working means I can clear
494:19 - all the tasks at one at once or marked
494:23 - them done as once you can call it
494:25 - whatever you like now let's try adding
494:28 - something so
494:32 - foreign
494:38 - that when we save it it is being saved
494:41 - in the shared preferences but it is not
494:43 - being displayed on the screen so again
494:46 - we need to call this get tasks after
494:49 - saving each task
494:51 - so save task
494:54 - and then
494:56 - I'll simply call this
494:58 - let's save
495:01 - let's do a full restart
495:04 - foreign
495:07 - once the restart is done we have some
495:09 - new tasks over here
495:11 - we have done other
495:14 - new task Okay so
495:17 - it another change to smoother no issues
495:20 - so if now I click on ADD I am able to
495:22 - see the new task
495:24 - okay so now I can do it like this or I
495:27 - can simply click delete
495:28 - both ways work and by this way complete
495:31 - our simple daily task manager
495:33 - application
495:35 - thank you