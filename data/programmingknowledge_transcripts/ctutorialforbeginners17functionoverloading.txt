00:00 - hello guys welcome once again in this
00:02 - video I'm going to show you what is
00:04 - function overloading and how we can use
00:08 - function overloading and what is the
00:10 - logic of using function
00:13 - overloading so I will take an example
00:15 - which I have already used in our earlier
00:18 - uh programs so I will make a function to
00:22 - add two numbers so I'm not going to
00:25 - return anything and I will make a
00:28 - function and and this will add two
00:33 - numbers so I will give
00:38 - int first
00:41 - number
00:42 - and
00:45 - int second number okay and I want to
00:50 - print the sum of these two numbers so I
00:52 - will
00:55 - say see
00:58 - out
01:01 - sum
01:04 - of integers
01:06 - is equal
01:09 - to and
01:12 - then I will add these two numbers first
01:16 - number plus this second
01:20 - number okay and then I will just give a
01:26 - end
01:27 - line and that's it
01:30 - so what I want is I want to add two
01:33 - numbers that's easy what I will do is I
01:36 - will just call this function
01:40 - sum and then I will I can add two
01:44 - numbers like this
01:47 - 235 and 675 for example and it will add
01:52 - these two numbers and show the result
01:54 - here right so when I compile this
01:57 - program and run this program it will
01:59 - work fine as we have expected okay like
02:05 - this but what happens when you want to
02:10 - add to decimal
02:13 - numbers so what are decimal numbers or
02:16 - what are FL float numbers decimal
02:18 - numbers are
02:20 - 265
02:22 - 756 and
02:25 - 265 something like this so what happen
02:30 - if you want to add decimal points and
02:33 - you want to add integers also and
02:36 - different kind of numbers and when you
02:38 - compile this
02:43 - program it will be compiled fine but
02:46 - when you run the program it will only
02:48 - show you the integer values and not the
02:51 - decimal value and this result is wrong
02:54 - because we wanted to add two float
02:57 - values and show it show the result as a
03:00 - float value so now the concept of
03:03 - function overloading comes so according
03:07 - to function overloading you can declare
03:10 - a same function with a same name two
03:13 - times or more than two times with
03:17 - different arguments or different return
03:20 - type so for example this function is
03:23 - adding two integer I can just copy this
03:26 - function and paste it just below it to
03:30 - add to float so I just change the
03:33 - Declaration here
03:36 - float and
03:39 - Float okay and now when I run the
03:43 - program I will compile
03:48 - it showing the error
03:51 - because now the program doesn't know
03:54 - which function you are using is it
03:56 - initialized by this integer or is it
03:59 - initialized by the float value so what
04:02 - you can do is you can declare two float
04:06 - variables so I will
04:09 - declare float a is equal to and Float B
04:16 - is equal to colon and I will just pass
04:20 - these two values here a is equal to
04:25 - 265.0 and B is equal to
04:27 - 67576 and I will pass
04:30 - A and B as an argument so now we have
04:34 - implicitly specified that the this A and
04:39 - B is a float value so then your program
04:43 - knows that okay I need I have been there
04:48 - are two parameter which are float uh
04:51 - inside
04:52 - my which are passed as a parameter in me
04:57 - so I will go to this function and and
04:59 - see which parameter can take float and
05:03 - you can see these parameter can take
05:05 - float so then this will this program or
05:09 - this function will be executed right so
05:12 - I will say
05:16 - here float the sum
05:19 - of float is this plus this now for
05:24 - example once again I will declare to int
05:29 - X is equal to some integer and Y is
05:35 - equal to some other
05:38 - integer and once again I will call
05:44 - sum X comma y so these two
05:52 - functions this time the function which
05:55 - takes the integer will be
05:57 - executed and when you use integer as a
06:01 - parameter integers as a parameter and
06:04 - when you use float as a parameter this
06:07 - second function will be used okay now I
06:10 - will build my program and I will run
06:15 - it and now you can see both result first
06:19 - is the sum of float that means we are in
06:23 - this function and it will show the
06:26 - result and then the sum of integers that
06:29 - means we are in this function sum of
06:32 - integers is equal to whatever the sum of
06:35 - these two integers here right so this is
06:39 - how you can use function overloading you
06:42 - can declare a function with the same
06:45 - name more than two times or more than
06:48 - once and you can pass different kind of
06:52 - parameter inside this function or you
06:56 - can return different kind of parameter
07:00 - from this function and whenever you pass
07:04 - float inside this it will work as this
07:07 - function and whenever you um pass
07:11 - integers it will know that you have
07:13 - passed integers so it will use this
07:15 - function so in this way you can declare
07:20 - multiple function with the same name to
07:22 - use them differently so I hope you have
07:25 - understood the concept of function
07:28 - overloading and I hope you have enjoyed
07:30 - this video please wait comment and
07:31 - subscribe and bye for now