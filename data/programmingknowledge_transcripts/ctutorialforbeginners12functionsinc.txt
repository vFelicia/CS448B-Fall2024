00:01 - hello guys in this video I'm going to
00:02 - show you how to use functions in
00:05 - C++ so first of all why do we really use
00:11 - functions or what is the need of
00:13 - function in
00:14 - C++ so function is a block of code which
00:20 - executes some something for example so
00:25 - ideally a functions should perform a
00:27 - specific task which is assigned to it
00:32 - and normally when you write uh your code
00:36 - it's made of too many numbers of line
00:39 - for example thousands and thousands of
00:42 - line and when you when the other user
00:45 - try to read
00:48 - your program uh it's becomes really
00:52 - overwhelming to understand uh the
00:55 - program written by other person and the
00:58 - function is used to reduce uh the size
01:02 - of uh the code so that it makes your
01:08 - code or your program understandable so
01:13 - what is the convention generally is
01:17 - whatever value or whatever code is
01:21 - repeating more than once in your program
01:25 - just wrap it in the function so whatever
01:28 - code or whatever piece of code is
01:31 - happening or you need again and again
01:34 - wrap it in the function now let's see
01:38 - how we can declare a function so I
01:42 - already told you in the first two videos
01:45 - that this main is also a function right
01:49 - but this is a main function and we can
01:51 - Define user defined function so what we
01:55 - need to do is you can either go just
01:59 - above this main function and declare
02:02 - your function here so what you can do is
02:05 - you can give a function definition so
02:08 - when you define a function you need to
02:11 - give first of all the return type so for
02:14 - example right now I'm not returning
02:16 - anything so I give void void means I'm
02:19 - not returning anything okay so every
02:22 - function whatever you make it returns
02:25 - anything like this main it's returning
02:28 - zero which is a int that's why
02:30 - I have written WR in here so right now
02:34 - I'm making a function which which is
02:36 - returning nothing and then comes the
02:39 - name of the function
02:41 - so for example I say
02:45 - my
02:48 - first function and then comes these two
02:52 - parentheses and then whatever code you
02:56 - want to write that comes in these two
02:59 - curly BRAC
03:00 - okay so this is the basic Declaration of
03:05 - function a return type which is void
03:08 - right now so that we are not returning
03:10 - anything the name of the function curly
03:13 - braces and these not these curly braces
03:16 - but these are the parenthesis and these
03:18 - are the curly braces okay and whatever
03:21 - you write
03:24 - inide this function it will be executed
03:27 - when you use this function inside your
03:29 - main function so for example I want to
03:34 - print
03:37 - something so I will write V are in
03:43 - a function okay and I will end the
03:50 - line okay so how you can call this
03:53 - function inside your main what you need
03:56 - to do is just copy your function
04:00 - like this you don't need to copy the
04:03 - return type just copy the function and
04:07 - paste it wherever you need to use your
04:09 - function inside main so I will paste it
04:12 - here and I will close it by the
04:16 - semicolon okay
04:20 - so this is how you can call function
04:23 - inside your main let me build the
04:27 - program and let me run it and you can
04:30 - see it's showing we are in a function
04:34 - and this line is in written in the
04:37 - function right and we are calling this
04:39 - function here so main program just goes
04:43 - here and it sees that there is a
04:46 - function here so it goes to the function
04:49 - and it sees this is the code which I
04:52 - need to execute in the function it
04:55 - prints this and then goes to this line
04:58 - right so basically I I told you that
05:03 - whenever you need to execute similar
05:07 - kind of code again and again you can use
05:09 - function right so for example I can use
05:14 - this function multiple times for example
05:16 - four times then my message will be
05:20 - printed four times and I don't need to
05:23 - write the code again and again right
05:26 - this is one line you can add multiple
05:29 - line in this function and you just need
05:31 - to call your function and these line
05:33 - will be executed whenever you call your
05:36 - function I will build my program and run
05:38 - it and you can see it's executed four
05:41 - times so this is the good thing about
05:45 - function whatever is repeating just wrap
05:48 - it in a function and use it now this is
05:52 - one kind of Declaration of function or
05:55 - usage of function but there is other
05:59 - kind of of uh declaration function
06:01 - definition like you use or you give the
06:07 - function definition below this main
06:10 - function okay and then when I compile or
06:14 - build my program it will give me the
06:17 - error why it will give me the error
06:19 - because your program executes from top
06:22 - to bottom so your program start from
06:27 - here it sees I that
06:30 - this line so it has to add or
06:34 - program things that it needs to add this
06:38 - and it needs to add this line and then
06:41 - it goes to Main and it sees this but
06:44 - when it execute top to bottom it doesn't
06:48 - know that there is a function declared
06:51 - below it so you need
06:54 - to either declare a function on top of
06:59 - your main or otherwise what you need to
07:02 - do is you need to prototype your
07:05 - function okay if you want to use this
07:08 - function below main what you can do is
07:11 - you can just copy all your function from
07:15 - void to these parenthesis just copy this
07:19 - and
07:21 - just paste it above and give semicolon
07:25 - and
07:26 - this type of Declaration is called the
07:30 - prototyping of a function so now when
07:34 - the program execute and compilation is
07:37 - done it knows that right now this is
07:40 - included this should be included this uh
07:43 - name space should be included and then
07:46 - it sees okay this function is prototyped
07:50 - here so I need to include the
07:52 - Declaration of the function which is
07:54 - here then it comes when it comes here it
07:57 - knows that there is a function uh which
08:00 - I know that it I need to execute it so
08:03 - that's why
08:04 - this will be executed so let's compile
08:08 - it and this time I don't have any error
08:11 - okay so in technical terms this is
08:14 - called the pro prototyping of the
08:16 - function you just declare all the
08:19 - function here and the definition of the
08:21 - function you can give below this okay
08:25 - and I run the program it runs
08:27 - perfectly so in this way you can use
08:31 - functions and this is the big basics of
08:34 - function there are other type of
08:37 - function which Tak parameter which
08:39 - returns parameter and these type of
08:42 - function I will cover in the later
08:44 - videos so keep watching and please wrate
08:46 - comment and subscribe and bye for now