00:00 - hey guys welcome to the next video on
00:02 - open CV tutorials for beginners using
00:04 - Python in this video we will talk about
00:07 - kenny edge detector in open CV so first
00:12 - of all what is canny edge detector so
00:15 - the canny edge detector is an edge
00:18 - detection operator that uses multistage
00:21 - algorithm to detect a wide range of
00:25 - edges in images now this canny edge
00:29 - detector was written and developed by
00:33 - John F Kennedy in 1986 that's why it's
00:39 - named after his name which is Kenny as
00:43 - detector now the process of canny edge
00:46 - detection algorithm can be broken down
00:49 - in five different steps the first step
00:52 - is to apply gaussian filter to smooth
00:56 - the image in order to remove the noise
00:59 - the second step is to find the intensity
01:03 - gradients of the image the third step is
01:06 - to apply the non maximum suppression to
01:09 - get rid of spurious
01:11 - response to edge detection the fourth
01:15 - step is to apply double threshold to
01:19 - determine the potential edges and the
01:23 - fifth step is to track edges by
01:26 - hysteresis that is to finalize the
01:29 - detection of the edges by suppressing
01:32 - all the other edges that are weak or not
01:36 - connected to strong edges so this seems
01:41 - a little bit complicated but in open CV
01:44 - it's really simple to use so there is a
01:48 - built-in function in open CV which is
01:52 - called Kenny and we are going to use
01:55 - this function so to start with I have
01:58 - this sample code which loads this image
02:02 - which is called messy dot jpg using the
02:06 - matplotlib library I'm going to just run
02:09 - this to show you the result so this is
02:12 - the image and we want to
02:13 - they take the edges of this image so
02:18 - what we are going to do is we are going
02:20 - to first of all declare a variable
02:22 - called Kenny and then there is a method
02:27 - as I already said inside your CV to
02:30 - library which is called Kenny method
02:34 - which takes few arguments so the first
02:36 - argument here is the image source itself
02:41 - the second argument and the third
02:43 - argument as you can see is the first
02:46 - threshold value and the second threshold
02:49 - value so this first threshold value and
02:51 - the second threshold value you need to
02:53 - provide for the hysteresis procedure so
02:57 - there is the last step as I mentioned
03:00 - and in that step hysteresis take place
03:04 - and for that procedure we need to
03:07 - provide the values of the threshold one
03:11 - and the threshold two so for now I'm
03:16 - going to provide hundred as the
03:18 - threshold one and 200 as the threshold
03:21 - two but later you might want to add a
03:26 - track bar in order to see the changes in
03:30 - the edges when you just move the track
03:33 - bar from left to right for the threshold
03:36 - one and the threshold two so this might
03:39 - be a small assignment for you you can
03:42 - just add the track bar and see how the
03:46 - edge detection changes when you change
03:49 - the value of threshold one and threshold
03:52 - two and I have already explained how you
03:55 - can use track bars with open CV so just
03:59 - watch that video and you will be good to
04:01 - go so now we have the result of canny
04:05 - edge detection function so we are going
04:08 - to just add it to our list first to the
04:11 - list of titles and then second to the
04:15 - list of images and the range we are
04:18 - going to increase it to two and this we
04:22 - are going to just see the images in one
04:26 - by two format so
04:27 - going to just run this button script and
04:30 - see the result so you can see we have
04:34 - the original image here which we have
04:38 - loaded in the grayscale and on the right
04:40 - hand side you can see the result of the
04:43 - canny edge detection methods so you can
04:46 - see all the edges which are available
04:49 - here on this messy five dot jpg image
04:54 - you can use this on the other images
04:58 - also so for example I have the Lenna dot
05:01 - jpg image let's see the result of that
05:05 - and this is the result of the canny edge
05:09 - detection method on this Lana dot jpg
05:14 - method so this canny edge detection is
05:17 - really useful because in the last video
05:21 - we have seen how to find out the image
05:23 - gradients and let's see in comparison to
05:28 - those image gradient methods how Kenny
05:32 - edge detection method performs so these
05:36 - are all the methods I have explained in
05:39 - the last video laplacian Sobel X and
05:42 - Sobel Y and I have shown you how to
05:45 - combine the result of Sobel X and Sobel
05:48 - why and additionally I have added this
05:51 - line to the previous code which I have
05:54 - shown you in the last video which is a
05:57 - J's is equal to CB 2 dot canny which it
06:00 - gives us the result on the same image
06:03 - using the canny edge detection method
06:06 - and I have added it to the title and the
06:09 - image right so let's run this script
06:12 - once again and let's see the differences
06:14 - in the result using all these methods so
06:20 - you can see all the six results this is
06:24 - the original image this is the result of
06:27 - the laplacian method this is the result
06:30 - of Sobel x and this is a result of Sobel
06:34 - y and this is the combination of Sobel x
06:37 - and y and you can see canny edge
06:39 - detection gives us the result
06:41 - which contains lesser noises so you can
06:44 - see there is a lot of noise present in
06:46 - the other matters you can see here all
06:50 - the noise is present which is removed
06:53 - using Kenny edge detection or in the
06:57 - laplacian method also you can see some
07:00 - noises around but in the Kenny edge
07:03 - detection method you can see you get the
07:07 - proper edges and more precise edges
07:11 - without any noise so this is the benefit
07:15 - of using Kenny edge detection so this is
07:19 - how you can use Kenny edge detection in
07:22 - OpenCV I hope you enjoyed this video and
07:24 - I will see you in the next video
07:35 - you