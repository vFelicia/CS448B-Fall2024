00:00 - hey guys welcome to this course on
00:03 - node.js tutorial for beginners and in
00:06 - this video i'm going to give you
00:07 - a brief introduction about node.js
00:11 - so why we use node.js what is node.js
00:14 - what are
00:14 - its advantages and why node.js is so
00:18 - popular these days for building
00:20 - backend server side applications so
00:23 - let's start
00:24 - with an introduction about node.js
00:28 - so node.js is an open source
00:31 - cross-platform
00:32 - server-side javascript framework
00:35 - which you can use to develop back-end
00:38 - applications
00:39 - or command-line applications and there
00:41 - are many other
00:43 - uses of node.js so
00:46 - node.js was created by a developer
00:50 - called
00:50 - rian dell in 2009 and the development
00:54 - and maintenance of
00:55 - node.js was sponsored by
00:58 - a company called joint who was an
01:00 - employer of
01:01 - rhian dell now node.js is
01:04 - mit licensed so as i said it's a
01:07 - cross-platform
01:09 - open source application which you can
01:12 - use
01:12 - and node.js is based on google
01:16 - v8 engine this we will see in detail
01:19 - what is v8 engine and why
01:23 - v8 engine was used for
01:26 - the node.js development now nodejs is
01:29 - available on variety of
01:31 - platforms like windows linux
01:34 - and mac os and other type of operating
01:37 - systems
01:37 - so you can develop node.js application
01:40 - on any kind
01:41 - of operating system but if i talk about
01:44 - my experience
01:46 - 95 to 98 of
01:49 - node.js applications run on
01:53 - linux or linux based operating systems
01:57 - so this is the real world scenario but
02:00 - for
02:00 - learning you can use any operating
02:03 - system of your choice
02:05 - so the goal of node.js is to provide
02:08 - an easy way to build scalable
02:11 - network programs on server side
02:15 - now in its initial days node.js was
02:18 - adopted
02:19 - by some big companies like paypal
02:23 - linkedin yahoo walmart and
02:26 - uber and these companies found out that
02:30 - if they compare uh node.js with
02:34 - ruby on rails which was very popular at
02:37 - that time
02:38 - they were able to cut their servers
02:41 - from 30 to 3 and they were able to run
02:44 - their node.js applications 20x faster
02:49 - in some scenarios when we compare it to
02:51 - ruby on rails
02:53 - applications and also most of the
02:55 - front-end development was
02:57 - already done in javascript so these
02:59 - companies were able
03:01 - to combine their front-end
03:05 - and back-end team because they were able
03:07 - to create
03:08 - front-end and back-end applications
03:11 - using the same programming language and
03:14 - because of that
03:15 - full-stack development was possible
03:19 - using the same language for the
03:22 - front-end applications
03:23 - and the back-end applications similar
03:26 - advantages
03:26 - were found out when we compare node.js
03:30 - with the java applications which were
03:33 - also very popular at that time and still
03:36 - are popular
03:36 - so now we have some basic understanding
03:39 - of node.js and now let's talk a little
03:42 - bit more about
03:44 - node.js as a framework so
03:47 - node.js is an asynchronous io
03:51 - framework this also we will see in the
03:54 - latest
03:54 - slides what is synchronous versus
03:58 - asynchronous application now the core of
04:01 - node.js
04:01 - is written in c plus plus on top of the
04:04 - v8
04:05 - engine so node.js is written in c c plus
04:09 - plus
04:09 - and javascript and basically it lets you
04:12 - to run
04:13 - javascript code without a browser
04:16 - before node.js it was only possible to
04:19 - run
04:19 - javascript on the browser now you might
04:23 - ask a question
04:23 - why riandel chose javascript
04:27 - over any other language right there are
04:30 - so many languages
04:31 - but why javascript was chosen and also
04:34 - you might say that
04:35 - javascript is very well integrated with
04:39 - browsers
04:40 - so browser features like dome tree is a
04:43 - part of javascript
04:44 - language but it's not so these kind of
04:47 - browser features
04:48 - are provided by the environment they run
04:52 - on that is
04:53 - browser and these features are not
04:56 - the part of javascript so if we remove
04:58 - all the browser features from
05:00 - javascript we still have a javascript
05:03 - language in which
05:04 - functions are the first class citizens
05:07 - which means that you can pass function
05:10 - around
05:10 - like other variables right also
05:13 - javascript have
05:14 - event model which you might have seen on
05:17 - the front end so this
05:18 - event model is used for the things like
05:21 - on click
05:22 - in the browser so what we need is a tool
05:26 - on which javascript can run on
05:29 - accept for the browser on your
05:33 - native computer and that's where
05:35 - google's v8
05:36 - engine comes into picture right so
05:40 - node js uses google's v8
05:43 - javascript engine which is also
05:46 - used by google chrome so v8 basically
05:50 - transforms
05:50 - your javascript code into efficient
05:54 - machine code for your platform and this
05:57 - v8 engine on which
05:58 - your node.js program is going to run
06:02 - it's going to take care of all the
06:04 - memory
06:05 - management and garbage collection
06:08 - for your node.js application so in
06:11 - simple words
06:12 - if you take google's v8 javascript
06:15 - engine and some javascript code
06:18 - you will be able to run your
06:21 - javascript code without the browser
06:24 - so it's very important to note here is
06:27 - node.js is not a web
06:28 - only framework and also node.js is not
06:32 - a programming language node.js is just
06:36 - a javascript framework which runs on
06:39 - your v8 now if you don't know you can
06:42 - google about this
06:43 - uh what are the javascript engines
06:46 - used by famous browsers so for example
06:50 - firefox uses spider monkey safari uses
06:54 - javascript core which is also called as
06:57 - nitro microsoft edge uses chakra
07:01 - javascript engine similarly chrome uses
07:04 - v8 engine so
07:05 - every major browser has its own
07:08 - javascript engine right so
07:12 - node.js uses v8 javascript
07:15 - engine now there is a very interesting
07:17 - question which
07:19 - might arise here which is unfortunately
07:21 - we won't be able to read
07:23 - files from the system or open network
07:25 - connection
07:26 - using javascript only code right
07:30 - so basically you will have no i o or
07:32 - system calls at
07:34 - all when you just use javascript so this
07:37 - is where
07:38 - node.js comes into picture so node.js
07:41 - basically provides
07:43 - three things node.js provides the
07:45 - binding
07:46 - to the native system it runs on it
07:50 - provides the event loop
07:52 - and it provides the tread pool
07:55 - with all these three components we get a
07:57 - platform that supports
07:59 - non-blocking io through asynchronous
08:02 - programming which gives us significantly
08:04 - good performance
08:06 - over a traditional architecture so in
08:08 - this picture you can see the level of
08:10 - abstraction
08:12 - of node.js so on top comes
08:15 - the node.js standard library which is
08:18 - written
08:18 - in javascript and this node.js standard
08:22 - library
08:23 - uses node bindings which are
08:26 - written in c or c plus plus which runs
08:29 - on top
08:29 - of your v8 engine which uses tread pool
08:33 - and event loop so in case if you want to
08:36 - write your own binding for your node.js
08:41 - application
08:41 - node.js provides you this capability so
08:45 - you can directly use c
08:48 - plus to bind your javascript
08:52 - code so you can write your node bindings
08:55 - in c or c plus plus and use it with
08:58 - the node standard library so let's talk
09:00 - about
09:01 - why we use node.js so as i said node.js
09:04 - is non-blocking io so in most of the
09:08 - software systems
09:09 - when you make a system call for example
09:12 - you want to access a file
09:14 - on a disk or for example you want to
09:16 - query a database
09:18 - these calls are blocking this means
09:21 - that program execution will stop and
09:24 - wait for
09:25 - a call to finish and return the result
09:29 - now in case of node node takes a very
09:32 - different approach
09:33 - by serving all request from one single
09:37 - thread
09:38 - so the program code running on this
09:40 - thread is still
09:41 - executed synchronously but every time a
09:44 - system call takes place
09:46 - it will be delegated to the event
09:50 - loop which we talked about right so
09:53 - node.js is single threaded but it has
09:56 - a very powerful concept of event
10:00 - loop that means our main process will
10:03 - not be put to sleep and will continue
10:06 - serving other requests and as soon as
10:09 - the previous system call is complete
10:12 - the event loop will execute a callback
10:16 - function
10:16 - which was passed at the time of this
10:20 - system call so this callback is going to
10:22 - deal
10:23 - with the result returned now don't be
10:26 - intimidated about
10:27 - all these terminology i'm just talking
10:30 - about the
10:32 - architecture of node.js and if you don't
10:35 - even care about this architecture
10:37 - don't worry learning node.js is not very
10:41 - complicated
10:42 - if you do it properly now node.js
10:44 - supports
10:45 - thousands of modules so we talked about
10:49 - the node.js bindings
10:51 - so the community of node.js is very
10:54 - strong so
10:55 - the community member regularly writes
10:58 - these node.js bindings for
11:02 - your node.js standard library so
11:05 - whatever
11:05 - your use case is the possibility is
11:09 - there is a module which is already
11:11 - available
11:12 - for you to use directly and you don't
11:15 - need to write any binding
11:17 - for your standard node library
11:20 - the other advantage is you can use
11:23 - node.js
11:23 - on your windows linux or mac operating
11:26 - system
11:27 - so development becomes very easy
11:30 - and there is one language for
11:33 - your front end and the back end right so
11:36 - you don't
11:37 - have to learn any other language if you
11:39 - just want to stick with
11:41 - javascript for your front-end and the
11:43 - back-end
11:44 - you can just use node.js in the back-end
11:48 - and in the front-end you can use any
11:50 - other javascript
11:51 - framework and last but not the least
11:53 - node.js
11:54 - has a very active community so for
11:58 - example whatever use case you are
11:59 - thinking about
12:01 - the chances are there is a module
12:03 - already existing
12:04 - for that use case which is developed
12:08 - by the community now let's talk a little
12:10 - bit about
12:11 - non-blocking versus blocking code
12:15 - so as i said whenever you make a system
12:19 - call
12:19 - if you use any other language what it's
12:22 - going to do
12:23 - so here you can see the blocking code
12:26 - example so for example for a blocking
12:30 - i o and for your synchronous programming
12:33 - code
12:34 - your thread is going to wait for the
12:37 - result
12:38 - to come right so if you are reading
12:41 - the file it's going to read the file
12:45 - and then it's going to give the result
12:47 - and then it's going to continue
12:49 - uh inside the tread right but when you
12:52 - use
12:52 - a framework like node.js which is
12:55 - asynchronous
12:56 - and non-blocking i o the main thread
12:59 - don't wait
13:00 - during the i o operation i o means input
13:04 - output operation
13:05 - like reading a file or doing a query
13:08 - inside a database right it goes through
13:12 - with the execution of the code and once
13:15 - the file is read or the i o operation is
13:18 - finished there is something called a
13:21 - callback function which is called which
13:23 - is passed
13:24 - at the time of making this i o call
13:27 - and it becomes possible due to event
13:30 - loop
13:31 - which runs inside your v8 engine
13:34 - so this was an introduction about
13:37 - node.js
13:38 - now if you are a little bit intimidated
13:41 - with
13:42 - the explanation which i gave you don't
13:44 - worry
13:45 - just wait for the next coming videos
13:48 - in which i'm going to sequentially guide
13:51 - you
13:51 - step by step right from the starting
13:55 - in which we are going to see how you can
13:57 - install node.js
13:59 - and how you can write your first program
14:02 - in node.js and then how we can move
14:05 - forward
14:06 - from there so i hope you have liked this
14:08 - video and
14:09 - enjoyed the explanation i will see you
14:13 - in the next video