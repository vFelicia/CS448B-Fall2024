00:04 - so hello guys welcome to the programming
00:06 - knowledge so today we'll be learning
00:09 - about linked lists the basics of linked
00:12 - lists like what is the meaning of linked
00:14 - lists how do you apply linked lists what
00:17 - is the difference between arrays and
00:18 - linked lists and why are we using linked
00:21 - lists so before you begin learning about
00:24 - linked lists I would like to give you a
00:26 - little representation of what linked
00:29 - list looks like okay so for example as
00:34 - you an array so how do you operate an
00:38 - arrays so in array usually you have
00:42 - these type of boxes what you see in the
00:45 - diagram like all the elements are
00:48 - linearly connected to each other right
00:51 - all the elements are linearly connected
00:54 - to each other and each of these elements
00:56 - contain each of these positions contain
01:00 - elements like let's say one here one is
01:04 - here two is here food is here
01:18 - do you hear
01:22 - five
01:24 - six so this is what an array looks like
01:28 - like you first declare an area obviously
01:32 - you know how to declare an array int a r
01:34 - of n where n is the size of the array so
01:37 - what the disadvantage of array is
01:40 - basically that you already define the
01:43 - size of the array you already define the
01:46 - size of the array and then you cannot
01:48 - extend the size of the array or you
01:50 - cannot either smaller the size of array
01:54 - array remains exact of the same size so
01:57 - that is the main disadvantage of errors
02:00 - disadvantage of arrays so to encounter
02:03 - this problem what we basically do is we
02:06 - you'd linked list
02:08 - so what linked list looks like so let me
02:11 - show you an example so in linked list we
02:17 - have two fields in each of the elements
02:22 - okay this is one element right this is
02:28 - another element and let us say we have
02:32 - four now
02:32 - three elements in our linked list right
02:36 - each of the elements have two data parts
02:39 - and also you should be knowing that each
02:45 - of these elements will have an interest
02:48 - so let us say the our first element has
02:50 - an address 100 second element has an
02:53 - address 200 and third element has an
02:57 - address 300 so and now let's let's the
03:02 - first element have element has one
03:04 - second element has element two third
03:09 - element has element three and what we
03:16 - have over here is that these elements
03:19 - are connected to each other in this way
03:23 - so as you can see first element is
03:25 - connected to second elements again is
03:27 - connected to third element so now you
03:28 - would argue how are these elements
03:30 - connected so solution to this problem is
03:35 - that the second problem
03:36 - this second this second part contains
03:41 - address of the second node so in this
03:46 - case first element is pointing to the
03:48 - second element and the elders of second
03:50 - element is as you can see it's 200
03:53 - Alturas of second element is 200 so this
03:56 - 200 is being stored in the it is part of
04:00 - the first element so now let's put 200
04:03 - over here 200 and also this 300 this 200
04:11 - this second element is connected to the
04:12 - third element and this 200 is stored in
04:15 - this so now let's put 300 over here and
04:22 - looking at the third element what we
04:24 - have over here is that there is no
04:27 - element next to it we have only three
04:28 - elements so we store null in this case
04:32 - so there is so it is pointing to nowhere
04:36 - so this is the basic representation of
04:39 - linked lists and the beauty of linked
04:42 - lists is you can increase the element
04:46 - size and linked list dynamically so that
04:49 - is the main advantage of this and also
04:51 - if you look into this figure what you
04:53 - would observe that in order to access or
04:56 - traverse this array we only need address
04:59 - of the first element if we have the
05:02 - address of the first element we can
05:05 - traverse through each of the elements
05:07 - one by one right so now let's to get to
05:14 - the coding part of it and then yeah
05:17 - let's do some coding okay so here I have
05:22 - my desktop window and let me just write
05:24 - brief cold
05:46 - okay so now the main question is how are
05:53 - you going to store this element and
05:57 - address of this structure address of
05:59 - this node so the answer to this problem
06:02 - is we'll be using a structure a
06:05 - structure of structure of elements right
06:10 - a structure of so this will be this is
06:14 - an entire structure this is a second
06:17 - structure and this is our third
06:19 - structure so what we do is we define a
06:23 - structure first HTR UCT let's call it
06:27 - node and so we have defined a structure
06:33 - so this structure has two data parts two
06:37 - parts it has the first one is storing
06:39 - the data and second one is storing an
06:42 - address of an another node so how do we
06:45 - write encode is int Delta so this will
06:50 - basically store the data int data so
06:57 - this is our data right this is our data
06:59 - and now let's define and node star link
07:09 - so this is the most important step so
07:13 - this is the second part which stores the
07:16 - this link stores the address of the
07:18 - second node and that is why we use node
07:22 - star so this is node so it stores it is
07:26 - a pointer to a node to the next node so
07:30 - that is how we write it and one more
07:34 - thing I want to show to you is we need
07:41 - another element called head to traverse
07:45 - the all the elements so what we'll have
07:47 - one more node star which will look like
07:53 - this way so this will be your head this
08:00 - will be called head this what this will
08:03 - do is it will basically point to the
08:05 - first element and it will store only the
08:09 - address of the first element so let this
08:12 - store 100 so this is of type I mean
08:17 - these both have same types so this is
08:19 - only storing the entrance part of the
08:22 - first node not storing any data because
08:24 - this is our first element and this is
08:26 - how they're connected right so now let's
08:31 - define an old star the old star head so
08:37 - if you notice I have done this global
08:38 - declaration which is fine
08:40 - so this line this line node star head
08:48 - corresponds to this element right and
08:51 - initially when there are no elements in
08:53 - our list what you have is head is equal
08:58 - to null so head is pointing to nowhere
09:02 - so initially we have nothing in our head
09:07 - so this is water element will look like
09:22 - so this is our head initially and let's
09:28 - call it head
09:35 - and initially it has nothing in it it
09:39 - contains nothing null head is equal to
09:41 - null so we have defined it over here
09:43 - head is equal to null so head contains
09:46 - nothing right now now what we want to do
09:49 - is let's insert our first element insert
09:58 - our first element so how do you do that
10:00 - in order to insert an element movie
10:24 - no red tote basically has two parts okay
10:30 - so let us do it again so first part and
10:40 - the second part the first part stores
10:44 - the data so let's store some data ok
10:48 - first the first process is to just
10:50 - create a node so let's create a node so
10:53 - if you look at the left side how we
10:54 - create a node is we use this command
10:57 - called node star space and let's call it
11:01 - something like let's call it first node
11:07 - let's call it first node so node star fi
11:11 - rst node is equal to you know because
11:19 - we're creating a new node so this is the
11:21 - main command so this is important unit
11:23 - to know this command to create a new
11:25 - node and now the first thing what we do
11:28 - is you know obviously let's say we're
11:32 - inserting one so in the data part of
11:35 - this you will insert one which is this
11:42 - way this element contains one right so
11:46 - how you do this over here so you this
11:48 - uses command called f irst
11:51 - first node and then - arrow of data so
11:57 - let's put data or here da TF is equal to
12:01 - let us say it contains one so this is
12:05 - the command to initialize this right and
12:09 - also we know head is pointing to null so
12:12 - now so now that we have done this and
12:17 - since this is the last element right so
12:20 - in this case we have only one element
12:22 - and this is the last element so what we
12:25 - have to do is initialize this to null
12:30 - initialize this to null so that we know
12:34 - that there are only one element in our
12:36 - list so how do we do that in a similar
12:39 - way f irst first node of here we use
12:43 - link now first node of length is equal
12:47 - to a new LL so very simple so now we
12:52 - have done almost we have done this now
12:54 - the only part remaining is connecting
12:58 - this node to the this node let's say our
13:04 - node has an address of let's say 500
13:09 - right and now what you have to do is
13:13 - instead of this null we have to store
13:17 - 500 very simple so there will be no nail
13:22 - right now let's here it is this there is
13:27 - no null but we'll store 500 in this so
13:31 - that we are connected in this way so how
13:34 - do you do that you simply say head is
13:38 - equal to fi rst head is equal to first
13:42 - node which makes sense so head is
13:46 - pointing to the first node so head will
13:47 - contain the address of the second node
13:49 - because head is of type pointer so it is
13:54 - equal to first node and now let's print
13:57 - it which is si out
14:04 - first node is just f irst of
14:19 - first notice
14:24 - first node of data so this should print
14:29 - one so now let's try running this
14:31 - program
14:37 - okay as you can see I can see first node
14:43 - is equal to one printed on my device
14:45 - right so this is working right so this
14:50 - is fine and now what we are going to do
14:53 - is we are going to extend this list
14:59 - extend this list okay so now let's erase
15:03 - this stuff extend this left add one more
15:09 - element at the beginning or let's add
15:18 - one more element at the end of the list
15:21 - or let's add one more element to the
15:25 - beginning of the list so you have an
15:27 - understanding so in that case what is
15:31 - supposed to do is will create
15:46 - okay so we're supposed to create a one
15:50 - more node in between head and the first
15:53 - node so this will be a second node right
15:57 - and let's say this will have an address
16:01 - of like
16:12 - of let's say 1,000 so what I now need to
16:16 - do is pointer head to this variable and
16:20 - head points to this variable so that now
16:27 - this will not contain 500 anymore but
16:31 - this will head will be pointing to our
16:34 - first element which will be 1000 which
16:37 - makes sense and let's say this will
16:39 - store 2 right and now this needs to
16:45 - store 500 because this is a third
16:51 - element and this is how it will be so
16:54 - you can see head is pointing to this
16:56 - this is pointing to this so how do we do
16:58 - that it's very simple what we do is
17:02 - let's create a second node okay let's
17:06 - call this one second node for reference
17:13 - second node okay this is a second node
17:17 - so we'll just copy this line
17:26 - so as you can see I've created a second
17:28 - second node over here let's rename this
17:31 - to second node second node and also you
17:38 - know that second node of data is equal
17:45 - to obviously two you've seen it and now
17:48 - what you need to do is second nail
17:52 - second node of link is equal to head of
17:58 - link because initially head is pointing
18:01 - to this element initially we know head
18:04 - is pointing to this element head is
18:05 - pointing to the third element so head of
18:08 - Link is equal to this element so now we
18:10 - need to connect this so what we do is
18:16 - second node of link is we will do head
18:23 - of link which makes sense and so what we
18:29 - have done is we have connected this till
18:31 - now you connected this
18:38 - so when we say so when we write this
18:45 - command second node of data is equal to
18:48 - second or data is written as to second
18:51 - node of link is the second node of link
18:54 - is equal to head of link so initially we
18:56 - have this connection great head of link
18:59 - is equal to this so now we connected
19:04 - this way so second node of link is equal
19:07 - to head of link and now we need to
19:11 - connect head to the second node connect
19:16 - head to the second node how do you do
19:18 - that very simple free right head is
19:22 - equal to second order
19:32 - and just so now let's just try to print
19:40 - see out so now let us try to print both
19:46 - the elements first and second element
19:48 - how do you do that
19:49 - so for printing first element let us put
19:52 - Z out
20:13 - okay now let's print first element is
20:18 - equal to Sophia no what's first element
20:20 - first element is
20:26 - first element is our f irst first node
20:32 - of data which is fine
20:35 - and let's print similarly second node
20:47 - and let me put second over here and now
20:54 - let's run this so you can see the output
21:01 - this is our first element and this is
21:04 - the second element so our program is
21:08 - versing working so this is it for the
21:10 - this lecture and this is the basic
21:15 - understanding of how linked lists works
21:17 - and in later on and the videos will be
21:21 - seeing how to insert an element at the
21:23 - beginning of the linked list how to
21:26 - insert a tenth position of a linked list
21:29 - how to delete an element in the mingling
21:30 - list will all be see in the next
21:32 - lectures so thank you everyone for
21:34 - watching