00:01 - hey guys welcome to programming
00:03 - knowledge
00:03 - in the previous video we have seen what
00:05 - htl actually is what all it contains and
00:08 - other stuff right
00:09 - so from this video on which we are going
00:11 - to focus on implementing the contents of
00:13 - stl implementing the classes which we
00:15 - get with stl
00:16 - to increase our productivity right and
00:19 - more importantly in this video we are
00:21 - going to discuss about
00:22 - vectors to the core and the reason why i
00:25 - picked vectors is because we already
00:27 - are familiar with it and you actually
00:29 - get an idea of how vectors actually work
00:31 - to the
00:32 - core in this video because it's actually
00:34 - easier for you to catch up right
00:36 - so let's just begin with it so i'll just
00:38 - begin by including the vector class
00:40 - what's happening to my spellings vector
00:43 - right
00:44 - and i can actually create a vector class
00:46 - so vector into v
00:48 - right so this is basically a vector
00:51 - which can hold
00:52 - integer type objects now what is a
00:54 - vector vector is nothing but a
00:56 - dynamic array that's it so what is
00:59 - happening here is that
01:00 - so if you see how we deal with an array
01:02 - in c plus plus or even c
01:04 - what you do here is that you just say
01:06 - that right so int a of 10 so it's
01:08 - basically
01:09 - 10 it's basically a space which can
01:12 - contain 10
01:13 - integers which is basically 40 bytes of
01:15 - continuous memory
01:16 - that's what you're requesting to the
01:19 - computer or the operating system
01:21 - when you say this statement right
01:24 - but what a vector does is it doesn't
01:26 - know how many elements
01:27 - you need you want it to store so
01:29 - basically
01:30 - whenever it gets a new element it's
01:33 - going to create a new array for that and
01:34 - i'm going to prove
01:35 - that exact thing to you so what i'm
01:38 - going to do here is instead of in
01:40 - i'm just going to create a custom class
01:43 - let's say c
01:44 - over here right so class c
01:47 - and i'll just say public i'll just
01:50 - create a constructor which will just say
01:52 - object has been created
01:53 - so this is basically for visualization
01:55 - of how it actually works so if i just
01:57 - say object created
01:58 - right and then i just do
02:02 - destructor right i just create
02:03 - destructor
02:05 - and i just say c out object destroyed
02:11 - slashing right now i have a
02:14 - small class which is basically empty it
02:17 - doesn't do anything
02:18 - but the important point here is that it
02:21 - notifies you whenever an object has been
02:23 - created or destroyed
02:24 - so what i am going to do here is create
02:26 - four objects a b c
02:28 - and d and if i run this code uh well the
02:31 - output is not surprising you will be
02:32 - seeing that
02:33 - four objects have been created and four
02:35 - objects have been destroyed
02:36 - right so now what i'm going to do here
02:39 - is i'm going to
02:40 - make things more exciting what i'm going
02:42 - to do here is that i'm going to push
02:44 - back this element so if i just
02:45 - do v dot push back a we don't push back
02:48 - b
02:48 - right v dot pushback c
02:52 - and then v dot push back
02:56 - d i did that
02:59 - and i run the code well it's the
03:02 - previous code i need to build and run
03:03 - this
03:04 - and now you see i have four objects
03:07 - created
03:08 - but then these many objects get
03:10 - destroyed right
03:11 - why is that i did not even create the
03:13 - object but then
03:15 - vector somehow is creating new objects
03:18 - now why is that happening
03:19 - that's happening because when you start
03:21 - with vector like this
03:23 - the capacity of this vector is actually
03:26 - one it can only hold one element
03:29 - of this class c right so whatever you
03:32 - put here if you put a hint it can hold
03:34 - only one integer if you put float it can
03:36 - hold only
03:36 - one float right and the other things are
03:40 - going to
03:40 - get dynamically occupied on the heap
03:44 - now you have uh you know your memory
03:47 - gets partitioned i did not talk about
03:48 - this i know but then
03:50 - i'll just give a quick overview of that
03:52 - but what you have when you run your
03:53 - program is
03:54 - well your memory is split into different
03:56 - portions and what we
03:58 - as programmers are interested in are the
04:00 - stack and heap
04:01 - so stack is basically where all your
04:05 - variables which are part of your script
04:07 - or your part of your instructions
04:09 - because
04:09 - all these are basically instructions to
04:11 - the cpu right so if you open the
04:12 - assembly you will just find instructions
04:14 - so all the variables which are involved
04:17 - in that instructions
04:18 - are actually stored in the stack so if i
04:20 - just say vector v
04:21 - the actual position of v is in the stack
04:25 - right and then if i just say int a or
04:27 - even the c a b c
04:28 - d so these four objects are on the stack
04:31 - but then what happens inside is whenever
04:35 - the program
04:36 - needs extra memory during the runtime
04:38 - right
04:39 - because uh well i created five objects
04:41 - but maybe
04:42 - during the runtime it had to create
04:44 - another sixth object
04:45 - but then it doesn't have it it did not
04:48 - request the cpu for that much memory so
04:50 - it's going to request the cpu
04:52 - during runtime for some extra memory so
04:54 - cpu is just going to allocate some
04:56 - memory from the heap
04:58 - and it's going to store everything there
04:59 - so that is what he best and this is
05:01 - extremely slow well it's not technically
05:04 - extremely so
05:05 - it's not as low as you think but then
05:08 - compared to the stack it's really really
05:09 - slow
05:10 - so that is why whenever you code make
05:13 - sure that
05:14 - you put all your variables inside the
05:16 - stack well you try
05:17 - at least to put all your variables in
05:19 - the inside the stack
05:20 - right because stack is not really big
05:23 - but
05:23 - if if it's required they try to minimize
05:26 - the usage of heat but then
05:28 - if it's required well you can't help it
05:30 - but use the heap right
05:31 - so that's about it but why i'm talking
05:34 - about this thing over here
05:35 - is whenever i push back an extra array
05:39 - is being created on the heap and then
05:42 - all these elements are being copied
05:43 - there so i can prove that to you if i
05:45 - just
05:45 - keep a copy constructor over here so if
05:47 - i just do cons see
05:49 - other right and i can just put a
05:52 - statement over here that this has been
05:54 - copied right so object copied
05:57 - and now if i run the code well let me
06:00 - just remove this i'll just comment this
06:01 - thing out
06:02 - and run this you see
06:06 - every time four objects have been
06:08 - created that's fine and then
06:09 - a has been copied inside the position
06:12 - right a has been copied inside the
06:13 - vector
06:14 - now b has to be copied but then there is
06:17 - no space since i told you that vector
06:19 - starts out with
06:20 - one capacity so it's going to copy a
06:22 - copy b
06:23 - and then destroy the location where a
06:24 - was there and that's what is happening
06:27 - now
06:27 - so again i want to copy c i don't have
06:30 - space so i create a new space
06:32 - a b c are copied a and b are destroyed
06:35 - again i want to copy d so
06:38 - well this time only one copy has been
06:40 - done that's because
06:42 - vector doesn't actually uh you know
06:45 - it doesn't increase space one by one it
06:47 - it kind of it has an algorithm which can
06:50 - increase space depending on the size of
06:52 - the current
06:53 - vector right well that's another story
06:56 - but then
06:57 - it's not exactly one by one that's why
06:59 - you're just saying that d
07:00 - has been directly copied inside but uh
07:03 - in case there's a need then well the
07:07 - bottom line is that in case there's a
07:08 - need
07:09 - you are copying objects which is bad
07:11 - right so that's the point
07:13 - now you want to reduce this how can you
07:15 - do that well
07:17 - whenever you you're using an array you
07:20 - kind of know what the size of id is
07:23 - going to be right so
07:24 - you can at least estimate the size of
07:26 - the array right size of array or vector
07:28 - whatever it is so
07:30 - what you can do is reserve that much
07:32 - space right so if i if i just
07:34 - say reserve so what this is going to do
07:37 - here is
07:38 - if i pass in some number say n which is
07:40 - this thing size type n
07:42 - it's going to reserve that much space
07:44 - inside the memory so this copying is
07:46 - reduced so now if i just do
07:48 - let's say 10 uh let's say i expect 10
07:51 - elements
07:51 - but then i just store four it's okay
07:53 - right but then if i
07:55 - expect 10 and i store 20 then
07:59 - only 10 elements are getting copied but
08:01 - effectively right
08:02 - so that's a kind of uh well underlying
08:05 - assumptions you need to make while using
08:07 - vectors because they are storing objects
08:10 - and copying objects is really bad
08:12 - because here well
08:13 - this class doesn't have anything it's
08:15 - literally the size of this
08:17 - class is one byte right and that's also
08:19 - not required because
08:20 - that one byte is used just because i'm
08:23 - defining this class right so there's no
08:25 - a variable inside this it doesn't hold
08:27 - anything
08:28 - it's just a class it's just it's just
08:31 - some template which doesn't do anything
08:33 - that's why it's just one byte but then
08:35 - if you have a class which
08:37 - does something and then it has some
08:39 - heavy parameters
08:40 - then it's really bad when you're copying
08:42 - objects like this every single time
08:44 - right so it's going to be a serious
08:46 - performance hit on your
08:47 - program and you want to reduce that and
08:50 - that's why you reserve
08:51 - some space so that that copying is
08:54 - actually reduced now if i run this
08:56 - i'll be getting only four copies right
08:57 - so four items created four items copied
09:00 - eight times destroyed
09:01 - right and technically you cannot pass
09:04 - references well you think that the
09:06 - copying can be stopped by passing
09:08 - references but you cannot pass
09:09 - references because
09:10 - references exist only for existing
09:13 - variables
09:14 - right so you need to create extra
09:16 - variables then
09:17 - but that's useless right so it's it's as
09:19 - good as copying
09:20 - right so it's not really good it's not
09:23 - really predictive
09:25 - but then what you can do is what some
09:27 - people do
09:28 - do this right what they do here is that
09:31 - they store
09:31 - pointers now why pointers because
09:34 - a pointer is just an address it's just a
09:38 - number right
09:39 - so copying a number it's not at all cost
09:42 - effective it's just you know
09:43 - flipping the bits right so copying a
09:45 - number is that simple
09:47 - so what happens here is that people just
09:50 - store the pointers inside the vector
09:52 - and then store the actual object
09:54 - somewhere else so maybe in a linked list
09:56 - or some
09:57 - something like that right and then they
09:59 - access the pointer
10:00 - and then point to the location where the
10:03 - object actually
10:04 - is so that's also actually a good
10:06 - practice
10:07 - i should say but that's highly debatable
10:10 - people say that
10:10 - i should keep items the objects
10:14 - inside the vector but then some people
10:16 - argue that keeping pointers is more
10:18 - effective
10:19 - but then it's up to you you can use it
10:20 - however you want but if you are going to
10:23 - use
10:23 - directly uh the objects inside the
10:26 - vector then do reserve the space because
10:28 - if you are not going to reserve the
10:29 - space
10:30 - it's going to be a huge performance
10:31 - impact on your program
10:33 - so that's about using vectors as a
10:34 - storage container i think i
10:36 - spoke a bit long about this thing but
10:39 - then it has to be addressed
10:41 - and if you're learning c plus plus it
10:42 - means that you want the performance
10:44 - right
10:44 - so it's really important that you know
10:47 - about this uh what pushback does
10:49 - but then there are other functions too
10:51 - but i'm not sure how they
10:53 - actually work in other compilers because
10:55 - i'm not really used to this mingw
10:57 - compiler right
10:58 - i use msbc the microsoft visual studio
11:01 - compiler
11:02 - and then in from c plus plus 11
11:05 - they have a function called m placeback
11:06 - instead of pushback so
11:08 - when you push back you actually create
11:10 - another object and then push it back so
11:12 - it's basically you're creating a new
11:14 - object
11:14 - but then when you emplace back what you
11:17 - do here is that
11:18 - you actually take the existing object
11:21 - and then push it inside the vector so
11:23 - that's actually happening
11:24 - but then i don't know but in
11:28 - this particular compiler with just a min
11:30 - gw
11:31 - right it doesn't implace back correctly
11:34 - well as
11:35 - as much as i know it doesn't replace
11:36 - that correctly right it's just working
11:39 - just like push back i tried it before so
11:41 - if you want to try it it's just
11:42 - available after c plus plus 11. so
11:44 - you need to go to your compiler and then
11:46 - check one of the flags so c
11:47 - plus plus 11 or 14 right you need to
11:50 - check one of them
11:51 - but but then in msvc it works as
11:54 - expected so when you x
11:56 - in place back it doesn't create a new
11:58 - object but then it
11:59 - implies it it puts the original objects
12:02 - inside the vector
12:03 - right so that's about m plus back you
12:06 - could try it out but maybe i'm wrong
12:08 - right so if you know that correct me but
12:11 - then
12:11 - that's about pushing back and then
12:13 - storing items inside the vector
12:15 - and other things are kind of simpler so
12:17 - now let's
12:18 - just go and talk about the constructor
12:20 - of vector so if i
12:21 - just do vector v i have a constructor so
12:24 - i can just
12:25 - create existing object i can start the
12:27 - vector with some objects so let's say i
12:29 - want to start with
12:30 - three integers i can just do that and
12:32 - the default is zero
12:34 - if you want some other integer you can
12:35 - just do that so if i just
12:37 - put comma minus 1 it means that uh
12:40 - i'm starting with three elements with -1
12:43 - the difference between reserve and this
12:45 - thing is that
12:46 - it starts out with that much well
12:49 - it already has three elements but then
12:51 - when i reserve space
12:53 - it doesn't have any element but it has
12:55 - the capacity to store those many
12:56 - elements
12:57 - so that's the difference right so that's
12:59 - about
13:00 - the constructor if you do that what
13:02 - you're basically saying is that i want
13:04 - three elements
13:05 - each of them are minus one right and you
13:08 - can also directly assign it so
13:10 - you are implicitly converting it to a
13:12 - vector that's also possible i could just
13:14 - do one two three
13:15 - uh well let me just do something like
13:17 - minus one five four
13:19 - zero and nine right so you understand
13:21 - why i'm doing this in a second
13:24 - so i can just do that that's also
13:25 - possible and now
13:27 - coming to iterators now i just completed
13:30 - containers well let's go in order so
13:32 - what what it did
13:33 - what they just completed is the
13:34 - container part of vector
13:36 - now coming to the algorithmic part right
13:40 - i'll just include an algorithm header
13:42 - file so i'll just say hash include
13:45 - algorithm right and what i can do
13:48 - with algorithm is that i can search find
13:51 - sort and all these things so i'll just
13:52 - say
13:52 - i'll just show you sort and then uh
13:56 - find right but then you can do lots of
13:59 - things with
14:00 - the algorithm header file right there
14:02 - literally function for
14:03 - almost all the algorithm uh things you
14:05 - algorithmic things you need
14:07 - for you know dealing with the data right
14:10 - so for sorting it's really simple i just
14:12 - need to sort
14:14 - from where i need to start from the
14:15 - beginning now this begin
14:17 - and end are actually iterators and we'll
14:20 - talk about what iterators are
14:21 - but i already told you in the previous
14:23 - video that you can think of iterators as
14:25 - pointers
14:26 - so it's more or less the same so you can
14:29 - just say that it's the pointer to the
14:30 - beginning of the vector
14:32 - and if i do v dot end it's basically
14:34 - pointed to the
14:35 - end of the vector it's not the last
14:37 - element it is the end
14:39 - so it's basically one after the last
14:40 - element and then i want to sort all
14:43 - these things in the ascending order so
14:44 - default is ascending
14:46 - right and i can just show the elements
14:48 - of this vector
14:49 - so please excuse me for now i'm just
14:51 - going to use the for each loop
14:53 - i'll explain what it does in another
14:55 - video but then
14:57 - you can just write down your normal for
14:59 - loop
15:00 - if you want to if you don't understand
15:01 - what this is but uh it's fine
15:03 - right it's just going to print out the
15:05 - elements so
15:07 - yeah i'll just say c out i and then put
15:09 - a
15:10 - space and then put a new line over there
15:13 - and now if i run this
15:17 - i'll be getting minus 1 uh 0 4 5 n which
15:20 - is basically sorted order
15:22 - of this vector right and now if i want
15:24 - to sort it in
15:26 - descending order i have few options what
15:28 - i can do here is i can just say greater
15:32 - int right and then this now what it's
15:36 - going to do here is that
15:37 - it's just going to uh send the greater
15:40 - elements to the first it's basically
15:42 - going to save which one of them is
15:43 - greater
15:44 - and then it's going to sort it
15:46 - accordingly so now if i run this
15:48 - i'll be getting the list sorted in well
15:51 - vector sorted in the descending order
15:54 - now
15:55 - if this is confusing what you can do
15:58 - here is that you can define your own
15:59 - function it doesn't really matter and
16:01 - that's what you're going to do
16:02 - if you're going to sort you know vectors
16:04 - of classes
16:06 - or you know vectors of structure
16:08 - something like that well
16:09 - vectors of structures you cannot sort
16:11 - them in ascending or descending order
16:13 - unless you say how to sort them right
16:15 - so the how is what this parameter is
16:18 - and i can create a function to do that
16:20 - so if i i can
16:21 - just create a boolean let's say larger
16:25 - right so which one is larger i'll just
16:27 - take two integers into a and b
16:29 - because that's what my type of object is
16:33 - so
16:33 - it's an integer and what i'm going to do
16:36 - here is i'm just going to return
16:38 - if a is greater than b or not if it is
16:40 - if
16:41 - it is right if a is greater than b it's
16:43 - going to
16:44 - be in the beginning of the list if it's
16:46 - not it's going to be at the end of the
16:48 - list
16:48 - and then it uses some algorithm right so
16:51 - you have searching algorithms
16:53 - but then it's uh going to use a very
16:55 - specific algorithm for sorting and you
16:57 - don't have to worry about that unless
16:58 - you're a beginner
16:59 - it's highly optimized and it's going to
17:02 - sort your list in no time so
17:04 - it's i think it's n log n time right so
17:06 - if you know the
17:07 - complexity so that's the time complexity
17:10 - of this algorithm
17:11 - and space is i think one right so i'm
17:14 - not really sure about that
17:15 - so what you need to do here is that you
17:17 - need to send in this
17:19 - particular function as as a function
17:22 - pointed now i
17:23 - i know i haven't spoken about function
17:25 - pointers yet but then
17:27 - you can think of function pointers are
17:28 - just the name of the function that's it
17:30 - right
17:30 - don't call the function you don't do
17:32 - that
17:33 - this this is basically calling the
17:36 - function but you're just
17:37 - passing which function to call so i'm
17:39 - just saying that call this larger
17:41 - function every time
17:42 - so i do that run this code i'll be
17:44 - getting the sorted array over here
17:47 - and now if i want to sort it in no
17:49 - ascending order i will just reverse the
17:51 - sign so if a is less than b it's going
17:52 - to be at the beginning or else it's
17:54 - going to be at the end
17:55 - if i just run this i'll be getting it in
17:58 - the ascending order
17:59 - right so that's how you sort vectors and
18:02 - then you can find vectors
18:04 - well i mean find items inside the vector
18:06 - so what i'm going to do here is i'm just
18:08 - going to say
18:09 - find and then from the beginning
18:12 - till where do i want to find i want to
18:14 - find till the end
18:15 - and what do i want to find i want to
18:17 - find whether this is 0 or not so
18:20 - if i do that and this is going to return
18:22 - me an iterator it's going to return me
18:24 - the position
18:24 - right so it's going to written me you
18:26 - can think of it as a vector
18:28 - pointer right it's going to return me
18:30 - that so it's basically this thing
18:32 - vector and iterator and let's say i t
18:35 - right so if you don't want to write this
18:37 - whole name you could just replace it
18:38 - with this thing or two
18:39 - that's what it does auto it basically uh
18:42 - what it does is it
18:43 - guesses the type for you it types the
18:45 - type for you right
18:46 - so don't just plug in auto everywhere i
18:49 - shouldn't be using this this is actually
18:51 - a bad practice
18:52 - if you write bigger code you'll find it
18:54 - harder to debug
18:56 - but then it's fine because it's just one
18:58 - single page of code right so it's fine
19:00 - if i just do that and now what i can do
19:03 - here is i can just compare it so if
19:06 - i t is not equal to v dot n because if i
19:08 - don't
19:09 - find the item i'm going to
19:13 - be at the end right if i'm not at the
19:15 - end it means i have found the item
19:17 - so i can just say that she out item
19:20 - found
19:21 - and you already have the iterator to
19:23 - that point so it's fine
19:25 - or else what you can do here is that um
19:28 - you know
19:28 - say that item has not been formed so see
19:31 - our
19:32 - item not found right
19:35 - and then i'll just put this
19:39 - new line over here right and if i run
19:42 - this
19:43 - you'll be seeing that i have found the
19:45 - item because 0 exists so if i just do
19:47 - something like 100
19:48 - which doesn't exist and then run the
19:50 - code again
19:53 - um yeah run the code again you see that
19:56 - item has not been found because the
19:58 - iterator has moved to the end of the
20:00 - position
20:01 - end of the vector i should say right so
20:03 - that's about finding
20:04 - and you have lots of other things you
20:06 - have find there find if not and all
20:08 - those things i'll leave it to you to
20:09 - explore
20:10 - std algorithm is really really useful
20:14 - and searching sorting and all these
20:16 - things are actually
20:17 - very very common tasks you will be doing
20:19 - when you are actually programming a
20:20 - solution
20:21 - right so that's about algorithm and then
20:24 - i
20:24 - traders i actually talked about
20:26 - iterators over here so this is
20:28 - what iterators are but then you can also
20:31 - use it
20:32 - as a as a way to
20:35 - actually look through the vector so
20:37 - that's what they are true as i told you
20:39 - eye tracers
20:40 - are nothing but you can just think of
20:41 - them as pointers they are nothing but
20:43 - pointers i should say right so what you
20:45 - can do here is that you can just do
20:47 - something like
20:49 - vector in iterator and then again if you
20:52 - don't want to type this whole thing just
20:54 - put
20:54 - auto vector iterator i t
20:57 - equal to i'm just going to start from
20:59 - the beginning
21:00 - and v dot begin with and all these are
21:03 - going to return iterators they are going
21:04 - to return pointers
21:06 - okay so v dot begin and then
21:09 - i t is not equal to v written so till i
21:11 - don't reach the end
21:13 - and then i can just increment this
21:16 - iterator
21:16 - and i can just use it just like a
21:19 - pointer so i i could just do star i t
21:21 - to get the value at that particular
21:23 - location so
21:24 - i'm sure you're familiar with pointers
21:26 - so that's how you can do it
21:28 - right and here i could just put a new
21:30 - line to
21:31 - separate the debug output which code
21:33 - blocks generate
21:36 - and if i do that i can see my vector so
21:38 - minus one five four zero nine so it's
21:40 - just like a pointer right
21:42 - and pointers are really useful iterators
21:44 - are really useful
21:45 - and it's it's out of practice that you
21:48 - understand
21:49 - how to work with pointers but because in
21:51 - the beginning
21:52 - it just seemed useless right even i felt
21:55 - pointers are really useless
21:56 - but then over time they do make a lot of
21:59 - sense so pointers are really helpful
22:01 - so that's about everything vectors can
22:05 - do and then
22:06 - well i only talked about in session well
22:08 - there's a deletion
22:09 - thing as well what you can do is v dot
22:12 - pop back
22:12 - it's going to remove the last element
22:15 - and now if i just show you that
22:17 - right so auto i and v i can just print
22:21 - out i
22:23 - right and then just run this code
22:28 - i'll be getting minus one five four zero
22:30 - the nine has been removed
22:32 - right and then if you want to erase
22:34 - something
22:35 - you can erase it with your iterator
22:37 - right it again it's a pointer to the
22:39 - location where you want to erase so
22:41 - let's say i want to erase 4
22:43 - so how i can do that is i can just say v
22:45 - dot begin
22:47 - plus the index so index of 4 is
22:49 - basically
22:50 - it's 0 1 2 right so i can just say plus
22:53 - two
22:53 - right so zero if i just
22:57 - v dot begin it's basically this thing
22:58 - plus one is this plus two is this so i
23:00 - can just do that
23:02 - and now if i just run this you won't be
23:04 - seeing four there right
23:05 - so minus one five 0 and 9 4 has been
23:09 - deleted and then if i want to delete a
23:11 - range of elements that's also possible
23:13 - so let's say i want to
23:14 - delete from 5 to 0 so i can just say v
23:17 - dot begin plus 1
23:19 - and then for 0 what i can do here is i
23:22 - could just say v dot begin
23:24 - plus what is that zero one two three
23:27 - right i could do v dot begin plus three
23:29 - or i could
23:30 - do this minus one so v dot n minus one
23:34 - is also zero so i could do
23:36 - that and either way if i just run this i
23:38 - will be getting the same output which is
23:40 - minus one and nine
23:41 - all these things have been erased so
23:43 - that's about arrays
23:44 - and then if you want to clear the entire
23:46 - vector what you can do here is just say
23:49 - clear right what it does is it
23:51 - completely removes every single
23:53 - item inside your vector and then if i
23:56 - just run this
23:57 - you will be seeing that nothing exists
23:59 - inside the vector
24:00 - so that's all about vectors and now
24:03 - coming to the point of
24:04 - when to use it and when not to use it
24:07 - whenever
24:08 - you want to access elements in random
24:11 - right so let me just put it in bold
24:15 - no use vectors
24:18 - whenever you want to access
24:22 - elements frequently
24:26 - this is really really important if you
24:29 - are not
24:29 - going to access elements frequently
24:32 - don't
24:33 - use a vector right let me just stress on
24:36 - this point
24:37 - uh why am i telling you this the reason
24:40 - is because
24:41 - vectors act like arrays right so
24:44 - vectors are more or less like arrays
24:46 - they are continuous blocks of memory
24:48 - but then every single time you are
24:49 - adding an element you are
24:51 - effectively creating a new memory
24:53 - location right and then you are copying
24:55 - stuff and then deleting stuff that's
24:57 - really bad
24:58 - you shouldn't be doing that you should
24:59 - be avoiding doing that
25:02 - right so what
25:05 - we need to do here is whenever we we
25:08 - need
25:09 - a any like structure when do we need a
25:12 - relaxed structure when we want to
25:14 - actually access random elements if i
25:16 - want to just access the fifth element or
25:18 - the fourth element or
25:19 - randomly access the second element when
25:22 - when i'm doing such things
25:23 - i do need a array right i cannot use
25:26 - something like a list because as i told
25:28 - you
25:28 - in one of the previous videos list if
25:31 - you want to access
25:32 - nth element of a list you need to travel
25:35 - from the beginning to the nth element
25:37 - right but in case of an array you
25:38 - already know the starting position you
25:40 - know the size
25:41 - you add the size to the starting
25:42 - position you get to the point where you
25:44 - need it
25:44 - right so it's just like that so if i
25:46 - want to get to zero what i can do here
25:49 - is just say v dot begin
25:51 - uh this is the starting position plus
25:53 - three right
25:54 - that's that's zero for me right so it's
25:57 - just simple as that
25:59 - that is why you generally tend to use
26:02 - vectors or
26:02 - arrays or whatever whenever you want to
26:06 - access elements more frequently if you
26:08 - want to store elements more frequently
26:10 - if you if you think that you will be
26:12 - adding and deleting elements very
26:14 - frequently
26:15 - then you should use list not vectors and
26:18 - list is going to be a topic for the next
26:20 - video
26:21 - so be sure to check it out but then
26:24 - the bottom line is that use vectors
26:26 - whenever you want to access elements
26:28 - frequently
26:29 - and how you can reduce the performance
26:32 - hit is by using reserve
26:34 - or you know tricks like that so that's
26:37 - about vectors there's actually a lot
26:39 - more things to vectors which you can
26:41 - actually browse and find out but these
26:43 - are the things which are really
26:44 - important for you to know
26:46 - and in the next video we are going to
26:48 - explore less so till then happy coding