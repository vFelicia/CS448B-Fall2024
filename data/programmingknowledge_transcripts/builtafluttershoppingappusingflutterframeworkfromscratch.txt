00:01 - welcome to programming knowledge
00:03 - so this is the first video in the series
00:05 - wherein we together will make an
00:07 - e-commerce application from scratch
00:09 - and by starting from scratch i mean that
00:13 - we will first design the application and
00:15 - then build it means we will start from
00:17 - an empty screen and build our way up to
00:20 - a complete application
00:22 - so for designing we are going to use
00:24 - figma and for the front end part as it
00:26 - is an application we will use flutter
00:28 - because by that will we can use a single
00:32 - code base for android apps as well as
00:34 - ios
00:35 - and since we have already used firebase
00:38 - as a backend once when we were making
00:40 - the instagram clone
00:42 - okay so this time the back end stack
00:44 - will be php and mysql now another very
00:49 - popular back-end stack is node.js and
00:52 - mongodb and we shall be keeping that for
00:54 - our next series
00:56 - okay so let's set everything up now
01:00 - firstly you need to know flutter if you
01:02 - don't know flutter you can refer to my
01:04 - videos on
01:06 - flutter for beginner the link will be in
01:08 - the description a suggestion would be to
01:11 - update the flutter as there was a major
01:13 - release flutter 2.0 is out there is
01:16 - almost no change in the coding
01:18 - techniques it ha but it has a support
01:20 - for flutter web and flutter desktop
01:24 - well it is has the stable release of
01:26 - flutter web flutter web was already
01:28 - available in beta version earlier
01:30 - okay so that is regarding flutter now
01:33 - for
01:34 - the back end part that is in php and
01:36 - mysql uh i will be using plain php to
01:40 - make the api so i'll be not using any
01:42 - framework that is larval or lumen
01:45 - because that will be extra work
01:47 - now to code in php you need you can
01:51 - install xampp
01:52 - okay so it is a very excellent software
01:55 - it has
01:56 - it is the most popular php development
01:59 - environment as you can see in this only
02:01 - you will get the php environment as well
02:03 - as mysql
02:04 - and since
02:06 - i am in a mac os big sur there was some
02:10 - difficulties with sam so i have changed
02:13 - to mam so you can also use this as an
02:15 - alternative for xampp
02:17 - okay it also has
02:19 - the complete development setup for php
02:22 - that is you will get php in here and
02:25 - mysql in here okay and then for
02:28 - designing you need to have figma so for
02:31 - figma you don't need to download it but
02:34 - i suggest you download it and you need
02:36 - to create an account and after that you
02:38 - can start designing
02:41 - now uh those who don't want to do the
02:44 - php part means the backend part can skip
02:47 - it as i will be hosting the apis that i
02:50 - make
02:51 - online and which will be available for
02:53 - anyone to use for some time okay but i
02:55 - will suggest that you
02:57 - do the back end part as well because i
02:59 - will be explaining all the things i'll
03:01 - do and by this you by by the end of this
03:04 - series you will be able to learn a new
03:06 - programming language or maybe a tech
03:08 - stack so i just suggest you should
03:11 - follow entirely do not skip any part
03:15 - okay so now that you know about
03:18 - everything
03:19 - let's see how the
03:20 - map server looks so the xampp server
03:23 - will also be same instead there will be
03:25 - four sections
03:27 - where you can
03:29 - go and you can start and in mamp you
03:32 - just you can start the map server just
03:34 - from here
03:35 - so it will take a while
03:39 - now once it is done you can start coding
03:42 - in php you need to make a you will you
03:44 - need to have the php files in a specific
03:48 - folder
03:49 - in xampp as well you need to have your
03:52 - files in a specific folder okay and that
03:55 - is in
03:56 - the applications
03:58 - section you will see there is a folder
04:00 - called mamp okay
04:02 - and in the case of xampp there will be a
04:04 - folder called xampp so
04:08 - yes so there is the folder called mamp
04:10 - and then either you are on mamp or on
04:13 - xampp you will have a folder called
04:15 - htdocs okay so this is a very important
04:17 - folder over here only we will code in
04:20 - we will make our apis okay and store it
04:23 - over here
04:25 - okay you will get a hang of it once we
04:27 - start coding the
04:29 - back end thing okay and for the
04:33 - database you already have it since our
04:36 - server is running we can simply
04:38 - go to localhost
04:41 - colon eight eight eight eight if you are
04:44 - on mam if you are on zamp uh that is
04:46 - then you will be probably on local host
04:49 - eight zero eight zero or three three six
04:51 - and then you give a dash and then write
04:53 - php my admin
04:56 - and
04:57 - then you have your entire php setup over
05:00 - here so phpmyadmin is uh is like sql
05:04 - workbench we use it to view our database
05:07 - okay so over here we will create our
05:08 - database and store stuff
05:11 - okay so
05:13 - i hope you understood what is map
05:15 - if you have some if you have some
05:17 - difficulty understanding there is no
05:19 - issue when we start actually coding you
05:22 - will see how everything works in sync
05:25 - okay so in the next video we shall start
05:27 - with the designing
05:29 - thank you
05:31 - so in this video we are going to start
05:33 - designing our application okay so for
05:36 - that i'll open figma i have already
05:37 - installed the desktop version
05:40 - okay and then you can go over here and
05:42 - create a new project i have already
05:45 - created one and over here i have
05:47 - selected a palette of colors which i
05:50 - will be using throughout my application
05:52 - okay and now i'll
05:55 - i am planning to call the project better
05:57 - buys
05:58 - so the figma project will be of the same
06:01 - name the database will be of the same
06:03 - name and the application will also be of
06:05 - the
06:06 - same name
06:07 - okay so let's create a add a screen over
06:10 - here so for that we need to go in the
06:12 - frames section
06:14 - then click on frames and then over here
06:18 - we can use iphone 11 pro
06:21 - or
06:23 - iphone 10 screen okay so using figma is
06:26 - very easy you just need to follow along
06:29 - this video and you will also get a hang
06:31 - of it
06:33 - okay so this is a screen now if you want
06:36 - to see how it will look on big screen
06:37 - you just need to click over here which
06:39 - is this is
06:40 - for prototyping and now you can
06:43 - see the screen over here just give it a
06:45 - moment until it is loading
06:48 - okay and for now it will be a
06:51 - big white screen okay so we will not be
06:53 - able to see anything because since our
06:55 - project is only a wide screen till now
07:00 - so let's start first and i'll add our
07:03 - text over here
07:05 - okay so for that i need to click on this
07:08 - and then i'll write
07:12 - better buys
07:14 - okay now i want this to be somewhere
07:18 - over here
07:20 - now i'll be
07:21 - adding the grid okay so that i it is
07:23 - easier for me to design okay so i'll add
07:26 - a grid now you can see the grid comes
07:28 - over here now instead of this i'll use
07:30 - another method that is
07:32 - columns okay so now i want to have 12
07:35 - columns having 12 columns is the best
07:38 - because you can divide it by two you can
07:40 - divide it by four you can divide it by
07:42 - three you can divide it by 6
07:44 - so it will help in
07:46 - maintaining uniformity
07:48 - okay this is the most standard practice
07:51 - now i wanted to have a margin from both
07:53 - sides 50
07:55 - okay so 50 seems way too much i'll make
07:58 - it 40
08:00 - okay and the gutter can be of 10
08:02 - okay gutter means the distance between
08:05 - these two
08:07 - okay maybe i'll make it 30
08:11 - yes so this seems fine
08:13 - now with this we will align everything
08:16 - on this margin okay so i'll
08:19 - put it over here
08:22 - now let's increase the size
08:25 - over here in the text section you can
08:27 - increase the size
08:28 - by
08:29 - going over here or you can simply select
08:32 - it and click on the upward arrow button
08:34 - it will
08:35 - automatically increase so i will call it
08:38 - better wise the font i think
08:43 - will be better if it is
08:45 - poppins
08:48 - let's see i don't know which one is
08:50 - better okay so this seems
08:52 - decent let it be like this for now i'll
08:54 - change its color
09:00 - so uh the better bias is over here maybe
09:03 - i'll make it little bit more bigger so
09:07 - 21 or 22 23 okay
09:11 - cool
09:13 - now after that i'll add a circle
09:16 - means as in for profile so
09:19 - to add a circle or any object you can
09:22 - simply click then it will create another
09:25 - option is you drag
09:27 - okay another option is you
09:29 - drag and make a circle of your choice
09:32 - okay and now while doing this if you it
09:35 - is actually an ellipse means it can have
09:38 - a different minor arc and major arc but
09:42 - if you want to be an exact circle you
09:44 - just need to click shift and it will
09:46 - automatically force it to be a
09:48 - proper circle with equal major arc and
09:51 - minor minor arc
09:53 - okay so now that we have a circle
09:59 - i am planning on aligning it with this
10:01 - so to align both things horizontally
10:04 - i'll use the horizontal align section
10:07 - okay so it has aligned everything
10:09 - horizontally if it was one hour below
10:12 - another then i would have used this so
10:14 - these signs make it very clear if i
10:17 - click on this then they all will be
10:19 - aligned
10:20 - with the top as
10:23 - uniform if i click on this then they
10:25 - will be in
10:27 - aligned as bottom uniform and if i do
10:30 - this then center as uniform
10:33 - okay so now since that is done i'll
10:37 - move it
10:38 - i'll move the circle to the right so for
10:40 - that you just need to select it and
10:42 - click on the right button and if you
10:43 - want to take a bigger lip leaps you
10:45 - click on
10:46 - shift and right button so i hope i am
10:48 - making sense
10:50 - in starting you will have a little bit
10:52 - difficulty but
10:55 - by doing you can
10:58 - get used to it
10:59 - okay so uh
11:01 - knowing figma is a very
11:04 - you can use it to your advantage because
11:06 - figma is very powerful and most of the
11:09 - designers are now getting inclined
11:11 - towards figma then rather than adobe xd
11:14 - or sketch
11:16 - okay so now what will be the use of this
11:18 - circle is we will show the user's
11:20 - profile over here if it if he is logged
11:22 - in then we will show his image over here
11:25 - and if not then we will for now just
11:29 - so option to login means a common
11:31 - person's photo
11:34 - okay means the
11:36 - icon that we have in android to depict
11:38 - that it is a person okay so we shall
11:41 - show that over here for now
11:43 - okay so
11:45 - i think i'll push it little bit
11:48 - up
11:49 - because it was having a lot of white
11:52 - space above
11:53 - now i again need to align it
11:58 - okay cool so now after this
12:01 - i'll create categories
12:04 - so for categories i think i'll again use
12:07 - a circle
12:08 - okay
12:11 - so
12:12 - let's create categories like this
12:18 - now i want four is enough i guess
12:22 - so if you want to expand it you select
12:26 - all and then you pull it from the side
12:28 - so
12:30 - now you can see the width is also
12:32 - changing
12:33 - and so we don't want this
12:36 - i'll push it manually
12:38 - [Music]
12:41 - somewhere over here
12:44 - then
12:53 - so it will automatically tell you
12:55 - if the distance is equal or not okay so
12:58 - now we have four sections over here
13:01 - and i want one more
13:03 - but that needs to be half
13:06 - gone inside so
13:08 - by this user will know that there is
13:11 - another category for me to go and check
13:13 - out
13:15 - okay i hope you understand what i'm
13:17 - trying to do over here
13:19 - now i want this
13:20 - little bit bigger so i'll make it 53 450
13:24 - or maybe a 60
13:27 - i'm sorry for that so maybe 60 sounds
13:30 - better
13:32 - want the height to be 60
13:36 - cool
13:41 - 9 2.
13:45 - [Music]
14:00 - uh
14:01 - [Music]
14:09 - [Music]
14:15 - okay so this looks decent enough this
14:18 - will be our category
14:26 - okay so let us add some colors to it and
14:29 - before that
14:31 - i'll
14:32 - make sure that it is
14:33 - separated evenly over here i can go and
14:36 - click on tidy up so now the difference
14:39 - between them is
14:40 - equal i want it to be a little bit lower
14:44 - so that we have enough space between
14:46 - these two
14:47 - okay
14:50 - okay this looks fine
14:53 - maybe i'll reduce its size a little bit
15:01 - i think 45 works
15:05 - 45 works
15:07 - i'll push it little bit below and to the
15:10 - side
15:17 - okay so while designing you need to
15:19 - experiment so that you get the best fit
15:22 - okay now let's add some colors to it so
15:25 - that it looks better
15:28 - i'll add a color oh so this is a dropper
15:31 - icon by this if you now point the cursor
15:34 - or anything it will pick up its color
15:36 - you can see in this
15:38 - circle over here so if i click go to
15:40 - this color palette it picks its color
15:42 - but i'll go to this palette i'll select
15:45 - this color and that color is
15:47 - automatically applied over here
15:50 - now
15:51 - instead of solid i'll make it linear
15:55 - okay
15:56 - and
15:57 - then i'll means linear means i want to
16:01 - apply a gradient
16:02 - okay and i want to apply it like this
16:05 - that the maximum color is over here and
16:08 - on this side there is
16:09 - almost no color
16:12 - okay means it is it gives us a fading
16:14 - effect okay this seems nice
16:19 - similarly over here i'll add another
16:21 - color
16:23 - the color is gonna be this color and
16:25 - instead of solid it is gonna be linear
16:28 - now similar to linear we also have
16:30 - radial angular diamond so you understand
16:33 - what it means radial means it will be
16:35 - circular
16:36 - fading angular means you can fade it at
16:39 - a certain angle and diamond means it
16:42 - will be faded from the four corners
16:44 - okay so now let's
16:46 - change the direction means i don't want
16:49 - it to be vertical i want it to be fading
16:52 - horizontally
16:54 - so i did that
16:56 - now save it now for the next one i'll
16:58 - apply the next color
17:01 - okay
17:02 - and then again from solid to linear
17:07 - now linearly i have
17:10 - done this one as well
17:14 - now for the fourth one
17:17 - this is the color again i'll change it
17:20 - from solid to linear
17:22 - you understand the drill
17:24 - i think by now
17:28 - no this is not straight so it won't look
17:30 - good now you can see if i drag it
17:34 - to
17:35 - drag it far away the shade also starts
17:38 - decreasing
17:39 - okay so if it depends on how close you
17:41 - keep it so as to get the desired effect
17:45 - okay so this is also done now in the
17:47 - last one i again
17:50 - start with the first one
17:52 - solid will change to linear
17:55 - okay
17:56 - i'm sorry
17:57 - what happened yes
17:59 - so the solid will change to linear the
18:02 - linear will
18:04 - change from
18:05 - vertical to horizontal yes now it is
18:09 - done
18:11 - [Music]
18:12 - so now if you look at this it looks
18:14 - better now if we add some images over
18:17 - here then it will
18:19 - be more appealing okay so for that i'll
18:22 - need some time to decide on the content
18:25 - uh anyways i wanted to let you know that
18:27 - in better buys we will only be selling
18:28 - green vegetables okay so so it will look
18:32 - better now this will be the categories i
18:36 - will be adding the images and the
18:38 - content over here in the next video and
18:40 - then we will continue with the design
18:42 - and once we are
18:44 - have made a significant progress in the
18:46 - design we shall
18:47 - start coding it
18:49 - okay i hope
18:51 - you understand
18:53 - thank you this will be for the video
18:54 - thank you so in this video we are going
18:57 - to continue designing our application
19:00 - so i'll open up sigma
19:03 - now in the previous video we have
19:05 - designed till here over here we were
19:07 - planning to show the items and over here
19:09 - will be the user's
19:11 - image
19:12 - okay so now let's so now over here you
19:15 - can see the
19:17 - colors are not that significant okay so
19:20 - to make it little bit more attractive
19:23 - what i'm gonna do is i'm gonna cover it
19:25 - with a bigger circle okay so now uh
19:29 - in the previous video you might have
19:31 - seen i was
19:33 - able to drag a copy like this
19:36 - so to do so all you need to do is select
19:38 - the figure or whatever and then click on
19:42 - shift plus option and then drag it down
19:45 - then
19:46 - if you drag it down you will get an
19:48 - exact copy over here
19:49 - okay
19:51 - so i hope you understand this
19:53 - now i'm gonna change it from linear to
19:56 - solid
19:57 - and i'm gonna increase its
19:59 - height i'll make it maybe 70 so now i
20:02 - have a bigger circle now i'll add a
20:04 - stroke to it now stroke basically means
20:07 - the border okay i'll make the border of
20:09 - width too and the border of color
20:13 - or which is inside this okay and now
20:16 - i'll remove the color from
20:18 - middle so that we just
20:22 - i'll show you
20:24 - now if you
20:25 - bring it here it's opacity decreases i
20:28 - have brought the opacity to zero percent
20:30 - so now we just have the border like this
20:33 - okay now i am gonna take this border and
20:36 - put it over here
20:39 - so now
20:41 - i'll select i selected the circle which
20:44 - is the border then the inside circle now
20:47 - once both are selected i am gonna make
20:49 - sure they are on the same axis
20:51 - horizontally and vertically so now once
20:55 - that is done
20:56 - you can now see this looks little bit
20:58 - better
21:00 - okay so i'm gonna do the same for all
21:02 - the four
21:04 - now it is very simple i'll
21:07 - select this then again shift option
21:10 - and drag i'll get another one
21:12 - okay
21:13 - now again i'll select the inside and the
21:15 - outside one both the circles
21:18 - make it horizontally aligned and
21:20 - vertically aligned
21:23 - and then i'm gonna change the color of
21:25 - the outer one
21:27 - so over here we were using the second
21:29 - color so i'll again go to the second
21:31 - palette and select it now i have it with
21:33 - the second color
21:36 - again for the third one i will do the
21:38 - same
21:39 - [Music]
21:41 - you can see over here it is not aligned
21:43 - so by doing this we make sure that
21:45 - everything is aligned properly
21:48 - i'm sorry i need to select the outer one
21:53 - then again i'll change the color of the
21:55 - stroke it will be the third one
22:05 - now i'll do the same for the fourth one
22:09 - drag it and make a bring a new one then
22:12 - select both
22:13 - then align it vertically and
22:16 - horizontally
22:17 - and then finally change the color
22:20 - okay
22:22 - do this
22:24 - and then the last one
22:30 - okay so you can see
22:32 - that if i drag it it is getting outside
22:35 - the screen okay so this is our screen
22:37 - and this ellipse is outside so now what
22:39 - will happen that even if we unselect it
22:41 - we are able to see the entire thing but
22:43 - what i want is that this is also cut
22:45 - into half
22:47 - proportional to the inside circle okay
22:49 - so
22:50 - i'll revert the changes into revert we
22:52 - have command z in mac
22:54 - and
22:55 - control z in a windows i'll drag it
22:58 - little bit okay i'm sorry
23:01 - i'll
23:04 - i'll drag it a little bit to this side
23:07 - and then i'll use the right arrow to
23:10 - make it position so that then it will
23:13 - not leave the
23:15 - screen it will still be inside the
23:17 - screen so then if i
23:20 - uh
23:21 - if i am not if it is not selected i am
23:24 - only able to see half of it means only
23:26 - the part that is
23:28 - on the screen
23:30 - okay so you understood what i was trying
23:32 - to explain
23:34 - now again i'll select the outer one
23:37 - to change the
23:39 - color of the stroke to the first one
23:41 - okay
23:42 - now if i go and see it looks a little
23:45 - bit better okay so now finally let's add
23:48 - the images of the vegetables over here
23:50 - i was able to get a few images of the
23:54 - vegetables
23:55 - so it was a
23:57 - long process i had to download images
24:00 - from google then
24:01 - remove background from it okay so but it
24:04 - is done
24:05 - now i'll
24:07 - first i'd like to have broccoli so again
24:10 - i'll create a copy of it because i might
24:12 - use it somewhere else so shift command
24:15 - create a new one and then drag it inside
24:18 - the screen
24:19 - okay now i'll
24:21 - arrange it
24:24 - okay and
24:26 - i'll make a
24:28 - little bit small as well
24:30 - so now i'll bring it over here and see
24:33 - how things are
24:35 - let's make the height to
24:38 - 50 okay it has completely left the
24:40 - screen
24:41 - and now if i put it here
24:44 - how does it look okay it looks better
24:47 - but maybe i'll make it little bit more
24:49 - small
24:50 - so let's say
24:51 - 40
24:53 - oh sorry it became four
24:56 - meant it to be 40
24:57 - so okay this looks fine now so now again
25:00 - i'll put it in center so to so since
25:03 - figma is very powerful it will
25:05 - automatically assist you and notify you
25:07 - when you are in center you can see the
25:09 - orange line
25:10 - okay and even and if you don't want to
25:12 - use that then we are again gonna use our
25:15 - these tools i'm gonna select this the
25:17 - circle above that and the outer circle
25:20 - then
25:21 - align all of them horizontally align all
25:23 - of them
25:24 - vertically
25:27 - okay now next let's take another
25:30 - uh vegetable
25:32 - okay let's take spinach
25:35 - again
25:36 - drag and create a new one bring it
25:38 - inside the screen now again i should
25:40 - directly do 40 over here
25:46 - and you can see the image seems fine
25:51 - i'll bring it to the center
25:55 - and we have our
25:58 - spinach over here
26:01 - now next
26:03 - let's take capsicum
26:11 - okay again i'll make it
26:13 - high it's hard to be 40
26:17 - nice
26:18 - now this what is little bit
26:20 - too small i'll make it 60 let's say okay
26:24 - 60 seems fine
26:28 - this is just for the designing purpose
26:30 - once the design is finalized i'll
26:33 - make them all of the same size
26:37 - okay so let's see how does this look
26:39 - okay
26:41 - it might be a little bit bigger
26:43 - let's see how it looks if it is a little
26:45 - bit bigger
26:46 - okay
26:47 - now i need to align it in the center
26:50 - that is a very important thing okay so
26:52 - now it is in center
26:54 - [Music]
26:56 - okay but if you look closely there is
26:58 - little bit space over here compared to
27:01 - the left side i am going to push it a
27:03 - little bit over here
27:05 - now although the image is not in center
27:07 - but it feels it is in center and the
27:09 - feeling is more important
27:11 - okay
27:13 - so this is done
27:16 - now let's take beans
27:19 - create a new one and drag it inside the
27:21 - screen
27:22 - again as we already have the height of
27:25 - 40 over here and here i'll directly make
27:27 - it 40
27:29 - okay and then
27:31 - try to put it over here
27:33 - let's see
27:37 - so it is in the center
27:39 - yes this looks fine
27:45 - now next i'm gonna use bitter guard
27:51 - again i'll directly make the height to
27:53 - 40
27:54 - [Music]
27:55 - so 40 it is
27:57 - and it is little bit hidden behind the
28:00 - screen
28:01 - okay so this is very important it gives
28:03 - the just that there are more items on
28:06 - the right and the user should scroll
28:10 - okay so now this is how the items are
28:13 - going to look this is how
28:15 - it will look
28:16 - okay now let's add the names of it
28:26 - so to add the name i'll click on text
28:30 - then
28:31 - text
28:32 - or a better way would be to
28:35 - select this text
28:37 - and drag and create a new one and then
28:40 - over here i can say
28:42 - broccoli now this is very big let's
28:46 - give it a smaller size 12 seems fine and
28:49 - from middle i'll make it light so you
28:51 - can see the stroke is a little bit
28:53 - lighter now
28:55 - that is what i was
28:57 - looking for
28:58 - okay so now you can see i have the text
29:01 - below it is in this it is aligned
29:04 - they all are on the same axis and this
29:07 - and this amount of space is enough i
29:09 - guess okay so first is broccoli
29:13 - then there is
29:15 - okay so this is the center
29:18 - spinach
29:20 - now since the length of spellings are
29:22 - different it is
29:24 - gonna change after you change the name
29:26 - so let's first change the name only
29:29 - capsicum
29:30 - [Music]
29:32 - so again this now this is in center
29:36 - [Music]
29:43 - beans
29:46 - okay and the last one but not least is
29:50 - bitter guard
29:54 - okay so now if this is not visible over
29:56 - here you can check the spelling over
29:57 - here
30:00 - also since you are designing lorem ipsum
30:02 - would have also done the
30:04 - have served would have solved the case
30:07 - okay
30:08 - so now we have the name over here
30:11 - so i think the items look fine for now
30:15 - in the next video we are going to add
30:18 - the
30:19 - trending section and the bottom bar okay
30:22 - so see you in the next video thank you
30:25 - so in this video we are going to
30:26 - continue designing our ecommerce
30:28 - application
30:30 - so as i told in the previous video in
30:32 - this
30:33 - video we are going to add a trending
30:35 - section okay so let's get started i'll
30:38 - copy the text over here
30:42 - and i'll call it most
30:44 - popular let's say for now okay and this
30:48 - is
30:48 - medium i want to reduce the size a
30:52 - little bit so i'll make it 20 and then
30:55 - i'll make this
30:57 - semi bold so that the order of
31:00 - inheritance is there this is the most
31:02 - important thing then after that this is
31:04 - important
31:06 - okay now i'll create a square
31:09 - so i'll
31:10 - create it
31:12 - like this
31:16 - um
31:25 - let's say this this is the width and a
31:28 - height being somewhere around
31:31 - the this okay
31:33 - now i want to make the borders to be
31:35 - curved
31:36 - so let's say i give it a edge of 14 15
31:40 - so over here if you want to give the
31:43 - corners
31:44 - a radius means if you want to make a
31:47 - rounded corners you write the degree
31:49 - over here okay so now you can see this
31:51 - is
31:54 - rounded at the corners okay now let's
31:56 - add the color so we have our color
31:58 - palette over here i'll use the first
32:00 - color
32:01 - okay now let's see how it looks
32:07 - okay so this looks fine
32:09 - i'll change the way we
32:13 - display the color instead of solid i'll
32:15 - make it radial
32:16 - and then i'll
32:19 - pull it over till here okay so by this
32:22 - what happened that the color will be
32:24 - concentrated in the center
32:26 - okay so now you can see that
32:29 - now let's
32:30 - let's add the
32:33 - the item okay so since we have already
32:35 - used five of the items over here i am
32:37 - gonna use the sixth item
32:39 - that is the cucumber so i'll create a
32:42 - copy
32:44 - and then add it inside the screen
32:48 - so let's see
32:56 - i'll make it a little bit bigger
33:05 - okay so this seems fine
33:07 - now let's add the
33:09 - name and price
33:11 - so for that i'll create another box over
33:13 - here
33:15 - this will be of the same size as of
33:21 - the
33:23 - bigger box okay now i'll
33:26 - make its
33:27 - height a little bit less somewhere
33:29 - around let's see
33:35 - okay so this seems fine now
33:39 - let's see
33:41 - okay so now you can see this is rounded
33:44 - at the top but not at the bottom
33:46 - because it is
33:49 - because we have added another square
33:52 - another box on top of it okay so the
33:56 - box which was behind it got covered okay
33:58 - so now
33:59 - so to fix this what we are going to do
34:01 - is we are going to add border radius to
34:04 - this as well so now if i directly write
34:07 - 15 over here it gets added on all the
34:09 - four sides which is
34:11 - which is what uh which i don't need so
34:14 - i'll change it back to zero and then if
34:16 - i click on this i get to add the
34:18 - individual
34:20 - border radius okay so i want for this
34:23 - angle so i'll add 15 over here so you
34:25 - can see
34:26 - this part is
34:28 - rounded now this
34:30 - this this value is for this part so
34:33 - again over here also i'll add 50
34:36 - and so now you can see these two corners
34:39 - have a
34:41 - border radius but these two don't okay
34:43 - and that is what uh we want exactly okay
34:46 - so now let's add
34:48 - let's change the color
34:51 - we'll add a little bit
34:54 - less blackish color okay so
34:57 - this is how it will look
34:59 - now let's add the text
35:01 - okay
35:03 - so
35:04 - i'll bring our text here now you can see
35:06 - if you drag it it has gone at the back
35:09 - okay so now you need to double click or
35:12 - right click on it and then
35:14 - select bring to front okay so now it
35:17 - comes to the front now i'll change the
35:20 - value to
35:21 - cucumber
35:23 - okay
35:24 - now i shall
35:26 - reduce its size
35:27 - maybe i'll make it
35:30 - 15 15 seems fine
35:32 - okay
35:33 - so
35:34 - 15 is all right now let's push it a
35:37 - little bit
35:38 - to the
35:39 - right okay
35:41 - now another
35:42 - text that we are gonna have is the price
35:45 - so let's say
35:47 - rupees
35:49 - 40
35:51 - per kg
35:53 - okay
35:54 - now i am gonna
35:55 - reduce this size even further okay and
35:59 - change it from
36:02 - medium to light
36:04 - okay so this seems fine
36:06 - now i'll add a icon over here by using
36:09 - which we can directly add it to the cart
36:13 - so for that i already have a cart icon
36:15 - over here
36:16 - [Music]
36:17 - now you you can directly import all
36:20 - these icons from this figma project okay
36:22 - the link will be in the description so
36:25 - i'm again gonna copy it
36:28 - create a new one and once it is created
36:30 - i am gonna add it to the project
36:33 - okay
36:36 - i'm sorry
36:37 - yeah so now let's
36:40 - increase the size it will be of 25 okay
36:43 - now you since this is an svg i can
36:46 - change its color and i'm gonna do it so
36:49 - i changed it to the
36:52 - color we are using throughout the
36:54 - application so this is how it will look
36:56 - this seems fine
36:59 - okay now i'll
37:01 - select the entire thing
37:03 - shift option create a new one now again
37:06 - it came out of the screen so i'm gonna
37:08 - let it be inside
37:10 - and drag it
37:12 - okay so this will be something like this
37:15 - now i'll change the color as we have
37:18 - four different colors so i'm gonna
37:21 - make it back to solid and the color is
37:24 - gonna be this
37:25 - then again change it to radial and
37:28 - okay sorry so over here only i'll have
37:31 - to change it to this color so this is
37:33 - done
37:34 - okay now let's change the item
37:37 - instead of cucumber let's make it a
37:40 - capsicum
37:41 - okay
37:52 - so i'm gonna put it inside i'm gonna
37:54 - reduce the size to let's say 70
37:58 - okay where the hell did it go
38:00 - now so 70 is very small i'm gonna make
38:02 - it 150 okay so 150 seems fine
38:06 - now 150 also feels small so i'm gonna
38:09 - make it 170 or maybe 200
38:12 - so 200 is what it is
38:15 - so this looks fine
38:17 - now i'll change from
38:20 - i'm sorry
38:21 - i'll change the
38:23 - i was about to select the text okay so
38:26 - i'll
38:27 - i'm sorry
38:30 - so i'll select the text and change the
38:32 - value from cucumber to
38:35 - capsicum
38:38 - and the price from 40 to let's say
38:42 - 80 okay
38:44 - so this is how it is going to look
38:47 - so now if you come here this is
38:49 - how it will look let's add a image over
38:51 - here okay this has been waiting from the
38:53 - long time so to add an image the
38:56 - shortcut is shift command k
39:00 - okay
39:00 - so now i have the option
39:03 - i have already cropped an image
39:06 - in circular
39:08 - okay
39:09 - now i want it to be of the same i'm
39:12 - sorry i want it to be of the same size
39:15 - as this circle this is 45 so i'm gonna
39:18 - convert this to 45
39:20 - okay and then just place it on top of it
39:27 - okay so this is done
39:31 - so this is how it is going to look
39:33 - now at the bottom i'll have a navigation
39:36 - bar
39:37 - okay so i have already created one
39:41 - means i have not created one i already
39:44 - have the icons that we'll use
39:51 - okay so
39:52 - this is the home search cart profile and
39:55 - menu okay so we shall see what are the
39:58 - items that are going to be inside it
40:00 - later
40:03 - now again this has gone to back i need
40:04 - to bring it to front
40:06 - now this is a little bit to the right
40:09 - so i'll bring it to left
40:12 - now this is home
40:15 - home should be below this
40:18 - okay
40:19 - now similarly we have search
40:24 - now search should be in black color the
40:27 - color will change to green for the
40:29 - selected fragment
40:31 - okay
40:32 - now this is
40:34 - cart
40:41 - now this is profile
40:48 - and the last one is
40:52 - menu
40:53 - so i'm gonna
40:58 - okay
41:01 - so we have our bottom navigation bar now
41:04 - now over here i shall add
41:07 - reviews okay
41:09 - reviews for now if i come up with
41:11 - something more uh
41:13 - suitable for the empty space then i'll
41:16 - add that if you have any suggestions you
41:18 - can drop it off in the comment box okay
41:22 - so i'll
41:25 - copy this
41:26 - and right
41:29 - i'm sorry
41:31 - i'm sorry
41:37 - what's the word around
41:40 - okay means
41:42 - that that that means basically the
41:43 - reviews
41:45 - i'll copy this
41:47 - text over here
41:52 - now i'll
41:53 - add it to 15 from all the sides
41:58 - okay cool
42:02 - [Music]
42:04 - so this is that
42:07 - and now
42:08 - let's add an image over here for the
42:10 - user whose review this is okay
42:15 - now this image over here seems pretty
42:17 - big so i'll may change it to 20 okay
42:20 - this seems fine
42:21 - now the name of the customer whose
42:23 - review this is going to be for now i'll
42:26 - put my name
42:28 - rishabh kumar
42:32 - okay i'll let's change it from light to
42:35 - medium because the name should be of
42:38 - more significance than the
42:40 - comment and then to get the comment time
42:43 - we have a
42:46 - website called lorem ipsum dot io which
42:48 - is our lorem ipsum generator
42:51 - so i'll copy
42:54 - this much from there i think this should
42:55 - be fine copy
42:57 - okay now i'll
42:59 - have a text over here
43:03 - and then paste everything
43:06 - okay so now first
43:08 - change it from medium to light
43:10 - reduce its
43:12 - size
43:14 - okay
43:15 - so after that
43:17 - we align it
43:20 - how it should look
43:24 - break a line here and here
43:28 - and this is done
43:31 - i think this seems fine
43:37 - or maybe i'll reduce the
43:40 - size a little bit more okay
43:44 - so the size didn't reduce actually
43:46 - it was selected in the wrong way so this
43:49 - seems fine
43:51 - i'll have to take it back
43:54 - yes so now
43:59 - this is how you add random text and
44:01 - design while designing so this is done
44:04 - now we need to add stars for that i have
44:07 - already downloaded svgs of star i'll
44:10 - again do shift command k
44:13 - okay now i have star one and star you
44:16 - don't need to worry about these items
44:18 - you can down import it from the figma
44:21 - project
44:22 - this project will be in the
44:26 - description
44:28 - okay
44:29 - so
44:31 - [Music]
44:35 - let's talk about star
44:40 - this is star one this is star i'll make
44:43 - it of size
44:44 - okay so we need to lock it now by
44:47 - locking i mean that
44:49 - the height and width will be of the same
44:51 - proportion as it is now okay if it is
44:54 - not locked and then i change the height
44:56 - then only height will change and no
44:57 - change will be in the width but since it
44:59 - is locked if i change the height to 30
45:01 - the width also changes to 30 okay so it
45:05 - will be in proportion
45:06 - that is the main gist of this so 30 is
45:09 - way too big i'll make it 15
45:12 - okay 50 same 15 seems fine
45:15 - copied four times
45:19 - [Music]
45:23 - okay so
45:24 - that means i gave 4 star out of 5
45:27 - now then again this star
45:30 - i'll bring it here
45:33 - now you can see the height and width are
45:35 - same so again i'll lock it change it to
45:37 - 15
45:38 - and boom
45:40 - it is done
45:44 - so our
45:46 - review section is also done this should
45:49 - change automatically or maybe i will add
45:51 - a scroll feature that we can decide
45:53 - later
45:54 - but our home screen is done for now now
45:57 - you might be thinking why are we not
45:59 - making the user register or login at
46:01 - start
46:02 - so because that is not a standard
46:04 - practice you can see any e-commerce
46:07 - applications they will force you to
46:09 - login or create an account only when you
46:11 - are going to order not until you order
46:14 - so we will also ask the user to create
46:16 - an account or login to the old account
46:19 - when they are going to order okay so
46:22 - until then the user should be able to
46:24 - see everything okay so with this hour
46:27 - this screen is done
46:29 - we will meet in the next video thank you
46:31 - so in this video we are going to
46:33 - continue designing our e-commerce
46:35 - application
46:37 - so i'll open figma
47:04 - okay so once it is fired up we will
47:06 - continue so in this
47:08 - video we are going to make the details
47:11 - screen means if we click on any of the
47:13 - items over here or on these items we
47:16 - should be
47:17 - able to see our description page okay so
47:20 - let's start
47:21 - we know how to copy we click on shift
47:24 - option and then drag and we get a new
47:26 - one
47:27 - okay now i i don't need these things
47:33 - okay so i'll select them all
47:35 - and remove them i will keep the
47:39 - bottom navigation bar because that is
47:41 - how i plan to proceed so let's change
47:44 - its color
47:46 - okay
47:47 - i'm gonna give this color so you will
47:49 - see that in the entire project i am
47:51 - gonna use only this palette
47:53 - okay because it will provide more
47:56 - uniformity to uh
47:57 - to our application
47:59 - okay so now i need to have a back icon
48:02 - over here so for that i'll open our
48:04 - material outlines
48:06 - okay i'll add a link to this as well in
48:09 - the description
48:12 - okay so once it has opened if you go in
48:14 - the navigation section you can see all
48:16 - the icons
48:17 - so i'll select this one
48:20 - then command c to copy if you are on
48:22 - windows 10 control c
48:24 - and then simply i'll paste it over here
48:27 - now in
48:28 - that everything is inside a frame means
48:32 - by frame i refer to this purple boundary
48:34 - that it has if you double click on it it
48:36 - will go inside the frame and select the
48:39 - actual item i'll remove it away from the
48:41 - frame
48:42 - okay and then finally i'll delete this
48:45 - frame
48:46 - okay now i want this to be white in
48:49 - color so
48:51 - here it is
48:52 - now i want it
48:54 - over here
48:56 - okay
48:58 - nice
48:59 - so next i want the item that is clicked
49:03 - to be displayed here means the name okay
49:06 - so i'll create a new text view or you
49:10 - can you see how convenient this is to
49:13 - copy from a previous one
49:15 - okay now i will change its color to
49:17 - white
49:18 - and then this will be
49:21 - broccoli
49:23 - okay
49:24 - now this should be in the center
49:27 - so i'll bring it over here
49:29 - now to make it in the center i'll simply
49:31 - click on this and it will be in the
49:33 - center now i just need to match these
49:35 - two so i'll
49:37 - shift it a little bit upwards and then
49:40 - these two are on the same line now okay
49:43 - so now let's proceed i'll add a square
49:45 - over here
49:46 - now if you don't uh
49:49 - there are two options to create a square
49:51 - i'll click on this and then drag and
49:54 - create a square simple
49:57 - or i can simply click and get the square
49:59 - and then
50:01 - edit it
50:02 - to the desired
50:04 - shape i want okay so i try i did the
50:06 - second one
50:08 - i wanted till here
50:10 - i'm sorry it should it should touch the
50:13 - bottom navigation bar
50:15 - okay and at top
50:17 - it should be till here
50:21 - okay this seems fine now i'll add a
50:23 - border to it only on the top so you know
50:26 - we can add a
50:28 - individual
50:30 - border radius so for this corner i'll
50:32 - again make it 15
50:34 - and for this corner as well i'll make it
50:36 - 15. i want
50:38 - it to have a white color i'll do that
50:41 - okay and with this we are ready
50:44 - now let's see how it looks
50:46 - i'll start the
50:47 - preview
51:00 - okay so this is the first screen only
51:04 - now let's
51:06 - navigate from here to
51:08 - this screen from this screen to this
51:10 - screen which in designers term is called
51:12 - prototyping okay so over here this is
51:15 - design and then you have the prototype
51:17 - section
51:18 - okay now what you need to do is you
51:20 - simply need to go and select this the
51:23 - circle uh not the image but the circle
51:26 - circle would do better the inner circle
51:29 - to be more specific okay
51:32 - now in this uh once this circle is
51:34 - selected you can see a
51:36 - big dot a bold dot over here so all you
51:39 - need to do is click on that and then
51:41 - drag it to the screen where you want it
51:43 - to navigate on click
51:45 - ok and then over here you have different
51:48 - options on how to animate the
51:51 - transition from the screen to this
51:53 - screen like move in move out for now
51:55 - i'll let it be in instant
51:57 - you can try the other things on your own
52:01 - okay so with this now i'll go back to
52:04 - design so now over here if i click on
52:08 - broccoli i am taken to the taken to the
52:11 - next screen
52:12 - okay so the
52:13 - prototyping worked okay now let's add a
52:17 - big image of
52:18 - broccoli
52:20 - so again
52:21 - create a new one
52:22 - put it inside the screen
52:28 - okay so the image size auto is
52:31 - perfect in itself
52:33 - okay this looks decent enough
52:36 - now let's add the price
52:38 - so
52:40 - i'll select this one
52:42 - and again bring it over here
52:46 - over here as you as i disc as we
52:49 - discussed in one of the previous videos
52:50 - that all our things will be
52:54 - beyond this
52:55 - first
52:56 - reddish line okay so now over here i'll
52:59 - add a price
53:02 - let's say
53:03 - 200 rupees per kg
53:05 - okay so this is our price
53:09 - i'll i'll push it little bit downwards
53:12 - okay now you can see that this square is
53:15 - getting selected every time i come here
53:17 - but i don't want that i don't want this
53:20 - square to get selected sorry not a
53:22 - square this rectangle to get selected so
53:25 - what i can do is i'll simply come over
53:27 - here and click on this lock icon so once
53:31 - we have locked this now you see if i
53:33 - hover over here it is not
53:35 - getting selected and if i remove this
53:38 - then if i over hover over here then it
53:41 - will be able to be selected
53:44 - okay so for now we don't need that so
53:46 - i'll lock it
53:48 - okay
53:49 - now let's add a description
53:51 - of the product
53:53 - so again create a new one bring it over
53:55 - here
54:01 - okay i want it to be till here
54:05 - okay now let's edit
54:17 - okay
54:18 - so
54:19 - i'll copy it
54:21 - paste it once again so we have a long
54:24 - text
54:25 - now let's
54:26 - change the color
54:28 - color will be green
54:30 - okay and let's see if
54:32 - 10 works
54:34 - maybe i'll increase its size a little
54:36 - bit
54:37 - okay 12 seems fine
54:40 - now i don't need this much of our
54:42 - description
54:43 - so when we make the app we will limit
54:45 - the user to add
54:48 - only a certain number of characters in
54:50 - description okay so this is done
54:54 - so this is how our screen looks until
54:57 - now now we need to add an option to buy
55:00 - now or add it to cart and then order
55:02 - multiple things together so let's do
55:05 - that as well
55:06 - i'm gonna add a square box again
55:14 - now let's say
55:16 - okay this size seems
55:18 - fine
55:21 - okay i'm gonna give it uh
55:23 - our again the primary color
55:26 - and i'm gonna add a border radius of
55:28 - five on all the sides okay so that its
55:31 - uh corners are smoothened
55:34 - okay
55:35 - now i'll again add this text over here
55:40 - i need to bring it to the front okay
55:42 - once done i'll change its color to
55:45 - white and then the text will be saying
55:52 - by now
55:54 - okay now i don't need it to be medium
55:56 - i'll make it light
55:58 - reduce the size
56:01 - 2 15 15 seems
56:03 - fine now i'll make it uh
56:05 - align all the things
56:08 - horizontally and vertically
56:10 - okay so now once this is done i'll
56:12 - select
56:14 - select the button and create a new one
56:18 - okay
56:20 - and then again uh to in this one i'll
56:23 - add a stroke the stroke will be of width
56:26 - 1.5 where stroke is nothing but the
56:28 - border i'll give it our primary color
56:31 - okay
56:33 - remove the fill color
56:36 - and then i'll select the text and make
56:38 - it our
56:39 - primary color and this text will
56:42 - say to cut
56:48 - okay
56:50 - now again these things need to be in the
56:52 - center
56:54 - so i'll align it
56:56 - okay so this is how it looks i think we
56:58 - need a little bit more white space from
57:01 - the bottom navigation bar so i'm gonna
57:03 - push it a little bit upwards
57:05 - so select it and then click on the
57:11 - up arrow okay so
57:14 - now this looks better
57:16 - now over here we are gonna display the
57:18 - sellers information
57:20 - so for that i am gonna select the
57:23 - design of a review over here okay and
57:26 - over here will basically have a seller's
57:31 - description or review
57:33 - something about the seller let's we'll
57:35 - decide that
57:36 - later once we develop we'll see which
57:39 - one is more convenient at that point
57:41 - okay so
57:43 - beside the name there should be seller
57:45 - written on it
57:46 - okay so that the people understand i'll
57:48 - i'll reduce i'm sorry
57:52 - i'll reduce its rating from 4 star to 3
57:55 - star
57:56 - okay
58:00 - let's see
58:02 - and then i'll add its address over here
58:05 - let's say
58:21 - okay so now i'll make it
58:25 - from light i'll change it to medium to
58:27 - make it more significant
58:30 - as compared to the
58:33 - text that we have over here
58:35 - okay which we will decide later is gonna
58:38 - be the
58:39 - is gonna be related to the
58:42 - seller or a review about the seller okay
58:45 - so we can decide that later once we
58:48 - reach the point to do so
58:50 - and with this this screen is done as
58:53 - well okay so this screen also looks
58:55 - pretty decent
58:57 - okay this will be the description of our
59:00 - products
59:02 - okay so now for practice i suggest you
59:05 - create for all the other items as well
59:07 - in the next video we will start with the
59:09 - back end make these two screen
59:12 - make the prepare the back end required
59:14 - for these two screens make the front end
59:17 - that is our flutter application for
59:19 - these two screens and then we shall
59:21 - again start with figma
59:23 - so thank you
59:25 - so in this video we are actually gonna
59:28 - start coding we are going to prepare our
59:30 - back end for the project okay so for
59:33 - that i'll fire up mamp
59:36 - okay so i'll start
59:39 - it will take a few seconds
59:41 - okay so this is an ad that comes along
59:43 - with map you can simply close it it is
59:46 - of no use okay once it is started i'll
59:48 - minimize it okay so this is the
59:52 - default home page of mamp and it opens
59:55 - automatically as soon as your mam server
59:58 - starts
59:59 - so we can close this
60:01 - now your what we need to do is go inside
60:04 - finder inside applications inside the
60:07 - mamp folder inside htdocs
60:10 - we need to create a new folder so over
60:12 - here i have created one called better
60:14 - buys so i'm gonna open this folder in
60:17 - our vs code and then start coding
60:19 - okay so
60:22 - i'm sorry not the terminal but the vs
60:24 - code and then i'll open the folder
60:26 - better buys
60:28 - okay
60:29 - so now we can actually start coding
60:33 - so over here i am first gonna create a
60:35 - folder called includes because
60:38 - over inside this all the files will be
60:40 - there that will be included in
60:42 - other files okay so i'm gonna create a
60:46 - database dot
60:48 - php
60:49 - okay so this only this class will be
60:51 - allowed to connect with the database and
60:54 - interact with the database we are gonna
60:57 - create use the instance of this database
61:00 - class that we create right now
61:02 - for interacting for storing data in our
61:05 - database for retrieving data from our
61:07 - database so you can refer to this as a
61:09 - helper class
61:10 - okay so let's start
61:13 - now to start we start a php file by
61:16 - giving this angle bracket a question
61:18 - mark and writing php okay and after this
61:21 - we start so now first i am gonna create
61:24 - a few global variables they are
61:26 - basically the credentials required to
61:29 - connect with the
61:30 - sql server so to create a global
61:33 - variables we simply write define
61:36 - and then the name i'm gonna call it host
61:40 - okay
61:42 - and then the value for now it is
61:43 - localhost
61:46 - and then
61:48 - um then there needs to be username
61:53 - okay anyone with
61:55 - any amount of experience in mysql would
61:58 - know that
62:00 - the host username password and db name
62:02 - is required to connect with the
62:05 - mysql server okay so
62:08 - i'm defined and this is password
62:13 - and the password is empty for the time
62:16 - being because since it is running on
62:17 - localhost we don't need a password
62:19 - security is not an issue as
62:21 - generally it often is a development
62:24 - server
62:25 - okay so again define
62:27 - and then over here
62:29 - db name
62:31 - okay
62:33 - and we are gonna call it
62:35 - better
62:37 - underscore
62:39 - buys okay so
62:41 - uh you need to understand that in php we
62:44 - use pascal case uh
62:46 - in pascal case what basically happens
62:48 - that we separate uh two words by a
62:51 - underscore
62:52 - and in camel case we start the next word
62:55 - with her with the capital letter so you
62:57 - understand
62:59 - the difference between camel case and
63:01 - pascal case and in php we will use
63:03 - pascal case okay because that is the
63:05 - standard practice
63:07 - now i'll start the db class now
63:09 - commenting is the same as in any other
63:11 - programming language as most of the
63:13 - programming language
63:16 - we start the
63:18 - class
63:19 - okay so if we write the keyword class
63:22 - class name
63:25 - okay now i'll create a connection means
63:28 - connection will be a variable that will
63:30 - connect with the sql now i want it to be
63:32 - secure so i'll make it private
63:36 - okay i know you i i assume you have the
63:39 - idea of access modifiers private public
63:41 - and protected
63:43 - we are gonna see private and public both
63:46 - in this video okay so i'll create a
63:48 - connection variable
63:50 - so it is also like python you don't need
63:53 - to write the data type it will
63:56 - automatically be assigned once we assign
63:58 - some value to it okay now we will create
64:01 - a constructor for this class as
64:03 - constructor will be in called from other
64:05 - other places we it will be public
64:08 - and for constructor we i'll give two
64:11 - underscores and then write
64:13 - construct
64:15 - okay so in php we don't actually write
64:17 - the file name but we give to underscores
64:19 - and use the keyword construct
64:23 - okay and as soon as the object is
64:26 - created it is
64:28 - known that the constructor will will be
64:30 - executed so what i am going to do is i
64:32 - am going to create a connection inside
64:35 - the
64:36 - inside the constructor okay not inside
64:38 - the constructor but we are going to
64:40 - create another method i am going to call
64:41 - it inside the constructor so that means
64:44 - that as soon as you create an object the
64:47 - object is automatically connected with
64:49 - the
64:50 - database okay so for that i will create
64:53 - create a new method
64:56 - i am calling the method over here and
64:57 - then we'll create it let's call it
65:00 - opendb
65:03 - connection
65:04 - okay so
65:06 - this is the method name and this is how
65:08 - we call a method we use the keyword this
65:11 - and then opendb connection if we are in
65:13 - the same class if we are not in the same
65:15 - class then over here would be the name
65:17 - of the object of
65:19 - this class okay so now actually let's
65:21 - create this function
65:23 - so to define a function we write public
65:26 - or private as per the case
65:28 - and then the keyword function and then
65:31 - the name of the function
65:32 - which is open db
65:36 - connection
65:40 - okay
65:41 - so let's add a few comments so it is
65:45 - easier to understand this is the
65:47 - constructor
65:49 - and over here we are creating
65:53 - connection with the
65:54 - db
65:57 - so let's start i'll write
66:00 - this
66:03 - connection
66:05 - means i am referring to this variable
66:06 - over here and as i have already
66:09 - discussed that we use the keyword this
66:12 - to refer to variables or functions
66:15 - inside the same class so this connection
66:18 - and then we all have a predefined method
66:21 - that is called my
66:23 - sqli
66:27 - connect
66:29 - so this is a predefined method in php it
66:32 - takes
66:33 - four things
66:34 - first is host which is this variable
66:36 - over here
66:39 - then username
66:43 - then password
66:48 - and then the
66:49 - db name
66:51 - okay so this will
66:53 - connect this will create a connection
66:55 - with
66:56 - the sql database
66:58 - okay now we need to check if it has
67:00 - connected properly or not so we'll use
67:02 - an if else condition if else is same as
67:05 - in any
67:06 - other programming language we write
67:09 - then now inside this we write mysqli
67:13 - connect
67:16 - error
67:17 - so if this
67:19 - returns some value that means there was
67:21 - an error in connecting with the database
67:23 - so we write the die
67:26 - and then
67:28 - connection
67:30 - error and the connection error being
67:33 - mysqli
67:37 - connect error
67:40 - okay so now uh
67:43 - i'll i'll explain this line to you so
67:45 - this die keyword over here is used to
67:48 - stop the execution of the code as soon
67:50 - as the php compiler encounters this word
67:54 - die it will this will be the last line
67:56 - to be executed okay
67:59 - so
68:00 - means that it can be basically
68:04 - referred as finish that we have in
68:07 - android okay
68:09 - now connection error this is the string
68:11 - and then with comma we have separated
68:13 - and then we actually print the error
68:16 - that occurred okay so if no if there is
68:19 - no error then nothing will be printed
68:21 - okay and that means the connection is
68:23 - created once this is done
68:26 - let's proceed
68:29 - so after this i'm gonna create a
68:31 - function that executes the sql command
68:34 - i'm gonna call it query and it takes a
68:36 - parameter called
68:38 - sql so the
68:41 - definition we take
68:43 - parameters by just writing the name
68:46 - uh preceded by a dollar sign
68:48 - okay
68:49 - so now i'll create a variable result
68:52 - that will have the result of this query
68:55 - so to
68:56 - run this query we first need to call our
69:00 - connection
69:02 - okay because that is the sql connection
69:04 - and then we have
69:06 - query
69:07 - okay and then inside this query we write
69:09 - we give the
69:11 - sql so now this connection instance
69:13 - executes this sql query
69:16 - okay and then the result is stored in
69:18 - this result variable
69:20 - so we check if
69:22 - not
69:23 - dollar result
69:27 - so this means that no result was
69:29 - received that means the query didn't
69:32 - execute properly so then again we write
69:34 - a die
69:37 - query fails
69:40 - okay
69:41 - and then we simply print to the query
69:43 - and the query is stored in the
69:45 - variable name sql okay and if not we
69:50 - simply return the result okay return
69:52 - dollar
69:53 - result
69:55 - so returning the value is similar to any
69:58 - other programming language
69:59 - okay
70:00 - this is
70:03 - executing
70:07 - sql
70:09 - query
70:12 - okay so now the next function is to get
70:15 - the array of results suppose we have a
70:18 - select method or similar to that method
70:21 - then it it is supposed to return a
70:24 - return few values so to get them we will
70:26 - we are creating this function public
70:29 - function
70:30 - and it will be called fetch
70:34 - array okay and then this will take this
70:37 - result
70:38 - okay this result is nothing but this
70:40 - that we return from this function
70:43 - because this is the result that the
70:44 - query has given and we are taking that
70:46 - result and then extracting the values
70:48 - from it and returning to the
70:51 - developer or the function that is or the
70:53 - place where this function is called okay
70:56 - so first i'll check if
70:59 - dollar result
71:02 - i'm sorry
71:04 - num rows means the number of rows
71:07 - is greater than 0 that means it actually
71:10 - has some value sometimes what happens uh
71:13 - that it doesn't return anything so then
71:15 - the number of rows will be equal to or
71:18 - equal to zero and in that case we don't
71:21 - want to run this method as it is gonna
71:23 - crash so then i am going to create a
71:25 - while loop
71:27 - and then what it is going to do is
71:30 - row
71:33 - is equal to dollar result
71:38 - fetch a sock
71:42 - so what this basically means is that
71:43 - this row is a variable and every time it
71:46 - will fetch the associated value means
71:49 - the
71:50 - this dollar result
71:52 - arrow fetch a soak means it will fetch
71:55 - the associated
71:56 - data okay then over here i'll create a
72:00 - variable called result
72:04 - array
72:06 - okay to create an area we just give a
72:08 - square brackets like this and then we
72:11 - add
72:12 - row to it okay so what this line
72:15 - basically does is creates a variable
72:17 - called creates an array of named result
72:20 - array and it adds road to it okay so
72:22 - this might seem weird at the first but
72:25 - once you start coding you will get used
72:28 - to it
72:29 - okay
72:30 - so once this is done
72:33 - we return the
72:36 - resultant now you might get confused
72:38 - that we created this variable or use
72:41 - this for the first time inside our inner
72:43 - parentheses but we are returning it in
72:46 - the outer parenthesis so it is like
72:48 - python the first time you use it it is
72:51 - declared and it can be used in entire
72:53 - function
72:55 - okay
72:56 - so
72:57 - this method is
72:59 - fetching list
73:01 - of data from the
73:05 - sql query
73:07 - result
73:09 - okay now next function is to fetch a
73:12 - single data means sometimes we select a
73:14 - specific and we know that there is gonna
73:17 - be only one row of data so in those
73:19 - cases we will use this
73:21 - function so it is called public
73:24 - function
73:27 - fetch row
73:29 - and then this also takes result
73:32 - and over here also we need to check if
73:34 - the number of rows is greater than 0 or
73:36 - not
73:37 - so
73:40 - result
73:41 - num rows
73:46 - okay sorry there is no parenthesis
73:49 - num rows is greater than zero and if it
73:52 - is
73:53 - then we simply return
73:57 - result
73:58 - fetch a sock
74:04 - because this time we know that only one
74:06 - data is going to be returned so we
74:08 - simply
74:09 - directly return it
74:12 - ladder tab over here format it
74:16 - now
74:17 - this method is fetching
74:22 - a single
74:24 - row of
74:25 - data
74:27 - from the
74:28 - sql
74:30 - query
74:32 - okay
74:32 - now the last function is going no this
74:35 - is not the last function but this is the
74:38 - function called escape value so what
74:40 - happens that sometimes when we are
74:42 - entering data to data when entering some
74:45 - value to database the value is not in
74:47 - the proper format okay so this function
74:50 - will
74:51 - prove that the func that the data that
74:54 - we are trying to
74:55 - save in the database is in proper format
74:58 - or not by proper format means it should
75:00 - be utf-8 utf-8 mb4 or something like
75:04 - that if it is not then this should
75:06 - automatically
75:07 - reject okay so public function i will
75:10 - call it
75:11 - escape value i don't call it it is
75:14 - widely called
75:16 - by this okay
75:17 - so it takes a value
75:22 - and then we simply write
75:24 - return
75:26 - and dollar this
75:28 - we refer to our connection again
75:30 - and then we see
75:34 - real escape
75:36 - string
75:38 - okay
75:39 - dollar
75:40 - value
75:42 - so this is sometime also used to remove
75:44 - the additional data that additional
75:47 - values that php address
75:49 - that php adds to the data like end of
75:52 - line character
75:54 - and other characters like that
75:56 - okay so this is gonna do that
76:03 - checks proper format
76:05 - of data
76:07 - okay so once this is done
76:10 - i think we just need to now close the
76:13 - database
76:15 - okay so once this is done the last
76:18 - function is to close the database so
76:20 - i'll call public function
76:24 - close connection
76:27 - and then over here we simply write
76:30 - this
76:33 - connection
76:35 - close
76:38 - and this
76:41 - closes the
76:44 - connection with
76:46 - sql which we created right over here
76:49 - okay so now let's format it
76:56 - okay so it is formatted
76:59 - now what i'm gonna do is i'm gonna
77:01 - create an instance of this database
77:03 - right over here
77:05 - call it database
77:07 - is equal to
77:09 - new database
77:13 - okay so this database
77:16 - is the name of the class okay so what i
77:19 - basically did was create a object called
77:21 - database with a small d of this class
77:24 - database with capital d so by this when
77:26 - i import this class in any other file i
77:30 - already have an instance of it and i can
77:32 - directly start using it so
77:36 - i save it and with this our database
77:39 - class is complete okay now we are gonna
77:42 - use only this instance to connect to run
77:45 - the sql queries get data from our
77:47 - database and everything okay so in the
77:50 - next video we shall actually start
77:52 - creating the classes and apis thank you
77:55 - so in this video we are going to
77:57 - continue prepare our backend so i have
78:00 - opened the design and kept it on me so
78:02 - that i can use it for future references
78:06 - i have fired up my mamp server and
78:09 - opened the phpmyadmin so you just need
78:11 - to write localhost and for its
78:15 - and slash and then a phpmyadmin okay so
78:18 - then your phpmyadmin will be available
78:21 - now let's open our code editor and start
78:23 - conti
78:24 - coding
78:25 - okay
78:27 - so in the previous video we completed
78:30 - our database helper class in this video
78:32 - we are gonna create a model class and by
78:35 - model class
78:37 - i mean
78:38 - the class that will actually store the
78:41 - values of a table that will be in our
78:43 - database so the first model class that
78:46 - we are going to create is of seller
78:49 - because
78:50 - seller will have the option to add
78:52 - products and then those products will be
78:55 - visible to the customer or the normal
78:57 - users of the app and then they can order
79:00 - it and all the other stuff that happens
79:03 - in an e-commerce application will happen
79:05 - there
79:06 - so let's continue
79:08 - so for that first i need to create a
79:10 - table and before that i need to create
79:13 - the database so i'll create a new
79:15 - database
79:17 - we'll call it
79:18 - better buys
79:20 - and that is what we call over here yes
79:23 - so the this name and this name should
79:25 - match only then this database file will
79:28 - be able to connect with this database
79:30 - instance
79:31 - so now this better bias is created now
79:34 - let's create the first table so the
79:36 - first table is gonna be sellers
79:41 - okay that will have the information of
79:42 - the seller
79:44 - okay now the first property will be id
79:48 - which is gonna be primary
79:51 - okay
79:52 - and it should be auto incrementing so i
79:54 - am hoping you all are familiar with the
79:57 - basic operations in sql if not you can
79:59 - go to w3school
80:02 - and have a look at it so w3 school is a
80:06 - very good content for
80:08 - beginners you can use it
80:11 - to get a hang of what we are doing okay
80:13 - so learn mysql you can go over here and
80:17 - have a look at all the things okay
80:20 - so now we first have the id then we will
80:23 - have name then we will have password
80:27 - okay after that
80:29 - image
80:30 - i need two more columns
80:33 - okay
80:35 - so after this i will have
80:37 - address okay because you can see in
80:40 - design
80:41 - we are gonna so that show the address of
80:44 - the
80:45 - seller and then a description about him
80:48 - okay so description also
80:52 - needs to be there okay so now id will be
80:55 - of type integer name however cannot be
80:58 - integer and it will be a very care of
81:00 - length 250. now you might be hoping why
81:03 - are we using varchar and not using
81:05 - varchar
81:06 - one oh sorry or it was varchar2 whatever
81:09 - it was but we are not using that because
81:12 - in my admin we actually don't have that
81:14 - you can see we only have varchar over
81:16 - here okay so that is the reason now
81:19 - password will also be a varchar of 100
81:23 - okay image will be varchar
81:26 - 100 address will be varchar of 250 okay
81:31 - because address can be
81:33 - long sometimes and then description
81:35 - description might be longer so it will
81:37 - be 500 and now the giving 252 name makes
81:41 - no sense i'll make this 100 as well
81:44 - no name should generally cross be more
81:46 - than 100 characters i guess okay so this
81:49 - is done now let's save this
81:53 - and we have our first table over here
81:56 - that is seller so you can see
81:58 - all the data will be listed here and we
82:00 - can see the structure of our table
82:03 - by going in the structure section so you
82:05 - see how useful this
82:07 - phpmyadmin is okay so now since we have
82:10 - the table let's go to php and create its
82:14 - model class
82:15 - okay so now i'll create another folder
82:17 - over here
82:19 - sorry not inside this
82:22 - but over here and i will call it models
82:27 - okay and then inside model the first
82:29 - class is gonna be seller dot php
82:33 - okay so now let's actually start coding
82:35 - you we know that we start any php code
82:38 - by writing this
82:40 - then after that what i want is to
82:43 - include my database file over here so
82:46 - that i can use it to interact with the
82:48 - database okay so for that we will follow
82:50 - some steps we write a ds and we get
82:54 - directory separator over here
82:59 - okay
83:03 - sorry separator
83:05 - we get the directory separator so it
83:07 - will give us a special character that is
83:09 - used to separate between directories
83:11 - then we will get the base directory
83:15 - so we are getting the base directory
83:17 - dynamically because
83:19 - right now we know that it is on
83:21 - localhost 888 but later it will be
83:24 - hosted somewhere else okay so it is
83:27 - always useful to get the base directory
83:29 - dynamically
83:30 - and to do so we write
83:34 - a real path
83:36 - so this is a
83:38 - function in php okay which gives us the
83:41 - path
83:42 - then the directory name so
83:44 - their name
83:46 - okay and then
83:49 - we write double underscore
83:51 - i'm sorry
83:53 - double underscore file
83:57 - okay then
83:58 - separated
84:00 - by a directory separator
84:03 - and then
84:05 - two dots which means that to go
84:08 - one folder up
84:10 - okay
84:11 - these are basic unix commands
84:15 - dot
84:16 - directory separator okay so we end it to
84:19 - the directory separator so what it
84:21 - basically does is it
84:23 - gets the location over here then we have
84:26 - a directory separator okay and then
84:29 - after that there are two dots which in
84:31 - linux or you or unix system all together
84:35 - means to go one folder up so the folder
84:38 - above model is better wise okay so now
84:40 - we have the location of over here the
84:43 - base directory stores the location of
84:45 - our projects base which is better buys
84:47 - folder okay so i hope you get the gist
84:52 - now after that i'll write require once
84:54 - so require once is again a keyword in
84:57 - php it is used to load a php file
85:01 - in the file which is which it is being
85:03 - called in okay so over here i'll first
85:06 - access my base dir okay so to get so to
85:10 - get to the base
85:12 - base of the project okay then after that
85:15 - we have the folder called includes okay
85:17 - this folder includes then after that we
85:20 - want the directory separator okay
85:23 - because without that we won't be able to
85:25 - enter the includes file now once we add
85:28 - the directory separator we did enter the
85:31 - base file
85:32 - i uh includes file i'm sorry i forgot
85:35 - the dollar over here and then inside
85:38 - this we have
85:40 - database dot php
85:43 - okay so uh what this means is that we
85:46 - were at base directory which is better
85:48 - buys okay over here there was already a
85:51 - directory separator that means we were
85:53 - inside better wise then we
85:56 - looked for includes folder which is over
85:58 - here then we again added a directory
86:00 - separator which means we went inside the
86:02 - includes folder
86:03 - and then we called the file database dot
86:06 - php so with this in the file seller.php
86:09 - we have database dot php
86:11 - okay so now let's actually start
86:13 - creating the class so for that
86:16 - we use the keyword class
86:18 - seller okay so we need to document this
86:21 - as well
86:25 - including
86:30 - database okay so class is seller
86:34 - now after that we are gonna have some
86:35 - variables first the table name okay so
86:38 - let's make the
86:40 - variable private where we store the
86:42 - table name because the table name will
86:44 - not be accessed anywhere outside this
86:46 - class
86:48 - okay so private dollar table
86:52 - and then the table name over here is
86:55 - sellers so
86:57 - sellers
86:58 - okay then we create all the data types
87:00 - that we did
87:02 - public id
87:04 - then we have name password image address
87:08 - description okay
87:11 - name
87:13 - image
87:15 - okay sorry after name we have password
87:20 - password then
87:22 - image
87:24 - then address and description
87:31 - okay then after this the next thing is
87:34 - to create a constructor okay so in the
87:36 - last video we saw how to create a
87:38 - constructor
87:40 - we write public
87:43 - function then to underscore
87:45 - construct
87:48 - and we don't need to have anything
87:50 - inside this for now but creating a
87:52 - constructor is compulsory in php 5.8
87:55 - okay now after that we will create a
87:58 - validate params function which we will
88:00 - use to validate the parameters okay that
88:03 - means that this function is going to be
88:05 - used when we store some value in the
88:08 - data types over here to check if the
88:10 - value actually exists or not okay
88:15 - so public function
88:19 - validate params
88:22 - and then it will take a value
88:25 - as a parameter
88:27 - and if it is
88:29 - not tempting
88:31 - okay
88:33 - value
88:36 - we return
88:38 - true else we return
88:42 - false
88:43 - okay so this is basically a helper
88:45 - function okay so
88:47 - it one way is to write it like this an
88:50 - easier way would be
88:52 - to simply write
88:54 - return
88:57 - not
88:58 - empty
89:00 - and the value
89:02 - so what this will do is that if this is
89:04 - true it returns true which we are
89:06 - actually doing over here and if it is
89:08 - false it will return false
89:12 - okay
89:13 - so now let's
89:15 - i had some documentation
89:17 - okay so
89:20 - validating of
89:21 - 12
89:22 - amps exist or not
89:25 - okay now the next function is to
89:27 - actually save data in the database
89:31 - saving
89:33 - new data in database
89:40 - okay so for that we write public
89:43 - function
89:45 - register
89:49 - seller
89:51 - okay the name makes sense
89:54 - then we create a variable of database
89:57 - okay
90:00 - dollar database
90:03 - okay so we have already included
90:05 - database we are creating a variable of
90:07 - that over here
90:10 - okay now we are gonna
90:12 - manage this data
90:14 - data data members okay
90:17 - so i'll
90:18 - write one dollar this
90:21 - id
90:23 - is equal to trim
90:26 - html special cash
90:30 - strip tags
90:33 - dollar this
90:35 - id
90:37 - okay so i'll explain what this line does
90:40 - so one by one so first we have strip
90:42 - tags so what it basically does is it
90:44 - will remove all the tags that we have in
90:46 - html xml or php so that means that if
90:51 - this variable has some tags on it this
90:54 - will remove and give the value without
90:56 - tags
90:58 - okay then after that we have html
91:00 - special cash so what it does is it
91:03 - converts
91:04 - variables like this
91:06 - uh greater than or less than or
91:10 - slash or something like that to html
91:13 - entities okay so that it is able to be
91:16 - saved in the database and then we have
91:18 - trim so what trim does is it removes
91:21 - white spaces and other identified items
91:24 - from both the sides okay so we are gonna
91:27 - do this for this for all the five
91:30 - we don't need id here because we will
91:32 - create a new database because we'll
91:34 - create a new call row and then it will
91:37 - automatically be assigned
91:40 - id because id is primary and it is auto
91:43 - incrementing okay so this is gonna be
91:45 - name
91:48 - after name we have
91:50 - other four parameters
91:55 - so after name we have
91:57 - password
92:03 - after password there's image
92:08 - after image there's address
92:14 - and after address there's description
92:20 - okay so now once we have checked all the
92:22 - values we are going to store it in the
92:24 - database and for that we need to
92:26 - write a sql query so here we write
92:29 - insert
92:31 - into
92:32 - then dollar this
92:35 - table and then inside a bracket the key
92:38 - names that are key password
92:41 - image
92:44 - address
92:45 - description
92:48 - then values means we want
92:51 - to assign
92:53 - the values that we write inside these
92:55 - parentheses to these key values okay in
92:58 - the same order okay so now i want to
93:01 - break the stress so now the value should
93:03 - be inside quotes so i'll give that and
93:06 - then i want to break the string and add
93:08 - some php code over there okay so what
93:11 - i'm gonna do is i'm gonna add two double
93:14 - quotes
93:15 - okay so what it does is that the first
93:18 - quote ends this
93:20 - starting code and the second code starts
93:23 - this ending code and in between this i
93:26 - can add my php code
93:28 - okay so over here i am gonna write
93:31 - database
93:35 - escape value
93:38 - i'm sorry caps lock was on
93:45 - escape value
93:48 - dollar this
93:51 - name
93:52 - okay so in the previous video you have
93:55 - seen that we created a helper class
93:58 - called escape value to check if the
94:01 - string is
94:02 - uh means the string is justified to be
94:05 - stored in the database or not okay then
94:08 - we give a comma copy this
94:10 - for four times and then simply change
94:12 - the value over here
94:17 - image
94:20 - address
94:22 - and the
94:23 - description
94:24 - now since this is the last one we don't
94:26 - need a comma over here
94:29 - okay so this is the sql query and what
94:32 - it basically does is it inserts a row
94:35 - into this table
94:37 - while assigning
94:38 - [Music]
94:39 - these key values
94:41 - these
94:43 - means that these keys
94:45 - these values so i hope you understand
94:48 - this is not so tough but still if you
94:50 - are having any problem you can look into
94:52 - w3schools
94:54 - okay now we have the sql query we need
94:57 - to now run it okay so now since running
95:00 - it is again related to database we will
95:03 - need
95:03 - database over here okay so first let's
95:06 - create a
95:07 - variable to store it
95:09 - seller
95:11 - saved okay so now we write a database
95:16 - query
95:17 - okay so we had a function called
95:21 - query over here
95:22 - okay that takes an sql and executes it
95:25 - okay so in this query we are gonna give
95:28 - this sql
95:30 - okay now
95:32 - if it is if
95:34 - [Music]
95:36 - if the
95:38 - i'm sorry if the seller is saved we
95:42 - return
95:45 - database
95:48 - last
95:49 - insert
95:51 - id okay so last insert id basically
95:54 - means that the id given to the last
95:56 - column that was inserted and since this
95:58 - is the last column that was inserted it
96:01 - will return the id assigned to that
96:04 - column automatically by sql because it
96:06 - is auto incrementing okay so you will
96:09 - understand later why i am
96:13 - taking this
96:14 - so
96:16 - let's let's move on for now
96:18 - else
96:20 - false okay so with this this function is
96:24 - done in this function what we are
96:26 - basically doing is we are creating a
96:28 - global instance of database we are
96:31 - refining all our
96:34 - data members then we are creating an sql
96:37 - query that will
96:39 - i'm sorry
96:40 - i am we are creating an sql query that
96:43 - will store all these values okay and
96:45 - then we are finally executing it
96:47 - checking if it has some error if it has
96:49 - error we return false okay there is a
96:52 - return statement and if it has no error
96:54 - then we
96:55 - return the last insert id
96:58 - okay
96:59 - so i hope you understand
97:02 - so with this we have
97:05 - made the
97:06 - model class now let's create a variable
97:08 - of it
97:09 - or a
97:11 - more appropriate term would be an object
97:13 - like we created over here for
97:15 - our database class okay so i'm gonna
97:18 - write
97:20 - seller
97:22 - is equal to new seller
97:25 - okay so now once this is created in the
97:29 - next video we shall actually
97:31 - create an api means we will use this
97:34 - seller class to create an api and save
97:37 - the data in our database okay because
97:39 - right now we just have a function we
97:41 - don't know how to call it and
97:44 - all the other stuffs related to that
97:46 - okay so
97:48 - so in this video we are gonna make the
97:51 - register apf that means that we will
97:53 - make an api for a seller to register on
97:56 - the app
97:57 - okay so let's get started i'll create a
98:00 - new folder called api
98:02 - okay then inside this i'll create
98:04 - another folder called seller
98:07 - okay and then inside this there will be
98:09 - a new file called
98:12 - register.php
98:14 - okay
98:15 - so now let's start writing our
98:18 - api so for that you know to start we
98:21 - first write php any php
98:23 - file starts with this
98:26 - okay then the next thing that we have is
98:28 - a header okay so first let me write all
98:32 - then i'll explain each one of them one
98:35 - by one okay so
98:37 - first one is
98:40 - access
98:42 - control
98:44 - sorry
98:46 - allow
98:48 - origin
98:49 - and this is type star
98:53 - okay then the next one is
98:56 - content type
99:01 - and this is gonna be
99:04 - application
99:05 - dash
99:06 - json
99:10 - okay then the next
99:13 - thing is
99:16 - access
99:18 - control
99:21 - allow
99:23 - method
99:25 - and this is gonna be
99:27 - post
99:31 - and the last one is access control allow
99:36 - headers
99:38 - and this is gonna be origin
99:44 - content
99:45 - type
99:47 - and accept
99:50 - okay so let's go through each one of
99:52 - them one by one first there is this
99:54 - keyword header so what is the function
99:57 - of header so it controls what response
100:00 - is sent to the client header controls
100:03 - what will be the response sent to the
100:06 - client okay then inside this the first
100:09 - header is access control
100:11 - allow origin and that is star that means
100:14 - to check for the origin which all
100:16 - origins are allowed okay so by origin i
100:19 - mean the starting part of the domain
100:22 - like for now we have localhost colon and
100:25 - 48 so that is our origin okay and after
100:28 - that whatever we add those are the child
100:31 - parts of the domain okay so over here by
100:33 - writing star it means that we allow all
100:36 - all the origins to send request to
100:39 - this file
100:40 - okay so over here if i write
100:43 - localhost and then for it then only this
100:46 - domain can send request to me okay and
100:49 - any other domain
100:51 - means not me but through
100:53 - but to this file and any other domain
100:55 - then localhost
100:57 - colon 48 will not be able to send
101:00 - request to this file
101:02 - okay now after that there is content
101:05 - type and that is application json so it
101:09 - means that the
101:11 - content will be of the format json okay
101:14 - so the response will be in the json
101:16 - format okay now after that we have
101:19 - access control allow method post so it
101:22 - decides so over here it is defined which
101:25 - type of request will it allow there are
101:28 - many types of request but
101:30 - there are four majorly used that is get
101:34 - post
101:35 - delete and put okay so over here we are
101:38 - gonna use post we will see
101:40 - all the other types of requests and we
101:43 - will see
101:44 - and we will also learn when and how they
101:46 - are used
101:47 - okay and then we have access control
101:50 - allow headers and that is origin content
101:52 - type accept so you don't need to worry
101:55 - about this line this is used to
101:59 - handle
102:01 - pre-flight
102:03 - request
102:05 - okay so this is used
102:07 - to handle pre-flight request and by ple
102:09 - pre-flight request i mean that this is
102:12 - the small request sent before the actual
102:15 - request okay so in an api first there is
102:18 - a small request sent that is the
102:20 - preflight request
102:22 - and then its response is handled by
102:26 - this header
102:27 - and after that the actual request comes
102:31 - okay so i hope you understand the use of
102:33 - all the all the headers
102:36 - now let's proceed
102:38 - so now we need to include this seller
102:40 - class in our
102:42 - register.php
102:44 - so we'll write include once
102:47 - okay so now over here you might have
102:49 - seen i had written require ones now over
102:52 - here it is include ones so they have no
102:55 - difference absolutely no difference
102:59 - except when it comes about error
103:01 - handling okay so you can see a search on
103:03 - google what is the difference between
103:05 - include and
103:06 - require in php you will get the same
103:09 - answer that there is no difference there
103:11 - is only some difference when there is an
103:13 - error
103:14 - when error occurs because of this
103:16 - include or required okay so now include
103:20 - once
103:21 - this
103:22 - folder that is the
103:25 - seller then again
103:26 - api folder and i'm out of it so now i am
103:29 - in better buys folder and from there
103:32 - i'll go to models folder
103:35 - and from there to
103:36 - seller dot p h p
103:39 - now this needs to be
103:41 - be inside
103:43 - quotes
103:45 - okay so now you might have seen that
103:48 - over here i was using a directory
103:50 - separator and over here i am using
103:53 - this referencing method so we can use
103:56 - both but it is suggested you always
103:58 - stick to this method that is dynamically
104:01 - creating the
104:03 - directory and stuff
104:04 - okay
104:06 - so after this now uh
104:09 - over here we have seen that only post
104:11 - method is allowed for this api okay so
104:14 - now let's do a check that if the method
104:17 - is post or not okay so for that i'll
104:20 - write if
104:22 - dollar server so this is a reserved
104:26 - array that we have in pi uh php it store
104:29 - all all the details about the server and
104:32 - over here only we have a
104:35 - data type
104:36 - data member called request
104:40 - method
104:43 - okay so if the request to method is of
104:47 - type post
104:49 - then it is all right and if it is not
104:53 - then we shall we should send an error so
104:55 - over here also you can notice that is
104:57 - similar to javascript we can use three
105:00 - equal to's over here now let's send the
105:02 - error first and then we can
105:04 - add the stuff over here so for handling
105:07 - the error we write die
105:11 - header
105:14 - http
105:17 - dash 1.1
105:21 - 405
105:24 - request
105:25 - method
105:27 - not
105:28 - allowed so what this means is that we
105:32 - add this header that is this will be the
105:34 - response this is the response code which
105:37 - is five four zero five which basically
105:39 - means request method is not allowed but
105:41 - we added a string as well and then we
105:44 - have this die over here so
105:47 - die basically stops the execution of the
105:49 - code
105:51 - when the php compiler executes die it
105:54 - doesn't go to the next line it ends the
105:55 - program then and there okay so this will
105:58 - be the case when the request is not of
106:00 - the type post but suppose if it is of
106:03 - type post then we shall
106:06 - take all the data and then store it to
106:08 - our database so let's do
106:10 - that okay so firstly over here in
106:15 - seller you can see that we need five
106:17 - things name password
106:20 - image
106:21 - address and a description okay so there
106:24 - is a bug
106:28 - and here as well i don't know how
106:34 - address description address description
106:38 - address description
106:40 - okay
106:42 - so we need a name
106:44 - a password image address and description
106:47 - okay so let's check for that so we write
106:50 - if
106:52 - seller dollar seller so this seller is
106:56 - the object that we created over here
107:03 - okay so this is the object
107:05 - and then we call the method
107:09 - validate
107:14 - params
107:16 - okay which is nothing but
107:19 - this method over here validate
107:21 - okay so over here also the spelling is
107:23 - wrong
107:27 - validate
107:28 - params
107:29 - and then over here we write
107:33 - post so post is another reserved array
107:36 - that php has and it has all the data
107:39 - sent
107:40 - via the post request okay so post
107:44 - and then we
107:46 - write the keyword that is name
107:48 - so if
107:50 - the post method has name
107:52 - okay then we need to assign it to the
107:56 - variable that we have in seller class
107:58 - that is
107:59 - name
108:00 - okay so we do this by writing
108:02 - seller
108:05 - name
108:08 - dollar
108:09 - post
108:12 - name
108:14 - okay and if name is not there since name
108:17 - is a necessary
108:18 - uh
108:20 - option means it is required for the api
108:23 - to have the value for name so if it is
108:26 - not present we will return an error so
108:29 - for that we write echo echo is used for
108:32 - printing anything
108:34 - in python or in a php not python i'm
108:37 - extremely sorry echo then we have json
108:40 - and code
108:42 - okay so this is used to encode an array
108:44 - to just jason that being said it takes
108:47 - an array so for that we create a new
108:49 - array we create an array by using the
108:51 - keyword array okay and then we add key
108:54 - value key uh key value pairs to it
108:57 - okay so i'm gonna add a
109:00 - success
109:03 - and then we don't give colons over here
109:05 - we use the
109:07 - this arrow that is equal to and angle
109:09 - bracket
109:11 - okay and then we i'll give a
109:14 - message
109:18 - name is
109:22 - required
109:24 - okay and then die so that it stops
109:27 - executing here only okay so what this is
109:30 - gonna do is if the
109:32 - if the request has a
109:34 - key value pair of name then it is gonna
109:37 - save that value in our seller object
109:40 - otherwise it is gonna send an error
109:42 - okay
109:45 - now the same is gonna be done for
109:47 - password
109:52 - okay so over here it is
109:54 - password
109:58 - password password
110:01 - password with a capital p
110:03 - okay
110:06 - so name password
110:12 - now we have name we have password
110:15 - image address and description so i think
110:18 - we also need email or mobile number or
110:22 - we can have both okay so that it is
110:24 - easier for
110:26 - uh
110:27 - the seller to login okay because we
110:30 - can't basically log in just with
110:32 - password we can't create that type of uh
110:34 - system that is no that can be done but
110:37 - that is not
110:39 - efficient okay so i'll add another
110:41 - property that is email and that i'll add
110:44 - after name
110:46 - okay
110:49 - and that is gonna be
110:50 - email it is gonna be of type of varcat
110:54 - 100
110:56 - save
110:58 - okay so now if it is added here so we
111:01 - need to add it here as well after name
111:03 - we are gonna have public
111:06 - email
111:10 - okay now after name
111:15 - this is gonna be
111:17 - email after name here it will be email
111:22 - after name here it will be
111:26 - email so
111:28 - it is over here
111:30 - here
111:31 - here
111:33 - and in the data type okay so
111:35 - email data email
111:38 - data member is added
111:41 - okay so now let's
111:44 - take that
111:46 - from the post request so over here it is
111:49 - going to be email
111:50 - email
111:52 - email
111:53 - email with a capital
111:55 - e
111:56 - so email is required okay
111:59 - so now name is name is required email is
112:01 - required password is required next we
112:04 - have a
112:05 - image
112:06 - okay so to so image is a file so the
112:09 - code is little bit different for it
112:12 - okay so it goes like first we create a
112:14 - folder so i'm gonna call it seller
112:18 - images folder
112:20 - okay and that is gonna be
112:25 - assets i'm gonna create a new folder
112:26 - called assets
112:28 - and then there will be another folder a
112:31 - folder called seller images
112:35 - okay so let's create a folder
112:40 - not over here but over here
112:44 - okay
112:47 - bring it out
112:49 - move
112:51 - so now inside assets i am gonna have a
112:53 - new folder called
112:56 - seller images okay
113:00 - so now this asset is gonna contain
113:02 - images which i don't want to add in my
113:05 - version control so i'm gonna create a
113:07 - new file and call it dot get
113:11 - ignore okay so this is a specific type
113:14 - of file that our version control that is
113:16 - get understand over here we write all
113:19 - the files that we want to ignore while
113:21 - adding the project to version control so
113:24 - over here in that case it is assets
113:27 - so assets with a dash means that this
113:29 - folder including all the things that are
113:31 - inside this will not be added in version
113:34 - control and you can see that its color
113:36 - has become a little bit dim that is
113:38 - because it is added in get techno get
113:40 - ignore
113:41 - and it is not a part of the version
113:43 - control
113:44 - okay so i hope you get my point
113:46 - so now we have created the folder
113:49 - known means we have decided with the
113:51 - name not created the folder now we check
113:54 - if the folder exists or not so
113:58 - is
113:59 - there
113:59 - okay so that means it checks if it is a
114:02 - directory or not
114:05 - seller images folder
114:06 - so if it is not what we are gonna do is
114:09 - we are gonna make the directory
114:13 - seller images folder
114:21 - okay now we are gonna check that our
114:23 - post request has that file or not so for
114:26 - that another if and over here we write
114:29 - is set
114:30 - means it there is a set
114:34 - that exists
114:35 - inside the error that we give inside
114:37 - this parentheses okay so now there is
114:40 - another array reserved by php that
114:42 - stores all the files sent in a request
114:45 - so that is called files
114:47 - okay so we are gonna check if it has
114:50 - image okay so what it basically does is
114:52 - it checks if this file array has a
114:56 - key named image or not
114:58 - okay
114:59 - so if it doesn't have image we
115:02 - don't do anything because image is not
115:04 - compulsory
115:05 - okay but if it does have then we need to
115:08 - save it so let's write code for saving
115:10 - the image okay so let's get the file
115:13 - name
115:16 - okay and that is dollar files
115:20 - image
115:22 - name
115:24 - then we get the files
115:26 - temporary uh
115:28 - address okay so we write file
115:32 - dmp
115:34 - and that is dollar
115:36 - files
115:40 - image
115:43 - temp name so this will send the entire
115:45 - address along with the name of the
115:48 - file
116:08 - okay so then we get the extension of
116:10 - this file because we are not sure if it
116:12 - is a png or a jpeg
116:15 - so for that we write
116:17 - extension
116:19 - okay
116:20 - and that is
116:21 - end
116:23 - of explode
116:27 - dot
116:29 - com dollar file name
116:32 - so what it does is it explodes file name
116:35 - based on this dot that means it will
116:37 - split the name based on this dot and
116:41 - return an array okay so if the it splits
116:44 - uh based on the dot it is understandable
116:47 - that the last value is gonna be the
116:49 - extension and that is what we get if we
116:52 - use end okay so this end function
116:54 - returns the last value of any array
116:57 - inside it so
116:59 - by that we get the extension over here
117:01 - now let's create the new file name
117:07 - so the new file name is gonna be seller
117:11 - email okay because emails are unique we
117:14 - need that
117:16 - okay sellers email then we do string
117:19 - concatenation
117:24 - profile
117:29 - and then we add the extension
117:35 - okay now we have the new file name now
117:37 - let's finally
117:39 - save it so for that we have a function
117:41 - in
117:42 - php called move upload file
117:45 - and then over here we use file tmp
117:50 - command
117:52 - seller images folder
117:56 - not means we go inside that folder
117:59 - by this dash and then we use the
118:02 - new file name
118:04 - okay so once this is done
118:07 - we will add the address to the data type
118:10 - so data member so that we can save it in
118:12 - our database and using the address we
118:14 - can display it in our apps
118:17 - so
118:18 - seller image is gonna be
118:23 - seller
118:25 - images
118:30 - new file name
118:32 - okay so this is done
118:34 - our image will be stored
118:37 - now after image
118:40 - we have address and description so we
118:42 - need to take that as well so i'll again
118:45 - copy this
118:49 - paste it
118:52 - and then the first one is address
118:57 - so address
118:58 - address
119:00 - address
119:01 - address with a capital a
119:03 - is required
119:06 - okay and description is also required
119:16 - description with a capital d
119:18 - okay so if there is an error in this api
119:21 - these messages will be displayed
119:23 - accordingly so we need to keep in mind
119:26 - what is the message and the message has
119:28 - no grammatical errors
119:30 - okay so now at this point if the code is
119:34 - running that means it has got all the
119:38 - data members value now let's finally
119:40 - save it so for that we write
119:42 - if dollar id that will be the last
119:46 - insert id
119:48 - okay last insert id that we are saving
119:50 - that we are returning here
119:53 - if this method is successfully executed
119:55 - so for that we write
120:00 - seller
120:02 - register seller
120:04 - okay so if this method is successfully
120:06 - executed it returns an id okay that will
120:09 - be anything if it not then it returns
120:11 - false and then this if condition will
120:13 - not be executed
120:17 - so if it is executed then we give the
120:21 - response as
120:22 - echo
120:24 - okay we don't need to write all this i
120:27 - can simply copy it
120:36 - okay the response is gonna be one
120:39 - okay we are uh
120:41 - keeping away our means assembling our
120:43 - format that if success means zero there
120:46 - is an error and we should display this
120:48 - message in our phone and if the success
120:51 - is one that means the
120:53 - api has executed successfully and if you
120:56 - want to display this message
120:58 - display or do the stuff
121:00 - after that okay
121:03 - so that is
121:04 - over here it is going to be
121:07 - seller
121:09 - registered
121:13 - okay
121:14 - and if not i'm sorry
121:19 - and if not then first i need to
121:23 - set the response code http response code
121:26 - means
121:27 - the code that it is gonna send in
121:29 - response that is 500 okay
121:38 - now over here it is again gonna be zero
121:41 - and it will be
121:44 - internal
121:46 - server error okay
121:48 - which is basically what 500 stands for
121:52 - okay so with this our api is complete
121:56 - so in this video we are gonna continue
121:58 - with our php back end okay so i have the
122:02 - design already open
122:04 - okay i'll simply fire up my mamp server
122:08 - so once it has started we'll open our
122:11 - code editor and continue with the coding
122:14 - okay so i already have better buys open
122:16 - over here now in the previous video we
122:21 - have completed the code for our register
122:24 - api now it's time to run it okay so for
122:29 - running it
122:30 - we
122:32 - application called postman okay so if
122:35 - you don't have it you can simply
122:37 - go to this link postman.com
122:40 - and download it and even if you don't
122:42 - want to download it that's all right
122:44 - because you can use it in the browser
122:46 - itself
122:47 - okay
122:48 - but i have it downloaded over here with
122:51 - me so i'll open it now i'll create a new
122:53 - request
122:55 - okay so over here this type will be post
122:59 - because you can see in the code editor
123:01 - we are allowing only post requests
123:05 - okay so
123:06 - i've changed it to post
123:08 - now i need to write the url so first it
123:11 - is gonna be
123:13 - local
123:14 - host
123:15 - colon
123:17 - it'll tilt it because as i've already
123:19 - told
123:21 - mamp runs on localhost and for its okay
123:25 - then we write the name of the folder
123:27 - that is better
123:29 - buys
123:31 - okay and then after better buys we have
123:33 - api
123:34 - then seller and then register.php
123:37 - so we write
123:39 - api
123:40 - then seller then
123:43 - register dot php
123:46 - okay so now if i send a request
123:52 - okay so it is giving me internal server
123:54 - error so that means there is some error
123:56 - in the code
123:58 - okay so
124:02 - i don't think it is over here let's take
124:04 - our model class
124:10 - so i don't think it is here either now
124:12 - let's check our database class okay so i
124:15 - can see it over here only it
124:17 - i have a typing error so it will be
124:20 - localhost
124:21 - okay then it should be public function
124:24 - constructor not just public constructor
124:26 - i am extremely sorry
124:28 - okay and after that this shouldn't be a
124:30 - comma but a dot
124:32 - because uh string concatenation in php
124:35 - happens with a
124:37 - dot same over here
124:39 - okay
124:40 - so now if i try to format it
124:43 - yes it has formatted as php should be
124:47 - okay so
124:49 - this is fine now let's save this okay
124:52 - then again we go to our postman
124:55 - send a request
124:58 - and then it is saying name is required
125:01 - okay so
125:03 - that is exactly as we wanted it to be
125:06 - okay so first it checked if the server
125:08 - method is post or not which is true so
125:11 - we can
125:12 - change it to get and see what is the
125:14 - error that we get so we get 405 request
125:18 - method not allowed which is exactly the
125:20 - same as we write over here
125:22 - 405 request method not allowed
125:25 - so i'll change it back to post
125:28 - okay and then it is telling name is
125:31 - required so this error occurs when name
125:34 - is not there okay so
125:37 - let's give it a name so in a post
125:39 - request we don't uh give values in
125:42 - params but in body
125:43 - and in form data okay
125:46 - so over here
125:48 - i'll give the key as a name
125:50 - okay now keep in mind this uh
125:53 - spelling and this spelling should be
125:56 - exactly the same
125:57 - okay so the name of seller is gonna be
126:01 - rishabh kumar that is my name
126:04 - okay then after that i also need to give
126:06 - an email
126:09 - so email and email is gonna be
126:12 - rishov at the rate
126:14 - gmail.com
126:16 - okay
126:17 - then after that
126:19 - password
126:22 - so i'll give a simple password for now
126:26 - although it is not suggested to use such
126:29 - type of passwords anywhere okay then
126:31 - after that i need to give a seller image
126:34 - and even if i don't it should work fine
126:36 - okay so i'll skip this for the moment
126:40 - okay
126:41 - so for that i'll
126:43 - add the name and then unselect this so
126:45 - that later i can add a
126:47 - image but if not also then it is not an
126:51 - issue
126:52 - okay
126:53 - then after that we need to give an
126:55 - address so the address is
126:58 - so the address is gonna be the same as i
127:01 - have written in sigma
127:04 - because that is a legit address
127:08 - so i'm gonna copy it
127:11 - go to postman and then
127:13 - paste it
127:16 - okay then after that we have
127:19 - i guess we have description okay so we
127:21 - have description
127:26 - we write the description
127:28 - and for description again
127:31 - we'll use lorem ipsum
127:36 - okay now after description it should
127:39 - save okay so let's see if that is the
127:42 - case or not
127:44 - so i'll click on send and it is again
127:47 - giving me an internal server error
127:50 - okay so let's see what is the error now
128:01 - okay so the error is
128:04 - this is the error message that means
128:07 - this function is causing errors so let's
128:09 - get inside the seller
128:11 - okay and then inside seller this is the
128:14 - error because i am using a function last
128:16 - insert id and it is not in my database
128:18 - class so
128:20 - it is giving an error okay so for now
128:22 - i'll just
128:23 - make it true
128:25 - okay
128:26 - just true
128:28 - later we'll add
128:30 - the last insert id again okay
128:33 - and maybe even not if that is not
128:35 - required in some cases it is so it is
128:37 - suggested to always use that okay so now
128:40 - it is done now let's send
128:44 - and it is still giving an error let's
128:46 - see what is it
128:49 - okay so let's go to database
128:52 - and and we need to add a password over
128:55 - here i'm extremely sorry it was not
128:57 - needed in xampp so i forgot that in mamp
129:00 - it is required you can see over here the
129:03 - password should be root okay so once
129:06 - this is done
129:08 - i think now it should work
129:10 - okay so i'll open it again so i'll open
129:13 - postman
129:15 - yeah and click on send and it gives us a
129:18 - message seller is registered okay and
129:21 - now if we go to our database
129:25 - and inside sellers we can see our seller
129:28 - the seller name is rishabh kumar email
129:30 - password address and description
129:34 - okay so now you can see that the
129:37 - password is quality which is visible to
129:40 - everyone who has access to your database
129:43 - and can read the password then login
129:46 - with login as this user and then
129:50 - change things okay so this is not a
129:52 - suitable way to
129:54 - store the data means in which the
129:56 - password is human readable okay so to
129:59 - avoid that we are gonna hash it and to
130:02 - hash it we are gonna use bcrypt okay so
130:05 - bcrypt is a file that means bcrypt is
130:08 - md5 hashing okay you can read more about
130:11 - it by simply typing md5 or bankrupt in
130:14 - google and get to know about it it is a
130:16 - type of hashing which will convert a
130:19 - human readable sentence or keys to
130:21 - something and means a lot of number so
130:24 - that human
130:26 - cannot understand that and decoding it
130:28 - back to
130:29 - [Music]
130:30 - the human readable uh
130:32 - human readable string will take lots and
130:35 - lots of time okay so for so let's
130:38 - implement this in our project so what
130:40 - i'm gonna do is
130:41 - open this
130:44 - dot php
130:46 - okay copy the entire code
130:52 - and then inside our includes folder i'm
130:55 - gonna create a new file called
130:59 - bcrypt.php okay
131:01 - and inside this i'm gonna paste it
131:04 - okay
131:05 - then save it close it and now we go to
131:08 - our seller.php
131:10 - along with the database we include the
131:14 - bcrypt
131:16 - okay over here the name changes to
131:19 - bcrypt
131:24 - now let's see how to hash it okay
131:29 - so
131:30 - over here you can see we can hash our
131:33 - password simply by writing bcrypt dot
131:35 - hash password
131:37 - okay so i'll copy it and where we are
131:39 - storing the password in our database
131:42 - which is
131:44 - over here i am gonna write
131:50 - over here i'm gonna paste
131:52 - bcrypt.hash password and
131:55 - this
131:56 - password
131:58 - okay so now let's save this
132:00 - and let's try to send a request again
132:04 - okay so now if i send it
132:07 - okay it is giving me an error
132:10 - so i think this is
132:12 - because of okay so
132:14 - this was the error i'm sorry
132:18 - now let's see
132:23 - so the seller is registered
132:25 - now if we go and open our database okay
132:29 - we need to refresh it
132:31 - the password here is something like this
132:33 - this is the
132:35 - hashed version of qwerty only because
132:37 - you can see in our request the password
132:39 - is still qwerty but it is in database
132:42 - stored in such a manner that
132:44 - normal human being cannot understand
132:46 - what this actually means okay so in this
132:49 - way your data becomes more it becomes
132:52 - more secure
132:53 - okay and
132:54 - that is a plus point
132:56 - okay so with this we created a api to
133:00 - register the users okay but there is
133:02 - still one flaw and the flaw is that
133:05 - there are
133:06 - user multiple users with the same email
133:09 - which is not the ideal case
133:12 - okay and the next flaw is that we have
133:15 - this extension dot
133:17 - php which we don't want okay we simply
133:19 - want to write the seller register and
133:21 - that's it not the dot php
133:24 - okay so we will see how to fix both of
133:27 - these in the next video thank you
133:30 - so in this video we are gonna fix the
133:32 - bugs that we discussed in the previous
133:34 - video so the first one that we are going
133:36 - to tackle is check if the email is
133:38 - unique or not so for that we will go in
133:41 - the seller model class
133:43 - okay over here i will create a new
133:45 - function okay i can remove this
133:52 - i'll create a new function
133:55 - to check if
133:57 - email is
134:00 - unique
134:01 - or not okay so
134:04 - public
134:06 - function
134:10 - check unique email
134:14 - okay then there will be global
134:17 - dollar database
134:19 - okay then we are we need to check the
134:22 - email
134:24 - so for that we need this okay we need to
134:27 - trim our email means make the email data
134:31 - ready for interacting with database
134:34 - okay
134:34 - i have already explained the meaning of
134:37 - these three functions in one of the
134:39 - earlier videos okay so now let's write
134:42 - our sql code
134:43 - the sql code is gonna select all the
134:47 - uh rows which have email as the email
134:50 - entered in the api so for that i'll
134:52 - write select
134:55 - id
134:57 - from dollar this
135:00 - table
135:01 - where
135:03 - email is equal to then single
135:06 - quotes
135:07 - double quotes then two dot
135:10 - and then simply this email
135:15 - okay i'll paste it over here
135:18 - now let's run this sql command so for
135:20 - that
135:22 - result is equal to
135:25 - database
135:27 - query
135:31 - sql
135:32 - okay so now we will get the result now
135:35 - let's get the row so
135:38 - so let's get the values that this result
135:41 - has
135:42 - okay so for that
135:44 - i'll write
135:46 - user id
135:49 - okay
135:52 - so means the because since we are
135:55 - extracting only the id i'm naming the
135:57 - variable user id that makes the most
135:59 - sense
136:00 - then database
136:02 - and then inside our database class we
136:04 - had a function to get only one row
136:07 - uh getting only one row and that is
136:08 - called fetch row okay so we are going to
136:11 - use that
136:13 - database fetch row
136:15 - and inside this we will give our result
136:18 - okay so now if there is any
136:22 - uh
136:23 - other id with the email that is entered
136:25 - by the user then that's that user's user
136:29 - id should be stored in this user id so
136:31 - we just need to check if this is empty
136:32 - or not if this is empty that means that
136:35 - this this email doesn't exist in our
136:37 - database that means it is unique and if
136:40 - it is not empty that means that this
136:42 - email already exists in our database and
136:46 - hence
136:47 - it is not unique so for that i'll write
136:50 - if
136:51 - empty
136:54 - dollar user id
136:57 - we return
136:59 - else we return
137:01 - false
137:02 - okay and i we have already discussed an
137:05 - easier method to do this
137:07 - we simply write
137:09 - return
137:11 - this so if this is empty that means it
137:13 - is true so it will return true if it is
137:15 - not empty it will return false it is
137:18 - understandable
137:20 - okay so this is done
137:22 - now let's clear our database and then
137:24 - try running the api again
137:27 - okay so this is the database i'll check
137:29 - all
137:30 - delete
137:32 - yes
137:34 - so now my database is empty my table is
137:37 - empty
137:38 - okay now let's finally call the api okay
137:41 - so the first time it should work
137:46 - okay and it did so we got the result as
137:51 - seller registered okay and then in our
137:54 - database we got one
137:56 - okay so we made a mistake over here we
137:59 - created the function but we didn't call
138:01 - it so
138:02 - even though we
138:04 - have the function it will still uh
138:07 - work means it will still not work that
138:09 - means
138:10 - there might be users with
138:14 - might there might be more than one users
138:16 - with the same email okay which is the
138:18 - case right now
138:19 - so
138:20 - i'm sorry for that we have created the
138:22 - function we need to call it now
138:24 - okay so for that let's go in the code in
138:27 - our api
138:29 - okay where we are saving the data
138:32 - so before saving i want to check that if
138:34 - it is
138:35 - unique or not if the email is unique or
138:37 - not so for that i'll simply write if
138:40 - seller and then the function name and
138:43 - the function name is check unique email
138:46 - if the
138:47 - if this returns true
138:50 - okay then we proceed with saving the
138:52 - data
138:55 - okay
138:57 - else we return an
138:58 - error okay so
139:01 - the error is gonna be this
139:05 - this is going to be 401 that means it is
139:07 - unauthorized and the message is gonna be
139:11 - email already
139:14 - exists
139:16 - okay so let's save this
139:18 - now i'll again clear my database
139:23 - okay so it is already cleared now it
139:25 - should work the first time
139:29 - okay
139:31 - so it did work we have seller registered
139:33 - now if i call the api again
139:35 - then it shouldn't work okay and it
139:37 - didn't it is saying success zero and the
139:39 - messages email already exists
139:42 - so now with this we have prevented our
139:44 - database from
139:46 - having
139:48 - a user more multiple users with a single
139:51 - email id
139:52 - okay
139:53 - so this error is fixed now let's
139:56 - commit this and
139:58 - move forward to the next error
140:00 - okay
140:01 - so for that i will simply write
140:04 - get status that checks what all changes
140:06 - have been done then get add then a dot
140:09 - that means add all the changes to the
140:11 - staging area then if again we write get
140:14 - status it is in green that means they
140:16 - all have been added to staging area then
140:18 - we commit the changes
140:19 - so get commit dash m stands for message
140:22 - and then with a course we write the
140:23 - message
140:24 - the message is gonna be checking
140:27 - email is
140:30 - unique
140:33 - or not okay and then with this it is
140:35 - committed now i'll push it to my github
140:38 - and the link will be in the description
140:40 - so get push
140:44 - and it is pushed
140:46 - okay so the second error was that we
140:48 - don't want this dot php over here in our
140:51 - api okay so for that we are gonna create
140:54 - a new file in our root folder
140:57 - okay and that is gonna be dot ht
141:01 - access ht access okay i'll bring it to
141:05 - the root
141:06 - move
141:08 - so this is a special type of file that
141:10 - php understands and over here we write
141:13 - some
141:14 - different kind of kind of code we don't
141:17 - need to understand that okay means means
141:19 - it is better if you understand that if
141:21 - you don't understand then there is not
141:23 - an issue there are there are basically
141:25 - four lines we can remember it
141:27 - okay so we write so let's start we write
141:30 - rewrite
141:32 - engine
141:35 - on
141:36 - then we write
141:40 - co d as in condition rewrite condition
141:42 - and that is gonna be a percentage sign
141:45 - curly braces
141:48 - request
141:50 - file name
141:52 - okay file name
141:55 - then we'll leave a space
141:56 - exclamation mark
141:58 - dash
141:59 - d
142:00 - then the
142:02 - right
142:03 - condition
142:04 - again a percentage sign
142:06 - request file name
142:08 - okay then after that we give a backslash
142:12 - dot php
142:14 - then space
142:15 - dash f
142:16 - and then after that we write the write
142:21 - okay i'm sorry it is
142:23 - dash f
142:28 - now after that we write
142:30 - rewrite
142:32 - and then rule
142:36 - then we give uh
142:38 - exponent
142:40 - open parenthesis inside this we write to
142:42 - dot
142:43 - asterisk then we come out of parenthesis
142:46 - give a dollar leave a space
142:48 - dollar one dot php okay so this is done
142:52 - now let's save this
142:54 - okay
142:55 - so now if i remove this dot php then
142:59 - also this api should work okay
143:02 - so and it does okay now if we didn't had
143:05 - this file and i remove dot php then it
143:08 - will not work
143:09 - okay but since we have this ht access
143:13 - even if we give the dot php extension or
143:16 - we don't give it this will work
143:19 - okay so we have fixed both the errors
143:22 - this was for the video thank you
143:26 - so in this video we are gonna continue
143:28 - preparing our back end
143:30 - okay so let's start i already have
143:32 - everything fired up okay so the mam
143:34 - server is running i have sigma open here
143:38 - okay i also have the database open with
143:40 - me and then
143:43 - postman to run our apis okay and the
143:46 - code editor to actually code
143:48 - okay so let's get started so the next
143:52 - thing that we're gonna do is we are
143:53 - gonna
143:55 - uh make an api for the seller to log in
143:59 - okay so a seller can register seller
144:01 - will also need to login okay so suppose
144:04 - if the seller has an account on one
144:07 - device and he installs the same app on
144:09 - another device okay so over there he is
144:11 - not gonna create another account but
144:13 - he's gonna log in to the same account so
144:15 - let's
144:16 - write code for that
144:19 - okay so it is
144:21 - login function over here
144:28 - we'll call it login we'll create a
144:31 - instance of our database
144:35 - okay then for login we will take the
144:38 - email and password
144:40 - okay so or do we have mobile number
144:43 - okay so since mobile number is not there
144:45 - we'll stick with email only okay if you
144:48 - want you can change email to mobile
144:50 - number because some vendors might not
144:52 - have an email but all of them will have
144:55 - a
144:56 - what do i say the mobile number okay so
145:00 - for logging in we will use email and
145:02 - password so i'll copy it from here and
145:05 - paste it over here so that in this
145:07 - function as well
145:09 - we prepare these
145:12 - values to be
145:14 - added in the query okay in the sql query
145:16 - so let's check that
145:18 - okay so i'll write
145:20 - sql
145:23 - select
145:25 - star from
145:27 - this
145:30 - database
145:31 - sorry this table i'm sorry
145:34 - where
145:36 - email is equal to
145:42 - well this email
145:45 - so i'll copy it from here
145:47 - paste it over here okay so now we have
145:51 - the seller whose email corresponds with
145:54 - the email entered by the seller in our
145:57 - front end okay so now after that once we
146:00 - have the details of the seller we are
146:02 - gonna check if the password matches or
146:03 - not
146:04 - okay so first let's run this we so for
146:08 - that we write result
146:10 - is a database
146:13 - query
146:14 - because we have seen to run the query we
146:17 - will call this
146:19 - query function that we have created in
146:20 - our database class so once we get the
146:23 - result let's fetch the row so
146:26 - uh let's call it seller and this is
146:30 - database
146:32 - okay so what was the function name
146:36 - okay so it is fetch row
146:39 - so we will fetch row
146:42 - and over here we need to give the
146:44 - result okay so that this function
146:47 - fetches the first row from
146:49 - uh this this result variable okay so now
146:54 - since we have the result we will check
146:56 - uh if the seller exists or not okay so
146:59 - for that there is another
147:01 - method in php which is called empty it
147:04 - checks if uh
147:05 - if the if the variable inside this
147:08 - parenthesis is empty or not
147:10 - okay so over here this will be seller so
147:13 - if it is empty that means the seller
147:16 - doesn't exist so we can simply return a
147:19 - string that says
147:21 - sell seller
147:27 - doesn't
147:30 - exist
147:31 - okay
147:33 - else we have a seller so then we will
147:36 - check the password okay so for that
147:38 - again i'll have to open the
147:42 - uh
147:43 - decrypt
147:46 - documentation so
147:52 - i'll simply go to the github
147:54 - link from where we have copied the code
147:57 - okay so over here to check the password
147:59 - we have decrypt check password and it
148:01 - returns true or false
148:04 - so this is what we are gonna do we are
148:06 - gonna write if
148:08 - uh decrypt check password
148:14 - decrypt check password and then over
148:16 - here will be our password that is stored
148:18 - in database so that is inside seller
148:22 - and over here we are calling it
148:25 - password so
148:26 - the key value is password and we check
148:30 - it with the value entered by the
148:34 - user so that is this
148:38 - okay so now if it is true that this
148:40 - means that password matches
148:43 - else
148:46 - else
148:47 - we simply return
148:51 - password doesn't
148:55 - match
148:56 - okay
149:04 - and over okay so this is not like this
149:08 - yes and if it matches then we will
149:11 - simply return the user's details okay so
149:15 - that is return
149:18 - seller okay so now our function is ready
149:22 - let's create the api endpoint
149:25 - okay so for that inside the seller
149:26 - folder only i'll create a new file we'll
149:29 - call it login
149:31 - dot php
149:32 - okay and now
149:34 - let's copy some part of the code from
149:36 - the register.php
149:38 - so
149:39 - all these things will be the same this
149:41 - is also going to be a
149:43 - request of type post
149:46 - okay so we copy this as well
149:53 - now we are gonna take email and password
149:56 - as the
149:58 - input so i'll
150:00 - copy the validation function for those
150:03 - two only
150:05 - not a function but the validation
150:07 - conditional code that is if else so i'll
150:09 - copy these two
150:12 - uh paste it over here okay so this means
150:14 - that once this
150:16 - api endpoint is called it will check if
150:18 - the email is given or not if the
150:20 - password is given or not if not then the
150:22 - else condition
150:24 - will be executed and there is a die that
150:26 - means the execution will stop then and
150:28 - there
150:29 - okay so it means that this will reach
150:33 - this state okay
150:34 - it will reach line 25 only when the
150:37 - request has email and password both
150:40 - okay so now once that is done we should
150:43 - we shall get the
150:45 - value
150:46 - okay
150:47 - so
150:49 - i'll call it
150:51 - simple s because the seller is already
150:53 - the object name okay so
150:57 - seller and then the function name the
150:59 - function's
151:00 - name is login
151:05 - okay so login
151:07 - now we check the type simply
151:10 - so if uh
151:12 - get a type
151:14 - so get a type returns the type
151:17 - of the variable and it is s and if it is
151:21 - equal to string
151:23 - okay uh that means if it is string then
151:26 - that means either this is returned or
151:29 - this is returned okay because this is a
151:33 - array and if this is returned then this
151:35 - if condition over here will be false so
151:38 - if it is true that means some error has
151:40 - occurred and we shall send a message
151:43 - accordingly okay so
151:45 - i don't need a die here because this is
151:47 - the last if else
151:48 - okay so the success is zero and the
151:51 - message is gonna be nothing but
151:53 - dollar s
151:55 - okay and then we will set the response
151:57 - type as http
152:00 - uh response code and that is four zero
152:03 - two
152:05 - okay and
152:06 - else if this is not a string then it has
152:09 - to be an array and if it is an error
152:12 - then we simply
152:14 - change the response code to zero success
152:17 - to one
152:19 - and the
152:22 - messages login successful
152:28 - okay and the
152:31 - uh user or sorry seller
152:36 - is dollar s
152:39 - okay so let's
152:41 - format it save it
152:43 - now let's try running this api
152:46 - so for that we open postman okay i'll
152:49 - copy this link
152:50 - and then
152:53 - paste it over here and it is only gonna
152:55 - change from the register to login
152:57 - because the folder directory is exactly
153:00 - the same as register only the file name
153:02 - has changed that means the last value
153:04 - and we don't need a dot php because we
153:07 - already have htaccess so i changed its
153:10 - method from get to post then in inside
153:14 - body inside form data first let's check
153:16 - if we have some data or not
153:19 - okay so our database is empty
153:22 - so let's first register a user and that
153:24 - is rishabh kumar okay so the email over
153:26 - here is rishabhadra gmail.com and
153:29 - password is qwerty
153:31 - so
153:33 - let's see
153:37 - now once this is done i'll go and check
153:40 - my database refresh it
153:42 - and we have the user over here so now
153:45 - let's try logging in okay so
153:49 - for that
153:51 - over here first simply call like this
153:54 - and it says email is required as i told
153:57 - you it will not execute until we have
153:59 - given both the things so email is
154:02 - rishabhard.gmail.com
154:08 - okay so now password is also required
154:12 - and the password was qwerty
154:15 - now let's see what is the response
154:18 - so it it is it has got some error
154:23 - let's see what is that
154:39 - okay
154:44 - seller login offices okay so i think
154:48 - let's change it to array i think the
154:51 - string is written in some other format
155:03 - now if i click on send still there is
155:06 - some error so i'll have to look into it
155:10 - okay so i found the error okay so over
155:13 - here you can see we first need to give
155:15 - the password and then the hash password
155:18 - but in my code i have first given the
155:21 - hashed password and then the
155:23 - normal password so i think that is the
155:25 - reason for that
155:26 - so i'm gonna fix it
155:33 - i saved it now let's see
155:39 - and
155:40 - this api is working it says success and
155:43 - the message is login successful and we
155:46 - have the seller over here so now if i
155:48 - change the password and then click on
155:51 - send
155:54 - then it says password doesn't match
155:56 - okay and now again i'll click on send
155:59 - and see
156:04 - okay so login successful now let's i'll
156:06 - try to change the email
156:09 - and see
156:10 - so it says seller doesn't exist so i
156:13 - think it is working properly uh login
156:16 - api is done
156:18 - now although there is one thing i don't
156:20 - want i don't want to
156:22 - return the password of the user
156:25 - so let's do that for so for that i will
156:27 - do a quick google search uh how to
156:30 - remove
156:32 - key value
156:35 - pair from
156:36 - php
156:37 - array
156:40 - okay how to delete an array element
156:42 - based on the key in
156:44 - a php so i think this is the answer
156:51 - so we have unset okay so we write
156:55 - like this
156:57 - okay so now let's try that
157:00 - so i'll write unset
157:04 - and then i'll write
157:05 - seller
157:10 - password
157:13 - so now this password value will be
157:15 - removed from this seller array
157:18 - so let's
157:21 - format it save it
157:26 - okay and then if i run this i think the
157:29 - password will not be returned this time
157:32 - so let's see
157:42 - and it isn't so i think with this our
157:45 - login api is done so i'll
157:47 - uh commit it
157:49 - so i'll check the status
157:51 - uh these changes are not committed so
157:54 - i'll add them all to the staging area
157:56 - then again i'll check the status and
157:59 - both both are added in the committing
158:02 - staging area so now i'll commit it
158:07 - with a message login api created
158:14 - okay and then push it
158:16 - so with this our login api is done in
158:19 - the next video we shall proceed further
158:21 - thank you
158:23 - so in this video we shall start with
158:25 - storing our products okay so for that
158:29 - first i'll open my database so in this
158:32 - we are gonna create a new table and that
158:34 - is gonna be
158:35 - uh products
158:38 - i'm sorry
158:40 - we are gonna create a new table and its
158:42 - name is gonna be products
158:44 - okay
158:45 - uh so first is gonna be id that is
158:49 - gonna be primary
158:51 - okay and it should be auto incrementing
158:53 - it is of integer data type okay then
158:56 - after that we have seller id okay so
158:59 - this is a foreign key
159:02 - in the comments i'll write foreign
159:05 - key
159:06 - linking to
159:07 - seller table
159:10 - okay
159:11 - so you should know the basic terminology
159:13 - of
159:14 - dbms if you don't you can simply do a
159:17 - google search and get to know all about
159:18 - it okay then the name of the product
159:23 - image of the product okay then after
159:25 - that i think we need
159:27 - more four columns so i'll add those
159:30 - okay then after image we have price per
159:34 - kg
159:35 - okay so the
159:37 - price then we have description
159:40 - okay not a space
159:46 - okay that's encryption
159:49 - and then we have interaction
159:53 - count okay so this this parameter will
159:57 - uh help us generate the
159:59 - trending thing or what we have called
160:01 - areas so this will help in the most
160:04 - popular
160:05 - in getting us the most popular list okay
160:08 - so by this what i mean is that every
160:11 - time uh the product is added in the cart
160:14 - or ordered we will increment its value
160:16 - by one and thus by getting the uh
160:20 - getting to and thus with the highest
160:23 - number of interaction count will be the
160:24 - most popular and then uh others arranged
160:27 - in descending order okay so this is it
160:30 - and after that we don't need a time okay
160:32 - so now this name is gonna be varkar
160:36 - of let's say hundred characters at max
160:38 - image is again gonna be worker of
160:40 - hundred characters at max
160:43 - uh price per kg
160:45 - uh is also gonna be work at 100
160:48 - characters
160:49 - max and description is going to be where
160:51 - care let's say 1000 characters at max
160:54 - because descriptions are large
160:56 - now interaction count is going to be
160:58 - integer only okay so i think this is
161:01 - done our table is created
161:03 - okay
161:06 - so we can see the structure we have id
161:08 - seller id name image
161:11 - price per kg description and interaction
161:14 - count okay so i forgot one thing in
161:17 - starting it should be zero okay
161:20 - so
161:23 - uh we will go to default as defined
161:26 - zero so that this means that if we don't
161:28 - give any value to this by default it
161:31 - will be assigned a value of zero so
161:33 - let's save this
161:34 - okay and with this our products table is
161:37 - ready okay so now let's create
161:39 - create a model class in our
161:42 - php
161:43 - so for that i'll open up
161:45 - up the vs code
161:50 - okay inside the models folder i'll
161:52 - create a new file that is
161:57 - uh products dot php
162:01 - okay and then this will also have these
162:05 - things at the start
162:07 - okay uh we can remove the b crypt
162:10 - because we are not gonna store any
162:12 - passwords here okay then let's create a
162:15 - class and the class is class product
162:22 - okay we need to give a capital p because
162:24 - class name starts with the capital
162:27 - okay then after that we will define the
162:31 - keyword key values i mean the
162:34 - names of the data members okay so
162:40 - first we have a private variable that is
162:43 - our table name
162:45 - private dollar table
162:48 - and that is gonna be products
162:51 - then we
162:52 - have id
162:56 - we have seller id
163:01 - we have the
163:03 - name
163:07 - we have
163:08 - image
163:12 - we have price per kg
163:18 - we have description
163:24 - and last we have interaction count
163:27 - okay so
163:29 - interaction
163:32 - count after this we have a
163:34 - constructor and validate params function
163:37 - this is same in bo in all the model
163:40 - classes so i'll simply copy it and paste
163:43 - it over here then the next thing is
163:47 - storing a product okay so we'll create a
163:50 - method for that
163:52 - first let me format it
164:10 - okay so i don't know why this is
164:12 - happening
164:14 - means like the format thing is not
164:16 - working
164:17 - okay anyway it has formatted now now
164:19 - let's create the function to
164:22 - store the details of the product so i'll
164:24 - call a public function
164:29 - add product
164:31 - okay then as always this is gonna have a
164:34 - global instance of our database
164:40 - okay and then we will take all these
164:42 - properties except id and then
164:45 - prepare them to be added in the query so
164:47 - that is done by adding these three
164:50 - things that is trim html special cares
164:53 - and strip tags we have discussed about
164:55 - all
164:56 - all of them in one of the video okay so
164:59 - the first is
165:01 - seller id
165:03 - so this is gonna be seller id
165:07 - then after that we have another five so
165:09 - i'll copy it
165:11 - and paste it five times
165:14 - and then simply change the name
165:36 - so this is the description and then this
165:39 - is interaction count
165:42 - okay so this was the reason why the
165:45 - formatting was not working i forgot to
165:47 - give a dollar sign over here
165:49 - okay so now once this is done let's
165:51 - store it in our database so for that we
165:53 - again write an sql command sql
165:57 - do not select but
166:00 - insert
166:02 - into
166:03 - dollar this
166:06 - table and then we write the key names
166:08 - that is a seller
166:11 - id
166:12 - name
166:14 - image
166:16 - price per kg
166:19 - okay then
166:20 - description
166:23 - then enter okay we don't need to add the
166:26 - interaction count because it will be
166:28 - zero by default okay description now we
166:31 - need to
166:32 - check for spellings because if the
166:34 - spelling doesn't match it will crash
166:37 - so it does match okay values
166:41 - then over here i'll break the string
166:44 - uh i have already discussed these
166:47 - purpose of these six characters in one
166:49 - of the video you can look into it okay
166:52 - then after that over here we write
166:56 - this
166:57 - thing okay we call the method escape
167:00 - value which is in our database class
167:02 - okay database escape value this name
167:06 - okay so first it is gonna be seller id
167:11 - i'm sorry seller id then there will be a
167:13 - comma now after this another four
167:16 - and the last one will not have a comma
167:18 - then the
167:20 - name
167:24 - image
167:25 - price per kg
167:28 - and the description
167:31 - okay so once this is done let's save our
167:33 - database so
167:36 - save this row in our table i'm sorry we
167:38 - can't save the database so
167:41 - database
167:44 - query
167:45 - and sql so now if we check if
167:51 - result means if it
167:52 - has a something that means the
167:55 - it has been executed successfully then
167:57 - we return
168:01 - a true
168:04 - else we return
168:05 - false so if everything is correct it
168:07 - should format itself automatically and
168:10 - it did now let's save this
168:12 - okay so with this our function is
168:14 - created we shall create the end point in
168:17 - the next video thank you so in this
168:20 - video we are gonna create the end point
168:22 - to store the details of a product okay
168:26 - so
168:27 - i'll open my editor now inside this
168:30 - seller folder which is inside api folder
168:32 - i'll create a new file and call it add
168:35 - dot php okay
168:37 - so now i'll open my register.php and
168:41 - copy code from here okay till the if
168:43 - condition
168:46 - now over here instead of seller this is
168:48 - gonna be product okay and the type is
168:51 - still gonna be post
168:53 - okay
168:55 - now let's copy the else block
168:57 - okay that which is the case when the
169:00 - request is not
169:01 - a post request
169:03 - okay so
169:05 - and this is done now if the request is
169:08 - post then we need to take a few data and
169:10 - then process them accordingly
169:12 - so in the products
169:15 - model class you can see that for adding
169:17 - a product we need five things that is
169:19 - seller id name image
169:22 - price per kg and a description
169:26 - sorry so let's take this value so for
169:29 - that i'll again open register
169:31 - okay and then i'll copy the first one
169:36 - first means validating parameters if
169:40 - else condition or the conditional block
169:42 - okay now over here instead of seller it
169:44 - is gonna be product okay let's check if
169:48 - we have created this object or not
169:51 - okay so
169:53 - you can see that we have not created an
169:55 - object for this class product so let's
169:57 - do that
169:58 - before that i'll add a comment over here
170:01 - storing
170:03 - product details
170:05 - okay uh
170:08 - class ends
170:10 - and then object i am sorry
170:16 - okay and then i am gonna call it product
170:20 - is equal to new product
170:23 - with a capital p
170:26 - i am sorry
170:28 - uh this needs to be capital p okay so
170:31 - the object is created now i'm gonna use
170:34 - that over here so product and this is
170:38 - also gonna be product and we first
170:40 - uh first we need the seller id so i'll
170:44 - simply copy it
170:45 - uh paste it over here post should have
170:48 - seller id it should be saved in the
170:50 - seller id variable of the product object
170:53 - and if it is not there then we give a
170:55 - message that seller id is
170:58 - required
171:01 - oh sorry it was already there
171:05 - okay so
171:06 - now we need a similarly for four others
171:10 - so i'll copy it four times means
171:12 - actually paste it four times copy it
171:14 - once
171:15 - so after after seller id we have name
171:18 - so
171:20 - let's uh check the uh let's validate the
171:23 - parameters for this as well so this is
171:26 - gonna be name over here also name
171:29 - and this is gonna be
171:31 - name is required
171:33 - okay then uh
171:35 - then after that we have image okay so
171:39 - for image the process is not same so
171:41 - we'll do that at last let's first
171:43 - validate parameters for this price per
171:45 - kg and a description
171:49 - okay so over here i'll write price per
171:51 - kg price per kg price per kg
171:54 - and over here it is gonna be
171:58 - price per kg is required okay
172:01 - and then after that we have description
172:04 - okay
172:05 - so
172:07 - let's
172:08 - add for this as well this is gonna be
172:10 - description
172:12 - description and over here also it's
172:14 - gonna be description with a capital d
172:17 - okay so now we don't need these
172:21 - now let's uh store the image so we have
172:24 - already stored an image which was the
172:27 - seller's image in our registered api so
172:29 - i'm gonna copy the code from there and
172:31 - edit it as per our
172:33 - requirement okay so this was the part
172:37 - okay i'll even comment it
172:40 - saving
172:42 - picture
172:44 - of
172:46 - seller okay
172:48 - so this is done
172:52 - now over here after name
172:55 - saving picture
172:57 - of product okay
173:00 - now this is gonna be this is not gonna
173:02 - be seller images folder this is gonna be
173:04 - product images folder over here also
173:06 - name changes to
173:09 - product images
173:11 - now i'm gonna copy paste simple okay so
173:15 - then again file name is gonna be same
173:17 - file temp is gonna be same extensions
173:19 - gonna be same now new file name will
173:22 - change we don't have a seller email over
173:24 - here but we do have a seller id
173:27 - so i think
173:28 - i'll use that instead of this
173:31 - okay
173:32 - now
173:34 - instead of profile it's gonna be
173:37 - product
173:39 - okay
173:40 - and then after this i'll also add the
173:46 - name name of the product okay so for
173:48 - that i'll copy this
173:51 - paste it over here
173:54 - product name and then the extension and
173:56 - then we are saving it to product images
173:59 - folder not seller images folder then the
174:02 - new file name then this is called
174:04 - product images
174:05 - not the seller images okay now if this
174:09 - is
174:10 - not available if image is not available
174:12 - then we shouldn't proceed because in
174:14 - product the image of product is
174:17 - compulsory
174:18 - okay so that is why i'm gonna
174:21 - give an error message if
174:23 - the picture is not present
174:25 - so i'm gonna say
174:28 - photo is required
174:34 - okay so now once we have everything uh
174:37 - let's actually save it to our database
174:40 - so i'll write if
174:43 - product
174:44 - and then i'll check the function name it
174:46 - is add product
174:49 - okay so over here
174:52 - this simply returns true or false okay
174:55 - no problem so now if
174:57 - add product returns true that means the
174:59 - product has been added successfully so
175:02 - we simply need to return this
175:05 - and the success is gonna be one that
175:07 - means true
175:08 - and
175:09 - the message is gonna be product
175:11 - successfully added
175:17 - okay so it is gonna be you
175:23 - and this needs to be capital p
175:26 - okay else that means it is it has
175:28 - returned false so i'll
175:31 - change the success to zero and the
175:34 - message is gonna be
175:37 - internal server
175:39 - error and the response code will be 500
175:42 - which is used for internal server error
175:46 - so i'm gonna write http
175:51 - response code and that is 500
175:55 - okay so with this this api is done now
175:58 - let's try running this okay
176:00 - so i'll save it then i'll open my
176:03 - postman
176:05 - okay now i'll copy this url and then
176:08 - we'll i'll create another request
176:10 - okay it is gonna be of type post
176:13 - and then this is
176:15 - gonna be add instead of login uh because
176:18 - you can see the folder structure is
176:21 - entirely same just to the last file name
176:24 - is changing okay so it has changed from
176:26 - login to ad and so is our url okay so
176:30 - now if i
176:32 - click on post
176:34 - it is giving me internal server error
176:36 - let's see why
176:42 - okay so it is not working because the
176:45 - spelling is wrong there needs to be an s
176:48 - or what makes more sense is this remains
176:50 - same and i change the name of the file
176:54 - only
176:54 - okay because product makes more sense
176:58 - rather than products okay so this is
177:01 - done now let's try running the api so
177:05 - it is saying seller id is required so we
177:07 - go inside body inform body we write
177:10 - seller
177:12 - id and that is one because in our login
177:15 - api the id of seller is one
177:19 - okay then after that name that is the
177:21 - product name so it is gonna be cucumber
177:24 - okay
177:26 - and then after that we have image and we
177:28 - want to send a file and okay so image
177:32 - and then i'll add a cucumber's image
177:36 - okay
177:38 - now after that we have
177:40 - price per
177:42 - kg okay so
177:45 - let's say it is 40
177:48 - and then after that we have description
177:50 - okay so for that we are going to use
177:52 - lorem ipsum and we have seen in one of
177:55 - the videos uh this website called lorem
177:58 - ipsum dot io so it has
178:01 - means it provides you lorem ipsum for
178:04 - your use okay
178:06 - so
178:07 - i'm gonna copy it
178:12 - then
178:13 - in my description
178:15 - i'm gonna paste it
178:17 - okay
178:18 - so this is done
178:20 - we have added the description now let's
178:23 - try
178:24 - uh
178:26 - calling this api okay so i'll click on
178:28 - send and then let's see what happens
178:30 - okay so
178:31 - you can see product successfully added
178:33 - okay now let's
178:35 - check our database
178:37 - okay
178:38 - means if the data has been entered
178:40 - correctly or not
178:42 - okay so if i refresh i'm able to see the
178:44 - id is one seller ideas one name is
178:46 - cucumber
178:48 - image is not here but we have price per
178:51 - kg and description okay so
178:54 - image should be there let's see what's
178:55 - the problem okay so
178:58 - this is still
178:59 - a seller but we want need to but it
179:01 - needs to be product
179:03 - okay so i'll save it then in my database
179:07 - i'll delete it okay
179:10 - and then again i'll call my api so let's
179:14 - see this time
179:16 - now the product is
179:19 - successfully added let's go and check
179:21 - again and you can see now this time we
179:23 - have our product images
179:26 - but there is a error you can see that
179:29 - this dot between the name and the
179:32 - extension is missing so i'll add it over
179:34 - here and then fix this problem in my
179:37 - code okay so where we are saving the new
179:40 - file names okay so after this we need to
179:43 - give a dot but
179:45 - i missed that okay so i'll add it
179:48 - straight away now if the error is over
179:51 - here then it might also be in the
179:53 - register api
179:54 - so let's go and check over there
179:58 - okay over here also we have not given
180:02 - the dot okay so i
180:04 - gave that now it is done
180:10 - okay
180:16 - so i think this is done
180:18 - okay
180:19 - so with this our
180:21 - api is ready we can now save product
180:24 - not we but the sellers can now save the
180:27 - their product to the
180:29 - database okay so this was for the video
180:32 - thank you so in this video we are gonna
180:35 - continue with our back end and then and
180:37 - today we are gonna make an api to get
180:40 - the list of
180:42 - all the sellers okay so that we can show
180:44 - it to the user and then the user will
180:46 - select one his favorite uh
180:50 - seller and then we will show all the
180:52 - products that that seller has okay so
180:55 - let's get started with it so inside
180:58 - uh
180:59 - let's go inside the seller table okay so
181:02 - over here i'll create a function to get
181:05 - the list of all the sellers
181:07 - okay so
181:08 - let's get started
181:12 - method to return the
181:14 - list of
181:15 - sellers so
181:18 - i can close this for now
181:22 - okay so let's
181:23 - start so
181:25 - it's public
181:26 - function
181:30 - all
181:31 - sellers
181:35 - okay then over here we will have a
181:38 - instance of our database
181:40 - then our sql query is gonna be
181:44 - select and let's see what all datas are
181:47 - what all key value pairs are needed so
181:50 - for that i'll open my uh database so as
181:54 - to see what all values we actually have
181:56 - at the moment
181:58 - okay so
182:00 - i don't know how its theme got changed
182:09 - okay so now it looks better so i'll go
182:12 - in my better wise table inside seller i
182:16 - think
182:17 - by just giving the
182:19 - name image and the address would be
182:23 - enough okay so what i am planning to do
182:26 - is to show a list of sellers and then
182:31 - with the basic details and from there
182:33 - user can select any of the seller and
182:35 - then we will be displaying the products
182:37 - for which we have already designed the
182:39 - screen so i think the id name
182:43 - image and address would do
182:46 - so we will get only these things
182:49 - id name
182:51 - image
182:53 - address
182:54 - id name
182:56 - image address we need to
182:58 - keep a close look on the spellings if we
183:01 - mess up the spellings everything is
183:03 - gonna go haywire so we will so the query
183:06 - is select id name image
183:09 - address
183:11 - from
183:12 - this
183:14 - table okay so this is our very basic
183:17 - query now let's run it so
183:20 - it is result
183:24 - database query
183:28 - sql and once we
183:30 - run this we will get a result with all
183:32 - the tables so we will then fetch the
183:35 - fetch all the rows and for that in our
183:38 - database class we already created a
183:40 - function that is called
183:42 - fetch array so what we are going to do
183:44 - over here is
183:46 - simply return
183:50 - database
183:51 - fetch array and it takes our result
183:54 - instance
183:55 - okay so now what it will do is it will
183:57 - fetch all the
184:00 - columns and then return it as an array
184:02 - and that will in turn be returned by
184:05 - this function okay so now let's create
184:08 - an api to call this function so inside
184:11 - api i am gonna create a new folder that
184:14 - will be global or general so i'll call
184:17 - it general and inside this i'll create a
184:20 - new file that is sellers
184:23 - i'm sorry it needs to be sellers.php
184:26 - so i'm gonna rename it
184:29 - sellers.php
184:33 - now it is gonna be like this with slight
184:35 - changes means all the apis are almost
184:38 - the same we have very slight changes
184:40 - here and there
184:42 - so i'll copy this paste it over here
184:46 - this is gonna be get because we are
184:48 - fetching the details from the database
184:50 - and not adding anything or performing
184:53 - any query on the database so the most
184:56 - suitable type of request is gonna be the
184:58 - get request and the table
185:01 - here being used is the seller table so
185:04 - over here instead of getting
185:07 - the product table i'm gonna get the
185:09 - seller table
185:11 - okay so it is just a seller
185:14 - now after this
185:16 - we have this condition to check if it is
185:19 - of the
185:20 - mentioned type or not so let's do that
185:23 - over here it is gonna be get
185:26 - okay and then if it is not we have else
185:31 - else we return this
185:34 - okay now after this we can simply call
185:37 - that function and get the list so i'm
185:39 - gonna write
185:43 - echo
185:45 - json encode
185:48 - array
185:51 - success
185:53 - one
185:55 - so
185:57 - this is gonna be sellers
186:00 - and it is seller which is the
186:04 - object of this class here's seller
186:07 - and then the function name
186:11 - okay so that is all sellers so
186:15 - i write it over here
186:19 - and this is done
186:21 - so what basically happened over here was
186:23 - that we checked if it is a get request
186:25 - if it is a get request then we give the
186:27 - output as success is one and as in the
186:31 - sellers
186:32 - we get the list of all the sellers and
186:34 - directly return it okay so the api is
186:37 - ready now let's try running it so for
186:39 - that i'll open my postman okay so this
186:42 - is the
186:44 - address of our api so i'm gonna simply
186:47 - paste it and change the last part so
186:50 - inside api we are inside a folder called
186:53 - gen so it is gonna be gen and then we
186:56 - are
186:56 - in the file sellers so i'm gonna write
186:59 - sellers okay so now let's hit send
187:03 - and see
187:05 - and we did get the list a list of all
187:08 - the sellers so right now we only have
187:10 - one seller now let's try creating
187:13 - another seller
187:14 - okay
187:15 - so
187:18 - instead of rishabh kumar
187:22 - it is gonna be
187:24 - ayush
187:29 - singh and it can be ayush
187:32 - and the password instead of qwerty can
187:34 - be one two three four five six although
187:36 - it is not suggested okay
187:38 - and the address can be the same
187:40 - description can be the same and then
187:43 - let's register it
187:46 - okay so
187:50 - seller registered and now if we get the
187:52 - list of all the sellers then we are
187:54 - getting two sellers first one is rishabh
187:56 - kumar and the
187:58 - second one is
187:59 - sync so with this the the api is
188:03 - complete we have an api to get the list
188:05 - of all the sellers okay which we can use
188:08 - in the screen to display the list of the
188:10 - sellers for the user to choose
188:12 - okay so this was for the video thank you
188:16 - so in this video we are gonna make an
188:18 - api that will get us the list of
188:22 - products per seller okay so that means
188:24 - that we will give the
188:26 - seller id and then we will get all the
188:29 - products that
188:31 - that particular seller has added okay so
188:33 - let's get started
188:36 - okay so in in the product dot php we
188:39 - will create a new function for the same
188:43 - okay so
188:45 - method to return the
188:49 - list of products
188:53 - per
188:54 - seller
188:56 - okay so
188:59 - this is gonna be
189:02 - public function
189:05 - get
189:06 - products per
189:08 - seller
189:09 - okay
189:10 - now
189:11 - as usual we are gonna have a global
189:14 - instance of our database
189:16 - now after that all we need over here is
189:19 - a seller id so i am gonna copy it from
189:22 - there to here
189:25 - okay now after that we can write our
189:28 - query so that is gonna be
189:33 - select
189:34 - star from
189:36 - this
189:40 - table
189:42 - where
189:45 - seller id is equal to then single quotes
189:49 - okay then double quotes to break the
189:51 - string and then
189:54 - two dots to
189:55 - insert some value in between so that is
189:58 - gonna be this seller id so i'm gonna
190:01 - copy and paste simple
190:04 - now
190:05 - uh let's simply run this query and get
190:08 - the
190:08 - list of products so that is very similar
190:11 - to what we did over here
190:13 - in the
190:14 - all sellers function
190:16 - okay we got the result and then we
190:19 - fetched the list from it so i'm gonna do
190:22 - the same
190:25 - simply paste it over here so again this
190:28 - function is done
190:29 - now let's make an api for it
190:32 - so over here we are again gonna create a
190:34 - new file
190:36 - and that is gonna be products dot php
190:40 - okay now again this is
190:43 - will be
190:44 - very similar to what we have in sellers
190:47 - okay
190:48 - only that we will have a parameter that
190:50 - is the seller id
190:52 - okay so this is gonna be get over here
190:54 - we don't need a seller but we need the
190:56 - product okay
190:58 - and then we are checking that if the
191:01 - method is get okay now the another thing
191:03 - that we need to check is that if we have
191:06 - given the seller id or not because if we
191:08 - don't have the seller id we will not be
191:10 - able to get the products because
191:13 - we saw that in the query we need the
191:16 - seller id okay
191:19 - so again for checking there is a simple
191:22 - block of code and that is this one
191:26 - simply copy
191:27 - paste over here this is gonna be product
191:30 - but this is not gonna be post this is
191:32 - gonna be get because it is a get request
191:37 - okay so i'll change it and
191:39 - this is not gonna be description but the
191:42 - seller id
191:44 - so
191:45 - seller id seller id and seller id
191:48 - and over here also we will write that
191:51 - seller id is required so now if it comes
191:55 - to line 18 that means that seller id is
191:57 - there and then we simply return the
192:01 - list of sellers okay so for that i write
192:06 - echo
192:08 - json encode
192:11 - and then array
192:15 - then success
192:17 - and that is gonna be one
192:19 - and
192:21 - products that is gonna be
192:24 - a product that is the object of product
192:27 - class and then the function name
192:29 - so the function name is get products per
192:32 - seller
192:33 - so i'm gonna copy that
192:35 - paste it over here
192:37 - and
192:39 - let's see
192:40 - so
192:41 - i'm sorry
192:42 - let's save this
192:45 - okay over here is an error it needs
192:47 - there is a simple spelling mistake i'm
192:49 - sorry for that
192:52 - format this
192:54 - save this
192:56 - okay so this is done now let's try
192:58 - calling it
192:59 - so
193:06 - i am gonna call it
193:09 - again this is gonna be a get request
193:12 - i'll paste it and instead of seller this
193:15 - time it is gonna be products or product
193:18 - yes we have a product with us
193:20 - and also we need to give the seller id
193:23 - so that we give in the params section
193:27 - okay please note that if we are sending
193:29 - a get request we send the
193:31 - parameters in params because that will
193:34 - in turn go as a part of the url so you
193:37 - will see
193:38 - now see as soon as i write seller id
193:40 - over here it gets added in
193:42 - in the url itself and the value for it
193:46 - as well
193:47 - okay so now let's send this
193:50 - and see
193:51 - and we got the product now since uh the
193:56 - seller one is rishabh
193:58 - and in that idea i actually have only
194:01 - one product so that is why we are seeing
194:04 - only one product okay now
194:06 - later when we add more products we will
194:08 - be able to see them
194:10 - subsequently
194:12 - so
194:12 - with this this api is also complete now
194:15 - you uh might be thinking
194:18 - okay first let's add version control to
194:21 - it and then we'll discuss
194:35 - and point for
194:37 - getting products
194:39 - per seller
194:42 - okay so what i was saying is that you
194:44 - might be thinking that these products
194:47 - and sellers are very uh
194:50 - insecure apis means if anyone knows the
194:53 - url they can get all the data and might
194:56 - be misused
194:58 - okay so we are going to add security to
195:01 - it and for that we will be using jwt
195:04 - authentication so we will be seeing
195:06 - later in these in this series okay so in
195:10 - the next video we shall start with the
195:12 - front end part okay
195:15 - so this was for the video thank you
195:18 - so as i said in the previous video in
195:20 - this video we shall start with
195:22 - developing the flutter part so before we
195:25 - dive right into the code i just want to
195:27 - open figma and show you a few things so
195:30 - uh i added two new screens okay and i'll
195:33 - tell you how the flow is gonna be so for
195:36 - uh means uh prototyping means uh
195:39 - deciding how the flow is gonna be we
195:41 - need to go in the prototyping section
195:43 - okay then from here everything is very
195:45 - simple i select this screen now if i
195:48 - want now if this screen is clicked i
195:51 - want to go on the seller screen so what
195:53 - i'm gonna do is i'm gonna select this
195:55 - big white circle
195:57 - and drag it to the screen to the next
195:59 - screen where i want it to go okay now
196:02 - over here i have many options to choose
196:05 - i am just gonna make it smart animate
196:07 - okay
196:10 - now so this is done so now what will
196:11 - happen then that if we click on this
196:13 - screen in figma preview we will be taken
196:16 - to this screen and now over here if i
196:19 - click on this item
196:21 - i want to go on the product screen so
196:23 - that is how our flow is gonna be
196:25 - that if i click on any of the seller i
196:28 - will be able to see all the products
196:30 - that that seller has
196:32 - okay and then after that if any of the
196:35 - product is clicked
196:38 - then we will for sure go to its uh
196:40 - product details okay so with this our
196:44 - very basic prototyping is done let's see
196:51 - okay so now if i click on this screen i
196:54 - am taken to the
196:56 - category screen and you saw how the
196:59 - better bias which was in center flew to
197:01 - the top left corner this is called hero
197:04 - animation and we shall be doing it
197:06 - okay and then after that if i click on
197:08 - this i am taken to the product screen
197:11 - and now if i click on any of the
197:13 - products i am able to see its details
197:16 - so this is what our flow is gonna be for
197:19 - now so let's uh
197:21 - open uh
197:23 - vs code and start coding
197:25 - okay so
197:28 - first i'll create a new project
197:37 - i'm gonna write flutter create
197:41 - better
197:43 - buys
197:44 - so this will create a flutter project
197:46 - with the name better buys
197:49 - okay so this will take a few seconds
197:52 - and in the meantime i have opened my
197:54 - emulator uh you can open your simulator
198:00 - or the you can connect your
198:02 - real device with it okay so now once
198:05 - this is built i'll
198:07 - open this folder
198:08 - okay means this project
198:13 - okay
198:26 - okay so once it is open i'll simply
198:29 - start building it
198:33 - okay so in main dot dot
198:37 - over here we have all the
198:39 - starting code okay so i'll go to run run
198:42 - without debugging
198:46 - and now it has started running so this
198:48 - is the initial project that flutter
198:52 - comes with if i click on this the value
198:54 - is gonna change over here so we are
198:56 - gonna remove this and directly start
198:59 - with our
199:00 - splash screen so i will remove all the
199:03 - unnecessary code
199:05 - this complete my home it is not required
199:12 - okay now i'll remove this comments as
199:15 - well
199:17 - and i also want to remove this debug
199:20 - mode banner that we have over here
199:23 - so for that we have our key value
199:26 - property called debug show checked mode
199:28 - banner
199:30 - i'm gonna make it false
199:35 - okay and after this i'm gonna create a
199:39 - new folder inside my lib folder okay
199:42 - that is gonna be screens
199:44 - okay and then inside this i'm gonna
199:46 - create a new file that is gonna be
199:49 - splash screen
199:51 - dot dot
199:53 - okay so now this screen is created over
199:55 - here i'll import the
199:57 - flutter material so import
200:02 - material dot flutter dot dot i'm sorry
200:12 - okay then after that i'll create a
200:14 - stateless widget
200:16 - okay that is gonna be called splash
200:20 - screen
200:22 - okay then instead of returning a
200:23 - container we are gonna return a scaffold
200:26 - because every screen should have a
200:28 - scaffold then a scaffold has a home
200:32 - okay so
200:34 - now the home is gonna be a container
200:41 - and inside the container we are gonna
200:44 - have a child
200:46 - and the child is gonna be text and the
200:48 - text is
200:50 - splash screen
200:53 - okay so this is done
201:00 - okay
201:05 - so i don't know why it is giving an
201:07 - error
201:13 - okay so it doesn't have a home but it
201:15 - has a body i am extremely sorry for that
201:21 - okay so the body is gonna be a container
201:25 - okay
201:26 - and now we have this i'm gonna import it
201:29 - in our main dot dot and add it in the
201:31 - home so that as soon as the app starts
201:34 - we are able to see this screen which is
201:36 - in turn our splash screen so to import
201:39 - any local files the standard practices
201:42 - if you leave a line and use the
201:44 - referential operator
201:47 - okay so i'm going to import dot slash
201:51 - and that is the instance of this class
201:54 - then inside this we in this folder i'm
201:56 - sorry then inside this we have the
201:58 - screens folder
201:59 - and then we have the splash screen
202:02 - okay and now over here instead of my
202:05 - home page it is gonna be
202:09 - splash
202:11 - screen
202:13 - okay so this is done
202:16 - and now over here instead of this i am
202:19 - going to use an arrow operator
202:23 - okay because
202:24 - that is better and that is also
202:26 - recommended
202:28 - so this is done let's save this
202:36 - okay so once this is complete we can see
202:39 - splash screen but it is in the uh top
202:42 - left corner and it is almost hidden by
202:44 - the notch okay so we'll fix so that is
202:47 - not an issue but we got to see that our
202:50 - screen is intact okay so let's see the
202:53 - design the first thing we notice is the
202:56 - background color so
202:58 - let's get back to design so i'm gonna
203:01 - get this color and that is this
203:04 - okay
203:04 - so now inside our splash screen the
203:08 - container has a
203:10 - parameter called color okay and then it
203:13 - will take a color
203:14 - color class and then i can simply write
203:17 - the code of the color so now what
203:19 - happens is that this color
203:22 - requires a hexadecimal now even though
203:25 - it is a hexadecimal the color will color
203:27 - class will read it as a string
203:30 - okay so to convert so to make the color
203:33 - class read it as an hexadecimal all we
203:35 - need to do is add 0
203:38 - x f
203:39 - ok so this f stands for opacity and this
203:42 - is the format in which
203:45 - this color understands
203:47 - okay so now if i save this this color
203:49 - should be applied on our screen so let's
203:51 - see
203:55 - okay and it is only applied to this part
203:58 - i'm sorry
204:01 - i'll remove this
204:03 - now let's see
204:06 - and the color is applied to the entire
204:08 - screen okay now in center we need a
204:11 - better vice in text okay so
204:13 - for that i'm gonna have a child and the
204:16 - child is a text
204:18 - the text says better buys
204:22 - okay and the text should be in the
204:24 - center so for that i'm gonna write
204:26 - alignment
204:28 - and then from the alignment enum
204:34 - i am gonna use
204:35 - center
204:38 - okay so this is done
204:41 - let's save this
204:43 - and now we can see better vice in the
204:45 - center well although this font and color
204:48 - is very different from what we have here
204:50 - so you can see the font we have over
204:52 - here is pacifico
204:54 - okay so now to add this font in our
204:57 - project we are gonna use a package that
204:59 - is google fonts package
205:03 - okay so for that i'm gonna write to
205:05 - google fonts flutter
205:08 - so this will take us to the package
205:11 - i'm extremely sorry
205:13 - okay so i'm extremely sorry for that so
205:16 - the first link that is pub.dev has this
205:19 - package that is google fonts okay so
205:22 - i'm going to copy it and simply paste it
205:25 - in my pub spec.eml file
205:29 - so in pubspec.tml inside dependencies
205:33 - i'll place this and save this and then
205:36 - pub get should automatically start
205:38 - running and it did
205:39 - okay so this is the package that we are
205:42 - going to use we can use this to add any
205:44 - kind of font all we need to do is in the
205:47 - style inside
205:49 - text widget we just need to write google
205:50 - fonts and the font name
205:53 - okay so the proper instructions of
205:55 - installing is over here
205:58 - okay and this is the package that we had
206:00 - so i copied it
206:03 - will have to wait for a few seconds for
206:05 - this to complete running
206:08 - so once this is done we will open our
206:10 - splash screen
206:12 - and over here i'll simply paste it
206:16 - so now let's apply the pacifico font in
206:18 - our text
206:20 - so simply we are gonna
206:21 - go here write a style and then
206:25 - google fonts
206:27 - dot pasi
206:28 - fico
206:33 - okay
206:35 - so now let's wait for this google phone
206:38 - to recognize pacifico because it runs on
206:41 - real time in the on the internet so it
206:44 - will take a few moments
206:48 - okay so once it has recognized let's
206:51 - save this nc
206:58 - okay so now you can see once it has
207:00 - completed we get a bunch of errors over
207:04 - here and that is because we added a
207:06 - package and didn't
207:07 - restart it so the next time when we
207:10 - restart it so or just start it
207:13 - we will not be
207:14 - seeing these errors but anyways the font
207:17 - is applied now we just need to change
207:20 - the color and its size so
207:23 - for that inside this we have a property
207:25 - called color
207:28 - okay and that takes a color
207:32 - now again we need to get the color from
207:34 - our sigma file so i'll simply copy this
207:38 - paste it over here and and the color
207:42 - class will not understand so i'll have
207:44 - to add 0x for ff in front of it
207:47 - okay and then along with this i'll also
207:50 - change the size
207:52 - okay
207:53 - so the size is gonna be 20 let's see how
207:56 - it looks if it is not in accordance with
207:58 - our design we shall change it again
208:01 - so let's format it
208:05 - so once it is formatted let's save it
208:10 - okay and now you can see a better bias
208:13 - is here but it is very small i shall
208:16 - increase the size let's make it 25 okay
208:19 - so
208:20 - over here it is actually the pixels size
208:24 - okay so it can be a little bit more
208:26 - bigger
208:28 - let's make it 27 and
208:31 - this looks fine okay this is looking
208:34 - very aesthetical now in the next video
208:36 - we shall continue to the next screen
208:39 - okay so this was for the video thank you
208:42 - so in this video we shall continue with
208:44 - the front end
208:46 - i moved from the simulator to my real
208:49 - device because running simulator and
208:51 - recording at the same time was making my
208:54 - system run slow okay so let's get
208:57 - started
208:58 - in the splash screen uh you can see
209:01 - there are two errors like this okay
209:04 - so means these are not errors but are
209:06 - warnings and the warning says prefer
209:09 - const with constant constructors okay so
209:12 - what it basically means is that if i add
209:14 - const
209:15 - in front of it the error will be gone
209:17 - which is
209:18 - in a way the correct way to do so
209:22 - okay so format it save it
209:25 - now after that what i want is that once
209:28 - the better buys appear i want to show a
209:30 - small text below it that will say
209:33 - loading sellers
209:35 - okay so let's do that so for that this
209:38 - text i am going to wrap it up in a
209:40 - contain in a column
209:42 - okay let's save it
209:44 - and as soon as i put it inside a column
209:47 - it goes to the top so let's bring it in
209:49 - center so for that we write alignment
209:53 - main axis alignment and the
209:55 - main axis
209:57 - alignment has an enum also of the same
210:00 - name
210:01 - main access alignment
210:05 - and then in that i'm gonna select center
210:08 - okay then again save it and now it
210:11 - should be in the center
210:16 - okay and it is
210:17 - now below it i'll add a
210:20 - progress icon and then the text okay
210:23 - so for that i'm gonna add a circular
210:30 - uh progress indicator
210:32 - okay
210:33 - so let's see
210:37 - okay so we did get a circular progress
210:40 - indicator but this is not how we want it
210:42 - to be so let's see if i can change the
210:45 - size
210:47 - okay so we can't let's see what are the
210:49 - properties that we have we can change
210:51 - the color
210:52 - and the key and the value color
210:55 - okay so we are gonna change the value
210:58 - color
210:59 - and that is always
211:01 - a stopped animation
211:05 - okay and then this is gonna be of type
211:08 - color
211:11 - and it is gonna be color
211:14 - and this very color
211:18 - okay so
211:19 - i think over here also we need to give
211:21 - const
211:23 - no
211:25 - uh i think this is because okay so we
211:28 - need to give a const over here and this
211:30 - warning will go
211:33 - okay still there is the warning
211:38 - okay let's see what it is
211:41 - add const modifier so i did that okay so
211:44 - it was telling to add it over here now
211:47 - we still have some error okay we don't
211:49 - need a const over here so you can see
211:52 - these are the new changes that has been
211:54 - added in the latest version of flutter
211:58 - that is this is this all are basically
211:59 - the null safety things okay which means
212:02 - that to
212:04 - stop the app from crashing even if
212:06 - something is not so that is why we add
212:09 - these checks every here and there so
212:11 - this is not such a big thing you can
212:13 - simply
212:14 - hover on the warning and it will
212:16 - automatically tell you what to do so
212:17 - let's save this
212:20 - and now our animation color is as same
212:23 - as of this text okay so now let's try
212:26 - decreasing its size so for that i'll
212:28 - wrap it up in a
212:30 - sized box and the size box will have a
212:33 - height of
212:35 - let's i'm sorry it will have a
212:38 - height of
212:40 - let's say 20
212:43 - okay
212:46 - so now it is again giving us error i
212:48 - think we need to add const over here
212:52 - okay
212:54 - and then over here it is giving error we
212:56 - don't need the const keyword okay so
213:00 - we need to follow the warnings okay so
213:04 - it is there is no such way that you can
213:06 - automatically remember it
213:08 - okay so also change the
213:12 - width to 20 so that the progress dialog
213:16 - becomes more of a circular type because
213:19 - right now uh when only the height is
213:21 - changed it has become an ellipse which
213:24 - is not at all looking good on the screen
213:29 - so let's do it and yes the
213:32 - icon has become little bit smaller so
213:34 - the dialogue is now smaller let's see if
213:37 - i can change the
213:39 - width of the
213:40 - width of that thing so
213:43 - the options that i have is key
213:47 - okay no
213:48 - not over here but
213:50 - over here let's see the options that we
213:52 - have we have the color we have key
213:55 - we have the stroke width so we need to
213:57 - change it to 0.5 let's see how it looks
214:02 - okay so save it
214:09 - okay this is way too much faint so i'll
214:12 - change it to eight
214:17 - let's see how that looks
214:23 - okay i'll make it maybe one one point
214:26 - five
214:29 - okay so
214:30 - let's save this
214:32 - yes so now it looks fine okay
214:35 - over here it might not look
214:38 - proper to you because i am using the
214:39 - free version of yz but in your phone or
214:42 - on your emulator you will be
214:44 - able to see the perfect design okay so
214:48 - after this after this we have our
214:51 - text
214:53 - okay
214:59 - we have our text and it says
215:03 - loading
215:04 - sellers
215:08 - all right so this is
215:12 - done let's save this
215:17 - and again we need to add const over here
215:20 - to remove the this warning okay so
215:23 - this is also done let's save this
215:28 - now we have loading sellers over here i
215:30 - want to push it a little bit down and
215:32 - make it
215:33 - in the
215:34 - and give it a font of our secondary
215:36 - color that is secondary text
215:39 - that is poppins okay so let's do those
215:42 - things
215:44 - so over here i'm gonna write style
215:49 - and then it is gonna be
215:52 - google fonts
215:58 - dot poppins
216:02 - here's what i
216:04 - found okay
216:07 - so now the text will be in the pop-ins
216:09 - format
216:13 - okay so
216:14 - just hold on for a second for this
216:17 - google to search the font pop-ins
216:23 - okay so what is happening over here is
216:25 - that we have given const and google
216:28 - fonts dot pop-ins is not const
216:31 - so if i remove the cost from there the
216:33 - error is gone
216:34 - okay so these all might be new to you
216:37 - when once you start coding you'll get a
216:39 - hang of all such
216:41 - new things that has been introduced okay
216:43 - so now it is in the
216:46 - pop-ins font let's push it a little bit
216:48 - down
216:49 - so for that you can either use a
216:51 - container or a padding i'll use padding
216:54 - in this case so
216:55 - instead of wall it is gonna be only and
216:59 - and over here it is gonna be top and it
217:01 - is not gonna be eight but five so i want
217:04 - to push it
217:05 - down by five
217:07 - uh
217:08 - pixels so for that i'll leave a space of
217:11 - five pixels at the top means that means
217:14 - in between okay so loading sellers and
217:16 - this is this now
217:18 - i directly don't want the people to see
217:21 - the progress dialog and the loading
217:23 - sellers so what i want is for them to
217:26 - see better buys for two to three seconds
217:28 - and after that we show this loading
217:31 - sellers and actually start loading the
217:33 - sellers means
217:35 - uh sending requests to our server okay
217:37 - so for that
217:39 - what i'm gonna do is i'm gonna create a
217:42 - key value pair okay so for that i'm
217:44 - gonna need to change it from stateless
217:46 - to stateful because we are gonna have
217:49 - uh dispose methods and stuff okay so for
217:52 - that i'll over here create
217:54 - int
217:55 - show
217:57 - loading
217:58 - sellers
218:02 - as false okay and not end we can use a
218:05 - bool over here because it is either
218:07 - gonna be of false or true okay so
218:10 - now if now if that show loading uh show
218:16 - uh loading sellers is true then only we
218:18 - will show the progress dialog and the
218:21 - text to loading seller so what i'm gonna
218:23 - do is i'm simply gonna add an if
218:24 - condition over here
218:26 - show
218:28 - loading
218:31 - sellers
218:33 - okay so if this is true then only the
218:38 - progress dialog will be visible
218:40 - and the text okay so let's format this
218:46 - and save it
218:49 - and you can see the
218:50 - both the two things are now invisible
218:54 - and once
218:55 - two seconds pass we want to show those
218:58 - two things and actually start loading
219:00 - the
219:01 - sellers so let's do that thing so for
219:04 - that
219:06 - over here i'll call the function init
219:09 - state we have discussed about init state
219:11 - in one of the videos in the flutter
219:13 - series so if you don't know what is in
219:16 - its state what is the use of unit state
219:18 - i i recommend you go and look and do
219:20 - that
219:21 - so what we are going to do is we are
219:23 - going to write
219:26 - over here only our timer
219:31 - timer so timer is a
219:34 - is a is a widget means not a widget but
219:37 - a functional class that we get inside
219:40 - material
219:41 - okay or not material let's see what it
219:44 - is
219:47 - i think it is
219:48 - of the class
219:50 - a sync so it will automatically tell you
219:53 - to import the library yes so it is timer
219:56 - is available in the class async okay
219:59 - now over here you can see this is
220:01 - showing an error and this is again
220:03 - because of null safety because what null
220:06 - safety says is that if you are
220:09 - creating a variable
220:12 - of tie of a defined class means not
220:15 - using var or const then you should
220:18 - define it at the same moment so there
220:20 - are two options that we can do to get
220:22 - rid of this error either i put a
220:25 - question mark over here so that means
220:27 - that even if it is not defined
220:30 - we don't care about it so what will
220:32 - happen is that when the dart compiler
220:35 - starts executing it will say that this
220:38 - is a question mark okay and if it is a
220:40 - question mark then it will not care that
220:42 - the
220:43 - variable following that question mark is
220:45 - defined or not so this is one way
220:48 - and the other way is writing vr so vr is
220:52 - a generic term and nova and thus the
220:54 - compiler foregoes that if either it is
220:56 - defined or not so it doesn't care about
220:59 - that for the moment
221:01 - so let it be
221:02 - var we will see the other type in
221:05 - in the near future okay so now over here
221:07 - i'll write timer
221:09 - is equal to new timer
221:12 - okay and then i think
221:14 - uh this timer takes a few things that is
221:17 - the duration okay so for duration i'm
221:19 - gonna use the duration widget
221:23 - okay and in duration i'm gonna
221:26 - give seconds as three so we don't need
221:29 - the new over here because we are in
221:32 - flutter so uh now we have given duration
221:34 - three
221:35 - and then after that what we have let's
221:38 - see what are the two things it takes
221:40 - on function callback okay so over here
221:43 - it takes a function
221:46 - so what is basically happening over here
221:48 - that we are creating this timer which
221:50 - will wait for three seconds and as soon
221:53 - as three seconds is over it will run
221:54 - this function and all we want to do over
221:57 - here is change the value of show loading
222:00 - sellers to true
222:04 - to
222:04 - true
222:06 - all right
222:07 - so this is done
222:10 - and now in case someone cancels it or or
222:15 - even if we don't cancel it once we want
222:17 - we
222:18 - get away from the screen means once we
222:20 - close the app or navigate to other
222:22 - screen i want this timer to get
222:24 - cancelled and for that we have a method
222:26 - called dispose we have also discussed
222:29 - about the dispose in one of our flutter
222:31 - videos so if you don't know please go
222:34 - and look have a look at that video
222:37 - okay so
222:39 - uh dispose
222:42 - now in this pose we
222:44 - write everything before the super the
222:46 - reason is will you will also understand
222:48 - when once you go and look at the video
222:50 - so over here it is gonna be timer
222:53 - dot cancel
222:56 - okay so this is done
222:58 - now
223:00 - okay we don't need to give a semicolon
223:03 - over here this is the new format okay so
223:05 - if you are writing in an arrow function
223:07 - you don't need to give a semicolon
223:10 - and you just need to give a comma and
223:12 - then the next line of statement okay and
223:15 - what i want to do is write set state
223:18 - okay so that
223:19 - once the value is changed
223:22 - i am
223:23 - setting the state
223:25 - so that the build method gets
223:28 - executed again and at that time the show
223:31 - loading sellers will be true and if that
223:33 - is true then we will be able to see the
223:36 - size box and this text so you are under
223:39 - so i hope you are understanding the flow
223:41 - in which i am going so let's format
223:43 - everything uh save it or i'd better do a
223:46 - full restart
223:53 - okay so i'll do a full restart
224:02 - okay so it is
224:04 - so it uh it waited for three seconds and
224:08 - then it started showing loading sellers
224:11 - okay so
224:13 - why is it giving a warning over here
224:16 - prefer const with duration characters so
224:18 - what i'm gonna do is add a const over
224:20 - here
224:22 - okay uh are we getting any other errors
224:25 - so what is this
224:27 - prefer dynamic okay i will prefer
224:29 - dynamic
224:34 - okay let's see what are the other errors
224:35 - that we have or the warnings so
224:38 - there are no more warning so what i'm
224:40 - gonna do is do a restart
224:43 - okay
224:50 - this will take
224:52 - some time
225:05 - so once this is done it is now once
225:07 - three seconds are over we are able to
225:09 - see the loading icon and
225:11 - the text loading seller so what is gonna
225:13 - happen is that as soon as these two
225:16 - things appear we are gonna send a
225:18 - request to get uh the
225:21 - list of server list of sellers to our
225:23 - backend and then once we get the list we
225:26 - are gonna navigate to another screen and
225:28 - show the list of
225:29 - sellers so that is what we are gonna do
225:31 - in the next video thank you
225:34 - so in this video we are gonna fetch the
225:37 - list of sellers from the server so for
225:40 - that i actually
225:43 - as i told in the first video i have
225:45 - hosted it on my private server and you
225:48 - all can access
225:50 - the link so this is the sellers link
225:54 - okay so
225:55 - if i click on send i am able to get the
225:58 - list of sellers so if you
226:01 - didn't do the back end part you can
226:03 - directly use this api and if you did the
226:06 - back end part i suggest you use your own
226:09 - localhost api
226:10 - okay so
226:11 - let's get started
226:14 - so
226:15 - what i'm gonna do is i'm gonna import
226:17 - another package and
226:19 - and that will be called http
226:22 - so as to send the flutter requests
226:26 - okay requests from flutter
226:29 - and in my database i have added four of
226:31 - the characters okay so for you to use
226:40 - so this is the dot package that we have
226:43 - over here
226:44 - it is also null safety so we can use it
226:48 - means if it is not null safety then you
226:50 - are gonna get a lot of warnings in your
226:52 - compiler
226:53 - okay so then again i will add it in my
226:56 - pubspec.tml file
227:00 - save it
227:03 - and until it is running i will add a few
227:05 - comments here and there so as to make
227:08 - sense of the code
227:20 - this is initializing the timer
227:28 - disposing the timer
227:33 - this is the title
227:37 - okay
227:39 - and this is the
227:42 - loading animation
227:48 - and this is the
227:50 - loading text
227:53 - okay so while we were doing this our
227:56 - package has also been added okay so
228:00 - uh for all the server requests i'm gonna
228:03 - create a separate file and all the
228:05 - server requests we are gonna write it in
228:08 - that file so for that inside lib i am
228:10 - gonna create a new file and that will be
228:12 - called server
228:15 - handler dot
228:17 - dot
228:20 - okay so over here first i'll import http
228:26 - okay as http
228:30 - now i'm gonna create a class
228:32 - server
228:33 - handler
228:40 - okay and then over here i'm gonna
228:42 - paste my base uri
228:47 - not uri but url
228:50 - i'm sorry
228:51 - base url
228:56 - and that is gonna be
229:00 - this part up till api
229:03 - so i'll copy the
229:05 - entire thing
229:07 - okay
229:08 - and then simply paste it over here
229:13 - okay so this is done now i'll create a
229:16 - function to get the list of sellers
229:26 - okay and since we the server request
229:29 - will take some time it is gonna be
229:31 - for return type future and future of
229:34 - list and the list is gonna be
229:37 - sellers
229:38 - okay so right now we don't have a class
229:40 - called seller so we need to create that
229:42 - so inside this labor folder i'm gonna
229:45 - create a new folder called models
229:48 - okay and inside model i'm gonna have
229:51 - seller
229:54 - so
229:55 - over here it is class
229:57 - seller
229:59 - now uh
230:00 - let's say in our database what are the
230:02 - values that seller actually has
230:05 - so this is id
230:11 - the name
230:18 - okay email image address and description
230:22 - string name
230:23 - email
230:27 - image
230:30 - address
230:34 - and the
230:36 - description
230:38 - okay so these all are done
230:40 - uh now we need to initialize this that
230:42 - is why it is an error as i told in null
230:44 - safety so what i'm gonna do is i'm gonna
230:47 - write
230:48 - it like this
230:50 - okay
230:58 - so now the error is gone although we
231:00 - will still create a constructor
231:02 - and that is a seller
231:05 - okay
231:06 - dot from map
231:08 - and this is gonna take a map of type
231:12 - string and dynamic and we'll call it map
231:16 - and over here we are going to write this
231:18 - dot
231:19 - id
231:20 - is equal to
231:22 - into dot parse
231:26 - map id
231:28 - okay because because in postman you can
231:30 - see the id is coming as a string so we
231:33 - need to
231:34 - uh parse it to an integer
231:37 - okay so this is done now similarly i
231:40 - will have for the rest five so
231:45 - i'll simply copy paste it
231:49 - okay so i'll change the names
231:53 - this is gonna be name this is gonna be
231:55 - named
231:58 - email
232:00 - and email
232:03 - image
232:04 - and match
232:07 - address
232:08 - over here
232:09 - and over here so these values are gonna
232:12 - be the key names of your
232:15 - uh
232:17 - what do i say
232:18 - this
232:19 - response okay and a description
232:22 - this is the description okay so now you
232:26 - can see this is giving an error and a
232:28 - warning everything because first and
232:31 - i'll remove this int from here
232:34 - okay because that is not required
232:36 - because we are storing it in a string
232:38 - type and if we write interdot parse then
232:41 - the returned answer is gonna be of type
232:44 - integer and that is why it is showing an
232:46 - error
232:48 - okay so let's fix this
232:56 - now after that it is showing a warning
232:58 - that it is of
233:00 - uh don't access members with this okay
233:04 - so
233:06 - okay so now the error is gone
233:12 - so now you can see that uh the linting
233:15 - and flutter is damn strong they are they
233:18 - tell you directly what to do and what
233:20 - not to do
233:21 - so and that is very helpful so
233:24 - our seller model class is now created
233:26 - now i'm gonna import it in in the server
233:30 - handler okay so as i told for local
233:33 - imports we leave a line and use
233:35 - referential operators so import
233:39 - then we have the folder models
233:43 - and inside model we have seller so now
233:46 - since we have imported seller this
233:48 - seller
233:49 - should work
233:50 - okay and then we
233:54 - get
233:55 - sellers so this is gonna be the function
233:57 - name okay and it is gonna be of type
234:00 - async
234:01 - because we have future over here okay
234:05 - and then now since we are
234:10 - running a code for to the server so
234:12 - there my there are very high probability
234:15 - that there is gonna be some error so we
234:17 - better surround it with our try catch
234:25 - okay and before that i might like to
234:28 - know that our print
234:42 - so this is how it is gonna be
234:45 - now this get sellers is
234:49 - giving an error because we are not
234:50 - returning anything so so let's get to it
234:53 - so we are gonna create a list
234:55 - of seller and that is gonna be sellers
234:59 - okay let's initialize it
235:02 - and return it
235:05 - okay
235:06 - now in between we will do the post
235:08 - request so every request returns a
235:11 - response of type response okay so this
235:15 - response is an http package response
235:18 - we'll call it response and we use the
235:21 - await function here because the request
235:23 - is gonna take some time
235:24 - http dot get
235:29 - okay and then this takes a
235:31 - uri yes so it takes a uri so what we
235:34 - need to do is uri.parse
235:36 - and then we write our string over here
235:38 - so the string is gonna start with
235:41 - our base url so i'll simply do string
235:44 - interpolation
235:47 - okay then after base url uh we have gen
235:51 - and we have
235:52 - seller so let's check gen and sellers
235:56 - cool so this is it now let's simply
235:59 - print response for now okay okay so why
236:02 - is it giving an error
236:08 - okay
236:13 - so now i am simply gonna write print
236:16 - response
236:20 - dot body
236:22 - so let's see what is the response we get
236:24 - and to see what is the response we will
236:27 - need to call this function okay so
236:29 - before that let's see
236:31 - what are the warnings this could be
236:33 - final so let's make it final
236:36 - and what is the warning over here
236:38 - ignore avoid print on this line okay so
236:41 - uh this is just a linting thing because
236:45 - that is not that big an issue use reach
236:48 - rotor you throw a cord exa
236:50 - exception okay so we'll use rethrow
236:53 - so the rethrow basically means that we
236:56 - already have an exception and we want to
236:58 - throw it somewhere else so either you
237:00 - can do it to throw eve but that is not
237:02 - syntactically correct i i have a habit
237:06 - that's why i wrote but you should always
237:08 - use rethrow okay that is the better way
237:11 - so this is done now in our splash screen
237:14 - i'm gonna call that function so before
237:17 - that i need to import it so you can see
237:20 - the hierarchy first to the dart imports
237:23 - then the flutter or flutter respective
237:25 - packages import
237:26 - and then the
237:29 - local imports so
237:32 - import
237:34 - and then again i'll get out of this
237:36 - folder
237:37 - and we have our server handler okay cool
237:43 - so now over here after this is set state
237:46 - i also want to run another method that
237:49 - is
237:50 - get
237:51 - sellers
237:53 - okay so we call this method as well now
237:56 - we need to create this method
237:59 - avoid get
238:01 - sellers
238:04 - so you can see over here inside an arrow
238:07 - function we only use
238:08 - commas and not semicolon this is a very
238:11 - new thing
238:12 - so
238:14 - please don't freak out and means go with
238:16 - the flow
238:18 - so server handler
238:24 - dot
238:26 - get sellers
238:28 - okay and then we get the response in
238:30 - then because it is a future
238:33 - okay and we get the error in dot catch
238:35 - error so if there is some error for now
238:38 - i'll simply print it later we will
238:40 - create custom to custom notification
238:43 - posts for it we will see most probably
238:46 - in the
238:47 - next or two three videos later okay so
238:50 - for now i simply want to print the error
238:53 - and
238:54 - print the value so so just as to check
238:56 - what is happening although now it will
238:58 - be null because we are not
239:01 - returning anything actually we are
239:03 - returning an empty empty string empty
239:06 - array over here so we will over here
239:08 - also ignore print
239:10 - okay
239:11 - it it it is giving such error because uh
239:14 - printing the response is
239:17 - uh not suggested i'm sorry for this
239:20 - means
239:21 - the compiler expects you to do something
239:24 - not just simply print it
239:30 - so we will try to avoid the warnings as
239:33 - much as possible
239:35 - now let's restart
239:38 - okay so let's see what is the response
239:41 - there might be some error so
239:44 - let's see
239:56 - okay
239:58 - server handler and no host specified
240:02 - no host specified i think i need to add
240:05 - a
240:06 - http in the starting
240:09 - okay so that might be a error in postman
240:12 - it is done automatically
240:16 - okay so let's let's do it again and see
240:39 - okay so we did get the response
240:42 - okay so now let's simply parse it
240:46 - okay so let's see what is the type of
240:48 - body so the body is of type string we
240:51 - need to convert it to json okay so for
240:54 - that what i'm gonna do is i'm gonna use
240:57 - a function called json decode okay
241:01 - for that we need to import convert
241:04 - convert library which is provided by dot
241:12 - okay so we have the convert library now
241:15 - let's convert it
241:22 - will call it sellers
241:26 - dynamic
241:28 - sellers
241:29 - is equal to
241:31 - json dot decode
241:38 - response
241:41 - dot body
241:44 - dot
241:46 - okay so this is it we get the response
241:52 - and then we get the sellers
241:58 - okay so what is basically happening over
242:00 - here that we are converting this string
242:03 - to json okay and then we are getting the
242:06 - sellers list from it okay so let's see
242:11 - why is this giving another undefined
242:13 - value json
242:15 - so i already did import json convert
242:18 - okay so this was an error i'm sorry
242:21 - okay so that is gone now dynamic sellers
242:25 - the name sellers is already defined okay
242:28 - so
242:29 - sellers list okay and instead of dynamic
242:32 - i'm gonna make it okay let it be dynamic
242:37 - or maybe a list
242:38 - okay
242:40 - so now
242:43 - for
242:45 - uh map
242:47 - m in
242:49 - sellers list means getting each value
242:52 - from this list what we are gonna do is
242:54 - we are going to convert it to convert it
242:57 - to type seller and store it inside
242:59 - sellers list so for that i'll write
243:02 - sellers
243:03 - dot push
243:05 - or i think it was add
243:08 - yes add and then i'm gonna write seller
243:11 - dot from
243:12 - map
243:13 - and the map is gonna be m
243:16 - okay
243:18 - so now once this is done uh there is
243:20 - gonna be some issues with the type
243:22 - casting
243:23 - ok so let's see what it is
243:30 - the argument type map dynamic cannot be
243:34 - assigned to map string dynamic
243:37 - okay so i think over here we have map
243:39 - string dynamic
243:40 - i'm gonna make it
243:42 - dynamic only okay so this hardly changes
243:45 - anything
243:47 - let's save that
243:50 - and this over here
243:54 - so now let's see if the if we are
243:56 - returning something sensible or not
243:59 - so let's
244:01 - wait for the
244:03 - system to hot restart
244:10 - so it did restart and we got to four
244:13 - instances of seller that means this
244:15 - function is complete we are getting the
244:18 - response we are converting it and then
244:20 - we are sending it back to the
244:24 - place where it was called okay which was
244:26 - this screen and over here we have the
244:28 - print statement and this print statement
244:30 - is
244:31 - printing this thing so it is pretty neat
244:34 - now what happens is that once we get the
244:37 - sellers we want to navigate to the
244:41 - sellers screen okay so for that first
244:43 - i'll create a new file over here and
244:46 - that will be called sellers screen
244:51 - dot dot
244:54 - now inside this again i'll import the
244:56 - flutter material
245:05 - and then create a stateless widget for
245:07 - now okay
245:18 - okay again i missed
245:21 - the closing
245:23 - codes over there
245:24 - okay that is why so i'll create a
245:26 - stateless widget for now and that is
245:29 - gonna be sellers screen
245:31 - okay so over here again this is the
245:33 - screen so we can't use a container
245:35 - directly we need to have scaffold okay
245:38 - cool and inside the scaffold we have
245:41 - body
245:43 - now the body has a container
245:46 - and the container will have an alignment
245:48 - of center
245:56 - okay
245:58 - and then there is gonna be a child which
246:01 - is a text widget which will see say
246:04 - a seller's screen
246:08 - okay so this is done
246:12 - let's save this
246:15 - okay
246:16 - now
246:17 - i'll also create a route for it so
246:25 - uh
246:26 - public static
246:29 - okay we don't have public overhead
246:31 - i think static const
246:35 - route name is enough and the route name
246:37 - is gonna be
246:39 - a seller's
246:41 - screen
246:43 - okay so this is done now let's add this
246:46 - route in our main dot dot file
246:48 - okay so over here
246:50 - i'm sorry over here first we will need
246:52 - to import the
246:55 - sellers screen so import
246:57 - screens
247:01 - and the seller screen
247:04 - okay now over here we have another
247:08 - method called routes okay which takes a
247:11 - map
247:12 - okay and the first one is gonna be first
247:15 - route is gonna be a seller's screen
247:21 - dot route name
247:23 - and it is gonna return
247:26 - sellers screen
247:34 - okay
247:35 - so it is not uh simply like this but
247:37 - with a
247:38 - context or if you don't want the context
247:41 - that is
247:42 - uh
247:43 - advised that you use an underscore okay
247:46 - that this is called a placeholder okay
247:49 - so
247:50 - yeah so now over here we have a warning
247:54 - uh prefer const okay i will prefer const
247:57 - over here also i will have to prefer
247:59 - const
248:01 - okay so the warning is gone yes so the
248:05 - route is now added now let's actually do
248:08 - the
248:09 - routing
248:12 - okay so for that in the splash screen
248:15 - once we get this
248:17 - what i'm gonna do is
248:19 - navigator
248:22 - dot off
248:27 - context
248:29 - okay dot
248:30 - pop
248:31 - and push
248:33 - named
248:35 - and the name is gonna be the route name
248:37 - so to get the route name we need to
248:39 - import that screen so import
248:45 - and the screen is
248:47 - a seller's screen
248:49 - okay so over here i'm gonna write
248:52 - sellers screen
248:58 - dot route name okay
249:01 - so this is done now we can
249:04 - remove this avoid print thing
249:06 - okay
249:07 - so
249:09 - okay this seems fine now let's try
249:13 - running this so what is gonna happen is
249:15 - that as soon as we get to the list of
249:18 - sellers it should go to the category
249:19 - screen so let's see if that works or not
249:40 - okay so you can see as soon as we got
249:42 - the
249:44 - list of sellers it went to seller screen
249:46 - okay i'm sorry my mail has opened
249:53 - yeah so i'll run it again
250:00 - so now it is better wise okay and once
250:03 - it starts now it has sent the request it
250:06 - got the response and it
250:08 - successfully came to the seller screen
250:10 - so now in the next video we shall
250:13 - make the ui for this okay
250:15 - so this was for the video thank you
250:18 - so in this video we are gonna continue
250:20 - with the flutter part of our project so
250:24 - up until the previous video we have made
250:26 - the splash screen added animation to it
250:30 - okay and while the animation was running
250:32 - we were fetching the list of sellers and
250:34 - once we had the list of sellers we were
250:38 - moving to the seller screen
250:40 - so this part is done so now today what
250:42 - we are going to do is we are going to
250:44 - make the ui
250:45 - of the seller screen so means we
250:47 - actually have the ui we just need to
250:49 - implement it means write flutter code
250:51 - for it
250:52 - so this is the ui that we are gonna make
250:54 - so let's start
250:56 - so we'll start from the top and over
250:59 - here we have better vice and the user's
251:01 - image so for now in place of users image
251:04 - it is gonna be a simple circle okay
251:07 - because we will have to make a separate
251:09 - pipeline for user because
251:12 - we are gonna ask the user to login or
251:15 - sign up
251:16 - only when they are checking out from the
251:19 - app
251:20 - okay so until then the user can be
251:22 - anonymous and can be verified so we will
251:25 - be
251:26 - we will have to tackle both the
251:28 - situations and we will have to write
251:29 - certain different types of code for that
251:32 - so we will be doing later in this
251:33 - project for now i am just going to put a
251:35 - simple circle and move on with the
251:37 - seller's ui
251:39 - so let's start
251:41 - so this is obviously in the seller
251:43 - screen
251:44 - over here we have child i'll remove it i
251:47 - need to give a comma over here
251:50 - okay now after this this container will
251:53 - have a child and the child is gonna be a
251:55 - column
251:57 - okay
251:58 - cool now inside column we will have
252:01 - children
252:02 - now the first child is gonna be a row
252:05 - and the row will have these two items
252:07 - okay so in a row uh two items are
252:10 - displayed one after another means one
252:12 - next to another
252:13 - okay so the first item as i just said is
252:16 - gonna be a row
252:19 - okay then the row has children's
252:22 - now the first children is gonna be a
252:24 - text and the text is
252:27 - better buys
252:28 - okay
252:32 - let's save this
252:33 - okay so it is better wise is over here
252:36 - at the top that is we will fix this but
252:38 - before that let's add a circle towards
252:40 - the right so for that i am gonna create
252:43 - a container
252:47 - okay now container we it has a
252:50 - decoration and the decoration is a box
252:52 - decoration
252:55 - okay now inside this box decoration we
252:57 - have a property called shape and then
253:00 - over here we can give the shape
253:02 - from the box the shape enum and we want
253:04 - to make it circle so it is circle
253:08 - okay now let's give it a certain height
253:11 - and width okay so the height is gonna be
253:16 - 50 and the width as well is gonna be 50.
253:19 - so if we want a regular circle we need
253:22 - to give the height and breadth has same
253:24 - if we don't we are gonna get an ellipse
253:27 - okay so i hope my point is clear over
253:29 - here
253:30 - so now
253:32 - uh the circle is here but i think we
253:35 - need to add some color to it
253:37 - okay so let's do that over here inside
253:40 - decoration i'll add color
253:42 - and the color is gonna be from the color
253:45 - senum
253:46 - colors dot let's say pink for now okay
253:49 - this is just for testing we will be
253:51 - changing it to an a suitable color means
253:54 - that which suits the eye
253:56 - okay so now you can see this is
253:59 - means sticking to the previous item but
254:02 - i want them to be at the two corners so
254:04 - for that inside row we have another
254:07 - property that is called main axis
254:09 - alignment so in a row the main axis is
254:11 - horizontal axis
254:13 - and the cross axis is the vertical axis
254:16 - and the vice versa is in column so in
254:19 - row in main axis alignment we again have
254:21 - a main access alignment enum and i am
254:23 - gonna give space between
254:26 - so what space between basically does is
254:28 - leaves the maximum space that it can get
254:30 - between the objects
254:32 - okay so now you can see the once this
254:35 - loads they both are
254:38 - at that at the two corners
254:40 - okay so now we have a bunch of warnings
254:44 - so i think adding a const over here
254:46 - would do for now
254:48 - yes okay over here also we will add a
254:51 - constant it will be done
254:55 - so both the warnings are gone now let's
254:57 - uh
254:58 - make it like our ui so for that in the
255:02 - row
255:04 - uh what i'm gonna do is i'm gonna
255:08 - add a padding means surround it with a
255:10 - padding and the padding is gonna be
255:14 - let's say symmetrical
255:16 - okay so you might be knowing there are
255:19 - three types of
255:20 - padding that is symmetrical means we
255:22 - give one value for a horizontal axis one
255:25 - volume one value for vertical then we
255:28 - have an only parameter that is for all
255:30 - the four sides separately and then and
255:32 - all for all the four at once
255:35 - okay so i have already made videos on
255:37 - these you can just go and look over
255:40 - there so let's give a padding
255:42 - horizontally of
255:44 - 20. okay and let's see how it looks
255:48 - okay
255:49 - now let's bring it down a little bit so
255:52 - it is vertical
255:54 - vertical is gonna be 30.
256:04 - i think a little bit more
256:08 - okay
256:09 - now let's edit this better buys okay so
256:13 - once we get back to the design
256:16 - we can see that
256:18 - the better biases of the font
256:21 - pop-ins and semi-bold so let's do that
256:25 - okay so for that we need to import our
256:27 - google fonts package
256:30 - so that is google fonts
256:33 - dot dot
256:35 - now over here where we have the text
256:38 - inside this we are gonna add style
256:41 - okay so
256:43 - style
256:44 - and it is
256:46 - sorry with a capital g
256:49 - google fonts
256:56 - dot
256:56 - poppins
256:59 - okay and now once we have poppins over
257:02 - here we can't have const because this
257:04 - style is not const and it will give us
257:06 - error
257:07 - so
257:08 - i think all these things are pretty much
257:10 - understood by now
257:12 - okay why is it
257:14 - showing and warning so google fonts
257:17 - doesn't exist i think google font might
257:20 - exist
257:22 - okay i think i am messing with the name
257:31 - google fonts
257:34 - okay google fonts it is
257:40 - let's see here's google fonts and then
257:42 - we have pacific over there over here it
257:44 - is poppins
257:45 - now inside this we first need to change
257:48 - the font weight
257:54 - okay so the font weight
257:57 - is gonna be
258:06 - okay so the error is because i have not
258:09 - closed it over here so this is a silly
258:11 - mistake i i don't know why i make so
258:14 - much time
258:15 - uh so font to it and then let's make it
258:18 - 500 and see how it looks
258:22 - so the
258:25 - let's wait for this to finish okay so
258:27 - the font is applied uh
258:30 - now let's increase its size so for that
258:32 - we have font size and the size is gonna
258:35 - be 20 i guess
258:40 - let's see how this looks
258:42 - after that we can decide
258:45 - or what is the size that we have here so
258:47 - it is 23
258:48 - okay okay no problem
259:02 - so let's save this and see
259:05 - okay i think i will make it to 23 only
259:11 - okay now i need to change the color to
259:14 - this
259:15 - so let's select it
259:17 - and then over here inside color
259:20 - we give the color
259:22 - using the color class
259:25 - so like so many times i'm using the word
259:27 - color
259:34 - so now we have given the colors let's
259:38 - see if it is applied or not
259:40 - okay so it did apply uh
259:43 - but uh i think there is more spacing in
259:46 - both the sides okay then it is
259:49 - over here so let's
259:51 - add that okay so horizontal i'm gonna
259:53 - make it from 20 to 30
259:56 - okay
259:59 - now instead of pink i'm gonna make it
260:03 - a gray so that it is
260:05 - like a blank and
260:07 - means not eye-catching and not
260:10 - disturbing the feel of the app okay so
260:12 - these all are material ui basics which
260:15 - every developer should know okay so this
260:18 - is done
260:20 - now after this we shall start with the
260:22 - list of sellers
260:24 - okay so for that let's get out of this
260:27 - row first so this row is inside padding
260:30 - okay i'm gonna comment it so that it is
260:33 - better
260:35 - header
260:36 - so this is the
260:38 - header over here
260:40 - cool now after this we are gonna have
260:43 - the
260:44 - list of
260:45 - sellers
260:47 - okay so for that what i'm gonna do is i
260:50 - can use a list view but i prefer using a
260:53 - column okay so
260:55 - i'll create a column now again as we all
260:58 - know column has children
261:01 - now instead of a map what i'm gonna do
261:04 - is
261:05 - we have the sellers over here i guess
261:08 - okay so first we need to send the seller
261:11 - from splash screen and receive it in the
261:14 - seller screen so let's do that first
261:17 - so over here we are sending it
261:20 - okay now
261:23 - over here we can send the arguments by
261:26 - writing arguments and the argument is
261:28 - gonna be
261:30 - value
261:32 - okay
261:36 - so this is done now we need to receive
261:39 - these values okay
261:41 - so for that first i'll import the seller
261:44 - class over here otherwise it is gonna
261:46 - give us lots of warnings
261:49 - so we go inside models
261:52 - and then we have a seller dot dot okay
261:58 - so now let's i'll create a list inside
262:00 - the build method not inside the class
262:03 - because of null safety it is better you
262:05 - do it over here if you do it over here
262:07 - you will have to make it a
262:09 - var type of
262:12 - variable and then whenever you use we
262:14 - will have to use the s keyword so that
262:16 - is a lot of work instead of that i will
262:18 - be creating the variable in the build
262:20 - method itself
262:22 - okay so we are gonna get a list
262:24 - a list of seller
262:27 - okay and i'm gonna call it sellers
262:30 - and we get it from model route
262:38 - dot off
262:42 - and inside this we have context
262:45 - dot settings i guess
262:48 - yes settings
262:50 - dot arguments
262:53 - okay so we got to the
262:55 - sellers now let's type caster task
262:57 - service as a list of
263:01 - seller
263:03 - okay so what we are actually doing over
263:05 - here is we are getting the arguments
263:07 - over here and now we simply can't store
263:10 - it inside a data type of inside a
263:13 - variable of type list seller so we are
263:15 - type casting this argument as
263:18 - list seller because we already know that
263:21 - the argument that we are gonna get over
263:23 - here is at the end gonna be of type list
263:26 - seller okay so over here it is giving a
263:29 - error and that is because of null safety
263:32 - so i told you null safety will
263:36 - is a lot of trouble okay so what i
263:39 - basically did was add us added a
263:42 - question mark uh
263:44 - exclamation mark over here okay so by
263:46 - that what it means that if this part is
263:48 - null it will not execute
263:51 - after it okay so by that we prevent an
263:54 - error
263:55 - okay so this is done now let's use this
263:57 - sellers so for that inside this children
264:00 - i'm gonna write
264:02 - sellers
264:05 - dot map
264:09 - okay so means like i'll
264:11 - get each item and do something to it and
264:14 - then i again convert it to list
264:18 - okay so now uh to check if everything is
264:20 - working or not over here i'm gonna
264:22 - return a simple container
264:25 - container
264:27 - i'm sorry not alignment container of
264:30 - height
264:32 - 50
264:34 - and of color
264:40 - colors
264:42 - dot blue
264:44 - okay so this is just to see if this
264:47 - thing is intact or not
264:50 - okay so once this is done okay so now it
264:52 - is of course gonna give an error because
264:54 - we need to come from splash screen to
264:57 - have some value for this
264:59 - okay so let's do a full restart
265:10 - and we get a blue
265:12 - section over here these are four items
265:14 - actually but they are not separated so
265:17 - we are unable to
265:19 - make the difference
265:20 - okay so now i'm gonna create an item for
265:22 - it so now the item for it is in itself
265:25 - gonna be pretty long so i'm not gonna
265:27 - keep it in the same file it will uh
265:29 - increase the length of code and that
265:31 - will
265:32 - in turn make it very hard to navigate
265:34 - and fix errors so for that i'm going to
265:36 - create a new
265:38 - folder
265:39 - uh that will be called widgets okay and
265:42 - inside this i'm going to create a new
265:44 - file that will be called
265:46 - seller item dot dot
265:50 - okay so i have a seller item
265:53 - now let's
265:54 - import material
265:57 - dot dot
266:00 - okay uh now after this over here let's
266:04 - okay sorry first let's create a
266:07 - a class over here that is a stateless
266:09 - class
266:10 - okay again i forgot the quotes over here
266:14 - now let's create a stateless class over
266:16 - here and that is gonna be called
266:19 - a seller item
266:22 - okay and then it will again
266:24 - return a variable a container of height
266:28 - 50
266:29 - and this time of color pink
266:36 - okay
266:40 - now let's add it inside the seller
266:42 - screen so let's import this
266:47 - so for this let's get out of the screens
266:49 - folder go inside widgets folder
266:53 - and then select the seller item okay and
266:57 - now over here instead of returning this
267:01 - i am simply gonna return the
267:04 - seller item
267:09 - okay so this is done
267:12 - let's save this and it
267:14 - turned pink okay so prefer const
267:18 - we will prefer const
267:22 - now the seller item needs this e okay so
267:26 - let's take it okay because that has the
267:28 - details of seller and we need that
267:31 - inside our item to display it
267:34 - okay so first we'll import the model
267:36 - class
267:40 - that is inside models folder
267:42 - and then we have seller
267:44 - now over here i'm gonna create
267:47 - a seller and that is seller
267:51 - okay now
267:53 - we can use this constructor only this is
267:55 - the by default constructor uh so what
267:58 - i'm gonna do is add a comma add add the
268:01 - rate required which means it cannot be
268:05 - avoided
268:06 - required this
268:09 - dot seller
268:11 - okay so with this it is done
268:14 - this dot seller
268:17 - seller can't have a value of null
268:20 - okay so add required i did that required
268:24 - okay so i guess the way of writing
268:27 - required has changed or something
268:29 - okay i'll remove the const from here
268:32 - cool now we have a warning over here so
268:35 - to fix that
268:36 - i'm gonna add final to it
268:38 - and then over here we can again add
268:40 - const
268:41 - okay so you might be seeing that i am
268:43 - doing something then changing then doing
268:45 - it back because i am also not that well
268:47 - acquainted with null safety i just
268:50 - follow all the warnings that come up and
268:52 - act accordingly okay so now over here as
268:55 - that is a named parameter we need to
268:59 - give the name
269:00 - okay
269:03 - now
269:04 - e
269:05 - invalid const value e we can't have a
269:07 - const over here anymore okay so this is
269:10 - done
269:14 - let's do a full restart
269:17 - okay now uh inside this seller class i
269:20 - want all the container to have some
269:23 - margin
269:24 - okay so
269:29 - what i'm gonna do is i'm gonna add
269:30 - margin okay and the margin is const
269:34 - agent sets
269:37 - dot
269:38 - all i think for the time being
269:40 - 10.
269:43 - let's see so now we get four items over
269:46 - here now we shall continue with the ui
269:49 - in the next video thank you so up until
269:52 - the previous video we have made
269:55 - our splash screen getting the list of
269:58 - sellers and then routing to the splash
270:01 - seller screen so you can see over here
270:04 - now today we are gonna continue making
270:07 - this screen look like this screen
270:10 - okay so let's get started so these all
270:13 - are basically our seller item so i'm
270:15 - gonna make changes in that
270:17 - okay so i'll give it let's say a height
270:19 - of 200
270:22 - okay so now the height is appropriate
270:25 - but we are getting a render flex error
270:27 - and the error is because i am not using
270:29 - a list but i am using a column with a
270:32 - map function so in the seller screen
270:35 - you can see that the list of sellers is
270:38 - a column and not a list
270:40 - okay so to fix this what i'm gonna do is
270:43 - i'm gonna
270:44 - surround this container the topmost
270:47 - column
270:48 - okay with
270:49 - another widget and the widget is single
270:54 - child
270:55 - scroll view
270:57 - okay so now once i add this then let's
271:00 - save this and now we shouldn't get this
271:02 - error okay so now you can see the error
271:04 - is gone and it is scrollable as well
271:08 - okay so now after this let's add border
271:10 - radius to it so
271:13 - let's see what is the border radius that
271:15 - we apply over here and it is 10 as you
271:18 - can see so let's apply the same okay so
271:21 - for that we will create our decoration
271:24 - and then the decoration will be a box
271:27 - decoration widget
271:32 - okay now since we have box decoration
271:35 - the colors can't be outside so we'll
271:38 - move it inside the decoration and then
271:41 - finally apply the border radius so for
271:43 - that we have another parameter called
271:45 - border radius and then it will take a
271:47 - border radius
271:49 - dot circular widget
271:52 - okay and the radius is gonna be 10 as in
271:55 - 10 pixels
271:56 - okay let's format it save it
272:00 - and now we get the border as
272:03 - we get rounded borders and the radius is
272:06 - 10 pixel
272:07 - okay so now the next thing is the colors
272:10 - okay so you can see all these items have
272:12 - different colors so i'm going to create
272:15 - a list of this colors and then send it
272:18 - to this item okay so now the list of
272:21 - colors is gonna be constant so as per
272:23 - the standard practice it should be
272:25 - inside our init state and for that we
272:28 - need to convert it from a stateless to a
272:31 - stateful with check
272:33 - okay and then over here i am gonna call
272:35 - init state
272:40 - okay now over here i am gonna create a
272:43 - list
272:44 - color
272:46 - seller
272:48 - items
272:50 - background
272:52 - color
272:53 - okay
272:54 - let's initialize it
272:56 - now i'll add values to it inside in its
272:59 - state
273:00 - okay so over here i'm gonna write
273:02 - sellers
273:05 - seller items
273:07 - uh seller items background color
273:10 - dot add and then over here another color
273:13 - so now as i have already discussed for
273:15 - color we always start with zero x f now
273:19 - this f f can change that is actually the
273:21 - alpha value you can look for different
273:24 - types of alpha value on the internet
273:26 - okay so the first color we can find it
273:28 - over here so i'm simply gonna copy it
273:32 - paste it over here
273:33 - and there are gonna be three more like
273:35 - this
273:36 - okay
273:37 - so now this second item i'm gonna copy
273:40 - the color paste it on the second row
273:44 - okay so yes this is correct
273:48 - now let's copy this
273:52 - paste it over here
273:54 - and the last one
273:58 - okay so i'll copy it
274:01 - and paste it okay so this is done now
274:04 - this is giving us a warning and the
274:06 - warning
274:07 - will be gone
274:09 - if we add a const over here okay so
274:12 - let's add a const
274:17 - so you can see as soon as i add the cons
274:20 - to the
274:21 - error is gone const is a keyword which
274:24 - means constant
274:26 - okay now let's send this color to these
274:29 - items so for sending first we need to
274:31 - receive it over here
274:33 - okay
274:34 - so for that i'm gonna create another
274:37 - widget
274:38 - color
274:39 - and i'm gonna call it background color
274:42 - now i'm gonna take it in my constructor
274:45 - so first we need to give required
274:47 - because it is final
274:49 - this dot
274:51 - background color
274:53 - okay
274:57 - now let's format it okay and over here
275:00 - instead of color
275:02 - i'm gonna make it background color
275:10 - so we have background color
275:12 - okay
275:13 - now we need to give a background color
275:16 - in our seller screen okay so let's do
275:18 - that
275:21 - over here we will
275:23 - have another named parameter that is
275:25 - background color
275:27 - and then over here i'm gonna give let's
275:29 - give one color for starting and then we
275:31 - will figure out a way to give the color
275:35 - according to a pattern okay so i'm gonna
275:38 - say seller
275:41 - items background color and then zero
275:43 - okay means as in the first item
275:50 - now give it a minute to understand okay
276:18 - okay so there is a small error over
276:20 - there i need to give another
276:23 - closing parenthesis so now the error is
276:25 - gone okay
276:27 - now let's do a full restart okay so that
276:29 - both gets saved at the stay same time
276:32 - okay so let's see
276:38 - now the splash screen is here it is
276:40 - loading the sellers and yes we get the
276:42 - first color applied to all the four
276:45 - now we need to apply uh
276:48 - one two three four in accordance with
276:50 - the list okay so let's create another
276:53 - method that will return the index
276:56 - okay so for that i'm gonna make another
276:58 - method int
277:00 - get
277:02 - color index
277:04 - and this will take the
277:08 - index means the index of seller item
277:11 - okay so like
277:12 - 0 1 2 3 it will work fine but what if it
277:15 - is more than that
277:17 - okay so what i'm gonna do is i'm gonna
277:20 - simply
277:23 - return
277:24 - index
277:27 - mod four
277:30 - okay so now with this what will happen
277:33 - that the remainders can be zero till
277:35 - three that are four items and we have
277:37 - four items over here and now that i
277:40 - think of it we don't need to create a
277:42 - separate function for here for just this
277:45 - small piece of code i'm gonna directly
277:47 - apply it over there
277:51 - okay so
277:53 - over here instead of this
277:57 - what i'm gonna do is index modulus for
278:00 - now index we will get for o from here so
278:02 - what i'm gonna do is sellers
278:06 - dot
278:07 - index of
278:08 - e
278:09 - okay so now we get the index and then we
278:11 - apply modulus 4 and then whatever is the
278:14 - remaining we send it as our
278:16 - background color okay so i hope you
278:19 - understood this calculation part now
278:21 - let's save this and see
278:23 - okay so you can see this is working fine
278:25 - four different colors are applied to all
278:27 - the four now after this if there were
278:30 - more items also the pattern would be
278:33 - same okay so i hope you understood
278:36 - now since now that the background is
278:39 - done let's add content okay before
278:41 - content you can see the margin towards
278:43 - the right or left or very less as in in
278:47 - the ui it is little bit more
278:49 - and among each other as well okay so
278:52 - let's fix that first
278:54 - okay so instead of margin all i'm gonna
278:56 - make it
278:57 - symmetric
279:00 - and then gonna make it
279:02 - vertical
279:04 - so vertical it is gonna be 15
279:08 - okay because if it is 15 then over here
279:10 - it is going to be 30 15 from this item
279:13 - 15 from this item so you need to do the
279:17 - calculations accordingly and then
279:19 - horizontal
279:21 - let's make it 20
279:24 - let's see how it looks
279:29 - okay so
279:30 - there is little bit more
279:34 - let's make it 30
279:38 - okay this is fine now
279:42 - but
279:43 - okay i'll let it be 20 only if there is
279:46 - more space left i will bring it back to
279:49 - 30. okay so you need to do this little
279:51 - tweaks on your own because it is not
279:54 - that
279:55 - as you design the screen and all those
279:58 - things are always gonna be same for an
280:00 - actual device okay
280:02 - what i mean is that this is the screen
280:05 - size that we have taken for our design
280:07 - but
280:08 - the screen size in actual development is
280:11 - a little bit less so we need to
280:13 - means do little bit tweakings here and
280:15 - there accordingly okay i hope you get ma
280:18 - get the just what i'm trying to say so
280:20 - in this video we are gonna continue with
280:23 - our seller screen ui okay so
280:26 - let's directly get to it okay so now uh
280:29 - we are gonna add the content to these
280:32 - items
280:34 - okay so the layout is gonna be simple
280:36 - this is gonna be a row so this will be
280:39 - the first item of the row this will be
280:41 - the second item of the row and now
280:43 - inside the first row we will have a
280:45 - column where columns first item is gonna
280:48 - be the name columns second item will be
280:50 - the address
280:52 - and the third item will be the rating
280:54 - now since we don't have a rating for now
280:57 - we will simply write no rating okay so
281:00 - let's get started so for that i'll go
281:03 - inside my seller item inside this
281:06 - container i'll create a child the child
281:08 - is gonna be a row
281:10 - okay
281:13 - now the row now let's
281:16 - the
281:19 - just one minute yes so the row takes
281:22 - children
281:23 - okay
281:25 - now the first child is gonna be text and
281:28 - the text is simply gonna be seller
281:32 - dot
281:33 - name
281:35 - okay and the next one is gonna be our
281:38 - image so i'm gonna write image
281:41 - dot network
281:44 - and then
281:45 - seller
281:46 - dot
281:47 - image
281:49 - okay so now why are we getting an error
281:52 - over here and that is because of null
281:54 - safety
281:55 - so i'll add a exclamation mark over here
281:58 - and here as well
282:00 - okay
282:02 - so this is because in our seller in our
282:06 - seller.we had this question mark
282:09 - everywhere so that is the reason
282:12 - okay so now we are getting an error okay
282:15 - that let's see okay so that is because
282:17 - our url is incomplete because what we
282:20 - are getting from the database is just
282:23 - the partial url the
282:26 - base part i need to add it myself so for
282:29 - that i'll go inside server handler
282:32 - copy this url okay so this is our base
282:35 - url and then paste it over here so over
282:38 - here i'll use again string interpolation
282:42 - okay so first i'll add
282:44 - sorry first i'll add codes then
282:48 - curly brackets then i give a dollar over
282:51 - here
282:52 - okay which marks it as a string
282:54 - interpolation and then
282:56 - i write this now instead of api this is
282:59 - gonna be assets because i have created
283:02 - an assets folder where i am storing all
283:04 - the images on the server
283:06 - okay so now once this is done let's do a
283:09 - restart
283:12 - okay now i'll do a full restart
283:19 - so it will again give error because the
283:21 - spelling over here is wrong i am i'm
283:23 - sorry for that
283:41 - okay so now you can see the image has
283:43 - started loading
283:45 - now give it a minute once we give it a
283:47 - few seconds and then all the images will
283:49 - be loaded okay
283:52 - so now since we have the images we are
283:55 - good to go
283:56 - okay so now i want this image to be on
283:58 - the
283:59 - rightmost corner okay so for that in a
284:03 - row what i'm gonna do is i'm gonna give
284:06 - main axis alignment
284:08 - okay
284:09 - so main access alignment
284:12 - and the main axis alignment is gonna be
284:15 - space between
284:21 - mint is gonna be
284:23 - space between
284:25 - okay so that it will leave all the space
284:27 - in between the two items
284:31 - so now you can see the image is pushed
284:33 - to the right
284:34 - but
284:35 - not so much to the right i wanted to
284:38 - have a little bit margin towards the
284:40 - right so for that what i'm gonna do is
284:43 - i'm gonna wrap this image with uh
284:47 - let's say padding okay
284:49 - and then instead of all i'm gonna make
284:51 - it only and then it is
284:53 - gonna be only in the right now instead
284:56 - of it let's make it 10 and c
285:00 - okay
285:02 - so now i have
285:04 - margin over here
285:06 - okay so this looks pretty decent i i'll
285:09 - try increasing
285:11 - let's make it 15
285:14 - okay so now this is fine but then the
285:18 - text over here is little bit small
285:20 - okay so anyways let's see what we can do
285:23 - now let's
285:24 - get to the content part so i'll remove
285:27 - this text instead of that i'm gonna add
285:30 - a column over here
285:32 - okay
285:33 - now the column is gonna have children
285:36 - the children will first have a text the
285:39 - first text is gonna be the name
285:42 - so seller dot
285:45 - name then a question mark as we just saw
285:48 - for null safety
285:50 - then the
285:52 - address and then the uh then our text
285:55 - simply saying no rating
285:57 - so seller dot
286:00 - address
286:01 - and then over here our text that
286:04 - says no rating
286:08 - okay now over here i can add a const
286:11 - because it is constant it is not
286:13 - changing
286:14 - okay
286:15 - let's see how it looks
286:18 - so i was hoping for some i was expecting
286:21 - that there will be some error okay so
286:24 - this is mainly because of the address so
286:27 - we will deal with address later
286:30 - first let's make the
286:31 - name as we have in the ui okay
286:36 - so for that i'm gonna wrap it with a
286:38 - padding
286:41 - and the padding is gonna again be only
286:44 - and then i want
286:46 - from left
286:48 - to b5
286:51 - from top
286:52 - to b10
286:55 - and from right
286:58 - now i don't want anything from right
287:00 - okay so let's see
287:04 - now i'm gonna make it little bit more
287:06 - from top it is gonna be 20 from left
287:09 - right is gonna be 20
287:14 - from top let's make it 50
287:18 - okay
287:19 - so this is done
287:21 - now let's add a decoration so for that
287:24 - i'm gonna use style now the style is
287:26 - gonna be off google font so let's first
287:29 - import that
287:31 - import
287:34 - google fonts dot dot
287:39 - okay now
287:43 - over here the style
287:48 - is gonna be google fonts
287:53 - okay and then let's see what is the font
287:56 - that we are using in our design
288:01 - so it is poppins
288:02 - so we are gonna use pop-ins over here
288:05 - p-o-p-p ins
288:13 - okay
288:14 - so
288:16 - this is fine
288:24 - so just to give it a minute to format
288:36 - yes now i'll add a color okay and the
288:40 - color is gonna be black
288:48 - so for that i'll use the color senum
288:51 - color dot black and then let's give a
288:54 - size of
288:56 - what we had over here it is 18 so let's
288:59 - give it 18 and see
289:02 - whereas i think we might need to change
289:05 - it
289:06 - so first let's see
289:17 - okay
289:18 - now this this image over here is making
289:21 - lots of trouble
289:23 - okay so give me a minute i'll change it
289:25 - for now i'll make it only three items
289:28 - okay so i have deleted this seller now
289:32 - later once i finish this video i will
289:35 - add another lady with a different
289:38 - picture of the same size as others okay
289:42 - so first i'll do a full restart
289:45 - and get
289:46 - and
289:47 - this this item will be removed okay so
289:51 - let's see
289:57 - okay and you can see there are now only
289:59 - three items i removed
290:02 - the lady who was here okay because the
290:04 - image was not
290:06 - what we needed and it was causing lots
290:08 - of error now the image will load slowly
290:10 - i have little bit network issues today
290:13 - okay so for now this
290:16 - name name is done okay
290:18 - let's see
290:19 - so the name needs to be bold and little
290:22 - bit a little bit more towards the
290:25 - right and less
290:27 - towards the bottom okay
290:29 - so instead of 50 i'm gonna make it 30
290:32 - instead of 20 i'm gonna make it
290:34 - 25
290:37 - and the text is gonna be bold so to for
290:40 - to for making it bold we use font weight
290:45 - okay and then we have font weight enum
290:50 - dot
290:50 - bold
290:53 - okay
290:55 - now let's
290:58 - see so this is fine
291:01 - now let's add the address
291:05 - okay
291:06 - so for that
291:08 - i'm gonna use this let's save it
291:13 - then again it is giving us an error
291:16 - now uh there is a way so that this
291:19 - sticks inside a specified
291:23 - height only uh width only so let's see
291:26 - how to do that for that i'm gonna do a
291:28 - simple google
291:41 - not android
292:17 - okay so we can do this we can surround
292:20 - it with a container or a sized box
292:24 - okay so that is one method
292:27 - next method is we use over float
292:31 - text overflow ellipses
292:34 - but for that max lines okay so i'll try
292:37 - that because i haven't used that earlier
292:40 - okay so
292:42 - max lines is gonna be two
292:46 - and then overflow
292:48 - is gonna be overflow
292:55 - so it was text overflow dot ellipsis
293:05 - cool let's see
293:09 - if there was absolutely no change
293:12 - so let's add it will add a container to
293:15 - it
293:17 - container of width
293:20 - let's say 100
293:28 - okay now it is fine i i'll make it 120
293:36 - 140
293:42 - let me add the same padding over here as
293:45 - well
293:47 - because you can see the text is not
293:49 - aligned so we can't means guess the
293:52 - correct width okay so from top it is
293:56 - just gonna be 10
293:58 - but from the left it is gonna be same
294:02 - okay
294:05 - or maybe i'll make it 20
294:08 - and from top it is gonna be five
294:16 - and now let's see the width so let's try
294:19 - making it 150
294:21 - school 160
294:25 - still cool
294:26 - 180
294:30 - so now it is giving errors so let's see
294:32 - 170
294:35 - i gain error 165
294:44 - 164
294:47 - okay so we stick with 164
294:53 - and if we have more than that then it is
294:56 - giving us three dots
295:00 - okay
295:04 - so left is again gonna be 25 because now
295:07 - it is looking ugly it should all be on
295:09 - the same alignment well that is a basic
295:12 - principle in designing
295:14 - i was just trying something out
295:17 - okay
295:18 - let's do a full restart and then
295:21 - we will add this no rating little bit
295:24 - below
295:32 - okay now before we do anything let's add
295:35 - the style to this address
295:38 - so for that i'm gonna use the style then
295:40 - again
295:42 - google font dot pop-ins
295:48 - okay
295:51 - and
295:52 - then and inside pop-ins
295:59 - i'm gonna copy these three
296:02 - okay it is google fonts
296:06 - then let's copy these three now the font
296:09 - size is gonna be
296:11 - 13.
296:14 - we don't need the font weight but the
296:16 - color
296:19 - i'm sorry for that but
296:21 - let's continue
296:22 - okay
296:23 - so now this is in pop-ins okay
296:27 - now let's add this thing to our no
296:30 - ratings as well
296:34 - now we can't have const over here since
296:37 - we are using google fonts we have
296:38 - discussed about it earlier
296:40 - okay
296:42 - no rating now let's align it align
296:48 - text align
296:55 - dot start
296:58 - okay let's see
297:02 - okay so it is in the starting only the
297:05 - entire space is this much so what i'm
297:08 - gonna do is i'm again gonna surround it
297:09 - with a container or a sized box would do
297:13 - in this case as well
297:15 - so
297:16 - width
297:17 - is again gonna be
297:19 - 164.0
297:26 - now
297:27 - again i will
297:28 - have to add the padding
297:31 - you okay not this one i need to add this
297:34 - one
297:38 - now since we are adding padding i can't
297:40 - use a sized box over here
297:43 - okay so you see how we
297:45 - keep on changing widgets according to
297:47 - our necessity
297:51 - so now we have no ratings over here i
297:53 - want i don't want it to be black but to
297:56 - be gray so that
297:58 - it clearly marks that it is not a
298:01 - primary text that i want to the users to
298:04 - focus on but
298:05 - a secondary text which is there just
298:08 - fulfilling its purpose
298:10 - okay so with this
298:13 - i okay here is some
298:15 - error let's see okay so i think in the
298:18 - name only by mistake i have added an
298:20 - extra space i will remove it from the
298:22 - database
298:23 - okay with this our screen's ui is
298:26 - complete
298:27 - it looks somewhat
298:29 - as we have expected but not exactly we
298:32 - will have to work on to it
298:35 - so uh
298:36 - let's see what are the changes we can do
298:38 - in the next video thank you
298:41 - so in this video we shall continue with
298:43 - our better buys project
298:45 - so up until now we have created the
298:48 - splash screen and we were displaying the
298:51 - list of sellers
298:52 - okay so you can see over here
298:56 - we can see the list of sellers
298:58 - now we shall move forward and then if we
299:01 - click on any of the seller item we
299:03 - should be taken to this page
299:06 - okay so let's start with that
299:09 - so for that first i'll create a new
299:11 - screen okay so over here inside screen
299:14 - it is
299:17 - products
299:19 - product screen
299:21 - dot dot
299:26 - okay i'll first import
299:28 - material
299:32 - then create a stateless class
299:36 - that is
299:39 - product screen
299:43 - okay and over here instead of container
299:45 - it will be a scaffold
299:50 - okay and the scaffold will have a body
299:53 - and the body for now is gonna be a
299:55 - container
300:00 - okay
300:01 - and the container will have a child
300:04 - and the child is a text and the text
300:06 - says
300:08 - product screen okay so this can be
300:11 - referred as a boilerplate code
300:14 - very basic
300:15 - okay so let's save this
300:18 - now
300:19 - in seller screen you can see that i've
300:21 - created a static route name so i'll do
300:24 - the same for product screen
300:27 - over here i'm gonna write static
300:30 - const
300:32 - route name
300:34 - and it is gonna be
300:37 - product
300:38 - screen
300:41 - okay now i'll add this route name in our
300:45 - main dot dot okay so over here first i
300:47 - need to import it
300:49 - so import
300:50 - screens
300:53 - and then it is a
300:55 - product screen
301:07 - okay
301:08 - now over here in inside roots i'll
301:11 - inside routes sorry i'll add
301:16 - product
301:17 - screen dot route name
301:23 - this is gonna be const
301:27 - product screen
301:31 - all right so we have attached the screen
301:34 - to our main fragment now let's navigate
301:38 - to that screen
301:41 - okay so for that
301:44 - we will go in our seller item which is
301:47 - this item
301:49 - okay so now if we click on this we
301:50 - should go to the product screen so i'll
301:53 - go to the container
301:55 - okay so this is the
301:57 - container
301:58 - i guess yes
301:59 - so now over here i'll wrap it with a
302:02 - gesture detector
302:08 - okay and the gesture detector detects
302:11 - our gesture and the gesture is gonna be
302:14 - on tap means we want some action
302:18 - on tap
302:19 - and the action is very
302:22 - small means we just need to navigate so
302:24 - i'm gonna write navigator
302:28 - dot off
302:30 - context
302:32 - push named
302:34 - and for name again we're gonna
302:36 - need to import that screen okay so where
302:40 - i'm gonna write import
302:46 - and then two screens
302:49 - and then inside the screen it is gonna
302:51 - be product screen
302:54 - and yes over here i'm gonna write
302:58 - product screen
303:00 - dot route name and then i wanna pass the
303:03 - seller which is clicked okay so which in
303:06 - this case is a seller
303:08 - so i am simply going to pass it as an
303:10 - argument so for that i will use the
303:12 - named parameter arguments
303:15 - and over here i'll simply pass
303:17 - seller
303:19 - okay
303:20 - so with this the navigation is done now
303:23 - it should work let's do a full restart
303:26 - to check
303:36 - yes so now if i
303:38 - click on this
303:40 - i am taken to the product screen since
303:43 - no alignment is mentioned it has gone to
303:45 - the top left corner but the navigation
303:48 - is working properly okay so that is one
303:51 - thing
303:51 - now uh before continuing we need to get
303:55 - the
303:56 - products okay so for that we need to do
303:59 - an api call
304:00 - and as i have promised i have hosted the
304:04 - api which gives us the list of product
304:07 - okay it is hosted at who is richard.com
304:11 - slash pk and then the
304:13 - other
304:16 - part of the url so if you send a request
304:19 - to it uh get request you will get the
304:21 - list of products so now let's do this
304:24 - from within the app okay so for that
304:26 - first i need to create a
304:28 - product item so let's do that inside the
304:31 - model i'll create a new file and that is
304:35 - product
304:36 - dot dot
304:41 - okay
304:42 - so
304:43 - this is gonna be
304:45 - class product
304:48 - then int id and seller id string
304:58 - name string name
305:01 - okay then we have image price per kg
305:05 - description so
305:08 - string image
305:11 - end
305:12 - price
305:14 - per
305:15 - kg because we use camel case over here
305:18 - price per kg is gonna be like this and
305:20 - then we have the
305:23 - description
305:26 - okay and then we have
305:27 - interaction count
305:33 - right
305:34 - so now there are actually two to three
305:36 - methods of creating a class i'll see
305:38 - which one i'm using
305:40 - okay so over here i am using this type
305:43 - of
305:44 - declaration so i'll use the same over
305:46 - here because it is always good to
305:50 - maintain uniformity throughout the app
306:02 - so now
306:04 - over here we have seller from maps over
306:06 - here it is gonna be
306:08 - product
306:10 - from map
306:11 - and then we are gonna get a map of
306:14 - dynamic dynamic
306:17 - map
306:18 - let me check if it was dynamic yes it is
306:21 - dynamic
306:23 - okay so the first thing is id so id is
306:26 - again into dot
306:29 - parse
306:31 - map id
306:34 - now similarly we have seller id
306:40 - and over here it is gonna be seller
306:43 - underscore id because that is the
306:46 - key name over here then we have name and
306:49 - image
306:50 - so
306:51 - name is gonna be
306:53 - map
306:55 - name
306:57 - and image is gonna be
307:01 - image okay then after that we have price
307:04 - per kg so it will be like this
307:10 - price per kg
307:16 - then we have description
307:22 - over here also it is gonna be
307:23 - description
307:25 - and then we have interaction count
307:34 - all right so our product classes
307:38 - uh product model class is created now
307:40 - let's
307:41 - call the api
307:43 - okay or before calling first we need to
307:46 - add a loading screen over here so let's
307:48 - do that first
307:50 - okay in the products screen
307:55 - okay we have a container now inside the
307:58 - container
308:01 - i'm gonna again copy it from the splash
308:04 - screen how we had it over there
308:06 - okay so
308:07 - [Music]
308:09 - we have a sized box
308:12 - okay so i'll copy this
308:15 - from splash screen to the product screen
308:18 - over here instead of
308:20 - it is gonna be a column
308:24 - column with children so the first child
308:27 - is gonna be a
308:28 - sized box
308:30 - okay
308:31 - and the next one is gonna be
308:34 - loading sellers
308:36 - okay so over here instead of sellers it
308:38 - is gonna be products
308:45 - loading
308:47 - products
308:49 - and we need to import google font
308:54 - yes
308:56 - okay
308:57 - let's format this over here it is giving
308:59 - us a warning
309:01 - avoid unnecessary containers okay that
309:04 - is actually correct
309:06 - we don't need a container because we
309:08 - already have a column okay so let's save
309:11 - this
309:14 - and it is over here so i need to bring
309:16 - it to the center so for that i'll use
309:19 - main axis alignment
309:25 - okay and then it has an enum main axis
309:28 - alignment
309:37 - dot center
309:42 - okay so after that we also have cross
309:45 - axis alignment when we are talking about
309:48 - column this is our main axis alignment
309:50 - and this is our cross axis alignment
309:53 - so we also have a cross access
309:57 - alignment and that also has a cross
310:00 - access enum
310:07 - dot center so we brought this in center
310:10 - as well
310:13 - okay
310:18 - cool now let's format this and save this
310:23 - and we have it over here okay
310:26 - so actually what is happening that the
310:28 - column is taking only this much space we
310:31 - wanted to take the entire width okay so
310:34 - now we will again have to bring back our
310:37 - container
310:39 - okay
310:40 - and in the container we will give it a
310:42 - width
310:46 - okay and the width of
310:48 - media query
310:53 - dot off
311:02 - dot
311:03 - i guess settings
311:11 - okay
311:13 - now it is the size okay and then
311:17 - the width
311:21 - or something
311:22 - yes so width
311:32 - cool
311:33 - so now that we have the
311:37 - entire width let's see how it looks
311:44 - so now you can see it is in the center
311:46 - and this will keep on loading once
311:49 - we have the products means once we get
311:52 - the response from the server we shall
311:54 - display the products over here
311:56 - okay so that we shall see in the next
311:58 - video
311:59 - thank you
312:01 - so in this video we shall continue from
312:03 - where we left off in the previous video
312:05 - so up until the previous video when we
312:08 - click on any of the item we get a screen
312:10 - and in the center it says loading
312:12 - products so now let's write the server
312:15 - function to actually load the products
312:18 - okay so for that we already have our
312:21 - product class over here
312:23 - okay so let's go inside server handler
312:26 - and i have already imported the product
312:28 - class over here so let's create a
312:30 - function to get the list of products
312:33 - okay so this will be a
312:36 - future
312:39 - of list
312:42 - list of products
312:46 - okay
312:49 - sorry
312:50 - yes and over here the function name can
312:53 - be get
312:55 - products
312:57 - per
312:58 - seller
313:00 - okay then i'll take the seller id as
313:03 - well because
313:05 - that is required
313:06 - you would remember as we did in the api
313:10 - we need the seller id to get the
313:13 - products of the seller okay so now let's
313:16 - actually
313:18 - write the
313:19 - function okay so first we surround it
313:21 - with our try catch
313:24 - because we are
313:26 - using because we are interacting with
313:29 - the server there might be some error
313:31 - okay so
313:34 - now over here i'll create an empty list
313:36 - of products
313:46 - okay now let's
313:48 - write the server function
313:50 - so for that i'll create a response
313:52 - variable
313:54 - response
313:57 - is equal to await http dot get
314:01 - okay then we have uri
314:04 - dot
314:05 - parse and then we have the function so
314:08 - we'll again use the string interpolation
314:10 - we add the base url i'm sorry
314:13 - so we write this tilde sign in
314:15 - javascript
314:18 - so we have a dollar then base url
314:26 - okay so our base url is still apis and
314:30 - now in the
314:32 - api after apis we have
314:35 - gen product and then
314:37 - seller id and then the seller id okay so
314:40 - i have already hosted this api so you
314:43 - can directly use this api or the api
314:46 - that you guys have made
314:48 - okay watching the previous parts of the
314:51 - video
314:53 - okay so now over here instead of seller
314:55 - id is equal to 1 this is gonna be again
314:58 - seller id which will take over here in
315:01 - the function using string interpolation
315:04 - okay so with this
315:06 - this is done
315:08 - okay
315:12 - now it is giving us an error over here
315:14 - yes so that is gone so now after this
315:17 - line we have the response so now the
315:19 - rest of the part is gonna be similar as
315:22 - above
315:23 - so i'm simply gonna copy this
315:28 - paste it over here and do the
315:30 - changes
315:31 - okay
315:32 - so i can call this
315:35 - products list and this is gonna be
315:38 - products okay
315:43 - and then over here instead of sellers
315:45 - list it is gonna be products list and
315:48 - instead of sellers it is gonna be
315:50 - products instead of seller it is gonna
315:52 - be
315:53 - product
315:54 - okay and over here also we are gonna
315:56 - return
315:58 - products
316:02 - all right so with this we have this
316:04 - function that gets us the list of
316:07 - products per seller okay so
316:12 - let's comment it getting list
316:15 - of products
316:18 - per seller
316:19 - okay so
316:20 - if i write
316:21 - if i give two dashes then that means it
316:24 - is a comment if i give three that means
316:26 - it is a documentation
316:28 - okay so like if you see if i
316:30 - uh hover around this we get this so this
316:33 - is the documentation of this future so
316:36 - now similarly when we will use get
316:38 - products per seller somewhere else and
316:40 - we hover over it we will get getting
316:42 - list of sellers per seller okay so even
316:45 - if you don't know what this does just by
316:47 - hovering on it you will get this
316:48 - documentation and you will know that
316:50 - this function returns the
316:53 - list of products per seller okay so i am
316:56 - i hope this is making sense
316:59 - okay so
317:01 - we have our function now
317:03 - now let's go to the products screen
317:06 - where we actually call it
317:09 - okay
317:11 - so over here i have already imported
317:13 - products in the model seller the model
317:16 - product and server handler so i was
317:18 - trying something that is why all these
317:20 - things are already imported okay so
317:24 - before we start let's get rid of this
317:26 - warning
317:27 - so over here we have container we can
317:30 - change it with sized box i think that
317:32 - will be the solution
317:36 - okay just add this ignore thing for now
317:39 - okay we will see what can be done later
317:42 - now we need to call the function so for
317:45 - that i'll convert this stateless
317:47 - to a stateful widget okay now
317:50 - uh
317:51 - in from the seller item we need to send
317:54 - the seller details in the product screen
317:57 - so that we can get the seller id and
318:00 - then call this function which we just
318:02 - created in server handler
318:04 - because if you remember we are taking a
318:06 - seller id over here okay
318:08 - so i'll
318:10 - open my seller item
318:13 - and over here you can see
318:16 - the entire thing is wrapped with a
318:18 - gesture detector and in the on tap
318:20 - section i have pushed it to product
318:23 - screen dot route name
318:24 - and i have already added the argument as
318:27 - seller okay means this seller so now
318:30 - let's get this seller in our product
318:32 - screen okay so as you have seen we need
318:36 - to get this inside the build method okay
318:39 - so over here simply i'm gonna write
318:42 - product
318:43 - product
318:45 - is equal to modal
318:47 - route
318:51 - dot off
318:57 - context
319:02 - dot
319:03 - settings
319:07 - dot arguments
319:12 - okay and then i type cast it to product
319:17 - okay so with this we have our okay sorry
319:21 - we are sending a seller right
319:24 - yes we are sending a seller i can't
319:26 - simply store it inside product
319:28 - i'm extremely sorry this was
319:30 - my mistake so this is seller
319:35 - the variable name
319:36 - is also seller and we will type cast it
319:39 - to
319:40 - seller
319:47 - okay so now over here again because of
319:50 - null aware i need to add a question mark
319:52 - okay then that error is gone
319:54 - now once we have the seller let's call
319:57 - the our
319:59 - function that we wrote in server handler
320:01 - okay so for that i'm simply gonna write
320:03 - over here void
320:06 - get products per seller
320:10 - okay and over here simply server handler
320:20 - dot get
320:22 - products per seller and now if you can
320:24 - see if i hover on it i am getting
320:27 - getting getting list of products per
320:29 - seller so you can see that documentation
320:32 - which we wrote over here by three dashes
320:34 - is
320:36 - showing over here okay so you see that
320:38 - is very helpful if someone else reads
320:41 - your program and doesn't know what this
320:43 - function is
320:44 - so they can easily know it okay then
320:46 - over here in this i get a seller id so
320:49 - in
320:50 - seller id in this function
320:53 - okay and that is gonna be this seller id
320:57 - dot then
320:59 - okay where we get the response and dot
321:01 - catch error
321:03 - okay in case of any error so for now i
321:05 - am simply gonna print the error
321:12 - okay
321:14 - let me just format it
321:21 - yes
321:22 - so now over here also instead of doing
321:24 - anything i'll simply print the value so
321:27 - as to check if the function is working
321:28 - properly or not
321:30 - and then post that we will do the
321:35 - ui changes most probably in the next
321:37 - video okay so let's call this function
321:40 - over here inside the build method
321:42 - because over here only we have the
321:44 - seller and this
321:46 - method needs a seller id okay so
321:50 - it is get
321:52 - products
321:54 - per seller and the seller id is gonna be
321:56 - seller dot id
322:00 - okay
322:04 - okay so i think i need to give a
322:05 - question mark over here because of the
322:07 - null aware
322:09 - okay there is another method where we
322:11 - don't need to see give the question mark
322:13 - maybe i'll
322:15 - show that in the next model class that
322:17 - we create okay so for now i'll do a full
322:20 - restart
322:26 - now we are on the splash screen
322:29 - we got the sellers and now if i click on
322:31 - any of the sellers so
322:33 - over here you can see we are getting the
322:35 - products of that seller
322:36 - instance of product means we have these
322:39 - many products one two three four
322:42 - five okay so we are getting the products
322:46 - of the seller in this screen so this
322:48 - function is
322:50 - working the one which we wrote in our
322:52 - server handler okay
322:54 - so in the next video we will
322:56 - update the ui accordingly okay so see
322:59 - you in the next video thank you
323:01 - so up until the previous video we were
323:04 - getting the list of products but not
323:06 - updating the ui okay so let's do that in
323:09 - this video okay so for that let's open
323:12 - our product screen now over here i'll
323:15 - create a global variable that will store
323:17 - our products so it is gonna be a list
323:21 - of product
323:24 - and we can call it products
323:27 - okay and now i'll initialize it with a
323:30 - empty
323:31 - list okay now over here where we are
323:34 - getting the value let's store it inside
323:37 - this variable and i also want to update
323:40 - the state so that according to that i
323:43 - can means remove the circular indicator
323:47 - that is that comes on the screen
323:49 - okay so for that i'll remove this and
323:51 - give a bracket over here because we are
323:54 - gonna use the set state
323:57 - so set state
324:00 - and then inside this i'll
324:02 - update the value
324:04 - so product
324:06 - is gonna be
324:08 - value
324:12 - okay so we have
324:14 - we are done with this now since we are
324:17 - using set state we will have to
324:20 - add this inside and if block so that it
324:22 - executes only once because if we don't
324:25 - do so it will keep on executing
324:28 - constantly and and that many server
324:31 - requests would be sent and after a time
324:33 - it will
324:34 - hit a timeout and then there will be
324:37 - bugs okay so for that i'll create
324:39 - another boolean variable so bool
324:43 - first
324:44 - exec
324:45 - and this is true
324:47 - okay
324:48 - so if a first exec is true then only we
324:51 - call this function
324:53 - get products per seller so if
325:02 - if
325:04 - first first exact then we are getting
325:07 - the
325:08 - get products per seller
325:10 - okay
325:15 - and then i also want to make it to false
325:18 - so that it doesn't keep on executing
325:20 - after the first time
325:23 - so
325:23 - it becomes first exact is equal to
325:27 - false
325:30 - okay so let me just format this
325:39 - yes so now over here we are getting the
325:42 - products and storing it inside products
325:44 - variable so now over here what we can do
325:47 - is we can check if the products variable
325:50 - has some value and if it has some value
325:52 - then we don't want to show the circular
325:54 - progress indicator or the text that say
325:58 - says loading products okay so for that
326:00 - i'll simply over here add an f
326:02 - if
326:06 - products
326:11 - dot
326:13 - length
326:16 - is greater than zero
326:21 - okay
326:23 - no sorry if the
326:25 - uh better than this it would be if the
326:28 - products
326:29 - if the products is equal to null then
326:32 - only show this
326:36 - and this
326:39 - okay because if it is not null then we
326:41 - don't want to show this we actually want
326:43 - to show the products that we got
326:46 - okay so let me just format this
326:49 - and do a full restart
327:03 - okay so now if i click on this albert
327:05 - einstein
327:16 - nothing is happening
327:18 - okay so i think it got it got the
327:20 - product pretty fast
327:22 - anyways just to confirm i'll add a print
327:25 - over here
327:28 - okay so that i know that it actually got
327:30 - the products
327:47 - okay
327:48 - let me do a full restart
328:05 - okay so it got the products pretty fast
328:09 - that's why we were not able to see the
328:12 - loading icon but if the network was
328:14 - little bit slow we would see that and as
328:16 - soon as we would get the products
328:18 - then uh we would then that would
328:21 - disappear okay so now that we have the
328:23 - products let's start designing it okay
328:26 - so for that
328:28 - i'm gonna open the figma file
328:31 - yes so now you can see this is how our
328:33 - products screen should look
328:36 - so we'll start from the top first is
328:38 - this
328:39 - better buys and the image over here so
328:42 - if you would remember this is the
328:44 - exact same thing as we had in the seller
328:47 - screen so what i'm gonna do is i'm
328:49 - simply gonna copy from there and paste
328:51 - over here
328:52 - before that i'll add comments to it
328:57 - loading widgets
329:01 - okay now over here after
329:04 - product let's add that so for that i'll
329:06 - go to the sellers screen
329:09 - and inside the scaffold inside the
329:12 - children we have this
329:15 - header so i'm simply gonna copy it
329:25 - okay so it is still here
329:30 - copy it
329:32 - paste it over here
329:42 - okay so now we got it in the center and
329:45 - that is
329:46 - uh because
329:48 - the loading widgets were aligned to the
329:50 - center okay so then that
329:54 - doesn't look good so what i'm gonna do
329:56 - is i'm gonna wrap these two items in a
329:58 - separate column that will be a part of
330:00 - the bigger column
330:02 - okay so over here first i'll make the
330:04 - main axis alignment to start or simply
330:07 - just removing it will also do because
330:10 - start is what is set by default okay and
330:14 - over here the loading widgets i'll
330:16 - remove
330:17 - this because i don't need it
330:20 - and now over here i'll select these two
330:22 - then use the refractor tool which in
330:25 - my condition is shift option r
330:28 - and no refractoring available
330:31 - great
330:33 - so i'm gonna create a column
330:36 - myself
330:37 - then add children
330:45 - okay and then inside this i'm gonna add
330:47 - these two items
330:56 - over here okay now let me just format it
330:59 - yes okay so over here you can see if the
331:02 - product says null then only this column
331:04 - will be visible
331:06 - okay and now what i'm gonna do is i'm
331:09 - gonna apply main access as a center to
331:12 - this item
331:13 - okay so that it doesn't hinder the
331:15 - parent column okay so for your main
331:19 - access alignment so again over here i'll
331:21 - use the main access alignment enum
331:32 - and i want to make it sent
331:36 - okay
331:38 - so now this issue is solved
331:40 - and we also have our
331:43 - starting part cleared okay sorted out so
331:46 - we have this
331:48 - now let's redesign this so
331:51 - we have the products now we just simply
331:53 - want to display it like this
331:57 - okay so for this i can either use a row
332:00 - or a list view so
332:02 - using row is very similar to how we use
332:05 - the column while displaying the sellers
332:08 - so over here instead of that i'm gonna
332:10 - use a
332:12 - a list okay so
332:16 - over here
332:20 - list of items
332:23 - let me check if there was some title no
332:25 - okay
332:29 - so over here it is simply gonna be a
332:31 - list view
332:33 - i think i'll use builder because
332:37 - why not list view
332:40 - dot builder
332:42 - okay and then it has an item builder
332:46 - so it will definitely because it is a
332:48 - builder it will definitely take a
332:50 - context
332:51 - okay
332:52 - and it will return a item so the item is
332:55 - gonna be a container for now
332:58 - okay a container
333:00 - means just like a placeholder i am
333:02 - adding it okay so i think this takes
333:05 - something more than build context yes
333:08 - so over here in the documentation you
333:10 - can see it takes the context as well as
333:12 - the index okay
333:14 - so index so now the error should be gone
333:17 - now we need to add a few more things to
333:20 - this builder
333:21 - okay there are a few required things
333:24 - let me just go through all
333:27 - yes so i need to add the item count so
333:30 - the item count is gonna be
333:32 - products
333:33 - dot
333:36 - i think it is products dot
333:39 - length yes so i always get confused
333:42 - between length and size okay
333:44 - so now over here we have this now in
333:47 - this container i am simply
333:50 - gonna write
333:51 - like
333:54 - height is around
333:56 - 50
333:58 - okay width is around 50
334:02 - and a margin
334:05 - okay and the margin is gonna be
334:08 - edge inserts
334:10 - not all
334:11 - 5.0
334:15 - okay
334:16 - let me just format this
334:22 - yes so once we have formatted this
334:26 - let's see how it looks
334:48 - okay so it is giving us a bunch of
334:50 - errors
334:52 - let me check
334:55 - okay because we need to give it a hash
334:58 - size
334:59 - okay so what i'm gonna do is i'm gonna
335:01 - wrap it with a sized box okay and the
335:04 - height is gonna be
335:06 - let's say 50.
335:24 - okay so we are getting the container
335:26 - over here we are not able to see because
335:28 - no color is there
335:29 - so i think i'll add some color colors
335:33 - dot
335:34 - pink okay
335:44 - yes so we are getting it over here so
335:48 - you can see these are our items
336:01 - okay now over here this is like actually
336:04 - a particular column over here i'll
336:06 - increase the height so it becomes
336:10 - a little bit more clear
336:14 - yes so you can see these are
336:17 - like a vertical list but i want a
336:19 - horizontal list because the design
336:22 - suggests
336:23 - horizontal list so over here inside this
336:26 - i think we have a axis
336:29 - or scroll direction
336:31 - yes so we have a scroll direction and it
336:33 - takes an axis i guess yes
336:35 - it takes an axis which is again accesses
336:39 - an enum and then horizontal
336:41 - okay
336:43 - so you see it is not possible to
336:45 - remember all the things you just need to
336:47 - have good amount of practice to figure
336:49 - out which one it is okay so now you can
336:51 - see it is in
336:54 - it is in a row
336:55 - okay so now in the next video we shall
336:58 - design each item okay so this was for
337:01 - the video thank you
337:03 - so up until the previous video we were
337:05 - getting the list of products but not
337:08 - updating the ui
337:09 - okay so let's do that in this video okay
337:12 - so for that let's open our product
337:15 - screen now over here i'll create a
337:17 - global variable that will store our
337:19 - products so it is gonna be a list
337:22 - of products
337:26 - and we can call it products
337:29 - okay and now i'll initialize it with a
337:32 - empty
337:33 - list okay now over here where we are
337:36 - getting the value let's store it inside
337:38 - this variable and i also want to update
337:42 - the state so that according to that i
337:45 - can means remove the circular indicator
337:48 - that is that comes on the screen
337:51 - okay so for that i'll remove this and
337:53 - give a bracket over here because we are
337:55 - going to use a set state
337:58 - so set state
338:02 - and then inside this i'll
338:04 - update the value
338:06 - so products
338:08 - is gonna be
338:10 - value
338:14 - okay so we have
338:16 - we are done with this now since we are
338:18 - using set state we will have to add this
338:22 - inside an if block so that it executes
338:24 - only once because if we don't do so it
338:27 - will keep on executing
338:29 - constantly and and that many server
338:32 - requests would be sent and after a time
338:35 - it will hit a timeout and then there
338:38 - will be bugs okay so for that i'll
338:40 - create another boolean variable so bool
338:45 - first
338:46 - exec
338:47 - and this is true okay so if first exact
338:51 - is true then only we call this function
338:55 - get products per seller so if
339:04 - if
339:06 - first first exec then we are getting the
339:09 - get products per seller
339:12 - okay
339:16 - and then i also want to make it to false
339:19 - so that it doesn't keep on executing
339:22 - after the first time
339:24 - so
339:25 - it becomes first exec is equal to
339:29 - false
339:32 - okay so let me just format this
339:41 - yes so now over here we are getting the
339:44 - products and storing it inside products
339:46 - variable so now over here what we can do
339:49 - is we can check if the products variable
339:51 - has some value and if it has some value
339:54 - then we don't want to show the circular
339:56 - progress indicator or the text that say
339:59 - says loading products okay so for that
340:02 - i'll simply over here add an if
340:04 - if
340:07 - products
340:13 - dot
340:15 - length
340:18 - is greater than zero
340:22 - okay
340:24 - no sorry if the
340:26 - better than this it would be if the
340:29 - product
340:31 - if the products is equal to null then
340:33 - only show this
340:38 - and this
340:41 - okay because if it is not null then we
340:43 - don't want to show this we actually want
340:45 - to show the products that we got
340:48 - okay so let me just format this
340:51 - and do a full restart
341:05 - okay so now if i click on this albert
341:07 - einstein
341:17 - nothing is happening
341:19 - okay so i think it got it got the
341:22 - product pretty fast anyways just to
341:25 - confirm i'll add a print over here
341:29 - okay so that i know that it actually got
341:32 - to the products
341:49 - okay
341:50 - let me do a full restart
342:07 - okay so it got the products pretty fast
342:10 - that's why we were not able to see the
342:13 - loading icon but if the network was
342:15 - little bit slow we would see that and as
342:17 - soon as we would get the products then
342:21 - we would then that would disappear okay
342:24 - so now that we have the products let's
342:26 - start designing it okay so for that
342:30 - i'm gonna open the figma file yes so now
342:33 - you can see this is how our products
342:36 - screen should look
342:37 - so we'll start from the top first is
342:40 - this
342:41 - better buys and the image over here so
342:44 - if you would remember this is the
342:46 - exact same thing as we had in the seller
342:49 - screen so what i'm gonna do is i'm
342:51 - simply gonna copy from there and paste
342:53 - over here before that i'll add comments
342:56 - to it
342:59 - loading widgets
343:02 - okay now over here after
343:05 - product let's add that so for that i'll
343:08 - go to the sellers screen
343:10 - and inside the scaffold inside the
343:14 - children we have this
343:16 - header so i'm simply gonna copy it
343:27 - okay so it is still here
343:32 - copy it
343:33 - paste it over here
343:44 - okay so now we got it in the center and
343:46 - that is
343:48 - uh because
343:49 - the loading widgets were aligned to the
343:52 - center okay so then that
343:55 - doesn't look good so what i'm gonna do
343:58 - is i'm gonna wrap these two items in a
344:00 - separate column that will be a part of
344:02 - the bigger column
344:04 - okay so over here first i'll make the
344:06 - main axis alignment
344:08 - to start or simply just removing it will
344:10 - also do because
344:12 - start is what is set by default okay and
344:16 - over here the loading widgets i'll
344:18 - remove
344:19 - this because i don't need it
344:21 - and now over here i'll select these two
344:24 - then use the refractor tool which in
344:27 - my condition is shift option r
344:30 - and no refractoring available
344:33 - great
344:34 - so i'm gonna create a column
344:37 - myself
344:39 - then add children
344:47 - okay and then inside this i'm gonna add
344:49 - these two items
344:58 - over here okay now let me just format it
345:01 - yes okay so over here you can see if the
345:04 - product says null then only this column
345:06 - will be visible
345:08 - okay and now what i'm gonna do is i'm
345:10 - gonna apply main access as a center to
345:13 - this item okay so that it doesn't hinder
345:16 - the parent column okay so for your main
345:20 - access alignment
345:22 - so again over here i'll use the main
345:24 - access alignment enum
345:33 - and i want to make it sent
345:37 - okay
345:40 - so now this issue is solved
345:42 - and we also have our
345:45 - starting part cleared okay sorted out so
345:48 - we have this
345:50 - now let's design this so
345:53 - we have the products now we just simply
345:55 - want to display it like this
345:58 - okay so for this i can either use a row
346:02 - or a list view so
346:04 - using row is very similar to how we use
346:07 - the column while displaying the sellers
346:10 - so over here instead of that i am gonna
346:12 - use a
346:14 - a list
346:15 - okay so
346:18 - over here
346:22 - list of items
346:25 - let me check if there was some title no
346:27 - okay
346:30 - so over here it is simply gonna be a
346:32 - list view
346:35 - i think i'll use builder because
346:38 - why not list view
346:41 - dot builder
346:44 - okay and then it has an item builder
346:48 - so it will definitely because it is a
346:50 - builder it will definitely take a
346:51 - context
346:53 - okay
346:54 - and it will return a item so the item is
346:57 - gonna be a container for now
346:59 - okay a container
347:02 - means just like a placeholder i am
347:04 - adding it okay so i think this takes
347:07 - something more than build context yes
347:10 - so over here in the documentation you
347:11 - can see it takes the context as well as
347:14 - the index okay
347:16 - so index so now the error should be gone
347:19 - now we need to add a few more things to
347:21 - this builder
347:23 - okay there are a few required things
347:26 - let me just go through all
347:28 - yes so i need to add the item count so
347:31 - the item count is gonna be
347:34 - products
347:35 - dot
347:38 - i think it is products dot
347:41 - length yes so i always get confused
347:43 - between length and size okay
347:46 - so now over here we have this now in
347:48 - this container i am simply
347:51 - gonna write
347:53 - like
347:56 - height is around
347:58 - 50
348:00 - okay
348:01 - width is around 50
348:04 - and a margin
348:07 - okay and the margin is gonna be
348:10 - edge inserts
348:12 - not all
348:13 - 5.0
348:17 - okay
348:18 - let me just format this
348:24 - yes so once we have formatted this
348:28 - let's see how it looks
348:49 - okay so it is giving us a bunch of
348:52 - errors
348:54 - let me check
348:57 - okay because we need to give it a hash
348:59 - size
349:00 - okay so what i'm gonna do is i'm gonna
349:02 - wrap it with a sized box okay and the
349:05 - height is gonna be
349:08 - let's say 50.
349:25 - okay so we are getting the container
349:27 - over here we are not able to see because
349:30 - no color is there
349:31 - so i think i'll add some color colors
349:34 - dot
349:36 - pink okay
349:46 - yes so we are getting it over here
349:49 - so you can see these are our items
350:03 - okay now over here this is like actually
350:06 - a particular column over here i'll
350:08 - increase the height so it becomes
350:11 - a little bit more clear
350:16 - yes so you can see these are
350:19 - like a vertical list but i want a
350:21 - horizontal list because the design
350:23 - suggests
350:24 - horizontal list so over here inside this
350:28 - i think we have a axis
350:30 - or scroll direction
350:32 - yes so we have a scroll direction and it
350:35 - takes an axis i guess yes
350:37 - it takes an axis which is again accesses
350:41 - an enum and then horizontal
350:43 - okay
350:44 - so you see it is not possible to
350:46 - remember all the things you just need to
350:49 - have good amount of practice to figure
350:51 - out which one it is okay so now you can
350:53 - see it is in
350:56 - it is in a row okay so now uh in the
350:59 - next video we shall design each item
351:01 - okay so this was for the video thank you
351:05 - so in the previous video we saw how to
351:07 - apply the gradient now in this video
351:10 - let's apply it in our project okay
351:13 - before that
351:14 - you could see here i have added a new
351:16 - file called colors dot dot and over
351:19 - there i have added the four colors which
351:21 - are the these colors okay
351:25 - so now let's
351:28 - move to this product screen okay so now
351:32 - over here we are getting a horizontal
351:34 - list now let's design the item okay so
351:38 - for that again over here i'll create a
351:40 - new file
351:41 - and i'll call it
351:43 - product
351:45 - item
351:47 - dot dot
351:50 - okay
351:51 - and it will import material
351:58 - okay now for now it will be a stateless
352:02 - widget
352:03 - okay
352:06 - so it is product item now it will
352:08 - receive a product so for that i need to
352:11 - import the product model
352:18 - we have product dot dot okay now over
352:21 - here i am
352:22 - receiving the product so
352:25 - final
352:26 - product
352:29 - product
352:31 - okay now let's receive this over here so
352:34 - over here i'm to write required
352:40 - this
352:42 - dot product
352:45 - okay so now we are taking this product
352:48 - in the parameter
352:49 - so let's
352:51 - continue over here in this container
352:54 - i'll simply
352:56 - change the color so the color being
353:02 - colors dot
353:04 - this
353:05 - okay and i'm gonna give it a
353:09 - height of let's say 100
353:12 - and the width is also gonna be 100
353:16 - okay so to make a proper circle we need
353:19 - to have the height and width as same
353:21 - otherwise it will become an ellipse
353:24 - okay although now it will look like a
353:26 - square okay so let's
353:28 - uh call this from inside this list
353:31 - okay so for that i'll go to my product
353:34 - screen
353:36 - and over here first i need to import
353:38 - this item
353:40 - okay so over here i'll write
353:42 - import
353:45 - then
353:46 - widgets
353:50 - and then over here i have product item
353:54 - okay and now where we are calling this
353:56 - list
353:57 - let's go to that place
354:02 - yes so list of items so over here in the
354:05 - item builder instead of the container
354:08 - what i'm gonna do is i'm gonna call this
354:10 - product item
354:12 - so i'll select this container
354:16 - and change it to product item
354:20 - now this takes a
354:22 - product okay so all i need to do is
354:25 - from the products list
354:30 - i am gonna get the
354:32 - product at the
354:34 - certain index
354:36 - okay
354:37 - sorry this is a named parameter
354:46 - okay
354:48 - let me see yes
354:50 - so now
354:51 - i'll format this and save this
355:00 - so we can see we have a list since it
355:02 - has no padding we are unable to
355:05 - separate okay but you can see that this
355:08 - item is successfully being called from
355:10 - the product screen so now all we need to
355:13 - do is we need to design this
355:16 - okay so for that
355:18 - first i'll create a decoration
355:22 - and the decoration has a box decoration
355:27 - okay
355:29 - now inside this box uh decoration first
355:32 - of all the shape is gonna be circle so
355:35 - for that we have box shape
355:40 - dot circle
355:43 - okay
355:47 - now i also want to have the index of
355:50 - this product in the products list so
355:52 - that i can
355:54 - get the color at that index okay so for
355:57 - that in the product item i'll take the
356:00 - index as well
356:02 - so final
356:06 - and
356:07 - product index
356:11 - okay and over here inside our
356:13 - constructor
356:14 - again i'll add required this dot product
356:18 - index
356:20 - okay over here this should be a dot
356:24 - okay now let's
356:26 - add the index in our product screen as
356:28 - well
356:29 - so along with products i have product
356:32 - index
356:34 - and that is nothing but the index that
356:37 - we get in this function
356:40 - okay
356:40 - so now that we have the index with us
356:45 - okay
356:46 - why is it giving an error
356:50 - let me check the name okay so the error
356:52 - is gone so what happens that in my
356:54 - system because i am recording at the
356:56 - same time running an emulator so my
356:58 - system lags sometime so now if i do a
357:01 - full restart
357:04 - we then by then we will be getting the
357:07 - index in our product item okay so now
357:10 - since we have the index using that we
357:12 - can get the colors
357:15 - okay
357:16 - so for that
357:18 - first i need to import this colors over
357:21 - here okay so for that
357:24 - here i'll write import
357:28 - and then
357:29 - utility
357:31 - and then i have colors
357:33 - okay now over here i'll apply the color
357:38 - okay and the color is gonna be from the
357:40 - list that is
357:42 - primary colors okay
357:46 - primary colors
357:51 - okay and then for the index we have the
357:54 - index over here
357:56 - but since we have only four colors over
357:59 - here what i'm gonna do is i'm gonna
358:00 - divide the index by
358:02 - uh four okay and not get the quotient
358:05 - but the remainder because if i divide
358:08 - any number with the with four the
358:10 - remainders can be 0 1 2 and 3
358:14 - and that is the maximum index that we
358:16 - have in our primary color so this is
358:18 - zero index first index second index and
358:21 - third index so i hope this is making
358:23 - sense
358:26 - okay so now that we have it
358:30 - let's see how it looks okay so i'll save
358:33 - it
358:39 - now if i click on albert einstein so i
358:42 - am getting uh
358:43 - items with different colors now i'll add
358:46 - some margin to it
358:48 - okay so
358:50 - for that over here i'll have a padding
358:56 - okay
358:57 - better than padding would be margin
359:03 - so margin
359:07 - const edge insects
359:10 - dot all
359:12 - uh not all dot horizontal dot symmetric
359:17 - and then i'll just give horizontal
359:19 - margin so horizontal
359:23 - and let this be 5 for now let's see how
359:25 - it looks
359:34 - ok this looks
359:35 - uh pretty decent
359:38 - so now let's apply the gradient okay so
359:41 - for that we have a gradient
359:44 - parameter and over here we can give a
359:46 - linear gradient
359:48 - now
359:49 - if you would remember in the previous
359:51 - video we need to give a begin and end
359:53 - and a list of colors
359:55 - okay so the begin
360:03 - uh for that i'll again use the alignment
360:05 - team
360:08 - alignment dot center
360:12 - alignment
360:13 - dot i think send okay
360:16 - just
360:17 - let me get rid of this
360:29 - alignment
360:31 - dot center left
360:33 - okay
360:34 - and we want to end
360:36 - at
360:40 - alignment dot center right
360:43 - okay and then i need to give the colors
360:46 - so the colors is again gonna be a list
360:49 - and
360:50 - the first color is gonna be our primary
360:52 - color
360:54 - okay
360:57 - and then it is again gonna be the same
360:59 - color with opacity
361:02 - okay so over here we have with opacity
361:05 - and this is gonna be 0.0 okay
361:09 - because uh if you look in the
361:12 - design you will understand
361:14 - so over here uh we have this product
361:17 - item
361:20 - now uh if you look at its color uh
361:23 - so at the starting it is the color that
361:26 - we have and at the end it is the same
361:28 - color but the opacity has changed from
361:30 - hundred percent to zero percent okay so
361:33 - this gradient will start with a color
361:36 - and
361:37 - dissolve to transparent okay so that is
361:40 - the basic idea over here
361:42 - let me save this
361:52 - i don't need this color over here okay
361:55 - because i'm applying gradient
361:57 - so you can see the gradient has been
361:59 - applied successfully
362:01 - okay
362:03 - so
362:05 - the next thing that we will do is add
362:07 - this circular
362:10 - ring on top of it okay in the next video
362:14 - so thank you
362:16 - so
362:17 - up until the previous video we have
362:19 - added gradient to it
362:21 - so now in this video let's add this
362:24 - circular ring to it
362:26 - okay
362:27 - so before we go there i have done little
362:30 - bit changes which i want to show you so
362:33 - earlier i was like it was written like
362:36 - products is equal to equal to null then
362:40 - this was executed i have replaced it
362:42 - with
362:43 - is empty okay so is empty is a better
362:46 - way to do so
362:48 - to check if there is some item
362:50 - in the list or not and earlier in the
362:53 - header the padding was
362:55 - for top and bottom it was 50 50. so i
362:59 - have converted it from symmetric to only
363:02 - and in bottom i have given 20 dp padding
363:06 - okay so these are the two changes that i
363:08 - did
363:09 - now let's continue and add a ring to
363:12 - this item
363:13 - okay so for that i'll open product item
363:17 - now there are
363:19 - multiple ways we can add this i'll use
363:21 - the stack method okay so for that what
363:24 - i'm gonna do is i'm gonna
363:27 - wrap it with a column okay and then
363:30 - rename this column to stack
363:34 - now over here inside stack i'm again
363:36 - gonna create a container
363:42 - okay
363:43 - now its
363:44 - height is gonna be
363:46 - 120. and its
363:49 - width
363:50 - is gonna be 120 as well
363:52 - because over here the height is 100 so i
363:56 - want to add a 10 db
363:59 - 10 pixel margin on the left and 10 pixel
364:02 - margin on the right so which in total
364:04 - makes 120 so that is why the height and
364:06 - width are 120
364:09 - now after that i have decoration the
364:11 - decoration is gonna be box
364:14 - decoration
364:18 - okay then inside boxer decoration the
364:21 - first thing that we have is shape
364:24 - okay so the shape is gonna be
364:27 - box shape
364:30 - dot circle
364:31 - okay
364:32 - then after that we simply have the
364:35 - border
364:36 - and the border is gonna be border dot
364:38 - all
364:41 - and then
364:43 - again the color is gonna be our primary
364:46 - color that we have over here so i'll
364:47 - simply copy this
364:50 - and over here color i'll apply it
364:54 - so this is our color let's save this
365:07 - okay now over here instead of symmetric
365:09 - i'll make it all
365:10 - and instead of 5 i'll make it 10
365:14 - let's save it
365:17 - okay
365:18 - in all we don't need a horizontal
365:22 - okay let's save
365:24 - and you can see we have the margin i
365:26 - just want to make this a little bit
365:28 - thick so over here i'll add a width
365:32 - okay and the width is gonna be
365:35 - let's say three picks
365:39 - okay so let's see
365:42 - so this looks pretty decent as we had
365:45 - over here
365:46 - okay so now uh let's add the name of the
365:50 - item that we have okay so that is
365:53 - we will get the name
365:55 - from this item product okay so for that
365:58 - i am gonna wrap
366:00 - uh wrap this stack with a column
366:04 - okay now the stack is the
366:09 - image section
366:12 - okay and then after that we have
366:16 - product name
366:18 - and that is simply gonna be a text and
366:21 - inside this we are gonna have
366:23 - product
366:25 - dot name
366:27 - okay and now since because of null
366:30 - safety i need to add this
366:33 - now let's see
366:36 - okay so it is giving us errors because
366:38 - of the height so in our
366:41 - product screen
366:44 - over here
366:45 - where the
366:46 - height of the size box is 100 i i'm
366:49 - gonna make it 150
366:54 - okay and it looks
366:56 - so it is done now
366:59 - now
367:01 - let's add the styling and all the stuff
367:04 - to it
367:05 - okay so for that we have style
367:09 - now let's check the phone
367:12 - so the font over here is pop-pins so for
367:14 - that i'll need to import our google
367:17 - fonts so import
367:21 - google fonts
367:23 - dot dot
367:24 - okay and over here i'll apply it to it
367:29 - google fonts
367:31 - dot
367:32 - poppins
367:39 - okay
367:43 - let's format it and while it is
367:47 - formatting over here you can see the
367:49 - uh
367:50 - color is
367:51 - the
367:52 - size is 12 and the color is this okay so
367:56 - i'll copy the color as well
367:58 - okay so over here let's apply the color
368:03 - so the color is again gonna be a color
368:05 - class then 0x
368:08 - double f
368:09 - and the color
368:12 - okay along with this we have font size
368:17 - and that is gonna be 12.
368:22 - okay now over here i can add a const
368:26 - so that this warning will go
368:32 - okay let me
368:34 - see
368:49 - yes so now once all the errors are gone
368:51 - let me save this
368:55 - okay so we get it but i think the
368:59 - uh
369:00 - font size could be a little bit more
369:02 - bigger so
369:04 - i'll make it 15 okay this looks better
369:06 - now i'll add some padding to it so
369:09 - wrap with a padding and the padding will
369:12 - be
369:12 - only
369:14 - okay and i want the padding only from
369:16 - the top because it is sticking to the
369:18 - item
369:20 - okay
369:21 - let's apply it
369:26 - again there is an issue so i'll
369:28 - increase the size furthermore
369:31 - i'll make it 160
369:35 - and we have it over here now over here
369:38 - you can see these items are sticking as
369:40 - well
369:41 - okay so for that i'll wrap up this stack
369:45 - with uh
369:47 - with a mod with a container i guess yes
369:51 - and then in this container i'll add a
369:53 - margin
369:54 - and the margin is
369:56 - again gonna be of edge in sets
370:01 - dot all
370:02 - or maybe better than all will be
370:04 - horizontal
370:06 - sorry not horizontal but symmetric
370:08 - inside that we have horizontal
370:13 - and i think five will do let's see
370:19 - let me save this
370:22 - yes so i think this looks fine this is
370:25 - how our item looks
370:27 - okay now the last thing is to add the
370:30 - image so let's do that
370:32 - okay so i need to go in the center
370:36 - child
370:37 - okay so which is this container
370:39 - now after decoration we'll have item
370:42 - called child
370:44 - yes okay and the child is gonna be a
370:47 - image dot network
371:02 - okay now let's see in our
371:04 - seller item how are we displaying the
371:06 - image
371:08 - okay
371:10 - so over here you can see we have this as
371:13 - our starting part and then we add the
371:17 - name of the image okay so i'll do the
371:19 - same thing over here
371:22 - now instead of seller it is gonna be
371:25 - product dot image
371:31 - okay so let me format this
371:34 - and now if i save this the image will
371:36 - appear over here it will take some time
371:38 - okay so it was it didn't take it was
371:41 - pretty fast
371:43 - okay so now
371:45 - i want to add little bit margin on both
371:47 - the sides so for that i'll add padding
371:51 - padding
371:52 - const
371:54 - edge inserts
371:57 - dot all
372:01 - and 5.0
372:04 - little padding
372:05 - okay so that the items are pushed
372:08 - towards the center okay so this looks
372:11 - fine and with this we have this item
372:14 - okay
372:15 - now uh i am trying to make the
372:18 - ui roughly like what we have designed
372:22 - once the main functionalities are
372:24 - complete we will
372:27 - do all the little design tweakings that
372:29 - we need to do
372:30 - to make it exactly like the design okay
372:33 - so this was for the video thank you
372:38 - so in this video we are going to
372:40 - continue with our mobile app for the
372:43 - project better buys
372:44 - okay so up until the previous video we
372:47 - have made the splash screen
372:49 - and we also have the sellers screen okay
372:52 - and if we click on any of the seller we
372:55 - go to the products that they offer
372:58 - the products screen basically
373:01 - okay so now over here we have the
373:05 - products okay the list of products
373:08 - this image is not loading i don't know
373:10 - why i think
373:12 - i think the image is no more on my
373:14 - server i'll put it but
373:16 - okay so we have the products now let's
373:19 - make a screen where we show the details
373:22 - or if if you
373:24 - if you remember from our design uh just
373:27 - give me a minute let's let me bring the
373:28 - design
373:29 - yeah so if you remember from the design
373:32 - we have this
373:34 - product screen and then we have the
373:35 - product details screen
373:38 - okay so here we intend to show the
373:40 - details of this product okay if you
373:43 - remember the prototype was
373:47 - okay
373:48 - so i don't think the prototype is here
373:50 - but i'll tell you what the general idea
373:52 - was so if we click on any of the product
373:54 - we nee we will come to this product
373:56 - details
373:58 - page and over here we can see the
373:59 - details of the product we can add it to
374:02 - cart and we can buy now so yes the most
374:05 - popular and what's the word around is
374:08 - still remaining and we'll get back to it
374:10 - once we have sufficient data
374:12 - like for most popular we need to know
374:14 - what who which product has the most
374:17 - interaction count and until then we
374:20 - can't make this and then
374:22 - subsequently this as well okay so this
374:25 - is the
374:27 - product details screen and we are gonna
374:29 - make the ui for it now
374:31 - okay and along with this when we click
374:34 - over here the interaction count should
374:36 - also be increased
374:38 - okay so let's get started
374:41 - so first i'll create a new screen
374:44 - okay a new file in the screens folder it
374:47 - will be called product
374:50 - details
374:51 - screen
374:53 - i'm sorry
374:56 - product
374:57 - details
374:59 - screen dot dot
375:02 - okay now over here we'll
375:04 - now over here we will create a stateless
375:06 - widget
375:07 - okay so the idea is that we always
375:09 - create a stateless widget and convert it
375:12 - to stateful widget whenever needed so
375:14 - the class name is also gonna be the same
375:16 - product screen details
375:19 - okay
375:20 - now all these are warning because we
375:22 - have a missing import statement so
375:25 - import
375:26 - material
375:29 - okay and the warning is gone now over
375:31 - here inside this container i'll simply
375:34 - create a child and a text that says
375:38 - product
375:44 - product
375:45 - details screen so as so as to check if
375:49 - the navigation is working properly or
375:51 - not okay so this is not that is all
375:54 - gonna be there but this is just for
375:56 - checking okay so i'll save this now
375:59 - another thing that i miss over here is
376:01 - creating the route name so i'm gonna
376:03 - write static const
376:07 - route name
376:08 - and it is gonna be
376:11 - product
376:12 - details
376:13 - screen
376:14 - okay
376:16 - so now that we have that let's add this
376:19 - route in our
376:21 - app widget okay and inside the routes
376:25 - section so for that first we need to
376:27 - import it
376:28 - so i'm simply gonna write import
376:30 - screens
376:33 - and product details screen dot dot okay
376:37 - and similarly over here i'm gonna add
376:40 - product
376:41 - details
376:45 - i'm sorry
376:47 - product
376:48 - details
376:52 - screen dot
376:55 - okay why is it not changing the color
376:57 - did i not save this
376:59 - okay so you can see the spelling is
377:01 - wrong over here actually so
377:04 - it needs to be you
377:07 - okay just please forgive me for this
377:10 - so yes okay
377:12 - let me save this
377:14 - and now we have product details screen
377:19 - router name
377:31 - okay is the to name
377:33 - product screen details
377:36 - okay
377:38 - i am sorry
377:39 - so
377:42 - product screen actually it should be
377:45 - product details screen so the naming
377:47 - convention here only is not right
377:50 - so let me just
377:52 - change it product details
377:54 - screen
377:58 - product
378:01 - details screen let me save this
378:04 - and now over here i think it should be
378:07 - fine product details screen dot route
378:09 - name
378:10 - and then over here we get a con context
378:13 - but since we not don't need it i have
378:16 - put an underscore over here
378:17 - and then over here it is product details
378:20 - screen
378:22 - okay so
378:23 - the part n means
378:25 - main dot app is done let's format it
378:28 - save it
378:29 - now
378:30 - we need to navigate from this section so
378:34 - this is actually a product item this is
378:38 - the widget that we created over here
378:40 - okay so
378:42 - this is the container i guess this is
378:45 - the column that has all the data means
378:47 - like the image the background and the
378:50 - title
378:51 - okay let's confirm so this is the image
378:54 - section and this is the product name so
378:56 - yes so column is our
378:58 - parent widget so what i am gonna do is i
379:01 - am gonna refractor it and add a
379:05 - container a widget on top of it and the
379:07 - widget is gonna be nothing but our
379:10 - gesture detector
379:11 - okay
379:12 - and then if on tap
379:15 - so on tap what i'm gonna do is
379:19 - simply write
379:21 - navigator
379:24 - dot off
379:26 - context
379:28 - dot push named
379:32 - and the name is gonna be product detail
379:35 - screens route name so let me import that
379:37 - over
379:38 - here import
379:42 - then in screens we have product details
379:45 - screen so over here it is gonna be
379:47 - product details screen route name
379:52 - comma and i also want to send the
379:55 - product as the argument okay
379:58 - so and the argument is nothing but
380:00 - product
380:02 - great so let me format this
380:07 - it is almost formatted okay i need to
380:10 - give a semicolon over here
380:12 - now let me format it it is done let's
380:14 - save it
380:17 - okay now i'll do a full restart
380:26 - okay i click on the seller albert
380:29 - einstein
380:30 - and then if i click on cucumber we have
380:33 - product details screen so it is giving
380:35 - warning because we don't have like a
380:38 - proper scaffold over here but the
380:40 - navigation is working that is confirmed
380:43 - okay so
380:45 - let's add a scaffold over here since it
380:47 - is a new screen
380:49 - okay now
380:52 - does the scaffold have a child or a body
380:55 - yes so it has a
380:57 - body
380:59 - and the body is gonna be a container
381:04 - okay
381:06 - now let's give a background color to
381:09 - this container to see the
381:11 - size that it is taking
381:15 - okay i don't think we can give it i we
381:17 - can give it a color
381:19 - so let's take any random color for
381:21 - testing
381:23 - control option f to format and then save
381:26 - it and yes it is taking the
381:28 - entire screen so that is actually what
381:31 - we wanted now if i add an app bar
381:35 - okay
381:37 - app bar
381:41 - and then i add a title to it
381:44 - and the title takes a text or a text
381:48 - widget so it takes a widget so over here
381:50 - it is gonna be a text widget
381:52 - and let's say
381:54 - title
381:55 - okay let's just see what happens
382:00 - okay so we have a title over here now in
382:03 - the design you can see the title is
382:05 - nothing but the product name
382:08 - and we have a back arrow over here so
382:12 - let's make that
382:13 - so for that first we need the product
382:15 - name over here in the product detail
382:17 - screen so we will uh import the
382:21 - product that we are sending via this
382:24 - navigator
382:25 - okay so over here first i'll import the
382:27 - model product
382:29 - import
382:31 - come out of screens folder go inside
382:33 - models folder and import
382:35 - product so this is a general convention
382:38 - the app level the
382:40 - global level imports go at the top and
382:42 - app level go below it
382:45 - and if dot level imports are there then
382:47 - it goes above this okay so
382:51 - that is that now we have our product
382:53 - over here
382:55 - product product is equal to model
383:00 - model route
383:03 - of
383:06 - context
383:08 - okay then we have settings
383:11 - and then we have arguments
383:14 - and then as to type cast it
383:16 - as product
383:19 - okay
383:21 - so i
383:22 - think it is not settings
383:26 - i don't know why it is giving an error
383:28 - let's see how we did it earlier so in
383:30 - the product screen we took the seller so
383:33 - we just need to give a semi uh question
383:36 - mark exclamation mark over there
383:39 - okay so
383:40 - in development it is not necessary that
383:42 - you know everything it is how you learn
383:47 - so i think
383:49 - it is not settings
383:52 - i don't know why it is giving an error
383:53 - let's see how we did it earlier so in
383:56 - the product screen we took the seller so
383:59 - we just need to give a semi uh question
384:02 - mark exclamation mark over there
384:04 - okay so
384:06 - in development it is not necessary that
384:08 - you know everything it is how you learn
384:11 - okay so now that we have the product
384:13 - over here instead of
384:15 - giving that i can simply write
384:18 - product dot
384:21 - its name so now that we have we are
384:23 - coming from cucumber it should be
384:27 - cucumber i think we need i need to give
384:29 - an exclamation mark over here
384:32 - let me format it let's save it and we
384:35 - have cucumber over here
384:37 - so this is fine
384:39 - now
384:43 - how to change
384:44 - this icon so there is a
384:47 - name i am not remembering it so what
384:49 - i'll do is i'll check all the options
384:51 - that we have
384:53 - okay one thing that we can change for
384:55 - now is the background color let's take
384:57 - the background color from here okay
384:59 - let's go in design
385:01 - and this is the background color
385:04 - okay let me copy it
385:07 - okay
385:08 - then we go back in our code
385:10 - and over here i add
385:12 - color
385:14 - then
385:15 - 0 x ff for opacity
385:18 - and then the color code okay
385:21 - let's save this and see so we have the
385:24 - color and
385:25 - we can remove this color from here for
385:27 - now we don't need it
385:30 - because since we have other items we
385:32 - will be able to verify if it is
385:34 - working or not
385:36 - so we already have this back icon over
385:39 - here because we are using push named
385:41 - okay since we are using push named if we
385:44 - go back we can go from the screen it is
385:45 - coming so that is why back is possible
385:48 - and that is why flutter has
385:49 - automatically added a back icon over
385:51 - here now uh since i am running it on an
385:55 - ios simulator it is coming like this but
385:57 - if i would have been running it on an
385:59 - android simulator it would have come
386:01 - like we have in our
386:03 - design okay so either we can leave it
386:06 - like that or we can change it i am gonna
386:09 - change it but that is like your choice
386:14 - what do you want to do
386:21 - leading okay so leading is the widget
386:24 - that we
386:25 - leading is the named parameter that has
386:26 - a widget
386:28 - so i'll use the icon widget inside that
386:31 - icons
386:32 - enum and from that enum i'll take the
386:36 - back
386:37 - icon
386:39 - so let me see what are the
386:42 - back
386:42 - arrow
386:49 - okay so no
386:51 - arrow let's see what all arrows we have
386:54 - over here
386:57 - yeah so we just need the arrow back
387:00 - okay and it should be of color
387:03 - white
387:06 - color needs to be colors white
387:13 - okay and i need need
387:16 - to give a closing
387:18 - parenthesis over here let me format it i
387:22 - think it needs to go with a const
387:29 - so yes the warning is gone now i need to
387:31 - give a comma over here so it is the
387:34 - standard practice to give a comma if you
387:37 - have more than two
387:39 - named parameters or even unnamed
387:41 - parameters
387:43 - so construct a color for lower
387:46 - prefer const with a constant constructor
387:50 - okay so let's add cost i will prefer
387:52 - const
387:55 - let's format it save it
387:57 - and yeah there we have it
388:01 - okay so now that we are done with this
388:04 - let's come to
388:06 - this section
388:08 - okay
388:10 - let me zoom it out a little bit yeah so
388:13 - first you can see we have this big image
388:16 - in the center so let's do that
388:20 - okay
388:21 - now inside body
388:23 - there will be a child
388:25 - the child is gonna be a
388:27 - image
388:29 - network
388:30 - because we have image url now let me see
388:34 - how i am displaying the images over here
388:36 - yes so as i hoped there is a
388:39 - previous url okay so this is generally
388:42 - how i do it
388:44 - so i'll copy it from here paste it over
388:47 - here
388:50 - simple
388:52 - let me format it
388:54 - save it
388:55 - and it is
388:57 - in the corner so we don't want that
389:04 - okay now since uh the design is on
389:08 - broccoli i am gonna change the item as
389:11 - well to broccoli from cucumber okay so
389:14 - now that we have added an icon over here
389:16 - what we forgot was to
389:19 - add like action to it what will happen
389:21 - if i click on that icon so let's redo
389:24 - that
389:25 - so again i'm gonna refractor it wrap it
389:28 - with a widget
389:29 - add
389:30 - gesture detector
389:33 - now you can also change this icon to an
389:36 - icon button widget but i prefer gesture
389:38 - detector so it is
389:40 - your choice basically it is nothing more
389:43 - than that
389:44 - so on tap
389:47 - and on tap
389:49 - i want
389:51 - navigator
389:53 - navigator
389:55 - dot of context
389:57 - to
389:58 - pop
389:59 - i guess
390:01 - yes
390:02 - it is
390:04 - pop
390:06 - great
390:07 - so now this is done let me format it
390:09 - save it
390:11 - yes let's see if the back button works
390:13 - it works
390:15 - now where is broccoli so do we have
390:18 - broccoli yeah
390:20 - so now let's
390:23 - fix this
390:24 - so it is again over here giving a
390:26 - warning to maybe
390:30 - avoid unnecessary containers okay okay
390:34 - there is one okay then let's remove it
390:36 - for now we can always add it back when
390:40 - we need it
390:41 - so i am removing the container
390:44 - and the warning now let's
390:46 - see its height let's increase its height
390:50 - height is gonna be
390:52 - media query dot off context
390:56 - dot size
390:58 - and dot height
391:02 - into
391:03 - two by three so what i am doing is i am
391:06 - taking the entire screen size and then i
391:08 - am alerting two third of the screen size
391:11 - to this
391:12 - image so what this will so what this
391:15 - will do is whenever the screen size
391:18 - changes it will not impact how the image
391:20 - looks
391:21 - okay so that is why it is very important
391:23 - to use dynamic sizing
391:26 - over here so let me format it save it
391:31 - okay now i think we also have to
391:35 - like tell the image to expand and that
391:38 - is fit
391:40 - and the fit is
391:42 - again
391:43 - box fit
391:46 - dot
391:47 - cover i guess
391:50 - let's see
391:52 - yes so this is how we want it but the
391:55 - image is actually not very sharp it is
391:58 - very blunt so i will be updating the
392:00 - image images but for now like we can we
392:04 - understand the gist
392:06 - okay so i don't want it two by three
392:08 - that is way too big i don't have space
392:10 - for anything else
392:12 - so what i'm gonna do is i'm gonna
392:15 - change it
392:16 - to
392:18 - uh one by two
392:19 - okay so that will only be half of the
392:22 - space let's see
392:25 - or maybe one by three
392:29 - okay then again it is very small let's
392:31 - come back to one by two
392:34 - okay we are continuing with this for now
392:36 - we can again change it later
392:40 - okay so now in the design we have the
392:42 - image and then we have the
392:45 - price so let's add the price and now we
392:49 - again have to add back the container or
392:52 - better than container we simply start
392:54 - with adding a column
392:56 - and let's see if it is pushed to the top
392:59 - okay so what generally happens is that
393:01 - as soon as you add a column it is
393:03 - already in like top aligned so all the
393:06 - items that you might have had in the
393:08 - center will automatically be pushed to
393:10 - the top but since this is an image and
393:12 - it is kind of taking this much space
393:16 - so it is not being pushed okay you will
393:17 - understand what i am trying to say as
393:19 - soon as i add the
393:21 - text
393:24 - okay and the text is gonna be
393:27 - our
393:29 - product
393:32 - dot price per kg
393:37 - okay
393:39 - okay so i don't think we need it over
393:41 - here we need it
393:43 - over here
393:51 - okay it is okay so basically the error
393:53 - is that
393:55 - it is uh
393:56 - integer so what i am gonna do is
393:59 - i'm gonna typecast it so what for that
394:04 - okay just give me a moment first i'll
394:06 - add it inside quotes then add curly
394:09 - braces in front of it
394:11 - and then add a dollar sign
394:14 - so now it is an integer but since it is
394:16 - inside quotes it will automatically be
394:18 - typecasted to a string
394:20 - so let me save this and you can see this
394:23 - much space is already left so what we
394:26 - can say is that the image is taking from
394:28 - this place till this place
394:31 - okay which is way too much of
394:34 - like size so we need to fix that so the
394:38 - solution is that we update the image
394:40 - actually
394:42 - and i think i'll do that and then
394:44 - continue with the video so
394:47 - hang
394:48 - on until the previous
394:52 - video
394:53 - we were working on the product details
394:57 - screen
394:58 - okay and over there we were trying to
395:00 - display the product image but since the
395:02 - image was compressed
395:05 - so the image was getting pixelated when
395:08 - we were trying to display it in a
395:10 - product details screen
395:13 - where the size of image was
395:15 - comparatively larger than what we had in
395:17 - pro pro product screen
395:19 - okay so what i did was i did add an
395:23 - image okay and i'll show you how i did
395:26 - it
395:27 - so first
395:28 - let's go to server handler where i am
395:31 - getting all the
395:33 - products okay so over here what i am
395:35 - gonna do is i am gonna print it once
395:38 - so that
395:40 - you can see how i am getting the
395:41 - response over here
395:43 - so print
395:45 - response
395:46 - dot
395:47 - body
395:50 - let me format it
395:52 - then we can do a full
395:54 - restart to see
395:56 - okay
396:00 - so
396:01 - it is loading the sellers let's go to
396:03 - albert einstein
396:06 - okay so over here you can see that i am
396:09 - getting an image and after that i am
396:11 - getting an uncompressed image
396:14 - okay and that is inside another folder
396:17 - products uncompressed images and the
396:20 - same product name okay so now i have
396:23 - done it on the server and was not able
396:26 - to record it but i will give you a gist
396:28 - of how to do it if you want to do so
396:31 - so this is the api okay this is
396:35 - the last point till where we have
396:37 - written so all you need to do is simply
396:39 - go inside models inside product
396:42 - okay add another variable over here and
396:46 - when you create an add product with this
396:48 - image there will be another uncompressed
396:50 - image similarly in the sql also after
396:53 - image there will be uncompressed image
396:56 - okay and over here since it is select
396:57 - star we don't need to worry about it
397:00 - along with this
397:03 - in the apis
397:05 - okay inside gen because general and the
397:08 - products okay uh
397:11 - no over not over here actually i'm sorry
397:14 - inside api inside seller
397:18 - and when we go to add
397:20 - along with this image we will also take
397:24 - another image that is the uncompressed
397:26 - image which will comparatively be larger
397:28 - in size and thus larger
397:30 - in dimension and thus pixelation will
397:32 - not happen
397:34 - okay and along with this you also need
397:36 - to alter the database and add a key
397:37 - value pair for the
397:39 - side image okay so the process is pretty
397:42 - simple we have done for some other
397:44 - properties
397:45 - earlier you can look in those videos if
397:48 - you are still not clear
397:50 - okay
397:51 - so let's get back to our code editor now
397:54 - over here we are getting an uncompressed
397:56 - image let's uh add that key value pair
397:59 - in our product model
398:02 - so i'll add another string over here
398:05 - okay and i'll call it
398:07 - uncompressed
398:09 - image
398:11 - okay and over here below image
398:14 - i'll add that uncompressed image
398:18 - okay
398:18 - and get it from the same json with the
398:21 - key name
398:23 - uncompressed image with a underscore
398:27 - so now that we have our image let me
398:30 - save this
398:31 - now that we have our image in the
398:33 - product details screen instead of
398:37 - product image i'm gonna use
398:39 - uncompressed image
398:44 - instead of typing so much
398:50 - yeah
398:51 - so we have our uncompressed image let me
398:54 - format it save it
398:56 - and i don't think we need this print
398:59 - anymore
399:00 - and anyways it is giving us a warning
399:03 - okay so that is that and with that i
399:07 - remember that in main yes i might have
399:10 - forgot to add the const so let's fix
399:13 - that
399:15 - once that is done let's do a full
399:17 - restart we don't need main and those
399:20 - things
399:23 - okay
399:27 - so
399:28 - let's go in albert einstein the cellar
399:31 - now
399:32 - as we were seeing the broccoli last time
399:36 - let's see if there is any change
399:38 - and you can see that the image is like
399:41 - far more better than what it was earlier
399:45 - okay so
399:46 - this is one thing done
399:48 - okay
399:49 - so now let's move continue with the rest
399:53 - of the design so before that i noticed
399:56 - one thing over here and that is that it
399:58 - has curvy edges
400:00 - okay so let's try to achieve this
400:05 - okay let's go back over here
400:10 - now we have this app bar we don't want
400:12 - to touch that
400:13 - we have this column
400:16 - okay now let's surround it with our
400:18 - container again we'll refractor it
400:21 - wrap it with a container
400:23 - okay now in this container let's give it
400:26 - a color okay or maybe inside the
400:29 - decoration we take a box decoration
400:33 - okay
400:34 - and over here we give it a color just as
400:36 - to check if the thing is happening
400:39 - properly or not
400:40 - so color
400:42 - colors dot
400:44 - amber
400:46 - is fine
400:47 - okay and then after that
400:49 - okay first let's say wait and see
400:52 - so we have the color now let's give it a
400:55 - border radius
400:57 - uh border
400:59 - radius
401:00 - and there is something only yeah over
401:02 - here only
401:04 - okay
401:05 - now over here we need to give it in top
401:07 - left
401:08 - okay now it takes a radius okay so it
401:12 - takes a radius
401:13 - now i'm not sure how the radius is but
401:17 - we just can't try so radius dot
401:21 - circular yeah okay so this is how we can
401:24 - do it radius dot
401:26 - circular so what i am trying to tell
401:28 - over here is that it is not necessary
401:31 - for you to know everything all you need
401:33 - to do is have some common sense and do
401:35 - it and try until you stumble to the
401:39 - best option there okay
401:41 - now let me format it save it
401:45 - and we have a very slight border radius
401:48 - let me change that i'm gonna make it 50
401:51 - okay so over here is a significant
401:53 - border radius
401:55 - now i want the
401:57 - same for
401:59 - i guess top right yeah
402:01 - so top
402:02 - right again it is gonna be radius
402:06 - and dot circular
402:08 - and
402:09 - 50 is actually too much i'm gonna make
402:11 - it 40
402:13 - okay
402:16 - let's see
402:17 - so 40 seems fine
402:19 - this is also gonna be 40
402:23 - yes so now uh
402:25 - we have this black white space over here
402:29 - we don't want that we want the same
402:31 - color as we have over here so
402:34 - we can't actually add a background color
402:37 - to it but we can do other stuff we can
402:39 - wrap it inside another container and
402:41 - give that a color okay so that is
402:44 - exactly what i'm gonna try right now
402:45 - before that i'll let me just fix this
402:47 - warning
402:49 - and it is again for
402:51 - const
402:53 - okay so
402:54 - let me wrap it inside our container
402:58 - now since it is a container the
403:00 - refractoring tool will not show a
403:02 - container so i'm gonna take widget
403:04 - and then
403:05 - call it container
403:08 - okay the container will have a color the
403:10 - color that is this
403:12 - color okay
403:16 - so
403:18 - here we go
403:20 - let me format it save it and we have the
403:23 - color over here we don't need this amber
403:26 - anymore
403:29 - okay sorry we need to make it white
403:32 - actually
403:37 - yeah but now if you see we have a line
403:41 - over here and that is nothing but the
403:43 - elevation of app bar so all we need to
403:45 - do is go inside app bar
403:48 - and make the elevation as 0
403:51 - or 0.0 since it is a
403:54 - double
403:56 - yeah so we can see that it all
403:59 - is same and we have it
404:01 - as we had it in the
404:04 - design
404:05 - so that is cool
404:07 - we don't need this amber anymore
404:12 - okay sorry we need to make it white
404:14 - actually
404:19 - yeah but now if you see we have a line
404:23 - over here and that is nothing but the
404:25 - elevation of abba so all we need to do
404:28 - is go inside app bar
404:30 - and make the elevation as 0
404:34 - or 0.0 since it is a
404:37 - double
404:38 - yeah so we can see that it all
404:41 - is same and we have it
404:44 - as we had it in the
404:46 - design
404:47 - so that is cool
404:50 - one thing done
404:51 - we can say that
404:53 - okay now this image still looks pretty
404:56 - big to me
404:57 - what i'm gonna do is
404:58 - i am
405:00 - gonna deduct
405:03 - 20 from it let's see
405:09 - okay
405:10 - let's let it be like that we can leave
405:12 - it like that for now so let me add some
405:15 - documentation means
405:18 - basic stuff so that someone else who
405:20 - looks at this code directly and is not
405:23 - watching the video is able to understand
405:25 - so this container
405:27 - is for
405:30 - the background
405:31 - color
405:32 - and this is our
405:35 - main container
405:39 - okay
405:41 - now this is actually adding the
405:45 - curves but that is not important this is
405:48 - important
405:49 - this is the
405:51 - product
405:52 - image
405:53 - actually
405:55 - so
405:56 - that is that now this is the
405:59 - product
406:01 - price
406:03 - per
406:04 - kg
406:06 - okay
406:08 - per kg
406:11 - and it needs to be
406:13 - capital p so over here it is 120 but in
406:17 - the design it is rupees and followed by
406:20 - kg
406:21 - so we can do that since it is already in
406:25 - string interpolation
406:27 - so rupees and then a space then the
406:29 - price
406:32 - and then
406:33 - per
406:34 - kg
406:35 - and let me save this
406:38 - okay so this looks fine now i don't want
406:41 - it in the center i want it in the right
406:44 - so again where is our column yeah so it
406:46 - is over here now i'm gonna make all its
406:48 - child left aligned so that since it is a
406:51 - column the vertical axis is the main
406:53 - axis so i'm gonna write main axis
406:55 - alignment
406:56 - and then from the main axis enum
406:59 - okay i'm gonna
407:01 - write start so let's see if this works
407:03 - or not
407:05 - okay it didn't
407:08 - i don't know why
407:09 - so what we can do is inside the
407:12 - surround this
407:14 - text with
407:15 - widget and that widget can be a sized
407:19 - box
407:20 - okay now the only purpose that size box
407:23 - serves is that we can give it a size
407:26 - so i am gonna give it a width
407:29 - and the width is gonna be
407:31 - uh media query
407:34 - dot off
407:35 - context dot size
407:39 - dot width
407:42 - okay
407:44 - so that is there
407:48 - and now you can see it is to the left so
407:52 - what happened over here was that
407:54 - originally
407:56 - the text has taken the entire space but
407:58 - now since we
408:00 - surrounded it with a sized box the sized
408:02 - box took the entire space and the text
408:05 - inside it only took the space as much as
408:07 - it
408:08 - required so
408:10 - our purpose here is done
408:13 - okay now
408:15 - let's style this text before that i want
408:18 - to leave some space towards the left so
408:21 - what i am gonna do is there are two
408:23 - things that i can do actually
408:25 - over here i can surround this text with
408:27 - a padding okay and that is not
408:30 - the way to go we can simply
408:32 - change the size box to a container so
408:35 - that we get the width and the
408:38 - padding in the same
408:41 - in the same widget okay so over here i
408:43 - want to add padding and the padding was
408:45 - like engine sets
408:48 - as in sets
408:50 - only because we only want it from the
408:52 - left and left and i'm gonna give it
408:56 - 50 pixels
409:01 - okay we can
409:04 - this seems fine for now
409:09 - so the warning is also gone now over
409:12 - here in this child text
409:15 - let's start styling it
409:17 - so
409:19 - style and there is this text style
409:22 - now i think the font that we are using
409:26 - is poppins
409:28 - and i think i already have google phones
409:31 - in here
409:32 - let me check yes we have
409:36 - so
409:37 - let me import that
409:39 - import
409:41 - google font dot dot
409:44 - now
409:45 - over here instead of text style it is
409:48 - gonna be google fonts dot
409:52 - pop pins i guess yeah
409:55 - so it is gonna be pop pins
409:58 - and inside this let us give it a color
410:01 - i'm sorry
410:06 - what is that called
410:08 - is it color or text color
410:12 - okay so it is color i don't know why it
410:14 - was not showing
410:16 - over there on its own so we are gonna
410:18 - use the same color
410:22 - okay now if you are asking where if you
410:24 - wanna know where i am getting all these
410:26 - things the design file is in the link so
410:29 - you can go over there and
410:31 - just have a look yourself then after
410:34 - that we need to mention the font size
410:36 - the font size
410:39 - i'm sorry the font size can be
410:44 - 10.0
410:47 - let us refractor it save it and see how
410:49 - it looks
410:51 - and it doesn't look good
410:54 - so what i am gonna do is i am simply
410:56 - gonna pick everything from here so the
410:58 - size is
411:00 - 220 and the
411:02 - font weight is
411:04 - medium so let's simply just do
411:06 - that and see if it looks
411:09 - decent or not and then we will do little
411:11 - bit tweakings ourselves so font size is
411:14 - there
411:15 - and then font weight
411:17 - then again we have the font-weight enum
411:22 - okay and then
411:26 - the options are
411:29 - bold let's see bold because medium is
411:32 - not an option over here we will have
411:34 - to give 100 200 and values like that
411:39 - so this 120
411:42 - looks fine but i think we can increase
411:44 - its
411:45 - size a little bit more
411:49 - yeah so this looks better
411:51 - okay so with this the
411:53 - price per kg is also done now i'm gonna
411:55 - commit it over here so that
411:58 - if you watch the video or the gridlock
412:00 - you will
412:01 - have a good idea
412:03 - so
412:04 - first i'll check the status
412:07 - add all the files to staging then again
412:09 - check if all the files are added and the
412:12 - end green means yes it has then i'm
412:14 - gonna commit it
412:20 - price
412:22 - per kg
412:24 - display
412:26 - and then i'm gonna push it to
412:28 - github
412:32 - okay so this was for the video in the
412:35 - next video we shall add this
412:37 - and most probably the buttons we can't
412:40 - add this for now
412:41 - okay so or maybe we will add this and
412:45 - just add some random data and later on
412:47 - we can connect it with the api so i'll
412:50 - need to think what i need to do
412:52 - but
412:53 - see you in the next video okay so
412:56 - thank you for joining the previous video
412:59 - we were able to display this image and
413:01 - the price per kg so in this video we are
413:05 - gonna make the rest of the ui and i have
413:07 - decided that i'll also make this ui and
413:10 - it will be static for now and once we
413:13 - make the
413:14 - apis for them we'll connect it with them
413:18 - so let's open our code editor i'll do a
413:21 - full restart
413:22 - to see if everything is working fine or
413:24 - not
413:30 - so we are getting the sellers now if i
413:32 - click on any seller
413:34 - uh their products are being shown
413:37 - okay i'll
413:39 - choose broccoli and then broccoli is
413:42 - being shown over here and it's
413:44 - price so this is in product details
413:47 - screen and i think i have not added the
413:50 - font over here
413:51 - so
413:53 - i'm gonna do that now
413:56 - the style
413:59 - is gonna be
414:00 - google style
414:03 - uh sorry google fonts
414:06 - dot pop pins
414:08 - okay i think
414:10 - this is enough so let me format it
414:17 - so it is taking some time to download
414:19 - this poppins
414:21 - okay so once this is done i do a full
414:23 - restart and we have our font over here
414:26 - so let's continue now next thing is we
414:28 - have to add a description over here okay
414:31 - so
414:33 - this is the product image product price
414:36 - per kg this is the container
414:38 - over here and we are gonna add the
414:41 - description
414:45 - so description is again gonna be a
414:48 - text field
414:49 - sorry it is gonna be a container
414:53 - okay
414:54 - and
414:55 - the container inside this will have our
414:58 - text field because of the issue we faced
415:00 - over here
415:01 - now again i want its width to be the
415:03 - entire screen width and the padding
415:05 - should be equal to the padding that we
415:07 - have given over here so that the entire
415:10 - text looks aligned so i'm gonna copy it
415:13 - paste it over here
415:15 - okay
415:16 - the error is because i'm missing a comma
415:18 - over here
415:20 - now inside this there is a text field
415:23 - okay sorry
415:24 - the child is a text field
415:28 - okay and the
415:30 - text is nothing but product dot
415:32 - description
415:35 - okay
415:36 - let's see how it looks
415:40 - so we are getting a description over
415:42 - here but it doesn't look
415:44 - pretty
415:45 - so
415:46 - let us fix that
415:48 - what i'm gonna do is i'm gonna make the
415:50 - padding 40 so that we get little bit of
415:54 - extra space
415:57 - okay and i want to leave the same amount
415:59 - of padding from right side as well so
416:02 - either i can change add or write over
416:04 - here or change this only to symmetric
416:07 - i'm gonna change it to symmetric
416:10 - and this is gonna be the horizontal axis
416:14 - yeah
416:16 - let me save this
416:18 - okay this looks better
416:20 - now i also
416:22 - need to add a padding from the top but i
416:25 - am not sure if i need it from the bottom
416:28 - i am gonna add it from both sides for
416:30 - now
416:30 - but if later i don't need it i'll again
416:33 - switch back to only
416:36 - so i think 10 should do
416:39 - let's see
416:41 - yes it looks fine
416:43 - now let's come to our text style and the
416:46 - style is again gonna be text style
416:51 - sorry
416:52 - we don't want text style we want google
416:55 - fonts dot pop-ins
416:59 - okay
417:02 - now over here i'm gonna change the color
417:05 - okay the color is gonna be this color
417:15 - okay
417:19 - now let me add a comma let's format it
417:21 - let's see
417:23 - okay so it has converted to pop-ins but
417:25 - it is taking too much of space
417:28 - so what we can do is we can like remove
417:31 - some part of it for now
417:33 - like
417:34 - we can add a c-more option if we want
417:37 - for that we can use the rich text field
417:39 - but i am not gonna do that i am simply
417:42 - gonna
417:43 - clip certain part of the text
417:45 - okay but if you want to add the see more
417:47 - ncls option you can do that rich text is
417:51 - the
417:52 - way to do it
417:54 - dot
417:55 - i think it was a sub text or
417:58 - sub string yeah
418:01 - so i want from 0 to 120 let's see how
418:04 - much that is
418:07 - now it is way too less let's make it 150
418:11 - because actually over here the
418:13 - description wouldn't matter if you think
418:16 - from the product perspective
418:18 - the vegetable picture in itself
418:20 - tells everything
418:24 - uh okay one it is giving us five lines
418:26 - let's see how much were in was in the
418:29 - design
418:30 - it was near around five
418:32 - lines so i think
418:34 - the text is done for now
418:39 - let me format it save it so we have our
418:42 - text in place
418:44 - now after text
418:46 - we have a
418:47 - review section
418:52 - product
418:53 - with a view
418:55 - okay so over here first we have a
418:58 - container
419:02 - okay that is
419:03 - understandable
419:05 - now this container will have our
419:08 - decoration
419:09 - the decoration is gonna be box
419:11 - decoration
419:13 - okay and generally in
419:15 - decoration we always have boxer
419:17 - decoration the color is gonna be gray
419:21 - color again i'll use the colors enum
419:24 - colors dot gray
419:27 - i'm sorry
419:29 - colors dot gray
419:31 - let's see how this looks
419:35 - okay where is the container i think
419:38 - i need to specify a height
419:40 - so i'm gonna give it a height of
419:43 - 50 for
419:46 - now so this is our container and
419:50 - this is not the gray we want so we can
419:53 - use different versions of it by just
419:55 - adding numbers into the square bracket
419:58 - so the numbers are like 100 200
420:01 - per hundred being the lightest shade and
420:04 - eight hundred or nine hundred being like
420:06 - and as you
420:07 - uh like increase the numbers the shades
420:10 - get darker that is the just
420:13 - so 200 is way too
420:16 - light i'm gonna make it four let's see
420:21 - now four is again too much
420:23 - let's make it three
420:25 - now let's check in our design i think
420:27 - three would do for now
420:30 - okay
420:31 - so
420:35 - let's give it a width
420:37 - or instead of giving it a width we can
420:39 - simply apply padding from both the sides
420:42 - or maybe margin margin is the way to go
420:44 - because padding will again the
420:46 - background color will be in the padded
420:48 - area as well so margin is the way to go
420:51 - margin
420:52 - const so now
420:54 - so i automatically put const over there
420:57 - because of because of the
420:59 - so many warnings that we got
421:02 - so now it has kind of become a habit
421:05 - so horizontal
421:07 - let's say 30.
421:12 - yeah so this looks fine
421:14 - um
421:15 - okay for now
421:18 - and the height can be 100
421:22 - see how much that is okay we can start
421:25 - with this for now we can again later
421:28 - change the height and margins if needed
421:31 - so now let's add border radius
421:37 - border radius dot circular
421:41 - i guess yes and 5.0
421:45 - okay let's see
421:49 - let's confirm it in our design
421:53 - i don't think it is 5 yes it is 15 so
421:58 - let's see
422:04 - yeah so
422:05 - the 15 here and 15 there is the same
422:08 - thing
422:10 - okay so now let's continue what i'm
422:13 - gonna do is i'm gonna take it to another
422:15 - screen so that i don't have to keep on
422:18 - flipping
422:20 - if you want to look the design the
422:21 - design link should be in the description
422:25 - okay
422:26 - so now after let's come back here
422:29 - now
422:31 - now that we have a container
422:34 - let's add the items that are inside it
422:37 - so along with this i am gonna add a
422:39 - padding over here so that the contents
422:42 - don't start appearing at the corner
422:44 - okay padding
422:47 - const
422:48 - engine sets
422:50 - all
422:51 - 10.0
422:54 - let's see
422:56 - okay
422:57 - we will not see any visible change sorry
422:59 - for