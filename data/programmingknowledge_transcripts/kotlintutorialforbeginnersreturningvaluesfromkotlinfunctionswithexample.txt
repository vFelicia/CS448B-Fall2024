00:00 - in the last video we have discussed
00:02 - about the
00:03 - functions
00:04 - and
00:06 - what is a function the block body syntax
00:08 - of a function and we have also created a
00:11 - new function that prints
00:14 - a string okay and we have also called
00:16 - the that function okay so in this video
00:19 - we are going to uh create a function
00:24 - that
00:26 - that prints
00:28 - the double of the that returns the
00:30 - double of an uh integer
00:32 - okay so function
00:36 - that doubles an integer
00:38 - okay so uh
00:40 - we are going to
00:41 - use the
00:44 - blog body as of now so what was in the
00:47 - blog body so we have first
00:50 - use we have to use the fun keyword
00:53 - and then we have to name the function
00:55 - such that when we refer it after a long
00:58 - time it should be clear to me that why i
01:01 - named the function and what the function
01:04 - does so as the function doubles an
01:06 - integer so i can name it as
01:09 - double
01:11 - and
01:13 - integer
01:15 - okay and then i have to
01:18 - pass the argument in the open and close
01:21 - parenthesis
01:23 - so uh
01:25 - like i have to pass
01:27 - pass an argument and then it's type so
01:30 - i'll name the argument as a and it type
01:32 - its type is hint
01:35 - okay and next i have to mention the
01:38 - return type so the written type of an
01:40 - integer would
01:41 - the written type of and double of an
01:43 - integer would be also in
01:46 - so i am going to mention int
01:49 - now
01:50 - we have to open the function and write
01:54 - the code
01:55 - okay
01:56 - so
01:57 - we have a
01:58 - now what we have to do
02:00 - we have to just multiply a by 2 so i
02:03 - have i can write a is equals to
02:06 - a into 2
02:10 - okay
02:11 - and then
02:13 - i could written
02:15 - a
02:17 - okay
02:19 - so now it is showing
02:21 - a red underline
02:24 - inside a
02:26 - and it is showing that val cannot be
02:28 - reassigned so
02:30 - what the problem is like when i define a
02:32 - function
02:33 - the variable or the argument
02:37 - that i define is a value parameter not a
02:40 - variable parameter okay so i cannot
02:44 - multiply and reassign it okay
02:47 - so what i can do is i can just return a
02:51 - into
02:52 - 2 here
02:54 - ok
02:55 - so
02:56 - when it enters a function double an
02:58 - integer
02:59 - it is passed in argument an integer and
03:03 - the return type is an integer and the
03:05 - function returns a into 2
03:07 - so i am just going to go into the main
03:10 - function and call the
03:13 - double and integer function so i am
03:16 - going to write double an integer and
03:18 - pass the
03:20 - integer in it so
03:22 - let's say i have passed equals to 4
03:26 - now
03:28 - when i run this program
03:30 - i am not going i am not i will not be
03:33 - able to print anything
03:36 - because uh i have i have not used print
03:39 - statement anywhere
03:41 - okay
03:43 - so uh
03:44 - let me just
03:49 - so yeah when i will run this program
03:52 - it is not going to print anything
03:53 - because i have never used the print
03:55 - statement anywhere so what i am going to
03:57 - do is i am going to just add print ln
04:00 - here
04:02 - and
04:03 - what it will do is it will print the
04:06 - output of that function okay so
04:10 - when i run this program
04:11 - uh we can see that the output is 8
04:16 - so we have made a function that doubles
04:19 - an integer
04:20 - now we will move ahead and see what
04:23 - expression body is expression body is
04:25 - another syntax for writing a function
04:28 - so when i write a function it's just
04:31 - written
04:32 - double of an integer it is quite a long
04:35 - syntax okay so instead of these this
04:38 - block body expression body is used for
04:41 - these type of
04:43 - syntaxes
04:44 - so what is expression body is
04:48 - so
04:48 - in expression body also we will uh
04:51 - firstly use the keyword fun
04:53 - and then we will give the function name
04:57 - and then we will pass the argument and
04:59 - then we will pass the return type so
05:03 - starting is
05:05 - similar to the block body
05:07 - and after passing the return type
05:10 - instead of
05:11 - opening curly braces we will just
05:14 - write equals to and then the expression
05:17 - so i'll just write the function
05:21 - double integer
05:24 - in
05:25 - expression body so i'll pass argument x
05:30 - as an integer
05:32 - and the written type would be also an
05:35 - integer
05:36 - and now instead of
05:39 - opening and closing of curly braces i'll
05:42 - just write equals 2 and then
05:45 - i'll just write x
05:47 - into
05:48 - 2
05:49 - okay and now i'll go ahead in the main
05:52 - function and
05:54 - write println
05:57 - and
05:59 - double integer and then i'll give value
06:03 - 46
06:05 - now
06:06 - when i run this program
06:10 - it gives output as 8 and 92 so the
06:14 - program works just fine
06:16 - so what expression body did is it
06:20 - it reduced the length of the code
06:24 - and it
06:25 - made the code much easier
06:27 - to read
06:29 - okay
06:30 - so now calling and invoking of a
06:32 - function
06:34 - what is calling an invoking of a
06:35 - function so
06:37 - when i called the function here double
06:39 - an integer
06:41 - okay it is called the calling of a
06:42 - function
06:44 - so calling the new function inside the
06:46 - main function is the calling of a
06:48 - function
06:50 - and
06:52 - how
06:53 - how can i do that
06:55 - we have to just write the function name
06:58 - and pass the argument in the
07:00 - parenthesis okay
07:03 - so
07:04 - i guess now we have completed the
07:06 - function