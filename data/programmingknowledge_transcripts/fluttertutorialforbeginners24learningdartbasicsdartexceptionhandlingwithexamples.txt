00:00 - welcome to programming knowledge so in
00:02 - this video we are going to discuss about
00:04 - error handling in dart and you might be
00:07 - thinking why we are using this editor
00:10 - instead of the dot pad
00:11 - and the reason is that in dart pad it
00:14 - automatically handles the
00:16 - exception okay and as we are discussing
00:18 - about error handling so we need
00:20 - to see the errors okay not all the
00:23 - errors but maximum errors in the dart
00:26 - pad
00:26 - is handled by itself okay so the concept
00:29 - of error handling is same as in any
00:31 - other object-oriented programming
00:33 - language
00:34 - okay we have a try and then we
00:37 - have a catch okay and then this catch
00:40 - block
00:41 - takes an exception okay and if you don't
00:44 - know what is an exception
00:45 - so that means that is a technical term
00:48 - used for errors
00:50 - okay so in your program if there is an
00:52 - error then it is referred to an
00:53 - exception
00:54 - okay so and in the catch block we
00:58 - deal with the exception
01:01 - okay so now let's try creating an error
01:05 - okay and without this try and catch
01:07 - block
01:08 - so i'll use the most popular example for
01:10 - errors
01:11 - for creating errors that is division by
01:13 - zero
01:14 - okay so i'll create a variable a 10
01:18 - sorry it should be 10 and then
01:25 - and then another variable b that is 0
01:28 - and then in variable c i'll
01:32 - store the quotient
01:35 - so a by b okay and then i'll print
01:39 - c so now let's try running this and see
01:42 - what is the
01:43 - answer and you can see we are getting
01:47 - infinity as the answer okay so that is
01:50 - because whenever we divide
01:52 - by in that it automatically gets
01:55 - converted
01:56 - to a double value okay and in the double
01:59 - data type in dot we have a certain value
02:02 - for
02:02 - infinity so as this will give an
02:05 - output of infinity so it is
02:07 - automatically converted
02:09 - into double and the infinity value is
02:12 - assigned to this variable c that is why
02:14 - we are getting
02:15 - infinity as the output okay so to
02:18 - prevent
02:18 - from the changing of data types we need
02:21 - to add
02:22 - a tilde symbol over here so now let's
02:25 - try running this again
02:26 - okay and now since the it is not being
02:29 - converted we should get an error
02:31 - okay and you can see we are getting an
02:33 - error and as i told error is referred as
02:36 - exception so there is an
02:37 - unhandled exception and that is
02:40 - integer division zero exception okay
02:43 - that means it is very much understanding
02:45 - that we have divided by zero and that is
02:47 - why we are getting this exception
02:49 - okay but now suppose this exception is
02:52 - in an
02:53 - app and the user sees this error message
02:56 - so he might not be able to understand
02:58 - what this
02:59 - means okay so at that places what we do
03:03 - is
03:04 - we surround them with a try and catch
03:06 - block
03:07 - okay so over here a try and every try
03:10 - block
03:11 - needs to be followed by a catch block
03:13 - okay and then it takes an
03:15 - e that is the extra exception and that
03:18 - will be an
03:19 - object of this exception okay and then
03:21 - instead of
03:22 - printing these things i'll simply
03:26 - print division
03:30 - by zero is not
03:34 - possible okay and now let's try running
03:37 - this again
03:42 - and you can see that the catch block has
03:46 - been executed and it is
03:47 - printing division by zero is not
03:49 - possible okay so this is what happens
03:52 - normally in try and catch block
03:54 - the we keep the code where we expect
03:57 - to find some error inside the try block
04:00 - okay
04:01 - and if some error is found then that
04:03 - terminate
04:04 - execution is terminated then and there
04:06 - and the
04:07 - catch block is executed instead
04:11 - okay so this is the use of try and catch
04:13 - block and this is how we generally use
04:15 - try and catch block in most of the
04:17 - programming languages
04:18 - okay so now in dart there is another
04:21 - thing that it provides us
04:23 - okay and that is for specific exception
04:26 - handling that means
04:28 - if it is a division by zero exception
04:31 - then we will handle it differently
04:33 - otherwise we will handle it
04:34 - differently
04:38 - okay so for that what i'll write over
04:41 - here is
04:42 - on okay so on is a keyword in dot and
04:45 - then the exception name
04:47 - integer
04:50 - division by zero
04:55 - exception okay so if this is the case
04:57 - that means integer division by
04:59 - zero exception is the case then we will
05:02 - then this statement will be printed so
05:04 - let's try running this
05:09 - and you can see division by zero is not
05:11 - possible that is inside our this on
05:14 - block
05:14 - okay now along with this let's try to
05:17 - let's try and check if we can have
05:19 - another catch block or not
05:21 - okay so now inside this i'll simply
05:24 - print
05:26 - another catch block
05:30 - and let's run this and see what happens
05:35 - okay so you can see only the on block is
05:38 - being printed and not the
05:40 - catch block means if the exception is of
05:43 - this type then only this block will be
05:45 - executed and not
05:46 - the catch block and if the exception is
05:50 - not of this type then only catch block
05:52 - will be executed
05:54 - okay so now let's create another
05:55 - exception i'll comment this out for now
06:00 - and i'll create a list let's say
06:04 - s is equal to one comma two comma three
06:07 - comma four
06:09 - and i try to print the value
06:12 - out of index okay so that means s4
06:15 - where the list has index only till three
06:19 - 0 1 2 and 3 so let's try executing this
06:23 - and see
06:28 - and now you can see it is giving me some
06:30 - different type of errors which is not
06:32 - actually an error but it isn't warning
06:34 - and that is because over here i have
06:36 - forgot to give the data type now let's
06:39 - try running this again
06:42 - and you can see the error has been
06:44 - created over here and since it was not
06:46 - of this type so this block is not
06:48 - executed
06:49 - instead the catch block is executed
06:52 - okay so this is how we handle error
06:55 - specifically means
06:56 - handle error for specific exception in a
06:59 - specific way
07:01 - okay and suppose if we want to get an
07:03 - object over here also
07:05 - so after this what we need to do is
07:08 - simply write
07:09 - catch e okay so that means
07:12 - when this is the exception then the
07:14 - exception will be catched over here and
07:16 - then inside this we can do whatever we
07:18 - want to do with
07:19 - this e block okay
07:22 - so this was about to try catch and this
07:26 - is specific error handling now the next
07:28 - thing that
07:29 - we generally discuss in error handling
07:32 - is a
07:32 - finally block okay so that means
07:36 - whether the try block is executed
07:38 - completely
07:39 - or if there is some exception and a
07:41 - catch block is
07:42 - executed no matter what is the case
07:46 - after this whole part is over
07:49 - finally block will always be executed
07:52 - okay so let's see print
07:57 - always executed
08:01 - okay and now let's try running this
08:06 - and you can see the catch block has been
08:09 - printed means the statement inside the
08:11 - catch block has been printed
08:13 - and the final block has also been
08:15 - executed
08:16 - okay so this was the case when there is
08:19 - an error
08:20 - now let's see if there is not an error
08:23 - okay then as i said this try block
08:26 - should be executed and then the finally
08:30 - block
08:30 - because that is always executed okay so
08:34 - this was about finally blocked
08:37 - okay so the last thing about exception
08:39 - that we need to discuss is creating a
08:42 - custom
08:42 - exception okay so for that i'll create a
08:46 - custom exception class
08:47 - okay since we are studying an
08:49 - object-oriented programming languages
08:52 - most of our working will be done via
08:56 - class okay so i'll create a class
08:59 - age exception okay which will throw an
09:03 - error when the age is below zero which
09:06 - is not technically possible
09:08 - so class is exception implement
09:11 - okay so this is the way of inheriting
09:14 - another class properties okay or a
09:16 - abstract class to be more specific
09:20 - implements exception okay so we have an
09:23 - exception
09:24 - class already inside that okay now
09:26 - inside this
09:27 - all we need to do is create a define our
09:30 - method
09:31 - string err msg
09:34 - or you can name it as and how you like
09:38 - okay so what it basically does is by
09:41 - implementing this exception
09:43 - we are basically able to throw this type
09:46 - of exception okay and whatever we do
09:48 - inside this doesn't matter
09:50 - with the throwing of exception okay this
09:53 - is our custom choice what we want to do
09:55 - with it
09:56 - okay so over here this will simply
09:59 - return
09:59 - h cannot be zero
10:04 - h cannot be less than zero
10:09 - okay so now over here
10:13 - let's see i'll remove this
10:18 - thing from here and now
10:21 - over here i'll create a variable
10:24 - a v r a is equal to
10:27 - minus 10 okay so that means
10:31 - if a stands for h so i'll check if
10:34 - a is less than
10:38 - 0 then i want to call this exception
10:42 - okay so to call this exception there is
10:44 - another keyword throw
10:46 - which creates an exception and throws it
10:48 - to the catch block if it has any or to
10:51 - the user if we don't surround it with a
10:52 - try and catch block
10:54 - so throw and then we write
10:58 - age exception
11:01 - okay so now let's see what happens
11:11 - and you can see we got an exception with
11:14 - the exception was thrown over here
11:16 - that's why the catch block got executed
11:18 - and the finally always gets executed
11:21 - okay so this was about error handling
11:23 - and dot
11:24 - thank you