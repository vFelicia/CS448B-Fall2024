00:00 - hey guys welcome to programming
00:02 - knowledge
00:03 - in this video we will be looking at
00:04 - templates in c plus
00:06 - now what are templates well templates
00:09 - are a way to define
00:11 - generic functions or you could say
00:13 - classes in c
00:14 - plus right so we'll just take an example
00:18 - to understand that better so let's say i
00:19 - have a function called add which is
00:21 - really simple it's just going to take in
00:23 - two numbers and
00:24 - uh written with the sum right this is a
00:26 - very simple function and
00:28 - you know the drill just call this one
00:30 - two
00:31 - and look at the output and no surprise
00:34 - that this is just going to return me
00:36 - three right so here we have the output
00:40 - now what i could do is let's say i
00:43 - wanted to
00:44 - um create a function which can add
00:46 - floats so instead of 1 and 2 i'd say 1.2
00:49 - and 2.3
00:50 - now as you know this is just going to go
00:53 - inside this function because float can
00:55 - be converted to an integer
00:57 - and once you're doing that you are just
00:59 - losing this data so that's not expected
01:01 - right so
01:01 - even if you run this you'll be getting
01:03 - three as your output there's no errors
01:05 - but you did not want three to be the
01:07 - output you wanted 3.5
01:09 - right because you wanted to consider
01:11 - both the decimal places too
01:14 - now the fix you would say is uh well
01:17 - just
01:18 - change this change integer to float
01:22 - because if we convert an integer to
01:24 - float there's
01:25 - no problem in that because anyhow the
01:28 - decimal is going to be zero and if you
01:30 - want to process
01:31 - floats you can directly given floats
01:34 - over here and
01:35 - it's just going to process it the same
01:36 - way so if i just do that
01:38 - that fixes the issue but now i want
01:41 - i'll say that i want a function to add
01:44 - two strings
01:45 - right well we don't need a function for
01:47 - that you just you could just do plus
01:49 - over here but
01:49 - anyway let's for an example say we want
01:52 - to
01:53 - add two strings or two two objects of
01:56 - our custom
01:56 - class right so let's say i defined a
01:59 - custom class
02:00 - uh well let's say complex number well
02:02 - complex numbers too mathematical let's
02:04 - say
02:05 - well let's just say abc right so our
02:07 - class is abc
02:08 - and you have defined a operator called
02:10 - plus inside that we'll see how to do
02:12 - those things later that's
02:14 - kind of advanced this is called operator
02:16 - overloading well
02:18 - you say that plus should work in
02:20 - different ways for different data types
02:22 - so if it's a float integer or number
02:24 - basically
02:25 - plus should basically mean the
02:27 - arithmetic
02:28 - addition and if it's a string
02:31 - as it's defined in the string class you
02:33 - just concatenate basically hello plus
02:35 - world becomes hello world right
02:37 - so those things will see later but let's
02:39 - say for now that i want to do that
02:41 - now is there a way could like i can use
02:45 - this function to
02:46 - add a string to no right i cannot do
02:48 - that
02:49 - but i could define another function
02:51 - called string so string add
02:53 - say a string x string y
02:57 - and i could just written x plus y this
02:59 - is completely valid
03:01 - and if i just call though that function
03:03 - using
03:04 - two strings so hello
03:08 - and world right
03:12 - i forgot the
03:15 - run this i will be getting hello world
03:18 - over here
03:19 - so this completely works and it's fine
03:22 - but
03:22 - what happens if i have more and more
03:24 - types of
03:25 - uh data which i have defined so
03:28 - basically
03:29 - data of custom classes or instances of
03:32 - custom classes
03:34 - this is not at all practical right i
03:37 - cannot
03:37 - write so many functions uh which do the
03:40 - same thing
03:41 - which do the exact same thing so in this
03:43 - case it's just adding those two numbers
03:45 - right so
03:46 - is there a way i could automate this
03:48 - well there is a way and that is when
03:51 - the use of templates come into play so
03:53 - what we are going to do here is we are
03:54 - going to define this function not as a
03:57 - function but
03:58 - as a blueprint so that the compiler
04:00 - knows that yeah
04:01 - if this is the input i need to create a
04:04 - function in this way
04:05 - so that this function gets executed so
04:07 - that's what templates do
04:09 - so it's very simple to create a
04:11 - templated function
04:13 - over here so what you do is you just say
04:14 - template
04:16 - and inside a pair of angular braces you
04:19 - just specify the type
04:21 - so uh it's just it's called type name or
04:24 - class it really doesn't matter what you
04:25 - call it this day it's a very
04:27 - it's a very small difference between
04:29 - class and type name but we'll just get
04:31 - into that
04:31 - but for now you can just call it
04:33 - anything you want so let's just go with
04:35 - class
04:36 - and uh what you you just name your
04:39 - custom class anything you want so this
04:41 - is
04:41 - just basically you know it's like a
04:43 - variable for the compiler so that
04:46 - anything i put in there the data type
04:48 - comes into this place
04:49 - right so you could just call it anything
04:51 - generally people call it t
04:53 - right t for template or anything so g
04:56 - t whatever we want you can just call it
04:59 - right we'll just
05:00 - stick with t and here what we'll do
05:04 - here is we'll just below that template
05:06 - definition
05:07 - we'll just use our custom created class
05:10 - so t
05:10 - add well it's not float t it's t
05:14 - x and t y so what happened here
05:18 - what i'm doing here is that now i don't
05:20 - need this function
05:22 - right what i'm doing here is that i just
05:24 - created a template
05:26 - of this function called add and
05:29 - it's just going to take any data type
05:32 - which
05:33 - uses this function inside this it's just
05:36 - going to create this function inside the
05:38 - memory and it's going to call that
05:39 - function it's as simple as that so
05:41 - here if i do 1.2.3 what it's going to do
05:45 - 1.2 and 2.3 are floats
05:48 - so it will create a class called float
05:51 - so it's it's basically
05:52 - it's going to look inside the memory it
05:55 - well
05:55 - it does not find anything because this
05:57 - class is just a pseudo class it's just a
05:59 - template
06:00 - right it's it's a blueprint and this
06:02 - function does not really
06:04 - exist but here i have called that
06:06 - function so it will just look at the
06:08 - template right
06:09 - so it has this blueprint it knows what
06:11 - to do
06:12 - the class is t so basically class is
06:14 - float so it's what it's going to do here
06:16 - is
06:17 - just define that function using float so
06:19 - float explode y
06:21 - and return x plus y so this
06:24 - part it's going to do automatically and
06:27 - we'll be getting this function so here
06:28 - if i call strings it's just going to
06:30 - create strings if i call integers it's
06:32 - going to create integers
06:33 - if i call abc it's going to create this
06:36 - function for abc
06:37 - all right and other another thing is
06:39 - that this operator should be
06:41 - uh defined for that class so for now
06:44 - we'll just
06:45 - assume that this operator has been
06:47 - defined for whatever class we are going
06:49 - to use
06:50 - but in case it's not defined it's just
06:52 - going to throw in error right
06:54 - so this is as simple as that to define a
06:57 - template or a generic function so this
06:59 - is
07:00 - an example of a generic function you
07:01 - could just use this function
07:04 - and create whatever you want so here i
07:06 - could just use this for
07:07 - float i could also use this for integers
07:10 - or i could just
07:11 - use it for strings as i used here so
07:14 - let's say
07:14 - integer first one two
07:17 - right and then the strings run this
07:21 - okay i have an error what does it say
07:23 - okay
07:24 - it says cons cash star cannot be added
07:27 - that's because here
07:28 - we are passing in strings and we'll get
07:30 - to that in a moment right
07:32 - well that's a simple fix but uh we'll
07:34 - see what happened over here
07:36 - but now for now let's just see the
07:38 - output and then analyze it so
07:39 - here we have the floating point output
07:41 - and the integer output
07:43 - and that's what we expected now coming
07:45 - back to the error
07:47 - what happened was when you pass this
07:49 - function it's
07:50 - as i told you it's a string is nothing
07:53 - but
07:54 - a array of characters so when you define
07:56 - a literal like this this is called a
07:57 - string literal
07:59 - and if i just define something like this
08:01 - it's just going to be
08:03 - an array of characters inside the memory
08:05 - and as you know
08:06 - there is no plus operation between two
08:09 - arrays if you want you could create a
08:10 - plus operation between two arrays
08:12 - using a you know custom class but we're
08:15 - not going to get into the details right
08:16 - now but
08:17 - basically if you could create an array
08:21 - class which would support this plus
08:22 - operator this two would have been
08:24 - concatenated and we would have got the
08:26 - output as we wanted
08:27 - but here what is happening here is that
08:30 - we are allowing the compiler to
08:31 - determine for itself so here
08:33 - we are just passing that input we are
08:35 - not providing any additional information
08:38 - as to how these inputs should be passed
08:40 - or anything like that we're just calling
08:41 - that
08:42 - input we're just calling that function
08:44 - and the compiler is left to determine
08:46 - what we are doing with this
08:47 - right so the problem arises over here
08:51 - when we are using something which the
08:52 - compiler does not understand
08:54 - so for compiler this is not a string
08:56 - class
08:57 - objects right string class is something
09:00 - which is defined outside the compiler
09:02 - integer is defined inside the compiler
09:04 - character is defined inside the compiler
09:06 - but there is no string which is
09:08 - being defined inside the compiler so for
09:10 - this this is nothing but a character
09:12 - array right
09:13 - so it's just trying to add two character
09:14 - arrays and that's why
09:16 - uh that was not successful and it threw
09:18 - an error so
09:19 - the way you solve this is you explicitly
09:22 - specify how to pass
09:23 - this uh output inputs right so how to
09:26 - pass this parameters
09:27 - so that's what we did when we were using
09:30 - vectors so if you remember
09:31 - we the way we defined the vector was we
09:34 - did something like that
09:36 - right so this is the thing which goes
09:39 - inside this thing so that that's how a
09:41 - vector class has been defined so
09:42 - whatever you pass in here it's going to
09:44 - go inside the screen
09:45 - right so that's the same thing we need
09:48 - to do here so let's say i want to pass
09:50 - past this thing or process these two
09:53 - parameters as float i'll just say float
09:55 - here right
09:56 - i want to process these two things as
09:59 - integers so i'll just say integer over
10:01 - here process these two things as strings
10:03 - just a string over here and now if i run
10:05 - this i will not be getting an
10:07 - error and i will be getting the output
10:09 - what i expected right
10:11 - so that's how simple it is to work with
10:13 - generic functions well you could have
10:15 - multiple
10:16 - parameters over here so class d or class
10:19 - and whatever you want and though uh
10:22 - you could just specify what input and
10:24 - what output you want so that is
10:26 - also possible right so that's about
10:29 - uh templates and functions you could
10:31 - also do it for classes so let's just
10:33 - quickly take an example so
10:35 - um what would be a best example
10:39 - um let's say we want to create a class
10:41 - called uh
10:42 - let's say storage so class storage
10:46 - uh and it's just going to store some
10:48 - some um
10:50 - some data right so it's just let's say
10:52 - private uh
10:54 - let's say stack or what do we call this
10:57 - we'll just call it store
10:59 - it's just going to store this so let's
11:01 - say an integer area of store
11:04 - and it's just going to store some number
11:07 - of data so
11:08 - in c plus plus now you know that this
11:10 - won't work
11:11 - because you're just creating an empty
11:13 - array you need to specify
11:15 - size to the array but now every storage
11:17 - will have a different size
11:19 - right i cannot create different storages
11:21 - with different sizes
11:23 - well i need to do that outside this
11:25 - class but what if there are some
11:26 - important functions so right now there's
11:28 - nothing it's just uh no holding this uh
11:30 - store variable right
11:32 - but what if i want to create um a class
11:35 - which has kind of functions like you
11:38 - have the vector class vector class is a
11:40 - very good example of this
11:41 - because you have very good functions
11:45 - inside the vector class you have
11:46 - functions for finding sorting and all
11:48 - those things
11:49 - which we need to define it outside if we
11:51 - wanted to use it for different sizes
11:53 - but inside the vector class you are just
11:55 - using it
11:56 - without defining anything right you're
11:58 - just using the inbuilt things
12:00 - right so the way you do that is really
12:02 - simple just use another type
12:04 - so type sorry template
12:09 - template and it's going to be integer
12:11 - because i'm not
12:12 - specifying a class here so if you
12:14 - remember i used to do something like
12:16 - clash d
12:17 - but here we know the type right so
12:19 - you're just going to pass in some size
12:21 - so i'm just going to say int right so in
12:24 - size
12:25 - uh well size is uh let's just say s
12:28 - right
12:28 - so in test and i'm just going to create
12:31 - the class with that size right
12:33 - that's as simple as that now you could
12:35 - create a storage of how much our space
12:38 - you want
12:39 - right so i could just say storage and
12:42 - let's say five which is going to hold
12:44 - just five elements
12:46 - and then s1 or i could just say storage
12:50 - 10 h2 right and this will work perfectly
12:53 - fine if i just run this
12:55 - i have a successful compilation and it
12:58 - has
12:58 - only created those two classes with only
13:01 - that much size
13:02 - right and if i wanted to i could even
13:04 - specify uh you know the type of data
13:06 - it's going to store so let's say even
13:08 - uh well that is going to be generic
13:10 - right we don't know what
13:12 - type of data we are going to store so
13:14 - here comes the class d
13:16 - or whatever you want so class uh let's
13:18 - say
13:19 - some class you can just name it whatever
13:22 - you want doesn't really matter right
13:24 - so you could just say that and it's just
13:26 - going to be some class
13:28 - of the store s and here what i'll do
13:31 - i want to store five items of integer
13:33 - and here i would
13:34 - store 10 items of class string run this
13:39 - i'll be getting successful compilation
13:41 - and that's how useful
13:42 - templates are right so with just
13:45 - one one additional line you could
13:48 - actually create a generic function which
13:49 - could be used anywhere
13:51 - and for any class well for any class
13:53 - it's a very vague statement because
13:55 - whatever functions we are defining that
13:57 - should be applicable to that class so
14:00 - in case you saw over here hello and well
14:03 - if they are treated as character arrays
14:05 - as a compiler treats it
14:06 - that's not going to work but if i treat
14:08 - it as a string object
14:10 - well string is a class it has this plus
14:13 - operation defined between two strings
14:15 - so it will right so that's that's how it
14:18 - is
14:19 - you need to specify
14:22 - this template keyword along with
14:25 - whatever generic
14:26 - types you want and also you could also
14:28 - type specific uh
14:30 - items over here so in my case the size
14:32 - is an integer
14:34 - always right so you cannot have a 3.5
14:38 - you know blocks of data or something
14:40 - like that this is just going to be three
14:41 - or four so i know that it's going to be
14:43 - integer right so just specify integer
14:45 - over here and
14:46 - class can be any class you could just
14:48 - you know create a store for any
14:51 - kind of class over here so that's how
14:53 - you use templates
14:55 - and yeah the difference between the
14:57 - class and type name i forgot about that
14:59 - so
14:59 - class is basically an independent thing
15:02 - so
15:02 - independent right
15:06 - and type name is used when it depends on
15:10 - something
15:10 - right so this is not a very big
15:14 - uh you know it's not a very big thing to
15:17 - interchange these two things it's not
15:18 - going to make any difference when we're
15:20 - just using something like this
15:22 - so here class and type name mean the
15:23 - same thing semantically
15:25 - but where it gets useful is that when
15:28 - you have chained
15:28 - uh you know template so i have a
15:30 - template inside template so template
15:32 - inside template
15:33 - something like this right so now what
15:36 - happens here is that this
15:37 - template will belong will you know
15:39 - depend on this particular template
15:41 - because
15:42 - that's that's how we have defined the
15:44 - template over here
15:45 - this template is actually something
15:47 - which uses this template so it's
15:49 - dependent so in that case you use type
15:51 - name but
15:52 - if it's not dependent it's independent
15:54 - then you use class
15:55 - right well this is a very uh
15:58 - in-depth uh problem which you may not
16:01 - probably encounter but
16:03 - in case you encounter this is the this
16:06 - is
16:06 - the error and this is how you fix it if
16:08 - it's dependent you just use
16:10 - type name if it's independent you just
16:12 - go with class
16:13 - and if you're just using simple
16:15 - templates like what we used over here
16:18 - right which is completely independent
16:20 - and it's just a one level template just
16:22 - the top level template right
16:23 - it's not dependent or independent
16:25 - whatever it is it's
16:26 - it's just it's just unique right it's
16:30 - something which we have defined on a
16:31 - very top level
16:33 - and it does not depend on some other
16:35 - classes or some other template whatever
16:37 - it is so
16:38 - in that place uh well you could just go
16:40 - with type name or class
16:42 - you could use that interchangeably
16:43 - whatever you feel comfortable with it's
16:45 - not going to make any difference
16:47 - right so that's about templates in c
16:50 - plus
16:50 - and uh that's how you create your own
16:54 - generic classes so
16:55 - now you know how to create a class for
16:58 - vector right it's basically the same
17:00 - thing what we did here
17:01 - it's a very simplified version of a
17:02 - vector or you could just call it an
17:04 - array because
17:05 - uh the stl contains an array well the
17:08 - htl is called stl because it uses these
17:10 - things that's the
17:11 - that's the thing right so htl the full
17:14 - form of
17:14 - stl is standard
17:18 - template library and it uses templates
17:22 - so
17:22 - that's why it's called stl right so
17:25 - whatever
17:26 - things you find inside the htl it's all
17:29 - templates so
17:30 - and this is how you build up a generic
17:32 - uh
17:33 - class well i did not put anything over
17:35 - here
17:36 - you just put that right you get that
17:38 - right so whatever you do here that's
17:40 - basically templates and
17:42 - in the next video we'll uh just go over
17:45 - some of the very
17:46 - useful html everything is useful inside
17:48 - the stl but
17:50 - some are very high standard but some of
17:52 - the things you
17:53 - just use normally so there's this
17:55 - algorithm
17:56 - class which you could use the vector the
17:59 - list and all these things
18:00 - will go through some of them in the next
18:02 - video till then happy coding