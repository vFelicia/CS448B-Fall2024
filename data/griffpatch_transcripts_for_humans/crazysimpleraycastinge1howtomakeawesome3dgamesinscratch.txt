With timestamps:

00:02 - hello fellow scratchers i'm griff patch
00:05 - and today we are beginning a new mini
00:07 - series perhaps just two episodes on the
00:10 - exciting world of scratch raycasting
00:13 - so raycasting what is all that about
00:15 - well it's about firing a ray from one
00:18 - point in our game outwards across a
00:20 - level until it hits something be that a
00:22 - wall or some other object the simple
00:24 - idea here has many exciting applications
00:27 - from tracing projectiles to creating
00:30 - real-time laser pointers our so-called
00:32 - flashlights oh wow and can even help us
00:35 - to draw 3d first-person worlds like this
00:38 - one wowzers are you as excited by this
00:42 - as me
00:43 - now every project needs a beginning and
00:45 - before we can go on to raycasting or
00:48 - even 3d rendering we first need a level
00:51 - and a robust script for controlling the
00:53 - player after all we want to be able to
00:56 - move around this maze using a first
00:58 - person control scheme and we need to be
01:00 - able to safely handle collisions and any
01:02 - snagging on walls so let's see how far
01:05 - we can get are you ready let's get
01:08 - scratching
01:10 - we begin with a brand new scratch
01:12 - project and before we do any coding we
01:15 - need to draw our level it wants to
01:17 - represent some kind of arena or maze
01:20 - now as such i think these projects look
01:23 - good in the dark so head over to the
01:25 - stage backdrop
01:27 - and after converting the costume to
01:29 - bitmap fill the entire backdrop black
01:35 - spooky i love it
01:37 - next up make a new sprite
01:42 - and name it level
01:44 - no prizes for what this is going to be
01:45 - used for
01:47 - the level we are drawing is top down i'm
01:50 - going to draw it using simple grey
01:51 - rectangles as raycasters tend to work
01:54 - best with flat walls
01:56 - we start by ensuring we draw a full wall
01:59 - around the entire level don't leave any
02:02 - gaps at the corners otherwise your
02:03 - project will bug out later on
02:05 - now just have fun making corridors and
02:08 - interesting rooms to walk around in
02:11 - while i do this i just want to let you
02:13 - know that for this tutorial none of the
02:16 - scripts or costumes in this episode have
02:19 - to be followed exactly as i do them for
02:21 - episode 2 to work
02:22 - now you can recreate the level and the
02:24 - player in any way you like and the
02:26 - raycasting part should work just fine
02:29 - either way watch the video and you may
02:31 - pick up some useful tips and we can
02:33 - ensure you finish with something that
02:35 - will be very successful
02:37 - okay my level is done as you can see
02:40 - it's fully surrounded by walls this
02:42 - looks good but i bet you will make a
02:44 - better one than mine
02:46 - can't wait to see them in the scratch
02:48 - studio when you are done as always
02:50 - there's a link to the studio under this
02:52 - video
02:53 - now it would be a good idea to ensure
02:56 - the level is kept centered on the stage
02:58 - when the project starts running so in
03:00 - the code tab
03:02 - when green flag clicked simply go to
03:05 - zero zero
03:07 - splendid we can now concentrate on the
03:10 - player who is to be walking around our
03:12 - maze
03:13 - we'll reuse the first sprite since it's
03:15 - here
03:17 - so rename it player
03:19 - i'm afraid to say we won't be keeping
03:21 - these scratch cat costumes so delete
03:23 - them and we'll paint a new costume sorry
03:26 - scratchy maybe next time
03:28 - now i'm going to draw a beautiful lemon
03:31 - yellow triangle to represent the player
03:34 - recenter the view and zoom right in
03:37 - to create a perfect triangle we draw a
03:40 - square holding down the shift key while
03:42 - drawing keeps it square
03:44 - then select and delete one corner using
03:46 - the shaping tool
03:48 - now again while holding the shift we can
03:50 - rotate the shape to point right
03:53 - lastly size it as you want this time
03:56 - holding alt the alt key allows the shape
03:59 - to stay centered
04:01 - but if you are not sure it is centered
04:03 - double check by dragging and snapping
04:05 - the shape to the center of the canvas
04:07 - afterwards
04:08 - finally give the costume the name player
04:12 - now for some code
04:14 - we'll start the player centered on the
04:16 - level when flag clicked use a go to xy
04:20 - of zero zero
04:22 - we want the player to be able to rotate
04:24 - around to face different directions so
04:27 - set rotation style to all around
04:30 - to prove the point why not point in
04:32 - direction 45 degrees
04:36 - if we run that you can see that the
04:38 - player is facing diagonally up to the
04:40 - right great now since my level has a
04:43 - nice empty space in the middle this was
04:45 - a good place to start but if your player
04:48 - is touching a wall right now then just
04:51 - drag them to a new position on the stage
04:53 - and update your go to xy to that new
04:55 - position you really don't want to start
04:57 - in a war
04:59 - last thing we'll do to set things up is
05:01 - to ensure we switch to the player
05:03 - costume
05:04 - now we'll concentrate on player movement
05:08 - oh there are so many ways we could do
05:10 - this i'll lead you through one possible
05:12 - way but you are free to do this any way
05:15 - you want it really won't affect the
05:16 - raycaster later on we need a game loop
05:20 - and this will simply run forever
05:23 - next we'll check if the player is
05:26 - holding down the left arrow key
05:29 - if they are we want to turn the player
05:31 - counterclockwise that is to the left i'm
05:34 - going to turn by just 3 degrees this may
05:37 - feel a little slow and you are free to
05:39 - increase this if you'd like
05:41 - to turn right we do likewise duplicate
05:44 - the first if and change it to check for
05:47 - the right arrow key press
05:49 - then just switch the turn for a turn
05:51 - clockwise that is to the right and again
05:54 - by 3 degrees
05:56 - if you test that now we should find that
05:58 - the left and right arrow keys make the
05:59 - player rotate nicely on the spot
06:02 - but how about some real movement forward
06:04 - and back we need two more if statements
06:07 - i duplicate these first two but we can
06:09 - discard the turning scripts the first if
06:12 - needs to check for an up arrow key press
06:15 - and the second one a down arrow key
06:17 - press
06:18 - so when we press the up arrow we simply
06:20 - move two steps forwards
06:23 - to move back we can do the same but move
06:25 - by minus two steps as a negative move
06:28 - will indeed move us backwards
06:31 - here it's testing time and this is now
06:34 - much more fun we can scoot around the
06:36 - level walking forwards and backwards and
06:38 - turning as we go this is a great start
06:41 - to creating all sorts of games but until
06:43 - we fix the fact that we can walk through
06:45 - walls it's not really much use
06:49 - so we'll begin by adding the most basic
06:51 - collision scripts and then we'll work up
06:53 - from there so basically we just want to
06:56 - stop the player walking forwards or
06:58 - backwards into a wall
07:00 - to stop us having to code the same thing
07:02 - twice for walking forward and backwards
07:04 - we'll make a new custom block to handle
07:06 - this
07:07 - name it move
07:09 - and add a numeric input named steps
07:13 - click to run without screen refresh
07:17 - so
07:18 - this is going to replace these two move
07:20 - blocks in our game loop so drag the move
07:23 - two steps block into the new define move
07:25 - script and where it came from drop in
07:27 - our homemade move block like so
07:30 - we set it as before to move by two steps
07:34 - now looking back at the define move
07:36 - script drag the steps input variable
07:39 - into the move two steps block below to
07:41 - link it all up
07:43 - right now we can use these new custom
07:45 - block to replace the backwards movement
07:47 - too
07:48 - but this time again move by
07:51 - negative two steps
07:54 - at this point our code does exactly the
07:56 - same as it did before but we can now add
07:59 - in the collision detection so check
08:01 - whether we have moved into a wall
08:04 - if touching level
08:06 - then
08:07 - so if we have the simplest way to get
08:09 - back out again is to move back to where
08:12 - we came from so again we move
08:15 - and to get a negative value of steps we
08:18 - use zero
08:19 - subtract
08:20 - steps there i think we can give that a
08:24 - try
08:25 - let's walk into a wall
08:27 - bonk that looks promising right testing
08:30 - from different angles and each time the
08:33 - player stops and everything looks good
08:35 - but don't let that fool you for there be
08:39 - dragons
08:40 - not literally obviously but how many of
08:43 - you already know what might be wrong
08:45 - with this simple approach to collisions
08:47 - shall i show you
08:49 - if i turn so i can walk closer to this
08:52 - wall over here i collide and stop
08:55 - and now that i'm really close what
08:57 - happens when i turn the player
09:00 - oh no
09:01 - this can't be good can you see how i can
09:04 - turn the player to overlap the wall yeah
09:08 - and now i am stuck my player can't move
09:10 - forwards or backwards as they're already
09:13 - colliding with the wall either way
09:15 - i think you'll see this problem time and
09:18 - time again in scratch projects we really
09:20 - don't want the player's rotation to
09:22 - affect the collision detection
09:24 - so to get around this problem we will
09:27 - switch to using a simple square hitbox
09:29 - instead this way no matter how we rotate
09:33 - the collision will not change
09:35 - perfect
09:37 - okay no problem enter the costume editor
09:40 - and make a new costume
09:42 - name it hit box
09:45 - you may find it useful to convert to
09:47 - bitmap before we begin as this helps to
09:49 - draw an accurate hitbox shape
09:52 - now zooming in i'm going to draw a four
09:55 - by four filled square it should
09:57 - perfectly fill one of the shaded grid
10:00 - squares of the canvas
10:03 - then once done drag it until it snaps
10:05 - into the center of the canvas
10:08 - coolio and that's our simple hitbox
10:11 - back to the code
10:13 - and we'll update the define move script
10:16 - simply switch to the hitbox costume
10:18 - before we do anything else
10:20 - also we'll ensure the hitbox never
10:23 - rotates by setting the sprite's rotation
10:25 - mode to don't rotate
10:28 - okay so now this touching level check
10:30 - will be using the hitbox costume for
10:32 - collisions as we wanted
10:34 - but once the checks are done we should
10:36 - switch back to the original player
10:38 - costume so duplicate the top two blocks
10:40 - we just added and pop them in at the end
10:43 - of this custom block
10:45 - we switch the costume back to the player
10:47 - costume and reset the rotation style to
10:50 - all around
10:52 - and that should do it shall we give it a
10:54 - test
10:55 - just as before i can run into the wall
10:57 - at a shallow angle and then rotate until
11:00 - i overlap but this time we find we are
11:03 - not getting stuck as although we are
11:06 - overlapping the real level still we can
11:08 - safely back out and continue moving
11:10 - around the level
11:11 - phew thank goodness for hit boxes
11:14 - right so we are really getting somewhere
11:17 - but let me show you one thing about this
11:20 - classic collision code that really bugs
11:22 - me
11:23 - if while running down a passageway we
11:25 - snag up against a wall we'd not expect
11:28 - to pass through the wall but we would
11:30 - expect to continue down the corridor
11:32 - however that does not happen
11:35 - nope instead we instantly stop dead as a
11:38 - dodo
11:39 - this is because our collision code
11:41 - crudely undoes our last movement pushing
11:44 - us right back to where we came from
11:46 - so how can we handle this better
11:49 - the best solution is to break the
11:51 - directional movement apart into its x
11:53 - and y components
11:55 - and then even if one direction is
11:57 - blocked
11:58 - the movement in the other direction can
12:00 - still be completed and the movement
12:01 - continues
12:03 - but to do this is not so straightforward
12:05 - as currently we use a move two steps to
12:08 - move forwards how can we split that into
12:11 - a change x and a change y
12:15 - luckily we have the maths to do the job
12:17 - and here it is
12:19 - move two steps actually does the same
12:21 - job as are you ready for it change x by
12:25 - 2 multiplied by the sine of direction
12:28 - and change y by 2 multiplied by the
12:31 - cosine of direction
12:33 - yep that's how the move block actually
12:36 - works
12:37 - so we can make use of this but before we
12:40 - do we have some coding to do
12:43 - we'll start by making a new custom block
12:45 - that tries to move the player by a value
12:47 - of x and y
12:49 - let's name it try move and add two
12:52 - numeric inputs dx and dy
12:55 - these indicate just how far to move in
12:58 - the x and y directions
13:01 - now in here we first do the movement
13:03 - bring in a change x and a change y block
13:07 - we then simply use the dx and dy input
13:10 - variables as the amounts to move
13:13 - next we check for collisions
13:16 - if touching level
13:18 - then
13:20 - and of course if we collide as before we
13:23 - simply reverse the previous movements
13:25 - with a change x and y
13:28 - by zero subtract dx
13:32 - and zero subtract d y
13:35 - okay so that may seem like it's not
13:37 - going to help us much but just hold on
13:39 - and you'll see what we are up to
13:42 - separate off the old move steps block
13:45 - and its level touching check
13:47 - in its place stuff a nice new try move
13:50 - block
13:52 - and this is where we need that cool
13:53 - maths to translate this move steps block
13:56 - into a try move x and y
13:59 - no problem try move
14:02 - steps multiplied by
14:07 - the sine
14:12 - of direction
14:17 - and for the y-axis we can duplicate that
14:21 - only switch the sign for a cos operator
14:26 - excellent
14:28 - that's the maths so in theory this will
14:30 - end up moving us exactly the same as
14:33 - before we should just test that to be
14:34 - sure
14:35 - and yep that's just the same and
14:37 - therefore we still have the problem of
14:39 - getting snagged on the walls
14:42 - but
14:42 - now we can fix this by first moving the
14:45 - x and then moving the y
14:48 - duplicate the try move block like so
14:51 - then we can remove the second input
14:53 - parameter from the first try move that
14:56 - will now only move in the x direction
14:59 - and then remove the first input from the
15:02 - second try move block
15:04 - that will only try now and move in the y
15:06 - direction
15:08 - stick a zero in the empty inputs if you
15:10 - like now i'm feeling good about this
15:12 - shall we test it out
15:14 - and here we go
15:16 - and yeah can you see how i didn't snag
15:20 - on the wall but instead just slipped
15:22 - across the surface that's perfect great
15:25 - work everyone
15:27 - so we are nearly there the last thing i
15:30 - want to add before calling these
15:31 - movement scripts complete is to include
15:34 - player strafing
15:36 - now what's that
15:37 - it's the common movement in first person
15:39 - games where the player can sidestep
15:42 - very useful for looking around corners
15:44 - it's common convention to use the wasd
15:47 - was keys for strafing and generally
15:50 - walking about the cursor keys are then
15:53 - used for rotations so come back to the
15:55 - green flag game loop script
15:58 - find the if key up arrow pressed
16:01 - and now we need to also support the w
16:04 - key for moving forwards
16:06 - we need an or for that
16:08 - so if key up arrow
16:11 - or key w pressed then we move forwards
16:14 - as before
16:15 - we're going to do the same for the down
16:17 - arrow key with another or
16:19 - add a check for the s key
16:25 - okay now for the side stepping with the
16:28 - a and d keys
16:30 - if a key is pressed then
16:33 - to sidestep to our left we simply turn
16:37 - left by 90 degrees
16:40 - then move by two
16:44 - that moves us now to the left by 90
16:45 - degrees
16:47 - then after that turn back right by 90
16:50 - degrees returns us to facing forwards
16:53 - brilliant
16:54 - to sidestep right check if the d key is
16:56 - pressed
16:58 - turn right by 90 degrees
17:00 - move two
17:02 - and then finally turn left by 90 degrees
17:05 - again
17:06 - sorted and here we go strafe away
17:12 - look at me sliding about that is cool
17:15 - and you just wait this will make the
17:18 - next raycasting part of the tutorial
17:19 - series ever so much more enjoyable to
17:22 - play around with
17:23 - but oh my gosh i'm afraid that this is
17:27 - where the episode must end
17:29 - man the next episode though oh it's
17:31 - going to be simply epic i just can't
17:34 - tell you how cool it's going to be but
17:36 - thank goodness we now have these episode
17:38 - 1 scripts in place as it gives us the
17:40 - solid foundations that we needed to
17:42 - build upon so have fun designing your
17:45 - levels and getting your player movement
17:47 - just right and make sure you keep a copy
17:50 - of this project safe all ready to
17:52 - continue next time
17:53 - so if you enjoyed this episode and
17:55 - cannot wait for part two then smash that
17:57 - like button and make sure you've not
17:59 - forgotten to subscribe to the channel
18:01 - you don't want to miss out on that
18:03 - notification when the next episode
18:04 - becomes public of course if you can't
18:07 - wait then there's also the early access
18:09 - channel membership where members get to
18:11 - see the videos as soon as they are made
18:13 - even before everyone else how cool is
18:16 - that
18:17 - but that's it for me today thank you for
18:20 - watching have a great week ahead and
18:22 - scratch on guys
18:26 - [Music]
18:32 - you

Cleaned transcript:

hello fellow scratchers i'm griff patch and today we are beginning a new mini series perhaps just two episodes on the exciting world of scratch raycasting so raycasting what is all that about well it's about firing a ray from one point in our game outwards across a level until it hits something be that a wall or some other object the simple idea here has many exciting applications from tracing projectiles to creating realtime laser pointers our socalled flashlights oh wow and can even help us to draw 3d firstperson worlds like this one wowzers are you as excited by this as me now every project needs a beginning and before we can go on to raycasting or even 3d rendering we first need a level and a robust script for controlling the player after all we want to be able to move around this maze using a first person control scheme and we need to be able to safely handle collisions and any snagging on walls so let's see how far we can get are you ready let's get scratching we begin with a brand new scratch project and before we do any coding we need to draw our level it wants to represent some kind of arena or maze now as such i think these projects look good in the dark so head over to the stage backdrop and after converting the costume to bitmap fill the entire backdrop black spooky i love it next up make a new sprite and name it level no prizes for what this is going to be used for the level we are drawing is top down i'm going to draw it using simple grey rectangles as raycasters tend to work best with flat walls we start by ensuring we draw a full wall around the entire level don't leave any gaps at the corners otherwise your project will bug out later on now just have fun making corridors and interesting rooms to walk around in while i do this i just want to let you know that for this tutorial none of the scripts or costumes in this episode have to be followed exactly as i do them for episode 2 to work now you can recreate the level and the player in any way you like and the raycasting part should work just fine either way watch the video and you may pick up some useful tips and we can ensure you finish with something that will be very successful okay my level is done as you can see it's fully surrounded by walls this looks good but i bet you will make a better one than mine can't wait to see them in the scratch studio when you are done as always there's a link to the studio under this video now it would be a good idea to ensure the level is kept centered on the stage when the project starts running so in the code tab when green flag clicked simply go to zero zero splendid we can now concentrate on the player who is to be walking around our maze we'll reuse the first sprite since it's here so rename it player i'm afraid to say we won't be keeping these scratch cat costumes so delete them and we'll paint a new costume sorry scratchy maybe next time now i'm going to draw a beautiful lemon yellow triangle to represent the player recenter the view and zoom right in to create a perfect triangle we draw a square holding down the shift key while drawing keeps it square then select and delete one corner using the shaping tool now again while holding the shift we can rotate the shape to point right lastly size it as you want this time holding alt the alt key allows the shape to stay centered but if you are not sure it is centered double check by dragging and snapping the shape to the center of the canvas afterwards finally give the costume the name player now for some code we'll start the player centered on the level when flag clicked use a go to xy of zero zero we want the player to be able to rotate around to face different directions so set rotation style to all around to prove the point why not point in direction 45 degrees if we run that you can see that the player is facing diagonally up to the right great now since my level has a nice empty space in the middle this was a good place to start but if your player is touching a wall right now then just drag them to a new position on the stage and update your go to xy to that new position you really don't want to start in a war last thing we'll do to set things up is to ensure we switch to the player costume now we'll concentrate on player movement oh there are so many ways we could do this i'll lead you through one possible way but you are free to do this any way you want it really won't affect the raycaster later on we need a game loop and this will simply run forever next we'll check if the player is holding down the left arrow key if they are we want to turn the player counterclockwise that is to the left i'm going to turn by just 3 degrees this may feel a little slow and you are free to increase this if you'd like to turn right we do likewise duplicate the first if and change it to check for the right arrow key press then just switch the turn for a turn clockwise that is to the right and again by 3 degrees if you test that now we should find that the left and right arrow keys make the player rotate nicely on the spot but how about some real movement forward and back we need two more if statements i duplicate these first two but we can discard the turning scripts the first if needs to check for an up arrow key press and the second one a down arrow key press so when we press the up arrow we simply move two steps forwards to move back we can do the same but move by minus two steps as a negative move will indeed move us backwards here it's testing time and this is now much more fun we can scoot around the level walking forwards and backwards and turning as we go this is a great start to creating all sorts of games but until we fix the fact that we can walk through walls it's not really much use so we'll begin by adding the most basic collision scripts and then we'll work up from there so basically we just want to stop the player walking forwards or backwards into a wall to stop us having to code the same thing twice for walking forward and backwards we'll make a new custom block to handle this name it move and add a numeric input named steps click to run without screen refresh so this is going to replace these two move blocks in our game loop so drag the move two steps block into the new define move script and where it came from drop in our homemade move block like so we set it as before to move by two steps now looking back at the define move script drag the steps input variable into the move two steps block below to link it all up right now we can use these new custom block to replace the backwards movement too but this time again move by negative two steps at this point our code does exactly the same as it did before but we can now add in the collision detection so check whether we have moved into a wall if touching level then so if we have the simplest way to get back out again is to move back to where we came from so again we move and to get a negative value of steps we use zero subtract steps there i think we can give that a try let's walk into a wall bonk that looks promising right testing from different angles and each time the player stops and everything looks good but don't let that fool you for there be dragons not literally obviously but how many of you already know what might be wrong with this simple approach to collisions shall i show you if i turn so i can walk closer to this wall over here i collide and stop and now that i'm really close what happens when i turn the player oh no this can't be good can you see how i can turn the player to overlap the wall yeah and now i am stuck my player can't move forwards or backwards as they're already colliding with the wall either way i think you'll see this problem time and time again in scratch projects we really don't want the player's rotation to affect the collision detection so to get around this problem we will switch to using a simple square hitbox instead this way no matter how we rotate the collision will not change perfect okay no problem enter the costume editor and make a new costume name it hit box you may find it useful to convert to bitmap before we begin as this helps to draw an accurate hitbox shape now zooming in i'm going to draw a four by four filled square it should perfectly fill one of the shaded grid squares of the canvas then once done drag it until it snaps into the center of the canvas coolio and that's our simple hitbox back to the code and we'll update the define move script simply switch to the hitbox costume before we do anything else also we'll ensure the hitbox never rotates by setting the sprite's rotation mode to don't rotate okay so now this touching level check will be using the hitbox costume for collisions as we wanted but once the checks are done we should switch back to the original player costume so duplicate the top two blocks we just added and pop them in at the end of this custom block we switch the costume back to the player costume and reset the rotation style to all around and that should do it shall we give it a test just as before i can run into the wall at a shallow angle and then rotate until i overlap but this time we find we are not getting stuck as although we are overlapping the real level still we can safely back out and continue moving around the level phew thank goodness for hit boxes right so we are really getting somewhere but let me show you one thing about this classic collision code that really bugs me if while running down a passageway we snag up against a wall we'd not expect to pass through the wall but we would expect to continue down the corridor however that does not happen nope instead we instantly stop dead as a dodo this is because our collision code crudely undoes our last movement pushing us right back to where we came from so how can we handle this better the best solution is to break the directional movement apart into its x and y components and then even if one direction is blocked the movement in the other direction can still be completed and the movement continues but to do this is not so straightforward as currently we use a move two steps to move forwards how can we split that into a change x and a change y luckily we have the maths to do the job and here it is move two steps actually does the same job as are you ready for it change x by 2 multiplied by the sine of direction and change y by 2 multiplied by the cosine of direction yep that's how the move block actually works so we can make use of this but before we do we have some coding to do we'll start by making a new custom block that tries to move the player by a value of x and y let's name it try move and add two numeric inputs dx and dy these indicate just how far to move in the x and y directions now in here we first do the movement bring in a change x and a change y block we then simply use the dx and dy input variables as the amounts to move next we check for collisions if touching level then and of course if we collide as before we simply reverse the previous movements with a change x and y by zero subtract dx and zero subtract d y okay so that may seem like it's not going to help us much but just hold on and you'll see what we are up to separate off the old move steps block and its level touching check in its place stuff a nice new try move block and this is where we need that cool maths to translate this move steps block into a try move x and y no problem try move steps multiplied by the sine of direction and for the yaxis we can duplicate that only switch the sign for a cos operator excellent that's the maths so in theory this will end up moving us exactly the same as before we should just test that to be sure and yep that's just the same and therefore we still have the problem of getting snagged on the walls but now we can fix this by first moving the x and then moving the y duplicate the try move block like so then we can remove the second input parameter from the first try move that will now only move in the x direction and then remove the first input from the second try move block that will only try now and move in the y direction stick a zero in the empty inputs if you like now i'm feeling good about this shall we test it out and here we go and yeah can you see how i didn't snag on the wall but instead just slipped across the surface that's perfect great work everyone so we are nearly there the last thing i want to add before calling these movement scripts complete is to include player strafing now what's that it's the common movement in first person games where the player can sidestep very useful for looking around corners it's common convention to use the wasd was keys for strafing and generally walking about the cursor keys are then used for rotations so come back to the green flag game loop script find the if key up arrow pressed and now we need to also support the w key for moving forwards we need an or for that so if key up arrow or key w pressed then we move forwards as before we're going to do the same for the down arrow key with another or add a check for the s key okay now for the side stepping with the a and d keys if a key is pressed then to sidestep to our left we simply turn left by 90 degrees then move by two that moves us now to the left by 90 degrees then after that turn back right by 90 degrees returns us to facing forwards brilliant to sidestep right check if the d key is pressed turn right by 90 degrees move two and then finally turn left by 90 degrees again sorted and here we go strafe away look at me sliding about that is cool and you just wait this will make the next raycasting part of the tutorial series ever so much more enjoyable to play around with but oh my gosh i'm afraid that this is where the episode must end man the next episode though oh it's going to be simply epic i just can't tell you how cool it's going to be but thank goodness we now have these episode 1 scripts in place as it gives us the solid foundations that we needed to build upon so have fun designing your levels and getting your player movement just right and make sure you keep a copy of this project safe all ready to continue next time so if you enjoyed this episode and cannot wait for part two then smash that like button and make sure you've not forgotten to subscribe to the channel you don't want to miss out on that notification when the next episode becomes public of course if you can't wait then there's also the early access channel membership where members get to see the videos as soon as they are made even before everyone else how cool is that but that's it for me today thank you for watching have a great week ahead and scratch on guys you
