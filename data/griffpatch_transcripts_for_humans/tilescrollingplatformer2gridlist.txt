With timestamps:

00:02 - hello fellow scratchers
00:04 - welcome back to part two of our series
00:07 - creating a tiled scrolling platformer in
00:09 - scratch
00:10 - today we are bringing order to the chaos
00:13 - and by the end of the video
00:15 - we will have a coded a large and
00:16 - well-bounded scrolling level
00:18 - using scratch lists exactly the same
00:21 - technique used in paper minecraft or
00:23 - scratchnapt
00:25 - okay so continuing from where we left
00:27 - off in episode one
00:29 - i wonder if you noticed that the random
00:31 - tiled level
00:32 - is actually repeating over and over in a
00:34 - loop
00:36 - do you see this pattern coming back
00:37 - again and again as i scroll
00:40 - what we need to work on is creating
00:43 - levels that can be much
00:45 - bigger than a single repeating screen
00:47 - but for this
00:48 - we will need to be brave and learn how
00:50 - to store a level
00:52 - in one of scratch's list variables let
00:54 - me try to explain how this works
00:56 - it will be easier to demonstrate using
00:58 - this titchy 4x4 grid
01:01 - here is a key showing the tiles i will
01:03 - use
01:04 - and their costume numbers in scratch
01:06 - i'll use these to fill out our tiny but
01:08 - perfectly formed mini level
01:10 - so the question is how do we take this
01:13 - level
01:14 - and store it in a scratch list like this
01:16 - one
01:17 - well do you remember using number
01:19 - squares in maths
01:21 - we can create a number square right over
01:23 - our level like this
01:25 - the numbers start from 1 at the bottom
01:28 - left and then
01:29 - count upwards in a column and then
01:32 - they keep counting up again from the
01:33 - bottom of the next column
01:35 - until the whole grid is filled numbering
01:38 - each tile of the grid like this
01:40 - allows us to ask the question what is at
01:42 - tile 1
01:43 - the answer of course a tile of costume
01:46 - 10.
01:47 - well ok then let's add that 10 into row
01:50 - 1 of the scratch list
01:51 - there row 1 of our list represents tile
01:54 - one
01:55 - of the level and tells us which costume
01:58 - is being shown there
02:00 - look at our level tiles two and three
02:02 - are also both costume tens
02:04 - so we can fill out row two and three in
02:06 - our list with tens
02:08 - but tile four ah look at the key
02:11 - that is a costume two so we need to add
02:15 - a two into our list excellent
02:18 - that's a whole column sorted now let's
02:20 - quickly fill in the next one
02:22 - we have a costume ten then a beautiful
02:25 - golden costume nine
02:26 - my favorite and then two more costume
02:29 - twos
02:30 - the last two columns follow the same
02:32 - principle
02:33 - and we are done all 16 tiles in our grid
02:36 - have been accounted for
02:37 - in our scratch list well enough talk
02:40 - let's try to do the same thing in code
02:43 - only perhaps
02:44 - we'll make the grid just a tiny little
02:46 - bit bigger
02:47 - we can start by deleting this viewport
02:49 - sprite if it's still there that is
02:52 - create a new sprite and call it generate
02:55 - we don't need to give it a costume now
02:58 - we create a new
02:59 - list named tile grid
03:02 - leaving it for all sprites in this list
03:06 - we will store the entire level make a
03:09 - new custom block called
03:10 - generate level and let it run without
03:13 - screen refresh
03:15 - before we do anything else add a delete
03:18 - all of
03:19 - tile grid now to generate a level we
03:22 - first need to know how big it should be
03:24 - we want to be super flexible so let's
03:27 - create two new variables to store the
03:29 - level dimensions in
03:31 - we'll name them grid width for all
03:33 - sprites
03:34 - and grid height also for all sprites
03:39 - for the time being set grid width to 30
03:42 - and grid height to 20. that should be a
03:45 - good size for testing
03:47 - as it is roughly two screens wide and
03:49 - two screens tall
03:52 - next up let's decide on what our level
03:54 - will look like
03:56 - we'll start simple by creating an empty
03:58 - level with a single border of tiles
04:00 - surrounding it
04:02 - a box level if you will we start with
04:05 - filling
04:06 - in the left hand column that would be
04:08 - this one
04:09 - so make a new block and name it add wall
04:13 - column add a repeat block looping
04:16 - grid height times and we'll be adding
04:19 - tile costume number 10
04:20 - to the tile grid each time
04:24 - now drag the new add wall column block
04:28 - into our generate level script and that
04:31 - should take care of the first column of
04:32 - the level
04:34 - the next column is a little bit more
04:35 - complicated but nothing we can't handle
04:38 - create another custom block and name it
04:40 - add boxed column
04:42 - run without screen refresh
04:45 - now we can begin by duplicating the wall
04:48 - column script
04:49 - but change the costume number to be 2
04:53 - that's the blank costume that will
04:54 - create a full column of empty tiles
04:57 - but not so fast we also need to handle
05:00 - the different
05:00 - first and last tiles in this column no
05:03 - problem though
05:04 - we can add the floor tile in before the
05:06 - loop that would be a costume 10
05:08 - and another one at the end of the loop
05:10 - at the ceiling
05:12 - but because we now have two extra tiles
05:15 - being added to an
05:15 - already full column we need to
05:18 - compensate
05:19 - by subtracting two from the repeat loop
05:22 - to bring everything back into balance
05:24 - good drag the new add boxes column
05:28 - custom block
05:29 - into our generate script
05:32 - but we need lots of these in fact we
05:35 - need them all across the width of the
05:36 - level except the first and last columns
05:39 - so wrap the block in a repeat loop and
05:42 - loop for grid width
05:44 - subtracting two we can complete the box
05:48 - level by adding the final right hand
05:50 - wall column
05:51 - and we are done excellent
05:54 - a simple test to see nothing is a miss
05:57 - but don't run the whole project
05:59 - just click the generate custom block now
06:02 - to run it
06:03 - we can check how many tiles have been
06:04 - added to the tile grid list
06:07 - if all is correct then a full grid of
06:09 - thirty by twenty tiles should total to
06:11 - six hundred rows
06:13 - that is thirty multiplied by twenty six
06:16 - hundred
06:18 - we'll want this generate script to run
06:20 - when the project starts
06:22 - so add with me a when i receive block
06:24 - and we'll define a new event of generate
06:27 - level
06:28 - drag the generate level custom block
06:30 - under that
06:32 - finally switch back to the tiles sprite
06:35 - code
06:36 - and add a broadcast and wait for
06:38 - generate level here
06:39 - under the green flag script
06:43 - so the tile grid list is all there but
06:46 - our tile sprite
06:47 - doesn't yet know how to use it to
06:49 - display our level
06:51 - let's fix that switch over to the tiles
06:54 - sprite
06:56 - each tile clone has a tile x and tile y
06:59 - to let it know its position
07:01 - but it doesn't know which tile in the
07:03 - tile grid list
07:04 - it represents make a new variable named
07:07 - tile index for this sprite only
07:10 - and we'll set it to 1 at the beginning
07:12 - of the setup script
07:17 - now a tile index of 1 means that this
07:19 - tile is representing
07:20 - row 1 in the tile grid list
07:24 - to correctly align our first tile such
07:27 - that its bottom left edge is flush with
07:29 - the world origin of zero zero
07:31 - we start it at tile x y of 16.
07:35 - this is because our tiles are centered
07:37 - positioned and have a half width
07:39 - of 16 pixels
07:42 - after the change tile y block add in a
07:44 - change tile index by 1
07:47 - so that the next tile becomes tile grid
07:49 - row 2
07:50 - and then 3 and so on in this loop
07:53 - then to correctly move to the next
07:55 - column we do a little jiggle of the
07:58 - index by adding a change
08:00 - tile index after the change tile x
08:03 - and change it by grid height subtracted
08:07 - by clone count y
08:10 - this perhaps requires a little more
08:11 - explanation
08:13 - adding grid height to the tile index has
08:15 - the effect
08:16 - of moving right by one column in our
08:19 - grid
08:19 - it's very useful and since we just
08:22 - looped
08:23 - clone count y times adding 1 to the
08:25 - index
08:26 - to go up our column it makes sense that
08:28 - subtracting
08:29 - clone count y from it will bring us back
08:32 - down to the start of the column again
08:34 - this is good our tile indexes are set
08:37 - we just need to move the set tile block
08:39 - from the setup script
08:41 - to just before we switch costume block
08:44 - we'll set it to item tile index
08:48 - of the grid so that is looking up the
08:51 - costume number
08:52 - from the tile grid list using the tile
08:54 - index we just assigned it
08:57 - well now it's been a while but we can
09:00 - finally do a full
09:01 - test just before we do though let's
09:04 - reset the camera by adding a set camera
09:06 - x to 240 that's half a screen
09:09 - and set camera y to 180 to the green
09:12 - flag script
09:13 - great and now let's run the project
09:16 - if all is well then the level will look
09:19 - like
09:19 - this we can see that the random level
09:22 - has been replaced by an
09:23 - empty level except that we have a solid
09:26 - tile border flush with the bottom
09:28 - and left edges of the stage so
09:31 - scroll the level to the right using the
09:33 - camera x slider
09:35 - we immediately hit a wall to the right
09:38 - is that right
09:39 - no because we set our level to be two
09:42 - whole screens why did we not
09:44 - so obviously we are not quite there yet
09:46 - as a result
09:48 - this means that our tile clones are
09:49 - still looping around
09:51 - and repeating as before we're going to
09:54 - introduce a new custom block to make
09:56 - things more readable
09:58 - name it loop tile x
10:01 - and this time we'll also click to add a
10:03 - number input
10:05 - we'll call it tile skip to represent
10:09 - how many tiles it wants to skip and make
10:12 - it run without screen refresh
10:16 - we'll switch the change tilex block here
10:18 - with our new custom block like so
10:22 - now the clone count variable can be used
10:24 - as the input
10:26 - and we'll use the tile skip input
10:28 - variable in its place
10:30 - this should now do exactly the same
10:32 - thing as it did before
10:34 - but we can also reuse it in the else
10:36 - condition below
10:38 - however we'll pass in zero minus clone
10:41 - count
10:41 - to negate the direction of the tile
10:43 - skipping so it'll go to the left
10:47 - let's carefully do the same thing for
10:49 - the vertical looping below
10:51 - make a new custom block named loop tile
10:54 - y
10:54 - with an input variable of tile skip
10:57 - and run without screen refresh replace
11:00 - the change tile y block with our new
11:02 - custom block
11:03 - and switch to clone count y for the
11:05 - custom blocks input variable
11:07 - we'll duplicate the custom block and use
11:10 - it in the else clause 2
11:12 - again modifying it to use zero minus
11:14 - clone count y
11:17 - now this was just a little code
11:19 - rearrange
11:20 - and again it should do nothing more than
11:22 - it did before
11:23 - but it should work so we can confirm
11:26 - that by clicking the green flag and
11:28 - testing things
11:28 - are still scrolling as before so let's
11:31 - fix the vertical
11:32 - that is the up and down looping first
11:36 - in the looptile y custom block that we
11:38 - just added
11:39 - add in a change tile index by tile skip
11:43 - let's run the project again and see that
11:45 - in action the starting screen
11:47 - looks unchanged but as we now scroll up
11:50 - we find the level continues further than
11:53 - before and then we hit a double row of
11:55 - tiles oh that's a bit different
11:57 - the good news is that's exactly what
11:58 - it's expected
12:00 - although we fixed the clone looping
12:02 - issue the tile grid list itself
12:04 - inherently wraps around from top to
12:06 - bottom when we scroll
12:07 - out of the level bounds all we need to
12:10 - do to fix this
12:11 - is to prevent the camera from scrolling
12:13 - up this far and hiding this effect
12:15 - altogether however we will come back to
12:17 - that
12:18 - now for the left and right tile looping
12:22 - this is done in almost the same way
12:24 - duplicate the change
12:26 - tile index block and place it in the
12:28 - loop tile x custom block
12:30 - instead of moving up or down we need to
12:32 - move the tile
12:33 - left or right a column at a time this is
12:36 - achieved
12:37 - by multiplying tile skip by grid height
12:41 - remember that adding grid height to the
12:42 - ear tile index has the effect of
12:44 - skipping to the next column
12:46 - before we give this another test we are
12:48 - going to need to extend
12:49 - the reach of our camera x slider right
12:52 - click the reporter on the stage
12:54 - and increase the slider range up to a
12:56 - maximum of 1 000
12:59 - and now we'll give things another test
13:02 - oh yes looking good we can scroll much
13:06 - further
13:07 - and here's the right hand wall coming
13:08 - into view as expected but oh
13:10 - ah we've hit something really odd
13:13 - looking
13:14 - can you think what we are seeing here
13:18 - well we are now actually seeing beyond
13:21 - the end of our 30 tile wide level
13:23 - there's no data in tile grid list for
13:26 - this area we are viewing
13:28 - as a consequence the change costume
13:30 - script is getting
13:31 - stuck on the big costume and being
13:34 - unable to change it to an unknown tile
13:36 - afterwards
13:37 - so it just lazily stays on the big
13:39 - costume and it looks big and purple and
13:41 - ugly okay so i'm almost ready to
13:44 - congratulate us
13:45 - on an awesome feat of scripting but
13:48 - before i do
13:49 - let's address the two issues that have
13:50 - come up firstly
13:52 - the purple weirdness we are seeing when
13:55 - scrolling too far to the right or left
13:57 - come with me to the bottom of the
13:58 - position tile script where we are
14:01 - setting the tile variable before
14:02 - switching costumes
14:04 - simply add an if condition checking
14:06 - where the tile
14:07 - is less than two anything less than two
14:10 - is
14:10 - definitely wrong so we compensate by
14:13 - setting tile
14:14 - back to two easy when the project
14:17 - confirmed that that worked ah much
14:21 - better
14:21 - the purple was playing havoc with my
14:23 - order loving eyeballs
14:25 - now what about this looping at the top
14:28 - and bottom edge of the level
14:29 - this is a natural result of how we store
14:32 - our level in a list
14:33 - the solution is to simply ensure that
14:34 - our level does not scroll
14:36 - out of bounds we could add the bounding
14:39 - checks to the forever loop here in the
14:40 - tile sprite
14:41 - but it's probably better to think longer
14:44 - term
14:45 - it will be much better to have the real
14:47 - game loop relocated to the mario player
14:49 - sprite
14:50 - bring in a new when i receive block and
14:53 - create a new message of
14:55 - clone level tiles let's separate off
14:59 - what needs to stay in this sprite from
15:01 - the when green flag script
15:04 - we want the set size and the clone
15:06 - counts
15:07 - the position is no longer needed so that
15:09 - can go and delete that
15:11 - and we can call the setup custom block
15:13 - from here
15:15 - bring in a broadcast and wait for the
15:17 - clone level tile script
15:18 - we just created and stick it right under
15:22 - the broadcast to generate level
15:24 - okay so these green flag scripts and
15:27 - everything under them
15:29 - wants to move to the mario sprite
15:32 - we simply drag it across like this
15:34 - dropping it onto the mario sprite
15:37 - now it's worth clicking into the mario
15:39 - sprite just to confirm that the scripts
15:41 - are indeed there
15:43 - yep there they are that's great so let's
15:46 - pop back to the tile sprite
15:47 - and remove the green flag stack from
15:49 - this sprite
15:51 - don't miss this step otherwise we'll be
15:53 - doing these scripts
15:54 - twice and things will go haywire
15:58 - right this is fun we are scripting back
16:00 - in the mario sprite
16:01 - and we can give the project its
16:02 - obligatory test
16:04 - hit the green flag to ensure that the
16:06 - project is still working after the
16:07 - little reshuffle
16:09 - all looks good now we can work on
16:12 - placing bounds on the camera
16:15 - create a new custom block naming it move
16:18 - camera
16:19 - tick run without the screen refresh and
16:22 - now we'll just drag the new block into
16:24 - the forever loop
16:26 - first we'll stop the camera from moving
16:27 - too far to the left
16:29 - if we run the project and scroll the
16:31 - camera x and y to zero
16:33 - you'll see that the bottom left corner
16:34 - of our level is perfectly centered in
16:37 - the viewport
16:38 - from this we can deduce that a camera x
16:40 - of zero
16:41 - causes us to scroll half the screen too
16:44 - far
16:45 - half screen is 240 pixels so we add an
16:48 - if block
16:49 - and check for camera x being less than
16:52 - 240
16:54 - if it is then we set camera x back to
16:56 - 240.
16:58 - run the project and start to scroll it
17:00 - left and right
17:01 - and voila it's perfectly bounded on the
17:03 - left edge
17:04 - as intended very professional indeed
17:08 - the bottom edge is just as
17:09 - straightforward
17:11 - duplicate the left edges if block but
17:14 - swap
17:14 - all the camera x's for camera-wise we
17:18 - also need to change the 240
17:20 - to be 180 since that's half of the
17:22 - screen height
17:24 - give that a quick test and that's
17:26 - looking wonderful too
17:29 - so what about the right hand and top
17:31 - edges
17:33 - duplicate the two ifs and we'll work
17:35 - from there
17:36 - first switch the less than operators or
17:39 - greater than operators
17:41 - to know the furthest horizontal point we
17:43 - can scroll to
17:44 - we first need the width of the entire
17:46 - level in pixels
17:49 - we calculate this using 32 times grid
17:52 - width
17:53 - 32 being the width of a tile and then
17:56 - we need to subtract half a screen's
17:59 - width so that's 240.
18:02 - the same applies to the top edge of the
18:04 - level it's 32
18:05 - times grid height all take away
18:09 - 180
18:12 - and now we can run the project again and
18:14 - this makes me
18:15 - really happy we have a really clean
18:18 - looking scrolling level now indeed
18:22 - so for fun let's spice things up just a
18:25 - little bit
18:26 - click back into the generate sprite with
18:29 - me and in the define
18:30 - box column script drag in an if else
18:33 - block
18:34 - the condition can compare a pick random
18:37 - 1 to 10 with one
18:41 - then duplicate the add block into the
18:43 - else branch and we'll change the first
18:45 - add
18:45 - to use a costume number of nine remember
18:48 - that's my favorite golden block
18:51 - this change provide a nice random
18:54 - scattering of gold
18:55 - tiles to our level give it a go and see
18:58 - stupendous this episode has taken
19:01 - quite a bit of explaining and if you've
19:03 - followed it and got this far then
19:05 - you have done exceedingly well
19:06 - congratulations
19:08 - moving on from here we shall look at how
19:10 - to introduce a player character to the
19:12 - level
19:13 - and how collisions are detected in the
19:15 - world of tile-based games
19:16 - i'm also looking forward to introducing
19:18 - us to how to begin
19:20 - creating a level designer right here in
19:22 - the game if you've enjoyed this video
19:25 - then do smash the like button and leave
19:27 - me a comment
19:28 - subscribe to the channel to avoid
19:29 - missing out on any future episodes
19:32 - thank you so much for watching and
19:33 - scratch on
19:43 - you

Cleaned transcript:

hello fellow scratchers welcome back to part two of our series creating a tiled scrolling platformer in scratch today we are bringing order to the chaos and by the end of the video we will have a coded a large and wellbounded scrolling level using scratch lists exactly the same technique used in paper minecraft or scratchnapt okay so continuing from where we left off in episode one i wonder if you noticed that the random tiled level is actually repeating over and over in a loop do you see this pattern coming back again and again as i scroll what we need to work on is creating levels that can be much bigger than a single repeating screen but for this we will need to be brave and learn how to store a level in one of scratch's list variables let me try to explain how this works it will be easier to demonstrate using this titchy 4x4 grid here is a key showing the tiles i will use and their costume numbers in scratch i'll use these to fill out our tiny but perfectly formed mini level so the question is how do we take this level and store it in a scratch list like this one well do you remember using number squares in maths we can create a number square right over our level like this the numbers start from 1 at the bottom left and then count upwards in a column and then they keep counting up again from the bottom of the next column until the whole grid is filled numbering each tile of the grid like this allows us to ask the question what is at tile 1 the answer of course a tile of costume 10. well ok then let's add that 10 into row 1 of the scratch list there row 1 of our list represents tile one of the level and tells us which costume is being shown there look at our level tiles two and three are also both costume tens so we can fill out row two and three in our list with tens but tile four ah look at the key that is a costume two so we need to add a two into our list excellent that's a whole column sorted now let's quickly fill in the next one we have a costume ten then a beautiful golden costume nine my favorite and then two more costume twos the last two columns follow the same principle and we are done all 16 tiles in our grid have been accounted for in our scratch list well enough talk let's try to do the same thing in code only perhaps we'll make the grid just a tiny little bit bigger we can start by deleting this viewport sprite if it's still there that is create a new sprite and call it generate we don't need to give it a costume now we create a new list named tile grid leaving it for all sprites in this list we will store the entire level make a new custom block called generate level and let it run without screen refresh before we do anything else add a delete all of tile grid now to generate a level we first need to know how big it should be we want to be super flexible so let's create two new variables to store the level dimensions in we'll name them grid width for all sprites and grid height also for all sprites for the time being set grid width to 30 and grid height to 20. that should be a good size for testing as it is roughly two screens wide and two screens tall next up let's decide on what our level will look like we'll start simple by creating an empty level with a single border of tiles surrounding it a box level if you will we start with filling in the left hand column that would be this one so make a new block and name it add wall column add a repeat block looping grid height times and we'll be adding tile costume number 10 to the tile grid each time now drag the new add wall column block into our generate level script and that should take care of the first column of the level the next column is a little bit more complicated but nothing we can't handle create another custom block and name it add boxed column run without screen refresh now we can begin by duplicating the wall column script but change the costume number to be 2 that's the blank costume that will create a full column of empty tiles but not so fast we also need to handle the different first and last tiles in this column no problem though we can add the floor tile in before the loop that would be a costume 10 and another one at the end of the loop at the ceiling but because we now have two extra tiles being added to an already full column we need to compensate by subtracting two from the repeat loop to bring everything back into balance good drag the new add boxes column custom block into our generate script but we need lots of these in fact we need them all across the width of the level except the first and last columns so wrap the block in a repeat loop and loop for grid width subtracting two we can complete the box level by adding the final right hand wall column and we are done excellent a simple test to see nothing is a miss but don't run the whole project just click the generate custom block now to run it we can check how many tiles have been added to the tile grid list if all is correct then a full grid of thirty by twenty tiles should total to six hundred rows that is thirty multiplied by twenty six hundred we'll want this generate script to run when the project starts so add with me a when i receive block and we'll define a new event of generate level drag the generate level custom block under that finally switch back to the tiles sprite code and add a broadcast and wait for generate level here under the green flag script so the tile grid list is all there but our tile sprite doesn't yet know how to use it to display our level let's fix that switch over to the tiles sprite each tile clone has a tile x and tile y to let it know its position but it doesn't know which tile in the tile grid list it represents make a new variable named tile index for this sprite only and we'll set it to 1 at the beginning of the setup script now a tile index of 1 means that this tile is representing row 1 in the tile grid list to correctly align our first tile such that its bottom left edge is flush with the world origin of zero zero we start it at tile x y of 16. this is because our tiles are centered positioned and have a half width of 16 pixels after the change tile y block add in a change tile index by 1 so that the next tile becomes tile grid row 2 and then 3 and so on in this loop then to correctly move to the next column we do a little jiggle of the index by adding a change tile index after the change tile x and change it by grid height subtracted by clone count y this perhaps requires a little more explanation adding grid height to the tile index has the effect of moving right by one column in our grid it's very useful and since we just looped clone count y times adding 1 to the index to go up our column it makes sense that subtracting clone count y from it will bring us back down to the start of the column again this is good our tile indexes are set we just need to move the set tile block from the setup script to just before we switch costume block we'll set it to item tile index of the grid so that is looking up the costume number from the tile grid list using the tile index we just assigned it well now it's been a while but we can finally do a full test just before we do though let's reset the camera by adding a set camera x to 240 that's half a screen and set camera y to 180 to the green flag script great and now let's run the project if all is well then the level will look like this we can see that the random level has been replaced by an empty level except that we have a solid tile border flush with the bottom and left edges of the stage so scroll the level to the right using the camera x slider we immediately hit a wall to the right is that right no because we set our level to be two whole screens why did we not so obviously we are not quite there yet as a result this means that our tile clones are still looping around and repeating as before we're going to introduce a new custom block to make things more readable name it loop tile x and this time we'll also click to add a number input we'll call it tile skip to represent how many tiles it wants to skip and make it run without screen refresh we'll switch the change tilex block here with our new custom block like so now the clone count variable can be used as the input and we'll use the tile skip input variable in its place this should now do exactly the same thing as it did before but we can also reuse it in the else condition below however we'll pass in zero minus clone count to negate the direction of the tile skipping so it'll go to the left let's carefully do the same thing for the vertical looping below make a new custom block named loop tile y with an input variable of tile skip and run without screen refresh replace the change tile y block with our new custom block and switch to clone count y for the custom blocks input variable we'll duplicate the custom block and use it in the else clause 2 again modifying it to use zero minus clone count y now this was just a little code rearrange and again it should do nothing more than it did before but it should work so we can confirm that by clicking the green flag and testing things are still scrolling as before so let's fix the vertical that is the up and down looping first in the looptile y custom block that we just added add in a change tile index by tile skip let's run the project again and see that in action the starting screen looks unchanged but as we now scroll up we find the level continues further than before and then we hit a double row of tiles oh that's a bit different the good news is that's exactly what it's expected although we fixed the clone looping issue the tile grid list itself inherently wraps around from top to bottom when we scroll out of the level bounds all we need to do to fix this is to prevent the camera from scrolling up this far and hiding this effect altogether however we will come back to that now for the left and right tile looping this is done in almost the same way duplicate the change tile index block and place it in the loop tile x custom block instead of moving up or down we need to move the tile left or right a column at a time this is achieved by multiplying tile skip by grid height remember that adding grid height to the ear tile index has the effect of skipping to the next column before we give this another test we are going to need to extend the reach of our camera x slider right click the reporter on the stage and increase the slider range up to a maximum of 1 000 and now we'll give things another test oh yes looking good we can scroll much further and here's the right hand wall coming into view as expected but oh ah we've hit something really odd looking can you think what we are seeing here well we are now actually seeing beyond the end of our 30 tile wide level there's no data in tile grid list for this area we are viewing as a consequence the change costume script is getting stuck on the big costume and being unable to change it to an unknown tile afterwards so it just lazily stays on the big costume and it looks big and purple and ugly okay so i'm almost ready to congratulate us on an awesome feat of scripting but before i do let's address the two issues that have come up firstly the purple weirdness we are seeing when scrolling too far to the right or left come with me to the bottom of the position tile script where we are setting the tile variable before switching costumes simply add an if condition checking where the tile is less than two anything less than two is definitely wrong so we compensate by setting tile back to two easy when the project confirmed that that worked ah much better the purple was playing havoc with my order loving eyeballs now what about this looping at the top and bottom edge of the level this is a natural result of how we store our level in a list the solution is to simply ensure that our level does not scroll out of bounds we could add the bounding checks to the forever loop here in the tile sprite but it's probably better to think longer term it will be much better to have the real game loop relocated to the mario player sprite bring in a new when i receive block and create a new message of clone level tiles let's separate off what needs to stay in this sprite from the when green flag script we want the set size and the clone counts the position is no longer needed so that can go and delete that and we can call the setup custom block from here bring in a broadcast and wait for the clone level tile script we just created and stick it right under the broadcast to generate level okay so these green flag scripts and everything under them wants to move to the mario sprite we simply drag it across like this dropping it onto the mario sprite now it's worth clicking into the mario sprite just to confirm that the scripts are indeed there yep there they are that's great so let's pop back to the tile sprite and remove the green flag stack from this sprite don't miss this step otherwise we'll be doing these scripts twice and things will go haywire right this is fun we are scripting back in the mario sprite and we can give the project its obligatory test hit the green flag to ensure that the project is still working after the little reshuffle all looks good now we can work on placing bounds on the camera create a new custom block naming it move camera tick run without the screen refresh and now we'll just drag the new block into the forever loop first we'll stop the camera from moving too far to the left if we run the project and scroll the camera x and y to zero you'll see that the bottom left corner of our level is perfectly centered in the viewport from this we can deduce that a camera x of zero causes us to scroll half the screen too far half screen is 240 pixels so we add an if block and check for camera x being less than 240 if it is then we set camera x back to 240. run the project and start to scroll it left and right and voila it's perfectly bounded on the left edge as intended very professional indeed the bottom edge is just as straightforward duplicate the left edges if block but swap all the camera x's for camerawise we also need to change the 240 to be 180 since that's half of the screen height give that a quick test and that's looking wonderful too so what about the right hand and top edges duplicate the two ifs and we'll work from there first switch the less than operators or greater than operators to know the furthest horizontal point we can scroll to we first need the width of the entire level in pixels we calculate this using 32 times grid width 32 being the width of a tile and then we need to subtract half a screen's width so that's 240. the same applies to the top edge of the level it's 32 times grid height all take away 180 and now we can run the project again and this makes me really happy we have a really clean looking scrolling level now indeed so for fun let's spice things up just a little bit click back into the generate sprite with me and in the define box column script drag in an if else block the condition can compare a pick random 1 to 10 with one then duplicate the add block into the else branch and we'll change the first add to use a costume number of nine remember that's my favorite golden block this change provide a nice random scattering of gold tiles to our level give it a go and see stupendous this episode has taken quite a bit of explaining and if you've followed it and got this far then you have done exceedingly well congratulations moving on from here we shall look at how to introduce a player character to the level and how collisions are detected in the world of tilebased games i'm also looking forward to introducing us to how to begin creating a level designer right here in the game if you've enjoyed this video then do smash the like button and leave me a comment subscribe to the channel to avoid missing out on any future episodes thank you so much for watching and scratch on you
