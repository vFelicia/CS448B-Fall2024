With timestamps:

00:02 - hello fellow scratchers have you ever
00:05 - seen complex life simulators and
00:07 - wondered how they worked or perhaps ever
00:10 - wanted to create one yourself well
00:11 - hurrah because today i'm going to walk
00:14 - you through how to create this awesome
00:16 - flocking simulator in scratch and in
00:19 - just one single episode how cool is that
00:22 - the life system you see here is called
00:25 - voids man i dare you to count how many
00:28 - times i say boyd's by the end of this
00:29 - video voids first developed by craig
00:32 - reynolds in 1986
00:35 - to simulate the flocking behavior of
00:37 - birds but it has many other potential
00:39 - uses from simulating schools of fish
00:42 - swarming of buzzing bees to waves of
00:44 - aliens and of course zombie hordes
00:48 - i bet you guys can come up with some
00:50 - amazing uses for this in your scratch
00:52 - games if you have an idea then drop it
00:54 - in a comment below the video i would
00:56 - love to hear it before we start coding
00:59 - let me give you a quick overview of how
01:01 - these boys actually work
01:04 - say hello to a boyd hello boyd each and
01:08 - every boy in our simulation follows just
01:10 - three basic rules
01:12 - rule one separation
01:15 - each void will try to keep at a safe
01:17 - distance from any other boyd to avoid
01:19 - collisions
01:20 - rule two
01:22 - cohesion
01:23 - yet each boyd will also want to be part
01:25 - of a flock will try to move towards the
01:27 - center of its local group
01:30 - and lastly alignment each boy wants to
01:33 - fly in the same general direction as the
01:36 - other voids around it
01:38 - and that's it from these three simple
01:40 - rules emerge all sorts of stunning and
01:43 - complex group behaviors
01:45 - so are you ready for this yes then guys
01:49 - let's get scratching
01:52 - great with me a new project i'll name it
01:55 - boyd's simulation
01:58 - and the first sprite can also be named
02:00 - boyt
02:01 - we'll begin by drawing the boyd's
02:03 - costume zoom right in because we want to
02:05 - draw this triangle that's 32 by 10
02:08 - pixels in size
02:09 - i first draw a square while holding
02:11 - shift without an outline and then remove
02:14 - one corner using the shaping tool before
02:17 - rotating it so that it points to the
02:19 - right by holding the shift key
02:21 - now we size it to 32 by 10 pixels before
02:24 - snapping it to the center of the costume
02:27 - canvas
02:28 - making sure it's centered is super
02:30 - important so that our boyd will rotate
02:32 - nicely in our game
02:34 - the next step is to ensure the void can
02:36 - move off screen
02:38 - draw a large square it turns out mine is
02:41 - actually too small here so make yours
02:42 - around 48 by 48 pixels to ensure this
02:46 - works
02:47 - and then snap it to the center
02:49 - finally make it invisible by selecting
02:51 - the transparent fill color
02:54 - excellent we can tidy away these two cat
02:57 - costumes sorry scratchies maybe next
03:00 - time mate
03:01 - right let's do some coding we want a
03:04 - random scattering of cloned void sprites
03:08 - when flag clicked
03:09 - we hide this is one of those clone
03:12 - factories where only the clones are
03:13 - visible and the original sprite is
03:15 - hidden
03:16 - set rotation style to all around
03:20 - to let the boys face in any direction
03:24 - then to create the clones we repeat 10
03:27 - and drop in a create clone of myself
03:29 - this will create 10 hidden clones
03:32 - it will become important later that we
03:34 - can identify which void is which
03:37 - so we'll make a new variable ah squish
03:40 - that default my variable and create a
03:42 - new variable named this void id making
03:46 - sure it's for this sprite only
03:48 - each clone needs its own unique id
03:51 - the first boyd wants an id of one so set
03:54 - this boyd id to one before our repeat
03:56 - loop
03:57 - after the first clone is created we can
04:00 - change this boyd id by one so that the
04:02 - next created clone will get a board id
04:04 - of two and so on
04:07 - perfect when we clone a boyd we want to
04:09 - trigger some actions when i start as a
04:13 - clone we begin with a go to a random
04:16 - position to scatter them all around the
04:18 - screen and then remember to show the
04:21 - clone to make it visible as we hid the
04:23 - original sprite
04:25 - awesome we can now run this project and
04:28 - check out those 10 clones
04:30 - that is working as expected but 10 is
04:33 - boring
04:34 - let's up that to 50 boyds there that's
04:38 - much better
04:39 - shall we get them moving the easy way
04:42 - would certainly be to just use a move
04:44 - block but i'm sorry we can't do this
04:47 - because coding voids is much easier if
04:50 - we use a speed x and speed y vector
04:53 - rather than a direction and speed
04:56 - for this reason we make two new
04:58 - variables speed x and speed y
05:02 - also for this sprite only
05:04 - to send each boy in a random direction
05:07 - set speed x to a random number between
05:10 - minus five negative five and positive
05:13 - five
05:14 - and the speed y we just set exactly the
05:16 - same
05:17 - and now to animate the movement we'll
05:19 - add a forever loop right here this means
05:22 - each boyd will have its own game loop
05:24 - right now so the scripts for moving this
05:26 - boyd can be defined in a new custom
05:28 - block name it move and i'm going to add
05:32 - two inputs old x
05:34 - and old y
05:37 - these are to keep track of the previous
05:38 - position of the void why we need this
05:41 - will be made clear later on click to run
05:43 - without screen refresh
05:45 - we can drop the move block into our
05:48 - forever loop
05:49 - and as i said pass in the current x
05:51 - position
05:52 - and the y position of this point
05:56 - great so let's code up the move script
05:58 - next
06:00 - this may seem silly but rather than
06:01 - using change x and change y i'm going to
06:04 - drop in a go to x y
06:07 - and sum the old x input
06:10 - that's going to be the current x
06:12 - position remember
06:13 - with the boyd's speed x variable
06:16 - then the old y input
06:18 - with the boyd's speed y variable this
06:21 - should have the same effect of moving us
06:24 - in the desired direction
06:26 - so slap that green flag and watch those
06:29 - voids scatter
06:31 - ah so our two problems i can see one the
06:34 - boyds are not facing the direction they
06:37 - are moving in and two the boys are
06:39 - getting stuck at the edge of the screen
06:43 - let's start by getting them to wrap
06:45 - around to the opposite side of the
06:46 - screen if x position is greater than 240
06:52 - that's the right edge of the screen then
06:54 - change x by
06:56 - negative 480 the width of the screen to
06:59 - bring it back to the left side of the
07:01 - screen
07:03 - if x position is less than negative 240
07:06 - the left edge of the screen then change
07:08 - x by 480 to bring it onto the right side
07:12 - of the screen
07:14 - then for the vertical if y position is
07:17 - greater than 180
07:19 - then change y by negative 360.
07:24 - off the top wraps down to the bottom
07:27 - and finally if y position is less than
07:29 - negative
07:30 - 180 then change y by
07:34 - 360. off the bottom wraps back up to the
07:38 - top
07:39 - excellent let's give that a test shall
07:41 - we
07:43 - well gosh that was a complete failure
07:46 - wasn't it and i know what must be up i
07:49 - told you already in fact but now you'll
07:51 - see why the invisible box i drew around
07:54 - my boyd costume is not large enough to
07:57 - allow the sprite to move off screen
07:59 - select the invisible box and using alt
08:02 - drag it to be between 40 and probably 48
08:05 - pixels in size
08:07 - yep there now we are talking so the
08:11 - other problem to solve was to make the
08:13 - boys point in the direction they are
08:14 - travelling that sounds easy but you have
08:17 - to remember the direction is given by a
08:19 - vector the two values speed x and speed
08:22 - y
08:23 - we could use some trigonometry to
08:24 - calculate the angle but i do have a
08:26 - sneakier option
08:28 - make a new sprite naming it
08:31 - center that's the british spelling
08:34 - we want this to always be in the center
08:36 - of the screen so when the green flag
08:39 - clicked go to an x y of 0 0.
08:43 - now scratch has a block that lets us
08:45 - point a sprite towards another named
08:47 - sprite
08:49 - so
08:50 - if we reposition a boyd at an x y of
08:53 - negative speed x and negative speed y
08:56 - then we can tell scratch to point it at
08:58 - the center sprite and this then gives us
09:01 - the direction we were after awesome
09:04 - let's do it go back to the boy's sprite
09:08 - and under the define move block just
09:10 - move the other scripts out the way we
09:12 - first position at negative speed x and
09:14 - speed y so go to x y
09:17 - and subtract in both inputs
09:19 - and subtracting speed x and speed y
09:24 - and finally point towards
09:27 - the center sprite
09:31 - and there you go
09:32 - it works awesomely
09:35 - the downside of this trick is that we
09:37 - had to move the sprite to calculate the
09:39 - direction this would be bad news for us
09:42 - except i anticipated it and kept the old
09:45 - positions safe and sound by passing them
09:48 - into this move block so now you know why
09:51 - i did it this unusual way
09:53 - so do you notice that some boys are
09:56 - traveling much faster than others
09:58 - in a flock simulation temporary changes
10:01 - in speed are just fine but eventually
10:04 - all creatures will return to their
10:06 - species natural flight speed we are
10:09 - going to define lots of fun settings to
10:12 - control these voids like flight speed
10:14 - and they're going to be defined as
10:16 - slider variables so that we can play
10:17 - around with them to our heart's content
10:20 - click into the center sprite
10:22 - and now make the new variable
10:24 - top speed
10:26 - making it for all sprites
10:28 - in retrospect you might like to call it
10:31 - target speed
10:32 - as it's the speed that the boyd wants to
10:34 - travel at not really their actual top
10:36 - speed
10:38 - place it above the when green flag click
10:40 - script as a way of resetting it if we
10:42 - want to
10:43 - set top speed to
10:45 - 2.85
10:48 - click on it afterwards to set the
10:50 - variable
10:51 - now i'm going to switch this variable
10:52 - reporter to a slider with a right click
10:56 - and then again to change its range
10:59 - a minimum of 0.5
11:02 - and a maximum of 5.
11:05 - however we'll also need a second
11:07 - variable
11:09 - resolve for all sprites
11:12 - this will define how quickly the animal
11:14 - transitions to its target speed
11:17 - make this a slider 2
11:20 - with a range of
11:23 - 0.01 that's tiny to
11:26 - 1.0 and we'll set it initially to 0.2
11:32 - and then click that block to set it
11:35 - cool let's make this work
11:37 - back in the void sprite
11:40 - separate off the go to x y block to know
11:43 - if we are traveling too fast or too slow
11:46 - we first need to know what this boyd's
11:49 - actual speed is
11:51 - that's the distance we are traveling by
11:53 - moving by speed x and speed y
11:56 - make a new variable named distance for
11:59 - this sprite only
12:01 - and set it to and this is cool
12:04 - distance 2 center
12:06 - yeah we got this for free too from our
12:09 - trick to point in the right direction
12:12 - make a new variable we'll name it target
12:15 - for this sprite only and we'll use this
12:17 - in our calculations
12:19 - first we'll calculate the speed x
12:21 - so set target to if we divide the
12:25 - current speed x by the distance that is
12:27 - the full speed then that gives us the
12:30 - speed as a unit vector
12:32 - that has a full speed of 1
12:34 - and that means we can then multiply it
12:36 - back up to the top speed to give our
12:38 - desired target x scaled to match our top
12:41 - speed
12:43 - so
12:44 - we just want to gradually accelerate
12:46 - towards this target speed
12:48 - change speed x by
12:50 - and now we multiply resolve this is how
12:53 - long it takes to get to the top speed
12:55 - and we subtract
12:57 - from the target speed
12:59 - the current speed x yeah we change the
13:03 - speed by a fraction of the difference
13:05 - between the current and target speeds
13:07 - haha
13:08 - this has to be repeated for the speed y
13:11 - we can duplicate the set target and the
13:14 - set speed blocks above changing the
13:17 - three speed x's for speed wise
13:20 - and that's all we need to change so
13:23 - reattach the scripts below before
13:25 - smashing that green flag
13:29 - wow yeah all the boyds are now settling
13:32 - into a nice constant pace
13:35 - and you can have fun wiggling these
13:36 - sliders and seeing how a smaller resolve
13:39 - causes the boys to take longer to change
13:41 - speeds
13:42 - nice
13:43 - when you're done playing and you want to
13:44 - reset the sliders just click into the
13:47 - center sprite
13:48 - and tap on the set top speed block
13:51 - voila
13:52 - so thus far it's been every boyd for
13:55 - themselves they don't appear to care
13:57 - much about each other and in fact they
13:58 - have no idea what other boys are flying
14:00 - around them what they need is a way to
14:03 - see each other to achieve this in
14:06 - scratch we are going to have to begin to
14:08 - record our boyd's positions and speed
14:10 - data in scratch lists
14:14 - this way each boyd can then look in the
14:16 - list to find out what its neighboring
14:18 - voids are up to void x for the x
14:21 - positions boyd y for the y positions
14:24 - boyd sx for the speed x's and void sy
14:30 - for the void speed wise
14:32 - for the time being we'll keep the lists
14:33 - visible on the screen until we know they
14:35 - are working
14:37 - before our game kicks off we must
14:38 - remember to delete all the items from
14:41 - these lists delete all from boyd x
14:44 - boyd y
14:46 - void sx and void s y and drop that right
14:51 - at the top of the when green flag
14:53 - clicked hat block
14:54 - next we must add the new items to the
14:56 - list one for each void clone created
15:00 - add to boyd x
15:02 - devoid y to void sx and to void s y
15:07 - and we drop in the current sprites x and
15:09 - y positions
15:13 - and the current speed x variable
15:16 - and current speed y variable like so
15:20 - make sure to drop this whole thing in
15:22 - just before the forever loop after
15:25 - setting speed x and y above it
15:28 - okay so if we run the project you should
15:30 - see 50 items appear in each of the four
15:33 - lists one item for each boyd in our game
15:36 - but you'll note none of these items in
15:38 - the lists are updating as the voids move
15:41 - to be useful we need to keep this data
15:44 - bang up to date
15:46 - come over to our define move script and
15:48 - down at the bottom use a replace item of
15:52 - list block
15:53 - the item number is going to be given by
15:56 - the this void id variable remember that
15:59 - one it gives the id of each boyd one
16:02 - being the first and this correlates
16:03 - perfectly with the item number in each
16:06 - list
16:07 - we are replacing the value in the void x
16:10 - list
16:11 - with the up to date x position of this
16:13 - sprite
16:14 - cool so duplicate that for the boyd y
16:18 - list
16:19 - popping in the y position of the sprite
16:22 - and finally duplicate them both and
16:25 - we'll set the void sx and void s y of
16:29 - course these values are again the speed
16:31 - x and the speed y variables
16:35 - so pummel that green flag and the boyd x
16:38 - and y list items are spinning around to
16:41 - reflect each boy's current position
16:44 - since no boyd is changing direction yet
16:46 - you'll notice that the speed x and y
16:48 - lists don't change and that's fine
16:51 - excellent now that we have easy access
16:54 - to our void data we can do some very
16:57 - exciting things
16:59 - separation is the name of the game as we
17:02 - want to get our boyds to avoid getting
17:04 - too close to each other flying into
17:06 - another bird is never a very good idea
17:09 - after all
17:10 - we'll need some new slide availables to
17:12 - configure this click back into the
17:14 - center sprite and make a variable named
17:17 - range
17:18 - for all sprites this is the maximum
17:21 - distance this boyd can see any boyd
17:24 - outside this circle will not directly
17:26 - affect this boyd's navigational
17:28 - decisions
17:29 - i'll set it initially to
17:31 - pixels
17:33 - then make the available reporter into a
17:35 - slider with a range from 20 to 150
17:39 - maximum
17:42 - a second variable named
17:44 - separation again for all sprites
17:47 - this one is the amount of force this
17:50 - boyd will exert to keep it away from any
17:52 - void within sight
17:54 - set separation to 0.2
17:59 - and a good slider range for this is a
18:01 - minimum of
18:03 - 0.05 and a maximum of 0.5
18:10 - click the scripts to set the initial
18:12 - values
18:13 - and then click back into the void sprite
18:16 - so
18:17 - the scripts that change the sprite's
18:20 - position are all in this define move
18:22 - block but anything that changes the
18:24 - board's direction will be defined in a
18:26 - new custom block which will name
18:29 - calculate
18:31 - make sure to tick the run without screen
18:32 - refresh otherwise this will run awfully
18:35 - slow trust me
18:36 - the new calculate block can be used in
18:39 - each boyd's main game loop just before
18:43 - the move block yeah just like that
18:46 - now back to that new define block
18:49 - every boyd will run this script and will
18:51 - want to compare its position to all the
18:54 - other boyds around it for this reason we
18:57 - need a new variable
18:59 - other id for this sprite only
19:02 - this will keep track of which other boyd
19:04 - we are comparing ourselves to
19:06 - start with it set to 1. before adding a
19:09 - repeat loop
19:11 - we repeat for the number of items in the
19:13 - boydex list
19:15 - we want to look at each one in turn
19:18 - we mustn't forget that this boyd is also
19:20 - one of the boys in this list to skip
19:22 - over our own boy data we make sure that
19:25 - the other id is not equal to this void
19:30 - id
19:31 - cool
19:32 - then before the loop repeats drop in a
19:35 - change at the
19:37 - by one to move on to the next void in
19:40 - the list
19:42 - the first thing we need to know is
19:43 - whether the other boyd is within range
19:46 - of this point that is they can see each
19:49 - other
19:50 - for this we must know the distance
19:51 - between these voids
19:54 - more variables i need more variables
19:56 - distance x for this sprite only and
20:00 - distance y for this sprite only
20:04 - so distance x is the difference
20:06 - between the two boyd's x positions
20:09 - subtract from
20:11 - item of list
20:13 - use the other id for the item number of
20:16 - that other void we want the void x list
20:19 - and we simply subtract from it this
20:22 - boyd's x position
20:24 - we want to do the same for the distance
20:27 - y
20:28 - just use the boyd y list
20:31 - and subtract this boyd's y position
20:33 - instead
20:34 - okay this is good but we need the actual
20:38 - distance not just the x and y distance
20:41 - for this we will have to resort some
20:43 - pythagoras
20:45 - set the distance
20:47 - to the square root
20:50 - of the sum
20:53 - of distance x multiplied by distance x
20:58 - and distance y multiplied by distance y
21:03 - right we got the distance so is this
21:07 - boyd within range or not
21:10 - if distance is less than range
21:13 - remember that that was around 75 pixels
21:16 - away
21:17 - then
21:18 - good
21:20 - what now though we are trying to
21:21 - maneuver this boyd away from the other
21:23 - boy that is getting too close to achieve
21:26 - this we just want to push directly away
21:29 - from them that's just the opposite of
21:32 - the distance x and y variables that we
21:33 - just calculated
21:35 - change speed x by
21:38 - and we'll need to multiply
21:39 - and then a divide so that we can divide
21:42 - the distance x by the full distance that
21:45 - will give us a constant force away from
21:47 - the other void in the x direction
21:50 - drop that into the multiply and we need
21:53 - the same for the speed y so duplicate
21:55 - that changing the speed x to a speed y
21:59 - and the distance x for a distance y
22:03 - but rather than just drop in our
22:05 - separation variable for that is the
22:07 - force we want to push these boys apart
22:09 - with
22:10 - we first need to invert it remember we
22:13 - want the opposite direction away from
22:16 - the other boyd
22:17 - make a new variable yep so many
22:21 - neg res for this sprite only that stands
22:25 - for negative separation
22:28 - ah
22:29 - i named it wrong it should have been neg
22:32 - sep
22:33 - sorry
22:34 - anyhow at the top of the calculate
22:37 - script set to zero subtract
22:43 - yeah separation what a numpty
22:46 - and we can drop in the variable
22:49 - into the left side of those two
22:51 - multiplies to add in the separating
22:54 - forces
22:55 - now this i've got to see it's time to
22:58 - run this project
23:00 - i'm hoping to see these little babies
23:01 - trying to avoid each other and would you
23:04 - look at that they most certainly are how
23:07 - awesome is that
23:09 - if we push up the separation slider then
23:11 - the boy's reaction to each other becomes
23:13 - stronger and they turn away faster
23:15 - what's more turn down the range and now
23:18 - they swerve out of the way last minute
23:20 - you can have a lot of fun just playing
23:22 - with these settings but i digress and we
23:25 - still have work to do these little
23:28 - purple guys are not showing any sign of
23:30 - flocking for they would need a desire to
23:33 - stay together rather than just being
23:35 - repelled
23:36 - the cohesion rule is that we find the
23:39 - center point of all nearby voids and try
23:42 - to move towards it
23:43 - not so hard we just need to add up all
23:46 - the distance x's and distance wise
23:48 - and then divide them by the number of
23:50 - voids to get the average distance
23:54 - then we'll need a new slider to control
23:56 - the applied force
23:58 - so back in the center sprite make a new
24:00 - variable naming it cohesion for all
24:03 - sprites
24:06 - i'll initially set that to 0.03
24:10 - and after making it a slider set its
24:12 - range from 0.0 to 0.1
24:22 - now in the void sprite to get an average
24:25 - of the distances we'll first need a
24:27 - count of how many boyds are close by
24:30 - make a new variable void count for this
24:34 - sprite only
24:36 - and set it to zero just before the
24:38 - repeat loop
24:40 - next up more variables to store these
24:43 - summed relative positions
24:45 - some x for this sprite only and some y
24:49 - also for this sprite only
24:51 - and what do you know also set them both
24:54 - to zero in the same place
25:01 - scroll down
25:03 - this is the point where we know the
25:05 - other boyd is within range so we change
25:08 - boyd count by one
25:11 - then we'll change some x
25:15 - by our distance x variable
25:18 - that is the position of the void in the
25:20 - x direction relative to this one
25:23 - and of course we'll do the same thing
25:24 - with the sum y
25:26 - and the distance y variable
25:29 - great so now we have summed up all the
25:31 - relative positions we need to average
25:34 - them by dividing by the count of voids
25:37 - at the bottom of the script oh you know
25:40 - what duplicate this change speed x and y
25:43 - it follows a similar pattern only not
25:45 - with any of the same variables
25:48 - the divide by is going to be the count
25:51 - of boyds in this case
25:54 - hey right now duplicate these two
25:56 - scripts we'll keep them safe you'll
25:58 - thank me for that later
26:01 - back to business the scaling slider for
26:03 - this effect is the cohesion variable so
26:06 - pop that in and the value that we are
26:09 - averaging is of course
26:11 - some x
26:12 - and our sum y variable too
26:16 - and here we go smashing the green flag
26:19 - oh yes wow this is looking dead exciting
26:24 - i'm just hiding the non-slide of elbows
26:26 - so look how the boys are now trying to
26:29 - bunch together quickly turning around as
26:31 - they reach the edges of the flock and
26:33 - that's really cool
26:34 - if we pull the cohesion right up then
26:38 - pow the boys are all pulled tightly
26:39 - together what's really exciting is how
26:41 - these behaviors are emerging i guess
26:44 - what we have here is much more like a
26:46 - swarm though than a flock like bees
26:49 - buzzing around each other
26:51 - but our desired end game is slightly
26:54 - different each member of a flock should
26:56 - work together to bring order out of
26:58 - chaos and let the flock move around as a
27:00 - whole with uniform purpose
27:04 - the final rule then is called alignment
27:08 - this is where each boyd will attempt to
27:10 - match its direction to the average
27:12 - direction of all the other voids in
27:14 - range
27:15 - this is achieved the same way as the
27:17 - average positions only we use the
27:19 - average speed x and speed y of each void
27:23 - instead
27:24 - so you know what we need then yep back
27:26 - into the center sprite and make a new
27:29 - variable alignment for all sprites
27:34 - and we'll set it initially to
27:36 - 0.02
27:40 - the slide will have a range
27:45 - from 0.0
27:47 - to zero point one
27:50 - now click the script to reset all these
27:52 - defaults and then we can move back into
27:54 - the boyd scripts to pull off this final
27:58 - bit of boyd magic
28:00 - we are going to sum the void speeds
28:03 - so two more variables needed yeah
28:06 - variable overload i know name the first
28:09 - some speed x
28:11 - for this sprite only
28:13 - and some speed y
28:15 - do i need to say this sprite only
28:18 - so set them both to zero before the
28:21 - repeat loop
28:26 - and now just like with the sum x and
28:29 - some y we need to change some speed x
28:32 - and some speed y
28:37 - it might have been quicker to bring in
28:39 - two new change blocks
28:40 - so change some speed x
28:43 - and some speed y
28:45 - by
28:46 - and we need the relative speed compared
28:48 - to the void speed so subtract from the
28:53 - item other id of boyd sx
28:57 - and of boyd s y
29:00 - and we subtract the current void speed x
29:04 - and speed y
29:06 - got it summing the difference in speeds
29:10 - now we can scroll down and use this
29:12 - handy pair of change blocks i prepared
29:14 - earlier popping in the alignment slide
29:17 - available
29:19 - and multiply by the average of the
29:21 - summed speed x
29:23 - and speed wise now that is what i'm
29:26 - talking about you ready for nothing
29:29 - obliterate that green flag
29:32 - and are you seeing anything different is
29:34 - this random swarm mobilizing and moving
29:36 - off in any common direction
29:38 - yes i believe so they definitely are now
29:42 - tending to move in the same direction
29:44 - perhaps if we pull the alignment slider
29:46 - right up oh man yes now they are very
29:50 - uniform indeed really love the natural
29:53 - flow of these voids pushing the
29:55 - alignment low again causes them to lose
29:58 - their purpose and begin to swarm around
29:59 - once more i can only just begin to
30:02 - imagine the different formations
30:03 - possible by playing with these awesome
30:05 - sliders
30:07 - however we do have rather a lot of them
30:09 - taking up far too much space on our
30:11 - screen
30:12 - let's try to hide those sliders when the
30:14 - mouse isn't nearby
30:17 - click into the center sprite
30:19 - and we add a forever loop to the when
30:21 - green flag click script
30:23 - but we'll wait until the mouse is almost
30:25 - touching the left edge of the screen
30:26 - that is until mouse x is less than
30:30 - negative two hundred
30:33 - and then we show variable top speed
30:38 - and show variable resolve
30:40 - and show variable range and show
30:43 - variable separation and show variable
30:45 - alignment and cohesion yeah all of them
30:50 - and then what do we do to hide them
30:51 - again
30:52 - we wait until
30:54 - mousex is greater than
30:57 - negative 50. that's almost the middle of
31:00 - the screen to allow for these long
31:02 - sliders then we hide all the sliders
31:05 - again hide variable top speed
31:09 - resolve
31:10 - range separation alignment and cohesion
31:15 - so many
31:16 - shall we give it a try
31:19 - okay so the variables are hidden that's
31:21 - great so move the mouse over to the left
31:24 - edge of the screen and up they pop but
31:26 - what's cool is that they don't disappear
31:28 - until we move far enough away to the
31:31 - right brilliant that means we are safe
31:33 - to change these sliders without them
31:35 - disappearing
31:37 - guys we are almost at the end of this
31:40 - tutorial but just before i go how about
31:43 - we add a little script to let us
31:44 - interact directly with these beautiful
31:46 - boys with the mouse yeah i like that
31:49 - idea too go back into the boys sprite
31:52 - and find the bottom of the calculate
31:54 - script
31:57 - if
31:59 - the distance from this void
32:02 - to the mouse pointer
32:04 - is less than
32:06 - range
32:08 - then set distance x
32:12 - to the mouse x subtract
32:18 - this boyd's x position
32:23 - the same for the distance y
32:25 - subtract from mouse y
32:27 - this boyd's y position
32:33 - then we just borrow these last two
32:34 - change speed x and y scripts
32:37 - these are for the separation remember my
32:40 - stupid moment naming it negrese instead
32:42 - of negsep
32:44 - it says nusep in my notes too
32:47 - the only thing we need to change is to
32:49 - replace distance with the distance to
32:52 - mouse pointer and on that note run the
32:56 - project one final time
32:59 - and bask in the glory of this clever
33:02 - void simulation
33:04 - no these boys i'm most certainly not
33:06 - keen on flying near my mouse point and
33:08 - now ha i can actually herd them around
33:11 - if i wish and that's so fun
33:14 - are there improvements to be made
33:16 - definitely for example i think my
33:18 - separation calculations should actually
33:21 - have divided by distance squared we push
33:24 - the voids away more gradually based on
33:26 - distance i'll look into that soon and to
33:28 - get more voids running at once we'd need
33:31 - to look into screen partitioning and
33:33 - boyd bucketing
33:35 - however for a quick jump in speed you
33:37 - can try running your projects in turbo
33:39 - warp 2. wow
33:41 - and this really is the end now if you've
33:44 - enjoyed this video then please please
33:46 - smash the like button and consider
33:48 - subscribing to my channel there's a link
33:50 - to the scratch studio in the description
33:52 - under the video so do post a link to
33:54 - your finished projects there i cannot
33:56 - wait to see them
33:57 - and that's it thank you for watching do
34:00 - have a great week ahead and scratch on
34:03 - guys
34:22 - [Music]
35:21 - you

Cleaned transcript:

hello fellow scratchers have you ever seen complex life simulators and wondered how they worked or perhaps ever wanted to create one yourself well hurrah because today i'm going to walk you through how to create this awesome flocking simulator in scratch and in just one single episode how cool is that the life system you see here is called voids man i dare you to count how many times i say boyd's by the end of this video voids first developed by craig reynolds in 1986 to simulate the flocking behavior of birds but it has many other potential uses from simulating schools of fish swarming of buzzing bees to waves of aliens and of course zombie hordes i bet you guys can come up with some amazing uses for this in your scratch games if you have an idea then drop it in a comment below the video i would love to hear it before we start coding let me give you a quick overview of how these boys actually work say hello to a boyd hello boyd each and every boy in our simulation follows just three basic rules rule one separation each void will try to keep at a safe distance from any other boyd to avoid collisions rule two cohesion yet each boyd will also want to be part of a flock will try to move towards the center of its local group and lastly alignment each boy wants to fly in the same general direction as the other voids around it and that's it from these three simple rules emerge all sorts of stunning and complex group behaviors so are you ready for this yes then guys let's get scratching great with me a new project i'll name it boyd's simulation and the first sprite can also be named boyt we'll begin by drawing the boyd's costume zoom right in because we want to draw this triangle that's 32 by 10 pixels in size i first draw a square while holding shift without an outline and then remove one corner using the shaping tool before rotating it so that it points to the right by holding the shift key now we size it to 32 by 10 pixels before snapping it to the center of the costume canvas making sure it's centered is super important so that our boyd will rotate nicely in our game the next step is to ensure the void can move off screen draw a large square it turns out mine is actually too small here so make yours around 48 by 48 pixels to ensure this works and then snap it to the center finally make it invisible by selecting the transparent fill color excellent we can tidy away these two cat costumes sorry scratchies maybe next time mate right let's do some coding we want a random scattering of cloned void sprites when flag clicked we hide this is one of those clone factories where only the clones are visible and the original sprite is hidden set rotation style to all around to let the boys face in any direction then to create the clones we repeat 10 and drop in a create clone of myself this will create 10 hidden clones it will become important later that we can identify which void is which so we'll make a new variable ah squish that default my variable and create a new variable named this void id making sure it's for this sprite only each clone needs its own unique id the first boyd wants an id of one so set this boyd id to one before our repeat loop after the first clone is created we can change this boyd id by one so that the next created clone will get a board id of two and so on perfect when we clone a boyd we want to trigger some actions when i start as a clone we begin with a go to a random position to scatter them all around the screen and then remember to show the clone to make it visible as we hid the original sprite awesome we can now run this project and check out those 10 clones that is working as expected but 10 is boring let's up that to 50 boyds there that's much better shall we get them moving the easy way would certainly be to just use a move block but i'm sorry we can't do this because coding voids is much easier if we use a speed x and speed y vector rather than a direction and speed for this reason we make two new variables speed x and speed y also for this sprite only to send each boy in a random direction set speed x to a random number between minus five negative five and positive five and the speed y we just set exactly the same and now to animate the movement we'll add a forever loop right here this means each boyd will have its own game loop right now so the scripts for moving this boyd can be defined in a new custom block name it move and i'm going to add two inputs old x and old y these are to keep track of the previous position of the void why we need this will be made clear later on click to run without screen refresh we can drop the move block into our forever loop and as i said pass in the current x position and the y position of this point great so let's code up the move script next this may seem silly but rather than using change x and change y i'm going to drop in a go to x y and sum the old x input that's going to be the current x position remember with the boyd's speed x variable then the old y input with the boyd's speed y variable this should have the same effect of moving us in the desired direction so slap that green flag and watch those voids scatter ah so our two problems i can see one the boyds are not facing the direction they are moving in and two the boys are getting stuck at the edge of the screen let's start by getting them to wrap around to the opposite side of the screen if x position is greater than 240 that's the right edge of the screen then change x by negative 480 the width of the screen to bring it back to the left side of the screen if x position is less than negative 240 the left edge of the screen then change x by 480 to bring it onto the right side of the screen then for the vertical if y position is greater than 180 then change y by negative 360. off the top wraps down to the bottom and finally if y position is less than negative 180 then change y by 360. off the bottom wraps back up to the top excellent let's give that a test shall we well gosh that was a complete failure wasn't it and i know what must be up i told you already in fact but now you'll see why the invisible box i drew around my boyd costume is not large enough to allow the sprite to move off screen select the invisible box and using alt drag it to be between 40 and probably 48 pixels in size yep there now we are talking so the other problem to solve was to make the boys point in the direction they are travelling that sounds easy but you have to remember the direction is given by a vector the two values speed x and speed y we could use some trigonometry to calculate the angle but i do have a sneakier option make a new sprite naming it center that's the british spelling we want this to always be in the center of the screen so when the green flag clicked go to an x y of 0 0. now scratch has a block that lets us point a sprite towards another named sprite so if we reposition a boyd at an x y of negative speed x and negative speed y then we can tell scratch to point it at the center sprite and this then gives us the direction we were after awesome let's do it go back to the boy's sprite and under the define move block just move the other scripts out the way we first position at negative speed x and speed y so go to x y and subtract in both inputs and subtracting speed x and speed y and finally point towards the center sprite and there you go it works awesomely the downside of this trick is that we had to move the sprite to calculate the direction this would be bad news for us except i anticipated it and kept the old positions safe and sound by passing them into this move block so now you know why i did it this unusual way so do you notice that some boys are traveling much faster than others in a flock simulation temporary changes in speed are just fine but eventually all creatures will return to their species natural flight speed we are going to define lots of fun settings to control these voids like flight speed and they're going to be defined as slider variables so that we can play around with them to our heart's content click into the center sprite and now make the new variable top speed making it for all sprites in retrospect you might like to call it target speed as it's the speed that the boyd wants to travel at not really their actual top speed place it above the when green flag click script as a way of resetting it if we want to set top speed to 2.85 click on it afterwards to set the variable now i'm going to switch this variable reporter to a slider with a right click and then again to change its range a minimum of 0.5 and a maximum of 5. however we'll also need a second variable resolve for all sprites this will define how quickly the animal transitions to its target speed make this a slider 2 with a range of 0.01 that's tiny to 1.0 and we'll set it initially to 0.2 and then click that block to set it cool let's make this work back in the void sprite separate off the go to x y block to know if we are traveling too fast or too slow we first need to know what this boyd's actual speed is that's the distance we are traveling by moving by speed x and speed y make a new variable named distance for this sprite only and set it to and this is cool distance 2 center yeah we got this for free too from our trick to point in the right direction make a new variable we'll name it target for this sprite only and we'll use this in our calculations first we'll calculate the speed x so set target to if we divide the current speed x by the distance that is the full speed then that gives us the speed as a unit vector that has a full speed of 1 and that means we can then multiply it back up to the top speed to give our desired target x scaled to match our top speed so we just want to gradually accelerate towards this target speed change speed x by and now we multiply resolve this is how long it takes to get to the top speed and we subtract from the target speed the current speed x yeah we change the speed by a fraction of the difference between the current and target speeds haha this has to be repeated for the speed y we can duplicate the set target and the set speed blocks above changing the three speed x's for speed wise and that's all we need to change so reattach the scripts below before smashing that green flag wow yeah all the boyds are now settling into a nice constant pace and you can have fun wiggling these sliders and seeing how a smaller resolve causes the boys to take longer to change speeds nice when you're done playing and you want to reset the sliders just click into the center sprite and tap on the set top speed block voila so thus far it's been every boyd for themselves they don't appear to care much about each other and in fact they have no idea what other boys are flying around them what they need is a way to see each other to achieve this in scratch we are going to have to begin to record our boyd's positions and speed data in scratch lists this way each boyd can then look in the list to find out what its neighboring voids are up to void x for the x positions boyd y for the y positions boyd sx for the speed x's and void sy for the void speed wise for the time being we'll keep the lists visible on the screen until we know they are working before our game kicks off we must remember to delete all the items from these lists delete all from boyd x boyd y void sx and void s y and drop that right at the top of the when green flag clicked hat block next we must add the new items to the list one for each void clone created add to boyd x devoid y to void sx and to void s y and we drop in the current sprites x and y positions and the current speed x variable and current speed y variable like so make sure to drop this whole thing in just before the forever loop after setting speed x and y above it okay so if we run the project you should see 50 items appear in each of the four lists one item for each boyd in our game but you'll note none of these items in the lists are updating as the voids move to be useful we need to keep this data bang up to date come over to our define move script and down at the bottom use a replace item of list block the item number is going to be given by the this void id variable remember that one it gives the id of each boyd one being the first and this correlates perfectly with the item number in each list we are replacing the value in the void x list with the up to date x position of this sprite cool so duplicate that for the boyd y list popping in the y position of the sprite and finally duplicate them both and we'll set the void sx and void s y of course these values are again the speed x and the speed y variables so pummel that green flag and the boyd x and y list items are spinning around to reflect each boy's current position since no boyd is changing direction yet you'll notice that the speed x and y lists don't change and that's fine excellent now that we have easy access to our void data we can do some very exciting things separation is the name of the game as we want to get our boyds to avoid getting too close to each other flying into another bird is never a very good idea after all we'll need some new slide availables to configure this click back into the center sprite and make a variable named range for all sprites this is the maximum distance this boyd can see any boyd outside this circle will not directly affect this boyd's navigational decisions i'll set it initially to pixels then make the available reporter into a slider with a range from 20 to 150 maximum a second variable named separation again for all sprites this one is the amount of force this boyd will exert to keep it away from any void within sight set separation to 0.2 and a good slider range for this is a minimum of 0.05 and a maximum of 0.5 click the scripts to set the initial values and then click back into the void sprite so the scripts that change the sprite's position are all in this define move block but anything that changes the board's direction will be defined in a new custom block which will name calculate make sure to tick the run without screen refresh otherwise this will run awfully slow trust me the new calculate block can be used in each boyd's main game loop just before the move block yeah just like that now back to that new define block every boyd will run this script and will want to compare its position to all the other boyds around it for this reason we need a new variable other id for this sprite only this will keep track of which other boyd we are comparing ourselves to start with it set to 1. before adding a repeat loop we repeat for the number of items in the boydex list we want to look at each one in turn we mustn't forget that this boyd is also one of the boys in this list to skip over our own boy data we make sure that the other id is not equal to this void id cool then before the loop repeats drop in a change at the by one to move on to the next void in the list the first thing we need to know is whether the other boyd is within range of this point that is they can see each other for this we must know the distance between these voids more variables i need more variables distance x for this sprite only and distance y for this sprite only so distance x is the difference between the two boyd's x positions subtract from item of list use the other id for the item number of that other void we want the void x list and we simply subtract from it this boyd's x position we want to do the same for the distance y just use the boyd y list and subtract this boyd's y position instead okay this is good but we need the actual distance not just the x and y distance for this we will have to resort some pythagoras set the distance to the square root of the sum of distance x multiplied by distance x and distance y multiplied by distance y right we got the distance so is this boyd within range or not if distance is less than range remember that that was around 75 pixels away then good what now though we are trying to maneuver this boyd away from the other boy that is getting too close to achieve this we just want to push directly away from them that's just the opposite of the distance x and y variables that we just calculated change speed x by and we'll need to multiply and then a divide so that we can divide the distance x by the full distance that will give us a constant force away from the other void in the x direction drop that into the multiply and we need the same for the speed y so duplicate that changing the speed x to a speed y and the distance x for a distance y but rather than just drop in our separation variable for that is the force we want to push these boys apart with we first need to invert it remember we want the opposite direction away from the other boyd make a new variable yep so many neg res for this sprite only that stands for negative separation ah i named it wrong it should have been neg sep sorry anyhow at the top of the calculate script set to zero subtract yeah separation what a numpty and we can drop in the variable into the left side of those two multiplies to add in the separating forces now this i've got to see it's time to run this project i'm hoping to see these little babies trying to avoid each other and would you look at that they most certainly are how awesome is that if we push up the separation slider then the boy's reaction to each other becomes stronger and they turn away faster what's more turn down the range and now they swerve out of the way last minute you can have a lot of fun just playing with these settings but i digress and we still have work to do these little purple guys are not showing any sign of flocking for they would need a desire to stay together rather than just being repelled the cohesion rule is that we find the center point of all nearby voids and try to move towards it not so hard we just need to add up all the distance x's and distance wise and then divide them by the number of voids to get the average distance then we'll need a new slider to control the applied force so back in the center sprite make a new variable naming it cohesion for all sprites i'll initially set that to 0.03 and after making it a slider set its range from 0.0 to 0.1 now in the void sprite to get an average of the distances we'll first need a count of how many boyds are close by make a new variable void count for this sprite only and set it to zero just before the repeat loop next up more variables to store these summed relative positions some x for this sprite only and some y also for this sprite only and what do you know also set them both to zero in the same place scroll down this is the point where we know the other boyd is within range so we change boyd count by one then we'll change some x by our distance x variable that is the position of the void in the x direction relative to this one and of course we'll do the same thing with the sum y and the distance y variable great so now we have summed up all the relative positions we need to average them by dividing by the count of voids at the bottom of the script oh you know what duplicate this change speed x and y it follows a similar pattern only not with any of the same variables the divide by is going to be the count of boyds in this case hey right now duplicate these two scripts we'll keep them safe you'll thank me for that later back to business the scaling slider for this effect is the cohesion variable so pop that in and the value that we are averaging is of course some x and our sum y variable too and here we go smashing the green flag oh yes wow this is looking dead exciting i'm just hiding the nonslide of elbows so look how the boys are now trying to bunch together quickly turning around as they reach the edges of the flock and that's really cool if we pull the cohesion right up then pow the boys are all pulled tightly together what's really exciting is how these behaviors are emerging i guess what we have here is much more like a swarm though than a flock like bees buzzing around each other but our desired end game is slightly different each member of a flock should work together to bring order out of chaos and let the flock move around as a whole with uniform purpose the final rule then is called alignment this is where each boyd will attempt to match its direction to the average direction of all the other voids in range this is achieved the same way as the average positions only we use the average speed x and speed y of each void instead so you know what we need then yep back into the center sprite and make a new variable alignment for all sprites and we'll set it initially to 0.02 the slide will have a range from 0.0 to zero point one now click the script to reset all these defaults and then we can move back into the boyd scripts to pull off this final bit of boyd magic we are going to sum the void speeds so two more variables needed yeah variable overload i know name the first some speed x for this sprite only and some speed y do i need to say this sprite only so set them both to zero before the repeat loop and now just like with the sum x and some y we need to change some speed x and some speed y it might have been quicker to bring in two new change blocks so change some speed x and some speed y by and we need the relative speed compared to the void speed so subtract from the item other id of boyd sx and of boyd s y and we subtract the current void speed x and speed y got it summing the difference in speeds now we can scroll down and use this handy pair of change blocks i prepared earlier popping in the alignment slide available and multiply by the average of the summed speed x and speed wise now that is what i'm talking about you ready for nothing obliterate that green flag and are you seeing anything different is this random swarm mobilizing and moving off in any common direction yes i believe so they definitely are now tending to move in the same direction perhaps if we pull the alignment slider right up oh man yes now they are very uniform indeed really love the natural flow of these voids pushing the alignment low again causes them to lose their purpose and begin to swarm around once more i can only just begin to imagine the different formations possible by playing with these awesome sliders however we do have rather a lot of them taking up far too much space on our screen let's try to hide those sliders when the mouse isn't nearby click into the center sprite and we add a forever loop to the when green flag click script but we'll wait until the mouse is almost touching the left edge of the screen that is until mouse x is less than negative two hundred and then we show variable top speed and show variable resolve and show variable range and show variable separation and show variable alignment and cohesion yeah all of them and then what do we do to hide them again we wait until mousex is greater than negative 50. that's almost the middle of the screen to allow for these long sliders then we hide all the sliders again hide variable top speed resolve range separation alignment and cohesion so many shall we give it a try okay so the variables are hidden that's great so move the mouse over to the left edge of the screen and up they pop but what's cool is that they don't disappear until we move far enough away to the right brilliant that means we are safe to change these sliders without them disappearing guys we are almost at the end of this tutorial but just before i go how about we add a little script to let us interact directly with these beautiful boys with the mouse yeah i like that idea too go back into the boys sprite and find the bottom of the calculate script if the distance from this void to the mouse pointer is less than range then set distance x to the mouse x subtract this boyd's x position the same for the distance y subtract from mouse y this boyd's y position then we just borrow these last two change speed x and y scripts these are for the separation remember my stupid moment naming it negrese instead of negsep it says nusep in my notes too the only thing we need to change is to replace distance with the distance to mouse pointer and on that note run the project one final time and bask in the glory of this clever void simulation no these boys i'm most certainly not keen on flying near my mouse point and now ha i can actually herd them around if i wish and that's so fun are there improvements to be made definitely for example i think my separation calculations should actually have divided by distance squared we push the voids away more gradually based on distance i'll look into that soon and to get more voids running at once we'd need to look into screen partitioning and boyd bucketing however for a quick jump in speed you can try running your projects in turbo warp 2. wow and this really is the end now if you've enjoyed this video then please please smash the like button and consider subscribing to my channel there's a link to the scratch studio in the description under the video so do post a link to your finished projects there i cannot wait to see them and that's it thank you for watching do have a great week ahead and scratch on guys you
