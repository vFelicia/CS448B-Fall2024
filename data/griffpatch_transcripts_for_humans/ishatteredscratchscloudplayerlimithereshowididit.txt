With timestamps:

00:00 - foreign
00:03 - scratchers if you didn't know I have
00:05 - been working hard on a new Minecraft MMO
00:08 - scratch game something I've been wanting
00:10 - to try to go for a really long time but
00:12 - technically it's been quite a challenge
00:14 - in this video I'm going to take you on a
00:17 - deep dive into the tricks I discovered
00:19 - that helped me to make this multiplayer
00:21 - Masterpiece possible in scratch now MMO
00:25 - stands for massive multiplayer online
00:27 - and as such you may see as many as 60
00:30 - scratches in game simultaneously Yes you
00:33 - heard me right 60 players all mining
00:36 - crafting chatting and swapping items in
00:39 - the same game world now I simply love
00:41 - walking around and seeing what my fellow
00:43 - scratches have been building from Deep
00:46 - mines to Pumpkin houses nice one be
00:48 - legal102
00:50 - so as with all online scratch games this
00:54 - project is built using the humble Cloud
00:56 - variable they work like normal variables
00:58 - except their values are shared across
01:01 - the internet to all the other players of
01:03 - your scratch project very cool but with
01:06 - serious limitations they can only store
01:09 - numbers not text
01:11 - and after setting a cloud variable you
01:14 - must wait a tenth of a second before
01:16 - setting another one to avoid facing
01:18 - stability issues and you can only have
01:21 - 10 of them per project but before we
01:24 - talk any more about Cloud variables what
01:26 - about the scrolling platformer engine
01:28 - does this look familiar to you it's
01:31 - actually adapted directly from episode 4
01:34 - or 5 of my titled RPG tutorial yes so
01:38 - this is a 500 by 100 tiled grid list
01:41 - where the tile set costumes were sourced
01:44 - directly from the Minecraft sample
01:46 - resources on GitHub and it works just
01:49 - great the tiles of stamped and so it
01:51 - uses minimal clones and I've used very
01:54 - basic platformer scripts like those in
01:56 - my early tiled Mario tutorials and
01:59 - really enough said about that I was just
02:01 - pleased I could adapt the code so
02:03 - quickly and save all that rethinking
02:06 - so next up I need the multiplayer code
02:08 - again I was able to reuse some of my
02:11 - existing scripts to get the Head Start
02:13 - specifically for my MMO platformer game
02:16 - but we should take a step back and let's
02:19 - first take a look at the precursor to
02:21 - this my first successful cloud game
02:23 - Cloud platformer multiplayer fun all my
02:26 - cloud games up until very recently
02:28 - worked just like this one we have eight
02:30 - Cloud variables for the players and we
02:33 - allocate them out one per player
02:35 - then each player's scratch project is
02:37 - responsible for taking the player's
02:39 - username their position on the screen
02:41 - and the costume number and encoding all
02:43 - of that into a single Cloud variable
02:46 - friendly value or data packet if you
02:49 - will they then set their allotted Cloud
02:51 - variable to this value as do all the
02:54 - other players and in this way all the
02:56 - connected scratch projects know who is
02:58 - playing and where they should be on the
03:00 - screen and it works really well but it
03:02 - does have an obvious limitation we can't
03:05 - support more than 8 to 10 players at a
03:08 - time then along comes my new
03:11 - experimental MMO platformer project and
03:14 - this one blows the 10 player limit right
03:17 - out of the water and far up the beach
03:20 - see for yourself as I'm joined by over
03:22 - 130 of my fellow scratches all in game
03:26 - at the same time what magic is this well
03:29 - it's actually pretty straightforward let
03:32 - me explain
03:34 - as before each player's scratch project
03:36 - constructs a data value from their
03:39 - username and Sprite positions Etc but
03:41 - this time they just pick any of the
03:43 - cloud variables at random and set it to
03:46 - their data value
03:48 - now all 140 players of the game will see
03:52 - that cloud variable change value and
03:55 - this is where it gets funky each project
03:58 - maintains two lists the first contains
04:01 - the names of players who've joined the
04:03 - game by decoding the start of the
04:06 - incoming Cloud variable we can identify
04:08 - who sent it this one's username is guy
04:11 - if they've already joined then we find
04:13 - them in the name list and use the second
04:16 - list to store the actual cloud value
04:18 - alongside their name both at the same
04:20 - item number this is called a key value
04:23 - pair
04:24 - the other case is that the cloud
04:26 - available is for a player we have yet to
04:28 - see before a new player in this case we
04:31 - simply add them to the player names list
04:33 - and insert the cloud value too and that
04:37 - is it awesome by using lists to store
04:39 - the cloud data we are no longer
04:41 - restricted to a maximum of 10 players
04:43 - and the players sharing the same Cloud
04:46 - variable do not have to worry about
04:47 - overriding each other as the list keeps
04:49 - each player's code safely stored away so
04:53 - cool
04:54 - it's then just a matter of cloning a
04:56 - Sprite for each new player and decoding
04:58 - their position for display
05:01 - so since this Cloud engine worked so
05:04 - well I dropped it into my modified RPG
05:07 - engine and yay it's perfect for running
05:10 - and jumping around with all my friends
05:11 - but that's really only half the story
05:14 - not only do we need to synchronize our
05:17 - player movements via the cloud but also
05:19 - the state of the entire game World 2 and
05:23 - this is a huge problem a huge problem
05:27 - indeed because a level consists of 50
05:31 - 000 tiles back when Cloud variables
05:34 - didn't have a limit on their size we
05:36 - could in fact squeeze an entire level
05:37 - into one variable think scratch Aria but
05:41 - sadly as of 2023 we can only squeeze in
05:45 - 256 digits at a time scratch Aria r i p
05:50 - the next idea would be to split the
05:52 - level code up into chunks and send them
05:55 - one at a time across the cloud
05:57 - well with the limits on cloud updates
05:59 - that would take a full two minutes
06:02 - that's a long time to wait for a game to
06:04 - load and who is going to be sending this
06:07 - anyway we need this to somehow
06:09 - self-coordinate between all the players
06:12 - of the game
06:13 - so to cut down on the amount of data
06:16 - that needs to be sent I decided to begin
06:18 - the game with a predefined world akin to
06:21 - the Demo World on Minecraft that would
06:24 - allow all projects to load up instantly
06:26 - in a common Land good
06:29 - then as players mine and place blocks
06:31 - all we need to worry about is keeping a
06:34 - list of these changes and sending these
06:36 - details to everyone else
06:38 - obviously the list of changes will
06:41 - gradually grow quite large and so we
06:43 - can't send them all at once so instead
06:47 - we keep a record of the last sent block
06:49 - and cycle around the list
06:51 - sending just four or five updates along
06:55 - with our normal username and position
06:56 - data
06:58 - in this way every player will eventually
07:00 - see every block that we've modified
07:04 - Splendid we have a workable solution but
07:07 - as with all good ideas there's always
07:09 - issues to be teased out for example when
07:12 - another player changes a block that we
07:14 - previously changed ourselves we have to
07:16 - be careful we don't accidentally
07:18 - overwrite it again with our recorded
07:20 - change so remove the record of our
07:23 - change as soon as another user
07:25 - overwrites it it's useful to keep a
07:28 - record of who changed each tile and when
07:30 - to best resolve these conflicts you can
07:33 - see this working in game by holding
07:35 - space
07:37 - so that's who stole my precious cake
07:41 - another issue that causes a lot of
07:43 - trouble is when a player leaves the gate
07:46 - all existing players would continue
07:48 - seeing Bob's glorious house exactly as
07:50 - Bob left it
07:52 - but a new player joining the game will
07:55 - not see Bob's house at all why is this
07:58 - well because Bob is no longer around to
08:01 - send his tile edits to the new players
08:04 - and they are seeing the level as if Bob
08:07 - never existed and this is a serious
08:10 - problem because the levels are out of
08:12 - sync between players and it's never
08:14 - gonna sort itself out
08:16 - we must have consistency between our
08:18 - players or this game will fall apart
08:22 - the easiest solution is after Bob leaves
08:25 - to reset all his changes for everyone
08:29 - and since I'm already keeping a record
08:31 - of who modified which game tiles this
08:34 - shouldn't be hard goodbye bobville and
08:37 - sorry to that poor scratcher exploring
08:39 - Bob's mind
08:41 - [Music]
08:42 - sad but the plus side to this strategy
08:46 - is at a level which would slowly have
08:48 - descended into chaos that's entropy in
08:50 - action my friends now continually
08:52 - self-repairs as players leave if all is
08:55 - well we strike a nice balance and
08:58 - everybody can have a lot of fun
09:00 - obviously there's tons more I could talk
09:02 - about the inventory hot bar crafting
09:05 - smelting player costumes armor but
09:07 - what's interesting is where this project
09:09 - is heading I began it as a mere
09:12 - experiment to see whether it was even
09:13 - possible to make an online multiplayer
09:15 - Minecraft Style game and the answer is a
09:18 - very positive yes but there are things I
09:20 - have not yet added and with good reason
09:23 - let me go over those uh Falling Sand and
09:26 - Gravel blocks these are particularly
09:28 - tricky since once a block moves I have
09:30 - to decide where it ends up and who is
09:33 - the owner the consistency across
09:35 - computers far harder than it sounds
09:38 - water and lava for the same reason as
09:41 - sand and gravel any tile with movement
09:42 - brings me lots of pain maybe one day
09:45 - I'll look into it and figure something
09:46 - out
09:47 - then there's day night and Illumination
09:50 - in general calculating this is quite
09:53 - expensive even in a single player game
09:55 - if I was to extend this out for 60
09:57 - players all editing the map it's going
09:59 - to be too slow trust me perhaps there's
10:02 - some clever trick I could use but I
10:04 - haven't thought of it yet
10:06 - our chests now then these would be cool
10:08 - but it's another layer of complexity but
10:11 - where do we store the chess data and how
10:14 - do we make sure it's synchronized over
10:16 - the cloud one to ponder
10:18 - PVP this has come up so many times
10:20 - seriously this is a peaceful game the
10:23 - biggest problem is that the game lag
10:25 - means that everybody is a half second or
10:28 - so behind each other and movement wise
10:30 - and when you think you might have hit
10:31 - someone but you didn't and vice versa
10:34 - nobody wins and no one ends up happy
10:38 - then there's mobs oh man usually for
10:41 - these I end up having one player's
10:43 - computer take control of the mobs
10:45 - nearest to them but sending enough data
10:47 - to make that work will be super hard
10:49 - given the current cloud restrictions I
10:52 - would really love to add some pigs and
10:53 - chickens I have pondered on providing
10:56 - say masks that let you take on a roll of
10:59 - a different mob so players can play as
11:01 - people or other mobs like Piggies or
11:04 - chickens I don't know what do you think
11:06 - could be really entertaining if you
11:08 - agree then why not drop me a comment and
11:10 - lastly safe zones and teaming it's
11:13 - obvious that there are a number of
11:15 - people who find it more fun to destroy
11:17 - people's hard work than build themselves
11:19 - and I really don't approve so I wonder
11:22 - if there's something clever I could do
11:23 - to help prevent it and still support
11:25 - collaborative building hmm tricky so let
11:29 - the discussion begin I value your ideas
11:32 - and thoughts do drop me a comment well I
11:36 - hope you enjoyed that little technical
11:37 - overview and update if you did then
11:40 - please say thanks by Smashing the like
11:42 - button under the video I'm having a lot
11:44 - of fun coding this game and I'd love
11:46 - your feedback so do drop me a comment or
11:48 - two if you haven't yet subscribed to my
11:50 - channel then you can do that now and
11:52 - don't forget to toggle that little bell
11:53 - icon so as not to miss being notified
11:55 - that my next video has dropped so I'll
11:58 - see you again soon but until then take
12:01 - care and have a great week ahead and
12:04 - scratch on guys
12:06 - [Music]

Cleaned transcript:

foreign scratchers if you didn't know I have been working hard on a new Minecraft MMO scratch game something I've been wanting to try to go for a really long time but technically it's been quite a challenge in this video I'm going to take you on a deep dive into the tricks I discovered that helped me to make this multiplayer Masterpiece possible in scratch now MMO stands for massive multiplayer online and as such you may see as many as 60 scratches in game simultaneously Yes you heard me right 60 players all mining crafting chatting and swapping items in the same game world now I simply love walking around and seeing what my fellow scratches have been building from Deep mines to Pumpkin houses nice one be legal102 so as with all online scratch games this project is built using the humble Cloud variable they work like normal variables except their values are shared across the internet to all the other players of your scratch project very cool but with serious limitations they can only store numbers not text and after setting a cloud variable you must wait a tenth of a second before setting another one to avoid facing stability issues and you can only have 10 of them per project but before we talk any more about Cloud variables what about the scrolling platformer engine does this look familiar to you it's actually adapted directly from episode 4 or 5 of my titled RPG tutorial yes so this is a 500 by 100 tiled grid list where the tile set costumes were sourced directly from the Minecraft sample resources on GitHub and it works just great the tiles of stamped and so it uses minimal clones and I've used very basic platformer scripts like those in my early tiled Mario tutorials and really enough said about that I was just pleased I could adapt the code so quickly and save all that rethinking so next up I need the multiplayer code again I was able to reuse some of my existing scripts to get the Head Start specifically for my MMO platformer game but we should take a step back and let's first take a look at the precursor to this my first successful cloud game Cloud platformer multiplayer fun all my cloud games up until very recently worked just like this one we have eight Cloud variables for the players and we allocate them out one per player then each player's scratch project is responsible for taking the player's username their position on the screen and the costume number and encoding all of that into a single Cloud variable friendly value or data packet if you will they then set their allotted Cloud variable to this value as do all the other players and in this way all the connected scratch projects know who is playing and where they should be on the screen and it works really well but it does have an obvious limitation we can't support more than 8 to 10 players at a time then along comes my new experimental MMO platformer project and this one blows the 10 player limit right out of the water and far up the beach see for yourself as I'm joined by over 130 of my fellow scratches all in game at the same time what magic is this well it's actually pretty straightforward let me explain as before each player's scratch project constructs a data value from their username and Sprite positions Etc but this time they just pick any of the cloud variables at random and set it to their data value now all 140 players of the game will see that cloud variable change value and this is where it gets funky each project maintains two lists the first contains the names of players who've joined the game by decoding the start of the incoming Cloud variable we can identify who sent it this one's username is guy if they've already joined then we find them in the name list and use the second list to store the actual cloud value alongside their name both at the same item number this is called a key value pair the other case is that the cloud available is for a player we have yet to see before a new player in this case we simply add them to the player names list and insert the cloud value too and that is it awesome by using lists to store the cloud data we are no longer restricted to a maximum of 10 players and the players sharing the same Cloud variable do not have to worry about overriding each other as the list keeps each player's code safely stored away so cool it's then just a matter of cloning a Sprite for each new player and decoding their position for display so since this Cloud engine worked so well I dropped it into my modified RPG engine and yay it's perfect for running and jumping around with all my friends but that's really only half the story not only do we need to synchronize our player movements via the cloud but also the state of the entire game World 2 and this is a huge problem a huge problem indeed because a level consists of 50 000 tiles back when Cloud variables didn't have a limit on their size we could in fact squeeze an entire level into one variable think scratch Aria but sadly as of 2023 we can only squeeze in 256 digits at a time scratch Aria r i p the next idea would be to split the level code up into chunks and send them one at a time across the cloud well with the limits on cloud updates that would take a full two minutes that's a long time to wait for a game to load and who is going to be sending this anyway we need this to somehow selfcoordinate between all the players of the game so to cut down on the amount of data that needs to be sent I decided to begin the game with a predefined world akin to the Demo World on Minecraft that would allow all projects to load up instantly in a common Land good then as players mine and place blocks all we need to worry about is keeping a list of these changes and sending these details to everyone else obviously the list of changes will gradually grow quite large and so we can't send them all at once so instead we keep a record of the last sent block and cycle around the list sending just four or five updates along with our normal username and position data in this way every player will eventually see every block that we've modified Splendid we have a workable solution but as with all good ideas there's always issues to be teased out for example when another player changes a block that we previously changed ourselves we have to be careful we don't accidentally overwrite it again with our recorded change so remove the record of our change as soon as another user overwrites it it's useful to keep a record of who changed each tile and when to best resolve these conflicts you can see this working in game by holding space so that's who stole my precious cake another issue that causes a lot of trouble is when a player leaves the gate all existing players would continue seeing Bob's glorious house exactly as Bob left it but a new player joining the game will not see Bob's house at all why is this well because Bob is no longer around to send his tile edits to the new players and they are seeing the level as if Bob never existed and this is a serious problem because the levels are out of sync between players and it's never gonna sort itself out we must have consistency between our players or this game will fall apart the easiest solution is after Bob leaves to reset all his changes for everyone and since I'm already keeping a record of who modified which game tiles this shouldn't be hard goodbye bobville and sorry to that poor scratcher exploring Bob's mind sad but the plus side to this strategy is at a level which would slowly have descended into chaos that's entropy in action my friends now continually selfrepairs as players leave if all is well we strike a nice balance and everybody can have a lot of fun obviously there's tons more I could talk about the inventory hot bar crafting smelting player costumes armor but what's interesting is where this project is heading I began it as a mere experiment to see whether it was even possible to make an online multiplayer Minecraft Style game and the answer is a very positive yes but there are things I have not yet added and with good reason let me go over those uh Falling Sand and Gravel blocks these are particularly tricky since once a block moves I have to decide where it ends up and who is the owner the consistency across computers far harder than it sounds water and lava for the same reason as sand and gravel any tile with movement brings me lots of pain maybe one day I'll look into it and figure something out then there's day night and Illumination in general calculating this is quite expensive even in a single player game if I was to extend this out for 60 players all editing the map it's going to be too slow trust me perhaps there's some clever trick I could use but I haven't thought of it yet our chests now then these would be cool but it's another layer of complexity but where do we store the chess data and how do we make sure it's synchronized over the cloud one to ponder PVP this has come up so many times seriously this is a peaceful game the biggest problem is that the game lag means that everybody is a half second or so behind each other and movement wise and when you think you might have hit someone but you didn't and vice versa nobody wins and no one ends up happy then there's mobs oh man usually for these I end up having one player's computer take control of the mobs nearest to them but sending enough data to make that work will be super hard given the current cloud restrictions I would really love to add some pigs and chickens I have pondered on providing say masks that let you take on a roll of a different mob so players can play as people or other mobs like Piggies or chickens I don't know what do you think could be really entertaining if you agree then why not drop me a comment and lastly safe zones and teaming it's obvious that there are a number of people who find it more fun to destroy people's hard work than build themselves and I really don't approve so I wonder if there's something clever I could do to help prevent it and still support collaborative building hmm tricky so let the discussion begin I value your ideas and thoughts do drop me a comment well I hope you enjoyed that little technical overview and update if you did then please say thanks by Smashing the like button under the video I'm having a lot of fun coding this game and I'd love your feedback so do drop me a comment or two if you haven't yet subscribed to my channel then you can do that now and don't forget to toggle that little bell icon so as not to miss being notified that my next video has dropped so I'll see you again soon but until then take care and have a great week ahead and scratch on guys
