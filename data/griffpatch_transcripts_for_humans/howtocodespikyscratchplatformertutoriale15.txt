With timestamps:

00:00 - [Music]
00:01 - hello fellow scratchers I'm Griff patch
00:04 - and as promised I'm back with another
00:06 - fun episode of classic platformer and
00:09 - this time we are introducing a brand new
00:12 - enemy class of the spiky red flying ball
00:15 - kind wow how cool is that yeah you don't
00:19 - want to be touching this guy right and
00:21 - stay tuned cuz later on in this episode
00:23 - we'll be adding a more complex movement
00:25 - mechanic designed to keep your players
00:27 - on their toes guys load up your projects
00:30 - from where we left off in the last
00:32 - episode and let's get
00:35 - scratching so my idea is to introduce a
00:38 - new flying enemy class and I think a
00:40 - good place for them to spawn is right
00:43 - here on the second scene so stop the
00:46 - projects right there and click into the
00:48 - enemy Sprite we are going to need a new
00:51 - costume for this and I'm thinking to
00:53 - make this guy like a really spiky ball
00:56 - almost like a red conquer with all those
00:58 - prickly spines all over them
01:00 - I find it easiest to create spikes
01:02 - around an object if you draw the
01:04 - opposite spikes first and then group
01:06 - them this then allows you to rotate them
01:09 - together around the middle of your enemy
01:11 - and ends up with a much more even
01:15 - result great I love that let's name this
01:18 - costume spike ball The Fearsome well
01:21 - maybe just spike ball so now that we
01:23 - have the costume drawn we need to
01:26 - officially add them to our level that's
01:28 - under the when I receive change scene
01:31 - script right duplicate an existing if
01:33 - check we want to only spawn the spiky
01:36 - enemy on scene scene two that's it if
01:39 - scene equals two then
01:42 - spawn and we can copy in the current
01:45 - Sprites X and Y position from the stage
01:48 - as for direction okay so this enemy
01:50 - wants to move up and down that's a
01:53 - direction of zero just remember that we
01:56 - can come back here and enter any
01:58 - direction that we want and that should
01:59 - allow the enemy to move in all sorts of
02:01 - directions now the name of this enemy
02:03 - can be Spike
02:05 - one and aha the first time we've had the
02:08 - opportunity to set the enemy type here
02:11 - on the left not being red Chomper enemy
02:14 - this time but a spike
02:16 - ball but hold that thought come down to
02:20 - our defined spawn scripts below what
02:23 - you'll notice is that the enemy type we
02:25 - pass in into our custom block here this
02:27 - input is never used in the script really
02:31 - yeah it's true because well this is the
02:33 - first time we've added a different type
02:35 - of enemy we are going to need a way to
02:38 - keep track of this input from now on
02:41 - make a new variable named type and make
02:45 - sure it's for this Sprite
02:48 - only and then we can set the type
02:51 - variable right away at the top here to
02:54 - the pin type input variable great now we
02:58 - have a record of what type type of enemy
03:00 - we are creating so what happens next
03:04 - well the new enemy clone is created with
03:06 - the type varable set scroll up to find
03:08 - the when I start as clone script here it
03:11 - is and as things stand this script is
03:14 - only relevant to our red patrolling
03:16 - enemy Chomper right now there's no point
03:18 - in trying to reuse the same scripts
03:20 - because the motion is going to be very
03:22 - different for our spikeball so instead
03:25 - let's make sure these scripts here only
03:27 - run for the enemy type name red if type
03:32 - equals red then yes we want to run these
03:36 - scripts but rather than Nest all these
03:38 - scripts inside one big if I prefer
03:41 - instead to use a guard condition where
03:45 - we say when this is not a red enemy we
03:49 - don't run this script stop the scripts
03:51 - here and Pop That in at the top it's up
03:55 - to you which way you prefer to do this
03:56 - perhaps the first was cleaner I don't
03:59 - know I just have this thing about
04:00 - avoiding nesting blocks within each
04:02 - other wherever possible so that's good
04:05 - we should Now find that the red enemies
04:07 - spawn as before but also that the spiky
04:10 - enemy is excluded as it has never been
04:12 - made visible on the
04:15 - screen what we can do now though is
04:17 - duplicate this when I start as clone
04:20 - script that's right we can have more
04:23 - than one run at once but this time we'll
04:26 - only allow a type of spike ball to ex
04:29 - excute this script to show this working
04:32 - switch costume to spike ball and then
04:35 - slap that green flag it's testing time
04:38 - red and red and spike ball woohoo
04:42 - sitting rather Riley on top of my Apple
04:44 - H we need them to start moving up and
04:47 - down whatever and since we are already
04:51 - pointing in the up direction we just
04:52 - move three steps
04:55 - forward worthy of another quick
04:57 - test and okay we are in business my plan
05:01 - though is to have them collide with the
05:03 - ceiling and then return back down once
05:05 - more but hold it right there not wanting
05:09 - to recode something we've done before if
05:12 - you can find our Define move left and
05:14 - right script you'll see that we have a
05:17 - very comprehensive list of Sprites to
05:19 - check the collisions with and yes we
05:22 - need to check them all again for the
05:24 - spiky enemy the answer is to refer back
05:28 - to our player Sprite and find our clever
05:30 - check touching solid script this worked
05:34 - wonders for the player and will work
05:36 - just as well for our enemies so drag it
05:39 - into the enemy
05:40 - Sprite but as you can see the enemy is
05:43 - checking for collisions with many more
05:46 - Sprites than our player does so tell you
05:49 - what let's shake this up a bit we'll
05:52 - keep the set touching block but rather
05:54 - than using the All logic I'm going to
05:56 - use addition adding together the results
06:00 - of touching level with the result of
06:02 - touching the edge of the screen the
06:04 - interesting result of touching both at
06:06 - the same time is that this will result
06:08 - in a value of two which is really rather
06:11 - neat then because the script is getting
06:14 - rather wide I'm going to break this into
06:16 - two lines using a change touching
06:20 - careful now make sure the first one was
06:22 - a set block followed by a change block
06:25 - and we change by touching safe zones add
06:29 - touching
06:30 - platforms Coolio that's all four
06:34 - possibilities let's see that in action
06:36 - when the enemy is touching the level we
06:39 - get a touching value of one and when
06:41 - they are not colliding a touching value
06:44 - of zero even more fun when they are
06:46 - touching the edge and the level we get a
06:48 - touching value of two pretty funky right
06:52 - and that means we can now really
06:54 - simplify the enemy touching scripts back
06:56 - up here we just need to ensure we check
06:59 - touching
07:00 - solid and then we want to know when we
07:04 - are not colliding with anything solid so
07:06 - that's simple it's just touching equals
07:14 - zero that's so much cleaner but don't
07:18 - assume we got it right test test test do
07:21 - red enemies still collide with the walls
07:22 - and turn around yes they do great job so
07:28 - now we can return to our spiky dude they
07:31 - must now check for solid collisions too
07:34 - that's in our second when I start as
07:35 - clone script make sure it's for the
07:38 - spike ball okay let me just move that
07:40 - out into some free space of its own
07:43 - after we move forward by three that's
07:45 - here we again check touching
07:50 - solid if touching is greater than zero
07:59 - then we have indeed collided so what do
08:01 - we do we do a 180 and turn fully around
08:05 - to point in the opposite direction also
08:08 - let's have the player wait before
08:10 - continuing on uh for just 0.2 of a
08:14 - second whoops I didn't mean to click the
08:17 - script then but actually that's pretty
08:19 - cool because it means we can see this
08:21 - script in action as they collide with
08:23 - the level pause and then set off back
08:25 - down again that's really neat personally
08:28 - though I feel that they are getting a
08:30 - little bit too close to the wall I want
08:32 - them to always leave a little Gap now we
08:36 - could already achieve this effect by
08:38 - using our safe Zone Sprite do you
08:40 - remember how we can draw out an area
08:42 - where our enemies can't enter this is
08:44 - great for adding special patrol zones
08:46 - for enemies see and it works a treat at
08:49 - least once you have them starting out of
08:51 - a zone that is but it is a bit annoying
08:54 - having to rely on all these safe zones
08:57 - when I want this to be the default
08:59 - behavior for this enemy so scrap that
09:02 - safe Zone and we'll do it another way
09:05 - all we need to do is have the enemy
09:07 - check for collisions just a number of
09:09 - steps ahead of where they are now that
09:13 - is we secretly move them not by three
09:15 - steps but three plus an extra say 16
09:20 - steps but then as soon as we've checked
09:22 - the collisions we quickly move them back
09:24 - again by minus 16 steps that will leave
09:27 - us exactly where we expected to be in
09:28 - the first place just three steps forward
09:30 - does that make sense I hope so because
09:33 - that's all there is to it hit the green
09:35 - flag and let's see this in
09:39 - action up and down up down and we have a
09:43 - very clean 16 pixel Gap every time nice
09:47 - one and it's great fun dodging this new
09:50 - threat however I did expect this enemy
09:52 - to be a bit more deadly than this so we
09:56 - haven't yet added back in the collisions
09:58 - with the player but careful here because
10:01 - it's not as simple as just dropping them
10:03 - in this forever loop after all how would
10:05 - we check the collisions in this weight
10:07 - statement or a Glide if we were using
10:09 - them we need to look for a collision at
10:11 - the same time as running this script in
10:14 - which case we just need another when I
10:17 - start as clone script again running when
10:20 - the type is Spike Ball but this time
10:24 - forever checking for collisions with the
10:26 - player
10:27 - Sprite except we fell into this bug
10:30 - before if you remember with our
10:31 - collisions with the old red enemy over
10:34 - here we need to also check for
10:36 - invulnerable varable to stop the death
10:38 - sound looping over and over as we
10:45 - die only then do we go ahead and
10:48 - broadcast lose
10:52 - life see this in action we must re-enter
10:55 - the scene so let me start this all over
10:57 - again
11:00 - and now a quick
11:02 - Dodge but yes we do now die from
11:06 - touching the spiky ball huzzah and
11:09 - hooray well that would be a fine time to
11:12 - stop the lesson but guys I don't want to
11:16 - shall we cram in one more enemy movement
11:18 - pattern before we end I'm thinking of
11:21 - placing a homing enemy right here at the
11:23 - top scene that is an enemy that follows
11:26 - the
11:27 - player let's start them up
11:30 - here a new spawn block is needed for
11:32 - scene
11:35 - 103 the enemy type can be spike ball
11:38 - space homing still a spike ball only a
11:42 - homing one give it a unique ID and fill
11:45 - out its starting X and Y
11:48 - position great so where are when I start
11:52 - as clone for spike
11:54 - ball we'll want a new script for the new
11:58 - homing spike ball Ball but before we
12:01 - action that come down to the checks for
12:03 - when the player touches the spike ball
12:04 - we just added because this type equals
12:06 - spike ball will not work when we're
12:09 - using a spike ball homing but we can
12:12 - make it work just swap the equals check
12:14 - for a green contains
12:17 - block now if the type varable contains
12:20 - the word Spike then it matches any spiky
12:24 - enemy at all cool you know what this is
12:27 - overly complicated let's remove the knot
12:30 - and just have the forever Loop inside
12:33 - the If instead yes it's more nested but
12:35 - it's perhaps easier to read in this
12:38 - case right back up and let's make that
12:41 - homing script duplicate the spike ball
12:43 - script and check for a type of spike
12:46 - ball
12:47 - homing we can discard all the movement
12:50 - scripts inside this rever Loop and start
12:53 - by waiting for one
12:55 - second then point towards the player
13:02 - and we'll begin our movement repeat 45
13:05 - times and we're going to dash forward so
13:07 - move forward by four no maybe five steps
13:10 - at a time that will be
13:13 - fast go go go right here we are and oh
13:17 - man okay let's try that again up we go
13:22 - and this time no no okay I changed my
13:25 - mind move by four steps after all five
13:28 - was to too quick let's try that
13:33 - again well guys that brings us to the
13:37 - end of today's episode it was fun
13:40 - bringing more diversity to this classic
13:42 - platformer do smash that like button if
13:44 - you enjoyed this episode 2 and hey why
13:47 - don't you drop me a comment under this
13:48 - video with your ideas for enemies you'd
13:51 - like to introduce now in the coming
13:53 - episodes I'm switching it up and looking
13:55 - to introduce some more advanced player
13:58 - moves to like their sliding and the
14:00 - highly requested double jumping mechanic
14:03 - so do make sure to subscribe to the
14:05 - channel and check the Bell icon to
14:07 - ensure you don't miss the next exciting
14:09 - episode but until then do have a great
14:12 - week ahead and scratch on guys
14:16 - [Music]

Cleaned transcript:

hello fellow scratchers I'm Griff patch and as promised I'm back with another fun episode of classic platformer and this time we are introducing a brand new enemy class of the spiky red flying ball kind wow how cool is that yeah you don't want to be touching this guy right and stay tuned cuz later on in this episode we'll be adding a more complex movement mechanic designed to keep your players on their toes guys load up your projects from where we left off in the last episode and let's get scratching so my idea is to introduce a new flying enemy class and I think a good place for them to spawn is right here on the second scene so stop the projects right there and click into the enemy Sprite we are going to need a new costume for this and I'm thinking to make this guy like a really spiky ball almost like a red conquer with all those prickly spines all over them I find it easiest to create spikes around an object if you draw the opposite spikes first and then group them this then allows you to rotate them together around the middle of your enemy and ends up with a much more even result great I love that let's name this costume spike ball The Fearsome well maybe just spike ball so now that we have the costume drawn we need to officially add them to our level that's under the when I receive change scene script right duplicate an existing if check we want to only spawn the spiky enemy on scene scene two that's it if scene equals two then spawn and we can copy in the current Sprites X and Y position from the stage as for direction okay so this enemy wants to move up and down that's a direction of zero just remember that we can come back here and enter any direction that we want and that should allow the enemy to move in all sorts of directions now the name of this enemy can be Spike one and aha the first time we've had the opportunity to set the enemy type here on the left not being red Chomper enemy this time but a spike ball but hold that thought come down to our defined spawn scripts below what you'll notice is that the enemy type we pass in into our custom block here this input is never used in the script really yeah it's true because well this is the first time we've added a different type of enemy we are going to need a way to keep track of this input from now on make a new variable named type and make sure it's for this Sprite only and then we can set the type variable right away at the top here to the pin type input variable great now we have a record of what type type of enemy we are creating so what happens next well the new enemy clone is created with the type varable set scroll up to find the when I start as clone script here it is and as things stand this script is only relevant to our red patrolling enemy Chomper right now there's no point in trying to reuse the same scripts because the motion is going to be very different for our spikeball so instead let's make sure these scripts here only run for the enemy type name red if type equals red then yes we want to run these scripts but rather than Nest all these scripts inside one big if I prefer instead to use a guard condition where we say when this is not a red enemy we don't run this script stop the scripts here and Pop That in at the top it's up to you which way you prefer to do this perhaps the first was cleaner I don't know I just have this thing about avoiding nesting blocks within each other wherever possible so that's good we should Now find that the red enemies spawn as before but also that the spiky enemy is excluded as it has never been made visible on the screen what we can do now though is duplicate this when I start as clone script that's right we can have more than one run at once but this time we'll only allow a type of spike ball to ex excute this script to show this working switch costume to spike ball and then slap that green flag it's testing time red and red and spike ball woohoo sitting rather Riley on top of my Apple H we need them to start moving up and down whatever and since we are already pointing in the up direction we just move three steps forward worthy of another quick test and okay we are in business my plan though is to have them collide with the ceiling and then return back down once more but hold it right there not wanting to recode something we've done before if you can find our Define move left and right script you'll see that we have a very comprehensive list of Sprites to check the collisions with and yes we need to check them all again for the spiky enemy the answer is to refer back to our player Sprite and find our clever check touching solid script this worked wonders for the player and will work just as well for our enemies so drag it into the enemy Sprite but as you can see the enemy is checking for collisions with many more Sprites than our player does so tell you what let's shake this up a bit we'll keep the set touching block but rather than using the All logic I'm going to use addition adding together the results of touching level with the result of touching the edge of the screen the interesting result of touching both at the same time is that this will result in a value of two which is really rather neat then because the script is getting rather wide I'm going to break this into two lines using a change touching careful now make sure the first one was a set block followed by a change block and we change by touching safe zones add touching platforms Coolio that's all four possibilities let's see that in action when the enemy is touching the level we get a touching value of one and when they are not colliding a touching value of zero even more fun when they are touching the edge and the level we get a touching value of two pretty funky right and that means we can now really simplify the enemy touching scripts back up here we just need to ensure we check touching solid and then we want to know when we are not colliding with anything solid so that's simple it's just touching equals zero that's so much cleaner but don't assume we got it right test test test do red enemies still collide with the walls and turn around yes they do great job so now we can return to our spiky dude they must now check for solid collisions too that's in our second when I start as clone script make sure it's for the spike ball okay let me just move that out into some free space of its own after we move forward by three that's here we again check touching solid if touching is greater than zero then we have indeed collided so what do we do we do a 180 and turn fully around to point in the opposite direction also let's have the player wait before continuing on uh for just 0.2 of a second whoops I didn't mean to click the script then but actually that's pretty cool because it means we can see this script in action as they collide with the level pause and then set off back down again that's really neat personally though I feel that they are getting a little bit too close to the wall I want them to always leave a little Gap now we could already achieve this effect by using our safe Zone Sprite do you remember how we can draw out an area where our enemies can't enter this is great for adding special patrol zones for enemies see and it works a treat at least once you have them starting out of a zone that is but it is a bit annoying having to rely on all these safe zones when I want this to be the default behavior for this enemy so scrap that safe Zone and we'll do it another way all we need to do is have the enemy check for collisions just a number of steps ahead of where they are now that is we secretly move them not by three steps but three plus an extra say 16 steps but then as soon as we've checked the collisions we quickly move them back again by minus 16 steps that will leave us exactly where we expected to be in the first place just three steps forward does that make sense I hope so because that's all there is to it hit the green flag and let's see this in action up and down up down and we have a very clean 16 pixel Gap every time nice one and it's great fun dodging this new threat however I did expect this enemy to be a bit more deadly than this so we haven't yet added back in the collisions with the player but careful here because it's not as simple as just dropping them in this forever loop after all how would we check the collisions in this weight statement or a Glide if we were using them we need to look for a collision at the same time as running this script in which case we just need another when I start as clone script again running when the type is Spike Ball but this time forever checking for collisions with the player Sprite except we fell into this bug before if you remember with our collisions with the old red enemy over here we need to also check for invulnerable varable to stop the death sound looping over and over as we die only then do we go ahead and broadcast lose life see this in action we must reenter the scene so let me start this all over again and now a quick Dodge but yes we do now die from touching the spiky ball huzzah and hooray well that would be a fine time to stop the lesson but guys I don't want to shall we cram in one more enemy movement pattern before we end I'm thinking of placing a homing enemy right here at the top scene that is an enemy that follows the player let's start them up here a new spawn block is needed for scene 103 the enemy type can be spike ball space homing still a spike ball only a homing one give it a unique ID and fill out its starting X and Y position great so where are when I start as clone for spike ball we'll want a new script for the new homing spike ball Ball but before we action that come down to the checks for when the player touches the spike ball we just added because this type equals spike ball will not work when we're using a spike ball homing but we can make it work just swap the equals check for a green contains block now if the type varable contains the word Spike then it matches any spiky enemy at all cool you know what this is overly complicated let's remove the knot and just have the forever Loop inside the If instead yes it's more nested but it's perhaps easier to read in this case right back up and let's make that homing script duplicate the spike ball script and check for a type of spike ball homing we can discard all the movement scripts inside this rever Loop and start by waiting for one second then point towards the player and we'll begin our movement repeat 45 times and we're going to dash forward so move forward by four no maybe five steps at a time that will be fast go go go right here we are and oh man okay let's try that again up we go and this time no no okay I changed my mind move by four steps after all five was to too quick let's try that again well guys that brings us to the end of today's episode it was fun bringing more diversity to this classic platformer do smash that like button if you enjoyed this episode 2 and hey why don't you drop me a comment under this video with your ideas for enemies you'd like to introduce now in the coming episodes I'm switching it up and looking to introduce some more advanced player moves to like their sliding and the highly requested double jumping mechanic so do make sure to subscribe to the channel and check the Bell icon to ensure you don't miss the next exciting episode but until then do have a great week ahead and scratch on guys
