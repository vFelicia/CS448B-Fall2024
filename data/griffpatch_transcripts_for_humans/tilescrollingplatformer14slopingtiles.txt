With timestamps:

00:00 - [Music]
00:02 - hello
00:03 - fellow scratchers i'm griff patch and
00:05 - this is part 14 of our tiled scrolling
00:07 - platformer series
00:09 - and finally we are expanding our engine
00:11 - to support sloping
00:12 - tiles and yes slopes are so cool
00:15 - allowing our level design to break away
00:17 - from the enforced rigid blocky structure
00:19 - and our levels can become a lot more
00:21 - exciting
00:23 - but there is a catch calculating
00:25 - collisions in a tile-based world
00:27 - requires us to work with a bit more
00:29 - math than we are used to doing ah
00:32 - but fear not my friends there's no way i
00:35 - will let that stop us
00:37 - but just in case it does get a bit much
00:40 - just be assured that you will be fine to
00:42 - skip this episode if you don't need
00:43 - slopes in your game
00:45 - in which case just sit back watch the
00:47 - video and enjoy
00:49 - so you will have seen the new tile
00:51 - costumes i was just showing off
00:53 - as always i've popped them into the tile
00:55 - scrolling tutorial asset project on my
00:57 - grip batch tutor account
00:59 - there's a link under this video and if
01:01 - you need those new costumes
01:02 - then open up the project now here they
01:05 - are
01:06 - in the tile sprite from costume 50
01:10 - onwards
01:12 - to make life simple just backpack the
01:14 - entire tile sprite
01:18 - okay back to your projects and open up
01:20 - the tile scrolling platformer scripts
01:23 - drag the tile sprite from the backpack
01:26 - into your project sprites panel
01:28 - and i'll just move it next to the
01:29 - original tile sprite
01:31 - if i check in the original one we should
01:34 - find that the last costume we added was
01:36 - costume
01:37 - 49 and back again into tiles 2
01:40 - the next new costume is costume 50.
01:44 - super we are in sync we are going to
01:47 - copy each new costume one at a time
01:49 - to the tile sprite starting at 50 and
01:52 - counting all the way up to
01:53 - 67.
01:57 - the problem with adding sloping tiles is
01:59 - that there are a lot of different
02:01 - variations needed for all the different
02:03 - angles
02:06 - now we can clean up the backpack and we
02:09 - are all set
02:12 - okay to be able to use these new
02:14 - costumes we need to click
02:16 - into the editor sprite and make the tile
02:18 - key map and tile shape lists visible on
02:20 - the stage
02:24 - i find it useful to then return to the
02:26 - tiles sprite costumes tab
02:27 - to see what we are setting up so
02:30 - what do we have yeah the new costumes
02:33 - begin at costume 50.
02:35 - beginning with the tile keymap list then
02:38 - we can assign an editor number key for
02:40 - those sloping tiles
02:42 - up until now we've used 1 2 3 and 4 and
02:45 - the number 9
02:46 - but i think we'll use a new key press of
02:49 - 5
02:49 - for the slopes so enter a 5 in row 50
02:53 - and then every row up to row 67
02:56 - wow 17 rows just for the slopes
03:02 - crazy
03:04 - next up we have the tile shapes list
03:07 - and this is where things get a bit
03:08 - exciting first ensure we add some blank
03:11 - rows to get us up to row 50.
03:19 - the first costume is just a normal full
03:21 - tile
03:22 - we know what to do with that enter a
03:24 - hash in the tile shape
03:25 - list but the next costume costume 51
03:29 - is a slope how should we represent that
03:32 - shape
03:33 - in our list well how about as
03:36 - a forward slash i like this as it
03:38 - matches the slope's direction
03:40 - okay but we have other slopes that also
03:44 - slope in the same direction
03:46 - we will therefore need some way to
03:48 - describe the slope in more detail
03:51 - what we'll do is use two digits
03:54 - the first tells us how many costumes
03:56 - make the full slope
03:57 - so this one takes one tile from the
03:59 - bottom to the top
04:00 - but these ones take two so enter slash
04:04 - one if there are more than one costume
04:06 - then the second digit lets us know which
04:08 - one this tile is
04:10 - but we'll count from zero so that's now
04:13 - slash
04:14 - one zero so costume 52
04:18 - that will be backslash because it's
04:20 - going down
04:22 - backslash then a one then a zero
04:25 - and on we go costume 53 is a forward
04:28 - slash again
04:29 - but is a two costume slope so enter a
04:33 - two
04:34 - and this is the first one so enter zero
04:37 - that's forward slash two
04:38 - zero costume 54 is similar
04:42 - forward slash 2 but complete it with a 1
04:45 - since this is the second costume in the
04:47 - same slope
04:48 - then downward slopes are then backslash
04:51 - 2
04:52 - 0 and backslash 2
04:55 - that's all the slopes accounted for and
04:57 - the rest of the costumes are simple
04:59 - solid tiles
05:01 - enter hashes all the way down from rows
05:03 - 57
05:04 - to 67.
05:10 - cool to make use of these costumes in
05:12 - the editor we'll need to add a script to
05:14 - handle the new number key 5.
05:17 - click into the editor sprite and we'll
05:19 - simply duplicate
05:20 - the when 4 key pressed
05:28 - switching it to trigger off the 5 key
05:33 - and also to use the next brush of 5.
05:36 - nice i'm just going to hide these lists
05:39 - and we can give it a test
05:44 - enter the level editor with the 0 key
05:46 - and press the 5 to switch to the grass
05:48 - tiles category
05:49 - i'm going to place down a simple sloping
05:52 - obstacle in front of mario
05:54 - sadly there is no auto arranging defined
05:57 - yet
05:57 - so we'll have to do this by hand press 0
06:01 - and let's see what we have firstly
06:04 - the tiles are solid that's good news but
06:07 - as expected
06:08 - they are acting nothing like slopes yet
06:10 - they are no different to fully solid
06:13 - tiles to get these slopes to work
06:16 - we'll need to do some scripting in the
06:18 - mario sprite so click in there now
06:21 - the first script we'll look at is the
06:23 - define fix collisions at point x y
06:30 - you can see we are already checking the
06:32 - shape of the tile at this point
06:34 - we now need to pull out the first letter
06:37 - and check whether it's one of these
06:38 - sloping characters
06:40 - set temp to letter one
06:47 - of tile shape
06:53 - that gives us what we need so that we
06:54 - can now check if temp
06:56 - is equal to forward slash
07:02 - or temp is equal to backslash
07:10 - if it does then the tile we are checking
07:12 - is indeed a sloping tile
07:16 - right stop there up until now when we
07:19 - used fix
07:20 - collision at point if the tile was solid
07:22 - then we would know at once
07:24 - that we had collided but now with the
07:27 - sloping tiles
07:28 - we don't yet know if we've entered a
07:30 - solid area or a non-solid area
07:32 - and for this we must find a way to tell
07:35 - whether the collision point is above
07:36 - or below the line of the slope and so
07:40 - which of you has got far enough in your
07:42 - math lessons to know the basic formula
07:44 - for the slope of a straight line
07:46 - y equals m times x plus c
07:51 - we have two variables here that define
07:53 - the line m
07:54 - and c m is the gradient of the line
07:58 - that is the steepness of the slope
08:01 - and c is the intercept the point at
08:04 - which the line crosses the y
08:05 - axis given these two values we can
08:08 - describe all the slopes we want to
08:09 - represent
08:10 - take the first example costume 51 the
08:13 - tile shape of the costume was
08:15 - forward slash one zero and the equation
08:18 - of the line is y
08:19 - equals one times x plus zero
08:23 - an m of one and a c of zero well that
08:26 - makes it look super straightforward
08:28 - but sadly this is not quite the case
08:30 - look at costume 54.
08:33 - we have a shape of forward slash two one
08:36 - but the equation for this line is y
08:38 - equals 0.5
08:40 - times x plus 16.
08:43 - the true relationship between these
08:45 - digits and the equation is
08:47 - m equals 1 over the first digit
08:51 - and c equals second digit multiplied by
08:55 - 32 times m
08:59 - well given this let's plug that into our
09:02 - code and see what we get to
09:06 - make two new variables m for this sprite
09:09 - only
09:11 - and c for this sprite only two
09:16 - set m to one
09:19 - over the letter 2 of tile shape that's
09:22 - the gradient
09:32 - next set c to letter 3 of tile shape
09:35 - multiplied by 32 multiplied by m
09:38 - that's the intercept the y-intercept
09:56 - now we didn't talk about this in the
09:57 - math just now but we also need to handle
09:59 - downward slopes
10:01 - check if temp is equal to backslash
10:04 - in this case we need to invert the slope
10:06 - so set m to zero
10:08 - subtract m
10:13 - the y intercept needs to be flipped to
10:15 - offset down from the top of the tile
10:17 - so set c to 32 subtract c
10:26 - and now we'll use the equation for a
10:27 - line to work out whether we are above
10:29 - or below it make a new variable named
10:32 - offset y for this sprite only
10:38 - and set offset y to
10:43 - mod y that's the y position within the
10:46 - tile that we are testing for collisions
10:48 - subtract now we want the line height at
10:51 - this point
10:52 - so that's mod x multiplied by m
10:56 - all added to c
11:08 - yeah that's our equation for the line
11:11 - plug it into the offset y variable so
11:14 - with this if offset y is zero then we
11:17 - are on the line
11:18 - if it's greater than zero then we are
11:20 - above the line and if it's less than
11:22 - zero we
11:23 - are under the line if we are
11:26 - not under the line
11:37 - then we are not colliding and we can
11:39 - stop this script
11:42 - otherwise we are colliding with the
11:44 - slope so we need to handle
11:45 - both sideways and vertical collisions
11:48 - we'll deal first with the colliding from
11:51 - above
11:52 - we can detect this if fixed y is less
11:55 - than zero
12:03 - that is mario was travelling downwards
12:05 - into the collision
12:06 - to get mario out of the slope we just
12:09 - need to move them
12:10 - up by the amount of the overlap change y
12:13 - by zero subtract offset y
12:16 - that should do it so set solid to 10
12:23 - to record the collision and stop this
12:24 - script we are done
12:27 - we can give this a test so remembering
12:29 - we've only coded this for vertical
12:30 - collisions
12:31 - i'm going to try and jump up and fall
12:33 - onto the slopes
12:35 - if mario moves towards a slope then he
12:37 - glitches position
12:38 - but if he lands on the slope or walks
12:41 - down the slope
12:42 - then things are looking surprisingly
12:43 - good i think we should complete the
12:46 - scripts to correctly resolve the
12:47 - sideways collisions next
12:49 - we already know the collision has
12:50 - occurred we just need to move them out
12:53 - of the collision
12:54 - we'll start by ensuring this was a
12:56 - sideways collision
12:57 - by checking that fixed dy is equal to
13:04 - zero
13:09 - if we were not moving up or down then we
13:12 - must have been moving left to right
13:14 - so now we just need to ensure that we
13:17 - were walking towards the slope
13:19 - if we are traveling from the opposite
13:21 - direction then we'd need to push the
13:23 - player right out of the tile
13:25 - luckily this is the default behavior if
13:27 - we do nothing here
13:28 - so all we need to do is handle the case
13:30 - when we are moving towards the slope
13:33 - i have a clever trick for that i'm going
13:35 - to compare two statements
13:37 - fixed dx is greater than zero this is
13:40 - true if mario is walking right
13:45 - and compare that to m is greater than
13:48 - zero
13:49 - this is true when the slope is sloping
13:52 - upwards
13:53 - so if both of these statements are true
13:56 - or both are false then this condition
13:59 - will run
14:00 - and to move the player out of the slopes
14:02 - we change x by
14:04 - and a little bit of algebra gives us
14:06 - offset y
14:07 - divided by m again set solid to 10 and
14:12 - stop
14:12 - this script let's give that a run
14:15 - i'm still unable to walk into the slope
14:18 - that's to be expected
14:20 - but if i jump onto it i am now free of
14:22 - most of the glitching caused by the left
14:24 - and right movement
14:26 - however there is still something off
14:28 - occurring when i approach
14:30 - the junction between slopes do you see
14:32 - that me suddenly teleporting
14:35 - so what causes this the reason can be a
14:39 - little confusing
14:40 - but look at this example a situation we
14:42 - have not accounted for in our collisions
14:44 - is that mario may move into a collision
14:47 - with a slope like so but pushing them
14:50 - out of the slope may actually leave them
14:52 - still colliding with a second tile yes
14:55 - to resolve collisions we now have to
14:57 - check
14:58 - twice find the define fixed collision in
15:02 - direction script
15:03 - this is where we do all the checks for
15:05 - mario's collision points
15:06 - and add a repeat to under the set solid
15:09 - to blank
15:10 - surrounding all the fixed collision
15:12 - blocks now we could leave it at that
15:15 - but there isn't really any point doing
15:16 - all these checks twice
15:18 - if we know there wasn't a collision the
15:19 - first time round so add in an if
15:22 - solid is less than one
15:27 - stop this script at the end of the
15:29 - repeat loop
15:32 - that was nice and easy we can test again
15:34 - to see if the glitches have gone
15:40 - yep that's looking beautiful
15:43 - that really just leaves us then with
15:45 - needing to allow mario to walk up these
15:47 - slopes
15:48 - so rather than being blocked by them we
15:50 - allow them to be lifted
15:51 - up and out of the slope as he walks over
15:53 - it
15:54 - still in the mario sprite find the
15:56 - define move sprite
15:58 - x script in the case of a collision we
16:00 - are going to have to attempt to move
16:02 - upwards first out of the slope but if
16:04 - this fails
16:06 - we need to get back to where we are now
16:08 - so make a new variable
16:09 - orig y that is original y
16:17 - and set it to y
16:24 - that will keep it safe next up we're
16:27 - going to do a vertical collision check
16:28 - using fixed collisions in direction
16:30 - dx of 0
16:35 - and a d y of minus one a minus one is a
16:38 - downwards motion
16:39 - and tells the collision fixing code to
16:41 - try moving mario
16:43 - up out of any collision so then
16:46 - if we did collide after moving sideways
16:49 - then we will now be raised up
16:51 - higher than before we need to put a
16:54 - threshold on how far we are allowed to
16:56 - move upwards
16:58 - if y is greater than of ridge y we
17:00 - compare with the original position
17:08 - plus 4 pixels leeway
17:12 - and then the absolute value of speed
17:15 - x that means we can move upwards just a
17:18 - little bit more than we are walking
17:20 - sideways
17:22 - so not much more than 45 degree slopes
17:25 - maximum
17:26 - so yeah if y is greater than this then
17:29 - it's too much
17:30 - and we need to undo the move so set y
17:33 - back to the ridge y
17:35 - and then instead we use our original
17:38 - fixed collision script from before super
17:42 - let's give that a test just approaching
17:44 - the slope carefully
17:46 - oh yeah i think we got it i can walk
17:49 - right up the slope now and down again
17:52 - jumping whatever
17:53 - it's a very stable feeling indeed
17:56 - the only one thing i may add is that it
17:58 - would be nice if there was a little
18:00 - resistance to climbing the slope mario
18:02 - shouldn't be able to rush up them like
18:03 - this
18:04 - you see we have the empty else condition
18:06 - here we can first
18:08 - just confirm that mario is indeed
18:10 - traveling upwards
18:11 - if y is greater than orig y
18:19 - then set speed x to speed x multiplied
18:26 - by
18:29 - 0.85 that should do the trick pushing
18:32 - back against
18:33 - mario test the game again okay i
18:36 - certainly can't run up this slope now
18:39 - and yeah if i turn around you can see
18:41 - how it slows me down
18:43 - and then i get up to speed and it slows
18:45 - me down again
18:46 - looking really sweet this mario engine
18:50 - is getting better
18:51 - all the time and the slopes are an
18:53 - excellent addition to the game
18:55 - i can't help but notice that we still
18:57 - have to get this working for the gumbas
19:00 - though
19:00 - oh man is this going to be a nightmare
19:03 - well hopefully not because
19:05 - we were careful to try to keep the
19:06 - movement scripts very similar between
19:09 - player and other
19:10 - sprites it should just take some careful
19:12 - copy and pasting
19:14 - we'll start in the mario sprite with the
19:16 - define movespritex script
19:18 - now we can't copy the define block
19:20 - itself as
19:22 - one already exists in the enemy sprite
19:24 - instead carefully drag
19:25 - all the scripts under the define sprite
19:28 - into the enemy sprite
19:29 - like so now click into the enemy sprite
19:32 - and you'll see that scripts have been
19:34 - dumped here
19:35 - we need to move these over to the define
19:37 - movespritex script in the sprite
19:40 - where is that script here it is so
19:43 - bring the scripts down to here
19:58 - okay before we replace things we just
20:00 - need to ensure we keep this
20:01 - turn 180 script so that the goombas
20:04 - change direction
20:05 - when they hit a wall now delete the old
20:08 - scripts
20:08 - and replace them all with these new ones
20:14 - next up back in the mario sprite find
20:17 - the define
20:18 - fixed collisions in direction script
20:20 - this time
20:21 - to avoid all the scrolling i'm going to
20:23 - use my scratch dev tools copy and paste
20:25 - feature
20:26 - if you don't have my add-on then just
20:28 - drag the scripts as before
20:30 - i'm going to click the script i want to
20:32 - copy
20:34 - the block below the define hat block and
20:36 - then press
20:37 - ctrl c to copy it you could also right
20:40 - click it and choose the copy all feature
20:44 - now click into the enemy sprite and we
20:46 - find the same define
20:48 - fix collision in direction script press
20:50 - control
20:51 - v to paste the scripts and i can right
20:54 - away replace the original ones with
20:55 - these as there was no modifications
21:03 - right one more back to the mario sprite
21:05 - and find the define
21:06 - fix collisions at x y i'll use the right
21:10 - click
21:10 - copy all feature of scratch dev tools
21:12 - this time
21:19 - we can now click into the enemy's sprite
21:21 - to locate the same define
21:22 - fix collisions in direction script this
21:25 - one is almost the same
21:27 - paste it in with ctrl v replace the
21:29 - original scripts
21:36 - and then we just need to scroll down and
21:38 - remove the if
21:39 - down of controls check this was a bug
21:42 - fix we did a while back too to prevent
21:44 - goomers dropping down through the
21:45 - platforms do you remember
21:48 - and we are ready to give it a play
21:52 - do i have any goomba volunteers aha just
21:55 - the goomba
21:56 - come this way and
22:00 - would you look at that straight up the
22:02 - slope
22:03 - he's even affected by the slope speed
22:05 - too that's great
22:07 - and it also brings us perfectly to the
22:09 - end of this
22:10 - episode that was surely more tricky to
22:13 - teach than i was hoping
22:15 - sometimes a little script can wrap up a
22:16 - whole lot of learning that you forgot
22:18 - you learnt
22:19 - until you try to explain it however it's
22:21 - super fun functionality
22:23 - and i'm hoping you'll be able to make
22:25 - use of it a challenge if you want it is
22:27 - to try to make the layout work with the
22:29 - tile auto arranger
22:31 - it's a little bit more complicated than
22:32 - you might think though so be warned
22:35 - you may prefer to leave that one out
22:38 - before i go i also wanted to apologize
22:41 - for the lack of posts on my community
22:42 - tab
22:43 - sadly i am suffering from youtube issues
22:46 - youtube technical support are looking
22:48 - into things but at present i cannot make
22:50 - new posts
22:51 - yes it's a disaster i felt so cut off
22:54 - from you all not being able to let you
22:55 - know what i'm up to or pose the polls
22:57 - i'd promised
22:58 - thanks though so much for continuing to
23:01 - watch and love the videos
23:02 - hopefully i'll be sorted and back soon
23:05 - talking of which
23:06 - please smash the like button if you've
23:07 - enjoyed this video and subscribe
23:09 - subscribe subscribe i'll answer as many
23:11 - comments as i can
23:13 - but if you want a closer interaction
23:15 - with me then consider joining the
23:16 - channel membership
23:17 - as members comments come up first and
23:19 - i'll prioritize them
23:21 - you can also get super perks like custom
23:23 - channel emoji have you seen those
23:24 - they're
23:25 - really fun early access to videos and
23:27 - even downloads the projects themselves
23:30 - more importantly you get to support me
23:32 - making these videos which is super
23:33 - important
23:34 - and memberships can make a great
23:36 - birthday treat too
23:37 - next time we'll do a mix it up monday
23:40 - and i've got some ideas already
23:41 - perhaps the greatly anticipated path
23:43 - binding too with lists
23:45 - or follow-up to the cloud multiplayer
23:47 - tutorial looking at working that
23:49 - into an existing game oh i know those
23:51 - two will get people excited
23:53 - right the end thank you for watching and
23:56 - scratch on guys

Cleaned transcript:

hello fellow scratchers i'm griff patch and this is part 14 of our tiled scrolling platformer series and finally we are expanding our engine to support sloping tiles and yes slopes are so cool allowing our level design to break away from the enforced rigid blocky structure and our levels can become a lot more exciting but there is a catch calculating collisions in a tilebased world requires us to work with a bit more math than we are used to doing ah but fear not my friends there's no way i will let that stop us but just in case it does get a bit much just be assured that you will be fine to skip this episode if you don't need slopes in your game in which case just sit back watch the video and enjoy so you will have seen the new tile costumes i was just showing off as always i've popped them into the tile scrolling tutorial asset project on my grip batch tutor account there's a link under this video and if you need those new costumes then open up the project now here they are in the tile sprite from costume 50 onwards to make life simple just backpack the entire tile sprite okay back to your projects and open up the tile scrolling platformer scripts drag the tile sprite from the backpack into your project sprites panel and i'll just move it next to the original tile sprite if i check in the original one we should find that the last costume we added was costume 49 and back again into tiles 2 the next new costume is costume 50. super we are in sync we are going to copy each new costume one at a time to the tile sprite starting at 50 and counting all the way up to 67. the problem with adding sloping tiles is that there are a lot of different variations needed for all the different angles now we can clean up the backpack and we are all set okay to be able to use these new costumes we need to click into the editor sprite and make the tile key map and tile shape lists visible on the stage i find it useful to then return to the tiles sprite costumes tab to see what we are setting up so what do we have yeah the new costumes begin at costume 50. beginning with the tile keymap list then we can assign an editor number key for those sloping tiles up until now we've used 1 2 3 and 4 and the number 9 but i think we'll use a new key press of 5 for the slopes so enter a 5 in row 50 and then every row up to row 67 wow 17 rows just for the slopes crazy next up we have the tile shapes list and this is where things get a bit exciting first ensure we add some blank rows to get us up to row 50. the first costume is just a normal full tile we know what to do with that enter a hash in the tile shape list but the next costume costume 51 is a slope how should we represent that shape in our list well how about as a forward slash i like this as it matches the slope's direction okay but we have other slopes that also slope in the same direction we will therefore need some way to describe the slope in more detail what we'll do is use two digits the first tells us how many costumes make the full slope so this one takes one tile from the bottom to the top but these ones take two so enter slash one if there are more than one costume then the second digit lets us know which one this tile is but we'll count from zero so that's now slash one zero so costume 52 that will be backslash because it's going down backslash then a one then a zero and on we go costume 53 is a forward slash again but is a two costume slope so enter a two and this is the first one so enter zero that's forward slash two zero costume 54 is similar forward slash 2 but complete it with a 1 since this is the second costume in the same slope then downward slopes are then backslash 2 0 and backslash 2 that's all the slopes accounted for and the rest of the costumes are simple solid tiles enter hashes all the way down from rows 57 to 67. cool to make use of these costumes in the editor we'll need to add a script to handle the new number key 5. click into the editor sprite and we'll simply duplicate the when 4 key pressed switching it to trigger off the 5 key and also to use the next brush of 5. nice i'm just going to hide these lists and we can give it a test enter the level editor with the 0 key and press the 5 to switch to the grass tiles category i'm going to place down a simple sloping obstacle in front of mario sadly there is no auto arranging defined yet so we'll have to do this by hand press 0 and let's see what we have firstly the tiles are solid that's good news but as expected they are acting nothing like slopes yet they are no different to fully solid tiles to get these slopes to work we'll need to do some scripting in the mario sprite so click in there now the first script we'll look at is the define fix collisions at point x y you can see we are already checking the shape of the tile at this point we now need to pull out the first letter and check whether it's one of these sloping characters set temp to letter one of tile shape that gives us what we need so that we can now check if temp is equal to forward slash or temp is equal to backslash if it does then the tile we are checking is indeed a sloping tile right stop there up until now when we used fix collision at point if the tile was solid then we would know at once that we had collided but now with the sloping tiles we don't yet know if we've entered a solid area or a nonsolid area and for this we must find a way to tell whether the collision point is above or below the line of the slope and so which of you has got far enough in your math lessons to know the basic formula for the slope of a straight line y equals m times x plus c we have two variables here that define the line m and c m is the gradient of the line that is the steepness of the slope and c is the intercept the point at which the line crosses the y axis given these two values we can describe all the slopes we want to represent take the first example costume 51 the tile shape of the costume was forward slash one zero and the equation of the line is y equals one times x plus zero an m of one and a c of zero well that makes it look super straightforward but sadly this is not quite the case look at costume 54. we have a shape of forward slash two one but the equation for this line is y equals 0.5 times x plus 16. the true relationship between these digits and the equation is m equals 1 over the first digit and c equals second digit multiplied by 32 times m well given this let's plug that into our code and see what we get to make two new variables m for this sprite only and c for this sprite only two set m to one over the letter 2 of tile shape that's the gradient next set c to letter 3 of tile shape multiplied by 32 multiplied by m that's the intercept the yintercept now we didn't talk about this in the math just now but we also need to handle downward slopes check if temp is equal to backslash in this case we need to invert the slope so set m to zero subtract m the y intercept needs to be flipped to offset down from the top of the tile so set c to 32 subtract c and now we'll use the equation for a line to work out whether we are above or below it make a new variable named offset y for this sprite only and set offset y to mod y that's the y position within the tile that we are testing for collisions subtract now we want the line height at this point so that's mod x multiplied by m all added to c yeah that's our equation for the line plug it into the offset y variable so with this if offset y is zero then we are on the line if it's greater than zero then we are above the line and if it's less than zero we are under the line if we are not under the line then we are not colliding and we can stop this script otherwise we are colliding with the slope so we need to handle both sideways and vertical collisions we'll deal first with the colliding from above we can detect this if fixed y is less than zero that is mario was travelling downwards into the collision to get mario out of the slope we just need to move them up by the amount of the overlap change y by zero subtract offset y that should do it so set solid to 10 to record the collision and stop this script we are done we can give this a test so remembering we've only coded this for vertical collisions i'm going to try and jump up and fall onto the slopes if mario moves towards a slope then he glitches position but if he lands on the slope or walks down the slope then things are looking surprisingly good i think we should complete the scripts to correctly resolve the sideways collisions next we already know the collision has occurred we just need to move them out of the collision we'll start by ensuring this was a sideways collision by checking that fixed dy is equal to zero if we were not moving up or down then we must have been moving left to right so now we just need to ensure that we were walking towards the slope if we are traveling from the opposite direction then we'd need to push the player right out of the tile luckily this is the default behavior if we do nothing here so all we need to do is handle the case when we are moving towards the slope i have a clever trick for that i'm going to compare two statements fixed dx is greater than zero this is true if mario is walking right and compare that to m is greater than zero this is true when the slope is sloping upwards so if both of these statements are true or both are false then this condition will run and to move the player out of the slopes we change x by and a little bit of algebra gives us offset y divided by m again set solid to 10 and stop this script let's give that a run i'm still unable to walk into the slope that's to be expected but if i jump onto it i am now free of most of the glitching caused by the left and right movement however there is still something off occurring when i approach the junction between slopes do you see that me suddenly teleporting so what causes this the reason can be a little confusing but look at this example a situation we have not accounted for in our collisions is that mario may move into a collision with a slope like so but pushing them out of the slope may actually leave them still colliding with a second tile yes to resolve collisions we now have to check twice find the define fixed collision in direction script this is where we do all the checks for mario's collision points and add a repeat to under the set solid to blank surrounding all the fixed collision blocks now we could leave it at that but there isn't really any point doing all these checks twice if we know there wasn't a collision the first time round so add in an if solid is less than one stop this script at the end of the repeat loop that was nice and easy we can test again to see if the glitches have gone yep that's looking beautiful that really just leaves us then with needing to allow mario to walk up these slopes so rather than being blocked by them we allow them to be lifted up and out of the slope as he walks over it still in the mario sprite find the define move sprite x script in the case of a collision we are going to have to attempt to move upwards first out of the slope but if this fails we need to get back to where we are now so make a new variable orig y that is original y and set it to y that will keep it safe next up we're going to do a vertical collision check using fixed collisions in direction dx of 0 and a d y of minus one a minus one is a downwards motion and tells the collision fixing code to try moving mario up out of any collision so then if we did collide after moving sideways then we will now be raised up higher than before we need to put a threshold on how far we are allowed to move upwards if y is greater than of ridge y we compare with the original position plus 4 pixels leeway and then the absolute value of speed x that means we can move upwards just a little bit more than we are walking sideways so not much more than 45 degree slopes maximum so yeah if y is greater than this then it's too much and we need to undo the move so set y back to the ridge y and then instead we use our original fixed collision script from before super let's give that a test just approaching the slope carefully oh yeah i think we got it i can walk right up the slope now and down again jumping whatever it's a very stable feeling indeed the only one thing i may add is that it would be nice if there was a little resistance to climbing the slope mario shouldn't be able to rush up them like this you see we have the empty else condition here we can first just confirm that mario is indeed traveling upwards if y is greater than orig y then set speed x to speed x multiplied by 0.85 that should do the trick pushing back against mario test the game again okay i certainly can't run up this slope now and yeah if i turn around you can see how it slows me down and then i get up to speed and it slows me down again looking really sweet this mario engine is getting better all the time and the slopes are an excellent addition to the game i can't help but notice that we still have to get this working for the gumbas though oh man is this going to be a nightmare well hopefully not because we were careful to try to keep the movement scripts very similar between player and other sprites it should just take some careful copy and pasting we'll start in the mario sprite with the define movespritex script now we can't copy the define block itself as one already exists in the enemy sprite instead carefully drag all the scripts under the define sprite into the enemy sprite like so now click into the enemy sprite and you'll see that scripts have been dumped here we need to move these over to the define movespritex script in the sprite where is that script here it is so bring the scripts down to here okay before we replace things we just need to ensure we keep this turn 180 script so that the goombas change direction when they hit a wall now delete the old scripts and replace them all with these new ones next up back in the mario sprite find the define fixed collisions in direction script this time to avoid all the scrolling i'm going to use my scratch dev tools copy and paste feature if you don't have my addon then just drag the scripts as before i'm going to click the script i want to copy the block below the define hat block and then press ctrl c to copy it you could also right click it and choose the copy all feature now click into the enemy sprite and we find the same define fix collision in direction script press control v to paste the scripts and i can right away replace the original ones with these as there was no modifications right one more back to the mario sprite and find the define fix collisions at x y i'll use the right click copy all feature of scratch dev tools this time we can now click into the enemy's sprite to locate the same define fix collisions in direction script this one is almost the same paste it in with ctrl v replace the original scripts and then we just need to scroll down and remove the if down of controls check this was a bug fix we did a while back too to prevent goomers dropping down through the platforms do you remember and we are ready to give it a play do i have any goomba volunteers aha just the goomba come this way and would you look at that straight up the slope he's even affected by the slope speed too that's great and it also brings us perfectly to the end of this episode that was surely more tricky to teach than i was hoping sometimes a little script can wrap up a whole lot of learning that you forgot you learnt until you try to explain it however it's super fun functionality and i'm hoping you'll be able to make use of it a challenge if you want it is to try to make the layout work with the tile auto arranger it's a little bit more complicated than you might think though so be warned you may prefer to leave that one out before i go i also wanted to apologize for the lack of posts on my community tab sadly i am suffering from youtube issues youtube technical support are looking into things but at present i cannot make new posts yes it's a disaster i felt so cut off from you all not being able to let you know what i'm up to or pose the polls i'd promised thanks though so much for continuing to watch and love the videos hopefully i'll be sorted and back soon talking of which please smash the like button if you've enjoyed this video and subscribe subscribe subscribe i'll answer as many comments as i can but if you want a closer interaction with me then consider joining the channel membership as members comments come up first and i'll prioritize them you can also get super perks like custom channel emoji have you seen those they're really fun early access to videos and even downloads the projects themselves more importantly you get to support me making these videos which is super important and memberships can make a great birthday treat too next time we'll do a mix it up monday and i've got some ideas already perhaps the greatly anticipated path binding too with lists or followup to the cloud multiplayer tutorial looking at working that into an existing game oh i know those two will get people excited right the end thank you for watching and scratch on guys
