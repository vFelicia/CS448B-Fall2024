With timestamps:

00:02 - hello fellow scratchers today we're
00:05 - focusing on adding text alignment to our
00:07 - scratch text engine that's to the left
00:09 - yeah we did that already the right and
00:12 - the center this will get us one step
00:15 - closer to building those awesome scratch
00:17 - dialog boxes also in this episode i'll
00:19 - let you in on how to make the text
00:21 - follow the mouse cursor so cool and
00:24 - we'll update the engine to include
00:26 - scaling of letter spacing and line
00:27 - height along with the chosen sprite size
00:30 - and yes i'll even try swapping out to
00:32 - another of those fonts from episode one
00:35 - how hard can it be
00:36 - and boy it does look real sweet so what
00:41 - are we waiting for guys
00:43 - let's get scratching
00:46 - and here is where we left off in episode
00:48 - one as always i advise we save this as a
00:51 - new copy because this is episode two
00:55 - now remember that bug we experienced in
00:57 - episode 1 while trying to measure the
00:59 - width of the letter costumes scratch
01:02 - failed to bring that letter fully on
01:04 - screen this resulted in the wits being
01:06 - reported too narrow well i'm really
01:09 - excited to announce the scratcher mine
01:11 - greg huge respect to you discovered a
01:14 - fix for this bug so yeah here the
01:16 - costume is left slightly off screen well
01:19 - watch this
01:20 - if we hide the sprite first before we
01:23 - run the very same movement script
01:26 - now when we show it again it's perfectly
01:29 - aligned on screen crazy go figure you
01:33 - can see the difference
01:34 - so let's drop a hide block in the when
01:36 - flag click script just before we
01:39 - calculate the letter sizes
01:41 - but since the font is now hidden we'll
01:43 - have to show the letters again as they
01:45 - are cloned that's easy enough when i
01:48 - start as a clone
01:51 - show
01:52 - the double benefit of this is that it
01:54 - also fixes another bug where you might
01:56 - have seen lots of flashing letters
01:58 - during the slow rendering of text that
02:00 - is without the run without screen
02:02 - refresh ticked double cool
02:05 - so with our costume measurements
02:07 - accurately calculated the result is that
02:09 - the spacing between letters will now
02:11 - appear too spaced out okay so find the
02:14 - calculate letter sizes script and scroll
02:17 - down to the add to width list block
02:20 - if you remember we added a little bit
02:22 - extra to this to account for the
02:23 - measurement bug but rather than just
02:25 - changing the value let's take the
02:27 - opportunity to enhance it with a
02:29 - calculation to let the spacing between
02:31 - letters scale with the size of the
02:33 - font's bright size
02:35 - a font at two hundred percent should
02:37 - have twice as much gap added than one at
02:39 - one hundred percent
02:42 - to avoid the line getting too long with
02:43 - the maths we'll split it up setting the
02:46 - variable i to this xx plus 240 take away
02:50 - x position
02:52 - but we'll leave off the plus 4
02:54 - and then drop the i variable into the
02:56 - addition block below cool so i want this
03:00 - gap between letters to be easy to change
03:03 - edit the custom block
03:06 - adding an input named gap
03:10 - okay drag that input down here and we
03:13 - need to scale the gap by the sprite
03:16 - size multiply by gap
03:22 - and on the left a divide
03:26 - dividing the sprite size by one hundred
03:32 - splendid
03:33 - now for a one pixel gap between letters
03:36 - sized at one hundred percent we enter a
03:39 - one in here
03:42 - run the project and then click on the
03:44 - display scripts over here
03:46 - there nice and clean
03:49 - you can play with this gap to space
03:50 - things out more but importantly if we
03:53 - use a bigger font size say four hundred
03:55 - percent the gap of one scales up two and
03:58 - the letters remain evenly spaced that is
04:01 - much better
04:03 - another fix that is worth doing now is
04:05 - to handle unknown letters in our text
04:08 - see what happens when i change this e
04:11 - for an accented e
04:13 - my font doesn't currently support these
04:14 - extended characters
04:16 - running that now and you'll find in
04:18 - place of the unknown specially we find
04:20 - the previous letter gets duplicated just
04:23 - like it did for the space letter as we
04:25 - were coding things up in the first
04:26 - episode
04:27 - find the define write script
04:30 - my preferred solution to this is just to
04:32 - pop another switch costume in before the
04:34 - first but this time setting it to the
04:37 - space costume
04:38 - then if the next costume doesn't exist
04:41 - scratch remains on the one it was
04:43 - already set to and doesn't change
04:45 - therefore it will remain a space and
04:48 - that that is a much better outcome for
04:50 - us cool
04:52 - okay so on with the tutorial how about
04:55 - we make things more dynamic getting the
04:57 - text to follow the mouse cursor
04:59 - find the when flag click script let's
05:02 - drop in a forever loop at the bottom to
05:04 - make the text move we first have to
05:06 - delete the existing clones do that with
05:09 - a broadcast to clear font letters
05:12 - and then to display the letters again
05:14 - add another broadcast right afterwards
05:16 - and the new event is named test script
05:21 - just scrolling over to the test scripts
05:22 - now and here they are
05:25 - so the broadcaster clear isn't needed
05:28 - here now it moved over into the forever
05:30 - loop
05:31 - now we trigger these scripts off a new
05:33 - when i receive test script
05:37 - cool no more searching around for
05:39 - scripts to test this project just stop
05:41 - the project and then click the green
05:43 - flag once ta-da brilliant
05:46 - oh now if you are seeing only a single
05:49 - letter appearing then that is because
05:51 - your define write script has not been
05:54 - set to run without screen refresh for
05:56 - the remainder of this episode i'd advise
05:58 - you to tick that box
06:00 - next we'll have the text follow the
06:02 - mouse pop in the mouse x and mouse y as
06:06 - the inputs to the right block
06:08 - oh yeah look at this the clones are
06:10 - being deleted and recreated at the mouse
06:13 - pointer
06:14 - and what about this second line of text
06:16 - we use a mouse x again but we'll need to
06:18 - subtract an amount from the mouse y to
06:20 - make it appear below the first line say
06:23 - around 30
06:25 - so that works but it would be better if
06:28 - we formalize this measurement as we'll
06:30 - want to use it again later for sure
06:32 - make a new variable naming it
06:35 - line height for all sprites
06:38 - then we can use the mouse y subtract
06:41 - line height
06:43 - and where do we set this variable up
06:45 - best place right now is in the calculate
06:47 - letter sizes script
06:49 - set line height
06:53 - 2
06:54 - and again this wants to scale with the
06:56 - sprite size so multiply
06:59 - then you need to divide on the left
07:01 - again dividing sprite size by 100
07:05 - you'll see that a lot
07:06 - and our line height goes on the right 15
07:10 - should do the trick for this font
07:12 - click the green flag to confirm and yeah
07:15 - that looks good
07:17 - we can confirm that all the gaps and the
07:19 - line heights are indeed scaling with
07:21 - font size so this is great much more
07:25 - flexible now
07:26 - hey were any of you wondering how this
07:28 - looks with a vector font
07:31 - don't feel you need to do this at home
07:32 - you can just watch me but it's useful to
07:35 - know how to switch the font over if i
07:37 - find the sans-serif font project on my
07:39 - tutor account this is the one that uses
07:42 - the built-in scratch font and what i'm
07:44 - going to do is drag just the font sprite
07:47 - into my backpack
07:49 - then back in my episode 2 project
07:53 - i'm going to save as a copy and name it
07:55 - native font episode 2.
07:57 - better safe than sorry
08:00 - so import the vector font sprite
08:07 - and there's no script here so we need to
08:10 - bring them in
08:11 - it's faster to copy the five or six
08:13 - scripts over than it is to re-import all
08:15 - 90 plus costumes right
08:17 - i like to do it in batches a column of
08:19 - scripts at a time and then rearrange to
08:22 - keep the order the same
08:34 - once done just delete the old font
08:36 - sprite and run the project
08:41 - so there you go this is what it looks
08:43 - like using the built-in scratch font
08:47 - obviously the costume sizes i used here
08:49 - must be quite a bit bigger than the
08:50 - bitmap one but also you'll find the
08:53 - built-in fonts have much more space
08:55 - between the letters we actually need to
08:58 - use a negative negative 2 gap to bring
09:02 - them closer together
09:04 - the line height is also too small 24
09:06 - will give better results
09:10 - then we can drop the costume size down
09:13 - to 100
09:17 - oh yes now we're talking just play with
09:20 - these settings to get the font just how
09:22 - you want it right
09:24 - brilliant
09:25 - and
09:26 - now for the meat of this tutorial the
09:29 - most asked question since episode 1 has
09:31 - been how can we center text
09:35 - good question
09:36 - at present the text is left aligned at
09:39 - my mouse cursor what if i want it
09:41 - beautifully centered very useful in a
09:43 - lot of scenarios
09:45 - to center text we want half the text to
09:48 - be on the left of the mouse and the
09:50 - other half on the right
09:53 - so if we can measure the length of the
09:54 - text first we'll then just need to
09:57 - position it all left by half of that
09:59 - width and job done
10:02 - find the write script
10:04 - we want to offset this x position but
10:07 - first we need to calculate the width of
10:09 - the text
10:10 - make a new custom block naming it
10:13 - get width of text
10:16 - with an input text and run without
10:19 - screen refresh please
10:21 - the process of getting the width is
10:22 - actually very similar to the process of
10:24 - drawing the text in the first place so
10:26 - duplicate those scripts into the new
10:28 - define script
10:30 - however there are some changes to be
10:32 - made rather than keeping track of the x
10:35 - position in xx we want to keep track of
10:38 - the text's width
10:40 - make a new variable
10:41 - width
10:42 - for this sprite only
10:44 - change the xx to be width
10:47 - and start it off at zero
10:50 - no width to begin with
10:52 - then remove the set y position there'll
10:55 - be no actual drawing done in this script
10:58 - only finding the widths
11:00 - as such careful not to remove the change
11:02 - xx block we can throw away the if clause
11:06 - as you can see that's only to clone the
11:09 - letters
11:10 - lastly switch this xx for the new width
11:12 - variable beautiful this script now loops
11:15 - through the text a letter to time adding
11:17 - up each letter's width as it goes
11:20 - we can test that it works just bring in
11:22 - a get width of text block and try it on
11:24 - the letter a
11:26 - the result is shown in the width
11:27 - variable reporter
11:29 - 15 pixels for mine sounds convincing
11:32 - and a
11:33 - is 30 double perfect full stop
11:37 - six any string should work
11:40 - so with this in hand let's see if we can
11:42 - center some written text shall we
11:45 - we want the alignment to be optional
11:47 - though so edit the write block
11:50 - adding the label align
11:54 - and a text input also named align
11:58 - okay
11:59 - we start writing out text from the
12:01 - position xx we want to change this
12:04 - depending on the align value
12:08 - with an if-else block after setting txt
12:12 - check if a line is equal to
12:15 - c for center
12:17 - if it is then we get the width of the
12:19 - text from the txt variable
12:21 - remember moving back by half this width
12:23 - will allow us to center it so set x x to
12:29 - the x input
12:31 - subtract
12:36 - half of the width that is width divided
12:39 - by two
12:45 - just link that script back on and then
12:48 - in the original text script i'm going to
12:50 - set a line to c for both of these
12:56 - and smash that green flag
12:58 - oh guys this is beautiful both lines are
13:02 - perfectly centered on my mouse cursor
13:04 - isn't that great
13:06 - oops well we appear to have broken the
13:09 - left align l doesn't work
13:11 - that's because i left out the default
13:13 - set xx to x
13:16 - there but not so fast what about
13:19 - writerline we might as well cater for
13:21 - that too
13:23 - duplicate the if else and we'll replace
13:26 - the setxx with the new if else stack
13:29 - the second line check will look for an
13:32 - align of r for write a line
13:35 - and this is even easier than centering
13:38 - we simply subtract the entire width from
13:41 - x like so
13:42 - it can't be that easy shall we give it a
13:45 - test
13:46 - left
13:46 - line centered and now right aligned
13:51 - amazing work that will come in so handy
13:55 - so we are working towards creating these
13:58 - awesome page dialog boxes the next step
14:01 - will be to solve how to correctly handle
14:03 - text as it overflows off the edge of our
14:05 - page the next episode will therefore
14:07 - cover word wrapping and that is going to
14:10 - be such fun i do hope you are enjoying
14:13 - this mini series if you are then please
14:15 - smash that like button and don't forget
14:17 - to subscribe to the channel not to miss
14:19 - the next exciting episode the same
14:22 - scratch studio is still open so do
14:23 - submit your updated projects there so we
14:25 - can all see them and join in the fun
14:28 - right that's all i've got time for
14:30 - thanks for watching and have a great
14:32 - week ahead and scratch on guys
14:50 - you

Cleaned transcript:

hello fellow scratchers today we're focusing on adding text alignment to our scratch text engine that's to the left yeah we did that already the right and the center this will get us one step closer to building those awesome scratch dialog boxes also in this episode i'll let you in on how to make the text follow the mouse cursor so cool and we'll update the engine to include scaling of letter spacing and line height along with the chosen sprite size and yes i'll even try swapping out to another of those fonts from episode one how hard can it be and boy it does look real sweet so what are we waiting for guys let's get scratching and here is where we left off in episode one as always i advise we save this as a new copy because this is episode two now remember that bug we experienced in episode 1 while trying to measure the width of the letter costumes scratch failed to bring that letter fully on screen this resulted in the wits being reported too narrow well i'm really excited to announce the scratcher mine greg huge respect to you discovered a fix for this bug so yeah here the costume is left slightly off screen well watch this if we hide the sprite first before we run the very same movement script now when we show it again it's perfectly aligned on screen crazy go figure you can see the difference so let's drop a hide block in the when flag click script just before we calculate the letter sizes but since the font is now hidden we'll have to show the letters again as they are cloned that's easy enough when i start as a clone show the double benefit of this is that it also fixes another bug where you might have seen lots of flashing letters during the slow rendering of text that is without the run without screen refresh ticked double cool so with our costume measurements accurately calculated the result is that the spacing between letters will now appear too spaced out okay so find the calculate letter sizes script and scroll down to the add to width list block if you remember we added a little bit extra to this to account for the measurement bug but rather than just changing the value let's take the opportunity to enhance it with a calculation to let the spacing between letters scale with the size of the font's bright size a font at two hundred percent should have twice as much gap added than one at one hundred percent to avoid the line getting too long with the maths we'll split it up setting the variable i to this xx plus 240 take away x position but we'll leave off the plus 4 and then drop the i variable into the addition block below cool so i want this gap between letters to be easy to change edit the custom block adding an input named gap okay drag that input down here and we need to scale the gap by the sprite size multiply by gap and on the left a divide dividing the sprite size by one hundred splendid now for a one pixel gap between letters sized at one hundred percent we enter a one in here run the project and then click on the display scripts over here there nice and clean you can play with this gap to space things out more but importantly if we use a bigger font size say four hundred percent the gap of one scales up two and the letters remain evenly spaced that is much better another fix that is worth doing now is to handle unknown letters in our text see what happens when i change this e for an accented e my font doesn't currently support these extended characters running that now and you'll find in place of the unknown specially we find the previous letter gets duplicated just like it did for the space letter as we were coding things up in the first episode find the define write script my preferred solution to this is just to pop another switch costume in before the first but this time setting it to the space costume then if the next costume doesn't exist scratch remains on the one it was already set to and doesn't change therefore it will remain a space and that that is a much better outcome for us cool okay so on with the tutorial how about we make things more dynamic getting the text to follow the mouse cursor find the when flag click script let's drop in a forever loop at the bottom to make the text move we first have to delete the existing clones do that with a broadcast to clear font letters and then to display the letters again add another broadcast right afterwards and the new event is named test script just scrolling over to the test scripts now and here they are so the broadcaster clear isn't needed here now it moved over into the forever loop now we trigger these scripts off a new when i receive test script cool no more searching around for scripts to test this project just stop the project and then click the green flag once tada brilliant oh now if you are seeing only a single letter appearing then that is because your define write script has not been set to run without screen refresh for the remainder of this episode i'd advise you to tick that box next we'll have the text follow the mouse pop in the mouse x and mouse y as the inputs to the right block oh yeah look at this the clones are being deleted and recreated at the mouse pointer and what about this second line of text we use a mouse x again but we'll need to subtract an amount from the mouse y to make it appear below the first line say around 30 so that works but it would be better if we formalize this measurement as we'll want to use it again later for sure make a new variable naming it line height for all sprites then we can use the mouse y subtract line height and where do we set this variable up best place right now is in the calculate letter sizes script set line height 2 and again this wants to scale with the sprite size so multiply then you need to divide on the left again dividing sprite size by 100 you'll see that a lot and our line height goes on the right 15 should do the trick for this font click the green flag to confirm and yeah that looks good we can confirm that all the gaps and the line heights are indeed scaling with font size so this is great much more flexible now hey were any of you wondering how this looks with a vector font don't feel you need to do this at home you can just watch me but it's useful to know how to switch the font over if i find the sansserif font project on my tutor account this is the one that uses the builtin scratch font and what i'm going to do is drag just the font sprite into my backpack then back in my episode 2 project i'm going to save as a copy and name it native font episode 2. better safe than sorry so import the vector font sprite and there's no script here so we need to bring them in it's faster to copy the five or six scripts over than it is to reimport all 90 plus costumes right i like to do it in batches a column of scripts at a time and then rearrange to keep the order the same once done just delete the old font sprite and run the project so there you go this is what it looks like using the builtin scratch font obviously the costume sizes i used here must be quite a bit bigger than the bitmap one but also you'll find the builtin fonts have much more space between the letters we actually need to use a negative negative 2 gap to bring them closer together the line height is also too small 24 will give better results then we can drop the costume size down to 100 oh yes now we're talking just play with these settings to get the font just how you want it right brilliant and now for the meat of this tutorial the most asked question since episode 1 has been how can we center text good question at present the text is left aligned at my mouse cursor what if i want it beautifully centered very useful in a lot of scenarios to center text we want half the text to be on the left of the mouse and the other half on the right so if we can measure the length of the text first we'll then just need to position it all left by half of that width and job done find the write script we want to offset this x position but first we need to calculate the width of the text make a new custom block naming it get width of text with an input text and run without screen refresh please the process of getting the width is actually very similar to the process of drawing the text in the first place so duplicate those scripts into the new define script however there are some changes to be made rather than keeping track of the x position in xx we want to keep track of the text's width make a new variable width for this sprite only change the xx to be width and start it off at zero no width to begin with then remove the set y position there'll be no actual drawing done in this script only finding the widths as such careful not to remove the change xx block we can throw away the if clause as you can see that's only to clone the letters lastly switch this xx for the new width variable beautiful this script now loops through the text a letter to time adding up each letter's width as it goes we can test that it works just bring in a get width of text block and try it on the letter a the result is shown in the width variable reporter 15 pixels for mine sounds convincing and a is 30 double perfect full stop six any string should work so with this in hand let's see if we can center some written text shall we we want the alignment to be optional though so edit the write block adding the label align and a text input also named align okay we start writing out text from the position xx we want to change this depending on the align value with an ifelse block after setting txt check if a line is equal to c for center if it is then we get the width of the text from the txt variable remember moving back by half this width will allow us to center it so set x x to the x input subtract half of the width that is width divided by two just link that script back on and then in the original text script i'm going to set a line to c for both of these and smash that green flag oh guys this is beautiful both lines are perfectly centered on my mouse cursor isn't that great oops well we appear to have broken the left align l doesn't work that's because i left out the default set xx to x there but not so fast what about writerline we might as well cater for that too duplicate the if else and we'll replace the setxx with the new if else stack the second line check will look for an align of r for write a line and this is even easier than centering we simply subtract the entire width from x like so it can't be that easy shall we give it a test left line centered and now right aligned amazing work that will come in so handy so we are working towards creating these awesome page dialog boxes the next step will be to solve how to correctly handle text as it overflows off the edge of our page the next episode will therefore cover word wrapping and that is going to be such fun i do hope you are enjoying this mini series if you are then please smash that like button and don't forget to subscribe to the channel not to miss the next exciting episode the same scratch studio is still open so do submit your updated projects there so we can all see them and join in the fun right that's all i've got time for thanks for watching and have a great week ahead and scratch on guys you
