With timestamps:

00:00 - [Music]
00:02 - hello fellow scratchers i'm grifbatch
00:05 - and this is part two of our classic
00:06 - scratch platformer tutorial in which we
00:09 - are aiming to make something pretty
00:10 - special yep just look at this love it
00:14 - and we sure made a strong start last
00:16 - episode building out the basic movement
00:18 - and a clever robust collision detection
00:20 - system today we are going to start
00:22 - fleshing out our level adding multiple
00:25 - scenes to visit and addressing common
00:27 - bugs we scratch his face when things
00:29 - don't quite line up as required
00:32 - just so you know there's no need for you
00:33 - to make your levels exactly the same as
00:35 - mine you are free to design them any way
00:37 - you like and it won't stop you from
00:39 - following this tutorial
00:41 - same is true for the variables at the
00:42 - top of the scripts this episode i'm
00:44 - going to up my acceleration to two so i
00:46 - can move just a little bit faster as we
00:48 - test our code
00:51 - so as we begin why not save your episode
00:54 - one project as a copy and we'll begin
00:57 - episode 2. okay guys
01:00 - let's get scratching we began this
01:02 - project by drawing our level as a
01:04 - backdrop costume this was a cool way to
01:07 - get fast results and makes for easier
01:10 - scripting but it also has its
01:12 - limitations say we wanted to introduce
01:14 - more color to our level i could for
01:16 - example make each step a different color
01:19 - all too many scratch projects have
01:21 - boring levels without much color because
01:23 - they are limited to using the touching
01:25 - color blocks and we'll soon see why
01:29 - as you can see here none of the steps
01:31 - are counted as part of the level and our
01:34 - player can walk and jump right through
01:36 - them
01:37 - only the floor and the floating
01:38 - platforms are now considered as solid
01:40 - areas to be walked on
01:42 - click into the player sprite and let's
01:44 - look at the define move in step script
01:46 - first can i just note if your project
01:49 - has been lagging just make sure that
01:51 - this custom block was set to run without
01:53 - screen refresh okay
01:56 - so here we are checking for collisions
01:59 - just with the color purple the problem
02:01 - with touching color blocks is that this
02:03 - will only detect collisions with the
02:05 - precise color that is chosen in the
02:07 - color block
02:08 - so if we wanted the player to also
02:10 - collide with another color in our level
02:12 - we need to go ahead and combine the
02:14 - sensing blocks together with an or
02:16 - operator that is we are colliding if we
02:19 - are touching the first color or touching
02:22 - this second color
02:24 - make sure to use the or and not an and
02:26 - operator otherwise a collision would
02:27 - only be detected when the player is
02:29 - touching both the colors at the same
02:31 - time not one or the other that's not
02:34 - what we're after here so we need to
02:35 - duplicate this test into the second
02:37 - check below for vertical collisions 2.
02:40 - let's give it a test
02:42 - now we find we can collide happily with
02:45 - both the floor color and the first
02:47 - step's color
02:48 - but still have two step colors that are
02:50 - uncolliding man so what do we need to
02:54 - add them all
02:55 - you can see why this can become a
02:57 - headache and what's more the more
02:59 - colours we need to detect the slower our
03:01 - project will run well there is an
03:05 - alternative
03:06 - we could switch to using sprite
03:08 - collisions instead of color based
03:10 - collisions this has its advantages a
03:13 - sprite sensing is both considerably
03:15 - faster and allows for any number of
03:17 - colours to be used in a costume without
03:19 - a need for extra checks
03:21 - also unlike with colour sensing blocks
03:24 - sprite collisions are not prone to
03:26 - missing collisions when multiple sprites
03:28 - overlap
03:29 - there are downsides of course as every
03:32 - color will now be solid making it more
03:34 - tricky to design simple one costume
03:36 - levels with colors for lava spikes and
03:39 - other actions but well that's for
03:41 - another episode entirely
03:43 - so let's take the plunge and begin by
03:45 - making a new sprite naming it level
03:49 - then click into the stage backdrop
03:52 - and drag the level costume right across
03:54 - into the new level sprite like
03:58 - so from this point we no longer want
04:01 - this backdrop costume so making sure
04:04 - nothing is selected we can click the
04:06 - delete button to clear the entire
04:07 - backdrop
04:10 - great click back into our new level
04:12 - sprite and oh yes we can click on the
04:15 - first empty costume and delete it
04:18 - leaving us with just the level costume
04:19 - itself
04:21 - move into the code tab
04:23 - so because this level is now a sprite
04:25 - not a backdrop it isn't positioned
04:26 - correctly on the stage
04:28 - we should address that first
04:30 - when green flag clicked
04:33 - go to an x y of 0 0
04:37 - and then for good measure we'll send it
04:39 - behind all the other sprites
04:42 - go to back layer
04:45 - a quick test should show that this color
04:47 - sensing works just as well with sprites
04:49 - as with backgrounds
04:51 - okay in the player sprite find the
04:53 - player sensing blocks
04:55 - now that we have the level drawn as a
04:57 - sprite costume we can substitute all the
05:00 - touching color blocks with a simple
05:02 - touching block
05:03 - and from the drop down choose the level
05:06 - sprite
05:07 - nice this can fully replace both
05:09 - touching colors here and here
05:12 - now this is exciting we've made a quick
05:14 - switch from color to sprite collisions
05:17 - if we run the project this is looking
05:20 - like normal but hey look we are
05:22 - colliding with all the stair colors
05:24 - that's not bad right not bad at all okay
05:27 - so this is the way i want to proceed
05:29 - with the collision detection in the
05:31 - platformer but it doesn't have to be
05:33 - done this way you can choose to keep on
05:35 - using the colour sensing if that suits
05:36 - you better as we continue to enhance
05:39 - this project there will be even more
05:41 - colors and sprites to collide with like
05:43 - moving platforms and other sprite
05:45 - costumes therefore to avoid us making
05:48 - the same checks in many places let's
05:50 - make a custom block naming it check
05:53 - touching solid and make it run without
05:55 - screen refresh
06:00 - using an if else block check if we are
06:03 - touching the level i want this to be the
06:05 - only place that we check for actual
06:07 - collisions in the entire sprite
06:09 - replacing both the other two checks here
06:12 - and replacing any future collision
06:14 - checks too
06:15 - this bit of code will then be the only
06:17 - place we need to update to add new
06:19 - collision sprites or colors to
06:22 - we'll need a new variable
06:25 - name it touching for this sprite only
06:30 - set it to 1 when we are touching the
06:32 - level and zero when we are not
06:41 - so it would be nice if scratch just let
06:43 - us drop this new block into the if
06:45 - condition here but sadly we don't yet
06:48 - have that functionality in scratch a
06:50 - feature many scratches look wistfully
06:52 - forward to
06:53 - anyhow for now drop the new custom block
06:56 - just before the if condition and then we
06:58 - simply check for the variable touching
07:00 - being greater than zero
07:07 - we do the same for the second touching
07:08 - block indeed this will be the pattern we
07:11 - use for all collision checks from now on
07:14 - use the check touching solid block and
07:16 - follow it up with an if touching greater
07:18 - than zero to check for solid collisions
07:20 - between the sprite and the level
07:22 - it would be a good idea to give this a
07:23 - quick test ensure it's all running as
07:26 - expected
07:27 - great
07:29 - before we begin adding more scenes to
07:32 - our level let's look back at the player
07:34 - code from episode one
07:36 - okay nice this is pretty much everything
07:39 - it's concise but it's not very well laid
07:41 - out we have a few long scripts that are
07:44 - doing everything and that will make it
07:46 - hard for us as we continue to build the
07:48 - project up
07:49 - we need to break it up into events and
07:51 - custom blocks with names then in future
07:53 - when i ask to find a certain script i
07:56 - can simply tell you its name and we can
07:58 - find it together
07:59 - let's start with the contents of this
08:01 - forever loop
08:03 - this is our main game loop and the
08:04 - scripts inside run once every frame of
08:07 - the game
08:08 - pop in a broadcast block and make a new
08:11 - message tick player
08:13 - i use the name tick because it reminds
08:15 - me of the ticking of a clock the scripts
08:17 - in this event need to run in just a
08:19 - single tick of the game just a single
08:21 - tiny movement of the player but with 30
08:24 - ticks running every second this produces
08:26 - the game's animation
08:28 - all the scripts we detached here can now
08:30 - be hooked up under a when i receive tick
08:33 - player hat block
08:35 - so now let's split this long tick script
08:37 - into its component parts the first is
08:41 - the check for the jump key the up arrow
08:43 - key in my case
08:44 - make a new custom block naming it
08:46 - controls
08:47 - up and down
08:50 - run without screen refresh
08:54 - these jump scripts can be attached to
08:56 - the define block and then make use of
08:58 - the actual custom block under the tick
09:00 - receiver here
09:02 - next up are the left and right arrow key
09:05 - checks
09:07 - i'll make a similar custom block for
09:08 - these naming it controls left and right
09:13 - again run without screen refresh
09:21 - we'll use this block after the previous
09:23 - one
09:25 - there that's nice it's getting much
09:27 - easier to see what scripts do what
09:29 - okay this last move in steps block can
09:32 - be moved back onto the end
09:34 - now if i just tidy this up
09:36 - uh please note i'm using the scratch
09:38 - add-ons here and it's my scratch dev
09:40 - tools extension that provides us with
09:42 - the clean up blocks plus feature and
09:44 - this keeps the scripts in tidy columns
09:47 - there's a link to the extensions under
09:48 - the video if you don't have it already i
09:50 - know a lot of scratches do
09:52 - oh hold on you see this change speed y
09:54 - block here in the left right control
09:56 - script this should be moved up into the
09:58 - controls up and down script instead as
10:01 - it's to do with movement in the up and
10:03 - down direction
10:04 - is it all working
10:06 - yep
10:07 - excellent
10:09 - okay so scroll to the start of the
10:12 - project
10:13 - the when green flag clicked
10:15 - these first four set blocks are the
10:17 - project settings and everything
10:19 - underneath it is for resetting the level
10:21 - and beginning the game loop
10:23 - we can create a new custom block named
10:25 - reset and begin level however be careful
10:29 - to not tick the run without screen
10:32 - refresh that's right i know it's crazy
10:35 - right but some of the things we do in
10:37 - here don't run over a single game frame
10:40 - bring in the new block and use it here
10:43 - then the rest of the scripts go under
10:45 - the new define block
10:48 - finally we are going to separate off the
10:50 - forever loop itself
10:53 - this time we'll use a broadcast
10:57 - and name it game loop
11:02 - a receiver for this can go above the
11:04 - forever loop like so
11:07 - super that's our code all named and
11:10 - reordered that's much tidier
11:12 - before we continue though we should be
11:14 - good coders and ensure we have truly
11:16 - reset everything in the reset and begin
11:18 - script
11:19 - we should add in a set speed x to zero
11:23 - and also a set falling to 99
11:27 - the reason to set falling to a big
11:29 - number is to ensure we can't jump right
11:31 - away until we have touched the ground
11:35 - okay final test yeah it's always worth
11:38 - ensuring things haven't got broken after
11:40 - all that moving scripts around
11:42 - the scripts are also looking much
11:44 - cleaner
11:45 - i think i might just take this when i
11:48 - receive tick player script up to the top
11:50 - of the second column as it's rather wide
11:53 - it's time finally to make a new screen
11:56 - for our level we want to be able to walk
11:59 - off the right hand side of the level and
12:01 - get to the next screen
12:03 - to do this we'll begin by going to the
12:05 - costume editor of the level sprite
12:10 - duplicate the first costume
12:12 - and now what i want to do is flip the
12:15 - whole screen horizontally left to right
12:18 - that's a really quick way to ensure
12:20 - everything lines up
12:21 - however watch this if we click the flip
12:24 - horizontal button we have a problem
12:27 - scratch flips the entire sprite as
12:29 - expected but it's no longer centered on
12:32 - the canvas see how the extra space on
12:34 - the left and the floor is overlapping on
12:36 - the right bother this is because scratch
12:40 - flips the costume around the costume's
12:42 - middle point not the middle point of the
12:44 - canvas here
12:46 - well don't fret i have a trick to get
12:49 - around this which i use all the time
12:51 - undo that last flip
12:53 - and then select the rectangle tool
12:56 - zooming out and draw the biggest
12:57 - rectangle you can it must be bigger than
13:00 - the costume you are trying to flip
13:02 - next drag the rectangle to ensure it
13:04 - snaps into the middle of the canvas
13:06 - this is a crucial step so don't skip it
13:10 - and now if we select all the objects on
13:12 - the canvas using the selection tool then
13:15 - click the flip horizontal button
13:17 - everything is flipped around the middle
13:19 - of the canvas this time
13:21 - finally unselect everything and then
13:24 - select and delete the big rectangle
13:26 - leaving us just with our flipped level
13:28 - all nicely lined up
13:30 - yay isn't that useful
13:32 - now that we have two screens for our
13:33 - level let's make sure to give the
13:35 - costumes good names
13:37 - this will be important so make sure you
13:40 - write exactly the same as me
13:42 - i'm going to name each one as seen with
13:45 - a capital s
13:46 - and then immediately after that with no
13:48 - space the number one
13:51 - the second costume will be scene two and
13:54 - so on if you want more scenes
13:57 - well done now in the code tab of the
13:59 - level sprite we can add some new scripts
14:02 - to control the changing of these
14:04 - so-called scenes
14:06 - this can be done through a broadcast so
14:09 - when i receive
14:11 - and a new message of change scene would
14:14 - be quite appropriate don't you think
14:16 - when this occurs we switch costumes too
14:19 - and obviously we don't know which to
14:21 - choose but it has to start with the word
14:23 - scene
14:24 - so we'll use a join
14:28 - entering scene on the left but obviously
14:31 - banana is not going to cut it so let's
14:33 - make a new variable named scene and i'll
14:36 - put a hash on the end here that means c
14:38 - number
14:39 - making it for all sprites this time
14:42 - and drop it in the right hand side here
14:45 - this means by setting the scene variable
14:47 - to say 1
14:51 - click it and then clicking the change
14:54 - scene our level will then change scene
14:56 - as appropriate
14:59 - okay enough of that delete it and click
15:01 - into the player sprite
15:05 - find the define reset and begin level
15:07 - script and now we have a scene variable
15:10 - to reset so set it to 1 right at the top
15:14 - but setting this variable alone is not
15:16 - enough we also need to broadcast change
15:18 - scene make sure to do that just before
15:21 - broadcasting game loop so that the level
15:23 - is already when the game begins
15:26 - give it the test and of course i can
15:28 - check that changing the starting scene
15:30 - does in fact change where we begin and
15:33 - it does
15:34 - super
15:35 - but we still can't get to the next level
15:37 - by walking off the right hand edge of
15:39 - the screen so that's next exciting
15:44 - find the when i receive game loop script
15:47 - we already have the broadcast tick
15:49 - player this handles the player's
15:51 - movement
15:52 - we are now going to introduce another
15:54 - event that handles the player moving
15:56 - screens
15:57 - broadcast a new message tick last
16:01 - why last well it's simply because i want
16:04 - this to be the last event broadcast in
16:06 - the game loop before the screen updates
16:08 - simple as that
16:10 - the good thing about putting a list of
16:12 - broadcasts in a loop like this is that
16:14 - they will all get run in one frame
16:16 - together but importantly they get run in
16:19 - the order you broadcast them so this new
16:21 - one will run last
16:26 - so when i receive tick last
16:29 - we'll check for an x position greater
16:31 - than
16:32 - 235
16:34 - yeah 240 is actually the far right of
16:37 - the screen but you may find if your
16:39 - player is too small that they can't go
16:41 - that far off screen so let's stick with
16:43 - 235
16:45 - 5 pixels less
16:47 - what do we do if the player goes off the
16:49 - right
16:50 - well we add one to the scene hash
16:52 - variable using a change scene hash by
16:54 - one then broadcast change scene to make
16:57 - it happen
16:59 - let's give that a test
17:00 - run along and
17:02 - cool yeah the scene has changed in fact
17:05 - the scene number is going a bit haywire
17:07 - but just ignore that for a second what
17:09 - we are really needing to address is that
17:11 - even though the scene changed our player
17:13 - stayed on the right side of the screen
17:15 - but we really would have expected them
17:17 - to appear now on the left
17:20 - we can do that easy enough just set x to
17:22 - minus 235
17:25 - that's right negative two three five the
17:28 - left side of the screen
17:30 - run the project here we go
17:33 - oh man that looked good now we just need
17:36 - a way to be able to do the same to move
17:38 - back onto the first screen again right
17:41 - well no problem at all
17:44 - duplicate the if check
17:46 - and we swap the greater than for a less
17:49 - than
17:50 - and check for when x position is less
17:53 - than negative 235
17:56 - that will be off the left side of the
17:58 - screen
17:59 - then of course we change scene by
18:01 - negative one
18:02 - to make it go to the previous scene
18:04 - number
18:05 - don't forget to also set x to positive
18:08 - 235 to get the player to move to the
18:11 - right hand edge of the screen too run it
18:14 - again off i go to the right and then
18:16 - coming back here we are back at scene
18:19 - one superb this is already a lot of fun
18:23 - so
18:24 - does the fun have to end in just two
18:26 - scenes
18:27 - absolutely not as we go off the right
18:30 - again we enter scene 3
18:32 - but we don't yet have a scene 3 so let's
18:35 - quickly make one
18:36 - click into the level sprite and
18:38 - duplicate costume 2.
18:41 - notice the costume name has been
18:43 - automatically set to scene three so
18:44 - that's rather nice
18:46 - i'll just change this costume around a
18:48 - bit to make it different and then
18:50 - here we go
18:52 - scene one
18:54 - scene two
18:56 - and now scene three wasn't that easy i
18:59 - love it
19:00 - well this has all been smooth sailing
19:02 - thus far
19:04 - what was all the fuss about well i don't
19:06 - know if you've been designing your
19:08 - levels just like me or if you did things
19:10 - your own way
19:11 - it's possible you may have already
19:13 - discovered where things get tricky let
19:15 - me give you a clue i'm back into the
19:18 - level sprite and i'll switch to the
19:20 - second scene remember how we carefully
19:22 - duplicated this costume from the first
19:24 - and flipped it
19:26 - this was very purposeful to ensure that
19:28 - the right hand side of the first scene
19:30 - lined up perfectly with the left hand
19:32 - side of the second scene
19:34 - so what happens if this is not the case
19:38 - let's find out select all the elements
19:40 - on the canvas and move them down by a
19:43 - few pixels
19:44 - do make sure to unselect them before
19:47 - running the project otherwise the arrow
19:49 - keys can keep on changing the position
19:51 - of the selected shapes i hate it when
19:53 - that happens
19:54 - okay moving off the right is no problem
19:57 - at all so how about moving back to scene
19:59 - 1 to our left
20:01 - oh no disaster we have become stuck in
20:05 - the ground
20:06 - do you see why this has happened the
20:08 - floor of scene 2 is now lower than scene
20:10 - 1. when we appear back on the right of
20:13 - scene 1 we are therefore still slightly
20:15 - overlapping the ground this is fatal to
20:18 - our game engine and causes the player to
20:20 - become permanently trapped unable to
20:22 - move
20:23 - very unpleasant and no fun at all for
20:25 - the now very sad player of your
20:27 - otherwise epic game
20:29 - what's more we may not only get stuck in
20:31 - the floor for example if we place a
20:33 - platform here above the ground and then
20:36 - jump across to the next screen ah stuck
20:39 - again
20:41 - so with the second example it's basic
20:44 - good level design that we don't put in
20:46 - unavoidable collisions like this however
20:48 - the first example that is a legitimate
20:50 - problem that we should try to address in
20:52 - code not only because it makes our lives
20:55 - easier when designing levels as we don't
20:57 - have to be pixel perfect at lining up
20:59 - our costumes but also because in scratch
21:01 - nothing is ever pixel perfect when it
21:04 - comes to sprite collision detection so
21:06 - we better be prepared to handle it
21:07 - ourselves
21:09 - what we will do therefore is detect the
21:11 - collisions after changing scenes
21:13 - and then move the player up and down
21:15 - moving further and further away from the
21:17 - original location until we find the
21:19 - closest position where we no longer
21:21 - collide
21:22 - then stop there we are out of the
21:24 - collision simple enough right so let's
21:27 - code that up
21:29 - in the player sprite find the when i
21:31 - receive tick last script
21:33 - so notice we have a bit of repetition
21:36 - here the scripts for moving off the
21:38 - right side of the screen and moving off
21:39 - the left side of the screen are very
21:41 - similar and since we are now going to
21:42 - add more code to these let's make a new
21:45 - custom block to wrap up this
21:47 - functionality naming it begin scene hash
21:50 - with a numeric input of cnhash
21:53 - a text label go to x
21:57 - and another numeric input named x please
22:00 - note we are again not using the run
22:02 - without screen refresh option we mustn't
22:05 - as changing a scene takes more than one
22:07 - frame to complete
22:09 - okay so move the script from one of
22:12 - these ifs into the new custom block
22:13 - definition
22:15 - in its place we put our new block
22:19 - now the scene input needs to be set to
22:21 - the actual scene number we want to move
22:23 - to rather than just a one or minus one
22:26 - this will allow the begin scene block to
22:28 - be used in more ways but it does mean we
22:31 - need to pass in the full scene hash plus
22:34 - one here
22:35 - the x position wants to be the same
22:37 - negative two three five that we had
22:39 - before now let's update the custom block
22:41 - scripts hook up the set x with the pink
22:44 - x input variable
22:47 - but we need to make sure to replace the
22:48 - change scene with a set scene
22:51 - and then set it to the pink scene input
22:54 - variable
22:55 - cool
22:57 - we can duplicate this block for the left
22:59 - hand edge transition
23:03 - setting x to positive 2 3 5
23:07 - and change the one
23:09 - to a negative one
23:12 - quick test
23:16 - yeah it's working just the same so what
23:19 - are we going to do differently this time
23:21 - to check for the player getting stuck
23:24 - firstly we need to ensure to stop the
23:26 - main game loop
23:28 - to do this drop in a stop other scripts
23:30 - in sprite
23:31 - right after the broadcast change scene
23:34 - we can test that
23:36 - and yeah the scene changes and the
23:39 - project has stopped running you can see
23:41 - that because the red stop sign has gone
23:44 - dim
23:44 - the reason we stop things is that we
23:46 - want to check for and fix collisions
23:49 - before the game loop continues to run
23:51 - next i'm going to move the setx block up
23:53 - to before we broadcast the change scene
23:56 - just to make it clear that this occurs
23:58 - before the scene changes
24:00 - okay so we want to check whether the
24:03 - player is now colliding with the level
24:04 - after we change scene right
24:07 - but not so fast when using a broadcast
24:09 - change scene without a wait the event is
24:12 - not actually run right away but instead
24:15 - queued up to run later but we do need it
24:18 - to happen before doing any collision
24:19 - checks so the simplest way is to drop in
24:22 - a wait for zero seconds after the
24:24 - broadcast
24:26 - this way the level will have a moment to
24:28 - update and we are now ready to detect
24:31 - collisions
24:32 - we'll make a new custom block named fix
24:35 - collisions in direction with a numeric
24:38 - input
24:39 - meaning direction
24:40 - this time please do tick the run without
24:43 - screen refresh as this needs to run fast
24:48 - use it right away after the weight block
24:51 - and set the direction the dir to zero
24:54 - this means up as we want it to begin by
24:57 - searching up and down to get out of any
24:59 - collisions
25:00 - finally after the new block remember
25:03 - that we stopped the main game loop so
25:05 - we'll start it up again using a
25:07 - broadcast game loop
25:10 - i think it's worth another quick test to
25:11 - ensure things are still holding together
25:13 - as planned
25:14 - i just need to walk off the screen and
25:16 - yep the game loop is working again but
25:19 - the bug is still not fixed so let's
25:21 - shake things up and get unstuck
25:24 - we're going to be moving turning moving
25:26 - and turning to get the player out of the
25:28 - ground so we'll make a note of the
25:30 - direction they are currently facing by
25:32 - creating a new variable temp that stands
25:35 - for temporary
25:36 - making it for this sprite only
25:39 - and set temp to the player's direction
25:46 - to restore their direction again at the
25:48 - end we'll use a pointing direction
25:51 - temp like that
25:53 - now make another new variable naming it
25:56 - distance for this sprite only
25:59 - this will keep track of how far we
26:01 - should move looking for non-collisions
26:04 - begin by setting it to 1.
26:08 - next we point in direction and use the
26:11 - input variable der
26:13 - this is the direction we want to begin
26:14 - moving in to get unstuck
26:17 - so we are going to need a repeat loop
26:20 - and let's opt for 64 attempts to get
26:23 - free
26:24 - next up before we've even moved anywhere
26:27 - we'll look to see if we're actually
26:29 - colliding with the level
26:32 - use our check touching solid block and
26:35 - then if touching is less than one then
26:37 - no collision is occurring so we are good
26:40 - use that pointing direction temp to
26:42 - restore our direction to what it was
26:44 - before and then stop this script to
26:46 - break out of this repeat loop we are
26:48 - done
26:49 - but if we are still touching we have
26:52 - work to do to get free
26:54 - we move forward by the value of our
26:56 - distance variable that would be one
26:58 - pixel to begin with
27:00 - then we turn around 180 degrees ready to
27:04 - move back and check the opposite side
27:06 - lastly change distance by one so the
27:10 - next time we move we will move further
27:12 - and that's basically it because now this
27:15 - repeat loop will run over and over
27:17 - moving us further each time until the
27:19 - player is no longer colliding or that is
27:22 - until we've tried 64 times
27:25 - without a maximum number of tries we can
27:27 - get into an infinite loop that lags out
27:29 - our scratch project horribly
27:30 - the good news is that we can test this
27:32 - custom block super easily
27:34 - this is really fun so simply position
27:36 - the player overlapping the level like so
27:39 - and click on the custom block
27:41 - now because we ran the custom block by
27:43 - clicking on it it doesn't run without
27:46 - screen refresh so we get to see it in
27:48 - action wiggling up and down further and
27:50 - further until the player is no longer
27:52 - colliding i love it it's so cool
27:55 - and it works for both collisions below
27:57 - and above the player
27:59 - so how does it look when run at full
28:01 - speed
28:02 - just drop in a fixed collision block and
28:04 - test it by clicking that instead
28:07 - pow the player instantly jumps to the
28:09 - surface and as before it works for both
28:12 - upper and lower collisions finding
28:14 - whichever is the nearest free space
28:16 - excellent so we've already plugged this
28:19 - into our begin scene script so we can
28:22 - give this an official test
28:24 - run the project and let's see
28:27 - can we come in from the right now yes we
28:31 - can celebration time this is awesome
28:33 - news i wonder if we can also jump into
28:36 - the floating platform jumping now and
28:39 - yes it appears to be working moving me
28:41 - both up and down as needed
28:44 - yes
28:45 - i guess we might as well hide all these
28:47 - available reporters i'll leave a scene
28:49 - number as that's quite useful to see
28:52 - so just before we finish what would
28:55 - happen if i made a bad level design and
28:58 - blocked the player more severely with a
29:00 - large wall
29:04 - well of course no problem coming in
29:06 - along the ground
29:07 - but jumping and boom i am stuck again
29:12 - well that's quite inevitable bad level
29:14 - design will lead to a bad platformer so
29:17 - do think carefully about where you put
29:19 - your walls
29:20 - however we could still be a little more
29:23 - tolerant of these collisions if we
29:25 - wished
29:26 - simply find the fixed collisions in
29:28 - direction script and up this 64 to a
29:31 - bigger number like 128.
29:34 - now if we test again we find that even
29:37 - this wall is handled in a very
29:38 - acceptable manner
29:41 - another consideration is that we should
29:43 - also need to prevent the player walking
29:45 - off the level to the scenes that don't
29:47 - exist to the far right but also to the
29:49 - far left
29:50 - you see how we get to scene zero to
29:53 - prevent this it might be a good idea to
29:55 - draw in a left hand wall on scene one of
29:58 - your level sprite
30:03 - okay this is just so cool we're creating
30:06 - a whole little world for our guy and it
30:08 - feels so nice to play and to explore
30:11 - now you may be happy with your
30:12 - platformer only changing scenes left and
30:14 - right but in a future episode we'll also
30:17 - look at allowing the scene to change up
30:19 - and down too i'm really looking forward
30:21 - to that as well as all the other super
30:24 - cool features that you see here like
30:26 - animating player costumes wall jumping
30:28 - moving platforms and so much more
30:31 - that sadly is all we have time for today
30:33 - but i do hope you've enjoyed this
30:35 - episode if you have then please squish
30:37 - the like button and if you haven't
30:38 - subscribed yet then you must do so right
30:40 - away we don't want you missing part 3
30:43 - when it comes out do we if you want to
30:45 - support this channel or want to catch
30:47 - episodes early then you can join the
30:49 - channel membership you can also get
30:50 - privatized comments with super cool
30:52 - custom emojis or access to the tutorial
30:55 - scratch projects themselves this channel
30:57 - wouldn't be here without your support so
30:59 - thank you so much and until next time
31:02 - have a great week ahead and scratch on
31:04 - guys

Cleaned transcript:

hello fellow scratchers i'm grifbatch and this is part two of our classic scratch platformer tutorial in which we are aiming to make something pretty special yep just look at this love it and we sure made a strong start last episode building out the basic movement and a clever robust collision detection system today we are going to start fleshing out our level adding multiple scenes to visit and addressing common bugs we scratch his face when things don't quite line up as required just so you know there's no need for you to make your levels exactly the same as mine you are free to design them any way you like and it won't stop you from following this tutorial same is true for the variables at the top of the scripts this episode i'm going to up my acceleration to two so i can move just a little bit faster as we test our code so as we begin why not save your episode one project as a copy and we'll begin episode 2. okay guys let's get scratching we began this project by drawing our level as a backdrop costume this was a cool way to get fast results and makes for easier scripting but it also has its limitations say we wanted to introduce more color to our level i could for example make each step a different color all too many scratch projects have boring levels without much color because they are limited to using the touching color blocks and we'll soon see why as you can see here none of the steps are counted as part of the level and our player can walk and jump right through them only the floor and the floating platforms are now considered as solid areas to be walked on click into the player sprite and let's look at the define move in step script first can i just note if your project has been lagging just make sure that this custom block was set to run without screen refresh okay so here we are checking for collisions just with the color purple the problem with touching color blocks is that this will only detect collisions with the precise color that is chosen in the color block so if we wanted the player to also collide with another color in our level we need to go ahead and combine the sensing blocks together with an or operator that is we are colliding if we are touching the first color or touching this second color make sure to use the or and not an and operator otherwise a collision would only be detected when the player is touching both the colors at the same time not one or the other that's not what we're after here so we need to duplicate this test into the second check below for vertical collisions 2. let's give it a test now we find we can collide happily with both the floor color and the first step's color but still have two step colors that are uncolliding man so what do we need to add them all you can see why this can become a headache and what's more the more colours we need to detect the slower our project will run well there is an alternative we could switch to using sprite collisions instead of color based collisions this has its advantages a sprite sensing is both considerably faster and allows for any number of colours to be used in a costume without a need for extra checks also unlike with colour sensing blocks sprite collisions are not prone to missing collisions when multiple sprites overlap there are downsides of course as every color will now be solid making it more tricky to design simple one costume levels with colors for lava spikes and other actions but well that's for another episode entirely so let's take the plunge and begin by making a new sprite naming it level then click into the stage backdrop and drag the level costume right across into the new level sprite like so from this point we no longer want this backdrop costume so making sure nothing is selected we can click the delete button to clear the entire backdrop great click back into our new level sprite and oh yes we can click on the first empty costume and delete it leaving us with just the level costume itself move into the code tab so because this level is now a sprite not a backdrop it isn't positioned correctly on the stage we should address that first when green flag clicked go to an x y of 0 0 and then for good measure we'll send it behind all the other sprites go to back layer a quick test should show that this color sensing works just as well with sprites as with backgrounds okay in the player sprite find the player sensing blocks now that we have the level drawn as a sprite costume we can substitute all the touching color blocks with a simple touching block and from the drop down choose the level sprite nice this can fully replace both touching colors here and here now this is exciting we've made a quick switch from color to sprite collisions if we run the project this is looking like normal but hey look we are colliding with all the stair colors that's not bad right not bad at all okay so this is the way i want to proceed with the collision detection in the platformer but it doesn't have to be done this way you can choose to keep on using the colour sensing if that suits you better as we continue to enhance this project there will be even more colors and sprites to collide with like moving platforms and other sprite costumes therefore to avoid us making the same checks in many places let's make a custom block naming it check touching solid and make it run without screen refresh using an if else block check if we are touching the level i want this to be the only place that we check for actual collisions in the entire sprite replacing both the other two checks here and replacing any future collision checks too this bit of code will then be the only place we need to update to add new collision sprites or colors to we'll need a new variable name it touching for this sprite only set it to 1 when we are touching the level and zero when we are not so it would be nice if scratch just let us drop this new block into the if condition here but sadly we don't yet have that functionality in scratch a feature many scratches look wistfully forward to anyhow for now drop the new custom block just before the if condition and then we simply check for the variable touching being greater than zero we do the same for the second touching block indeed this will be the pattern we use for all collision checks from now on use the check touching solid block and follow it up with an if touching greater than zero to check for solid collisions between the sprite and the level it would be a good idea to give this a quick test ensure it's all running as expected great before we begin adding more scenes to our level let's look back at the player code from episode one okay nice this is pretty much everything it's concise but it's not very well laid out we have a few long scripts that are doing everything and that will make it hard for us as we continue to build the project up we need to break it up into events and custom blocks with names then in future when i ask to find a certain script i can simply tell you its name and we can find it together let's start with the contents of this forever loop this is our main game loop and the scripts inside run once every frame of the game pop in a broadcast block and make a new message tick player i use the name tick because it reminds me of the ticking of a clock the scripts in this event need to run in just a single tick of the game just a single tiny movement of the player but with 30 ticks running every second this produces the game's animation all the scripts we detached here can now be hooked up under a when i receive tick player hat block so now let's split this long tick script into its component parts the first is the check for the jump key the up arrow key in my case make a new custom block naming it controls up and down run without screen refresh these jump scripts can be attached to the define block and then make use of the actual custom block under the tick receiver here next up are the left and right arrow key checks i'll make a similar custom block for these naming it controls left and right again run without screen refresh we'll use this block after the previous one there that's nice it's getting much easier to see what scripts do what okay this last move in steps block can be moved back onto the end now if i just tidy this up uh please note i'm using the scratch addons here and it's my scratch dev tools extension that provides us with the clean up blocks plus feature and this keeps the scripts in tidy columns there's a link to the extensions under the video if you don't have it already i know a lot of scratches do oh hold on you see this change speed y block here in the left right control script this should be moved up into the controls up and down script instead as it's to do with movement in the up and down direction is it all working yep excellent okay so scroll to the start of the project the when green flag clicked these first four set blocks are the project settings and everything underneath it is for resetting the level and beginning the game loop we can create a new custom block named reset and begin level however be careful to not tick the run without screen refresh that's right i know it's crazy right but some of the things we do in here don't run over a single game frame bring in the new block and use it here then the rest of the scripts go under the new define block finally we are going to separate off the forever loop itself this time we'll use a broadcast and name it game loop a receiver for this can go above the forever loop like so super that's our code all named and reordered that's much tidier before we continue though we should be good coders and ensure we have truly reset everything in the reset and begin script we should add in a set speed x to zero and also a set falling to 99 the reason to set falling to a big number is to ensure we can't jump right away until we have touched the ground okay final test yeah it's always worth ensuring things haven't got broken after all that moving scripts around the scripts are also looking much cleaner i think i might just take this when i receive tick player script up to the top of the second column as it's rather wide it's time finally to make a new screen for our level we want to be able to walk off the right hand side of the level and get to the next screen to do this we'll begin by going to the costume editor of the level sprite duplicate the first costume and now what i want to do is flip the whole screen horizontally left to right that's a really quick way to ensure everything lines up however watch this if we click the flip horizontal button we have a problem scratch flips the entire sprite as expected but it's no longer centered on the canvas see how the extra space on the left and the floor is overlapping on the right bother this is because scratch flips the costume around the costume's middle point not the middle point of the canvas here well don't fret i have a trick to get around this which i use all the time undo that last flip and then select the rectangle tool zooming out and draw the biggest rectangle you can it must be bigger than the costume you are trying to flip next drag the rectangle to ensure it snaps into the middle of the canvas this is a crucial step so don't skip it and now if we select all the objects on the canvas using the selection tool then click the flip horizontal button everything is flipped around the middle of the canvas this time finally unselect everything and then select and delete the big rectangle leaving us just with our flipped level all nicely lined up yay isn't that useful now that we have two screens for our level let's make sure to give the costumes good names this will be important so make sure you write exactly the same as me i'm going to name each one as seen with a capital s and then immediately after that with no space the number one the second costume will be scene two and so on if you want more scenes well done now in the code tab of the level sprite we can add some new scripts to control the changing of these socalled scenes this can be done through a broadcast so when i receive and a new message of change scene would be quite appropriate don't you think when this occurs we switch costumes too and obviously we don't know which to choose but it has to start with the word scene so we'll use a join entering scene on the left but obviously banana is not going to cut it so let's make a new variable named scene and i'll put a hash on the end here that means c number making it for all sprites this time and drop it in the right hand side here this means by setting the scene variable to say 1 click it and then clicking the change scene our level will then change scene as appropriate okay enough of that delete it and click into the player sprite find the define reset and begin level script and now we have a scene variable to reset so set it to 1 right at the top but setting this variable alone is not enough we also need to broadcast change scene make sure to do that just before broadcasting game loop so that the level is already when the game begins give it the test and of course i can check that changing the starting scene does in fact change where we begin and it does super but we still can't get to the next level by walking off the right hand edge of the screen so that's next exciting find the when i receive game loop script we already have the broadcast tick player this handles the player's movement we are now going to introduce another event that handles the player moving screens broadcast a new message tick last why last well it's simply because i want this to be the last event broadcast in the game loop before the screen updates simple as that the good thing about putting a list of broadcasts in a loop like this is that they will all get run in one frame together but importantly they get run in the order you broadcast them so this new one will run last so when i receive tick last we'll check for an x position greater than 235 yeah 240 is actually the far right of the screen but you may find if your player is too small that they can't go that far off screen so let's stick with 235 5 pixels less what do we do if the player goes off the right well we add one to the scene hash variable using a change scene hash by one then broadcast change scene to make it happen let's give that a test run along and cool yeah the scene has changed in fact the scene number is going a bit haywire but just ignore that for a second what we are really needing to address is that even though the scene changed our player stayed on the right side of the screen but we really would have expected them to appear now on the left we can do that easy enough just set x to minus 235 that's right negative two three five the left side of the screen run the project here we go oh man that looked good now we just need a way to be able to do the same to move back onto the first screen again right well no problem at all duplicate the if check and we swap the greater than for a less than and check for when x position is less than negative 235 that will be off the left side of the screen then of course we change scene by negative one to make it go to the previous scene number don't forget to also set x to positive 235 to get the player to move to the right hand edge of the screen too run it again off i go to the right and then coming back here we are back at scene one superb this is already a lot of fun so does the fun have to end in just two scenes absolutely not as we go off the right again we enter scene 3 but we don't yet have a scene 3 so let's quickly make one click into the level sprite and duplicate costume 2. notice the costume name has been automatically set to scene three so that's rather nice i'll just change this costume around a bit to make it different and then here we go scene one scene two and now scene three wasn't that easy i love it well this has all been smooth sailing thus far what was all the fuss about well i don't know if you've been designing your levels just like me or if you did things your own way it's possible you may have already discovered where things get tricky let me give you a clue i'm back into the level sprite and i'll switch to the second scene remember how we carefully duplicated this costume from the first and flipped it this was very purposeful to ensure that the right hand side of the first scene lined up perfectly with the left hand side of the second scene so what happens if this is not the case let's find out select all the elements on the canvas and move them down by a few pixels do make sure to unselect them before running the project otherwise the arrow keys can keep on changing the position of the selected shapes i hate it when that happens okay moving off the right is no problem at all so how about moving back to scene 1 to our left oh no disaster we have become stuck in the ground do you see why this has happened the floor of scene 2 is now lower than scene 1. when we appear back on the right of scene 1 we are therefore still slightly overlapping the ground this is fatal to our game engine and causes the player to become permanently trapped unable to move very unpleasant and no fun at all for the now very sad player of your otherwise epic game what's more we may not only get stuck in the floor for example if we place a platform here above the ground and then jump across to the next screen ah stuck again so with the second example it's basic good level design that we don't put in unavoidable collisions like this however the first example that is a legitimate problem that we should try to address in code not only because it makes our lives easier when designing levels as we don't have to be pixel perfect at lining up our costumes but also because in scratch nothing is ever pixel perfect when it comes to sprite collision detection so we better be prepared to handle it ourselves what we will do therefore is detect the collisions after changing scenes and then move the player up and down moving further and further away from the original location until we find the closest position where we no longer collide then stop there we are out of the collision simple enough right so let's code that up in the player sprite find the when i receive tick last script so notice we have a bit of repetition here the scripts for moving off the right side of the screen and moving off the left side of the screen are very similar and since we are now going to add more code to these let's make a new custom block to wrap up this functionality naming it begin scene hash with a numeric input of cnhash a text label go to x and another numeric input named x please note we are again not using the run without screen refresh option we mustn't as changing a scene takes more than one frame to complete okay so move the script from one of these ifs into the new custom block definition in its place we put our new block now the scene input needs to be set to the actual scene number we want to move to rather than just a one or minus one this will allow the begin scene block to be used in more ways but it does mean we need to pass in the full scene hash plus one here the x position wants to be the same negative two three five that we had before now let's update the custom block scripts hook up the set x with the pink x input variable but we need to make sure to replace the change scene with a set scene and then set it to the pink scene input variable cool we can duplicate this block for the left hand edge transition setting x to positive 2 3 5 and change the one to a negative one quick test yeah it's working just the same so what are we going to do differently this time to check for the player getting stuck firstly we need to ensure to stop the main game loop to do this drop in a stop other scripts in sprite right after the broadcast change scene we can test that and yeah the scene changes and the project has stopped running you can see that because the red stop sign has gone dim the reason we stop things is that we want to check for and fix collisions before the game loop continues to run next i'm going to move the setx block up to before we broadcast the change scene just to make it clear that this occurs before the scene changes okay so we want to check whether the player is now colliding with the level after we change scene right but not so fast when using a broadcast change scene without a wait the event is not actually run right away but instead queued up to run later but we do need it to happen before doing any collision checks so the simplest way is to drop in a wait for zero seconds after the broadcast this way the level will have a moment to update and we are now ready to detect collisions we'll make a new custom block named fix collisions in direction with a numeric input meaning direction this time please do tick the run without screen refresh as this needs to run fast use it right away after the weight block and set the direction the dir to zero this means up as we want it to begin by searching up and down to get out of any collisions finally after the new block remember that we stopped the main game loop so we'll start it up again using a broadcast game loop i think it's worth another quick test to ensure things are still holding together as planned i just need to walk off the screen and yep the game loop is working again but the bug is still not fixed so let's shake things up and get unstuck we're going to be moving turning moving and turning to get the player out of the ground so we'll make a note of the direction they are currently facing by creating a new variable temp that stands for temporary making it for this sprite only and set temp to the player's direction to restore their direction again at the end we'll use a pointing direction temp like that now make another new variable naming it distance for this sprite only this will keep track of how far we should move looking for noncollisions begin by setting it to 1. next we point in direction and use the input variable der this is the direction we want to begin moving in to get unstuck so we are going to need a repeat loop and let's opt for 64 attempts to get free next up before we've even moved anywhere we'll look to see if we're actually colliding with the level use our check touching solid block and then if touching is less than one then no collision is occurring so we are good use that pointing direction temp to restore our direction to what it was before and then stop this script to break out of this repeat loop we are done but if we are still touching we have work to do to get free we move forward by the value of our distance variable that would be one pixel to begin with then we turn around 180 degrees ready to move back and check the opposite side lastly change distance by one so the next time we move we will move further and that's basically it because now this repeat loop will run over and over moving us further each time until the player is no longer colliding or that is until we've tried 64 times without a maximum number of tries we can get into an infinite loop that lags out our scratch project horribly the good news is that we can test this custom block super easily this is really fun so simply position the player overlapping the level like so and click on the custom block now because we ran the custom block by clicking on it it doesn't run without screen refresh so we get to see it in action wiggling up and down further and further until the player is no longer colliding i love it it's so cool and it works for both collisions below and above the player so how does it look when run at full speed just drop in a fixed collision block and test it by clicking that instead pow the player instantly jumps to the surface and as before it works for both upper and lower collisions finding whichever is the nearest free space excellent so we've already plugged this into our begin scene script so we can give this an official test run the project and let's see can we come in from the right now yes we can celebration time this is awesome news i wonder if we can also jump into the floating platform jumping now and yes it appears to be working moving me both up and down as needed yes i guess we might as well hide all these available reporters i'll leave a scene number as that's quite useful to see so just before we finish what would happen if i made a bad level design and blocked the player more severely with a large wall well of course no problem coming in along the ground but jumping and boom i am stuck again well that's quite inevitable bad level design will lead to a bad platformer so do think carefully about where you put your walls however we could still be a little more tolerant of these collisions if we wished simply find the fixed collisions in direction script and up this 64 to a bigger number like 128. now if we test again we find that even this wall is handled in a very acceptable manner another consideration is that we should also need to prevent the player walking off the level to the scenes that don't exist to the far right but also to the far left you see how we get to scene zero to prevent this it might be a good idea to draw in a left hand wall on scene one of your level sprite okay this is just so cool we're creating a whole little world for our guy and it feels so nice to play and to explore now you may be happy with your platformer only changing scenes left and right but in a future episode we'll also look at allowing the scene to change up and down too i'm really looking forward to that as well as all the other super cool features that you see here like animating player costumes wall jumping moving platforms and so much more that sadly is all we have time for today but i do hope you've enjoyed this episode if you have then please squish the like button and if you haven't subscribed yet then you must do so right away we don't want you missing part 3 when it comes out do we if you want to support this channel or want to catch episodes early then you can join the channel membership you can also get privatized comments with super cool custom emojis or access to the tutorial scratch projects themselves this channel wouldn't be here without your support so thank you so much and until next time have a great week ahead and scratch on guys
