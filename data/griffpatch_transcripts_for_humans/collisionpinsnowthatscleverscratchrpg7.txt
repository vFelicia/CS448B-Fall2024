With timestamps:

00:00 - foreign
00:02 - [Music]
00:04 - scratchers Collision points just what
00:08 - are they well we are back for another
00:10 - captivating episode of our epic RPG
00:12 - series and at last we are going to work
00:15 - on adding Collision detection for our
00:17 - players and about time I hear you say
00:20 - but I have been putting this off for a
00:22 - good reason for simple tile sets we can
00:25 - assume each tile is either solid or not
00:27 - and that makes Collision detection real
00:29 - easy but not so or are more complex tile
00:33 - set for example some tiles are half a
00:36 - block wide and that Collision looks
00:39 - awful but worse than this we even have
00:42 - some pixel wide Dividing Walls oh man we
00:46 - need a more elegant solution now if you
00:49 - want to know more about my thought
00:50 - process then go back and watch my RPG
00:52 - devlog episode 2 but essentially I
00:55 - decided upon a cunning Collision system
00:57 - using nine collider pins we Define which
01:01 - bins are solid for each tile costume
01:02 - room and since the player is wider than
01:05 - the distance between pins we cannot pass
01:07 - between them but they can walk right up
01:11 - close to either side just perfect for
01:14 - our game
01:16 - to store this Collision metadata we
01:18 - label solid pins as one and non-solid as
01:21 - zero before working from left to right
01:24 - and then bottom to top combining them
01:26 - into a nine digit value this is our
01:30 - Collision pin value and they can be
01:32 - easily stored in a new tile pin list one
01:36 - row per tile costume enabling fast
01:38 - lookup for each tile as we look for
01:41 - collisions
01:42 - the next question is do we want to enter
01:44 - all these Collision values by hand well
01:47 - of course not there's over 500 tile
01:49 - costumes in our game man so stay tuned
01:52 - because we are going to be coding up yet
01:55 - another super awesome enhancement to our
01:58 - level editor to let us speedily draw our
02:00 - Collision pins directly in our game this
02:04 - is just too cool so what are we waiting
02:07 - for let's get scratching
02:10 - We Begin from where we left off in
02:13 - episode 6 making sure to save the
02:15 - project as a new copy for this is
02:19 - episode seven
02:21 - now let's start by making a new list to
02:24 - hold the tile Collision pin values
02:27 - we'll name it tile pins making it for
02:31 - all Sprites as all Sprites will need to
02:33 - check for collisions
02:35 - so in theory if we were doing this all
02:37 - by hand we could identify the first tile
02:40 - costume number in our costume editor
02:42 - that's costume number 20 and then in our
02:45 - new list add rows down to the
02:48 - corresponding item 20.
02:52 - we enter the Collision string one zero
02:55 - zero one zero zero one one
02:59 - and that would be that not so hard huh
03:01 - but times that by 500 costumes and it
03:04 - would take us a very long time and would
03:07 - be even harder to track down our
03:09 - mistakes yep we're bound to make them
03:12 - so let's hide that list for the time
03:14 - being and we'll focus on making the
03:16 - Collision pin editor okay make sure you
03:19 - are in the tiles Sprite now and we want
03:22 - a way to toggle the Collision pin editor
03:25 - on and off so make a new variable naming
03:28 - it palette meta editor for this Sprite
03:32 - only hold on what does meta mean well
03:35 - metadata is any data that is information
03:37 - that describes something about another
03:40 - bit of data and this list will contain
03:43 - Collision data describing our tile
03:45 - costumes
03:46 - so set palette meta Editor to zero right
03:50 - when the green flag is clicked then to
03:52 - toggle it on and off when key pressed
03:55 - and we'll use the P key for palette do
04:00 - you think we'll remember all these key
04:01 - codes though now we'll toggle the value
04:04 - by setting palette and meta to one
04:06 - subtract the palette meta editor
04:11 - cool feel free to press that P key right
04:14 - now and just confirm it is toggling on
04:16 - and off between 1 and 0.
04:19 - yes super good job little variable next
04:23 - up we'll want to paint the Collision
04:25 - pins themselves overlaying them upon our
04:28 - existing tiles in the palette for this
04:31 - we can find the Define paint palette
04:34 - now if we just scroll down until we find
04:37 - the second stamp which is after we
04:39 - switch to costume gidx here and remember
04:42 - gidx is both the grid position in the
04:44 - palette and the costume number since
04:47 - they are laid out one after the other
04:49 - sequentially
04:50 - so after stamping the tile costume we
04:53 - want to draw the pin on top
04:56 - let's make a new custom block for this
04:57 - naming it draw Collision pins
05:01 - and we're going to have two inputs X and
05:04 - Y
05:05 - tick to run without screen refresh and
05:07 - then click ok
05:09 - but we only want to draw these pins when
05:12 - the meta editor is enabled with that P
05:15 - key if palette meta editor is greater
05:19 - than
05:20 - zero
05:21 - then and drop in the new draw Collision
05:25 - pin block
05:27 - the X and Y we can just borrow from the
05:29 - current X position and Y position of
05:32 - this Sprite
05:33 - I'll explain why we need these later
05:36 - cool we just dropped that right in after
05:39 - we stamp the tile costume in the palette
05:41 - and now to draw some pins how exciting
05:45 - we'll start simple a single Central pin
05:48 - for each tile and we'll use the pen to
05:51 - do it set the pen size to 5 pixels
05:55 - and set pen color to Pure White
05:59 - okay
06:00 - then to paint a perfect circle simply
06:03 - use the pen down and the pen up just
06:06 - like jabbing the paper with a felt tip
06:08 - pen in theory that should do the trick
06:11 - so smash that green flag and then with
06:14 - the level editor open tap the P key to
06:16 - enable the palette meta editor and there
06:19 - we go a perfect white dot should have
06:22 - appeared at the center of each tile in
06:24 - the palette a brilliant start and they
06:26 - are easily toggled on and off with the
06:28 - same P key with that success we can try
06:31 - to expand this to draw a small grid of
06:34 - three by three pins per costume that's
06:36 - nine pins each we've created plenty of
06:39 - grid bass Loops by now so this should
06:41 - feel very familiar so separate off the
06:43 - set color and Pen down and up scripts
06:46 - first we'll need them soon enough
06:48 - we want to begin drawing the first of
06:51 - our nine pins offset below and the left
06:54 - changing X by negative 11 which is a
06:57 - good value and change y also by negative
07:01 - 11.
07:02 - that's just around a third of a tile
07:04 - width
07:06 - now we Loop repeating for three rows of
07:09 - pins and again for three pins in each
07:12 - row or columns if you will then in our
07:16 - Loop we do the drawing so drop those
07:18 - scripts back in there
07:19 - we just need to ensure after drawing
07:22 - each pin that we move on to the next pin
07:25 - position change X by positive 11 pixels
07:30 - then once a full row is complete we need
07:32 - to move up a row but not before we reset
07:36 - back to the First Column again to do
07:39 - this we change X by and this could be
07:41 - negative 11 multiply by 3 because we've
07:43 - done it three times and that will be
07:45 - negative 33 right
07:48 - then we can change y by R11 to move up
07:51 - to the next pin above sweet are we done
07:55 - not quite because after moving the
07:57 - Sprite in this script we must ensure to
08:00 - return it to where it was before this
08:01 - script ran otherwise the Sprite palette
08:04 - will not continue to paint correctly
08:06 - so go to x y
08:08 - and luckily we had the forethought to
08:11 - pass the starting position of the Sprite
08:13 - in as inputs X and Y when we created a
08:16 - custom block how thoughtful drop the X
08:19 - and Y into the go to X Y block at the
08:22 - bottom of this script Splendid because
08:24 - now we get to test smash that green flag
08:28 - and press P had wow look at all those
08:32 - funky white dots these will be perfect
08:34 - for visualizing our Collision pins don't
08:37 - you think and we can still scroll around
08:39 - the palette to get access to all the
08:41 - other tiles cool let's move on next we
08:46 - Define a collision pin string making a
08:49 - new variable naming it pin string for
08:52 - this Sprite only
08:54 - and let's push some random pins into
08:56 - this set pinstring to
08:59 - one zero one zero one zero one zero one
09:03 - that should be nine pin digits in total
09:06 - do this before we start moving the
09:09 - Sprite into position up here
09:11 - now as we loop around in these repeat
09:14 - Loops we need to keep track of which
09:16 - digit or letter of the pin string we
09:19 - have reached so another new variable and
09:23 - name this one I for integer
09:26 - we'll Begin by setting I to 1. for the
09:29 - first letter of the pin string
09:33 - and we move on to the next letter using
09:36 - the change I by 1.
09:39 - before we loop around again down here
09:42 - perfect that will loop from 1 up to nine
09:45 - as we progress through all the pins
09:48 - this script is getting a bit long though
09:50 - so I'm going to pull out the pin
09:53 - painting from the repeat loops make a
09:55 - new custom block naming it draw pin of
09:59 - type with the input type
10:02 - and run without screen refresh
10:05 - this will replace these pen scripts but
10:08 - make sure to leave the change X and the
10:10 - change I variable in the repeat Loop
10:13 - next place a call to draw pin type back
10:17 - in the loop before the change X like so
10:21 - but now we need the individual pin
10:24 - values from the pin string that would be
10:26 - a 0 or a one how do we get a single
10:29 - letter from a variable well using the
10:32 - letter of block of course the letter we
10:34 - want is given by our new I variable one
10:37 - through nine and it's coming from the
10:40 - pin string variable yeah I'm liking that
10:44 - so each of the ones and zeros will now
10:47 - be passed one at a time through to our
10:49 - pin drawing script over on the right
10:51 - we just need to distinguish which type
10:53 - it is a one or zero and change the color
10:56 - appropriately
10:57 - if else putting the pen down and up
11:00 - blocks underneath
11:02 - the set pen color then goes inside the
11:05 - if okay so our condition is whether the
11:08 - pin type is firstly a one
11:11 - a solid pin
11:16 - and I'm opting for a nice sky blue to
11:19 - represent a solid pin the else is for
11:23 - non-solid Pins just a placeholder really
11:25 - but it's important we can still see it
11:27 - so set the color to white
11:30 - so how is this coming along hey take a
11:33 - look at this it's working great our
11:36 - simple pin pattern one zero one zero one
11:38 - zero one zero one has made a lattice of
11:40 - blue and white circles but I feel that
11:43 - the white circles are too solid looking
11:45 - we need to ghost them out drop a set pen
11:49 - transparency to
11:54 - and whap it right up to 90 percent
11:57 - okay yes that's more like it it's
12:00 - obvious now which pins are on and which
12:02 - pins are off solid and not solid we can
12:06 - have some fun with this now testing out
12:07 - different pin combinations by changing
12:09 - the ones and zeros in our pin string
12:11 - variable yeah that's really fun I love
12:15 - playing around with that but our goal is
12:17 - to feed these pins from the tile pin
12:19 - list we created right back at the start
12:21 - of the episode
12:23 - no problem replace that fixed string
12:26 - with an item of list block switching it
12:30 - to the tile pin list and the item number
12:33 - of this tile costume if you remember
12:34 - that is stored in the grid index gidx
12:38 - variable right starting at 20 and
12:40 - counting up for each costume in our tile
12:42 - palette
12:43 - so this is interesting bring back up the
12:47 - tiles pin list
12:49 - see where we ended a pin string for
12:51 - costume 20. so if we run the project and
12:54 - press P would you look at that there is
12:58 - our manually entered Collision pin
13:00 - string represented as colored pins that
13:03 - is really funky shall we try adding a
13:05 - new one for costume 22. it only
13:08 - registers when you click out of the list
13:10 - there you go this is So Meta awesome
13:14 - work as you can imagine now that we can
13:17 - visualize our pin layouts we could just
13:19 - go through each costume and enter the
13:21 - pin strings by hand matching them to the
13:23 - costume Collision boundaries but there
13:25 - are still a whole lot of them to go
13:27 - through so instead we'll make it
13:29 - possible to toggle these pins right here
13:31 - in the editor too
13:34 - before we continue though let's clear
13:36 - down the entire tile pin list using a
13:40 - delete all of tile pins careful not to
13:43 - accidentally delete your grid list
13:45 - otherwise goodbye level
13:48 - if you ever did do that you'll just need
13:51 - to pop into the level store Sprite and
13:53 - run the new level script by hand to
13:56 - start up a new Fresh level
13:59 - brilliant find the draw pin of type
14:02 - block
14:03 - and as we draw each pin we can now check
14:06 - whether the user is trying to toggle it
14:08 - on or off with a key press
14:10 - if
14:12 - how close is the mouse to this pin
14:14 - distance to Mouse pointer
14:17 - if it's less than 5.5 that's half the
14:20 - distance between pins 11 divided by two
14:23 - then we know our Mouse is over this pin
14:27 - so if else and check for a key press
14:31 - the number one one for a solid pin right
14:35 - now actually setting pins is not super
14:39 - straightforward so let's make a new
14:42 - custom block set pin with an input of
14:46 - pin hash pin number that'll be the pin
14:49 - number from one to nine
14:51 - followed by the label of tile
14:54 - with the input tile hash that'll be the
14:58 - costume number of our tile
15:00 - followed by the label 2 and a final
15:04 - input of value
15:06 - which will be either a one or zero for
15:08 - the time being wow that was a long one
15:11 - hit run without screen refresh and we
15:14 - can script this baby up
15:17 - first though let's put it in place
15:20 - the pin number is given by the available
15:23 - I
15:28 - the tile costume is grid index gidx
15:32 - and the value we are setting the PIN to
15:34 - well this is the one key right so set it
15:37 - to one
15:39 - great so what if we want to set it back
15:41 - to zero sadly we can't use a zero key as
15:45 - that turns the level editor on and off
15:47 - instead then we'll use the X key like a
15:51 - delete or remove key and we set the PIN
15:53 - to zero
15:55 - and this is where things get interesting
15:57 - firstly we are asking to change the pin
16:00 - layout for the tile costume tile hash
16:02 - now assume tile hash is tile number 20.
16:06 - what if our list doesn't have 20 items
16:09 - in it yet we can't update a row that
16:11 - doesn't exist so we need to fill the
16:14 - list with rows first to do this we
16:17 - repeat and we use a subtract starting at
16:21 - the number of items that we require
16:22 - that's given by the input variable tile
16:25 - hash and in our example that's 20 so we
16:28 - subtract from that the number of items
16:30 - already in the pin list right now that's
16:33 - zero so this would Loop 20 minus zero
16:35 - that's a full 20 times great so add to
16:39 - the tile pins list 20 times
16:41 - but careful now the value we add should
16:45 - be a string of nine zeros one two three
16:48 - four five six seven eight nine zeros
16:51 - careful to get the right amount exactly
16:53 - nine okay shall we give that a test to
16:57 - confirm use a new set pin block setting
17:01 - pin one
17:02 - of tile 20 to the value 1.
17:06 - the tile pin list starts empty and after
17:09 - we click the test set pin block voila we
17:13 - now have that required 20th item ready
17:15 - to update its pins
17:18 - let's pull out item 20 and take a look
17:21 - set pen string
17:25 - to item of
17:28 - the list tile pins
17:31 - and we want the item given by tile hash
17:33 - that's item 20.
17:36 - run that test again clicking the set pin
17:39 - of tile 20 again and now the pin string
17:42 - variable should be reporting all zeros
17:45 - yeah brilliant this is the PIN string we
17:49 - want to update but hold the phone this
17:53 - next step is the tricky bit how do we
17:56 - change one digit of this string value
17:58 - without affecting the other digits
18:01 - well there's a number of ways but let me
18:04 - show you my favorite
18:06 - We Begin by splitting the letters up
18:09 - into yet another new list naming it
18:12 - split for this Sprite only
18:15 - start with it blank deleting all of
18:18 - split
18:19 - and then repeat
18:21 - looping through all nine digits of pin
18:24 - string we want to add each letter of
18:26 - pinstring to the new list name split
18:31 - and we know to get the digits out we'll
18:33 - need to use a letter of
18:35 - and drop in the pin string
18:39 - but which letter do we begin with it
18:42 - should start with one and then go on to
18:45 - two three four Etc we could use a new
18:48 - variable but think about this the
18:52 - current length of the split list is zero
18:56 - right because it's empty so zero plus
18:58 - one gives us one and that is the first
19:01 - letter of pen string now once we've
19:05 - added this letter to the split list we
19:08 - repeat around for a second letter how
19:11 - many items are now in the split list
19:12 - that's right one since we just added it
19:16 - so length is now one and one plus one is
19:19 - two so we get the second letter added to
19:22 - split and this repeats each time around
19:26 - adding the next letter until all nine
19:28 - digits are added to our split list shall
19:32 - we see that in action click the test
19:34 - script again and ta-da we have all nine
19:37 - digits split out into our split list
19:40 - well at least it looks like it but it's
19:43 - hard to tell because these are all zeros
19:45 - anyway so for now you'll just have to
19:46 - take my word for it but why did I go to
19:49 - the bother of putting all these digits
19:51 - into a new list shall I show you a
19:54 - really funky scratch feature tell me in
19:57 - the comments if this was new to you drag
19:59 - out the list reporter itself into your
20:01 - project and try clicking it to see its
20:04 - value
20:05 - well this is showing as a single nine
20:08 - digit value again even though we are
20:10 - looking at the value of our list now
20:13 - usually list report items separated by
20:15 - spaces but under the special
20:17 - circumstance where every item in the
20:19 - list is one digit long
20:21 - instead it Returns the list as a single
20:25 - value without spaces and this is Mega
20:28 - useful for putting string values back
20:31 - together again
20:32 - right then we get ahead of ourselves
20:35 - though first we must actually update the
20:38 - pin luckily that's easy replace item of
20:41 - the split list and the pin number we are
20:44 - changing is given by the input pin hash
20:47 - the value we are setting to is given by
20:50 - the input value
20:52 - nice that gives us a chance to test our
20:55 - script again and now we should be able
20:57 - to confirm that it does actually replace
20:59 - item 1 in our split list with a 1 as
21:02 - requested that's great news and it means
21:05 - that if we now click the split list
21:07 - reporter again and there you see the
21:10 - first pin has changed to a one really
21:13 - useful indeed
21:14 - all that's left then is to stuff the
21:17 - updated pin value back into our tile pin
21:19 - list to store away that important
21:21 - metadata replace item for item number
21:25 - tile hash that's our tile costume of the
21:29 - tile pins list of course with and this
21:32 - is my favorite bit the list reporter
21:34 - split yes you really can use lists like
21:38 - that
21:39 - watch what happens when we run our test
21:41 - script now tile pins item 20 is all
21:45 - zeros but after running the script now
21:48 - pin one of item 20 is set to 1. let's
21:52 - try that setting pin three to one
21:54 - instead click and look now both pins one
21:58 - and three of item 20 are set
22:01 - want to reset pin 3 back to zero it's
22:03 - easy
22:04 - see how about pin three of item 21 201
22:09 - that's a new item entirely click looking
22:12 - down in the list and there it is just
22:15 - pin three of item 21. isn't that an
22:18 - awesome little script that we've put
22:19 - together
22:21 - so guys what are we waiting for if this
22:25 - is correct then we should be able to run
22:27 - the project and actually see these pins
22:29 - being changed in the level editor
22:31 - remembering to click P to see our pins
22:33 - yes there they are I should be able to
22:37 - inject new pins in real time by simply
22:39 - changing the set pin test script and
22:42 - clicking it
22:43 - that is fun a new PIN at Pin five
22:47 - but you know if I just hide all these
22:50 - available reporters don't forget that
22:53 - before coding up the set pin script we
22:55 - already coded up the key presses to
22:58 - allow us to change pins in the level
23:00 - editor So in theory with all the pins
23:03 - showing we just need to hover over a pin
23:06 - and press the one key oh my gosh would
23:10 - you look at that oh oops um what I
23:14 - didn't anticipate is that I already use
23:16 - the one key to toggle layers in the
23:19 - editor yeah oops I'll fix that in a
23:22 - moment in the meantime enjoy pressing X
23:25 - to remove a pin
23:27 - Splendid this is working brilliantly
23:30 - right let's address the key binding
23:33 - issue the easiest solution is to prevent
23:36 - the changing of layers while the meta
23:38 - editor is enabled
23:40 - so find the when one key pressed
23:43 - yeah this uses the set layer block from
23:46 - down here so we can disable this from
23:48 - there
23:49 - just surround this inner if else with a
23:52 - new if
23:54 - and check if
23:56 - pallet meta editor is less than
24:00 - one
24:02 - and with the pin editor active pressing
24:05 - one now doesn't switch layers any longer
24:08 - cool until I press the P again and then
24:11 - switching layers is active once more
24:13 - that's great because that actually means
24:17 - as the outro music begins we are finally
24:20 - free to start laying down our official
24:22 - Collision pins and it's so easy holding
24:25 - down one to draw a solid row of pins an
24:28 - X to tidy up any mistakes
24:31 - in our next RPG episode we will actually
24:34 - add in the player to tile pin Collision
24:36 - scripts so if you haven't subscribed to
24:39 - this channel yet do it now so you can
24:41 - get alerted as soon as the video comes
24:43 - out yeah check the notification Bell and
24:46 - all also if you haven't given this video
24:48 - a thumbs up then please do smash that
24:51 - like button now as it makes all the
24:53 - difference to getting my videos seen by
24:55 - other fellow scratchers thank you so
24:57 - much there's been a lot of interest in
24:59 - my early access membership of late and
25:01 - that's no surprise as members get to see
25:03 - my videos early not only getting the
25:06 - chance to get ahead of the game but also
25:08 - having added perks like priority replies
25:10 - to comments and custom Channel Emoji for
25:13 - those of you who are teachers or
25:14 - Educators please consider supporting my
25:16 - channel too either through patreon or by
25:19 - becoming an inner circle member of this
25:21 - channel it's a small price to pay for
25:23 - the work I put in and you get the
25:25 - bonuses of access to my finished
25:26 - projects
25:28 - and that is it from me today I hope
25:30 - you've enjoyed the video and I look
25:32 - forward to seeing you next time until
25:34 - then have a great week ahead and scratch
25:37 - on guys
25:39 - [Music]
25:46 - [Music]
26:02 - thank you

Cleaned transcript:

foreign scratchers Collision points just what are they well we are back for another captivating episode of our epic RPG series and at last we are going to work on adding Collision detection for our players and about time I hear you say but I have been putting this off for a good reason for simple tile sets we can assume each tile is either solid or not and that makes Collision detection real easy but not so or are more complex tile set for example some tiles are half a block wide and that Collision looks awful but worse than this we even have some pixel wide Dividing Walls oh man we need a more elegant solution now if you want to know more about my thought process then go back and watch my RPG devlog episode 2 but essentially I decided upon a cunning Collision system using nine collider pins we Define which bins are solid for each tile costume room and since the player is wider than the distance between pins we cannot pass between them but they can walk right up close to either side just perfect for our game to store this Collision metadata we label solid pins as one and nonsolid as zero before working from left to right and then bottom to top combining them into a nine digit value this is our Collision pin value and they can be easily stored in a new tile pin list one row per tile costume enabling fast lookup for each tile as we look for collisions the next question is do we want to enter all these Collision values by hand well of course not there's over 500 tile costumes in our game man so stay tuned because we are going to be coding up yet another super awesome enhancement to our level editor to let us speedily draw our Collision pins directly in our game this is just too cool so what are we waiting for let's get scratching We Begin from where we left off in episode 6 making sure to save the project as a new copy for this is episode seven now let's start by making a new list to hold the tile Collision pin values we'll name it tile pins making it for all Sprites as all Sprites will need to check for collisions so in theory if we were doing this all by hand we could identify the first tile costume number in our costume editor that's costume number 20 and then in our new list add rows down to the corresponding item 20. we enter the Collision string one zero zero one zero zero one one and that would be that not so hard huh but times that by 500 costumes and it would take us a very long time and would be even harder to track down our mistakes yep we're bound to make them so let's hide that list for the time being and we'll focus on making the Collision pin editor okay make sure you are in the tiles Sprite now and we want a way to toggle the Collision pin editor on and off so make a new variable naming it palette meta editor for this Sprite only hold on what does meta mean well metadata is any data that is information that describes something about another bit of data and this list will contain Collision data describing our tile costumes so set palette meta Editor to zero right when the green flag is clicked then to toggle it on and off when key pressed and we'll use the P key for palette do you think we'll remember all these key codes though now we'll toggle the value by setting palette and meta to one subtract the palette meta editor cool feel free to press that P key right now and just confirm it is toggling on and off between 1 and 0. yes super good job little variable next up we'll want to paint the Collision pins themselves overlaying them upon our existing tiles in the palette for this we can find the Define paint palette now if we just scroll down until we find the second stamp which is after we switch to costume gidx here and remember gidx is both the grid position in the palette and the costume number since they are laid out one after the other sequentially so after stamping the tile costume we want to draw the pin on top let's make a new custom block for this naming it draw Collision pins and we're going to have two inputs X and Y tick to run without screen refresh and then click ok but we only want to draw these pins when the meta editor is enabled with that P key if palette meta editor is greater than zero then and drop in the new draw Collision pin block the X and Y we can just borrow from the current X position and Y position of this Sprite I'll explain why we need these later cool we just dropped that right in after we stamp the tile costume in the palette and now to draw some pins how exciting we'll start simple a single Central pin for each tile and we'll use the pen to do it set the pen size to 5 pixels and set pen color to Pure White okay then to paint a perfect circle simply use the pen down and the pen up just like jabbing the paper with a felt tip pen in theory that should do the trick so smash that green flag and then with the level editor open tap the P key to enable the palette meta editor and there we go a perfect white dot should have appeared at the center of each tile in the palette a brilliant start and they are easily toggled on and off with the same P key with that success we can try to expand this to draw a small grid of three by three pins per costume that's nine pins each we've created plenty of grid bass Loops by now so this should feel very familiar so separate off the set color and Pen down and up scripts first we'll need them soon enough we want to begin drawing the first of our nine pins offset below and the left changing X by negative 11 which is a good value and change y also by negative 11. that's just around a third of a tile width now we Loop repeating for three rows of pins and again for three pins in each row or columns if you will then in our Loop we do the drawing so drop those scripts back in there we just need to ensure after drawing each pin that we move on to the next pin position change X by positive 11 pixels then once a full row is complete we need to move up a row but not before we reset back to the First Column again to do this we change X by and this could be negative 11 multiply by 3 because we've done it three times and that will be negative 33 right then we can change y by R11 to move up to the next pin above sweet are we done not quite because after moving the Sprite in this script we must ensure to return it to where it was before this script ran otherwise the Sprite palette will not continue to paint correctly so go to x y and luckily we had the forethought to pass the starting position of the Sprite in as inputs X and Y when we created a custom block how thoughtful drop the X and Y into the go to X Y block at the bottom of this script Splendid because now we get to test smash that green flag and press P had wow look at all those funky white dots these will be perfect for visualizing our Collision pins don't you think and we can still scroll around the palette to get access to all the other tiles cool let's move on next we Define a collision pin string making a new variable naming it pin string for this Sprite only and let's push some random pins into this set pinstring to one zero one zero one zero one zero one that should be nine pin digits in total do this before we start moving the Sprite into position up here now as we loop around in these repeat Loops we need to keep track of which digit or letter of the pin string we have reached so another new variable and name this one I for integer we'll Begin by setting I to 1. for the first letter of the pin string and we move on to the next letter using the change I by 1. before we loop around again down here perfect that will loop from 1 up to nine as we progress through all the pins this script is getting a bit long though so I'm going to pull out the pin painting from the repeat loops make a new custom block naming it draw pin of type with the input type and run without screen refresh this will replace these pen scripts but make sure to leave the change X and the change I variable in the repeat Loop next place a call to draw pin type back in the loop before the change X like so but now we need the individual pin values from the pin string that would be a 0 or a one how do we get a single letter from a variable well using the letter of block of course the letter we want is given by our new I variable one through nine and it's coming from the pin string variable yeah I'm liking that so each of the ones and zeros will now be passed one at a time through to our pin drawing script over on the right we just need to distinguish which type it is a one or zero and change the color appropriately if else putting the pen down and up blocks underneath the set pen color then goes inside the if okay so our condition is whether the pin type is firstly a one a solid pin and I'm opting for a nice sky blue to represent a solid pin the else is for nonsolid Pins just a placeholder really but it's important we can still see it so set the color to white so how is this coming along hey take a look at this it's working great our simple pin pattern one zero one zero one zero one zero one has made a lattice of blue and white circles but I feel that the white circles are too solid looking we need to ghost them out drop a set pen transparency to and whap it right up to 90 percent okay yes that's more like it it's obvious now which pins are on and which pins are off solid and not solid we can have some fun with this now testing out different pin combinations by changing the ones and zeros in our pin string variable yeah that's really fun I love playing around with that but our goal is to feed these pins from the tile pin list we created right back at the start of the episode no problem replace that fixed string with an item of list block switching it to the tile pin list and the item number of this tile costume if you remember that is stored in the grid index gidx variable right starting at 20 and counting up for each costume in our tile palette so this is interesting bring back up the tiles pin list see where we ended a pin string for costume 20. so if we run the project and press P would you look at that there is our manually entered Collision pin string represented as colored pins that is really funky shall we try adding a new one for costume 22. it only registers when you click out of the list there you go this is So Meta awesome work as you can imagine now that we can visualize our pin layouts we could just go through each costume and enter the pin strings by hand matching them to the costume Collision boundaries but there are still a whole lot of them to go through so instead we'll make it possible to toggle these pins right here in the editor too before we continue though let's clear down the entire tile pin list using a delete all of tile pins careful not to accidentally delete your grid list otherwise goodbye level if you ever did do that you'll just need to pop into the level store Sprite and run the new level script by hand to start up a new Fresh level brilliant find the draw pin of type block and as we draw each pin we can now check whether the user is trying to toggle it on or off with a key press if how close is the mouse to this pin distance to Mouse pointer if it's less than 5.5 that's half the distance between pins 11 divided by two then we know our Mouse is over this pin so if else and check for a key press the number one one for a solid pin right now actually setting pins is not super straightforward so let's make a new custom block set pin with an input of pin hash pin number that'll be the pin number from one to nine followed by the label of tile with the input tile hash that'll be the costume number of our tile followed by the label 2 and a final input of value which will be either a one or zero for the time being wow that was a long one hit run without screen refresh and we can script this baby up first though let's put it in place the pin number is given by the available I the tile costume is grid index gidx and the value we are setting the PIN to well this is the one key right so set it to one great so what if we want to set it back to zero sadly we can't use a zero key as that turns the level editor on and off instead then we'll use the X key like a delete or remove key and we set the PIN to zero and this is where things get interesting firstly we are asking to change the pin layout for the tile costume tile hash now assume tile hash is tile number 20. what if our list doesn't have 20 items in it yet we can't update a row that doesn't exist so we need to fill the list with rows first to do this we repeat and we use a subtract starting at the number of items that we require that's given by the input variable tile hash and in our example that's 20 so we subtract from that the number of items already in the pin list right now that's zero so this would Loop 20 minus zero that's a full 20 times great so add to the tile pins list 20 times but careful now the value we add should be a string of nine zeros one two three four five six seven eight nine zeros careful to get the right amount exactly nine okay shall we give that a test to confirm use a new set pin block setting pin one of tile 20 to the value 1. the tile pin list starts empty and after we click the test set pin block voila we now have that required 20th item ready to update its pins let's pull out item 20 and take a look set pen string to item of the list tile pins and we want the item given by tile hash that's item 20. run that test again clicking the set pin of tile 20 again and now the pin string variable should be reporting all zeros yeah brilliant this is the PIN string we want to update but hold the phone this next step is the tricky bit how do we change one digit of this string value without affecting the other digits well there's a number of ways but let me show you my favorite We Begin by splitting the letters up into yet another new list naming it split for this Sprite only start with it blank deleting all of split and then repeat looping through all nine digits of pin string we want to add each letter of pinstring to the new list name split and we know to get the digits out we'll need to use a letter of and drop in the pin string but which letter do we begin with it should start with one and then go on to two three four Etc we could use a new variable but think about this the current length of the split list is zero right because it's empty so zero plus one gives us one and that is the first letter of pen string now once we've added this letter to the split list we repeat around for a second letter how many items are now in the split list that's right one since we just added it so length is now one and one plus one is two so we get the second letter added to split and this repeats each time around adding the next letter until all nine digits are added to our split list shall we see that in action click the test script again and tada we have all nine digits split out into our split list well at least it looks like it but it's hard to tell because these are all zeros anyway so for now you'll just have to take my word for it but why did I go to the bother of putting all these digits into a new list shall I show you a really funky scratch feature tell me in the comments if this was new to you drag out the list reporter itself into your project and try clicking it to see its value well this is showing as a single nine digit value again even though we are looking at the value of our list now usually list report items separated by spaces but under the special circumstance where every item in the list is one digit long instead it Returns the list as a single value without spaces and this is Mega useful for putting string values back together again right then we get ahead of ourselves though first we must actually update the pin luckily that's easy replace item of the split list and the pin number we are changing is given by the input pin hash the value we are setting to is given by the input value nice that gives us a chance to test our script again and now we should be able to confirm that it does actually replace item 1 in our split list with a 1 as requested that's great news and it means that if we now click the split list reporter again and there you see the first pin has changed to a one really useful indeed all that's left then is to stuff the updated pin value back into our tile pin list to store away that important metadata replace item for item number tile hash that's our tile costume of the tile pins list of course with and this is my favorite bit the list reporter split yes you really can use lists like that watch what happens when we run our test script now tile pins item 20 is all zeros but after running the script now pin one of item 20 is set to 1. let's try that setting pin three to one instead click and look now both pins one and three of item 20 are set want to reset pin 3 back to zero it's easy see how about pin three of item 21 201 that's a new item entirely click looking down in the list and there it is just pin three of item 21. isn't that an awesome little script that we've put together so guys what are we waiting for if this is correct then we should be able to run the project and actually see these pins being changed in the level editor remembering to click P to see our pins yes there they are I should be able to inject new pins in real time by simply changing the set pin test script and clicking it that is fun a new PIN at Pin five but you know if I just hide all these available reporters don't forget that before coding up the set pin script we already coded up the key presses to allow us to change pins in the level editor So in theory with all the pins showing we just need to hover over a pin and press the one key oh my gosh would you look at that oh oops um what I didn't anticipate is that I already use the one key to toggle layers in the editor yeah oops I'll fix that in a moment in the meantime enjoy pressing X to remove a pin Splendid this is working brilliantly right let's address the key binding issue the easiest solution is to prevent the changing of layers while the meta editor is enabled so find the when one key pressed yeah this uses the set layer block from down here so we can disable this from there just surround this inner if else with a new if and check if pallet meta editor is less than one and with the pin editor active pressing one now doesn't switch layers any longer cool until I press the P again and then switching layers is active once more that's great because that actually means as the outro music begins we are finally free to start laying down our official Collision pins and it's so easy holding down one to draw a solid row of pins an X to tidy up any mistakes in our next RPG episode we will actually add in the player to tile pin Collision scripts so if you haven't subscribed to this channel yet do it now so you can get alerted as soon as the video comes out yeah check the notification Bell and all also if you haven't given this video a thumbs up then please do smash that like button now as it makes all the difference to getting my videos seen by other fellow scratchers thank you so much there's been a lot of interest in my early access membership of late and that's no surprise as members get to see my videos early not only getting the chance to get ahead of the game but also having added perks like priority replies to comments and custom Channel Emoji for those of you who are teachers or Educators please consider supporting my channel too either through patreon or by becoming an inner circle member of this channel it's a small price to pay for the work I put in and you get the bonuses of access to my finished projects and that is it from me today I hope you've enjoyed the video and I look forward to seeing you next time until then have a great week ahead and scratch on guys thank you
