With timestamps:

00:00 - foreign
00:03 - scratchers and welcome to this fun
00:06 - tutorial on data serialization did
00:09 - someone say safe codes ah yes so useful
00:12 - allowing players to save their progress
00:13 - and enjoy our scratch games for longer
00:16 - also data civilization unlocks the key
00:18 - to adding multiple scenes to our
00:20 - tile-based RPG 2. now to understand what
00:24 - this is all about take a look at this
00:26 - oddly familiar platforming game hi guy
00:29 - to create a safe game we'd need it to
00:32 - take a record of all data values at one
00:34 - point in tons right positions count Live
00:37 - Score whatever is subject to change and
00:39 - here comes serialization where the
00:42 - values are translated and combined into
00:44 - a single long value also sometimes
00:46 - called a data stream and in scratch we
00:48 - might refer to it as a Stave code the
00:52 - most important thing about serialization
00:53 - is that the process is also reversible
00:56 - and will allow us to reconstruct our
00:58 - game at just the same point that we
01:00 - saved it so in this tutorial we're going
01:04 - to learn how to build two very useful
01:06 - custom blocks the right value and read
01:09 - value very cool and you may already have
01:12 - noticed that the save code that we've
01:14 - created is a csva comma separated value
01:18 - except we don't need to use commas we
01:21 - haven't here I've used pipes and you'll
01:23 - often also see spaces used too when
01:26 - appropriate and I say when appropriate
01:28 - because look at this example where we
01:30 - join two values hello and then fellow
01:34 - scratches and if we try separating them
01:37 - with a space delimiter then oh man we
01:40 - can't tell any longer that this was two
01:42 - values at all it looks like three but
01:45 - easily solved right we just pick a
01:47 - better delimiter like a pipe the rule
01:50 - would be never to choose a delimiter
01:51 - that will appear within any of our
01:53 - values but that is not as easy as it
01:56 - sounds
01:57 - and no matter what letter or symbol we
01:59 - choose as a delimiter there's always a
02:01 - chance that it might get used in one of
02:03 - our game variables and completely break
02:06 - our game but don't throw your keyboards
02:10 - out of the window quite yet for escape
02:12 - characters come to our rescue I'll
02:15 - explain more on these shortly so keep
02:17 - watching until the end of the video for
02:19 - the complete picture but gosh I think
02:22 - we'd do well to begin coding this up
02:24 - guys let's get scratching this is going
02:29 - to be very backpackable so we'll create
02:31 - a brand new project for it and the
02:33 - Sprite we will name save code
02:37 - the first thing we need is available to
02:39 - hold the save code for this Sprite only
02:43 - and set it to the empty value good
02:47 - now we make a new custom block named
02:50 - write value
02:52 - and it has an input named text
02:55 - and we can definitely run without screen
02:57 - refresh for this has to be very fast
03:00 - then to join the value of the text input
03:02 - onto the end of the existing save code
03:04 - we set save code to itself save code
03:08 - joined with the new text input value but
03:12 - don't forget to add the delimiter to our
03:15 - pipe character duplicate the line and
03:17 - join that with a pipe now let's see this
03:20 - in action we'll Begin by setting save
03:22 - code to the empty value and then write
03:25 - the value hello if we give that a click
03:28 - you can see that we've added Hello and
03:30 - then a pipe delimiter to the end great
03:32 - so following that by fellow scratches
03:36 - and the number one two three and we see
03:39 - all three values serialized
03:41 - appropriately very good however although
03:45 - this is an okay way of serializing
03:47 - values we will run into trouble trying
03:49 - to write values that contain that pipe
03:51 - character themselves but we'll come back
03:54 - to that shortly
03:56 - for now let's move on we need that read
03:59 - value block to deserialize our values
04:01 - back out of the save code once more
04:03 - make a new custom block named read value
04:07 - and again run without screen refresh
04:10 - now each time we run this it wants to
04:13 - return a value so make a new variable
04:15 - for that named value for this Sprite
04:18 - only and this must start empty we'll
04:22 - want to Loop through the safe code
04:23 - building up this value variable a letter
04:25 - at a time we don't know how many times
04:28 - to repeat yet so Loop forever because we
04:31 - can always break out of it later now
04:33 - let's get the first letter of the safe
04:35 - code
04:36 - except we need to be able to Loop
04:38 - through this A letter at a time so we
04:41 - need a variable to say where we are up
04:43 - to
04:45 - name it save index
04:47 - or idx for short for this Sprite only
04:51 - we begin at the first letter set save
04:54 - index to 1 and then we can get letter
04:57 - save index of save code so that should
05:01 - begin as H perfect
05:04 - hello fellow scratchers we'll store this
05:07 - H in a new variable naming it C for
05:10 - character and that's for this Sprite
05:12 - only too
05:14 - and then we set it
05:16 - okay now we have the letter at position
05:18 - one we change save index by one already
05:22 - for the next loop around
05:25 - but before we go ahead and add this to
05:27 - our value available what if the letter
05:30 - we just found in variable C is equal to
05:33 - a pipe well then we would have found the
05:37 - end of the next value and we could stop
05:40 - this script breaking out of the forever
05:43 - Loop right here
05:46 - and if it's not a pipe then swell set
05:49 - value to the result of joining
05:53 - itself value to our letter in variable C
05:57 - I'm loving that because after adding
06:00 - that letter this repeat goes around
06:02 - again and now we are looking at letter
06:04 - two and three and four building up this
06:07 - value until we hit a pipe shall we give
06:10 - that a test start by setting save index
06:12 - to 1 with a click and then drop in a
06:15 - read value block and click that and
06:19 - there we go value has become the word
06:22 - hello exactly five letters long and
06:24 - perfectly formed if we click the read
06:27 - value block again we get fellow
06:29 - scratches and then again one two three I
06:33 - love that don't you but now that we've
06:35 - reached the end of the save code who
06:37 - wants me to click this block again to
06:39 - see what happens next
06:42 - and boom scratch has gone into meltdown
06:45 - this script is running forever stop the
06:49 - project if you can okay this is not the
06:52 - best result when there are no more
06:55 - values to read out of the safe code it
06:57 - would be preferable to just return an
06:59 - empty value and not carry on running
07:01 - forever how would we do that well rather
07:05 - than just stopping when C is equal to a
07:08 - bar we could also stop when save index
07:11 - is greater than the length of the save
07:15 - code
07:16 - that would make sense right we've gone
07:18 - past the end great well we could do that
07:21 - and it works
07:23 - but that's a bit of an expensive long
07:26 - way to do it it just so happens that any
07:28 - letter after the end of a value will
07:31 - equal the empty value so we can just
07:34 - compare C to the empty value instead
07:38 - see it still works a treat
07:41 - but did you think that that was the best
07:44 - we could do you see apple contains an a
07:47 - yep no surprise there and bar contains a
07:50 - bar yep apparently so that's good good
07:53 - so tell me does bar contain the empty
07:57 - value
07:57 - hmm well that's a tricky one maybe
08:02 - yes it does interesting so I guess every
08:05 - value also contains the empty value
08:08 - so instead of checking whether C is the
08:10 - pipe or the empty value we can just
08:12 - check if bar contains C
08:15 - and that means C is a bar or the empty
08:19 - value perfect so guys everything is
08:22 - working great we can happily serialize
08:25 - and deserialize values so are we done
08:28 - well we could be if we are happy to take
08:31 - responsibility that no value written to
08:33 - this save code will contain a pipe if
08:37 - unfortunately we can't guarantee that
08:38 - then well let's see what happens shall
08:41 - we we wrote three values into the save
08:43 - code so there should be three coming out
08:45 - good
08:47 - uh-oh fellow colon hmm
08:50 - scratches and one two three that was
08:53 - four values and we all knew it was going
08:56 - to happen
08:57 - so how do we fix this the answer is
09:00 - using escaping how this works is
09:04 - whenever we ask to write a value
09:06 - containing a pipe we escape the pipe by
09:09 - preceding it with a backslash this tells
09:13 - our serializer to treat the next letter
09:14 - as part of the value and not a delimiter
09:18 - right we're going to require some space
09:20 - to work on this write value script as
09:23 - we'll now need to process it a letter at
09:25 - a time looking out for the pipes sound
09:27 - familiar
09:28 - we'll start at letter 1 reusing the save
09:31 - index for the job
09:33 - and this time we know how many letters
09:35 - to Loop through so we can use a repeat
09:37 - for the length of the text input
09:41 - next up we get a letter
09:43 - so set C to letter save index of
09:48 - but not of the safe code this time we
09:51 - are looking through the text input value
09:53 - okay so now is the time to watch out for
09:56 - that pipe character if C is equal to
09:58 - pipe then this needs escaping and that's
10:01 - as simple as adding a backslash to the
10:04 - save code just set it to itself joined
10:07 - with a backslash
10:11 - followed by the actual character but put
10:14 - that outside the if this way we add
10:17 - every letter to the save code but the
10:19 - pipes are always preceded by a backslash
10:22 - does that make sense
10:23 - finally we mustn't forget to add on the
10:26 - last pipe to finish off wonderful I
10:29 - think that should do it smash that test
10:31 - script up here
10:35 - what the we've got loads of H's F's and
10:37 - ones and this is not hello fellow
10:39 - anything I wonder what I did wrong if
10:43 - you fancy a challenge can you figure out
10:44 - what it was just pause the video and
10:46 - take a look at the scripts if you got it
10:48 - then dropper fixed it in the comments so
10:50 - I can applaud you so why would we be
10:53 - getting the same letter over and over
10:55 - again perhaps because we never updated
10:58 - the save index variable it stays on
11:01 - letter one simply drop in a change save
11:04 - index by one at the end of this repeat
11:06 - Loop right this time we are in for a
11:10 - treat our three values have been
11:12 - serialized Bogue squashed and this time
11:15 - the emoticon pipe is preceded by a
11:18 - backslash nice
11:20 - only problem is now we need to be able
11:23 - to handle reading back these backslashes
11:25 - if I scroll down to the read value
11:27 - script you'll see that the second value
11:30 - we read still breaks at the pipe but
11:33 - worse that extra backslash is showing as
11:35 - part of the value and that's not right
11:37 - we need to catch those backslashes
11:39 - before they are added put and if before
11:43 - the last set value and check if C is a
11:46 - backslash
11:48 - if it is then we throw it away because
11:50 - it's the next character that we're
11:51 - interested in now
11:53 - top two lines in this forever Loop do
11:55 - that job so duplicate them and pop them
11:58 - in this if
12:00 - so if we find a backslash get the next
12:02 - letter instead and join that to our
12:05 - value in its place
12:07 - solid let's give it a test set save
12:10 - index to 1 and then read value good
12:14 - read value again oh boy now this is more
12:18 - like it we've successfully read the
12:21 - correct value including the pipe and the
12:24 - escaping has gone I love it when a plan
12:27 - comes together
12:29 - we are almost done then but are you
12:31 - thinking what I'm thinking we solved
12:34 - being able to include pipes by escaping
12:36 - them with a backslash symbol but doesn't
12:38 - that mean that we have to be careful not
12:40 - to add backslashes to our written values
12:42 - too yes indeed it appears we have just
12:46 - swapped one problem for another
12:50 - yep the backslash is missing but luckily
12:54 - this has a simple solution that fixes
12:56 - everything under the right value script
12:59 - we currently only Escape pipes but what
13:03 - if we escape backslashes too simple as
13:06 - adding an or here but I'm going to do
13:08 - them both using my favorite contains
13:10 - block again if pipe or backslash
13:14 - contains C then c is either a backslash
13:18 - or a pipe interesting so what does that
13:22 - now look like after it's serialized
13:25 - well the backslash has as we expected
13:28 - also been escaped by adding a backslash
13:31 - before it remember any letter after a
13:34 - backslash will make it into the red
13:35 - value so I'm expecting the second one
13:38 - won't be skipped this time around
13:40 - set save index to one and read hello
13:45 - fellow colon backslash scratches so
13:48 - awesome a perfectly accurate result and
13:52 - that is it we've created a very robust
13:54 - data serializer and if I were you I
13:57 - would make a copy of these scripts just
13:59 - as they are in a separate project
14:00 - because they will come in very handy or
14:03 - multiple projects in the future
14:04 - including the next episode of my popular
14:07 - RPG Series in that episode I will
14:10 - demonstrate how to create backwards
14:12 - compatible save codes and efficiently
14:14 - serialize a complex grid list map but
14:17 - just as we end let's just review how we
14:20 - can use these two blocks to create a set
14:23 - code we set save code to the empty value
14:26 - and then write each value to that in
14:29 - turn
14:29 - and then to load these values back out
14:32 - and save code we set save index to 1 and
14:35 - then use three read values one for each
14:37 - of the right values
14:39 - of course it doesn't make much sense
14:41 - unless you actually have some variables
14:43 - to save so let me create some as a
14:45 - demonstration player X and Y and lives
14:49 - each of these I write to the save code
14:52 - then to restore each of these we need to
14:55 - pop in a set block after each read to
14:58 - assign the read value to the correct
15:00 - variable
15:04 - just watch this I'll make these into
15:06 - sliders and then set them to some random
15:09 - values
15:10 - now click here to create our save code
15:13 - then I can switch the slides around but
15:16 - if I click to load from the Save code
15:18 - all three sliders returned to their
15:20 - saved locations awesome often to allow a
15:24 - player to download a safe code We'll add
15:26 - the safe code to a visible list we do
15:28 - this because it's the only way to make
15:30 - the text copyable by our users
15:33 - show list then to make that visible and
15:36 - then to load a save code back just pop
15:39 - it in the ask block
15:42 - finally set save code to the user's
15:45 - answer and hey Presto we can restore our
15:49 - games
15:50 - well I hope you enjoyed this video if
15:53 - you did then please smash that like
15:55 - button and subscribe to the channel so
15:56 - as not to miss the next exciting episode
15:58 - when it drops I look forward to
16:01 - continuing this series with a detailed
16:02 - look of how to construct backwards
16:04 - compatible save codes in the next
16:06 - episode of the RPG series however this
16:09 - technique is super useful for all sorts
16:12 - of projects and I'd love to hear from
16:13 - you in the comments what you have
16:15 - planned for it and that though is the
16:17 - end of this video thanks for watching
16:20 - have a great week ahead and scratch on
16:23 - guys
16:26 - thank you

Cleaned transcript:

foreign scratchers and welcome to this fun tutorial on data serialization did someone say safe codes ah yes so useful allowing players to save their progress and enjoy our scratch games for longer also data civilization unlocks the key to adding multiple scenes to our tilebased RPG 2. now to understand what this is all about take a look at this oddly familiar platforming game hi guy to create a safe game we'd need it to take a record of all data values at one point in tons right positions count Live Score whatever is subject to change and here comes serialization where the values are translated and combined into a single long value also sometimes called a data stream and in scratch we might refer to it as a Stave code the most important thing about serialization is that the process is also reversible and will allow us to reconstruct our game at just the same point that we saved it so in this tutorial we're going to learn how to build two very useful custom blocks the right value and read value very cool and you may already have noticed that the save code that we've created is a csva comma separated value except we don't need to use commas we haven't here I've used pipes and you'll often also see spaces used too when appropriate and I say when appropriate because look at this example where we join two values hello and then fellow scratches and if we try separating them with a space delimiter then oh man we can't tell any longer that this was two values at all it looks like three but easily solved right we just pick a better delimiter like a pipe the rule would be never to choose a delimiter that will appear within any of our values but that is not as easy as it sounds and no matter what letter or symbol we choose as a delimiter there's always a chance that it might get used in one of our game variables and completely break our game but don't throw your keyboards out of the window quite yet for escape characters come to our rescue I'll explain more on these shortly so keep watching until the end of the video for the complete picture but gosh I think we'd do well to begin coding this up guys let's get scratching this is going to be very backpackable so we'll create a brand new project for it and the Sprite we will name save code the first thing we need is available to hold the save code for this Sprite only and set it to the empty value good now we make a new custom block named write value and it has an input named text and we can definitely run without screen refresh for this has to be very fast then to join the value of the text input onto the end of the existing save code we set save code to itself save code joined with the new text input value but don't forget to add the delimiter to our pipe character duplicate the line and join that with a pipe now let's see this in action we'll Begin by setting save code to the empty value and then write the value hello if we give that a click you can see that we've added Hello and then a pipe delimiter to the end great so following that by fellow scratches and the number one two three and we see all three values serialized appropriately very good however although this is an okay way of serializing values we will run into trouble trying to write values that contain that pipe character themselves but we'll come back to that shortly for now let's move on we need that read value block to deserialize our values back out of the save code once more make a new custom block named read value and again run without screen refresh now each time we run this it wants to return a value so make a new variable for that named value for this Sprite only and this must start empty we'll want to Loop through the safe code building up this value variable a letter at a time we don't know how many times to repeat yet so Loop forever because we can always break out of it later now let's get the first letter of the safe code except we need to be able to Loop through this A letter at a time so we need a variable to say where we are up to name it save index or idx for short for this Sprite only we begin at the first letter set save index to 1 and then we can get letter save index of save code so that should begin as H perfect hello fellow scratchers we'll store this H in a new variable naming it C for character and that's for this Sprite only too and then we set it okay now we have the letter at position one we change save index by one already for the next loop around but before we go ahead and add this to our value available what if the letter we just found in variable C is equal to a pipe well then we would have found the end of the next value and we could stop this script breaking out of the forever Loop right here and if it's not a pipe then swell set value to the result of joining itself value to our letter in variable C I'm loving that because after adding that letter this repeat goes around again and now we are looking at letter two and three and four building up this value until we hit a pipe shall we give that a test start by setting save index to 1 with a click and then drop in a read value block and click that and there we go value has become the word hello exactly five letters long and perfectly formed if we click the read value block again we get fellow scratches and then again one two three I love that don't you but now that we've reached the end of the save code who wants me to click this block again to see what happens next and boom scratch has gone into meltdown this script is running forever stop the project if you can okay this is not the best result when there are no more values to read out of the safe code it would be preferable to just return an empty value and not carry on running forever how would we do that well rather than just stopping when C is equal to a bar we could also stop when save index is greater than the length of the save code that would make sense right we've gone past the end great well we could do that and it works but that's a bit of an expensive long way to do it it just so happens that any letter after the end of a value will equal the empty value so we can just compare C to the empty value instead see it still works a treat but did you think that that was the best we could do you see apple contains an a yep no surprise there and bar contains a bar yep apparently so that's good good so tell me does bar contain the empty value hmm well that's a tricky one maybe yes it does interesting so I guess every value also contains the empty value so instead of checking whether C is the pipe or the empty value we can just check if bar contains C and that means C is a bar or the empty value perfect so guys everything is working great we can happily serialize and deserialize values so are we done well we could be if we are happy to take responsibility that no value written to this save code will contain a pipe if unfortunately we can't guarantee that then well let's see what happens shall we we wrote three values into the save code so there should be three coming out good uhoh fellow colon hmm scratches and one two three that was four values and we all knew it was going to happen so how do we fix this the answer is using escaping how this works is whenever we ask to write a value containing a pipe we escape the pipe by preceding it with a backslash this tells our serializer to treat the next letter as part of the value and not a delimiter right we're going to require some space to work on this write value script as we'll now need to process it a letter at a time looking out for the pipes sound familiar we'll start at letter 1 reusing the save index for the job and this time we know how many letters to Loop through so we can use a repeat for the length of the text input next up we get a letter so set C to letter save index of but not of the safe code this time we are looking through the text input value okay so now is the time to watch out for that pipe character if C is equal to pipe then this needs escaping and that's as simple as adding a backslash to the save code just set it to itself joined with a backslash followed by the actual character but put that outside the if this way we add every letter to the save code but the pipes are always preceded by a backslash does that make sense finally we mustn't forget to add on the last pipe to finish off wonderful I think that should do it smash that test script up here what the we've got loads of H's F's and ones and this is not hello fellow anything I wonder what I did wrong if you fancy a challenge can you figure out what it was just pause the video and take a look at the scripts if you got it then dropper fixed it in the comments so I can applaud you so why would we be getting the same letter over and over again perhaps because we never updated the save index variable it stays on letter one simply drop in a change save index by one at the end of this repeat Loop right this time we are in for a treat our three values have been serialized Bogue squashed and this time the emoticon pipe is preceded by a backslash nice only problem is now we need to be able to handle reading back these backslashes if I scroll down to the read value script you'll see that the second value we read still breaks at the pipe but worse that extra backslash is showing as part of the value and that's not right we need to catch those backslashes before they are added put and if before the last set value and check if C is a backslash if it is then we throw it away because it's the next character that we're interested in now top two lines in this forever Loop do that job so duplicate them and pop them in this if so if we find a backslash get the next letter instead and join that to our value in its place solid let's give it a test set save index to 1 and then read value good read value again oh boy now this is more like it we've successfully read the correct value including the pipe and the escaping has gone I love it when a plan comes together we are almost done then but are you thinking what I'm thinking we solved being able to include pipes by escaping them with a backslash symbol but doesn't that mean that we have to be careful not to add backslashes to our written values too yes indeed it appears we have just swapped one problem for another yep the backslash is missing but luckily this has a simple solution that fixes everything under the right value script we currently only Escape pipes but what if we escape backslashes too simple as adding an or here but I'm going to do them both using my favorite contains block again if pipe or backslash contains C then c is either a backslash or a pipe interesting so what does that now look like after it's serialized well the backslash has as we expected also been escaped by adding a backslash before it remember any letter after a backslash will make it into the red value so I'm expecting the second one won't be skipped this time around set save index to one and read hello fellow colon backslash scratches so awesome a perfectly accurate result and that is it we've created a very robust data serializer and if I were you I would make a copy of these scripts just as they are in a separate project because they will come in very handy or multiple projects in the future including the next episode of my popular RPG Series in that episode I will demonstrate how to create backwards compatible save codes and efficiently serialize a complex grid list map but just as we end let's just review how we can use these two blocks to create a set code we set save code to the empty value and then write each value to that in turn and then to load these values back out and save code we set save index to 1 and then use three read values one for each of the right values of course it doesn't make much sense unless you actually have some variables to save so let me create some as a demonstration player X and Y and lives each of these I write to the save code then to restore each of these we need to pop in a set block after each read to assign the read value to the correct variable just watch this I'll make these into sliders and then set them to some random values now click here to create our save code then I can switch the slides around but if I click to load from the Save code all three sliders returned to their saved locations awesome often to allow a player to download a safe code We'll add the safe code to a visible list we do this because it's the only way to make the text copyable by our users show list then to make that visible and then to load a save code back just pop it in the ask block finally set save code to the user's answer and hey Presto we can restore our games well I hope you enjoyed this video if you did then please smash that like button and subscribe to the channel so as not to miss the next exciting episode when it drops I look forward to continuing this series with a detailed look of how to construct backwards compatible save codes in the next episode of the RPG series however this technique is super useful for all sorts of projects and I'd love to hear from you in the comments what you have planned for it and that though is the end of this video thanks for watching have a great week ahead and scratch on guys thank you
