With timestamps:

00:00 - foreign
00:03 - scratchers do you want to code an online
00:06 - cloud game in scratch perhaps even a
00:08 - massive multiplayer game with anything
00:09 - from two to over a hundred players well
00:12 - then you've come to the right place
00:14 - because I can show you how we can
00:16 - upgrade almost any scratch game to be a
00:19 - multiplayer game conceptually we just
00:21 - need each player to share their players
00:23 - position and cost you details because if
00:25 - we know where they are then we can
00:27 - display them in our game too in these
00:30 - tutorials we'll learn step by step how
00:33 - to create this fully backpackable Cloud
00:35 - engine that can be easily dropped into
00:37 - all your games and yes we'll cover Cloud
00:40 - variables data encoding buffering for
00:42 - smooth movement and of course how
00:44 - players join and leave our games so
00:47 - buckle up smash that like button and let
00:50 - our crazy fun journey into multiplayer
00:53 - coding begin guys let's get scratching
00:57 - but hold on are you a new scratcher
01:03 - you can check right here on your profile
01:05 - page sadly until you're invited to full
01:07 - scratcher status you won't be able to
01:09 - play or create Cloud games but before
01:12 - you start to panic all you need to do is
01:15 - share a few projects love and comment on
01:17 - my uh other people's projects and very
01:20 - soon you'll find an invite appears right
01:23 - here on your profiles page okay great
01:26 - let's start a new project in this first
01:29 - episode we are going to cover the basics
01:31 - of cloud variables how they work and
01:33 - perhaps more importantly how they don't
01:35 - work
01:36 - so if we create a new variable Cloud one
01:39 - you'll notice we have the option to
01:41 - create this as a cloud variable stored
01:44 - on the server and this is where the
01:46 - magic happens by storing a value on the
01:48 - Cloud Server every scratcher looking at
01:50 - your project will share the same value
01:53 - when we first create one of these we get
01:55 - a warning it reads please note cloud
01:58 - vowables only support numbers not
02:00 - letters or symbols and so we meet our
02:03 - first limitation Cloud variable rule
02:05 - number one you can't write letters and
02:08 - symbols to a cloud variable and that is
02:10 - a real pain Our Lives will be so much
02:13 - easier if we could stuff text into these
02:15 - things but that would be open to abuse
02:17 - so we are where we are numbers only okay
02:21 - shall we see the cloud variable in
02:23 - action when this Sprite clicked change
02:26 - the cloud variable by one a simple
02:28 - enough test just click the cat and we
02:30 - see Cloud 1 increases as expected but to
02:33 - test this properly we need to see the
02:35 - value changing on another scratches
02:37 - screen right that's the whole point well
02:40 - you could get the help of another
02:42 - scratcher to load up your project but
02:44 - for Simplicity we can actually test this
02:47 - all ourselves without even sharing the
02:49 - project which is great news because who
02:51 - wants to share an unfinished game
02:54 - make sure the project is saved and then
02:57 - switch to the project page and move that
02:59 - web browser to one side of the screen
03:02 - next we need to duplicate the current
03:04 - tab I did that by right clicking but you
03:07 - otherwise could just create a tab and
03:09 - find your project in the normal way it
03:11 - doesn't really matter and then I pull
03:13 - the new tab away from this browser
03:15 - window and drop it to the right
03:17 - okay this is looking good but both
03:20 - projects agree that cloud one has a
03:22 - value of three now when I click on the
03:25 - cat again the value changes to 4 but
03:27 - this time also changes to 4 in our
03:30 - second window two wonderful this is what
03:33 - cloud variables do they share their
03:36 - value with everyone else almost
03:37 - instantly but not quite instantly in
03:40 - fact it takes around one tenth of a
03:42 - second for the value to transfer from
03:44 - window 1 to window 2. a lag of around
03:46 - 100 milliseconds and yes you can click
03:49 - either cat and the update Works in both
03:52 - directions
03:53 - now there's only so much fun you can
03:55 - have clicking cats how can we go from
03:58 - this to this well let's start small say
04:02 - we have the scratch cat follow the mouse
04:04 - pointer and try to get the second window
04:07 - to mirror these movements now that would
04:09 - be cool when flag clicked Loop forever
04:12 - go to Mouse pointer we know Cloud
04:15 - variables can share a single number with
04:17 - another scratch project and a sprite's
04:19 - position is made up of two numbers given
04:22 - by an X position and a y position
04:24 - reporter block
04:25 - so why not create a second Cloud
04:27 - variable Cloud 2 and don't forget to
04:30 - check that cloud variable option and now
04:32 - we can set Cloud 1 to this Sprites X
04:35 - position and the Cloud 2 to the Y
04:38 - position nice
04:40 - running the project clearly shows both
04:42 - Cloud 1 and Cloud 2 updating okay since
04:46 - these values will be shared with window
04:47 - 2 we just need a second script to
04:50 - reposition the Sprite using these shared
04:53 - values when two key pressed this allows
04:56 - us to indicate which window is number
04:58 - two
04:59 - stop other scripts in Sprite
05:02 - this ensures window 2 won't be running
05:04 - these left-hand scripts instead we Loop
05:07 - forever setting the X position to the
05:10 - value shared with us in Cloud 1.
05:13 - and the same for y position but with
05:16 - cloud 2.
05:17 - nice we have to test this once again
05:21 - ensuring the project is saved then see
05:23 - project page and duplicate the tab if
05:26 - however you left the window open which
05:28 - often I do then make sure to reload that
05:31 - page otherwise the project will be out
05:33 - of date and may lead to confusion if
05:35 - things don't work as expected okay here
05:38 - we go both projects are running but I
05:40 - haven't pressed the number two key yet
05:42 - to proceed first click into the right
05:44 - hand window to ensure it has focus and
05:47 - then press the two key
05:49 - boom my cat just flew over to the right
05:51 - why did it do this well it's because the
05:55 - cap on my left screen is positioned to
05:57 - the right and this window is now copying
05:59 - its movements to here
06:01 - now let's bring my mouse back to the
06:03 - left
06:04 - and look the X and Y positions of the
06:07 - first bright are shared allowing us to
06:09 - reposition the second Sprite to match
06:11 - the first one this is basically how
06:14 - multiplayer games are coded in scratch
06:16 - but wait do you notice something a bit
06:20 - off the right hand window seems to be
06:23 - mimicking the movements of the left
06:24 - window that's great but it's far from
06:27 - smooth Houston we have a problem upon
06:32 - closer inspection you'll see that the
06:34 - movement occurs in steps only horizontal
06:37 - left and right or vertical up and down
06:39 - it's quite peculiar isn't it well I did
06:43 - mention that cloud variables have their
06:45 - limitations and we're witnessing some of
06:47 - them right before our eyes the first
06:49 - limitation is this Cloud variable rule
06:52 - number two scratch weights a tenth of a
06:56 - second between sending Cloud updates
06:59 - in other words no matter how quickly you
07:01 - update Cloud variables scratch will only
07:03 - send them at a maximum rate of 10 per
07:06 - second
07:07 - unfortunately this rule also applies
07:10 - when we set two Cloud variables together
07:12 - in our case the X and Y positions
07:15 - resulting in one change being sent
07:18 - before the other and thus the Sprite
07:21 - moves horizontally then vertically
07:23 - instead of a smooth diagonal line
07:27 - ah there is no way around this
07:30 - restriction so the only way to share our
07:33 - X and Y values at once is to combine
07:36 - them and send them using a single Cloud
07:39 - variable instead well how about we just
07:42 - join these two values together for
07:44 - example an x value of 176 joined with a
07:47 - Y value of 40 would come out as one
07:50 - seven six forty well that worked but now
07:53 - we Face the challenge of not being able
07:56 - to distinguish where one number ends and
07:58 - the next one starts
08:00 - the problem is we can't insert a
08:02 - separator character because of cloud
08:03 - rule number one which states that you
08:05 - cannot store letters and symbols in a
08:07 - cloud variable so here is an idea let's
08:10 - record the length of the first number
08:12 - three before the number itself and we'll
08:16 - do the same for the second number two
08:18 - then we can join all the information
08:21 - together to give our encoded string
08:23 - value
08:24 - has that helped us yes because to
08:27 - extract the numbers back out again we
08:29 - simply look at the first digit which is
08:31 - a three then we read out the next three
08:34 - digits which gives us one seven six that
08:36 - is our x value the following digit is a
08:39 - two and then we read the next two digits
08:41 - and we obtain forty as our y value
08:44 - clever stuff let's code this up
08:48 - create a new variable named encoded
08:51 - string
08:53 - for this Sprite only
08:54 - and make sure to set it to an empty
08:57 - value
08:58 - now we'll create a custom block to let
09:00 - us add individual numbers to this
09:02 - encoded string name it write number with
09:06 - a number input of Val short for value
09:09 - and another label of two encoded string
09:13 - right number Val to encoded string
09:15 - perfect make sure to run without screen
09:18 - refresh so it runs nice and fast
09:20 - so after clearing the encoded string
09:22 - variable let's try writing the number
09:24 - one to the encoder string yes this will
09:27 - want to be the X position of the Sprite
09:29 - going forward but always start off
09:31 - simple
09:32 - now to code up that custom block create
09:34 - another variable also called Val for
09:37 - this Sprite only
09:39 - and set Val to the input Val
09:43 - clicking the script above will set Val
09:45 - to 1 as expected now the reason we're
09:48 - using another variable for vowel is to
09:50 - safeguard against fractional values like
09:53 - say a hundred point five this would
09:56 - really mess up our encoding so we'll pop
09:59 - in a rounding operator to remove the
10:01 - issue before it occurs
10:03 - great so then we simply set encoded
10:07 - string to the join to itself encoded
10:10 - string and OK two more things so another
10:14 - join
10:15 - the length of the variable vowel
10:19 - not the pink one but the orange one we
10:21 - just rounded and then the value itself a
10:24 - length of 1 and the number one should
10:27 - come out as 1 1 11. pop that on the end
10:30 - of the encoded string and this custom
10:32 - block is done we can test it by clicking
10:34 - the above script again and encoded
10:37 - string is indeed 11. well how about we
10:40 - write a second number two
10:44 - click not a problem one digit the number
10:47 - two
10:48 - and a longer number three four five
10:50 - click
10:52 - we see three digits followed correctly
10:54 - by three four five great
10:57 - now the next step is to retrieve these
11:00 - numbers from the encoded string which is
11:02 - known as decoding the key to this is to
11:05 - keep track of our current position in
11:07 - the encoded string as we start from left
11:09 - and progress across to accomplish this
11:12 - we'll introduce a new variable named
11:14 - encoded index idx for short specific to
11:19 - this Sprite
11:20 - this variable will serve as our tracker
11:22 - we'll initialize the encoded index
11:24 - available to one indicating the starting
11:27 - position as the first digit of the
11:29 - encoded string
11:31 - next let's create a custom block
11:33 - responsible for decoding each number
11:35 - we'll name it Val equals read number
11:39 - from encoded string apologies for the
11:42 - lengthy name but it accurately describes
11:44 - the Block's purpose remember to set the
11:47 - block to run without screen refresh for
11:49 - Optimal Performance to facilitate
11:51 - testing let's plug in the code right
11:53 - away assuming the encoded string
11:55 - variable begins 1 1 1 2 for the initial
11:58 - read we aim to retrieve the number one
12:00 - for the length and another one for the
12:03 - value itself first let's ensure that the
12:06 - valve variable is empty at start
12:10 - next we'll retrieve the value of the
12:12 - current letter in the encoded string
12:14 - which will be 1 as expected just
12:17 - remember the current position is given
12:18 - by the encoded index variable
12:21 - right so we can agree that this Returns
12:23 - the number of digits that we need to
12:25 - read in to get the full value so how
12:28 - about we use a repeat block for that
12:31 - exact number
12:33 - currently we will repeat only once but
12:35 - for longer numbers it will repeat around
12:37 - as many times as there are digits
12:40 - we need the next digit so let's
12:42 - immediately change encoded index by 1.
12:45 - and now letter encoded index of encoded
12:47 - string will give us the next digit in
12:49 - the encoded string we'll want to append
12:52 - this digit to the Val variable by
12:54 - setting Val to the join of vowel and
12:57 - this next digit
12:59 - this repeat Loop will then do its job
13:01 - looping around adding digits to Val the
13:04 - only thing left to do is to ensure that
13:05 - we increment encoded index by one more
13:09 - at the end
13:10 - so we are positioned to read the next
13:13 - number from the encoded string well this
13:16 - is exciting we can now test if we can
13:19 - correctly decode these numbers click
13:21 - this script and confirm that we obtain
13:23 - the first value which is one nice there
13:27 - it is in the vowel variable to get the
13:29 - next one we simply need to run a read
13:31 - Number Block on its own click Splendid
13:34 - there's our number two and with one more
13:36 - click we get three four five it
13:39 - perfectly matches the order and value of
13:42 - our encoded numbers
13:44 - great with this we can encode and
13:47 - retrieve our numbers however we mustn't
13:49 - forget that the screen positions of
13:51 - Sprites can often go negative if we try
13:55 - to encode a negative number like
13:57 - negative 10
14:00 - then oh dear 3-10 that will definitely
14:04 - fail Cloud rule number one as it's not a
14:07 - valid number somehow we need to encode
14:10 - negative numbers without using the
14:12 - negative symbol well since no numbers
14:16 - will begin with a zero and the negative
14:19 - symbol always appears at the start of a
14:22 - number
14:22 - how about we simply replace the negative
14:26 - symbol with a zero instead so negative
14:29 - 10 will become zero ten and we can
14:32 - identify it as a negative number because
14:34 - it starts with a zero aha well let's
14:37 - code that up into our right number
14:39 - script we first check for negative
14:41 - numbers if the value Val is less than
14:44 - zero
14:48 - we'll use a set vowel block joining a
14:51 - zero digit on the left
14:53 - and we need to be careful to remove that
14:55 - negative sign from Val so we'll use the
14:58 - absolute value abs of Val
15:02 - simple enough click the test script and
15:04 - see how our negative 10 now becomes 0 1
15:07 - 0. of course preceded by 3 as it is
15:10 - three digits long including that new
15:12 - zero and that's cool because it passes
15:15 - the cloud rule test the same goes for
15:17 - negative 20.
15:19 - no negatives in sight
15:22 - next up then we need to decode these
15:24 - values currently if we read out the
15:27 - first encoded negative number we get
15:28 - back 0 10 in the variable vowel it
15:31 - should have been negative 10. so all we
15:34 - need to do is watch for the leading zero
15:36 - and then convert that number to a
15:38 - negative resulting in negative 10. we'll
15:42 - add this script to the bottom of the
15:44 - Define read number script
15:46 - if
15:47 - if first letter letter one of vowel is
15:51 - equal to zero then we set Val to be
15:56 - negative Val or in other words subtract
15:59 - Val from zero
16:02 - let's quickly test it and yes now we are
16:06 - getting back negative 10 just as we
16:08 - hoped click on the next read number
16:10 - block and out pops negative 20. this is
16:13 - great news it means we now have fully
16:15 - functioning encoding and decoding
16:17 - scripts wow finally we can put these two
16:22 - good use remember why we are doing this
16:24 - oh yes our Cloud Player was moving in
16:27 - steps because cloudwall 2 says we
16:29 - shouldn't update more than one Cloud
16:30 - available at a time well no problem now
16:33 - we can encode both the X and Y petitions
16:36 - into a single value so back to our
16:39 - original game Loop We Begin by setting
16:41 - the encoded string variable to empty and
16:45 - then using our right custom block to
16:47 - encode first the X position and then the
16:50 - Y position of this Sprite after that all
16:54 - we need to do is set Cloud 1 to the
16:56 - encoded string super that sorts out
17:00 - player one and the cloud available will
17:03 - make its way over to player 2's computer
17:05 - which is running this script all we need
17:08 - to do now is decode the values out of it
17:10 - Begin by setting encoded string to the
17:14 - new value from the cloud one then set
17:17 - encoded index to 1. to start decoding
17:21 - from the very first letter now we use
17:24 - our read custom block to get the first
17:26 - value out of the encoded string this is
17:29 - an X position so immediately set the x
17:32 - position to vowel
17:34 - then we can do the same again read a
17:36 - value and this time set y position to
17:39 - Val excellent because that my friends is
17:43 - all there is to it
17:45 - to test this out make sure the project
17:48 - is saved and then get those two browser
17:50 - tabs side by side remembering to reload
17:53 - the right hand page if you kept it open
17:55 - all this time now with both projects
17:57 - running I'll click into the right window
18:00 - and press the two key gotta remember to
18:02 - do that when my mouse is over the left
18:04 - hand window the cat in the right window
18:06 - follows my emotions but how much better
18:10 - is this we can move the player
18:12 - diagonally and the cloud player doesn't
18:14 - glitch sideways at all nope no stepping
18:17 - to be seen also the lag between my left
18:20 - movement and my right movement is
18:21 - surprisingly small if you got this far
18:23 - then you can be pretty tough with
18:25 - yourselves it's super cool but we are
18:29 - far from perfect yet you will notice the
18:31 - movement on player 2 screen is more
18:34 - choppy than on the first screen this is
18:36 - because Cloud rule number two also
18:38 - states that we can't update a cloud
18:40 - variable faster than every one tenth of
18:43 - a second
18:44 - so even though we are only updating One
18:48 - Cloud available now we are still
18:49 - updating it at a rate of 30 times a
18:52 - second the rule is that scratch will
18:54 - only send 10 changes per second Max so
18:58 - two of every three animation frames we
19:00 - are sending are skipped this is far from
19:03 - ideal and is not the smooth gameplay
19:05 - action we might expect from a top class
19:07 - Network game so how do we fix this
19:11 - in the next episode of this exciting
19:14 - series we will learn how movement
19:16 - buffers and data streams can smooth out
19:19 - player motion making our games look Top
19:21 - Notch but in the process we'll also
19:24 - begin to expand our Cloud engine to take
19:26 - advantage of my latest massive
19:28 - multiplayer online techniques as seen in
19:30 - my MMO Minecraft and my MMO platformer
19:33 - projects these can easily handle vast
19:36 - numbers of players and are seriously a
19:38 - lot of fun the great thing about these
19:41 - is that they also make joining and
19:43 - leaving a game way more robust than my
19:45 - previous Cloud engines and support
19:47 - testing on that single unshared project
19:49 - a huge bonus for us scratch Developers
19:52 - well I hope you enjoyed this video if
19:55 - you did then please please smash that
19:57 - like button under the video did you
19:58 - click it and if you don't want to miss
20:00 - the next exciting episode and guys it's
20:03 - going to be so cool then make sure you
20:05 - subscribe to this Channel and that
20:07 - you've clicked that Bell icon to be
20:09 - notified lastly if you are interested in
20:12 - supporting this channel further then you
20:13 - can join my channel membership there are
20:15 - some cool perks and even the option to
20:17 - get access to the scratch projects that
20:19 - go along with each episode that's so
20:21 - cool that just leads me to say thank you
20:24 - for watching I hope you have a great
20:26 - week ahead and scratch on guys
20:33 - [Music]

Cleaned transcript:

foreign scratchers do you want to code an online cloud game in scratch perhaps even a massive multiplayer game with anything from two to over a hundred players well then you've come to the right place because I can show you how we can upgrade almost any scratch game to be a multiplayer game conceptually we just need each player to share their players position and cost you details because if we know where they are then we can display them in our game too in these tutorials we'll learn step by step how to create this fully backpackable Cloud engine that can be easily dropped into all your games and yes we'll cover Cloud variables data encoding buffering for smooth movement and of course how players join and leave our games so buckle up smash that like button and let our crazy fun journey into multiplayer coding begin guys let's get scratching but hold on are you a new scratcher you can check right here on your profile page sadly until you're invited to full scratcher status you won't be able to play or create Cloud games but before you start to panic all you need to do is share a few projects love and comment on my uh other people's projects and very soon you'll find an invite appears right here on your profiles page okay great let's start a new project in this first episode we are going to cover the basics of cloud variables how they work and perhaps more importantly how they don't work so if we create a new variable Cloud one you'll notice we have the option to create this as a cloud variable stored on the server and this is where the magic happens by storing a value on the Cloud Server every scratcher looking at your project will share the same value when we first create one of these we get a warning it reads please note cloud vowables only support numbers not letters or symbols and so we meet our first limitation Cloud variable rule number one you can't write letters and symbols to a cloud variable and that is a real pain Our Lives will be so much easier if we could stuff text into these things but that would be open to abuse so we are where we are numbers only okay shall we see the cloud variable in action when this Sprite clicked change the cloud variable by one a simple enough test just click the cat and we see Cloud 1 increases as expected but to test this properly we need to see the value changing on another scratches screen right that's the whole point well you could get the help of another scratcher to load up your project but for Simplicity we can actually test this all ourselves without even sharing the project which is great news because who wants to share an unfinished game make sure the project is saved and then switch to the project page and move that web browser to one side of the screen next we need to duplicate the current tab I did that by right clicking but you otherwise could just create a tab and find your project in the normal way it doesn't really matter and then I pull the new tab away from this browser window and drop it to the right okay this is looking good but both projects agree that cloud one has a value of three now when I click on the cat again the value changes to 4 but this time also changes to 4 in our second window two wonderful this is what cloud variables do they share their value with everyone else almost instantly but not quite instantly in fact it takes around one tenth of a second for the value to transfer from window 1 to window 2. a lag of around 100 milliseconds and yes you can click either cat and the update Works in both directions now there's only so much fun you can have clicking cats how can we go from this to this well let's start small say we have the scratch cat follow the mouse pointer and try to get the second window to mirror these movements now that would be cool when flag clicked Loop forever go to Mouse pointer we know Cloud variables can share a single number with another scratch project and a sprite's position is made up of two numbers given by an X position and a y position reporter block so why not create a second Cloud variable Cloud 2 and don't forget to check that cloud variable option and now we can set Cloud 1 to this Sprites X position and the Cloud 2 to the Y position nice running the project clearly shows both Cloud 1 and Cloud 2 updating okay since these values will be shared with window 2 we just need a second script to reposition the Sprite using these shared values when two key pressed this allows us to indicate which window is number two stop other scripts in Sprite this ensures window 2 won't be running these lefthand scripts instead we Loop forever setting the X position to the value shared with us in Cloud 1. and the same for y position but with cloud 2. nice we have to test this once again ensuring the project is saved then see project page and duplicate the tab if however you left the window open which often I do then make sure to reload that page otherwise the project will be out of date and may lead to confusion if things don't work as expected okay here we go both projects are running but I haven't pressed the number two key yet to proceed first click into the right hand window to ensure it has focus and then press the two key boom my cat just flew over to the right why did it do this well it's because the cap on my left screen is positioned to the right and this window is now copying its movements to here now let's bring my mouse back to the left and look the X and Y positions of the first bright are shared allowing us to reposition the second Sprite to match the first one this is basically how multiplayer games are coded in scratch but wait do you notice something a bit off the right hand window seems to be mimicking the movements of the left window that's great but it's far from smooth Houston we have a problem upon closer inspection you'll see that the movement occurs in steps only horizontal left and right or vertical up and down it's quite peculiar isn't it well I did mention that cloud variables have their limitations and we're witnessing some of them right before our eyes the first limitation is this Cloud variable rule number two scratch weights a tenth of a second between sending Cloud updates in other words no matter how quickly you update Cloud variables scratch will only send them at a maximum rate of 10 per second unfortunately this rule also applies when we set two Cloud variables together in our case the X and Y positions resulting in one change being sent before the other and thus the Sprite moves horizontally then vertically instead of a smooth diagonal line ah there is no way around this restriction so the only way to share our X and Y values at once is to combine them and send them using a single Cloud variable instead well how about we just join these two values together for example an x value of 176 joined with a Y value of 40 would come out as one seven six forty well that worked but now we Face the challenge of not being able to distinguish where one number ends and the next one starts the problem is we can't insert a separator character because of cloud rule number one which states that you cannot store letters and symbols in a cloud variable so here is an idea let's record the length of the first number three before the number itself and we'll do the same for the second number two then we can join all the information together to give our encoded string value has that helped us yes because to extract the numbers back out again we simply look at the first digit which is a three then we read out the next three digits which gives us one seven six that is our x value the following digit is a two and then we read the next two digits and we obtain forty as our y value clever stuff let's code this up create a new variable named encoded string for this Sprite only and make sure to set it to an empty value now we'll create a custom block to let us add individual numbers to this encoded string name it write number with a number input of Val short for value and another label of two encoded string right number Val to encoded string perfect make sure to run without screen refresh so it runs nice and fast so after clearing the encoded string variable let's try writing the number one to the encoder string yes this will want to be the X position of the Sprite going forward but always start off simple now to code up that custom block create another variable also called Val for this Sprite only and set Val to the input Val clicking the script above will set Val to 1 as expected now the reason we're using another variable for vowel is to safeguard against fractional values like say a hundred point five this would really mess up our encoding so we'll pop in a rounding operator to remove the issue before it occurs great so then we simply set encoded string to the join to itself encoded string and OK two more things so another join the length of the variable vowel not the pink one but the orange one we just rounded and then the value itself a length of 1 and the number one should come out as 1 1 11. pop that on the end of the encoded string and this custom block is done we can test it by clicking the above script again and encoded string is indeed 11. well how about we write a second number two click not a problem one digit the number two and a longer number three four five click we see three digits followed correctly by three four five great now the next step is to retrieve these numbers from the encoded string which is known as decoding the key to this is to keep track of our current position in the encoded string as we start from left and progress across to accomplish this we'll introduce a new variable named encoded index idx for short specific to this Sprite this variable will serve as our tracker we'll initialize the encoded index available to one indicating the starting position as the first digit of the encoded string next let's create a custom block responsible for decoding each number we'll name it Val equals read number from encoded string apologies for the lengthy name but it accurately describes the Block's purpose remember to set the block to run without screen refresh for Optimal Performance to facilitate testing let's plug in the code right away assuming the encoded string variable begins 1 1 1 2 for the initial read we aim to retrieve the number one for the length and another one for the value itself first let's ensure that the valve variable is empty at start next we'll retrieve the value of the current letter in the encoded string which will be 1 as expected just remember the current position is given by the encoded index variable right so we can agree that this Returns the number of digits that we need to read in to get the full value so how about we use a repeat block for that exact number currently we will repeat only once but for longer numbers it will repeat around as many times as there are digits we need the next digit so let's immediately change encoded index by 1. and now letter encoded index of encoded string will give us the next digit in the encoded string we'll want to append this digit to the Val variable by setting Val to the join of vowel and this next digit this repeat Loop will then do its job looping around adding digits to Val the only thing left to do is to ensure that we increment encoded index by one more at the end so we are positioned to read the next number from the encoded string well this is exciting we can now test if we can correctly decode these numbers click this script and confirm that we obtain the first value which is one nice there it is in the vowel variable to get the next one we simply need to run a read Number Block on its own click Splendid there's our number two and with one more click we get three four five it perfectly matches the order and value of our encoded numbers great with this we can encode and retrieve our numbers however we mustn't forget that the screen positions of Sprites can often go negative if we try to encode a negative number like negative 10 then oh dear 310 that will definitely fail Cloud rule number one as it's not a valid number somehow we need to encode negative numbers without using the negative symbol well since no numbers will begin with a zero and the negative symbol always appears at the start of a number how about we simply replace the negative symbol with a zero instead so negative 10 will become zero ten and we can identify it as a negative number because it starts with a zero aha well let's code that up into our right number script we first check for negative numbers if the value Val is less than zero we'll use a set vowel block joining a zero digit on the left and we need to be careful to remove that negative sign from Val so we'll use the absolute value abs of Val simple enough click the test script and see how our negative 10 now becomes 0 1 0. of course preceded by 3 as it is three digits long including that new zero and that's cool because it passes the cloud rule test the same goes for negative 20. no negatives in sight next up then we need to decode these values currently if we read out the first encoded negative number we get back 0 10 in the variable vowel it should have been negative 10. so all we need to do is watch for the leading zero and then convert that number to a negative resulting in negative 10. we'll add this script to the bottom of the Define read number script if if first letter letter one of vowel is equal to zero then we set Val to be negative Val or in other words subtract Val from zero let's quickly test it and yes now we are getting back negative 10 just as we hoped click on the next read number block and out pops negative 20. this is great news it means we now have fully functioning encoding and decoding scripts wow finally we can put these two good use remember why we are doing this oh yes our Cloud Player was moving in steps because cloudwall 2 says we shouldn't update more than one Cloud available at a time well no problem now we can encode both the X and Y petitions into a single value so back to our original game Loop We Begin by setting the encoded string variable to empty and then using our right custom block to encode first the X position and then the Y position of this Sprite after that all we need to do is set Cloud 1 to the encoded string super that sorts out player one and the cloud available will make its way over to player 2's computer which is running this script all we need to do now is decode the values out of it Begin by setting encoded string to the new value from the cloud one then set encoded index to 1. to start decoding from the very first letter now we use our read custom block to get the first value out of the encoded string this is an X position so immediately set the x position to vowel then we can do the same again read a value and this time set y position to Val excellent because that my friends is all there is to it to test this out make sure the project is saved and then get those two browser tabs side by side remembering to reload the right hand page if you kept it open all this time now with both projects running I'll click into the right window and press the two key gotta remember to do that when my mouse is over the left hand window the cat in the right window follows my emotions but how much better is this we can move the player diagonally and the cloud player doesn't glitch sideways at all nope no stepping to be seen also the lag between my left movement and my right movement is surprisingly small if you got this far then you can be pretty tough with yourselves it's super cool but we are far from perfect yet you will notice the movement on player 2 screen is more choppy than on the first screen this is because Cloud rule number two also states that we can't update a cloud variable faster than every one tenth of a second so even though we are only updating One Cloud available now we are still updating it at a rate of 30 times a second the rule is that scratch will only send 10 changes per second Max so two of every three animation frames we are sending are skipped this is far from ideal and is not the smooth gameplay action we might expect from a top class Network game so how do we fix this in the next episode of this exciting series we will learn how movement buffers and data streams can smooth out player motion making our games look Top Notch but in the process we'll also begin to expand our Cloud engine to take advantage of my latest massive multiplayer online techniques as seen in my MMO Minecraft and my MMO platformer projects these can easily handle vast numbers of players and are seriously a lot of fun the great thing about these is that they also make joining and leaving a game way more robust than my previous Cloud engines and support testing on that single unshared project a huge bonus for us scratch Developers well I hope you enjoyed this video if you did then please please smash that like button under the video did you click it and if you don't want to miss the next exciting episode and guys it's going to be so cool then make sure you subscribe to this Channel and that you've clicked that Bell icon to be notified lastly if you are interested in supporting this channel further then you can join my channel membership there are some cool perks and even the option to get access to the scratch projects that go along with each episode that's so cool that just leads me to say thank you for watching I hope you have a great week ahead and scratch on guys
