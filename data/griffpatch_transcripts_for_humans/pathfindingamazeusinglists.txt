With timestamps:

00:00 - [Music]
00:02 - hello fellow scratchers
00:03 - i'm griff patch and today we are looking
00:05 - again at our exciting pathfinding
00:07 - project in scratch
00:09 - and since last time we've been set quite
00:11 - a challenge
00:13 - to pathfind our way through this
00:14 - detailed vector maze
00:16 - seriously wow i love it this is going to
00:19 - be fun
00:21 - our previous pathfinding tutorial had us
00:23 - tracing the shortest routes to a level
00:25 - using these coloured arrow clones the
00:28 - reward for using clones was simpler
00:30 - scripts
00:31 - but due to the 300 clone limit it meant
00:33 - we couldn't make our levels any more
00:35 - complex than you are already seeing here
00:38 - also because we use the colour of the
00:40 - tiles to direct the scratch cats through
00:42 - the maze
00:43 - we also ran into other problems where
00:46 - are these cats going
00:48 - the cats could cover up the coloured
00:49 - tiles so that they didn't know where to
00:51 - go
00:52 - oh no disaster but if we don't use
00:56 - clones
00:57 - how else can we keep track of the
00:58 - pathways luckily
01:00 - if you've been following my recent
01:01 - tutorials then you'll also have seen an
01:04 - episode on
01:04 - grid lists this technique allows us to
01:07 - scan a level at high resolution into
01:09 - scratch lists
01:11 - and once there we can ditch using clones
01:14 - and sensing blocks for the pathfinding
01:16 - and switch to using the grid lists alone
01:18 - yes
01:19 - these two tutorial projects brought
01:21 - together could make a truly powerful
01:23 - combination
01:25 - so before you can try to tackle this
01:27 - project yourselves
01:28 - make sure you have watched the two
01:29 - previous videos we will need the
01:32 - completed projects available to us
01:34 - before we can tackle today's challenge
01:35 - together
01:36 - you'll find a link to the first
01:37 - pathfinding and the gridless tutorials
01:40 - below this video
01:41 - guys let's get scratching
01:45 - i'm going to bring up my grid lists
01:46 - project first
01:48 - i just want to point out that the grid
01:49 - sprite is the one that does all the work
01:52 - here is a level sprite this is the
01:54 - costume being scanned to a list
01:57 - if i run the project oh yeah look at the
01:59 - detail on that
02:00 - i cannot wait to get that into the
02:02 - pathfinding project
02:04 - all we need to do is open up the
02:05 - backpack and drag in the entire grid
02:08 - sprite next up
02:11 - load up the simple pathfinding tutorial
02:13 - project
02:14 - i'll just confirm that the project is
02:16 - all working yep
02:18 - perfect i have to say that the color
02:20 - arrows although
02:21 - not practical in a real game do look
02:23 - really nice
02:25 - now i don't want to destroy this
02:26 - previous project and i advise you to do
02:29 - the same so
02:29 - go to the file menu and save the project
02:32 - as a copy
02:33 - now give it a new name like pathfinding
02:36 - with grid lists
02:37 - yeah so before we begin bringing our
02:41 - projects together
02:42 - let's have a quick recap of the sprites
02:44 - and code starting with the stage
02:46 - two scripts in here the first spawns new
02:49 - cats with the space
02:50 - bar useful the second was a simple hack
02:53 - we tried to use it to hide the pathway
02:55 - clones it worked to some extent
02:58 - but we are going to do things better
02:59 - this time round so
03:01 - just delete that now next we have the
03:05 - cat sprite
03:05 - basically there are two forever loops in
03:07 - here that run for each cat clone
03:09 - the first moves the cat forward looks at
03:12 - the colour of the arrow below its feet
03:14 - and turns the cat accordingly
03:15 - the second forever loop is waiting for
03:17 - the cat to touch the apple before
03:19 - despawning it
03:21 - now the apple sprite this is just
03:23 - looking for mouse clicks in case the
03:25 - apple is moved
03:27 - then it broadcasts that we need to
03:28 - recalculate the shortest routes through
03:30 - the level
03:31 - the may sprite yeah this is my favorite
03:34 - kind of sprite
03:34 - it really doesn't do anything less to
03:37 - explain right
03:39 - however remember that our grid list
03:41 - project is scanning a sprite named
03:43 - level let's rename the sprite to match
03:46 - that
03:47 - level good and lastly the path sprite
03:51 - this is where the magic happens right
03:53 - from the first green flag click
03:55 - the first path sprite is positioned at
03:57 - the apple the target of the pathfinding
03:59 - and then the sprite
04:01 - tried to clone itself in all four
04:03 - immediate directions
04:04 - upright down and left this is only done
04:07 - though where no collision with the level
04:09 - occurs
04:10 - so as this process repeats the pathway
04:13 - flows outwards filling
04:14 - every reachable point and leaving behind
04:16 - a followable trail of arrows back to
04:19 - where they started
04:20 - the apple nice we are ready to bring
04:24 - in the grid scanning sprite but just
04:28 - while we are here in the path sprite
04:30 - separate off with me the find path block
04:32 - from the when green flag clicked
04:35 - we are going to want the new scanning
04:36 - scripts to run first
04:38 - so open the backpack and drag in the
04:40 - grid sprite
04:43 - right there are a few things we need to
04:45 - check and update
04:46 - the set tile width here is setting how
04:48 - large each tile in our tile grid is in
04:51 - pixels
04:52 - the current pathway code uses 32 pixel
04:54 - tiles
04:56 - for now then let's set this to
04:59 - 16 that will effectively quadruple the
05:02 - number of tiles in use
05:03 - an impressive start next i want to
05:06 - double check
05:07 - in the define scan script that the
05:09 - touching block indeed is set to scan the
05:11 - correct
05:11 - level costume just as we have set it in
05:14 - this project
05:16 - yeah that's good it has to be exactly
05:18 - the same
05:19 - capital letters and all just change it
05:21 - here if it's not
05:23 - okay then let's run the project and
05:25 - check the initial scan
05:26 - works there yes the scan is picking up
05:30 - the level walls
05:31 - nicely and you can see right off that
05:33 - the detail is looking a lot better
05:36 - if i move the apple around you can see
05:37 - that the pathway tiles created are much
05:39 - bigger
05:41 - so what did this level scan do the
05:44 - drawing of the purple tiles
05:45 - is not the purpose no that's just so
05:48 - that we can see that the process
05:49 - worked the important thing is that the
05:51 - level has been encoded into the grid
05:54 - list
05:55 - we have hashes representing walls and
05:57 - blank rows for empty space
06:00 - what i am thinking is that going forward
06:02 - we not only store the level walls in
06:04 - this list
06:05 - but we might also store the coloured
06:07 - pathways in here too
06:10 - these blank rows could easily be used to
06:12 - store the directions a cat needs to move
06:14 - in to reach their target apple
06:16 - that would then remove the need for the
06:18 - clones and the colour sensing and
06:19 - keeping everything neatly in the grid
06:22 - list i'm excited to try this idea but to
06:24 - make things
06:25 - easier for our pathfinding going forward
06:27 - we need to make one tweak
06:30 - you may remember that in a grid list if
06:32 - you move across the grid and off one
06:34 - side
06:34 - mathematically you end up wrapping
06:36 - around and appearing on the opposite
06:38 - side
06:39 - just one row up well to fix this i'm
06:42 - going to add an
06:43 - extra column full of walls up the right
06:46 - hand side of the grid level
06:48 - this will stop anything wrapping around
06:50 - while we try to pathfind later on
06:53 - so add 1 to the grid columns variable
06:56 - that's our extra column then come down
06:59 - to here where we're scanning the level
07:01 - we don't want to scan that last new row
07:04 - so subtract 1 from the grid columns
07:07 - no we want to always add a hash for the
07:10 - last column so add a hash to grid
07:12 - just before we move to the next row with
07:14 - a change y
07:17 - okay give the project a quick test there
07:20 - should be no visible change after that
07:21 - as the new wall is off screen to the
07:23 - right yeah good
07:26 - now back in the code i'm just looking at
07:28 - this second green flag script
07:30 - in the grid sprite this was added to
07:32 - allow us to draw new tiles into the grid
07:34 - using the mouse
07:35 - we won't be needing that this time so
07:38 - i'll separate it off from the hat block
07:39 - to stop it running
07:41 - what else do we have in here ah get tile
07:45 - at x y
07:46 - it's amazingly useful given a position
07:48 - on the screen
07:49 - x and y it gives us back the index that
07:52 - is the row number
07:53 - in the grid list that represents that
07:55 - tile so
07:56 - it also gives us the value of the tile
07:58 - itself
07:59 - super useful equally useful
08:02 - is the position at index idx script
08:06 - this does the opposite taking idx a row
08:09 - number
08:09 - in the grid list and setting the current
08:11 - sprite to be positioned at where that
08:13 - row represents
08:14 - on the screen we are going to need these
08:17 - in our updated pathfinding sprite
08:19 - so let's drag them both into the path
08:21 - sprite now
08:26 - so lastly once our scan is complete and
08:28 - the grid list populated
08:30 - we add in a broadcast for a new event
08:34 - named
08:35 - begin this will trigger the pathfinding
08:38 - scripts to begin
08:41 - and it's time to get to work click into
08:43 - the path sprite
08:45 - straight off we need to move the two new
08:48 - custom blocks into some free space
08:50 - we'll make use of these shortly okay so
08:53 - we separated off the green flag script
08:55 - earlier
08:56 - let's replace this now with a when i
08:58 - receive begin
08:59 - event hat block and reattach the find
09:02 - path block
09:03 - this will now run once the level has
09:05 - been scanned
09:07 - right costume sizes if we check out the
09:10 - costumes you can see our original
09:12 - pathfinding tiles were 32 by 32 pixels
09:14 - in size
09:15 - with a small gap between tiles but our
09:18 - new grid scanning sprite uses a variable
09:21 - named tile
09:22 - width to store the desired width of our
09:24 - tiles in pixels
09:25 - we should therefore resize the costume
09:27 - from 32 pixels
09:28 - to match this new size so set size to
09:31 - 100 that's the full size divided by 32
09:35 - that reduces our size down to one pixel
09:37 - wide
09:38 - and multiply by tile width to bring it
09:40 - back to the size we want
09:42 - cool so let's follow through the scripts
09:44 - and see what we need to change to make a
09:45 - safe transition from sprite sensing with
09:48 - clones
09:49 - to grid lists find path
09:52 - is the first script that runs
09:54 - positioning itself
09:55 - at the apple and here we have a touching
09:57 - block
09:58 - this is the first sensing block used and
10:01 - is here to prevent our pathways being
10:03 - traced
10:04 - if the apple starts over a wall
10:07 - instead of using the touching block we
10:09 - must use our very handy new custom block
10:11 - get tile
10:12 - at x y and feed it the x position and y
10:15 - position of
10:16 - this sprite let me pull up what this
10:18 - script does over here
10:20 - you can see it sets the tile variable to
10:22 - the item found in the grid list
10:24 - at the given screen location so instead
10:26 - of the touching level block
10:28 - we can now replace it with an if tile
10:31 - equals
10:34 - hash remember hashes represent walls in
10:37 - this case
10:38 - we don't want to continue so i'm going
10:40 - to hide the sprite
10:41 - and stop this script however if not
10:45 - then we can begin plotting our pathway
10:47 - through the level yay
10:49 - see that's a pretty straightforward
10:50 - change isn't it our get tired xy is like
10:53 - a go to xy
10:54 - and comparing tile to hash is like the
10:57 - touching level block
10:58 - only it runs way faster in scratch which
11:01 - is rather handy
11:02 - and a good reason why advanced
11:03 - scratchers use lists so much
11:07 - and now to understand the following
11:08 - changes to our code we are going to need
11:10 - to understand a little bit more scratch
11:13 - type theory did you know that scratch
11:15 - never runs two scripts at once
11:18 - nope scratch is what we would refer to
11:20 - as single threaded
11:22 - you can ask it to run lots of scripts
11:24 - apparently running simultaneously across
11:26 - many sprites and clones
11:28 - using hat blocks broadcast receivers and
11:30 - loops so
11:31 - how can it be scratch only runs one at a
11:33 - time that can't be right
11:35 - the answer is that scratch is just
11:37 - really good at running scripts
11:38 - in the right order one after the other
11:41 - and it keeps track of what to run
11:43 - when in its own internal to-do list
11:46 - whenever a broadcast is made a key is
11:48 - pressed or a clone is created
11:50 - scratch takes note of what scripts will
11:52 - need to be run where
11:53 - and adds them to the bottom of its to-do
11:56 - list
11:57 - this means that when scratch does get
11:59 - around to choosing its next script to
12:00 - run
12:01 - it will simply take the one from the top
12:03 - of the to-do list
12:04 - and off it goes this way scripts are
12:07 - always run
12:08 - in the order they were requested this is
12:10 - exactly the process that makes our
12:12 - original pathfinding scripts work with
12:14 - the clones
12:15 - as the order in which the when i start
12:17 - as clones run
12:18 - it's the same order in which the clones
12:20 - were originally created
12:21 - that is each new clone created has its
12:24 - when i start as a clone script
12:26 - added to the to-do list ready to run but
12:29 - it won't run until all the other when i
12:30 - start as clone scripts above it on the
12:32 - list have run first
12:34 - this behavior is exactly what makes the
12:36 - pathfinding scripts work
12:38 - therefore to replicate this behavior
12:40 - without clones we will make our
12:42 - own to-do list make a new list naming it
12:45 - to do indexes for this sprite only
12:49 - okay we only just put this script back
12:52 - but actually delete it for now
12:54 - what we really need to do before
12:56 - starting down this thrilling new road
12:58 - is to first clean up the grid list why
13:00 - is that well
13:01 - our pathfinding scripts will be stuffing
13:03 - all the path directions into this grid
13:05 - list
13:06 - so when the apple is later moved and we
13:07 - want to recalculate pathways again
13:09 - we will need to remove all the
13:11 - directions from the list leaving only
13:12 - the walls the hashes
13:14 - so get out your broom and create a new
13:16 - custom block named
13:18 - clean the grid list run without screen
13:21 - refresh
13:24 - we'll begin by erasing all the stamped
13:26 - costumes from the pen canvas
13:30 - next we'll delete all of our new to do
13:32 - index list
13:33 - yeah we're going to clean things up
13:34 - nicely so to keep track of things as we
13:38 - clean the grid list
13:39 - create a new variable naming it next
13:41 - index
13:43 - for this sprite only
13:46 - set it to zero
13:50 - and begin a repeat loop this loop wants
13:52 - to run
13:53 - over the entire grid list that would be
13:55 - grid columns
13:56 - multiplied by grid rows although i could
13:59 - have just used the length of grid now i
14:01 - think about it
14:02 - now change next index by one this will
14:04 - allow us to work our way through the
14:06 - entire grid list one row at a time
14:08 - so we need to check whether the next
14:10 - grid item is a wall
14:12 - if item next index of grid is not equal
14:15 - to a hash
14:20 - not a wall then we are going to replace
14:22 - the same item with a question mark
14:25 - we'll use question marks to mean tiles
14:27 - that are not walls
14:28 - that are yet to be visited by the
14:30 - pathfinding script
14:32 - there after this is finished the entire
14:34 - grid list will be filled with only
14:36 - hashes and question marks
14:40 - so that's the cleaning scripts done so
14:43 - come back to the define
14:44 - find path script and pop in the clean
14:47 - grid block we just made
14:50 - so we are ready to take our first step
14:52 - in a new path find
14:54 - we'll mark the spot in the grid list by
14:56 - replacing item index
14:57 - of grid with zero remember index has
15:00 - already been set when we use the get
15:02 - tile at x y just above so it's the
15:05 - position of the apple
15:06 - in the grid list we record a direction
15:08 - of zero
15:09 - it doesn't matter which direction we
15:11 - start with as we've already reached the
15:12 - target
15:13 - and now because we've updated the grid
15:15 - tile we also add
15:17 - index to our to-do indexes list wait
15:21 - what
15:21 - so this is the fun part where we are
15:24 - saying we want to come back and process
15:26 - this tile
15:27 - at our next convenience but because it's
15:29 - added to the bottom of the to-do list
15:31 - everything above it in the list will be
15:33 - actioned first
15:35 - i think we can safely run our project
15:36 - here and when i do
15:38 - we can see an item get added to the
15:40 - to-do list that's a good sign that
15:42 - things are working
15:43 - also if i move the apple and run the
15:45 - project again i can see the index
15:47 - changes
15:48 - as would be expected okay make sure you
15:51 - are still in the path sprite
15:53 - what we need to do next is start working
15:55 - through our to-do list
15:56 - yeah it's only got a single item in it
15:58 - at the moment but very soon
16:00 - that is going to grow so repeat until
16:02 - the length of to-do indexes
16:04 - equals zero that will keep us looping
16:07 - there until there is no items left to be
16:09 - actioned
16:10 - after which we can just hide this sprite
16:13 - what do we do inside the repeat loop we
16:15 - put back the try moving in directions
16:17 - block
16:19 - excellent so now we have a loop that
16:21 - works its way through all the tiles that
16:23 - are waiting to be processed
16:25 - we therefore no longer need these
16:26 - scripts triggering the same thing when
16:28 - starting as a clone
16:30 - so delete that we also don't need this
16:32 - when i receive reset path
16:34 - again we don't have any clones to delete
16:37 - oh
16:37 - and this when i receive hide path that's
16:40 - trash 2.
16:41 - right back to our define try moving in
16:44 - all directions script
16:45 - as you might expect things have got to
16:47 - change separate off the entire script
16:50 - and keep it for reference let's begin
16:52 - with the costumes themselves
16:54 - these are 100 cosmetic now they are not
16:57 - used for anything but to let us know the
16:59 - pathway is working correctly
17:01 - let's simplify things by changing the
17:03 - first costume to be a simple
17:05 - large arrow head since the tiles will be
17:08 - much smaller we need a bigger arrow to
17:10 - be able to see it clearly
17:11 - now delete the following three costumes
17:14 - as i said the color will mean nothing
17:16 - from now on
17:17 - back to our code begin by making a new
17:20 - variable named
17:22 - current index for this sprite only
17:28 - and set it to item 1 of to do indexes
17:34 - that's the item that was added first to
17:36 - our to-do list
17:38 - once we have the value we can delete
17:39 - item one of the to-do list to indicate
17:41 - we have actioned it
17:43 - now let's find out what direction was
17:45 - recorded at the position in the grid
17:46 - list
17:47 - make a new variable named der dir for
17:50 - direction
17:53 - and set it to item
17:58 - current index of grid if you remember we
18:01 - just put a zero at this location
18:03 - so at first duh will be zero
18:06 - but as the script run this will be
18:08 - whatever direction the pathway was last
18:10 - moving in
18:11 - right to be able to see whether this is
18:13 - working we're still drawing the pathway
18:15 - to the screen
18:17 - to do this we use the position at index
18:19 - block with the current index that we are
18:21 - actioning
18:22 - then point in direction der the
18:24 - direction we are facing
18:26 - and simply stamp
18:29 - great and now we can test that the first
18:32 - pathway step is being placed
18:34 - move the apple to a free space on the
18:35 - level and then click the green flag
18:38 - look behind it and the pathway arrow is
18:41 - stamped there
18:42 - press the green flag again and once
18:44 - again the stamp is correctly positioned
18:46 - success click back into the path sprite
18:49 - and we can hide the to-do list now
18:51 - so we know we are in the right location
18:54 - the next step is to replicate the
18:56 - previous scripts that did the
18:57 - pathfinding firstly we need to loop
19:00 - around
19:00 - four times once for each possible
19:03 - direction
19:04 - now the next step was to move forward by
19:06 - one tile
19:08 - okay so that's a little bit more complex
19:10 - when we are working in a grid
19:11 - list to move left or right we add or
19:14 - subtract one from the index
19:16 - and to move up and down we add or
19:17 - subtract a full number of columns
19:20 - however we always start at the current
19:23 - index
19:24 - so set next index to current index plus
19:28 - we'll do left and right movement first
19:31 - we know the direction we are facing
19:33 - it's stored in the direction der do you
19:35 - remember me talking about the maths of
19:37 - sine and cos operators before
19:39 - these can be used to move the x and y
19:41 - replicating what a move in direction can
19:43 - do
19:44 - for that reason we can add sine der to
19:46 - the index to move it left or right
19:49 - by one tile then up and down we change
19:52 - next index by this time we need to
19:55 - multiply
19:56 - and change by grid columns multiplied by
19:59 - because that's how you move up and down
20:00 - in a grid list multiplied by
20:03 - cos of der did that make any sense at
20:05 - all to you
20:06 - it kind of blows my mind when i think
20:08 - too hard about it
20:10 - with the movement done we should check
20:11 - whether the grid item is empty
20:13 - or not as we only want to move into
20:16 - empty grid cells
20:18 - if item next index of grid is a question
20:20 - mark
20:21 - ah right question mark that's right we
20:24 - filled all the non-wall
20:26 - cells with these so a question mark
20:28 - means we are good
20:29 - to move into that direction so we
20:32 - replace
20:33 - item next index of grid with okay we
20:36 - could just put der in here
20:37 - but if we did this number will just keep
20:39 - getting bigger and bigger so
20:40 - let's constrain it to be a number from
20:43 - zero to 360
20:45 - by using de mod 360.
20:48 - that way it'll wrap around back to zero
20:50 - again
20:52 - now do you remember how we ensure this
20:54 - new pathway will get
20:55 - processed in future yeah we add next
20:58 - index
20:59 - to to-do indexes finally
21:02 - the last script in this repeat loop
21:05 - change dir by 90.
21:09 - can you see why i did this using clones
21:11 - in the first tutorial
21:13 - it's way more complex to understand when
21:15 - written like this
21:16 - but hey we're all learning scratches
21:18 - here so it's good to push ourselves to
21:20 - understand new things
21:22 - and that's all the pathfinding scripts
21:24 - written aha well i am stoked shall we
21:27 - give it a test
21:28 - go full screen and hit the green flag
21:32 - wowzers that's pink but it's good pink
21:35 - look at all the arrows they are facing
21:37 - the right directions and there are a lot
21:39 - more of them
21:40 - than we had in our first pathfinder
21:42 - tutorial that's a real point of success
21:45 - do you think we can move the apple oh
21:47 - yeah
21:48 - that is cool and it's also pretty smooth
21:52 - i'm dead pleased with that
21:55 - i wonder what scratchcat thinks of it
21:57 - let's find out hit the space
22:00 - ah it appears he doesn't think much of
22:03 - it yet
22:03 - no neither do his pals they are still
22:06 - expecting to see
22:07 - colours on the screen to tell them where
22:09 - to go and they don't have a clue how to
22:11 - read the grid
22:12 - list oh my what made that little fellow
22:14 - so special
22:15 - okay click into the cat sprite
22:18 - so if i scroll over here to find the
22:21 - define get
22:22 - next direction custom block you can see
22:24 - this is where colors
22:25 - make prizes well they tell us which way
22:28 - to turn anyhow
22:30 - we need to transition from using colors
22:32 - to grid lists
22:33 - how can we find out what grid item is
22:35 - under the cat sprite
22:37 - we need to turn back to our useful
22:38 - custom blocks click into the grid sprite
22:41 - and we'll copy
22:42 - the define get tile xy into the cat
22:44 - sprite
22:46 - great now back in the cat sprite move
22:49 - the custom block into some free space
22:53 - we'll get the tile at the x position and
22:55 - y position of the cat sprite
23:02 - and then we can check whether the tile
23:04 - returned
23:05 - was greater than minus one
23:09 - it turns out that this will be false for
23:12 - a hash
23:13 - so this works well all directions are
23:15 - greater than minus one
23:17 - so it's a directional right so set next
23:19 - direction to
23:20 - tile plus 180 we add 180 because the
23:24 - directions recorded in the grid lists
23:26 - are actually flowing away from the apple
23:28 - not towards it
23:29 - adding 180 reverses that direction so we
23:32 - will travel towards the goal
23:34 - delete the rest of this old scripts and
23:36 - we are good to run the project again
23:39 - let me spawn a new cat
23:42 - oh my that is sensational i'm so pleased
23:44 - that that change was so easy compared to
23:46 - the rest
23:47 - i can move the apple oh hang on the cat
23:50 - still
23:50 - all despawned when i moved the apple
23:52 - that's anticlimactical
23:54 - and completely unrequired now in the cat
23:57 - sprite
23:58 - find the when i receive reset path
24:01 - and we can just delete this script
24:05 - run the project again spawn some cats
24:08 - and now moving the apple around yay we
24:11 - have success
24:12 - this was not possible in our clone based
24:14 - pathfinding engine
24:15 - we can now have a moving target and all
24:18 - the cats follow us
24:19 - changing routes as the target changes i
24:21 - could play with this for ages
24:26 - but i can spot a problem did you see
24:29 - those cats walking
24:30 - through the wall this is not any fault
24:33 - of our pathfinding
24:34 - this is down to the simple nature of our
24:36 - cat's simple movement scripts
24:40 - look here all we do is move the cat
24:42 - forward
24:43 - and then turn left or right never
24:46 - stopping if we actually hit a wall
24:48 - perhaps we can address that before we
24:50 - look at making the maze any more complex
24:53 - move into some free space and make a new
24:55 - block named
24:56 - try move with a numeric input of dx
24:59 - and another of dy run without screen
25:02 - refresh
25:03 - we're going to check what is in the grid
25:05 - cell if we move the cat by dx and dy
25:09 - so get tile at
25:12 - x position plus dx and y position
25:17 - plus d y now we can check again if tile
25:21 - is greater than -1
25:22 - if it is then this is not a wall so we
25:24 - can move into that space
25:28 - change x by dx and change y by d
25:31 - y next come back to the define follow
25:34 - path custom block
25:36 - we're wanting to replace this move two
25:38 - steps block again we will change this
25:41 - move into two
25:42 - separate move x and move y's using
25:45 - sine and cos so use two try moves
25:49 - we split it into two so that if moving
25:52 - in the x or y direction fails we can
25:54 - still succeed
25:55 - with the other direction this helps
25:57 - smooth out movement in a grid system
26:00 - our x movement will be 2 multiplied by
26:03 - the sine of direction
26:05 - and the y movement will be 2 multiplied
26:07 - by the cos
26:09 - of direction the twos here
26:12 - are the speed of movement just as we
26:13 - originally were moving forward by two
26:15 - steps
26:17 - just before testing we can scroll down
26:21 - to the when i starters clone that
26:23 - contains the wait until touching apple
26:25 - or
26:26 - edge script i want to replace this now
26:28 - with a wait until distance to apple
26:31 - is less than
26:36 - tile width the reason is that
26:39 - as we work with more detailed maps i
26:42 - don't want scratch cat to be able to
26:43 - touch the apple through
26:45 - walls and we can test again
26:54 - a few cats is not really enough to tell
26:55 - if this is working let me spawn more
27:00 - oh now i'm not a fan of these stuck cats
27:03 - we'll need to bug fix that first as they
27:06 - are making it hard to see
27:07 - the cats in question are simply ones
27:09 - that are spawned on top of a wall
27:11 - in the cat sprite find that when i start
27:14 - as a clone and look for the get next
27:16 - direction block
27:17 - if we spawn on top of a block then at
27:19 - this point tile will be a hash
27:21 - so if tile equals hash
27:27 - simply delete this clone
27:31 - and off we go again and let's play
27:35 - i'm going to spawn loads of cats notice
27:38 - they are no longer spawning on walls so
27:40 - that is great and now let's move the
27:42 - apple around and see if we can see any
27:43 - naughty kitties
27:48 - and the answer is no i cannot it's
27:51 - working flawlessly
27:52 - what an achievement
27:56 - oh yes this is great and that
27:59 - brings us back to our original challenge
28:02 - can we navigate this high-res circular
28:05 - maze costume
28:06 - what makes this so much more complex is
28:09 - that curves do not fit well into tile
28:11 - grids
28:12 - to get enough detail we'll have to up
28:14 - the grid size considerably
28:16 - click into the level sprite and the
28:18 - costume editor tab
28:20 - i'm going to import a new costume this
28:23 - maze svg
28:25 - if you want the costume then you can
28:26 - find a link to it under this video
28:29 - move the apple to the middle of the maze
28:31 - now
28:32 - switch to the grid sprite so that we can
28:34 - set things up
28:37 - just for a moment separate off the
28:39 - broadcast begin
28:40 - that will let us check the scan was
28:42 - successful
28:43 - run the project ah problem
28:46 - the tile size is far too large to
28:48 - capture the detail of this maze
28:51 - how about we set the tile width to 8
28:53 - pixels
28:54 - test again yes this is better
28:57 - we are starting to see a difference
28:58 - between corridors and walls
29:00 - but we are really some way off the
29:02 - detail required
29:03 - how about a tile width of just 4 pixels
29:07 - test this is looking good
29:10 - but something is not right and i think
29:12 - it's not the tile size as much as the
29:14 - size of the scanned
29:16 - costumes this is due to scratch not
29:18 - allowing our sprite to shrink down as
29:20 - small as 4 pixels in width
29:22 - well just as there's a trick to getting
29:24 - sprites to become super
29:26 - big there is a similar trick to getting
29:28 - them to go super small
29:29 - click into the grid sprites costume and
29:31 - make a new costume naming it
29:33 - big draw a large rectangle
29:39 - now back to the code find the define
29:41 - scan custom block
29:42 - and here is where we are setting the
29:44 - costume size
29:45 - switch costume to big before setting the
29:48 - size
29:48 - that will allow the size to go much
29:50 - smaller and then switch back to costume
29:53 - one
29:54 - after the size is set and the small size
29:57 - is retained
29:59 - okay and we test wow yeah i was right
30:03 - that made all the difference we can now
30:05 - see how small the tiles really are
30:08 - now at 4 pixels they are tiny if i hide
30:11 - the level sprite for a moment
30:12 - you can see how detailed this scan
30:14 - really is i can't wait to give the
30:16 - pathfinding a test
30:17 - but before we can make the level visible
30:19 - again and then back in the grid sprite
30:22 - we put back the broadcast begin and
30:24 - we've run the project
30:29 - holy moly look at the tiny arrows
30:33 - perhaps we've gone a little over the top
30:35 - to achieve this goal
30:36 - but it's only because the maze i'm
30:38 - trying to solve is so
30:39 - opie any normal level would have its
30:42 - walls snapped beautifully with the tile
30:44 - grid and our tiles would be much bigger
30:46 - so these arrows are really annoying it's
30:48 - time to lose them for good in the path
30:50 - sprite locate the define
30:52 - try moving in all direction script and
30:54 - remove these
30:55 - three blocks the position at index point
30:58 - in direction and stamp
30:59 - they are not needed and since we are
31:02 - working with such a small tile size
31:04 - i'm going to click on the cat sprite and
31:06 - set its size
31:07 - to just 17 here and let's give it a run
31:12 - release the scratch cat
31:16 - and they're off trundling around the
31:18 - maze gosh it's a long way to get to the
31:20 - prize
31:21 - let me speed this up
31:31 - and they did it of course to complete
31:34 - this challenge we just need to ensure
31:36 - that they can navigate this maze no
31:37 - matter where the apple is
31:39 - i'm moving it outside the maze now and
31:41 - then spawning not one not
31:43 - two but all of the cats well okay not
31:46 - all of them but a good many of them
31:48 - and they just love this maze wow let's
31:51 - try moving the apple
31:52 - oh it's a bit laggy but that's to be
31:56 - expected
31:56 - on this silly tile size poor scratch
31:59 - doesn't know what has hit it
32:01 - don't forget this pathfinding is
32:02 - designed for more than just
32:04 - maze solving it's for finding the
32:06 - shortest pathways through levels
32:08 - with many possible routes anyhow i think
32:11 - with that
32:11 - we can say mission accomplished and if
32:14 - you want to see this working with
32:15 - different level layouts
32:17 - then here you are if you want to know
32:28 - where i got my circular maze
32:30 - i've put a link to a website under the
32:32 - video that lets us generate svg mazes
32:35 - it's really cool
32:45 - yeah so here's another maze
32:46 - [Music]
32:49 - i can pop it in size and rotate it
32:54 - and give it a test so good
32:57 - now don't think that this pathfinding is
32:59 - limited to mazes
33:00 - or even that you need to use the sprite
33:02 - scanning to create your level grid
33:04 - these scripts can be adapted to work
33:06 - with tile-based games scrolling games or
33:08 - almost any kind of game now
33:10 - this is scratch so do experiment have
33:12 - fun push your own limits and see what is
33:15 - possible
33:16 - share your success in the comments below
33:17 - the video and in the pathfinding studio
33:20 - also linked under the video and with
33:22 - that we have come to the end of another
33:24 - episode i hope you enjoyed this video
33:26 - and if you did then slap that like
33:28 - button
33:28 - if you haven't already then please do
33:30 - consider subscribing to my channel
33:32 - that way you won't miss any future
33:34 - videos and can be in the early to view
33:36 - gang
33:36 - so if it feels like i'm not talking much
33:38 - on the community tab at the moment
33:40 - sadly it's still broken and youtube
33:41 - support are hopefully on the case
33:44 - lastly as summer progresses for us here
33:46 - in the uk i've got some holidays booked
33:48 - so we may not get a video every monday
33:50 - but rest assured i'll make as many as
33:52 - the time allows all the more reason for
33:54 - you guys to subscribe
33:56 - not to miss them when they land so
33:58 - thanks for watching
33:59 - and scratch on guys
34:10 - you

Cleaned transcript:

hello fellow scratchers i'm griff patch and today we are looking again at our exciting pathfinding project in scratch and since last time we've been set quite a challenge to pathfind our way through this detailed vector maze seriously wow i love it this is going to be fun our previous pathfinding tutorial had us tracing the shortest routes to a level using these coloured arrow clones the reward for using clones was simpler scripts but due to the 300 clone limit it meant we couldn't make our levels any more complex than you are already seeing here also because we use the colour of the tiles to direct the scratch cats through the maze we also ran into other problems where are these cats going the cats could cover up the coloured tiles so that they didn't know where to go oh no disaster but if we don't use clones how else can we keep track of the pathways luckily if you've been following my recent tutorials then you'll also have seen an episode on grid lists this technique allows us to scan a level at high resolution into scratch lists and once there we can ditch using clones and sensing blocks for the pathfinding and switch to using the grid lists alone yes these two tutorial projects brought together could make a truly powerful combination so before you can try to tackle this project yourselves make sure you have watched the two previous videos we will need the completed projects available to us before we can tackle today's challenge together you'll find a link to the first pathfinding and the gridless tutorials below this video guys let's get scratching i'm going to bring up my grid lists project first i just want to point out that the grid sprite is the one that does all the work here is a level sprite this is the costume being scanned to a list if i run the project oh yeah look at the detail on that i cannot wait to get that into the pathfinding project all we need to do is open up the backpack and drag in the entire grid sprite next up load up the simple pathfinding tutorial project i'll just confirm that the project is all working yep perfect i have to say that the color arrows although not practical in a real game do look really nice now i don't want to destroy this previous project and i advise you to do the same so go to the file menu and save the project as a copy now give it a new name like pathfinding with grid lists yeah so before we begin bringing our projects together let's have a quick recap of the sprites and code starting with the stage two scripts in here the first spawns new cats with the space bar useful the second was a simple hack we tried to use it to hide the pathway clones it worked to some extent but we are going to do things better this time round so just delete that now next we have the cat sprite basically there are two forever loops in here that run for each cat clone the first moves the cat forward looks at the colour of the arrow below its feet and turns the cat accordingly the second forever loop is waiting for the cat to touch the apple before despawning it now the apple sprite this is just looking for mouse clicks in case the apple is moved then it broadcasts that we need to recalculate the shortest routes through the level the may sprite yeah this is my favorite kind of sprite it really doesn't do anything less to explain right however remember that our grid list project is scanning a sprite named level let's rename the sprite to match that level good and lastly the path sprite this is where the magic happens right from the first green flag click the first path sprite is positioned at the apple the target of the pathfinding and then the sprite tried to clone itself in all four immediate directions upright down and left this is only done though where no collision with the level occurs so as this process repeats the pathway flows outwards filling every reachable point and leaving behind a followable trail of arrows back to where they started the apple nice we are ready to bring in the grid scanning sprite but just while we are here in the path sprite separate off with me the find path block from the when green flag clicked we are going to want the new scanning scripts to run first so open the backpack and drag in the grid sprite right there are a few things we need to check and update the set tile width here is setting how large each tile in our tile grid is in pixels the current pathway code uses 32 pixel tiles for now then let's set this to 16 that will effectively quadruple the number of tiles in use an impressive start next i want to double check in the define scan script that the touching block indeed is set to scan the correct level costume just as we have set it in this project yeah that's good it has to be exactly the same capital letters and all just change it here if it's not okay then let's run the project and check the initial scan works there yes the scan is picking up the level walls nicely and you can see right off that the detail is looking a lot better if i move the apple around you can see that the pathway tiles created are much bigger so what did this level scan do the drawing of the purple tiles is not the purpose no that's just so that we can see that the process worked the important thing is that the level has been encoded into the grid list we have hashes representing walls and blank rows for empty space what i am thinking is that going forward we not only store the level walls in this list but we might also store the coloured pathways in here too these blank rows could easily be used to store the directions a cat needs to move in to reach their target apple that would then remove the need for the clones and the colour sensing and keeping everything neatly in the grid list i'm excited to try this idea but to make things easier for our pathfinding going forward we need to make one tweak you may remember that in a grid list if you move across the grid and off one side mathematically you end up wrapping around and appearing on the opposite side just one row up well to fix this i'm going to add an extra column full of walls up the right hand side of the grid level this will stop anything wrapping around while we try to pathfind later on so add 1 to the grid columns variable that's our extra column then come down to here where we're scanning the level we don't want to scan that last new row so subtract 1 from the grid columns no we want to always add a hash for the last column so add a hash to grid just before we move to the next row with a change y okay give the project a quick test there should be no visible change after that as the new wall is off screen to the right yeah good now back in the code i'm just looking at this second green flag script in the grid sprite this was added to allow us to draw new tiles into the grid using the mouse we won't be needing that this time so i'll separate it off from the hat block to stop it running what else do we have in here ah get tile at x y it's amazingly useful given a position on the screen x and y it gives us back the index that is the row number in the grid list that represents that tile so it also gives us the value of the tile itself super useful equally useful is the position at index idx script this does the opposite taking idx a row number in the grid list and setting the current sprite to be positioned at where that row represents on the screen we are going to need these in our updated pathfinding sprite so let's drag them both into the path sprite now so lastly once our scan is complete and the grid list populated we add in a broadcast for a new event named begin this will trigger the pathfinding scripts to begin and it's time to get to work click into the path sprite straight off we need to move the two new custom blocks into some free space we'll make use of these shortly okay so we separated off the green flag script earlier let's replace this now with a when i receive begin event hat block and reattach the find path block this will now run once the level has been scanned right costume sizes if we check out the costumes you can see our original pathfinding tiles were 32 by 32 pixels in size with a small gap between tiles but our new grid scanning sprite uses a variable named tile width to store the desired width of our tiles in pixels we should therefore resize the costume from 32 pixels to match this new size so set size to 100 that's the full size divided by 32 that reduces our size down to one pixel wide and multiply by tile width to bring it back to the size we want cool so let's follow through the scripts and see what we need to change to make a safe transition from sprite sensing with clones to grid lists find path is the first script that runs positioning itself at the apple and here we have a touching block this is the first sensing block used and is here to prevent our pathways being traced if the apple starts over a wall instead of using the touching block we must use our very handy new custom block get tile at x y and feed it the x position and y position of this sprite let me pull up what this script does over here you can see it sets the tile variable to the item found in the grid list at the given screen location so instead of the touching level block we can now replace it with an if tile equals hash remember hashes represent walls in this case we don't want to continue so i'm going to hide the sprite and stop this script however if not then we can begin plotting our pathway through the level yay see that's a pretty straightforward change isn't it our get tired xy is like a go to xy and comparing tile to hash is like the touching level block only it runs way faster in scratch which is rather handy and a good reason why advanced scratchers use lists so much and now to understand the following changes to our code we are going to need to understand a little bit more scratch type theory did you know that scratch never runs two scripts at once nope scratch is what we would refer to as single threaded you can ask it to run lots of scripts apparently running simultaneously across many sprites and clones using hat blocks broadcast receivers and loops so how can it be scratch only runs one at a time that can't be right the answer is that scratch is just really good at running scripts in the right order one after the other and it keeps track of what to run when in its own internal todo list whenever a broadcast is made a key is pressed or a clone is created scratch takes note of what scripts will need to be run where and adds them to the bottom of its todo list this means that when scratch does get around to choosing its next script to run it will simply take the one from the top of the todo list and off it goes this way scripts are always run in the order they were requested this is exactly the process that makes our original pathfinding scripts work with the clones as the order in which the when i start as clones run it's the same order in which the clones were originally created that is each new clone created has its when i start as a clone script added to the todo list ready to run but it won't run until all the other when i start as clone scripts above it on the list have run first this behavior is exactly what makes the pathfinding scripts work therefore to replicate this behavior without clones we will make our own todo list make a new list naming it to do indexes for this sprite only okay we only just put this script back but actually delete it for now what we really need to do before starting down this thrilling new road is to first clean up the grid list why is that well our pathfinding scripts will be stuffing all the path directions into this grid list so when the apple is later moved and we want to recalculate pathways again we will need to remove all the directions from the list leaving only the walls the hashes so get out your broom and create a new custom block named clean the grid list run without screen refresh we'll begin by erasing all the stamped costumes from the pen canvas next we'll delete all of our new to do index list yeah we're going to clean things up nicely so to keep track of things as we clean the grid list create a new variable naming it next index for this sprite only set it to zero and begin a repeat loop this loop wants to run over the entire grid list that would be grid columns multiplied by grid rows although i could have just used the length of grid now i think about it now change next index by one this will allow us to work our way through the entire grid list one row at a time so we need to check whether the next grid item is a wall if item next index of grid is not equal to a hash not a wall then we are going to replace the same item with a question mark we'll use question marks to mean tiles that are not walls that are yet to be visited by the pathfinding script there after this is finished the entire grid list will be filled with only hashes and question marks so that's the cleaning scripts done so come back to the define find path script and pop in the clean grid block we just made so we are ready to take our first step in a new path find we'll mark the spot in the grid list by replacing item index of grid with zero remember index has already been set when we use the get tile at x y just above so it's the position of the apple in the grid list we record a direction of zero it doesn't matter which direction we start with as we've already reached the target and now because we've updated the grid tile we also add index to our todo indexes list wait what so this is the fun part where we are saying we want to come back and process this tile at our next convenience but because it's added to the bottom of the todo list everything above it in the list will be actioned first i think we can safely run our project here and when i do we can see an item get added to the todo list that's a good sign that things are working also if i move the apple and run the project again i can see the index changes as would be expected okay make sure you are still in the path sprite what we need to do next is start working through our todo list yeah it's only got a single item in it at the moment but very soon that is going to grow so repeat until the length of todo indexes equals zero that will keep us looping there until there is no items left to be actioned after which we can just hide this sprite what do we do inside the repeat loop we put back the try moving in directions block excellent so now we have a loop that works its way through all the tiles that are waiting to be processed we therefore no longer need these scripts triggering the same thing when starting as a clone so delete that we also don't need this when i receive reset path again we don't have any clones to delete oh and this when i receive hide path that's trash 2. right back to our define try moving in all directions script as you might expect things have got to change separate off the entire script and keep it for reference let's begin with the costumes themselves these are 100 cosmetic now they are not used for anything but to let us know the pathway is working correctly let's simplify things by changing the first costume to be a simple large arrow head since the tiles will be much smaller we need a bigger arrow to be able to see it clearly now delete the following three costumes as i said the color will mean nothing from now on back to our code begin by making a new variable named current index for this sprite only and set it to item 1 of to do indexes that's the item that was added first to our todo list once we have the value we can delete item one of the todo list to indicate we have actioned it now let's find out what direction was recorded at the position in the grid list make a new variable named der dir for direction and set it to item current index of grid if you remember we just put a zero at this location so at first duh will be zero but as the script run this will be whatever direction the pathway was last moving in right to be able to see whether this is working we're still drawing the pathway to the screen to do this we use the position at index block with the current index that we are actioning then point in direction der the direction we are facing and simply stamp great and now we can test that the first pathway step is being placed move the apple to a free space on the level and then click the green flag look behind it and the pathway arrow is stamped there press the green flag again and once again the stamp is correctly positioned success click back into the path sprite and we can hide the todo list now so we know we are in the right location the next step is to replicate the previous scripts that did the pathfinding firstly we need to loop around four times once for each possible direction now the next step was to move forward by one tile okay so that's a little bit more complex when we are working in a grid list to move left or right we add or subtract one from the index and to move up and down we add or subtract a full number of columns however we always start at the current index so set next index to current index plus we'll do left and right movement first we know the direction we are facing it's stored in the direction der do you remember me talking about the maths of sine and cos operators before these can be used to move the x and y replicating what a move in direction can do for that reason we can add sine der to the index to move it left or right by one tile then up and down we change next index by this time we need to multiply and change by grid columns multiplied by because that's how you move up and down in a grid list multiplied by cos of der did that make any sense at all to you it kind of blows my mind when i think too hard about it with the movement done we should check whether the grid item is empty or not as we only want to move into empty grid cells if item next index of grid is a question mark ah right question mark that's right we filled all the nonwall cells with these so a question mark means we are good to move into that direction so we replace item next index of grid with okay we could just put der in here but if we did this number will just keep getting bigger and bigger so let's constrain it to be a number from zero to 360 by using de mod 360. that way it'll wrap around back to zero again now do you remember how we ensure this new pathway will get processed in future yeah we add next index to todo indexes finally the last script in this repeat loop change dir by 90. can you see why i did this using clones in the first tutorial it's way more complex to understand when written like this but hey we're all learning scratches here so it's good to push ourselves to understand new things and that's all the pathfinding scripts written aha well i am stoked shall we give it a test go full screen and hit the green flag wowzers that's pink but it's good pink look at all the arrows they are facing the right directions and there are a lot more of them than we had in our first pathfinder tutorial that's a real point of success do you think we can move the apple oh yeah that is cool and it's also pretty smooth i'm dead pleased with that i wonder what scratchcat thinks of it let's find out hit the space ah it appears he doesn't think much of it yet no neither do his pals they are still expecting to see colours on the screen to tell them where to go and they don't have a clue how to read the grid list oh my what made that little fellow so special okay click into the cat sprite so if i scroll over here to find the define get next direction custom block you can see this is where colors make prizes well they tell us which way to turn anyhow we need to transition from using colors to grid lists how can we find out what grid item is under the cat sprite we need to turn back to our useful custom blocks click into the grid sprite and we'll copy the define get tile xy into the cat sprite great now back in the cat sprite move the custom block into some free space we'll get the tile at the x position and y position of the cat sprite and then we can check whether the tile returned was greater than minus one it turns out that this will be false for a hash so this works well all directions are greater than minus one so it's a directional right so set next direction to tile plus 180 we add 180 because the directions recorded in the grid lists are actually flowing away from the apple not towards it adding 180 reverses that direction so we will travel towards the goal delete the rest of this old scripts and we are good to run the project again let me spawn a new cat oh my that is sensational i'm so pleased that that change was so easy compared to the rest i can move the apple oh hang on the cat still all despawned when i moved the apple that's anticlimactical and completely unrequired now in the cat sprite find the when i receive reset path and we can just delete this script run the project again spawn some cats and now moving the apple around yay we have success this was not possible in our clone based pathfinding engine we can now have a moving target and all the cats follow us changing routes as the target changes i could play with this for ages but i can spot a problem did you see those cats walking through the wall this is not any fault of our pathfinding this is down to the simple nature of our cat's simple movement scripts look here all we do is move the cat forward and then turn left or right never stopping if we actually hit a wall perhaps we can address that before we look at making the maze any more complex move into some free space and make a new block named try move with a numeric input of dx and another of dy run without screen refresh we're going to check what is in the grid cell if we move the cat by dx and dy so get tile at x position plus dx and y position plus d y now we can check again if tile is greater than 1 if it is then this is not a wall so we can move into that space change x by dx and change y by d y next come back to the define follow path custom block we're wanting to replace this move two steps block again we will change this move into two separate move x and move y's using sine and cos so use two try moves we split it into two so that if moving in the x or y direction fails we can still succeed with the other direction this helps smooth out movement in a grid system our x movement will be 2 multiplied by the sine of direction and the y movement will be 2 multiplied by the cos of direction the twos here are the speed of movement just as we originally were moving forward by two steps just before testing we can scroll down to the when i starters clone that contains the wait until touching apple or edge script i want to replace this now with a wait until distance to apple is less than tile width the reason is that as we work with more detailed maps i don't want scratch cat to be able to touch the apple through walls and we can test again a few cats is not really enough to tell if this is working let me spawn more oh now i'm not a fan of these stuck cats we'll need to bug fix that first as they are making it hard to see the cats in question are simply ones that are spawned on top of a wall in the cat sprite find that when i start as a clone and look for the get next direction block if we spawn on top of a block then at this point tile will be a hash so if tile equals hash simply delete this clone and off we go again and let's play i'm going to spawn loads of cats notice they are no longer spawning on walls so that is great and now let's move the apple around and see if we can see any naughty kitties and the answer is no i cannot it's working flawlessly what an achievement oh yes this is great and that brings us back to our original challenge can we navigate this highres circular maze costume what makes this so much more complex is that curves do not fit well into tile grids to get enough detail we'll have to up the grid size considerably click into the level sprite and the costume editor tab i'm going to import a new costume this maze svg if you want the costume then you can find a link to it under this video move the apple to the middle of the maze now switch to the grid sprite so that we can set things up just for a moment separate off the broadcast begin that will let us check the scan was successful run the project ah problem the tile size is far too large to capture the detail of this maze how about we set the tile width to 8 pixels test again yes this is better we are starting to see a difference between corridors and walls but we are really some way off the detail required how about a tile width of just 4 pixels test this is looking good but something is not right and i think it's not the tile size as much as the size of the scanned costumes this is due to scratch not allowing our sprite to shrink down as small as 4 pixels in width well just as there's a trick to getting sprites to become super big there is a similar trick to getting them to go super small click into the grid sprites costume and make a new costume naming it big draw a large rectangle now back to the code find the define scan custom block and here is where we are setting the costume size switch costume to big before setting the size that will allow the size to go much smaller and then switch back to costume one after the size is set and the small size is retained okay and we test wow yeah i was right that made all the difference we can now see how small the tiles really are now at 4 pixels they are tiny if i hide the level sprite for a moment you can see how detailed this scan really is i can't wait to give the pathfinding a test but before we can make the level visible again and then back in the grid sprite we put back the broadcast begin and we've run the project holy moly look at the tiny arrows perhaps we've gone a little over the top to achieve this goal but it's only because the maze i'm trying to solve is so opie any normal level would have its walls snapped beautifully with the tile grid and our tiles would be much bigger so these arrows are really annoying it's time to lose them for good in the path sprite locate the define try moving in all direction script and remove these three blocks the position at index point in direction and stamp they are not needed and since we are working with such a small tile size i'm going to click on the cat sprite and set its size to just 17 here and let's give it a run release the scratch cat and they're off trundling around the maze gosh it's a long way to get to the prize let me speed this up and they did it of course to complete this challenge we just need to ensure that they can navigate this maze no matter where the apple is i'm moving it outside the maze now and then spawning not one not two but all of the cats well okay not all of them but a good many of them and they just love this maze wow let's try moving the apple oh it's a bit laggy but that's to be expected on this silly tile size poor scratch doesn't know what has hit it don't forget this pathfinding is designed for more than just maze solving it's for finding the shortest pathways through levels with many possible routes anyhow i think with that we can say mission accomplished and if you want to see this working with different level layouts then here you are if you want to know where i got my circular maze i've put a link to a website under the video that lets us generate svg mazes it's really cool yeah so here's another maze i can pop it in size and rotate it and give it a test so good now don't think that this pathfinding is limited to mazes or even that you need to use the sprite scanning to create your level grid these scripts can be adapted to work with tilebased games scrolling games or almost any kind of game now this is scratch so do experiment have fun push your own limits and see what is possible share your success in the comments below the video and in the pathfinding studio also linked under the video and with that we have come to the end of another episode i hope you enjoyed this video and if you did then slap that like button if you haven't already then please do consider subscribing to my channel that way you won't miss any future videos and can be in the early to view gang so if it feels like i'm not talking much on the community tab at the moment sadly it's still broken and youtube support are hopefully on the case lastly as summer progresses for us here in the uk i've got some holidays booked so we may not get a video every monday but rest assured i'll make as many as the time allows all the more reason for you guys to subscribe not to miss them when they land so thanks for watching and scratch on guys you
