With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video we are going to talk about
00:03 - operators in programming I will teach
00:06 - you about relational and logical
00:08 - operators uh you will learn everything
00:10 - that is important to know we are going
00:12 - to write some code and see how they work
00:14 - on real examples and I will also teach
00:17 - you about some of the most important
00:20 - problems and bugs that happen very often
00:22 - and that you should know about and
00:24 - before we start there is something very
00:26 - important that I want to tell you so if
00:28 - you want to become a programmer and you
00:30 - want to enjoy all of the perks that we
00:32 - developers have such as high job demand
00:35 - great salaries a lot of work flexibility
00:37 - like remote work and flexible work hours
00:40 - so you're able to travel and work at the
00:42 - same time from anywhere in the world you
00:45 - will work on cool projects meet a lot of
00:47 - cool people and so on so if you want all
00:50 - of these then I have created a perfect
00:52 - plan for you that you need to follow in
00:55 - order to get your dream job I have
00:57 - invested a year and a half of my life to
00:59 - create perfect practical programming
01:01 - course that will teach you programming
01:03 - so that you can start a successful
01:05 - developer career the course was launched
01:08 - just two months ago and we already have
01:10 - a lot of students who are achieving
01:12 - great results here I'm going to put some
01:14 - of their experiences so that you can
01:15 - also know what to expect and what you
01:18 - can achieve in just two months and if
01:20 - you start today and if you stay
01:22 - consistent for six months then you can
01:24 - learn enough programming so that you can
01:26 - start a successful developer career the
01:29 - course course is made for absolute
01:31 - beginners you will get practical
01:33 - experience and learn how to make real
01:35 - applications and in this course we are
01:37 - going to write CP but you will get
01:39 - transferable skills that you can apply
01:41 - to any modern programming language and
01:44 - the best part is that I made entire plan
01:46 - for you so everything is on one place
01:49 - all of the lessons that you need to
01:50 - watch all of the exercises and tasks
01:53 - that you need to do your job is just to
01:55 - follow that plan also I have a gift for
01:58 - you as my YouTube viewer so the first
02:01 - 100 people who click the link in this
02:03 - video will get a special discount for
02:06 - course enrollment so you can find more
02:09 - details in the description and now let's
02:11 - continue with the topic of this video so
02:13 - let's first explain what are operators
02:16 - operators are special symbols that we
02:19 - use to perform different operations such
02:21 - as adding multiplying dividing comparing
02:24 - and so on in the previous video of this
02:27 - playlist we have talked about
02:29 - arithmetics and assignment operators so
02:31 - if you did not watch that video make
02:33 - sure to do that the link will be in the
02:35 - description it is operators part one and
02:38 - then this video is operators part two so
02:41 - in this video we are going to talk about
02:43 - relational and logical operators so
02:46 - let's start with relational operators
02:49 - relational operators are used to
02:51 - determine the relationship between two
02:54 - values for example is a greater than b
02:57 - or is a less then B are they equal and
03:02 - so on so we have six relational
03:05 - operators in total so I will put them
03:08 - here let's say
03:10 - relational
03:13 - operators so let's start with the first
03:16 - one and that is is equal to so let me
03:19 - give you an example of how this operator
03:22 - is used let's say int a is equal to 5
03:26 - and then int B is equal to 7 okay so now
03:31 - let's say bll is
03:35 - equal so what I want to do is I want to
03:38 - check if a is equal to B and then when I
03:44 - get the result of this operation I will
03:47 - assign that result to this variable here
03:50 - so let's print the result and let's see
03:53 - what is it going to be okay so here it
03:56 - says false which means that a is not
03:59 - equal to B so 5 is not equal to 7 okay
04:03 - one very important thing is that you
04:05 - don't confuse these two operators
04:08 - because they are not the same this
04:10 - operator here is relational operator
04:13 - which is called is equal to so it checks
04:16 - if a is equal to B and then this here is
04:21 - assignment operator which means that it
04:23 - is used to assign a value to a variable
04:27 - in this specific case when this
04:29 - operation here is performed and we have
04:31 - the result that result will be assigned
04:35 - to this variable here so once more this
04:39 - is relational operator and this here is
04:42 - assignment operator another important
04:44 - thing that I want to mention is the
04:46 - priority of these two operators so which
04:49 - one of these operations has priority
04:52 - comparing or assigning priority has this
04:56 - operator here which means that we will
04:59 - first compare these two numbers and then
05:02 - when we get the result then this
05:05 - operator here will assign it to this
05:07 - variable and because this operator here
05:11 - has bigger higher priority than this
05:13 - operator here what I can do is I can
05:16 - even delete these parentheses and we
05:19 - will still get the same result so if I
05:22 - start my program as you can see we still
05:24 - get false okay another relational
05:27 - operator that does OP opposite from this
05:30 - operator here is this operator here it
05:34 - is called is different from so this
05:38 - operator checks if two values are the
05:40 - same if they are equal and then this one
05:43 - checks if they are different so what I
05:45 - can do here is I can say please check if
05:48 - a is different from B and let's also
05:51 - change the name of this variable so I
05:53 - will say is
05:56 - different like this and then let's print
06:00 - this result so now if I start the
06:03 - application as you can see we get the
06:06 - result of true because five is different
06:09 - from Seven okay so is equal to and then
06:13 - is different from another relational
06:16 - operator is this operator here it is
06:19 - called is greater than so let's see how
06:23 - to use this operator on a different
06:26 - example so let's say for example in my
06:30 - age my age is 29 and then let's also say
06:35 - in your
06:37 - age um let's say that your age will be
06:40 - 25 but let me know what is your age in
06:43 - the comment section I'm really wondering
06:46 - uh how old are the people who watch this
06:48 - video okay so my age your age so now
06:52 - what I can do is I can check which one
06:56 - is higher so I can say B is Salina
07:02 - older okay so how will I check this well
07:05 - I will simply say please check if my age
07:09 - is greater than your age like this and
07:13 - then I will print this value so if I
07:16 - start the program we get true because 29
07:20 - is greater than
07:22 - 25 okay and then if I change this if I
07:25 - say that for example you are 31 years
07:27 - old and I start the program again again
07:30 - now we get false as a result another
07:33 - relational operator is this operator
07:36 - here it is called less than so let's see
07:39 - how to use this operator let's say bull
07:43 - is
07:45 - student under
07:48 - age okay so I will check this by saying
07:52 - if your age is less than 18 okay so if
07:57 - you are less than 18 then you are
07:59 - underage let's print this value okay so
08:04 - clearly a student who is 31 is not under
08:08 - AG because 31 is not less than 18 but if
08:13 - student is 17 years old and I start my
08:16 - program again as you can see we get the
08:18 - result of true because that student is
08:21 - underage because 17 is less than 18 okay
08:25 - and then we have two more relational
08:28 - operators this one is called greater
08:31 - than or equal to and then this one is
08:35 - called less than or equal to so let me
08:38 - show you an example of this one so I can
08:42 - say for example bull is
08:46 - student
08:49 - adult okay student is going to be adult
08:52 - if he is greater than or equal to 18
08:57 - like this so now I can print print this
09:01 - value let's start the program okay and
09:05 - the result is false student is not an
09:07 - adult because he is 17 years old but if
09:11 - I change this to be for example
09:13 - 21 let me just close this window and
09:16 - start my application again now as you
09:19 - can see we get the value of true so that
09:22 - means that this student is adult okay so
09:27 - that is how you use this operator here
09:30 - greater than or equal to and then for
09:32 - homework you can write an example of
09:34 - this operator here which Compares if
09:37 - value a is less than or equal to the
09:41 - value B so those would be six relational
09:44 - operators let's go once more through
09:46 - them is equal to is different from
09:50 - greater than less than greater than or
09:53 - equal 2 and then less than or equal 2 so
09:57 - six in total okay now let me show you
10:01 - another interesting thing that you can
10:02 - do with this operator here is equal to
10:06 - let's delete this code we don't need it
10:09 - and here I will create a string and
10:12 - let's call it message
10:16 - one okay and here I will simply say
10:20 - hello okay and then let's create another
10:23 - string I'll will call it message two and
10:25 - it will have the same text so now what I
10:28 - can do do is I can say bull are messages
10:36 - equal okay so here what I want to do is
10:39 - I want to check if message 1 is equal to
10:44 - message 2 and then I want to print the
10:47 - result so if I start the program as you
10:50 - can see we get the value of true so this
10:53 - here is another interesting example of
10:55 - how you can use this operator here is
10:58 - equal to so you can use it to compare if
11:01 - two strings are equal but there are many
11:05 - tricks when it comes to comparing
11:06 - strings and working with strings so I
11:09 - will create a separate video which is
11:11 - dedicated only to that so make sure to
11:13 - watch that video it will be linked in
11:15 - the description it is very very
11:17 - important topic okay so let's stop the
11:20 - program um and now if I for example
11:22 - change this second message and I start
11:25 - my program again okay as you can see now
11:28 - we get get the value of false because
11:31 - these two strings are not equal anymore
11:35 - okay now let's talk about common bugs
11:37 - and errors the first one is that you
11:39 - should be very careful when you are
11:41 - comparing two variables that are of
11:44 - different type for example what you
11:46 - cannot do is you cannot compare a string
11:50 - and a number this here does not make
11:53 - sense and your compiler will immediately
11:55 - give you this red squiggly and it will
11:57 - tell you that you have an error so you
12:00 - cannot do this what you can do is you
12:02 - can compare for example an integer and a
12:04 - float number but this is not allowed so
12:08 - that is the first error that you should
12:10 - know about another important error which
12:13 - is very sneaky and very dangerous is if
12:16 - you try to do something like this let's
12:19 - write an example let's say double number
12:23 - one is equal to
12:26 - 0.3 okay and then let's create another
12:29 - variable let's say number two is equal
12:32 - to 0.1 +
12:36 - 0.2 okay so now if I try to do something
12:39 - like this for example bull is
12:44 - equal so what I want to do is I want to
12:47 - compare if number one is equal to number
12:52 - two and I want to print this result what
12:55 - do you expect to get in this situation
12:58 - please pause the video and let me know
13:00 - in the comments section before you watch
13:03 - the solution I hope that you have
13:04 - written your answer and now let's
13:07 - see okay and we get value of false so
13:12 - 0.3 is not the same as 0.1 +
13:16 - 0.2 so apparently these two are not the
13:21 - same so now logical question is why
13:24 - because if you know anything about
13:26 - mathematics you know that this here also
13:28 - results in
13:30 - 0.3 so now the question is why do we get
13:34 - this result why does our computer think
13:36 - that these two are not the same the
13:39 - answer is because you learned
13:41 - mathematics wrong your whole life and
13:43 - just to demonstrate that if I print this
13:47 - number two and I start my program as you
13:51 - can see we don't get 0.3 but we get 0.3
13:55 - z0000 Z and then four at the end so this
13:59 - is not the same as this here and that is
14:03 - the reason why we are getting false as
14:07 - the result of this operation here uh so
14:10 - now if you are wondering why do we get
14:12 - this value please go and watch my
14:15 - previous video because in that video I
14:17 - have explained in detail why do we get
14:21 - this weird result the video will be
14:23 - linked in the description so operators
14:26 - part one make sure to watch that video
14:28 - and then you will understand why we get
14:31 - this result so once more if you're
14:33 - trying to do something like this and if
14:36 - you're comparing two decimal numbers
14:39 - then you should be very very careful
14:41 - because there are some errors that can
14:44 - happen with decimal numbers and you can
14:46 - learn more about it in my previous video
14:49 - okay so those are relational operators
14:53 - they are also called comparison so let's
14:55 - put that
14:57 - here okay so relational or comparison
15:01 - operators another type of operators that
15:04 - I want to talk about are logical
15:06 - operators so let's put them
15:10 - here like this we have three of them in
15:13 - total and those are
15:15 - end not and or okay so and operator not
15:22 - operator or operator so now let's talk
15:25 - about logical operators so the first
15:28 - operator that I want to explain is this
15:30 - one logical end so let's explain it on a
15:34 - real example for example I said that I
15:38 - have a programming course where you can
15:40 - learn practical programming and get a
15:42 - job and I also said that I have a
15:44 - special discount but there are some
15:47 - conditions on who can and cannot get
15:50 - that discount so let's say that there
15:52 - are two conditions first 100 people who
15:56 - click the link in the description so
15:58 - only first 100 and then second condition
16:01 - is those people should have coupon code
16:04 - so let's see how we can write that
16:07 - condition in our code so the first thing
16:10 - is bull is in first 100 so has the
16:16 - student clicked in first 100 students
16:19 - let's say that is true okay and the
16:22 - second thing was B has coupon
16:27 - code
16:29 - like this so here I will also say true
16:32 - now let's write the condition so here I
16:35 - will say bull has
16:39 - discount like this so who will get the
16:43 - discount only a person who Clicks in the
16:46 - first 100 and at the same time that
16:50 - person needs to have coupon code so both
16:54 - of these need to be true in order for
16:57 - the person to get the discount so only
17:00 - if both of these are true the result
17:03 - will be true so let's check that let's
17:06 - start the application okay and as you
17:09 - can see the person is in first 100 and
17:12 - he has coupon code so he can get
17:15 - discount but if I change any one of
17:18 - these two to be false the result will be
17:20 - false for example if I say here that the
17:24 - person is not in first 100 students as
17:27 - you can see that person cannot get
17:30 - discount or if I return this to be true
17:34 - but here I say that the person did not
17:36 - enter coupon code so here I say false
17:39 - and I start the application again as you
17:42 - can see again we get false result and
17:46 - the same applies if both of these are
17:49 - false so if both of these are false
17:51 - again the result will be false as you
17:54 - can see so the only way for this logical
17:58 - operation to be true is only if both of
18:02 - these are true in any other case the
18:05 - result will be false okay so let's
18:09 - return these to be true and now I want
18:13 - to show you another logical operator and
18:16 - that is this one this one is called not
18:19 - so let's see how it works let's add
18:22 - another variable let's say bull is
18:26 - coupon
18:27 - expired
18:31 - like this and here I will say false okay
18:34 - so now I will add this to my condition
18:37 - as well so I will say and is coupon
18:41 - expired but here I will put not so if
18:45 - the student is in first 100 and he has
18:48 - coupon code and the coupon code is not
18:52 - expired okay so now if I start the
18:55 - program as you can see we get the result
18:58 - of true true because each one of these
19:02 - is true so what does this operator here
19:06 - do it simply reverses whatever is here
19:10 - so because here we have the value of
19:12 - false it will simply reverse that and it
19:15 - will be true and if I change this to be
19:19 - true then this entire condition this
19:22 - entire expression will be false so if I
19:25 - start the application as you can see the
19:27 - result is false student cannot get
19:30 - discount because if you remember the
19:33 - nature of this operator is that all of
19:36 - these individually need to be true in
19:39 - order for this entire expression to be
19:42 - true so this here is true this here is
19:46 - true as well and then this here is true
19:49 - but when we reverse that with this not
19:52 - operator this here will be false and
19:55 - that is the reason why this entire
19:58 - expression will be false okay so that is
20:01 - how these two operators work and not and
20:06 - then this one is called or operator so
20:09 - let's write an example for that as well
20:13 - let me delete this code so let's say B
20:17 - is
20:19 - weekend here I will say true and then
20:23 - let's say bull is
20:26 - holiday here let's say false and then
20:30 - let's add another one let's say bll is
20:35 - vacation and here let's also say true
20:39 - okay so now what I want to do is I want
20:42 - to write an expression that tells me if
20:45 - it is day off or not so I will say bull
20:49 - is day off so how will this condition
20:54 - look like well I need to check if it is
20:57 - weekend
20:59 - or if it is holiday or if it is vacation
21:05 - so if any one of these is true then it
21:10 - will be day off so let's start the
21:14 - application and the result is true
21:17 - because as I said at least one of these
21:20 - needs to be true in order for the entire
21:23 - expression to be true so that is how
21:27 - this or op operator behaves so only in a
21:31 - situation where all of these are false
21:35 - only in this situation the entire
21:38 - expression will be false so if I start
21:40 - the program as you can see the result is
21:43 - false but in case that any one of these
21:47 - is true for example I say it is weekend
21:51 - then the entire expression will be true
21:53 - and if I start the program you can see
21:56 - that it is day off
21:59 - okay so let's go once more through these
22:01 - logical operators this here is end
22:05 - operator and as we said end operator
22:08 - requires all of the individual operant
22:11 - to be true in order for the entire
22:13 - result to be true so in case that only
22:16 - one operator is false the entire
22:19 - condition will be false okay and then we
22:22 - have this operator here it is called not
22:25 - operator and it just reverses whatever
22:29 - value it stands in front of and then
22:32 - this operator here it is called or
22:35 - operator and Its Behavior is as follows
22:40 - just one of these conditions needs to be
22:42 - true for the entire expression to be
22:45 - true and only in the situation where all
22:48 - of these are false only then the result
22:52 - will be false we learned a lot today so
22:55 - let's practice a little bit I'm going to
22:57 - give you an example and then I will give
22:59 - you a task so that you can solve that
23:01 - task and then we are going to solve it
23:03 - together so the first task is this so
23:07 - here we have three variables please
23:10 - retype this in your code so your task
23:13 - will be to write a condition if this
23:16 - person can drive or not so the condition
23:19 - is following this person can drive if he
23:23 - is older than 18 he has a license and he
23:27 - has not not consumed alcohol so please
23:32 - write your solution and then you can
23:34 - watch mine so let's do it together as I
23:38 - said the condition is that the person's
23:40 - age should be greater than or equal to
23:45 - 18 and this person needs to have license
23:50 - and at the same time this person cannot
23:53 - consume alcohol okay so this is how the
23:57 - condition should look like like this
23:59 - here needs to be true this here needs to
24:01 - be true and then this expression here
24:03 - needs to be true and in that case the
24:06 - person can drive so if I start the
24:08 - program let's test this as you can see
24:11 - the person can drive but in case that I
24:14 - change these for example here I say that
24:16 - the person is 13 and I start the program
24:19 - the person cannot drive anymore okay or
24:24 - if I return this to be 20 but I say that
24:27 - the person did have some alcohol if I
24:31 - start the program as you can see the
24:33 - person cannot drive okay so don't drink
24:36 - and drive let's close the program and
24:39 - let me give you another example so here
24:42 - we have four variables is card valid is
24:46 - card expired transaction amount and
24:49 - transaction limit so what we want to do
24:52 - is we want to check if this payment is
24:55 - successful so how should the condition
24:57 - look like you need to check that the
25:00 - card is valid the card did not expire
25:04 - and that transaction amount is less than
25:07 - or equal to transaction limit so please
25:11 - retype this code on your computer and
25:13 - then try to solve this problem on your
25:15 - own and then we are going to do it
25:18 - together so the condition is following
25:21 - we need to make sure that card is valid
25:26 - and that card is not not expired don't
25:29 - forget this not symbol and at the same
25:34 - time I'm going to put this into
25:36 - parentheses we need to make sure that
25:39 - transaction amount is less than or equal
25:43 - to transaction limit like this so only
25:48 - in case that all of these Expressions
25:52 - individually are true only in that case
25:56 - this entire expression will be true and
25:58 - the payment will be successful so if I
26:01 - start the program as you can see we get
26:03 - the value of true now let's test this a
26:06 - little bit let's say that this person is
26:08 - trying to spend a lot more money so if I
26:12 - start the program now as you can see the
26:14 - payment will not be successful anymore
26:17 - because this transaction amount is
26:19 - greater than the limit that is allowed
26:22 - so let's lower this amount a little bit
26:25 - but let's say that the card is expired
26:29 - so again in this situation this payment
26:33 - will not be successful so once more only
26:37 - in case that all of these individually
26:42 - are true only in that case the entire
26:45 - expression will be true because that is
26:47 - the nature of this operator that is how
26:50 - end operator functions okay now let's
26:53 - practice or operator a little bit and
26:57 - let's do another example example okay so
26:59 - here is another interesting example and
27:03 - this little cutie gave me the idea for
27:05 - the example say hi he doesn't want to
27:08 - say hi I have two of them actually they
27:11 - come in two different sizes this is the
27:12 - big
27:14 - size bye-bye so you should write an
27:17 - expression to check if this person can
27:20 - adopt a pet or not so how should that
27:23 - condition look like well first of all
27:26 - you need to make sure that one of these
27:29 - two is true so that person either needs
27:31 - to have free time to play with the pet
27:34 - or he needs to have another pet so that
27:37 - the animal has a friend he has someone
27:40 - to play with so one of these two needs
27:43 - to be true and then at the same time the
27:46 - person needs to have backyard so that
27:49 - the cat or a dog or whichever animal can
27:51 - go outside enjoy the Sun and so on so
27:55 - that is another part and then third part
27:57 - is that the person cannot have pet
28:00 - allergies so that is how the expression
28:03 - should look like now you can pause the
28:05 - video and try to do it on your own and
28:08 - now we are going to do it together so as
28:10 - we said one of these two needs to be
28:13 - true so I will put inside parentheses
28:17 - that either the person needs to have
28:20 - free time to play or he needs to have
28:24 - other pets like this okay and then the
28:29 - person needs to have backyard okay and
28:33 - then at the same time he cannot have pet
28:36 - allergies so in order for this person to
28:39 - be able to adopt the pet this inside the
28:43 - parentheses needs to be true and then
28:45 - this needs to be true and then this here
28:48 - needs to be true and then for this part
28:51 - inside parentheses to be true just one
28:54 - of these two need to be true so now if I
28:58 - start the program let's check the result
29:01 - the result is true because the person
29:05 - does not have time to play but he has
29:08 - another pet so the animal will have a
29:10 - friend and someone to play with so this
29:12 - here will be true and then the person
29:15 - has backyard that is true and then he
29:17 - doesn't have pet allergies so this here
29:20 - will be false and when we reverse that
29:23 - this part here will be true as well so
29:26 - that is how this entire condition
29:28 - results as true so I hope that you
29:31 - enjoyed this video and that you learned
29:33 - how to use logical and relational
29:36 - operators on real examples if you have
29:38 - any questions you can leave those in the
29:40 - comment section and if you want to learn
29:43 - how to build real applications and if
29:45 - you want to get a job as a software
29:47 - developer then click the link in the
29:50 - description and you can enroll in my
29:52 - practical programming course where I
29:54 - will personally lead you from beginner
29:57 - to expert in programming until you get
29:59 - your dream job and don't forget that for
30:03 - a limited period of time we have a
30:05 - special discount that you can claim by
30:07 - clicking the link in the description of
30:09 - this video so thank you very much for
30:11 - watching and I will see you in another
30:13 - video bye

Cleaned transcript:

hi guys and welcome to my channel in this video we are going to talk about operators in programming I will teach you about relational and logical operators uh you will learn everything that is important to know we are going to write some code and see how they work on real examples and I will also teach you about some of the most important problems and bugs that happen very often and that you should know about and before we start there is something very important that I want to tell you so if you want to become a programmer and you want to enjoy all of the perks that we developers have such as high job demand great salaries a lot of work flexibility like remote work and flexible work hours so you're able to travel and work at the same time from anywhere in the world you will work on cool projects meet a lot of cool people and so on so if you want all of these then I have created a perfect plan for you that you need to follow in order to get your dream job I have invested a year and a half of my life to create perfect practical programming course that will teach you programming so that you can start a successful developer career the course was launched just two months ago and we already have a lot of students who are achieving great results here I'm going to put some of their experiences so that you can also know what to expect and what you can achieve in just two months and if you start today and if you stay consistent for six months then you can learn enough programming so that you can start a successful developer career the course course is made for absolute beginners you will get practical experience and learn how to make real applications and in this course we are going to write CP but you will get transferable skills that you can apply to any modern programming language and the best part is that I made entire plan for you so everything is on one place all of the lessons that you need to watch all of the exercises and tasks that you need to do your job is just to follow that plan also I have a gift for you as my YouTube viewer so the first 100 people who click the link in this video will get a special discount for course enrollment so you can find more details in the description and now let's continue with the topic of this video so let's first explain what are operators operators are special symbols that we use to perform different operations such as adding multiplying dividing comparing and so on in the previous video of this playlist we have talked about arithmetics and assignment operators so if you did not watch that video make sure to do that the link will be in the description it is operators part one and then this video is operators part two so in this video we are going to talk about relational and logical operators so let's start with relational operators relational operators are used to determine the relationship between two values for example is a greater than b or is a less then B are they equal and so on so we have six relational operators in total so I will put them here let's say relational operators so let's start with the first one and that is is equal to so let me give you an example of how this operator is used let's say int a is equal to 5 and then int B is equal to 7 okay so now let's say bll is equal so what I want to do is I want to check if a is equal to B and then when I get the result of this operation I will assign that result to this variable here so let's print the result and let's see what is it going to be okay so here it says false which means that a is not equal to B so 5 is not equal to 7 okay one very important thing is that you don't confuse these two operators because they are not the same this operator here is relational operator which is called is equal to so it checks if a is equal to B and then this here is assignment operator which means that it is used to assign a value to a variable in this specific case when this operation here is performed and we have the result that result will be assigned to this variable here so once more this is relational operator and this here is assignment operator another important thing that I want to mention is the priority of these two operators so which one of these operations has priority comparing or assigning priority has this operator here which means that we will first compare these two numbers and then when we get the result then this operator here will assign it to this variable and because this operator here has bigger higher priority than this operator here what I can do is I can even delete these parentheses and we will still get the same result so if I start my program as you can see we still get false okay another relational operator that does OP opposite from this operator here is this operator here it is called is different from so this operator checks if two values are the same if they are equal and then this one checks if they are different so what I can do here is I can say please check if a is different from B and let's also change the name of this variable so I will say is different like this and then let's print this result so now if I start the application as you can see we get the result of true because five is different from Seven okay so is equal to and then is different from another relational operator is this operator here it is called is greater than so let's see how to use this operator on a different example so let's say for example in my age my age is 29 and then let's also say in your age um let's say that your age will be 25 but let me know what is your age in the comment section I'm really wondering uh how old are the people who watch this video okay so my age your age so now what I can do is I can check which one is higher so I can say B is Salina older okay so how will I check this well I will simply say please check if my age is greater than your age like this and then I will print this value so if I start the program we get true because 29 is greater than 25 okay and then if I change this if I say that for example you are 31 years old and I start the program again again now we get false as a result another relational operator is this operator here it is called less than so let's see how to use this operator let's say bull is student under age okay so I will check this by saying if your age is less than 18 okay so if you are less than 18 then you are underage let's print this value okay so clearly a student who is 31 is not under AG because 31 is not less than 18 but if student is 17 years old and I start my program again as you can see we get the result of true because that student is underage because 17 is less than 18 okay and then we have two more relational operators this one is called greater than or equal to and then this one is called less than or equal to so let me show you an example of this one so I can say for example bull is student adult okay student is going to be adult if he is greater than or equal to 18 like this so now I can print print this value let's start the program okay and the result is false student is not an adult because he is 17 years old but if I change this to be for example 21 let me just close this window and start my application again now as you can see we get the value of true so that means that this student is adult okay so that is how you use this operator here greater than or equal to and then for homework you can write an example of this operator here which Compares if value a is less than or equal to the value B so those would be six relational operators let's go once more through them is equal to is different from greater than less than greater than or equal 2 and then less than or equal 2 so six in total okay now let me show you another interesting thing that you can do with this operator here is equal to let's delete this code we don't need it and here I will create a string and let's call it message one okay and here I will simply say hello okay and then let's create another string I'll will call it message two and it will have the same text so now what I can do do is I can say bull are messages equal okay so here what I want to do is I want to check if message 1 is equal to message 2 and then I want to print the result so if I start the program as you can see we get the value of true so this here is another interesting example of how you can use this operator here is equal to so you can use it to compare if two strings are equal but there are many tricks when it comes to comparing strings and working with strings so I will create a separate video which is dedicated only to that so make sure to watch that video it will be linked in the description it is very very important topic okay so let's stop the program um and now if I for example change this second message and I start my program again okay as you can see now we get get the value of false because these two strings are not equal anymore okay now let's talk about common bugs and errors the first one is that you should be very careful when you are comparing two variables that are of different type for example what you cannot do is you cannot compare a string and a number this here does not make sense and your compiler will immediately give you this red squiggly and it will tell you that you have an error so you cannot do this what you can do is you can compare for example an integer and a float number but this is not allowed so that is the first error that you should know about another important error which is very sneaky and very dangerous is if you try to do something like this let's write an example let's say double number one is equal to 0.3 okay and then let's create another variable let's say number two is equal to 0.1 + 0.2 okay so now if I try to do something like this for example bull is equal so what I want to do is I want to compare if number one is equal to number two and I want to print this result what do you expect to get in this situation please pause the video and let me know in the comments section before you watch the solution I hope that you have written your answer and now let's see okay and we get value of false so 0.3 is not the same as 0.1 + 0.2 so apparently these two are not the same so now logical question is why because if you know anything about mathematics you know that this here also results in 0.3 so now the question is why do we get this result why does our computer think that these two are not the same the answer is because you learned mathematics wrong your whole life and just to demonstrate that if I print this number two and I start my program as you can see we don't get 0.3 but we get 0.3 z0000 Z and then four at the end so this is not the same as this here and that is the reason why we are getting false as the result of this operation here uh so now if you are wondering why do we get this value please go and watch my previous video because in that video I have explained in detail why do we get this weird result the video will be linked in the description so operators part one make sure to watch that video and then you will understand why we get this result so once more if you're trying to do something like this and if you're comparing two decimal numbers then you should be very very careful because there are some errors that can happen with decimal numbers and you can learn more about it in my previous video okay so those are relational operators they are also called comparison so let's put that here okay so relational or comparison operators another type of operators that I want to talk about are logical operators so let's put them here like this we have three of them in total and those are end not and or okay so and operator not operator or operator so now let's talk about logical operators so the first operator that I want to explain is this one logical end so let's explain it on a real example for example I said that I have a programming course where you can learn practical programming and get a job and I also said that I have a special discount but there are some conditions on who can and cannot get that discount so let's say that there are two conditions first 100 people who click the link in the description so only first 100 and then second condition is those people should have coupon code so let's see how we can write that condition in our code so the first thing is bull is in first 100 so has the student clicked in first 100 students let's say that is true okay and the second thing was B has coupon code like this so here I will also say true now let's write the condition so here I will say bull has discount like this so who will get the discount only a person who Clicks in the first 100 and at the same time that person needs to have coupon code so both of these need to be true in order for the person to get the discount so only if both of these are true the result will be true so let's check that let's start the application okay and as you can see the person is in first 100 and he has coupon code so he can get discount but if I change any one of these two to be false the result will be false for example if I say here that the person is not in first 100 students as you can see that person cannot get discount or if I return this to be true but here I say that the person did not enter coupon code so here I say false and I start the application again as you can see again we get false result and the same applies if both of these are false so if both of these are false again the result will be false as you can see so the only way for this logical operation to be true is only if both of these are true in any other case the result will be false okay so let's return these to be true and now I want to show you another logical operator and that is this one this one is called not so let's see how it works let's add another variable let's say bull is coupon expired like this and here I will say false okay so now I will add this to my condition as well so I will say and is coupon expired but here I will put not so if the student is in first 100 and he has coupon code and the coupon code is not expired okay so now if I start the program as you can see we get the result of true true because each one of these is true so what does this operator here do it simply reverses whatever is here so because here we have the value of false it will simply reverse that and it will be true and if I change this to be true then this entire condition this entire expression will be false so if I start the application as you can see the result is false student cannot get discount because if you remember the nature of this operator is that all of these individually need to be true in order for this entire expression to be true so this here is true this here is true as well and then this here is true but when we reverse that with this not operator this here will be false and that is the reason why this entire expression will be false okay so that is how these two operators work and not and then this one is called or operator so let's write an example for that as well let me delete this code so let's say B is weekend here I will say true and then let's say bull is holiday here let's say false and then let's add another one let's say bll is vacation and here let's also say true okay so now what I want to do is I want to write an expression that tells me if it is day off or not so I will say bull is day off so how will this condition look like well I need to check if it is weekend or if it is holiday or if it is vacation so if any one of these is true then it will be day off so let's start the application and the result is true because as I said at least one of these needs to be true in order for the entire expression to be true so that is how this or op operator behaves so only in a situation where all of these are false only in this situation the entire expression will be false so if I start the program as you can see the result is false but in case that any one of these is true for example I say it is weekend then the entire expression will be true and if I start the program you can see that it is day off okay so let's go once more through these logical operators this here is end operator and as we said end operator requires all of the individual operant to be true in order for the entire result to be true so in case that only one operator is false the entire condition will be false okay and then we have this operator here it is called not operator and it just reverses whatever value it stands in front of and then this operator here it is called or operator and Its Behavior is as follows just one of these conditions needs to be true for the entire expression to be true and only in the situation where all of these are false only then the result will be false we learned a lot today so let's practice a little bit I'm going to give you an example and then I will give you a task so that you can solve that task and then we are going to solve it together so the first task is this so here we have three variables please retype this in your code so your task will be to write a condition if this person can drive or not so the condition is following this person can drive if he is older than 18 he has a license and he has not not consumed alcohol so please write your solution and then you can watch mine so let's do it together as I said the condition is that the person's age should be greater than or equal to 18 and this person needs to have license and at the same time this person cannot consume alcohol okay so this is how the condition should look like like this here needs to be true this here needs to be true and then this expression here needs to be true and in that case the person can drive so if I start the program let's test this as you can see the person can drive but in case that I change these for example here I say that the person is 13 and I start the program the person cannot drive anymore okay or if I return this to be 20 but I say that the person did have some alcohol if I start the program as you can see the person cannot drive okay so don't drink and drive let's close the program and let me give you another example so here we have four variables is card valid is card expired transaction amount and transaction limit so what we want to do is we want to check if this payment is successful so how should the condition look like you need to check that the card is valid the card did not expire and that transaction amount is less than or equal to transaction limit so please retype this code on your computer and then try to solve this problem on your own and then we are going to do it together so the condition is following we need to make sure that card is valid and that card is not not expired don't forget this not symbol and at the same time I'm going to put this into parentheses we need to make sure that transaction amount is less than or equal to transaction limit like this so only in case that all of these Expressions individually are true only in that case this entire expression will be true and the payment will be successful so if I start the program as you can see we get the value of true now let's test this a little bit let's say that this person is trying to spend a lot more money so if I start the program now as you can see the payment will not be successful anymore because this transaction amount is greater than the limit that is allowed so let's lower this amount a little bit but let's say that the card is expired so again in this situation this payment will not be successful so once more only in case that all of these individually are true only in that case the entire expression will be true because that is the nature of this operator that is how end operator functions okay now let's practice or operator a little bit and let's do another example example okay so here is another interesting example and this little cutie gave me the idea for the example say hi he doesn't want to say hi I have two of them actually they come in two different sizes this is the big size byebye so you should write an expression to check if this person can adopt a pet or not so how should that condition look like well first of all you need to make sure that one of these two is true so that person either needs to have free time to play with the pet or he needs to have another pet so that the animal has a friend he has someone to play with so one of these two needs to be true and then at the same time the person needs to have backyard so that the cat or a dog or whichever animal can go outside enjoy the Sun and so on so that is another part and then third part is that the person cannot have pet allergies so that is how the expression should look like now you can pause the video and try to do it on your own and now we are going to do it together so as we said one of these two needs to be true so I will put inside parentheses that either the person needs to have free time to play or he needs to have other pets like this okay and then the person needs to have backyard okay and then at the same time he cannot have pet allergies so in order for this person to be able to adopt the pet this inside the parentheses needs to be true and then this needs to be true and then this here needs to be true and then for this part inside parentheses to be true just one of these two need to be true so now if I start the program let's check the result the result is true because the person does not have time to play but he has another pet so the animal will have a friend and someone to play with so this here will be true and then the person has backyard that is true and then he doesn't have pet allergies so this here will be false and when we reverse that this part here will be true as well so that is how this entire condition results as true so I hope that you enjoyed this video and that you learned how to use logical and relational operators on real examples if you have any questions you can leave those in the comment section and if you want to learn how to build real applications and if you want to get a job as a software developer then click the link in the description and you can enroll in my practical programming course where I will personally lead you from beginner to expert in programming until you get your dream job and don't forget that for a limited period of time we have a special discount that you can claim by clicking the link in the description of this video so thank you very much for watching and I will see you in another video bye
