With timestamps:

00:00 - hi everyone and welcome to my channel in
00:03 - this video i want to talk about linked
00:05 - lists and i want to show you three
00:07 - different ways to add an element into a
00:10 - linked list which means to insert a node
00:13 - into a linked list so i want to show you
00:16 - how you can insert a node at the front
00:19 - of a linked list at the end of a linked
00:21 - list and then also how you can insert a
00:24 - node after a specific node so that is
00:27 - what i will be talking about in this
00:29 - video and then if you are not familiar
00:31 - with linked lists at all if you don't
00:33 - know how to implement your own linked
00:34 - list if you don't know what our main
00:37 - characteristic what characteristics what
00:39 - i mean advantages and disadvantages of
00:41 - linked lists i would recommend you to
00:43 - watch my first video related to this
00:45 - topic which i will link here and in the
00:48 - description as well so make sure to
00:50 - watch that video and in that video i
00:52 - showed you how you can implement your
00:54 - own linked list
00:55 - using c plus programming language which
00:58 - is this code here so if you don't
01:00 - understand some of this code here make
01:02 - sure to watch that video and then i will
01:05 - also paste this code in the comment and
01:08 - i will pin that comment so that you can
01:10 - use this code if you want
01:13 - so now i will just go very quickly over
01:15 - this code so that you are familiar with
01:17 - what it is doing but again if you need
01:19 - to understand what every single line of
01:21 - code is doing make sure to watch my
01:23 - first video related to linked lists
01:26 - so here i have created a class called
01:29 - node and that class represents one
01:32 - element of a linked list so one node and
01:35 - that node consists of two parts the
01:38 - first part is value of that node and
01:40 - then second part is a pointer to the
01:43 - next node so that is this class here and
01:47 - then here i have created three nodes
01:49 - actually i have created three pointers
01:51 - to three nodes so first second and third
01:55 - and this head this is actually just a
01:57 - name for the first node so it is head of
01:59 - a linked list which means that it is the
02:01 - first node of a linked list and then
02:05 - here and here and here i have assigned
02:09 - values to first and second and third
02:13 - node and then i have also linked
02:15 - elements of my list
02:17 - so here i have set that my head element
02:19 - is pointing to the second element and
02:21 - then my second element is pointing to
02:23 - the third element and then third
02:26 - considering that it is the last is
02:28 - pointing to null so that means that it
02:30 - is not pointing to anything which means
02:32 - that it is the last element of a linked
02:34 - list and i have also implemented a
02:37 - function called print list which
02:39 - receives head element which means the
02:42 - first element of this list here and if
02:46 - you look at the implementation of print
02:48 - list function you will notice that it
02:51 - uses while loop in order to traverse
02:54 - every single element of that list and in
02:57 - each iteration it is going to write out
03:00 - the value of that specific element so
03:02 - the value of that specific node and then
03:05 - it will move to the next node and it
03:08 - will continue doing that so it will
03:09 - continue moving to the next node until
03:12 - it comes to the node which is equal to
03:14 - null and at that point it will no longer
03:17 - enter into this while loop which means
03:19 - that we will leave this function here
03:21 - and after executing this function here
03:24 - we will successfully print out all of
03:27 - the values that are stored inside our
03:30 - linked list so if i run this program
03:34 - okay
03:35 - you will see that we have one two three
03:38 - which are the elements of our linked
03:40 - list
03:42 - so again if you need to understand this
03:44 - code in more detail make sure to watch
03:46 - my first video related to linked lists
03:48 - it will be in the description and now i
03:51 - want to show you three different ways on
03:53 - how you can insert an element into this
03:56 - list here so the first way to insert an
04:00 - element into a linked list will be to
04:02 - insert it at the front of a linked list
04:05 - so i will do that using a function so
04:08 - let's create that function and let's
04:11 - create it here
04:12 - so it will be of return type void and i
04:16 - will call it insert
04:18 - at the front
04:21 - like this
04:23 - okay
04:24 - and let's collapse this print list
04:26 - function so that i have more space to
04:28 - work now let's see what this insert at
04:31 - the front function is going to receive
04:33 - so what kind of parameters will i pass
04:36 - to this function here well
04:38 - this is how the invocation of this
04:40 - function is going to look like so i'm
04:43 - going to say insert
04:45 - at the front
04:46 - and then what i want to pass to this
04:49 - function here is going to be the address
04:52 - of this head node pointer so i will say
04:55 - please pass the address of my head
04:58 - and then i also want to pass the value
05:00 - that i want to add the value that i want
05:03 - to insert at the front of my list so
05:06 - let's say for example that will be minus
05:08 - 1 because this list here
05:12 - so this list here as you can see from my
05:14 - class is storing integer values so here
05:19 - i am passing the address of my head node
05:21 - and then i am passing integer value that
05:23 - will be added at the front of my linked
05:26 - list now this here means that we need to
05:29 - receive these two parameters inside this
05:32 - function here so considering that here i
05:35 - am passing an address of a pointer that
05:38 - means that here i will need to receive a
05:40 - pointer to a pointer so i will need to
05:43 - receive a node pointer to a pointer
05:46 - which i will call head
05:49 - okay so that is the first parameter and
05:51 - then the second parameter is just an
05:53 - integer number so here i will say int
05:57 - and let's call that parameter new value
06:01 - like this
06:02 - okay so these are two parameters that
06:05 - this function needs to receive in order
06:08 - to insert a new node at the front of a
06:11 - linked list so there are three steps
06:14 - that this function here needs to perform
06:16 - in order to do that in order to insert
06:19 - an element at the front of a linked list
06:21 - so let me very quickly type out those
06:24 - three steps so i will write them here
06:26 - and then we will implement those three
06:29 - steps together
06:31 - so here are three steps that we need to
06:33 - implement in order to insert an element
06:36 - at the front of a linked list the first
06:39 - step is that we need to prepare a new
06:42 - node and i will show you how you can
06:44 - prepare a new node in a couple of
06:46 - moments and then this second step says
06:49 - that we need to put it in front of our
06:51 - current head which means that we need to
06:53 - put that new node in front of current
06:56 - first node of our linked list because we
06:59 - are trying to add it at the front of our
07:02 - linked list and then third step says
07:05 - move head of the linked list to point to
07:08 - new node why well because this newly
07:12 - added node is now going to be the head
07:14 - of our linked list and what previously
07:16 - was the head of our linked list is now
07:19 - going to become the second node of that
07:21 - list so let's implement these three
07:24 - steps and let me show you how you can
07:26 - describe these three steps using c plus
07:29 - code
07:30 - so
07:31 - in order to prepare a new node you will
07:34 - do the following you will create a node
07:36 - pointer which i will call
07:39 - new
07:40 - node
07:41 - like this and i will allocate memory for
07:43 - that note so i will say new node
07:46 - okay and then considering that we have
07:49 - passed a new value which means the value
07:52 - for this node here we have passed that
07:54 - as parameter to this function what i
07:57 - will do is i will say that my new node
08:00 - the value of that node will be equal to
08:03 - this value here
08:05 - okay so that is the code that we will
08:08 - type for this first step and with this
08:11 - code here we have prepared our new node
08:14 - now this second step says that we need
08:17 - to put it in front of our current head
08:19 - which means that we need to say now that
08:22 - our new node will point to our current
08:25 - head so
08:26 - i will say that my new node
08:29 - dot next will be
08:32 - equal to our head node pointer and as
08:36 - you can see here i am assigning
08:38 - assigning a headnote pointer because
08:40 - this here is pointer as well as you can
08:43 - see here so i am assigning a pointer to
08:45 - a pointer and with this line of code
08:48 - here i have said that now my new node is
08:51 - pointing to my current head of my linked
08:53 - list and then in this third step here
08:56 - what i need to do is i need to say to my
08:58 - linked list hey this newly added node is
09:02 - now going to be your head so i have
09:04 - added an element at the front of a
09:06 - linked list and that element is now
09:08 - going to be your head
09:10 - so i'm going to say now that my head
09:12 - pointer will be equal to my new node and
09:16 - again this here is a pointer and my new
09:19 - node is created as a pointer so this
09:22 - here will work okay so with this code
09:25 - here i have successfully inserted an
09:28 - element at the front of a linked list
09:30 - and in order to test this function here
09:33 - i will return to this part here and and
09:36 - as you can see i have already invoked
09:38 - this function so i have said insert at
09:41 - the front and then i have passed address
09:44 - of this head node pointer and i have
09:46 - passed an element which has the value of
09:48 - minus one so if i run my program now
09:53 - let's see what we will get well as you
09:55 - can see it indeed it has successfully
09:58 - inserted an element at the front of our
10:00 - linked list which previously was one two
10:02 - three and now we have minus one at the
10:05 - front so let's stop this program and
10:07 - let's try invoking this function one
10:09 - more time so i'm going to say now please
10:12 - insert minus one at the front of my list
10:15 - and then insert minus two at the front
10:17 - of that list so if i run my program
10:20 - again
10:21 - as you can see we will get minus 2 minus
10:24 - 1 and then 1 2 3 which means that this
10:28 - function here has done its job so indeed
10:31 - it inserts an element at the front of a
10:34 - linked list
10:36 - so again how this function inserts an
10:38 - element at the front of our linked list
10:41 - well it prepares a new node here and
10:44 - then it says that that new node will
10:46 - point to the current first element of
10:48 - our linked list because we are trying to
10:51 - add a new node at the front and then
10:54 - after doing that we now need to say that
10:56 - at the head of our linked list will be
10:58 - that newly added node so if we had a
11:01 - list which was one two three in this
11:04 - first step here i have prepared a new
11:07 - node and then in this second step i have
11:10 - said that this new node is now pointing
11:12 - to my first node what previously was the
11:15 - first node of this list and then in this
11:19 - third step i now say to my linked list
11:22 - hey this is now your head it's no longer
11:24 - this element here but it is this element
11:27 - here so now my linked list looks like
11:29 - that first second third fourth so minus
11:33 - one one two three
11:36 - okay
11:37 - so let me collapse this function here
11:40 - and then i will also delete these two
11:42 - invocations because i want to show you
11:45 - how you can implement a function that is
11:48 - going to add an element at the end of a
11:50 - linked list so now i want to show you
11:53 - how you can insert a node at the end of
11:56 - a linked list so in order to do that i
11:58 - will implement another function which i
12:01 - will call
12:02 - insert
12:04 - at
12:04 - the end
12:06 - like this
12:07 - and this function is going to be very
12:10 - similar to this function here and it
12:13 - will receive the same parameters as this
12:16 - insert at the front function so i'm
12:18 - going to copy this parameter list and
12:21 - paste it
12:22 - here
12:23 - okay now this insert at the end function
12:26 - needs to perform four steps in order to
12:29 - insert a node at the end of a linked
12:32 - list and i will very quickly write those
12:34 - steps here and i will be back so that we
12:36 - can again implement those steps together
12:41 - so here are four steps that we need to
12:43 - implement in order to insert a node at
12:46 - the end of a linked list so the first
12:49 - step is that we need to prepare a new
12:51 - node that will be added at the end and
12:54 - then second step is a check so we need
12:57 - to make sure that this list is not empty
13:00 - because if it is empty that means that
13:03 - this node that we want to add at the end
13:05 - will actually be the first node and the
13:08 - last node and the only node in that list
13:10 - which means that that new node will
13:13 - become a head node of that list and then
13:17 - if this step here is not true so if this
13:20 - list already has elements we will
13:23 - proceed with these two steps so in this
13:26 - third step we will need to find the last
13:28 - node why well because in this fourth
13:32 - step we need to make that last node
13:35 - point to our new node that we want to
13:37 - add at the end so we will need to insert
13:40 - that new node after last node which
13:43 - means insert it at the end so
13:46 - let's implement this first step here
13:49 - let's prepare a new node so i'm going to
13:52 - say that i want to create a node pointer
13:55 - which i will call new node and i will
13:58 - allocate memory for my new node
14:01 - like this
14:03 - okay and then considering that i passed
14:06 - a value for my new node here i will use
14:09 - that value in order to assign it to the
14:12 - value of my new node so i will say that
14:15 - my new node value will be equal to new
14:19 - value
14:20 - okay
14:20 - and then another step is that
14:22 - considering that we want to add a node
14:24 - to the end of our linked list that means
14:27 - that that will be the last node so it
14:30 - will point to null so we can do that
14:32 - part here as well i can say that my new
14:35 - node dot next will be equal to null like
14:39 - this so with these three lines of code i
14:43 - have successfully prepared my new node
14:45 - that will be added at the end of my
14:48 - linked list
14:49 - now this second step here says that we
14:52 - need to check if our linked list is
14:55 - empty so that means that if
14:58 - our current head pointer is equal to
15:02 - null
15:03 - we will say that our current head
15:06 - pointer will become our new node which
15:10 - means that if this list here is empty so
15:14 - if it is null the head of our list will
15:17 - become this newly created node so it
15:20 - will become the first and the last and
15:22 - the only node of that list and if this
15:26 - here is the case we don't need to do
15:28 - anything else because we have
15:29 - successfully added that node to our list
15:32 - so here i can say return oh i can say
15:37 - return
15:38 - okay so with this code here i have
15:41 - checked if that list was empty and if it
15:44 - was i added a new node to my linked list
15:48 - and that new node had become the new
15:51 - head of that list and also the last
15:53 - element of that list and the only
15:56 - element of that list so that is what
15:58 - this code here is doing but in case that
16:02 - the list already contains elements so in
16:04 - case that it is not empty we need to
16:07 - perform these two steps in order to add
16:10 - a node at the end of that list so
16:14 - this third step says that we need to
16:16 - find the last node so how do you do that
16:19 - how do you find the last node of a
16:21 - linked list in this situation we have a
16:24 - list that has three nodes first second
16:28 - and third so how can i find this third
16:31 - element who knows where this third
16:33 - element is the answer is that the second
16:36 - node knows where the third node is why
16:39 - well because the second node is storing
16:41 - a pointer to the third node and then who
16:44 - knows where the second node is the
16:46 - answer is that the first node knows
16:49 - where the second node is why because the
16:52 - first node has a pointer to the second
16:54 - node okay so in order to access to the
16:57 - third node you need to traverse first
17:01 - second and then third so how will you
17:04 - access this last element how will you
17:06 - find this last element the answer is you
17:09 - will start at the first node and then
17:11 - you will ask hey are you pointing to any
17:13 - elements or are you pointing to null and
17:15 - then if this element here says i am
17:18 - pointing to a node you will move to that
17:20 - next node and then you will ask that
17:23 - next node hey are you pointing to any
17:25 - node or are you pointing to null and
17:27 - then this element here will say i'm
17:30 - actually pointing to a valid node so you
17:32 - will move to that next node which is
17:34 - third node and then you will ask this
17:36 - node as well hey are you pointing to any
17:39 - nodes or are you pointing to null but
17:41 - considering that this node here is the
17:43 - last one it will point to null so that
17:46 - is how you will know that you have come
17:49 - to the last element of your linked list
17:52 - so let's do that and let's implement
17:54 - this logic using a while loop so what i
17:57 - want to do first is i want to create a
17:59 - new
18:00 - node pointer which i will call last and
18:03 - initially i want to say that my last
18:06 - node will hold the same value as my head
18:09 - node pointer so i will start at the
18:11 - first node and then what i want to do is
18:14 - i want to move to the next and the next
18:16 - and the next and the next and so on
18:18 - until i come to the one that is pointing
18:21 - to null and in order to do that i will
18:23 - use while loop
18:26 - and i will say inside this while loop
18:29 - that it is going to iterate while our
18:32 - last
18:34 - next
18:36 - is different than no
18:39 - okay
18:40 - and in each iteration what i want to do
18:42 - is i want to say that my last will be
18:45 - equal to whatever my last
18:48 - next is pointing to so i will move my
18:53 - last element to the next and the next
18:56 - and the next until i come to the one
18:59 - which is pointing to null and at that
19:01 - point i will know that my last is
19:04 - storing the address of my last note
19:08 - so with this we have successfully found
19:10 - the last node of our linked list and
19:13 - then this fourth step here says that we
19:16 - need to insert a new node after our last
19:19 - node which means that now i need to say
19:22 - that my last node so my current last
19:25 - node dot next will now be equal to my
19:30 - new node
19:31 - like this
19:33 - okay so we have now successfully added a
19:35 - new node after our previously last node
19:39 - so in the list that has three elements
19:41 - first second and third i have
19:44 - successfully added this new node here so
19:47 - now what previously was last element is
19:50 - pointing to our new node
19:53 - okay so let's test this function i am
19:56 - going to invoke it here i'm going to say
19:59 - insert at the
20:01 - end like this and this function is going
20:04 - to receive the address of our head node
20:08 - and then it will also receive the value
20:11 - for the new node that we want to insert
20:13 - at the end so let's say that will be for
20:16 - example number four
20:18 - okay and if i run this program
20:21 - as you can see it says one two three
20:24 - four so this new element has
20:26 - successfully been added at the end of
20:28 - our linked list and if i try to add one
20:33 - more for example
20:34 - number five and run my program again as
20:38 - you can see now we have a list that has
20:40 - one two three four five elements
20:43 - okay so that means that this function
20:46 - here indeed is adding or inserting
20:49 - elements at the end of a linked list
20:52 - so how do we do that how do we insert a
20:55 - node at the end of a linked list well in
20:58 - the first step we need to prepare that
21:00 - node so i'm going to allocate the memory
21:03 - for that node and then i will say that
21:05 - the value of that node will be the value
21:08 - that i want to add at the end of my
21:10 - linked list which i have passed as this
21:12 - parameter here and then considering that
21:15 - this node will be the last node i can
21:18 - say that it will point to null and then
21:21 - in this second step i need to check if
21:23 - this list is empty because if it is
21:25 - empty that means that this new node will
21:28 - actually be the head node so it will be
21:30 - the first node and the last node and the
21:32 - only node so that is what this code here
21:36 - does but in case that this list is not
21:39 - empty we proceed with these two steps so
21:42 - in this third step we need to find the
21:45 - last node and we do that by moving to
21:48 - the next node until we come to the one
21:51 - which is equal to null and at that point
21:54 - we have the address of that last node
21:56 - stored inside this last node pointer and
22:00 - then in this fourth step considering
22:02 - that here we have successfully found our
22:05 - last node what i can do is i can say
22:08 - that now my last node will point to a
22:11 - new node that i want to add at the end
22:13 - which is this node here so that means
22:16 - that we have successfully added a new
22:19 - node to our linked list at the end of
22:21 - that list
22:23 - so let's collapse now this insert at the
22:26 - end and let's also delete these two
22:29 - invocations here because i want to show
22:32 - you third way to insert an element into
22:35 - a linked list so third way to add a node
22:39 - to a linked list which is going to be to
22:41 - insert it after a specific node so what
22:45 - i want to do is i want to create a third
22:47 - function
22:48 - also of return type
22:50 - void and i'm going to call it
22:52 - insert after
22:55 - okay
22:56 - now this insert after function will have
22:59 - to receive two parameters in order to be
23:02 - able to insert a node after a specific
23:05 - node the first parameter will be that
23:08 - specific node after which i want to add
23:10 - a new node so i will call that parameter
23:14 - previous or previous node and i will put
23:16 - it here i will say node pointer which i
23:20 - will call previous
23:22 - like this and then the second parameter
23:25 - will be the value for my new node so i
23:28 - will paste it here it's the same
23:30 - parameter as these two previous
23:32 - functions received and then this
23:34 - function also will have to perform three
23:37 - steps in order to insert a node after
23:41 - this node here so let me again write
23:45 - those steps here on the screen and then
23:47 - we will implement those steps and we
23:50 - will see how we can insert an element
23:52 - insert a node after a specific node
23:56 - so here are three steps that you need to
23:58 - implement in order to insert a node
24:01 - after a specific node the first step is
24:04 - that you just need to check if this
24:06 - previous node is null so you need to
24:08 - make sure that someone has not passed no
24:11 - value for your previous node okay and
24:14 - then this second step is that you need
24:17 - to prepare your new node and then the
24:19 - third step says that you need to insert
24:21 - new node after your previous element
24:25 - so how does this third step work
24:28 - well imagine the following situation you
24:30 - have node a and node b and your node a
24:34 - is pointing to your node b
24:36 - so how do you add a new node after your
24:39 - node a
24:40 - well the answer is that now your node a
24:43 - needs to point to that new node and then
24:46 - the new node will point to your element
24:48 - b okay so instead of your linked list
24:51 - going like this a b it will go like this
24:55 - a
24:55 - new node and then b
24:58 - okay so let's implement these three
25:01 - steps here let me show you how that
25:02 - works in c plus plus code
25:05 - the first step is to check if previous
25:07 - node is null so i will just say if
25:10 - previous
25:12 - is equal to null
25:14 - in that situation i will write out a
25:16 - message to my user and i will say that
25:19 - previous
25:21 - cannot be
25:23 - null
25:24 - like this and i will return from this
25:27 - function here which means that i will
25:29 - not continue the execution of this
25:31 - function here why well because here we
25:34 - want to receive a valid element and null
25:36 - is not valid element we want to receive
25:39 - a valid node after which we will add a
25:42 - new node and null is not a valid node so
25:46 - that is the first step and then the
25:49 - second step says that we need to prepare
25:51 - a new node so let's create a new node
25:55 - pointer and i will call it new node and
25:58 - here i will allocate memory for that
26:01 - node
26:02 - like this and then i will assign this
26:06 - new value as the value for my new node
26:08 - so i will say newnode dot
26:12 - value
26:13 - is going to be equal to new value the
26:16 - value that i want to add in my linked
26:19 - list and then this third step here says
26:22 - that i need to insert a new node after
26:26 - this previous node which means that now
26:29 - my previous node so now my node a needs
26:32 - to point to that new node and then that
26:35 - new node now needs to point to my node b
26:38 - so instead of my node a pointing to my
26:40 - node b now my node a will point to the
26:42 - new node and my new node will point to
26:45 - my node b but one very important thing
26:48 - to pay attention to is
26:51 - when will you break this connection
26:53 - between your node a and your node b so
26:56 - that you don't lose your node b so that
26:58 - you don't lose the address of your node
27:00 - b forever because the only one who knows
27:04 - where your node b is
27:06 - is your node a and if you do it the way
27:08 - that i just explained so if you first
27:10 - say that your node a will point to your
27:13 - new node at that moment you are deleting
27:17 - this connection in order to make this
27:20 - connection and you will lose the address
27:23 - of your node b forever if you do that so
27:26 - what you need to do first is you first
27:29 - need to say that your new node will
27:31 - store the address of your node b so your
27:34 - new node will point to whatever your
27:36 - node a is pointing to which is your node
27:40 - b and then after you have successfully
27:42 - stored the address of your node b inside
27:46 - this connection then you can break this
27:48 - connection so then you can say that your
27:50 - node a will point to your new node so
27:54 - let's see how we can implement that in c
27:56 - plus plus code
27:58 - so first you implement this connection
28:01 - so first you say that newnode dot next
28:05 - will be equal to whatever our previous
28:09 - node was pointing to so it will be equal
28:12 - to our previous next and then after you
28:15 - have successfully stored the address of
28:17 - your node b
28:19 - then you can overwrite this connection
28:21 - with disconnection so then you can say
28:24 - that your previous dot next will point
28:28 - to your new node like this okay so with
28:32 - this function here we have successfully
28:34 - inserted an element after a specific
28:37 - node so let's test this function here
28:40 - and i will invoke it here before my
28:43 - print list function i will say insert
28:46 - or actually insert after and what i want
28:49 - to do is i want to insert an element
28:51 - after this head node so i will say
28:54 - please insert after this element here so
28:57 - after one what i want to insert is i
29:00 - want to insert minus one
29:02 - like this
29:03 - and if i run my program
29:06 - let's see what will happen as you can
29:08 - see minus one has successfully been
29:10 - inserted after one so we have inserted
29:14 - an element after our head element now
29:16 - let's insert another element for example
29:19 - let's insert an element after
29:22 - this element here so after two i want to
29:25 - insert the value of -2 and if i run my
29:29 - program
29:30 - as you can see this is how our linked
29:33 - list looks like now so 1 minus 1 2 minus
29:37 - 2 and then 3 which means that this
29:41 - function here indeed is inserting
29:43 - elements after a specific element so it
29:46 - is inserting nodes after previous node
29:48 - that is passed as a parameter here
29:51 - okay
29:52 - so i hope this video helped you
29:54 - understand how you can insert a node at
29:57 - the beginning of a linked list at the
29:59 - end of a linked list and then also after
30:01 - a specific element of your linked list
30:05 - there is something else that i wanted to
30:06 - say
30:08 - i don't know so give this video a thumbs
30:10 - up and share it with your friends and if
30:12 - you have any questions put those in the
30:14 - comments down below
30:16 - and tag me on your instagram stories i
30:18 - love watching your instagram stories and
30:20 - i will leave links to my other social
30:22 - media accounts in the description of
30:24 - this video and thank you very much for
30:27 - watching i will see you in my next video
30:29 - bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to talk about linked lists and i want to show you three different ways to add an element into a linked list which means to insert a node into a linked list so i want to show you how you can insert a node at the front of a linked list at the end of a linked list and then also how you can insert a node after a specific node so that is what i will be talking about in this video and then if you are not familiar with linked lists at all if you don't know how to implement your own linked list if you don't know what our main characteristic what characteristics what i mean advantages and disadvantages of linked lists i would recommend you to watch my first video related to this topic which i will link here and in the description as well so make sure to watch that video and in that video i showed you how you can implement your own linked list using c plus programming language which is this code here so if you don't understand some of this code here make sure to watch that video and then i will also paste this code in the comment and i will pin that comment so that you can use this code if you want so now i will just go very quickly over this code so that you are familiar with what it is doing but again if you need to understand what every single line of code is doing make sure to watch my first video related to linked lists so here i have created a class called node and that class represents one element of a linked list so one node and that node consists of two parts the first part is value of that node and then second part is a pointer to the next node so that is this class here and then here i have created three nodes actually i have created three pointers to three nodes so first second and third and this head this is actually just a name for the first node so it is head of a linked list which means that it is the first node of a linked list and then here and here and here i have assigned values to first and second and third node and then i have also linked elements of my list so here i have set that my head element is pointing to the second element and then my second element is pointing to the third element and then third considering that it is the last is pointing to null so that means that it is not pointing to anything which means that it is the last element of a linked list and i have also implemented a function called print list which receives head element which means the first element of this list here and if you look at the implementation of print list function you will notice that it uses while loop in order to traverse every single element of that list and in each iteration it is going to write out the value of that specific element so the value of that specific node and then it will move to the next node and it will continue doing that so it will continue moving to the next node until it comes to the node which is equal to null and at that point it will no longer enter into this while loop which means that we will leave this function here and after executing this function here we will successfully print out all of the values that are stored inside our linked list so if i run this program okay you will see that we have one two three which are the elements of our linked list so again if you need to understand this code in more detail make sure to watch my first video related to linked lists it will be in the description and now i want to show you three different ways on how you can insert an element into this list here so the first way to insert an element into a linked list will be to insert it at the front of a linked list so i will do that using a function so let's create that function and let's create it here so it will be of return type void and i will call it insert at the front like this okay and let's collapse this print list function so that i have more space to work now let's see what this insert at the front function is going to receive so what kind of parameters will i pass to this function here well this is how the invocation of this function is going to look like so i'm going to say insert at the front and then what i want to pass to this function here is going to be the address of this head node pointer so i will say please pass the address of my head and then i also want to pass the value that i want to add the value that i want to insert at the front of my list so let's say for example that will be minus 1 because this list here so this list here as you can see from my class is storing integer values so here i am passing the address of my head node and then i am passing integer value that will be added at the front of my linked list now this here means that we need to receive these two parameters inside this function here so considering that here i am passing an address of a pointer that means that here i will need to receive a pointer to a pointer so i will need to receive a node pointer to a pointer which i will call head okay so that is the first parameter and then the second parameter is just an integer number so here i will say int and let's call that parameter new value like this okay so these are two parameters that this function needs to receive in order to insert a new node at the front of a linked list so there are three steps that this function here needs to perform in order to do that in order to insert an element at the front of a linked list so let me very quickly type out those three steps so i will write them here and then we will implement those three steps together so here are three steps that we need to implement in order to insert an element at the front of a linked list the first step is that we need to prepare a new node and i will show you how you can prepare a new node in a couple of moments and then this second step says that we need to put it in front of our current head which means that we need to put that new node in front of current first node of our linked list because we are trying to add it at the front of our linked list and then third step says move head of the linked list to point to new node why well because this newly added node is now going to be the head of our linked list and what previously was the head of our linked list is now going to become the second node of that list so let's implement these three steps and let me show you how you can describe these three steps using c plus code so in order to prepare a new node you will do the following you will create a node pointer which i will call new node like this and i will allocate memory for that note so i will say new node okay and then considering that we have passed a new value which means the value for this node here we have passed that as parameter to this function what i will do is i will say that my new node the value of that node will be equal to this value here okay so that is the code that we will type for this first step and with this code here we have prepared our new node now this second step says that we need to put it in front of our current head which means that we need to say now that our new node will point to our current head so i will say that my new node dot next will be equal to our head node pointer and as you can see here i am assigning assigning a headnote pointer because this here is pointer as well as you can see here so i am assigning a pointer to a pointer and with this line of code here i have said that now my new node is pointing to my current head of my linked list and then in this third step here what i need to do is i need to say to my linked list hey this newly added node is now going to be your head so i have added an element at the front of a linked list and that element is now going to be your head so i'm going to say now that my head pointer will be equal to my new node and again this here is a pointer and my new node is created as a pointer so this here will work okay so with this code here i have successfully inserted an element at the front of a linked list and in order to test this function here i will return to this part here and and as you can see i have already invoked this function so i have said insert at the front and then i have passed address of this head node pointer and i have passed an element which has the value of minus one so if i run my program now let's see what we will get well as you can see it indeed it has successfully inserted an element at the front of our linked list which previously was one two three and now we have minus one at the front so let's stop this program and let's try invoking this function one more time so i'm going to say now please insert minus one at the front of my list and then insert minus two at the front of that list so if i run my program again as you can see we will get minus 2 minus 1 and then 1 2 3 which means that this function here has done its job so indeed it inserts an element at the front of a linked list so again how this function inserts an element at the front of our linked list well it prepares a new node here and then it says that that new node will point to the current first element of our linked list because we are trying to add a new node at the front and then after doing that we now need to say that at the head of our linked list will be that newly added node so if we had a list which was one two three in this first step here i have prepared a new node and then in this second step i have said that this new node is now pointing to my first node what previously was the first node of this list and then in this third step i now say to my linked list hey this is now your head it's no longer this element here but it is this element here so now my linked list looks like that first second third fourth so minus one one two three okay so let me collapse this function here and then i will also delete these two invocations because i want to show you how you can implement a function that is going to add an element at the end of a linked list so now i want to show you how you can insert a node at the end of a linked list so in order to do that i will implement another function which i will call insert at the end like this and this function is going to be very similar to this function here and it will receive the same parameters as this insert at the front function so i'm going to copy this parameter list and paste it here okay now this insert at the end function needs to perform four steps in order to insert a node at the end of a linked list and i will very quickly write those steps here and i will be back so that we can again implement those steps together so here are four steps that we need to implement in order to insert a node at the end of a linked list so the first step is that we need to prepare a new node that will be added at the end and then second step is a check so we need to make sure that this list is not empty because if it is empty that means that this node that we want to add at the end will actually be the first node and the last node and the only node in that list which means that that new node will become a head node of that list and then if this step here is not true so if this list already has elements we will proceed with these two steps so in this third step we will need to find the last node why well because in this fourth step we need to make that last node point to our new node that we want to add at the end so we will need to insert that new node after last node which means insert it at the end so let's implement this first step here let's prepare a new node so i'm going to say that i want to create a node pointer which i will call new node and i will allocate memory for my new node like this okay and then considering that i passed a value for my new node here i will use that value in order to assign it to the value of my new node so i will say that my new node value will be equal to new value okay and then another step is that considering that we want to add a node to the end of our linked list that means that that will be the last node so it will point to null so we can do that part here as well i can say that my new node dot next will be equal to null like this so with these three lines of code i have successfully prepared my new node that will be added at the end of my linked list now this second step here says that we need to check if our linked list is empty so that means that if our current head pointer is equal to null we will say that our current head pointer will become our new node which means that if this list here is empty so if it is null the head of our list will become this newly created node so it will become the first and the last and the only node of that list and if this here is the case we don't need to do anything else because we have successfully added that node to our list so here i can say return oh i can say return okay so with this code here i have checked if that list was empty and if it was i added a new node to my linked list and that new node had become the new head of that list and also the last element of that list and the only element of that list so that is what this code here is doing but in case that the list already contains elements so in case that it is not empty we need to perform these two steps in order to add a node at the end of that list so this third step says that we need to find the last node so how do you do that how do you find the last node of a linked list in this situation we have a list that has three nodes first second and third so how can i find this third element who knows where this third element is the answer is that the second node knows where the third node is why well because the second node is storing a pointer to the third node and then who knows where the second node is the answer is that the first node knows where the second node is why because the first node has a pointer to the second node okay so in order to access to the third node you need to traverse first second and then third so how will you access this last element how will you find this last element the answer is you will start at the first node and then you will ask hey are you pointing to any elements or are you pointing to null and then if this element here says i am pointing to a node you will move to that next node and then you will ask that next node hey are you pointing to any node or are you pointing to null and then this element here will say i'm actually pointing to a valid node so you will move to that next node which is third node and then you will ask this node as well hey are you pointing to any nodes or are you pointing to null but considering that this node here is the last one it will point to null so that is how you will know that you have come to the last element of your linked list so let's do that and let's implement this logic using a while loop so what i want to do first is i want to create a new node pointer which i will call last and initially i want to say that my last node will hold the same value as my head node pointer so i will start at the first node and then what i want to do is i want to move to the next and the next and the next and the next and so on until i come to the one that is pointing to null and in order to do that i will use while loop and i will say inside this while loop that it is going to iterate while our last next is different than no okay and in each iteration what i want to do is i want to say that my last will be equal to whatever my last next is pointing to so i will move my last element to the next and the next and the next until i come to the one which is pointing to null and at that point i will know that my last is storing the address of my last note so with this we have successfully found the last node of our linked list and then this fourth step here says that we need to insert a new node after our last node which means that now i need to say that my last node so my current last node dot next will now be equal to my new node like this okay so we have now successfully added a new node after our previously last node so in the list that has three elements first second and third i have successfully added this new node here so now what previously was last element is pointing to our new node okay so let's test this function i am going to invoke it here i'm going to say insert at the end like this and this function is going to receive the address of our head node and then it will also receive the value for the new node that we want to insert at the end so let's say that will be for example number four okay and if i run this program as you can see it says one two three four so this new element has successfully been added at the end of our linked list and if i try to add one more for example number five and run my program again as you can see now we have a list that has one two three four five elements okay so that means that this function here indeed is adding or inserting elements at the end of a linked list so how do we do that how do we insert a node at the end of a linked list well in the first step we need to prepare that node so i'm going to allocate the memory for that node and then i will say that the value of that node will be the value that i want to add at the end of my linked list which i have passed as this parameter here and then considering that this node will be the last node i can say that it will point to null and then in this second step i need to check if this list is empty because if it is empty that means that this new node will actually be the head node so it will be the first node and the last node and the only node so that is what this code here does but in case that this list is not empty we proceed with these two steps so in this third step we need to find the last node and we do that by moving to the next node until we come to the one which is equal to null and at that point we have the address of that last node stored inside this last node pointer and then in this fourth step considering that here we have successfully found our last node what i can do is i can say that now my last node will point to a new node that i want to add at the end which is this node here so that means that we have successfully added a new node to our linked list at the end of that list so let's collapse now this insert at the end and let's also delete these two invocations here because i want to show you third way to insert an element into a linked list so third way to add a node to a linked list which is going to be to insert it after a specific node so what i want to do is i want to create a third function also of return type void and i'm going to call it insert after okay now this insert after function will have to receive two parameters in order to be able to insert a node after a specific node the first parameter will be that specific node after which i want to add a new node so i will call that parameter previous or previous node and i will put it here i will say node pointer which i will call previous like this and then the second parameter will be the value for my new node so i will paste it here it's the same parameter as these two previous functions received and then this function also will have to perform three steps in order to insert a node after this node here so let me again write those steps here on the screen and then we will implement those steps and we will see how we can insert an element insert a node after a specific node so here are three steps that you need to implement in order to insert a node after a specific node the first step is that you just need to check if this previous node is null so you need to make sure that someone has not passed no value for your previous node okay and then this second step is that you need to prepare your new node and then the third step says that you need to insert new node after your previous element so how does this third step work well imagine the following situation you have node a and node b and your node a is pointing to your node b so how do you add a new node after your node a well the answer is that now your node a needs to point to that new node and then the new node will point to your element b okay so instead of your linked list going like this a b it will go like this a new node and then b okay so let's implement these three steps here let me show you how that works in c plus plus code the first step is to check if previous node is null so i will just say if previous is equal to null in that situation i will write out a message to my user and i will say that previous cannot be null like this and i will return from this function here which means that i will not continue the execution of this function here why well because here we want to receive a valid element and null is not valid element we want to receive a valid node after which we will add a new node and null is not a valid node so that is the first step and then the second step says that we need to prepare a new node so let's create a new node pointer and i will call it new node and here i will allocate memory for that node like this and then i will assign this new value as the value for my new node so i will say newnode dot value is going to be equal to new value the value that i want to add in my linked list and then this third step here says that i need to insert a new node after this previous node which means that now my previous node so now my node a needs to point to that new node and then that new node now needs to point to my node b so instead of my node a pointing to my node b now my node a will point to the new node and my new node will point to my node b but one very important thing to pay attention to is when will you break this connection between your node a and your node b so that you don't lose your node b so that you don't lose the address of your node b forever because the only one who knows where your node b is is your node a and if you do it the way that i just explained so if you first say that your node a will point to your new node at that moment you are deleting this connection in order to make this connection and you will lose the address of your node b forever if you do that so what you need to do first is you first need to say that your new node will store the address of your node b so your new node will point to whatever your node a is pointing to which is your node b and then after you have successfully stored the address of your node b inside this connection then you can break this connection so then you can say that your node a will point to your new node so let's see how we can implement that in c plus plus code so first you implement this connection so first you say that newnode dot next will be equal to whatever our previous node was pointing to so it will be equal to our previous next and then after you have successfully stored the address of your node b then you can overwrite this connection with disconnection so then you can say that your previous dot next will point to your new node like this okay so with this function here we have successfully inserted an element after a specific node so let's test this function here and i will invoke it here before my print list function i will say insert or actually insert after and what i want to do is i want to insert an element after this head node so i will say please insert after this element here so after one what i want to insert is i want to insert minus one like this and if i run my program let's see what will happen as you can see minus one has successfully been inserted after one so we have inserted an element after our head element now let's insert another element for example let's insert an element after this element here so after two i want to insert the value of 2 and if i run my program as you can see this is how our linked list looks like now so 1 minus 1 2 minus 2 and then 3 which means that this function here indeed is inserting elements after a specific element so it is inserting nodes after previous node that is passed as a parameter here okay so i hope this video helped you understand how you can insert a node at the beginning of a linked list at the end of a linked list and then also after a specific element of your linked list there is something else that i wanted to say i don't know so give this video a thumbs up and share it with your friends and if you have any questions put those in the comments down below and tag me on your instagram stories i love watching your instagram stories and i will leave links to my other social media accounts in the description of this video and thank you very much for watching i will see you in my next video bye
