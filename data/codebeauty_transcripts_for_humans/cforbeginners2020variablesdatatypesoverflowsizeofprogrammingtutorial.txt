With timestamps:

00:00 - hi guys I hope you are all well and
00:02 - welcome to the second video of C++ for
00:05 - beginners in this video we are going to
00:07 - talk about variables data types and also
00:11 - I'm going to explain how you can enter
00:13 - data in your program and how that data
00:15 - is encoded into numbers using something
00:18 - called ASCII table so here I have opened
00:21 - Visual Studio and if you are not
00:24 - familiar with Visual Studio or there is
00:26 - some code that you see here but you
00:28 - don't understand it I would recommend
00:30 - you to watch my first video of this
00:32 - course the link is going to be in the
00:34 - description of this video and then come
00:37 - back to this video so let's talk about
00:40 - variables now what is variable well I
00:43 - like to explain it to a real-life
00:46 - example for example you see this glass
00:50 - here well what I can say about this
00:52 - glass is that it is a container for a
00:55 - certain type of liquid so it can hold
00:57 - water milk tea juice whatever you want
01:01 - really and the same way a variable is a
01:04 - container but for a certain data type so
01:07 - you can put whole number inside that you
01:10 - can put character or a decimal point
01:12 - number or a boolean value meaning true
01:15 - or false value so they are the same in
01:18 - this aspect another thing that I can say
01:22 - about this glass is that it defines a
01:25 - maximum amount of liquid that it can
01:27 - hold so it has a max limit and if you
01:31 - put too much it will overflow the same
01:34 - way with variables variables also define
01:37 - a maximum amount of data that they can
01:40 - hold for example if you have a whole
01:42 - number variable well there is a max
01:45 - number limit for that variable that it
01:48 - can hold and also if you put too much it
01:51 - is going to overflow
01:52 - it is literally called data type
01:54 - overflow so it is a container the same
02:00 - as variable and also it defines a
02:02 - maximum amount of data that it can hold
02:04 - but how much data you really put inside
02:07 - that variables so the same way would
02:10 - with the water inside this class if you
02:12 - decide to put
02:13 - 1/3 or 1/2 or 2/3 of this glass the same
02:17 - way is fit variables you can put however
02:19 - much you want as long as you don't put
02:21 - too much because then it's going to
02:24 - overflow one thing that is different
02:28 - though between variables and this glass
02:31 - is that you can put one day inside this
02:34 - glass you can put water the next thing
02:35 - you can put juice the next day you can
02:37 - put milk vanity or even you can mix two
02:40 - liquids but with variables you cannot do
02:43 - that at least not with once in c++ there
02:46 - are certain languages that you can do
02:48 - that with and there is also advantages
02:51 - and disadvantages when it comes to that
02:53 - but in C++ you cannot put two different
02:58 - data types inside one variables and you
03:00 - can also not change a data type of
03:04 - variables once you create it so let me
03:06 - show you what I'm talking about on a
03:08 - practical example let's say that you
03:12 - want to create a variable that is going
03:14 - to hold your annual salary
03:16 - well that variable is definitely going
03:18 - to be a decimal point number or also
03:22 - floating-point number that's how it's
03:24 - called in C++ and the type that is used
03:28 - for that is called float so I'm going to
03:30 - say float and then I'm going to give a
03:37 - name to that variable since we said that
03:41 - is going to hold our annual salary we
03:43 - are going to call it annual salary okay
03:49 - and then we are going to assign it a
03:52 - value and that value is going to be
03:55 - let's say 50,000 point 99 so now what I
04:02 - have done here is I have created a
04:04 - variable called annual salary I have
04:07 - said that that variable is going to be
04:09 - of type floating point number and then I
04:12 - have put inside that variable 50000
04:16 - point 99 so now let's see how we can
04:21 - based on this variable based on our
04:24 - annual salary
04:26 - how much our user is earning every month
04:30 - so what we are going to do is we are
04:32 - going to create another variable we are
04:35 - going to call it monthly salary and we
04:38 - are going to assign that variable a
04:39 - result of dividing this annual salary
04:43 - with twelve months so we are creating a
04:46 - variable of type float also since the
04:49 - result of division usually can be also
04:54 - floating-point number or a decimal
04:56 - number and because of that we are using
04:59 - also float type for our monthly salary
05:03 - variable so I'm creating monthly salary
05:09 - variable and I'm going to say that that
05:11 - variable is going to hold result of this
05:15 - expression annual salary divided by
05:18 - twelve months and now we have result of
05:23 - this division inside this variable and
05:26 - what we are left to do is to write that
05:28 - result out to our user so I'm going to
05:31 - say C out since that's the command that
05:33 - we use to output data to console and I'm
05:36 - going to say your monthly salary is and
05:45 - I'm going to say monthly salary so one
05:50 - thing to notice here is that when you
05:54 - are writing out strings or when you're
05:57 - writing out data like this you use
06:02 - quotation marks but when you want to
06:04 - write out value that you are holding
06:06 - inside a variable well then you just put
06:09 - the name of your variable you don't use
06:11 - any quotation marks then and now we can
06:14 - run our program and let's see what's the
06:17 - result that we got you see here your
06:20 - monthly salary is four thousand one
06:22 - hundred sixty six point 75 so if you
06:26 - want to check that out you can you can
06:28 - calculate it in your calculator
06:33 - one thing that that bothers me in this
06:36 - program is that we have hard-coded this
06:39 - value here so we have hard-coded coded
06:41 - this
06:42 - 50,000 point 99 not every one salary is
06:46 - 50000 point 99 and what if we wanted our
06:49 - user to enter what his salary is during
06:52 - the execution of our program so when he
06:55 - runs our program our program should ask
06:57 - him what is your annual salary and then
06:59 - he enters that salary and then we
07:01 - calculate his monthly salary based on
07:04 - the number that he has entered so I
07:06 - would like to upgrade this program now
07:08 - to work like I just explained and how we
07:12 - are going to do that well first I'm
07:14 - going to delete these 50,000 point 99 ok
07:19 - and then we are left with this situation
07:23 - here
07:23 - so it says float annual salary that
07:28 - means that I have just created a
07:30 - variable called annual salary and I have
07:33 - said I'm going to put a floating-point
07:35 - number inside that variable but I have
07:38 - not assigned any value to it yet so here
07:42 - we have a container for our annual
07:43 - salary and that container doesn't hold
07:47 - any value and if we try to run our
07:50 - program now what do you think that we
07:52 - are going to get write that in a
07:54 - comments before I run this program and
07:55 - now I'm going to so pause the video and
07:59 - think about it and then write write your
08:02 - answer in the comments and now I'm going
08:04 - to run the program and you can see that
08:09 - we have some build errors as this here
08:12 - this window here says so let's see if we
08:18 - open this part here it says we have one
08:22 - error and that error is uninitialized
08:25 - local variable annual salary used what
08:28 - that means is that this expression is
08:31 - expression here if you see this green
08:33 - underline it also says using an
08:37 - initialized memory annual salary well
08:40 - that means that this expression here our
08:43 - computer doesn't know how to do this
08:46 - expression since we haven't assigned any
08:47 - value to our annual salary variables so
08:50 - it doesn't know how to divide that that
08:53 - with well since there is no value inside
08:56 - that container inside that variable so
08:58 - this causes a compiler error and whoever
09:01 - has written that compiler error is going
09:04 - to cure he was right so how we have to
09:08 - what we have to do to correct this is we
09:11 - have to ask our user to enter his annual
09:16 - salary so what we are going to do now is
09:20 - let's see first command that we use to
09:23 - output data from our program into our
09:26 - console is C out so console output and
09:29 - the command that we use to input data is
09:32 - console input or C in so I'm going to
09:36 - say C in and then we use these other
09:39 - redirection sides and then we say what
09:42 - is the variable that we want to store
09:44 - what our user has entered and I'm going
09:46 - to say annual salary so what I have set
09:49 - here is our user is going to console
09:53 - inputs the data and then whatever he has
09:56 - imported you have to redirect that
09:58 - inside our annual salary variable so now
10:03 - if I run my program now you see that our
10:09 - program runs now so there is no compile
10:11 - time error and also our cursor is
10:15 - blinking well it is blinking because it
10:18 - expects here our user to enter annual
10:22 - salary but this is not really clear to
10:24 - someone who has not made this program so
10:27 - what we have to do if I enter some value
10:30 - now well it is going to calculate it
10:33 - correctly but this is not really user
10:34 - friendly so what we have to do is we
10:37 - have to write a message to our user
10:40 - before he enters anything so that he
10:43 - knows what he should enter so before
10:45 - this C in command I'm going to say C out
10:49 - and I'm going to say please and turn
10:55 - your annual
10:58 - celery okay and now if I run my program
11:06 - you are going to see please enter your
11:09 - annual salary and the cursor is blinking
11:12 - waiting for you to enter the value and
11:14 - if I say for example 40,000 you see that
11:20 - your monthly salary is 3 3 3 3 3 so the
11:24 - program has calculated your monthly
11:27 - salary and the number is based on
11:31 - whatever our user decides to input so we
11:35 - have upgraded our program and there is
11:37 - also one more thing that I would like to
11:39 - show you when we are doing this example
11:43 - and then is let's say that we want to
11:46 - calculate how much money our user is
11:48 - going to earn in 10 years so let's say
11:52 - see out in 10 years you will earn and
12:03 - now we have to put a value of how much
12:07 - money he is going to earn and if you
12:10 - look at this situation here we first
12:13 - created our monthly salary variable and
12:16 - we then assigned it a value of annual
12:19 - salary divided by 12 but there is
12:21 - another way that we can write out
12:24 - results of expla expressions without
12:26 - creating any variables if that is what
12:28 - we need and that is just here so in this
12:33 - line in 10 years you will earn you are
12:35 - DS redirection size and then you see
12:37 - expression that you want your computer
12:40 - to calculate and what we want to
12:41 - calculate is how much our user is going
12:44 - to earn in 10 years so that is annual
12:47 - salary times 10 and if you do it this
12:56 - way so if you don't decide to create a
12:58 - variable then you will not be able to
13:01 - use the result of this expression later
13:03 - in your program so you don't have a
13:06 - container that holds this 10 year salary
13:09 - but you have a container
13:11 - holds annual salary and monthly salaries
13:14 - so each time that you want to to write
13:16 - out or do something with your ten-year
13:18 - salary you will have to write this
13:22 - expression while if you want to do
13:24 - something with your monthly for you have
13:26 - a container that is holding that value
13:28 - directly for you and you can access it
13:30 - so if we run our program now you see it
13:36 - expects us to enter our annual salary
13:40 - let's say 50,000 and you see here your
13:44 - monthly salary is four thousand one
13:47 - hundred sixty six point sixty seven and
13:49 - then in ten years you will earn what is
13:53 - this half a million
13:54 - so okay one thing that we are missing
13:58 - here at them and that you can add is end
14:01 - line or backslash n so you can add it
14:04 - here and your program is going to format
14:08 - your text nicely so this line should go
14:12 - here like this if I add here one more
14:18 - end line and if I run my program again
14:24 - you see after 50,000 and now we have our
14:30 - text formatted nicely because of this n
14:34 - line that I have just added let's now
14:37 - create another variable and this time we
14:40 - are going to create a variable of type
14:42 - character so char that is the type that
14:47 - is used for character variables in C++
14:50 - it's called char and let's name our
14:52 - variable character and when you want to
14:56 - assign a value to a character variable
14:59 - and C++ what you use is these single
15:02 - quotes like this if you see this example
15:07 - here when we are writing out text so
15:11 - string of text we use these double
15:13 - quotation marks but when you want to
15:15 - assign character value of character
15:19 - variable we use these single quotations
15:22 - like here and there are also some more
15:25 - when it comes to naming your variables
15:27 - and the most important one in my opinion
15:30 - and the most important one to make it
15:32 - easier to you is to name your variables
15:34 - according to their purpose
15:36 - so give meaningful names to your
15:38 - variables that is really really
15:40 - important for example you see this
15:42 - monthly salary variable here we could
15:45 - have as well name this variable blah
15:48 - blah blah and copy it here also because
15:51 - we are having compiler error right now
15:53 - because our compiler does not know what
15:56 - this variable really is you see it says
15:59 - identifier is undefined because you have
16:02 - not created this variable here because
16:05 - it supposes that it is a variable but it
16:08 - has not been created before so it does
16:11 - not recognize what this variable is so
16:15 - we have to copy the new name here also
16:17 - and now our compile time error
16:19 - disappears and this here this name does
16:24 - not represent anything to your
16:26 - computer's so your computer is now going
16:28 - to run your program and your program is
16:30 - going to work just the same as it did
16:32 - before but this is really making it hard
16:35 - for you to understand what your code is
16:37 - doing and especially if you come to this
16:40 - for example in ten days or someone else
16:43 - tries to understand your program this is
16:45 - really hard to read and he will just try
16:49 - to uncover really what your program is
16:52 - doing without understanding it because
16:55 - you have used these bla bla bla names
16:57 - for your variables the same situation
16:59 - would be if you for example have three
17:02 - boxes inside your kitchen and you use
17:04 - one for storing sugar and flour and salt
17:08 - and instead of naming those sugar flour
17:10 - salt respectively you decide to name
17:13 - them red box green box and blue box and
17:17 - then and someone else comes to how
17:20 - someone else comes to your program he
17:22 - does not really know where to find sugar
17:24 - because red does not mean that that box
17:28 - is storing sugar so you should name that
17:30 - box sugar box because imagine how three
17:33 - is easily easy to remember but
17:35 - having ten boxes or ten variables or a
17:37 - hundred of them or even a thousand which
17:40 - is very common inside large programs so
17:44 - what you should do and I am going to do
17:47 - is return that previous name so monthly
17:51 - salary and here also so you should give
17:55 - meaningful names to your variables that
17:57 - is very important and that is the first
18:00 - rule the second rule is that well the
18:04 - second and third and fourth are the
18:06 - rules that you will have to obey in most
18:08 - cases because if you don't then you are
18:11 - just going to get a compile-time error
18:14 - in 99% of the cases let's say and I'm
18:18 - not going to say what that 1% is because
18:20 - I want you to obey these rules so when
18:25 - it comes to naming your variables
18:27 - another thing is that your variable
18:29 - names cannot contain any special
18:33 - characters except underscore so like
18:37 - this this here is valid name to our
18:41 - variable but if you try for example to
18:44 - name your variable like this so you say
18:45 - plus character you see that here in this
18:50 - error window it says expected an
18:53 - identifier so you cannot use this to
18:56 - name your variable or this you cannot
18:59 - say character with this - inside it so
19:03 - character - sir
19:06 - so these signs these special signs are
19:10 - used for something else there are
19:11 - operators inside C++ and you are not
19:15 - supposed to use those inside your
19:17 - variable names if you really want to use
19:19 - some special signs what you should and
19:23 - can use is underscore like this so this
19:27 - is the only sign that is allowed and
19:29 - that I recommend for you to use for
19:31 - naming your variables that's the second
19:34 - rule the third rule is that your
19:37 - variable names cannot begin with numbers
19:40 - like this so you cannot say eight
19:45 - character for example it also says
19:47 - expected
19:48 - and identifiers but what you can do is
19:50 - you can say for example character eight
19:54 - that is a valid name so a number can be
19:57 - on any other position except on their
20:00 - first position so this is a valid name
20:04 - for a variable so you can put also
20:06 - number here so you can say for example C
20:10 - 12 character 8 but again what does that
20:13 - really mean that is not a meaningful
20:15 - name for a variable so again we come to
20:17 - the first rule so you should name your
20:20 - variables according to their purpose so
20:23 - I'm going to return this to character
20:26 - name again and then we have our third
20:31 - rule I guess which is you cannot use
20:35 - space inside your variable names so for
20:38 - example this this is not valid and your
20:41 - compiler says it here so it gives you an
20:44 - error it does not know what this really
20:47 - is so you cannot use space blank spaces
20:52 - inside your variable names because you
20:54 - are going to get a compile time error
20:56 - and if I try to do that and I try to run
20:59 - my program I get the window so it says
21:02 - you cannot run this program you have
21:04 - some tax against what you should do is
21:06 - you should correct those errors and then
21:09 - you can really run your program like
21:14 - this okay so let's repeat these rules
21:20 - one more time the first rule is that you
21:23 - should give meaningful names to your
21:25 - variables so name them according to
21:27 - their purpose the second rule is that
21:29 - your variables cannot contain any
21:31 - special characters except underscore the
21:35 - third rule is that your variables cannot
21:37 - start with numbers
21:39 - you can't put number on any other
21:41 - position but not on the first one and
21:44 - third rule is that a no rule actually is
21:47 - that your variables cannot contain blank
21:50 - spaces so empty spaces no no in a
21:53 - variable name what you should do is you
21:57 - should name your variables according to
21:59 - their purpose so meaningfully and you
22:01 - should also you
22:02 - something called camel casing what is
22:04 - camel casing
22:05 - you see how I have named this annual
22:08 - salary here you see that the first
22:11 - letter of my variable name is small
22:13 - water and then the next word starts with
22:16 - capital letter and that is called camel
22:18 - casing so for example you would name
22:21 - your variable like this first second
22:26 - third so like this you see that this
22:30 - first second third these are words
22:32 - inside your variable name and this F is
22:37 - lowercase letter that's the start letter
22:39 - of your variable and then each next word
22:41 - begins with capital letter and all the
22:44 - rest is lowercase letters that is called
22:47 - camel casing and that is something that
22:49 - is usually used with C++ let's talk
22:52 - about datatypes now I am going to delete
22:55 - this code so if you need this code for a
22:57 - bit longer you can pause the video here
23:01 - so what kind of data can we store in our
23:05 - variables well for now we are going to
23:08 - cover only the most basic ones the ones
23:10 - that we are going to use frequently and
23:12 - you should know that there are a lot
23:14 - more data types besides from these that
23:16 - we are going to mention here and more
23:18 - complex ones that we are going to cover
23:20 - later in these videos in this tutorial
23:23 - so the first one that I would like to
23:25 - mention is a whole number data type so
23:29 - integer a data type that can hold
23:32 - negative whole numbers 0 and positive
23:35 - whole numbers so the type that is used
23:37 - for that and C++ is called int and good
23:43 - example for int variable is what's a
23:47 - year of birth so that is an example of a
23:53 - whole number variable and let's say that
23:56 - that variable is going to hold 1995 okay
24:02 - so that would be an integer variable
24:04 - after that we have already seen this so
24:07 - it is a character variable so let's say
24:11 - char and an example of a char variable
24:14 - could
24:15 - gender for example let's call it gender
24:19 - and you can store F for female or M for
24:23 - male for example so the chart variable
24:27 - can store one character then the next
24:31 - one is boolean value meaning true or
24:35 - false value this is the simplest one and
24:38 - the type that is used to store boolean
24:40 - is called bull and a good example for a
24:46 - bull value could be for example if you
24:48 - want to hold in your program a variable
24:51 - that tells you whether your user is
24:53 - older or younger than 18 years 18 years
24:56 - old so let's call our variable is older
25:00 - than 18 and we can assign to that
25:05 - variable either value of true or false
25:08 - so I'm going to put true true here
25:12 - another variable another data type is
25:16 - decimal point number also called
25:19 - floating point number which we have
25:21 - mentioned before and let's create a
25:24 - variable of type float and let's say
25:29 - that that variable is going to hold our
25:32 - average grade so average grade and this
25:40 - average grade can also be a whole number
25:42 - but since it has potential to be also
25:46 - floating-point number or a decimal point
25:48 - number we are going to use a float data
25:52 - type for this average grade and another
25:56 - data type that I would like to mention
25:59 - for also storing decimal numbers is
26:02 - called double and the difference between
26:04 - double and float is that double is
26:06 - double size of float so if you remember
26:09 - when we talked previously about take
26:12 - memory space that variables take so
26:15 - float is taking four bytes and double is
26:18 - taking double of that so eight bytes so
26:20 - you can put much more data inside your
26:23 - double data type than inside float and
26:26 - let's say for example that if you have
26:28 - the credit card and you had a lot of
26:31 - money a lot a lot a lot of money and you
26:35 - want to store that value inside a
26:36 - variable you would use double data type
26:40 - so let's say double balance equals to
26:44 - this large number here which I'm not
26:48 - going to even try to read okay so these
26:53 - are the most common data types that we
26:57 - are going to use in this tutorial
26:59 - I have said earlier that each data type
27:02 - takes a certain space in memory but
27:04 - let's see exactly how much each of these
27:07 - take for that we are going to use
27:10 - something called sizeof operator and
27:12 - let's see how we use it so see out size
27:17 - of int is and then we write this size of
27:22 - so sizeof and in parentheses we pass to
27:25 - it data type that we want to check how
27:28 - much memory it is using so int and if I
27:32 - run my program now you see that it says
27:35 - that int takes four bytes of memory and
27:38 - if you've ever actually studied binary
27:41 - algebra you would know that four bytes
27:44 - of memory is actually 32 bits since each
27:47 - byte has 8 bits and as we said our int
27:50 - can store both positive and negative
27:53 - numbers and 0 also remember that so the
27:56 - first of these 32 bits is used to
27:59 - determine whether the number has plus
28:01 - sign or minus sign so whether it's a
28:03 - positive or a negative number and then
28:05 - remaining 31 bits are used for this
28:08 - value itself so let's check what is min
28:12 - value for our end let's write that out
28:15 - let's write C out int min value yes and
28:20 - we have reserved word for a minimal
28:24 - amount for INT and c++ and that is int
28:27 - underscore min and if I run my program
28:32 - now you see that it says this minus 2
28:36 - billion extremely hard to read this
28:38 - number but you see that this is the
28:40 - minimal amount
28:42 - of inte so this number is actually 2 to
28:45 - the power of 31 well just quickly write
28:47 - these so minus 1 minus 2 minus 3 and
28:51 - then minus this number here so this
28:57 - number as I said is 2 to the power of 31
29:01 - why not 32 because this one-bite is used
29:04 - to represent this minus prefix now we
29:08 - should check a positive number range so
29:11 - we also can write int max value yes and
29:17 - then there is another key word in C++ 4
29:20 - into X which is int underscore Max and
29:23 - are you expecting to see this same
29:27 - interval but just with plus sign so
29:30 - write in the comments what are you
29:32 - expecting to see and if I run my program
29:37 - you see that that did not happen and if
29:40 - some of you know why it did not happen I
29:42 - would also like to hear what you think
29:46 - why we have this number here and then
29:48 - this number here for our negative and
29:51 - for our positive range so different
29:54 - ending number and I'm going to explain
29:56 - why because this positive range here we
30:00 - have to include 0 also so in order to
30:03 - include one number here just let's just
30:05 - copy this and paste that so our positive
30:08 - range is going to from 1 up to let's say
30:11 - that it is this number but since it is
30:14 - including 0 also in order to include one
30:16 - number here so 0 you have to take one
30:20 - number here so this here is not eight
30:22 - anymore but is seven so that is why we
30:27 - got let's a different number for our
30:29 - positive and negative range because this
30:31 - here includes 0 also one thing that I
30:35 - have to mention though is that if you
30:37 - want to use only positive integer
30:38 - numbers there is a data type for that as
30:41 - well and data type that is yours for
30:45 - that is called unsigned int and it's
30:48 - size is the same as of int so 4 bytes or
30:51 - 32 bits but since it is unsigned that
30:55 - means that it
30:55 - does not use one bit for sign because
30:59 - the sign is by default plus but it uses
31:02 - all 32 bits to represent value and those
31:06 - values go from 0 to let's see exactly
31:09 - how big of a number four billion and
31:11 - something so see out size of unsigned
31:16 - int is and let's the size of unsigned in
31:24 - this is the data type and let's also
31:29 - write out what is the max value of
31:33 - unseasoned so let's say C out you int
31:37 - max value is and there is there is also
31:42 - a reserved word for that and that is you
31:46 - int underscore max so if I run my
31:51 - program now you see that we got four
31:55 - billion and something numbers so double
31:57 - the size of this and this is actually
32:00 - two to the power of 32 but minus one
32:03 - because we are also including zero in
32:06 - this range so let's check these
32:10 - remaining datatypes I'm going to write
32:12 - those out quickly and I will be back so
32:15 - I have written here the rest of these
32:18 - data types and as you can see since our
32:20 - bull is only true or false value one
32:22 - bite is enough for bull our chart is
32:25 - using also one byte float is using four
32:28 - bytes double is using eight and I'm also
32:32 - going to include a table with some more
32:34 - data types which we haven't mentioned
32:36 - here so if you need to check those out
32:39 - please pause the video
32:44 - one thing that I promise to show you is
32:47 - datatype overflow let's see what that is
32:49 - so let's create a variable of type int
32:53 - and call it int Max and let's say that I
32:56 - want to store inside that variable
32:58 - maximum amount of int so int underscore
33:02 - Max and I'm going to write that variable
33:05 - out now just to see how big a value that
33:08 - really is so C out in Max and if I run
33:13 - my program now you see that I have
33:17 - gotten here this to Billy and very large
33:20 - number actually so that is the max
33:21 - amount of int now my question for you is
33:25 - what is going to happen in this
33:27 - situation so C out int max plus 1 what
33:34 - is going to be the result of our program
33:36 - now if I run it so some of you may know
33:39 - this already some of you may not but I
33:41 - am very interested in reading your
33:44 - answers so make sure to write your
33:46 - answers before watching my explanation
33:48 - on this write those in the comments down
33:50 - below and if I run my program now well
33:55 - our number has not increased by 1 but it
33:59 - has went to the minimal amount of int
34:03 - and why has that happened well that is
34:05 - the data type overflow that I was
34:07 - talking about and how this works
34:09 - actually is it works the same as your
34:11 - clock works so it goes 9 10 11 12 and
34:16 - then from 12 since that is the max value
34:19 - on your clock it does not go to 13 but
34:23 - it goes back to min so 1 12 and then 1
34:28 - and that is applicable here it went from
34:32 - the max value to men value just by
34:35 - adding 1 and that is called datatype
34:39 - overflow I already can see that this
34:42 - video is pretty long and I'm currently
34:44 - having problems uploading very long
34:46 - videos to YouTube so I'm going to leave
34:49 - for the next video explanation of ASCII
34:51 - table and we are also going to do some
34:54 - more examples and practice C++ some
34:57 - or so make sure to subscribe to my
34:59 - channel and also click the bell icon so
35:01 - that you are first to be notified when I
35:03 - upload my next video and also like it
35:06 - and share it with anyone who do you
35:08 - think could benefit from this video and
35:10 - I will see you in the next one

Cleaned transcript:

hi guys I hope you are all well and welcome to the second video of C++ for beginners in this video we are going to talk about variables data types and also I'm going to explain how you can enter data in your program and how that data is encoded into numbers using something called ASCII table so here I have opened Visual Studio and if you are not familiar with Visual Studio or there is some code that you see here but you don't understand it I would recommend you to watch my first video of this course the link is going to be in the description of this video and then come back to this video so let's talk about variables now what is variable well I like to explain it to a reallife example for example you see this glass here well what I can say about this glass is that it is a container for a certain type of liquid so it can hold water milk tea juice whatever you want really and the same way a variable is a container but for a certain data type so you can put whole number inside that you can put character or a decimal point number or a boolean value meaning true or false value so they are the same in this aspect another thing that I can say about this glass is that it defines a maximum amount of liquid that it can hold so it has a max limit and if you put too much it will overflow the same way with variables variables also define a maximum amount of data that they can hold for example if you have a whole number variable well there is a max number limit for that variable that it can hold and also if you put too much it is going to overflow it is literally called data type overflow so it is a container the same as variable and also it defines a maximum amount of data that it can hold but how much data you really put inside that variables so the same way would with the water inside this class if you decide to put 1/3 or 1/2 or 2/3 of this glass the same way is fit variables you can put however much you want as long as you don't put too much because then it's going to overflow one thing that is different though between variables and this glass is that you can put one day inside this glass you can put water the next thing you can put juice the next day you can put milk vanity or even you can mix two liquids but with variables you cannot do that at least not with once in c++ there are certain languages that you can do that with and there is also advantages and disadvantages when it comes to that but in C++ you cannot put two different data types inside one variables and you can also not change a data type of variables once you create it so let me show you what I'm talking about on a practical example let's say that you want to create a variable that is going to hold your annual salary well that variable is definitely going to be a decimal point number or also floatingpoint number that's how it's called in C++ and the type that is used for that is called float so I'm going to say float and then I'm going to give a name to that variable since we said that is going to hold our annual salary we are going to call it annual salary okay and then we are going to assign it a value and that value is going to be let's say 50,000 point 99 so now what I have done here is I have created a variable called annual salary I have said that that variable is going to be of type floating point number and then I have put inside that variable 50000 point 99 so now let's see how we can based on this variable based on our annual salary how much our user is earning every month so what we are going to do is we are going to create another variable we are going to call it monthly salary and we are going to assign that variable a result of dividing this annual salary with twelve months so we are creating a variable of type float also since the result of division usually can be also floatingpoint number or a decimal number and because of that we are using also float type for our monthly salary variable so I'm creating monthly salary variable and I'm going to say that that variable is going to hold result of this expression annual salary divided by twelve months and now we have result of this division inside this variable and what we are left to do is to write that result out to our user so I'm going to say C out since that's the command that we use to output data to console and I'm going to say your monthly salary is and I'm going to say monthly salary so one thing to notice here is that when you are writing out strings or when you're writing out data like this you use quotation marks but when you want to write out value that you are holding inside a variable well then you just put the name of your variable you don't use any quotation marks then and now we can run our program and let's see what's the result that we got you see here your monthly salary is four thousand one hundred sixty six point 75 so if you want to check that out you can you can calculate it in your calculator one thing that that bothers me in this program is that we have hardcoded this value here so we have hardcoded coded this 50,000 point 99 not every one salary is 50000 point 99 and what if we wanted our user to enter what his salary is during the execution of our program so when he runs our program our program should ask him what is your annual salary and then he enters that salary and then we calculate his monthly salary based on the number that he has entered so I would like to upgrade this program now to work like I just explained and how we are going to do that well first I'm going to delete these 50,000 point 99 ok and then we are left with this situation here so it says float annual salary that means that I have just created a variable called annual salary and I have said I'm going to put a floatingpoint number inside that variable but I have not assigned any value to it yet so here we have a container for our annual salary and that container doesn't hold any value and if we try to run our program now what do you think that we are going to get write that in a comments before I run this program and now I'm going to so pause the video and think about it and then write write your answer in the comments and now I'm going to run the program and you can see that we have some build errors as this here this window here says so let's see if we open this part here it says we have one error and that error is uninitialized local variable annual salary used what that means is that this expression is expression here if you see this green underline it also says using an initialized memory annual salary well that means that this expression here our computer doesn't know how to do this expression since we haven't assigned any value to our annual salary variables so it doesn't know how to divide that that with well since there is no value inside that container inside that variable so this causes a compiler error and whoever has written that compiler error is going to cure he was right so how we have to what we have to do to correct this is we have to ask our user to enter his annual salary so what we are going to do now is let's see first command that we use to output data from our program into our console is C out so console output and the command that we use to input data is console input or C in so I'm going to say C in and then we use these other redirection sides and then we say what is the variable that we want to store what our user has entered and I'm going to say annual salary so what I have set here is our user is going to console inputs the data and then whatever he has imported you have to redirect that inside our annual salary variable so now if I run my program now you see that our program runs now so there is no compile time error and also our cursor is blinking well it is blinking because it expects here our user to enter annual salary but this is not really clear to someone who has not made this program so what we have to do if I enter some value now well it is going to calculate it correctly but this is not really user friendly so what we have to do is we have to write a message to our user before he enters anything so that he knows what he should enter so before this C in command I'm going to say C out and I'm going to say please and turn your annual celery okay and now if I run my program you are going to see please enter your annual salary and the cursor is blinking waiting for you to enter the value and if I say for example 40,000 you see that your monthly salary is 3 3 3 3 3 so the program has calculated your monthly salary and the number is based on whatever our user decides to input so we have upgraded our program and there is also one more thing that I would like to show you when we are doing this example and then is let's say that we want to calculate how much money our user is going to earn in 10 years so let's say see out in 10 years you will earn and now we have to put a value of how much money he is going to earn and if you look at this situation here we first created our monthly salary variable and we then assigned it a value of annual salary divided by 12 but there is another way that we can write out results of expla expressions without creating any variables if that is what we need and that is just here so in this line in 10 years you will earn you are DS redirection size and then you see expression that you want your computer to calculate and what we want to calculate is how much our user is going to earn in 10 years so that is annual salary times 10 and if you do it this way so if you don't decide to create a variable then you will not be able to use the result of this expression later in your program so you don't have a container that holds this 10 year salary but you have a container holds annual salary and monthly salaries so each time that you want to to write out or do something with your tenyear salary you will have to write this expression while if you want to do something with your monthly for you have a container that is holding that value directly for you and you can access it so if we run our program now you see it expects us to enter our annual salary let's say 50,000 and you see here your monthly salary is four thousand one hundred sixty six point sixty seven and then in ten years you will earn what is this half a million so okay one thing that we are missing here at them and that you can add is end line or backslash n so you can add it here and your program is going to format your text nicely so this line should go here like this if I add here one more end line and if I run my program again you see after 50,000 and now we have our text formatted nicely because of this n line that I have just added let's now create another variable and this time we are going to create a variable of type character so char that is the type that is used for character variables in C++ it's called char and let's name our variable character and when you want to assign a value to a character variable and C++ what you use is these single quotes like this if you see this example here when we are writing out text so string of text we use these double quotation marks but when you want to assign character value of character variable we use these single quotations like here and there are also some more when it comes to naming your variables and the most important one in my opinion and the most important one to make it easier to you is to name your variables according to their purpose so give meaningful names to your variables that is really really important for example you see this monthly salary variable here we could have as well name this variable blah blah blah and copy it here also because we are having compiler error right now because our compiler does not know what this variable really is you see it says identifier is undefined because you have not created this variable here because it supposes that it is a variable but it has not been created before so it does not recognize what this variable is so we have to copy the new name here also and now our compile time error disappears and this here this name does not represent anything to your computer's so your computer is now going to run your program and your program is going to work just the same as it did before but this is really making it hard for you to understand what your code is doing and especially if you come to this for example in ten days or someone else tries to understand your program this is really hard to read and he will just try to uncover really what your program is doing without understanding it because you have used these bla bla bla names for your variables the same situation would be if you for example have three boxes inside your kitchen and you use one for storing sugar and flour and salt and instead of naming those sugar flour salt respectively you decide to name them red box green box and blue box and then and someone else comes to how someone else comes to your program he does not really know where to find sugar because red does not mean that that box is storing sugar so you should name that box sugar box because imagine how three is easily easy to remember but having ten boxes or ten variables or a hundred of them or even a thousand which is very common inside large programs so what you should do and I am going to do is return that previous name so monthly salary and here also so you should give meaningful names to your variables that is very important and that is the first rule the second rule is that well the second and third and fourth are the rules that you will have to obey in most cases because if you don't then you are just going to get a compiletime error in 99% of the cases let's say and I'm not going to say what that 1% is because I want you to obey these rules so when it comes to naming your variables another thing is that your variable names cannot contain any special characters except underscore so like this this here is valid name to our variable but if you try for example to name your variable like this so you say plus character you see that here in this error window it says expected an identifier so you cannot use this to name your variable or this you cannot say character with this inside it so character sir so these signs these special signs are used for something else there are operators inside C++ and you are not supposed to use those inside your variable names if you really want to use some special signs what you should and can use is underscore like this so this is the only sign that is allowed and that I recommend for you to use for naming your variables that's the second rule the third rule is that your variable names cannot begin with numbers like this so you cannot say eight character for example it also says expected and identifiers but what you can do is you can say for example character eight that is a valid name so a number can be on any other position except on their first position so this is a valid name for a variable so you can put also number here so you can say for example C 12 character 8 but again what does that really mean that is not a meaningful name for a variable so again we come to the first rule so you should name your variables according to their purpose so I'm going to return this to character name again and then we have our third rule I guess which is you cannot use space inside your variable names so for example this this is not valid and your compiler says it here so it gives you an error it does not know what this really is so you cannot use space blank spaces inside your variable names because you are going to get a compile time error and if I try to do that and I try to run my program I get the window so it says you cannot run this program you have some tax against what you should do is you should correct those errors and then you can really run your program like this okay so let's repeat these rules one more time the first rule is that you should give meaningful names to your variables so name them according to their purpose the second rule is that your variables cannot contain any special characters except underscore the third rule is that your variables cannot start with numbers you can't put number on any other position but not on the first one and third rule is that a no rule actually is that your variables cannot contain blank spaces so empty spaces no no in a variable name what you should do is you should name your variables according to their purpose so meaningfully and you should also you something called camel casing what is camel casing you see how I have named this annual salary here you see that the first letter of my variable name is small water and then the next word starts with capital letter and that is called camel casing so for example you would name your variable like this first second third so like this you see that this first second third these are words inside your variable name and this F is lowercase letter that's the start letter of your variable and then each next word begins with capital letter and all the rest is lowercase letters that is called camel casing and that is something that is usually used with C++ let's talk about datatypes now I am going to delete this code so if you need this code for a bit longer you can pause the video here so what kind of data can we store in our variables well for now we are going to cover only the most basic ones the ones that we are going to use frequently and you should know that there are a lot more data types besides from these that we are going to mention here and more complex ones that we are going to cover later in these videos in this tutorial so the first one that I would like to mention is a whole number data type so integer a data type that can hold negative whole numbers 0 and positive whole numbers so the type that is used for that and C++ is called int and good example for int variable is what's a year of birth so that is an example of a whole number variable and let's say that that variable is going to hold 1995 okay so that would be an integer variable after that we have already seen this so it is a character variable so let's say char and an example of a char variable could gender for example let's call it gender and you can store F for female or M for male for example so the chart variable can store one character then the next one is boolean value meaning true or false value this is the simplest one and the type that is used to store boolean is called bull and a good example for a bull value could be for example if you want to hold in your program a variable that tells you whether your user is older or younger than 18 years 18 years old so let's call our variable is older than 18 and we can assign to that variable either value of true or false so I'm going to put true true here another variable another data type is decimal point number also called floating point number which we have mentioned before and let's create a variable of type float and let's say that that variable is going to hold our average grade so average grade and this average grade can also be a whole number but since it has potential to be also floatingpoint number or a decimal point number we are going to use a float data type for this average grade and another data type that I would like to mention for also storing decimal numbers is called double and the difference between double and float is that double is double size of float so if you remember when we talked previously about take memory space that variables take so float is taking four bytes and double is taking double of that so eight bytes so you can put much more data inside your double data type than inside float and let's say for example that if you have the credit card and you had a lot of money a lot a lot a lot of money and you want to store that value inside a variable you would use double data type so let's say double balance equals to this large number here which I'm not going to even try to read okay so these are the most common data types that we are going to use in this tutorial I have said earlier that each data type takes a certain space in memory but let's see exactly how much each of these take for that we are going to use something called sizeof operator and let's see how we use it so see out size of int is and then we write this size of so sizeof and in parentheses we pass to it data type that we want to check how much memory it is using so int and if I run my program now you see that it says that int takes four bytes of memory and if you've ever actually studied binary algebra you would know that four bytes of memory is actually 32 bits since each byte has 8 bits and as we said our int can store both positive and negative numbers and 0 also remember that so the first of these 32 bits is used to determine whether the number has plus sign or minus sign so whether it's a positive or a negative number and then remaining 31 bits are used for this value itself so let's check what is min value for our end let's write that out let's write C out int min value yes and we have reserved word for a minimal amount for INT and c++ and that is int underscore min and if I run my program now you see that it says this minus 2 billion extremely hard to read this number but you see that this is the minimal amount of inte so this number is actually 2 to the power of 31 well just quickly write these so minus 1 minus 2 minus 3 and then minus this number here so this number as I said is 2 to the power of 31 why not 32 because this onebite is used to represent this minus prefix now we should check a positive number range so we also can write int max value yes and then there is another key word in C++ 4 into X which is int underscore Max and are you expecting to see this same interval but just with plus sign so write in the comments what are you expecting to see and if I run my program you see that that did not happen and if some of you know why it did not happen I would also like to hear what you think why we have this number here and then this number here for our negative and for our positive range so different ending number and I'm going to explain why because this positive range here we have to include 0 also so in order to include one number here just let's just copy this and paste that so our positive range is going to from 1 up to let's say that it is this number but since it is including 0 also in order to include one number here so 0 you have to take one number here so this here is not eight anymore but is seven so that is why we got let's a different number for our positive and negative range because this here includes 0 also one thing that I have to mention though is that if you want to use only positive integer numbers there is a data type for that as well and data type that is yours for that is called unsigned int and it's size is the same as of int so 4 bytes or 32 bits but since it is unsigned that means that it does not use one bit for sign because the sign is by default plus but it uses all 32 bits to represent value and those values go from 0 to let's see exactly how big of a number four billion and something so see out size of unsigned int is and let's the size of unsigned in this is the data type and let's also write out what is the max value of unseasoned so let's say C out you int max value is and there is there is also a reserved word for that and that is you int underscore max so if I run my program now you see that we got four billion and something numbers so double the size of this and this is actually two to the power of 32 but minus one because we are also including zero in this range so let's check these remaining datatypes I'm going to write those out quickly and I will be back so I have written here the rest of these data types and as you can see since our bull is only true or false value one bite is enough for bull our chart is using also one byte float is using four bytes double is using eight and I'm also going to include a table with some more data types which we haven't mentioned here so if you need to check those out please pause the video one thing that I promise to show you is datatype overflow let's see what that is so let's create a variable of type int and call it int Max and let's say that I want to store inside that variable maximum amount of int so int underscore Max and I'm going to write that variable out now just to see how big a value that really is so C out in Max and if I run my program now you see that I have gotten here this to Billy and very large number actually so that is the max amount of int now my question for you is what is going to happen in this situation so C out int max plus 1 what is going to be the result of our program now if I run it so some of you may know this already some of you may not but I am very interested in reading your answers so make sure to write your answers before watching my explanation on this write those in the comments down below and if I run my program now well our number has not increased by 1 but it has went to the minimal amount of int and why has that happened well that is the data type overflow that I was talking about and how this works actually is it works the same as your clock works so it goes 9 10 11 12 and then from 12 since that is the max value on your clock it does not go to 13 but it goes back to min so 1 12 and then 1 and that is applicable here it went from the max value to men value just by adding 1 and that is called datatype overflow I already can see that this video is pretty long and I'm currently having problems uploading very long videos to YouTube so I'm going to leave for the next video explanation of ASCII table and we are also going to do some more examples and practice C++ some or so make sure to subscribe to my channel and also click the bell icon so that you are first to be notified when I upload my next video and also like it and share it with anyone who do you think could benefit from this video and I will see you in the next one
