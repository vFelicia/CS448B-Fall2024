With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to explain the purpose
00:04 - and relationship between virtual
00:06 - functions pure virtual functions and
00:09 - abstract classes i am so happy to
00:12 - continue this object-oriented
00:13 - programming playlist and if you have any
00:16 - questions or any topics that you would
00:17 - like to see in the future please write
00:19 - me in the comments section so that i can
00:21 - prepare and film those videos and as i
00:24 - said in this one i will talk about
00:26 - virtual functions pure virtual functions
00:28 - and abstract classes but before i start
00:31 - i would like to take a brief moment to
00:33 - introduce c plus plus builder
00:35 - it is full featured c plus ide that
00:38 - helps you create apps fast for all major
00:40 - platforms while writing less code it
00:43 - connects natively to almost 20 databases
00:45 - like mariadb oracle sql server postgres
00:49 - and many more the key value is c plus
00:52 - builders framework which are powerful
00:54 - libraries that do more than other c plus
00:57 - tools this includes the award-winning
00:59 - vcl framework for high performance
01:02 - native windows apps and fire monkey
01:04 - framework for cross-platform uis
01:07 - smart developers write better code
01:09 - faster and you can start for free using
01:11 - the link in the description
01:13 - the first topic that i want to explain
01:15 - is the topic of virtual functions in c
01:18 - plus so what is a virtual function a
01:22 - virtual function is a function that is
01:24 - defined in base class and then it is
01:26 - redefined in derived class but a virtual
01:30 - function has a very specific purpose and
01:34 - the main purpose of virtual functions is
01:36 - to give you the ability of a runtime
01:39 - polymorphism and i'm going to show the
01:41 - example of this at the end of the video
01:44 - now
01:45 - to understand this a little bit better
01:47 - imagine the following situation you have
01:50 - a base class and inside that base class
01:52 - you implement a function and then you
01:55 - decide to create another class which
01:57 - will inherit from this base class so a
02:00 - derived class and inside this derived
02:02 - class you also decide to make the
02:05 - implementation of that same function so
02:08 - now a base class has its own
02:09 - implementation and then a derived class
02:11 - has another implementation
02:14 - what virtual functions allow you to do
02:16 - is to execute the most derived version
02:20 - of that function so when you invoke that
02:23 - function using a base class pointer or a
02:26 - reference the most derived version of
02:29 - that function will be executed what that
02:32 - means is that if this derived class has
02:35 - its own implementation then that derived
02:37 - implementation will be executed but if a
02:40 - derived class does not have its own
02:42 - implementation then the implementation
02:44 - inside your base class will be executed
02:47 - and the best way for you to understand
02:49 - this is to show you on the example using
02:52 - a code and visual studio that i have
02:54 - opened here so now i am going to do that
02:57 - so let's create a class called
02:59 - instrument and i will do it here
03:02 - i will say class
03:04 - instrument
03:07 - like this and don't forget to put this
03:10 - semicolon at the end so what i want to
03:13 - do inside this instrument class is i
03:15 - want to create a function that will be
03:18 - public
03:19 - so that it is accessible outside of this
03:22 - class and that function will be of
03:24 - return type void and i will call it for
03:27 - example make sound so
03:29 - make
03:31 - sound
03:33 - like this and what i want to do inside
03:35 - this function is just write out a
03:37 - message so i will say c out and then
03:40 - let's say that
03:41 - the instrument
03:43 - is playing
03:46 - like this
03:49 - okay so now in order to test this and
03:52 - invoke this function what we have to do
03:54 - is we need to create an object of this
03:57 - class here so let's say
03:59 - instrument
04:00 - and let's call that object for example i
04:03 - one so instrument one
04:05 - and i am going to invoke this function
04:08 - here using this object so i will say i
04:11 - one dot
04:12 - make sound
04:14 - okay so if i run this program
04:18 - as you can see it says that instrument
04:20 - is playing so nothing unusual you should
04:23 - already be familiar with this
04:25 - now what i want to do is i want to
04:28 - create another class that inherits from
04:30 - this class here so i want to create a
04:33 - specific type of instrument for example
04:36 - let's create an accordion so i will say
04:39 - here
04:40 - class
04:42 - accordion
04:45 - like this and then what i want to do for
04:48 - this class here is first of all i want
04:50 - to inherit from this class here so i
04:54 - will say
04:56 - public and then
04:58 - instrument
04:59 - now this class this accordion class has
05:02 - become derived class and then instrument
05:06 - so this class here is called base class
05:10 - okay and this here represents the
05:12 - inheritance now what i want to do inside
05:15 - this derived class called accordion is i
05:18 - want to make another implementation of
05:21 - this same function here this function
05:23 - called make sound so let's do that i am
05:26 - going to copy this code here and paste
05:29 - it inside my accordion class
05:32 - and here instead of instrument playing i
05:34 - want to say that an accordion is playing
05:38 - like this
05:39 - okay so now if you remember what i said
05:42 - at the beginning of this video
05:43 - i said that when this function here
05:47 - called make sound that is implemented
05:49 - both in base class and in derived class
05:53 - is invoked using a base class pointer
05:57 - the most derived version of that
05:59 - function should be executed so in order
06:02 - to test that what i want to do is first
06:05 - of all let's create a pointer to our
06:07 - base class so
06:09 - here instead of creating an object what
06:11 - i want to do is i want to create a
06:14 - pointer like this and if you are not
06:16 - familiar with pointers i will put a link
06:18 - to a playlist that i made related to
06:20 - pointer so you should watch that first
06:23 - so here i have created a pointer to an
06:26 - instrument and what i want to do is say
06:28 - that it is equal to
06:30 - new
06:32 - accordion
06:34 - like this and please pay attention that
06:37 - this here is derived class so this here
06:40 - is derived class and then this here is
06:43 - base class
06:44 - okay and then here as you can see we
06:47 - have an error so the error is that now
06:50 - you cannot use this dot symbol to access
06:53 - your make sound function but you have to
06:55 - use this symbol here so when this here
06:59 - is a pointer and in this situation it is
07:02 - as you can see you use this symbol to
07:05 - access members of your class and make
07:08 - sound function is member of your
07:10 - instrument class okay
07:13 - so let's run our program and as you can
07:16 - see
07:16 - it says instrument playing again
07:19 - and if you remember what i said at the
07:21 - beginning is that when you use virtual
07:24 - functions the most derived version of
07:27 - that function should be executed and in
07:29 - this situation the most derived version
07:31 - is this one so the version inside our
07:34 - derived class so what is the problem
07:37 - here well
07:38 - the problem is that this function is not
07:41 - virtual function this is just a function
07:44 - and in order to make it virtual you need
07:47 - to add virtual keywords so here i am
07:50 - going to say virtual
07:53 - like this
07:55 - and now after you have made this
07:57 - function virtual what it does is it says
08:01 - hey if there is implementation of this
08:03 - function in my derived class please
08:06 - execute that and then if there is no
08:08 - implementation inside my derived class
08:11 - then you can execute this version here
08:14 - so if i run this program
08:18 - as you can see
08:19 - now it says that accordion is playing
08:23 - okay so let's close this and let's go
08:25 - one more time over what i just did so we
08:29 - created a base class called instrument
08:32 - and then we inherited from that
08:34 - instrument class as you can see here we
08:37 - created another class called accordion
08:39 - and we inherited that instrument class
08:42 - and then also we created a function
08:45 - called make sound in both classes so
08:48 - inside our instrument class and then
08:49 - inside our accordion class but
08:52 - that function has different
08:54 - implementations here it says that
08:56 - instrument is playing and then here it
08:58 - says that accordion is playing and then
09:01 - by making this function inside our base
09:04 - class a virtual function what we have
09:06 - allowed to happen is to execute the most
09:10 - derived version of this function here
09:13 - when it is invoked using a base class
09:17 - pointer as we did here so now when we
09:20 - invoke this make sound function it goes
09:23 - here and it says hey
09:25 - do you have more derived version of this
09:28 - function here so does your derived class
09:31 - has its own implementation and here it
09:34 - finds that implementation so it executes
09:37 - that and that is exactly what we have
09:38 - seen what i ran my program last time but
09:42 - in case that this class here does not
09:45 - have the implementation for this
09:47 - function then this version will be
09:50 - executed and in order to demonstrate
09:52 - that let's remove this function from our
09:55 - derived class so i am going to delete it
09:58 - and now if i run my program this version
10:02 - here should be executed so let's run our
10:05 - program
10:06 - okay and as you can see it says
10:08 - instrument playing because derived class
10:11 - does not have its implementation of this
10:14 - virtual function
10:16 - okay let's close this and then if i
10:19 - return the implementation to my derived
10:22 - class then again this derived version
10:26 - should be executed so if i run my
10:28 - program again
10:30 - as you can see now it says that
10:32 - accordion is playing
10:34 - okay so that is an example of how
10:37 - virtual functions work
10:40 - and for those of you who are wondering
10:42 - why i used the accordion as an example
10:45 - of instrument instead of some more
10:47 - common instruments like a piano or a
10:49 - guitar or something like that
10:51 - it is because i used to play the
10:53 - accordion so while i was in school
10:57 - for five or six years before university
10:59 - a long time before i got into it and
11:01 - programming
11:03 - i used to play the accordion
11:05 - and while i was preparing this example i
11:09 - got very nostalgic because i haven't
11:11 - played it in a million years and i found
11:14 - on youtube these two guys who are
11:16 - playing accordions and they are playing
11:18 - some of my favorite songs some of the
11:20 - songs that i used to play all the time
11:22 - so i will put a link in the description
11:24 - for those of you who want to check it
11:26 - out
11:26 - and let me know if you recognize any of
11:29 - the songs and also if you play any
11:31 - instrument or if you would like to play
11:33 - some instrument and my favorite
11:35 - composition of all times is called
11:37 - donovsky valley the the new waves i used
11:41 - to love that composition i used to play
11:43 - it all the time and i might even play it
11:46 - one day for you guys subscribe if you
11:48 - would like to see that
11:50 - but
11:52 - it makes me very sad that i don't have
11:54 - any videos of myself playing because
11:57 - when i was younger there were no cameras
11:59 - and smartphones or at least they were
12:02 - not affordable and cheap like they are
12:04 - right now but i will try to find a link
12:06 - on youtube and then put it in the
12:08 - description for those of you who want to
12:09 - hear how the new waves sound
12:14 - i'm just getting very nostalgic right
12:16 - now
12:17 - this programming course got very
12:18 - emotional
12:20 - cut
12:21 - the next concept that i want to explain
12:23 - is the idea of pure virtual functions
12:26 - and abstract classes and in order to
12:29 - explain that we will have to look at
12:32 - this example here from a different
12:34 - perspective so
12:36 - let's say for example that someone asks
12:38 - you what kind of sound an instrument
12:41 - makes
12:42 - your answer to this question could be
12:44 - it depends on what kind of instrument it
12:47 - is if it is an accordion or a piano or a
12:51 - guitar or some other instrument they all
12:53 - have their specific sounds or if someone
12:56 - asks you what kind of sound an animal
12:58 - makes you are going to answer it depends
13:01 - on the type of animal is it a cat a dog
13:03 - a cow or some other animal
13:06 - so
13:07 - that is exactly what i want to do in
13:10 - this example here so what i want to do
13:13 - is i want to say hey this instrument
13:15 - class cannot have the implementation of
13:18 - this function here but what it should do
13:21 - instead is it should force
13:23 - all derived classes to make their own
13:26 - implementation of this function here and
13:30 - that is exactly what we use pure virtual
13:34 - functions for
13:36 - so what i want to do now is i want to
13:38 - say hey instrument class you will not
13:41 - have the implementation for this
13:43 - function you just need to make sure that
13:45 - every class that inherits from you
13:48 - implements their own make sound function
13:52 - so how do we do that well i am going to
13:55 - delete the implementation and then i am
13:58 - going to say that this virtual function
14:02 - is equal to zero and by doing this this
14:06 - function just became a pure virtual
14:10 - function and then this class here has
14:13 - become an abstract class because by
14:16 - definition an abstract class in c plus
14:20 - is a class that has at least one pure
14:23 - virtual function
14:25 - so we deleted the implementation and
14:28 - then we said that this virtual make
14:31 - sound function is equal to zero so what
14:34 - that means is that now every class that
14:37 - inherits from our instrument class will
14:40 - have to provide their own implementation
14:42 - for this function here so let's create
14:46 - another class that inherits from this
14:49 - class here so let's create a class
14:51 - called piano for example so class
14:56 - piano and then let's say that it
14:59 - inherits publicly
15:01 - from our
15:03 - instrument
15:04 - class
15:05 - like this
15:07 - okay
15:08 - and then the first thing that i want to
15:09 - see is
15:10 - let's see what will happen if we don't
15:13 - implement this function here so let me
15:15 - try to create an object of type piano or
15:19 - a base class pointer to a piano object
15:22 - like we did here with accordion and then
15:24 - let's see what will happen
15:26 - so
15:27 - i am going to copy this
15:29 - actually and then paste it here and here
15:32 - i will say
15:33 - instrument pointer which will be called
15:36 - instrument 2
15:37 - will be
15:39 - a new piano like this and then here i
15:42 - will try to say
15:44 - instrument to make sound okay and as you
15:47 - can see immediately this here is
15:49 - underlined and we have an error which
15:51 - says that
15:53 - object of abstract class type piano is
15:56 - not allowed so you cannot do this and if
16:00 - we continue reading it says that pure
16:02 - virtual function makes sound has no
16:06 - overrider which means that we need to
16:10 - make our own implementation of this
16:12 - function here inside our piano class if
16:15 - we want to do this so that is how this
16:19 - function here forces all of the derived
16:22 - classes to implement it okay so that is
16:24 - what pure virtual function does
16:28 - okay so let's create an implementation
16:30 - of make sound function inside our piano
16:33 - class i am going to copy this
16:35 - and then paste it here and i will say
16:38 - that
16:39 - piano
16:40 - is playing like this and if i scroll as
16:44 - you can see the error has disappeared
16:47 - and if i try to run my program
16:50 - let's see what will happen
16:52 - okay it says that accordion is playing
16:55 - and then piano is playing so this line
16:57 - here and then this line here so that is
17:00 - exactly what we have achieved by making
17:04 - this function here a pure virtual
17:06 - function that means that it forces every
17:10 - derived class to make their own
17:12 - implementation of this function here so
17:15 - you add is equal to zero and then there
17:18 - is no implementation inside your
17:19 - abstract class and this here is an
17:22 - abstract class because it has at least
17:24 - one pure virtual function
17:28 - one thing that i promised to show you at
17:29 - the beginning is the polymorphic
17:31 - behavior that we get when we use virtual
17:35 - functions so let's demonstrate that
17:38 - so i will go inside my main function and
17:40 - here i have two instrument pointers the
17:43 - first one is pointing to an object of
17:46 - accordion and then the second one to an
17:48 - object of piano class so what i want to
17:51 - do now is i want to create an array for
17:54 - example of
17:55 - type
17:56 - instrument pointer and let's call it
18:00 - instruments i'm going to copy this so
18:02 - that i don't make a typo
18:04 - okay
18:05 - so instruments like this and i will make
18:09 - it an array of two
18:11 - pointers like this okay and here i want
18:15 - to add two pointers the first one is
18:17 - going to be this instrument one and then
18:20 - instrument two like this
18:23 - and what i can do now is i can with very
18:26 - little code make all of my instruments
18:29 - play it doesn't matter if they are
18:31 - accordion or piano or if you decided to
18:34 - create any other type of instrument you
18:36 - use
18:37 - the same code in order to make them all
18:39 - play so basically you can make your own
18:41 - concert in c plus so let's do that let's
18:44 - use a for loop
18:47 - in order to iterate through all of the
18:49 - elements of this array here so i will
18:51 - say
18:52 - inch i is equal to zero and then i is
18:56 - less than two
18:59 - um i plus plus like this
19:02 - okay and what i want to do inside this
19:04 - for loop is i will say
19:06 - instruments
19:07 - of
19:08 - i
19:09 - make
19:10 - sound
19:11 - like this
19:12 - okay and let's comment this line of code
19:16 - and then this line of code
19:18 - as well because we don't have to invoke
19:19 - them separately anymore so now what you
19:22 - can do is you can add 10 instruments to
19:25 - this array here or 100 or 1000
19:28 - instruments and then all of those
19:30 - instruments will start playing using
19:32 - just this code here and it doesn't
19:34 - matter if they are accordion or piano or
19:37 - any other derived class that you decided
19:40 - to create that will inherit from this
19:42 - class here called instrument so let's
19:45 - run our program
19:47 - okay
19:48 - and then as you can see accordion
19:50 - playing and then piano playing as well
19:52 - so now if you know how to play a sound
19:55 - in c plus plus you can basically create
19:58 - your own concert in c plus
20:01 - so i hope that this video was helpful
20:03 - for you to understand the relationship
20:05 - between virtual functions pure virtual
20:07 - functions and abstract classes and that
20:10 - you also understand the polymorphic
20:12 - behavior that we get when we use virtual
20:15 - functions and i will make more videos in
20:17 - the future related to abstract classes
20:19 - and abstraction and then also if you
20:22 - would like to see some other topics on
20:23 - my channel uh please put those in the
20:25 - comments section and i will make those
20:27 - videos and then if you liked this video
20:30 - give it a thumbs up for the youtube
20:31 - algorithm because that helps me a lot to
20:33 - reach more people and help them to learn
20:35 - programming
20:36 - thank you very much for watching and i
20:38 - will see you in some other video bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to explain the purpose and relationship between virtual functions pure virtual functions and abstract classes i am so happy to continue this objectoriented programming playlist and if you have any questions or any topics that you would like to see in the future please write me in the comments section so that i can prepare and film those videos and as i said in this one i will talk about virtual functions pure virtual functions and abstract classes but before i start i would like to take a brief moment to introduce c plus plus builder it is full featured c plus ide that helps you create apps fast for all major platforms while writing less code it connects natively to almost 20 databases like mariadb oracle sql server postgres and many more the key value is c plus builders framework which are powerful libraries that do more than other c plus tools this includes the awardwinning vcl framework for high performance native windows apps and fire monkey framework for crossplatform uis smart developers write better code faster and you can start for free using the link in the description the first topic that i want to explain is the topic of virtual functions in c plus so what is a virtual function a virtual function is a function that is defined in base class and then it is redefined in derived class but a virtual function has a very specific purpose and the main purpose of virtual functions is to give you the ability of a runtime polymorphism and i'm going to show the example of this at the end of the video now to understand this a little bit better imagine the following situation you have a base class and inside that base class you implement a function and then you decide to create another class which will inherit from this base class so a derived class and inside this derived class you also decide to make the implementation of that same function so now a base class has its own implementation and then a derived class has another implementation what virtual functions allow you to do is to execute the most derived version of that function so when you invoke that function using a base class pointer or a reference the most derived version of that function will be executed what that means is that if this derived class has its own implementation then that derived implementation will be executed but if a derived class does not have its own implementation then the implementation inside your base class will be executed and the best way for you to understand this is to show you on the example using a code and visual studio that i have opened here so now i am going to do that so let's create a class called instrument and i will do it here i will say class instrument like this and don't forget to put this semicolon at the end so what i want to do inside this instrument class is i want to create a function that will be public so that it is accessible outside of this class and that function will be of return type void and i will call it for example make sound so make sound like this and what i want to do inside this function is just write out a message so i will say c out and then let's say that the instrument is playing like this okay so now in order to test this and invoke this function what we have to do is we need to create an object of this class here so let's say instrument and let's call that object for example i one so instrument one and i am going to invoke this function here using this object so i will say i one dot make sound okay so if i run this program as you can see it says that instrument is playing so nothing unusual you should already be familiar with this now what i want to do is i want to create another class that inherits from this class here so i want to create a specific type of instrument for example let's create an accordion so i will say here class accordion like this and then what i want to do for this class here is first of all i want to inherit from this class here so i will say public and then instrument now this class this accordion class has become derived class and then instrument so this class here is called base class okay and this here represents the inheritance now what i want to do inside this derived class called accordion is i want to make another implementation of this same function here this function called make sound so let's do that i am going to copy this code here and paste it inside my accordion class and here instead of instrument playing i want to say that an accordion is playing like this okay so now if you remember what i said at the beginning of this video i said that when this function here called make sound that is implemented both in base class and in derived class is invoked using a base class pointer the most derived version of that function should be executed so in order to test that what i want to do is first of all let's create a pointer to our base class so here instead of creating an object what i want to do is i want to create a pointer like this and if you are not familiar with pointers i will put a link to a playlist that i made related to pointer so you should watch that first so here i have created a pointer to an instrument and what i want to do is say that it is equal to new accordion like this and please pay attention that this here is derived class so this here is derived class and then this here is base class okay and then here as you can see we have an error so the error is that now you cannot use this dot symbol to access your make sound function but you have to use this symbol here so when this here is a pointer and in this situation it is as you can see you use this symbol to access members of your class and make sound function is member of your instrument class okay so let's run our program and as you can see it says instrument playing again and if you remember what i said at the beginning is that when you use virtual functions the most derived version of that function should be executed and in this situation the most derived version is this one so the version inside our derived class so what is the problem here well the problem is that this function is not virtual function this is just a function and in order to make it virtual you need to add virtual keywords so here i am going to say virtual like this and now after you have made this function virtual what it does is it says hey if there is implementation of this function in my derived class please execute that and then if there is no implementation inside my derived class then you can execute this version here so if i run this program as you can see now it says that accordion is playing okay so let's close this and let's go one more time over what i just did so we created a base class called instrument and then we inherited from that instrument class as you can see here we created another class called accordion and we inherited that instrument class and then also we created a function called make sound in both classes so inside our instrument class and then inside our accordion class but that function has different implementations here it says that instrument is playing and then here it says that accordion is playing and then by making this function inside our base class a virtual function what we have allowed to happen is to execute the most derived version of this function here when it is invoked using a base class pointer as we did here so now when we invoke this make sound function it goes here and it says hey do you have more derived version of this function here so does your derived class has its own implementation and here it finds that implementation so it executes that and that is exactly what we have seen what i ran my program last time but in case that this class here does not have the implementation for this function then this version will be executed and in order to demonstrate that let's remove this function from our derived class so i am going to delete it and now if i run my program this version here should be executed so let's run our program okay and as you can see it says instrument playing because derived class does not have its implementation of this virtual function okay let's close this and then if i return the implementation to my derived class then again this derived version should be executed so if i run my program again as you can see now it says that accordion is playing okay so that is an example of how virtual functions work and for those of you who are wondering why i used the accordion as an example of instrument instead of some more common instruments like a piano or a guitar or something like that it is because i used to play the accordion so while i was in school for five or six years before university a long time before i got into it and programming i used to play the accordion and while i was preparing this example i got very nostalgic because i haven't played it in a million years and i found on youtube these two guys who are playing accordions and they are playing some of my favorite songs some of the songs that i used to play all the time so i will put a link in the description for those of you who want to check it out and let me know if you recognize any of the songs and also if you play any instrument or if you would like to play some instrument and my favorite composition of all times is called donovsky valley the the new waves i used to love that composition i used to play it all the time and i might even play it one day for you guys subscribe if you would like to see that but it makes me very sad that i don't have any videos of myself playing because when i was younger there were no cameras and smartphones or at least they were not affordable and cheap like they are right now but i will try to find a link on youtube and then put it in the description for those of you who want to hear how the new waves sound i'm just getting very nostalgic right now this programming course got very emotional cut the next concept that i want to explain is the idea of pure virtual functions and abstract classes and in order to explain that we will have to look at this example here from a different perspective so let's say for example that someone asks you what kind of sound an instrument makes your answer to this question could be it depends on what kind of instrument it is if it is an accordion or a piano or a guitar or some other instrument they all have their specific sounds or if someone asks you what kind of sound an animal makes you are going to answer it depends on the type of animal is it a cat a dog a cow or some other animal so that is exactly what i want to do in this example here so what i want to do is i want to say hey this instrument class cannot have the implementation of this function here but what it should do instead is it should force all derived classes to make their own implementation of this function here and that is exactly what we use pure virtual functions for so what i want to do now is i want to say hey instrument class you will not have the implementation for this function you just need to make sure that every class that inherits from you implements their own make sound function so how do we do that well i am going to delete the implementation and then i am going to say that this virtual function is equal to zero and by doing this this function just became a pure virtual function and then this class here has become an abstract class because by definition an abstract class in c plus is a class that has at least one pure virtual function so we deleted the implementation and then we said that this virtual make sound function is equal to zero so what that means is that now every class that inherits from our instrument class will have to provide their own implementation for this function here so let's create another class that inherits from this class here so let's create a class called piano for example so class piano and then let's say that it inherits publicly from our instrument class like this okay and then the first thing that i want to see is let's see what will happen if we don't implement this function here so let me try to create an object of type piano or a base class pointer to a piano object like we did here with accordion and then let's see what will happen so i am going to copy this actually and then paste it here and here i will say instrument pointer which will be called instrument 2 will be a new piano like this and then here i will try to say instrument to make sound okay and as you can see immediately this here is underlined and we have an error which says that object of abstract class type piano is not allowed so you cannot do this and if we continue reading it says that pure virtual function makes sound has no overrider which means that we need to make our own implementation of this function here inside our piano class if we want to do this so that is how this function here forces all of the derived classes to implement it okay so that is what pure virtual function does okay so let's create an implementation of make sound function inside our piano class i am going to copy this and then paste it here and i will say that piano is playing like this and if i scroll as you can see the error has disappeared and if i try to run my program let's see what will happen okay it says that accordion is playing and then piano is playing so this line here and then this line here so that is exactly what we have achieved by making this function here a pure virtual function that means that it forces every derived class to make their own implementation of this function here so you add is equal to zero and then there is no implementation inside your abstract class and this here is an abstract class because it has at least one pure virtual function one thing that i promised to show you at the beginning is the polymorphic behavior that we get when we use virtual functions so let's demonstrate that so i will go inside my main function and here i have two instrument pointers the first one is pointing to an object of accordion and then the second one to an object of piano class so what i want to do now is i want to create an array for example of type instrument pointer and let's call it instruments i'm going to copy this so that i don't make a typo okay so instruments like this and i will make it an array of two pointers like this okay and here i want to add two pointers the first one is going to be this instrument one and then instrument two like this and what i can do now is i can with very little code make all of my instruments play it doesn't matter if they are accordion or piano or if you decided to create any other type of instrument you use the same code in order to make them all play so basically you can make your own concert in c plus so let's do that let's use a for loop in order to iterate through all of the elements of this array here so i will say inch i is equal to zero and then i is less than two um i plus plus like this okay and what i want to do inside this for loop is i will say instruments of i make sound like this okay and let's comment this line of code and then this line of code as well because we don't have to invoke them separately anymore so now what you can do is you can add 10 instruments to this array here or 100 or 1000 instruments and then all of those instruments will start playing using just this code here and it doesn't matter if they are accordion or piano or any other derived class that you decided to create that will inherit from this class here called instrument so let's run our program okay and then as you can see accordion playing and then piano playing as well so now if you know how to play a sound in c plus plus you can basically create your own concert in c plus so i hope that this video was helpful for you to understand the relationship between virtual functions pure virtual functions and abstract classes and that you also understand the polymorphic behavior that we get when we use virtual functions and i will make more videos in the future related to abstract classes and abstraction and then also if you would like to see some other topics on my channel uh please put those in the comments section and i will make those videos and then if you liked this video give it a thumbs up for the youtube algorithm because that helps me a lot to reach more people and help them to learn programming thank you very much for watching and i will see you in some other video bye
