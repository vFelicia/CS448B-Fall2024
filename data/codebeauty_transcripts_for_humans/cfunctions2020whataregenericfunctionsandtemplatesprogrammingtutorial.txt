With timestamps:

00:00 - hi everyone welcome to my channel my
00:02 - name is saldina and i make it and
00:04 - programming related videos so if you're
00:06 - interested in those please subscribe to
00:09 - my channel and give this video a thumbs
00:11 - up because that helps me a lot to reach
00:13 - more people and spread programming
00:14 - knowledge and in this video i want to
00:17 - talk about generics and templates in c
00:20 - plus so what are generics the idea of
00:23 - generics was born when programmers
00:26 - decided that they want to be able to use
00:28 - the same code but with different data
00:31 - types so the logic is the same but data
00:34 - types are different or if you want
00:36 - another explanation when we talked about
00:39 - functions we said that we can pass
00:40 - parameters to functions and what we said
00:43 - as well is that types of those
00:45 - parameters had to be known beforehand so
00:47 - you had to hard code types of those
00:50 - parameters whether it is int or char or
00:54 - float or any other data type that had to
00:56 - be known beforehand
00:58 - but with this idea of generics what we
01:01 - should be able to do is we should be
01:03 - able to pass that type itself to a
01:06 - function so we should be able to
01:08 - determine which type we want that
01:11 - function to operate on and the best way
01:13 - for you to understand this will be on an
01:15 - example so that is exactly what i will
01:17 - do so let's say that in my visual studio
01:21 - i want to create a function that will
01:23 - swap the values of two variables and if
01:26 - you don't have an idea how you can swap
01:28 - values of two variables i have a video
01:30 - where i explain that
01:32 - in a very visual way so you can use that
01:36 - video i will link it here so here i will
01:39 - just type very quickly the code for that
01:41 - and if you need explanation again you
01:43 - can watch that video so i will say that
01:46 - that function will be of return type
01:48 - void and i will call it swap
01:51 - and then what i want to pass to this
01:53 - function will be two integer variables
01:55 - so i will say int a and then int
01:59 - int b like this
02:02 - okay but because i want to have both of
02:05 - these variables available in my main
02:07 - function which will invoke my swap
02:09 - function i will have to pass these two
02:12 - variables using a reference and again if
02:15 - you're not familiar with passing
02:17 - parameters by a reference i will link
02:20 - another video here where i talk about
02:22 - that and i think that i made more than
02:24 - one video on my channel talking about
02:26 - passing variables by a reference to a
02:28 - function so i will put those in the
02:29 - description as well so
02:32 - the code for this swap function will be
02:34 - the following so i will say int
02:37 - temp i will create a temporary variable
02:40 - and to that temporary variable i will
02:42 - assign the value that my variable a is
02:44 - holding
02:45 - and then i will assign to my variable a
02:48 - the value that my b is holding like this
02:51 - and then to my b i will assign whatever
02:54 - my temp variable is holding again if you
02:57 - need to understand this in more detail i
03:00 - will put video in the description of
03:02 - this logic here
03:04 - okay so now this function should give us
03:07 - the ability to swap values of two
03:10 - variables and the way to test this
03:11 - function is the following so i will say
03:14 - please create two variables call them a
03:16 - and
03:17 - b like this and to my a variable i will
03:20 - assign the value of 5 for example and
03:23 - then b will have the value of
03:25 - 7. so let's write out values of these
03:28 - two variables let's say a
03:30 - and then just make a separation and then
03:34 - value of b like this
03:36 - okay so now what i want to do is i want
03:39 - to invoke this swap function i will say
03:42 - swap
03:43 - and then i will pass my a and then b
03:46 - like this and if i copy this line after
03:49 - the invocation of my swap function we
03:51 - will see if the values had indeed been
03:54 - changed so
03:55 - if i run my program
03:58 - as you can see
03:59 - this line of code here has resulted with
04:02 - this output so 5 7 and then after
04:04 - invoking our swap function the values
04:07 - inside these two variables so a and b
04:10 - have successfully been swapped so now it
04:12 - is seven five okay excellent so that
04:15 - means that this function does what it
04:17 - should do now what happens if i want to
04:20 - swap values of two char variables for
04:22 - example what i would have to do is i
04:25 - would have to copy this function
04:28 - paste it here and then i will adjust it
04:30 - to be able to work with char variables
04:33 - so i will say
04:34 - char
04:35 - and then i will change this with char as
04:38 - well and then here i will put char as
04:40 - well now this swap function should work
04:43 - with char parameters and this is called
04:46 - function overloading if you are not
04:48 - familiar with function overloading i
04:50 - made that video explaining how it works
04:53 - so i will link it here if you want to
04:55 - watch it and i will put it in the
04:56 - description as well
04:58 - so this function should be able to work
05:00 - with char parameters now and in order to
05:02 - test this function let's create two
05:04 - variables of type
05:06 - char so char c
05:09 - and then d as well and to my c variable
05:12 - i will assign the value of letter c and
05:15 - then to d i will assign the value of
05:18 - letter d excellent so i will copy this
05:21 - line of code here and i will just adjust
05:23 - it so that now we write out the value of
05:25 - our c variable and then here we write
05:28 - out the value of my d variable like this
05:31 - and then after this line of code here i
05:33 - want to invoke this swap function so i
05:35 - will say
05:36 - swap and then pass it c and d
05:41 - like this
05:42 - and i want to write out my c and d
05:44 - variables after this line of code here
05:47 - so after i have swapped the values just
05:49 - to check that they successfully have
05:51 - been swapped
05:52 - so if i run my code
05:54 - as you can see we have this output
05:57 - output here so c and d and then after
06:00 - swapping the values inside these two
06:02 - variables we have this output here which
06:04 - means that they have been swapped
06:06 - successfully now
06:08 - i see a problem with this approach here
06:12 - and the problem is following what
06:14 - happens if i want for example to swap
06:17 - values of two float variables and then
06:19 - two doubles and then two booleans and so
06:21 - on well i would have to create this swap
06:24 - function for each data type and that is
06:27 - repeating code and we shouldn't really
06:29 - be repeating code unless we really need
06:31 - to and in this particular situation we
06:33 - don't
06:34 - so there is a simple solution for this
06:36 - problem and that simple solution will be
06:39 - using generics
06:41 - and the idea is to be able to use the
06:44 - same function the same logic but with
06:47 - different data types so again we will be
06:50 - solving this problem using generics and
06:52 - the way that generics are implemented is
06:55 - using templates so how do you make a
06:58 - template in c plus plus well you use
07:01 - keyword that is template like this and
07:04 - then inside these
07:06 - angled brackets you will put the name of
07:09 - your type so you will say type name and
07:13 - most common type name that is used is
07:16 - called t but you can use whichever type
07:18 - name you want you can say type as well
07:21 - if you want that should work but i will
07:23 - use t because that is the recommended
07:25 - way so now that i have created a
07:28 - template and i have said i want to
07:30 - create a new type which is called t i
07:33 - will have to use this t
07:35 - in my swap function so now i will change
07:39 - this int with my t so i will say t here
07:43 - and then t here and i will create t here
07:47 - as well okay now this t is called
07:51 - generic data type and this swap function
07:54 - is now a generic function which means
07:56 - that this swap function can be used on
07:59 - any data type whose variables can be
08:01 - swapped using this logic here so in one
08:04 - invocation it can be swapping integer
08:06 - variables and then in another it can be
08:08 - swapping characters and then in the next
08:10 - one floats and then doubles and booleans
08:13 - and so on so now that means that we can
08:17 - really remove this swap function because
08:19 - we do not need it because as we said
08:21 - this function here is a generic function
08:23 - and it can be used with different data
08:26 - types so now i will delete this swap
08:29 - function here and if i run this code
08:32 - this code should work as it did before
08:35 - so
08:36 - let's press this button
08:38 - okay and as you can see five seven and
08:41 - then seven five this function indeed
08:43 - works for integers and then cd and then
08:46 - dc so it works for characters as well
08:49 - and let's close this okay now what you
08:52 - can do here as well here in the
08:54 - invocation in this 15th line invoking
08:57 - this function for two integer variables
08:59 - what you can do is you can specify the
09:01 - type itself as well so you can say i am
09:04 - invoking this swap function for my
09:06 - integer type so now when this function
09:10 - is invoked it will go here and this t
09:13 - keyword will be changed with this int so
09:16 - it will be int here and then into here
09:19 - and then into here and it will do the
09:22 - swapping this function here will do the
09:24 - swapping for int data type and then in
09:27 - this 20th line here you can say as well
09:31 - char if you want you don't have to that
09:33 - process will happen automatically
09:35 - because you have declared c and d as
09:38 - chart type so those c and d of type
09:40 - chart will be passed here and then char
09:43 - will be here and char will be here and
09:45 - then char will be here as well so what
09:48 - we have acquired with this template
09:50 - function here is to be able to use the
09:53 - same code with different data types we
09:56 - have just demonstrated how that can be
09:58 - invoked for integer data type and then
10:00 - how we can use it for character and you
10:02 - can do on your own float or double or
10:04 - bowl and so on
10:06 - okay and then what you can do as well is
10:09 - you can use any other name for your
10:11 - generic type t is something that is used
10:14 - commonly in literature but you can use
10:16 - type as well if you want so you can say
10:18 - oh you can say
10:20 - type and then you would have to say
10:22 - type here and then
10:24 - type here and
10:26 - here as well okay that should work the
10:29 - same way that it did previously and then
10:32 - another thing that you will find in
10:33 - literature is instead of this type name
10:36 - keyword you can use class um it really
10:40 - depends on you whichever one you want to
10:41 - use you can and again if you know what
10:44 - classes are class is a type as well so
10:47 - it is user defined type so this should
10:49 - work as well the same way that type name
10:52 - keyword did and if you are not familiar
10:54 - with classes and objects and
10:56 - object-oriented programming i have
10:58 - course which i will link here so make
11:00 - sure to watch that
11:02 - so i hope that this video helped you
11:04 - understand what are generics and
11:06 - templates and what is the main idea
11:07 - behind them and we will be talking about
11:10 - this of course in my future videos and
11:12 - in more depth so make sure to subscribe
11:14 - to my channel and hit that bell icon as
11:16 - well so that you don't miss a video that
11:18 - i publish
11:20 - and if you like this one please give it
11:22 - a thumbs up that helps me to reach more
11:24 - people and help more people with
11:25 - programming so thank you very much for
11:27 - watching and i'm going to see you in my
11:29 - next video bye

Cleaned transcript:

hi everyone welcome to my channel my name is saldina and i make it and programming related videos so if you're interested in those please subscribe to my channel and give this video a thumbs up because that helps me a lot to reach more people and spread programming knowledge and in this video i want to talk about generics and templates in c plus so what are generics the idea of generics was born when programmers decided that they want to be able to use the same code but with different data types so the logic is the same but data types are different or if you want another explanation when we talked about functions we said that we can pass parameters to functions and what we said as well is that types of those parameters had to be known beforehand so you had to hard code types of those parameters whether it is int or char or float or any other data type that had to be known beforehand but with this idea of generics what we should be able to do is we should be able to pass that type itself to a function so we should be able to determine which type we want that function to operate on and the best way for you to understand this will be on an example so that is exactly what i will do so let's say that in my visual studio i want to create a function that will swap the values of two variables and if you don't have an idea how you can swap values of two variables i have a video where i explain that in a very visual way so you can use that video i will link it here so here i will just type very quickly the code for that and if you need explanation again you can watch that video so i will say that that function will be of return type void and i will call it swap and then what i want to pass to this function will be two integer variables so i will say int a and then int int b like this okay but because i want to have both of these variables available in my main function which will invoke my swap function i will have to pass these two variables using a reference and again if you're not familiar with passing parameters by a reference i will link another video here where i talk about that and i think that i made more than one video on my channel talking about passing variables by a reference to a function so i will put those in the description as well so the code for this swap function will be the following so i will say int temp i will create a temporary variable and to that temporary variable i will assign the value that my variable a is holding and then i will assign to my variable a the value that my b is holding like this and then to my b i will assign whatever my temp variable is holding again if you need to understand this in more detail i will put video in the description of this logic here okay so now this function should give us the ability to swap values of two variables and the way to test this function is the following so i will say please create two variables call them a and b like this and to my a variable i will assign the value of 5 for example and then b will have the value of 7. so let's write out values of these two variables let's say a and then just make a separation and then value of b like this okay so now what i want to do is i want to invoke this swap function i will say swap and then i will pass my a and then b like this and if i copy this line after the invocation of my swap function we will see if the values had indeed been changed so if i run my program as you can see this line of code here has resulted with this output so 5 7 and then after invoking our swap function the values inside these two variables so a and b have successfully been swapped so now it is seven five okay excellent so that means that this function does what it should do now what happens if i want to swap values of two char variables for example what i would have to do is i would have to copy this function paste it here and then i will adjust it to be able to work with char variables so i will say char and then i will change this with char as well and then here i will put char as well now this swap function should work with char parameters and this is called function overloading if you are not familiar with function overloading i made that video explaining how it works so i will link it here if you want to watch it and i will put it in the description as well so this function should be able to work with char parameters now and in order to test this function let's create two variables of type char so char c and then d as well and to my c variable i will assign the value of letter c and then to d i will assign the value of letter d excellent so i will copy this line of code here and i will just adjust it so that now we write out the value of our c variable and then here we write out the value of my d variable like this and then after this line of code here i want to invoke this swap function so i will say swap and then pass it c and d like this and i want to write out my c and d variables after this line of code here so after i have swapped the values just to check that they successfully have been swapped so if i run my code as you can see we have this output output here so c and d and then after swapping the values inside these two variables we have this output here which means that they have been swapped successfully now i see a problem with this approach here and the problem is following what happens if i want for example to swap values of two float variables and then two doubles and then two booleans and so on well i would have to create this swap function for each data type and that is repeating code and we shouldn't really be repeating code unless we really need to and in this particular situation we don't so there is a simple solution for this problem and that simple solution will be using generics and the idea is to be able to use the same function the same logic but with different data types so again we will be solving this problem using generics and the way that generics are implemented is using templates so how do you make a template in c plus plus well you use keyword that is template like this and then inside these angled brackets you will put the name of your type so you will say type name and most common type name that is used is called t but you can use whichever type name you want you can say type as well if you want that should work but i will use t because that is the recommended way so now that i have created a template and i have said i want to create a new type which is called t i will have to use this t in my swap function so now i will change this int with my t so i will say t here and then t here and i will create t here as well okay now this t is called generic data type and this swap function is now a generic function which means that this swap function can be used on any data type whose variables can be swapped using this logic here so in one invocation it can be swapping integer variables and then in another it can be swapping characters and then in the next one floats and then doubles and booleans and so on so now that means that we can really remove this swap function because we do not need it because as we said this function here is a generic function and it can be used with different data types so now i will delete this swap function here and if i run this code this code should work as it did before so let's press this button okay and as you can see five seven and then seven five this function indeed works for integers and then cd and then dc so it works for characters as well and let's close this okay now what you can do here as well here in the invocation in this 15th line invoking this function for two integer variables what you can do is you can specify the type itself as well so you can say i am invoking this swap function for my integer type so now when this function is invoked it will go here and this t keyword will be changed with this int so it will be int here and then into here and then into here and it will do the swapping this function here will do the swapping for int data type and then in this 20th line here you can say as well char if you want you don't have to that process will happen automatically because you have declared c and d as chart type so those c and d of type chart will be passed here and then char will be here and char will be here and then char will be here as well so what we have acquired with this template function here is to be able to use the same code with different data types we have just demonstrated how that can be invoked for integer data type and then how we can use it for character and you can do on your own float or double or bowl and so on okay and then what you can do as well is you can use any other name for your generic type t is something that is used commonly in literature but you can use type as well if you want so you can say oh you can say type and then you would have to say type here and then type here and here as well okay that should work the same way that it did previously and then another thing that you will find in literature is instead of this type name keyword you can use class um it really depends on you whichever one you want to use you can and again if you know what classes are class is a type as well so it is user defined type so this should work as well the same way that type name keyword did and if you are not familiar with classes and objects and objectoriented programming i have course which i will link here so make sure to watch that so i hope that this video helped you understand what are generics and templates and what is the main idea behind them and we will be talking about this of course in my future videos and in more depth so make sure to subscribe to my channel and hit that bell icon as well so that you don't miss a video that i publish and if you like this one please give it a thumbs up that helps me to reach more people and help more people with programming so thank you very much for watching and i'm going to see you in my next video bye
