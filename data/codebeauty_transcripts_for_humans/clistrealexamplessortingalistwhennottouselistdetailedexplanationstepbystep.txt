With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video we are going to talk about
00:04 - STL containers more specifically about
00:07 - list container because it is one of the
00:09 - most important and most commonly used
00:11 - types of containers in programming so in
00:14 - this video you will learn what is list
00:16 - how to use it in your programs what are
00:18 - its advantages and disadvantages so that
00:20 - you know when to use it and when not to
00:23 - use it and also I'm going to show you a
00:26 - real world example of how lists are used
00:29 - in programming so in this video we will
00:31 - also build that real example of player
00:34 - matchmaking in some popular games like
00:37 - fortnite war zone pubg and so on so we
00:40 - will see all of that in this video and
00:43 - before we start I have something very
00:45 - important to tell you so if you're
00:47 - watching programming tutorials and
00:49 - lessons but you struggle to apply that
00:51 - knowledge and you don't know how to use
00:53 - that knowledge in order to build real
00:55 - world applications that can be used in
00:57 - everyday life then I have a solution for
01:00 - you so if you enjoy my YouTube videos
01:02 - and if they help you then you will be
01:04 - more than happy to know that I also have
01:06 - a practical programming course where I
01:08 - will teach you all of the skills that
01:11 - you need in order to build those
01:12 - applications that you want in this
01:15 - course you will learn transferable
01:16 - skills that you can apply across all
01:19 - programming languages you will get the
01:21 - experience of working on real world
01:23 - projects solving real problems
01:26 - implementing functionalities fixing bugs
01:28 - optimizing your code there will be a lot
01:30 - of exercises for you to practice and you
01:33 - will also have a lot of fun we have a
01:36 - great supportive Community where we all
01:38 - hang out and collaborate together and it
01:40 - was very important for me to create this
01:42 - community because I know that learning
01:44 - programming can be quite scary
01:46 - especially if you are alone you can
01:48 - often feel lost and confused so in this
01:51 - case you always have someone to help you
01:54 - you can always ask a question and
01:56 - someone will jump in and offer you help
01:59 - very very fast fast so this way you can
02:01 - progress in the most optimal way so if
02:04 - you want to learn practical programming
02:06 - and get career ready skills then this
02:08 - course is the only one that you will
02:10 - need because everything is on one place
02:13 - step by step from beginner to expert and
02:16 - currently there is even a special
02:17 - discount that you can use in order to
02:19 - save money so if you decide that you
02:22 - want to learn programming and start with
02:24 - my practical programming course then
02:26 - click the link in the description and I
02:28 - will see you in a minute so with that
02:30 - being said let's continue with the topic
02:32 - of today's video which is STL lists so
02:35 - let's first explain what are containers
02:38 - and you can understand a container as a
02:41 - box in everyday life that you use to
02:43 - store and organize different items for
02:46 - example you might have a box to store
02:48 - shoes or a box for clothes or for makeup
02:52 - for shoes that are out of fashion or a
02:55 - box for tools now I've never actually
02:58 - seen one in my life but it's just an
03:00 - example to help you visualize and if
03:03 - you're wondering how I live without a
03:05 - toolbox I'm cute I get by okay so most
03:10 - likely all of these boxes are different
03:13 - because they serve different purpose and
03:15 - we use them to store and organize
03:17 - different items now the same way in
03:19 - programming we want to store and
03:21 - organize different kinds of data and for
03:24 - that we use containers okay so some of
03:28 - the most commonly used containers in
03:30 - programming are list map Q DQ stack
03:34 - vector and so on and we are going to
03:37 - talk about each one of these in a
03:39 - specific video and in today's video we
03:42 - are learning about list I have already
03:45 - covered custom implementation of a link
03:47 - list in one of my previous videos which
03:50 - I will link here and also put it in the
03:52 - description so if you want to learn how
03:54 - to implement a linked list from scratch
03:57 - then you can watch those videos to get a
03:58 - better understand understanding because
04:00 - in this video we will not do it manually
04:02 - but we will be using a list from STL
04:06 - library and we will see real examples of
04:08 - how you can use lists in your programs
04:11 - so to start working with the list you
04:13 - first need to include it so here you
04:15 - need to say include list like this and
04:20 - now what I can do is I can create a list
04:23 - so let's say that I want to create a
04:25 - list of integers and I will call it my
04:29 - list like this so with this I have
04:32 - created a list where I can store integer
04:34 - numbers and it is called my list now one
04:38 - very important thing that I want you to
04:39 - notice is that I did not specify any
04:42 - size for this list and that is because
04:45 - list is dynamic type of container which
04:47 - means that it will automatically expand
04:50 - when I add new elements and it will
04:53 - shrink when I remove existing elements
04:56 - so if you're wondering how many elements
04:58 - can you add you can add as as many as
05:00 - you want as long as you have free memory
05:02 - in your computer so let's add some
05:05 - elements into our list to see how we can
05:07 - do that there are two methods that are
05:10 - used very often for inserting elements
05:12 - into the list and those are push back
05:15 - and push front and as the name itself
05:17 - implies push back is used to add an
05:20 - element at the end of the list and push
05:23 - front is used to add an element in the
05:25 - beginning of the list so let's see how
05:28 - we can use them you simply say my list
05:31 - do push back and here you provide the
05:35 - element that you want to push at the
05:37 - back of your list okay let's add another
05:40 - one again my list push back and then the
05:42 - element that you want to add let's say
05:45 - 20 okay and then if you want to insert
05:47 - an element at the beginning you use
05:49 - function called push front and here
05:52 - let's add number 30 for example and as I
05:56 - already explained list is dynamic type
05:59 - of contain container which means that
06:00 - you don't have to specify the size it
06:02 - will automatically resize itself so that
06:06 - it can fit all of the elements that you
06:08 - are adding okay so this is how we can
06:11 - insert elements into our list and now we
06:13 - need a way to print our list to print
06:16 - this data to see how our list looks like
06:19 - so let's do that next in order to print
06:21 - the data that is stored in our list what
06:23 - we need to do is we need to iterate
06:26 - through our list so what that means is
06:28 - that we will start at at the beginning
06:30 - of the list and then we will visit each
06:33 - element of the list which is called node
06:36 - so we will visit each node and we will
06:39 - print the value of that node now for
06:42 - that we use iterators and you can
06:45 - understand an iterator as a pointer to a
06:48 - specific node to a specific element of
06:50 - the list and I'm going to create a
06:53 - dedicated video where we will talk about
06:55 - iterators in more detail but for now
06:58 - let's just see how we can use iterators
07:01 - in order to go from the beginning till
07:03 - the end of the list and print each
07:06 - element of our list so let's do that
07:08 - next so what I will do is I will write a
07:12 - for Loop and inside this for Loop we
07:15 - will have an iterator that will start at
07:17 - the beginning of our list and it will go
07:20 - until the end of the list which means
07:21 - that it will visit every element of our
07:24 - list so we will simply print the value
07:26 - of that element so let's initialize our
07:31 - iterator to point at the beginning of
07:33 - the list let's see how we can do that
07:35 - you first say list of
07:38 - in iterator because we are going to use
07:41 - this iterator in order to iterate
07:44 - through the list of this type okay and
07:46 - don't forget these two column signs okay
07:50 - so the name of my iterator will be it
07:53 - and I will initialize this iterator to
07:57 - point at the beginning of my list like
08:00 - this okay so this is where my iterator
08:04 - starts now here I will say that my
08:06 - iterator will iterate until it is not
08:10 - equal to my list. end and then I will
08:14 - say that in each iteration I will simply
08:17 - increment the value of my iterator which
08:19 - means please go to the next node okay so
08:24 - with this for Loop we are creating an
08:27 - iterator that starts at the beginning of
08:29 - the list it goes until the end of the
08:32 - list and in each iteration it increments
08:35 - by one which means that it goes to the
08:37 - next node so now what I can do inside
08:40 - this for Loop is I can simply say see
08:43 - out it and let's add an end line like
08:47 - this now there is something interesting
08:49 - that I want to explain here and that is
08:51 - the fact that it itself is an iterator
08:55 - which means that it points to an address
08:57 - but what we need to print is we need to
09:00 - print the value that is on that address
09:03 - so in order to do that we will
09:04 - dreference this iterator and you
09:07 - dfference it by using this little
09:10 - asteris this star symbol okay so with
09:13 - this we will iterate from the beginning
09:16 - until the end of our list and we will
09:18 - print each element of the list so let's
09:21 - start the program okay and as you can
09:24 - see here are the elements of the list
09:27 - and if you're wondering why are they in
09:29 - this order and not in this order here
09:32 - the reason for that is because we first
09:34 - added 10 at the back of the list and
09:37 - then we added 20 after that so again at
09:40 - the back and then we inserted 30 at the
09:44 - front of the list which means that it
09:45 - will be the first element of the list so
09:48 - that is the reason why elements are in
09:51 - this order and not in this order here so
09:55 - that is how you can print the elements
09:58 - of the list using
09:59 - iterators if you want to know how we can
10:02 - delete an element from our list it's
10:04 - actually very easy to do that for that
10:07 - we use method called erray so let's see
10:10 - how to do it I'll do it here so you say
10:13 - my list do erase and here inside these
10:18 - parentheses you need to provide a
10:21 - pointer to the element that you want to
10:23 - delete so for now we only know how to
10:26 - get a pointer to the beginning of of the
10:29 - list and a pointer to the end of the
10:31 - list so this here will give us the
10:34 - address of the first element and this
10:36 - here will give us the address of the
10:38 - last element so let's say that we want
10:39 - to delete first so I will copy this code
10:42 - here okay so now what this line here
10:46 - will do is it will simply erase the
10:50 - element from the beginning of the list
10:52 - from this list here so now if I run the
10:56 - program let's see what is going to be
10:57 - the result Okay so the element that we
11:00 - pushed at the front was 30 and it was
11:02 - later removed so now we don't see that
11:05 - element inside our list okay so that is
11:09 - how you can delete or erase an element
11:11 - from the list you simply put the name of
11:13 - the list and then you say erase and here
11:16 - you provide a pointer to the element
11:19 - that you want to delete okay all that we
11:23 - have learned so far are basics of lists
11:26 - and you need to know these basics in
11:28 - order to be able to use lists in your
11:31 - real programs so what I want to do now
11:33 - is I want to show you how you would use
11:36 - a list in a real program so let's say
11:40 - that we are building a game now in real
11:43 - life this game would be played by people
11:46 - who are beginners as well as by people
11:48 - who are Pros so in order to make this
11:51 - game realistic and fair you cannot put
11:54 - all of them to play together because
11:56 - Pros will always win and and beginners
11:59 - will never win so what you need to do is
12:02 - you need to write you need to create
12:04 - some sort of matchmaking system that
12:07 - will group beginners together and that
12:09 - will group Pros together and this type
12:12 - of matchmaking system is the one that
12:14 - you would often see in most modern
12:16 - Battle Royale games like pubg fortnite
12:20 - war zone and so on so that is exactly
12:23 - what we are going to make now so let's
12:26 - see how we can make this simple
12:27 - matchmaking system
12:29 - so I will delete this code we will not
12:31 - need it anymore now let's see what we
12:34 - will need so first I will create a list
12:38 - of integers and I will call this list
12:41 - all
12:43 - players like this now what I want to
12:47 - store inside this list will be
12:49 - experiences or ratings of all of the
12:53 - players that are waiting in the lobby of
12:56 - the game which means that they are
12:58 - waiting
12:59 - for us to match them with people of
13:01 - similar experience so that they can play
13:04 - the game now in a realistic scenario
13:07 - here you would not have a list of
13:08 - integers but you would have a list of
13:10 - players that have a lot more
13:12 - characteristics besides just ranking or
13:15 - experience you would have a lot of other
13:18 - characteristics but because we want to
13:19 - make this program simple inside this
13:21 - list I will just store their rating so
13:25 - here I will say that I want to
13:27 - initialize this list and here I will put
13:31 - the experience or the rating of each
13:35 - player so let's say that ratings will go
13:38 - from 1 to 10 okay so the first one will
13:41 - have rating of two okay and then the
13:45 - second one we'll have N9 and then 6 7 3
13:49 - 1 4 8 3 again and then let's say two and
13:53 - N again okay so these are all of the
13:58 - players and these are their respective
14:02 - ratings now what I want to do next is I
14:05 - want to create two lists so the first
14:08 - one will be list of integer and I will
14:11 - call it
14:13 - beginners like this and for now it will
14:16 - be empty list just like this and then I
14:19 - want to create another list of integers
14:22 - and I will call it Pros so now what we
14:25 - need to do is we want to create a
14:27 - matchmaking system that will group all
14:30 - of these players that are waiting to
14:33 - play the game into one of these two
14:37 - lists so beginners will play with
14:39 - beginners and Pros will play with Pros
14:42 - so let's set up some rules let's say
14:44 - that beginners will be all of the people
14:47 - with rating one to
14:50 - five okay so those are beginners and
14:53 - then Pros will be people with rating
14:56 - from six to 10 so so we should group
15:00 - them to play together so let's see how
15:02 - we can do that so what I will do is
15:05 - again I will have to iterate through
15:07 - this entire list of all of the players
15:10 - and we will check what is the rating of
15:13 - each player and then we will put him
15:15 - into one of these two categories so he
15:18 - is either a beginner or a pro so let's
15:22 - see how we can do that we already saw
15:24 - how we can iterate through our list so
15:27 - let's write that code one more time I
15:29 - will say for and then I will create a
15:33 - list of int iterator like this I will
15:37 - call it it and I will initialize it to
15:41 - point at the beginning of this list here
15:46 - okay and we need parentheses here okay
15:49 - and then I will say please iterate the
15:52 - list until you come at the end of the
15:55 - list so all players. end like this and
16:00 - then in each iteration you simply
16:02 - increment by one which means you go to
16:05 - the next node like this okay so here we
16:08 - will put the logic that will push the
16:11 - player into one of these two categories
16:15 - so here we will create a variable of
16:18 - type int call it
16:20 - rating okay and what I want to store
16:22 - inside this variable will be the
16:25 - reference value of our iterator so this
16:28 - is how we access each specific rating in
16:32 - our list because again iterator itself
16:35 - is an address it is a pointer and then
16:37 - when you dreference it you get the value
16:40 - that is stored at that address meaning
16:42 - the rating from this list here okay so
16:45 - when we get the rating what we need to
16:48 - do is we need to check if that
16:51 - rating is greater than or equal to one
16:54 - and at the same time if the rating is
16:58 - less less than or equal to five because
17:01 - if it is that means that we are talking
17:04 - about beginner player so we will put him
17:07 - into beginners list so I will say
17:10 - beginners.
17:11 - pushback okay and here we will put the
17:15 - player with this rating okay and then I
17:19 - will check else if rating is greater
17:24 - than or equal to six and at the same
17:28 - time if rating is less than or equal to
17:31 - 10 in this case I will say
17:35 - Pros do push back and I will push the
17:39 - player with this rating into category of
17:42 - pro players like this so this is how we
17:46 - can group all of our players together so
17:49 - that beginners play with beginners and
17:52 - pros play with Pros so with this we have
17:55 - grouped our players so that beginners
17:57 - are with beginners and Pros are with
17:59 - Pros so now in order to test this code
18:03 - and to see if it works as it should we
18:05 - need a way to display this data we need
18:08 - a way to display this list here and this
18:11 - list here so let's create a function
18:14 - here it will be of return type void and
18:17 - I will call it display
18:20 - ratings so display
18:24 - ratings okay and this function will
18:27 - receive a list of integers as a
18:32 - parameter and I will call it players
18:38 - ratings okay so into this function we
18:41 - will pass beginners or Pros list and the
18:45 - job of this function will be to print
18:47 - the ratings of the list that it receives
18:50 - so what I will do is I will copy this
18:53 - code here and then we will adjust it a
18:55 - little bit so this part I don't need the
18:59 - only part that we need is this for Loop
19:01 - which creates an iterator and it
19:04 - iterates from the beginning of let's say
19:07 - this list here until the end of the same
19:12 - list and in each iteration it increments
19:15 - by one so what we will do here is we
19:18 - will simply print the rating of each
19:21 - player so I will say see out player
19:27 - rating like this and let's print the
19:31 - reference value of our iterator and
19:33 - let's put an end line okay so this is
19:37 - how you can create a function that will
19:39 - print all of the elements of the list
19:42 - now this code here will work but there
19:45 - are some small modifications and
19:47 - optimizations that I want to make and
19:50 - they are regarding this parameter here
19:53 - so in some of my previous videos we
19:55 - talked about different ways to pass
19:57 - parameters to function and we said that
19:59 - one way is to pass by value and another
20:01 - way is to pass by reference if you are
20:04 - passing an element by value then the
20:07 - function will make its own copy and it
20:10 - will work on that copy on the other hand
20:13 - if you're passing an element by
20:15 - reference what you need to do is you
20:17 - need to put this little symbol here this
20:20 - end symbol and in this case you are
20:24 - passing the original which means that
20:26 - whatever this function here does does it
20:28 - will work on the original itself so what
20:32 - is the difference the difference is if
20:35 - you pass a parameter by value that means
20:37 - that the function needs to create its
20:40 - own copy and then it will work on that
20:43 - copy now that copying process takes time
20:46 - it makes your application slower it
20:48 - takes your computer resources especially
20:51 - if you're copying a list of elements and
20:54 - even more if you're copying a big list
20:57 - of elements
20:58 - so in order to avoid that what we can do
21:01 - is we can pass the original like we are
21:04 - doing here and we do that with the help
21:06 - of this little end symbol like this and
21:10 - in this case we are passing the original
21:13 - so whatever this function here does it
21:15 - will do it on the original itself now
21:19 - here we are in danger that this function
21:22 - will change the original but it should
21:25 - not do that because the job of this
21:27 - function is simply to display rating so
21:30 - it must not change anything and in order
21:34 - to explicitly forbid this function to
21:37 - change anything what we can do is we can
21:39 - put here const which means hey I am
21:43 - passing the original but I will make it
21:46 - constant which means that you cannot
21:48 - change it but once we do this as you can
21:51 - notice here we get a problem and the
21:54 - reason for this problem is because we
21:56 - are using iterator there is another type
21:59 - that is used in this case and that is
22:02 - const
22:03 - iterator so you simply say hey I'm using
22:07 - constant iterator which means that I
22:09 - will just read the data and I will not
22:11 - change anything so those are small
22:14 - little modifications that we made to
22:16 - this function it does absolutely the
22:18 - same thing as the previous function but
22:21 - it is just more secure so now what we
22:25 - can do is we can invoke this function so
22:27 - I will do that here I will say display
22:32 - ratings and I will pass list of
22:35 - beginners like this okay and then let's
22:39 - also invoke it and pass list of Pros
22:43 - like this and here I will very quickly
22:45 - say see out
22:49 - beginners and then let's put an end line
22:52 - and then before we print Pros let's also
22:56 - say Pros like this okay so let's run our
23:02 - program okay and here are beginners and
23:07 - here are Pros with their rating now
23:10 - there is one small thing that I want to
23:12 - do and that is to remove this s here so
23:16 - I will simply go to my function and here
23:18 - I will remove the S and if I restart the
23:22 - program okay now we don't have any more
23:25 - grammatical errors Okay so this is how
23:28 - you can group beginner players together
23:31 - and pro players together now there are
23:34 - even more improvements that you can do
23:37 - to this code here so that for example
23:40 - your beginners are ordered from the
23:42 - smaller to the bigger rating and also
23:45 - Pro players are ordered from smallest to
23:48 - biggest rating so let's do that next
23:52 - what I will do is I will create a
23:55 - function that will order the players and
23:58 - then I will come back and explain that
24:01 - function so here I have created a
24:04 - function called insert player into
24:06 - ordered list and the job of this
24:09 - function will be to take a rating of a
24:12 - new player and to insert it into a list
24:16 - of already ordered players so the
24:19 - function receives two parameters the
24:23 - first parameter is the rating of a new
24:25 - player and the second parameter is is a
24:28 - list of all of the other players that
24:30 - are ordered by rating and as I said the
24:34 - job is to put that new player in a place
24:37 - where it corresponds so this is what the
24:41 - function does so let's go through this
24:42 - code very quickly so we are using for
24:45 - Loop in order to iterate through this
24:48 - entire list from the beginning until the
24:51 - end and then what we do here is the
24:54 - following we check if the value of each
24:58 - specific iterator is greater than the
25:02 - value that we are trying to add because
25:04 - if it is then we are inserting an
25:07 - element at that position so on real
25:11 - example what this code here will do is
25:13 - the following imagine that you have a
25:16 - list whose elements are 1 two and five
25:20 - and the new element that you want to
25:22 - insert is three so logically three
25:26 - should come between two and five so how
25:28 - this code will behave is as follows so
25:32 - here you start iterating at the
25:34 - beginning which means at the element one
25:37 - and here you check is one greater than
25:40 - three which is the element that you want
25:42 - to insert and the answer is no so you
25:45 - skip this part of the code and then you
25:47 - go to the next element which is two so
25:50 - you check again is two greater than
25:53 - three and the answer is again no so you
25:57 - go go to the next element which is five
26:01 - that is the next element of your list so
26:03 - then you check is five greater than
26:06 - three and the answer is yes so then you
26:08 - execute this code and you say hey into
26:11 - this list here please insert into
26:14 - current position the position of current
26:17 - iterator this new player and then return
26:20 - which means you're done you inserted the
26:23 - player there is nothing else that you
26:25 - should do so simply return from this
26:27 - function now if you iterate through this
26:31 - entire list and you don't find any
26:34 - element in the list which is greater
26:37 - than the element that you are trying to
26:38 - add that means that the element that you
26:41 - are trying to add is the biggest one so
26:44 - then what you will do is at the end you
26:47 - will simply say hey push back push at
26:50 - the end of the list this new element
26:52 - because it is the biggest so it should
26:54 - be at the end so that is how this
26:58 - function here will behave and how it
27:00 - will add new element into a list of
27:04 - already ordered elements and if you are
27:07 - wondering why we are passing this list
27:11 - by reference and we don't have con like
27:13 - we did here the answer is because the
27:16 - job of this function is to change the
27:18 - original because it should add new
27:21 - elements to the original list whereas
27:23 - the job of this function was simply to
27:26 - print the element so this function must
27:28 - not change the elements and this one
27:31 - should change them so that is the reason
27:32 - why we cannot have const here so now if
27:36 - you're wondering where do we invoke this
27:39 - function well let's copy its name and
27:42 - let's go to this code here where we are
27:45 - grouping our players into beginners and
27:48 - Pros so here instead of saying
27:50 - beginners. push back what I will do is I
27:54 - will use this newly added method so I
27:56 - will say in insert player into ordered
27:59 - list and here I need to pass two
28:01 - parameters rating of a player that I
28:04 - want to add okay and then I want to pass
28:07 - the name of the list where the player
28:09 - should be added and that is beginners
28:13 - okay and then let's do the same here but
28:16 - this time I will say please insert
28:18 - rating but into the list of Pros like
28:22 - this so if I save these changes and run
28:25 - the program let's see the result
28:30 - okay and as you can see now the players
28:34 - inside each list are ordered from
28:38 - smallest to the biggest and then Pros as
28:41 - well okay so that is how you use lists
28:45 - in real programs and I will pin this
28:47 - code in a comment so that you can copy
28:49 - it if you need it and now I will explain
28:53 - what are main advantages and
28:55 - disadvantages of lists so so that you
28:57 - know when to use lists and when not to
29:00 - use lists so the main advantage of a
29:03 - list is that inserting new elements and
29:05 - deleting existing elements from a list
29:08 - is very fast on the other hand
29:11 - traversing the list and um searching
29:15 - through your data in the list is very
29:17 - slow so you should have this in
29:19 - consideration if you're creating a
29:21 - program that will insert elements and
29:23 - delete elements very often then using a
29:25 - list is a great option but if you're
29:28 - creating a program that will search
29:31 - through the data a lot you want to
29:33 - perform a lot of searching operations
29:35 - then using list is not a good option you
29:39 - can imagine a list as a group of friends
29:41 - that are on the playground and they are
29:44 - holding each other's hand so each friend
29:47 - represents a node in the list and each
29:50 - friend holds the hand of the person who
29:52 - is in front of him and also of the
29:54 - person who is behind him the same way
29:56 - that nodes have a pointer to the node
29:59 - that is before them and the node that is
30:01 - after them so if you want to become part
30:04 - of that list you would simply come
30:06 - between two friends and you would
30:08 - separate them and take their hands so
30:10 - with your left arm you are holding the
30:12 - friend in front of you and with your
30:14 - right arm you are holding the friend
30:15 - that is after you and then if you want
30:18 - to leave you just leave and the two
30:20 - friends that you are holding they take
30:22 - each other's hand and that is how list
30:25 - automatically resizes it will grow or
30:28 - Shrink itself to fit the elements that
30:31 - are inside that list and because of that
30:34 - inserting elements and removing elements
30:36 - from the list is very fast on the other
30:39 - hand searching through the list is very
30:41 - slow because let's imagine that you want
30:44 - to find your friend Joe in a list of 100
30:47 - people so what you would have to do is
30:49 - you would have to start at the beginning
30:51 - and you would have to ask the first
30:53 - person hey what is your name so he tells
30:56 - you your name and he is not Joe so then
30:58 - the only thing that he can tell you is
31:00 - where is the next friend so then you go
31:03 - to the next friend and you ask for the
31:05 - name again and if that person is also
31:08 - not Joe the only thing that person can
31:10 - tell you is where is the third person
31:13 - and so you would have to visit each
31:16 - single person in order to find Joe and
31:19 - if Joe is the last person in that list
31:22 - then you would simply have to Traverse
31:24 - the entire list in order to find Joe and
31:28 - all of these friends all of these people
31:30 - are scattered randomly in your memory
31:33 - and they are just connected by these
31:35 - links so the first person knows where
31:38 - the second person is the second person
31:40 - knows where is the first person and the
31:42 - third person and then the third person
31:44 - knows where is the second person and the
31:46 - fourth person and so on so again if Joe
31:50 - is the last you would have to go through
31:52 - the entire list in order to find Joe and
31:55 - because of that searching through the
31:56 - list list is very very slow now there is
32:00 - another type of container which is very
32:02 - fast for searching elements but it is
32:05 - also very slow for adding new elements
32:07 - and that is Vector now I have a separate
32:10 - video where I explain everything that
32:12 - you need to know about Vector so I will
32:14 - put it here and also in the description
32:17 - so you can watch that video next after
32:19 - this one so to understand why Vector is
32:22 - very fast for searching but also very
32:25 - slow for adding and removing elements
32:28 - you can imagine a vector as a classroom
32:31 - now this classroom has a limited number
32:34 - of places let's say that it is a
32:36 - classroom for 20 students and each Place
32:40 - each student has an index and these
32:43 - indexes start from zero so 0 1 2 3 4 5
32:47 - and so on if it is a classroom for 20
32:49 - students then indexes go from 0 to 19
32:53 - and if you want to find Joe you already
32:57 - already know what is the index of Joe
32:59 - what is the place where Joe sits so you
33:02 - would simply refer to Joe with his index
33:05 - and because of that searching elements
33:08 - will be very easy but if you want to add
33:11 - new elements if you want to add new
33:12 - students what you would have to do is
33:14 - you would have to go and find a bigger
33:17 - classroom where you can put more
33:19 - students and then you would have to
33:21 - reallocate all of the existing students
33:24 - and then you would have a few more
33:26 - places left to put new students the same
33:29 - way if you are removing students then
33:31 - you would have to find a smaller
33:33 - classroom because you don't want to
33:34 - waste space so you find smaller
33:36 - classroom you reallocate all of your
33:39 - students so that they fit that smaller
33:41 - classroom if some students were removed
33:43 - of course so because of that adding new
33:47 - students adding new elements to vector
33:49 - and removing elements from Vector is
33:52 - actually very slow because each time you
33:54 - have to reallocate all of the exist
33:56 - existing students into either bigger or
34:00 - smaller vector and because of that if
34:02 - you are going to perform a lot of
34:04 - searching operations but not very much
34:07 - adding and deleting then you would use a
34:10 - vector but if you're going to perform a
34:12 - lot of adding and removing but you will
34:15 - not be searching a lot then you would
34:17 - use a list so I hope this video was
34:20 - helpful if you have any questions you
34:22 - can put them in the comment section and
34:24 - I will try to reply as many as possible
34:26 - or create a new video in the future to
34:29 - reply to your questions um also if you
34:32 - want to learn practical programming and
34:34 - if you want to see how all of these
34:36 - different types of containers different
34:37 - types of data structures and algorithms
34:40 - work together in order to create real
34:43 - applications then I will leave a link to
34:46 - my practical programming course in the
34:47 - description you can use it in order to
34:49 - join the course and learn how to create
34:52 - real applications and get career ready
34:54 - skills and as I said we currently have a
34:58 - special discount that you can use in
34:59 - order to save some money so if you're
35:02 - decided and if you want to learn
35:04 - programming so that you can finally
35:06 - start creating applications that you
35:08 - want and stop watching programming
35:10 - tutorials and programming lessons then
35:13 - definitely click the link in the
35:14 - description and I will see you in my
35:16 - course in a minute so thank you very
35:19 - much for watching and I'll see you in
35:21 - another video bye

Cleaned transcript:

hi guys and welcome to my channel in this video we are going to talk about STL containers more specifically about list container because it is one of the most important and most commonly used types of containers in programming so in this video you will learn what is list how to use it in your programs what are its advantages and disadvantages so that you know when to use it and when not to use it and also I'm going to show you a real world example of how lists are used in programming so in this video we will also build that real example of player matchmaking in some popular games like fortnite war zone pubg and so on so we will see all of that in this video and before we start I have something very important to tell you so if you're watching programming tutorials and lessons but you struggle to apply that knowledge and you don't know how to use that knowledge in order to build real world applications that can be used in everyday life then I have a solution for you so if you enjoy my YouTube videos and if they help you then you will be more than happy to know that I also have a practical programming course where I will teach you all of the skills that you need in order to build those applications that you want in this course you will learn transferable skills that you can apply across all programming languages you will get the experience of working on real world projects solving real problems implementing functionalities fixing bugs optimizing your code there will be a lot of exercises for you to practice and you will also have a lot of fun we have a great supportive Community where we all hang out and collaborate together and it was very important for me to create this community because I know that learning programming can be quite scary especially if you are alone you can often feel lost and confused so in this case you always have someone to help you you can always ask a question and someone will jump in and offer you help very very fast fast so this way you can progress in the most optimal way so if you want to learn practical programming and get career ready skills then this course is the only one that you will need because everything is on one place step by step from beginner to expert and currently there is even a special discount that you can use in order to save money so if you decide that you want to learn programming and start with my practical programming course then click the link in the description and I will see you in a minute so with that being said let's continue with the topic of today's video which is STL lists so let's first explain what are containers and you can understand a container as a box in everyday life that you use to store and organize different items for example you might have a box to store shoes or a box for clothes or for makeup for shoes that are out of fashion or a box for tools now I've never actually seen one in my life but it's just an example to help you visualize and if you're wondering how I live without a toolbox I'm cute I get by okay so most likely all of these boxes are different because they serve different purpose and we use them to store and organize different items now the same way in programming we want to store and organize different kinds of data and for that we use containers okay so some of the most commonly used containers in programming are list map Q DQ stack vector and so on and we are going to talk about each one of these in a specific video and in today's video we are learning about list I have already covered custom implementation of a link list in one of my previous videos which I will link here and also put it in the description so if you want to learn how to implement a linked list from scratch then you can watch those videos to get a better understand understanding because in this video we will not do it manually but we will be using a list from STL library and we will see real examples of how you can use lists in your programs so to start working with the list you first need to include it so here you need to say include list like this and now what I can do is I can create a list so let's say that I want to create a list of integers and I will call it my list like this so with this I have created a list where I can store integer numbers and it is called my list now one very important thing that I want you to notice is that I did not specify any size for this list and that is because list is dynamic type of container which means that it will automatically expand when I add new elements and it will shrink when I remove existing elements so if you're wondering how many elements can you add you can add as as many as you want as long as you have free memory in your computer so let's add some elements into our list to see how we can do that there are two methods that are used very often for inserting elements into the list and those are push back and push front and as the name itself implies push back is used to add an element at the end of the list and push front is used to add an element in the beginning of the list so let's see how we can use them you simply say my list do push back and here you provide the element that you want to push at the back of your list okay let's add another one again my list push back and then the element that you want to add let's say 20 okay and then if you want to insert an element at the beginning you use function called push front and here let's add number 30 for example and as I already explained list is dynamic type of contain container which means that you don't have to specify the size it will automatically resize itself so that it can fit all of the elements that you are adding okay so this is how we can insert elements into our list and now we need a way to print our list to print this data to see how our list looks like so let's do that next in order to print the data that is stored in our list what we need to do is we need to iterate through our list so what that means is that we will start at at the beginning of the list and then we will visit each element of the list which is called node so we will visit each node and we will print the value of that node now for that we use iterators and you can understand an iterator as a pointer to a specific node to a specific element of the list and I'm going to create a dedicated video where we will talk about iterators in more detail but for now let's just see how we can use iterators in order to go from the beginning till the end of the list and print each element of our list so let's do that next so what I will do is I will write a for Loop and inside this for Loop we will have an iterator that will start at the beginning of our list and it will go until the end of the list which means that it will visit every element of our list so we will simply print the value of that element so let's initialize our iterator to point at the beginning of the list let's see how we can do that you first say list of in iterator because we are going to use this iterator in order to iterate through the list of this type okay and don't forget these two column signs okay so the name of my iterator will be it and I will initialize this iterator to point at the beginning of my list like this okay so this is where my iterator starts now here I will say that my iterator will iterate until it is not equal to my list. end and then I will say that in each iteration I will simply increment the value of my iterator which means please go to the next node okay so with this for Loop we are creating an iterator that starts at the beginning of the list it goes until the end of the list and in each iteration it increments by one which means that it goes to the next node so now what I can do inside this for Loop is I can simply say see out it and let's add an end line like this now there is something interesting that I want to explain here and that is the fact that it itself is an iterator which means that it points to an address but what we need to print is we need to print the value that is on that address so in order to do that we will dreference this iterator and you dfference it by using this little asteris this star symbol okay so with this we will iterate from the beginning until the end of our list and we will print each element of the list so let's start the program okay and as you can see here are the elements of the list and if you're wondering why are they in this order and not in this order here the reason for that is because we first added 10 at the back of the list and then we added 20 after that so again at the back and then we inserted 30 at the front of the list which means that it will be the first element of the list so that is the reason why elements are in this order and not in this order here so that is how you can print the elements of the list using iterators if you want to know how we can delete an element from our list it's actually very easy to do that for that we use method called erray so let's see how to do it I'll do it here so you say my list do erase and here inside these parentheses you need to provide a pointer to the element that you want to delete so for now we only know how to get a pointer to the beginning of of the list and a pointer to the end of the list so this here will give us the address of the first element and this here will give us the address of the last element so let's say that we want to delete first so I will copy this code here okay so now what this line here will do is it will simply erase the element from the beginning of the list from this list here so now if I run the program let's see what is going to be the result Okay so the element that we pushed at the front was 30 and it was later removed so now we don't see that element inside our list okay so that is how you can delete or erase an element from the list you simply put the name of the list and then you say erase and here you provide a pointer to the element that you want to delete okay all that we have learned so far are basics of lists and you need to know these basics in order to be able to use lists in your real programs so what I want to do now is I want to show you how you would use a list in a real program so let's say that we are building a game now in real life this game would be played by people who are beginners as well as by people who are Pros so in order to make this game realistic and fair you cannot put all of them to play together because Pros will always win and and beginners will never win so what you need to do is you need to write you need to create some sort of matchmaking system that will group beginners together and that will group Pros together and this type of matchmaking system is the one that you would often see in most modern Battle Royale games like pubg fortnite war zone and so on so that is exactly what we are going to make now so let's see how we can make this simple matchmaking system so I will delete this code we will not need it anymore now let's see what we will need so first I will create a list of integers and I will call this list all players like this now what I want to store inside this list will be experiences or ratings of all of the players that are waiting in the lobby of the game which means that they are waiting for us to match them with people of similar experience so that they can play the game now in a realistic scenario here you would not have a list of integers but you would have a list of players that have a lot more characteristics besides just ranking or experience you would have a lot of other characteristics but because we want to make this program simple inside this list I will just store their rating so here I will say that I want to initialize this list and here I will put the experience or the rating of each player so let's say that ratings will go from 1 to 10 okay so the first one will have rating of two okay and then the second one we'll have N9 and then 6 7 3 1 4 8 3 again and then let's say two and N again okay so these are all of the players and these are their respective ratings now what I want to do next is I want to create two lists so the first one will be list of integer and I will call it beginners like this and for now it will be empty list just like this and then I want to create another list of integers and I will call it Pros so now what we need to do is we want to create a matchmaking system that will group all of these players that are waiting to play the game into one of these two lists so beginners will play with beginners and Pros will play with Pros so let's set up some rules let's say that beginners will be all of the people with rating one to five okay so those are beginners and then Pros will be people with rating from six to 10 so so we should group them to play together so let's see how we can do that so what I will do is again I will have to iterate through this entire list of all of the players and we will check what is the rating of each player and then we will put him into one of these two categories so he is either a beginner or a pro so let's see how we can do that we already saw how we can iterate through our list so let's write that code one more time I will say for and then I will create a list of int iterator like this I will call it it and I will initialize it to point at the beginning of this list here okay and we need parentheses here okay and then I will say please iterate the list until you come at the end of the list so all players. end like this and then in each iteration you simply increment by one which means you go to the next node like this okay so here we will put the logic that will push the player into one of these two categories so here we will create a variable of type int call it rating okay and what I want to store inside this variable will be the reference value of our iterator so this is how we access each specific rating in our list because again iterator itself is an address it is a pointer and then when you dreference it you get the value that is stored at that address meaning the rating from this list here okay so when we get the rating what we need to do is we need to check if that rating is greater than or equal to one and at the same time if the rating is less less than or equal to five because if it is that means that we are talking about beginner player so we will put him into beginners list so I will say beginners. pushback okay and here we will put the player with this rating okay and then I will check else if rating is greater than or equal to six and at the same time if rating is less than or equal to 10 in this case I will say Pros do push back and I will push the player with this rating into category of pro players like this so this is how we can group all of our players together so that beginners play with beginners and pros play with Pros so with this we have grouped our players so that beginners are with beginners and Pros are with Pros so now in order to test this code and to see if it works as it should we need a way to display this data we need a way to display this list here and this list here so let's create a function here it will be of return type void and I will call it display ratings so display ratings okay and this function will receive a list of integers as a parameter and I will call it players ratings okay so into this function we will pass beginners or Pros list and the job of this function will be to print the ratings of the list that it receives so what I will do is I will copy this code here and then we will adjust it a little bit so this part I don't need the only part that we need is this for Loop which creates an iterator and it iterates from the beginning of let's say this list here until the end of the same list and in each iteration it increments by one so what we will do here is we will simply print the rating of each player so I will say see out player rating like this and let's print the reference value of our iterator and let's put an end line okay so this is how you can create a function that will print all of the elements of the list now this code here will work but there are some small modifications and optimizations that I want to make and they are regarding this parameter here so in some of my previous videos we talked about different ways to pass parameters to function and we said that one way is to pass by value and another way is to pass by reference if you are passing an element by value then the function will make its own copy and it will work on that copy on the other hand if you're passing an element by reference what you need to do is you need to put this little symbol here this end symbol and in this case you are passing the original which means that whatever this function here does does it will work on the original itself so what is the difference the difference is if you pass a parameter by value that means that the function needs to create its own copy and then it will work on that copy now that copying process takes time it makes your application slower it takes your computer resources especially if you're copying a list of elements and even more if you're copying a big list of elements so in order to avoid that what we can do is we can pass the original like we are doing here and we do that with the help of this little end symbol like this and in this case we are passing the original so whatever this function here does it will do it on the original itself now here we are in danger that this function will change the original but it should not do that because the job of this function is simply to display rating so it must not change anything and in order to explicitly forbid this function to change anything what we can do is we can put here const which means hey I am passing the original but I will make it constant which means that you cannot change it but once we do this as you can notice here we get a problem and the reason for this problem is because we are using iterator there is another type that is used in this case and that is const iterator so you simply say hey I'm using constant iterator which means that I will just read the data and I will not change anything so those are small little modifications that we made to this function it does absolutely the same thing as the previous function but it is just more secure so now what we can do is we can invoke this function so I will do that here I will say display ratings and I will pass list of beginners like this okay and then let's also invoke it and pass list of Pros like this and here I will very quickly say see out beginners and then let's put an end line and then before we print Pros let's also say Pros like this okay so let's run our program okay and here are beginners and here are Pros with their rating now there is one small thing that I want to do and that is to remove this s here so I will simply go to my function and here I will remove the S and if I restart the program okay now we don't have any more grammatical errors Okay so this is how you can group beginner players together and pro players together now there are even more improvements that you can do to this code here so that for example your beginners are ordered from the smaller to the bigger rating and also Pro players are ordered from smallest to biggest rating so let's do that next what I will do is I will create a function that will order the players and then I will come back and explain that function so here I have created a function called insert player into ordered list and the job of this function will be to take a rating of a new player and to insert it into a list of already ordered players so the function receives two parameters the first parameter is the rating of a new player and the second parameter is is a list of all of the other players that are ordered by rating and as I said the job is to put that new player in a place where it corresponds so this is what the function does so let's go through this code very quickly so we are using for Loop in order to iterate through this entire list from the beginning until the end and then what we do here is the following we check if the value of each specific iterator is greater than the value that we are trying to add because if it is then we are inserting an element at that position so on real example what this code here will do is the following imagine that you have a list whose elements are 1 two and five and the new element that you want to insert is three so logically three should come between two and five so how this code will behave is as follows so here you start iterating at the beginning which means at the element one and here you check is one greater than three which is the element that you want to insert and the answer is no so you skip this part of the code and then you go to the next element which is two so you check again is two greater than three and the answer is again no so you go go to the next element which is five that is the next element of your list so then you check is five greater than three and the answer is yes so then you execute this code and you say hey into this list here please insert into current position the position of current iterator this new player and then return which means you're done you inserted the player there is nothing else that you should do so simply return from this function now if you iterate through this entire list and you don't find any element in the list which is greater than the element that you are trying to add that means that the element that you are trying to add is the biggest one so then what you will do is at the end you will simply say hey push back push at the end of the list this new element because it is the biggest so it should be at the end so that is how this function here will behave and how it will add new element into a list of already ordered elements and if you are wondering why we are passing this list by reference and we don't have con like we did here the answer is because the job of this function is to change the original because it should add new elements to the original list whereas the job of this function was simply to print the element so this function must not change the elements and this one should change them so that is the reason why we cannot have const here so now if you're wondering where do we invoke this function well let's copy its name and let's go to this code here where we are grouping our players into beginners and Pros so here instead of saying beginners. push back what I will do is I will use this newly added method so I will say in insert player into ordered list and here I need to pass two parameters rating of a player that I want to add okay and then I want to pass the name of the list where the player should be added and that is beginners okay and then let's do the same here but this time I will say please insert rating but into the list of Pros like this so if I save these changes and run the program let's see the result okay and as you can see now the players inside each list are ordered from smallest to the biggest and then Pros as well okay so that is how you use lists in real programs and I will pin this code in a comment so that you can copy it if you need it and now I will explain what are main advantages and disadvantages of lists so so that you know when to use lists and when not to use lists so the main advantage of a list is that inserting new elements and deleting existing elements from a list is very fast on the other hand traversing the list and um searching through your data in the list is very slow so you should have this in consideration if you're creating a program that will insert elements and delete elements very often then using a list is a great option but if you're creating a program that will search through the data a lot you want to perform a lot of searching operations then using list is not a good option you can imagine a list as a group of friends that are on the playground and they are holding each other's hand so each friend represents a node in the list and each friend holds the hand of the person who is in front of him and also of the person who is behind him the same way that nodes have a pointer to the node that is before them and the node that is after them so if you want to become part of that list you would simply come between two friends and you would separate them and take their hands so with your left arm you are holding the friend in front of you and with your right arm you are holding the friend that is after you and then if you want to leave you just leave and the two friends that you are holding they take each other's hand and that is how list automatically resizes it will grow or Shrink itself to fit the elements that are inside that list and because of that inserting elements and removing elements from the list is very fast on the other hand searching through the list is very slow because let's imagine that you want to find your friend Joe in a list of 100 people so what you would have to do is you would have to start at the beginning and you would have to ask the first person hey what is your name so he tells you your name and he is not Joe so then the only thing that he can tell you is where is the next friend so then you go to the next friend and you ask for the name again and if that person is also not Joe the only thing that person can tell you is where is the third person and so you would have to visit each single person in order to find Joe and if Joe is the last person in that list then you would simply have to Traverse the entire list in order to find Joe and all of these friends all of these people are scattered randomly in your memory and they are just connected by these links so the first person knows where the second person is the second person knows where is the first person and the third person and then the third person knows where is the second person and the fourth person and so on so again if Joe is the last you would have to go through the entire list in order to find Joe and because of that searching through the list list is very very slow now there is another type of container which is very fast for searching elements but it is also very slow for adding new elements and that is Vector now I have a separate video where I explain everything that you need to know about Vector so I will put it here and also in the description so you can watch that video next after this one so to understand why Vector is very fast for searching but also very slow for adding and removing elements you can imagine a vector as a classroom now this classroom has a limited number of places let's say that it is a classroom for 20 students and each Place each student has an index and these indexes start from zero so 0 1 2 3 4 5 and so on if it is a classroom for 20 students then indexes go from 0 to 19 and if you want to find Joe you already already know what is the index of Joe what is the place where Joe sits so you would simply refer to Joe with his index and because of that searching elements will be very easy but if you want to add new elements if you want to add new students what you would have to do is you would have to go and find a bigger classroom where you can put more students and then you would have to reallocate all of the existing students and then you would have a few more places left to put new students the same way if you are removing students then you would have to find a smaller classroom because you don't want to waste space so you find smaller classroom you reallocate all of your students so that they fit that smaller classroom if some students were removed of course so because of that adding new students adding new elements to vector and removing elements from Vector is actually very slow because each time you have to reallocate all of the exist existing students into either bigger or smaller vector and because of that if you are going to perform a lot of searching operations but not very much adding and deleting then you would use a vector but if you're going to perform a lot of adding and removing but you will not be searching a lot then you would use a list so I hope this video was helpful if you have any questions you can put them in the comment section and I will try to reply as many as possible or create a new video in the future to reply to your questions um also if you want to learn practical programming and if you want to see how all of these different types of containers different types of data structures and algorithms work together in order to create real applications then I will leave a link to my practical programming course in the description you can use it in order to join the course and learn how to create real applications and get career ready skills and as I said we currently have a special discount that you can use in order to save some money so if you're decided and if you want to learn programming so that you can finally start creating applications that you want and stop watching programming tutorials and programming lessons then definitely click the link in the description and I will see you in my course in a minute so thank you very much for watching and I'll see you in another video bye
