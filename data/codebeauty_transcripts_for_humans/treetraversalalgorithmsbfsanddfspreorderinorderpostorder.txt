With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video we will talk about
00:04 - different ways to traverse a binary tree
00:06 - and different algorithms so we will
00:09 - discuss depth-first search and
00:11 - breadth-first search algorithms and i
00:13 - will also show you how you can use
00:15 - recursion in order to traverse a tree
00:17 - and since we'll be using visual studio i
00:20 - want to show you a very useful plugin
00:22 - that many senior developers use it is
00:24 - called visual assist and it is used in
00:27 - order to boost your productivity and to
00:29 - help you to write better code faster and
00:32 - also to help you to avoid all those
00:34 - little sneaky errors that are very hard
00:36 - to find and fix
00:38 - you can use it with c c plus and c sharp
00:41 - programming languages and on the screen
00:43 - you can see some of my favorite features
00:46 - of visual assist and how i use it to
00:48 - boost my productivity some of the things
00:50 - that it can help you with is it enhances
00:52 - intellisense so that it behaves like
00:55 - intellisense on steroids and then it has
00:58 - different code suggestions spell
01:00 - checking it is used a lot for
01:03 - refactoring it helps you with navigating
01:05 - and searching through very large
01:07 - projects which is usually very hard it
01:09 - has different code inspection commands
01:11 - and so on so if you are interested to
01:14 - try it out you can use the link in the
01:15 - description and it is a must-have if you
01:18 - plan to make games or work with unreal
01:20 - engine and then if you want to see some
01:22 - of my favorite features of visual assist
01:24 - and how i use it you can check out the
01:26 - video that will be linked here and also
01:29 - in the description so let's start
01:30 - talking about three traversal algorithms
01:33 - here on the screen i have a tree and
01:35 - then in my visual studio i have a code
01:37 - that represents this stream
01:40 - so i wrote this code in the first part
01:43 - of this video which will be linked here
01:45 - and also in the description i'll just
01:47 - show you very quickly what we have
01:49 - written so far and then if you don't
01:51 - understand something make sure to watch
01:53 - part one and then you can come back to
01:55 - this video
01:56 - so here i have a code that represents
01:59 - node structure so here is how one node
02:02 - looks like it has data it has left child
02:05 - and right child and then here is a
02:08 - function used to create a new node and
02:10 - then this code here represents this tree
02:13 - that i have painted and before we start
02:16 - talking about traversing trees and
02:18 - different algorithms to do that i first
02:20 - want you to understand why we need to
02:22 - traverse a tree in the first place so we
02:25 - are using tree traversal because that is
02:27 - the only way to access the data that is
02:30 - stored inside these nodes and to do
02:33 - something with it to manipulate it or do
02:35 - something else that we want to do with
02:37 - that data so there are two types of
02:39 - algorithms that are used to traverse a
02:41 - tree bfs and dfs so breadth first search
02:46 - and depth first search and in this video
02:49 - we are going to focus on depth first
02:51 - search algorithm and then if you want me
02:52 - to make a video about breadth first
02:54 - search
02:55 - let me know in the comments
02:57 - the main difference is that breadth
02:59 - first search algorithm will first search
03:01 - the width of the tree
03:03 - and depth first search algorithm will
03:05 - first search the depth of the tree so
03:08 - here is an example of how breadth first
03:11 - search algorithm works
03:13 - so as you can see breadth first search
03:15 - algorithm prioritizes with search
03:17 - instead of depth search which means that
03:19 - it will first visit this note here and
03:22 - then it will go to the second level
03:25 - and only after all the notes on this
03:27 - second level are visited only then it
03:30 - goes deeper it goes to third level and
03:33 - then again it visits all the nodes on
03:36 - third level and then it goes to fourth
03:39 - level
03:40 - okay so this is how breadth first search
03:42 - algorithm works and then depth first
03:44 - search algorithm works like this so as
03:47 - you can see the order in which these
03:49 - nodes are visited is very different with
03:52 - depth first search because as i said dfs
03:56 - depth first search prioritizes depth
03:59 - over width which means that it will
04:01 - first visit this entire sub-tree so from
04:04 - the top to the leaf to the deepest leaf
04:06 - node
04:07 - and then it will visit this entire
04:09 - sub-tree and then this and this and then
04:12 - it will visit this one and then this and
04:16 - this will be the last one so uh you can
04:18 - clearly see the difference between depth
04:21 - first search and breadth first search
04:23 - algorithms so once again
04:26 - bfs prioritizes with search and dfs
04:30 - prioritizes depth search so in this
04:32 - video we will focus on depth-first
04:34 - search algorithms there are three
04:37 - depth-first search algorithms pre-order
04:40 - in order and post order so let's now
04:44 - explain each one of these and i also
04:46 - want to explain what these data left
04:49 - right labels mean
04:51 - so with pre-order algorithm we first
04:53 - manipulate the data and then we go to
04:56 - the left child and then we go to the
04:58 - right child so let's see how pre-order
05:01 - algorithm works on this tree here
05:05 - so we will start from the root node and
05:08 - we will start this algorithm so it first
05:10 - says please manipulate the data so let's
05:13 - print the data that's number one and
05:16 - then the algorithm says
05:18 - go to the left child so i'm going to
05:21 - this left child here and i restart the
05:24 - algorithm and again the algorithm says
05:28 - please first manipulate the data
05:31 - so i print number two
05:34 - and then it says go to the left child so
05:37 - i'll put l here and i'll go to the left
05:39 - child and restart the algorithm once
05:42 - more so again i manipulate the data so i
05:46 - print number four and then it says go to
05:49 - the left
05:50 - child but there is no left child so i
05:53 - proceed with the algorithm which says
05:55 - now go to the right child so i'll put
05:58 - our symbol here and also notice that
06:01 - there is no right child so the only
06:04 - thing that is remaining to do is to go
06:06 - back to this node here and to continue
06:09 - from where we left so
06:11 - we manipulated the data we went to left
06:13 - child and the algorithm here says that
06:16 - the only thing remaining to do is to go
06:17 - to the right child so
06:19 - i put
06:20 - r here and we go to the right child
06:22 - which is this note here and we start the
06:26 - algorithm once more so
06:28 - data
06:29 - which means that i will print number
06:31 - five and then visit the left child which
06:35 - means this child here and the algorithm
06:37 - starts once more so data
06:41 - again i print number nine and then i try
06:44 - to visit the left child there is no left
06:46 - child i try to visit
06:48 - the right child there is no right child
06:50 - as well so i go back and here i try to
06:55 - visit the right child but there is no
06:57 - right child so again i go back to this
07:00 - note here and then i go back to this
07:02 - note here and here we said data left so
07:06 - we are remaining with r
07:08 - which means visit the right child so i
07:11 - go here
07:12 - and here again i start the algorithm so
07:15 - please manipulate the data
07:18 - so print number three and then go to the
07:21 - left child which is this node here and
07:24 - again
07:25 - print the data so i put number six
07:29 - and then i visit the left child there is
07:32 - no left child i visit the right child
07:34 - and there is no right child so i go back
07:37 - to this note here
07:39 - and here data left so now i do
07:43 - write which means that i visit this node
07:46 - here and here i also do data which means
07:49 - that i print number
07:52 - seven and then i do
07:53 - left which means that we visit this node
07:56 - here and again i need to print the data
08:00 - which means i need to print number
08:02 - 15 and then i need to visit the left
08:05 - child and the right child and since
08:08 - there is no left child or right child i
08:11 - go back and here data left
08:14 - right but there is also no right child
08:17 - so i go back and then back and we have
08:20 - successfully traversed a tree with
08:22 - pre-order algorithm so this is visual
08:26 - representation of pre-order algorithm
08:28 - and this is how you can print all the
08:31 - numbers of this tree with the help of
08:33 - pre-order algorithm now let's see how
08:36 - this looks like in code so here is how
08:39 - print tree function looks like with
08:41 - pre-order algorithm
08:44 - so here is the function to print a tree
08:47 - and i'm going to explain every single
08:49 - line but first i want you to focus on
08:51 - this part here so as this pre-order
08:54 - algorithm says we first need to
08:57 - manipulate the data so we first print
08:59 - the data and then we visit the left
09:02 - child and then we visit the right child
09:05 - so that is the algorithm and then we
09:08 - also have this condition here which is
09:11 - called base condition and it will be
09:13 - used in order to stop the execution of
09:16 - this function another thing that i want
09:18 - you to notice is that this function here
09:21 - is a recursive function now a recursive
09:24 - function is a special type of function
09:26 - that invokes itself so
09:29 - inside the definition of that function
09:32 - there is an invocation of the same
09:35 - function so it continues to execute and
09:37 - invoke itself and then execute and
09:39 - invoke itself and so on until a certain
09:42 - condition is met and that condition is
09:45 - called base case and that condition will
09:48 - stop the further execution and invoking
09:51 - of that function now if you are not
09:54 - familiar with recursive functions i
09:56 - recommend you to watch this video it is
09:58 - beginner friendly and you can learn
10:00 - everything that you need to know about
10:02 - recursive functions in order to
10:04 - understand this code here
10:06 - and in that video you also asked me what
10:09 - is real purpose of recursive functions
10:11 - and when are they used in programming so
10:14 - this is one of the most common uses of
10:16 - recursive functions they are used in
10:19 - order to traverse trees so basically
10:22 - what is happening here is this same
10:24 - algorithm so let's go line by line and
10:27 - explain how this code is executed
10:31 - so we start from this
10:33 - root node here that node is passed as a
10:36 - parameter to this function and then the
10:39 - first line says please check is the root
10:42 - equal to null ptr the answer is no it is
10:45 - one so we proceed we don't return from
10:47 - this function and then the second line
10:50 - says now you need to manipulate the data
10:52 - so print the data so we do this part
10:55 - here
10:56 - okay and then we go to the next line and
10:59 - the next line says now you need to go to
11:02 - the left child so we do this part here
11:05 - and we go to the left child so we invoke
11:08 - the same function but but this time we
11:11 - are passing
11:12 - here number two so again we are entering
11:16 - in the same function and again we are
11:18 - asking is the root node equal to null
11:21 - ptr and the answer is no the root node
11:24 - this time is equal to two so we proceed
11:27 - from this base case and we go to this
11:28 - line here which says now you need to
11:31 - print the data so we do this part here
11:36 - and then we proceed with the next line
11:38 - which says now you need to visit the
11:40 - left child so you need to invoke the
11:42 - same function but for the left child so
11:46 - we do the left part of the algorithm and
11:48 - we visit this
11:50 - child here which means that we invoke
11:53 - this same function and this time we are
11:55 - passing number four as root so again we
11:59 - are asking is root equal to null ptr the
12:02 - answer is no root is four
12:04 - and then we manipulate the data so the d
12:07 - part and then we need to print the left
12:10 - child so
12:12 - we are invoking the same function and we
12:14 - are passing the left child so this part
12:17 - here but this time when we are passing
12:20 - parameter to this function since we
12:22 - don't have a left child this root node
12:25 - will be equal to null so when we enter
12:28 - to the function and when we check this
12:30 - condition is root equal to null ptr the
12:33 - answer will be yes because there is no
12:35 - left child so now we need to return from
12:38 - this function and go back so we are
12:41 - continuing from here which means that we
12:43 - are continuing from this node and we are
12:47 - still left with this part so now we need
12:50 - to visit the right child
12:53 - okay so once more i'm entering into this
12:55 - function and passing the right child of
12:58 - node four and again there is no right
13:01 - child so once more when we check this
13:04 - condition we will be returned from this
13:07 - function and we will come here and then
13:09 - we will come to the last line which
13:11 - means that we will go again one step
13:13 - back and that is to this node here and
13:17 - to this part here so here is where we
13:20 - left when we were at this node number
13:22 - two so we will continue from this
13:25 - r part which means print tree and this
13:28 - time you need to pass the right child of
13:31 - this node here and the right child is
13:34 - number five so here we are entering into
13:37 - the function and passing node five so
13:40 - when i check is node five equal to null
13:43 - ptr the answer is no
13:46 - so we proceed and we print number five
13:49 - which means that we have manipulated the
13:51 - data and then we need to visit the left
13:54 - child so l part
13:57 - okay and we are visiting this note here
14:00 - since that is the left child
14:02 - and again we are entering into this
14:04 - function and passing number nine we are
14:07 - checking is nine equal to null ptr the
14:10 - answer is no so we go to this part here
14:13 - we print the data and then we visit the
14:16 - left child the left child is null so
14:19 - when we pass null here this condition
14:21 - will return us from the function we will
14:24 - be taken back here and we will proceed
14:26 - with this part which says now you need
14:28 - to print the right child so again when
14:31 - we enter here with no because number
14:33 - nine does not have right child either we
14:36 - will be again returned by this condition
14:38 - here and then we will go back and then
14:40 - back and so on until every single
14:44 - element of this tree is printed so that
14:47 - is how this function here works and
14:50 - prints a tree by using recursion so now
14:53 - the only thing that is left to do is to
14:55 - check if we are going to get the same
14:57 - output with this function
14:59 - as we did here
15:01 - when we manually applied this pre-order
15:05 - algorithm so i will invoke this function
15:08 - at the end of main i will say print tree
15:11 - and i will pass
15:12 - the root node
15:14 - and if i run the program let's see the
15:17 - output
15:18 - okay so it's 1 2 4 and here is 1 2 4 and
15:22 - then 5 9 3 5 9 3
15:25 - 6 7 15. so as you can see our function
15:29 - works as expected
15:31 - so that was an example of pre-order
15:34 - algorithm and now let's see how in order
15:37 - algorithm works so in order algorithm
15:40 - says that we first visit the left child
15:42 - and then we manipulate the data and then
15:44 - we visit the right child so let's apply
15:48 - in order algorithm to this tree here so
15:52 - we start at the root node and the first
15:54 - thing that the algorithm says is visit
15:56 - the left child so we visit this child
15:59 - here
16:00 - and again we restart the algorithm so
16:03 - again the algorithm says visit the left
16:05 - child so we visit this child here
16:08 - and here again we visit the left child
16:11 - and then since there is no left child we
16:14 - proceed with the algorithm so the
16:16 - algorithm says now manipulate the data
16:19 - which means that now we need to print
16:21 - number four
16:22 - and then visit the right child but there
16:25 - is no right child so we go back to this
16:28 - note here and here we continue from
16:30 - where we left so we visited the left
16:32 - child now we need to manipulate the data
16:35 - so we print number
16:37 - two and then we
16:40 - visit the right child which means that
16:42 - we are going to this node here
16:45 - and here we are starting the algorithm
16:47 - again so
16:49 - we visit the left child so we go to this
16:52 - child here and again
16:54 - left
16:55 - data which means that we print number
16:58 - nine
16:59 - and then
17:00 - right but since there is no right child
17:02 - we go back and here we continue so we
17:05 - had left now we need to manipulate the
17:08 - data so we need to print number five
17:12 - okay and then we need to go to right
17:15 - child there is no right child so we go
17:17 - back and here we also finish the entire
17:19 - algorithm so we go back again and here
17:23 - we visited the left child now we need to
17:25 - manipulate the data so now i print
17:28 - number one and then i visit the right
17:32 - child and the right child is this here
17:35 - so here i do
17:37 - left okay which means that i'm visiting
17:40 - this node here and here as well i'm
17:42 - doing left and then data which means
17:46 - print number six
17:48 - and then
17:49 - write
17:50 - there is no write so i go back and here
17:54 - i need to print the data so i print
17:57 - number
17:58 - three and then i visit
18:00 - the right child so i'm going here
18:03 - and here i will say
18:04 - left so i'm visiting this note here
18:08 - and
18:09 - once more left
18:11 - there is no left child so i do
18:13 - data which means that i'm printing
18:16 - number
18:17 - 15 okay and then i try to visit the
18:20 - right child there is no right child so i
18:23 - go back here
18:24 - here i need to print the data okay so i
18:28 - print number seven
18:30 - and then i try to visit the right child
18:33 - there is no right child and with this we
18:36 - have successfully visited all the nodes
18:39 - of this tree with in order algorithm
18:43 - so now the question is how we can
18:45 - translate this in order algorithm to
18:47 - code and apply it to this function here
18:51 - well it's actually very easy
18:53 - this here is pre-order algorithm and if
18:57 - you remember we said that pre-order
18:59 - first prints the data and then visits
19:02 - the left child and then visits the right
19:04 - child and you can see that part here so
19:07 - data left right on the other hand in
19:11 - order algorithm first visits the left
19:13 - child and then data and then right so
19:16 - the only thing that we need to do is we
19:18 - need to move this line here
19:21 - like this so first visit the left child
19:25 - and then manipulate the data and then
19:28 - visit the right child so
19:31 - if i run the program let's see if we are
19:33 - going to get the same output
19:35 - okay so
19:37 - four two nine four two nine five one six
19:40 - five one six and then three fifteen
19:43 - seven three fifteen seven so our code
19:46 - works as expected so at this point i
19:49 - would like to encourage you to try and
19:51 - figure out on your own how post order
19:54 - algorithm works so it first visits the
19:57 - left child and then write child and then
19:59 - it prints the data so i would recommend
20:02 - that you paint and draw the same way
20:04 - that i did here and then create your own
20:07 - output predict the output and then you
20:09 - can adjust this print tree function so
20:12 - that it does
20:13 - left right and then data so that you can
20:16 - check the output that you get here for
20:18 - post order algorithm also i'm going to
20:21 - paste this code in the comment section
20:23 - so that you can use it if you want
20:25 - so thank you very much for watching and
20:27 - if you enjoyed this video please give it
20:29 - a thumbs up because here we are talking
20:31 - about algorithms and then you hitting
20:33 - that like button is very important for
20:35 - the youtube algorithm
20:38 - you can share it with your friends with
20:39 - someone who needs to learn about data
20:41 - structures and algorithms because i know
20:43 - that many students are struggling with
20:45 - these topics
20:47 - so you can be that person who sends them
20:49 - a video that might help them because i
20:51 - really try to explain these topics in a
20:54 - very simple and understandable way so um
20:57 - i hope that these videos are helping you
20:59 - guys so thank you very much for watching
21:02 - and i will see you in some other video
21:04 - bye

Cleaned transcript:

hi guys and welcome to my channel in this video we will talk about different ways to traverse a binary tree and different algorithms so we will discuss depthfirst search and breadthfirst search algorithms and i will also show you how you can use recursion in order to traverse a tree and since we'll be using visual studio i want to show you a very useful plugin that many senior developers use it is called visual assist and it is used in order to boost your productivity and to help you to write better code faster and also to help you to avoid all those little sneaky errors that are very hard to find and fix you can use it with c c plus and c sharp programming languages and on the screen you can see some of my favorite features of visual assist and how i use it to boost my productivity some of the things that it can help you with is it enhances intellisense so that it behaves like intellisense on steroids and then it has different code suggestions spell checking it is used a lot for refactoring it helps you with navigating and searching through very large projects which is usually very hard it has different code inspection commands and so on so if you are interested to try it out you can use the link in the description and it is a musthave if you plan to make games or work with unreal engine and then if you want to see some of my favorite features of visual assist and how i use it you can check out the video that will be linked here and also in the description so let's start talking about three traversal algorithms here on the screen i have a tree and then in my visual studio i have a code that represents this stream so i wrote this code in the first part of this video which will be linked here and also in the description i'll just show you very quickly what we have written so far and then if you don't understand something make sure to watch part one and then you can come back to this video so here i have a code that represents node structure so here is how one node looks like it has data it has left child and right child and then here is a function used to create a new node and then this code here represents this tree that i have painted and before we start talking about traversing trees and different algorithms to do that i first want you to understand why we need to traverse a tree in the first place so we are using tree traversal because that is the only way to access the data that is stored inside these nodes and to do something with it to manipulate it or do something else that we want to do with that data so there are two types of algorithms that are used to traverse a tree bfs and dfs so breadth first search and depth first search and in this video we are going to focus on depth first search algorithm and then if you want me to make a video about breadth first search let me know in the comments the main difference is that breadth first search algorithm will first search the width of the tree and depth first search algorithm will first search the depth of the tree so here is an example of how breadth first search algorithm works so as you can see breadth first search algorithm prioritizes with search instead of depth search which means that it will first visit this note here and then it will go to the second level and only after all the notes on this second level are visited only then it goes deeper it goes to third level and then again it visits all the nodes on third level and then it goes to fourth level okay so this is how breadth first search algorithm works and then depth first search algorithm works like this so as you can see the order in which these nodes are visited is very different with depth first search because as i said dfs depth first search prioritizes depth over width which means that it will first visit this entire subtree so from the top to the leaf to the deepest leaf node and then it will visit this entire subtree and then this and this and then it will visit this one and then this and this will be the last one so uh you can clearly see the difference between depth first search and breadth first search algorithms so once again bfs prioritizes with search and dfs prioritizes depth search so in this video we will focus on depthfirst search algorithms there are three depthfirst search algorithms preorder in order and post order so let's now explain each one of these and i also want to explain what these data left right labels mean so with preorder algorithm we first manipulate the data and then we go to the left child and then we go to the right child so let's see how preorder algorithm works on this tree here so we will start from the root node and we will start this algorithm so it first says please manipulate the data so let's print the data that's number one and then the algorithm says go to the left child so i'm going to this left child here and i restart the algorithm and again the algorithm says please first manipulate the data so i print number two and then it says go to the left child so i'll put l here and i'll go to the left child and restart the algorithm once more so again i manipulate the data so i print number four and then it says go to the left child but there is no left child so i proceed with the algorithm which says now go to the right child so i'll put our symbol here and also notice that there is no right child so the only thing that is remaining to do is to go back to this node here and to continue from where we left so we manipulated the data we went to left child and the algorithm here says that the only thing remaining to do is to go to the right child so i put r here and we go to the right child which is this note here and we start the algorithm once more so data which means that i will print number five and then visit the left child which means this child here and the algorithm starts once more so data again i print number nine and then i try to visit the left child there is no left child i try to visit the right child there is no right child as well so i go back and here i try to visit the right child but there is no right child so again i go back to this note here and then i go back to this note here and here we said data left so we are remaining with r which means visit the right child so i go here and here again i start the algorithm so please manipulate the data so print number three and then go to the left child which is this node here and again print the data so i put number six and then i visit the left child there is no left child i visit the right child and there is no right child so i go back to this note here and here data left so now i do write which means that i visit this node here and here i also do data which means that i print number seven and then i do left which means that we visit this node here and again i need to print the data which means i need to print number 15 and then i need to visit the left child and the right child and since there is no left child or right child i go back and here data left right but there is also no right child so i go back and then back and we have successfully traversed a tree with preorder algorithm so this is visual representation of preorder algorithm and this is how you can print all the numbers of this tree with the help of preorder algorithm now let's see how this looks like in code so here is how print tree function looks like with preorder algorithm so here is the function to print a tree and i'm going to explain every single line but first i want you to focus on this part here so as this preorder algorithm says we first need to manipulate the data so we first print the data and then we visit the left child and then we visit the right child so that is the algorithm and then we also have this condition here which is called base condition and it will be used in order to stop the execution of this function another thing that i want you to notice is that this function here is a recursive function now a recursive function is a special type of function that invokes itself so inside the definition of that function there is an invocation of the same function so it continues to execute and invoke itself and then execute and invoke itself and so on until a certain condition is met and that condition is called base case and that condition will stop the further execution and invoking of that function now if you are not familiar with recursive functions i recommend you to watch this video it is beginner friendly and you can learn everything that you need to know about recursive functions in order to understand this code here and in that video you also asked me what is real purpose of recursive functions and when are they used in programming so this is one of the most common uses of recursive functions they are used in order to traverse trees so basically what is happening here is this same algorithm so let's go line by line and explain how this code is executed so we start from this root node here that node is passed as a parameter to this function and then the first line says please check is the root equal to null ptr the answer is no it is one so we proceed we don't return from this function and then the second line says now you need to manipulate the data so print the data so we do this part here okay and then we go to the next line and the next line says now you need to go to the left child so we do this part here and we go to the left child so we invoke the same function but but this time we are passing here number two so again we are entering in the same function and again we are asking is the root node equal to null ptr and the answer is no the root node this time is equal to two so we proceed from this base case and we go to this line here which says now you need to print the data so we do this part here and then we proceed with the next line which says now you need to visit the left child so you need to invoke the same function but for the left child so we do the left part of the algorithm and we visit this child here which means that we invoke this same function and this time we are passing number four as root so again we are asking is root equal to null ptr the answer is no root is four and then we manipulate the data so the d part and then we need to print the left child so we are invoking the same function and we are passing the left child so this part here but this time when we are passing parameter to this function since we don't have a left child this root node will be equal to null so when we enter to the function and when we check this condition is root equal to null ptr the answer will be yes because there is no left child so now we need to return from this function and go back so we are continuing from here which means that we are continuing from this node and we are still left with this part so now we need to visit the right child okay so once more i'm entering into this function and passing the right child of node four and again there is no right child so once more when we check this condition we will be returned from this function and we will come here and then we will come to the last line which means that we will go again one step back and that is to this node here and to this part here so here is where we left when we were at this node number two so we will continue from this r part which means print tree and this time you need to pass the right child of this node here and the right child is number five so here we are entering into the function and passing node five so when i check is node five equal to null ptr the answer is no so we proceed and we print number five which means that we have manipulated the data and then we need to visit the left child so l part okay and we are visiting this note here since that is the left child and again we are entering into this function and passing number nine we are checking is nine equal to null ptr the answer is no so we go to this part here we print the data and then we visit the left child the left child is null so when we pass null here this condition will return us from the function we will be taken back here and we will proceed with this part which says now you need to print the right child so again when we enter here with no because number nine does not have right child either we will be again returned by this condition here and then we will go back and then back and so on until every single element of this tree is printed so that is how this function here works and prints a tree by using recursion so now the only thing that is left to do is to check if we are going to get the same output with this function as we did here when we manually applied this preorder algorithm so i will invoke this function at the end of main i will say print tree and i will pass the root node and if i run the program let's see the output okay so it's 1 2 4 and here is 1 2 4 and then 5 9 3 5 9 3 6 7 15. so as you can see our function works as expected so that was an example of preorder algorithm and now let's see how in order algorithm works so in order algorithm says that we first visit the left child and then we manipulate the data and then we visit the right child so let's apply in order algorithm to this tree here so we start at the root node and the first thing that the algorithm says is visit the left child so we visit this child here and again we restart the algorithm so again the algorithm says visit the left child so we visit this child here and here again we visit the left child and then since there is no left child we proceed with the algorithm so the algorithm says now manipulate the data which means that now we need to print number four and then visit the right child but there is no right child so we go back to this note here and here we continue from where we left so we visited the left child now we need to manipulate the data so we print number two and then we visit the right child which means that we are going to this node here and here we are starting the algorithm again so we visit the left child so we go to this child here and again left data which means that we print number nine and then right but since there is no right child we go back and here we continue so we had left now we need to manipulate the data so we need to print number five okay and then we need to go to right child there is no right child so we go back and here we also finish the entire algorithm so we go back again and here we visited the left child now we need to manipulate the data so now i print number one and then i visit the right child and the right child is this here so here i do left okay which means that i'm visiting this node here and here as well i'm doing left and then data which means print number six and then write there is no write so i go back and here i need to print the data so i print number three and then i visit the right child so i'm going here and here i will say left so i'm visiting this note here and once more left there is no left child so i do data which means that i'm printing number 15 okay and then i try to visit the right child there is no right child so i go back here here i need to print the data okay so i print number seven and then i try to visit the right child there is no right child and with this we have successfully visited all the nodes of this tree with in order algorithm so now the question is how we can translate this in order algorithm to code and apply it to this function here well it's actually very easy this here is preorder algorithm and if you remember we said that preorder first prints the data and then visits the left child and then visits the right child and you can see that part here so data left right on the other hand in order algorithm first visits the left child and then data and then right so the only thing that we need to do is we need to move this line here like this so first visit the left child and then manipulate the data and then visit the right child so if i run the program let's see if we are going to get the same output okay so four two nine four two nine five one six five one six and then three fifteen seven three fifteen seven so our code works as expected so at this point i would like to encourage you to try and figure out on your own how post order algorithm works so it first visits the left child and then write child and then it prints the data so i would recommend that you paint and draw the same way that i did here and then create your own output predict the output and then you can adjust this print tree function so that it does left right and then data so that you can check the output that you get here for post order algorithm also i'm going to paste this code in the comment section so that you can use it if you want so thank you very much for watching and if you enjoyed this video please give it a thumbs up because here we are talking about algorithms and then you hitting that like button is very important for the youtube algorithm you can share it with your friends with someone who needs to learn about data structures and algorithms because i know that many students are struggling with these topics so you can be that person who sends them a video that might help them because i really try to explain these topics in a very simple and understandable way so um i hope that these videos are helping you guys so thank you very much for watching and i will see you in some other video bye
