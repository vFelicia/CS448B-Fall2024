With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about stack
00:04 - data structure so in this video you will
00:06 - learn what is stack what is it used for
00:09 - and how to work with stack in c plus
00:11 - programming language so after watching
00:14 - this video you will understand stack
00:16 - data structure and you will feel very
00:18 - comfortable working with it
00:20 - so what is stack stack is type of data
00:23 - collection which uses lifo technique in
00:26 - order to store elements and lifo stands
00:29 - for last in first out and in order to
00:33 - explain this imagine your stack as stack
00:36 - of plates now if you want to add a plate
00:39 - to this stack you are going to add it on
00:41 - top and then if you want to take a plate
00:43 - out you will take the one from the top
00:45 - so the last plate that was added is
00:48 - going to be the first one that you will
00:49 - take out so that is what last in first
00:53 - out means and then another synonym for
00:56 - lifo is fillo which means first in last
01:00 - out so the first element that is at the
01:03 - bottom of your stack is going to be the
01:05 - last one that you will take out because
01:08 - in order to access it and in order to
01:10 - take it out you first need to take out
01:12 - all of the elements that are on top of
01:14 - it so that is another synonym for lifo
01:18 - and then you will also hear some people
01:20 - say last come first served and this last
01:24 - come first served principle is not
01:26 - exactly fair way to access your data but
01:29 - there are situations where this can be
01:31 - useful and the example of this is for
01:34 - example those undo and redo options that
01:37 - you have on your word document or on
01:39 - your excel or even visual studio so i'm
01:42 - going to show you how that works in
01:44 - visual studio for example if i type out
01:47 - c out
01:48 - hello
01:50 - like this and if i copy this line of
01:53 - code let's say four times now if i click
01:56 - on this undo option the first line that
02:00 - is going to be removed is going to be
02:01 - the last one that we added and that is
02:03 - this line here so if i click undo the
02:07 - first one to be removed is the last one
02:09 - that was added and then again and again
02:13 - and then this first line it's even
02:14 - removing almost letter by letter so that
02:17 - is an example of stack and then another
02:20 - example are those back and forward
02:23 - buttons on your browser so you can test
02:25 - that after watching this video it'll do
02:27 - it right now but if you click on that
02:29 - back button of your browser it is going
02:31 - to navigate you one step back so it's
02:34 - going to take one element one page out
02:37 - so it is going to take your current page
02:39 - out and navigate you to the page that
02:40 - you were previously on so that is
02:44 - exactly how stack works last in first
02:48 - out or last come first served
02:51 - now i want to explain five most
02:53 - important functions that are associated
02:55 - with stack and that you need to
02:57 - understand in order to work with stack
02:59 - collections and those five functions are
03:02 - following the function that is going to
03:04 - tell you if your stack is empty or not
03:07 - that function is called empty and then
03:10 - the function that will tell you the size
03:12 - of your stack so how many elements your
03:14 - stack contains and that function is
03:16 - called size and then the function that
03:19 - will give you the top element of your
03:21 - stack and that function is called top
03:24 - and then the function to add an element
03:27 - into the stack it's called push and then
03:29 - the function to remove an element from
03:32 - the stack and that function is called
03:34 - pop so empty size top push and pop and
03:39 - here i want to demonstrate how you can
03:42 - use those five functions in order to
03:44 - work with stl stack
03:46 - in order to use stack collection you
03:49 - first need to include stack here so i
03:52 - will say
03:53 - include
03:54 - stack like this and now i can create
03:58 - stacks in my program so i can say stack
04:01 - and then here in these angle brackets i
04:04 - will define the type of elements that i
04:06 - will store in my stack so i want to
04:09 - store integer numbers inside my stack so
04:11 - i will say that it is going to be stack
04:13 - of
04:14 - integers like this and i will call it
04:17 - numbers
04:18 - stack
04:20 - okay and let me very quickly type out
04:22 - those five functions that i mentioned
04:24 - that we will use in order to work with
04:26 - this stack here
04:28 - so here are those five functions
04:31 - so the function called empty size push
04:35 - pop and top and the first one that i
04:37 - want to show you will be this empty
04:39 - function and we already said that this
04:42 - function here is used to check if the
04:44 - stack is empty or not so
04:47 - let's use it here let's say if
04:51 - numbers
04:53 - stack
04:54 - dot
04:55 - empty
04:57 - so i am invoking this empty function on
05:00 - my stack and here i will say if this
05:03 - function here returns true i will write
05:05 - out that my stack is empty so i will say
05:09 - stack is
05:11 - empty
05:12 - like this
05:13 - okay stack with k
05:15 - and then
05:16 - else so if this function here returns
05:19 - false i will write out something else so
05:21 - i will say that stack is not
05:25 - empty
05:26 - now this is newly created stack so we
05:29 - just created it and it is expected for
05:31 - it to be empty but let's check that out
05:33 - in our console
05:35 - okay and as you can see it says that
05:37 - stack is empty so that is how this empty
05:41 - function works and then there is another
05:43 - function that you can use in order to
05:45 - check the size of your stack and that is
05:48 - this function here so you can say here
05:51 - c out
05:53 - stack
05:54 - size
05:55 - is
05:57 - and then let's
05:58 - use our numbers stack
06:01 - here and let's invoke size function on
06:04 - it
06:04 - okay and i'm just going to add couple
06:06 - end lines so that our output is nicely
06:10 - formatted like this so i'm going to add
06:12 - it here
06:13 - and then here and here as well
06:17 - okay so now if i run my program
06:20 - let's check out the output and here it
06:22 - says that stack is empty and then it
06:24 - also says that stack size is zero which
06:27 - means that our stack this stack here
06:29 - contains zero elements
06:32 - so that is how empty and size functions
06:36 - work and then in order to add elements
06:39 - in your stack we use push functions so
06:42 - let's demonstrate how this function here
06:44 - works and then let's check out the
06:46 - output that these two functions will
06:48 - give us after adding an element into our
06:51 - stack
06:52 - so here i will say number stack
06:55 - dot
06:56 - push
06:57 - okay
06:58 - and this push function here receives one
07:01 - parameter and that parameter will be the
07:04 - element that we want to add at the top
07:06 - of our stack now considering that this
07:09 - number stack is stack of integers that
07:12 - means that here we need to push an
07:14 - integer into our stack so here i will
07:17 - put an integer number for example number
07:20 - one
07:21 - like this so i have just inserted an
07:24 - element into my stack using this push
07:27 - function here and this is the element
07:29 - that i want to push in my stack so if i
07:32 - run this program now
07:35 - as you can see now it says that stack is
07:37 - not empty and the size of this stack is
07:40 - one element so this stack contains one
07:43 - element now
07:45 - if i want to add more elements i will
07:47 - use again this push function and let's
07:49 - say for example that i want to add
07:51 - element number two an element that is
07:53 - number three and then again if i run
07:57 - this program
07:58 - it says that stack is not empty and the
08:00 - size of the stack is three elements okay
08:03 - so that is how this push function works
08:07 - and then the next one that i want to
08:08 - show you will be this pop function now
08:12 - the same way that this push function
08:13 - adds an element at the top of the stack
08:16 - this pop function removes an element
08:18 - from the top of your stack so if i say
08:21 - for example number stack
08:24 - dot pop
08:26 - it is expected that this pop function
08:29 - will remove the first element from the
08:31 - top of our stack so if i run my program
08:34 - now
08:35 - as you can see now it says that size of
08:37 - the stack is two elements so we added
08:41 - three elements and then we removed one
08:43 - so that is why the size of our stack is
08:46 - two
08:47 - and then if i want to remove all the
08:49 - elements from this stack i will copy
08:51 - this line of code two more times so i
08:53 - added three elements and then i removed
08:56 - three elements so it is expected that
08:59 - our stack is empty again so if i run
09:02 - this program again as you can see it
09:04 - says that stack now is empty and the
09:06 - size of the stack is zero elements
09:10 - okay so that is how these two functions
09:13 - work push adds an element into the stack
09:16 - and then pop removes an element from the
09:19 - top of the stack
09:21 - another very important thing that i want
09:23 - to show you is how you can write out the
09:25 - elements of your stack and there i will
09:28 - demonstrate how this top function works
09:31 - so what i want to do is i want to create
09:34 - a function that is going to be used to
09:36 - write out the elements of the stack
09:39 - so i will create it here
09:41 - it's going to be of return type void and
09:43 - i will call it for example print stack
09:46 - elements
09:51 - like this
09:53 - so print stack elements and then
09:56 - considering that we want to use this
09:58 - function in order to print the elements
10:00 - of this stack here that means that this
10:03 - function needs to receive a parameter
10:06 - which is going to be this stack so it
10:08 - needs to receive
10:10 - a stack
10:11 - of integers and i will call that
10:14 - parameter stack like this
10:17 - okay now what this function here is
10:19 - going to do this function here is going
10:21 - to ask for the top element of the stack
10:25 - and then it is going to write it out and
10:26 - then pop it which means remove it and
10:29 - then it is going to again ask for top
10:31 - element write it out and then pop it
10:34 - again and then it is going to do that
10:36 - for the next and the next and the next
10:38 - while the size of our stack is greater
10:40 - than zero or while our stack is not
10:44 - empty so that is exactly what i am going
10:46 - to write out in c plus code so i will
10:50 - say
10:50 - while
10:52 - like this
10:53 - so while our stack dot
10:56 - empty
10:58 - like this so while our stack is
11:02 - not empty so here you need to add
11:04 - negation okay
11:06 - and then here inside my while function
11:08 - what i want to do is i want to write out
11:11 - the top element of my stack and then pop
11:14 - it which means remove it so i will say c
11:16 - out
11:18 - stack dot
11:19 - top
11:21 - okay
11:22 - let's add and line and then after i have
11:25 - written out the top element of my stack
11:28 - what i want to do is i want to pop it so
11:30 - i will say
11:31 - stack dot
11:33 - pop
11:34 - like this
11:35 - okay so now this function here is going
11:38 - to write out the elements of the stack
11:41 - that has been passed to it
11:43 - okay so in order to test this function
11:46 - here
11:47 - i will comment
11:49 - these lines of code because i don't need
11:51 - it and then i am going to invoke the
11:54 - function which is called print
11:57 - stack
11:58 - elements and that function receives a
12:01 - stack of integers which is going to be
12:03 - this stack here so i will pass it as
12:06 - parameter
12:07 - like this
12:08 - now if i run this function it is
12:10 - expected for our stack to be empty
12:12 - because we added three elements and then
12:15 - we removed three elements so let's check
12:18 - that out
12:19 - okay as you can see there is nothing
12:22 - inside our stack so i am going to remove
12:25 - these three lines of code and then i
12:27 - will test my print stack elements now so
12:30 - after i have added three elements to my
12:32 - stack
12:35 - so
12:36 - here are three elements that our stack
12:38 - contains those are numbers three two and
12:41 - one and now i have a question for you
12:44 - what is going to happen if i say
12:47 - number stack dot pop
12:50 - so the question is which elements are
12:52 - going to remain inside our stack after i
12:55 - have added these three elements and then
12:57 - i removed one element from my stack so
13:00 - pause the video and then write your
13:02 - answer in the comments and then continue
13:04 - watching the video so which elements
13:07 - will remain in this stack here
13:10 - so if i run my program as you can see
13:13 - these are two elements that our stack
13:14 - contains so number one and number two
13:18 - and as you can see number 3 was popped
13:20 - out of our stack which means that it was
13:22 - removed and the reason for that is
13:25 - because stack is litho collection which
13:28 - means last in first out so 3 was last
13:32 - one that was added and it is going to be
13:34 - the first one that will be removed as
13:36 - you can see here
13:38 - okay
13:40 - so that is how you work with stack
13:42 - collections using these five functions
13:45 - empty size push pop and top so i hope
13:49 - that you enjoyed this video if you did
13:51 - give it a thumbs up and then also if you
13:53 - want to learn more about programming and
13:55 - if you want to watch more videos like
13:57 - this one subscribe to my channel and
13:59 - click the bell icon and you will get a
14:01 - notification from me every time that i
14:03 - publish a new video and then also if you
14:06 - have any questions or if you have
14:07 - suggestions for my future videos feel
14:09 - free to leave those in the comments
14:11 - section thank you very much for watching
14:13 - and i will see you in some other video
14:15 - bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to talk about stack data structure so in this video you will learn what is stack what is it used for and how to work with stack in c plus programming language so after watching this video you will understand stack data structure and you will feel very comfortable working with it so what is stack stack is type of data collection which uses lifo technique in order to store elements and lifo stands for last in first out and in order to explain this imagine your stack as stack of plates now if you want to add a plate to this stack you are going to add it on top and then if you want to take a plate out you will take the one from the top so the last plate that was added is going to be the first one that you will take out so that is what last in first out means and then another synonym for lifo is fillo which means first in last out so the first element that is at the bottom of your stack is going to be the last one that you will take out because in order to access it and in order to take it out you first need to take out all of the elements that are on top of it so that is another synonym for lifo and then you will also hear some people say last come first served and this last come first served principle is not exactly fair way to access your data but there are situations where this can be useful and the example of this is for example those undo and redo options that you have on your word document or on your excel or even visual studio so i'm going to show you how that works in visual studio for example if i type out c out hello like this and if i copy this line of code let's say four times now if i click on this undo option the first line that is going to be removed is going to be the last one that we added and that is this line here so if i click undo the first one to be removed is the last one that was added and then again and again and then this first line it's even removing almost letter by letter so that is an example of stack and then another example are those back and forward buttons on your browser so you can test that after watching this video it'll do it right now but if you click on that back button of your browser it is going to navigate you one step back so it's going to take one element one page out so it is going to take your current page out and navigate you to the page that you were previously on so that is exactly how stack works last in first out or last come first served now i want to explain five most important functions that are associated with stack and that you need to understand in order to work with stack collections and those five functions are following the function that is going to tell you if your stack is empty or not that function is called empty and then the function that will tell you the size of your stack so how many elements your stack contains and that function is called size and then the function that will give you the top element of your stack and that function is called top and then the function to add an element into the stack it's called push and then the function to remove an element from the stack and that function is called pop so empty size top push and pop and here i want to demonstrate how you can use those five functions in order to work with stl stack in order to use stack collection you first need to include stack here so i will say include stack like this and now i can create stacks in my program so i can say stack and then here in these angle brackets i will define the type of elements that i will store in my stack so i want to store integer numbers inside my stack so i will say that it is going to be stack of integers like this and i will call it numbers stack okay and let me very quickly type out those five functions that i mentioned that we will use in order to work with this stack here so here are those five functions so the function called empty size push pop and top and the first one that i want to show you will be this empty function and we already said that this function here is used to check if the stack is empty or not so let's use it here let's say if numbers stack dot empty so i am invoking this empty function on my stack and here i will say if this function here returns true i will write out that my stack is empty so i will say stack is empty like this okay stack with k and then else so if this function here returns false i will write out something else so i will say that stack is not empty now this is newly created stack so we just created it and it is expected for it to be empty but let's check that out in our console okay and as you can see it says that stack is empty so that is how this empty function works and then there is another function that you can use in order to check the size of your stack and that is this function here so you can say here c out stack size is and then let's use our numbers stack here and let's invoke size function on it okay and i'm just going to add couple end lines so that our output is nicely formatted like this so i'm going to add it here and then here and here as well okay so now if i run my program let's check out the output and here it says that stack is empty and then it also says that stack size is zero which means that our stack this stack here contains zero elements so that is how empty and size functions work and then in order to add elements in your stack we use push functions so let's demonstrate how this function here works and then let's check out the output that these two functions will give us after adding an element into our stack so here i will say number stack dot push okay and this push function here receives one parameter and that parameter will be the element that we want to add at the top of our stack now considering that this number stack is stack of integers that means that here we need to push an integer into our stack so here i will put an integer number for example number one like this so i have just inserted an element into my stack using this push function here and this is the element that i want to push in my stack so if i run this program now as you can see now it says that stack is not empty and the size of this stack is one element so this stack contains one element now if i want to add more elements i will use again this push function and let's say for example that i want to add element number two an element that is number three and then again if i run this program it says that stack is not empty and the size of the stack is three elements okay so that is how this push function works and then the next one that i want to show you will be this pop function now the same way that this push function adds an element at the top of the stack this pop function removes an element from the top of your stack so if i say for example number stack dot pop it is expected that this pop function will remove the first element from the top of our stack so if i run my program now as you can see now it says that size of the stack is two elements so we added three elements and then we removed one so that is why the size of our stack is two and then if i want to remove all the elements from this stack i will copy this line of code two more times so i added three elements and then i removed three elements so it is expected that our stack is empty again so if i run this program again as you can see it says that stack now is empty and the size of the stack is zero elements okay so that is how these two functions work push adds an element into the stack and then pop removes an element from the top of the stack another very important thing that i want to show you is how you can write out the elements of your stack and there i will demonstrate how this top function works so what i want to do is i want to create a function that is going to be used to write out the elements of the stack so i will create it here it's going to be of return type void and i will call it for example print stack elements like this so print stack elements and then considering that we want to use this function in order to print the elements of this stack here that means that this function needs to receive a parameter which is going to be this stack so it needs to receive a stack of integers and i will call that parameter stack like this okay now what this function here is going to do this function here is going to ask for the top element of the stack and then it is going to write it out and then pop it which means remove it and then it is going to again ask for top element write it out and then pop it again and then it is going to do that for the next and the next and the next while the size of our stack is greater than zero or while our stack is not empty so that is exactly what i am going to write out in c plus code so i will say while like this so while our stack dot empty like this so while our stack is not empty so here you need to add negation okay and then here inside my while function what i want to do is i want to write out the top element of my stack and then pop it which means remove it so i will say c out stack dot top okay let's add and line and then after i have written out the top element of my stack what i want to do is i want to pop it so i will say stack dot pop like this okay so now this function here is going to write out the elements of the stack that has been passed to it okay so in order to test this function here i will comment these lines of code because i don't need it and then i am going to invoke the function which is called print stack elements and that function receives a stack of integers which is going to be this stack here so i will pass it as parameter like this now if i run this function it is expected for our stack to be empty because we added three elements and then we removed three elements so let's check that out okay as you can see there is nothing inside our stack so i am going to remove these three lines of code and then i will test my print stack elements now so after i have added three elements to my stack so here are three elements that our stack contains those are numbers three two and one and now i have a question for you what is going to happen if i say number stack dot pop so the question is which elements are going to remain inside our stack after i have added these three elements and then i removed one element from my stack so pause the video and then write your answer in the comments and then continue watching the video so which elements will remain in this stack here so if i run my program as you can see these are two elements that our stack contains so number one and number two and as you can see number 3 was popped out of our stack which means that it was removed and the reason for that is because stack is litho collection which means last in first out so 3 was last one that was added and it is going to be the first one that will be removed as you can see here okay so that is how you work with stack collections using these five functions empty size push pop and top so i hope that you enjoyed this video if you did give it a thumbs up and then also if you want to learn more about programming and if you want to watch more videos like this one subscribe to my channel and click the bell icon and you will get a notification from me every time that i publish a new video and then also if you have any questions or if you have suggestions for my future videos feel free to leave those in the comments section thank you very much for watching and i will see you in some other video bye
