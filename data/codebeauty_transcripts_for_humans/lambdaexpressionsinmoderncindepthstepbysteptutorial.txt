With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about an
00:04 - important topic in modern c plus and
00:06 - that is lambda expressions also known as
00:09 - lambdas i am pretty sure that you have
00:12 - heard about lambdas before and in this
00:14 - video i'm going to explain everything
00:16 - that you need to know in order to start
00:18 - writing faster and cleaner code with
00:21 - lambdas in modern c plus plus
00:23 - now in this video i'm going to explain
00:25 - the most important concepts that you
00:27 - need to know but since this is a very
00:30 - broad topic and there is a lot to learn
00:32 - if you want to see some additional
00:34 - examples and practice on your own i am
00:36 - going to link a book in the description
00:39 - that you can use to learn about lambdas
00:41 - in modern c plus and the best thing is
00:44 - that it is completely free so make sure
00:46 - to check it out lambda expressions were
00:48 - introduced in modern c plus plus and
00:51 - they are available with c plus plus
00:53 - version 11 and above and the main
00:56 - purpose of lambda expressions is to
00:58 - allow you to write inline anonymous
01:01 - functions so what are inline anonymous
01:03 - functions well if you're familiar with
01:06 - regular functions you know that the main
01:08 - purpose of a function is to allow you to
01:10 - write the code once put it in a function
01:12 - and then whenever you need that code you
01:14 - would just invoke that function so no
01:16 - need to retype the code again
01:18 - now an inline function on the other hand
01:21 - is a function that has very small
01:24 - definition inline functions are usually
01:26 - very simple and they are very often used
01:28 - for small snippets of code that are very
01:32 - simple and they are not going to be
01:34 - reused like regular functions so they
01:37 - are not even worth to be named so that
01:40 - is why i also said that they are
01:42 - anonymous so as i said a lambda is an
01:45 - unnamed function that is not going to be
01:48 - reused like regular functions are
01:50 - lambdas are often used for short small
01:53 - snippets of code that are so simple that
01:56 - they are not even worth to be named they
01:58 - keep your code clean they are easy to
02:00 - read and they are fast to execute and
02:03 - they keep everything in the same place
02:05 - as you will see when i show you the code
02:07 - and also at the end of this video i'm
02:09 - going to show you a couple of tips and
02:10 - tricks that you can do with lambda so
02:12 - make sure to watch the video until the
02:14 - end so i believe that's enough speaking
02:16 - about lambdas now i'm going to show you
02:18 - the code and for writing the code we are
02:20 - going to use c plus builder which is the
02:23 - best id that you can use in order to
02:25 - build c plus user interface applications
02:28 - um so if you are also interested to
02:30 - learn about c plus user interface
02:31 - applications i'm going to link that in
02:33 - the description and i will leave a link
02:35 - that you can use in order to download c
02:37 - plus builder in the description as well
02:39 - so let's create a console application
02:41 - that we will need in order to write our
02:43 - code click on file
02:45 - new other
02:47 - and then console application okay make
02:50 - sure that c plus plus is selected here
02:52 - click ok
02:54 - and here is our code so if i run this
02:57 - program let's see what is going to
02:58 - happen
03:00 - okay let's add couple things
03:03 - so here i'm going to say
03:04 - system
03:06 - pause
03:08 - greater than no
03:10 - okay
03:11 - and then let's add
03:13 - std
03:15 - c out
03:17 - hello
03:18 - world
03:20 - like this
03:22 - okay and then one more thing that i need
03:24 - to do is i need to include
03:27 - iostream so i will say
03:29 - include
03:31 - stream
03:33 - like this
03:35 - and now our code should work so if i run
03:38 - my application again here we have our
03:41 - hello world console application
03:44 - so how does a lambda look like well
03:47 - let's delete this code and i'm going to
03:49 - start with a simple example so what do
03:52 - you need in order to create a lambda
03:54 - first thing that you need are these
03:56 - angled brackets and then parentheses and
03:59 - then you need curly brackets like this
04:02 - so this here is how you create a lambda
04:06 - now i know that there is a lot of
04:07 - brackets so let me explain what each of
04:10 - these is used for so this first pair
04:14 - these angled brackets are called capture
04:17 - claws and i'm going to explain what they
04:18 - are used for later in this video for now
04:21 - let's just put cc here so capture clause
04:26 - now these parentheses are used in order
04:29 - to pass parameters so here you put
04:32 - parameters p
04:34 - okay and then inside these curly
04:37 - brackets you put the definition of your
04:39 - lambda function so let's call it f d
04:43 - function definition okay so what i want
04:46 - to do now is i want to create an example
04:49 - and then we are going to see how we can
04:50 - solve a problem from that example by
04:53 - using lambdas so the first thing that i
04:56 - need is a vector so let's say here
05:01 - include
05:02 - vector
05:04 - like this and then here let's create a
05:07 - vector let's say std vector and let's
05:11 - say that it's going to be vector of
05:13 - integers and i will call it v
05:16 - and i will initialize it so that it has
05:19 - elements of
05:20 - 2 3 7 14 and 23 for example now an
05:25 - interesting thing that i want to do with
05:27 - this vector here is the following
05:29 - in c plus plus there is a very useful
05:32 - header file called algorithm and it
05:34 - contains a lot of functions that are
05:37 - designed to work with ranges of elements
05:40 - like our vector here and one of those
05:43 - functions is for each so let me show you
05:46 - how that works and how we are going to
05:48 - use lambdas with for each function so as
05:52 - i said it is part of algorithm header
05:54 - file so the first thing that we need to
05:56 - do is say
05:57 - include
05:58 - algorithm
06:01 - okay
06:03 - and one of the functions from this
06:04 - header file is called for each so i will
06:07 - say std
06:09 - for each
06:11 - like this
06:12 - and what this for each function should
06:15 - do is it should iterate through this
06:17 - vector here from the beginning until the
06:20 - end so let's specify that let's say for
06:23 - each
06:24 - v dot
06:26 - begin
06:28 - until v dot
06:30 - end
06:31 - okay
06:32 - what i want to do is i want to do
06:35 - something like this so
06:38 - for each element of this vector here
06:41 - from the beginning until the end please
06:44 - do something and let's put semicolon at
06:47 - the end so now i want to specify what
06:50 - this something is so let me very quickly
06:52 - type some code that i want to show you
06:54 - and i want to show you a problem with
06:56 - that code and then we are going to
06:58 - introduce lambdas in order to solve that
07:01 - problem so this is the code that i added
07:04 - i created a structure and inside it i
07:07 - had to override this operator here that
07:09 - receives one parameter and i just print
07:13 - that parameter in the body of this
07:16 - function and i named that something so
07:19 - the same name as this here so what we
07:22 - expect to happen now is that for each
07:26 - element of this vector here from the
07:29 - beginning until the end we invoke this
07:33 - function here so the result should be
07:35 - that all of these elements should be
07:38 - printed in our console so let's run the
07:40 - program
07:42 - okay and we have an error and the error
07:44 - is this part here so let's just comment
07:46 - this this is not valid code this is just
07:49 - for us to remember how a lambda looks
07:51 - like so let's run the program now
07:55 - okay and as i promised here are all of
07:58 - the elements of our vector now the
08:00 - problem that i have with this code here
08:04 - this code is that it's overkill so to
08:08 - create a structure and then override an
08:10 - operator just to be able to print an
08:12 - element into the console is an overkill
08:15 - too much code so what i want to do now
08:17 - is i want to show you how you can solve
08:19 - this same problem by using a lambda
08:21 - expression so we will write much less
08:23 - code is going to be much cleaner and
08:25 - easier to read and understand so let's
08:27 - create our lambda and here is the
08:30 - formula that we will use let's do it
08:32 - here so the first thing is
08:35 - our capture clause and then parentheses
08:38 - for parameters and then curly brackets
08:40 - for function definition so here we have
08:43 - a lot of brackets so what do we put
08:45 - inside these brackets well for now this
08:49 - capture clause is going to stay empty
08:51 - and then inside these parentheses we put
08:54 - parameters and that is going to be this
08:57 - parameter here so int
08:59 - x that goes here and then inside curly
09:03 - brackets we put function definition and
09:05 - that will be this part here so i'll copy
09:08 - it and paste it here okay now
09:12 - what i can do is i can just replace this
09:16 - something with this line of code with
09:19 - our lambda so i'm going to copy it and
09:21 - then paste it here okay and i will
09:24 - comment this part and i will also
09:27 - comment this part so that we can see how
09:30 - our program will run with this lambda
09:33 - function instead of this part here so if
09:37 - i run the program
09:39 - as you can see the behavior is the same
09:42 - with this one line of code as it was
09:45 - with this structure and then overloaded
09:47 - operator and so on so our program works
09:50 - as expected so what that means is that
09:53 - now i can completely remove this code
09:56 - because from now we will not use this
09:59 - approach but we will use lambdas instead
10:03 - so again why would you use this approach
10:06 - here instead of the one that i just
10:07 - deleted well it's cleaner code it's
10:10 - easier to read and it keeps everything
10:12 - in the same place so everything that you
10:15 - need is here in this line of code and in
10:18 - case that you wanted to write and use
10:20 - this function again you would probably
10:22 - retype it anyways because it's very
10:24 - simple it's a very trivial function and
10:27 - if you wanted to reuse this as a
10:29 - function create a function to be able to
10:31 - reuse it it's much more work than
10:33 - benefit so you would have to create a
10:35 - function and then you would have to put
10:37 - it in a header file and you would have
10:39 - to find a place where you are going to
10:40 - put that header file so that it can be
10:43 - accessed by different parts of your
10:44 - application so that your function can be
10:46 - reused and then if that feather header
10:49 - file is going to consist of functions
10:52 - that are like this one what are you
10:54 - going to name it like
10:56 - my favorite two line functions
10:58 - it doesn't really make sense so
11:00 - that is why in this situation lambdas
11:03 - are much better solution so what happens
11:06 - if you wanted to do something else
11:08 - well let's delete this part because i
11:12 - prefer to write my lambda here and then
11:14 - just copy it and paste it here so let's
11:17 - say for example that for each element of
11:19 - this vector you want to print the
11:22 - information if it is even or odd number
11:25 - let's do that part here so here instead
11:28 - of just printing the element i will
11:31 - create
11:32 - an if else expression so i will say if
11:36 - x modulated by 2 is equal to 0
11:39 - that means that the number is even so if
11:43 - it is divisible by 2 that means that the
11:46 - number is even so i will say std
11:49 - c out
11:50 - x
11:52 - is
11:53 - oh is
11:54 - even
11:55 - number
11:56 - like this
11:58 - okay and then i will say
12:01 - else
12:02 - x is
12:04 - odd number like this
12:07 - so if i want to use this lambda inside
12:10 - my for each i will just paste it here
12:13 - like this so capture clause parameters
12:17 - and then the definition of my function
12:20 - which is this part here okay so now you
12:23 - need to comment this part out
12:26 - because we will have a compile time
12:27 - error if we don't and then if i run my
12:30 - program let's see what is going to
12:31 - happen and we have the information that
12:34 - 2 is even 3 is odd 7 is odd 14 is even
12:37 - and then 23 is odd number so that is
12:40 - another example of how you can use
12:42 - lambda expressions something that i
12:44 - promised at the beginning of the video
12:46 - is that i will share some useful tips
12:48 - related to lambda expressions and that
12:51 - is the fact that lambda expressions can
12:53 - be much more powerful than ordinary
12:56 - functions and that is because a lambda
13:00 - expression can have access to variables
13:03 - from its enclosing scope so what does
13:05 - that mean well that means that this
13:09 - lambda here can have access to all the
13:12 - variables from its enclosing scope which
13:14 - is this scope here so all the variables
13:18 - from our main function and at the moment
13:21 - we don't have any variables so let's
13:23 - change that let's create a variable i'll
13:26 - do it here delete this part of the code
13:28 - so let's create a variable of type int
13:31 - and i will call it
13:32 - d and let's assign it the value of three
13:36 - so what i want to do with this variable
13:39 - here is i want to pass it into this
13:43 - lambda and for that i will use this
13:46 - capture clause so i want to capture this
13:49 - variable here into this lambda function
13:53 - and how i will do that well
13:56 - you just say here d
13:58 - very simple so now you can use this d
14:02 - variable inside this lambda here so how
14:06 - are we going to use this d so the reason
14:08 - why i named this variable d is because i
14:11 - want to use it in order to divide my x
14:14 - by that variable so i will say if x
14:17 - modulated by number d gives the result
14:21 - of zero
14:22 - that means that x is divisible by number
14:26 - d so let's change this part here as well
14:30 - so if this is true that means that x is
14:34 - divisible
14:36 - by
14:38 - and then here let's put
14:40 - this number d
14:42 - like this and then in this else
14:45 - situation
14:47 - i will say that x is not
14:51 - divisible by
14:52 - d and let's delete this line of code
14:55 - okay so if i run the program again let's
14:58 - see what's going to happen as you can
15:00 - see it says that 2 is not divisible by 3
15:03 - 3 is divisible by 3 7 is not 14 is not
15:06 - and 23 is not okay
15:09 - and what you can do now is you can
15:11 - change this d to be any number that you
15:13 - want so let's say for example number
15:15 - seven and if i run the program again it
15:18 - says that 2 is not 3 is not 7 is
15:21 - divisible by 7 14 is as well divisible
15:24 - by 7 and then 23 is not so that is how
15:28 - you capture a variable and pass it to
15:30 - your lambda by using this capture clause
15:34 - now one thing that you cannot do in this
15:36 - situation is you cannot change the value
15:38 - of this d variable so if i try to do
15:41 - something like this if i try to say for
15:43 - example d is equal to 10
15:46 - we are going to get an error
15:48 - okay the application has failed and it
15:50 - says cannot assign to a variable
15:53 - captured by copy in a non-mutable lambda
15:55 - so what does that mean it means that if
15:58 - you want to change values of captured
16:00 - variables you need to pass them by a
16:03 - reference and this here should work
16:07 - okay so if you pass it by value like
16:10 - this that means that you cannot change
16:12 - it inside your lambda and then if you
16:14 - want to change it you will need to pass
16:16 - it by a reference like this
16:19 - okay
16:20 - so if i write the value of my d now so
16:23 - if i say std
16:25 - c out
16:26 - and then i say d is equal to and then
16:29 - let's print d
16:31 - and if i run the program as you can see
16:34 - the value of our d variable has been
16:36 - changed okay so what happens if you have
16:39 - multiple variables that you want to
16:41 - capture in your lambda well let's say
16:43 - that you have also a variable called e
16:45 - and then its value is equal to five so
16:48 - if you want to pass this e variable as
16:50 - well well you just put a column sign and
16:53 - you pass that variable as well like this
16:56 - and then again here you will not be able
17:00 - to change the value of this e so if i
17:02 - say e is equal to 10 or 19
17:06 - this here is going to result as an error
17:09 - if you want to change it again you need
17:11 - to pass it by a reference like this now
17:15 - something that is useful to know is that
17:17 - if you want all your variables to be
17:19 - passed by a reference so that you can
17:21 - change them all in your lambdas what you
17:24 - can do instead is you can just put this
17:26 - ampersand symbol like this and this
17:29 - should work so if i run the program
17:31 - there will be no compile time errors as
17:33 - you can see
17:34 - and then if you want all your variables
17:36 - to be passed by value
17:38 - you use this symbol here and that means
17:42 - that the values of these variables will
17:44 - not change inside this lambda you will
17:46 - not be able to do that so if i run the
17:48 - program we get two errors for these two
17:52 - lines of code
17:54 - okay so let's return this so that we can
17:57 - change the value of both variables like
18:00 - this so those were some tips and tricks
18:02 - that i wanted to share related to lambda
18:04 - expressions and if you want to see some
18:07 - more examples definitely check out the
18:09 - book that i will link in the description
18:11 - it is completely free so you can
18:13 - download it and use it to learn on your
18:15 - own and learn more details and see more
18:17 - examples of lambda expressions and how
18:20 - they are used
18:21 - so thank you very much for watching uh
18:24 - if you enjoyed this video please give it
18:25 - a thumbs up and then also share it with
18:27 - your friends and with other people who
18:29 - would like to learn programming
18:30 - and
18:32 - i will see you in some other video bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to talk about an important topic in modern c plus and that is lambda expressions also known as lambdas i am pretty sure that you have heard about lambdas before and in this video i'm going to explain everything that you need to know in order to start writing faster and cleaner code with lambdas in modern c plus plus now in this video i'm going to explain the most important concepts that you need to know but since this is a very broad topic and there is a lot to learn if you want to see some additional examples and practice on your own i am going to link a book in the description that you can use to learn about lambdas in modern c plus and the best thing is that it is completely free so make sure to check it out lambda expressions were introduced in modern c plus plus and they are available with c plus plus version 11 and above and the main purpose of lambda expressions is to allow you to write inline anonymous functions so what are inline anonymous functions well if you're familiar with regular functions you know that the main purpose of a function is to allow you to write the code once put it in a function and then whenever you need that code you would just invoke that function so no need to retype the code again now an inline function on the other hand is a function that has very small definition inline functions are usually very simple and they are very often used for small snippets of code that are very simple and they are not going to be reused like regular functions so they are not even worth to be named so that is why i also said that they are anonymous so as i said a lambda is an unnamed function that is not going to be reused like regular functions are lambdas are often used for short small snippets of code that are so simple that they are not even worth to be named they keep your code clean they are easy to read and they are fast to execute and they keep everything in the same place as you will see when i show you the code and also at the end of this video i'm going to show you a couple of tips and tricks that you can do with lambda so make sure to watch the video until the end so i believe that's enough speaking about lambdas now i'm going to show you the code and for writing the code we are going to use c plus builder which is the best id that you can use in order to build c plus user interface applications um so if you are also interested to learn about c plus user interface applications i'm going to link that in the description and i will leave a link that you can use in order to download c plus builder in the description as well so let's create a console application that we will need in order to write our code click on file new other and then console application okay make sure that c plus plus is selected here click ok and here is our code so if i run this program let's see what is going to happen okay let's add couple things so here i'm going to say system pause greater than no okay and then let's add std c out hello world like this okay and then one more thing that i need to do is i need to include iostream so i will say include stream like this and now our code should work so if i run my application again here we have our hello world console application so how does a lambda look like well let's delete this code and i'm going to start with a simple example so what do you need in order to create a lambda first thing that you need are these angled brackets and then parentheses and then you need curly brackets like this so this here is how you create a lambda now i know that there is a lot of brackets so let me explain what each of these is used for so this first pair these angled brackets are called capture claws and i'm going to explain what they are used for later in this video for now let's just put cc here so capture clause now these parentheses are used in order to pass parameters so here you put parameters p okay and then inside these curly brackets you put the definition of your lambda function so let's call it f d function definition okay so what i want to do now is i want to create an example and then we are going to see how we can solve a problem from that example by using lambdas so the first thing that i need is a vector so let's say here include vector like this and then here let's create a vector let's say std vector and let's say that it's going to be vector of integers and i will call it v and i will initialize it so that it has elements of 2 3 7 14 and 23 for example now an interesting thing that i want to do with this vector here is the following in c plus plus there is a very useful header file called algorithm and it contains a lot of functions that are designed to work with ranges of elements like our vector here and one of those functions is for each so let me show you how that works and how we are going to use lambdas with for each function so as i said it is part of algorithm header file so the first thing that we need to do is say include algorithm okay and one of the functions from this header file is called for each so i will say std for each like this and what this for each function should do is it should iterate through this vector here from the beginning until the end so let's specify that let's say for each v dot begin until v dot end okay what i want to do is i want to do something like this so for each element of this vector here from the beginning until the end please do something and let's put semicolon at the end so now i want to specify what this something is so let me very quickly type some code that i want to show you and i want to show you a problem with that code and then we are going to introduce lambdas in order to solve that problem so this is the code that i added i created a structure and inside it i had to override this operator here that receives one parameter and i just print that parameter in the body of this function and i named that something so the same name as this here so what we expect to happen now is that for each element of this vector here from the beginning until the end we invoke this function here so the result should be that all of these elements should be printed in our console so let's run the program okay and we have an error and the error is this part here so let's just comment this this is not valid code this is just for us to remember how a lambda looks like so let's run the program now okay and as i promised here are all of the elements of our vector now the problem that i have with this code here this code is that it's overkill so to create a structure and then override an operator just to be able to print an element into the console is an overkill too much code so what i want to do now is i want to show you how you can solve this same problem by using a lambda expression so we will write much less code is going to be much cleaner and easier to read and understand so let's create our lambda and here is the formula that we will use let's do it here so the first thing is our capture clause and then parentheses for parameters and then curly brackets for function definition so here we have a lot of brackets so what do we put inside these brackets well for now this capture clause is going to stay empty and then inside these parentheses we put parameters and that is going to be this parameter here so int x that goes here and then inside curly brackets we put function definition and that will be this part here so i'll copy it and paste it here okay now what i can do is i can just replace this something with this line of code with our lambda so i'm going to copy it and then paste it here okay and i will comment this part and i will also comment this part so that we can see how our program will run with this lambda function instead of this part here so if i run the program as you can see the behavior is the same with this one line of code as it was with this structure and then overloaded operator and so on so our program works as expected so what that means is that now i can completely remove this code because from now we will not use this approach but we will use lambdas instead so again why would you use this approach here instead of the one that i just deleted well it's cleaner code it's easier to read and it keeps everything in the same place so everything that you need is here in this line of code and in case that you wanted to write and use this function again you would probably retype it anyways because it's very simple it's a very trivial function and if you wanted to reuse this as a function create a function to be able to reuse it it's much more work than benefit so you would have to create a function and then you would have to put it in a header file and you would have to find a place where you are going to put that header file so that it can be accessed by different parts of your application so that your function can be reused and then if that feather header file is going to consist of functions that are like this one what are you going to name it like my favorite two line functions it doesn't really make sense so that is why in this situation lambdas are much better solution so what happens if you wanted to do something else well let's delete this part because i prefer to write my lambda here and then just copy it and paste it here so let's say for example that for each element of this vector you want to print the information if it is even or odd number let's do that part here so here instead of just printing the element i will create an if else expression so i will say if x modulated by 2 is equal to 0 that means that the number is even so if it is divisible by 2 that means that the number is even so i will say std c out x is oh is even number like this okay and then i will say else x is odd number like this so if i want to use this lambda inside my for each i will just paste it here like this so capture clause parameters and then the definition of my function which is this part here okay so now you need to comment this part out because we will have a compile time error if we don't and then if i run my program let's see what is going to happen and we have the information that 2 is even 3 is odd 7 is odd 14 is even and then 23 is odd number so that is another example of how you can use lambda expressions something that i promised at the beginning of the video is that i will share some useful tips related to lambda expressions and that is the fact that lambda expressions can be much more powerful than ordinary functions and that is because a lambda expression can have access to variables from its enclosing scope so what does that mean well that means that this lambda here can have access to all the variables from its enclosing scope which is this scope here so all the variables from our main function and at the moment we don't have any variables so let's change that let's create a variable i'll do it here delete this part of the code so let's create a variable of type int and i will call it d and let's assign it the value of three so what i want to do with this variable here is i want to pass it into this lambda and for that i will use this capture clause so i want to capture this variable here into this lambda function and how i will do that well you just say here d very simple so now you can use this d variable inside this lambda here so how are we going to use this d so the reason why i named this variable d is because i want to use it in order to divide my x by that variable so i will say if x modulated by number d gives the result of zero that means that x is divisible by number d so let's change this part here as well so if this is true that means that x is divisible by and then here let's put this number d like this and then in this else situation i will say that x is not divisible by d and let's delete this line of code okay so if i run the program again let's see what's going to happen as you can see it says that 2 is not divisible by 3 3 is divisible by 3 7 is not 14 is not and 23 is not okay and what you can do now is you can change this d to be any number that you want so let's say for example number seven and if i run the program again it says that 2 is not 3 is not 7 is divisible by 7 14 is as well divisible by 7 and then 23 is not so that is how you capture a variable and pass it to your lambda by using this capture clause now one thing that you cannot do in this situation is you cannot change the value of this d variable so if i try to do something like this if i try to say for example d is equal to 10 we are going to get an error okay the application has failed and it says cannot assign to a variable captured by copy in a nonmutable lambda so what does that mean it means that if you want to change values of captured variables you need to pass them by a reference and this here should work okay so if you pass it by value like this that means that you cannot change it inside your lambda and then if you want to change it you will need to pass it by a reference like this okay so if i write the value of my d now so if i say std c out and then i say d is equal to and then let's print d and if i run the program as you can see the value of our d variable has been changed okay so what happens if you have multiple variables that you want to capture in your lambda well let's say that you have also a variable called e and then its value is equal to five so if you want to pass this e variable as well well you just put a column sign and you pass that variable as well like this and then again here you will not be able to change the value of this e so if i say e is equal to 10 or 19 this here is going to result as an error if you want to change it again you need to pass it by a reference like this now something that is useful to know is that if you want all your variables to be passed by a reference so that you can change them all in your lambdas what you can do instead is you can just put this ampersand symbol like this and this should work so if i run the program there will be no compile time errors as you can see and then if you want all your variables to be passed by value you use this symbol here and that means that the values of these variables will not change inside this lambda you will not be able to do that so if i run the program we get two errors for these two lines of code okay so let's return this so that we can change the value of both variables like this so those were some tips and tricks that i wanted to share related to lambda expressions and if you want to see some more examples definitely check out the book that i will link in the description it is completely free so you can download it and use it to learn on your own and learn more details and see more examples of lambda expressions and how they are used so thank you very much for watching uh if you enjoyed this video please give it a thumbs up and then also share it with your friends and with other people who would like to learn programming and i will see you in some other video bye
