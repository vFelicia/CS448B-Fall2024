With timestamps:

00:00 - hi everyone welcome to my channel in
00:02 - this video i want to explain how you can
00:05 - use pointers in order to return multiple
00:07 - values from a function
00:09 - so i said in the first video of this
00:12 - playlist that using pointers to return
00:14 - multiple values from a function is a
00:16 - very common use for pointers so in this
00:19 - video i want to demonstrate how that
00:21 - works so here we are going to create an
00:24 - array of numbers and then first i want
00:27 - to create two functions and one of those
00:30 - two is going to return me the smallest
00:32 - number in that array and then the other
00:34 - one is going to return me the largest
00:36 - number in that array and then in the
00:38 - second part of this video i want to show
00:40 - you how you can use pointers in order to
00:43 - get both smallest and largest number
00:46 - using one function only so you can
00:49 - return both of these numbers so min
00:52 - number and max number using only one
00:55 - function and that is going to be with
00:57 - the help of pointers so let's start with
01:00 - this example
01:02 - as i already said i'm going to create an
01:05 - array of numbers so
01:07 - um those are going to be numbers of type
01:09 - int and let's call this array numbers
01:13 - like this and it is going to be array of
01:15 - five numbers
01:17 - and let's assign them values of for
01:20 - example five four
01:23 - um
01:24 - minus two 29 and
01:28 - 6 for example so those are going to be
01:31 - my numbers
01:33 - okay
01:34 - and now let's create a function that is
01:36 - going to return the smallest number of
01:39 - this array so i'm going to create that
01:41 - function here
01:43 - and let's give it the return type of end
01:46 - and i'm going to call it get
01:48 - min
01:49 - like this
01:51 - and what i will need to pass to this
01:53 - function is going to be array so this
01:56 - array here so i'm going to say int
01:59 - numbers
02:01 - array so
02:02 - this is going to be the first argument
02:04 - and then the second one is going to be
02:06 - the size of this array so i'm going to
02:09 - say int size and we will use this second
02:12 - parameter here so that we know how many
02:15 - iterations we have to make in order to
02:18 - go through all of the elements of this
02:21 - array so let's define this function the
02:24 - first thing that i want to do is i want
02:26 - to create a variable
02:29 - of type int and that variable is going
02:32 - to be called
02:33 - min
02:34 - so this is going to be the variable that
02:36 - is going to hold the minimal value so
02:39 - the smallest number in this array and
02:42 - initially i want to assign to this
02:44 - variable the first element of this array
02:47 - so i'm going to say that the smallest
02:48 - element initially is going to be the
02:50 - first one so i'm going to say numbers of
02:54 - zero
02:55 - and then we are going to iterate through
02:57 - all of the other elements and each time
02:59 - that we find an element that is smaller
03:02 - than the current value of our min we are
03:05 - going to store that value in our min so
03:09 - let's do that so i'm going to say 4
03:11 - and since we have already stored the
03:14 - value of our first element in our min we
03:16 - do not need to iterate through that so
03:19 - i'm going to say that my end initially
03:21 - has the value of
03:23 - one
03:24 - okay
03:25 - oh and
03:26 - i is equal to one like this
03:29 - and then our for loop is going to
03:30 - iterate while our i is less than the
03:34 - size of this array so in this particular
03:37 - situation while our i is less than 5
03:40 - and in each iteration we want to
03:42 - increment our i like this
03:45 - so as i already said
03:48 - if we find a number
03:51 - on a specific position which is in this
03:53 - current situation uh the position with
03:56 - the index of i
03:58 - if we determine that that number is
04:00 - smaller than our min number
04:03 - like this
04:04 - we are going to store that number in our
04:07 - min variable so i'm going to say min
04:10 - is equal to
04:11 - numbers
04:13 - of i
04:14 - so that at the end of this for loop in
04:17 - our min variable is going to be the
04:19 - smallest number of this
04:21 - array so at the end of this for loop
04:24 - here we can return
04:26 - are men
04:28 - like this
04:29 - okay so now in order to test this
04:31 - function here i'm going to invoke it
04:34 - let's say get
04:35 - actually i'm going to write it out i'm
04:36 - going to say c out
04:38 - min is like this
04:41 - and then let's invoke it let's say get
04:44 - min
04:44 - like this
04:45 - and
04:46 - this getman function receives array so
04:50 - let's pass it numbers array and then it
04:53 - receives the size of this array and this
04:56 - array has one two three four five
04:59 - elements and you can check that here as
05:01 - well so we are going to pass five here
05:04 - okay
05:05 - and if i run this program
05:09 - as you can see it says min is minus 2
05:12 - which really is the smallest number in
05:15 - our array
05:17 - so that is going to be the first
05:18 - function and then the second function
05:20 - that i want to create is going to be the
05:22 - one that is going to return the largest
05:25 - number in our array so let's copy this
05:28 - function
05:29 - i'm going to copy it and then just
05:31 - modify it a little bit
05:33 - so the name of that other function is
05:35 - going to be get max like this and then
05:39 - that function as well will receive
05:42 - numbers array and the size
05:44 - but here we are going to have variable
05:47 - which is called max instead of min
05:50 - and again we will assign it the value of
05:53 - our first element
05:55 - so then we iterate through all of these
05:58 - elements so starting with the second
06:01 - element because first the value of the
06:03 - first one we already have inside this
06:04 - variable so we do not need to check that
06:07 - but if we find in these remaining
06:10 - elements if we find element
06:13 - that is larger
06:16 - so bigger than our max let's copy this
06:19 - here we are going to store the value of
06:22 - that element
06:24 - in our max
06:25 - variable like this
06:28 - and then at the end we will return our
06:31 - max variable
06:33 - okay so now in order to test this
06:35 - function i will invoke it as we did with
06:38 - this previous one i'm i will just say
06:41 - max
06:42 - is and then invoke
06:44 - get
06:45 - max like this
06:47 - and i'm going to add two end lines here
06:52 - so that we have output which is
06:54 - formatted nicely and if i run my program
06:56 - now
06:58 - as you can see it says min is -2 and
07:01 - then max is 29
07:04 - which is correct
07:05 - so let's explain one more time the
07:07 - algorithm that we are using here in
07:09 - order to determine the biggest number of
07:12 - our array so here in this first line
07:15 - i say that the biggest number is the one
07:18 - with the index zero so the first one and
07:21 - then here we iterate through all of the
07:24 - remaining elements
07:25 - and that is from the one with index one
07:29 - until the last one and if we find that
07:32 - any of those remaining numbers
07:35 - is greater than our max number then we
07:39 - say that our max number is equal to that
07:41 - number so
07:42 - at the end of this for loop we will have
07:45 - in our max variable
07:47 - the largest number of this array here
07:51 - okay and we have accomplished to get our
07:54 - min number and then our max number using
07:57 - these two
07:59 - functions oh i'm sorry so using this get
08:02 - min and then get max function as well so
08:06 - now what i want to show you is how you
08:09 - can use one function only to get both
08:12 - min and max number
08:15 - so let's do that let's create a function
08:17 - which we will name
08:19 - void
08:20 - get
08:21 - min
08:22 - and
08:23 - max like this
08:25 - and this function is going to receive
08:28 - like these two previous functions
08:30 - our numbers array
08:33 - and the size of the array and then
08:36 - considering that we want to return two
08:38 - values from our function we will have to
08:40 - pass those two values by a reference
08:43 - which means we will have to pass the
08:46 - addresses of the two values and then
08:48 - this function here is going to change
08:50 - the value that is stored on those two
08:52 - addresses and this function here our
08:56 - main function is going to have the
08:58 - access to those two addresses as well so
09:01 - once this function here
09:03 - assigns the value of min and max numbers
09:06 - to those two addresses
09:08 - our main function is going to be able to
09:10 - access those values so
09:13 - as i said let's pass to this function as
09:15 - well
09:16 - int
09:18 - min like this
09:19 - and then into
09:22 - max so we are receiving here pointer to
09:25 - a min number and then pointer to a max
09:29 - number
09:30 - okay
09:31 - so the job of this function will be very
09:33 - similar to the jobs of the two functions
09:36 - that we just created so
09:38 - i will just copy this and then paste it
09:41 - here
09:42 - and once more we are iterating through
09:45 - all of the numbers of our numbers array
09:48 - and then here we say if you find any
09:51 - number which is greater than our max
09:54 - number and here we have an error which
09:56 - says
09:57 - operand types are incompatible so int
10:00 - and int pointer which means that here we
10:03 - have to dereference this pointer using
10:05 - the star symbol so if you find any
10:08 - number which is greater than our current
10:12 - max please store that number inside our
10:16 - max
10:17 - like this
10:18 - and then i'm going to copy this code one
10:20 - more time for our min number so i will
10:23 - say if you find any number which is
10:26 - smaller than our min number like this
10:30 - please assign that number
10:33 - to my min
10:35 - number
10:36 - like this so this is going to be the
10:38 - work that this function will do
10:41 - and considering that this function is
10:44 - receiving these two so min and max as
10:47 - pointers this means that this function
10:50 - is directly going to modify the values
10:53 - that are stored on these addresses and
10:56 - those same addresses are going to be
10:59 - available in our main function which
11:01 - means that once this function changes
11:03 - the values that are stored on our max
11:06 - and our min address this main function
11:09 - here will be able to access those
11:12 - changed values and using pointers in
11:16 - that way we have achieved to return
11:19 - multiple values from our function so
11:22 - let's invoke this get min and max in
11:25 - order to test what i just said so i'm
11:28 - going to comment these two lines of code
11:30 - because we do not need them anymore
11:33 - and because here we have to pass
11:36 - min and max we will have to create those
11:39 - two variables here as well so i will say
11:42 - int
11:42 - min
11:44 - and as we did before i'm going to assign
11:46 - to this min
11:47 - the value of my first
11:50 - element
11:51 - like this
11:52 - okay
11:53 - and then i will create
11:55 - max variable as well and assign to my
11:58 - max variable value of my first element
12:01 - as well and now let's invoke this get
12:04 - min and max function
12:06 - so let's say get min
12:08 - and max
12:10 - and let's pass it parameters that it
12:13 - needs so the first one is numbers array
12:15 - so i will say numbers
12:18 - and then second parameter is size of
12:20 - that array so five
12:23 - and then it expects to receive two
12:26 - pointers so min and max and we will have
12:29 - to pass
12:31 - addresses of our main and then address
12:34 - of our max as well like this and this
12:38 - here is called passing a parameter using
12:42 - a reference so that means pass an
12:45 - address of a variable to your function
12:49 - rather than passing variable itself
12:52 - because then if you don't pass an
12:54 - address your function is going to create
12:56 - a copy and whatever changes your
12:58 - function makes with that copy you will
13:00 - not be able to see those changes in your
13:04 - main function so in this way we are
13:06 - passing addresses which means that this
13:09 - function here is operating on the
13:11 - original addresses which this function
13:14 - here is accessing as well so when this
13:17 - function here changes the values that
13:19 - are stored on those addresses this
13:22 - function here will know
13:24 - so that means that now if i try to write
13:27 - out oh i will need to add semicolon here
13:30 - at the end
13:32 - okay so that means now if we try to
13:35 - write out our min
13:38 - like this min is
13:40 - and then min
13:44 - and then if we try to write out
13:46 - our max
13:47 - as well
13:49 - max
13:50 - we will get
13:52 - um values of -2 and 29 at least we
13:56 - expect to get those two values if this
13:59 - function is working correctly so if i
14:02 - run my program
14:04 - as you can see
14:05 - we really have values of minus 2
14:09 - let me just
14:11 - collapse this so we really have values
14:13 - of -2 and 29 as the smallest and the
14:17 - largest number in our array and we have
14:20 - achieved that
14:22 - using this pass by a reference so by
14:25 - passing addresses of our variables to
14:28 - our function which our function then
14:31 - changes the values that are stored on
14:32 - those addresses and since this main
14:35 - function as well has the access to those
14:37 - same addresses that means that our main
14:39 - function can see the changes that have
14:41 - been made on those addresses
14:44 - so i hope that now you have an idea how
14:47 - to return multiple values from a
14:49 - function using pointers so if you
14:51 - enjoyed this video if you learned
14:53 - something new give it a thumbs up and
14:55 - also subscribe to my channel and i will
14:57 - be publishing more videos related to
14:59 - pointers in the future so if you don't
15:01 - want to miss out on those press the bell
15:04 - icon as well thank you for watching and
15:06 - i'm going to see you in my next video
15:08 - bye
15:18 - you

Cleaned transcript:

hi everyone welcome to my channel in this video i want to explain how you can use pointers in order to return multiple values from a function so i said in the first video of this playlist that using pointers to return multiple values from a function is a very common use for pointers so in this video i want to demonstrate how that works so here we are going to create an array of numbers and then first i want to create two functions and one of those two is going to return me the smallest number in that array and then the other one is going to return me the largest number in that array and then in the second part of this video i want to show you how you can use pointers in order to get both smallest and largest number using one function only so you can return both of these numbers so min number and max number using only one function and that is going to be with the help of pointers so let's start with this example as i already said i'm going to create an array of numbers so um those are going to be numbers of type int and let's call this array numbers like this and it is going to be array of five numbers and let's assign them values of for example five four um minus two 29 and 6 for example so those are going to be my numbers okay and now let's create a function that is going to return the smallest number of this array so i'm going to create that function here and let's give it the return type of end and i'm going to call it get min like this and what i will need to pass to this function is going to be array so this array here so i'm going to say int numbers array so this is going to be the first argument and then the second one is going to be the size of this array so i'm going to say int size and we will use this second parameter here so that we know how many iterations we have to make in order to go through all of the elements of this array so let's define this function the first thing that i want to do is i want to create a variable of type int and that variable is going to be called min so this is going to be the variable that is going to hold the minimal value so the smallest number in this array and initially i want to assign to this variable the first element of this array so i'm going to say that the smallest element initially is going to be the first one so i'm going to say numbers of zero and then we are going to iterate through all of the other elements and each time that we find an element that is smaller than the current value of our min we are going to store that value in our min so let's do that so i'm going to say 4 and since we have already stored the value of our first element in our min we do not need to iterate through that so i'm going to say that my end initially has the value of one okay oh and i is equal to one like this and then our for loop is going to iterate while our i is less than the size of this array so in this particular situation while our i is less than 5 and in each iteration we want to increment our i like this so as i already said if we find a number on a specific position which is in this current situation uh the position with the index of i if we determine that that number is smaller than our min number like this we are going to store that number in our min variable so i'm going to say min is equal to numbers of i so that at the end of this for loop in our min variable is going to be the smallest number of this array so at the end of this for loop here we can return are men like this okay so now in order to test this function here i'm going to invoke it let's say get actually i'm going to write it out i'm going to say c out min is like this and then let's invoke it let's say get min like this and this getman function receives array so let's pass it numbers array and then it receives the size of this array and this array has one two three four five elements and you can check that here as well so we are going to pass five here okay and if i run this program as you can see it says min is minus 2 which really is the smallest number in our array so that is going to be the first function and then the second function that i want to create is going to be the one that is going to return the largest number in our array so let's copy this function i'm going to copy it and then just modify it a little bit so the name of that other function is going to be get max like this and then that function as well will receive numbers array and the size but here we are going to have variable which is called max instead of min and again we will assign it the value of our first element so then we iterate through all of these elements so starting with the second element because first the value of the first one we already have inside this variable so we do not need to check that but if we find in these remaining elements if we find element that is larger so bigger than our max let's copy this here we are going to store the value of that element in our max variable like this and then at the end we will return our max variable okay so now in order to test this function i will invoke it as we did with this previous one i'm i will just say max is and then invoke get max like this and i'm going to add two end lines here so that we have output which is formatted nicely and if i run my program now as you can see it says min is 2 and then max is 29 which is correct so let's explain one more time the algorithm that we are using here in order to determine the biggest number of our array so here in this first line i say that the biggest number is the one with the index zero so the first one and then here we iterate through all of the remaining elements and that is from the one with index one until the last one and if we find that any of those remaining numbers is greater than our max number then we say that our max number is equal to that number so at the end of this for loop we will have in our max variable the largest number of this array here okay and we have accomplished to get our min number and then our max number using these two functions oh i'm sorry so using this get min and then get max function as well so now what i want to show you is how you can use one function only to get both min and max number so let's do that let's create a function which we will name void get min and max like this and this function is going to receive like these two previous functions our numbers array and the size of the array and then considering that we want to return two values from our function we will have to pass those two values by a reference which means we will have to pass the addresses of the two values and then this function here is going to change the value that is stored on those two addresses and this function here our main function is going to have the access to those two addresses as well so once this function here assigns the value of min and max numbers to those two addresses our main function is going to be able to access those values so as i said let's pass to this function as well int min like this and then into max so we are receiving here pointer to a min number and then pointer to a max number okay so the job of this function will be very similar to the jobs of the two functions that we just created so i will just copy this and then paste it here and once more we are iterating through all of the numbers of our numbers array and then here we say if you find any number which is greater than our max number and here we have an error which says operand types are incompatible so int and int pointer which means that here we have to dereference this pointer using the star symbol so if you find any number which is greater than our current max please store that number inside our max like this and then i'm going to copy this code one more time for our min number so i will say if you find any number which is smaller than our min number like this please assign that number to my min number like this so this is going to be the work that this function will do and considering that this function is receiving these two so min and max as pointers this means that this function is directly going to modify the values that are stored on these addresses and those same addresses are going to be available in our main function which means that once this function changes the values that are stored on our max and our min address this main function here will be able to access those changed values and using pointers in that way we have achieved to return multiple values from our function so let's invoke this get min and max in order to test what i just said so i'm going to comment these two lines of code because we do not need them anymore and because here we have to pass min and max we will have to create those two variables here as well so i will say int min and as we did before i'm going to assign to this min the value of my first element like this okay and then i will create max variable as well and assign to my max variable value of my first element as well and now let's invoke this get min and max function so let's say get min and max and let's pass it parameters that it needs so the first one is numbers array so i will say numbers and then second parameter is size of that array so five and then it expects to receive two pointers so min and max and we will have to pass addresses of our main and then address of our max as well like this and this here is called passing a parameter using a reference so that means pass an address of a variable to your function rather than passing variable itself because then if you don't pass an address your function is going to create a copy and whatever changes your function makes with that copy you will not be able to see those changes in your main function so in this way we are passing addresses which means that this function here is operating on the original addresses which this function here is accessing as well so when this function here changes the values that are stored on those addresses this function here will know so that means that now if i try to write out oh i will need to add semicolon here at the end okay so that means now if we try to write out our min like this min is and then min and then if we try to write out our max as well max we will get um values of 2 and 29 at least we expect to get those two values if this function is working correctly so if i run my program as you can see we really have values of minus 2 let me just collapse this so we really have values of 2 and 29 as the smallest and the largest number in our array and we have achieved that using this pass by a reference so by passing addresses of our variables to our function which our function then changes the values that are stored on those addresses and since this main function as well has the access to those same addresses that means that our main function can see the changes that have been made on those addresses so i hope that now you have an idea how to return multiple values from a function using pointers so if you enjoyed this video if you learned something new give it a thumbs up and also subscribe to my channel and i will be publishing more videos related to pointers in the future so if you don't want to miss out on those press the bell icon as well thank you for watching and i'm going to see you in my next video bye you
