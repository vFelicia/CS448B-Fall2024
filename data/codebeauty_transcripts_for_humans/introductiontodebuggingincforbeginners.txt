With timestamps:

00:00 - hi and welcome back in this video i want
00:02 - to teach you about i would say the most
00:04 - important skill that you need to have if
00:06 - you want to be a programmer and that is
00:09 - debugging so the shortest way to explain
00:11 - it is that debugging is a process of
00:14 - detecting and removing errors from your
00:17 - code and in programming those errors are
00:19 - also known as bugs so related to this
00:23 - let me share a little history lesson
00:25 - with you so according to the legend some
00:28 - 80 years ago a scientist at harvard
00:31 - university was testing an
00:33 - electromechanical computer that was used
00:35 - for the navy at the time
00:38 - and he found an actual mod stuck between
00:41 - the contacts of the electromechanical
00:43 - relay and at that moment grace hopper
00:46 - who was one of the pioneers of computer
00:49 - science and programming
00:51 - she pronounced the word bug which later
00:54 - became term that is used in order to
00:56 - describe a computer error so that
00:59 - extracted insect was passed into a
01:01 - technical dictionary with the
01:03 - accompanying inscription that said
01:05 - something like first known case of
01:08 - computer error being found
01:10 - and this fun fact gave rise to the use
01:13 - of the word bug to describe a computer
01:17 - error so that is why we nowadays call
01:20 - that process of discovering and fixing
01:23 - those bugs or computer errors debugging
01:27 - so as i said debugging is a process of
01:30 - discovering and removing bugs from your
01:32 - code and nowadays those are not actual
01:35 - bugs but in most cases those are logical
01:38 - errors that we have made while writing
01:40 - our code so if you like this fun fact
01:43 - please give this video a thumbs up and
01:45 - then also consider donating using the
01:48 - link in the description or in a pinned
01:50 - comment because that supports the
01:52 - channel and it helps me a lot to create
01:54 - more educational videos like this one
01:56 - and share more fun facts in the future
01:58 - so let's now see how debugging works in
02:01 - practice and for that i'm going to use
02:04 - red studio and c
02:05 - builder and red stands for rapid
02:08 - application development which means that
02:10 - it is used in order to create user
02:13 - interface c plus applications very fast
02:16 - and i will leave a link so that you can
02:18 - download it in the description so let's
02:20 - create a new project and then we will
02:22 - purposefully make a box so that i can
02:24 - show you how you can use debugging in
02:27 - order to find that bug and fix it
02:30 - so click on create a new multi-device
02:32 - application with c
02:33 - builder and then blank application
02:36 - okay
02:38 - and you should get this window so here
02:41 - is our form and what i want to do is i
02:44 - just want to add a label
02:46 - on this form
02:49 - okay i will put it here
02:51 - make it a little bit bigger and i will
02:53 - just make this form smaller
02:55 - and i want to change the name property
02:58 - of this label so i will find it here in
03:00 - this object inspector so select your
03:03 - label and then find
03:05 - name property and let's call this label
03:08 - result label
03:11 - because we are going to show the result
03:14 - of our program inside this label
03:17 - so what i want to do now is i will
03:20 - switch to my unit one dot cpp
03:23 - and here inside this function i will do
03:27 - the following let's create a bool
03:29 - variable and let's call it is
03:32 - rainy
03:34 - and i will assign the value of false to
03:36 - this variable
03:38 - like this and then what i want to do is
03:40 - i want to check i want to say if
03:43 - is rainy
03:45 - is equal to true
03:47 - what i want to do is i want to use my
03:49 - label called result label
03:53 - and inside its text property i want to
03:57 - write out text which says take an
04:00 - umbrella
04:02 - like this
04:03 - okay
04:04 - so if i run my program let's see what is
04:07 - going to happen
04:09 - and as you can see it says take an
04:11 - umbrella which is an unexpected behavior
04:14 - because clearly here we have assigned
04:17 - the value of false to our variable
04:19 - called is rainy so we should not get a
04:22 - message that says take an umbrella
04:24 - because it is not raining so what i want
04:27 - to do now is i want to debug this
04:30 - program in order to see what is going on
04:32 - what is happening and why we are getting
04:34 - this message so let's stop our program
04:39 - and the first thing that you need to do
04:41 - is put a break point so click somewhere
04:45 - on this line where you want to put your
04:47 - break point i'll do it here
04:49 - and as you can see you will get this red
04:52 - circle and this here is called a
04:55 - breakpoint which means that once you
04:57 - start debugging your program the
05:00 - execution of your program will be paused
05:03 - at this line here and you will be able
05:06 - to resume the execution of your program
05:08 - manually you will be able to execute it
05:10 - line by line and track what is happening
05:13 - during that execution so the next step
05:16 - is to start debugging and how do you do
05:19 - that well
05:21 - look on this menu here for an option
05:24 - that is called either run or debug i
05:27 - currently use rad studio so it has
05:29 - option that says run i'm going to select
05:32 - that and then here you will have two
05:35 - ways to run your application run without
05:38 - debugging and then run with debugging or
05:42 - just run depending on the id that you
05:44 - are using
05:45 - so in order to debug your application
05:47 - you will have to select the option that
05:49 - says run with debugging or just run so
05:52 - let's click that
05:55 - okay and as you can see we have now this
05:59 - little arrow here on our breakpoint
06:01 - which says that the execution of our
06:04 - program has been paused on this line
06:06 - here and in order to move to the next
06:09 - line
06:10 - you can on this menu select the option
06:13 - that says step over so click on step
06:16 - over or use f8 and as you can see the
06:20 - execution of our program has moved to
06:23 - the next line which is this condition
06:26 - here and another useful thing that you
06:28 - can do is you can hover over these
06:30 - variables in order to check their value
06:33 - and if i hover over this is rainy
06:36 - variable you can see that its value is
06:39 - equal to false now you can also use this
06:43 - window here which says local variables
06:45 - in order to see the values of all of
06:48 - your local variables and if you cannot
06:50 - see this window here please click on
06:54 - view and then debug windows and here you
06:57 - will find the option of local variables
07:00 - so enable that and you should be able to
07:03 - see this window here okay so to return
07:06 - to our debugging if i hover over this
07:09 - variable it says that is rainy is equal
07:11 - to false so let's move to the next line
07:14 - and let's see what is happening so if i
07:16 - press f8 as you can see it has entered
07:19 - into this line here which is under our
07:22 - if block now
07:25 - one question that i have is why is it
07:28 - executing this line under our if
07:30 - condition if this variable had the value
07:34 - of false so if this variable here is
07:36 - false it should clearly skip that part
07:39 - of the code so if i hover over that
07:41 - variable as you can see we can notice
07:44 - that its value has been changed to true
07:47 - so
07:48 - why has that happened if we review this
07:50 - if condition here you will notice that
07:53 - by accident we have used an assignment
07:57 - operator instead of equality operator
07:59 - which means that instead of comparing
08:02 - these two values we have accidentally
08:06 - assigned the value of true to our
08:09 - variable and that is why we are getting
08:12 - the error so
08:14 - i'm going to stop the execution of my
08:16 - program and i will change this to is
08:19 - equal to operator and then if i run my
08:22 - program again i will run it without
08:25 - debugging this time
08:27 - okay as you can see it says results
08:29 - label which is default text that was
08:32 - stored inside our label but this time we
08:35 - are not getting this take an umbrella if
08:37 - it is not raining and then one more
08:40 - thing that i want you to notice is that
08:42 - even though we have this breakpoint here
08:45 - the execution of your program will not
08:47 - be paused at any breakpoints if you use
08:50 - the option of run without debugging so
08:55 - as you can see this program is behaving
08:57 - as expected so now i can close it
08:59 - and another thing that i want to show
09:01 - you is
09:03 - this option here which says run the
09:05 - cursor so what i'm going to do is i will
09:09 - put a breakpoint here and i'm going to
09:12 - run my application again in a debug mode
09:16 - okay and the execution has been paused
09:18 - on this line here as you can notice this
09:21 - little arrow symbol so instead of
09:23 - pressing f8 and moving to the next line
09:26 - what you can do is you can click on run
09:28 - and then you can say
09:30 - run the cursor or you can use f4 as a
09:34 - shortcut so i will press that and as you
09:37 - can notice the execution has been moved
09:39 - to our next break point so what you can
09:43 - do is you can use this run to cursor
09:46 - option if you don't want to debug a
09:48 - specific part of code so if you believe
09:50 - that a specific block of code or part of
09:52 - the code does not have any errors and
09:55 - you don't want to go over it line by
09:57 - line what you can do is you can put a
10:00 - new breakpoint and then use this option
10:03 - called run the cursor in order to skip
10:07 - part of the code and go directly to that
10:10 - line that you do want to inspect
10:12 - and a common question is how many break
10:15 - points can you have the answer to that
10:17 - question is as many as you want as many
10:19 - as you need this program is very simple
10:22 - and very small so it does not make sense
10:25 - to have more break points but in large
10:28 - programs in big applications you can use
10:30 - as many breakpoints as you need in order
10:32 - to find out what is the problem and what
10:35 - is the error in your application and
10:37 - that's something that i'm not sure if i
10:39 - already told you but if you decide to
10:41 - run your program without debugging it is
10:44 - going to run a little bit faster and
10:46 - then if you decide to run your program
10:48 - with debugging it's going to be a little
10:50 - bit slower but this is the only way that
10:53 - you can debug your program so the only
10:55 - way to put breakpoints and to go line by
10:58 - line through your program is to run it
11:00 - with debugging so i stopped my program
11:03 - and i deleted the code because now i
11:05 - want to show you something else by the
11:07 - way i also removed the breakpoints that
11:09 - we had and a quick tip if you want to
11:12 - remove a break point you just click on
11:14 - it again and it is going to be removed
11:17 - so the next thing that i want to show
11:19 - you is
11:20 - this interesting option here that says
11:23 - trace into so this trace into option is
11:27 - used in order to debug inside a function
11:30 - so if you want to go inside a function
11:33 - and inspect what is happening inside
11:35 - that function you use this option here
11:38 - so in order to demonstrate that let's
11:41 - create two functions
11:43 - i will create those two functions
11:45 - before
11:46 - this t form constructor so here i will
11:50 - say
11:52 - that i want to create a function of
11:53 - return type void and i will call it
11:56 - celebrate birthday
12:01 - okay and actually i will call it
12:03 - celebrate birthday one because we are
12:05 - going to create two functions that will
12:06 - be very similar so this celebrate
12:10 - birthday one will receive a parameter of
12:13 - type in and it will be called age
12:17 - okay and the job of this function will
12:20 - be
12:20 - just to increment this parameter so this
12:24 - is our celebrate birthday one and then i
12:27 - want to create a second function which
12:29 - will be very similar
12:32 - so i will say celebrate birthday too
12:35 - but here instead of receiving this
12:37 - parameter like this i will receive a
12:40 - reference to this parameter so
12:44 - what i want to do now is i want to test
12:46 - these two functions and see how our
12:48 - program is going to behave when we
12:50 - invoke this one and then how it is going
12:52 - to behave when we invoke this one so
12:56 - let's say
12:57 - that i want to create a variable called
13:00 - my age and i will assign it the value of
13:02 - 25 like this and then i will invoke this
13:06 - second function for example so i will
13:08 - say
13:09 - celebrate birthday 2 and i will pass
13:13 - this variable called my page
13:16 - like this and then after i have invoked
13:19 - this function i will just write out this
13:21 - variable here inside my results
13:25 - label so here we still have this results
13:27 - label so i will return to unit 1.cpp and
13:31 - i will say
13:32 - result label
13:35 - its text property will be equal to
13:39 - my age
13:41 - please just use
13:43 - capital letter t like this so if i run
13:46 - my program and this time i'm running it
13:48 - without debugging
13:50 - okay it says that age is 26.
13:55 - so that happens when we invoke this
13:57 - second function so now let's see what is
14:00 - going to happen if we invoke this
14:02 - celebrate birthday one
14:04 - because
14:04 - these two functions are very similar but
14:07 - the result is going to be very different
14:08 - as you will see
14:10 - so if i run this program
14:13 - as you can see the value shown here is
14:15 - 25.
14:16 - so why is this happening we are going to
14:20 - discover what is happening here by using
14:22 - debugging so let's close our program and
14:26 - what i want to do next is i will put a
14:28 - breakpoint i'll put it here so this is
14:31 - the line where i want to pause the
14:33 - execution of my program and i will run
14:36 - my application in a debugging mode so
14:39 - i'll click here
14:41 - okay and as you can see the execution
14:43 - has been paused here
14:45 - okay
14:46 - so
14:47 - if i press f8 it is going to navigate me
14:50 - to the next line and then if i press f8
14:53 - again as you can see we have skipped
14:56 - this function here so we have not
14:58 - entered into the function to see what is
15:01 - happening inside it so that is what you
15:03 - are going to achieve if you press f8 but
15:06 - i'm going to stop my program now and
15:08 - show you how you can enter into that
15:10 - function so i will click again run
15:14 - and
15:15 - again the execution has been paused on
15:17 - this line here so now i will press f8
15:20 - and i am on this line which invokes our
15:24 - function so in order to enter
15:26 - into this function you use a different
15:28 - option so you use this option called
15:31 - trace into or f7 shortcut so if i press
15:36 - that as you can see
15:37 - the execution moved to our celebrate
15:40 - birthday 1 function so
15:43 - if i press f8 here inside this function
15:46 - what i can do is i can hover over this
15:49 - age variable and as you can notice its
15:51 - value is 25 which is the value that we
15:54 - have passed into the function it's 25
15:57 - here as well and then after i execute
16:00 - this line of code here so i press f8
16:03 - again and if i hover over this variable
16:06 - its value is going to be 26
16:09 - and then the value of this variable here
16:11 - is still 25 so
16:13 - once i go out of this function and
16:17 - return to this line of code here
16:20 - if i inspect my age variable its value
16:22 - still has not changed its value is 25
16:25 - and that is the value that will be shown
16:27 - inside our results label text so
16:31 - when i
16:33 - run my program until the end and if i
16:36 - inspect the result as you can see the
16:38 - result is 25 so that is what is
16:41 - happening with this first function and
16:44 - what i want to do is i want to invoke
16:46 - the second function in order to see what
16:48 - is happening there so i will say
16:50 - celebrate birthday 2 and i will oh i
16:53 - have not still stopped my program okay
16:56 - so please stop your program and then run
16:59 - it again in a debugging mode
17:02 - and as you can see the execution has
17:04 - been paused on this line again so i'll
17:06 - press f8 to move to the next line and
17:09 - then f7 in order to enter into this
17:12 - function
17:13 - okay
17:14 - and then if i press f8 again let's see
17:17 - what is going to happen so
17:19 - the value of this variable here that we
17:21 - have received is 25 and then if i hover
17:25 - over my age its value is 25 as well but
17:29 - if i execute this line here so if i
17:32 - press f8 and then i hover over this
17:35 - variable you will notice that its value
17:38 - changed to 26 and then if i hover over
17:42 - my age you will notice that its value as
17:45 - well changed to 26. so when i leave this
17:48 - function and show the value that is
17:51 - stored inside my age variable that value
17:54 - is going to be the value of 26 as you
17:57 - can see in our application here so what
18:00 - is happening here
18:02 - let's stop
18:03 - our program
18:05 - okay so in this first situation when we
18:08 - passed the value without reference
18:10 - what this function here did is it made
18:13 - its own copy of this parameter and then
18:17 - all the changes that were performed
18:19 - those changes were performed on this
18:21 - copy and they were not applied to this
18:24 - variable here but
18:26 - in this situation here so when we invoke
18:29 - this celebrate birthday 2 method here we
18:32 - are passing a parameter by a reference
18:35 - which means that we are passing the
18:37 - original so all the changes that are
18:40 - performed on this parameter here those
18:43 - changes will also be applied on this
18:46 - variable here and you could clearly see
18:49 - that while we were debugging that at the
18:51 - moment when this variable's value
18:53 - changed this variable's value changed as
18:56 - well
18:57 - something else that i want to show you
18:59 - because it might happen to you alone
19:01 - while you're practicing so i don't want
19:02 - you to wonder what is happening
19:05 - is the following situation so please run
19:07 - your program with debugging again and i
19:10 - will skip this line by pressing f8 f8
19:14 - again and when i come to this line here
19:17 - let's press f7 to see what is going to
19:20 - happen
19:21 - okay and as you can see we have been
19:24 - switched to some part of the code that
19:26 - we have not written so what is happening
19:29 - here well you have actually stepped into
19:33 - a u string.h header file which is the
19:36 - code that someone else has written and
19:38 - it is already available in c plus plus
19:40 - so now we are able to debug that part as
19:43 - well so i'm just going to close this and
19:46 - i wanted to share that in case that it
19:48 - happens to you when you are practicing
19:49 - on your own so that you don't think that
19:51 - you messed something up or that
19:53 - something weird is going on if you all
19:56 - of a sudden see a code that you don't
19:58 - understand and that you have not written
20:00 - that is the code that is available in
20:02 - the framework itself or in the language
20:05 - but in most situations the code that you
20:08 - want to debug and the code that contains
20:11 - the errors is going to be your own code
20:13 - the code that you have written or your
20:15 - team depending on how many people are
20:17 - working on that application so if you
20:20 - enjoyed this video please give it a
20:21 - thumbs up for the youtube algorithm and
20:24 - something else that i want to share with
20:25 - you is a book that i will link in a
20:28 - description and you can use it in order
20:30 - to upgrade and build your knowledge and
20:33 - improve your c plus programming skills
20:35 - so make sure to check that out as well
20:38 - so now that you have watched this video
20:40 - and learned about debugging i'm going to
20:42 - link a playlist here and also in the
20:45 - description
20:46 - and that playlist contains a lot of
20:48 - different c plus user interface
20:50 - application videos that i built for you
20:53 - so now you can use your new debugging
20:55 - skill in order to discover errors and
20:58 - fix them and at the end of each one of
21:01 - those videos i have a part where i give
21:04 - you a few tips on how you can improve
21:06 - and upgrade that application as well as
21:08 - how you can fix some potential bugs that
21:11 - the application contains and then one
21:13 - more tip is that if you're a beginner
21:16 - please start watching that playlist from
21:18 - the first video because the first video
21:20 - is the introduction and then as you
21:22 - learn over time you can move to the next
21:25 - video and the next and the next which
21:27 - are more advanced so thank you very much
21:30 - for watching and i will see you in some
21:32 - other video bye

Cleaned transcript:

hi and welcome back in this video i want to teach you about i would say the most important skill that you need to have if you want to be a programmer and that is debugging so the shortest way to explain it is that debugging is a process of detecting and removing errors from your code and in programming those errors are also known as bugs so related to this let me share a little history lesson with you so according to the legend some 80 years ago a scientist at harvard university was testing an electromechanical computer that was used for the navy at the time and he found an actual mod stuck between the contacts of the electromechanical relay and at that moment grace hopper who was one of the pioneers of computer science and programming she pronounced the word bug which later became term that is used in order to describe a computer error so that extracted insect was passed into a technical dictionary with the accompanying inscription that said something like first known case of computer error being found and this fun fact gave rise to the use of the word bug to describe a computer error so that is why we nowadays call that process of discovering and fixing those bugs or computer errors debugging so as i said debugging is a process of discovering and removing bugs from your code and nowadays those are not actual bugs but in most cases those are logical errors that we have made while writing our code so if you like this fun fact please give this video a thumbs up and then also consider donating using the link in the description or in a pinned comment because that supports the channel and it helps me a lot to create more educational videos like this one and share more fun facts in the future so let's now see how debugging works in practice and for that i'm going to use red studio and c builder and red stands for rapid application development which means that it is used in order to create user interface c plus applications very fast and i will leave a link so that you can download it in the description so let's create a new project and then we will purposefully make a box so that i can show you how you can use debugging in order to find that bug and fix it so click on create a new multidevice application with c builder and then blank application okay and you should get this window so here is our form and what i want to do is i just want to add a label on this form okay i will put it here make it a little bit bigger and i will just make this form smaller and i want to change the name property of this label so i will find it here in this object inspector so select your label and then find name property and let's call this label result label because we are going to show the result of our program inside this label so what i want to do now is i will switch to my unit one dot cpp and here inside this function i will do the following let's create a bool variable and let's call it is rainy and i will assign the value of false to this variable like this and then what i want to do is i want to check i want to say if is rainy is equal to true what i want to do is i want to use my label called result label and inside its text property i want to write out text which says take an umbrella like this okay so if i run my program let's see what is going to happen and as you can see it says take an umbrella which is an unexpected behavior because clearly here we have assigned the value of false to our variable called is rainy so we should not get a message that says take an umbrella because it is not raining so what i want to do now is i want to debug this program in order to see what is going on what is happening and why we are getting this message so let's stop our program and the first thing that you need to do is put a break point so click somewhere on this line where you want to put your break point i'll do it here and as you can see you will get this red circle and this here is called a breakpoint which means that once you start debugging your program the execution of your program will be paused at this line here and you will be able to resume the execution of your program manually you will be able to execute it line by line and track what is happening during that execution so the next step is to start debugging and how do you do that well look on this menu here for an option that is called either run or debug i currently use rad studio so it has option that says run i'm going to select that and then here you will have two ways to run your application run without debugging and then run with debugging or just run depending on the id that you are using so in order to debug your application you will have to select the option that says run with debugging or just run so let's click that okay and as you can see we have now this little arrow here on our breakpoint which says that the execution of our program has been paused on this line here and in order to move to the next line you can on this menu select the option that says step over so click on step over or use f8 and as you can see the execution of our program has moved to the next line which is this condition here and another useful thing that you can do is you can hover over these variables in order to check their value and if i hover over this is rainy variable you can see that its value is equal to false now you can also use this window here which says local variables in order to see the values of all of your local variables and if you cannot see this window here please click on view and then debug windows and here you will find the option of local variables so enable that and you should be able to see this window here okay so to return to our debugging if i hover over this variable it says that is rainy is equal to false so let's move to the next line and let's see what is happening so if i press f8 as you can see it has entered into this line here which is under our if block now one question that i have is why is it executing this line under our if condition if this variable had the value of false so if this variable here is false it should clearly skip that part of the code so if i hover over that variable as you can see we can notice that its value has been changed to true so why has that happened if we review this if condition here you will notice that by accident we have used an assignment operator instead of equality operator which means that instead of comparing these two values we have accidentally assigned the value of true to our variable and that is why we are getting the error so i'm going to stop the execution of my program and i will change this to is equal to operator and then if i run my program again i will run it without debugging this time okay as you can see it says results label which is default text that was stored inside our label but this time we are not getting this take an umbrella if it is not raining and then one more thing that i want you to notice is that even though we have this breakpoint here the execution of your program will not be paused at any breakpoints if you use the option of run without debugging so as you can see this program is behaving as expected so now i can close it and another thing that i want to show you is this option here which says run the cursor so what i'm going to do is i will put a breakpoint here and i'm going to run my application again in a debug mode okay and the execution has been paused on this line here as you can notice this little arrow symbol so instead of pressing f8 and moving to the next line what you can do is you can click on run and then you can say run the cursor or you can use f4 as a shortcut so i will press that and as you can notice the execution has been moved to our next break point so what you can do is you can use this run to cursor option if you don't want to debug a specific part of code so if you believe that a specific block of code or part of the code does not have any errors and you don't want to go over it line by line what you can do is you can put a new breakpoint and then use this option called run the cursor in order to skip part of the code and go directly to that line that you do want to inspect and a common question is how many break points can you have the answer to that question is as many as you want as many as you need this program is very simple and very small so it does not make sense to have more break points but in large programs in big applications you can use as many breakpoints as you need in order to find out what is the problem and what is the error in your application and that's something that i'm not sure if i already told you but if you decide to run your program without debugging it is going to run a little bit faster and then if you decide to run your program with debugging it's going to be a little bit slower but this is the only way that you can debug your program so the only way to put breakpoints and to go line by line through your program is to run it with debugging so i stopped my program and i deleted the code because now i want to show you something else by the way i also removed the breakpoints that we had and a quick tip if you want to remove a break point you just click on it again and it is going to be removed so the next thing that i want to show you is this interesting option here that says trace into so this trace into option is used in order to debug inside a function so if you want to go inside a function and inspect what is happening inside that function you use this option here so in order to demonstrate that let's create two functions i will create those two functions before this t form constructor so here i will say that i want to create a function of return type void and i will call it celebrate birthday okay and actually i will call it celebrate birthday one because we are going to create two functions that will be very similar so this celebrate birthday one will receive a parameter of type in and it will be called age okay and the job of this function will be just to increment this parameter so this is our celebrate birthday one and then i want to create a second function which will be very similar so i will say celebrate birthday too but here instead of receiving this parameter like this i will receive a reference to this parameter so what i want to do now is i want to test these two functions and see how our program is going to behave when we invoke this one and then how it is going to behave when we invoke this one so let's say that i want to create a variable called my age and i will assign it the value of 25 like this and then i will invoke this second function for example so i will say celebrate birthday 2 and i will pass this variable called my page like this and then after i have invoked this function i will just write out this variable here inside my results label so here we still have this results label so i will return to unit 1.cpp and i will say result label its text property will be equal to my age please just use capital letter t like this so if i run my program and this time i'm running it without debugging okay it says that age is 26. so that happens when we invoke this second function so now let's see what is going to happen if we invoke this celebrate birthday one because these two functions are very similar but the result is going to be very different as you will see so if i run this program as you can see the value shown here is 25. so why is this happening we are going to discover what is happening here by using debugging so let's close our program and what i want to do next is i will put a breakpoint i'll put it here so this is the line where i want to pause the execution of my program and i will run my application in a debugging mode so i'll click here okay and as you can see the execution has been paused here okay so if i press f8 it is going to navigate me to the next line and then if i press f8 again as you can see we have skipped this function here so we have not entered into the function to see what is happening inside it so that is what you are going to achieve if you press f8 but i'm going to stop my program now and show you how you can enter into that function so i will click again run and again the execution has been paused on this line here so now i will press f8 and i am on this line which invokes our function so in order to enter into this function you use a different option so you use this option called trace into or f7 shortcut so if i press that as you can see the execution moved to our celebrate birthday 1 function so if i press f8 here inside this function what i can do is i can hover over this age variable and as you can notice its value is 25 which is the value that we have passed into the function it's 25 here as well and then after i execute this line of code here so i press f8 again and if i hover over this variable its value is going to be 26 and then the value of this variable here is still 25 so once i go out of this function and return to this line of code here if i inspect my age variable its value still has not changed its value is 25 and that is the value that will be shown inside our results label text so when i run my program until the end and if i inspect the result as you can see the result is 25 so that is what is happening with this first function and what i want to do is i want to invoke the second function in order to see what is happening there so i will say celebrate birthday 2 and i will oh i have not still stopped my program okay so please stop your program and then run it again in a debugging mode and as you can see the execution has been paused on this line again so i'll press f8 to move to the next line and then f7 in order to enter into this function okay and then if i press f8 again let's see what is going to happen so the value of this variable here that we have received is 25 and then if i hover over my age its value is 25 as well but if i execute this line here so if i press f8 and then i hover over this variable you will notice that its value changed to 26 and then if i hover over my age you will notice that its value as well changed to 26. so when i leave this function and show the value that is stored inside my age variable that value is going to be the value of 26 as you can see in our application here so what is happening here let's stop our program okay so in this first situation when we passed the value without reference what this function here did is it made its own copy of this parameter and then all the changes that were performed those changes were performed on this copy and they were not applied to this variable here but in this situation here so when we invoke this celebrate birthday 2 method here we are passing a parameter by a reference which means that we are passing the original so all the changes that are performed on this parameter here those changes will also be applied on this variable here and you could clearly see that while we were debugging that at the moment when this variable's value changed this variable's value changed as well something else that i want to show you because it might happen to you alone while you're practicing so i don't want you to wonder what is happening is the following situation so please run your program with debugging again and i will skip this line by pressing f8 f8 again and when i come to this line here let's press f7 to see what is going to happen okay and as you can see we have been switched to some part of the code that we have not written so what is happening here well you have actually stepped into a u string.h header file which is the code that someone else has written and it is already available in c plus plus so now we are able to debug that part as well so i'm just going to close this and i wanted to share that in case that it happens to you when you are practicing on your own so that you don't think that you messed something up or that something weird is going on if you all of a sudden see a code that you don't understand and that you have not written that is the code that is available in the framework itself or in the language but in most situations the code that you want to debug and the code that contains the errors is going to be your own code the code that you have written or your team depending on how many people are working on that application so if you enjoyed this video please give it a thumbs up for the youtube algorithm and something else that i want to share with you is a book that i will link in a description and you can use it in order to upgrade and build your knowledge and improve your c plus programming skills so make sure to check that out as well so now that you have watched this video and learned about debugging i'm going to link a playlist here and also in the description and that playlist contains a lot of different c plus user interface application videos that i built for you so now you can use your new debugging skill in order to discover errors and fix them and at the end of each one of those videos i have a part where i give you a few tips on how you can improve and upgrade that application as well as how you can fix some potential bugs that the application contains and then one more tip is that if you're a beginner please start watching that playlist from the first video because the first video is the introduction and then as you learn over time you can move to the next video and the next and the next which are more advanced so thank you very much for watching and i will see you in some other video bye
