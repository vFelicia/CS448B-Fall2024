With timestamps:

00:00 - hello guys and welcome to my channel in
00:03 - this video i will teach you about
00:04 - multithreading in modern c plus plus so
00:07 - i will explain what is multi-threading
00:10 - why is it important how it works in
00:11 - modern c plus i will give you a
00:14 - real-life example of when i use
00:16 - multithreading for work when i'm coding
00:19 - and i will also explain the difference
00:21 - between multi-threading and multitasking
00:23 - because that is something that confuses
00:25 - many people
00:26 - so if you want to learn about
00:28 - multithreading in modern c plus this is
00:31 - the right video for you and you will
00:33 - find everything that you need in this
00:35 - video even if you are a complete
00:37 - beginner so let's talk about
00:39 - multithreading if you are a beginner and
00:42 - if you want to understand
00:43 - multi-threading you are going to find a
00:46 - bunch of very complex definitions on the
00:48 - internet that are very hard to
00:50 - comprehend
00:51 - but it doesn't have to be like that and
00:53 - in this video i will give you a simple
00:56 - and easy explanation oh so
01:00 - an interesting fact is that
01:01 - multithreading was introduced with c
01:04 - plus 11
01:06 - and prior to that if you wanted to work
01:08 - with threats it was much harder and
01:10 - there were several issues and problems
01:12 - but now in modern c plus there is a very
01:15 - easy way to work with threads and i will
01:18 - show you that in a moment because the
01:20 - first thing that i want to explain is
01:22 - what is multithreading and the most
01:25 - general definition is that
01:27 - multithreading is the ability of
01:29 - multiple parts of one program to be
01:32 - executed at the same time and there are
01:36 - two ways to achieve this the first way
01:39 - is multitasking so how do i explain
01:42 - multitasking
01:43 - imagine a situation where you are doing
01:45 - your homework and texting with your
01:48 - friend so you are doing two things at
01:51 - the same time
01:52 - or not if you really think about this
01:55 - you are not doing two tasks at the same
01:57 - time you are just switching between the
01:59 - first task and the second task and
02:02 - computers can do this as well with
02:04 - one very important difference which is
02:06 - that computers can switch between these
02:08 - two tasks so fast that it becomes
02:12 - unnoticeable to human eye so it really
02:15 - seems like a parallel execution but this
02:18 - is not real multithreading this is
02:21 - multi-tasking the second way is real
02:24 - multithreading and real multitrading
02:26 - means that you write and divide your
02:28 - program in such way that individual
02:31 - parts of that program can be executed at
02:34 - the same time an example of this
02:36 - multi-threading in real life is
02:39 - let's say for example that you and your
02:41 - girlfriend or boyfriend whichever you
02:43 - have you decide to prepare the lunch
02:46 - together so that is the problem that you
02:48 - need to solve prepare the lunch and you
02:51 - decide to split that job in such way
02:54 - that both of you can perform your part
02:56 - of the job at the same time so for
02:58 - example the job of your girlfriend is to
03:02 - to clean vegetables to
03:04 - peel them slice them and add them to the
03:07 - pot and then your part of the job is to
03:10 - um to stir the mixture all the time okay
03:14 - so
03:16 - you are two threads who are performing
03:18 - their part of the job and both of you
03:21 - can be executed at the same time and
03:24 - that is how real multi-threading works
03:26 - so now your question might be how does
03:28 - this work in computers well if your pc
03:32 - has two cores the first score is going
03:34 - to take the first thread the second
03:36 - quarter is going to take the second
03:37 - thread and both of them can work at the
03:40 - same time simple as that so let's now
03:43 - switch to visual studio in order to see
03:46 - how this works in code
03:48 - so in order to understand how
03:50 - multi-threading works let's create two
03:52 - simple functions
03:54 - i will create them here i will say void
03:57 - function
03:59 - 1
04:00 - and the job of this function will be to
04:03 - write out plus symbol 200 times very
04:06 - simple so i will say 4
04:08 - and i is equal to 0 i is less than 200 i
04:14 - plus plus
04:15 - and here i will just say std c out
04:19 - and then i will print this symbol here
04:23 - okay so that is the job of the first
04:25 - function and then let's create a second
04:28 - function it will be called function
04:30 - 2 and its job will be to write out minus
04:34 - symbol 200 times so
04:36 - if i invoke
04:38 - these two functions so function 1 and
04:42 - function2
04:43 - and if i run this program
04:47 - we get
04:48 - this behavior here so every time that i
04:51 - run this program we will get this very
04:54 - predictable behavior which is 200 of
04:56 - these plus symbols and then 200 of minus
05:00 - symbols so
05:02 - what is going to happen if i now make
05:06 - this program a multi-threaded
05:08 - application so what is going to happen
05:10 - if i say hey this function will be
05:13 - executed in one thread and this second
05:16 - function will be executed in the second
05:19 - thread let's do that so what are steps
05:22 - to make this application a
05:23 - multi-threaded application the first
05:26 - step is if you want to work with threads
05:28 - you need to include thread header files
05:31 - so i will say
05:33 - include
05:34 - thread
05:35 - okay and now what we are going to do is
05:38 - we are going to create a thread i will
05:41 - delete this i don't need it anymore so i
05:43 - will create a thread
05:45 - std
05:47 - thread
05:48 - okay
05:49 - so this is the type and then i will give
05:52 - the name to my thread i will call it
05:54 - worker 1
05:56 - like this
05:57 - and here inside these parentheses i need
06:00 - to pass a function a task that this
06:04 - worker thread will perform so my worker
06:07 - one will perform function one that is
06:10 - going to be its task and then i also
06:13 - want to create another thread called
06:16 - worker two and its job will be to
06:18 - execute function two okay so now my
06:23 - question for you is what is going to
06:24 - happen if i run my program again so
06:28 - let's run the program
06:30 - and this is the result
06:33 - what the heck what is this and there is
06:36 - one more thing that i want to show you
06:38 - so let's take a screenshot of this
06:40 - console and i will save this
06:43 - as an image and it is opening it on my
06:46 - second monitor let me fix this and i
06:48 - will be back so here is the result that
06:51 - we had the first time that we ran our
06:53 - application and what i want to do now is
06:56 - i want to run it again
06:58 - okay and let's compare this second and
07:02 - the first result
07:04 - and as you can see they are quite
07:06 - different so now your question might be
07:08 - what the heck is happening and wait wait
07:11 - wait wait
07:12 - it's not what it looks like i can
07:14 - explain this
07:16 - every time that you run your application
07:18 - you are going to get 200 plus symbols
07:21 - and 200 minus symbols that is something
07:24 - that you can predict but
07:26 - what you cannot predict is how the
07:29 - output is going to look like because
07:31 - that does not depend on you that depends
07:34 - on how fast those two threads are
07:36 - working so the thread that is faster
07:38 - will output first and then the thread
07:41 - that is slower will output second
07:43 - another thing that you cannot predict is
07:46 - for how long that faster thread will be
07:48 - able to write its data before that
07:52 - second thread jumps in and starts
07:54 - writing its data so
07:56 - that is why it is very important to
07:59 - divide your program in such way that
08:01 - each thread knows what is its job
08:04 - because if you don't believe me you can
08:07 - have major problems that are extremely
08:10 - hard to fix you can have situations like
08:12 - race conditions and thread locks and
08:15 - those are problems that can give you a
08:17 - headache but it is still too early to
08:20 - talk about those problems i will leave
08:21 - that for some other video because i want
08:23 - to teach you everything step by step and
08:26 - there are many more things that you need
08:28 - to learn before we start talking about
08:30 - those things
08:31 - there is another important thing that i
08:33 - want to show you and that is the
08:34 - following question can this worker
08:37 - thread execute a function that receives
08:40 - a parameter and the answer to that
08:42 - question is yes of course it can so let
08:44 - me show you how you can pass a parameter
08:48 - to a function that is executed by a
08:50 - thread so
08:52 - i will use this function here so i will
08:54 - pass a parameter of type char
08:56 - and i will call it
08:58 - symbol so instead of writing this plus
09:02 - symbol i will print this symbol that i
09:05 - received as parameter okay so what is
09:08 - going to happen if i run my program now
09:10 - let's see
09:13 - okay we have an error and if you read
09:17 - the description of that error it's very
09:19 - confusing especially for beginners and
09:22 - if you all of a sudden get this error
09:24 - and you are not familiar with it
09:26 - it will be very hard to fix it so
09:30 - the problem here is that our function
09:32 - one is receiving a parameter and then
09:35 - here when we are passing that function
09:37 - to our worker thread we are not
09:39 - specifying
09:41 - this parameter here so we need to pass
09:44 - this char symbol
09:46 - as well inside this worker thread so how
09:50 - do you do that it's actually very simple
09:52 - so you just add a comma sign and then
09:55 - you pass your parameters and here i will
09:58 - pass
09:59 - let's say for example i will pass letter
10:02 - o like this and if i run my program now
10:06 - as you can see everything works as
10:09 - expected
10:10 - one thing that i promised at the
10:12 - beginning is that i will demonstrate a
10:15 - real life example of when you would want
10:17 - to use multi-threading in order to solve
10:20 - a programming problem so let's do that
10:23 - now
10:24 - imagine the following situation you are
10:26 - building a weather forecast application
10:29 - and the data that you need the data
10:31 - about weather is on an api
10:34 - and also
10:36 - imagine that the api is far from you
10:39 - like very very far on the other end of
10:42 - the world
10:42 - so
10:43 - every time that you ask your api hey
10:46 - how's the weather it takes a couple of
10:48 - seconds for that information to come
10:50 - back and it might not seem like much a
10:53 - couple of seconds but in programming and
10:56 - i'm sure that you have experienced this
10:58 - yourself when you click on something and
11:01 - you wait for a couple of seconds for
11:02 - that operation to happen
11:05 - it can be quite frustrating so that is a
11:08 - problem that can be fixed using
11:10 - multi-threading a solution with threads
11:13 - is to create a thread that will work in
11:15 - the background and the job of that
11:18 - thread will be to get the data from the
11:20 - api and store it in your computer memory
11:23 - so it will create a cache and then its
11:26 - job will be also to refresh that data
11:29 - every couple of minutes or every couple
11:31 - of seconds that depends on what kind of
11:34 - data you are working with since we are
11:37 - working with weather data that is
11:38 - something that does not change every few
11:41 - seconds so you can refresh it every two
11:43 - minutes or every five minutes it depends
11:46 - so the job of that thread will be to
11:49 - refresh the data
11:51 - and then when your user asks hey how is
11:54 - the weather you are not going to send
11:56 - that request to the api but you will
11:59 - take that information from the data that
12:02 - is already available in your cache and
12:05 - that is going to happen instantly so
12:07 - there will be no that delay of a few
12:11 - seconds that is very very frustrating
12:14 - and that is how you can solve that
12:16 - problem using multi-threading so now i'm
12:19 - going to delete this code so that i can
12:22 - demonstrate how this would work in code
12:25 - so one more time
12:27 - we are going to create a thread and its
12:29 - job will be to refresh a weather
12:32 - forecast's data every two minutes or
12:34 - let's say two seconds it's too long to
12:36 - wait for two minutes in the video
12:39 - so it will refresh a weather forecast
12:41 - data every two seconds so the first
12:44 - thing that we need is we need that
12:46 - weather forecast data and since i don't
12:48 - have an api to work with right now we
12:51 - are going to create our own dummy data
12:53 - so let's do that so i will create a
12:56 - collection that will map the name of the
12:58 - city with the temperature in that city
13:02 - and the name of that collection is map
13:04 - and if you want to use it you need to
13:07 - say here
13:08 - include
13:10 - map and now you can create map
13:13 - collection so i will say std
13:15 - map so please create a map collection
13:18 - that will map the name of the city with
13:21 - the temperature so it will map std
13:25 - string type with inch type and one more
13:28 - thing that we need is we need to say
13:31 - include
13:32 - string as well
13:34 - okay
13:35 - so this here is the type and the name of
13:39 - this collection will be
13:41 - forecast
13:42 - map
13:43 - like this and the next step is to
13:46 - initialize the data so we are going to
13:49 - create some dummy data for our forecast
13:52 - map so how do you do that
13:54 - well you open these curly brackets and
13:57 - put semicolon at the end and then here
14:01 - we are going to create our city
14:03 - temperature pairs so i will open new
14:06 - curly brackets and inside these curly
14:08 - brackets i will
14:10 - create my city let's say for example new
14:12 - york
14:15 - like this and then the second is the
14:18 - temperature so let's say 15 which i'm
14:21 - probably wrong let me know what is
14:23 - current temperature where you live
14:25 - i live in mostad and it is currently six
14:28 - degrees celsius and it is four a.m
14:32 - okay
14:33 - so
14:34 - this is the first pair you put comma
14:38 - sign and then let's create the second
14:39 - pair so let's say for example
14:42 - mumbai and the temperature is 20 degrees
14:46 - and let's create third pair let's say
14:49 - for example
14:50 - berlin and the temperature is
14:53 - 18 degrees
14:55 - okay so this is our forecast map and
14:58 - this is dummy data that we created for
15:01 - it so let's now create a function that
15:03 - will perform this refreshing of the data
15:06 - every two seconds i'll create it here
15:10 - it will be of return type void and i
15:12 - will call it
15:13 - refresh forecast
15:16 - like this
15:17 - and
15:19 - this function will receive a parameter
15:21 - that parameter is going to be our
15:23 - forecast map so it is going to be this
15:27 - okay i'll just copy it so it is going to
15:30 - be a map of string and int and i will
15:34 - call that parameter forecast map
15:37 - okay
15:38 - so what is going to happen inside this
15:41 - function so since we don't have an api
15:43 - that we can work with we will have to
15:46 - simulate the behavior so inside this
15:49 - function i will go through all of the
15:51 - items of this forecast map and i will
15:55 - increment the temperature of every city
15:59 - so let's do that let's say
16:01 - for
16:03 - auto
16:05 - item so for every item from this
16:08 - forecast
16:10 - map
16:11 - what i want to do is i want to increment
16:13 - the temperature so i will say
16:15 - item dot second and item.second is the
16:20 - temperature item.first is the name of
16:23 - the city so item.second plus plus please
16:26 - increment the temperature and then
16:29 - another thing that i want to do is i
16:30 - want to write out the information about
16:32 - the city and the temperature in that
16:34 - city so i will say std
16:37 - c out
16:39 - so please write out item
16:42 - dot
16:43 - first
16:44 - okay
16:45 - and then let's separate it
16:48 - and then write out item dot
16:51 - second and i will add
16:53 - std end line
16:55 - at the end of each output like this
16:59 - okay the second step is as we said after
17:03 - we finish this increment so the update
17:06 - of our data we are going to sleep this
17:09 - thread for two minutes two seconds
17:12 - actually so here after this for loop
17:14 - finishes incrementing all of the data so
17:17 - updating all of the data i will say
17:21 - std
17:22 - this thread so it is the thread that we
17:25 - are currently working with please sleep
17:28 - this thread for 2 000 milliseconds which
17:32 - is two seconds okay and if you want to
17:36 - be able to use this ms milliseconds
17:38 - lateral what you have to do is you have
17:41 - to either say using namespace std
17:45 - and the error will disappear but a
17:47 - better approach would be to include just
17:49 - what you need for this literal here
17:51 - because this using namespace std will
17:53 - include the entire std namespace and
17:56 - what we need in this situation is the
17:58 - following so i will say include
18:02 - chrono that is the first thing and then
18:04 - i will also say using
18:07 - namespace oh what is this
18:09 - so using
18:11 - namespace
18:12 - it is here
18:14 - and the name of the namespace is std
18:18 - chrono
18:20 - literals
18:22 - something like this
18:25 - chrono
18:26 - literals is it chrono literal
18:30 - oh chrono literals like this okay
18:33 - perfect and now the error has
18:36 - disappeared
18:37 - the third step is to say to this refresh
18:39 - forecast function hey when i run my
18:42 - program and i start this refresh
18:44 - forecast that should happen every two
18:47 - seconds infinitely so while my program
18:50 - is running and in order to achieve that
18:53 - i will put this part of the code into an
18:56 - infinite loop
18:58 - okay so i will say
19:00 - while
19:01 - so while true which means forever while
19:05 - this program is running and i will put
19:08 - everything inside these curly brackets
19:10 - okay so i created an infinite loop and
19:13 - all of this code is inside that infinite
19:16 - loop so the next step which is fourth
19:19 - step i believe is to create a thread and
19:21 - then to start this function in a new
19:24 - thread so
19:26 - i will go to my main function and here i
19:29 - will create a new thread so i will say
19:31 - std
19:32 - thread
19:33 - and let's call that thread background
19:35 - worker so bg worker
19:39 - like this and the function that this
19:42 - background worker thread will execute is
19:45 - this function here refresh forecast like
19:49 - this
19:50 - and since this function here receives a
19:53 - parameter
19:54 - we need to pass that parameter here so
19:57 - i'll put comma sign and then i will pass
20:00 - this forecast map to my function like
20:04 - this okay so
20:06 - let's run our program and let's see what
20:08 - we are going to get
20:10 - so here is the first update and then the
20:13 - second and the third
20:15 - and fourth and so on as you can see the
20:17 - data is updating every two seconds but
20:20 - the temperatures are not changing so we
20:22 - have a bug let me check very quickly
20:25 - what is happening inside this function
20:27 - so the problem that we have is in this
20:30 - for loop here because here we are taking
20:33 - an item and creating a copy and if you
20:36 - want to change the item that is inside
20:38 - this forecast map so the original you
20:41 - need to take it by a reference like this
20:44 - so if you add this ampersand symbol it
20:47 - should work as expected so let's run it
20:49 - again
20:51 - okay
20:54 - and as you can see now
20:56 - temperatures are rising
20:57 - global warming is real and our program
21:00 - works as expected
21:03 - great
21:04 - hello beautiful people this is saldina
21:06 - from the edit and i'm currently in my
21:08 - pajamas and i just remembered something
21:11 - very important that i want to share with
21:12 - you
21:13 - so
21:14 - while we are watching these temperatures
21:16 - rise and after you have seen the
21:18 - solution and hopefully understood
21:21 - i wouldn't be me if i didn't also share
21:24 - some potential problems with this
21:26 - solution and i'm not telling you this to
21:29 - say that the solution is wrong it is
21:31 - just to teach you that in programming
21:33 - there is no such thing as one solution
21:36 - fits all and there is no the best
21:38 - solution solution that doesn't contain
21:40 - any bugs because there is no application
21:43 - that doesn't contain at least one bug
21:45 - except for very simple applications
21:47 - which are not even useful let's be
21:50 - honest so there will always be that one
21:52 - small edge case where your program will
21:55 - not behave the way that you think it
21:56 - will so the problem is following
21:59 - what is going to happen if you use this
22:02 - same approach for a mobile application
22:04 - so you decide to refresh the data every
22:07 - two seconds on your mobile phone well
22:10 - there are two potential scenarios the
22:13 - first one is that your mobile phone is
22:15 - connected to a wi-fi so most likely
22:17 - there will be no problem but
22:20 - what if your mobile user is not on the
22:22 - wi-fi and he's using his credit he's
22:25 - gigabytes which means he's paying with
22:27 - his money for the amount of gigabytes
22:29 - that he spends and you are doing that
22:32 - refreshing in the background and
22:33 - spending his money
22:35 - well in that situation when the user
22:38 - figures that out he will uninstall your
22:40 - application and give you a bad review so
22:43 - that is one potential problem that you
22:45 - need to think about as a programmer and
22:48 - don't be hard on yourself if you cannot
22:50 - do it right now and if you cannot
22:52 - recognize the problems that can happen
22:54 - in your application because that is
22:56 - something that comes with experience and
22:58 - time and please let me know if it is
23:01 - useful for you that i explain and
23:03 - mention these problems as well because
23:05 - it takes me more time but i'm doing it
23:07 - because i believe that you should as a
23:09 - programmer or as a future programmer be
23:12 - aware of these things and you should
23:14 - learn to think as a programmer so when
23:17 - you are writing your code you should
23:19 - think about the potential problems that
23:21 - can emerge in that code in the future
23:24 - because there is no such thing as
23:25 - perfect code it is always a compromise
23:28 - so give a little bit of something in
23:30 - order to get more of something else so i
23:33 - really wanted to jump in while editing
23:35 - to share this information with you
23:36 - because i think that it is very
23:38 - important that you see this side of
23:40 - programming as well it will develop your
23:43 - programming logic because the more
23:45 - problems that you see and the more
23:46 - problems that you solve the better
23:48 - programmer that you will become
23:50 - and this will transfer to solving
23:52 - problems in your real life as well so i
23:55 - would love to share more tips and info
23:57 - like this in the future if you want of
23:59 - course so let me know give this video a
24:02 - thumbs up if you want more information
24:04 - like this and then give it a thumbs down
24:06 - if you don't so that i know for the
24:07 - future videos
24:09 - so thank you very much for watching and
24:11 - i'm going to see you in some other video
24:13 - bye

Cleaned transcript:

hello guys and welcome to my channel in this video i will teach you about multithreading in modern c plus plus so i will explain what is multithreading why is it important how it works in modern c plus i will give you a reallife example of when i use multithreading for work when i'm coding and i will also explain the difference between multithreading and multitasking because that is something that confuses many people so if you want to learn about multithreading in modern c plus this is the right video for you and you will find everything that you need in this video even if you are a complete beginner so let's talk about multithreading if you are a beginner and if you want to understand multithreading you are going to find a bunch of very complex definitions on the internet that are very hard to comprehend but it doesn't have to be like that and in this video i will give you a simple and easy explanation oh so an interesting fact is that multithreading was introduced with c plus 11 and prior to that if you wanted to work with threats it was much harder and there were several issues and problems but now in modern c plus there is a very easy way to work with threads and i will show you that in a moment because the first thing that i want to explain is what is multithreading and the most general definition is that multithreading is the ability of multiple parts of one program to be executed at the same time and there are two ways to achieve this the first way is multitasking so how do i explain multitasking imagine a situation where you are doing your homework and texting with your friend so you are doing two things at the same time or not if you really think about this you are not doing two tasks at the same time you are just switching between the first task and the second task and computers can do this as well with one very important difference which is that computers can switch between these two tasks so fast that it becomes unnoticeable to human eye so it really seems like a parallel execution but this is not real multithreading this is multitasking the second way is real multithreading and real multitrading means that you write and divide your program in such way that individual parts of that program can be executed at the same time an example of this multithreading in real life is let's say for example that you and your girlfriend or boyfriend whichever you have you decide to prepare the lunch together so that is the problem that you need to solve prepare the lunch and you decide to split that job in such way that both of you can perform your part of the job at the same time so for example the job of your girlfriend is to to clean vegetables to peel them slice them and add them to the pot and then your part of the job is to um to stir the mixture all the time okay so you are two threads who are performing their part of the job and both of you can be executed at the same time and that is how real multithreading works so now your question might be how does this work in computers well if your pc has two cores the first score is going to take the first thread the second quarter is going to take the second thread and both of them can work at the same time simple as that so let's now switch to visual studio in order to see how this works in code so in order to understand how multithreading works let's create two simple functions i will create them here i will say void function 1 and the job of this function will be to write out plus symbol 200 times very simple so i will say 4 and i is equal to 0 i is less than 200 i plus plus and here i will just say std c out and then i will print this symbol here okay so that is the job of the first function and then let's create a second function it will be called function 2 and its job will be to write out minus symbol 200 times so if i invoke these two functions so function 1 and function2 and if i run this program we get this behavior here so every time that i run this program we will get this very predictable behavior which is 200 of these plus symbols and then 200 of minus symbols so what is going to happen if i now make this program a multithreaded application so what is going to happen if i say hey this function will be executed in one thread and this second function will be executed in the second thread let's do that so what are steps to make this application a multithreaded application the first step is if you want to work with threads you need to include thread header files so i will say include thread okay and now what we are going to do is we are going to create a thread i will delete this i don't need it anymore so i will create a thread std thread okay so this is the type and then i will give the name to my thread i will call it worker 1 like this and here inside these parentheses i need to pass a function a task that this worker thread will perform so my worker one will perform function one that is going to be its task and then i also want to create another thread called worker two and its job will be to execute function two okay so now my question for you is what is going to happen if i run my program again so let's run the program and this is the result what the heck what is this and there is one more thing that i want to show you so let's take a screenshot of this console and i will save this as an image and it is opening it on my second monitor let me fix this and i will be back so here is the result that we had the first time that we ran our application and what i want to do now is i want to run it again okay and let's compare this second and the first result and as you can see they are quite different so now your question might be what the heck is happening and wait wait wait wait it's not what it looks like i can explain this every time that you run your application you are going to get 200 plus symbols and 200 minus symbols that is something that you can predict but what you cannot predict is how the output is going to look like because that does not depend on you that depends on how fast those two threads are working so the thread that is faster will output first and then the thread that is slower will output second another thing that you cannot predict is for how long that faster thread will be able to write its data before that second thread jumps in and starts writing its data so that is why it is very important to divide your program in such way that each thread knows what is its job because if you don't believe me you can have major problems that are extremely hard to fix you can have situations like race conditions and thread locks and those are problems that can give you a headache but it is still too early to talk about those problems i will leave that for some other video because i want to teach you everything step by step and there are many more things that you need to learn before we start talking about those things there is another important thing that i want to show you and that is the following question can this worker thread execute a function that receives a parameter and the answer to that question is yes of course it can so let me show you how you can pass a parameter to a function that is executed by a thread so i will use this function here so i will pass a parameter of type char and i will call it symbol so instead of writing this plus symbol i will print this symbol that i received as parameter okay so what is going to happen if i run my program now let's see okay we have an error and if you read the description of that error it's very confusing especially for beginners and if you all of a sudden get this error and you are not familiar with it it will be very hard to fix it so the problem here is that our function one is receiving a parameter and then here when we are passing that function to our worker thread we are not specifying this parameter here so we need to pass this char symbol as well inside this worker thread so how do you do that it's actually very simple so you just add a comma sign and then you pass your parameters and here i will pass let's say for example i will pass letter o like this and if i run my program now as you can see everything works as expected one thing that i promised at the beginning is that i will demonstrate a real life example of when you would want to use multithreading in order to solve a programming problem so let's do that now imagine the following situation you are building a weather forecast application and the data that you need the data about weather is on an api and also imagine that the api is far from you like very very far on the other end of the world so every time that you ask your api hey how's the weather it takes a couple of seconds for that information to come back and it might not seem like much a couple of seconds but in programming and i'm sure that you have experienced this yourself when you click on something and you wait for a couple of seconds for that operation to happen it can be quite frustrating so that is a problem that can be fixed using multithreading a solution with threads is to create a thread that will work in the background and the job of that thread will be to get the data from the api and store it in your computer memory so it will create a cache and then its job will be also to refresh that data every couple of minutes or every couple of seconds that depends on what kind of data you are working with since we are working with weather data that is something that does not change every few seconds so you can refresh it every two minutes or every five minutes it depends so the job of that thread will be to refresh the data and then when your user asks hey how is the weather you are not going to send that request to the api but you will take that information from the data that is already available in your cache and that is going to happen instantly so there will be no that delay of a few seconds that is very very frustrating and that is how you can solve that problem using multithreading so now i'm going to delete this code so that i can demonstrate how this would work in code so one more time we are going to create a thread and its job will be to refresh a weather forecast's data every two minutes or let's say two seconds it's too long to wait for two minutes in the video so it will refresh a weather forecast data every two seconds so the first thing that we need is we need that weather forecast data and since i don't have an api to work with right now we are going to create our own dummy data so let's do that so i will create a collection that will map the name of the city with the temperature in that city and the name of that collection is map and if you want to use it you need to say here include map and now you can create map collection so i will say std map so please create a map collection that will map the name of the city with the temperature so it will map std string type with inch type and one more thing that we need is we need to say include string as well okay so this here is the type and the name of this collection will be forecast map like this and the next step is to initialize the data so we are going to create some dummy data for our forecast map so how do you do that well you open these curly brackets and put semicolon at the end and then here we are going to create our city temperature pairs so i will open new curly brackets and inside these curly brackets i will create my city let's say for example new york like this and then the second is the temperature so let's say 15 which i'm probably wrong let me know what is current temperature where you live i live in mostad and it is currently six degrees celsius and it is four a.m okay so this is the first pair you put comma sign and then let's create the second pair so let's say for example mumbai and the temperature is 20 degrees and let's create third pair let's say for example berlin and the temperature is 18 degrees okay so this is our forecast map and this is dummy data that we created for it so let's now create a function that will perform this refreshing of the data every two seconds i'll create it here it will be of return type void and i will call it refresh forecast like this and this function will receive a parameter that parameter is going to be our forecast map so it is going to be this okay i'll just copy it so it is going to be a map of string and int and i will call that parameter forecast map okay so what is going to happen inside this function so since we don't have an api that we can work with we will have to simulate the behavior so inside this function i will go through all of the items of this forecast map and i will increment the temperature of every city so let's do that let's say for auto item so for every item from this forecast map what i want to do is i want to increment the temperature so i will say item dot second and item.second is the temperature item.first is the name of the city so item.second plus plus please increment the temperature and then another thing that i want to do is i want to write out the information about the city and the temperature in that city so i will say std c out so please write out item dot first okay and then let's separate it and then write out item dot second and i will add std end line at the end of each output like this okay the second step is as we said after we finish this increment so the update of our data we are going to sleep this thread for two minutes two seconds actually so here after this for loop finishes incrementing all of the data so updating all of the data i will say std this thread so it is the thread that we are currently working with please sleep this thread for 2 000 milliseconds which is two seconds okay and if you want to be able to use this ms milliseconds lateral what you have to do is you have to either say using namespace std and the error will disappear but a better approach would be to include just what you need for this literal here because this using namespace std will include the entire std namespace and what we need in this situation is the following so i will say include chrono that is the first thing and then i will also say using namespace oh what is this so using namespace it is here and the name of the namespace is std chrono literals something like this chrono literals is it chrono literal oh chrono literals like this okay perfect and now the error has disappeared the third step is to say to this refresh forecast function hey when i run my program and i start this refresh forecast that should happen every two seconds infinitely so while my program is running and in order to achieve that i will put this part of the code into an infinite loop okay so i will say while so while true which means forever while this program is running and i will put everything inside these curly brackets okay so i created an infinite loop and all of this code is inside that infinite loop so the next step which is fourth step i believe is to create a thread and then to start this function in a new thread so i will go to my main function and here i will create a new thread so i will say std thread and let's call that thread background worker so bg worker like this and the function that this background worker thread will execute is this function here refresh forecast like this and since this function here receives a parameter we need to pass that parameter here so i'll put comma sign and then i will pass this forecast map to my function like this okay so let's run our program and let's see what we are going to get so here is the first update and then the second and the third and fourth and so on as you can see the data is updating every two seconds but the temperatures are not changing so we have a bug let me check very quickly what is happening inside this function so the problem that we have is in this for loop here because here we are taking an item and creating a copy and if you want to change the item that is inside this forecast map so the original you need to take it by a reference like this so if you add this ampersand symbol it should work as expected so let's run it again okay and as you can see now temperatures are rising global warming is real and our program works as expected great hello beautiful people this is saldina from the edit and i'm currently in my pajamas and i just remembered something very important that i want to share with you so while we are watching these temperatures rise and after you have seen the solution and hopefully understood i wouldn't be me if i didn't also share some potential problems with this solution and i'm not telling you this to say that the solution is wrong it is just to teach you that in programming there is no such thing as one solution fits all and there is no the best solution solution that doesn't contain any bugs because there is no application that doesn't contain at least one bug except for very simple applications which are not even useful let's be honest so there will always be that one small edge case where your program will not behave the way that you think it will so the problem is following what is going to happen if you use this same approach for a mobile application so you decide to refresh the data every two seconds on your mobile phone well there are two potential scenarios the first one is that your mobile phone is connected to a wifi so most likely there will be no problem but what if your mobile user is not on the wifi and he's using his credit he's gigabytes which means he's paying with his money for the amount of gigabytes that he spends and you are doing that refreshing in the background and spending his money well in that situation when the user figures that out he will uninstall your application and give you a bad review so that is one potential problem that you need to think about as a programmer and don't be hard on yourself if you cannot do it right now and if you cannot recognize the problems that can happen in your application because that is something that comes with experience and time and please let me know if it is useful for you that i explain and mention these problems as well because it takes me more time but i'm doing it because i believe that you should as a programmer or as a future programmer be aware of these things and you should learn to think as a programmer so when you are writing your code you should think about the potential problems that can emerge in that code in the future because there is no such thing as perfect code it is always a compromise so give a little bit of something in order to get more of something else so i really wanted to jump in while editing to share this information with you because i think that it is very important that you see this side of programming as well it will develop your programming logic because the more problems that you see and the more problems that you solve the better programmer that you will become and this will transfer to solving problems in your real life as well so i would love to share more tips and info like this in the future if you want of course so let me know give this video a thumbs up if you want more information like this and then give it a thumbs down if you don't so that i know for the future videos so thank you very much for watching and i'm going to see you in some other video bye
