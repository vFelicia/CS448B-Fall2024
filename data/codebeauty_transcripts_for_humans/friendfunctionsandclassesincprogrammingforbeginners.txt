With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to teach you about
00:04 - friend functions and friend classes in c
00:07 - plus
00:08 - so
00:09 - this concept of friendship in
00:10 - programming is actually very similar to
00:12 - friendship in real life so in real life
00:15 - your friends have access to private
00:17 - areas of your life that are inaccessible
00:20 - to other people and this same applies to
00:23 - programming because in object-oriented
00:25 - programming a friend function has access
00:28 - to private and protected members of a
00:32 - class and it can access those private
00:35 - and protected members only because they
00:37 - are in this friendship relationship so
00:39 - in this video you will learn about
00:42 - friend functions and friend classes and
00:44 - you will understand how and when to use
00:46 - those for writing the code we will use
00:49 - visual studio community and i also want
00:52 - to show you one of the best extensions
00:54 - for visual studio it is called visual
00:56 - assist and i will leave a link in the
00:59 - description that you can use in order to
01:00 - download it so what is visual assist it
01:04 - is smart coding assistant and a lot of
01:06 - professional developers use it
01:08 - especially if they are working for
01:09 - example with unreal engine making games
01:12 - or if they are working on large projects
01:14 - with a lot of code in general the reason
01:17 - is because visual assist helps a lot
01:19 - with code completion and then it also
01:22 - gives you smart suggestions when you are
01:23 - refactoring your code it gives you code
01:26 - snippets so that you don't have to type
01:28 - everything manually and then the best
01:30 - thing is that it helps a lot with
01:32 - navigation and searching through the
01:34 - project especially if you're working on
01:36 - a big project that has a lot of code a
01:38 - lot of files
01:40 - and then also it has the option to
01:42 - enhance intellisense and you can
01:45 - customize the appearance of your visual
01:47 - studio like syntax highlighting and
01:49 - things like that so definitely if you
01:51 - want to learn more about visual assist
01:53 - check out the video that i will link
01:55 - here i'll also link it in the
01:57 - description and in that video you will
01:59 - learn about my favorite features of
02:01 - visual assist you will learn how to
02:03 - install it and how it can help you to
02:05 - write better code faster so let's now
02:08 - explain what are friend functions and
02:10 - the best way to explain this is to
02:13 - create a problem and then i'm going to
02:15 - show you how you can use front functions
02:17 - in order to solve that problem so let's
02:20 - do that so let's create a class called
02:22 - equilateral triangle and that is a
02:25 - triangle that has all three sides of the
02:27 - same length so
02:29 - a a a
02:31 - let's say class
02:33 - equilateral triangle okay and i will
02:37 - create a variable of type float i will
02:40 - call it a this variable here represents
02:43 - the length of the side of this triangle
02:46 - let's add couple more variables let's
02:48 - say
02:49 - float
02:50 - circumference
02:55 - okay and let's also say float
02:58 - area
03:00 - okay
03:00 - so these three are going to be private
03:03 - because members of a class are private
03:05 - by default so this here is the same as
03:08 - if you said
03:10 - private explicitly like this
03:13 - okay
03:14 - and then let's create a public member as
03:17 - well so i will say
03:18 - public
03:20 - and here i want to create a setter for
03:23 - this variable here so i will create a
03:25 - method of return type void i will call
03:28 - it set
03:29 - a
03:30 - it will receive a parameter of type
03:33 - float called length
03:37 - okay
03:38 - and i will say that a is equal to
03:41 - length like this and something else that
03:44 - i want to do is i also want to calculate
03:47 - this circumference because i have the
03:49 - length of the side and i also want to
03:51 - calculate the area here inside this
03:53 - setter so i will say
03:55 - circumference is equal to a plus a plus
03:59 - a
04:00 - okay and this can shortly be written as
04:03 - a multiplied by three
04:06 - and then let's say area is equal to
04:11 - and the formula for area is
04:20 - [Music]
04:22 - so it is square root of 3 which is 173
04:26 - multiplied by a to the power of two
04:29 - divided by four
04:32 - there was a time when i knew this
04:34 - so after we have written this let's move
04:37 - to our main function because i want to
04:39 - create an object of equilateral triangle
04:43 - so i will say
04:44 - e t
04:45 - equilateral triangle
04:47 - okay and i will say e t dot
04:50 - set a
04:51 - and let's pass the value of three okay
04:55 - now what i want to do is i want to
04:57 - access these two i want to write out how
05:01 - much is circumference of this triangle
05:03 - and then how much is the area of this
05:06 - triangle here so i won't say c out
05:10 - let's say
05:11 - circumference
05:14 - like this
05:16 - is equal to
05:18 - e t dot
05:19 - circumference let's add end line okay
05:23 - and then another thing that i want to
05:24 - know is the area so i will say area is
05:27 - equal to e t dot
05:30 - area
05:30 - now if i try to run this program or if i
05:33 - simply hover over these errors because
05:35 - we already have errors you will see that
05:38 - it says that member circumference of
05:41 - equilateral triangle class is
05:43 - inaccessible and we have the same
05:45 - message for this area member so the
05:48 - reason for that is because these two are
05:52 - private and the private members of a
05:54 - class cannot be accessed outside of that
05:57 - class so there are a couple of ways to
06:00 - fix this problem and one of them is by
06:02 - using friend functions now other
06:05 - solutions are to make these two public
06:08 - so i will just move them to public area
06:11 - and as you can see the errors have
06:14 - disappeared and if i run my program
06:18 - as you can see the program works and we
06:20 - get the result so circumference is equal
06:22 - to nine and that area is equal to three
06:25 - point eight nine that is the first
06:28 - solution the second solution is to move
06:30 - this to private area
06:32 - as well like it was before but to create
06:36 - getter for this circumference member and
06:39 - then for area as well and to make those
06:41 - two getters public so that we can access
06:45 - those functions outside of the class now
06:47 - the problem that i see with those two
06:49 - solutions is that if you make these two
06:51 - public or if you create public getters
06:55 - you are going to make them available to
06:57 - everyone outside of this class here so
07:01 - what happens in a situation where for
07:03 - example we are very smart so we came up
07:06 - with these two formulas that means
07:08 - probably that we don't want to share
07:10 - them with everyone maybe we just want to
07:12 - share them with very close friends so
07:15 - that is the third solution and the one
07:17 - that i'm going to show you so how you
07:19 - can solve the problem that we currently
07:21 - have by using friend functions so what
07:24 - we can do is we can create a function
07:27 - that is not going to be a member of this
07:29 - class but it is going to be a friend of
07:32 - the equilateral triangle class and that
07:35 - means that because it is the friend of
07:38 - the class it will have access to all the
07:40 - private and protected members of that
07:43 - class so let's create that function so i
07:46 - will create a global function outside of
07:48 - this equilateral triangle class
07:51 - i will create it here so i will say void
07:56 - and let's call it print results
08:00 - like this
08:02 - and this function will receive one
08:04 - parameter of type equilateral triangle
08:07 - i'll call it et
08:10 - okay
08:11 - and here i will put the definition of
08:14 - that function and the job of this
08:15 - function will be to print the results of
08:18 - circumference and area of the triangle
08:21 - so i will just copy this code actually i
08:24 - will remove it from here and i will
08:26 - paste it into my print results function
08:30 - okay
08:31 - so
08:32 - what do you expect to happen now if i
08:34 - run my program let's see
08:37 - okay we still have the error and it is
08:40 - the same error that we had before it
08:42 - says circumference is inaccessible and
08:44 - then area is inaccessible as well and
08:47 - the reason for that is because we just
08:49 - created a function we didn't make that
08:51 - function a friend of our class so how do
08:54 - you declare a function to be a friend of
08:57 - your class it's actually very easy to do
08:59 - that so you just say
09:01 - hey equilateral triangle you will have a
09:04 - friend and that friend will be this
09:07 - function here so i will copy the
09:10 - declaration of the function
09:13 - okay and then you don't even have to
09:15 - specify the name of the parameter you
09:18 - have to specify the type but the name
09:20 - you don't have to specify and that is
09:22 - all so basically you just say friend and
09:24 - then you copy the declaration of that
09:27 - function and now everything should work
09:29 - so if i run my program again
09:33 - okay
09:34 - we have one more problem so if you
09:37 - already know what the problem is let me
09:39 - know in the comments before i tell you
09:41 - what the problem is
09:43 - so let's go to our main function and as
09:46 - you can see here we still haven't
09:48 - invoked this print results function so
09:50 - that is why we are getting empty console
09:53 - so i will say print results and then
09:55 - here i will pass my et
09:58 - so i'll pass this equilateral triangle
10:01 - that has the side length of three and if
10:04 - i run my program now
10:07 - now everything works as expected and one
10:10 - more time the reason why we have access
10:14 - to these two private members of
10:15 - equilateral triangle class inside this
10:19 - function here called print results is
10:21 - because that function is a friend of our
10:25 - class and as you could see previously we
10:28 - don't have access to these two outside
10:30 - of this class except in this friend
10:34 - function a common question related to
10:36 - this is
10:37 - can a class have multiple friend
10:39 - functions and the answer to that
10:41 - question is yes it can so the same way
10:44 - that you can have multiple friends in
10:45 - real life in programming your class also
10:48 - can have multiple friend functions now
10:51 - one very important thing to keep in mind
10:54 - is to choose your friends carefully and
10:56 - this should be applied to programming as
10:58 - well so choose your friend functions
11:01 - carefully you don't want to have a lot
11:03 - of friend functions because if you have
11:05 - a lot of friend functions then you are
11:07 - breaking the whole idea and concept of
11:10 - encapsulation which says that there are
11:13 - certain members and certain data that
11:16 - should stay private inside that class
11:18 - and that shouldn't be accessible outside
11:21 - of that class so be very sparing with
11:24 - this friendship functionality another
11:26 - interesting thing is that in programming
11:28 - we are not limited only to friend
11:31 - functions we can also have friend
11:33 - classes so let me show you how this
11:36 - works so let's create a class called
11:39 - homework i'll create it here so i'll say
11:43 - class
11:44 - homework
11:47 - like this let's make it capital letter h
11:50 - okay
11:51 - so what i want to do is i want to move
11:54 - this function inside my class
11:57 - and i will also make it public
11:59 - like this now immediately we get two
12:02 - errors and those are the same errors
12:05 - that we have seen previously so
12:06 - circumference is inaccessible and then
12:09 - area is inaccessible and the reason why
12:12 - we are getting these two errors is
12:14 - because here
12:16 - inside our equilateral triangle class we
12:19 - are saying hey
12:20 - you have a friend function which is this
12:24 - function here so it is a global function
12:26 - called print results that receives one
12:29 - parameter of type equilateral triangle
12:32 - now
12:33 - what has changed is that this function
12:36 - here this print results is not global
12:39 - function anymore now it is a member
12:42 - function of this class here and that is
12:44 - the reason why this here does not work
12:48 - because as you can see if you hover over
12:50 - this it says that function definition
12:53 - for print result is not found so we
12:56 - don't have this function anymore so in
12:58 - order to fix the error that we have now
13:01 - what we can do is we can make this class
13:04 - so this entire class a friend of this
13:08 - class here so i'm going to comment this
13:11 - part out and i will add a friend class
13:14 - to this equilateral triangle so how do
13:17 - you do that it's actually very easy so
13:19 - again you say hey you will have a friend
13:23 - but this time it is going to be a friend
13:25 - class like this and then you specify the
13:28 - name of that class
13:30 - okay so now this equilateral triangle
13:33 - has a friend class called homework and
13:36 - if i scroll as you can see the errors
13:39 - that we previously had have disappeared
13:42 - but we still have an error inside our
13:44 - main function which says identifier
13:47 - print results is undefined and the
13:50 - reason why we are getting this error if
13:52 - you know write it in the comment section
13:55 - so the reason why we are getting this
13:57 - error is because this is not a global
14:00 - function anymore it does not exist in a
14:02 - global scope now it exists only as a
14:06 - member function of this class and as
14:09 - such so as a member function it can only
14:12 - be invoked by using an object of that
14:15 - class so in order to invoke this print
14:18 - results function we need to create an
14:20 - object of type homework call it
14:24 - h and then we can invoke this print
14:27 - results by saying h dot print results
14:30 - again that is because this function here
14:34 - is now a member of this homework class
14:38 - so if i run my program now
14:42 - as you can see again we are getting the
14:45 - result of our calculations and there are
14:48 - also a few useful tips that i want to
14:50 - share related to this so
14:52 - tip number one as i already said use
14:55 - this friendship concept sparingly in
14:58 - programming because if you make too many
15:00 - friends in programming you are going to
15:03 - break the whole idea and concept of
15:06 - encapsulation and if you don't know what
15:08 - encapsulation is and how it works i'm
15:10 - going to link a video in the description
15:12 - so make sure to watch that video tip
15:14 - number two is that friendship is not
15:16 - mutual in programming so that means that
15:20 - here we have a friend class called
15:23 - homework inside our equilateral triangle
15:26 - class that means that we can access
15:29 - inside this homework class we can access
15:32 - all of the private and protected
15:34 - properties of our equilateral triangle
15:36 - but not vice versa so if this homework
15:39 - class had any private or protected
15:42 - members we couldn't access those inside
15:45 - our equilateral triangle because again
15:48 - friendship in programming is not mutual
15:51 - tip number three is that friendship is
15:53 - not inherited which means that if you
15:55 - have a base class that has a friend
15:58 - function that friend function will not
16:00 - by default be a friend of the derived
16:03 - classes of that base class so again
16:06 - friendship is not
16:08 - inherited and if you want to learn more
16:10 - about inheritance in programming i am
16:12 - going to link a video here and also in
16:14 - the description so make sure to watch
16:16 - that if you don't understand what base
16:19 - class is and what derived class is tip
16:22 - number four is actually a homework for
16:24 - you and that is one of the most common
16:26 - uses of friend functions so friend
16:28 - functions are used very often when you
16:31 - are overloading operators and if you are
16:34 - not familiar with operator overloading i
16:36 - have a video that i will link here and
16:38 - also in the description so make sure to
16:40 - watch that video because you will get a
16:43 - homework related to that video so in
16:46 - that video i purposely used structures
16:49 - to overload operators instead of classes
16:52 - now the main difference between a
16:54 - structure and a class is that
16:56 - all members of a structure are public by
16:59 - default and then all members of a class
17:02 - are private by default so when you are
17:05 - overloading operators for a structure
17:07 - you don't need to create friend
17:08 - functions in order to access public
17:11 - members because they are public but when
17:13 - you are working with classes and those
17:15 - members are private by default so if you
17:18 - want to access them outside of that
17:19 - class you need to create a friend
17:22 - function for that overloaded operator so
17:25 - your homework will be to watch that
17:27 - video and then instead of using
17:29 - structures you should use classes so
17:32 - where i used structures you use classes
17:35 - and all the problems that arise in that
17:37 - process you should solve them by using
17:40 - friend functions and if you manage to
17:43 - get to a correct solution you can paste
17:46 - it in the comment section and i will as
17:48 - well paste my solution and pin it in a
17:50 - comment so that you can compare it with
17:52 - yours so thank you very much for
17:54 - watching and if you enjoyed this video
17:56 - please give it a big thumbs up for the
17:58 - youtube algorithm and because that means
18:00 - a lot to me and also share it with your
18:03 - friends who would like to learn about
18:05 - friend functions
18:08 - friends friend functions
18:10 - you came here for programming but you
18:12 - stayed because i'm extremely amusing i
18:15 - know
18:17 - okay bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to teach you about friend functions and friend classes in c plus so this concept of friendship in programming is actually very similar to friendship in real life so in real life your friends have access to private areas of your life that are inaccessible to other people and this same applies to programming because in objectoriented programming a friend function has access to private and protected members of a class and it can access those private and protected members only because they are in this friendship relationship so in this video you will learn about friend functions and friend classes and you will understand how and when to use those for writing the code we will use visual studio community and i also want to show you one of the best extensions for visual studio it is called visual assist and i will leave a link in the description that you can use in order to download it so what is visual assist it is smart coding assistant and a lot of professional developers use it especially if they are working for example with unreal engine making games or if they are working on large projects with a lot of code in general the reason is because visual assist helps a lot with code completion and then it also gives you smart suggestions when you are refactoring your code it gives you code snippets so that you don't have to type everything manually and then the best thing is that it helps a lot with navigation and searching through the project especially if you're working on a big project that has a lot of code a lot of files and then also it has the option to enhance intellisense and you can customize the appearance of your visual studio like syntax highlighting and things like that so definitely if you want to learn more about visual assist check out the video that i will link here i'll also link it in the description and in that video you will learn about my favorite features of visual assist you will learn how to install it and how it can help you to write better code faster so let's now explain what are friend functions and the best way to explain this is to create a problem and then i'm going to show you how you can use front functions in order to solve that problem so let's do that so let's create a class called equilateral triangle and that is a triangle that has all three sides of the same length so a a a let's say class equilateral triangle okay and i will create a variable of type float i will call it a this variable here represents the length of the side of this triangle let's add couple more variables let's say float circumference okay and let's also say float area okay so these three are going to be private because members of a class are private by default so this here is the same as if you said private explicitly like this okay and then let's create a public member as well so i will say public and here i want to create a setter for this variable here so i will create a method of return type void i will call it set a it will receive a parameter of type float called length okay and i will say that a is equal to length like this and something else that i want to do is i also want to calculate this circumference because i have the length of the side and i also want to calculate the area here inside this setter so i will say circumference is equal to a plus a plus a okay and this can shortly be written as a multiplied by three and then let's say area is equal to and the formula for area is so it is square root of 3 which is 173 multiplied by a to the power of two divided by four there was a time when i knew this so after we have written this let's move to our main function because i want to create an object of equilateral triangle so i will say e t equilateral triangle okay and i will say e t dot set a and let's pass the value of three okay now what i want to do is i want to access these two i want to write out how much is circumference of this triangle and then how much is the area of this triangle here so i won't say c out let's say circumference like this is equal to e t dot circumference let's add end line okay and then another thing that i want to know is the area so i will say area is equal to e t dot area now if i try to run this program or if i simply hover over these errors because we already have errors you will see that it says that member circumference of equilateral triangle class is inaccessible and we have the same message for this area member so the reason for that is because these two are private and the private members of a class cannot be accessed outside of that class so there are a couple of ways to fix this problem and one of them is by using friend functions now other solutions are to make these two public so i will just move them to public area and as you can see the errors have disappeared and if i run my program as you can see the program works and we get the result so circumference is equal to nine and that area is equal to three point eight nine that is the first solution the second solution is to move this to private area as well like it was before but to create getter for this circumference member and then for area as well and to make those two getters public so that we can access those functions outside of the class now the problem that i see with those two solutions is that if you make these two public or if you create public getters you are going to make them available to everyone outside of this class here so what happens in a situation where for example we are very smart so we came up with these two formulas that means probably that we don't want to share them with everyone maybe we just want to share them with very close friends so that is the third solution and the one that i'm going to show you so how you can solve the problem that we currently have by using friend functions so what we can do is we can create a function that is not going to be a member of this class but it is going to be a friend of the equilateral triangle class and that means that because it is the friend of the class it will have access to all the private and protected members of that class so let's create that function so i will create a global function outside of this equilateral triangle class i will create it here so i will say void and let's call it print results like this and this function will receive one parameter of type equilateral triangle i'll call it et okay and here i will put the definition of that function and the job of this function will be to print the results of circumference and area of the triangle so i will just copy this code actually i will remove it from here and i will paste it into my print results function okay so what do you expect to happen now if i run my program let's see okay we still have the error and it is the same error that we had before it says circumference is inaccessible and then area is inaccessible as well and the reason for that is because we just created a function we didn't make that function a friend of our class so how do you declare a function to be a friend of your class it's actually very easy to do that so you just say hey equilateral triangle you will have a friend and that friend will be this function here so i will copy the declaration of the function okay and then you don't even have to specify the name of the parameter you have to specify the type but the name you don't have to specify and that is all so basically you just say friend and then you copy the declaration of that function and now everything should work so if i run my program again okay we have one more problem so if you already know what the problem is let me know in the comments before i tell you what the problem is so let's go to our main function and as you can see here we still haven't invoked this print results function so that is why we are getting empty console so i will say print results and then here i will pass my et so i'll pass this equilateral triangle that has the side length of three and if i run my program now now everything works as expected and one more time the reason why we have access to these two private members of equilateral triangle class inside this function here called print results is because that function is a friend of our class and as you could see previously we don't have access to these two outside of this class except in this friend function a common question related to this is can a class have multiple friend functions and the answer to that question is yes it can so the same way that you can have multiple friends in real life in programming your class also can have multiple friend functions now one very important thing to keep in mind is to choose your friends carefully and this should be applied to programming as well so choose your friend functions carefully you don't want to have a lot of friend functions because if you have a lot of friend functions then you are breaking the whole idea and concept of encapsulation which says that there are certain members and certain data that should stay private inside that class and that shouldn't be accessible outside of that class so be very sparing with this friendship functionality another interesting thing is that in programming we are not limited only to friend functions we can also have friend classes so let me show you how this works so let's create a class called homework i'll create it here so i'll say class homework like this let's make it capital letter h okay so what i want to do is i want to move this function inside my class and i will also make it public like this now immediately we get two errors and those are the same errors that we have seen previously so circumference is inaccessible and then area is inaccessible and the reason why we are getting these two errors is because here inside our equilateral triangle class we are saying hey you have a friend function which is this function here so it is a global function called print results that receives one parameter of type equilateral triangle now what has changed is that this function here this print results is not global function anymore now it is a member function of this class here and that is the reason why this here does not work because as you can see if you hover over this it says that function definition for print result is not found so we don't have this function anymore so in order to fix the error that we have now what we can do is we can make this class so this entire class a friend of this class here so i'm going to comment this part out and i will add a friend class to this equilateral triangle so how do you do that it's actually very easy so again you say hey you will have a friend but this time it is going to be a friend class like this and then you specify the name of that class okay so now this equilateral triangle has a friend class called homework and if i scroll as you can see the errors that we previously had have disappeared but we still have an error inside our main function which says identifier print results is undefined and the reason why we are getting this error if you know write it in the comment section so the reason why we are getting this error is because this is not a global function anymore it does not exist in a global scope now it exists only as a member function of this class and as such so as a member function it can only be invoked by using an object of that class so in order to invoke this print results function we need to create an object of type homework call it h and then we can invoke this print results by saying h dot print results again that is because this function here is now a member of this homework class so if i run my program now as you can see again we are getting the result of our calculations and there are also a few useful tips that i want to share related to this so tip number one as i already said use this friendship concept sparingly in programming because if you make too many friends in programming you are going to break the whole idea and concept of encapsulation and if you don't know what encapsulation is and how it works i'm going to link a video in the description so make sure to watch that video tip number two is that friendship is not mutual in programming so that means that here we have a friend class called homework inside our equilateral triangle class that means that we can access inside this homework class we can access all of the private and protected properties of our equilateral triangle but not vice versa so if this homework class had any private or protected members we couldn't access those inside our equilateral triangle because again friendship in programming is not mutual tip number three is that friendship is not inherited which means that if you have a base class that has a friend function that friend function will not by default be a friend of the derived classes of that base class so again friendship is not inherited and if you want to learn more about inheritance in programming i am going to link a video here and also in the description so make sure to watch that if you don't understand what base class is and what derived class is tip number four is actually a homework for you and that is one of the most common uses of friend functions so friend functions are used very often when you are overloading operators and if you are not familiar with operator overloading i have a video that i will link here and also in the description so make sure to watch that video because you will get a homework related to that video so in that video i purposely used structures to overload operators instead of classes now the main difference between a structure and a class is that all members of a structure are public by default and then all members of a class are private by default so when you are overloading operators for a structure you don't need to create friend functions in order to access public members because they are public but when you are working with classes and those members are private by default so if you want to access them outside of that class you need to create a friend function for that overloaded operator so your homework will be to watch that video and then instead of using structures you should use classes so where i used structures you use classes and all the problems that arise in that process you should solve them by using friend functions and if you manage to get to a correct solution you can paste it in the comment section and i will as well paste my solution and pin it in a comment so that you can compare it with yours so thank you very much for watching and if you enjoyed this video please give it a big thumbs up for the youtube algorithm and because that means a lot to me and also share it with your friends who would like to learn about friend functions friends friend functions you came here for programming but you stayed because i'm extremely amusing i know okay bye
