With timestamps:

00:00 - hi everyone and welcome to my channel in
00:03 - this video i want to teach you about q
00:05 - data structure so i am going to show you
00:07 - how you can use and create stlq in c
00:10 - plus
00:11 - and i also want to share some examples
00:14 - of where you would want to use a queue
00:16 - so what kind of problems you can solve
00:18 - with a queue data structure because from
00:20 - what i've seen a lot of the people learn
00:23 - and understand the concept but then they
00:25 - struggle with the application of that
00:27 - concept which means that they don't
00:29 - recognize the situation where they need
00:31 - to use a specific data structure to
00:33 - solve that problem so i am going to
00:36 - share that as well
00:37 - and also at the end of this video i
00:39 - prepared a task for you that you can
00:42 - solve using a queue data structure
00:44 - and the person with the best and most
00:46 - creative solution is going to get a
00:48 - shout out in my next video so make sure
00:50 - to check that out as well if you have
00:52 - been following me for some time you
00:54 - already know that i like to explain all
00:57 - the little details about the code but i
01:00 - also understand that there are a lot of
01:01 - the people who don't have either time or
01:04 - knowledge to write all of the code but
01:06 - they still want to create real modern
01:09 - applications with c plus so what i would
01:12 - recommend is to try out c plus builder i
01:15 - will put it in the background and i will
01:17 - also share a link in the description
01:19 - you can use it in order to design user
01:22 - interfaces and create multi-platform
01:25 - applications
01:26 - uh with less code so you can basically
01:29 - drag and drop a lot of the components
01:31 - which will save you a lot of the time
01:33 - and i will share my link in the
01:35 - description you can use it to get 30
01:37 - days free of c plus builder you will
01:40 - have to register and answer a few
01:41 - questions related to how you plan to use
01:44 - c plus builder and then you will get
01:46 - tips and tutorials that will help you to
01:49 - get started so uh you can try it out
01:51 - just for fun and see what you can build
01:53 - with c
01:54 - builder again all the details and the
01:56 - link will be in the description so that
01:59 - is something that i wanted to share with
02:01 - you and now i want to explain what is a
02:04 - queue a queue is fifo data structure and
02:07 - fifo means first in first out and this
02:11 - is also known as first come first served
02:15 - and this means that the elements that
02:17 - are at the front of the queue will be
02:19 - pushed out first so those elements will
02:21 - be processed first and then the ones
02:23 - that are at the end they will be served
02:26 - last now an example of a queue a real
02:29 - life example is an eq that you can think
02:31 - of for example a queue in a bank so
02:34 - people who are standing at the front of
02:36 - that queue will be
02:38 - served first so first second third
02:41 - fourth and so on and then new people who
02:43 - come into the bank will stand at the end
02:46 - of that queue and they will be served
02:48 - last an even more important question is
02:51 - when do we use cues in programming and
02:54 - the answer is very simple
02:56 - whenever you need things to happen in
02:59 - the exact order they were called but
03:02 - your computer cannot keep up with the
03:04 - speed and execute those things fast
03:06 - enough you are going to put those things
03:09 - in a queue
03:10 - the most common example of this is the
03:13 - way that printers work you already know
03:15 - that you can send multiple pages to
03:17 - print but because printer is very slow
03:21 - and it takes 5 to 10 seconds to print
03:24 - out each page all of the pages will be
03:27 - waiting in a queue and they will be
03:29 - waiting for their turn to be printed so
03:32 - pages will be printed from the front of
03:34 - that queue so page one and then two and
03:36 - three and four and so on and if you
03:38 - decide to add new pages they will be
03:41 - added at the end so this is the way that
03:44 - linear cues work new pages or new
03:47 - elements are added at the end and they
03:50 - are removed from the front of that queue
03:53 - something that i have used queues for is
03:55 - to process different types of
03:57 - transactions that arrive very fast so
04:00 - that computer cannot keep up with that
04:02 - speed and process them fast enough
04:04 - and those transactions can be online
04:07 - orders or tickets or receipts or
04:10 - anything of that type so what you can do
04:13 - is you can put let's say those online
04:15 - orders in a queue and then you start
04:18 - processing them at the front so you take
04:20 - first order and then you create a
04:23 - receipt or you ship it do whatever you
04:25 - need to do in order to process that
04:27 - order and then you are finished with
04:29 - that order so you can move to the next
04:32 - and the next and the next and you do
04:34 - that until you come to the end of that
04:37 - queue and new orders that arrive you are
04:40 - going to put those at the end of the
04:42 - queue so that is how cues work and
04:45 - unlike stack which is lifo data
04:47 - structure which means last in first out
04:51 - a q which is a fifo data structure so
04:54 - first in first out is very fair way of
04:58 - processing data and requests and if you
05:00 - want to learn more about stack i will
05:03 - leave a link here which you can use
05:06 - to learn more about stack in order to be
05:08 - able to compare stack and queue
05:11 - so as i said at the end of this video i
05:14 - prepared a task for you that you have to
05:16 - solve using a queue and the person that
05:19 - has the best and the most creative
05:21 - solution will get a shout out in my next
05:24 - video but that also means that now i
05:27 - have to show you the code so that you
05:28 - understand how to solve that task so let
05:32 - me very quickly write out all the code
05:34 - and then i will be back in order to
05:36 - explain how everything works
05:39 - so here is the code and now i'm going to
05:42 - explain every single line
05:44 - the first step is you need to include a
05:47 - library called q so in order to be able
05:49 - to use stlq you need to include a
05:52 - library which is called q and then you
05:55 - will be able to create cues and as you
05:58 - can see in my main function i have
06:00 - created a queue of integers which is
06:04 - called my cue
06:06 - and there are five functions that i want
06:08 - to explain that are related with cues so
06:11 - the first one is called push and it is
06:13 - used in order to add an element at the
06:16 - end of the queue that is the first
06:18 - function second function is called pop
06:20 - and it is used in order to remove an
06:22 - element from the front of the queue
06:25 - and then a function called size which
06:28 - tells you the size so how many elements
06:30 - your queue contains and then a function
06:33 - called front which gives you
06:35 - the first element of your queue and then
06:38 - a function called back which gives you
06:40 - the last element of your queue so as you
06:43 - can see here i have created a queue of
06:46 - integers called myq i have added three
06:50 - elements i have pushed three elements in
06:52 - my queue
06:54 - and here i am testing the functions that
06:56 - i just mentioned so a function that
06:58 - gives me the size and then the first
07:01 - element and the last element of my queue
07:04 - and here i have separately created a
07:07 - function that will print the entire
07:10 - queue and that is this function here so
07:13 - if i open it as you can see it receives
07:16 - one parameter which is a queue of
07:19 - integers and that parameter is called q
07:22 - and inside this function i am using
07:25 - while loop in order to iterate through
07:28 - all of the elements of this cue and as
07:31 - you can see from this condition here it
07:33 - says that i will be iterating through
07:35 - this while loop while my q is not
07:39 - empty so while my q has elements i will
07:42 - be iterating through those elements and
07:45 - in each iteration i will get the element
07:48 - from the front of my queue i will write
07:50 - it out and then i will pop that element
07:53 - and as i said this function called pop
07:55 - is used in order to remove an element
07:57 - from the front of your queue
08:00 - and i am doing that
08:03 - while this cue is not empty when this
08:06 - cue becomes empty that means that the
08:08 - while loop will end and i will just
08:11 - write out an end line and return to this
08:14 - line here okay so i am now going to run
08:18 - this program in order to see the output
08:21 - okay as you can see it says that size is
08:24 - three first element is 1
08:26 - last element is 3 as you can see here
08:29 - and then the entire queue looks like
08:31 - this
08:32 - okay
08:33 - so that is how you create and use stlq
08:37 - nc plus plus
08:39 - as i promised i also have a task for you
08:42 - and i want you to solve this task using
08:44 - cues and the first person with the best
08:46 - and most creative solution will get a
08:48 - shout out in my next video so leave your
08:51 - solutions in the comments
08:53 - and the task is a program that
08:55 - represents your daily schedule so you
08:58 - are going to create a program that
08:59 - allows you to add tasks at the end of
09:02 - the queue and remove them at the front
09:04 - and those tasks need to be performed in
09:07 - that specific order so your daily
09:09 - schedule can look something like wake up
09:12 - at 7 00 am and then eat breakfast and go
09:14 - to work at 8 00 am and then work until
09:17 - lunch break at 12 a.m you have lunch
09:20 - break where you can for example run some
09:22 - errands which is something that i do
09:24 - very often at lunch break
09:26 - and then work some more and at 4 pm you
09:30 - have gym for example like i do and then
09:33 - at 6 00 pm you come home take a shower
09:35 - make dinner and so on so
09:39 - i want you to create that program and
09:41 - the first person that has the best and
09:43 - the most creative solution will get a
09:45 - shout out in my next video so i wish you
09:48 - good luck with solving this task if you
09:50 - need help or if you have any questions
09:52 - feel free to leave those in the comment
09:54 - section and give this video a thumbs up
09:56 - for more tasks and more programming
09:58 - lessons and also let me know if you
10:00 - would like to watch a video where i
10:02 - review your code
10:04 - so thank you very much for watching and
10:06 - i will see you in some other video bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to teach you about q data structure so i am going to show you how you can use and create stlq in c plus and i also want to share some examples of where you would want to use a queue so what kind of problems you can solve with a queue data structure because from what i've seen a lot of the people learn and understand the concept but then they struggle with the application of that concept which means that they don't recognize the situation where they need to use a specific data structure to solve that problem so i am going to share that as well and also at the end of this video i prepared a task for you that you can solve using a queue data structure and the person with the best and most creative solution is going to get a shout out in my next video so make sure to check that out as well if you have been following me for some time you already know that i like to explain all the little details about the code but i also understand that there are a lot of the people who don't have either time or knowledge to write all of the code but they still want to create real modern applications with c plus so what i would recommend is to try out c plus builder i will put it in the background and i will also share a link in the description you can use it in order to design user interfaces and create multiplatform applications uh with less code so you can basically drag and drop a lot of the components which will save you a lot of the time and i will share my link in the description you can use it to get 30 days free of c plus builder you will have to register and answer a few questions related to how you plan to use c plus builder and then you will get tips and tutorials that will help you to get started so uh you can try it out just for fun and see what you can build with c builder again all the details and the link will be in the description so that is something that i wanted to share with you and now i want to explain what is a queue a queue is fifo data structure and fifo means first in first out and this is also known as first come first served and this means that the elements that are at the front of the queue will be pushed out first so those elements will be processed first and then the ones that are at the end they will be served last now an example of a queue a real life example is an eq that you can think of for example a queue in a bank so people who are standing at the front of that queue will be served first so first second third fourth and so on and then new people who come into the bank will stand at the end of that queue and they will be served last an even more important question is when do we use cues in programming and the answer is very simple whenever you need things to happen in the exact order they were called but your computer cannot keep up with the speed and execute those things fast enough you are going to put those things in a queue the most common example of this is the way that printers work you already know that you can send multiple pages to print but because printer is very slow and it takes 5 to 10 seconds to print out each page all of the pages will be waiting in a queue and they will be waiting for their turn to be printed so pages will be printed from the front of that queue so page one and then two and three and four and so on and if you decide to add new pages they will be added at the end so this is the way that linear cues work new pages or new elements are added at the end and they are removed from the front of that queue something that i have used queues for is to process different types of transactions that arrive very fast so that computer cannot keep up with that speed and process them fast enough and those transactions can be online orders or tickets or receipts or anything of that type so what you can do is you can put let's say those online orders in a queue and then you start processing them at the front so you take first order and then you create a receipt or you ship it do whatever you need to do in order to process that order and then you are finished with that order so you can move to the next and the next and the next and you do that until you come to the end of that queue and new orders that arrive you are going to put those at the end of the queue so that is how cues work and unlike stack which is lifo data structure which means last in first out a q which is a fifo data structure so first in first out is very fair way of processing data and requests and if you want to learn more about stack i will leave a link here which you can use to learn more about stack in order to be able to compare stack and queue so as i said at the end of this video i prepared a task for you that you have to solve using a queue and the person that has the best and the most creative solution will get a shout out in my next video but that also means that now i have to show you the code so that you understand how to solve that task so let me very quickly write out all the code and then i will be back in order to explain how everything works so here is the code and now i'm going to explain every single line the first step is you need to include a library called q so in order to be able to use stlq you need to include a library which is called q and then you will be able to create cues and as you can see in my main function i have created a queue of integers which is called my cue and there are five functions that i want to explain that are related with cues so the first one is called push and it is used in order to add an element at the end of the queue that is the first function second function is called pop and it is used in order to remove an element from the front of the queue and then a function called size which tells you the size so how many elements your queue contains and then a function called front which gives you the first element of your queue and then a function called back which gives you the last element of your queue so as you can see here i have created a queue of integers called myq i have added three elements i have pushed three elements in my queue and here i am testing the functions that i just mentioned so a function that gives me the size and then the first element and the last element of my queue and here i have separately created a function that will print the entire queue and that is this function here so if i open it as you can see it receives one parameter which is a queue of integers and that parameter is called q and inside this function i am using while loop in order to iterate through all of the elements of this cue and as you can see from this condition here it says that i will be iterating through this while loop while my q is not empty so while my q has elements i will be iterating through those elements and in each iteration i will get the element from the front of my queue i will write it out and then i will pop that element and as i said this function called pop is used in order to remove an element from the front of your queue and i am doing that while this cue is not empty when this cue becomes empty that means that the while loop will end and i will just write out an end line and return to this line here okay so i am now going to run this program in order to see the output okay as you can see it says that size is three first element is 1 last element is 3 as you can see here and then the entire queue looks like this okay so that is how you create and use stlq nc plus plus as i promised i also have a task for you and i want you to solve this task using cues and the first person with the best and most creative solution will get a shout out in my next video so leave your solutions in the comments and the task is a program that represents your daily schedule so you are going to create a program that allows you to add tasks at the end of the queue and remove them at the front and those tasks need to be performed in that specific order so your daily schedule can look something like wake up at 7 00 am and then eat breakfast and go to work at 8 00 am and then work until lunch break at 12 a.m you have lunch break where you can for example run some errands which is something that i do very often at lunch break and then work some more and at 4 pm you have gym for example like i do and then at 6 00 pm you come home take a shower make dinner and so on so i want you to create that program and the first person that has the best and the most creative solution will get a shout out in my next video so i wish you good luck with solving this task if you need help or if you have any questions feel free to leave those in the comment section and give this video a thumbs up for more tasks and more programming lessons and also let me know if you would like to watch a video where i review your code so thank you very much for watching and i will see you in some other video bye
