With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video I will teach you how you can
00:04 - work with a data set with almost a
00:07 - million records of real data from
00:09 - internet from Amazon and make an
00:11 - application that will analyze the data
00:13 - and give us useful information this is
00:15 - going to be practical programming course
00:17 - unlike any that you have seen before and
00:20 - in this video you are going to learn how
00:22 - you can work with data sets analyze the
00:24 - data perform calculations make charts
00:26 - and many more things so at the end we
00:29 - will have an application that is going
00:30 - to analyze the market and maybe based on
00:32 - that information you can decide to buy
00:34 - certain products buy stocks or sell them
00:36 - do whatever you want I am a financial
00:38 - advisor so I will not tell you what to
00:40 - do but I will teach you how you can
00:42 - build an application that will give us a
00:44 - lot of useful information so my
00:47 - suggestion is that you watch this video
00:49 - first in order to get a general idea of
00:52 - what we are going to build and then when
00:54 - you watch it second time you can code
00:56 - along with me and all the code that we
00:58 - type in this video is going to to be on
01:00 - my GitHub the link will be in the
01:02 - description of this video so without any
01:05 - further Ado let me show you the
01:07 - application that we are going to build
01:08 - so here is the application that we are
01:10 - going to build and now I'm going to show
01:12 - you some of its functionalities first of
01:14 - all here we have the list of all of the
01:18 - products that we have inside our data
01:20 - set and here you can select any product
01:23 - and see how its prices have changed and
01:26 - you can also calculate price change in
01:29 - percentages so you can see that since
01:32 - December of 2021 till October of 2022
01:35 - for this Sony fe24 105 millimeters the
01:39 - price increased for
01:42 - 55.7 percent so you can do this and
01:47 - calculate it for one product or you can
01:49 - select multiple products and then
01:52 - perform the calculation or you can even
01:55 - select
01:57 - let's say all of the products and
01:59 - perform this calculation and as you can
02:02 - see it is taking a little bit more time
02:04 - because now it is calculating for 100
02:07 - 000 products and here you can see the
02:09 - result so the price has dropped for 1.5
02:12 - percent so that is calculate change
02:16 - functionality and here I have two very
02:18 - interesting functionalities this one
02:20 - shows top 10 brands that have increased
02:24 - prices the most in this period and this
02:27 - one shows brands that have decreased
02:29 - price the most and if I click this here
02:32 - you can see only 10 brands because we
02:34 - have a limited space to show the data
02:36 - but I will teach you how you can
02:39 - calculate this for all of the brands
02:42 - that we have in this data set and we
02:44 - have tens of thousands of different
02:46 - brands so in this video you can learn
02:49 - how to build this application that will
02:51 - help you to take informed decisions like
02:54 - many businesses do they make
02:55 - applications that are going to analyze
02:57 - the market and then based on those
02:59 - analysis they decide to buy certain
03:01 - products or sell them or to buy stocks
03:03 - sell them and so on in this video I am
03:06 - not going to give you Financial advice
03:07 - on what you should do but I will
03:10 - definitely teach you how you can make an
03:12 - application that will give you all of
03:14 - the information that you need and then
03:15 - you can do whatever you want with that
03:17 - information so here are top 10 brands
03:20 - that have increased prices the most and
03:22 - then here we have top 10 brands that
03:25 - have decreased prices the most and as
03:27 - you can see here we have brand called
03:29 - Rainbow Dust for example it decreased
03:31 - price for 100 so I'm guessing that it
03:35 - maybe went bankrupt let's see so Rainbow
03:39 - Dust here is one product from that brand
03:43 - as an end as you can see it went from
03:45 - 7.95 to zero dollars between May and
03:49 - July of 2022. so this is the application
03:51 - that we will build together in this
03:53 - video so let's jump straight into code
03:56 - and start making this application so as
03:59 - I said we are going to use a data set
04:01 - with real data from Amazon and I got
04:04 - this data set from Bright data you can
04:06 - use the link in the description of this
04:08 - video in order to download a data set
04:10 - that you can use for test purposes and
04:13 - then if you need any specific data set
04:15 - or more specific data you can go on
04:18 - their site and check out some of the
04:20 - existing data sets or contact them and
04:22 - they can prepare you a data set with the
04:24 - data that you need there are a few very
04:27 - important things that you need to
04:28 - consider when you start building an
04:29 - application and the first one is that it
04:32 - is very hard to find quality data
04:34 - quality means data that is up to date
04:37 - and that reflects the latest information
04:39 - and also data that is structured and
04:43 - organized so that it is easy to work
04:45 - with for this video I used data set from
04:47 - Bright data and I decided to show you
04:50 - how you can work with data sets that
04:52 - have a lot of data and how you can make
04:54 - practical and useful applications and
04:56 - then another important thing that you
04:58 - need to consider is where you can get
05:00 - data sets for example you can get data
05:03 - sets from Reddit but they are usually
05:05 - very limited and they are sometimes low
05:08 - quality and also if you decide for
05:11 - government data sets of course they are
05:13 - not always available and accessible so
05:16 - my suggestion is to check out bright
05:18 - data whenever you need a data set you
05:21 - can use the link in the description to
05:23 - download some free data sets and then
05:25 - you can check out already existing data
05:27 - sets that they have and if you need some
05:29 - specific data definitely contact them
05:32 - and ask them to prepare that data for
05:34 - you so let me now show you the data set
05:37 - that we will use for this application so
05:40 - here is the data set that we will work
05:42 - with and it has almost 800 000 records
05:46 - but it is in CSV format as you can see
05:50 - let me show you and that is not really
05:53 - that readable to humans so I will format
05:56 - this into Json very quickly and then I
05:59 - will show you what we are working with
06:01 - so this is our data set and here is one
06:04 - product and inside it we have all of the
06:06 - information that we have about that
06:07 - product so we have URL on the Amazon
06:10 - site we have asyn title brand and then
06:14 - we have categories that the product
06:15 - belongs to and here we have prices
06:19 - throughout time from December 2021 to
06:22 - October 2022 and then we have another
06:26 - product and then another and another and
06:30 - so on so I will use this data set we
06:32 - will use it in CSV format in order to
06:34 - make this application so let's create
06:36 - our application click on file new
06:39 - project
06:40 - okay and here we will search for Windows
06:44 - forms application it is going to be
06:46 - c-sharp application click on next and
06:49 - let's call it
06:51 - for example Market analyzer app and
06:55 - click on next
06:56 - and make sure to select.net 6.0
06:59 - framework and click create
07:02 - okay so the first thing that we will
07:06 - need to do is we will need to create a
07:08 - class where we will represent all of the
07:12 - properties of this product actually just
07:15 - the ones that we need and we will need
07:16 - Title brand and these prices so let's
07:20 - create that class I will create a new
07:23 - folder
07:24 - click on add new folder
07:27 - and name that folder data and inside
07:31 - this folder I will create a new class
07:35 - let's call it product
07:39 - like this
07:41 - okay so this is going to be public
07:46 - class
07:47 - and inside it I will say public string
07:52 - title
07:55 - okay and then let's do the same for
07:58 - brand
08:00 - and I will also create properties for
08:03 - prices let me do that and I will be back
08:06 - okay so here are the properties for our
08:09 - prices and that is our class the next
08:12 - step is we need to make a way to map
08:16 - this class here with this file here
08:21 - where is our data actually it is in CSV
08:24 - format and this that I'm showing you is
08:26 - Json format because it's more readable
08:27 - to humans so in order to map CSV file
08:31 - with our class we need to install a
08:34 - nougat package so I'm going to right
08:37 - click on my project and click on manage
08:39 - nuget packages and here I need to find a
08:42 - nuget called CSV helper so CSV Helper
08:46 - and click on browse instead of install
08:48 - because we don't have this nuget and
08:51 - here it is I'm going to click on it and
08:53 - click on install Okay and then click on
08:57 - OK I accept and as you can see this
09:00 - nougat has been installed so now I am
09:04 - going to close this also I will save
09:06 - this and closely this is something
09:07 - related to our framework and then I will
09:10 - go to this data folder again right click
09:12 - on it and here I will add another class
09:15 - and I will call it product map
09:19 - okay
09:21 - click on add this is also going to be
09:24 - public class and it is going to inherit
09:28 - from a class called class map
09:32 - and I will say that it is the last map
09:34 - of product so here we are going to write
09:39 - a way to map the properties of our
09:42 - product from CSV file from our data set
09:44 - into these properties here of our
09:48 - product class so let me show you how we
09:50 - are going to do that so let's create a
09:52 - Constructor for this class and this
09:56 - class called classmap has a method
09:58 - called map and we are going to use that
10:01 - method in order to map properties these
10:05 - properties of our products class with
10:09 - these here so titles from the class will
10:12 - be mapped with this brand from the class
10:14 - will be mapped with this and so on so
10:16 - let's do that go back to our products
10:19 - map and here I will use method called
10:22 - map so I will say product
10:25 - P dot title will be mapped with title
10:32 - this is how you do it and then do the
10:35 - same for brand
10:36 - like this map it with brand and let's do
10:41 - the same for prices as well and I will
10:43 - be back so this is how you map the
10:46 - prices make sure that these names here
10:49 - correspond with these names here okay so
10:54 - now we are finished with mapping the
10:56 - data and now what we can do is we can
10:58 - drag and drop our data set into our
11:01 - application so I have it here I will
11:05 - just drag and drop it into my data
11:07 - folder like this okay and here I have to
11:12 - do two things so right click on your
11:14 - data set and click on properties
11:16 - thank you
11:17 - okay and here you need to make sure that
11:20 - your data set is set as embedded
11:23 - resource for your application and also
11:26 - here copy to Output directory make sure
11:29 - to select copy always so that whenever
11:32 - we start our application this data set
11:34 - is copied into our output directory so
11:37 - that it can be used for our application
11:39 - so those are two things that you need to
11:41 - do so now that we have created our
11:43 - products class we have created products
11:46 - map so the way to map our class with our
11:49 - CSV file and we have also drag and
11:51 - dropped our CSV file into our
11:52 - application what we need to do is we
11:55 - need to load the data from this CSV file
11:58 - into our application and for that I will
12:01 - create a new class right click on data
12:04 - click add plus and I will call it CSV
12:08 - data loader
12:10 - and make this class public and inside
12:14 - this class I will very quickly create a
12:16 - method that will load the data and then
12:18 - I will be back to explain it so here is
12:21 - how CSV data loader class is going to
12:23 - look like it has two Fields data set
12:26 - path which combines the path of our
12:29 - application and also the path of our
12:33 - Amazon data set inside the application
12:35 - so it is inside data folder and it's
12:38 - called Amazon compare.csv which is this
12:41 - file here and then this variable here I
12:44 - will explain what it does in a minute so
12:47 - here we have a method called load data
12:50 - and that method returns a list of
12:52 - products please note that I have made
12:54 - both this method and the class static
12:58 - and this is also static and the reason
13:00 - is because I want to be able to invoke
13:03 - this method without having to create the
13:06 - instance of this class so this method is
13:10 - going to low the data and return me the
13:12 - list of products so what I'm doing
13:14 - inside this method is following first I
13:17 - am creating a new reader new stream
13:20 - reader and I'm giving it the path to my
13:23 - data set now this stream reader just
13:26 - knows how to read text so because we are
13:29 - going to work with CSV files we need to
13:31 - create another type of reader which is
13:33 - more specific and that is CSV reader and
13:36 - we are going to tell it hey please use
13:38 - this reader that knows how to use text
13:40 - and then you have some additional
13:42 - options that we will need and those are
13:44 - these options here so this CSV reader is
13:48 - going to register with this product map
13:51 - class which is the one that we have
13:53 - wrote previously it is this one that
13:55 - knows how to map from CSV file to our
13:58 - class okay
14:00 - so it is going to use that class and
14:03 - here we are creating a list of products
14:06 - and we are saying hey CSV reader get
14:08 - records They are going to be of this
14:10 - type there are going to be products and
14:12 - convert them to list and this part here
14:15 - says please take this many records now
14:20 - this is because we are working with huge
14:23 - data set that has almost 800 000 records
14:26 - in case that you want to limit how much
14:28 - data you take you can set that value
14:30 - here so for example by changing this to
14:33 - 100 you would take only 100 records and
14:36 - if you put 100
14:38 - 000 you're going to take 100 000 records
14:40 - so please adjust this to the speed of
14:43 - your computer because loading all of the
14:46 - data can make your application a lot
14:48 - slower so once we take that data here we
14:51 - will have the list of our products and
14:52 - we just returned those products so this
14:55 - method should be able to load the data
14:57 - into our application and now let's see
14:59 - where we are going to invoke the this
15:01 - method and load the data so please note
15:05 - this form one this is the default form
15:07 - that you get when you create a new
15:09 - application so let's very quickly rename
15:12 - it
15:13 - and let's call it products form
15:18 - and make sure to click yes here so that
15:20 - form 1 is renamed everywhere okay so
15:24 - this is the form where we are going to
15:27 - build our user interface and here the
15:31 - first thing that I want to do is I want
15:33 - to drag and drop a grid and we will use
15:35 - that Grid in order to show the data that
15:37 - we have loaded so where can you find the
15:40 - grid click on view and then find toolbox
15:43 - and here you have all of the controls
15:45 - that you can simply drag and drop to
15:47 - your form here I'm going to type grid
15:50 - and I will drag and drop data grid view
15:52 - to my form like this
15:56 - so let's name this grid so right click
15:59 - on it and click on properties and here
16:02 - you have this small window I am just
16:04 - going to move it here like this and here
16:06 - you should be able to find property
16:08 - called name so instead of calling it
16:10 - data grid view let's name it products
16:13 - grid
16:16 - like this so now what I want to do is I
16:19 - want to create form load event so when
16:21 - our form loads I also want to load the
16:24 - data so you can double click on the form
16:27 - or you can right click here click on
16:29 - properties and here you can find all of
16:32 - the events of the form and you can
16:33 - double click on this load event or again
16:36 - you can double click on the form and you
16:39 - should get this form load event so what
16:42 - I want to happen when my form loads is I
16:44 - want to show the data in my grid so I
16:47 - will say products Grid it's data source
16:51 - is going to be
16:53 - this CSV data loader CSV data loader and
16:58 - inside it method called load data so
17:02 - when this method returns products I want
17:05 - to set them as a data source for my
17:07 - grade so now let's start the application
17:10 - and let's see what's going to be the
17:11 - result of this and as you can see here
17:14 - is our grid and the data has been loaded
17:16 - to our application and now we can see it
17:18 - on our grid now one very important thing
17:21 - to keep in mind is if your computer is a
17:23 - little bit slower here you can change
17:26 - data limit and decide how much data you
17:30 - want to load and if you decide to load
17:32 - for example just 100 products then your
17:35 - application start is going to be much
17:36 - faster versus if you decide to load 800
17:40 - 000 records so the entire data set okay
17:44 - so I am going to go back to my grid here
17:48 - and one thing that I want to do before
17:49 - continuing is I just want to refactor
17:51 - this a little bit because I want to
17:54 - reuse this data set that is loaded into
17:57 - my application on more than one place so
18:00 - I will store it into a global variable I
18:03 - will create a list of products I will
18:06 - call them products and here instead of
18:10 - loading this directly into my data set I
18:14 - will store this data into my products
18:18 - variable like this and then I will use
18:22 - this product to set the data source of
18:25 - my grid like this and the result is
18:28 - going to be absolutely the same but we
18:29 - will just be able to use this products
18:32 - variable inside this entire class so on
18:35 - more than one place one thing that you
18:37 - should notice is that our grid was
18:39 - generated automatically meaning that
18:42 - these columns were generated
18:45 - automatically based on the data set that
18:48 - we gave to our grid now one thing that I
18:51 - would like to do here is I would like to
18:54 - show only title and brand inside our
18:56 - grid and then later we will see how we
18:58 - can show these prices on a chart so in
19:01 - order to customize our grid and show
19:03 - only columns that we want we will need
19:05 - to make a method that is going to
19:07 - customize the appearance of the grid so
19:09 - let's do that here I will create private
19:13 - void method I will call it customize
19:16 - grid appearance
19:19 - foreign
19:22 - we are going to create columns manually
19:25 - and add them to our grid and we will
19:27 - also tell to our grid that it shouldn't
19:30 - generate columns automatically so let's
19:32 - do that let's say products grid
19:38 - Auto generate columns is equal to false
19:41 - that is the first thing so please don't
19:42 - generate columns automatically and then
19:45 - the next thing is to create columns
19:47 - ourselves so here I will create data
19:51 - grid view text box column like this and
19:55 - the first one will be title column
19:59 - okay and here we need to set two things
20:02 - we need to set the header of the column
20:04 - so title call Dot
20:07 - tether text
20:09 - will be equal to title and we also need
20:12 - to tell to our column what is going to
20:13 - be the property that it will connect to
20:15 - from our product so I will say title
20:19 - call Dot data property name will be also
20:23 - title so please connect with title
20:26 - property from products and name the
20:29 - column title so now I can add this
20:31 - column to my products grid so I will say
20:35 - products Bridge dot columns
20:41 - dot add title column okay
20:45 - and let's do the same for the brand
20:47 - column I'm going to copy this paste it
20:50 - and here I will say
20:52 - brand column and then brand column dot
20:56 - header text will be brand
20:58 - and then brand column dot data property
21:01 - name will also be brand and here I will
21:04 - add brand column to my grid so now we
21:08 - should invoke this customize grid
21:10 - appearance method before we fill our
21:12 - grid with data so I will invoke it on
21:15 - for load event so please first customize
21:18 - grid appearance and then load the data
21:21 - into my grid so now if I start the
21:23 - application let's see what's going to
21:24 - happen Okay as you can see here we have
21:28 - a grid that has only two columns now
21:31 - there are a few things that I would like
21:33 - to change regarding this grid first
21:35 - thing is I would like to fill this
21:37 - entire grid with data without having
21:39 - this empty space here and for that you
21:42 - use this line and then I would also like
21:45 - to remove this empty column here and for
21:48 - that you use this line and I would also
21:51 - like to be able when I select certain
21:54 - product I would like for entire row to
21:56 - be selected not a specific so so you can
22:00 - do that with this line and and I am
22:03 - going to add those three lines here to
22:06 - my customized grid appearance like this
22:09 - so I added those three lines in my
22:12 - customized grid appearance method like
22:14 - this and now if I restart my application
22:17 - let's see what has changed and as you
22:20 - can see now we can select the entire row
22:23 - and the entire grid is filled with the
22:24 - data and we don't have that empty column
22:27 - and one thing before we continue
22:29 - building this application is I will very
22:32 - quickly change the font of this
22:34 - application so that it is a little bit
22:36 - bigger so that you can see it as well so
22:38 - there is this property here called font
22:41 - double click on it and here you can
22:44 - change the font and its size so let's
22:46 - say
22:47 - Century Gothic and size will be 16. okay
22:52 - and as you can see this form is now a
22:55 - little bit too big so let's just make
22:58 - this grid a little bit smaller and the
23:00 - entire form also a little bit smaller
23:03 - okay so the next functionality that I
23:05 - would like to build here is going to be
23:07 - search option so that we can search our
23:10 - products and in order to do that I will
23:13 - drag and drop from my toolbox a text box
23:18 - like this okay and put it here so we
23:21 - should have the option to type in the
23:23 - text into this text box and this grid
23:26 - should be filtered based on the text
23:28 - that we have typed so there are a few
23:30 - ways to do this one way which is easier
23:33 - and more beginner friendly is to Simply
23:35 - add a button to this form so when the
23:38 - user types in a text and then presses
23:40 - that button then you should filter this
23:43 - grid but another way which is more
23:46 - professional and better way is to use
23:48 - async functions and in order to write
23:51 - asking functions you need to understand
23:52 - asynchronous programming in depth now if
23:55 - you're not familiar with asynchronous
23:57 - programming or if anything that you have
23:58 - seen so far in this course is not
24:00 - understandable to you make sure to sign
24:03 - up for my practical programming course
24:04 - where I am going to teach you everything
24:07 - that you need to know in order to start
24:08 - building real applications and working
24:10 - for real companies
24:12 - um I will basically give you my 10-year
24:15 - experience in this course that you can
24:17 - finish in 10 weeks and if you want to
24:20 - get a special discount as my viewer you
24:22 - can use the link in the description but
24:24 - make sure to sign up for the discount
24:26 - right now because the number of people
24:28 - that can get it is limited so let's get
24:31 - back to our application and as I said
24:34 - here I am going to show you how you can
24:36 - write asynchronous function that is
24:38 - going to perform searching of this grid
24:40 - based on the text that you input into
24:42 - this text box so let's very quickly
24:45 - rename this text box and I will call it
24:48 - search text
24:51 - like this okay so
24:54 - when the text changes there is an event
24:57 - called text change so how are we going
25:00 - to implement this event this event is
25:03 - going to be triggered invoked every time
25:05 - that text changes inside this text box
25:08 - so either user inputs a letter or he
25:11 - deletes a letter so what I'm going to do
25:14 - is I will wait while user is typing and
25:18 - then when the user makes a pause of
25:21 - let's say half a second or 300
25:22 - milliseconds that is the moment where I
25:25 - am going to perform the search and show
25:28 - the results inside this grid so how am I
25:30 - going to do that well
25:32 - when the user starts typing I will
25:34 - measure the length of text inside this
25:37 - text box and then I will make a pause of
25:40 - 300 milliseconds and then I will measure
25:43 - the length of this text box again and if
25:46 - during that time during those 300
25:48 - milliseconds the length of text has not
25:51 - changed that means that the user has
25:54 - stopped typing and now it's time to
25:56 - perform the search of this grip so let's
25:59 - do that here I will create a variable of
26:03 - type int and let's call it length before
26:06 - pause like this so here I will say
26:09 - search
26:11 - text Dot text Dot length like this so
26:17 - this is going to be one thing after that
26:20 - I will make a pause of 300 milliseconds
26:23 - so I will say task
26:25 - delay and then let's say 300
26:28 - milliseconds but one thing that you keep
26:30 - in mind is if you do it like this then
26:33 - it is going to freeze your application
26:35 - so what we need to do is we need to say
26:38 - away so please asynchronously wait don't
26:42 - freeze my application and as soon as you
26:44 - add a weight that means that the
26:46 - function needs to be async like this so
26:50 - now after you have waited for 300
26:52 - milliseconds what we should do again is
26:55 - we should measure the length of this
26:57 - text box again and here I will call it
27:00 - length
27:01 - after pause okay so now if
27:06 - linked before pause
27:09 - is the same as linked after pause what
27:13 - we should do is we should refresh our
27:16 - grid let's say refresh grid like this
27:20 - and now I will very quickly implement
27:23 - this method and I will be back to
27:25 - explain you what it is doing so here is
27:27 - our refresh grid method basically we are
27:30 - performing the search of products and
27:31 - then we set that search result as the
27:34 - data source for our grid so let's
27:36 - explain this part here here we are
27:39 - taking all of the products that have
27:41 - been loaded into our application and we
27:43 - are saying please give me only the
27:45 - products where product brand
27:48 - contains this search text here and also
27:52 - when you are comparing those two please
27:54 - convert those to lowercase so that the
27:56 - user doesn't need to think if he has
27:58 - typed lowercase or uppercase letter
28:00 - because if you don't do this part here
28:03 - then these two are not going to be the
28:06 - same so that is how you can search
28:08 - products and here you define if you want
28:10 - to search by brand name or by title of
28:13 - the product and you can also modify this
28:16 - program so that you can search by both
28:17 - brand and title so now I am going to
28:22 - start this program and show you how it
28:24 - works
28:25 - okay so if I for example enter Sony as
28:31 - you can see here we will only get
28:33 - products from Sony brand
28:36 - okay let's close this application and
28:39 - one thing that I want to do is here
28:41 - inside form load event instead of
28:46 - directly assigning data source of
28:48 - products grid like this I just want to
28:50 - invoke the method refresh
28:53 - grid like this and what this method will
28:57 - do is if the search text is empty then
29:01 - it is going to return all of the
29:02 - products so if I start the application
29:04 - once more
29:05 - at the start we get all of the products
29:08 - the next thing that I would like to
29:09 - teach you is how we can show the prices
29:11 - of these products on a chart that I will
29:14 - put here so in order to work with charts
29:17 - we need to install another nougat
29:19 - package so let's close this application
29:21 - and here I will again right click on my
29:25 - project click on manage nougat packages
29:28 - okay and I need to find a nougat which
29:32 - is called Windows forms data
29:34 - visualization so when
29:38 - forms.data visualization please find it
29:42 - okay it's this one install it
29:46 - okay
29:48 - and it has been installed so now what
29:50 - you can do is you can go to your
29:52 - products form and inside toolbox you can
29:56 - search for chart
29:59 - okay drag and drop it to your form
30:03 - like this
30:04 - and now what we should do is we should
30:08 - Implement a couple of methods that are
30:10 - going to show the prices of product on
30:13 - this chart so I will go to my code
30:16 - behind of products four and here I will
30:19 - implement the methods and I'll be back
30:21 - to explain all the code so in the code
30:23 - behind of my products form I have
30:25 - created two methods to work with the
30:27 - chart and a couple of helper methods so
30:31 - now I'm going to explain everything the
30:34 - first method is called refresh chart and
30:36 - it receives a selected product which
30:38 - means that this method will be invoked
30:41 - whenever a user selects a specific
30:43 - product on the grid
30:45 - so let's see what this method does first
30:49 - of all it clears prices chart and it
30:51 - clears something called series now what
30:54 - is series series is used in order to
30:57 - group points together because one chart
30:59 - can have multiple series for example
31:01 - this
31:03 - so we use series in order to group those
31:06 - points together so after you clear it
31:09 - here we are going to add prices for
31:11 - every date that we have so we are adding
31:14 - December 2021 and here I'm adding its
31:17 - value and please keep in mind that this
31:20 - is a string so I needed to convert it to
31:23 - decimal and this is the method that I
31:26 - created it's not built in and I will
31:28 - explain it in a minute so basically here
31:31 - we are adding points for every single
31:34 - price that we have for our products that
31:37 - is what this code here does and then
31:39 - after we add all of the points for all
31:41 - the prices I am going to iterate through
31:44 - all of the points of this series and for
31:48 - each point I will add a label that will
31:52 - simply show the value on the y-axis so
31:56 - it will simply show the price of that
31:59 - product so that is what this refresh
32:02 - chart method us now let me very quickly
32:05 - show you this convert to decimal I'll
32:07 - press F12 so here I created an
32:11 - additional class inside my data folder
32:13 - it is static class called calculations
32:16 - and inside this class we are going to
32:18 - put some helper methods that will
32:20 - perform different calculations
32:21 - conversions and things that we need for
32:24 - this application inside that I created
32:27 - one static function called convert the
32:30 - decimal and the job of that function is
32:31 - to take a string and convert that string
32:35 - to decimal number so here I'm saying
32:37 - please try to parse this prices string
32:40 - into a variable called price that will
32:44 - be of type decimal and return it here
32:46 - and if you cannot do this then simply
32:49 - return null so that is how this function
32:52 - looks like and as you can see this is
32:54 - how I have used it so that is the first
32:57 - function refresh chart okay the second
33:00 - function is called configure chart and
33:03 - it looks very simple we first clean any
33:07 - existing data that our prices chart has
33:09 - and then we create a new blank chart
33:13 - area and here we are going to Define new
33:17 - series called price and inside it we are
33:21 - going to Define what is going to be the
33:23 - type of our chart this is one type that
33:26 - I will use for this application and
33:27 - later I will show you some other types
33:30 - that you can use as well so that is the
33:32 - other method basically this configure
33:35 - chart is going to be invoked only once
33:38 - when we start our application so that is
33:41 - why I invoked this method here on my
33:45 - form load event that is when this
33:48 - configure chart method is invoked and
33:50 - then refresh chart method is going to be
33:53 - invoked whenever a user selects a
33:56 - specific product on the grid so for that
33:59 - purpose I created an event on my grid so
34:02 - this grid here has an event that is
34:06 - called cell double click and I
34:08 - implemented that event here and here is
34:11 - how it looks like so whenever the user
34:14 - double clicks on a specific product
34:15 - inside our grid this event here will be
34:18 - invoked and inside this e Property we
34:22 - will have the index of the selected row
34:25 - and we will use that index in order to
34:27 - get selected products so here I'm saying
34:30 - hey for this product grid please find
34:33 - from all of its rows the one that has
34:36 - this index and then take the item from
34:39 - that Row the property is called Data
34:41 - bound item and it represents the item
34:44 - that is stored in that row and since we
34:46 - know that it is of type product we will
34:49 - cast it to product and store it to this
34:51 - variable and then simply we are going to
34:53 - pass that selected product to our
34:56 - refresh chart method so that is when
35:00 - this method here is going to be invoked
35:03 - so now if I start the program and I
35:06 - select any product as you can see here
35:08 - we have the chart that shows us how the
35:11 - prices behaved since December 2021 till
35:15 - October 2022 so that is how you can
35:18 - create a chart and as I promised
35:21 - inside this method here configure chart
35:25 - you have a lot of different charts that
35:29 - you can use here are some and the ones
35:32 - that I would recommend to use for this
35:34 - type of application are these here
35:37 - so now that you have learned how to work
35:39 - with charts I would like to show you
35:41 - something else I would like to be able
35:43 - to calculate the change of price of each
35:46 - product in percentages and to see if the
35:49 - price has increased or decreased and how
35:53 - much so in order to do that we need to
35:55 - write another method which I'll write
35:58 - very quickly and then I will be back to
36:00 - explain how it works so I have
36:02 - implemented this functionality and let
36:04 - me first show you the behavior of the
36:05 - application and then I will show you the
36:07 - code behind it so let's start the
36:10 - application
36:12 - and let's search for a product that we
36:14 - are interested in let's say I want to
36:16 - search from Apple brand and let's click
36:19 - for example on this Apple gift card okay
36:22 - the price of gift card stayed the same
36:24 - as you can see here so if I press on
36:26 - calculate change it says price did not
36:29 - change but if I select on some other
36:32 - product let's say this apple lightning
36:35 - three millimeter adapter as you can see
36:38 - the price has fluctuated so if I press
36:40 - on calculate change you can see that the
36:43 - price has increased for 11 okay so you
36:47 - can do this for one product or you can
36:49 - select multiple products like this so
36:53 - just hold Ctrl and select the products
36:55 - that you want and then click calculate
36:57 - change and you will see the calculation
37:00 - for the products that you have selected
37:02 - and here it says price dropped for minus
37:04 - 12.5 so basically you can select all of
37:08 - the products that you buy and then you
37:10 - can see how the prices of those products
37:13 - have changed and you can see if they
37:15 - dropped or if they increase and you can
37:18 - also let's delete everything you can
37:21 - also select all of the products that we
37:24 - have in this data set and then click on
37:27 - calculate change
37:29 - and here we are performing calculation
37:32 - for all of the products and as you can
37:33 - see it says that price has dropped for
37:36 - minus 1.5 percent from December of 2021
37:39 - to October of 2022 and please keep in
37:43 - mind that here I'm loading just 100 000
37:45 - products into my application if you want
37:47 - to calculate the change for all of the
37:49 - products you should load them all in
37:51 - your application so this is a
37:52 - functionality that I want to build and
37:55 - here is the code so here I wrote a
37:59 - function called calculate change in
38:02 - price and that function receives a list
38:04 - of products that it should use to
38:07 - calculate the change and this list can
38:09 - contain just one product or multiple
38:12 - products depending on what you selected
38:14 - on the grid and here is how the
38:17 - calculation is performed so basically
38:19 - this code here does the same as this
38:21 - code here it basically goes through the
38:25 - list of all of the selected products and
38:28 - then it gets the first price of the
38:30 - current product and the last price it
38:33 - checks if they have a value this is
38:35 - important so that our application
38:37 - doesn't crash in case that some product
38:38 - doesn't have a value and then here it
38:42 - sums all the first prices and all the
38:45 - last prices so after this for each Loop
38:48 - we will have total first price of the
38:51 - selected product and total last price of
38:54 - the selected products and here we are
38:56 - using those two values in order to
38:59 - calculate the change in percentages and
39:01 - I will show you how this method here
39:03 - Works in a moment and then after you get
39:06 - the change in percentages here we just
39:08 - check if the change is greater than zero
39:11 - we print the message that price has
39:14 - increased for this many percentages and
39:18 - then if it is less than zero then the
39:20 - price dropped or decreased for this many
39:23 - percentages and if it is exactly zero
39:25 - then the price did not change and also I
39:28 - am converting this price in percentages
39:30 - to string with one decimal so that is
39:34 - how this method Works in general and
39:36 - here we have a couple of helper methods
39:40 - that I want to explain so let's first
39:42 - see this get first non-null price
39:46 - if I click on f11 you can see that we
39:49 - have another helper method inside this
39:52 - calculations dot CS all of these methods
39:54 - by the way are created inside
39:56 - calculations class so here is the method
39:59 - get first non-null price and what it
40:01 - does is it basically checks if we have
40:05 - this price for December of 2021 and if
40:08 - we have it then it returns that price
40:10 - converted to decimal number but if we
40:13 - don't have this price then it tries to
40:16 - return this price again if we don't have
40:19 - it it will return this price and then it
40:22 - will try to return this and this so the
40:25 - first one of these prices that we have
40:28 - will be returned and then we also have a
40:31 - method called get lost non-null price
40:34 - and it does the same thing but in
40:36 - reversed order it first tries to return
40:38 - the last price and then the one before
40:41 - that and the one before that and so on
40:43 - so those are two helper methods that are
40:46 - created and that are used here okay and
40:50 - then one more method that I created is
40:53 - called calculate change in percentages
40:55 - again all of these methods are inside
40:58 - calculations.cs and this method takes
41:02 - the first price and the last price and
41:05 - here is what it does it performs a check
41:08 - if first price has value and if last
41:10 - price has value and also if first price
41:13 - is not equal to zero because here we are
41:17 - dividing by it and as you already know
41:20 - we should not divide by zero as this
41:22 - comment here says and this is how we
41:25 - perform the calculation in order to get
41:28 - the change in percentages so let me
41:31 - explain how this expression here works
41:33 - so let's say you have a shirt that you
41:35 - bought for 100 that would be first price
41:39 - after that you sold that shirt for 120
41:43 - dollars and that would be last price so
41:46 - if you perform this calculation this is
41:49 - the result that you would get so you
41:52 - would have twenty dollars of profit
41:54 - which is 20 increase and that is how
41:58 - this calculation here returns you the
42:01 - change in percentages so after this part
42:04 - of the code is executed then we take
42:07 - that percentage change and we return
42:09 - adequate message so now your question
42:12 - might be where is this calculate change
42:15 - in price function invoked well let's go
42:18 - to our form and as you can see here I
42:20 - have added a button and the name of the
42:23 - button is calculate change Button as you
42:26 - can see here so calculate change button
42:30 - so if you click on the button this is is
42:33 - the event that is going to be executed
42:35 - so here we first take all of the
42:38 - selected rows from our grid and we make
42:42 - sure to check if any row was selected
42:44 - because if the user just pressed the
42:46 - button without selecting any rows then
42:48 - we just want to return from this
42:50 - function and not do anything but if user
42:54 - has selected at least one row we will
42:56 - proceed with this code here so we will
42:58 - create a list of products it will be
43:00 - empty at first and then we will go
43:03 - through selected rows and from each row
43:06 - we will take the product and we will add
43:10 - it to this list and after that we will
43:13 - invoke function calculate change in
43:16 - price which is the one that we
43:17 - previously saw and we will pass it the
43:20 - list of our selected products and store
43:23 - the message that the function returns
43:25 - inside this variable here and then we
43:28 - will simply show that message using
43:30 - message box show method so once more if
43:34 - I run the program and I select for
43:37 - example three four products and I click
43:40 - on calculate change we will get the
43:43 - message and here it says that the price
43:45 - for these four products has increased
43:48 - for 2.3 percent
43:51 - when you have data set that is as big as
43:53 - ours you can do many things for example
43:57 - now I'm going to show you how you can
43:58 - build a functionality that will tell you
44:00 - which brands have increased prices the
44:03 - most and which have decreased prices the
44:06 - most here I'm going to show only 10
44:08 - brands because we have limited space to
44:10 - show the information but I will teach
44:12 - you how you can do that calculation for
44:14 - all the brands that we have in this data
44:16 - set and we are currently loading 100 000
44:19 - records and in those 100 000 there are
44:21 - over 50 000 Brands so in the entire data
44:24 - set there would be much more and many
44:27 - businesses use this type of information
44:29 - in order to decide when to buy certain
44:32 - products or to sell them when to buy
44:34 - stocks or sell them and so on I will not
44:37 - give any Financial advice but I will
44:39 - teach you how to build this application
44:41 - so that you can make your own decisions
44:43 - however you want so let me write the
44:46 - code and then I will show you the
44:48 - functionality and I will teach you how
44:50 - to implement it so here I have
44:52 - implemented the functionality that is
44:54 - going to tell us which brands have
44:55 - increased prices the most and which have
44:58 - decreased prices the most so if I click
45:01 - on this button here we will get top 10
45:04 - brands that have increased prices the
45:07 - most between December 2021 and October
45:10 - of 2022. let's check Bonville
45:13 - manufacturing it says that it has
45:15 - increased price for
45:18 - 2286 percent okay so let's type here
45:22 - Bondville
45:25 - manufacturing okay so if I click here as
45:28 - you can see the price has jumped from
45:30 - 0.5 to 10.99 and then their other
45:35 - product went to 12.8 and then 12. so if
45:39 - I select all of these three products and
45:42 - I press calculate change as you can see
45:45 - we will get the same number for price
45:47 - increase so that is how this biggest
45:50 - price increase works and here we have
45:53 - just 10 brands because we have limited
45:56 - space to show the data but I will teach
45:58 - you how you can calculate this for all
46:01 - the brands that we have in our data set
46:03 - let's close this one and then if I press
46:06 - biggest price decreases here we will get
46:10 - top 10 brands that have decreased the
46:12 - prices the most between December 2021
46:15 - and October 2022
46:17 - so let's check for Rainbow Dust for
46:21 - example I will type
46:23 - Rainbow Dust okay and let's see what
46:28 - happened the price went down from 7.95
46:31 - to zero between May and July of 2022 I'm
46:35 - guessing that this brand went bankrupt
46:38 - or something like that so now let me
46:40 - show you how these two functionalities
46:42 - are implemented and I believe that the
46:44 - best way for you to understand this is
46:46 - if I show you through debugging so here
46:49 - inside products form code behind I have
46:52 - implemented two events biggest increase
46:55 - button click and biggest decrease button
46:57 - click so let's open the first one
46:59 - biggest increase button click and I will
47:01 - put breakpoint on the first line and now
47:04 - we will start the application again and
47:06 - we will see what is happening step by
47:09 - step so if I start the application and I
47:12 - click on biggest price increases
47:15 - we will come into this event and here we
47:20 - are creating a dictionary of string and
47:23 - decimal that dictionary is called brands
47:27 - with highest price increase and here we
47:30 - are invoking a method on our
47:32 - calculations class called calculate
47:35 - Brands price change and we are passing
47:38 - at the list of products we currently
47:40 - have 100 000 products that are loaded
47:43 - into our application and we are passing
47:45 - it an animation called sort type and we
47:48 - are saying that sword type should be
47:50 - increased because we are calculating
47:53 - brands that have increased the most and
47:55 - this same function will be used to
47:58 - calculate brands that have decreased the
48:00 - most and then we will pass sort type
48:03 - decrease okay so after we invoke this
48:08 - function let's see what is going to be
48:10 - the return result so if I hover over
48:12 - this variable as you can see we have the
48:15 - list of 10 brands the name of the brand
48:18 - and then how much it has increased in
48:21 - price in percentages and this is our
48:24 - list of 10 brands that have increased in
48:26 - price the most so after that we are
48:29 - creating a new variable called message
48:30 - and then we will iterate through these
48:33 - brands that we have received and for
48:35 - each brand I will say brand key which is
48:39 - the name of the brand increased price
48:42 - for
48:43 - brand.value and value is going to be
48:45 - increase in percentages and we are doing
48:49 - that for all 10 brands that we have
48:51 - received so after that is finished we
48:54 - are simply going to show that message
48:56 - together with this title top brands with
48:59 - highest price increase between December
49:02 - and October okay so that is how this
49:06 - function works now let's go in detail a
49:09 - little bit I will put breakpoint here
49:12 - again because now I want to explain how
49:15 - this method here Works calculate Brands
49:18 - price change so if I press this button
49:21 - again the application will be paused
49:24 - again so now I will press f11 in order
49:27 - to enter into this function now this
49:31 - function here receives list of products
49:34 - and it receives a narration called sort
49:36 - type here is the animation called sort
49:39 - type we have created it and it has
49:41 - increase and decrease here we are
49:44 - receiving increase type because we want
49:46 - brands that have increased the most okay
49:49 - so now when I enter to this function
49:51 - here we create an empty dictionary of
49:55 - Brands and that is going to be
49:57 - dictionary of string and list of
49:59 - decimals now what does this mean it
50:03 - means that we will have the name of the
50:05 - brand and then list of all the product
50:09 - price changes for that brand so how are
50:12 - we calculating that well we are it
50:15 - rating through the list of products one
50:18 - hundred thousand of them we take first
50:21 - price for each product and last price
50:23 - and then we calculate the change in
50:26 - price for that product this is the
50:29 - function that I already showed you and
50:31 - here after we get that change in price
50:33 - for a specific product we check if that
50:36 - brand already exists inside this
50:39 - dictionary and if it doesn't then we are
50:42 - going to add that brand to this list
50:44 - here and then we will simply add price
50:48 - change in percentages to that brand now
50:51 - to make this a little bit easier to
50:53 - understand let's move to this line here
50:56 - and then see what is going to be the
50:58 - result after this for each Loop is
51:00 - executed so after it is executed here we
51:04 - are going to have all of the brands so
51:05 - 55
51:07 - 890 of them and for each brand we will
51:11 - have its name and then we will have the
51:15 - a list of how much prices of its
51:19 - products have either increased or
51:20 - decreased for example
51:23 - this brand here called dial has three
51:27 - products the price of First has
51:29 - decreased by 6.21 percent the price of
51:32 - second has increased by 34.1 percent and
51:37 - then the price of third product is
51:39 - unchanged and we have that kind of
51:42 - information for all of the brands that
51:44 - we have inside our application so after
51:49 - we have done that for every single brand
51:51 - here we are calculating average price
51:53 - change by brand so what is this part of
51:57 - the code here doing well this is a link
51:59 - you expression that is going to select
52:01 - all of the brands and it will create for
52:04 - each brand a new key value pair of
52:08 - string and decimals so name of the brand
52:11 - and average price change for that brand
52:14 - and as the name it will store brand dot
52:17 - key which is the name of the brand and
52:19 - for the value it will store this what is
52:22 - this what well that is average value of
52:27 - all of the price changes for each
52:29 - product of that brand and it will round
52:32 - that to one decimal so if I execute this
52:36 - line of code let's see what we will have
52:39 - here okay and as you can see now we have
52:43 - dial averages 9.3 percent Dream Baby
52:47 - 16.6 percent NGK minus 1.5 and so on and
52:52 - here we have the list of all of the
52:55 - brands over 55 000 of them and we have
52:58 - their average price change in the
53:00 - interval that we have prices for so now
53:03 - I am simply going to check which sort
53:06 - type I have to apply here I have to
53:09 - apply increase and here I will simply
53:12 - order the brands in descending order so
53:14 - starting with the ones that have
53:16 - increased the price the most and then if
53:19 - we invoke the other functionality that
53:22 - calculates brands that have decreased
53:23 - the price then we are going to Simply
53:27 - order these brands in ascending order so
53:30 - this part of the code will be executed
53:32 - so after we sort them we will simply
53:35 - take 10 brands from that list and we
53:39 - will return that as a result of this
53:41 - function now here you can take as many
53:44 - as you want we have 55
53:47 - 890 and if you want you can show all of
53:50 - them or export them to a file and then
53:52 - analyze that so now when I press F5 we
53:56 - are going to get this result
54:00 - and one more thing that I want to show
54:02 - you is what is happening when this
54:04 - biggest price decrease is invoked well
54:07 - let's close the application very quickly
54:09 - and I will go to code behind of my
54:12 - products form and here as I already
54:14 - showed you we have the implementation of
54:16 - biggest increase button click and then
54:19 - here is the implementation of biggest
54:21 - decrease button click and as you can see
54:24 - these two methods are almost identical
54:29 - with the simple difference that here we
54:31 - are passing sort type increase and then
54:34 - here we are passing sort type decrease
54:37 - and here we are also just changing the
54:40 - title so that it says top brands with
54:42 - highest price decrease so that is how
54:45 - you can write an application that is
54:47 - going to analyze the market in this case
54:49 - analyze Amazon data set and that will
54:52 - give you useful information that you can
54:54 - later use in order to make informed
54:57 - decisions and if you want to get this
54:59 - data set from Bright data then they can
55:02 - provide you with most recent data that
55:04 - you can use in order to understand the
55:07 - current events that are happening on the
55:09 - market and make decisions based on that
55:11 - so that would be all for this video all
55:13 - the codes from the video will be on my
55:15 - GitHub and you can find the link in the
55:18 - description if you enjoyed this video
55:20 - make sure to give it a thumbs up and if
55:22 - you want another video like this one
55:24 - definitely let me know in the comments
55:26 - let me know what you would like to see
55:28 - and for all the people who watch my
55:30 - videos until the end I have a special
55:32 - gift for you if you enjoy my teaching
55:35 - style you will be delighted to know that
55:37 - my practical programming course will
55:39 - soon be out and as my viewer you can get
55:42 - a special discount for the course just
55:45 - make sure to sign up using the link in
55:47 - the description but do it right now
55:50 - because the number of people that can
55:51 - get this discount is limited and in my
55:54 - practical programming course I will
55:56 - teach you everything that you need to
55:57 - know to start working for a company or
55:59 - to start working on your own project and
56:02 - bringing your own ideas to life and
56:04 - making real world useful applications so
56:08 - if you're interested definitely make
56:10 - sure to sign up thank you very much for
56:12 - watching and I will see you in some
56:14 - other video bye

Cleaned transcript:

hi guys and welcome to my channel in this video I will teach you how you can work with a data set with almost a million records of real data from internet from Amazon and make an application that will analyze the data and give us useful information this is going to be practical programming course unlike any that you have seen before and in this video you are going to learn how you can work with data sets analyze the data perform calculations make charts and many more things so at the end we will have an application that is going to analyze the market and maybe based on that information you can decide to buy certain products buy stocks or sell them do whatever you want I am a financial advisor so I will not tell you what to do but I will teach you how you can build an application that will give us a lot of useful information so my suggestion is that you watch this video first in order to get a general idea of what we are going to build and then when you watch it second time you can code along with me and all the code that we type in this video is going to to be on my GitHub the link will be in the description of this video so without any further Ado let me show you the application that we are going to build so here is the application that we are going to build and now I'm going to show you some of its functionalities first of all here we have the list of all of the products that we have inside our data set and here you can select any product and see how its prices have changed and you can also calculate price change in percentages so you can see that since December of 2021 till October of 2022 for this Sony fe24 105 millimeters the price increased for 55.7 percent so you can do this and calculate it for one product or you can select multiple products and then perform the calculation or you can even select let's say all of the products and perform this calculation and as you can see it is taking a little bit more time because now it is calculating for 100 000 products and here you can see the result so the price has dropped for 1.5 percent so that is calculate change functionality and here I have two very interesting functionalities this one shows top 10 brands that have increased prices the most in this period and this one shows brands that have decreased price the most and if I click this here you can see only 10 brands because we have a limited space to show the data but I will teach you how you can calculate this for all of the brands that we have in this data set and we have tens of thousands of different brands so in this video you can learn how to build this application that will help you to take informed decisions like many businesses do they make applications that are going to analyze the market and then based on those analysis they decide to buy certain products or sell them or to buy stocks sell them and so on in this video I am not going to give you Financial advice on what you should do but I will definitely teach you how you can make an application that will give you all of the information that you need and then you can do whatever you want with that information so here are top 10 brands that have increased prices the most and then here we have top 10 brands that have decreased prices the most and as you can see here we have brand called Rainbow Dust for example it decreased price for 100 so I'm guessing that it maybe went bankrupt let's see so Rainbow Dust here is one product from that brand as an end as you can see it went from 7.95 to zero dollars between May and July of 2022. so this is the application that we will build together in this video so let's jump straight into code and start making this application so as I said we are going to use a data set with real data from Amazon and I got this data set from Bright data you can use the link in the description of this video in order to download a data set that you can use for test purposes and then if you need any specific data set or more specific data you can go on their site and check out some of the existing data sets or contact them and they can prepare you a data set with the data that you need there are a few very important things that you need to consider when you start building an application and the first one is that it is very hard to find quality data quality means data that is up to date and that reflects the latest information and also data that is structured and organized so that it is easy to work with for this video I used data set from Bright data and I decided to show you how you can work with data sets that have a lot of data and how you can make practical and useful applications and then another important thing that you need to consider is where you can get data sets for example you can get data sets from Reddit but they are usually very limited and they are sometimes low quality and also if you decide for government data sets of course they are not always available and accessible so my suggestion is to check out bright data whenever you need a data set you can use the link in the description to download some free data sets and then you can check out already existing data sets that they have and if you need some specific data definitely contact them and ask them to prepare that data for you so let me now show you the data set that we will use for this application so here is the data set that we will work with and it has almost 800 000 records but it is in CSV format as you can see let me show you and that is not really that readable to humans so I will format this into Json very quickly and then I will show you what we are working with so this is our data set and here is one product and inside it we have all of the information that we have about that product so we have URL on the Amazon site we have asyn title brand and then we have categories that the product belongs to and here we have prices throughout time from December 2021 to October 2022 and then we have another product and then another and another and so on so I will use this data set we will use it in CSV format in order to make this application so let's create our application click on file new project okay and here we will search for Windows forms application it is going to be csharp application click on next and let's call it for example Market analyzer app and click on next and make sure to select.net 6.0 framework and click create okay so the first thing that we will need to do is we will need to create a class where we will represent all of the properties of this product actually just the ones that we need and we will need Title brand and these prices so let's create that class I will create a new folder click on add new folder and name that folder data and inside this folder I will create a new class let's call it product like this okay so this is going to be public class and inside it I will say public string title okay and then let's do the same for brand and I will also create properties for prices let me do that and I will be back okay so here are the properties for our prices and that is our class the next step is we need to make a way to map this class here with this file here where is our data actually it is in CSV format and this that I'm showing you is Json format because it's more readable to humans so in order to map CSV file with our class we need to install a nougat package so I'm going to right click on my project and click on manage nuget packages and here I need to find a nuget called CSV helper so CSV Helper and click on browse instead of install because we don't have this nuget and here it is I'm going to click on it and click on install Okay and then click on OK I accept and as you can see this nougat has been installed so now I am going to close this also I will save this and closely this is something related to our framework and then I will go to this data folder again right click on it and here I will add another class and I will call it product map okay click on add this is also going to be public class and it is going to inherit from a class called class map and I will say that it is the last map of product so here we are going to write a way to map the properties of our product from CSV file from our data set into these properties here of our product class so let me show you how we are going to do that so let's create a Constructor for this class and this class called classmap has a method called map and we are going to use that method in order to map properties these properties of our products class with these here so titles from the class will be mapped with this brand from the class will be mapped with this and so on so let's do that go back to our products map and here I will use method called map so I will say product P dot title will be mapped with title this is how you do it and then do the same for brand like this map it with brand and let's do the same for prices as well and I will be back so this is how you map the prices make sure that these names here correspond with these names here okay so now we are finished with mapping the data and now what we can do is we can drag and drop our data set into our application so I have it here I will just drag and drop it into my data folder like this okay and here I have to do two things so right click on your data set and click on properties thank you okay and here you need to make sure that your data set is set as embedded resource for your application and also here copy to Output directory make sure to select copy always so that whenever we start our application this data set is copied into our output directory so that it can be used for our application so those are two things that you need to do so now that we have created our products class we have created products map so the way to map our class with our CSV file and we have also drag and dropped our CSV file into our application what we need to do is we need to load the data from this CSV file into our application and for that I will create a new class right click on data click add plus and I will call it CSV data loader and make this class public and inside this class I will very quickly create a method that will load the data and then I will be back to explain it so here is how CSV data loader class is going to look like it has two Fields data set path which combines the path of our application and also the path of our Amazon data set inside the application so it is inside data folder and it's called Amazon compare.csv which is this file here and then this variable here I will explain what it does in a minute so here we have a method called load data and that method returns a list of products please note that I have made both this method and the class static and this is also static and the reason is because I want to be able to invoke this method without having to create the instance of this class so this method is going to low the data and return me the list of products so what I'm doing inside this method is following first I am creating a new reader new stream reader and I'm giving it the path to my data set now this stream reader just knows how to read text so because we are going to work with CSV files we need to create another type of reader which is more specific and that is CSV reader and we are going to tell it hey please use this reader that knows how to use text and then you have some additional options that we will need and those are these options here so this CSV reader is going to register with this product map class which is the one that we have wrote previously it is this one that knows how to map from CSV file to our class okay so it is going to use that class and here we are creating a list of products and we are saying hey CSV reader get records They are going to be of this type there are going to be products and convert them to list and this part here says please take this many records now this is because we are working with huge data set that has almost 800 000 records in case that you want to limit how much data you take you can set that value here so for example by changing this to 100 you would take only 100 records and if you put 100 000 you're going to take 100 000 records so please adjust this to the speed of your computer because loading all of the data can make your application a lot slower so once we take that data here we will have the list of our products and we just returned those products so this method should be able to load the data into our application and now let's see where we are going to invoke the this method and load the data so please note this form one this is the default form that you get when you create a new application so let's very quickly rename it and let's call it products form and make sure to click yes here so that form 1 is renamed everywhere okay so this is the form where we are going to build our user interface and here the first thing that I want to do is I want to drag and drop a grid and we will use that Grid in order to show the data that we have loaded so where can you find the grid click on view and then find toolbox and here you have all of the controls that you can simply drag and drop to your form here I'm going to type grid and I will drag and drop data grid view to my form like this so let's name this grid so right click on it and click on properties and here you have this small window I am just going to move it here like this and here you should be able to find property called name so instead of calling it data grid view let's name it products grid like this so now what I want to do is I want to create form load event so when our form loads I also want to load the data so you can double click on the form or you can right click here click on properties and here you can find all of the events of the form and you can double click on this load event or again you can double click on the form and you should get this form load event so what I want to happen when my form loads is I want to show the data in my grid so I will say products Grid it's data source is going to be this CSV data loader CSV data loader and inside it method called load data so when this method returns products I want to set them as a data source for my grade so now let's start the application and let's see what's going to be the result of this and as you can see here is our grid and the data has been loaded to our application and now we can see it on our grid now one very important thing to keep in mind is if your computer is a little bit slower here you can change data limit and decide how much data you want to load and if you decide to load for example just 100 products then your application start is going to be much faster versus if you decide to load 800 000 records so the entire data set okay so I am going to go back to my grid here and one thing that I want to do before continuing is I just want to refactor this a little bit because I want to reuse this data set that is loaded into my application on more than one place so I will store it into a global variable I will create a list of products I will call them products and here instead of loading this directly into my data set I will store this data into my products variable like this and then I will use this product to set the data source of my grid like this and the result is going to be absolutely the same but we will just be able to use this products variable inside this entire class so on more than one place one thing that you should notice is that our grid was generated automatically meaning that these columns were generated automatically based on the data set that we gave to our grid now one thing that I would like to do here is I would like to show only title and brand inside our grid and then later we will see how we can show these prices on a chart so in order to customize our grid and show only columns that we want we will need to make a method that is going to customize the appearance of the grid so let's do that here I will create private void method I will call it customize grid appearance foreign we are going to create columns manually and add them to our grid and we will also tell to our grid that it shouldn't generate columns automatically so let's do that let's say products grid Auto generate columns is equal to false that is the first thing so please don't generate columns automatically and then the next thing is to create columns ourselves so here I will create data grid view text box column like this and the first one will be title column okay and here we need to set two things we need to set the header of the column so title call Dot tether text will be equal to title and we also need to tell to our column what is going to be the property that it will connect to from our product so I will say title call Dot data property name will be also title so please connect with title property from products and name the column title so now I can add this column to my products grid so I will say products Bridge dot columns dot add title column okay and let's do the same for the brand column I'm going to copy this paste it and here I will say brand column and then brand column dot header text will be brand and then brand column dot data property name will also be brand and here I will add brand column to my grid so now we should invoke this customize grid appearance method before we fill our grid with data so I will invoke it on for load event so please first customize grid appearance and then load the data into my grid so now if I start the application let's see what's going to happen Okay as you can see here we have a grid that has only two columns now there are a few things that I would like to change regarding this grid first thing is I would like to fill this entire grid with data without having this empty space here and for that you use this line and then I would also like to remove this empty column here and for that you use this line and I would also like to be able when I select certain product I would like for entire row to be selected not a specific so so you can do that with this line and and I am going to add those three lines here to my customized grid appearance like this so I added those three lines in my customized grid appearance method like this and now if I restart my application let's see what has changed and as you can see now we can select the entire row and the entire grid is filled with the data and we don't have that empty column and one thing before we continue building this application is I will very quickly change the font of this application so that it is a little bit bigger so that you can see it as well so there is this property here called font double click on it and here you can change the font and its size so let's say Century Gothic and size will be 16. okay and as you can see this form is now a little bit too big so let's just make this grid a little bit smaller and the entire form also a little bit smaller okay so the next functionality that I would like to build here is going to be search option so that we can search our products and in order to do that I will drag and drop from my toolbox a text box like this okay and put it here so we should have the option to type in the text into this text box and this grid should be filtered based on the text that we have typed so there are a few ways to do this one way which is easier and more beginner friendly is to Simply add a button to this form so when the user types in a text and then presses that button then you should filter this grid but another way which is more professional and better way is to use async functions and in order to write asking functions you need to understand asynchronous programming in depth now if you're not familiar with asynchronous programming or if anything that you have seen so far in this course is not understandable to you make sure to sign up for my practical programming course where I am going to teach you everything that you need to know in order to start building real applications and working for real companies um I will basically give you my 10year experience in this course that you can finish in 10 weeks and if you want to get a special discount as my viewer you can use the link in the description but make sure to sign up for the discount right now because the number of people that can get it is limited so let's get back to our application and as I said here I am going to show you how you can write asynchronous function that is going to perform searching of this grid based on the text that you input into this text box so let's very quickly rename this text box and I will call it search text like this okay so when the text changes there is an event called text change so how are we going to implement this event this event is going to be triggered invoked every time that text changes inside this text box so either user inputs a letter or he deletes a letter so what I'm going to do is I will wait while user is typing and then when the user makes a pause of let's say half a second or 300 milliseconds that is the moment where I am going to perform the search and show the results inside this grid so how am I going to do that well when the user starts typing I will measure the length of text inside this text box and then I will make a pause of 300 milliseconds and then I will measure the length of this text box again and if during that time during those 300 milliseconds the length of text has not changed that means that the user has stopped typing and now it's time to perform the search of this grip so let's do that here I will create a variable of type int and let's call it length before pause like this so here I will say search text Dot text Dot length like this so this is going to be one thing after that I will make a pause of 300 milliseconds so I will say task delay and then let's say 300 milliseconds but one thing that you keep in mind is if you do it like this then it is going to freeze your application so what we need to do is we need to say away so please asynchronously wait don't freeze my application and as soon as you add a weight that means that the function needs to be async like this so now after you have waited for 300 milliseconds what we should do again is we should measure the length of this text box again and here I will call it length after pause okay so now if linked before pause is the same as linked after pause what we should do is we should refresh our grid let's say refresh grid like this and now I will very quickly implement this method and I will be back to explain you what it is doing so here is our refresh grid method basically we are performing the search of products and then we set that search result as the data source for our grid so let's explain this part here here we are taking all of the products that have been loaded into our application and we are saying please give me only the products where product brand contains this search text here and also when you are comparing those two please convert those to lowercase so that the user doesn't need to think if he has typed lowercase or uppercase letter because if you don't do this part here then these two are not going to be the same so that is how you can search products and here you define if you want to search by brand name or by title of the product and you can also modify this program so that you can search by both brand and title so now I am going to start this program and show you how it works okay so if I for example enter Sony as you can see here we will only get products from Sony brand okay let's close this application and one thing that I want to do is here inside form load event instead of directly assigning data source of products grid like this I just want to invoke the method refresh grid like this and what this method will do is if the search text is empty then it is going to return all of the products so if I start the application once more at the start we get all of the products the next thing that I would like to teach you is how we can show the prices of these products on a chart that I will put here so in order to work with charts we need to install another nougat package so let's close this application and here I will again right click on my project click on manage nougat packages okay and I need to find a nougat which is called Windows forms data visualization so when forms.data visualization please find it okay it's this one install it okay and it has been installed so now what you can do is you can go to your products form and inside toolbox you can search for chart okay drag and drop it to your form like this and now what we should do is we should Implement a couple of methods that are going to show the prices of product on this chart so I will go to my code behind of products four and here I will implement the methods and I'll be back to explain all the code so in the code behind of my products form I have created two methods to work with the chart and a couple of helper methods so now I'm going to explain everything the first method is called refresh chart and it receives a selected product which means that this method will be invoked whenever a user selects a specific product on the grid so let's see what this method does first of all it clears prices chart and it clears something called series now what is series series is used in order to group points together because one chart can have multiple series for example this so we use series in order to group those points together so after you clear it here we are going to add prices for every date that we have so we are adding December 2021 and here I'm adding its value and please keep in mind that this is a string so I needed to convert it to decimal and this is the method that I created it's not built in and I will explain it in a minute so basically here we are adding points for every single price that we have for our products that is what this code here does and then after we add all of the points for all the prices I am going to iterate through all of the points of this series and for each point I will add a label that will simply show the value on the yaxis so it will simply show the price of that product so that is what this refresh chart method us now let me very quickly show you this convert to decimal I'll press F12 so here I created an additional class inside my data folder it is static class called calculations and inside this class we are going to put some helper methods that will perform different calculations conversions and things that we need for this application inside that I created one static function called convert the decimal and the job of that function is to take a string and convert that string to decimal number so here I'm saying please try to parse this prices string into a variable called price that will be of type decimal and return it here and if you cannot do this then simply return null so that is how this function looks like and as you can see this is how I have used it so that is the first function refresh chart okay the second function is called configure chart and it looks very simple we first clean any existing data that our prices chart has and then we create a new blank chart area and here we are going to Define new series called price and inside it we are going to Define what is going to be the type of our chart this is one type that I will use for this application and later I will show you some other types that you can use as well so that is the other method basically this configure chart is going to be invoked only once when we start our application so that is why I invoked this method here on my form load event that is when this configure chart method is invoked and then refresh chart method is going to be invoked whenever a user selects a specific product on the grid so for that purpose I created an event on my grid so this grid here has an event that is called cell double click and I implemented that event here and here is how it looks like so whenever the user double clicks on a specific product inside our grid this event here will be invoked and inside this e Property we will have the index of the selected row and we will use that index in order to get selected products so here I'm saying hey for this product grid please find from all of its rows the one that has this index and then take the item from that Row the property is called Data bound item and it represents the item that is stored in that row and since we know that it is of type product we will cast it to product and store it to this variable and then simply we are going to pass that selected product to our refresh chart method so that is when this method here is going to be invoked so now if I start the program and I select any product as you can see here we have the chart that shows us how the prices behaved since December 2021 till October 2022 so that is how you can create a chart and as I promised inside this method here configure chart you have a lot of different charts that you can use here are some and the ones that I would recommend to use for this type of application are these here so now that you have learned how to work with charts I would like to show you something else I would like to be able to calculate the change of price of each product in percentages and to see if the price has increased or decreased and how much so in order to do that we need to write another method which I'll write very quickly and then I will be back to explain how it works so I have implemented this functionality and let me first show you the behavior of the application and then I will show you the code behind it so let's start the application and let's search for a product that we are interested in let's say I want to search from Apple brand and let's click for example on this Apple gift card okay the price of gift card stayed the same as you can see here so if I press on calculate change it says price did not change but if I select on some other product let's say this apple lightning three millimeter adapter as you can see the price has fluctuated so if I press on calculate change you can see that the price has increased for 11 okay so you can do this for one product or you can select multiple products like this so just hold Ctrl and select the products that you want and then click calculate change and you will see the calculation for the products that you have selected and here it says price dropped for minus 12.5 so basically you can select all of the products that you buy and then you can see how the prices of those products have changed and you can see if they dropped or if they increase and you can also let's delete everything you can also select all of the products that we have in this data set and then click on calculate change and here we are performing calculation for all of the products and as you can see it says that price has dropped for minus 1.5 percent from December of 2021 to October of 2022 and please keep in mind that here I'm loading just 100 000 products into my application if you want to calculate the change for all of the products you should load them all in your application so this is a functionality that I want to build and here is the code so here I wrote a function called calculate change in price and that function receives a list of products that it should use to calculate the change and this list can contain just one product or multiple products depending on what you selected on the grid and here is how the calculation is performed so basically this code here does the same as this code here it basically goes through the list of all of the selected products and then it gets the first price of the current product and the last price it checks if they have a value this is important so that our application doesn't crash in case that some product doesn't have a value and then here it sums all the first prices and all the last prices so after this for each Loop we will have total first price of the selected product and total last price of the selected products and here we are using those two values in order to calculate the change in percentages and I will show you how this method here Works in a moment and then after you get the change in percentages here we just check if the change is greater than zero we print the message that price has increased for this many percentages and then if it is less than zero then the price dropped or decreased for this many percentages and if it is exactly zero then the price did not change and also I am converting this price in percentages to string with one decimal so that is how this method Works in general and here we have a couple of helper methods that I want to explain so let's first see this get first nonnull price if I click on f11 you can see that we have another helper method inside this calculations dot CS all of these methods by the way are created inside calculations class so here is the method get first nonnull price and what it does is it basically checks if we have this price for December of 2021 and if we have it then it returns that price converted to decimal number but if we don't have this price then it tries to return this price again if we don't have it it will return this price and then it will try to return this and this so the first one of these prices that we have will be returned and then we also have a method called get lost nonnull price and it does the same thing but in reversed order it first tries to return the last price and then the one before that and the one before that and so on so those are two helper methods that are created and that are used here okay and then one more method that I created is called calculate change in percentages again all of these methods are inside calculations.cs and this method takes the first price and the last price and here is what it does it performs a check if first price has value and if last price has value and also if first price is not equal to zero because here we are dividing by it and as you already know we should not divide by zero as this comment here says and this is how we perform the calculation in order to get the change in percentages so let me explain how this expression here works so let's say you have a shirt that you bought for 100 that would be first price after that you sold that shirt for 120 dollars and that would be last price so if you perform this calculation this is the result that you would get so you would have twenty dollars of profit which is 20 increase and that is how this calculation here returns you the change in percentages so after this part of the code is executed then we take that percentage change and we return adequate message so now your question might be where is this calculate change in price function invoked well let's go to our form and as you can see here I have added a button and the name of the button is calculate change Button as you can see here so calculate change button so if you click on the button this is is the event that is going to be executed so here we first take all of the selected rows from our grid and we make sure to check if any row was selected because if the user just pressed the button without selecting any rows then we just want to return from this function and not do anything but if user has selected at least one row we will proceed with this code here so we will create a list of products it will be empty at first and then we will go through selected rows and from each row we will take the product and we will add it to this list and after that we will invoke function calculate change in price which is the one that we previously saw and we will pass it the list of our selected products and store the message that the function returns inside this variable here and then we will simply show that message using message box show method so once more if I run the program and I select for example three four products and I click on calculate change we will get the message and here it says that the price for these four products has increased for 2.3 percent when you have data set that is as big as ours you can do many things for example now I'm going to show you how you can build a functionality that will tell you which brands have increased prices the most and which have decreased prices the most here I'm going to show only 10 brands because we have limited space to show the information but I will teach you how you can do that calculation for all the brands that we have in this data set and we are currently loading 100 000 records and in those 100 000 there are over 50 000 Brands so in the entire data set there would be much more and many businesses use this type of information in order to decide when to buy certain products or to sell them when to buy stocks or sell them and so on I will not give any Financial advice but I will teach you how to build this application so that you can make your own decisions however you want so let me write the code and then I will show you the functionality and I will teach you how to implement it so here I have implemented the functionality that is going to tell us which brands have increased prices the most and which have decreased prices the most so if I click on this button here we will get top 10 brands that have increased prices the most between December 2021 and October of 2022. let's check Bonville manufacturing it says that it has increased price for 2286 percent okay so let's type here Bondville manufacturing okay so if I click here as you can see the price has jumped from 0.5 to 10.99 and then their other product went to 12.8 and then 12. so if I select all of these three products and I press calculate change as you can see we will get the same number for price increase so that is how this biggest price increase works and here we have just 10 brands because we have limited space to show the data but I will teach you how you can calculate this for all the brands that we have in our data set let's close this one and then if I press biggest price decreases here we will get top 10 brands that have decreased the prices the most between December 2021 and October 2022 so let's check for Rainbow Dust for example I will type Rainbow Dust okay and let's see what happened the price went down from 7.95 to zero between May and July of 2022 I'm guessing that this brand went bankrupt or something like that so now let me show you how these two functionalities are implemented and I believe that the best way for you to understand this is if I show you through debugging so here inside products form code behind I have implemented two events biggest increase button click and biggest decrease button click so let's open the first one biggest increase button click and I will put breakpoint on the first line and now we will start the application again and we will see what is happening step by step so if I start the application and I click on biggest price increases we will come into this event and here we are creating a dictionary of string and decimal that dictionary is called brands with highest price increase and here we are invoking a method on our calculations class called calculate Brands price change and we are passing at the list of products we currently have 100 000 products that are loaded into our application and we are passing it an animation called sort type and we are saying that sword type should be increased because we are calculating brands that have increased the most and this same function will be used to calculate brands that have decreased the most and then we will pass sort type decrease okay so after we invoke this function let's see what is going to be the return result so if I hover over this variable as you can see we have the list of 10 brands the name of the brand and then how much it has increased in price in percentages and this is our list of 10 brands that have increased in price the most so after that we are creating a new variable called message and then we will iterate through these brands that we have received and for each brand I will say brand key which is the name of the brand increased price for brand.value and value is going to be increase in percentages and we are doing that for all 10 brands that we have received so after that is finished we are simply going to show that message together with this title top brands with highest price increase between December and October okay so that is how this function works now let's go in detail a little bit I will put breakpoint here again because now I want to explain how this method here Works calculate Brands price change so if I press this button again the application will be paused again so now I will press f11 in order to enter into this function now this function here receives list of products and it receives a narration called sort type here is the animation called sort type we have created it and it has increase and decrease here we are receiving increase type because we want brands that have increased the most okay so now when I enter to this function here we create an empty dictionary of Brands and that is going to be dictionary of string and list of decimals now what does this mean it means that we will have the name of the brand and then list of all the product price changes for that brand so how are we calculating that well we are it rating through the list of products one hundred thousand of them we take first price for each product and last price and then we calculate the change in price for that product this is the function that I already showed you and here after we get that change in price for a specific product we check if that brand already exists inside this dictionary and if it doesn't then we are going to add that brand to this list here and then we will simply add price change in percentages to that brand now to make this a little bit easier to understand let's move to this line here and then see what is going to be the result after this for each Loop is executed so after it is executed here we are going to have all of the brands so 55 890 of them and for each brand we will have its name and then we will have the a list of how much prices of its products have either increased or decreased for example this brand here called dial has three products the price of First has decreased by 6.21 percent the price of second has increased by 34.1 percent and then the price of third product is unchanged and we have that kind of information for all of the brands that we have inside our application so after we have done that for every single brand here we are calculating average price change by brand so what is this part of the code here doing well this is a link you expression that is going to select all of the brands and it will create for each brand a new key value pair of string and decimals so name of the brand and average price change for that brand and as the name it will store brand dot key which is the name of the brand and for the value it will store this what is this what well that is average value of all of the price changes for each product of that brand and it will round that to one decimal so if I execute this line of code let's see what we will have here okay and as you can see now we have dial averages 9.3 percent Dream Baby 16.6 percent NGK minus 1.5 and so on and here we have the list of all of the brands over 55 000 of them and we have their average price change in the interval that we have prices for so now I am simply going to check which sort type I have to apply here I have to apply increase and here I will simply order the brands in descending order so starting with the ones that have increased the price the most and then if we invoke the other functionality that calculates brands that have decreased the price then we are going to Simply order these brands in ascending order so this part of the code will be executed so after we sort them we will simply take 10 brands from that list and we will return that as a result of this function now here you can take as many as you want we have 55 890 and if you want you can show all of them or export them to a file and then analyze that so now when I press F5 we are going to get this result and one more thing that I want to show you is what is happening when this biggest price decrease is invoked well let's close the application very quickly and I will go to code behind of my products form and here as I already showed you we have the implementation of biggest increase button click and then here is the implementation of biggest decrease button click and as you can see these two methods are almost identical with the simple difference that here we are passing sort type increase and then here we are passing sort type decrease and here we are also just changing the title so that it says top brands with highest price decrease so that is how you can write an application that is going to analyze the market in this case analyze Amazon data set and that will give you useful information that you can later use in order to make informed decisions and if you want to get this data set from Bright data then they can provide you with most recent data that you can use in order to understand the current events that are happening on the market and make decisions based on that so that would be all for this video all the codes from the video will be on my GitHub and you can find the link in the description if you enjoyed this video make sure to give it a thumbs up and if you want another video like this one definitely let me know in the comments let me know what you would like to see and for all the people who watch my videos until the end I have a special gift for you if you enjoy my teaching style you will be delighted to know that my practical programming course will soon be out and as my viewer you can get a special discount for the course just make sure to sign up using the link in the description but do it right now because the number of people that can get this discount is limited and in my practical programming course I will teach you everything that you need to know to start working for a company or to start working on your own project and bringing your own ideas to life and making real world useful applications so if you're interested definitely make sure to sign up thank you very much for watching and I will see you in some other video bye
