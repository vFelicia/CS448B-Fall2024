With timestamps:

00:00 - hi everyone welcome to my channel in
00:03 - this video i want to talk about pointers
00:05 - so i will go straight to the point
00:08 - uh pointers are very important concept
00:10 - in c plus plus and they have many uses
00:12 - in z plus plus now pointers are not
00:15 - limited only to c plus plus they exist
00:17 - in other programming languages as well
00:20 - but in most of those programming
00:21 - languages they are really hidden they
00:23 - work behind the scenes so you cannot see
00:26 - them and you cannot use them yourself
00:28 - but it's c plus you can use them and you
00:31 - can create your own pointers and they
00:33 - can be pretty powerful if you know how
00:35 - to use them but
00:37 - they can get quite confusing as well if
00:39 - you don't understand them well so the
00:42 - first thing that i want to explain is
00:44 - what are pointers so
00:47 - we already have explained the concept of
00:49 - a variable and you should be familiar
00:51 - with that
00:52 - so we said that a variable is just a
00:55 - container so a container that stores
00:57 - certain value now a pointer is container
01:01 - as well but instead of storing value
01:03 - pointer stores an address so a memory
01:06 - location and let me show you how
01:09 - pointers work in visual studio
01:12 - let's create a variable of type int and
01:15 - i'm going to call it n and assign it a
01:17 - value of 5
01:19 - and let's write out
01:21 - this n
01:24 - like this
01:25 - so nothing new here we are already
01:27 - familiar with this and if i run my
01:29 - program as you can see we get this value
01:33 - of five so that was expected now as i
01:36 - already said this n is a variable and
01:39 - that means that it is a container which
01:42 - is storing certain value now because it
01:45 - is a container that means that it has
01:47 - its address inside memory so it has its
01:50 - physical location so how can we get that
01:53 - location how how can we check which
01:55 - address this n has
01:57 - so in order to do that you use this
02:00 - ampersand symbol like this so you put it
02:03 - before your variable name and that
02:06 - should give you the address of that
02:07 - variable so if i run my program now
02:12 - as you can see now we have an address um
02:15 - and this is the address of our n
02:18 - variable so this is its physical address
02:21 - where this value of five is stored and
02:24 - because this is pretty hard for humans
02:26 - to remember this is just a random
02:29 - numbers and characters because of that
02:32 - we use meaningful names and we access
02:35 - these values that we store in our memory
02:38 - using these meaningful names which are
02:40 - our variables so i'm going to close this
02:43 - now and what i want to show you here is
02:46 - i want to show you how can you create a
02:48 - pointer that is going to hold this
02:50 - address of our n variable so in order to
02:53 - create a pointer you give it a type
02:56 - first so you say int and then in order
02:59 - to indicate that you are creating a
03:00 - pointer you use this star symbol and
03:04 - then you give it a name so let's call it
03:06 - ptr pointer
03:08 - and i'm going to assign it the address
03:11 - of our n variable so i'm going to copy
03:14 - this and paste it here
03:17 - okay now our pointer is holding the
03:20 - address of our n variable and in order
03:22 - to prove that i'm going to write out
03:25 - the value of my pointer
03:30 - like this
03:33 - so as expected we have this first line
03:36 - here which is writing out the address of
03:39 - our n variable and then this second line
03:41 - of code is this line here and as you can
03:45 - see we have written out the value of our
03:47 - pointer and that is the same address as
03:50 - this one here which means that our
03:53 - pointer really is storing the address of
03:55 - our n variable now you may ask how can i
03:59 - access or can i access the value that is
04:03 - stored on that address using pointers
04:05 - and the answer to that question is yes
04:07 - you can and in order to do that in order
04:10 - to access the value that is stored on
04:13 - this address that your pointer is
04:14 - holding you have to dereference your
04:16 - pointer so how do you do that well let
04:19 - me copy this
04:22 - so as you already have seen this line of
04:25 - code here is going to write out the
04:27 - address and in order to write out the
04:29 - value on that address you dereference
04:32 - the pointer and in order to do that you
04:34 - add this star symbol before your
04:36 - pointer's name so if i run my program
04:40 - now
04:41 - as you can see
04:42 - in this last line of code we have the
04:45 - value of 5 which is actually the value
04:47 - that is stored on this address here so
04:50 - let me show you one more thing what i
04:52 - want to do is i want to change the value
04:55 - that is stored on this ptr address so on
04:58 - this address that our ptr pointer is
05:00 - storing so how am i going to do that i'm
05:03 - going to say again star symbol and then
05:06 - ptr
05:07 - and this here means please access this
05:10 - memory location so whatever i'm going to
05:12 - assign here is going to be stored on
05:15 - that memory location and what i want to
05:17 - assign is for example value of
05:20 - 10 like this so now if i copy this line
05:24 - of code and then paste it here
05:26 - and if i run my program again
05:29 - we have this value of 10 stored on this
05:32 - address here and one interesting thing
05:35 - as well is that if we try to write out
05:38 - the value that our n holds now
05:41 - like this
05:42 - if i run my program
05:44 - as you can see our n holds the value of
05:48 - 10 as well even though
05:50 - we have never said that n has the value
05:52 - of 10 but we have stored the address of
05:56 - our n in our pointer and then we have
05:59 - dereferenced our pointer meaning we have
06:01 - changed the value on that address here
06:04 - in this 11th line of code here so that's
06:07 - why our n holds value of 10 now
06:11 - one very important thing to keep in mind
06:13 - is that your pointer has to be of the
06:15 - same type like the variable that it is
06:17 - pointing to
06:18 - so let's close this
06:20 - so as i said this integer pointer is
06:23 - pointing to an integer variable so our n
06:26 - is of int type and the same way would be
06:29 - if we created a float pointer it would
06:32 - have to point to a float variable and
06:34 - then char pointer can point only to a
06:37 - char variable double bool uh and so on
06:40 - so pointer and the variable that that
06:43 - pointer is pointing to have to be of the
06:46 - same type
06:47 - okay so that means that if i try to
06:50 - change the type of this n variable to
06:52 - float for example
06:55 - like this so if i say float immediately
06:58 - we get an error here and the error says
07:02 - a value of type float pointer cannot be
07:05 - used to initialize an entity of type
07:08 - endpointer meaning you cannot assign
07:11 - address of a float type to pointer of
07:15 - int
07:16 - type
07:17 - okay so that is the error that we have
07:20 - here and i'm going to return this to int
07:23 - okay and
07:25 - as you can see that error has
07:27 - disappeared because now our pointer is
07:30 - pointing to the same type so to the
07:32 - variable of the same type that that
07:34 - pointer has so int pointer pointing to
07:38 - an int variable
07:40 - one thing that beginners very often try
07:42 - to do is the following so they say okay
07:46 - let's create a pointer so int
07:48 - let's give it a name ptr2
07:51 - so pointer like this so i have created a
07:54 - pointer right so let's dereference this
07:57 - pointer and assign it a value so i'm
07:59 - going to say please dereference ptr 2
08:02 - and assign it a value of 7 for example
08:06 - now this code here has a probe problem
08:10 - and if i run it if i say build solution
08:13 - actually as you can see it says
08:15 - uninitialized local variable ptr2 used
08:18 - this means that this ptr2 so this
08:21 - pointer to does not have an address so
08:24 - where should it store this value of 7 if
08:27 - it does not have an address
08:29 - and the easiest way right now to solve
08:31 - this problem is going to be to create a
08:34 - variable
08:35 - and to give the address of that variable
08:37 - to our ptr to pointer so i'm going to
08:40 - say int v
08:42 - this variable has to be of the same type
08:44 - as our pointer as we already said
08:47 - and then i'm going to say here our ptr2
08:50 - is going to hold the address of our v
08:54 - variable like this and now we shouldn't
08:58 - have this problem anymore so if i build
09:00 - my code again
09:02 - as you can see one succeeded so the
09:04 - problem has disappeared and let me write
09:07 - out the value of this v variable so i'm
09:10 - going to say v is equal to and then
09:13 - let's write out the value of this
09:17 - v
09:18 - and if i run my program
09:20 - as you can see it says that v has the
09:23 - value of seven because we have assigned
09:26 - it here by dereferencing our pointer
09:28 - that is holding the address of our v
09:32 - so you may say now okay salina i
09:34 - understand this but this seems a little
09:37 - bit too much why would i create a
09:39 - pointer just to assign a value to a
09:42 - variable and the answer to that question
09:44 - is you don't this is not the type of
09:47 - problem for which pointers were created
09:49 - in c plus plus
09:50 - so there are different problems that
09:52 - pointers solve in c plus plus and this
09:55 - here is just a demonstration of what are
09:58 - pointers and how can you create your own
10:00 - pointers now examples of some of these
10:03 - other problems that pointers solve is
10:06 - you can use pointers in order to pass
10:08 - values by a reference to a function
10:11 - and then you can use them to return
10:13 - multiple values from a function which is
10:15 - an interesting one
10:17 - you can use pointers in combination with
10:19 - arrays as well
10:20 - you can use them for dynamic memory
10:22 - allocation and then if you are familiar
10:24 - with oop object-oriented programming you
10:27 - can use a pointer of a base class in
10:30 - order to access a object of derived
10:33 - class
10:34 - and then there is this concept of smart
10:37 - pointers which we are going to cover in
10:38 - the future
10:40 - so
10:41 - i believe as well that i have mentioned
10:42 - some of these things in some of my
10:44 - videos but i plan to make a
10:47 - dedicated series two pointers where we
10:49 - are going to talk only about pointers
10:52 - so stay tuned subscribe to my channel um
10:56 - hit that bell icon as well so that you
10:58 - are notified when i publish my next
10:59 - video
11:00 - and if you like this one give it a
11:02 - thumbs up thank you for watching and i'm
11:04 - going to see you in my next video where
11:06 - we will be talking about pointers bye

Cleaned transcript:

hi everyone welcome to my channel in this video i want to talk about pointers so i will go straight to the point uh pointers are very important concept in c plus plus and they have many uses in z plus plus now pointers are not limited only to c plus plus they exist in other programming languages as well but in most of those programming languages they are really hidden they work behind the scenes so you cannot see them and you cannot use them yourself but it's c plus you can use them and you can create your own pointers and they can be pretty powerful if you know how to use them but they can get quite confusing as well if you don't understand them well so the first thing that i want to explain is what are pointers so we already have explained the concept of a variable and you should be familiar with that so we said that a variable is just a container so a container that stores certain value now a pointer is container as well but instead of storing value pointer stores an address so a memory location and let me show you how pointers work in visual studio let's create a variable of type int and i'm going to call it n and assign it a value of 5 and let's write out this n like this so nothing new here we are already familiar with this and if i run my program as you can see we get this value of five so that was expected now as i already said this n is a variable and that means that it is a container which is storing certain value now because it is a container that means that it has its address inside memory so it has its physical location so how can we get that location how how can we check which address this n has so in order to do that you use this ampersand symbol like this so you put it before your variable name and that should give you the address of that variable so if i run my program now as you can see now we have an address um and this is the address of our n variable so this is its physical address where this value of five is stored and because this is pretty hard for humans to remember this is just a random numbers and characters because of that we use meaningful names and we access these values that we store in our memory using these meaningful names which are our variables so i'm going to close this now and what i want to show you here is i want to show you how can you create a pointer that is going to hold this address of our n variable so in order to create a pointer you give it a type first so you say int and then in order to indicate that you are creating a pointer you use this star symbol and then you give it a name so let's call it ptr pointer and i'm going to assign it the address of our n variable so i'm going to copy this and paste it here okay now our pointer is holding the address of our n variable and in order to prove that i'm going to write out the value of my pointer like this so as expected we have this first line here which is writing out the address of our n variable and then this second line of code is this line here and as you can see we have written out the value of our pointer and that is the same address as this one here which means that our pointer really is storing the address of our n variable now you may ask how can i access or can i access the value that is stored on that address using pointers and the answer to that question is yes you can and in order to do that in order to access the value that is stored on this address that your pointer is holding you have to dereference your pointer so how do you do that well let me copy this so as you already have seen this line of code here is going to write out the address and in order to write out the value on that address you dereference the pointer and in order to do that you add this star symbol before your pointer's name so if i run my program now as you can see in this last line of code we have the value of 5 which is actually the value that is stored on this address here so let me show you one more thing what i want to do is i want to change the value that is stored on this ptr address so on this address that our ptr pointer is storing so how am i going to do that i'm going to say again star symbol and then ptr and this here means please access this memory location so whatever i'm going to assign here is going to be stored on that memory location and what i want to assign is for example value of 10 like this so now if i copy this line of code and then paste it here and if i run my program again we have this value of 10 stored on this address here and one interesting thing as well is that if we try to write out the value that our n holds now like this if i run my program as you can see our n holds the value of 10 as well even though we have never said that n has the value of 10 but we have stored the address of our n in our pointer and then we have dereferenced our pointer meaning we have changed the value on that address here in this 11th line of code here so that's why our n holds value of 10 now one very important thing to keep in mind is that your pointer has to be of the same type like the variable that it is pointing to so let's close this so as i said this integer pointer is pointing to an integer variable so our n is of int type and the same way would be if we created a float pointer it would have to point to a float variable and then char pointer can point only to a char variable double bool uh and so on so pointer and the variable that that pointer is pointing to have to be of the same type okay so that means that if i try to change the type of this n variable to float for example like this so if i say float immediately we get an error here and the error says a value of type float pointer cannot be used to initialize an entity of type endpointer meaning you cannot assign address of a float type to pointer of int type okay so that is the error that we have here and i'm going to return this to int okay and as you can see that error has disappeared because now our pointer is pointing to the same type so to the variable of the same type that that pointer has so int pointer pointing to an int variable one thing that beginners very often try to do is the following so they say okay let's create a pointer so int let's give it a name ptr2 so pointer like this so i have created a pointer right so let's dereference this pointer and assign it a value so i'm going to say please dereference ptr 2 and assign it a value of 7 for example now this code here has a probe problem and if i run it if i say build solution actually as you can see it says uninitialized local variable ptr2 used this means that this ptr2 so this pointer to does not have an address so where should it store this value of 7 if it does not have an address and the easiest way right now to solve this problem is going to be to create a variable and to give the address of that variable to our ptr to pointer so i'm going to say int v this variable has to be of the same type as our pointer as we already said and then i'm going to say here our ptr2 is going to hold the address of our v variable like this and now we shouldn't have this problem anymore so if i build my code again as you can see one succeeded so the problem has disappeared and let me write out the value of this v variable so i'm going to say v is equal to and then let's write out the value of this v and if i run my program as you can see it says that v has the value of seven because we have assigned it here by dereferencing our pointer that is holding the address of our v so you may say now okay salina i understand this but this seems a little bit too much why would i create a pointer just to assign a value to a variable and the answer to that question is you don't this is not the type of problem for which pointers were created in c plus plus so there are different problems that pointers solve in c plus plus and this here is just a demonstration of what are pointers and how can you create your own pointers now examples of some of these other problems that pointers solve is you can use pointers in order to pass values by a reference to a function and then you can use them to return multiple values from a function which is an interesting one you can use pointers in combination with arrays as well you can use them for dynamic memory allocation and then if you are familiar with oop objectoriented programming you can use a pointer of a base class in order to access a object of derived class and then there is this concept of smart pointers which we are going to cover in the future so i believe as well that i have mentioned some of these things in some of my videos but i plan to make a dedicated series two pointers where we are going to talk only about pointers so stay tuned subscribe to my channel um hit that bell icon as well so that you are notified when i publish my next video and if you like this one give it a thumbs up thank you for watching and i'm going to see you in my next video where we will be talking about pointers bye
