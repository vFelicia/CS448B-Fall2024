With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you about
00:03 - callbacks and delegates you will see
00:06 - this callback delegate pattern very
00:07 - often and I know it's very confusing for
00:10 - beginners it was confusing for me when I
00:12 - first saw it so in this video we are
00:14 - going to learn everything that you need
00:16 - to know about it and I will also teach
00:18 - you about function pointers I know
00:20 - that's a very hard topic for beginners
00:23 - and I have a separate video where I talk
00:25 - about it in depth where I talk about
00:27 - syntax and all so make sure to check
00:28 - that video it will be linked here and
00:31 - also in the description uh because in
00:33 - this video I'm not going to focus as
00:35 - much on the syntax but definitely after
00:36 - watching this video you will understand
00:38 - what our callbacks delegates as well as
00:40 - function pointers and when you should
00:42 - use them right away if you need
00:44 - additional resources to learn
00:46 - programming with great explanations and
00:48 - examples I am going to leave a link down
00:51 - below and also in today's video we are
00:53 - using C plus plus Builder because it has
00:55 - very good visual way that will help you
00:58 - to understand today's topic better so uh
01:01 - if you want to download it I will also
01:02 - put a link in the description uh and I
01:06 - would recommend personally to watch the
01:07 - video once so that you can get a bigger
01:09 - picture and then you can code along with
01:11 - me and watch the video a second time so
01:14 - the first question is what are delegates
01:15 - delegates give you the possibility to
01:18 - pass methods as arguments to other
01:21 - methods in some languages like c-sharp
01:24 - for example you have this idea of
01:25 - delegate but in the background they are
01:28 - implemented with the help of function
01:30 - pointers now in languages like C plus
01:32 - you know that you have the option to
01:34 - work with function pointers directly and
01:36 - that is exactly what we are going to do
01:38 - in order to implement this delegate
01:40 - callback pattern so that once you
01:43 - understand how it works in the
01:44 - background and once you understand the
01:45 - idea and the logic in C plus it is going
01:48 - to be extremely easy to apply to any
01:50 - other programming language regardless if
01:52 - that language has slightly different
01:53 - syntax or different naming for these
01:56 - Concepts and things like that another
01:58 - question is are callbacks the same as
02:01 - delegates and the answer is no they're
02:03 - not the same but they are connected
02:06 - let's say that they are two sides of the
02:08 - same coin and the difference is the
02:10 - perspective that you look from and you
02:12 - will understand this you will have it
02:13 - clear once we implement the example that
02:16 - I want to show you and once you see the
02:17 - code so let me show you the application
02:20 - that we are going to build so here is
02:22 - the application that we are going to
02:23 - build it consists of two forms that
02:26 - communicate with each other so you can
02:28 - send messages back and forth from one
02:31 - form to the other and they are in the
02:34 - parent child relationship so let's send
02:37 - a message from the first one let's say
02:40 - hello my child
02:42 - okay and click Send and as you can see
02:46 - here you will get that message and here
02:48 - you can reply you can say hello my
02:51 - parent
02:52 - s okay and then send message back and
02:55 - you get that message here and then again
02:57 - let's say how are you my child
03:00 - okay send message you get that message
03:04 - on your child component and let's say
03:07 - good
03:08 - how are you my parent okay and then you
03:13 - get that message back so you get the
03:16 - idea of the application that we are
03:17 - going to build so now let's see how we
03:20 - are going to build this application and
03:21 - how we are going to establish the
03:23 - communication between these two forms so
03:26 - you already saw the application that we
03:27 - are going to build and the tool that we
03:30 - will use for that is C plus Builder I
03:32 - will put a link in the description so
03:34 - that you can download it so let's create
03:36 - a new application so a new multi-dice
03:40 - application with C plus plus Builder and
03:42 - then click blank application okay so our
03:46 - application will consist of two forms
03:48 - that look almost identical so the first
03:50 - step is going to be to create those two
03:53 - forms and build user interface so
03:56 - here I have unit 2.cpp we will rename
04:00 - that so that it is called let's say
04:03 - parent that is going to be our parent
04:05 - form so here we have
04:07 - parent.cpp so our CPP file and then
04:11 - parent.fmx that is design file and then
04:14 - parent.h that is header file where we
04:17 - put all of the Declarations of functions
04:20 - so that is our parent form and then
04:22 - let's add another form I will right
04:24 - click on project and click add new
04:27 - Multi-Device form okay and I am going to
04:31 - rename this form as well
04:33 - so rename and let's call it child like
04:36 - this so by default for each one of these
04:39 - that you created you get an empty form
04:41 - as part of your design so if I open my
04:45 - child.fmx here is my form it is empty
04:48 - and what I want to do is I just want to
04:49 - rename it so that it is easier to
04:52 - remember its name and work with this
04:54 - form so I will find its name property
04:58 - and I will call it let's say child form
05:02 - okay and then I will go to my parent Dot
05:06 - fmx and here I will change the name so
05:09 - that it is called parent form okay so
05:14 - what I want to do now is I want to put
05:16 - all of the necessary components and
05:18 - elements to our form and we need three
05:21 - elements we need
05:24 - edit so we need an input field let's
05:27 - make it a little bit bigger and then we
05:30 - need button
05:31 - so t button let's also make it a little
05:35 - bit bigger and then we need a label so T
05:39 - label and I will put it here and also
05:42 - make it a little bit bigger and adjust
05:44 - the size of the form so now let's change
05:46 - the name of these controls so I will
05:49 - click on my edit and I will change its
05:52 - name so that it is called parent input
05:56 - field okay and then I will change the
06:00 - name of this button I will call it send
06:04 - message to child button
06:09 - okay and then let's change the name of
06:12 - the label and let's call it
06:15 - message label okay and then I will do
06:19 - the same for my child form so click on
06:21 - child.fmx and add all of the necessary
06:24 - controls so edit
06:27 - I'll put it here and then
06:30 - button I will put it
06:33 - here and then I also need a label
06:36 - that goes at the bottom and then adjust
06:40 - the size of my form and again I will
06:45 - change the name so this edit will be
06:48 - called
06:49 - let's call it child input field
06:54 - okay and then this button will be called
06:57 - send message to parent button
07:03 - okay and then the name for this label is
07:07 - going to be let's just say message label
07:13 - so we have built user interface for both
07:16 - of the forms that we need for our
07:18 - program the next step is to establish
07:20 - the communication between parent form
07:22 - and child form so that you can pass a
07:24 - message from the parent to the child and
07:27 - there are a few ways to do this since
07:29 - the parent form will be instantiating
07:31 - the child form this means that the
07:34 - parent will have access to the
07:36 - properties of the child form that is one
07:38 - way another way is again because parent
07:41 - will be instantiating a child it can
07:44 - pass parameters to the Constructor of
07:47 - the child and that is a project we will
07:49 - use in this video so what I want to
07:52 - happen is following make sure to
07:54 - position yourself on parent.fmx so once
07:58 - the user types his message in this input
08:00 - field and then clicks on this button
08:02 - what I want to do is I want to pass that
08:05 - message to my child form okay so let's
08:08 - double click on this button in order to
08:11 - create an event and inside this event we
08:14 - will describe behavior that I just
08:16 - explained so inside this function here
08:19 - we will create a new instance of child
08:22 - form and inside its Constructor we will
08:25 - pass a message that our user has typed
08:28 - so
08:30 - let's very quickly check what is the
08:32 - name of this type so this is the name of
08:35 - the type and the name of the Constructor
08:36 - and the Constructor receives one
08:39 - parameter for now we are just going to
08:42 - treat this as not important and then
08:44 - later I'm going to explain what is this
08:46 - used for so let's copy the name of this
08:49 - type and go back to our parent.cpp and
08:52 - here I want to create a new child form
08:54 - so I will say t child form
08:57 - and the name will be child form so I'll
09:01 - say please create a new T child form and
09:05 - as you saw the Constructor receives one
09:07 - parameter for now I will just say that I
09:10 - will pass now PTR again later at the end
09:14 - of this video I will explain what that
09:16 - parameter represents so for now just
09:19 - pass null PTR okay and another thing is
09:23 - since we are using new keyword here that
09:26 - means that we are working with pointers
09:27 - so you have to indicate that here by
09:29 - putting this star symbol so this says
09:33 - that you are working with pointers okay
09:35 - so with this we have created a new
09:37 - instance of our child form and what I
09:40 - want to do is I want to pass additional
09:42 - message to that child for it so that
09:45 - message is going to be the text from
09:49 - this input field and the name of this
09:51 - input field is
09:53 - parent input field you can check it
09:55 - inside this object inspector so I'll go
09:58 - back to my parents.cpp and here I will
10:00 - pass parent input field it's text and
10:05 - make sure to make this capital letter T
10:07 - like this okay so here we have passed
10:10 - the text what I need to do now is I need
10:13 - to receive that text in the Constructor
10:16 - of my
10:18 - child.cpp so here I'm going to change
10:20 - the Constructor to receive a parameter
10:23 - and that parameter is of type and C
10:26 - string so I'll say
10:28 - a-n-s-i string and I will call it
10:31 - message
10:32 - okay
10:34 - so what I want to happen is once I
10:37 - receive this message I just want to show
10:40 - that message inside this message label
10:43 - so I will do that here in my child.cpp I
10:48 - will say message label
10:51 - it's text
10:53 - will be equal to this message
10:57 - okay and then again please make sure
11:00 - that you use capital letter T here or
11:02 - else you will get an error okay now
11:05 - let's go back to my parent.cpp so once I
11:09 - have created a new instance of my child
11:12 - Forum what I want to do with that form
11:14 - is I just want to show it so I will say
11:18 - child form show
11:21 - like this so that is how you pass a
11:24 - message from the parent to the child now
11:27 - one important thing before we run this
11:29 - program because right now it's not going
11:31 - to work and it doesn't have anything to
11:33 - do with delegates or callbacks it's just
11:35 - the way that C plus plus handles things
11:37 - that is the following if you watch my
11:40 - video about header files you know that
11:42 - inside the header file we put all the
11:44 - Declarations of of functions and right
11:47 - now we have changed the Declaration of
11:50 - this child Constructor okay we have
11:54 - added an additional parameter so what we
11:56 - need to do is we need to change that
11:59 - inside
12:00 - child.h so inside child header file as
12:03 - well because here here we have previous
12:05 - Constructor
12:07 - so I'm just going to change that here
12:09 - like this make sure that you don't
12:11 - forget this semicolon sign if you
12:13 - accidentally delete it okay so if I run
12:16 - my program now let's see if everything
12:19 - is going to work as we expect
12:21 - okay we have an error and that error
12:24 - says unknown type name t child form so
12:28 - the reason why we are getting this error
12:30 - is following go back to your parent.cpp
12:33 - and here you will notice that we are
12:35 - using T child form now this t-child form
12:38 - type has been declared inside child.h
12:41 - header file so the same way that you are
12:44 - including here
12:45 - parent.h you also need to include
12:50 - child.h
12:51 - okay and with this we should fix these
12:54 - two errors that we have okay so if I run
12:58 - the program
12:59 - as you can see we get our parent form so
13:03 - let's pass a message to our child let's
13:04 - say hello my child like this and then
13:09 - send this message and as you can see we
13:12 - get our child form and here is the
13:14 - message hello my child so what I want to
13:17 - do next is I want to be able to return a
13:20 - message back to my parents so I want to
13:22 - be able to see something like
13:23 - hello my parent
13:26 - okay and then I want to be able to send
13:29 - this message and then show it here so
13:32 - let's see how we are going to implement
13:34 - that let's close our program
13:36 - take a look at this line of code here
13:38 - where we have created a child form and
13:40 - to its Constructor we have passed a text
13:44 - parameter so the same way that you can
13:47 - pass a text parameter you can also pass
13:49 - a function pointer and that is exactly
13:52 - the approach that we are going to use we
13:54 - are going to create a function on our
13:57 - parent.cpp and the job of that function
14:00 - will be to show messages on our parent
14:02 - form and then we are going to pass a
14:05 - pointer to that function to our child
14:08 - form so that when the user types a
14:10 - message on the child form and presses
14:12 - the button we are going to invoke that
14:15 - function pointer which means to invoke
14:17 - that function that will show the message
14:19 - on our parent form so let's see how this
14:23 - works in practice how we are going to
14:25 - type this in code so the first step is
14:28 - to create a function that shows messages
14:30 - on our parent form
14:33 - so I will do that here and that function
14:36 - is going to be of return type void and
14:39 - then I will say that it belongs to T
14:42 - parent form like this this is just a
14:45 - namespace and I will call this function
14:46 - show message on parent
14:52 - okay and this function should receive a
14:55 - message as a parameter so it will
14:57 - receive a parameter of type NC string so
15:00 - a n s i string and I will call it
15:04 - message
15:05 - okay and again the job of this function
15:10 - will be very easy so it will just show
15:13 - the message inside this label so the
15:15 - name of the label is message label and I
15:19 - will just say message label it's text
15:23 - property will be equal to this message
15:26 - here
15:28 - okay so that is our function now step
15:31 - number two is to create a function
15:33 - pointer that will point to this function
15:36 - here so that we can pass it to our child
15:38 - form so we are going to create a
15:41 - function pointer here inside our button
15:43 - click method and the syntax that you use
15:46 - to create function pointers is kind of
15:48 - complex for most people so we will go
15:51 - through it step by step so I want to
15:53 - create a function pointer to this
15:55 - function here so that means that I want
15:57 - to create a function pointer that points
15:59 - to any function that returns void type
16:02 - and it receives one parameter of type NC
16:06 - string so let's create that pointer the
16:10 - syntax goes like this so first you
16:12 - specify the return type and the return
16:14 - type is void the same as the return type
16:17 - of the function okay and then you give
16:20 - it a name inside parentheses you will
16:23 - specify that you are talking about
16:24 - pointers like this and then you will
16:26 - give it a name so let's call call it
16:29 - funk PTR like this and then inside
16:33 - additional parentheses you will specify
16:35 - perimeter list and here we have only one
16:38 - parameter of type NC string okay so with
16:42 - this we have created a function pointer
16:45 - that points to any function that returns
16:48 - void and receives one NC string
16:51 - parameter and the name of that function
16:53 - pointer is func PTR so what I can do now
16:56 - is I can say that this func PTR points
17:00 - to this function here like this and one
17:05 - important thing is that whenever we are
17:06 - whenever you are working with method
17:08 - pointers you need to add
17:11 - here underscore underscore closure like
17:15 - this now I can make an additional video
17:16 - where I would explain what each one of
17:19 - these keywords means but without going
17:21 - into too much detail just remember that
17:23 - when you're working with method pointers
17:25 - you need this closure keyword in order
17:29 - to not get errors because if you forget
17:31 - it you are going to get an error so
17:35 - we have created a function pointer and
17:37 - we have assigned it a value so now it is
17:40 - pointing to our show message on parent
17:42 - function so what I can do now is I can
17:45 - pass this function pointer to my child
17:48 - okay so the next step is to go into
17:53 - child.cpp and then receive this
17:56 - additional parameter inside our
17:58 - Constructor so I'll just copy this
18:01 - entire type of the function pointer it's
18:04 - declaration and I will go into my
18:06 - child.cpp and here inside the
18:09 - Constructor I will paste it like this
18:13 - okay so what I want to do now is I want
18:17 - to store this function pointer that I
18:19 - have received in my child form and for
18:22 - that I will need to create a function
18:25 - pointer here on a global level so I'll
18:28 - just paste the same declaration and I
18:31 - will change the name here I will call it
18:33 - show message on parent callback
18:40 - okay
18:41 - and don't forget semicolon at the end so
18:45 - here I have declared a function pointer
18:48 - and I just want to assign it the value
18:51 - that I have received in my Constructor
18:55 - like this
18:57 - okay so now what I can do on my child
19:00 - form is I can invoke this function
19:03 - pointer which means invoke this function
19:05 - and pass it a message and that message
19:08 - is going to be shown on my parent form
19:11 - so what are we going to do that well we
19:15 - are going to do that when the user
19:17 - clicks on this button so let's double
19:20 - click on the button in order to create
19:22 - an event okay so here is our event and
19:25 - the one that event is triggered I want
19:27 - to invoke this function I want to
19:31 - translate the text from my input field
19:34 - on this child.fmx let's check the name
19:37 - of the input field
19:39 - so the name is child input field let's
19:42 - go back to child.cpp and here to my
19:45 - function pointer I will just pass the
19:49 - text from that field like this and after
19:52 - I have passed that text let's just say
19:56 - this
19:57 - close
19:59 - okay make sure to use Capital C here
20:03 - okay and this command is just going to
20:05 - close our child form so that is the
20:08 - entire logic of how delegate callback
20:10 - pattern Works let's go through it one
20:13 - more time so on my parent.cpp I created
20:17 - a function that shows messages on parent
20:20 - and then I created a pointer to that
20:23 - function here so I have passed that
20:26 - pointer to my child form and then I have
20:31 - received it here in the Constructor of
20:34 - my child form and I have stored it in a
20:37 - global variable so Global function
20:39 - pointer variable I've done that here so
20:42 - that I can invoke it from different
20:43 - functions and then in this button click
20:46 - event when the user types a message and
20:48 - clicks send I have invoked that function
20:51 - with this command here and then I've
20:54 - just closed the form Okay so
20:58 - that is how delegate callback works but
21:01 - we will need a couple more things that
21:03 - are not related to delegate callback
21:04 - pattern they're just related to the way
21:06 - that c plus works so let's go back to
21:10 - parent.cpp and let's see a couple of
21:12 - things first here we have added a new
21:15 - function it's called show message on
21:17 - parent so as you already know every
21:20 - function declaration should go to header
21:22 - file so I am going to copy this
21:25 - declaration and then go to my parents.h
21:29 - and here I will say hey you have a
21:32 - function that is called show message on
21:35 - parent and that function receives one
21:38 - parameter and then let's add semicolon
21:40 - here okay so that is what I should do
21:43 - inside parent.h and then on my child.cpp
21:48 - since I have again changed the signature
21:51 - of this Constructor so now it receives
21:54 - one additional parameter I also have to
21:56 - update that inside my child.h so inside
21:59 - the header file here I will change
22:04 - parameter list of the Constructor and
22:06 - again please make sure to add semicolon
22:08 - at the end okay so after you do that
22:12 - let's run our program and let's see if
22:14 - everything will work as we expected
22:17 - as you can see here is our parent form
22:19 - so I'll say hello my child
22:23 - and then send the message we get that
22:27 - message on our child Forum so let's now
22:30 - say hello my parent
22:33 - okay and then click Send and as you can
22:37 - see now we have that message on our
22:40 - parent so if I type for example how are
22:43 - you my child
22:45 - okay and then click Send
22:48 - here we have that message how are you my
22:51 - child so let's say good how are you my
22:55 - parent
22:57 - okay and then I click Send and we get
23:00 - that message back to our parent so that
23:03 - is how you implement the logic of
23:05 - delegate callback pattern so again steps
23:09 - are the following step one create a
23:12 - function on your parent form step two
23:14 - pass that function to your child form
23:16 - with the help of function pointers or
23:18 - delegates
23:19 - step 3 store that function pointer on
23:23 - your child form in a global variable in
23:26 - a global function pointer so that you
23:27 - can invoke it anywhere in that class and
23:30 - then step four invoke it when you need
23:32 - it and in our situation that was on our
23:35 - button click when the user types a
23:36 - message and clicks send one thing that I
23:39 - promise to explain at the end of the
23:40 - video is the following please navigate
23:42 - to
23:43 - parent.cpp and take a look at this part
23:46 - here where we are creating our child
23:49 - form we are invoking its Constructor so
23:52 - here we have passed null PTR
23:55 - for a parameter that is called the
23:59 - component owner so if you take a look in
24:02 - your child component you will see the
24:03 - name of that parameter its owner and
24:06 - what this owner represents is that it
24:09 - represents the object that has created
24:12 - our form and in this situation who
24:16 - created our child form well the parent
24:18 - form created our child form so through
24:21 - this object we are going to have direct
24:24 - access to our parent form now this is
24:27 - something that you get with C plus plus
24:29 - Builder and this is one way that you can
24:31 - establish the communication between
24:33 - child and parent but unfortunately when
24:35 - you're working on real projects in real
24:37 - life in most situations you will not
24:39 - have this luxury and you will not have
24:43 - access to this so you will have to build
24:46 - delegate callback pattern from scratch
24:48 - so that is the reason why I showed you
24:50 - how you can build it from scratch and if
24:53 - you want to play with this and if you
24:56 - want to make this work
24:58 - um one tip that I'm going to give you is
25:00 - go back to your parent.cpp and here
25:03 - where you passed no PTR as the owner of
25:06 - your child form instead of passing no
25:08 - PTR you are going to pass this pointer
25:11 - and this pointer means that you are
25:13 - passing this form which is parent form
25:16 - so that is an interesting fact that I
25:19 - promised to explain at the beginning of
25:20 - the video but again do not rely that
25:23 - much on this because in most situations
25:24 - you will have to absolutely understand
25:27 - delegate callback pattern in order to be
25:29 - able to read the code and you will also
25:31 - find yourself in many situations where
25:33 - you yourself have to write it from
25:35 - scratch so that will be all for this
25:37 - video if you have any questions you can
25:39 - leave those in the comment section if
25:41 - you need additional resources to learn
25:43 - programming I am going to put some links
25:45 - down below and then if you enjoyed this
25:48 - video if you found it helpful make sure
25:50 - to give it a big thumbs up for the
25:52 - YouTube algorithm so that it knows to
25:54 - recommend it to other people who want to
25:56 - learn programming as well so thank you
25:58 - very much for watching and I am going to
26:00 - see you in some other video bye

Cleaned transcript:

hi guys and welcome to my channel in this video I'm going to teach you about callbacks and delegates you will see this callback delegate pattern very often and I know it's very confusing for beginners it was confusing for me when I first saw it so in this video we are going to learn everything that you need to know about it and I will also teach you about function pointers I know that's a very hard topic for beginners and I have a separate video where I talk about it in depth where I talk about syntax and all so make sure to check that video it will be linked here and also in the description uh because in this video I'm not going to focus as much on the syntax but definitely after watching this video you will understand what our callbacks delegates as well as function pointers and when you should use them right away if you need additional resources to learn programming with great explanations and examples I am going to leave a link down below and also in today's video we are using C plus plus Builder because it has very good visual way that will help you to understand today's topic better so uh if you want to download it I will also put a link in the description uh and I would recommend personally to watch the video once so that you can get a bigger picture and then you can code along with me and watch the video a second time so the first question is what are delegates delegates give you the possibility to pass methods as arguments to other methods in some languages like csharp for example you have this idea of delegate but in the background they are implemented with the help of function pointers now in languages like C plus you know that you have the option to work with function pointers directly and that is exactly what we are going to do in order to implement this delegate callback pattern so that once you understand how it works in the background and once you understand the idea and the logic in C plus it is going to be extremely easy to apply to any other programming language regardless if that language has slightly different syntax or different naming for these Concepts and things like that another question is are callbacks the same as delegates and the answer is no they're not the same but they are connected let's say that they are two sides of the same coin and the difference is the perspective that you look from and you will understand this you will have it clear once we implement the example that I want to show you and once you see the code so let me show you the application that we are going to build so here is the application that we are going to build it consists of two forms that communicate with each other so you can send messages back and forth from one form to the other and they are in the parent child relationship so let's send a message from the first one let's say hello my child okay and click Send and as you can see here you will get that message and here you can reply you can say hello my parent s okay and then send message back and you get that message here and then again let's say how are you my child okay send message you get that message on your child component and let's say good how are you my parent okay and then you get that message back so you get the idea of the application that we are going to build so now let's see how we are going to build this application and how we are going to establish the communication between these two forms so you already saw the application that we are going to build and the tool that we will use for that is C plus Builder I will put a link in the description so that you can download it so let's create a new application so a new multidice application with C plus plus Builder and then click blank application okay so our application will consist of two forms that look almost identical so the first step is going to be to create those two forms and build user interface so here I have unit 2.cpp we will rename that so that it is called let's say parent that is going to be our parent form so here we have parent.cpp so our CPP file and then parent.fmx that is design file and then parent.h that is header file where we put all of the Declarations of functions so that is our parent form and then let's add another form I will right click on project and click add new MultiDevice form okay and I am going to rename this form as well so rename and let's call it child like this so by default for each one of these that you created you get an empty form as part of your design so if I open my child.fmx here is my form it is empty and what I want to do is I just want to rename it so that it is easier to remember its name and work with this form so I will find its name property and I will call it let's say child form okay and then I will go to my parent Dot fmx and here I will change the name so that it is called parent form okay so what I want to do now is I want to put all of the necessary components and elements to our form and we need three elements we need edit so we need an input field let's make it a little bit bigger and then we need button so t button let's also make it a little bit bigger and then we need a label so T label and I will put it here and also make it a little bit bigger and adjust the size of the form so now let's change the name of these controls so I will click on my edit and I will change its name so that it is called parent input field okay and then I will change the name of this button I will call it send message to child button okay and then let's change the name of the label and let's call it message label okay and then I will do the same for my child form so click on child.fmx and add all of the necessary controls so edit I'll put it here and then button I will put it here and then I also need a label that goes at the bottom and then adjust the size of my form and again I will change the name so this edit will be called let's call it child input field okay and then this button will be called send message to parent button okay and then the name for this label is going to be let's just say message label so we have built user interface for both of the forms that we need for our program the next step is to establish the communication between parent form and child form so that you can pass a message from the parent to the child and there are a few ways to do this since the parent form will be instantiating the child form this means that the parent will have access to the properties of the child form that is one way another way is again because parent will be instantiating a child it can pass parameters to the Constructor of the child and that is a project we will use in this video so what I want to happen is following make sure to position yourself on parent.fmx so once the user types his message in this input field and then clicks on this button what I want to do is I want to pass that message to my child form okay so let's double click on this button in order to create an event and inside this event we will describe behavior that I just explained so inside this function here we will create a new instance of child form and inside its Constructor we will pass a message that our user has typed so let's very quickly check what is the name of this type so this is the name of the type and the name of the Constructor and the Constructor receives one parameter for now we are just going to treat this as not important and then later I'm going to explain what is this used for so let's copy the name of this type and go back to our parent.cpp and here I want to create a new child form so I will say t child form and the name will be child form so I'll say please create a new T child form and as you saw the Constructor receives one parameter for now I will just say that I will pass now PTR again later at the end of this video I will explain what that parameter represents so for now just pass null PTR okay and another thing is since we are using new keyword here that means that we are working with pointers so you have to indicate that here by putting this star symbol so this says that you are working with pointers okay so with this we have created a new instance of our child form and what I want to do is I want to pass additional message to that child for it so that message is going to be the text from this input field and the name of this input field is parent input field you can check it inside this object inspector so I'll go back to my parents.cpp and here I will pass parent input field it's text and make sure to make this capital letter T like this okay so here we have passed the text what I need to do now is I need to receive that text in the Constructor of my child.cpp so here I'm going to change the Constructor to receive a parameter and that parameter is of type and C string so I'll say ansi string and I will call it message okay so what I want to happen is once I receive this message I just want to show that message inside this message label so I will do that here in my child.cpp I will say message label it's text will be equal to this message okay and then again please make sure that you use capital letter T here or else you will get an error okay now let's go back to my parent.cpp so once I have created a new instance of my child Forum what I want to do with that form is I just want to show it so I will say child form show like this so that is how you pass a message from the parent to the child now one important thing before we run this program because right now it's not going to work and it doesn't have anything to do with delegates or callbacks it's just the way that C plus plus handles things that is the following if you watch my video about header files you know that inside the header file we put all the Declarations of of functions and right now we have changed the Declaration of this child Constructor okay we have added an additional parameter so what we need to do is we need to change that inside child.h so inside child header file as well because here here we have previous Constructor so I'm just going to change that here like this make sure that you don't forget this semicolon sign if you accidentally delete it okay so if I run my program now let's see if everything is going to work as we expect okay we have an error and that error says unknown type name t child form so the reason why we are getting this error is following go back to your parent.cpp and here you will notice that we are using T child form now this tchild form type has been declared inside child.h header file so the same way that you are including here parent.h you also need to include child.h okay and with this we should fix these two errors that we have okay so if I run the program as you can see we get our parent form so let's pass a message to our child let's say hello my child like this and then send this message and as you can see we get our child form and here is the message hello my child so what I want to do next is I want to be able to return a message back to my parents so I want to be able to see something like hello my parent okay and then I want to be able to send this message and then show it here so let's see how we are going to implement that let's close our program take a look at this line of code here where we have created a child form and to its Constructor we have passed a text parameter so the same way that you can pass a text parameter you can also pass a function pointer and that is exactly the approach that we are going to use we are going to create a function on our parent.cpp and the job of that function will be to show messages on our parent form and then we are going to pass a pointer to that function to our child form so that when the user types a message on the child form and presses the button we are going to invoke that function pointer which means to invoke that function that will show the message on our parent form so let's see how this works in practice how we are going to type this in code so the first step is to create a function that shows messages on our parent form so I will do that here and that function is going to be of return type void and then I will say that it belongs to T parent form like this this is just a namespace and I will call this function show message on parent okay and this function should receive a message as a parameter so it will receive a parameter of type NC string so a n s i string and I will call it message okay and again the job of this function will be very easy so it will just show the message inside this label so the name of the label is message label and I will just say message label it's text property will be equal to this message here okay so that is our function now step number two is to create a function pointer that will point to this function here so that we can pass it to our child form so we are going to create a function pointer here inside our button click method and the syntax that you use to create function pointers is kind of complex for most people so we will go through it step by step so I want to create a function pointer to this function here so that means that I want to create a function pointer that points to any function that returns void type and it receives one parameter of type NC string so let's create that pointer the syntax goes like this so first you specify the return type and the return type is void the same as the return type of the function okay and then you give it a name inside parentheses you will specify that you are talking about pointers like this and then you will give it a name so let's call call it funk PTR like this and then inside additional parentheses you will specify perimeter list and here we have only one parameter of type NC string okay so with this we have created a function pointer that points to any function that returns void and receives one NC string parameter and the name of that function pointer is func PTR so what I can do now is I can say that this func PTR points to this function here like this and one important thing is that whenever we are whenever you are working with method pointers you need to add here underscore underscore closure like this now I can make an additional video where I would explain what each one of these keywords means but without going into too much detail just remember that when you're working with method pointers you need this closure keyword in order to not get errors because if you forget it you are going to get an error so we have created a function pointer and we have assigned it a value so now it is pointing to our show message on parent function so what I can do now is I can pass this function pointer to my child okay so the next step is to go into child.cpp and then receive this additional parameter inside our Constructor so I'll just copy this entire type of the function pointer it's declaration and I will go into my child.cpp and here inside the Constructor I will paste it like this okay so what I want to do now is I want to store this function pointer that I have received in my child form and for that I will need to create a function pointer here on a global level so I'll just paste the same declaration and I will change the name here I will call it show message on parent callback okay and don't forget semicolon at the end so here I have declared a function pointer and I just want to assign it the value that I have received in my Constructor like this okay so now what I can do on my child form is I can invoke this function pointer which means invoke this function and pass it a message and that message is going to be shown on my parent form so what are we going to do that well we are going to do that when the user clicks on this button so let's double click on the button in order to create an event okay so here is our event and the one that event is triggered I want to invoke this function I want to translate the text from my input field on this child.fmx let's check the name of the input field so the name is child input field let's go back to child.cpp and here to my function pointer I will just pass the text from that field like this and after I have passed that text let's just say this close okay make sure to use Capital C here okay and this command is just going to close our child form so that is the entire logic of how delegate callback pattern Works let's go through it one more time so on my parent.cpp I created a function that shows messages on parent and then I created a pointer to that function here so I have passed that pointer to my child form and then I have received it here in the Constructor of my child form and I have stored it in a global variable so Global function pointer variable I've done that here so that I can invoke it from different functions and then in this button click event when the user types a message and clicks send I have invoked that function with this command here and then I've just closed the form Okay so that is how delegate callback works but we will need a couple more things that are not related to delegate callback pattern they're just related to the way that c plus works so let's go back to parent.cpp and let's see a couple of things first here we have added a new function it's called show message on parent so as you already know every function declaration should go to header file so I am going to copy this declaration and then go to my parents.h and here I will say hey you have a function that is called show message on parent and that function receives one parameter and then let's add semicolon here okay so that is what I should do inside parent.h and then on my child.cpp since I have again changed the signature of this Constructor so now it receives one additional parameter I also have to update that inside my child.h so inside the header file here I will change parameter list of the Constructor and again please make sure to add semicolon at the end okay so after you do that let's run our program and let's see if everything will work as we expected as you can see here is our parent form so I'll say hello my child and then send the message we get that message on our child Forum so let's now say hello my parent okay and then click Send and as you can see now we have that message on our parent so if I type for example how are you my child okay and then click Send here we have that message how are you my child so let's say good how are you my parent okay and then I click Send and we get that message back to our parent so that is how you implement the logic of delegate callback pattern so again steps are the following step one create a function on your parent form step two pass that function to your child form with the help of function pointers or delegates step 3 store that function pointer on your child form in a global variable in a global function pointer so that you can invoke it anywhere in that class and then step four invoke it when you need it and in our situation that was on our button click when the user types a message and clicks send one thing that I promise to explain at the end of the video is the following please navigate to parent.cpp and take a look at this part here where we are creating our child form we are invoking its Constructor so here we have passed null PTR for a parameter that is called the component owner so if you take a look in your child component you will see the name of that parameter its owner and what this owner represents is that it represents the object that has created our form and in this situation who created our child form well the parent form created our child form so through this object we are going to have direct access to our parent form now this is something that you get with C plus plus Builder and this is one way that you can establish the communication between child and parent but unfortunately when you're working on real projects in real life in most situations you will not have this luxury and you will not have access to this so you will have to build delegate callback pattern from scratch so that is the reason why I showed you how you can build it from scratch and if you want to play with this and if you want to make this work um one tip that I'm going to give you is go back to your parent.cpp and here where you passed no PTR as the owner of your child form instead of passing no PTR you are going to pass this pointer and this pointer means that you are passing this form which is parent form so that is an interesting fact that I promised to explain at the beginning of the video but again do not rely that much on this because in most situations you will have to absolutely understand delegate callback pattern in order to be able to read the code and you will also find yourself in many situations where you yourself have to write it from scratch so that will be all for this video if you have any questions you can leave those in the comment section if you need additional resources to learn programming I am going to put some links down below and then if you enjoyed this video if you found it helpful make sure to give it a big thumbs up for the YouTube algorithm so that it knows to recommend it to other people who want to learn programming as well so thank you very much for watching and I am going to see you in some other video bye
