With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i will teach you how to build
00:04 - this tic-tac-toe game using c plus and i
00:07 - will explain everything step by step so
00:09 - it will be very easy to understand so
00:11 - here is the game that we will build and
00:14 - the rules are following we have nine
00:16 - buttons and two players so each player
00:20 - puts his symbol his sign where he wants
00:22 - so let's say first player puts his
00:24 - symbol here and then the second one and
00:27 - the first again and second and so they
00:29 - play until one of them has three symbols
00:33 - in a row either horizontally or
00:36 - vertically or diagonally and that user
00:39 - is the winner so we are going to build
00:41 - this game using c plus builder and rad
00:43 - studio because it is the best ide for
00:46 - building user interface applications
00:47 - with c plus plus and i'm going to leave
00:50 - a link that you can use to download it
00:51 - in the description and if you are not
00:53 - familiar with building user interface
00:55 - applications in c plus i will link a
00:58 - playlist here and i will also put it in
00:59 - the description so you can check it out
01:01 - it has a lot more videos about building
01:04 - user interface applications with c plus
01:06 - so in order to build our game i created
01:08 - a new multi-device application with c
01:10 - plus builder and it is a blank
01:13 - application as you can see and i'm going
01:15 - to divide this process into two steps
01:18 - the first step is going to be building
01:20 - user interface and then the second step
01:22 - is building the logic of our game so
01:26 - let's focus on the first step let's
01:28 - build user interface i will use this
01:30 - palette here in order to drag and drop
01:33 - all of the elements that we will need
01:34 - for our user interface so the first
01:36 - thing that we need is nine buttons so i
01:40 - will find them here
01:42 - okay and i will just drag and drop
01:45 - like this
01:46 - and i need to copy this button nine
01:49 - times so
01:56 - so after adding nine buttons there are a
01:58 - couple more things that we will need i
02:00 - will also need
02:01 - a label
02:04 - okay and i will put it here and now i
02:07 - want to change the text of this label so
02:10 - i will click on it and find its text
02:12 - property here inside this object
02:14 - inspector and i will change its text so
02:17 - that it says
02:18 - it is your turn
02:21 - player
02:23 - and that will be all for this label and
02:26 - i will add another label
02:29 - and put it
02:30 - here
02:32 - right next to the first one and i will
02:34 - change the name of this label so i will
02:37 - find its name property it is here and i
02:40 - will call it current player symbol
02:46 - like this so that this message says it
02:49 - is your turn player x or it is your turn
02:52 - player o and this part here we will
02:55 - change in code and then there is another
02:58 - thing that we need and that is one more
03:00 - label
03:02 - okay
03:02 - i will put it
03:04 - here
03:05 - and i will also change the name of this
03:07 - label and its name is going to be winner
03:10 - label
03:13 - like this oh
03:14 - i made a mistake
03:18 - so here we will write the message when
03:20 - one of our players wins now there is one
03:22 - very important thing that i want you to
03:24 - keep in mind and that is that you really
03:26 - need to give logical names to these
03:29 - buttons so if you added them in the same
03:32 - order that i did so this one was first
03:34 - and then second third fourth fifth and
03:36 - so on your id already gave them the
03:40 - names according to that order so this is
03:42 - button one as you can see here or here
03:46 - find name property okay as you can see
03:48 - here and then this is button two you can
03:51 - see that here you can also see it
03:53 - inside your object inspector so this
03:56 - name property and then this is button
03:58 - three four five six and so on and the
04:00 - reason why you need to give them logical
04:02 - names is because we will later have to
04:04 - access these buttons from our code so
04:07 - please don't give them some random names
04:09 - that you will not be able to remember
04:11 - and another important thing is that in
04:13 - the game these buttons are empty they
04:15 - don't have any text on them but
04:17 - something that i want to do is i want to
04:19 - change the text so that this first says
04:22 - one and then two three four five and so
04:26 - on and there are two reasons for that
04:28 - the first one is that it is going to
04:29 - make it easier for us to build the app
04:32 - so in that process of building and then
04:34 - the second reason is because i want to
04:36 - show you at the end of the video a very
04:38 - important bug or situation that can
04:41 - happen and that is quite unexpected and
04:44 - maybe hard for many beginners to
04:46 - understand what is happening so
04:49 - for now i'm just going to change the
04:51 - text of these buttons so the first
04:52 - buttons text is going to be
04:54 - 1 and then the second will be two
04:58 - and then
04:59 - three
05:00 - and four
05:02 - and so on i will change these and then
05:04 - i'll be back so with this we have build
05:06 - user interface of our game and the
05:08 - second step is to build the logic so
05:11 - what should happen when one of our
05:13 - players clicks on one of these nine
05:15 - buttons well there are three things that
05:18 - should happen the first thing is that
05:21 - when he clicks on a specific button we
05:23 - put a symbol on that button so either x
05:26 - or o it is going to be the symbol of
05:28 - that player now the second thing that
05:31 - should happen is we should check if that
05:33 - player has won by playing that move and
05:36 - if he has so if he has three of his
05:39 - symbols in a row either horizontally or
05:41 - vertically or diagonally that means that
05:44 - he has one and that is game over for the
05:46 - other player but if he has not then we
05:49 - do the third step and the third step is
05:52 - that we need to update this message so
05:54 - now we need to say it is your turn to
05:57 - the other player and here we put his
06:00 - symbol and then when he clicks on one of
06:02 - these buttons we put the other symbol so
06:05 - let's say that the first player is
06:07 - playing with x and then the second will
06:09 - play with o so let's build that step by
06:13 - step so let's define what will happen
06:15 - when our player clicks on this first
06:18 - button so what i want to do is i want to
06:20 - create event handler for click event and
06:24 - in order to do that i just double click
06:26 - on the button and as you can see it
06:28 - created the function called button one
06:30 - click which is called event handler
06:32 - because it handles the event of clicking
06:35 - on our button 1 as the name itself says
06:39 - so what is going to happen when our user
06:41 - clicks on this button well let's
06:44 - implement the first step so when he
06:46 - clicks on this button one what we want
06:48 - to do is we want to say
06:51 - button
06:52 - one
06:54 - its text property
06:56 - is equal to
06:58 - current
06:59 - player
07:00 - symbol
07:02 - like this now we still don't have this
07:05 - variable so i'm going to create it
07:07 - and i will put it
07:09 - here
07:10 - so it is going to be of type
07:13 - char so just one character and i will
07:16 - say that initially it is equal to x so
07:19 - our first user plays with x
07:22 - okay so what is going to happen if i run
07:25 - the program let's see
07:26 - okay and
07:28 - the only button that we have handled so
07:30 - far is this first button so if i click
07:32 - on it as you can see we get this x
07:35 - symbol whereas if i click on any of
07:38 - these other buttons nothing will happen
07:40 - because we still have not handled click
07:42 - event for them so i'm going to close the
07:45 - program and that is going to be my next
07:47 - step so now i want to handle click event
07:50 - for this button number two so i will
07:52 - double click on it and as you can see it
07:55 - also created button to click event
07:58 - handler so it is the same function
08:01 - except that this one is called button
08:03 - two click and then this one is called
08:04 - button one click and it will also have
08:07 - very similar behavior so i'm going to
08:09 - copy this line of code paste it here
08:12 - but instead of changing the text of
08:14 - button 1 i want to change the text of
08:16 - button 2 like this and again if i run
08:19 - the program now button 2 should work as
08:22 - well so if i click on 2 we get x and if
08:24 - i click on one we get x as well and
08:26 - these other buttons still don't work now
08:29 - one way in order to build this game is
08:31 - to create nine button click events for
08:34 - all nine buttons but there is a better
08:36 - solution so what we can do is we can
08:39 - create one generic handler which is
08:42 - going to be called button
08:44 - click like this and i will remove
08:47 - other button clicks in this situation we
08:49 - have only two but one potential solution
08:51 - is to have nine but we are going to
08:54 - refactor that so that we have only one
08:56 - which is called button click so we are
08:58 - going to use this handler for every
09:00 - button
09:01 - and what should happen inside this
09:03 - handler is we should take this sender
09:06 - because this sender represents the
09:07 - button that has been clicked so either
09:09 - button 1 or button 2 button 3 4 9
09:12 - doesn't really matter and we are going
09:14 - to cast this sender which is of type t
09:17 - object into button and then we are going
09:20 - to change the text of whichever button
09:23 - is inside this sender so how can we do
09:26 - that it's actually very easy so i will
09:28 - remove this code here and i will create
09:32 - a variable of type t
09:34 - button pointer which is going to be
09:36 - clicked button so i will call it clicked
09:40 - button so whichever button we clicked
09:42 - and then i will dynamically cast this
09:45 - sender into t button pointer so i will
09:48 - say
09:49 - dynamic
09:51 - cast
09:52 - so please to tr please try to cast
09:55 - dynamically
09:56 - into t button pointer and what are you
09:59 - going to cast well you are going to cast
10:02 - this sender which is one of the nine
10:04 - buttons that we have on our user
10:06 - interface so that is the first thing and
10:09 - then the second thing is that now that
10:11 - we have casted this sender into t button
10:14 - pointer what we can do is now we can say
10:17 - clicked button
10:18 - its text property capital letter t
10:22 - will be equal to
10:24 - current player symbol like this and the
10:28 - last thing that we need to do is now we
10:30 - need to connect this button click
10:33 - handler with these nine buttons so i
10:37 - will go to my button one i will click on
10:40 - events and here as you can see we have
10:42 - on click event which is called button
10:44 - one click which is the previous event
10:46 - that we had so i will change that to
10:48 - button click so now i will do the same
10:51 - for this second button it already has
10:54 - handler called button2 click so i will
10:56 - remove that and paste this generic
10:59 - button click handler and then i will do
11:01 - the same for these remaining
11:04 - six buttons so button
11:07 - four
11:08 - and then five and i will do that for the
11:11 - remaining buttons and then i will be
11:12 - back
11:13 - so after adding this button click
11:15 - handler to all line buttons let's try to
11:18 - test our program let's see what is going
11:20 - to happen if i run this application okay
11:23 - we have two errors and the errors are
11:27 - here it says button to click t form is
11:30 - unresolved external so that means that
11:33 - inside this unit 1.h
11:35 - we have a handler called button2 click
11:38 - which is the one that we created
11:40 - previously and now it is deleted so we
11:42 - need to delete it from here as well so
11:45 - that should fix the problem that we have
11:47 - and if i try to run the program now
11:50 - everything should work as expected and
11:52 - if i click on any one of these nine
11:54 - buttons we should get x symbol
11:58 - okay and we have achieved that by using
12:02 - button click handler that we connected
12:04 - with every single one of these nine
12:07 - buttons now something that i don't like
12:09 - is that here it says it is your turn
12:12 - player and then current player symbol
12:14 - label so this is just the name of the
12:16 - label and here we need to put the symbol
12:20 - of our current player so it should say
12:22 - it is your turn player x or player o so
12:26 - let's do that i will close the program
12:29 - and i will go to my unit 1.cpp and what
12:31 - we need to do is we need to update this
12:35 - current player symbol label when we run
12:37 - our program so i'm going to copy its
12:39 - name
12:40 - let's find it so the name is current
12:43 - player symbol label
12:45 - and i will go here and inside the
12:48 - constructor so when i start the program
12:51 - what i want to happen first is i want to
12:54 - update this current player symbol label
12:57 - and inside its text property i will put
13:01 - this current player symbol like this so
13:05 - let's run the program
13:07 - and as you can see now it says it is
13:09 - your turn player x and if i click on any
13:12 - one of these buttons as you can see this
13:15 - here is not changing so that is going to
13:17 - be our next step in order to achieve
13:19 - that i will say here inside this button
13:22 - click handler after i handle the click
13:25 - of my first player i want to change the
13:28 - symbol and let the second user play so
13:31 - i will say here
13:33 - if
13:34 - this current player symbol
13:37 - is equal to x
13:39 - what i want to do is i want to change it
13:41 - so that it is equal to o
13:44 - like this and then else so if it was
13:47 - equal to o what i want to do is now i
13:49 - want to change it to x
13:52 - like this
13:53 - okay and then something else that i want
13:55 - to do as well is this part here so after
13:58 - i have changed the symbol i want to
14:00 - update the message inside our current
14:04 - player symbol label so the one that says
14:07 - it is your turn player x or player o so
14:10 - let's run the program and let's see what
14:12 - has changed
14:14 - okay so it says it is your turn player x
14:17 - so i press this field and it says x here
14:20 - and then the message has been updated so
14:22 - it says it is your turn player oh so now
14:25 - if i click on this second field here we
14:27 - get oh and so on
14:30 - okay so this logic works as it should
14:33 - and then the third and the final step is
14:35 - to check when one of our two players has
14:38 - one so i'm going to create a function
14:41 - which will be invoked here and i will
14:43 - call it check is
14:45 - winner
14:47 - like this and the reason why i'm
14:49 - invoking this function here so before
14:51 - this part of the code is because
14:53 - immediately after i handle the click of
14:56 - a player i want to check if that click
14:58 - has made him a winner because there is
15:00 - no sense in continuing the game and
15:02 - changing the symbol and updating the
15:04 - message because if this part here
15:07 - results as true then it is game over so
15:11 - let's create this function called check
15:13 - is winner i will add it here
15:16 - so it is going to be of return type
15:18 - bull and i will say t
15:20 - form
15:21 - 1 and then let's copy this
15:24 - name
15:25 - like this
15:26 - and here i will implement
15:29 - all of the necessary checks that will
15:31 - tell me if the user has one now what are
15:35 - those checks well let's go to our unit
15:37 - 1.fmx
15:38 - and let's look at these buttons so
15:42 - there are eight potential situations in
15:45 - which a user can win the first one is
15:47 - that if the text inside this button here
15:50 - button one is the same as the text
15:52 - inside button two and also is the same
15:54 - as the text inside button three that is
15:57 - first scenario the second one is if this
16:00 - four and five and six are equal the
16:02 - third is if seven and eight and nine are
16:05 - equal and then we also have vertical
16:06 - combinations so one four seven two five
16:09 - eight three six nine and then two
16:12 - diagonal combinations so one five nine
16:14 - and three five seven so
16:17 - let's go back to unit one dot cpp and
16:20 - here i will write those conditions so i
16:22 - will say
16:24 - if
16:25 - button one
16:27 - its text property is equal to
16:30 - button two
16:32 - its
16:33 - text property and at the same time
16:36 - let's copy this
16:38 - so at the same time if button one its
16:40 - text property is equal to
16:42 - button three
16:44 - its text property so in case that this
16:47 - here results as true i will say here
16:51 - return
16:53 - true which means that our player has one
16:56 - and now we have seven more conditions so
16:59 - i'm going to copy this
17:02 - seven more times let's do that and then
17:04 - i will be back so here i have written
17:06 - all the winning combinations there is
17:08 - eight of them and these three are three
17:11 - horizontal rows these three are three
17:14 - vertical rows and then these two are two
17:18 - diagonal rows so now you can pause the
17:21 - video and check out the code that i have
17:23 - written okay and after you have done
17:25 - that there is one more thing that we
17:27 - need to add to this function here and
17:29 - that is one final return which will say
17:33 - return
17:34 - false so if none of these here results
17:37 - as true that means that our user is not
17:39 - winner so we are returning false from
17:42 - this function here now i will return
17:45 - back to this button click handler and
17:48 - here instead of invoking my check is
17:50 - winner function like this what i want to
17:52 - do is i want to put it inside if
17:54 - condition so i will say if
17:58 - check is winner returns true that means
18:00 - that current player is winner so what i
18:03 - want to do
18:04 - is i want to do two things first thing
18:06 - is i want to update this winner label
18:10 - so let's go back and let's say
18:13 - winner label and its text
18:17 - property will be
18:18 - something like
18:20 - you
18:21 - one
18:22 - yay like this
18:24 - okay and then another thing that should
18:26 - happen is actually nothing so we should
18:28 - say here return which means that if the
18:31 - user has one there is no reason for the
18:33 - game and application to continue so we
18:36 - are putting return statement here so
18:39 - let's run the program and let's see
18:40 - what's going to happen and we get an
18:43 - error which says definition of check is
18:46 - winner does not match any declaration in
18:48 - t form 1. now the reason why this is
18:51 - happening is because we don't have the
18:54 - declaration of this function inside are
18:57 - unit 1 dot h so here inside this private
19:01 - area i will say hey you are going to
19:04 - have a function of return type bull that
19:07 - is inside this t form 1 which is called
19:10 - check is winner so
19:13 - let's go back to our unit 1.cpp and if i
19:16 - try to run the program again now
19:18 - everything should work as expected which
19:21 - it does so let's now test the behavior
19:24 - of this program so let's click on one
19:27 - and then here and here and
19:30 - let's click x here and as you can see
19:33 - this label here has been updated and it
19:35 - says you won now there is something that
19:38 - i promised at the beginning of this
19:40 - video and that is that we will remove
19:43 - these numbers from our buttons so they
19:45 - should be empty so let's do that now and
19:48 - then we are going to run the program and
19:49 - see how the behavior is going to change
19:52 - just because we removed the text from
19:54 - these buttons so i will click on the
19:56 - first button and i will remove its text
19:59 - property
20:00 - and then i will do the same for the
20:02 - second button
20:03 - and third and i i'll do the same for all
20:06 - nine buttons
20:08 - okay so now our application is going to
20:10 - look better but let's see if it is going
20:11 - to behave the same so if i run this
20:15 - program
20:16 - here as you can see all the buttons are
20:18 - empty so let's click on this first
20:20 - button and as you can see immediately we
20:23 - get this u1 message so
20:26 - why is this happening let's debug this
20:29 - program in order to discover why this
20:31 - error is happening because we obviously
20:34 - have a bug
20:35 - so i'll go to
20:37 - myunit1.cpp and i will put breakpoint
20:40 - here on this line if check is winner so
20:43 - you just click on this bar this vertical
20:46 - bar and then you click on run
20:48 - and here you select run or press f9
20:52 - okay
20:54 - and let's reproduce this bug so if i
20:56 - click on this first button let's see
20:58 - what's going to happen so the execution
21:00 - of our program has been paused here so i
21:03 - will press f7 in order to enter into
21:05 - this function and it takes me inside
21:08 - this function and then if i press f8 and
21:12 - f8 you can see that we have passed this
21:14 - first condition so it has not said
21:16 - return true so let's press f8 again and
21:20 - here is our problem so this second
21:22 - condition returns true and this second
21:25 - condition says that we have a winner in
21:28 - this middle horizontal row which is not
21:31 - true definitely so let's check what is
21:33 - happening here if i hover over this
21:35 - button for text
21:38 - it says that its value is null so it is
21:40 - empty and then button five text is also
21:43 - empty and then button 6 text is also
21:46 - empty so that is the reason why this
21:49 - expression here is being evaluated as
21:52 - true because this is empty and this is
21:54 - empty and this is empty so they are all
21:56 - equal they are all empty and it returns
22:00 - true here so we get our message which
22:03 - says
22:04 - you won as you can see here so how can
22:07 - we fix this bug
22:09 - well it's pretty easy to fix it so let's
22:12 - go to this second row the one that
22:14 - created problems for us and here i will
22:17 - check before i check if they are equal i
22:20 - want to check if they are empty and it
22:23 - is enough for me to check if this button
22:25 - four is empty because then i compare
22:27 - button four with button five and then i
22:29 - also compare it with button six so what
22:31 - i will say is please check if this
22:34 - button
22:36 - for
22:37 - if it's
22:39 - text property is
22:42 - empty
22:45 - like this this is a function i will add
22:47 - end condition here and i also need to
22:50 - put
22:51 - not symbol before it so now this
22:53 - condition here reads as please check if
22:57 - this button 4 is not empty and then if
23:00 - it is equal to button 5 and button 6. so
23:03 - if i run the program in debug again
23:06 - let's see what's going to happen okay so
23:08 - if i press the same button as previously
23:12 - and then i press f7 and then f8 this
23:15 - first row is skipped and then the second
23:18 - row is kept as well so we don't have the
23:20 - bug here anymore but if i press f8 again
23:24 - we have the same problem in this row as
23:27 - well so now it is going to return true
23:29 - from here and we will get the same
23:31 - message as you can see again it says u1
23:34 - which means that we need to create
23:36 - appropriate check like this one for all
23:39 - of these if conditions so i'm going to
23:41 - do that and then i will be back to show
23:43 - you the final result
23:45 - okay so here are all the conditions that
23:48 - i added and hopefully i didn't make a
23:51 - typo because there is a lot of numbers
23:53 - here so let's run the program in order
23:55 - to see what is going to happen now
23:57 - so
23:58 - x o x o
24:00 - x
24:01 - and we now get the message which says
24:04 - you won which means that now our program
24:06 - works as it should now there are a few
24:08 - tips that i want to give you related to
24:10 - how you can improve this program even
24:12 - more and practice on your own because i
24:14 - don't want to make this video too long
24:17 - so there are three tips i believe the
24:19 - first one is that once your user wins
24:22 - you can disable all of these buttons so
24:25 - that they cannot be clicked anymore
24:26 - because now they can that is the first
24:29 - thing the second thing is that we also
24:32 - have a bug in this program and that is
24:34 - that one user can change the input of
24:37 - the other user and that should not
24:39 - happen so make sure to fix that if you
24:42 - want to practice on your own and then
24:44 - third thing is you can make this game
24:47 - even more fun so you can create counter
24:49 - for player x and player o so that you
24:52 - count how many times each player has won
24:55 - and also so that you don't have to stop
24:58 - this program every time that a player
25:00 - wins and then start it again in order to
25:03 - play again so those are some tips on how
25:06 - you can improve this game even more so
25:09 - thank you very much for watching if you
25:11 - enjoyed this video please give it a big
25:12 - thumbs up for the youtube algorithm
25:14 - because that means a lot to me and then
25:17 - also share it with a friend who would
25:18 - like to learn programming or share it
25:20 - with someone with whom you would like to
25:21 - play this game
25:23 - so again thank you very much for
25:24 - watching and i will see you in some
25:26 - other video bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i will teach you how to build this tictactoe game using c plus and i will explain everything step by step so it will be very easy to understand so here is the game that we will build and the rules are following we have nine buttons and two players so each player puts his symbol his sign where he wants so let's say first player puts his symbol here and then the second one and the first again and second and so they play until one of them has three symbols in a row either horizontally or vertically or diagonally and that user is the winner so we are going to build this game using c plus builder and rad studio because it is the best ide for building user interface applications with c plus plus and i'm going to leave a link that you can use to download it in the description and if you are not familiar with building user interface applications in c plus i will link a playlist here and i will also put it in the description so you can check it out it has a lot more videos about building user interface applications with c plus so in order to build our game i created a new multidevice application with c plus builder and it is a blank application as you can see and i'm going to divide this process into two steps the first step is going to be building user interface and then the second step is building the logic of our game so let's focus on the first step let's build user interface i will use this palette here in order to drag and drop all of the elements that we will need for our user interface so the first thing that we need is nine buttons so i will find them here okay and i will just drag and drop like this and i need to copy this button nine times so so after adding nine buttons there are a couple more things that we will need i will also need a label okay and i will put it here and now i want to change the text of this label so i will click on it and find its text property here inside this object inspector and i will change its text so that it says it is your turn player and that will be all for this label and i will add another label and put it here right next to the first one and i will change the name of this label so i will find its name property it is here and i will call it current player symbol like this so that this message says it is your turn player x or it is your turn player o and this part here we will change in code and then there is another thing that we need and that is one more label okay i will put it here and i will also change the name of this label and its name is going to be winner label like this oh i made a mistake so here we will write the message when one of our players wins now there is one very important thing that i want you to keep in mind and that is that you really need to give logical names to these buttons so if you added them in the same order that i did so this one was first and then second third fourth fifth and so on your id already gave them the names according to that order so this is button one as you can see here or here find name property okay as you can see here and then this is button two you can see that here you can also see it inside your object inspector so this name property and then this is button three four five six and so on and the reason why you need to give them logical names is because we will later have to access these buttons from our code so please don't give them some random names that you will not be able to remember and another important thing is that in the game these buttons are empty they don't have any text on them but something that i want to do is i want to change the text so that this first says one and then two three four five and so on and there are two reasons for that the first one is that it is going to make it easier for us to build the app so in that process of building and then the second reason is because i want to show you at the end of the video a very important bug or situation that can happen and that is quite unexpected and maybe hard for many beginners to understand what is happening so for now i'm just going to change the text of these buttons so the first buttons text is going to be 1 and then the second will be two and then three and four and so on i will change these and then i'll be back so with this we have build user interface of our game and the second step is to build the logic so what should happen when one of our players clicks on one of these nine buttons well there are three things that should happen the first thing is that when he clicks on a specific button we put a symbol on that button so either x or o it is going to be the symbol of that player now the second thing that should happen is we should check if that player has won by playing that move and if he has so if he has three of his symbols in a row either horizontally or vertically or diagonally that means that he has one and that is game over for the other player but if he has not then we do the third step and the third step is that we need to update this message so now we need to say it is your turn to the other player and here we put his symbol and then when he clicks on one of these buttons we put the other symbol so let's say that the first player is playing with x and then the second will play with o so let's build that step by step so let's define what will happen when our player clicks on this first button so what i want to do is i want to create event handler for click event and in order to do that i just double click on the button and as you can see it created the function called button one click which is called event handler because it handles the event of clicking on our button 1 as the name itself says so what is going to happen when our user clicks on this button well let's implement the first step so when he clicks on this button one what we want to do is we want to say button one its text property is equal to current player symbol like this now we still don't have this variable so i'm going to create it and i will put it here so it is going to be of type char so just one character and i will say that initially it is equal to x so our first user plays with x okay so what is going to happen if i run the program let's see okay and the only button that we have handled so far is this first button so if i click on it as you can see we get this x symbol whereas if i click on any of these other buttons nothing will happen because we still have not handled click event for them so i'm going to close the program and that is going to be my next step so now i want to handle click event for this button number two so i will double click on it and as you can see it also created button to click event handler so it is the same function except that this one is called button two click and then this one is called button one click and it will also have very similar behavior so i'm going to copy this line of code paste it here but instead of changing the text of button 1 i want to change the text of button 2 like this and again if i run the program now button 2 should work as well so if i click on 2 we get x and if i click on one we get x as well and these other buttons still don't work now one way in order to build this game is to create nine button click events for all nine buttons but there is a better solution so what we can do is we can create one generic handler which is going to be called button click like this and i will remove other button clicks in this situation we have only two but one potential solution is to have nine but we are going to refactor that so that we have only one which is called button click so we are going to use this handler for every button and what should happen inside this handler is we should take this sender because this sender represents the button that has been clicked so either button 1 or button 2 button 3 4 9 doesn't really matter and we are going to cast this sender which is of type t object into button and then we are going to change the text of whichever button is inside this sender so how can we do that it's actually very easy so i will remove this code here and i will create a variable of type t button pointer which is going to be clicked button so i will call it clicked button so whichever button we clicked and then i will dynamically cast this sender into t button pointer so i will say dynamic cast so please to tr please try to cast dynamically into t button pointer and what are you going to cast well you are going to cast this sender which is one of the nine buttons that we have on our user interface so that is the first thing and then the second thing is that now that we have casted this sender into t button pointer what we can do is now we can say clicked button its text property capital letter t will be equal to current player symbol like this and the last thing that we need to do is now we need to connect this button click handler with these nine buttons so i will go to my button one i will click on events and here as you can see we have on click event which is called button one click which is the previous event that we had so i will change that to button click so now i will do the same for this second button it already has handler called button2 click so i will remove that and paste this generic button click handler and then i will do the same for these remaining six buttons so button four and then five and i will do that for the remaining buttons and then i will be back so after adding this button click handler to all line buttons let's try to test our program let's see what is going to happen if i run this application okay we have two errors and the errors are here it says button to click t form is unresolved external so that means that inside this unit 1.h we have a handler called button2 click which is the one that we created previously and now it is deleted so we need to delete it from here as well so that should fix the problem that we have and if i try to run the program now everything should work as expected and if i click on any one of these nine buttons we should get x symbol okay and we have achieved that by using button click handler that we connected with every single one of these nine buttons now something that i don't like is that here it says it is your turn player and then current player symbol label so this is just the name of the label and here we need to put the symbol of our current player so it should say it is your turn player x or player o so let's do that i will close the program and i will go to my unit 1.cpp and what we need to do is we need to update this current player symbol label when we run our program so i'm going to copy its name let's find it so the name is current player symbol label and i will go here and inside the constructor so when i start the program what i want to happen first is i want to update this current player symbol label and inside its text property i will put this current player symbol like this so let's run the program and as you can see now it says it is your turn player x and if i click on any one of these buttons as you can see this here is not changing so that is going to be our next step in order to achieve that i will say here inside this button click handler after i handle the click of my first player i want to change the symbol and let the second user play so i will say here if this current player symbol is equal to x what i want to do is i want to change it so that it is equal to o like this and then else so if it was equal to o what i want to do is now i want to change it to x like this okay and then something else that i want to do as well is this part here so after i have changed the symbol i want to update the message inside our current player symbol label so the one that says it is your turn player x or player o so let's run the program and let's see what has changed okay so it says it is your turn player x so i press this field and it says x here and then the message has been updated so it says it is your turn player oh so now if i click on this second field here we get oh and so on okay so this logic works as it should and then the third and the final step is to check when one of our two players has one so i'm going to create a function which will be invoked here and i will call it check is winner like this and the reason why i'm invoking this function here so before this part of the code is because immediately after i handle the click of a player i want to check if that click has made him a winner because there is no sense in continuing the game and changing the symbol and updating the message because if this part here results as true then it is game over so let's create this function called check is winner i will add it here so it is going to be of return type bull and i will say t form 1 and then let's copy this name like this and here i will implement all of the necessary checks that will tell me if the user has one now what are those checks well let's go to our unit 1.fmx and let's look at these buttons so there are eight potential situations in which a user can win the first one is that if the text inside this button here button one is the same as the text inside button two and also is the same as the text inside button three that is first scenario the second one is if this four and five and six are equal the third is if seven and eight and nine are equal and then we also have vertical combinations so one four seven two five eight three six nine and then two diagonal combinations so one five nine and three five seven so let's go back to unit one dot cpp and here i will write those conditions so i will say if button one its text property is equal to button two its text property and at the same time let's copy this so at the same time if button one its text property is equal to button three its text property so in case that this here results as true i will say here return true which means that our player has one and now we have seven more conditions so i'm going to copy this seven more times let's do that and then i will be back so here i have written all the winning combinations there is eight of them and these three are three horizontal rows these three are three vertical rows and then these two are two diagonal rows so now you can pause the video and check out the code that i have written okay and after you have done that there is one more thing that we need to add to this function here and that is one final return which will say return false so if none of these here results as true that means that our user is not winner so we are returning false from this function here now i will return back to this button click handler and here instead of invoking my check is winner function like this what i want to do is i want to put it inside if condition so i will say if check is winner returns true that means that current player is winner so what i want to do is i want to do two things first thing is i want to update this winner label so let's go back and let's say winner label and its text property will be something like you one yay like this okay and then another thing that should happen is actually nothing so we should say here return which means that if the user has one there is no reason for the game and application to continue so we are putting return statement here so let's run the program and let's see what's going to happen and we get an error which says definition of check is winner does not match any declaration in t form 1. now the reason why this is happening is because we don't have the declaration of this function inside are unit 1 dot h so here inside this private area i will say hey you are going to have a function of return type bull that is inside this t form 1 which is called check is winner so let's go back to our unit 1.cpp and if i try to run the program again now everything should work as expected which it does so let's now test the behavior of this program so let's click on one and then here and here and let's click x here and as you can see this label here has been updated and it says you won now there is something that i promised at the beginning of this video and that is that we will remove these numbers from our buttons so they should be empty so let's do that now and then we are going to run the program and see how the behavior is going to change just because we removed the text from these buttons so i will click on the first button and i will remove its text property and then i will do the same for the second button and third and i i'll do the same for all nine buttons okay so now our application is going to look better but let's see if it is going to behave the same so if i run this program here as you can see all the buttons are empty so let's click on this first button and as you can see immediately we get this u1 message so why is this happening let's debug this program in order to discover why this error is happening because we obviously have a bug so i'll go to myunit1.cpp and i will put breakpoint here on this line if check is winner so you just click on this bar this vertical bar and then you click on run and here you select run or press f9 okay and let's reproduce this bug so if i click on this first button let's see what's going to happen so the execution of our program has been paused here so i will press f7 in order to enter into this function and it takes me inside this function and then if i press f8 and f8 you can see that we have passed this first condition so it has not said return true so let's press f8 again and here is our problem so this second condition returns true and this second condition says that we have a winner in this middle horizontal row which is not true definitely so let's check what is happening here if i hover over this button for text it says that its value is null so it is empty and then button five text is also empty and then button 6 text is also empty so that is the reason why this expression here is being evaluated as true because this is empty and this is empty and this is empty so they are all equal they are all empty and it returns true here so we get our message which says you won as you can see here so how can we fix this bug well it's pretty easy to fix it so let's go to this second row the one that created problems for us and here i will check before i check if they are equal i want to check if they are empty and it is enough for me to check if this button four is empty because then i compare button four with button five and then i also compare it with button six so what i will say is please check if this button for if it's text property is empty like this this is a function i will add end condition here and i also need to put not symbol before it so now this condition here reads as please check if this button 4 is not empty and then if it is equal to button 5 and button 6. so if i run the program in debug again let's see what's going to happen okay so if i press the same button as previously and then i press f7 and then f8 this first row is skipped and then the second row is kept as well so we don't have the bug here anymore but if i press f8 again we have the same problem in this row as well so now it is going to return true from here and we will get the same message as you can see again it says u1 which means that we need to create appropriate check like this one for all of these if conditions so i'm going to do that and then i will be back to show you the final result okay so here are all the conditions that i added and hopefully i didn't make a typo because there is a lot of numbers here so let's run the program in order to see what is going to happen now so x o x o x and we now get the message which says you won which means that now our program works as it should now there are a few tips that i want to give you related to how you can improve this program even more and practice on your own because i don't want to make this video too long so there are three tips i believe the first one is that once your user wins you can disable all of these buttons so that they cannot be clicked anymore because now they can that is the first thing the second thing is that we also have a bug in this program and that is that one user can change the input of the other user and that should not happen so make sure to fix that if you want to practice on your own and then third thing is you can make this game even more fun so you can create counter for player x and player o so that you count how many times each player has won and also so that you don't have to stop this program every time that a player wins and then start it again in order to play again so those are some tips on how you can improve this game even more so thank you very much for watching if you enjoyed this video please give it a big thumbs up for the youtube algorithm because that means a lot to me and then also share it with a friend who would like to learn programming or share it with someone with whom you would like to play this game so again thank you very much for watching and i will see you in some other video bye
