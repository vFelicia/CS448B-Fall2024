With timestamps:

00:00 - hi guys and welcome to my new series
00:02 - where we are going to talk about C++
00:05 - stdl uh or C++ standard template Library
00:09 - this video is going to be a brief
00:11 - overview so introduction video where we
00:13 - are going to see what is STL why we need
00:16 - it and what are some of its most
00:18 - important components and then in the
00:20 - future I'm going to publish more videos
00:22 - where we will cover each individual
00:25 - component in more detail so let's go
00:28 - straight to the point the first first
00:30 - question is what is STL STL is a library
00:34 - and you can imagine it as a big box of
00:37 - tools so a toolbox and this toolbox
00:40 - contains a lot of useful and helpful
00:43 - tools that we can use when we are
00:46 - building programs with C++ programming
00:48 - language as I said STL stands for
00:52 - standard template library and it
00:55 - contains different tools that are very
00:58 - helpful when we are working with
01:01 - different kinds of data so now let's
01:03 - break down what is inside this STL
01:07 - toolbox what is inside this STL Library
01:10 - the first important part of STL are
01:13 - containers and you can understand
01:15 - containers as these boxes where you can
01:18 - store the data that requires some
01:20 - processing and in STL we have many
01:23 - different types of containers some of
01:25 - them are vectors lists maps and so on
01:29 - and all of these containers have
01:32 - different purposes and different
01:34 - capabilities and we are going to cover
01:36 - each one of them in the separate video
01:38 - in more detail now one important thing
01:41 - that I want you to remember is I said
01:44 - that we use containers as a way to store
01:47 - the data that requires some processing
01:51 - so in order to process that data we use
01:54 - algorithms and algorithms are another
01:57 - important part of STL and you can
02:01 - understand an algorithm as a set of
02:03 - instructions so as a recipe that will
02:07 - help you to perform specific data
02:10 - processing for example we have
02:12 - algorithms that can help us to sort the
02:14 - data or to compare the data or to find a
02:18 - specific data in your container so for
02:22 - this for data processing we use
02:25 - algorithms and in STL we have many
02:28 - predefined so already written algorithms
02:32 - that we can use but we can also write
02:35 - our own algorithms and for that we use
02:38 - something called function objects which
02:41 - are also known as functors so functors
02:45 - give us the option to write our own
02:47 - custom algorithms or to customize
02:50 - existing algorithms what do I mean by
02:52 - this well in STL you already have
02:56 - algorithms to sort numbers let's say to
02:58 - sort integer numbers numbers from
03:00 - smallest to the biggest one but let's
03:03 - say that you want to sort students well
03:06 - in that case you would have to write
03:08 - your own functor because sorting
03:10 - students is not as easy as sorting
03:13 - numbers because you need to provide
03:15 - additional information related to how
03:18 - should students be sorted is it by age
03:20 - or by grade by gender name or something
03:24 - else and for that we use function
03:26 - objects which are also known as functors
03:30 - and please don't be afraid if you don't
03:32 - understand these immediately because we
03:34 - will cover each one of these in a
03:36 - separate video and I'm going to show you
03:38 - practical examples of each one of these
03:41 - so containers algorithms function
03:44 - objects and all of the other important
03:46 - STL Concepts every algorithm that is
03:49 - processing the data needs a way to
03:51 - navigate through that data and for that
03:54 - we use iterators so you can think of
03:58 - iterators as pointers that we use in
04:01 - order to navigate through the data
04:04 - inside our containers the same way that
04:07 - for example we use a mouse cursor inside
04:11 - our text document in order to help us to
04:14 - navigate through that text document so
04:16 - when you are reading the text for
04:18 - example your mouse cursor helps you to
04:20 - navigate through that text and the same
04:23 - way iterators help us to navigate
04:26 - through our data inside containers and
04:29 - again please don't be afraid if you
04:31 - don't understand this immediately
04:34 - because in a separate video we are going
04:36 - to see practical application and how we
04:39 - use iterators in C++ programming
04:42 - language the concepts that I've
04:44 - mentioned so far are containers
04:47 - algorithms function objects and
04:49 - iterators so once more containers are
04:53 - used in order to store the data
04:55 - algorithms are used in order to process
04:58 - that data function objects or functors
05:01 - are used in order to write our own
05:03 - custom algorithms and iterators help us
05:07 - to navigate through the data inside our
05:09 - containers and all of them are part of
05:13 - C++ STL so now the question is why do we
05:17 - need STL the main reason is for its
05:21 - efficiency so how and why is STL so
05:25 - efficient well it is so efficient
05:27 - because it is entirely based B on
05:30 - templates as the name itself implies so
05:33 - standard template Library so what are
05:37 - templates templates are part of generic
05:40 - code which allows us to work with many
05:43 - different data types while using the
05:45 - same code what do I mean by this well
05:49 - let's say that you want to create a
05:50 - function in order to print a string so
05:53 - for that your function needs to receive
05:56 - a string parameter okay now let's say
05:59 - that you also want to create another
06:01 - function that will print integer so that
06:05 - function needs to receive an integer
06:07 - parameter so basically both of these
06:10 - functions do the same thing which is
06:12 - they print something but because they
06:14 - are printing different data type you
06:16 - need to create two functions one that
06:19 - receives string and one that receives
06:22 - int so with templates what we can do is
06:25 - we can write just one function and it is
06:27 - going to work with both in and string
06:30 - and also many other data types so with
06:33 - using templates we can reduce our code
06:36 - we can write much less code our code is
06:38 - going to be more optimized easier to
06:41 - maintain easier to understand it is
06:43 - going to be much less bug Pro so we will
06:46 - have a lot less bugs in our code and
06:49 - also our code will be easier to scale in
06:52 - the future uh and that is why we use
06:56 - templates so all of these components
06:58 - that I mentioned are are part of C++ STL
07:01 - Library so containers algorithms
07:04 - functors iterators templates they all
07:07 - belong to C++ STL library and if you
07:11 - want to write the code that is clean
07:14 - easy to understand easy to maintain code
07:16 - that is fast and efficient then you have
07:19 - to understand and learn how to use STL
07:23 - library and in the future I'm going to
07:25 - publish more videos where we are going
07:27 - to cover each one of these Concepts
07:29 - individually and I'm going to show you
07:31 - on practical examples how you can use
07:33 - each one of these so I believe that will
07:36 - be enough Theory and in my next video we
07:39 - will jump into practical usage of these
07:41 - STL Concepts and we will write some code
07:46 - also if you're interested to learn
07:47 - practical programming then I would like
07:49 - to invite you to join my practical
07:51 - programming course where we will
07:54 - together build an entire application a
07:56 - huge big application where you will have
07:59 - the opportunity to learn to see and to
08:03 - apply all of the important programming
08:05 - Concepts both beginner Concepts like
08:08 - object-oriented programming data
08:10 - structures algorithms multi- threading
08:13 - asynchronous programming and so on as
08:16 - well as advanced concepts like design
08:19 - patterns and solid principles so in this
08:23 - application that we are going to build
08:24 - together you will have Hands-On approach
08:27 - and you will have lessons and tasks that
08:30 - you can do in order to obtain problem
08:33 - solving skills the language that we will
08:35 - write in this course is C but here is
08:38 - the key the goal of this course is not
08:41 - simply to teach you C the goal is for
08:44 - you to be able to solve problems
08:47 - independently regardless of the
08:49 - programming language that you want to
08:50 - use or type of application that you want
08:52 - to build so in this course I will teach
08:55 - you problem solving skills I will teach
08:57 - you how to be an engineer and how to
08:59 - solve problems and all of the skills
09:02 - that you get in this course will be
09:04 - absolutely transferable to any other oop
09:07 - language including C++ Java JavaScript
09:10 - Python and all of the other oop
09:13 - languages so as I said this entire
09:15 - course we will be building just one
09:18 - application but we will make it big and
09:21 - complex so that you can really see in
09:24 - practice all of these Advanced
09:27 - programming Concepts that you would
09:28 - never see in small projects and small
09:32 - applications and that is because the
09:35 - goal of this course is to give you
09:36 - career ready skills and once you build a
09:39 - huge big application then building these
09:43 - small applications and small projects is
09:46 - not going to be a problem so if you want
09:48 - to start learning practical programming
09:51 - and if you want to get career ready
09:52 - skills then I will leave a link in the
09:55 - description that you can use in order to
09:57 - join my practical programming course and
09:59 - currently there is a special discount
10:02 - but the number of people who can get
10:03 - this discount is limited so if you want
10:06 - to learn then definitely make sure to
10:08 - secure your place on time also when you
10:11 - join the course you will get access to
10:13 - an exclusive community of developers
10:15 - where you can uh ask questions share
10:17 - experiences and collaborate with other
10:20 - people so if you want to start learning
10:22 - practical programming today then click
10:25 - the link in the description and I will
10:27 - see you in a minute thank you very very
10:29 - much for watching and I will see you in
10:31 - another video bye

Cleaned transcript:

hi guys and welcome to my new series where we are going to talk about C++ stdl uh or C++ standard template Library this video is going to be a brief overview so introduction video where we are going to see what is STL why we need it and what are some of its most important components and then in the future I'm going to publish more videos where we will cover each individual component in more detail so let's go straight to the point the first first question is what is STL STL is a library and you can imagine it as a big box of tools so a toolbox and this toolbox contains a lot of useful and helpful tools that we can use when we are building programs with C++ programming language as I said STL stands for standard template library and it contains different tools that are very helpful when we are working with different kinds of data so now let's break down what is inside this STL toolbox what is inside this STL Library the first important part of STL are containers and you can understand containers as these boxes where you can store the data that requires some processing and in STL we have many different types of containers some of them are vectors lists maps and so on and all of these containers have different purposes and different capabilities and we are going to cover each one of them in the separate video in more detail now one important thing that I want you to remember is I said that we use containers as a way to store the data that requires some processing so in order to process that data we use algorithms and algorithms are another important part of STL and you can understand an algorithm as a set of instructions so as a recipe that will help you to perform specific data processing for example we have algorithms that can help us to sort the data or to compare the data or to find a specific data in your container so for this for data processing we use algorithms and in STL we have many predefined so already written algorithms that we can use but we can also write our own algorithms and for that we use something called function objects which are also known as functors so functors give us the option to write our own custom algorithms or to customize existing algorithms what do I mean by this well in STL you already have algorithms to sort numbers let's say to sort integer numbers numbers from smallest to the biggest one but let's say that you want to sort students well in that case you would have to write your own functor because sorting students is not as easy as sorting numbers because you need to provide additional information related to how should students be sorted is it by age or by grade by gender name or something else and for that we use function objects which are also known as functors and please don't be afraid if you don't understand these immediately because we will cover each one of these in a separate video and I'm going to show you practical examples of each one of these so containers algorithms function objects and all of the other important STL Concepts every algorithm that is processing the data needs a way to navigate through that data and for that we use iterators so you can think of iterators as pointers that we use in order to navigate through the data inside our containers the same way that for example we use a mouse cursor inside our text document in order to help us to navigate through that text document so when you are reading the text for example your mouse cursor helps you to navigate through that text and the same way iterators help us to navigate through our data inside containers and again please don't be afraid if you don't understand this immediately because in a separate video we are going to see practical application and how we use iterators in C++ programming language the concepts that I've mentioned so far are containers algorithms function objects and iterators so once more containers are used in order to store the data algorithms are used in order to process that data function objects or functors are used in order to write our own custom algorithms and iterators help us to navigate through the data inside our containers and all of them are part of C++ STL so now the question is why do we need STL the main reason is for its efficiency so how and why is STL so efficient well it is so efficient because it is entirely based B on templates as the name itself implies so standard template Library so what are templates templates are part of generic code which allows us to work with many different data types while using the same code what do I mean by this well let's say that you want to create a function in order to print a string so for that your function needs to receive a string parameter okay now let's say that you also want to create another function that will print integer so that function needs to receive an integer parameter so basically both of these functions do the same thing which is they print something but because they are printing different data type you need to create two functions one that receives string and one that receives int so with templates what we can do is we can write just one function and it is going to work with both in and string and also many other data types so with using templates we can reduce our code we can write much less code our code is going to be more optimized easier to maintain easier to understand it is going to be much less bug Pro so we will have a lot less bugs in our code and also our code will be easier to scale in the future uh and that is why we use templates so all of these components that I mentioned are are part of C++ STL Library so containers algorithms functors iterators templates they all belong to C++ STL library and if you want to write the code that is clean easy to understand easy to maintain code that is fast and efficient then you have to understand and learn how to use STL library and in the future I'm going to publish more videos where we are going to cover each one of these Concepts individually and I'm going to show you on practical examples how you can use each one of these so I believe that will be enough Theory and in my next video we will jump into practical usage of these STL Concepts and we will write some code also if you're interested to learn practical programming then I would like to invite you to join my practical programming course where we will together build an entire application a huge big application where you will have the opportunity to learn to see and to apply all of the important programming Concepts both beginner Concepts like objectoriented programming data structures algorithms multi threading asynchronous programming and so on as well as advanced concepts like design patterns and solid principles so in this application that we are going to build together you will have HandsOn approach and you will have lessons and tasks that you can do in order to obtain problem solving skills the language that we will write in this course is C but here is the key the goal of this course is not simply to teach you C the goal is for you to be able to solve problems independently regardless of the programming language that you want to use or type of application that you want to build so in this course I will teach you problem solving skills I will teach you how to be an engineer and how to solve problems and all of the skills that you get in this course will be absolutely transferable to any other oop language including C++ Java JavaScript Python and all of the other oop languages so as I said this entire course we will be building just one application but we will make it big and complex so that you can really see in practice all of these Advanced programming Concepts that you would never see in small projects and small applications and that is because the goal of this course is to give you career ready skills and once you build a huge big application then building these small applications and small projects is not going to be a problem so if you want to start learning practical programming and if you want to get career ready skills then I will leave a link in the description that you can use in order to join my practical programming course and currently there is a special discount but the number of people who can get this discount is limited so if you want to learn then definitely make sure to secure your place on time also when you join the course you will get access to an exclusive community of developers where you can uh ask questions share experiences and collaborate with other people so if you want to start learning practical programming today then click the link in the description and I will see you in a minute thank you very very much for watching and I will see you in another video bye
