With timestamps:

00:00 - hi guys and welcome to my channel in
00:03 - this video I want to teach you about
00:04 - copy Constructors which is very
00:07 - important but very confusing topic for
00:09 - most beginners so before watching this
00:12 - video please make sure to watch my video
00:13 - about different types of Constructors
00:15 - where we talked about default and
00:18 - parametrized Constructors I will link
00:20 - that video in the description and also
00:22 - make sure to watch my video about these
00:24 - structures it will also be linked in the
00:27 - description and I will put it here you
00:29 - need to understand those two topics
00:31 - before you are able to understand this
00:33 - video so as I said in this video I will
00:36 - teach you everything that you need to
00:37 - know about copy Constructors which is
00:40 - very confusing for beginners from my
00:42 - experience beginners don't have the
00:44 - problem with understanding the idea
00:46 - behind copy Constructors but they do
00:49 - have the problem to understand when copy
00:51 - Constructors are used all of the
00:53 - situations and also different types of
00:56 - bugs and errors that you can get when
00:59 - you are using copy Constructor so all of
01:02 - that we are going to explain in this
01:04 - video step by step so here I have the
01:07 - code that I have written in my previous
01:09 - video so let's first explain this and
01:12 - then we will see how copy Constructor
01:14 - works with this example by the way I am
01:17 - going to pin this code in a comment so
01:19 - that you can copy paste it and code
01:21 - along with me okay so here I have
01:24 - created a class called book and it has
01:27 - these properties it has title author and
01:30 - then it has a pointer called rates and I
01:34 - intended for this to be dynamic array
01:37 - where users are going to put their
01:39 - ratings for this book and then here I
01:42 - have rates counter which is going to
01:44 - serve as the size for this Dynamic array
01:47 - if you're not familiar with the topic of
01:48 - pointers and dynamic arrays make sure to
01:50 - watch this video it will be also in the
01:53 - description so these are the properties
01:56 - and then here I have created
01:57 - parameterized Constructor for my book it
02:00 - is these two parameters it receives
02:02 - title and author and here I create that
02:06 - book based on these two parameters so I
02:09 - assign title and author and here I just
02:12 - hard coded two race for my book just so
02:16 - that we have some data to work with okay
02:19 - and then here we have a Destructor it is
02:23 - very important to create custom
02:25 - Destructor whenever you are working with
02:27 - pointers and whenever you allocate new
02:30 - memory in your Constructor then you
02:32 - should have a Destructor where you are
02:34 - going to deallocate or release that
02:37 - memory so that other applications can
02:39 - reuse it most beginners don't understand
02:41 - this and because of it they get
02:43 - different memory leaks and errors in
02:46 - their code and because of that it is
02:48 - very important to use a good code
02:50 - analyzer that is going to analyze your
02:52 - code and tell you if you have any hidden
02:54 - errors or weaknesses in your code I
02:57 - personally like to use PBS Studio
02:59 - because it is very smart to find errors
03:02 - in the code and it also suggests ways on
03:05 - how you can fix those errors as a
03:07 - student you can get it for free and I am
03:09 - going to leave a link in the description
03:11 - that you can use to download it it is
03:13 - very easy to integrate with Visual
03:14 - Studio you just go to their page and you
03:17 - download it you can use it for c plus c
03:20 - sharpsy and Java programming language so
03:23 - after you download and install it then
03:26 - you will come to your visual studio and
03:28 - click on extensions PBS studio and here
03:31 - you would click on options registration
03:34 - and you would put in license key that
03:37 - you received in your email and you are
03:39 - done with integration and now you can
03:42 - analyze your code for example let's
03:44 - comment this code in the destructor and
03:46 - let's run a check for this current file
03:50 - to see if we have any errors or
03:52 - weaknesses so here you have this
03:54 - previous Studio window and as you can
03:56 - see it says the raids pointer was not
03:59 - released in the destructor a memory leak
04:01 - is possible so just by running a simple
04:04 - analysis you can find errors in your
04:07 - code before you spend hours on actually
04:10 - debugging your code and finding them and
04:12 - especially it's important to catch those
04:14 - errors before they go into production
04:16 - and lose money for you or your company
04:18 - so let's minimize this and now I'm going
04:22 - to uncomment this code that previous
04:24 - Studio suggested and let's see what else
04:27 - we have in this application so here I
04:29 - have created two books millionaire
04:32 - fastly which is a great book for anyone
04:34 - who wants to start their own business I
04:36 - definitely recommend you to read this
04:38 - one and then C plus plus Lambda story
04:40 - which is a great book for people who
04:42 - want to learn C plus plus you can find
04:44 - this book on Amazon for 10 to 15 dollars
04:47 - but I have a link in the description
04:48 - that you can use to download it for free
04:51 - and learn C plus plus for free so
04:54 - um this is what we have done so far we
04:57 - have used this parametrized Constructor
05:00 - we have passed title and author in order
05:03 - to create these two books now what I
05:06 - would like to be able to do is something
05:08 - like this I would like to be able to say
05:10 - book and then book three
05:13 - and here instead of passing title and
05:17 - author I would like to be able to pass
05:19 - one of these two previously created
05:21 - books like this so that now I can create
05:25 - book tree based on this book one so I
05:28 - simply want to copy anything that is
05:31 - inside this book one and based on that I
05:33 - want to create a book three and this is
05:37 - the exact purpose of copy Constructor
05:39 - you use copy Constructor anytime that
05:42 - you want to create a new object based on
05:44 - an already existing object so basically
05:47 - you want to copy that object one very
05:50 - important thing to keep in mind is that
05:51 - the same way that we have default
05:53 - Constructor and default Destructor that
05:57 - we get from our c plus compiler we also
06:00 - have default copy Constructor but as
06:03 - soon as you start working with pointers
06:06 - you need to provide your own custom copy
06:09 - Constructor or else you are going to
06:11 - have an error so in this situation we we
06:14 - are working with pointers so if I run
06:18 - this program and we don't have a copy
06:20 - Constructor let's see what's going to
06:21 - happen so here my program started and if
06:24 - I press enter
06:26 - as you can see we get an exception we
06:30 - get an error here and the reason for
06:32 - that is as I said we are working with
06:34 - pointers and we don't have custom copy
06:37 - Constructor so in order to prove that
06:39 - let's comment all of the code that is
06:42 - working with pointers so I'll comment
06:45 - this and also Destructor and if I run my
06:50 - program again let's see what's going to
06:52 - happen Okay the program has started I
06:54 - press enter and enter once more to close
06:57 - it and nothing happened there is no
07:00 - error in our code so this is one way to
07:02 - fix the problem that you have but as you
07:05 - already know deleting the code is not
07:07 - the fix for the error so what we should
07:09 - do instead is we should create custom
07:12 - copy Constructor for our application so
07:15 - let's return this part that we commented
07:18 - and this here as well and now we are
07:21 - going to create a copy Constructor
07:24 - now there are a couple of rules when
07:26 - creating copy Constructors
07:28 - first of all a copy Constructor needs to
07:31 - be in the public area of your class so
07:34 - it needs to be here second thing is that
07:37 - it doesn't have any return type not even
07:40 - void third thing is that it will have
07:43 - the same name as the class that it
07:46 - belongs to so it will be called book
07:48 - okay also as a parameter this copy
07:53 - Constructor will receive an object of
07:56 - type book and that is going to be
07:58 - original okay so copy Constructor
08:02 - receives one parameter and that
08:05 - parameter has the same type as the class
08:08 - that it belongs to so now we will use
08:12 - this original that was passed into our
08:15 - copy Constructor in order to create or
08:18 - to construct a new object so let's
08:21 - create this Constructor the way that
08:23 - most beginners would probably do so
08:26 - inside it I will say that title is equal
08:29 - to
08:30 - original dot title and then author is
08:34 - equal to original dot author and then
08:38 - rates is original
08:41 - raids and rates
08:44 - counter is equal to original dot rates
08:50 - counter like this so this is the way
08:54 - that most beginners would create a copy
08:58 - Constructor and if you don't understand
09:00 - this in depth then this code could look
09:03 - logical to you because what we are doing
09:05 - here is we are receiving an object of
09:08 - type book it is our original object and
09:12 - based on that object we are simply
09:14 - copying all of its properties in order
09:15 - to construct a new object but but but
09:18 - but there are two very sneaky errors in
09:21 - this code here especially for beginners
09:24 - so if I try to run this application we
09:27 - will immediately get an error so let's
09:29 - see what does our compiler say it says
09:32 - copy Constructor for class book may not
09:35 - have a parameter of that book blah blah
09:37 - blah nothing really helpful especially
09:40 - for beginners who have never seen this
09:43 - era before and who have never faced this
09:45 - issue so let's close this and let's
09:49 - explain what is actually going on here
09:52 - I want to focus on this part here book
09:55 - original for those of you who have
09:57 - watched my videos before and who have
09:59 - watched the video where I talked about
10:01 - different ways to pass an object to a
10:03 - function you remember that I said that
10:06 - there are two ways you can pass an
10:08 - object by a reference and you can pass
10:10 - it by value if you're not familiar with
10:12 - this please make sure to watch this
10:14 - video it will also be linked in the
10:16 - description so as I said you can pass an
10:20 - object by reference and you can pass it
10:22 - by value if you are passing an object by
10:25 - a reference you have this little
10:26 - Ampersand symbol and symbol and it means
10:30 - that you are passing the original so
10:33 - basically your compiler is going to take
10:36 - the original object and pass it to
10:37 - another function but if you are passing
10:40 - an object by a value then you don't have
10:43 - that Ampersand symbol and what your
10:46 - compiler does is that it makes a copy of
10:49 - that object and then it passes that copy
10:52 - to your function so what are we doing
10:54 - here are we passing by value or by
10:57 - reference here we are passing by value
11:00 - which means that your compiler is going
11:03 - to take this book here it is going to
11:06 - copy it and it will pass it into this
11:09 - copy Constructor but one very important
11:13 - thing to keep in mind is that in order
11:15 - to copy the book your compiler needs to
11:18 - have copy Constructor because that is
11:21 - what is used in order to copy objects
11:23 - but here we are creating the copy
11:26 - Constructor itself which creates a
11:29 - logical error which means that in order
11:33 - to pass this book to our copy
11:35 - Constructor we need to have copy
11:37 - Constructor but in order to create a
11:39 - copy Constructor we need to pass this
11:41 - book as a parameter and that is going to
11:44 - create a logical error where you cannot
11:47 - create a copy Constructor before you can
11:49 - copy this object but you can also not
11:52 - copy the object before you have a copy
11:54 - Constructor so in order to fix this
11:57 - problem what we we need to do is we need
12:00 - to Simply pass this by reference and as
12:03 - you can see immediately our error
12:05 - disappears now one thing that we have
12:07 - potentially done by doing this is we
12:10 - have created a possibility for someone
12:12 - inside this function to change our
12:15 - original so some other developer
12:17 - tomorrow can come and change the values
12:19 - of the original object which should not
12:21 - be done in copy Constructor because its
12:24 - purpose is just to copy that object so
12:27 - in order to prevent that error what I
12:30 - will do here is I will say const so by
12:34 - doing this we have said that inside this
12:38 - function here inside this copy
12:40 - Constructor our original object is a
12:44 - constant which means that this function
12:46 - here cannot change it it cannot change
12:49 - any of the properties that it has
12:52 - so let's start our application again and
12:55 - I will press enter and as you can see we
12:59 - still have the error that we previously
13:01 - had so let's see what else is going on
13:04 - in this code here and the best way to
13:07 - understand it is to literally draw it so
13:10 - now I'm going to do that and I will be
13:13 - back so here is the visual
13:14 - representation of our code here we have
13:17 - the original object it has title author
13:21 - and then it has the address of dynamic
13:24 - array where we keep our rates it is this
13:27 - array here we have two raids and it also
13:30 - has rates counter so now if I use this
13:34 - logic of our copy Constructor in order
13:37 - to create a copy of this original what
13:41 - it will do is the following it will
13:43 - simply assign these values of the
13:46 - original to our copy and it will do that
13:48 - like this so title is going to be this
13:52 - and then author will be this and then
13:55 - raids will be the address of this array
13:58 - that keeps our rates and then rates
14:00 - counter will be this so where is the
14:03 - problem the problem comes when D
14:06 - structure is invoked so at the end of
14:08 - the scope of each object you invoke the
14:10 - structure in order to release all of the
14:12 - memory that it was using so that other
14:14 - applications can reuse that memory so
14:17 - when the destructor is invoked for the
14:19 - original what is going to happen is it
14:22 - will delete this and then this and this
14:25 - we don't need Destructor for this part
14:27 - because it has nothing to do with
14:28 - pointers but we do need Destructor when
14:32 - it comes to pointers and let's see what
14:34 - our Destructor says it says delete the
14:37 - array of rates which means delete this
14:41 - and then it says please make our rates
14:44 - point to null PTR so it basically does
14:47 - oh it basically does this now a time
14:51 - comes to destroy this object so to
14:53 - destroy the copy so what is going to
14:56 - happen here is it will delete this and
14:58 - this and this this is not in dynamic
15:01 - memory so it knows how to do that but
15:03 - then it will invoke this Destructor in
15:06 - order to de-allocate all of the memory
15:08 - that was dynamically allocated so here
15:12 - it says again delete the array of rates
15:15 - it says where is my array of rates it's
15:17 - on this address here so it goes here and
15:20 - it tries to delete this but
15:23 - that is the problem because this memory
15:27 - was previously released and it does not
15:29 - belong to our application anymore as I
15:32 - said the main purpose of releasing that
15:35 - memory is so that other applications can
15:38 - reuse it so at this point this memory
15:41 - does not belong to our application
15:43 - anymore and we are trying to access
15:46 - someone else's memory and at that point
15:49 - our operating system says please stop
15:51 - this is an error you cannot do that and
15:54 - that is when we get the error that you
15:57 - could previously see in our application
15:59 - so let's return this code to what we
16:02 - already had and then I'm going to show
16:04 - you the correct way to create a copy
16:06 - Constructor
16:07 - so let's start again but this time let's
16:10 - see how we can create a copy Constructor
16:12 - in a proper way so here I am going to
16:16 - copy the title as we already did I'm
16:20 - going to copy author as well and I will
16:23 - copy rates counter because those things
16:25 - do not work with pointers and we will
16:28 - not have a problem if we do it like this
16:30 - but when it comes the time to copy rates
16:33 - array instead of Simply copying it like
16:36 - this what we should do is the following
16:40 - we should go to dynamic memory again and
16:44 - we will create a new array that has two
16:48 - spaces because we have two rates okay
16:52 - and this new array will have another
16:55 - address because it's completely new
16:58 - memory like this so inside this new
17:01 - array I am going to copy the first
17:04 - element and the second element like this
17:07 - and my rates will hold the address of
17:10 - this new array
17:12 - so in the future when the time comes to
17:15 - destroy the original what will happen is
17:17 - this and then when the time comes to
17:20 - destroy the copy we will not have the
17:23 - error because the copy has all of its
17:25 - own elements and we can simply do this
17:28 - without having any problems so now let's
17:31 - see how we can replicate this logic in
17:35 - our code so let's maximize this and here
17:39 - I will keep this part and this part I
17:43 - will remove this part because that's the
17:46 - problematic part because it works with
17:48 - pointers and this part as well is okay
17:52 - so now I will copy rates so the way that
17:57 - we did it is we said rates is equal to
18:00 - new float array that has this many
18:05 - elements
18:07 - okay and then what we need to do is we
18:12 - need to use for Loop
18:14 - so int I is equal to zero I is less than
18:19 - rates counter I plus plus and inside
18:23 - this for Loop we are going to copy all
18:27 - of the elements from this original rates
18:31 - into our rates of the copied object so
18:35 - here I will say rates
18:38 - of I is equal original
18:42 - rates
18:43 - of I
18:45 - like this and this is the proper way to
18:48 - copy all of the elements of the array so
18:50 - you should not hard code it to two
18:52 - elements that we have here because your
18:55 - array potentially can have a lot more
18:57 - elements than that so this here is the
19:01 - proper way to create a copy Constructor
19:03 - so now if I run my program let's see
19:06 - what's going to happen
19:08 - okay and then I press enter and close my
19:11 - program and we don't have that error
19:14 - anymore
19:15 - so now that we have understood how to
19:17 - create a copy Constructor let's see when
19:20 - a copy Constructor is invoked there are
19:23 - three potential situations when a copy
19:25 - Constructor is invoked the first one is
19:28 - whenever you are creating a new object
19:32 - based on an already existing object like
19:35 - we are doing here so we are creating
19:38 - book three which is a new object and for
19:41 - that we are using book one so we are
19:43 - creating a copy of book one and we are
19:46 - we are calling it book three okay now
19:50 - one very very important thing to keep in
19:52 - mind that confuses many beginners is
19:55 - that there is no difference between this
19:59 - line here that I will comment and this
20:03 - line here now
20:05 - many beginners will be confused by this
20:08 - because this here looks like assignment
20:11 - operator and many beginners think that
20:13 - this one here is using assignment
20:16 - operator but it is not this here is
20:20 - still using a copy Constructor even
20:23 - though you have this assignment sign
20:25 - here and if you want to learn more about
20:29 - assignment operators and the difference
20:31 - between assignment operators and copy
20:33 - Constructors let me know in the comments
20:35 - and if you want if I make that video I
20:37 - will definitely link it in the
20:40 - description so again one very important
20:42 - thing to keep in mind is that this line
20:44 - here is invoking copy Constructor and
20:46 - this line here as well is invoking copy
20:49 - Constructor and the way that you will
20:51 - know when a copy Constructor is invoked
20:54 - is whatever a new object is created
20:58 - based on an existing object you are
21:00 - invoking copy Constructor doesn't matter
21:02 - if it looks like this or like this and
21:05 - in this situation we are clearly
21:08 - creating a new object
21:10 - based on an already existing object on
21:13 - the other hand assignment operator will
21:16 - be invoked when you are trying to
21:18 - reassign new values to an already
21:21 - existing object for example
21:24 - if I now did this if I said book three
21:27 - is now equal to book two and this line
21:32 - here we are invoking assignment operator
21:35 - but here when we are first creating the
21:38 - book and assigning it its first value
21:40 - then we are invoking copy Constructor so
21:43 - that is an important difference so let's
21:46 - delete this part and again let me know
21:49 - if you want to learn more about
21:50 - assignment operators so that is the
21:53 - first use of copy Constructors whenever
21:56 - you are creating a new object based on
21:59 - an already existing object the second
22:01 - use of a copy Constructor is when your
22:04 - compiler is creating a temporary object
22:07 - so what does that mean for example when
22:10 - you are passing an object as a parameter
22:13 - to a function but you are passing it by
22:15 - value not by reference in that case your
22:18 - compiler is going to make copy of that
22:21 - object and for that it will copy
22:25 - Constructor so let's demonstrate how
22:27 - this works on an example let's create a
22:30 - function here let's say void print
22:35 - book
22:36 - and here I will pass a parameter to my
22:40 - function and it will be of type book and
22:43 - I will call it book so here I will say C
22:46 - out
22:48 - title and let's say book dot title and
22:53 - let's add end line
22:55 - let's do the same for author
23:00 - okay copy it paste it here and let's
23:03 - also print the average rate I will
23:06 - create float variable call it sum and I
23:10 - will assign it value of 0 and then I
23:13 - will use for Loop in order to iterate
23:16 - through all of the rates of this book
23:20 - like this and here what I will do is I
23:24 - will say sum plus equals to book dot
23:29 - rates of I like this so here I will have
23:34 - the sum of all of the rates and now in
23:38 - order to get the average rate I will
23:40 - divide the sum by book dot rates counter
23:47 - like this and let's call it average rate
23:51 - okay so now what I can do is I can
23:55 - simply say print
23:58 - book
24:00 - and I can pass it book one like this so
24:05 - now if you try to run your program copy
24:08 - Constructor will be invoked on this line
24:10 - here so let's put a breakpoint to
24:12 - demonstrate that and run our program so
24:15 - the execution of our code was passed
24:17 - here and if I press
24:19 - f11 as you can see it is going to our
24:23 - copy Constructor before invoking this
24:27 - print book function okay so let's stop
24:30 - the program and one more thing that I
24:32 - want to do here let's remove this here I
24:36 - want to print details about all of these
24:39 - three books so book one and then book
24:41 - two and book three
24:44 - just to demonstrate that our copy
24:46 - Constructor works as it should in this
24:48 - case book 1 should be the same as book 3
24:51 - because that is how we created book
24:53 - three we literally copied book one so
24:55 - let's run the program and as you can see
24:58 - first book Is millionaire Fastlane
25:01 - second book is C plus plus Lambda story
25:03 - and then third book is millionaire
25:05 - Fastlane again okay so that is the
25:09 - second use of a copy Constructor so when
25:12 - you are passing an object to a function
25:14 - by value and then the third use is when
25:18 - you are returning an object from a
25:20 - function but only if you're returning
25:22 - that object by value as well so if
25:25 - you're returning it by a reference which
25:26 - means if you are returning the address
25:29 - in that case copy Constructor will not
25:32 - be invoked but if you are returning it
25:34 - by value your compiler again is going to
25:37 - create a temporary object which means
25:39 - that it will copy your object and it
25:42 - will invoke copy Constructor
25:44 - so those are all of the uses of copy
25:47 - Constructors and all of those places are
25:50 - places where you can get potential
25:52 - errors if you don't Implement copy
25:54 - Constructor properly like we did here so
25:57 - thank you very much for watching and for
25:59 - those of you who watch my videos until
26:00 - the end I have a special bonus if you
26:03 - enjoyed my teaching style you will be
26:05 - delighted to know that my practical
26:08 - programming course will soon be out I
26:11 - will share my decade-long experience and
26:13 - help you secure a job as a software
26:16 - developer there will be a link down
26:19 - below where you can leave me your email
26:20 - and I will send you a special discount
26:23 - once the course launches but make sure
26:25 - to sign up now because the number of
26:27 - places is limited so thank you again for
26:30 - watching leave all the questions that
26:32 - you have in the comment section and I
26:34 - will see you in some other video bye

Cleaned transcript:

hi guys and welcome to my channel in this video I want to teach you about copy Constructors which is very important but very confusing topic for most beginners so before watching this video please make sure to watch my video about different types of Constructors where we talked about default and parametrized Constructors I will link that video in the description and also make sure to watch my video about these structures it will also be linked in the description and I will put it here you need to understand those two topics before you are able to understand this video so as I said in this video I will teach you everything that you need to know about copy Constructors which is very confusing for beginners from my experience beginners don't have the problem with understanding the idea behind copy Constructors but they do have the problem to understand when copy Constructors are used all of the situations and also different types of bugs and errors that you can get when you are using copy Constructor so all of that we are going to explain in this video step by step so here I have the code that I have written in my previous video so let's first explain this and then we will see how copy Constructor works with this example by the way I am going to pin this code in a comment so that you can copy paste it and code along with me okay so here I have created a class called book and it has these properties it has title author and then it has a pointer called rates and I intended for this to be dynamic array where users are going to put their ratings for this book and then here I have rates counter which is going to serve as the size for this Dynamic array if you're not familiar with the topic of pointers and dynamic arrays make sure to watch this video it will be also in the description so these are the properties and then here I have created parameterized Constructor for my book it is these two parameters it receives title and author and here I create that book based on these two parameters so I assign title and author and here I just hard coded two race for my book just so that we have some data to work with okay and then here we have a Destructor it is very important to create custom Destructor whenever you are working with pointers and whenever you allocate new memory in your Constructor then you should have a Destructor where you are going to deallocate or release that memory so that other applications can reuse it most beginners don't understand this and because of it they get different memory leaks and errors in their code and because of that it is very important to use a good code analyzer that is going to analyze your code and tell you if you have any hidden errors or weaknesses in your code I personally like to use PBS Studio because it is very smart to find errors in the code and it also suggests ways on how you can fix those errors as a student you can get it for free and I am going to leave a link in the description that you can use to download it it is very easy to integrate with Visual Studio you just go to their page and you download it you can use it for c plus c sharpsy and Java programming language so after you download and install it then you will come to your visual studio and click on extensions PBS studio and here you would click on options registration and you would put in license key that you received in your email and you are done with integration and now you can analyze your code for example let's comment this code in the destructor and let's run a check for this current file to see if we have any errors or weaknesses so here you have this previous Studio window and as you can see it says the raids pointer was not released in the destructor a memory leak is possible so just by running a simple analysis you can find errors in your code before you spend hours on actually debugging your code and finding them and especially it's important to catch those errors before they go into production and lose money for you or your company so let's minimize this and now I'm going to uncomment this code that previous Studio suggested and let's see what else we have in this application so here I have created two books millionaire fastly which is a great book for anyone who wants to start their own business I definitely recommend you to read this one and then C plus plus Lambda story which is a great book for people who want to learn C plus plus you can find this book on Amazon for 10 to 15 dollars but I have a link in the description that you can use to download it for free and learn C plus plus for free so um this is what we have done so far we have used this parametrized Constructor we have passed title and author in order to create these two books now what I would like to be able to do is something like this I would like to be able to say book and then book three and here instead of passing title and author I would like to be able to pass one of these two previously created books like this so that now I can create book tree based on this book one so I simply want to copy anything that is inside this book one and based on that I want to create a book three and this is the exact purpose of copy Constructor you use copy Constructor anytime that you want to create a new object based on an already existing object so basically you want to copy that object one very important thing to keep in mind is that the same way that we have default Constructor and default Destructor that we get from our c plus compiler we also have default copy Constructor but as soon as you start working with pointers you need to provide your own custom copy Constructor or else you are going to have an error so in this situation we we are working with pointers so if I run this program and we don't have a copy Constructor let's see what's going to happen so here my program started and if I press enter as you can see we get an exception we get an error here and the reason for that is as I said we are working with pointers and we don't have custom copy Constructor so in order to prove that let's comment all of the code that is working with pointers so I'll comment this and also Destructor and if I run my program again let's see what's going to happen Okay the program has started I press enter and enter once more to close it and nothing happened there is no error in our code so this is one way to fix the problem that you have but as you already know deleting the code is not the fix for the error so what we should do instead is we should create custom copy Constructor for our application so let's return this part that we commented and this here as well and now we are going to create a copy Constructor now there are a couple of rules when creating copy Constructors first of all a copy Constructor needs to be in the public area of your class so it needs to be here second thing is that it doesn't have any return type not even void third thing is that it will have the same name as the class that it belongs to so it will be called book okay also as a parameter this copy Constructor will receive an object of type book and that is going to be original okay so copy Constructor receives one parameter and that parameter has the same type as the class that it belongs to so now we will use this original that was passed into our copy Constructor in order to create or to construct a new object so let's create this Constructor the way that most beginners would probably do so inside it I will say that title is equal to original dot title and then author is equal to original dot author and then rates is original raids and rates counter is equal to original dot rates counter like this so this is the way that most beginners would create a copy Constructor and if you don't understand this in depth then this code could look logical to you because what we are doing here is we are receiving an object of type book it is our original object and based on that object we are simply copying all of its properties in order to construct a new object but but but but there are two very sneaky errors in this code here especially for beginners so if I try to run this application we will immediately get an error so let's see what does our compiler say it says copy Constructor for class book may not have a parameter of that book blah blah blah nothing really helpful especially for beginners who have never seen this era before and who have never faced this issue so let's close this and let's explain what is actually going on here I want to focus on this part here book original for those of you who have watched my videos before and who have watched the video where I talked about different ways to pass an object to a function you remember that I said that there are two ways you can pass an object by a reference and you can pass it by value if you're not familiar with this please make sure to watch this video it will also be linked in the description so as I said you can pass an object by reference and you can pass it by value if you are passing an object by a reference you have this little Ampersand symbol and symbol and it means that you are passing the original so basically your compiler is going to take the original object and pass it to another function but if you are passing an object by a value then you don't have that Ampersand symbol and what your compiler does is that it makes a copy of that object and then it passes that copy to your function so what are we doing here are we passing by value or by reference here we are passing by value which means that your compiler is going to take this book here it is going to copy it and it will pass it into this copy Constructor but one very important thing to keep in mind is that in order to copy the book your compiler needs to have copy Constructor because that is what is used in order to copy objects but here we are creating the copy Constructor itself which creates a logical error which means that in order to pass this book to our copy Constructor we need to have copy Constructor but in order to create a copy Constructor we need to pass this book as a parameter and that is going to create a logical error where you cannot create a copy Constructor before you can copy this object but you can also not copy the object before you have a copy Constructor so in order to fix this problem what we we need to do is we need to Simply pass this by reference and as you can see immediately our error disappears now one thing that we have potentially done by doing this is we have created a possibility for someone inside this function to change our original so some other developer tomorrow can come and change the values of the original object which should not be done in copy Constructor because its purpose is just to copy that object so in order to prevent that error what I will do here is I will say const so by doing this we have said that inside this function here inside this copy Constructor our original object is a constant which means that this function here cannot change it it cannot change any of the properties that it has so let's start our application again and I will press enter and as you can see we still have the error that we previously had so let's see what else is going on in this code here and the best way to understand it is to literally draw it so now I'm going to do that and I will be back so here is the visual representation of our code here we have the original object it has title author and then it has the address of dynamic array where we keep our rates it is this array here we have two raids and it also has rates counter so now if I use this logic of our copy Constructor in order to create a copy of this original what it will do is the following it will simply assign these values of the original to our copy and it will do that like this so title is going to be this and then author will be this and then raids will be the address of this array that keeps our rates and then rates counter will be this so where is the problem the problem comes when D structure is invoked so at the end of the scope of each object you invoke the structure in order to release all of the memory that it was using so that other applications can reuse that memory so when the destructor is invoked for the original what is going to happen is it will delete this and then this and this we don't need Destructor for this part because it has nothing to do with pointers but we do need Destructor when it comes to pointers and let's see what our Destructor says it says delete the array of rates which means delete this and then it says please make our rates point to null PTR so it basically does oh it basically does this now a time comes to destroy this object so to destroy the copy so what is going to happen here is it will delete this and this and this this is not in dynamic memory so it knows how to do that but then it will invoke this Destructor in order to deallocate all of the memory that was dynamically allocated so here it says again delete the array of rates it says where is my array of rates it's on this address here so it goes here and it tries to delete this but that is the problem because this memory was previously released and it does not belong to our application anymore as I said the main purpose of releasing that memory is so that other applications can reuse it so at this point this memory does not belong to our application anymore and we are trying to access someone else's memory and at that point our operating system says please stop this is an error you cannot do that and that is when we get the error that you could previously see in our application so let's return this code to what we already had and then I'm going to show you the correct way to create a copy Constructor so let's start again but this time let's see how we can create a copy Constructor in a proper way so here I am going to copy the title as we already did I'm going to copy author as well and I will copy rates counter because those things do not work with pointers and we will not have a problem if we do it like this but when it comes the time to copy rates array instead of Simply copying it like this what we should do is the following we should go to dynamic memory again and we will create a new array that has two spaces because we have two rates okay and this new array will have another address because it's completely new memory like this so inside this new array I am going to copy the first element and the second element like this and my rates will hold the address of this new array so in the future when the time comes to destroy the original what will happen is this and then when the time comes to destroy the copy we will not have the error because the copy has all of its own elements and we can simply do this without having any problems so now let's see how we can replicate this logic in our code so let's maximize this and here I will keep this part and this part I will remove this part because that's the problematic part because it works with pointers and this part as well is okay so now I will copy rates so the way that we did it is we said rates is equal to new float array that has this many elements okay and then what we need to do is we need to use for Loop so int I is equal to zero I is less than rates counter I plus plus and inside this for Loop we are going to copy all of the elements from this original rates into our rates of the copied object so here I will say rates of I is equal original rates of I like this and this is the proper way to copy all of the elements of the array so you should not hard code it to two elements that we have here because your array potentially can have a lot more elements than that so this here is the proper way to create a copy Constructor so now if I run my program let's see what's going to happen okay and then I press enter and close my program and we don't have that error anymore so now that we have understood how to create a copy Constructor let's see when a copy Constructor is invoked there are three potential situations when a copy Constructor is invoked the first one is whenever you are creating a new object based on an already existing object like we are doing here so we are creating book three which is a new object and for that we are using book one so we are creating a copy of book one and we are we are calling it book three okay now one very very important thing to keep in mind that confuses many beginners is that there is no difference between this line here that I will comment and this line here now many beginners will be confused by this because this here looks like assignment operator and many beginners think that this one here is using assignment operator but it is not this here is still using a copy Constructor even though you have this assignment sign here and if you want to learn more about assignment operators and the difference between assignment operators and copy Constructors let me know in the comments and if you want if I make that video I will definitely link it in the description so again one very important thing to keep in mind is that this line here is invoking copy Constructor and this line here as well is invoking copy Constructor and the way that you will know when a copy Constructor is invoked is whatever a new object is created based on an existing object you are invoking copy Constructor doesn't matter if it looks like this or like this and in this situation we are clearly creating a new object based on an already existing object on the other hand assignment operator will be invoked when you are trying to reassign new values to an already existing object for example if I now did this if I said book three is now equal to book two and this line here we are invoking assignment operator but here when we are first creating the book and assigning it its first value then we are invoking copy Constructor so that is an important difference so let's delete this part and again let me know if you want to learn more about assignment operators so that is the first use of copy Constructors whenever you are creating a new object based on an already existing object the second use of a copy Constructor is when your compiler is creating a temporary object so what does that mean for example when you are passing an object as a parameter to a function but you are passing it by value not by reference in that case your compiler is going to make copy of that object and for that it will copy Constructor so let's demonstrate how this works on an example let's create a function here let's say void print book and here I will pass a parameter to my function and it will be of type book and I will call it book so here I will say C out title and let's say book dot title and let's add end line let's do the same for author okay copy it paste it here and let's also print the average rate I will create float variable call it sum and I will assign it value of 0 and then I will use for Loop in order to iterate through all of the rates of this book like this and here what I will do is I will say sum plus equals to book dot rates of I like this so here I will have the sum of all of the rates and now in order to get the average rate I will divide the sum by book dot rates counter like this and let's call it average rate okay so now what I can do is I can simply say print book and I can pass it book one like this so now if you try to run your program copy Constructor will be invoked on this line here so let's put a breakpoint to demonstrate that and run our program so the execution of our code was passed here and if I press f11 as you can see it is going to our copy Constructor before invoking this print book function okay so let's stop the program and one more thing that I want to do here let's remove this here I want to print details about all of these three books so book one and then book two and book three just to demonstrate that our copy Constructor works as it should in this case book 1 should be the same as book 3 because that is how we created book three we literally copied book one so let's run the program and as you can see first book Is millionaire Fastlane second book is C plus plus Lambda story and then third book is millionaire Fastlane again okay so that is the second use of a copy Constructor so when you are passing an object to a function by value and then the third use is when you are returning an object from a function but only if you're returning that object by value as well so if you're returning it by a reference which means if you are returning the address in that case copy Constructor will not be invoked but if you are returning it by value your compiler again is going to create a temporary object which means that it will copy your object and it will invoke copy Constructor so those are all of the uses of copy Constructors and all of those places are places where you can get potential errors if you don't Implement copy Constructor properly like we did here so thank you very much for watching and for those of you who watch my videos until the end I have a special bonus if you enjoyed my teaching style you will be delighted to know that my practical programming course will soon be out I will share my decadelong experience and help you secure a job as a software developer there will be a link down below where you can leave me your email and I will send you a special discount once the course launches but make sure to sign up now because the number of places is limited so thank you again for watching leave all the questions that you have in the comment section and I will see you in some other video bye
