With timestamps:

00:00 - hi everyone i am finally filming a new
00:02 - video and i am so excited yesterday i
00:05 - created a poll and i asked you which
00:08 - topic would you like to see in my next
00:10 - video and majority of you voted for
00:13 - static versus dynamic binding in c plus
00:17 - so that is what i'm going to cover in
00:19 - this video and i also plan to make more
00:21 - of these votings in the future so if you
00:24 - want to participate in the decision
00:26 - making you can vote here or on my
00:28 - instagram account as well i take in
00:31 - consideration both and i am going to
00:33 - link my instagram in the description of
00:35 - this video so the topic of static versus
00:37 - dynamic binding in c plus is actually
00:40 - very easy to understand if you already
00:42 - understand some of the topics that we
00:44 - covered in my previous videos
00:46 - and i am going to link all of those
00:48 - videos in the description and i will
00:50 - link them in the exact order they need
00:53 - to be watched so that it is easier for
00:55 - you to learn and so that you can get
00:57 - that knowledge step by step
01:00 - so if at any point during this video you
01:03 - feel like you don't understand something
01:05 - or you feel like you have a knowledge
01:07 - gap make sure to visit the description
01:09 - and there you will find all the help and
01:11 - all the details that you need so let's
01:14 - return to explaining differences between
01:16 - static and dynamic binding in c plus and
01:19 - the first thing that i want to explain
01:21 - is what is binding so in order to
01:24 - understand this you need to be familiar
01:26 - with functions in c plus and in case
01:28 - that you are not or if you need a little
01:31 - reminder i'm going to link a playlist
01:33 - here
01:34 - so
01:35 - what is binding in c plus binding means
01:39 - associating the call of a function with
01:42 - the definition of that function now in c
01:46 - plus we have two different types of
01:48 - binding static binding and dynamic
01:51 - binding in static binding all of the
01:54 - information necessary in order to
01:56 - perform that association is available at
02:00 - compile time so that association is
02:02 - happening at compile time and another
02:05 - name for static binding in c plus plus
02:07 - is also compile time binding or early
02:11 - binding
02:12 - now on the other hand dynamic binding is
02:15 - performed during runtime because all of
02:19 - the information necessary to perform
02:21 - that binding
02:22 - is not available at compile time but it
02:25 - is available at run time so another name
02:28 - for dynamic binding is late binding or
02:31 - runtime binding now if you are wondering
02:34 - about which one is better the answer is
02:37 - that both have some advantages and
02:39 - disadvantages in static binding as i
02:42 - already said the process of associating
02:45 - the call of a function with its
02:47 - definition is happening during the
02:49 - compile time which means that it is not
02:51 - happening during the runtime which
02:53 - furthermore will make our program run
02:56 - faster on the other hand in dynamic
02:59 - binding that process of association is
03:01 - happening during the runtime which will
03:04 - make our program a little bit slower so
03:07 - now your question might be saldena why
03:09 - don't we always use static binding then
03:12 - well the answer is because dynamic
03:15 - binding also has its own advantages and
03:19 - the main advantage of dynamic binding is
03:22 - it is very flexible and it allows us to
03:25 - decide which function definition we want
03:28 - to invoke at runtime so we make that
03:31 - decision at runtime based on the data
03:34 - and i am going to show you how that
03:36 - works on the example later in this video
03:40 - so how can we achieve static binding and
03:42 - dynamic binding
03:44 - you need to know that static binding
03:46 - happens by default so by using a normal
03:49 - function call or by using function
03:51 - overloading or operator overloading that
03:54 - is how we achieve static binding on the
03:57 - other hand dynamic binding happens when
04:00 - we use virtual functions or function
04:03 - overriding now please don't confuse
04:06 - these two please don't confuse function
04:08 - overloading and function overriding
04:11 - function overloading is used with static
04:14 - binding and function overloading means
04:17 - creating multiple functions that have
04:19 - the same name but they have different
04:22 - parameters that is function overloading
04:25 - on the other hand function overriding is
04:27 - used with dynamic binding and it is
04:30 - achieved when we create inside child
04:33 - class a newer version of a function that
04:36 - already exists inside parent class now
04:40 - if you are confused about any of these
04:42 - things that i mentioned you can find all
04:44 - of these topics covered in individual
04:46 - videos which i will link in the
04:48 - description and now i'm going to show
04:51 - you how we can achieve static and
04:53 - dynamic binding in code so the first one
04:56 - that i want to demonstrate is static
04:58 - binding and as i already said it is
05:01 - achieved by normal function calls or by
05:04 - using function overloading or operator
05:06 - overloading so
05:08 - let's create two functions called sum
05:12 - numbers and the first function will
05:13 - receive two numbers and then the second
05:16 - function will receive three numbers and
05:18 - let's explain then how static binding
05:20 - works
05:21 - so
05:22 - let's create a function that returns
05:25 - float
05:26 - let's call it some numbers
05:30 - okay
05:31 - and it will receive two float parameters
05:34 - so number a
05:36 - and number
05:37 - b
05:38 - and the job of this function will be to
05:41 - return
05:42 - the result of a plus
05:44 - b
05:45 - okay so that is the first function and
05:48 - the second function will be very similar
05:50 - but instead of receiving two parameters
05:53 - it will receive three parameters so i
05:55 - will say float a float b and then float
05:59 - c
05:59 - and its job will be to return the result
06:02 - of a plus b
06:04 - plus
06:05 - c like this so what i want to do now is
06:08 - i want to invoke these two functions so
06:10 - i will say
06:12 - c out
06:13 - some
06:14 - numbers and i will pass number one and
06:17 - number two
06:19 - add end line and then in the second line
06:22 - again i will invoke some numbers but
06:25 - this time i will pass three parameters
06:27 - like this so
06:29 - if i run my program now
06:32 - you will probably guess correctly what
06:33 - is going to happen okay so for this
06:36 - first some numbers function we get the
06:38 - result of three and then for this second
06:40 - we get the result of six so let's close
06:43 - this program and let's explain what is
06:45 - happening here so even though this
06:47 - function here and this function here
06:50 - have the same name it is still possible
06:52 - to decide at compile time which one of
06:56 - the two will be invoked at this line
06:58 - here and then which one will be invoked
07:01 - at this line here so how can we decide
07:04 - that at compile time the answer is by
07:06 - looking at the parameters of these two
07:09 - functions so the first one receives two
07:12 - parameters and the second one receives
07:14 - three parameters so
07:16 - when we try to invoke some numbers and
07:19 - we pass two parameters at compile time
07:22 - we are already associating this function
07:25 - call here with this definition here and
07:28 - then in this second line when we try to
07:31 - invoke a function that is also called
07:33 - sum numbers but this time we pass three
07:36 - numbers so three parameters we are again
07:39 - at compile time associating this
07:42 - function call with this function
07:45 - definition and as i already said all of
07:47 - that is happening at compile time
07:50 - because all of the information is
07:51 - already available at compile time so
07:54 - that is how we achieve static binding in
07:57 - c plus so let's delete all of this code
08:00 - i don't need it anymore because i want
08:02 - to explain how dynamic binding works in
08:06 - c plus and in order to understand
08:09 - dynamic binding you need to be familiar
08:11 - with inheritance in c plus plus and with
08:13 - virtual functions and i will link those
08:16 - videos in the description so what i want
08:19 - to do is i want to create two classes
08:22 - the first one which will be base class
08:25 - is called user and then the second one
08:27 - which will be child class or derived
08:30 - class is called super user so let's do
08:33 - that
08:34 - i will say
08:35 - class
08:37 - user
08:38 - okay
08:39 - and then as i said the second class will
08:42 - be super user
08:46 - like this
08:47 - okay and this super user will be a child
08:51 - class of user class that we created here
08:54 - so i will say that it inherits publicly
08:58 - from user class like this okay now what
09:02 - i want to do is i want to create a
09:05 - method inside this user class and then i
09:08 - will create a method with the same name
09:10 - and same parameters inside this super
09:13 - user class so
09:15 - i will say public because all of the
09:18 - members of a class are private by
09:21 - default and unless we say public
09:24 - explicitly those members will not be
09:26 - available outside of that class that is
09:29 - why i'm putting this access modifier so
09:32 - let's create a method called get
09:34 - permissions i will say
09:36 - void get permissions
09:42 - like this
09:43 - and it will not receive any parameters
09:46 - and inside this method i will just say
09:48 - see out users can see
09:52 - limited info
09:54 - like this
09:57 - okay now what i want to do is i want to
10:00 - create this method inside my super user
10:04 - class
10:05 - but here i will say that
10:07 - super users
10:09 - can see
10:12 - all the info so we have the same method
10:16 - here and here and both of these methods
10:19 - have the same parameter list which is
10:21 - zero parameters but they have different
10:25 - implementation this one says user can
10:27 - see limited info and then this one says
10:29 - super users can see all of the info now
10:33 - in order to achieve dynamic binding we
10:35 - are missing one more thing and that is
10:38 - virtual keyword here so here i will say
10:41 - virtual like this and again if you are
10:44 - not familiar with virtual functions
10:46 - check out that video in the description
10:49 - okay
10:50 - now what i want to do inside my main
10:52 - function is i want to create a user and
10:55 - a super user so i will say
10:58 - user and i will call it you
11:01 - so we created a user and let's now
11:03 - create a super user as well so i will
11:05 - say
11:06 - super user and let's call it
11:08 - s
11:09 - okay what i want to do with these two is
11:12 - i want to create a list of pointers of
11:15 - type user and inside that list i will
11:19 - push both this user and this super user
11:23 - and that will be possible because super
11:25 - user deep down is still user because it
11:29 - inherits from user class so let's create
11:33 - that list let's say list of user
11:37 - pointers
11:38 - like this and in order to be able to use
11:41 - list collection you need to include it
11:43 - here you need to say
11:45 - include
11:46 - list
11:48 - like this and as you can see now the
11:50 - error has disappeared so i am creating a
11:53 - list of user pointers and i will call it
11:57 - users
11:58 - like this and as i already said inside
12:01 - this users list i will push boot the
12:04 - address of this user and this super user
12:08 - so i will say users dot push
12:12 - back and here i will put the address of
12:15 - my user and then i will do the same for
12:18 - my super user and a quick tip if you are
12:22 - wondering why i'm using this ampersand
12:24 - symbol here it is because i want to add
12:27 - the address of my user to this list here
12:30 - and then the address of a super user to
12:33 - this list here so why am i doing that
12:36 - well because this here is a list of user
12:39 - pointers which means that here we need
12:41 - to add addresses and if i try to remove
12:45 - this ampersand symbol from here or from
12:47 - here as you can see we will get errors
12:50 - because as i already said this here is a
12:53 - list of user pointers so here we need to
12:56 - add addresses so i will return this
12:59 - ampersand symbol and then here as well
13:02 - okay so what i want to do now is i want
13:05 - to iterate through the list of my users
13:08 - and for each user inside that list
13:10 - whether it is user or super user i will
13:13 - invoke a function called get permissions
13:17 - and it should dynamically bind
13:20 - appropriate function with that call so
13:24 - for super user this function here should
13:26 - be invoked and then for
13:27 - user this function here should be
13:30 - invoked so let's demonstrate how that
13:32 - works
13:32 - i will create for each loop here so i
13:36 - will say 4
13:37 - so for every user pointer which i will
13:40 - call user ptr
13:43 - inside my users
13:45 - list what i want to do is i want to say
13:49 - user pointer
13:51 - please invoke function called get
13:54 - permissions and keep in mind that here i
13:57 - need to use this symbol instead of dot
14:00 - because this here is a pointer so let's
14:05 - return that symbol okay so if i run my
14:08 - program let's see what is going to
14:10 - happen
14:11 - okay
14:12 - and as you can see it says users can see
14:15 - limited information and then super users
14:17 - can see all of the information so for
14:20 - our user we invoke this implementation
14:23 - here and then for super user we invoke
14:26 - this implementation here and that
14:29 - decision is made at runtime because it
14:32 - is based on the value that we will find
14:35 - inside this variable here and that value
14:39 - that data is not available at compile
14:41 - time but that data can only be available
14:44 - at runtime so that is how we achieve
14:47 - dynamic binding in c plus so i hope that
14:50 - this video was helpful if it was please
14:52 - give it a thumbs up for the youtube
14:54 - algorithm and also comment about the
14:56 - topics that you would like to see in the
14:58 - future and i am going to create more
15:01 - polls where we will decide together
15:03 - about the topics for my next videos and
15:05 - you can vote both here on youtube and on
15:08 - my instagram account as well but if you
15:10 - want to increase the chances of your
15:12 - topic appearing in the next video make
15:14 - sure to vote both on instagram and on
15:17 - youtube so i believe that is all for
15:19 - this video thank you very much for
15:21 - watching and i'm going to see you in
15:22 - some other video bye

Cleaned transcript:

hi everyone i am finally filming a new video and i am so excited yesterday i created a poll and i asked you which topic would you like to see in my next video and majority of you voted for static versus dynamic binding in c plus so that is what i'm going to cover in this video and i also plan to make more of these votings in the future so if you want to participate in the decision making you can vote here or on my instagram account as well i take in consideration both and i am going to link my instagram in the description of this video so the topic of static versus dynamic binding in c plus is actually very easy to understand if you already understand some of the topics that we covered in my previous videos and i am going to link all of those videos in the description and i will link them in the exact order they need to be watched so that it is easier for you to learn and so that you can get that knowledge step by step so if at any point during this video you feel like you don't understand something or you feel like you have a knowledge gap make sure to visit the description and there you will find all the help and all the details that you need so let's return to explaining differences between static and dynamic binding in c plus and the first thing that i want to explain is what is binding so in order to understand this you need to be familiar with functions in c plus and in case that you are not or if you need a little reminder i'm going to link a playlist here so what is binding in c plus binding means associating the call of a function with the definition of that function now in c plus we have two different types of binding static binding and dynamic binding in static binding all of the information necessary in order to perform that association is available at compile time so that association is happening at compile time and another name for static binding in c plus plus is also compile time binding or early binding now on the other hand dynamic binding is performed during runtime because all of the information necessary to perform that binding is not available at compile time but it is available at run time so another name for dynamic binding is late binding or runtime binding now if you are wondering about which one is better the answer is that both have some advantages and disadvantages in static binding as i already said the process of associating the call of a function with its definition is happening during the compile time which means that it is not happening during the runtime which furthermore will make our program run faster on the other hand in dynamic binding that process of association is happening during the runtime which will make our program a little bit slower so now your question might be saldena why don't we always use static binding then well the answer is because dynamic binding also has its own advantages and the main advantage of dynamic binding is it is very flexible and it allows us to decide which function definition we want to invoke at runtime so we make that decision at runtime based on the data and i am going to show you how that works on the example later in this video so how can we achieve static binding and dynamic binding you need to know that static binding happens by default so by using a normal function call or by using function overloading or operator overloading that is how we achieve static binding on the other hand dynamic binding happens when we use virtual functions or function overriding now please don't confuse these two please don't confuse function overloading and function overriding function overloading is used with static binding and function overloading means creating multiple functions that have the same name but they have different parameters that is function overloading on the other hand function overriding is used with dynamic binding and it is achieved when we create inside child class a newer version of a function that already exists inside parent class now if you are confused about any of these things that i mentioned you can find all of these topics covered in individual videos which i will link in the description and now i'm going to show you how we can achieve static and dynamic binding in code so the first one that i want to demonstrate is static binding and as i already said it is achieved by normal function calls or by using function overloading or operator overloading so let's create two functions called sum numbers and the first function will receive two numbers and then the second function will receive three numbers and let's explain then how static binding works so let's create a function that returns float let's call it some numbers okay and it will receive two float parameters so number a and number b and the job of this function will be to return the result of a plus b okay so that is the first function and the second function will be very similar but instead of receiving two parameters it will receive three parameters so i will say float a float b and then float c and its job will be to return the result of a plus b plus c like this so what i want to do now is i want to invoke these two functions so i will say c out some numbers and i will pass number one and number two add end line and then in the second line again i will invoke some numbers but this time i will pass three parameters like this so if i run my program now you will probably guess correctly what is going to happen okay so for this first some numbers function we get the result of three and then for this second we get the result of six so let's close this program and let's explain what is happening here so even though this function here and this function here have the same name it is still possible to decide at compile time which one of the two will be invoked at this line here and then which one will be invoked at this line here so how can we decide that at compile time the answer is by looking at the parameters of these two functions so the first one receives two parameters and the second one receives three parameters so when we try to invoke some numbers and we pass two parameters at compile time we are already associating this function call here with this definition here and then in this second line when we try to invoke a function that is also called sum numbers but this time we pass three numbers so three parameters we are again at compile time associating this function call with this function definition and as i already said all of that is happening at compile time because all of the information is already available at compile time so that is how we achieve static binding in c plus so let's delete all of this code i don't need it anymore because i want to explain how dynamic binding works in c plus and in order to understand dynamic binding you need to be familiar with inheritance in c plus plus and with virtual functions and i will link those videos in the description so what i want to do is i want to create two classes the first one which will be base class is called user and then the second one which will be child class or derived class is called super user so let's do that i will say class user okay and then as i said the second class will be super user like this okay and this super user will be a child class of user class that we created here so i will say that it inherits publicly from user class like this okay now what i want to do is i want to create a method inside this user class and then i will create a method with the same name and same parameters inside this super user class so i will say public because all of the members of a class are private by default and unless we say public explicitly those members will not be available outside of that class that is why i'm putting this access modifier so let's create a method called get permissions i will say void get permissions like this and it will not receive any parameters and inside this method i will just say see out users can see limited info like this okay now what i want to do is i want to create this method inside my super user class but here i will say that super users can see all the info so we have the same method here and here and both of these methods have the same parameter list which is zero parameters but they have different implementation this one says user can see limited info and then this one says super users can see all of the info now in order to achieve dynamic binding we are missing one more thing and that is virtual keyword here so here i will say virtual like this and again if you are not familiar with virtual functions check out that video in the description okay now what i want to do inside my main function is i want to create a user and a super user so i will say user and i will call it you so we created a user and let's now create a super user as well so i will say super user and let's call it s okay what i want to do with these two is i want to create a list of pointers of type user and inside that list i will push both this user and this super user and that will be possible because super user deep down is still user because it inherits from user class so let's create that list let's say list of user pointers like this and in order to be able to use list collection you need to include it here you need to say include list like this and as you can see now the error has disappeared so i am creating a list of user pointers and i will call it users like this and as i already said inside this users list i will push boot the address of this user and this super user so i will say users dot push back and here i will put the address of my user and then i will do the same for my super user and a quick tip if you are wondering why i'm using this ampersand symbol here it is because i want to add the address of my user to this list here and then the address of a super user to this list here so why am i doing that well because this here is a list of user pointers which means that here we need to add addresses and if i try to remove this ampersand symbol from here or from here as you can see we will get errors because as i already said this here is a list of user pointers so here we need to add addresses so i will return this ampersand symbol and then here as well okay so what i want to do now is i want to iterate through the list of my users and for each user inside that list whether it is user or super user i will invoke a function called get permissions and it should dynamically bind appropriate function with that call so for super user this function here should be invoked and then for user this function here should be invoked so let's demonstrate how that works i will create for each loop here so i will say 4 so for every user pointer which i will call user ptr inside my users list what i want to do is i want to say user pointer please invoke function called get permissions and keep in mind that here i need to use this symbol instead of dot because this here is a pointer so let's return that symbol okay so if i run my program let's see what is going to happen okay and as you can see it says users can see limited information and then super users can see all of the information so for our user we invoke this implementation here and then for super user we invoke this implementation here and that decision is made at runtime because it is based on the value that we will find inside this variable here and that value that data is not available at compile time but that data can only be available at runtime so that is how we achieve dynamic binding in c plus so i hope that this video was helpful if it was please give it a thumbs up for the youtube algorithm and also comment about the topics that you would like to see in the future and i am going to create more polls where we will decide together about the topics for my next videos and you can vote both here on youtube and on my instagram account as well but if you want to increase the chances of your topic appearing in the next video make sure to vote both on instagram and on youtube so i believe that is all for this video thank you very much for watching and i'm going to see you in some other video bye
