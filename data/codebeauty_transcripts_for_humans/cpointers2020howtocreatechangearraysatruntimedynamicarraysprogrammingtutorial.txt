With timestamps:

00:00 - hi everyone welcome to my channel my
00:02 - name is saldina and i make i.t and
00:05 - programming related videos so if that is
00:07 - something that is of interest to you
00:08 - consider subscribing to my channel and
00:11 - give this video a thumbs up as well
00:13 - and in this video i want to talk about
00:15 - dynamic arrays so you should already be
00:18 - familiar with the idea of arrays and the
00:21 - concept of fixed arrays from my previous
00:24 - videos but for those of you that really
00:26 - want to understand the need for dynamic
00:28 - arrays i will go through some of the
00:30 - advantages and disadvantages of fixed
00:32 - arrays so that you can really understand
00:35 - where the need for dynamic arrays arised
00:40 - so we said that an array is type of
00:42 - collection which stores elements in
00:45 - continuous memory now that means that it
00:48 - stores elements one after the other so
00:51 - if i do this for example if i say let's
00:54 - create an integer array of five elements
00:58 - and let's call that array my array
01:02 - like this
01:03 - your computer in the background will do
01:05 - the following it will give to this array
01:08 - here
01:09 - five containers of type int and those
01:12 - containers will be one after the other
01:15 - in memory so that means because the
01:18 - array stores data in a continuous memory
01:20 - so one after the other accessing that
01:23 - data will be very very fast so because
01:26 - the name of the array is the address of
01:28 - the first element of that array when you
01:31 - specify the name of the array and then
01:33 - you give it the index of the element
01:35 - that you want to access it is going to
01:38 - be very fast to move from that first
01:40 - element until that position that you
01:42 - specified so until the element that has
01:44 - that index whereas if you use some other
01:48 - collection type like linked list for
01:50 - example
01:51 - which stores data in non-continuous
01:54 - memory which means in a random places in
01:57 - memory and then each element contains a
01:59 - pointer to the previous one and to the
02:01 - next one accessing elements in those
02:03 - type of collections would be much slower
02:06 - so if you wanted to access fifth element
02:08 - of linked list you would have to
02:10 - traverse the first four elements and
02:13 - then get to the fifth one because they
02:16 - are stored in non-continuous memory
02:18 - meaning they are randomly in your memory
02:21 - so as i already said accessing elements
02:24 - of an array is a very very fast
02:26 - operation but
02:28 - because your array stores data in
02:30 - continuous memory this has certain
02:32 - disadvantages as well so what happens if
02:35 - you want to insert or delete an element
02:38 - in the middle of the array for example
02:40 - so how can you insert or delete an
02:43 - element in the middle of the array
02:45 - without breaking that continuousness if
02:48 - i can say it like that so you get the
02:49 - point that means that the operation of
02:52 - inserting and deleting elements in an
02:54 - array is going to be much slower than
02:57 - inserting elements in a linked list for
02:59 - example and if you want me to do a video
03:01 - which is related to differences between
03:03 - linked lists and arrays for example
03:05 - write it in the comments down below and
03:07 - i will make it in the future when i find
03:09 - time so
03:11 - again if you are not familiar with the
03:12 - basics of arrays i recommend you to
03:14 - watch my first video which is related to
03:17 - arrays and pointers which i will link
03:19 - here and then you come back to this one
03:21 - so those were some advantages and
03:23 - disadvantages of arrays and it will be
03:26 - up to you to decide which collection you
03:28 - want to use however here i want to give
03:31 - you the biggest disadvantage or the
03:33 - biggest obstacle that we encountered so
03:36 - far when working with arrays and that is
03:39 - the following so the size of the array
03:42 - had to be constant which means that the
03:44 - size of the array had to be known before
03:47 - we even started our program so we always
03:50 - kind of wanted to do this so we wanted
03:52 - to say int size
03:55 - and then we wanted to ask our user to
03:58 - enter the size so please enter the size
04:01 - for the array
04:03 - and then after our user enters the size
04:06 - for the array we wanted to create the
04:09 - array that is of that size that our user
04:12 - specified however
04:14 - we get the error as you can see here it
04:16 - says expression must have a constant
04:19 - value which confirms what i just said
04:22 - which is that the size of the array had
04:25 - to be known at compile time so the size
04:28 - of the array could not be changed once
04:30 - we declare it and we had to declare it
04:32 - before we even started our program so
04:35 - this problem was without solution so far
04:38 - but surprise surprise if you know how to
04:40 - work with dynamic arrays and dynamic
04:43 - memory you can very easily create an
04:46 - array and runtime so in c plus there are
04:49 - two keywords or two commands which allow
04:52 - you to allocate and deallocate dynamic
04:55 - memory which means to get yourself
04:58 - dynamic memory when you need it and then
05:00 - free that memory once you don't so that
05:03 - it can be reused that is what allocate
05:06 - and deallocate means and those two
05:09 - commands are new and delete so new
05:12 - allocates memory as you may guess and
05:15 - then delete deallocates that memory or
05:18 - freeze it once you don't need it so
05:20 - let's see how we can use this
05:22 - information that i just gave you on our
05:24 - example so instead of doing this here i
05:28 - will comment it because we do not need
05:30 - it instead of doing this what i will do
05:32 - is i will create a pointer like this and
05:36 - let's call that pointer my
05:39 - array
05:40 - and what i want to assign to this
05:42 - pointer will be the following i will say
05:44 - please make this pointer point to
05:47 - new
05:48 - integer
05:49 - array and the size of that array will be
05:53 - the size that our user entered like this
05:57 - okay and as you can see our compiler is
06:01 - fine with this expression here we do not
06:03 - have an error so this new keyword has
06:08 - allocated an array of this size that our
06:11 - user has specified and that array the
06:15 - address of the first element of that
06:17 - array is stored in this my array pointer
06:21 - so if i build this code
06:25 - as you can see we do not have compile
06:28 - time errors so what i want to show you
06:30 - now is how we can enter elements for
06:33 - this array and then how we can write
06:35 - them out and this is array again this is
06:39 - array which is created at runtime so our
06:42 - user will specify the size of this array
06:45 - which is something that we were not able
06:47 - to do
06:48 - before we learned how to use dynamic
06:51 - arrays so
06:53 - uh in order to enter elements for this
06:56 - array here as we already know we will be
06:58 - using
06:59 - for loops so i will say four
07:02 - please iterate from the element which
07:05 - has index zero until you come to the
07:08 - element
07:09 - that
07:10 - has the index of this size
07:12 - okay and then in each iteration increase
07:16 - our counter by one and what i want to do
07:19 - is i want to write out a message for my
07:21 - user so i will say
07:23 - array
07:24 - and then
07:26 - let's add index of the current element
07:28 - index that our user is entering
07:31 - so i like this
07:34 - okay
07:35 - and then what i want to do is i just
07:37 - want to
07:38 - enter
07:41 - an element
07:43 - on that position that we are currently
07:45 - iterating so i will say my array
07:48 - of
07:49 - i
07:50 - like this
07:51 - so using this code here we should be
07:54 - able to enter elements in this array
07:57 - here and then in order to write these
07:59 - elements out what i will do is i will
08:02 - use another for loop so i will just copy
08:04 - this one and then paste it here
08:07 - and in this particular situation i just
08:10 - want to write out so i will use c out
08:13 - command
08:14 - and then these other redirection signs
08:17 - so i just want to write out all the
08:19 - elements of the array and i will add
08:22 - a few empty spaces after each element so
08:25 - that we have a nicely formatted output
08:29 - so this loop here should write out the
08:31 - elements of our array and if i start
08:34 - this program now
08:36 - as you can see it asks us to enter the
08:38 - size of the array so let's say
08:40 - 5 for example and now we are we are
08:43 - entering element with index 0 so let's
08:46 - say 2
08:47 - 5 7
08:48 - 9
08:50 - and let's say 11
08:51 - okay and as you can see here
08:54 - we have the elements of our array
08:57 - written out
08:58 - and we wouldn't be able to do this
09:01 - if we didn't know how to work with
09:03 - dynamic arrays so let's stop this
09:06 - program
09:07 - and there is one more thing that i want
09:09 - to mention and that is following these
09:12 - square brackets here are only one way to
09:15 - dereference your array another way to
09:17 - dereference the array or to to access
09:20 - the element on a specific position
09:22 - is the following so
09:25 - so the other way to access the element
09:28 - on a specific position would be using
09:30 - this asterisk symbol and then here you
09:33 - say my array plus
09:36 - i
09:37 - now because the name of the array is the
09:39 - address of the first element here you
09:41 - have the address of the first element
09:43 - and then when you add a certain number
09:46 - to that it will move that many spaces in
09:49 - memory and then access the element on
09:51 - that position and when you dereference
09:54 - that you will get the value of that
09:56 - element instead of its address so
10:00 - here is one way to dereference your
10:02 - array and then here is another way to
10:04 - de-reference your array and you can use
10:06 - whichever one you prefer and if i run
10:09 - this program again
10:10 - just to demonstrate that it works the
10:12 - same let's say three and then one five
10:15 - ten
10:16 - okay we get 1 5 10 as the elements of
10:20 - our array
10:22 - one very important thing that i
10:23 - mentioned at the beginning is that we
10:25 - have two commands for working with
10:27 - dynamic memory and one of those two
10:30 - commands is new so we said that new is a
10:34 - command which will allocate memory for
10:36 - us when we need it and then another one
10:39 - is going to be delete and delete is a
10:42 - command which will deallocate that
10:45 - memory when we do not need it so that it
10:48 - can be reused now using dynamic memory
10:51 - comes with a responsibility and that
10:54 - responsibility is the following each
10:56 - time that you allocate memory when you
10:59 - need it you will have to de-allocate
11:01 - that memory once you don't so that that
11:04 - memory can be reused so that means that
11:07 - each time that you write new command you
11:10 - will have to write delete command once
11:12 - you don't need that memory anymore so i
11:16 - will demonstrate how can you deallocate
11:18 - the memory that we have allocated for
11:21 - this my array so let's say that here in
11:24 - this line of code we do not need our
11:27 - array anymore so how can i deallocate
11:30 - the memory that i allocated for this
11:32 - array well using delete
11:35 - keyword and i will say please delete the
11:39 - memory that i allocated for my array
11:42 - which is called my
11:44 - array like this and you have to specify
11:47 - these square brackets because that is
11:49 - the way that you allocated memory so
11:51 - here you said i want new
11:54 - array and then here you have to say
11:56 - please delete that array and a good
12:00 - practice is to do the following as well
12:02 - so you can say my array is equal to null
12:07 - like this and
12:09 - let me collapse this so this here is
12:11 - going to assign the value of null to
12:14 - your array so your array will not point
12:16 - to anything to any address at this line
12:19 - of code so why do we do this because in
12:22 - the previous line of code we have
12:24 - deallocated this array here and now in
12:28 - this line of code here your array will
12:30 - point to a location in memory which does
12:33 - not belong to you so it does not belong
12:35 - to your program and because of that
12:37 - because we do not want to cause some
12:40 - accidental crashes or problems in our
12:42 - program
12:43 - by having this array pointing to memory
12:45 - locations which are not ours anymore it
12:48 - is a good practice to say that our array
12:51 - is now equal to null which means that it
12:53 - is not pointing to anything
12:56 - so as i already said and i repeat again
12:59 - when you use dynamic memory each time
13:02 - that you write new you will have to
13:04 - write delete that corresponds to that
13:07 - new so here i have allocated an array
13:09 - and here i am deallocating that array so
13:13 - i hope that this video was helpful and
13:16 - that this video helped you understand
13:18 - what our dynamic arrays and how they
13:20 - work and now that i have explained this
13:23 - it opened the whole world of new
13:25 - possibilities and new things that you
13:27 - can do with dynamic arrays and i will
13:30 - leave to you to play and discover those
13:33 - new things until my next video of course
13:36 - so thank you for watching this video
13:38 - give it a thumbs up if you liked it
13:40 - subscribe to my channel click the bell
13:42 - icon as well and i'm going to see you in
13:44 - my next video bye

Cleaned transcript:

hi everyone welcome to my channel my name is saldina and i make i.t and programming related videos so if that is something that is of interest to you consider subscribing to my channel and give this video a thumbs up as well and in this video i want to talk about dynamic arrays so you should already be familiar with the idea of arrays and the concept of fixed arrays from my previous videos but for those of you that really want to understand the need for dynamic arrays i will go through some of the advantages and disadvantages of fixed arrays so that you can really understand where the need for dynamic arrays arised so we said that an array is type of collection which stores elements in continuous memory now that means that it stores elements one after the other so if i do this for example if i say let's create an integer array of five elements and let's call that array my array like this your computer in the background will do the following it will give to this array here five containers of type int and those containers will be one after the other in memory so that means because the array stores data in a continuous memory so one after the other accessing that data will be very very fast so because the name of the array is the address of the first element of that array when you specify the name of the array and then you give it the index of the element that you want to access it is going to be very fast to move from that first element until that position that you specified so until the element that has that index whereas if you use some other collection type like linked list for example which stores data in noncontinuous memory which means in a random places in memory and then each element contains a pointer to the previous one and to the next one accessing elements in those type of collections would be much slower so if you wanted to access fifth element of linked list you would have to traverse the first four elements and then get to the fifth one because they are stored in noncontinuous memory meaning they are randomly in your memory so as i already said accessing elements of an array is a very very fast operation but because your array stores data in continuous memory this has certain disadvantages as well so what happens if you want to insert or delete an element in the middle of the array for example so how can you insert or delete an element in the middle of the array without breaking that continuousness if i can say it like that so you get the point that means that the operation of inserting and deleting elements in an array is going to be much slower than inserting elements in a linked list for example and if you want me to do a video which is related to differences between linked lists and arrays for example write it in the comments down below and i will make it in the future when i find time so again if you are not familiar with the basics of arrays i recommend you to watch my first video which is related to arrays and pointers which i will link here and then you come back to this one so those were some advantages and disadvantages of arrays and it will be up to you to decide which collection you want to use however here i want to give you the biggest disadvantage or the biggest obstacle that we encountered so far when working with arrays and that is the following so the size of the array had to be constant which means that the size of the array had to be known before we even started our program so we always kind of wanted to do this so we wanted to say int size and then we wanted to ask our user to enter the size so please enter the size for the array and then after our user enters the size for the array we wanted to create the array that is of that size that our user specified however we get the error as you can see here it says expression must have a constant value which confirms what i just said which is that the size of the array had to be known at compile time so the size of the array could not be changed once we declare it and we had to declare it before we even started our program so this problem was without solution so far but surprise surprise if you know how to work with dynamic arrays and dynamic memory you can very easily create an array and runtime so in c plus there are two keywords or two commands which allow you to allocate and deallocate dynamic memory which means to get yourself dynamic memory when you need it and then free that memory once you don't so that it can be reused that is what allocate and deallocate means and those two commands are new and delete so new allocates memory as you may guess and then delete deallocates that memory or freeze it once you don't need it so let's see how we can use this information that i just gave you on our example so instead of doing this here i will comment it because we do not need it instead of doing this what i will do is i will create a pointer like this and let's call that pointer my array and what i want to assign to this pointer will be the following i will say please make this pointer point to new integer array and the size of that array will be the size that our user entered like this okay and as you can see our compiler is fine with this expression here we do not have an error so this new keyword has allocated an array of this size that our user has specified and that array the address of the first element of that array is stored in this my array pointer so if i build this code as you can see we do not have compile time errors so what i want to show you now is how we can enter elements for this array and then how we can write them out and this is array again this is array which is created at runtime so our user will specify the size of this array which is something that we were not able to do before we learned how to use dynamic arrays so uh in order to enter elements for this array here as we already know we will be using for loops so i will say four please iterate from the element which has index zero until you come to the element that has the index of this size okay and then in each iteration increase our counter by one and what i want to do is i want to write out a message for my user so i will say array and then let's add index of the current element index that our user is entering so i like this okay and then what i want to do is i just want to enter an element on that position that we are currently iterating so i will say my array of i like this so using this code here we should be able to enter elements in this array here and then in order to write these elements out what i will do is i will use another for loop so i will just copy this one and then paste it here and in this particular situation i just want to write out so i will use c out command and then these other redirection signs so i just want to write out all the elements of the array and i will add a few empty spaces after each element so that we have a nicely formatted output so this loop here should write out the elements of our array and if i start this program now as you can see it asks us to enter the size of the array so let's say 5 for example and now we are we are entering element with index 0 so let's say 2 5 7 9 and let's say 11 okay and as you can see here we have the elements of our array written out and we wouldn't be able to do this if we didn't know how to work with dynamic arrays so let's stop this program and there is one more thing that i want to mention and that is following these square brackets here are only one way to dereference your array another way to dereference the array or to to access the element on a specific position is the following so so the other way to access the element on a specific position would be using this asterisk symbol and then here you say my array plus i now because the name of the array is the address of the first element here you have the address of the first element and then when you add a certain number to that it will move that many spaces in memory and then access the element on that position and when you dereference that you will get the value of that element instead of its address so here is one way to dereference your array and then here is another way to dereference your array and you can use whichever one you prefer and if i run this program again just to demonstrate that it works the same let's say three and then one five ten okay we get 1 5 10 as the elements of our array one very important thing that i mentioned at the beginning is that we have two commands for working with dynamic memory and one of those two commands is new so we said that new is a command which will allocate memory for us when we need it and then another one is going to be delete and delete is a command which will deallocate that memory when we do not need it so that it can be reused now using dynamic memory comes with a responsibility and that responsibility is the following each time that you allocate memory when you need it you will have to deallocate that memory once you don't so that that memory can be reused so that means that each time that you write new command you will have to write delete command once you don't need that memory anymore so i will demonstrate how can you deallocate the memory that we have allocated for this my array so let's say that here in this line of code we do not need our array anymore so how can i deallocate the memory that i allocated for this array well using delete keyword and i will say please delete the memory that i allocated for my array which is called my array like this and you have to specify these square brackets because that is the way that you allocated memory so here you said i want new array and then here you have to say please delete that array and a good practice is to do the following as well so you can say my array is equal to null like this and let me collapse this so this here is going to assign the value of null to your array so your array will not point to anything to any address at this line of code so why do we do this because in the previous line of code we have deallocated this array here and now in this line of code here your array will point to a location in memory which does not belong to you so it does not belong to your program and because of that because we do not want to cause some accidental crashes or problems in our program by having this array pointing to memory locations which are not ours anymore it is a good practice to say that our array is now equal to null which means that it is not pointing to anything so as i already said and i repeat again when you use dynamic memory each time that you write new you will have to write delete that corresponds to that new so here i have allocated an array and here i am deallocating that array so i hope that this video was helpful and that this video helped you understand what our dynamic arrays and how they work and now that i have explained this it opened the whole world of new possibilities and new things that you can do with dynamic arrays and i will leave to you to play and discover those new things until my next video of course so thank you for watching this video give it a thumbs up if you liked it subscribe to my channel click the bell icon as well and i'm going to see you in my next video bye
