With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about a
00:04 - special type of collection that stores
00:06 - key value pairs of data and in c plus
00:09 - that type of collection is called map if
00:12 - you're coming from some other
00:13 - programming language like java
00:15 - javascript c sharp python and so on in
00:18 - those languages this type of collection
00:20 - exists as well but it is called
00:22 - dictionary now one interesting fact is
00:25 - that i never learned about this type of
00:27 - collection in university but once i
00:30 - started working this became
00:32 - one of the most common data collections
00:34 - that i use alongside lists and arrays
00:38 - and as you will see map collection can
00:40 - be very useful in some situations and if
00:44 - you watch this video until the end you
00:45 - are going to understand how and when to
00:48 - use this type of collection so now i'm
00:50 - going to show you the app that we are
00:51 - going to build but first i need to teach
00:53 - you about map data collection so a map
00:56 - data collection stores elements in key
00:58 - value pairs so each element is called
01:01 - pair and it consists of key and value
01:04 - and the best example of this is a
01:07 - dictionary so let's say that you are
01:09 - learning german language and you are
01:11 - building a dictionary so english german
01:14 - dictionary and you have a key which is
01:17 - the word strawberry for example so that
01:20 - is your key and then the value is
01:22 - something that you want to associate
01:24 - with that key and in this situation that
01:25 - is going to be german translation of the
01:28 - word strawberry which is the artbere
01:31 - it's like um a berry from the earth so
01:35 - that's a german word for strawberry
01:38 - so that means that you are associating a
01:40 - word with its translation so you are
01:42 - associating string with another string
01:46 - now
01:47 - let's use another example let's say that
01:49 - you also want to associate a translation
01:52 - for orange so your key is going to be
01:55 - english word for orange and then a value
01:59 - is going to be the translation for that
02:01 - word but in german you have two words
02:03 - for orange the orange
02:06 - and the aflazine which means that you
02:09 - are associating a word with a list of
02:12 - translations so you are associating one
02:15 - string with list of strings so what does
02:18 - this mean in our situation it means that
02:21 - the key is always simple data type the
02:24 - key is always something like um a number
02:27 - an integer a string or something like
02:29 - that but the value can also be a complex
02:33 - data type and in this situation the
02:35 - value is list of strings but it also can
02:38 - be a structure it can be another map or
02:41 - something like that whatever you need so
02:44 - let me show you how this works in code
02:47 - so let's build our dictionary
02:49 - application and let's first see how we
02:51 - can do that for the simple example where
02:53 - we are associating a string to another
02:56 - string and then we will see how to do
02:57 - that for complex data types later so
03:01 - since we are going to work with map
03:03 - collection i first need to say
03:06 - include
03:07 - map
03:10 - like this
03:11 - and then also since we will be using
03:12 - string i will also say
03:14 - include
03:16 - string
03:17 - like this and one more thing that i want
03:19 - to do is using
03:21 - namespace
03:23 - std
03:24 - because i will be using map and string
03:27 - and c out and all of those belong to std
03:30 - namespace so i don't want to say every
03:31 - time scd map std string stdc out and so
03:36 - on so
03:38 - now that we have added these let's see
03:40 - how we are going to create our
03:42 - dictionary how we are going to create
03:44 - our map that associates string with
03:47 - another string so you say
03:50 - map
03:51 - and then inside these angled brackets
03:54 - you put the type of your key which is
03:56 - going to be string
03:58 - and then the type of your value which is
04:01 - also going to be string okay so we are
04:05 - associating string with another string
04:08 - and we are going to call this map my
04:12 - dictionary
04:14 - like this
04:15 - so now the question is how do you insert
04:17 - elements into this dictionary and that
04:20 - is very simple
04:21 - so you say
04:23 - my dictionary dot
04:25 - insert
04:26 - okay and then inside parentheses you say
04:28 - that you want to insert
04:30 - a pair of string key
04:33 - and then string value and you close
04:37 - these
04:37 - angled brackets and then inside
04:40 - parentheses you will provide values for
04:43 - your first string which is the key so
04:47 - let's say that will be the word
04:49 - apple okay and then inside another
04:52 - quotation marks you will provide the
04:54 - value which is this string here so
04:57 - here will come the translation for the
04:59 - word apple which is
05:01 - the
05:02 - apfel
05:04 - like this
05:05 - okay
05:06 - and let's do a couple more fruits let's
05:09 - copy this and here let's say for example
05:12 - banana
05:13 - and then here we are going to say
05:16 - the
05:17 - banana
05:19 - okay so again you say my dictionary dot
05:22 - insert you say that you want to insert a
05:25 - pair of
05:26 - string key and string value and here you
05:30 - provide the key and you provide the
05:33 - value okay so i will add a couple more
05:36 - fruits and then i i'll be back so here i
05:38 - added orange and strawberry and as you
05:41 - can see i added both translations for
05:44 - orange so both the orange and the apple
05:47 - zine as one string because here i said
05:51 - that my dictionary is going to consist
05:53 - of string strings so key value pairs are
05:55 - going to be string and another string
05:57 - not string and list of strings but later
06:01 - i'm going to show you that as well so
06:02 - make sure to watch the entire video
06:05 - so now the question is how can i print
06:07 - this dictionary how can i see it in my
06:10 - application so
06:11 - let's do that so it is very easy to
06:14 - print it for that we are going to use
06:16 - four loops so i will say for
06:19 - auto so for every
06:21 - pair in
06:23 - my dictionary what i want to do is i
06:26 - want to say c out
06:29 - pair
06:30 - dot first which is
06:32 - key
06:33 - and then let's put
06:35 - a little separation like this and then i
06:38 - want to say pair dot
06:40 - second
06:41 - and add end line so
06:44 - i am printing the first part of my pair
06:48 - which is the key
06:50 - and then a little separation and then
06:52 - i'm printing the second part of my pair
06:55 - which is the translation so the value
06:58 - and i can even even remove these i don't
07:00 - need them so if i run the program let's
07:03 - see what is going to happen okay so
07:05 - apple banana orange and strawberry
07:09 - perfect now one very interesting thing
07:11 - that i didn't mention and it also stayed
07:14 - hidden because of the way that i wrote
07:15 - my application
07:17 - but it is very important characteristic
07:19 - of map collection is that it orders
07:22 - elements by key in ascending order which
07:26 - means that if your key is a string then
07:29 - the elements are going to be ordered
07:31 - alphabetically so a b c d and so on and
07:35 - then if your key is a number it is going
07:37 - to order them in ascending order again
07:39 - one two three four five and so on so in
07:42 - order to demonstrate and prove this
07:45 - let's close the program and let's mix
07:48 - these a little bit let's say that first
07:50 - we add for example strawberry and then
07:53 - we add
07:54 - orange and then apple and banana so what
07:57 - do you expect to see in the console if i
08:01 - run my program again let me know in the
08:02 - comments
08:04 - so
08:05 - if i run the program again as you can
08:08 - see again we have elements ordered
08:11 - alphabetically so first is apple and
08:13 - then banana and then orange and then
08:16 - strawberry even though i first added
08:18 - strawberry and then orange and then
08:20 - apple and banana so that is one very
08:23 - important characteristic of map
08:25 - collection so again it orders elements
08:28 - in ascending order or alphabetically and
08:32 - that works very fast and it works out of
08:34 - the box so you don't have to do anything
08:36 - it is just available for you to use
08:39 - so
08:40 - something else that i want to show you
08:42 - is
08:43 - if for any reason you don't want your
08:45 - elements to be ordered alphabetically or
08:48 - in ascending order you can use a
08:50 - different type of collection which is
08:51 - called unordered map so in order to use
08:54 - that type of collection you need to say
08:57 - include an ordered map so
09:00 - like this
09:01 - and then here
09:03 - the type is going to be unordered map as
09:05 - well so if i run my program now
09:09 - as you can see
09:11 - first is strawberry and then orange and
09:13 - then apple and banana so they are
09:16 - written in the order that we added them
09:18 - to our dictionary okay so now i'm going
09:21 - to return this
09:22 - to
09:23 - ordered map so just map
09:27 - like this
09:28 - and let's continue with some more
09:30 - examples so something else that you
09:32 - should know is how can you access a
09:34 - specific element so in order to access a
09:37 - specific element you use its key and you
09:40 - use square brackets
09:42 - so
09:43 - let's say for example that you want to
09:45 - access this strawberry element so you
09:48 - say
09:49 - my dictionary
09:50 - and then inside these square brackets
09:52 - you put the key so let me copy it so
09:55 - that i don't make a typo like this and
09:58 - one very important thing is that these
10:00 - keys have to be unique so don't add
10:03 - pairs that have a key that already
10:05 - exists in the dictionary they have to be
10:08 - unique values don't have to be unique
10:11 - but keys do have to be unique okay so
10:14 - you say please access
10:16 - inside my dictionary a pair that has
10:19 - this key strawberry and then let's say
10:22 - for example that you want to set its
10:24 - value so that it says
10:26 - d
10:27 - so capital letter d
10:29 - d
10:30 - erdbere
10:33 - like this
10:34 - okay so if i run my program now let's
10:38 - see what is going to happen
10:40 - okay and as you can see
10:42 - this part here has been changed so here
10:44 - we have lowercase d and then here we
10:47 - have capital letter d so that is how you
10:50 - access and change your element of a map
10:53 - another useful thing that you should
10:55 - know is that there is a function called
10:58 - size which returns the size of your
11:00 - collection so you can say c out my
11:04 - dictionary dot
11:06 - size
11:07 - and then let's put end line
11:09 - so if i run the program
11:12 - you will get the size of this collection
11:14 - which is four and as you can see here we
11:16 - have four elements now what else well
11:20 - let's put here another function which is
11:22 - called clear and it is used to delete
11:25 - all the elements from your collection so
11:27 - you say
11:28 - my dictionary dot
11:30 - clear
11:31 - okay so if i run the program now
11:35 - as you can see
11:36 - the dictionary contains zero elements
11:38 - because we cleared it here and then we
11:40 - also don't have any output after this
11:43 - zero
11:44 - okay so those are some functionalities
11:47 - that you should know about there are a
11:49 - few others as well but these are used
11:51 - most often
11:52 - now another thing that i promised is to
11:55 - show you how you can have complex data
11:58 - type as your value so key value pair is
12:00 - going to be simple data type and then
12:03 - complex data type so let me show you
12:05 - that so i deleted all of the code except
12:08 - for this part here since we don't need
12:10 - that code because i want to show you a
12:12 - different example
12:14 - so now we are going to build a pokedex
12:18 - and if you don't know what a pokedex is
12:20 - we are basically going to associate the
12:23 - name of a pokemon with the list of all
12:26 - of the attacks that the pokemon has
12:29 - so
12:30 - since we are going to be working with
12:32 - lists let's say here
12:34 - include
12:36 - list that is the first thing so that we
12:38 - don't forget it
12:39 - okay so let's create our pokedex so
12:42 - let's create a map collection so i will
12:45 - say
12:45 - map and as i said we want to associate
12:48 - the name of a pokemon so a string
12:51 - with the list of the attacks that the
12:54 - pokemon has so we are associating string
12:57 - with list of strings so i will say
12:59 - please associate string
13:02 - with
13:03 - list
13:04 - of
13:05 - string
13:07 - like this okay and make sure that you
13:10 - put both of these angled brackets
13:12 - because if you don't you are going to
13:14 - get an error okay so this is going to be
13:17 - the type of our map and then the name
13:19 - will be pokedex
13:22 - like this
13:23 - okay so how do you add elements into
13:26 - this pokedex well we are going to do it
13:29 - step by step so
13:30 - let's first create a list of string
13:35 - which is going to be called let's say
13:37 - for example
13:38 - pikachu attacks
13:40 - like this and i will initialize that
13:43 - list so here i will put all of the
13:45 - attacks that pikachu has
13:48 - so
13:49 - let me google it very quickly so here
13:52 - are the attacks of pikachu
13:54 - thundershock tail whip and quick attack
13:58 - all inside quotation marks and separated
14:00 - by comma sign okay so let's create two
14:04 - more pokemons let's say for example
14:06 - charmander
14:09 - and let's say
14:10 - chicorita
14:13 - like this and i will google attacks for
14:17 - these two pokemons as well so i'll be
14:20 - back in a moment so here is our
14:22 - information for charmander we have
14:24 - flamethrower and scary face and this
14:27 - scary face it's a real attack this is
14:29 - the information from google so it must
14:31 - be correct and then for chikorita we
14:34 - have razor leaf and poison powder
14:37 - okay and these three are my three
14:40 - favorite pokemons and let me know in the
14:42 - comment section i would love to read
14:44 - which are your favorites so that i don't
14:46 - feel like a weird 26 year old who still
14:49 - has a favorite pokemon
14:52 - so
14:54 - how can we
14:55 - associate
14:57 - these attacks so the list of strings
15:00 - with the name of that pokemon how can we
15:02 - add that to our pokedex
15:05 - let's do that next so we say
15:08 - pokedex and then
15:10 - insert like this
15:12 - so what do we want to insert inside this
15:15 - map called pokedex well we want to
15:18 - insert a pair
15:19 - of
15:20 - string and then the second is list
15:24 - of string like this and again make sure
15:28 - that you add two of these because the
15:30 - first one is for your pair and then the
15:33 - second one is for this string type okay
15:37 - so we are associating a string with list
15:40 - of strings and then inside these
15:42 - parentheses we will provide our key and
15:45 - our value
15:46 - so the key is pikachu that is
15:50 - first
15:51 - okay and capital letter p and then the
15:54 - value will be a list of strings called
15:58 - pikachu attacks
16:00 - okay and then let's copy this two more
16:03 - times so the second pokemon is going to
16:06 - be
16:06 - charmander
16:08 - okay and paste it here
16:11 - like this and then we are going to
16:13 - associate that with a list called
16:16 - charmander attacks and i will do the
16:18 - same for
16:19 - the third pokemon so chikorita
16:23 - and then we are associating this with
16:26 - chikurita attacks okay so how can we
16:29 - print this information to our console
16:32 - let me type that code very quickly and
16:34 - then i will explain how it works so here
16:36 - is the code that i added and as you can
16:38 - see we are using for loop in order to
16:41 - iterate through all the pairs
16:44 - of our pokedex collection so we are
16:46 - iterating through these three pairs that
16:49 - we added that we inserted into our
16:51 - pokedex so the first thing that we do is
16:54 - we print pair dot first which is the key
16:57 - so the name of the pokemon and then we
17:00 - use another for loop in order to iterate
17:02 - through pair dot second which is list of
17:05 - attacks so we print every attack and
17:09 - once we finish that we put an end line
17:12 - and we go again for the next pokemon so
17:15 - if i run this program as you can see we
17:19 - have charmander which is paired at first
17:21 - and then here we have the list of all of
17:23 - the attacks of charmander pokemon and
17:26 - then we put a new line and we go with
17:28 - the next pokemon sochikorita and then
17:30 - the attacks of chikorita and then
17:32 - pikachu and its attacks so that is how
17:36 - you work with complex data types inside
17:38 - your map collection and that is what i
17:40 - wanted to show you in this video so if
17:42 - you enjoyed it please give it a big
17:44 - thumbs up for the youtube algorithm and
17:46 - also share it with your friends who
17:47 - would like to learn programming and you
17:49 - can even learn together because it is
17:52 - always more fun to learn that way and in
17:54 - most situations it is also much easier
17:57 - so thank you very much for watching and
17:59 - if you have any questions or any topic
18:01 - that you would like to see in the future
18:03 - leave that for me in the comment section
18:05 - and i will see you in some other video
18:08 - or you can add me on instagram or
18:09 - twitter because i post more often on
18:12 - those platforms so if you would like to
18:14 - hang out with me more often definitely
18:16 - add me on ig and i will see you in some
18:20 - other video or on some other platform
18:22 - bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to talk about a special type of collection that stores key value pairs of data and in c plus that type of collection is called map if you're coming from some other programming language like java javascript c sharp python and so on in those languages this type of collection exists as well but it is called dictionary now one interesting fact is that i never learned about this type of collection in university but once i started working this became one of the most common data collections that i use alongside lists and arrays and as you will see map collection can be very useful in some situations and if you watch this video until the end you are going to understand how and when to use this type of collection so now i'm going to show you the app that we are going to build but first i need to teach you about map data collection so a map data collection stores elements in key value pairs so each element is called pair and it consists of key and value and the best example of this is a dictionary so let's say that you are learning german language and you are building a dictionary so english german dictionary and you have a key which is the word strawberry for example so that is your key and then the value is something that you want to associate with that key and in this situation that is going to be german translation of the word strawberry which is the artbere it's like um a berry from the earth so that's a german word for strawberry so that means that you are associating a word with its translation so you are associating string with another string now let's use another example let's say that you also want to associate a translation for orange so your key is going to be english word for orange and then a value is going to be the translation for that word but in german you have two words for orange the orange and the aflazine which means that you are associating a word with a list of translations so you are associating one string with list of strings so what does this mean in our situation it means that the key is always simple data type the key is always something like um a number an integer a string or something like that but the value can also be a complex data type and in this situation the value is list of strings but it also can be a structure it can be another map or something like that whatever you need so let me show you how this works in code so let's build our dictionary application and let's first see how we can do that for the simple example where we are associating a string to another string and then we will see how to do that for complex data types later so since we are going to work with map collection i first need to say include map like this and then also since we will be using string i will also say include string like this and one more thing that i want to do is using namespace std because i will be using map and string and c out and all of those belong to std namespace so i don't want to say every time scd map std string stdc out and so on so now that we have added these let's see how we are going to create our dictionary how we are going to create our map that associates string with another string so you say map and then inside these angled brackets you put the type of your key which is going to be string and then the type of your value which is also going to be string okay so we are associating string with another string and we are going to call this map my dictionary like this so now the question is how do you insert elements into this dictionary and that is very simple so you say my dictionary dot insert okay and then inside parentheses you say that you want to insert a pair of string key and then string value and you close these angled brackets and then inside parentheses you will provide values for your first string which is the key so let's say that will be the word apple okay and then inside another quotation marks you will provide the value which is this string here so here will come the translation for the word apple which is the apfel like this okay and let's do a couple more fruits let's copy this and here let's say for example banana and then here we are going to say the banana okay so again you say my dictionary dot insert you say that you want to insert a pair of string key and string value and here you provide the key and you provide the value okay so i will add a couple more fruits and then i i'll be back so here i added orange and strawberry and as you can see i added both translations for orange so both the orange and the apple zine as one string because here i said that my dictionary is going to consist of string strings so key value pairs are going to be string and another string not string and list of strings but later i'm going to show you that as well so make sure to watch the entire video so now the question is how can i print this dictionary how can i see it in my application so let's do that so it is very easy to print it for that we are going to use four loops so i will say for auto so for every pair in my dictionary what i want to do is i want to say c out pair dot first which is key and then let's put a little separation like this and then i want to say pair dot second and add end line so i am printing the first part of my pair which is the key and then a little separation and then i'm printing the second part of my pair which is the translation so the value and i can even even remove these i don't need them so if i run the program let's see what is going to happen okay so apple banana orange and strawberry perfect now one very interesting thing that i didn't mention and it also stayed hidden because of the way that i wrote my application but it is very important characteristic of map collection is that it orders elements by key in ascending order which means that if your key is a string then the elements are going to be ordered alphabetically so a b c d and so on and then if your key is a number it is going to order them in ascending order again one two three four five and so on so in order to demonstrate and prove this let's close the program and let's mix these a little bit let's say that first we add for example strawberry and then we add orange and then apple and banana so what do you expect to see in the console if i run my program again let me know in the comments so if i run the program again as you can see again we have elements ordered alphabetically so first is apple and then banana and then orange and then strawberry even though i first added strawberry and then orange and then apple and banana so that is one very important characteristic of map collection so again it orders elements in ascending order or alphabetically and that works very fast and it works out of the box so you don't have to do anything it is just available for you to use so something else that i want to show you is if for any reason you don't want your elements to be ordered alphabetically or in ascending order you can use a different type of collection which is called unordered map so in order to use that type of collection you need to say include an ordered map so like this and then here the type is going to be unordered map as well so if i run my program now as you can see first is strawberry and then orange and then apple and banana so they are written in the order that we added them to our dictionary okay so now i'm going to return this to ordered map so just map like this and let's continue with some more examples so something else that you should know is how can you access a specific element so in order to access a specific element you use its key and you use square brackets so let's say for example that you want to access this strawberry element so you say my dictionary and then inside these square brackets you put the key so let me copy it so that i don't make a typo like this and one very important thing is that these keys have to be unique so don't add pairs that have a key that already exists in the dictionary they have to be unique values don't have to be unique but keys do have to be unique okay so you say please access inside my dictionary a pair that has this key strawberry and then let's say for example that you want to set its value so that it says d so capital letter d d erdbere like this okay so if i run my program now let's see what is going to happen okay and as you can see this part here has been changed so here we have lowercase d and then here we have capital letter d so that is how you access and change your element of a map another useful thing that you should know is that there is a function called size which returns the size of your collection so you can say c out my dictionary dot size and then let's put end line so if i run the program you will get the size of this collection which is four and as you can see here we have four elements now what else well let's put here another function which is called clear and it is used to delete all the elements from your collection so you say my dictionary dot clear okay so if i run the program now as you can see the dictionary contains zero elements because we cleared it here and then we also don't have any output after this zero okay so those are some functionalities that you should know about there are a few others as well but these are used most often now another thing that i promised is to show you how you can have complex data type as your value so key value pair is going to be simple data type and then complex data type so let me show you that so i deleted all of the code except for this part here since we don't need that code because i want to show you a different example so now we are going to build a pokedex and if you don't know what a pokedex is we are basically going to associate the name of a pokemon with the list of all of the attacks that the pokemon has so since we are going to be working with lists let's say here include list that is the first thing so that we don't forget it okay so let's create our pokedex so let's create a map collection so i will say map and as i said we want to associate the name of a pokemon so a string with the list of the attacks that the pokemon has so we are associating string with list of strings so i will say please associate string with list of string like this okay and make sure that you put both of these angled brackets because if you don't you are going to get an error okay so this is going to be the type of our map and then the name will be pokedex like this okay so how do you add elements into this pokedex well we are going to do it step by step so let's first create a list of string which is going to be called let's say for example pikachu attacks like this and i will initialize that list so here i will put all of the attacks that pikachu has so let me google it very quickly so here are the attacks of pikachu thundershock tail whip and quick attack all inside quotation marks and separated by comma sign okay so let's create two more pokemons let's say for example charmander and let's say chicorita like this and i will google attacks for these two pokemons as well so i'll be back in a moment so here is our information for charmander we have flamethrower and scary face and this scary face it's a real attack this is the information from google so it must be correct and then for chikorita we have razor leaf and poison powder okay and these three are my three favorite pokemons and let me know in the comment section i would love to read which are your favorites so that i don't feel like a weird 26 year old who still has a favorite pokemon so how can we associate these attacks so the list of strings with the name of that pokemon how can we add that to our pokedex let's do that next so we say pokedex and then insert like this so what do we want to insert inside this map called pokedex well we want to insert a pair of string and then the second is list of string like this and again make sure that you add two of these because the first one is for your pair and then the second one is for this string type okay so we are associating a string with list of strings and then inside these parentheses we will provide our key and our value so the key is pikachu that is first okay and capital letter p and then the value will be a list of strings called pikachu attacks okay and then let's copy this two more times so the second pokemon is going to be charmander okay and paste it here like this and then we are going to associate that with a list called charmander attacks and i will do the same for the third pokemon so chikorita and then we are associating this with chikurita attacks okay so how can we print this information to our console let me type that code very quickly and then i will explain how it works so here is the code that i added and as you can see we are using for loop in order to iterate through all the pairs of our pokedex collection so we are iterating through these three pairs that we added that we inserted into our pokedex so the first thing that we do is we print pair dot first which is the key so the name of the pokemon and then we use another for loop in order to iterate through pair dot second which is list of attacks so we print every attack and once we finish that we put an end line and we go again for the next pokemon so if i run this program as you can see we have charmander which is paired at first and then here we have the list of all of the attacks of charmander pokemon and then we put a new line and we go with the next pokemon sochikorita and then the attacks of chikorita and then pikachu and its attacks so that is how you work with complex data types inside your map collection and that is what i wanted to show you in this video so if you enjoyed it please give it a big thumbs up for the youtube algorithm and also share it with your friends who would like to learn programming and you can even learn together because it is always more fun to learn that way and in most situations it is also much easier so thank you very much for watching and if you have any questions or any topic that you would like to see in the future leave that for me in the comment section and i will see you in some other video or you can add me on instagram or twitter because i post more often on those platforms so if you would like to hang out with me more often definitely add me on ig and i will see you in some other video or on some other platform bye
