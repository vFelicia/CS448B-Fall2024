With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video we are going to talk about
00:03 - differences between assignment operator
00:05 - and copy Constructor these two are very
00:08 - similar because they are both used in
00:10 - order to let's say initialize one object
00:13 - based on another object and because they
00:16 - are very similar they create a lot of
00:19 - confusion because there are also some
00:20 - very important differences between
00:23 - assignment operator and copy Constructor
00:25 - and the most important difference is
00:29 - copy Constructor is used when you are
00:31 - creating a new object completely new
00:34 - object based on another object on the
00:38 - other hand assignment operator is used
00:40 - when you are changing the values so
00:43 - replacing the values of already existing
00:46 - object based on another object so that
00:49 - is the most important difference between
00:52 - copy Constructor and assignment operator
00:55 - and in this video I'm going to show you
00:56 - on a practical example using the code
00:59 - that I have here the difference between
01:00 - those two and also some important tricks
01:03 - tips and errors that happen to beginners
01:06 - and before we jump into explaining this
01:08 - code here I would like to invite you to
01:10 - join my practical programming course
01:13 - where you are going to learn all of the
01:15 - skills necessary to start a successful
01:17 - career as a software developer so if you
01:19 - are tired because you cannot find a job
01:21 - or if you already have a job but you are
01:23 - dreaming of a really big career as a
01:26 - software developer then I'm 100% sure
01:30 - that the lessons that I've prepared
01:32 - tasks exercises the community that we
01:34 - have is definitely going to help you to
01:37 - learn coding to start your career and to
01:39 - discover your passion for programming I
01:42 - understand that learning to code can be
01:44 - overwhelming and hard and that's why I
01:46 - created this course to be interactive
01:49 - and engaging so that learning is fun and
01:52 - enjoyable also I believe that everyone
01:55 - should have the opportunity to learn
01:56 - coding and to take control of their
01:58 - future in their own hands
02:00 - and that's the reason why I'm creating
02:02 - these YouTube programming videos so free
02:05 - videos but I also have a paid course
02:07 - where I can dedicate a lot more of my
02:09 - time of course and where you can learn
02:11 - directly from me ask questions you can
02:14 - get my help and I can take you from
02:16 - beginner to expert in the shortest
02:19 - amount of time so if you want to learn
02:21 - how to make real applications and if you
02:22 - want to start a successful career as a
02:25 - programmer I will leave more details in
02:27 - the description and the fastest people
02:30 - who enroll in the course will get a
02:32 - special discount also we offer 7-Day
02:35 - money back guarantee which means that if
02:37 - you start the course try it out for 7
02:40 - days and you don't like it for any
02:42 - reason you think that it's not worth the
02:44 - money that you are paying you can get a
02:46 - full refund no questions asked and the
02:49 - reason why I can offer this is because
02:51 - I'm absolutely sure that the lessons
02:53 - that I have prepared are going to
02:55 - completely transform your career and
02:58 - also I have seen the results of other
03:00 - students who have already enrolled in
03:02 - the course so with that being said let's
03:05 - continue with the video and if you're
03:06 - interested you can find more details in
03:08 - the description here I have some code
03:10 - that we will need for this video I will
03:12 - also pin it in the comments so that you
03:14 - can also copy it and use it and now I'm
03:17 - going to explain what this code does so
03:20 - I have created class called movie and it
03:23 - has three public properties those are
03:26 - name genre and rating I have also
03:30 - created one parameterized Constructor
03:33 - that is this Constructor here so it
03:36 - receives three parameters name genre and
03:39 - rating and then based on those three
03:41 - parameters I am constructing or
03:44 - initializing that movie so this here is
03:47 - parameterized Constructor now if you
03:50 - know about Constructors you know that
03:52 - when you start creating your own
03:54 - Constructors you lose the default
03:56 - Constructor that you get by default so
03:59 - so what you need to do is you need to
04:02 - create your own default Constructor and
04:04 - that is what I have done here now you
04:07 - can create default Constructor which
04:08 - will be completely empty like this or
04:11 - you can assign your own default values
04:14 - so here I have said that name is going
04:15 - to be empty string genre is going to be
04:18 - empty string and rating is going to be
04:20 - zero whichever you prefer so once more
04:23 - here we here we have parameterized
04:24 - Constructor and here we have default
04:27 - Constructor okay so if I go to my main
04:31 - function you will notice that here I'm
04:33 - creating movie one and Movie 2 and I am
04:37 - invoking parameterized Constructor here
04:40 - and here and then here I'm creating
04:43 - Movie 3 and since I'm not passing any
04:46 - values that means that here I will be
04:48 - invoking default Constructor so now
04:51 - let's prove that so if I put breakpoint
04:55 - on this line here where I'm creating
04:57 - movie one and I start the app ation the
05:00 - execution will be paused on that line so
05:03 - now if I press
05:04 - f11 as you can see it is going to take
05:08 - us to the parameterized Constructor so
05:10 - if I press F10 F10 F10 as you can see
05:14 - this new object is going to be
05:16 - constructed based on the values that I
05:20 - have passed here okay so let's stop the
05:23 - application and then if I remove this
05:26 - breakpoint but I put another breakpoint
05:28 - on this line here when I'm creating
05:30 - Movie 3 and I start my application again
05:33 - the execution is going to be paused here
05:36 - so if I press f11 as you can see this
05:39 - time it is taking us to the default
05:42 - Constructor which will assign these
05:44 - default values to the properties of our
05:47 - movie so if I press F10 as you can see
05:50 - name will be empty string genre will be
05:52 - empty string and then rating will lose
05:54 - this default integer value and it will
05:57 - become zero okay so that is when this
06:01 - parameterized Constructor is invoked and
06:03 - then when default Constructor is invoked
06:05 - so I'm going to collapse these two
06:07 - because there are two more important
06:10 - things that I want to show you and those
06:11 - are copy Constructor and assignment
06:14 - operator so as we said copy Constructor
06:18 - which is this method here is invoked
06:21 - when you want to create a new object
06:24 - based on an existing object for example
06:27 - this line here where I'm creating Movie
06:30 - 4 I want to copy movie one and based on
06:34 - that I want to create Movie 4 and that
06:37 - is exactly when we use copy Constructor
06:41 - so if I remove this breakpoint and I put
06:44 - another breakpoint here on this line
06:47 - when I'm creating movie for if I run my
06:50 - application let's see what is going to
06:52 - happen so the execution was paused here
06:54 - if I press f11 as you can see it will
06:58 - take us to copy Constructor method so
07:02 - now let's see what this copy Constructor
07:04 - does so if I press F10 it is going to
07:07 - start executing our copy Constructor and
07:10 - what we want to do here is we want to
07:12 - create new object called Movie 4 based
07:16 - on object called movie one so here as
07:19 - original parameter we will get our movie
07:21 - one with all of its properties so Dark
07:24 - Knight action
07:26 - 9.5 and what we want to do is we want to
07:29 - create our new object which is currently
07:31 - empty so all of its properties are empty
07:35 - we want to construct it based on this
07:37 - original that we have received so if I
07:40 - press F10 name will be the Dark Knight
07:43 - and then if I press F10 again as you can
07:45 - see genre will become action and then
07:48 - currently rating has the default value
07:50 - of integer but if I press F10 again it
07:53 - will have the same value as our original
07:57 - object okay so that is how you copy this
08:01 - original and construct a new object
08:04 - based on that original now something
08:07 - interesting here is this part so here we
08:10 - are receiving one parameter it is
08:13 - constant and it is passed as a reference
08:17 - and the reason for this is following if
08:20 - you know anything about passing
08:22 - parameters to functions you know that
08:24 - there are two ways to do that you can
08:26 - pass by value and you can pass by
08:28 - reference so here I'm passing the
08:31 - address of the original object which
08:33 - means that whatever this method here
08:35 - does it will work on the original itself
08:39 - so then we are in danger that it is
08:41 - going to change the original so in order
08:44 - to prevent that what we can do is we can
08:46 - simply say const so I'm passing the
08:49 - original object the address of the movie
08:52 - one so whatever you do here you are
08:55 - performing it on the original movie but
08:57 - in order to make sure that you are not
08:59 - going going to change it I will say that
09:01 - it is constant and now we cannot do
09:04 - something like this we cannot say
09:06 - original do name is equal to test okay
09:10 - but if we didn't have this const part
09:14 - then we would be in danger that this can
09:17 - happen so in order to prevent this we
09:20 - simply add const and as you can see now
09:22 - we get this little red squiggly which
09:24 - means hey you cannot change const
09:27 - objects so let's delete this code here
09:29 - and once more here we are passing the
09:31 - address of the original with the help of
09:33 - this little ENT now another way is to
09:37 - pass this parameter by value and that
09:41 - would be like this so we don't need % we
09:44 - don't need const and in this case we are
09:47 - passing a copy so this method here is
09:50 - going to create its own copy and
09:52 - whatever it does it will do that on the
09:54 - copy but here is something very tricky
09:58 - and that is the fact that
09:59 - here when we are creating the copy we
10:03 - would need copy Constructor so that
10:05 - would create circular dependency because
10:08 - this method here is the copy Constructor
10:11 - and in order to create copy Constructor
10:14 - you need copy Constructor so that would
10:16 - be problematic and that is the reason
10:19 - why we cannot pass this parameter by
10:23 - value so we can only pass it by
10:25 - reference and in order to prevent any
10:28 - changing of the original We simply say
10:31 - that it is going to be const like this
10:34 - so this is how copy Constructor is going
10:37 - to look like okay so if I press F10
10:41 - again it is going to take me here and
10:43 - now when I hover over my Movie 4 as you
10:46 - can see it has the same properties as
10:50 - movie one because we have used movie one
10:53 - to create Movie 4 and that is how copy
10:56 - Constructor Works once more when you are
10:59 - creating completely new object based on
11:03 - an existing object copy Constructor will
11:06 - be invoked okay so let's stop our
11:09 - application and another method that I
11:11 - want to show you is assignment operator
11:14 - and that is this method here so here is
11:17 - how assignment operator looks like and
11:19 - here is how copy Constructor looks like
11:22 - now let's collapse this and let's see
11:25 - this line here because this line here is
11:28 - when we invoke assignment operator so
11:31 - here we are trying to assign new values
11:35 - to Movie 4 and those would be the same
11:37 - values that movie 2 has so we are trying
11:40 - to replace what movie 4 currently is
11:44 - with whatever is inside Movie 2 so if I
11:48 - remove this breakpoint but put new
11:50 - breakpoint on this line here and I start
11:53 - my program as you can see the execution
11:55 - will be paused on this line here so if I
11:57 - press F1 11 it is going to take us to
12:01 - assignment operator so as you can see
12:05 - assignment operator looks very similar
12:07 - to copy Constructor here we are
12:10 - receiving the same parameter so we
12:12 - receive original movie and that is being
12:15 - passed by reference and then in order to
12:17 - prevent any changing of that original we
12:20 - make it constant and then here we are
12:23 - going to change the values of name genre
12:26 - and rating based on these values that we
12:29 - have received as a parameter so we are
12:31 - going to change values of Movie 4 based
12:34 - on Movie 2 so if I press F10 F10 again
12:39 - as you can see name becomes The Lion
12:41 - King and then genre is currently action
12:43 - but when I execute this line it is going
12:45 - to be animated because that is what is
12:48 - inside this genre here and then rating
12:51 - is currently 9.5 but if I press F10 it
12:54 - is going to become eight because that is
12:56 - the rating of The Lion King which is the
12:58 - original movie that we have received as
13:01 - a parameter here so at the end of
13:03 - assignment operator we return a pointer
13:06 - to this and this is the movie that we
13:08 - have just changed so since we return a
13:11 - pointer the return type of the function
13:14 - needs to be the address so this function
13:16 - returns address of the movie and
13:19 - whatever it returns here that will be
13:22 - assigned to our movie for so if I press
13:26 - F10 again I'm going to leave this
13:29 - assignment operator and now if I hover
13:31 - over Movie 4 as you can see it has the
13:35 - same properties as our Movie 2 because
13:38 - here we have invoked assignment operator
13:40 - and we replaced everything that movie 4
13:43 - was holding with the values that movie 2
13:46 - is holding now something interesting
13:49 - related to this assignment operator
13:51 - method is this part here so here we are
13:54 - passing the original movie and we are
13:57 - passing its address which means the
13:59 - address of movie two so whatever this
14:02 - method here does in case that it changes
14:05 - anything on the original that is also
14:07 - going to be reflected here on movie two
14:10 - which should not happen so in order to
14:11 - prevent that from happening we simply
14:14 - add this const part and that means that
14:17 - our assignment operator method cannot
14:20 - change this original even though it has
14:22 - the address of the original itself now
14:26 - in this case when we are working with
14:28 - assignment operator you don't have to do
14:30 - it like this when we were talking about
14:33 - copy Constructor we said that this is
14:36 - not possible it is not possible to pass
14:38 - by value because in this situation we
14:41 - are creating a copy of this object and
14:45 - then this method is working on that copy
14:47 - and in copy Constructor that is not
14:49 - possible because it creates that
14:51 - circular dependency where in order to
14:54 - create copy Constructor you need to copy
14:57 - an object so that is not possible but in
15:00 - case of an assignment operator that is
15:02 - possible so here we can create a copy of
15:06 - this object that we are passing but it
15:08 - is also redundant so there is no need to
15:11 - invoke copy Constructor here and better
15:14 - option is to pass the address of the
15:17 - original and then in order to prevent
15:19 - this method from changing the original
15:21 - you simply make it const so that is also
15:25 - another difference between assignment
15:26 - operator and copy Constructor in copy
15:29 - Constructor you absolutely have to do
15:31 - this and in assignment operator it is
15:34 - recommended to do this but once more
15:37 - let's remember the biggest and the most
15:40 - important difference between copy
15:42 - Constructor and assignment operator
15:45 - let's stop the application so as I said
15:47 - the biggest and most important
15:49 - difference is that copy Constructor is
15:52 - invoked when you want to create a
15:54 - completely new object and initialize it
15:58 - with the values of an existing object so
16:00 - here we are invoking copy Constructor
16:03 - and then assignment operator is going to
16:06 - be invoked when you want to change the
16:08 - values of already existing object and
16:11 - replace them with values of some other
16:14 - object so that is the most important
16:17 - difference between assignment operator
16:19 - and copy Constructor so let's remove
16:21 - this breakpoint and now I'm going to
16:23 - explain one very tricky situation that
16:26 - is hard to understand for most beginners
16:29 - so please have in mind what I have just
16:31 - explained about the difference between
16:33 - copy Constructor and assignment operator
16:36 - and with that difference in mind reply
16:39 - to the following question if I write
16:42 - this line of code what do you think what
16:46 - it will invoke copy Constructor or
16:49 - assignment operator so please pause the
16:52 - video and write your reply in the
16:54 - comment section and then you can watch
16:56 - my explanation so this line of code is
17:00 - going to invoke copy Constructor even
17:04 - though it has this assignment symbol and
17:08 - this is what confuses a lot of beginners
17:11 - a lot of beginners would ask now okay
17:13 - but why is it invoking copy Constructor
17:16 - when you can clearly see this assignment
17:19 - symbol why isn't it then invoking
17:21 - assignment operator and the reason for
17:23 - that is as I already explained whenever
17:27 - you are creating new object completely
17:30 - new object that is exactly what we are
17:33 - doing here we are creating new movie it
17:36 - doesn't matter if you put this symbol
17:38 - here or if you use these parentheses in
17:41 - both cases copy Constructor will be
17:44 - invoked so that is the reason why this
17:47 - line is invoking copy Constructor even
17:50 - though you have this assignment symbol
17:55 - and then later when we try to change the
17:57 - value of that already existing movie in
18:01 - this line we will invoke assignment
18:04 - operator so this line here invokes copy
18:07 - Constructor because we are creating
18:09 - completely new object based on an
18:12 - existing object and then this line here
18:15 - is simply replacing the values of
18:17 - already existing object so here we are
18:20 - invoking assignment operator and to
18:23 - prove this let's start our application
18:25 - let's put breako on this line here
18:29 - and if I start the application the
18:31 - execution is going to be paused here so
18:33 - when I press f11 as you can see it is
18:37 - going to take us to copy Constructor
18:40 - even though we have this assignment
18:42 - symbol as I already explained this line
18:45 - is going to invoke copy Constructor okay
18:48 - let's stop the program and now I will
18:50 - remove this breakpoint and I will put
18:52 - another breakpoint on this line here and
18:55 - now if I run the program it will be
18:58 - pause here so if I press f11 this time
19:01 - as you can see it is taking us to the
19:04 - assignment operator okay so let's remove
19:08 - this break point and let's go very
19:10 - quickly once more through all of these
19:13 - examples so we said that this line here
19:16 - is invoking parameterized Constructor so
19:20 - here I will put p c and then this line
19:23 - here the same so again p c and then this
19:28 - line here we are not passing any
19:30 - parameters we are just creating a new
19:32 - object so this line will invoke default
19:36 - Constructor so DC and then here we are
19:39 - creating a new movie based on already
19:42 - existing movie so this line is going to
19:45 - invoke copy Constructor so CC and then
19:50 - here we are simply changing or replacing
19:53 - values of already existing movie with
19:56 - the values from some other movie so so
19:59 - this line here is going to invoke
20:01 - assignment operator as SS S no AO so
20:08 - this line here is going to invoke
20:10 - assignment operator and you are probably
20:12 - wondering what this line here does and
20:16 - this line here does absolutely the same
20:19 - as this line here and this is just more
20:23 - explicit way to invoke assignment
20:25 - operator because what assignment
20:27 - operator is it is just just overloaded
20:30 - operator and I have already created
20:32 - another video where I talk about
20:33 - operator overloading that is this video
20:36 - here I will also put it in the
20:37 - description and there you can learn how
20:40 - you can overload operators but basically
20:42 - what it means is that this operator and
20:45 - then assignment sign is simply a method
20:48 - that we are invoking on movie for object
20:51 - and we are passing this parameter and as
20:54 - you can see that is what happens here so
20:57 - it is a function that has this name
20:59 - operator and then assignment and then
21:02 - here is the parameter that we are
21:04 - receiving and then whatever this method
21:07 - here returns that will be assigned to
21:09 - this movie for object so basically this
21:13 - line here and this line here they do
21:15 - absolutely the same but this approach
21:18 - here is not used very often because this
21:20 - approach here looks a lot more
21:22 - understandable and easier to read but
21:25 - you can use whichever you prefer this
21:27 - one or this one I am going to comment
21:30 - this one because this is the approach
21:33 - that you are going to see more often but
21:35 - remember they do absolutely the same
21:38 - thing and then this line here is
21:41 - invoking copy Constructor even though we
21:44 - have this assignment symbol as we
21:47 - already said whenever you are creating
21:49 - new object based on an existing object
21:53 - you invoke copy Constructor so here I
21:55 - will put CC and then here we are
21:58 - changing or replacing the values that
22:01 - are inside Movie 5 with the values of
22:04 - Movie 2 so here we are invoking
22:07 - assignment operator okay now something
22:10 - interesting that I didn't tell you
22:11 - before is that in our current situation
22:14 - with the code that we currently have we
22:17 - don't need to create our own copy
22:19 - Constructor and we also don't need to
22:21 - create our own assignment operator
22:24 - because our compiler is smart enough to
22:26 - do that work on its own own but as soon
22:30 - as you start adding pointers to your
22:33 - class in that situation you absolutely
22:36 - need to create your own copy Constructor
22:39 - and your own assignment operator so now
22:42 - let's see how that is going to look like
22:44 - so let's say that I also want to know
22:47 - which actors are acting in each movie so
22:50 - I will add those properties here I will
22:52 - add int property and call it actors
22:55 - counter
22:59 - okay and then I want to add another
23:01 - property and that is going to be string
23:04 - pointer called
23:06 - actors so this property here is string
23:10 - pointer which means that it is going to
23:12 - point to the array of actors where we
23:14 - are going to store names of all of the
23:17 - actors and here we are going to hold the
23:19 - counter so that we know how many actors
23:22 - this movie has and how many elements our
23:26 - array has and as I said said as soon as
23:29 - you start adding pointers to your class
23:33 - you need to be a lot more careful
23:35 - because then you will have to create
23:38 - your own copy Constructor you will have
23:40 - to create your own assignment operator
23:42 - and also you will have to take care of
23:44 - deallocating that memory which means
23:46 - freeing that memory giving it back to
23:48 - the operating system so that it can be
23:51 - reused for some other application and
23:53 - that means that you will have to also
23:55 - create D structure so let's do that part
23:58 - part inside this parameterized
24:00 - Constructor I am going to say that
24:03 - initially when I first create a movie
24:06 - actors's counter is going to be equal to
24:09 - zero and I also want to initialize this
24:13 - array so I will say actors is going to
24:16 - be equal to new string array that has
24:21 - this many elements so new string array
24:25 - that holds this many elements so that is
24:29 - the change that we need to make inside
24:31 - our Constructor we need to allocate the
24:34 - memory for actors that we want to store
24:36 - for each movie and then also since we
24:39 - have allocated memory inside our
24:41 - Constructor we need to create D structor
24:45 - where we are going to deallocate memory
24:48 - so this is how D structor is going to
24:50 - look like you put this TAA symbol and
24:53 - then you use the same name for the D
24:56 - structor as the name of the class class
24:59 - it does not have any parameters and then
25:02 - here what you need to do is you need to
25:04 - deallocate everything that you have
25:06 - allocated inside Constructor so here you
25:09 - say please delete the array of
25:14 - actors like this and also I am going to
25:17 - null this array so I will say that
25:20 - actors is null PTR so that we don't hold
25:25 - the address in memory that is no longer
25:27 - ours with this we have we have simply
25:29 - cleared that memory and now I'm simply
25:30 - saying hey this pointer which was
25:32 - previously holding the address in the
25:34 - memory where our actors were stored it
25:37 - is no longer going to have that address
25:40 - I will simply null that pointer so this
25:43 - is how our D structor is going to look
25:45 - like and then we need to make changes to
25:47 - two more places we need to change our
25:49 - copy Constructor and we need to change
25:52 - assignment operator and I'm going to
25:54 - explain those two on a visual example so
25:58 - let's talk about copy Constructor
26:01 - imagine the following situation we have
26:03 - movie One its name is The Dark Night
26:06 - genre is action rating is 9.5 and then
26:10 - actors counter is two so we have two
26:13 - actors and then this actor's pointer it
26:16 - is just pointing to an array somewhere
26:18 - in our memory here is the address of
26:21 - that array so that is this array here
26:24 - and that array holds two elements two
26:27 - actors Christian B and hit Ledger and if
26:30 - you know about arrays you know that the
26:32 - indexation of arrays starts with zero so
26:35 - this first element has the index of zero
26:37 - and the second element has the index of
26:39 - one so that is how our movie one looks
26:42 - like now imagine that you want to do
26:45 - something like this please create movie
26:47 - six based on movie one so here we are
26:50 - invoking copy Constructor and this here
26:54 - is how the code of our copy Constructor
26:57 - should look like so now we are going to
27:00 - go line by line through this code and
27:02 - explain what is happening in memory when
27:06 - each line is executed so inside this
27:08 - copy Constructor we have received the
27:11 - original which is our movie one and
27:14 - based on that movie one we want to
27:17 - construct or to initialize movie six so
27:20 - let's go line by line and see what is
27:23 - going to happen so the first line says
27:25 - name is equal to original. name so I
27:28 - will simply copy that like this and then
27:32 - genre is going to be original. genre so
27:34 - let's copy that part as well and then
27:37 - rating is original. rating I will copy
27:41 - that part also and then actors counter
27:44 - is original actors counter let's copy
27:47 - that part as well and then we come to
27:50 - this line here here it says that actors
27:53 - is going to allocate new array of
27:55 - strings so let's do that let's allocate
27:57 - new memory let's say that I will
28:00 - allocate that memory here so the address
28:02 - is going to be 00 BB FF okay and what
28:07 - this actors's pointer holds is just that
28:11 - address now here on that address I am
28:14 - allocating new array that has this many
28:17 - elements so here we have value of two so
28:19 - that means two
28:22 - elements okay so we have allocated new
28:24 - array that holds two elements so then
28:27 - with this for Loop what we want to do is
28:29 - we want to iterate through those
28:31 - elements and we want to copy each
28:35 - element of our original object into this
28:38 - newly created object so we copy this
28:42 - first element here and then this second
28:44 - element here so that is what this copy
28:48 - Constructor does and how it copies first
28:52 - object into the second object so that is
28:56 - how our movie six is going to be
28:58 - constructed based on movie one so now I
29:01 - will go back to my visual studio and I
29:04 - will write this code for my copy
29:06 - Constructor so your copy Constructor
29:09 - should look like this so now let's see
29:11 - what kind of changes we need to make to
29:13 - our assignment operator which currently
29:16 - looks like this and I'm also going to
29:19 - explain that on a visual example with
29:21 - the help of excel so this is how
29:24 - assignment operator should look like and
29:26 - as you can see it is a a little bit
29:28 - different than copy Constructor and now
29:31 - we are going to explain line by line how
29:34 - assignment operator should behave so
29:37 - this is the situation that we have we
29:39 - have movie one with these values so it
29:42 - is dark knight genr is action rating is
29:45 - 9.5 it has two actors and then the array
29:48 - of actors is this array here on this
29:52 - address so we have Christian Bale and
29:54 - heat Ledger and then we have another
29:56 - movie movie two its name is The Lion
29:59 - King it is animated movie its rating is
30:02 - eight it has three actors and then
30:05 - actors are stored on this address here
30:08 - so we have three actors Salina Noak
30:10 - Denzel Washington and Leonardo DiCaprio
30:13 - um these are completely wrong for The
30:15 - Lion King but let's say that these are
30:17 - actors who act in The Lion King so what
30:20 - we want to do is this line here so we
30:23 - want to say please change Movie 2 so
30:27 - that it has the same values as movie one
30:29 - so to movie two I'm going to assign
30:32 - whatever movie one holds so let's see
30:35 - how we are going to do that based on
30:37 - this code here so I will skip this first
30:40 - line here because I will explain that
30:42 - part later it is going to be easier for
30:44 - you to understand so what I want to do
30:46 - is this line here name is equal to
30:49 - original. name so I simply copy the name
30:52 - of movie one and I put that as the name
30:54 - for my movie two okay and then genre is
30:57 - original genre so let's do that part as
31:00 - well so this movie is going to be action
31:03 - and then rating is original do rating so
31:07 - 9.5 here and then actors counter will be
31:11 - whatever we have here so instead of
31:13 - three we will have two actors and then
31:17 - this part of the code here says please
31:19 - delete the array of actors which means
31:23 - that first I have to deallocate this
31:26 - array here so I need to delete that so
31:30 - that we can free that memory so that it
31:32 - can be reused by some other application
31:35 - and only then I can allocate new array
31:38 - of strings with this many elements so
31:41 - only then I can say please allocate new
31:44 - array the address is going to be for
31:46 - example 00 CC
31:49 - FF and then this pointer here is going
31:52 - to point to that new address and here
31:56 - I'm going to allocate new array that has
31:59 - this many elements so here I will have
32:02 - array of two elements and then I will
32:05 - use four Loop in order to count from
32:07 - zero to actors counter and in each
32:10 - iteration I am going to copy one actor
32:14 - from this array here into this array
32:16 - here and then in the next iteration I
32:18 - will copy this actor here okay so now I
32:22 - have created movie two based on movie
32:26 - one so as we already said the most
32:29 - important difference between copy
32:31 - Constructor and assignment operator is
32:33 - we use copy Constructor when we want to
32:35 - create completely new object based on
32:38 - another object and we use assignment
32:41 - operator when we want to change or
32:44 - replace values of already existing
32:47 - object with the values of some other
32:50 - object and when we are talking about
32:52 - differences in code then the difference
32:54 - is this line here when you are writing
32:56 - the code for assign assignment operator
32:58 - then you need to delete or deallocate
33:02 - the memory that the previous object was
33:04 - using before you allocate new memory
33:08 - otherwise you are going to have memory
33:10 - leaks which means that if you did not
33:12 - deallocate this memory here and you
33:15 - simply allocated this memory then your
33:17 - operating system would not be able to
33:20 - reuse this memory and to give it to some
33:22 - other application so that application
33:24 - can use it so once more when you are
33:26 - writing the code for assignment operator
33:28 - you first need to deallocate the memory
33:31 - that previous object was holding and
33:34 - then you can allocate new memory and in
33:36 - that new memory you can copy new
33:38 - elements and new things that you want to
33:40 - store in that object and with copy
33:43 - Constructor we don't need to do that
33:45 - because as we said when we are using
33:47 - copy Constructor we are creating
33:49 - completely new object which was not
33:51 - holding any memory previously okay
33:55 - another important thing that I promise
33:56 - to explain is
33:58 - this line here if the address of
34:01 - original is not the same as this so what
34:06 - does this line here do this line will
34:08 - prevent any problems that could happen
34:11 - in case that programmer tries to do this
34:14 - movie one is equal to movie one if we
34:19 - don't have this line and we try to do
34:22 - something like this we will get a
34:24 - problem that is caused by something
34:26 - called self destruction so let me
34:29 - explain what that means so if we try to
34:32 - do this and we don't have this line here
34:36 - which checks if we are trying to assign
34:38 - the object to itself then the following
34:41 - would happen so name will be equal to
34:44 - original. name so we simply copy this
34:47 - code here and then paste it to the same
34:49 - place and then genre is original do
34:52 - genre so again I copy this and I paste
34:55 - it to the same place rating will be
34:57 - original rating again copy paste to the
35:01 - same place actors counter is original do
35:03 - actors counter again copy paste and then
35:07 - we come to this line here which says
35:09 - delete array of actors so what we do is
35:13 - this okay and then here it says please
35:16 - allocate new array that has this many
35:19 - actors so I allocate new array the
35:22 - address of the new array is going to be
35:23 - 0 DD
35:26 - FF and I want to allocate the array that
35:29 - has two elements so then what I do is I
35:33 - iterate and I copy the elements from
35:35 - this array here into this array here but
35:38 - I don't have anything inside this array
35:41 - because what happened was self
35:44 - destruction what I did in this line here
35:47 - is I deleted my array and now I have a
35:50 - problem so in order to prevent that
35:53 - problem from happening what you do is at
35:55 - the beginning of your assignment
35:56 - operator you simply say hey if the user
35:59 - is trying to assign the same object to
36:03 - itself then please don't do any of this
36:07 - code okay or in other words what this
36:10 - line of code here does is it says do
36:14 - this code here only if the user is not
36:18 - trying to assign the object to itself so
36:22 - this is how your assignment operator
36:24 - should look like I will write this code
36:26 - into my assignment operator in visual
36:28 - studio and then I will be back so here
36:31 - is how the assignment operator code
36:33 - should look like let's collapse this and
36:36 - then here is how our copy Constructor
36:39 - code should look like now in order to be
36:42 - able to test this I need to create two
36:45 - more functions one function that will
36:47 - allow us to add new actor to the movie
36:50 - and another function that will allow us
36:52 - to print all of the details about the
36:55 - movie so I'm going to add those
36:57 - functions and then I will be back to
36:59 - explain so I have added these two
37:02 - methods add actor and print info so now
37:06 - I'm going to explain what they do and I
37:08 - will explain this method first so let's
37:12 - go back to Excel and let's see what this
37:14 - method here does line by line so here is
37:17 - our method and then this is our
37:19 - situation so what I want to be able to
37:22 - do with this method is something like
37:24 - this so I want to be able to say movie
37:26 - One do add actor and then I pass the
37:29 - name of the actor and what this method
37:32 - here should do is it should add that
37:34 - actor to this movie so now let's see
37:38 - line by line how this method will
37:40 - perform that job so this first line here
37:43 - says to create a pointer called new
37:46 - actors so let's do that here let's say
37:49 - new
37:51 - actors okay and this pointer is going to
37:54 - point to the new memory that I will
37:56 - allocate so here I will allocate new
37:59 - array of strings that will have this
38:01 - many elements actors counter plus one so
38:05 - that is 2 + 1 which means that I will
38:07 - allocate an array that has three
38:10 - elements okay so the address of this
38:13 - array is going to be 0 0 BB FF and this
38:17 - pointer will point to this address and
38:20 - then the indexes will be 0 1 and two
38:24 - okay so then we perform this for Loop
38:27 - here so what this for Loop does is it
38:30 - simply assigns to each element of my new
38:33 - array the actor from my old array so
38:36 - here I will say Christian Bale and then
38:39 - here I will copy heat Ledger and then
38:42 - the last element will remain empty so
38:46 - then in this line of code here to the
38:48 - last element so new actors of actors
38:52 - counter so new array of this index we
38:56 - will assign our new actor and that is
38:58 - Salina nurak so let's put that
39:02 - here okay so we have assigned new actor
39:06 - here and then we can delete our old
39:09 - array of actors so we can deallocate
39:13 - this array here to free the memory and
39:16 - then to our actors pointer which is this
39:19 - pointer here we will assign new actors
39:22 - so now instead of holding this address
39:25 - our actors pointer will hold this
39:28 - address and then we will simply
39:30 - increment the counter of actors by one
39:33 - so 2 + 1 will be equal to three and now
39:37 - we have three actors and the address of
39:40 - the actors array is this address here so
39:42 - that means that our movie has these
39:45 - three actors so that is how this method
39:49 - here should behave and now you can copy
39:52 - this method and paste it in your visual
39:56 - studio and then the second method that I
39:58 - have created is print info and we use
40:01 - this method in order to print the
40:03 - information about the specific movie so
40:05 - we say movie one. print info and inside
40:09 - this method we print the name genre
40:11 - rating and then we say actors and we
40:14 - iterate through our array of actors and
40:17 - print each actor of that movie and one
40:21 - important thing is that both of these
40:23 - methods are created as member methods of
40:27 - of this class which means that they are
40:29 - inside the class so now let's test the
40:33 - code that we have written so let's
40:35 - delete this code from our main function
40:38 - and what I want to do here is I want to
40:41 - add some actors to our movie one so
40:44 - movie 1. add actor I want to add
40:49 - Christian
40:51 - Bale okay and then I also want to add
40:54 - heat Ledger
40:59 - okay like this so now what I can do is I
41:02 - can say movie
41:04 - One print info and if I start the
41:09 - program let's see what is going to be
41:11 - the result so we get the name of the
41:13 - movie genre rating and then here are the
41:17 - actors of the movie so now let's test
41:20 - copy Constructor so what I can do is I
41:23 - can create a new movie let's call it
41:26 - movie 3 and to this movie I will simply
41:31 - assign the same values that movie 1 has
41:35 - so this code here is going to invoke
41:37 - copy Constructor which means that if I
41:40 - say movie 3. print info I should get the
41:46 - same information that movie one has so
41:49 - let's start the application okay so this
41:52 - is our movie one and then this here is
41:56 - our movie three and as you can see our
41:58 - copy Constructor works because our Movie
42:01 - 3 has the same information as movie one
42:03 - because we used copy Constructor in
42:05 - order to create this movie based on this
42:08 - movie okay so let's also test assignment
42:11 - operator so here after I create my Movie
42:14 - 3 with the same values that movie one
42:17 - has what I want to do is I want to
42:19 - change them I want to say that movie 3
42:22 - is equal to Movie 2 like this so then if
42:27 - I print Movie 3 let's see what we are
42:29 - going to get okay so here we get the
42:32 - Lion King animated and rating is8 and it
42:35 - does not have any actors which means
42:38 - that our assignment operator works as
42:41 - well and one last thing that I want to
42:43 - do is I also want to assign some actors
42:47 - to Movie 2 so I want to say movie 2. add
42:51 - actor and here let's say Salina
42:55 - norak okay so that is is me and then
42:59 - let's also say Denzel Washington and
43:02 - then let's also add another actor let's
43:05 - say Leonardo
43:08 - decaprio okay so I have assigned three
43:11 - actors to my movie to so here I'm
43:14 - creating my movie three based on movie
43:16 - one but then I'm changing its value so
43:19 - that it has the same values as Movie 2
43:22 - has so this name this genre this rating
43:26 - and then the these actors here so when I
43:29 - print Movie 3 let's see what we are
43:31 - going to get okay and as you can see
43:34 - Movie 3 is Lion King animated movie
43:37 - rating is eight and then these are the
43:40 - actors so this means that our assignment
43:43 - operator works as well okay and then
43:47 - once more the most important thing to
43:49 - remember is the difference between copy
43:51 - Constructor and assignment operator so
43:54 - copy Constructor will be invoked when
43:56 - you are creating completely new object
43:59 - based on another object and then
44:02 - assignment operator will be invoked when
44:05 - you are simply replacing the values of
44:08 - already existing object with some other
44:11 - object and please don't be fooled by
44:14 - something like this movie and then let's
44:17 - say Movie 4 is equal to Movie 2 so this
44:22 - here even though it looks like
44:23 - assignment operator is still invoking
44:26 - copy Constructor because we are creating
44:30 - completely new object based on another
44:33 - object and then later if you want to
44:36 - change the value of this movie 4 and you
44:38 - want to say for example Movie 4 is equal
44:41 - to something else then this line here
44:44 - will invoke assignment operator okay so
44:48 - I hope that this video helped you to
44:50 - understand the difference between copy
44:51 - Constructor and assignment operator if
44:54 - you want more similar videos then simply
44:56 - give this video a thumbs up so that I
44:58 - know to create uh more videos like this
45:00 - one in the future and if you have any
45:02 - questions you can leave those in the
45:04 - comment section and if you want to learn
45:06 - practical programming you want to learn
45:07 - how to build real world applications and
45:09 - start a successful career as a
45:12 - programmer and you also enjoy my
45:14 - teaching style and want me to be your
45:16 - mentor on that journey and take you from
45:18 - beginner to expert then you can enroll
45:21 - in my practical programming course more
45:23 - details will be in the description so I
45:26 - have created the entire plan for you all
45:28 - of the exercises tasks lessons
45:31 - everything that you need to do is going
45:33 - to be on one place and your job is just
45:35 - to follow that plan and if you do so if
45:39 - you stay consistent watch all of the
45:41 - lessons do all of the exercises I'm sure
45:43 - that you are going to achieve your goals
45:45 - and as I said we also have a special
45:48 - discount so the fastest people who
45:49 - enroll in the course using the link in
45:52 - the description will also be able to
45:53 - save some money and if you are not sure
45:55 - if this course is for you or not then
45:57 - you can try it out for seven days and if
46:00 - for any reason you think that it is not
46:02 - worth your money you can get a full
46:04 - refund so you really have nothing to
46:07 - lose but a lot to gain this course can
46:10 - completely transform your future and it
46:12 - can help you to start a very successful
46:15 - career as a programmer so thank you very
46:18 - much for watching this video and I going
46:20 - to see you in another one bye

Cleaned transcript:

hi guys and welcome to my channel in this video we are going to talk about differences between assignment operator and copy Constructor these two are very similar because they are both used in order to let's say initialize one object based on another object and because they are very similar they create a lot of confusion because there are also some very important differences between assignment operator and copy Constructor and the most important difference is copy Constructor is used when you are creating a new object completely new object based on another object on the other hand assignment operator is used when you are changing the values so replacing the values of already existing object based on another object so that is the most important difference between copy Constructor and assignment operator and in this video I'm going to show you on a practical example using the code that I have here the difference between those two and also some important tricks tips and errors that happen to beginners and before we jump into explaining this code here I would like to invite you to join my practical programming course where you are going to learn all of the skills necessary to start a successful career as a software developer so if you are tired because you cannot find a job or if you already have a job but you are dreaming of a really big career as a software developer then I'm 100% sure that the lessons that I've prepared tasks exercises the community that we have is definitely going to help you to learn coding to start your career and to discover your passion for programming I understand that learning to code can be overwhelming and hard and that's why I created this course to be interactive and engaging so that learning is fun and enjoyable also I believe that everyone should have the opportunity to learn coding and to take control of their future in their own hands and that's the reason why I'm creating these YouTube programming videos so free videos but I also have a paid course where I can dedicate a lot more of my time of course and where you can learn directly from me ask questions you can get my help and I can take you from beginner to expert in the shortest amount of time so if you want to learn how to make real applications and if you want to start a successful career as a programmer I will leave more details in the description and the fastest people who enroll in the course will get a special discount also we offer 7Day money back guarantee which means that if you start the course try it out for 7 days and you don't like it for any reason you think that it's not worth the money that you are paying you can get a full refund no questions asked and the reason why I can offer this is because I'm absolutely sure that the lessons that I have prepared are going to completely transform your career and also I have seen the results of other students who have already enrolled in the course so with that being said let's continue with the video and if you're interested you can find more details in the description here I have some code that we will need for this video I will also pin it in the comments so that you can also copy it and use it and now I'm going to explain what this code does so I have created class called movie and it has three public properties those are name genre and rating I have also created one parameterized Constructor that is this Constructor here so it receives three parameters name genre and rating and then based on those three parameters I am constructing or initializing that movie so this here is parameterized Constructor now if you know about Constructors you know that when you start creating your own Constructors you lose the default Constructor that you get by default so so what you need to do is you need to create your own default Constructor and that is what I have done here now you can create default Constructor which will be completely empty like this or you can assign your own default values so here I have said that name is going to be empty string genre is going to be empty string and rating is going to be zero whichever you prefer so once more here we here we have parameterized Constructor and here we have default Constructor okay so if I go to my main function you will notice that here I'm creating movie one and Movie 2 and I am invoking parameterized Constructor here and here and then here I'm creating Movie 3 and since I'm not passing any values that means that here I will be invoking default Constructor so now let's prove that so if I put breakpoint on this line here where I'm creating movie one and I start the app ation the execution will be paused on that line so now if I press f11 as you can see it is going to take us to the parameterized Constructor so if I press F10 F10 F10 as you can see this new object is going to be constructed based on the values that I have passed here okay so let's stop the application and then if I remove this breakpoint but I put another breakpoint on this line here when I'm creating Movie 3 and I start my application again the execution is going to be paused here so if I press f11 as you can see this time it is taking us to the default Constructor which will assign these default values to the properties of our movie so if I press F10 as you can see name will be empty string genre will be empty string and then rating will lose this default integer value and it will become zero okay so that is when this parameterized Constructor is invoked and then when default Constructor is invoked so I'm going to collapse these two because there are two more important things that I want to show you and those are copy Constructor and assignment operator so as we said copy Constructor which is this method here is invoked when you want to create a new object based on an existing object for example this line here where I'm creating Movie 4 I want to copy movie one and based on that I want to create Movie 4 and that is exactly when we use copy Constructor so if I remove this breakpoint and I put another breakpoint here on this line when I'm creating movie for if I run my application let's see what is going to happen so the execution was paused here if I press f11 as you can see it will take us to copy Constructor method so now let's see what this copy Constructor does so if I press F10 it is going to start executing our copy Constructor and what we want to do here is we want to create new object called Movie 4 based on object called movie one so here as original parameter we will get our movie one with all of its properties so Dark Knight action 9.5 and what we want to do is we want to create our new object which is currently empty so all of its properties are empty we want to construct it based on this original that we have received so if I press F10 name will be the Dark Knight and then if I press F10 again as you can see genre will become action and then currently rating has the default value of integer but if I press F10 again it will have the same value as our original object okay so that is how you copy this original and construct a new object based on that original now something interesting here is this part so here we are receiving one parameter it is constant and it is passed as a reference and the reason for this is following if you know anything about passing parameters to functions you know that there are two ways to do that you can pass by value and you can pass by reference so here I'm passing the address of the original object which means that whatever this method here does it will work on the original itself so then we are in danger that it is going to change the original so in order to prevent that what we can do is we can simply say const so I'm passing the original object the address of the movie one so whatever you do here you are performing it on the original movie but in order to make sure that you are not going going to change it I will say that it is constant and now we cannot do something like this we cannot say original do name is equal to test okay but if we didn't have this const part then we would be in danger that this can happen so in order to prevent this we simply add const and as you can see now we get this little red squiggly which means hey you cannot change const objects so let's delete this code here and once more here we are passing the address of the original with the help of this little ENT now another way is to pass this parameter by value and that would be like this so we don't need % we don't need const and in this case we are passing a copy so this method here is going to create its own copy and whatever it does it will do that on the copy but here is something very tricky and that is the fact that here when we are creating the copy we would need copy Constructor so that would create circular dependency because this method here is the copy Constructor and in order to create copy Constructor you need copy Constructor so that would be problematic and that is the reason why we cannot pass this parameter by value so we can only pass it by reference and in order to prevent any changing of the original We simply say that it is going to be const like this so this is how copy Constructor is going to look like okay so if I press F10 again it is going to take me here and now when I hover over my Movie 4 as you can see it has the same properties as movie one because we have used movie one to create Movie 4 and that is how copy Constructor Works once more when you are creating completely new object based on an existing object copy Constructor will be invoked okay so let's stop our application and another method that I want to show you is assignment operator and that is this method here so here is how assignment operator looks like and here is how copy Constructor looks like now let's collapse this and let's see this line here because this line here is when we invoke assignment operator so here we are trying to assign new values to Movie 4 and those would be the same values that movie 2 has so we are trying to replace what movie 4 currently is with whatever is inside Movie 2 so if I remove this breakpoint but put new breakpoint on this line here and I start my program as you can see the execution will be paused on this line here so if I press F1 11 it is going to take us to assignment operator so as you can see assignment operator looks very similar to copy Constructor here we are receiving the same parameter so we receive original movie and that is being passed by reference and then in order to prevent any changing of that original we make it constant and then here we are going to change the values of name genre and rating based on these values that we have received as a parameter so we are going to change values of Movie 4 based on Movie 2 so if I press F10 F10 again as you can see name becomes The Lion King and then genre is currently action but when I execute this line it is going to be animated because that is what is inside this genre here and then rating is currently 9.5 but if I press F10 it is going to become eight because that is the rating of The Lion King which is the original movie that we have received as a parameter here so at the end of assignment operator we return a pointer to this and this is the movie that we have just changed so since we return a pointer the return type of the function needs to be the address so this function returns address of the movie and whatever it returns here that will be assigned to our movie for so if I press F10 again I'm going to leave this assignment operator and now if I hover over Movie 4 as you can see it has the same properties as our Movie 2 because here we have invoked assignment operator and we replaced everything that movie 4 was holding with the values that movie 2 is holding now something interesting related to this assignment operator method is this part here so here we are passing the original movie and we are passing its address which means the address of movie two so whatever this method here does in case that it changes anything on the original that is also going to be reflected here on movie two which should not happen so in order to prevent that from happening we simply add this const part and that means that our assignment operator method cannot change this original even though it has the address of the original itself now in this case when we are working with assignment operator you don't have to do it like this when we were talking about copy Constructor we said that this is not possible it is not possible to pass by value because in this situation we are creating a copy of this object and then this method is working on that copy and in copy Constructor that is not possible because it creates that circular dependency where in order to create copy Constructor you need to copy an object so that is not possible but in case of an assignment operator that is possible so here we can create a copy of this object that we are passing but it is also redundant so there is no need to invoke copy Constructor here and better option is to pass the address of the original and then in order to prevent this method from changing the original you simply make it const so that is also another difference between assignment operator and copy Constructor in copy Constructor you absolutely have to do this and in assignment operator it is recommended to do this but once more let's remember the biggest and the most important difference between copy Constructor and assignment operator let's stop the application so as I said the biggest and most important difference is that copy Constructor is invoked when you want to create a completely new object and initialize it with the values of an existing object so here we are invoking copy Constructor and then assignment operator is going to be invoked when you want to change the values of already existing object and replace them with values of some other object so that is the most important difference between assignment operator and copy Constructor so let's remove this breakpoint and now I'm going to explain one very tricky situation that is hard to understand for most beginners so please have in mind what I have just explained about the difference between copy Constructor and assignment operator and with that difference in mind reply to the following question if I write this line of code what do you think what it will invoke copy Constructor or assignment operator so please pause the video and write your reply in the comment section and then you can watch my explanation so this line of code is going to invoke copy Constructor even though it has this assignment symbol and this is what confuses a lot of beginners a lot of beginners would ask now okay but why is it invoking copy Constructor when you can clearly see this assignment symbol why isn't it then invoking assignment operator and the reason for that is as I already explained whenever you are creating new object completely new object that is exactly what we are doing here we are creating new movie it doesn't matter if you put this symbol here or if you use these parentheses in both cases copy Constructor will be invoked so that is the reason why this line is invoking copy Constructor even though you have this assignment symbol and then later when we try to change the value of that already existing movie in this line we will invoke assignment operator so this line here invokes copy Constructor because we are creating completely new object based on an existing object and then this line here is simply replacing the values of already existing object so here we are invoking assignment operator and to prove this let's start our application let's put breako on this line here and if I start the application the execution is going to be paused here so when I press f11 as you can see it is going to take us to copy Constructor even though we have this assignment symbol as I already explained this line is going to invoke copy Constructor okay let's stop the program and now I will remove this breakpoint and I will put another breakpoint on this line here and now if I run the program it will be pause here so if I press f11 this time as you can see it is taking us to the assignment operator okay so let's remove this break point and let's go very quickly once more through all of these examples so we said that this line here is invoking parameterized Constructor so here I will put p c and then this line here the same so again p c and then this line here we are not passing any parameters we are just creating a new object so this line will invoke default Constructor so DC and then here we are creating a new movie based on already existing movie so this line is going to invoke copy Constructor so CC and then here we are simply changing or replacing values of already existing movie with the values from some other movie so so this line here is going to invoke assignment operator as SS S no AO so this line here is going to invoke assignment operator and you are probably wondering what this line here does and this line here does absolutely the same as this line here and this is just more explicit way to invoke assignment operator because what assignment operator is it is just just overloaded operator and I have already created another video where I talk about operator overloading that is this video here I will also put it in the description and there you can learn how you can overload operators but basically what it means is that this operator and then assignment sign is simply a method that we are invoking on movie for object and we are passing this parameter and as you can see that is what happens here so it is a function that has this name operator and then assignment and then here is the parameter that we are receiving and then whatever this method here returns that will be assigned to this movie for object so basically this line here and this line here they do absolutely the same but this approach here is not used very often because this approach here looks a lot more understandable and easier to read but you can use whichever you prefer this one or this one I am going to comment this one because this is the approach that you are going to see more often but remember they do absolutely the same thing and then this line here is invoking copy Constructor even though we have this assignment symbol as we already said whenever you are creating new object based on an existing object you invoke copy Constructor so here I will put CC and then here we are changing or replacing the values that are inside Movie 5 with the values of Movie 2 so here we are invoking assignment operator okay now something interesting that I didn't tell you before is that in our current situation with the code that we currently have we don't need to create our own copy Constructor and we also don't need to create our own assignment operator because our compiler is smart enough to do that work on its own own but as soon as you start adding pointers to your class in that situation you absolutely need to create your own copy Constructor and your own assignment operator so now let's see how that is going to look like so let's say that I also want to know which actors are acting in each movie so I will add those properties here I will add int property and call it actors counter okay and then I want to add another property and that is going to be string pointer called actors so this property here is string pointer which means that it is going to point to the array of actors where we are going to store names of all of the actors and here we are going to hold the counter so that we know how many actors this movie has and how many elements our array has and as I said said as soon as you start adding pointers to your class you need to be a lot more careful because then you will have to create your own copy Constructor you will have to create your own assignment operator and also you will have to take care of deallocating that memory which means freeing that memory giving it back to the operating system so that it can be reused for some other application and that means that you will have to also create D structure so let's do that part part inside this parameterized Constructor I am going to say that initially when I first create a movie actors's counter is going to be equal to zero and I also want to initialize this array so I will say actors is going to be equal to new string array that has this many elements so new string array that holds this many elements so that is the change that we need to make inside our Constructor we need to allocate the memory for actors that we want to store for each movie and then also since we have allocated memory inside our Constructor we need to create D structor where we are going to deallocate memory so this is how D structor is going to look like you put this TAA symbol and then you use the same name for the D structor as the name of the class class it does not have any parameters and then here what you need to do is you need to deallocate everything that you have allocated inside Constructor so here you say please delete the array of actors like this and also I am going to null this array so I will say that actors is null PTR so that we don't hold the address in memory that is no longer ours with this we have we have simply cleared that memory and now I'm simply saying hey this pointer which was previously holding the address in the memory where our actors were stored it is no longer going to have that address I will simply null that pointer so this is how our D structor is going to look like and then we need to make changes to two more places we need to change our copy Constructor and we need to change assignment operator and I'm going to explain those two on a visual example so let's talk about copy Constructor imagine the following situation we have movie One its name is The Dark Night genre is action rating is 9.5 and then actors counter is two so we have two actors and then this actor's pointer it is just pointing to an array somewhere in our memory here is the address of that array so that is this array here and that array holds two elements two actors Christian B and hit Ledger and if you know about arrays you know that the indexation of arrays starts with zero so this first element has the index of zero and the second element has the index of one so that is how our movie one looks like now imagine that you want to do something like this please create movie six based on movie one so here we are invoking copy Constructor and this here is how the code of our copy Constructor should look like so now we are going to go line by line through this code and explain what is happening in memory when each line is executed so inside this copy Constructor we have received the original which is our movie one and based on that movie one we want to construct or to initialize movie six so let's go line by line and see what is going to happen so the first line says name is equal to original. name so I will simply copy that like this and then genre is going to be original. genre so let's copy that part as well and then rating is original. rating I will copy that part also and then actors counter is original actors counter let's copy that part as well and then we come to this line here here it says that actors is going to allocate new array of strings so let's do that let's allocate new memory let's say that I will allocate that memory here so the address is going to be 00 BB FF okay and what this actors's pointer holds is just that address now here on that address I am allocating new array that has this many elements so here we have value of two so that means two elements okay so we have allocated new array that holds two elements so then with this for Loop what we want to do is we want to iterate through those elements and we want to copy each element of our original object into this newly created object so we copy this first element here and then this second element here so that is what this copy Constructor does and how it copies first object into the second object so that is how our movie six is going to be constructed based on movie one so now I will go back to my visual studio and I will write this code for my copy Constructor so your copy Constructor should look like this so now let's see what kind of changes we need to make to our assignment operator which currently looks like this and I'm also going to explain that on a visual example with the help of excel so this is how assignment operator should look like and as you can see it is a a little bit different than copy Constructor and now we are going to explain line by line how assignment operator should behave so this is the situation that we have we have movie one with these values so it is dark knight genr is action rating is 9.5 it has two actors and then the array of actors is this array here on this address so we have Christian Bale and heat Ledger and then we have another movie movie two its name is The Lion King it is animated movie its rating is eight it has three actors and then actors are stored on this address here so we have three actors Salina Noak Denzel Washington and Leonardo DiCaprio um these are completely wrong for The Lion King but let's say that these are actors who act in The Lion King so what we want to do is this line here so we want to say please change Movie 2 so that it has the same values as movie one so to movie two I'm going to assign whatever movie one holds so let's see how we are going to do that based on this code here so I will skip this first line here because I will explain that part later it is going to be easier for you to understand so what I want to do is this line here name is equal to original. name so I simply copy the name of movie one and I put that as the name for my movie two okay and then genre is original genre so let's do that part as well so this movie is going to be action and then rating is original do rating so 9.5 here and then actors counter will be whatever we have here so instead of three we will have two actors and then this part of the code here says please delete the array of actors which means that first I have to deallocate this array here so I need to delete that so that we can free that memory so that it can be reused by some other application and only then I can allocate new array of strings with this many elements so only then I can say please allocate new array the address is going to be for example 00 CC FF and then this pointer here is going to point to that new address and here I'm going to allocate new array that has this many elements so here I will have array of two elements and then I will use four Loop in order to count from zero to actors counter and in each iteration I am going to copy one actor from this array here into this array here and then in the next iteration I will copy this actor here okay so now I have created movie two based on movie one so as we already said the most important difference between copy Constructor and assignment operator is we use copy Constructor when we want to create completely new object based on another object and we use assignment operator when we want to change or replace values of already existing object with the values of some other object and when we are talking about differences in code then the difference is this line here when you are writing the code for assign assignment operator then you need to delete or deallocate the memory that the previous object was using before you allocate new memory otherwise you are going to have memory leaks which means that if you did not deallocate this memory here and you simply allocated this memory then your operating system would not be able to reuse this memory and to give it to some other application so that application can use it so once more when you are writing the code for assignment operator you first need to deallocate the memory that previous object was holding and then you can allocate new memory and in that new memory you can copy new elements and new things that you want to store in that object and with copy Constructor we don't need to do that because as we said when we are using copy Constructor we are creating completely new object which was not holding any memory previously okay another important thing that I promise to explain is this line here if the address of original is not the same as this so what does this line here do this line will prevent any problems that could happen in case that programmer tries to do this movie one is equal to movie one if we don't have this line and we try to do something like this we will get a problem that is caused by something called self destruction so let me explain what that means so if we try to do this and we don't have this line here which checks if we are trying to assign the object to itself then the following would happen so name will be equal to original. name so we simply copy this code here and then paste it to the same place and then genre is original do genre so again I copy this and I paste it to the same place rating will be original rating again copy paste to the same place actors counter is original do actors counter again copy paste and then we come to this line here which says delete array of actors so what we do is this okay and then here it says please allocate new array that has this many actors so I allocate new array the address of the new array is going to be 0 DD FF and I want to allocate the array that has two elements so then what I do is I iterate and I copy the elements from this array here into this array here but I don't have anything inside this array because what happened was self destruction what I did in this line here is I deleted my array and now I have a problem so in order to prevent that problem from happening what you do is at the beginning of your assignment operator you simply say hey if the user is trying to assign the same object to itself then please don't do any of this code okay or in other words what this line of code here does is it says do this code here only if the user is not trying to assign the object to itself so this is how your assignment operator should look like I will write this code into my assignment operator in visual studio and then I will be back so here is how the assignment operator code should look like let's collapse this and then here is how our copy Constructor code should look like now in order to be able to test this I need to create two more functions one function that will allow us to add new actor to the movie and another function that will allow us to print all of the details about the movie so I'm going to add those functions and then I will be back to explain so I have added these two methods add actor and print info so now I'm going to explain what they do and I will explain this method first so let's go back to Excel and let's see what this method here does line by line so here is our method and then this is our situation so what I want to be able to do with this method is something like this so I want to be able to say movie One do add actor and then I pass the name of the actor and what this method here should do is it should add that actor to this movie so now let's see line by line how this method will perform that job so this first line here says to create a pointer called new actors so let's do that here let's say new actors okay and this pointer is going to point to the new memory that I will allocate so here I will allocate new array of strings that will have this many elements actors counter plus one so that is 2 + 1 which means that I will allocate an array that has three elements okay so the address of this array is going to be 0 0 BB FF and this pointer will point to this address and then the indexes will be 0 1 and two okay so then we perform this for Loop here so what this for Loop does is it simply assigns to each element of my new array the actor from my old array so here I will say Christian Bale and then here I will copy heat Ledger and then the last element will remain empty so then in this line of code here to the last element so new actors of actors counter so new array of this index we will assign our new actor and that is Salina nurak so let's put that here okay so we have assigned new actor here and then we can delete our old array of actors so we can deallocate this array here to free the memory and then to our actors pointer which is this pointer here we will assign new actors so now instead of holding this address our actors pointer will hold this address and then we will simply increment the counter of actors by one so 2 + 1 will be equal to three and now we have three actors and the address of the actors array is this address here so that means that our movie has these three actors so that is how this method here should behave and now you can copy this method and paste it in your visual studio and then the second method that I have created is print info and we use this method in order to print the information about the specific movie so we say movie one. print info and inside this method we print the name genre rating and then we say actors and we iterate through our array of actors and print each actor of that movie and one important thing is that both of these methods are created as member methods of of this class which means that they are inside the class so now let's test the code that we have written so let's delete this code from our main function and what I want to do here is I want to add some actors to our movie one so movie 1. add actor I want to add Christian Bale okay and then I also want to add heat Ledger okay like this so now what I can do is I can say movie One print info and if I start the program let's see what is going to be the result so we get the name of the movie genre rating and then here are the actors of the movie so now let's test copy Constructor so what I can do is I can create a new movie let's call it movie 3 and to this movie I will simply assign the same values that movie 1 has so this code here is going to invoke copy Constructor which means that if I say movie 3. print info I should get the same information that movie one has so let's start the application okay so this is our movie one and then this here is our movie three and as you can see our copy Constructor works because our Movie 3 has the same information as movie one because we used copy Constructor in order to create this movie based on this movie okay so let's also test assignment operator so here after I create my Movie 3 with the same values that movie one has what I want to do is I want to change them I want to say that movie 3 is equal to Movie 2 like this so then if I print Movie 3 let's see what we are going to get okay so here we get the Lion King animated and rating is8 and it does not have any actors which means that our assignment operator works as well and one last thing that I want to do is I also want to assign some actors to Movie 2 so I want to say movie 2. add actor and here let's say Salina norak okay so that is is me and then let's also say Denzel Washington and then let's also add another actor let's say Leonardo decaprio okay so I have assigned three actors to my movie to so here I'm creating my movie three based on movie one but then I'm changing its value so that it has the same values as Movie 2 has so this name this genre this rating and then the these actors here so when I print Movie 3 let's see what we are going to get okay and as you can see Movie 3 is Lion King animated movie rating is eight and then these are the actors so this means that our assignment operator works as well okay and then once more the most important thing to remember is the difference between copy Constructor and assignment operator so copy Constructor will be invoked when you are creating completely new object based on another object and then assignment operator will be invoked when you are simply replacing the values of already existing object with some other object and please don't be fooled by something like this movie and then let's say Movie 4 is equal to Movie 2 so this here even though it looks like assignment operator is still invoking copy Constructor because we are creating completely new object based on another object and then later if you want to change the value of this movie 4 and you want to say for example Movie 4 is equal to something else then this line here will invoke assignment operator okay so I hope that this video helped you to understand the difference between copy Constructor and assignment operator if you want more similar videos then simply give this video a thumbs up so that I know to create uh more videos like this one in the future and if you have any questions you can leave those in the comment section and if you want to learn practical programming you want to learn how to build real world applications and start a successful career as a programmer and you also enjoy my teaching style and want me to be your mentor on that journey and take you from beginner to expert then you can enroll in my practical programming course more details will be in the description so I have created the entire plan for you all of the exercises tasks lessons everything that you need to do is going to be on one place and your job is just to follow that plan and if you do so if you stay consistent watch all of the lessons do all of the exercises I'm sure that you are going to achieve your goals and as I said we also have a special discount so the fastest people who enroll in the course using the link in the description will also be able to save some money and if you are not sure if this course is for you or not then you can try it out for seven days and if for any reason you think that it is not worth your money you can get a full refund so you really have nothing to lose but a lot to gain this course can completely transform your future and it can help you to start a very successful career as a programmer so thank you very much for watching this video and I going to see you in another one bye
