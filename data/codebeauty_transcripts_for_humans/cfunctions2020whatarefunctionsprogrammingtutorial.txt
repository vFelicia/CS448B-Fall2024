With timestamps:

00:00 - hi everyone welcome to my channel
00:02 - welcome to the first video of c
00:04 - plus plus functions if you're a beginner
00:06 - at c
00:07 - plus plus make sure to check out my
00:09 - playlist on c
00:10 - plus for beginners and there you can
00:12 - find some of the most important concepts
00:14 - that you will need to understand and
00:16 - know in order to work with c
00:18 - plus and in this video we are going to
00:21 - talk about c
00:22 - plus plus functions so functions are one
00:25 - of the most
00:25 - important concepts that you will need to
00:27 - understand and use in order to be a
00:30 - good programmer and that is not only
00:32 - case in c plus plus but
00:34 - in most programming languages as well
00:37 - and before we start make sure to
00:38 - subscribe to my channel
00:40 - and also click the bell icon so that you
00:42 - are notified when i publish
00:44 - my next video and also if you are
00:46 - interested in
00:48 - how developer life really looks like and
00:50 - if you want to see some of the behind
00:51 - the scenes of these videos that i post
00:53 - on youtube
00:54 - make sure to follow me on my other
00:56 - social media platforms so
00:58 - instagram and twitter accounts through
01:01 - code beauty
01:02 - and without further ado let's start with
01:04 - this video
01:06 - the first thing that i want to explain
01:08 - is what is function
01:10 - function is a block of code that is
01:12 - grouped together
01:13 - and usually that block of code solves a
01:16 - specific problem meaning it performs a
01:18 - specific
01:19 - task and that block of code is executed
01:22 - only
01:23 - when you call that function meaning only
01:25 - when you invoke the function
01:27 - the body of that function is going to be
01:29 - executed
01:30 - and each c program contains at least
01:33 - one function and that is going to be
01:36 - main function so this here
01:40 - and the execution of your program starts
01:42 - on the first line of your main function
01:45 - and then it ends when it comes to this
01:48 - last line so this close bracket of your
01:50 - main function
01:51 - and also it can end when it comes to
01:53 - return statement but we are going to
01:55 - talk about return statements
01:56 - later in this course so main function
02:00 - is the main one so the first one that is
02:03 - executed and whatever code you put
02:05 - in your main function that code is going
02:08 - to be executed as part
02:09 - of your program so if i say here for
02:12 - example
02:13 - c out and i say
02:16 - hello from main function like this
02:20 - and let's add a new line
02:23 - like this and now if i run my program
02:27 - you can see that our program has written
02:29 - out hello from me
02:31 - and that is the first function that our
02:34 - program starts
02:35 - executing besides from main function
02:38 - you can also create your own functions
02:41 - and
02:41 - let's explain how you can do that so
02:45 - there are a couple of things that you
02:46 - need to know in order to create your own
02:48 - function
02:49 - and that is going to be following so the
02:52 - first thing
02:52 - that you need to really write when you
02:55 - create your own function is going to be
02:57 - return type of your function
02:59 - and that is going to be void for now
03:01 - which means
03:02 - that this function is not going to
03:04 - return anything
03:06 - and we are going to talk about return
03:07 - types more in detail
03:09 - later in this course so for now we are
03:11 - going to use
03:12 - void return type meaning that this
03:14 - function that we declare
03:16 - in this line it's not going to to return
03:18 - anything
03:19 - and then you write out the name for your
03:21 - function and
03:22 - let's call it function
03:26 - like this and then in these parentheses
03:29 - you can put arguments or parameters that
03:32 - your functions
03:33 - that your function really receives and
03:36 - for now these parentheses
03:37 - parentheses are going to be empty
03:39 - meaning that this function does not
03:41 - receive any
03:42 - arguments and then in these curly
03:44 - brackets
03:45 - we are going to put the body of our
03:48 - function
03:49 - so this here is going to be the function
03:51 - that we created ourselves
03:53 - and you have to specify specify the
03:56 - return type
03:57 - of your function after that you write
04:00 - out the name of your function
04:02 - then in these parentheses you can put
04:04 - any arguments that your function
04:06 - receives
04:07 - in this particular case these are empty
04:09 - and we are not going to send
04:11 - any parameters to our function and then
04:13 - here
04:14 - is going to be the body of your function
04:17 - and
04:17 - what we are going to put in this body
04:20 - let's say
04:21 - c out hello
04:25 - from function like this
04:29 - and let's also add end line
04:33 - at the end of this function so
04:36 - now we have really created our own
04:39 - function which is called
04:40 - function and if i run my program now
04:43 - what do you think that is going to
04:44 - happen
04:44 - write that in the comments down below so
04:47 - i am going to run
04:49 - this program and as you can see nothing
04:52 - has changed really our program has
04:54 - written out
04:54 - hello from main as it did before so
04:57 - before we created this function
04:59 - that is because as i explained your
05:01 - function
05:02 - is not going to execute until you call
05:04 - that function so until you invoke it
05:06 - it is not going to execute so in order
05:09 - for our function to be executed we need
05:12 - to invoke that function and how
05:14 - that is done so here in this line after
05:18 - hello from main we are going to put
05:20 - function
05:22 - and then these parentheses so this here
05:26 - is the
05:26 - invocation of our function and now
05:29 - our function is going to be executed so
05:32 - now if i
05:33 - press this play button you can see that
05:37 - now our console has changed so now we
05:39 - have
05:40 - hello from main and then also hello from
05:43 - function so that is because we have
05:46 - invoked this function
05:47 - here and you can invoke this function
05:50 - wherever you need it so you can
05:52 - i have invoked it after this line here
05:55 - but you can invoke it
05:56 - as well before this line here if you
06:00 - need to and if you want to so now if i
06:03 - run my program you can see that at first
06:05 - says hello from function and then it
06:07 - says
06:08 - hello from main because this function
06:10 - has been
06:11 - invoked first and then we have written
06:14 - out
06:14 - this line of code here and that you can
06:18 - see
06:18 - in this console window and
06:22 - let me show you one thing so i'm going
06:24 - to return this
06:25 - after this line of code the location of
06:28 - our function i'm going to return
06:30 - here and now i'm going to take this code
06:33 - here
06:34 - so this definition of our function
06:38 - and i'm going to paste it after our main
06:41 - function
06:41 - and let's see what is going to happen
06:44 - now so let me delete
06:45 - these these blank lines
06:48 - and now if i run my program you can see
06:51 - that our program has failed
06:52 - to build so we have compile time errors
06:56 - and in this window here in this error
06:59 - list you can see that it says
07:01 - function identifier not found which
07:04 - means that
07:05 - this function here is really our
07:08 - compiler does not understand what this
07:10 - function
07:10 - is because c plus code is executed from
07:14 - top
07:14 - to bottom and when it comes to this line
07:17 - here so when it comes to the invocation
07:19 - of your function
07:20 - it is really not familiar with this
07:22 - function it does not know what this
07:24 - function is
07:25 - so you have to either put this code
07:29 - before
07:30 - your main function as we did before or
07:33 - you have to do
07:34 - other thing which is really the
07:36 - recommended way to create your functions
07:38 - and that would be to create definition
07:42 - and declaration of your function so what
07:45 - our definition
07:46 - and declaration of function declaration
07:49 - of function
07:50 - is going to be really this
07:54 - here so i'm going to copy this and
07:57 - put it before our main function and
08:00 - this declaration of function is going to
08:03 - tell to your compiler
08:04 - what is going to be the return type of
08:06 - your function what is the name of your
08:08 - function and then
08:10 - if there are any parameters that your
08:12 - function
08:13 - really receives you are going to put
08:15 - those in these parentheses here
08:17 - so that is going to be declaration of
08:20 - your function
08:21 - and that part declaration of your
08:23 - function goes before your main
08:25 - function and after that you are going to
08:28 - write
08:28 - the definition of your function and the
08:31 - definition of your function
08:32 - is going to go after your main function
08:35 - and in that way you are going to make
08:38 - your code more
08:39 - readable meaning that when someone else
08:41 - comes to your code and
08:43 - if your code had 200 or three or 400
08:46 - lines of code
08:47 - then it would be really hard to to read
08:50 - that code
08:51 - and for someone it would be really hard
08:53 - to manage
08:54 - and go through your code so he is going
08:57 - to
08:58 - find it much easier if he has all the
09:00 - declarations of your functions before
09:02 - your main function
09:03 - and then if he needs to read a specific
09:05 - definition of a function he can
09:07 - right click the name of that function
09:09 - and click
09:10 - go to definition and then he's going to
09:14 - be taken to the definition of
09:16 - your function so the specific one that
09:18 - he needs to read
09:19 - so that you don't bombard um that
09:23 - user with all the functions old
09:25 - definitions of
09:26 - functions that you have in your program
09:28 - and in this particular situation it is
09:30 - only
09:30 - one function but your program is going
09:33 - to consist usually of more than one
09:36 - function and that is really unreadable
09:38 - when you find a lot of definitions of a
09:40 - functions before your main
09:42 - so you can right click on your function
09:45 - and say go to definition or you can
09:47 - press
09:47 - f12 so you can click on your function
09:49 - and then
09:50 - press f12 and you are going to be taken
09:52 - to the definition
09:54 - of your function okay so this here is
09:57 - the recommended way
09:58 - to create functions and now if i press
10:02 - play button you can see that our program
10:06 - has executed actually has written out
10:09 - the same as it did
10:10 - before so we have uh really removed that
10:13 - error that we had
10:14 - when we moved this definition of
10:18 - a function after our main because we
10:20 - have added
10:21 - this declaration of a function before
10:23 - our main function
10:25 - and there is really the most important
10:26 - thing that i want to mention in this
10:28 - video
10:29 - and that is going to be what is the
10:31 - reason why functions exist
10:33 - okay so we have seen that they make your
10:35 - code a bit more readable so they group
10:37 - the parts of your code together so that
10:39 - you can
10:40 - manage your code easier and
10:43 - the most important characteristic of
10:45 - functions is that they make your code
10:48 - reusable meaning that you can write a
10:50 - specific code once so you can solve a
10:53 - specific problem
10:54 - once put the solution the algorithm the
10:57 - code for that problem in
10:59 - a function and then you can really
11:01 - invoke that function
11:03 - however many times you need it so here
11:07 - i can really copy this and then paste it
11:10 - let's say three times
11:11 - if i needed it and then if i run my
11:14 - program
11:15 - you can see that this function has been
11:18 - executed
11:19 - three times here and that is really the
11:22 - most
11:23 - important thing about functions which
11:25 - means
11:26 - functions make your code reusable you
11:29 - don't have to write the same code over
11:31 - and over
11:32 - again and you should really try to group
11:35 - your code
11:36 - in functions so that each function does
11:38 - a specific
11:39 - task nothing more than that and in that
11:42 - way you are going to
11:43 - make your code easier for yourself and
11:45 - for
11:46 - other people as well that are going to
11:48 - read your code
11:49 - so i hope that you understood what
11:51 - functions are
11:52 - and how they are used and we are going
11:55 - to talk about functions in more detail
11:57 - in my later videos so make sure to
11:59 - subscribe to my channel
12:01 - and click the bell icon because only
12:03 - then you are going to be notified when i
12:05 - publish my next
12:06 - video and also follow me on my other
12:09 - social media
12:10 - platforms so instagram and twitter
12:12 - accounts
12:13 - through code beauty thanks for watching
12:16 - and i'm going to see you
12:17 - in my next video bye

Cleaned transcript:

hi everyone welcome to my channel welcome to the first video of c plus plus functions if you're a beginner at c plus plus make sure to check out my playlist on c plus for beginners and there you can find some of the most important concepts that you will need to understand and know in order to work with c plus and in this video we are going to talk about c plus plus functions so functions are one of the most important concepts that you will need to understand and use in order to be a good programmer and that is not only case in c plus plus but in most programming languages as well and before we start make sure to subscribe to my channel and also click the bell icon so that you are notified when i publish my next video and also if you are interested in how developer life really looks like and if you want to see some of the behind the scenes of these videos that i post on youtube make sure to follow me on my other social media platforms so instagram and twitter accounts through code beauty and without further ado let's start with this video the first thing that i want to explain is what is function function is a block of code that is grouped together and usually that block of code solves a specific problem meaning it performs a specific task and that block of code is executed only when you call that function meaning only when you invoke the function the body of that function is going to be executed and each c program contains at least one function and that is going to be main function so this here and the execution of your program starts on the first line of your main function and then it ends when it comes to this last line so this close bracket of your main function and also it can end when it comes to return statement but we are going to talk about return statements later in this course so main function is the main one so the first one that is executed and whatever code you put in your main function that code is going to be executed as part of your program so if i say here for example c out and i say hello from main function like this and let's add a new line like this and now if i run my program you can see that our program has written out hello from me and that is the first function that our program starts executing besides from main function you can also create your own functions and let's explain how you can do that so there are a couple of things that you need to know in order to create your own function and that is going to be following so the first thing that you need to really write when you create your own function is going to be return type of your function and that is going to be void for now which means that this function is not going to return anything and we are going to talk about return types more in detail later in this course so for now we are going to use void return type meaning that this function that we declare in this line it's not going to to return anything and then you write out the name for your function and let's call it function like this and then in these parentheses you can put arguments or parameters that your functions that your function really receives and for now these parentheses parentheses are going to be empty meaning that this function does not receive any arguments and then in these curly brackets we are going to put the body of our function so this here is going to be the function that we created ourselves and you have to specify specify the return type of your function after that you write out the name of your function then in these parentheses you can put any arguments that your function receives in this particular case these are empty and we are not going to send any parameters to our function and then here is going to be the body of your function and what we are going to put in this body let's say c out hello from function like this and let's also add end line at the end of this function so now we have really created our own function which is called function and if i run my program now what do you think that is going to happen write that in the comments down below so i am going to run this program and as you can see nothing has changed really our program has written out hello from main as it did before so before we created this function that is because as i explained your function is not going to execute until you call that function so until you invoke it it is not going to execute so in order for our function to be executed we need to invoke that function and how that is done so here in this line after hello from main we are going to put function and then these parentheses so this here is the invocation of our function and now our function is going to be executed so now if i press this play button you can see that now our console has changed so now we have hello from main and then also hello from function so that is because we have invoked this function here and you can invoke this function wherever you need it so you can i have invoked it after this line here but you can invoke it as well before this line here if you need to and if you want to so now if i run my program you can see that at first says hello from function and then it says hello from main because this function has been invoked first and then we have written out this line of code here and that you can see in this console window and let me show you one thing so i'm going to return this after this line of code the location of our function i'm going to return here and now i'm going to take this code here so this definition of our function and i'm going to paste it after our main function and let's see what is going to happen now so let me delete these these blank lines and now if i run my program you can see that our program has failed to build so we have compile time errors and in this window here in this error list you can see that it says function identifier not found which means that this function here is really our compiler does not understand what this function is because c plus code is executed from top to bottom and when it comes to this line here so when it comes to the invocation of your function it is really not familiar with this function it does not know what this function is so you have to either put this code before your main function as we did before or you have to do other thing which is really the recommended way to create your functions and that would be to create definition and declaration of your function so what our definition and declaration of function declaration of function is going to be really this here so i'm going to copy this and put it before our main function and this declaration of function is going to tell to your compiler what is going to be the return type of your function what is the name of your function and then if there are any parameters that your function really receives you are going to put those in these parentheses here so that is going to be declaration of your function and that part declaration of your function goes before your main function and after that you are going to write the definition of your function and the definition of your function is going to go after your main function and in that way you are going to make your code more readable meaning that when someone else comes to your code and if your code had 200 or three or 400 lines of code then it would be really hard to to read that code and for someone it would be really hard to manage and go through your code so he is going to find it much easier if he has all the declarations of your functions before your main function and then if he needs to read a specific definition of a function he can right click the name of that function and click go to definition and then he's going to be taken to the definition of your function so the specific one that he needs to read so that you don't bombard um that user with all the functions old definitions of functions that you have in your program and in this particular situation it is only one function but your program is going to consist usually of more than one function and that is really unreadable when you find a lot of definitions of a functions before your main so you can right click on your function and say go to definition or you can press f12 so you can click on your function and then press f12 and you are going to be taken to the definition of your function okay so this here is the recommended way to create functions and now if i press play button you can see that our program has executed actually has written out the same as it did before so we have uh really removed that error that we had when we moved this definition of a function after our main because we have added this declaration of a function before our main function and there is really the most important thing that i want to mention in this video and that is going to be what is the reason why functions exist okay so we have seen that they make your code a bit more readable so they group the parts of your code together so that you can manage your code easier and the most important characteristic of functions is that they make your code reusable meaning that you can write a specific code once so you can solve a specific problem once put the solution the algorithm the code for that problem in a function and then you can really invoke that function however many times you need it so here i can really copy this and then paste it let's say three times if i needed it and then if i run my program you can see that this function has been executed three times here and that is really the most important thing about functions which means functions make your code reusable you don't have to write the same code over and over again and you should really try to group your code in functions so that each function does a specific task nothing more than that and in that way you are going to make your code easier for yourself and for other people as well that are going to read your code so i hope that you understood what functions are and how they are used and we are going to talk about functions in more detail in my later videos so make sure to subscribe to my channel and click the bell icon because only then you are going to be notified when i publish my next video and also follow me on my other social media platforms so instagram and twitter accounts through code beauty thanks for watching and i'm going to see you in my next video bye
