With timestamps:

00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you how to
00:03 - build an entire application with user
00:06 - interface and database from scratch so
00:09 - it is going to be fully functional
00:10 - application that can be used for some
00:12 - real life problems so if you watch this
00:14 - video Until the End you are going to
00:16 - learn how to build applications with
00:18 - user interface and database that you can
00:20 - use for your job or to help you with
00:22 - productivity with some everyday tasks
00:25 - and so on I will show you how to build
00:27 - gym application and then after you watch
00:29 - this video when you learn all the steps
00:31 - and logic you can use those and modify
00:33 - them a little bit in order to build an
00:35 - application that you need and before I
00:38 - show you the application that we are
00:39 - going to build many of you ask me for
00:41 - some additional resources to learn
00:43 - programming so I am going to pin in the
00:45 - comments some great resources for
00:48 - beginners to help you learn programming
00:49 - faster so make sure to check those out
00:51 - also all the tools that we will use for
00:54 - this video will be linked in the
00:56 - description so that you can download
00:57 - them but maybe watch this video first so
00:59 - that you can get a general idea of how
01:01 - we will do things and then you can
01:03 - re-watch the video and code along with
01:06 - me so here is the application that we
01:08 - are going to build as you can see here
01:09 - we have a list of all gem users as you
01:14 - can see and then membership types and
01:16 - what you can do here is you can filter
01:18 - users by membership type so when you
01:21 - click on a specific membership type you
01:22 - get the list of all the users who are
01:25 - subscribed to that membership type
01:27 - another thing that you can do you can
01:29 - also add new users so let's say ID 10
01:33 - membership type let's say two and then
01:36 - first name is going to be
01:39 - Steve
01:41 - jobs and let's confirm this transaction
01:45 - so now if I click on membership type 2
01:48 - as you can see here we have Steve Jobs
01:51 - so you can add new users you can remove
01:54 - existing users let's remove me let's
01:57 - remove something and Iraq delete record
01:59 - okay and let's try to find Selena norak
02:03 - okay I don't exist in this database
02:07 - anymore and you can also edit existing
02:11 - records so you can say Stevie jobs okay
02:15 - and if I select this again as you can
02:18 - see it's now Stevie drops okay so let's
02:23 - now see how we can build this
02:25 - application so we will divide this into
02:28 - two steps the first step is to create a
02:31 - database the second step is to create
02:33 - application and then we are going to
02:35 - connect those two so please if you need
02:38 - help with installing and setting up the
02:39 - database or if you are experiencing some
02:42 - problems that are not happening to me in
02:43 - this video please make sure to watch the
02:46 - video that I will link here I'll also
02:48 - put it in the description I explain
02:50 - everything step by step there so the
02:52 - first step is to start interbase server
02:55 - so open interbase server manager
02:59 - and start the server okay and then you
03:02 - can run your IV console
03:06 - and here you should be able to connect
03:08 - to your look to your local server you
03:11 - should see this screen check mark and
03:13 - here are the list of all of your
03:14 - databases I'm going to create a new
03:16 - database so right click on databases and
03:18 - create database and we are going to
03:21 - create a new database on desktop
03:24 - so I will call it
03:26 - Jim DB
03:29 - and click save and then click OK and you
03:33 - should be able to see your database here
03:35 - okay and here the default password is
03:39 - master key I'm going to put that on the
03:41 - screen so default username and password
03:43 - I will type it here
03:47 - and click connect and as you can see we
03:50 - have successfully connected to our gym
03:52 - DB and that database is currently empty
03:55 - so let's proceed with the next step so
03:58 - before we proceed and create tables for
04:01 - the database and enter data let's do a
04:04 - little bit of planning let me open paint
04:06 - so the application that we are going to
04:08 - build is Gem application and the reason
04:11 - why I picked this example is because it
04:13 - has use in real world so if you think
04:16 - about that you will notice that there
04:18 - are two important entities that we need
04:21 - to represent in our database and those
04:23 - two are gym users and their membership
04:26 - types so we will have two tables the
04:29 - first one will be gem users and the
04:31 - second one will be membership types so
04:34 - let's
04:35 - draw those two
04:37 - okay so this is going to be users and
04:39 - then this is going to be
04:41 - membership types let's add
04:44 - text
04:45 - here let's say
04:46 - gym users
04:49 - okay and I will just make this text a
04:52 - little bit bigger
04:54 - I'll make it bigger like this
04:58 - okay so this is Gem users and then let's
05:02 - also add another one let's say
05:05 - membership types
05:10 - okay
05:14 - great now let's see how these two tables
05:18 - are going to be connected so let's say
05:20 - that you're signing up to the gym for
05:21 - the first time so you don't know if you
05:23 - will like it if you will see any results
05:24 - and you decide to get a monthly
05:27 - membership so try it out for a month
05:29 - only after that month maybe you have
05:31 - lost some weight you have put on some
05:33 - muscle and you have seen the first
05:35 - results of your training so you decide
05:37 - that you like it and that you want to
05:39 - continue so you want to get a longer
05:42 - membership maybe for a year so if you
05:45 - look at this relationship you will
05:47 - notice that every user at a given moment
05:50 - can have only one membership type so
05:54 - that can be weekly monthly yearly six
05:57 - months doesn't really matter but every
05:58 - user can have only one membership type
06:01 - but if you look at the same situation
06:04 - from different perspective from the
06:05 - perspective of membership type stable
06:08 - then you will notice that every
06:10 - membership type can be assigned to
06:12 - multiple users maybe there are are 10
06:15 - users who have monthly membership and
06:17 - then 100 users who have yearly
06:19 - membership so this is a typical example
06:22 - of one-to-many relationship so every gym
06:27 - user can have only one
06:30 - membership but every membership type can
06:33 - have multiple users that use that
06:36 - membership that are subscribed to that
06:38 - membership so and representing multiple
06:41 - and this is an example of one-to-many
06:44 - relationship so now that we have
06:46 - explained this let's head back to our IB
06:48 - console and let's create these two
06:50 - tables with SQL and the first table that
06:53 - needs to be created is the table that
06:56 - has this many part of the relationship
06:58 - meaning membership types and the reason
07:00 - is because that is the independent table
07:02 - so it is independent in a way that when
07:06 - you want to create a gym user you need
07:08 - to have a membership type to assign to
07:10 - that user so that means that membership
07:13 - types needs to be created first so let's
07:16 - go to our IB console
07:18 - and I'm going to select my gym DB and
07:21 - click on this SQL in order to be able to
07:23 - write SQL queries okay so here is my SQL
07:28 - code in order to create these two tables
07:30 - and I'm going to paste it here and let's
07:32 - explain what this code here does so you
07:36 - say create table and then you give the
07:39 - name to your table in this case it's
07:41 - membership types again we are creating
07:43 - independent table first
07:45 - and then inside these parentheses you
07:49 - will specify The Columns of your table
07:51 - so the attributes
07:53 - okay and we have two we have membership
07:56 - ID and membership name so membership ID
08:00 - is going to be of type integer and it
08:02 - cannot be now and then membership name
08:05 - is going to be a string in the situation
08:07 - in SQL it's called varchar and it can
08:10 - have up to 50 characters and again it
08:13 - also cannot be now and then here we are
08:16 - creating something called primary key
08:18 - which means that a field that is a
08:21 - primary key will be used in order to
08:23 - uniquely identify every row every record
08:27 - inside this table and in this situation
08:30 - we are saying that membership ID so this
08:34 - property here this attribute will be
08:37 - used as a primary key meaning it will be
08:39 - used in order to uniquely identify every
08:42 - single record inside this table and
08:45 - whatever we specify as primary key
08:48 - inside this table that will be used as a
08:50 - foreign key inside another table in
08:52 - order to connect affect those two tables
08:55 - so that is how we create our membership
08:58 - types table and then if you want to
09:00 - create gym users table again we say
09:03 - create table and give the name to that
09:05 - table gym users and inside these
09:08 - parentheses again you specify The
09:10 - Columns of that table and in this
09:12 - situation we have four columns those are
09:14 - these four this is something else which
09:17 - I will explain in a minute so we have
09:19 - four columns the first one is use gym
09:21 - user ID which is again it is a unique
09:25 - way to identify every single gym user
09:27 - because two users can have the same name
09:29 - they can even have the same last name
09:31 - but their user ID needs to be unique so
09:35 - for every single gym user he needs to
09:37 - have a unique ID okay so that is the
09:39 - First Column and then we have column
09:42 - first name and last name and those two
09:44 - are strings of up to 30 characters that
09:47 - string type in databases is called
09:49 - varchar and then you specify how many
09:52 - characters it will have this is the
09:54 - maximum number characters that it can
09:56 - have and then we have membership ID and
10:00 - this membership ID is going to be a
10:03 - membership from this table that is
10:06 - assigned to our user so every single
10:09 - user is going to have a membership ID of
10:12 - a membership type that he is subscribed
10:14 - to and this membership ID you specified
10:18 - here as a foreign key to this table
10:22 - so here you say we have a foreign key
10:24 - inside our gym users and that is going
10:26 - to be a field called membership ID which
10:29 - is this field here and it references a
10:32 - table called membership type so this
10:35 - table here and inside that table we are
10:38 - using this field here this membership ID
10:41 - as our foreign key so that is what this
10:44 - line here means so it is going to be a
10:47 - membership type that our user is
10:49 - subscribed to and then here we are
10:51 - saying that a primary key for this table
10:53 - is going to be this field here gym user
10:55 - ID okay so now that I have copied this
10:58 - to our SQL query I am going to execute
11:01 - these two again please keep in mind that
11:03 - first you need to create independent
11:05 - table so you need to select this
11:08 - membership types table and click on this
11:11 - here so execute query or press F5 on
11:14 - your keyboard
11:15 - okay and then create this second table
11:18 - select it and press F5 or this execute
11:22 - query there are a few very important
11:24 - tips related to this and the first one
11:27 - is if you get any sort of error when you
11:30 - are trying to execute these queries or
11:32 - upon insertion of the data what you need
11:34 - to do is you need to go to transaction
11:35 - and then options and you need to set
11:39 - this access mode to right and you are
11:41 - not going to get any errors that is the
11:43 - first tip and then the second tip is
11:46 - that SQL is not case sensitive which
11:49 - means that if you write this create
11:51 - table with capital letters is the same
11:54 - as if you wrote it with
11:56 - lowercase
11:58 - like this okay so it is absolutely the
12:02 - same this approach and this approach but
12:05 - one important thing that you do need to
12:06 - keep in mind is that you cannot use
12:08 - keywords in SQL as names for your tables
12:12 - so you cannot name this table for
12:14 - example user because that is a keyword
12:17 - and if you can see it has even been
12:19 - bolded so this is a keyword in SQL so
12:23 - you cannot use it as a name for your
12:25 - table or attribute attribute or
12:27 - something like that so here I will
12:28 - change it back to gym users so now that
12:32 - we have created these two tables we
12:34 - should be able to see them here but
12:36 - since that did not refresh automatically
12:38 - I'm just going to close this and open it
12:42 - again
12:43 - okay and as you can see here are our two
12:46 - tables and when you select a specific
12:48 - table here you can see all the columns
12:50 - of that table if you find another way a
12:53 - better way to refresh this that is not
12:55 - closing it and opening it again let me
12:58 - know in the comments so let's insert a
13:00 - couple of Records to our tables and
13:03 - again the first table that I want to
13:04 - insert records into is going to be
13:06 - membership types because we don't have
13:08 - any membership type so that means that
13:11 - we if we try to create a gym user we
13:13 - will not have a membership type to
13:15 - assign to that user Okay so
13:18 - let's say insert into membership types
13:25 - okay and here I'm going to specify the
13:28 - columns that I want to insert into so
13:31 - The Columns of this table we have that
13:33 - here so the first one is membership ID
13:39 - okay and then the second one is
13:41 - membership name
13:45 - and here I want to specify values so
13:48 - inside parentheses I will specify values
13:51 - in this order so the first is membership
13:54 - ID let's say that membership ID is going
13:57 - to be one and then membership name let's
13:59 - say that membership name will be
14:02 - weekly please keep in mind that this
14:04 - here is an integer so we don't need any
14:06 - quotation marks but since this is a
14:09 - string or VAR chart type we are
14:12 - specifying this inside these single
14:14 - quotation marks okay so select this
14:16 - query and execute it
14:18 - and here we have the error that I
14:20 - mentioned so let's very quickly fix this
14:23 - error let's go to transactions options
14:25 - and let's set this access mode to right
14:28 - okay
14:30 - okay so if I try to execute this query
14:34 - again it has successfully been executed
14:37 - and one more thing that you need to do
14:38 - is you need to commit this transaction
14:40 - so go to transactions and then commit or
14:43 - press F9 okay and with this we have
14:46 - successfully inserted data into our
14:49 - membership types table so let's check
14:51 - out what data we have inside this table
14:54 - we should have only one record so I'm
14:56 - going to say select all
14:59 - from
15:00 - this table here
15:03 - okay and if I press F5 we are going to
15:06 - see that we have only one row and that
15:09 - is this one that we have just inserted
15:11 - so let's insert two more I'm just going
15:13 - to copy this
15:16 - paste it two times so let's change the
15:18 - values here I'm going to say 2 and then
15:20 - membership name is monthly
15:23 - okay and then let's say three and
15:26 - membership type will be called yearly
15:30 - and I'm going to insert these two so
15:33 - let's insert this one and then this one
15:37 - and I will commit these two transactions
15:40 - so if I try to select everything from my
15:43 - membership types table again you can see
15:45 - that now we have three records and those
15:48 - are these three that we have just
15:49 - inserted and please please change the ID
15:53 - of every record that you are inserting
15:56 - because as we said id needs to be unique
15:59 - so you cannot have two records with the
16:01 - same ID because if you do that you are
16:04 - going to get an error let's now add a
16:06 - couple of gem users here I have typed
16:09 - already a code in order to select all
16:12 - records from gym users table and to
16:14 - insert a couple of Records into our gem
16:17 - users table and again the approach is
16:19 - absolutely the same you say insert into
16:21 - and then the name of your table and here
16:24 - you specify all of the column names you
16:27 - can see them here okay and then you say
16:30 - that the values that you want to insert
16:32 - are following and you specify those
16:34 - values in this order here so first is
16:38 - gym user ID second is first name and
16:40 - then last name and here is membership ID
16:44 - and here you can see all the membership
16:46 - names and their belonging IDs okay so
16:49 - I'm going to insert these records
16:52 - okay
16:54 - and I need to commit this transaction
16:58 - and now I can select everything from my
17:01 - gym users and as you can see here inside
17:03 - gym users table we have four gem users
17:07 - so that would be all for the SQL part
17:09 - let's now see how we can show this data
17:12 - inside our C plus plus app delete it
17:14 - update filter and so on so I am going to
17:18 - open my red studio and the first step is
17:22 - to create a blank c plus application so
17:25 - click on file new and then Multi-Device
17:29 - application with C-Class plus Builder
17:30 - again if you are absolutely new to C
17:32 - plus plus Builder and you need help to
17:34 - introduce you to C plus Builder or some
17:37 - simpler application to build first make
17:39 - sure to watch this video I will link it
17:42 - on the top of the screen and also I will
17:44 - leave a link in the description so I
17:46 - explain everything step by step here and
17:48 - in this course we are going to continue
17:50 - from that so here you are going to
17:52 - select blank application and click OK
17:56 - and now it is creating a blank
17:59 - application let's wait a couple of
18:01 - seconds
18:02 - okay so here is our application now I'm
18:06 - going to show you how easy it is to
18:08 - connect our database with C plus plus
18:10 - app so go to this data Explorer Tab and
18:15 - here under Fire DAC you are going to
18:18 - notice a different types of databases
18:21 - that you can connect with this C plus
18:24 - application and the database that we are
18:26 - using is called interbase so open it
18:29 - here and here you will notice something
18:31 - called employee that is default
18:34 - connection so the first thing please
18:36 - don't delete this connection if you
18:39 - don't like the name if you want to
18:40 - change it to something else you can
18:41 - simply rename it but don't delete it
18:44 - because you get only one connection and
18:46 - if you delete it you will have a problem
18:48 - so
18:49 - okay now what I want to do here is I
18:52 - want to modify this connection and
18:55 - specify the D specify the details of our
18:58 - database so three are able to connect to
19:00 - the database that we just created so
19:02 - here we will have to change two things
19:04 - the first one is this database so click
19:07 - on this folder here and find the
19:09 - database that we have just created mine
19:12 - was on desktop I'm going to click on
19:14 - desktop and it was this gym DB okay so
19:19 - I'm going to open that database that is
19:21 - the first part that I have to change and
19:23 - then the second part is to change this
19:25 - TCP IP to local okay that is default so
19:30 - if I click OK here
19:31 - and if I double click here now you
19:35 - should be able to see the tables of your
19:38 - database if you are not able to see
19:41 - these tables there are two steps that
19:44 - you can do in order to fix it first one
19:46 - is you need to have your server running
19:49 - if it is not running then please start
19:51 - your interbase server through your
19:53 - interbase manager okay
19:55 - and then the second step is again you
19:58 - can right click on this employee and
20:00 - click on modify and here you are going
20:02 - to change your server to the text that
20:05 - I'm going to put here on the screen so
20:07 - it is localhost slash GDs underscore DB
20:12 - okay and click OK and then it should
20:15 - work and you should be able to see the
20:17 - tables of your database so now that we
20:20 - have specified all the data necessary
20:22 - for our connection so we have said that
20:24 - we want to connect to a database that is
20:26 - local so it is on our computer it is
20:28 - called jimdb and now what I want to do
20:31 - is I want to use this connection for the
20:33 - applications we are currently building
20:35 - and that is very easy to do so in order
20:38 - to use this connection with our c plus
20:41 - application that we are currently
20:42 - building just drag and drop it to this
20:45 - form here okay and then one more thing
20:48 - that you need to do is inside this
20:49 - object inspector you need to say that
20:51 - connected is true okay because by
20:54 - default it is not connected that is all
20:57 - now how can we show the data from these
21:00 - tables that we created again it's
21:02 - extremely easy just drag and drop the
21:05 - table that you want okay and here again
21:08 - you need to set the connected or active
21:12 - active property to True okay and in
21:15 - order to show the data in order to see
21:17 - the data you will need to have some sort
21:19 - of grid where the data from that table
21:21 - is going to be shown so I'm going to
21:24 - find a grid inside this palette so I
21:26 - will call it E string grid okay that is
21:30 - the name of the control that we need
21:32 - okay and what I want to do is I want to
21:36 - say that this grid will show the data
21:39 - from this table here how do you do that
21:41 - just right click on the table and click
21:44 - on bind visually okay and here you have
21:47 - your gym users table and you have your
21:49 - string grid and to connect them just do
21:52 - this and as you can see here we have all
21:55 - the data from our table shown inside
21:58 - this grid and again if you don't see the
22:01 - data please make sure that your active
22:03 - state of your gym user stable is set on
22:06 - true because if it is false you will not
22:08 - be able to see the data let's just make
22:10 - this a little bit bigger so that we can
22:13 - see all the data on the screen okay and
22:16 - I will do the same for membership types
22:18 - table so just drag and drop table on
22:21 - your form and I will add a new D string
22:25 - Grid in order to be able to show the
22:28 - data from my table inside this grid and
22:31 - I want to connect these two so here is
22:33 - my membership table and here is my
22:36 - string grid and I will just connect them
22:38 - like this okay and the reason why we are
22:41 - not seeing the data here is because our
22:44 - membership type stable is not connected
22:47 - so you need to set its active state to
22:50 - true and you will be able to see the
22:52 - data from your table now this that I
22:55 - have just demonstrated is a very cool
22:57 - feature that c plus Builder has and it
23:00 - is called live binding and it enables us
23:03 - to see this data from the database while
23:06 - we are working and developing our app so
23:09 - if I run this program
23:11 - let's see what we will get we should
23:14 - have an application that shows gym users
23:16 - and membership types and I'm running it
23:18 - for the first time so it's going to take
23:19 - a little bit longer okay so here is our
23:22 - gym users and here is our memberships
23:25 - table now what I would like to do is I
23:29 - would like to be able to add new records
23:31 - add new gym users and maybe edit
23:35 - existing ones delete and so on so now
23:37 - I'm going to show you how you can do
23:38 - that close this application and there is
23:42 - a control called Navigator you can find
23:45 - it inside this palette
23:47 - so I'll find Navigator
23:51 - so T bind Navigator and I will put it
23:54 - here we will use it for this gym users
23:56 - table and in order to connect these two
23:58 - you just do again this
24:02 - okay so now if I run this application
24:05 - let's see what we can do with this
24:07 - Navigator we can use it in order to add
24:10 - new users delete existing users or
24:13 - update them navigate through pages if we
24:16 - have a lot of users and so on so let's
24:19 - try that out let's add a new user I will
24:23 - give him id5 and let's say that he has
24:28 - membership type two and his first name
24:31 - is Mark
24:35 - Zuckerberg Mark Zuck okay and I will
24:38 - just click on this check mark in order
24:40 - to confirm my transaction and with that
24:43 - we have successfully added new user now
24:45 - if I close this application and open it
24:48 - again you should see that now we have
24:51 - Mark Zuckerberg as the fifth user so
24:55 - that data has been stored to our
24:57 - database and it doesn't matter if you
24:59 - close your application or you turn off
25:01 - your PC you will have that data
25:03 - permanently stored in your database
25:05 - until you delete it from the database
25:07 - which you can do and you can do that by
25:10 - selecting the record that you want to
25:11 - delete and then clicking on this minus
25:13 - sign
25:15 - okay and it says delete record I say
25:17 - okay and the record has been deleted
25:20 - okay and what else you can do you can
25:23 - also edit existing data so let's say
25:26 - Elon Ilona musk okay and I'm going to
25:30 - confirm that and that should be also
25:32 - stored in my database now let's also
25:36 - create this navigator for our membership
25:38 - types because I want to show you
25:40 - something else which is very important
25:42 - so I'm going to close the application I
25:44 - will add another Navigator
25:48 - okay I will put it here
25:51 - okay and I will just connect my
25:55 - membership types table with this
25:57 - Navigator and if I run this application
26:00 - now we should be able to use that second
26:03 - Navigator in order to add new records to
26:05 - our membership types delete existing or
26:08 - update existing records inside this
26:10 - table so what is going to happen if I
26:13 - try to delete this yearly membership so
26:16 - I'm going to select yearly membership
26:17 - and then click on this minus and if I
26:20 - try to delete record we are going to get
26:22 - an error now the reason why we are
26:24 - getting this error it says violation of
26:27 - foreign key constraint
26:29 - on table gym users this error here means
26:33 - that you are trying to delete a record
26:35 - from this membership type stable that is
26:38 - used as a foreign key inside another
26:40 - table and that is gym user stable so
26:43 - let's see what I'm talking about so
26:46 - we try to delete this record three so
26:49 - yearly membership type but we cannot do
26:52 - that as long as we have users inside
26:55 - this gym users table which are using
26:58 - that membership so here I have saldina
27:01 - and Jeff and Ilona using yearly
27:04 - membership type so we cannot delete that
27:06 - membership type because that would cause
27:08 - a problem inside this gym users table so
27:12 - in order to be able to delete this
27:13 - record you will first need to delete all
27:17 - the users that are using that membership
27:19 - type and then you will be able to delete
27:21 - that membership so I am going to do that
27:23 - now I will delete Selena
27:26 - then Jeff
27:28 - okay and
27:31 - Ilona I'm deleting Ilona mask okay and
27:35 - now if I try to delete this yearly
27:37 - membership
27:39 - as you can see it has been removed
27:41 - without any problems and if I close this
27:44 - application and open it again and as you
27:46 - can see our database is almost empty we
27:49 - have only one gem user and only two
27:52 - memberships which means that I will have
27:54 - to re-add those users that we just
27:56 - deleted so I'm going to show you how you
27:58 - can add one user and one membership type
28:00 - and then you can use the same logic in
28:04 - order to add as many records as you want
28:05 - and I'll also pause the video and add a
28:08 - couple of records off camera so let's
28:10 - return membership type yearly membership
28:12 - type that we've just deleted so I will
28:14 - say plus and here I will say that
28:16 - membership ID is going to be three
28:19 - please make sure that you are using a
28:21 - unique ID that does not exist already
28:23 - okay and here membership name is going
28:26 - to be yearly
28:28 - okay and I will just confirm that
28:31 - transaction okay and now I want to add a
28:35 - user for that membership type let's say
28:37 - to add gym user with id1 he is going to
28:41 - use membership type 3 and his name or
28:44 - her name is going to be seldina
28:47 - last name is going to be murak and I'm
28:50 - going to confirm that transaction and
28:52 - now I'm going to add a couple of more
28:53 - users and then I will be back so I have
28:55 - added a couple of Records here and I
28:57 - have also moved these tables around a
29:00 - little bit so that I have enough space
29:01 - to show you something else that we are
29:03 - going to do with this app but basically
29:05 - so far we have built an entire crowd
29:07 - application meaning create read update
29:10 - and delete those are all things that we
29:12 - can now perform with this application
29:14 - and we have done that in just a couple
29:16 - of minutes thanks to the C plus Builder
29:19 - right studio and that is the reason why
29:20 - I like it so much because it is
29:22 - extremely easy to build fully functional
29:25 - applications in just a couple of minutes
29:27 - that can be used immediately basically
29:29 - so again links all the links for the
29:33 - tools that I'm using in this video will
29:34 - be linked in the description so let's
29:37 - see what else we can do with this
29:39 - application let's see for example that
29:41 - we are the owner of this gym so what I
29:43 - want to do as an owner
29:46 - I want to be able to for example click
29:48 - on a specific membership type and I want
29:51 - to be able to see all the users that are
29:54 - subscribed to that membership type so
29:56 - let's see how we are going to implement
29:58 - that so in order to do that we will need
30:00 - to write a query that is going to select
30:03 - all of gym users who have membership
30:06 - type which we have clicked on so let's
30:09 - add a query I'm going to search inside
30:12 - this palette for FD query
30:16 - okay and I am going to put it here and
30:19 - here we need to write a query so I'm
30:21 - going to double click here and I will
30:23 - write a query inside this console so
30:26 - here is the query that I want to paste
30:28 - inside this SQL command window okay now
30:33 - if I try to execute this query we are
30:36 - not going to get anything and the reason
30:38 - for that is because here we are seeing
30:40 - the following please select everything
30:43 - from gym users table where membership ID
30:48 - of that user is equal to this input
30:51 - parameter this cosine and then the name
30:53 - means hey I'm going to pass you this as
30:56 - an input parameter and that input
30:59 - parameter is going to be passed by
31:00 - clicking on our memberships as I
31:03 - explained but in this situation we don't
31:05 - have anything to pass so in order to
31:07 - test this query I'm going to manually
31:09 - hard code membership ID let's say three
31:12 - and if I execute it now you can see that
31:15 - we have all of the users with membership
31:18 - ID3 if I change this to 2 and I execute
31:22 - it again again we have users with
31:24 - membership ID too different users but
31:27 - those are users with membership ID too
31:29 - so that is hard coding membership ID but
31:33 - what I want to do is I want for that
31:35 - membership ID to be passed dynamically
31:38 - when we click on the membership that we
31:40 - desire so in order to say that again you
31:43 - put common sign and then membership ID
31:46 - and again if I execute this we are not
31:49 - going to get anything any records
31:51 - because we need to pass this as a
31:53 - parameter so now let's see how we are
31:55 - going to do that click ok to save this
31:59 - query and now let's see how we can pass
32:02 - a parameter to this query so for this we
32:06 - need a control called data source and
32:08 - you can find it inside this palette so
32:10 - data source t data source and I will
32:14 - drag and drop it here okay and to this
32:17 - data source I will tell that this data
32:19 - source that it is going to draw data
32:21 - from this table memberships table so you
32:24 - set its data set property to membership
32:28 - types table okay and now what you are
32:31 - going to do is you are going to tell
32:33 - your FD query hey you will use this data
32:37 - source one this data set so here you
32:39 - need to find a property called Master
32:42 - Source okay and you will set its Master
32:45 - source to data source one which is the
32:47 - one that we've just added and then here
32:50 - for master Fields what you need to do is
32:52 - you need to say let's just return this
32:54 - back okay so here you need to say that
32:57 - you want to include this membership ID
33:00 - field okay so you need to move it to
33:03 - this included fields and what this will
33:06 - do is that every time that you click on
33:08 - a specific membership type it is going
33:11 - to trigger the execute solution of this
33:13 - query and pass that selected membership
33:16 - type as a input parameter and then we
33:20 - are going to get all of the users that
33:22 - use that membership type okay now one
33:26 - last step in order to be able to see
33:27 - those users that we get as a result of
33:30 - the execution of this query we need to
33:32 - have some sort of grid to show those
33:34 - users so again I'm going to use t-string
33:37 - grid
33:39 - okay
33:41 - and I will drag and drop it here make it
33:44 - a little bit bigger okay and I want to
33:47 - connect this T string grid with this
33:50 - query so here is my FD query one and
33:53 - here is my D string grid so I'll just
33:55 - connect those two like this okay and one
33:58 - more thing in order to be able to see
34:00 - the data here what you need to do is the
34:03 - same that you did with tables you need
34:05 - to set the state of the query connection
34:08 - to active so select your FD query and
34:11 - tell it that it is now active Okay and
34:14 - now you will be able to see your data so
34:17 - now let's test our application I'm going
34:19 - to run this application and let's see if
34:22 - we have built everything correctly
34:24 - okay we have one error and that error is
34:27 - that the program is still running so I'm
34:29 - going to close it from the previous time
34:31 - that we have started it so let's run it
34:33 - again
34:34 - okay and now as you can see if I select
34:39 - weekly membership we have only one user
34:41 - Satoshi Nakamoto okay and then if I
34:43 - select two we have multiple users and
34:46 - then for a yearly membership again we
34:48 - have four users so this is a fully
34:51 - functional application that we have
34:52 - built in however long this video is I'm
34:55 - going to see that after edit and let's
34:58 - see if it has bugs let's delete for
35:01 - example Bill Gates his membership type
35:04 - is two so if I delete bill
35:08 - okay let's now select membership id2 to
35:11 - see if we are going to see Bill no Bill
35:13 - Bill left the chat Bill left the gym
35:15 - actually so while we have this
35:17 - application I'm going to show you one
35:19 - more thing and that is how you can style
35:21 - it a little bit I'm going to show you a
35:24 - couple of things and then I will leave
35:25 - the rest to you because it would
35:27 - probably take an entire video to teach
35:29 - you everything about styling and if you
35:32 - want me to make that video let me know
35:34 - in the comment section and now I'm going
35:36 - to show you two different ways that you
35:38 - can style this application this form so
35:41 - let's close the app
35:43 - and here in this object inspector you
35:47 - can do uh styling of some properties so
35:50 - for example if I select this first grid
35:53 - that we added and I navigate to text
35:56 - settings there is property called text
35:58 - settings
36:00 - here you can change the font you can
36:02 - change uh its color alignment and so on
36:04 - so let's change the color for example to
36:07 - be
36:08 - um let's see let's say brown okay and
36:12 - then for font I am going to set this
36:15 - bolded font semi-bolded font okay and as
36:19 - you can see that has changed so here in
36:22 - this object inspector you can find many
36:24 - different properties that you can play
36:26 - with in order to change the style of
36:28 - your controls and then another way to do
36:30 - the styling is go to this unit1.cpp and
36:34 - there you can write C plus plus code in
36:36 - order to change the style of your
36:39 - controls so one thing that I want to
36:41 - change are the names of the headers of
36:44 - these controls so gym user membership
36:46 - type first name last name and so on so
36:49 - in order to do that I will need to
36:51 - access this grid so I will have to check
36:54 - what is the name of this grid because
36:56 - that is the property that we use in
36:57 - order to access every single control
36:59 - from C plus code we use its name so I
37:03 - will have to access it through this form
37:05 - and then this grid and then I can change
37:07 - its style so the name of the form that
37:10 - property is here inside object is packed
37:12 - inspector so name is form one and then
37:15 - the name of this grid is string grid1
37:18 - you can change that name let's change it
37:19 - to be called gym users
37:23 - grid like this okay and I'm going to
37:26 - copy that name because we will need it
37:28 - okay so now if I navigate to unit
37:30 - one.cbp that is where we write our C
37:33 - plus plus code here I'm going to say
37:35 - form one and then I use this symbol
37:40 - because we are working with pointers in
37:42 - the situation and I will say that I want
37:44 - to access my gym users grid and I want
37:47 - to access its columns so I will say
37:49 - column and I want to access the first
37:52 - one that is going to be the one with the
37:54 - index 0 and what I want to do is I want
37:57 - to text I want to set its header so I
38:00 - will say header is equal to and here I
38:03 - will specify the text for the header and
38:05 - if you remember the First Column is this
38:09 - one it is gym user ID so I will change
38:11 - that to say only ID like this okay and
38:17 - we have an error here so the name of the
38:19 - property is not column it's columns like
38:22 - this okay so with this we have changed
38:25 - the header of the First Column we have
38:27 - three more columns I'm going to type
38:28 - that code very quickly and I will be
38:30 - back okay so with this we have changed
38:33 - the headers of every column inside our
38:36 - grid so if I run my application let's
38:38 - see what we are going to get
38:43 - and as you can see here it says ID
38:45 - membership T membership type first name
38:48 - last name so this bothers me so what I
38:51 - want to do is I want to make this column
38:53 - a little bit bigger this one a little
38:55 - bit smaller this one also smaller and
38:57 - then this one is also going to be
38:58 - smaller so that it fits the text that is
39:00 - inside it so I will copy this part here
39:04 - paste it and instead of setting the
39:06 - header what I want to set is width and
39:09 - let's say that width of the First Column
39:11 - is going to be equal to 20 that should
39:13 - be enough for ID and then let's also
39:17 - copy this three more times for the
39:19 - remaining three
39:21 - columns so column one is going to be
39:24 - let's say 120 and then column 2 which is
39:28 - first name let's say 80 and then column
39:31 - three last name that should be 80 as
39:33 - well so if I run the program let's see
39:35 - what we have
39:37 - okay and as you can see here we have
39:39 - these columns with the changed width and
39:42 - one more thing that I want to do is I
39:44 - want to change the width of the entire
39:45 - grid so let's do that as well let's say
39:49 - form One Gym user's grid and its width
39:52 - is going to be some of these four and
39:55 - that is 300 I believe okay so if I run
39:59 - the app again
40:01 - we should see that change applied
40:04 - okay and as you can see here are changed
40:08 - sizes of all of these columns okay so
40:11 - now I will do the rest of the styling
40:13 - for this form and then I will be back to
40:16 - show you the final result uh and also
40:19 - all the codes from the studio is going
40:20 - to be pinned in the comment that is
40:22 - because many people don't know how to
40:23 - use git and if you want me to film a
40:26 - video about GitHub and teach you
40:28 - everything that you need to know in
40:30 - order to use GitHub and work with it let
40:32 - me know in the comment section so here
40:34 - is the final result you can see the code
40:36 - that I have changed here and I have also
40:39 - added a couple of labels to make it more
40:41 - understandable to the user and changed a
40:44 - few colors and fonts through object
40:46 - inspector and it works as it should okay
40:51 - so I hope that you enjoyed this video if
40:53 - you did please give it a big thumbs up
40:55 - because that way you tell to the YouTube
40:57 - algorithm to recommend this video to
40:59 - other people who are also learning
41:00 - programming and by sharing knowledge you
41:03 - are helping other people so that in the
41:05 - future when you don't understand
41:07 - something and you need help other people
41:09 - are encouraged to share their knowledge
41:11 - with you so that way we can all learn
41:15 - from each other and grow together so
41:18 - thank you very much for watching and I
41:20 - am going to see you in some other video
41:21 - bye
41:24 - foreign

Cleaned transcript:

hi guys and welcome to my channel in this video I'm going to teach you how to build an entire application with user interface and database from scratch so it is going to be fully functional application that can be used for some real life problems so if you watch this video Until the End you are going to learn how to build applications with user interface and database that you can use for your job or to help you with productivity with some everyday tasks and so on I will show you how to build gym application and then after you watch this video when you learn all the steps and logic you can use those and modify them a little bit in order to build an application that you need and before I show you the application that we are going to build many of you ask me for some additional resources to learn programming so I am going to pin in the comments some great resources for beginners to help you learn programming faster so make sure to check those out also all the tools that we will use for this video will be linked in the description so that you can download them but maybe watch this video first so that you can get a general idea of how we will do things and then you can rewatch the video and code along with me so here is the application that we are going to build as you can see here we have a list of all gem users as you can see and then membership types and what you can do here is you can filter users by membership type so when you click on a specific membership type you get the list of all the users who are subscribed to that membership type another thing that you can do you can also add new users so let's say ID 10 membership type let's say two and then first name is going to be Steve jobs and let's confirm this transaction so now if I click on membership type 2 as you can see here we have Steve Jobs so you can add new users you can remove existing users let's remove me let's remove something and Iraq delete record okay and let's try to find Selena norak okay I don't exist in this database anymore and you can also edit existing records so you can say Stevie jobs okay and if I select this again as you can see it's now Stevie drops okay so let's now see how we can build this application so we will divide this into two steps the first step is to create a database the second step is to create application and then we are going to connect those two so please if you need help with installing and setting up the database or if you are experiencing some problems that are not happening to me in this video please make sure to watch the video that I will link here I'll also put it in the description I explain everything step by step there so the first step is to start interbase server so open interbase server manager and start the server okay and then you can run your IV console and here you should be able to connect to your look to your local server you should see this screen check mark and here are the list of all of your databases I'm going to create a new database so right click on databases and create database and we are going to create a new database on desktop so I will call it Jim DB and click save and then click OK and you should be able to see your database here okay and here the default password is master key I'm going to put that on the screen so default username and password I will type it here and click connect and as you can see we have successfully connected to our gym DB and that database is currently empty so let's proceed with the next step so before we proceed and create tables for the database and enter data let's do a little bit of planning let me open paint so the application that we are going to build is Gem application and the reason why I picked this example is because it has use in real world so if you think about that you will notice that there are two important entities that we need to represent in our database and those two are gym users and their membership types so we will have two tables the first one will be gem users and the second one will be membership types so let's draw those two okay so this is going to be users and then this is going to be membership types let's add text here let's say gym users okay and I will just make this text a little bit bigger I'll make it bigger like this okay so this is Gem users and then let's also add another one let's say membership types okay great now let's see how these two tables are going to be connected so let's say that you're signing up to the gym for the first time so you don't know if you will like it if you will see any results and you decide to get a monthly membership so try it out for a month only after that month maybe you have lost some weight you have put on some muscle and you have seen the first results of your training so you decide that you like it and that you want to continue so you want to get a longer membership maybe for a year so if you look at this relationship you will notice that every user at a given moment can have only one membership type so that can be weekly monthly yearly six months doesn't really matter but every user can have only one membership type but if you look at the same situation from different perspective from the perspective of membership type stable then you will notice that every membership type can be assigned to multiple users maybe there are are 10 users who have monthly membership and then 100 users who have yearly membership so this is a typical example of onetomany relationship so every gym user can have only one membership but every membership type can have multiple users that use that membership that are subscribed to that membership so and representing multiple and this is an example of onetomany relationship so now that we have explained this let's head back to our IB console and let's create these two tables with SQL and the first table that needs to be created is the table that has this many part of the relationship meaning membership types and the reason is because that is the independent table so it is independent in a way that when you want to create a gym user you need to have a membership type to assign to that user so that means that membership types needs to be created first so let's go to our IB console and I'm going to select my gym DB and click on this SQL in order to be able to write SQL queries okay so here is my SQL code in order to create these two tables and I'm going to paste it here and let's explain what this code here does so you say create table and then you give the name to your table in this case it's membership types again we are creating independent table first and then inside these parentheses you will specify The Columns of your table so the attributes okay and we have two we have membership ID and membership name so membership ID is going to be of type integer and it cannot be now and then membership name is going to be a string in the situation in SQL it's called varchar and it can have up to 50 characters and again it also cannot be now and then here we are creating something called primary key which means that a field that is a primary key will be used in order to uniquely identify every row every record inside this table and in this situation we are saying that membership ID so this property here this attribute will be used as a primary key meaning it will be used in order to uniquely identify every single record inside this table and whatever we specify as primary key inside this table that will be used as a foreign key inside another table in order to connect affect those two tables so that is how we create our membership types table and then if you want to create gym users table again we say create table and give the name to that table gym users and inside these parentheses again you specify The Columns of that table and in this situation we have four columns those are these four this is something else which I will explain in a minute so we have four columns the first one is use gym user ID which is again it is a unique way to identify every single gym user because two users can have the same name they can even have the same last name but their user ID needs to be unique so for every single gym user he needs to have a unique ID okay so that is the First Column and then we have column first name and last name and those two are strings of up to 30 characters that string type in databases is called varchar and then you specify how many characters it will have this is the maximum number characters that it can have and then we have membership ID and this membership ID is going to be a membership from this table that is assigned to our user so every single user is going to have a membership ID of a membership type that he is subscribed to and this membership ID you specified here as a foreign key to this table so here you say we have a foreign key inside our gym users and that is going to be a field called membership ID which is this field here and it references a table called membership type so this table here and inside that table we are using this field here this membership ID as our foreign key so that is what this line here means so it is going to be a membership type that our user is subscribed to and then here we are saying that a primary key for this table is going to be this field here gym user ID okay so now that I have copied this to our SQL query I am going to execute these two again please keep in mind that first you need to create independent table so you need to select this membership types table and click on this here so execute query or press F5 on your keyboard okay and then create this second table select it and press F5 or this execute query there are a few very important tips related to this and the first one is if you get any sort of error when you are trying to execute these queries or upon insertion of the data what you need to do is you need to go to transaction and then options and you need to set this access mode to right and you are not going to get any errors that is the first tip and then the second tip is that SQL is not case sensitive which means that if you write this create table with capital letters is the same as if you wrote it with lowercase like this okay so it is absolutely the same this approach and this approach but one important thing that you do need to keep in mind is that you cannot use keywords in SQL as names for your tables so you cannot name this table for example user because that is a keyword and if you can see it has even been bolded so this is a keyword in SQL so you cannot use it as a name for your table or attribute attribute or something like that so here I will change it back to gym users so now that we have created these two tables we should be able to see them here but since that did not refresh automatically I'm just going to close this and open it again okay and as you can see here are our two tables and when you select a specific table here you can see all the columns of that table if you find another way a better way to refresh this that is not closing it and opening it again let me know in the comments so let's insert a couple of Records to our tables and again the first table that I want to insert records into is going to be membership types because we don't have any membership type so that means that we if we try to create a gym user we will not have a membership type to assign to that user Okay so let's say insert into membership types okay and here I'm going to specify the columns that I want to insert into so The Columns of this table we have that here so the first one is membership ID okay and then the second one is membership name and here I want to specify values so inside parentheses I will specify values in this order so the first is membership ID let's say that membership ID is going to be one and then membership name let's say that membership name will be weekly please keep in mind that this here is an integer so we don't need any quotation marks but since this is a string or VAR chart type we are specifying this inside these single quotation marks okay so select this query and execute it and here we have the error that I mentioned so let's very quickly fix this error let's go to transactions options and let's set this access mode to right okay okay so if I try to execute this query again it has successfully been executed and one more thing that you need to do is you need to commit this transaction so go to transactions and then commit or press F9 okay and with this we have successfully inserted data into our membership types table so let's check out what data we have inside this table we should have only one record so I'm going to say select all from this table here okay and if I press F5 we are going to see that we have only one row and that is this one that we have just inserted so let's insert two more I'm just going to copy this paste it two times so let's change the values here I'm going to say 2 and then membership name is monthly okay and then let's say three and membership type will be called yearly and I'm going to insert these two so let's insert this one and then this one and I will commit these two transactions so if I try to select everything from my membership types table again you can see that now we have three records and those are these three that we have just inserted and please please change the ID of every record that you are inserting because as we said id needs to be unique so you cannot have two records with the same ID because if you do that you are going to get an error let's now add a couple of gem users here I have typed already a code in order to select all records from gym users table and to insert a couple of Records into our gem users table and again the approach is absolutely the same you say insert into and then the name of your table and here you specify all of the column names you can see them here okay and then you say that the values that you want to insert are following and you specify those values in this order here so first is gym user ID second is first name and then last name and here is membership ID and here you can see all the membership names and their belonging IDs okay so I'm going to insert these records okay and I need to commit this transaction and now I can select everything from my gym users and as you can see here inside gym users table we have four gem users so that would be all for the SQL part let's now see how we can show this data inside our C plus plus app delete it update filter and so on so I am going to open my red studio and the first step is to create a blank c plus application so click on file new and then MultiDevice application with CClass plus Builder again if you are absolutely new to C plus plus Builder and you need help to introduce you to C plus Builder or some simpler application to build first make sure to watch this video I will link it on the top of the screen and also I will leave a link in the description so I explain everything step by step here and in this course we are going to continue from that so here you are going to select blank application and click OK and now it is creating a blank application let's wait a couple of seconds okay so here is our application now I'm going to show you how easy it is to connect our database with C plus plus app so go to this data Explorer Tab and here under Fire DAC you are going to notice a different types of databases that you can connect with this C plus application and the database that we are using is called interbase so open it here and here you will notice something called employee that is default connection so the first thing please don't delete this connection if you don't like the name if you want to change it to something else you can simply rename it but don't delete it because you get only one connection and if you delete it you will have a problem so okay now what I want to do here is I want to modify this connection and specify the D specify the details of our database so three are able to connect to the database that we just created so here we will have to change two things the first one is this database so click on this folder here and find the database that we have just created mine was on desktop I'm going to click on desktop and it was this gym DB okay so I'm going to open that database that is the first part that I have to change and then the second part is to change this TCP IP to local okay that is default so if I click OK here and if I double click here now you should be able to see the tables of your database if you are not able to see these tables there are two steps that you can do in order to fix it first one is you need to have your server running if it is not running then please start your interbase server through your interbase manager okay and then the second step is again you can right click on this employee and click on modify and here you are going to change your server to the text that I'm going to put here on the screen so it is localhost slash GDs underscore DB okay and click OK and then it should work and you should be able to see the tables of your database so now that we have specified all the data necessary for our connection so we have said that we want to connect to a database that is local so it is on our computer it is called jimdb and now what I want to do is I want to use this connection for the applications we are currently building and that is very easy to do so in order to use this connection with our c plus application that we are currently building just drag and drop it to this form here okay and then one more thing that you need to do is inside this object inspector you need to say that connected is true okay because by default it is not connected that is all now how can we show the data from these tables that we created again it's extremely easy just drag and drop the table that you want okay and here again you need to set the connected or active active property to True okay and in order to show the data in order to see the data you will need to have some sort of grid where the data from that table is going to be shown so I'm going to find a grid inside this palette so I will call it E string grid okay that is the name of the control that we need okay and what I want to do is I want to say that this grid will show the data from this table here how do you do that just right click on the table and click on bind visually okay and here you have your gym users table and you have your string grid and to connect them just do this and as you can see here we have all the data from our table shown inside this grid and again if you don't see the data please make sure that your active state of your gym user stable is set on true because if it is false you will not be able to see the data let's just make this a little bit bigger so that we can see all the data on the screen okay and I will do the same for membership types table so just drag and drop table on your form and I will add a new D string Grid in order to be able to show the data from my table inside this grid and I want to connect these two so here is my membership table and here is my string grid and I will just connect them like this okay and the reason why we are not seeing the data here is because our membership type stable is not connected so you need to set its active state to true and you will be able to see the data from your table now this that I have just demonstrated is a very cool feature that c plus Builder has and it is called live binding and it enables us to see this data from the database while we are working and developing our app so if I run this program let's see what we will get we should have an application that shows gym users and membership types and I'm running it for the first time so it's going to take a little bit longer okay so here is our gym users and here is our memberships table now what I would like to do is I would like to be able to add new records add new gym users and maybe edit existing ones delete and so on so now I'm going to show you how you can do that close this application and there is a control called Navigator you can find it inside this palette so I'll find Navigator so T bind Navigator and I will put it here we will use it for this gym users table and in order to connect these two you just do again this okay so now if I run this application let's see what we can do with this Navigator we can use it in order to add new users delete existing users or update them navigate through pages if we have a lot of users and so on so let's try that out let's add a new user I will give him id5 and let's say that he has membership type two and his first name is Mark Zuckerberg Mark Zuck okay and I will just click on this check mark in order to confirm my transaction and with that we have successfully added new user now if I close this application and open it again you should see that now we have Mark Zuckerberg as the fifth user so that data has been stored to our database and it doesn't matter if you close your application or you turn off your PC you will have that data permanently stored in your database until you delete it from the database which you can do and you can do that by selecting the record that you want to delete and then clicking on this minus sign okay and it says delete record I say okay and the record has been deleted okay and what else you can do you can also edit existing data so let's say Elon Ilona musk okay and I'm going to confirm that and that should be also stored in my database now let's also create this navigator for our membership types because I want to show you something else which is very important so I'm going to close the application I will add another Navigator okay I will put it here okay and I will just connect my membership types table with this Navigator and if I run this application now we should be able to use that second Navigator in order to add new records to our membership types delete existing or update existing records inside this table so what is going to happen if I try to delete this yearly membership so I'm going to select yearly membership and then click on this minus and if I try to delete record we are going to get an error now the reason why we are getting this error it says violation of foreign key constraint on table gym users this error here means that you are trying to delete a record from this membership type stable that is used as a foreign key inside another table and that is gym user stable so let's see what I'm talking about so we try to delete this record three so yearly membership type but we cannot do that as long as we have users inside this gym users table which are using that membership so here I have saldina and Jeff and Ilona using yearly membership type so we cannot delete that membership type because that would cause a problem inside this gym users table so in order to be able to delete this record you will first need to delete all the users that are using that membership type and then you will be able to delete that membership so I am going to do that now I will delete Selena then Jeff okay and Ilona I'm deleting Ilona mask okay and now if I try to delete this yearly membership as you can see it has been removed without any problems and if I close this application and open it again and as you can see our database is almost empty we have only one gem user and only two memberships which means that I will have to readd those users that we just deleted so I'm going to show you how you can add one user and one membership type and then you can use the same logic in order to add as many records as you want and I'll also pause the video and add a couple of records off camera so let's return membership type yearly membership type that we've just deleted so I will say plus and here I will say that membership ID is going to be three please make sure that you are using a unique ID that does not exist already okay and here membership name is going to be yearly okay and I will just confirm that transaction okay and now I want to add a user for that membership type let's say to add gym user with id1 he is going to use membership type 3 and his name or her name is going to be seldina last name is going to be murak and I'm going to confirm that transaction and now I'm going to add a couple of more users and then I will be back so I have added a couple of Records here and I have also moved these tables around a little bit so that I have enough space to show you something else that we are going to do with this app but basically so far we have built an entire crowd application meaning create read update and delete those are all things that we can now perform with this application and we have done that in just a couple of minutes thanks to the C plus Builder right studio and that is the reason why I like it so much because it is extremely easy to build fully functional applications in just a couple of minutes that can be used immediately basically so again links all the links for the tools that I'm using in this video will be linked in the description so let's see what else we can do with this application let's see for example that we are the owner of this gym so what I want to do as an owner I want to be able to for example click on a specific membership type and I want to be able to see all the users that are subscribed to that membership type so let's see how we are going to implement that so in order to do that we will need to write a query that is going to select all of gym users who have membership type which we have clicked on so let's add a query I'm going to search inside this palette for FD query okay and I am going to put it here and here we need to write a query so I'm going to double click here and I will write a query inside this console so here is the query that I want to paste inside this SQL command window okay now if I try to execute this query we are not going to get anything and the reason for that is because here we are seeing the following please select everything from gym users table where membership ID of that user is equal to this input parameter this cosine and then the name means hey I'm going to pass you this as an input parameter and that input parameter is going to be passed by clicking on our memberships as I explained but in this situation we don't have anything to pass so in order to test this query I'm going to manually hard code membership ID let's say three and if I execute it now you can see that we have all of the users with membership ID3 if I change this to 2 and I execute it again again we have users with membership ID too different users but those are users with membership ID too so that is hard coding membership ID but what I want to do is I want for that membership ID to be passed dynamically when we click on the membership that we desire so in order to say that again you put common sign and then membership ID and again if I execute this we are not going to get anything any records because we need to pass this as a parameter so now let's see how we are going to do that click ok to save this query and now let's see how we can pass a parameter to this query so for this we need a control called data source and you can find it inside this palette so data source t data source and I will drag and drop it here okay and to this data source I will tell that this data source that it is going to draw data from this table memberships table so you set its data set property to membership types table okay and now what you are going to do is you are going to tell your FD query hey you will use this data source one this data set so here you need to find a property called Master Source okay and you will set its Master source to data source one which is the one that we've just added and then here for master Fields what you need to do is you need to say let's just return this back okay so here you need to say that you want to include this membership ID field okay so you need to move it to this included fields and what this will do is that every time that you click on a specific membership type it is going to trigger the execute solution of this query and pass that selected membership type as a input parameter and then we are going to get all of the users that use that membership type okay now one last step in order to be able to see those users that we get as a result of the execution of this query we need to have some sort of grid to show those users so again I'm going to use tstring grid okay and I will drag and drop it here make it a little bit bigger okay and I want to connect this T string grid with this query so here is my FD query one and here is my D string grid so I'll just connect those two like this okay and one more thing in order to be able to see the data here what you need to do is the same that you did with tables you need to set the state of the query connection to active so select your FD query and tell it that it is now active Okay and now you will be able to see your data so now let's test our application I'm going to run this application and let's see if we have built everything correctly okay we have one error and that error is that the program is still running so I'm going to close it from the previous time that we have started it so let's run it again okay and now as you can see if I select weekly membership we have only one user Satoshi Nakamoto okay and then if I select two we have multiple users and then for a yearly membership again we have four users so this is a fully functional application that we have built in however long this video is I'm going to see that after edit and let's see if it has bugs let's delete for example Bill Gates his membership type is two so if I delete bill okay let's now select membership id2 to see if we are going to see Bill no Bill Bill left the chat Bill left the gym actually so while we have this application I'm going to show you one more thing and that is how you can style it a little bit I'm going to show you a couple of things and then I will leave the rest to you because it would probably take an entire video to teach you everything about styling and if you want me to make that video let me know in the comment section and now I'm going to show you two different ways that you can style this application this form so let's close the app and here in this object inspector you can do uh styling of some properties so for example if I select this first grid that we added and I navigate to text settings there is property called text settings here you can change the font you can change uh its color alignment and so on so let's change the color for example to be um let's see let's say brown okay and then for font I am going to set this bolded font semibolded font okay and as you can see that has changed so here in this object inspector you can find many different properties that you can play with in order to change the style of your controls and then another way to do the styling is go to this unit1.cpp and there you can write C plus plus code in order to change the style of your controls so one thing that I want to change are the names of the headers of these controls so gym user membership type first name last name and so on so in order to do that I will need to access this grid so I will have to check what is the name of this grid because that is the property that we use in order to access every single control from C plus code we use its name so I will have to access it through this form and then this grid and then I can change its style so the name of the form that property is here inside object is packed inspector so name is form one and then the name of this grid is string grid1 you can change that name let's change it to be called gym users grid like this okay and I'm going to copy that name because we will need it okay so now if I navigate to unit one.cbp that is where we write our C plus plus code here I'm going to say form one and then I use this symbol because we are working with pointers in the situation and I will say that I want to access my gym users grid and I want to access its columns so I will say column and I want to access the first one that is going to be the one with the index 0 and what I want to do is I want to text I want to set its header so I will say header is equal to and here I will specify the text for the header and if you remember the First Column is this one it is gym user ID so I will change that to say only ID like this okay and we have an error here so the name of the property is not column it's columns like this okay so with this we have changed the header of the First Column we have three more columns I'm going to type that code very quickly and I will be back okay so with this we have changed the headers of every column inside our grid so if I run my application let's see what we are going to get and as you can see here it says ID membership T membership type first name last name so this bothers me so what I want to do is I want to make this column a little bit bigger this one a little bit smaller this one also smaller and then this one is also going to be smaller so that it fits the text that is inside it so I will copy this part here paste it and instead of setting the header what I want to set is width and let's say that width of the First Column is going to be equal to 20 that should be enough for ID and then let's also copy this three more times for the remaining three columns so column one is going to be let's say 120 and then column 2 which is first name let's say 80 and then column three last name that should be 80 as well so if I run the program let's see what we have okay and as you can see here we have these columns with the changed width and one more thing that I want to do is I want to change the width of the entire grid so let's do that as well let's say form One Gym user's grid and its width is going to be some of these four and that is 300 I believe okay so if I run the app again we should see that change applied okay and as you can see here are changed sizes of all of these columns okay so now I will do the rest of the styling for this form and then I will be back to show you the final result uh and also all the codes from the studio is going to be pinned in the comment that is because many people don't know how to use git and if you want me to film a video about GitHub and teach you everything that you need to know in order to use GitHub and work with it let me know in the comment section so here is the final result you can see the code that I have changed here and I have also added a couple of labels to make it more understandable to the user and changed a few colors and fonts through object inspector and it works as it should okay so I hope that you enjoyed this video if you did please give it a big thumbs up because that way you tell to the YouTube algorithm to recommend this video to other people who are also learning programming and by sharing knowledge you are helping other people so that in the future when you don't understand something and you need help other people are encouraged to share their knowledge with you so that way we can all learn from each other and grow together so thank you very much for watching and I am going to see you in some other video bye foreign
