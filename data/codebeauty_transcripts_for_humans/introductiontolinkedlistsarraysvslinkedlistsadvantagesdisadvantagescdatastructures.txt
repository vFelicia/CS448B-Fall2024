With timestamps:

00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about two
00:04 - topics the first one is linked lists so
00:07 - i want to explain what are linked lists
00:09 - how are they used i want to give you
00:11 - some important advantages and
00:13 - disadvantages of linked lists and i will
00:16 - also show you how you can implement your
00:18 - own linked list using c plus programming
00:21 - language and i will cover some very
00:23 - important differences between arrays and
00:26 - linked lists so this video is going to
00:28 - be some sort of introduction into linked
00:31 - lists
00:32 - and if you have more specific questions
00:34 - related to this topic please put those
00:36 - in the comments down below and i will
00:38 - make more videos related to linked lists
00:41 - so what is a linked list a linked list
00:44 - is a data structure which means that it
00:47 - is used to store and organize data but
00:51 - unlike arrays which we already have
00:53 - talked about and i will link that video
00:55 - here so unlike arrays which store data
00:59 - one after the other in memory a linked
01:02 - list is a non-continuous collection
01:04 - which means that it does not store data
01:07 - one after the other but the elements of
01:10 - a linked list are randomly positioned in
01:13 - your memory so all over the place now
01:16 - your question might be okay saldina but
01:19 - considering that array stores elements
01:21 - one after the other it's pretty easy to
01:23 - access those elements but how do you
01:26 - access elements of a linked list well
01:29 - the answer is that you need to link the
01:32 - elements of a list in order to be able
01:35 - to access all of the elements so in
01:38 - order to explain this let's use the
01:40 - example of a linked list that has four
01:43 - elements for example
01:45 - now
01:46 - this here is going to be our first
01:48 - element and that element is also known
01:50 - as head now this element here stores two
01:54 - things the first thing is going to be
01:56 - the value of that element so let's say
01:59 - for example that will be a value of
02:01 - number one and then second thing that
02:04 - this head element stores is going to be
02:06 - the address of the next element so it
02:10 - has a pointer to the second element and
02:13 - it says hey in case that you are looking
02:15 - for the second element of this list here
02:18 - is a pointer here is the address of that
02:20 - element so here is our second element
02:23 - now that second element also stores two
02:26 - things the first one is going to be the
02:28 - value so let's say that will be number
02:31 - two and then the second one will be the
02:33 - address of the third element so it has a
02:36 - pointer to the next element so here is
02:39 - the third element and then third element
02:41 - towards the value which is for example
02:44 - number three and then it has the address
02:46 - of the next element so a pointer to the
02:48 - element number four which is here for
02:51 - example and then this fourth element
02:54 - will also store the value which is
02:56 - number four for example and then instead
02:59 - of having pointer to the fifth element
03:02 - it stores the value of null because
03:05 - there is no fifth element because this
03:07 - one is the last one so the idea behind
03:11 - linked list is that each element stores
03:14 - two things the first one is going to be
03:16 - the value of that element and then
03:18 - second thing is the pointer to the next
03:21 - element and then the last element stores
03:24 - the value and then instead of storing
03:26 - pointer to the next element it stores
03:29 - null because there is no next element
03:31 - because that one is the last one
03:35 - so what are some advantages and
03:36 - disadvantages of linked lists when
03:39 - compared with arrays the biggest
03:41 - advantage is that arrays have fixed size
03:46 - and linked lists don't link lists have
03:49 - dynamic size which means when you create
03:53 - an array when you allocate memory for
03:55 - your array it stays that size forever
03:59 - which means that you cannot add new
04:01 - elements nor remove existing elements
04:04 - and change the size of that array but in
04:08 - case of linked lists you can always add
04:11 - new elements and remove existing
04:14 - elements so that is the biggest
04:16 - advantage of linked lists when compared
04:18 - with arrays now with this being said
04:21 - there are some disadvantages as well
04:25 - the first disadvantage is that random
04:28 - access to the elements of a linked list
04:30 - is not allowed what does this mean well
04:34 - how will you access forward element of
04:37 - your linked list for example can you do
04:39 - that directly the answer to that
04:41 - question is no
04:43 - why because you don't know where your
04:46 - fourth element is because it can be
04:48 - anywhere in your memory because elements
04:51 - are randomly positioned in your memory
04:53 - so who knows where the fourth element is
04:57 - the answer is third element because it
05:00 - stores a pointer to the fourth element
05:02 - and then who knows where the third
05:04 - element is the second element who knows
05:07 - where the second element is the first
05:09 - one
05:10 - and you only know where your first
05:13 - element is so you only know where your
05:15 - head element is and then your head
05:18 - element has the pointer to the second
05:19 - one and second one has the pointer to
05:21 - the third one and third one to the
05:23 - fourth one and so on so in case that you
05:26 - want to access the fourth element you
05:28 - need to traverse this path and in case
05:31 - that you want to access the 400 element
05:33 - or 4 thousandth element you need to
05:36 - traverse very very very long path
05:40 - so that is one disadvantage of linked
05:43 - lists whereas an array that has a fixed
05:46 - size and every array has a fixed size
05:49 - the access to the elements can be direct
05:52 - because you already know hey this is my
05:54 - array and in order to access a fifth
05:58 - element for example i can use the name
06:00 - of the array and then the index of that
06:03 - fifth element which is very very quick
06:07 - so that is going to be one disadvantage
06:09 - of linked lists and then second
06:11 - disadvantage is that linked lists need
06:13 - more memory why
06:15 - well as you already know the element of
06:18 - an array stores only one thing which is
06:20 - the value of that element but the
06:22 - element of a linked list needs to store
06:25 - two things the value of the element and
06:27 - then a pointer to the next element so
06:30 - that is going to take more space inside
06:32 - your memory so you need to do that for
06:35 - each element of your linked list and
06:38 - that is going to consume a lot more
06:40 - memory than if you stored that data
06:42 - inside your array
06:43 - now
06:44 - does this mean that arrays are better
06:47 - than linked lists the answer is
06:49 - absolutely not
06:51 - why well because there is no such thing
06:54 - as better in general you will need to
06:57 - choose what is better for each specific
07:00 - situation so you will need to choose
07:02 - what is more important for your program
07:04 - what is more important for the problem
07:06 - that you are trying to solve is it more
07:09 - important for that collection to be able
07:11 - to access elements very fast or will you
07:14 - be constantly adding new elements and
07:17 - removing existing elements and you need
07:20 - to take that decision and decide which
07:22 - one you will use either linked lists or
07:26 - arrays
07:27 - another thing that i promised is that i
07:29 - will teach you how to implement a linked
07:32 - list using c plus programming language
07:36 - and here i will implement a simple
07:38 - linked list that has only three elements
07:40 - but that is going to be enough to
07:43 - demonstrate how linked lists work and
07:45 - then in the future i will be making more
07:47 - videos related to linked lists so make
07:49 - sure to put all your questions in the
07:51 - comments down below so that i can read
07:53 - those questions by the time that i make
07:56 - my next video about linked lists
07:59 - now another thing that i want to explain
08:01 - and remind you is that we said that each
08:04 - element of a linked list is going to
08:07 - consist of two parts the first part is
08:10 - going to be the value of that element
08:12 - and then the second part is going to be
08:14 - a pointer to the next element so this
08:18 - means that you cannot represent an
08:21 - element of a linked list with a built-in
08:24 - data type
08:25 - but you need to create your own
08:27 - user-defined data type in order to
08:30 - represent an element of a linked list
08:33 - now i already made videos related to
08:35 - classes and structures and i will link a
08:38 - video related to classes here so make
08:40 - sure to watch that video in case that
08:42 - you don't understand what are
08:44 - user-defined data types and then
08:46 - as well in the description i will link
08:48 - both videos about classes and structures
08:52 - so
08:52 - here we will be using a class which is a
08:55 - user-defined data type in order to
08:58 - represent one element of a linked list
09:03 - so in order to name this class you can
09:05 - use the name element but what is used
09:08 - more often is the name node so node is
09:11 - an element of a linked list so that is
09:14 - exactly what i'm going to do i'm going
09:16 - to create a class which i will call node
09:19 - so let's do that
09:20 - so here i am going to say
09:23 - class
09:24 - and then let's name my class node as i
09:27 - said
09:28 - okay and here inside this class i want
09:31 - to put two parts of each node which are
09:34 - the value of the node and then a pointer
09:36 - to the next node so a pointer to the
09:38 - next element so let's say for example
09:41 - that each element so each node of our
09:44 - linked list will store an integer value
09:46 - and a pointer to the next element so i'm
09:49 - going to say int
09:51 - value
09:52 - so this is going to be the first part
09:54 - and then the second part will be a
09:56 - pointer to the next node so node
10:00 - pointer and let's call it next
10:03 - like this
10:04 - now one very important thing that you
10:06 - will not know if you are not familiar
10:08 - with classes is that all of the members
10:11 - of a class are private by default which
10:13 - means that you will not be able to
10:15 - access them outside of your class and in
10:18 - order to solve that problem you need to
10:20 - use public access modifier so i'm going
10:23 - to say here
10:25 - public
10:26 - like this
10:27 - now these elements after adding this
10:30 - public access modifier will be public
10:33 - which means they will be accessible
10:34 - outside of this class here and again if
10:37 - you are not familiar with this make sure
10:39 - to watch my uh full course my playlist
10:42 - related to object-oriented programming
10:44 - where i talk about classes and access
10:46 - modifiers and many more things and i
10:48 - will link that playlist here and in the
10:51 - description of this video as well
10:53 - so with this we have created a class
10:56 - called node which is a user defined type
10:59 - which is called node and that represents
11:02 - one element of a linked list so what i
11:05 - want to do now is i want to create three
11:07 - elements because we said that our linked
11:09 - list will have three elements so let's
11:11 - do that here in our main function
11:14 - i want to create a pointer to the first
11:16 - element which is going to be node
11:19 - pointer and i'm going to call that
11:21 - element head like this you can use the
11:24 - name first if you want but this is
11:27 - pretty standard naming convention uh so
11:29 - i'm going to use the name had because if
11:31 - another developer comes and tries to
11:34 - read your code and he sees the name head
11:36 - he will know hey this is the first
11:38 - element of a linked list so this is why
11:41 - you should also try to use these
11:43 - standardized naming conventions so i'm
11:46 - going to say that my head will be equal
11:48 - to new node
11:51 - like this and i still have not assigned
11:53 - any values i have just allocated the
11:56 - space for my first node and then
11:59 - considering that this list will have two
12:01 - more elements let's create those two so
12:04 - i'm going to copy this line of code and
12:06 - then my second node will be called
12:09 - second
12:10 - like this and then let's call the third
12:12 - node third
12:15 - like this perfect so with this i have
12:18 - created three pointers to three nodes
12:21 - head second and third and i still have
12:24 - not assigned any value so i still have
12:26 - not initialized the values of the value
12:29 - of each node and then pointer to the
12:31 - next node so now i'm going to do that
12:34 - but first i won't say if you are not
12:36 - familiar with pointers and if you don't
12:38 - understand what are pointers i have a
12:41 - full playlist where i explain what our
12:43 - pointers and how to work with pointers
12:46 - and i will link that playlist here and
12:48 - in the description of this video in case
12:50 - that you want to watch that and
12:52 - understand this in more detail so
12:55 - what i want to do next is i want to
12:57 - assign for each one of these nodes i
13:00 - want to assign the value and the pointer
13:02 - to the next element so here i'm going to
13:05 - say that my head
13:07 - node will
13:09 - inside its value property it will store
13:12 - the value of
13:13 - 1 so the value of our first node will
13:16 - will be 1 and this symbol is used when
13:19 - you are trying to access members of your
13:21 - class in case that you are using
13:24 - pointers like we are here so you use
13:27 - this symbol instead of dot symbol so i'm
13:31 - going to return it to this symbol okay
13:34 - and then let's do this same thing for
13:37 - our second and third element so i'm
13:39 - going to say that the second element
13:42 - value
13:43 - will be equal to two
13:45 - and then third element the value of that
13:49 - element will be equal to three for
13:52 - example now with this we have only
13:55 - assigned the values to these three
13:57 - elements but we have still not linked
14:00 - the elements of our list and that is
14:02 - very important step so it is very
14:05 - important each time that you are
14:06 - creating a linked list to link all of
14:09 - the elements of that list so how do you
14:12 - do that well let's do that first for our
14:15 - head element so here i'm going to say
14:17 - that my head element
14:19 - the value of its next property is going
14:23 - to be
14:24 - this
14:24 - second element of the linked list like
14:28 - this so now what i'm saying is for this
14:31 - head element the value of this next
14:35 - pointer here will be this pointer here
14:38 - so our head element will point to the
14:40 - second element so first points to the
14:43 - second and then second needs to point to
14:46 - the third and then third considering
14:48 - that it is going to be the last will
14:50 - point to null so let's do that remaining
14:53 - part so now i'm going to say second
14:57 - next will be
14:59 - third
15:00 - so now my second element is pointing to
15:02 - the third one and then third element
15:05 - considering that it is the last as i
15:07 - already said
15:09 - the value of its next pointer will be
15:12 - equal to null
15:14 - okay and now with this here we have
15:17 - successfully initialized the values of
15:20 - each element and then we have also
15:24 - linked our list so that
15:26 - the first element points to the second
15:28 - and then second points to the third and
15:30 - then third points to null because it is
15:33 - the last element of this linked list
15:37 - so now your question might be okay
15:39 - salina but how can i access the elements
15:42 - of this list here how can i print for
15:44 - example the elements of this list to my
15:47 - user well let's do that next let me show
15:50 - you how you can access and write out all
15:53 - of the elements of your list and let's
15:55 - also create a function to do that
15:57 - because i want to show you how you can
16:00 - pass a linked list to a function so
16:03 - let's do that here i am going to create
16:06 - a function of return type void and let's
16:09 - call that function print list
16:13 - like this
16:15 - okay
16:16 - now
16:17 - what this function here needs to receive
16:20 - in order to be able to access and print
16:22 - all of the elements of this list that is
16:25 - a question for you and that is a logical
16:28 - question so make sure to pause the video
16:30 - and think about it and then write your
16:32 - answer in the comments section uh before
16:35 - you listen to my answer
16:37 - so the answer is that it needs to
16:39 - receive the head element which is the
16:41 - first element why well because the first
16:45 - element has a pointer to the second
16:47 - element and then second element has a
16:49 - pointer to the third element and then
16:50 - third considering that it is the last it
16:53 - will not point to the next element
16:55 - because there is no next but it will
16:57 - point to null and when we come to null
17:00 - we will know hey this is the last
17:03 - element so by passing the first element
17:06 - to this function here we will be able to
17:09 - access
17:10 - all of the other elements of that list
17:12 - no matter how many elements that list
17:14 - contains in this situation it is 3 but
17:17 - you can have uh 300 elements or 3 000 or
17:20 - 300 000 depending on what kind of
17:23 - program you are building
17:25 - so the invocation of this function here
17:28 - will look like this
17:30 - so you will say
17:32 - print list and then you will pass to
17:35 - this function your head
17:37 - element like this and then considering
17:40 - here that you are passing a node pointer
17:44 - that means that here you need to receive
17:46 - a node pointer as well so i'm going to
17:48 - say node pointer and i'm going to call
17:51 - this parameter and
17:53 - okay
17:54 - now what this function here needs to do
17:57 - is it needs to access all of the
18:00 - elements of the list starting from this
18:03 - element here and to print the values of
18:06 - those elements to write those values out
18:09 - to our user so in order to do that i'm
18:12 - going to use a while loop so i'm going
18:15 - to say while
18:18 - like this and then
18:20 - inside this while loop i will do two
18:23 - things the first thing is going to be to
18:25 - print the value of the current element
18:28 - and then the second thing will be to
18:30 - move to the next element so let's do
18:33 - that let's say c out
18:35 - n
18:37 - dot value
18:38 - okay and let's add
18:40 - n line and again you use this symbol
18:42 - here to access elements of your class
18:45 - when you are using pointers so this
18:47 - symbol is used instead of dot even
18:49 - though i sometimes say dot it is still
18:52 - this symbol here and then the second
18:54 - part is going to be to move our node to
18:57 - the next node so i'm going to say that
19:00 - now my n will be equal to whatever our m
19:04 - dot next is
19:06 - like this
19:07 - so
19:08 - we are going to do this
19:10 - while
19:11 - our n
19:12 - is not equal to null
19:15 - perfect now how this while loop is going
19:18 - to behave in this situation here in the
19:21 - situation of a list that has three
19:23 - elements well
19:25 - when we invoke this print list function
19:28 - when we invoke it here we are going to
19:30 - pass our head node to this print list
19:33 - function which means that it will
19:35 - receive this element here so we enter
19:39 - inside this function here and the first
19:41 - thing that happens is it tries to go
19:44 - into a while loop so it checks is n
19:47 - different than null now what is n it is
19:51 - this head element so is this different
19:53 - than null the answer is yes so we can
19:56 - enter inside this while loop so we then
20:00 - print out n value which is one and then
20:03 - we perform this second line of code here
20:06 - which says now i'm going to move or to
20:09 - change the value of my end to whatever
20:12 - and next is holding and in this
20:14 - situation any next or head next is
20:18 - second element so it is this one here so
20:22 - it tries to go into a while loop again
20:25 - and then it checks is n different than
20:27 - null the answer is yes this here is
20:30 - different than null so we can go into
20:32 - our while loop again so we write out
20:35 - again n value which is
20:38 - two as you can see here and then we do
20:40 - this second line of code which says now
20:43 - n is going to be whatever and next is
20:46 - and that is third element which is this
20:50 - one here and then it comes here and
20:52 - tries to enter in this while loop again
20:54 - so it checks is n different than null is
20:57 - this here different than null the answer
20:59 - is yes this third element is legit
21:01 - element which has the value of three and
21:03 - it has this pointer to null so we can
21:06 - enter inside this while loop again so we
21:09 - print out the value of three here and
21:12 - then we move to this second line and
21:14 - this second line of code does the
21:16 - following it says now my n will be
21:19 - whatever n next is and in this situation
21:22 - third next is null so that means that in
21:25 - this line of code our n becomes null so
21:29 - when we try to enter this while loop
21:31 - again it checks is null different than
21:35 - null and the answer to that is no they
21:37 - are equal so that means that now we
21:40 - cannot enter inside this loop anymore so
21:43 - at that point we finished executing this
21:45 - while loop and we are going to leave
21:47 - this print list function which means
21:49 - that we have successfully print out all
21:52 - of the elements of this linked list here
21:56 - and in order to prove what i just
21:58 - explained i am going to run my program
22:01 - and as you can see indeed we have
22:04 - successfully printed out all of the
22:06 - elements of this linked list here just
22:09 - by passing the head element to this
22:12 - print list function
22:15 - okay
22:16 - so i hope that this video was helpful
22:18 - and i will make more videos related to
22:20 - linked lists and data structures in the
22:22 - future so if you want to watch those
22:24 - videos make sure to subscribe to my
22:25 - channel and then if you want to get a
22:27 - notification from me each time that i
22:29 - publish a new video you can click the
22:31 - bell icon and then the most important
22:34 - thing for the youtube algorithm is
22:37 - to give this video a thumbs up so that
22:39 - we can grow this channel and reach more
22:41 - people and then i also wouldn't mind if
22:44 - you decided to share this video with
22:45 - your friends or your colleagues so thank
22:48 - you very much for watching and i am
22:50 - going to see you in my next video bye

Cleaned transcript:

hi everyone and welcome to my channel in this video i want to talk about two topics the first one is linked lists so i want to explain what are linked lists how are they used i want to give you some important advantages and disadvantages of linked lists and i will also show you how you can implement your own linked list using c plus programming language and i will cover some very important differences between arrays and linked lists so this video is going to be some sort of introduction into linked lists and if you have more specific questions related to this topic please put those in the comments down below and i will make more videos related to linked lists so what is a linked list a linked list is a data structure which means that it is used to store and organize data but unlike arrays which we already have talked about and i will link that video here so unlike arrays which store data one after the other in memory a linked list is a noncontinuous collection which means that it does not store data one after the other but the elements of a linked list are randomly positioned in your memory so all over the place now your question might be okay saldina but considering that array stores elements one after the other it's pretty easy to access those elements but how do you access elements of a linked list well the answer is that you need to link the elements of a list in order to be able to access all of the elements so in order to explain this let's use the example of a linked list that has four elements for example now this here is going to be our first element and that element is also known as head now this element here stores two things the first thing is going to be the value of that element so let's say for example that will be a value of number one and then second thing that this head element stores is going to be the address of the next element so it has a pointer to the second element and it says hey in case that you are looking for the second element of this list here is a pointer here is the address of that element so here is our second element now that second element also stores two things the first one is going to be the value so let's say that will be number two and then the second one will be the address of the third element so it has a pointer to the next element so here is the third element and then third element towards the value which is for example number three and then it has the address of the next element so a pointer to the element number four which is here for example and then this fourth element will also store the value which is number four for example and then instead of having pointer to the fifth element it stores the value of null because there is no fifth element because this one is the last one so the idea behind linked list is that each element stores two things the first one is going to be the value of that element and then second thing is the pointer to the next element and then the last element stores the value and then instead of storing pointer to the next element it stores null because there is no next element because that one is the last one so what are some advantages and disadvantages of linked lists when compared with arrays the biggest advantage is that arrays have fixed size and linked lists don't link lists have dynamic size which means when you create an array when you allocate memory for your array it stays that size forever which means that you cannot add new elements nor remove existing elements and change the size of that array but in case of linked lists you can always add new elements and remove existing elements so that is the biggest advantage of linked lists when compared with arrays now with this being said there are some disadvantages as well the first disadvantage is that random access to the elements of a linked list is not allowed what does this mean well how will you access forward element of your linked list for example can you do that directly the answer to that question is no why because you don't know where your fourth element is because it can be anywhere in your memory because elements are randomly positioned in your memory so who knows where the fourth element is the answer is third element because it stores a pointer to the fourth element and then who knows where the third element is the second element who knows where the second element is the first one and you only know where your first element is so you only know where your head element is and then your head element has the pointer to the second one and second one has the pointer to the third one and third one to the fourth one and so on so in case that you want to access the fourth element you need to traverse this path and in case that you want to access the 400 element or 4 thousandth element you need to traverse very very very long path so that is one disadvantage of linked lists whereas an array that has a fixed size and every array has a fixed size the access to the elements can be direct because you already know hey this is my array and in order to access a fifth element for example i can use the name of the array and then the index of that fifth element which is very very quick so that is going to be one disadvantage of linked lists and then second disadvantage is that linked lists need more memory why well as you already know the element of an array stores only one thing which is the value of that element but the element of a linked list needs to store two things the value of the element and then a pointer to the next element so that is going to take more space inside your memory so you need to do that for each element of your linked list and that is going to consume a lot more memory than if you stored that data inside your array now does this mean that arrays are better than linked lists the answer is absolutely not why well because there is no such thing as better in general you will need to choose what is better for each specific situation so you will need to choose what is more important for your program what is more important for the problem that you are trying to solve is it more important for that collection to be able to access elements very fast or will you be constantly adding new elements and removing existing elements and you need to take that decision and decide which one you will use either linked lists or arrays another thing that i promised is that i will teach you how to implement a linked list using c plus programming language and here i will implement a simple linked list that has only three elements but that is going to be enough to demonstrate how linked lists work and then in the future i will be making more videos related to linked lists so make sure to put all your questions in the comments down below so that i can read those questions by the time that i make my next video about linked lists now another thing that i want to explain and remind you is that we said that each element of a linked list is going to consist of two parts the first part is going to be the value of that element and then the second part is going to be a pointer to the next element so this means that you cannot represent an element of a linked list with a builtin data type but you need to create your own userdefined data type in order to represent an element of a linked list now i already made videos related to classes and structures and i will link a video related to classes here so make sure to watch that video in case that you don't understand what are userdefined data types and then as well in the description i will link both videos about classes and structures so here we will be using a class which is a userdefined data type in order to represent one element of a linked list so in order to name this class you can use the name element but what is used more often is the name node so node is an element of a linked list so that is exactly what i'm going to do i'm going to create a class which i will call node so let's do that so here i am going to say class and then let's name my class node as i said okay and here inside this class i want to put two parts of each node which are the value of the node and then a pointer to the next node so a pointer to the next element so let's say for example that each element so each node of our linked list will store an integer value and a pointer to the next element so i'm going to say int value so this is going to be the first part and then the second part will be a pointer to the next node so node pointer and let's call it next like this now one very important thing that you will not know if you are not familiar with classes is that all of the members of a class are private by default which means that you will not be able to access them outside of your class and in order to solve that problem you need to use public access modifier so i'm going to say here public like this now these elements after adding this public access modifier will be public which means they will be accessible outside of this class here and again if you are not familiar with this make sure to watch my uh full course my playlist related to objectoriented programming where i talk about classes and access modifiers and many more things and i will link that playlist here and in the description of this video as well so with this we have created a class called node which is a user defined type which is called node and that represents one element of a linked list so what i want to do now is i want to create three elements because we said that our linked list will have three elements so let's do that here in our main function i want to create a pointer to the first element which is going to be node pointer and i'm going to call that element head like this you can use the name first if you want but this is pretty standard naming convention uh so i'm going to use the name had because if another developer comes and tries to read your code and he sees the name head he will know hey this is the first element of a linked list so this is why you should also try to use these standardized naming conventions so i'm going to say that my head will be equal to new node like this and i still have not assigned any values i have just allocated the space for my first node and then considering that this list will have two more elements let's create those two so i'm going to copy this line of code and then my second node will be called second like this and then let's call the third node third like this perfect so with this i have created three pointers to three nodes head second and third and i still have not assigned any value so i still have not initialized the values of the value of each node and then pointer to the next node so now i'm going to do that but first i won't say if you are not familiar with pointers and if you don't understand what are pointers i have a full playlist where i explain what our pointers and how to work with pointers and i will link that playlist here and in the description of this video in case that you want to watch that and understand this in more detail so what i want to do next is i want to assign for each one of these nodes i want to assign the value and the pointer to the next element so here i'm going to say that my head node will inside its value property it will store the value of 1 so the value of our first node will will be 1 and this symbol is used when you are trying to access members of your class in case that you are using pointers like we are here so you use this symbol instead of dot symbol so i'm going to return it to this symbol okay and then let's do this same thing for our second and third element so i'm going to say that the second element value will be equal to two and then third element the value of that element will be equal to three for example now with this we have only assigned the values to these three elements but we have still not linked the elements of our list and that is very important step so it is very important each time that you are creating a linked list to link all of the elements of that list so how do you do that well let's do that first for our head element so here i'm going to say that my head element the value of its next property is going to be this second element of the linked list like this so now what i'm saying is for this head element the value of this next pointer here will be this pointer here so our head element will point to the second element so first points to the second and then second needs to point to the third and then third considering that it is going to be the last will point to null so let's do that remaining part so now i'm going to say second next will be third so now my second element is pointing to the third one and then third element considering that it is the last as i already said the value of its next pointer will be equal to null okay and now with this here we have successfully initialized the values of each element and then we have also linked our list so that the first element points to the second and then second points to the third and then third points to null because it is the last element of this linked list so now your question might be okay salina but how can i access the elements of this list here how can i print for example the elements of this list to my user well let's do that next let me show you how you can access and write out all of the elements of your list and let's also create a function to do that because i want to show you how you can pass a linked list to a function so let's do that here i am going to create a function of return type void and let's call that function print list like this okay now what this function here needs to receive in order to be able to access and print all of the elements of this list that is a question for you and that is a logical question so make sure to pause the video and think about it and then write your answer in the comments section uh before you listen to my answer so the answer is that it needs to receive the head element which is the first element why well because the first element has a pointer to the second element and then second element has a pointer to the third element and then third considering that it is the last it will not point to the next element because there is no next but it will point to null and when we come to null we will know hey this is the last element so by passing the first element to this function here we will be able to access all of the other elements of that list no matter how many elements that list contains in this situation it is 3 but you can have uh 300 elements or 3 000 or 300 000 depending on what kind of program you are building so the invocation of this function here will look like this so you will say print list and then you will pass to this function your head element like this and then considering here that you are passing a node pointer that means that here you need to receive a node pointer as well so i'm going to say node pointer and i'm going to call this parameter and okay now what this function here needs to do is it needs to access all of the elements of the list starting from this element here and to print the values of those elements to write those values out to our user so in order to do that i'm going to use a while loop so i'm going to say while like this and then inside this while loop i will do two things the first thing is going to be to print the value of the current element and then the second thing will be to move to the next element so let's do that let's say c out n dot value okay and let's add n line and again you use this symbol here to access elements of your class when you are using pointers so this symbol is used instead of dot even though i sometimes say dot it is still this symbol here and then the second part is going to be to move our node to the next node so i'm going to say that now my n will be equal to whatever our m dot next is like this so we are going to do this while our n is not equal to null perfect now how this while loop is going to behave in this situation here in the situation of a list that has three elements well when we invoke this print list function when we invoke it here we are going to pass our head node to this print list function which means that it will receive this element here so we enter inside this function here and the first thing that happens is it tries to go into a while loop so it checks is n different than null now what is n it is this head element so is this different than null the answer is yes so we can enter inside this while loop so we then print out n value which is one and then we perform this second line of code here which says now i'm going to move or to change the value of my end to whatever and next is holding and in this situation any next or head next is second element so it is this one here so it tries to go into a while loop again and then it checks is n different than null the answer is yes this here is different than null so we can go into our while loop again so we write out again n value which is two as you can see here and then we do this second line of code which says now n is going to be whatever and next is and that is third element which is this one here and then it comes here and tries to enter in this while loop again so it checks is n different than null is this here different than null the answer is yes this third element is legit element which has the value of three and it has this pointer to null so we can enter inside this while loop again so we print out the value of three here and then we move to this second line and this second line of code does the following it says now my n will be whatever n next is and in this situation third next is null so that means that in this line of code our n becomes null so when we try to enter this while loop again it checks is null different than null and the answer to that is no they are equal so that means that now we cannot enter inside this loop anymore so at that point we finished executing this while loop and we are going to leave this print list function which means that we have successfully print out all of the elements of this linked list here and in order to prove what i just explained i am going to run my program and as you can see indeed we have successfully printed out all of the elements of this linked list here just by passing the head element to this print list function okay so i hope that this video was helpful and i will make more videos related to linked lists and data structures in the future so if you want to watch those videos make sure to subscribe to my channel and then if you want to get a notification from me each time that i publish a new video you can click the bell icon and then the most important thing for the youtube algorithm is to give this video a thumbs up so that we can grow this channel and reach more people and then i also wouldn't mind if you decided to share this video with your friends or your colleagues so thank you very much for watching and i am going to see you in my next video bye
