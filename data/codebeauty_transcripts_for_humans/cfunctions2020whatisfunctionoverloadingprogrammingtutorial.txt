With timestamps:

00:00 - hi everyone welcome to my channel
00:02 - welcome to another c plus functions
00:04 - video
00:05 - and in this video i want to talk about
00:07 - concept that is related to functions
00:09 - which is function overloading so i want
00:12 - to first explain what function
00:14 - overloading is
00:15 - it means that you can create multiple
00:17 - functions with the same name but those
00:19 - functions are going to have different
00:21 - parameters so here i have opened my
00:24 - visual studio and let's create a
00:27 - function which is going to be called for
00:29 - example sum and i'm going to put the
00:32 - return type of that function to be and
00:34 - so integer if you're not familiar with
00:37 - function return types i'm going to link
00:38 - that video here so make sure to watch it
00:41 - so first thing we write the return type
00:44 - of our function and then we write the
00:46 - name of our function and as i said our
00:48 - function is going to be called
00:50 - sum
00:50 - and then i want to pass parameters to
00:52 - this function so i really want to
00:54 - declare which parameters this function
00:56 - is going to receive and those are going
00:58 - to be two parameters
01:00 - the first one is going to be integer and
01:02 - i'm going to call it a and then the
01:04 - second one is also going to be integer
01:06 - and i'm going to call it
01:08 - b
01:09 - like this so this is going to be our
01:11 - first function
01:12 - and let's also say that we want to
01:14 - create another function which is also
01:17 - going to be called sum but this time it
01:19 - is going to be of return type double
01:22 - like this and then i'm going to call it
01:25 - sum as i already said and this function
01:28 - is going to receive two parameters as
01:31 - well but those are going to be of type
01:33 - double so i'm going to say double
01:35 - a and then double
01:38 - b like this
01:40 - okay and as you can see these functions
01:42 - are underlined because it says function
01:44 - definition for some not found meaning we
01:46 - have declared our functions here but
01:49 - these functions are missing the the
01:51 - definition so definition is missing for
01:54 - this function and then this function as
01:55 - well and let's also create one more
01:58 - function so i'm going to say for example
02:00 - float
02:01 - and then i'm also going to call it sum
02:03 - and let's say that this time i'm going
02:05 - to give it
02:06 - um three parameters so i'm going to say
02:09 - float
02:12 - let's say float a and then float b and
02:14 - then
02:15 - float c
02:16 - like this
02:18 - okay
02:19 - and then what i want to do is i want to
02:21 - create definitions for these functions
02:23 - which i'm going to do here so the first
02:26 - one that i want to define is going to be
02:27 - this one here
02:29 - so i'm going to copy its declaration and
02:31 - then i'm going to add these curly
02:33 - brackets and here i'm going to put a
02:36 - definition for this function so let's
02:38 - say that i'm going to create a variable
02:40 - of type and and i'm going to call that
02:43 - variable result
02:45 - like this
02:46 - and i'm going to assign it the result of
02:49 - a plus
02:50 - b like this and then what i want to do
02:53 - is return this result from my function
02:55 - so here i'm going to say return
02:58 - result like this
03:00 - so this would be one way of returning
03:03 - the result from your function and then
03:05 - another way to do the same thing is
03:07 - going to be to say really return here so
03:10 - instead of creating a variable that is
03:12 - going to hold this result you can really
03:14 - return this result itself from your
03:16 - function so you can say here
03:19 - return
03:21 - a plus b
03:22 - and now we can delete this line and as
03:25 - you can see this function became shorter
03:27 - and more readable so now i want to
03:30 - define this function here so i'm going
03:32 - to say
03:33 - double
03:35 - okay i should have copied this
03:38 - and then double
03:39 - b as well like this
03:42 - so here i want to put the definition for
03:45 - this function here and this function oh
03:48 - i'm missing the name for my function
03:51 - it is called sum so
03:53 - this is return type this is the name of
03:55 - our function and then these are
03:56 - parameters of our function
03:59 - and here i want to say return
04:01 - a plus b as well but this time our a and
04:05 - our b are going to be of type double so
04:08 - in this situation there were integers
04:11 - and then in this situation there are
04:13 - decimal numbers okay
04:16 - and
04:16 - let's also create a definition for this
04:20 - function here so this float function
04:22 - and this time i'm going to copy it
04:26 - okay
04:27 - and i'm going to add these curly
04:29 - brackets and here
04:30 - i want to write
04:32 - return
04:33 - and then a plus b plus c like this
04:38 - okay
04:39 - so now how we are going to test this we
04:41 - can call these functions we can invoke
04:44 - these functions here in our main
04:46 - function and the first one that i want
04:48 - to invoke is going to be our end
04:49 - function so i'm going to say c out
04:52 - and then this line of code is going to
04:54 - really write out whatever our function
04:57 - returns so i'm going to say please write
04:59 - out whatever my sum function returns and
05:03 - then i want to pass to my sum function
05:05 - two numbers and those two numbers are
05:08 - going to be two integers and as you can
05:10 - see here
05:11 - we have really help from our
05:13 - intellisense which says you have three
05:16 - possible functions that you can call so
05:17 - you have overloaded three functions
05:20 - and
05:21 - you can navigate through these using
05:23 - your arrows so the first one is going to
05:25 - be our function that has float return
05:28 - type and that function return that
05:30 - function receives three parameters of
05:32 - type float and then the second one is
05:34 - going to be the one that has return type
05:36 - double and that function receives two
05:39 - double parameters and then the third one
05:42 - is going to be the one that returns
05:43 - integer and that function receives two
05:46 - integer values so here i want to call
05:49 - our integer function and i want to pass
05:52 - to that function
05:53 - four and three for example and let's
05:56 - also add and line like this
06:00 - and now if i run my program
06:04 - we can expect to see the result of this
06:06 - line of code here and as you can see the
06:08 - result is seven meaning that our
06:10 - function has been invoked and then this
06:13 - line of code has received the result of
06:16 - summing these two numbers and that has
06:18 - been written out in our console and the
06:20 - result of summing four and three is
06:23 - seven
06:24 - okay so now i'm going to stop this
06:26 - console and i want to test these other
06:28 - two functions so i'm going to say c out
06:31 - and let's test our sum function that
06:34 - receives
06:35 - two double parameters so it is going to
06:37 - be this one here so i'm going to say 4.4
06:41 - and then 3.3 for example and i'm going
06:44 - to add end line at the end as well okay
06:49 - and now if i run this program
06:52 - you can see that our second line is 7.7
06:56 - meaning 4.4 plus 3.3 is going to be 7.7
07:01 - which is correct so we have successfully
07:04 - tested this function here so this double
07:07 - function that returns double and
07:09 - receives also two double parameters and
07:12 - then let's also test this third function
07:15 - so here i want to say c out
07:18 - sum
07:19 - and then
07:20 - here i want to pass three parameters the
07:22 - first one is going to be let's say 4.4
07:25 - and then the second one is going to be
07:27 - 3.3 and then oh three
07:31 - decimal point 3.3 and then the third one
07:34 - is going to be
07:35 - 2.2 for example
07:38 - okay
07:39 - now this invocation should invoke this
07:42 - float function
07:44 - so when i run my program
07:47 - as you can see here this third line
07:49 - contains the result of summing these
07:51 - three numbers and you can check this out
07:54 - using a calculator but this is the
07:56 - correct result
07:57 - so
07:58 - as i already explained this represents
08:01 - function overloading and
08:04 - we have created three functions the
08:06 - first one is the one that receives in
08:08 - types and returns and type as well then
08:12 - the second one receives
08:13 - double so two double
08:16 - variables two double parameters and
08:19 - returns double as well and then the
08:20 - third one really contains three
08:23 - arguments so three parameter parameters
08:25 - but it has the same name as these
08:27 - previous two and then it returns float
08:31 - type as well and then now when we call
08:33 - when we invoke those functions we can
08:35 - really pass different data types and
08:38 - depending on those data types we are
08:40 - going to call adequate functions so in
08:42 - this first line we are going to invoke
08:44 - this and then in this second line we are
08:46 - going to invoke this
08:48 - and then in our turn line we are going
08:50 - to invoke this
08:52 - okay so i hope that you understood what
08:55 - function overloading is and also i hope
08:58 - that you have understood that you don't
09:00 - have to create functions with different
09:02 - names when they are doing uh almost the
09:05 - same thing so these three functions
09:07 - these three are doing the same thing
09:10 - they are summing the numbers that we
09:11 - pass to them only in this particular
09:14 - situation the first one is summing
09:16 - integers the second one is summing
09:18 - decimal point numbers and then this
09:19 - third one really sums three numbers and
09:23 - we have overloaded this sum function
09:26 - and we didn't have to create functions
09:29 - that are for example some inch
09:32 - and then some
09:34 - double
09:35 - oh double and then some
09:38 - float like this so we didn't have to
09:41 - name these
09:42 - like some in some double and some float
09:45 - but we can use the same name as long as
09:48 - we have different parameters different
09:51 - number of parameters different return
09:53 - type or something similar in that
09:55 - particular situation our compiler is
09:57 - going to decide on its own which
09:59 - function it should call
10:01 - i hope that you have understood what
10:04 - function overloading is and how you can
10:06 - use that and also make sure to watch
10:08 - other videos from this playlist i'm
10:10 - going to link that in the description of
10:12 - this video so if you enjoyed this video
10:15 - and if you want to see more videos like
10:16 - this please subscribe to my channel and
10:18 - click the bell icon so that you are
10:20 - notified when i publish my next video
10:23 - and also you can follow me on my other
10:25 - social media platforms the link for
10:27 - those is going to be in the description
10:30 - thanks for watching and i'm going to see
10:31 - you in my next video bye

Cleaned transcript:

hi everyone welcome to my channel welcome to another c plus functions video and in this video i want to talk about concept that is related to functions which is function overloading so i want to first explain what function overloading is it means that you can create multiple functions with the same name but those functions are going to have different parameters so here i have opened my visual studio and let's create a function which is going to be called for example sum and i'm going to put the return type of that function to be and so integer if you're not familiar with function return types i'm going to link that video here so make sure to watch it so first thing we write the return type of our function and then we write the name of our function and as i said our function is going to be called sum and then i want to pass parameters to this function so i really want to declare which parameters this function is going to receive and those are going to be two parameters the first one is going to be integer and i'm going to call it a and then the second one is also going to be integer and i'm going to call it b like this so this is going to be our first function and let's also say that we want to create another function which is also going to be called sum but this time it is going to be of return type double like this and then i'm going to call it sum as i already said and this function is going to receive two parameters as well but those are going to be of type double so i'm going to say double a and then double b like this okay and as you can see these functions are underlined because it says function definition for some not found meaning we have declared our functions here but these functions are missing the the definition so definition is missing for this function and then this function as well and let's also create one more function so i'm going to say for example float and then i'm also going to call it sum and let's say that this time i'm going to give it um three parameters so i'm going to say float let's say float a and then float b and then float c like this okay and then what i want to do is i want to create definitions for these functions which i'm going to do here so the first one that i want to define is going to be this one here so i'm going to copy its declaration and then i'm going to add these curly brackets and here i'm going to put a definition for this function so let's say that i'm going to create a variable of type and and i'm going to call that variable result like this and i'm going to assign it the result of a plus b like this and then what i want to do is return this result from my function so here i'm going to say return result like this so this would be one way of returning the result from your function and then another way to do the same thing is going to be to say really return here so instead of creating a variable that is going to hold this result you can really return this result itself from your function so you can say here return a plus b and now we can delete this line and as you can see this function became shorter and more readable so now i want to define this function here so i'm going to say double okay i should have copied this and then double b as well like this so here i want to put the definition for this function here and this function oh i'm missing the name for my function it is called sum so this is return type this is the name of our function and then these are parameters of our function and here i want to say return a plus b as well but this time our a and our b are going to be of type double so in this situation there were integers and then in this situation there are decimal numbers okay and let's also create a definition for this function here so this float function and this time i'm going to copy it okay and i'm going to add these curly brackets and here i want to write return and then a plus b plus c like this okay so now how we are going to test this we can call these functions we can invoke these functions here in our main function and the first one that i want to invoke is going to be our end function so i'm going to say c out and then this line of code is going to really write out whatever our function returns so i'm going to say please write out whatever my sum function returns and then i want to pass to my sum function two numbers and those two numbers are going to be two integers and as you can see here we have really help from our intellisense which says you have three possible functions that you can call so you have overloaded three functions and you can navigate through these using your arrows so the first one is going to be our function that has float return type and that function return that function receives three parameters of type float and then the second one is going to be the one that has return type double and that function receives two double parameters and then the third one is going to be the one that returns integer and that function receives two integer values so here i want to call our integer function and i want to pass to that function four and three for example and let's also add and line like this and now if i run my program we can expect to see the result of this line of code here and as you can see the result is seven meaning that our function has been invoked and then this line of code has received the result of summing these two numbers and that has been written out in our console and the result of summing four and three is seven okay so now i'm going to stop this console and i want to test these other two functions so i'm going to say c out and let's test our sum function that receives two double parameters so it is going to be this one here so i'm going to say 4.4 and then 3.3 for example and i'm going to add end line at the end as well okay and now if i run this program you can see that our second line is 7.7 meaning 4.4 plus 3.3 is going to be 7.7 which is correct so we have successfully tested this function here so this double function that returns double and receives also two double parameters and then let's also test this third function so here i want to say c out sum and then here i want to pass three parameters the first one is going to be let's say 4.4 and then the second one is going to be 3.3 and then oh three decimal point 3.3 and then the third one is going to be 2.2 for example okay now this invocation should invoke this float function so when i run my program as you can see here this third line contains the result of summing these three numbers and you can check this out using a calculator but this is the correct result so as i already explained this represents function overloading and we have created three functions the first one is the one that receives in types and returns and type as well then the second one receives double so two double variables two double parameters and returns double as well and then the third one really contains three arguments so three parameter parameters but it has the same name as these previous two and then it returns float type as well and then now when we call when we invoke those functions we can really pass different data types and depending on those data types we are going to call adequate functions so in this first line we are going to invoke this and then in this second line we are going to invoke this and then in our turn line we are going to invoke this okay so i hope that you understood what function overloading is and also i hope that you have understood that you don't have to create functions with different names when they are doing uh almost the same thing so these three functions these three are doing the same thing they are summing the numbers that we pass to them only in this particular situation the first one is summing integers the second one is summing decimal point numbers and then this third one really sums three numbers and we have overloaded this sum function and we didn't have to create functions that are for example some inch and then some double oh double and then some float like this so we didn't have to name these like some in some double and some float but we can use the same name as long as we have different parameters different number of parameters different return type or something similar in that particular situation our compiler is going to decide on its own which function it should call i hope that you have understood what function overloading is and how you can use that and also make sure to watch other videos from this playlist i'm going to link that in the description of this video so if you enjoyed this video and if you want to see more videos like this please subscribe to my channel and click the bell icon so that you are notified when i publish my next video and also you can follow me on my other social media platforms the link for those is going to be in the description thanks for watching and i'm going to see you in my next video bye
