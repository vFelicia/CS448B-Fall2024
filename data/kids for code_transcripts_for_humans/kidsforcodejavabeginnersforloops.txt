With timestamps:

00:15 - so first we are going to go over our
00:18 - summary questions from last time
00:21 - our first question was what do we use
00:23 - loops for so loops will allow us to
00:25 - execute the same code over and over
00:27 - again until a condition is broken or
00:30 - false so this way we don't have to write
00:33 - the same line of code multiple times so
00:35 - if we want to print something out ten
00:37 - times we can just use a counter variable
00:40 - and a while condition and it'll keep
00:43 - doing that until the condition is false
00:45 - if you don't if you're not sure about
00:47 - this you can go back to our last video
00:48 - where we explain this why do we need to
00:51 - make sure to change the condition
00:53 - variable and looping so if the condition
00:56 - never changes or changes in the wrong
00:58 - direction the loop will become an
01:00 - infinite loop an infinite loop means
01:03 - that it'll keep on executing keep on
01:05 - executing keep on executing and it'll
01:08 - just slow down your computer and that'll
01:11 - be the only thing your computer is doing
01:12 - we can't have that it's a problem and we
01:16 - can always make sure that that doesn't
01:17 - happen so the thing to remember is that
01:20 - we need to be making changes towards the
01:22 - end condition in our loop so what's the
01:27 - difference between a while loop and a
01:28 - do-while loop a wild of checks the
01:31 - condition first and that executes the
01:33 - code so the code might not ever execute
01:36 - but a do-while will execute first and
01:38 - then check the condition so the code
01:40 - will always execute at least once there
01:43 - are different cases where we want to use
01:44 - a while loop or a do-while loop but just
01:46 - remember if you want the code to execute
01:48 - at least once you should probably use it
01:50 - too while loop so today we're gonna be
01:54 - talking about for loops so they're also
01:57 - a kind of loop and they're similar to
01:58 - while loops in that it's kind of like a
02:01 - repeating if statement that executes
02:04 - code inside but the difference is that
02:07 - it will only repeat for like a certain
02:10 - amount of times that we say so here's an
02:13 - example of a for loop I've split it up
02:15 - into three sections based on the
02:17 - different colored boxes and we're gonna
02:19 - be going over what these sections do and
02:21 - what they mean but to make a for loop we
02:24 - always need to start with the keyword
02:25 - four keywords are words that are purple
02:28 - and means something special to the
02:30 - compiler which
02:31 - eclipsed and remember that we cannot
02:34 - have any variables that are keywords so
02:37 - we can't have a variable called new we
02:39 - can't have one called if we can't one
02:41 - have four and that's just a review of
02:43 - the variable naming rules we did before
02:46 - so then the terms inside of the for loop
02:49 - or inside these parentheses just like in
02:52 - a while loop the condition is inside of
02:55 - the while loop parentheses but this time
02:57 - we have a few more things inside the
02:59 - parentheses that we're going to go over
03:00 - so there are three sections and we will
03:03 - go over each one by one so our first
03:07 - section is the green one and it is
03:10 - called initialization remember what
03:12 - initialization means that means we're
03:14 - making something so in this case we're
03:16 - going to be making a variable so the
03:20 - section one is we have to create a
03:22 - variable that will be used inside of the
03:23 - for loop so what this variable is equal
03:28 - to is what our starting point is that
03:31 - means at the beginning of the loop I
03:32 - will equal zero in our example here
03:34 - we're gonna go over what how you exactly
03:37 - know what the starting the starting
03:40 - point is later but just know that the
03:43 - initialization we're gonna make that
03:45 - variable equal to our starting point and
03:46 - this can be names anything but we
03:49 - usually name it I we were using a for
03:51 - loop and it's always an integer and it's
03:54 - initialized to same way we normally make
03:56 - integer variables so if you wanted to
03:58 - make an integer called num dogs for how
04:01 - many dogs you have it'll be intimate
04:02 - always equal zero just like this so it's
04:04 - all the same stuff we did before we're
04:06 - just using it in a new way so an
04:09 - important thing to remember is
04:10 - initialization only happens once and at
04:14 - the beginning of the loop before we do
04:17 - anything inside the loop we're gonna
04:19 - initialize and that's the only time
04:20 - we're gonna initialize
04:21 - we're gonna go over what that looks like
04:23 - later but just know that it's gonna
04:26 - happen once and before the while before
04:29 - we go inside of the loop only so our
04:33 - next step is the blue box which is our
04:37 - condition just like in a while loop it's
04:39 - like a boolean expression and it's going
04:42 - to determine if we go inside or not
04:44 - so it says here just like with a while
04:46 - loop the code will execute again if the
04:49 - condition is true so in our example the
04:53 - loop will keep going as long as I is
04:54 - less than five if the statement is true
04:57 - if I is less than five we're going to go
05:00 - inside of the for loop and execute
05:02 - what's ever inside right now I don't
05:04 - have anything inside because that's just
05:05 - our example but we're gonna see what can
05:08 - be inside of our for loop later if this
05:10 - statement is false we're not gonna go
05:13 - inside the loop and we're not gonna
05:14 - execute any of the code we're just gonna
05:16 - go on to the next thing so that's
05:19 - exactly like with our while loops if you
05:21 - don't quite understand maybe go back
05:22 - first and then come here to learn about
05:25 - the for loops so the condition is
05:28 - checked every time before the code
05:31 - inside is executed to see if we answer
05:33 - or not just like with the while loop the
05:37 - final step is our change after each
05:40 - execution of the code the statement in
05:42 - the red box is going to be executed so
05:45 - just like with our while loop we need to
05:47 - be making change that will go towards
05:49 - our condition and in this case the
05:53 - change is going to be built in inside of
05:55 - the parentheses so in our example after
05:59 - each time the code is executed one is
06:01 - added to I remember that's what I plus
06:04 - plus is we went over that a while ago
06:05 - with our variable manipulation but let's
06:08 - do a review of our shortcuts I plus plus
06:10 - that's adding one I - - that's
06:13 - subtracting 1 I plus equals 2 that's
06:15 - adding 2 i minus equals suit that's
06:19 - subtracting 2 i plus i sorry x equals 2
06:24 - is we're going to be multiplying i by 2
06:27 - so there are many ways to do it these
06:29 - are the shortcuts these are the easiest
06:31 - ways to write it so that's what we want
06:32 - to be using so this change will happen
06:35 - to the variable every time after the
06:38 - code inside the loop is executed so
06:41 - after we do what's in the loop we're
06:42 - going to do the change in our red box so
06:46 - let's go through a demo of what our
06:48 - computer will actually do when we're
06:50 - doing a for loop so let's look at
06:55 - for the that we have here we have for
06:59 - int I equals zero so remember from our
07:02 - section 1 that's the initialization I is
07:05 - less than 3 that's our condition I plus
07:08 - plus that's our change in the inside of
07:11 - our code that's system dot out dot print
07:13 - Ln I which is going to print out the
07:16 - content of I so let's think about this
07:20 - what's the first thing we're going to do
07:22 - before anything
07:23 - step one initialization
07:27 - so the first thing that
07:29 - do you wanna see this for loop into a
07:32 - equals zero we're gonna make our we're
07:35 - gonna make our variable I equal to zero
07:37 - that's our starting point the next thing
07:40 - we're going to do step two we're gonna
07:41 - go over to the condition the condition
07:44 - remember before whenever we go into the
07:47 - before we go into the code inside we
07:50 - have to check the condition to see if
07:51 - we're actually going to go inside or not
07:53 - just like with a while loop so we're
07:55 - gonna check I less than three I less
08:00 - than three that's our check if it's true
08:01 - we're gonna go inside if it's false
08:03 - we're not going to go inside we're going
08:04 - to exit the for loop right now I is
08:07 - equal to 0 so 0 is less than 3 it's true
08:11 - so we are going to go inside now that
08:13 - we're inside we're gonna execute all of
08:15 - the code inside right now I only have
08:18 - one line but if I had 10 lines all those
08:20 - 10 lines would be executed so over here
08:24 - our line it our code is going to be
08:26 - executed and it's going to pronounce 0
08:28 - because that's what we set our variable
08:30 - equal to and we haven't changed it yet
08:32 - now remember after every time we good we
08:36 - execute the code the next step is we are
08:39 - going to do the change in this case our
08:42 - change is I plus plus and we remember
08:44 - what that means that means we're gonna
08:46 - add 1 to the value of I so next our next
08:50 - step is I plus plus and I is now 1
08:57 - because 0 plus 1 is 1 so notice how I
09:00 - sort of color-coded these in the color
09:02 - of the boxes I had before our
09:04 - initialization
09:05 - here is red our condition is blue I have
09:09 - the code in black and then our change in
09:13 - green so that's the order for our for
09:16 - loops that were always going to have
09:17 - very first in the very beginning and
09:19 - initialization check if we're going to
09:21 - go inside if we do we're gonna execute
09:24 - the inside then we're gonna make our
09:25 - changes so after we made our changes
09:28 - we're gonna go back and you might think
09:30 - well our first step was the
09:31 - initialization so we're gonna go back
09:33 - into I equals 0 again right no remember
09:36 - what I said before the initialization
09:38 - only happens once and at the very
09:40 - beginning before we do any
09:43 - the for-loop stuff so we're not going to
09:46 - go to the initialization we're gonna go
09:48 - into the condition just like with a
09:49 - little while loop after we do the inside
09:51 - we're gonna go back to the condition now
09:54 - we're gonna check the condition remember
09:55 - we did I plus plus I is now 1 is 1 less
09:59 - than 3 yeah once less than 3 so it's
10:01 - true
10:02 - and that means we're going to go inside
10:05 - now with that we're inside we're gonna
10:07 - execute all of our code and that means
10:11 - we're gonna print out I I right now is
10:14 - equal to 1 because we added to it before
10:16 - and now we're gonna have one printed out
10:21 - ok so next we just printed this out we
10:26 - executed the code so what does that mean
10:28 - we're gonna do after we execute the code
10:30 - yeah we're gonna make the changes in
10:33 - this case our change is adding 1 so
10:35 - what's 1 plus 1 to I plus plus that
10:38 - means is now 2 remember we're not going
10:42 - to go to the initialization next
10:43 - initialization we only do it at the very
10:45 - beginning next we're going to go to the
10:48 - condition again 2 less than 3 is that
10:50 - true or false it is true so that means
10:54 - that we are going to go inside the other
10:57 - for loop again once we're inside the for
10:59 - loop we're going to execute all the code
11:00 - inside that means we're going to execute
11:02 - print printing I which is 2 now we're
11:08 - going to make our changes again so that
11:12 - means our changes I plus plus so I plus
11:16 - 1 is 3 because I was 2
11:19 - after we founded 1 it's now 3 now here's
11:22 - the tricky part we're gonna go to the
11:24 - condition again and now we're going to
11:26 - check is 3 less than 3 no 3 is not less
11:32 - than 3 if we had this as less than or
11:34 - equal to it would be true but 3 is not
11:37 - less than three so it's false that means
11:39 - that we are not going to go inside the
11:41 - for loop anymore we're gonna exit and
11:43 - then go to our code that's after that so
11:47 - that's just like the while loop where
11:49 - after our condition is false we're gonna
11:52 - exit the loop and we're not going to go
11:54 - inside of it anymore
11:57 - and that's what we have here the
11:58 - condition is false Oh extra Lube okay so
12:01 - now I'm going to go over some demos and
12:06 - clips so right now so right now I want
12:15 - you guys to make a new project and let's
12:18 - do a review of how to do that we're
12:20 - gonna do Java project we can also go to
12:24 - the top left and go to file new Java
12:27 - project we're gonna call this one for
12:29 - loop examples finish and then we're
12:36 - gonna go to our for loop examples folder
12:37 - in our project Explorer right-click it
12:41 - new class we're going to name our first
12:45 - one example one after you do that you
12:49 - can finish and we're over here next we
12:52 - are going to make our main method you
12:55 - can pause this and catch up but right
12:57 - now I'm going to go on so our prompt is
13:01 - write a for loop that prints out numbers
13:03 - 1 2 3 4 5 so if we remember our very
13:07 - first step before we do anything is
13:09 - we're gonna do for keyword 4 and then
13:13 - the parentheses and then we're also
13:15 - gonna do curly brackets opening 1 in a
13:18 - closing 1 and notice how it has all this
13:20 - red right now that's because we haven't
13:22 - actually written anything yet and that's
13:24 - why it's wrong we actually have to know
13:26 - how to have something in here which
13:27 - we're going to write now so as we can
13:30 - see
13:32 - line seven that's what's inside of the
13:34 - for loop that's the code that's gonna be
13:36 - executed every single time we repeat so
13:39 - our first step what was section one it
13:42 - was
13:43 - initialization so we're gonna initialize
13:46 - a variable remember it's always going to
13:47 - be an integer
13:48 - we're gonna be naming ours I and we're
13:52 - gonna set it equal to the starting point
13:54 - so what's the starting point for this
13:56 - one so we can see it says write a for
14:00 - loop that prints out numbers 1 2 3 4 5
14:02 - so what's the starting point where are
14:05 - we going to start from what number do we
14:06 - want to start with 1 we're not going to
14:09 - start from 0 because we don't want to
14:11 - pronounce 0
14:11 - that's not our starting point we don't
14:13 - want to go there we want to start with 1
14:15 - because that's where we're gonna start
14:16 - from and go after so for this example
14:22 - we're gonna do in 2 I equals 1 and
14:25 - remember we have that semicolon in
14:28 - between all of the sections we can't
14:30 - forget the semicolon or else our work
14:32 - won't compile so after that our next
14:34 - step is the condition now this one's a
14:37 - little hard but let's think back to our
14:39 - while loops the condition is kind of
14:41 - where we want it to stop where we want
14:45 - where we want the limit to be so as we
14:48 - can see here we want where do we want to
14:50 - stop we want to stop at 5 so our
14:54 - condition is going to include 5 and
14:56 - there are many ways to do this one
15:00 - example is I less than or equal to 5
15:03 - because when it's less than when it is 5
15:06 - 5 less than equal to 5 that's true
15:08 - so it's going to go inside again in
15:10 - print cell 5 another way we can do this
15:13 - is less then 6 because when I is equal
15:18 - to 5 it's going to be true so then it's
15:21 - going to go inside again when it's 6
15:22 - it's not going to be true and it's not
15:24 - going to go inside for this example what
15:27 - I'm going to do right now is going to go
15:28 - with I'm gonna go six and they both work
15:32 - they're both perfectly fine now we're
15:35 - gonna have another semicolon and our
15:38 - final step remember that is our change
15:40 - so let's look through all of our numbers
15:43 - what's the change in between each of
15:45 - them
15:46 - from one to two how do we get there
15:47 - what's that change we need to make
15:49 - you're right it's plus one so we can't
15:52 - just do plus one like that we have to
15:54 - have our variable in it and remember one
15:56 - of our short clips was I plus plus four
15:59 - for loops you're gonna be using I plus
16:00 - plus a lot so it's good to get used to
16:02 - it but there is there are more ways to
16:04 - do it for example I plus equals one here
16:07 - I'm gonna do I plus plus and now for
16:10 - what goes inside of the for loop what
16:13 - goes inside of our for loop is the code
16:16 - that's we want the for loop to print out
16:18 - I'm sorry the code we want our for loop
16:21 - to execute I kind of told you the answer
16:23 - and it's that we're gonna be printing
16:26 - our numbers out so we're gonna have a
16:29 - print statement and inside of it we're
16:37 - gonna print out one I mean now what
16:40 - sorry I I is gonna print out all of the
16:44 - the numbers that I that I is gonna be
16:47 - equal to and as we can see we're gonna
16:49 - cycle through all of them with this I
16:51 - plus plus so let's go to run it and we
16:56 - see we're correct one two three four
16:58 - five that's exactly what we wanted if
17:00 - you don't understand how this prints out
17:03 - this you might want to re-watch that
17:05 - example I did before in the slides that
17:09 - we trace through that for loop but if
17:11 - we're good to go now I want you guys to
17:13 - make another new class called example
17:17 - two I already have mine made but I want
17:24 - you guys to make your main method now
17:26 - pause the video if you have to and I'm
17:28 - gonna go on now so our prompt is write a
17:31 - for loop that prints out odd numbers
17:33 - from one to ten so that's a little
17:37 - harder because it includes odd numbers
17:38 - that's not just all numbers we need to
17:40 - do something a little different so
17:42 - remember our first step is always do
17:44 - keyword for our parenthesis and our
17:47 - curly brackets we have the red lines
17:49 - because we haven't finished everything
17:51 - yet but our first section is the
17:54 - initialization remember we're always
17:58 - going to have it as an integer
17:59 - we're gonna be naming ours I but what's
18:02 - it going to be equal to so we need to
18:04 - think of our starting place because
18:06 - that's what it's going to be equal to
18:08 - the starting place for our numbers here
18:11 - it's going to be one because the odd
18:14 - numbers from 1 to 10 are 1 3 5 7 9 our
18:19 - first one is 1 so that's our starting
18:21 - place that's where we're going to start
18:22 - with and so we're gonna set our variable
18:24 - equal to u next is our condition this
18:28 - one's a little more tough it's where we
18:30 - want to stop it's where we want that
18:32 - boundary that limit to be so if we look
18:36 - here our stopping place is 10 so there
18:43 - are many ways to do this but the way I'm
18:44 - gonna do it here is with less than or
18:46 - equal to I'm less than or equal to 10
18:51 - another way we can do it is 9 because 10
18:55 - is an even number and we're not gonna
18:56 - print that out print that out anyways I
18:58 - is less than equal to 11 that also works
19:02 - too because it's gonna go from 9 to 11
19:04 - and then 11 is not gonna work false so
19:07 - it's not gonna go inside for this
19:11 - example I'm gonna go less than or equal
19:13 - to 9 because I want us to get used to
19:15 - using sometimes less than equal to
19:17 - sometimes just less than greater
19:19 - sometimes greater or equal to so it's
19:21 - good to get used to seeing all of them
19:23 - and using all of them our changed part
19:26 - is the probably the hardest part for
19:28 - this question we're gonna be only
19:30 - printing out all the numbers so let's
19:32 - think about that 1 3 5 7 9 what is the
19:37 - change what is the difference between
19:39 - all of those numbers it's 2 to get from
19:42 - 1 to 3 we need to add 2 how do we add 2
19:45 - we can't use I plus plus because that's
19:47 - only for adding one we're going to do i
19:49 - plus equals 2 so we're gonna start with
19:54 - 1 and then we're gonna print it out with
19:59 - our print statement we're going to be
20:05 - do I because that's what our number is
20:07 - gonna be is keeping track of that number
20:09 - and let's go through this before we run
20:12 - them just to make run it just to make
20:14 - sure that we're we got it right inside
20:17 - equals 1 that's our starting place
20:19 - that's right our starting place is gonna
20:21 - be 1 for the odd numbers from 1 to 10
20:23 - then we're gonna print out one yeah
20:25 - that's correct
20:26 - we're gonna add 2 to 1 yeah that's
20:28 - that's good because we want to go from 1
20:30 - to 3 then we're gonna check is 3 less
20:33 - than or equal to 9
20:35 - true we're gonna go inside again print
20:37 - out 3 then we're going to add 2 to 3
20:39 - that's 5 then we're gonna go to our
20:42 - condition is 5 less than or equal to 9
20:44 - yeah it is it's true so we're gonna go
20:46 - inside look at your prints l5 we're
20:49 - gonna add 2 again 7 7 is less than or
20:53 - equal to 9 print out 7 we're gonna add 2
20:57 - to 7 9 is less than or equal to 9 we're
21:01 - gonna print out 9 now we're gonna add 2
21:04 - to 9 which is 11 is I is 11 less than or
21:09 - equal to 9 no it's false so we're not
21:12 - gonna go inside this for loop that's why
21:14 - we could have had this as 10 or we could
21:17 - have had this as less than 11 because it
21:20 - would still be true so be false for all
21:23 - of the cases so this is our example 2
21:27 - now I'm gonna go into our next example
21:29 - example 3 8 circuit last one for today
21:31 - so can you make a new class inside of
21:35 - our four loops examples folder call it
21:37 - example 3 finish and then we're gonna go
21:42 - to it so I want you guys to make a main
21:46 - method you can pause the video if you
21:48 - have to but our prompt is write a for
21:51 - loop that prints out your name five
21:53 - times I want us to do this example
21:55 - because it's a little different from
21:56 - what we've been doing what we've been
21:58 - doing is using that I variable to figure
22:01 - out what we're printing now we're just
22:02 - gonna be printing our name so I have my
22:06 - name here as James you can write it as
22:08 - your name but remember how we make a
22:10 - variable data type name and what it's
22:14 - equal to
22:15 - it's
22:16 - because it's a word I'm gonna call my
22:18 - name because that's my name and I'm
22:20 - gonna equal to James in quotes because
22:22 - it's a string so now we're gonna write
22:26 - that for loop remember our first step
22:27 - always is the key word for parentheses
22:32 - and the curly brackets our first section
22:36 - inside of the for loop parentheses is
22:38 - our initialization now this one's a
22:40 - little harder to think of what our
22:42 - initialization might be and it's a
22:46 - little more unclear because it just
22:49 - wants us to print or name five times
22:51 - there are so many ways to do this there
22:54 - are the the easiest way I'm gonna show
22:57 - you right now but just because I didn't
22:59 - do your way doesn't mean you're wrong
23:00 - and I'm going to show you some other
23:01 - ways you can give it to so we're gonna
23:05 - make an integer because it's always an
23:06 - integer we're gonna name our as I and
23:08 - for this I'm gonna make our starting
23:10 - place to 0 next we're going to do I'm
23:15 - gonna do I is less than 5 and then I'm
23:19 - gonna do I plus plus so let's make sure
23:22 - that I did this right we're gonna trace
23:23 - through what exactly this means our
23:26 - starting place is 0 so that means we're
23:28 - gonna start with 0 we're gonna add 1 so
23:32 - thou art I equals 1 I equals to I equals
23:36 - 3 I equals 4 when I equals 5 we're going
23:41 - to check here is I less than 5 no it's
23:45 - not I 5 is not less than 5 so then it's
23:48 - false we're not gonna go inside that
23:50 - means we're not gonna have a sixth one
23:51 - it's just gonna be the 5 so I'm gonna
23:57 - print out my name in here because that's
23:58 - what the that's what the prompt wanted
24:00 - and let me show you another way to do
24:04 - this let's say let's start with 1 and
24:07 - then we're gonna do less than or equal
24:08 - to 5 let's check that this is gonna work
24:10 - so it's going to start with 1 it's going
24:14 - to go 2 2 3 4 5 is 5 less than or equal
24:19 - to 5 yeah so that means that this is
24:23 - going to work and we're going to be
24:25 - printing our name five times
24:28 - we had to have that equal if this was
24:30 - not here it would only print it four
24:31 - times so let's run this to make sure
24:34 - we're correct one two three four five
24:37 - this is a correct example there are many
24:40 - ways you can do this but those are
24:42 - probably the easier ways to do it okay
24:46 - so now I'm going to go back to our
24:49 - slides and here's just a visualization
24:55 - of what we just learned so over here we
25:00 - have initialization condition increment
25:02 - change is the same thing it just means
25:04 - what are you going to change about the
25:05 - variable so we're going to start
25:07 - initialization then we're going to check
25:10 - the condition is the condition true if
25:12 - it is true we're gonna go inside of the
25:14 - code so the code block we're gonna run
25:16 - that then we're gonna make the increment
25:18 - that means we're gonna do the change
25:20 - we're gonna go back to the condition if
25:22 - it's true we're gonna go in we're gonna
25:24 - add again or whatever our changes and
25:27 - then check again so if it's false
25:30 - remember that or we're gonna leave the
25:32 - loop and we're gonna just going to go on
25:34 - with our code and whatever is after that
25:36 - so this is a little diagram of what our
25:40 - for loop is gonna look like what the
25:43 - Eclipse is actually gonna do when it
25:45 - looks at the for loop so now I have a
25:49 - few Submarine questions we're gonna
25:51 - answer them at the beginning of our next
25:52 - video but they are number one what's
25:55 - what's section one of the for loop and
25:58 - what does it do if you don't know you
26:01 - can go back to our video and look at it
26:05 - again but what is section two is our
26:06 - second question section three and number
26:09 - four is what are some shortcuts we can
26:11 - do for section three so that's the end
26:13 - of our video for today
26:14 - it was great to learn for loops with you
26:18 - guys and I hope you guys come back for
26:19 - our next

Cleaned transcript:

so first we are going to go over our summary questions from last time our first question was what do we use loops for so loops will allow us to execute the same code over and over again until a condition is broken or false so this way we don't have to write the same line of code multiple times so if we want to print something out ten times we can just use a counter variable and a while condition and it'll keep doing that until the condition is false if you don't if you're not sure about this you can go back to our last video where we explain this why do we need to make sure to change the condition variable and looping so if the condition never changes or changes in the wrong direction the loop will become an infinite loop an infinite loop means that it'll keep on executing keep on executing keep on executing and it'll just slow down your computer and that'll be the only thing your computer is doing we can't have that it's a problem and we can always make sure that that doesn't happen so the thing to remember is that we need to be making changes towards the end condition in our loop so what's the difference between a while loop and a dowhile loop a wild of checks the condition first and that executes the code so the code might not ever execute but a dowhile will execute first and then check the condition so the code will always execute at least once there are different cases where we want to use a while loop or a dowhile loop but just remember if you want the code to execute at least once you should probably use it too while loop so today we're gonna be talking about for loops so they're also a kind of loop and they're similar to while loops in that it's kind of like a repeating if statement that executes code inside but the difference is that it will only repeat for like a certain amount of times that we say so here's an example of a for loop I've split it up into three sections based on the different colored boxes and we're gonna be going over what these sections do and what they mean but to make a for loop we always need to start with the keyword four keywords are words that are purple and means something special to the compiler which eclipsed and remember that we cannot have any variables that are keywords so we can't have a variable called new we can't have one called if we can't one have four and that's just a review of the variable naming rules we did before so then the terms inside of the for loop or inside these parentheses just like in a while loop the condition is inside of the while loop parentheses but this time we have a few more things inside the parentheses that we're going to go over so there are three sections and we will go over each one by one so our first section is the green one and it is called initialization remember what initialization means that means we're making something so in this case we're going to be making a variable so the section one is we have to create a variable that will be used inside of the for loop so what this variable is equal to is what our starting point is that means at the beginning of the loop I will equal zero in our example here we're gonna go over what how you exactly know what the starting the starting point is later but just know that the initialization we're gonna make that variable equal to our starting point and this can be names anything but we usually name it I we were using a for loop and it's always an integer and it's initialized to same way we normally make integer variables so if you wanted to make an integer called num dogs for how many dogs you have it'll be intimate always equal zero just like this so it's all the same stuff we did before we're just using it in a new way so an important thing to remember is initialization only happens once and at the beginning of the loop before we do anything inside the loop we're gonna initialize and that's the only time we're gonna initialize we're gonna go over what that looks like later but just know that it's gonna happen once and before the while before we go inside of the loop only so our next step is the blue box which is our condition just like in a while loop it's like a boolean expression and it's going to determine if we go inside or not so it says here just like with a while loop the code will execute again if the condition is true so in our example the loop will keep going as long as I is less than five if the statement is true if I is less than five we're going to go inside of the for loop and execute what's ever inside right now I don't have anything inside because that's just our example but we're gonna see what can be inside of our for loop later if this statement is false we're not gonna go inside the loop and we're not gonna execute any of the code we're just gonna go on to the next thing so that's exactly like with our while loops if you don't quite understand maybe go back first and then come here to learn about the for loops so the condition is checked every time before the code inside is executed to see if we answer or not just like with the while loop the final step is our change after each execution of the code the statement in the red box is going to be executed so just like with our while loop we need to be making change that will go towards our condition and in this case the change is going to be built in inside of the parentheses so in our example after each time the code is executed one is added to I remember that's what I plus plus is we went over that a while ago with our variable manipulation but let's do a review of our shortcuts I plus plus that's adding one I that's subtracting 1 I plus equals 2 that's adding 2 i minus equals suit that's subtracting 2 i plus i sorry x equals 2 is we're going to be multiplying i by 2 so there are many ways to do it these are the shortcuts these are the easiest ways to write it so that's what we want to be using so this change will happen to the variable every time after the code inside the loop is executed so after we do what's in the loop we're going to do the change in our red box so let's go through a demo of what our computer will actually do when we're doing a for loop so let's look at for the that we have here we have for int I equals zero so remember from our section 1 that's the initialization I is less than 3 that's our condition I plus plus that's our change in the inside of our code that's system dot out dot print Ln I which is going to print out the content of I so let's think about this what's the first thing we're going to do before anything step one initialization so the first thing that do you wanna see this for loop into a equals zero we're gonna make our we're gonna make our variable I equal to zero that's our starting point the next thing we're going to do step two we're gonna go over to the condition the condition remember before whenever we go into the before we go into the code inside we have to check the condition to see if we're actually going to go inside or not just like with a while loop so we're gonna check I less than three I less than three that's our check if it's true we're gonna go inside if it's false we're not going to go inside we're going to exit the for loop right now I is equal to 0 so 0 is less than 3 it's true so we are going to go inside now that we're inside we're gonna execute all of the code inside right now I only have one line but if I had 10 lines all those 10 lines would be executed so over here our line it our code is going to be executed and it's going to pronounce 0 because that's what we set our variable equal to and we haven't changed it yet now remember after every time we good we execute the code the next step is we are going to do the change in this case our change is I plus plus and we remember what that means that means we're gonna add 1 to the value of I so next our next step is I plus plus and I is now 1 because 0 plus 1 is 1 so notice how I sort of colorcoded these in the color of the boxes I had before our initialization here is red our condition is blue I have the code in black and then our change in green so that's the order for our for loops that were always going to have very first in the very beginning and initialization check if we're going to go inside if we do we're gonna execute the inside then we're gonna make our changes so after we made our changes we're gonna go back and you might think well our first step was the initialization so we're gonna go back into I equals 0 again right no remember what I said before the initialization only happens once and at the very beginning before we do any the forloop stuff so we're not going to go to the initialization we're gonna go into the condition just like with a little while loop after we do the inside we're gonna go back to the condition now we're gonna check the condition remember we did I plus plus I is now 1 is 1 less than 3 yeah once less than 3 so it's true and that means we're going to go inside now with that we're inside we're gonna execute all of our code and that means we're gonna print out I I right now is equal to 1 because we added to it before and now we're gonna have one printed out ok so next we just printed this out we executed the code so what does that mean we're gonna do after we execute the code yeah we're gonna make the changes in this case our change is adding 1 so what's 1 plus 1 to I plus plus that means is now 2 remember we're not going to go to the initialization next initialization we only do it at the very beginning next we're going to go to the condition again 2 less than 3 is that true or false it is true so that means that we are going to go inside the other for loop again once we're inside the for loop we're going to execute all the code inside that means we're going to execute print printing I which is 2 now we're going to make our changes again so that means our changes I plus plus so I plus 1 is 3 because I was 2 after we founded 1 it's now 3 now here's the tricky part we're gonna go to the condition again and now we're going to check is 3 less than 3 no 3 is not less than 3 if we had this as less than or equal to it would be true but 3 is not less than three so it's false that means that we are not going to go inside the for loop anymore we're gonna exit and then go to our code that's after that so that's just like the while loop where after our condition is false we're gonna exit the loop and we're not going to go inside of it anymore and that's what we have here the condition is false Oh extra Lube okay so now I'm going to go over some demos and clips so right now so right now I want you guys to make a new project and let's do a review of how to do that we're gonna do Java project we can also go to the top left and go to file new Java project we're gonna call this one for loop examples finish and then we're gonna go to our for loop examples folder in our project Explorer rightclick it new class we're going to name our first one example one after you do that you can finish and we're over here next we are going to make our main method you can pause this and catch up but right now I'm going to go on so our prompt is write a for loop that prints out numbers 1 2 3 4 5 so if we remember our very first step before we do anything is we're gonna do for keyword 4 and then the parentheses and then we're also gonna do curly brackets opening 1 in a closing 1 and notice how it has all this red right now that's because we haven't actually written anything yet and that's why it's wrong we actually have to know how to have something in here which we're going to write now so as we can see line seven that's what's inside of the for loop that's the code that's gonna be executed every single time we repeat so our first step what was section one it was initialization so we're gonna initialize a variable remember it's always going to be an integer we're gonna be naming ours I and we're gonna set it equal to the starting point so what's the starting point for this one so we can see it says write a for loop that prints out numbers 1 2 3 4 5 so what's the starting point where are we going to start from what number do we want to start with 1 we're not going to start from 0 because we don't want to pronounce 0 that's not our starting point we don't want to go there we want to start with 1 because that's where we're gonna start from and go after so for this example we're gonna do in 2 I equals 1 and remember we have that semicolon in between all of the sections we can't forget the semicolon or else our work won't compile so after that our next step is the condition now this one's a little hard but let's think back to our while loops the condition is kind of where we want it to stop where we want where we want the limit to be so as we can see here we want where do we want to stop we want to stop at 5 so our condition is going to include 5 and there are many ways to do this one example is I less than or equal to 5 because when it's less than when it is 5 5 less than equal to 5 that's true so it's going to go inside again in print cell 5 another way we can do this is less then 6 because when I is equal to 5 it's going to be true so then it's going to go inside again when it's 6 it's not going to be true and it's not going to go inside for this example what I'm going to do right now is going to go with I'm gonna go six and they both work they're both perfectly fine now we're gonna have another semicolon and our final step remember that is our change so let's look through all of our numbers what's the change in between each of them from one to two how do we get there what's that change we need to make you're right it's plus one so we can't just do plus one like that we have to have our variable in it and remember one of our short clips was I plus plus four for loops you're gonna be using I plus plus a lot so it's good to get used to it but there is there are more ways to do it for example I plus equals one here I'm gonna do I plus plus and now for what goes inside of the for loop what goes inside of our for loop is the code that's we want the for loop to print out I'm sorry the code we want our for loop to execute I kind of told you the answer and it's that we're gonna be printing our numbers out so we're gonna have a print statement and inside of it we're gonna print out one I mean now what sorry I I is gonna print out all of the the numbers that I that I is gonna be equal to and as we can see we're gonna cycle through all of them with this I plus plus so let's go to run it and we see we're correct one two three four five that's exactly what we wanted if you don't understand how this prints out this you might want to rewatch that example I did before in the slides that we trace through that for loop but if we're good to go now I want you guys to make another new class called example two I already have mine made but I want you guys to make your main method now pause the video if you have to and I'm gonna go on now so our prompt is write a for loop that prints out odd numbers from one to ten so that's a little harder because it includes odd numbers that's not just all numbers we need to do something a little different so remember our first step is always do keyword for our parenthesis and our curly brackets we have the red lines because we haven't finished everything yet but our first section is the initialization remember we're always going to have it as an integer we're gonna be naming ours I but what's it going to be equal to so we need to think of our starting place because that's what it's going to be equal to the starting place for our numbers here it's going to be one because the odd numbers from 1 to 10 are 1 3 5 7 9 our first one is 1 so that's our starting place that's where we're going to start with and so we're gonna set our variable equal to u next is our condition this one's a little more tough it's where we want to stop it's where we want that boundary that limit to be so if we look here our stopping place is 10 so there are many ways to do this but the way I'm gonna do it here is with less than or equal to I'm less than or equal to 10 another way we can do it is 9 because 10 is an even number and we're not gonna print that out print that out anyways I is less than equal to 11 that also works too because it's gonna go from 9 to 11 and then 11 is not gonna work false so it's not gonna go inside for this example I'm gonna go less than or equal to 9 because I want us to get used to using sometimes less than equal to sometimes just less than greater sometimes greater or equal to so it's good to get used to seeing all of them and using all of them our changed part is the probably the hardest part for this question we're gonna be only printing out all the numbers so let's think about that 1 3 5 7 9 what is the change what is the difference between all of those numbers it's 2 to get from 1 to 3 we need to add 2 how do we add 2 we can't use I plus plus because that's only for adding one we're going to do i plus equals 2 so we're gonna start with 1 and then we're gonna print it out with our print statement we're going to be do I because that's what our number is gonna be is keeping track of that number and let's go through this before we run them just to make run it just to make sure that we're we got it right inside equals 1 that's our starting place that's right our starting place is gonna be 1 for the odd numbers from 1 to 10 then we're gonna print out one yeah that's correct we're gonna add 2 to 1 yeah that's that's good because we want to go from 1 to 3 then we're gonna check is 3 less than or equal to 9 true we're gonna go inside again print out 3 then we're going to add 2 to 3 that's 5 then we're gonna go to our condition is 5 less than or equal to 9 yeah it is it's true so we're gonna go inside look at your prints l5 we're gonna add 2 again 7 7 is less than or equal to 9 print out 7 we're gonna add 2 to 7 9 is less than or equal to 9 we're gonna print out 9 now we're gonna add 2 to 9 which is 11 is I is 11 less than or equal to 9 no it's false so we're not gonna go inside this for loop that's why we could have had this as 10 or we could have had this as less than 11 because it would still be true so be false for all of the cases so this is our example 2 now I'm gonna go into our next example example 3 8 circuit last one for today so can you make a new class inside of our four loops examples folder call it example 3 finish and then we're gonna go to it so I want you guys to make a main method you can pause the video if you have to but our prompt is write a for loop that prints out your name five times I want us to do this example because it's a little different from what we've been doing what we've been doing is using that I variable to figure out what we're printing now we're just gonna be printing our name so I have my name here as James you can write it as your name but remember how we make a variable data type name and what it's equal to it's because it's a word I'm gonna call my name because that's my name and I'm gonna equal to James in quotes because it's a string so now we're gonna write that for loop remember our first step always is the key word for parentheses and the curly brackets our first section inside of the for loop parentheses is our initialization now this one's a little harder to think of what our initialization might be and it's a little more unclear because it just wants us to print or name five times there are so many ways to do this there are the the easiest way I'm gonna show you right now but just because I didn't do your way doesn't mean you're wrong and I'm going to show you some other ways you can give it to so we're gonna make an integer because it's always an integer we're gonna name our as I and for this I'm gonna make our starting place to 0 next we're going to do I'm gonna do I is less than 5 and then I'm gonna do I plus plus so let's make sure that I did this right we're gonna trace through what exactly this means our starting place is 0 so that means we're gonna start with 0 we're gonna add 1 so thou art I equals 1 I equals to I equals 3 I equals 4 when I equals 5 we're going to check here is I less than 5 no it's not I 5 is not less than 5 so then it's false we're not gonna go inside that means we're not gonna have a sixth one it's just gonna be the 5 so I'm gonna print out my name in here because that's what the that's what the prompt wanted and let me show you another way to do this let's say let's start with 1 and then we're gonna do less than or equal to 5 let's check that this is gonna work so it's going to start with 1 it's going to go 2 2 3 4 5 is 5 less than or equal to 5 yeah so that means that this is going to work and we're going to be printing our name five times we had to have that equal if this was not here it would only print it four times so let's run this to make sure we're correct one two three four five this is a correct example there are many ways you can do this but those are probably the easier ways to do it okay so now I'm going to go back to our slides and here's just a visualization of what we just learned so over here we have initialization condition increment change is the same thing it just means what are you going to change about the variable so we're going to start initialization then we're going to check the condition is the condition true if it is true we're gonna go inside of the code so the code block we're gonna run that then we're gonna make the increment that means we're gonna do the change we're gonna go back to the condition if it's true we're gonna go in we're gonna add again or whatever our changes and then check again so if it's false remember that or we're gonna leave the loop and we're gonna just going to go on with our code and whatever is after that so this is a little diagram of what our for loop is gonna look like what the Eclipse is actually gonna do when it looks at the for loop so now I have a few Submarine questions we're gonna answer them at the beginning of our next video but they are number one what's what's section one of the for loop and what does it do if you don't know you can go back to our video and look at it again but what is section two is our second question section three and number four is what are some shortcuts we can do for section three so that's the end of our video for today it was great to learn for loops with you guys and I hope you guys come back for our next
