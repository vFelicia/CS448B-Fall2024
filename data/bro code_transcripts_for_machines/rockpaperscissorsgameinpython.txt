hey everybody in today's topic I thought we would create a game of rock paper scissors now that we know how the random module Works let's begin by importing the random module we will create some options we will use a tuple we're not going to be changing the options so a tuple would be better than a list we have three options Rock paper or scissors I'll create a variable named player to store the Player's Choice for now I'm going to set this to be none as well as a computer our computer is going to pick a random Choice from these options rock paper or scissors in order to do so we can use the choice method of the random module random dot choice pick a random Choice from options let's have the player enter in some input enter a choice Rock paper scissors then we will display the Player's Choice and the computer's choice I'll use an upstring player colon space the variable player it's copy that paste it then change player to computer let's see what we have so far enter a choice rock paper scissors so I pick Rock the computer picks scissors let's try it again just for good measure I pick paper this time the computer picks scissors I pick scissors the computer picks paper okay we know that the computer is successfully picking a random Choice from our options now what if the player picks something that's not within this Tuple such as the gun well we would want to stop that right we need the user to pick a valid option only rock paper or scissors I think what we'll do is that when we accept user input let's place it within a while loop so indent this line while this condition is going to be kind of weird while our player variable is not in our Tuple options let's try this again to see what happens I pick the gun enter a choice all right well if I can't pick a gun how about a sponge well I can't pick that either Rock that works our condition is while the player variable is not found within our options if the player doesn't pick one of these options this while loop will continue forever once we pick something that's within our options we then escape the while loop let's check some win conditions now if the player is equal to computer that means it's a tie I will print it's a tie I'll add a few lcip statements else if the player is equal to rock I'll use the and logical operator and the computer is equal to scissors that means you win let's print you win let's add another condition else if the player picks paper and the computer picks Rock then you also win you win L Sif the player picks scissors and the computer and the computer picks paper then we will print you win else if the Player's Choice is not the same as the computers and we don't meet any win conditions that must mean we lose print you lose let's see if this works enter a choice rock paper scissors I pick the gun nope I can't pick that I pick Rock I pick Rock the computer picks scissors you win let me see if I can lose I'll pick paper you win again scissors I need to stop winning I need to see if the loose condition works okay it's a tie at least but I need to lose all right there we go I pick Rock the computer picks paper you lose what if the user would like to play again let's place all of this code within a while loop let's do so right about here now I'm not going to write while true like I normally do this time I'm going to create a variable let's say running is our game running I will set that to be true while running equals true or we could shorten this to just while running that's simpler I will place all of this code within the while loop to mass indent some code just highlight all of the code and then press tab hey everybody this is bro from the future I forgot to explain something the reason I'm not setting the condition of my while loop to be true is that if you have a lot of code within a while loop it can be really difficult to find where the break statement is if I set my condition to be a Boolean variable such as running it's a lot easier to find any instance where I use this variable if I were to highlight it we can see that running is found down here if I need to change any instance of this variable and rename it to something you can refactor let's rename running as maybe playing then I will refactor so my variable running is now playing and that change was made down here too so it's a coding preference every time we start a new game I will reset the player as well as the computer let's move these two lines into the while loop at the beginning so when we start a new game we will reset the player the computer will pick a new random choice so let's see what we have so far Rock I pick Rock the computer picks Rock it's a tie then we have to play again so paper you lose scissors it's a tie now what if we would like to escape the while loop after our win conditions I'm going to create a temporary variable let's name this play again then we will ask for some user input play again question mark y slash n meaning yes or no if the user types in something that's capital I'm going to use the lower method to make it lowercase so if our play again variable is equal to y we would like to escape what I would like to do is I would like to see if the player types in something that's not why I will precede this condition with the not logical operator if the user does not want to play again then let's take our Boolean variable running normally it's true and set that to be false running equals false that means we will escape the while loop once we escape the while loop I will print thanks for playing now I'm going to change this momentarily I just want to test it Rock play again yes paper play again yes scissors you lose play again nope thanks for playing this is entirely optional I try and create as few variables as possible I would personally rather avoid creating a variable here another way in which I could write this is that I can get rid of this variable let's move if not in front of the input and follow our input here then use the comparison operator then add a colon if the user's input after making it lowercase does not equal a y for yes set running to be false so that should work the same Rock play again yes enter a choice paper play again no thanks for playing this line would work the same but it's a little more complex for beginners to read or you can use the other method that I showed you alright everybody well that's a game of rock paper scissors