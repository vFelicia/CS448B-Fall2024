hey it's me again so today I got to explain element selectors in JavaScript element selectors are methods used to Target and manipulate HTML Elements by using these methods they allow you to select one or more multiple HTML elements from the Dom the document object model these methods are builtin methods of document the Dom we can select Elements by an ID a Class A tag name and then there's query selector and query selector all these methods return something different either an element an HTML collection or a node list one method you're probably already familiar with is get element by ID so in this example within our HTML document we will create an H1 element I will create a heading for my sample web page I'm hungry so I'm going to talk about food my heading is going to be food are us it's like Toys R Us but it's with food I'm going to give this H1 element an ID of my Dash heading so going back to our JavaScript file I can select this element by its ID I'll store a reference to it const my heading equals we're accessing the Dom with document. get element by ID that ID was my heading I can access this element this H1 element using this reference so let's take my heading access its style access its background color so with CSS properties in JavaScript if you're accessing them through the Dom they have a camel case naming convention if you're selecting these properties with CSS they have a hyphenated naming convention so do pay attention to that so with the background color I will set it to be yellow as if we're highlighting it you could also apply different CSS properties let's take my heading access its style access the text align property and set it to be Center and it's now centered now if I was to console.log this element of my heading this is what we would see it displays my h HTML element including its style if it has style for some reason if this ID doesn't exist for example I'll misspell heading as heading with an extra G well this returns null if I were to eliminate these two lines of code you can see that null get element by ID returns a single element if it finds it or null if it doesn't the next method is get Elements by class name this returns an HTML collection it's similar to an array but it's limited in the builtin methods that it has So within our HTML document I will create three separate div sections this first div element will have a class of fruits my first fruit will be Apple so let's copy this development paste it two times I'll change the second to be orange then banana all right going back to our Javascript file I will use this method of get Elements by class name this will return an HTML collection it's similar to an array but it's not technically the same so const fruits this will be the name of my HTML collection equals document we're accessing the Dom get Elements by class name what is the class name that we're getting fruits let's console.log fruits just to see what it is what are we working with so fruits is an HTML collection my collection contains these three elements we have three objects within this HTML collection if I was to take a look at some of these properties we should have text content so for the first element we have text content of Apple for the next Dev elopment which has an index of one the text content is orange we can assume that the next element has text content of banana to change something about one of these elements let's begin with the first element we have an HTML collection of fruits to select one of these elements you'll use an index so let's take our HTML collection of fruits at index zero that's going to return the first element our div element of Apple I will access its style access its background color set it equal to be yellow as if we're highlighting it there we are Apple it's highlighted for the next element I will increase the index to one that will select our orange and then two would be banana if I would like to iterate over all of these elements I can use an enhanced for Loop we'll say let fruit of fruits HTML collections are iterable we can iterate them with an enhanced for Loop let's take each fruit access its style access its background color then set it to be yellow and that should highlight all of them now HTML collections don't have a builtin for each method HTML collections do allow for live updates but unfortunately they have a limited amount of utility methods if I attempt to use our HTML collection of fruits then attempt to use a for each method here's what happens we have a type error fruits. 4 each is not a function HTML collections don't have a for each method we're not able to use that what we could do is typ cast our HTML collection as an array let's access the class of array then use the from method this will return a new array of fruits we'll typ cast our HTML collection as an array then you could follow this with the for each method if you so choose for each element within our array after typc casting it let's take each fruit I'll use an arrow function what would we like to do let's take each fruit access its style add access its background color then set it to be yellow as if we're highlighting it and that does work get Elements by class name will return an HTML collection of all matching elements that share this class if you would like to use array methods with this HTML collection you would want to typ cast it to an array all right now we have get Elements by tag name within our HTML document we'll create create two unordered lists I will create an H4 heading of root vegetables let me scroll down I will create an unordered list with a few list items three should be good for my first list item that will be beets beets are a root vegetable carrots and potatoes let's copy our unordered list and our H4 heading paste it change the second H4 heading to be nonroot vegetables my first list item within this other list will be broccoli celery and onions I just picked three vegetables kind of at random with our next method of get Elements by tag name I can select one of these elements by their tag name H4 unordered list list items take all matches within our HTML document stick them all within an HTML collection I will create const const H4 elements equals we're accessing the Dom use the get Elements by tag name method let's select all H4 elements then I will console.log my HTML collection of H4 elements let's see what it is so it looks like this HTML collection has two elements two H4 elements the text content of the first element is root vegetables then we can assume that the other element is nonroot vegetables yes it is nonroot vegetables we can access individual ele elements of this HTML collection by an index let's take this reference of H4 elements access the first index access the style access the background color set it to be yellow as if we're highlighting it and that should highlight root vegetables the next index of one would be nonroot vegetables to apply CSS properties to all of the elements I can use an enhanced for Loop for let H4 element singular of H4 elements plural take each H4 element access its style access its background color set it to be yellow and that will highlight all of the H4 elements let's create another HTML collection of all the list item elements we'll create another reference to all list item elements so that'll be Beats carrots potatoes broccoli celery and onions const Li elements equals document. getet Elements by tag name the tag that we're selecting is all list item elements so using a for Loop let's iterate through them let Li I element singular of Li I elements plural for each list item element access the style access the background color then set it to be a different color let's say light green and now all list item elements will be a light green color and again since these are HTML collections not arrays they don't have any array methods but we can typ cast them so that they do if I wanted to change the background color of these with the for each method of arays I'm going to typ cast our HTML collection of H4 elements as an array I will access the class of array use the from method pass our HTML collection of H4 elements as an argument if I wanted to use the for each loop I can method chain follow this with for each what do we want to do for each of these elements take each H4 element use an arrow function do this take each H4 element access its style access its background color set it to be yellow and that does work so let's do this with our list item elements I'll just copy this because I'm lazy we'll typ cast our list item elements HTML collection for each list item element take each list item element access its style access its background color set it to be light green and that does work too that is the get Elements by tag name selector it will select all elements with a matching tag name throughout your document it returns an HTML collection now we're going to talk about query selector query selector will return the first matching element or null if it doesn't find any matches I will create a const of element equals document do query selector query selector will return the first match to select an element by a class name we'll use dot the name of the class these three elements have a class of fruits let's select that dot fruits if I was to take this element access its style access its background color set it to be yellow which element do you think is going to be selected the first Apple it's the first matching element Corey selector only returns a single element the first match if I selected a tag name of H4 that would select root vegetables even though we have two H4 elements the first match is selected if I selected the first list item element that would select beats that is the first list item element on my web page if I change this to UL meaning unordered list it would select the first unordered list if I attempt to select something that doesn't exist like any ordered lists well they don't exist there's no matches if I was to console.log my element it would return null there's no matches so query selector selects the first matching element or null you can select a class or a tag name then the last method we'll discuss is query selector all this returns a node list a node list is similar to an HTML collection except it has builtin methods similar to arrays however node lists are static HTML collections are live since node lists are static they do not update automatically in the Dom HTML collections are live they will I'm going to select all elements that have a class of fruits I'll create a reference to this const fruits equals document. query selector all we are getting a class of fruits I can access this node list by an index number let's select the first element access the style access the background color set it to be yellow and that will select Apple let's select to the next element that's orange the next would be banana let's select all list item elements I'm going to rename this though let's rename fruits as Foods let's select the first element that would be beets the next element would be carrots then potatoes broccoli celery onions so if I was to console.log Foods this would give me a node list with six elements node lists do have a builtin for each method let's use that we don't need to typ cast it as an array take our node list of foods use the builtin for each method what do we want to do take each food use an arrow function do this take each food access its style access its background color set it to be yellow this will take all list item elements change the background color to Yellow as if we're highlighting them all right everybody so those are different element selectors get element by ID get Elements by class name get Elements by tag name query selector and query res select or all there is a lot of overlap where you could select any number of these to select something but they each return something different personally I like using a combination of get element by ID and query selector all but that's just my personal preference in conclusion element selectors are methods used to Target and manipulate HTML elements they allow you to select one or more multiple HTML elements from the Dom once you select your element or elements you can make any sort of changes that you would like and well everybody those are element selectors in JavaScript