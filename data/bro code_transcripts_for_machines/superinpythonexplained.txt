hey everybody so today I got to talk about the super function in Python super is a function it's used within a child class to call methods from a parent class the child class is the subass the parent class is the super class hence why this function is named the super function using the super function it allows you to extend the functionality of the inherited methods here's an example we'll create a few shape objects we'll need to set up the classes though we'll have class Circle for the time being I'll just write pass we'll fill it in later class square and class triangle for each of these classes in order to instantiate objects we'll need a Constructor we will Define our Constructor our init method when creating circles what sorts of attributes should a circle have let's say a color what's the color of the circle is it filled or not filled will be another attribute and a radius then let's assign these self. color equals the color that we receive self. filed equals filled self. radius equals radius let's do this with the square and triangle really I'll just copy our Constructor and paste it squares don't have a radius with a square the width and the height are the same let's replace radius with width we'll also keep the color and filled attributes self. width equals width now with triangles again let's copy our Constructor we'll need a width and a height self. height equals height so with programming we try not to repeat ourselves if we don't have to what do all of these classes have in common they all share the attributes of color and filled the ways in which they are different is that Circle has a radius attribute square has a width triangle has a width and a height if we have to make any changes to one of these attributes we would have to do so manually for example let's replace filled with isil now I need to look throughout my code for any instance of filled and replace it with is filled it's a lot of work and I might make a mistake such as here and here it's better to write your code once and try and reuse it so that's where inheritance and the super function can come in handy we're going to take the attributes of color and is filled and place it within app parent class these children classes will inherit those attributes so class what do they all have in common they're all shapes class shape and for now I'll write pass circle is going to inherit from its parent of shape that also applies with square and triangle we'll set up a Constructor for shape Define init we will pass in the color and is filled then we will assign these add attributes self. color equals color self. is filled equals is filled we don't need to manually assign these attributes within each of these Constructors for the children instead what we have to do is within the Constructor for each of these children classes we have to call the Constructor for the parent also known as the super class of shape so we will eliminate these two lines of code use the super function dot call The Constructor of the parent that is the dunder init method but we need to pass in the color that we receive and is filled this will be a Boolean and let's do this with the square class and the triangle class we still need radius for the circle width for the square width and height for the triangle we're going to call the super function to take care of whatever our attributes all these types of shapes have in common such as color and is filled now let's see if this works let's construct a few objects we will create a circle named Circle call The Constructor for Circle we have to pass in a color a Boolean if it's filled or not and a radius so for the color of the circle let's say red is filled let's say that is true and a radius of five you could even use keyword arguments for better readability although not necessary but for clarity let's say color equals red is filled equals true radius equals 5 let's see if this works I will print our circles color it is red print our colors is filled attribute the circle is filled that is true and the radius print circle. rius the radius of the circle is five we could even convert this to an F string I'll add a placeholder then add centimeters 5 cm let's construct a square object square equals Square we'll need a color is filled and a width I'll just copy what we have and make a few changes replace radius with width the color will be blue is filled will be false the width will be six we don't need a height because squares have an even width and height if we ever need the height we can assume it's the same as the width in this case six let's check out our square square do color Square do is filled Square do width our square is blue it's not filled in the width is 6 cm let's create a triangle object triangle equals triangle pass in our arguments the color will be yellow is filled will be true the width will be seven and the height will be eight let's print our triangle's color is it filled its width and its height our triangle is yellow it's filled in the width is 7 cm the height is 8 cm so that's how you can use the super function to reuse the Constructor of a parent CL class we don't need to manually assign each of these attributes within each of the children classes we can do that in just one place when we refer to Super imagine that we're replacing this with the parent class name such as shape that might be a good way to think of it use the Constructor of the parent class of shape and pass these arguments in what you could do as well is extend the functionality of a method So within our shape class let's create a method of describe we will describe the attributes of this shape we will print use an FST string when we want to describe our shape let's say it is at a placeholder self. color what is the color of this shape and is it fil or not and add a placeholder we'll use a tary operator print filled if self. is filled is true else we will print not filled each of these types of shapes circle square and triangle will have access to a describe method let's attempt to use it take our Circle use the describe method that's inherited it is red and filled Square it is blue and not filled triangle it is yellow and filled so then we also have method overwriting what if we create a similar method of describe within circle square and triangle let's do that Define a describe method within our Circle let's calculate the area what's the area of the circle I'll use an F string it is a circle with an area of then we'll calculate the area given the radius to calculate the area of a circle we can take Pi I'll just say 3.14 just to keep it simple times the radius squared self. rius time self. rius if I were to call the describe method will we use the parents version of describe or the child so let's take our Circle use the describe method the result it is a circle with an area of 78.5 I should really add cenim squar after that cm squared this is called method overwriting if a child shares a similar method with a parent you'll use the child's version and not the parents this is Method overwriting if you would like to extend the functionality of a method from a parent you can use the super function not only do I want to use the describe method of the child I would also like to use the describe method of the parent So within this function we will use the super function access the describe method of the parent what we're doing is extending the functionality of the describe method if it is a circle with an area of 78.5 cm squared the circle is red and it's filled or you can change up the order let's use the parent classes describe method and extend the functionality with our own print statement it is red and filled it is a circle with an area of 78.5 cm squared let's finish this with the square and triangle classes I'll copy what we have for the described method Within the circle class but we'll make a different calculation describe the square it is a square with an area of take self. width times self. width the height and the width are going to be the same if it's a square then describe our triangle it is a triangle with an area of width time height we have a height in this case divided two we've already described our Circle let's describe our Square it is a square with an area of 36 CM squar it is blue and not filled let's describe our triangle it is a triangle with an area of 28.0 CM squar it is yellow and filled all right everybody that is the super function it's used in a child class to call the methods from a parent class also known as the super class it allows you to extend the functionality of the inherited methods within a child class you could use it within a Constructor to assign any attributes that all of its siblings have in common such as color or if that shape is filled when used within any other method you can extend the functionality of that method not only are we printing this message from the parent we're tacking on another PR statement before that and well everybody that is the super function in Python