how's it going everybody it's bro hope you're doing well and in this video i'm going to teach you guys everything you need to know to get started with java so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm here's an outline of the topics covered in this video if you would like to skip ahead to a certain section feel free to click on any of the timestamps posted in the description also at the end of this video we're going to be discussing some tips and tricks so be sure to watch until the very end i'll give you three reasons why you need to learn java besides being one of the top three most popular programming languages worldwide java is an extremely flexible language it's used extensively by business enterprises android apps games and if you learn java you could land a job as a java developer according to glassdoor entrylevel java developers have an average starting salary of 70 000 that's nothing to sneeze at so why not learn java are you still here okay cool let's begin with the basics computer languages are on a spectrum between being high level and low level computers only understand binary it's referred to as machine code it's a low level format that a machine can understand however humans have difficulty reading binary since it's all ones and zeros to create machine code we write in a format called source code which is understandable by humans and compile to machine code when we create javasource code the file ends with a dot java file extension think of compiling code as transforming source code to machine code we do this because machines can't read source code and vice versa humans have trouble reading machine code unless you're a robot or an android or something however when we compile our source code to machine code it's machine specific if we write source code and compile on a mac we can only run that code on a mac and the same concept applies for pcs although the java language has a solution for this problem with java we have an intermediary step where we can compile our source code to a format called bytecode bytecode is cross platform and ends with a dot class file extension here's an example of java source code and here's an example of that same source code after we compile it to bytecode it's kind of funky right since bytecode is crossplatform you could write your code on a mac and then send your bytecode file to your friend who can then run it on their pc using a jvm to translate the bytecode to machine code but we are going to need the help of a jvm to translate bytecode to machine code but where can we get a jvm well it's included with a jdk and what is a jdk well jdk is an acronym for java development kit it contains developers tools to help us code as well as a jre a java runtime environment which contains a library toolkits and our jvm which is another acronym for java virtual machine which translates by code for us to machine code so all you need to worry about is downloading a jdk and everything else will be included and now that we know what a jdk is it's time to download one so open up the internet and go to any search engine and look this up java jdk download go to the first link java se downloads sc stands for standard edition go to jdk download scroll down and find the appropriate file for your operating system since i'm running windows i'm going to download this exe version agree to whatever and download and when this finishes downloading i'm going to open this open when done on my computer i currently have a jdk already installed but i'm going to go ahead and reinstall it for the sake of this video click next next then wait a little bit and close i would also recommend an ide that's another acronym and it stands for integrated development environment think of it as software that helps us write other software you could write code with a text editor such as notepad and then compile the text file but doing so is not really beginner friendly so an ide provides an interface for us to write code check for errors compile and run code there's two ides that i would recommend they are both eclipse or intellij idea it doesn't matter which one you download because the code that we write is still the same so let's download an ide now it's time to install the ide i would recommend either the eclipse ide or intellij idea i'm more comfortable with eclipse so i'm going to stick with the clips so go back to the interwebs and look up either eclipse ide or intellij idea ide so i'm going to look up the clips click the first link click this orange download button go to download packages and select eclipse ide for java developers and select the correct download for your machine i'm going to select the download for windows and click download and then just wait a little bit again like usual for me this is currently a zip file so i need to select this file and extract all with the newly extracted folder navigate to this eclipse application so you can select this to launch eclipse for convenience i'm going to create a desktop shortcut so for me i'm going to go to where is it send to create desktop shortcut and then click to launch you can select a workspace i'm going to use the default and click launch we are now within eclipse and we can begin a new project we are now ready to rock and roll so let's begin by creating our first java program but in order to do so we need to create a java project if you're brought to this welcome screen you can close out of this because it's annoying and in order to create a java project navigate to your package explorer and select create a java project if you're missing the package explorer you can go to file new dropper project and that will take you to the same place we need a unique name for this java project i will call this my first program and i will want to configure the jre the java runtime environment and we downloaded that with the jdk because the jre is a component of the jdk so i'm currently using 13. i'm going to change this to 15. that was the one that i more recently downloaded just now so go to configure jres and i'm going to click add select standard vm vm is virtual machine click next go to jre home go to directory and i'm going to make sure that i'm selecting the most recent jdk for me that is 15 select folder finish apply apply and close then finish if this window pops up you can select don't create that's to create a module if you look to the left hand side within the projects folder we now have a java project called my first program but we will need to add what is called a class to this project a class is a collection of related code so in order to add a class to this project i'm going to select this project folder then go to file new class and we need a unique name for this class i usually call this main but you can name it whatever you want and then we are going to check this public static void main checkbox and then click finish with that out of the way take a look back within your project folder and you should now have a java file that shares the same name as your class name my class name is named main therefore my java file is also called main so this has the dot java file extension and with what we discussed before this is source code it's in a format that humans can easily read and understand and when we compile this source code to bytecode we're going to create a new file that has the dot class file extension and with that bytecode file we can run that and translate it using a jvm a java virtual machine here's our java file and we have our class and mine is called main so all the class is is that it's a collection of related code we won't be exploring in depth on the topic of classes until we reach the subject of objectoriented programming which is about 20 videos into this playlist so you have some time so this is our class mine is called main anything within the outer set of curly braces belongs to the class and is contained within and within our class we have what is called a main method our program won't run without this method because when we run our code we begin by calling the main method so if we were to compile and run this code you can do so by clicking the screenplay button all output is displayed to the console window and nothing appears to happen because we haven't written anything yet so if we were to remove this main method and tried to do this again we would encounter an error because our main method was not found in the class main it's asking us to please define the main method now looking back when we created our class we went to file new class and in order to generate the main method we checked this checkbox here that states public static void main so the main method generated for us when we created this class but if we're missing it we can easily just type it in a textbook that i read in college said to think of the main method as a magical spell or incantation that we have to say in order to get this program to run so we are currently missing a main method but we can easily just type it in so repeat after me public static void main then we need some parentheses string straight braces args and then a set of curly braces and that is it we now have a main method and our program runs and compiles just fine so any code within the main method will execute starting at the top and then work its way down so with the main method any code you place at the top will be executed first so let's print something to the console window in order to display some text all you have to do is type this system with a capital s dot out dot print then you need a set of parentheses and then a semicolon at the end so within the parentheses of this print method we can type some text to display to the console window but we need to make sure that our text is within a set of double quotes and we can display some text let's say i don't know what's a food you like i love pizza so if i were to run and compile this it's now going to print i love pizza to the console window let's say that we would like to display another line of text directly underneath the first we can accomplish that by using another print statement so for convenience i'm going to copy this first line paste it directly underneath and display some other text such as it's really good so when i compile and run this pay attention the output is one long line of text the reason that this is all displaying as one long line of text is because after printing the first statement our cursor does not move down to the next line in order to do so we could use a print ln statement short for print line it's as if we're hitting enter when we finish outputting our text so let's try this again using a print ln statement and now each line of text is on its own individual line so that's what distinguishes a print and print line statement a print line will add a new line character as if you're hitting enter when you finish outputting your text whereas a print statement does not so that's the difference between the two an alternative to using a print line statement is that we could stick with the standard print statement and at the end of our text add what is referred to as an escape sequence for a new character now an escape sequence is a character preceded with a backslash and one of a few characters that follows directly afterwards this is an escape sequence for a new line character when we add this escape sequence for a new line it's as if we're hitting enter wherever we place this escape sequence so within our string of text for our first line at the end we're going to add backslash n and this will have the same effect as a print line statement it's going to display our text and then move the cursor down to the next line as you can see there is no additional change to the output within the console window now what if we reverted our print statements back to print line statements and kept the additional escape sequence in for a new line character well we're going to have an extra empty line of text because we're displaying our line of output plus an additional character for a new line and then we're hitting enter at the end via the print line statement so we're going to have an additional empty line between these two lines of text if we were to do that so a few other escape sequences that you might be interested in include the following a backslash t will add a tab so let's precede our text with an escape sequence for a tab which is backslash t so this is if we're hitting tab before displaying our text and we now have some empty space preceding our line of output if you need to put something within quotes let's try to do so normally so our compiler is actually going to be confused because we cannot normally add a set of quotes because our text already needs to be surrounded with quotes so if we need to literally display some quotes some double quotes we need to precede our double quotes with an escape sequence so backslash then quotes so this will allow us to literally print some double quotes so we're going to surround our first line of text with some double quotes now and if you need to display a backslash then you need to use double backslashes because if you use just one your compiler thinks you're trying to use an escape sequence and that's how to display a backslash in summary anything preceding with a backslash is the beginning of an escape sequence and there's one of a multitude of characters that could follow afterwards and depending on the character this has special meaning for your compiler to do something specific now anything that is following two forward slashes is the beginning of a single line comment i could write this is a comment and this line of text is going to be ignored by the compiler so there's going to be no change to this program with the additional comment anything that is a comment is ignored by the compiler so it's useful if you need to leave yourself a note or for somebody else that's looking over your code if you need a multiline comment that is a forward slash followed by an asterisk and anything up to an asterisk and another forward slash will be the bounds of this comment so i could write on a new line for each word this is a comment and all of this will also be ignored by the compiler so that's how to write a multiline comment a forward slash and an asterisk and anything up to another asterisk and forward slash so those are comments alright ladies and gentlemen it's time for this section on tips and tricks and for my first trick i'm going to change the color scheme of my ide we're currently using the light theme but i much prefer the dark theme i'm going to be joining the dark side so in order to change the color scheme of your ide go to if you're using eclipse window preferences under the general tab go to appearance theme and you can change the theme here i will click dark i'm going to select apply okay and then apply and close so the dark theme is great if you want to feel like a pretend elite hacker for my next trick i'm going to change the font color as well as the background color of my console window in order to do so head back to window preferences under run debug go to console and you can change the color schemes here i'm going to change the text color to a bright green click ok as well as the background color to a slightly lighter shade of black that should be good when you're finished click apply and then apply and close and you may need to run this again to see the changes so that's how to change the font color as well as the background color of your console window so it's somewhat tedious to have to write a print line statement correct system dot out dot print line normally that's a lot to type so a shortcut would be to type sys out then hold control space and your ide will auto generate the rest of this print line statement for you let's move on to trick number four let's say that we have hundreds of different print line statements and we need to change the text to print because we made a mistake so there's a feature where we can replace some text in your program with another so let's pretend we would like to replace print line with print so go to edit find replace and we can replace some text with something else let's find each instance of print line and replace this with print then click replace all so that will take care of all that for you let's move on to some final tips so with spaces spaces don't make much of a difference within your code for example after this dot and my print portion of this print statement i could add a bunch of spaces for no reason and this would run and compile just fine i'm not sure why you would do that but that's just to reinforce the point that spaces don't make much of a difference unless you're using a space to split up some keywords then you might run into an issue or if you're adding space to a string well then that's going to have a noticeable effect so spaces for the most part don't really matter too much depending on where they are here's a trick on zooming in or out hold control minus to zoom out or control plus to zoom in or you could go to window editor then zoom in or zoom out within this menu here's my last tip for you let's say you accidentally close out of your package explorer or your console window you can easily bring those back by going to window show view and then they are all listed here so i would like to bring back my package explorer as well as my console window alright guys and gals you should be ready to get started with java be sure to check out the full 100 video playlist as well and if you could do me a small tiny favor i would greatly appreciate it if you could help me defeat the youtube algorithm by smashing the like button drop a comment down below and subscribe if you'd like to become a fellow bro hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you