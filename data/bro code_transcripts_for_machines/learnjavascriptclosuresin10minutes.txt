hey what's going on everybody so in today's video I got to explain closures in JavaScript a closure is a function defined inside of another function the inner function has access to the variables and scope of the outer function by using closures they allow for private variables and state maintenance JS libraries and Frameworks such as react View and angular use closures all of the time you'll see closures fairly often with functionbased components you have function inside of other functions let me give you a very basic example we'll have an outer function named outer within the outer function we'll have a function named inner the inner function has access to everything within the outer function this scope if I was to create a variable let message equal the word hello with this in my inner function I can use this message variable console.log my message now if I invoke the outer function nothing appears to happen when we call the outer function we're now within the scope but then what there's one of a few things we could do if I would like to call the inner function from within the outer function I would need to call it somewhere here let's call the inner function at the end there we go we have displayed the word hello everything within the outer function is part of a closure we have a function defined inside of a function this inner function has access to everything within that scope including this message variable one benefit using closures is that any variables are considered private outside of the outer function I will attempt to update our message message equals goodbye now this doesn't work as you can see this message variable is in a different scope it's kind of like it's in another dimension what we've done here is we have created a different message variable in a different scope outside of the outer scope I have no way of accessing the message variable so that's one of the benefits of closures you can encapsulate variables and make them private let me give you another example a closure can maintain the state of a variable we'll create a counter program so I'm going to create a function to increment within the increment function I will set a count variable equal to zero I will increment our count by one then console.log I'll use a template string count increased to I'll add a placeholder we'll display our count variable now anytime I attempt to call the increment function it'll increase our count by one but if I was to execute this function again well we're redeclaring this variable of count we're resetting it every time we call this function I can't get the count to go past one because we keep on resetting it but by using a closure we can have state maintenance we can maintain the state of this variable and remember where this variable was previously I mean I could take this variable and declare it outside of the function but then we don't have any security for that variable I will set the count equal to a million we're maintaining the state of that variable but it's not private anybody and anything can access and change that variable a closure maintains the state of a variable and makes a private what we'll do is enclose all of this code within another function we'll create a function to create a counter how do we access the scope within the create counter function here's another possibility we will return an object we will need a set of curly braces our object will have a property of increment and its Associated value will be a reference to increment there is a shorthand version of this you can just use the function name as a property we're returning an object with the method of increment so now I'm going to create an object named counter counter equals invoke the create counter function this will return an object that has an increment method so I'm going to take our counter object use the increment method count increase to one not only do we have an increment method we have a count variable as well you could say that what we've done with this outer function it's very similar to creating a class we can use classes to instantiate objects in this case we used a function to return an object so if I was to take my counter and increment it again our closure should maintain the state of that variable count count increase to two it's not resetting every time we call the method count increase to three let's attempt to access our count variable counter. count equals 0 then I will console. log R count reference error count is not defined let's attempt to display our count variable console.log take our counter object access the account variable it is undefined we don't know what it is it's hidden your closure can have more than one function so what we'll do is create a get count function we'll use the get count function to return our count if we need access to it function get count we will return our count variable within the return statement where returning an object we will add another property of a reference to the get count function so now within our counter we have a method to get the count variable let's console.log I'll use a template string the current count is I'll add a placeholder take our counter object use the get count method the current count is three if I was to increment our counter again well that increased to four all right last example we're going to create a closure for a game where we keep track of points we have a score let score equals zero we'll Define the functions function increase score we'll have one parameter points in order to score some points we have to pass in some points as an argument take our score Plus equals R Points then let's console.log I'll use a template string plus add a placeholder R Points then I'll add pts meaning points it shortened let's create a function for decrease score change increase to decrease score minus equals points minus points and then let's get our score function get score return the score if I need to increase the score I will invoke The increased score function but I have to pass in points we scored five points let's do this again we scored six points let's decrease the score I will subtract three points minus three points let's get the current score console.log I'll use a template string the final score is add a placeholder get score the final score is eight I'm going to add points after that eight points all right problem with this is that we can take our score and set it to anything you scored like a kajillion points so for some security let's enclose all of this code within a closure I'll create an outer function function create game this will return an object let's cut all of this code paste it within the outer function of create game and then at the end we will return an object that has references to these functions return an object we need curly braces for that a reference to increase score decrease score and get score so now I will use the create game function to return an object const game game will be our object we will invoke the create game function and return an object so now if I want to increase the score decrease it or get the score I have to use the methods of this object game. increase score game. decrease score and game.get score we have five points six points minus three points and then we have the final score of eight points well everybody those are closures think of them as a function defined inside of another function the inner function has access to the variables and scope of the outer function these are used frequently with JS libraries and Frameworks such as react View and angular especially when you work with functionbased components and well everybody those are closures in JavaScript