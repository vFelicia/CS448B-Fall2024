hey what's up everybody so in today's video I got to explain inheritance inheritance allows a new class to inherit properties and methods from an existing class these two classes have a parent child relationship a child will inherit properties and methods from a parent it's kind of like a family tree a child will inherit genes from a parent inheritance helps with code reusability because we don't need to keep on repeating the same properties and methods if all the children share them here's an example we'll create an animal class class animal will have a property of alive if you're an animal you start off being alive all animals should be able to eat and sleep we'll create methods for those we'll have an eat method all we're going to do is console.log I'll use a template string this now I'll add a placeholder this.name is eating and a Sleep Method sleep this this. name is sleeping animal will be the parent class we'll create children classes that inherit these properties and methods let's create a few children classes class rabbit our rabbit class will inherit all the properties and methods of the animal class to declare a parent child relationship ship the child will extends the parent animal for the rabbit I'm going to give this class a name name equals rabbit this will be a property if you're familiar with the static keyword you can make the static now we'll create a fish class that also extends animal class fish extends animal fish will have one property name equals fish and a hawk class class Hawk extends animal will have one name property Hawk all right let's see if this works if we create a rabbit fish and Hawk object they should have access to these properties and methods let's create const rabbit equals new rabbit const fish equals new Fish const Hawk equals New Hawk all right let's see if our rabbit has an A Life Property console.log take the name of the object rabbit do access a property or method aot Al that's our property the rabbit is alive but what if the hawk swoops in and kills the rabbit let's change the alive property of the rabbit rabbit. alive equals false the rabbit is no longer alive now let's see if our rabbit has access to a eat and Sleep Method rabbit. eat this rabbit is eating and sleep rabbit. sleep the rabbit is sleeping Let's test this with fish fish. alive fish. eat method fish. Sleep Method the fish is alive the fish is eating the fish is sleeping and Hawk hawk. alive hawk. eat method hawk. Sleep Method the hawk Is Alive the hawk is eating the hawk is sleeping our children classes of rabbit fish and ha all inherited the properties and methods of the parent animal class this helps with code reusability because I don't need to declare all of these properties and methods within each of the children classes like this we're saving a lot of lines of code it's not that apparent with just a few child classes but imagine if you had hundreds of different child classes well by using inheritance you would be saving a lot of time but not only that the children can have their own unique properties and methods too for example rabbits will be able to run but fish and Hawks can't run that's a method that only belongs to rabbits within our rabbit class let's create a new method a run method will console.log I'll use a template string this add a placeholder this.name is running within our fish class let's create a swim method swim this this do name is swimming and Hawks will be able to fly we'll create a fly method this this. name is flying let's minimize these classes let's take our rabbit object display the alive property the eat method the Sleep Method and the run method rabbit. run method the rabbit is eating the rabbit is sleeping the rabbit is running now let's do this with fish fish. alive fish. eat method fish. Sleep Method now does the fish have a run method it does not fish. run is not a function run is a method that belongs to the rabbit class fish can't run because well they don't have legs we did not give our fish class a run method they can swim though but they can't run fish. swim method the fish is swimming let's do this with Hawk our Hawk cannot swim but it can fly we'll use the fly method the hawk is eating the hawk is sleeping the hawk is flying and of course our rabbit can't fly or Swim does our rabbit have a fly method it does not rabbit. fly is not a function all right everybody so that's inheritance it allows a new class to inherit properties and methods from an existing Class A Child inherits properties and methods from a parent it helps with code reusability I don't need to declare all of these properties and methods for each of these classes I can simply reuse it that helps us follow the dry principle don't repeat yourself and well everybody that is an introduction to inheritance in JavaScript