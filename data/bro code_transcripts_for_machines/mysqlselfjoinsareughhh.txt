hey everybody today I'm going to be explaining self joins a selfjoin is really just any type of join where you join together another copy of a table to itself they're used to compare rows of the same table they really help with displaying a hierarchy of data so a self join you just joined another copy of a table to itself so here's an example I have a table of customers I'm going to create another column named referred by if a customer refer somebody and they register as a new customer maybe they get like a free meal or something let's create a new column within our customers table alter table customers add referral ID the data type will be int then select all from customers now let's populate this column update customers set referral ID equal to one where customer ID equals to our first customer Fred fish he was not referred by anybody that value will be null however Larry Lobster was referred by Fred fish we'll set the referral ID for him to be won Larry Lobster was referred by Fred fish so Fred fish gets a free meal at the Krusty Krab now Larry Lobster he's going to refer both bubble bass and Poppy puff so he'll get two free meals set referral ID equal to two where customer ID equals three and four Fred fish referred to Larry Lobster Larry Lobster referred bubble bass and Poppy puff it makes me think of a pyramid scheme I'm going to use a selfjoint to replace our referral ID column with the first and last name of the customer that referred one of these people so I'm going to select all Now when using a self join we'll take from our table customers than inner join customers basically we're just joining another copy of a table to itself but we'll need to give these tables what's known as an alias a nickname let's say from customers as maybe a that's the nickname inner joint customers as b the original copy of our customers table will be referred to as a the copy will be B they are the exact same table but we have two of them and we'll stitch them together with a join to link these Tables by the referral ID and the customer ID I'll add this additional line on referral ID equals customer ID let's take a look to see what we have so far column referral ID in on Clause is ambiguous am I referring to the referral ID of table a or table B I'm referring to the referral ID of table a what I'll do is prefix this column name with the name of my table followed by dot a DOT referral ID equals I need the customer ID from my table copy which is known as B I will prefix B to this customer ID column the referral ID of table a is linked to the customer ID of table B oh yeah look at that we have joined these two tables the referral ID of table a is linked to the customer ID of table B I don't necessarily need all of these columns we're displaying everything let's select only specific columns I would like a customer ID first name last name now we have one problem with our first name and last name do we mean the first and last name Columns of table a or table B let's prefix these columns with the name of our table the Alias we're using I would like the first name from table a the last name from table a followed by I'm going to put this on a new line just for readability the first name of table B then the last name of table B then be sure to include that within the customer ID too so the customer ID of table a okay we're getting somewhere customer ID first name last name first name last name okay so if somebody were looking at this table they would think why are there two columns for both first name and last name let's concatenate these two columns concat first name last name I'll add a space in between the first name and last name I'm going to give this column an alias as referred by all right there's our table we have all of our customers who were referred by another customer Larry Lobster was referred by Fred fish bubble bass and Poppy puff were both referred by Larry Lobster you could use a different type of join besides an inner join we could use a left join what we're telling MySQL is to display all of our customers on the left table if one of these customers was referred by another customer join those rows as well you can see that with the left join that Fred fish is still within our table but he wasn't referred by anybody that value is null so that's one example of a selfjoin we're creating another copy of the same table then joining it together to the original but you'll need to give each table an alias a unique nickname here's another example of a selfjoin let's select all from our employees table in our employees table Mr Krabs is a manager Sandy Cheeks is an assistant manager let's add an additional column named supervisor ID to who does each of these employees report to Squidward SpongeBob and Patrick and Sheldon they will all report to Sandy who's an assistant manager Sandy will report to Mr Krabs he's the main manager and Mr Krabs doesn't report to anybody let's add another column alter table employees add supervisor ID the data type is int and there's our new column update employees set supervisor ID equal to five that would be Sandy she's the assistant manager where employee ID equals two that would be Squidward Squidward is now supervised by Sandy three that's for SpongeBob four is Patrick six is Sheldon Plankton now Sandy her supervisor idea is going to be one she is supervised by Mr Krabs set supervisor ID equal to one where employee ID equals five and here we are using a self join we are going to display the first and last names of all of our employees along with the full name of the person that's supervising them because currently we only have supervisor ID let's utilize a selfjoin first let's select all from our table employees we'll need to give this table an alias as a that's the original Let's do an inner join inner join employees as b b will be the copy how are we going to link these on the supervisor ID of table a equals the employee ID of table B all right we still have one massive table but we can see here that Sandy appears in multiple rows which is a good start we don't necessarily need all of this let's select the first name and last name of table a a DOT first name a DOT last name then I'm going to concatenate the first and last name of table B so concat B DOT first name I'll add a space between the first name and last name B dot last name I'm going to give this column an alias that's really ugly as reports to that's much better all right we have our hierarchy of data Squidward SpongeBob Patrick and Sheldon Plankton they all report to Sandy Sandy she reports to Mr Krabs that Mr Krabs doesn't report to anybody if you would like all of your employees even if they don't report to anybody you could instead use a left join because a left join we will display all of the rows from our table on the left so Eugene Krabs is here but he doesn't report to anybody so yeah basically speaking that's a self join you can use any type of join but the tables you use are the same one you use the original table then a copy of that table but you'll need to give them an alias to distinguish them when we're selecting the first and last names of our tables are we referring to the original table which I named as a or the copy because that makes a difference with selfjoints they're great if you ever need to display a hierarchy of data involving the same table but yeah that is a selfjoin in MySQL