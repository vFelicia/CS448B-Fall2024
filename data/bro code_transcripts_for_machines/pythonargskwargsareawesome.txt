Hello friends it's me again today I need to explain arbitrary arguments arbitrary meaning a varying amount of arguments we don't know how many arguments the user is going to pass in when they invoke a function to accept a varying amount of arguments developers tend to use these parameters of args and quarks args means arguments quarks means keyword arguments you would want to prefix each of these parameters with the unpacking operator which is an asterisk when you invoke a function that has args or quarks as parameters you will pack all of those arguments into a tuple if it's args or a dictionary if the parameters quarks let's go over an example I will create a function to add two numbers together Define add function there will be two parameters a comma B all I'm going to do is return a plus b I will invoke this function pass in two arguments because we have two parameters set up one comma two then I'm going to print the result big surprise there my function return three all right well what if I would like to pass in three parameters this time well I can no longer use this function the add function it takes two positional arguments but three were given I could modify this function so that it could accept a varying amount of arguments any amount I'm going to replace the parameters with asterisk than the word args meaning arguments so when we use the unpacking operator what's going to happen now is that with the arguments that we pass into this function we will pack them all into a tuple and if you don't believe me let's test it I'm going to print the type of args then I'm going to remove this print statement for now my parameter args is a tuple that I could work with we can use the builtin methods of this Tuple or we could iterate over it I'm going to iterate over this Tuple for every ARG in args for every argument in arguments what we'll do is create a variable name total to keep track of the total total plus equals the current ARG that we're iterating over then at the end I will return the total let's print the results print add these three numbers together there we are my total is six then we can pass in any amount of arguments for this time maybe five or even one with my parameter args you can change this name to something else like nums meaning numbers for every num in nums total plus equals num this would work too the name of the parameter isn't as important as the unpacking Operator just by typical naming conventions people tend to stick with args but the parameter name can vary let's try a different example let's create a function to display somebody's name display name we will accept a varying amount of arguments use the unpacking operator then follow the unpacking operator with the unique parameter name for every ARG in args let's print each argument then replace the ending character of my print statement with the space now sometimes people can have a varying number of names in their full name there can be a first name middle name last name maiden name a title Etc so I'm going to pass in just a first name and a last name SpongeBob SquarePants if I need to add a middle name I can do that SpongeBob Harold SquarePants or a title doctor SpongeBob Harold SquarePants the Third yeah as I was saying with the unpacking operator followed by a unique parameter name you can pack all of these arguments into a tuple which you can use within this function now let's discuss quarks you use two unpacking operators then typically people follow this with the word quarks meaning keyword arguments it allows you to pass multiple keyword arguments which we discussed in the last topic I think this would be great for an address Define print address function use double asterisks then we can add a parameter name but people usually stick with quarks meaning keyword arguments just as a placeholder I'm going to type pass pass doesn't do anything I want this program to be able to run we'll get back to this function momentarily I'm going to invoke this function print address then pass in multiple keyword arguments with an address you would typically have a street a city State depending on what country you live in you may have more or less of these keyword arguments I live in the United States we have a state than a zip code okay my street will be I'm just making something up here one two three fake Street City will be Detroit State Michigan zip code 54321 just to make this look better I'm going to place each of these keyword arguments on a new line for me that's just more readable but you do you when I pass in these keyword arguments we will pack them into a dictionary just to prove it let's print the type of quarks look at that class dictionary within this function you can treat quarks as if it's a dictionary there's a lot of builtin methods or we could iterate over the keys the values or both to iterate over the values let's say for every value in our dictionary quarks dot values method print every value here's all the values for the keys let's change this for Loop to be for every key in quarks dot Keys method print every key here are the keys for both you could say for every key comma value in quarks dot items method print every key actually let me turn this into an F string print every key colon value the items method will return key value pairs we can pass in a varying amount of keyword arguments I'm going to add an apartment number apartment equals 100. our keyword argument of apartment was packed into a dictionary along with all these other keyword arguments so that's kind of nice we could pass in a varying amount of keyword arguments let's cover an exercise we're going to use both args and quarks together we will print a shipping label Define shipping label function the parameters will be both args comma quarks then just for now I'm going to write past just so that this program will work for now we'll fill in the shipping label function momentarily when we invoke the shipping label function we will first pass in any positional arguments followed by keyword arguments and it won't work the other way around I'll prove that in a little bit so let's say we have doctor SpongeBob SquarePants the Third then I'll add my keyword arguments I'm going to put this on a new line Street equals one two three fig Street apartment equals 100 City equals Detroit equals Michigan zip equals five four three two one when we invoke this function we have a mix of arbitrary positional arguments and arbitrary keyword arguments this shipping label function is designed to accept both you do need args first followed by quarks this program will run but if we have it the other way around quarks followed by args it's not going to function properly you can see that we have a syntax error with your parameters make sure that your keyword arguments follow your positional arguments let's iterate over the positional arguments first for every ARG in args let's print each ARG then I will change the ending character of my print statement to be a space here's the name of the user who we're shipping something to with the shipping label function I will print a new line then we will iterate over all the keyword arguments for every value in my dictionary quarks dot values method I will print each value then I will change the ending character of my print statement to be a space all right it's not looking too bad so far if you were to remove some keyword arguments or some positional arguments this should work still which it does I'm going to change the format of this address slightly let's add our street on one line then the city state and zip code on the next line let's get rid of this for Loop to print the street I'm going to print use an F string add a placeholder quarks dot get method I'm going to get the street key with this get method you'll probably need to place them within single quotes because if you use double quotes python gets confused as to where this F string ends we will use single quotes Let's test it all right we have a street on the next line we will print the city state and zip print fstring placeholder quarks dot get within single quotes the city I'll add another placeholder quarks dot get state then quarks dot get zip let's see what we have all right not too bad what if the user has an apartment keyword apartment equals number 100. well we should probably add that too within this top print statement I will add another placeholder invoke the get method of the dictionary the key we are looking for is apartment Dr SpongeBob SquarePants one to three fake Street apartment number 100 Detroit Michigan 54321 what if our print statement is set up to display a street and an apartment but the user doesn't have an apartment this would display none and we don't want that I'm thinking what we'll do is we'll place this print statement within an if statement what we'll check is if apartment in quarks if there's an apartment key in quarks our dictionary then print this line else we will print just the street the person doesn't have an apartment we won't print the apartment then but if they do have an apartment apartment equals number 100 then we will one two three fake Street apartment number 100. here's a challenge round what if a user has a PO Box let's change apartment to PO box the string will be PO box number 1001 I suppose I'll add an else if statement else if PO box in our dictionary quarks let's print the street I'll copy this line paste it followed by a second print statement quarks.getpo box there we are Dr SpongeBob SquarePants 23 fig Street P.O box 1001 Detroit Michigan 54321 all right everybody those are arbitrary arguments when you invoke a function you can pass in a varying amount of arguments set up your parameter to be args for a varying amount of nonkeyword arguments or quarks for a varying amount of keyword arguments you can set up both in your parameters which we did for this exercise and well everybody those are arbitrary arguments in Python