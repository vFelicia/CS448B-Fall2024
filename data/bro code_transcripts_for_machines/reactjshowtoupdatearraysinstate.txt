hey what's going on everybody in today's video I'm going to show you how we can update the state of an array using react all right everybody here's how we can update the state of an array using react be sure to import the UST State Hook from react we'll Begin by creating a constant use array destructuring the name of our array will be Foods because I'm hungry like usual we'll need a Setter function for this state variable set Foods equals use State we will set the initial state to be an empty array if you would like to include some initial elements you can put that within here such as an apple an orange and a banana we'll create two functions a function to add an element to this array and another function to remove an element we'll create a function to handle add food there are no parameters and and we'll declare a function to handle remove food we'll fill these in later within our return statement let's wrap everything within a div element I will create an H2 heading that says list of food we'll create an unordered list with a pair of UL tags within my unordered list we will embed some JavaScript code let's take our array of foods use the builtin map method the map method will return a new array what would we like to do with all of these elements of our array well we're provided with an element which we will name as food and an index these are the parameters that we'll receive automatically we'll write an arrow function to do something I will create a list item element we have three already because our array initially has three elements an apple orange and a banana if I were to go to my console react wants us to add a key for each list item so it can keep track of them so with the opening list item tag I will set the key attribute to equal our index within each list item I will add the current food element and let's see if this works yes it does Apple orange banana if I were to change the IAL values of this array within you state that should be reflected after the unordered list we'll create an input element to enter in the names of some food I will create an input element the type the type will be text because we're adding a string I will set the ID equal to be food input I'll add a placeholder too I will set the placeholder attribute to be enter food name after this input element let's create a button the button will have text of add food with this button I will set the onclick event handler equal to a call back to handle ad food let's work on the handle ad food function we need to get the value found within this input element if I were to type coconut then press the button I need to get this value but first we'll select this input element to access it I will create a constant of new food new food will be a string it's going to contain this value I will access this element this input element document. getet element by ID the ID that I'm getting is food input I would just like the value not the entire element so if I were to type in coconut press the button new food is going to be a string of coconut then after pressing the button I'm going to reset this input element so it clears like this I can do that by copying this line of code where we access the value set it equal to be an empty string so if I were to type in something it should reset after hitting the button which it does let's try a mango and that resets too so we have the string that contains our new food we'll use our Setter to update our array if I were to pass in a new array then add new food this is what happens I will attempt to add a coconut add food our initial values of Apple orange and banana they're all gone we've replaced the initial array with the new one that contains only one string element our our new food that we're trying to add we need to copy over the previous elements of this initial state within this new array when setting the state we will use the spread operator and access our array of foods the spread operator when used on an array will spread all of these elements into separate values it'll look something like this we're replacing the initial state of this array with a new one so we need to copy the old elements over so this does work I will attempt to add a coconut and a mango however it would be best practice if we were to use an updator function we don't want to directly work with the current state of a state variable rather the previous state I will upgrade the statement into an updator function we will take Foods Arrow do this you don't want to use the same name as the current state variable a common naming convention is to take the first letter of your state variable and use that as a parameter foods will become f for the previous state we will use the spread operator on the previous state of foods and that should work we have an apple orange banana we can add a coconut or a mango now we're going to complete the handle remove food function there's one or two things I need to change make sure we use camel case naming convention I accidentally made the r lowercase there's going to be one parameter an index number because we'll be working with the index numbers of these list item elements within our unordered list we'll be working with the opening list item tag just for readability I'm going to put this on a new line like so within the opening list item tag we will set the onclick event handler equal to a call back a call back to the handle remove food function this function needs a parameter in order for us to pass in a parameter to the handle remove food callback we need to convert this to an arrow function we'll create an arrow with no parameters Arrow do this within the map method we're provided with an index number we'll be passing in that index number to this function so we can work with it within the hand remove food function we will use the setter for our Foods within the setter we'll use the filter method we will take our Foods use the builtin filter method of arrays with the filter method of an array we are provided with an element and an index number for that element however we do have a naming conflict we've already stated that the parameter of this function is going to be index just to differentiate it I'm going to rename index as I so within the filter function we will use an arrow function to do something we're going to filter all elements where the current index represented as I does not equal the index that we receive so if you take a look our element parameter is provided to us but we're not using it you can see that it's kind of grayed out we're going to replace this with an underscore using an underscore for a parameter is a convention to indicate that the parameter being passed to the function is ignored so with parameters if you see an underscore that means ignore it all right and this should work I will add a coconut a mango then I can click on one of these list items to remove it let's remove our banana our apple and the mango all right everybody so that is how we can update the state of arrays using react