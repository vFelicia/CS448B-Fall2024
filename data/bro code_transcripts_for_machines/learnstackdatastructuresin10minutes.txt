hey what's going on everybody it's you bro hope you're doing well in this video i'm going to explain the stack data structure so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm all right everybody stacks a stack is a lifo data structure lifo is an acronym for last in first out this allows us to store objects into a sort of vertical tower like a stack of books or a stack of cds we use the push method to add objects to the top of the stack and the pop method to remove objects from the top so here's a real life example of us creating a stack data structure after declaring our stack we can add objects to our stack the objects that we'll be adding are various video games to add an object to our stack we use the push method like we're pushing something onto our stack so let's push minecraft onto the bottom of our stack and then next we'll add skyrim then maybe some doom then borderlands and then final fantasy vii so this is a lifo data structure last in first out to access objects on the bottom of our stack we first need to pop or remove objects from the top of our stack if i need to access minecraft on the bottom i don't want to pull this from the bottom because everything on the top is going to fall right so that's kind of the concept so in order to access minecraft on the bottom i need to pop or remove objects from the top in order to access objects on the bottom so in order to access minecraft i need to remove all the games on the top of my stack so that's kind of the point of a stack data structure now let's create a stack the language you use really doesn't matter for the most part you can implement a stack in java python c plus plus c is sharp the language really doesn't matter however the syntax might be slightly different i just so happen to be using java so i'll stick with that now to push objects onto our stack we first need to declare our stack and instantiate it so let's do that stack then we will list the data type of the objects that we will be adding to our stack luckily strings are a type of object and they're fairly simple so we will create a stack that can store strings the names of video games and i will name the stack step to keep it simple stack static equals new stack and i will list the data type and then add a constructor okay so we now have a stack data structure now with stacks they have five unique methods let's take a look now with stacks we can push an item onto the top of our stack we can pop an item from the top of the stack we can peek at the item at the top of the stack we can check to see if our stack is empty and we can search our stack for an item so those are five unique methods available to stacks let's first check to see if our stack is empty so let's use system.out.printline stack dot empty method and currently our stack is empty that is true but that'll change soon so let's push some games onto the top of our stack so we type the name of our stack stack and use the push method then pass in our object so we will pass in a string the name of a video game let's add minecraft first then let's add skyrim then doom you can pick your own games if you want i don't care then borderlands and then final fantasy vii ffviii okay let's check to see if our stack is empty now so let's move this line of code to the bottom and run it so our stack is no longer empty this returns false so with the stack we can at least take a look at the items within the stack without removing them so let's use system.out.printline and i will print my stack so this will print all of the objects within my stack beginning with minecraft then skyrim doom borderlands and final fantasy vii however by printing our stack we're not removing items from the stack so that's completely fine so this time let's pop the topmost item from our stack by using the pop method stack dot pop and we don't need to list an object because pop will always remove the top most object from our stack so now final fantasy will be missing from the top of our stack so if i was to repeat this again well then this will remove borderlands and then doom then skyrim and then lastly minecraft then if you pop again this is what happens an exception empty stack exception so that's something to keep in mind now when you pop the topmost object from a stack this will actually return that object if you need the object from the top of the stack you can pop it and then assign it to something so let's say string my fave game equals stack dot pop and then i will print my fave game and this will print final fantasy 7 and it should be missing from the top of my stack if i was to print my stack so final fantasy vii is no longer in my stack because i popped it then assigned it to the string variable of my favorite game so in order to take the top most object from a stack you use pop and then assign it to something if you ever need to take a look at what the top most object is within your stack you do not want to use pop because that will remove it you can instead use the peak method of stacks so what i'll do is system.out.printline stack.peak and then immediately follow this with printing my stack so let's run this so the top most item within my stack after using the peak method is final fantasy 7 then after printing my stack final fantasy 7 is still at the top of my stack so if you ever need to take a look at the object that is at the top of the stack without removing it you can simply use the peak method if you need to search for an object within the stack you can use the search method let's print stack dot search and we pass in our object as an argument so the very first item in a stack will have a position of one you would think it's zero but it's actually one now let's find borderlands that will be in position two from the top then doom would be of course three skyrim is four then minecraft is five so if you search for an item that is not within the stack like fallout 76 well then this will return negative one if search does not find this object within your stack it will return negative one so with stacks we can actually run out of memory so let's add like a billion copies of fallout 76 we find bethesda's warehouse of unsold fallout 76 games so we'll create a stack of a billion copies of fallout 76 we can do this using a for loop didn't i equals zero as long as i is less than like one billion that's probably close enough increment i then we will push a copy of fallout 76 to our stack so stack dot push fallout 76 and this is what happens a few moments later so we will run into an out of memory error due to the java heap space so it is possible to run out of memory when adding objects to our stack now this is an interesting feature that may or may not happen to you if you add a billion copies of skyrim onto a stack damn it todd howard you did it again now what are some uses of stacks here's a few examples one we can use them in undo redo features in text editors like when we go to edit then undo typing or redo typing we can move back or forward through browser history by hitting the back or forward button in the top left corner of most web browsers we can implement them in back tracking algorithms if we need to navigate a miz or search through file directories and another is that we use them when calling functions whenever we call a function we add what is known as a frame to the call stack but i'll probably save this topic for another video so in conclusion everybody a stack is a lifo data structure last in first out it stores objects into a sort of vertical tower a stack of objects you use the push method to add objects to the top and the pop method to remove objects from the top so those are stack data structures in the next video we'll be covering cues which work a little bit different so if you can give this video a thumbs up and drop a random comment down below but yeah that is a stack data structure and well computer science hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you