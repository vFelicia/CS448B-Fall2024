hey everybody so in today's video we're going to create a weather app that fetches data from an API you can look up any City and get the weather if that sounds good to you then sit back relax and enjoy the show if you would like to follow along you will need your own API key the API that we'll be using is openweathermap.org you do need to sign up for an account though it is free to sign up for an account you can go to sign in if you're currently not registered you can create an account for free once you're signed in you'll need an API key go to my API Keys it may take you some time to get an API key generated for you mine took about 15 minutes and once you get it make sure it's active we will need that API key about 20 minutes into this topic hopefully for you by then it'll be generated okay let's do this everybody we will Begin by creating a form element the form element will have a class of weather form our form element is going to have an input element and a button within this input element we'll type in the name of the city we would like to retrieve the weather data 4 so the type of this input element is going to be text for some text the class will be City input so a user can type in the city and we'll add a placeholder let me zoom in a little so you can see it the placeholder will equal enter City then we'll need a button let's create a button element with text of get weather the type of this button will be submit it's the submit button for our form after retrieving the weather data we'll display the weather data in a card format like a Pokemon or YuGiOh card so we will create a develop with a class of card but before applying some CSS we should at least add some placeholder elements so we can style them and see the changes for the time being let's create an H1 element we will be deleting these elements later so don't get too attached I will set the class of this element to be City display We'll add a sample City let's say Miami or pick a city if you're choosing then I will create a paragraph element the class will be temp display meaning temperature let's say the temperature is 90° F or pick something in celsius if you're on Windows to add a degree symbol you can hold alt then type 0176 Miami is going to be 90° F then we'll create a paragraph element for the humidity class equals humidity display for the text next let's say humidity colon space then a percentage 75% then we need a description of the weather this will be another paragraph element the class will equal description display desk meaning description for the description let's say clear skies I'll also display an emoji depending on what the weather is the class will be weather Emoji I'll use a sun for some reason if we can't display the weather data such as if we can't locate a city let's add the following paragraph the class of this element will be error display We'll add the text of please enter a city that is all the HTML that we need for now we're going going to apply some CSS styling next so now let's head to our CSS style sheet we are going to select the body of our document select a font family I will pick Ariel with a backup of s serif I'll change the background color of the body background color pick a color I'm going to use hsl values I will set the lightness to be 95% so it's a light gray color I will set that all margin around the body to be zero then I'll use flex box to display the elements display Flex the flex direction will be a column to arrange all the elements in a column then align item Center to horizontally align all the elements align item center now we'll select the class of weather form that'll be this form that has an input element and a button all we'll do is add a little bit of margin around the entire form 20 pixels then we'll select our city input that's going to be the text box class of City input I will add some padding of 10 pixels let me zoom out to 100% increase the font size to 2 RM set the font weight to be bold I'll add a border two pixel solid and pick a color but all lower the alpha so it's transparent to 30% there's our border currently border radius around the corners let's do 10 pixels add some margin of 10 pixels that'll separate this element from the button and set a width of 300 pixels okay let's style the button next okay we are going to select all buttons that have an attribute where the type equals submit so that's going to be for our submit button that says get weather let me scroll down okay I'm going to add some padding around the button 10 pixels by 20 pixels I'll set the font weight to be bold I'll increase the font size to be to RM pick a background color for the button I'll pick something green but I'll use hsl values I've already prepicked a color let's go with 122 39% and 50% that's a good shade of green I will set the color to be white for the font color remove the border border none and Border radius 5 pixels to round the corners then when we hover our cursor over the button I would like it to be a pointer and that does work when we hover our cursor over the button we'll use the hover sudo class to change the background color so let's take our button for the type attribute is submit access the hover sudo class take our background color make it a little bit darker I'll bring down the lightness by 10% so it's at 40% so that does in fact work okay then we're going to select our card class that contains all the weather data so we will select the class of card for the background we're going to do something a little bit different we're going to use a linear gradient instead of selecting the background color we will select the background I will use the linear gradient function there's three arguments think of a linear gradient as a slow transition between two colors we need an angle in degrees we'll say 180° for now then a color let's pick something blue and orange I'm going to pick some colors that look a little bit better so for blue let's set the Hue to be 210 100% for the saturation and the lightness will be 75% that's a good shade of blue and for orange we'll use another hsl value for the Hue I'll say 40% the saturation will be 100% And The lightness will be 75% so I'm hoping with this linear gradient the background color looks kind of like a sunrise or a sunset once we have our background I will add some padding of 50 pixels I'll add a box Shadow to this card we'll add a vertical and horizontal offset of 2 pixels each and a blur effect where the radius is 5 pixels then we'll pick a color I'm just going to lower the alpha to 50% not bad this gives our card a 3D pop effect I will set a minimum width of this card to be 300 pixels then we have to align everything within it I'll use flex box because I like Flex box display Flex Flex direction will be a column and align items Center to horizontally align the items there we go then we'll select all H1 elements that's going to be our city name select all H1 elements increase the font size to be 3 .5 RM I'll remove any margin from the top margin top will be zero and add margin to the bottom of 25 pixels then we'll select all paragraphs that's going to be everything underneath our city select all paragraphs increase the font size to 1.5 RM there's a lot of a natural margin between the paragraphs let's set all margin to be zero to see what it looks like okay let's add a little bit of margin five pixels on the top and bottom zero margin on the sides that's a lot better we'll select the city display and the temperature display we're going to be selecting two classes City display comma our temp display take these two classes apply the following properties you know what for our font size let's set that to be 3.5 RM we can honestly remove that from H one for the font weight I will set that to be bold for the color I'll make the color a little transparent I'll set the alpha down to 75% so that our city and our temperature they're both going to be transparent then I'll add some margin to the bottom margin bottom 25 pixels okay let's select our humidity display class humidity display set the font weight to be bold and add some margin to the bottom of 25 pixels then we'll select our description display which we shortened to desk display for the font style I will set it to be italic and the font weight will be bold I'll increase the font size to 2 RM then we'll select our weather Emoji so class weather Emoji remove all margin around the Emoji margin zero then we'll increase the font size of the Emoji the size will be 7.5 RM so it's kind of big then if for some reason we display an error we'll display this text so this class is error display I'll set the font size to be 2.5 RM the font weight will be bold I'll set the color to be something transparent all over the alpha to 75% okay that is all the CSS that we need let's go back to our HTML file we can delete everything within the card class we just wanted to see what it would look like with the elements populated with our card element I will set the style attribute to be take the display property set it to be none we don't want to display the card at all until we get the weather data until it's returned to us our HTML is done our CSS is done then we're ready to add some JavaScript functionality we'll declare our constants that we need const weather form equals document dot now since we're not working with IDs we can't get element by ID we're working with classes we can use Query selector or query selector all so I'm going to use Query selector this will return the first element in this class we only have one element with this class class WEA form we'll store a reference to it const City input equals document. query selector we are selecting the class of City input that's going to be this text box const card our card is what contains all the weather data document. query selector select the class of card and give me the first element now we'll need that API key const API key equals now here's my API key please don't try and use this one specifically I will be deactivating it at the end of this video hopefully by now you should have that API key given to you first we'll take our weather form we'll add an event listener this is our form the text element and the submit button when we click on this button the event type is going to be submit after we attempt to submit this form we'll do the following code we'll have one parameter an event that's going to be provided to us Arrow do this we'll fill this in later we'll declare our functions that we need we will need an async function to get weather data there will be one parameter a city that's going to be passed in then we'll need a function to display weather info there will be one parameter data the data will be in a Json like format we'll create a function to get weather Emoji based on what the weather is there will be one parameter a weather ID then we'll create a function to display to the screen any errors if there are any function display error there will be one parameter a message a message to be displayed to the window within our event listener once we have a submit event once we click the button forms do have a default Behavior where they'll refresh the page we would like to prevent that so let's take our event use the prevent default method to prevent the default behavior for a form we don't want to refresh the page then we'll have to get the city the value within this text box const City equals take the city input access the value store it within this variable it should be a string we'll use an if statement if City if there's a value within here this will be true we can use it within an if statement if there is a city do this else we'll call the display error function else we will display an error we will pass along the message to please enter a city let's fill in the dis display error function we want to be sure that it works before continuing the display error function is at the bottom we'll be provided with a message to display we will create a constant of error display equals document now we'll create an element create element we will create a paragraph then we'll need to change the text content of this element error display access the text content set it equal to be our message then we're going to add the class of error display we would like these CSS properties take our error display element access the class list then we will add a class we will add the CSS class of error display then we will take our card element which normally displays the weather data take our card reset the text content if there is something there we'll set it to be an empty string so normally with our card the display is set to none we'll set the display to be a block or even Flex access our card access the style access the display and I will set the display to be Flex to display it we will take our card we will append a child element append child we will append this paragraph of error display to the card now if I were to not type in anything and just press get weather we get this error message please enter a city to our card I'm just going to round the corners to make it look better border radius let's do 10 pixels that's better okay moving on if we do have a city if there's text within here we will try some code because it might cause some errors we will catch any errors that happen we have one parameter of error if there's an error we can console.log or console. error the error then let's call our display error function we'll pass along the error and display it now we need to get the weather data within our Tri block we will create a constant of weather data equals now we need to await get weather data function and pass in our city so with the weight we can only use a weight within an async function since we're within an arrow function we could declare this Arrow function as an a sync function so let's precede our event parameter with a sync so that we can use a wait we're going to wait for this function to return the weather data once we receive our weather data we will call the display weather info function and pass along that data the weather data okay this function is complete once you've typed everything in I'm going to close this function and we can close our display error function too now once we want to get our weather data after we have a city now we actually need to fetch the weather data we'll have to create a URL we'll create a constant of API URL this is what we'll pass to the fetch function we will use a template string be sure to use a pair of back ticks we'll need to get the following URL at this web page we need to find the API call where we can pass in a city name we can copy this within our template string we'll paste it we'll replace the city name with the placeholder and use our city variable for the API key we'll use a placeholder pass in the API key this is what we'll pass to the fetch function we will create a response const response equals a wait we can use a weight because we're within an async function we will fetch our API URL once we have a response let's check our response let's console.log our response just to see what it is okay I will type in the city of Miami get weather our data should be within console.log here's our response it has a status of 200 and it's okay we need to check to see if our response is not okay what if we couldn't retrieve the data I'll make up some gibberish City let's go to inspect console we have a response status 404 the response is not okay we'll write an if statement if our response is not okay we will throw a new error and pass along this message could not fetch weather data else if our response is okay we will return the response and we will await our response convert it to a Json format using the Json method so at the end of this function return an object that's in a Json like format this data is going to be returned to our event listener after we get our weather data we need to display it we'll work on the display weather info function next this one let's console.log the data we receive I will type in Miami so it looks like that worked we have a name of Miami for the city we have the weather which is an array it's an array of objects we have coordinates clouds pretty much anything you can think of regarding the weather let's get the name within main there is temperature the temperature will be in kelvin we need to convert it I'll get the humidity within weather it's an array of objects we will get the description overcast clouds and this ID eventually we'll use the ID to return an emoji there's different weather codes I'll explain that later so we're going to use some object destructuring const use object destructuring with a set of krly brackets we will access the name property and create a variable of city city will be Miami in this case then we will access main main is a property that contains an array take main use object destructuring again now we're within a nested object I would like the temp and the humidity then let's select our weather so whether it's an array of objects we'll have to use array destructuring followed by object destructuring give me the description and the ID we have to set this all equal to data to use destructuring and let me organize this to make it look nice our data is one gigantic object that has nested objects and nested arrays so after destructuring we'll have these variables the city the temperature the humidity a description of the weather and an ID for the weather code now we can use these like variables so with our card currently we're not displaying it now I would like to display it we are going to take our card set the text content to be an empty string if there's already some text here we would like to reset it such as if there was an error message take our card access it style set the display property to be Flex for Flex box just to be sure that this is working I'm going to get the weather without entering a city after we do type in a city it should reset that's good that's what we wanted or if we make up some gibberish we have that error could not fetch weather data but then if we type in something legitimate and get the weather it'll reset that's what we would like okay now we have to create the elements the elements that we previously deleted from the div element we need to recreate those we will create a constant for City display to display the city document. create element our city display was an H1 element let's copy this line of code and paste it a few times four additional times we have City display temp display for the temperature that was a paragraph element humid humidity display humidity display that was also a paragraph element a description display which we shortened to desk desk display that was also a paragraph and a weather Emoji weather emoji and that was also a paragraph okay now we need to change the text content of each of these elements but they're empty so to say let's take the text content of our city display. text content property equals our city variable that we destructured okay let's see if that works I'll type in a city get weather oh and then we need to append it take our card append child we will append the city display element let's try that again type in Miami get the weather that should display Miami let's try Dallas Texas Dallas Oh and before displaying it we need to add the class list the CSS class for the city display after adding the text content we will take our city display access its class list add the class the CSS class of City display so then when we type in a city we should have that CSS styling all right now we have to add the temperature following the same format we will take our temp display access the text content equals I'll use a template string with a pair of back ticks I'll add a placeholder pass in our temperature add a degree symbol you can hold alt then type 0176 for a degree symbol now this is normally in kelvin actually I don't think Kelvin uses the degree symbol but we'll be changing that momentarily take our temperature display access its class list add the following class add the CSS class of temp display then we have to append the element to the card element take our card we will append a child element of temperature display so now we should see the temperature but it's going to be in kelvin we have the city and the temperature for the temperature if you would like celsi let's use de C you have to subtract from the temperature 273.15 okay but now we should probably round it so let's enclose this equation with a set of parentheses follow this with the two fixed method of numbers to round it to one decimal place 15.6 de C if you would like a Fahrenheit temperature this is the formula take our temp in kelvin minus 273.15 we will multiply this by 9 / 5 + 32 so let's enclose this all within a set of parentheses so now we should get that temperature but in Fahrenheit oh and then add F to the end 60° F then we'll get the humidity so take our humidity display element that we created access the text content set it equal to be a template string using a pair of back ticks let's add the word humidity col in space add a placeholder display our humidity variable We'll add the class list of humidity display humidity display access its class list add the following class of humidity display then we have to append the element to the card element card. append child append our humidity display so we should get the humidity Miami 60° fah humidity 81 let's add percent 81% yep that does work then we'll add the description a description of the weather take the element of description display access the text content equals the description then add the CSS class to the class list for this element description display access the class list add the following class of description display then add the element card. aend child we will append our description display let's type in Miami get the weather currently in Miami there's overcast clouds now we have to get an emoji based on the weather with our element of weather Emoji we will access the text content equals we will call the get weather Emoji function but we have to pass in a weather ID so we will pass in the ID variable that we receive from data once we get our weather Emoji we'll work on that momentarily we'll take our element of weather Emoji access the class list add the following CSS class of weather emoji then append it to the card card. append child we will append our weather Emoji all right now before we canest it we need to fill in the get weather Emoji function so with this open Weather AI there are different group codes so our weather ID is going to be either within the 200 range meaning a thunderstorm the 300 range means drizzle 500 is rain 600 is snow 700 is atmosphere such as Mist smoke or even a tornado 800 exactly is a clear sky anything greater than 800 means clouds so our weather ID is going to be one of these codes so we're going to use a switch we will examine the Boolean value of true does the value of true match one of these cases we'll have a case for group 200 if our weather ID that we pass in is greater than or equal to 200 and the weather ID is less than 300 that means there's a thunderstorm we will return an emoji a thunderstorm Emoji thunderstorm I don't like the look back one that's better okay group 300 is a drizzle so let's copy this case because I don't feel like retyping it if our weather ID is greater than or equal to 300 and less than 400 that means we have a drizzle we'll just add an emoji of a raining Cloud so group 500 is also rain but it's a heavier rain so let's copy this case paste it if our weather ID is greater than or equal to 500 and less than 600 will return rain as well group 600 is snow if our weather ID is greater than or equal to 600 and less than 700 we will return a snowflake meaning snow then we have group 700 if our weather ID is greater than or equal to 700 and less than 800 we'll return some fog Emoji 800 exactly means a clear sky we can display the Sun if our weather ID is strictly equal to 800 exactly we'll return a sun emoji anything within the 800 range means clouds so if our weather ID is greater than or equal to 801 800 means clear sky so with this group code it only goes up to 809 if our weather ID is less than 810 return a cloud then let's add a default in case we get a weird weather code default return I don't know a question mark we get some unknown weather phenomena UFOs or something I don't know okay and I think that should be everything let's close out of this close out of these functions and now if I were to type in Miami and get the weather in Miami it is 60.3 De F humidity 81% there's overcast clouds and we get a cloud Emoji because it's cloudy let's try Dallas we have a clear sky 45° F humidity 63% clear sky and we get a sun emoji all right everybody so that is a weather app that you can make using JavaScript HTML and CSS