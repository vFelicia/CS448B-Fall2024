all right everybody in today's video we're going to get started working with the pi qd5 graphical user interface also known as a goey GUI in this topic we'll be creating a basic window so let's get started all right the first step is that using pip we're going to install the pi qt5 package open up a terminal both py charm and vs code have a builtin terminal that you can use we're going to use pip that is Python's package manager pip install Pi qt5 enter and this might just take a second once your download has finished you should have a package within your site packages folder named Pi qt5 we can work with it as long as we import it first we are going to import the module of CIS CIS meaning system this module provides access to variables used and maintained by the python interpreter then from the package of Pi qt5 do pay attention to the capitalization it's easy to mess that up use dot to access the module of QT widgets widgets are the building blocks of a pi qt5 application they begin with Q that helps distinguish them from widgets from other libraries they typically begin with Q from this module import the following widgets Q application and Q main window here's some boiler plate code that we have to write in order to get this application up and running first we will create a class of main window which will inherit from the class of Cain window by inheriting from the parent of Cain window we can customize our own Windows to display to the user we will need a Constructor let's define that Define Dunder inet there will be no arguments currently besides self and in case we have to pass any arguments to the parent of Cain window we will access the super class that's the parent and call the parents Constructor but currently we don't have any arguments to pass in we will return to this class momentarily let's define a function of main When We Begin this program we will call the function of main to begin the application for now all right pass if we are running this file directly let's add the following if statement if Dunder name is equal to a string of Dunder main if we are running this file directly call the main function in order for us to begin if that's true we will call the function of main within the main function we will create an app object app equals we will call the Constructor for Q application that class but there's one argument that we have to pass in we will access our module of CIS do AR RGV meaning arguments so by passing in this argument this allows Pi QT to process any command line arguments intended for it that's if we use command prompt or terminal we won't be doing that in the series but you may someday in the future it would be a good idea for us to Future proof our code otherwise you may see people pass in an empty list so we now have an app object next we will create a window object window equals call The Constructor for our class of main window currently we don't have any arguments to pass in we have an app object and a window object by calling their respective Constructors now if I run this program currently our window is not going to show the default behavior for a window is to hide it in order to to show our window we will access our window call the show method to show it it's only going to appear for a brief second when I run this script I don't know if you saw it but it pops up for a brief second we need to ensure that the window stays until we interact with it or close it after we show our window we will access our module of CIS called the exit method the exit method method ensures a clean exit of our program within our exit method we will pass in as an argument our app object our app object has a builtin method of excore and this is a method so we can call it this is the execute method there is an underscore character after exec for execute that distinguishes it from the execute method there is a separate version of this execute function that ends with an underscore our apps execute method it waits around for user input and handles events such as if we click buttons press keys or close the window now that we're calling this method when we run our program this window should stay in place we can maximize it minimize it or close it that's all the boiler plate code that we need for a basic window let's customize it within our Constructor for our main window What would would we like to add let's set the title for our window self. set window title method we will pass in a string think of a title for your program my cool first GUI gooey and now we have a new title my cool first goey graphical user interface when this window appears we can can set the geometry of where the window appears and the size of the window access self dot set geometry method there's four arguments X and Y for the X and Y coordinates a width of the window and a height of the window if I were to set X and Y to be both zero this window will appear in the top left corner of my screen I'll also need a width and a height let let's say I don't know 500 for each so now my window is now a square the width and the height are both the same they're both 500 the width is 500 pixels the height is 500 pixels with the first two arguments we set the initial placement of our window to be where X is z and y is zero that corresponds to the top left corner if I set the first argument to be 100 well then the window window is going to move to the right by 100 pixels there are ways to Center your window in the very center of your screen but that's a little too advanced for us right now for the time being I'll pick something roughly near the middle of my screen 700 pixels on the x axis and 300 on the Y AIS it should appear roughly in the middle but feel free to adjust these values based on the size of your screen we'll discuss layouts in the future now if you would like a a window icon we can change that you will need an image to work with So within my project folder I have a profile picture for my YouTube channel I'll set that to be the icon find an image that you like then add it to your project folder in order to work with icons we'll need to make the following import from PI qt5 that's the package access the module of QT GUI import the following Q icon now we can work with icons after we set the geometry for our window access this object of self this main window call the method of set window icon within this method we will call the Constructor of Q icon we'll pass in either a relative file path or an absolute file path my main python file is right next to my profile picture that image I only need the file name within a string so the name of my image it's going to be different for you depending on what the name of your image is my image is named profile uncore pick and this image is a JPEG jpg then when I run this program I'm using my image as an icon for this window window all right everybody that is how to create a window using pi qt5 and in the next topic we will be creating some labels what's up everybody in today's topic we're going to create some labels using pi qt5 we will import the widget of Q label this label class is used to create label widgets that can display text or images within the Constructor of our main window this is where we'll create a label we will declare a label object label equals call The Constructor for Q label for the text of the label we'll pass in a string that's the first argument let's say the word hello for the second argument we will pass in self self refers to this window object that we're calling and instantiating all right let's do a test run here is my label although you can barely see it the font is really small but it does say hello let's set the font we'll need another import from PI qt5 do QT GUI import Q font by importing the Q font class we can begin working with fonts we're going to take our label call call the set font method within this method we will call the Constructor of Q font pick a font that you would like I will pick aial but feel free to choose really any font then the second argument is a font size I'll pick 30 let's do another test run that's much better let's increase this to 40 for the font size now I'm going to set the geometry of this label such as the positioning and the width and the height let's take our label use the set geometry method we will pass in X and Y coordinates 0 0 corresponds to the top left corner for the width let's set the width to be 500 and the height to be 100 that's better I'll cover more advanced alignments momentarily let's add a stylesheet pqt does have styles that are very similar to CSS if you would like to learn more about CSS I do have a full course on that topic we will add some CSS like Properties by accessing our label object call the method of set style sheet within this method we will pass in some CSS like properties such as a a color for the color let's say blue these CSS like properties should end with a semicolon and now the font color is blue you could also use RGB values or heximal values you could always look up a Color Picker and pick a very specific color let's pick something green we can either use RGB values or heximal values so I will copy this value so I will paste that heximal value and now we have a very specific shade of green but I think I'll go with something dark such as that so this color is going to be a dark gray color we could set a background color this will be a new string backgroundcolor and I will pick a new color I will pick something blue that's a decent color we have a blue background with dark gray text we can set the font to be bold font weight will be bold so the font is now bold the font style can be italic font style italic so our font is italic and we can underline text decoration underline the text on our label is now underlined let's work on positioning next currently my text is left Justified and set to the center vertically to work with alignments we need this import from PI qt5 QT core import QT the class of QT is used for alignments to Center the text of our label at the top vertically we will take our label use the set alignment method then pass in a flag access the class of qot access the flag of align top this will align our text vertically to the top so then our text is aligned vertically to the top rather than the center for the bottom we will use the flag of align bottom we will align vertically on the bottom the text is now on the bottom to align vertically in the center align V Center this will be vertically Center which it was originally now for horizontal alignment we can add the following okay to a line right we will pass in a flag of Al line right horizontally Al line right the text is now all the way to the right for the center align H H for horizontal Center the text is now horizontally aligned in the center for the left align left the text will be aligned to the left we could combine both horizontal and vertical positioning here's how take our label call the set alignment method we will align horizontally in the center follow this with the or bitwise operator which is a vertical bar this allows us to combine Flags we will align horizontally in the center then vertically let's align to the top so our text should be aligned horizontally we're aligned in the center and vertically we're aligned to the top align bottom vertically horizontally we are in the center vertically we're aligned on the bottom then for the very center of our label align horizontal Center and align vertical Center our text will now be in the very middle of our label both horizontally and vertically now there is a shortcut for the very center we don't need both of these flags the shortcut is the following set alignment align Center that will align the text both horizontally and vertically so that is Center and Center all right everybody so that is an introduction to labels in pi qt5 what is going on everybody in today's video I'm going to show you how we can add images to Pi qt5 you will need an image to work with me I'll be using my profile picture for my YouTube channel feel free to take a moment to find a picture of your own maybe a profile picture of yourself we will need the following Imports Q label the most common and straightforward approach to displaying an image is to add an image to a label in order to display it then we will need this other import from PI qt5 that's the package then the module of QT GUI import the class of Q pix map the class of QX map it's used for handling images and provides functionality for loading manipulating and displaying images we will load our image to a q pix map object then add this qix map object to a label in order to display it within our Constructor of our main window we will create a label label equals call the Q label Constructor then pass in self self refers to the window object our window will be the parent widget our label widget is one of its children once we have our label we'll set the geometry of the label label. set geometry method we have to pass in X and Y coordinates as well as a width and height of the label for the coordinates let's say zero for each the label will appear in the top left corner for the width 250 is good and the height 250 as well here's my window the label is going to appear in the top left corner however there's nothing added to the label that's where the widget of Q pix map comes in we will create a pix map object equals call The Constructor of Q pix map we have to pass in a string that represents a relative file path or an absolute file path to our image my image is right next to my main python file I just need the file name the name of my image is profile undor pick and this is a JPEG when I run this we don't see our image we have to add the Pix map object to the label we have to set it here's how take our label use the set pixmap method and pass in our pixmap object and now we can see the image however the image doesn't scale according to the size of the label to enable that we have to call the following method take our label call the set scaled contents method then pass in true our image will now scale to the size of the label if we were to change the size of the label let's say it's 100 pixels it will scale down even further or I could even increase it to 500 so now the image takes up the entire width and height of the window let's set that back to 250 there's a few tricks that we can do with positioning of the image we've set our label with an image we can move the label within the confines of the window currently it's set in the top left corner but here's a few tricks that we can do with positioning with our label we will set the geometry again so the top left corner is 0 0 for the coordinates we could pass in 250 and 250 again for the width and the height but if we were to change that here when we initially create this label we would have to manually change that here as well I think it would be better if we were to get the current width and height of the label take our label call the width method to get the width same thing applies with the height label. height method that should work fine let's say we would like to take our image and move it to the right side of our window here's how with the x coordinate we're going to access self that means our window called the width method here's what we have currently we can't see the label it was placed outside of the confines of the window let's subtract our labels width label. width I'll put each of these arguments on a new line just to help with readability so now our image is is Right Justified within our window for the bottom right corner we will take the second argument access self. height that's the height of the window that we're instantiating minus our labels height and our image is in the bottom right corner for the bottom left corner we will set X to be zero now here's the tricky part to have our image placed in the center of our window we will take the width of the window minus the width of the label / two for integer division we'll be using double forward slashes we need our pixels to be whole integers so we're going to be using integer Division and not standard division we will round to the nearest whole pixel then we will do this with the height as well and now our image should be in the middle of our window all right everybody and that is how to add an image to your Pi qt5 application well hello again friends today I got to explain layouts in pi qt5 we'll discuss vertical horizontal and grid layouts but we'll need the following Imports we will be importing Q label Q widget I'm going to put these Imports on a new line just because we have a lot QV for vertical box layout and I'm just going to copy this q h for horizontal box layout and Q grid layout let's be sure that we have all these Imports these classes deal with layout managers they aren't widgets we'll be writing a majority of the code within our main window class however it can get disorganized really quick what will help keep things organized is if we declare a separate function within the main window class this is a common practice that you'll see within Pi qt5 there will be a function for init for initialize UI for user interface no other arguments besides self and for now I'll write pass when we construct a window object we will call Self do init UI to initialize the user interface so anything that deals with the user interface we're going to be writing within this function to help keep our code clean and organized normally we can't add a layout manager to a main window object main window widgets have a specific design and layout structure that's normally incompatible with layout managers what we would need to do is create a generic widget add a layout manager to that widget then add that widget to the main window in order to display the layout within our method to initialize our user interface we are going to create what is called a central widget called The Constructor for Q widget this is a generic widget then we will take self self is our window call the set Central widget method then pass in our Central widget when working with layout managers we will add that layout manager to the central Widget the central widget is then added to the main window so currently this is what we're working with we will need some widgets to organize because right now it's empty let's create a few labels let's say label one equals Q label I'll pass in some text number one okay let's create four additional labels 1 through five I'll just do some copying and pasting all of our labels are overlapping let's add some colors let's take label one use the set stylesheet method then pass in a background color as a CSS property backgroundcolor will be red let's copy this line of code paste it four additional times for labels 1 through 5 we'll have a label that is yellow another that is green blue then purple here are the labels they're all overlapping one another that's why we can only see five this is where a layout manager comes in we'll start with the vertical layout we will create a vertical layout manager which we will name vbox vbox equals call The Constructor for QV box layout we are calling the Constructor we will take our layout manager call the add widget method then pass in widget such as label one near the top here we'll do this with the other labels we'll do some copying and pasting add Label 2 3 4 and 5 there's one last step we will take our Central widget which we have declared at the top of this function call the set layout method we are set setting the layout of our Central widget with the layout manager a vbx vertical box here's the new layout all of our labels all of our widgets are arranged vertically for horizontal we will use qh box layout for horizontal replace any instance of V box with hbox for the set layout method pass in hbox this allows for a horizontal layout then we have grid Q grid layout replace hbox with grid so what we have to do with grids after adding a widget we have to specify a row and column with separate arguments the row and column both begin with zero so Row one column 1 would be row zero column 0 for label two let's say row 0 column 1 Label 3 will be Row one column 0o four will be Row one column 1 then five row one column two so here's the current layout we have labels 1 and two both within row zero labels 3 4 and 5 are both within the second row let's say label 5 is Row 2 column 2 that would result with something like this we have label 5 which is purple in row two column 2 so it depends on how you want to arrange your widgets all right everybody so that is an introduction to layout managers in pi qt5 today I'm going to show you how we can create push button widgets in pi qt5 to begin we will need the following Imports Q push button as well as Q label for this demonstration during the previous topic on layout managers within our Constructor for our main window we defined a method of initialize UI for user interface let's be sure that we're calling that method within our Constructor within this method is where we'll be handling managing the user interface to create a button we will call the push button Constructor normally when creating widgets we would want to prefix that widget with self then follow the name of the widget for example button however I'm going to demonstrate what happens when we don't do that because without self we're declaring a local variable we'll get back to that in just a moment let's create a local button object by calling the Q push button Constructor we can pass in some text such as click me we will add this to our window self self refers to our window object let's set the geometry of the button button. set geometry we could use a layout manager but I do want to keep this lesson as simple as possible so let's pick some coordinates I've picked the following for the X and Y coordinates 150 and 200 for the width 200 and the height 100 here is our button currently the font is a little small so I'm going to set the stylesheet set style sheet I'll just increase the font size we could use Q font but that might be overkill for this demonstration let's just say the font size will be 30 pixels now we can read it so we have our button we're going to be connecting our button to a function but we need to Define that function we'll do so within our main window class so we will Define a function of onclick there are are no parameters besid self when we click on the button what would we like to do let's print a test message let's say button clicked and that's it when we click this button nothing happens we have to set up a signal and slot for the button here's how we will take our button dot list a signal a signal is aitt when a widget is interacted with we have to list the type of signal so the signal we're looking for is clicked when we click this button we will perform a slot an action we will take the signal of clicked connect it to a slot connect is a method the slot will be self dot the name of the method on click when we press this button we perform this slot this method of onclick each time I press the button we perform that action not only should we print a message for this demonstration let's set the text to the button so we have button. set text let's change the text to clicked so this actually isn't going to work because we're not prefixing self let me demonstrate what happens we print button clicked but then we have a problem we have an exit code our program was interrupted button is considered local to our initializer method our onclick function doesn't recognize what our button is that's why we're going to prefix our button with self so it belongs to the class of main window and not this method any instance of button we're going to prefix with self and now this should work the text on my button is going to change when I click it clicked you don't have to do this but with my personal coding style whenever I create a variable or an object within a class I like to do so within the Constructor even py charm is giving me a warning when we declare this button I'm going to move it to the Constructor and let me just rearrange everything self. button equals a q push button widget within my initializer method that's when I like to rearrange everything and style it we can also disable buttons when we click on them to do that we will take self. button call the set disabled method then pass and true when I click the button it will be disabled I can no longer click on it for the last part of this demonstration when we click on our button let's change the text of a label let's declare self. Lael within our Constructor equals a q label the text of the label will be hello we will add this label to self the window when we set up the user interface let's set the geometry of the label self. Lael do set geometry we could use a layout manager but just to keep things simple I'm going to set some coordinates 150 for X 300 for y the width will be 200 and the height 100 let's change the font size self. label. set style sheet I will set the font size to be 30 maybe 50 better all right within our onclick function let's instead take self. label. set text method then pass in some new text to display we're saying hello but when we click the button let's say goodbye so now when I click the button we will change the text on a separate widget my label which now says goodbye so with buttons you need a signal that's connected to a slot the signal is an event the slot is an action that this widget is going to take when this signal occurs and well everybody that is an introduction to push buttons in pi qt5 hey yeah so today I got to explain a checkboxes in pqt 5 to work with checkboxes we will need the following import from the module of widgets from pqt 5 import Q check box to work with different states we will also need the following import from pqt 5. QT core import QT this module of QT core it contains non goey classes relevant two Pi qt5 applications so be sure that you get this import as well to create a checkbox I will create this within the Constructor of my main window we will create a checkbox with self the name of the checkbox which I will name checkbox equals call The Constructor of the Q checkbox class the first argument is going to be the text of the checkbox what do you want the checkbox to say let's ask do you like food the second argument is the parent widget where we will be adding this checkbox let's say self self will apply to this window we could use a layout manager but I want to keep this lesson as simple as possible we're just going to focus on checkboxes and their functionality so we should have a checkbox however we can barely see it the font is really small I have a method to initialize the user interface that's where we'll set the stylesheet and the geometry of our checkbox let's set the stylesheet self dot the name of the checkbox checkbox do set Styles sheet method then we can pass in some CSS like properties let's set the font size to be 30 pixels and I will pick a font family font family aial oh and we should change the geometry of the label it's getting cut off self do the name of the checkbox which is checkbox let's set the geometry pass in some X and Y coordinates for the placement as well as a width and a height I will pick 500 and 100 uh maybe I'll move it a little more to the right by 10 pixels that's pretty good our checkbox has an initial State it's normally unchecked that's the default Behavior but we could set that to be checked with the following method when the window loads let's take our checkbox self. checkbox call the set checked method then pass in true so then when the window loads the check checkbox is already checked but let's keep that as false now this checkbox it doesn't do anything when I check it let's add some functionality we'll take our checkbox connect a signal to a slot the slot can be a function or a method let's define a method within our main window class let's name this method checkbox changed we will call this method when the state of our checkbox changes there is one parameter besid self a state now the state parameter is going to be provided to us when we interact with our checkbox when we check the checkbox let's print something like a test message you like food we have to connect a signal of State changed to a slot of checkbox changed we will take self dot the name of the checkbox which is checkbox the signal will be State changed to connect a slot to a signal we use the connect method then pass in a function or method name so we are working with methods this method belongs to the window class we'll prefix the method name with self self. checkbox changed so when I run this program when I check the checkbox we execute this method you like food now when I uncheck it I instead would like to display you do not like food so that's where our state is going to come in I'm going to print our state just to see what it is our state is going to be a value when we check the checkbox our state has a value of two when we uncheck it it has a value of zero zero means unchecked two means checked there's also one for partially checked but that's not going to be relevant to this topic so zero or two we could add an if statement such as if state is equal to two then print you like food however that's not really readable other developers looking over your code aren't going to understand what two is by looking at it instead let's use the following we will access the class of QT there's a builtin constant of checked this also equals two but it's more readable it's a constant so if state is equal to QT checked print you like food I will check the checkbox you like food when I uncheck it nothing happens let's add an else statement else let's print you do not like food so then when I check the checkbox we print you like food when I uncheck it we print you do not like food you like food you do not like food you like food you do not like food all right everybody so that is an introduction to checkboxes in pi qt5 all right let's do this thing today I got to talk about radio buttons in pi qt5 to work with radio buttons we will need the following imports from the module of QT widgets we will need the class of Q radio button as well as Q button group to group together different buttons let's create three radio buttons within the Constructor of my main window we will construct three radio buttons for the first radio button this will be named radio one we will call the Constructor of the class Q radio button then we can pass in some text what is the radio button going to say let's say that we're working with payment options let's say visa for the first option then for the second argument I will pass in self we will add this radio button directly to our window that would be self let's create two more additional radio buttons Radio 2 and radio 3 the text of radio button two will be Master Card and three will be a gift card we are selecting different payment options we need to set the geometry of these radio buttons because we're not using a layout manager I have a method to initialize my user interface this is where I will set the geometry of my radio buttons so let's say self. radio one we will call the set geometry method pass in some coordinates 0 0 is good that applies to the top left corner of my window for the width 300 and the height 50 is good let's do this with radio buttons 2 and three Radio 2 radio 3 we'll just move each radio button down on the Y AIS by 50 pixels each so 50 then 100 here are the three radio buttons however the font is kind of small we can barely see it so let's apply a style sheet here's a trick that we can do with style sheets we can apply multiple CSS like properties to an entire group of widgets rather than having to type them and apply them individually we will select our window of self set the stylesheet of our window with the set stylesheet method we will add a selector the selector is going to be the name of the widget Q radio button in this case then add a set of curly braces we can apply CSS like properties to an entire group of widgets this way so let's set the font size of all radio buttons to be 40 pixels better let's set the font family to be aial then I will add a little bit of padding around each radio button padding 10 pixels that's pretty good so with radio buttons we can only select one from any one radio button group if I was making a payment I can't pay with a Visa and Mastercard at the same time I can only select one option that's the point of radio buttons we're limited to just one option with the default behavior of Pi qt5 all radio buttons unless explicitly stated are all part of the same group to demonstrate that let's create two additional radio buttons Radio 4 and Radio 5 radio button 4 will be for a payment method rather than a payment type for example we could say we're paying in store radio button 5 will be we're paying online radio buttons 1 through three will be for the payment type radio buttons four and five will be for the payment method we're either paying in store or we're ordering something online we do need to set the geometry for these two radio buttons I'll just copy these two lines add Radio 4 Radio 5 we'll set the ycoordinate of four to be 150 and 5 to B 200 all radio buttons will be within the same button group if I was to select in store we deselect one of these options what I would like is one option from this first group and another option from this other group these buttons are all in the same group I can only select one if I would like to pay with the VISA in store and I click the instore radio button we unselect the radio button for Visa I would like these radio buttons within different groups we need to create two different groups and add them accordingly here's how within our Constructor we will access self declare a button group let's let's name it button group one for Simplicity equals call The Constructor of the class Q button group then pass in to set the parent widget to be the window then we will create button group two we're going to access self select the radio button group button group one call the add button method then pass in a radio button self. radio1 then we'll add Radio 2 and radio three we'll select button group two this time button group two add radio button 4 and radio button 5 the first three radio buttons are within the same group radio buttons four and five are within a different group we can only select one radio button from any one radio button group maybe I would like to pay with a Visa card in store or a MasterCard online or a gift card in store these radio buttons are within different button groups we're limited to one selection in any one radio button group when we select these radio buttons they don't quite do anything for each radio button we have to connect a signal to a slot here's how let's define a method of radio button changed there will be no parameters besides self temporarily I'll write pass we'll fill this in in a moment we will take each radio button let's start with radio one Radio One the signal will be toggled when this radio button is toggled we will connect a slot we will pass in a function or a method self. radio button changed then we will do this with the other radio buttons 1 through five let's print a test message you selected something just to be sure that everything is working you selected something okay we know that that works currently what we're going to need to do is get the sender widget which radio button sent the signal of toggled I will create a local radio button to store that radio button whichever one emitted the signal we can determine that with self. sender method the sender method is going to return the widget that sent the signal so if we select radio button one our radio button will be radio button one if it was five then it's five in this case then we'll determine if our radio button is checked take our radio button use the is checked method this will return a Boolean true or false if it's checked if this returns true then let's print the following I'll use an F string we will get the text of the radio button radio button called the text method to return the text of the radio button is selected all right then let's see if this works let's select Visa Visa is selected MasterCard is selected gift card is selected in store is selected and online is selected that's how to determine which radio button was selected which one is the sender which one sent the signal all right everybody so that is an introduction to radio buttons in pyqt5 why hello everybody today I got to explain line edit widgets in pyqt5 also known as text boxes in pretty much anything ever made ever why are they called line edit widgets I really don't know let's begin from the module of QT widgets we will import the following class of q line edit to create a text box I mean a line edit widget we are accessing our window of self we will call this line edit widget line edit equals call The Constructor of the class q line edit then we will pass in self to add this line edit widget to the window let's set the geometry but we do have a text box in which we can type in stuff I have a method to initialize the user interface within this method I will access self. the line edit widget and set the geometry let's set it in the top left corner where X is 10 Y is 10 set a width 200 is good and a height 40 that's not too bad now the text is really small we can change that by applying a stylesheet access our window with self access our line edit widget then call the set stylesheet method we can pass in some CSS like properties including a font size let's pick 25 pixels and here's my new text box we can read the text now let's also change the font family font family I will pick Ariel this text box by itself it really doesn't do anything we need some way to get the text from the text box let's add a button when we click on the button we will get the text from the text box and do something with it cuz right now it doesn't do anything we will need to import Q push button let's create one button self. button equals call The Constructor of the class Q push button let's say that this is a submit button I will pass in a string of submit and we are adding this button to our window and we do need to set the geometry of the button we're not using a layout manager right now access our window with self access our button that we have previously created in our Constructor then call the set geometry method we'll place our button where X is 210 Y is 10 the width will be 100 and the height will be 40 not too bad let's change the font size of the button I'll copy these two lines of code because because I'm lazy instead of selecting our line edit widget we will select our button that's better if I were to click on the button it doesn't do anything we'll set up the signal of clicked to connect to a method that will do something let's define a method of submit we're submitting something we're submitting the text within the text box and for now all right pass we'll get back to this in a second we're going to take our button self. button we'll connect the signal of clicked clicked. connect method we will connect the method of submit self. submit so when we click on the button we will call this method let's print a test message you clicked the button let's type in something press submit and we get our test message you clicked the button let's get the text from the text box then do something with it let's create a local variable of text text equals now we have to get the text from our line edit widget self. line edit that's the widget to get the the text we can use the text method to return the text then let's print the text I'll use an FST string we'll say hello add a placeholder then display the text so now after typing in something why don't you type in your name then press submit we will display hello your name you could add some placeholder text too let's let's do that here let's take self. line edit widget set placeholder text and let's say enter your name when I run this program we have some placeholder text that says enter your name this time I will type in SpongeBob then press submit hello SpongeBob all right everybody so those are line edit widgets also commonly referred to as text boxes and well everybody those are line edit widgets in pyqt5 hello everybody so in today's video I'm going to explain setting style sheets in pyqt5 CSS means cascading stylesheets if you're not familiar with CSS you can still follow along but knowing CSS is helpful as a reminder I do have a full free course on YouTube on HTML and CSS if you would like to learn more let's begin for this demonstration we will need the following Imports we will be designing some buttons we will import Q push button we'll be working with the layout manager we will import Q widget and for a horizontal layout manager we will need qh boox layout so import these three from the module of QT widgets now in previous topics we've set the geometry of our window since we're using a layout manager we don't necessarily need that anymore so I'm going to delete it in the past I have also created a method to initialize our user interface and we are calling that within the Constructor of our main window we will create three push button widgets self. button one will be the first button equals take our Q push button class and call the Constructor we can add text to the button we will pass that as an argument now since we're using a layout manager we don't need to add this button to self our window we don't need to do that let's create two more buttons we'll have button two and button three button two will say number two button three will say number three now we'll create a layout manager under normal circumstances we can't add a layout manager to our main window with main window widgets there's already a specified layout and format we're going to add a layout manager to a central WID widget and this widget will be added to the main window let's take care of that within our initialized user interface method we will create a central widget equals called The Constructor of Q widget then we will take self that means our window and set the central widget set Central widget then pass in our Central widget to set it then we will create a layout we will call the Constructor within the class of qbox layout let's name this layout hbx for a horizontal box equals call The Constructor within this class we will take our layout of horizontal box then add the following widgets add widget self. button one we'll do this with two and three then the last thing we need to do is take our Central widget call the set layout method then pass in our layout manager and now we should have those three buttons they're all arranged horizontally now we're going to apply some CSS like styling using the method of set style sheet here's how rather than apply these CSS properties individ ually such as self. button one. set stylesheet and in the past we've passed in individual CSS properties we're instead going to set the stylesheet of our window self we have a lot to write instead of double quotes we're going to use triple quotes triple quotes are used to write very long strings in a more organized way all of the CSS properties that we're going to write are are going to be within this set of triple quotes so let me give you a demonstration we could individually apply CSS like properties to each of these widgets but we could select an entire class of widgets too let's select the class of Q push button then add a set of curly braces the following CSS properties will apply to all Q push button widgets So currently this is what we have we'll increase the font size for for every push button so we will add the following property of font size then set it to be 40 pixels each be sure to end each CSS property with a semicolon so the font size is now 40 for every button let's set the font font family I will pick aial let's add some padding we can add some space around the text and the button itself so with padding if I was to set this to 75 pixels we would have 75 pixels worth the space between the text and the border of the button I would like to change the dimensions of the padding so let's apply 15 pixels to the top and bottom of the button and 75 to the sides that's better margin is the space around a button let's set the margin to be 25 pixels now the buttons are more spread out if this was 250 they would really be spread out that's margin it's the space around a widget let's set that back to 25 I'm going to change the border border 3 pixels solid this would change the border of the buttons we now have a black border that's 3 pixels in width if you would like to round the corners we can use border radius I will set that to be 15 pixels with all the buttons the corners are now rounded within our set style sheet method we're applying all of these CSS like properties to every push button now what if you would like to apply CSS properties to Only One widget rather than all of them here's how with each of our widgets buttons 1 2 and three we need to set an object name let's do that before we call the set stylesheet method we will take our buttons self. button one call the set object name method then pass in a name for this widget we'll keep the name the same as button one so let's do this with button two and button three button two button three within the context of set stylesheet we will refer to these widgets by their object name buttons 1 2 and three and now we can select them individually let's say that with button one I would like the background color to be red we're going to access our class of Q push button follow this with a pound sign i' like to call it a hashtag then we need the object name button one button one refers to the widget of button one again I kept the name the same then we need a set of curly braces between the set of curly braces we can list one or many different CSS properties let's change the background color I will set it to be red and now the background color of only that button is red and not all of them if I was to set the background color within the class well then all of them would be red okay so with button two I'll just copy what we have and paste it we are selecting the ID of button two let's set the background color to be green so then the background color is now green and button three button three will be blue if you would like a greater variety of colors I recommend looking up a Color Picker you can just Google Color Picker so if I would like a very specific shade of red I can pick that let's go with that there are a few options provided to you you can use hex values now we have a very specific shade of red you can use RGB RGB and close it within a set of parentheses and then paste those numbers or my favorite which is hsl hsl means Hue saturation and lightness we will enclose our values within hsl if you copy these values directly from Google you would have to remove this degree symbol I like hsl because I can also control the saturation and the lightness pretty easily okay let's pick a very specific shade of green that's good I would say I'll use the hsl values hsl remove the degree symbol and now we have a very specific shade of green and blue that's good I would say that's not too bad if you're already familiar with CSS we can apply pseudo classes such as when we hover over one of the buttons here's how let's copy these three blocks then paste them again we can add CSS properties when we hover over something we have to use the hover pseudo class after the ID of each of our buttons we will add colon hover we can apply the following CSS properties when we hover over the buttons all I'm going to do is up the lightness let's say by 20% each then when we hover over one of the buttons the lightness is going to change we apply the new CSS properties all right everybody so that is a more indepth explanation of the set set stylesheet method in pi qt5