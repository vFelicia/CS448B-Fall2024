hey what's going on everybody it's bro hope you're doing well and in this video i'm going to show you all a few useful functions related to times and dates using the time module in python so sit back relax and enjoy the show all right everybody so the time module let's begin by importing time and the first thing that i'm going to explain to you while is how we can find our computer's epic also pronounced as epoch so this is a date and time in which your computer thinks time began think of it that way at least so we use our epic as a reference point so to find your computer's epic it's going to vary based on your computer and your operating system so to find your computer's epic type time dot c time and as an argument we will pass in zero now what this method will do is that this method will convert a time expressed in seconds and convert it to a readable string so if i was to pass in 0 and print it well then this will display the date and time which is my epic our reference point so for me my epic is wednesday december 31st 6 p.m so i've just added a note that the c time method will convert a time expressed in seconds since epic and convert it to a readable string a readable date and time so for practice let's pass in perhaps one million seconds and see what date and time that we receive so our c time method will return a date and time one million seconds past this epic here so that would be for me monday january 12th about 7 a.m 1970. our next method is the time method of the time module let's print time dot time method and what this method will do is return the current seconds that have passed since our epic using our computer's clock so the number that i end up with is just over 1.6 billion and this is in seconds so for me billion seconds has passed since that date which is my epic i believe it was december 31st 1969 and every time that i rerun this program you can see that the amount of seconds that has passed is actually increasing so that is the time method it will return the current seconds since you're epic using your computer's clock and you know what just for fun let's change the date and time under clock and see what happens so let's change the year to how about the year 2000 change and close so let's see what number we get with the time method now so we get just under 1 billion 948 million seconds have passed and now if you need to retrieve the current date and time well there's one of a few ways in which you could retrieve that but one way is that we can combine both of these methods of the c time method and the time method of the time module so let's print time dot c time and we're going to pass in an amount of seconds into the c time method as an argument so within the c time method we're going to call the time method so the time method will return an amount of seconds since our epic and the c time method will convert that amount of seconds to a readable date and time so the current date and time is saturday january 23rd about 3 p.m 2021 now there is more than one way to get the current date and time another way is to use the local time method and the local time method will create a time object based on the current time so what i'm going to do is create a variable called time object and i just need to explain a few things about time objects so to best explain this i'm going to print our time object now a time object is also referred to as a struct time object it is made up of different keyword arguments there's a year a month day hour minutes seconds day of the week day of the year and this keyword argument here has something to do with daylight savings time so there's quite a few uses with time objects and one way is that we can format them however we want because right now this time object is not in a readable format so to convert this time object into a readable string we'll need the help of a separate function and that is the strf time function str is short for string f4 format and time well for time i guess so this function needs two arguments a format and a time object so our strf time function will accept a format and a time object as an argument so our format is really just a string of different directives and to best explain these i'm going to head to python's official documentation on this subject so here i am on python's website regarding the time module and underneath this section on the strf time function there are different directives that we can embed within our format string that we pass in as an argument depending on the directive that we add we can display a certain format of our date and time so for example if i was to pass in let's say percent lowercase a then we will display the time object's weekday name and you're not limited to just one directive you can add any combination of directives so if i was to add percent m well we would display the month of our date time object as a number one through twelve so there's a bunch of directives here and i'm going to be using some of these so within a string for the format argument i'm going to pass in percent capital b for the name of the month percent d for the day percent y for the year percent h for the hour and to format this i'm going to add a colon to separate hours and minutes percent m for minutes colon percent s for seconds and then we are going to assign all of this to a variable let's say local time and local time will be a string so let's print our local time and the current time is january 23rd 2021 about 3 p.m oh and i almost forgot you can also get the utc time that is the coordinated universal time if you know how that works so if you need that you would just use the gm time method for the utc time coordinated universal time okay next up we have the strp time function and this function will parse a string representation of a time and or date and return a time object so we need to pass in a string representing the date and or time as well as a format string so let's create a time string and this variable is going to be a string representation of a date let's say 20th of april 2020 and what we can do is take this string representation of a time and or date and parse it to a time object so we're going to pass in our time string variable as well as a format string so let's say i would like to parse the day so that would be percent d for day then percent b for name of the month and then comma percent y for year this function will create a time object so let's assign that to a variable time object equals time dot strp time we're passing in our string representation of a time or date as well as a format string and we can print our time object using a print statement however this is going to be in a form that is somewhat difficult to read but you can see at least we have a time object with all of these keywords filled in with anything that we passed in via these format directives that we have now the next function is the asc time function and this function accepts a time object or a tuple representation of a relative time so this time let's create a time tuple and we're going to follow this order we can pass in up to nine values the first value is a year so let's pass in perhaps 2020 a month let's say four a day how about 20 4 hours let's say four minutes 20 and seconds maybe zero let me just fix some of the spacing here okay you can also pass in a numbered day of the week um i'm just going to say zero i don't think it's really that important a day of the year zero and negative one or zero for daylight savings time so we created a time tuple and we can pass in a time object or a tuple representation of a time following this formula so let's pass in our time tuple and this will create a time string a string representation of the time that we create and let's print our time string and we should have april 20th about four in the morning the year 2020 so that is asc time it will convert a tuple representation of a time and date or a time object and convert it to a readable string now another option is to use m k time and mk time will take a tuple representation of a time or a time object and convert it to seconds since epic so april 20th of the year 2020 is about 1.5 billion seconds since our epic date and for me that was december 31st the year 1969 so that is a few useful functions of the time module if you would like a copy of this code i will post all of this to the comment section down below and well yeah that's the time module in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you