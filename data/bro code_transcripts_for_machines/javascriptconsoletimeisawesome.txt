hey what's going on people so in today's video I'm going to explain the time method of console the time method is a tool that allows you to measure the time it takes for a section of code or process to execute it's great for identifying performance bottlenecks to start the time method you'll want to pass in a label this will be a unique identifier to stop keeping track of time you can follow the time method with the time end method then pass in that same label that unique identifier by using a combination of these two methods you can to see how long some process takes for example I will create a for Loop that's going to Loop 1 million times let I equals z continue this as long as I is less than 1 million then i++ it doesn't really matter what we do here do some code here we're just going to Loop a million times so I can see how long this process takes wherever I would like to start this timer I will use console.time I will want to pass in some sort of label some unique identifier let's say test wherever I would like to stop the timer I will again use console but instead use the time end method and pass in that same label within our console it's going to show us how long this process is going to take between when we start and when we end to get from here to here it took 0 9 milliseconds if I were to increase the amount of iterations this time is going to go up for me to Loop 10 million times that took 3.8 milliseconds 100 million is 34 milliseconds let's try a billion 338 milliseconds using the time method could be useful within a function we will create a function to load some data we're just going to pretend to load some data but don't actually do it again I will use a for loop we're just pretending to load data let I equal Z we'll iterate this Loop like a billion times then i++ pretend to load some data if I would like to measure how long this function takes in order to identify any bottlenecks I will use the time method of console console.time I'll need a unique label I'll use the name of the function within quotes as a unique identifier then when this function ends I will follow this with the time and method of console and pass in that same label then we'll need to execute this function let's pretend that our program is running really slow for some reason I can test each part of my program one function at a time let's see how long the loaded data function takes 338 milliseconds that could be a little or a lot depending on what you're doing but here we're just pretending to load some data let's create a function to process some data function process data we are just going to pretend to process some data let I equals z let's Loop through I 1 million times then i++ pretend to process some data if I would like to measure how long this function takes I will use console.time pass in a unique label for example the function name as a string then we will end this timer console.time and pass in that same label then we will execute this function all right let's see how long these functions take if I'm looking at both of these functions and trying to identify any bottlenecks it looks like the load data function is taking a lot longer than the process data function in our make belief scenario we've noticed that our load data function is taken quite a bit of time that's where the time method could be helpful all right everybody that is the time method it's a tool that allows you to measure the time it takes for a section of code or process to execute it's great for identifying performance bottlenecks and well everybody that is the time method in JavaScript