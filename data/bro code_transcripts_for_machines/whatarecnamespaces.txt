hey everyone i have a quick video on namespaces a namespace provides a solution for preventing name conflicts especially in larger projects each entity needs a unique name a namespace allows for identically named entities as long as the namespaces are different now what the heck does that mean suppose we have variable x x equals zero each variable needs a unique name i couldn't create a second variable named x and give this a different value if i were to compile and run this program we would run into an error read declaration of int x so each entity needs unique name but if we use namespaces then two or more entities can share the same name to create a namespace let's do so outside of the main function i will type namespace then some name for the namespace let's say first then a set of parentheses i could create a different version of x i'll give this a different value like one well this would run and compile just fine you can have different versions of the same variable as long as they're within a different namespace just for fun let's create a second namespace namespace second x equals two this is also valid so just to demonstrate a few things i'm going to display what x is if i don't explicitly state what namespace we're using we will use the local version of an entity if i display x x would be zero if i would like the version of x that is found within the first namespace i would take that entity in this case x prefix the namespace let's say first then two colons the two colons is known as the scope resolution operator i'm referring to the version of x that is found within the first namespace and that version of x has a value of one if i need the value of x found within the second namespace i would precede that entity with the second namespace followed by the scope resolution operator so that version of x is two so entities can have the same name as long as they're within a different namespace now one line that you may see is using namespace then the name of a namespace let's say first if we have some entity without a prefix of the namespace it's assumed that we're using the entity found within that particular namespace so if i was to display x while we're using namespace first x would be one and i don't need to add that prefix but if i need xbond within the second namespace i would still need to prefix it with second x is two if i changed using name space to second it's implied we're using the second name space and i don't need that prefix two but i still would if i need x from the first name space one now there's this evil line called using it namespace std for standard now the reason that people include this line is to save a little bit of typing if we're using a namespace std we don't need to include that prefix when we declare strings or we display output with c out just for example like this would still compile and run however the standard namespace has hundreds of different entities let me show you standard there's a high likelihood of a naming conflict for example we have an entity named data one alternative is that we could say using standard output that will cut down on some of the repetitions or using standard string it's a safer alternative to using namespace standard in the future i'm not going to be using namespace standard because i would like to steer people away from that but just in case you see that line you know what it's there for so in conclusion a namespace provides a solution for preventing name conflicts each entity needs a unique name and a namespace allows for identically named entities as long as the namespaces are different so those are namespaces hey if you're enjoying this series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro