it's you bro hope you're doing well and in this video we're going to be discussing for loops in C++ let's get into it for loops are fairly similar to while loops which we covered in the last lesson and at first it might be difficult to understand the differences between the two so for loops are used to repeat some code only a limited amount of times compared to while loops where it can be repeated infinitely so the advantage of for loops is that we know how many times that a for loop is going to iterate before it even begins for example we could create a for loop that can count down from 10 and once we reach 0 perhaps we can display a message such as Happy New Year but first let me give you the basic syntax of a for loop so this is the basic structure for a for loop we have the word for a set of parentheses and then a code block for this plural loop and we'll put whatever code we want within the code block and we'll have that repeat so many times now within the parentheses of the for loop there's going to be three statements and each of these is going to have a specific function and each statement is going to be separated with a semicolon so let's create a for loop sounds good right let's create a program that will begin by counting up to ten and then display a message and then after that we'll do the reverse and count down from ten so we'll need to add that structure that I showed in that last slide so we need the word for a set of parentheses and then a set of curly brackets for the sub set of code for the for loop now there were three statements to fill within the parentheses of the for loop the first is some sort of index or counter and you can declare a counter like variable in here you can name this whatever like index or maybe counter or maybe even X commonly you'll see people declare a variable named type as like index and then we can set this equal to a number perhaps just one so this is our first statement we're setting up a counter for this for loop to track how many times this for loop has repeated next we'll need some sort of condition when do we want this for loop to stop let's say that we want to count up to 10 so we'll continue this for loop as long as I is less than or equal to 10 that's our second statement and next week an increment or decrement our counter and we could just say I plus plus for shorthand so one key feature with for loops is that we know how many times that this for loop is going to repeat before we actually get this even started so if I is one and we're going to continue this for loop as long as I is less than or equal to ten we're going to be repeating this for a loop ten times compared to while loops we don't know how many times we'll be repeating a while loop that's as long as some condition is true so what do we want to do during each iteration of our for loop let's just display whatever our counter I is so see out I then end line and then after we exit the for loop we can display a message such as you can count to ten so this program is simply just going to count to ten and display this message that's basically it but let's test it out then we'll make a more sophisticated program involving four loops okay so this went by fairly quickly because we weren't adding any pauses or anything but you can see that it repeated the for loop ten times and it's just counting how many times it repeated and then once we exited the for loop it continued with the rest of the program and it displayed that message you can count to ten this time we're going to count down from ten so for our counter I let's set this equal to ten and for our condition we'll continue this for loop as long as I is greater than or equal to zero now we're not going to increment I we're going to decrement it so we're going to type in I then minus minus so after each iteration of this for loop we're going to subtract one from our counter and then we're going to display whatever our counter currently is and then once we exit the for loop we will display a different custom message happy new year all right so same process as before let's run this all right so let me expand this window we started from 10 after each iteration of the for loop we're counting down by 1 once we hit 0 then we exit the for loop and it displays our custom message and with this third statement where you can increment or decrement your counter you can also increment it or decremented by a certain amount let's say that we want to count down by 2 well we could say I minus equals 2 so we will then count down by 2 starting from 10 yep you can see that here we're counting down by 2 each time likewise you can do the opposite where you can add as well so if you want to count up by 2 you would just say I plus equal to and it's not limited to just one or two you could do like 3 4 doesn't really matter but commonly people will increment their decrement by 1 and an alternative way of writing this is that you don't necessarily need this third statement within the parentheses you could add this increment or decrement counter at the end of your for loop and this would work just the same too but commonly you'll see people put it within the parentheses so yeah you can see that this worked just the same but there's an alternative way of writing these for loops too but commonly you'll see people have all three statements together for their 4 loops so the main difference between a while loop and a for loop is that a for loop will execute a limited amount of times and we already know how many times the for loop is going to iterate before the loop even begins and with while loops we do not know how many times the while loop will iterate necessarily it's as long as some condition remains true it could be infinite so here's an example of the differences between a for loop and a while loop so imagine we're in the military and our drill sergeant is instructing us to do pushups and he says drop and give me 20 this is a perfect example of a for loop because we already know how many iterations how many pushups were going to be doing we're going to do 20 pushups and then we're going to stop an example of a while loop would be a drill sergeant telling us that we need to do pushups until he says we're done so we're going to start doing pushups until the drill sergeant says we're done then and it could be forever who knows it could be 20 it could be less it could be more its while some condition remains true basically so that's the main difference between a forloop and a while loop we already know how many we're going to do with while loops we don't really know let's create another program involving a for loop this program is going to ask for a word from a user and then it's going to use a for loop to spell out each individual character in the word that we give as user input so this is what we're going to do we'll create a string variable perhaps named word and then we will create a prompt to have the user enter in enter the word to spell then we'll use cin or get line whatever the word is we'll create a for loop so for a set of parentheses and then a set of curly brackets then we'll need to place the three statements within the parentheses of the for loop and we'll have to add the three statements to this for loop the first is the index or counter so we're going to declare a variable named eye and set this equal to zero and the reason that we're setting this to zero is because with strings the first position is always zero and then the next position is one then two and then three so on and so forth next for our condition what we're going to type here is I is less than our word dot then we're going to use the length function so this is going to return the length of whatever word we type in so this might change every time we pick a new word to enter in and for the last statement we're going to increment our counter by one every time we iterate through this for loop now within the code block for the for loop what we're going to type is C out then we're going to type in the word our word variable dot and we're going to use the app function all right and then do you remember in the previous lesson on string functions if we wanted the first character of a string we would put zero within here if we wanted the second character we would put one what we're actually going to do for this for loop is place our counter I within here so during the first iteration I is going to equal zero so we're going to display whatever the first character is then after we complete one cycle the for loop our counter I is going to increase by one so then when we reach this statement for the second time it's going to display the second letter after the next iteration it's going to increment by one again and then it'll display the third letter so it's going to display all the letters of the word that we type in and I think I'll just add a space between each letter there's just one thing I have to fix before we run this program I'm just gonna add a colon at a space to our prompt okay let's test this enter the word to spell I'm going to type in the word pizza and our program will display each letter of the word that we type in so basically a for loop only iterates a limited amount of times and we know how many times it's going to iterate before the loop actually begins so that's basically this lesson on for loops if you would like a copy of the code that we worked on today I'll post it in the comments down below and pin it to the top if you would like additional practice or a project to work on why don't you create your own program that includes a for loop and post it in the comments down below but yeah that is how for loops work in C++ hey you if you enjoyed this lesson then you can help me help you in 3 easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro