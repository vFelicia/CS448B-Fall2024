hey what's going on people it's bro hope you're doing well and in this video i'm going to explain how stages work in java fx so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm welcome one and all in this video we're going to be focusing on stages when i mean stage i'm referring to the stage of a theater or play in that context it's like the stage you performed on during your school's talent show your junior year and you embarrassed yourself in front of the entire school good times a stage is a top level container to hold our fx gui applications it's similar to a jframe and swing in layman's terms it's basically our window so to speak so in this video we'll be customizing our stage in fx let's begin by creating a new fx project if you need to set up your ide to accommodate fx please watch the previous videos in the series let's create a new project i'm using the eclipse ide if you're using intellij idea you'll have a different process but i covered these processes in the previous videos so let's go to file new project javafx project call this project whatever you want i'll call this hellofx finish then if i were to open this project a lot of these objects are not recognized so we just need to make sure that we add our fx library to do that right click on your project folder go to build path add libraries user library next javafx and finish and then we'll just want to be sure that we have our vm arguments or options if you're using intellij setup so right click on your project folder go to run as run configurations arguments and then make sure you have your vm arguments set up and then you can run if you want to now this this is our fx gui it's composed of different layers a stage a scene a scene graph and various nodes it's like a gooey sandwich made of different layers let's break it all down layer by layer let's begin with the stage the stage is a top level container think of it as a window the window for your application it's very similar to a j frame in swing our next layer is a scene we add a scene to the stage and a scene is a drawing surface for graphical content similar to a jpanel in swing next we have a scene graph this is a hierarchical tree of nodes it's a tree data structure to hold and arrange what are called nodes and nodes are all the different components that we add to a scene these can be buttons text boxes images and they are arranged in a tree a hierarchical tree beginning with a root node there's branch nodes and leaf nodes but we'll cover this in a future video you should just be aware that they're out here but we at least need a root node to create a scene and then we add a scene to the stage let's head back to our fx application currently a lot of the work is already done for us and that kind of defeats the purpose of learning how this works so for learning purposes let's delete all of this content within the main class except for the main method but we will clear the main method okay currently our main method extends the application class the application class is the parent class and our main class is the child class so the main class is going to inherit everything that the application class has so in order for this program to work since the application class is the parent class there is an abstract method that we need to inherit and to override so we can just add unimplemented methods so in order for this program to run our main class needs a start method and in order to call the start method it's actually done behind the scenes what we do is call the launch method first within our main method and when we call the main method when we begin this program we receive a string array of what we call arguments and we just need to send our launch method these arguments the launch method is a static method that belongs to the application class and since our main class is a child class of the application class we inherit this method and since this is a static method you could write it as it is currently or you can write it as launch as well but let's just keep it as we have before so the launch method is a static method that we inherit from the application parent class and when you call the launch method we will send our string array of arguments to the launch method and eventually behind the scenes our start method will automatically be called the first thing that we're going to do is to create a stage and when we call the start method we actually receive a stage already with what we had previously before i deleted everything this was called primary stage you can either use this you can name it whatever you want to or we can create our own stage so if you need to create another stage just follow these steps stage come up with a name for the stage i'll call it stage equals new stage all right but since we already have a stage i'm just going to use that and i will rename this as stage to keep things simple so we currently have a stage but if i were to run this we can't actually see the stage so at the end of the start method we're going to use stage dot show to show the stage so you want to be sure to keep this at the end of the start method so now if i were to run this we can actually see the stage but we'll probably want to customize this you can see that it's kind of funky with the colors right now so that's because we need to add a scene to the stage that's the next layer let's add a scene scene and we'll call the scene equals new scene and in order to construct a scene we need to add at least a root node we'll pass in a root node as an argument to the constructor of the scene class but there are various different types of root nodes think of them like layout managers they will dictate how our nodes are components whether they're images text boxes buttons are arranged within a scene but each different type of root node would take me an entire video on explaining how they work and how they arrange the nodes so let's create a very basic type of root node called a group think of it as a grouping of nodes and what people usually do for the root node they will just call this root group root equals new group and we'll need to import something so make sure you're importing the correct import from javafx dot scene these other ones will probably not work so once you have that import we can add the root node to the scene and then we'll add the scene to the stage so at the end before we show the stage we will set the scene stage dot set scene and we will pass in our scene so in summary what we're doing is creating a root node to arrange all of the different nodes that we have are components adding the root node to the scene adding the scene to the stage and then at the end we'll show the stage kind of like it's a play you gotta set the scene before you present the stage this time if i were to run this application with our window our stage that we have we now have a scene added to the stage and do you remember before how we had just a stage while the background on the stage was kind of funky it was white and black and that would change as we resized our stage that we have well now we have a scene added to the stage and our scene is going to resize automatically when we resize the stage and we can change the appearance of our stage and scene as well so let's set the background color of our scene we can pass in a color to the constructor of our scene when we create one so let's say color dot and pick a color may be black so you'll probably need this import as well make sure you get the right one because if you get the wrong import then this will probably not work so now the background of my scene will be black and then you can resize this as well and the scene will adjust accordingly to the size of the stage let's set a title for the stage stage dot set title and we can pass in a string for what we want the title to be stage demo program all right so now with our stage we should now have a title at the top stage demo program let's change the icon in the top left corner of my stage currently it's some sort of lame box so let's change that so i would like to change that icon to the logo of my channel so what i'm going to do is copy my file then go to my source folder and then paste it so with fx fx will begin looking for any images within your source folder with swing it was your project folder so when you paste it make sure it's within your source folder and then i need to make an image out of my file that i have so what i'm going to do is type image and maybe i'll call this icon image icon equals new image and then i'm going to list my file name and or the file path if it's someplace else since this is within my source folder i only need to list the file name and this is icon.png now this is probably going to be something different for you depending on what you named your file and then make sure you get the right import you're looking for import image javafx dot scene dot image and then we can add this icon to my stage that i have so that'll be the next line stage dot get icons follow this with dot add icon and let's give it a try there we go the image that i have is now the icon of my stage and if you have a menu bar at the bottom this will probably change that to you here's a few other useful methods one we can set the width and the height of our stage stage dot set width and pick whatever width you want maybe 420 because 420 is a funny number and i'll set the height to the same number set height and this should change the size of our stage however this is still resizable you can disable that if you need to stage dot set resizable and we will pass in false therefore we should no longer be able to resize this stage you can see that i'm trying but i really can't we can set the x position and y position of where our stage will appear within our computer screen we have to use set x and set y normally with fx fx will place your stage in the middle of your computer screen which is convenient swing doesn't normally do that and let's say stage dot set y and we'll set this to 50. so my stage is now going to appear in the top left corner of my computer screen while approximately and my stage now appears in the top left corner so let me disable that for now and turn those lines into comments oh you guys are going to like this next one we can set our stage to be full screen using the set full screen method and we just need to pass in true so when you run this application your stage is now going to be full screen and if you need to escape just press escape to exit full screen mode and then if you need to change the exit hint as well as the exit key combination normally by default it is escape you can change that if you need to let's begin by changing the exit screen hint so stage dot set full screen exit hint so what we want this to display you can't escape unless you press q and let's change the exit key combination as well stage dot set full screen exit key combination and then as an argument we need to pass in key combination dot value of and let's say q lowercase q all right let's test this you can't escape unless you press q i'm going to press q to escape all right everybody so that's the basics of stages in javafx if you would like a copy of all this i will post all of this in the comments down below and pin it to the top but yeah that's how stages work in javafx hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro foreign