hey what's going on everybody in today's video I'm going to give you an introduction to key events in JavaScript so sit back relax and enjoy the show so what we've discussed in the previous topic is event listeners an event listener can be added to an HTML element they will listen for specific events to create interactive web pages we'll be discussing key down and key up there is a third type of key event called key press however according to the official documentation this event is incompatible with all web browsers so you should avoid using key press a key down event occurs when you press down on a key a key up event occurs when you release a key by adding an event listener to the Dom document we can detect when we press down or release a key here's how we will access our Dom then add an event listener add event listener we have two arguments the event type and a call back when we press down on a key let's do something doesn't matter what key it is any key for this next argument I can either pass in a call back an anonymous function or an arrow function I like Arrow functions so I'm going to use an arrow function we're provided with an event parameter when something happens within our web browser an event object is created we can access it so I'm going to console.log this event object and we'll see the details of it be sure to select your web browser I'm going to press the q key then let's go to inspect console and here's that event the web browser provided us with a keyboard event the key pressed was Q there's a relevant key code of 81 and there's other properties too like was the ALT key being held down at the time it wasn't same thing with the shift key and the target which is the body of our document I'm going to Output the key prop property of the event we'll press a different key I'm going to hold down the F key I'm not releasing it I'm holding it down we're going to consistently fire key down events I would like to detect when I release a key I will use the key up event so let's copy this paste it the event is going to be key up I'll display something else I'm going to use a template string I will display key down equals then I will display this events key let's do this with key up too I'll just copy this key up equals event. key let's go back to our console I'm going to hold down the S key then when I release it we'll have a key up event key up equals s oh one more important thing the arrow keys we have Arrow up arrow down arrow left and arrow right if you ever would like to make some sort of game the arrow keys are also accessible now what we'll do on key down and key up is change an HTML element so to make this simple within our HTML document I'm going to create a div element this div element will have an ID of my box I'll add some text an emoji all right all right let's add a little bit of CSS we will select my box I will set the background color to be light blue we haven't picked light blue yet I will set a width of 200 pixels a height of 200 pixels a font size of 7.5 RM I'll use flex box display Flex justify content Center aine item Center this part is important for the next exercise we are going to set the position to relative for relative positioning I'll set the body of my document to have no margin margin zero all right we are ready we are going to select the ID of my box const my box equals document. getet element by ID the ID that I'm going to select is my box when I press a key down I'm going to change the text content of my box mybox do text content equals I'll pick a different Emoji let's do that one and I'll change the CSS my box. style do background color equals tomato or some other color of you're choosing so when I press down on any key the HTML and CSS is going to change I'm going to release that key but we don't revert back to normal our HTML element stays that way what we'll do is that when we release a key we'll revert these changes by going back to the origin so let's take my box change the text content to equal an emoji because I like emojis we'll use the original one then I will set the background color to be light blue now if I were to hold down a button the HTML and CSS is going to change until I release that button which I am about to now in 3 2 1 go I'm going to try and press the space bars fast fast as I can seizure warning let's go okay it's about time we move on what we're going to do now is using the arrow keys move this element we're going to create a const of move amount when pressing an arrow key how far do we want to move this element let's say 10 for 10 pixels I will create a variable for X think of these as coordinates I will set that to be zero and y y will also be zero X for any horizontal movement and Y for any vertical movement document. addevent listener when we have a key down event I would like to do something I'll write an arrow function we're provided with an event do all this code I only want to do something if a user uses an arrow key so if I was to console.log my event then access the key property let's go to inspect console select your document I would like to do something only if the key pressed is Arrow up arrow down arrow left or Arrow right I don't want any of the other keys I can write this if statement if access our event access its key follow this with the starts with method does this key start with arrow we'll only enter the SI statement if the key of the event is Arrow up arrow down arrow left or Arrow right then we'll write a switch we haven't written any switches for a while we will examine the key of our event with switches we examine a value against matching cases if we have a case of Arrow up if the key of our event matches the case of of Arrow up then do this we'll take our ycoordinate subtract our movement amount which is 10 Yus equals the movement amount and then be sure to break to break out of the switch then we need a case for arrow down arrow down y + equals our movement amount Arrow left Arrow left X for the horizontal axis minus equals the movement amount and then Arrow right arrow right X plus equals the movement amount then outside of the switch but within our if statement we're going to access my box access the style access the top property set it equal to a template string we're going to take our variable of Y for the y coordinate then add pixels take the top property of my box set it equal to the ycoordinate we're going to copy this and do this with the left property set it equal to X in pixels be sure to select the body of your document we can move right with the right arrow key down left and up or diagonal if I hit two keys at once the arrow keys have a default Behavior to scroll you can see that if we go down too far we have a scroll bar on the right hand side we can prevent the default behavior of a key we just have to add this line of code take our event then follow it with the prevent default method so when my element Scrolls off screen it'll disappear we're not going to scroll with it to increase the distance in which this element moves we can increase the move amount let's set it to be 100 now we're moving a lot further with each key press hey this is bro from the future there's one more thing I would like to add to this project when pressing down on a key let's change the text content and the background color much like what we did with the first exercise then when we release a key we'll revert the HTML and the CSS back to normal we're combining the first exercise and the second one and this is the result when I move the arrow keys this guy is going to freak out until I Let Go pretty exciting all right everybody so that is an introduction to key events in JavaScript you're going to add an event listener to the document when you select your document and press a key when the key is pressed down that will create a key down event when you release a key that creates a key up event and well everybody that is an introduction to key events in JavaScript