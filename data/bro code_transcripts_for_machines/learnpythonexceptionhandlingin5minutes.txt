hey everybody so today I got to talk about exception handling in Python an exception is an event that interrupts the normal flow of a program there are many different types of exceptions which include but are not limited to zero division error exceptions when you attempt to divide a number by zero for example 1 / 0 that would interrupt our program we have a zero division error another is a type error that's if we attempt to perform an operation of a value that's of the wrong data type for example 1 plus a string of one that would give us a type error unsupported operand for INT and string value errors tend to happen when you attempt to typ cast a value of the wrong data type so let's say we attempt to typ cast the word Pizza as an integer well Pizza isn't a number we have a value error invalid literal for INT base with 10 pizza so exceptions will interrupt our program if they not handled gracefully and here's how we can do that there's three steps we can write a try accept and finally block any code that's dangerous where it could cause an error you'll place within a tri block for example anytime we accept user input that is considered dangerous code because a user can type in anything so let's say we have a number number equals we will accept some user input we will tell a user to enter to a number then we're going to typ cast it as an integer then I'm going to print 1 divided by whatever the user types in if I were to type in zero we get a zero division error if I type in the word Pizza we get a value error we would like to prevent our program from stopping this code is considered dangerous a user can really type in anything so we're going to surround this code within a tri block we'll type try colon and then indent any code underneath it we're going to try this code if an exception happens we will move on to step two subsequently following the tri block we will add an accept block if we run into one of these exceptions we can execute some alternative code for example a zero division error if some attempts to divide a number by zero we can take a different course of action instead of our program crashing and coming to a halt let's print you can't divide by zero idiot let's attempt to divide by zero enter a number zero you can't divide by zero idiot we have gracefully handled this exception so now let's say somebody typ types in the word Pizza when we're asking for a number well we have a value error well we can chain accept blocks if we encounter a value error let's add an accept block for that accept value error we're going to print enter only numbers please enter a number I'll type in the word Pizza enter only numbers pleas please that's good we're not interrupting our program now what you may see some people do is they will just catch all exceptions except exception now this is actually considered bad practice exception will catch all exceptions however it's too broad of a clause it's good practice to tell the user what went wrong exactly if we resort to just catching all exceptions you may see an error message such as something went wrong I'm looking at you Microsoft we want to tell the user what went wrong exactly I would only catch all exceptions as a last resort first let's try and tell the user what went wrong exactly so I'm going to undo all this code if there's an exception that occurs it's not a zero division error and it's not a value error then we can add that catchall where we catch any unseen exceptions now lastly we have the finally block the finally block always executes regardless if there's an exception or not it's usually used for any sort of cleanup that you need to do such as if you're handling files you may try and open a file and then you'll want to be sure to close that file when you're done with it that would be handled within the finally block but we'll get to file handling pretty soon in the next topic so just for the time being I'm going to print do some cleanup here all right let's test this enter a number I'm going to divide by zero you can't divide by zero and we still execute the finally block enter a number I'll enter in one 1 / 1 is 1 and we still execute that finally block the finally block will be more useful in future videos all you need to know is that it always executes regardless if there's an exception or not all right everybody so that's exception handling an exception is an event that interrupts the normal flow of a program there are many different types of exceptions you can always look under the official python documentation for an extensive list and well everybody that's exception handling in Python