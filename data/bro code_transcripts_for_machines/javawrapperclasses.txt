hey what's going on everybody it's your bro hope you're doing well and in this video i'm going to teach you guys about rapper classes in java so sit back relax and enjoy the show you can become a hero and save our channel by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro hey welcome back guys and gals in this video i'm going to explain wrapper classes a wrapper class provides a way to use primitive data types as reference data types here are a few examples of primitive data types they include but are not limited to booleans chars ants doubles there's still many more out there such as bytes shorts and floats but here are a few of the more common ones that we've been working with so notice that strings are not within this list of primitive data types that's because strings are already reference data types now reference data types have some advantages and disadvantages a few advantages for one would include that they may contain some useful methods for example take the last video on string methods the string class contains some useful methods and strings are an example of a reference data type also reference data types can be used with certain collections and they can be used with for example arraylists which we'll learn about in the next video and a disadvantage of reference data types over primitive data types for one is that reference data types are slower to access if you need to get the value of a primitive data type that is enclosed within a wrapper class it's going to take more steps so if you're working with millions of numbers well it's going to take a lot more time and a lot more processing power to use reference data types compared to primitive data types because primitive data types are a lot faster so each primitive data type has a corresponding rapper class and there's a naming convention with these for the rapper class the first letter is capital and the entire name is for the most part spelled out so boolean would be boolean with a capital b char would be a character with a capital c int is integer with a capital i and double is still double but with a capital d so let's assign a few primitive data types and use the corresponding wrapper class to create a reference data type so java has this feature called auto boxing and unboxing we can directly assign some primitive values to a wrapper class automatically and here's the definition so auto boxing is the automatic conversion that the java compiler makes between primitive data types and their corresponding object wrapper class so let's use auto boxing to assign a primitive data type a few primitive data types to each corresponding wrapper class so let's begin with a boolean value so we're going to list the data type and it's going to be the wrapper class so boolean with a capital b let's call this variable a equals and then we can just use autoboxing to directly assign a permitted value to this reference data type so i'm going to say that boolean a equals true and that is it and let's assign a few others so we have character character b equals let's assign a character maybe the at symbol integer c equals one two three and double d equals let's say 3.14 and what we have done is created four reference data type variables boolean a character b integer c and double d and for fun let's create a string variable as well let's say string e equals whatever your name is so are you beginning to see a pattern here strings are already a reference data type that's why the first letter in the string data type when you declare a variable of this type is capital compared to the primitive data type variables that we've been working with so it's kind of like we've been using reference data types all along when working with strings as we've discussed at the beginning of this video reference data types have a few advantages and disadvantages and one of the advantages is that each wrapper class may contain some useful methods kind of like what we did with the string class in the last video so we already have a string let's look at a few of the methods of boolean wrapper classes so type in the name of the boolean variable a dot and then here are all the methods that you have access to the same thing goes with characters here's a bunch of methods you can use same thing with integers and doubles so reference data types within the wrapper class they have access to some useful methods that you can use for your program not only that but you can use these reference data types with certain collections and we'll be using them for arraylists in the next video so if you need to access the values within a wrapper class well there's a feature called autoboxing and unboxing autoboxing is the automatic conversion that the java compiler makes between primitive data types and their corresponding object wrapper class when we directly assigned some values to each of these reference data types what we have done is auto boxing we automatically converted these primitive values to the corresponding wrapper class automatically but unboxing is the reverse we can convert a wrapper class to its primitive value so what i'm saying is that with unboxing we can treat these reference data type variables as if they were standard primitive values so for example let's say if boolean a is equal to true then we will display this is true so even though this is a reference data type it will still behave as a standard primitive data type because of the unboxing feature and the same thing goes with b except b has to be a character so let's check to see if this is equal to our at sign and this is also true so that is the unboxing feature you can still treat these reference data types as if they were primitives so even though there are a few advantages of wrapper classes over the primitive data type that they may contain there is still the disadvantage that accessing the values contained within a wrapper class still takes a lot more steps compared to using just a raw primitive value so if you're working on a program that contains millions of numbers for example using reference data types using the wrapper class for each primitive value is going to take a lot more steps compared to just using a standard permitted value so primitive values are a lot faster than reference data types so everybody that's the basics of wrapper classes if you would like a copy of all this code i will post all of this in the comments down below don't forget to do me a favor and smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro