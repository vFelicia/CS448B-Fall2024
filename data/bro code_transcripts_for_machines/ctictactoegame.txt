oh yeah what's going on everybody it's you bro hope you're doing well and in this video we're going to create a game of tictactoe so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right let's begin so the first thing that you're going to need is to include these files at the top of your c program and we will create seven different function prototypes so the return type of this first function is void and the name of this function will be reset board our board is going to be a 2d character array and our second function is void print board which will print our 2d character array then with this next function this has a return type event and this will check free spaces if after invoking this function this function returns zero that means the game is over there's no more places to move and we will need void player move when it's the player's turn to move void computer move when it's the computer's turn to move char check winner so we have a few different win conditions to check and void print winner and there is one parameter a single character soap char so these are function prototypes we tend to declare these before the main function because they help with readability after the main function we will give each of these a body so copy and paste those functions and then give each a body and with the parameter for print winner the parameter is char winner now let's head back to the top of our program and there's a few global variables that we're going to declare we could declare these as local variables within the main function but this program is going to get really complicated then if we have to pass around pointers to a twodimensional array so just to keep this simple i'm going to create some global variables there are some downsides to global variables so i tend to not to like to use these so we have a 2d array of characters named board it's our game board and let's create two constants constant char player a naming convention for constance is to make all of the letters uppercase and i will set this to a character of my choice i could be oh or i could be x or something else maybe i could be a dollar sign whatever i'll set myself to be an x and then let's create a constant for the computer constant char computer and computers will be o so within the main function we will declare a local variable char winner and i'll go ahead and set this to an empty space so if our winner is in empty space that means there currently is no winner if player wins then that would be an x if computer wins that's a no within our main function this is acting as a driver for our code so the first thing we'll do is reset our board so we are going to initialize all of the different characters within our twodimensional board so let's head to this function so with our reset board function we need nested loops the outer for loop is for the rows the inner for loop will be for the columns int i set this equal to zero and i need to iterate this for loop three times one for each row that we have and then we need an inner for loop so change the index to j and for each index within our 2d array at index of i and j i will set the sequel to an empty space so when we call the reset board function each element within this 2d array of characters will be an empty space effectively clearing it so back within the main function after resetting our board let's print our board and fill in this function so you can get creative with this here's one thing that i'll use so i'm going to print a space a character a space a vertical bar space character space vertical bar space character these three format specifiers are placeholders the first character i'm going to display is our board at index of zero zero that is row zero column zero followed by board index zero one then board zero two and with the next printf statement let's display something like this a new line three dashes a vertical bar three dashes another vertical bar three dashes then a new line okay so let's copy these paste it once and we need to change these indices so with this third printf statement these indices will be one zero one one one two and then do this again so copy paste 2 0 2 1 2 2. then at the end i'll add a new line printf new line oh let me fix one thing okay so this is what it should be all right now back within our main function we're going to create a while loop and we'll surround our print board function within this while loop so our condition is if winner is equal to an empty space that means there currently is no winner and after invoking the check free spaces function the value returned does not equal zero so let's fill in this check free spaces function within the check free spaces function let's declare a local variable int free spaces and i'll initially set this to nine then we need a nested for loops and i equals zero we will continue this as long as i is less than three i plus plus then create an inner for loop change the index from i to j and within the inner for loop we're going to write an if statement and we are checking to see if our 2d array of characters board at index of i and j does not equal an empty space if whatever spot we're on is currently occupied we will take our free spaces local variable and decrement it by one then outside of our for loops we will return free spaces if we return zero that means the game is over there's no more places a player can move so heading back to our main function it will be let's say the player's turn to move first so invoke the player move function and we'll need to fill this in with the player move function we will declare two local variables intex and y and we will ask a user to enter in a row number and a column number of where they would like to move to so using a printf statement we will enter row number one through three and then use the scan f function to accept some user input so this will be an integer and use the address of operator x so a user is going to enter in numbers one through three for which row that they need but with arrays they always begin with zero but a user is not going to know that so with whatever the user types in we will decrement x by one so this gives us rows zero through two technically then do the same thing with our columns enter column number one through three address of operator y then decrement y we will check to see if the coordinates that the user gave are occupied or not so using an if statement we will check to see if our board at index of x and y does not equal an empty space that means that this spot is currently occupied by another character so let's print something to let a user know invalid move else that spot is open so take our board at index of x and y set the sequel to our player character so we're going to take all of this code and place it within a do while loop so write do while place your code that you just wrote within there and our condition is if our board at index of x and y does not equal an empty space if the spot that the player would like to place their character is currently occupied then we will ask them again to enter some coordinates uh then within our else statement we need to break out of this while loop okay so that is everything for the player move function so then heading back to the main function after the player moves we will check to see if there's a winner winner equals then invoke the check winner function and we will fill in this function next so find the check winner function and we need to check all of the different win conditions so first we will check each row using a for loop so this section of code we will check our rows we'll need a for loop to iterate three times one for each row int i equals zero continue this as long as i is less than three increment i by one so this if statement is going to get a little bit funky we need to check each set of horizontal elements so let's begin with board at index of i and zero so that would be the top left element and we are checking to see if the character here is equal to this character so bored at index i and one and we're checking to see if board at index of i and zero is equal to board at index of i and 2. so here we're checking to see if this element is equal to this element and this element is equal to this element if they're all consistent we have a winner so we will return whatever character is within one of these elements let's say this one so return board at index of i index of zero return whatever character is within here this section of code will check all of the win conditions for each row but now we need columns so check columns and we can copy most of this so copy it and paste it then we just need to change these indices around so if board at index zero i is equal to board at index of one i and board at index of zero i is equal to board at index of two i then we will return whatever character is within board index of zero index of one so this section of code will check for any column when conditions then next we have diagonals there's only two check diagonals so let's copy this section of code paste it so our indices are zero zero is equal to one one one one is in the middle and board at index of zero zero is equal to board at index of two two if so then return zero zero then we have one more diagonal so copy this paste it and here are the elements if board at zero two is equal to board at one one so zero two is the bottom left one one is the middle and board at zero zero equals board at two zero that is the top right corner right here so if we have a diagonal we have a winner so return board at zero two let's say if after checking all of these different win conditions there is no winner then let's return an empty character that means there currently is no winner so then head back to the main function after invoking the check winner function let's write an if statement to see if the game is over so our condition is if winner does not equal an empty space that means there is a winner or after invoking the check free spaces function and the value returned is zero then we will break out of this while loop this is everything done for the player now we need to create a section of code within our while loop for the computer so copy this section of code and paste it and this time it will be the computer's move invoke the computer move function and we will need to fill in the computer move function within the computer move function the computer's move will be randomly generated and to generate some random numbers we'll need a seed so to create a seed to generate random numbers invoke the s rand function pass in time invoke it pass in zero and we will declare intex and int y we will generate two random numbers between zero and two now before we generate some random numbers let's check to see if we even have any free spaces available so our if statement is going to be check free spaces invoke it then if this is greater than zero then we will generate some random numbers and we'll do so within a do while loop so within this dowhile loop we will generate two random numbers between zero and two x equals invoke the rand function modulus three then y equals invoke the rand function modulus three with our condition let's check to see if the spot generated is even open so board at index of x and y does not equal an empty space so we will keep on generating random numbers until there is an open space then escape this while loop so if we find an open space let's take our board at index of x and y set the sequel to our computer player this is all within an if statement else if there are no more spaces available we will invoke the print winner function and pass in an empty space this means that there is no winner it's a draw now let's fill in this print winner function this function is fairly easy if winner is equal to player then we will print you win else if winner is equal to computer then we will print you lose else if there is no winner then it's a tie it's a draw it's a tie within the main function we just have a few more things to add so outside of our while loop we will print our board and print the winner print board and print winner there is one argument whoever the winner is so let's run this once enter row numbers one through three uh let's say one and one so i moved here and the computer moved to row three column two uh let's say row three column three okay so i moved here and the computer is up here so i moved to row three column three and our computer is at row one column three uh then i'll move to the middle two two and it looks like i won this round so let's try this again and we will intentionally lose so one one two one one two two two and unfortunately it looks like i lost this time let's attempt to tie and it looks like it's a tie so looks like this game is working so what if we would like to ask the user if they would like to play again we can easily place our code within a do while loop so within our main function let's create char response and we will create a do while loop so take all of this code after the do while loop beginning with reset board copy it delete it and then paste it within the do while loop at the top of our do while loop let's reset winner and response winner equals an empty space and response equals an empty space then heading to the bottom of our do while loop let's ask if the user would like to play again so after displaying the winner let's create a prompt printf would you like to play again y for yes and for no and i'm just going to clear our buffer by using scanf and accepting a character just in case there is a new line character within our buffer then we will use the scanf function and accept a character after clearing our buffer and we will use the address of operator response now just in case somebody types in lowercase y i would still like to count that as yes so i'm going to take our response set this equal to invoke the to upper function pass in response and with this condition we will continue playing while our response is equal to the character y and at the end let's print thanks for playing okay let's run this one last time all right i win would you like to play again i'll type in y for yes and we have a new game all right it looks like i win so this time i will exit by typing n thanks for playing so yeah everybody that is a game of tictactoe if you would like a copy of this code i'll post this to the comment section down below hey if you found this video helpful you can help me out by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro