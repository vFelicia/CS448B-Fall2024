what's up everybody in today's video we're going to create a working stopwatch using react so sit back relax and enjoy the show okay let's get started within our source folder we're going to create a stopwatch component stopwatch and this is going to be a jsx file we will be working with function based components function stopwatch no parameters then be sure to export it export default stopwatch in this program we'll need three different hooks let's import them import from react use object destructuring we'll need the use State hook use effect as well as use ref from its location of react we do need to return something for the time being we're going to return a fragment okay let's import our stopwatch from our app component we will import stopwatch from its location slash of stopwatch jsx we will return a single stopwatch component and that is all we need for the app component within our stopwatch component we'll make a few declarations we'll be using the use State hook as well as the use ref hook we'll need to check to see if our stopwatch is currently running we will use use state const is running and a Setter for is running equals use State I will set the initial state of is running to be a Boolean of false our stopwatch is not currently running we'll also need to keep track of how much time has elapsed that will also be a state variable const elapsed time and a Setter for elapsed time again we're going to use use State I will set the initial state of our elapsed time to be zero for 0 milliseconds we'll be working with intervals if we start an interval we need to clear it if we're not using it we will use ref to create a constant of interval ID ref equals use ref we will set the initial value of current to be null when we stter stop watch we'll have to get the current time we'll store that as a reference using use ref const start time ref equals use ref I will set the initial value to be zero our start time will be 0 milliseconds a few things we'll need we'll need to use the use effect hook we will pass in a function and a dependency array the dependency array is going to have one state variable of is running basically speaking when we Mount our component and if is running ever changes we'll perform some side code whatever is within use effect this is where we'll start our interval to move time forward we'll get back to that later we will create a function to start to start our stopwatch a function to stop a function to reset and a function to format time format time within our return statement let's return all the HTML we'll need for this program I will create a div element to act as a container this div element will have a class name of stopwatch with this in this div element we will create a nested div element that has a class name of display to display the time when we display the time we will embed some JavaScript and call the format time function within our format time function just so we can display something I'm going to return a template string that displays a bunch of zeros really I'm just using this as a placeholder so we are returning a string of a bunch of zeros we'll have three buttons these three buttons will be within another div element this div element will have a class name of controls we will create a button that has text of start to start the stopwatch this button will have a class name of start dasb button with this button we will set the onclick click event handler to be a JavaScript function we will pass in a call back to the start function to start the stopwatch then we need a button for stop let's copy this button paste it change any instance of start to stop on click will be a call back to stop the class name will be stop button the text will be stop then we need to reset button let's copy our button paste it change any instance of stop to reset we will pass in a call back to the reset function the class name will be reset dasb button and the text will be reset and that is all the HTML that we need go to our CSS stylesheet now we'll apply some CSS within the body of our document we'll use flexbox to display each component display Flex I will set the flex Direction to be a column there's not really going to be any apparent changes until we add more components then I will align items in the center and set the background color to be a light gray but I'll use hsl values I will set the lightness to be 95% okay let's zoom out then I will select the class of stopwatch this class contains our stopwatch everything within it I will again use flex box and really I'll just copy these three properties from the body so display Flex Flex Direction column align item Center I will add a border of 5 pixel solid border radius to smooth the corners of 50 pixels set the background color to be white then add some padding of 30 pixels all right let's work on our display next the text is pretty small we will select the class of display increase the font size to 5 RM set the font family to be mon space or some other font that you like let me Zoom back out I will set the font weight to be bold I'll change the color pick a color for the font color I will set the lightness to be 30% I'll add a text Shadow effect text Shadow 2 pixels by 2 pixels for the vertical and horizontal offset and a blur radius of two pixels and pick a color I'm just going to lower the alpha to 75% just so it's more transparent then add a little bit of margin to the bottom margin bottom 25 pixels okay and that is what we need for our display let's work on our buttons next So within our div element of controls I would like to select all button elements within this class select our class of controls select any buttons within our controls class let's set the font size to be 1.5 RM set the font weight to be bold add some padding of 10 pixels by 20 pixels surround each button with some margin 5 pixels I will set a minimum width of each button to be 125 pixels remove the border with border none use border radius to round the corners 10 pixels when we hover our cursor over a button let's change our cursor to be a pointer and that does work I will set the color the font color to be white we'll change the background color pretty soon we'll also add a transition effect let's select the background color and use an ease transition after 0.5 seconds we will ease let's select our class of start button class start button pick a background color I'll pick something green meaning go cuz we're starting our stopwatch background color green but I'll use hsl values cuz I think they look better I've already prepicked a color I will select these values for the Hue 115 for the saturation 100% for the lightness 40% let's also access the hover sudo class let's copy and paste our start button access the hovers class when we hover our cursor over the button what do we want to do let's take the lightness and subtract 5% 5% from whatever it currently owes I'll set mine to be 35% so the color should get a little bit darker when you hover your cursor over the button let's do this with our stop button we'll copy and paste what we have for our start button change start to stop I'll make the background color red but I'll select something specific for the Stop button I'll set the Hue to be 10 the saturation to be 90 90% And for the lightness 50% let's copy and paste this background color within the hover sudo class set the lightness to be 5% darker and that does work now for the reset button let's make it blue change stop to reset and pick a blue color for the Hue I'll select 205 90% for the saturation for the lightness 60% when we hover our cursor over the reset button I will set the lightness to be 5% darker so 55% and that looks pretty good and we can close out of our CSS stylesheet let's go back to our stopwatch component let's work on the start stop and reset functions when we press the start button we will call this function of start so to start the stopwatch we're going to use the setter for is running and set that to be true true we will set the state of is running to be true once we press the start button we want this program to be running we also need to set the start time reference updating a reference doesn't cause our component to rerender if a state changes it does cause the component to reender we're going to set the start time reference this is an object we will access the current property and set it equal to now we need to calculate what the start time is so if we were to get the date right now this is going to return the current date and time in milliseconds minus the elapse time which is initially zero so just to show you what this looks like I'm going to console.log the current property of my starttime reference object if I was to start or stopwatch will be given the current date and time in milliseconds since Epic think of Epic as when your computer thinks time began it's usually a date around the year 1970 1.7 trillion milliseconds has passed since epic if I were to start the stopwatch again you can see that this number increased slightly we're converting the current date and time into milliseconds by keeping a reference to when we started the stopwatch we can see how many milliseconds has elapsed since then that's kind of the general idea we can get rid of console.log we don't necessarily need it keep it if you would like to stop the stopwatch we're going to set our Boolean of is running to be false that's all we need to do now for reset we're going to set the elapse time to be zero because we would like to reset everything set the state of elapse time to be zero and we will also set is running to be false set is running false if you would like to stop the stop watch when you reset set is running to be false then since we have a dependency array when we Mount this component and anytime the state of is running changes we'll perform some side code I think what we'll do first is check to see if is running is true if is running if our stopwatch is now running we'll need to create an interval to move time forward we will use the set interval function this has two arguments a call back to a function and a time in milliseconds to repeat this interval let's say after every 10 milliseconds we'll perform some code I'll use an arrow function after every 10 milliseconds we will set our elapse time to be a new state we will get the date right now minus whatever our start time was we can use our reference start time ref access the current property remember that was in milliseconds so get the time right now subtract what our start time was and that will give us our elapse time because we're using the setter for elapse time in order to clear this interval we'll need to keep track of it by its unique ID the set interval function returns that ID we will take our reference of interval ID ref it is an object we will access its current property and set it equal to that reference we should add a cleanup function to the end of our use effect hook we will return a function a cleanup function when is running changes or we unmount our component what would we like to do we need to stop the interval from continua if we don't it may lead to unexpected Behavior we will use the clear interval function and pass in that unique ID access the current property of our interval ID reference and clear it that will allow us to clear this interval so our program stops running now we just need to fill in the format time function we have aapse time it's going to be in milliseconds we need to convert it to hours minutes seconds and milliseconds we'll start with hours let hours equals take our elapse time now to convert milliseconds to hours you can follow the formula take our elapse time which is in milliseconds divided by there's 1,000 milliseconds in a second time 60 seconds in a minute time 60 minutes in an hour enclose this equation with the floor method of math math. floor okay let's calculate minutes let's change hours to minutes what we got to do is take 1,00 * 60 modulus 60 modulus gives you the remainder of any division once our minutes unit hit 60 we need to reset it back to zero that's why we're adding modulus 60 we don't want it to continue to 60 or something above 60 then we have seconds let seconds equals elapse time divided 1,00 modulus 60 and milliseconds let milliseconds equals our lapse time modulus 1000 if you don't want to display all four digits of milliseconds we can divide this by 10 to display only the first two digits we will return a template string we will display the hours colon placeholder minutes colon placeholder seconds colon placeholder milliseconds now if you don't want to display hours you can remove that I'll only display minutes seconds and milliseconds so here's what's going on currently let me stop it so we can start we can stop and we can reset however I would like to format the time I would like to display a leading zero while we can use the pad start method of strings so let's take ours equals we'll use typ casting to convert ours to a string then follow this with pad start method pad this number with two zero characters let's do this with minutes minutes equals convert minutes to a string and then pad it with two zeros seconds and milliseconds all right let's see if this works we can start we can stop we can start again we can stop again we can reset we can start and we can stop now the cool thing about doing this in react our stopwatch is a reusable component if I were to go back to my app component I can include as many stopwatches as I would like let's include one two or even three these are all individual components that have their own code to run they all run independently and I can stop them whenever I would like all right everybody that is how to create a stopwatch component using react