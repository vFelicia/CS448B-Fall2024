yo what's going on everybody so in today's video I got to explain updator functions in react an updator function is a function passed as an argument to set State usually for example I have a Setter function for a year if I need to increment my year by one I would just add plus one to year this does in fact work but a better practice would be to pass in an updator function as an argument usually this is represented as an arrow function by passing in an updator function this allows for safe updates based on the previous state you typically see updator functions used with multiple State updates and asynchronous functions it is a good practice to use updator functions whenever possible so in this basic example I've made a counter program we can increment count decrement count and reset count within each of these functions I'm taking my state variable of count adding + one minus one or setting count to equal Z in the case of reset I don't want to increment once I would like to increment twice I will take set count update the state again using count + one this is different for me adding two to count I want to increment count by one twice I will set the state of count twice count + one then count + one if I attempt to run this I will increment count twice with every button click however our count only increases by one during each button click I'm very persistent let's try and set count again because you know the first two times didn't work during each button click I would like to increment count by one three times but we're still only updating by one still here's the reason why we're using the current state of count to calculate the next state after using a Setter function this doesn't trigger an update react batches together updates for performance reasons you would imagine that after these functions we would update but that's not necessarily the case using react we batch together these State updates for performance reasons in reality it's going to look something like this we're taking count which is zero adding one to it count didn't update yet it's still zero add one to it take count which is still zero because we didn't update add one to it in reality what we're doing is setting count to be one three separate times and then updating this would be similar to me hitting the refresh button on my web browser a bunch of times we've sent a bunch of commands to refresh the web browser but we may only end up refreshing once not each time I click the button that's because our web browser has its own event Loop cycle that's a similar way of thinking about it if for some reason you need to use multiple State updates you'll want to use an updator function here's how we're going to write a function our function has one parameter count in this case Arrow then do this let's write an arrow function for each set count so this will work however you'll want to rename count to be something else we're going to be working with the previous state of count not the current state we're using the previous state of count to calculate the next state according to the react documents you'll want to rename count as either something like previous count such as this or you can take the first letter of the state variable in this case C I find taking the first letter of the state variable much more easier to read it's less ver Bose so this will work then when I press the increment button we're updating the state three separate times C represents the previous count not the current count with our updator function we're taking the pending state to calculate the next state not the current state we don't update until later when we pass in an updator function we're adding all of these updator functions to a q a q is a type of data structure a q is similar to a bunch of people waiting in line it's first come first serve the first person in line is going to be helped first so during the next render it will call all of these functions in order rather than batch them all together when using multiple State updates you'll want to be sure to use updator functions it is good practice whenever possible to use updator functions just for consistency even if you're only going to up update the state once it would still be good practice to use an updater function it will help future proof your code in case you ever need to update the state again so now let's take our decrement function currently we're updating the current state of count not the previous state let's begin by setting up a parameter of count Arrow then do this but we'll want to be sure to rename count just to show that we're working with the previous state not the current state let's rename count as the first letter of the state variable which is c c arrow take C minus one let's do this two additional times now when we increment we will increment three separate times and we can decrement three separate times now last we have reset with the setter function we're not dependent on the previous state all we're doing is setting count to be zero if I was going to use use an updator function it would look like this C Arrow C equals z we really don't care about the previous state this would still technically work we don't really need our count for anything we're setting c equal to zero because by passing in zero we're already sending it to be zero in this specific example an updator function wouldn't be necessary because we don't need the previous state all right everybody so those are updator functions it's a function passed as an argument to set State usually when updating a state variable you'll pass in an arrow function if we were working with a state variable of year I would pass in an arrow function that looked like this we have a parameter of Y Arrow let's take y + one if I was incrementing our year by one in this case by using updator functions they allow for safe updates based on the previous state not the current state this allows for multiple State updates and is used with with asynchronous functions it's a good practice to use updat functions whenever possible we will be using updator functions in the future and well everybody those are updator functions in react