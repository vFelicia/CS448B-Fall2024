what's going on everybody so in today's video I'm going to show you how we can fetch data from an API using JavaScript and at the end of this video we're going to create a project where we can fetch some images of Pokemon depending on what Pokemon you type in so sit back relax and enjoy the show all right people so we got to talk about fetch fetch in JavaScript is a function it's used for making HTTP requests to fetch resources including but not limited to Json styled data images files resour ources of that nature the fetch function simplifies asynchronous data fetching it's used for interacting with apis to retrieve and send data asynchronously over the web fetch has two arguments a URL of the resource and an object an object of options I won't be talking about options in this video that's more advanced JavaScript one of which you may see is a method property the default is get to get a resource you can use post to send some data put to replace some data and delete to delete some data so the default is get but we don't need to explicitly state that we'll just be focusing on getting data with only a URL to fetch something we have to use the fetch function and pass in a URL what I thought we could do for this video is fetch some Pokemon data from the Pokemon API if you want to follow along you can go to this URL I would like to fetch some data on Pikachu because everybody knows about Pikachu and here's some of the data on Pikachu this resource is one gigantic object Pikachu has a name an ID number a type Pikachu is an electric type there's stats such as his attack power HP there's even image Sprites which we'll work with later we will copy this URL and paste it within the fetch function we will pass in a string representation of this URL the fetch function is promisebased it's either going to resolve or reject so we should add a then and a catch method to catch any errors error Arrow do this let's console the error if there's an error once the promise resolves we'll be provided with an object a response object take our response object Arrow do this for the time being let's console.log our response just to see what it is exactly so here's our response object the body contains the data we're looking for for Pikachu this response object has a status code of 200 that means it's okay here's where you may see that status code of 404 if you can't locate a resource it has an okay property if fetching this resource was okay okay this is going to be true if not it's false there's also a URL here too now our next step is to convert it to a readable format there's a few different methods there's array buffer blob text and Json these are all methods we're interested in the Json method in this example so our next step is to take our response object convert it to Json using the Json method this is also promise based once This Promise resolves let's follow this with a then method then take the data our Json data that's going to be returned to us Arrow do this let's console.log my data just to see what it is so after fetching data on Pikachu convert the response object to a Json format and here's my data for Pikachu we have a name an ID Pikachu stats such as his HP p and attack and weit and many more things with this Json data you can access one of the properties I would like just Pikachu's name data. name Pikachu data dot weight how much does Pikachu weigh 60 60 units of something whatever unit of measurement they use in Kanto what is Pikachu's ID 25 near the end of this video we're going to fetch the Sprites of the Pokémon now for some reason if we try and access a Pokemon that doesn't exist as of the filming of this video SpongeBob is still not a Pokemon we get a status code of 404 meaning we could not find this resource SpongeBob is not a Pokemon unfortunately so even if we can't locate a resource our promise is still going to resolve it's not going to reject we need to check to see if our response is not okay let me demonstrate I will console.log my response object here's my response object it is not okay your response will be okay if the status is within the 200 range since we have a status of 404 we couldn't locate this resource okay is false we're going to throw an error if our property of okay is false within our first then method we'll write a few statements we need a set of angle brackets before continuing let's check to see if our response access the okay property then use the not logical operator if our response is not okay if it's false we're going to throw a new error and then catch it using the catch method we can write a custom message let's say something like could not fetch resource if our resource is okay we won't execute this code otherwise we will return our response object in a Json format let's try and retrieve Pokemon data on SpongeBob okay we have an error but we have caught this error using the catch method error could not fetch resource then let's get data on Pikachu again and there's Pikachu and his ID number if you would prefer to use a sync and a weit here's how let's delete all this we will create an async function so that we can use a weight within it I will declare a function to fetch data no parameters do all this we will create a try and catch block try and catch catch has one parameter an error if we receive an error let's console. ER error the error within our Tri block we will create a constant of response the fetch function is going to return an object a response object we will await our promise that's returned by fetch then we need to get that URL again let's get data on a different Pokemon another Pokémon that I like is tyion honestly I think tyion is my favorite Pokémon all right here's the stats for tyion I'm going to copy this URL pass it to the fetch function as a string once the promise for fetch resolves we have to see if the response is okay we'll use an if statement if our response object is the okay property not okay if our response is not okay if we can't locate this resource then we will throw a new error let's say could not fetch resource if our response is okay we will create a constant for our data equals await take our response and convert it to Json this also returns a promise that's why we're using a wait then we will console . log our data and then we have to call the fetch data function because I forgot to do that call fetch data and here's the stats for tyion Name tyion ID 157 tyion is a fire type that's how to use a sync and a weight to fetch a resource now that we know what we're doing we're going to create a text box and a button to search a Pokémon and pull up a Sprite of that Pokémon and display it so going to our HTML file we will create an input element with the type attribute of text because it's a text box I will set the ID of this input element to be Pokemon name it's a little small right now we haven't applied any CSS I will add a placeholder uh of enter Pokemon name then we need a button I will create a button element with text of fetch Pokemon I will set the onclick event handler equal to a JavaScript function let's call that function a fetch data then I will add a break after fetching some Pokémon data we have an image to work with I will set the source currently to be an empty string I will display some alternative text if we can't display the image of Pokemon Sprite and I will give this element an ID of Pokemon Sprite to not display the image currently we can access the style access the display property and set it to be none then if we do want to display it we can set display to be a block let's go to our Javascript file within our Tri block we will create a constant of Pokemon name equals document. getet element by ID the ID that I'm selecting is Pokemon name access the value of this input element now if somebody types an uppercase characters I'll take the value make all the letters lowercase I will method chain the two lowercase method two lowercase method with our fetch function we're going to use a template string with a pair of back ticks for the Pokemon's name we will use a placeholder and pass in our Pokemon name variable so now when I type in a Pokemon's name like Bulbasaur we should get data on that Pokemon if it exists so let's go to inspect console and here's data on Bulbasaur Bulbasaur's ID is one Bulbasaur is a grass type and I think he's a poison type too if I'm not mistaken this Json data also has Sprites images of each Pokemon we're going to fetch the front default so we don't need console.log anymore we'll create a constant of Pokemon Sprite to get that image equals take our data access the Sprites property get the front default Sprite then we will get our image element this one that has an ID of Pokemon Sprite const image element equals document. getet element by ID the ID that I'm getting is Pokemon Sprite we will change the CSS of this element take our image element access its source attribute right now it's currently empty our source is an empty string set the source equal to our Pokemon Sprite this is a constant then we will take our image element access the style attribute access the display property and set it equal to be a block because right now it's none now when I type in a Pokemon's name like Charizard and fetch that Pokemon we get the image of that Pokemon it is a little small however it is a Sprite Sprites tend to be very small or we can get Mewtwo or whatever other Pokemon you can think of I think there's like over a thousand Now where's tyion there's tyion all right everybody so that is how to fetch data from an API you got to use the fetch function it's used for making HTTP requests to fetch resources you can fetch Json style data images files the fetch function simplifies asynchronous data fetching it's used for interacting with apis to retrieve and send data asynchronously over the web and well everybody that is how to fetch data from an API using JavaScript