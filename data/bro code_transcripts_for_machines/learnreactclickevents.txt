hey uh so today I'm going to explain click events and how to handle them in react a click event is an interaction when a user clicks on a specific element we can respond to clicks by passing a call back to the onclick event handler in this example we'll create a button let's create a button component go to new file button. jsx we will use a function base component function button then be sure to export it export default button going back to our parent component of app we will need to import our button import button from its location button. jsx then we will create one button component going to our button component we will return a single button element the button will have text of Click me hey for fun I'm just going to add an emoji but you don't have to and I will zoom in so you can see it many HTML elements have an onclick event handler we can set the SQL to a JavaScript callback but we need a function to work with So within our button function we can write an inner function const handle click I will assign this equal to either a function expression or an arrow function I like Arrow functions so I'm going to stick with an arrow function when we click on the button what do we want to do let's console.log the word ouch so we have our function we will set the onclick event handler equal to a callback a call back to this function when we click on the button do this if I went to my console inspect console Let me refresh this if I click on the button we execute this code we will output the word ouch every time I click the button if your function has parameters there's one change we'll need to make let's create a second function const handle Click 2 this function will have a parameter of name we'll use an arrow function we will console.log I'll use a template string let's display the name stop clicking me for the onclick event handler we will set a call back of handle click to but we have parameters that means we need to send a matching number of arguments I will send my first name but feel free to use your name name I didn't click on the button yet I'm going to go to inspect console uh Let me refresh all this I didn't click on the button yet but we've already called that function if you add a set of parentheses after a call back you'll invoke it right away so we don't want to do that if we have arguments we need to send to a function we could wrap this call back within a function expression or an arrow function let's use an arrow function when we click on the button do this that will prevent us from calling this function right away so let's refresh everything then when I click on the button then we execute this code bro stop clicking me bro stop clicking me bro stop clicking me so that's how to send arguments to a function now in this next example We'll add some conditions let's set the onclick attribute to be a call back to handle click if you have more than one line of code for your arrow function you'll need to use a set of curly braces let's add a count variable let count equal Z with our handle click function let's have one parameter a name what would we like to do let's check to see if our count variable is less than three if it is let's increase count by one then console.log I'll use a template string let's add our name parameter you clicked me add a placeholder count time or times else if the user clicked me more than three times let's console.log a different message let's say add a placeholder name stop clicking me with the onclick event handler we have a parameter that means we have to wrap this call back within a function expression or an arrow function let's use an arrow function for Simplicity we'll pass in a first name pass in your own first name so let's save and refresh everything go to inspect console when I click on the button once it's going to display bro you clicked me one time bro you clicked me two times bro you clicked me three times after the third time we'll display a different message bro stop clicking me bro stop clicking me bro stop clicking Me So within your functions you can write some conditions now I need to explain the event parameter let's recreate that handle click function const handle click equals with click events were automatically provided with an event argument it's an object that describes the event that occurred but as a parameter people usually shorten the event parameter to be simply e let's print our event console.log e our event we'll need to set the onclick event handler we have one parameter so we need to WP this within an arrow function handle click for the arrow function we'll have e for the parameter and E for an argument for the handle click function let's click on the button we're now outputting the event its type is synthetic base event and it has all of these properties and methods such as where you clicked on the screen there's a Tim stamp and a Target by utilizing this event object that gives us many different possibilities for this demonstration let's change the text content of the button so there should be a Target property here I am going to change the text content that should be a property yep there it is so what we'll do after clicking on the button we will access that event object follow this with DOT that's the property accessor we're selecting the inner target object then selecting the text content property let's set that equal to be ouch so now when you click on the button the text of the button should change to ouch I'm going to add an emoji to there we go okay let's try this again this will be fun click me ouch there's also the on doubleclick event handler instead of onclick you'll say on double click so when we click on the button once now nothing happens but once I doubleclick that's when we'll execute this function now I'm going to double click ouch if you need to handle a double click you just have to use the on double click event handler all right let's move on from using a button this time let's use an image in my assets folder I do have my profile picture from my YouTube channel find a profile picture of yourself or a picture you like we're going to create a new component let's go to our source folder I will name this component profile picture. jsx we will create a function with the name of profile picture then be sure to export it export default profile picture then going back to our app component we will import our profile picture component from its location profile picture. jsx let's include our profile picture component instead of our button all right so within our profile picture component I will store a URL within a constant constant image URL I will list a relative file path so my image is within my assets folder my file location but it might be different for you mine is going to be SL Source SL assets slash the name of the image including the extension mine is profile. jpeg we will return an image element IMG for an image element I will set the source equal to some JavaScript I need to set a curly braces I will set it equal to my image URL and let's see if that worked yes it did but I'm going to zoom out to like 150 my image is small let's add a handle click function const handle click equals an arrow function to test it let's console.log the word ouch then we'll need to set the on click event handler within our image onclick equals a callback to handle click so let's save and refresh everything let's go to inspect console when you click on your image it should display the word ouch every time you click it let's utilize the event object that's generated we have one parameter e for our event that means we'll have to change the call back to Be an Arrow function e for the parameter Arrow handle click we have one argument of e so what should we do now when we click on the image let's hide the image we'll need to access that event object access the target object that's found within access its style then the display property we will set the display to be none when we click on it so then if you were to click on your image it should disappear so by accessing the event object that gives us a load of different possibilities for what we can do all right everybody so that is an introduction to handling click events in react a click event is an interaction when a user clicks on a specific element we can respond to clicks by passing a call back to the onclick event handler and well everybody that is an introduction to click events in react