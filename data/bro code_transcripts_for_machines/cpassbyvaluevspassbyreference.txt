all right everybody so i'm going to explain the differences between pass by value and pass by reference in this example we'll swap two variables suppose we have two imaginary cups i'll name the first cup x x will contain koolaid then we have cup y which contains water i need to swap these two values we'll need the help of a temporary variable string at temp to swap two variables we would assign a temp equal to x x equals y y equals temp let's display these variables standard output x the variable x i'll add a new line let's copy this paste it y the variable y this should work x now contains water y contains koolaid now check this out what if we create a function to swap two variables for us the return type will be void i'll name this function swap there will be two parameters string x string y let's copy this section of code delete it then paste it within the swap function then you'll need a function declaration at the top of your program then we will invoke this function swap pass our arguments x and y let's see what happens okay what the heck x still contains koolaid y still contains water these values weren't switched within my variables x and y even though we invoked this function so why didn't it work well that's because normally when we pass a variable to a function we're passing by value when we invoke this function we're creating copies of the original values what we have now are two copies of the variable x and y and all we're doing is switching the two copies and not the original values so that's passed by value we're creating copies of the arguments if i need to change the original values of these variables i could instead pass by reference a reference as in a memory address an address in your computer's memory where a value is located i will prefix the address of operator which is an ampersand to these parameter names then add that to your function declaration as well now let's see what happens yeah those two variables were switched x contains water y contains koolaid when we passed by value we created copies of x and y with the parameters when we use the addressof operator we're passing memory addresses to where the original x and y variables are located and then swapping the values just to reinforce this idea let's revert to passing by value i'm going to display the address of x and y then within our swap function let's get rid of this code then i will also display the addresses of x and y see we have four different addresses our original x variable has a different memory address than the one that's within the function same thing goes with y these two addresses are different we have two x variables and two y variables originally within that swap function we were switching the values of the x and y copies if we instead pass by reference let's use that address of operator again well now x and y are referring to the same place they have the same memory addresses that's why the swap function worked when we passed by reference in place of pass by value so that's the main difference between pass by value and pass by reference you should use pass by reference as often as possible unless you have a reason to pass by value if you would like a copy of this code i'll post this in the comment section down below and well yeah that's the main difference between pass by value and pass by reference in c plus